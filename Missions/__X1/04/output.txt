// starting begin ResetFog ;
   0: NOP4
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: NOP4
// Randomize ;
  11: NOP4
// InitVariables ;
  15: NOP4
// InitMacro ;
  19: NOP4
// if debug then
  23: NOP4
  27: IFFALSE 36
// FogOff ( 1 ) ;
  29: LD_INT 1
  31: PPUSH
  32: NOP4
// ChangeSideFog ( 8 , 1 ) ;
  36: LD_INT 8
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: NOP4
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  46: LD_INT 4
  48: PPUSH
  49: LD_INT 3
  51: PPUSH
  52: LD_INT 6
  54: PPUSH
  55: LD_INT 3
  57: PPUSH
  58: LD_INT 2
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 7
  66: PPUSH
  67: NOP4
  71: PPUSH
  72: NOP4
  76: PPUSH
  77: NOP4
// PrepareAmerican ;
  81: NOP4
// PrepareArabian ;
  85: NOP4
// MC_Start ( ) ;
  89: NOP4
// Action ;
  93: NOP4
// end ;
  97: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , selected , am_veh_consturcted ; function InitVariables ; begin
  98: LD_INT 0
 100: PPUSH
// debug := false ;
 101: NOP4
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// game := true ;
 109: NOP4
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// mission_prefix := 11_ ;
 117: NOP4
 121: PUSH
 122: LD_STRING 11_
 124: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 125: NOP4
 129: PUSH
 130: LD_STRING 10c_
 132: ST_TO_ADDR
// ar_run := false ;
 133: NOP4
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// ar_patrol := false ;
 141: NOP4
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// base_captured := false ;
 149: NOP4
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// us_scout := 0 ;
 157: NOP4
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 165: NOP4
 169: PUSH
 170: LD_INT 0
 172: PUSH
 173: LD_INT 0
 175: PUSH
 176: LD_INT 0
 178: PUSH
 179: LD_INT 0
 181: PUSH
 182: LD_INT 0
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: ST_TO_ADDR
// kamikazed := false ;
 192: NOP4
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// artifact_stolen := false ;
 200: NOP4
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// artifact_get := false ;
 208: NOP4
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// game_time := [ 130 130$00 , 120 120$00 , 115 115$00 ] [ Difficulty ] ;
 216: NOP4
 220: PUSH
 221: LD_INT 273000
 223: PUSH
 224: LD_INT 252000
 226: PUSH
 227: LD_INT 241500
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: LIST
 234: PUSH
 235: NOP4
 239: ARRAY
 240: ST_TO_ADDR
// powell_warn := false ;
 241: NOP4
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// loses_counter := 0 ;
 249: NOP4
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// artifact_oncargo := false ;
 257: NOP4
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 265: NOP4
 269: PUSH
 270: LD_STRING 10_GensherEscape_1
 272: PPUSH
 273: NOP4
 277: PPUSH
 278: NOP4
 282: ST_TO_ADDR
// can_kamikazed := false ;
 283: NOP4
 287: PUSH
 288: LD_INT 0
 290: ST_TO_ADDR
// am_veh_consturcted := false ;
 291: NOP4
 295: PUSH
 296: LD_INT 0
 298: ST_TO_ADDR
// end ;
 299: LD_VAR 0 1
 303: RET
// export function CustomInitMacro ; var i ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 308: NOP4
 312: PUSH
 313: NOP4
 317: PUSH
 318: NOP4
 322: PUSH
 323: NOP4
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: LIST
 332: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 333: NOP4
 337: PUSH
 338: NOP4
 342: PUSH
 343: NOP4
 347: PUSH
 348: NOP4
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: LIST
 357: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 3 , 6 , 9 ] [ Difficulty ] , minefield1_left ) ;
 358: LD_INT 1
 360: PPUSH
 361: LD_INT 3
 363: PUSH
 364: LD_INT 6
 366: PUSH
 367: LD_INT 9
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: LIST
 374: PUSH
 375: NOP4
 379: ARRAY
 380: PPUSH
 381: NOP4
 385: PPUSH
 386: NOP4
// MC_SetMinesField ( 2 , [ 3 , 6 , 9 ] [ Difficulty ] , minefield2_left ) ;
 390: LD_INT 2
 392: PPUSH
 393: LD_INT 3
 395: PUSH
 396: LD_INT 6
 398: PUSH
 399: LD_INT 9
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: NOP4
 411: ARRAY
 412: PPUSH
 413: NOP4
 417: PPUSH
 418: NOP4
// MC_SetMinesField ( 3 , [ 3 , 5 , 9 ] [ Difficulty ] , minefield3_left ) ;
 422: LD_INT 3
 424: PPUSH
 425: LD_INT 3
 427: PUSH
 428: LD_INT 5
 430: PUSH
 431: LD_INT 9
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: NOP4
 443: ARRAY
 444: PPUSH
 445: NOP4
 449: PPUSH
 450: NOP4
// for i = 1 to mc_bases do
 454: NOP4
 458: PUSH
 459: DOUBLE
 460: LD_INT 1
 462: DEC
 463: ST_TO_ADDR
 464: NOP4
 468: PUSH
 469: FOR_TO
 470: IFFALSE 494
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 472: NOP4
 476: PPUSH
 477: NOP4
 481: PUSH
 482: NOP4
 486: ARRAY
 487: PPUSH
 488: NOP4
 492: GO 469
 494: POP
 495: POP
// end ;
 496: LD_VAR 0 1
 500: RET
// function Debuger ; var i ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
// if not debug then
 505: NOP4
 509: NOT
 510: IFFALSE 514
// exit ;
 512: GO 550
// game_speed := 5 ;
 514: LD_ADDR_OWVAR 65
 518: PUSH
 519: LD_INT 5
 521: ST_TO_ADDR
// uc_side := 1 ;
 522: LD_ADDR_OWVAR 20
 526: PUSH
 527: LD_INT 1
 529: ST_TO_ADDR
// uc_nation := 1 ;
 530: LD_ADDR_OWVAR 21
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 538: NOP4
 542: PPUSH
 543: LD_INT 1
 545: PPUSH
 546: NOP4
// end ;
 550: LD_VAR 0 1
 554: RET
// every 0 0$1 trigger IsDead ( ar_dep_n ) and IsOk ( ar_dep_w ) do
 555: LD_INT 94
 557: PPUSH
 558: NOP4
 562: PUSH
 563: NOP4
 567: PPUSH
 568: NOP4
 572: AND
 573: IFFALSE 585
 575: GO 577
 577: DISABLE
// SetAchievement ( ACH_EAST ) ; end_of_file
 578: LD_STRING ACH_EAST
 580: PPUSH
 581: NOP4
 585: END
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 586: LD_INT 0
 588: PPUSH
 589: PPUSH
 590: PPUSH
 591: PPUSH
 592: PPUSH
 593: PPUSH
 594: PPUSH
 595: PPUSH
// uc_side := 4 ;
 596: LD_ADDR_OWVAR 20
 600: PUSH
 601: LD_INT 4
 603: ST_TO_ADDR
// uc_nation := 1 ;
 604: LD_ADDR_OWVAR 21
 608: PUSH
 609: LD_INT 1
 611: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 612: NOP4
 616: PUSH
 617: LD_STRING Powell
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_STRING 
 625: PPUSH
 626: NOP4
 630: ST_TO_ADDR
// uc_side := 1 ;
 631: LD_ADDR_OWVAR 20
 635: PUSH
 636: LD_INT 1
 638: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 639: NOP4
 643: PUSH
 644: LD_STRING JMM
 646: PPUSH
 647: NOP4
 651: NOT
 652: PPUSH
 653: NOP4
 657: PPUSH
 658: NOP4
 662: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 663: NOP4
 667: PPUSH
 668: NOP4
 672: PUSH
 673: LD_INT 4
 675: GREATER
 676: IFFALSE 690
// SetClass ( JMM , 1 ) ;
 678: NOP4
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: NOP4
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 690: NOP4
 694: PUSH
 695: LD_STRING Lisa
 697: PPUSH
 698: NOP4
 702: NOT
 703: PPUSH
 704: NOP4
 708: PPUSH
 709: NOP4
 713: ST_TO_ADDR
// if not Lisa then
 714: NOP4
 718: NOT
 719: IFFALSE 734
// Lisa := CreateCharacter ( 10_Lisa ) ;
 721: NOP4
 725: PUSH
 726: LD_STRING 10_Lisa
 728: PPUSH
 729: NOP4
 733: ST_TO_ADDR
// if not Lisa then
 734: NOP4
 738: NOT
 739: IFFALSE 754
// Lisa := CreateCharacter ( 09_Lisa ) ;
 741: NOP4
 745: PUSH
 746: LD_STRING 09_Lisa
 748: PPUSH
 749: NOP4
 753: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 754: NOP4
 758: PUSH
 759: LD_STRING Cornel
 761: PPUSH
 762: NOP4
 766: NOT
 767: PPUSH
 768: NOP4
 772: PPUSH
 773: NOP4
 777: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 778: NOP4
 782: PUSH
 783: LD_STRING Donaldson
 785: PPUSH
 786: NOP4
 790: NOT
 791: PPUSH
 792: NOP4
 796: PPUSH
 797: NOP4
 801: ST_TO_ADDR
// if not Donaldson then
 802: NOP4
 806: NOT
 807: IFFALSE 822
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 809: NOP4
 813: PUSH
 814: LD_STRING 10_Donaldson
 816: PPUSH
 817: NOP4
 821: ST_TO_ADDR
// if not Donaldson then
 822: NOP4
 826: NOT
 827: IFFALSE 842
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 829: NOP4
 833: PUSH
 834: LD_STRING 09_Donaldson
 836: PPUSH
 837: NOP4
 841: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 842: NOP4
 846: PUSH
 847: LD_STRING Bobby
 849: PPUSH
 850: NOP4
 854: NOT
 855: PPUSH
 856: NOP4
 860: PPUSH
 861: NOP4
 865: ST_TO_ADDR
// if not Bobby then
 866: NOP4
 870: NOT
 871: IFFALSE 886
// Bobby := CreateCharacter ( 10_Bobby ) ;
 873: NOP4
 877: PUSH
 878: LD_STRING 10_Bobby
 880: PPUSH
 881: NOP4
 885: ST_TO_ADDR
// if not Bobby then
 886: NOP4
 890: NOT
 891: IFFALSE 906
// Bobby := CreateCharacter ( 09_Bobby ) ;
 893: NOP4
 897: PUSH
 898: LD_STRING 09_Bobby
 900: PPUSH
 901: NOP4
 905: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 906: NOP4
 910: PUSH
 911: LD_STRING Cyrus
 913: PPUSH
 914: NOP4
 918: NOT
 919: PPUSH
 920: NOP4
 924: PPUSH
 925: NOP4
 929: ST_TO_ADDR
// if not Cyrus then
 930: NOP4
 934: NOT
 935: IFFALSE 950
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 937: NOP4
 941: PUSH
 942: LD_STRING 10_Cyrus
 944: PPUSH
 945: NOP4
 949: ST_TO_ADDR
// if not Cyrus then
 950: NOP4
 954: NOT
 955: IFFALSE 970
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 957: NOP4
 961: PUSH
 962: LD_STRING 09_Cyrus
 964: PPUSH
 965: NOP4
 969: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 970: NOP4
 974: PUSH
 975: LD_STRING Denis
 977: PPUSH
 978: NOP4
 982: NOT
 983: PPUSH
 984: NOP4
 988: PPUSH
 989: NOP4
 993: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 994: NOP4
 998: PUSH
 999: LD_STRING Brown
1001: PPUSH
1002: NOP4
1006: NOT
1007: PPUSH
1008: NOP4
1012: PPUSH
1013: NOP4
1017: ST_TO_ADDR
// if not Brown then
1018: NOP4
1022: NOT
1023: IFFALSE 1038
// Brown := CreateCharacter ( 10_Brown ) ;
1025: NOP4
1029: PUSH
1030: LD_STRING 10_Brown
1032: PPUSH
1033: NOP4
1037: ST_TO_ADDR
// if not Brown then
1038: NOP4
1042: NOT
1043: IFFALSE 1058
// Brown := CreateCharacter ( 08_Brown ) ;
1045: NOP4
1049: PUSH
1050: LD_STRING 08_Brown
1052: PPUSH
1053: NOP4
1057: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
1058: NOP4
1062: PUSH
1063: LD_STRING Gladstone
1065: PPUSH
1066: NOP4
1070: NOT
1071: PPUSH
1072: NOP4
1076: PPUSH
1077: NOP4
1081: ST_TO_ADDR
// if not Gladstone then
1082: NOP4
1086: NOT
1087: IFFALSE 1102
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1089: NOP4
1093: PUSH
1094: LD_STRING 10_Gladstone
1096: PPUSH
1097: NOP4
1101: ST_TO_ADDR
// if not Gladstone then
1102: NOP4
1106: NOT
1107: IFFALSE 1122
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1109: NOP4
1113: PUSH
1114: LD_STRING 08_Gladstone
1116: PPUSH
1117: NOP4
1121: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1122: NOP4
1126: PUSH
1127: LD_STRING Houten
1129: PPUSH
1130: NOP4
1134: NOT
1135: PPUSH
1136: NOP4
1140: PPUSH
1141: NOP4
1145: ST_TO_ADDR
// if not Houten then
1146: NOP4
1150: NOT
1151: IFFALSE 1166
// Houten := CreateCharacter ( 10_Houten ) ;
1153: NOP4
1157: PUSH
1158: LD_STRING 10_Houten
1160: PPUSH
1161: NOP4
1165: ST_TO_ADDR
// if not Houten then
1166: NOP4
1170: NOT
1171: IFFALSE 1186
// Houten := CreateCharacter ( 09_Houten ) ;
1173: NOP4
1177: PUSH
1178: LD_STRING 09_Houten
1180: PPUSH
1181: NOP4
1185: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , mission_prefix_prev ) ;
1186: NOP4
1190: PUSH
1191: LD_STRING Cornell
1193: PPUSH
1194: NOP4
1198: NOT
1199: PPUSH
1200: NOP4
1204: PPUSH
1205: NOP4
1209: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1210: NOP4
1214: PUSH
1215: LD_STRING Gary
1217: PPUSH
1218: NOP4
1222: NOT
1223: PPUSH
1224: NOP4
1228: PPUSH
1229: NOP4
1233: ST_TO_ADDR
// if not Gary then
1234: NOP4
1238: NOT
1239: IFFALSE 1254
// Gary := CreateCharacter ( 10_Gary ) ;
1241: NOP4
1245: PUSH
1246: LD_STRING 10_Gary
1248: PPUSH
1249: NOP4
1253: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1254: NOP4
1258: PUSH
1259: LD_STRING Frank
1261: PPUSH
1262: NOP4
1266: NOT
1267: PPUSH
1268: NOP4
1272: PPUSH
1273: NOP4
1277: ST_TO_ADDR
// if not Frank then
1278: NOP4
1282: NOT
1283: IFFALSE 1298
// Frank := CreateCharacter ( 08_Frank ) ;
1285: NOP4
1289: PUSH
1290: LD_STRING 08_Frank
1292: PPUSH
1293: NOP4
1297: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1298: NOP4
1302: PUSH
1303: LD_STRING Kikuchi
1305: PPUSH
1306: NOP4
1310: NOT
1311: PPUSH
1312: NOP4
1316: PPUSH
1317: NOP4
1321: ST_TO_ADDR
// if not Kikuchi then
1322: NOP4
1326: NOT
1327: IFFALSE 1342
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1329: NOP4
1333: PUSH
1334: LD_STRING 08_Kikuchi
1336: PPUSH
1337: NOP4
1341: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1342: NOP4
1346: PUSH
1347: NOP4
1351: PUSH
1352: NOP4
1356: PUSH
1357: NOP4
1361: PUSH
1362: NOP4
1366: PUSH
1367: NOP4
1371: PUSH
1372: NOP4
1376: PUSH
1377: NOP4
1381: PUSH
1382: NOP4
1386: PUSH
1387: NOP4
1391: PUSH
1392: NOP4
1396: PUSH
1397: NOP4
1401: PUSH
1402: NOP4
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: ST_TO_ADDR
// tmp := tmp diff 0 ;
1421: NOP4
1425: PUSH
1426: NOP4
1430: PUSH
1431: LD_INT 0
1433: DIFF
1434: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1435: NOP4
1439: PUSH
1440: NOP4
1444: PUSH
1445: LD_STRING 10_lock
1447: PPUSH
1448: NOP4
1452: UNION
1453: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1454: NOP4
1458: PUSH
1459: NOP4
1463: PUSH
1464: LD_STRING 10c_lock
1466: PPUSH
1467: NOP4
1471: UNION
1472: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1473: LD_STRING 10_lock
1475: PPUSH
1476: NOP4
// DeleteCharacters ( 10c_lock ) ;
1480: LD_STRING 10c_lock
1482: PPUSH
1483: NOP4
// for i in tmp do
1487: NOP4
1491: PUSH
1492: NOP4
1496: PUSH
1497: FOR_IN
1498: IFFALSE 1536
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1500: NOP4
1504: PPUSH
1505: NOP4
1509: PUSH
1510: LD_INT 8
1512: PUSH
1513: LD_INT 2
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: IN
1520: IFFALSE 1534
// SetClass ( i , class_soldier ) ;
1522: NOP4
1526: PPUSH
1527: LD_INT 1
1529: PPUSH
1530: NOP4
1534: GO 1497
1536: POP
1537: POP
// if tmp < 12 then
1538: NOP4
1542: PUSH
1543: LD_INT 12
1545: LESS
1546: IFFALSE 1640
// begin k := 16 - tmp ;
1548: NOP4
1552: PUSH
1553: LD_INT 16
1555: PUSH
1556: NOP4
1560: MINUS
1561: ST_TO_ADDR
// for i = 1 to k do
1562: NOP4
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: NOP4
1576: PUSH
1577: FOR_TO
1578: IFFALSE 1638
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1580: LD_INT 0
1582: PPUSH
1583: LD_INT 1
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: LD_INT 3
1591: PUSH
1592: LD_INT 4
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 1
1603: PPUSH
1604: LD_INT 4
1606: PPUSH
1607: NOP4
1611: ARRAY
1612: PPUSH
1613: LD_INT 6
1615: PPUSH
1616: NOP4
// tmp := tmp ^ CreateHuman ;
1620: NOP4
1624: PUSH
1625: NOP4
1629: PUSH
1630: NOP4
1634: ADD
1635: ST_TO_ADDR
// end ;
1636: GO 1577
1638: POP
1639: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1640: NOP4
1644: PUSH
1645: LD_STRING 1
1647: PPUSH
1648: LD_INT 12
1650: PPUSH
1651: LD_INT 12
1653: PPUSH
1654: LD_INT -5
1656: PUSH
1657: NOP4
1661: PUSH
1662: LD_INT -2
1664: PUSH
1665: LD_INT -3
1667: PUSH
1668: LD_INT -5
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: NOP4
1682: ADD
1683: PUSH
1684: LD_INT -6
1686: PUSH
1687: LD_INT -4
1689: PUSH
1690: NOP4
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: LIST
1699: ADD
1700: PPUSH
1701: LD_INT 1
1703: PUSH
1704: LD_INT 4
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 3
1713: PUSH
1714: LD_INT 0
1716: PUSH
1717: LD_INT 5
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 4
1727: PUSH
1728: LD_INT 0
1730: PUSH
1731: LD_INT 3
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 5
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 2
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PPUSH
1759: NOP4
1763: ST_TO_ADDR
// others := tmp diff selected ;
1764: NOP4
1768: PUSH
1769: NOP4
1773: PUSH
1774: NOP4
1778: DIFF
1779: ST_TO_ADDR
// others := others diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1780: NOP4
1784: PUSH
1785: NOP4
1789: PUSH
1790: NOP4
1794: PUSH
1795: NOP4
1799: PUSH
1800: NOP4
1804: PUSH
1805: NOP4
1809: PUSH
1810: NOP4
1814: PUSH
1815: NOP4
1819: PUSH
1820: NOP4
1824: PUSH
1825: NOP4
1829: PUSH
1830: NOP4
1834: PUSH
1835: NOP4
1839: PUSH
1840: NOP4
1844: PUSH
1845: NOP4
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: DIFF
1864: ST_TO_ADDR
// if others then
1865: NOP4
1869: IFFALSE 1883
// SaveCharacters ( others , 11_others ) ;
1871: NOP4
1875: PPUSH
1876: LD_STRING 11_others
1878: PPUSH
1879: NOP4
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1883: NOP4
1887: PUSH
1888: LD_INT 3
1890: PUSH
1891: LD_INT 1
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 4
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 2
1908: PUSH
1909: LD_INT 2
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 5
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 1
1932: PUSH
1933: LD_INT 5
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 2
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 1
1950: PUSH
1951: LD_INT 7
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 3
1962: PUSH
1963: LD_INT 2
1965: PUSH
1966: LD_INT 1
1968: PUSH
1969: LD_INT 7
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: ST_TO_ADDR
// for i in JMM ^ selected do
1985: NOP4
1989: PUSH
1990: NOP4
1994: PUSH
1995: NOP4
1999: ADD
2000: PUSH
2001: FOR_IN
2002: IFFALSE 2195
// begin if GetClass ( i ) = 3 then
2004: NOP4
2008: PPUSH
2009: NOP4
2013: PUSH
2014: LD_INT 3
2016: EQUAL
2017: IFFALSE 2176
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
2019: LD_ADDR_OWVAR 37
2023: PUSH
2024: NOP4
2028: PUSH
2029: LD_INT 1
2031: ARRAY
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
2037: LD_ADDR_OWVAR 39
2041: PUSH
2042: NOP4
2046: PUSH
2047: LD_INT 1
2049: ARRAY
2050: PUSH
2051: LD_INT 2
2053: ARRAY
2054: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
2055: LD_ADDR_OWVAR 38
2059: PUSH
2060: NOP4
2064: PUSH
2065: LD_INT 1
2067: ARRAY
2068: PUSH
2069: LD_INT 3
2071: ARRAY
2072: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2073: LD_ADDR_OWVAR 40
2077: PUSH
2078: NOP4
2082: PUSH
2083: LD_INT 1
2085: ARRAY
2086: PUSH
2087: LD_INT 4
2089: ARRAY
2090: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2091: NOP4
2095: PUSH
2096: NOP4
2100: PPUSH
2101: LD_INT 1
2103: PPUSH
2104: NOP4
2108: ST_TO_ADDR
// veh := CreateVehicle ;
2109: NOP4
2113: PUSH
2114: NOP4
2118: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2119: NOP4
2123: PPUSH
2124: NOP4
2128: PPUSH
2129: LD_INT 0
2131: PPUSH
2132: NOP4
// PlaceHumanInUnit ( i , veh ) ;
2136: NOP4
2140: PPUSH
2141: NOP4
2145: PPUSH
2146: NOP4
// if i = JMM then
2150: NOP4
2154: PUSH
2155: NOP4
2159: EQUAL
2160: IFFALSE 2174
// SetMark ( veh , 1 ) ;
2162: NOP4
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: NOP4
// end else
2174: GO 2193
// PlaceUnitArea ( i , am_hum_start , false ) ;
2176: NOP4
2180: PPUSH
2181: NOP4
2185: PPUSH
2186: LD_INT 0
2188: PPUSH
2189: NOP4
// end ;
2193: GO 2001
2195: POP
2196: POP
// vc_chassis := us_medium_tracked ;
2197: LD_ADDR_OWVAR 37
2201: PUSH
2202: LD_INT 3
2204: ST_TO_ADDR
// vc_engine := engine_solar ;
2205: LD_ADDR_OWVAR 39
2209: PUSH
2210: LD_INT 2
2212: ST_TO_ADDR
// vc_control := control_computer ;
2213: LD_ADDR_OWVAR 38
2217: PUSH
2218: LD_INT 3
2220: ST_TO_ADDR
// vc_weapon := us_radar ;
2221: LD_ADDR_OWVAR 40
2225: PUSH
2226: LD_INT 11
2228: ST_TO_ADDR
// veh := CreateVehicle ;
2229: NOP4
2233: PUSH
2234: NOP4
2238: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2239: NOP4
2243: PPUSH
2244: LD_INT 87
2246: PPUSH
2247: LD_INT 142
2249: PPUSH
2250: LD_INT 0
2252: PPUSH
2253: NOP4
// end ; end_of_file
2257: LD_VAR 0 1
2261: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2262: LD_INT 0
2264: PPUSH
2265: PPUSH
2266: PPUSH
2267: PPUSH
2268: PPUSH
2269: PPUSH
// if Difficulty = 1 then
2270: NOP4
2274: PUSH
2275: LD_INT 1
2277: EQUAL
2278: IFFALSE 2375
// begin tmp := [ [ 129 , 45 ] , [ 143 , 58 ] , [ 184 , 113 ] , [ 163 , 107 ] ] ;
2280: NOP4
2284: PUSH
2285: LD_INT 129
2287: PUSH
2288: LD_INT 45
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 143
2297: PUSH
2298: LD_INT 58
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: LD_INT 184
2307: PUSH
2308: LD_INT 113
2310: PUSH
2311: EMPTY
2312: LIST
2313: LIST
2314: PUSH
2315: LD_INT 163
2317: PUSH
2318: LD_INT 107
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: ST_TO_ADDR
// for i in tmp do
2331: NOP4
2335: PUSH
2336: NOP4
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2373
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
2344: NOP4
2348: PUSH
2349: LD_INT 1
2351: ARRAY
2352: PPUSH
2353: NOP4
2357: PUSH
2358: LD_INT 2
2360: ARRAY
2361: PPUSH
2362: NOP4
2366: PPUSH
2367: NOP4
2371: GO 2341
2373: POP
2374: POP
// end ; skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
2375: NOP4
2379: PUSH
2380: LD_INT 5
2382: PUSH
2383: LD_INT 6
2385: PUSH
2386: LD_INT 7
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: PUSH
2394: NOP4
2398: ARRAY
2399: ST_TO_ADDR
// uc_side := 2 ;
2400: LD_ADDR_OWVAR 20
2404: PUSH
2405: LD_INT 2
2407: ST_TO_ADDR
// uc_nation := 2 ;
2408: LD_ADDR_OWVAR 21
2412: PUSH
2413: LD_INT 2
2415: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2416: LD_ADDR_OWVAR 37
2420: PUSH
2421: LD_INT 14
2423: ST_TO_ADDR
// vc_engine := engine_siberite ;
2424: LD_ADDR_OWVAR 39
2428: PUSH
2429: LD_INT 3
2431: ST_TO_ADDR
// vc_control := control_manual ;
2432: LD_ADDR_OWVAR 38
2436: PUSH
2437: LD_INT 1
2439: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2440: LD_ADDR_OWVAR 40
2444: PUSH
2445: LD_INT 31
2447: ST_TO_ADDR
// for i = 1 to 3 do
2448: NOP4
2452: PUSH
2453: DOUBLE
2454: LD_INT 1
2456: DEC
2457: ST_TO_ADDR
2458: LD_INT 3
2460: PUSH
2461: FOR_TO
2462: IFFALSE 2546
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2464: LD_INT 0
2466: PPUSH
2467: LD_INT 3
2469: PPUSH
2470: NOP4
2474: PPUSH
2475: NOP4
// un := CreateVehicle ;
2479: NOP4
2483: PUSH
2484: NOP4
2488: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2489: NOP4
2493: PPUSH
2494: LD_INT 0
2496: PPUSH
2497: LD_INT 5
2499: PPUSH
2500: NOP4
2504: PPUSH
2505: NOP4
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2509: NOP4
2513: PPUSH
2514: LD_INT 156
2516: PPUSH
2517: LD_INT 15
2519: PPUSH
2520: LD_INT 6
2522: PPUSH
2523: LD_INT 0
2525: PPUSH
2526: NOP4
// PlaceHumanInUnit ( CreateHuman , un ) ;
2530: NOP4
2534: PPUSH
2535: NOP4
2539: PPUSH
2540: NOP4
// end ;
2544: GO 2461
2546: POP
2547: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , [ 3 , 4 , 5 ] [ Difficulty ] , - 1 , 4 ] ) ;
2548: NOP4
2552: PUSH
2553: LD_INT 94
2555: PPUSH
2556: NOP4
2560: PPUSH
2561: LD_STRING dammam
2563: PPUSH
2564: NOP4
2568: PPUSH
2569: LD_INT 10000
2571: PUSH
2572: LD_INT 1000
2574: PUSH
2575: LD_INT 300
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: PPUSH
2583: LD_INT 1
2585: NEG
2586: PUSH
2587: LD_INT 3
2589: PUSH
2590: LD_INT 4
2592: PUSH
2593: LD_INT 5
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: LIST
2600: PUSH
2601: NOP4
2605: ARRAY
2606: PUSH
2607: LD_INT 1
2609: NEG
2610: PUSH
2611: LD_INT 4
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: PPUSH
2620: NOP4
2624: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , [ 3 , 3 , 4 ] [ Difficulty ] , 2 , 0 ] ) ;
2625: NOP4
2629: PUSH
2630: NOP4
2634: PUSH
2635: LD_INT 122
2637: PPUSH
2638: NOP4
2642: PPUSH
2643: LD_STRING 
2645: PPUSH
2646: NOP4
2650: PPUSH
2651: LD_INT 500
2653: PUSH
2654: LD_INT 60
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: PPUSH
2665: LD_INT 1
2667: NEG
2668: PUSH
2669: LD_INT 3
2671: PUSH
2672: LD_INT 3
2674: PUSH
2675: LD_INT 4
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: LIST
2682: PUSH
2683: NOP4
2687: ARRAY
2688: PUSH
2689: LD_INT 2
2691: PUSH
2692: LD_INT 0
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: PPUSH
2701: NOP4
2705: UNION
2706: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2707: NOP4
2711: PUSH
2712: NOP4
2716: PPUSH
2717: NOP4
2721: PPUSH
2722: LD_STRING jeddah
2724: PPUSH
2725: NOP4
2729: PPUSH
2730: LD_INT 700
2732: PUSH
2733: LD_INT 300
2735: PUSH
2736: LD_INT 10
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: LIST
2743: PPUSH
2744: LD_INT 1
2746: NEG
2747: PUSH
2748: LD_INT 5
2750: PUSH
2751: LD_INT 3
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: PPUSH
2763: NOP4
2767: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2768: NOP4
2772: PUSH
2773: NOP4
2777: PPUSH
2778: NOP4
2782: PPUSH
2783: LD_STRING riyadh
2785: PPUSH
2786: NOP4
2790: PPUSH
2791: LD_INT 500
2793: PUSH
2794: LD_INT 60
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: LIST
2804: PPUSH
2805: LD_INT 4
2807: PUSH
2808: LD_INT 2
2810: PUSH
2811: LD_INT 3
2813: PUSH
2814: LD_INT 1
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: LIST
2821: LIST
2822: PPUSH
2823: NOP4
2827: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2828: NOP4
2832: PUSH
2833: NOP4
2837: PPUSH
2838: NOP4
2842: PPUSH
2843: LD_STRING 
2845: PPUSH
2846: NOP4
2850: PPUSH
2851: LD_INT 500
2853: PUSH
2854: LD_INT 50
2856: PUSH
2857: LD_INT 0
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: PPUSH
2865: LD_INT 1
2867: NEG
2868: PUSH
2869: LD_INT 3
2871: PUSH
2872: LD_INT 3
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: PPUSH
2884: NOP4
2888: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2889: NOP4
2893: PUSH
2894: NOP4
2898: PUSH
2899: NOP4
2903: PUSH
2904: NOP4
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: LIST
2913: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2914: NOP4
2918: PUSH
2919: LD_INT 22
2921: PUSH
2922: LD_INT 2
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 30
2931: PUSH
2932: LD_INT 31
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: LD_INT 58
2941: PUSH
2942: EMPTY
2943: LIST
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: LIST
2949: PPUSH
2950: NOP4
2954: PUSH
2955: FOR_IN
2956: IFFALSE 3081
// begin if GetBase ( i ) then
2958: NOP4
2962: PPUSH
2963: NOP4
2967: IFFALSE 2971
// continue ;
2969: GO 2955
// d := GetDir ( i ) ;
2971: NOP4
2975: PUSH
2976: NOP4
2980: PPUSH
2981: NOP4
2985: ST_TO_ADDR
// if d < 3 then
2986: NOP4
2990: PUSH
2991: LD_INT 3
2993: LESS
2994: IFFALSE 3012
// d := d + 3 else
2996: NOP4
3000: PUSH
3001: NOP4
3005: PUSH
3006: LD_INT 3
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3026
// d := d - 3 ;
3012: NOP4
3016: PUSH
3017: NOP4
3021: PUSH
3022: LD_INT 3
3024: MINUS
3025: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
3026: LD_INT 0
3028: PPUSH
3029: LD_INT 8
3031: PPUSH
3032: NOP4
3036: PPUSH
3037: NOP4
// un := CreateHuman ;
3041: NOP4
3045: PUSH
3046: NOP4
3050: ST_TO_ADDR
// SetDir ( un , d ) ;
3051: NOP4
3055: PPUSH
3056: NOP4
3060: PPUSH
3061: NOP4
// PlaceHumanInUnit ( un , i ) ;
3065: NOP4
3069: PPUSH
3070: NOP4
3074: PPUSH
3075: NOP4
// end ;
3079: GO 2955
3081: POP
3082: POP
// if Difficulty > 1 then
3083: NOP4
3087: PUSH
3088: LD_INT 1
3090: GREATER
3091: IFFALSE 3462
// begin ar_kamikadze := [ ] ;
3093: NOP4
3097: PUSH
3098: EMPTY
3099: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3100: LD_INT 0
3102: PPUSH
3103: LD_INT 1
3105: PPUSH
3106: NOP4
3110: PPUSH
3111: NOP4
// un := CreateHuman ;
3115: NOP4
3119: PUSH
3120: NOP4
3124: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3125: NOP4
3129: PPUSH
3130: LD_INT 3
3132: PPUSH
3133: NOP4
// PlaceUnitXY ( un , 23 , 44 , false ) ;
3137: NOP4
3141: PPUSH
3142: LD_INT 23
3144: PPUSH
3145: LD_INT 44
3147: PPUSH
3148: LD_INT 0
3150: PPUSH
3151: NOP4
// ComCrawl ( un ) ;
3155: NOP4
3159: PPUSH
3160: NOP4
// un := CreateHuman ;
3164: NOP4
3168: PUSH
3169: NOP4
3173: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3174: NOP4
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: NOP4
// PlaceUnitXY ( un , 30 , 39 , false ) ;
3186: NOP4
3190: PPUSH
3191: LD_INT 30
3193: PPUSH
3194: LD_INT 39
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: NOP4
// ComCrawl ( un ) ;
3204: NOP4
3208: PPUSH
3209: NOP4
// PrepareHuman ( false , 17 , skill ) ;
3213: LD_INT 0
3215: PPUSH
3216: LD_INT 17
3218: PPUSH
3219: NOP4
3223: PPUSH
3224: NOP4
// un := CreateHuman ;
3228: NOP4
3232: PUSH
3233: NOP4
3237: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3238: NOP4
3242: PPUSH
3243: LD_INT 3
3245: PPUSH
3246: NOP4
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3250: NOP4
3254: PPUSH
3255: LD_INT 45
3257: PPUSH
3258: LD_INT 86
3260: PPUSH
3261: LD_INT 0
3263: PPUSH
3264: NOP4
// ComHold ( un ) ;
3268: NOP4
3272: PPUSH
3273: NOP4
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3277: NOP4
3281: PUSH
3282: NOP4
3286: PPUSH
3287: NOP4
3291: PUSH
3292: LD_INT 1
3294: PLUS
3295: PPUSH
3296: NOP4
3300: PPUSH
3301: NOP4
3305: ST_TO_ADDR
// un := CreateHuman ;
3306: NOP4
3310: PUSH
3311: NOP4
3315: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3316: NOP4
3320: PPUSH
3321: LD_INT 3
3323: PPUSH
3324: NOP4
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3328: NOP4
3332: PPUSH
3333: LD_INT 60
3335: PPUSH
3336: LD_INT 85
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: NOP4
// ComHold ( un ) ;
3346: NOP4
3350: PPUSH
3351: NOP4
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3355: NOP4
3359: PUSH
3360: NOP4
3364: PPUSH
3365: NOP4
3369: PUSH
3370: LD_INT 1
3372: PLUS
3373: PPUSH
3374: NOP4
3378: PPUSH
3379: NOP4
3383: ST_TO_ADDR
// un := CreateHuman ;
3384: NOP4
3388: PUSH
3389: NOP4
3393: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3394: NOP4
3398: PPUSH
3399: LD_INT 3
3401: PPUSH
3402: NOP4
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3406: NOP4
3410: PPUSH
3411: LD_INT 222
3413: PPUSH
3414: LD_INT 166
3416: PPUSH
3417: LD_INT 0
3419: PPUSH
3420: NOP4
// ComHold ( un ) ;
3424: NOP4
3428: PPUSH
3429: NOP4
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3433: NOP4
3437: PUSH
3438: NOP4
3442: PPUSH
3443: NOP4
3447: PUSH
3448: LD_INT 1
3450: PLUS
3451: PPUSH
3452: NOP4
3456: PPUSH
3457: NOP4
3461: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3462: NOP4
3466: PUSH
3467: EMPTY
3468: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3469: LD_INT 1
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: NOP4
3479: PPUSH
3480: NOP4
// hc_name := Pavel Grigorovic ;
3484: LD_ADDR_OWVAR 26
3488: PUSH
3489: LD_STRING Pavel Grigorovic
3491: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3492: LD_ADDR_OWVAR 33
3496: PUSH
3497: LD_STRING SecondCharsGal
3499: ST_TO_ADDR
// hc_face_number := 4 ;
3500: LD_ADDR_OWVAR 34
3504: PUSH
3505: LD_INT 4
3507: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3508: NOP4
3512: PUSH
3513: NOP4
3517: PPUSH
3518: LD_INT 1
3520: PPUSH
3521: NOP4
3525: PPUSH
3526: NOP4
3530: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3531: LD_INT 2
3533: PPUSH
3534: LD_INT 4
3536: PPUSH
3537: NOP4
3541: PPUSH
3542: NOP4
// hc_name := Lucy Sebel ;
3546: LD_ADDR_OWVAR 26
3550: PUSH
3551: LD_STRING Lucy Sebel
3553: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3554: LD_ADDR_OWVAR 33
3558: PUSH
3559: LD_STRING SecondCharsGal
3561: ST_TO_ADDR
// hc_face_number := 15 ;
3562: LD_ADDR_OWVAR 34
3566: PUSH
3567: LD_INT 15
3569: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3570: NOP4
3574: PUSH
3575: NOP4
3579: PPUSH
3580: LD_INT 2
3582: PPUSH
3583: NOP4
3587: PPUSH
3588: NOP4
3592: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3593: LD_INT 2
3595: PPUSH
3596: LD_INT 4
3598: PPUSH
3599: NOP4
3603: PPUSH
3604: NOP4
// hc_gallery :=  ;
3608: LD_ADDR_OWVAR 33
3612: PUSH
3613: LD_STRING 
3615: ST_TO_ADDR
// hc_name :=  ;
3616: LD_ADDR_OWVAR 26
3620: PUSH
3621: LD_STRING 
3623: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3624: NOP4
3628: PUSH
3629: NOP4
3633: PPUSH
3634: LD_INT 3
3636: PPUSH
3637: NOP4
3641: PPUSH
3642: NOP4
3646: ST_TO_ADDR
// hc_sex := sex_male ;
3647: LD_ADDR_OWVAR 27
3651: PUSH
3652: LD_INT 1
3654: ST_TO_ADDR
// hc_class = 11 ;
3655: LD_ADDR_OWVAR 28
3659: PUSH
3660: LD_INT 11
3662: ST_TO_ADDR
// hc_gallery = sandar ;
3663: LD_ADDR_OWVAR 33
3667: PUSH
3668: LD_STRING sandar
3670: ST_TO_ADDR
// hc_face_number = 33 ;
3671: LD_ADDR_OWVAR 34
3675: PUSH
3676: LD_INT 33
3678: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3679: LD_ADDR_OWVAR 26
3683: PUSH
3684: LD_STRING Thabit Muhair Saliba
3686: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3687: LD_ADDR_OWVAR 31
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: LD_INT 0
3697: PUSH
3698: LD_INT 0
3700: PUSH
3701: LD_INT 0
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: ST_TO_ADDR
// Saliba = CreateHuman ;
3710: NOP4
3714: PUSH
3715: NOP4
3719: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3720: NOP4
3724: PPUSH
3725: NOP4
3729: PPUSH
3730: NOP4
// if gensher_active then
3734: NOP4
3738: IFFALSE 3765
// begin Gensher = NewCharacter ( Dietrich ) ;
3740: NOP4
3744: PUSH
3745: LD_STRING Dietrich
3747: PPUSH
3748: NOP4
3752: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3753: NOP4
3757: PPUSH
3758: LD_INT 94
3760: PPUSH
3761: NOP4
// end ; InitHc ;
3765: NOP4
// ar_vehicles_tmp := [ ] ;
3769: NOP4
3773: PUSH
3774: EMPTY
3775: ST_TO_ADDR
// for i = 1 to 5 do
3776: NOP4
3780: PUSH
3781: DOUBLE
3782: LD_INT 1
3784: DEC
3785: ST_TO_ADDR
3786: LD_INT 5
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3962
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3792: LD_INT 13
3794: PUSH
3795: LD_INT 14
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 1
3804: PPUSH
3805: LD_INT 2
3807: PPUSH
3808: NOP4
3812: ARRAY
3813: PPUSH
3814: LD_INT 1
3816: PUSH
3817: LD_INT 2
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 1
3826: PPUSH
3827: LD_INT 2
3829: PPUSH
3830: NOP4
3834: ARRAY
3835: PPUSH
3836: LD_INT 1
3838: PPUSH
3839: LD_INT 25
3841: PUSH
3842: LD_INT 27
3844: PUSH
3845: LD_INT 26
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 1
3855: PPUSH
3856: LD_INT 3
3858: PPUSH
3859: NOP4
3863: ARRAY
3864: PPUSH
3865: LD_INT 60
3867: PPUSH
3868: LD_INT 100
3870: PPUSH
3871: NOP4
3875: PPUSH
3876: NOP4
// un := CreateVehicle ;
3880: NOP4
3884: PUSH
3885: NOP4
3889: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3890: NOP4
3894: PUSH
3895: NOP4
3899: PPUSH
3900: NOP4
3904: PUSH
3905: LD_INT 1
3907: PLUS
3908: PPUSH
3909: NOP4
3913: PPUSH
3914: NOP4
3918: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3919: NOP4
3923: PPUSH
3924: LD_INT 0
3926: PPUSH
3927: LD_INT 5
3929: PPUSH
3930: NOP4
3934: PPUSH
3935: NOP4
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3939: NOP4
3943: PPUSH
3944: LD_INT 124
3946: PPUSH
3947: LD_INT 141
3949: PPUSH
3950: LD_INT 8
3952: PPUSH
3953: LD_INT 0
3955: PPUSH
3956: NOP4
// end ;
3960: GO 3789
3962: POP
3963: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3964: NOP4
3968: PUSH
3969: EMPTY
3970: PUSH
3971: EMPTY
3972: PUSH
3973: EMPTY
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: LIST
3979: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3980: NOP4
3984: PUSH
3985: DOUBLE
3986: LD_INT 1
3988: DEC
3989: ST_TO_ADDR
3990: LD_INT 3
3992: PUSH
3993: LD_INT 3
3995: PUSH
3996: LD_INT 4
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: PUSH
4004: NOP4
4008: ARRAY
4009: PUSH
4010: FOR_TO
4011: IFFALSE 4231
// for i = 1 to 3 do
4013: NOP4
4017: PUSH
4018: DOUBLE
4019: LD_INT 1
4021: DEC
4022: ST_TO_ADDR
4023: LD_INT 3
4025: PUSH
4026: FOR_TO
4027: IFFALSE 4227
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
4029: LD_INT 14
4031: PPUSH
4032: LD_INT 3
4034: PUSH
4035: LD_INT 2
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 1
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: NOP4
4052: ARRAY
4053: PPUSH
4054: LD_INT 1
4056: PUSH
4057: LD_INT 5
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: LD_INT 1
4066: PPUSH
4067: LD_INT 2
4069: PPUSH
4070: NOP4
4074: ARRAY
4075: PPUSH
4076: LD_INT 25
4078: PUSH
4079: LD_INT 27
4081: PUSH
4082: LD_INT 26
4084: PUSH
4085: LD_INT 28
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: PUSH
4094: LD_INT 1
4096: PPUSH
4097: LD_INT 4
4099: PPUSH
4100: NOP4
4104: ARRAY
4105: PPUSH
4106: LD_INT 100
4108: PPUSH
4109: NOP4
// un := CreateVehicle ;
4113: NOP4
4117: PUSH
4118: NOP4
4122: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
4123: NOP4
4127: PUSH
4128: NOP4
4132: PPUSH
4133: NOP4
4137: PUSH
4138: NOP4
4142: PUSH
4143: NOP4
4147: ARRAY
4148: PUSH
4149: LD_INT 1
4151: PLUS
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PPUSH
4157: NOP4
4161: PPUSH
4162: NOP4
4166: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4167: NOP4
4171: PPUSH
4172: LD_INT 0
4174: PPUSH
4175: LD_INT 5
4177: PPUSH
4178: NOP4
4182: PPUSH
4183: NOP4
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
4187: NOP4
4191: PPUSH
4192: NOP4
4196: PUSH
4197: NOP4
4201: PUSH
4202: NOP4
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: LIST
4211: PUSH
4212: NOP4
4216: ARRAY
4217: PPUSH
4218: LD_INT 0
4220: PPUSH
4221: NOP4
// end ;
4225: GO 4026
4227: POP
4228: POP
4229: GO 4010
4231: POP
4232: POP
// InitHc ;
4233: NOP4
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4237: LD_INT 4
4239: PPUSH
4240: LD_INT 5
4242: PPUSH
4243: LD_INT 10
4245: PPUSH
4246: LD_INT 5
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: NOP4
// end ;
4256: LD_VAR 0 1
4260: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4261: NOP4
4265: IFFALSE 4339
4267: GO 4269
4269: DISABLE
4270: LD_INT 0
4272: PPUSH
// begin enable ;
4273: ENABLE
// for i in ar_kamikadze do
4274: NOP4
4278: PUSH
4279: NOP4
4283: PUSH
4284: FOR_IN
4285: IFFALSE 4337
// if See ( 1 , i ) then
4287: LD_INT 1
4289: PPUSH
4290: NOP4
4294: PPUSH
4295: NOP4
4299: IFFALSE 4335
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4301: NOP4
4305: PPUSH
4306: LD_INT 81
4308: PUSH
4309: LD_INT 2
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PPUSH
4316: NOP4
4320: PPUSH
4321: NOP4
4325: PPUSH
4326: NOP4
4330: PPUSH
4331: NOP4
4335: GO 4284
4337: POP
4338: POP
// end ;
4339: PPOPN 1
4341: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4342: NOP4
4346: IFFALSE 4663
4348: GO 4350
4350: DISABLE
4351: LD_INT 0
4353: PPUSH
4354: PPUSH
4355: PPUSH
4356: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4357: LD_INT 35
4359: PPUSH
4360: NOP4
// until MC_GetProduceList ( 1 ) = 0 ;
4364: LD_INT 1
4366: PPUSH
4367: NOP4
4371: PUSH
4372: LD_INT 0
4374: EQUAL
4375: IFFALSE 4357
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4377: LD_INT 1
4379: PPUSH
4380: LD_INT 14
4382: PUSH
4383: LD_INT 3
4385: PUSH
4386: LD_INT 2
4388: PUSH
4389: LD_INT 32
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: PUSH
4398: EMPTY
4399: LIST
4400: PPUSH
4401: NOP4
// repeat wait ( 0 0$1 ) ;
4405: LD_INT 35
4407: PPUSH
4408: NOP4
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4412: NOP4
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PPUSH
4421: LD_INT 33
4423: PUSH
4424: LD_INT 2
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 34
4433: PUSH
4434: LD_INT 32
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: NOP4
4449: IFFALSE 4405
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4451: NOP4
4455: PUSH
4456: NOP4
4460: PUSH
4461: LD_INT 1
4463: ARRAY
4464: PPUSH
4465: LD_INT 33
4467: PUSH
4468: LD_INT 2
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: LD_INT 34
4477: PUSH
4478: LD_INT 32
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: PPUSH
4489: NOP4
4493: PUSH
4494: LD_INT 1
4496: ARRAY
4497: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4498: NOP4
4502: PUSH
4503: LD_INT 5
4505: PPUSH
4506: NOP4
4510: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4511: LD_INT 35
4513: PPUSH
4514: NOP4
// pos := FindArtifact ( 5 ) ;
4518: NOP4
4522: PUSH
4523: LD_INT 5
4525: PPUSH
4526: NOP4
4530: ST_TO_ADDR
// tmp := 100 ;
4531: NOP4
4535: PUSH
4536: LD_INT 100
4538: ST_TO_ADDR
// if pos then
4539: NOP4
4543: IFFALSE 4583
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4545: NOP4
4549: PUSH
4550: LD_INT 2
4552: PPUSH
4553: NOP4
4557: PUSH
4558: LD_INT 1
4560: ARRAY
4561: PPUSH
4562: NOP4
4566: PUSH
4567: LD_INT 2
4569: ARRAY
4570: PPUSH
4571: LD_INT 20
4573: PPUSH
4574: NOP4
4578: PUSH
4579: LD_INT 4
4581: ARRAY
4582: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4583: NOP4
4587: PUSH
4588: NOP4
4592: NOT
4593: AND
4594: PUSH
4595: NOP4
4599: PUSH
4600: LD_INT 10
4602: LESS
4603: AND
4604: IFFALSE 4511
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4606: NOP4
4610: PPUSH
4611: NOP4
4615: PUSH
4616: LD_INT 1
4618: ARRAY
4619: PPUSH
4620: NOP4
4624: PUSH
4625: LD_INT 2
4627: ARRAY
4628: PPUSH
4629: NOP4
// AddComMoveXY ( cargo , 198 , 113 ) ;
4633: NOP4
4637: PPUSH
4638: LD_INT 198
4640: PPUSH
4641: LD_INT 113
4643: PPUSH
4644: NOP4
// AddComMoveXY ( cargo , 124 , 7 ) ;
4648: NOP4
4652: PPUSH
4653: LD_INT 124
4655: PPUSH
4656: LD_INT 7
4658: PPUSH
4659: NOP4
// end ;
4663: PPOPN 4
4665: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4666: NOP4
4670: IFFALSE 7362
4672: GO 4674
4674: DISABLE
4675: LD_INT 0
4677: PPUSH
4678: PPUSH
4679: PPUSH
4680: PPUSH
4681: PPUSH
4682: PPUSH
4683: PPUSH
4684: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4685: NOP4
4689: PUSH
4690: LD_INT 5
4692: PUSH
4693: LD_INT 6
4695: PUSH
4696: LD_INT 7
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: LIST
4703: PUSH
4704: NOP4
4708: ARRAY
4709: ST_TO_ADDR
// coords := [ ] ;
4710: NOP4
4714: PUSH
4715: EMPTY
4716: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4717: NOP4
4721: PUSH
4722: LD_INT 0
4724: PUSH
4725: LD_INT 0
4727: PUSH
4728: LD_INT 0
4730: PUSH
4731: LD_INT 0
4733: PUSH
4734: LD_INT 1
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 0
4742: PUSH
4743: LD_INT 0
4745: PUSH
4746: LD_INT 1
4748: PUSH
4749: LD_INT 0
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4764: LD_INT 1
4766: PPUSH
4767: LD_INT 14
4769: PUSH
4770: LD_INT 1
4772: PUSH
4773: LD_INT 2
4775: PUSH
4776: LD_INT 28
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: PUSH
4785: LD_INT 14
4787: PUSH
4788: LD_INT 1
4790: PUSH
4791: LD_INT 2
4793: PUSH
4794: LD_INT 25
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 14
4805: PUSH
4806: LD_INT 1
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: LD_INT 28
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: PUSH
4821: LD_INT 14
4823: PUSH
4824: LD_INT 1
4826: PUSH
4827: LD_INT 2
4829: PUSH
4830: LD_INT 29
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: PPUSH
4845: NOP4
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4849: LD_INT 21000
4851: PUSH
4852: LD_INT 19950
4854: PUSH
4855: LD_INT 18900
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: NOP4
4867: ARRAY
4868: PPUSH
4869: NOP4
// InitHc ;
4873: NOP4
// InitUc ;
4877: NOP4
// uc_side := 2 ;
4881: LD_ADDR_OWVAR 20
4885: PUSH
4886: LD_INT 2
4888: ST_TO_ADDR
// uc_nation := 2 ;
4889: LD_ADDR_OWVAR 21
4893: PUSH
4894: LD_INT 2
4896: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4897: NOP4
4901: PUSH
4902: EMPTY
4903: PUSH
4904: EMPTY
4905: PUSH
4906: EMPTY
4907: PUSH
4908: EMPTY
4909: PUSH
4910: EMPTY
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4919: NOP4
4923: PUSH
4924: NOP4
4928: PPUSH
4929: LD_INT 1
4931: PPUSH
4932: NOP4
4936: PUSH
4937: LD_INT 1
4939: ARRAY
4940: PUSH
4941: LD_INT 34
4943: PUSH
4944: LD_INT 32
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PPUSH
4951: NOP4
4955: DIFF
4956: PPUSH
4957: NOP4
4961: ST_TO_ADDR
// for i = 1 to Difficulty do
4962: NOP4
4966: PUSH
4967: DOUBLE
4968: LD_INT 1
4970: DEC
4971: ST_TO_ADDR
4972: NOP4
4976: PUSH
4977: FOR_TO
4978: IFFALSE 5118
// begin uc_side := 2 ;
4980: LD_ADDR_OWVAR 20
4984: PUSH
4985: LD_INT 2
4987: ST_TO_ADDR
// uc_nation := 2 ;
4988: LD_ADDR_OWVAR 21
4992: PUSH
4993: LD_INT 2
4995: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4996: LD_INT 13
4998: PPUSH
4999: LD_INT 3
5001: PPUSH
5002: LD_INT 5
5004: PPUSH
5005: LD_INT 29
5007: PPUSH
5008: LD_INT 100
5010: PPUSH
5011: NOP4
// un := CreateVehicle ;
5015: NOP4
5019: PUSH
5020: NOP4
5024: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
5025: NOP4
5029: PUSH
5030: NOP4
5034: PPUSH
5035: LD_INT 1
5037: PUSH
5038: NOP4
5042: PUSH
5043: LD_INT 1
5045: ARRAY
5046: PUSH
5047: LD_INT 1
5049: PLUS
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PPUSH
5055: NOP4
5059: PPUSH
5060: NOP4
5064: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5065: NOP4
5069: PPUSH
5070: LD_INT 3
5072: PPUSH
5073: NOP4
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
5077: NOP4
5081: PPUSH
5082: NOP4
5086: PPUSH
5087: LD_INT 0
5089: PPUSH
5090: NOP4
// ComMoveXY ( un , 51 , 10 ) ;
5094: NOP4
5098: PPUSH
5099: LD_INT 51
5101: PPUSH
5102: LD_INT 10
5104: PPUSH
5105: NOP4
// wait ( 0 0$2 ) ;
5109: LD_INT 70
5111: PPUSH
5112: NOP4
// end ;
5116: GO 4977
5118: POP
5119: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
5120: NOP4
5124: PUSH
5125: LD_INT 51
5127: PUSH
5128: LD_INT 24
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: LD_INT 75
5137: PUSH
5138: LD_INT 90
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
5149: LD_INT 1
5151: PPUSH
5152: NOP4
5156: PUSH
5157: LD_INT 1
5159: ARRAY
5160: PPUSH
5161: NOP4
5165: PPUSH
5166: NOP4
5170: PPUSH
5171: NOP4
// for i = 1 to [ 1 , 3 , 3 ] [ Difficulty ] do
5175: NOP4
5179: PUSH
5180: DOUBLE
5181: LD_INT 1
5183: DEC
5184: ST_TO_ADDR
5185: LD_INT 1
5187: PUSH
5188: LD_INT 3
5190: PUSH
5191: LD_INT 3
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: LIST
5198: PUSH
5199: NOP4
5203: ARRAY
5204: PUSH
5205: FOR_TO
5206: IFFALSE 5308
// begin uc_side := 2 ;
5208: LD_ADDR_OWVAR 20
5212: PUSH
5213: LD_INT 2
5215: ST_TO_ADDR
// uc_nation := 2 ;
5216: LD_ADDR_OWVAR 21
5220: PUSH
5221: LD_INT 2
5223: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5224: LD_INT 0
5226: PPUSH
5227: LD_INT 17
5229: PPUSH
5230: NOP4
5234: PPUSH
5235: NOP4
// un := CreateHuman ;
5239: NOP4
5243: PUSH
5244: NOP4
5248: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5249: NOP4
5253: PUSH
5254: NOP4
5258: PPUSH
5259: LD_INT 2
5261: PUSH
5262: NOP4
5266: PUSH
5267: LD_INT 2
5269: ARRAY
5270: PUSH
5271: LD_INT 1
5273: PLUS
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PPUSH
5279: NOP4
5283: PPUSH
5284: NOP4
5288: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5289: NOP4
5293: PPUSH
5294: NOP4
5298: PPUSH
5299: LD_INT 0
5301: PPUSH
5302: NOP4
// end ;
5306: GO 5205
5308: POP
5309: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5310: NOP4
5314: PUSH
5315: DOUBLE
5316: LD_INT 1
5318: DEC
5319: ST_TO_ADDR
5320: LD_INT 2
5322: PUSH
5323: LD_INT 3
5325: PUSH
5326: LD_INT 3
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: LIST
5333: PUSH
5334: NOP4
5338: ARRAY
5339: PUSH
5340: FOR_TO
5341: IFFALSE 5462
// begin uc_side := 2 ;
5343: LD_ADDR_OWVAR 20
5347: PUSH
5348: LD_INT 2
5350: ST_TO_ADDR
// uc_nation := 2 ;
5351: LD_ADDR_OWVAR 21
5355: PUSH
5356: LD_INT 2
5358: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5359: LD_INT 0
5361: PPUSH
5362: LD_INT 1
5364: PUSH
5365: LD_INT 8
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 1
5374: PPUSH
5375: LD_INT 2
5377: PPUSH
5378: NOP4
5382: ARRAY
5383: PPUSH
5384: NOP4
5388: PPUSH
5389: NOP4
// un := CreateHuman ;
5393: NOP4
5397: PUSH
5398: NOP4
5402: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5403: NOP4
5407: PUSH
5408: NOP4
5412: PPUSH
5413: LD_INT 2
5415: PUSH
5416: NOP4
5420: PUSH
5421: LD_INT 2
5423: ARRAY
5424: PUSH
5425: LD_INT 1
5427: PLUS
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PPUSH
5433: NOP4
5437: PPUSH
5438: NOP4
5442: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5443: NOP4
5447: PPUSH
5448: NOP4
5452: PPUSH
5453: LD_INT 0
5455: PPUSH
5456: NOP4
// end ;
5460: GO 5340
5462: POP
5463: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5464: NOP4
5468: PUSH
5469: LD_INT 67
5471: PUSH
5472: LD_INT 112
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 85
5481: PUSH
5482: LD_INT 130
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5493: LD_INT 2
5495: PPUSH
5496: NOP4
5500: PUSH
5501: LD_INT 2
5503: ARRAY
5504: PPUSH
5505: NOP4
5509: PPUSH
5510: NOP4
5514: PPUSH
5515: NOP4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5519: NOP4
5523: PUSH
5524: DOUBLE
5525: LD_INT 1
5527: DEC
5528: ST_TO_ADDR
5529: LD_INT 1
5531: PUSH
5532: LD_INT 2
5534: PUSH
5535: LD_INT 3
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: LIST
5542: PUSH
5543: NOP4
5547: ARRAY
5548: PUSH
5549: FOR_TO
5550: IFFALSE 5652
// begin uc_side := 2 ;
5552: LD_ADDR_OWVAR 20
5556: PUSH
5557: LD_INT 2
5559: ST_TO_ADDR
// uc_nation := 2 ;
5560: LD_ADDR_OWVAR 21
5564: PUSH
5565: LD_INT 2
5567: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5568: LD_INT 0
5570: PPUSH
5571: LD_INT 17
5573: PPUSH
5574: NOP4
5578: PPUSH
5579: NOP4
// un := CreateHuman ;
5583: NOP4
5587: PUSH
5588: NOP4
5592: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5593: NOP4
5597: PUSH
5598: NOP4
5602: PPUSH
5603: LD_INT 3
5605: PUSH
5606: NOP4
5610: PUSH
5611: LD_INT 3
5613: ARRAY
5614: PUSH
5615: LD_INT 1
5617: PLUS
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PPUSH
5623: NOP4
5627: PPUSH
5628: NOP4
5632: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5633: NOP4
5637: PPUSH
5638: NOP4
5642: PPUSH
5643: LD_INT 0
5645: PPUSH
5646: NOP4
// end ;
5650: GO 5549
5652: POP
5653: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5654: NOP4
5658: PUSH
5659: LD_INT 148
5661: PUSH
5662: LD_INT 158
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 148
5671: PUSH
5672: LD_INT 158
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5683: LD_INT 3
5685: PPUSH
5686: NOP4
5690: PUSH
5691: LD_INT 3
5693: ARRAY
5694: PPUSH
5695: NOP4
5699: PPUSH
5700: NOP4
5704: PPUSH
5705: NOP4
// for i = 1 to [ 2 , 4 , 4 ] [ Difficulty ] do
5709: NOP4
5713: PUSH
5714: DOUBLE
5715: LD_INT 1
5717: DEC
5718: ST_TO_ADDR
5719: LD_INT 2
5721: PUSH
5722: LD_INT 4
5724: PUSH
5725: LD_INT 4
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: PUSH
5733: NOP4
5737: ARRAY
5738: PUSH
5739: FOR_TO
5740: IFFALSE 5966
// begin uc_side := 2 ;
5742: LD_ADDR_OWVAR 20
5746: PUSH
5747: LD_INT 2
5749: ST_TO_ADDR
// uc_nation := 2 ;
5750: LD_ADDR_OWVAR 21
5754: PUSH
5755: LD_INT 2
5757: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5758: LD_INT 14
5760: PPUSH
5761: LD_INT 3
5763: PPUSH
5764: LD_INT 1
5766: PUSH
5767: LD_INT 5
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: LD_INT 1
5776: PPUSH
5777: LD_INT 2
5779: PPUSH
5780: NOP4
5784: ARRAY
5785: PPUSH
5786: LD_INT 27
5788: PUSH
5789: LD_INT 26
5791: PUSH
5792: LD_INT 28
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: PUSH
5800: LD_INT 1
5802: PPUSH
5803: LD_INT 3
5805: PPUSH
5806: NOP4
5810: ARRAY
5811: PPUSH
5812: LD_INT 100
5814: PPUSH
5815: NOP4
// un := CreateVehicle ;
5819: NOP4
5823: PUSH
5824: NOP4
5828: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5829: NOP4
5833: PUSH
5834: NOP4
5838: PPUSH
5839: LD_INT 4
5841: PUSH
5842: NOP4
5846: PUSH
5847: LD_INT 4
5849: ARRAY
5850: PUSH
5851: LD_INT 1
5853: PLUS
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: NOP4
5863: PPUSH
5864: NOP4
5868: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5869: NOP4
5873: PPUSH
5874: LD_INT 5
5876: PPUSH
5877: NOP4
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5881: NOP4
5885: PPUSH
5886: NOP4
5890: PPUSH
5891: LD_INT 0
5893: PPUSH
5894: NOP4
// if GetControl ( un ) = control_manual then
5898: NOP4
5902: PPUSH
5903: NOP4
5907: PUSH
5908: LD_INT 1
5910: EQUAL
5911: IFFALSE 5942
// begin PrepareHuman ( false , 3 , skill ) ;
5913: LD_INT 0
5915: PPUSH
5916: LD_INT 3
5918: PPUSH
5919: NOP4
5923: PPUSH
5924: NOP4
// PlaceHumanInUnit ( CreateHuman , un ) ;
5928: NOP4
5932: PPUSH
5933: NOP4
5937: PPUSH
5938: NOP4
// end ; ComMoveXY ( un , 179 , 135 ) ;
5942: NOP4
5946: PPUSH
5947: LD_INT 179
5949: PPUSH
5950: LD_INT 135
5952: PPUSH
5953: NOP4
// wait ( 0 0$2 ) ;
5957: LD_INT 70
5959: PPUSH
5960: NOP4
// end ;
5964: GO 5739
5966: POP
5967: POP
// vc_chassis := 15 ;
5968: LD_ADDR_OWVAR 37
5972: PUSH
5973: LD_INT 15
5975: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5976: NOP4
5980: PUSH
5981: NOP4
5985: PPUSH
5986: LD_INT 4
5988: PUSH
5989: NOP4
5993: PUSH
5994: LD_INT 4
5996: ARRAY
5997: PUSH
5998: LD_INT 1
6000: PLUS
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PPUSH
6006: NOP4
6010: PPUSH
6011: NOP4
6015: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
6016: NOP4
6020: PUSH
6021: LD_INT 4
6023: ARRAY
6024: PUSH
6025: NOP4
6029: PUSH
6030: LD_INT 4
6032: ARRAY
6033: ARRAY
6034: PPUSH
6035: NOP4
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: NOP4
// PrepareHuman ( false , class_desert_warior , skill ) ;
6047: LD_INT 0
6049: PPUSH
6050: LD_INT 11
6052: PPUSH
6053: NOP4
6057: PPUSH
6058: NOP4
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
6062: NOP4
6066: PUSH
6067: NOP4
6071: PPUSH
6072: LD_INT 4
6074: PUSH
6075: NOP4
6079: PUSH
6080: LD_INT 4
6082: ARRAY
6083: PUSH
6084: LD_INT 1
6086: PLUS
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PPUSH
6092: NOP4
6096: PPUSH
6097: NOP4
6101: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
6102: NOP4
6106: PUSH
6107: LD_INT 4
6109: ARRAY
6110: PUSH
6111: NOP4
6115: PUSH
6116: LD_INT 4
6118: ARRAY
6119: ARRAY
6120: PPUSH
6121: NOP4
6125: PUSH
6126: LD_INT 4
6128: ARRAY
6129: PUSH
6130: NOP4
6134: PUSH
6135: LD_INT 4
6137: ARRAY
6138: PUSH
6139: LD_INT 1
6141: MINUS
6142: ARRAY
6143: PPUSH
6144: NOP4
// coords := [ [ 148 , 140 ] ] ;
6148: NOP4
6152: PUSH
6153: LD_INT 148
6155: PUSH
6156: LD_INT 140
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
6166: LD_INT 1
6168: PPUSH
6169: NOP4
6173: PUSH
6174: LD_INT 4
6176: ARRAY
6177: PPUSH
6178: NOP4
6182: PPUSH
6183: NOP4
6187: PPUSH
6188: NOP4
// if gensher_active then
6192: NOP4
6196: IFFALSE 6602
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
6198: NOP4
6202: PPUSH
6203: LD_STRING D10-Diet-1
6205: PPUSH
6206: NOP4
// for i = 1 to 2 do
6210: NOP4
6214: PUSH
6215: DOUBLE
6216: LD_INT 1
6218: DEC
6219: ST_TO_ADDR
6220: LD_INT 2
6222: PUSH
6223: FOR_TO
6224: IFFALSE 6364
// begin uc_side := 2 ;
6226: LD_ADDR_OWVAR 20
6230: PUSH
6231: LD_INT 2
6233: ST_TO_ADDR
// uc_nation := 2 ;
6234: LD_ADDR_OWVAR 21
6238: PUSH
6239: LD_INT 2
6241: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
6242: LD_INT 13
6244: PPUSH
6245: LD_INT 3
6247: PPUSH
6248: LD_INT 5
6250: PPUSH
6251: LD_INT 29
6253: PPUSH
6254: LD_INT 100
6256: PPUSH
6257: NOP4
// un := CreateVehicle ;
6261: NOP4
6265: PUSH
6266: NOP4
6270: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6271: NOP4
6275: PUSH
6276: NOP4
6280: PPUSH
6281: LD_INT 5
6283: PUSH
6284: NOP4
6288: PUSH
6289: LD_INT 5
6291: ARRAY
6292: PUSH
6293: LD_INT 1
6295: PLUS
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: NOP4
6305: PPUSH
6306: NOP4
6310: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6311: NOP4
6315: PPUSH
6316: LD_INT 0
6318: PPUSH
6319: NOP4
// PlaceUnitArea ( un , gensher_attack , false ) ;
6323: NOP4
6327: PPUSH
6328: NOP4
6332: PPUSH
6333: LD_INT 0
6335: PPUSH
6336: NOP4
// ComMoveXY ( un , 85 , 152 ) ;
6340: NOP4
6344: PPUSH
6345: LD_INT 85
6347: PPUSH
6348: LD_INT 152
6350: PPUSH
6351: NOP4
// wait ( 0 0$2 ) ;
6355: LD_INT 70
6357: PPUSH
6358: NOP4
// end ;
6362: GO 6223
6364: POP
6365: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6366: NOP4
6370: PUSH
6371: DOUBLE
6372: LD_INT 1
6374: DEC
6375: ST_TO_ADDR
6376: LD_INT 2
6378: PUSH
6379: LD_INT 3
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: PUSH
6390: NOP4
6394: ARRAY
6395: PUSH
6396: FOR_TO
6397: IFFALSE 6556
// begin uc_side := 2 ;
6399: LD_ADDR_OWVAR 20
6403: PUSH
6404: LD_INT 2
6406: ST_TO_ADDR
// uc_nation := 2 ;
6407: LD_ADDR_OWVAR 21
6411: PUSH
6412: LD_INT 2
6414: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6415: LD_INT 14
6417: PPUSH
6418: LD_INT 3
6420: PPUSH
6421: LD_INT 5
6423: PPUSH
6424: LD_INT 27
6426: PUSH
6427: LD_INT 28
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 1
6436: PPUSH
6437: LD_INT 2
6439: PPUSH
6440: NOP4
6444: ARRAY
6445: PPUSH
6446: LD_INT 100
6448: PPUSH
6449: NOP4
// un := CreateVehicle ;
6453: NOP4
6457: PUSH
6458: NOP4
6462: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6463: NOP4
6467: PUSH
6468: NOP4
6472: PPUSH
6473: LD_INT 5
6475: PUSH
6476: NOP4
6480: PUSH
6481: LD_INT 5
6483: ARRAY
6484: PUSH
6485: LD_INT 1
6487: PLUS
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: PPUSH
6493: NOP4
6497: PPUSH
6498: NOP4
6502: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6503: NOP4
6507: PPUSH
6508: LD_INT 0
6510: PPUSH
6511: NOP4
// PlaceUnitArea ( un , gensher_attack , false ) ;
6515: NOP4
6519: PPUSH
6520: NOP4
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: NOP4
// ComMoveXY ( un , 85 , 152 ) ;
6532: NOP4
6536: PPUSH
6537: LD_INT 85
6539: PPUSH
6540: LD_INT 152
6542: PPUSH
6543: NOP4
// wait ( 0 0$2 ) ;
6547: LD_INT 70
6549: PPUSH
6550: NOP4
// end ;
6554: GO 6396
6556: POP
6557: POP
// coords := [ [ 97 , 143 ] ] ;
6558: NOP4
6562: PUSH
6563: LD_INT 97
6565: PUSH
6566: LD_INT 143
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: EMPTY
6574: LIST
6575: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6576: LD_INT 1
6578: PPUSH
6579: NOP4
6583: PUSH
6584: LD_INT 5
6586: ARRAY
6587: PPUSH
6588: NOP4
6592: PPUSH
6593: NOP4
6597: PPUSH
6598: NOP4
// end ; Wait ( 13 13$00 ) ;
6602: LD_INT 27300
6604: PPUSH
6605: NOP4
// tmp := [ ] ;
6609: NOP4
6613: PUSH
6614: EMPTY
6615: ST_TO_ADDR
// w := 1 ;
6616: NOP4
6620: PUSH
6621: LD_INT 1
6623: ST_TO_ADDR
// repeat tmp := [ ] ;
6624: NOP4
6628: PUSH
6629: EMPTY
6630: ST_TO_ADDR
// if w mod 4 = 0 then
6631: NOP4
6635: PUSH
6636: LD_INT 4
6638: MOD
6639: PUSH
6640: LD_INT 0
6642: EQUAL
6643: IFFALSE 6730
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6645: NOP4
6649: PUSH
6650: LD_INT 11
6652: PUSH
6653: LD_INT 1
6655: PUSH
6656: LD_INT 2
6658: PUSH
6659: LD_INT 24
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 11
6670: PUSH
6671: LD_INT 1
6673: PUSH
6674: LD_INT 2
6676: PUSH
6677: LD_INT 24
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: PUSH
6686: LD_INT 11
6688: PUSH
6689: LD_INT 1
6691: PUSH
6692: LD_INT 2
6694: PUSH
6695: LD_INT 24
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 11
6706: PUSH
6707: LD_INT 1
6709: PUSH
6710: LD_INT 2
6712: PUSH
6713: LD_INT 24
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: ST_TO_ADDR
6728: GO 6832
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6730: NOP4
6734: PUSH
6735: LD_INT 14
6737: PUSH
6738: LD_INT 1
6740: PUSH
6741: LD_INT 2
6743: PUSH
6744: LD_INT 28
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: PUSH
6753: LD_INT 14
6755: PUSH
6756: LD_INT 1
6758: PUSH
6759: LD_INT 2
6761: PUSH
6762: LD_INT 25
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 14
6773: PUSH
6774: LD_INT 1
6776: PUSH
6777: LD_INT 2
6779: PUSH
6780: LD_INT 28
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 14
6791: PUSH
6792: LD_INT 1
6794: PUSH
6795: LD_INT 2
6797: PUSH
6798: LD_INT 29
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 11
6809: PUSH
6810: LD_INT 1
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 24
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: ST_TO_ADDR
// if w mod 3 = 0 then
6832: NOP4
6836: PUSH
6837: LD_INT 3
6839: MOD
6840: PUSH
6841: LD_INT 0
6843: EQUAL
6844: IFFALSE 6920
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6846: NOP4
6850: PUSH
6851: NOP4
6855: PPUSH
6856: LD_INT 1
6858: PUSH
6859: NOP4
6863: PUSH
6864: NOP4
6868: ARRAY
6869: PUSH
6870: LD_INT 1
6872: PLUS
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: LD_INT 14
6880: PUSH
6881: LD_INT 1
6883: PUSH
6884: LD_INT 2
6886: PUSH
6887: LD_INT 25
6889: PUSH
6890: LD_INT 28
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: LD_INT 1
6899: PPUSH
6900: LD_INT 2
6902: PPUSH
6903: NOP4
6907: ARRAY
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: PPUSH
6915: NOP4
6919: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6920: LD_INT 1
6922: PPUSH
6923: NOP4
6927: PPUSH
6928: NOP4
// if GetSide ( ar_dep_w ) = 2 then
6932: NOP4
6936: PPUSH
6937: NOP4
6941: PUSH
6942: LD_INT 2
6944: EQUAL
6945: IFFALSE 7030
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6947: NOP4
6951: PUSH
6952: LD_INT 14
6954: PUSH
6955: LD_INT 1
6957: PUSH
6958: LD_INT 2
6960: PUSH
6961: LD_INT 28
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 14
6972: PUSH
6973: LD_INT 1
6975: PUSH
6976: LD_INT 2
6978: PUSH
6979: LD_INT 27
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 14
6990: PUSH
6991: LD_INT 1
6993: PUSH
6994: LD_INT 2
6996: PUSH
6997: LD_INT 27
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
7011: LD_INT 2
7013: PPUSH
7014: NOP4
7018: PPUSH
7019: NOP4
// wait ( 0 0$50 ) ;
7023: LD_INT 1750
7025: PPUSH
7026: NOP4
// end ; repeat wait ( 0 0$1 ) ;
7030: LD_INT 35
7032: PPUSH
7033: NOP4
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
7037: NOP4
7041: PUSH
7042: LD_INT 1
7044: ARRAY
7045: PPUSH
7046: LD_INT 3
7048: PUSH
7049: LD_INT 34
7051: PUSH
7052: LD_INT 32
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PPUSH
7063: NOP4
7067: PUSH
7068: LD_INT 4
7070: GREATEREQUAL
7071: IFFALSE 7030
// wait ( 0 0$10 ) ;
7073: LD_INT 350
7075: PPUSH
7076: NOP4
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
7080: NOP4
7084: PUSH
7085: NOP4
7089: PUSH
7090: LD_INT 1
7092: ARRAY
7093: PPUSH
7094: LD_INT 3
7096: PUSH
7097: LD_INT 34
7099: PUSH
7100: LD_INT 32
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PPUSH
7111: NOP4
7115: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
7116: LD_INT 100
7118: PPUSH
7119: NOP4
7123: PUSH
7124: LD_INT 50
7126: LESS
7127: IFFALSE 7160
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
7129: NOP4
7133: PUSH
7134: LD_INT 55
7136: PUSH
7137: LD_INT 7
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: LD_INT 75
7146: PUSH
7147: LD_INT 90
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: ST_TO_ADDR
7158: GO 7189
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
7160: NOP4
7164: PUSH
7165: LD_INT 128
7167: PUSH
7168: LD_INT 94
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 180
7177: PUSH
7178: LD_INT 135
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: ST_TO_ADDR
// if w mod 4 = 0 then
7189: NOP4
7193: PUSH
7194: LD_INT 4
7196: MOD
7197: PUSH
7198: LD_INT 0
7200: EQUAL
7201: IFFALSE 7232
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
7203: NOP4
7207: PUSH
7208: LD_INT 91
7210: PUSH
7211: LD_INT 58
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: LD_INT 117
7220: PUSH
7221: LD_INT 107
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
7232: LD_INT 1
7234: PPUSH
7235: NOP4
7239: PPUSH
7240: NOP4
7244: PPUSH
7245: NOP4
7249: PPUSH
7250: NOP4
// if mc_vehicles [ 2 ] then
7254: NOP4
7258: PUSH
7259: LD_INT 2
7261: ARRAY
7262: IFFALSE 7298
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
7264: LD_INT 2
7266: PPUSH
7267: NOP4
7271: PUSH
7272: LD_INT 2
7274: ARRAY
7275: PPUSH
7276: LD_INT 73
7278: PUSH
7279: LD_INT 115
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: PPUSH
7289: NOP4
7293: PPUSH
7294: NOP4
// wait ( rand ( 10 10$30 , 13 13$30 ) ) ;
7298: LD_INT 22050
7300: PPUSH
7301: LD_INT 28350
7303: PPUSH
7304: NOP4
7308: PPUSH
7309: NOP4
// w := w + 1 ;
7313: NOP4
7317: PUSH
7318: NOP4
7322: PUSH
7323: LD_INT 1
7325: PLUS
7326: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7327: LD_INT 94
7329: PPUSH
7330: NOP4
7334: PUSH
7335: NOP4
7339: PUSH
7340: LD_INT 1
7342: ARRAY
7343: PPUSH
7344: LD_INT 30
7346: PUSH
7347: LD_INT 3
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PPUSH
7354: NOP4
7358: NOT
7359: OR
7360: IFFALSE 6624
// end ;
7362: PPOPN 8
7364: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7365: NOP4
7369: IFFALSE 7849
7371: GO 7373
7373: DISABLE
7374: LD_INT 0
7376: PPUSH
7377: PPUSH
7378: PPUSH
7379: PPUSH
// begin enable ;
7380: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7381: LD_INT 35
7383: PPUSH
7384: LD_INT 1190
7386: PPUSH
7387: NOP4
7391: PPUSH
7392: NOP4
// tmp := [ ] ;
7396: NOP4
7400: PUSH
7401: EMPTY
7402: ST_TO_ADDR
// uc_side := 8 ;
7403: LD_ADDR_OWVAR 20
7407: PUSH
7408: LD_INT 8
7410: ST_TO_ADDR
// uc_nation := 2 ;
7411: LD_ADDR_OWVAR 21
7415: PUSH
7416: LD_INT 2
7418: ST_TO_ADDR
// InitHc ;
7419: NOP4
// for i = 1 to 3 do
7423: NOP4
7427: PUSH
7428: DOUBLE
7429: LD_INT 1
7431: DEC
7432: ST_TO_ADDR
7433: LD_INT 3
7435: PUSH
7436: FOR_TO
7437: IFFALSE 7566
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7439: LD_INT 13
7441: PUSH
7442: LD_INT 14
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PUSH
7449: LD_INT 1
7451: PPUSH
7452: LD_INT 2
7454: PPUSH
7455: NOP4
7459: ARRAY
7460: PPUSH
7461: LD_INT 3
7463: PPUSH
7464: LD_INT 5
7466: PPUSH
7467: LD_INT 27
7469: PUSH
7470: LD_INT 28
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PUSH
7477: LD_INT 1
7479: PPUSH
7480: LD_INT 2
7482: PPUSH
7483: NOP4
7487: ARRAY
7488: PPUSH
7489: LD_INT 100
7491: PPUSH
7492: NOP4
// un := CreateVehicle ;
7496: NOP4
7500: PUSH
7501: NOP4
7505: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7506: NOP4
7510: PPUSH
7511: LD_INT 4
7513: PPUSH
7514: NOP4
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7518: NOP4
7522: PPUSH
7523: NOP4
7527: PPUSH
7528: LD_INT 0
7530: PPUSH
7531: NOP4
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7535: NOP4
7539: PUSH
7540: NOP4
7544: PPUSH
7545: NOP4
7549: PUSH
7550: LD_INT 1
7552: PLUS
7553: PPUSH
7554: NOP4
7558: PPUSH
7559: NOP4
7563: ST_TO_ADDR
// end ;
7564: GO 7436
7566: POP
7567: POP
// for i = 1 to 4 do
7568: NOP4
7572: PUSH
7573: DOUBLE
7574: LD_INT 1
7576: DEC
7577: ST_TO_ADDR
7578: LD_INT 4
7580: PUSH
7581: FOR_TO
7582: IFFALSE 7663
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7584: LD_INT 0
7586: PPUSH
7587: LD_INT 1
7589: PPUSH
7590: LD_INT 4
7592: PPUSH
7593: NOP4
7597: PPUSH
7598: LD_INT 6
7600: PPUSH
7601: NOP4
// un := CreateHuman ;
7605: NOP4
7609: PUSH
7610: NOP4
7614: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7615: NOP4
7619: PPUSH
7620: NOP4
7624: PPUSH
7625: LD_INT 0
7627: PPUSH
7628: NOP4
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7632: NOP4
7636: PUSH
7637: NOP4
7641: PPUSH
7642: NOP4
7646: PUSH
7647: LD_INT 1
7649: PLUS
7650: PPUSH
7651: NOP4
7655: PPUSH
7656: NOP4
7660: ST_TO_ADDR
// end ;
7661: GO 7581
7663: POP
7664: POP
// wait ( 0 0$3 ) ;
7665: LD_INT 105
7667: PPUSH
7668: NOP4
// for i in tmp do
7672: NOP4
7676: PUSH
7677: NOP4
7681: PUSH
7682: FOR_IN
7683: IFFALSE 7751
// if GetClass ( i ) = 1 or GetType ( i ) = unit_vehicle then
7685: NOP4
7689: PPUSH
7690: NOP4
7694: PUSH
7695: LD_INT 1
7697: EQUAL
7698: PUSH
7699: NOP4
7703: PPUSH
7704: NOP4
7708: PUSH
7709: LD_INT 2
7711: EQUAL
7712: OR
7713: IFFALSE 7749
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7715: NOP4
7719: PPUSH
7720: LD_INT 81
7722: PUSH
7723: LD_INT 8
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PPUSH
7730: NOP4
7734: PPUSH
7735: NOP4
7739: PPUSH
7740: NOP4
7744: PPUSH
7745: NOP4
7749: GO 7682
7751: POP
7752: POP
// repeat AddComAgressiveMove ( tmp , 210 , 178 ) ;
7753: NOP4
7757: PPUSH
7758: LD_INT 210
7760: PPUSH
7761: LD_INT 178
7763: PPUSH
7764: NOP4
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7768: NOP4
7772: PUSH
7773: NOP4
7777: PPUSH
7778: LD_INT 22
7780: PUSH
7781: LD_INT 8
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PPUSH
7788: NOP4
7792: ST_TO_ADDR
// if x then
7793: NOP4
7797: IFFALSE 7825
// for i in x do
7799: NOP4
7803: PUSH
7804: NOP4
7808: PUSH
7809: FOR_IN
7810: IFFALSE 7823
// RemoveUnit ( i ) ;
7812: NOP4
7816: PPUSH
7817: NOP4
7821: GO 7809
7823: POP
7824: POP
// wait ( 0 0$1 ) ;
7825: LD_INT 35
7827: PPUSH
7828: NOP4
// until not FilterAllUnits ( [ f_side , 8 ] ) ;
7832: LD_INT 22
7834: PUSH
7835: LD_INT 8
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: NOP4
7846: NOT
7847: IFFALSE 7753
// end ;
7849: PPOPN 4
7851: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7852: LD_INT 22
7854: PUSH
7855: LD_INT 2
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 34
7864: PUSH
7865: LD_INT 31
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 3
7874: PUSH
7875: LD_INT 24
7877: PUSH
7878: LD_INT 1000
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: LIST
7893: PPUSH
7894: NOP4
7898: IFFALSE 7942
7900: GO 7902
7902: DISABLE
// begin ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
7903: LD_INT 22
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 34
7915: PUSH
7916: LD_INT 31
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PPUSH
7927: NOP4
7931: PPUSH
7932: LD_INT 106
7934: PPUSH
7935: LD_INT 14
7937: PPUSH
7938: NOP4
// end ; end_of_file
7942: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
7949: PPUSH
7950: PPUSH
// InGameOn ;
7951: NOP4
// CenterNowOnUnits ( JMM ) ;
7955: NOP4
7959: PPUSH
7960: NOP4
// SetAttitude ( 2 , 1 , att_friend , true ) ;
7964: LD_INT 2
7966: PPUSH
7967: LD_INT 1
7969: PPUSH
7970: LD_INT 1
7972: PPUSH
7973: LD_INT 1
7975: PPUSH
7976: NOP4
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7980: NOP4
7984: PUSH
7985: LD_INT 22
7987: PUSH
7988: LD_INT 1
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: LD_INT 25
7997: PUSH
7998: LD_INT 1
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PPUSH
8009: NOP4
8013: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
8014: NOP4
8018: PUSH
8019: LD_INT 22
8021: PUSH
8022: LD_INT 1
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 34
8031: PUSH
8032: LD_INT 11
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PPUSH
8043: NOP4
8047: PUSH
8048: LD_INT 1
8050: ARRAY
8051: ST_TO_ADDR
// for i = 1 to tmp do
8052: NOP4
8056: PUSH
8057: DOUBLE
8058: LD_INT 1
8060: DEC
8061: ST_TO_ADDR
8062: NOP4
8066: PUSH
8067: FOR_TO
8068: IFFALSE 8115
// begin if i = 5 then
8070: NOP4
8074: PUSH
8075: LD_INT 5
8077: EQUAL
8078: IFFALSE 8082
// break ;
8080: GO 8115
// sols := Replace ( sols , i , tmp [ i ] ) ;
8082: NOP4
8086: PUSH
8087: NOP4
8091: PPUSH
8092: NOP4
8096: PPUSH
8097: NOP4
8101: PUSH
8102: NOP4
8106: ARRAY
8107: PPUSH
8108: NOP4
8112: ST_TO_ADDR
// end ;
8113: GO 8067
8115: POP
8116: POP
// tmp := ar_force_tmp ;
8117: NOP4
8121: PUSH
8122: NOP4
8126: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
8127: NOP4
8131: PUSH
8132: LD_INT 1
8134: ARRAY
8135: PPUSH
8136: LD_INT 108
8138: PPUSH
8139: LD_INT 139
8141: PPUSH
8142: LD_INT 0
8144: PPUSH
8145: NOP4
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
8149: NOP4
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: PPUSH
8158: NOP4
8162: PPUSH
8163: NOP4
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
8167: NOP4
8171: PUSH
8172: LD_INT 2
8174: ARRAY
8175: PPUSH
8176: LD_INT 114
8178: PPUSH
8179: LD_INT 132
8181: PPUSH
8182: LD_INT 0
8184: PPUSH
8185: NOP4
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
8189: NOP4
8193: PUSH
8194: LD_INT 3
8196: ARRAY
8197: PPUSH
8198: LD_INT 115
8200: PPUSH
8201: LD_INT 132
8203: PPUSH
8204: LD_INT 0
8206: PPUSH
8207: NOP4
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
8211: NOP4
8215: PUSH
8216: LD_INT 2
8218: ARRAY
8219: PUSH
8220: NOP4
8224: PUSH
8225: LD_INT 3
8227: ARRAY
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: PPUSH
8233: NOP4
// ComMoveXY ( radar , 83 , 123 ) ;
8237: NOP4
8241: PPUSH
8242: LD_INT 83
8244: PPUSH
8245: LD_INT 123
8247: PPUSH
8248: NOP4
// Wait ( 0 0$01 ) ;
8252: LD_INT 35
8254: PPUSH
8255: NOP4
// CenterOnXY ( 90 , 144 ) ;
8259: LD_INT 90
8261: PPUSH
8262: LD_INT 144
8264: PPUSH
8265: NOP4
// ComMoveXY ( sols , 88 , 129 ) ;
8269: NOP4
8273: PPUSH
8274: LD_INT 88
8276: PPUSH
8277: LD_INT 129
8279: PPUSH
8280: NOP4
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
8284: NOP4
8288: PUSH
8289: LD_INT 92
8291: PUSH
8292: LD_INT 131
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 88
8301: PUSH
8302: LD_INT 127
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: PUSH
8309: LD_INT 91
8311: PUSH
8312: LD_INT 132
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: PUSH
8319: LD_INT 92
8321: PUSH
8322: LD_INT 134
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: ST_TO_ADDR
// for i = 1 to sols do
8335: NOP4
8339: PUSH
8340: DOUBLE
8341: LD_INT 1
8343: DEC
8344: ST_TO_ADDR
8345: NOP4
8349: PUSH
8350: FOR_TO
8351: IFFALSE 8424
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
8353: NOP4
8357: PUSH
8358: NOP4
8362: ARRAY
8363: PPUSH
8364: NOP4
8368: PUSH
8369: NOP4
8373: ARRAY
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PPUSH
8379: NOP4
8383: PUSH
8384: NOP4
8388: ARRAY
8389: PUSH
8390: LD_INT 2
8392: ARRAY
8393: PPUSH
8394: NOP4
// AddComCrawl ( sols [ i ] ) ;
8398: NOP4
8402: PUSH
8403: NOP4
8407: ARRAY
8408: PPUSH
8409: NOP4
// AddComHold ( sols ) ;
8413: NOP4
8417: PPUSH
8418: NOP4
// end ;
8422: GO 8350
8424: POP
8425: POP
// repeat wait ( 0 0$1 ) ;
8426: LD_INT 35
8428: PPUSH
8429: NOP4
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8433: NOP4
8437: PUSH
8438: LD_INT 1
8440: ARRAY
8441: PPUSH
8442: LD_INT 92
8444: PPUSH
8445: LD_INT 131
8447: PPUSH
8448: NOP4
8452: PUSH
8453: LD_INT 4
8455: LESS
8456: IFFALSE 8426
// CenterOnXY ( 96 , 139 ) ;
8458: LD_INT 96
8460: PPUSH
8461: LD_INT 139
8463: PPUSH
8464: NOP4
// wait ( 0 0$3 ) ;
8468: LD_INT 105
8470: PPUSH
8471: NOP4
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8475: LD_INT 111
8477: PPUSH
8478: LD_INT 135
8480: PPUSH
8481: LD_INT 1
8483: PPUSH
8484: LD_INT 25
8486: NEG
8487: PPUSH
8488: NOP4
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8492: NOP4
8496: PUSH
8497: LD_INT 2
8499: ARRAY
8500: PPUSH
8501: NOP4
8505: PUSH
8506: LD_INT 1
8508: ARRAY
8509: PPUSH
8510: NOP4
8514: PUSH
8515: LD_INT 3
8517: PLUS
8518: PPUSH
8519: NOP4
8523: PUSH
8524: LD_INT 1
8526: ARRAY
8527: PPUSH
8528: NOP4
8532: PPUSH
8533: NOP4
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8537: NOP4
8541: PUSH
8542: LD_INT 3
8544: ARRAY
8545: PPUSH
8546: NOP4
8550: PPUSH
8551: NOP4
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8555: NOP4
8559: PUSH
8560: LD_INT 2
8562: ARRAY
8563: PPUSH
8564: NOP4
8568: PUSH
8569: LD_INT 1
8571: ARRAY
8572: PPUSH
8573: NOP4
// repeat wait ( 0 0$1 ) ;
8577: LD_INT 35
8579: PPUSH
8580: NOP4
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8584: NOP4
8588: PUSH
8589: LD_INT 1
8591: ARRAY
8592: PPUSH
8593: NOP4
8597: PUSH
8598: LD_INT 2
8600: ARRAY
8601: PPUSH
8602: NOP4
8606: PUSH
8607: LD_INT 5
8609: LESS
8610: IFFALSE 8577
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8612: NOP4
8616: PUSH
8617: LD_INT 1
8619: ARRAY
8620: PPUSH
8621: NOP4
8625: PUSH
8626: LD_INT 2
8628: ARRAY
8629: PPUSH
8630: NOP4
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8634: NOP4
8638: PUSH
8639: LD_INT 1
8641: ARRAY
8642: PPUSH
8643: LD_STRING D1a-Merc1-1
8645: PPUSH
8646: NOP4
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8650: NOP4
8654: PUSH
8655: LD_INT 2
8657: ARRAY
8658: PPUSH
8659: LD_STRING D1a-FMerc2-1
8661: PPUSH
8662: NOP4
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8666: NOP4
8670: PUSH
8671: LD_INT 2
8673: ARRAY
8674: PPUSH
8675: NOP4
8679: PUSH
8680: LD_INT 1
8682: ARRAY
8683: PPUSH
8684: NOP4
// SetLives ( tmp [ 1 ] , 500 ) ;
8688: NOP4
8692: PUSH
8693: LD_INT 1
8695: ARRAY
8696: PPUSH
8697: LD_INT 500
8699: PPUSH
8700: NOP4
// wait ( 0 0$2 ) ;
8704: LD_INT 70
8706: PPUSH
8707: NOP4
// SetLives ( tmp [ 1 ] , 2 ) ;
8711: NOP4
8715: PUSH
8716: LD_INT 1
8718: ARRAY
8719: PPUSH
8720: LD_INT 2
8722: PPUSH
8723: NOP4
// wait ( 0 0$0.3 ) ;
8727: LD_INT 10
8729: PPUSH
8730: NOP4
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8734: NOP4
8738: PUSH
8739: LD_INT 1
8741: ARRAY
8742: PPUSH
8743: LD_STRING D1a-Merc1-2
8745: PPUSH
8746: NOP4
// wait ( 0 0$0.2 ) ;
8750: LD_INT 7
8752: PPUSH
8753: NOP4
// KillUnit ( tmp [ 1 ] ) ;
8757: NOP4
8761: PUSH
8762: LD_INT 1
8764: ARRAY
8765: PPUSH
8766: NOP4
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8770: NOP4
8774: PUSH
8775: LD_INT 2
8777: ARRAY
8778: PPUSH
8779: NOP4
8783: PPUSH
8784: NOP4
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8788: NOP4
8792: PUSH
8793: LD_INT 2
8795: ARRAY
8796: PPUSH
8797: LD_STRING D1a-FMerc2-2
8799: PPUSH
8800: NOP4
// wait ( 0 0$1 ) ;
8804: LD_INT 35
8806: PPUSH
8807: NOP4
// CenterOnUnits ( ar_dep_s ) ;
8811: NOP4
8815: PPUSH
8816: NOP4
// wait ( 0 0$2 ) ;
8820: LD_INT 70
8822: PPUSH
8823: NOP4
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8827: NOP4
8831: PPUSH
8832: LD_STRING D1a-Saliba-1
8834: PPUSH
8835: NOP4
// KillUnit ( Saliba ) ;
8839: NOP4
8843: PPUSH
8844: NOP4
// ComExitBuilding ( tmp [ 3 ] ) ;
8848: NOP4
8852: PUSH
8853: LD_INT 3
8855: ARRAY
8856: PPUSH
8857: NOP4
// CenterOnUnits ( JMM ) ;
8861: NOP4
8865: PPUSH
8866: NOP4
// wait ( 0 0$1 ) ;
8870: LD_INT 35
8872: PPUSH
8873: NOP4
// ComMoveXY ( sols , 88 , 141 ) ;
8877: NOP4
8881: PPUSH
8882: LD_INT 88
8884: PPUSH
8885: LD_INT 141
8887: PPUSH
8888: NOP4
// AddComWait ( sols , 0 0$2 ) ;
8892: NOP4
8896: PPUSH
8897: LD_INT 70
8899: PPUSH
8900: NOP4
// wait ( 0 0$2 ) ;
8904: LD_INT 70
8906: PPUSH
8907: NOP4
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
8911: LD_INT 2
8913: PPUSH
8914: LD_INT 1
8916: PPUSH
8917: LD_INT 2
8919: PPUSH
8920: LD_INT 1
8922: PPUSH
8923: NOP4
// InGameOff ;
8927: NOP4
// ComWalk ( sols ) ;
8931: NOP4
8935: PPUSH
8936: NOP4
// ChangeMissionObjectives ( M1 ) ;
8940: LD_STRING M1
8942: PPUSH
8943: NOP4
// game_speed := 4 ;
8947: LD_ADDR_OWVAR 65
8951: PUSH
8952: LD_INT 4
8954: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8955: LD_INT 111
8957: PPUSH
8958: LD_INT 135
8960: PPUSH
8961: LD_INT 1
8963: PPUSH
8964: NOP4
// SaveForQuickRestart ;
8968: NOP4
// ar_run := true ;
8972: NOP4
8976: PUSH
8977: LD_INT 1
8979: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8980: LD_INT 35
8982: PPUSH
8983: NOP4
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8987: LD_INT 22
8989: PUSH
8990: LD_INT 1
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: LD_INT 91
8999: PUSH
9000: NOP4
9004: PUSH
9005: LD_INT 10
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PPUSH
9017: NOP4
9021: PUSH
9022: NOP4
9026: PPUSH
9027: NOP4
9031: PUSH
9032: LD_INT 999
9034: LESS
9035: OR
9036: IFFALSE 8980
// if GetSide ( ar_dep_s ) = 2 then
9038: NOP4
9042: PPUSH
9043: NOP4
9047: PUSH
9048: LD_INT 2
9050: EQUAL
9051: IFFALSE 9065
// SetSide ( ar_dep_s , 1 ) ;
9053: NOP4
9057: PPUSH
9058: LD_INT 1
9060: PPUSH
9061: NOP4
// end ;
9065: LD_VAR 0 1
9069: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
9070: NOP4
9074: IFFALSE 9440
9076: GO 9078
9078: DISABLE
9079: LD_INT 0
9081: PPUSH
9082: PPUSH
9083: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
9084: NOP4
9088: PUSH
9089: NOP4
9093: PUSH
9094: NOP4
9098: PPUSH
9099: LD_INT 2
9101: PUSH
9102: LD_INT 21
9104: PUSH
9105: LD_INT 2
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PUSH
9112: LD_INT 21
9114: PUSH
9115: LD_INT 1
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: LIST
9126: PPUSH
9127: NOP4
9131: ADD
9132: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
9133: NOP4
9137: PPUSH
9138: LD_INT 5
9140: PPUSH
9141: NOP4
// ChangeSideFog ( 5 , 1 ) ;
9145: LD_INT 5
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: NOP4
// k := 1 ;
9155: NOP4
9159: PUSH
9160: LD_INT 1
9162: ST_TO_ADDR
// for i in tmp do
9163: NOP4
9167: PUSH
9168: NOP4
9172: PUSH
9173: FOR_IN
9174: IFFALSE 9261
// begin if IsInUnit ( i ) then
9176: NOP4
9180: PPUSH
9181: NOP4
9185: IFFALSE 9196
// ComExitBuilding ( i ) ;
9187: NOP4
9191: PPUSH
9192: NOP4
// if GetClass ( i ) = 3 then
9196: NOP4
9200: PPUSH
9201: NOP4
9205: PUSH
9206: LD_INT 3
9208: EQUAL
9209: IFFALSE 9245
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
9211: NOP4
9215: PPUSH
9216: NOP4
9220: PUSH
9221: NOP4
9225: ARRAY
9226: PPUSH
9227: NOP4
// k := k + 1 ;
9231: NOP4
9235: PUSH
9236: NOP4
9240: PUSH
9241: LD_INT 1
9243: PLUS
9244: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
9245: NOP4
9249: PPUSH
9250: NOP4
9254: PPUSH
9255: NOP4
// end ;
9259: GO 9173
9261: POP
9262: POP
// ar_patrol := true ;
9263: NOP4
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
9271: LD_INT 10
9273: PPUSH
9274: NOP4
// for i in tmp do
9278: NOP4
9282: PUSH
9283: NOP4
9287: PUSH
9288: FOR_IN
9289: IFFALSE 9319
// if not HasTask ( i ) then
9291: NOP4
9295: PPUSH
9296: NOP4
9300: NOT
9301: IFFALSE 9317
// ComMoveToArea ( i , escape_area ) ;
9303: NOP4
9307: PPUSH
9308: NOP4
9312: PPUSH
9313: NOP4
9317: GO 9288
9319: POP
9320: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
9321: NOP4
9325: PUSH
9326: NOP4
9330: PPUSH
9331: LD_INT 95
9333: PUSH
9334: NOP4
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PPUSH
9343: NOP4
9347: ST_TO_ADDR
// if k then
9348: NOP4
9352: IFFALSE 9421
// for i in k do
9354: NOP4
9358: PUSH
9359: NOP4
9363: PUSH
9364: FOR_IN
9365: IFFALSE 9419
// begin if IsInUnit ( i ) then
9367: NOP4
9371: PPUSH
9372: NOP4
9376: IFFALSE 9392
// RemoveUnit ( IsInUnit ( i ) ) ;
9378: NOP4
9382: PPUSH
9383: NOP4
9387: PPUSH
9388: NOP4
// RemoveUnit ( i ) ;
9392: NOP4
9396: PPUSH
9397: NOP4
// tmp := tmp diff i ;
9401: NOP4
9405: PUSH
9406: NOP4
9410: PUSH
9411: NOP4
9415: DIFF
9416: ST_TO_ADDR
// end ;
9417: GO 9364
9419: POP
9420: POP
// until tmp = [ ] ;
9421: NOP4
9425: PUSH
9426: EMPTY
9427: EQUAL
9428: IFFALSE 9271
// ChangeSideFog ( 5 , 5 ) ;
9430: LD_INT 5
9432: PPUSH
9433: LD_INT 5
9435: PPUSH
9436: NOP4
// end ;
9440: PPOPN 3
9442: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9443: NOP4
9447: IFFALSE 9741
9449: GO 9451
9451: DISABLE
9452: LD_INT 0
9454: PPUSH
9455: PPUSH
9456: PPUSH
// begin uc_side := 2 ;
9457: LD_ADDR_OWVAR 20
9461: PUSH
9462: LD_INT 2
9464: ST_TO_ADDR
// uc_nation := 2 ;
9465: LD_ADDR_OWVAR 21
9469: PUSH
9470: LD_INT 2
9472: ST_TO_ADDR
// InitHc ;
9473: NOP4
// PrepareHuman ( sex_male , 1 , 6 ) ;
9477: LD_INT 1
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: LD_INT 6
9485: PPUSH
9486: NOP4
// un := CreateHuman ;
9490: NOP4
9494: PUSH
9495: NOP4
9499: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9500: LD_INT 14
9502: PPUSH
9503: LD_INT 1
9505: PPUSH
9506: LD_INT 1
9508: PPUSH
9509: LD_INT 27
9511: PPUSH
9512: LD_INT 98
9514: PPUSH
9515: NOP4
// veh := CreateVehicle ;
9519: NOP4
9523: PUSH
9524: NOP4
9528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9529: NOP4
9533: PPUSH
9534: LD_INT 4
9536: PPUSH
9537: NOP4
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9541: NOP4
9545: PPUSH
9546: LD_INT 179
9548: PPUSH
9549: LD_INT 135
9551: PPUSH
9552: LD_INT 0
9554: PPUSH
9555: NOP4
// PlaceHumanInUnit ( un , veh ) ;
9559: NOP4
9563: PPUSH
9564: NOP4
9568: PPUSH
9569: NOP4
// ComMoveXY ( un , 126 , 133 ) ;
9573: NOP4
9577: PPUSH
9578: LD_INT 126
9580: PPUSH
9581: LD_INT 133
9583: PPUSH
9584: NOP4
// repeat wait ( 0 0$0.3 ) ;
9588: LD_INT 10
9590: PPUSH
9591: NOP4
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9595: LD_INT 1
9597: PPUSH
9598: NOP4
9602: PPUSH
9603: NOP4
9607: PUSH
9608: NOP4
9612: PPUSH
9613: NOP4
9617: PPUSH
9618: NOP4
9622: PUSH
9623: LD_INT 9
9625: LESS
9626: OR
9627: IFFALSE 9588
// ComHold ( veh ) ;
9629: NOP4
9633: PPUSH
9634: NOP4
// Say ( un , D2aa-Ar1-1 ) ;
9638: NOP4
9642: PPUSH
9643: LD_STRING D2aa-Ar1-1
9645: PPUSH
9646: NOP4
// ComMoveXY ( un , 177 , 96 ) ;
9650: NOP4
9654: PPUSH
9655: LD_INT 177
9657: PPUSH
9658: LD_INT 96
9660: PPUSH
9661: NOP4
// AddComExitVehicle ( un ) ;
9665: NOP4
9669: PPUSH
9670: NOP4
// repeat wait ( 0 0$1 ) ;
9674: LD_INT 35
9676: PPUSH
9677: NOP4
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9681: NOP4
9685: PPUSH
9686: NOP4
9690: PPUSH
9691: NOP4
9695: PUSH
9696: LD_INT 15
9698: LESS
9699: IFFALSE 9674
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9701: NOP4
9705: PUSH
9706: NOP4
9710: PPUSH
9711: LD_INT 3
9713: PUSH
9714: NOP4
9718: PUSH
9719: LD_INT 3
9721: ARRAY
9722: PUSH
9723: LD_INT 1
9725: PLUS
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PPUSH
9731: NOP4
9735: PPUSH
9736: NOP4
9740: ST_TO_ADDR
// end ;
9741: PPOPN 3
9743: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9744: NOP4
9748: PPUSH
9749: NOP4
9753: PUSH
9754: LD_INT 1
9756: EQUAL
9757: PUSH
9758: NOP4
9762: PPUSH
9763: NOP4
9767: OR
9768: IFFALSE 12200
9770: GO 9772
9772: DISABLE
9773: LD_INT 0
9775: PPUSH
9776: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9777: NOP4
9781: PUSH
9782: NOP4
9786: PPUSH
9787: LD_INT 21
9789: PUSH
9790: LD_INT 3
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PPUSH
9797: NOP4
9801: PUSH
9802: FOR_IN
9803: IFFALSE 9819
// SetSide ( i , 1 ) ;
9805: NOP4
9809: PPUSH
9810: LD_INT 1
9812: PPUSH
9813: NOP4
9817: GO 9802
9819: POP
9820: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9821: NOP4
9825: PUSH
9826: LD_INT 46
9828: PUSH
9829: LD_INT 41
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 50
9838: PUSH
9839: LD_INT 25
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 57
9848: PUSH
9849: LD_INT 75
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 75
9858: PUSH
9859: LD_INT 89
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 51
9868: PUSH
9869: LD_INT 45
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 95
9878: PUSH
9879: LD_INT 95
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 84
9888: PUSH
9889: LD_INT 77
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PUSH
9896: LD_INT 101
9898: PUSH
9899: LD_INT 76
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PUSH
9906: LD_INT 118
9908: PUSH
9909: LD_INT 81
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 139
9918: PUSH
9919: LD_INT 97
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 129
9928: PUSH
9929: LD_INT 114
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 154
9938: PUSH
9939: LD_INT 111
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: ST_TO_ADDR
// base_captured := true ;
9960: NOP4
9964: PUSH
9965: LD_INT 1
9967: ST_TO_ADDR
// DialogueOn ;
9968: NOP4
// CenterNowOnUnits ( JMM ) ;
9972: NOP4
9976: PPUSH
9977: NOP4
// Say ( JMM , D2-JMM-1 ) ;
9981: NOP4
9985: PPUSH
9986: LD_STRING D2-JMM-1
9988: PPUSH
9989: NOP4
// SayRadio ( Powell , D2-Pow-1 ) ;
9993: NOP4
9997: PPUSH
9998: LD_STRING D2-Pow-1
10000: PPUSH
10001: NOP4
// Say ( JMM , D2-JMM-2 ) ;
10005: NOP4
10009: PPUSH
10010: LD_STRING D2-JMM-2
10012: PPUSH
10013: NOP4
// SayRadio ( Powell , D2-Pow-2 ) ;
10017: NOP4
10021: PPUSH
10022: LD_STRING D2-Pow-2
10024: PPUSH
10025: NOP4
// Say ( JMM , D2-JMM-3 ) ;
10029: NOP4
10033: PPUSH
10034: LD_STRING D2-JMM-3
10036: PPUSH
10037: NOP4
// DialogueOff ;
10041: NOP4
// ChangeMissionObjectives ( M2 ) ;
10045: LD_STRING M2
10047: PPUSH
10048: NOP4
// Wait ( 0 0$2 ) ;
10052: LD_INT 70
10054: PPUSH
10055: NOP4
// if IsOk ( Gary ) then
10059: NOP4
10063: PPUSH
10064: NOP4
10068: IFFALSE 10082
// Say ( Gary , D2a-Gary-1 ) ;
10070: NOP4
10074: PPUSH
10075: LD_STRING D2a-Gary-1
10077: PPUSH
10078: NOP4
// if IsOk ( Bobby ) then
10082: NOP4
10086: PPUSH
10087: NOP4
10091: IFFALSE 10105
// Say ( Bobby , D2a-Bobby-1 ) ;
10093: NOP4
10097: PPUSH
10098: LD_STRING D2a-Bobby-1
10100: PPUSH
10101: NOP4
// if IsOk ( Cyrus ) then
10105: NOP4
10109: PPUSH
10110: NOP4
10114: IFFALSE 10128
// Say ( Cyrus , D2a-Cyrus-1 ) ;
10116: NOP4
10120: PPUSH
10121: LD_STRING D2a-Cyrus-1
10123: PPUSH
10124: NOP4
// if IsOk ( Lisa ) then
10128: NOP4
10132: PPUSH
10133: NOP4
10137: IFFALSE 10151
// Say ( Lisa , D2a-Lisa-1 ) ;
10139: NOP4
10143: PPUSH
10144: LD_STRING D2a-Lisa-1
10146: PPUSH
10147: NOP4
// if IsOk ( Frank ) then
10151: NOP4
10155: PPUSH
10156: NOP4
10160: IFFALSE 10174
// Say ( Frank , D2a-Frank-1 ) ;
10162: NOP4
10166: PPUSH
10167: LD_STRING D2a-Frank-1
10169: PPUSH
10170: NOP4
// if IsOk ( Cornel ) then
10174: NOP4
10178: PPUSH
10179: NOP4
10183: IFFALSE 10197
// Say ( Cornel , D2a-Corn-1 ) ;
10185: NOP4
10189: PPUSH
10190: LD_STRING D2a-Corn-1
10192: PPUSH
10193: NOP4
// if IsOk ( Donaldson ) then
10197: NOP4
10201: PPUSH
10202: NOP4
10206: IFFALSE 10220
// Say ( Donaldson , D2a-Don-1 ) ;
10208: NOP4
10212: PPUSH
10213: LD_STRING D2a-Don-1
10215: PPUSH
10216: NOP4
// if IsOk ( Brown ) then
10220: NOP4
10224: PPUSH
10225: NOP4
10229: IFFALSE 10243
// Say ( Brown , D2a-Brown-1 ) ;
10231: NOP4
10235: PPUSH
10236: LD_STRING D2a-Brown-1
10238: PPUSH
10239: NOP4
// Wait ( 0 0$30 ) ;
10243: LD_INT 1050
10245: PPUSH
10246: NOP4
// if IsOk ( Frank ) then
10250: NOP4
10254: PPUSH
10255: NOP4
10259: IFFALSE 10525
// begin DialogueOn ;
10261: NOP4
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
10265: NOP4
10269: PUSH
10270: NOP4
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PPUSH
10279: NOP4
// Say ( Frank , D3F-Frank-1 ) ;
10283: NOP4
10287: PPUSH
10288: LD_STRING D3F-Frank-1
10290: PPUSH
10291: NOP4
// Say ( JMM , D3F-JMM-1 ) ;
10295: NOP4
10299: PPUSH
10300: LD_STRING D3F-JMM-1
10302: PPUSH
10303: NOP4
// Say ( Frank , D3F-Frank-2 ) ;
10307: NOP4
10311: PPUSH
10312: LD_STRING D3F-Frank-2
10314: PPUSH
10315: NOP4
// case Query ( QFrank ) of 1 :
10319: LD_STRING QFrank
10321: PPUSH
10322: NOP4
10326: PUSH
10327: LD_INT 1
10329: DOUBLE
10330: EQUAL
10331: IFTRUE 10335
10333: GO 10358
10335: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
10336: NOP4
10340: PPUSH
10341: LD_STRING D3Fa-JMM-1
10343: PPUSH
10344: NOP4
// us_scout := 1 ;
10348: NOP4
10352: PUSH
10353: LD_INT 1
10355: ST_TO_ADDR
// end ; 2 :
10356: GO 10521
10358: LD_INT 2
10360: DOUBLE
10361: EQUAL
10362: IFTRUE 10366
10364: GO 10488
10366: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
10367: NOP4
10371: PPUSH
10372: LD_STRING D3Fb-JMM-1
10374: PPUSH
10375: NOP4
// Say ( Frank , D3Fb-Frank-1 ) ;
10379: NOP4
10383: PPUSH
10384: LD_STRING D3Fb-Frank-1
10386: PPUSH
10387: NOP4
// case Query ( QFrank2 ) of 1 :
10391: LD_STRING QFrank2
10393: PPUSH
10394: NOP4
10398: PUSH
10399: LD_INT 1
10401: DOUBLE
10402: EQUAL
10403: IFTRUE 10407
10405: GO 10454
10407: POP
// begin us_scout := 2 ;
10408: NOP4
10412: PUSH
10413: LD_INT 2
10415: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10416: NOP4
10420: PPUSH
10421: LD_STRING D3Fba-JMM-1
10423: PPUSH
10424: NOP4
// Say ( Frank , D3Fba-Frank-1 ) ;
10428: NOP4
10432: PPUSH
10433: LD_STRING D3Fba-Frank-1
10435: PPUSH
10436: NOP4
// Say ( JMM , D3Fba-JMM-2 ) ;
10440: NOP4
10444: PPUSH
10445: LD_STRING D3Fba-JMM-2
10447: PPUSH
10448: NOP4
// end ; 2 :
10452: GO 10486
10454: LD_INT 2
10456: DOUBLE
10457: EQUAL
10458: IFTRUE 10462
10460: GO 10485
10462: POP
// begin us_scout := 0 ;
10463: NOP4
10467: PUSH
10468: LD_INT 0
10470: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10471: NOP4
10475: PPUSH
10476: LD_STRING D3Fbb-JMM-1
10478: PPUSH
10479: NOP4
// end ; end ;
10483: GO 10486
10485: POP
// end ; 3 :
10486: GO 10521
10488: LD_INT 3
10490: DOUBLE
10491: EQUAL
10492: IFTRUE 10496
10494: GO 10520
10496: POP
// begin us_scout := - 1 ;
10497: NOP4
10501: PUSH
10502: LD_INT 1
10504: NEG
10505: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10506: NOP4
10510: PPUSH
10511: LD_STRING D3Fc-JMM-1
10513: PPUSH
10514: NOP4
// end ; end ;
10518: GO 10521
10520: POP
// DialogueOff ;
10521: NOP4
// end ; if us_scout in [ - 1 , 0 ] then
10525: NOP4
10529: PUSH
10530: LD_INT 1
10532: NEG
10533: PUSH
10534: LD_INT 0
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: IN
10541: IFFALSE 10545
// exit ;
10543: GO 12200
// if us_scout in [ 1 , 2 ] then
10545: NOP4
10549: PUSH
10550: LD_INT 1
10552: PUSH
10553: LD_INT 2
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: IN
10560: IFFALSE 11263
// begin if IsInUnit ( Frank ) then
10562: NOP4
10566: PPUSH
10567: NOP4
10571: IFFALSE 10582
// ComExitBuilding ( Frank ) ;
10573: NOP4
10577: PPUSH
10578: NOP4
// if IsDrivenBy ( Frank ) then
10582: NOP4
10586: PPUSH
10587: NOP4
10591: IFFALSE 10602
// ComExitVehicle ( Frank ) ;
10593: NOP4
10597: PPUSH
10598: NOP4
// SetSide ( Frank , 4 ) ;
10602: NOP4
10606: PPUSH
10607: LD_INT 4
10609: PPUSH
10610: NOP4
// wait ( 0 0$1 ) ;
10614: LD_INT 35
10616: PPUSH
10617: NOP4
// if us_scout = 2 then
10621: NOP4
10625: PUSH
10626: LD_INT 2
10628: EQUAL
10629: IFFALSE 10999
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10631: NOP4
10635: PPUSH
10636: LD_INT 75
10638: PPUSH
10639: LD_INT 63
10641: PPUSH
10642: NOP4
// AddComHold ( Frank ) ;
10646: NOP4
10650: PPUSH
10651: NOP4
// AddComWait ( Frank , 0 0$22 ) ;
10655: NOP4
10659: PPUSH
10660: LD_INT 770
10662: PPUSH
10663: NOP4
// AddComMoveXY ( Frank , 100 , 75 ) ;
10667: NOP4
10671: PPUSH
10672: LD_INT 100
10674: PPUSH
10675: LD_INT 75
10677: PPUSH
10678: NOP4
// AddComMoveXY ( Frank , 123 , 103 ) ;
10682: NOP4
10686: PPUSH
10687: LD_INT 123
10689: PPUSH
10690: LD_INT 103
10692: PPUSH
10693: NOP4
// AddComMoveXY ( Frank , 138 , 108 ) ;
10697: NOP4
10701: PPUSH
10702: LD_INT 138
10704: PPUSH
10705: LD_INT 108
10707: PPUSH
10708: NOP4
// AddComHold ( Frank ) ;
10712: NOP4
10716: PPUSH
10717: NOP4
// repeat wait ( 0 0$1 ) ;
10721: LD_INT 35
10723: PPUSH
10724: NOP4
// until IsAt ( Frank , 138 , 108 ) ;
10728: NOP4
10732: PPUSH
10733: LD_INT 138
10735: PPUSH
10736: LD_INT 108
10738: PPUSH
10739: NOP4
10743: IFFALSE 10721
// AddComMoveXY ( Frank , 125 , 132 ) ;
10745: NOP4
10749: PPUSH
10750: LD_INT 125
10752: PPUSH
10753: LD_INT 132
10755: PPUSH
10756: NOP4
// repeat wait ( 0 0$1 ) ;
10760: LD_INT 35
10762: PPUSH
10763: NOP4
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10767: LD_INT 1
10769: PPUSH
10770: NOP4
10774: PPUSH
10775: NOP4
10779: PUSH
10780: NOP4
10784: PPUSH
10785: NOP4
10789: PPUSH
10790: NOP4
10794: PUSH
10795: LD_INT 7
10797: LESS
10798: OR
10799: IFFALSE 10760
// DialogueOn ;
10801: NOP4
// CenterNowOnUnits ( Frank ) ;
10805: NOP4
10809: PPUSH
10810: NOP4
// dwait ( 0 0$0.3 ) ;
10814: LD_INT 10
10816: PPUSH
10817: NOP4
// Say ( JMM , D4Fa-JMM-1 ) ;
10821: NOP4
10825: PPUSH
10826: LD_STRING D4Fa-JMM-1
10828: PPUSH
10829: NOP4
// for i in points do
10833: NOP4
10837: PUSH
10838: NOP4
10842: PUSH
10843: FOR_IN
10844: IFFALSE 10902
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10846: NOP4
10850: PUSH
10851: LD_INT 1
10853: ARRAY
10854: PPUSH
10855: NOP4
10859: PUSH
10860: LD_INT 2
10862: ARRAY
10863: PPUSH
10864: LD_INT 1
10866: PPUSH
10867: LD_INT 20
10869: NEG
10870: PPUSH
10871: NOP4
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10875: NOP4
10879: PUSH
10880: LD_INT 1
10882: ARRAY
10883: PPUSH
10884: NOP4
10888: PUSH
10889: LD_INT 2
10891: ARRAY
10892: PPUSH
10893: LD_INT 1
10895: PPUSH
10896: NOP4
// end ;
10900: GO 10843
10902: POP
10903: POP
// dwait ( 0 0$0.5 ) ;
10904: LD_INT 18
10906: PPUSH
10907: NOP4
// CenterOnXY ( 42 , 27 ) ;
10911: LD_INT 42
10913: PPUSH
10914: LD_INT 27
10916: PPUSH
10917: NOP4
// Say ( Frank , D4Fa-Frank-1 ) ;
10921: NOP4
10925: PPUSH
10926: LD_STRING D4Fa-Frank-1
10928: PPUSH
10929: NOP4
// dwait ( 0 0$0.5 ) ;
10933: LD_INT 18
10935: PPUSH
10936: NOP4
// Say ( JMM , D4Fa-JMM-2 ) ;
10940: NOP4
10944: PPUSH
10945: LD_STRING D4Fa-JMM-2
10947: PPUSH
10948: NOP4
// CenterNowOnXY ( 118 , 80 ) ;
10952: LD_INT 118
10954: PPUSH
10955: LD_INT 80
10957: PPUSH
10958: NOP4
// Say ( Frank , D4Fa-Frank-2 ) ;
10962: NOP4
10966: PPUSH
10967: LD_STRING D4Fa-Frank-2
10969: PPUSH
10970: NOP4
// dwait ( 0 0$0.3 ) ;
10974: LD_INT 10
10976: PPUSH
10977: NOP4
// DialogueOff ;
10981: NOP4
// SetSide ( Frank , 1 ) ;
10985: NOP4
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: NOP4
// end else
10997: GO 11263
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10999: LD_INT 2
11001: PPUSH
11002: LD_INT 4
11004: PPUSH
11005: LD_INT 2
11007: PPUSH
11008: LD_INT 1
11010: PPUSH
11011: NOP4
// ComMoveXY ( Frank , 75 , 63 ) ;
11015: NOP4
11019: PPUSH
11020: LD_INT 75
11022: PPUSH
11023: LD_INT 63
11025: PPUSH
11026: NOP4
// AddComWait ( Frank , 0 0$5 ) ;
11030: NOP4
11034: PPUSH
11035: LD_INT 175
11037: PPUSH
11038: NOP4
// AddComMoveXY ( Frank , 102 , 76 ) ;
11042: NOP4
11046: PPUSH
11047: LD_INT 102
11049: PPUSH
11050: LD_INT 76
11052: PPUSH
11053: NOP4
// AddComMoveXY ( Frank , 108 , 70 ) ;
11057: NOP4
11061: PPUSH
11062: LD_INT 108
11064: PPUSH
11065: LD_INT 70
11067: PPUSH
11068: NOP4
// repeat wait ( 0 0$1 ) ;
11072: LD_INT 35
11074: PPUSH
11075: NOP4
// until See ( 2 , Frank ) ;
11079: LD_INT 2
11081: PPUSH
11082: NOP4
11086: PPUSH
11087: NOP4
11091: IFFALSE 11072
// ComMoveXY ( Frank , 112 , 118 ) ;
11093: NOP4
11097: PPUSH
11098: LD_INT 112
11100: PPUSH
11101: LD_INT 118
11103: PPUSH
11104: NOP4
// if GetLives ( Frank ) >= 750 then
11108: NOP4
11112: PPUSH
11113: NOP4
11117: PUSH
11118: LD_INT 750
11120: GREATEREQUAL
11121: IFFALSE 11135
// SetLives ( Frank , 700 ) ;
11123: NOP4
11127: PPUSH
11128: LD_INT 700
11130: PPUSH
11131: NOP4
// repeat wait ( 0 0$1 ) ;
11135: LD_INT 35
11137: PPUSH
11138: NOP4
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
11142: LD_INT 1
11144: PPUSH
11145: NOP4
11149: PPUSH
11150: NOP4
11154: PUSH
11155: NOP4
11159: PPUSH
11160: NOP4
11164: PPUSH
11165: NOP4
11169: PUSH
11170: LD_INT 17
11172: LESS
11173: OR
11174: IFFALSE 11135
// DialogueOn ;
11176: NOP4
// CenterNowOnUnits ( Frank ) ;
11180: NOP4
11184: PPUSH
11185: NOP4
// Say ( Frank , D4Fb-Frank-1 ) ;
11189: NOP4
11193: PPUSH
11194: LD_STRING D4Fb-Frank-1
11196: PPUSH
11197: NOP4
// Say ( JMM , D4Fb-JMM-1 ) ;
11201: NOP4
11205: PPUSH
11206: LD_STRING D4Fb-JMM-1
11208: PPUSH
11209: NOP4
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
11213: LD_INT 2
11215: PPUSH
11216: LD_STRING D4Fb-FSci1-1
11218: PPUSH
11219: NOP4
// Say ( Frank , D4Fb-Frank-2 ) ;
11223: NOP4
11227: PPUSH
11228: LD_STRING D4Fb-Frank-2
11230: PPUSH
11231: NOP4
// Say ( JMM , D4Fb-JMM-2 ) ;
11235: NOP4
11239: PPUSH
11240: LD_STRING D4Fb-JMM-2
11242: PPUSH
11243: NOP4
// DialogueOff ;
11247: NOP4
// SetSide ( Frank , 1 ) ;
11251: NOP4
11255: PPUSH
11256: LD_INT 1
11258: PPUSH
11259: NOP4
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
11263: NOP4
11267: PPUSH
11268: NOP4
11272: PUSH
11273: NOP4
11277: NOT
11278: AND
11279: IFFALSE 11427
// begin DialogueOn ;
11281: NOP4
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
11285: NOP4
11289: PUSH
11290: NOP4
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PPUSH
11299: NOP4
// Say ( Kikuchi , D3Y-Yam-1 ) ;
11303: NOP4
11307: PPUSH
11308: LD_STRING D3Y-Yam-1
11310: PPUSH
11311: NOP4
// Say ( JMM , D3Y-JMM-1 ) ;
11315: NOP4
11319: PPUSH
11320: LD_STRING D3Y-JMM-1
11322: PPUSH
11323: NOP4
// Say ( Kikuchi , D3Y-Yam-2 ) ;
11327: NOP4
11331: PPUSH
11332: LD_STRING D3Y-Yam-2
11334: PPUSH
11335: NOP4
// case Query ( QYamoko ) of 1 :
11339: LD_STRING QYamoko
11341: PPUSH
11342: NOP4
11346: PUSH
11347: LD_INT 1
11349: DOUBLE
11350: EQUAL
11351: IFTRUE 11355
11353: GO 11390
11355: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
11356: NOP4
11360: PPUSH
11361: LD_STRING D3Ya-JMM-1
11363: PPUSH
11364: NOP4
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
11368: NOP4
11372: PPUSH
11373: LD_STRING D3Ya-Yam-1
11375: PPUSH
11376: NOP4
// us_scout := 1 ;
11380: NOP4
11384: PUSH
11385: LD_INT 1
11387: ST_TO_ADDR
// end ; 2 :
11388: GO 11423
11390: LD_INT 2
11392: DOUBLE
11393: EQUAL
11394: IFTRUE 11398
11396: GO 11422
11398: POP
// begin us_scout := - 1 ;
11399: NOP4
11403: PUSH
11404: LD_INT 1
11406: NEG
11407: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11408: NOP4
11412: PPUSH
11413: LD_STRING D3Yb-JMM-1
11415: PPUSH
11416: NOP4
// end ; end ;
11420: GO 11423
11422: POP
// DialogueOff ;
11423: NOP4
// end ; if Frank then
11427: NOP4
11431: IFFALSE 11435
// exit ;
11433: GO 12200
// if us_scout in [ - 1 , 0 ] then
11435: NOP4
11439: PUSH
11440: LD_INT 1
11442: NEG
11443: PUSH
11444: LD_INT 0
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: IN
11451: IFFALSE 11455
// exit ;
11453: GO 12200
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11455: NOP4
11459: PUSH
11460: LD_INT 2
11462: PUSH
11463: LD_INT 2
11465: PUSH
11466: LD_INT 1
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: LIST
11473: PUSH
11474: NOP4
11478: ARRAY
11479: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11480: NOP4
11484: PUSH
11485: LD_INT 1
11487: PUSH
11488: LD_INT 2
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: IN
11495: IFFALSE 12200
// begin if IsInUnit ( Kikuchi ) then
11497: NOP4
11501: PPUSH
11502: NOP4
11506: IFFALSE 11517
// ComExitBuilding ( Kikuchi ) ;
11508: NOP4
11512: PPUSH
11513: NOP4
// if IsDrivenBy ( Kikuchi ) then
11517: NOP4
11521: PPUSH
11522: NOP4
11526: IFFALSE 11537
// ComExitVehicle ( Kikuchi ) ;
11528: NOP4
11532: PPUSH
11533: NOP4
// SetSide ( Kikuchi , 4 ) ;
11537: NOP4
11541: PPUSH
11542: LD_INT 4
11544: PPUSH
11545: NOP4
// wait ( 0 0$1 ) ;
11549: LD_INT 35
11551: PPUSH
11552: NOP4
// if us_scout = 2 then
11556: NOP4
11560: PUSH
11561: LD_INT 2
11563: EQUAL
11564: IFFALSE 11946
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11566: NOP4
11570: PPUSH
11571: LD_INT 75
11573: PPUSH
11574: LD_INT 63
11576: PPUSH
11577: NOP4
// AddComHold ( Kikuchi ) ;
11581: NOP4
11585: PPUSH
11586: NOP4
// AddComWait ( Kikuchi , 0 0$22 ) ;
11590: NOP4
11594: PPUSH
11595: LD_INT 770
11597: PPUSH
11598: NOP4
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11602: NOP4
11606: PPUSH
11607: LD_INT 100
11609: PPUSH
11610: LD_INT 75
11612: PPUSH
11613: NOP4
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11617: NOP4
11621: PPUSH
11622: LD_INT 123
11624: PPUSH
11625: LD_INT 103
11627: PPUSH
11628: NOP4
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11632: NOP4
11636: PPUSH
11637: LD_INT 138
11639: PPUSH
11640: LD_INT 108
11642: PPUSH
11643: NOP4
// AddComHold ( Kikuchi ) ;
11647: NOP4
11651: PPUSH
11652: NOP4
// repeat wait ( 0 0$1 ) ;
11656: LD_INT 35
11658: PPUSH
11659: NOP4
// until IsAt ( Kikuchi , 138 , 108 ) ;
11663: NOP4
11667: PPUSH
11668: LD_INT 138
11670: PPUSH
11671: LD_INT 108
11673: PPUSH
11674: NOP4
11678: IFFALSE 11656
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11680: NOP4
11684: PPUSH
11685: LD_INT 125
11687: PPUSH
11688: LD_INT 132
11690: PPUSH
11691: NOP4
// repeat wait ( 0 0$1 ) ;
11695: LD_INT 35
11697: PPUSH
11698: NOP4
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11702: LD_INT 1
11704: PPUSH
11705: NOP4
11709: PPUSH
11710: NOP4
11714: PUSH
11715: NOP4
11719: PPUSH
11720: NOP4
11724: PPUSH
11725: NOP4
11729: PUSH
11730: LD_INT 7
11732: LESS
11733: OR
11734: IFFALSE 11695
// DialogueOn ;
11736: NOP4
// CenterNowOnUnits ( Kikuchi ) ;
11740: NOP4
11744: PPUSH
11745: NOP4
// dwait ( 0 0$0.3 ) ;
11749: LD_INT 10
11751: PPUSH
11752: NOP4
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11756: NOP4
11760: PPUSH
11761: LD_STRING D4Ya-Yam-1
11763: PPUSH
11764: NOP4
// Say ( JMM , D4Ya-JMM-1 ) ;
11768: NOP4
11772: PPUSH
11773: LD_STRING D4Ya-JMM-1
11775: PPUSH
11776: NOP4
// for i in points do
11780: NOP4
11784: PUSH
11785: NOP4
11789: PUSH
11790: FOR_IN
11791: IFFALSE 11849
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11793: NOP4
11797: PUSH
11798: LD_INT 1
11800: ARRAY
11801: PPUSH
11802: NOP4
11806: PUSH
11807: LD_INT 2
11809: ARRAY
11810: PPUSH
11811: LD_INT 1
11813: PPUSH
11814: LD_INT 20
11816: NEG
11817: PPUSH
11818: NOP4
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11822: NOP4
11826: PUSH
11827: LD_INT 1
11829: ARRAY
11830: PPUSH
11831: NOP4
11835: PUSH
11836: LD_INT 2
11838: ARRAY
11839: PPUSH
11840: LD_INT 1
11842: PPUSH
11843: NOP4
// end ;
11847: GO 11790
11849: POP
11850: POP
// dwait ( 0 0$0.5 ) ;
11851: LD_INT 18
11853: PPUSH
11854: NOP4
// CenterOnXY ( 42 , 27 ) ;
11858: LD_INT 42
11860: PPUSH
11861: LD_INT 27
11863: PPUSH
11864: NOP4
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11868: NOP4
11872: PPUSH
11873: LD_STRING D4Ya-Yam-2
11875: PPUSH
11876: NOP4
// dwait ( 0 0$0.5 ) ;
11880: LD_INT 18
11882: PPUSH
11883: NOP4
// CenterNowOnXY ( 118 , 80 ) ;
11887: LD_INT 118
11889: PPUSH
11890: LD_INT 80
11892: PPUSH
11893: NOP4
// Say ( JMM , D4Ya-JMM-2 ) ;
11897: NOP4
11901: PPUSH
11902: LD_STRING D4Ya-JMM-2
11904: PPUSH
11905: NOP4
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11909: NOP4
11913: PPUSH
11914: LD_STRING D4Ya-Yam-3
11916: PPUSH
11917: NOP4
// dwait ( 0 0$0.3 ) ;
11921: LD_INT 10
11923: PPUSH
11924: NOP4
// DialogueOff ;
11928: NOP4
// SetSide ( Kikuchi , 1 ) ;
11932: NOP4
11936: PPUSH
11937: LD_INT 1
11939: PPUSH
11940: NOP4
// end else
11944: GO 12200
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11946: LD_INT 2
11948: PPUSH
11949: LD_INT 4
11951: PPUSH
11952: LD_INT 2
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: NOP4
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11962: NOP4
11966: PPUSH
11967: LD_INT 75
11969: PPUSH
11970: LD_INT 63
11972: PPUSH
11973: NOP4
// AddComWait ( Kikuchi , 0 0$5 ) ;
11977: NOP4
11981: PPUSH
11982: LD_INT 175
11984: PPUSH
11985: NOP4
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11989: NOP4
11993: PPUSH
11994: LD_INT 102
11996: PPUSH
11997: LD_INT 76
11999: PPUSH
12000: NOP4
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
12004: NOP4
12008: PPUSH
12009: LD_INT 108
12011: PPUSH
12012: LD_INT 70
12014: PPUSH
12015: NOP4
// repeat wait ( 0 0$1 ) ;
12019: LD_INT 35
12021: PPUSH
12022: NOP4
// until See ( 2 , Kikuchi ) ;
12026: LD_INT 2
12028: PPUSH
12029: NOP4
12033: PPUSH
12034: NOP4
12038: IFFALSE 12019
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
12040: NOP4
12044: PPUSH
12045: LD_INT 112
12047: PPUSH
12048: LD_INT 118
12050: PPUSH
12051: NOP4
// if GetLives ( Kikuchi ) >= 750 then
12055: NOP4
12059: PPUSH
12060: NOP4
12064: PUSH
12065: LD_INT 750
12067: GREATEREQUAL
12068: IFFALSE 12082
// SetLives ( Kikuchi , 700 ) ;
12070: NOP4
12074: PPUSH
12075: LD_INT 700
12077: PPUSH
12078: NOP4
// repeat wait ( 0 0$1 ) ;
12082: LD_INT 35
12084: PPUSH
12085: NOP4
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
12089: LD_INT 1
12091: PPUSH
12092: NOP4
12096: PPUSH
12097: NOP4
12101: PUSH
12102: NOP4
12106: PPUSH
12107: NOP4
12111: PPUSH
12112: NOP4
12116: PUSH
12117: LD_INT 17
12119: LESS
12120: OR
12121: IFFALSE 12082
// DialogueOn ;
12123: NOP4
// CenterNowOnUnits ( Kikuchi ) ;
12127: NOP4
12131: PPUSH
12132: NOP4
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
12136: NOP4
12140: PPUSH
12141: LD_STRING D4Yb-Yam-1
12143: PPUSH
12144: NOP4
// Say ( JMM , D4Yb-JMM-1 ) ;
12148: NOP4
12152: PPUSH
12153: LD_STRING D4Yb-JMM-1
12155: PPUSH
12156: NOP4
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
12160: NOP4
12164: PPUSH
12165: LD_STRING D4Yb-Yam-2
12167: PPUSH
12168: NOP4
// Say ( JMM , D4Yb-JMM-2 ) ;
12172: NOP4
12176: PPUSH
12177: LD_STRING D4Yb-JMM-2
12179: PPUSH
12180: NOP4
// DialogueOff ;
12184: NOP4
// SetSide ( Kikuchi , 1 ) ;
12188: NOP4
12192: PPUSH
12193: LD_INT 1
12195: PPUSH
12196: NOP4
// end ; end ; end ;
12200: PPOPN 2
12202: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
12203: NOP4
12207: IFFALSE 13240
12209: GO 12211
12211: DISABLE
12212: LD_INT 0
12214: PPUSH
12215: PPUSH
12216: PPUSH
12217: PPUSH
// begin enable ;
12218: ENABLE
// if not seen [ 1 ] then
12219: NOP4
12223: PUSH
12224: LD_INT 1
12226: ARRAY
12227: NOT
12228: IFFALSE 12408
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
12230: NOP4
12234: PUSH
12235: LD_INT 22
12237: PUSH
12238: LD_INT 2
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 2
12247: PUSH
12248: LD_INT 25
12250: PUSH
12251: LD_INT 11
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 33
12260: PUSH
12261: LD_INT 4
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: NOP4
12281: ST_TO_ADDR
// if tmp then
12282: NOP4
12286: IFFALSE 12408
// for i in tmp do
12288: NOP4
12292: PUSH
12293: NOP4
12297: PUSH
12298: FOR_IN
12299: IFFALSE 12406
// if See ( 1 , i ) then
12301: LD_INT 1
12303: PPUSH
12304: NOP4
12308: PPUSH
12309: NOP4
12313: IFFALSE 12404
// begin seen := Replace ( seen , 1 , true ) ;
12315: NOP4
12319: PUSH
12320: NOP4
12324: PPUSH
12325: LD_INT 1
12327: PPUSH
12328: LD_INT 1
12330: PPUSH
12331: NOP4
12335: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12336: LD_INT 1
12338: PPUSH
12339: NOP4
12343: IFFALSE 12404
// begin DialogueOn ;
12345: NOP4
// CenterNowOnUnits ( i ) ;
12349: NOP4
12353: PPUSH
12354: NOP4
// dwait ( 0 0$0.3 ) ;
12358: LD_INT 10
12360: PPUSH
12361: NOP4
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
12365: NOP4
12369: PUSH
12370: LD_INT 1
12372: PPUSH
12373: LD_STRING D5a-Sol2-1
12375: PPUSH
12376: NOP4
12380: ST_TO_ADDR
// if not un then
12381: NOP4
12385: NOT
12386: IFFALSE 12398
// SayRand ( sex_female , D5a-FSol2-1 ) ;
12388: LD_INT 2
12390: PPUSH
12391: LD_STRING D5a-FSol2-1
12393: PPUSH
12394: NOP4
// DialogueOff ;
12398: NOP4
// break ;
12402: GO 12406
// end ; end ;
12404: GO 12298
12406: POP
12407: POP
// end ; if not seen [ 2 ] then
12408: NOP4
12412: PUSH
12413: LD_INT 2
12415: ARRAY
12416: NOT
12417: IFFALSE 12642
// begin can_kamikazed := true ;
12419: NOP4
12423: PUSH
12424: LD_INT 1
12426: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12427: NOP4
12431: PUSH
12432: LD_INT 22
12434: PUSH
12435: LD_INT 2
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: LD_INT 25
12444: PUSH
12445: LD_INT 17
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PPUSH
12456: NOP4
12460: ST_TO_ADDR
// if tmp then
12461: NOP4
12465: IFFALSE 12642
// for i in tmp do
12467: NOP4
12471: PUSH
12472: NOP4
12476: PUSH
12477: FOR_IN
12478: IFFALSE 12640
// if See ( 1 , i ) then
12480: LD_INT 1
12482: PPUSH
12483: NOP4
12487: PPUSH
12488: NOP4
12492: IFFALSE 12638
// begin seen := Replace ( seen , 2 , true ) ;
12494: NOP4
12498: PUSH
12499: NOP4
12503: PPUSH
12504: LD_INT 2
12506: PPUSH
12507: LD_INT 1
12509: PPUSH
12510: NOP4
12514: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12515: LD_INT 1
12517: PPUSH
12518: NOP4
12522: IFFALSE 12638
// begin DialogueOn ;
12524: NOP4
// CenterNowOnUnits ( i ) ;
12528: NOP4
12532: PPUSH
12533: NOP4
// dwait ( 0 0$0.3 ) ;
12537: LD_INT 10
12539: PPUSH
12540: NOP4
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12544: NOP4
12548: PUSH
12549: LD_INT 1
12551: PPUSH
12552: LD_STRING D5b-Sol1-1
12554: PPUSH
12555: NOP4
12559: ST_TO_ADDR
// if not un then
12560: NOP4
12564: NOT
12565: IFFALSE 12583
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12567: NOP4
12571: PUSH
12572: LD_INT 2
12574: PPUSH
12575: LD_STRING D5b-FSol1-1
12577: PPUSH
12578: NOP4
12582: ST_TO_ADDR
// if un then
12583: NOP4
12587: IFFALSE 12632
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12589: NOP4
12593: PUSH
12594: LD_INT 1
12596: PPUSH
12597: LD_STRING D5b-Sol2-1
12599: PPUSH
12600: NOP4
12604: PPUSH
12605: NOP4
12609: ST_TO_ADDR
// if not un2 then
12610: NOP4
12614: NOT
12615: IFFALSE 12632
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12617: LD_INT 2
12619: PPUSH
12620: LD_STRING D5b-FSol2-1
12622: PPUSH
12623: NOP4
12627: PPUSH
12628: NOP4
// end ; DialogueOff ;
12632: NOP4
// break ;
12636: GO 12640
// end ; end ;
12638: GO 12477
12640: POP
12641: POP
// end ; if not seen [ 3 ] then
12642: NOP4
12646: PUSH
12647: LD_INT 3
12649: ARRAY
12650: NOT
12651: IFFALSE 12825
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12653: NOP4
12657: PUSH
12658: LD_INT 22
12660: PUSH
12661: LD_INT 2
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 33
12670: PUSH
12671: LD_INT 2
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PPUSH
12682: NOP4
12686: ST_TO_ADDR
// if tmp then
12687: NOP4
12691: IFFALSE 12825
// for i in tmp do
12693: NOP4
12697: PUSH
12698: NOP4
12702: PUSH
12703: FOR_IN
12704: IFFALSE 12823
// if See ( 1 , i ) then
12706: LD_INT 1
12708: PPUSH
12709: NOP4
12713: PPUSH
12714: NOP4
12718: IFFALSE 12821
// begin seen := Replace ( seen , 3 , true ) ;
12720: NOP4
12724: PUSH
12725: NOP4
12729: PPUSH
12730: LD_INT 3
12732: PPUSH
12733: LD_INT 1
12735: PPUSH
12736: NOP4
12740: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12741: LD_INT 1
12743: PPUSH
12744: NOP4
12748: IFFALSE 12821
// begin DialogueOn ;
12750: NOP4
// CenterNowOnUnits ( i ) ;
12754: NOP4
12758: PPUSH
12759: NOP4
// dwait ( 0 0$0.3 ) ;
12763: LD_INT 10
12765: PPUSH
12766: NOP4
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12770: NOP4
12774: PUSH
12775: LD_INT 1
12777: PPUSH
12778: LD_STRING D8-Sol1-1
12780: PPUSH
12781: NOP4
12785: ST_TO_ADDR
// if not un then
12786: NOP4
12790: NOT
12791: IFFALSE 12803
// SayRand ( sex_female , D8-FSol1-1 ) ;
12793: LD_INT 2
12795: PPUSH
12796: LD_STRING D8-FSol1-1
12798: PPUSH
12799: NOP4
// Say ( JMM , D8-JMM-1 ) ;
12803: NOP4
12807: PPUSH
12808: LD_STRING D8-JMM-1
12810: PPUSH
12811: NOP4
// DialogueOff ;
12815: NOP4
// break ;
12819: GO 12823
// end ; end ;
12821: GO 12703
12823: POP
12824: POP
// end ; if not seen [ 4 ] then
12825: NOP4
12829: PUSH
12830: LD_INT 4
12832: ARRAY
12833: NOT
12834: IFFALSE 12996
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12836: NOP4
12840: PUSH
12841: LD_INT 22
12843: PUSH
12844: LD_INT 2
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: LD_INT 33
12853: PUSH
12854: LD_INT 5
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PPUSH
12865: NOP4
12869: ST_TO_ADDR
// if tmp then
12870: NOP4
12874: IFFALSE 12996
// for i in tmp do
12876: NOP4
12880: PUSH
12881: NOP4
12885: PUSH
12886: FOR_IN
12887: IFFALSE 12994
// if See ( 1 , i ) then
12889: LD_INT 1
12891: PPUSH
12892: NOP4
12896: PPUSH
12897: NOP4
12901: IFFALSE 12992
// begin seen := Replace ( seen , 4 , true ) ;
12903: NOP4
12907: PUSH
12908: NOP4
12912: PPUSH
12913: LD_INT 4
12915: PPUSH
12916: LD_INT 1
12918: PPUSH
12919: NOP4
12923: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12924: LD_INT 1
12926: PPUSH
12927: NOP4
12931: IFFALSE 12992
// begin DialogueOn ;
12933: NOP4
// CenterNowOnUnits ( i ) ;
12937: NOP4
12941: PPUSH
12942: NOP4
// dwait ( 0 0$0.3 ) ;
12946: LD_INT 10
12948: PPUSH
12949: NOP4
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12953: NOP4
12957: PUSH
12958: LD_INT 1
12960: PPUSH
12961: LD_STRING D5a-Sol1-1
12963: PPUSH
12964: NOP4
12968: ST_TO_ADDR
// if not un then
12969: NOP4
12973: NOT
12974: IFFALSE 12986
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12976: LD_INT 2
12978: PPUSH
12979: LD_STRING D5a-FSol1-1
12981: PPUSH
12982: NOP4
// DialogueOff ;
12986: NOP4
// break ;
12990: GO 12994
// end ; end ;
12992: GO 12886
12994: POP
12995: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12996: NOP4
13000: PUSH
13001: LD_INT 5
13003: ARRAY
13004: NOT
13005: PUSH
13006: NOP4
13010: PUSH
13011: LD_INT 3
13013: ARRAY
13014: AND
13015: IFFALSE 13189
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
13017: NOP4
13021: PUSH
13022: LD_INT 22
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 34
13034: PUSH
13035: LD_INT 31
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PPUSH
13046: NOP4
13050: ST_TO_ADDR
// if tmp then
13051: NOP4
13055: IFFALSE 13189
// for i in tmp do
13057: NOP4
13061: PUSH
13062: NOP4
13066: PUSH
13067: FOR_IN
13068: IFFALSE 13187
// if See ( 1 , i ) then
13070: LD_INT 1
13072: PPUSH
13073: NOP4
13077: PPUSH
13078: NOP4
13082: IFFALSE 13185
// begin seen := Replace ( seen , 5 , true ) ;
13084: NOP4
13088: PUSH
13089: NOP4
13093: PPUSH
13094: LD_INT 5
13096: PPUSH
13097: LD_INT 1
13099: PPUSH
13100: NOP4
13104: ST_TO_ADDR
// if CanSayRand ( 1 ) then
13105: LD_INT 1
13107: PPUSH
13108: NOP4
13112: IFFALSE 13185
// begin DialogueOn ;
13114: NOP4
// CenterNowOnUnits ( i ) ;
13118: NOP4
13122: PPUSH
13123: NOP4
// dwait ( 0 0$0.3 ) ;
13127: LD_INT 10
13129: PPUSH
13130: NOP4
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
13134: NOP4
13138: PUSH
13139: LD_INT 1
13141: PPUSH
13142: LD_STRING D8a-Sol2-1
13144: PPUSH
13145: NOP4
13149: ST_TO_ADDR
// if not un then
13150: NOP4
13154: NOT
13155: IFFALSE 13167
// SayRand ( sex_female , D8a-FSol2-1 ) ;
13157: LD_INT 2
13159: PPUSH
13160: LD_STRING D8a-FSol2-1
13162: PPUSH
13163: NOP4
// Say ( JMM , D8a-JMM-1 ) ;
13167: NOP4
13171: PPUSH
13172: LD_STRING D8a-JMM-1
13174: PPUSH
13175: NOP4
// DialogueOff ;
13179: NOP4
// break ;
13183: GO 13187
// end ; end ;
13185: GO 13067
13187: POP
13188: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
13189: NOP4
13193: PUSH
13194: LD_INT 1
13196: ARRAY
13197: PUSH
13198: NOP4
13202: PUSH
13203: LD_INT 2
13205: ARRAY
13206: AND
13207: PUSH
13208: NOP4
13212: PUSH
13213: LD_INT 3
13215: ARRAY
13216: AND
13217: PUSH
13218: NOP4
13222: PUSH
13223: LD_INT 4
13225: ARRAY
13226: AND
13227: PUSH
13228: NOP4
13232: PUSH
13233: LD_INT 5
13235: ARRAY
13236: AND
13237: IFFALSE 13240
// disable ;
13239: DISABLE
// end ;
13240: PPOPN 4
13242: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
13243: NOP4
13247: PUSH
13248: NOP4
13252: AND
13253: IFFALSE 13451
13255: GO 13257
13257: DISABLE
13258: LD_INT 0
13260: PPUSH
// begin DialogueOn ;
13261: NOP4
// CenterNowOnUnits ( kamikazed ) ;
13265: NOP4
13269: PPUSH
13270: NOP4
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
13274: NOP4
13278: PUSH
13279: LD_INT 1
13281: PPUSH
13282: LD_STRING D5c-Sol1-1
13284: PPUSH
13285: NOP4
13289: ST_TO_ADDR
// if not un then
13290: NOP4
13294: NOT
13295: IFFALSE 13313
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
13297: NOP4
13301: PUSH
13302: LD_INT 2
13304: PPUSH
13305: LD_STRING D5c-FSol1-1
13307: PPUSH
13308: NOP4
13312: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
13313: NOP4
13317: PPUSH
13318: LD_STRING D5c-JMM-1
13320: PPUSH
13321: NOP4
// if IsOk ( Lisa ) then
13325: NOP4
13329: PPUSH
13330: NOP4
13334: IFFALSE 13350
// Say ( Lisa , D5d-Lisa-1 ) else
13336: NOP4
13340: PPUSH
13341: LD_STRING D5d-Lisa-1
13343: PPUSH
13344: NOP4
13348: GO 13435
// if IsOk ( Cyrus ) then
13350: NOP4
13354: PPUSH
13355: NOP4
13359: IFFALSE 13375
// Say ( Cyrus , D5d-Cyrus-1 ) else
13361: NOP4
13365: PPUSH
13366: LD_STRING D5d-Cyrus-1
13368: PPUSH
13369: NOP4
13373: GO 13435
// if IsOk ( Gary ) then
13375: NOP4
13379: PPUSH
13380: NOP4
13384: IFFALSE 13400
// Say ( Gary , D5d-Gary-1 ) else
13386: NOP4
13390: PPUSH
13391: LD_STRING D5d-Gary-1
13393: PPUSH
13394: NOP4
13398: GO 13435
// if GetSex ( un ) = sex_male then
13400: NOP4
13404: PPUSH
13405: NOP4
13409: PUSH
13410: LD_INT 1
13412: EQUAL
13413: IFFALSE 13429
// Say ( un , D5d-Sol1-1 ) else
13415: NOP4
13419: PPUSH
13420: LD_STRING D5d-Sol1-1
13422: PPUSH
13423: NOP4
13427: GO 13435
// begin DialogueOff ;
13429: NOP4
// exit ;
13433: GO 13451
// end ; Say ( JMM , D5d-JMM-1 ) ;
13435: NOP4
13439: PPUSH
13440: LD_STRING D5d-JMM-1
13442: PPUSH
13443: NOP4
// DialogueOff ;
13447: NOP4
// end ;
13451: PPOPN 1
13453: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13454: LD_INT 1
13456: PPUSH
13457: NOP4
13461: PPUSH
13462: NOP4
13466: PUSH
13467: LD_INT 2
13469: GREATEREQUAL
13470: IFFALSE 13591
13472: GO 13474
13474: DISABLE
13475: LD_INT 0
13477: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13478: LD_INT 10
13480: PPUSH
13481: LD_INT 5
13483: PPUSH
13484: LD_INT 1
13486: PPUSH
13487: LD_INT 10
13489: NEG
13490: PPUSH
13491: NOP4
// RemoveSeeing ( 10 , 5 , 1 ) ;
13495: LD_INT 10
13497: PPUSH
13498: LD_INT 5
13500: PPUSH
13501: LD_INT 1
13503: PPUSH
13504: NOP4
// CenterNowOnXY ( 10 , 5 ) ;
13508: LD_INT 10
13510: PPUSH
13511: LD_INT 5
13513: PPUSH
13514: NOP4
// DialogueOn ;
13518: NOP4
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13522: NOP4
13526: PUSH
13527: LD_INT 1
13529: PPUSH
13530: LD_STRING D6-Sci1-1
13532: PPUSH
13533: NOP4
13537: ST_TO_ADDR
// if un then
13538: NOP4
13542: IFFALSE 13580
// begin Say ( JMM , D6-JMM-1 ) ;
13544: NOP4
13548: PPUSH
13549: LD_STRING D6-JMM-1
13551: PPUSH
13552: NOP4
// Say ( un , D6-Sci1-2 ) ;
13556: NOP4
13560: PPUSH
13561: LD_STRING D6-Sci1-2
13563: PPUSH
13564: NOP4
// Say ( JMM , D6-JMM-2 ) ;
13568: NOP4
13572: PPUSH
13573: LD_STRING D6-JMM-2
13575: PPUSH
13576: NOP4
// end ; DialogueOff ;
13580: NOP4
// ChangeMissionObjectives ( M3 ) ;
13584: LD_STRING M3
13586: PPUSH
13587: NOP4
// end ;
13591: PPOPN 1
13593: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp , escaped ;
13594: NOP4
13598: PUSH
13599: LD_INT 42000
13601: GREATEREQUAL
13602: PUSH
13603: LD_INT 2
13605: PPUSH
13606: LD_INT 169
13608: PPUSH
13609: LD_INT 90
13611: PPUSH
13612: LD_INT 10
13614: PPUSH
13615: NOP4
13619: PUSH
13620: LD_INT 4
13622: ARRAY
13623: PUSH
13624: LD_INT 0
13626: EQUAL
13627: PUSH
13628: NOP4
13632: PPUSH
13633: NOP4
13637: OR
13638: PUSH
13639: NOP4
13643: PPUSH
13644: NOP4
13648: PUSH
13649: LD_INT 1
13651: EQUAL
13652: OR
13653: AND
13654: PUSH
13655: LD_INT 94
13657: PPUSH
13658: NOP4
13662: NOT
13663: AND
13664: IFFALSE 14887
13666: GO 13668
13668: DISABLE
13669: LD_INT 0
13671: PPUSH
13672: PPUSH
13673: PPUSH
13674: PPUSH
13675: PPUSH
// begin uc_side := 5 ;
13676: LD_ADDR_OWVAR 20
13680: PUSH
13681: LD_INT 5
13683: ST_TO_ADDR
// uc_nation := 2 ;
13684: LD_ADDR_OWVAR 21
13688: PUSH
13689: LD_INT 2
13691: ST_TO_ADDR
// InitHc ;
13692: NOP4
// PrepareHuman ( sex_male , 3 , 8 ) ;
13696: LD_INT 1
13698: PPUSH
13699: LD_INT 3
13701: PPUSH
13702: LD_INT 8
13704: PPUSH
13705: NOP4
// hc_attr := [ 12 , 12 ] ;
13709: LD_ADDR_OWVAR 29
13713: PUSH
13714: LD_INT 12
13716: PUSH
13717: LD_INT 12
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: ST_TO_ADDR
// hc_name := Hans Felige ;
13724: LD_ADDR_OWVAR 26
13728: PUSH
13729: LD_STRING Hans Felige
13731: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13732: LD_ADDR_OWVAR 33
13736: PUSH
13737: LD_STRING SecondCharsGal
13739: ST_TO_ADDR
// hc_face_number := 7 ;
13740: LD_ADDR_OWVAR 34
13744: PUSH
13745: LD_INT 7
13747: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13748: NOP4
13752: PUSH
13753: NOP4
13757: ST_TO_ADDR
// InitHc ;
13758: NOP4
// PrepareHuman ( sex_male , 16 , 2 ) ;
13762: LD_INT 1
13764: PPUSH
13765: LD_INT 16
13767: PPUSH
13768: LD_INT 2
13770: PPUSH
13771: NOP4
// hc_attr := [ 12 , 12 ] ;
13775: LD_ADDR_OWVAR 29
13779: PUSH
13780: LD_INT 12
13782: PUSH
13783: LD_INT 12
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: ST_TO_ADDR
// hc_name :=  ;
13790: LD_ADDR_OWVAR 26
13794: PUSH
13795: LD_STRING 
13797: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13798: NOP4
13802: PUSH
13803: NOP4
13807: ST_TO_ADDR
// InitHc ;
13808: NOP4
// repeat wait ( 0 0$1 ) ;
13812: LD_INT 35
13814: PPUSH
13815: NOP4
// until not InBattle ( 1 ) ;
13819: LD_INT 1
13821: PPUSH
13822: NOP4
13826: NOT
13827: IFFALSE 13812
// wait ( 0 0$5 ) ;
13829: LD_INT 175
13831: PPUSH
13832: NOP4
// DialogueOn ;
13836: NOP4
// InGameOn ;
13840: NOP4
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13844: NOP4
13848: PUSH
13849: LD_INT 22
13851: PUSH
13852: LD_INT 1
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 2
13861: PUSH
13862: LD_INT 25
13864: PUSH
13865: LD_INT 1
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 25
13874: PUSH
13875: LD_INT 2
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 25
13884: PUSH
13885: LD_INT 3
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 25
13894: PUSH
13895: LD_INT 4
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 25
13904: PUSH
13905: LD_INT 5
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: LD_INT 25
13914: PUSH
13915: LD_INT 8
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PPUSH
13935: NOP4
13939: PUSH
13940: NOP4
13944: PUSH
13945: NOP4
13949: PUSH
13950: NOP4
13954: PUSH
13955: NOP4
13959: PUSH
13960: NOP4
13964: PUSH
13965: NOP4
13969: PUSH
13970: NOP4
13974: PUSH
13975: NOP4
13979: PUSH
13980: NOP4
13984: PUSH
13985: NOP4
13989: PUSH
13990: NOP4
13994: PUSH
13995: NOP4
13999: PUSH
14000: NOP4
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: DIFF
14020: PPUSH
14021: LD_INT 26
14023: PUSH
14024: LD_INT 1
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PPUSH
14031: NOP4
14035: PUSH
14036: LD_INT 1
14038: ARRAY
14039: ST_TO_ADDR
// if Brown then
14040: NOP4
14044: IFFALSE 14056
// un := Brown ;
14046: NOP4
14050: PUSH
14051: NOP4
14055: ST_TO_ADDR
// if un then
14056: NOP4
14060: IFFALSE 14086
// begin Say ( un , D7-Sol1-1 ) ;
14062: NOP4
14066: PPUSH
14067: LD_STRING D7-Sol1-1
14069: PPUSH
14070: NOP4
// Say ( JMM , D7-JMM-1 ) ;
14074: NOP4
14078: PPUSH
14079: LD_STRING D7-JMM-1
14081: PPUSH
14082: NOP4
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
14086: NOP4
14090: PPUSH
14091: LD_STRING D7-Ar1-1
14093: PPUSH
14094: NOP4
// Say ( JMM , D7-JMM-2 ) ;
14098: NOP4
14102: PPUSH
14103: LD_STRING D7-JMM-2
14105: PPUSH
14106: NOP4
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
14110: NOP4
14114: PPUSH
14115: LD_STRING D7-Ar1-2
14117: PPUSH
14118: NOP4
// Say ( JMM , D7-JMM-3 ) ;
14122: NOP4
14126: PPUSH
14127: LD_STRING D7-JMM-3
14129: PPUSH
14130: NOP4
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
14134: NOP4
14138: PPUSH
14139: LD_STRING D7-Ar1-3
14141: PPUSH
14142: NOP4
// Say ( JMM , D7-JMM-4 ) ;
14146: NOP4
14150: PPUSH
14151: LD_STRING D7-JMM-4
14153: PPUSH
14154: NOP4
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
14158: NOP4
14162: PPUSH
14163: LD_STRING D7-Ar1-4
14165: PPUSH
14166: NOP4
// InGameOff ;
14170: NOP4
// DialogueOff ;
14174: NOP4
// case Query ( QCameras ) of 1 :
14178: LD_STRING QCameras
14180: PPUSH
14181: NOP4
14185: PUSH
14186: LD_INT 1
14188: DOUBLE
14189: EQUAL
14190: IFTRUE 14194
14192: GO 14197
14194: POP
// ; 2 :
14195: GO 14211
14197: LD_INT 2
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14210
14205: POP
// exit ; end ;
14206: GO 14887
14208: GO 14211
14210: POP
// ChangeMissionObjectives ( MCar ) ;
14211: LD_STRING MCar
14213: PPUSH
14214: NOP4
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
14218: LD_INT 124
14220: PPUSH
14221: LD_INT 90
14223: PPUSH
14224: LD_INT 1
14226: PPUSH
14227: LD_INT 6
14229: NEG
14230: PPUSH
14231: NOP4
// RemoveSeeing ( 124 , 90 , 1 ) ;
14235: LD_INT 124
14237: PPUSH
14238: LD_INT 90
14240: PPUSH
14241: LD_INT 1
14243: PPUSH
14244: NOP4
// SetAreaMapShow ( parking_marea , 1 ) ;
14248: NOP4
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: NOP4
// wait ( 3 ) ;
14260: LD_INT 3
14262: PPUSH
14263: NOP4
// CenterNowOnXY ( 124 , 90 ) ;
14267: LD_INT 124
14269: PPUSH
14270: LD_INT 90
14272: PPUSH
14273: NOP4
// cargo := false ;
14277: NOP4
14281: PUSH
14282: LD_INT 0
14284: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14285: LD_INT 35
14287: PPUSH
14288: NOP4
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
14292: NOP4
14296: PUSH
14297: NOP4
14301: PPUSH
14302: LD_INT 32
14304: PUSH
14305: LD_INT 3
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 34
14314: PUSH
14315: LD_INT 32
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: LD_INT 58
14324: PUSH
14325: EMPTY
14326: LIST
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: PPUSH
14333: NOP4
14337: ST_TO_ADDR
// until cargo ;
14338: NOP4
14342: IFFALSE 14285
// cargo := cargo [ 1 ] ;
14344: NOP4
14348: PUSH
14349: NOP4
14353: PUSH
14354: LD_INT 1
14356: ARRAY
14357: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
14358: NOP4
14362: PPUSH
14363: LD_INT 5
14365: PPUSH
14366: NOP4
// SetAreaMapShow ( parking_marea , 0 ) ;
14370: NOP4
14374: PPUSH
14375: LD_INT 0
14377: PPUSH
14378: NOP4
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
14382: NOP4
14386: PPUSH
14387: NOP4
14391: PPUSH
14392: LD_INT 0
14394: PPUSH
14395: NOP4
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
14399: NOP4
14403: PPUSH
14404: NOP4
14408: PPUSH
14409: LD_INT 0
14411: PPUSH
14412: NOP4
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
14416: NOP4
14420: PUSH
14421: NOP4
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PPUSH
14430: NOP4
14434: PPUSH
14435: NOP4
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14439: NOP4
14443: PPUSH
14444: NOP4
14448: PPUSH
14449: NOP4
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14453: NOP4
14457: PUSH
14458: NOP4
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PPUSH
14467: LD_INT 209
14469: PPUSH
14470: LD_INT 178
14472: PPUSH
14473: NOP4
// escaped := 0 ;
14477: NOP4
14481: PUSH
14482: LD_INT 0
14484: ST_TO_ADDR
// while ( true ) do
14485: LD_INT 1
14487: IFFALSE 14709
// begin wait ( 0 0$1 ) ;
14489: LD_INT 35
14491: PPUSH
14492: NOP4
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14496: NOP4
14500: PPUSH
14501: NOP4
14505: NOT
14506: PUSH
14507: NOP4
14511: PPUSH
14512: NOP4
14516: NOT
14517: OR
14518: IFFALSE 14544
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14520: NOP4
14524: PUSH
14525: NOP4
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PPUSH
14534: LD_INT 209
14536: PPUSH
14537: LD_INT 178
14539: PPUSH
14540: NOP4
// if IsInArea ( ar_mechanic , escape_area ) then
14544: NOP4
14548: PPUSH
14549: NOP4
14553: PPUSH
14554: NOP4
14558: IFFALSE 14583
// begin RemoveUnit ( ar_mechanic ) ;
14560: NOP4
14564: PPUSH
14565: NOP4
// escaped := escaped + 1 ;
14569: NOP4
14573: PUSH
14574: NOP4
14578: PUSH
14579: LD_INT 1
14581: PLUS
14582: ST_TO_ADDR
// end ; if IsInArea ( ar_mechanic_friend , escape_area ) then
14583: NOP4
14587: PPUSH
14588: NOP4
14592: PPUSH
14593: NOP4
14597: IFFALSE 14622
// begin RemoveUnit ( ar_mechanic_friend ) ;
14599: NOP4
14603: PPUSH
14604: NOP4
// escaped := escaped + 1 ;
14608: NOP4
14612: PUSH
14613: NOP4
14617: PUSH
14618: LD_INT 1
14620: PLUS
14621: ST_TO_ADDR
// end ; if IsInArea ( cargo , escape_area ) then
14622: NOP4
14626: PPUSH
14627: NOP4
14631: PPUSH
14632: NOP4
14636: IFFALSE 14647
// RemoveUnit ( cargo ) ;
14638: NOP4
14642: PPUSH
14643: NOP4
// if not IsPlaced ( ar_mechanic ) and escaped >= 2 then
14647: NOP4
14651: PPUSH
14652: NOP4
14656: NOT
14657: PUSH
14658: NOP4
14662: PUSH
14663: LD_INT 2
14665: GREATEREQUAL
14666: AND
14667: IFFALSE 14671
// break ;
14669: GO 14709
// if not IsPlaced ( ar_mechanic ) and not IsPlaced ( ar_mechanic_friend ) and escaped < 2 then
14671: NOP4
14675: PPUSH
14676: NOP4
14680: NOT
14681: PUSH
14682: NOP4
14686: PPUSH
14687: NOP4
14691: NOT
14692: AND
14693: PUSH
14694: NOP4
14698: PUSH
14699: LD_INT 2
14701: LESS
14702: AND
14703: IFFALSE 14707
// exit ;
14705: GO 14887
// end ;
14707: GO 14485
// wait ( 0 0$2 ) ;
14709: LD_INT 70
14711: PPUSH
14712: NOP4
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14716: NOP4
14720: PPUSH
14721: LD_STRING D7a-Ar1-1
14723: PPUSH
14724: NOP4
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14728: NOP4
14732: PUSH
14733: LD_INT 129
14735: PUSH
14736: LD_INT 10
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 103
14745: PUSH
14746: LD_INT 6
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 148
14755: PUSH
14756: LD_INT 47
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 155
14765: PUSH
14766: LD_INT 16
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: ST_TO_ADDR
// if Difficulty = 1 then
14779: NOP4
14783: PUSH
14784: LD_INT 1
14786: EQUAL
14787: IFFALSE 14824
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14789: NOP4
14793: PUSH
14794: NOP4
14798: PUSH
14799: LD_INT 78
14801: PUSH
14802: LD_INT 7
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 104
14811: PUSH
14812: LD_INT 43
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: ADD
14823: ST_TO_ADDR
// for i in tmp do
14824: NOP4
14828: PUSH
14829: NOP4
14833: PUSH
14834: FOR_IN
14835: IFFALSE 14868
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14837: NOP4
14841: PUSH
14842: LD_INT 1
14844: ARRAY
14845: PPUSH
14846: NOP4
14850: PUSH
14851: LD_INT 2
14853: ARRAY
14854: PPUSH
14855: LD_INT 1
14857: PPUSH
14858: LD_INT 9
14860: NEG
14861: PPUSH
14862: NOP4
14866: GO 14834
14868: POP
14869: POP
// SetAchievement ( ACH_FRIEND ) ;
14870: LD_STRING ACH_FRIEND
14872: PPUSH
14873: NOP4
// CenterOnXY ( 129 , 10 ) ;
14877: LD_INT 129
14879: PPUSH
14880: LD_INT 10
14882: PPUSH
14883: NOP4
// end ;
14887: PPOPN 5
14889: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14890: NOP4
14894: PUSH
14895: LD_INT 21000
14897: MINUS
14898: PUSH
14899: NOP4
14903: LESSEQUAL
14904: IFFALSE 14944
14906: GO 14908
14908: DISABLE
// begin powell_warn := true ;
14909: NOP4
14913: PUSH
14914: LD_INT 1
14916: ST_TO_ADDR
// DialogueOn ;
14917: NOP4
// SayRadio ( Powell , D9-Pow-1 ) ;
14921: NOP4
14925: PPUSH
14926: LD_STRING D9-Pow-1
14928: PPUSH
14929: NOP4
// dwait ( 0 0$0.3 ) ;
14933: LD_INT 10
14935: PPUSH
14936: NOP4
// DialogueOff ;
14940: NOP4
// end ;
14944: END
// every 0 0$1 trigger game_time <= tick do
14945: NOP4
14949: PUSH
14950: NOP4
14954: LESSEQUAL
14955: IFFALSE 14994
14957: GO 14959
14959: DISABLE
// begin DialogueOn ;
14960: NOP4
// SayRadio ( Powell , D9a-Pow-1 ) ;
14964: NOP4
14968: PPUSH
14969: LD_STRING D9a-Pow-1
14971: PPUSH
14972: NOP4
// dwait ( 0 0$2 ) ;
14976: LD_INT 70
14978: PPUSH
14979: NOP4
// DialogueOff ;
14983: NOP4
// YouLost ( Command ) ;
14987: LD_STRING Command
14989: PPUSH
14990: NOP4
// end ;
14994: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp , m1 , m2 , m3 ;
14995: LD_INT 22
14997: PUSH
14998: LD_INT 2
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 30
15007: PUSH
15008: LD_INT 1
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PPUSH
15019: NOP4
15023: PUSH
15024: LD_INT 0
15026: EQUAL
15027: PUSH
15028: NOP4
15032: PPUSH
15033: NOP4
15037: AND
15038: IFFALSE 15947
15040: GO 15042
15042: DISABLE
15043: LD_INT 0
15045: PPUSH
15046: PPUSH
15047: PPUSH
15048: PPUSH
// begin m1 := false ;
15049: NOP4
15053: PUSH
15054: LD_INT 0
15056: ST_TO_ADDR
// m2 := false ;
15057: NOP4
15061: PUSH
15062: LD_INT 0
15064: ST_TO_ADDR
// m3 := false ;
15065: NOP4
15069: PUSH
15070: LD_INT 0
15072: ST_TO_ADDR
// if not am_veh_consturcted then
15073: NOP4
15077: NOT
15078: IFFALSE 15087
// SetAchievement ( ACH_ARABTECH ) ;
15080: LD_STRING ACH_ARABTECH
15082: PPUSH
15083: NOP4
// if tick < [ 120 120$00 , 100 100$00 , 95 95$00 ] [ Difficulty ] then
15087: NOP4
15091: PUSH
15092: LD_INT 252000
15094: PUSH
15095: LD_INT 210000
15097: PUSH
15098: LD_INT 199500
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: PUSH
15106: NOP4
15110: ARRAY
15111: LESS
15112: IFFALSE 15134
// begin m3 := true ;
15114: NOP4
15118: PUSH
15119: LD_INT 1
15121: ST_TO_ADDR
// AddMedal ( Time1 , 1 ) ;
15122: LD_STRING Time1
15124: PPUSH
15125: LD_INT 1
15127: PPUSH
15128: NOP4
// end else
15132: GO 15165
// if not powell_warn then
15134: NOP4
15138: NOT
15139: IFFALSE 15154
// AddMedal ( Time1 , - 1 ) else
15141: LD_STRING Time1
15143: PPUSH
15144: LD_INT 1
15146: NEG
15147: PPUSH
15148: NOP4
15152: GO 15165
// AddMedal ( Time1 , - 2 ) ;
15154: LD_STRING Time1
15156: PPUSH
15157: LD_INT 2
15159: NEG
15160: PPUSH
15161: NOP4
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
15165: NOP4
15169: PUSH
15170: LD_INT 5
15172: PUSH
15173: LD_INT 4
15175: PUSH
15176: LD_INT 3
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: PUSH
15184: NOP4
15188: ARRAY
15189: GREATEREQUAL
15190: IFFALSE 15205
// AddMedal ( Destroy , - 2 ) else
15192: LD_STRING Destroy
15194: PPUSH
15195: LD_INT 2
15197: NEG
15198: PPUSH
15199: NOP4
15203: GO 15338
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
15205: LD_INT 22
15207: PUSH
15208: LD_INT 2
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 21
15217: PUSH
15218: LD_INT 3
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: LD_INT 50
15227: PUSH
15228: EMPTY
15229: LIST
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: PPUSH
15236: NOP4
15240: PUSH
15241: LD_INT 25
15243: GREATEREQUAL
15244: IFFALSE 15259
// AddMedal ( Destroy , - 1 ) else
15246: LD_STRING Destroy
15248: PPUSH
15249: LD_INT 1
15251: NEG
15252: PPUSH
15253: NOP4
15257: GO 15338
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
15259: LD_INT 22
15261: PUSH
15262: LD_INT 2
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 21
15271: PUSH
15272: LD_INT 3
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 50
15281: PUSH
15282: EMPTY
15283: LIST
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: PPUSH
15290: NOP4
15294: PUSH
15295: LD_INT 15
15297: GREATEREQUAL
15298: IFFALSE 15320
// begin m1 := true ;
15300: NOP4
15304: PUSH
15305: LD_INT 1
15307: ST_TO_ADDR
// AddMedal ( Destroy , 1 ) ;
15308: LD_STRING Destroy
15310: PPUSH
15311: LD_INT 1
15313: PPUSH
15314: NOP4
// end else
15318: GO 15338
// begin m1 := true ;
15320: NOP4
15324: PUSH
15325: LD_INT 1
15327: ST_TO_ADDR
// AddMedal ( Destroy , 2 ) ;
15328: LD_STRING Destroy
15330: PPUSH
15331: LD_INT 2
15333: PPUSH
15334: NOP4
// end ; SaveVariable ( artifact_get , 11_artifact_captured ) ;
15338: NOP4
15342: PPUSH
15343: LD_STRING 11_artifact_captured
15345: PPUSH
15346: NOP4
// if artifact_get then
15350: NOP4
15354: IFFALSE 15376
// begin m2 := true ;
15356: NOP4
15360: PUSH
15361: LD_INT 1
15363: ST_TO_ADDR
// AddMedal ( Artefact , 1 ) ;
15364: LD_STRING Artefact
15366: PPUSH
15367: LD_INT 1
15369: PPUSH
15370: NOP4
// end else
15374: GO 15387
// AddMedal ( Artefact , - 1 ) ;
15376: LD_STRING Artefact
15378: PPUSH
15379: LD_INT 1
15381: NEG
15382: PPUSH
15383: NOP4
// if m1 and m2 and m3 and Difficulty = 3 then
15387: NOP4
15391: PUSH
15392: NOP4
15396: AND
15397: PUSH
15398: NOP4
15402: AND
15403: PUSH
15404: NOP4
15408: PUSH
15409: LD_INT 3
15411: EQUAL
15412: AND
15413: IFFALSE 15425
// SetAchievementEX ( ACH_AMER , 11 ) ;
15415: LD_STRING ACH_AMER
15417: PPUSH
15418: LD_INT 11
15420: PPUSH
15421: NOP4
// if m1 and m2 and m3 and loses_counter = 0 then
15425: NOP4
15429: PUSH
15430: NOP4
15434: AND
15435: PUSH
15436: NOP4
15440: AND
15441: PUSH
15442: NOP4
15446: PUSH
15447: LD_INT 0
15449: EQUAL
15450: AND
15451: IFFALSE 15467
// begin wait ( 3 ) ;
15453: LD_INT 3
15455: PPUSH
15456: NOP4
// SetAchievement ( ACH_GENERAL ) ;
15460: LD_STRING ACH_GENERAL
15462: PPUSH
15463: NOP4
// end ; if tick <= 100 100$00 then
15467: NOP4
15471: PUSH
15472: LD_INT 210000
15474: LESSEQUAL
15475: IFFALSE 15491
// begin wait ( 3 ) ;
15477: LD_INT 3
15479: PPUSH
15480: NOP4
// SetAchievement ( ACH_ASPEED_11 ) ;
15484: LD_STRING ACH_ASPEED_11
15486: PPUSH
15487: NOP4
// end ; GiveMedals ( MAIN ) ;
15491: LD_STRING MAIN
15493: PPUSH
15494: NOP4
// selected := UnitFilter ( selected , [ f_alive ] ) ;
15498: NOP4
15502: PUSH
15503: NOP4
15507: PPUSH
15508: LD_INT 51
15510: PUSH
15511: EMPTY
15512: LIST
15513: PPUSH
15514: NOP4
15518: ST_TO_ADDR
// tmp := JMM ^ selected ;
15519: NOP4
15523: PUSH
15524: NOP4
15528: PUSH
15529: NOP4
15533: ADD
15534: ST_TO_ADDR
// RewardPeople ( tmp ) ;
15535: NOP4
15539: PPUSH
15540: NOP4
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
15544: NOP4
15548: PUSH
15549: NOP4
15553: PUSH
15554: NOP4
15558: PUSH
15559: NOP4
15563: PUSH
15564: NOP4
15568: PUSH
15569: NOP4
15573: PUSH
15574: NOP4
15578: PUSH
15579: NOP4
15583: PUSH
15584: NOP4
15588: PUSH
15589: NOP4
15593: PUSH
15594: NOP4
15598: PUSH
15599: NOP4
15603: PUSH
15604: NOP4
15608: PUSH
15609: NOP4
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: DIFF
15629: PPUSH
15630: LD_STRING 11c_others
15632: PPUSH
15633: NOP4
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15637: NOP4
15641: PPUSH
15642: NOP4
15646: PUSH
15647: LD_STRING JMM
15649: STR
15650: PPUSH
15651: NOP4
// if Lisa then
15655: NOP4
15659: IFFALSE 15679
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15661: NOP4
15665: PPUSH
15666: NOP4
15670: PUSH
15671: LD_STRING Lisa
15673: STR
15674: PPUSH
15675: NOP4
// if Donaldson then
15679: NOP4
15683: IFFALSE 15703
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15685: NOP4
15689: PPUSH
15690: NOP4
15694: PUSH
15695: LD_STRING Donaldson
15697: STR
15698: PPUSH
15699: NOP4
// if Bobby then
15703: NOP4
15707: IFFALSE 15727
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15709: NOP4
15713: PPUSH
15714: NOP4
15718: PUSH
15719: LD_STRING Bobby
15721: STR
15722: PPUSH
15723: NOP4
// if Cyrus then
15727: NOP4
15731: IFFALSE 15751
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15733: NOP4
15737: PPUSH
15738: NOP4
15742: PUSH
15743: LD_STRING Cyrus
15745: STR
15746: PPUSH
15747: NOP4
// if Denis then
15751: NOP4
15755: IFFALSE 15775
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15757: NOP4
15761: PPUSH
15762: NOP4
15766: PUSH
15767: LD_STRING Denis
15769: STR
15770: PPUSH
15771: NOP4
// if Brown then
15775: NOP4
15779: IFFALSE 15799
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15781: NOP4
15785: PPUSH
15786: NOP4
15790: PUSH
15791: LD_STRING Brown
15793: STR
15794: PPUSH
15795: NOP4
// if Gladstone then
15799: NOP4
15803: IFFALSE 15823
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15805: NOP4
15809: PPUSH
15810: NOP4
15814: PUSH
15815: LD_STRING Gladstone
15817: STR
15818: PPUSH
15819: NOP4
// if Houten then
15823: NOP4
15827: IFFALSE 15847
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15829: NOP4
15833: PPUSH
15834: NOP4
15838: PUSH
15839: LD_STRING Houten
15841: STR
15842: PPUSH
15843: NOP4
// if Cornel then
15847: NOP4
15851: IFFALSE 15871
// SaveCharacters ( Cornel , mission_prefix & Cornell ) ;
15853: NOP4
15857: PPUSH
15858: NOP4
15862: PUSH
15863: LD_STRING Cornell
15865: STR
15866: PPUSH
15867: NOP4
// if Gary then
15871: NOP4
15875: IFFALSE 15895
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15877: NOP4
15881: PPUSH
15882: NOP4
15886: PUSH
15887: LD_STRING Gary
15889: STR
15890: PPUSH
15891: NOP4
// if Frank then
15895: NOP4
15899: IFFALSE 15919
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15901: NOP4
15905: PPUSH
15906: NOP4
15910: PUSH
15911: LD_STRING Frank
15913: STR
15914: PPUSH
15915: NOP4
// if Kikuchi then
15919: NOP4
15923: IFFALSE 15943
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15925: NOP4
15929: PPUSH
15930: NOP4
15934: PUSH
15935: LD_STRING Kikuchi
15937: STR
15938: PPUSH
15939: NOP4
// YouWin ;
15943: NOP4
// end ;
15947: PPOPN 4
15949: END
// export function CanSayRand ( side ) ; begin
15950: LD_INT 0
15952: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15953: NOP4
15957: PUSH
15958: LD_INT 52
15960: PUSH
15961: EMPTY
15962: LIST
15963: PUSH
15964: LD_INT 22
15966: PUSH
15967: NOP4
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 2
15978: PUSH
15979: LD_INT 25
15981: PUSH
15982: LD_INT 1
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 25
15991: PUSH
15992: LD_INT 2
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 25
16001: PUSH
16002: LD_INT 3
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 25
16011: PUSH
16012: LD_INT 4
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: LIST
16030: PPUSH
16031: NOP4
16035: PUSH
16036: NOP4
16040: PUSH
16041: NOP4
16045: PUSH
16046: NOP4
16050: PUSH
16051: NOP4
16055: PUSH
16056: NOP4
16060: PUSH
16061: NOP4
16065: PUSH
16066: NOP4
16070: PUSH
16071: NOP4
16075: PUSH
16076: NOP4
16080: PUSH
16081: NOP4
16085: PUSH
16086: NOP4
16090: PUSH
16091: NOP4
16095: PUSH
16096: NOP4
16100: PUSH
16101: NOP4
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: DIFF
16122: ST_TO_ADDR
// end ;
16123: LD_VAR 0 2
16127: RET
// export function SayRand ( sex , dial ) ; begin
16128: LD_INT 0
16130: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
16131: NOP4
16135: PUSH
16136: LD_INT 52
16138: PUSH
16139: EMPTY
16140: LIST
16141: PUSH
16142: LD_INT 22
16144: PUSH
16145: LD_INT 1
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 26
16154: PUSH
16155: NOP4
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 2
16166: PUSH
16167: LD_INT 25
16169: PUSH
16170: LD_INT 1
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 25
16179: PUSH
16180: LD_INT 2
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 25
16189: PUSH
16190: LD_INT 3
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 25
16199: PUSH
16200: LD_INT 4
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: PPUSH
16220: NOP4
16224: PUSH
16225: NOP4
16229: PUSH
16230: NOP4
16234: PUSH
16235: NOP4
16239: PUSH
16240: NOP4
16244: PUSH
16245: NOP4
16249: PUSH
16250: NOP4
16254: PUSH
16255: NOP4
16259: PUSH
16260: NOP4
16264: PUSH
16265: NOP4
16269: PUSH
16270: NOP4
16274: PUSH
16275: NOP4
16279: PUSH
16280: NOP4
16284: PUSH
16285: NOP4
16289: PUSH
16290: NOP4
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: DIFF
16311: ST_TO_ADDR
// if not result then
16312: NOP4
16316: NOT
16317: IFFALSE 16321
// exit ;
16319: GO 16349
// result := result [ 1 ] ;
16321: NOP4
16325: PUSH
16326: NOP4
16330: PUSH
16331: LD_INT 1
16333: ARRAY
16334: ST_TO_ADDR
// Say ( result , dial ) ;
16335: NOP4
16339: PPUSH
16340: NOP4
16344: PPUSH
16345: NOP4
// end ;
16349: LD_VAR 0 3
16353: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
16354: LD_INT 0
16356: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
16357: NOP4
16361: PUSH
16362: LD_INT 22
16364: PUSH
16365: LD_INT 1
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: LD_INT 26
16374: PUSH
16375: NOP4
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 2
16386: PUSH
16387: LD_INT 25
16389: PUSH
16390: LD_INT 1
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 25
16399: PUSH
16400: LD_INT 2
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 25
16409: PUSH
16410: LD_INT 3
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 25
16419: PUSH
16420: LD_INT 4
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: PPUSH
16439: NOP4
16443: PUSH
16444: NOP4
16448: PUSH
16449: NOP4
16453: PUSH
16454: NOP4
16458: PUSH
16459: NOP4
16463: PUSH
16464: NOP4
16468: PUSH
16469: NOP4
16473: PUSH
16474: NOP4
16478: PUSH
16479: NOP4
16483: PUSH
16484: NOP4
16488: PUSH
16489: NOP4
16493: PUSH
16494: NOP4
16498: PUSH
16499: NOP4
16503: PUSH
16504: NOP4
16508: PUSH
16509: NOP4
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: PUSH
16530: NOP4
16534: ADD
16535: DIFF
16536: ST_TO_ADDR
// if not result then
16537: NOP4
16541: NOT
16542: IFFALSE 16546
// exit ;
16544: GO 16574
// result := result [ 1 ] ;
16546: NOP4
16550: PUSH
16551: NOP4
16555: PUSH
16556: LD_INT 1
16558: ARRAY
16559: ST_TO_ADDR
// Say ( result , dial ) ;
16560: NOP4
16564: PPUSH
16565: NOP4
16569: PPUSH
16570: NOP4
// end ; end_of_file
16574: LD_VAR 0 4
16578: RET
// export function CustomEvent ( event ) ; begin
16579: LD_INT 0
16581: PPUSH
// end ;
16582: LD_VAR 0 2
16586: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
16587: NOP4
16591: PPUSH
16592: NOP4
16596: PUSH
16597: LD_INT 1
16599: EQUAL
16600: IFFALSE 16610
// artifact_get := true ;
16602: NOP4
16606: PUSH
16607: LD_INT 1
16609: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
16610: NOP4
16614: PPUSH
16615: NOP4
16619: PUSH
16620: LD_INT 2
16622: EQUAL
16623: IFFALSE 16641
// begin artifact_get := false ;
16625: NOP4
16629: PUSH
16630: LD_INT 0
16632: ST_TO_ADDR
// artifact_stolen := true ;
16633: NOP4
16637: PUSH
16638: LD_INT 1
16640: ST_TO_ADDR
// end ; artifact_oncargo := true ;
16641: NOP4
16645: PUSH
16646: LD_INT 1
16648: ST_TO_ADDR
// end ;
16649: PPOPN 2
16651: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
16652: NOP4
16656: PUSH
16657: LD_INT 0
16659: ST_TO_ADDR
// end ;
16660: PPOPN 2
16662: END
// on UnitDestroyed ( un ) do begin if un = JMM then
16663: NOP4
16667: PUSH
16668: NOP4
16672: EQUAL
16673: IFFALSE 16684
// begin YouLost ( JMM ) ;
16675: LD_STRING JMM
16677: PPUSH
16678: NOP4
// exit ;
16682: GO 16816
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16684: NOP4
16688: PUSH
16689: LD_INT 22
16691: PUSH
16692: LD_INT 1
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 21
16701: PUSH
16702: LD_INT 1
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 2
16711: PUSH
16712: LD_INT 25
16714: PUSH
16715: LD_INT 1
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 25
16724: PUSH
16725: LD_INT 2
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 25
16734: PUSH
16735: LD_INT 3
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 25
16744: PUSH
16745: LD_INT 4
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 25
16754: PUSH
16755: LD_INT 5
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 25
16764: PUSH
16765: LD_INT 8
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: LIST
16785: PPUSH
16786: NOP4
16790: IN
16791: IFFALSE 16807
// loses_counter := loses_counter + 1 ;
16793: NOP4
16797: PUSH
16798: NOP4
16802: PUSH
16803: LD_INT 1
16805: PLUS
16806: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16807: NOP4
16811: PPUSH
16812: NOP4
// end ;
16816: PPOPN 1
16818: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16819: NOP4
16823: PPUSH
16824: NOP4
16828: PPUSH
16829: NOP4
// end ;
16833: PPOPN 2
16835: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16836: NOP4
16840: PPUSH
16841: NOP4
// end ;
16845: PPOPN 1
16847: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16848: NOP4
16852: PPUSH
16853: NOP4
16857: PPUSH
16858: NOP4
16862: PPUSH
16863: NOP4
16867: PPUSH
16868: NOP4
16872: PPUSH
16873: NOP4
// end ;
16877: PPOPN 5
16879: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetNation ( vehicle ) = nation_american then
16880: NOP4
16884: PPUSH
16885: NOP4
16889: PUSH
16890: LD_INT 1
16892: EQUAL
16893: IFFALSE 16903
// am_veh_consturcted := true ;
16895: NOP4
16899: PUSH
16900: LD_INT 1
16902: ST_TO_ADDR
// MCE_VehicleConstructed ( vehicle , factory ) ;
16903: NOP4
16907: PPUSH
16908: NOP4
16912: PPUSH
16913: NOP4
// end ;
16917: PPOPN 2
16919: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16920: NOP4
16924: PPUSH
16925: NOP4
16929: PUSH
16930: LD_INT 2
16932: EQUAL
16933: IFFALSE 16937
// exit ;
16935: GO 16954
// if not kamikazed then
16937: NOP4
16941: NOT
16942: IFFALSE 16954
// kamikazed := unit ;
16944: NOP4
16948: PUSH
16949: NOP4
16953: ST_TO_ADDR
// end ;
16954: PPOPN 1
16956: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
16957: LD_INT 0
16959: PPUSH
16960: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
16961: NOP4
16965: PPUSH
16966: NOP4
16970: PPUSH
16971: NOP4
16975: PPUSH
16976: NOP4
16980: PPUSH
16981: NOP4
// end ;
16985: PPOPN 6
16987: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
16988: NOP4
16992: PPUSH
16993: NOP4
16997: PPUSH
16998: NOP4
17002: PPUSH
17003: NOP4
// end ;
17007: PPOPN 3
17009: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
17010: NOP4
17014: PPUSH
17015: NOP4
17019: PPUSH
17020: NOP4
// end ;
17024: PPOPN 2
17026: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
17027: NOP4
17031: PPUSH
17032: NOP4
17036: PPUSH
17037: NOP4
// end ;
17041: PPOPN 2
17043: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
17044: NOP4
17048: PPUSH
17049: NOP4
17053: PPUSH
17054: NOP4
// end ;
17058: PPOPN 2
17060: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
17061: NOP4
17065: PPUSH
17066: NOP4
// end ;
17070: PPOPN 1
17072: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
17073: NOP4
17077: PPUSH
17078: NOP4
17082: PPUSH
17083: NOP4
// end ;
17087: PPOPN 2
17089: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
17090: NOP4
17094: PPUSH
17095: NOP4
17099: PPUSH
17100: NOP4
17104: PPUSH
17105: NOP4
17109: PPUSH
17110: NOP4
// end ;
17114: PPOPN 4
17116: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
17117: NOP4
17121: PPUSH
17122: NOP4
// end ; end_of_file
17126: PPOPN 1
17128: END
// every 0 0$1 trigger game do
17129: NOP4
17133: IFFALSE 17171
17135: GO 17137
17137: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
17138: NOP4
17142: PUSH
17143: NOP4
17147: PUSH
17148: NOP4
17152: PUSH
17153: NOP4
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: PPUSH
17164: LD_INT 1750
17166: PPUSH
17167: NOP4
17171: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
17172: LD_INT 0
17174: PPUSH
17175: PPUSH
17176: PPUSH
// if not areas then
17177: NOP4
17181: NOT
17182: IFFALSE 17186
// exit ;
17184: GO 17316
// repeat wait ( time ) ;
17186: NOP4
17190: PPUSH
17191: NOP4
// p := rand ( 1 , 90 ) ;
17195: NOP4
17199: PUSH
17200: LD_INT 1
17202: PPUSH
17203: LD_INT 90
17205: PPUSH
17206: NOP4
17210: ST_TO_ADDR
// for i in areas do
17211: NOP4
17215: PUSH
17216: NOP4
17220: PUSH
17221: FOR_IN
17222: IFFALSE 17275
// begin if Prob ( p ) then
17224: NOP4
17228: PPUSH
17229: NOP4
17233: IFFALSE 17273
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
17235: LD_INT 1
17237: PPUSH
17238: LD_INT 5
17240: PPUSH
17241: NOP4
17245: PPUSH
17246: NOP4
17250: PPUSH
17251: LD_INT 1
17253: PPUSH
17254: NOP4
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
17258: LD_INT 385
17260: PPUSH
17261: LD_INT 595
17263: PPUSH
17264: NOP4
17268: PPUSH
17269: NOP4
// end ; end ;
17273: GO 17221
17275: POP
17276: POP
// time := time + 0 0$3 ;
17277: NOP4
17281: PUSH
17282: NOP4
17286: PUSH
17287: LD_INT 105
17289: PLUS
17290: ST_TO_ADDR
// if time > 7 7$00 then
17291: NOP4
17295: PUSH
17296: LD_INT 14700
17298: GREATER
17299: IFFALSE 17309
// time := 0 0$40 ;
17301: NOP4
17305: PUSH
17306: LD_INT 1400
17308: ST_TO_ADDR
// until not game ;
17309: NOP4
17313: NOT
17314: IFFALSE 17186
// end ; end_of_file
17316: LD_VAR 0 3
17320: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
17321: LD_INT 0
17323: PPUSH
17324: PPUSH
// skirmish := false ;
17325: NOP4
17329: PUSH
17330: LD_INT 0
17332: ST_TO_ADDR
// debug_mc := false ;
17333: NOP4
17337: PUSH
17338: LD_INT 0
17340: ST_TO_ADDR
// mc_bases := [ ] ;
17341: NOP4
17345: PUSH
17346: EMPTY
17347: ST_TO_ADDR
// mc_sides := [ ] ;
17348: NOP4
17352: PUSH
17353: EMPTY
17354: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
17355: NOP4
17359: PUSH
17360: EMPTY
17361: ST_TO_ADDR
// mc_building_repairs := [ ] ;
17362: NOP4
17366: PUSH
17367: EMPTY
17368: ST_TO_ADDR
// mc_need_heal := [ ] ;
17369: NOP4
17373: PUSH
17374: EMPTY
17375: ST_TO_ADDR
// mc_healers := [ ] ;
17376: NOP4
17380: PUSH
17381: EMPTY
17382: ST_TO_ADDR
// mc_build_list := [ ] ;
17383: NOP4
17387: PUSH
17388: EMPTY
17389: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
17390: NOP4
17394: PUSH
17395: EMPTY
17396: ST_TO_ADDR
// mc_builders := [ ] ;
17397: NOP4
17401: PUSH
17402: EMPTY
17403: ST_TO_ADDR
// mc_construct_list := [ ] ;
17404: NOP4
17408: PUSH
17409: EMPTY
17410: ST_TO_ADDR
// mc_turret_list := [ ] ;
17411: NOP4
17415: PUSH
17416: EMPTY
17417: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
17418: NOP4
17422: PUSH
17423: EMPTY
17424: ST_TO_ADDR
// mc_miners := [ ] ;
17425: NOP4
17429: PUSH
17430: EMPTY
17431: ST_TO_ADDR
// mc_mines := [ ] ;
17432: NOP4
17436: PUSH
17437: EMPTY
17438: ST_TO_ADDR
// mc_minefields := [ ] ;
17439: NOP4
17443: PUSH
17444: EMPTY
17445: ST_TO_ADDR
// mc_crates := [ ] ;
17446: NOP4
17450: PUSH
17451: EMPTY
17452: ST_TO_ADDR
// mc_crates_collector := [ ] ;
17453: NOP4
17457: PUSH
17458: EMPTY
17459: ST_TO_ADDR
// mc_crates_area := [ ] ;
17460: NOP4
17464: PUSH
17465: EMPTY
17466: ST_TO_ADDR
// mc_vehicles := [ ] ;
17467: NOP4
17471: PUSH
17472: EMPTY
17473: ST_TO_ADDR
// mc_attack := [ ] ;
17474: NOP4
17478: PUSH
17479: EMPTY
17480: ST_TO_ADDR
// mc_produce := [ ] ;
17481: NOP4
17485: PUSH
17486: EMPTY
17487: ST_TO_ADDR
// mc_defender := [ ] ;
17488: NOP4
17492: PUSH
17493: EMPTY
17494: ST_TO_ADDR
// mc_parking := [ ] ;
17495: NOP4
17499: PUSH
17500: EMPTY
17501: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
17502: NOP4
17506: PUSH
17507: EMPTY
17508: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
17509: NOP4
17513: PUSH
17514: EMPTY
17515: ST_TO_ADDR
// mc_scan := [ ] ;
17516: NOP4
17520: PUSH
17521: EMPTY
17522: ST_TO_ADDR
// mc_scan_area := [ ] ;
17523: NOP4
17527: PUSH
17528: EMPTY
17529: ST_TO_ADDR
// mc_tech := [ ] ;
17530: NOP4
17534: PUSH
17535: EMPTY
17536: ST_TO_ADDR
// mc_class := [ ] ;
17537: NOP4
17541: PUSH
17542: EMPTY
17543: ST_TO_ADDR
// mc_class_case_use := [ ] ;
17544: NOP4
17548: PUSH
17549: EMPTY
17550: ST_TO_ADDR
// end ;
17551: LD_VAR 0 1
17555: RET
// export function MC_Kill ( base ) ; begin
17556: LD_INT 0
17558: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
17559: NOP4
17563: PUSH
17564: NOP4
17568: PPUSH
17569: NOP4
17573: PPUSH
17574: EMPTY
17575: PPUSH
17576: NOP4
17580: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
17581: NOP4
17585: PUSH
17586: NOP4
17590: PPUSH
17591: NOP4
17595: PPUSH
17596: EMPTY
17597: PPUSH
17598: NOP4
17602: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
17603: NOP4
17607: PUSH
17608: NOP4
17612: PPUSH
17613: NOP4
17617: PPUSH
17618: EMPTY
17619: PPUSH
17620: NOP4
17624: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
17625: NOP4
17629: PUSH
17630: NOP4
17634: PPUSH
17635: NOP4
17639: PPUSH
17640: EMPTY
17641: PPUSH
17642: NOP4
17646: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17647: NOP4
17651: PUSH
17652: NOP4
17656: PPUSH
17657: NOP4
17661: PPUSH
17662: EMPTY
17663: PPUSH
17664: NOP4
17668: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17669: NOP4
17673: PUSH
17674: NOP4
17678: PPUSH
17679: NOP4
17683: PPUSH
17684: EMPTY
17685: PPUSH
17686: NOP4
17690: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
17691: NOP4
17695: PUSH
17696: NOP4
17700: PPUSH
17701: NOP4
17705: PPUSH
17706: EMPTY
17707: PPUSH
17708: NOP4
17712: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
17713: NOP4
17717: PUSH
17718: NOP4
17722: PPUSH
17723: NOP4
17727: PPUSH
17728: EMPTY
17729: PPUSH
17730: NOP4
17734: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17735: NOP4
17739: PUSH
17740: NOP4
17744: PPUSH
17745: NOP4
17749: PPUSH
17750: EMPTY
17751: PPUSH
17752: NOP4
17756: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17757: NOP4
17761: PUSH
17762: NOP4
17766: PPUSH
17767: NOP4
17771: PPUSH
17772: EMPTY
17773: PPUSH
17774: NOP4
17778: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17779: NOP4
17783: PUSH
17784: NOP4
17788: PPUSH
17789: NOP4
17793: PPUSH
17794: EMPTY
17795: PPUSH
17796: NOP4
17800: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17801: NOP4
17805: PUSH
17806: NOP4
17810: PPUSH
17811: NOP4
17815: PPUSH
17816: LD_INT 0
17818: PPUSH
17819: NOP4
17823: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17824: NOP4
17828: PUSH
17829: NOP4
17833: PPUSH
17834: NOP4
17838: PPUSH
17839: EMPTY
17840: PPUSH
17841: NOP4
17845: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17846: NOP4
17850: PUSH
17851: NOP4
17855: PPUSH
17856: NOP4
17860: PPUSH
17861: EMPTY
17862: PPUSH
17863: NOP4
17867: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17868: NOP4
17872: PUSH
17873: NOP4
17877: PPUSH
17878: NOP4
17882: PPUSH
17883: EMPTY
17884: PPUSH
17885: NOP4
17889: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17890: NOP4
17894: PUSH
17895: NOP4
17899: PPUSH
17900: NOP4
17904: PPUSH
17905: EMPTY
17906: PPUSH
17907: NOP4
17911: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17912: NOP4
17916: PUSH
17917: NOP4
17921: PPUSH
17922: NOP4
17926: PPUSH
17927: EMPTY
17928: PPUSH
17929: NOP4
17933: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17934: NOP4
17938: PUSH
17939: NOP4
17943: PPUSH
17944: NOP4
17948: PPUSH
17949: EMPTY
17950: PPUSH
17951: NOP4
17955: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17956: NOP4
17960: PUSH
17961: NOP4
17965: PPUSH
17966: NOP4
17970: PPUSH
17971: EMPTY
17972: PPUSH
17973: NOP4
17977: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17978: NOP4
17982: PUSH
17983: NOP4
17987: PPUSH
17988: NOP4
17992: PPUSH
17993: EMPTY
17994: PPUSH
17995: NOP4
17999: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
18000: NOP4
18004: PUSH
18005: NOP4
18009: PPUSH
18010: NOP4
18014: PPUSH
18015: EMPTY
18016: PPUSH
18017: NOP4
18021: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
18022: NOP4
18026: PUSH
18027: NOP4
18031: PPUSH
18032: NOP4
18036: PPUSH
18037: EMPTY
18038: PPUSH
18039: NOP4
18043: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
18044: NOP4
18048: PUSH
18049: NOP4
18053: PPUSH
18054: NOP4
18058: PPUSH
18059: EMPTY
18060: PPUSH
18061: NOP4
18065: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
18066: NOP4
18070: PUSH
18071: NOP4
18075: PPUSH
18076: NOP4
18080: PPUSH
18081: EMPTY
18082: PPUSH
18083: NOP4
18087: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
18088: NOP4
18092: PUSH
18093: NOP4
18097: PPUSH
18098: NOP4
18102: PPUSH
18103: EMPTY
18104: PPUSH
18105: NOP4
18109: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
18110: NOP4
18114: PUSH
18115: NOP4
18119: PPUSH
18120: NOP4
18124: PPUSH
18125: EMPTY
18126: PPUSH
18127: NOP4
18131: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
18132: NOP4
18136: PUSH
18137: NOP4
18141: PPUSH
18142: NOP4
18146: PPUSH
18147: EMPTY
18148: PPUSH
18149: NOP4
18153: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
18154: NOP4
18158: PUSH
18159: NOP4
18163: PPUSH
18164: NOP4
18168: PPUSH
18169: EMPTY
18170: PPUSH
18171: NOP4
18175: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
18176: NOP4
18180: PUSH
18181: NOP4
18185: PPUSH
18186: NOP4
18190: PPUSH
18191: EMPTY
18192: PPUSH
18193: NOP4
18197: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
18198: NOP4
18202: PUSH
18203: NOP4
18207: PPUSH
18208: NOP4
18212: PPUSH
18213: EMPTY
18214: PPUSH
18215: NOP4
18219: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
18220: NOP4
18224: PUSH
18225: NOP4
18229: PPUSH
18230: NOP4
18234: PPUSH
18235: EMPTY
18236: PPUSH
18237: NOP4
18241: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
18242: NOP4
18246: PUSH
18247: NOP4
18251: PPUSH
18252: NOP4
18256: PPUSH
18257: EMPTY
18258: PPUSH
18259: NOP4
18263: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
18264: NOP4
18268: PUSH
18269: NOP4
18273: PPUSH
18274: NOP4
18278: PPUSH
18279: EMPTY
18280: PPUSH
18281: NOP4
18285: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
18286: NOP4
18290: PUSH
18291: NOP4
18295: PPUSH
18296: NOP4
18300: PPUSH
18301: EMPTY
18302: PPUSH
18303: NOP4
18307: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
18308: NOP4
18312: PUSH
18313: NOP4
18317: PPUSH
18318: NOP4
18322: PPUSH
18323: EMPTY
18324: PPUSH
18325: NOP4
18329: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
18330: NOP4
18334: PUSH
18335: NOP4
18339: PPUSH
18340: NOP4
18344: PPUSH
18345: EMPTY
18346: PPUSH
18347: NOP4
18351: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
18352: NOP4
18356: PUSH
18357: NOP4
18361: PPUSH
18362: NOP4
18366: PPUSH
18367: EMPTY
18368: PPUSH
18369: NOP4
18373: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
18374: NOP4
18378: PUSH
18379: NOP4
18383: PPUSH
18384: NOP4
18388: PPUSH
18389: EMPTY
18390: PPUSH
18391: NOP4
18395: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
18396: NOP4
18400: PUSH
18401: NOP4
18405: PPUSH
18406: NOP4
18410: PPUSH
18411: EMPTY
18412: PPUSH
18413: NOP4
18417: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
18418: NOP4
18422: PUSH
18423: NOP4
18427: PPUSH
18428: NOP4
18432: PPUSH
18433: EMPTY
18434: PPUSH
18435: NOP4
18439: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
18440: NOP4
18444: PUSH
18445: NOP4
18449: PPUSH
18450: NOP4
18454: PPUSH
18455: LD_INT 0
18457: PPUSH
18458: NOP4
18462: ST_TO_ADDR
// end ;
18463: LD_VAR 0 2
18467: RET
// export function MC_Add ( side , units ) ; var base ; begin
18468: LD_INT 0
18470: PPUSH
18471: PPUSH
// base := mc_bases + 1 ;
18472: NOP4
18476: PUSH
18477: NOP4
18481: PUSH
18482: LD_INT 1
18484: PLUS
18485: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
18486: NOP4
18490: PUSH
18491: NOP4
18495: PPUSH
18496: NOP4
18500: PPUSH
18501: NOP4
18505: PPUSH
18506: NOP4
18510: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
18511: NOP4
18515: PUSH
18516: NOP4
18520: PPUSH
18521: NOP4
18525: PPUSH
18526: NOP4
18530: PPUSH
18531: NOP4
18535: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
18536: NOP4
18540: PUSH
18541: NOP4
18545: PPUSH
18546: NOP4
18550: PPUSH
18551: EMPTY
18552: PPUSH
18553: NOP4
18557: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
18558: NOP4
18562: PUSH
18563: NOP4
18567: PPUSH
18568: NOP4
18572: PPUSH
18573: EMPTY
18574: PPUSH
18575: NOP4
18579: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
18580: NOP4
18584: PUSH
18585: NOP4
18589: PPUSH
18590: NOP4
18594: PPUSH
18595: EMPTY
18596: PPUSH
18597: NOP4
18601: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
18602: NOP4
18606: PUSH
18607: NOP4
18611: PPUSH
18612: NOP4
18616: PPUSH
18617: EMPTY
18618: PPUSH
18619: NOP4
18623: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
18624: NOP4
18628: PUSH
18629: NOP4
18633: PPUSH
18634: NOP4
18638: PPUSH
18639: EMPTY
18640: PPUSH
18641: NOP4
18645: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
18646: NOP4
18650: PUSH
18651: NOP4
18655: PPUSH
18656: NOP4
18660: PPUSH
18661: EMPTY
18662: PPUSH
18663: NOP4
18667: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
18668: NOP4
18672: PUSH
18673: NOP4
18677: PPUSH
18678: NOP4
18682: PPUSH
18683: EMPTY
18684: PPUSH
18685: NOP4
18689: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
18690: NOP4
18694: PUSH
18695: NOP4
18699: PPUSH
18700: NOP4
18704: PPUSH
18705: EMPTY
18706: PPUSH
18707: NOP4
18711: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
18712: NOP4
18716: PUSH
18717: NOP4
18721: PPUSH
18722: NOP4
18726: PPUSH
18727: EMPTY
18728: PPUSH
18729: NOP4
18733: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
18734: NOP4
18738: PUSH
18739: NOP4
18743: PPUSH
18744: NOP4
18748: PPUSH
18749: EMPTY
18750: PPUSH
18751: NOP4
18755: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
18756: NOP4
18760: PUSH
18761: NOP4
18765: PPUSH
18766: NOP4
18770: PPUSH
18771: LD_INT 0
18773: PPUSH
18774: NOP4
18778: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
18779: NOP4
18783: PUSH
18784: NOP4
18788: PPUSH
18789: NOP4
18793: PPUSH
18794: EMPTY
18795: PPUSH
18796: NOP4
18800: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
18801: NOP4
18805: PUSH
18806: NOP4
18810: PPUSH
18811: NOP4
18815: PPUSH
18816: EMPTY
18817: PPUSH
18818: NOP4
18822: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
18823: NOP4
18827: PUSH
18828: NOP4
18832: PPUSH
18833: NOP4
18837: PPUSH
18838: EMPTY
18839: PPUSH
18840: NOP4
18844: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
18845: NOP4
18849: PUSH
18850: NOP4
18854: PPUSH
18855: NOP4
18859: PPUSH
18860: EMPTY
18861: PPUSH
18862: NOP4
18866: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
18867: NOP4
18871: PUSH
18872: NOP4
18876: PPUSH
18877: NOP4
18881: PPUSH
18882: EMPTY
18883: PPUSH
18884: NOP4
18888: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
18889: NOP4
18893: PUSH
18894: NOP4
18898: PPUSH
18899: NOP4
18903: PPUSH
18904: EMPTY
18905: PPUSH
18906: NOP4
18910: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
18911: NOP4
18915: PUSH
18916: NOP4
18920: PPUSH
18921: NOP4
18925: PPUSH
18926: EMPTY
18927: PPUSH
18928: NOP4
18932: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
18933: NOP4
18937: PUSH
18938: NOP4
18942: PPUSH
18943: NOP4
18947: PPUSH
18948: EMPTY
18949: PPUSH
18950: NOP4
18954: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
18955: NOP4
18959: PUSH
18960: NOP4
18964: PPUSH
18965: NOP4
18969: PPUSH
18970: EMPTY
18971: PPUSH
18972: NOP4
18976: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
18977: NOP4
18981: PUSH
18982: NOP4
18986: PPUSH
18987: NOP4
18991: PPUSH
18992: EMPTY
18993: PPUSH
18994: NOP4
18998: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
18999: NOP4
19003: PUSH
19004: NOP4
19008: PPUSH
19009: NOP4
19013: PPUSH
19014: EMPTY
19015: PPUSH
19016: NOP4
19020: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
19021: NOP4
19025: PUSH
19026: NOP4
19030: PPUSH
19031: NOP4
19035: PPUSH
19036: EMPTY
19037: PPUSH
19038: NOP4
19042: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
19043: NOP4
19047: PUSH
19048: NOP4
19052: PPUSH
19053: NOP4
19057: PPUSH
19058: EMPTY
19059: PPUSH
19060: NOP4
19064: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
19065: NOP4
19069: PUSH
19070: NOP4
19074: PPUSH
19075: NOP4
19079: PPUSH
19080: EMPTY
19081: PPUSH
19082: NOP4
19086: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
19087: NOP4
19091: PUSH
19092: NOP4
19096: PPUSH
19097: NOP4
19101: PPUSH
19102: EMPTY
19103: PPUSH
19104: NOP4
19108: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
19109: NOP4
19113: PUSH
19114: NOP4
19118: PPUSH
19119: NOP4
19123: PPUSH
19124: EMPTY
19125: PPUSH
19126: NOP4
19130: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
19131: NOP4
19135: PUSH
19136: NOP4
19140: PPUSH
19141: NOP4
19145: PPUSH
19146: EMPTY
19147: PPUSH
19148: NOP4
19152: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
19153: NOP4
19157: PUSH
19158: NOP4
19162: PPUSH
19163: NOP4
19167: PPUSH
19168: EMPTY
19169: PPUSH
19170: NOP4
19174: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
19175: NOP4
19179: PUSH
19180: NOP4
19184: PPUSH
19185: NOP4
19189: PPUSH
19190: EMPTY
19191: PPUSH
19192: NOP4
19196: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
19197: NOP4
19201: PUSH
19202: NOP4
19206: PPUSH
19207: NOP4
19211: PPUSH
19212: EMPTY
19213: PPUSH
19214: NOP4
19218: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
19219: NOP4
19223: PUSH
19224: NOP4
19228: PPUSH
19229: NOP4
19233: PPUSH
19234: EMPTY
19235: PPUSH
19236: NOP4
19240: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
19241: NOP4
19245: PUSH
19246: NOP4
19250: PPUSH
19251: NOP4
19255: PPUSH
19256: EMPTY
19257: PPUSH
19258: NOP4
19262: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
19263: NOP4
19267: PUSH
19268: NOP4
19272: PPUSH
19273: NOP4
19277: PPUSH
19278: EMPTY
19279: PPUSH
19280: NOP4
19284: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
19285: NOP4
19289: PUSH
19290: NOP4
19294: PPUSH
19295: NOP4
19299: PPUSH
19300: EMPTY
19301: PPUSH
19302: NOP4
19306: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
19307: NOP4
19311: PUSH
19312: NOP4
19316: PPUSH
19317: NOP4
19321: PPUSH
19322: EMPTY
19323: PPUSH
19324: NOP4
19328: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
19329: NOP4
19333: PUSH
19334: NOP4
19338: PPUSH
19339: NOP4
19343: PPUSH
19344: EMPTY
19345: PPUSH
19346: NOP4
19350: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
19351: NOP4
19355: PUSH
19356: NOP4
19360: PPUSH
19361: NOP4
19365: PPUSH
19366: EMPTY
19367: PPUSH
19368: NOP4
19372: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
19373: NOP4
19377: PUSH
19378: NOP4
19382: PPUSH
19383: NOP4
19387: PPUSH
19388: EMPTY
19389: PPUSH
19390: NOP4
19394: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
19395: NOP4
19399: PUSH
19400: NOP4
19404: PPUSH
19405: NOP4
19409: PPUSH
19410: LD_INT 0
19412: PPUSH
19413: NOP4
19417: ST_TO_ADDR
// result := base ;
19418: NOP4
19422: PUSH
19423: NOP4
19427: ST_TO_ADDR
// end ;
19428: LD_VAR 0 3
19432: RET
// export function MC_Start ( ) ; var i ; begin
19433: LD_INT 0
19435: PPUSH
19436: PPUSH
// for i = 1 to mc_bases do
19437: NOP4
19441: PUSH
19442: DOUBLE
19443: LD_INT 1
19445: DEC
19446: ST_TO_ADDR
19447: NOP4
19451: PUSH
19452: FOR_TO
19453: IFFALSE 20530
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
19455: NOP4
19459: PUSH
19460: NOP4
19464: PPUSH
19465: NOP4
19469: PPUSH
19470: NOP4
19474: PUSH
19475: NOP4
19479: ARRAY
19480: PUSH
19481: LD_INT 0
19483: DIFF
19484: PPUSH
19485: NOP4
19489: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
19490: NOP4
19494: PUSH
19495: NOP4
19499: PPUSH
19500: NOP4
19504: PPUSH
19505: EMPTY
19506: PPUSH
19507: NOP4
19511: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
19512: NOP4
19516: PUSH
19517: NOP4
19521: PPUSH
19522: NOP4
19526: PPUSH
19527: EMPTY
19528: PPUSH
19529: NOP4
19533: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
19534: NOP4
19538: PUSH
19539: NOP4
19543: PPUSH
19544: NOP4
19548: PPUSH
19549: EMPTY
19550: PPUSH
19551: NOP4
19555: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
19556: NOP4
19560: PUSH
19561: NOP4
19565: PPUSH
19566: NOP4
19570: PPUSH
19571: EMPTY
19572: PUSH
19573: EMPTY
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PPUSH
19579: NOP4
19583: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
19584: NOP4
19588: PUSH
19589: NOP4
19593: PPUSH
19594: NOP4
19598: PPUSH
19599: EMPTY
19600: PPUSH
19601: NOP4
19605: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
19606: NOP4
19610: PUSH
19611: NOP4
19615: PPUSH
19616: NOP4
19620: PPUSH
19621: EMPTY
19622: PPUSH
19623: NOP4
19627: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
19628: NOP4
19632: PUSH
19633: NOP4
19637: PPUSH
19638: NOP4
19642: PPUSH
19643: EMPTY
19644: PPUSH
19645: NOP4
19649: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
19650: NOP4
19654: PUSH
19655: NOP4
19659: PPUSH
19660: NOP4
19664: PPUSH
19665: EMPTY
19666: PPUSH
19667: NOP4
19671: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
19672: NOP4
19676: PUSH
19677: NOP4
19681: PPUSH
19682: NOP4
19686: PPUSH
19687: NOP4
19691: PUSH
19692: NOP4
19696: ARRAY
19697: PPUSH
19698: LD_INT 2
19700: PUSH
19701: LD_INT 30
19703: PUSH
19704: LD_INT 32
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 30
19713: PUSH
19714: LD_INT 33
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: LIST
19725: PPUSH
19726: NOP4
19730: PPUSH
19731: NOP4
19735: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
19736: NOP4
19740: PUSH
19741: NOP4
19745: PPUSH
19746: NOP4
19750: PPUSH
19751: NOP4
19755: PUSH
19756: NOP4
19760: ARRAY
19761: PPUSH
19762: LD_INT 2
19764: PUSH
19765: LD_INT 30
19767: PUSH
19768: LD_INT 32
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 30
19777: PUSH
19778: LD_INT 31
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 58
19792: PUSH
19793: EMPTY
19794: LIST
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PPUSH
19800: NOP4
19804: PPUSH
19805: NOP4
19809: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
19810: NOP4
19814: PUSH
19815: NOP4
19819: PPUSH
19820: NOP4
19824: PPUSH
19825: EMPTY
19826: PPUSH
19827: NOP4
19831: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
19832: NOP4
19836: PUSH
19837: NOP4
19841: PPUSH
19842: NOP4
19846: PPUSH
19847: EMPTY
19848: PPUSH
19849: NOP4
19853: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
19854: NOP4
19858: PUSH
19859: NOP4
19863: PPUSH
19864: NOP4
19868: PPUSH
19869: EMPTY
19870: PPUSH
19871: NOP4
19875: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
19876: NOP4
19880: PUSH
19881: NOP4
19885: PPUSH
19886: NOP4
19890: PPUSH
19891: EMPTY
19892: PPUSH
19893: NOP4
19897: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
19898: NOP4
19902: PUSH
19903: NOP4
19907: PPUSH
19908: NOP4
19912: PPUSH
19913: EMPTY
19914: PPUSH
19915: NOP4
19919: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
19920: NOP4
19924: PUSH
19925: NOP4
19929: PPUSH
19930: NOP4
19934: PPUSH
19935: EMPTY
19936: PPUSH
19937: NOP4
19941: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
19942: NOP4
19946: PUSH
19947: NOP4
19951: PPUSH
19952: NOP4
19956: PPUSH
19957: EMPTY
19958: PPUSH
19959: NOP4
19963: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
19964: NOP4
19968: PUSH
19969: NOP4
19973: PPUSH
19974: NOP4
19978: PPUSH
19979: EMPTY
19980: PPUSH
19981: NOP4
19985: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
19986: NOP4
19990: PUSH
19991: NOP4
19995: PPUSH
19996: NOP4
20000: PPUSH
20001: EMPTY
20002: PPUSH
20003: NOP4
20007: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
20008: NOP4
20012: PUSH
20013: NOP4
20017: PPUSH
20018: NOP4
20022: PPUSH
20023: EMPTY
20024: PPUSH
20025: NOP4
20029: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
20030: NOP4
20034: PUSH
20035: NOP4
20039: PPUSH
20040: NOP4
20044: PPUSH
20045: EMPTY
20046: PPUSH
20047: NOP4
20051: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
20052: NOP4
20056: PUSH
20057: NOP4
20061: PPUSH
20062: NOP4
20066: PPUSH
20067: LD_INT 0
20069: PPUSH
20070: NOP4
20074: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
20075: NOP4
20079: PUSH
20080: NOP4
20084: PPUSH
20085: NOP4
20089: PPUSH
20090: LD_INT 0
20092: PPUSH
20093: NOP4
20097: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
20098: NOP4
20102: PUSH
20103: NOP4
20107: PPUSH
20108: NOP4
20112: PPUSH
20113: EMPTY
20114: PPUSH
20115: NOP4
20119: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
20120: NOP4
20124: PUSH
20125: NOP4
20129: PPUSH
20130: NOP4
20134: PPUSH
20135: LD_INT 0
20137: PPUSH
20138: NOP4
20142: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
20143: NOP4
20147: PUSH
20148: NOP4
20152: PPUSH
20153: NOP4
20157: PPUSH
20158: EMPTY
20159: PPUSH
20160: NOP4
20164: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
20165: NOP4
20169: PUSH
20170: NOP4
20174: PPUSH
20175: NOP4
20179: PPUSH
20180: LD_INT 0
20182: PPUSH
20183: NOP4
20187: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
20188: NOP4
20192: PUSH
20193: NOP4
20197: PPUSH
20198: NOP4
20202: PPUSH
20203: EMPTY
20204: PPUSH
20205: NOP4
20209: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
20210: NOP4
20214: PUSH
20215: NOP4
20219: PPUSH
20220: NOP4
20224: PPUSH
20225: EMPTY
20226: PPUSH
20227: NOP4
20231: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
20232: NOP4
20236: PUSH
20237: NOP4
20241: PPUSH
20242: NOP4
20246: PPUSH
20247: EMPTY
20248: PPUSH
20249: NOP4
20253: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
20254: NOP4
20258: PUSH
20259: NOP4
20263: PPUSH
20264: NOP4
20268: PPUSH
20269: NOP4
20273: PUSH
20274: NOP4
20278: ARRAY
20279: PPUSH
20280: LD_INT 2
20282: PUSH
20283: LD_INT 30
20285: PUSH
20286: LD_INT 6
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 30
20295: PUSH
20296: LD_INT 7
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 30
20305: PUSH
20306: LD_INT 8
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: PPUSH
20319: NOP4
20323: PPUSH
20324: NOP4
20328: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
20329: NOP4
20333: PUSH
20334: NOP4
20338: PPUSH
20339: NOP4
20343: PPUSH
20344: EMPTY
20345: PPUSH
20346: NOP4
20350: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
20351: NOP4
20355: PUSH
20356: NOP4
20360: PPUSH
20361: NOP4
20365: PPUSH
20366: EMPTY
20367: PPUSH
20368: NOP4
20372: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
20373: NOP4
20377: PUSH
20378: NOP4
20382: PPUSH
20383: NOP4
20387: PPUSH
20388: EMPTY
20389: PPUSH
20390: NOP4
20394: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
20395: NOP4
20399: PUSH
20400: NOP4
20404: PPUSH
20405: NOP4
20409: PPUSH
20410: EMPTY
20411: PPUSH
20412: NOP4
20416: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
20417: NOP4
20421: PUSH
20422: NOP4
20426: PPUSH
20427: NOP4
20431: PPUSH
20432: EMPTY
20433: PPUSH
20434: NOP4
20438: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
20439: NOP4
20443: PUSH
20444: NOP4
20448: PPUSH
20449: NOP4
20453: PPUSH
20454: EMPTY
20455: PPUSH
20456: NOP4
20460: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
20461: NOP4
20465: PUSH
20466: NOP4
20470: PPUSH
20471: NOP4
20475: PPUSH
20476: EMPTY
20477: PPUSH
20478: NOP4
20482: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
20483: NOP4
20487: PUSH
20488: NOP4
20492: PPUSH
20493: NOP4
20497: PPUSH
20498: EMPTY
20499: PPUSH
20500: NOP4
20504: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
20505: NOP4
20509: PUSH
20510: NOP4
20514: PPUSH
20515: NOP4
20519: PPUSH
20520: LD_INT 0
20522: PPUSH
20523: NOP4
20527: ST_TO_ADDR
// end ;
20528: GO 19452
20530: POP
20531: POP
// MC_InitSides ( ) ;
20532: NOP4
// MC_InitResearch ( ) ;
20536: NOP4
// CustomInitMacro ( ) ;
20540: NOP4
// skirmish := true ;
20544: NOP4
20548: PUSH
20549: LD_INT 1
20551: ST_TO_ADDR
// end ;
20552: LD_VAR 0 1
20556: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
20557: LD_INT 0
20559: PPUSH
20560: PPUSH
20561: PPUSH
20562: PPUSH
20563: PPUSH
20564: PPUSH
// if not mc_bases then
20565: NOP4
20569: NOT
20570: IFFALSE 20574
// exit ;
20572: GO 20813
// for i = 1 to 8 do
20574: NOP4
20578: PUSH
20579: DOUBLE
20580: LD_INT 1
20582: DEC
20583: ST_TO_ADDR
20584: LD_INT 8
20586: PUSH
20587: FOR_TO
20588: IFFALSE 20614
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
20590: NOP4
20594: PUSH
20595: NOP4
20599: PPUSH
20600: NOP4
20604: PPUSH
20605: EMPTY
20606: PPUSH
20607: NOP4
20611: ST_TO_ADDR
20612: GO 20587
20614: POP
20615: POP
// tmp := [ ] ;
20616: NOP4
20620: PUSH
20621: EMPTY
20622: ST_TO_ADDR
// for i = 1 to mc_sides do
20623: NOP4
20627: PUSH
20628: DOUBLE
20629: LD_INT 1
20631: DEC
20632: ST_TO_ADDR
20633: NOP4
20637: PUSH
20638: FOR_TO
20639: IFFALSE 20697
// if not mc_sides [ i ] in tmp then
20641: NOP4
20645: PUSH
20646: NOP4
20650: ARRAY
20651: PUSH
20652: NOP4
20656: IN
20657: NOT
20658: IFFALSE 20695
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
20660: NOP4
20664: PUSH
20665: NOP4
20669: PPUSH
20670: NOP4
20674: PUSH
20675: LD_INT 1
20677: PLUS
20678: PPUSH
20679: NOP4
20683: PUSH
20684: NOP4
20688: ARRAY
20689: PPUSH
20690: NOP4
20694: ST_TO_ADDR
20695: GO 20638
20697: POP
20698: POP
// if not tmp then
20699: NOP4
20703: NOT
20704: IFFALSE 20708
// exit ;
20706: GO 20813
// for j in tmp do
20708: NOP4
20712: PUSH
20713: NOP4
20717: PUSH
20718: FOR_IN
20719: IFFALSE 20811
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
20721: NOP4
20725: PUSH
20726: LD_INT 22
20728: PUSH
20729: NOP4
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PPUSH
20738: NOP4
20742: ST_TO_ADDR
// if not un then
20743: NOP4
20747: NOT
20748: IFFALSE 20752
// continue ;
20750: GO 20718
// nation := GetNation ( un [ 1 ] ) ;
20752: NOP4
20756: PUSH
20757: NOP4
20761: PUSH
20762: LD_INT 1
20764: ARRAY
20765: PPUSH
20766: NOP4
20770: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
20771: NOP4
20775: PUSH
20776: NOP4
20780: PPUSH
20781: NOP4
20785: PPUSH
20786: NOP4
20790: PPUSH
20791: NOP4
20795: PPUSH
20796: LD_INT 1
20798: PPUSH
20799: NOP4
20803: PPUSH
20804: NOP4
20808: ST_TO_ADDR
// end ;
20809: GO 20718
20811: POP
20812: POP
// end ;
20813: LD_VAR 0 1
20817: RET
// export function MC_InitSides ( ) ; var i ; begin
20818: LD_INT 0
20820: PPUSH
20821: PPUSH
// if not mc_bases then
20822: NOP4
20826: NOT
20827: IFFALSE 20831
// exit ;
20829: GO 20905
// for i = 1 to mc_bases do
20831: NOP4
20835: PUSH
20836: DOUBLE
20837: LD_INT 1
20839: DEC
20840: ST_TO_ADDR
20841: NOP4
20845: PUSH
20846: FOR_TO
20847: IFFALSE 20903
// if mc_bases [ i ] then
20849: NOP4
20853: PUSH
20854: NOP4
20858: ARRAY
20859: IFFALSE 20901
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
20861: NOP4
20865: PUSH
20866: NOP4
20870: PPUSH
20871: NOP4
20875: PPUSH
20876: NOP4
20880: PUSH
20881: NOP4
20885: ARRAY
20886: PUSH
20887: LD_INT 1
20889: ARRAY
20890: PPUSH
20891: NOP4
20895: PPUSH
20896: NOP4
20900: ST_TO_ADDR
20901: GO 20846
20903: POP
20904: POP
// end ;
20905: LD_VAR 0 1
20909: RET
// every 0 0$01 trigger skirmish do
20910: NOP4
20914: IFFALSE 21068
20916: GO 20918
20918: DISABLE
// begin enable ;
20919: ENABLE
// MC_CheckBuildings ( ) ;
20920: NOP4
// MC_CheckPeopleLife ( ) ;
20924: NOP4
// RaiseSailEvent ( 100 ) ;
20928: LD_INT 100
20930: PPUSH
20931: NOP4
// RaiseSailEvent ( 103 ) ;
20935: LD_INT 103
20937: PPUSH
20938: NOP4
// RaiseSailEvent ( 104 ) ;
20942: LD_INT 104
20944: PPUSH
20945: NOP4
// RaiseSailEvent ( 105 ) ;
20949: LD_INT 105
20951: PPUSH
20952: NOP4
// RaiseSailEvent ( 106 ) ;
20956: LD_INT 106
20958: PPUSH
20959: NOP4
// RaiseSailEvent ( 107 ) ;
20963: LD_INT 107
20965: PPUSH
20966: NOP4
// RaiseSailEvent ( 108 ) ;
20970: LD_INT 108
20972: PPUSH
20973: NOP4
// RaiseSailEvent ( 109 ) ;
20977: LD_INT 109
20979: PPUSH
20980: NOP4
// RaiseSailEvent ( 110 ) ;
20984: LD_INT 110
20986: PPUSH
20987: NOP4
// RaiseSailEvent ( 111 ) ;
20991: LD_INT 111
20993: PPUSH
20994: NOP4
// RaiseSailEvent ( 112 ) ;
20998: LD_INT 112
21000: PPUSH
21001: NOP4
// RaiseSailEvent ( 113 ) ;
21005: LD_INT 113
21007: PPUSH
21008: NOP4
// RaiseSailEvent ( 120 ) ;
21012: LD_INT 120
21014: PPUSH
21015: NOP4
// RaiseSailEvent ( 121 ) ;
21019: LD_INT 121
21021: PPUSH
21022: NOP4
// RaiseSailEvent ( 122 ) ;
21026: LD_INT 122
21028: PPUSH
21029: NOP4
// RaiseSailEvent ( 123 ) ;
21033: LD_INT 123
21035: PPUSH
21036: NOP4
// RaiseSailEvent ( 124 ) ;
21040: LD_INT 124
21042: PPUSH
21043: NOP4
// RaiseSailEvent ( 125 ) ;
21047: LD_INT 125
21049: PPUSH
21050: NOP4
// RaiseSailEvent ( 126 ) ;
21054: LD_INT 126
21056: PPUSH
21057: NOP4
// RaiseSailEvent ( 200 ) ;
21061: LD_INT 200
21063: PPUSH
21064: NOP4
// end ;
21068: END
// on SailEvent ( event ) do begin if event < 100 then
21069: NOP4
21073: PUSH
21074: LD_INT 100
21076: LESS
21077: IFFALSE 21088
// CustomEvent ( event ) ;
21079: NOP4
21083: PPUSH
21084: NOP4
// if event = 100 then
21088: NOP4
21092: PUSH
21093: LD_INT 100
21095: EQUAL
21096: IFFALSE 21102
// MC_ClassManager ( ) ;
21098: NOP4
// if event = 101 then
21102: NOP4
21106: PUSH
21107: LD_INT 101
21109: EQUAL
21110: IFFALSE 21116
// MC_RepairBuildings ( ) ;
21112: NOP4
// if event = 102 then
21116: NOP4
21120: PUSH
21121: LD_INT 102
21123: EQUAL
21124: IFFALSE 21130
// MC_Heal ( ) ;
21126: NOP4
// if event = 103 then
21130: NOP4
21134: PUSH
21135: LD_INT 103
21137: EQUAL
21138: IFFALSE 21144
// MC_Build ( ) ;
21140: NOP4
// if event = 104 then
21144: NOP4
21148: PUSH
21149: LD_INT 104
21151: EQUAL
21152: IFFALSE 21158
// MC_TurretWeapon ( ) ;
21154: NOP4
// if event = 105 then
21158: NOP4
21162: PUSH
21163: LD_INT 105
21165: EQUAL
21166: IFFALSE 21172
// MC_BuildUpgrade ( ) ;
21168: NOP4
// if event = 106 then
21172: NOP4
21176: PUSH
21177: LD_INT 106
21179: EQUAL
21180: IFFALSE 21186
// MC_PlantMines ( ) ;
21182: NOP4
// if event = 107 then
21186: NOP4
21190: PUSH
21191: LD_INT 107
21193: EQUAL
21194: IFFALSE 21200
// MC_CollectCrates ( ) ;
21196: NOP4
// if event = 108 then
21200: NOP4
21204: PUSH
21205: LD_INT 108
21207: EQUAL
21208: IFFALSE 21214
// MC_LinkRemoteControl ( ) ;
21210: NOP4
// if event = 109 then
21214: NOP4
21218: PUSH
21219: LD_INT 109
21221: EQUAL
21222: IFFALSE 21228
// MC_ProduceVehicle ( ) ;
21224: NOP4
// if event = 110 then
21228: NOP4
21232: PUSH
21233: LD_INT 110
21235: EQUAL
21236: IFFALSE 21242
// MC_SendAttack ( ) ;
21238: NOP4
// if event = 111 then
21242: NOP4
21246: PUSH
21247: LD_INT 111
21249: EQUAL
21250: IFFALSE 21256
// MC_Defend ( ) ;
21252: NOP4
// if event = 112 then
21256: NOP4
21260: PUSH
21261: LD_INT 112
21263: EQUAL
21264: IFFALSE 21270
// MC_Research ( ) ;
21266: NOP4
// if event = 113 then
21270: NOP4
21274: PUSH
21275: LD_INT 113
21277: EQUAL
21278: IFFALSE 21284
// MC_MinesTrigger ( ) ;
21280: NOP4
// if event = 120 then
21284: NOP4
21288: PUSH
21289: LD_INT 120
21291: EQUAL
21292: IFFALSE 21298
// MC_RepairVehicle ( ) ;
21294: NOP4
// if event = 121 then
21298: NOP4
21302: PUSH
21303: LD_INT 121
21305: EQUAL
21306: IFFALSE 21312
// MC_TameApe ( ) ;
21308: NOP4
// if event = 122 then
21312: NOP4
21316: PUSH
21317: LD_INT 122
21319: EQUAL
21320: IFFALSE 21326
// MC_ChangeApeClass ( ) ;
21322: NOP4
// if event = 123 then
21326: NOP4
21330: PUSH
21331: LD_INT 123
21333: EQUAL
21334: IFFALSE 21340
// MC_Bazooka ( ) ;
21336: NOP4
// if event = 124 then
21340: NOP4
21344: PUSH
21345: LD_INT 124
21347: EQUAL
21348: IFFALSE 21354
// MC_TeleportExit ( ) ;
21350: NOP4
// if event = 125 then
21354: NOP4
21358: PUSH
21359: LD_INT 125
21361: EQUAL
21362: IFFALSE 21368
// MC_Deposits ( ) ;
21364: NOP4
// if event = 126 then
21368: NOP4
21372: PUSH
21373: LD_INT 126
21375: EQUAL
21376: IFFALSE 21382
// MC_RemoteDriver ( ) ;
21378: NOP4
// if event = 200 then
21382: NOP4
21386: PUSH
21387: LD_INT 200
21389: EQUAL
21390: IFFALSE 21396
// MC_Idle ( ) ;
21392: NOP4
// end ;
21396: PPOPN 1
21398: END
// export function MC_Reset ( base , tag ) ; var i ; begin
21399: LD_INT 0
21401: PPUSH
21402: PPUSH
// if not mc_bases [ base ] or not tag then
21403: NOP4
21407: PUSH
21408: NOP4
21412: ARRAY
21413: NOT
21414: PUSH
21415: NOP4
21419: NOT
21420: OR
21421: IFFALSE 21425
// exit ;
21423: GO 21489
// for i in mc_bases [ base ] union mc_ape [ base ] do
21425: NOP4
21429: PUSH
21430: NOP4
21434: PUSH
21435: NOP4
21439: ARRAY
21440: PUSH
21441: NOP4
21445: PUSH
21446: NOP4
21450: ARRAY
21451: UNION
21452: PUSH
21453: FOR_IN
21454: IFFALSE 21487
// if GetTag ( i ) = tag then
21456: NOP4
21460: PPUSH
21461: NOP4
21465: PUSH
21466: NOP4
21470: EQUAL
21471: IFFALSE 21485
// SetTag ( i , 0 ) ;
21473: NOP4
21477: PPUSH
21478: LD_INT 0
21480: PPUSH
21481: NOP4
21485: GO 21453
21487: POP
21488: POP
// end ;
21489: LD_VAR 0 3
21493: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
21494: LD_INT 0
21496: PPUSH
21497: PPUSH
21498: PPUSH
21499: PPUSH
21500: PPUSH
21501: PPUSH
21502: PPUSH
21503: PPUSH
// if not mc_bases then
21504: NOP4
21508: NOT
21509: IFFALSE 21513
// exit ;
21511: GO 21971
// for i = 1 to mc_bases do
21513: NOP4
21517: PUSH
21518: DOUBLE
21519: LD_INT 1
21521: DEC
21522: ST_TO_ADDR
21523: NOP4
21527: PUSH
21528: FOR_TO
21529: IFFALSE 21969
// begin tmp := MC_ClassCheckReq ( i ) ;
21531: NOP4
21535: PUSH
21536: NOP4
21540: PPUSH
21541: NOP4
21545: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
21546: NOP4
21550: PUSH
21551: NOP4
21555: PPUSH
21556: NOP4
21560: PPUSH
21561: NOP4
21565: PPUSH
21566: NOP4
21570: ST_TO_ADDR
// if not tmp then
21571: NOP4
21575: NOT
21576: IFFALSE 21580
// continue ;
21578: GO 21528
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
21580: NOP4
21584: PUSH
21585: NOP4
21589: PUSH
21590: NOP4
21594: ARRAY
21595: PPUSH
21596: LD_INT 2
21598: PUSH
21599: LD_INT 30
21601: PUSH
21602: LD_INT 4
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 30
21611: PUSH
21612: LD_INT 5
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: PPUSH
21624: NOP4
21628: PUSH
21629: NOP4
21633: PUSH
21634: NOP4
21638: ARRAY
21639: PPUSH
21640: LD_INT 2
21642: PUSH
21643: LD_INT 30
21645: PUSH
21646: LD_INT 0
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 30
21655: PUSH
21656: LD_INT 1
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: PPUSH
21668: NOP4
21672: PUSH
21673: NOP4
21677: PUSH
21678: NOP4
21682: ARRAY
21683: PPUSH
21684: LD_INT 30
21686: PUSH
21687: LD_INT 3
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PPUSH
21694: NOP4
21698: PUSH
21699: NOP4
21703: PUSH
21704: NOP4
21708: ARRAY
21709: PPUSH
21710: LD_INT 2
21712: PUSH
21713: LD_INT 30
21715: PUSH
21716: LD_INT 6
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 30
21725: PUSH
21726: LD_INT 7
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 30
21735: PUSH
21736: LD_INT 8
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: PPUSH
21749: NOP4
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: ST_TO_ADDR
// for j = 1 to 4 do
21760: NOP4
21764: PUSH
21765: DOUBLE
21766: LD_INT 1
21768: DEC
21769: ST_TO_ADDR
21770: LD_INT 4
21772: PUSH
21773: FOR_TO
21774: IFFALSE 21965
// begin if not tmp [ j ] then
21776: NOP4
21780: PUSH
21781: NOP4
21785: ARRAY
21786: NOT
21787: IFFALSE 21791
// continue ;
21789: GO 21773
// for p in tmp [ j ] do
21791: NOP4
21795: PUSH
21796: NOP4
21800: PUSH
21801: NOP4
21805: ARRAY
21806: PUSH
21807: FOR_IN
21808: IFFALSE 21961
// begin if not b [ j ] then
21810: NOP4
21814: PUSH
21815: NOP4
21819: ARRAY
21820: NOT
21821: IFFALSE 21825
// break ;
21823: GO 21961
// e := 0 ;
21825: NOP4
21829: PUSH
21830: LD_INT 0
21832: ST_TO_ADDR
// for k in b [ j ] do
21833: NOP4
21837: PUSH
21838: NOP4
21842: PUSH
21843: NOP4
21847: ARRAY
21848: PUSH
21849: FOR_IN
21850: IFFALSE 21877
// if IsNotFull ( k ) then
21852: NOP4
21856: PPUSH
21857: NOP4
21861: IFFALSE 21875
// begin e := k ;
21863: NOP4
21867: PUSH
21868: NOP4
21872: ST_TO_ADDR
// break ;
21873: GO 21877
// end ;
21875: GO 21849
21877: POP
21878: POP
// if e and not UnitGoingToBuilding ( p , e ) then
21879: NOP4
21883: PUSH
21884: NOP4
21888: PPUSH
21889: NOP4
21893: PPUSH
21894: NOP4
21898: NOT
21899: AND
21900: IFFALSE 21959
// begin if IsInUnit ( p ) then
21902: NOP4
21906: PPUSH
21907: NOP4
21911: IFFALSE 21922
// ComExitBuilding ( p ) ;
21913: NOP4
21917: PPUSH
21918: NOP4
// ComEnterUnit ( p , e ) ;
21922: NOP4
21926: PPUSH
21927: NOP4
21931: PPUSH
21932: NOP4
// AddComChangeProfession ( p , j ) ;
21936: NOP4
21940: PPUSH
21941: NOP4
21945: PPUSH
21946: NOP4
// AddComExitBuilding ( p ) ;
21950: NOP4
21954: PPUSH
21955: NOP4
// end ; end ;
21959: GO 21807
21961: POP
21962: POP
// end ;
21963: GO 21773
21965: POP
21966: POP
// end ;
21967: GO 21528
21969: POP
21970: POP
// end ;
21971: LD_VAR 0 1
21975: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
21976: LD_INT 0
21978: PPUSH
21979: PPUSH
21980: PPUSH
21981: PPUSH
21982: PPUSH
21983: PPUSH
21984: PPUSH
21985: PPUSH
21986: PPUSH
21987: PPUSH
21988: PPUSH
21989: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
21990: NOP4
21994: NOT
21995: PUSH
21996: NOP4
22000: PUSH
22001: NOP4
22005: ARRAY
22006: NOT
22007: OR
22008: PUSH
22009: NOP4
22013: PUSH
22014: NOP4
22018: ARRAY
22019: PPUSH
22020: LD_INT 2
22022: PUSH
22023: LD_INT 30
22025: PUSH
22026: LD_INT 0
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 30
22035: PUSH
22036: LD_INT 1
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: LIST
22047: PPUSH
22048: NOP4
22052: NOT
22053: OR
22054: IFFALSE 22058
// exit ;
22056: GO 25561
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22058: NOP4
22062: PUSH
22063: NOP4
22067: PUSH
22068: NOP4
22072: ARRAY
22073: PPUSH
22074: LD_INT 2
22076: PUSH
22077: LD_INT 25
22079: PUSH
22080: LD_INT 1
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 25
22089: PUSH
22090: LD_INT 2
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 25
22099: PUSH
22100: LD_INT 3
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 25
22109: PUSH
22110: LD_INT 4
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 25
22119: PUSH
22120: LD_INT 5
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 25
22129: PUSH
22130: LD_INT 8
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 25
22139: PUSH
22140: LD_INT 9
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: PPUSH
22157: NOP4
22161: ST_TO_ADDR
// if not tmp then
22162: NOP4
22166: NOT
22167: IFFALSE 22171
// exit ;
22169: GO 25561
// for i in tmp do
22171: NOP4
22175: PUSH
22176: NOP4
22180: PUSH
22181: FOR_IN
22182: IFFALSE 22213
// if GetTag ( i ) then
22184: NOP4
22188: PPUSH
22189: NOP4
22193: IFFALSE 22211
// tmp := tmp diff i ;
22195: NOP4
22199: PUSH
22200: NOP4
22204: PUSH
22205: NOP4
22209: DIFF
22210: ST_TO_ADDR
22211: GO 22181
22213: POP
22214: POP
// if not tmp then
22215: NOP4
22219: NOT
22220: IFFALSE 22224
// exit ;
22222: GO 25561
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22224: NOP4
22228: PUSH
22229: NOP4
22233: PUSH
22234: NOP4
22238: ARRAY
22239: PPUSH
22240: LD_INT 2
22242: PUSH
22243: LD_INT 25
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 25
22255: PUSH
22256: LD_INT 5
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 25
22265: PUSH
22266: LD_INT 8
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 25
22275: PUSH
22276: LD_INT 9
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: PPUSH
22290: NOP4
22294: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
22295: NOP4
22299: PUSH
22300: NOP4
22304: PUSH
22305: NOP4
22309: ARRAY
22310: PPUSH
22311: LD_INT 25
22313: PUSH
22314: LD_INT 2
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PPUSH
22321: NOP4
22325: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
22326: NOP4
22330: PUSH
22331: NOP4
22335: PUSH
22336: NOP4
22340: ARRAY
22341: PPUSH
22342: LD_INT 25
22344: PUSH
22345: LD_INT 3
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PPUSH
22352: NOP4
22356: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
22357: NOP4
22361: PUSH
22362: NOP4
22366: PUSH
22367: NOP4
22371: ARRAY
22372: PPUSH
22373: LD_INT 25
22375: PUSH
22376: LD_INT 4
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 24
22385: PUSH
22386: LD_INT 251
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PPUSH
22397: NOP4
22401: ST_TO_ADDR
// if mc_scan [ base ] then
22402: NOP4
22406: PUSH
22407: NOP4
22411: ARRAY
22412: IFFALSE 22873
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
22414: NOP4
22418: PUSH
22419: NOP4
22423: PPUSH
22424: NOP4
22428: PPUSH
22429: LD_INT 4
22431: PPUSH
22432: NOP4
22436: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
22437: NOP4
22441: PUSH
22442: NOP4
22446: PUSH
22447: NOP4
22451: ARRAY
22452: PPUSH
22453: LD_INT 2
22455: PUSH
22456: LD_INT 30
22458: PUSH
22459: LD_INT 4
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 30
22468: PUSH
22469: LD_INT 5
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: LIST
22480: PPUSH
22481: NOP4
22485: ST_TO_ADDR
// if not b then
22486: NOP4
22490: NOT
22491: IFFALSE 22495
// exit ;
22493: GO 25561
// p := [ ] ;
22495: NOP4
22499: PUSH
22500: EMPTY
22501: ST_TO_ADDR
// if sci >= 2 then
22502: NOP4
22506: PUSH
22507: LD_INT 2
22509: GREATEREQUAL
22510: IFFALSE 22541
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
22512: NOP4
22516: PUSH
22517: NOP4
22521: PUSH
22522: LD_INT 1
22524: ARRAY
22525: PUSH
22526: NOP4
22530: PUSH
22531: LD_INT 2
22533: ARRAY
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: ST_TO_ADDR
22539: GO 22602
// if sci = 1 then
22541: NOP4
22545: PUSH
22546: LD_INT 1
22548: EQUAL
22549: IFFALSE 22570
// sci := [ sci [ 1 ] ] else
22551: NOP4
22555: PUSH
22556: NOP4
22560: PUSH
22561: LD_INT 1
22563: ARRAY
22564: PUSH
22565: EMPTY
22566: LIST
22567: ST_TO_ADDR
22568: GO 22602
// if sci = 0 then
22570: NOP4
22574: PUSH
22575: LD_INT 0
22577: EQUAL
22578: IFFALSE 22602
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
22580: NOP4
22584: PUSH
22585: NOP4
22589: PPUSH
22590: LD_INT 4
22592: PPUSH
22593: NOP4
22597: PUSH
22598: LD_INT 1
22600: ARRAY
22601: ST_TO_ADDR
// if eng > 4 then
22602: NOP4
22606: PUSH
22607: LD_INT 4
22609: GREATER
22610: IFFALSE 22656
// for i = eng downto 4 do
22612: NOP4
22616: PUSH
22617: DOUBLE
22618: NOP4
22622: INC
22623: ST_TO_ADDR
22624: LD_INT 4
22626: PUSH
22627: FOR_DOWNTO
22628: IFFALSE 22654
// eng := eng diff eng [ i ] ;
22630: NOP4
22634: PUSH
22635: NOP4
22639: PUSH
22640: NOP4
22644: PUSH
22645: NOP4
22649: ARRAY
22650: DIFF
22651: ST_TO_ADDR
22652: GO 22627
22654: POP
22655: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
22656: NOP4
22660: PUSH
22661: NOP4
22665: PUSH
22666: NOP4
22670: PUSH
22671: NOP4
22675: UNION
22676: PUSH
22677: NOP4
22681: UNION
22682: PUSH
22683: NOP4
22687: UNION
22688: DIFF
22689: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
22690: NOP4
22694: PUSH
22695: NOP4
22699: PUSH
22700: NOP4
22704: ARRAY
22705: PPUSH
22706: LD_INT 2
22708: PUSH
22709: LD_INT 30
22711: PUSH
22712: LD_INT 32
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 30
22721: PUSH
22722: LD_INT 31
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: LIST
22733: PPUSH
22734: NOP4
22738: PUSH
22739: NOP4
22743: PUSH
22744: NOP4
22748: ARRAY
22749: PPUSH
22750: LD_INT 2
22752: PUSH
22753: LD_INT 30
22755: PUSH
22756: LD_INT 4
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 30
22765: PUSH
22766: LD_INT 5
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: LIST
22777: PPUSH
22778: NOP4
22782: PUSH
22783: LD_INT 6
22785: MUL
22786: PLUS
22787: ST_TO_ADDR
// if bcount < tmp then
22788: NOP4
22792: PUSH
22793: NOP4
22797: LESS
22798: IFFALSE 22844
// for i = tmp downto bcount do
22800: NOP4
22804: PUSH
22805: DOUBLE
22806: NOP4
22810: INC
22811: ST_TO_ADDR
22812: NOP4
22816: PUSH
22817: FOR_DOWNTO
22818: IFFALSE 22842
// tmp := Delete ( tmp , tmp ) ;
22820: NOP4
22824: PUSH
22825: NOP4
22829: PPUSH
22830: NOP4
22834: PPUSH
22835: NOP4
22839: ST_TO_ADDR
22840: GO 22817
22842: POP
22843: POP
// result := [ tmp , 0 , 0 , p ] ;
22844: NOP4
22848: PUSH
22849: NOP4
22853: PUSH
22854: LD_INT 0
22856: PUSH
22857: LD_INT 0
22859: PUSH
22860: NOP4
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: ST_TO_ADDR
// exit ;
22871: GO 25561
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22873: NOP4
22877: PUSH
22878: NOP4
22882: ARRAY
22883: PPUSH
22884: LD_INT 2
22886: PUSH
22887: LD_INT 30
22889: PUSH
22890: LD_INT 6
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 30
22899: PUSH
22900: LD_INT 7
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 30
22909: PUSH
22910: LD_INT 8
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: PPUSH
22923: NOP4
22927: NOT
22928: PUSH
22929: NOP4
22933: PUSH
22934: NOP4
22938: ARRAY
22939: PPUSH
22940: LD_INT 30
22942: PUSH
22943: LD_INT 3
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PPUSH
22950: NOP4
22954: NOT
22955: AND
22956: IFFALSE 23028
// begin if eng = tmp then
22958: NOP4
22962: PUSH
22963: NOP4
22967: EQUAL
22968: IFFALSE 22972
// exit ;
22970: GO 25561
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
22972: NOP4
22976: PUSH
22977: NOP4
22981: PPUSH
22982: NOP4
22986: PPUSH
22987: LD_INT 1
22989: PPUSH
22990: NOP4
22994: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
22995: NOP4
22999: PUSH
23000: LD_INT 0
23002: PUSH
23003: NOP4
23007: PUSH
23008: NOP4
23012: DIFF
23013: PUSH
23014: LD_INT 0
23016: PUSH
23017: LD_INT 0
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: ST_TO_ADDR
// exit ;
23026: GO 25561
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
23028: NOP4
23032: PUSH
23033: NOP4
23037: PUSH
23038: NOP4
23042: ARRAY
23043: ARRAY
23044: PUSH
23045: NOP4
23049: PUSH
23050: NOP4
23054: ARRAY
23055: PPUSH
23056: LD_INT 2
23058: PUSH
23059: LD_INT 30
23061: PUSH
23062: LD_INT 6
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 30
23071: PUSH
23072: LD_INT 7
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 30
23081: PUSH
23082: LD_INT 8
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: PPUSH
23095: NOP4
23099: AND
23100: PUSH
23101: NOP4
23105: PUSH
23106: NOP4
23110: ARRAY
23111: PPUSH
23112: LD_INT 30
23114: PUSH
23115: LD_INT 3
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PPUSH
23122: NOP4
23126: NOT
23127: AND
23128: IFFALSE 23342
// begin if sci >= 6 then
23130: NOP4
23134: PUSH
23135: LD_INT 6
23137: GREATEREQUAL
23138: IFFALSE 23142
// exit ;
23140: GO 25561
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
23142: NOP4
23146: PUSH
23147: NOP4
23151: PPUSH
23152: NOP4
23156: PPUSH
23157: LD_INT 2
23159: PPUSH
23160: NOP4
23164: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
23165: NOP4
23169: PUSH
23170: NOP4
23174: PUSH
23175: NOP4
23179: DIFF
23180: PPUSH
23181: LD_INT 4
23183: PPUSH
23184: NOP4
23188: ST_TO_ADDR
// p := [ ] ;
23189: NOP4
23193: PUSH
23194: EMPTY
23195: ST_TO_ADDR
// if sci < 6 and sort > 6 then
23196: NOP4
23200: PUSH
23201: LD_INT 6
23203: LESS
23204: PUSH
23205: NOP4
23209: PUSH
23210: LD_INT 6
23212: GREATER
23213: AND
23214: IFFALSE 23295
// begin for i = 1 to 6 - sci do
23216: NOP4
23220: PUSH
23221: DOUBLE
23222: LD_INT 1
23224: DEC
23225: ST_TO_ADDR
23226: LD_INT 6
23228: PUSH
23229: NOP4
23233: MINUS
23234: PUSH
23235: FOR_TO
23236: IFFALSE 23291
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
23238: NOP4
23242: PUSH
23243: NOP4
23247: PPUSH
23248: NOP4
23252: PUSH
23253: LD_INT 1
23255: PLUS
23256: PPUSH
23257: NOP4
23261: PUSH
23262: LD_INT 1
23264: ARRAY
23265: PPUSH
23266: NOP4
23270: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
23271: NOP4
23275: PUSH
23276: NOP4
23280: PPUSH
23281: LD_INT 1
23283: PPUSH
23284: NOP4
23288: ST_TO_ADDR
// end ;
23289: GO 23235
23291: POP
23292: POP
// end else
23293: GO 23315
// if sort then
23295: NOP4
23299: IFFALSE 23315
// p := sort [ 1 ] ;
23301: NOP4
23305: PUSH
23306: NOP4
23310: PUSH
23311: LD_INT 1
23313: ARRAY
23314: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
23315: NOP4
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: LD_INT 0
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: NOP4
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: ST_TO_ADDR
// exit ;
23340: GO 25561
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
23342: NOP4
23346: PUSH
23347: NOP4
23351: PUSH
23352: NOP4
23356: ARRAY
23357: ARRAY
23358: PUSH
23359: NOP4
23363: PUSH
23364: NOP4
23368: ARRAY
23369: PPUSH
23370: LD_INT 2
23372: PUSH
23373: LD_INT 30
23375: PUSH
23376: LD_INT 6
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 30
23385: PUSH
23386: LD_INT 7
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 30
23395: PUSH
23396: LD_INT 8
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: PPUSH
23409: NOP4
23413: AND
23414: PUSH
23415: NOP4
23419: PUSH
23420: NOP4
23424: ARRAY
23425: PPUSH
23426: LD_INT 30
23428: PUSH
23429: LD_INT 3
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PPUSH
23436: NOP4
23440: AND
23441: IFFALSE 24175
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
23443: NOP4
23447: PUSH
23448: NOP4
23452: PPUSH
23453: NOP4
23457: PPUSH
23458: LD_INT 3
23460: PPUSH
23461: NOP4
23465: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23466: NOP4
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: LD_INT 0
23476: PUSH
23477: LD_INT 0
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: ST_TO_ADDR
// if not eng then
23489: NOP4
23493: NOT
23494: IFFALSE 23557
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
23496: NOP4
23500: PUSH
23501: NOP4
23505: PPUSH
23506: LD_INT 2
23508: PPUSH
23509: NOP4
23513: PUSH
23514: LD_INT 1
23516: ARRAY
23517: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
23518: NOP4
23522: PUSH
23523: NOP4
23527: PPUSH
23528: LD_INT 2
23530: PPUSH
23531: NOP4
23535: PPUSH
23536: NOP4
23540: ST_TO_ADDR
// tmp := tmp diff p ;
23541: NOP4
23545: PUSH
23546: NOP4
23550: PUSH
23551: NOP4
23555: DIFF
23556: ST_TO_ADDR
// end ; if tmp and sci < 6 then
23557: NOP4
23561: PUSH
23562: NOP4
23566: PUSH
23567: LD_INT 6
23569: LESS
23570: AND
23571: IFFALSE 23759
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
23573: NOP4
23577: PUSH
23578: NOP4
23582: PUSH
23583: NOP4
23587: PUSH
23588: NOP4
23592: UNION
23593: DIFF
23594: PPUSH
23595: LD_INT 4
23597: PPUSH
23598: NOP4
23602: ST_TO_ADDR
// p := [ ] ;
23603: NOP4
23607: PUSH
23608: EMPTY
23609: ST_TO_ADDR
// if sort then
23610: NOP4
23614: IFFALSE 23730
// for i = 1 to 6 - sci do
23616: NOP4
23620: PUSH
23621: DOUBLE
23622: LD_INT 1
23624: DEC
23625: ST_TO_ADDR
23626: LD_INT 6
23628: PUSH
23629: NOP4
23633: MINUS
23634: PUSH
23635: FOR_TO
23636: IFFALSE 23728
// begin if i = sort then
23638: NOP4
23642: PUSH
23643: NOP4
23647: EQUAL
23648: IFFALSE 23652
// break ;
23650: GO 23728
// if GetClass ( i ) = 4 then
23652: NOP4
23656: PPUSH
23657: NOP4
23661: PUSH
23662: LD_INT 4
23664: EQUAL
23665: IFFALSE 23669
// continue ;
23667: GO 23635
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23669: NOP4
23673: PUSH
23674: NOP4
23678: PPUSH
23679: NOP4
23683: PUSH
23684: LD_INT 1
23686: PLUS
23687: PPUSH
23688: NOP4
23692: PUSH
23693: NOP4
23697: ARRAY
23698: PPUSH
23699: NOP4
23703: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23704: NOP4
23708: PUSH
23709: NOP4
23713: PUSH
23714: NOP4
23718: PUSH
23719: NOP4
23723: ARRAY
23724: DIFF
23725: ST_TO_ADDR
// end ;
23726: GO 23635
23728: POP
23729: POP
// if p then
23730: NOP4
23734: IFFALSE 23759
// result := Replace ( result , 4 , p ) ;
23736: NOP4
23740: PUSH
23741: NOP4
23745: PPUSH
23746: LD_INT 4
23748: PPUSH
23749: NOP4
23753: PPUSH
23754: NOP4
23758: ST_TO_ADDR
// end ; if tmp and mech < 6 then
23759: NOP4
23763: PUSH
23764: NOP4
23768: PUSH
23769: LD_INT 6
23771: LESS
23772: AND
23773: IFFALSE 23961
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23775: NOP4
23779: PUSH
23780: NOP4
23784: PUSH
23785: NOP4
23789: PUSH
23790: NOP4
23794: UNION
23795: DIFF
23796: PPUSH
23797: LD_INT 3
23799: PPUSH
23800: NOP4
23804: ST_TO_ADDR
// p := [ ] ;
23805: NOP4
23809: PUSH
23810: EMPTY
23811: ST_TO_ADDR
// if sort then
23812: NOP4
23816: IFFALSE 23932
// for i = 1 to 6 - mech do
23818: NOP4
23822: PUSH
23823: DOUBLE
23824: LD_INT 1
23826: DEC
23827: ST_TO_ADDR
23828: LD_INT 6
23830: PUSH
23831: NOP4
23835: MINUS
23836: PUSH
23837: FOR_TO
23838: IFFALSE 23930
// begin if i = sort then
23840: NOP4
23844: PUSH
23845: NOP4
23849: EQUAL
23850: IFFALSE 23854
// break ;
23852: GO 23930
// if GetClass ( i ) = 3 then
23854: NOP4
23858: PPUSH
23859: NOP4
23863: PUSH
23864: LD_INT 3
23866: EQUAL
23867: IFFALSE 23871
// continue ;
23869: GO 23837
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23871: NOP4
23875: PUSH
23876: NOP4
23880: PPUSH
23881: NOP4
23885: PUSH
23886: LD_INT 1
23888: PLUS
23889: PPUSH
23890: NOP4
23894: PUSH
23895: NOP4
23899: ARRAY
23900: PPUSH
23901: NOP4
23905: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23906: NOP4
23910: PUSH
23911: NOP4
23915: PUSH
23916: NOP4
23920: PUSH
23921: NOP4
23925: ARRAY
23926: DIFF
23927: ST_TO_ADDR
// end ;
23928: GO 23837
23930: POP
23931: POP
// if p then
23932: NOP4
23936: IFFALSE 23961
// result := Replace ( result , 3 , p ) ;
23938: NOP4
23942: PUSH
23943: NOP4
23947: PPUSH
23948: LD_INT 3
23950: PPUSH
23951: NOP4
23955: PPUSH
23956: NOP4
23960: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
23961: NOP4
23965: PUSH
23966: LD_INT 6
23968: GREATER
23969: PUSH
23970: NOP4
23974: PUSH
23975: LD_INT 6
23977: LESS
23978: AND
23979: IFFALSE 24173
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
23981: NOP4
23985: PUSH
23986: NOP4
23990: PUSH
23991: NOP4
23995: PUSH
23996: NOP4
24000: UNION
24001: PUSH
24002: NOP4
24006: UNION
24007: DIFF
24008: PPUSH
24009: LD_INT 2
24011: PPUSH
24012: NOP4
24016: ST_TO_ADDR
// p := [ ] ;
24017: NOP4
24021: PUSH
24022: EMPTY
24023: ST_TO_ADDR
// if sort then
24024: NOP4
24028: IFFALSE 24144
// for i = 1 to 6 - eng do
24030: NOP4
24034: PUSH
24035: DOUBLE
24036: LD_INT 1
24038: DEC
24039: ST_TO_ADDR
24040: LD_INT 6
24042: PUSH
24043: NOP4
24047: MINUS
24048: PUSH
24049: FOR_TO
24050: IFFALSE 24142
// begin if i = sort then
24052: NOP4
24056: PUSH
24057: NOP4
24061: EQUAL
24062: IFFALSE 24066
// break ;
24064: GO 24142
// if GetClass ( i ) = 2 then
24066: NOP4
24070: PPUSH
24071: NOP4
24075: PUSH
24076: LD_INT 2
24078: EQUAL
24079: IFFALSE 24083
// continue ;
24081: GO 24049
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24083: NOP4
24087: PUSH
24088: NOP4
24092: PPUSH
24093: NOP4
24097: PUSH
24098: LD_INT 1
24100: PLUS
24101: PPUSH
24102: NOP4
24106: PUSH
24107: NOP4
24111: ARRAY
24112: PPUSH
24113: NOP4
24117: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24118: NOP4
24122: PUSH
24123: NOP4
24127: PUSH
24128: NOP4
24132: PUSH
24133: NOP4
24137: ARRAY
24138: DIFF
24139: ST_TO_ADDR
// end ;
24140: GO 24049
24142: POP
24143: POP
// if p then
24144: NOP4
24148: IFFALSE 24173
// result := Replace ( result , 2 , p ) ;
24150: NOP4
24154: PUSH
24155: NOP4
24159: PPUSH
24160: LD_INT 2
24162: PPUSH
24163: NOP4
24167: PPUSH
24168: NOP4
24172: ST_TO_ADDR
// end ; exit ;
24173: GO 25561
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
24175: NOP4
24179: PUSH
24180: NOP4
24184: PUSH
24185: NOP4
24189: ARRAY
24190: ARRAY
24191: NOT
24192: PUSH
24193: NOP4
24197: PUSH
24198: NOP4
24202: ARRAY
24203: PPUSH
24204: LD_INT 30
24206: PUSH
24207: LD_INT 3
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PPUSH
24214: NOP4
24218: AND
24219: PUSH
24220: NOP4
24224: PUSH
24225: NOP4
24229: ARRAY
24230: AND
24231: IFFALSE 24839
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
24233: NOP4
24237: PUSH
24238: NOP4
24242: PPUSH
24243: NOP4
24247: PPUSH
24248: LD_INT 5
24250: PPUSH
24251: NOP4
24255: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24256: NOP4
24260: PUSH
24261: LD_INT 0
24263: PUSH
24264: LD_INT 0
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: LD_INT 0
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: ST_TO_ADDR
// if sci > 1 then
24279: NOP4
24283: PUSH
24284: LD_INT 1
24286: GREATER
24287: IFFALSE 24315
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
24289: NOP4
24293: PUSH
24294: NOP4
24298: PUSH
24299: NOP4
24303: PUSH
24304: NOP4
24308: PUSH
24309: LD_INT 1
24311: ARRAY
24312: DIFF
24313: DIFF
24314: ST_TO_ADDR
// if tmp and not sci then
24315: NOP4
24319: PUSH
24320: NOP4
24324: NOT
24325: AND
24326: IFFALSE 24395
// begin sort := SortBySkill ( tmp , 4 ) ;
24328: NOP4
24332: PUSH
24333: NOP4
24337: PPUSH
24338: LD_INT 4
24340: PPUSH
24341: NOP4
24345: ST_TO_ADDR
// if sort then
24346: NOP4
24350: IFFALSE 24366
// p := sort [ 1 ] ;
24352: NOP4
24356: PUSH
24357: NOP4
24361: PUSH
24362: LD_INT 1
24364: ARRAY
24365: ST_TO_ADDR
// if p then
24366: NOP4
24370: IFFALSE 24395
// result := Replace ( result , 4 , p ) ;
24372: NOP4
24376: PUSH
24377: NOP4
24381: PPUSH
24382: LD_INT 4
24384: PPUSH
24385: NOP4
24389: PPUSH
24390: NOP4
24394: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
24395: NOP4
24399: PUSH
24400: NOP4
24404: PUSH
24405: NOP4
24409: DIFF
24410: ST_TO_ADDR
// if tmp and mech < 6 then
24411: NOP4
24415: PUSH
24416: NOP4
24420: PUSH
24421: LD_INT 6
24423: LESS
24424: AND
24425: IFFALSE 24613
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
24427: NOP4
24431: PUSH
24432: NOP4
24436: PUSH
24437: NOP4
24441: PUSH
24442: NOP4
24446: UNION
24447: DIFF
24448: PPUSH
24449: LD_INT 3
24451: PPUSH
24452: NOP4
24456: ST_TO_ADDR
// p := [ ] ;
24457: NOP4
24461: PUSH
24462: EMPTY
24463: ST_TO_ADDR
// if sort then
24464: NOP4
24468: IFFALSE 24584
// for i = 1 to 6 - mech do
24470: NOP4
24474: PUSH
24475: DOUBLE
24476: LD_INT 1
24478: DEC
24479: ST_TO_ADDR
24480: LD_INT 6
24482: PUSH
24483: NOP4
24487: MINUS
24488: PUSH
24489: FOR_TO
24490: IFFALSE 24582
// begin if i = sort then
24492: NOP4
24496: PUSH
24497: NOP4
24501: EQUAL
24502: IFFALSE 24506
// break ;
24504: GO 24582
// if GetClass ( i ) = 3 then
24506: NOP4
24510: PPUSH
24511: NOP4
24515: PUSH
24516: LD_INT 3
24518: EQUAL
24519: IFFALSE 24523
// continue ;
24521: GO 24489
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24523: NOP4
24527: PUSH
24528: NOP4
24532: PPUSH
24533: NOP4
24537: PUSH
24538: LD_INT 1
24540: PLUS
24541: PPUSH
24542: NOP4
24546: PUSH
24547: NOP4
24551: ARRAY
24552: PPUSH
24553: NOP4
24557: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24558: NOP4
24562: PUSH
24563: NOP4
24567: PUSH
24568: NOP4
24572: PUSH
24573: NOP4
24577: ARRAY
24578: DIFF
24579: ST_TO_ADDR
// end ;
24580: GO 24489
24582: POP
24583: POP
// if p then
24584: NOP4
24588: IFFALSE 24613
// result := Replace ( result , 3 , p ) ;
24590: NOP4
24594: PUSH
24595: NOP4
24599: PPUSH
24600: LD_INT 3
24602: PPUSH
24603: NOP4
24607: PPUSH
24608: NOP4
24612: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
24613: NOP4
24617: PUSH
24618: NOP4
24622: PUSH
24623: NOP4
24627: DIFF
24628: ST_TO_ADDR
// if tmp and eng < 6 then
24629: NOP4
24633: PUSH
24634: NOP4
24638: PUSH
24639: LD_INT 6
24641: LESS
24642: AND
24643: IFFALSE 24837
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
24645: NOP4
24649: PUSH
24650: NOP4
24654: PUSH
24655: NOP4
24659: PUSH
24660: NOP4
24664: UNION
24665: PUSH
24666: NOP4
24670: UNION
24671: DIFF
24672: PPUSH
24673: LD_INT 2
24675: PPUSH
24676: NOP4
24680: ST_TO_ADDR
// p := [ ] ;
24681: NOP4
24685: PUSH
24686: EMPTY
24687: ST_TO_ADDR
// if sort then
24688: NOP4
24692: IFFALSE 24808
// for i = 1 to 6 - eng do
24694: NOP4
24698: PUSH
24699: DOUBLE
24700: LD_INT 1
24702: DEC
24703: ST_TO_ADDR
24704: LD_INT 6
24706: PUSH
24707: NOP4
24711: MINUS
24712: PUSH
24713: FOR_TO
24714: IFFALSE 24806
// begin if i = sort then
24716: NOP4
24720: PUSH
24721: NOP4
24725: EQUAL
24726: IFFALSE 24730
// break ;
24728: GO 24806
// if GetClass ( i ) = 2 then
24730: NOP4
24734: PPUSH
24735: NOP4
24739: PUSH
24740: LD_INT 2
24742: EQUAL
24743: IFFALSE 24747
// continue ;
24745: GO 24713
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24747: NOP4
24751: PUSH
24752: NOP4
24756: PPUSH
24757: NOP4
24761: PUSH
24762: LD_INT 1
24764: PLUS
24765: PPUSH
24766: NOP4
24770: PUSH
24771: NOP4
24775: ARRAY
24776: PPUSH
24777: NOP4
24781: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24782: NOP4
24786: PUSH
24787: NOP4
24791: PUSH
24792: NOP4
24796: PUSH
24797: NOP4
24801: ARRAY
24802: DIFF
24803: ST_TO_ADDR
// end ;
24804: GO 24713
24806: POP
24807: POP
// if p then
24808: NOP4
24812: IFFALSE 24837
// result := Replace ( result , 2 , p ) ;
24814: NOP4
24818: PUSH
24819: NOP4
24823: PPUSH
24824: LD_INT 2
24826: PPUSH
24827: NOP4
24831: PPUSH
24832: NOP4
24836: ST_TO_ADDR
// end ; exit ;
24837: GO 25561
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
24839: NOP4
24843: PUSH
24844: NOP4
24848: PUSH
24849: NOP4
24853: ARRAY
24854: ARRAY
24855: NOT
24856: PUSH
24857: NOP4
24861: PUSH
24862: NOP4
24866: ARRAY
24867: PPUSH
24868: LD_INT 30
24870: PUSH
24871: LD_INT 3
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PPUSH
24878: NOP4
24882: AND
24883: PUSH
24884: NOP4
24888: PUSH
24889: NOP4
24893: ARRAY
24894: NOT
24895: AND
24896: IFFALSE 25561
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
24898: NOP4
24902: PUSH
24903: NOP4
24907: PPUSH
24908: NOP4
24912: PPUSH
24913: LD_INT 6
24915: PPUSH
24916: NOP4
24920: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24921: NOP4
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: LD_INT 0
24934: PUSH
24935: LD_INT 0
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: ST_TO_ADDR
// if sci >= 1 then
24944: NOP4
24948: PUSH
24949: LD_INT 1
24951: GREATEREQUAL
24952: IFFALSE 24974
// tmp := tmp diff sci [ 1 ] ;
24954: NOP4
24958: PUSH
24959: NOP4
24963: PUSH
24964: NOP4
24968: PUSH
24969: LD_INT 1
24971: ARRAY
24972: DIFF
24973: ST_TO_ADDR
// if tmp and not sci then
24974: NOP4
24978: PUSH
24979: NOP4
24983: NOT
24984: AND
24985: IFFALSE 25054
// begin sort := SortBySkill ( tmp , 4 ) ;
24987: NOP4
24991: PUSH
24992: NOP4
24996: PPUSH
24997: LD_INT 4
24999: PPUSH
25000: NOP4
25004: ST_TO_ADDR
// if sort then
25005: NOP4
25009: IFFALSE 25025
// p := sort [ 1 ] ;
25011: NOP4
25015: PUSH
25016: NOP4
25020: PUSH
25021: LD_INT 1
25023: ARRAY
25024: ST_TO_ADDR
// if p then
25025: NOP4
25029: IFFALSE 25054
// result := Replace ( result , 4 , p ) ;
25031: NOP4
25035: PUSH
25036: NOP4
25040: PPUSH
25041: LD_INT 4
25043: PPUSH
25044: NOP4
25048: PPUSH
25049: NOP4
25053: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
25054: NOP4
25058: PUSH
25059: NOP4
25063: PUSH
25064: NOP4
25068: DIFF
25069: ST_TO_ADDR
// if tmp and mech < 6 then
25070: NOP4
25074: PUSH
25075: NOP4
25079: PUSH
25080: LD_INT 6
25082: LESS
25083: AND
25084: IFFALSE 25266
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
25086: NOP4
25090: PUSH
25091: NOP4
25095: PUSH
25096: NOP4
25100: DIFF
25101: PPUSH
25102: LD_INT 3
25104: PPUSH
25105: NOP4
25109: ST_TO_ADDR
// p := [ ] ;
25110: NOP4
25114: PUSH
25115: EMPTY
25116: ST_TO_ADDR
// if sort then
25117: NOP4
25121: IFFALSE 25237
// for i = 1 to 6 - mech do
25123: NOP4
25127: PUSH
25128: DOUBLE
25129: LD_INT 1
25131: DEC
25132: ST_TO_ADDR
25133: LD_INT 6
25135: PUSH
25136: NOP4
25140: MINUS
25141: PUSH
25142: FOR_TO
25143: IFFALSE 25235
// begin if i = sort then
25145: NOP4
25149: PUSH
25150: NOP4
25154: EQUAL
25155: IFFALSE 25159
// break ;
25157: GO 25235
// if GetClass ( i ) = 3 then
25159: NOP4
25163: PPUSH
25164: NOP4
25168: PUSH
25169: LD_INT 3
25171: EQUAL
25172: IFFALSE 25176
// continue ;
25174: GO 25142
// p := Insert ( p , p + 1 , sort [ i ] ) ;
25176: NOP4
25180: PUSH
25181: NOP4
25185: PPUSH
25186: NOP4
25190: PUSH
25191: LD_INT 1
25193: PLUS
25194: PPUSH
25195: NOP4
25199: PUSH
25200: NOP4
25204: ARRAY
25205: PPUSH
25206: NOP4
25210: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
25211: NOP4
25215: PUSH
25216: NOP4
25220: PUSH
25221: NOP4
25225: PUSH
25226: NOP4
25230: ARRAY
25231: DIFF
25232: ST_TO_ADDR
// end ;
25233: GO 25142
25235: POP
25236: POP
// if p then
25237: NOP4
25241: IFFALSE 25266
// result := Replace ( result , 3 , p ) ;
25243: NOP4
25247: PUSH
25248: NOP4
25252: PPUSH
25253: LD_INT 3
25255: PPUSH
25256: NOP4
25260: PPUSH
25261: NOP4
25265: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
25266: NOP4
25270: PUSH
25271: NOP4
25275: PUSH
25276: NOP4
25280: DIFF
25281: ST_TO_ADDR
// if tmp and eng < 4 then
25282: NOP4
25286: PUSH
25287: NOP4
25291: PUSH
25292: LD_INT 4
25294: LESS
25295: AND
25296: IFFALSE 25486
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
25298: NOP4
25302: PUSH
25303: NOP4
25307: PUSH
25308: NOP4
25312: PUSH
25313: NOP4
25317: UNION
25318: DIFF
25319: PPUSH
25320: LD_INT 2
25322: PPUSH
25323: NOP4
25327: ST_TO_ADDR
// p := [ ] ;
25328: NOP4
25332: PUSH
25333: EMPTY
25334: ST_TO_ADDR
// if sort then
25335: NOP4
25339: IFFALSE 25455
// for i = 1 to 4 - eng do
25341: NOP4
25345: PUSH
25346: DOUBLE
25347: LD_INT 1
25349: DEC
25350: ST_TO_ADDR
25351: LD_INT 4
25353: PUSH
25354: NOP4
25358: MINUS
25359: PUSH
25360: FOR_TO
25361: IFFALSE 25453
// begin if i = sort then
25363: NOP4
25367: PUSH
25368: NOP4
25372: EQUAL
25373: IFFALSE 25377
// break ;
25375: GO 25453
// if GetClass ( i ) = 2 then
25377: NOP4
25381: PPUSH
25382: NOP4
25386: PUSH
25387: LD_INT 2
25389: EQUAL
25390: IFFALSE 25394
// continue ;
25392: GO 25360
// p := Insert ( p , p + 1 , sort [ i ] ) ;
25394: NOP4
25398: PUSH
25399: NOP4
25403: PPUSH
25404: NOP4
25408: PUSH
25409: LD_INT 1
25411: PLUS
25412: PPUSH
25413: NOP4
25417: PUSH
25418: NOP4
25422: ARRAY
25423: PPUSH
25424: NOP4
25428: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
25429: NOP4
25433: PUSH
25434: NOP4
25438: PUSH
25439: NOP4
25443: PUSH
25444: NOP4
25448: ARRAY
25449: DIFF
25450: ST_TO_ADDR
// end ;
25451: GO 25360
25453: POP
25454: POP
// if p then
25455: NOP4
25459: IFFALSE 25484
// result := Replace ( result , 2 , p ) ;
25461: NOP4
25465: PUSH
25466: NOP4
25470: PPUSH
25471: LD_INT 2
25473: PPUSH
25474: NOP4
25478: PPUSH
25479: NOP4
25483: ST_TO_ADDR
// end else
25484: GO 25530
// for i = eng downto 5 do
25486: NOP4
25490: PUSH
25491: DOUBLE
25492: NOP4
25496: INC
25497: ST_TO_ADDR
25498: LD_INT 5
25500: PUSH
25501: FOR_DOWNTO
25502: IFFALSE 25528
// tmp := tmp union eng [ i ] ;
25504: NOP4
25508: PUSH
25509: NOP4
25513: PUSH
25514: NOP4
25518: PUSH
25519: NOP4
25523: ARRAY
25524: UNION
25525: ST_TO_ADDR
25526: GO 25501
25528: POP
25529: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
25530: NOP4
25534: PUSH
25535: NOP4
25539: PPUSH
25540: LD_INT 1
25542: PPUSH
25543: NOP4
25547: PUSH
25548: NOP4
25552: DIFF
25553: PPUSH
25554: NOP4
25558: ST_TO_ADDR
// exit ;
25559: GO 25561
// end ; end ;
25561: LD_VAR 0 2
25565: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
25566: LD_INT 0
25568: PPUSH
25569: PPUSH
25570: PPUSH
// if not mc_bases then
25571: NOP4
25575: NOT
25576: IFFALSE 25580
// exit ;
25578: GO 25686
// for i = 1 to mc_bases do
25580: NOP4
25584: PUSH
25585: DOUBLE
25586: LD_INT 1
25588: DEC
25589: ST_TO_ADDR
25590: NOP4
25594: PUSH
25595: FOR_TO
25596: IFFALSE 25677
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25598: NOP4
25602: PUSH
25603: NOP4
25607: PUSH
25608: NOP4
25612: ARRAY
25613: PPUSH
25614: LD_INT 21
25616: PUSH
25617: LD_INT 3
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 3
25626: PUSH
25627: LD_INT 24
25629: PUSH
25630: LD_INT 1000
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PPUSH
25645: NOP4
25649: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
25650: NOP4
25654: PUSH
25655: NOP4
25659: PPUSH
25660: NOP4
25664: PPUSH
25665: NOP4
25669: PPUSH
25670: NOP4
25674: ST_TO_ADDR
// end ;
25675: GO 25595
25677: POP
25678: POP
// RaiseSailEvent ( 101 ) ;
25679: LD_INT 101
25681: PPUSH
25682: NOP4
// end ;
25686: LD_VAR 0 1
25690: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
25691: LD_INT 0
25693: PPUSH
25694: PPUSH
25695: PPUSH
25696: PPUSH
25697: PPUSH
25698: PPUSH
25699: PPUSH
// if not mc_bases then
25700: NOP4
25704: NOT
25705: IFFALSE 25709
// exit ;
25707: GO 26282
// for i = 1 to mc_bases do
25709: NOP4
25713: PUSH
25714: DOUBLE
25715: LD_INT 1
25717: DEC
25718: ST_TO_ADDR
25719: NOP4
25723: PUSH
25724: FOR_TO
25725: IFFALSE 26273
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
25727: NOP4
25731: PUSH
25732: NOP4
25736: PUSH
25737: NOP4
25741: ARRAY
25742: PUSH
25743: NOP4
25747: PUSH
25748: NOP4
25752: ARRAY
25753: UNION
25754: PPUSH
25755: LD_INT 21
25757: PUSH
25758: LD_INT 1
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: LD_INT 3
25770: PUSH
25771: LD_INT 54
25773: PUSH
25774: EMPTY
25775: LIST
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 3
25783: PUSH
25784: LD_INT 24
25786: PUSH
25787: LD_INT 800
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: LIST
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PPUSH
25807: NOP4
25811: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
25812: NOP4
25816: PUSH
25817: NOP4
25821: PUSH
25822: NOP4
25826: ARRAY
25827: PPUSH
25828: LD_INT 21
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 1
25840: PUSH
25841: LD_INT 3
25843: PUSH
25844: LD_INT 54
25846: PUSH
25847: EMPTY
25848: LIST
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 3
25856: PUSH
25857: LD_INT 24
25859: PUSH
25860: LD_INT 250
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: LIST
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PPUSH
25880: NOP4
25884: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
25885: NOP4
25889: PUSH
25890: NOP4
25894: PUSH
25895: NOP4
25899: DIFF
25900: ST_TO_ADDR
// if not need_heal_1 then
25901: NOP4
25905: NOT
25906: IFFALSE 25939
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
25908: NOP4
25912: PUSH
25913: NOP4
25917: PPUSH
25918: NOP4
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PPUSH
25930: EMPTY
25931: PPUSH
25932: NOP4
25936: ST_TO_ADDR
25937: GO 26009
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
25939: NOP4
25943: PUSH
25944: NOP4
25948: PPUSH
25949: NOP4
25953: PUSH
25954: LD_INT 1
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PPUSH
25961: NOP4
25965: PUSH
25966: NOP4
25970: ARRAY
25971: PUSH
25972: LD_INT 1
25974: ARRAY
25975: PPUSH
25976: LD_INT 3
25978: PUSH
25979: LD_INT 24
25981: PUSH
25982: LD_INT 1000
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PPUSH
25993: NOP4
25997: PUSH
25998: NOP4
26002: UNION
26003: PPUSH
26004: NOP4
26008: ST_TO_ADDR
// if not need_heal_2 then
26009: NOP4
26013: NOT
26014: IFFALSE 26047
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
26016: NOP4
26020: PUSH
26021: NOP4
26025: PPUSH
26026: NOP4
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PPUSH
26038: EMPTY
26039: PPUSH
26040: NOP4
26044: ST_TO_ADDR
26045: GO 26079
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
26047: NOP4
26051: PUSH
26052: NOP4
26056: PPUSH
26057: NOP4
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PPUSH
26069: NOP4
26073: PPUSH
26074: NOP4
26078: ST_TO_ADDR
// if need_heal_2 then
26079: NOP4
26083: IFFALSE 26255
// for j in need_heal_2 do
26085: NOP4
26089: PUSH
26090: NOP4
26094: PUSH
26095: FOR_IN
26096: IFFALSE 26253
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
26098: NOP4
26102: PUSH
26103: NOP4
26107: PUSH
26108: NOP4
26112: ARRAY
26113: PPUSH
26114: LD_INT 2
26116: PUSH
26117: LD_INT 30
26119: PUSH
26120: LD_INT 6
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 30
26129: PUSH
26130: LD_INT 7
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 30
26139: PUSH
26140: LD_INT 8
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 30
26149: PUSH
26150: LD_INT 0
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 30
26159: PUSH
26160: LD_INT 1
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 25
26169: PUSH
26170: LD_INT 4
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: PPUSH
26186: NOP4
26190: ST_TO_ADDR
// if tmp then
26191: NOP4
26195: IFFALSE 26251
// begin k := NearestUnitToUnit ( tmp , j ) ;
26197: NOP4
26201: PUSH
26202: NOP4
26206: PPUSH
26207: NOP4
26211: PPUSH
26212: NOP4
26216: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
26217: NOP4
26221: PPUSH
26222: NOP4
26226: PPUSH
26227: NOP4
26231: PUSH
26232: LD_INT 7
26234: GREATER
26235: IFFALSE 26251
// ComMoveUnit ( j , k ) ;
26237: NOP4
26241: PPUSH
26242: NOP4
26246: PPUSH
26247: NOP4
// end ; end ;
26251: GO 26095
26253: POP
26254: POP
// if not need_heal_1 and not need_heal_2 then
26255: NOP4
26259: NOT
26260: PUSH
26261: NOP4
26265: NOT
26266: AND
26267: IFFALSE 26271
// continue ;
26269: GO 25724
// end ;
26271: GO 25724
26273: POP
26274: POP
// RaiseSailEvent ( 102 ) ;
26275: LD_INT 102
26277: PPUSH
26278: NOP4
// end ;
26282: LD_VAR 0 1
26286: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
26287: LD_INT 0
26289: PPUSH
26290: PPUSH
26291: PPUSH
26292: PPUSH
26293: PPUSH
26294: PPUSH
26295: PPUSH
26296: PPUSH
// if not mc_bases then
26297: NOP4
26301: NOT
26302: IFFALSE 26306
// exit ;
26304: GO 27146
// for i = 1 to mc_bases do
26306: NOP4
26310: PUSH
26311: DOUBLE
26312: LD_INT 1
26314: DEC
26315: ST_TO_ADDR
26316: NOP4
26320: PUSH
26321: FOR_TO
26322: IFFALSE 27144
// begin if not mc_building_need_repair [ i ] then
26324: NOP4
26328: PUSH
26329: NOP4
26333: ARRAY
26334: NOT
26335: IFFALSE 26509
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
26337: NOP4
26341: PUSH
26342: NOP4
26346: PUSH
26347: NOP4
26351: ARRAY
26352: PPUSH
26353: LD_INT 3
26355: PUSH
26356: LD_INT 24
26358: PUSH
26359: LD_INT 1000
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 2
26372: PUSH
26373: LD_INT 34
26375: PUSH
26376: LD_INT 13
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 34
26385: PUSH
26386: LD_INT 52
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: LIST
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PPUSH
26402: NOP4
26406: ST_TO_ADDR
// if cranes then
26407: NOP4
26411: IFFALSE 26473
// for j in cranes do
26413: NOP4
26417: PUSH
26418: NOP4
26422: PUSH
26423: FOR_IN
26424: IFFALSE 26471
// if not IsInArea ( j , mc_parking [ i ] ) then
26426: NOP4
26430: PPUSH
26431: NOP4
26435: PUSH
26436: NOP4
26440: ARRAY
26441: PPUSH
26442: NOP4
26446: NOT
26447: IFFALSE 26469
// ComMoveToArea ( j , mc_parking [ i ] ) ;
26449: NOP4
26453: PPUSH
26454: NOP4
26458: PUSH
26459: NOP4
26463: ARRAY
26464: PPUSH
26465: NOP4
26469: GO 26423
26471: POP
26472: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
26473: NOP4
26477: PUSH
26478: NOP4
26482: PPUSH
26483: NOP4
26487: PPUSH
26488: EMPTY
26489: PPUSH
26490: NOP4
26494: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
26495: NOP4
26499: PPUSH
26500: LD_INT 101
26502: PPUSH
26503: NOP4
// continue ;
26507: GO 26321
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
26509: NOP4
26513: PUSH
26514: NOP4
26518: PPUSH
26519: NOP4
26523: PPUSH
26524: EMPTY
26525: PPUSH
26526: NOP4
26530: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
26531: NOP4
26535: PPUSH
26536: LD_INT 103
26538: PPUSH
26539: NOP4
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
26543: NOP4
26547: PUSH
26548: NOP4
26552: PUSH
26553: NOP4
26557: ARRAY
26558: PUSH
26559: NOP4
26563: PUSH
26564: NOP4
26568: ARRAY
26569: UNION
26570: PPUSH
26571: LD_INT 2
26573: PUSH
26574: LD_INT 25
26576: PUSH
26577: LD_INT 2
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 25
26586: PUSH
26587: LD_INT 16
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: LIST
26598: PUSH
26599: EMPTY
26600: LIST
26601: PPUSH
26602: NOP4
26606: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
26607: NOP4
26611: PUSH
26612: NOP4
26616: PUSH
26617: NOP4
26621: ARRAY
26622: PPUSH
26623: LD_INT 2
26625: PUSH
26626: LD_INT 34
26628: PUSH
26629: LD_INT 13
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 34
26638: PUSH
26639: LD_INT 52
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: LIST
26650: PPUSH
26651: NOP4
26655: ST_TO_ADDR
// if cranes then
26656: NOP4
26660: IFFALSE 26796
// begin for j in cranes do
26662: NOP4
26666: PUSH
26667: NOP4
26671: PUSH
26672: FOR_IN
26673: IFFALSE 26794
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
26675: NOP4
26679: PPUSH
26680: NOP4
26684: PUSH
26685: LD_INT 500
26687: GREATEREQUAL
26688: PUSH
26689: NOP4
26693: PPUSH
26694: NOP4
26698: NOT
26699: AND
26700: IFFALSE 26734
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
26702: NOP4
26706: PPUSH
26707: NOP4
26711: PUSH
26712: NOP4
26716: ARRAY
26717: PPUSH
26718: NOP4
26722: PPUSH
26723: NOP4
26727: PPUSH
26728: NOP4
26732: GO 26792
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
26734: NOP4
26738: PPUSH
26739: NOP4
26743: PUSH
26744: LD_INT 500
26746: LESS
26747: PUSH
26748: NOP4
26752: PPUSH
26753: NOP4
26757: PUSH
26758: NOP4
26762: ARRAY
26763: PPUSH
26764: NOP4
26768: NOT
26769: AND
26770: IFFALSE 26792
// ComMoveToArea ( j , mc_parking [ i ] ) ;
26772: NOP4
26776: PPUSH
26777: NOP4
26781: PUSH
26782: NOP4
26786: ARRAY
26787: PPUSH
26788: NOP4
26792: GO 26672
26794: POP
26795: POP
// end ; if not tmp then
26796: NOP4
26800: NOT
26801: IFFALSE 26805
// continue ;
26803: GO 26321
// for j in tmp do
26805: NOP4
26809: PUSH
26810: NOP4
26814: PUSH
26815: FOR_IN
26816: IFFALSE 27140
// begin if mc_need_heal [ i ] then
26818: NOP4
26822: PUSH
26823: NOP4
26827: ARRAY
26828: IFFALSE 26876
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
26830: NOP4
26834: PUSH
26835: NOP4
26839: PUSH
26840: NOP4
26844: ARRAY
26845: PUSH
26846: LD_INT 1
26848: ARRAY
26849: IN
26850: PUSH
26851: NOP4
26855: PUSH
26856: NOP4
26860: PUSH
26861: NOP4
26865: ARRAY
26866: PUSH
26867: LD_INT 2
26869: ARRAY
26870: IN
26871: OR
26872: IFFALSE 26876
// continue ;
26874: GO 26815
// if IsInUnit ( j ) then
26876: NOP4
26880: PPUSH
26881: NOP4
26885: IFFALSE 26896
// ComExitBuilding ( j ) ;
26887: NOP4
26891: PPUSH
26892: NOP4
// if not j in mc_building_repairs [ i ] then
26896: NOP4
26900: PUSH
26901: NOP4
26905: PUSH
26906: NOP4
26910: ARRAY
26911: IN
26912: NOT
26913: IFFALSE 26971
// begin SetTag ( j , 101 ) ;
26915: NOP4
26919: PPUSH
26920: LD_INT 101
26922: PPUSH
26923: NOP4
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
26927: NOP4
26931: PUSH
26932: NOP4
26936: PPUSH
26937: NOP4
26941: PUSH
26942: NOP4
26946: PUSH
26947: NOP4
26951: ARRAY
26952: PUSH
26953: LD_INT 1
26955: PLUS
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PPUSH
26961: NOP4
26965: PPUSH
26966: NOP4
26970: ST_TO_ADDR
// end ; wait ( 1 ) ;
26971: LD_INT 1
26973: PPUSH
26974: NOP4
// to_repair_tmp := mc_building_need_repair [ i ] ;
26978: NOP4
26982: PUSH
26983: NOP4
26987: PUSH
26988: NOP4
26992: ARRAY
26993: ST_TO_ADDR
// if mc_scan [ i ] then
26994: NOP4
26998: PUSH
26999: NOP4
27003: ARRAY
27004: IFFALSE 27073
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
27006: NOP4
27010: PUSH
27011: NOP4
27015: PUSH
27016: NOP4
27020: ARRAY
27021: PPUSH
27022: LD_INT 3
27024: PUSH
27025: LD_INT 2
27027: PUSH
27028: LD_INT 30
27030: PUSH
27031: LD_INT 32
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 30
27040: PUSH
27041: LD_INT 33
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 30
27050: PUSH
27051: LD_INT 31
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PPUSH
27068: NOP4
27072: ST_TO_ADDR
// if not to_repair_tmp then
27073: NOP4
27077: NOT
27078: IFFALSE 27082
// continue ;
27080: GO 26815
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
27082: NOP4
27086: PUSH
27087: NOP4
27091: PPUSH
27092: NOP4
27096: PPUSH
27097: NOP4
27101: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
27102: NOP4
27106: PPUSH
27107: LD_INT 14
27109: PPUSH
27110: NOP4
27114: PUSH
27115: LD_INT 4
27117: ARRAY
27118: PUSH
27119: LD_INT 5
27121: LESS
27122: IFFALSE 27138
// ComRepairBuilding ( j , to_repair ) ;
27124: NOP4
27128: PPUSH
27129: NOP4
27133: PPUSH
27134: NOP4
// end ;
27138: GO 26815
27140: POP
27141: POP
// end ;
27142: GO 26321
27144: POP
27145: POP
// end ;
27146: LD_VAR 0 1
27150: RET
// export function MC_Heal ; var i , j , tmp ; begin
27151: LD_INT 0
27153: PPUSH
27154: PPUSH
27155: PPUSH
27156: PPUSH
// if not mc_bases then
27157: NOP4
27161: NOT
27162: IFFALSE 27166
// exit ;
27164: GO 27568
// for i = 1 to mc_bases do
27166: NOP4
27170: PUSH
27171: DOUBLE
27172: LD_INT 1
27174: DEC
27175: ST_TO_ADDR
27176: NOP4
27180: PUSH
27181: FOR_TO
27182: IFFALSE 27566
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
27184: NOP4
27188: PUSH
27189: NOP4
27193: ARRAY
27194: PUSH
27195: LD_INT 1
27197: ARRAY
27198: NOT
27199: PUSH
27200: NOP4
27204: PUSH
27205: NOP4
27209: ARRAY
27210: PUSH
27211: LD_INT 2
27213: ARRAY
27214: NOT
27215: AND
27216: IFFALSE 27254
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
27218: NOP4
27222: PUSH
27223: NOP4
27227: PPUSH
27228: NOP4
27232: PPUSH
27233: EMPTY
27234: PPUSH
27235: NOP4
27239: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
27240: NOP4
27244: PPUSH
27245: LD_INT 102
27247: PPUSH
27248: NOP4
// continue ;
27252: GO 27181
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
27254: NOP4
27258: PUSH
27259: NOP4
27263: PUSH
27264: NOP4
27268: ARRAY
27269: PPUSH
27270: LD_INT 25
27272: PUSH
27273: LD_INT 4
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PPUSH
27280: NOP4
27284: ST_TO_ADDR
// if not tmp then
27285: NOP4
27289: NOT
27290: IFFALSE 27294
// continue ;
27292: GO 27181
// if mc_taming [ i ] then
27294: NOP4
27298: PUSH
27299: NOP4
27303: ARRAY
27304: IFFALSE 27328
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
27306: NOP4
27310: PUSH
27311: NOP4
27315: PPUSH
27316: NOP4
27320: PPUSH
27321: EMPTY
27322: PPUSH
27323: NOP4
27327: ST_TO_ADDR
// for j in tmp do
27328: NOP4
27332: PUSH
27333: NOP4
27337: PUSH
27338: FOR_IN
27339: IFFALSE 27562
// begin if IsInUnit ( j ) then
27341: NOP4
27345: PPUSH
27346: NOP4
27350: IFFALSE 27361
// ComExitBuilding ( j ) ;
27352: NOP4
27356: PPUSH
27357: NOP4
// if not j in mc_healers [ i ] then
27361: NOP4
27365: PUSH
27366: NOP4
27370: PUSH
27371: NOP4
27375: ARRAY
27376: IN
27377: NOT
27378: IFFALSE 27424
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
27380: NOP4
27384: PUSH
27385: NOP4
27389: PPUSH
27390: NOP4
27394: PUSH
27395: NOP4
27399: PUSH
27400: NOP4
27404: ARRAY
27405: PUSH
27406: LD_INT 1
27408: PLUS
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PPUSH
27414: NOP4
27418: PPUSH
27419: NOP4
27423: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
27424: NOP4
27428: PPUSH
27429: NOP4
27433: PUSH
27434: LD_INT 102
27436: NONEQUAL
27437: IFFALSE 27451
// SetTag ( j , 102 ) ;
27439: NOP4
27443: PPUSH
27444: LD_INT 102
27446: PPUSH
27447: NOP4
// Wait ( 3 ) ;
27451: LD_INT 3
27453: PPUSH
27454: NOP4
// if mc_need_heal [ i ] [ 1 ] then
27458: NOP4
27462: PUSH
27463: NOP4
27467: ARRAY
27468: PUSH
27469: LD_INT 1
27471: ARRAY
27472: IFFALSE 27504
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
27474: NOP4
27478: PPUSH
27479: NOP4
27483: PUSH
27484: NOP4
27488: ARRAY
27489: PUSH
27490: LD_INT 1
27492: ARRAY
27493: PUSH
27494: LD_INT 1
27496: ARRAY
27497: PPUSH
27498: NOP4
27502: GO 27560
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
27504: NOP4
27508: PPUSH
27509: NOP4
27513: NOT
27514: PUSH
27515: NOP4
27519: PUSH
27520: NOP4
27524: ARRAY
27525: PUSH
27526: LD_INT 2
27528: ARRAY
27529: AND
27530: IFFALSE 27560
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
27532: NOP4
27536: PPUSH
27537: NOP4
27541: PUSH
27542: NOP4
27546: ARRAY
27547: PUSH
27548: LD_INT 2
27550: ARRAY
27551: PUSH
27552: LD_INT 1
27554: ARRAY
27555: PPUSH
27556: NOP4
// end ;
27560: GO 27338
27562: POP
27563: POP
// end ;
27564: GO 27181
27566: POP
27567: POP
// end ;
27568: LD_VAR 0 1
27572: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
27573: LD_INT 0
27575: PPUSH
27576: PPUSH
27577: PPUSH
27578: PPUSH
27579: PPUSH
// if not mc_bases then
27580: NOP4
27584: NOT
27585: IFFALSE 27589
// exit ;
27587: GO 28732
// for i = 1 to mc_bases do
27589: NOP4
27593: PUSH
27594: DOUBLE
27595: LD_INT 1
27597: DEC
27598: ST_TO_ADDR
27599: NOP4
27603: PUSH
27604: FOR_TO
27605: IFFALSE 28730
// begin if mc_scan [ i ] then
27607: NOP4
27611: PUSH
27612: NOP4
27616: ARRAY
27617: IFFALSE 27621
// continue ;
27619: GO 27604
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
27621: NOP4
27625: PUSH
27626: NOP4
27630: ARRAY
27631: NOT
27632: PUSH
27633: NOP4
27637: PUSH
27638: NOP4
27642: ARRAY
27643: NOT
27644: AND
27645: PUSH
27646: NOP4
27650: PUSH
27651: NOP4
27655: ARRAY
27656: AND
27657: IFFALSE 27695
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
27659: NOP4
27663: PUSH
27664: NOP4
27668: PPUSH
27669: NOP4
27673: PPUSH
27674: EMPTY
27675: PPUSH
27676: NOP4
27680: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
27681: NOP4
27685: PPUSH
27686: LD_INT 103
27688: PPUSH
27689: NOP4
// continue ;
27693: GO 27604
// end ; if mc_construct_list [ i ] then
27695: NOP4
27699: PUSH
27700: NOP4
27704: ARRAY
27705: IFFALSE 27925
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
27707: NOP4
27711: PUSH
27712: NOP4
27716: PUSH
27717: NOP4
27721: ARRAY
27722: PPUSH
27723: LD_INT 25
27725: PUSH
27726: LD_INT 2
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PPUSH
27733: NOP4
27737: PUSH
27738: NOP4
27742: PUSH
27743: NOP4
27747: ARRAY
27748: DIFF
27749: ST_TO_ADDR
// if not tmp then
27750: NOP4
27754: NOT
27755: IFFALSE 27759
// continue ;
27757: GO 27604
// for j in tmp do
27759: NOP4
27763: PUSH
27764: NOP4
27768: PUSH
27769: FOR_IN
27770: IFFALSE 27921
// begin if not mc_builders [ i ] then
27772: NOP4
27776: PUSH
27777: NOP4
27781: ARRAY
27782: NOT
27783: IFFALSE 27841
// begin SetTag ( j , 103 ) ;
27785: NOP4
27789: PPUSH
27790: LD_INT 103
27792: PPUSH
27793: NOP4
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27797: NOP4
27801: PUSH
27802: NOP4
27806: PPUSH
27807: NOP4
27811: PUSH
27812: NOP4
27816: PUSH
27817: NOP4
27821: ARRAY
27822: PUSH
27823: LD_INT 1
27825: PLUS
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PPUSH
27831: NOP4
27835: PPUSH
27836: NOP4
27840: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27841: NOP4
27845: PPUSH
27846: NOP4
27850: IFFALSE 27861
// ComExitBuilding ( j ) ;
27852: NOP4
27856: PPUSH
27857: NOP4
// wait ( 3 ) ;
27861: LD_INT 3
27863: PPUSH
27864: NOP4
// if not mc_construct_list [ i ] then
27868: NOP4
27872: PUSH
27873: NOP4
27877: ARRAY
27878: NOT
27879: IFFALSE 27883
// break ;
27881: GO 27921
// if not HasTask ( j ) then
27883: NOP4
27887: PPUSH
27888: NOP4
27892: NOT
27893: IFFALSE 27919
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
27895: NOP4
27899: PPUSH
27900: NOP4
27904: PUSH
27905: NOP4
27909: ARRAY
27910: PUSH
27911: LD_INT 1
27913: ARRAY
27914: PPUSH
27915: NOP4
// end ;
27919: GO 27769
27921: POP
27922: POP
// end else
27923: GO 28728
// if mc_build_list [ i ] then
27925: NOP4
27929: PUSH
27930: NOP4
27934: ARRAY
27935: IFFALSE 28728
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27937: NOP4
27941: PUSH
27942: NOP4
27946: PUSH
27947: NOP4
27951: ARRAY
27952: PPUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 30
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 30
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: PPUSH
27981: NOP4
27985: ST_TO_ADDR
// if depot then
27986: NOP4
27990: IFFALSE 28008
// depot := depot [ 1 ] else
27992: NOP4
27996: PUSH
27997: NOP4
28001: PUSH
28002: LD_INT 1
28004: ARRAY
28005: ST_TO_ADDR
28006: GO 28016
// depot := 0 ;
28008: NOP4
28012: PUSH
28013: LD_INT 0
28015: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
28016: NOP4
28020: PUSH
28021: NOP4
28025: ARRAY
28026: PUSH
28027: LD_INT 1
28029: ARRAY
28030: PUSH
28031: LD_INT 1
28033: ARRAY
28034: PPUSH
28035: NOP4
28039: PUSH
28040: NOP4
28044: PUSH
28045: NOP4
28049: ARRAY
28050: PPUSH
28051: LD_INT 2
28053: PUSH
28054: LD_INT 30
28056: PUSH
28057: LD_INT 2
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 30
28066: PUSH
28067: LD_INT 3
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: PPUSH
28079: NOP4
28083: NOT
28084: AND
28085: IFFALSE 28190
// begin for j = 1 to mc_build_list [ i ] do
28087: NOP4
28091: PUSH
28092: DOUBLE
28093: LD_INT 1
28095: DEC
28096: ST_TO_ADDR
28097: NOP4
28101: PUSH
28102: NOP4
28106: ARRAY
28107: PUSH
28108: FOR_TO
28109: IFFALSE 28188
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
28111: NOP4
28115: PUSH
28116: NOP4
28120: ARRAY
28121: PUSH
28122: NOP4
28126: ARRAY
28127: PUSH
28128: LD_INT 1
28130: ARRAY
28131: PUSH
28132: LD_INT 2
28134: EQUAL
28135: IFFALSE 28186
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
28137: NOP4
28141: PUSH
28142: NOP4
28146: PPUSH
28147: NOP4
28151: PPUSH
28152: NOP4
28156: PUSH
28157: NOP4
28161: ARRAY
28162: PPUSH
28163: NOP4
28167: PPUSH
28168: LD_INT 1
28170: PPUSH
28171: LD_INT 0
28173: PPUSH
28174: NOP4
28178: PPUSH
28179: NOP4
28183: ST_TO_ADDR
// break ;
28184: GO 28188
// end ;
28186: GO 28108
28188: POP
28189: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
28190: NOP4
28194: PUSH
28195: NOP4
28199: ARRAY
28200: PUSH
28201: LD_INT 1
28203: ARRAY
28204: PUSH
28205: LD_INT 1
28207: ARRAY
28208: PUSH
28209: LD_INT 0
28211: EQUAL
28212: PUSH
28213: NOP4
28217: PUSH
28218: NOP4
28222: PPUSH
28223: NOP4
28227: PUSH
28228: NOP4
28232: ARRAY
28233: PUSH
28234: LD_INT 1
28236: ARRAY
28237: PUSH
28238: LD_INT 1
28240: ARRAY
28241: PPUSH
28242: NOP4
28246: PUSH
28247: NOP4
28251: ARRAY
28252: PUSH
28253: LD_INT 1
28255: ARRAY
28256: PUSH
28257: LD_INT 2
28259: ARRAY
28260: PPUSH
28261: NOP4
28265: PUSH
28266: NOP4
28270: ARRAY
28271: PUSH
28272: LD_INT 1
28274: ARRAY
28275: PUSH
28276: LD_INT 3
28278: ARRAY
28279: PPUSH
28280: NOP4
28284: PUSH
28285: NOP4
28289: ARRAY
28290: PUSH
28291: LD_INT 1
28293: ARRAY
28294: PUSH
28295: LD_INT 4
28297: ARRAY
28298: PPUSH
28299: NOP4
28303: AND
28304: OR
28305: IFFALSE 28586
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
28307: NOP4
28311: PUSH
28312: NOP4
28316: PUSH
28317: NOP4
28321: ARRAY
28322: PPUSH
28323: LD_INT 25
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PPUSH
28333: NOP4
28337: PUSH
28338: NOP4
28342: PUSH
28343: NOP4
28347: ARRAY
28348: DIFF
28349: ST_TO_ADDR
// if not tmp then
28350: NOP4
28354: NOT
28355: IFFALSE 28359
// continue ;
28357: GO 27604
// for j in tmp do
28359: NOP4
28363: PUSH
28364: NOP4
28368: PUSH
28369: FOR_IN
28370: IFFALSE 28582
// begin if not mc_builders [ i ] then
28372: NOP4
28376: PUSH
28377: NOP4
28381: ARRAY
28382: NOT
28383: IFFALSE 28441
// begin SetTag ( j , 103 ) ;
28385: NOP4
28389: PPUSH
28390: LD_INT 103
28392: PPUSH
28393: NOP4
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
28397: NOP4
28401: PUSH
28402: NOP4
28406: PPUSH
28407: NOP4
28411: PUSH
28412: NOP4
28416: PUSH
28417: NOP4
28421: ARRAY
28422: PUSH
28423: LD_INT 1
28425: PLUS
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PPUSH
28431: NOP4
28435: PPUSH
28436: NOP4
28440: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
28441: NOP4
28445: PPUSH
28446: NOP4
28450: IFFALSE 28461
// ComExitBuilding ( j ) ;
28452: NOP4
28456: PPUSH
28457: NOP4
// wait ( 3 ) ;
28461: LD_INT 3
28463: PPUSH
28464: NOP4
// if not mc_build_list [ i ] then
28468: NOP4
28472: PUSH
28473: NOP4
28477: ARRAY
28478: NOT
28479: IFFALSE 28483
// break ;
28481: GO 28582
// if not HasTask ( j ) then
28483: NOP4
28487: PPUSH
28488: NOP4
28492: NOT
28493: IFFALSE 28580
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
28495: NOP4
28499: PPUSH
28500: NOP4
28504: PUSH
28505: NOP4
28509: ARRAY
28510: PUSH
28511: LD_INT 1
28513: ARRAY
28514: PUSH
28515: LD_INT 1
28517: ARRAY
28518: PPUSH
28519: NOP4
28523: PUSH
28524: NOP4
28528: ARRAY
28529: PUSH
28530: LD_INT 1
28532: ARRAY
28533: PUSH
28534: LD_INT 2
28536: ARRAY
28537: PPUSH
28538: NOP4
28542: PUSH
28543: NOP4
28547: ARRAY
28548: PUSH
28549: LD_INT 1
28551: ARRAY
28552: PUSH
28553: LD_INT 3
28555: ARRAY
28556: PPUSH
28557: NOP4
28561: PUSH
28562: NOP4
28566: ARRAY
28567: PUSH
28568: LD_INT 1
28570: ARRAY
28571: PUSH
28572: LD_INT 4
28574: ARRAY
28575: PPUSH
28576: NOP4
// end ;
28580: GO 28369
28582: POP
28583: POP
// end else
28584: GO 28728
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
28586: NOP4
28590: PUSH
28591: NOP4
28595: ARRAY
28596: PPUSH
28597: NOP4
28601: PUSH
28602: NOP4
28606: ARRAY
28607: PUSH
28608: LD_INT 1
28610: ARRAY
28611: PUSH
28612: LD_INT 1
28614: ARRAY
28615: PPUSH
28616: NOP4
28620: PUSH
28621: NOP4
28625: ARRAY
28626: PUSH
28627: LD_INT 1
28629: ARRAY
28630: PUSH
28631: LD_INT 2
28633: ARRAY
28634: PPUSH
28635: NOP4
28639: PUSH
28640: NOP4
28644: ARRAY
28645: PUSH
28646: LD_INT 1
28648: ARRAY
28649: PUSH
28650: LD_INT 3
28652: ARRAY
28653: PPUSH
28654: NOP4
28658: PUSH
28659: NOP4
28663: ARRAY
28664: PUSH
28665: LD_INT 1
28667: ARRAY
28668: PUSH
28669: LD_INT 4
28671: ARRAY
28672: PPUSH
28673: NOP4
28677: NOT
28678: IFFALSE 28728
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
28680: NOP4
28684: PUSH
28685: NOP4
28689: PPUSH
28690: NOP4
28694: PPUSH
28695: NOP4
28699: PUSH
28700: NOP4
28704: ARRAY
28705: PPUSH
28706: LD_INT 1
28708: PPUSH
28709: LD_INT 1
28711: NEG
28712: PPUSH
28713: LD_INT 0
28715: PPUSH
28716: NOP4
28720: PPUSH
28721: NOP4
28725: ST_TO_ADDR
// continue ;
28726: GO 27604
// end ; end ; end ;
28728: GO 27604
28730: POP
28731: POP
// end ;
28732: LD_VAR 0 1
28736: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
28737: LD_INT 0
28739: PPUSH
28740: PPUSH
28741: PPUSH
28742: PPUSH
28743: PPUSH
28744: PPUSH
// if not mc_bases then
28745: NOP4
28749: NOT
28750: IFFALSE 28754
// exit ;
28752: GO 29181
// for i = 1 to mc_bases do
28754: NOP4
28758: PUSH
28759: DOUBLE
28760: LD_INT 1
28762: DEC
28763: ST_TO_ADDR
28764: NOP4
28768: PUSH
28769: FOR_TO
28770: IFFALSE 29179
// begin tmp := mc_build_upgrade [ i ] ;
28772: NOP4
28776: PUSH
28777: NOP4
28781: PUSH
28782: NOP4
28786: ARRAY
28787: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
28788: NOP4
28792: PUSH
28793: NOP4
28797: PUSH
28798: NOP4
28802: ARRAY
28803: PPUSH
28804: LD_INT 2
28806: PUSH
28807: LD_INT 30
28809: PUSH
28810: LD_INT 6
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 30
28819: PUSH
28820: LD_INT 7
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: LIST
28831: PPUSH
28832: NOP4
28836: ST_TO_ADDR
// if not tmp and not lab then
28837: NOP4
28841: NOT
28842: PUSH
28843: NOP4
28847: NOT
28848: AND
28849: IFFALSE 28853
// continue ;
28851: GO 28769
// if tmp then
28853: NOP4
28857: IFFALSE 28977
// for j in tmp do
28859: NOP4
28863: PUSH
28864: NOP4
28868: PUSH
28869: FOR_IN
28870: IFFALSE 28975
// begin if UpgradeCost ( j ) then
28872: NOP4
28876: PPUSH
28877: NOP4
28881: IFFALSE 28973
// begin ComUpgrade ( j ) ;
28883: NOP4
28887: PPUSH
28888: NOP4
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
28892: NOP4
28896: PUSH
28897: NOP4
28901: PPUSH
28902: NOP4
28906: PPUSH
28907: NOP4
28911: PUSH
28912: NOP4
28916: ARRAY
28917: PUSH
28918: NOP4
28922: DIFF
28923: PPUSH
28924: NOP4
28928: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28929: NOP4
28933: PUSH
28934: NOP4
28938: PPUSH
28939: NOP4
28943: PUSH
28944: NOP4
28948: PUSH
28949: NOP4
28953: ARRAY
28954: PUSH
28955: LD_INT 1
28957: PLUS
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PPUSH
28963: NOP4
28967: PPUSH
28968: NOP4
28972: ST_TO_ADDR
// end ; end ;
28973: GO 28869
28975: POP
28976: POP
// if not lab or not mc_lab_upgrade [ i ] then
28977: NOP4
28981: NOT
28982: PUSH
28983: NOP4
28987: PUSH
28988: NOP4
28992: ARRAY
28993: NOT
28994: OR
28995: IFFALSE 28999
// continue ;
28997: GO 28769
// for j in lab do
28999: NOP4
29003: PUSH
29004: NOP4
29008: PUSH
29009: FOR_IN
29010: IFFALSE 29175
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
29012: NOP4
29016: PPUSH
29017: NOP4
29021: PUSH
29022: LD_INT 6
29024: PUSH
29025: LD_INT 7
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: IN
29032: PUSH
29033: NOP4
29037: PPUSH
29038: NOP4
29042: PUSH
29043: LD_INT 1
29045: NONEQUAL
29046: AND
29047: IFFALSE 29173
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
29049: NOP4
29053: PPUSH
29054: NOP4
29058: PUSH
29059: NOP4
29063: ARRAY
29064: PUSH
29065: LD_INT 1
29067: ARRAY
29068: PPUSH
29069: NOP4
29073: IFFALSE 29173
// begin ComCancel ( j ) ;
29075: NOP4
29079: PPUSH
29080: NOP4
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
29084: NOP4
29088: PPUSH
29089: NOP4
29093: PUSH
29094: NOP4
29098: ARRAY
29099: PUSH
29100: LD_INT 1
29102: ARRAY
29103: PPUSH
29104: NOP4
// if not j in mc_construct_list [ i ] then
29108: NOP4
29112: PUSH
29113: NOP4
29117: PUSH
29118: NOP4
29122: ARRAY
29123: IN
29124: NOT
29125: IFFALSE 29171
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
29127: NOP4
29131: PUSH
29132: NOP4
29136: PPUSH
29137: NOP4
29141: PUSH
29142: NOP4
29146: PUSH
29147: NOP4
29151: ARRAY
29152: PUSH
29153: LD_INT 1
29155: PLUS
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PPUSH
29161: NOP4
29165: PPUSH
29166: NOP4
29170: ST_TO_ADDR
// break ;
29171: GO 29175
// end ; end ; end ;
29173: GO 29009
29175: POP
29176: POP
// end ;
29177: GO 28769
29179: POP
29180: POP
// end ;
29181: LD_VAR 0 1
29185: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
29186: LD_INT 0
29188: PPUSH
29189: PPUSH
29190: PPUSH
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
// if not mc_bases then
29197: NOP4
29201: NOT
29202: IFFALSE 29206
// exit ;
29204: GO 29611
// for i = 1 to mc_bases do
29206: NOP4
29210: PUSH
29211: DOUBLE
29212: LD_INT 1
29214: DEC
29215: ST_TO_ADDR
29216: NOP4
29220: PUSH
29221: FOR_TO
29222: IFFALSE 29609
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
29224: NOP4
29228: PUSH
29229: NOP4
29233: ARRAY
29234: NOT
29235: PUSH
29236: NOP4
29240: PUSH
29241: NOP4
29245: ARRAY
29246: PPUSH
29247: LD_INT 30
29249: PUSH
29250: LD_INT 3
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PPUSH
29257: NOP4
29261: NOT
29262: OR
29263: IFFALSE 29267
// continue ;
29265: GO 29221
// busy := false ;
29267: NOP4
29271: PUSH
29272: LD_INT 0
29274: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
29275: NOP4
29279: PUSH
29280: NOP4
29284: PUSH
29285: NOP4
29289: ARRAY
29290: PPUSH
29291: LD_INT 30
29293: PUSH
29294: LD_INT 3
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PPUSH
29301: NOP4
29305: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
29306: NOP4
29310: PUSH
29311: NOP4
29315: PUSH
29316: NOP4
29320: ARRAY
29321: PPUSH
29322: LD_INT 2
29324: PUSH
29325: LD_INT 30
29327: PUSH
29328: LD_INT 32
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 30
29337: PUSH
29338: LD_INT 33
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: PPUSH
29350: NOP4
29354: ST_TO_ADDR
// if not t then
29355: NOP4
29359: NOT
29360: IFFALSE 29364
// continue ;
29362: GO 29221
// for j in tmp do
29364: NOP4
29368: PUSH
29369: NOP4
29373: PUSH
29374: FOR_IN
29375: IFFALSE 29405
// if not BuildingStatus ( j ) = bs_idle then
29377: NOP4
29381: PPUSH
29382: NOP4
29386: PUSH
29387: LD_INT 2
29389: EQUAL
29390: NOT
29391: IFFALSE 29403
// begin busy := true ;
29393: NOP4
29397: PUSH
29398: LD_INT 1
29400: ST_TO_ADDR
// break ;
29401: GO 29405
// end ;
29403: GO 29374
29405: POP
29406: POP
// if busy then
29407: NOP4
29411: IFFALSE 29415
// continue ;
29413: GO 29221
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
29415: NOP4
29419: PUSH
29420: NOP4
29424: PPUSH
29425: LD_INT 35
29427: PUSH
29428: LD_INT 0
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PPUSH
29435: NOP4
29439: ST_TO_ADDR
// if tw then
29440: NOP4
29444: IFFALSE 29521
// begin tw := tw [ 1 ] ;
29446: NOP4
29450: PUSH
29451: NOP4
29455: PUSH
29456: LD_INT 1
29458: ARRAY
29459: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
29460: NOP4
29464: PUSH
29465: NOP4
29469: PPUSH
29470: NOP4
29474: PUSH
29475: NOP4
29479: ARRAY
29480: PPUSH
29481: NOP4
29485: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
29486: NOP4
29490: PUSH
29491: NOP4
29495: ARRAY
29496: IFFALSE 29519
// if not weapon in mc_allowed_tower_weapons [ i ] then
29498: NOP4
29502: PUSH
29503: NOP4
29507: PUSH
29508: NOP4
29512: ARRAY
29513: IN
29514: NOT
29515: IFFALSE 29519
// continue ;
29517: GO 29221
// end else
29519: GO 29584
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
29521: NOP4
29525: PUSH
29526: NOP4
29530: PUSH
29531: NOP4
29535: ARRAY
29536: PPUSH
29537: NOP4
29541: PPUSH
29542: NOP4
29546: ST_TO_ADDR
// if not tmp2 then
29547: NOP4
29551: NOT
29552: IFFALSE 29556
// continue ;
29554: GO 29221
// tw := tmp2 [ 1 ] ;
29556: NOP4
29560: PUSH
29561: NOP4
29565: PUSH
29566: LD_INT 1
29568: ARRAY
29569: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
29570: NOP4
29574: PUSH
29575: NOP4
29579: PUSH
29580: LD_INT 2
29582: ARRAY
29583: ST_TO_ADDR
// end ; if not weapon then
29584: NOP4
29588: NOT
29589: IFFALSE 29593
// continue ;
29591: GO 29221
// ComPlaceWeapon ( tw , weapon ) ;
29593: NOP4
29597: PPUSH
29598: NOP4
29602: PPUSH
29603: NOP4
// end ;
29607: GO 29221
29609: POP
29610: POP
// end ;
29611: LD_VAR 0 1
29615: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
29616: LD_INT 0
29618: PPUSH
29619: PPUSH
29620: PPUSH
29621: PPUSH
29622: PPUSH
29623: PPUSH
// if not mc_bases then
29624: NOP4
29628: NOT
29629: IFFALSE 29633
// exit ;
29631: GO 30409
// for i = 1 to mc_bases do
29633: NOP4
29637: PUSH
29638: DOUBLE
29639: LD_INT 1
29641: DEC
29642: ST_TO_ADDR
29643: NOP4
29647: PUSH
29648: FOR_TO
29649: IFFALSE 30407
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
29651: NOP4
29655: PUSH
29656: NOP4
29660: ARRAY
29661: NOT
29662: PUSH
29663: NOP4
29667: PUSH
29668: NOP4
29672: ARRAY
29673: PUSH
29674: NOP4
29678: PUSH
29679: NOP4
29683: ARRAY
29684: EQUAL
29685: OR
29686: PUSH
29687: NOP4
29691: PUSH
29692: NOP4
29696: ARRAY
29697: OR
29698: IFFALSE 29702
// continue ;
29700: GO 29648
// if mc_miners [ i ] then
29702: NOP4
29706: PUSH
29707: NOP4
29711: ARRAY
29712: IFFALSE 30094
// begin for j = mc_miners [ i ] downto 1 do
29714: NOP4
29718: PUSH
29719: DOUBLE
29720: NOP4
29724: PUSH
29725: NOP4
29729: ARRAY
29730: INC
29731: ST_TO_ADDR
29732: LD_INT 1
29734: PUSH
29735: FOR_DOWNTO
29736: IFFALSE 30092
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
29738: NOP4
29742: PUSH
29743: NOP4
29747: ARRAY
29748: PUSH
29749: NOP4
29753: ARRAY
29754: PPUSH
29755: NOP4
29759: PUSH
29760: NOP4
29764: PUSH
29765: NOP4
29769: ARRAY
29770: PUSH
29771: NOP4
29775: ARRAY
29776: PPUSH
29777: NOP4
29781: PUSH
29782: LD_INT 1
29784: NONEQUAL
29785: OR
29786: IFFALSE 29849
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
29788: NOP4
29792: PUSH
29793: NOP4
29797: PUSH
29798: NOP4
29802: ARRAY
29803: PUSH
29804: NOP4
29808: PUSH
29809: NOP4
29813: ARRAY
29814: PUSH
29815: NOP4
29819: ARRAY
29820: DIFF
29821: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
29822: NOP4
29826: PUSH
29827: NOP4
29831: PPUSH
29832: NOP4
29836: PPUSH
29837: NOP4
29841: PPUSH
29842: NOP4
29846: ST_TO_ADDR
// continue ;
29847: GO 29735
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
29849: NOP4
29853: PUSH
29854: NOP4
29858: ARRAY
29859: PUSH
29860: NOP4
29864: ARRAY
29865: PPUSH
29866: NOP4
29870: PUSH
29871: LD_INT 1
29873: EQUAL
29874: PUSH
29875: NOP4
29879: PUSH
29880: NOP4
29884: ARRAY
29885: PUSH
29886: NOP4
29890: ARRAY
29891: PPUSH
29892: NOP4
29896: NOT
29897: AND
29898: PUSH
29899: NOP4
29903: PUSH
29904: NOP4
29908: ARRAY
29909: PUSH
29910: NOP4
29914: ARRAY
29915: PPUSH
29916: NOP4
29920: NOT
29921: AND
29922: IFFALSE 30090
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
29924: NOP4
29928: PUSH
29929: NOP4
29933: ARRAY
29934: PUSH
29935: NOP4
29939: ARRAY
29940: PPUSH
29941: NOP4
29945: IFFALSE 29968
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
29947: NOP4
29951: PUSH
29952: NOP4
29956: ARRAY
29957: PUSH
29958: NOP4
29962: ARRAY
29963: PPUSH
29964: NOP4
// if not HasTask ( mc_miners [ i ] [ j ] ) then
29968: NOP4
29972: PUSH
29973: NOP4
29977: ARRAY
29978: PUSH
29979: NOP4
29983: ARRAY
29984: PPUSH
29985: NOP4
29989: NOT
29990: IFFALSE 30090
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
29992: NOP4
29996: PUSH
29997: NOP4
30001: ARRAY
30002: PUSH
30003: NOP4
30007: ARRAY
30008: PPUSH
30009: NOP4
30013: PUSH
30014: NOP4
30018: ARRAY
30019: PUSH
30020: NOP4
30024: PUSH
30025: NOP4
30029: PUSH
30030: NOP4
30034: ARRAY
30035: MOD
30036: PUSH
30037: LD_INT 1
30039: PLUS
30040: ARRAY
30041: PUSH
30042: LD_INT 1
30044: ARRAY
30045: PPUSH
30046: NOP4
30050: PUSH
30051: NOP4
30055: ARRAY
30056: PUSH
30057: NOP4
30061: PUSH
30062: NOP4
30066: PUSH
30067: NOP4
30071: ARRAY
30072: MOD
30073: PUSH
30074: LD_INT 1
30076: PLUS
30077: ARRAY
30078: PUSH
30079: LD_INT 2
30081: ARRAY
30082: PPUSH
30083: LD_INT 0
30085: PPUSH
30086: NOP4
// end ; end ;
30090: GO 29735
30092: POP
30093: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
30094: NOP4
30098: PUSH
30099: NOP4
30103: PUSH
30104: NOP4
30108: ARRAY
30109: PPUSH
30110: LD_INT 2
30112: PUSH
30113: LD_INT 30
30115: PUSH
30116: LD_INT 4
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 30
30125: PUSH
30126: LD_INT 5
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 30
30135: PUSH
30136: LD_INT 32
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: PPUSH
30149: NOP4
30153: ST_TO_ADDR
// if not tmp then
30154: NOP4
30158: NOT
30159: IFFALSE 30163
// continue ;
30161: GO 29648
// list := [ ] ;
30163: NOP4
30167: PUSH
30168: EMPTY
30169: ST_TO_ADDR
// for j in tmp do
30170: NOP4
30174: PUSH
30175: NOP4
30179: PUSH
30180: FOR_IN
30181: IFFALSE 30250
// begin for k in UnitsInside ( j ) do
30183: NOP4
30187: PUSH
30188: NOP4
30192: PPUSH
30193: NOP4
30197: PUSH
30198: FOR_IN
30199: IFFALSE 30246
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
30201: NOP4
30205: PPUSH
30206: NOP4
30210: PUSH
30211: LD_INT 1
30213: EQUAL
30214: PUSH
30215: NOP4
30219: PPUSH
30220: NOP4
30224: NOT
30225: AND
30226: IFFALSE 30244
// list := list ^ k ;
30228: NOP4
30232: PUSH
30233: NOP4
30237: PUSH
30238: NOP4
30242: ADD
30243: ST_TO_ADDR
30244: GO 30198
30246: POP
30247: POP
// end ;
30248: GO 30180
30250: POP
30251: POP
// list := list diff mc_miners [ i ] ;
30252: NOP4
30256: PUSH
30257: NOP4
30261: PUSH
30262: NOP4
30266: PUSH
30267: NOP4
30271: ARRAY
30272: DIFF
30273: ST_TO_ADDR
// if not list then
30274: NOP4
30278: NOT
30279: IFFALSE 30283
// continue ;
30281: GO 29648
// k := mc_mines [ i ] - mc_miners [ i ] ;
30283: NOP4
30287: PUSH
30288: NOP4
30292: PUSH
30293: NOP4
30297: ARRAY
30298: PUSH
30299: NOP4
30303: PUSH
30304: NOP4
30308: ARRAY
30309: MINUS
30310: ST_TO_ADDR
// if k > list then
30311: NOP4
30315: PUSH
30316: NOP4
30320: GREATER
30321: IFFALSE 30333
// k := list ;
30323: NOP4
30327: PUSH
30328: NOP4
30332: ST_TO_ADDR
// for j = 1 to k do
30333: NOP4
30337: PUSH
30338: DOUBLE
30339: LD_INT 1
30341: DEC
30342: ST_TO_ADDR
30343: NOP4
30347: PUSH
30348: FOR_TO
30349: IFFALSE 30403
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
30351: NOP4
30355: PUSH
30356: NOP4
30360: PPUSH
30361: NOP4
30365: PUSH
30366: NOP4
30370: PUSH
30371: NOP4
30375: ARRAY
30376: PUSH
30377: LD_INT 1
30379: PLUS
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PPUSH
30385: NOP4
30389: PUSH
30390: NOP4
30394: ARRAY
30395: PPUSH
30396: NOP4
30400: ST_TO_ADDR
30401: GO 30348
30403: POP
30404: POP
// end ;
30405: GO 29648
30407: POP
30408: POP
// end ;
30409: LD_VAR 0 1
30413: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
30414: LD_INT 0
30416: PPUSH
30417: PPUSH
30418: PPUSH
30419: PPUSH
30420: PPUSH
30421: PPUSH
30422: PPUSH
30423: PPUSH
30424: PPUSH
30425: PPUSH
// if not mc_bases then
30426: NOP4
30430: NOT
30431: IFFALSE 30435
// exit ;
30433: GO 32185
// for i = 1 to mc_bases do
30435: NOP4
30439: PUSH
30440: DOUBLE
30441: LD_INT 1
30443: DEC
30444: ST_TO_ADDR
30445: NOP4
30449: PUSH
30450: FOR_TO
30451: IFFALSE 32183
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
30453: NOP4
30457: PUSH
30458: NOP4
30462: ARRAY
30463: NOT
30464: PUSH
30465: NOP4
30469: PUSH
30470: NOP4
30474: ARRAY
30475: OR
30476: IFFALSE 30480
// continue ;
30478: GO 30450
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
30480: NOP4
30484: PUSH
30485: NOP4
30489: ARRAY
30490: NOT
30491: PUSH
30492: NOP4
30496: PUSH
30497: NOP4
30501: ARRAY
30502: AND
30503: IFFALSE 30541
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
30505: NOP4
30509: PUSH
30510: NOP4
30514: PPUSH
30515: NOP4
30519: PPUSH
30520: EMPTY
30521: PPUSH
30522: NOP4
30526: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
30527: NOP4
30531: PPUSH
30532: LD_INT 107
30534: PPUSH
30535: NOP4
// continue ;
30539: GO 30450
// end ; target := [ ] ;
30541: NOP4
30545: PUSH
30546: EMPTY
30547: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
30548: NOP4
30552: PUSH
30553: DOUBLE
30554: NOP4
30558: PUSH
30559: NOP4
30563: ARRAY
30564: INC
30565: ST_TO_ADDR
30566: LD_INT 1
30568: PUSH
30569: FOR_DOWNTO
30570: IFFALSE 30830
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
30572: NOP4
30576: PUSH
30577: NOP4
30581: ARRAY
30582: PUSH
30583: NOP4
30587: ARRAY
30588: PUSH
30589: LD_INT 2
30591: ARRAY
30592: PPUSH
30593: NOP4
30597: PUSH
30598: NOP4
30602: ARRAY
30603: PUSH
30604: NOP4
30608: ARRAY
30609: PUSH
30610: LD_INT 3
30612: ARRAY
30613: PPUSH
30614: NOP4
30618: PUSH
30619: NOP4
30623: PUSH
30624: NOP4
30628: ARRAY
30629: PUSH
30630: NOP4
30634: ARRAY
30635: PUSH
30636: LD_INT 2
30638: ARRAY
30639: PPUSH
30640: NOP4
30644: PUSH
30645: NOP4
30649: ARRAY
30650: PUSH
30651: NOP4
30655: ARRAY
30656: PUSH
30657: LD_INT 3
30659: ARRAY
30660: PPUSH
30661: NOP4
30665: PUSH
30666: LD_INT 0
30668: EQUAL
30669: AND
30670: IFFALSE 30725
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
30672: NOP4
30676: PUSH
30677: NOP4
30681: PUSH
30682: NOP4
30686: ARRAY
30687: PPUSH
30688: NOP4
30692: PPUSH
30693: NOP4
30697: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
30698: NOP4
30702: PUSH
30703: NOP4
30707: PPUSH
30708: NOP4
30712: PPUSH
30713: NOP4
30717: PPUSH
30718: NOP4
30722: ST_TO_ADDR
// continue ;
30723: GO 30569
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
30725: NOP4
30729: PUSH
30730: NOP4
30734: ARRAY
30735: PUSH
30736: LD_INT 1
30738: ARRAY
30739: PPUSH
30740: NOP4
30744: PPUSH
30745: NOP4
30749: PUSH
30750: NOP4
30754: ARRAY
30755: PUSH
30756: NOP4
30760: ARRAY
30761: PUSH
30762: LD_INT 2
30764: ARRAY
30765: PPUSH
30766: NOP4
30770: PUSH
30771: NOP4
30775: ARRAY
30776: PUSH
30777: NOP4
30781: ARRAY
30782: PUSH
30783: LD_INT 3
30785: ARRAY
30786: PPUSH
30787: LD_INT 30
30789: PPUSH
30790: NOP4
30794: PUSH
30795: LD_INT 4
30797: ARRAY
30798: PUSH
30799: LD_INT 0
30801: EQUAL
30802: IFFALSE 30828
// begin target := mc_crates [ i ] [ j ] ;
30804: NOP4
30808: PUSH
30809: NOP4
30813: PUSH
30814: NOP4
30818: ARRAY
30819: PUSH
30820: NOP4
30824: ARRAY
30825: ST_TO_ADDR
// break ;
30826: GO 30830
// end ; end ;
30828: GO 30569
30830: POP
30831: POP
// if not target then
30832: NOP4
30836: NOT
30837: IFFALSE 30841
// continue ;
30839: GO 30450
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
30841: NOP4
30845: PUSH
30846: NOP4
30850: PUSH
30851: NOP4
30855: ARRAY
30856: PPUSH
30857: LD_INT 2
30859: PUSH
30860: LD_INT 3
30862: PUSH
30863: LD_INT 58
30865: PUSH
30866: EMPTY
30867: LIST
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 61
30875: PUSH
30876: EMPTY
30877: LIST
30878: PUSH
30879: LD_INT 33
30881: PUSH
30882: LD_INT 5
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 33
30891: PUSH
30892: LD_INT 3
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 2
30908: PUSH
30909: LD_INT 34
30911: PUSH
30912: LD_INT 32
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 34
30921: PUSH
30922: LD_INT 51
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 34
30931: PUSH
30932: LD_INT 12
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PPUSH
30949: NOP4
30953: ST_TO_ADDR
// if not cargo then
30954: NOP4
30958: NOT
30959: IFFALSE 31602
// begin if mc_crates_collector [ i ] < 5 then
30961: NOP4
30965: PUSH
30966: NOP4
30970: ARRAY
30971: PUSH
30972: LD_INT 5
30974: LESS
30975: IFFALSE 31341
// begin if mc_ape [ i ] then
30977: NOP4
30981: PUSH
30982: NOP4
30986: ARRAY
30987: IFFALSE 31034
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
30989: NOP4
30993: PUSH
30994: NOP4
30998: PUSH
30999: NOP4
31003: ARRAY
31004: PPUSH
31005: LD_INT 25
31007: PUSH
31008: LD_INT 16
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 24
31017: PUSH
31018: LD_INT 750
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PPUSH
31029: NOP4
31033: ST_TO_ADDR
// if not tmp then
31034: NOP4
31038: NOT
31039: IFFALSE 31086
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
31041: NOP4
31045: PUSH
31046: NOP4
31050: PUSH
31051: NOP4
31055: ARRAY
31056: PPUSH
31057: LD_INT 25
31059: PUSH
31060: LD_INT 2
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 24
31069: PUSH
31070: LD_INT 750
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PPUSH
31081: NOP4
31085: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
31086: NOP4
31090: PUSH
31091: NOP4
31095: ARRAY
31096: PUSH
31097: NOP4
31101: PUSH
31102: NOP4
31106: ARRAY
31107: PPUSH
31108: LD_INT 25
31110: PUSH
31111: LD_INT 2
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 24
31120: PUSH
31121: LD_INT 750
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PPUSH
31132: NOP4
31136: AND
31137: PUSH
31138: NOP4
31142: PUSH
31143: LD_INT 5
31145: LESS
31146: AND
31147: IFFALSE 31229
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
31149: NOP4
31153: PUSH
31154: NOP4
31158: PUSH
31159: NOP4
31163: ARRAY
31164: PPUSH
31165: LD_INT 25
31167: PUSH
31168: LD_INT 2
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 24
31177: PUSH
31178: LD_INT 750
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PPUSH
31189: NOP4
31193: PUSH
31194: FOR_IN
31195: IFFALSE 31227
// begin tmp := tmp union j ;
31197: NOP4
31201: PUSH
31202: NOP4
31206: PUSH
31207: NOP4
31211: UNION
31212: ST_TO_ADDR
// if tmp >= 5 then
31213: NOP4
31217: PUSH
31218: LD_INT 5
31220: GREATEREQUAL
31221: IFFALSE 31225
// break ;
31223: GO 31227
// end ;
31225: GO 31194
31227: POP
31228: POP
// end ; if not tmp then
31229: NOP4
31233: NOT
31234: IFFALSE 31238
// continue ;
31236: GO 30450
// for j in tmp do
31238: NOP4
31242: PUSH
31243: NOP4
31247: PUSH
31248: FOR_IN
31249: IFFALSE 31339
// if not GetTag ( j ) then
31251: NOP4
31255: PPUSH
31256: NOP4
31260: NOT
31261: IFFALSE 31337
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
31263: NOP4
31267: PUSH
31268: NOP4
31272: PPUSH
31273: NOP4
31277: PUSH
31278: NOP4
31282: PUSH
31283: NOP4
31287: ARRAY
31288: PUSH
31289: LD_INT 1
31291: PLUS
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PPUSH
31297: NOP4
31301: PPUSH
31302: NOP4
31306: ST_TO_ADDR
// SetTag ( j , 107 ) ;
31307: NOP4
31311: PPUSH
31312: LD_INT 107
31314: PPUSH
31315: NOP4
// if mc_crates_collector [ i ] >= 5 then
31319: NOP4
31323: PUSH
31324: NOP4
31328: ARRAY
31329: PUSH
31330: LD_INT 5
31332: GREATEREQUAL
31333: IFFALSE 31337
// break ;
31335: GO 31339
// end ;
31337: GO 31248
31339: POP
31340: POP
// end ; if mc_crates_collector [ i ] and target then
31341: NOP4
31345: PUSH
31346: NOP4
31350: ARRAY
31351: PUSH
31352: NOP4
31356: AND
31357: IFFALSE 31600
// begin if mc_crates_collector [ i ] < target [ 1 ] then
31359: NOP4
31363: PUSH
31364: NOP4
31368: ARRAY
31369: PUSH
31370: NOP4
31374: PUSH
31375: LD_INT 1
31377: ARRAY
31378: LESS
31379: IFFALSE 31399
// tmp := mc_crates_collector [ i ] else
31381: NOP4
31385: PUSH
31386: NOP4
31390: PUSH
31391: NOP4
31395: ARRAY
31396: ST_TO_ADDR
31397: GO 31413
// tmp := target [ 1 ] ;
31399: NOP4
31403: PUSH
31404: NOP4
31408: PUSH
31409: LD_INT 1
31411: ARRAY
31412: ST_TO_ADDR
// k := 0 ;
31413: NOP4
31417: PUSH
31418: LD_INT 0
31420: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
31421: NOP4
31425: PUSH
31426: NOP4
31430: PUSH
31431: NOP4
31435: ARRAY
31436: PUSH
31437: FOR_IN
31438: IFFALSE 31598
// begin k := k + 1 ;
31440: NOP4
31444: PUSH
31445: NOP4
31449: PUSH
31450: LD_INT 1
31452: PLUS
31453: ST_TO_ADDR
// if k > tmp then
31454: NOP4
31458: PUSH
31459: NOP4
31463: GREATER
31464: IFFALSE 31468
// break ;
31466: GO 31598
// if not GetClass ( j ) in [ 2 , 16 ] then
31468: NOP4
31472: PPUSH
31473: NOP4
31477: PUSH
31478: LD_INT 2
31480: PUSH
31481: LD_INT 16
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: IN
31488: NOT
31489: IFFALSE 31542
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
31491: NOP4
31495: PUSH
31496: NOP4
31500: PPUSH
31501: NOP4
31505: PPUSH
31506: NOP4
31510: PUSH
31511: NOP4
31515: ARRAY
31516: PUSH
31517: NOP4
31521: DIFF
31522: PPUSH
31523: NOP4
31527: ST_TO_ADDR
// SetTag ( j , 0 ) ;
31528: NOP4
31532: PPUSH
31533: LD_INT 0
31535: PPUSH
31536: NOP4
// continue ;
31540: GO 31437
// end ; if IsInUnit ( j ) then
31542: NOP4
31546: PPUSH
31547: NOP4
31551: IFFALSE 31562
// ComExitBuilding ( j ) ;
31553: NOP4
31557: PPUSH
31558: NOP4
// wait ( 3 ) ;
31562: LD_INT 3
31564: PPUSH
31565: NOP4
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31569: NOP4
31573: PPUSH
31574: NOP4
31578: PUSH
31579: LD_INT 2
31581: ARRAY
31582: PPUSH
31583: NOP4
31587: PUSH
31588: LD_INT 3
31590: ARRAY
31591: PPUSH
31592: NOP4
// end ;
31596: GO 31437
31598: POP
31599: POP
// end ; end else
31600: GO 32181
// begin for j in cargo do
31602: NOP4
31606: PUSH
31607: NOP4
31611: PUSH
31612: FOR_IN
31613: IFFALSE 32179
// begin if GetTag ( j ) <> 0 then
31615: NOP4
31619: PPUSH
31620: NOP4
31624: PUSH
31625: LD_INT 0
31627: NONEQUAL
31628: IFFALSE 31632
// continue ;
31630: GO 31612
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
31632: NOP4
31636: PPUSH
31637: NOP4
31641: PUSH
31642: LD_INT 1000
31644: LESS
31645: PUSH
31646: NOP4
31650: PPUSH
31651: NOP4
31655: PUSH
31656: NOP4
31660: ARRAY
31661: PPUSH
31662: NOP4
31666: NOT
31667: AND
31668: IFFALSE 31690
// ComMoveToArea ( j , mc_parking [ i ] ) ;
31670: NOP4
31674: PPUSH
31675: NOP4
31679: PUSH
31680: NOP4
31684: ARRAY
31685: PPUSH
31686: NOP4
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
31690: NOP4
31694: PPUSH
31695: NOP4
31699: PUSH
31700: LD_INT 1000
31702: LESS
31703: PUSH
31704: NOP4
31708: PPUSH
31709: NOP4
31713: PUSH
31714: NOP4
31718: ARRAY
31719: PPUSH
31720: NOP4
31724: AND
31725: IFFALSE 31729
// continue ;
31727: GO 31612
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
31729: NOP4
31733: PPUSH
31734: NOP4
31738: PUSH
31739: LD_INT 2
31741: EQUAL
31742: PUSH
31743: NOP4
31747: PPUSH
31748: NOP4
31752: PUSH
31753: LD_INT 15
31755: LESS
31756: AND
31757: IFFALSE 31761
// continue ;
31759: GO 31612
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
31761: NOP4
31765: PPUSH
31766: NOP4
31770: PUSH
31771: LD_INT 1
31773: EQUAL
31774: PUSH
31775: NOP4
31779: PPUSH
31780: NOP4
31784: PUSH
31785: LD_INT 10
31787: LESS
31788: AND
31789: IFFALSE 32118
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31791: NOP4
31795: PUSH
31796: NOP4
31800: PUSH
31801: NOP4
31805: ARRAY
31806: PPUSH
31807: LD_INT 2
31809: PUSH
31810: LD_INT 30
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 30
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: LIST
31834: PPUSH
31835: NOP4
31839: ST_TO_ADDR
// if not depot then
31840: NOP4
31844: NOT
31845: IFFALSE 31849
// continue ;
31847: GO 31612
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
31849: NOP4
31853: PPUSH
31854: NOP4
31858: PPUSH
31859: NOP4
31863: PPUSH
31864: NOP4
31868: PPUSH
31869: NOP4
31873: PUSH
31874: LD_INT 6
31876: LESS
31877: IFFALSE 31893
// SetFuel ( j , 100 ) else
31879: NOP4
31883: PPUSH
31884: LD_INT 100
31886: PPUSH
31887: NOP4
31891: GO 32118
// if GetFuel ( j ) = 0 then
31893: NOP4
31897: PPUSH
31898: NOP4
31902: PUSH
31903: LD_INT 0
31905: EQUAL
31906: IFFALSE 32118
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
31908: NOP4
31912: PUSH
31913: NOP4
31917: PPUSH
31918: NOP4
31922: PPUSH
31923: NOP4
31927: PUSH
31928: NOP4
31932: ARRAY
31933: PUSH
31934: NOP4
31938: DIFF
31939: PPUSH
31940: NOP4
31944: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
31945: NOP4
31949: PPUSH
31950: NOP4
31954: PUSH
31955: LD_INT 1
31957: EQUAL
31958: IFFALSE 31974
// ComExitVehicle ( IsInUnit ( j ) ) ;
31960: NOP4
31964: PPUSH
31965: NOP4
31969: PPUSH
31970: NOP4
// if GetControl ( j ) = control_remote then
31974: NOP4
31978: PPUSH
31979: NOP4
31983: PUSH
31984: LD_INT 2
31986: EQUAL
31987: IFFALSE 31998
// ComUnlink ( j ) ;
31989: NOP4
31993: PPUSH
31994: NOP4
// fac := MC_GetBuildings ( i , b_factory ) ;
31998: NOP4
32002: PUSH
32003: NOP4
32007: PPUSH
32008: LD_INT 3
32010: PPUSH
32011: NOP4
32015: ST_TO_ADDR
// if fac then
32016: NOP4
32020: IFFALSE 32116
// begin for k in fac do
32022: NOP4
32026: PUSH
32027: NOP4
32031: PUSH
32032: FOR_IN
32033: IFFALSE 32114
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
32035: NOP4
32039: PUSH
32040: NOP4
32044: PPUSH
32045: NOP4
32049: PPUSH
32050: NOP4
32054: PPUSH
32055: NOP4
32059: PPUSH
32060: NOP4
32064: PPUSH
32065: NOP4
32069: PPUSH
32070: NOP4
32074: PPUSH
32075: NOP4
32079: PPUSH
32080: NOP4
32084: PPUSH
32085: NOP4
32089: ST_TO_ADDR
// if components then
32090: NOP4
32094: IFFALSE 32112
// begin MC_InsertProduceList ( i , components ) ;
32096: NOP4
32100: PPUSH
32101: NOP4
32105: PPUSH
32106: NOP4
// break ;
32110: GO 32114
// end ; end ;
32112: GO 32032
32114: POP
32115: POP
// end ; continue ;
32116: GO 31612
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
32118: NOP4
32122: PPUSH
32123: LD_INT 1
32125: PPUSH
32126: NOP4
32130: PUSH
32131: LD_INT 100
32133: LESS
32134: PUSH
32135: NOP4
32139: PPUSH
32140: NOP4
32144: NOT
32145: AND
32146: IFFALSE 32175
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
32148: NOP4
32152: PPUSH
32153: NOP4
32157: PUSH
32158: LD_INT 2
32160: ARRAY
32161: PPUSH
32162: NOP4
32166: PUSH
32167: LD_INT 3
32169: ARRAY
32170: PPUSH
32171: NOP4
// break ;
32175: GO 32179
// end ;
32177: GO 31612
32179: POP
32180: POP
// end ; end ;
32181: GO 30450
32183: POP
32184: POP
// end ;
32185: LD_VAR 0 1
32189: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
32190: LD_INT 0
32192: PPUSH
32193: PPUSH
32194: PPUSH
32195: PPUSH
// if not mc_bases then
32196: NOP4
32200: NOT
32201: IFFALSE 32205
// exit ;
32203: GO 32366
// for i = 1 to mc_bases do
32205: NOP4
32209: PUSH
32210: DOUBLE
32211: LD_INT 1
32213: DEC
32214: ST_TO_ADDR
32215: NOP4
32219: PUSH
32220: FOR_TO
32221: IFFALSE 32364
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
32223: NOP4
32227: PUSH
32228: NOP4
32232: PUSH
32233: NOP4
32237: ARRAY
32238: PUSH
32239: NOP4
32243: PUSH
32244: NOP4
32248: ARRAY
32249: UNION
32250: PPUSH
32251: LD_INT 33
32253: PUSH
32254: LD_INT 2
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PPUSH
32261: NOP4
32265: ST_TO_ADDR
// if tmp then
32266: NOP4
32270: IFFALSE 32362
// for j in tmp do
32272: NOP4
32276: PUSH
32277: NOP4
32281: PUSH
32282: FOR_IN
32283: IFFALSE 32360
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
32285: NOP4
32289: PPUSH
32290: NOP4
32294: NOT
32295: PUSH
32296: NOP4
32300: PPUSH
32301: NOP4
32305: PUSH
32306: LD_INT 250
32308: GREATEREQUAL
32309: AND
32310: IFFALSE 32323
// Connect ( j ) else
32312: NOP4
32316: PPUSH
32317: NOP4
32321: GO 32358
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
32323: NOP4
32327: PPUSH
32328: NOP4
32332: PUSH
32333: LD_INT 250
32335: LESS
32336: PUSH
32337: NOP4
32341: PPUSH
32342: NOP4
32346: AND
32347: IFFALSE 32358
// ComUnlink ( j ) ;
32349: NOP4
32353: PPUSH
32354: NOP4
32358: GO 32282
32360: POP
32361: POP
// end ;
32362: GO 32220
32364: POP
32365: POP
// end ;
32366: LD_VAR 0 1
32370: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
32371: LD_INT 0
32373: PPUSH
32374: PPUSH
32375: PPUSH
32376: PPUSH
32377: PPUSH
// if not mc_bases then
32378: NOP4
32382: NOT
32383: IFFALSE 32387
// exit ;
32385: GO 32832
// for i = 1 to mc_bases do
32387: NOP4
32391: PUSH
32392: DOUBLE
32393: LD_INT 1
32395: DEC
32396: ST_TO_ADDR
32397: NOP4
32401: PUSH
32402: FOR_TO
32403: IFFALSE 32830
// begin if not mc_produce [ i ] then
32405: NOP4
32409: PUSH
32410: NOP4
32414: ARRAY
32415: NOT
32416: IFFALSE 32420
// continue ;
32418: GO 32402
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32420: NOP4
32424: PUSH
32425: NOP4
32429: PUSH
32430: NOP4
32434: ARRAY
32435: PPUSH
32436: LD_INT 30
32438: PUSH
32439: LD_INT 3
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PPUSH
32446: NOP4
32450: ST_TO_ADDR
// if not fac then
32451: NOP4
32455: NOT
32456: IFFALSE 32460
// continue ;
32458: GO 32402
// for j in fac do
32460: NOP4
32464: PUSH
32465: NOP4
32469: PUSH
32470: FOR_IN
32471: IFFALSE 32826
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
32473: NOP4
32477: PPUSH
32478: NOP4
32482: PUSH
32483: LD_INT 2
32485: NONEQUAL
32486: PUSH
32487: NOP4
32491: PPUSH
32492: LD_INT 15
32494: PPUSH
32495: NOP4
32499: PUSH
32500: LD_INT 4
32502: ARRAY
32503: OR
32504: IFFALSE 32508
// continue ;
32506: GO 32470
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
32508: NOP4
32512: PPUSH
32513: NOP4
32517: PUSH
32518: NOP4
32522: ARRAY
32523: PUSH
32524: LD_INT 1
32526: ARRAY
32527: PUSH
32528: LD_INT 1
32530: ARRAY
32531: PPUSH
32532: NOP4
32536: PUSH
32537: NOP4
32541: ARRAY
32542: PUSH
32543: LD_INT 1
32545: ARRAY
32546: PUSH
32547: LD_INT 2
32549: ARRAY
32550: PPUSH
32551: NOP4
32555: PUSH
32556: NOP4
32560: ARRAY
32561: PUSH
32562: LD_INT 1
32564: ARRAY
32565: PUSH
32566: LD_INT 3
32568: ARRAY
32569: PPUSH
32570: NOP4
32574: PUSH
32575: NOP4
32579: ARRAY
32580: PUSH
32581: LD_INT 1
32583: ARRAY
32584: PUSH
32585: LD_INT 4
32587: ARRAY
32588: PPUSH
32589: NOP4
32593: PUSH
32594: NOP4
32598: PPUSH
32599: NOP4
32603: PUSH
32604: NOP4
32608: ARRAY
32609: PUSH
32610: LD_INT 1
32612: ARRAY
32613: PUSH
32614: LD_INT 1
32616: ARRAY
32617: PUSH
32618: NOP4
32622: PUSH
32623: NOP4
32627: ARRAY
32628: PUSH
32629: LD_INT 1
32631: ARRAY
32632: PUSH
32633: LD_INT 2
32635: ARRAY
32636: PUSH
32637: NOP4
32641: PUSH
32642: NOP4
32646: ARRAY
32647: PUSH
32648: LD_INT 1
32650: ARRAY
32651: PUSH
32652: LD_INT 3
32654: ARRAY
32655: PUSH
32656: NOP4
32660: PUSH
32661: NOP4
32665: ARRAY
32666: PUSH
32667: LD_INT 1
32669: ARRAY
32670: PUSH
32671: LD_INT 4
32673: ARRAY
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: PPUSH
32681: NOP4
32685: AND
32686: IFFALSE 32824
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
32688: NOP4
32692: PPUSH
32693: NOP4
32697: PUSH
32698: NOP4
32702: ARRAY
32703: PUSH
32704: LD_INT 1
32706: ARRAY
32707: PUSH
32708: LD_INT 1
32710: ARRAY
32711: PPUSH
32712: NOP4
32716: PUSH
32717: NOP4
32721: ARRAY
32722: PUSH
32723: LD_INT 1
32725: ARRAY
32726: PUSH
32727: LD_INT 2
32729: ARRAY
32730: PPUSH
32731: NOP4
32735: PUSH
32736: NOP4
32740: ARRAY
32741: PUSH
32742: LD_INT 1
32744: ARRAY
32745: PUSH
32746: LD_INT 3
32748: ARRAY
32749: PPUSH
32750: NOP4
32754: PUSH
32755: NOP4
32759: ARRAY
32760: PUSH
32761: LD_INT 1
32763: ARRAY
32764: PUSH
32765: LD_INT 4
32767: ARRAY
32768: PPUSH
32769: NOP4
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
32773: NOP4
32777: PUSH
32778: NOP4
32782: PUSH
32783: NOP4
32787: ARRAY
32788: PPUSH
32789: LD_INT 1
32791: PPUSH
32792: NOP4
32796: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
32797: NOP4
32801: PUSH
32802: NOP4
32806: PPUSH
32807: NOP4
32811: PPUSH
32812: NOP4
32816: PPUSH
32817: NOP4
32821: ST_TO_ADDR
// break ;
32822: GO 32826
// end ; end ;
32824: GO 32470
32826: POP
32827: POP
// end ;
32828: GO 32402
32830: POP
32831: POP
// end ;
32832: LD_VAR 0 1
32836: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
32837: LD_INT 0
32839: PPUSH
32840: PPUSH
32841: PPUSH
// if not mc_bases then
32842: NOP4
32846: NOT
32847: IFFALSE 32851
// exit ;
32849: GO 32940
// for i = 1 to mc_bases do
32851: NOP4
32855: PUSH
32856: DOUBLE
32857: LD_INT 1
32859: DEC
32860: ST_TO_ADDR
32861: NOP4
32865: PUSH
32866: FOR_TO
32867: IFFALSE 32938
// begin if mc_attack [ i ] then
32869: NOP4
32873: PUSH
32874: NOP4
32878: ARRAY
32879: IFFALSE 32936
// begin tmp := mc_attack [ i ] [ 1 ] ;
32881: NOP4
32885: PUSH
32886: NOP4
32890: PUSH
32891: NOP4
32895: ARRAY
32896: PUSH
32897: LD_INT 1
32899: ARRAY
32900: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
32901: NOP4
32905: PUSH
32906: NOP4
32910: PPUSH
32911: NOP4
32915: PPUSH
32916: EMPTY
32917: PPUSH
32918: NOP4
32922: ST_TO_ADDR
// Attack ( tmp ) ;
32923: NOP4
32927: PPUSH
32928: NOP4
// exit ;
32932: POP
32933: POP
32934: GO 32940
// end ; end ;
32936: GO 32866
32938: POP
32939: POP
// end ;
32940: LD_VAR 0 1
32944: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
32945: LD_INT 0
32947: PPUSH
32948: PPUSH
32949: PPUSH
32950: PPUSH
32951: PPUSH
32952: PPUSH
32953: PPUSH
// if not mc_bases then
32954: NOP4
32958: NOT
32959: IFFALSE 32963
// exit ;
32961: GO 33545
// for i = 1 to mc_bases do
32963: NOP4
32967: PUSH
32968: DOUBLE
32969: LD_INT 1
32971: DEC
32972: ST_TO_ADDR
32973: NOP4
32977: PUSH
32978: FOR_TO
32979: IFFALSE 33543
// begin if not mc_bases [ i ] then
32981: NOP4
32985: PUSH
32986: NOP4
32990: ARRAY
32991: NOT
32992: IFFALSE 32996
// continue ;
32994: GO 32978
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
32996: NOP4
33000: PUSH
33001: NOP4
33005: PUSH
33006: NOP4
33010: ARRAY
33011: PUSH
33012: LD_INT 1
33014: ARRAY
33015: PPUSH
33016: NOP4
33020: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
33021: NOP4
33025: PUSH
33026: NOP4
33030: PPUSH
33031: NOP4
33035: PPUSH
33036: NOP4
33040: PUSH
33041: NOP4
33045: ARRAY
33046: PUSH
33047: LD_INT 1
33049: ARRAY
33050: PPUSH
33051: NOP4
33055: PPUSH
33056: NOP4
33060: PUSH
33061: NOP4
33065: ARRAY
33066: PPUSH
33067: NOP4
33071: PPUSH
33072: NOP4
33076: ST_TO_ADDR
// if not mc_scan [ i ] then
33077: NOP4
33081: PUSH
33082: NOP4
33086: ARRAY
33087: NOT
33088: IFFALSE 33243
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
33090: NOP4
33094: PUSH
33095: NOP4
33099: PUSH
33100: NOP4
33104: ARRAY
33105: PPUSH
33106: LD_INT 2
33108: PUSH
33109: LD_INT 25
33111: PUSH
33112: LD_INT 5
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 25
33121: PUSH
33122: LD_INT 8
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 25
33131: PUSH
33132: LD_INT 9
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: PPUSH
33145: NOP4
33149: ST_TO_ADDR
// if not tmp then
33150: NOP4
33154: NOT
33155: IFFALSE 33159
// continue ;
33157: GO 32978
// for j in tmp do
33159: NOP4
33163: PUSH
33164: NOP4
33168: PUSH
33169: FOR_IN
33170: IFFALSE 33241
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
33172: NOP4
33176: PPUSH
33177: NOP4
33181: PPUSH
33182: NOP4
33186: PUSH
33187: LD_INT 5
33189: EQUAL
33190: PUSH
33191: NOP4
33195: PPUSH
33196: NOP4
33200: PUSH
33201: LD_INT 1
33203: EQUAL
33204: AND
33205: PUSH
33206: NOP4
33210: PPUSH
33211: NOP4
33215: NOT
33216: AND
33217: PUSH
33218: NOP4
33222: AND
33223: IFFALSE 33239
// ComChangeProfession ( j , class ) ;
33225: NOP4
33229: PPUSH
33230: NOP4
33234: PPUSH
33235: NOP4
33239: GO 33169
33241: POP
33242: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
33243: NOP4
33247: PUSH
33248: NOP4
33252: ARRAY
33253: PUSH
33254: NOP4
33258: PUSH
33259: NOP4
33263: ARRAY
33264: NOT
33265: AND
33266: PUSH
33267: NOP4
33271: PUSH
33272: NOP4
33276: ARRAY
33277: PPUSH
33278: LD_INT 30
33280: PUSH
33281: LD_INT 32
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PPUSH
33288: NOP4
33292: NOT
33293: AND
33294: PUSH
33295: NOP4
33299: PUSH
33300: NOP4
33304: ARRAY
33305: PPUSH
33306: LD_INT 2
33308: PUSH
33309: LD_INT 30
33311: PUSH
33312: LD_INT 4
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 30
33321: PUSH
33322: LD_INT 5
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: LIST
33333: PPUSH
33334: NOP4
33338: NOT
33339: AND
33340: IFFALSE 33472
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
33342: NOP4
33346: PUSH
33347: NOP4
33351: PUSH
33352: NOP4
33356: ARRAY
33357: PPUSH
33358: LD_INT 2
33360: PUSH
33361: LD_INT 25
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 25
33373: PUSH
33374: LD_INT 5
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 25
33383: PUSH
33384: LD_INT 8
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 25
33393: PUSH
33394: LD_INT 9
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: PPUSH
33408: NOP4
33412: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
33413: NOP4
33417: PUSH
33418: NOP4
33422: PUSH
33423: NOP4
33427: PPUSH
33428: LD_INT 18
33430: PPUSH
33431: NOP4
33435: DIFF
33436: ST_TO_ADDR
// if tmp then
33437: NOP4
33441: IFFALSE 33472
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
33443: NOP4
33447: PPUSH
33448: NOP4
33452: PPUSH
33453: NOP4
33457: PUSH
33458: NOP4
33462: ARRAY
33463: PPUSH
33464: NOP4
// exit ;
33468: POP
33469: POP
33470: GO 33545
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
33472: NOP4
33476: PUSH
33477: NOP4
33481: ARRAY
33482: PUSH
33483: NOP4
33487: PUSH
33488: NOP4
33492: ARRAY
33493: AND
33494: IFFALSE 33541
// begin tmp := mc_defender [ i ] ;
33496: NOP4
33500: PUSH
33501: NOP4
33505: PUSH
33506: NOP4
33510: ARRAY
33511: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
33512: NOP4
33516: PPUSH
33517: NOP4
33521: PPUSH
33522: NOP4
33526: PUSH
33527: NOP4
33531: ARRAY
33532: PPUSH
33533: NOP4
// exit ;
33537: POP
33538: POP
33539: GO 33545
// end ; end ;
33541: GO 32978
33543: POP
33544: POP
// end ;
33545: LD_VAR 0 1
33549: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
33550: LD_INT 0
33552: PPUSH
33553: PPUSH
33554: PPUSH
33555: PPUSH
33556: PPUSH
33557: PPUSH
33558: PPUSH
33559: PPUSH
33560: PPUSH
33561: PPUSH
33562: PPUSH
// if not mc_bases then
33563: NOP4
33567: NOT
33568: IFFALSE 33572
// exit ;
33570: GO 34659
// for i = 1 to mc_bases do
33572: NOP4
33576: PUSH
33577: DOUBLE
33578: LD_INT 1
33580: DEC
33581: ST_TO_ADDR
33582: NOP4
33586: PUSH
33587: FOR_TO
33588: IFFALSE 34657
// begin tmp := mc_lab [ i ] ;
33590: NOP4
33594: PUSH
33595: NOP4
33599: PUSH
33600: NOP4
33604: ARRAY
33605: ST_TO_ADDR
// if not tmp then
33606: NOP4
33610: NOT
33611: IFFALSE 33615
// continue ;
33613: GO 33587
// idle_lab := 0 ;
33615: NOP4
33619: PUSH
33620: LD_INT 0
33622: ST_TO_ADDR
// for j in tmp do
33623: NOP4
33627: PUSH
33628: NOP4
33632: PUSH
33633: FOR_IN
33634: IFFALSE 34653
// begin researching := false ;
33636: NOP4
33640: PUSH
33641: LD_INT 0
33643: ST_TO_ADDR
// side := GetSide ( j ) ;
33644: NOP4
33648: PUSH
33649: NOP4
33653: PPUSH
33654: NOP4
33658: ST_TO_ADDR
// if not mc_tech [ side ] then
33659: NOP4
33663: PUSH
33664: NOP4
33668: ARRAY
33669: NOT
33670: IFFALSE 33674
// continue ;
33672: GO 33633
// if BuildingStatus ( j ) = bs_idle then
33674: NOP4
33678: PPUSH
33679: NOP4
33683: PUSH
33684: LD_INT 2
33686: EQUAL
33687: IFFALSE 33875
// begin if idle_lab and UnitsInside ( j ) < 6 then
33689: NOP4
33693: PUSH
33694: NOP4
33698: PPUSH
33699: NOP4
33703: PUSH
33704: LD_INT 6
33706: LESS
33707: AND
33708: IFFALSE 33779
// begin tmp2 := UnitsInside ( idle_lab ) ;
33710: NOP4
33714: PUSH
33715: NOP4
33719: PPUSH
33720: NOP4
33724: ST_TO_ADDR
// if tmp2 then
33725: NOP4
33729: IFFALSE 33771
// for x in tmp2 do
33731: NOP4
33735: PUSH
33736: NOP4
33740: PUSH
33741: FOR_IN
33742: IFFALSE 33769
// begin ComExitBuilding ( x ) ;
33744: NOP4
33748: PPUSH
33749: NOP4
// AddComEnterUnit ( x , j ) ;
33753: NOP4
33757: PPUSH
33758: NOP4
33762: PPUSH
33763: NOP4
// end ;
33767: GO 33741
33769: POP
33770: POP
// idle_lab := 0 ;
33771: NOP4
33775: PUSH
33776: LD_INT 0
33778: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
33779: NOP4
33783: PUSH
33784: NOP4
33788: PUSH
33789: NOP4
33793: ARRAY
33794: PUSH
33795: FOR_IN
33796: IFFALSE 33856
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
33798: NOP4
33802: PPUSH
33803: NOP4
33807: PPUSH
33808: NOP4
33812: PUSH
33813: NOP4
33817: PPUSH
33818: NOP4
33822: PPUSH
33823: NOP4
33827: AND
33828: IFFALSE 33854
// begin researching := true ;
33830: NOP4
33834: PUSH
33835: LD_INT 1
33837: ST_TO_ADDR
// ComResearch ( j , t ) ;
33838: NOP4
33842: PPUSH
33843: NOP4
33847: PPUSH
33848: NOP4
// break ;
33852: GO 33856
// end ;
33854: GO 33795
33856: POP
33857: POP
// if not researching then
33858: NOP4
33862: NOT
33863: IFFALSE 33875
// idle_lab := j ;
33865: NOP4
33869: PUSH
33870: NOP4
33874: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
33875: NOP4
33879: PPUSH
33880: NOP4
33884: PUSH
33885: LD_INT 10
33887: EQUAL
33888: IFFALSE 34476
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
33890: NOP4
33894: PUSH
33895: NOP4
33899: ARRAY
33900: NOT
33901: PUSH
33902: NOP4
33906: PUSH
33907: NOP4
33911: ARRAY
33912: NOT
33913: AND
33914: PUSH
33915: NOP4
33919: PUSH
33920: NOP4
33924: ARRAY
33925: PUSH
33926: LD_INT 1
33928: GREATER
33929: AND
33930: IFFALSE 34061
// begin ComCancel ( j ) ;
33932: NOP4
33936: PPUSH
33937: NOP4
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
33941: NOP4
33945: PUSH
33946: NOP4
33950: PPUSH
33951: NOP4
33955: PPUSH
33956: NOP4
33960: PUSH
33961: NOP4
33965: ARRAY
33966: PPUSH
33967: NOP4
33971: PUSH
33972: NOP4
33976: ARRAY
33977: PUSH
33978: LD_INT 1
33980: MINUS
33981: PPUSH
33982: NOP4
33986: PUSH
33987: NOP4
33991: ARRAY
33992: PPUSH
33993: LD_INT 0
33995: PPUSH
33996: NOP4
34000: PPUSH
34001: NOP4
34005: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
34006: NOP4
34010: PUSH
34011: NOP4
34015: PPUSH
34016: NOP4
34020: PPUSH
34021: NOP4
34025: PUSH
34026: NOP4
34030: ARRAY
34031: PPUSH
34032: NOP4
34036: PUSH
34037: NOP4
34041: ARRAY
34042: PPUSH
34043: LD_INT 1
34045: PPUSH
34046: LD_INT 0
34048: PPUSH
34049: NOP4
34053: PPUSH
34054: NOP4
34058: ST_TO_ADDR
// continue ;
34059: GO 33633
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
34061: NOP4
34065: PUSH
34066: NOP4
34070: ARRAY
34071: PUSH
34072: NOP4
34076: PUSH
34077: NOP4
34081: ARRAY
34082: NOT
34083: AND
34084: IFFALSE 34211
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
34086: NOP4
34090: PUSH
34091: NOP4
34095: PPUSH
34096: NOP4
34100: PUSH
34101: NOP4
34105: PUSH
34106: NOP4
34110: ARRAY
34111: PUSH
34112: LD_INT 1
34114: PLUS
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PPUSH
34120: NOP4
34124: PUSH
34125: NOP4
34129: ARRAY
34130: PUSH
34131: LD_INT 1
34133: ARRAY
34134: PPUSH
34135: NOP4
34139: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
34140: NOP4
34144: PUSH
34145: NOP4
34149: ARRAY
34150: PUSH
34151: LD_INT 1
34153: ARRAY
34154: PPUSH
34155: LD_INT 112
34157: PPUSH
34158: NOP4
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
34162: NOP4
34166: PUSH
34167: NOP4
34171: PUSH
34172: NOP4
34176: ARRAY
34177: PPUSH
34178: LD_INT 1
34180: PPUSH
34181: NOP4
34185: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
34186: NOP4
34190: PUSH
34191: NOP4
34195: PPUSH
34196: NOP4
34200: PPUSH
34201: NOP4
34205: PPUSH
34206: NOP4
34210: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
34211: NOP4
34215: PUSH
34216: NOP4
34220: ARRAY
34221: PUSH
34222: NOP4
34226: PUSH
34227: NOP4
34231: ARRAY
34232: AND
34233: PUSH
34234: NOP4
34238: PUSH
34239: NOP4
34243: ARRAY
34244: PUSH
34245: LD_INT 1
34247: ARRAY
34248: PPUSH
34249: NOP4
34253: NOT
34254: AND
34255: PUSH
34256: NOP4
34260: PPUSH
34261: NOP4
34265: PUSH
34266: LD_INT 6
34268: EQUAL
34269: AND
34270: IFFALSE 34326
// begin tmp2 := UnitsInside ( j ) ;
34272: NOP4
34276: PUSH
34277: NOP4
34281: PPUSH
34282: NOP4
34286: ST_TO_ADDR
// if tmp2 = 6 then
34287: NOP4
34291: PUSH
34292: LD_INT 6
34294: EQUAL
34295: IFFALSE 34326
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
34297: NOP4
34301: PUSH
34302: LD_INT 1
34304: ARRAY
34305: PPUSH
34306: LD_INT 112
34308: PPUSH
34309: NOP4
// ComExitBuilding ( tmp2 [ 1 ] ) ;
34313: NOP4
34317: PUSH
34318: LD_INT 1
34320: ARRAY
34321: PPUSH
34322: NOP4
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
34326: NOP4
34330: PUSH
34331: NOP4
34335: ARRAY
34336: PUSH
34337: NOP4
34341: PUSH
34342: NOP4
34346: ARRAY
34347: PUSH
34348: LD_INT 1
34350: ARRAY
34351: PPUSH
34352: NOP4
34356: NOT
34357: AND
34358: PUSH
34359: NOP4
34363: PUSH
34364: NOP4
34368: ARRAY
34369: PUSH
34370: LD_INT 1
34372: ARRAY
34373: PPUSH
34374: NOP4
34378: NOT
34379: AND
34380: IFFALSE 34406
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
34382: NOP4
34386: PUSH
34387: NOP4
34391: ARRAY
34392: PUSH
34393: LD_INT 1
34395: ARRAY
34396: PPUSH
34397: NOP4
34401: PPUSH
34402: NOP4
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
34406: NOP4
34410: PUSH
34411: NOP4
34415: ARRAY
34416: PUSH
34417: LD_INT 1
34419: ARRAY
34420: PPUSH
34421: NOP4
34425: PUSH
34426: NOP4
34430: PUSH
34431: NOP4
34435: ARRAY
34436: PUSH
34437: LD_INT 1
34439: ARRAY
34440: PPUSH
34441: NOP4
34445: PPUSH
34446: NOP4
34450: PUSH
34451: LD_INT 3
34453: NONEQUAL
34454: AND
34455: IFFALSE 34476
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
34457: NOP4
34461: PUSH
34462: NOP4
34466: ARRAY
34467: PUSH
34468: LD_INT 1
34470: ARRAY
34471: PPUSH
34472: NOP4
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
34476: NOP4
34480: PPUSH
34481: NOP4
34485: PUSH
34486: LD_INT 6
34488: EQUAL
34489: PUSH
34490: NOP4
34494: PUSH
34495: LD_INT 1
34497: GREATER
34498: AND
34499: IFFALSE 34651
// begin sci := [ ] ;
34501: NOP4
34505: PUSH
34506: EMPTY
34507: ST_TO_ADDR
// for x in ( tmp diff j ) do
34508: NOP4
34512: PUSH
34513: NOP4
34517: PUSH
34518: NOP4
34522: DIFF
34523: PUSH
34524: FOR_IN
34525: IFFALSE 34577
// begin if sci = 6 then
34527: NOP4
34531: PUSH
34532: LD_INT 6
34534: EQUAL
34535: IFFALSE 34539
// break ;
34537: GO 34577
// if BuildingStatus ( x ) = bs_idle then
34539: NOP4
34543: PPUSH
34544: NOP4
34548: PUSH
34549: LD_INT 2
34551: EQUAL
34552: IFFALSE 34575
// sci := sci ^ UnitsInside ( x ) ;
34554: NOP4
34558: PUSH
34559: NOP4
34563: PUSH
34564: NOP4
34568: PPUSH
34569: NOP4
34573: ADD
34574: ST_TO_ADDR
// end ;
34575: GO 34524
34577: POP
34578: POP
// if not sci then
34579: NOP4
34583: NOT
34584: IFFALSE 34588
// continue ;
34586: GO 33633
// for x in sci do
34588: NOP4
34592: PUSH
34593: NOP4
34597: PUSH
34598: FOR_IN
34599: IFFALSE 34649
// if IsInUnit ( x ) and not HasTask ( x ) then
34601: NOP4
34605: PPUSH
34606: NOP4
34610: PUSH
34611: NOP4
34615: PPUSH
34616: NOP4
34620: NOT
34621: AND
34622: IFFALSE 34647
// begin ComExitBuilding ( x ) ;
34624: NOP4
34628: PPUSH
34629: NOP4
// AddComEnterUnit ( x , j ) ;
34633: NOP4
34637: PPUSH
34638: NOP4
34642: PPUSH
34643: NOP4
// end ;
34647: GO 34598
34649: POP
34650: POP
// end ; end ;
34651: GO 33633
34653: POP
34654: POP
// end ;
34655: GO 33587
34657: POP
34658: POP
// end ;
34659: LD_VAR 0 1
34663: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
34664: LD_INT 0
34666: PPUSH
34667: PPUSH
// if not mc_bases then
34668: NOP4
34672: NOT
34673: IFFALSE 34677
// exit ;
34675: GO 34758
// for i = 1 to mc_bases do
34677: NOP4
34681: PUSH
34682: DOUBLE
34683: LD_INT 1
34685: DEC
34686: ST_TO_ADDR
34687: NOP4
34691: PUSH
34692: FOR_TO
34693: IFFALSE 34756
// if mc_mines [ i ] and mc_miners [ i ] then
34695: NOP4
34699: PUSH
34700: NOP4
34704: ARRAY
34705: PUSH
34706: NOP4
34710: PUSH
34711: NOP4
34715: ARRAY
34716: AND
34717: IFFALSE 34754
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
34719: NOP4
34723: PUSH
34724: NOP4
34728: ARRAY
34729: PUSH
34730: LD_INT 1
34732: ARRAY
34733: PPUSH
34734: NOP4
34738: PPUSH
34739: NOP4
34743: PUSH
34744: NOP4
34748: ARRAY
34749: PPUSH
34750: NOP4
34754: GO 34692
34756: POP
34757: POP
// end ;
34758: LD_VAR 0 1
34762: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
34763: LD_INT 0
34765: PPUSH
34766: PPUSH
34767: PPUSH
34768: PPUSH
34769: PPUSH
34770: PPUSH
34771: PPUSH
34772: PPUSH
// if not mc_bases or not mc_parking then
34773: NOP4
34777: NOT
34778: PUSH
34779: NOP4
34783: NOT
34784: OR
34785: IFFALSE 34789
// exit ;
34787: GO 35488
// for i = 1 to mc_bases do
34789: NOP4
34793: PUSH
34794: DOUBLE
34795: LD_INT 1
34797: DEC
34798: ST_TO_ADDR
34799: NOP4
34803: PUSH
34804: FOR_TO
34805: IFFALSE 35486
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
34807: NOP4
34811: PUSH
34812: NOP4
34816: ARRAY
34817: NOT
34818: PUSH
34819: NOP4
34823: PUSH
34824: NOP4
34828: ARRAY
34829: NOT
34830: OR
34831: IFFALSE 34835
// continue ;
34833: GO 34804
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
34835: NOP4
34839: PUSH
34840: NOP4
34844: PUSH
34845: NOP4
34849: ARRAY
34850: PUSH
34851: LD_INT 1
34853: ARRAY
34854: PPUSH
34855: NOP4
34859: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34860: NOP4
34864: PUSH
34865: NOP4
34869: PUSH
34870: NOP4
34874: ARRAY
34875: PPUSH
34876: LD_INT 30
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PPUSH
34886: NOP4
34890: ST_TO_ADDR
// if not fac then
34891: NOP4
34895: NOT
34896: IFFALSE 34947
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34898: NOP4
34902: PUSH
34903: NOP4
34907: PUSH
34908: NOP4
34912: ARRAY
34913: PPUSH
34914: LD_INT 2
34916: PUSH
34917: LD_INT 30
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 30
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: LIST
34941: PPUSH
34942: NOP4
34946: ST_TO_ADDR
// if not fac then
34947: NOP4
34951: NOT
34952: IFFALSE 34956
// continue ;
34954: GO 34804
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
34956: NOP4
34960: PUSH
34961: NOP4
34965: PUSH
34966: NOP4
34970: ARRAY
34971: PPUSH
34972: LD_INT 22
34974: PUSH
34975: NOP4
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 21
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 3
34996: PUSH
34997: LD_INT 24
34999: PUSH
35000: LD_INT 1000
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: LIST
35015: PPUSH
35016: NOP4
35020: ST_TO_ADDR
// for j in fac do
35021: NOP4
35025: PUSH
35026: NOP4
35030: PUSH
35031: FOR_IN
35032: IFFALSE 35113
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
35034: NOP4
35038: PUSH
35039: NOP4
35043: PUSH
35044: LD_INT 22
35046: PUSH
35047: NOP4
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 91
35058: PUSH
35059: NOP4
35063: PUSH
35064: LD_INT 15
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 21
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 3
35084: PUSH
35085: LD_INT 24
35087: PUSH
35088: LD_INT 1000
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: PPUSH
35105: NOP4
35109: UNION
35110: ST_TO_ADDR
35111: GO 35031
35113: POP
35114: POP
// if not vehs then
35115: NOP4
35119: NOT
35120: IFFALSE 35146
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
35122: NOP4
35126: PUSH
35127: NOP4
35131: PPUSH
35132: NOP4
35136: PPUSH
35137: EMPTY
35138: PPUSH
35139: NOP4
35143: ST_TO_ADDR
// continue ;
35144: GO 34804
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
35146: NOP4
35150: PUSH
35151: NOP4
35155: PUSH
35156: NOP4
35160: ARRAY
35161: PPUSH
35162: LD_INT 30
35164: PUSH
35165: LD_INT 3
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PPUSH
35172: NOP4
35176: ST_TO_ADDR
// if tmp then
35177: NOP4
35181: IFFALSE 35284
// begin for j in tmp do
35183: NOP4
35187: PUSH
35188: NOP4
35192: PUSH
35193: FOR_IN
35194: IFFALSE 35282
// for k in UnitsInside ( j ) do
35196: NOP4
35200: PUSH
35201: NOP4
35205: PPUSH
35206: NOP4
35210: PUSH
35211: FOR_IN
35212: IFFALSE 35278
// if k then
35214: NOP4
35218: IFFALSE 35276
// if not k in mc_repair_vehicle [ i ] then
35220: NOP4
35224: PUSH
35225: NOP4
35229: PUSH
35230: NOP4
35234: ARRAY
35235: IN
35236: NOT
35237: IFFALSE 35276
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
35239: NOP4
35243: PUSH
35244: NOP4
35248: PPUSH
35249: NOP4
35253: PPUSH
35254: NOP4
35258: PUSH
35259: NOP4
35263: ARRAY
35264: PUSH
35265: NOP4
35269: UNION
35270: PPUSH
35271: NOP4
35275: ST_TO_ADDR
35276: GO 35211
35278: POP
35279: POP
35280: GO 35193
35282: POP
35283: POP
// end ; if not mc_repair_vehicle [ i ] then
35284: NOP4
35288: PUSH
35289: NOP4
35293: ARRAY
35294: NOT
35295: IFFALSE 35299
// continue ;
35297: GO 34804
// for j in mc_repair_vehicle [ i ] do
35299: NOP4
35303: PUSH
35304: NOP4
35308: PUSH
35309: NOP4
35313: ARRAY
35314: PUSH
35315: FOR_IN
35316: IFFALSE 35482
// begin if GetClass ( j ) <> 3 then
35318: NOP4
35322: PPUSH
35323: NOP4
35327: PUSH
35328: LD_INT 3
35330: NONEQUAL
35331: IFFALSE 35372
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
35333: NOP4
35337: PUSH
35338: NOP4
35342: PPUSH
35343: NOP4
35347: PPUSH
35348: NOP4
35352: PUSH
35353: NOP4
35357: ARRAY
35358: PUSH
35359: NOP4
35363: DIFF
35364: PPUSH
35365: NOP4
35369: ST_TO_ADDR
// continue ;
35370: GO 35315
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
35372: NOP4
35376: PPUSH
35377: NOP4
35381: NOT
35382: PUSH
35383: NOP4
35387: PUSH
35388: NOP4
35392: PUSH
35393: NOP4
35397: ARRAY
35398: PUSH
35399: LD_INT 1
35401: ARRAY
35402: IN
35403: NOT
35404: AND
35405: PUSH
35406: NOP4
35410: PUSH
35411: NOP4
35415: PUSH
35416: NOP4
35420: ARRAY
35421: PUSH
35422: LD_INT 2
35424: ARRAY
35425: IN
35426: NOT
35427: AND
35428: IFFALSE 35480
// begin if IsInUnit ( j ) then
35430: NOP4
35434: PPUSH
35435: NOP4
35439: IFFALSE 35450
// ComExitBuilding ( j ) ;
35441: NOP4
35445: PPUSH
35446: NOP4
// if not HasTask ( j ) then
35450: NOP4
35454: PPUSH
35455: NOP4
35459: NOT
35460: IFFALSE 35480
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
35462: NOP4
35466: PPUSH
35467: NOP4
35471: PUSH
35472: LD_INT 1
35474: ARRAY
35475: PPUSH
35476: NOP4
// end ; end ;
35480: GO 35315
35482: POP
35483: POP
// end ;
35484: GO 34804
35486: POP
35487: POP
// end ;
35488: LD_VAR 0 1
35492: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
35493: LD_INT 0
35495: PPUSH
35496: PPUSH
35497: PPUSH
35498: PPUSH
35499: PPUSH
35500: PPUSH
35501: PPUSH
35502: PPUSH
35503: PPUSH
35504: PPUSH
35505: PPUSH
// if not mc_bases then
35506: NOP4
35510: NOT
35511: IFFALSE 35515
// exit ;
35513: GO 36317
// for i = 1 to mc_bases do
35515: NOP4
35519: PUSH
35520: DOUBLE
35521: LD_INT 1
35523: DEC
35524: ST_TO_ADDR
35525: NOP4
35529: PUSH
35530: FOR_TO
35531: IFFALSE 36315
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
35533: NOP4
35537: PUSH
35538: NOP4
35542: ARRAY
35543: NOT
35544: PUSH
35545: NOP4
35549: PUSH
35550: NOP4
35554: ARRAY
35555: PUSH
35556: LD_INT 1
35558: ARRAY
35559: OR
35560: PUSH
35561: NOP4
35565: PUSH
35566: NOP4
35570: ARRAY
35571: PUSH
35572: LD_INT 2
35574: ARRAY
35575: OR
35576: PUSH
35577: NOP4
35581: PUSH
35582: NOP4
35586: ARRAY
35587: PPUSH
35588: LD_INT 1
35590: PPUSH
35591: NOP4
35595: NOT
35596: OR
35597: PUSH
35598: NOP4
35602: PUSH
35603: NOP4
35607: ARRAY
35608: OR
35609: IFFALSE 35613
// continue ;
35611: GO 35530
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
35613: NOP4
35617: PUSH
35618: NOP4
35622: PUSH
35623: NOP4
35627: ARRAY
35628: PPUSH
35629: LD_INT 25
35631: PUSH
35632: LD_INT 4
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 50
35641: PUSH
35642: EMPTY
35643: LIST
35644: PUSH
35645: LD_INT 3
35647: PUSH
35648: LD_INT 60
35650: PUSH
35651: EMPTY
35652: LIST
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: LIST
35662: PPUSH
35663: NOP4
35667: PUSH
35668: NOP4
35672: PUSH
35673: NOP4
35677: ARRAY
35678: DIFF
35679: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35680: NOP4
35684: PUSH
35685: NOP4
35689: PUSH
35690: NOP4
35694: ARRAY
35695: PPUSH
35696: LD_INT 2
35698: PUSH
35699: LD_INT 30
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 30
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: PPUSH
35724: NOP4
35728: ST_TO_ADDR
// if not tmp or not dep then
35729: NOP4
35733: NOT
35734: PUSH
35735: NOP4
35739: NOT
35740: OR
35741: IFFALSE 35745
// continue ;
35743: GO 35530
// side := GetSide ( tmp [ 1 ] ) ;
35745: NOP4
35749: PUSH
35750: NOP4
35754: PUSH
35755: LD_INT 1
35757: ARRAY
35758: PPUSH
35759: NOP4
35763: ST_TO_ADDR
// dep := dep [ 1 ] ;
35764: NOP4
35768: PUSH
35769: NOP4
35773: PUSH
35774: LD_INT 1
35776: ARRAY
35777: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
35778: NOP4
35782: PUSH
35783: NOP4
35787: PUSH
35788: NOP4
35792: ARRAY
35793: PPUSH
35794: LD_INT 22
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 25
35806: PUSH
35807: LD_INT 12
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PPUSH
35818: NOP4
35822: PUSH
35823: LD_INT 22
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 25
35835: PUSH
35836: LD_INT 12
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 91
35845: PUSH
35846: NOP4
35850: PUSH
35851: LD_INT 20
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: LIST
35863: PPUSH
35864: NOP4
35868: UNION
35869: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
35870: NOP4
35874: PUSH
35875: NOP4
35879: PUSH
35880: NOP4
35884: ARRAY
35885: PPUSH
35886: LD_INT 81
35888: PUSH
35889: NOP4
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PPUSH
35898: NOP4
35902: ST_TO_ADDR
// if not apes or danger_at_area then
35903: NOP4
35907: NOT
35908: PUSH
35909: NOP4
35913: OR
35914: IFFALSE 35964
// begin if mc_taming [ i ] then
35916: NOP4
35920: PUSH
35921: NOP4
35925: ARRAY
35926: IFFALSE 35962
// begin MC_Reset ( i , 121 ) ;
35928: NOP4
35932: PPUSH
35933: LD_INT 121
35935: PPUSH
35936: NOP4
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
35940: NOP4
35944: PUSH
35945: NOP4
35949: PPUSH
35950: NOP4
35954: PPUSH
35955: EMPTY
35956: PPUSH
35957: NOP4
35961: ST_TO_ADDR
// end ; continue ;
35962: GO 35530
// end ; for j in tmp do
35964: NOP4
35968: PUSH
35969: NOP4
35973: PUSH
35974: FOR_IN
35975: IFFALSE 36311
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
35977: NOP4
35981: PUSH
35982: NOP4
35986: PUSH
35987: NOP4
35991: ARRAY
35992: IN
35993: NOT
35994: PUSH
35995: NOP4
35999: PUSH
36000: NOP4
36004: ARRAY
36005: PUSH
36006: LD_INT 3
36008: LESS
36009: AND
36010: IFFALSE 36068
// begin SetTag ( j , 121 ) ;
36012: NOP4
36016: PPUSH
36017: LD_INT 121
36019: PPUSH
36020: NOP4
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
36024: NOP4
36028: PUSH
36029: NOP4
36033: PPUSH
36034: NOP4
36038: PUSH
36039: NOP4
36043: PUSH
36044: NOP4
36048: ARRAY
36049: PUSH
36050: LD_INT 1
36052: PLUS
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PPUSH
36058: NOP4
36062: PPUSH
36063: NOP4
36067: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
36068: NOP4
36072: PUSH
36073: NOP4
36077: PUSH
36078: NOP4
36082: ARRAY
36083: IN
36084: IFFALSE 36309
// begin if GetClass ( j ) <> 4 then
36086: NOP4
36090: PPUSH
36091: NOP4
36095: PUSH
36096: LD_INT 4
36098: NONEQUAL
36099: IFFALSE 36152
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
36101: NOP4
36105: PUSH
36106: NOP4
36110: PPUSH
36111: NOP4
36115: PPUSH
36116: NOP4
36120: PUSH
36121: NOP4
36125: ARRAY
36126: PUSH
36127: NOP4
36131: DIFF
36132: PPUSH
36133: NOP4
36137: ST_TO_ADDR
// SetTag ( j , 0 ) ;
36138: NOP4
36142: PPUSH
36143: LD_INT 0
36145: PPUSH
36146: NOP4
// continue ;
36150: GO 35974
// end ; if IsInUnit ( j ) then
36152: NOP4
36156: PPUSH
36157: NOP4
36161: IFFALSE 36172
// ComExitBuilding ( j ) ;
36163: NOP4
36167: PPUSH
36168: NOP4
// ape := NearestUnitToUnit ( apes , j ) ;
36172: NOP4
36176: PUSH
36177: NOP4
36181: PPUSH
36182: NOP4
36186: PPUSH
36187: NOP4
36191: ST_TO_ADDR
// if not ape then
36192: NOP4
36196: NOT
36197: IFFALSE 36201
// break ;
36199: GO 36311
// x := GetX ( ape ) ;
36201: NOP4
36205: PUSH
36206: NOP4
36210: PPUSH
36211: NOP4
36215: ST_TO_ADDR
// y := GetY ( ape ) ;
36216: NOP4
36220: PUSH
36221: NOP4
36225: PPUSH
36226: NOP4
36230: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36231: NOP4
36235: PPUSH
36236: NOP4
36240: PPUSH
36241: NOP4
36245: NOT
36246: PUSH
36247: NOP4
36251: PPUSH
36252: NOP4
36256: PPUSH
36257: NOP4
36261: PPUSH
36262: LD_INT 20
36264: PPUSH
36265: NOP4
36269: PUSH
36270: LD_INT 4
36272: ARRAY
36273: OR
36274: IFFALSE 36278
// break ;
36276: GO 36311
// if not HasTask ( j ) then
36278: NOP4
36282: PPUSH
36283: NOP4
36287: NOT
36288: IFFALSE 36309
// ComTameXY ( j , x , y ) ;
36290: NOP4
36294: PPUSH
36295: NOP4
36299: PPUSH
36300: NOP4
36304: PPUSH
36305: NOP4
// end ; end ;
36309: GO 35974
36311: POP
36312: POP
// end ;
36313: GO 35530
36315: POP
36316: POP
// end ;
36317: LD_VAR 0 1
36321: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
36322: LD_INT 0
36324: PPUSH
36325: PPUSH
36326: PPUSH
36327: PPUSH
36328: PPUSH
36329: PPUSH
36330: PPUSH
36331: PPUSH
// if not mc_bases then
36332: NOP4
36336: NOT
36337: IFFALSE 36341
// exit ;
36339: GO 36967
// for i = 1 to mc_bases do
36341: NOP4
36345: PUSH
36346: DOUBLE
36347: LD_INT 1
36349: DEC
36350: ST_TO_ADDR
36351: NOP4
36355: PUSH
36356: FOR_TO
36357: IFFALSE 36965
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
36359: NOP4
36363: PUSH
36364: NOP4
36368: ARRAY
36369: NOT
36370: PUSH
36371: NOP4
36375: PUSH
36376: NOP4
36380: ARRAY
36381: PPUSH
36382: LD_INT 25
36384: PUSH
36385: LD_INT 12
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PPUSH
36392: NOP4
36396: NOT
36397: OR
36398: IFFALSE 36402
// continue ;
36400: GO 36356
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
36402: NOP4
36406: PUSH
36407: NOP4
36411: PUSH
36412: NOP4
36416: ARRAY
36417: PUSH
36418: LD_INT 1
36420: ARRAY
36421: PPUSH
36422: NOP4
36426: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
36427: NOP4
36431: PPUSH
36432: LD_INT 2
36434: PPUSH
36435: NOP4
36439: IFFALSE 36692
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36441: NOP4
36445: PUSH
36446: NOP4
36450: PUSH
36451: NOP4
36455: ARRAY
36456: PPUSH
36457: LD_INT 25
36459: PUSH
36460: LD_INT 16
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PPUSH
36467: NOP4
36471: ST_TO_ADDR
// if tmp < 6 then
36472: NOP4
36476: PUSH
36477: LD_INT 6
36479: LESS
36480: IFFALSE 36692
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
36482: NOP4
36486: PUSH
36487: NOP4
36491: PUSH
36492: NOP4
36496: ARRAY
36497: PPUSH
36498: LD_INT 2
36500: PUSH
36501: LD_INT 30
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 30
36513: PUSH
36514: LD_INT 1
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: PPUSH
36526: NOP4
36530: ST_TO_ADDR
// if depot then
36531: NOP4
36535: IFFALSE 36692
// begin selected := 0 ;
36537: NOP4
36541: PUSH
36542: LD_INT 0
36544: ST_TO_ADDR
// for j in depot do
36545: NOP4
36549: PUSH
36550: NOP4
36554: PUSH
36555: FOR_IN
36556: IFFALSE 36587
// begin if UnitsInside ( j ) < 6 then
36558: NOP4
36562: PPUSH
36563: NOP4
36567: PUSH
36568: LD_INT 6
36570: LESS
36571: IFFALSE 36585
// begin selected := j ;
36573: NOP4
36577: PUSH
36578: NOP4
36582: ST_TO_ADDR
// break ;
36583: GO 36587
// end ; end ;
36585: GO 36555
36587: POP
36588: POP
// if selected then
36589: NOP4
36593: IFFALSE 36692
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36595: NOP4
36599: PUSH
36600: NOP4
36604: PUSH
36605: NOP4
36609: ARRAY
36610: PPUSH
36611: LD_INT 25
36613: PUSH
36614: LD_INT 12
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PPUSH
36621: NOP4
36625: PUSH
36626: FOR_IN
36627: IFFALSE 36690
// if not HasTask ( j ) then
36629: NOP4
36633: PPUSH
36634: NOP4
36638: NOT
36639: IFFALSE 36688
// begin if not IsInUnit ( j ) then
36641: NOP4
36645: PPUSH
36646: NOP4
36650: NOT
36651: IFFALSE 36667
// ComEnterUnit ( j , selected ) ;
36653: NOP4
36657: PPUSH
36658: NOP4
36662: PPUSH
36663: NOP4
// AddComChangeProfession ( j , 16 ) ;
36667: NOP4
36671: PPUSH
36672: LD_INT 16
36674: PPUSH
36675: NOP4
// AddComExitBuilding ( j ) ;
36679: NOP4
36683: PPUSH
36684: NOP4
// end ;
36688: GO 36626
36690: POP
36691: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
36692: NOP4
36696: PPUSH
36697: LD_INT 11
36699: PPUSH
36700: NOP4
36704: IFFALSE 36963
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36706: NOP4
36710: PUSH
36711: NOP4
36715: PUSH
36716: NOP4
36720: ARRAY
36721: PPUSH
36722: LD_INT 25
36724: PUSH
36725: LD_INT 16
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PPUSH
36732: NOP4
36736: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
36737: NOP4
36741: PUSH
36742: LD_INT 6
36744: GREATEREQUAL
36745: PUSH
36746: NOP4
36750: PPUSH
36751: LD_INT 2
36753: PPUSH
36754: NOP4
36758: NOT
36759: OR
36760: IFFALSE 36963
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
36762: NOP4
36766: PUSH
36767: NOP4
36771: PUSH
36772: NOP4
36776: ARRAY
36777: PPUSH
36778: LD_INT 2
36780: PUSH
36781: LD_INT 30
36783: PUSH
36784: LD_INT 4
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 30
36793: PUSH
36794: LD_INT 5
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: PPUSH
36806: NOP4
36810: ST_TO_ADDR
// if barracks then
36811: NOP4
36815: IFFALSE 36963
// begin selected := 0 ;
36817: NOP4
36821: PUSH
36822: LD_INT 0
36824: ST_TO_ADDR
// for j in barracks do
36825: NOP4
36829: PUSH
36830: NOP4
36834: PUSH
36835: FOR_IN
36836: IFFALSE 36867
// begin if UnitsInside ( j ) < 6 then
36838: NOP4
36842: PPUSH
36843: NOP4
36847: PUSH
36848: LD_INT 6
36850: LESS
36851: IFFALSE 36865
// begin selected := j ;
36853: NOP4
36857: PUSH
36858: NOP4
36862: ST_TO_ADDR
// break ;
36863: GO 36867
// end ; end ;
36865: GO 36835
36867: POP
36868: POP
// if selected then
36869: NOP4
36873: IFFALSE 36963
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36875: NOP4
36879: PUSH
36880: NOP4
36884: PUSH
36885: NOP4
36889: ARRAY
36890: PPUSH
36891: LD_INT 25
36893: PUSH
36894: LD_INT 12
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PPUSH
36901: NOP4
36905: PUSH
36906: FOR_IN
36907: IFFALSE 36961
// if not IsInUnit ( j ) and not HasTask ( j ) then
36909: NOP4
36913: PPUSH
36914: NOP4
36918: NOT
36919: PUSH
36920: NOP4
36924: PPUSH
36925: NOP4
36929: NOT
36930: AND
36931: IFFALSE 36959
// begin ComEnterUnit ( j , selected ) ;
36933: NOP4
36937: PPUSH
36938: NOP4
36942: PPUSH
36943: NOP4
// AddComChangeProfession ( j , 15 ) ;
36947: NOP4
36951: PPUSH
36952: LD_INT 15
36954: PPUSH
36955: NOP4
// end ;
36959: GO 36906
36961: POP
36962: POP
// end ; end ; end ; end ; end ;
36963: GO 36356
36965: POP
36966: POP
// end ;
36967: LD_VAR 0 1
36971: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
36972: LD_INT 0
36974: PPUSH
36975: PPUSH
36976: PPUSH
36977: PPUSH
// if not mc_bases then
36978: NOP4
36982: NOT
36983: IFFALSE 36987
// exit ;
36985: GO 37165
// for i = 1 to mc_bases do
36987: NOP4
36991: PUSH
36992: DOUBLE
36993: LD_INT 1
36995: DEC
36996: ST_TO_ADDR
36997: NOP4
37001: PUSH
37002: FOR_TO
37003: IFFALSE 37163
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
37005: NOP4
37009: PUSH
37010: NOP4
37014: PUSH
37015: NOP4
37019: ARRAY
37020: PPUSH
37021: LD_INT 25
37023: PUSH
37024: LD_INT 9
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PPUSH
37031: NOP4
37035: ST_TO_ADDR
// if not tmp then
37036: NOP4
37040: NOT
37041: IFFALSE 37045
// continue ;
37043: GO 37002
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
37045: NOP4
37049: PUSH
37050: NOP4
37054: ARRAY
37055: PPUSH
37056: LD_INT 29
37058: PPUSH
37059: NOP4
37063: NOT
37064: PUSH
37065: NOP4
37069: PUSH
37070: NOP4
37074: ARRAY
37075: PPUSH
37076: LD_INT 28
37078: PPUSH
37079: NOP4
37083: NOT
37084: AND
37085: IFFALSE 37089
// continue ;
37087: GO 37002
// for j in tmp do
37089: NOP4
37093: PUSH
37094: NOP4
37098: PUSH
37099: FOR_IN
37100: IFFALSE 37159
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
37102: NOP4
37106: PUSH
37107: NOP4
37111: PUSH
37112: NOP4
37116: ARRAY
37117: PUSH
37118: LD_INT 1
37120: ARRAY
37121: IN
37122: NOT
37123: PUSH
37124: NOP4
37128: PUSH
37129: NOP4
37133: PUSH
37134: NOP4
37138: ARRAY
37139: PUSH
37140: LD_INT 2
37142: ARRAY
37143: IN
37144: NOT
37145: AND
37146: IFFALSE 37157
// ComSpaceTimeShoot ( j ) ;
37148: NOP4
37152: PPUSH
37153: NOP4
37157: GO 37099
37159: POP
37160: POP
// end ;
37161: GO 37002
37163: POP
37164: POP
// end ;
37165: LD_VAR 0 1
37169: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
37170: LD_INT 0
37172: PPUSH
37173: PPUSH
37174: PPUSH
37175: PPUSH
37176: PPUSH
37177: PPUSH
37178: PPUSH
37179: PPUSH
37180: PPUSH
// if not mc_bases then
37181: NOP4
37185: NOT
37186: IFFALSE 37190
// exit ;
37188: GO 37812
// for i = 1 to mc_bases do
37190: NOP4
37194: PUSH
37195: DOUBLE
37196: LD_INT 1
37198: DEC
37199: ST_TO_ADDR
37200: NOP4
37204: PUSH
37205: FOR_TO
37206: IFFALSE 37810
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
37208: NOP4
37212: PUSH
37213: NOP4
37217: ARRAY
37218: NOT
37219: PUSH
37220: LD_INT 38
37222: PPUSH
37223: NOP4
37227: PUSH
37228: NOP4
37232: ARRAY
37233: PPUSH
37234: NOP4
37238: PUSH
37239: LD_INT 2
37241: NONEQUAL
37242: OR
37243: IFFALSE 37247
// continue ;
37245: GO 37205
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
37247: NOP4
37251: PUSH
37252: NOP4
37256: PUSH
37257: NOP4
37261: ARRAY
37262: PPUSH
37263: LD_INT 30
37265: PUSH
37266: LD_INT 34
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PPUSH
37273: NOP4
37277: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
37278: NOP4
37282: PUSH
37283: NOP4
37287: PUSH
37288: NOP4
37292: ARRAY
37293: PPUSH
37294: LD_INT 25
37296: PUSH
37297: LD_INT 4
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PPUSH
37304: NOP4
37308: PPUSH
37309: LD_INT 0
37311: PPUSH
37312: NOP4
37316: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
37317: NOP4
37321: NOT
37322: PUSH
37323: NOP4
37327: NOT
37328: OR
37329: PUSH
37330: NOP4
37334: PUSH
37335: NOP4
37339: ARRAY
37340: PPUSH
37341: LD_INT 124
37343: PPUSH
37344: NOP4
37348: OR
37349: IFFALSE 37353
// continue ;
37351: GO 37205
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
37353: NOP4
37357: PUSH
37358: NOP4
37362: ARRAY
37363: PUSH
37364: NOP4
37368: PUSH
37369: NOP4
37373: ARRAY
37374: LESS
37375: PUSH
37376: NOP4
37380: PUSH
37381: NOP4
37385: ARRAY
37386: PUSH
37387: NOP4
37391: LESS
37392: AND
37393: IFFALSE 37808
// begin tmp := sci [ 1 ] ;
37395: NOP4
37399: PUSH
37400: NOP4
37404: PUSH
37405: LD_INT 1
37407: ARRAY
37408: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
37409: NOP4
37413: PPUSH
37414: LD_INT 124
37416: PPUSH
37417: NOP4
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
37421: NOP4
37425: PUSH
37426: DOUBLE
37427: NOP4
37431: PUSH
37432: NOP4
37436: ARRAY
37437: INC
37438: ST_TO_ADDR
37439: NOP4
37443: PUSH
37444: NOP4
37448: ARRAY
37449: PUSH
37450: FOR_DOWNTO
37451: IFFALSE 37794
// begin if IsInUnit ( tmp ) then
37453: NOP4
37457: PPUSH
37458: NOP4
37462: IFFALSE 37473
// ComExitBuilding ( tmp ) ;
37464: NOP4
37468: PPUSH
37469: NOP4
// repeat wait ( 0 0$1 ) ;
37473: LD_INT 35
37475: PPUSH
37476: NOP4
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
37480: NOP4
37484: PPUSH
37485: NOP4
37489: NOT
37490: PUSH
37491: NOP4
37495: PPUSH
37496: NOP4
37500: NOT
37501: AND
37502: IFFALSE 37473
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
37504: NOP4
37508: PUSH
37509: NOP4
37513: PPUSH
37514: NOP4
37518: PUSH
37519: NOP4
37523: PPUSH
37524: NOP4
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37533: LD_INT 35
37535: PPUSH
37536: NOP4
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
37540: NOP4
37544: PUSH
37545: NOP4
37549: PUSH
37550: NOP4
37554: ARRAY
37555: PUSH
37556: NOP4
37560: ARRAY
37561: PUSH
37562: LD_INT 1
37564: ARRAY
37565: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
37566: NOP4
37570: PUSH
37571: NOP4
37575: PUSH
37576: NOP4
37580: ARRAY
37581: PUSH
37582: NOP4
37586: ARRAY
37587: PUSH
37588: LD_INT 2
37590: ARRAY
37591: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
37592: NOP4
37596: PPUSH
37597: LD_INT 10
37599: PPUSH
37600: NOP4
37604: PUSH
37605: LD_INT 4
37607: ARRAY
37608: IFFALSE 37646
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
37610: NOP4
37614: PPUSH
37615: NOP4
37619: PUSH
37620: LD_INT 1
37622: ARRAY
37623: PPUSH
37624: NOP4
37628: PUSH
37629: LD_INT 2
37631: ARRAY
37632: PPUSH
37633: NOP4
// wait ( 0 0$10 ) ;
37637: LD_INT 350
37639: PPUSH
37640: NOP4
// end else
37644: GO 37672
// begin ComMoveXY ( tmp , x , y ) ;
37646: NOP4
37650: PPUSH
37651: NOP4
37655: PPUSH
37656: NOP4
37660: PPUSH
37661: NOP4
// wait ( 0 0$3 ) ;
37665: LD_INT 105
37667: PPUSH
37668: NOP4
// end ; until IsAt ( tmp , x , y ) ;
37672: NOP4
37676: PPUSH
37677: NOP4
37681: PPUSH
37682: NOP4
37686: PPUSH
37687: NOP4
37691: IFFALSE 37533
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
37693: NOP4
37697: PPUSH
37698: NOP4
37702: PPUSH
37703: NOP4
37707: PPUSH
37708: NOP4
37712: PUSH
37713: NOP4
37717: ARRAY
37718: PPUSH
37719: NOP4
// repeat wait ( 0 0$1 ) ;
37723: LD_INT 35
37725: PPUSH
37726: NOP4
// until not HasTask ( tmp ) ;
37730: NOP4
37734: PPUSH
37735: NOP4
37739: NOT
37740: IFFALSE 37723
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
37742: NOP4
37746: PUSH
37747: NOP4
37751: PPUSH
37752: NOP4
37756: PUSH
37757: NOP4
37761: PUSH
37762: NOP4
37766: ARRAY
37767: PUSH
37768: LD_INT 1
37770: PLUS
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PPUSH
37776: NOP4
37780: PUSH
37781: NOP4
37785: ARRAY
37786: PPUSH
37787: NOP4
37791: ST_TO_ADDR
// end ;
37792: GO 37450
37794: POP
37795: POP
// MC_Reset ( i , 124 ) ;
37796: NOP4
37800: PPUSH
37801: LD_INT 124
37803: PPUSH
37804: NOP4
// end ; end ;
37808: GO 37205
37810: POP
37811: POP
// end ;
37812: LD_VAR 0 1
37816: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
37817: LD_INT 0
37819: PPUSH
37820: PPUSH
37821: PPUSH
// if not mc_bases then
37822: NOP4
37826: NOT
37827: IFFALSE 37831
// exit ;
37829: GO 38437
// for i = 1 to mc_bases do
37831: NOP4
37835: PUSH
37836: DOUBLE
37837: LD_INT 1
37839: DEC
37840: ST_TO_ADDR
37841: NOP4
37845: PUSH
37846: FOR_TO
37847: IFFALSE 38435
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
37849: NOP4
37853: PUSH
37854: NOP4
37858: PUSH
37859: NOP4
37863: ARRAY
37864: PPUSH
37865: LD_INT 25
37867: PUSH
37868: LD_INT 4
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PPUSH
37875: NOP4
37879: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
37880: NOP4
37884: NOT
37885: PUSH
37886: NOP4
37890: PUSH
37891: NOP4
37895: ARRAY
37896: NOT
37897: OR
37898: PUSH
37899: NOP4
37903: PUSH
37904: NOP4
37908: ARRAY
37909: PPUSH
37910: LD_INT 2
37912: PUSH
37913: LD_INT 30
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 30
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: PPUSH
37938: NOP4
37942: NOT
37943: OR
37944: IFFALSE 37994
// begin if mc_deposits_finder [ i ] then
37946: NOP4
37950: PUSH
37951: NOP4
37955: ARRAY
37956: IFFALSE 37992
// begin MC_Reset ( i , 125 ) ;
37958: NOP4
37962: PPUSH
37963: LD_INT 125
37965: PPUSH
37966: NOP4
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
37970: NOP4
37974: PUSH
37975: NOP4
37979: PPUSH
37980: NOP4
37984: PPUSH
37985: EMPTY
37986: PPUSH
37987: NOP4
37991: ST_TO_ADDR
// end ; continue ;
37992: GO 37846
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
37994: NOP4
37998: PUSH
37999: NOP4
38003: ARRAY
38004: PUSH
38005: LD_INT 1
38007: ARRAY
38008: PUSH
38009: LD_INT 3
38011: ARRAY
38012: PUSH
38013: LD_INT 1
38015: EQUAL
38016: PUSH
38017: LD_INT 20
38019: PPUSH
38020: NOP4
38024: PUSH
38025: NOP4
38029: ARRAY
38030: PPUSH
38031: NOP4
38035: PUSH
38036: LD_INT 2
38038: NONEQUAL
38039: AND
38040: IFFALSE 38090
// begin if mc_deposits_finder [ i ] then
38042: NOP4
38046: PUSH
38047: NOP4
38051: ARRAY
38052: IFFALSE 38088
// begin MC_Reset ( i , 125 ) ;
38054: NOP4
38058: PPUSH
38059: LD_INT 125
38061: PPUSH
38062: NOP4
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
38066: NOP4
38070: PUSH
38071: NOP4
38075: PPUSH
38076: NOP4
38080: PPUSH
38081: EMPTY
38082: PPUSH
38083: NOP4
38087: ST_TO_ADDR
// end ; continue ;
38088: GO 37846
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
38090: NOP4
38094: PUSH
38095: NOP4
38099: ARRAY
38100: PUSH
38101: LD_INT 1
38103: ARRAY
38104: PUSH
38105: LD_INT 1
38107: ARRAY
38108: PPUSH
38109: NOP4
38113: PUSH
38114: NOP4
38118: ARRAY
38119: PUSH
38120: LD_INT 1
38122: ARRAY
38123: PUSH
38124: LD_INT 2
38126: ARRAY
38127: PPUSH
38128: NOP4
38132: PUSH
38133: NOP4
38137: ARRAY
38138: PPUSH
38139: NOP4
38143: IFFALSE 38186
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
38145: NOP4
38149: PUSH
38150: NOP4
38154: PPUSH
38155: NOP4
38159: PPUSH
38160: NOP4
38164: PUSH
38165: NOP4
38169: ARRAY
38170: PPUSH
38171: LD_INT 1
38173: PPUSH
38174: NOP4
38178: PPUSH
38179: NOP4
38183: ST_TO_ADDR
38184: GO 38433
// begin if not mc_deposits_finder [ i ] then
38186: NOP4
38190: PUSH
38191: NOP4
38195: ARRAY
38196: NOT
38197: IFFALSE 38249
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
38199: NOP4
38203: PUSH
38204: NOP4
38208: PPUSH
38209: NOP4
38213: PPUSH
38214: NOP4
38218: PUSH
38219: LD_INT 1
38221: ARRAY
38222: PUSH
38223: EMPTY
38224: LIST
38225: PPUSH
38226: NOP4
38230: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
38231: NOP4
38235: PUSH
38236: LD_INT 1
38238: ARRAY
38239: PPUSH
38240: LD_INT 125
38242: PPUSH
38243: NOP4
// end else
38247: GO 38433
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
38249: NOP4
38253: PUSH
38254: NOP4
38258: ARRAY
38259: PUSH
38260: LD_INT 1
38262: ARRAY
38263: PPUSH
38264: NOP4
38268: IFFALSE 38291
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
38270: NOP4
38274: PUSH
38275: NOP4
38279: ARRAY
38280: PUSH
38281: LD_INT 1
38283: ARRAY
38284: PPUSH
38285: NOP4
38289: GO 38433
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
38291: NOP4
38295: PUSH
38296: NOP4
38300: ARRAY
38301: PUSH
38302: LD_INT 1
38304: ARRAY
38305: PPUSH
38306: NOP4
38310: NOT
38311: PUSH
38312: NOP4
38316: PUSH
38317: NOP4
38321: ARRAY
38322: PUSH
38323: LD_INT 1
38325: ARRAY
38326: PPUSH
38327: NOP4
38331: PUSH
38332: NOP4
38336: ARRAY
38337: PUSH
38338: LD_INT 1
38340: ARRAY
38341: PUSH
38342: LD_INT 1
38344: ARRAY
38345: PPUSH
38346: NOP4
38350: PUSH
38351: NOP4
38355: ARRAY
38356: PUSH
38357: LD_INT 1
38359: ARRAY
38360: PUSH
38361: LD_INT 2
38363: ARRAY
38364: PPUSH
38365: NOP4
38369: PUSH
38370: LD_INT 6
38372: GREATER
38373: AND
38374: IFFALSE 38433
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
38376: NOP4
38380: PUSH
38381: NOP4
38385: ARRAY
38386: PUSH
38387: LD_INT 1
38389: ARRAY
38390: PPUSH
38391: NOP4
38395: PUSH
38396: NOP4
38400: ARRAY
38401: PUSH
38402: LD_INT 1
38404: ARRAY
38405: PUSH
38406: LD_INT 1
38408: ARRAY
38409: PPUSH
38410: NOP4
38414: PUSH
38415: NOP4
38419: ARRAY
38420: PUSH
38421: LD_INT 1
38423: ARRAY
38424: PUSH
38425: LD_INT 2
38427: ARRAY
38428: PPUSH
38429: NOP4
// end ; end ; end ;
38433: GO 37846
38435: POP
38436: POP
// end ;
38437: LD_VAR 0 1
38441: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
38442: LD_INT 0
38444: PPUSH
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
38451: PPUSH
38452: PPUSH
38453: PPUSH
38454: PPUSH
// if not mc_bases then
38455: NOP4
38459: NOT
38460: IFFALSE 38464
// exit ;
38462: GO 39404
// for i = 1 to mc_bases do
38464: NOP4
38468: PUSH
38469: DOUBLE
38470: LD_INT 1
38472: DEC
38473: ST_TO_ADDR
38474: NOP4
38478: PUSH
38479: FOR_TO
38480: IFFALSE 39402
// begin if not mc_bases [ i ] or mc_scan [ i ] then
38482: NOP4
38486: PUSH
38487: NOP4
38491: ARRAY
38492: NOT
38493: PUSH
38494: NOP4
38498: PUSH
38499: NOP4
38503: ARRAY
38504: OR
38505: IFFALSE 38509
// continue ;
38507: GO 38479
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
38509: NOP4
38513: PUSH
38514: NOP4
38518: PUSH
38519: NOP4
38523: ARRAY
38524: PUSH
38525: LD_INT 1
38527: ARRAY
38528: PPUSH
38529: NOP4
38533: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
38534: NOP4
38538: PUSH
38539: LD_INT 3
38541: EQUAL
38542: PUSH
38543: NOP4
38547: PUSH
38548: NOP4
38552: ARRAY
38553: PUSH
38554: NOP4
38558: PUSH
38559: NOP4
38563: ARRAY
38564: UNION
38565: PPUSH
38566: LD_INT 33
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PPUSH
38576: NOP4
38580: NOT
38581: OR
38582: IFFALSE 38586
// continue ;
38584: GO 38479
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
38586: NOP4
38590: PUSH
38591: NOP4
38595: PUSH
38596: NOP4
38600: ARRAY
38601: PPUSH
38602: LD_INT 30
38604: PUSH
38605: LD_INT 36
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PPUSH
38612: NOP4
38616: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
38617: NOP4
38621: PUSH
38622: NOP4
38626: PUSH
38627: NOP4
38631: ARRAY
38632: PPUSH
38633: LD_INT 34
38635: PUSH
38636: LD_INT 31
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PPUSH
38643: NOP4
38647: ST_TO_ADDR
// if not cts and not mcts then
38648: NOP4
38652: NOT
38653: PUSH
38654: NOP4
38658: NOT
38659: AND
38660: IFFALSE 38664
// continue ;
38662: GO 38479
// x := cts ;
38664: NOP4
38668: PUSH
38669: NOP4
38673: ST_TO_ADDR
// if not x then
38674: NOP4
38678: NOT
38679: IFFALSE 38691
// x := mcts ;
38681: NOP4
38685: PUSH
38686: NOP4
38690: ST_TO_ADDR
// if not x then
38691: NOP4
38695: NOT
38696: IFFALSE 38700
// continue ;
38698: GO 38479
// if mc_remote_driver [ i ] then
38700: NOP4
38704: PUSH
38705: NOP4
38709: ARRAY
38710: IFFALSE 39097
// for j in mc_remote_driver [ i ] do
38712: NOP4
38716: PUSH
38717: NOP4
38721: PUSH
38722: NOP4
38726: ARRAY
38727: PUSH
38728: FOR_IN
38729: IFFALSE 39095
// begin if GetClass ( j ) <> 3 then
38731: NOP4
38735: PPUSH
38736: NOP4
38740: PUSH
38741: LD_INT 3
38743: NONEQUAL
38744: IFFALSE 38797
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
38746: NOP4
38750: PUSH
38751: NOP4
38755: PPUSH
38756: NOP4
38760: PPUSH
38761: NOP4
38765: PUSH
38766: NOP4
38770: ARRAY
38771: PUSH
38772: NOP4
38776: DIFF
38777: PPUSH
38778: NOP4
38782: ST_TO_ADDR
// SetTag ( j , 0 ) ;
38783: NOP4
38787: PPUSH
38788: LD_INT 0
38790: PPUSH
38791: NOP4
// continue ;
38795: GO 38728
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
38797: NOP4
38801: PUSH
38802: NOP4
38806: ARRAY
38807: PPUSH
38808: LD_INT 34
38810: PUSH
38811: LD_INT 31
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 58
38820: PUSH
38821: EMPTY
38822: LIST
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PPUSH
38828: NOP4
38832: PUSH
38833: NOP4
38837: PPUSH
38838: NOP4
38842: NOT
38843: AND
38844: IFFALSE 38915
// begin if IsInUnit ( j ) then
38846: NOP4
38850: PPUSH
38851: NOP4
38855: IFFALSE 38866
// ComExitBuilding ( j ) ;
38857: NOP4
38861: PPUSH
38862: NOP4
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
38866: NOP4
38870: PPUSH
38871: NOP4
38875: PUSH
38876: NOP4
38880: ARRAY
38881: PPUSH
38882: LD_INT 34
38884: PUSH
38885: LD_INT 31
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 58
38894: PUSH
38895: EMPTY
38896: LIST
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PPUSH
38902: NOP4
38906: PUSH
38907: LD_INT 1
38909: ARRAY
38910: PPUSH
38911: NOP4
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
38915: NOP4
38919: PPUSH
38920: NOP4
38924: NOT
38925: PUSH
38926: NOP4
38930: PPUSH
38931: NOP4
38935: PPUSH
38936: NOP4
38940: PUSH
38941: LD_INT 36
38943: NONEQUAL
38944: PUSH
38945: NOP4
38949: PPUSH
38950: NOP4
38954: NOT
38955: AND
38956: OR
38957: IFFALSE 39093
// begin if IsInUnit ( j ) then
38959: NOP4
38963: PPUSH
38964: NOP4
38968: IFFALSE 38979
// ComExitBuilding ( j ) ;
38970: NOP4
38974: PPUSH
38975: NOP4
// ct := 0 ;
38979: NOP4
38983: PUSH
38984: LD_INT 0
38986: ST_TO_ADDR
// for k in x do
38987: NOP4
38991: PUSH
38992: NOP4
38996: PUSH
38997: FOR_IN
38998: IFFALSE 39071
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
39000: NOP4
39004: PPUSH
39005: NOP4
39009: PUSH
39010: LD_INT 31
39012: EQUAL
39013: PUSH
39014: NOP4
39018: PPUSH
39019: NOP4
39023: NOT
39024: AND
39025: PUSH
39026: NOP4
39030: PPUSH
39031: NOP4
39035: PUSH
39036: LD_INT 36
39038: EQUAL
39039: PUSH
39040: NOP4
39044: PPUSH
39045: NOP4
39049: PUSH
39050: LD_INT 3
39052: LESS
39053: AND
39054: OR
39055: IFFALSE 39069
// begin ct := k ;
39057: NOP4
39061: PUSH
39062: NOP4
39066: ST_TO_ADDR
// break ;
39067: GO 39071
// end ;
39069: GO 38997
39071: POP
39072: POP
// if ct then
39073: NOP4
39077: IFFALSE 39093
// ComEnterUnit ( j , ct ) ;
39079: NOP4
39083: PPUSH
39084: NOP4
39088: PPUSH
39089: NOP4
// end ; end ;
39093: GO 38728
39095: POP
39096: POP
// places := 0 ;
39097: NOP4
39101: PUSH
39102: LD_INT 0
39104: ST_TO_ADDR
// for j = 1 to x do
39105: NOP4
39109: PUSH
39110: DOUBLE
39111: LD_INT 1
39113: DEC
39114: ST_TO_ADDR
39115: NOP4
39119: PUSH
39120: FOR_TO
39121: IFFALSE 39197
// if GetWeapon ( x [ j ] ) = ar_control_tower then
39123: NOP4
39127: PUSH
39128: NOP4
39132: ARRAY
39133: PPUSH
39134: NOP4
39138: PUSH
39139: LD_INT 31
39141: EQUAL
39142: IFFALSE 39160
// places := places + 1 else
39144: NOP4
39148: PUSH
39149: NOP4
39153: PUSH
39154: LD_INT 1
39156: PLUS
39157: ST_TO_ADDR
39158: GO 39195
// if GetBType ( x [ j ] ) = b_control_tower then
39160: NOP4
39164: PUSH
39165: NOP4
39169: ARRAY
39170: PPUSH
39171: NOP4
39175: PUSH
39176: LD_INT 36
39178: EQUAL
39179: IFFALSE 39195
// places := places + 3 ;
39181: NOP4
39185: PUSH
39186: NOP4
39190: PUSH
39191: LD_INT 3
39193: PLUS
39194: ST_TO_ADDR
39195: GO 39120
39197: POP
39198: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
39199: NOP4
39203: PUSH
39204: LD_INT 0
39206: EQUAL
39207: PUSH
39208: NOP4
39212: PUSH
39213: NOP4
39217: PUSH
39218: NOP4
39222: ARRAY
39223: LESSEQUAL
39224: OR
39225: IFFALSE 39229
// continue ;
39227: GO 38479
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
39229: NOP4
39233: PUSH
39234: NOP4
39238: PUSH
39239: NOP4
39243: ARRAY
39244: PPUSH
39245: LD_INT 25
39247: PUSH
39248: LD_INT 3
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PPUSH
39255: NOP4
39259: PUSH
39260: NOP4
39264: PUSH
39265: NOP4
39269: ARRAY
39270: DIFF
39271: PPUSH
39272: LD_INT 3
39274: PPUSH
39275: NOP4
39279: ST_TO_ADDR
// for j in tmp do
39280: NOP4
39284: PUSH
39285: NOP4
39289: PUSH
39290: FOR_IN
39291: IFFALSE 39326
// if GetTag ( j ) > 0 then
39293: NOP4
39297: PPUSH
39298: NOP4
39302: PUSH
39303: LD_INT 0
39305: GREATER
39306: IFFALSE 39324
// tmp := tmp diff j ;
39308: NOP4
39312: PUSH
39313: NOP4
39317: PUSH
39318: NOP4
39322: DIFF
39323: ST_TO_ADDR
39324: GO 39290
39326: POP
39327: POP
// if not tmp then
39328: NOP4
39332: NOT
39333: IFFALSE 39337
// continue ;
39335: GO 38479
// if places then
39337: NOP4
39341: IFFALSE 39400
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
39343: NOP4
39347: PUSH
39348: NOP4
39352: PPUSH
39353: NOP4
39357: PPUSH
39358: NOP4
39362: PUSH
39363: NOP4
39367: ARRAY
39368: PUSH
39369: NOP4
39373: PUSH
39374: LD_INT 1
39376: ARRAY
39377: UNION
39378: PPUSH
39379: NOP4
39383: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
39384: NOP4
39388: PUSH
39389: LD_INT 1
39391: ARRAY
39392: PPUSH
39393: LD_INT 126
39395: PPUSH
39396: NOP4
// end ; end ;
39400: GO 38479
39402: POP
39403: POP
// end ;
39404: LD_VAR 0 1
39408: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
39409: LD_INT 0
39411: PPUSH
39412: PPUSH
39413: PPUSH
39414: PPUSH
39415: PPUSH
39416: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
39417: NOP4
39421: NOT
39422: PUSH
39423: NOP4
39427: NOT
39428: OR
39429: PUSH
39430: NOP4
39434: NOT
39435: OR
39436: PUSH
39437: NOP4
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: LD_INT 3
39450: PUSH
39451: LD_INT 4
39453: PUSH
39454: LD_INT 5
39456: PUSH
39457: LD_INT 8
39459: PUSH
39460: LD_INT 9
39462: PUSH
39463: LD_INT 15
39465: PUSH
39466: LD_INT 16
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: IN
39480: NOT
39481: OR
39482: IFFALSE 39486
// exit ;
39484: GO 40386
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
39486: NOP4
39490: PUSH
39491: NOP4
39495: PPUSH
39496: LD_INT 21
39498: PUSH
39499: LD_INT 3
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 24
39508: PUSH
39509: LD_INT 250
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PPUSH
39520: NOP4
39524: ST_TO_ADDR
// case class of 1 , 15 :
39525: NOP4
39529: PUSH
39530: LD_INT 1
39532: DOUBLE
39533: EQUAL
39534: IFTRUE 39544
39536: LD_INT 15
39538: DOUBLE
39539: EQUAL
39540: IFTRUE 39544
39542: GO 39629
39544: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
39545: NOP4
39549: PUSH
39550: NOP4
39554: PPUSH
39555: LD_INT 2
39557: PUSH
39558: LD_INT 30
39560: PUSH
39561: LD_INT 32
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 30
39570: PUSH
39571: LD_INT 31
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: LIST
39582: PPUSH
39583: NOP4
39587: PUSH
39588: NOP4
39592: PPUSH
39593: LD_INT 2
39595: PUSH
39596: LD_INT 30
39598: PUSH
39599: LD_INT 4
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 30
39608: PUSH
39609: LD_INT 5
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: LIST
39620: PPUSH
39621: NOP4
39625: ADD
39626: ST_TO_ADDR
39627: GO 39875
39629: LD_INT 2
39631: DOUBLE
39632: EQUAL
39633: IFTRUE 39643
39635: LD_INT 16
39637: DOUBLE
39638: EQUAL
39639: IFTRUE 39643
39641: GO 39689
39643: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
39644: NOP4
39648: PUSH
39649: NOP4
39653: PPUSH
39654: LD_INT 2
39656: PUSH
39657: LD_INT 30
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 30
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: PPUSH
39682: NOP4
39686: ST_TO_ADDR
39687: GO 39875
39689: LD_INT 3
39691: DOUBLE
39692: EQUAL
39693: IFTRUE 39697
39695: GO 39743
39697: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
39698: NOP4
39702: PUSH
39703: NOP4
39707: PPUSH
39708: LD_INT 2
39710: PUSH
39711: LD_INT 30
39713: PUSH
39714: LD_INT 2
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 30
39723: PUSH
39724: LD_INT 3
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: LIST
39735: PPUSH
39736: NOP4
39740: ST_TO_ADDR
39741: GO 39875
39743: LD_INT 4
39745: DOUBLE
39746: EQUAL
39747: IFTRUE 39751
39749: GO 39808
39751: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
39752: NOP4
39756: PUSH
39757: NOP4
39761: PPUSH
39762: LD_INT 2
39764: PUSH
39765: LD_INT 30
39767: PUSH
39768: LD_INT 6
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 30
39777: PUSH
39778: LD_INT 7
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 30
39787: PUSH
39788: LD_INT 8
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: PPUSH
39801: NOP4
39805: ST_TO_ADDR
39806: GO 39875
39808: LD_INT 5
39810: DOUBLE
39811: EQUAL
39812: IFTRUE 39828
39814: LD_INT 8
39816: DOUBLE
39817: EQUAL
39818: IFTRUE 39828
39820: LD_INT 9
39822: DOUBLE
39823: EQUAL
39824: IFTRUE 39828
39826: GO 39874
39828: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
39829: NOP4
39833: PUSH
39834: NOP4
39838: PPUSH
39839: LD_INT 2
39841: PUSH
39842: LD_INT 30
39844: PUSH
39845: LD_INT 4
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 30
39854: PUSH
39855: LD_INT 5
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: PPUSH
39867: NOP4
39871: ST_TO_ADDR
39872: GO 39875
39874: POP
// if not tmp then
39875: NOP4
39879: NOT
39880: IFFALSE 39884
// exit ;
39882: GO 40386
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
39884: NOP4
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: LD_INT 15
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: IN
39899: PUSH
39900: NOP4
39904: PUSH
39905: NOP4
39909: ARRAY
39910: AND
39911: IFFALSE 40067
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
39913: NOP4
39917: PUSH
39918: NOP4
39922: PUSH
39923: NOP4
39927: ARRAY
39928: PUSH
39929: LD_INT 1
39931: ARRAY
39932: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
39933: NOP4
39937: PUSH
39938: NOP4
39942: PUSH
39943: NOP4
39947: ARRAY
39948: IN
39949: NOT
39950: IFFALSE 40065
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
39952: NOP4
39956: PUSH
39957: NOP4
39961: PPUSH
39962: NOP4
39966: PUSH
39967: NOP4
39971: PUSH
39972: NOP4
39976: ARRAY
39977: PUSH
39978: LD_INT 1
39980: PLUS
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PPUSH
39986: NOP4
39990: PPUSH
39991: NOP4
39995: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
39996: NOP4
40000: PUSH
40001: NOP4
40005: PPUSH
40006: NOP4
40010: PPUSH
40011: NOP4
40015: PUSH
40016: NOP4
40020: ARRAY
40021: PUSH
40022: NOP4
40026: DIFF
40027: PPUSH
40028: NOP4
40032: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
40033: NOP4
40037: PPUSH
40038: NOP4
40042: PUSH
40043: NOP4
40047: ARRAY
40048: PUSH
40049: NOP4
40053: PUSH
40054: NOP4
40058: ARRAY
40059: ARRAY
40060: PPUSH
40061: NOP4
// end ; exit ;
40065: GO 40386
// end ; if tmp > 1 then
40067: NOP4
40071: PUSH
40072: LD_INT 1
40074: GREATER
40075: IFFALSE 40179
// for i = 2 to tmp do
40077: NOP4
40081: PUSH
40082: DOUBLE
40083: LD_INT 2
40085: DEC
40086: ST_TO_ADDR
40087: NOP4
40091: PUSH
40092: FOR_TO
40093: IFFALSE 40177
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
40095: NOP4
40099: PUSH
40100: NOP4
40104: ARRAY
40105: PPUSH
40106: NOP4
40110: PUSH
40111: LD_INT 6
40113: EQUAL
40114: IFFALSE 40175
// begin x := tmp [ i ] ;
40116: NOP4
40120: PUSH
40121: NOP4
40125: PUSH
40126: NOP4
40130: ARRAY
40131: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
40132: NOP4
40136: PUSH
40137: NOP4
40141: PPUSH
40142: NOP4
40146: PPUSH
40147: NOP4
40151: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
40152: NOP4
40156: PUSH
40157: NOP4
40161: PPUSH
40162: LD_INT 1
40164: PPUSH
40165: NOP4
40169: PPUSH
40170: NOP4
40174: ST_TO_ADDR
// end ;
40175: GO 40092
40177: POP
40178: POP
// for i in tmp do
40179: NOP4
40183: PUSH
40184: NOP4
40188: PUSH
40189: FOR_IN
40190: IFFALSE 40259
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
40192: NOP4
40196: PPUSH
40197: NOP4
40201: PUSH
40202: LD_INT 6
40204: LESS
40205: PUSH
40206: NOP4
40210: PPUSH
40211: NOP4
40215: PUSH
40216: LD_INT 31
40218: PUSH
40219: LD_INT 32
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: IN
40226: NOT
40227: AND
40228: PUSH
40229: NOP4
40233: PPUSH
40234: NOP4
40238: PUSH
40239: LD_INT 0
40241: EQUAL
40242: OR
40243: IFFALSE 40257
// begin j := i ;
40245: NOP4
40249: PUSH
40250: NOP4
40254: ST_TO_ADDR
// break ;
40255: GO 40259
// end ; end ;
40257: GO 40189
40259: POP
40260: POP
// if j then
40261: NOP4
40265: IFFALSE 40283
// ComEnterUnit ( unit , j ) else
40267: NOP4
40271: PPUSH
40272: NOP4
40276: PPUSH
40277: NOP4
40281: GO 40386
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
40283: NOP4
40287: PUSH
40288: NOP4
40292: PPUSH
40293: LD_INT 2
40295: PUSH
40296: LD_INT 30
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 30
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: LIST
40320: PPUSH
40321: NOP4
40325: ST_TO_ADDR
// if depot then
40326: NOP4
40330: IFFALSE 40386
// begin depot := NearestUnitToUnit ( depot , unit ) ;
40332: NOP4
40336: PUSH
40337: NOP4
40341: PPUSH
40342: NOP4
40346: PPUSH
40347: NOP4
40351: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
40352: NOP4
40356: PPUSH
40357: NOP4
40361: PPUSH
40362: NOP4
40366: PUSH
40367: LD_INT 10
40369: GREATER
40370: IFFALSE 40386
// ComStandNearbyBuilding ( unit , depot ) ;
40372: NOP4
40376: PPUSH
40377: NOP4
40381: PPUSH
40382: NOP4
// end ; end ; end ;
40386: LD_VAR 0 5
40390: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
40391: LD_INT 0
40393: PPUSH
40394: PPUSH
40395: PPUSH
40396: PPUSH
// if not mc_bases then
40397: NOP4
40401: NOT
40402: IFFALSE 40406
// exit ;
40404: GO 40645
// for i = 1 to mc_bases do
40406: NOP4
40410: PUSH
40411: DOUBLE
40412: LD_INT 1
40414: DEC
40415: ST_TO_ADDR
40416: NOP4
40420: PUSH
40421: FOR_TO
40422: IFFALSE 40643
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
40424: NOP4
40428: PUSH
40429: NOP4
40433: PUSH
40434: NOP4
40438: ARRAY
40439: PPUSH
40440: LD_INT 21
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PPUSH
40450: NOP4
40454: PUSH
40455: NOP4
40459: PUSH
40460: NOP4
40464: ARRAY
40465: UNION
40466: ST_TO_ADDR
// if not tmp then
40467: NOP4
40471: NOT
40472: IFFALSE 40476
// continue ;
40474: GO 40421
// for j in tmp do
40476: NOP4
40480: PUSH
40481: NOP4
40485: PUSH
40486: FOR_IN
40487: IFFALSE 40639
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
40489: NOP4
40493: PPUSH
40494: NOP4
40498: NOT
40499: PUSH
40500: NOP4
40504: PPUSH
40505: NOP4
40509: NOT
40510: AND
40511: PUSH
40512: NOP4
40516: PPUSH
40517: NOP4
40521: NOT
40522: AND
40523: PUSH
40524: NOP4
40528: PPUSH
40529: NOP4
40533: NOT
40534: AND
40535: PUSH
40536: NOP4
40540: PUSH
40541: NOP4
40545: PUSH
40546: NOP4
40550: ARRAY
40551: PUSH
40552: LD_INT 1
40554: ARRAY
40555: IN
40556: NOT
40557: AND
40558: PUSH
40559: NOP4
40563: PUSH
40564: NOP4
40568: PUSH
40569: NOP4
40573: ARRAY
40574: PUSH
40575: LD_INT 2
40577: ARRAY
40578: IN
40579: NOT
40580: AND
40581: PUSH
40582: NOP4
40586: PUSH
40587: NOP4
40591: PUSH
40592: NOP4
40596: ARRAY
40597: IN
40598: NOT
40599: AND
40600: IFFALSE 40637
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
40602: NOP4
40606: PPUSH
40607: NOP4
40611: PUSH
40612: NOP4
40616: ARRAY
40617: PPUSH
40618: NOP4
40622: PPUSH
40623: NOP4
40627: PPUSH
40628: NOP4
40632: PPUSH
40633: NOP4
// end ;
40637: GO 40486
40639: POP
40640: POP
// end ;
40641: GO 40421
40643: POP
40644: POP
// end ;
40645: LD_VAR 0 1
40649: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
40650: LD_INT 0
40652: PPUSH
40653: PPUSH
40654: PPUSH
40655: PPUSH
40656: PPUSH
40657: PPUSH
// if not mc_bases [ base ] then
40658: NOP4
40662: PUSH
40663: NOP4
40667: ARRAY
40668: NOT
40669: IFFALSE 40673
// exit ;
40671: GO 40855
// tmp := [ ] ;
40673: NOP4
40677: PUSH
40678: EMPTY
40679: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
40680: NOP4
40684: PUSH
40685: NOP4
40689: PPUSH
40690: LD_INT 0
40692: PPUSH
40693: NOP4
40697: ST_TO_ADDR
// if not list then
40698: NOP4
40702: NOT
40703: IFFALSE 40707
// exit ;
40705: GO 40855
// for i = 1 to amount do
40707: NOP4
40711: PUSH
40712: DOUBLE
40713: LD_INT 1
40715: DEC
40716: ST_TO_ADDR
40717: NOP4
40721: PUSH
40722: FOR_TO
40723: IFFALSE 40803
// begin x := rand ( 1 , list [ 1 ] ) ;
40725: NOP4
40729: PUSH
40730: LD_INT 1
40732: PPUSH
40733: NOP4
40737: PUSH
40738: LD_INT 1
40740: ARRAY
40741: PPUSH
40742: NOP4
40746: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
40747: NOP4
40751: PUSH
40752: NOP4
40756: PPUSH
40757: NOP4
40761: PPUSH
40762: NOP4
40766: PUSH
40767: LD_INT 1
40769: ARRAY
40770: PUSH
40771: NOP4
40775: ARRAY
40776: PUSH
40777: NOP4
40781: PUSH
40782: LD_INT 2
40784: ARRAY
40785: PUSH
40786: NOP4
40790: ARRAY
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PPUSH
40796: NOP4
40800: ST_TO_ADDR
// end ;
40801: GO 40722
40803: POP
40804: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
40805: NOP4
40809: PUSH
40810: NOP4
40814: PPUSH
40815: NOP4
40819: PPUSH
40820: NOP4
40824: PPUSH
40825: NOP4
40829: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
40830: NOP4
40834: PUSH
40835: NOP4
40839: PPUSH
40840: NOP4
40844: PPUSH
40845: NOP4
40849: PPUSH
40850: NOP4
40854: ST_TO_ADDR
// end ;
40855: LD_VAR 0 4
40859: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
40860: LD_INT 0
40862: PPUSH
// if not mc_bases [ base ] then
40863: NOP4
40867: PUSH
40868: NOP4
40872: ARRAY
40873: NOT
40874: IFFALSE 40878
// exit ;
40876: GO 40903
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
40878: NOP4
40882: PUSH
40883: NOP4
40887: PPUSH
40888: NOP4
40892: PPUSH
40893: NOP4
40897: PPUSH
40898: NOP4
40902: ST_TO_ADDR
// end ;
40903: LD_VAR 0 3
40907: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
40908: LD_INT 0
40910: PPUSH
// if not mc_bases [ base ] then
40911: NOP4
40915: PUSH
40916: NOP4
40920: ARRAY
40921: NOT
40922: IFFALSE 40926
// exit ;
40924: GO 40963
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
40926: NOP4
40930: PUSH
40931: NOP4
40935: PPUSH
40936: NOP4
40940: PPUSH
40941: NOP4
40945: PUSH
40946: NOP4
40950: ARRAY
40951: PUSH
40952: NOP4
40956: UNION
40957: PPUSH
40958: NOP4
40962: ST_TO_ADDR
// end ;
40963: LD_VAR 0 3
40967: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
40968: LD_INT 0
40970: PPUSH
// if not mc_bases [ base ] then
40971: NOP4
40975: PUSH
40976: NOP4
40980: ARRAY
40981: NOT
40982: IFFALSE 40986
// exit ;
40984: GO 41011
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
40986: NOP4
40990: PUSH
40991: NOP4
40995: PPUSH
40996: NOP4
41000: PPUSH
41001: NOP4
41005: PPUSH
41006: NOP4
41010: ST_TO_ADDR
// end ;
41011: LD_VAR 0 3
41015: RET
// export function MC_InsertProduceList ( base , components ) ; begin
41016: LD_INT 0
41018: PPUSH
// if not mc_bases [ base ] then
41019: NOP4
41023: PUSH
41024: NOP4
41028: ARRAY
41029: NOT
41030: IFFALSE 41034
// exit ;
41032: GO 41071
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
41034: NOP4
41038: PUSH
41039: NOP4
41043: PPUSH
41044: NOP4
41048: PPUSH
41049: NOP4
41053: PUSH
41054: NOP4
41058: ARRAY
41059: PUSH
41060: NOP4
41064: ADD
41065: PPUSH
41066: NOP4
41070: ST_TO_ADDR
// end ;
41071: LD_VAR 0 3
41075: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
41076: LD_INT 0
41078: PPUSH
// if not mc_bases [ base ] then
41079: NOP4
41083: PUSH
41084: NOP4
41088: ARRAY
41089: NOT
41090: IFFALSE 41094
// exit ;
41092: GO 41148
// mc_defender := Replace ( mc_defender , base , deflist ) ;
41094: NOP4
41098: PUSH
41099: NOP4
41103: PPUSH
41104: NOP4
41108: PPUSH
41109: NOP4
41113: PPUSH
41114: NOP4
41118: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
41119: NOP4
41123: PUSH
41124: NOP4
41128: PPUSH
41129: NOP4
41133: PPUSH
41134: NOP4
41138: PUSH
41139: LD_INT 0
41141: PLUS
41142: PPUSH
41143: NOP4
41147: ST_TO_ADDR
// end ;
41148: LD_VAR 0 3
41152: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
41153: LD_INT 0
41155: PPUSH
// if not mc_bases [ base ] then
41156: NOP4
41160: PUSH
41161: NOP4
41165: ARRAY
41166: NOT
41167: IFFALSE 41171
// exit ;
41169: GO 41196
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
41171: NOP4
41175: PUSH
41176: NOP4
41180: PPUSH
41181: NOP4
41185: PPUSH
41186: NOP4
41190: PPUSH
41191: NOP4
41195: ST_TO_ADDR
// end ;
41196: LD_VAR 0 3
41200: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
41201: LD_INT 0
41203: PPUSH
41204: PPUSH
41205: PPUSH
41206: PPUSH
// if not mc_bases [ base ] then
41207: NOP4
41211: PUSH
41212: NOP4
41216: ARRAY
41217: NOT
41218: IFFALSE 41222
// exit ;
41220: GO 41287
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
41222: NOP4
41226: PUSH
41227: NOP4
41231: PPUSH
41232: NOP4
41236: PUSH
41237: NOP4
41241: PUSH
41242: NOP4
41246: ARRAY
41247: PUSH
41248: LD_INT 1
41250: PLUS
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PPUSH
41256: NOP4
41260: PUSH
41261: NOP4
41265: PUSH
41266: NOP4
41270: PUSH
41271: NOP4
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: PPUSH
41282: NOP4
41286: ST_TO_ADDR
// end ;
41287: LD_VAR 0 5
41291: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
41292: LD_INT 0
41294: PPUSH
// if not mc_bases [ base ] then
41295: NOP4
41299: PUSH
41300: NOP4
41304: ARRAY
41305: NOT
41306: IFFALSE 41310
// exit ;
41308: GO 41335
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
41310: NOP4
41314: PUSH
41315: NOP4
41319: PPUSH
41320: NOP4
41324: PPUSH
41325: NOP4
41329: PPUSH
41330: NOP4
41334: ST_TO_ADDR
// end ;
41335: LD_VAR 0 3
41339: RET
// export function MC_GetMinesField ( base ) ; begin
41340: LD_INT 0
41342: PPUSH
// result := mc_mines [ base ] ;
41343: NOP4
41347: PUSH
41348: NOP4
41352: PUSH
41353: NOP4
41357: ARRAY
41358: ST_TO_ADDR
// end ;
41359: LD_VAR 0 2
41363: RET
// export function MC_GetProduceList ( base ) ; begin
41364: LD_INT 0
41366: PPUSH
// result := mc_produce [ base ] ;
41367: NOP4
41371: PUSH
41372: NOP4
41376: PUSH
41377: NOP4
41381: ARRAY
41382: ST_TO_ADDR
// end ;
41383: LD_VAR 0 2
41387: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
41388: LD_INT 0
41390: PPUSH
41391: PPUSH
// if not mc_bases then
41392: NOP4
41396: NOT
41397: IFFALSE 41401
// exit ;
41399: GO 41466
// if mc_bases [ base ] then
41401: NOP4
41405: PUSH
41406: NOP4
41410: ARRAY
41411: IFFALSE 41466
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41413: NOP4
41417: PUSH
41418: NOP4
41422: PUSH
41423: NOP4
41427: ARRAY
41428: PPUSH
41429: LD_INT 30
41431: PUSH
41432: NOP4
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PPUSH
41441: NOP4
41445: ST_TO_ADDR
// if result then
41446: NOP4
41450: IFFALSE 41466
// result := result [ 1 ] ;
41452: NOP4
41456: PUSH
41457: NOP4
41461: PUSH
41462: LD_INT 1
41464: ARRAY
41465: ST_TO_ADDR
// end ; end ;
41466: LD_VAR 0 3
41470: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
41471: LD_INT 0
41473: PPUSH
41474: PPUSH
// if not mc_bases then
41475: NOP4
41479: NOT
41480: IFFALSE 41484
// exit ;
41482: GO 41529
// if mc_bases [ base ] then
41484: NOP4
41488: PUSH
41489: NOP4
41493: ARRAY
41494: IFFALSE 41529
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41496: NOP4
41500: PUSH
41501: NOP4
41505: PUSH
41506: NOP4
41510: ARRAY
41511: PPUSH
41512: LD_INT 30
41514: PUSH
41515: NOP4
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PPUSH
41524: NOP4
41528: ST_TO_ADDR
// end ;
41529: LD_VAR 0 3
41533: RET
// export function MC_SetTame ( base , area ) ; begin
41534: LD_INT 0
41536: PPUSH
// if not mc_bases or not base then
41537: NOP4
41541: NOT
41542: PUSH
41543: NOP4
41547: NOT
41548: OR
41549: IFFALSE 41553
// exit ;
41551: GO 41578
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
41553: NOP4
41557: PUSH
41558: NOP4
41562: PPUSH
41563: NOP4
41567: PPUSH
41568: NOP4
41572: PPUSH
41573: NOP4
41577: ST_TO_ADDR
// end ;
41578: LD_VAR 0 3
41582: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
41583: LD_INT 0
41585: PPUSH
41586: PPUSH
// if not mc_bases or not base then
41587: NOP4
41591: NOT
41592: PUSH
41593: NOP4
41597: NOT
41598: OR
41599: IFFALSE 41603
// exit ;
41601: GO 41705
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41603: NOP4
41607: PUSH
41608: NOP4
41612: PUSH
41613: NOP4
41617: ARRAY
41618: PPUSH
41619: LD_INT 30
41621: PUSH
41622: NOP4
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PPUSH
41631: NOP4
41635: ST_TO_ADDR
// if not tmp then
41636: NOP4
41640: NOT
41641: IFFALSE 41645
// exit ;
41643: GO 41705
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
41645: NOP4
41649: PUSH
41650: NOP4
41654: PPUSH
41655: NOP4
41659: PPUSH
41660: NOP4
41664: PUSH
41665: NOP4
41669: ARRAY
41670: PPUSH
41671: NOP4
41675: PUSH
41676: NOP4
41680: ARRAY
41681: PUSH
41682: LD_INT 1
41684: PLUS
41685: PPUSH
41686: NOP4
41690: PUSH
41691: LD_INT 1
41693: ARRAY
41694: PPUSH
41695: NOP4
41699: PPUSH
41700: NOP4
41704: ST_TO_ADDR
// end ;
41705: LD_VAR 0 3
41709: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
41710: LD_INT 0
41712: PPUSH
41713: PPUSH
// if not mc_bases or not base or not kinds then
41714: NOP4
41718: NOT
41719: PUSH
41720: NOP4
41724: NOT
41725: OR
41726: PUSH
41727: NOP4
41731: NOT
41732: OR
41733: IFFALSE 41737
// exit ;
41735: GO 41798
// for i in kinds do
41737: NOP4
41741: PUSH
41742: NOP4
41746: PUSH
41747: FOR_IN
41748: IFFALSE 41796
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
41750: NOP4
41754: PUSH
41755: NOP4
41759: PPUSH
41760: NOP4
41764: PUSH
41765: NOP4
41769: PUSH
41770: NOP4
41774: ARRAY
41775: PUSH
41776: LD_INT 1
41778: PLUS
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PPUSH
41784: NOP4
41788: PPUSH
41789: NOP4
41793: ST_TO_ADDR
41794: GO 41747
41796: POP
41797: POP
// end ;
41798: LD_VAR 0 3
41802: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
41803: LD_INT 0
41805: PPUSH
// if not mc_bases or not base or not areas then
41806: NOP4
41810: NOT
41811: PUSH
41812: NOP4
41816: NOT
41817: OR
41818: PUSH
41819: NOP4
41823: NOT
41824: OR
41825: IFFALSE 41829
// exit ;
41827: GO 41854
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
41829: NOP4
41833: PUSH
41834: NOP4
41838: PPUSH
41839: NOP4
41843: PPUSH
41844: NOP4
41848: PPUSH
41849: NOP4
41853: ST_TO_ADDR
// end ;
41854: LD_VAR 0 3
41858: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
41859: LD_INT 0
41861: PPUSH
// if not mc_bases or not base or not teleports_exit then
41862: NOP4
41866: NOT
41867: PUSH
41868: NOP4
41872: NOT
41873: OR
41874: PUSH
41875: NOP4
41879: NOT
41880: OR
41881: IFFALSE 41885
// exit ;
41883: GO 41910
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
41885: NOP4
41889: PUSH
41890: NOP4
41894: PPUSH
41895: NOP4
41899: PPUSH
41900: NOP4
41904: PPUSH
41905: NOP4
41909: ST_TO_ADDR
// end ;
41910: LD_VAR 0 3
41914: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
41915: LD_INT 0
41917: PPUSH
41918: PPUSH
41919: PPUSH
// if not mc_bases or not base or not ext_list then
41920: NOP4
41924: NOT
41925: PUSH
41926: NOP4
41930: NOT
41931: OR
41932: PUSH
41933: NOP4
41937: NOT
41938: OR
41939: IFFALSE 41943
// exit ;
41941: GO 42116
// tmp := GetFacExtXYD ( x , y , d ) ;
41943: NOP4
41947: PUSH
41948: NOP4
41952: PPUSH
41953: NOP4
41957: PPUSH
41958: NOP4
41962: PPUSH
41963: NOP4
41967: ST_TO_ADDR
// if not tmp then
41968: NOP4
41972: NOT
41973: IFFALSE 41977
// exit ;
41975: GO 42116
// for i in tmp do
41977: NOP4
41981: PUSH
41982: NOP4
41986: PUSH
41987: FOR_IN
41988: IFFALSE 42114
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
41990: NOP4
41994: PUSH
41995: NOP4
41999: PPUSH
42000: NOP4
42004: PPUSH
42005: NOP4
42009: PUSH
42010: NOP4
42014: ARRAY
42015: PPUSH
42016: NOP4
42020: PUSH
42021: NOP4
42025: ARRAY
42026: PUSH
42027: LD_INT 1
42029: PLUS
42030: PPUSH
42031: NOP4
42035: PUSH
42036: LD_INT 1
42038: ARRAY
42039: PUSH
42040: NOP4
42044: PUSH
42045: LD_INT 1
42047: ARRAY
42048: PUSH
42049: NOP4
42053: PUSH
42054: LD_INT 2
42056: ARRAY
42057: PUSH
42058: NOP4
42062: PUSH
42063: LD_INT 3
42065: ARRAY
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: PPUSH
42073: NOP4
42077: PPUSH
42078: NOP4
42082: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
42083: NOP4
42087: PUSH
42088: NOP4
42092: PPUSH
42093: LD_INT 1
42095: PPUSH
42096: NOP4
42100: ST_TO_ADDR
// if not ext_list then
42101: NOP4
42105: NOT
42106: IFFALSE 42112
// exit ;
42108: POP
42109: POP
42110: GO 42116
// end ;
42112: GO 41987
42114: POP
42115: POP
// end ;
42116: LD_VAR 0 6
42120: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
42121: LD_INT 0
42123: PPUSH
// if not mc_bases or not base or not weapon_list then
42124: NOP4
42128: NOT
42129: PUSH
42130: NOP4
42134: NOT
42135: OR
42136: PUSH
42137: NOP4
42141: NOT
42142: OR
42143: IFFALSE 42147
// exit ;
42145: GO 42172
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
42147: NOP4
42151: PUSH
42152: NOP4
42156: PPUSH
42157: NOP4
42161: PPUSH
42162: NOP4
42166: PPUSH
42167: NOP4
42171: ST_TO_ADDR
// end ;
42172: LD_VAR 0 3
42176: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
42177: LD_INT 0
42179: PPUSH
// if not mc_bases or not base or not tech_list then
42180: NOP4
42184: NOT
42185: PUSH
42186: NOP4
42190: NOT
42191: OR
42192: PUSH
42193: NOP4
42197: NOT
42198: OR
42199: IFFALSE 42203
// exit ;
42201: GO 42228
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
42203: NOP4
42207: PUSH
42208: NOP4
42212: PPUSH
42213: NOP4
42217: PPUSH
42218: NOP4
42222: PPUSH
42223: NOP4
42227: ST_TO_ADDR
// end ;
42228: LD_VAR 0 3
42232: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
42233: LD_INT 0
42235: PPUSH
// if not mc_bases or not parking_area or not base then
42236: NOP4
42240: NOT
42241: PUSH
42242: NOP4
42246: NOT
42247: OR
42248: PUSH
42249: NOP4
42253: NOT
42254: OR
42255: IFFALSE 42259
// exit ;
42257: GO 42284
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
42259: NOP4
42263: PUSH
42264: NOP4
42268: PPUSH
42269: NOP4
42273: PPUSH
42274: NOP4
42278: PPUSH
42279: NOP4
42283: ST_TO_ADDR
// end ;
42284: LD_VAR 0 3
42288: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
42289: LD_INT 0
42291: PPUSH
// if not mc_bases or not base or not scan_area then
42292: NOP4
42296: NOT
42297: PUSH
42298: NOP4
42302: NOT
42303: OR
42304: PUSH
42305: NOP4
42309: NOT
42310: OR
42311: IFFALSE 42315
// exit ;
42313: GO 42340
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
42315: NOP4
42319: PUSH
42320: NOP4
42324: PPUSH
42325: NOP4
42329: PPUSH
42330: NOP4
42334: PPUSH
42335: NOP4
42339: ST_TO_ADDR
// end ;
42340: LD_VAR 0 3
42344: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
42345: LD_INT 0
42347: PPUSH
42348: PPUSH
// if not mc_bases or not base then
42349: NOP4
42353: NOT
42354: PUSH
42355: NOP4
42359: NOT
42360: OR
42361: IFFALSE 42365
// exit ;
42363: GO 42429
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
42365: NOP4
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: LD_INT 4
42381: PUSH
42382: LD_INT 11
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
42392: NOP4
42396: PUSH
42397: NOP4
42401: PPUSH
42402: NOP4
42406: PPUSH
42407: NOP4
42411: PUSH
42412: NOP4
42416: ARRAY
42417: PUSH
42418: NOP4
42422: DIFF
42423: PPUSH
42424: NOP4
42428: ST_TO_ADDR
// end ;
42429: LD_VAR 0 2
42433: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
42434: LD_INT 0
42436: PPUSH
// result := mc_vehicles [ base ] ;
42437: NOP4
42441: PUSH
42442: NOP4
42446: PUSH
42447: NOP4
42451: ARRAY
42452: ST_TO_ADDR
// if onlyCombat then
42453: NOP4
42457: IFFALSE 42622
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
42459: NOP4
42463: PUSH
42464: NOP4
42468: PUSH
42469: NOP4
42473: PPUSH
42474: LD_INT 2
42476: PUSH
42477: LD_INT 34
42479: PUSH
42480: LD_INT 12
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 34
42489: PUSH
42490: LD_INT 51
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 34
42499: PUSH
42500: NOP4
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 34
42511: PUSH
42512: LD_INT 32
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 34
42521: PUSH
42522: LD_INT 13
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 34
42531: PUSH
42532: LD_INT 52
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 34
42541: PUSH
42542: LD_INT 14
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 34
42551: PUSH
42552: LD_INT 53
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 34
42561: PUSH
42562: NOP4
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 34
42573: PUSH
42574: LD_INT 31
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 34
42583: PUSH
42584: LD_INT 48
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 34
42593: PUSH
42594: LD_INT 8
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: PPUSH
42616: NOP4
42620: DIFF
42621: ST_TO_ADDR
// end ; end_of_file
42622: LD_VAR 0 3
42626: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
42627: LD_INT 0
42629: PPUSH
42630: PPUSH
42631: PPUSH
// if not mc_bases or not skirmish then
42632: NOP4
42636: NOT
42637: PUSH
42638: NOP4
42642: NOT
42643: OR
42644: IFFALSE 42648
// exit ;
42646: GO 42813
// for i = 1 to mc_bases do
42648: NOP4
42652: PUSH
42653: DOUBLE
42654: LD_INT 1
42656: DEC
42657: ST_TO_ADDR
42658: NOP4
42662: PUSH
42663: FOR_TO
42664: IFFALSE 42811
// begin if sci in mc_bases [ i ] then
42666: NOP4
42670: PUSH
42671: NOP4
42675: PUSH
42676: NOP4
42680: ARRAY
42681: IN
42682: IFFALSE 42809
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
42684: NOP4
42688: PUSH
42689: NOP4
42693: PPUSH
42694: NOP4
42698: PUSH
42699: NOP4
42703: PUSH
42704: NOP4
42708: ARRAY
42709: PUSH
42710: LD_INT 1
42712: PLUS
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PPUSH
42718: NOP4
42722: PPUSH
42723: NOP4
42727: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
42728: NOP4
42732: PUSH
42733: NOP4
42737: PUSH
42738: NOP4
42742: ARRAY
42743: PPUSH
42744: LD_INT 2
42746: PUSH
42747: LD_INT 30
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 30
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: LIST
42771: PPUSH
42772: NOP4
42776: PPUSH
42777: NOP4
42781: PPUSH
42782: NOP4
42786: ST_TO_ADDR
// if tmp then
42787: NOP4
42791: IFFALSE 42807
// ComStandNearbyBuilding ( ape , tmp ) ;
42793: NOP4
42797: PPUSH
42798: NOP4
42802: PPUSH
42803: NOP4
// break ;
42807: GO 42811
// end ; end ;
42809: GO 42663
42811: POP
42812: POP
// end ;
42813: LD_VAR 0 3
42817: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
42818: LD_INT 0
42820: PPUSH
42821: PPUSH
42822: PPUSH
// if not mc_bases or not skirmish then
42823: NOP4
42827: NOT
42828: PUSH
42829: NOP4
42833: NOT
42834: OR
42835: IFFALSE 42839
// exit ;
42837: GO 42928
// for i = 1 to mc_bases do
42839: NOP4
42843: PUSH
42844: DOUBLE
42845: LD_INT 1
42847: DEC
42848: ST_TO_ADDR
42849: NOP4
42853: PUSH
42854: FOR_TO
42855: IFFALSE 42926
// begin if building in mc_busy_turret_list [ i ] then
42857: NOP4
42861: PUSH
42862: NOP4
42866: PUSH
42867: NOP4
42871: ARRAY
42872: IN
42873: IFFALSE 42924
// begin tmp := mc_busy_turret_list [ i ] diff building ;
42875: NOP4
42879: PUSH
42880: NOP4
42884: PUSH
42885: NOP4
42889: ARRAY
42890: PUSH
42891: NOP4
42895: DIFF
42896: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
42897: NOP4
42901: PUSH
42902: NOP4
42906: PPUSH
42907: NOP4
42911: PPUSH
42912: NOP4
42916: PPUSH
42917: NOP4
42921: ST_TO_ADDR
// break ;
42922: GO 42926
// end ; end ;
42924: GO 42854
42926: POP
42927: POP
// end ;
42928: LD_VAR 0 3
42932: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
42933: LD_INT 0
42935: PPUSH
42936: PPUSH
42937: PPUSH
// if not mc_bases or not skirmish then
42938: NOP4
42942: NOT
42943: PUSH
42944: NOP4
42948: NOT
42949: OR
42950: IFFALSE 42954
// exit ;
42952: GO 43153
// for i = 1 to mc_bases do
42954: NOP4
42958: PUSH
42959: DOUBLE
42960: LD_INT 1
42962: DEC
42963: ST_TO_ADDR
42964: NOP4
42968: PUSH
42969: FOR_TO
42970: IFFALSE 43151
// if building in mc_bases [ i ] then
42972: NOP4
42976: PUSH
42977: NOP4
42981: PUSH
42982: NOP4
42986: ARRAY
42987: IN
42988: IFFALSE 43149
// begin tmp := mc_bases [ i ] diff building ;
42990: NOP4
42994: PUSH
42995: NOP4
42999: PUSH
43000: NOP4
43004: ARRAY
43005: PUSH
43006: NOP4
43010: DIFF
43011: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
43012: NOP4
43016: PUSH
43017: NOP4
43021: PPUSH
43022: NOP4
43026: PPUSH
43027: NOP4
43031: PPUSH
43032: NOP4
43036: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
43037: NOP4
43041: PUSH
43042: NOP4
43046: PUSH
43047: NOP4
43051: ARRAY
43052: IN
43053: IFFALSE 43092
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
43055: NOP4
43059: PUSH
43060: NOP4
43064: PPUSH
43065: NOP4
43069: PPUSH
43070: NOP4
43074: PUSH
43075: NOP4
43079: ARRAY
43080: PUSH
43081: NOP4
43085: DIFF
43086: PPUSH
43087: NOP4
43091: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
43092: NOP4
43096: PUSH
43097: NOP4
43101: PUSH
43102: NOP4
43106: ARRAY
43107: IN
43108: IFFALSE 43147
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
43110: NOP4
43114: PUSH
43115: NOP4
43119: PPUSH
43120: NOP4
43124: PPUSH
43125: NOP4
43129: PUSH
43130: NOP4
43134: ARRAY
43135: PUSH
43136: NOP4
43140: DIFF
43141: PPUSH
43142: NOP4
43146: ST_TO_ADDR
// break ;
43147: GO 43151
// end ;
43149: GO 42969
43151: POP
43152: POP
// end ;
43153: LD_VAR 0 4
43157: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
43158: LD_INT 0
43160: PPUSH
43161: PPUSH
43162: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
43163: NOP4
43167: NOT
43168: PUSH
43169: NOP4
43173: NOT
43174: OR
43175: PUSH
43176: NOP4
43180: PUSH
43181: NOP4
43185: IN
43186: NOT
43187: OR
43188: IFFALSE 43192
// exit ;
43190: GO 43315
// for i = 1 to mc_vehicles do
43192: NOP4
43196: PUSH
43197: DOUBLE
43198: LD_INT 1
43200: DEC
43201: ST_TO_ADDR
43202: NOP4
43206: PUSH
43207: FOR_TO
43208: IFFALSE 43313
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
43210: NOP4
43214: PUSH
43215: NOP4
43219: PUSH
43220: NOP4
43224: ARRAY
43225: IN
43226: PUSH
43227: NOP4
43231: PUSH
43232: NOP4
43236: PUSH
43237: NOP4
43241: ARRAY
43242: IN
43243: OR
43244: IFFALSE 43311
// begin tmp := mc_vehicles [ i ] diff old ;
43246: NOP4
43250: PUSH
43251: NOP4
43255: PUSH
43256: NOP4
43260: ARRAY
43261: PUSH
43262: NOP4
43266: DIFF
43267: ST_TO_ADDR
// tmp := tmp diff new ;
43268: NOP4
43272: PUSH
43273: NOP4
43277: PUSH
43278: NOP4
43282: DIFF
43283: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
43284: NOP4
43288: PUSH
43289: NOP4
43293: PPUSH
43294: NOP4
43298: PPUSH
43299: NOP4
43303: PPUSH
43304: NOP4
43308: ST_TO_ADDR
// break ;
43309: GO 43313
// end ;
43311: GO 43207
43313: POP
43314: POP
// end ;
43315: LD_VAR 0 5
43319: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
43320: LD_INT 0
43322: PPUSH
43323: PPUSH
43324: PPUSH
43325: PPUSH
// if not mc_bases or not skirmish then
43326: NOP4
43330: NOT
43331: PUSH
43332: NOP4
43336: NOT
43337: OR
43338: IFFALSE 43342
// exit ;
43340: GO 43719
// side := GetSide ( vehicle ) ;
43342: NOP4
43346: PUSH
43347: NOP4
43351: PPUSH
43352: NOP4
43356: ST_TO_ADDR
// for i = 1 to mc_bases do
43357: NOP4
43361: PUSH
43362: DOUBLE
43363: LD_INT 1
43365: DEC
43366: ST_TO_ADDR
43367: NOP4
43371: PUSH
43372: FOR_TO
43373: IFFALSE 43717
// begin if factory in mc_bases [ i ] then
43375: NOP4
43379: PUSH
43380: NOP4
43384: PUSH
43385: NOP4
43389: ARRAY
43390: IN
43391: IFFALSE 43715
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
43393: NOP4
43397: PUSH
43398: NOP4
43402: ARRAY
43403: PUSH
43404: NOP4
43408: PUSH
43409: NOP4
43413: ARRAY
43414: LESS
43415: PUSH
43416: NOP4
43420: PPUSH
43421: NOP4
43425: PUSH
43426: LD_INT 31
43428: PUSH
43429: LD_INT 32
43431: PUSH
43432: LD_INT 51
43434: PUSH
43435: NOP4
43439: PUSH
43440: LD_INT 12
43442: PUSH
43443: LD_INT 30
43445: PUSH
43446: NOP4
43450: PUSH
43451: LD_INT 11
43453: PUSH
43454: LD_INT 53
43456: PUSH
43457: LD_INT 14
43459: PUSH
43460: NOP4
43464: PUSH
43465: LD_INT 29
43467: PUSH
43468: NOP4
43472: PUSH
43473: LD_INT 13
43475: PUSH
43476: LD_INT 52
43478: PUSH
43479: LD_INT 48
43481: PUSH
43482: LD_INT 8
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: IN
43504: NOT
43505: AND
43506: IFFALSE 43554
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
43508: NOP4
43512: PUSH
43513: NOP4
43517: PPUSH
43518: NOP4
43522: PUSH
43523: NOP4
43527: PUSH
43528: NOP4
43532: ARRAY
43533: PUSH
43534: LD_INT 1
43536: PLUS
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PPUSH
43542: NOP4
43546: PPUSH
43547: NOP4
43551: ST_TO_ADDR
43552: GO 43598
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
43554: NOP4
43558: PUSH
43559: NOP4
43563: PPUSH
43564: NOP4
43568: PUSH
43569: NOP4
43573: PUSH
43574: NOP4
43578: ARRAY
43579: PUSH
43580: LD_INT 1
43582: PLUS
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PPUSH
43588: NOP4
43592: PPUSH
43593: NOP4
43597: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
43598: NOP4
43602: PPUSH
43603: NOP4
43607: PUSH
43608: LD_INT 2
43610: EQUAL
43611: IFFALSE 43631
// begin repeat wait ( 0 0$1 ) ;
43613: LD_INT 35
43615: PPUSH
43616: NOP4
// until IsControledBy ( vehicle ) ;
43620: NOP4
43624: PPUSH
43625: NOP4
43629: IFFALSE 43613
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
43631: NOP4
43635: PPUSH
43636: NOP4
43640: PUSH
43641: NOP4
43645: ARRAY
43646: PPUSH
43647: NOP4
// if GetControl ( vehicle ) <> control_manual then
43651: NOP4
43655: PPUSH
43656: NOP4
43660: PUSH
43661: LD_INT 1
43663: NONEQUAL
43664: IFFALSE 43668
// break ;
43666: GO 43717
// repeat wait ( 0 0$1 ) ;
43668: LD_INT 35
43670: PPUSH
43671: NOP4
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
43675: NOP4
43679: PPUSH
43680: NOP4
43684: PUSH
43685: NOP4
43689: ARRAY
43690: PPUSH
43691: NOP4
43695: IFFALSE 43668
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
43697: NOP4
43701: PPUSH
43702: NOP4
43706: PPUSH
43707: NOP4
// exit ;
43711: POP
43712: POP
43713: GO 43719
// end ; end ;
43715: GO 43372
43717: POP
43718: POP
// end ;
43719: LD_VAR 0 3
43723: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
43724: LD_INT 0
43726: PPUSH
43727: PPUSH
43728: PPUSH
43729: PPUSH
// if not mc_bases or not skirmish then
43730: NOP4
43734: NOT
43735: PUSH
43736: NOP4
43740: NOT
43741: OR
43742: IFFALSE 43746
// exit ;
43744: GO 44099
// repeat wait ( 0 0$1 ) ;
43746: LD_INT 35
43748: PPUSH
43749: NOP4
// until GetResourceAmountXY ( x , y ) ;
43753: NOP4
43757: PPUSH
43758: NOP4
43762: PPUSH
43763: NOP4
43767: IFFALSE 43746
// if GetResourceTypeXY ( x , y ) = mat_artefact then
43769: NOP4
43773: PPUSH
43774: NOP4
43778: PPUSH
43779: NOP4
43783: PUSH
43784: LD_INT 4
43786: EQUAL
43787: IFFALSE 43791
// exit ;
43789: GO 44099
// for i = 1 to mc_bases do
43791: NOP4
43795: PUSH
43796: DOUBLE
43797: LD_INT 1
43799: DEC
43800: ST_TO_ADDR
43801: NOP4
43805: PUSH
43806: FOR_TO
43807: IFFALSE 44097
// begin if mc_crates_area [ i ] then
43809: NOP4
43813: PUSH
43814: NOP4
43818: ARRAY
43819: IFFALSE 43930
// for j in mc_crates_area [ i ] do
43821: NOP4
43825: PUSH
43826: NOP4
43830: PUSH
43831: NOP4
43835: ARRAY
43836: PUSH
43837: FOR_IN
43838: IFFALSE 43928
// if InArea ( x , y , j ) then
43840: NOP4
43844: PPUSH
43845: NOP4
43849: PPUSH
43850: NOP4
43854: PPUSH
43855: NOP4
43859: IFFALSE 43926
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
43861: NOP4
43865: PUSH
43866: NOP4
43870: PPUSH
43871: NOP4
43875: PUSH
43876: NOP4
43880: PUSH
43881: NOP4
43885: ARRAY
43886: PUSH
43887: LD_INT 1
43889: PLUS
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PPUSH
43895: NOP4
43899: PUSH
43900: NOP4
43904: PUSH
43905: NOP4
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: PPUSH
43915: NOP4
43919: ST_TO_ADDR
// exit ;
43920: POP
43921: POP
43922: POP
43923: POP
43924: GO 44099
// end ;
43926: GO 43837
43928: POP
43929: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
43930: NOP4
43934: PUSH
43935: NOP4
43939: PUSH
43940: NOP4
43944: ARRAY
43945: PPUSH
43946: LD_INT 2
43948: PUSH
43949: LD_INT 30
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 30
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: LIST
43973: PPUSH
43974: NOP4
43978: ST_TO_ADDR
// if not depot then
43979: NOP4
43983: NOT
43984: IFFALSE 43988
// continue ;
43986: GO 43806
// for j in depot do
43988: NOP4
43992: PUSH
43993: NOP4
43997: PUSH
43998: FOR_IN
43999: IFFALSE 44093
// if GetDistUnitXY ( j , x , y ) < 30 then
44001: NOP4
44005: PPUSH
44006: NOP4
44010: PPUSH
44011: NOP4
44015: PPUSH
44016: NOP4
44020: PUSH
44021: LD_INT 30
44023: LESS
44024: IFFALSE 44091
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
44026: NOP4
44030: PUSH
44031: NOP4
44035: PPUSH
44036: NOP4
44040: PUSH
44041: NOP4
44045: PUSH
44046: NOP4
44050: ARRAY
44051: PUSH
44052: LD_INT 1
44054: PLUS
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PPUSH
44060: NOP4
44064: PUSH
44065: NOP4
44069: PUSH
44070: NOP4
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: LIST
44079: PPUSH
44080: NOP4
44084: ST_TO_ADDR
// exit ;
44085: POP
44086: POP
44087: POP
44088: POP
44089: GO 44099
// end ;
44091: GO 43998
44093: POP
44094: POP
// end ;
44095: GO 43806
44097: POP
44098: POP
// end ;
44099: LD_VAR 0 6
44103: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
44104: LD_INT 0
44106: PPUSH
44107: PPUSH
44108: PPUSH
44109: PPUSH
// if not mc_bases or not skirmish then
44110: NOP4
44114: NOT
44115: PUSH
44116: NOP4
44120: NOT
44121: OR
44122: IFFALSE 44126
// exit ;
44124: GO 44403
// side := GetSide ( lab ) ;
44126: NOP4
44130: PUSH
44131: NOP4
44135: PPUSH
44136: NOP4
44140: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
44141: NOP4
44145: PUSH
44146: NOP4
44150: IN
44151: NOT
44152: PUSH
44153: NOP4
44157: NOT
44158: OR
44159: PUSH
44160: NOP4
44164: NOT
44165: OR
44166: IFFALSE 44170
// exit ;
44168: GO 44403
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
44170: NOP4
44174: PUSH
44175: NOP4
44179: PPUSH
44180: NOP4
44184: PPUSH
44185: NOP4
44189: PUSH
44190: NOP4
44194: ARRAY
44195: PUSH
44196: NOP4
44200: DIFF
44201: PPUSH
44202: NOP4
44206: ST_TO_ADDR
// for i = 1 to mc_bases do
44207: NOP4
44211: PUSH
44212: DOUBLE
44213: LD_INT 1
44215: DEC
44216: ST_TO_ADDR
44217: NOP4
44221: PUSH
44222: FOR_TO
44223: IFFALSE 44401
// begin if lab in mc_bases [ i ] then
44225: NOP4
44229: PUSH
44230: NOP4
44234: PUSH
44235: NOP4
44239: ARRAY
44240: IN
44241: IFFALSE 44399
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
44243: NOP4
44247: PUSH
44248: LD_INT 11
44250: PUSH
44251: LD_INT 4
44253: PUSH
44254: LD_INT 3
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: IN
44266: PUSH
44267: NOP4
44271: PUSH
44272: NOP4
44276: ARRAY
44277: AND
44278: IFFALSE 44399
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
44280: NOP4
44284: PUSH
44285: NOP4
44289: PUSH
44290: NOP4
44294: ARRAY
44295: PUSH
44296: LD_INT 1
44298: ARRAY
44299: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
44300: NOP4
44304: PUSH
44305: NOP4
44309: PPUSH
44310: NOP4
44314: PPUSH
44315: EMPTY
44316: PPUSH
44317: NOP4
44321: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
44322: NOP4
44326: PPUSH
44327: LD_INT 0
44329: PPUSH
44330: NOP4
// ComExitBuilding ( tmp ) ;
44334: NOP4
44338: PPUSH
44339: NOP4
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
44343: NOP4
44347: PUSH
44348: NOP4
44352: PPUSH
44353: NOP4
44357: PPUSH
44358: NOP4
44362: PUSH
44363: NOP4
44367: ARRAY
44368: PPUSH
44369: LD_INT 1
44371: PPUSH
44372: NOP4
44376: PPUSH
44377: NOP4
44381: PPUSH
44382: NOP4
44386: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
44387: NOP4
44391: PPUSH
44392: LD_INT 112
44394: PPUSH
44395: NOP4
// end ; end ; end ;
44399: GO 44222
44401: POP
44402: POP
// end ;
44403: LD_VAR 0 3
44407: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
44408: LD_INT 0
44410: PPUSH
44411: PPUSH
44412: PPUSH
44413: PPUSH
44414: PPUSH
44415: PPUSH
44416: PPUSH
44417: PPUSH
// if not mc_bases or not skirmish then
44418: NOP4
44422: NOT
44423: PUSH
44424: NOP4
44428: NOT
44429: OR
44430: IFFALSE 44434
// exit ;
44432: GO 45805
// for i = 1 to mc_bases do
44434: NOP4
44438: PUSH
44439: DOUBLE
44440: LD_INT 1
44442: DEC
44443: ST_TO_ADDR
44444: NOP4
44448: PUSH
44449: FOR_TO
44450: IFFALSE 45803
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
44452: NOP4
44456: PUSH
44457: NOP4
44461: PUSH
44462: NOP4
44466: ARRAY
44467: IN
44468: PUSH
44469: NOP4
44473: PUSH
44474: NOP4
44478: PUSH
44479: NOP4
44483: ARRAY
44484: IN
44485: OR
44486: PUSH
44487: NOP4
44491: PUSH
44492: NOP4
44496: PUSH
44497: NOP4
44501: ARRAY
44502: IN
44503: OR
44504: PUSH
44505: NOP4
44509: PUSH
44510: NOP4
44514: PUSH
44515: NOP4
44519: ARRAY
44520: IN
44521: OR
44522: PUSH
44523: NOP4
44527: PUSH
44528: NOP4
44532: PUSH
44533: NOP4
44537: ARRAY
44538: IN
44539: OR
44540: PUSH
44541: NOP4
44545: PUSH
44546: NOP4
44550: PUSH
44551: NOP4
44555: ARRAY
44556: IN
44557: OR
44558: IFFALSE 45801
// begin if un in mc_ape [ i ] then
44560: NOP4
44564: PUSH
44565: NOP4
44569: PUSH
44570: NOP4
44574: ARRAY
44575: IN
44576: IFFALSE 44615
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
44578: NOP4
44582: PUSH
44583: NOP4
44587: PPUSH
44588: NOP4
44592: PPUSH
44593: NOP4
44597: PUSH
44598: NOP4
44602: ARRAY
44603: PUSH
44604: NOP4
44608: DIFF
44609: PPUSH
44610: NOP4
44614: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
44615: NOP4
44619: PUSH
44620: NOP4
44624: PUSH
44625: NOP4
44629: ARRAY
44630: IN
44631: IFFALSE 44655
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
44633: NOP4
44637: PUSH
44638: NOP4
44642: PPUSH
44643: NOP4
44647: PPUSH
44648: EMPTY
44649: PPUSH
44650: NOP4
44654: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
44655: NOP4
44659: PPUSH
44660: NOP4
44664: PUSH
44665: LD_INT 2
44667: EQUAL
44668: PUSH
44669: NOP4
44673: PPUSH
44674: NOP4
44678: PUSH
44679: LD_INT 20
44681: EQUAL
44682: PUSH
44683: NOP4
44687: PUSH
44688: NOP4
44692: PUSH
44693: NOP4
44697: ARRAY
44698: IN
44699: OR
44700: PUSH
44701: NOP4
44705: PPUSH
44706: NOP4
44710: PUSH
44711: LD_INT 12
44713: PUSH
44714: LD_INT 51
44716: PUSH
44717: NOP4
44721: PUSH
44722: LD_INT 32
44724: PUSH
44725: LD_INT 13
44727: PUSH
44728: LD_INT 52
44730: PUSH
44731: LD_INT 31
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: IN
44743: OR
44744: AND
44745: IFFALSE 45053
// begin if un in mc_defender [ i ] then
44747: NOP4
44751: PUSH
44752: NOP4
44756: PUSH
44757: NOP4
44761: ARRAY
44762: IN
44763: IFFALSE 44802
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
44765: NOP4
44769: PUSH
44770: NOP4
44774: PPUSH
44775: NOP4
44779: PPUSH
44780: NOP4
44784: PUSH
44785: NOP4
44789: ARRAY
44790: PUSH
44791: NOP4
44795: DIFF
44796: PPUSH
44797: NOP4
44801: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
44802: NOP4
44806: PUSH
44807: NOP4
44811: PPUSH
44812: LD_INT 3
44814: PPUSH
44815: NOP4
44819: ST_TO_ADDR
// if fac then
44820: NOP4
44824: IFFALSE 45053
// begin for j in fac do
44826: NOP4
44830: PUSH
44831: NOP4
44835: PUSH
44836: FOR_IN
44837: IFFALSE 45051
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
44839: NOP4
44843: PUSH
44844: NOP4
44848: PPUSH
44849: NOP4
44853: PPUSH
44854: NOP4
44858: PPUSH
44859: NOP4
44863: PPUSH
44864: NOP4
44868: PPUSH
44869: NOP4
44873: PPUSH
44874: NOP4
44878: PPUSH
44879: NOP4
44883: PPUSH
44884: NOP4
44888: PPUSH
44889: NOP4
44893: ST_TO_ADDR
// if components then
44894: NOP4
44898: IFFALSE 45049
// begin if GetWeapon ( un ) = ar_control_tower then
44900: NOP4
44904: PPUSH
44905: NOP4
44909: PUSH
44910: LD_INT 31
44912: EQUAL
44913: IFFALSE 45030
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
44915: NOP4
44919: PPUSH
44920: NOP4
44924: PPUSH
44925: LD_INT 0
44927: PPUSH
44928: NOP4
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
44932: NOP4
44936: PUSH
44937: NOP4
44941: PPUSH
44942: NOP4
44946: PPUSH
44947: NOP4
44951: PUSH
44952: NOP4
44956: ARRAY
44957: PUSH
44958: NOP4
44962: PPUSH
44963: NOP4
44967: DIFF
44968: PPUSH
44969: NOP4
44973: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
44974: NOP4
44978: PUSH
44979: NOP4
44983: PUSH
44984: NOP4
44988: ARRAY
44989: PPUSH
44990: LD_INT 1
44992: PPUSH
44993: NOP4
44997: PPUSH
44998: NOP4
45002: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
45003: NOP4
45007: PUSH
45008: NOP4
45012: PPUSH
45013: NOP4
45017: PPUSH
45018: NOP4
45022: PPUSH
45023: NOP4
45027: ST_TO_ADDR
// end else
45028: GO 45047
// MC_InsertProduceList ( i , [ components ] ) ;
45030: NOP4
45034: PPUSH
45035: NOP4
45039: PUSH
45040: EMPTY
45041: LIST
45042: PPUSH
45043: NOP4
// break ;
45047: GO 45051
// end ; end ;
45049: GO 44836
45051: POP
45052: POP
// end ; end ; if GetType ( un ) = unit_building then
45053: NOP4
45057: PPUSH
45058: NOP4
45062: PUSH
45063: LD_INT 3
45065: EQUAL
45066: IFFALSE 45469
// begin btype := GetBType ( un ) ;
45068: NOP4
45072: PUSH
45073: NOP4
45077: PPUSH
45078: NOP4
45082: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
45083: NOP4
45087: PUSH
45088: LD_INT 29
45090: PUSH
45091: LD_INT 30
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: IN
45098: IFFALSE 45171
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
45100: NOP4
45104: PPUSH
45105: NOP4
45109: PPUSH
45110: NOP4
45114: PPUSH
45115: NOP4
45119: PPUSH
45120: NOP4
45124: PPUSH
45125: NOP4
45129: PPUSH
45130: NOP4
45134: NOT
45135: IFFALSE 45171
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
45137: NOP4
45141: PPUSH
45142: NOP4
45146: PPUSH
45147: NOP4
45151: PPUSH
45152: NOP4
45156: PPUSH
45157: NOP4
45161: PPUSH
45162: NOP4
45166: PPUSH
45167: NOP4
// end ; if btype = b_warehouse then
45171: NOP4
45175: PUSH
45176: LD_INT 1
45178: EQUAL
45179: IFFALSE 45197
// begin btype := b_depot ;
45181: NOP4
45185: PUSH
45186: LD_INT 0
45188: ST_TO_ADDR
// pos := 1 ;
45189: NOP4
45193: PUSH
45194: LD_INT 1
45196: ST_TO_ADDR
// end ; if btype = b_factory then
45197: NOP4
45201: PUSH
45202: LD_INT 3
45204: EQUAL
45205: IFFALSE 45223
// begin btype := b_workshop ;
45207: NOP4
45211: PUSH
45212: LD_INT 2
45214: ST_TO_ADDR
// pos := 1 ;
45215: NOP4
45219: PUSH
45220: LD_INT 1
45222: ST_TO_ADDR
// end ; if btype = b_barracks then
45223: NOP4
45227: PUSH
45228: LD_INT 5
45230: EQUAL
45231: IFFALSE 45241
// btype := b_armoury ;
45233: NOP4
45237: PUSH
45238: LD_INT 4
45240: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
45241: NOP4
45245: PUSH
45246: LD_INT 7
45248: PUSH
45249: LD_INT 8
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: IN
45256: IFFALSE 45266
// btype := b_lab ;
45258: NOP4
45262: PUSH
45263: LD_INT 6
45265: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
45266: NOP4
45270: PUSH
45271: NOP4
45275: PPUSH
45276: NOP4
45280: PUSH
45281: NOP4
45285: PUSH
45286: NOP4
45290: ARRAY
45291: PUSH
45292: LD_INT 1
45294: PLUS
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PPUSH
45300: NOP4
45304: PUSH
45305: NOP4
45309: PPUSH
45310: NOP4
45314: PUSH
45315: NOP4
45319: PPUSH
45320: NOP4
45324: PUSH
45325: NOP4
45329: PPUSH
45330: NOP4
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: PPUSH
45341: NOP4
45345: ST_TO_ADDR
// if pos = 1 then
45346: NOP4
45350: PUSH
45351: LD_INT 1
45353: EQUAL
45354: IFFALSE 45469
// begin tmp := mc_build_list [ i ] ;
45356: NOP4
45360: PUSH
45361: NOP4
45365: PUSH
45366: NOP4
45370: ARRAY
45371: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
45372: NOP4
45376: PPUSH
45377: LD_INT 2
45379: PUSH
45380: LD_INT 30
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 30
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: LIST
45404: PPUSH
45405: NOP4
45409: IFFALSE 45419
// pos := 2 ;
45411: NOP4
45415: PUSH
45416: LD_INT 2
45418: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
45419: NOP4
45423: PUSH
45424: NOP4
45428: PPUSH
45429: NOP4
45433: PPUSH
45434: NOP4
45438: PPUSH
45439: NOP4
45443: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
45444: NOP4
45448: PUSH
45449: NOP4
45453: PPUSH
45454: NOP4
45458: PPUSH
45459: NOP4
45463: PPUSH
45464: NOP4
45468: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
45469: NOP4
45473: PUSH
45474: NOP4
45478: PUSH
45479: NOP4
45483: ARRAY
45484: IN
45485: IFFALSE 45524
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
45487: NOP4
45491: PUSH
45492: NOP4
45496: PPUSH
45497: NOP4
45501: PPUSH
45502: NOP4
45506: PUSH
45507: NOP4
45511: ARRAY
45512: PUSH
45513: NOP4
45517: DIFF
45518: PPUSH
45519: NOP4
45523: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
45524: NOP4
45528: PUSH
45529: NOP4
45533: PUSH
45534: NOP4
45538: ARRAY
45539: IN
45540: IFFALSE 45579
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
45542: NOP4
45546: PUSH
45547: NOP4
45551: PPUSH
45552: NOP4
45556: PPUSH
45557: NOP4
45561: PUSH
45562: NOP4
45566: ARRAY
45567: PUSH
45568: NOP4
45572: DIFF
45573: PPUSH
45574: NOP4
45578: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
45579: NOP4
45583: PUSH
45584: NOP4
45588: PUSH
45589: NOP4
45593: ARRAY
45594: IN
45595: IFFALSE 45634
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
45597: NOP4
45601: PUSH
45602: NOP4
45606: PPUSH
45607: NOP4
45611: PPUSH
45612: NOP4
45616: PUSH
45617: NOP4
45621: ARRAY
45622: PUSH
45623: NOP4
45627: DIFF
45628: PPUSH
45629: NOP4
45633: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
45634: NOP4
45638: PUSH
45639: NOP4
45643: PUSH
45644: NOP4
45648: ARRAY
45649: IN
45650: IFFALSE 45689
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
45652: NOP4
45656: PUSH
45657: NOP4
45661: PPUSH
45662: NOP4
45666: PPUSH
45667: NOP4
45671: PUSH
45672: NOP4
45676: ARRAY
45677: PUSH
45678: NOP4
45682: DIFF
45683: PPUSH
45684: NOP4
45688: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
45689: NOP4
45693: PUSH
45694: NOP4
45698: PUSH
45699: NOP4
45703: ARRAY
45704: IN
45705: IFFALSE 45744
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
45707: NOP4
45711: PUSH
45712: NOP4
45716: PPUSH
45717: NOP4
45721: PPUSH
45722: NOP4
45726: PUSH
45727: NOP4
45731: ARRAY
45732: PUSH
45733: NOP4
45737: DIFF
45738: PPUSH
45739: NOP4
45743: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
45744: NOP4
45748: PUSH
45749: NOP4
45753: PUSH
45754: NOP4
45758: ARRAY
45759: IN
45760: IFFALSE 45799
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
45762: NOP4
45766: PUSH
45767: NOP4
45771: PPUSH
45772: NOP4
45776: PPUSH
45777: NOP4
45781: PUSH
45782: NOP4
45786: ARRAY
45787: PUSH
45788: NOP4
45792: DIFF
45793: PPUSH
45794: NOP4
45798: ST_TO_ADDR
// end ; break ;
45799: GO 45803
// end ;
45801: GO 44449
45803: POP
45804: POP
// end ;
45805: LD_VAR 0 2
45809: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
45810: LD_INT 0
45812: PPUSH
45813: PPUSH
45814: PPUSH
// if not mc_bases or not skirmish then
45815: NOP4
45819: NOT
45820: PUSH
45821: NOP4
45825: NOT
45826: OR
45827: IFFALSE 45831
// exit ;
45829: GO 46046
// for i = 1 to mc_bases do
45831: NOP4
45835: PUSH
45836: DOUBLE
45837: LD_INT 1
45839: DEC
45840: ST_TO_ADDR
45841: NOP4
45845: PUSH
45846: FOR_TO
45847: IFFALSE 46044
// begin if building in mc_construct_list [ i ] then
45849: NOP4
45853: PUSH
45854: NOP4
45858: PUSH
45859: NOP4
45863: ARRAY
45864: IN
45865: IFFALSE 46042
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
45867: NOP4
45871: PUSH
45872: NOP4
45876: PPUSH
45877: NOP4
45881: PPUSH
45882: NOP4
45886: PUSH
45887: NOP4
45891: ARRAY
45892: PUSH
45893: NOP4
45897: DIFF
45898: PPUSH
45899: NOP4
45903: ST_TO_ADDR
// if building in mc_lab [ i ] then
45904: NOP4
45908: PUSH
45909: NOP4
45913: PUSH
45914: NOP4
45918: ARRAY
45919: IN
45920: IFFALSE 45975
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
45922: NOP4
45926: PUSH
45927: NOP4
45931: PPUSH
45932: NOP4
45936: PPUSH
45937: NOP4
45941: PUSH
45942: NOP4
45946: ARRAY
45947: PPUSH
45948: LD_INT 1
45950: PPUSH
45951: NOP4
45955: PUSH
45956: NOP4
45960: ARRAY
45961: PPUSH
45962: LD_INT 0
45964: PPUSH
45965: NOP4
45969: PPUSH
45970: NOP4
45974: ST_TO_ADDR
// if not building in mc_bases [ i ] then
45975: NOP4
45979: PUSH
45980: NOP4
45984: PUSH
45985: NOP4
45989: ARRAY
45990: IN
45991: NOT
45992: IFFALSE 46038
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
45994: NOP4
45998: PUSH
45999: NOP4
46003: PPUSH
46004: NOP4
46008: PUSH
46009: NOP4
46013: PUSH
46014: NOP4
46018: ARRAY
46019: PUSH
46020: LD_INT 1
46022: PLUS
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PPUSH
46028: NOP4
46032: PPUSH
46033: NOP4
46037: ST_TO_ADDR
// exit ;
46038: POP
46039: POP
46040: GO 46046
// end ; end ;
46042: GO 45846
46044: POP
46045: POP
// end ;
46046: LD_VAR 0 2
46050: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
46051: LD_INT 0
46053: PPUSH
46054: PPUSH
46055: PPUSH
46056: PPUSH
46057: PPUSH
46058: PPUSH
46059: PPUSH
// if not mc_bases or not skirmish then
46060: NOP4
46064: NOT
46065: PUSH
46066: NOP4
46070: NOT
46071: OR
46072: IFFALSE 46076
// exit ;
46074: GO 46737
// for i = 1 to mc_bases do
46076: NOP4
46080: PUSH
46081: DOUBLE
46082: LD_INT 1
46084: DEC
46085: ST_TO_ADDR
46086: NOP4
46090: PUSH
46091: FOR_TO
46092: IFFALSE 46735
// begin if building in mc_construct_list [ i ] then
46094: NOP4
46098: PUSH
46099: NOP4
46103: PUSH
46104: NOP4
46108: ARRAY
46109: IN
46110: IFFALSE 46733
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
46112: NOP4
46116: PUSH
46117: NOP4
46121: PPUSH
46122: NOP4
46126: PPUSH
46127: NOP4
46131: PUSH
46132: NOP4
46136: ARRAY
46137: PUSH
46138: NOP4
46142: DIFF
46143: PPUSH
46144: NOP4
46148: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
46149: NOP4
46153: PUSH
46154: NOP4
46158: PPUSH
46159: NOP4
46163: PUSH
46164: NOP4
46168: PUSH
46169: NOP4
46173: ARRAY
46174: PUSH
46175: LD_INT 1
46177: PLUS
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PPUSH
46183: NOP4
46187: PPUSH
46188: NOP4
46192: ST_TO_ADDR
// btype := GetBType ( building ) ;
46193: NOP4
46197: PUSH
46198: NOP4
46202: PPUSH
46203: NOP4
46207: ST_TO_ADDR
// side := GetSide ( building ) ;
46208: NOP4
46212: PUSH
46213: NOP4
46217: PPUSH
46218: NOP4
46222: ST_TO_ADDR
// if btype = b_lab then
46223: NOP4
46227: PUSH
46228: LD_INT 6
46230: EQUAL
46231: IFFALSE 46281
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
46233: NOP4
46237: PUSH
46238: NOP4
46242: PPUSH
46243: NOP4
46247: PUSH
46248: NOP4
46252: PUSH
46253: NOP4
46257: ARRAY
46258: PUSH
46259: LD_INT 1
46261: PLUS
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PPUSH
46267: NOP4
46271: PPUSH
46272: NOP4
46276: ST_TO_ADDR
// exit ;
46277: POP
46278: POP
46279: GO 46737
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
46281: NOP4
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: LD_INT 4
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: IN
46300: IFFALSE 46424
// begin if btype = b_armoury then
46302: NOP4
46306: PUSH
46307: LD_INT 4
46309: EQUAL
46310: IFFALSE 46320
// btype := b_barracks ;
46312: NOP4
46316: PUSH
46317: LD_INT 5
46319: ST_TO_ADDR
// if btype = b_depot then
46320: NOP4
46324: PUSH
46325: LD_INT 0
46327: EQUAL
46328: IFFALSE 46338
// btype := b_warehouse ;
46330: NOP4
46334: PUSH
46335: LD_INT 1
46337: ST_TO_ADDR
// if btype = b_workshop then
46338: NOP4
46342: PUSH
46343: LD_INT 2
46345: EQUAL
46346: IFFALSE 46356
// btype := b_factory ;
46348: NOP4
46352: PUSH
46353: LD_INT 3
46355: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
46356: NOP4
46360: PPUSH
46361: NOP4
46365: PPUSH
46366: NOP4
46370: PUSH
46371: LD_INT 1
46373: EQUAL
46374: IFFALSE 46420
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
46376: NOP4
46380: PUSH
46381: NOP4
46385: PPUSH
46386: NOP4
46390: PUSH
46391: NOP4
46395: PUSH
46396: NOP4
46400: ARRAY
46401: PUSH
46402: LD_INT 1
46404: PLUS
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PPUSH
46410: NOP4
46414: PPUSH
46415: NOP4
46419: ST_TO_ADDR
// exit ;
46420: POP
46421: POP
46422: GO 46737
// end ; if btype in [ b_bunker , b_turret ] then
46424: NOP4
46428: PUSH
46429: LD_INT 32
46431: PUSH
46432: LD_INT 33
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: IN
46439: IFFALSE 46729
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
46441: NOP4
46445: PUSH
46446: NOP4
46450: PPUSH
46451: NOP4
46455: PUSH
46456: NOP4
46460: PUSH
46461: NOP4
46465: ARRAY
46466: PUSH
46467: LD_INT 1
46469: PLUS
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PPUSH
46475: NOP4
46479: PPUSH
46480: NOP4
46484: ST_TO_ADDR
// if btype = b_bunker then
46485: NOP4
46489: PUSH
46490: LD_INT 32
46492: EQUAL
46493: IFFALSE 46729
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
46495: NOP4
46499: PUSH
46500: NOP4
46504: PPUSH
46505: NOP4
46509: PUSH
46510: NOP4
46514: PUSH
46515: NOP4
46519: ARRAY
46520: PUSH
46521: LD_INT 1
46523: PLUS
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PPUSH
46529: NOP4
46533: PPUSH
46534: NOP4
46538: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
46539: NOP4
46543: PUSH
46544: NOP4
46548: PUSH
46549: NOP4
46553: ARRAY
46554: PPUSH
46555: LD_INT 25
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 3
46567: PUSH
46568: LD_INT 54
46570: PUSH
46571: EMPTY
46572: LIST
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PPUSH
46582: NOP4
46586: ST_TO_ADDR
// if tmp then
46587: NOP4
46591: IFFALSE 46597
// exit ;
46593: POP
46594: POP
46595: GO 46737
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
46597: NOP4
46601: PUSH
46602: NOP4
46606: PUSH
46607: NOP4
46611: ARRAY
46612: PPUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 30
46618: PUSH
46619: LD_INT 4
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 30
46628: PUSH
46629: LD_INT 5
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: PPUSH
46641: NOP4
46645: ST_TO_ADDR
// if not tmp then
46646: NOP4
46650: NOT
46651: IFFALSE 46657
// exit ;
46653: POP
46654: POP
46655: GO 46737
// for j in tmp do
46657: NOP4
46661: PUSH
46662: NOP4
46666: PUSH
46667: FOR_IN
46668: IFFALSE 46727
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
46670: NOP4
46674: PUSH
46675: NOP4
46679: PPUSH
46680: NOP4
46684: PPUSH
46685: LD_INT 25
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PPUSH
46695: NOP4
46699: ST_TO_ADDR
// if units then
46700: NOP4
46704: IFFALSE 46725
// begin ComExitBuilding ( units [ 1 ] ) ;
46706: NOP4
46710: PUSH
46711: LD_INT 1
46713: ARRAY
46714: PPUSH
46715: NOP4
// exit ;
46719: POP
46720: POP
46721: POP
46722: POP
46723: GO 46737
// end ; end ;
46725: GO 46667
46727: POP
46728: POP
// end ; end ; exit ;
46729: POP
46730: POP
46731: GO 46737
// end ; end ;
46733: GO 46091
46735: POP
46736: POP
// end ;
46737: LD_VAR 0 2
46741: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
46742: LD_INT 0
46744: PPUSH
46745: PPUSH
46746: PPUSH
46747: PPUSH
46748: PPUSH
46749: PPUSH
46750: PPUSH
// if not mc_bases or not skirmish then
46751: NOP4
46755: NOT
46756: PUSH
46757: NOP4
46761: NOT
46762: OR
46763: IFFALSE 46767
// exit ;
46765: GO 46998
// btype := GetBType ( building ) ;
46767: NOP4
46771: PUSH
46772: NOP4
46776: PPUSH
46777: NOP4
46781: ST_TO_ADDR
// x := GetX ( building ) ;
46782: NOP4
46786: PUSH
46787: NOP4
46791: PPUSH
46792: NOP4
46796: ST_TO_ADDR
// y := GetY ( building ) ;
46797: NOP4
46801: PUSH
46802: NOP4
46806: PPUSH
46807: NOP4
46811: ST_TO_ADDR
// d := GetDir ( building ) ;
46812: NOP4
46816: PUSH
46817: NOP4
46821: PPUSH
46822: NOP4
46826: ST_TO_ADDR
// for i = 1 to mc_bases do
46827: NOP4
46831: PUSH
46832: DOUBLE
46833: LD_INT 1
46835: DEC
46836: ST_TO_ADDR
46837: NOP4
46841: PUSH
46842: FOR_TO
46843: IFFALSE 46996
// begin if not mc_build_list [ i ] then
46845: NOP4
46849: PUSH
46850: NOP4
46854: ARRAY
46855: NOT
46856: IFFALSE 46860
// continue ;
46858: GO 46842
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
46860: NOP4
46864: PUSH
46865: NOP4
46869: PUSH
46870: NOP4
46874: PUSH
46875: NOP4
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: PPUSH
46886: NOP4
46890: PUSH
46891: NOP4
46895: ARRAY
46896: PUSH
46897: LD_INT 1
46899: ARRAY
46900: PPUSH
46901: NOP4
46905: IFFALSE 46994
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
46907: NOP4
46911: PUSH
46912: NOP4
46916: PPUSH
46917: NOP4
46921: PPUSH
46922: NOP4
46926: PUSH
46927: NOP4
46931: ARRAY
46932: PPUSH
46933: LD_INT 1
46935: PPUSH
46936: NOP4
46940: PPUSH
46941: NOP4
46945: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
46946: NOP4
46950: PUSH
46951: NOP4
46955: PPUSH
46956: NOP4
46960: PUSH
46961: NOP4
46965: PUSH
46966: NOP4
46970: ARRAY
46971: PUSH
46972: LD_INT 1
46974: PLUS
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PPUSH
46980: NOP4
46984: PPUSH
46985: NOP4
46989: ST_TO_ADDR
// exit ;
46990: POP
46991: POP
46992: GO 46998
// end ; end ;
46994: GO 46842
46996: POP
46997: POP
// end ;
46998: LD_VAR 0 3
47002: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
47003: LD_INT 0
47005: PPUSH
47006: PPUSH
47007: PPUSH
// if not mc_bases or not skirmish then
47008: NOP4
47012: NOT
47013: PUSH
47014: NOP4
47018: NOT
47019: OR
47020: IFFALSE 47024
// exit ;
47022: GO 47214
// for i = 1 to mc_bases do
47024: NOP4
47028: PUSH
47029: DOUBLE
47030: LD_INT 1
47032: DEC
47033: ST_TO_ADDR
47034: NOP4
47038: PUSH
47039: FOR_TO
47040: IFFALSE 47127
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
47042: NOP4
47046: PUSH
47047: NOP4
47051: PUSH
47052: NOP4
47056: ARRAY
47057: IN
47058: PUSH
47059: NOP4
47063: PUSH
47064: NOP4
47068: PUSH
47069: NOP4
47073: ARRAY
47074: IN
47075: NOT
47076: AND
47077: IFFALSE 47125
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
47079: NOP4
47083: PUSH
47084: NOP4
47088: PPUSH
47089: NOP4
47093: PUSH
47094: NOP4
47098: PUSH
47099: NOP4
47103: ARRAY
47104: PUSH
47105: LD_INT 1
47107: PLUS
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PPUSH
47113: NOP4
47117: PPUSH
47118: NOP4
47122: ST_TO_ADDR
// break ;
47123: GO 47127
// end ; end ;
47125: GO 47039
47127: POP
47128: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
47129: NOP4
47133: PPUSH
47134: NOP4
47138: PUSH
47139: NOP4
47143: IN
47144: PUSH
47145: NOP4
47149: PPUSH
47150: NOP4
47154: PUSH
47155: LD_INT 5
47157: EQUAL
47158: AND
47159: PUSH
47160: NOP4
47164: PPUSH
47165: NOP4
47169: PUSH
47170: LD_INT 18
47172: NONEQUAL
47173: AND
47174: IFFALSE 47214
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
47176: NOP4
47180: PPUSH
47181: NOP4
47185: PUSH
47186: LD_INT 5
47188: PUSH
47189: LD_INT 8
47191: PUSH
47192: LD_INT 9
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: LIST
47199: IN
47200: IFFALSE 47214
// SetClass ( unit , 1 ) ;
47202: NOP4
47206: PPUSH
47207: LD_INT 1
47209: PPUSH
47210: NOP4
// end ;
47214: LD_VAR 0 3
47218: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
47219: LD_INT 0
47221: PPUSH
47222: PPUSH
// if not mc_bases or not skirmish then
47223: NOP4
47227: NOT
47228: PUSH
47229: NOP4
47233: NOT
47234: OR
47235: IFFALSE 47239
// exit ;
47237: GO 47355
// if GetLives ( abandoned_vehicle ) > 250 then
47239: NOP4
47243: PPUSH
47244: NOP4
47248: PUSH
47249: LD_INT 250
47251: GREATER
47252: IFFALSE 47256
// exit ;
47254: GO 47355
// for i = 1 to mc_bases do
47256: NOP4
47260: PUSH
47261: DOUBLE
47262: LD_INT 1
47264: DEC
47265: ST_TO_ADDR
47266: NOP4
47270: PUSH
47271: FOR_TO
47272: IFFALSE 47353
// begin if driver in mc_bases [ i ] then
47274: NOP4
47278: PUSH
47279: NOP4
47283: PUSH
47284: NOP4
47288: ARRAY
47289: IN
47290: IFFALSE 47351
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
47292: NOP4
47296: PPUSH
47297: NOP4
47301: PUSH
47302: NOP4
47306: ARRAY
47307: PPUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 30
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 30
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: PPUSH
47336: NOP4
47340: PUSH
47341: LD_INT 1
47343: ARRAY
47344: PPUSH
47345: NOP4
// break ;
47349: GO 47353
// end ; end ;
47351: GO 47271
47353: POP
47354: POP
// end ; end_of_file
47355: LD_VAR 0 5
47359: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
47360: LD_INT 0
47362: PPUSH
47363: PPUSH
// if exist_mode then
47364: NOP4
47368: IFFALSE 47393
// unit := CreateCharacter ( prefix & ident ) else
47370: NOP4
47374: PUSH
47375: NOP4
47379: PUSH
47380: NOP4
47384: STR
47385: PPUSH
47386: NOP4
47390: ST_TO_ADDR
47391: GO 47408
// unit := NewCharacter ( ident ) ;
47393: NOP4
47397: PUSH
47398: NOP4
47402: PPUSH
47403: NOP4
47407: ST_TO_ADDR
// result := unit ;
47408: NOP4
47412: PUSH
47413: NOP4
47417: ST_TO_ADDR
// end ;
47418: LD_VAR 0 4
47422: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
47423: LD_INT 0
47425: PPUSH
47426: PPUSH
// if not side or not nation then
47427: NOP4
47431: NOT
47432: PUSH
47433: NOP4
47437: NOT
47438: OR
47439: IFFALSE 47443
// exit ;
47441: GO 48207
// case nation of nation_american :
47443: NOP4
47447: PUSH
47448: LD_INT 1
47450: DOUBLE
47451: EQUAL
47452: IFTRUE 47456
47454: GO 47670
47456: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
47457: NOP4
47461: PUSH
47462: LD_INT 35
47464: PUSH
47465: LD_INT 45
47467: PUSH
47468: LD_INT 46
47470: PUSH
47471: LD_INT 47
47473: PUSH
47474: LD_INT 82
47476: PUSH
47477: LD_INT 83
47479: PUSH
47480: LD_INT 84
47482: PUSH
47483: LD_INT 85
47485: PUSH
47486: LD_INT 86
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 6
47497: PUSH
47498: LD_INT 15
47500: PUSH
47501: LD_INT 16
47503: PUSH
47504: LD_INT 7
47506: PUSH
47507: LD_INT 12
47509: PUSH
47510: LD_INT 13
47512: PUSH
47513: LD_INT 10
47515: PUSH
47516: LD_INT 14
47518: PUSH
47519: LD_INT 20
47521: PUSH
47522: LD_INT 21
47524: PUSH
47525: LD_INT 22
47527: PUSH
47528: LD_INT 25
47530: PUSH
47531: LD_INT 32
47533: PUSH
47534: LD_INT 27
47536: PUSH
47537: LD_INT 36
47539: PUSH
47540: LD_INT 69
47542: PUSH
47543: LD_INT 39
47545: PUSH
47546: LD_INT 34
47548: PUSH
47549: LD_INT 40
47551: PUSH
47552: LD_INT 48
47554: PUSH
47555: LD_INT 49
47557: PUSH
47558: LD_INT 50
47560: PUSH
47561: LD_INT 51
47563: PUSH
47564: LD_INT 52
47566: PUSH
47567: LD_INT 53
47569: PUSH
47570: LD_INT 54
47572: PUSH
47573: LD_INT 55
47575: PUSH
47576: LD_INT 56
47578: PUSH
47579: LD_INT 57
47581: PUSH
47582: LD_INT 58
47584: PUSH
47585: LD_INT 59
47587: PUSH
47588: LD_INT 60
47590: PUSH
47591: LD_INT 61
47593: PUSH
47594: LD_INT 62
47596: PUSH
47597: LD_INT 80
47599: PUSH
47600: LD_INT 82
47602: PUSH
47603: LD_INT 83
47605: PUSH
47606: LD_INT 84
47608: PUSH
47609: LD_INT 85
47611: PUSH
47612: LD_INT 86
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: ST_TO_ADDR
47668: GO 48131
47670: LD_INT 2
47672: DOUBLE
47673: EQUAL
47674: IFTRUE 47678
47676: GO 47900
47678: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
47679: NOP4
47683: PUSH
47684: LD_INT 35
47686: PUSH
47687: LD_INT 45
47689: PUSH
47690: LD_INT 46
47692: PUSH
47693: LD_INT 47
47695: PUSH
47696: LD_INT 82
47698: PUSH
47699: LD_INT 83
47701: PUSH
47702: LD_INT 84
47704: PUSH
47705: LD_INT 85
47707: PUSH
47708: LD_INT 87
47710: PUSH
47711: LD_INT 70
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 11
47719: PUSH
47720: LD_INT 3
47722: PUSH
47723: LD_INT 4
47725: PUSH
47726: LD_INT 5
47728: PUSH
47729: LD_INT 6
47731: PUSH
47732: LD_INT 15
47734: PUSH
47735: LD_INT 18
47737: PUSH
47738: LD_INT 7
47740: PUSH
47741: LD_INT 17
47743: PUSH
47744: LD_INT 8
47746: PUSH
47747: LD_INT 20
47749: PUSH
47750: LD_INT 21
47752: PUSH
47753: LD_INT 22
47755: PUSH
47756: LD_INT 72
47758: PUSH
47759: LD_INT 26
47761: PUSH
47762: LD_INT 69
47764: PUSH
47765: LD_INT 39
47767: PUSH
47768: LD_INT 40
47770: PUSH
47771: LD_INT 41
47773: PUSH
47774: LD_INT 42
47776: PUSH
47777: LD_INT 43
47779: PUSH
47780: LD_INT 48
47782: PUSH
47783: LD_INT 49
47785: PUSH
47786: LD_INT 50
47788: PUSH
47789: LD_INT 51
47791: PUSH
47792: LD_INT 52
47794: PUSH
47795: LD_INT 53
47797: PUSH
47798: LD_INT 54
47800: PUSH
47801: LD_INT 55
47803: PUSH
47804: LD_INT 56
47806: PUSH
47807: LD_INT 60
47809: PUSH
47810: LD_INT 61
47812: PUSH
47813: LD_INT 62
47815: PUSH
47816: LD_INT 66
47818: PUSH
47819: LD_INT 67
47821: PUSH
47822: LD_INT 68
47824: PUSH
47825: LD_INT 81
47827: PUSH
47828: LD_INT 82
47830: PUSH
47831: LD_INT 83
47833: PUSH
47834: LD_INT 84
47836: PUSH
47837: LD_INT 85
47839: PUSH
47840: LD_INT 87
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: ST_TO_ADDR
47898: GO 48131
47900: LD_INT 3
47902: DOUBLE
47903: EQUAL
47904: IFTRUE 47908
47906: GO 48130
47908: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
47909: NOP4
47913: PUSH
47914: LD_INT 46
47916: PUSH
47917: LD_INT 47
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: LD_INT 82
47928: PUSH
47929: LD_INT 83
47931: PUSH
47932: LD_INT 84
47934: PUSH
47935: LD_INT 85
47937: PUSH
47938: LD_INT 86
47940: PUSH
47941: LD_INT 11
47943: PUSH
47944: LD_INT 9
47946: PUSH
47947: LD_INT 20
47949: PUSH
47950: LD_INT 19
47952: PUSH
47953: LD_INT 21
47955: PUSH
47956: LD_INT 24
47958: PUSH
47959: LD_INT 22
47961: PUSH
47962: LD_INT 25
47964: PUSH
47965: LD_INT 28
47967: PUSH
47968: LD_INT 29
47970: PUSH
47971: LD_INT 30
47973: PUSH
47974: LD_INT 31
47976: PUSH
47977: LD_INT 37
47979: PUSH
47980: LD_INT 38
47982: PUSH
47983: LD_INT 32
47985: PUSH
47986: LD_INT 27
47988: PUSH
47989: LD_INT 33
47991: PUSH
47992: LD_INT 69
47994: PUSH
47995: LD_INT 39
47997: PUSH
47998: LD_INT 34
48000: PUSH
48001: LD_INT 40
48003: PUSH
48004: LD_INT 71
48006: PUSH
48007: LD_INT 23
48009: PUSH
48010: LD_INT 44
48012: PUSH
48013: LD_INT 48
48015: PUSH
48016: LD_INT 49
48018: PUSH
48019: LD_INT 50
48021: PUSH
48022: LD_INT 51
48024: PUSH
48025: LD_INT 52
48027: PUSH
48028: LD_INT 53
48030: PUSH
48031: LD_INT 54
48033: PUSH
48034: LD_INT 55
48036: PUSH
48037: LD_INT 56
48039: PUSH
48040: LD_INT 57
48042: PUSH
48043: LD_INT 58
48045: PUSH
48046: LD_INT 59
48048: PUSH
48049: LD_INT 63
48051: PUSH
48052: LD_INT 64
48054: PUSH
48055: LD_INT 65
48057: PUSH
48058: LD_INT 82
48060: PUSH
48061: LD_INT 83
48063: PUSH
48064: LD_INT 84
48066: PUSH
48067: LD_INT 85
48069: PUSH
48070: LD_INT 86
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: ST_TO_ADDR
48128: GO 48131
48130: POP
// if state > - 1 and state < 3 then
48131: NOP4
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: GREATER
48140: PUSH
48141: NOP4
48145: PUSH
48146: LD_INT 3
48148: LESS
48149: AND
48150: IFFALSE 48207
// for i in result do
48152: NOP4
48156: PUSH
48157: NOP4
48161: PUSH
48162: FOR_IN
48163: IFFALSE 48205
// if GetTech ( i , side ) <> state then
48165: NOP4
48169: PPUSH
48170: NOP4
48174: PPUSH
48175: NOP4
48179: PUSH
48180: NOP4
48184: NONEQUAL
48185: IFFALSE 48203
// result := result diff i ;
48187: NOP4
48191: PUSH
48192: NOP4
48196: PUSH
48197: NOP4
48201: DIFF
48202: ST_TO_ADDR
48203: GO 48162
48205: POP
48206: POP
// end ;
48207: LD_VAR 0 4
48211: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
48212: LD_INT 0
48214: PPUSH
48215: PPUSH
48216: PPUSH
// result := true ;
48217: NOP4
48221: PUSH
48222: LD_INT 1
48224: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
48225: NOP4
48229: PUSH
48230: NOP4
48234: PPUSH
48235: NOP4
48239: ST_TO_ADDR
// if not tmp then
48240: NOP4
48244: NOT
48245: IFFALSE 48249
// exit ;
48247: GO 48298
// for i in tmp do
48249: NOP4
48253: PUSH
48254: NOP4
48258: PUSH
48259: FOR_IN
48260: IFFALSE 48296
// if GetTech ( i , side ) <> state_researched then
48262: NOP4
48266: PPUSH
48267: NOP4
48271: PPUSH
48272: NOP4
48276: PUSH
48277: LD_INT 2
48279: NONEQUAL
48280: IFFALSE 48294
// begin result := false ;
48282: NOP4
48286: PUSH
48287: LD_INT 0
48289: ST_TO_ADDR
// exit ;
48290: POP
48291: POP
48292: GO 48298
// end ;
48294: GO 48259
48296: POP
48297: POP
// end ;
48298: LD_VAR 0 3
48302: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
48303: LD_INT 0
48305: PPUSH
48306: PPUSH
48307: PPUSH
48308: PPUSH
48309: PPUSH
48310: PPUSH
48311: PPUSH
48312: PPUSH
48313: PPUSH
48314: PPUSH
48315: PPUSH
48316: PPUSH
48317: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
48318: NOP4
48322: NOT
48323: PUSH
48324: NOP4
48328: PPUSH
48329: NOP4
48333: PUSH
48334: LD_INT 9
48336: NONEQUAL
48337: OR
48338: IFFALSE 48342
// exit ;
48340: GO 48915
// side := GetSide ( unit ) ;
48342: NOP4
48346: PUSH
48347: NOP4
48351: PPUSH
48352: NOP4
48356: ST_TO_ADDR
// tech_space := tech_spacanom ;
48357: NOP4
48361: PUSH
48362: LD_INT 29
48364: ST_TO_ADDR
// tech_time := tech_taurad ;
48365: NOP4
48369: PUSH
48370: LD_INT 28
48372: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
48373: NOP4
48377: PUSH
48378: NOP4
48382: PPUSH
48383: NOP4
48387: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
48388: NOP4
48392: PPUSH
48393: NOP4
48397: PUSH
48398: LD_INT 2
48400: EQUAL
48401: IFFALSE 48405
// exit ;
48403: GO 48915
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48405: NOP4
48409: PUSH
48410: LD_INT 81
48412: PUSH
48413: NOP4
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 3
48424: PUSH
48425: LD_INT 21
48427: PUSH
48428: LD_INT 3
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PPUSH
48443: NOP4
48447: ST_TO_ADDR
// if not tmp then
48448: NOP4
48452: NOT
48453: IFFALSE 48457
// exit ;
48455: GO 48915
// if in_unit then
48457: NOP4
48461: IFFALSE 48485
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
48463: NOP4
48467: PUSH
48468: NOP4
48472: PPUSH
48473: NOP4
48477: PPUSH
48478: NOP4
48482: ST_TO_ADDR
48483: GO 48505
// enemy := NearestUnitToUnit ( tmp , unit ) ;
48485: NOP4
48489: PUSH
48490: NOP4
48494: PPUSH
48495: NOP4
48499: PPUSH
48500: NOP4
48504: ST_TO_ADDR
// if not enemy then
48505: NOP4
48509: NOT
48510: IFFALSE 48514
// exit ;
48512: GO 48915
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
48514: NOP4
48518: PUSH
48519: NOP4
48523: PPUSH
48524: NOP4
48528: PPUSH
48529: NOP4
48533: PUSH
48534: LD_INT 13
48536: GREATER
48537: AND
48538: PUSH
48539: NOP4
48543: PPUSH
48544: NOP4
48548: PPUSH
48549: NOP4
48553: PUSH
48554: LD_INT 12
48556: GREATER
48557: OR
48558: IFFALSE 48562
// exit ;
48560: GO 48915
// missile := [ 1 ] ;
48562: NOP4
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: ST_TO_ADDR
// if Researched ( side , tech_space ) then
48573: NOP4
48577: PPUSH
48578: NOP4
48582: PPUSH
48583: NOP4
48587: IFFALSE 48616
// missile := Insert ( missile , missile + 1 , 2 ) ;
48589: NOP4
48593: PUSH
48594: NOP4
48598: PPUSH
48599: NOP4
48603: PUSH
48604: LD_INT 1
48606: PLUS
48607: PPUSH
48608: LD_INT 2
48610: PPUSH
48611: NOP4
48615: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
48616: NOP4
48620: PPUSH
48621: NOP4
48625: PPUSH
48626: NOP4
48630: PUSH
48631: NOP4
48635: PPUSH
48636: NOP4
48640: PPUSH
48641: NOP4
48645: PPUSH
48646: NOP4
48650: NOT
48651: AND
48652: IFFALSE 48681
// missile := Insert ( missile , missile + 1 , 3 ) ;
48654: NOP4
48658: PUSH
48659: NOP4
48663: PPUSH
48664: NOP4
48668: PUSH
48669: LD_INT 1
48671: PLUS
48672: PPUSH
48673: LD_INT 3
48675: PPUSH
48676: NOP4
48680: ST_TO_ADDR
// if missile < 2 then
48681: NOP4
48685: PUSH
48686: LD_INT 2
48688: LESS
48689: IFFALSE 48693
// exit ;
48691: GO 48915
// x := GetX ( enemy ) ;
48693: NOP4
48697: PUSH
48698: NOP4
48702: PPUSH
48703: NOP4
48707: ST_TO_ADDR
// y := GetY ( enemy ) ;
48708: NOP4
48712: PUSH
48713: NOP4
48717: PPUSH
48718: NOP4
48722: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
48723: NOP4
48727: PUSH
48728: NOP4
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PPUSH
48737: LD_INT 1
48739: PPUSH
48740: NOP4
48744: PLUS
48745: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
48746: NOP4
48750: PUSH
48751: NOP4
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PPUSH
48760: LD_INT 1
48762: PPUSH
48763: NOP4
48767: PLUS
48768: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48769: NOP4
48773: PPUSH
48774: NOP4
48778: PPUSH
48779: NOP4
48783: NOT
48784: IFFALSE 48806
// begin _x := x ;
48786: NOP4
48790: PUSH
48791: NOP4
48795: ST_TO_ADDR
// _y := y ;
48796: NOP4
48800: PUSH
48801: NOP4
48805: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
48806: NOP4
48810: PUSH
48811: LD_INT 1
48813: PPUSH
48814: NOP4
48818: PPUSH
48819: NOP4
48823: ST_TO_ADDR
// case i of 1 :
48824: NOP4
48828: PUSH
48829: LD_INT 1
48831: DOUBLE
48832: EQUAL
48833: IFTRUE 48837
48835: GO 48854
48837: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
48838: NOP4
48842: PPUSH
48843: NOP4
48847: PPUSH
48848: NOP4
48852: GO 48915
48854: LD_INT 2
48856: DOUBLE
48857: EQUAL
48858: IFTRUE 48862
48860: GO 48884
48862: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
48863: NOP4
48867: PPUSH
48868: NOP4
48872: PPUSH
48873: NOP4
48877: PPUSH
48878: NOP4
48882: GO 48915
48884: LD_INT 3
48886: DOUBLE
48887: EQUAL
48888: IFTRUE 48892
48890: GO 48914
48892: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
48893: NOP4
48897: PPUSH
48898: NOP4
48902: PPUSH
48903: NOP4
48907: PPUSH
48908: NOP4
48912: GO 48915
48914: POP
// end ;
48915: LD_VAR 0 2
48919: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
48920: LD_INT 0
48922: PPUSH
48923: PPUSH
48924: PPUSH
48925: PPUSH
48926: PPUSH
48927: PPUSH
// if not unit or not building then
48928: NOP4
48932: NOT
48933: PUSH
48934: NOP4
48938: NOT
48939: OR
48940: IFFALSE 48944
// exit ;
48942: GO 49102
// x := GetX ( building ) ;
48944: NOP4
48948: PUSH
48949: NOP4
48953: PPUSH
48954: NOP4
48958: ST_TO_ADDR
// y := GetY ( building ) ;
48959: NOP4
48963: PUSH
48964: NOP4
48968: PPUSH
48969: NOP4
48973: ST_TO_ADDR
// for i = 0 to 5 do
48974: NOP4
48978: PUSH
48979: DOUBLE
48980: LD_INT 0
48982: DEC
48983: ST_TO_ADDR
48984: LD_INT 5
48986: PUSH
48987: FOR_TO
48988: IFFALSE 49100
// begin _x := ShiftX ( x , i , 3 ) ;
48990: NOP4
48994: PUSH
48995: NOP4
48999: PPUSH
49000: NOP4
49004: PPUSH
49005: LD_INT 3
49007: PPUSH
49008: NOP4
49012: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
49013: NOP4
49017: PUSH
49018: NOP4
49022: PPUSH
49023: NOP4
49027: PPUSH
49028: LD_INT 3
49030: PPUSH
49031: NOP4
49035: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49036: NOP4
49040: PPUSH
49041: NOP4
49045: PPUSH
49046: NOP4
49050: NOT
49051: IFFALSE 49055
// continue ;
49053: GO 48987
// if HexInfo ( _x , _y ) = 0 then
49055: NOP4
49059: PPUSH
49060: NOP4
49064: PPUSH
49065: NOP4
49069: PUSH
49070: LD_INT 0
49072: EQUAL
49073: IFFALSE 49098
// begin ComMoveXY ( unit , _x , _y ) ;
49075: NOP4
49079: PPUSH
49080: NOP4
49084: PPUSH
49085: NOP4
49089: PPUSH
49090: NOP4
// exit ;
49094: POP
49095: POP
49096: GO 49102
// end ; end ;
49098: GO 48987
49100: POP
49101: POP
// end ;
49102: LD_VAR 0 3
49106: RET
// export function ScanBase ( side , base_area ) ; begin
49107: LD_INT 0
49109: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
49110: NOP4
49114: PUSH
49115: NOP4
49119: PPUSH
49120: LD_INT 81
49122: PUSH
49123: NOP4
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PPUSH
49132: NOP4
49136: ST_TO_ADDR
// end ;
49137: LD_VAR 0 3
49141: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
49142: LD_INT 0
49144: PPUSH
49145: PPUSH
49146: PPUSH
49147: PPUSH
// result := false ;
49148: NOP4
49152: PUSH
49153: LD_INT 0
49155: ST_TO_ADDR
// side := GetSide ( unit ) ;
49156: NOP4
49160: PUSH
49161: NOP4
49165: PPUSH
49166: NOP4
49170: ST_TO_ADDR
// nat := GetNation ( unit ) ;
49171: NOP4
49175: PUSH
49176: NOP4
49180: PPUSH
49181: NOP4
49185: ST_TO_ADDR
// case nat of 1 :
49186: NOP4
49190: PUSH
49191: LD_INT 1
49193: DOUBLE
49194: EQUAL
49195: IFTRUE 49199
49197: GO 49210
49199: POP
// tech := tech_lassight ; 2 :
49200: NOP4
49204: PUSH
49205: LD_INT 12
49207: ST_TO_ADDR
49208: GO 49249
49210: LD_INT 2
49212: DOUBLE
49213: EQUAL
49214: IFTRUE 49218
49216: GO 49229
49218: POP
// tech := tech_mortar ; 3 :
49219: NOP4
49223: PUSH
49224: LD_INT 41
49226: ST_TO_ADDR
49227: GO 49249
49229: LD_INT 3
49231: DOUBLE
49232: EQUAL
49233: IFTRUE 49237
49235: GO 49248
49237: POP
// tech := tech_bazooka ; end ;
49238: NOP4
49242: PUSH
49243: LD_INT 44
49245: ST_TO_ADDR
49246: GO 49249
49248: POP
// if Researched ( side , tech ) then
49249: NOP4
49253: PPUSH
49254: NOP4
49258: PPUSH
49259: NOP4
49263: IFFALSE 49290
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
49265: NOP4
49269: PUSH
49270: LD_INT 5
49272: PUSH
49273: LD_INT 8
49275: PUSH
49276: LD_INT 9
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: LIST
49283: PUSH
49284: NOP4
49288: ARRAY
49289: ST_TO_ADDR
// end ;
49290: LD_VAR 0 2
49294: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
49295: LD_INT 0
49297: PPUSH
49298: PPUSH
49299: PPUSH
// if not mines then
49300: NOP4
49304: NOT
49305: IFFALSE 49309
// exit ;
49307: GO 49453
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49309: NOP4
49313: PUSH
49314: LD_INT 81
49316: PUSH
49317: NOP4
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 3
49328: PUSH
49329: LD_INT 21
49331: PUSH
49332: LD_INT 3
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PPUSH
49347: NOP4
49351: ST_TO_ADDR
// for i in mines do
49352: NOP4
49356: PUSH
49357: NOP4
49361: PUSH
49362: FOR_IN
49363: IFFALSE 49451
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
49365: NOP4
49369: PUSH
49370: LD_INT 1
49372: ARRAY
49373: PPUSH
49374: NOP4
49378: PUSH
49379: LD_INT 2
49381: ARRAY
49382: PPUSH
49383: NOP4
49387: NOT
49388: IFFALSE 49392
// continue ;
49390: GO 49362
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
49392: NOP4
49396: PUSH
49397: LD_INT 1
49399: ARRAY
49400: PPUSH
49401: NOP4
49405: PUSH
49406: LD_INT 2
49408: ARRAY
49409: PPUSH
49410: NOP4
49414: PUSH
49415: NOP4
49419: IN
49420: IFFALSE 49449
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
49422: NOP4
49426: PUSH
49427: LD_INT 1
49429: ARRAY
49430: PPUSH
49431: NOP4
49435: PUSH
49436: LD_INT 2
49438: ARRAY
49439: PPUSH
49440: NOP4
49444: PPUSH
49445: NOP4
// end ;
49449: GO 49362
49451: POP
49452: POP
// end ;
49453: LD_VAR 0 3
49457: RET
// export function Count ( array ) ; var i ; begin
49458: LD_INT 0
49460: PPUSH
49461: PPUSH
// result := 0 ;
49462: NOP4
49466: PUSH
49467: LD_INT 0
49469: ST_TO_ADDR
// for i in array do
49470: NOP4
49474: PUSH
49475: NOP4
49479: PUSH
49480: FOR_IN
49481: IFFALSE 49505
// if i then
49483: NOP4
49487: IFFALSE 49503
// result := result + 1 ;
49489: NOP4
49493: PUSH
49494: NOP4
49498: PUSH
49499: LD_INT 1
49501: PLUS
49502: ST_TO_ADDR
49503: GO 49480
49505: POP
49506: POP
// end ;
49507: LD_VAR 0 2
49511: RET
// export function IsEmpty ( building ) ; begin
49512: LD_INT 0
49514: PPUSH
// if not building then
49515: NOP4
49519: NOT
49520: IFFALSE 49524
// exit ;
49522: GO 49567
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
49524: NOP4
49528: PUSH
49529: NOP4
49533: PUSH
49534: LD_INT 22
49536: PUSH
49537: NOP4
49541: PPUSH
49542: NOP4
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 58
49553: PUSH
49554: EMPTY
49555: LIST
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PPUSH
49561: NOP4
49565: IN
49566: ST_TO_ADDR
// end ;
49567: LD_VAR 0 2
49571: RET
// export function IsNotFull ( building ) ; begin
49572: LD_INT 0
49574: PPUSH
// if not building then
49575: NOP4
49579: NOT
49580: IFFALSE 49584
// exit ;
49582: GO 49603
// result := UnitsInside ( building ) < 6 ;
49584: NOP4
49588: PUSH
49589: NOP4
49593: PPUSH
49594: NOP4
49598: PUSH
49599: LD_INT 6
49601: LESS
49602: ST_TO_ADDR
// end ;
49603: LD_VAR 0 2
49607: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
49608: LD_INT 0
49610: PPUSH
49611: PPUSH
49612: PPUSH
49613: PPUSH
// tmp := [ ] ;
49614: NOP4
49618: PUSH
49619: EMPTY
49620: ST_TO_ADDR
// list := [ ] ;
49621: NOP4
49625: PUSH
49626: EMPTY
49627: ST_TO_ADDR
// for i = 16 to 25 do
49628: NOP4
49632: PUSH
49633: DOUBLE
49634: LD_INT 16
49636: DEC
49637: ST_TO_ADDR
49638: LD_INT 25
49640: PUSH
49641: FOR_TO
49642: IFFALSE 49715
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
49644: NOP4
49648: PUSH
49649: NOP4
49653: PUSH
49654: LD_INT 22
49656: PUSH
49657: NOP4
49661: PPUSH
49662: NOP4
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 91
49673: PUSH
49674: NOP4
49678: PUSH
49679: LD_INT 6
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 30
49689: PUSH
49690: NOP4
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: LIST
49703: PUSH
49704: EMPTY
49705: LIST
49706: PPUSH
49707: NOP4
49711: ADD
49712: ST_TO_ADDR
49713: GO 49641
49715: POP
49716: POP
// for i = 1 to tmp do
49717: NOP4
49721: PUSH
49722: DOUBLE
49723: LD_INT 1
49725: DEC
49726: ST_TO_ADDR
49727: NOP4
49731: PUSH
49732: FOR_TO
49733: IFFALSE 49821
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
49735: NOP4
49739: PUSH
49740: NOP4
49744: PUSH
49745: NOP4
49749: PUSH
49750: NOP4
49754: ARRAY
49755: PPUSH
49756: NOP4
49760: PUSH
49761: NOP4
49765: PUSH
49766: NOP4
49770: ARRAY
49771: PPUSH
49772: NOP4
49776: PUSH
49777: NOP4
49781: PUSH
49782: NOP4
49786: ARRAY
49787: PPUSH
49788: NOP4
49792: PUSH
49793: NOP4
49797: PUSH
49798: NOP4
49802: ARRAY
49803: PPUSH
49804: NOP4
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: PUSH
49815: EMPTY
49816: LIST
49817: ADD
49818: ST_TO_ADDR
49819: GO 49732
49821: POP
49822: POP
// result := list ;
49823: NOP4
49827: PUSH
49828: NOP4
49832: ST_TO_ADDR
// end ;
49833: LD_VAR 0 2
49837: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
49838: LD_INT 0
49840: PPUSH
49841: PPUSH
49842: PPUSH
49843: PPUSH
49844: PPUSH
49845: PPUSH
49846: PPUSH
// if not factory then
49847: NOP4
49851: NOT
49852: IFFALSE 49856
// exit ;
49854: GO 50449
// if control = control_apeman then
49856: NOP4
49860: PUSH
49861: LD_INT 5
49863: EQUAL
49864: IFFALSE 49973
// begin tmp := UnitsInside ( factory ) ;
49866: NOP4
49870: PUSH
49871: NOP4
49875: PPUSH
49876: NOP4
49880: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
49881: NOP4
49885: PPUSH
49886: LD_INT 25
49888: PUSH
49889: LD_INT 12
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PPUSH
49896: NOP4
49900: NOT
49901: IFFALSE 49911
// control := control_manual ;
49903: NOP4
49907: PUSH
49908: LD_INT 1
49910: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
49911: NOP4
49915: PUSH
49916: NOP4
49920: PPUSH
49921: NOP4
49925: ST_TO_ADDR
// if tmp then
49926: NOP4
49930: IFFALSE 49973
// begin for i in tmp do
49932: NOP4
49936: PUSH
49937: NOP4
49941: PUSH
49942: FOR_IN
49943: IFFALSE 49971
// if i [ 1 ] = b_ext_radio then
49945: NOP4
49949: PUSH
49950: LD_INT 1
49952: ARRAY
49953: PUSH
49954: LD_INT 22
49956: EQUAL
49957: IFFALSE 49969
// begin control := control_remote ;
49959: NOP4
49963: PUSH
49964: LD_INT 2
49966: ST_TO_ADDR
// break ;
49967: GO 49971
// end ;
49969: GO 49942
49971: POP
49972: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49973: NOP4
49977: PPUSH
49978: NOP4
49982: PPUSH
49983: NOP4
49987: PPUSH
49988: NOP4
49992: PPUSH
49993: NOP4
49997: PPUSH
49998: NOP4
50002: IFFALSE 50037
// begin result := [ chassis , engine , control , weapon ] ;
50004: NOP4
50008: PUSH
50009: NOP4
50013: PUSH
50014: NOP4
50018: PUSH
50019: NOP4
50023: PUSH
50024: NOP4
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: ST_TO_ADDR
// exit ;
50035: GO 50449
// end ; _chassis := AvailableChassisList ( factory ) ;
50037: NOP4
50041: PUSH
50042: NOP4
50046: PPUSH
50047: NOP4
50051: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
50052: NOP4
50056: PUSH
50057: NOP4
50061: PPUSH
50062: NOP4
50066: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
50067: NOP4
50071: PUSH
50072: NOP4
50076: PPUSH
50077: NOP4
50081: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
50082: NOP4
50086: PUSH
50087: NOP4
50091: PPUSH
50092: NOP4
50096: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
50097: NOP4
50101: NOT
50102: PUSH
50103: NOP4
50107: NOT
50108: OR
50109: PUSH
50110: NOP4
50114: NOT
50115: OR
50116: PUSH
50117: NOP4
50121: NOT
50122: OR
50123: IFFALSE 50158
// begin result := [ chassis , engine , control , weapon ] ;
50125: NOP4
50129: PUSH
50130: NOP4
50134: PUSH
50135: NOP4
50139: PUSH
50140: NOP4
50144: PUSH
50145: NOP4
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: ST_TO_ADDR
// exit ;
50156: GO 50449
// end ; if not chassis in _chassis then
50158: NOP4
50162: PUSH
50163: NOP4
50167: IN
50168: NOT
50169: IFFALSE 50195
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
50171: NOP4
50175: PUSH
50176: NOP4
50180: PUSH
50181: LD_INT 1
50183: PPUSH
50184: NOP4
50188: PPUSH
50189: NOP4
50193: ARRAY
50194: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
50195: NOP4
50199: PPUSH
50200: NOP4
50204: PPUSH
50205: NOP4
50209: NOT
50210: IFFALSE 50269
// repeat engine := _engine [ 1 ] ;
50212: NOP4
50216: PUSH
50217: NOP4
50221: PUSH
50222: LD_INT 1
50224: ARRAY
50225: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
50226: NOP4
50230: PUSH
50231: NOP4
50235: PPUSH
50236: LD_INT 1
50238: PPUSH
50239: NOP4
50243: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
50244: NOP4
50248: PPUSH
50249: NOP4
50253: PPUSH
50254: NOP4
50258: PUSH
50259: NOP4
50263: PUSH
50264: EMPTY
50265: EQUAL
50266: OR
50267: IFFALSE 50212
// if not control in _control then
50269: NOP4
50273: PUSH
50274: NOP4
50278: IN
50279: NOT
50280: IFFALSE 50306
// control := _control [ rand ( 1 , _control ) ] ;
50282: NOP4
50286: PUSH
50287: NOP4
50291: PUSH
50292: LD_INT 1
50294: PPUSH
50295: NOP4
50299: PPUSH
50300: NOP4
50304: ARRAY
50305: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
50306: NOP4
50310: PPUSH
50311: NOP4
50315: PPUSH
50316: NOP4
50320: NOT
50321: IFFALSE 50380
// repeat weapon := _weapon [ 1 ] ;
50323: NOP4
50327: PUSH
50328: NOP4
50332: PUSH
50333: LD_INT 1
50335: ARRAY
50336: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
50337: NOP4
50341: PUSH
50342: NOP4
50346: PPUSH
50347: LD_INT 1
50349: PPUSH
50350: NOP4
50354: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
50355: NOP4
50359: PPUSH
50360: NOP4
50364: PPUSH
50365: NOP4
50369: PUSH
50370: NOP4
50374: PUSH
50375: EMPTY
50376: EQUAL
50377: OR
50378: IFFALSE 50323
// result := [ ] ;
50380: NOP4
50384: PUSH
50385: EMPTY
50386: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50387: NOP4
50391: PPUSH
50392: NOP4
50396: PPUSH
50397: NOP4
50401: PPUSH
50402: NOP4
50406: PPUSH
50407: NOP4
50411: PPUSH
50412: NOP4
50416: IFFALSE 50449
// result := [ chassis , engine , control , weapon ] ;
50418: NOP4
50422: PUSH
50423: NOP4
50427: PUSH
50428: NOP4
50432: PUSH
50433: NOP4
50437: PUSH
50438: NOP4
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: ST_TO_ADDR
// end ;
50449: LD_VAR 0 6
50453: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
50454: LD_INT 0
50456: PPUSH
// if not chassis or not engine then
50457: NOP4
50461: NOT
50462: PUSH
50463: NOP4
50467: NOT
50468: OR
50469: IFFALSE 50473
// exit ;
50471: GO 50669
// case engine of engine_solar :
50473: NOP4
50477: PUSH
50478: LD_INT 2
50480: DOUBLE
50481: EQUAL
50482: IFTRUE 50486
50484: GO 50524
50486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
50487: NOP4
50491: PUSH
50492: LD_INT 11
50494: PUSH
50495: LD_INT 12
50497: PUSH
50498: LD_INT 13
50500: PUSH
50501: LD_INT 14
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: LD_INT 3
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: ST_TO_ADDR
50522: GO 50653
50524: LD_INT 1
50526: DOUBLE
50527: EQUAL
50528: IFTRUE 50532
50530: GO 50594
50532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
50533: NOP4
50537: PUSH
50538: LD_INT 11
50540: PUSH
50541: LD_INT 12
50543: PUSH
50544: LD_INT 13
50546: PUSH
50547: LD_INT 14
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: LD_INT 3
50558: PUSH
50559: LD_INT 4
50561: PUSH
50562: LD_INT 5
50564: PUSH
50565: LD_INT 21
50567: PUSH
50568: LD_INT 23
50570: PUSH
50571: LD_INT 22
50573: PUSH
50574: LD_INT 24
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
50592: GO 50653
50594: LD_INT 3
50596: DOUBLE
50597: EQUAL
50598: IFTRUE 50602
50600: GO 50652
50602: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50603: NOP4
50607: PUSH
50608: LD_INT 13
50610: PUSH
50611: LD_INT 14
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: LD_INT 3
50619: PUSH
50620: LD_INT 4
50622: PUSH
50623: LD_INT 5
50625: PUSH
50626: LD_INT 21
50628: PUSH
50629: LD_INT 22
50631: PUSH
50632: LD_INT 23
50634: PUSH
50635: LD_INT 24
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: ST_TO_ADDR
50650: GO 50653
50652: POP
// result := ( chassis in result ) ;
50653: NOP4
50657: PUSH
50658: NOP4
50662: PUSH
50663: NOP4
50667: IN
50668: ST_TO_ADDR
// end ;
50669: LD_VAR 0 3
50673: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
50674: LD_INT 0
50676: PPUSH
// if not chassis or not weapon then
50677: NOP4
50681: NOT
50682: PUSH
50683: NOP4
50687: NOT
50688: OR
50689: IFFALSE 50693
// exit ;
50691: GO 51719
// case weapon of us_machine_gun :
50693: NOP4
50697: PUSH
50698: LD_INT 2
50700: DOUBLE
50701: EQUAL
50702: IFTRUE 50706
50704: GO 50736
50706: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
50707: NOP4
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: LD_INT 3
50720: PUSH
50721: LD_INT 4
50723: PUSH
50724: LD_INT 5
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: ST_TO_ADDR
50734: GO 51703
50736: LD_INT 3
50738: DOUBLE
50739: EQUAL
50740: IFTRUE 50744
50742: GO 50774
50744: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
50745: NOP4
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: LD_INT 4
50761: PUSH
50762: LD_INT 5
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: ST_TO_ADDR
50772: GO 51703
50774: LD_INT 11
50776: DOUBLE
50777: EQUAL
50778: IFTRUE 50782
50780: GO 50812
50782: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
50783: NOP4
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: LD_INT 3
50796: PUSH
50797: LD_INT 4
50799: PUSH
50800: LD_INT 5
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: ST_TO_ADDR
50810: GO 51703
50812: LD_INT 4
50814: DOUBLE
50815: EQUAL
50816: IFTRUE 50820
50818: GO 50846
50820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
50821: NOP4
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: LD_INT 3
50831: PUSH
50832: LD_INT 4
50834: PUSH
50835: LD_INT 5
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: ST_TO_ADDR
50844: GO 51703
50846: LD_INT 5
50848: DOUBLE
50849: EQUAL
50850: IFTRUE 50854
50852: GO 50880
50854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
50855: NOP4
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: LD_INT 3
50865: PUSH
50866: LD_INT 4
50868: PUSH
50869: LD_INT 5
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: ST_TO_ADDR
50878: GO 51703
50880: LD_INT 9
50882: DOUBLE
50883: EQUAL
50884: IFTRUE 50888
50886: GO 50914
50888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
50889: NOP4
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: LD_INT 3
50899: PUSH
50900: LD_INT 4
50902: PUSH
50903: LD_INT 5
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: ST_TO_ADDR
50912: GO 51703
50914: LD_INT 7
50916: DOUBLE
50917: EQUAL
50918: IFTRUE 50922
50920: GO 50948
50922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
50923: NOP4
50927: PUSH
50928: LD_INT 2
50930: PUSH
50931: LD_INT 3
50933: PUSH
50934: LD_INT 4
50936: PUSH
50937: LD_INT 5
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: ST_TO_ADDR
50946: GO 51703
50948: LD_INT 12
50950: DOUBLE
50951: EQUAL
50952: IFTRUE 50956
50954: GO 50982
50956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
50957: NOP4
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: LD_INT 3
50967: PUSH
50968: LD_INT 4
50970: PUSH
50971: LD_INT 5
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: ST_TO_ADDR
50980: GO 51703
50982: LD_INT 13
50984: DOUBLE
50985: EQUAL
50986: IFTRUE 50990
50988: GO 51016
50990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
50991: NOP4
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 3
51001: PUSH
51002: LD_INT 4
51004: PUSH
51005: LD_INT 5
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: ST_TO_ADDR
51014: GO 51703
51016: LD_INT 14
51018: DOUBLE
51019: EQUAL
51020: IFTRUE 51024
51022: GO 51042
51024: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
51025: NOP4
51029: PUSH
51030: LD_INT 4
51032: PUSH
51033: LD_INT 5
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: ST_TO_ADDR
51040: GO 51703
51042: LD_INT 6
51044: DOUBLE
51045: EQUAL
51046: IFTRUE 51050
51048: GO 51068
51050: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
51051: NOP4
51055: PUSH
51056: LD_INT 4
51058: PUSH
51059: LD_INT 5
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: ST_TO_ADDR
51066: GO 51703
51068: LD_INT 10
51070: DOUBLE
51071: EQUAL
51072: IFTRUE 51076
51074: GO 51094
51076: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
51077: NOP4
51081: PUSH
51082: LD_INT 4
51084: PUSH
51085: LD_INT 5
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: ST_TO_ADDR
51092: GO 51703
51094: LD_INT 22
51096: DOUBLE
51097: EQUAL
51098: IFTRUE 51102
51100: GO 51128
51102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
51103: NOP4
51107: PUSH
51108: LD_INT 11
51110: PUSH
51111: LD_INT 12
51113: PUSH
51114: LD_INT 13
51116: PUSH
51117: LD_INT 14
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: ST_TO_ADDR
51126: GO 51703
51128: LD_INT 23
51130: DOUBLE
51131: EQUAL
51132: IFTRUE 51136
51134: GO 51162
51136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
51137: NOP4
51141: PUSH
51142: LD_INT 11
51144: PUSH
51145: LD_INT 12
51147: PUSH
51148: LD_INT 13
51150: PUSH
51151: LD_INT 14
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: ST_TO_ADDR
51160: GO 51703
51162: LD_INT 24
51164: DOUBLE
51165: EQUAL
51166: IFTRUE 51170
51168: GO 51196
51170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
51171: NOP4
51175: PUSH
51176: LD_INT 11
51178: PUSH
51179: LD_INT 12
51181: PUSH
51182: LD_INT 13
51184: PUSH
51185: LD_INT 14
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: ST_TO_ADDR
51194: GO 51703
51196: LD_INT 30
51198: DOUBLE
51199: EQUAL
51200: IFTRUE 51204
51202: GO 51230
51204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
51205: NOP4
51209: PUSH
51210: LD_INT 11
51212: PUSH
51213: LD_INT 12
51215: PUSH
51216: LD_INT 13
51218: PUSH
51219: LD_INT 14
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: ST_TO_ADDR
51228: GO 51703
51230: LD_INT 25
51232: DOUBLE
51233: EQUAL
51234: IFTRUE 51238
51236: GO 51256
51238: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
51239: NOP4
51243: PUSH
51244: LD_INT 13
51246: PUSH
51247: LD_INT 14
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: ST_TO_ADDR
51254: GO 51703
51256: LD_INT 27
51258: DOUBLE
51259: EQUAL
51260: IFTRUE 51264
51262: GO 51282
51264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
51265: NOP4
51269: PUSH
51270: LD_INT 13
51272: PUSH
51273: LD_INT 14
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: ST_TO_ADDR
51280: GO 51703
51282: LD_INT 28
51284: DOUBLE
51285: EQUAL
51286: IFTRUE 51290
51288: GO 51308
51290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
51291: NOP4
51295: PUSH
51296: LD_INT 13
51298: PUSH
51299: LD_INT 14
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: ST_TO_ADDR
51306: GO 51703
51308: LD_INT 29
51310: DOUBLE
51311: EQUAL
51312: IFTRUE 51316
51314: GO 51334
51316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
51317: NOP4
51321: PUSH
51322: LD_INT 13
51324: PUSH
51325: LD_INT 14
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: ST_TO_ADDR
51332: GO 51703
51334: LD_INT 31
51336: DOUBLE
51337: EQUAL
51338: IFTRUE 51342
51340: GO 51360
51342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
51343: NOP4
51347: PUSH
51348: LD_INT 13
51350: PUSH
51351: LD_INT 14
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: ST_TO_ADDR
51358: GO 51703
51360: LD_INT 26
51362: DOUBLE
51363: EQUAL
51364: IFTRUE 51368
51366: GO 51386
51368: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
51369: NOP4
51373: PUSH
51374: LD_INT 13
51376: PUSH
51377: LD_INT 14
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: ST_TO_ADDR
51384: GO 51703
51386: LD_INT 42
51388: DOUBLE
51389: EQUAL
51390: IFTRUE 51394
51392: GO 51420
51394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
51395: NOP4
51399: PUSH
51400: LD_INT 21
51402: PUSH
51403: LD_INT 22
51405: PUSH
51406: LD_INT 23
51408: PUSH
51409: LD_INT 24
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: ST_TO_ADDR
51418: GO 51703
51420: LD_INT 43
51422: DOUBLE
51423: EQUAL
51424: IFTRUE 51428
51426: GO 51454
51428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
51429: NOP4
51433: PUSH
51434: LD_INT 21
51436: PUSH
51437: LD_INT 22
51439: PUSH
51440: LD_INT 23
51442: PUSH
51443: LD_INT 24
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: ST_TO_ADDR
51452: GO 51703
51454: LD_INT 44
51456: DOUBLE
51457: EQUAL
51458: IFTRUE 51462
51460: GO 51488
51462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
51463: NOP4
51467: PUSH
51468: LD_INT 21
51470: PUSH
51471: LD_INT 22
51473: PUSH
51474: LD_INT 23
51476: PUSH
51477: LD_INT 24
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: ST_TO_ADDR
51486: GO 51703
51488: LD_INT 45
51490: DOUBLE
51491: EQUAL
51492: IFTRUE 51496
51494: GO 51522
51496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
51497: NOP4
51501: PUSH
51502: LD_INT 21
51504: PUSH
51505: LD_INT 22
51507: PUSH
51508: LD_INT 23
51510: PUSH
51511: LD_INT 24
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: ST_TO_ADDR
51520: GO 51703
51522: LD_INT 49
51524: DOUBLE
51525: EQUAL
51526: IFTRUE 51530
51528: GO 51556
51530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
51531: NOP4
51535: PUSH
51536: LD_INT 21
51538: PUSH
51539: LD_INT 22
51541: PUSH
51542: LD_INT 23
51544: PUSH
51545: LD_INT 24
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: ST_TO_ADDR
51554: GO 51703
51556: LD_INT 51
51558: DOUBLE
51559: EQUAL
51560: IFTRUE 51564
51562: GO 51590
51564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
51565: NOP4
51569: PUSH
51570: LD_INT 21
51572: PUSH
51573: LD_INT 22
51575: PUSH
51576: LD_INT 23
51578: PUSH
51579: LD_INT 24
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: ST_TO_ADDR
51588: GO 51703
51590: LD_INT 52
51592: DOUBLE
51593: EQUAL
51594: IFTRUE 51598
51596: GO 51624
51598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
51599: NOP4
51603: PUSH
51604: LD_INT 21
51606: PUSH
51607: LD_INT 22
51609: PUSH
51610: LD_INT 23
51612: PUSH
51613: LD_INT 24
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: ST_TO_ADDR
51622: GO 51703
51624: LD_INT 53
51626: DOUBLE
51627: EQUAL
51628: IFTRUE 51632
51630: GO 51650
51632: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
51633: NOP4
51637: PUSH
51638: LD_INT 23
51640: PUSH
51641: LD_INT 24
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: ST_TO_ADDR
51648: GO 51703
51650: LD_INT 46
51652: DOUBLE
51653: EQUAL
51654: IFTRUE 51658
51656: GO 51676
51658: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
51659: NOP4
51663: PUSH
51664: LD_INT 23
51666: PUSH
51667: LD_INT 24
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: ST_TO_ADDR
51674: GO 51703
51676: LD_INT 47
51678: DOUBLE
51679: EQUAL
51680: IFTRUE 51684
51682: GO 51702
51684: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
51685: NOP4
51689: PUSH
51690: LD_INT 23
51692: PUSH
51693: LD_INT 24
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: ST_TO_ADDR
51700: GO 51703
51702: POP
// result := ( chassis in result ) ;
51703: NOP4
51707: PUSH
51708: NOP4
51712: PUSH
51713: NOP4
51717: IN
51718: ST_TO_ADDR
// end ;
51719: LD_VAR 0 3
51723: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
51724: LD_INT 0
51726: PPUSH
51727: PPUSH
51728: PPUSH
51729: PPUSH
51730: PPUSH
51731: PPUSH
51732: PPUSH
// result := array ;
51733: NOP4
51737: PUSH
51738: NOP4
51742: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
51743: NOP4
51747: NOT
51748: PUSH
51749: NOP4
51753: NOT
51754: OR
51755: PUSH
51756: NOP4
51760: NOT
51761: OR
51762: PUSH
51763: NOP4
51767: PUSH
51768: NOP4
51772: GREATER
51773: OR
51774: PUSH
51775: NOP4
51779: PUSH
51780: NOP4
51784: GREATER
51785: OR
51786: IFFALSE 51790
// exit ;
51788: GO 52086
// if direction then
51790: NOP4
51794: IFFALSE 51858
// begin d := 1 ;
51796: NOP4
51800: PUSH
51801: LD_INT 1
51803: ST_TO_ADDR
// if i_from > i_to then
51804: NOP4
51808: PUSH
51809: NOP4
51813: GREATER
51814: IFFALSE 51840
// length := ( array - i_from ) + i_to else
51816: NOP4
51820: PUSH
51821: NOP4
51825: PUSH
51826: NOP4
51830: MINUS
51831: PUSH
51832: NOP4
51836: PLUS
51837: ST_TO_ADDR
51838: GO 51856
// length := i_to - i_from ;
51840: NOP4
51844: PUSH
51845: NOP4
51849: PUSH
51850: NOP4
51854: MINUS
51855: ST_TO_ADDR
// end else
51856: GO 51919
// begin d := - 1 ;
51858: NOP4
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: ST_TO_ADDR
// if i_from > i_to then
51867: NOP4
51871: PUSH
51872: NOP4
51876: GREATER
51877: IFFALSE 51897
// length := i_from - i_to else
51879: NOP4
51883: PUSH
51884: NOP4
51888: PUSH
51889: NOP4
51893: MINUS
51894: ST_TO_ADDR
51895: GO 51919
// length := ( array - i_to ) + i_from ;
51897: NOP4
51901: PUSH
51902: NOP4
51906: PUSH
51907: NOP4
51911: MINUS
51912: PUSH
51913: NOP4
51917: PLUS
51918: ST_TO_ADDR
// end ; if not length then
51919: NOP4
51923: NOT
51924: IFFALSE 51928
// exit ;
51926: GO 52086
// tmp := array ;
51928: NOP4
51932: PUSH
51933: NOP4
51937: ST_TO_ADDR
// for i = 1 to length do
51938: NOP4
51942: PUSH
51943: DOUBLE
51944: LD_INT 1
51946: DEC
51947: ST_TO_ADDR
51948: NOP4
51952: PUSH
51953: FOR_TO
51954: IFFALSE 52074
// begin for j = 1 to array do
51956: NOP4
51960: PUSH
51961: DOUBLE
51962: LD_INT 1
51964: DEC
51965: ST_TO_ADDR
51966: NOP4
51970: PUSH
51971: FOR_TO
51972: IFFALSE 52060
// begin k := j + d ;
51974: NOP4
51978: PUSH
51979: NOP4
51983: PUSH
51984: NOP4
51988: PLUS
51989: ST_TO_ADDR
// if k > array then
51990: NOP4
51994: PUSH
51995: NOP4
51999: GREATER
52000: IFFALSE 52010
// k := 1 ;
52002: NOP4
52006: PUSH
52007: LD_INT 1
52009: ST_TO_ADDR
// if not k then
52010: NOP4
52014: NOT
52015: IFFALSE 52027
// k := array ;
52017: NOP4
52021: PUSH
52022: NOP4
52026: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
52027: NOP4
52031: PUSH
52032: NOP4
52036: PPUSH
52037: NOP4
52041: PPUSH
52042: NOP4
52046: PUSH
52047: NOP4
52051: ARRAY
52052: PPUSH
52053: NOP4
52057: ST_TO_ADDR
// end ;
52058: GO 51971
52060: POP
52061: POP
// array := tmp ;
52062: NOP4
52066: PUSH
52067: NOP4
52071: ST_TO_ADDR
// end ;
52072: GO 51953
52074: POP
52075: POP
// result := array ;
52076: NOP4
52080: PUSH
52081: NOP4
52085: ST_TO_ADDR
// end ;
52086: LD_VAR 0 5
52090: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
52091: LD_INT 0
52093: PPUSH
52094: PPUSH
// result := 0 ;
52095: NOP4
52099: PUSH
52100: LD_INT 0
52102: ST_TO_ADDR
// if not array or not value in array then
52103: NOP4
52107: NOT
52108: PUSH
52109: NOP4
52113: PUSH
52114: NOP4
52118: IN
52119: NOT
52120: OR
52121: IFFALSE 52125
// exit ;
52123: GO 52179
// for i = 1 to array do
52125: NOP4
52129: PUSH
52130: DOUBLE
52131: LD_INT 1
52133: DEC
52134: ST_TO_ADDR
52135: NOP4
52139: PUSH
52140: FOR_TO
52141: IFFALSE 52177
// if value = array [ i ] then
52143: NOP4
52147: PUSH
52148: NOP4
52152: PUSH
52153: NOP4
52157: ARRAY
52158: EQUAL
52159: IFFALSE 52175
// begin result := i ;
52161: NOP4
52165: PUSH
52166: NOP4
52170: ST_TO_ADDR
// exit ;
52171: POP
52172: POP
52173: GO 52179
// end ;
52175: GO 52140
52177: POP
52178: POP
// end ;
52179: LD_VAR 0 3
52183: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
52184: LD_INT 0
52186: PPUSH
// vc_chassis := chassis ;
52187: LD_ADDR_OWVAR 37
52191: PUSH
52192: NOP4
52196: ST_TO_ADDR
// vc_engine := engine ;
52197: LD_ADDR_OWVAR 39
52201: PUSH
52202: NOP4
52206: ST_TO_ADDR
// vc_control := control ;
52207: LD_ADDR_OWVAR 38
52211: PUSH
52212: NOP4
52216: ST_TO_ADDR
// vc_weapon := weapon ;
52217: LD_ADDR_OWVAR 40
52221: PUSH
52222: NOP4
52226: ST_TO_ADDR
// vc_fuel_battery := fuel ;
52227: LD_ADDR_OWVAR 41
52231: PUSH
52232: NOP4
52236: ST_TO_ADDR
// end ;
52237: LD_VAR 0 6
52241: RET
// export function WantPlant ( unit ) ; var task ; begin
52242: LD_INT 0
52244: PPUSH
52245: PPUSH
// result := false ;
52246: NOP4
52250: PUSH
52251: LD_INT 0
52253: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
52254: NOP4
52258: PUSH
52259: NOP4
52263: PPUSH
52264: NOP4
52268: ST_TO_ADDR
// if task then
52269: NOP4
52273: IFFALSE 52301
// if task [ 1 ] [ 1 ] = p then
52275: NOP4
52279: PUSH
52280: LD_INT 1
52282: ARRAY
52283: PUSH
52284: LD_INT 1
52286: ARRAY
52287: PUSH
52288: LD_STRING p
52290: EQUAL
52291: IFFALSE 52301
// result := true ;
52293: NOP4
52297: PUSH
52298: LD_INT 1
52300: ST_TO_ADDR
// end ;
52301: LD_VAR 0 2
52305: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
52306: LD_INT 0
52308: PPUSH
52309: PPUSH
52310: PPUSH
52311: PPUSH
// if pos < 1 then
52312: NOP4
52316: PUSH
52317: LD_INT 1
52319: LESS
52320: IFFALSE 52324
// exit ;
52322: GO 52627
// if pos = 1 then
52324: NOP4
52328: PUSH
52329: LD_INT 1
52331: EQUAL
52332: IFFALSE 52365
// result := Replace ( arr , pos [ 1 ] , value ) else
52334: NOP4
52338: PUSH
52339: NOP4
52343: PPUSH
52344: NOP4
52348: PUSH
52349: LD_INT 1
52351: ARRAY
52352: PPUSH
52353: NOP4
52357: PPUSH
52358: NOP4
52362: ST_TO_ADDR
52363: GO 52627
// begin tmp := arr ;
52365: NOP4
52369: PUSH
52370: NOP4
52374: ST_TO_ADDR
// s_arr := [ tmp ] ;
52375: NOP4
52379: PUSH
52380: NOP4
52384: PUSH
52385: EMPTY
52386: LIST
52387: ST_TO_ADDR
// for i = 1 to pos - 1 do
52388: NOP4
52392: PUSH
52393: DOUBLE
52394: LD_INT 1
52396: DEC
52397: ST_TO_ADDR
52398: NOP4
52402: PUSH
52403: LD_INT 1
52405: MINUS
52406: PUSH
52407: FOR_TO
52408: IFFALSE 52453
// begin tmp := tmp [ pos [ i ] ] ;
52410: NOP4
52414: PUSH
52415: NOP4
52419: PUSH
52420: NOP4
52424: PUSH
52425: NOP4
52429: ARRAY
52430: ARRAY
52431: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
52432: NOP4
52436: PUSH
52437: NOP4
52441: PUSH
52442: NOP4
52446: PUSH
52447: EMPTY
52448: LIST
52449: ADD
52450: ST_TO_ADDR
// end ;
52451: GO 52407
52453: POP
52454: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
52455: NOP4
52459: PUSH
52460: NOP4
52464: PPUSH
52465: NOP4
52469: PUSH
52470: NOP4
52474: ARRAY
52475: PPUSH
52476: NOP4
52480: PPUSH
52481: NOP4
52485: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
52486: NOP4
52490: PUSH
52491: NOP4
52495: PPUSH
52496: NOP4
52500: PPUSH
52501: NOP4
52505: PPUSH
52506: NOP4
52510: ST_TO_ADDR
// for i = s_arr downto 2 do
52511: NOP4
52515: PUSH
52516: DOUBLE
52517: NOP4
52521: INC
52522: ST_TO_ADDR
52523: LD_INT 2
52525: PUSH
52526: FOR_DOWNTO
52527: IFFALSE 52611
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
52529: NOP4
52533: PUSH
52534: NOP4
52538: PUSH
52539: NOP4
52543: PUSH
52544: LD_INT 1
52546: MINUS
52547: ARRAY
52548: PPUSH
52549: NOP4
52553: PUSH
52554: NOP4
52558: PUSH
52559: LD_INT 1
52561: MINUS
52562: ARRAY
52563: PPUSH
52564: NOP4
52568: PUSH
52569: NOP4
52573: ARRAY
52574: PPUSH
52575: NOP4
52579: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
52580: NOP4
52584: PUSH
52585: NOP4
52589: PPUSH
52590: NOP4
52594: PUSH
52595: LD_INT 1
52597: MINUS
52598: PPUSH
52599: NOP4
52603: PPUSH
52604: NOP4
52608: ST_TO_ADDR
// end ;
52609: GO 52526
52611: POP
52612: POP
// result := s_arr [ 1 ] ;
52613: NOP4
52617: PUSH
52618: NOP4
52622: PUSH
52623: LD_INT 1
52625: ARRAY
52626: ST_TO_ADDR
// end ; end ;
52627: LD_VAR 0 4
52631: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
52632: LD_INT 0
52634: PPUSH
52635: PPUSH
// if not list then
52636: NOP4
52640: NOT
52641: IFFALSE 52645
// exit ;
52643: GO 52736
// i := list [ pos1 ] ;
52645: NOP4
52649: PUSH
52650: NOP4
52654: PUSH
52655: NOP4
52659: ARRAY
52660: ST_TO_ADDR
// if not i then
52661: NOP4
52665: NOT
52666: IFFALSE 52670
// exit ;
52668: GO 52736
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
52670: NOP4
52674: PUSH
52675: NOP4
52679: PPUSH
52680: NOP4
52684: PPUSH
52685: NOP4
52689: PUSH
52690: NOP4
52694: ARRAY
52695: PPUSH
52696: NOP4
52700: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
52701: NOP4
52705: PUSH
52706: NOP4
52710: PPUSH
52711: NOP4
52715: PPUSH
52716: NOP4
52720: PPUSH
52721: NOP4
52725: ST_TO_ADDR
// result := list ;
52726: NOP4
52730: PUSH
52731: NOP4
52735: ST_TO_ADDR
// end ;
52736: LD_VAR 0 4
52740: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
52741: LD_INT 0
52743: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
52744: NOP4
52748: PUSH
52749: NOP4
52753: PPUSH
52754: NOP4
52758: PPUSH
52759: NOP4
52763: PPUSH
52764: NOP4
52768: PPUSH
52769: NOP4
52773: PPUSH
52774: NOP4
52778: PPUSH
52779: NOP4
52783: PPUSH
52784: NOP4
52788: ST_TO_ADDR
// end ;
52789: LD_VAR 0 5
52793: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
52794: LD_INT 0
52796: PPUSH
52797: PPUSH
52798: PPUSH
52799: PPUSH
// if not list then
52800: NOP4
52804: NOT
52805: IFFALSE 52809
// exit ;
52807: GO 53197
// result := [ ] ;
52809: NOP4
52813: PUSH
52814: EMPTY
52815: ST_TO_ADDR
// for i in list do
52816: NOP4
52820: PUSH
52821: NOP4
52825: PUSH
52826: FOR_IN
52827: IFFALSE 53029
// begin tmp := GetDistUnitXY ( i , x , y ) ;
52829: NOP4
52833: PUSH
52834: NOP4
52838: PPUSH
52839: NOP4
52843: PPUSH
52844: NOP4
52848: PPUSH
52849: NOP4
52853: ST_TO_ADDR
// if not result then
52854: NOP4
52858: NOT
52859: IFFALSE 52885
// result := [ [ i , tmp ] ] else
52861: NOP4
52865: PUSH
52866: NOP4
52870: PUSH
52871: NOP4
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: ST_TO_ADDR
52883: GO 53027
// begin if result [ result ] [ 2 ] < tmp then
52885: NOP4
52889: PUSH
52890: NOP4
52894: ARRAY
52895: PUSH
52896: LD_INT 2
52898: ARRAY
52899: PUSH
52900: NOP4
52904: LESS
52905: IFFALSE 52947
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
52907: NOP4
52911: PUSH
52912: NOP4
52916: PPUSH
52917: NOP4
52921: PUSH
52922: LD_INT 1
52924: PLUS
52925: PPUSH
52926: NOP4
52930: PUSH
52931: NOP4
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PPUSH
52940: NOP4
52944: ST_TO_ADDR
52945: GO 53027
// for j = 1 to result do
52947: NOP4
52951: PUSH
52952: DOUBLE
52953: LD_INT 1
52955: DEC
52956: ST_TO_ADDR
52957: NOP4
52961: PUSH
52962: FOR_TO
52963: IFFALSE 53025
// begin if tmp < result [ j ] [ 2 ] then
52965: NOP4
52969: PUSH
52970: NOP4
52974: PUSH
52975: NOP4
52979: ARRAY
52980: PUSH
52981: LD_INT 2
52983: ARRAY
52984: LESS
52985: IFFALSE 53023
// begin result := Insert ( result , j , [ i , tmp ] ) ;
52987: NOP4
52991: PUSH
52992: NOP4
52996: PPUSH
52997: NOP4
53001: PPUSH
53002: NOP4
53006: PUSH
53007: NOP4
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PPUSH
53016: NOP4
53020: ST_TO_ADDR
// break ;
53021: GO 53025
// end ; end ;
53023: GO 52962
53025: POP
53026: POP
// end ; end ;
53027: GO 52826
53029: POP
53030: POP
// if result and not asc then
53031: NOP4
53035: PUSH
53036: NOP4
53040: NOT
53041: AND
53042: IFFALSE 53117
// begin tmp := result ;
53044: NOP4
53048: PUSH
53049: NOP4
53053: ST_TO_ADDR
// for i = tmp downto 1 do
53054: NOP4
53058: PUSH
53059: DOUBLE
53060: NOP4
53064: INC
53065: ST_TO_ADDR
53066: LD_INT 1
53068: PUSH
53069: FOR_DOWNTO
53070: IFFALSE 53115
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
53072: NOP4
53076: PUSH
53077: NOP4
53081: PPUSH
53082: NOP4
53086: PUSH
53087: NOP4
53091: MINUS
53092: PUSH
53093: LD_INT 1
53095: PLUS
53096: PPUSH
53097: NOP4
53101: PUSH
53102: NOP4
53106: ARRAY
53107: PPUSH
53108: NOP4
53112: ST_TO_ADDR
53113: GO 53069
53115: POP
53116: POP
// end ; tmp := [ ] ;
53117: NOP4
53121: PUSH
53122: EMPTY
53123: ST_TO_ADDR
// if mode then
53124: NOP4
53128: IFFALSE 53197
// begin for i = 1 to result do
53130: NOP4
53134: PUSH
53135: DOUBLE
53136: LD_INT 1
53138: DEC
53139: ST_TO_ADDR
53140: NOP4
53144: PUSH
53145: FOR_TO
53146: IFFALSE 53185
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
53148: NOP4
53152: PUSH
53153: NOP4
53157: PPUSH
53158: NOP4
53162: PPUSH
53163: NOP4
53167: PUSH
53168: NOP4
53172: ARRAY
53173: PUSH
53174: LD_INT 1
53176: ARRAY
53177: PPUSH
53178: NOP4
53182: ST_TO_ADDR
53183: GO 53145
53185: POP
53186: POP
// result := tmp ;
53187: NOP4
53191: PUSH
53192: NOP4
53196: ST_TO_ADDR
// end ; end ;
53197: LD_VAR 0 6
53201: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
53202: LD_INT 0
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
53210: NOP4
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: ST_TO_ADDR
// if not x or not y then
53232: NOP4
53236: NOT
53237: PUSH
53238: NOP4
53242: NOT
53243: OR
53244: IFFALSE 53248
// exit ;
53246: GO 54894
// if not range then
53248: NOP4
53252: NOT
53253: IFFALSE 53263
// range := 10 ;
53255: NOP4
53259: PUSH
53260: LD_INT 10
53262: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
53263: NOP4
53267: PUSH
53268: LD_INT 81
53270: PUSH
53271: NOP4
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 92
53282: PUSH
53283: NOP4
53287: PUSH
53288: NOP4
53292: PUSH
53293: NOP4
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 3
53306: PUSH
53307: LD_INT 21
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: LIST
53325: PPUSH
53326: NOP4
53330: ST_TO_ADDR
// if not tmp then
53331: NOP4
53335: NOT
53336: IFFALSE 53340
// exit ;
53338: GO 54894
// for i in tmp do
53340: NOP4
53344: PUSH
53345: NOP4
53349: PUSH
53350: FOR_IN
53351: IFFALSE 54869
// begin points := [ 0 , 0 , 0 ] ;
53353: NOP4
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: ST_TO_ADDR
// bpoints := 1 ;
53372: NOP4
53376: PUSH
53377: LD_INT 1
53379: ST_TO_ADDR
// case GetType ( i ) of unit_human :
53380: NOP4
53384: PPUSH
53385: NOP4
53389: PUSH
53390: LD_INT 1
53392: DOUBLE
53393: EQUAL
53394: IFTRUE 53398
53396: GO 53976
53398: POP
// begin if GetClass ( i ) = 1 then
53399: NOP4
53403: PPUSH
53404: NOP4
53408: PUSH
53409: LD_INT 1
53411: EQUAL
53412: IFFALSE 53433
// points := [ 10 , 5 , 3 ] ;
53414: NOP4
53418: PUSH
53419: LD_INT 10
53421: PUSH
53422: LD_INT 5
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: LIST
53432: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
53433: NOP4
53437: PPUSH
53438: NOP4
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: LD_INT 4
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: LIST
53456: IN
53457: IFFALSE 53478
// points := [ 3 , 2 , 1 ] ;
53459: NOP4
53463: PUSH
53464: LD_INT 3
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: ST_TO_ADDR
// if GetClass ( i ) = 5 then
53478: NOP4
53482: PPUSH
53483: NOP4
53487: PUSH
53488: LD_INT 5
53490: EQUAL
53491: IFFALSE 53512
// points := [ 130 , 5 , 2 ] ;
53493: NOP4
53497: PUSH
53498: LD_INT 130
53500: PUSH
53501: LD_INT 5
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: LIST
53511: ST_TO_ADDR
// if GetClass ( i ) = 8 then
53512: NOP4
53516: PPUSH
53517: NOP4
53521: PUSH
53522: LD_INT 8
53524: EQUAL
53525: IFFALSE 53546
// points := [ 35 , 35 , 30 ] ;
53527: NOP4
53531: PUSH
53532: LD_INT 35
53534: PUSH
53535: LD_INT 35
53537: PUSH
53538: LD_INT 30
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: ST_TO_ADDR
// if GetClass ( i ) = 9 then
53546: NOP4
53550: PPUSH
53551: NOP4
53555: PUSH
53556: LD_INT 9
53558: EQUAL
53559: IFFALSE 53580
// points := [ 20 , 55 , 40 ] ;
53561: NOP4
53565: PUSH
53566: LD_INT 20
53568: PUSH
53569: LD_INT 55
53571: PUSH
53572: LD_INT 40
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: LIST
53579: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
53580: NOP4
53584: PPUSH
53585: NOP4
53589: PUSH
53590: LD_INT 12
53592: PUSH
53593: LD_INT 16
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: IN
53600: IFFALSE 53621
// points := [ 5 , 3 , 2 ] ;
53602: NOP4
53606: PUSH
53607: LD_INT 5
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: LIST
53620: ST_TO_ADDR
// if GetClass ( i ) = 17 then
53621: NOP4
53625: PPUSH
53626: NOP4
53630: PUSH
53631: LD_INT 17
53633: EQUAL
53634: IFFALSE 53655
// points := [ 100 , 50 , 75 ] ;
53636: NOP4
53640: PUSH
53641: LD_INT 100
53643: PUSH
53644: LD_INT 50
53646: PUSH
53647: LD_INT 75
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: LIST
53654: ST_TO_ADDR
// if GetClass ( i ) = 15 then
53655: NOP4
53659: PPUSH
53660: NOP4
53664: PUSH
53665: LD_INT 15
53667: EQUAL
53668: IFFALSE 53689
// points := [ 10 , 5 , 3 ] ;
53670: NOP4
53674: PUSH
53675: LD_INT 10
53677: PUSH
53678: LD_INT 5
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: LIST
53688: ST_TO_ADDR
// if GetClass ( i ) = 14 then
53689: NOP4
53693: PPUSH
53694: NOP4
53698: PUSH
53699: LD_INT 14
53701: EQUAL
53702: IFFALSE 53723
// points := [ 10 , 0 , 0 ] ;
53704: NOP4
53708: PUSH
53709: LD_INT 10
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: LIST
53722: ST_TO_ADDR
// if GetClass ( i ) = 11 then
53723: NOP4
53727: PPUSH
53728: NOP4
53732: PUSH
53733: LD_INT 11
53735: EQUAL
53736: IFFALSE 53757
// points := [ 30 , 10 , 5 ] ;
53738: NOP4
53742: PUSH
53743: LD_INT 30
53745: PUSH
53746: LD_INT 10
53748: PUSH
53749: LD_INT 5
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: LIST
53756: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
53757: NOP4
53761: PPUSH
53762: LD_INT 5
53764: PPUSH
53765: NOP4
53769: PUSH
53770: LD_INT 2
53772: EQUAL
53773: IFFALSE 53790
// bpoints := bpoints * 1.8 ;
53775: NOP4
53779: PUSH
53780: NOP4
53784: PUSH
53785: LD_REAL  1.80000000000000E+0000
53788: MUL
53789: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
53790: NOP4
53794: PPUSH
53795: NOP4
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 3
53808: PUSH
53809: LD_INT 4
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: IN
53818: PUSH
53819: NOP4
53823: PPUSH
53824: LD_INT 51
53826: PPUSH
53827: NOP4
53831: PUSH
53832: LD_INT 2
53834: EQUAL
53835: AND
53836: IFFALSE 53853
// bpoints := bpoints * 1.2 ;
53838: NOP4
53842: PUSH
53843: NOP4
53847: PUSH
53848: LD_REAL  1.20000000000000E+0000
53851: MUL
53852: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
53853: NOP4
53857: PPUSH
53858: NOP4
53862: PUSH
53863: LD_INT 5
53865: PUSH
53866: LD_INT 7
53868: PUSH
53869: LD_INT 9
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: LIST
53876: IN
53877: PUSH
53878: NOP4
53882: PPUSH
53883: LD_INT 52
53885: PPUSH
53886: NOP4
53890: PUSH
53891: LD_INT 2
53893: EQUAL
53894: AND
53895: IFFALSE 53912
// bpoints := bpoints * 1.5 ;
53897: NOP4
53901: PUSH
53902: NOP4
53906: PUSH
53907: LD_REAL  1.50000000000000E+0000
53910: MUL
53911: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
53912: NOP4
53916: PPUSH
53917: LD_INT 66
53919: PPUSH
53920: NOP4
53924: PUSH
53925: LD_INT 2
53927: EQUAL
53928: IFFALSE 53945
// bpoints := bpoints * 1.1 ;
53930: NOP4
53934: PUSH
53935: NOP4
53939: PUSH
53940: LD_REAL  1.10000000000000E+0000
53943: MUL
53944: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
53945: NOP4
53949: PUSH
53950: NOP4
53954: PUSH
53955: NOP4
53959: PPUSH
53960: LD_INT 1
53962: PPUSH
53963: NOP4
53967: PUSH
53968: LD_REAL  1.15000000000000E+0000
53971: MUL
53972: MUL
53973: ST_TO_ADDR
// end ; unit_vehicle :
53974: GO 54798
53976: LD_INT 2
53978: DOUBLE
53979: EQUAL
53980: IFTRUE 53984
53982: GO 54786
53984: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
53985: NOP4
53989: PPUSH
53990: NOP4
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 42
54000: PUSH
54001: LD_INT 24
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: LIST
54008: IN
54009: IFFALSE 54030
// points := [ 25 , 5 , 3 ] ;
54011: NOP4
54015: PUSH
54016: LD_INT 25
54018: PUSH
54019: LD_INT 5
54021: PUSH
54022: LD_INT 3
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: LIST
54029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
54030: NOP4
54034: PPUSH
54035: NOP4
54039: PUSH
54040: LD_INT 4
54042: PUSH
54043: LD_INT 43
54045: PUSH
54046: LD_INT 25
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: LIST
54053: IN
54054: IFFALSE 54075
// points := [ 40 , 15 , 5 ] ;
54056: NOP4
54060: PUSH
54061: LD_INT 40
54063: PUSH
54064: LD_INT 15
54066: PUSH
54067: LD_INT 5
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
54075: NOP4
54079: PPUSH
54080: NOP4
54084: PUSH
54085: LD_INT 3
54087: PUSH
54088: LD_INT 23
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: IN
54095: IFFALSE 54116
// points := [ 7 , 25 , 8 ] ;
54097: NOP4
54101: PUSH
54102: LD_INT 7
54104: PUSH
54105: LD_INT 25
54107: PUSH
54108: LD_INT 8
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
54116: NOP4
54120: PPUSH
54121: NOP4
54125: PUSH
54126: LD_INT 5
54128: PUSH
54129: LD_INT 27
54131: PUSH
54132: LD_INT 44
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: LIST
54139: IN
54140: IFFALSE 54161
// points := [ 14 , 50 , 16 ] ;
54142: NOP4
54146: PUSH
54147: LD_INT 14
54149: PUSH
54150: LD_INT 50
54152: PUSH
54153: LD_INT 16
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: LIST
54160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
54161: NOP4
54165: PPUSH
54166: NOP4
54170: PUSH
54171: LD_INT 6
54173: PUSH
54174: LD_INT 46
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: IN
54181: IFFALSE 54202
// points := [ 32 , 120 , 70 ] ;
54183: NOP4
54187: PUSH
54188: LD_INT 32
54190: PUSH
54191: LD_INT 120
54193: PUSH
54194: LD_INT 70
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: LIST
54201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
54202: NOP4
54206: PPUSH
54207: NOP4
54211: PUSH
54212: LD_INT 7
54214: PUSH
54215: LD_INT 28
54217: PUSH
54218: LD_INT 45
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: LIST
54225: IN
54226: IFFALSE 54247
// points := [ 35 , 20 , 45 ] ;
54228: NOP4
54232: PUSH
54233: LD_INT 35
54235: PUSH
54236: LD_INT 20
54238: PUSH
54239: LD_INT 45
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: LIST
54246: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
54247: NOP4
54251: PPUSH
54252: NOP4
54256: PUSH
54257: LD_INT 47
54259: PUSH
54260: EMPTY
54261: LIST
54262: IN
54263: IFFALSE 54284
// points := [ 67 , 45 , 75 ] ;
54265: NOP4
54269: PUSH
54270: LD_INT 67
54272: PUSH
54273: LD_INT 45
54275: PUSH
54276: LD_INT 75
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
54284: NOP4
54288: PPUSH
54289: NOP4
54293: PUSH
54294: LD_INT 26
54296: PUSH
54297: EMPTY
54298: LIST
54299: IN
54300: IFFALSE 54321
// points := [ 120 , 30 , 80 ] ;
54302: NOP4
54306: PUSH
54307: LD_INT 120
54309: PUSH
54310: LD_INT 30
54312: PUSH
54313: LD_INT 80
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
54321: NOP4
54325: PPUSH
54326: NOP4
54330: PUSH
54331: LD_INT 22
54333: PUSH
54334: EMPTY
54335: LIST
54336: IN
54337: IFFALSE 54358
// points := [ 40 , 1 , 1 ] ;
54339: NOP4
54343: PUSH
54344: LD_INT 40
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
54358: NOP4
54362: PPUSH
54363: NOP4
54367: PUSH
54368: LD_INT 29
54370: PUSH
54371: EMPTY
54372: LIST
54373: IN
54374: IFFALSE 54395
// points := [ 70 , 200 , 400 ] ;
54376: NOP4
54380: PUSH
54381: LD_INT 70
54383: PUSH
54384: LD_INT 200
54386: PUSH
54387: LD_INT 400
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
54395: NOP4
54399: PPUSH
54400: NOP4
54404: PUSH
54405: LD_INT 14
54407: PUSH
54408: LD_INT 53
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: IN
54415: IFFALSE 54436
// points := [ 40 , 10 , 20 ] ;
54417: NOP4
54421: PUSH
54422: LD_INT 40
54424: PUSH
54425: LD_INT 10
54427: PUSH
54428: LD_INT 20
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: LIST
54435: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
54436: NOP4
54440: PPUSH
54441: NOP4
54445: PUSH
54446: LD_INT 9
54448: PUSH
54449: EMPTY
54450: LIST
54451: IN
54452: IFFALSE 54473
// points := [ 5 , 70 , 20 ] ;
54454: NOP4
54458: PUSH
54459: LD_INT 5
54461: PUSH
54462: LD_INT 70
54464: PUSH
54465: LD_INT 20
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: LIST
54472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
54473: NOP4
54477: PPUSH
54478: NOP4
54482: PUSH
54483: LD_INT 10
54485: PUSH
54486: EMPTY
54487: LIST
54488: IN
54489: IFFALSE 54510
// points := [ 35 , 110 , 70 ] ;
54491: NOP4
54495: PUSH
54496: LD_INT 35
54498: PUSH
54499: LD_INT 110
54501: PUSH
54502: LD_INT 70
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
54510: NOP4
54514: PPUSH
54515: NOP4
54519: PUSH
54520: LD_INT 25
54522: EQUAL
54523: IFFALSE 54544
// points := [ 80 , 65 , 100 ] ;
54525: NOP4
54529: PUSH
54530: LD_INT 80
54532: PUSH
54533: LD_INT 65
54535: PUSH
54536: LD_INT 100
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: LIST
54543: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
54544: NOP4
54548: PPUSH
54549: NOP4
54553: PUSH
54554: LD_INT 1
54556: EQUAL
54557: IFFALSE 54592
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
54559: NOP4
54563: PUSH
54564: NOP4
54568: PUSH
54569: NOP4
54573: PPUSH
54574: NOP4
54578: PPUSH
54579: LD_INT 3
54581: PPUSH
54582: NOP4
54586: PUSH
54587: LD_INT 4
54589: MUL
54590: MUL
54591: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
54592: NOP4
54596: PPUSH
54597: NOP4
54601: PUSH
54602: LD_INT 2
54604: EQUAL
54605: IFFALSE 54656
// begin j := IsControledBy ( i ) ;
54607: NOP4
54611: PUSH
54612: NOP4
54616: PPUSH
54617: NOP4
54621: ST_TO_ADDR
// if j then
54622: NOP4
54626: IFFALSE 54656
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
54628: NOP4
54632: PUSH
54633: NOP4
54637: PUSH
54638: NOP4
54642: PPUSH
54643: LD_INT 3
54645: PPUSH
54646: NOP4
54650: PUSH
54651: LD_INT 3
54653: MUL
54654: MUL
54655: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
54656: NOP4
54660: PPUSH
54661: NOP4
54665: PUSH
54666: LD_INT 5
54668: PUSH
54669: LD_INT 6
54671: PUSH
54672: LD_INT 46
54674: PUSH
54675: LD_INT 44
54677: PUSH
54678: LD_INT 47
54680: PUSH
54681: LD_INT 45
54683: PUSH
54684: LD_INT 28
54686: PUSH
54687: LD_INT 7
54689: PUSH
54690: LD_INT 27
54692: PUSH
54693: LD_INT 29
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: IN
54708: PUSH
54709: NOP4
54713: PPUSH
54714: LD_INT 52
54716: PPUSH
54717: NOP4
54721: PUSH
54722: LD_INT 2
54724: EQUAL
54725: AND
54726: IFFALSE 54743
// bpoints := bpoints * 1.2 ;
54728: NOP4
54732: PUSH
54733: NOP4
54737: PUSH
54738: LD_REAL  1.20000000000000E+0000
54741: MUL
54742: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
54743: NOP4
54747: PPUSH
54748: NOP4
54752: PUSH
54753: LD_INT 6
54755: PUSH
54756: LD_INT 46
54758: PUSH
54759: LD_INT 47
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: LIST
54766: IN
54767: IFFALSE 54784
// bpoints := bpoints * 1.2 ;
54769: NOP4
54773: PUSH
54774: NOP4
54778: PUSH
54779: LD_REAL  1.20000000000000E+0000
54782: MUL
54783: ST_TO_ADDR
// end ; unit_building :
54784: GO 54798
54786: LD_INT 3
54788: DOUBLE
54789: EQUAL
54790: IFTRUE 54794
54792: GO 54797
54794: POP
// ; end ;
54795: GO 54798
54797: POP
// for j = 1 to 3 do
54798: NOP4
54802: PUSH
54803: DOUBLE
54804: LD_INT 1
54806: DEC
54807: ST_TO_ADDR
54808: LD_INT 3
54810: PUSH
54811: FOR_TO
54812: IFFALSE 54865
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
54814: NOP4
54818: PUSH
54819: NOP4
54823: PPUSH
54824: NOP4
54828: PPUSH
54829: NOP4
54833: PUSH
54834: NOP4
54838: ARRAY
54839: PUSH
54840: NOP4
54844: PUSH
54845: NOP4
54849: ARRAY
54850: PUSH
54851: NOP4
54855: MUL
54856: PLUS
54857: PPUSH
54858: NOP4
54862: ST_TO_ADDR
54863: GO 54811
54865: POP
54866: POP
// end ;
54867: GO 53350
54869: POP
54870: POP
// result := Replace ( result , 4 , tmp ) ;
54871: NOP4
54875: PUSH
54876: NOP4
54880: PPUSH
54881: LD_INT 4
54883: PPUSH
54884: NOP4
54888: PPUSH
54889: NOP4
54893: ST_TO_ADDR
// end ;
54894: LD_VAR 0 5
54898: RET
// export function DangerAtRange ( unit , range ) ; begin
54899: LD_INT 0
54901: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
54902: NOP4
54906: PUSH
54907: NOP4
54911: PPUSH
54912: NOP4
54916: PPUSH
54917: NOP4
54921: PPUSH
54922: NOP4
54926: PPUSH
54927: NOP4
54931: PPUSH
54932: NOP4
54936: PPUSH
54937: NOP4
54941: PPUSH
54942: NOP4
54946: ST_TO_ADDR
// end ;
54947: LD_VAR 0 3
54951: RET
// export function DangerInArea ( side , area ) ; begin
54952: LD_INT 0
54954: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
54955: NOP4
54959: PUSH
54960: NOP4
54964: PPUSH
54965: LD_INT 81
54967: PUSH
54968: NOP4
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PPUSH
54977: NOP4
54981: ST_TO_ADDR
// end ;
54982: LD_VAR 0 3
54986: RET
// export function IsExtension ( b ) ; begin
54987: LD_INT 0
54989: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
54990: NOP4
54994: PUSH
54995: NOP4
54999: PUSH
55000: LD_INT 23
55002: PUSH
55003: LD_INT 20
55005: PUSH
55006: LD_INT 22
55008: PUSH
55009: LD_INT 17
55011: PUSH
55012: LD_INT 24
55014: PUSH
55015: LD_INT 21
55017: PUSH
55018: LD_INT 19
55020: PUSH
55021: LD_INT 16
55023: PUSH
55024: LD_INT 25
55026: PUSH
55027: LD_INT 18
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: IN
55042: ST_TO_ADDR
// end ;
55043: LD_VAR 0 2
55047: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
55048: LD_INT 0
55050: PPUSH
55051: PPUSH
55052: PPUSH
// result := [ ] ;
55053: NOP4
55057: PUSH
55058: EMPTY
55059: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
55060: NOP4
55064: PUSH
55065: NOP4
55069: PPUSH
55070: LD_INT 21
55072: PUSH
55073: LD_INT 3
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PPUSH
55080: NOP4
55084: ST_TO_ADDR
// if not tmp then
55085: NOP4
55089: NOT
55090: IFFALSE 55094
// exit ;
55092: GO 55152
// for i in tmp do
55094: NOP4
55098: PUSH
55099: NOP4
55103: PUSH
55104: FOR_IN
55105: IFFALSE 55140
// if GetBase ( i ) <> base then
55107: NOP4
55111: PPUSH
55112: NOP4
55116: PUSH
55117: NOP4
55121: NONEQUAL
55122: IFFALSE 55138
// ComLinkToBase ( base , i ) ;
55124: NOP4
55128: PPUSH
55129: NOP4
55133: PPUSH
55134: NOP4
55138: GO 55104
55140: POP
55141: POP
// result := tmp ;
55142: NOP4
55146: PUSH
55147: NOP4
55151: ST_TO_ADDR
// end ;
55152: LD_VAR 0 3
55156: RET
// export function ComComplete ( unit , b ) ; var i ; begin
55157: LD_INT 0
55159: PPUSH
55160: PPUSH
// if BuildingStatus ( b ) = bs_build then
55161: NOP4
55165: PPUSH
55166: NOP4
55170: PUSH
55171: LD_INT 1
55173: EQUAL
55174: IFFALSE 55234
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
55176: NOP4
55180: PPUSH
55181: LD_STRING h
55183: PUSH
55184: NOP4
55188: PPUSH
55189: NOP4
55193: PUSH
55194: NOP4
55198: PPUSH
55199: NOP4
55203: PUSH
55204: NOP4
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: PUSH
55227: EMPTY
55228: LIST
55229: PPUSH
55230: NOP4
// end ;
55234: LD_VAR 0 3
55238: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
55239: LD_INT 0
55241: PPUSH
55242: PPUSH
55243: PPUSH
55244: PPUSH
55245: PPUSH
55246: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
55247: NOP4
55251: NOT
55252: PUSH
55253: NOP4
55257: PPUSH
55258: NOP4
55262: PUSH
55263: LD_INT 2
55265: EQUAL
55266: NOT
55267: OR
55268: IFFALSE 55272
// exit ;
55270: GO 55588
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
55272: NOP4
55276: PUSH
55277: LD_INT 22
55279: PUSH
55280: NOP4
55284: PPUSH
55285: NOP4
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: LD_INT 30
55299: PUSH
55300: LD_INT 36
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 34
55309: PUSH
55310: LD_INT 31
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PPUSH
55326: NOP4
55330: ST_TO_ADDR
// if not tmp then
55331: NOP4
55335: NOT
55336: IFFALSE 55340
// exit ;
55338: GO 55588
// result := [ ] ;
55340: NOP4
55344: PUSH
55345: EMPTY
55346: ST_TO_ADDR
// for i in tmp do
55347: NOP4
55351: PUSH
55352: NOP4
55356: PUSH
55357: FOR_IN
55358: IFFALSE 55429
// begin t := UnitsInside ( i ) ;
55360: NOP4
55364: PUSH
55365: NOP4
55369: PPUSH
55370: NOP4
55374: ST_TO_ADDR
// if t then
55375: NOP4
55379: IFFALSE 55427
// for j in t do
55381: NOP4
55385: PUSH
55386: NOP4
55390: PUSH
55391: FOR_IN
55392: IFFALSE 55425
// result := Insert ( result , result + 1 , j ) ;
55394: NOP4
55398: PUSH
55399: NOP4
55403: PPUSH
55404: NOP4
55408: PUSH
55409: LD_INT 1
55411: PLUS
55412: PPUSH
55413: NOP4
55417: PPUSH
55418: NOP4
55422: ST_TO_ADDR
55423: GO 55391
55425: POP
55426: POP
// end ;
55427: GO 55357
55429: POP
55430: POP
// if not result then
55431: NOP4
55435: NOT
55436: IFFALSE 55440
// exit ;
55438: GO 55588
// mech := result [ 1 ] ;
55440: NOP4
55444: PUSH
55445: NOP4
55449: PUSH
55450: LD_INT 1
55452: ARRAY
55453: ST_TO_ADDR
// if result > 1 then
55454: NOP4
55458: PUSH
55459: LD_INT 1
55461: GREATER
55462: IFFALSE 55574
// for i = 2 to result do
55464: NOP4
55468: PUSH
55469: DOUBLE
55470: LD_INT 2
55472: DEC
55473: ST_TO_ADDR
55474: NOP4
55478: PUSH
55479: FOR_TO
55480: IFFALSE 55572
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
55482: NOP4
55486: PUSH
55487: NOP4
55491: PUSH
55492: NOP4
55496: ARRAY
55497: PPUSH
55498: LD_INT 3
55500: PPUSH
55501: NOP4
55505: PUSH
55506: NOP4
55510: PUSH
55511: NOP4
55515: ARRAY
55516: PPUSH
55517: NOP4
55521: MINUS
55522: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
55523: NOP4
55527: PUSH
55528: NOP4
55532: PPUSH
55533: LD_INT 3
55535: PPUSH
55536: NOP4
55540: PUSH
55541: NOP4
55545: PPUSH
55546: NOP4
55550: MINUS
55551: GREATEREQUAL
55552: IFFALSE 55570
// mech := result [ i ] ;
55554: NOP4
55558: PUSH
55559: NOP4
55563: PUSH
55564: NOP4
55568: ARRAY
55569: ST_TO_ADDR
// end ;
55570: GO 55479
55572: POP
55573: POP
// ComLinkTo ( vehicle , mech ) ;
55574: NOP4
55578: PPUSH
55579: NOP4
55583: PPUSH
55584: NOP4
// end ;
55588: LD_VAR 0 2
55592: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
55593: LD_INT 0
55595: PPUSH
55596: PPUSH
55597: PPUSH
55598: PPUSH
55599: PPUSH
55600: PPUSH
55601: PPUSH
55602: PPUSH
55603: PPUSH
55604: PPUSH
55605: PPUSH
55606: PPUSH
55607: PPUSH
// result := [ ] ;
55608: NOP4
55612: PUSH
55613: EMPTY
55614: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
55615: NOP4
55619: PPUSH
55620: NOP4
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: IN
55635: NOT
55636: IFFALSE 55640
// exit ;
55638: GO 57271
// if name then
55640: NOP4
55644: IFFALSE 55660
// SetBName ( base_dep , name ) ;
55646: NOP4
55650: PPUSH
55651: NOP4
55655: PPUSH
55656: NOP4
// base := GetBase ( base_dep ) ;
55660: NOP4
55664: PUSH
55665: NOP4
55669: PPUSH
55670: NOP4
55674: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
55675: NOP4
55679: PUSH
55680: NOP4
55684: PPUSH
55685: NOP4
55689: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
55690: NOP4
55694: PUSH
55695: NOP4
55699: PPUSH
55700: NOP4
55704: ST_TO_ADDR
// if sources then
55705: NOP4
55709: IFFALSE 55756
// for i = 1 to 3 do
55711: NOP4
55715: PUSH
55716: DOUBLE
55717: LD_INT 1
55719: DEC
55720: ST_TO_ADDR
55721: LD_INT 3
55723: PUSH
55724: FOR_TO
55725: IFFALSE 55754
// AddResourceType ( base , i , sources [ i ] ) ;
55727: NOP4
55731: PPUSH
55732: NOP4
55736: PPUSH
55737: NOP4
55741: PUSH
55742: NOP4
55746: ARRAY
55747: PPUSH
55748: NOP4
55752: GO 55724
55754: POP
55755: POP
// buildings := GetBaseBuildings ( base , area ) ;
55756: NOP4
55760: PUSH
55761: NOP4
55765: PPUSH
55766: NOP4
55770: PPUSH
55771: NOP4
55775: ST_TO_ADDR
// InitHc ;
55776: NOP4
// InitUc ;
55780: NOP4
// uc_side := side ;
55784: LD_ADDR_OWVAR 20
55788: PUSH
55789: NOP4
55793: ST_TO_ADDR
// uc_nation := nation ;
55794: LD_ADDR_OWVAR 21
55798: PUSH
55799: NOP4
55803: ST_TO_ADDR
// if buildings then
55804: NOP4
55808: IFFALSE 57130
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
55810: NOP4
55814: PUSH
55815: NOP4
55819: PPUSH
55820: LD_INT 2
55822: PUSH
55823: LD_INT 30
55825: PUSH
55826: LD_INT 29
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 30
55835: PUSH
55836: LD_INT 30
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: LIST
55847: PPUSH
55848: NOP4
55852: ST_TO_ADDR
// if tmp then
55853: NOP4
55857: IFFALSE 55905
// for i in tmp do
55859: NOP4
55863: PUSH
55864: NOP4
55868: PUSH
55869: FOR_IN
55870: IFFALSE 55903
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
55872: NOP4
55876: PPUSH
55877: NOP4
55881: PPUSH
55882: NOP4
55886: PPUSH
55887: NOP4
55891: PPUSH
55892: NOP4
55896: PPUSH
55897: NOP4
55901: GO 55869
55903: POP
55904: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
55905: NOP4
55909: PPUSH
55910: LD_INT 2
55912: PUSH
55913: LD_INT 30
55915: PUSH
55916: LD_INT 32
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 30
55925: PUSH
55926: LD_INT 33
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: LIST
55937: PPUSH
55938: NOP4
55942: IFFALSE 56030
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
55944: NOP4
55948: PUSH
55949: NOP4
55953: PPUSH
55954: LD_INT 2
55956: PUSH
55957: LD_INT 30
55959: PUSH
55960: LD_INT 32
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 30
55969: PUSH
55970: LD_INT 33
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: LIST
55981: PPUSH
55982: NOP4
55986: PUSH
55987: FOR_IN
55988: IFFALSE 56028
// begin if not GetBWeapon ( i ) then
55990: NOP4
55994: PPUSH
55995: NOP4
55999: NOT
56000: IFFALSE 56026
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
56002: NOP4
56006: PPUSH
56007: NOP4
56011: PPUSH
56012: NOP4
56016: PPUSH
56017: NOP4
56021: PPUSH
56022: NOP4
// end ;
56026: GO 55987
56028: POP
56029: POP
// end ; for i = 1 to personel do
56030: NOP4
56034: PUSH
56035: DOUBLE
56036: LD_INT 1
56038: DEC
56039: ST_TO_ADDR
56040: NOP4
56044: PUSH
56045: FOR_TO
56046: IFFALSE 57110
// begin if i > 4 then
56048: NOP4
56052: PUSH
56053: LD_INT 4
56055: GREATER
56056: IFFALSE 56060
// break ;
56058: GO 57110
// case i of 1 :
56060: NOP4
56064: PUSH
56065: LD_INT 1
56067: DOUBLE
56068: EQUAL
56069: IFTRUE 56073
56071: GO 56153
56073: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
56074: NOP4
56078: PUSH
56079: NOP4
56083: PPUSH
56084: LD_INT 22
56086: PUSH
56087: NOP4
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 58
56098: PUSH
56099: EMPTY
56100: LIST
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: LD_INT 30
56107: PUSH
56108: LD_INT 32
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 30
56117: PUSH
56118: LD_INT 4
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 30
56127: PUSH
56128: LD_INT 5
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: LIST
56145: PPUSH
56146: NOP4
56150: ST_TO_ADDR
56151: GO 56375
56153: LD_INT 2
56155: DOUBLE
56156: EQUAL
56157: IFTRUE 56161
56159: GO 56223
56161: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
56162: NOP4
56166: PUSH
56167: NOP4
56171: PPUSH
56172: LD_INT 22
56174: PUSH
56175: NOP4
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: LD_INT 30
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 30
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: LIST
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PPUSH
56216: NOP4
56220: ST_TO_ADDR
56221: GO 56375
56223: LD_INT 3
56225: DOUBLE
56226: EQUAL
56227: IFTRUE 56231
56229: GO 56293
56231: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
56232: NOP4
56236: PUSH
56237: NOP4
56241: PPUSH
56242: LD_INT 22
56244: PUSH
56245: NOP4
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: LD_INT 30
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 30
56269: PUSH
56270: LD_INT 3
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PPUSH
56286: NOP4
56290: ST_TO_ADDR
56291: GO 56375
56293: LD_INT 4
56295: DOUBLE
56296: EQUAL
56297: IFTRUE 56301
56299: GO 56374
56301: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
56302: NOP4
56306: PUSH
56307: NOP4
56311: PPUSH
56312: LD_INT 22
56314: PUSH
56315: NOP4
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: LD_INT 30
56329: PUSH
56330: LD_INT 6
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 30
56339: PUSH
56340: LD_INT 7
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 30
56349: PUSH
56350: LD_INT 8
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PPUSH
56367: NOP4
56371: ST_TO_ADDR
56372: GO 56375
56374: POP
// if i = 1 then
56375: NOP4
56379: PUSH
56380: LD_INT 1
56382: EQUAL
56383: IFFALSE 56494
// begin tmp := [ ] ;
56385: NOP4
56389: PUSH
56390: EMPTY
56391: ST_TO_ADDR
// for j in f do
56392: NOP4
56396: PUSH
56397: NOP4
56401: PUSH
56402: FOR_IN
56403: IFFALSE 56476
// if GetBType ( j ) = b_bunker then
56405: NOP4
56409: PPUSH
56410: NOP4
56414: PUSH
56415: LD_INT 32
56417: EQUAL
56418: IFFALSE 56445
// tmp := Insert ( tmp , 1 , j ) else
56420: NOP4
56424: PUSH
56425: NOP4
56429: PPUSH
56430: LD_INT 1
56432: PPUSH
56433: NOP4
56437: PPUSH
56438: NOP4
56442: ST_TO_ADDR
56443: GO 56474
// tmp := Insert ( tmp , tmp + 1 , j ) ;
56445: NOP4
56449: PUSH
56450: NOP4
56454: PPUSH
56455: NOP4
56459: PUSH
56460: LD_INT 1
56462: PLUS
56463: PPUSH
56464: NOP4
56468: PPUSH
56469: NOP4
56473: ST_TO_ADDR
56474: GO 56402
56476: POP
56477: POP
// if tmp then
56478: NOP4
56482: IFFALSE 56494
// f := tmp ;
56484: NOP4
56488: PUSH
56489: NOP4
56493: ST_TO_ADDR
// end ; x := personel [ i ] ;
56494: NOP4
56498: PUSH
56499: NOP4
56503: PUSH
56504: NOP4
56508: ARRAY
56509: ST_TO_ADDR
// if x = - 1 then
56510: NOP4
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: EQUAL
56519: IFFALSE 56728
// begin for j in f do
56521: NOP4
56525: PUSH
56526: NOP4
56530: PUSH
56531: FOR_IN
56532: IFFALSE 56724
// repeat InitHc ;
56534: NOP4
// if GetBType ( j ) = b_barracks then
56538: NOP4
56542: PPUSH
56543: NOP4
56547: PUSH
56548: LD_INT 5
56550: EQUAL
56551: IFFALSE 56621
// begin if UnitsInside ( j ) < 3 then
56553: NOP4
56557: PPUSH
56558: NOP4
56562: PUSH
56563: LD_INT 3
56565: LESS
56566: IFFALSE 56602
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56568: LD_INT 0
56570: PPUSH
56571: LD_INT 5
56573: PUSH
56574: LD_INT 8
56576: PUSH
56577: LD_INT 9
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: LIST
56584: PUSH
56585: NOP4
56589: ARRAY
56590: PPUSH
56591: NOP4
56595: PPUSH
56596: NOP4
56600: GO 56619
// PrepareHuman ( false , i , skill ) ;
56602: LD_INT 0
56604: PPUSH
56605: NOP4
56609: PPUSH
56610: NOP4
56614: PPUSH
56615: NOP4
// end else
56619: GO 56638
// PrepareHuman ( false , i , skill ) ;
56621: LD_INT 0
56623: PPUSH
56624: NOP4
56628: PPUSH
56629: NOP4
56633: PPUSH
56634: NOP4
// un := CreateHuman ;
56638: NOP4
56642: PUSH
56643: NOP4
56647: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56648: NOP4
56652: PUSH
56653: NOP4
56657: PPUSH
56658: LD_INT 1
56660: PPUSH
56661: NOP4
56665: PPUSH
56666: NOP4
56670: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
56671: NOP4
56675: PPUSH
56676: NOP4
56680: PPUSH
56681: NOP4
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
56685: NOP4
56689: PPUSH
56690: NOP4
56694: PUSH
56695: LD_INT 6
56697: EQUAL
56698: PUSH
56699: NOP4
56703: PPUSH
56704: NOP4
56708: PUSH
56709: LD_INT 32
56711: PUSH
56712: LD_INT 31
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: IN
56719: OR
56720: IFFALSE 56534
56722: GO 56531
56724: POP
56725: POP
// end else
56726: GO 57108
// for j = 1 to x do
56728: NOP4
56732: PUSH
56733: DOUBLE
56734: LD_INT 1
56736: DEC
56737: ST_TO_ADDR
56738: NOP4
56742: PUSH
56743: FOR_TO
56744: IFFALSE 57106
// begin InitHc ;
56746: NOP4
// if not f then
56750: NOP4
56754: NOT
56755: IFFALSE 56844
// begin PrepareHuman ( false , i , skill ) ;
56757: LD_INT 0
56759: PPUSH
56760: NOP4
56764: PPUSH
56765: NOP4
56769: PPUSH
56770: NOP4
// un := CreateHuman ;
56774: NOP4
56778: PUSH
56779: NOP4
56783: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56784: NOP4
56788: PUSH
56789: NOP4
56793: PPUSH
56794: LD_INT 1
56796: PPUSH
56797: NOP4
56801: PPUSH
56802: NOP4
56806: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56807: NOP4
56811: PPUSH
56812: NOP4
56816: PPUSH
56817: NOP4
56821: PPUSH
56822: NOP4
56826: PPUSH
56827: NOP4
56831: PPUSH
56832: LD_INT 10
56834: PPUSH
56835: LD_INT 0
56837: PPUSH
56838: NOP4
// continue ;
56842: GO 56743
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
56844: NOP4
56848: PUSH
56849: LD_INT 1
56851: ARRAY
56852: PPUSH
56853: NOP4
56857: PUSH
56858: NOP4
56862: PUSH
56863: LD_INT 1
56865: ARRAY
56866: PPUSH
56867: NOP4
56871: PUSH
56872: LD_INT 32
56874: PUSH
56875: LD_INT 31
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: IN
56882: AND
56883: PUSH
56884: NOP4
56888: PUSH
56889: LD_INT 1
56891: ARRAY
56892: PPUSH
56893: NOP4
56897: PUSH
56898: LD_INT 6
56900: EQUAL
56901: OR
56902: IFFALSE 56922
// f := Delete ( f , 1 ) ;
56904: NOP4
56908: PUSH
56909: NOP4
56913: PPUSH
56914: LD_INT 1
56916: PPUSH
56917: NOP4
56921: ST_TO_ADDR
// if not f then
56922: NOP4
56926: NOT
56927: IFFALSE 56945
// begin x := x + 2 ;
56929: NOP4
56933: PUSH
56934: NOP4
56938: PUSH
56939: LD_INT 2
56941: PLUS
56942: ST_TO_ADDR
// continue ;
56943: GO 56743
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
56945: NOP4
56949: PUSH
56950: LD_INT 1
56952: ARRAY
56953: PPUSH
56954: NOP4
56958: PUSH
56959: LD_INT 5
56961: EQUAL
56962: IFFALSE 57036
// begin if UnitsInside ( f [ 1 ] ) < 3 then
56964: NOP4
56968: PUSH
56969: LD_INT 1
56971: ARRAY
56972: PPUSH
56973: NOP4
56977: PUSH
56978: LD_INT 3
56980: LESS
56981: IFFALSE 57017
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56983: LD_INT 0
56985: PPUSH
56986: LD_INT 5
56988: PUSH
56989: LD_INT 8
56991: PUSH
56992: LD_INT 9
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: LIST
56999: PUSH
57000: NOP4
57004: ARRAY
57005: PPUSH
57006: NOP4
57010: PPUSH
57011: NOP4
57015: GO 57034
// PrepareHuman ( false , i , skill ) ;
57017: LD_INT 0
57019: PPUSH
57020: NOP4
57024: PPUSH
57025: NOP4
57029: PPUSH
57030: NOP4
// end else
57034: GO 57053
// PrepareHuman ( false , i , skill ) ;
57036: LD_INT 0
57038: PPUSH
57039: NOP4
57043: PPUSH
57044: NOP4
57048: PPUSH
57049: NOP4
// un := CreateHuman ;
57053: NOP4
57057: PUSH
57058: NOP4
57062: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57063: NOP4
57067: PUSH
57068: NOP4
57072: PPUSH
57073: LD_INT 1
57075: PPUSH
57076: NOP4
57080: PPUSH
57081: NOP4
57085: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
57086: NOP4
57090: PPUSH
57091: NOP4
57095: PUSH
57096: LD_INT 1
57098: ARRAY
57099: PPUSH
57100: NOP4
// end ;
57104: GO 56743
57106: POP
57107: POP
// end ;
57108: GO 56045
57110: POP
57111: POP
// result := result ^ buildings ;
57112: NOP4
57116: PUSH
57117: NOP4
57121: PUSH
57122: NOP4
57126: ADD
57127: ST_TO_ADDR
// end else
57128: GO 57271
// begin for i = 1 to personel do
57130: NOP4
57134: PUSH
57135: DOUBLE
57136: LD_INT 1
57138: DEC
57139: ST_TO_ADDR
57140: NOP4
57144: PUSH
57145: FOR_TO
57146: IFFALSE 57269
// begin if i > 4 then
57148: NOP4
57152: PUSH
57153: LD_INT 4
57155: GREATER
57156: IFFALSE 57160
// break ;
57158: GO 57269
// x := personel [ i ] ;
57160: NOP4
57164: PUSH
57165: NOP4
57169: PUSH
57170: NOP4
57174: ARRAY
57175: ST_TO_ADDR
// if x = - 1 then
57176: NOP4
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: EQUAL
57185: IFFALSE 57189
// continue ;
57187: GO 57145
// PrepareHuman ( false , i , skill ) ;
57189: LD_INT 0
57191: PPUSH
57192: NOP4
57196: PPUSH
57197: NOP4
57201: PPUSH
57202: NOP4
// un := CreateHuman ;
57206: NOP4
57210: PUSH
57211: NOP4
57215: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
57216: NOP4
57220: PPUSH
57221: NOP4
57225: PPUSH
57226: NOP4
57230: PPUSH
57231: NOP4
57235: PPUSH
57236: NOP4
57240: PPUSH
57241: LD_INT 10
57243: PPUSH
57244: LD_INT 0
57246: PPUSH
57247: NOP4
// result := result ^ un ;
57251: NOP4
57255: PUSH
57256: NOP4
57260: PUSH
57261: NOP4
57265: ADD
57266: ST_TO_ADDR
// end ;
57267: GO 57145
57269: POP
57270: POP
// end ; end ;
57271: LD_VAR 0 7
57275: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
57276: LD_INT 0
57278: PPUSH
57279: PPUSH
57280: PPUSH
57281: PPUSH
57282: PPUSH
57283: PPUSH
57284: PPUSH
57285: PPUSH
57286: PPUSH
57287: PPUSH
57288: PPUSH
57289: PPUSH
57290: PPUSH
57291: PPUSH
57292: PPUSH
57293: PPUSH
// result := false ;
57294: NOP4
57298: PUSH
57299: LD_INT 0
57301: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
57302: NOP4
57306: NOT
57307: PUSH
57308: NOP4
57312: PPUSH
57313: NOP4
57317: PUSH
57318: LD_INT 32
57320: PUSH
57321: LD_INT 33
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: IN
57328: NOT
57329: OR
57330: IFFALSE 57334
// exit ;
57332: GO 58470
// nat := GetNation ( tower ) ;
57334: NOP4
57338: PUSH
57339: NOP4
57343: PPUSH
57344: NOP4
57348: ST_TO_ADDR
// side := GetSide ( tower ) ;
57349: NOP4
57353: PUSH
57354: NOP4
57358: PPUSH
57359: NOP4
57363: ST_TO_ADDR
// x := GetX ( tower ) ;
57364: NOP4
57368: PUSH
57369: NOP4
57373: PPUSH
57374: NOP4
57378: ST_TO_ADDR
// y := GetY ( tower ) ;
57379: NOP4
57383: PUSH
57384: NOP4
57388: PPUSH
57389: NOP4
57393: ST_TO_ADDR
// if not x or not y then
57394: NOP4
57398: NOT
57399: PUSH
57400: NOP4
57404: NOT
57405: OR
57406: IFFALSE 57410
// exit ;
57408: GO 58470
// weapon := 0 ;
57410: NOP4
57414: PUSH
57415: LD_INT 0
57417: ST_TO_ADDR
// fac_list := [ ] ;
57418: NOP4
57422: PUSH
57423: EMPTY
57424: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
57425: NOP4
57429: PUSH
57430: NOP4
57434: PPUSH
57435: NOP4
57439: PPUSH
57440: NOP4
57444: PPUSH
57445: NOP4
57449: PPUSH
57450: LD_INT 30
57452: PUSH
57453: LD_INT 3
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PPUSH
57460: NOP4
57464: ST_TO_ADDR
// if not factories then
57465: NOP4
57469: NOT
57470: IFFALSE 57474
// exit ;
57472: GO 58470
// for i in factories do
57474: NOP4
57478: PUSH
57479: NOP4
57483: PUSH
57484: FOR_IN
57485: IFFALSE 57510
// fac_list := fac_list union AvailableWeaponList ( i ) ;
57487: NOP4
57491: PUSH
57492: NOP4
57496: PUSH
57497: NOP4
57501: PPUSH
57502: NOP4
57506: UNION
57507: ST_TO_ADDR
57508: GO 57484
57510: POP
57511: POP
// if not fac_list then
57512: NOP4
57516: NOT
57517: IFFALSE 57521
// exit ;
57519: GO 58470
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
57521: NOP4
57525: PUSH
57526: LD_INT 4
57528: PUSH
57529: LD_INT 5
57531: PUSH
57532: LD_INT 9
57534: PUSH
57535: LD_INT 10
57537: PUSH
57538: LD_INT 6
57540: PUSH
57541: LD_INT 7
57543: PUSH
57544: LD_INT 11
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 27
57558: PUSH
57559: LD_INT 28
57561: PUSH
57562: LD_INT 26
57564: PUSH
57565: LD_INT 30
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 43
57576: PUSH
57577: LD_INT 44
57579: PUSH
57580: LD_INT 46
57582: PUSH
57583: LD_INT 45
57585: PUSH
57586: LD_INT 47
57588: PUSH
57589: LD_INT 49
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: LIST
57604: PUSH
57605: NOP4
57609: ARRAY
57610: ST_TO_ADDR
// for i in list do
57611: NOP4
57615: PUSH
57616: NOP4
57620: PUSH
57621: FOR_IN
57622: IFFALSE 57655
// if not i in fac_list then
57624: NOP4
57628: PUSH
57629: NOP4
57633: IN
57634: NOT
57635: IFFALSE 57653
// list := list diff i ;
57637: NOP4
57641: PUSH
57642: NOP4
57646: PUSH
57647: NOP4
57651: DIFF
57652: ST_TO_ADDR
57653: GO 57621
57655: POP
57656: POP
// if not list then
57657: NOP4
57661: NOT
57662: IFFALSE 57666
// exit ;
57664: GO 58470
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
57666: NOP4
57670: PUSH
57671: LD_INT 3
57673: EQUAL
57674: PUSH
57675: LD_INT 49
57677: PUSH
57678: NOP4
57682: IN
57683: AND
57684: PUSH
57685: LD_INT 31
57687: PPUSH
57688: NOP4
57692: PPUSH
57693: NOP4
57697: PUSH
57698: LD_INT 2
57700: EQUAL
57701: AND
57702: IFFALSE 57762
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
57704: LD_INT 22
57706: PUSH
57707: NOP4
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 35
57718: PUSH
57719: LD_INT 49
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 91
57728: PUSH
57729: NOP4
57733: PUSH
57734: LD_INT 10
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: LIST
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: LIST
57746: PPUSH
57747: NOP4
57751: NOT
57752: IFFALSE 57762
// weapon := ru_time_lapser ;
57754: NOP4
57758: PUSH
57759: LD_INT 49
57761: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
57762: NOP4
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: IN
57777: PUSH
57778: LD_INT 11
57780: PUSH
57781: NOP4
57785: IN
57786: PUSH
57787: LD_INT 30
57789: PUSH
57790: NOP4
57794: IN
57795: OR
57796: AND
57797: PUSH
57798: LD_INT 6
57800: PPUSH
57801: NOP4
57805: PPUSH
57806: NOP4
57810: PUSH
57811: LD_INT 2
57813: EQUAL
57814: AND
57815: IFFALSE 57980
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
57817: LD_INT 22
57819: PUSH
57820: NOP4
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: LD_INT 35
57834: PUSH
57835: LD_INT 11
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 35
57844: PUSH
57845: LD_INT 30
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 91
57859: PUSH
57860: NOP4
57864: PUSH
57865: LD_INT 18
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: LIST
57877: PPUSH
57878: NOP4
57882: NOT
57883: PUSH
57884: LD_INT 22
57886: PUSH
57887: NOP4
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 30
57901: PUSH
57902: LD_INT 32
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 30
57911: PUSH
57912: LD_INT 33
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 91
57926: PUSH
57927: NOP4
57931: PUSH
57932: LD_INT 12
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: LIST
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: LIST
57944: PUSH
57945: EMPTY
57946: LIST
57947: PPUSH
57948: NOP4
57952: PUSH
57953: LD_INT 2
57955: GREATER
57956: AND
57957: IFFALSE 57980
// weapon := [ us_radar , ar_radar ] [ nat ] ;
57959: NOP4
57963: PUSH
57964: LD_INT 11
57966: PUSH
57967: LD_INT 30
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: NOP4
57978: ARRAY
57979: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
57980: NOP4
57984: NOT
57985: PUSH
57986: LD_INT 40
57988: PPUSH
57989: NOP4
57993: PPUSH
57994: NOP4
57998: PUSH
57999: LD_INT 2
58001: EQUAL
58002: AND
58003: PUSH
58004: LD_INT 7
58006: PUSH
58007: NOP4
58011: IN
58012: PUSH
58013: LD_INT 28
58015: PUSH
58016: NOP4
58020: IN
58021: OR
58022: PUSH
58023: LD_INT 45
58025: PUSH
58026: NOP4
58030: IN
58031: OR
58032: AND
58033: IFFALSE 58287
// begin hex := GetHexInfo ( x , y ) ;
58035: NOP4
58039: PUSH
58040: NOP4
58044: PPUSH
58045: NOP4
58049: PPUSH
58050: NOP4
58054: ST_TO_ADDR
// if hex [ 1 ] then
58055: NOP4
58059: PUSH
58060: LD_INT 1
58062: ARRAY
58063: IFFALSE 58067
// exit ;
58065: GO 58470
// height := hex [ 2 ] ;
58067: NOP4
58071: PUSH
58072: NOP4
58076: PUSH
58077: LD_INT 2
58079: ARRAY
58080: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
58081: NOP4
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: LD_INT 2
58091: PUSH
58092: LD_INT 3
58094: PUSH
58095: LD_INT 5
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: ST_TO_ADDR
// for i in tmp do
58104: NOP4
58108: PUSH
58109: NOP4
58113: PUSH
58114: FOR_IN
58115: IFFALSE 58285
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
58117: NOP4
58121: PUSH
58122: NOP4
58126: PPUSH
58127: NOP4
58131: PPUSH
58132: LD_INT 5
58134: PPUSH
58135: NOP4
58139: PUSH
58140: NOP4
58144: PPUSH
58145: NOP4
58149: PPUSH
58150: LD_INT 5
58152: PPUSH
58153: NOP4
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58162: NOP4
58166: PUSH
58167: LD_INT 1
58169: ARRAY
58170: PPUSH
58171: NOP4
58175: PUSH
58176: LD_INT 2
58178: ARRAY
58179: PPUSH
58180: NOP4
58184: IFFALSE 58283
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
58186: NOP4
58190: PUSH
58191: NOP4
58195: PUSH
58196: LD_INT 1
58198: ARRAY
58199: PPUSH
58200: NOP4
58204: PUSH
58205: LD_INT 2
58207: ARRAY
58208: PPUSH
58209: NOP4
58213: ST_TO_ADDR
// if hex [ 1 ] then
58214: NOP4
58218: PUSH
58219: LD_INT 1
58221: ARRAY
58222: IFFALSE 58226
// continue ;
58224: GO 58114
// h := hex [ 2 ] ;
58226: NOP4
58230: PUSH
58231: NOP4
58235: PUSH
58236: LD_INT 2
58238: ARRAY
58239: ST_TO_ADDR
// if h + 7 < height then
58240: NOP4
58244: PUSH
58245: LD_INT 7
58247: PLUS
58248: PUSH
58249: NOP4
58253: LESS
58254: IFFALSE 58283
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
58256: NOP4
58260: PUSH
58261: LD_INT 7
58263: PUSH
58264: LD_INT 28
58266: PUSH
58267: LD_INT 45
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: LIST
58274: PUSH
58275: NOP4
58279: ARRAY
58280: ST_TO_ADDR
// break ;
58281: GO 58285
// end ; end ; end ;
58283: GO 58114
58285: POP
58286: POP
// end ; if not weapon then
58287: NOP4
58291: NOT
58292: IFFALSE 58352
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
58294: NOP4
58298: PUSH
58299: NOP4
58303: PUSH
58304: LD_INT 11
58306: PUSH
58307: LD_INT 30
58309: PUSH
58310: LD_INT 49
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: LIST
58317: DIFF
58318: ST_TO_ADDR
// if not list then
58319: NOP4
58323: NOT
58324: IFFALSE 58328
// exit ;
58326: GO 58470
// weapon := list [ rand ( 1 , list ) ] ;
58328: NOP4
58332: PUSH
58333: NOP4
58337: PUSH
58338: LD_INT 1
58340: PPUSH
58341: NOP4
58345: PPUSH
58346: NOP4
58350: ARRAY
58351: ST_TO_ADDR
// end ; if weapon then
58352: NOP4
58356: IFFALSE 58470
// begin tmp := CostOfWeapon ( weapon ) ;
58358: NOP4
58362: PUSH
58363: NOP4
58367: PPUSH
58368: NOP4
58372: ST_TO_ADDR
// j := GetBase ( tower ) ;
58373: NOP4
58377: PUSH
58378: NOP4
58382: PPUSH
58383: NOP4
58387: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
58388: NOP4
58392: PPUSH
58393: LD_INT 1
58395: PPUSH
58396: NOP4
58400: PUSH
58401: NOP4
58405: PUSH
58406: LD_INT 1
58408: ARRAY
58409: GREATEREQUAL
58410: PUSH
58411: NOP4
58415: PPUSH
58416: LD_INT 2
58418: PPUSH
58419: NOP4
58423: PUSH
58424: NOP4
58428: PUSH
58429: LD_INT 2
58431: ARRAY
58432: GREATEREQUAL
58433: AND
58434: PUSH
58435: NOP4
58439: PPUSH
58440: LD_INT 3
58442: PPUSH
58443: NOP4
58447: PUSH
58448: NOP4
58452: PUSH
58453: LD_INT 3
58455: ARRAY
58456: GREATEREQUAL
58457: AND
58458: IFFALSE 58470
// result := weapon ;
58460: NOP4
58464: PUSH
58465: NOP4
58469: ST_TO_ADDR
// end ; end ;
58470: LD_VAR 0 3
58474: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
58475: LD_INT 0
58477: PPUSH
58478: PPUSH
// result := true ;
58479: NOP4
58483: PUSH
58484: LD_INT 1
58486: ST_TO_ADDR
// if array1 = array2 then
58487: NOP4
58491: PUSH
58492: NOP4
58496: EQUAL
58497: IFFALSE 58557
// begin for i = 1 to array1 do
58499: NOP4
58503: PUSH
58504: DOUBLE
58505: LD_INT 1
58507: DEC
58508: ST_TO_ADDR
58509: NOP4
58513: PUSH
58514: FOR_TO
58515: IFFALSE 58553
// if array1 [ i ] <> array2 [ i ] then
58517: NOP4
58521: PUSH
58522: NOP4
58526: ARRAY
58527: PUSH
58528: NOP4
58532: PUSH
58533: NOP4
58537: ARRAY
58538: NONEQUAL
58539: IFFALSE 58551
// begin result := false ;
58541: NOP4
58545: PUSH
58546: LD_INT 0
58548: ST_TO_ADDR
// break ;
58549: GO 58553
// end ;
58551: GO 58514
58553: POP
58554: POP
// end else
58555: GO 58565
// result := false ;
58557: NOP4
58561: PUSH
58562: LD_INT 0
58564: ST_TO_ADDR
// end ;
58565: LD_VAR 0 3
58569: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
58570: LD_INT 0
58572: PPUSH
58573: PPUSH
58574: PPUSH
// pom := GetBase ( fac ) ;
58575: NOP4
58579: PUSH
58580: NOP4
58584: PPUSH
58585: NOP4
58589: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
58590: NOP4
58594: PUSH
58595: NOP4
58599: PUSH
58600: LD_INT 1
58602: ARRAY
58603: PPUSH
58604: NOP4
58608: PUSH
58609: LD_INT 2
58611: ARRAY
58612: PPUSH
58613: NOP4
58617: PUSH
58618: LD_INT 3
58620: ARRAY
58621: PPUSH
58622: NOP4
58626: PUSH
58627: LD_INT 4
58629: ARRAY
58630: PPUSH
58631: NOP4
58635: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58636: NOP4
58640: PUSH
58641: NOP4
58645: PPUSH
58646: LD_INT 1
58648: PPUSH
58649: NOP4
58653: PUSH
58654: NOP4
58658: PUSH
58659: LD_INT 1
58661: ARRAY
58662: GREATEREQUAL
58663: PUSH
58664: NOP4
58668: PPUSH
58669: LD_INT 2
58671: PPUSH
58672: NOP4
58676: PUSH
58677: NOP4
58681: PUSH
58682: LD_INT 2
58684: ARRAY
58685: GREATEREQUAL
58686: AND
58687: PUSH
58688: NOP4
58692: PPUSH
58693: LD_INT 3
58695: PPUSH
58696: NOP4
58700: PUSH
58701: NOP4
58705: PUSH
58706: LD_INT 3
58708: ARRAY
58709: GREATEREQUAL
58710: AND
58711: ST_TO_ADDR
// end ;
58712: LD_VAR 0 3
58716: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
58717: LD_INT 0
58719: PPUSH
58720: PPUSH
58721: PPUSH
58722: PPUSH
// pom := GetBase ( building ) ;
58723: NOP4
58727: PUSH
58728: NOP4
58732: PPUSH
58733: NOP4
58737: ST_TO_ADDR
// if not pom then
58738: NOP4
58742: NOT
58743: IFFALSE 58747
// exit ;
58745: GO 58917
// btype := GetBType ( building ) ;
58747: NOP4
58751: PUSH
58752: NOP4
58756: PPUSH
58757: NOP4
58761: ST_TO_ADDR
// if btype = b_armoury then
58762: NOP4
58766: PUSH
58767: LD_INT 4
58769: EQUAL
58770: IFFALSE 58780
// btype := b_barracks ;
58772: NOP4
58776: PUSH
58777: LD_INT 5
58779: ST_TO_ADDR
// if btype = b_depot then
58780: NOP4
58784: PUSH
58785: LD_INT 0
58787: EQUAL
58788: IFFALSE 58798
// btype := b_warehouse ;
58790: NOP4
58794: PUSH
58795: LD_INT 1
58797: ST_TO_ADDR
// if btype = b_workshop then
58798: NOP4
58802: PUSH
58803: LD_INT 2
58805: EQUAL
58806: IFFALSE 58816
// btype := b_factory ;
58808: NOP4
58812: PUSH
58813: LD_INT 3
58815: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
58816: NOP4
58820: PUSH
58821: NOP4
58825: PPUSH
58826: NOP4
58830: PPUSH
58831: NOP4
58835: PPUSH
58836: NOP4
58840: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58841: NOP4
58845: PUSH
58846: NOP4
58850: PPUSH
58851: LD_INT 1
58853: PPUSH
58854: NOP4
58858: PUSH
58859: NOP4
58863: PUSH
58864: LD_INT 1
58866: ARRAY
58867: GREATEREQUAL
58868: PUSH
58869: NOP4
58873: PPUSH
58874: LD_INT 2
58876: PPUSH
58877: NOP4
58881: PUSH
58882: NOP4
58886: PUSH
58887: LD_INT 2
58889: ARRAY
58890: GREATEREQUAL
58891: AND
58892: PUSH
58893: NOP4
58897: PPUSH
58898: LD_INT 3
58900: PPUSH
58901: NOP4
58905: PUSH
58906: NOP4
58910: PUSH
58911: LD_INT 3
58913: ARRAY
58914: GREATEREQUAL
58915: AND
58916: ST_TO_ADDR
// end ;
58917: LD_VAR 0 2
58921: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
58922: LD_INT 0
58924: PPUSH
58925: PPUSH
58926: PPUSH
// pom := GetBase ( building ) ;
58927: NOP4
58931: PUSH
58932: NOP4
58936: PPUSH
58937: NOP4
58941: ST_TO_ADDR
// if not pom then
58942: NOP4
58946: NOT
58947: IFFALSE 58951
// exit ;
58949: GO 59052
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
58951: NOP4
58955: PUSH
58956: NOP4
58960: PPUSH
58961: NOP4
58965: PPUSH
58966: NOP4
58970: PPUSH
58971: NOP4
58975: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58976: NOP4
58980: PUSH
58981: NOP4
58985: PPUSH
58986: LD_INT 1
58988: PPUSH
58989: NOP4
58993: PUSH
58994: NOP4
58998: PUSH
58999: LD_INT 1
59001: ARRAY
59002: GREATEREQUAL
59003: PUSH
59004: NOP4
59008: PPUSH
59009: LD_INT 2
59011: PPUSH
59012: NOP4
59016: PUSH
59017: NOP4
59021: PUSH
59022: LD_INT 2
59024: ARRAY
59025: GREATEREQUAL
59026: AND
59027: PUSH
59028: NOP4
59032: PPUSH
59033: LD_INT 3
59035: PPUSH
59036: NOP4
59040: PUSH
59041: NOP4
59045: PUSH
59046: LD_INT 3
59048: ARRAY
59049: GREATEREQUAL
59050: AND
59051: ST_TO_ADDR
// end ;
59052: LD_VAR 0 3
59056: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
59057: LD_INT 0
59059: PPUSH
59060: PPUSH
59061: PPUSH
59062: PPUSH
59063: PPUSH
59064: PPUSH
59065: PPUSH
59066: PPUSH
59067: PPUSH
59068: PPUSH
// result := false ;
59069: NOP4
59073: PUSH
59074: LD_INT 0
59076: ST_TO_ADDR
// if not base or not btype or not x or not y then
59077: NOP4
59081: NOT
59082: PUSH
59083: NOP4
59087: NOT
59088: OR
59089: PUSH
59090: NOP4
59094: NOT
59095: OR
59096: PUSH
59097: NOP4
59101: NOT
59102: OR
59103: IFFALSE 59107
// exit ;
59105: GO 59716
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
59107: NOP4
59111: PUSH
59112: NOP4
59116: PPUSH
59117: NOP4
59121: PPUSH
59122: NOP4
59126: PPUSH
59127: NOP4
59131: PPUSH
59132: NOP4
59136: PUSH
59137: LD_INT 1
59139: ARRAY
59140: PPUSH
59141: NOP4
59145: PPUSH
59146: LD_INT 0
59148: PPUSH
59149: NOP4
59153: ST_TO_ADDR
// if not hexes then
59154: NOP4
59158: NOT
59159: IFFALSE 59163
// exit ;
59161: GO 59716
// for i = 1 to hexes do
59163: NOP4
59167: PUSH
59168: DOUBLE
59169: LD_INT 1
59171: DEC
59172: ST_TO_ADDR
59173: NOP4
59177: PUSH
59178: FOR_TO
59179: IFFALSE 59714
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59181: NOP4
59185: PUSH
59186: NOP4
59190: PUSH
59191: NOP4
59195: ARRAY
59196: PUSH
59197: LD_INT 1
59199: ARRAY
59200: PPUSH
59201: NOP4
59205: PUSH
59206: NOP4
59210: ARRAY
59211: PUSH
59212: LD_INT 2
59214: ARRAY
59215: PPUSH
59216: NOP4
59220: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
59221: NOP4
59225: PUSH
59226: NOP4
59230: ARRAY
59231: PUSH
59232: LD_INT 1
59234: ARRAY
59235: PPUSH
59236: NOP4
59240: PUSH
59241: NOP4
59245: ARRAY
59246: PUSH
59247: LD_INT 2
59249: ARRAY
59250: PPUSH
59251: NOP4
59255: PUSH
59256: NOP4
59260: PUSH
59261: NOP4
59265: ARRAY
59266: PUSH
59267: LD_INT 1
59269: ARRAY
59270: PPUSH
59271: NOP4
59275: PUSH
59276: NOP4
59280: ARRAY
59281: PUSH
59282: LD_INT 2
59284: ARRAY
59285: PPUSH
59286: NOP4
59290: NOT
59291: OR
59292: PUSH
59293: NOP4
59297: PPUSH
59298: NOP4
59302: PUSH
59303: LD_INT 3
59305: EQUAL
59306: OR
59307: IFFALSE 59313
// exit ;
59309: POP
59310: POP
59311: GO 59716
// if not tmp or not tmp in base then
59313: NOP4
59317: NOT
59318: PUSH
59319: NOP4
59323: PUSH
59324: NOP4
59328: IN
59329: NOT
59330: OR
59331: IFFALSE 59335
// continue ;
59333: GO 59178
// result := true ;
59335: NOP4
59339: PUSH
59340: LD_INT 1
59342: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59343: NOP4
59347: PUSH
59348: NOP4
59352: PPUSH
59353: LD_INT 22
59355: PUSH
59356: NOP4
59360: PPUSH
59361: NOP4
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: LD_INT 30
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 30
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: LIST
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PPUSH
59402: NOP4
59406: ST_TO_ADDR
// if dep then
59407: NOP4
59411: IFFALSE 59547
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
59413: NOP4
59417: PUSH
59418: NOP4
59422: PUSH
59423: LD_INT 1
59425: ARRAY
59426: PPUSH
59427: NOP4
59431: PPUSH
59432: NOP4
59436: PUSH
59437: LD_INT 1
59439: ARRAY
59440: PPUSH
59441: NOP4
59445: PPUSH
59446: LD_INT 5
59448: PPUSH
59449: NOP4
59453: PUSH
59454: NOP4
59458: PUSH
59459: LD_INT 1
59461: ARRAY
59462: PPUSH
59463: NOP4
59467: PPUSH
59468: NOP4
59472: PUSH
59473: LD_INT 1
59475: ARRAY
59476: PPUSH
59477: NOP4
59481: PPUSH
59482: LD_INT 5
59484: PPUSH
59485: NOP4
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
59494: NOP4
59498: PUSH
59499: LD_INT 1
59501: ARRAY
59502: PPUSH
59503: NOP4
59507: PUSH
59508: LD_INT 2
59510: ARRAY
59511: PPUSH
59512: NOP4
59516: IFFALSE 59547
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
59518: NOP4
59522: PPUSH
59523: NOP4
59527: PUSH
59528: LD_INT 1
59530: ARRAY
59531: PPUSH
59532: NOP4
59536: PUSH
59537: LD_INT 2
59539: ARRAY
59540: PPUSH
59541: NOP4
// continue ;
59545: GO 59178
// end ; end ; r := GetDir ( tmp ) ;
59547: NOP4
59551: PUSH
59552: NOP4
59556: PPUSH
59557: NOP4
59561: ST_TO_ADDR
// if r = 5 then
59562: NOP4
59566: PUSH
59567: LD_INT 5
59569: EQUAL
59570: IFFALSE 59580
// r := 0 ;
59572: NOP4
59576: PUSH
59577: LD_INT 0
59579: ST_TO_ADDR
// for j = r to 5 do
59580: NOP4
59584: PUSH
59585: DOUBLE
59586: NOP4
59590: DEC
59591: ST_TO_ADDR
59592: LD_INT 5
59594: PUSH
59595: FOR_TO
59596: IFFALSE 59710
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
59598: NOP4
59602: PUSH
59603: NOP4
59607: PPUSH
59608: NOP4
59612: PPUSH
59613: NOP4
59617: PPUSH
59618: LD_INT 2
59620: PPUSH
59621: NOP4
59625: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
59626: NOP4
59630: PUSH
59631: NOP4
59635: PPUSH
59636: NOP4
59640: PPUSH
59641: NOP4
59645: PPUSH
59646: LD_INT 2
59648: PPUSH
59649: NOP4
59653: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
59654: NOP4
59658: PPUSH
59659: NOP4
59663: PPUSH
59664: NOP4
59668: PUSH
59669: NOP4
59673: PPUSH
59674: NOP4
59678: PPUSH
59679: NOP4
59683: NOT
59684: AND
59685: IFFALSE 59708
// begin ComMoveXY ( tmp , _x , _y ) ;
59687: NOP4
59691: PPUSH
59692: NOP4
59696: PPUSH
59697: NOP4
59701: PPUSH
59702: NOP4
// break ;
59706: GO 59710
// end ; end ;
59708: GO 59595
59710: POP
59711: POP
// end ;
59712: GO 59178
59714: POP
59715: POP
// end ;
59716: LD_VAR 0 6
59720: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
59721: LD_INT 0
59723: PPUSH
59724: PPUSH
59725: PPUSH
59726: PPUSH
59727: PPUSH
59728: PPUSH
59729: PPUSH
59730: PPUSH
59731: PPUSH
59732: PPUSH
// result := false ;
59733: NOP4
59737: PUSH
59738: LD_INT 0
59740: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
59741: NOP4
59745: NOT
59746: PUSH
59747: NOP4
59751: PPUSH
59752: NOP4
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: IN
59767: NOT
59768: OR
59769: PUSH
59770: NOP4
59774: NOT
59775: OR
59776: PUSH
59777: NOP4
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: LD_INT 3
59793: PUSH
59794: LD_INT 4
59796: PUSH
59797: LD_INT 5
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: IN
59808: NOT
59809: OR
59810: PUSH
59811: NOP4
59815: PPUSH
59816: NOP4
59820: PPUSH
59821: NOP4
59825: NOT
59826: OR
59827: IFFALSE 59831
// exit ;
59829: GO 60548
// pom := GetBase ( depot ) ;
59831: NOP4
59835: PUSH
59836: NOP4
59840: PPUSH
59841: NOP4
59845: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59846: NOP4
59850: PUSH
59851: NOP4
59855: PPUSH
59856: NOP4
59860: PPUSH
59861: NOP4
59865: PPUSH
59866: NOP4
59870: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
59871: NOP4
59875: PPUSH
59876: LD_INT 1
59878: PPUSH
59879: NOP4
59883: PUSH
59884: NOP4
59888: PUSH
59889: LD_INT 1
59891: ARRAY
59892: GREATEREQUAL
59893: PUSH
59894: NOP4
59898: PPUSH
59899: LD_INT 2
59901: PPUSH
59902: NOP4
59906: PUSH
59907: NOP4
59911: PUSH
59912: LD_INT 2
59914: ARRAY
59915: GREATEREQUAL
59916: AND
59917: PUSH
59918: NOP4
59922: PPUSH
59923: LD_INT 3
59925: PPUSH
59926: NOP4
59930: PUSH
59931: NOP4
59935: PUSH
59936: LD_INT 3
59938: ARRAY
59939: GREATEREQUAL
59940: AND
59941: NOT
59942: IFFALSE 59946
// exit ;
59944: GO 60548
// if GetBType ( depot ) = b_depot then
59946: NOP4
59950: PPUSH
59951: NOP4
59955: PUSH
59956: LD_INT 0
59958: EQUAL
59959: IFFALSE 59971
// dist := 28 else
59961: NOP4
59965: PUSH
59966: LD_INT 28
59968: ST_TO_ADDR
59969: GO 59979
// dist := 36 ;
59971: NOP4
59975: PUSH
59976: LD_INT 36
59978: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
59979: NOP4
59983: PPUSH
59984: NOP4
59988: PPUSH
59989: NOP4
59993: PPUSH
59994: NOP4
59998: PUSH
59999: NOP4
60003: GREATER
60004: IFFALSE 60008
// exit ;
60006: GO 60548
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
60008: NOP4
60012: PUSH
60013: NOP4
60017: PPUSH
60018: NOP4
60022: PPUSH
60023: NOP4
60027: PPUSH
60028: NOP4
60032: PPUSH
60033: NOP4
60037: PPUSH
60038: NOP4
60042: PPUSH
60043: LD_INT 0
60045: PPUSH
60046: NOP4
60050: ST_TO_ADDR
// if not hexes then
60051: NOP4
60055: NOT
60056: IFFALSE 60060
// exit ;
60058: GO 60548
// hex := GetHexInfo ( x , y ) ;
60060: NOP4
60064: PUSH
60065: NOP4
60069: PPUSH
60070: NOP4
60074: PPUSH
60075: NOP4
60079: ST_TO_ADDR
// if hex [ 1 ] then
60080: NOP4
60084: PUSH
60085: LD_INT 1
60087: ARRAY
60088: IFFALSE 60092
// exit ;
60090: GO 60548
// height := hex [ 2 ] ;
60092: NOP4
60096: PUSH
60097: NOP4
60101: PUSH
60102: LD_INT 2
60104: ARRAY
60105: ST_TO_ADDR
// for i = 1 to hexes do
60106: NOP4
60110: PUSH
60111: DOUBLE
60112: LD_INT 1
60114: DEC
60115: ST_TO_ADDR
60116: NOP4
60120: PUSH
60121: FOR_TO
60122: IFFALSE 60452
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
60124: NOP4
60128: PUSH
60129: NOP4
60133: ARRAY
60134: PUSH
60135: LD_INT 1
60137: ARRAY
60138: PPUSH
60139: NOP4
60143: PUSH
60144: NOP4
60148: ARRAY
60149: PUSH
60150: LD_INT 2
60152: ARRAY
60153: PPUSH
60154: NOP4
60158: NOT
60159: PUSH
60160: NOP4
60164: PUSH
60165: NOP4
60169: ARRAY
60170: PUSH
60171: LD_INT 1
60173: ARRAY
60174: PPUSH
60175: NOP4
60179: PUSH
60180: NOP4
60184: ARRAY
60185: PUSH
60186: LD_INT 2
60188: ARRAY
60189: PPUSH
60190: NOP4
60194: PUSH
60195: LD_INT 0
60197: GREATER
60198: OR
60199: PUSH
60200: NOP4
60204: PUSH
60205: NOP4
60209: ARRAY
60210: PUSH
60211: LD_INT 1
60213: ARRAY
60214: PPUSH
60215: NOP4
60219: PUSH
60220: NOP4
60224: ARRAY
60225: PUSH
60226: LD_INT 2
60228: ARRAY
60229: PPUSH
60230: NOP4
60234: OR
60235: IFFALSE 60241
// exit ;
60237: POP
60238: POP
60239: GO 60548
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60241: NOP4
60245: PUSH
60246: NOP4
60250: PUSH
60251: NOP4
60255: ARRAY
60256: PUSH
60257: LD_INT 1
60259: ARRAY
60260: PPUSH
60261: NOP4
60265: PUSH
60266: NOP4
60270: ARRAY
60271: PUSH
60272: LD_INT 2
60274: ARRAY
60275: PPUSH
60276: NOP4
60280: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
60281: NOP4
60285: PUSH
60286: LD_INT 1
60288: ARRAY
60289: PUSH
60290: NOP4
60294: PUSH
60295: LD_INT 2
60297: ARRAY
60298: PUSH
60299: NOP4
60303: PUSH
60304: LD_INT 2
60306: PLUS
60307: GREATER
60308: OR
60309: PUSH
60310: NOP4
60314: PUSH
60315: LD_INT 2
60317: ARRAY
60318: PUSH
60319: NOP4
60323: PUSH
60324: LD_INT 2
60326: MINUS
60327: LESS
60328: OR
60329: PUSH
60330: NOP4
60334: PUSH
60335: LD_INT 3
60337: ARRAY
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 8
60344: PUSH
60345: LD_INT 9
60347: PUSH
60348: LD_INT 10
60350: PUSH
60351: LD_INT 11
60353: PUSH
60354: LD_INT 12
60356: PUSH
60357: LD_INT 13
60359: PUSH
60360: LD_INT 16
60362: PUSH
60363: LD_INT 17
60365: PUSH
60366: LD_INT 18
60368: PUSH
60369: LD_INT 19
60371: PUSH
60372: LD_INT 20
60374: PUSH
60375: LD_INT 21
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: IN
60393: NOT
60394: OR
60395: PUSH
60396: NOP4
60400: PUSH
60401: LD_INT 5
60403: ARRAY
60404: NOT
60405: OR
60406: PUSH
60407: NOP4
60411: PUSH
60412: LD_INT 6
60414: ARRAY
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: LD_INT 2
60421: PUSH
60422: LD_INT 7
60424: PUSH
60425: LD_INT 9
60427: PUSH
60428: LD_INT 10
60430: PUSH
60431: LD_INT 11
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: IN
60442: NOT
60443: OR
60444: IFFALSE 60450
// exit ;
60446: POP
60447: POP
60448: GO 60548
// end ;
60450: GO 60121
60452: POP
60453: POP
// side := GetSide ( depot ) ;
60454: NOP4
60458: PUSH
60459: NOP4
60463: PPUSH
60464: NOP4
60468: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
60469: NOP4
60473: PPUSH
60474: NOP4
60478: PPUSH
60479: NOP4
60483: PPUSH
60484: LD_INT 20
60486: PPUSH
60487: NOP4
60491: PUSH
60492: LD_INT 4
60494: ARRAY
60495: IFFALSE 60499
// exit ;
60497: GO 60548
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
60499: NOP4
60503: PUSH
60504: LD_INT 29
60506: PUSH
60507: LD_INT 30
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: IN
60514: PUSH
60515: NOP4
60519: PPUSH
60520: NOP4
60524: PPUSH
60525: NOP4
60529: PPUSH
60530: NOP4
60534: NOT
60535: AND
60536: IFFALSE 60540
// exit ;
60538: GO 60548
// result := true ;
60540: NOP4
60544: PUSH
60545: LD_INT 1
60547: ST_TO_ADDR
// end ;
60548: LD_VAR 0 6
60552: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
60553: LD_INT 0
60555: PPUSH
60556: PPUSH
60557: PPUSH
60558: PPUSH
60559: PPUSH
60560: PPUSH
60561: PPUSH
60562: PPUSH
60563: PPUSH
60564: PPUSH
60565: PPUSH
60566: PPUSH
60567: PPUSH
60568: PPUSH
60569: PPUSH
60570: PPUSH
60571: PPUSH
60572: PPUSH
60573: PPUSH
60574: PPUSH
60575: PPUSH
60576: PPUSH
60577: PPUSH
60578: PPUSH
60579: PPUSH
60580: PPUSH
60581: PPUSH
60582: PPUSH
60583: PPUSH
60584: PPUSH
60585: PPUSH
60586: PPUSH
60587: PPUSH
60588: PPUSH
60589: PPUSH
60590: PPUSH
60591: PPUSH
60592: PPUSH
60593: PPUSH
60594: PPUSH
60595: PPUSH
60596: PPUSH
60597: PPUSH
60598: PPUSH
60599: PPUSH
60600: PPUSH
60601: PPUSH
60602: PPUSH
60603: PPUSH
60604: PPUSH
60605: PPUSH
60606: PPUSH
60607: PPUSH
60608: PPUSH
60609: PPUSH
60610: PPUSH
60611: PPUSH
60612: PPUSH
// result = [ ] ;
60613: NOP4
60617: PUSH
60618: EMPTY
60619: ST_TO_ADDR
// temp_list = [ ] ;
60620: NOP4
60624: PUSH
60625: EMPTY
60626: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
60627: NOP4
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: LD_INT 2
60640: PUSH
60641: LD_INT 3
60643: PUSH
60644: LD_INT 4
60646: PUSH
60647: LD_INT 5
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: IN
60658: NOT
60659: PUSH
60660: NOP4
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: IN
60675: PUSH
60676: NOP4
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: LD_INT 3
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: LIST
60694: IN
60695: NOT
60696: AND
60697: OR
60698: IFFALSE 60702
// exit ;
60700: GO 79093
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
60702: NOP4
60706: PUSH
60707: LD_INT 6
60709: PUSH
60710: LD_INT 7
60712: PUSH
60713: LD_INT 8
60715: PUSH
60716: LD_INT 13
60718: PUSH
60719: LD_INT 12
60721: PUSH
60722: LD_INT 15
60724: PUSH
60725: LD_INT 11
60727: PUSH
60728: LD_INT 14
60730: PUSH
60731: LD_INT 10
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: IN
60745: IFFALSE 60755
// btype = b_lab ;
60747: NOP4
60751: PUSH
60752: LD_INT 6
60754: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
60755: NOP4
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: LIST
60773: IN
60774: NOT
60775: PUSH
60776: NOP4
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: LD_INT 2
60789: PUSH
60790: LD_INT 3
60792: PUSH
60793: LD_INT 6
60795: PUSH
60796: LD_INT 36
60798: PUSH
60799: LD_INT 4
60801: PUSH
60802: LD_INT 5
60804: PUSH
60805: LD_INT 31
60807: PUSH
60808: LD_INT 32
60810: PUSH
60811: LD_INT 33
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: IN
60827: NOT
60828: PUSH
60829: NOP4
60833: PUSH
60834: LD_INT 1
60836: EQUAL
60837: AND
60838: OR
60839: PUSH
60840: NOP4
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: LD_INT 3
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: IN
60855: NOT
60856: PUSH
60857: NOP4
60861: PUSH
60862: LD_INT 2
60864: EQUAL
60865: AND
60866: OR
60867: IFFALSE 60877
// mode = 0 ;
60869: NOP4
60873: PUSH
60874: LD_INT 0
60876: ST_TO_ADDR
// case mode of 0 :
60877: NOP4
60881: PUSH
60882: LD_INT 0
60884: DOUBLE
60885: EQUAL
60886: IFTRUE 60890
60888: GO 72343
60890: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60891: NOP4
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: LD_INT 3
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: LD_INT 3
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61084: NOP4
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: LD_INT 1
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: LD_INT 1
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 2
61207: NEG
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: NEG
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 2
61230: NEG
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 3
61241: NEG
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: NEG
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61280: NOP4
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 1
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: LD_INT 2
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 2
61383: PUSH
61384: LD_INT 2
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 2
61403: NEG
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: LD_INT 2
61419: NEG
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: LD_INT 3
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 3
61439: NEG
61440: PUSH
61441: LD_INT 2
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 3
61451: NEG
61452: PUSH
61453: LD_INT 3
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61479: NOP4
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: LD_INT 2
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: LD_INT 2
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: LD_INT 3
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 3
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61675: NOP4
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 2
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 1
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 2
61798: NEG
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 2
61809: NEG
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 3
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 3
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61868: NOP4
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 1
61937: NEG
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: LD_INT 2
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 2
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 2
61971: PUSH
61972: LD_INT 2
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 2
61991: NEG
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 2
62003: NEG
62004: PUSH
62005: LD_INT 2
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 3
62015: PUSH
62016: LD_INT 2
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 3
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 2
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62061: NOP4
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: NEG
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: LD_INT 1
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 2
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: LD_INT 2
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: LD_INT 2
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: LD_INT 2
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: NEG
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 2
62260: NEG
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62291: NOP4
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: LD_INT 1
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: LD_INT 1
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 2
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 2
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: LD_INT 2
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: NEG
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 2
62467: NEG
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 2
62478: NEG
62479: PUSH
62480: LD_INT 1
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: NEG
62491: PUSH
62492: LD_INT 2
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62521: NOP4
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 1
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: LD_INT 1
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: NEG
62603: PUSH
62604: LD_INT 2
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: LD_INT 2
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 2
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 2
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 2
62656: PUSH
62657: LD_INT 2
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: LD_INT 2
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 2
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 2
62697: NEG
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 2
62708: NEG
62709: PUSH
62710: LD_INT 1
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 2
62720: NEG
62721: PUSH
62722: LD_INT 2
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62751: NOP4
62755: PUSH
62756: LD_INT 0
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: LD_INT 1
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: LD_INT 1
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 1
62832: NEG
62833: PUSH
62834: LD_INT 2
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 2
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 1
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 2
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 2
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 2
62886: PUSH
62887: LD_INT 2
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: LD_INT 2
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: LD_INT 2
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 2
62927: NEG
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 2
62938: NEG
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: NEG
62951: PUSH
62952: LD_INT 2
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62981: NOP4
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: LD_INT 1
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: LD_INT 1
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: LD_INT 2
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 2
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: LD_INT 1
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 2
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 2
63116: PUSH
63117: LD_INT 2
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: LD_INT 2
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: LD_INT 2
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 1
63146: NEG
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 2
63157: NEG
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: LD_INT 2
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63211: NOP4
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 0
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: LD_INT 1
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: LD_INT 2
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: LD_INT 2
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 2
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 2
63346: PUSH
63347: LD_INT 2
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: LD_INT 2
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 2
63387: NEG
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: NEG
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 2
63410: NEG
63411: PUSH
63412: LD_INT 2
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63441: NOP4
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 1
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 1
63522: NEG
63523: PUSH
63524: LD_INT 2
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: LD_INT 2
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 2
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 2
63576: PUSH
63577: LD_INT 2
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: LD_INT 2
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: LD_INT 2
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 2
63628: NEG
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 2
63640: NEG
63641: PUSH
63642: LD_INT 2
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 2
63652: NEG
63653: PUSH
63654: LD_INT 3
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: LD_INT 3
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
63721: NOP4
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: LD_INT 0
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: LD_INT 1
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: PUSH
63804: LD_INT 2
63806: NEG
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 0
63814: PUSH
63815: LD_INT 2
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 2
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 2
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: LD_INT 2
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 1
63866: PUSH
63867: LD_INT 2
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: LD_INT 2
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 1
63886: NEG
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 2
63897: NEG
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 2
63908: NEG
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 2
63920: NEG
63921: PUSH
63922: LD_INT 2
63924: NEG
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: LD_INT 2
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 3
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 3
63964: PUSH
63965: LD_INT 2
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
63997: NOP4
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 1
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: LD_INT 1
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 1
64066: NEG
64067: PUSH
64068: LD_INT 1
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: PUSH
64080: LD_INT 2
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: LD_INT 2
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 2
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 2
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: PUSH
64133: LD_INT 2
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 1
64142: PUSH
64143: LD_INT 2
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: LD_INT 2
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: NEG
64163: PUSH
64164: LD_INT 1
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 2
64173: NEG
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 2
64184: NEG
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 2
64196: NEG
64197: PUSH
64198: LD_INT 2
64200: NEG
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 3
64208: PUSH
64209: LD_INT 1
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 3
64218: PUSH
64219: LD_INT 2
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 2
64228: PUSH
64229: LD_INT 3
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: LD_INT 3
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64271: NOP4
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: PUSH
64300: LD_INT 0
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 1
64309: PUSH
64310: LD_INT 1
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: LD_INT 1
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 1
64329: NEG
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: NEG
64353: PUSH
64354: LD_INT 2
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 2
64367: NEG
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 2
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 2
64396: PUSH
64397: LD_INT 1
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 2
64406: PUSH
64407: LD_INT 2
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 2
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 2
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: LD_INT 1
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 2
64447: NEG
64448: PUSH
64449: LD_INT 0
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: NEG
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 2
64470: NEG
64471: PUSH
64472: LD_INT 2
64474: NEG
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 2
64482: PUSH
64483: LD_INT 3
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 1
64492: PUSH
64493: LD_INT 3
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: LD_INT 2
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64547: NOP4
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: LD_INT 1
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: NEG
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 1
64616: NEG
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: LD_INT 2
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: LD_INT 2
64643: NEG
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: LD_INT 1
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 2
64662: PUSH
64663: LD_INT 0
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 2
64682: PUSH
64683: LD_INT 2
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: LD_INT 2
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 2
64723: NEG
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 2
64734: NEG
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 2
64746: NEG
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: NEG
64759: PUSH
64760: LD_INT 2
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 2
64769: NEG
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 3
64780: NEG
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 3
64792: NEG
64793: PUSH
64794: LD_INT 2
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64827: NOP4
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 1
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 1
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 1
64896: NEG
64897: PUSH
64898: LD_INT 1
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: NEG
64909: PUSH
64910: LD_INT 2
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: LD_INT 2
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: PUSH
64932: LD_INT 1
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 2
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 2
64952: PUSH
64953: LD_INT 1
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 2
64962: PUSH
64963: LD_INT 2
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 1
64972: PUSH
64973: LD_INT 2
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: LD_INT 2
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 2
65003: NEG
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 2
65014: NEG
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 2
65026: NEG
65027: PUSH
65028: LD_INT 2
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 2
65038: NEG
65039: PUSH
65040: LD_INT 3
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 1
65050: NEG
65051: PUSH
65052: LD_INT 3
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 3
65062: NEG
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 3
65074: NEG
65075: PUSH
65076: LD_INT 2
65078: NEG
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65109: NOP4
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: LD_INT 1
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 1
65167: NEG
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 1
65178: NEG
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 1
65190: NEG
65191: PUSH
65192: LD_INT 2
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: LD_INT 2
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 1
65213: PUSH
65214: LD_INT 1
65216: NEG
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 2
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 1
65244: PUSH
65245: LD_INT 2
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 0
65254: PUSH
65255: LD_INT 2
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 2
65275: NEG
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 2
65287: NEG
65288: PUSH
65289: LD_INT 2
65291: NEG
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 2
65299: NEG
65300: PUSH
65301: LD_INT 3
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 3
65322: PUSH
65323: LD_INT 1
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: LD_INT 3
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 1
65342: NEG
65343: PUSH
65344: LD_INT 2
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 3
65353: NEG
65354: PUSH
65355: LD_INT 2
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65388: NOP4
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: LD_INT 0
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 1
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 0
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: PUSH
65448: LD_INT 0
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 1
65457: NEG
65458: PUSH
65459: LD_INT 1
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: NEG
65470: PUSH
65471: LD_INT 2
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 0
65481: PUSH
65482: LD_INT 2
65484: NEG
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 1
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 2
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 2
65523: PUSH
65524: LD_INT 2
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 1
65533: PUSH
65534: LD_INT 2
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 1
65543: NEG
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 2
65554: NEG
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 2
65565: NEG
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: LD_INT 3
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: LD_INT 2
65592: NEG
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 3
65600: PUSH
65601: LD_INT 2
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 2
65610: PUSH
65611: LD_INT 3
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 2
65620: NEG
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 3
65631: NEG
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65666: NOP4
65670: PUSH
65671: LD_INT 0
65673: PUSH
65674: LD_INT 0
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 0
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 1
65704: PUSH
65705: LD_INT 1
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: LD_INT 1
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 1
65724: NEG
65725: PUSH
65726: LD_INT 0
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: NEG
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: LD_INT 2
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: PUSH
65760: LD_INT 1
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 2
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 2
65780: PUSH
65781: LD_INT 1
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 2
65790: PUSH
65791: LD_INT 2
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: PUSH
65801: LD_INT 2
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: NEG
65821: PUSH
65822: LD_INT 1
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 2
65831: NEG
65832: PUSH
65833: LD_INT 1
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 2
65843: NEG
65844: PUSH
65845: LD_INT 2
65847: NEG
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 2
65855: NEG
65856: PUSH
65857: LD_INT 3
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 2
65867: PUSH
65868: LD_INT 1
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 3
65878: PUSH
65879: LD_INT 1
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: LD_INT 3
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 1
65898: NEG
65899: PUSH
65900: LD_INT 2
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 3
65909: NEG
65910: PUSH
65911: LD_INT 2
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65944: NOP4
65948: PUSH
65949: LD_INT 0
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: LD_INT 1
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 1
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 1
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 1
66002: NEG
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 1
66013: NEG
66014: PUSH
66015: LD_INT 1
66017: NEG
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 1
66025: NEG
66026: PUSH
66027: LD_INT 2
66029: NEG
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: LD_INT 2
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 1
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 2
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 2
66069: PUSH
66070: LD_INT 2
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 1
66079: PUSH
66080: LD_INT 2
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 0
66089: PUSH
66090: LD_INT 2
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 1
66099: NEG
66100: PUSH
66101: LD_INT 1
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 2
66121: NEG
66122: PUSH
66123: LD_INT 1
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: NEG
66134: PUSH
66135: LD_INT 3
66137: NEG
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: LD_INT 2
66148: NEG
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 3
66156: PUSH
66157: LD_INT 2
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 2
66166: PUSH
66167: LD_INT 3
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 2
66176: NEG
66177: PUSH
66178: LD_INT 1
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 3
66187: NEG
66188: PUSH
66189: LD_INT 1
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66222: NOP4
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: LD_INT 1
66242: NEG
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 1
66260: PUSH
66261: LD_INT 1
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: LD_INT 1
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 1
66280: NEG
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 1
66291: NEG
66292: PUSH
66293: LD_INT 1
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 1
66303: NEG
66304: PUSH
66305: LD_INT 2
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: LD_INT 1
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 2
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 2
66336: PUSH
66337: LD_INT 1
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 1
66346: PUSH
66347: LD_INT 2
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 0
66356: PUSH
66357: LD_INT 2
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 1
66366: NEG
66367: PUSH
66368: LD_INT 1
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 2
66377: NEG
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 2
66388: NEG
66389: PUSH
66390: LD_INT 1
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 2
66400: NEG
66401: PUSH
66402: LD_INT 2
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 2
66412: NEG
66413: PUSH
66414: LD_INT 3
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 2
66424: PUSH
66425: LD_INT 1
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 3
66435: PUSH
66436: LD_INT 1
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 1
66445: PUSH
66446: LD_INT 3
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 1
66455: NEG
66456: PUSH
66457: LD_INT 2
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 3
66466: NEG
66467: PUSH
66468: LD_INT 2
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66501: NOP4
66505: PUSH
66506: LD_INT 0
66508: PUSH
66509: LD_INT 0
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: LD_INT 1
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 1
66529: PUSH
66530: LD_INT 0
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 1
66539: PUSH
66540: LD_INT 1
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: LD_INT 1
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 1
66559: NEG
66560: PUSH
66561: LD_INT 0
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 1
66570: NEG
66571: PUSH
66572: LD_INT 1
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: LD_INT 2
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 0
66594: PUSH
66595: LD_INT 2
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 1
66605: PUSH
66606: LD_INT 1
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 2
66616: PUSH
66617: LD_INT 1
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 2
66626: PUSH
66627: LD_INT 2
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: PUSH
66637: LD_INT 2
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 1
66646: NEG
66647: PUSH
66648: LD_INT 1
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 2
66657: NEG
66658: PUSH
66659: LD_INT 0
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 2
66668: NEG
66669: PUSH
66670: LD_INT 1
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 2
66680: NEG
66681: PUSH
66682: LD_INT 2
66684: NEG
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 1
66692: NEG
66693: PUSH
66694: LD_INT 3
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: LD_INT 2
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 3
66715: PUSH
66716: LD_INT 2
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: LD_INT 3
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 2
66735: NEG
66736: PUSH
66737: LD_INT 1
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 3
66746: NEG
66747: PUSH
66748: LD_INT 1
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66781: NOP4
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 0
66798: PUSH
66799: LD_INT 1
66801: NEG
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 1
66809: PUSH
66810: LD_INT 0
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 1
66819: PUSH
66820: LD_INT 1
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: LD_INT 1
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 1
66839: NEG
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 1
66850: NEG
66851: PUSH
66852: LD_INT 1
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 2
66862: PUSH
66863: LD_INT 1
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 2
66872: NEG
66873: PUSH
66874: LD_INT 1
66876: NEG
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66893: NOP4
66897: PUSH
66898: LD_INT 0
66900: PUSH
66901: LD_INT 0
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 1
66921: PUSH
66922: LD_INT 0
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 1
66931: PUSH
66932: LD_INT 1
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 0
66941: PUSH
66942: LD_INT 1
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 1
66951: NEG
66952: PUSH
66953: LD_INT 0
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 1
66962: NEG
66963: PUSH
66964: LD_INT 1
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: PUSH
66976: LD_INT 2
66978: NEG
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 1
66986: PUSH
66987: LD_INT 2
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
67005: NOP4
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: LD_INT 0
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 0
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 1
67033: PUSH
67034: LD_INT 0
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 1
67043: PUSH
67044: LD_INT 1
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 0
67053: PUSH
67054: LD_INT 1
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 1
67063: NEG
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 1
67074: NEG
67075: PUSH
67076: LD_INT 1
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 1
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 1
67097: NEG
67098: PUSH
67099: LD_INT 1
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
67117: NOP4
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 0
67134: PUSH
67135: LD_INT 1
67137: NEG
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 1
67145: PUSH
67146: LD_INT 0
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: LD_INT 1
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 0
67165: PUSH
67166: LD_INT 1
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 1
67175: NEG
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 1
67186: NEG
67187: PUSH
67188: LD_INT 1
67190: NEG
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 2
67198: PUSH
67199: LD_INT 1
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 2
67208: NEG
67209: PUSH
67210: LD_INT 1
67212: NEG
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
67229: NOP4
67233: PUSH
67234: LD_INT 0
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 0
67246: PUSH
67247: LD_INT 1
67249: NEG
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: LD_INT 1
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: LD_INT 1
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 1
67287: NEG
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 1
67298: NEG
67299: PUSH
67300: LD_INT 1
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: NEG
67311: PUSH
67312: LD_INT 2
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 1
67322: PUSH
67323: LD_INT 2
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
67341: NOP4
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 0
67358: PUSH
67359: LD_INT 1
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 1
67369: PUSH
67370: LD_INT 0
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 1
67379: PUSH
67380: LD_INT 1
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 0
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 1
67410: NEG
67411: PUSH
67412: LD_INT 1
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 1
67422: PUSH
67423: LD_INT 1
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 1
67433: NEG
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67453: NOP4
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: LD_INT 0
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: LD_INT 1
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 1
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 1
67491: PUSH
67492: LD_INT 1
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 0
67501: PUSH
67502: LD_INT 1
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 1
67511: NEG
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 1
67522: NEG
67523: PUSH
67524: LD_INT 1
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 1
67534: NEG
67535: PUSH
67536: LD_INT 2
67538: NEG
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 1
67546: PUSH
67547: LD_INT 1
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 2
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 2
67567: PUSH
67568: LD_INT 1
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 2
67577: PUSH
67578: LD_INT 2
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 1
67587: PUSH
67588: LD_INT 2
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 1
67597: NEG
67598: PUSH
67599: LD_INT 1
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 2
67608: NEG
67609: PUSH
67610: LD_INT 0
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 2
67619: NEG
67620: PUSH
67621: LD_INT 1
67623: NEG
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 2
67631: NEG
67632: PUSH
67633: LD_INT 2
67635: NEG
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 2
67643: NEG
67644: PUSH
67645: LD_INT 3
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 2
67655: PUSH
67656: LD_INT 1
67658: NEG
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 3
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 3
67676: PUSH
67677: LD_INT 1
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 3
67686: PUSH
67687: LD_INT 2
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 3
67696: PUSH
67697: LD_INT 3
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 2
67706: PUSH
67707: LD_INT 3
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 2
67716: NEG
67717: PUSH
67718: LD_INT 1
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 3
67727: NEG
67728: PUSH
67729: LD_INT 0
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 3
67738: NEG
67739: PUSH
67740: LD_INT 1
67742: NEG
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 3
67750: NEG
67751: PUSH
67752: LD_INT 2
67754: NEG
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 3
67762: NEG
67763: PUSH
67764: LD_INT 3
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67803: NOP4
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: LD_INT 0
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 0
67820: PUSH
67821: LD_INT 1
67823: NEG
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 1
67831: PUSH
67832: LD_INT 0
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 1
67841: PUSH
67842: LD_INT 1
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 0
67851: PUSH
67852: LD_INT 1
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 1
67861: NEG
67862: PUSH
67863: LD_INT 0
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 1
67872: NEG
67873: PUSH
67874: LD_INT 1
67876: NEG
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 1
67884: NEG
67885: PUSH
67886: LD_INT 2
67888: NEG
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: LD_INT 2
67899: NEG
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 1
67907: PUSH
67908: LD_INT 1
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 2
67918: PUSH
67919: LD_INT 1
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 2
67928: PUSH
67929: LD_INT 2
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 1
67938: PUSH
67939: LD_INT 2
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 0
67948: PUSH
67949: LD_INT 2
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 1
67958: NEG
67959: PUSH
67960: LD_INT 1
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 2
67969: NEG
67970: PUSH
67971: LD_INT 1
67973: NEG
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 2
67981: NEG
67982: PUSH
67983: LD_INT 2
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 2
67993: NEG
67994: PUSH
67995: LD_INT 3
67997: NEG
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 1
68005: NEG
68006: PUSH
68007: LD_INT 3
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 0
68017: PUSH
68018: LD_INT 3
68020: NEG
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: LD_INT 2
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 3
68039: PUSH
68040: LD_INT 2
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 3
68049: PUSH
68050: LD_INT 3
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 2
68059: PUSH
68060: LD_INT 3
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: LD_INT 3
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 0
68079: PUSH
68080: LD_INT 3
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 1
68089: NEG
68090: PUSH
68091: LD_INT 2
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 3
68100: NEG
68101: PUSH
68102: LD_INT 2
68104: NEG
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 3
68112: NEG
68113: PUSH
68114: LD_INT 3
68116: NEG
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68153: NOP4
68157: PUSH
68158: LD_INT 0
68160: PUSH
68161: LD_INT 0
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: LD_INT 1
68173: NEG
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 1
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 1
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 0
68201: PUSH
68202: LD_INT 1
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 1
68211: NEG
68212: PUSH
68213: LD_INT 0
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: LD_INT 1
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 1
68234: NEG
68235: PUSH
68236: LD_INT 2
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 0
68246: PUSH
68247: LD_INT 2
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 1
68257: PUSH
68258: LD_INT 1
68260: NEG
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 2
68268: PUSH
68269: LD_INT 0
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 2
68278: PUSH
68279: LD_INT 1
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 1
68288: PUSH
68289: LD_INT 2
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: LD_INT 2
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: PUSH
68310: LD_INT 1
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 2
68319: NEG
68320: PUSH
68321: LD_INT 0
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 2
68330: NEG
68331: PUSH
68332: LD_INT 1
68334: NEG
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 1
68342: NEG
68343: PUSH
68344: LD_INT 3
68346: NEG
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 0
68354: PUSH
68355: LD_INT 3
68357: NEG
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 1
68365: PUSH
68366: LD_INT 2
68368: NEG
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 2
68376: PUSH
68377: LD_INT 1
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 3
68387: PUSH
68388: LD_INT 0
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 3
68397: PUSH
68398: LD_INT 1
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 1
68407: PUSH
68408: LD_INT 3
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 0
68417: PUSH
68418: LD_INT 3
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 1
68427: NEG
68428: PUSH
68429: LD_INT 2
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 2
68438: NEG
68439: PUSH
68440: LD_INT 1
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 3
68449: NEG
68450: PUSH
68451: LD_INT 0
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 3
68460: NEG
68461: PUSH
68462: LD_INT 1
68464: NEG
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68501: NOP4
68505: PUSH
68506: LD_INT 0
68508: PUSH
68509: LD_INT 0
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 0
68518: PUSH
68519: LD_INT 1
68521: NEG
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 1
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 1
68539: PUSH
68540: LD_INT 1
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 0
68549: PUSH
68550: LD_INT 1
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 1
68559: NEG
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 1
68570: NEG
68571: PUSH
68572: LD_INT 1
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 1
68582: NEG
68583: PUSH
68584: LD_INT 2
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 1
68594: PUSH
68595: LD_INT 1
68597: NEG
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 2
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 2
68615: PUSH
68616: LD_INT 1
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 2
68625: PUSH
68626: LD_INT 2
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 1
68635: PUSH
68636: LD_INT 2
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 1
68645: NEG
68646: PUSH
68647: LD_INT 1
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 2
68656: NEG
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 2
68667: NEG
68668: PUSH
68669: LD_INT 1
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 2
68679: NEG
68680: PUSH
68681: LD_INT 2
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 2
68691: NEG
68692: PUSH
68693: LD_INT 3
68695: NEG
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 2
68703: PUSH
68704: LD_INT 1
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 3
68714: PUSH
68715: LD_INT 0
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 3
68724: PUSH
68725: LD_INT 1
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 3
68734: PUSH
68735: LD_INT 2
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 3
68744: PUSH
68745: LD_INT 3
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 2
68754: PUSH
68755: LD_INT 3
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 2
68764: NEG
68765: PUSH
68766: LD_INT 1
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 3
68775: NEG
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 3
68786: NEG
68787: PUSH
68788: LD_INT 1
68790: NEG
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 3
68798: NEG
68799: PUSH
68800: LD_INT 2
68802: NEG
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 3
68810: NEG
68811: PUSH
68812: LD_INT 3
68814: NEG
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68851: NOP4
68855: PUSH
68856: LD_INT 0
68858: PUSH
68859: LD_INT 0
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 0
68868: PUSH
68869: LD_INT 1
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 1
68879: PUSH
68880: LD_INT 0
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: LD_INT 1
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: LD_INT 1
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 1
68909: NEG
68910: PUSH
68911: LD_INT 0
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 1
68920: NEG
68921: PUSH
68922: LD_INT 1
68924: NEG
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 1
68932: NEG
68933: PUSH
68934: LD_INT 2
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 0
68944: PUSH
68945: LD_INT 2
68947: NEG
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 1
68955: PUSH
68956: LD_INT 1
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 2
68966: PUSH
68967: LD_INT 1
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 2
68976: PUSH
68977: LD_INT 2
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 1
68986: PUSH
68987: LD_INT 2
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 0
68996: PUSH
68997: LD_INT 2
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 1
69006: NEG
69007: PUSH
69008: LD_INT 1
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 2
69017: NEG
69018: PUSH
69019: LD_INT 1
69021: NEG
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 2
69029: NEG
69030: PUSH
69031: LD_INT 2
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 2
69041: NEG
69042: PUSH
69043: LD_INT 3
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 1
69053: NEG
69054: PUSH
69055: LD_INT 3
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: LD_INT 3
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 1
69076: PUSH
69077: LD_INT 2
69079: NEG
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 3
69087: PUSH
69088: LD_INT 2
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 3
69097: PUSH
69098: LD_INT 3
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 2
69107: PUSH
69108: LD_INT 3
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 1
69117: PUSH
69118: LD_INT 3
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 0
69127: PUSH
69128: LD_INT 3
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 1
69137: NEG
69138: PUSH
69139: LD_INT 2
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 3
69148: NEG
69149: PUSH
69150: LD_INT 2
69152: NEG
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 3
69160: NEG
69161: PUSH
69162: LD_INT 3
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69201: NOP4
69205: PUSH
69206: LD_INT 0
69208: PUSH
69209: LD_INT 0
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 0
69218: PUSH
69219: LD_INT 1
69221: NEG
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 1
69229: PUSH
69230: LD_INT 0
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 1
69239: PUSH
69240: LD_INT 1
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: LD_INT 1
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 1
69259: NEG
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 1
69270: NEG
69271: PUSH
69272: LD_INT 1
69274: NEG
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 1
69282: NEG
69283: PUSH
69284: LD_INT 2
69286: NEG
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 0
69294: PUSH
69295: LD_INT 2
69297: NEG
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 1
69305: PUSH
69306: LD_INT 1
69308: NEG
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 2
69316: PUSH
69317: LD_INT 0
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 2
69326: PUSH
69327: LD_INT 1
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 1
69336: PUSH
69337: LD_INT 2
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: LD_INT 2
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 1
69356: NEG
69357: PUSH
69358: LD_INT 1
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 2
69367: NEG
69368: PUSH
69369: LD_INT 0
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 2
69378: NEG
69379: PUSH
69380: LD_INT 1
69382: NEG
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 1
69390: NEG
69391: PUSH
69392: LD_INT 3
69394: NEG
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 0
69402: PUSH
69403: LD_INT 3
69405: NEG
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 1
69413: PUSH
69414: LD_INT 2
69416: NEG
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 2
69424: PUSH
69425: LD_INT 1
69427: NEG
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 3
69435: PUSH
69436: LD_INT 0
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 3
69445: PUSH
69446: LD_INT 1
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 1
69455: PUSH
69456: LD_INT 3
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 0
69465: PUSH
69466: LD_INT 3
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 1
69475: NEG
69476: PUSH
69477: LD_INT 2
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 2
69486: NEG
69487: PUSH
69488: LD_INT 1
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 3
69497: NEG
69498: PUSH
69499: LD_INT 0
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 3
69508: NEG
69509: PUSH
69510: LD_INT 1
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69549: NOP4
69553: PUSH
69554: LD_INT 0
69556: PUSH
69557: LD_INT 0
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 0
69566: PUSH
69567: LD_INT 1
69569: NEG
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 1
69577: PUSH
69578: LD_INT 0
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 1
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 0
69597: PUSH
69598: LD_INT 1
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 1
69607: NEG
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 1
69618: NEG
69619: PUSH
69620: LD_INT 1
69622: NEG
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 1
69630: NEG
69631: PUSH
69632: LD_INT 2
69634: NEG
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 0
69642: PUSH
69643: LD_INT 2
69645: NEG
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 1
69653: PUSH
69654: LD_INT 1
69656: NEG
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 2
69664: NEG
69665: PUSH
69666: LD_INT 1
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 2
69676: NEG
69677: PUSH
69678: LD_INT 2
69680: NEG
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69700: NOP4
69704: PUSH
69705: LD_INT 0
69707: PUSH
69708: LD_INT 0
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 0
69717: PUSH
69718: LD_INT 1
69720: NEG
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 1
69728: PUSH
69729: LD_INT 0
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 1
69738: PUSH
69739: LD_INT 1
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 0
69748: PUSH
69749: LD_INT 1
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 1
69758: NEG
69759: PUSH
69760: LD_INT 0
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 1
69769: NEG
69770: PUSH
69771: LD_INT 1
69773: NEG
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 1
69781: NEG
69782: PUSH
69783: LD_INT 2
69785: NEG
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 0
69793: PUSH
69794: LD_INT 2
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 1
69804: PUSH
69805: LD_INT 1
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 2
69815: PUSH
69816: LD_INT 0
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 2
69825: PUSH
69826: LD_INT 1
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69847: NOP4
69851: PUSH
69852: LD_INT 0
69854: PUSH
69855: LD_INT 0
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 0
69864: PUSH
69865: LD_INT 1
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 1
69875: PUSH
69876: LD_INT 0
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 1
69885: PUSH
69886: LD_INT 1
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 0
69895: PUSH
69896: LD_INT 1
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 1
69905: NEG
69906: PUSH
69907: LD_INT 0
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: LD_INT 1
69916: NEG
69917: PUSH
69918: LD_INT 1
69920: NEG
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 1
69928: PUSH
69929: LD_INT 1
69931: NEG
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 2
69939: PUSH
69940: LD_INT 0
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 2
69949: PUSH
69950: LD_INT 1
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 2
69959: PUSH
69960: LD_INT 2
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 1
69969: PUSH
69970: LD_INT 2
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69991: NOP4
69995: PUSH
69996: LD_INT 0
69998: PUSH
69999: LD_INT 0
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 0
70008: PUSH
70009: LD_INT 1
70011: NEG
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 1
70019: PUSH
70020: LD_INT 0
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 1
70029: PUSH
70030: LD_INT 1
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 0
70039: PUSH
70040: LD_INT 1
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 1
70049: NEG
70050: PUSH
70051: LD_INT 0
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 1
70060: NEG
70061: PUSH
70062: LD_INT 1
70064: NEG
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 2
70072: PUSH
70073: LD_INT 1
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 2
70082: PUSH
70083: LD_INT 2
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 1
70092: PUSH
70093: LD_INT 2
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 0
70102: PUSH
70103: LD_INT 2
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 1
70112: NEG
70113: PUSH
70114: LD_INT 1
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70135: NOP4
70139: PUSH
70140: LD_INT 0
70142: PUSH
70143: LD_INT 0
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 0
70152: PUSH
70153: LD_INT 1
70155: NEG
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 1
70163: PUSH
70164: LD_INT 0
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 1
70173: PUSH
70174: LD_INT 1
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: LD_INT 1
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 1
70193: NEG
70194: PUSH
70195: LD_INT 0
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 1
70204: NEG
70205: PUSH
70206: LD_INT 1
70208: NEG
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 1
70216: PUSH
70217: LD_INT 2
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 0
70226: PUSH
70227: LD_INT 2
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 1
70236: NEG
70237: PUSH
70238: LD_INT 1
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 2
70247: NEG
70248: PUSH
70249: LD_INT 0
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 2
70258: NEG
70259: PUSH
70260: LD_INT 1
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70282: NOP4
70286: PUSH
70287: LD_INT 0
70289: PUSH
70290: LD_INT 0
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: PUSH
70297: LD_INT 0
70299: PUSH
70300: LD_INT 1
70302: NEG
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 1
70310: PUSH
70311: LD_INT 0
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 1
70320: PUSH
70321: LD_INT 1
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: LD_INT 1
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 1
70340: NEG
70341: PUSH
70342: LD_INT 0
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 1
70351: NEG
70352: PUSH
70353: LD_INT 1
70355: NEG
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 1
70363: NEG
70364: PUSH
70365: LD_INT 2
70367: NEG
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 1
70375: NEG
70376: PUSH
70377: LD_INT 1
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 2
70386: NEG
70387: PUSH
70388: LD_INT 0
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 2
70397: NEG
70398: PUSH
70399: LD_INT 1
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 2
70409: NEG
70410: PUSH
70411: LD_INT 2
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70433: NOP4
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: LD_INT 0
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 0
70450: PUSH
70451: LD_INT 1
70453: NEG
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 1
70461: PUSH
70462: LD_INT 0
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 1
70471: PUSH
70472: LD_INT 1
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 0
70481: PUSH
70482: LD_INT 1
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 1
70491: NEG
70492: PUSH
70493: LD_INT 0
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 1
70502: NEG
70503: PUSH
70504: LD_INT 1
70506: NEG
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 1
70514: NEG
70515: PUSH
70516: LD_INT 2
70518: NEG
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 0
70526: PUSH
70527: LD_INT 2
70529: NEG
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 1
70537: PUSH
70538: LD_INT 1
70540: NEG
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 2
70548: PUSH
70549: LD_INT 0
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 2
70558: PUSH
70559: LD_INT 1
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 2
70568: PUSH
70569: LD_INT 2
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 1
70578: PUSH
70579: LD_INT 2
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 0
70588: PUSH
70589: LD_INT 2
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 1
70598: NEG
70599: PUSH
70600: LD_INT 1
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 2
70609: NEG
70610: PUSH
70611: LD_INT 0
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 2
70620: NEG
70621: PUSH
70622: LD_INT 1
70624: NEG
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 2
70632: NEG
70633: PUSH
70634: LD_INT 2
70636: NEG
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70663: NOP4
70667: PUSH
70668: LD_INT 0
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 0
70680: PUSH
70681: LD_INT 1
70683: NEG
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 1
70691: PUSH
70692: LD_INT 0
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 1
70701: PUSH
70702: LD_INT 1
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 0
70711: PUSH
70712: LD_INT 1
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 1
70721: NEG
70722: PUSH
70723: LD_INT 0
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 1
70732: NEG
70733: PUSH
70734: LD_INT 1
70736: NEG
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 1
70744: NEG
70745: PUSH
70746: LD_INT 2
70748: NEG
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 0
70756: PUSH
70757: LD_INT 2
70759: NEG
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 1
70767: PUSH
70768: LD_INT 1
70770: NEG
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 2
70778: PUSH
70779: LD_INT 0
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 2
70788: PUSH
70789: LD_INT 1
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 2
70798: PUSH
70799: LD_INT 2
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 1
70808: PUSH
70809: LD_INT 2
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: PUSH
70816: LD_INT 0
70818: PUSH
70819: LD_INT 2
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 1
70828: NEG
70829: PUSH
70830: LD_INT 1
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 2
70839: NEG
70840: PUSH
70841: LD_INT 0
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 2
70850: NEG
70851: PUSH
70852: LD_INT 1
70854: NEG
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 2
70862: NEG
70863: PUSH
70864: LD_INT 2
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70893: NOP4
70897: PUSH
70898: LD_INT 0
70900: PUSH
70901: LD_INT 0
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 0
70910: PUSH
70911: LD_INT 1
70913: NEG
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 1
70921: PUSH
70922: LD_INT 0
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 1
70931: PUSH
70932: LD_INT 1
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 0
70941: PUSH
70942: LD_INT 1
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PUSH
70949: LD_INT 1
70951: NEG
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 1
70962: NEG
70963: PUSH
70964: LD_INT 1
70966: NEG
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 1
70974: NEG
70975: PUSH
70976: LD_INT 2
70978: NEG
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 0
70986: PUSH
70987: LD_INT 2
70989: NEG
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 1
70997: PUSH
70998: LD_INT 1
71000: NEG
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 2
71008: PUSH
71009: LD_INT 0
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_INT 2
71018: PUSH
71019: LD_INT 1
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 2
71028: PUSH
71029: LD_INT 2
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 1
71038: PUSH
71039: LD_INT 2
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 0
71048: PUSH
71049: LD_INT 2
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 1
71058: NEG
71059: PUSH
71060: LD_INT 1
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 2
71069: NEG
71070: PUSH
71071: LD_INT 0
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 2
71080: NEG
71081: PUSH
71082: LD_INT 1
71084: NEG
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 2
71092: NEG
71093: PUSH
71094: LD_INT 2
71096: NEG
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71123: NOP4
71127: PUSH
71128: LD_INT 0
71130: PUSH
71131: LD_INT 0
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 0
71140: PUSH
71141: LD_INT 1
71143: NEG
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 1
71151: PUSH
71152: LD_INT 0
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 1
71161: PUSH
71162: LD_INT 1
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 0
71171: PUSH
71172: LD_INT 1
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PUSH
71179: LD_INT 1
71181: NEG
71182: PUSH
71183: LD_INT 0
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 1
71192: NEG
71193: PUSH
71194: LD_INT 1
71196: NEG
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 1
71204: NEG
71205: PUSH
71206: LD_INT 2
71208: NEG
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 0
71216: PUSH
71217: LD_INT 2
71219: NEG
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 1
71227: PUSH
71228: LD_INT 1
71230: NEG
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 2
71238: PUSH
71239: LD_INT 0
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 2
71248: PUSH
71249: LD_INT 1
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 2
71258: PUSH
71259: LD_INT 2
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 1
71268: PUSH
71269: LD_INT 2
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 0
71278: PUSH
71279: LD_INT 2
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 1
71288: NEG
71289: PUSH
71290: LD_INT 1
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 2
71299: NEG
71300: PUSH
71301: LD_INT 0
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 2
71310: NEG
71311: PUSH
71312: LD_INT 1
71314: NEG
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 2
71322: NEG
71323: PUSH
71324: LD_INT 2
71326: NEG
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71353: NOP4
71357: PUSH
71358: LD_INT 0
71360: PUSH
71361: LD_INT 0
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 0
71370: PUSH
71371: LD_INT 1
71373: NEG
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 1
71381: PUSH
71382: LD_INT 0
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 1
71391: PUSH
71392: LD_INT 1
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 0
71401: PUSH
71402: LD_INT 1
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 1
71411: NEG
71412: PUSH
71413: LD_INT 0
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 1
71422: NEG
71423: PUSH
71424: LD_INT 1
71426: NEG
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 1
71434: NEG
71435: PUSH
71436: LD_INT 2
71438: NEG
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 0
71446: PUSH
71447: LD_INT 2
71449: NEG
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 1
71457: PUSH
71458: LD_INT 1
71460: NEG
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 2
71468: PUSH
71469: LD_INT 0
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 2
71478: PUSH
71479: LD_INT 1
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 2
71488: PUSH
71489: LD_INT 2
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 1
71498: PUSH
71499: LD_INT 2
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 0
71508: PUSH
71509: LD_INT 2
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 1
71518: NEG
71519: PUSH
71520: LD_INT 1
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 2
71529: NEG
71530: PUSH
71531: LD_INT 0
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 2
71540: NEG
71541: PUSH
71542: LD_INT 1
71544: NEG
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PUSH
71550: LD_INT 2
71552: NEG
71553: PUSH
71554: LD_INT 2
71556: NEG
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71583: NOP4
71587: PUSH
71588: LD_INT 0
71590: PUSH
71591: LD_INT 0
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 0
71600: PUSH
71601: LD_INT 1
71603: NEG
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 1
71611: PUSH
71612: LD_INT 0
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 1
71621: PUSH
71622: LD_INT 1
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 0
71631: PUSH
71632: LD_INT 1
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 1
71641: NEG
71642: PUSH
71643: LD_INT 0
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 1
71652: NEG
71653: PUSH
71654: LD_INT 1
71656: NEG
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: PUSH
71662: LD_INT 1
71664: NEG
71665: PUSH
71666: LD_INT 2
71668: NEG
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 0
71676: PUSH
71677: LD_INT 2
71679: NEG
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 1
71687: PUSH
71688: LD_INT 1
71690: NEG
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 2
71698: PUSH
71699: LD_INT 0
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 2
71708: PUSH
71709: LD_INT 1
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 2
71718: PUSH
71719: LD_INT 2
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: LD_INT 1
71728: PUSH
71729: LD_INT 2
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: PUSH
71736: LD_INT 0
71738: PUSH
71739: LD_INT 2
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 1
71748: NEG
71749: PUSH
71750: LD_INT 1
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 2
71759: NEG
71760: PUSH
71761: LD_INT 0
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 2
71770: NEG
71771: PUSH
71772: LD_INT 1
71774: NEG
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 2
71782: NEG
71783: PUSH
71784: LD_INT 2
71786: NEG
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71813: NOP4
71817: PUSH
71818: LD_INT 0
71820: PUSH
71821: LD_INT 0
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PUSH
71828: LD_INT 0
71830: PUSH
71831: LD_INT 1
71833: NEG
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 1
71841: PUSH
71842: LD_INT 0
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 1
71851: PUSH
71852: LD_INT 1
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 0
71861: PUSH
71862: LD_INT 1
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 1
71871: NEG
71872: PUSH
71873: LD_INT 0
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 1
71882: NEG
71883: PUSH
71884: LD_INT 1
71886: NEG
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71901: NOP4
71905: PUSH
71906: LD_INT 0
71908: PUSH
71909: LD_INT 0
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 0
71918: PUSH
71919: LD_INT 1
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 1
71929: PUSH
71930: LD_INT 0
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 1
71939: PUSH
71940: LD_INT 1
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 0
71949: PUSH
71950: LD_INT 1
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 1
71959: NEG
71960: PUSH
71961: LD_INT 0
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 1
71970: NEG
71971: PUSH
71972: LD_INT 1
71974: NEG
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71989: NOP4
71993: PUSH
71994: LD_INT 0
71996: PUSH
71997: LD_INT 0
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_INT 0
72006: PUSH
72007: LD_INT 1
72009: NEG
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 1
72017: PUSH
72018: LD_INT 0
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 1
72027: PUSH
72028: LD_INT 1
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 0
72037: PUSH
72038: LD_INT 1
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 1
72047: NEG
72048: PUSH
72049: LD_INT 0
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: LD_INT 1
72058: NEG
72059: PUSH
72060: LD_INT 1
72062: NEG
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72077: NOP4
72081: PUSH
72082: LD_INT 0
72084: PUSH
72085: LD_INT 0
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: LD_INT 0
72094: PUSH
72095: LD_INT 1
72097: NEG
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: LD_INT 1
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 1
72115: PUSH
72116: LD_INT 1
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 0
72125: PUSH
72126: LD_INT 1
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: PUSH
72133: LD_INT 1
72135: NEG
72136: PUSH
72137: LD_INT 0
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: LD_INT 1
72146: NEG
72147: PUSH
72148: LD_INT 1
72150: NEG
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72165: NOP4
72169: PUSH
72170: LD_INT 0
72172: PUSH
72173: LD_INT 0
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 0
72182: PUSH
72183: LD_INT 1
72185: NEG
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: LD_INT 1
72193: PUSH
72194: LD_INT 0
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: PUSH
72201: LD_INT 1
72203: PUSH
72204: LD_INT 1
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 0
72213: PUSH
72214: LD_INT 1
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 1
72223: NEG
72224: PUSH
72225: LD_INT 0
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 1
72234: NEG
72235: PUSH
72236: LD_INT 1
72238: NEG
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72253: NOP4
72257: PUSH
72258: LD_INT 0
72260: PUSH
72261: LD_INT 0
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_INT 0
72270: PUSH
72271: LD_INT 1
72273: NEG
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 1
72281: PUSH
72282: LD_INT 0
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 1
72291: PUSH
72292: LD_INT 1
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 0
72301: PUSH
72302: LD_INT 1
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 1
72311: NEG
72312: PUSH
72313: LD_INT 0
72315: PUSH
72316: EMPTY
72317: LIST
72318: LIST
72319: PUSH
72320: LD_INT 1
72322: NEG
72323: PUSH
72324: LD_INT 1
72326: NEG
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: ST_TO_ADDR
// end ; 1 :
72341: GO 78238
72343: LD_INT 1
72345: DOUBLE
72346: EQUAL
72347: IFTRUE 72351
72349: GO 74974
72351: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72352: NOP4
72356: PUSH
72357: LD_INT 1
72359: NEG
72360: PUSH
72361: LD_INT 3
72363: NEG
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: PUSH
72369: LD_INT 0
72371: PUSH
72372: LD_INT 3
72374: NEG
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 1
72382: PUSH
72383: LD_INT 2
72385: NEG
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: LIST
72395: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72396: NOP4
72400: PUSH
72401: LD_INT 2
72403: PUSH
72404: LD_INT 1
72406: NEG
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 3
72414: PUSH
72415: LD_INT 0
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 3
72424: PUSH
72425: LD_INT 1
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: LIST
72436: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72437: NOP4
72441: PUSH
72442: LD_INT 3
72444: PUSH
72445: LD_INT 2
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 3
72454: PUSH
72455: LD_INT 3
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 2
72464: PUSH
72465: LD_INT 3
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: LIST
72476: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72477: NOP4
72481: PUSH
72482: LD_INT 1
72484: PUSH
72485: LD_INT 3
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: PUSH
72492: LD_INT 0
72494: PUSH
72495: LD_INT 3
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 1
72504: NEG
72505: PUSH
72506: LD_INT 2
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: LIST
72517: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72518: NOP4
72522: PUSH
72523: LD_INT 2
72525: NEG
72526: PUSH
72527: LD_INT 1
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 3
72536: NEG
72537: PUSH
72538: LD_INT 0
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: LD_INT 3
72547: NEG
72548: PUSH
72549: LD_INT 1
72551: NEG
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: LIST
72561: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72562: NOP4
72566: PUSH
72567: LD_INT 2
72569: NEG
72570: PUSH
72571: LD_INT 3
72573: NEG
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 3
72581: NEG
72582: PUSH
72583: LD_INT 2
72585: NEG
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 3
72593: NEG
72594: PUSH
72595: LD_INT 3
72597: NEG
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: LIST
72607: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72608: NOP4
72612: PUSH
72613: LD_INT 1
72615: NEG
72616: PUSH
72617: LD_INT 3
72619: NEG
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 0
72627: PUSH
72628: LD_INT 3
72630: NEG
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PUSH
72636: LD_INT 1
72638: PUSH
72639: LD_INT 2
72641: NEG
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: LIST
72651: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72652: NOP4
72656: PUSH
72657: LD_INT 2
72659: PUSH
72660: LD_INT 1
72662: NEG
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_INT 3
72670: PUSH
72671: LD_INT 0
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 3
72680: PUSH
72681: LD_INT 1
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: EMPTY
72689: LIST
72690: LIST
72691: LIST
72692: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72693: NOP4
72697: PUSH
72698: LD_INT 3
72700: PUSH
72701: LD_INT 2
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 3
72710: PUSH
72711: LD_INT 3
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 2
72720: PUSH
72721: LD_INT 3
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: LIST
72732: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72733: NOP4
72737: PUSH
72738: LD_INT 1
72740: PUSH
72741: LD_INT 3
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 0
72750: PUSH
72751: LD_INT 3
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 1
72760: NEG
72761: PUSH
72762: LD_INT 2
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: LIST
72773: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72774: NOP4
72778: PUSH
72779: LD_INT 2
72781: NEG
72782: PUSH
72783: LD_INT 1
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 3
72792: NEG
72793: PUSH
72794: LD_INT 0
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_INT 3
72803: NEG
72804: PUSH
72805: LD_INT 1
72807: NEG
72808: PUSH
72809: EMPTY
72810: LIST
72811: LIST
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: LIST
72817: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72818: NOP4
72822: PUSH
72823: LD_INT 2
72825: NEG
72826: PUSH
72827: LD_INT 3
72829: NEG
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 3
72837: NEG
72838: PUSH
72839: LD_INT 2
72841: NEG
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 3
72849: NEG
72850: PUSH
72851: LD_INT 3
72853: NEG
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: LIST
72863: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
72864: NOP4
72868: PUSH
72869: LD_INT 0
72871: PUSH
72872: LD_INT 3
72874: NEG
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: PUSH
72880: LD_INT 1
72882: NEG
72883: PUSH
72884: LD_INT 4
72886: NEG
72887: PUSH
72888: EMPTY
72889: LIST
72890: LIST
72891: PUSH
72892: LD_INT 1
72894: PUSH
72895: LD_INT 3
72897: NEG
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: LIST
72907: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
72908: NOP4
72912: PUSH
72913: LD_INT 3
72915: PUSH
72916: LD_INT 0
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: PUSH
72923: LD_INT 3
72925: PUSH
72926: LD_INT 1
72928: NEG
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: LD_INT 4
72936: PUSH
72937: LD_INT 1
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: LIST
72948: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
72949: NOP4
72953: PUSH
72954: LD_INT 3
72956: PUSH
72957: LD_INT 3
72959: PUSH
72960: EMPTY
72961: LIST
72962: LIST
72963: PUSH
72964: LD_INT 4
72966: PUSH
72967: LD_INT 3
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: PUSH
72974: LD_INT 3
72976: PUSH
72977: LD_INT 4
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: LIST
72988: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
72989: NOP4
72993: PUSH
72994: LD_INT 0
72996: PUSH
72997: LD_INT 3
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 1
73006: PUSH
73007: LD_INT 4
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PUSH
73014: LD_INT 1
73016: NEG
73017: PUSH
73018: LD_INT 3
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: LIST
73029: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
73030: NOP4
73034: PUSH
73035: LD_INT 3
73037: NEG
73038: PUSH
73039: LD_INT 0
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 3
73048: NEG
73049: PUSH
73050: LD_INT 1
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: LD_INT 4
73059: NEG
73060: PUSH
73061: LD_INT 1
73063: NEG
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: LIST
73073: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
73074: NOP4
73078: PUSH
73079: LD_INT 3
73081: NEG
73082: PUSH
73083: LD_INT 3
73085: NEG
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: LD_INT 3
73093: NEG
73094: PUSH
73095: LD_INT 4
73097: NEG
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: PUSH
73103: LD_INT 4
73105: NEG
73106: PUSH
73107: LD_INT 3
73109: NEG
73110: PUSH
73111: EMPTY
73112: LIST
73113: LIST
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: LIST
73119: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
73120: NOP4
73124: PUSH
73125: LD_INT 1
73127: NEG
73128: PUSH
73129: LD_INT 3
73131: NEG
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: PUSH
73137: LD_INT 0
73139: PUSH
73140: LD_INT 3
73142: NEG
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 1
73150: PUSH
73151: LD_INT 2
73153: NEG
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: PUSH
73159: LD_INT 1
73161: NEG
73162: PUSH
73163: LD_INT 4
73165: NEG
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: LD_INT 0
73173: PUSH
73174: LD_INT 4
73176: NEG
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: LD_INT 1
73184: PUSH
73185: LD_INT 3
73187: NEG
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: LD_INT 1
73195: NEG
73196: PUSH
73197: LD_INT 5
73199: NEG
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: PUSH
73205: LD_INT 0
73207: PUSH
73208: LD_INT 5
73210: NEG
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: PUSH
73216: LD_INT 1
73218: PUSH
73219: LD_INT 4
73221: NEG
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: LD_INT 1
73229: NEG
73230: PUSH
73231: LD_INT 6
73233: NEG
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PUSH
73239: LD_INT 0
73241: PUSH
73242: LD_INT 6
73244: NEG
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: PUSH
73250: LD_INT 1
73252: PUSH
73253: LD_INT 5
73255: NEG
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
73275: NOP4
73279: PUSH
73280: LD_INT 2
73282: PUSH
73283: LD_INT 1
73285: NEG
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 3
73293: PUSH
73294: LD_INT 0
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 3
73303: PUSH
73304: LD_INT 1
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: PUSH
73311: LD_INT 3
73313: PUSH
73314: LD_INT 1
73316: NEG
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: PUSH
73322: LD_INT 4
73324: PUSH
73325: LD_INT 0
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: LD_INT 4
73334: PUSH
73335: LD_INT 1
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: PUSH
73342: LD_INT 4
73344: PUSH
73345: LD_INT 1
73347: NEG
73348: PUSH
73349: EMPTY
73350: LIST
73351: LIST
73352: PUSH
73353: LD_INT 5
73355: PUSH
73356: LD_INT 0
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: PUSH
73363: LD_INT 5
73365: PUSH
73366: LD_INT 1
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: PUSH
73373: LD_INT 5
73375: PUSH
73376: LD_INT 1
73378: NEG
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PUSH
73384: LD_INT 6
73386: PUSH
73387: LD_INT 0
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PUSH
73394: LD_INT 6
73396: PUSH
73397: LD_INT 1
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
73418: NOP4
73422: PUSH
73423: LD_INT 3
73425: PUSH
73426: LD_INT 2
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PUSH
73433: LD_INT 3
73435: PUSH
73436: LD_INT 3
73438: PUSH
73439: EMPTY
73440: LIST
73441: LIST
73442: PUSH
73443: LD_INT 2
73445: PUSH
73446: LD_INT 3
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PUSH
73453: LD_INT 4
73455: PUSH
73456: LD_INT 3
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PUSH
73463: LD_INT 4
73465: PUSH
73466: LD_INT 4
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 3
73475: PUSH
73476: LD_INT 4
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 5
73485: PUSH
73486: LD_INT 4
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 5
73495: PUSH
73496: LD_INT 5
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: LD_INT 4
73505: PUSH
73506: LD_INT 5
73508: PUSH
73509: EMPTY
73510: LIST
73511: LIST
73512: PUSH
73513: LD_INT 6
73515: PUSH
73516: LD_INT 5
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PUSH
73523: LD_INT 6
73525: PUSH
73526: LD_INT 6
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: PUSH
73533: LD_INT 5
73535: PUSH
73536: LD_INT 6
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
73557: NOP4
73561: PUSH
73562: LD_INT 1
73564: PUSH
73565: LD_INT 3
73567: PUSH
73568: EMPTY
73569: LIST
73570: LIST
73571: PUSH
73572: LD_INT 0
73574: PUSH
73575: LD_INT 3
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: PUSH
73582: LD_INT 1
73584: NEG
73585: PUSH
73586: LD_INT 2
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: PUSH
73593: LD_INT 1
73595: PUSH
73596: LD_INT 4
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: PUSH
73603: LD_INT 0
73605: PUSH
73606: LD_INT 4
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: PUSH
73613: LD_INT 1
73615: NEG
73616: PUSH
73617: LD_INT 3
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: PUSH
73624: LD_INT 1
73626: PUSH
73627: LD_INT 5
73629: PUSH
73630: EMPTY
73631: LIST
73632: LIST
73633: PUSH
73634: LD_INT 0
73636: PUSH
73637: LD_INT 5
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 1
73646: NEG
73647: PUSH
73648: LD_INT 4
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 1
73657: PUSH
73658: LD_INT 6
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 0
73667: PUSH
73668: LD_INT 6
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: PUSH
73675: LD_INT 1
73677: NEG
73678: PUSH
73679: LD_INT 5
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
73700: NOP4
73704: PUSH
73705: LD_INT 2
73707: NEG
73708: PUSH
73709: LD_INT 1
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 3
73718: NEG
73719: PUSH
73720: LD_INT 0
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 3
73729: NEG
73730: PUSH
73731: LD_INT 1
73733: NEG
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: PUSH
73739: LD_INT 3
73741: NEG
73742: PUSH
73743: LD_INT 1
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: LD_INT 4
73752: NEG
73753: PUSH
73754: LD_INT 0
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 4
73763: NEG
73764: PUSH
73765: LD_INT 1
73767: NEG
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 4
73775: NEG
73776: PUSH
73777: LD_INT 1
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 5
73786: NEG
73787: PUSH
73788: LD_INT 0
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: LD_INT 5
73797: NEG
73798: PUSH
73799: LD_INT 1
73801: NEG
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: LD_INT 5
73809: NEG
73810: PUSH
73811: LD_INT 1
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: PUSH
73818: LD_INT 6
73820: NEG
73821: PUSH
73822: LD_INT 0
73824: PUSH
73825: EMPTY
73826: LIST
73827: LIST
73828: PUSH
73829: LD_INT 6
73831: NEG
73832: PUSH
73833: LD_INT 1
73835: NEG
73836: PUSH
73837: EMPTY
73838: LIST
73839: LIST
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
73855: NOP4
73859: PUSH
73860: LD_INT 2
73862: NEG
73863: PUSH
73864: LD_INT 3
73866: NEG
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: LD_INT 3
73874: NEG
73875: PUSH
73876: LD_INT 2
73878: NEG
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PUSH
73884: LD_INT 3
73886: NEG
73887: PUSH
73888: LD_INT 3
73890: NEG
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PUSH
73896: LD_INT 3
73898: NEG
73899: PUSH
73900: LD_INT 4
73902: NEG
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PUSH
73908: LD_INT 4
73910: NEG
73911: PUSH
73912: LD_INT 3
73914: NEG
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PUSH
73920: LD_INT 4
73922: NEG
73923: PUSH
73924: LD_INT 4
73926: NEG
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PUSH
73932: LD_INT 4
73934: NEG
73935: PUSH
73936: LD_INT 5
73938: NEG
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PUSH
73944: LD_INT 5
73946: NEG
73947: PUSH
73948: LD_INT 4
73950: NEG
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 5
73958: NEG
73959: PUSH
73960: LD_INT 5
73962: NEG
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 5
73970: NEG
73971: PUSH
73972: LD_INT 6
73974: NEG
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: PUSH
73980: LD_INT 6
73982: NEG
73983: PUSH
73984: LD_INT 5
73986: NEG
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: LD_INT 6
73994: NEG
73995: PUSH
73996: LD_INT 6
73998: NEG
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
74018: NOP4
74022: PUSH
74023: LD_INT 0
74025: PUSH
74026: LD_INT 2
74028: NEG
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PUSH
74034: LD_INT 1
74036: NEG
74037: PUSH
74038: LD_INT 3
74040: NEG
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: PUSH
74046: LD_INT 1
74048: PUSH
74049: LD_INT 2
74051: NEG
74052: PUSH
74053: EMPTY
74054: LIST
74055: LIST
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: LIST
74061: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
74062: NOP4
74066: PUSH
74067: LD_INT 2
74069: PUSH
74070: LD_INT 0
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 2
74079: PUSH
74080: LD_INT 1
74082: NEG
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: PUSH
74088: LD_INT 3
74090: PUSH
74091: LD_INT 1
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: PUSH
74098: EMPTY
74099: LIST
74100: LIST
74101: LIST
74102: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
74103: NOP4
74107: PUSH
74108: LD_INT 2
74110: PUSH
74111: LD_INT 2
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 3
74120: PUSH
74121: LD_INT 2
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 2
74130: PUSH
74131: LD_INT 3
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: EMPTY
74139: LIST
74140: LIST
74141: LIST
74142: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
74143: NOP4
74147: PUSH
74148: LD_INT 0
74150: PUSH
74151: LD_INT 2
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: LD_INT 1
74160: PUSH
74161: LD_INT 3
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: PUSH
74168: LD_INT 1
74170: NEG
74171: PUSH
74172: LD_INT 2
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: LIST
74183: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74184: NOP4
74188: PUSH
74189: LD_INT 2
74191: NEG
74192: PUSH
74193: LD_INT 0
74195: PUSH
74196: EMPTY
74197: LIST
74198: LIST
74199: PUSH
74200: LD_INT 2
74202: NEG
74203: PUSH
74204: LD_INT 1
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: PUSH
74211: LD_INT 3
74213: NEG
74214: PUSH
74215: LD_INT 1
74217: NEG
74218: PUSH
74219: EMPTY
74220: LIST
74221: LIST
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: LIST
74227: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
74228: NOP4
74232: PUSH
74233: LD_INT 2
74235: NEG
74236: PUSH
74237: LD_INT 2
74239: NEG
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: PUSH
74245: LD_INT 2
74247: NEG
74248: PUSH
74249: LD_INT 3
74251: NEG
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: PUSH
74257: LD_INT 3
74259: NEG
74260: PUSH
74261: LD_INT 2
74263: NEG
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: LIST
74273: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
74274: NOP4
74278: PUSH
74279: LD_INT 2
74281: NEG
74282: PUSH
74283: LD_INT 3
74285: NEG
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PUSH
74291: LD_INT 1
74293: NEG
74294: PUSH
74295: LD_INT 3
74297: NEG
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
74307: NOP4
74311: PUSH
74312: LD_INT 1
74314: PUSH
74315: LD_INT 2
74317: NEG
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: PUSH
74323: LD_INT 2
74325: PUSH
74326: LD_INT 1
74328: NEG
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
74338: NOP4
74342: PUSH
74343: LD_INT 3
74345: PUSH
74346: LD_INT 1
74348: PUSH
74349: EMPTY
74350: LIST
74351: LIST
74352: PUSH
74353: LD_INT 3
74355: PUSH
74356: LD_INT 2
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
74367: NOP4
74371: PUSH
74372: LD_INT 2
74374: PUSH
74375: LD_INT 3
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: PUSH
74382: LD_INT 1
74384: PUSH
74385: LD_INT 3
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
74396: NOP4
74400: PUSH
74401: LD_INT 1
74403: NEG
74404: PUSH
74405: LD_INT 2
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: PUSH
74412: LD_INT 2
74414: NEG
74415: PUSH
74416: LD_INT 1
74418: PUSH
74419: EMPTY
74420: LIST
74421: LIST
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74427: NOP4
74431: PUSH
74432: LD_INT 3
74434: NEG
74435: PUSH
74436: LD_INT 1
74438: NEG
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: LD_INT 3
74446: NEG
74447: PUSH
74448: LD_INT 2
74450: NEG
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74460: NOP4
74464: PUSH
74465: LD_INT 1
74467: NEG
74468: PUSH
74469: LD_INT 3
74471: NEG
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: PUSH
74477: LD_INT 0
74479: PUSH
74480: LD_INT 3
74482: NEG
74483: PUSH
74484: EMPTY
74485: LIST
74486: LIST
74487: PUSH
74488: LD_INT 1
74490: PUSH
74491: LD_INT 2
74493: NEG
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: LIST
74503: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74504: NOP4
74508: PUSH
74509: LD_INT 2
74511: PUSH
74512: LD_INT 1
74514: NEG
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: PUSH
74520: LD_INT 3
74522: PUSH
74523: LD_INT 0
74525: PUSH
74526: EMPTY
74527: LIST
74528: LIST
74529: PUSH
74530: LD_INT 3
74532: PUSH
74533: LD_INT 1
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PUSH
74540: EMPTY
74541: LIST
74542: LIST
74543: LIST
74544: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74545: NOP4
74549: PUSH
74550: LD_INT 3
74552: PUSH
74553: LD_INT 2
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: PUSH
74560: LD_INT 3
74562: PUSH
74563: LD_INT 3
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: PUSH
74570: LD_INT 2
74572: PUSH
74573: LD_INT 3
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: PUSH
74580: EMPTY
74581: LIST
74582: LIST
74583: LIST
74584: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74585: NOP4
74589: PUSH
74590: LD_INT 1
74592: PUSH
74593: LD_INT 3
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: PUSH
74600: LD_INT 0
74602: PUSH
74603: LD_INT 3
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PUSH
74610: LD_INT 1
74612: NEG
74613: PUSH
74614: LD_INT 2
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: LIST
74625: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74626: NOP4
74630: PUSH
74631: LD_INT 2
74633: NEG
74634: PUSH
74635: LD_INT 1
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: PUSH
74642: LD_INT 3
74644: NEG
74645: PUSH
74646: LD_INT 0
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: PUSH
74653: LD_INT 3
74655: NEG
74656: PUSH
74657: LD_INT 1
74659: NEG
74660: PUSH
74661: EMPTY
74662: LIST
74663: LIST
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: LIST
74669: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74670: NOP4
74674: PUSH
74675: LD_INT 2
74677: NEG
74678: PUSH
74679: LD_INT 3
74681: NEG
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: PUSH
74687: LD_INT 3
74689: NEG
74690: PUSH
74691: LD_INT 2
74693: NEG
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: PUSH
74699: LD_INT 3
74701: NEG
74702: PUSH
74703: LD_INT 3
74705: NEG
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: LIST
74715: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
74716: NOP4
74720: PUSH
74721: LD_INT 1
74723: NEG
74724: PUSH
74725: LD_INT 2
74727: NEG
74728: PUSH
74729: EMPTY
74730: LIST
74731: LIST
74732: PUSH
74733: LD_INT 0
74735: PUSH
74736: LD_INT 2
74738: NEG
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: PUSH
74744: LD_INT 1
74746: PUSH
74747: LD_INT 1
74749: NEG
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: LIST
74759: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
74760: NOP4
74764: PUSH
74765: LD_INT 1
74767: PUSH
74768: LD_INT 1
74770: NEG
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: PUSH
74776: LD_INT 2
74778: PUSH
74779: LD_INT 0
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: PUSH
74786: LD_INT 2
74788: PUSH
74789: LD_INT 1
74791: PUSH
74792: EMPTY
74793: LIST
74794: LIST
74795: PUSH
74796: EMPTY
74797: LIST
74798: LIST
74799: LIST
74800: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
74801: NOP4
74805: PUSH
74806: LD_INT 2
74808: PUSH
74809: LD_INT 1
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: PUSH
74816: LD_INT 2
74818: PUSH
74819: LD_INT 2
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: PUSH
74826: LD_INT 1
74828: PUSH
74829: LD_INT 2
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: PUSH
74836: EMPTY
74837: LIST
74838: LIST
74839: LIST
74840: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
74841: NOP4
74845: PUSH
74846: LD_INT 1
74848: PUSH
74849: LD_INT 2
74851: PUSH
74852: EMPTY
74853: LIST
74854: LIST
74855: PUSH
74856: LD_INT 0
74858: PUSH
74859: LD_INT 2
74861: PUSH
74862: EMPTY
74863: LIST
74864: LIST
74865: PUSH
74866: LD_INT 1
74868: NEG
74869: PUSH
74870: LD_INT 1
74872: PUSH
74873: EMPTY
74874: LIST
74875: LIST
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: LIST
74881: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
74882: NOP4
74886: PUSH
74887: LD_INT 1
74889: NEG
74890: PUSH
74891: LD_INT 1
74893: PUSH
74894: EMPTY
74895: LIST
74896: LIST
74897: PUSH
74898: LD_INT 2
74900: NEG
74901: PUSH
74902: LD_INT 0
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: PUSH
74909: LD_INT 2
74911: NEG
74912: PUSH
74913: LD_INT 1
74915: NEG
74916: PUSH
74917: EMPTY
74918: LIST
74919: LIST
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: LIST
74925: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74926: NOP4
74930: PUSH
74931: LD_INT 1
74933: NEG
74934: PUSH
74935: LD_INT 2
74937: NEG
74938: PUSH
74939: EMPTY
74940: LIST
74941: LIST
74942: PUSH
74943: LD_INT 2
74945: NEG
74946: PUSH
74947: LD_INT 1
74949: NEG
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: PUSH
74955: LD_INT 2
74957: NEG
74958: PUSH
74959: LD_INT 2
74961: NEG
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: LIST
74971: ST_TO_ADDR
// end ; 2 :
74972: GO 78238
74974: LD_INT 2
74976: DOUBLE
74977: EQUAL
74978: IFTRUE 74982
74980: GO 78237
74982: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
74983: NOP4
74987: PUSH
74988: LD_INT 4
74990: PUSH
74991: LD_INT 0
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: PUSH
74998: LD_INT 4
75000: PUSH
75001: LD_INT 1
75003: NEG
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: PUSH
75009: LD_INT 5
75011: PUSH
75012: LD_INT 0
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: PUSH
75019: LD_INT 5
75021: PUSH
75022: LD_INT 1
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: PUSH
75029: LD_INT 4
75031: PUSH
75032: LD_INT 1
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: PUSH
75039: LD_INT 3
75041: PUSH
75042: LD_INT 0
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: PUSH
75049: LD_INT 3
75051: PUSH
75052: LD_INT 1
75054: NEG
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: PUSH
75060: LD_INT 3
75062: PUSH
75063: LD_INT 2
75065: NEG
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: PUSH
75071: LD_INT 5
75073: PUSH
75074: LD_INT 2
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 3
75083: PUSH
75084: LD_INT 3
75086: PUSH
75087: EMPTY
75088: LIST
75089: LIST
75090: PUSH
75091: LD_INT 3
75093: PUSH
75094: LD_INT 2
75096: PUSH
75097: EMPTY
75098: LIST
75099: LIST
75100: PUSH
75101: LD_INT 4
75103: PUSH
75104: LD_INT 3
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: PUSH
75111: LD_INT 4
75113: PUSH
75114: LD_INT 4
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: PUSH
75121: LD_INT 3
75123: PUSH
75124: LD_INT 4
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: LD_INT 2
75133: PUSH
75134: LD_INT 3
75136: PUSH
75137: EMPTY
75138: LIST
75139: LIST
75140: PUSH
75141: LD_INT 2
75143: PUSH
75144: LD_INT 2
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: PUSH
75151: LD_INT 4
75153: PUSH
75154: LD_INT 2
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: PUSH
75161: LD_INT 2
75163: PUSH
75164: LD_INT 4
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: LD_INT 0
75173: PUSH
75174: LD_INT 4
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: LD_INT 0
75183: PUSH
75184: LD_INT 3
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PUSH
75191: LD_INT 1
75193: PUSH
75194: LD_INT 4
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 1
75203: PUSH
75204: LD_INT 5
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 0
75213: PUSH
75214: LD_INT 5
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: PUSH
75221: LD_INT 1
75223: NEG
75224: PUSH
75225: LD_INT 4
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: PUSH
75232: LD_INT 1
75234: NEG
75235: PUSH
75236: LD_INT 3
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: LD_INT 2
75245: PUSH
75246: LD_INT 5
75248: PUSH
75249: EMPTY
75250: LIST
75251: LIST
75252: PUSH
75253: LD_INT 2
75255: NEG
75256: PUSH
75257: LD_INT 3
75259: PUSH
75260: EMPTY
75261: LIST
75262: LIST
75263: PUSH
75264: LD_INT 3
75266: NEG
75267: PUSH
75268: LD_INT 0
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: PUSH
75275: LD_INT 3
75277: NEG
75278: PUSH
75279: LD_INT 1
75281: NEG
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: PUSH
75287: LD_INT 2
75289: NEG
75290: PUSH
75291: LD_INT 0
75293: PUSH
75294: EMPTY
75295: LIST
75296: LIST
75297: PUSH
75298: LD_INT 2
75300: NEG
75301: PUSH
75302: LD_INT 1
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: PUSH
75309: LD_INT 3
75311: NEG
75312: PUSH
75313: LD_INT 1
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: PUSH
75320: LD_INT 4
75322: NEG
75323: PUSH
75324: LD_INT 0
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PUSH
75331: LD_INT 4
75333: NEG
75334: PUSH
75335: LD_INT 1
75337: NEG
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: PUSH
75343: LD_INT 4
75345: NEG
75346: PUSH
75347: LD_INT 2
75349: NEG
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: PUSH
75355: LD_INT 2
75357: NEG
75358: PUSH
75359: LD_INT 2
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: PUSH
75366: LD_INT 4
75368: NEG
75369: PUSH
75370: LD_INT 4
75372: NEG
75373: PUSH
75374: EMPTY
75375: LIST
75376: LIST
75377: PUSH
75378: LD_INT 4
75380: NEG
75381: PUSH
75382: LD_INT 5
75384: NEG
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PUSH
75390: LD_INT 3
75392: NEG
75393: PUSH
75394: LD_INT 4
75396: NEG
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: PUSH
75402: LD_INT 3
75404: NEG
75405: PUSH
75406: LD_INT 3
75408: NEG
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: PUSH
75414: LD_INT 4
75416: NEG
75417: PUSH
75418: LD_INT 3
75420: NEG
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 5
75428: NEG
75429: PUSH
75430: LD_INT 4
75432: NEG
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: LD_INT 5
75440: NEG
75441: PUSH
75442: LD_INT 5
75444: NEG
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: LD_INT 3
75452: NEG
75453: PUSH
75454: LD_INT 5
75456: NEG
75457: PUSH
75458: EMPTY
75459: LIST
75460: LIST
75461: PUSH
75462: LD_INT 5
75464: NEG
75465: PUSH
75466: LD_INT 3
75468: NEG
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: EMPTY
75475: LIST
75476: LIST
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: LIST
75496: LIST
75497: LIST
75498: LIST
75499: LIST
75500: LIST
75501: LIST
75502: LIST
75503: LIST
75504: LIST
75505: LIST
75506: LIST
75507: LIST
75508: LIST
75509: LIST
75510: LIST
75511: LIST
75512: LIST
75513: LIST
75514: LIST
75515: LIST
75516: LIST
75517: LIST
75518: LIST
75519: LIST
75520: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
75521: NOP4
75525: PUSH
75526: LD_INT 4
75528: PUSH
75529: LD_INT 4
75531: PUSH
75532: EMPTY
75533: LIST
75534: LIST
75535: PUSH
75536: LD_INT 4
75538: PUSH
75539: LD_INT 3
75541: PUSH
75542: EMPTY
75543: LIST
75544: LIST
75545: PUSH
75546: LD_INT 5
75548: PUSH
75549: LD_INT 4
75551: PUSH
75552: EMPTY
75553: LIST
75554: LIST
75555: PUSH
75556: LD_INT 5
75558: PUSH
75559: LD_INT 5
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: PUSH
75566: LD_INT 4
75568: PUSH
75569: LD_INT 5
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: PUSH
75576: LD_INT 3
75578: PUSH
75579: LD_INT 4
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: PUSH
75586: LD_INT 3
75588: PUSH
75589: LD_INT 3
75591: PUSH
75592: EMPTY
75593: LIST
75594: LIST
75595: PUSH
75596: LD_INT 5
75598: PUSH
75599: LD_INT 3
75601: PUSH
75602: EMPTY
75603: LIST
75604: LIST
75605: PUSH
75606: LD_INT 3
75608: PUSH
75609: LD_INT 5
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: PUSH
75616: LD_INT 0
75618: PUSH
75619: LD_INT 3
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: PUSH
75626: LD_INT 0
75628: PUSH
75629: LD_INT 2
75631: PUSH
75632: EMPTY
75633: LIST
75634: LIST
75635: PUSH
75636: LD_INT 1
75638: PUSH
75639: LD_INT 3
75641: PUSH
75642: EMPTY
75643: LIST
75644: LIST
75645: PUSH
75646: LD_INT 1
75648: PUSH
75649: LD_INT 4
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: PUSH
75656: LD_INT 0
75658: PUSH
75659: LD_INT 4
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: PUSH
75666: LD_INT 1
75668: NEG
75669: PUSH
75670: LD_INT 3
75672: PUSH
75673: EMPTY
75674: LIST
75675: LIST
75676: PUSH
75677: LD_INT 1
75679: NEG
75680: PUSH
75681: LD_INT 2
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PUSH
75688: LD_INT 2
75690: PUSH
75691: LD_INT 4
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PUSH
75698: LD_INT 2
75700: NEG
75701: PUSH
75702: LD_INT 2
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: PUSH
75709: LD_INT 4
75711: NEG
75712: PUSH
75713: LD_INT 0
75715: PUSH
75716: EMPTY
75717: LIST
75718: LIST
75719: PUSH
75720: LD_INT 4
75722: NEG
75723: PUSH
75724: LD_INT 1
75726: NEG
75727: PUSH
75728: EMPTY
75729: LIST
75730: LIST
75731: PUSH
75732: LD_INT 3
75734: NEG
75735: PUSH
75736: LD_INT 0
75738: PUSH
75739: EMPTY
75740: LIST
75741: LIST
75742: PUSH
75743: LD_INT 3
75745: NEG
75746: PUSH
75747: LD_INT 1
75749: PUSH
75750: EMPTY
75751: LIST
75752: LIST
75753: PUSH
75754: LD_INT 4
75756: NEG
75757: PUSH
75758: LD_INT 1
75760: PUSH
75761: EMPTY
75762: LIST
75763: LIST
75764: PUSH
75765: LD_INT 5
75767: NEG
75768: PUSH
75769: LD_INT 0
75771: PUSH
75772: EMPTY
75773: LIST
75774: LIST
75775: PUSH
75776: LD_INT 5
75778: NEG
75779: PUSH
75780: LD_INT 1
75782: NEG
75783: PUSH
75784: EMPTY
75785: LIST
75786: LIST
75787: PUSH
75788: LD_INT 5
75790: NEG
75791: PUSH
75792: LD_INT 2
75794: NEG
75795: PUSH
75796: EMPTY
75797: LIST
75798: LIST
75799: PUSH
75800: LD_INT 3
75802: NEG
75803: PUSH
75804: LD_INT 2
75806: PUSH
75807: EMPTY
75808: LIST
75809: LIST
75810: PUSH
75811: LD_INT 3
75813: NEG
75814: PUSH
75815: LD_INT 3
75817: NEG
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: PUSH
75823: LD_INT 3
75825: NEG
75826: PUSH
75827: LD_INT 4
75829: NEG
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: PUSH
75835: LD_INT 2
75837: NEG
75838: PUSH
75839: LD_INT 3
75841: NEG
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: PUSH
75847: LD_INT 2
75849: NEG
75850: PUSH
75851: LD_INT 2
75853: NEG
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PUSH
75859: LD_INT 3
75861: NEG
75862: PUSH
75863: LD_INT 2
75865: NEG
75866: PUSH
75867: EMPTY
75868: LIST
75869: LIST
75870: PUSH
75871: LD_INT 4
75873: NEG
75874: PUSH
75875: LD_INT 3
75877: NEG
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: PUSH
75883: LD_INT 4
75885: NEG
75886: PUSH
75887: LD_INT 4
75889: NEG
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: LD_INT 2
75897: NEG
75898: PUSH
75899: LD_INT 4
75901: NEG
75902: PUSH
75903: EMPTY
75904: LIST
75905: LIST
75906: PUSH
75907: LD_INT 4
75909: NEG
75910: PUSH
75911: LD_INT 2
75913: NEG
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: PUSH
75919: LD_INT 0
75921: PUSH
75922: LD_INT 4
75924: NEG
75925: PUSH
75926: EMPTY
75927: LIST
75928: LIST
75929: PUSH
75930: LD_INT 0
75932: PUSH
75933: LD_INT 5
75935: NEG
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: PUSH
75941: LD_INT 1
75943: PUSH
75944: LD_INT 4
75946: NEG
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: LD_INT 1
75954: PUSH
75955: LD_INT 3
75957: NEG
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PUSH
75963: LD_INT 0
75965: PUSH
75966: LD_INT 3
75968: NEG
75969: PUSH
75970: EMPTY
75971: LIST
75972: LIST
75973: PUSH
75974: LD_INT 1
75976: NEG
75977: PUSH
75978: LD_INT 4
75980: NEG
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: PUSH
75986: LD_INT 1
75988: NEG
75989: PUSH
75990: LD_INT 5
75992: NEG
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: PUSH
75998: LD_INT 2
76000: PUSH
76001: LD_INT 3
76003: NEG
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: PUSH
76009: LD_INT 2
76011: NEG
76012: PUSH
76013: LD_INT 5
76015: NEG
76016: PUSH
76017: EMPTY
76018: LIST
76019: LIST
76020: PUSH
76021: EMPTY
76022: LIST
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: LIST
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: LIST
76056: LIST
76057: LIST
76058: LIST
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: LIST
76066: LIST
76067: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
76068: NOP4
76072: PUSH
76073: LD_INT 0
76075: PUSH
76076: LD_INT 4
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: PUSH
76083: LD_INT 0
76085: PUSH
76086: LD_INT 3
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PUSH
76093: LD_INT 1
76095: PUSH
76096: LD_INT 4
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: PUSH
76103: LD_INT 1
76105: PUSH
76106: LD_INT 5
76108: PUSH
76109: EMPTY
76110: LIST
76111: LIST
76112: PUSH
76113: LD_INT 0
76115: PUSH
76116: LD_INT 5
76118: PUSH
76119: EMPTY
76120: LIST
76121: LIST
76122: PUSH
76123: LD_INT 1
76125: NEG
76126: PUSH
76127: LD_INT 4
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: PUSH
76134: LD_INT 1
76136: NEG
76137: PUSH
76138: LD_INT 3
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: PUSH
76145: LD_INT 2
76147: PUSH
76148: LD_INT 5
76150: PUSH
76151: EMPTY
76152: LIST
76153: LIST
76154: PUSH
76155: LD_INT 2
76157: NEG
76158: PUSH
76159: LD_INT 3
76161: PUSH
76162: EMPTY
76163: LIST
76164: LIST
76165: PUSH
76166: LD_INT 3
76168: NEG
76169: PUSH
76170: LD_INT 0
76172: PUSH
76173: EMPTY
76174: LIST
76175: LIST
76176: PUSH
76177: LD_INT 3
76179: NEG
76180: PUSH
76181: LD_INT 1
76183: NEG
76184: PUSH
76185: EMPTY
76186: LIST
76187: LIST
76188: PUSH
76189: LD_INT 2
76191: NEG
76192: PUSH
76193: LD_INT 0
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: PUSH
76200: LD_INT 2
76202: NEG
76203: PUSH
76204: LD_INT 1
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: PUSH
76211: LD_INT 3
76213: NEG
76214: PUSH
76215: LD_INT 1
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: PUSH
76222: LD_INT 4
76224: NEG
76225: PUSH
76226: LD_INT 0
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: PUSH
76233: LD_INT 4
76235: NEG
76236: PUSH
76237: LD_INT 1
76239: NEG
76240: PUSH
76241: EMPTY
76242: LIST
76243: LIST
76244: PUSH
76245: LD_INT 4
76247: NEG
76248: PUSH
76249: LD_INT 2
76251: NEG
76252: PUSH
76253: EMPTY
76254: LIST
76255: LIST
76256: PUSH
76257: LD_INT 2
76259: NEG
76260: PUSH
76261: LD_INT 2
76263: PUSH
76264: EMPTY
76265: LIST
76266: LIST
76267: PUSH
76268: LD_INT 4
76270: NEG
76271: PUSH
76272: LD_INT 4
76274: NEG
76275: PUSH
76276: EMPTY
76277: LIST
76278: LIST
76279: PUSH
76280: LD_INT 4
76282: NEG
76283: PUSH
76284: LD_INT 5
76286: NEG
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: PUSH
76292: LD_INT 3
76294: NEG
76295: PUSH
76296: LD_INT 4
76298: NEG
76299: PUSH
76300: EMPTY
76301: LIST
76302: LIST
76303: PUSH
76304: LD_INT 3
76306: NEG
76307: PUSH
76308: LD_INT 3
76310: NEG
76311: PUSH
76312: EMPTY
76313: LIST
76314: LIST
76315: PUSH
76316: LD_INT 4
76318: NEG
76319: PUSH
76320: LD_INT 3
76322: NEG
76323: PUSH
76324: EMPTY
76325: LIST
76326: LIST
76327: PUSH
76328: LD_INT 5
76330: NEG
76331: PUSH
76332: LD_INT 4
76334: NEG
76335: PUSH
76336: EMPTY
76337: LIST
76338: LIST
76339: PUSH
76340: LD_INT 5
76342: NEG
76343: PUSH
76344: LD_INT 5
76346: NEG
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: PUSH
76352: LD_INT 3
76354: NEG
76355: PUSH
76356: LD_INT 5
76358: NEG
76359: PUSH
76360: EMPTY
76361: LIST
76362: LIST
76363: PUSH
76364: LD_INT 5
76366: NEG
76367: PUSH
76368: LD_INT 3
76370: NEG
76371: PUSH
76372: EMPTY
76373: LIST
76374: LIST
76375: PUSH
76376: LD_INT 0
76378: PUSH
76379: LD_INT 3
76381: NEG
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: PUSH
76387: LD_INT 0
76389: PUSH
76390: LD_INT 4
76392: NEG
76393: PUSH
76394: EMPTY
76395: LIST
76396: LIST
76397: PUSH
76398: LD_INT 1
76400: PUSH
76401: LD_INT 3
76403: NEG
76404: PUSH
76405: EMPTY
76406: LIST
76407: LIST
76408: PUSH
76409: LD_INT 1
76411: PUSH
76412: LD_INT 2
76414: NEG
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: PUSH
76420: LD_INT 0
76422: PUSH
76423: LD_INT 2
76425: NEG
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: PUSH
76431: LD_INT 1
76433: NEG
76434: PUSH
76435: LD_INT 3
76437: NEG
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: PUSH
76443: LD_INT 1
76445: NEG
76446: PUSH
76447: LD_INT 4
76449: NEG
76450: PUSH
76451: EMPTY
76452: LIST
76453: LIST
76454: PUSH
76455: LD_INT 2
76457: PUSH
76458: LD_INT 2
76460: NEG
76461: PUSH
76462: EMPTY
76463: LIST
76464: LIST
76465: PUSH
76466: LD_INT 2
76468: NEG
76469: PUSH
76470: LD_INT 4
76472: NEG
76473: PUSH
76474: EMPTY
76475: LIST
76476: LIST
76477: PUSH
76478: LD_INT 4
76480: PUSH
76481: LD_INT 0
76483: PUSH
76484: EMPTY
76485: LIST
76486: LIST
76487: PUSH
76488: LD_INT 4
76490: PUSH
76491: LD_INT 1
76493: NEG
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: PUSH
76499: LD_INT 5
76501: PUSH
76502: LD_INT 0
76504: PUSH
76505: EMPTY
76506: LIST
76507: LIST
76508: PUSH
76509: LD_INT 5
76511: PUSH
76512: LD_INT 1
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: PUSH
76519: LD_INT 4
76521: PUSH
76522: LD_INT 1
76524: PUSH
76525: EMPTY
76526: LIST
76527: LIST
76528: PUSH
76529: LD_INT 3
76531: PUSH
76532: LD_INT 0
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PUSH
76539: LD_INT 3
76541: PUSH
76542: LD_INT 1
76544: NEG
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: PUSH
76550: LD_INT 3
76552: PUSH
76553: LD_INT 2
76555: NEG
76556: PUSH
76557: EMPTY
76558: LIST
76559: LIST
76560: PUSH
76561: LD_INT 5
76563: PUSH
76564: LD_INT 2
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: PUSH
76571: EMPTY
76572: LIST
76573: LIST
76574: LIST
76575: LIST
76576: LIST
76577: LIST
76578: LIST
76579: LIST
76580: LIST
76581: LIST
76582: LIST
76583: LIST
76584: LIST
76585: LIST
76586: LIST
76587: LIST
76588: LIST
76589: LIST
76590: LIST
76591: LIST
76592: LIST
76593: LIST
76594: LIST
76595: LIST
76596: LIST
76597: LIST
76598: LIST
76599: LIST
76600: LIST
76601: LIST
76602: LIST
76603: LIST
76604: LIST
76605: LIST
76606: LIST
76607: LIST
76608: LIST
76609: LIST
76610: LIST
76611: LIST
76612: LIST
76613: LIST
76614: LIST
76615: LIST
76616: LIST
76617: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
76618: NOP4
76622: PUSH
76623: LD_INT 4
76625: NEG
76626: PUSH
76627: LD_INT 0
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: PUSH
76634: LD_INT 4
76636: NEG
76637: PUSH
76638: LD_INT 1
76640: NEG
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PUSH
76646: LD_INT 3
76648: NEG
76649: PUSH
76650: LD_INT 0
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: PUSH
76657: LD_INT 3
76659: NEG
76660: PUSH
76661: LD_INT 1
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: PUSH
76668: LD_INT 4
76670: NEG
76671: PUSH
76672: LD_INT 1
76674: PUSH
76675: EMPTY
76676: LIST
76677: LIST
76678: PUSH
76679: LD_INT 5
76681: NEG
76682: PUSH
76683: LD_INT 0
76685: PUSH
76686: EMPTY
76687: LIST
76688: LIST
76689: PUSH
76690: LD_INT 5
76692: NEG
76693: PUSH
76694: LD_INT 1
76696: NEG
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: PUSH
76702: LD_INT 5
76704: NEG
76705: PUSH
76706: LD_INT 2
76708: NEG
76709: PUSH
76710: EMPTY
76711: LIST
76712: LIST
76713: PUSH
76714: LD_INT 3
76716: NEG
76717: PUSH
76718: LD_INT 2
76720: PUSH
76721: EMPTY
76722: LIST
76723: LIST
76724: PUSH
76725: LD_INT 3
76727: NEG
76728: PUSH
76729: LD_INT 3
76731: NEG
76732: PUSH
76733: EMPTY
76734: LIST
76735: LIST
76736: PUSH
76737: LD_INT 3
76739: NEG
76740: PUSH
76741: LD_INT 4
76743: NEG
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: PUSH
76749: LD_INT 2
76751: NEG
76752: PUSH
76753: LD_INT 3
76755: NEG
76756: PUSH
76757: EMPTY
76758: LIST
76759: LIST
76760: PUSH
76761: LD_INT 2
76763: NEG
76764: PUSH
76765: LD_INT 2
76767: NEG
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PUSH
76773: LD_INT 3
76775: NEG
76776: PUSH
76777: LD_INT 2
76779: NEG
76780: PUSH
76781: EMPTY
76782: LIST
76783: LIST
76784: PUSH
76785: LD_INT 4
76787: NEG
76788: PUSH
76789: LD_INT 3
76791: NEG
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: PUSH
76797: LD_INT 4
76799: NEG
76800: PUSH
76801: LD_INT 4
76803: NEG
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: PUSH
76809: LD_INT 2
76811: NEG
76812: PUSH
76813: LD_INT 4
76815: NEG
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: PUSH
76821: LD_INT 4
76823: NEG
76824: PUSH
76825: LD_INT 2
76827: NEG
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: PUSH
76833: LD_INT 0
76835: PUSH
76836: LD_INT 4
76838: NEG
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: PUSH
76844: LD_INT 0
76846: PUSH
76847: LD_INT 5
76849: NEG
76850: PUSH
76851: EMPTY
76852: LIST
76853: LIST
76854: PUSH
76855: LD_INT 1
76857: PUSH
76858: LD_INT 4
76860: NEG
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: PUSH
76866: LD_INT 1
76868: PUSH
76869: LD_INT 3
76871: NEG
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: PUSH
76877: LD_INT 0
76879: PUSH
76880: LD_INT 3
76882: NEG
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PUSH
76888: LD_INT 1
76890: NEG
76891: PUSH
76892: LD_INT 4
76894: NEG
76895: PUSH
76896: EMPTY
76897: LIST
76898: LIST
76899: PUSH
76900: LD_INT 1
76902: NEG
76903: PUSH
76904: LD_INT 5
76906: NEG
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: PUSH
76912: LD_INT 2
76914: PUSH
76915: LD_INT 3
76917: NEG
76918: PUSH
76919: EMPTY
76920: LIST
76921: LIST
76922: PUSH
76923: LD_INT 2
76925: NEG
76926: PUSH
76927: LD_INT 5
76929: NEG
76930: PUSH
76931: EMPTY
76932: LIST
76933: LIST
76934: PUSH
76935: LD_INT 3
76937: PUSH
76938: LD_INT 0
76940: PUSH
76941: EMPTY
76942: LIST
76943: LIST
76944: PUSH
76945: LD_INT 3
76947: PUSH
76948: LD_INT 1
76950: NEG
76951: PUSH
76952: EMPTY
76953: LIST
76954: LIST
76955: PUSH
76956: LD_INT 4
76958: PUSH
76959: LD_INT 0
76961: PUSH
76962: EMPTY
76963: LIST
76964: LIST
76965: PUSH
76966: LD_INT 4
76968: PUSH
76969: LD_INT 1
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: PUSH
76976: LD_INT 3
76978: PUSH
76979: LD_INT 1
76981: PUSH
76982: EMPTY
76983: LIST
76984: LIST
76985: PUSH
76986: LD_INT 2
76988: PUSH
76989: LD_INT 0
76991: PUSH
76992: EMPTY
76993: LIST
76994: LIST
76995: PUSH
76996: LD_INT 2
76998: PUSH
76999: LD_INT 1
77001: NEG
77002: PUSH
77003: EMPTY
77004: LIST
77005: LIST
77006: PUSH
77007: LD_INT 2
77009: PUSH
77010: LD_INT 2
77012: NEG
77013: PUSH
77014: EMPTY
77015: LIST
77016: LIST
77017: PUSH
77018: LD_INT 4
77020: PUSH
77021: LD_INT 2
77023: PUSH
77024: EMPTY
77025: LIST
77026: LIST
77027: PUSH
77028: LD_INT 4
77030: PUSH
77031: LD_INT 4
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: PUSH
77038: LD_INT 4
77040: PUSH
77041: LD_INT 3
77043: PUSH
77044: EMPTY
77045: LIST
77046: LIST
77047: PUSH
77048: LD_INT 5
77050: PUSH
77051: LD_INT 4
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: PUSH
77058: LD_INT 5
77060: PUSH
77061: LD_INT 5
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: PUSH
77068: LD_INT 4
77070: PUSH
77071: LD_INT 5
77073: PUSH
77074: EMPTY
77075: LIST
77076: LIST
77077: PUSH
77078: LD_INT 3
77080: PUSH
77081: LD_INT 4
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: PUSH
77088: LD_INT 3
77090: PUSH
77091: LD_INT 3
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: PUSH
77098: LD_INT 5
77100: PUSH
77101: LD_INT 3
77103: PUSH
77104: EMPTY
77105: LIST
77106: LIST
77107: PUSH
77108: LD_INT 3
77110: PUSH
77111: LD_INT 5
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: LIST
77122: LIST
77123: LIST
77124: LIST
77125: LIST
77126: LIST
77127: LIST
77128: LIST
77129: LIST
77130: LIST
77131: LIST
77132: LIST
77133: LIST
77134: LIST
77135: LIST
77136: LIST
77137: LIST
77138: LIST
77139: LIST
77140: LIST
77141: LIST
77142: LIST
77143: LIST
77144: LIST
77145: LIST
77146: LIST
77147: LIST
77148: LIST
77149: LIST
77150: LIST
77151: LIST
77152: LIST
77153: LIST
77154: LIST
77155: LIST
77156: LIST
77157: LIST
77158: LIST
77159: LIST
77160: LIST
77161: LIST
77162: LIST
77163: LIST
77164: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
77165: NOP4
77169: PUSH
77170: LD_INT 4
77172: NEG
77173: PUSH
77174: LD_INT 4
77176: NEG
77177: PUSH
77178: EMPTY
77179: LIST
77180: LIST
77181: PUSH
77182: LD_INT 4
77184: NEG
77185: PUSH
77186: LD_INT 5
77188: NEG
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: PUSH
77194: LD_INT 3
77196: NEG
77197: PUSH
77198: LD_INT 4
77200: NEG
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PUSH
77206: LD_INT 3
77208: NEG
77209: PUSH
77210: LD_INT 3
77212: NEG
77213: PUSH
77214: EMPTY
77215: LIST
77216: LIST
77217: PUSH
77218: LD_INT 4
77220: NEG
77221: PUSH
77222: LD_INT 3
77224: NEG
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: PUSH
77230: LD_INT 5
77232: NEG
77233: PUSH
77234: LD_INT 4
77236: NEG
77237: PUSH
77238: EMPTY
77239: LIST
77240: LIST
77241: PUSH
77242: LD_INT 5
77244: NEG
77245: PUSH
77246: LD_INT 5
77248: NEG
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PUSH
77254: LD_INT 3
77256: NEG
77257: PUSH
77258: LD_INT 5
77260: NEG
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: PUSH
77266: LD_INT 5
77268: NEG
77269: PUSH
77270: LD_INT 3
77272: NEG
77273: PUSH
77274: EMPTY
77275: LIST
77276: LIST
77277: PUSH
77278: LD_INT 0
77280: PUSH
77281: LD_INT 3
77283: NEG
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: LD_INT 0
77291: PUSH
77292: LD_INT 4
77294: NEG
77295: PUSH
77296: EMPTY
77297: LIST
77298: LIST
77299: PUSH
77300: LD_INT 1
77302: PUSH
77303: LD_INT 3
77305: NEG
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: PUSH
77311: LD_INT 1
77313: PUSH
77314: LD_INT 2
77316: NEG
77317: PUSH
77318: EMPTY
77319: LIST
77320: LIST
77321: PUSH
77322: LD_INT 0
77324: PUSH
77325: LD_INT 2
77327: NEG
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: PUSH
77333: LD_INT 1
77335: NEG
77336: PUSH
77337: LD_INT 3
77339: NEG
77340: PUSH
77341: EMPTY
77342: LIST
77343: LIST
77344: PUSH
77345: LD_INT 1
77347: NEG
77348: PUSH
77349: LD_INT 4
77351: NEG
77352: PUSH
77353: EMPTY
77354: LIST
77355: LIST
77356: PUSH
77357: LD_INT 2
77359: PUSH
77360: LD_INT 2
77362: NEG
77363: PUSH
77364: EMPTY
77365: LIST
77366: LIST
77367: PUSH
77368: LD_INT 2
77370: NEG
77371: PUSH
77372: LD_INT 4
77374: NEG
77375: PUSH
77376: EMPTY
77377: LIST
77378: LIST
77379: PUSH
77380: LD_INT 4
77382: PUSH
77383: LD_INT 0
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PUSH
77390: LD_INT 4
77392: PUSH
77393: LD_INT 1
77395: NEG
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: PUSH
77401: LD_INT 5
77403: PUSH
77404: LD_INT 0
77406: PUSH
77407: EMPTY
77408: LIST
77409: LIST
77410: PUSH
77411: LD_INT 5
77413: PUSH
77414: LD_INT 1
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: PUSH
77421: LD_INT 4
77423: PUSH
77424: LD_INT 1
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: PUSH
77431: LD_INT 3
77433: PUSH
77434: LD_INT 0
77436: PUSH
77437: EMPTY
77438: LIST
77439: LIST
77440: PUSH
77441: LD_INT 3
77443: PUSH
77444: LD_INT 1
77446: NEG
77447: PUSH
77448: EMPTY
77449: LIST
77450: LIST
77451: PUSH
77452: LD_INT 3
77454: PUSH
77455: LD_INT 2
77457: NEG
77458: PUSH
77459: EMPTY
77460: LIST
77461: LIST
77462: PUSH
77463: LD_INT 5
77465: PUSH
77466: LD_INT 2
77468: PUSH
77469: EMPTY
77470: LIST
77471: LIST
77472: PUSH
77473: LD_INT 3
77475: PUSH
77476: LD_INT 3
77478: PUSH
77479: EMPTY
77480: LIST
77481: LIST
77482: PUSH
77483: LD_INT 3
77485: PUSH
77486: LD_INT 2
77488: PUSH
77489: EMPTY
77490: LIST
77491: LIST
77492: PUSH
77493: LD_INT 4
77495: PUSH
77496: LD_INT 3
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: PUSH
77503: LD_INT 4
77505: PUSH
77506: LD_INT 4
77508: PUSH
77509: EMPTY
77510: LIST
77511: LIST
77512: PUSH
77513: LD_INT 3
77515: PUSH
77516: LD_INT 4
77518: PUSH
77519: EMPTY
77520: LIST
77521: LIST
77522: PUSH
77523: LD_INT 2
77525: PUSH
77526: LD_INT 3
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: PUSH
77533: LD_INT 2
77535: PUSH
77536: LD_INT 2
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: PUSH
77543: LD_INT 4
77545: PUSH
77546: LD_INT 2
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: PUSH
77553: LD_INT 2
77555: PUSH
77556: LD_INT 4
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: LD_INT 0
77565: PUSH
77566: LD_INT 4
77568: PUSH
77569: EMPTY
77570: LIST
77571: LIST
77572: PUSH
77573: LD_INT 0
77575: PUSH
77576: LD_INT 3
77578: PUSH
77579: EMPTY
77580: LIST
77581: LIST
77582: PUSH
77583: LD_INT 1
77585: PUSH
77586: LD_INT 4
77588: PUSH
77589: EMPTY
77590: LIST
77591: LIST
77592: PUSH
77593: LD_INT 1
77595: PUSH
77596: LD_INT 5
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: PUSH
77603: LD_INT 0
77605: PUSH
77606: LD_INT 5
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: PUSH
77613: LD_INT 1
77615: NEG
77616: PUSH
77617: LD_INT 4
77619: PUSH
77620: EMPTY
77621: LIST
77622: LIST
77623: PUSH
77624: LD_INT 1
77626: NEG
77627: PUSH
77628: LD_INT 3
77630: PUSH
77631: EMPTY
77632: LIST
77633: LIST
77634: PUSH
77635: LD_INT 2
77637: PUSH
77638: LD_INT 5
77640: PUSH
77641: EMPTY
77642: LIST
77643: LIST
77644: PUSH
77645: LD_INT 2
77647: NEG
77648: PUSH
77649: LD_INT 3
77651: PUSH
77652: EMPTY
77653: LIST
77654: LIST
77655: PUSH
77656: EMPTY
77657: LIST
77658: LIST
77659: LIST
77660: LIST
77661: LIST
77662: LIST
77663: LIST
77664: LIST
77665: LIST
77666: LIST
77667: LIST
77668: LIST
77669: LIST
77670: LIST
77671: LIST
77672: LIST
77673: LIST
77674: LIST
77675: LIST
77676: LIST
77677: LIST
77678: LIST
77679: LIST
77680: LIST
77681: LIST
77682: LIST
77683: LIST
77684: LIST
77685: LIST
77686: LIST
77687: LIST
77688: LIST
77689: LIST
77690: LIST
77691: LIST
77692: LIST
77693: LIST
77694: LIST
77695: LIST
77696: LIST
77697: LIST
77698: LIST
77699: LIST
77700: LIST
77701: LIST
77702: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
77703: NOP4
77707: PUSH
77708: LD_INT 0
77710: PUSH
77711: LD_INT 4
77713: NEG
77714: PUSH
77715: EMPTY
77716: LIST
77717: LIST
77718: PUSH
77719: LD_INT 0
77721: PUSH
77722: LD_INT 5
77724: NEG
77725: PUSH
77726: EMPTY
77727: LIST
77728: LIST
77729: PUSH
77730: LD_INT 1
77732: PUSH
77733: LD_INT 4
77735: NEG
77736: PUSH
77737: EMPTY
77738: LIST
77739: LIST
77740: PUSH
77741: LD_INT 1
77743: PUSH
77744: LD_INT 3
77746: NEG
77747: PUSH
77748: EMPTY
77749: LIST
77750: LIST
77751: PUSH
77752: LD_INT 0
77754: PUSH
77755: LD_INT 3
77757: NEG
77758: PUSH
77759: EMPTY
77760: LIST
77761: LIST
77762: PUSH
77763: LD_INT 1
77765: NEG
77766: PUSH
77767: LD_INT 4
77769: NEG
77770: PUSH
77771: EMPTY
77772: LIST
77773: LIST
77774: PUSH
77775: LD_INT 1
77777: NEG
77778: PUSH
77779: LD_INT 5
77781: NEG
77782: PUSH
77783: EMPTY
77784: LIST
77785: LIST
77786: PUSH
77787: LD_INT 2
77789: PUSH
77790: LD_INT 3
77792: NEG
77793: PUSH
77794: EMPTY
77795: LIST
77796: LIST
77797: PUSH
77798: LD_INT 2
77800: NEG
77801: PUSH
77802: LD_INT 5
77804: NEG
77805: PUSH
77806: EMPTY
77807: LIST
77808: LIST
77809: PUSH
77810: LD_INT 3
77812: PUSH
77813: LD_INT 0
77815: PUSH
77816: EMPTY
77817: LIST
77818: LIST
77819: PUSH
77820: LD_INT 3
77822: PUSH
77823: LD_INT 1
77825: NEG
77826: PUSH
77827: EMPTY
77828: LIST
77829: LIST
77830: PUSH
77831: LD_INT 4
77833: PUSH
77834: LD_INT 0
77836: PUSH
77837: EMPTY
77838: LIST
77839: LIST
77840: PUSH
77841: LD_INT 4
77843: PUSH
77844: LD_INT 1
77846: PUSH
77847: EMPTY
77848: LIST
77849: LIST
77850: PUSH
77851: LD_INT 3
77853: PUSH
77854: LD_INT 1
77856: PUSH
77857: EMPTY
77858: LIST
77859: LIST
77860: PUSH
77861: LD_INT 2
77863: PUSH
77864: LD_INT 0
77866: PUSH
77867: EMPTY
77868: LIST
77869: LIST
77870: PUSH
77871: LD_INT 2
77873: PUSH
77874: LD_INT 1
77876: NEG
77877: PUSH
77878: EMPTY
77879: LIST
77880: LIST
77881: PUSH
77882: LD_INT 2
77884: PUSH
77885: LD_INT 2
77887: NEG
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: PUSH
77893: LD_INT 4
77895: PUSH
77896: LD_INT 2
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: PUSH
77903: LD_INT 4
77905: PUSH
77906: LD_INT 4
77908: PUSH
77909: EMPTY
77910: LIST
77911: LIST
77912: PUSH
77913: LD_INT 4
77915: PUSH
77916: LD_INT 3
77918: PUSH
77919: EMPTY
77920: LIST
77921: LIST
77922: PUSH
77923: LD_INT 5
77925: PUSH
77926: LD_INT 4
77928: PUSH
77929: EMPTY
77930: LIST
77931: LIST
77932: PUSH
77933: LD_INT 5
77935: PUSH
77936: LD_INT 5
77938: PUSH
77939: EMPTY
77940: LIST
77941: LIST
77942: PUSH
77943: LD_INT 4
77945: PUSH
77946: LD_INT 5
77948: PUSH
77949: EMPTY
77950: LIST
77951: LIST
77952: PUSH
77953: LD_INT 3
77955: PUSH
77956: LD_INT 4
77958: PUSH
77959: EMPTY
77960: LIST
77961: LIST
77962: PUSH
77963: LD_INT 3
77965: PUSH
77966: LD_INT 3
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: PUSH
77973: LD_INT 5
77975: PUSH
77976: LD_INT 3
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: PUSH
77983: LD_INT 3
77985: PUSH
77986: LD_INT 5
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: PUSH
77993: LD_INT 0
77995: PUSH
77996: LD_INT 3
77998: PUSH
77999: EMPTY
78000: LIST
78001: LIST
78002: PUSH
78003: LD_INT 0
78005: PUSH
78006: LD_INT 2
78008: PUSH
78009: EMPTY
78010: LIST
78011: LIST
78012: PUSH
78013: LD_INT 1
78015: PUSH
78016: LD_INT 3
78018: PUSH
78019: EMPTY
78020: LIST
78021: LIST
78022: PUSH
78023: LD_INT 1
78025: PUSH
78026: LD_INT 4
78028: PUSH
78029: EMPTY
78030: LIST
78031: LIST
78032: PUSH
78033: LD_INT 0
78035: PUSH
78036: LD_INT 4
78038: PUSH
78039: EMPTY
78040: LIST
78041: LIST
78042: PUSH
78043: LD_INT 1
78045: NEG
78046: PUSH
78047: LD_INT 3
78049: PUSH
78050: EMPTY
78051: LIST
78052: LIST
78053: PUSH
78054: LD_INT 1
78056: NEG
78057: PUSH
78058: LD_INT 2
78060: PUSH
78061: EMPTY
78062: LIST
78063: LIST
78064: PUSH
78065: LD_INT 2
78067: PUSH
78068: LD_INT 4
78070: PUSH
78071: EMPTY
78072: LIST
78073: LIST
78074: PUSH
78075: LD_INT 2
78077: NEG
78078: PUSH
78079: LD_INT 2
78081: PUSH
78082: EMPTY
78083: LIST
78084: LIST
78085: PUSH
78086: LD_INT 4
78088: NEG
78089: PUSH
78090: LD_INT 0
78092: PUSH
78093: EMPTY
78094: LIST
78095: LIST
78096: PUSH
78097: LD_INT 4
78099: NEG
78100: PUSH
78101: LD_INT 1
78103: NEG
78104: PUSH
78105: EMPTY
78106: LIST
78107: LIST
78108: PUSH
78109: LD_INT 3
78111: NEG
78112: PUSH
78113: LD_INT 0
78115: PUSH
78116: EMPTY
78117: LIST
78118: LIST
78119: PUSH
78120: LD_INT 3
78122: NEG
78123: PUSH
78124: LD_INT 1
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: PUSH
78131: LD_INT 4
78133: NEG
78134: PUSH
78135: LD_INT 1
78137: PUSH
78138: EMPTY
78139: LIST
78140: LIST
78141: PUSH
78142: LD_INT 5
78144: NEG
78145: PUSH
78146: LD_INT 0
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PUSH
78153: LD_INT 5
78155: NEG
78156: PUSH
78157: LD_INT 1
78159: NEG
78160: PUSH
78161: EMPTY
78162: LIST
78163: LIST
78164: PUSH
78165: LD_INT 5
78167: NEG
78168: PUSH
78169: LD_INT 2
78171: NEG
78172: PUSH
78173: EMPTY
78174: LIST
78175: LIST
78176: PUSH
78177: LD_INT 3
78179: NEG
78180: PUSH
78181: LD_INT 2
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: PUSH
78188: EMPTY
78189: LIST
78190: LIST
78191: LIST
78192: LIST
78193: LIST
78194: LIST
78195: LIST
78196: LIST
78197: LIST
78198: LIST
78199: LIST
78200: LIST
78201: LIST
78202: LIST
78203: LIST
78204: LIST
78205: LIST
78206: LIST
78207: LIST
78208: LIST
78209: LIST
78210: LIST
78211: LIST
78212: LIST
78213: LIST
78214: LIST
78215: LIST
78216: LIST
78217: LIST
78218: LIST
78219: LIST
78220: LIST
78221: LIST
78222: LIST
78223: LIST
78224: LIST
78225: LIST
78226: LIST
78227: LIST
78228: LIST
78229: LIST
78230: LIST
78231: LIST
78232: LIST
78233: LIST
78234: ST_TO_ADDR
// end ; end ;
78235: GO 78238
78237: POP
// case btype of b_depot , b_warehouse :
78238: NOP4
78242: PUSH
78243: LD_INT 0
78245: DOUBLE
78246: EQUAL
78247: IFTRUE 78257
78249: LD_INT 1
78251: DOUBLE
78252: EQUAL
78253: IFTRUE 78257
78255: GO 78458
78257: POP
// case nation of nation_american :
78258: NOP4
78262: PUSH
78263: LD_INT 1
78265: DOUBLE
78266: EQUAL
78267: IFTRUE 78271
78269: GO 78327
78271: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
78272: NOP4
78276: PUSH
78277: NOP4
78281: PUSH
78282: NOP4
78286: PUSH
78287: NOP4
78291: PUSH
78292: NOP4
78296: PUSH
78297: NOP4
78301: PUSH
78302: NOP4
78306: PUSH
78307: EMPTY
78308: LIST
78309: LIST
78310: LIST
78311: LIST
78312: LIST
78313: LIST
78314: PUSH
78315: NOP4
78319: PUSH
78320: LD_INT 1
78322: PLUS
78323: ARRAY
78324: ST_TO_ADDR
78325: GO 78456
78327: LD_INT 2
78329: DOUBLE
78330: EQUAL
78331: IFTRUE 78335
78333: GO 78391
78335: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
78336: NOP4
78340: PUSH
78341: NOP4
78345: PUSH
78346: NOP4
78350: PUSH
78351: NOP4
78355: PUSH
78356: NOP4
78360: PUSH
78361: NOP4
78365: PUSH
78366: NOP4
78370: PUSH
78371: EMPTY
78372: LIST
78373: LIST
78374: LIST
78375: LIST
78376: LIST
78377: LIST
78378: PUSH
78379: NOP4
78383: PUSH
78384: LD_INT 1
78386: PLUS
78387: ARRAY
78388: ST_TO_ADDR
78389: GO 78456
78391: LD_INT 3
78393: DOUBLE
78394: EQUAL
78395: IFTRUE 78399
78397: GO 78455
78399: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
78400: NOP4
78404: PUSH
78405: NOP4
78409: PUSH
78410: NOP4
78414: PUSH
78415: NOP4
78419: PUSH
78420: NOP4
78424: PUSH
78425: NOP4
78429: PUSH
78430: NOP4
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: LIST
78439: LIST
78440: LIST
78441: LIST
78442: PUSH
78443: NOP4
78447: PUSH
78448: LD_INT 1
78450: PLUS
78451: ARRAY
78452: ST_TO_ADDR
78453: GO 78456
78455: POP
78456: GO 79011
78458: LD_INT 2
78460: DOUBLE
78461: EQUAL
78462: IFTRUE 78472
78464: LD_INT 3
78466: DOUBLE
78467: EQUAL
78468: IFTRUE 78472
78470: GO 78528
78472: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
78473: NOP4
78477: PUSH
78478: NOP4
78482: PUSH
78483: NOP4
78487: PUSH
78488: NOP4
78492: PUSH
78493: NOP4
78497: PUSH
78498: NOP4
78502: PUSH
78503: NOP4
78507: PUSH
78508: EMPTY
78509: LIST
78510: LIST
78511: LIST
78512: LIST
78513: LIST
78514: LIST
78515: PUSH
78516: NOP4
78520: PUSH
78521: LD_INT 1
78523: PLUS
78524: ARRAY
78525: ST_TO_ADDR
78526: GO 79011
78528: LD_INT 16
78530: DOUBLE
78531: EQUAL
78532: IFTRUE 78590
78534: LD_INT 17
78536: DOUBLE
78537: EQUAL
78538: IFTRUE 78590
78540: LD_INT 18
78542: DOUBLE
78543: EQUAL
78544: IFTRUE 78590
78546: LD_INT 19
78548: DOUBLE
78549: EQUAL
78550: IFTRUE 78590
78552: LD_INT 22
78554: DOUBLE
78555: EQUAL
78556: IFTRUE 78590
78558: LD_INT 20
78560: DOUBLE
78561: EQUAL
78562: IFTRUE 78590
78564: LD_INT 21
78566: DOUBLE
78567: EQUAL
78568: IFTRUE 78590
78570: LD_INT 23
78572: DOUBLE
78573: EQUAL
78574: IFTRUE 78590
78576: LD_INT 24
78578: DOUBLE
78579: EQUAL
78580: IFTRUE 78590
78582: LD_INT 25
78584: DOUBLE
78585: EQUAL
78586: IFTRUE 78590
78588: GO 78646
78590: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
78591: NOP4
78595: PUSH
78596: NOP4
78600: PUSH
78601: NOP4
78605: PUSH
78606: NOP4
78610: PUSH
78611: NOP4
78615: PUSH
78616: NOP4
78620: PUSH
78621: NOP4
78625: PUSH
78626: EMPTY
78627: LIST
78628: LIST
78629: LIST
78630: LIST
78631: LIST
78632: LIST
78633: PUSH
78634: NOP4
78638: PUSH
78639: LD_INT 1
78641: PLUS
78642: ARRAY
78643: ST_TO_ADDR
78644: GO 79011
78646: LD_INT 6
78648: DOUBLE
78649: EQUAL
78650: IFTRUE 78702
78652: LD_INT 7
78654: DOUBLE
78655: EQUAL
78656: IFTRUE 78702
78658: LD_INT 8
78660: DOUBLE
78661: EQUAL
78662: IFTRUE 78702
78664: LD_INT 13
78666: DOUBLE
78667: EQUAL
78668: IFTRUE 78702
78670: LD_INT 12
78672: DOUBLE
78673: EQUAL
78674: IFTRUE 78702
78676: LD_INT 15
78678: DOUBLE
78679: EQUAL
78680: IFTRUE 78702
78682: LD_INT 11
78684: DOUBLE
78685: EQUAL
78686: IFTRUE 78702
78688: LD_INT 14
78690: DOUBLE
78691: EQUAL
78692: IFTRUE 78702
78694: LD_INT 10
78696: DOUBLE
78697: EQUAL
78698: IFTRUE 78702
78700: GO 78758
78702: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
78703: NOP4
78707: PUSH
78708: NOP4
78712: PUSH
78713: NOP4
78717: PUSH
78718: NOP4
78722: PUSH
78723: NOP4
78727: PUSH
78728: NOP4
78732: PUSH
78733: NOP4
78737: PUSH
78738: EMPTY
78739: LIST
78740: LIST
78741: LIST
78742: LIST
78743: LIST
78744: LIST
78745: PUSH
78746: NOP4
78750: PUSH
78751: LD_INT 1
78753: PLUS
78754: ARRAY
78755: ST_TO_ADDR
78756: GO 79011
78758: LD_INT 36
78760: DOUBLE
78761: EQUAL
78762: IFTRUE 78766
78764: GO 78822
78766: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
78767: NOP4
78771: PUSH
78772: NOP4
78776: PUSH
78777: NOP4
78781: PUSH
78782: NOP4
78786: PUSH
78787: NOP4
78791: PUSH
78792: NOP4
78796: PUSH
78797: NOP4
78801: PUSH
78802: EMPTY
78803: LIST
78804: LIST
78805: LIST
78806: LIST
78807: LIST
78808: LIST
78809: PUSH
78810: NOP4
78814: PUSH
78815: LD_INT 1
78817: PLUS
78818: ARRAY
78819: ST_TO_ADDR
78820: GO 79011
78822: LD_INT 4
78824: DOUBLE
78825: EQUAL
78826: IFTRUE 78848
78828: LD_INT 5
78830: DOUBLE
78831: EQUAL
78832: IFTRUE 78848
78834: LD_INT 34
78836: DOUBLE
78837: EQUAL
78838: IFTRUE 78848
78840: LD_INT 37
78842: DOUBLE
78843: EQUAL
78844: IFTRUE 78848
78846: GO 78904
78848: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
78849: NOP4
78853: PUSH
78854: NOP4
78858: PUSH
78859: NOP4
78863: PUSH
78864: NOP4
78868: PUSH
78869: NOP4
78873: PUSH
78874: NOP4
78878: PUSH
78879: NOP4
78883: PUSH
78884: EMPTY
78885: LIST
78886: LIST
78887: LIST
78888: LIST
78889: LIST
78890: LIST
78891: PUSH
78892: NOP4
78896: PUSH
78897: LD_INT 1
78899: PLUS
78900: ARRAY
78901: ST_TO_ADDR
78902: GO 79011
78904: LD_INT 31
78906: DOUBLE
78907: EQUAL
78908: IFTRUE 78954
78910: LD_INT 32
78912: DOUBLE
78913: EQUAL
78914: IFTRUE 78954
78916: LD_INT 33
78918: DOUBLE
78919: EQUAL
78920: IFTRUE 78954
78922: LD_INT 27
78924: DOUBLE
78925: EQUAL
78926: IFTRUE 78954
78928: LD_INT 26
78930: DOUBLE
78931: EQUAL
78932: IFTRUE 78954
78934: LD_INT 28
78936: DOUBLE
78937: EQUAL
78938: IFTRUE 78954
78940: LD_INT 29
78942: DOUBLE
78943: EQUAL
78944: IFTRUE 78954
78946: LD_INT 30
78948: DOUBLE
78949: EQUAL
78950: IFTRUE 78954
78952: GO 79010
78954: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
78955: NOP4
78959: PUSH
78960: NOP4
78964: PUSH
78965: NOP4
78969: PUSH
78970: NOP4
78974: PUSH
78975: NOP4
78979: PUSH
78980: NOP4
78984: PUSH
78985: NOP4
78989: PUSH
78990: EMPTY
78991: LIST
78992: LIST
78993: LIST
78994: LIST
78995: LIST
78996: LIST
78997: PUSH
78998: NOP4
79002: PUSH
79003: LD_INT 1
79005: PLUS
79006: ARRAY
79007: ST_TO_ADDR
79008: GO 79011
79010: POP
// temp_list2 = [ ] ;
79011: NOP4
79015: PUSH
79016: EMPTY
79017: ST_TO_ADDR
// for i in temp_list do
79018: NOP4
79022: PUSH
79023: NOP4
79027: PUSH
79028: FOR_IN
79029: IFFALSE 79081
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
79031: NOP4
79035: PUSH
79036: NOP4
79040: PUSH
79041: NOP4
79045: PUSH
79046: LD_INT 1
79048: ARRAY
79049: PUSH
79050: NOP4
79054: PLUS
79055: PUSH
79056: NOP4
79060: PUSH
79061: LD_INT 2
79063: ARRAY
79064: PUSH
79065: NOP4
79069: PLUS
79070: PUSH
79071: EMPTY
79072: LIST
79073: LIST
79074: PUSH
79075: EMPTY
79076: LIST
79077: ADD
79078: ST_TO_ADDR
79079: GO 79028
79081: POP
79082: POP
// result = temp_list2 ;
79083: NOP4
79087: PUSH
79088: NOP4
79092: ST_TO_ADDR
// end ;
79093: LD_VAR 0 7
79097: RET
// export function EnemyInRange ( unit , dist ) ; begin
79098: LD_INT 0
79100: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
79101: NOP4
79105: PUSH
79106: NOP4
79110: PPUSH
79111: NOP4
79115: PPUSH
79116: NOP4
79120: PPUSH
79121: NOP4
79125: PPUSH
79126: NOP4
79130: PPUSH
79131: NOP4
79135: PPUSH
79136: NOP4
79140: PPUSH
79141: NOP4
79145: PUSH
79146: LD_INT 4
79148: ARRAY
79149: ST_TO_ADDR
// end ;
79150: LD_VAR 0 3
79154: RET
// export function PlayerSeeMe ( unit ) ; begin
79155: LD_INT 0
79157: PPUSH
// result := See ( your_side , unit ) ;
79158: NOP4
79162: PUSH
79163: NOP4
79167: PPUSH
79168: NOP4
79172: PPUSH
79173: NOP4
79177: ST_TO_ADDR
// end ;
79178: LD_VAR 0 2
79182: RET
// export function ReverseDir ( unit ) ; begin
79183: LD_INT 0
79185: PPUSH
// if not unit then
79186: NOP4
79190: NOT
79191: IFFALSE 79195
// exit ;
79193: GO 79218
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
79195: NOP4
79199: PUSH
79200: NOP4
79204: PPUSH
79205: NOP4
79209: PUSH
79210: LD_INT 3
79212: PLUS
79213: PUSH
79214: LD_INT 6
79216: MOD
79217: ST_TO_ADDR
// end ;
79218: LD_VAR 0 2
79222: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
79223: LD_INT 0
79225: PPUSH
79226: PPUSH
79227: PPUSH
79228: PPUSH
79229: PPUSH
// if not hexes then
79230: NOP4
79234: NOT
79235: IFFALSE 79239
// exit ;
79237: GO 79387
// dist := 9999 ;
79239: NOP4
79243: PUSH
79244: LD_INT 9999
79246: ST_TO_ADDR
// for i = 1 to hexes do
79247: NOP4
79251: PUSH
79252: DOUBLE
79253: LD_INT 1
79255: DEC
79256: ST_TO_ADDR
79257: NOP4
79261: PUSH
79262: FOR_TO
79263: IFFALSE 79375
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
79265: NOP4
79269: PPUSH
79270: NOP4
79274: PUSH
79275: NOP4
79279: ARRAY
79280: PUSH
79281: LD_INT 1
79283: ARRAY
79284: PPUSH
79285: NOP4
79289: PUSH
79290: NOP4
79294: ARRAY
79295: PUSH
79296: LD_INT 2
79298: ARRAY
79299: PPUSH
79300: NOP4
79304: PUSH
79305: NOP4
79309: LESS
79310: IFFALSE 79373
// begin hex := hexes [ i ] ;
79312: NOP4
79316: PUSH
79317: NOP4
79321: PUSH
79322: NOP4
79326: ARRAY
79327: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
79328: NOP4
79332: PUSH
79333: NOP4
79337: PPUSH
79338: NOP4
79342: PUSH
79343: NOP4
79347: ARRAY
79348: PUSH
79349: LD_INT 1
79351: ARRAY
79352: PPUSH
79353: NOP4
79357: PUSH
79358: NOP4
79362: ARRAY
79363: PUSH
79364: LD_INT 2
79366: ARRAY
79367: PPUSH
79368: NOP4
79372: ST_TO_ADDR
// end ; end ;
79373: GO 79262
79375: POP
79376: POP
// result := hex ;
79377: NOP4
79381: PUSH
79382: NOP4
79386: ST_TO_ADDR
// end ;
79387: LD_VAR 0 3
79391: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
79392: LD_INT 0
79394: PPUSH
79395: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
79396: NOP4
79400: NOT
79401: PUSH
79402: NOP4
79406: PUSH
79407: LD_INT 21
79409: PUSH
79410: LD_INT 2
79412: PUSH
79413: EMPTY
79414: LIST
79415: LIST
79416: PUSH
79417: LD_INT 23
79419: PUSH
79420: LD_INT 2
79422: PUSH
79423: EMPTY
79424: LIST
79425: LIST
79426: PUSH
79427: EMPTY
79428: LIST
79429: LIST
79430: PPUSH
79431: NOP4
79435: IN
79436: NOT
79437: OR
79438: IFFALSE 79442
// exit ;
79440: GO 79489
// for i = 1 to 3 do
79442: NOP4
79446: PUSH
79447: DOUBLE
79448: LD_INT 1
79450: DEC
79451: ST_TO_ADDR
79452: LD_INT 3
79454: PUSH
79455: FOR_TO
79456: IFFALSE 79487
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
79458: NOP4
79462: PPUSH
79463: NOP4
79467: PPUSH
79468: NOP4
79472: PPUSH
79473: NOP4
79477: PPUSH
79478: LD_INT 1
79480: PPUSH
79481: NOP4
79485: GO 79455
79487: POP
79488: POP
// end ;
79489: LD_VAR 0 2
79493: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
79494: LD_INT 0
79496: PPUSH
79497: PPUSH
79498: PPUSH
79499: PPUSH
79500: PPUSH
79501: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
79502: NOP4
79506: NOT
79507: PUSH
79508: NOP4
79512: NOT
79513: OR
79514: PUSH
79515: NOP4
79519: PPUSH
79520: NOP4
79524: OR
79525: IFFALSE 79529
// exit ;
79527: GO 79970
// x := GetX ( enemy_unit ) ;
79529: NOP4
79533: PUSH
79534: NOP4
79538: PPUSH
79539: NOP4
79543: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
79544: NOP4
79548: PUSH
79549: NOP4
79553: PPUSH
79554: NOP4
79558: ST_TO_ADDR
// if not x or not y then
79559: NOP4
79563: NOT
79564: PUSH
79565: NOP4
79569: NOT
79570: OR
79571: IFFALSE 79575
// exit ;
79573: GO 79970
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
79575: NOP4
79579: PUSH
79580: NOP4
79584: PPUSH
79585: LD_INT 0
79587: PPUSH
79588: LD_INT 4
79590: PPUSH
79591: NOP4
79595: PUSH
79596: NOP4
79600: PPUSH
79601: LD_INT 0
79603: PPUSH
79604: LD_INT 4
79606: PPUSH
79607: NOP4
79611: PUSH
79612: EMPTY
79613: LIST
79614: LIST
79615: PUSH
79616: NOP4
79620: PPUSH
79621: LD_INT 1
79623: PPUSH
79624: LD_INT 4
79626: PPUSH
79627: NOP4
79631: PUSH
79632: NOP4
79636: PPUSH
79637: LD_INT 1
79639: PPUSH
79640: LD_INT 4
79642: PPUSH
79643: NOP4
79647: PUSH
79648: EMPTY
79649: LIST
79650: LIST
79651: PUSH
79652: NOP4
79656: PPUSH
79657: LD_INT 2
79659: PPUSH
79660: LD_INT 4
79662: PPUSH
79663: NOP4
79667: PUSH
79668: NOP4
79672: PPUSH
79673: LD_INT 2
79675: PPUSH
79676: LD_INT 4
79678: PPUSH
79679: NOP4
79683: PUSH
79684: EMPTY
79685: LIST
79686: LIST
79687: PUSH
79688: NOP4
79692: PPUSH
79693: LD_INT 3
79695: PPUSH
79696: LD_INT 4
79698: PPUSH
79699: NOP4
79703: PUSH
79704: NOP4
79708: PPUSH
79709: LD_INT 3
79711: PPUSH
79712: LD_INT 4
79714: PPUSH
79715: NOP4
79719: PUSH
79720: EMPTY
79721: LIST
79722: LIST
79723: PUSH
79724: NOP4
79728: PPUSH
79729: LD_INT 4
79731: PPUSH
79732: LD_INT 4
79734: PPUSH
79735: NOP4
79739: PUSH
79740: NOP4
79744: PPUSH
79745: LD_INT 4
79747: PPUSH
79748: LD_INT 4
79750: PPUSH
79751: NOP4
79755: PUSH
79756: EMPTY
79757: LIST
79758: LIST
79759: PUSH
79760: NOP4
79764: PPUSH
79765: LD_INT 5
79767: PPUSH
79768: LD_INT 4
79770: PPUSH
79771: NOP4
79775: PUSH
79776: NOP4
79780: PPUSH
79781: LD_INT 5
79783: PPUSH
79784: LD_INT 4
79786: PPUSH
79787: NOP4
79791: PUSH
79792: EMPTY
79793: LIST
79794: LIST
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: LIST
79800: LIST
79801: LIST
79802: LIST
79803: ST_TO_ADDR
// for i = tmp downto 1 do
79804: NOP4
79808: PUSH
79809: DOUBLE
79810: NOP4
79814: INC
79815: ST_TO_ADDR
79816: LD_INT 1
79818: PUSH
79819: FOR_DOWNTO
79820: IFFALSE 79921
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
79822: NOP4
79826: PUSH
79827: NOP4
79831: ARRAY
79832: PUSH
79833: LD_INT 1
79835: ARRAY
79836: PPUSH
79837: NOP4
79841: PUSH
79842: NOP4
79846: ARRAY
79847: PUSH
79848: LD_INT 2
79850: ARRAY
79851: PPUSH
79852: NOP4
79856: NOT
79857: PUSH
79858: NOP4
79862: PUSH
79863: NOP4
79867: ARRAY
79868: PUSH
79869: LD_INT 1
79871: ARRAY
79872: PPUSH
79873: NOP4
79877: PUSH
79878: NOP4
79882: ARRAY
79883: PUSH
79884: LD_INT 2
79886: ARRAY
79887: PPUSH
79888: NOP4
79892: PUSH
79893: LD_INT 0
79895: NONEQUAL
79896: OR
79897: IFFALSE 79919
// tmp := Delete ( tmp , i ) ;
79899: NOP4
79903: PUSH
79904: NOP4
79908: PPUSH
79909: NOP4
79913: PPUSH
79914: NOP4
79918: ST_TO_ADDR
79919: GO 79819
79921: POP
79922: POP
// j := GetClosestHex ( unit , tmp ) ;
79923: NOP4
79927: PUSH
79928: NOP4
79932: PPUSH
79933: NOP4
79937: PPUSH
79938: NOP4
79942: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
79943: NOP4
79947: PPUSH
79948: NOP4
79952: PUSH
79953: LD_INT 1
79955: ARRAY
79956: PPUSH
79957: NOP4
79961: PUSH
79962: LD_INT 2
79964: ARRAY
79965: PPUSH
79966: NOP4
// end ;
79970: LD_VAR 0 3
79974: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
79975: LD_INT 0
79977: PPUSH
79978: PPUSH
79979: PPUSH
// uc_side = 0 ;
79980: LD_ADDR_OWVAR 20
79984: PUSH
79985: LD_INT 0
79987: ST_TO_ADDR
// uc_nation = 0 ;
79988: LD_ADDR_OWVAR 21
79992: PUSH
79993: LD_INT 0
79995: ST_TO_ADDR
// InitHc ;
79996: NOP4
// InitVc ;
80000: NOP4
// if mastodonts then
80004: NOP4
80008: IFFALSE 80075
// for i = 1 to mastodonts do
80010: NOP4
80014: PUSH
80015: DOUBLE
80016: LD_INT 1
80018: DEC
80019: ST_TO_ADDR
80020: NOP4
80024: PUSH
80025: FOR_TO
80026: IFFALSE 80073
// begin vc_chassis := 31 ;
80028: LD_ADDR_OWVAR 37
80032: PUSH
80033: LD_INT 31
80035: ST_TO_ADDR
// vc_control := control_rider ;
80036: LD_ADDR_OWVAR 38
80040: PUSH
80041: LD_INT 4
80043: ST_TO_ADDR
// animal := CreateVehicle ;
80044: NOP4
80048: PUSH
80049: NOP4
80053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80054: NOP4
80058: PPUSH
80059: NOP4
80063: PPUSH
80064: LD_INT 0
80066: PPUSH
80067: NOP4
// end ;
80071: GO 80025
80073: POP
80074: POP
// if horses then
80075: NOP4
80079: IFFALSE 80146
// for i = 1 to horses do
80081: NOP4
80085: PUSH
80086: DOUBLE
80087: LD_INT 1
80089: DEC
80090: ST_TO_ADDR
80091: NOP4
80095: PUSH
80096: FOR_TO
80097: IFFALSE 80144
// begin hc_class := 21 ;
80099: LD_ADDR_OWVAR 28
80103: PUSH
80104: LD_INT 21
80106: ST_TO_ADDR
// hc_gallery :=  ;
80107: LD_ADDR_OWVAR 33
80111: PUSH
80112: LD_STRING 
80114: ST_TO_ADDR
// animal := CreateHuman ;
80115: NOP4
80119: PUSH
80120: NOP4
80124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80125: NOP4
80129: PPUSH
80130: NOP4
80134: PPUSH
80135: LD_INT 0
80137: PPUSH
80138: NOP4
// end ;
80142: GO 80096
80144: POP
80145: POP
// if birds then
80146: NOP4
80150: IFFALSE 80217
// for i = 1 to birds do
80152: NOP4
80156: PUSH
80157: DOUBLE
80158: LD_INT 1
80160: DEC
80161: ST_TO_ADDR
80162: NOP4
80166: PUSH
80167: FOR_TO
80168: IFFALSE 80215
// begin hc_class = 18 ;
80170: LD_ADDR_OWVAR 28
80174: PUSH
80175: LD_INT 18
80177: ST_TO_ADDR
// hc_gallery =  ;
80178: LD_ADDR_OWVAR 33
80182: PUSH
80183: LD_STRING 
80185: ST_TO_ADDR
// animal := CreateHuman ;
80186: NOP4
80190: PUSH
80191: NOP4
80195: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80196: NOP4
80200: PPUSH
80201: NOP4
80205: PPUSH
80206: LD_INT 0
80208: PPUSH
80209: NOP4
// end ;
80213: GO 80167
80215: POP
80216: POP
// if tigers then
80217: NOP4
80221: IFFALSE 80305
// for i = 1 to tigers do
80223: NOP4
80227: PUSH
80228: DOUBLE
80229: LD_INT 1
80231: DEC
80232: ST_TO_ADDR
80233: NOP4
80237: PUSH
80238: FOR_TO
80239: IFFALSE 80303
// begin hc_class = class_tiger ;
80241: LD_ADDR_OWVAR 28
80245: PUSH
80246: LD_INT 14
80248: ST_TO_ADDR
// hc_gallery =  ;
80249: LD_ADDR_OWVAR 33
80253: PUSH
80254: LD_STRING 
80256: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
80257: LD_ADDR_OWVAR 35
80261: PUSH
80262: LD_INT 7
80264: NEG
80265: PPUSH
80266: LD_INT 7
80268: PPUSH
80269: NOP4
80273: ST_TO_ADDR
// animal := CreateHuman ;
80274: NOP4
80278: PUSH
80279: NOP4
80283: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80284: NOP4
80288: PPUSH
80289: NOP4
80293: PPUSH
80294: LD_INT 0
80296: PPUSH
80297: NOP4
// end ;
80301: GO 80238
80303: POP
80304: POP
// if apemans then
80305: NOP4
80309: IFFALSE 80432
// for i = 1 to apemans do
80311: NOP4
80315: PUSH
80316: DOUBLE
80317: LD_INT 1
80319: DEC
80320: ST_TO_ADDR
80321: NOP4
80325: PUSH
80326: FOR_TO
80327: IFFALSE 80430
// begin hc_class = class_apeman ;
80329: LD_ADDR_OWVAR 28
80333: PUSH
80334: LD_INT 12
80336: ST_TO_ADDR
// hc_gallery =  ;
80337: LD_ADDR_OWVAR 33
80341: PUSH
80342: LD_STRING 
80344: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
80345: LD_ADDR_OWVAR 35
80349: PUSH
80350: LD_INT 5
80352: NEG
80353: PPUSH
80354: LD_INT 5
80356: PPUSH
80357: NOP4
80361: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
80362: LD_ADDR_OWVAR 31
80366: PUSH
80367: LD_INT 1
80369: PPUSH
80370: LD_INT 3
80372: PPUSH
80373: NOP4
80377: PUSH
80378: LD_INT 1
80380: PPUSH
80381: LD_INT 3
80383: PPUSH
80384: NOP4
80388: PUSH
80389: LD_INT 0
80391: PUSH
80392: LD_INT 0
80394: PUSH
80395: EMPTY
80396: LIST
80397: LIST
80398: LIST
80399: LIST
80400: ST_TO_ADDR
// animal := CreateHuman ;
80401: NOP4
80405: PUSH
80406: NOP4
80410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80411: NOP4
80415: PPUSH
80416: NOP4
80420: PPUSH
80421: LD_INT 0
80423: PPUSH
80424: NOP4
// end ;
80428: GO 80326
80430: POP
80431: POP
// if enchidnas then
80432: NOP4
80436: IFFALSE 80503
// for i = 1 to enchidnas do
80438: NOP4
80442: PUSH
80443: DOUBLE
80444: LD_INT 1
80446: DEC
80447: ST_TO_ADDR
80448: NOP4
80452: PUSH
80453: FOR_TO
80454: IFFALSE 80501
// begin hc_class = 13 ;
80456: LD_ADDR_OWVAR 28
80460: PUSH
80461: LD_INT 13
80463: ST_TO_ADDR
// hc_gallery =  ;
80464: LD_ADDR_OWVAR 33
80468: PUSH
80469: LD_STRING 
80471: ST_TO_ADDR
// animal := CreateHuman ;
80472: NOP4
80476: PUSH
80477: NOP4
80481: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80482: NOP4
80486: PPUSH
80487: NOP4
80491: PPUSH
80492: LD_INT 0
80494: PPUSH
80495: NOP4
// end ;
80499: GO 80453
80501: POP
80502: POP
// if fishes then
80503: NOP4
80507: IFFALSE 80574
// for i = 1 to fishes do
80509: NOP4
80513: PUSH
80514: DOUBLE
80515: LD_INT 1
80517: DEC
80518: ST_TO_ADDR
80519: NOP4
80523: PUSH
80524: FOR_TO
80525: IFFALSE 80572
// begin hc_class = 20 ;
80527: LD_ADDR_OWVAR 28
80531: PUSH
80532: LD_INT 20
80534: ST_TO_ADDR
// hc_gallery =  ;
80535: LD_ADDR_OWVAR 33
80539: PUSH
80540: LD_STRING 
80542: ST_TO_ADDR
// animal := CreateHuman ;
80543: NOP4
80547: PUSH
80548: NOP4
80552: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
80553: NOP4
80557: PPUSH
80558: NOP4
80562: PPUSH
80563: LD_INT 0
80565: PPUSH
80566: NOP4
// end ;
80570: GO 80524
80572: POP
80573: POP
// end ;
80574: LD_VAR 0 10
80578: RET
// export function WantHeal ( sci , unit ) ; begin
80579: LD_INT 0
80581: PPUSH
// if GetTaskList ( sci ) > 0 then
80582: NOP4
80586: PPUSH
80587: NOP4
80591: PUSH
80592: LD_INT 0
80594: GREATER
80595: IFFALSE 80665
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
80597: NOP4
80601: PPUSH
80602: NOP4
80606: PUSH
80607: LD_INT 1
80609: ARRAY
80610: PUSH
80611: LD_INT 1
80613: ARRAY
80614: PUSH
80615: LD_STRING l
80617: EQUAL
80618: PUSH
80619: NOP4
80623: PPUSH
80624: NOP4
80628: PUSH
80629: LD_INT 1
80631: ARRAY
80632: PUSH
80633: LD_INT 4
80635: ARRAY
80636: PUSH
80637: NOP4
80641: EQUAL
80642: AND
80643: IFFALSE 80655
// result := true else
80645: NOP4
80649: PUSH
80650: LD_INT 1
80652: ST_TO_ADDR
80653: GO 80663
// result := false ;
80655: NOP4
80659: PUSH
80660: LD_INT 0
80662: ST_TO_ADDR
// end else
80663: GO 80673
// result := false ;
80665: NOP4
80669: PUSH
80670: LD_INT 0
80672: ST_TO_ADDR
// end ;
80673: LD_VAR 0 3
80677: RET
// export function HealTarget ( sci ) ; begin
80678: LD_INT 0
80680: PPUSH
// if not sci then
80681: NOP4
80685: NOT
80686: IFFALSE 80690
// exit ;
80688: GO 80755
// result := 0 ;
80690: NOP4
80694: PUSH
80695: LD_INT 0
80697: ST_TO_ADDR
// if GetTaskList ( sci ) then
80698: NOP4
80702: PPUSH
80703: NOP4
80707: IFFALSE 80755
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
80709: NOP4
80713: PPUSH
80714: NOP4
80718: PUSH
80719: LD_INT 1
80721: ARRAY
80722: PUSH
80723: LD_INT 1
80725: ARRAY
80726: PUSH
80727: LD_STRING l
80729: EQUAL
80730: IFFALSE 80755
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
80732: NOP4
80736: PUSH
80737: NOP4
80741: PPUSH
80742: NOP4
80746: PUSH
80747: LD_INT 1
80749: ARRAY
80750: PUSH
80751: LD_INT 4
80753: ARRAY
80754: ST_TO_ADDR
// end ;
80755: LD_VAR 0 2
80759: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
80760: LD_INT 0
80762: PPUSH
80763: PPUSH
80764: PPUSH
80765: PPUSH
// if not base_units then
80766: NOP4
80770: NOT
80771: IFFALSE 80775
// exit ;
80773: GO 80862
// result := false ;
80775: NOP4
80779: PUSH
80780: LD_INT 0
80782: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
80783: NOP4
80787: PUSH
80788: NOP4
80792: PPUSH
80793: LD_INT 21
80795: PUSH
80796: LD_INT 3
80798: PUSH
80799: EMPTY
80800: LIST
80801: LIST
80802: PPUSH
80803: NOP4
80807: ST_TO_ADDR
// if not tmp then
80808: NOP4
80812: NOT
80813: IFFALSE 80817
// exit ;
80815: GO 80862
// for i in tmp do
80817: NOP4
80821: PUSH
80822: NOP4
80826: PUSH
80827: FOR_IN
80828: IFFALSE 80860
// begin result := EnemyInRange ( i , 22 ) ;
80830: NOP4
80834: PUSH
80835: NOP4
80839: PPUSH
80840: LD_INT 22
80842: PPUSH
80843: NOP4
80847: ST_TO_ADDR
// if result then
80848: NOP4
80852: IFFALSE 80858
// exit ;
80854: POP
80855: POP
80856: GO 80862
// end ;
80858: GO 80827
80860: POP
80861: POP
// end ;
80862: LD_VAR 0 2
80866: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
80867: LD_INT 0
80869: PPUSH
80870: PPUSH
// if not units then
80871: NOP4
80875: NOT
80876: IFFALSE 80880
// exit ;
80878: GO 80950
// result := [ ] ;
80880: NOP4
80884: PUSH
80885: EMPTY
80886: ST_TO_ADDR
// for i in units do
80887: NOP4
80891: PUSH
80892: NOP4
80896: PUSH
80897: FOR_IN
80898: IFFALSE 80948
// if GetTag ( i ) = tag then
80900: NOP4
80904: PPUSH
80905: NOP4
80909: PUSH
80910: NOP4
80914: EQUAL
80915: IFFALSE 80946
// result := Insert ( result , result + 1 , i ) ;
80917: NOP4
80921: PUSH
80922: NOP4
80926: PPUSH
80927: NOP4
80931: PUSH
80932: LD_INT 1
80934: PLUS
80935: PPUSH
80936: NOP4
80940: PPUSH
80941: NOP4
80945: ST_TO_ADDR
80946: GO 80897
80948: POP
80949: POP
// end ;
80950: LD_VAR 0 3
80954: RET
// export function IsDriver ( un ) ; begin
80955: LD_INT 0
80957: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
80958: NOP4
80962: PUSH
80963: NOP4
80967: PUSH
80968: LD_INT 55
80970: PUSH
80971: EMPTY
80972: LIST
80973: PPUSH
80974: NOP4
80978: IN
80979: ST_TO_ADDR
// end ;
80980: LD_VAR 0 2
80984: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
80985: LD_INT 0
80987: PPUSH
80988: PPUSH
// list := [ ] ;
80989: NOP4
80993: PUSH
80994: EMPTY
80995: ST_TO_ADDR
// case d of 0 :
80996: NOP4
81000: PUSH
81001: LD_INT 0
81003: DOUBLE
81004: EQUAL
81005: IFTRUE 81009
81007: GO 81142
81009: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
81010: NOP4
81014: PUSH
81015: NOP4
81019: PUSH
81020: LD_INT 4
81022: MINUS
81023: PUSH
81024: NOP4
81028: PUSH
81029: LD_INT 4
81031: MINUS
81032: PUSH
81033: LD_INT 2
81035: PUSH
81036: EMPTY
81037: LIST
81038: LIST
81039: LIST
81040: PUSH
81041: NOP4
81045: PUSH
81046: LD_INT 3
81048: MINUS
81049: PUSH
81050: NOP4
81054: PUSH
81055: LD_INT 1
81057: PUSH
81058: EMPTY
81059: LIST
81060: LIST
81061: LIST
81062: PUSH
81063: NOP4
81067: PUSH
81068: LD_INT 4
81070: PLUS
81071: PUSH
81072: NOP4
81076: PUSH
81077: LD_INT 4
81079: PUSH
81080: EMPTY
81081: LIST
81082: LIST
81083: LIST
81084: PUSH
81085: NOP4
81089: PUSH
81090: LD_INT 3
81092: PLUS
81093: PUSH
81094: NOP4
81098: PUSH
81099: LD_INT 3
81101: PLUS
81102: PUSH
81103: LD_INT 5
81105: PUSH
81106: EMPTY
81107: LIST
81108: LIST
81109: LIST
81110: PUSH
81111: NOP4
81115: PUSH
81116: NOP4
81120: PUSH
81121: LD_INT 4
81123: PLUS
81124: PUSH
81125: LD_INT 0
81127: PUSH
81128: EMPTY
81129: LIST
81130: LIST
81131: LIST
81132: PUSH
81133: EMPTY
81134: LIST
81135: LIST
81136: LIST
81137: LIST
81138: LIST
81139: ST_TO_ADDR
// end ; 1 :
81140: GO 81840
81142: LD_INT 1
81144: DOUBLE
81145: EQUAL
81146: IFTRUE 81150
81148: GO 81283
81150: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
81151: NOP4
81155: PUSH
81156: NOP4
81160: PUSH
81161: NOP4
81165: PUSH
81166: LD_INT 4
81168: MINUS
81169: PUSH
81170: LD_INT 3
81172: PUSH
81173: EMPTY
81174: LIST
81175: LIST
81176: LIST
81177: PUSH
81178: NOP4
81182: PUSH
81183: LD_INT 3
81185: MINUS
81186: PUSH
81187: NOP4
81191: PUSH
81192: LD_INT 3
81194: MINUS
81195: PUSH
81196: LD_INT 2
81198: PUSH
81199: EMPTY
81200: LIST
81201: LIST
81202: LIST
81203: PUSH
81204: NOP4
81208: PUSH
81209: LD_INT 4
81211: MINUS
81212: PUSH
81213: NOP4
81217: PUSH
81218: LD_INT 1
81220: PUSH
81221: EMPTY
81222: LIST
81223: LIST
81224: LIST
81225: PUSH
81226: NOP4
81230: PUSH
81231: NOP4
81235: PUSH
81236: LD_INT 3
81238: PLUS
81239: PUSH
81240: LD_INT 0
81242: PUSH
81243: EMPTY
81244: LIST
81245: LIST
81246: LIST
81247: PUSH
81248: NOP4
81252: PUSH
81253: LD_INT 4
81255: PLUS
81256: PUSH
81257: NOP4
81261: PUSH
81262: LD_INT 4
81264: PLUS
81265: PUSH
81266: LD_INT 5
81268: PUSH
81269: EMPTY
81270: LIST
81271: LIST
81272: LIST
81273: PUSH
81274: EMPTY
81275: LIST
81276: LIST
81277: LIST
81278: LIST
81279: LIST
81280: ST_TO_ADDR
// end ; 2 :
81281: GO 81840
81283: LD_INT 2
81285: DOUBLE
81286: EQUAL
81287: IFTRUE 81291
81289: GO 81420
81291: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
81292: NOP4
81296: PUSH
81297: NOP4
81301: PUSH
81302: NOP4
81306: PUSH
81307: LD_INT 3
81309: MINUS
81310: PUSH
81311: LD_INT 3
81313: PUSH
81314: EMPTY
81315: LIST
81316: LIST
81317: LIST
81318: PUSH
81319: NOP4
81323: PUSH
81324: LD_INT 4
81326: PLUS
81327: PUSH
81328: NOP4
81332: PUSH
81333: LD_INT 4
81335: PUSH
81336: EMPTY
81337: LIST
81338: LIST
81339: LIST
81340: PUSH
81341: NOP4
81345: PUSH
81346: NOP4
81350: PUSH
81351: LD_INT 4
81353: PLUS
81354: PUSH
81355: LD_INT 0
81357: PUSH
81358: EMPTY
81359: LIST
81360: LIST
81361: LIST
81362: PUSH
81363: NOP4
81367: PUSH
81368: LD_INT 3
81370: MINUS
81371: PUSH
81372: NOP4
81376: PUSH
81377: LD_INT 1
81379: PUSH
81380: EMPTY
81381: LIST
81382: LIST
81383: LIST
81384: PUSH
81385: NOP4
81389: PUSH
81390: LD_INT 4
81392: MINUS
81393: PUSH
81394: NOP4
81398: PUSH
81399: LD_INT 4
81401: MINUS
81402: PUSH
81403: LD_INT 2
81405: PUSH
81406: EMPTY
81407: LIST
81408: LIST
81409: LIST
81410: PUSH
81411: EMPTY
81412: LIST
81413: LIST
81414: LIST
81415: LIST
81416: LIST
81417: ST_TO_ADDR
// end ; 3 :
81418: GO 81840
81420: LD_INT 3
81422: DOUBLE
81423: EQUAL
81424: IFTRUE 81428
81426: GO 81561
81428: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
81429: NOP4
81433: PUSH
81434: NOP4
81438: PUSH
81439: LD_INT 3
81441: PLUS
81442: PUSH
81443: NOP4
81447: PUSH
81448: LD_INT 4
81450: PUSH
81451: EMPTY
81452: LIST
81453: LIST
81454: LIST
81455: PUSH
81456: NOP4
81460: PUSH
81461: LD_INT 4
81463: PLUS
81464: PUSH
81465: NOP4
81469: PUSH
81470: LD_INT 4
81472: PLUS
81473: PUSH
81474: LD_INT 5
81476: PUSH
81477: EMPTY
81478: LIST
81479: LIST
81480: LIST
81481: PUSH
81482: NOP4
81486: PUSH
81487: LD_INT 4
81489: MINUS
81490: PUSH
81491: NOP4
81495: PUSH
81496: LD_INT 1
81498: PUSH
81499: EMPTY
81500: LIST
81501: LIST
81502: LIST
81503: PUSH
81504: NOP4
81508: PUSH
81509: NOP4
81513: PUSH
81514: LD_INT 4
81516: MINUS
81517: PUSH
81518: LD_INT 3
81520: PUSH
81521: EMPTY
81522: LIST
81523: LIST
81524: LIST
81525: PUSH
81526: NOP4
81530: PUSH
81531: LD_INT 3
81533: MINUS
81534: PUSH
81535: NOP4
81539: PUSH
81540: LD_INT 3
81542: MINUS
81543: PUSH
81544: LD_INT 2
81546: PUSH
81547: EMPTY
81548: LIST
81549: LIST
81550: LIST
81551: PUSH
81552: EMPTY
81553: LIST
81554: LIST
81555: LIST
81556: LIST
81557: LIST
81558: ST_TO_ADDR
// end ; 4 :
81559: GO 81840
81561: LD_INT 4
81563: DOUBLE
81564: EQUAL
81565: IFTRUE 81569
81567: GO 81702
81569: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
81570: NOP4
81574: PUSH
81575: NOP4
81579: PUSH
81580: NOP4
81584: PUSH
81585: LD_INT 4
81587: PLUS
81588: PUSH
81589: LD_INT 0
81591: PUSH
81592: EMPTY
81593: LIST
81594: LIST
81595: LIST
81596: PUSH
81597: NOP4
81601: PUSH
81602: LD_INT 3
81604: PLUS
81605: PUSH
81606: NOP4
81610: PUSH
81611: LD_INT 3
81613: PLUS
81614: PUSH
81615: LD_INT 5
81617: PUSH
81618: EMPTY
81619: LIST
81620: LIST
81621: LIST
81622: PUSH
81623: NOP4
81627: PUSH
81628: LD_INT 4
81630: PLUS
81631: PUSH
81632: NOP4
81636: PUSH
81637: LD_INT 4
81639: PUSH
81640: EMPTY
81641: LIST
81642: LIST
81643: LIST
81644: PUSH
81645: NOP4
81649: PUSH
81650: NOP4
81654: PUSH
81655: LD_INT 3
81657: MINUS
81658: PUSH
81659: LD_INT 3
81661: PUSH
81662: EMPTY
81663: LIST
81664: LIST
81665: LIST
81666: PUSH
81667: NOP4
81671: PUSH
81672: LD_INT 4
81674: MINUS
81675: PUSH
81676: NOP4
81680: PUSH
81681: LD_INT 4
81683: MINUS
81684: PUSH
81685: LD_INT 2
81687: PUSH
81688: EMPTY
81689: LIST
81690: LIST
81691: LIST
81692: PUSH
81693: EMPTY
81694: LIST
81695: LIST
81696: LIST
81697: LIST
81698: LIST
81699: ST_TO_ADDR
// end ; 5 :
81700: GO 81840
81702: LD_INT 5
81704: DOUBLE
81705: EQUAL
81706: IFTRUE 81710
81708: GO 81839
81710: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
81711: NOP4
81715: PUSH
81716: NOP4
81720: PUSH
81721: LD_INT 4
81723: MINUS
81724: PUSH
81725: NOP4
81729: PUSH
81730: LD_INT 1
81732: PUSH
81733: EMPTY
81734: LIST
81735: LIST
81736: LIST
81737: PUSH
81738: NOP4
81742: PUSH
81743: NOP4
81747: PUSH
81748: LD_INT 4
81750: MINUS
81751: PUSH
81752: LD_INT 3
81754: PUSH
81755: EMPTY
81756: LIST
81757: LIST
81758: LIST
81759: PUSH
81760: NOP4
81764: PUSH
81765: LD_INT 4
81767: PLUS
81768: PUSH
81769: NOP4
81773: PUSH
81774: LD_INT 4
81776: PLUS
81777: PUSH
81778: LD_INT 5
81780: PUSH
81781: EMPTY
81782: LIST
81783: LIST
81784: LIST
81785: PUSH
81786: NOP4
81790: PUSH
81791: LD_INT 3
81793: PLUS
81794: PUSH
81795: NOP4
81799: PUSH
81800: LD_INT 4
81802: PUSH
81803: EMPTY
81804: LIST
81805: LIST
81806: LIST
81807: PUSH
81808: NOP4
81812: PUSH
81813: NOP4
81817: PUSH
81818: LD_INT 3
81820: PLUS
81821: PUSH
81822: LD_INT 0
81824: PUSH
81825: EMPTY
81826: LIST
81827: LIST
81828: LIST
81829: PUSH
81830: EMPTY
81831: LIST
81832: LIST
81833: LIST
81834: LIST
81835: LIST
81836: ST_TO_ADDR
// end ; end ;
81837: GO 81840
81839: POP
// result := list ;
81840: NOP4
81844: PUSH
81845: NOP4
81849: ST_TO_ADDR
// end ;
81850: LD_VAR 0 4
81854: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
81855: LD_INT 0
81857: PPUSH
81858: PPUSH
81859: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
81860: NOP4
81864: NOT
81865: PUSH
81866: NOP4
81870: PUSH
81871: LD_INT 1
81873: PUSH
81874: LD_INT 2
81876: PUSH
81877: LD_INT 3
81879: PUSH
81880: LD_INT 4
81882: PUSH
81883: EMPTY
81884: LIST
81885: LIST
81886: LIST
81887: LIST
81888: IN
81889: NOT
81890: OR
81891: IFFALSE 81895
// exit ;
81893: GO 81987
// tmp := [ ] ;
81895: NOP4
81899: PUSH
81900: EMPTY
81901: ST_TO_ADDR
// for i in units do
81902: NOP4
81906: PUSH
81907: NOP4
81911: PUSH
81912: FOR_IN
81913: IFFALSE 81956
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
81915: NOP4
81919: PUSH
81920: NOP4
81924: PPUSH
81925: NOP4
81929: PUSH
81930: LD_INT 1
81932: PLUS
81933: PPUSH
81934: NOP4
81938: PPUSH
81939: NOP4
81943: PPUSH
81944: NOP4
81948: PPUSH
81949: NOP4
81953: ST_TO_ADDR
81954: GO 81912
81956: POP
81957: POP
// if not tmp then
81958: NOP4
81962: NOT
81963: IFFALSE 81967
// exit ;
81965: GO 81987
// result := SortListByListDesc ( units , tmp ) ;
81967: NOP4
81971: PUSH
81972: NOP4
81976: PPUSH
81977: NOP4
81981: PPUSH
81982: NOP4
81986: ST_TO_ADDR
// end ;
81987: LD_VAR 0 3
81991: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
81992: LD_INT 0
81994: PPUSH
81995: PPUSH
81996: PPUSH
// x := GetX ( building ) ;
81997: NOP4
82001: PUSH
82002: NOP4
82006: PPUSH
82007: NOP4
82011: ST_TO_ADDR
// y := GetY ( building ) ;
82012: NOP4
82016: PUSH
82017: NOP4
82021: PPUSH
82022: NOP4
82026: ST_TO_ADDR
// if GetTaskList ( unit ) then
82027: NOP4
82031: PPUSH
82032: NOP4
82036: IFFALSE 82131
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
82038: LD_STRING e
82040: PUSH
82041: NOP4
82045: PPUSH
82046: NOP4
82050: PUSH
82051: LD_INT 1
82053: ARRAY
82054: PUSH
82055: LD_INT 1
82057: ARRAY
82058: EQUAL
82059: PUSH
82060: NOP4
82064: PUSH
82065: NOP4
82069: PPUSH
82070: NOP4
82074: PUSH
82075: LD_INT 1
82077: ARRAY
82078: PUSH
82079: LD_INT 2
82081: ARRAY
82082: EQUAL
82083: AND
82084: PUSH
82085: NOP4
82089: PUSH
82090: NOP4
82094: PPUSH
82095: NOP4
82099: PUSH
82100: LD_INT 1
82102: ARRAY
82103: PUSH
82104: LD_INT 3
82106: ARRAY
82107: EQUAL
82108: AND
82109: IFFALSE 82121
// result := true else
82111: NOP4
82115: PUSH
82116: LD_INT 1
82118: ST_TO_ADDR
82119: GO 82129
// result := false ;
82121: NOP4
82125: PUSH
82126: LD_INT 0
82128: ST_TO_ADDR
// end else
82129: GO 82139
// result := false ;
82131: NOP4
82135: PUSH
82136: LD_INT 0
82138: ST_TO_ADDR
// end ;
82139: LD_VAR 0 3
82143: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
82144: LD_INT 0
82146: PPUSH
82147: PPUSH
82148: PPUSH
82149: PPUSH
// if not unit or not area then
82150: NOP4
82154: NOT
82155: PUSH
82156: NOP4
82160: NOT
82161: OR
82162: IFFALSE 82166
// exit ;
82164: GO 82330
// tmp := AreaToList ( area , i ) ;
82166: NOP4
82170: PUSH
82171: NOP4
82175: PPUSH
82176: NOP4
82180: PPUSH
82181: NOP4
82185: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
82186: NOP4
82190: PUSH
82191: DOUBLE
82192: LD_INT 1
82194: DEC
82195: ST_TO_ADDR
82196: NOP4
82200: PUSH
82201: LD_INT 1
82203: ARRAY
82204: PUSH
82205: FOR_TO
82206: IFFALSE 82328
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
82208: NOP4
82212: PUSH
82213: NOP4
82217: PUSH
82218: LD_INT 1
82220: ARRAY
82221: PUSH
82222: NOP4
82226: ARRAY
82227: PUSH
82228: NOP4
82232: PUSH
82233: LD_INT 2
82235: ARRAY
82236: PUSH
82237: NOP4
82241: ARRAY
82242: PUSH
82243: EMPTY
82244: LIST
82245: LIST
82246: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
82247: NOP4
82251: PUSH
82252: LD_INT 1
82254: ARRAY
82255: PPUSH
82256: NOP4
82260: PUSH
82261: LD_INT 2
82263: ARRAY
82264: PPUSH
82265: NOP4
82269: PUSH
82270: LD_INT 0
82272: EQUAL
82273: IFFALSE 82326
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
82275: NOP4
82279: PPUSH
82280: NOP4
82284: PUSH
82285: LD_INT 1
82287: ARRAY
82288: PPUSH
82289: NOP4
82293: PUSH
82294: LD_INT 2
82296: ARRAY
82297: PPUSH
82298: NOP4
82302: PPUSH
82303: NOP4
// result := IsPlaced ( unit ) ;
82307: NOP4
82311: PUSH
82312: NOP4
82316: PPUSH
82317: NOP4
82321: ST_TO_ADDR
// exit ;
82322: POP
82323: POP
82324: GO 82330
// end ; end ;
82326: GO 82205
82328: POP
82329: POP
// end ;
82330: LD_VAR 0 4
82334: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
82335: LD_INT 0
82337: PPUSH
82338: PPUSH
82339: PPUSH
// if not side or side > 8 then
82340: NOP4
82344: NOT
82345: PUSH
82346: NOP4
82350: PUSH
82351: LD_INT 8
82353: GREATER
82354: OR
82355: IFFALSE 82359
// exit ;
82357: GO 82546
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
82359: NOP4
82363: PUSH
82364: LD_INT 22
82366: PUSH
82367: NOP4
82371: PUSH
82372: EMPTY
82373: LIST
82374: LIST
82375: PUSH
82376: LD_INT 21
82378: PUSH
82379: LD_INT 3
82381: PUSH
82382: EMPTY
82383: LIST
82384: LIST
82385: PUSH
82386: EMPTY
82387: LIST
82388: LIST
82389: PPUSH
82390: NOP4
82394: ST_TO_ADDR
// if not tmp then
82395: NOP4
82399: NOT
82400: IFFALSE 82404
// exit ;
82402: GO 82546
// enable_addtolog := true ;
82404: LD_ADDR_OWVAR 81
82408: PUSH
82409: LD_INT 1
82411: ST_TO_ADDR
// AddToLog ( [ ) ;
82412: LD_STRING [
82414: PPUSH
82415: NOP4
// for i in tmp do
82419: NOP4
82423: PUSH
82424: NOP4
82428: PUSH
82429: FOR_IN
82430: IFFALSE 82537
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
82432: LD_STRING [
82434: PUSH
82435: NOP4
82439: PPUSH
82440: NOP4
82444: STR
82445: PUSH
82446: LD_STRING , 
82448: STR
82449: PUSH
82450: NOP4
82454: PPUSH
82455: NOP4
82459: STR
82460: PUSH
82461: LD_STRING , 
82463: STR
82464: PUSH
82465: NOP4
82469: PPUSH
82470: NOP4
82474: STR
82475: PUSH
82476: LD_STRING , 
82478: STR
82479: PUSH
82480: NOP4
82484: PPUSH
82485: NOP4
82489: STR
82490: PUSH
82491: LD_STRING , 
82493: STR
82494: PUSH
82495: NOP4
82499: PPUSH
82500: LD_INT 1
82502: PPUSH
82503: NOP4
82507: STR
82508: PUSH
82509: LD_STRING , 
82511: STR
82512: PUSH
82513: NOP4
82517: PPUSH
82518: LD_INT 2
82520: PPUSH
82521: NOP4
82525: STR
82526: PUSH
82527: LD_STRING ],
82529: STR
82530: PPUSH
82531: NOP4
// end ;
82535: GO 82429
82537: POP
82538: POP
// AddToLog ( ]; ) ;
82539: LD_STRING ];
82541: PPUSH
82542: NOP4
// end ;
82546: LD_VAR 0 2
82550: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
82551: LD_INT 0
82553: PPUSH
82554: PPUSH
82555: PPUSH
82556: PPUSH
82557: PPUSH
// if not area or not rate or not max then
82558: NOP4
82562: NOT
82563: PUSH
82564: NOP4
82568: NOT
82569: OR
82570: PUSH
82571: NOP4
82575: NOT
82576: OR
82577: IFFALSE 82581
// exit ;
82579: GO 82773
// while 1 do
82581: LD_INT 1
82583: IFFALSE 82773
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
82585: NOP4
82589: PUSH
82590: NOP4
82594: PPUSH
82595: LD_INT 1
82597: PPUSH
82598: NOP4
82602: PUSH
82603: LD_INT 10
82605: MUL
82606: ST_TO_ADDR
// r := rate / 10 ;
82607: NOP4
82611: PUSH
82612: NOP4
82616: PUSH
82617: LD_INT 10
82619: DIVREAL
82620: ST_TO_ADDR
// time := 1 1$00 ;
82621: NOP4
82625: PUSH
82626: LD_INT 2100
82628: ST_TO_ADDR
// if amount < min then
82629: NOP4
82633: PUSH
82634: NOP4
82638: LESS
82639: IFFALSE 82657
// r := r * 2 else
82641: NOP4
82645: PUSH
82646: NOP4
82650: PUSH
82651: LD_INT 2
82653: MUL
82654: ST_TO_ADDR
82655: GO 82683
// if amount > max then
82657: NOP4
82661: PUSH
82662: NOP4
82666: GREATER
82667: IFFALSE 82683
// r := r / 2 ;
82669: NOP4
82673: PUSH
82674: NOP4
82678: PUSH
82679: LD_INT 2
82681: DIVREAL
82682: ST_TO_ADDR
// time := time / r ;
82683: NOP4
82687: PUSH
82688: NOP4
82692: PUSH
82693: NOP4
82697: DIVREAL
82698: ST_TO_ADDR
// if time < 0 then
82699: NOP4
82703: PUSH
82704: LD_INT 0
82706: LESS
82707: IFFALSE 82724
// time := time * - 1 ;
82709: NOP4
82713: PUSH
82714: NOP4
82718: PUSH
82719: LD_INT 1
82721: NEG
82722: MUL
82723: ST_TO_ADDR
// wait ( time ) ;
82724: NOP4
82728: PPUSH
82729: NOP4
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
82733: LD_INT 35
82735: PPUSH
82736: LD_INT 875
82738: PPUSH
82739: NOP4
82743: PPUSH
82744: NOP4
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
82748: LD_INT 1
82750: PPUSH
82751: LD_INT 5
82753: PPUSH
82754: NOP4
82758: PPUSH
82759: NOP4
82763: PPUSH
82764: LD_INT 1
82766: PPUSH
82767: NOP4
// end ;
82771: GO 82581
// end ;
82773: LD_VAR 0 5
82777: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
82778: LD_INT 0
82780: PPUSH
82781: PPUSH
82782: PPUSH
82783: PPUSH
82784: PPUSH
82785: PPUSH
82786: PPUSH
82787: PPUSH
// if not turrets or not factories then
82788: NOP4
82792: NOT
82793: PUSH
82794: NOP4
82798: NOT
82799: OR
82800: IFFALSE 82804
// exit ;
82802: GO 83111
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
82804: NOP4
82808: PUSH
82809: LD_INT 5
82811: PUSH
82812: LD_INT 6
82814: PUSH
82815: EMPTY
82816: LIST
82817: LIST
82818: PUSH
82819: LD_INT 2
82821: PUSH
82822: LD_INT 4
82824: PUSH
82825: EMPTY
82826: LIST
82827: LIST
82828: PUSH
82829: LD_INT 3
82831: PUSH
82832: LD_INT 5
82834: PUSH
82835: EMPTY
82836: LIST
82837: LIST
82838: PUSH
82839: EMPTY
82840: LIST
82841: LIST
82842: LIST
82843: PUSH
82844: LD_INT 24
82846: PUSH
82847: LD_INT 25
82849: PUSH
82850: EMPTY
82851: LIST
82852: LIST
82853: PUSH
82854: LD_INT 23
82856: PUSH
82857: LD_INT 27
82859: PUSH
82860: EMPTY
82861: LIST
82862: LIST
82863: PUSH
82864: EMPTY
82865: LIST
82866: LIST
82867: PUSH
82868: LD_INT 42
82870: PUSH
82871: LD_INT 43
82873: PUSH
82874: EMPTY
82875: LIST
82876: LIST
82877: PUSH
82878: LD_INT 44
82880: PUSH
82881: LD_INT 46
82883: PUSH
82884: EMPTY
82885: LIST
82886: LIST
82887: PUSH
82888: LD_INT 45
82890: PUSH
82891: LD_INT 47
82893: PUSH
82894: EMPTY
82895: LIST
82896: LIST
82897: PUSH
82898: EMPTY
82899: LIST
82900: LIST
82901: LIST
82902: PUSH
82903: EMPTY
82904: LIST
82905: LIST
82906: LIST
82907: ST_TO_ADDR
// result := [ ] ;
82908: NOP4
82912: PUSH
82913: EMPTY
82914: ST_TO_ADDR
// for i in turrets do
82915: NOP4
82919: PUSH
82920: NOP4
82924: PUSH
82925: FOR_IN
82926: IFFALSE 83109
// begin nat := GetNation ( i ) ;
82928: NOP4
82932: PUSH
82933: NOP4
82937: PPUSH
82938: NOP4
82942: ST_TO_ADDR
// weapon := 0 ;
82943: NOP4
82947: PUSH
82948: LD_INT 0
82950: ST_TO_ADDR
// if not nat then
82951: NOP4
82955: NOT
82956: IFFALSE 82960
// continue ;
82958: GO 82925
// for j in list [ nat ] do
82960: NOP4
82964: PUSH
82965: NOP4
82969: PUSH
82970: NOP4
82974: ARRAY
82975: PUSH
82976: FOR_IN
82977: IFFALSE 83018
// if GetBWeapon ( i ) = j [ 1 ] then
82979: NOP4
82983: PPUSH
82984: NOP4
82988: PUSH
82989: NOP4
82993: PUSH
82994: LD_INT 1
82996: ARRAY
82997: EQUAL
82998: IFFALSE 83016
// begin weapon := j [ 2 ] ;
83000: NOP4
83004: PUSH
83005: NOP4
83009: PUSH
83010: LD_INT 2
83012: ARRAY
83013: ST_TO_ADDR
// break ;
83014: GO 83018
// end ;
83016: GO 82976
83018: POP
83019: POP
// if not weapon then
83020: NOP4
83024: NOT
83025: IFFALSE 83029
// continue ;
83027: GO 82925
// for k in factories do
83029: NOP4
83033: PUSH
83034: NOP4
83038: PUSH
83039: FOR_IN
83040: IFFALSE 83105
// begin weapons := AvailableWeaponList ( k ) ;
83042: NOP4
83046: PUSH
83047: NOP4
83051: PPUSH
83052: NOP4
83056: ST_TO_ADDR
// if not weapons then
83057: NOP4
83061: NOT
83062: IFFALSE 83066
// continue ;
83064: GO 83039
// if weapon in weapons then
83066: NOP4
83070: PUSH
83071: NOP4
83075: IN
83076: IFFALSE 83103
// begin result := [ i , weapon ] ;
83078: NOP4
83082: PUSH
83083: NOP4
83087: PUSH
83088: NOP4
83092: PUSH
83093: EMPTY
83094: LIST
83095: LIST
83096: ST_TO_ADDR
// exit ;
83097: POP
83098: POP
83099: POP
83100: POP
83101: GO 83111
// end ; end ;
83103: GO 83039
83105: POP
83106: POP
// end ;
83107: GO 82925
83109: POP
83110: POP
// end ;
83111: LD_VAR 0 3
83115: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
83116: LD_INT 0
83118: PPUSH
// if not side or side > 8 then
83119: NOP4
83123: NOT
83124: PUSH
83125: NOP4
83129: PUSH
83130: LD_INT 8
83132: GREATER
83133: OR
83134: IFFALSE 83138
// exit ;
83136: GO 83197
// if not range then
83138: NOP4
83142: NOT
83143: IFFALSE 83154
// range := - 12 ;
83145: NOP4
83149: PUSH
83150: LD_INT 12
83152: NEG
83153: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
83154: NOP4
83158: PPUSH
83159: NOP4
83163: PPUSH
83164: NOP4
83168: PPUSH
83169: NOP4
83173: PPUSH
83174: NOP4
// RemoveSeeing ( x , y , side ) ;
83178: NOP4
83182: PPUSH
83183: NOP4
83187: PPUSH
83188: NOP4
83192: PPUSH
83193: NOP4
// end ;
83197: LD_VAR 0 5
83201: RET
// export function Video ( mode ) ; begin
83202: LD_INT 0
83204: PPUSH
// ingame_video = mode ;
83205: LD_ADDR_OWVAR 52
83209: PUSH
83210: NOP4
83214: ST_TO_ADDR
// interface_hidden = mode ;
83215: LD_ADDR_OWVAR 54
83219: PUSH
83220: NOP4
83224: ST_TO_ADDR
// end ;
83225: LD_VAR 0 2
83229: RET
// export function Join ( array , element ) ; begin
83230: LD_INT 0
83232: PPUSH
// result := array ^ element ;
83233: NOP4
83237: PUSH
83238: NOP4
83242: PUSH
83243: NOP4
83247: ADD
83248: ST_TO_ADDR
// end ;
83249: LD_VAR 0 3
83253: RET
// export function JoinUnion ( array , element ) ; begin
83254: LD_INT 0
83256: PPUSH
// result := array union element ;
83257: NOP4
83261: PUSH
83262: NOP4
83266: PUSH
83267: NOP4
83271: UNION
83272: ST_TO_ADDR
// end ;
83273: LD_VAR 0 3
83277: RET
// export function GetBehemoths ( side ) ; begin
83278: LD_INT 0
83280: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
83281: NOP4
83285: PUSH
83286: LD_INT 22
83288: PUSH
83289: NOP4
83293: PUSH
83294: EMPTY
83295: LIST
83296: LIST
83297: PUSH
83298: LD_INT 31
83300: PUSH
83301: LD_INT 25
83303: PUSH
83304: EMPTY
83305: LIST
83306: LIST
83307: PUSH
83308: EMPTY
83309: LIST
83310: LIST
83311: PPUSH
83312: NOP4
83316: ST_TO_ADDR
// end ;
83317: LD_VAR 0 2
83321: RET
// export function Shuffle ( array ) ; var i , index ; begin
83322: LD_INT 0
83324: PPUSH
83325: PPUSH
83326: PPUSH
// result := [ ] ;
83327: NOP4
83331: PUSH
83332: EMPTY
83333: ST_TO_ADDR
// if not array then
83334: NOP4
83338: NOT
83339: IFFALSE 83343
// exit ;
83341: GO 83442
// Randomize ;
83343: NOP4
// for i = array downto 1 do
83347: NOP4
83351: PUSH
83352: DOUBLE
83353: NOP4
83357: INC
83358: ST_TO_ADDR
83359: LD_INT 1
83361: PUSH
83362: FOR_DOWNTO
83363: IFFALSE 83440
// begin index := rand ( 1 , array ) ;
83365: NOP4
83369: PUSH
83370: LD_INT 1
83372: PPUSH
83373: NOP4
83377: PPUSH
83378: NOP4
83382: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
83383: NOP4
83387: PUSH
83388: NOP4
83392: PPUSH
83393: NOP4
83397: PUSH
83398: LD_INT 1
83400: PLUS
83401: PPUSH
83402: NOP4
83406: PUSH
83407: NOP4
83411: ARRAY
83412: PPUSH
83413: NOP4
83417: ST_TO_ADDR
// array := Delete ( array , index ) ;
83418: NOP4
83422: PUSH
83423: NOP4
83427: PPUSH
83428: NOP4
83432: PPUSH
83433: NOP4
83437: ST_TO_ADDR
// end ;
83438: GO 83362
83440: POP
83441: POP
// end ;
83442: LD_VAR 0 2
83446: RET
// export function GetBaseMaterials ( base ) ; begin
83447: LD_INT 0
83449: PPUSH
// result := [ 0 , 0 , 0 ] ;
83450: NOP4
83454: PUSH
83455: LD_INT 0
83457: PUSH
83458: LD_INT 0
83460: PUSH
83461: LD_INT 0
83463: PUSH
83464: EMPTY
83465: LIST
83466: LIST
83467: LIST
83468: ST_TO_ADDR
// if not base then
83469: NOP4
83473: NOT
83474: IFFALSE 83478
// exit ;
83476: GO 83527
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
83478: NOP4
83482: PUSH
83483: NOP4
83487: PPUSH
83488: LD_INT 1
83490: PPUSH
83491: NOP4
83495: PUSH
83496: NOP4
83500: PPUSH
83501: LD_INT 2
83503: PPUSH
83504: NOP4
83508: PUSH
83509: NOP4
83513: PPUSH
83514: LD_INT 3
83516: PPUSH
83517: NOP4
83521: PUSH
83522: EMPTY
83523: LIST
83524: LIST
83525: LIST
83526: ST_TO_ADDR
// end ; end_of_file
83527: LD_VAR 0 2
83531: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
83532: GO 83534
83534: DISABLE
// begin ru_radar := 98 ;
83535: NOP4
83539: PUSH
83540: LD_INT 98
83542: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
83543: NOP4
83547: PUSH
83548: LD_INT 89
83550: ST_TO_ADDR
// us_hack := 99 ;
83551: NOP4
83555: PUSH
83556: LD_INT 99
83558: ST_TO_ADDR
// us_artillery := 97 ;
83559: NOP4
83563: PUSH
83564: LD_INT 97
83566: ST_TO_ADDR
// ar_bio_bomb := 91 ;
83567: NOP4
83571: PUSH
83572: LD_INT 91
83574: ST_TO_ADDR
// tech_Artillery := 80 ;
83575: NOP4
83579: PUSH
83580: LD_INT 80
83582: ST_TO_ADDR
// tech_RadMat := 81 ;
83583: NOP4
83587: PUSH
83588: LD_INT 81
83590: ST_TO_ADDR
// tech_BasicTools := 82 ;
83591: NOP4
83595: PUSH
83596: LD_INT 82
83598: ST_TO_ADDR
// tech_Cargo := 83 ;
83599: NOP4
83603: PUSH
83604: LD_INT 83
83606: ST_TO_ADDR
// tech_Track := 84 ;
83607: NOP4
83611: PUSH
83612: LD_INT 84
83614: ST_TO_ADDR
// tech_Crane := 85 ;
83615: NOP4
83619: PUSH
83620: LD_INT 85
83622: ST_TO_ADDR
// tech_Bulldozer := 86 ;
83623: NOP4
83627: PUSH
83628: LD_INT 86
83630: ST_TO_ADDR
// tech_Hovercraft := 87 ;
83631: NOP4
83635: PUSH
83636: LD_INT 87
83638: ST_TO_ADDR
// end ; end_of_file end_of_file
83639: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
83640: GO 83642
83642: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
83643: LD_STRING initStreamRollete();
83645: PPUSH
83646: NOP4
// InitStreamMode ;
83650: NOP4
// DefineStreamItems ( ) ;
83654: NOP4
// end ;
83658: END
// function InitStreamMode ; begin
83659: LD_INT 0
83661: PPUSH
// streamModeActive := false ;
83662: NOP4
83666: PUSH
83667: LD_INT 0
83669: ST_TO_ADDR
// normalCounter := 36 ;
83670: NOP4
83674: PUSH
83675: LD_INT 36
83677: ST_TO_ADDR
// hardcoreCounter := 16 ;
83678: NOP4
83682: PUSH
83683: LD_INT 16
83685: ST_TO_ADDR
// sRocket := false ;
83686: NOP4
83690: PUSH
83691: LD_INT 0
83693: ST_TO_ADDR
// sSpeed := false ;
83694: NOP4
83698: PUSH
83699: LD_INT 0
83701: ST_TO_ADDR
// sEngine := false ;
83702: NOP4
83706: PUSH
83707: LD_INT 0
83709: ST_TO_ADDR
// sSpec := false ;
83710: NOP4
83714: PUSH
83715: LD_INT 0
83717: ST_TO_ADDR
// sLevel := false ;
83718: NOP4
83722: PUSH
83723: LD_INT 0
83725: ST_TO_ADDR
// sArmoury := false ;
83726: NOP4
83730: PUSH
83731: LD_INT 0
83733: ST_TO_ADDR
// sRadar := false ;
83734: NOP4
83738: PUSH
83739: LD_INT 0
83741: ST_TO_ADDR
// sBunker := false ;
83742: NOP4
83746: PUSH
83747: LD_INT 0
83749: ST_TO_ADDR
// sHack := false ;
83750: NOP4
83754: PUSH
83755: LD_INT 0
83757: ST_TO_ADDR
// sFire := false ;
83758: NOP4
83762: PUSH
83763: LD_INT 0
83765: ST_TO_ADDR
// sRefresh := false ;
83766: NOP4
83770: PUSH
83771: LD_INT 0
83773: ST_TO_ADDR
// sExp := false ;
83774: NOP4
83778: PUSH
83779: LD_INT 0
83781: ST_TO_ADDR
// sDepot := false ;
83782: NOP4
83786: PUSH
83787: LD_INT 0
83789: ST_TO_ADDR
// sFlag := false ;
83790: NOP4
83794: PUSH
83795: LD_INT 0
83797: ST_TO_ADDR
// sKamikadze := false ;
83798: NOP4
83802: PUSH
83803: LD_INT 0
83805: ST_TO_ADDR
// sTroll := false ;
83806: NOP4
83810: PUSH
83811: LD_INT 0
83813: ST_TO_ADDR
// sSlow := false ;
83814: NOP4
83818: PUSH
83819: LD_INT 0
83821: ST_TO_ADDR
// sLack := false ;
83822: NOP4
83826: PUSH
83827: LD_INT 0
83829: ST_TO_ADDR
// sTank := false ;
83830: NOP4
83834: PUSH
83835: LD_INT 0
83837: ST_TO_ADDR
// sRemote := false ;
83838: NOP4
83842: PUSH
83843: LD_INT 0
83845: ST_TO_ADDR
// sPowell := false ;
83846: NOP4
83850: PUSH
83851: LD_INT 0
83853: ST_TO_ADDR
// sTeleport := false ;
83854: NOP4
83858: PUSH
83859: LD_INT 0
83861: ST_TO_ADDR
// sOilTower := false ;
83862: NOP4
83866: PUSH
83867: LD_INT 0
83869: ST_TO_ADDR
// sShovel := false ;
83870: NOP4
83874: PUSH
83875: LD_INT 0
83877: ST_TO_ADDR
// sSheik := false ;
83878: NOP4
83882: PUSH
83883: LD_INT 0
83885: ST_TO_ADDR
// sEarthquake := false ;
83886: NOP4
83890: PUSH
83891: LD_INT 0
83893: ST_TO_ADDR
// sAI := false ;
83894: NOP4
83898: PUSH
83899: LD_INT 0
83901: ST_TO_ADDR
// sCargo := false ;
83902: NOP4
83906: PUSH
83907: LD_INT 0
83909: ST_TO_ADDR
// sDLaser := false ;
83910: NOP4
83914: PUSH
83915: LD_INT 0
83917: ST_TO_ADDR
// sExchange := false ;
83918: NOP4
83922: PUSH
83923: LD_INT 0
83925: ST_TO_ADDR
// sFac := false ;
83926: NOP4
83930: PUSH
83931: LD_INT 0
83933: ST_TO_ADDR
// sPower := false ;
83934: NOP4
83938: PUSH
83939: LD_INT 0
83941: ST_TO_ADDR
// sRandom := false ;
83942: NOP4
83946: PUSH
83947: LD_INT 0
83949: ST_TO_ADDR
// sShield := false ;
83950: NOP4
83954: PUSH
83955: LD_INT 0
83957: ST_TO_ADDR
// sTime := false ;
83958: NOP4
83962: PUSH
83963: LD_INT 0
83965: ST_TO_ADDR
// sTools := false ;
83966: NOP4
83970: PUSH
83971: LD_INT 0
83973: ST_TO_ADDR
// sSold := false ;
83974: NOP4
83978: PUSH
83979: LD_INT 0
83981: ST_TO_ADDR
// sDiff := false ;
83982: NOP4
83986: PUSH
83987: LD_INT 0
83989: ST_TO_ADDR
// sFog := false ;
83990: NOP4
83994: PUSH
83995: LD_INT 0
83997: ST_TO_ADDR
// sReset := false ;
83998: NOP4
84002: PUSH
84003: LD_INT 0
84005: ST_TO_ADDR
// sSun := false ;
84006: NOP4
84010: PUSH
84011: LD_INT 0
84013: ST_TO_ADDR
// sTiger := false ;
84014: NOP4
84018: PUSH
84019: LD_INT 0
84021: ST_TO_ADDR
// sBomb := false ;
84022: NOP4
84026: PUSH
84027: LD_INT 0
84029: ST_TO_ADDR
// sWound := false ;
84030: NOP4
84034: PUSH
84035: LD_INT 0
84037: ST_TO_ADDR
// sBetray := false ;
84038: NOP4
84042: PUSH
84043: LD_INT 0
84045: ST_TO_ADDR
// sContamin := false ;
84046: NOP4
84050: PUSH
84051: LD_INT 0
84053: ST_TO_ADDR
// sOil := false ;
84054: NOP4
84058: PUSH
84059: LD_INT 0
84061: ST_TO_ADDR
// sStu := false ;
84062: NOP4
84066: PUSH
84067: LD_INT 0
84069: ST_TO_ADDR
// sBazooka := false ;
84070: NOP4
84074: PUSH
84075: LD_INT 0
84077: ST_TO_ADDR
// sMortar := false ;
84078: NOP4
84082: PUSH
84083: LD_INT 0
84085: ST_TO_ADDR
// sRanger := false ;
84086: NOP4
84090: PUSH
84091: LD_INT 0
84093: ST_TO_ADDR
// end ;
84094: LD_VAR 0 1
84098: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
84099: LD_INT 0
84101: PPUSH
84102: PPUSH
84103: PPUSH
84104: PPUSH
84105: PPUSH
// result := [ ] ;
84106: NOP4
84110: PUSH
84111: EMPTY
84112: ST_TO_ADDR
// if campaign_id = 1 then
84113: NOP4
84117: PUSH
84118: LD_INT 1
84120: EQUAL
84121: IFFALSE 87059
// begin case mission_number of 1 :
84123: NOP4
84127: PUSH
84128: LD_INT 1
84130: DOUBLE
84131: EQUAL
84132: IFTRUE 84136
84134: GO 84200
84136: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
84137: NOP4
84141: PUSH
84142: LD_INT 2
84144: PUSH
84145: LD_INT 4
84147: PUSH
84148: LD_INT 11
84150: PUSH
84151: LD_INT 12
84153: PUSH
84154: LD_INT 15
84156: PUSH
84157: LD_INT 16
84159: PUSH
84160: LD_INT 22
84162: PUSH
84163: LD_INT 23
84165: PUSH
84166: LD_INT 26
84168: PUSH
84169: EMPTY
84170: LIST
84171: LIST
84172: LIST
84173: LIST
84174: LIST
84175: LIST
84176: LIST
84177: LIST
84178: LIST
84179: PUSH
84180: LD_INT 101
84182: PUSH
84183: LD_INT 102
84185: PUSH
84186: LD_INT 106
84188: PUSH
84189: EMPTY
84190: LIST
84191: LIST
84192: LIST
84193: PUSH
84194: EMPTY
84195: LIST
84196: LIST
84197: ST_TO_ADDR
84198: GO 87057
84200: LD_INT 2
84202: DOUBLE
84203: EQUAL
84204: IFTRUE 84208
84206: GO 84280
84208: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
84209: NOP4
84213: PUSH
84214: LD_INT 2
84216: PUSH
84217: LD_INT 4
84219: PUSH
84220: LD_INT 11
84222: PUSH
84223: LD_INT 12
84225: PUSH
84226: LD_INT 15
84228: PUSH
84229: LD_INT 16
84231: PUSH
84232: LD_INT 22
84234: PUSH
84235: LD_INT 23
84237: PUSH
84238: LD_INT 26
84240: PUSH
84241: EMPTY
84242: LIST
84243: LIST
84244: LIST
84245: LIST
84246: LIST
84247: LIST
84248: LIST
84249: LIST
84250: LIST
84251: PUSH
84252: LD_INT 101
84254: PUSH
84255: LD_INT 102
84257: PUSH
84258: LD_INT 105
84260: PUSH
84261: LD_INT 106
84263: PUSH
84264: LD_INT 108
84266: PUSH
84267: EMPTY
84268: LIST
84269: LIST
84270: LIST
84271: LIST
84272: LIST
84273: PUSH
84274: EMPTY
84275: LIST
84276: LIST
84277: ST_TO_ADDR
84278: GO 87057
84280: LD_INT 3
84282: DOUBLE
84283: EQUAL
84284: IFTRUE 84288
84286: GO 84364
84288: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
84289: NOP4
84293: PUSH
84294: LD_INT 2
84296: PUSH
84297: LD_INT 4
84299: PUSH
84300: LD_INT 5
84302: PUSH
84303: LD_INT 11
84305: PUSH
84306: LD_INT 12
84308: PUSH
84309: LD_INT 15
84311: PUSH
84312: LD_INT 16
84314: PUSH
84315: LD_INT 22
84317: PUSH
84318: LD_INT 26
84320: PUSH
84321: LD_INT 36
84323: PUSH
84324: EMPTY
84325: LIST
84326: LIST
84327: LIST
84328: LIST
84329: LIST
84330: LIST
84331: LIST
84332: LIST
84333: LIST
84334: LIST
84335: PUSH
84336: LD_INT 101
84338: PUSH
84339: LD_INT 102
84341: PUSH
84342: LD_INT 105
84344: PUSH
84345: LD_INT 106
84347: PUSH
84348: LD_INT 108
84350: PUSH
84351: EMPTY
84352: LIST
84353: LIST
84354: LIST
84355: LIST
84356: LIST
84357: PUSH
84358: EMPTY
84359: LIST
84360: LIST
84361: ST_TO_ADDR
84362: GO 87057
84364: LD_INT 4
84366: DOUBLE
84367: EQUAL
84368: IFTRUE 84372
84370: GO 84456
84372: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
84373: NOP4
84377: PUSH
84378: LD_INT 2
84380: PUSH
84381: LD_INT 4
84383: PUSH
84384: LD_INT 5
84386: PUSH
84387: LD_INT 8
84389: PUSH
84390: LD_INT 11
84392: PUSH
84393: LD_INT 12
84395: PUSH
84396: LD_INT 15
84398: PUSH
84399: LD_INT 16
84401: PUSH
84402: LD_INT 22
84404: PUSH
84405: LD_INT 23
84407: PUSH
84408: LD_INT 26
84410: PUSH
84411: LD_INT 36
84413: PUSH
84414: EMPTY
84415: LIST
84416: LIST
84417: LIST
84418: LIST
84419: LIST
84420: LIST
84421: LIST
84422: LIST
84423: LIST
84424: LIST
84425: LIST
84426: LIST
84427: PUSH
84428: LD_INT 101
84430: PUSH
84431: LD_INT 102
84433: PUSH
84434: LD_INT 105
84436: PUSH
84437: LD_INT 106
84439: PUSH
84440: LD_INT 108
84442: PUSH
84443: EMPTY
84444: LIST
84445: LIST
84446: LIST
84447: LIST
84448: LIST
84449: PUSH
84450: EMPTY
84451: LIST
84452: LIST
84453: ST_TO_ADDR
84454: GO 87057
84456: LD_INT 5
84458: DOUBLE
84459: EQUAL
84460: IFTRUE 84464
84462: GO 84564
84464: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
84465: NOP4
84469: PUSH
84470: LD_INT 2
84472: PUSH
84473: LD_INT 4
84475: PUSH
84476: LD_INT 5
84478: PUSH
84479: LD_INT 6
84481: PUSH
84482: LD_INT 8
84484: PUSH
84485: LD_INT 11
84487: PUSH
84488: LD_INT 12
84490: PUSH
84491: LD_INT 15
84493: PUSH
84494: LD_INT 16
84496: PUSH
84497: LD_INT 22
84499: PUSH
84500: LD_INT 23
84502: PUSH
84503: LD_INT 25
84505: PUSH
84506: LD_INT 26
84508: PUSH
84509: LD_INT 36
84511: PUSH
84512: EMPTY
84513: LIST
84514: LIST
84515: LIST
84516: LIST
84517: LIST
84518: LIST
84519: LIST
84520: LIST
84521: LIST
84522: LIST
84523: LIST
84524: LIST
84525: LIST
84526: LIST
84527: PUSH
84528: LD_INT 101
84530: PUSH
84531: LD_INT 102
84533: PUSH
84534: LD_INT 105
84536: PUSH
84537: LD_INT 106
84539: PUSH
84540: LD_INT 108
84542: PUSH
84543: LD_INT 109
84545: PUSH
84546: LD_INT 112
84548: PUSH
84549: EMPTY
84550: LIST
84551: LIST
84552: LIST
84553: LIST
84554: LIST
84555: LIST
84556: LIST
84557: PUSH
84558: EMPTY
84559: LIST
84560: LIST
84561: ST_TO_ADDR
84562: GO 87057
84564: LD_INT 6
84566: DOUBLE
84567: EQUAL
84568: IFTRUE 84572
84570: GO 84692
84572: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
84573: NOP4
84577: PUSH
84578: LD_INT 2
84580: PUSH
84581: LD_INT 4
84583: PUSH
84584: LD_INT 5
84586: PUSH
84587: LD_INT 6
84589: PUSH
84590: LD_INT 8
84592: PUSH
84593: LD_INT 11
84595: PUSH
84596: LD_INT 12
84598: PUSH
84599: LD_INT 15
84601: PUSH
84602: LD_INT 16
84604: PUSH
84605: LD_INT 20
84607: PUSH
84608: LD_INT 21
84610: PUSH
84611: LD_INT 22
84613: PUSH
84614: LD_INT 23
84616: PUSH
84617: LD_INT 25
84619: PUSH
84620: LD_INT 26
84622: PUSH
84623: LD_INT 30
84625: PUSH
84626: LD_INT 31
84628: PUSH
84629: LD_INT 32
84631: PUSH
84632: LD_INT 36
84634: PUSH
84635: EMPTY
84636: LIST
84637: LIST
84638: LIST
84639: LIST
84640: LIST
84641: LIST
84642: LIST
84643: LIST
84644: LIST
84645: LIST
84646: LIST
84647: LIST
84648: LIST
84649: LIST
84650: LIST
84651: LIST
84652: LIST
84653: LIST
84654: LIST
84655: PUSH
84656: LD_INT 101
84658: PUSH
84659: LD_INT 102
84661: PUSH
84662: LD_INT 105
84664: PUSH
84665: LD_INT 106
84667: PUSH
84668: LD_INT 108
84670: PUSH
84671: LD_INT 109
84673: PUSH
84674: LD_INT 112
84676: PUSH
84677: EMPTY
84678: LIST
84679: LIST
84680: LIST
84681: LIST
84682: LIST
84683: LIST
84684: LIST
84685: PUSH
84686: EMPTY
84687: LIST
84688: LIST
84689: ST_TO_ADDR
84690: GO 87057
84692: LD_INT 7
84694: DOUBLE
84695: EQUAL
84696: IFTRUE 84700
84698: GO 84800
84700: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
84701: NOP4
84705: PUSH
84706: LD_INT 2
84708: PUSH
84709: LD_INT 4
84711: PUSH
84712: LD_INT 5
84714: PUSH
84715: LD_INT 7
84717: PUSH
84718: LD_INT 11
84720: PUSH
84721: LD_INT 12
84723: PUSH
84724: LD_INT 15
84726: PUSH
84727: LD_INT 16
84729: PUSH
84730: LD_INT 20
84732: PUSH
84733: LD_INT 21
84735: PUSH
84736: LD_INT 22
84738: PUSH
84739: LD_INT 23
84741: PUSH
84742: LD_INT 25
84744: PUSH
84745: LD_INT 26
84747: PUSH
84748: EMPTY
84749: LIST
84750: LIST
84751: LIST
84752: LIST
84753: LIST
84754: LIST
84755: LIST
84756: LIST
84757: LIST
84758: LIST
84759: LIST
84760: LIST
84761: LIST
84762: LIST
84763: PUSH
84764: LD_INT 101
84766: PUSH
84767: LD_INT 102
84769: PUSH
84770: LD_INT 103
84772: PUSH
84773: LD_INT 105
84775: PUSH
84776: LD_INT 106
84778: PUSH
84779: LD_INT 108
84781: PUSH
84782: LD_INT 112
84784: PUSH
84785: EMPTY
84786: LIST
84787: LIST
84788: LIST
84789: LIST
84790: LIST
84791: LIST
84792: LIST
84793: PUSH
84794: EMPTY
84795: LIST
84796: LIST
84797: ST_TO_ADDR
84798: GO 87057
84800: LD_INT 8
84802: DOUBLE
84803: EQUAL
84804: IFTRUE 84808
84806: GO 84936
84808: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
84809: NOP4
84813: PUSH
84814: LD_INT 2
84816: PUSH
84817: LD_INT 4
84819: PUSH
84820: LD_INT 5
84822: PUSH
84823: LD_INT 6
84825: PUSH
84826: LD_INT 7
84828: PUSH
84829: LD_INT 8
84831: PUSH
84832: LD_INT 11
84834: PUSH
84835: LD_INT 12
84837: PUSH
84838: LD_INT 15
84840: PUSH
84841: LD_INT 16
84843: PUSH
84844: LD_INT 20
84846: PUSH
84847: LD_INT 21
84849: PUSH
84850: LD_INT 22
84852: PUSH
84853: LD_INT 23
84855: PUSH
84856: LD_INT 25
84858: PUSH
84859: LD_INT 26
84861: PUSH
84862: LD_INT 30
84864: PUSH
84865: LD_INT 31
84867: PUSH
84868: LD_INT 32
84870: PUSH
84871: LD_INT 36
84873: PUSH
84874: EMPTY
84875: LIST
84876: LIST
84877: LIST
84878: LIST
84879: LIST
84880: LIST
84881: LIST
84882: LIST
84883: LIST
84884: LIST
84885: LIST
84886: LIST
84887: LIST
84888: LIST
84889: LIST
84890: LIST
84891: LIST
84892: LIST
84893: LIST
84894: LIST
84895: PUSH
84896: LD_INT 101
84898: PUSH
84899: LD_INT 102
84901: PUSH
84902: LD_INT 103
84904: PUSH
84905: LD_INT 105
84907: PUSH
84908: LD_INT 106
84910: PUSH
84911: LD_INT 108
84913: PUSH
84914: LD_INT 109
84916: PUSH
84917: LD_INT 112
84919: PUSH
84920: EMPTY
84921: LIST
84922: LIST
84923: LIST
84924: LIST
84925: LIST
84926: LIST
84927: LIST
84928: LIST
84929: PUSH
84930: EMPTY
84931: LIST
84932: LIST
84933: ST_TO_ADDR
84934: GO 87057
84936: LD_INT 9
84938: DOUBLE
84939: EQUAL
84940: IFTRUE 84944
84942: GO 85080
84944: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
84945: NOP4
84949: PUSH
84950: LD_INT 2
84952: PUSH
84953: LD_INT 4
84955: PUSH
84956: LD_INT 5
84958: PUSH
84959: LD_INT 6
84961: PUSH
84962: LD_INT 7
84964: PUSH
84965: LD_INT 8
84967: PUSH
84968: LD_INT 11
84970: PUSH
84971: LD_INT 12
84973: PUSH
84974: LD_INT 15
84976: PUSH
84977: LD_INT 16
84979: PUSH
84980: LD_INT 20
84982: PUSH
84983: LD_INT 21
84985: PUSH
84986: LD_INT 22
84988: PUSH
84989: LD_INT 23
84991: PUSH
84992: LD_INT 25
84994: PUSH
84995: LD_INT 26
84997: PUSH
84998: LD_INT 28
85000: PUSH
85001: LD_INT 30
85003: PUSH
85004: LD_INT 31
85006: PUSH
85007: LD_INT 32
85009: PUSH
85010: LD_INT 36
85012: PUSH
85013: EMPTY
85014: LIST
85015: LIST
85016: LIST
85017: LIST
85018: LIST
85019: LIST
85020: LIST
85021: LIST
85022: LIST
85023: LIST
85024: LIST
85025: LIST
85026: LIST
85027: LIST
85028: LIST
85029: LIST
85030: LIST
85031: LIST
85032: LIST
85033: LIST
85034: LIST
85035: PUSH
85036: LD_INT 101
85038: PUSH
85039: LD_INT 102
85041: PUSH
85042: LD_INT 103
85044: PUSH
85045: LD_INT 105
85047: PUSH
85048: LD_INT 106
85050: PUSH
85051: LD_INT 108
85053: PUSH
85054: LD_INT 109
85056: PUSH
85057: LD_INT 112
85059: PUSH
85060: LD_INT 114
85062: PUSH
85063: EMPTY
85064: LIST
85065: LIST
85066: LIST
85067: LIST
85068: LIST
85069: LIST
85070: LIST
85071: LIST
85072: LIST
85073: PUSH
85074: EMPTY
85075: LIST
85076: LIST
85077: ST_TO_ADDR
85078: GO 87057
85080: LD_INT 10
85082: DOUBLE
85083: EQUAL
85084: IFTRUE 85088
85086: GO 85272
85088: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
85089: NOP4
85093: PUSH
85094: LD_INT 2
85096: PUSH
85097: LD_INT 4
85099: PUSH
85100: LD_INT 5
85102: PUSH
85103: LD_INT 6
85105: PUSH
85106: LD_INT 7
85108: PUSH
85109: LD_INT 8
85111: PUSH
85112: LD_INT 9
85114: PUSH
85115: LD_INT 10
85117: PUSH
85118: LD_INT 11
85120: PUSH
85121: LD_INT 12
85123: PUSH
85124: LD_INT 13
85126: PUSH
85127: LD_INT 14
85129: PUSH
85130: LD_INT 15
85132: PUSH
85133: LD_INT 16
85135: PUSH
85136: LD_INT 17
85138: PUSH
85139: LD_INT 18
85141: PUSH
85142: LD_INT 19
85144: PUSH
85145: LD_INT 20
85147: PUSH
85148: LD_INT 21
85150: PUSH
85151: LD_INT 22
85153: PUSH
85154: LD_INT 23
85156: PUSH
85157: LD_INT 24
85159: PUSH
85160: LD_INT 25
85162: PUSH
85163: LD_INT 26
85165: PUSH
85166: LD_INT 28
85168: PUSH
85169: LD_INT 30
85171: PUSH
85172: LD_INT 31
85174: PUSH
85175: LD_INT 32
85177: PUSH
85178: LD_INT 36
85180: PUSH
85181: EMPTY
85182: LIST
85183: LIST
85184: LIST
85185: LIST
85186: LIST
85187: LIST
85188: LIST
85189: LIST
85190: LIST
85191: LIST
85192: LIST
85193: LIST
85194: LIST
85195: LIST
85196: LIST
85197: LIST
85198: LIST
85199: LIST
85200: LIST
85201: LIST
85202: LIST
85203: LIST
85204: LIST
85205: LIST
85206: LIST
85207: LIST
85208: LIST
85209: LIST
85210: LIST
85211: PUSH
85212: LD_INT 101
85214: PUSH
85215: LD_INT 102
85217: PUSH
85218: LD_INT 103
85220: PUSH
85221: LD_INT 104
85223: PUSH
85224: LD_INT 105
85226: PUSH
85227: LD_INT 106
85229: PUSH
85230: LD_INT 107
85232: PUSH
85233: LD_INT 108
85235: PUSH
85236: LD_INT 109
85238: PUSH
85239: LD_INT 110
85241: PUSH
85242: LD_INT 111
85244: PUSH
85245: LD_INT 112
85247: PUSH
85248: LD_INT 114
85250: PUSH
85251: EMPTY
85252: LIST
85253: LIST
85254: LIST
85255: LIST
85256: LIST
85257: LIST
85258: LIST
85259: LIST
85260: LIST
85261: LIST
85262: LIST
85263: LIST
85264: LIST
85265: PUSH
85266: EMPTY
85267: LIST
85268: LIST
85269: ST_TO_ADDR
85270: GO 87057
85272: LD_INT 11
85274: DOUBLE
85275: EQUAL
85276: IFTRUE 85280
85278: GO 85472
85280: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
85281: NOP4
85285: PUSH
85286: LD_INT 2
85288: PUSH
85289: LD_INT 3
85291: PUSH
85292: LD_INT 4
85294: PUSH
85295: LD_INT 5
85297: PUSH
85298: LD_INT 6
85300: PUSH
85301: LD_INT 7
85303: PUSH
85304: LD_INT 8
85306: PUSH
85307: LD_INT 9
85309: PUSH
85310: LD_INT 10
85312: PUSH
85313: LD_INT 11
85315: PUSH
85316: LD_INT 12
85318: PUSH
85319: LD_INT 13
85321: PUSH
85322: LD_INT 14
85324: PUSH
85325: LD_INT 15
85327: PUSH
85328: LD_INT 16
85330: PUSH
85331: LD_INT 17
85333: PUSH
85334: LD_INT 18
85336: PUSH
85337: LD_INT 19
85339: PUSH
85340: LD_INT 20
85342: PUSH
85343: LD_INT 21
85345: PUSH
85346: LD_INT 22
85348: PUSH
85349: LD_INT 23
85351: PUSH
85352: LD_INT 24
85354: PUSH
85355: LD_INT 25
85357: PUSH
85358: LD_INT 26
85360: PUSH
85361: LD_INT 28
85363: PUSH
85364: LD_INT 30
85366: PUSH
85367: LD_INT 31
85369: PUSH
85370: LD_INT 32
85372: PUSH
85373: LD_INT 34
85375: PUSH
85376: LD_INT 36
85378: PUSH
85379: EMPTY
85380: LIST
85381: LIST
85382: LIST
85383: LIST
85384: LIST
85385: LIST
85386: LIST
85387: LIST
85388: LIST
85389: LIST
85390: LIST
85391: LIST
85392: LIST
85393: LIST
85394: LIST
85395: LIST
85396: LIST
85397: LIST
85398: LIST
85399: LIST
85400: LIST
85401: LIST
85402: LIST
85403: LIST
85404: LIST
85405: LIST
85406: LIST
85407: LIST
85408: LIST
85409: LIST
85410: LIST
85411: PUSH
85412: LD_INT 101
85414: PUSH
85415: LD_INT 102
85417: PUSH
85418: LD_INT 103
85420: PUSH
85421: LD_INT 104
85423: PUSH
85424: LD_INT 105
85426: PUSH
85427: LD_INT 106
85429: PUSH
85430: LD_INT 107
85432: PUSH
85433: LD_INT 108
85435: PUSH
85436: LD_INT 109
85438: PUSH
85439: LD_INT 110
85441: PUSH
85442: LD_INT 111
85444: PUSH
85445: LD_INT 112
85447: PUSH
85448: LD_INT 114
85450: PUSH
85451: EMPTY
85452: LIST
85453: LIST
85454: LIST
85455: LIST
85456: LIST
85457: LIST
85458: LIST
85459: LIST
85460: LIST
85461: LIST
85462: LIST
85463: LIST
85464: LIST
85465: PUSH
85466: EMPTY
85467: LIST
85468: LIST
85469: ST_TO_ADDR
85470: GO 87057
85472: LD_INT 12
85474: DOUBLE
85475: EQUAL
85476: IFTRUE 85480
85478: GO 85688
85480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
85481: NOP4
85485: PUSH
85486: LD_INT 1
85488: PUSH
85489: LD_INT 2
85491: PUSH
85492: LD_INT 3
85494: PUSH
85495: LD_INT 4
85497: PUSH
85498: LD_INT 5
85500: PUSH
85501: LD_INT 6
85503: PUSH
85504: LD_INT 7
85506: PUSH
85507: LD_INT 8
85509: PUSH
85510: LD_INT 9
85512: PUSH
85513: LD_INT 10
85515: PUSH
85516: LD_INT 11
85518: PUSH
85519: LD_INT 12
85521: PUSH
85522: LD_INT 13
85524: PUSH
85525: LD_INT 14
85527: PUSH
85528: LD_INT 15
85530: PUSH
85531: LD_INT 16
85533: PUSH
85534: LD_INT 17
85536: PUSH
85537: LD_INT 18
85539: PUSH
85540: LD_INT 19
85542: PUSH
85543: LD_INT 20
85545: PUSH
85546: LD_INT 21
85548: PUSH
85549: LD_INT 22
85551: PUSH
85552: LD_INT 23
85554: PUSH
85555: LD_INT 24
85557: PUSH
85558: LD_INT 25
85560: PUSH
85561: LD_INT 26
85563: PUSH
85564: LD_INT 27
85566: PUSH
85567: LD_INT 28
85569: PUSH
85570: LD_INT 30
85572: PUSH
85573: LD_INT 31
85575: PUSH
85576: LD_INT 32
85578: PUSH
85579: LD_INT 33
85581: PUSH
85582: LD_INT 34
85584: PUSH
85585: LD_INT 36
85587: PUSH
85588: EMPTY
85589: LIST
85590: LIST
85591: LIST
85592: LIST
85593: LIST
85594: LIST
85595: LIST
85596: LIST
85597: LIST
85598: LIST
85599: LIST
85600: LIST
85601: LIST
85602: LIST
85603: LIST
85604: LIST
85605: LIST
85606: LIST
85607: LIST
85608: LIST
85609: LIST
85610: LIST
85611: LIST
85612: LIST
85613: LIST
85614: LIST
85615: LIST
85616: LIST
85617: LIST
85618: LIST
85619: LIST
85620: LIST
85621: LIST
85622: LIST
85623: PUSH
85624: LD_INT 101
85626: PUSH
85627: LD_INT 102
85629: PUSH
85630: LD_INT 103
85632: PUSH
85633: LD_INT 104
85635: PUSH
85636: LD_INT 105
85638: PUSH
85639: LD_INT 106
85641: PUSH
85642: LD_INT 107
85644: PUSH
85645: LD_INT 108
85647: PUSH
85648: LD_INT 109
85650: PUSH
85651: LD_INT 110
85653: PUSH
85654: LD_INT 111
85656: PUSH
85657: LD_INT 112
85659: PUSH
85660: LD_INT 113
85662: PUSH
85663: LD_INT 114
85665: PUSH
85666: EMPTY
85667: LIST
85668: LIST
85669: LIST
85670: LIST
85671: LIST
85672: LIST
85673: LIST
85674: LIST
85675: LIST
85676: LIST
85677: LIST
85678: LIST
85679: LIST
85680: LIST
85681: PUSH
85682: EMPTY
85683: LIST
85684: LIST
85685: ST_TO_ADDR
85686: GO 87057
85688: LD_INT 13
85690: DOUBLE
85691: EQUAL
85692: IFTRUE 85696
85694: GO 85892
85696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
85697: NOP4
85701: PUSH
85702: LD_INT 1
85704: PUSH
85705: LD_INT 2
85707: PUSH
85708: LD_INT 3
85710: PUSH
85711: LD_INT 4
85713: PUSH
85714: LD_INT 5
85716: PUSH
85717: LD_INT 8
85719: PUSH
85720: LD_INT 9
85722: PUSH
85723: LD_INT 10
85725: PUSH
85726: LD_INT 11
85728: PUSH
85729: LD_INT 12
85731: PUSH
85732: LD_INT 14
85734: PUSH
85735: LD_INT 15
85737: PUSH
85738: LD_INT 16
85740: PUSH
85741: LD_INT 17
85743: PUSH
85744: LD_INT 18
85746: PUSH
85747: LD_INT 19
85749: PUSH
85750: LD_INT 20
85752: PUSH
85753: LD_INT 21
85755: PUSH
85756: LD_INT 22
85758: PUSH
85759: LD_INT 23
85761: PUSH
85762: LD_INT 24
85764: PUSH
85765: LD_INT 25
85767: PUSH
85768: LD_INT 26
85770: PUSH
85771: LD_INT 27
85773: PUSH
85774: LD_INT 28
85776: PUSH
85777: LD_INT 30
85779: PUSH
85780: LD_INT 31
85782: PUSH
85783: LD_INT 32
85785: PUSH
85786: LD_INT 33
85788: PUSH
85789: LD_INT 34
85791: PUSH
85792: LD_INT 36
85794: PUSH
85795: EMPTY
85796: LIST
85797: LIST
85798: LIST
85799: LIST
85800: LIST
85801: LIST
85802: LIST
85803: LIST
85804: LIST
85805: LIST
85806: LIST
85807: LIST
85808: LIST
85809: LIST
85810: LIST
85811: LIST
85812: LIST
85813: LIST
85814: LIST
85815: LIST
85816: LIST
85817: LIST
85818: LIST
85819: LIST
85820: LIST
85821: LIST
85822: LIST
85823: LIST
85824: LIST
85825: LIST
85826: LIST
85827: PUSH
85828: LD_INT 101
85830: PUSH
85831: LD_INT 102
85833: PUSH
85834: LD_INT 103
85836: PUSH
85837: LD_INT 104
85839: PUSH
85840: LD_INT 105
85842: PUSH
85843: LD_INT 106
85845: PUSH
85846: LD_INT 107
85848: PUSH
85849: LD_INT 108
85851: PUSH
85852: LD_INT 109
85854: PUSH
85855: LD_INT 110
85857: PUSH
85858: LD_INT 111
85860: PUSH
85861: LD_INT 112
85863: PUSH
85864: LD_INT 113
85866: PUSH
85867: LD_INT 114
85869: PUSH
85870: EMPTY
85871: LIST
85872: LIST
85873: LIST
85874: LIST
85875: LIST
85876: LIST
85877: LIST
85878: LIST
85879: LIST
85880: LIST
85881: LIST
85882: LIST
85883: LIST
85884: LIST
85885: PUSH
85886: EMPTY
85887: LIST
85888: LIST
85889: ST_TO_ADDR
85890: GO 87057
85892: LD_INT 14
85894: DOUBLE
85895: EQUAL
85896: IFTRUE 85900
85898: GO 86112
85900: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
85901: NOP4
85905: PUSH
85906: LD_INT 1
85908: PUSH
85909: LD_INT 2
85911: PUSH
85912: LD_INT 3
85914: PUSH
85915: LD_INT 4
85917: PUSH
85918: LD_INT 5
85920: PUSH
85921: LD_INT 6
85923: PUSH
85924: LD_INT 7
85926: PUSH
85927: LD_INT 8
85929: PUSH
85930: LD_INT 9
85932: PUSH
85933: LD_INT 10
85935: PUSH
85936: LD_INT 11
85938: PUSH
85939: LD_INT 12
85941: PUSH
85942: LD_INT 13
85944: PUSH
85945: LD_INT 14
85947: PUSH
85948: LD_INT 15
85950: PUSH
85951: LD_INT 16
85953: PUSH
85954: LD_INT 17
85956: PUSH
85957: LD_INT 18
85959: PUSH
85960: LD_INT 19
85962: PUSH
85963: LD_INT 20
85965: PUSH
85966: LD_INT 21
85968: PUSH
85969: LD_INT 22
85971: PUSH
85972: LD_INT 23
85974: PUSH
85975: LD_INT 24
85977: PUSH
85978: LD_INT 25
85980: PUSH
85981: LD_INT 26
85983: PUSH
85984: LD_INT 27
85986: PUSH
85987: LD_INT 28
85989: PUSH
85990: LD_INT 29
85992: PUSH
85993: LD_INT 30
85995: PUSH
85996: LD_INT 31
85998: PUSH
85999: LD_INT 32
86001: PUSH
86002: LD_INT 33
86004: PUSH
86005: LD_INT 34
86007: PUSH
86008: LD_INT 36
86010: PUSH
86011: EMPTY
86012: LIST
86013: LIST
86014: LIST
86015: LIST
86016: LIST
86017: LIST
86018: LIST
86019: LIST
86020: LIST
86021: LIST
86022: LIST
86023: LIST
86024: LIST
86025: LIST
86026: LIST
86027: LIST
86028: LIST
86029: LIST
86030: LIST
86031: LIST
86032: LIST
86033: LIST
86034: LIST
86035: LIST
86036: LIST
86037: LIST
86038: LIST
86039: LIST
86040: LIST
86041: LIST
86042: LIST
86043: LIST
86044: LIST
86045: LIST
86046: LIST
86047: PUSH
86048: LD_INT 101
86050: PUSH
86051: LD_INT 102
86053: PUSH
86054: LD_INT 103
86056: PUSH
86057: LD_INT 104
86059: PUSH
86060: LD_INT 105
86062: PUSH
86063: LD_INT 106
86065: PUSH
86066: LD_INT 107
86068: PUSH
86069: LD_INT 108
86071: PUSH
86072: LD_INT 109
86074: PUSH
86075: LD_INT 110
86077: PUSH
86078: LD_INT 111
86080: PUSH
86081: LD_INT 112
86083: PUSH
86084: LD_INT 113
86086: PUSH
86087: LD_INT 114
86089: PUSH
86090: EMPTY
86091: LIST
86092: LIST
86093: LIST
86094: LIST
86095: LIST
86096: LIST
86097: LIST
86098: LIST
86099: LIST
86100: LIST
86101: LIST
86102: LIST
86103: LIST
86104: LIST
86105: PUSH
86106: EMPTY
86107: LIST
86108: LIST
86109: ST_TO_ADDR
86110: GO 87057
86112: LD_INT 15
86114: DOUBLE
86115: EQUAL
86116: IFTRUE 86120
86118: GO 86332
86120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
86121: NOP4
86125: PUSH
86126: LD_INT 1
86128: PUSH
86129: LD_INT 2
86131: PUSH
86132: LD_INT 3
86134: PUSH
86135: LD_INT 4
86137: PUSH
86138: LD_INT 5
86140: PUSH
86141: LD_INT 6
86143: PUSH
86144: LD_INT 7
86146: PUSH
86147: LD_INT 8
86149: PUSH
86150: LD_INT 9
86152: PUSH
86153: LD_INT 10
86155: PUSH
86156: LD_INT 11
86158: PUSH
86159: LD_INT 12
86161: PUSH
86162: LD_INT 13
86164: PUSH
86165: LD_INT 14
86167: PUSH
86168: LD_INT 15
86170: PUSH
86171: LD_INT 16
86173: PUSH
86174: LD_INT 17
86176: PUSH
86177: LD_INT 18
86179: PUSH
86180: LD_INT 19
86182: PUSH
86183: LD_INT 20
86185: PUSH
86186: LD_INT 21
86188: PUSH
86189: LD_INT 22
86191: PUSH
86192: LD_INT 23
86194: PUSH
86195: LD_INT 24
86197: PUSH
86198: LD_INT 25
86200: PUSH
86201: LD_INT 26
86203: PUSH
86204: LD_INT 27
86206: PUSH
86207: LD_INT 28
86209: PUSH
86210: LD_INT 29
86212: PUSH
86213: LD_INT 30
86215: PUSH
86216: LD_INT 31
86218: PUSH
86219: LD_INT 32
86221: PUSH
86222: LD_INT 33
86224: PUSH
86225: LD_INT 34
86227: PUSH
86228: LD_INT 36
86230: PUSH
86231: EMPTY
86232: LIST
86233: LIST
86234: LIST
86235: LIST
86236: LIST
86237: LIST
86238: LIST
86239: LIST
86240: LIST
86241: LIST
86242: LIST
86243: LIST
86244: LIST
86245: LIST
86246: LIST
86247: LIST
86248: LIST
86249: LIST
86250: LIST
86251: LIST
86252: LIST
86253: LIST
86254: LIST
86255: LIST
86256: LIST
86257: LIST
86258: LIST
86259: LIST
86260: LIST
86261: LIST
86262: LIST
86263: LIST
86264: LIST
86265: LIST
86266: LIST
86267: PUSH
86268: LD_INT 101
86270: PUSH
86271: LD_INT 102
86273: PUSH
86274: LD_INT 103
86276: PUSH
86277: LD_INT 104
86279: PUSH
86280: LD_INT 105
86282: PUSH
86283: LD_INT 106
86285: PUSH
86286: LD_INT 107
86288: PUSH
86289: LD_INT 108
86291: PUSH
86292: LD_INT 109
86294: PUSH
86295: LD_INT 110
86297: PUSH
86298: LD_INT 111
86300: PUSH
86301: LD_INT 112
86303: PUSH
86304: LD_INT 113
86306: PUSH
86307: LD_INT 114
86309: PUSH
86310: EMPTY
86311: LIST
86312: LIST
86313: LIST
86314: LIST
86315: LIST
86316: LIST
86317: LIST
86318: LIST
86319: LIST
86320: LIST
86321: LIST
86322: LIST
86323: LIST
86324: LIST
86325: PUSH
86326: EMPTY
86327: LIST
86328: LIST
86329: ST_TO_ADDR
86330: GO 87057
86332: LD_INT 16
86334: DOUBLE
86335: EQUAL
86336: IFTRUE 86340
86338: GO 86464
86340: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
86341: NOP4
86345: PUSH
86346: LD_INT 2
86348: PUSH
86349: LD_INT 4
86351: PUSH
86352: LD_INT 5
86354: PUSH
86355: LD_INT 7
86357: PUSH
86358: LD_INT 11
86360: PUSH
86361: LD_INT 12
86363: PUSH
86364: LD_INT 15
86366: PUSH
86367: LD_INT 16
86369: PUSH
86370: LD_INT 20
86372: PUSH
86373: LD_INT 21
86375: PUSH
86376: LD_INT 22
86378: PUSH
86379: LD_INT 23
86381: PUSH
86382: LD_INT 25
86384: PUSH
86385: LD_INT 26
86387: PUSH
86388: LD_INT 30
86390: PUSH
86391: LD_INT 31
86393: PUSH
86394: LD_INT 32
86396: PUSH
86397: LD_INT 33
86399: PUSH
86400: LD_INT 34
86402: PUSH
86403: EMPTY
86404: LIST
86405: LIST
86406: LIST
86407: LIST
86408: LIST
86409: LIST
86410: LIST
86411: LIST
86412: LIST
86413: LIST
86414: LIST
86415: LIST
86416: LIST
86417: LIST
86418: LIST
86419: LIST
86420: LIST
86421: LIST
86422: LIST
86423: PUSH
86424: LD_INT 101
86426: PUSH
86427: LD_INT 102
86429: PUSH
86430: LD_INT 103
86432: PUSH
86433: LD_INT 106
86435: PUSH
86436: LD_INT 108
86438: PUSH
86439: LD_INT 112
86441: PUSH
86442: LD_INT 113
86444: PUSH
86445: LD_INT 114
86447: PUSH
86448: EMPTY
86449: LIST
86450: LIST
86451: LIST
86452: LIST
86453: LIST
86454: LIST
86455: LIST
86456: LIST
86457: PUSH
86458: EMPTY
86459: LIST
86460: LIST
86461: ST_TO_ADDR
86462: GO 87057
86464: LD_INT 17
86466: DOUBLE
86467: EQUAL
86468: IFTRUE 86472
86470: GO 86684
86472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
86473: NOP4
86477: PUSH
86478: LD_INT 1
86480: PUSH
86481: LD_INT 2
86483: PUSH
86484: LD_INT 3
86486: PUSH
86487: LD_INT 4
86489: PUSH
86490: LD_INT 5
86492: PUSH
86493: LD_INT 6
86495: PUSH
86496: LD_INT 7
86498: PUSH
86499: LD_INT 8
86501: PUSH
86502: LD_INT 9
86504: PUSH
86505: LD_INT 10
86507: PUSH
86508: LD_INT 11
86510: PUSH
86511: LD_INT 12
86513: PUSH
86514: LD_INT 13
86516: PUSH
86517: LD_INT 14
86519: PUSH
86520: LD_INT 15
86522: PUSH
86523: LD_INT 16
86525: PUSH
86526: LD_INT 17
86528: PUSH
86529: LD_INT 18
86531: PUSH
86532: LD_INT 19
86534: PUSH
86535: LD_INT 20
86537: PUSH
86538: LD_INT 21
86540: PUSH
86541: LD_INT 22
86543: PUSH
86544: LD_INT 23
86546: PUSH
86547: LD_INT 24
86549: PUSH
86550: LD_INT 25
86552: PUSH
86553: LD_INT 26
86555: PUSH
86556: LD_INT 27
86558: PUSH
86559: LD_INT 28
86561: PUSH
86562: LD_INT 29
86564: PUSH
86565: LD_INT 30
86567: PUSH
86568: LD_INT 31
86570: PUSH
86571: LD_INT 32
86573: PUSH
86574: LD_INT 33
86576: PUSH
86577: LD_INT 34
86579: PUSH
86580: LD_INT 36
86582: PUSH
86583: EMPTY
86584: LIST
86585: LIST
86586: LIST
86587: LIST
86588: LIST
86589: LIST
86590: LIST
86591: LIST
86592: LIST
86593: LIST
86594: LIST
86595: LIST
86596: LIST
86597: LIST
86598: LIST
86599: LIST
86600: LIST
86601: LIST
86602: LIST
86603: LIST
86604: LIST
86605: LIST
86606: LIST
86607: LIST
86608: LIST
86609: LIST
86610: LIST
86611: LIST
86612: LIST
86613: LIST
86614: LIST
86615: LIST
86616: LIST
86617: LIST
86618: LIST
86619: PUSH
86620: LD_INT 101
86622: PUSH
86623: LD_INT 102
86625: PUSH
86626: LD_INT 103
86628: PUSH
86629: LD_INT 104
86631: PUSH
86632: LD_INT 105
86634: PUSH
86635: LD_INT 106
86637: PUSH
86638: LD_INT 107
86640: PUSH
86641: LD_INT 108
86643: PUSH
86644: LD_INT 109
86646: PUSH
86647: LD_INT 110
86649: PUSH
86650: LD_INT 111
86652: PUSH
86653: LD_INT 112
86655: PUSH
86656: LD_INT 113
86658: PUSH
86659: LD_INT 114
86661: PUSH
86662: EMPTY
86663: LIST
86664: LIST
86665: LIST
86666: LIST
86667: LIST
86668: LIST
86669: LIST
86670: LIST
86671: LIST
86672: LIST
86673: LIST
86674: LIST
86675: LIST
86676: LIST
86677: PUSH
86678: EMPTY
86679: LIST
86680: LIST
86681: ST_TO_ADDR
86682: GO 87057
86684: LD_INT 18
86686: DOUBLE
86687: EQUAL
86688: IFTRUE 86692
86690: GO 86828
86692: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
86693: NOP4
86697: PUSH
86698: LD_INT 2
86700: PUSH
86701: LD_INT 4
86703: PUSH
86704: LD_INT 5
86706: PUSH
86707: LD_INT 7
86709: PUSH
86710: LD_INT 11
86712: PUSH
86713: LD_INT 12
86715: PUSH
86716: LD_INT 15
86718: PUSH
86719: LD_INT 16
86721: PUSH
86722: LD_INT 20
86724: PUSH
86725: LD_INT 21
86727: PUSH
86728: LD_INT 22
86730: PUSH
86731: LD_INT 23
86733: PUSH
86734: LD_INT 25
86736: PUSH
86737: LD_INT 26
86739: PUSH
86740: LD_INT 30
86742: PUSH
86743: LD_INT 31
86745: PUSH
86746: LD_INT 32
86748: PUSH
86749: LD_INT 33
86751: PUSH
86752: LD_INT 34
86754: PUSH
86755: LD_INT 35
86757: PUSH
86758: LD_INT 36
86760: PUSH
86761: EMPTY
86762: LIST
86763: LIST
86764: LIST
86765: LIST
86766: LIST
86767: LIST
86768: LIST
86769: LIST
86770: LIST
86771: LIST
86772: LIST
86773: LIST
86774: LIST
86775: LIST
86776: LIST
86777: LIST
86778: LIST
86779: LIST
86780: LIST
86781: LIST
86782: LIST
86783: PUSH
86784: LD_INT 101
86786: PUSH
86787: LD_INT 102
86789: PUSH
86790: LD_INT 103
86792: PUSH
86793: LD_INT 106
86795: PUSH
86796: LD_INT 108
86798: PUSH
86799: LD_INT 112
86801: PUSH
86802: LD_INT 113
86804: PUSH
86805: LD_INT 114
86807: PUSH
86808: LD_INT 115
86810: PUSH
86811: EMPTY
86812: LIST
86813: LIST
86814: LIST
86815: LIST
86816: LIST
86817: LIST
86818: LIST
86819: LIST
86820: LIST
86821: PUSH
86822: EMPTY
86823: LIST
86824: LIST
86825: ST_TO_ADDR
86826: GO 87057
86828: LD_INT 19
86830: DOUBLE
86831: EQUAL
86832: IFTRUE 86836
86834: GO 87056
86836: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
86837: NOP4
86841: PUSH
86842: LD_INT 1
86844: PUSH
86845: LD_INT 2
86847: PUSH
86848: LD_INT 3
86850: PUSH
86851: LD_INT 4
86853: PUSH
86854: LD_INT 5
86856: PUSH
86857: LD_INT 6
86859: PUSH
86860: LD_INT 7
86862: PUSH
86863: LD_INT 8
86865: PUSH
86866: LD_INT 9
86868: PUSH
86869: LD_INT 10
86871: PUSH
86872: LD_INT 11
86874: PUSH
86875: LD_INT 12
86877: PUSH
86878: LD_INT 13
86880: PUSH
86881: LD_INT 14
86883: PUSH
86884: LD_INT 15
86886: PUSH
86887: LD_INT 16
86889: PUSH
86890: LD_INT 17
86892: PUSH
86893: LD_INT 18
86895: PUSH
86896: LD_INT 19
86898: PUSH
86899: LD_INT 20
86901: PUSH
86902: LD_INT 21
86904: PUSH
86905: LD_INT 22
86907: PUSH
86908: LD_INT 23
86910: PUSH
86911: LD_INT 24
86913: PUSH
86914: LD_INT 25
86916: PUSH
86917: LD_INT 26
86919: PUSH
86920: LD_INT 27
86922: PUSH
86923: LD_INT 28
86925: PUSH
86926: LD_INT 29
86928: PUSH
86929: LD_INT 30
86931: PUSH
86932: LD_INT 31
86934: PUSH
86935: LD_INT 32
86937: PUSH
86938: LD_INT 33
86940: PUSH
86941: LD_INT 34
86943: PUSH
86944: LD_INT 35
86946: PUSH
86947: LD_INT 36
86949: PUSH
86950: EMPTY
86951: LIST
86952: LIST
86953: LIST
86954: LIST
86955: LIST
86956: LIST
86957: LIST
86958: LIST
86959: LIST
86960: LIST
86961: LIST
86962: LIST
86963: LIST
86964: LIST
86965: LIST
86966: LIST
86967: LIST
86968: LIST
86969: LIST
86970: LIST
86971: LIST
86972: LIST
86973: LIST
86974: LIST
86975: LIST
86976: LIST
86977: LIST
86978: LIST
86979: LIST
86980: LIST
86981: LIST
86982: LIST
86983: LIST
86984: LIST
86985: LIST
86986: LIST
86987: PUSH
86988: LD_INT 101
86990: PUSH
86991: LD_INT 102
86993: PUSH
86994: LD_INT 103
86996: PUSH
86997: LD_INT 104
86999: PUSH
87000: LD_INT 105
87002: PUSH
87003: LD_INT 106
87005: PUSH
87006: LD_INT 107
87008: PUSH
87009: LD_INT 108
87011: PUSH
87012: LD_INT 109
87014: PUSH
87015: LD_INT 110
87017: PUSH
87018: LD_INT 111
87020: PUSH
87021: LD_INT 112
87023: PUSH
87024: LD_INT 113
87026: PUSH
87027: LD_INT 114
87029: PUSH
87030: LD_INT 115
87032: PUSH
87033: EMPTY
87034: LIST
87035: LIST
87036: LIST
87037: LIST
87038: LIST
87039: LIST
87040: LIST
87041: LIST
87042: LIST
87043: LIST
87044: LIST
87045: LIST
87046: LIST
87047: LIST
87048: LIST
87049: PUSH
87050: EMPTY
87051: LIST
87052: LIST
87053: ST_TO_ADDR
87054: GO 87057
87056: POP
// end else
87057: GO 87276
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
87059: NOP4
87063: PUSH
87064: LD_INT 1
87066: PUSH
87067: LD_INT 2
87069: PUSH
87070: LD_INT 3
87072: PUSH
87073: LD_INT 4
87075: PUSH
87076: LD_INT 5
87078: PUSH
87079: LD_INT 6
87081: PUSH
87082: LD_INT 7
87084: PUSH
87085: LD_INT 8
87087: PUSH
87088: LD_INT 9
87090: PUSH
87091: LD_INT 10
87093: PUSH
87094: LD_INT 11
87096: PUSH
87097: LD_INT 12
87099: PUSH
87100: LD_INT 13
87102: PUSH
87103: LD_INT 14
87105: PUSH
87106: LD_INT 15
87108: PUSH
87109: LD_INT 16
87111: PUSH
87112: LD_INT 17
87114: PUSH
87115: LD_INT 18
87117: PUSH
87118: LD_INT 19
87120: PUSH
87121: LD_INT 20
87123: PUSH
87124: LD_INT 21
87126: PUSH
87127: LD_INT 22
87129: PUSH
87130: LD_INT 23
87132: PUSH
87133: LD_INT 24
87135: PUSH
87136: LD_INT 25
87138: PUSH
87139: LD_INT 26
87141: PUSH
87142: LD_INT 27
87144: PUSH
87145: LD_INT 28
87147: PUSH
87148: LD_INT 29
87150: PUSH
87151: LD_INT 30
87153: PUSH
87154: LD_INT 31
87156: PUSH
87157: LD_INT 32
87159: PUSH
87160: LD_INT 33
87162: PUSH
87163: LD_INT 34
87165: PUSH
87166: LD_INT 35
87168: PUSH
87169: LD_INT 36
87171: PUSH
87172: EMPTY
87173: LIST
87174: LIST
87175: LIST
87176: LIST
87177: LIST
87178: LIST
87179: LIST
87180: LIST
87181: LIST
87182: LIST
87183: LIST
87184: LIST
87185: LIST
87186: LIST
87187: LIST
87188: LIST
87189: LIST
87190: LIST
87191: LIST
87192: LIST
87193: LIST
87194: LIST
87195: LIST
87196: LIST
87197: LIST
87198: LIST
87199: LIST
87200: LIST
87201: LIST
87202: LIST
87203: LIST
87204: LIST
87205: LIST
87206: LIST
87207: LIST
87208: LIST
87209: PUSH
87210: LD_INT 101
87212: PUSH
87213: LD_INT 102
87215: PUSH
87216: LD_INT 103
87218: PUSH
87219: LD_INT 104
87221: PUSH
87222: LD_INT 105
87224: PUSH
87225: LD_INT 106
87227: PUSH
87228: LD_INT 107
87230: PUSH
87231: LD_INT 108
87233: PUSH
87234: LD_INT 109
87236: PUSH
87237: LD_INT 110
87239: PUSH
87240: LD_INT 111
87242: PUSH
87243: LD_INT 112
87245: PUSH
87246: LD_INT 113
87248: PUSH
87249: LD_INT 114
87251: PUSH
87252: LD_INT 115
87254: PUSH
87255: EMPTY
87256: LIST
87257: LIST
87258: LIST
87259: LIST
87260: LIST
87261: LIST
87262: LIST
87263: LIST
87264: LIST
87265: LIST
87266: LIST
87267: LIST
87268: LIST
87269: LIST
87270: LIST
87271: PUSH
87272: EMPTY
87273: LIST
87274: LIST
87275: ST_TO_ADDR
// if result then
87276: NOP4
87280: IFFALSE 87569
// begin normal :=  ;
87282: NOP4
87286: PUSH
87287: LD_STRING 
87289: ST_TO_ADDR
// hardcore :=  ;
87290: NOP4
87294: PUSH
87295: LD_STRING 
87297: ST_TO_ADDR
// for i = 1 to normalCounter do
87298: NOP4
87302: PUSH
87303: DOUBLE
87304: LD_INT 1
87306: DEC
87307: ST_TO_ADDR
87308: NOP4
87312: PUSH
87313: FOR_TO
87314: IFFALSE 87415
// begin tmp := 0 ;
87316: NOP4
87320: PUSH
87321: LD_STRING 0
87323: ST_TO_ADDR
// if result [ 1 ] then
87324: NOP4
87328: PUSH
87329: LD_INT 1
87331: ARRAY
87332: IFFALSE 87397
// if result [ 1 ] [ 1 ] = i then
87334: NOP4
87338: PUSH
87339: LD_INT 1
87341: ARRAY
87342: PUSH
87343: LD_INT 1
87345: ARRAY
87346: PUSH
87347: NOP4
87351: EQUAL
87352: IFFALSE 87397
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
87354: NOP4
87358: PUSH
87359: NOP4
87363: PPUSH
87364: LD_INT 1
87366: PPUSH
87367: NOP4
87371: PUSH
87372: LD_INT 1
87374: ARRAY
87375: PPUSH
87376: LD_INT 1
87378: PPUSH
87379: NOP4
87383: PPUSH
87384: NOP4
87388: ST_TO_ADDR
// tmp := 1 ;
87389: NOP4
87393: PUSH
87394: LD_STRING 1
87396: ST_TO_ADDR
// end ; normal := normal & tmp ;
87397: NOP4
87401: PUSH
87402: NOP4
87406: PUSH
87407: NOP4
87411: STR
87412: ST_TO_ADDR
// end ;
87413: GO 87313
87415: POP
87416: POP
// for i = 1 to hardcoreCounter do
87417: NOP4
87421: PUSH
87422: DOUBLE
87423: LD_INT 1
87425: DEC
87426: ST_TO_ADDR
87427: NOP4
87431: PUSH
87432: FOR_TO
87433: IFFALSE 87538
// begin tmp := 0 ;
87435: NOP4
87439: PUSH
87440: LD_STRING 0
87442: ST_TO_ADDR
// if result [ 2 ] then
87443: NOP4
87447: PUSH
87448: LD_INT 2
87450: ARRAY
87451: IFFALSE 87520
// if result [ 2 ] [ 1 ] = 100 + i then
87453: NOP4
87457: PUSH
87458: LD_INT 2
87460: ARRAY
87461: PUSH
87462: LD_INT 1
87464: ARRAY
87465: PUSH
87466: LD_INT 100
87468: PUSH
87469: NOP4
87473: PLUS
87474: EQUAL
87475: IFFALSE 87520
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
87477: NOP4
87481: PUSH
87482: NOP4
87486: PPUSH
87487: LD_INT 2
87489: PPUSH
87490: NOP4
87494: PUSH
87495: LD_INT 2
87497: ARRAY
87498: PPUSH
87499: LD_INT 1
87501: PPUSH
87502: NOP4
87506: PPUSH
87507: NOP4
87511: ST_TO_ADDR
// tmp := 1 ;
87512: NOP4
87516: PUSH
87517: LD_STRING 1
87519: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
87520: NOP4
87524: PUSH
87525: NOP4
87529: PUSH
87530: NOP4
87534: STR
87535: ST_TO_ADDR
// end ;
87536: GO 87432
87538: POP
87539: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
87540: LD_STRING getStreamItemsFromMission("
87542: PUSH
87543: NOP4
87547: STR
87548: PUSH
87549: LD_STRING ","
87551: STR
87552: PUSH
87553: NOP4
87557: STR
87558: PUSH
87559: LD_STRING ")
87561: STR
87562: PPUSH
87563: NOP4
// end else
87567: GO 87576
// ToLua ( getStreamItemsFromMission("","") ) ;
87569: LD_STRING getStreamItemsFromMission("","")
87571: PPUSH
87572: NOP4
// end ;
87576: LD_VAR 0 1
87580: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
87581: NOP4
87585: PUSH
87586: LD_INT 100
87588: EQUAL
87589: IFFALSE 88538
// begin if not StreamModeActive then
87591: NOP4
87595: NOT
87596: IFFALSE 87606
// StreamModeActive := true ;
87598: NOP4
87602: PUSH
87603: LD_INT 1
87605: ST_TO_ADDR
// if p3 = 0 then
87606: NOP4
87610: PUSH
87611: LD_INT 0
87613: EQUAL
87614: IFFALSE 87620
// InitStreamMode ;
87616: NOP4
// if p3 = 1 then
87620: NOP4
87624: PUSH
87625: LD_INT 1
87627: EQUAL
87628: IFFALSE 87638
// sRocket := true ;
87630: NOP4
87634: PUSH
87635: LD_INT 1
87637: ST_TO_ADDR
// if p3 = 2 then
87638: NOP4
87642: PUSH
87643: LD_INT 2
87645: EQUAL
87646: IFFALSE 87656
// sSpeed := true ;
87648: NOP4
87652: PUSH
87653: LD_INT 1
87655: ST_TO_ADDR
// if p3 = 3 then
87656: NOP4
87660: PUSH
87661: LD_INT 3
87663: EQUAL
87664: IFFALSE 87674
// sEngine := true ;
87666: NOP4
87670: PUSH
87671: LD_INT 1
87673: ST_TO_ADDR
// if p3 = 4 then
87674: NOP4
87678: PUSH
87679: LD_INT 4
87681: EQUAL
87682: IFFALSE 87692
// sSpec := true ;
87684: NOP4
87688: PUSH
87689: LD_INT 1
87691: ST_TO_ADDR
// if p3 = 5 then
87692: NOP4
87696: PUSH
87697: LD_INT 5
87699: EQUAL
87700: IFFALSE 87710
// sLevel := true ;
87702: NOP4
87706: PUSH
87707: LD_INT 1
87709: ST_TO_ADDR
// if p3 = 6 then
87710: NOP4
87714: PUSH
87715: LD_INT 6
87717: EQUAL
87718: IFFALSE 87728
// sArmoury := true ;
87720: NOP4
87724: PUSH
87725: LD_INT 1
87727: ST_TO_ADDR
// if p3 = 7 then
87728: NOP4
87732: PUSH
87733: LD_INT 7
87735: EQUAL
87736: IFFALSE 87746
// sRadar := true ;
87738: NOP4
87742: PUSH
87743: LD_INT 1
87745: ST_TO_ADDR
// if p3 = 8 then
87746: NOP4
87750: PUSH
87751: LD_INT 8
87753: EQUAL
87754: IFFALSE 87764
// sBunker := true ;
87756: NOP4
87760: PUSH
87761: LD_INT 1
87763: ST_TO_ADDR
// if p3 = 9 then
87764: NOP4
87768: PUSH
87769: LD_INT 9
87771: EQUAL
87772: IFFALSE 87782
// sHack := true ;
87774: NOP4
87778: PUSH
87779: LD_INT 1
87781: ST_TO_ADDR
// if p3 = 10 then
87782: NOP4
87786: PUSH
87787: LD_INT 10
87789: EQUAL
87790: IFFALSE 87800
// sFire := true ;
87792: NOP4
87796: PUSH
87797: LD_INT 1
87799: ST_TO_ADDR
// if p3 = 11 then
87800: NOP4
87804: PUSH
87805: LD_INT 11
87807: EQUAL
87808: IFFALSE 87818
// sRefresh := true ;
87810: NOP4
87814: PUSH
87815: LD_INT 1
87817: ST_TO_ADDR
// if p3 = 12 then
87818: NOP4
87822: PUSH
87823: LD_INT 12
87825: EQUAL
87826: IFFALSE 87836
// sExp := true ;
87828: NOP4
87832: PUSH
87833: LD_INT 1
87835: ST_TO_ADDR
// if p3 = 13 then
87836: NOP4
87840: PUSH
87841: LD_INT 13
87843: EQUAL
87844: IFFALSE 87854
// sDepot := true ;
87846: NOP4
87850: PUSH
87851: LD_INT 1
87853: ST_TO_ADDR
// if p3 = 14 then
87854: NOP4
87858: PUSH
87859: LD_INT 14
87861: EQUAL
87862: IFFALSE 87872
// sFlag := true ;
87864: NOP4
87868: PUSH
87869: LD_INT 1
87871: ST_TO_ADDR
// if p3 = 15 then
87872: NOP4
87876: PUSH
87877: LD_INT 15
87879: EQUAL
87880: IFFALSE 87890
// sKamikadze := true ;
87882: NOP4
87886: PUSH
87887: LD_INT 1
87889: ST_TO_ADDR
// if p3 = 16 then
87890: NOP4
87894: PUSH
87895: LD_INT 16
87897: EQUAL
87898: IFFALSE 87908
// sTroll := true ;
87900: NOP4
87904: PUSH
87905: LD_INT 1
87907: ST_TO_ADDR
// if p3 = 17 then
87908: NOP4
87912: PUSH
87913: LD_INT 17
87915: EQUAL
87916: IFFALSE 87926
// sSlow := true ;
87918: NOP4
87922: PUSH
87923: LD_INT 1
87925: ST_TO_ADDR
// if p3 = 18 then
87926: NOP4
87930: PUSH
87931: LD_INT 18
87933: EQUAL
87934: IFFALSE 87944
// sLack := true ;
87936: NOP4
87940: PUSH
87941: LD_INT 1
87943: ST_TO_ADDR
// if p3 = 19 then
87944: NOP4
87948: PUSH
87949: LD_INT 19
87951: EQUAL
87952: IFFALSE 87962
// sTank := true ;
87954: NOP4
87958: PUSH
87959: LD_INT 1
87961: ST_TO_ADDR
// if p3 = 20 then
87962: NOP4
87966: PUSH
87967: LD_INT 20
87969: EQUAL
87970: IFFALSE 87980
// sRemote := true ;
87972: NOP4
87976: PUSH
87977: LD_INT 1
87979: ST_TO_ADDR
// if p3 = 21 then
87980: NOP4
87984: PUSH
87985: LD_INT 21
87987: EQUAL
87988: IFFALSE 87998
// sPowell := true ;
87990: NOP4
87994: PUSH
87995: LD_INT 1
87997: ST_TO_ADDR
// if p3 = 22 then
87998: NOP4
88002: PUSH
88003: LD_INT 22
88005: EQUAL
88006: IFFALSE 88016
// sTeleport := true ;
88008: NOP4
88012: PUSH
88013: LD_INT 1
88015: ST_TO_ADDR
// if p3 = 23 then
88016: NOP4
88020: PUSH
88021: LD_INT 23
88023: EQUAL
88024: IFFALSE 88034
// sOilTower := true ;
88026: NOP4
88030: PUSH
88031: LD_INT 1
88033: ST_TO_ADDR
// if p3 = 24 then
88034: NOP4
88038: PUSH
88039: LD_INT 24
88041: EQUAL
88042: IFFALSE 88052
// sShovel := true ;
88044: NOP4
88048: PUSH
88049: LD_INT 1
88051: ST_TO_ADDR
// if p3 = 25 then
88052: NOP4
88056: PUSH
88057: LD_INT 25
88059: EQUAL
88060: IFFALSE 88070
// sSheik := true ;
88062: NOP4
88066: PUSH
88067: LD_INT 1
88069: ST_TO_ADDR
// if p3 = 26 then
88070: NOP4
88074: PUSH
88075: LD_INT 26
88077: EQUAL
88078: IFFALSE 88088
// sEarthquake := true ;
88080: NOP4
88084: PUSH
88085: LD_INT 1
88087: ST_TO_ADDR
// if p3 = 27 then
88088: NOP4
88092: PUSH
88093: LD_INT 27
88095: EQUAL
88096: IFFALSE 88106
// sAI := true ;
88098: NOP4
88102: PUSH
88103: LD_INT 1
88105: ST_TO_ADDR
// if p3 = 28 then
88106: NOP4
88110: PUSH
88111: LD_INT 28
88113: EQUAL
88114: IFFALSE 88124
// sCargo := true ;
88116: NOP4
88120: PUSH
88121: LD_INT 1
88123: ST_TO_ADDR
// if p3 = 29 then
88124: NOP4
88128: PUSH
88129: LD_INT 29
88131: EQUAL
88132: IFFALSE 88142
// sDLaser := true ;
88134: NOP4
88138: PUSH
88139: LD_INT 1
88141: ST_TO_ADDR
// if p3 = 30 then
88142: NOP4
88146: PUSH
88147: LD_INT 30
88149: EQUAL
88150: IFFALSE 88160
// sExchange := true ;
88152: NOP4
88156: PUSH
88157: LD_INT 1
88159: ST_TO_ADDR
// if p3 = 31 then
88160: NOP4
88164: PUSH
88165: LD_INT 31
88167: EQUAL
88168: IFFALSE 88178
// sFac := true ;
88170: NOP4
88174: PUSH
88175: LD_INT 1
88177: ST_TO_ADDR
// if p3 = 32 then
88178: NOP4
88182: PUSH
88183: LD_INT 32
88185: EQUAL
88186: IFFALSE 88196
// sPower := true ;
88188: NOP4
88192: PUSH
88193: LD_INT 1
88195: ST_TO_ADDR
// if p3 = 33 then
88196: NOP4
88200: PUSH
88201: LD_INT 33
88203: EQUAL
88204: IFFALSE 88214
// sRandom := true ;
88206: NOP4
88210: PUSH
88211: LD_INT 1
88213: ST_TO_ADDR
// if p3 = 34 then
88214: NOP4
88218: PUSH
88219: LD_INT 34
88221: EQUAL
88222: IFFALSE 88232
// sShield := true ;
88224: NOP4
88228: PUSH
88229: LD_INT 1
88231: ST_TO_ADDR
// if p3 = 35 then
88232: NOP4
88236: PUSH
88237: LD_INT 35
88239: EQUAL
88240: IFFALSE 88250
// sTime := true ;
88242: NOP4
88246: PUSH
88247: LD_INT 1
88249: ST_TO_ADDR
// if p3 = 36 then
88250: NOP4
88254: PUSH
88255: LD_INT 36
88257: EQUAL
88258: IFFALSE 88268
// sTools := true ;
88260: NOP4
88264: PUSH
88265: LD_INT 1
88267: ST_TO_ADDR
// if p3 = 101 then
88268: NOP4
88272: PUSH
88273: LD_INT 101
88275: EQUAL
88276: IFFALSE 88286
// sSold := true ;
88278: NOP4
88282: PUSH
88283: LD_INT 1
88285: ST_TO_ADDR
// if p3 = 102 then
88286: NOP4
88290: PUSH
88291: LD_INT 102
88293: EQUAL
88294: IFFALSE 88304
// sDiff := true ;
88296: NOP4
88300: PUSH
88301: LD_INT 1
88303: ST_TO_ADDR
// if p3 = 103 then
88304: NOP4
88308: PUSH
88309: LD_INT 103
88311: EQUAL
88312: IFFALSE 88322
// sFog := true ;
88314: NOP4
88318: PUSH
88319: LD_INT 1
88321: ST_TO_ADDR
// if p3 = 104 then
88322: NOP4
88326: PUSH
88327: LD_INT 104
88329: EQUAL
88330: IFFALSE 88340
// sReset := true ;
88332: NOP4
88336: PUSH
88337: LD_INT 1
88339: ST_TO_ADDR
// if p3 = 105 then
88340: NOP4
88344: PUSH
88345: LD_INT 105
88347: EQUAL
88348: IFFALSE 88358
// sSun := true ;
88350: NOP4
88354: PUSH
88355: LD_INT 1
88357: ST_TO_ADDR
// if p3 = 106 then
88358: NOP4
88362: PUSH
88363: LD_INT 106
88365: EQUAL
88366: IFFALSE 88376
// sTiger := true ;
88368: NOP4
88372: PUSH
88373: LD_INT 1
88375: ST_TO_ADDR
// if p3 = 107 then
88376: NOP4
88380: PUSH
88381: LD_INT 107
88383: EQUAL
88384: IFFALSE 88394
// sBomb := true ;
88386: NOP4
88390: PUSH
88391: LD_INT 1
88393: ST_TO_ADDR
// if p3 = 108 then
88394: NOP4
88398: PUSH
88399: LD_INT 108
88401: EQUAL
88402: IFFALSE 88412
// sWound := true ;
88404: NOP4
88408: PUSH
88409: LD_INT 1
88411: ST_TO_ADDR
// if p3 = 109 then
88412: NOP4
88416: PUSH
88417: LD_INT 109
88419: EQUAL
88420: IFFALSE 88430
// sBetray := true ;
88422: NOP4
88426: PUSH
88427: LD_INT 1
88429: ST_TO_ADDR
// if p3 = 110 then
88430: NOP4
88434: PUSH
88435: LD_INT 110
88437: EQUAL
88438: IFFALSE 88448
// sContamin := true ;
88440: NOP4
88444: PUSH
88445: LD_INT 1
88447: ST_TO_ADDR
// if p3 = 111 then
88448: NOP4
88452: PUSH
88453: LD_INT 111
88455: EQUAL
88456: IFFALSE 88466
// sOil := true ;
88458: NOP4
88462: PUSH
88463: LD_INT 1
88465: ST_TO_ADDR
// if p3 = 112 then
88466: NOP4
88470: PUSH
88471: LD_INT 112
88473: EQUAL
88474: IFFALSE 88484
// sStu := true ;
88476: NOP4
88480: PUSH
88481: LD_INT 1
88483: ST_TO_ADDR
// if p3 = 113 then
88484: NOP4
88488: PUSH
88489: LD_INT 113
88491: EQUAL
88492: IFFALSE 88502
// sBazooka := true ;
88494: NOP4
88498: PUSH
88499: LD_INT 1
88501: ST_TO_ADDR
// if p3 = 114 then
88502: NOP4
88506: PUSH
88507: LD_INT 114
88509: EQUAL
88510: IFFALSE 88520
// sMortar := true ;
88512: NOP4
88516: PUSH
88517: LD_INT 1
88519: ST_TO_ADDR
// if p3 = 115 then
88520: NOP4
88524: PUSH
88525: LD_INT 115
88527: EQUAL
88528: IFFALSE 88538
// sRanger := true ;
88530: NOP4
88534: PUSH
88535: LD_INT 1
88537: ST_TO_ADDR
// end ; end ;
88538: PPOPN 6
88540: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
88541: NOP4
88545: PUSH
88546: NOP4
88550: AND
88551: IFFALSE 88675
88553: GO 88555
88555: DISABLE
88556: LD_INT 0
88558: PPUSH
88559: PPUSH
// begin enable ;
88560: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
88561: NOP4
88565: PUSH
88566: LD_INT 22
88568: PUSH
88569: NOP4
88573: PUSH
88574: EMPTY
88575: LIST
88576: LIST
88577: PUSH
88578: LD_INT 2
88580: PUSH
88581: LD_INT 34
88583: PUSH
88584: LD_INT 7
88586: PUSH
88587: EMPTY
88588: LIST
88589: LIST
88590: PUSH
88591: LD_INT 34
88593: PUSH
88594: LD_INT 45
88596: PUSH
88597: EMPTY
88598: LIST
88599: LIST
88600: PUSH
88601: LD_INT 34
88603: PUSH
88604: LD_INT 28
88606: PUSH
88607: EMPTY
88608: LIST
88609: LIST
88610: PUSH
88611: LD_INT 34
88613: PUSH
88614: LD_INT 47
88616: PUSH
88617: EMPTY
88618: LIST
88619: LIST
88620: PUSH
88621: EMPTY
88622: LIST
88623: LIST
88624: LIST
88625: LIST
88626: LIST
88627: PUSH
88628: EMPTY
88629: LIST
88630: LIST
88631: PPUSH
88632: NOP4
88636: ST_TO_ADDR
// if not tmp then
88637: NOP4
88641: NOT
88642: IFFALSE 88646
// exit ;
88644: GO 88675
// for i in tmp do
88646: NOP4
88650: PUSH
88651: NOP4
88655: PUSH
88656: FOR_IN
88657: IFFALSE 88673
// begin SetLives ( i , 0 ) ;
88659: NOP4
88663: PPUSH
88664: LD_INT 0
88666: PPUSH
88667: NOP4
// end ;
88671: GO 88656
88673: POP
88674: POP
// end ;
88675: PPOPN 2
88677: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
88678: NOP4
88682: PUSH
88683: NOP4
88687: AND
88688: IFFALSE 88772
88690: GO 88692
88692: DISABLE
88693: LD_INT 0
88695: PPUSH
88696: PPUSH
// begin enable ;
88697: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
88698: NOP4
88702: PUSH
88703: LD_INT 22
88705: PUSH
88706: NOP4
88710: PUSH
88711: EMPTY
88712: LIST
88713: LIST
88714: PUSH
88715: LD_INT 32
88717: PUSH
88718: LD_INT 3
88720: PUSH
88721: EMPTY
88722: LIST
88723: LIST
88724: PUSH
88725: EMPTY
88726: LIST
88727: LIST
88728: PPUSH
88729: NOP4
88733: ST_TO_ADDR
// if not tmp then
88734: NOP4
88738: NOT
88739: IFFALSE 88743
// exit ;
88741: GO 88772
// for i in tmp do
88743: NOP4
88747: PUSH
88748: NOP4
88752: PUSH
88753: FOR_IN
88754: IFFALSE 88770
// begin SetLives ( i , 0 ) ;
88756: NOP4
88760: PPUSH
88761: LD_INT 0
88763: PPUSH
88764: NOP4
// end ;
88768: GO 88753
88770: POP
88771: POP
// end ;
88772: PPOPN 2
88774: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
88775: NOP4
88779: PUSH
88780: NOP4
88784: AND
88785: IFFALSE 88878
88787: GO 88789
88789: DISABLE
88790: LD_INT 0
88792: PPUSH
// begin enable ;
88793: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
88794: NOP4
88798: PUSH
88799: LD_INT 22
88801: PUSH
88802: NOP4
88806: PUSH
88807: EMPTY
88808: LIST
88809: LIST
88810: PUSH
88811: LD_INT 2
88813: PUSH
88814: LD_INT 25
88816: PUSH
88817: LD_INT 5
88819: PUSH
88820: EMPTY
88821: LIST
88822: LIST
88823: PUSH
88824: LD_INT 25
88826: PUSH
88827: LD_INT 9
88829: PUSH
88830: EMPTY
88831: LIST
88832: LIST
88833: PUSH
88834: LD_INT 25
88836: PUSH
88837: LD_INT 8
88839: PUSH
88840: EMPTY
88841: LIST
88842: LIST
88843: PUSH
88844: EMPTY
88845: LIST
88846: LIST
88847: LIST
88848: LIST
88849: PUSH
88850: EMPTY
88851: LIST
88852: LIST
88853: PPUSH
88854: NOP4
88858: PUSH
88859: FOR_IN
88860: IFFALSE 88876
// begin SetClass ( i , 1 ) ;
88862: NOP4
88866: PPUSH
88867: LD_INT 1
88869: PPUSH
88870: NOP4
// end ;
88874: GO 88859
88876: POP
88877: POP
// end ;
88878: PPOPN 1
88880: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
88881: NOP4
88885: PUSH
88886: NOP4
88890: AND
88891: PUSH
88892: NOP4
88896: PUSH
88897: LD_INT 7
88899: LESS
88900: AND
88901: IFFALSE 88915
88903: GO 88905
88905: DISABLE
// begin enable ;
88906: ENABLE
// game_speed := 7 ;
88907: LD_ADDR_OWVAR 65
88911: PUSH
88912: LD_INT 7
88914: ST_TO_ADDR
// end ;
88915: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
88916: NOP4
88920: PUSH
88921: NOP4
88925: AND
88926: IFFALSE 89128
88928: GO 88930
88930: DISABLE
88931: LD_INT 0
88933: PPUSH
88934: PPUSH
88935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
88936: NOP4
88940: PUSH
88941: LD_INT 81
88943: PUSH
88944: NOP4
88948: PUSH
88949: EMPTY
88950: LIST
88951: LIST
88952: PUSH
88953: LD_INT 21
88955: PUSH
88956: LD_INT 1
88958: PUSH
88959: EMPTY
88960: LIST
88961: LIST
88962: PUSH
88963: EMPTY
88964: LIST
88965: LIST
88966: PPUSH
88967: NOP4
88971: ST_TO_ADDR
// if not tmp then
88972: NOP4
88976: NOT
88977: IFFALSE 88981
// exit ;
88979: GO 89128
// if tmp > 5 then
88981: NOP4
88985: PUSH
88986: LD_INT 5
88988: GREATER
88989: IFFALSE 89001
// k := 5 else
88991: NOP4
88995: PUSH
88996: LD_INT 5
88998: ST_TO_ADDR
88999: GO 89011
// k := tmp ;
89001: NOP4
89005: PUSH
89006: NOP4
89010: ST_TO_ADDR
// for i := 1 to k do
89011: NOP4
89015: PUSH
89016: DOUBLE
89017: LD_INT 1
89019: DEC
89020: ST_TO_ADDR
89021: NOP4
89025: PUSH
89026: FOR_TO
89027: IFFALSE 89126
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
89029: NOP4
89033: PUSH
89034: NOP4
89038: ARRAY
89039: PPUSH
89040: NOP4
89044: PUSH
89045: LD_INT 4
89047: MOD
89048: PUSH
89049: LD_INT 1
89051: PLUS
89052: PPUSH
89053: NOP4
89057: PUSH
89058: LD_INT 10
89060: LESS
89061: IFFALSE 89124
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
89063: NOP4
89067: PUSH
89068: NOP4
89072: ARRAY
89073: PPUSH
89074: NOP4
89078: PUSH
89079: LD_INT 4
89081: MOD
89082: PUSH
89083: LD_INT 1
89085: PLUS
89086: PPUSH
89087: NOP4
89091: PUSH
89092: NOP4
89096: ARRAY
89097: PPUSH
89098: NOP4
89102: PUSH
89103: LD_INT 4
89105: MOD
89106: PUSH
89107: LD_INT 1
89109: PLUS
89110: PPUSH
89111: NOP4
89115: PUSH
89116: LD_INT 1
89118: PLUS
89119: PPUSH
89120: NOP4
89124: GO 89026
89126: POP
89127: POP
// end ;
89128: PPOPN 3
89130: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
89131: NOP4
89135: PUSH
89136: NOP4
89140: AND
89141: IFFALSE 89161
89143: GO 89145
89145: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
89146: LD_INT 4
89148: PPUSH
89149: NOP4
89153: PPUSH
89154: LD_INT 0
89156: PPUSH
89157: NOP4
89161: END
// every 0 0$1 trigger StreamModeActive and sShovel do
89162: NOP4
89166: PUSH
89167: NOP4
89171: AND
89172: IFFALSE 89192
89174: GO 89176
89176: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
89177: LD_INT 19
89179: PPUSH
89180: NOP4
89184: PPUSH
89185: LD_INT 0
89187: PPUSH
89188: NOP4
89192: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
89193: NOP4
89197: PUSH
89198: NOP4
89202: AND
89203: IFFALSE 89305
89205: GO 89207
89207: DISABLE
89208: LD_INT 0
89210: PPUSH
89211: PPUSH
// begin enable ;
89212: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
89213: NOP4
89217: PUSH
89218: LD_INT 22
89220: PUSH
89221: NOP4
89225: PUSH
89226: EMPTY
89227: LIST
89228: LIST
89229: PUSH
89230: LD_INT 2
89232: PUSH
89233: LD_INT 34
89235: PUSH
89236: LD_INT 11
89238: PUSH
89239: EMPTY
89240: LIST
89241: LIST
89242: PUSH
89243: LD_INT 34
89245: PUSH
89246: LD_INT 30
89248: PUSH
89249: EMPTY
89250: LIST
89251: LIST
89252: PUSH
89253: EMPTY
89254: LIST
89255: LIST
89256: LIST
89257: PUSH
89258: EMPTY
89259: LIST
89260: LIST
89261: PPUSH
89262: NOP4
89266: ST_TO_ADDR
// if not tmp then
89267: NOP4
89271: NOT
89272: IFFALSE 89276
// exit ;
89274: GO 89305
// for i in tmp do
89276: NOP4
89280: PUSH
89281: NOP4
89285: PUSH
89286: FOR_IN
89287: IFFALSE 89303
// begin SetLives ( i , 0 ) ;
89289: NOP4
89293: PPUSH
89294: LD_INT 0
89296: PPUSH
89297: NOP4
// end ;
89301: GO 89286
89303: POP
89304: POP
// end ;
89305: PPOPN 2
89307: END
// every 0 0$1 trigger StreamModeActive and sBunker do
89308: NOP4
89312: PUSH
89313: NOP4
89317: AND
89318: IFFALSE 89338
89320: GO 89322
89322: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
89323: LD_INT 32
89325: PPUSH
89326: NOP4
89330: PPUSH
89331: LD_INT 0
89333: PPUSH
89334: NOP4
89338: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
89339: NOP4
89343: PUSH
89344: NOP4
89348: AND
89349: IFFALSE 89530
89351: GO 89353
89353: DISABLE
89354: LD_INT 0
89356: PPUSH
89357: PPUSH
89358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
89359: NOP4
89363: PUSH
89364: LD_INT 22
89366: PUSH
89367: NOP4
89371: PUSH
89372: EMPTY
89373: LIST
89374: LIST
89375: PUSH
89376: LD_INT 33
89378: PUSH
89379: LD_INT 3
89381: PUSH
89382: EMPTY
89383: LIST
89384: LIST
89385: PUSH
89386: EMPTY
89387: LIST
89388: LIST
89389: PPUSH
89390: NOP4
89394: ST_TO_ADDR
// if not tmp then
89395: NOP4
89399: NOT
89400: IFFALSE 89404
// exit ;
89402: GO 89530
// side := 0 ;
89404: NOP4
89408: PUSH
89409: LD_INT 0
89411: ST_TO_ADDR
// for i := 1 to 8 do
89412: NOP4
89416: PUSH
89417: DOUBLE
89418: LD_INT 1
89420: DEC
89421: ST_TO_ADDR
89422: LD_INT 8
89424: PUSH
89425: FOR_TO
89426: IFFALSE 89474
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
89428: NOP4
89432: PUSH
89433: NOP4
89437: NONEQUAL
89438: PUSH
89439: NOP4
89443: PPUSH
89444: NOP4
89448: PPUSH
89449: NOP4
89453: PUSH
89454: LD_INT 2
89456: EQUAL
89457: AND
89458: IFFALSE 89472
// begin side := i ;
89460: NOP4
89464: PUSH
89465: NOP4
89469: ST_TO_ADDR
// break ;
89470: GO 89474
// end ;
89472: GO 89425
89474: POP
89475: POP
// if not side then
89476: NOP4
89480: NOT
89481: IFFALSE 89485
// exit ;
89483: GO 89530
// for i := 1 to tmp do
89485: NOP4
89489: PUSH
89490: DOUBLE
89491: LD_INT 1
89493: DEC
89494: ST_TO_ADDR
89495: NOP4
89499: PUSH
89500: FOR_TO
89501: IFFALSE 89528
// if Prob ( 60 ) then
89503: LD_INT 60
89505: PPUSH
89506: NOP4
89510: IFFALSE 89526
// SetSide ( i , side ) ;
89512: NOP4
89516: PPUSH
89517: NOP4
89521: PPUSH
89522: NOP4
89526: GO 89500
89528: POP
89529: POP
// end ;
89530: PPOPN 3
89532: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
89533: NOP4
89537: PUSH
89538: NOP4
89542: AND
89543: IFFALSE 89662
89545: GO 89547
89547: DISABLE
89548: LD_INT 0
89550: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
89551: NOP4
89555: PUSH
89556: LD_INT 22
89558: PUSH
89559: NOP4
89563: PUSH
89564: EMPTY
89565: LIST
89566: LIST
89567: PUSH
89568: LD_INT 21
89570: PUSH
89571: LD_INT 1
89573: PUSH
89574: EMPTY
89575: LIST
89576: LIST
89577: PUSH
89578: LD_INT 3
89580: PUSH
89581: LD_INT 23
89583: PUSH
89584: LD_INT 0
89586: PUSH
89587: EMPTY
89588: LIST
89589: LIST
89590: PUSH
89591: EMPTY
89592: LIST
89593: LIST
89594: PUSH
89595: EMPTY
89596: LIST
89597: LIST
89598: LIST
89599: PPUSH
89600: NOP4
89604: PUSH
89605: FOR_IN
89606: IFFALSE 89660
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
89608: NOP4
89612: PPUSH
89613: NOP4
89617: PUSH
89618: LD_INT 1
89620: PUSH
89621: LD_INT 2
89623: PUSH
89624: LD_INT 3
89626: PUSH
89627: LD_INT 4
89629: PUSH
89630: EMPTY
89631: LIST
89632: LIST
89633: LIST
89634: LIST
89635: IN
89636: IFFALSE 89658
// SetClass ( un , rand ( 1 , 4 ) ) ;
89638: NOP4
89642: PPUSH
89643: LD_INT 1
89645: PPUSH
89646: LD_INT 4
89648: PPUSH
89649: NOP4
89653: PPUSH
89654: NOP4
89658: GO 89605
89660: POP
89661: POP
// end ;
89662: PPOPN 1
89664: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
89665: NOP4
89669: PUSH
89670: NOP4
89674: AND
89675: IFFALSE 89754
89677: GO 89679
89679: DISABLE
89680: LD_INT 0
89682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
89683: NOP4
89687: PUSH
89688: LD_INT 22
89690: PUSH
89691: NOP4
89695: PUSH
89696: EMPTY
89697: LIST
89698: LIST
89699: PUSH
89700: LD_INT 21
89702: PUSH
89703: LD_INT 3
89705: PUSH
89706: EMPTY
89707: LIST
89708: LIST
89709: PUSH
89710: EMPTY
89711: LIST
89712: LIST
89713: PPUSH
89714: NOP4
89718: ST_TO_ADDR
// if not tmp then
89719: NOP4
89723: NOT
89724: IFFALSE 89728
// exit ;
89726: GO 89754
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
89728: NOP4
89732: PUSH
89733: LD_INT 1
89735: PPUSH
89736: NOP4
89740: PPUSH
89741: NOP4
89745: ARRAY
89746: PPUSH
89747: LD_INT 100
89749: PPUSH
89750: NOP4
// end ;
89754: PPOPN 1
89756: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
89757: NOP4
89761: PUSH
89762: NOP4
89766: AND
89767: IFFALSE 89865
89769: GO 89771
89771: DISABLE
89772: LD_INT 0
89774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
89775: NOP4
89779: PUSH
89780: LD_INT 22
89782: PUSH
89783: NOP4
89787: PUSH
89788: EMPTY
89789: LIST
89790: LIST
89791: PUSH
89792: LD_INT 21
89794: PUSH
89795: LD_INT 1
89797: PUSH
89798: EMPTY
89799: LIST
89800: LIST
89801: PUSH
89802: EMPTY
89803: LIST
89804: LIST
89805: PPUSH
89806: NOP4
89810: ST_TO_ADDR
// if not tmp then
89811: NOP4
89815: NOT
89816: IFFALSE 89820
// exit ;
89818: GO 89865
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
89820: NOP4
89824: PUSH
89825: LD_INT 1
89827: PPUSH
89828: NOP4
89832: PPUSH
89833: NOP4
89837: ARRAY
89838: PPUSH
89839: LD_INT 1
89841: PPUSH
89842: LD_INT 4
89844: PPUSH
89845: NOP4
89849: PPUSH
89850: LD_INT 3000
89852: PPUSH
89853: LD_INT 9000
89855: PPUSH
89856: NOP4
89860: PPUSH
89861: NOP4
// end ;
89865: PPOPN 1
89867: END
// every 0 0$1 trigger StreamModeActive and sDepot do
89868: NOP4
89872: PUSH
89873: NOP4
89877: AND
89878: IFFALSE 89898
89880: GO 89882
89882: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
89883: LD_INT 1
89885: PPUSH
89886: NOP4
89890: PPUSH
89891: LD_INT 0
89893: PPUSH
89894: NOP4
89898: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
89899: NOP4
89903: PUSH
89904: NOP4
89908: AND
89909: IFFALSE 89992
89911: GO 89913
89913: DISABLE
89914: LD_INT 0
89916: PPUSH
89917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
89918: NOP4
89922: PUSH
89923: LD_INT 22
89925: PUSH
89926: NOP4
89930: PUSH
89931: EMPTY
89932: LIST
89933: LIST
89934: PUSH
89935: LD_INT 21
89937: PUSH
89938: LD_INT 3
89940: PUSH
89941: EMPTY
89942: LIST
89943: LIST
89944: PUSH
89945: EMPTY
89946: LIST
89947: LIST
89948: PPUSH
89949: NOP4
89953: ST_TO_ADDR
// if not tmp then
89954: NOP4
89958: NOT
89959: IFFALSE 89963
// exit ;
89961: GO 89992
// for i in tmp do
89963: NOP4
89967: PUSH
89968: NOP4
89972: PUSH
89973: FOR_IN
89974: IFFALSE 89990
// SetBLevel ( i , 10 ) ;
89976: NOP4
89980: PPUSH
89981: LD_INT 10
89983: PPUSH
89984: NOP4
89988: GO 89973
89990: POP
89991: POP
// end ;
89992: PPOPN 2
89994: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
89995: NOP4
89999: PUSH
90000: NOP4
90004: AND
90005: IFFALSE 90116
90007: GO 90009
90009: DISABLE
90010: LD_INT 0
90012: PPUSH
90013: PPUSH
90014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
90015: NOP4
90019: PUSH
90020: LD_INT 22
90022: PUSH
90023: NOP4
90027: PUSH
90028: EMPTY
90029: LIST
90030: LIST
90031: PUSH
90032: LD_INT 25
90034: PUSH
90035: LD_INT 1
90037: PUSH
90038: EMPTY
90039: LIST
90040: LIST
90041: PUSH
90042: EMPTY
90043: LIST
90044: LIST
90045: PPUSH
90046: NOP4
90050: ST_TO_ADDR
// if not tmp then
90051: NOP4
90055: NOT
90056: IFFALSE 90060
// exit ;
90058: GO 90116
// un := tmp [ rand ( 1 , tmp ) ] ;
90060: NOP4
90064: PUSH
90065: NOP4
90069: PUSH
90070: LD_INT 1
90072: PPUSH
90073: NOP4
90077: PPUSH
90078: NOP4
90082: ARRAY
90083: ST_TO_ADDR
// if Crawls ( un ) then
90084: NOP4
90088: PPUSH
90089: NOP4
90093: IFFALSE 90104
// ComWalk ( un ) ;
90095: NOP4
90099: PPUSH
90100: NOP4
// SetClass ( un , class_sniper ) ;
90104: NOP4
90108: PPUSH
90109: LD_INT 5
90111: PPUSH
90112: NOP4
// end ;
90116: PPOPN 3
90118: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
90119: NOP4
90123: PUSH
90124: NOP4
90128: AND
90129: PUSH
90130: NOP4
90134: PUSH
90135: LD_INT 3
90137: LESS
90138: AND
90139: IFFALSE 90158
90141: GO 90143
90143: DISABLE
// Difficulty := Difficulty + 1 ;
90144: LD_ADDR_OWVAR 67
90148: PUSH
90149: NOP4
90153: PUSH
90154: LD_INT 1
90156: PLUS
90157: ST_TO_ADDR
90158: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
90159: NOP4
90163: PUSH
90164: NOP4
90168: AND
90169: IFFALSE 90272
90171: GO 90173
90173: DISABLE
90174: LD_INT 0
90176: PPUSH
// begin for i := 1 to 5 do
90177: NOP4
90181: PUSH
90182: DOUBLE
90183: LD_INT 1
90185: DEC
90186: ST_TO_ADDR
90187: LD_INT 5
90189: PUSH
90190: FOR_TO
90191: IFFALSE 90270
// begin uc_nation := nation_nature ;
90193: LD_ADDR_OWVAR 21
90197: PUSH
90198: LD_INT 0
90200: ST_TO_ADDR
// uc_side := 0 ;
90201: LD_ADDR_OWVAR 20
90205: PUSH
90206: LD_INT 0
90208: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
90209: LD_ADDR_OWVAR 29
90213: PUSH
90214: LD_INT 12
90216: PUSH
90217: LD_INT 12
90219: PUSH
90220: EMPTY
90221: LIST
90222: LIST
90223: ST_TO_ADDR
// hc_agressivity := 20 ;
90224: LD_ADDR_OWVAR 35
90228: PUSH
90229: LD_INT 20
90231: ST_TO_ADDR
// hc_class := class_tiger ;
90232: LD_ADDR_OWVAR 28
90236: PUSH
90237: LD_INT 14
90239: ST_TO_ADDR
// hc_gallery :=  ;
90240: LD_ADDR_OWVAR 33
90244: PUSH
90245: LD_STRING 
90247: ST_TO_ADDR
// hc_name :=  ;
90248: LD_ADDR_OWVAR 26
90252: PUSH
90253: LD_STRING 
90255: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
90256: NOP4
90260: PPUSH
90261: LD_INT 0
90263: PPUSH
90264: NOP4
// end ;
90268: GO 90190
90270: POP
90271: POP
// end ;
90272: PPOPN 1
90274: END
// every 0 0$1 trigger StreamModeActive and sBomb do
90275: NOP4
90279: PUSH
90280: NOP4
90284: AND
90285: IFFALSE 90294
90287: GO 90289
90289: DISABLE
// StreamSibBomb ;
90290: NOP4
90294: END
// export function StreamSibBomb ; var i , x , y ; begin
90295: LD_INT 0
90297: PPUSH
90298: PPUSH
90299: PPUSH
90300: PPUSH
// result := false ;
90301: NOP4
90305: PUSH
90306: LD_INT 0
90308: ST_TO_ADDR
// for i := 1 to 16 do
90309: NOP4
90313: PUSH
90314: DOUBLE
90315: LD_INT 1
90317: DEC
90318: ST_TO_ADDR
90319: LD_INT 16
90321: PUSH
90322: FOR_TO
90323: IFFALSE 90522
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
90325: NOP4
90329: PUSH
90330: LD_INT 10
90332: PUSH
90333: LD_INT 20
90335: PUSH
90336: LD_INT 30
90338: PUSH
90339: LD_INT 40
90341: PUSH
90342: LD_INT 50
90344: PUSH
90345: LD_INT 60
90347: PUSH
90348: LD_INT 70
90350: PUSH
90351: LD_INT 80
90353: PUSH
90354: LD_INT 90
90356: PUSH
90357: LD_INT 100
90359: PUSH
90360: LD_INT 110
90362: PUSH
90363: LD_INT 120
90365: PUSH
90366: LD_INT 130
90368: PUSH
90369: LD_INT 140
90371: PUSH
90372: LD_INT 150
90374: PUSH
90375: EMPTY
90376: LIST
90377: LIST
90378: LIST
90379: LIST
90380: LIST
90381: LIST
90382: LIST
90383: LIST
90384: LIST
90385: LIST
90386: LIST
90387: LIST
90388: LIST
90389: LIST
90390: LIST
90391: PUSH
90392: LD_INT 1
90394: PPUSH
90395: LD_INT 15
90397: PPUSH
90398: NOP4
90402: ARRAY
90403: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
90404: NOP4
90408: PUSH
90409: LD_INT 10
90411: PUSH
90412: LD_INT 20
90414: PUSH
90415: LD_INT 30
90417: PUSH
90418: LD_INT 40
90420: PUSH
90421: LD_INT 50
90423: PUSH
90424: LD_INT 60
90426: PUSH
90427: LD_INT 70
90429: PUSH
90430: LD_INT 80
90432: PUSH
90433: LD_INT 90
90435: PUSH
90436: LD_INT 100
90438: PUSH
90439: LD_INT 110
90441: PUSH
90442: LD_INT 120
90444: PUSH
90445: LD_INT 130
90447: PUSH
90448: LD_INT 140
90450: PUSH
90451: LD_INT 150
90453: PUSH
90454: EMPTY
90455: LIST
90456: LIST
90457: LIST
90458: LIST
90459: LIST
90460: LIST
90461: LIST
90462: LIST
90463: LIST
90464: LIST
90465: LIST
90466: LIST
90467: LIST
90468: LIST
90469: LIST
90470: PUSH
90471: LD_INT 1
90473: PPUSH
90474: LD_INT 15
90476: PPUSH
90477: NOP4
90481: ARRAY
90482: ST_TO_ADDR
// if ValidHex ( x , y ) then
90483: NOP4
90487: PPUSH
90488: NOP4
90492: PPUSH
90493: NOP4
90497: IFFALSE 90520
// begin result := [ x , y ] ;
90499: NOP4
90503: PUSH
90504: NOP4
90508: PUSH
90509: NOP4
90513: PUSH
90514: EMPTY
90515: LIST
90516: LIST
90517: ST_TO_ADDR
// break ;
90518: GO 90522
// end ; end ;
90520: GO 90322
90522: POP
90523: POP
// if result then
90524: NOP4
90528: IFFALSE 90588
// begin ToLua ( playSibBomb() ) ;
90530: LD_STRING playSibBomb()
90532: PPUSH
90533: NOP4
// wait ( 0 0$14 ) ;
90537: LD_INT 490
90539: PPUSH
90540: NOP4
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
90544: NOP4
90548: PUSH
90549: LD_INT 1
90551: ARRAY
90552: PPUSH
90553: NOP4
90557: PUSH
90558: LD_INT 2
90560: ARRAY
90561: PPUSH
90562: NOP4
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
90566: NOP4
90570: PUSH
90571: LD_INT 1
90573: ARRAY
90574: PPUSH
90575: NOP4
90579: PUSH
90580: LD_INT 2
90582: ARRAY
90583: PPUSH
90584: NOP4
// end ; end ;
90588: LD_VAR 0 1
90592: RET
// every 0 0$1 trigger StreamModeActive and sReset do
90593: NOP4
90597: PUSH
90598: NOP4
90602: AND
90603: IFFALSE 90615
90605: GO 90607
90607: DISABLE
// YouLost (  ) ;
90608: LD_STRING 
90610: PPUSH
90611: NOP4
90615: END
// every 0 0$1 trigger StreamModeActive and sFog do
90616: NOP4
90620: PUSH
90621: NOP4
90625: AND
90626: IFFALSE 90640
90628: GO 90630
90630: DISABLE
// FogOff ( your_side ) ;
90631: NOP4
90635: PPUSH
90636: NOP4
90640: END
// every 0 0$1 trigger StreamModeActive and sSun do
90641: NOP4
90645: PUSH
90646: NOP4
90650: AND
90651: IFFALSE 90679
90653: GO 90655
90655: DISABLE
// begin solar_recharge_percent := 0 ;
90656: LD_ADDR_OWVAR 79
90660: PUSH
90661: LD_INT 0
90663: ST_TO_ADDR
// wait ( 5 5$00 ) ;
90664: LD_INT 10500
90666: PPUSH
90667: NOP4
// solar_recharge_percent := 100 ;
90671: LD_ADDR_OWVAR 79
90675: PUSH
90676: LD_INT 100
90678: ST_TO_ADDR
// end ;
90679: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
90680: NOP4
90684: PUSH
90685: NOP4
90689: AND
90690: IFFALSE 90929
90692: GO 90694
90694: DISABLE
90695: LD_INT 0
90697: PPUSH
90698: PPUSH
90699: PPUSH
// begin tmp := [ ] ;
90700: NOP4
90704: PUSH
90705: EMPTY
90706: ST_TO_ADDR
// for i := 1 to 6 do
90707: NOP4
90711: PUSH
90712: DOUBLE
90713: LD_INT 1
90715: DEC
90716: ST_TO_ADDR
90717: LD_INT 6
90719: PUSH
90720: FOR_TO
90721: IFFALSE 90826
// begin uc_nation := nation_nature ;
90723: LD_ADDR_OWVAR 21
90727: PUSH
90728: LD_INT 0
90730: ST_TO_ADDR
// uc_side := 0 ;
90731: LD_ADDR_OWVAR 20
90735: PUSH
90736: LD_INT 0
90738: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
90739: LD_ADDR_OWVAR 29
90743: PUSH
90744: LD_INT 12
90746: PUSH
90747: LD_INT 12
90749: PUSH
90750: EMPTY
90751: LIST
90752: LIST
90753: ST_TO_ADDR
// hc_agressivity := 20 ;
90754: LD_ADDR_OWVAR 35
90758: PUSH
90759: LD_INT 20
90761: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
90762: LD_ADDR_OWVAR 28
90766: PUSH
90767: LD_INT 17
90769: ST_TO_ADDR
// hc_gallery :=  ;
90770: LD_ADDR_OWVAR 33
90774: PUSH
90775: LD_STRING 
90777: ST_TO_ADDR
// hc_name :=  ;
90778: LD_ADDR_OWVAR 26
90782: PUSH
90783: LD_STRING 
90785: ST_TO_ADDR
// un := CreateHuman ;
90786: NOP4
90790: PUSH
90791: NOP4
90795: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
90796: NOP4
90800: PPUSH
90801: LD_INT 1
90803: PPUSH
90804: NOP4
// tmp := tmp ^ un ;
90808: NOP4
90812: PUSH
90813: NOP4
90817: PUSH
90818: NOP4
90822: ADD
90823: ST_TO_ADDR
// end ;
90824: GO 90720
90826: POP
90827: POP
// repeat wait ( 0 0$1 ) ;
90828: LD_INT 35
90830: PPUSH
90831: NOP4
// for un in tmp do
90835: NOP4
90839: PUSH
90840: NOP4
90844: PUSH
90845: FOR_IN
90846: IFFALSE 90920
// begin if IsDead ( un ) then
90848: NOP4
90852: PPUSH
90853: NOP4
90857: IFFALSE 90877
// begin tmp := tmp diff un ;
90859: NOP4
90863: PUSH
90864: NOP4
90868: PUSH
90869: NOP4
90873: DIFF
90874: ST_TO_ADDR
// continue ;
90875: GO 90845
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
90877: NOP4
90881: PPUSH
90882: LD_INT 3
90884: PUSH
90885: LD_INT 22
90887: PUSH
90888: LD_INT 0
90890: PUSH
90891: EMPTY
90892: LIST
90893: LIST
90894: PUSH
90895: EMPTY
90896: LIST
90897: LIST
90898: PPUSH
90899: NOP4
90903: PPUSH
90904: NOP4
90908: PPUSH
90909: NOP4
90913: PPUSH
90914: NOP4
// end ;
90918: GO 90845
90920: POP
90921: POP
// until not tmp ;
90922: NOP4
90926: NOT
90927: IFFALSE 90828
// end ;
90929: PPOPN 3
90931: END
// every 0 0$1 trigger StreamModeActive and sTroll do
90932: NOP4
90936: PUSH
90937: NOP4
90941: AND
90942: IFFALSE 90996
90944: GO 90946
90946: DISABLE
// begin ToLua ( displayTroll(); ) ;
90947: LD_STRING displayTroll();
90949: PPUSH
90950: NOP4
// wait ( 3 3$00 ) ;
90954: LD_INT 6300
90956: PPUSH
90957: NOP4
// ToLua ( hideTroll(); ) ;
90961: LD_STRING hideTroll();
90963: PPUSH
90964: NOP4
// wait ( 1 1$00 ) ;
90968: LD_INT 2100
90970: PPUSH
90971: NOP4
// ToLua ( displayTroll(); ) ;
90975: LD_STRING displayTroll();
90977: PPUSH
90978: NOP4
// wait ( 1 1$00 ) ;
90982: LD_INT 2100
90984: PPUSH
90985: NOP4
// ToLua ( hideTroll(); ) ;
90989: LD_STRING hideTroll();
90991: PPUSH
90992: NOP4
// end ;
90996: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
90997: NOP4
91001: PUSH
91002: NOP4
91006: AND
91007: IFFALSE 91070
91009: GO 91011
91011: DISABLE
91012: LD_INT 0
91014: PPUSH
// begin p := 0 ;
91015: NOP4
91019: PUSH
91020: LD_INT 0
91022: ST_TO_ADDR
// repeat game_speed := 1 ;
91023: LD_ADDR_OWVAR 65
91027: PUSH
91028: LD_INT 1
91030: ST_TO_ADDR
// wait ( 0 0$1 ) ;
91031: LD_INT 35
91033: PPUSH
91034: NOP4
// p := p + 1 ;
91038: NOP4
91042: PUSH
91043: NOP4
91047: PUSH
91048: LD_INT 1
91050: PLUS
91051: ST_TO_ADDR
// until p >= 60 ;
91052: NOP4
91056: PUSH
91057: LD_INT 60
91059: GREATEREQUAL
91060: IFFALSE 91023
// game_speed := 4 ;
91062: LD_ADDR_OWVAR 65
91066: PUSH
91067: LD_INT 4
91069: ST_TO_ADDR
// end ;
91070: PPOPN 1
91072: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
91073: NOP4
91077: PUSH
91078: NOP4
91082: AND
91083: IFFALSE 91229
91085: GO 91087
91087: DISABLE
91088: LD_INT 0
91090: PPUSH
91091: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
91092: NOP4
91096: PUSH
91097: LD_INT 22
91099: PUSH
91100: NOP4
91104: PUSH
91105: EMPTY
91106: LIST
91107: LIST
91108: PUSH
91109: LD_INT 2
91111: PUSH
91112: LD_INT 30
91114: PUSH
91115: LD_INT 0
91117: PUSH
91118: EMPTY
91119: LIST
91120: LIST
91121: PUSH
91122: LD_INT 30
91124: PUSH
91125: LD_INT 1
91127: PUSH
91128: EMPTY
91129: LIST
91130: LIST
91131: PUSH
91132: EMPTY
91133: LIST
91134: LIST
91135: LIST
91136: PUSH
91137: EMPTY
91138: LIST
91139: LIST
91140: PPUSH
91141: NOP4
91145: ST_TO_ADDR
// if not depot then
91146: NOP4
91150: NOT
91151: IFFALSE 91155
// exit ;
91153: GO 91229
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
91155: NOP4
91159: PUSH
91160: NOP4
91164: PUSH
91165: LD_INT 1
91167: PPUSH
91168: NOP4
91172: PPUSH
91173: NOP4
91177: ARRAY
91178: PPUSH
91179: NOP4
91183: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
91184: NOP4
91188: PPUSH
91189: LD_INT 1
91191: PPUSH
91192: LD_INT 0
91194: PPUSH
91195: NOP4
// SetResourceType ( base , mat_oil , 0 ) ;
91199: NOP4
91203: PPUSH
91204: LD_INT 2
91206: PPUSH
91207: LD_INT 0
91209: PPUSH
91210: NOP4
// SetResourceType ( base , mat_siberit , 0 ) ;
91214: NOP4
91218: PPUSH
91219: LD_INT 3
91221: PPUSH
91222: LD_INT 0
91224: PPUSH
91225: NOP4
// end ;
91229: PPOPN 2
91231: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
91232: NOP4
91236: PUSH
91237: NOP4
91241: AND
91242: IFFALSE 91339
91244: GO 91246
91246: DISABLE
91247: LD_INT 0
91249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
91250: NOP4
91254: PUSH
91255: LD_INT 22
91257: PUSH
91258: NOP4
91262: PUSH
91263: EMPTY
91264: LIST
91265: LIST
91266: PUSH
91267: LD_INT 21
91269: PUSH
91270: LD_INT 1
91272: PUSH
91273: EMPTY
91274: LIST
91275: LIST
91276: PUSH
91277: LD_INT 3
91279: PUSH
91280: LD_INT 23
91282: PUSH
91283: LD_INT 0
91285: PUSH
91286: EMPTY
91287: LIST
91288: LIST
91289: PUSH
91290: EMPTY
91291: LIST
91292: LIST
91293: PUSH
91294: EMPTY
91295: LIST
91296: LIST
91297: LIST
91298: PPUSH
91299: NOP4
91303: ST_TO_ADDR
// if not tmp then
91304: NOP4
91308: NOT
91309: IFFALSE 91313
// exit ;
91311: GO 91339
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
91313: NOP4
91317: PUSH
91318: LD_INT 1
91320: PPUSH
91321: NOP4
91325: PPUSH
91326: NOP4
91330: ARRAY
91331: PPUSH
91332: LD_INT 200
91334: PPUSH
91335: NOP4
// end ;
91339: PPOPN 1
91341: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
91342: NOP4
91346: PUSH
91347: NOP4
91351: AND
91352: IFFALSE 91431
91354: GO 91356
91356: DISABLE
91357: LD_INT 0
91359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
91360: NOP4
91364: PUSH
91365: LD_INT 22
91367: PUSH
91368: NOP4
91372: PUSH
91373: EMPTY
91374: LIST
91375: LIST
91376: PUSH
91377: LD_INT 21
91379: PUSH
91380: LD_INT 2
91382: PUSH
91383: EMPTY
91384: LIST
91385: LIST
91386: PUSH
91387: EMPTY
91388: LIST
91389: LIST
91390: PPUSH
91391: NOP4
91395: ST_TO_ADDR
// if not tmp then
91396: NOP4
91400: NOT
91401: IFFALSE 91405
// exit ;
91403: GO 91431
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
91405: NOP4
91409: PUSH
91410: LD_INT 1
91412: PPUSH
91413: NOP4
91417: PPUSH
91418: NOP4
91422: ARRAY
91423: PPUSH
91424: LD_INT 60
91426: PPUSH
91427: NOP4
// end ;
91431: PPOPN 1
91433: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
91434: NOP4
91438: PUSH
91439: NOP4
91443: AND
91444: IFFALSE 91543
91446: GO 91448
91448: DISABLE
91449: LD_INT 0
91451: PPUSH
91452: PPUSH
// begin enable ;
91453: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
91454: NOP4
91458: PUSH
91459: LD_INT 22
91461: PUSH
91462: NOP4
91466: PUSH
91467: EMPTY
91468: LIST
91469: LIST
91470: PUSH
91471: LD_INT 61
91473: PUSH
91474: EMPTY
91475: LIST
91476: PUSH
91477: LD_INT 33
91479: PUSH
91480: LD_INT 2
91482: PUSH
91483: EMPTY
91484: LIST
91485: LIST
91486: PUSH
91487: EMPTY
91488: LIST
91489: LIST
91490: LIST
91491: PPUSH
91492: NOP4
91496: ST_TO_ADDR
// if not tmp then
91497: NOP4
91501: NOT
91502: IFFALSE 91506
// exit ;
91504: GO 91543
// for i in tmp do
91506: NOP4
91510: PUSH
91511: NOP4
91515: PUSH
91516: FOR_IN
91517: IFFALSE 91541
// if IsControledBy ( i ) then
91519: NOP4
91523: PPUSH
91524: NOP4
91528: IFFALSE 91539
// ComUnlink ( i ) ;
91530: NOP4
91534: PPUSH
91535: NOP4
91539: GO 91516
91541: POP
91542: POP
// end ;
91543: PPOPN 2
91545: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
91546: NOP4
91550: PUSH
91551: NOP4
91555: AND
91556: IFFALSE 91696
91558: GO 91560
91560: DISABLE
91561: LD_INT 0
91563: PPUSH
91564: PPUSH
// begin ToLua ( displayPowell(); ) ;
91565: LD_STRING displayPowell();
91567: PPUSH
91568: NOP4
// uc_side := 0 ;
91572: LD_ADDR_OWVAR 20
91576: PUSH
91577: LD_INT 0
91579: ST_TO_ADDR
// uc_nation := 2 ;
91580: LD_ADDR_OWVAR 21
91584: PUSH
91585: LD_INT 2
91587: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
91588: LD_ADDR_OWVAR 37
91592: PUSH
91593: LD_INT 14
91595: ST_TO_ADDR
// vc_engine := engine_siberite ;
91596: LD_ADDR_OWVAR 39
91600: PUSH
91601: LD_INT 3
91603: ST_TO_ADDR
// vc_control := control_apeman ;
91604: LD_ADDR_OWVAR 38
91608: PUSH
91609: LD_INT 5
91611: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
91612: LD_ADDR_OWVAR 40
91616: PUSH
91617: LD_INT 29
91619: ST_TO_ADDR
// un := CreateVehicle ;
91620: NOP4
91624: PUSH
91625: NOP4
91629: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
91630: NOP4
91634: PPUSH
91635: LD_INT 1
91637: PPUSH
91638: NOP4
// repeat wait ( 0 0$1 ) ;
91642: LD_INT 35
91644: PPUSH
91645: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
91649: NOP4
91653: PPUSH
91654: LD_INT 22
91656: PUSH
91657: NOP4
91661: PUSH
91662: EMPTY
91663: LIST
91664: LIST
91665: PPUSH
91666: NOP4
91670: PPUSH
91671: NOP4
91675: PPUSH
91676: NOP4
91680: PPUSH
91681: NOP4
// until IsDead ( un ) ;
91685: NOP4
91689: PPUSH
91690: NOP4
91694: IFFALSE 91642
// end ;
91696: PPOPN 2
91698: END
// every 0 0$1 trigger StreamModeActive and sStu do
91699: NOP4
91703: PUSH
91704: NOP4
91708: AND
91709: IFFALSE 91725
91711: GO 91713
91713: DISABLE
// begin ToLua ( displayStucuk(); ) ;
91714: LD_STRING displayStucuk();
91716: PPUSH
91717: NOP4
// ResetFog ;
91721: NOP4
// end ;
91725: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
91726: NOP4
91730: PUSH
91731: NOP4
91735: AND
91736: IFFALSE 91877
91738: GO 91740
91740: DISABLE
91741: LD_INT 0
91743: PPUSH
91744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
91745: NOP4
91749: PUSH
91750: LD_INT 22
91752: PUSH
91753: NOP4
91757: PUSH
91758: EMPTY
91759: LIST
91760: LIST
91761: PUSH
91762: LD_INT 21
91764: PUSH
91765: LD_INT 1
91767: PUSH
91768: EMPTY
91769: LIST
91770: LIST
91771: PUSH
91772: EMPTY
91773: LIST
91774: LIST
91775: PPUSH
91776: NOP4
91780: ST_TO_ADDR
// if not tmp then
91781: NOP4
91785: NOT
91786: IFFALSE 91790
// exit ;
91788: GO 91877
// un := tmp [ rand ( 1 , tmp ) ] ;
91790: NOP4
91794: PUSH
91795: NOP4
91799: PUSH
91800: LD_INT 1
91802: PPUSH
91803: NOP4
91807: PPUSH
91808: NOP4
91812: ARRAY
91813: ST_TO_ADDR
// SetSide ( un , 0 ) ;
91814: NOP4
91818: PPUSH
91819: LD_INT 0
91821: PPUSH
91822: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
91826: NOP4
91830: PPUSH
91831: NOP4
91835: PUSH
91836: NOP4
91840: DIFF
91841: PPUSH
91842: NOP4
91846: PPUSH
91847: NOP4
91851: PPUSH
91852: NOP4
// wait ( 0 0$20 ) ;
91856: LD_INT 700
91858: PPUSH
91859: NOP4
// SetSide ( un , your_side ) ;
91863: NOP4
91867: PPUSH
91868: NOP4
91872: PPUSH
91873: NOP4
// end ;
91877: PPOPN 2
91879: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
91880: NOP4
91884: PUSH
91885: NOP4
91889: AND
91890: IFFALSE 91996
91892: GO 91894
91894: DISABLE
91895: LD_INT 0
91897: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
91898: NOP4
91902: PUSH
91903: LD_INT 22
91905: PUSH
91906: NOP4
91910: PUSH
91911: EMPTY
91912: LIST
91913: LIST
91914: PUSH
91915: LD_INT 2
91917: PUSH
91918: LD_INT 30
91920: PUSH
91921: LD_INT 0
91923: PUSH
91924: EMPTY
91925: LIST
91926: LIST
91927: PUSH
91928: LD_INT 30
91930: PUSH
91931: LD_INT 1
91933: PUSH
91934: EMPTY
91935: LIST
91936: LIST
91937: PUSH
91938: EMPTY
91939: LIST
91940: LIST
91941: LIST
91942: PUSH
91943: EMPTY
91944: LIST
91945: LIST
91946: PPUSH
91947: NOP4
91951: ST_TO_ADDR
// if not depot then
91952: NOP4
91956: NOT
91957: IFFALSE 91961
// exit ;
91959: GO 91996
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
91961: NOP4
91965: PUSH
91966: LD_INT 1
91968: ARRAY
91969: PPUSH
91970: NOP4
91974: PPUSH
91975: NOP4
91979: PUSH
91980: LD_INT 1
91982: ARRAY
91983: PPUSH
91984: NOP4
91988: PPUSH
91989: LD_INT 70
91991: PPUSH
91992: NOP4
// end ;
91996: PPOPN 1
91998: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
91999: NOP4
92003: PUSH
92004: NOP4
92008: AND
92009: IFFALSE 92220
92011: GO 92013
92013: DISABLE
92014: LD_INT 0
92016: PPUSH
92017: PPUSH
92018: PPUSH
92019: PPUSH
92020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
92021: NOP4
92025: PUSH
92026: LD_INT 22
92028: PUSH
92029: NOP4
92033: PUSH
92034: EMPTY
92035: LIST
92036: LIST
92037: PUSH
92038: LD_INT 21
92040: PUSH
92041: LD_INT 1
92043: PUSH
92044: EMPTY
92045: LIST
92046: LIST
92047: PUSH
92048: EMPTY
92049: LIST
92050: LIST
92051: PPUSH
92052: NOP4
92056: ST_TO_ADDR
// if not tmp then
92057: NOP4
92061: NOT
92062: IFFALSE 92066
// exit ;
92064: GO 92220
// for i in tmp do
92066: NOP4
92070: PUSH
92071: NOP4
92075: PUSH
92076: FOR_IN
92077: IFFALSE 92218
// begin d := rand ( 0 , 5 ) ;
92079: NOP4
92083: PUSH
92084: LD_INT 0
92086: PPUSH
92087: LD_INT 5
92089: PPUSH
92090: NOP4
92094: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
92095: NOP4
92099: PUSH
92100: NOP4
92104: PPUSH
92105: NOP4
92109: PPUSH
92110: NOP4
92114: PPUSH
92115: LD_INT 3
92117: PPUSH
92118: LD_INT 12
92120: PPUSH
92121: NOP4
92125: PPUSH
92126: NOP4
92130: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
92131: NOP4
92135: PUSH
92136: NOP4
92140: PPUSH
92141: NOP4
92145: PPUSH
92146: NOP4
92150: PPUSH
92151: LD_INT 3
92153: PPUSH
92154: LD_INT 12
92156: PPUSH
92157: NOP4
92161: PPUSH
92162: NOP4
92166: ST_TO_ADDR
// if ValidHex ( x , y ) then
92167: NOP4
92171: PPUSH
92172: NOP4
92176: PPUSH
92177: NOP4
92181: IFFALSE 92216
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
92183: NOP4
92187: PPUSH
92188: NOP4
92192: PPUSH
92193: NOP4
92197: PPUSH
92198: LD_INT 3
92200: PPUSH
92201: LD_INT 6
92203: PPUSH
92204: NOP4
92208: PPUSH
92209: LD_INT 1
92211: PPUSH
92212: NOP4
// end ;
92216: GO 92076
92218: POP
92219: POP
// end ;
92220: PPOPN 5
92222: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
92223: NOP4
92227: PUSH
92228: NOP4
92232: AND
92233: IFFALSE 92327
92235: GO 92237
92237: DISABLE
92238: LD_INT 0
92240: PPUSH
92241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
92242: NOP4
92246: PUSH
92247: LD_INT 22
92249: PUSH
92250: NOP4
92254: PUSH
92255: EMPTY
92256: LIST
92257: LIST
92258: PUSH
92259: LD_INT 32
92261: PUSH
92262: LD_INT 1
92264: PUSH
92265: EMPTY
92266: LIST
92267: LIST
92268: PUSH
92269: LD_INT 21
92271: PUSH
92272: LD_INT 2
92274: PUSH
92275: EMPTY
92276: LIST
92277: LIST
92278: PUSH
92279: EMPTY
92280: LIST
92281: LIST
92282: LIST
92283: PPUSH
92284: NOP4
92288: ST_TO_ADDR
// if not tmp then
92289: NOP4
92293: NOT
92294: IFFALSE 92298
// exit ;
92296: GO 92327
// for i in tmp do
92298: NOP4
92302: PUSH
92303: NOP4
92307: PUSH
92308: FOR_IN
92309: IFFALSE 92325
// SetFuel ( i , 0 ) ;
92311: NOP4
92315: PPUSH
92316: LD_INT 0
92318: PPUSH
92319: NOP4
92323: GO 92308
92325: POP
92326: POP
// end ;
92327: PPOPN 2
92329: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
92330: NOP4
92334: PUSH
92335: NOP4
92339: AND
92340: IFFALSE 92406
92342: GO 92344
92344: DISABLE
92345: LD_INT 0
92347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
92348: NOP4
92352: PUSH
92353: LD_INT 22
92355: PUSH
92356: NOP4
92360: PUSH
92361: EMPTY
92362: LIST
92363: LIST
92364: PUSH
92365: LD_INT 30
92367: PUSH
92368: LD_INT 29
92370: PUSH
92371: EMPTY
92372: LIST
92373: LIST
92374: PUSH
92375: EMPTY
92376: LIST
92377: LIST
92378: PPUSH
92379: NOP4
92383: ST_TO_ADDR
// if not tmp then
92384: NOP4
92388: NOT
92389: IFFALSE 92393
// exit ;
92391: GO 92406
// DestroyUnit ( tmp [ 1 ] ) ;
92393: NOP4
92397: PUSH
92398: LD_INT 1
92400: ARRAY
92401: PPUSH
92402: NOP4
// end ;
92406: PPOPN 1
92408: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
92409: NOP4
92413: PUSH
92414: NOP4
92418: AND
92419: IFFALSE 92548
92421: GO 92423
92423: DISABLE
92424: LD_INT 0
92426: PPUSH
// begin uc_side := 0 ;
92427: LD_ADDR_OWVAR 20
92431: PUSH
92432: LD_INT 0
92434: ST_TO_ADDR
// uc_nation := nation_arabian ;
92435: LD_ADDR_OWVAR 21
92439: PUSH
92440: LD_INT 2
92442: ST_TO_ADDR
// hc_gallery :=  ;
92443: LD_ADDR_OWVAR 33
92447: PUSH
92448: LD_STRING 
92450: ST_TO_ADDR
// hc_name :=  ;
92451: LD_ADDR_OWVAR 26
92455: PUSH
92456: LD_STRING 
92458: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
92459: LD_INT 1
92461: PPUSH
92462: LD_INT 11
92464: PPUSH
92465: LD_INT 10
92467: PPUSH
92468: NOP4
// un := CreateHuman ;
92472: NOP4
92476: PUSH
92477: NOP4
92481: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
92482: NOP4
92486: PPUSH
92487: LD_INT 1
92489: PPUSH
92490: NOP4
// repeat wait ( 0 0$1 ) ;
92494: LD_INT 35
92496: PPUSH
92497: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
92501: NOP4
92505: PPUSH
92506: LD_INT 22
92508: PUSH
92509: NOP4
92513: PUSH
92514: EMPTY
92515: LIST
92516: LIST
92517: PPUSH
92518: NOP4
92522: PPUSH
92523: NOP4
92527: PPUSH
92528: NOP4
92532: PPUSH
92533: NOP4
// until IsDead ( un ) ;
92537: NOP4
92541: PPUSH
92542: NOP4
92546: IFFALSE 92494
// end ;
92548: PPOPN 1
92550: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
92551: NOP4
92555: PUSH
92556: NOP4
92560: AND
92561: IFFALSE 92573
92563: GO 92565
92565: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
92566: LD_STRING earthquake(getX(game), 0, 32)
92568: PPUSH
92569: NOP4
92573: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
92574: NOP4
92578: PUSH
92579: NOP4
92583: AND
92584: IFFALSE 92675
92586: GO 92588
92588: DISABLE
92589: LD_INT 0
92591: PPUSH
// begin enable ;
92592: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
92593: NOP4
92597: PUSH
92598: LD_INT 22
92600: PUSH
92601: NOP4
92605: PUSH
92606: EMPTY
92607: LIST
92608: LIST
92609: PUSH
92610: LD_INT 21
92612: PUSH
92613: LD_INT 2
92615: PUSH
92616: EMPTY
92617: LIST
92618: LIST
92619: PUSH
92620: LD_INT 33
92622: PUSH
92623: LD_INT 3
92625: PUSH
92626: EMPTY
92627: LIST
92628: LIST
92629: PUSH
92630: EMPTY
92631: LIST
92632: LIST
92633: LIST
92634: PPUSH
92635: NOP4
92639: ST_TO_ADDR
// if not tmp then
92640: NOP4
92644: NOT
92645: IFFALSE 92649
// exit ;
92647: GO 92675
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
92649: NOP4
92653: PUSH
92654: LD_INT 1
92656: PPUSH
92657: NOP4
92661: PPUSH
92662: NOP4
92666: ARRAY
92667: PPUSH
92668: LD_INT 1
92670: PPUSH
92671: NOP4
// end ;
92675: PPOPN 1
92677: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
92678: NOP4
92682: PUSH
92683: NOP4
92687: AND
92688: IFFALSE 92829
92690: GO 92692
92692: DISABLE
92693: LD_INT 0
92695: PPUSH
92696: PPUSH
92697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
92698: NOP4
92702: PUSH
92703: LD_INT 22
92705: PUSH
92706: NOP4
92710: PUSH
92711: EMPTY
92712: LIST
92713: LIST
92714: PUSH
92715: LD_INT 25
92717: PUSH
92718: LD_INT 1
92720: PUSH
92721: EMPTY
92722: LIST
92723: LIST
92724: PUSH
92725: EMPTY
92726: LIST
92727: LIST
92728: PPUSH
92729: NOP4
92733: ST_TO_ADDR
// if not tmp then
92734: NOP4
92738: NOT
92739: IFFALSE 92743
// exit ;
92741: GO 92829
// un := tmp [ rand ( 1 , tmp ) ] ;
92743: NOP4
92747: PUSH
92748: NOP4
92752: PUSH
92753: LD_INT 1
92755: PPUSH
92756: NOP4
92760: PPUSH
92761: NOP4
92765: ARRAY
92766: ST_TO_ADDR
// if Crawls ( un ) then
92767: NOP4
92771: PPUSH
92772: NOP4
92776: IFFALSE 92787
// ComWalk ( un ) ;
92778: NOP4
92782: PPUSH
92783: NOP4
// SetClass ( un , class_bazooker ) ;
92787: NOP4
92791: PPUSH
92792: LD_INT 9
92794: PPUSH
92795: NOP4
// SetTech ( tech_tauRad , your_side , state_researched ) ;
92799: LD_INT 28
92801: PPUSH
92802: NOP4
92806: PPUSH
92807: LD_INT 2
92809: PPUSH
92810: NOP4
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
92814: LD_INT 29
92816: PPUSH
92817: NOP4
92821: PPUSH
92822: LD_INT 2
92824: PPUSH
92825: NOP4
// end ;
92829: PPOPN 3
92831: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
92832: NOP4
92836: PUSH
92837: NOP4
92841: AND
92842: IFFALSE 92953
92844: GO 92846
92846: DISABLE
92847: LD_INT 0
92849: PPUSH
92850: PPUSH
92851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
92852: NOP4
92856: PUSH
92857: LD_INT 22
92859: PUSH
92860: NOP4
92864: PUSH
92865: EMPTY
92866: LIST
92867: LIST
92868: PUSH
92869: LD_INT 25
92871: PUSH
92872: LD_INT 1
92874: PUSH
92875: EMPTY
92876: LIST
92877: LIST
92878: PUSH
92879: EMPTY
92880: LIST
92881: LIST
92882: PPUSH
92883: NOP4
92887: ST_TO_ADDR
// if not tmp then
92888: NOP4
92892: NOT
92893: IFFALSE 92897
// exit ;
92895: GO 92953
// un := tmp [ rand ( 1 , tmp ) ] ;
92897: NOP4
92901: PUSH
92902: NOP4
92906: PUSH
92907: LD_INT 1
92909: PPUSH
92910: NOP4
92914: PPUSH
92915: NOP4
92919: ARRAY
92920: ST_TO_ADDR
// if Crawls ( un ) then
92921: NOP4
92925: PPUSH
92926: NOP4
92930: IFFALSE 92941
// ComWalk ( un ) ;
92932: NOP4
92936: PPUSH
92937: NOP4
// SetClass ( un , class_mortar ) ;
92941: NOP4
92945: PPUSH
92946: LD_INT 8
92948: PPUSH
92949: NOP4
// end ;
92953: PPOPN 3
92955: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
92956: NOP4
92960: PUSH
92961: NOP4
92965: AND
92966: IFFALSE 93110
92968: GO 92970
92970: DISABLE
92971: LD_INT 0
92973: PPUSH
92974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
92975: NOP4
92979: PUSH
92980: LD_INT 22
92982: PUSH
92983: NOP4
92987: PUSH
92988: EMPTY
92989: LIST
92990: LIST
92991: PUSH
92992: LD_INT 21
92994: PUSH
92995: LD_INT 2
92997: PUSH
92998: EMPTY
92999: LIST
93000: LIST
93001: PUSH
93002: LD_INT 2
93004: PUSH
93005: LD_INT 34
93007: PUSH
93008: LD_INT 12
93010: PUSH
93011: EMPTY
93012: LIST
93013: LIST
93014: PUSH
93015: LD_INT 34
93017: PUSH
93018: LD_INT 51
93020: PUSH
93021: EMPTY
93022: LIST
93023: LIST
93024: PUSH
93025: LD_INT 34
93027: PUSH
93028: LD_INT 32
93030: PUSH
93031: EMPTY
93032: LIST
93033: LIST
93034: PUSH
93035: EMPTY
93036: LIST
93037: LIST
93038: LIST
93039: LIST
93040: PUSH
93041: EMPTY
93042: LIST
93043: LIST
93044: LIST
93045: PPUSH
93046: NOP4
93050: ST_TO_ADDR
// if not tmp then
93051: NOP4
93055: NOT
93056: IFFALSE 93060
// exit ;
93058: GO 93110
// for i in tmp do
93060: NOP4
93064: PUSH
93065: NOP4
93069: PUSH
93070: FOR_IN
93071: IFFALSE 93108
// if GetCargo ( i , mat_artifact ) = 0 then
93073: NOP4
93077: PPUSH
93078: LD_INT 4
93080: PPUSH
93081: NOP4
93085: PUSH
93086: LD_INT 0
93088: EQUAL
93089: IFFALSE 93106
// SetCargo ( i , mat_siberit , 100 ) ;
93091: NOP4
93095: PPUSH
93096: LD_INT 3
93098: PPUSH
93099: LD_INT 100
93101: PPUSH
93102: NOP4
93106: GO 93070
93108: POP
93109: POP
// end ;
93110: PPOPN 2
93112: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
93113: NOP4
93117: PUSH
93118: NOP4
93122: AND
93123: IFFALSE 93276
93125: GO 93127
93127: DISABLE
93128: LD_INT 0
93130: PPUSH
93131: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
93132: NOP4
93136: PUSH
93137: LD_INT 22
93139: PUSH
93140: NOP4
93144: PUSH
93145: EMPTY
93146: LIST
93147: LIST
93148: PPUSH
93149: NOP4
93153: ST_TO_ADDR
// if not tmp then
93154: NOP4
93158: NOT
93159: IFFALSE 93163
// exit ;
93161: GO 93276
// for i := 1 to 2 do
93163: NOP4
93167: PUSH
93168: DOUBLE
93169: LD_INT 1
93171: DEC
93172: ST_TO_ADDR
93173: LD_INT 2
93175: PUSH
93176: FOR_TO
93177: IFFALSE 93274
// begin uc_side := your_side ;
93179: LD_ADDR_OWVAR 20
93183: PUSH
93184: NOP4
93188: ST_TO_ADDR
// uc_nation := nation_american ;
93189: LD_ADDR_OWVAR 21
93193: PUSH
93194: LD_INT 1
93196: ST_TO_ADDR
// vc_chassis := us_morphling ;
93197: LD_ADDR_OWVAR 37
93201: PUSH
93202: LD_INT 5
93204: ST_TO_ADDR
// vc_engine := engine_siberite ;
93205: LD_ADDR_OWVAR 39
93209: PUSH
93210: LD_INT 3
93212: ST_TO_ADDR
// vc_control := control_computer ;
93213: LD_ADDR_OWVAR 38
93217: PUSH
93218: LD_INT 3
93220: ST_TO_ADDR
// vc_weapon := us_double_laser ;
93221: LD_ADDR_OWVAR 40
93225: PUSH
93226: LD_INT 10
93228: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
93229: NOP4
93233: PPUSH
93234: NOP4
93238: PUSH
93239: LD_INT 1
93241: ARRAY
93242: PPUSH
93243: NOP4
93247: PPUSH
93248: NOP4
93252: PUSH
93253: LD_INT 1
93255: ARRAY
93256: PPUSH
93257: NOP4
93261: PPUSH
93262: LD_INT 12
93264: PPUSH
93265: LD_INT 1
93267: PPUSH
93268: NOP4
// end ;
93272: GO 93176
93274: POP
93275: POP
// end ;
93276: PPOPN 2
93278: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
93279: NOP4
93283: PUSH
93284: NOP4
93288: AND
93289: IFFALSE 93511
93291: GO 93293
93293: DISABLE
93294: LD_INT 0
93296: PPUSH
93297: PPUSH
93298: PPUSH
93299: PPUSH
93300: PPUSH
93301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
93302: NOP4
93306: PUSH
93307: LD_INT 22
93309: PUSH
93310: NOP4
93314: PUSH
93315: EMPTY
93316: LIST
93317: LIST
93318: PUSH
93319: LD_INT 21
93321: PUSH
93322: LD_INT 1
93324: PUSH
93325: EMPTY
93326: LIST
93327: LIST
93328: PUSH
93329: LD_INT 3
93331: PUSH
93332: LD_INT 23
93334: PUSH
93335: LD_INT 0
93337: PUSH
93338: EMPTY
93339: LIST
93340: LIST
93341: PUSH
93342: EMPTY
93343: LIST
93344: LIST
93345: PUSH
93346: EMPTY
93347: LIST
93348: LIST
93349: LIST
93350: PPUSH
93351: NOP4
93355: ST_TO_ADDR
// if not tmp then
93356: NOP4
93360: NOT
93361: IFFALSE 93365
// exit ;
93363: GO 93511
// s1 := rand ( 1 , 4 ) ;
93365: NOP4
93369: PUSH
93370: LD_INT 1
93372: PPUSH
93373: LD_INT 4
93375: PPUSH
93376: NOP4
93380: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
93381: NOP4
93385: PUSH
93386: NOP4
93390: PUSH
93391: LD_INT 1
93393: ARRAY
93394: PPUSH
93395: NOP4
93399: PPUSH
93400: NOP4
93404: ST_TO_ADDR
// if s1 = 1 then
93405: NOP4
93409: PUSH
93410: LD_INT 1
93412: EQUAL
93413: IFFALSE 93433
// s2 := rand ( 2 , 4 ) else
93415: NOP4
93419: PUSH
93420: LD_INT 2
93422: PPUSH
93423: LD_INT 4
93425: PPUSH
93426: NOP4
93430: ST_TO_ADDR
93431: GO 93441
// s2 := 1 ;
93433: NOP4
93437: PUSH
93438: LD_INT 1
93440: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
93441: NOP4
93445: PUSH
93446: NOP4
93450: PUSH
93451: LD_INT 1
93453: ARRAY
93454: PPUSH
93455: NOP4
93459: PPUSH
93460: NOP4
93464: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
93465: NOP4
93469: PUSH
93470: LD_INT 1
93472: ARRAY
93473: PPUSH
93474: NOP4
93478: PPUSH
93479: NOP4
93483: PPUSH
93484: NOP4
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
93488: NOP4
93492: PUSH
93493: LD_INT 1
93495: ARRAY
93496: PPUSH
93497: NOP4
93501: PPUSH
93502: NOP4
93506: PPUSH
93507: NOP4
// end ;
93511: PPOPN 6
93513: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
93514: NOP4
93518: PUSH
93519: NOP4
93523: AND
93524: IFFALSE 93603
93526: GO 93528
93528: DISABLE
93529: LD_INT 0
93531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
93532: NOP4
93536: PUSH
93537: LD_INT 22
93539: PUSH
93540: NOP4
93544: PUSH
93545: EMPTY
93546: LIST
93547: LIST
93548: PUSH
93549: LD_INT 30
93551: PUSH
93552: LD_INT 3
93554: PUSH
93555: EMPTY
93556: LIST
93557: LIST
93558: PUSH
93559: EMPTY
93560: LIST
93561: LIST
93562: PPUSH
93563: NOP4
93567: ST_TO_ADDR
// if not tmp then
93568: NOP4
93572: NOT
93573: IFFALSE 93577
// exit ;
93575: GO 93603
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
93577: NOP4
93581: PUSH
93582: LD_INT 1
93584: PPUSH
93585: NOP4
93589: PPUSH
93590: NOP4
93594: ARRAY
93595: PPUSH
93596: LD_INT 1
93598: PPUSH
93599: NOP4
// end ;
93603: PPOPN 1
93605: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
93606: NOP4
93610: PUSH
93611: NOP4
93615: AND
93616: IFFALSE 93728
93618: GO 93620
93620: DISABLE
93621: LD_INT 0
93623: PPUSH
93624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
93625: NOP4
93629: PUSH
93630: LD_INT 22
93632: PUSH
93633: NOP4
93637: PUSH
93638: EMPTY
93639: LIST
93640: LIST
93641: PUSH
93642: LD_INT 2
93644: PUSH
93645: LD_INT 30
93647: PUSH
93648: LD_INT 27
93650: PUSH
93651: EMPTY
93652: LIST
93653: LIST
93654: PUSH
93655: LD_INT 30
93657: PUSH
93658: LD_INT 26
93660: PUSH
93661: EMPTY
93662: LIST
93663: LIST
93664: PUSH
93665: LD_INT 30
93667: PUSH
93668: LD_INT 28
93670: PUSH
93671: EMPTY
93672: LIST
93673: LIST
93674: PUSH
93675: EMPTY
93676: LIST
93677: LIST
93678: LIST
93679: LIST
93680: PUSH
93681: EMPTY
93682: LIST
93683: LIST
93684: PPUSH
93685: NOP4
93689: ST_TO_ADDR
// if not tmp then
93690: NOP4
93694: NOT
93695: IFFALSE 93699
// exit ;
93697: GO 93728
// for i in tmp do
93699: NOP4
93703: PUSH
93704: NOP4
93708: PUSH
93709: FOR_IN
93710: IFFALSE 93726
// SetLives ( i , 1 ) ;
93712: NOP4
93716: PPUSH
93717: LD_INT 1
93719: PPUSH
93720: NOP4
93724: GO 93709
93726: POP
93727: POP
// end ;
93728: PPOPN 2
93730: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
93731: NOP4
93735: PUSH
93736: NOP4
93740: AND
93741: IFFALSE 94015
93743: GO 93745
93745: DISABLE
93746: LD_INT 0
93748: PPUSH
93749: PPUSH
93750: PPUSH
// begin i := rand ( 1 , 7 ) ;
93751: NOP4
93755: PUSH
93756: LD_INT 1
93758: PPUSH
93759: LD_INT 7
93761: PPUSH
93762: NOP4
93766: ST_TO_ADDR
// case i of 1 :
93767: NOP4
93771: PUSH
93772: LD_INT 1
93774: DOUBLE
93775: EQUAL
93776: IFTRUE 93780
93778: GO 93790
93780: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
93781: LD_STRING earthquake(getX(game), 0, 32)
93783: PPUSH
93784: NOP4
93788: GO 94015
93790: LD_INT 2
93792: DOUBLE
93793: EQUAL
93794: IFTRUE 93798
93796: GO 93812
93798: POP
// begin ToLua ( displayStucuk(); ) ;
93799: LD_STRING displayStucuk();
93801: PPUSH
93802: NOP4
// ResetFog ;
93806: NOP4
// end ; 3 :
93810: GO 94015
93812: LD_INT 3
93814: DOUBLE
93815: EQUAL
93816: IFTRUE 93820
93818: GO 93924
93820: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
93821: NOP4
93825: PUSH
93826: LD_INT 22
93828: PUSH
93829: NOP4
93833: PUSH
93834: EMPTY
93835: LIST
93836: LIST
93837: PUSH
93838: LD_INT 25
93840: PUSH
93841: LD_INT 1
93843: PUSH
93844: EMPTY
93845: LIST
93846: LIST
93847: PUSH
93848: EMPTY
93849: LIST
93850: LIST
93851: PPUSH
93852: NOP4
93856: ST_TO_ADDR
// if not tmp then
93857: NOP4
93861: NOT
93862: IFFALSE 93866
// exit ;
93864: GO 94015
// un := tmp [ rand ( 1 , tmp ) ] ;
93866: NOP4
93870: PUSH
93871: NOP4
93875: PUSH
93876: LD_INT 1
93878: PPUSH
93879: NOP4
93883: PPUSH
93884: NOP4
93888: ARRAY
93889: ST_TO_ADDR
// if Crawls ( un ) then
93890: NOP4
93894: PPUSH
93895: NOP4
93899: IFFALSE 93910
// ComWalk ( un ) ;
93901: NOP4
93905: PPUSH
93906: NOP4
// SetClass ( un , class_mortar ) ;
93910: NOP4
93914: PPUSH
93915: LD_INT 8
93917: PPUSH
93918: NOP4
// end ; 4 :
93922: GO 94015
93924: LD_INT 4
93926: DOUBLE
93927: EQUAL
93928: IFTRUE 93932
93930: GO 93993
93932: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
93933: NOP4
93937: PUSH
93938: LD_INT 22
93940: PUSH
93941: NOP4
93945: PUSH
93946: EMPTY
93947: LIST
93948: LIST
93949: PUSH
93950: LD_INT 30
93952: PUSH
93953: LD_INT 29
93955: PUSH
93956: EMPTY
93957: LIST
93958: LIST
93959: PUSH
93960: EMPTY
93961: LIST
93962: LIST
93963: PPUSH
93964: NOP4
93968: ST_TO_ADDR
// if not tmp then
93969: NOP4
93973: NOT
93974: IFFALSE 93978
// exit ;
93976: GO 94015
// DestroyUnit ( tmp [ 1 ] ) ;
93978: NOP4
93982: PUSH
93983: LD_INT 1
93985: ARRAY
93986: PPUSH
93987: NOP4
// end ; 5 .. 7 :
93991: GO 94015
93993: LD_INT 5
93995: DOUBLE
93996: GREATEREQUAL
93997: IFFALSE 94005
93999: LD_INT 7
94001: DOUBLE
94002: LESSEQUAL
94003: IFTRUE 94007
94005: GO 94014
94007: POP
// StreamSibBomb ; end ;
94008: NOP4
94012: GO 94015
94014: POP
// end ;
94015: PPOPN 3
94017: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
94018: NOP4
94022: PUSH
94023: NOP4
94027: AND
94028: IFFALSE 94184
94030: GO 94032
94032: DISABLE
94033: LD_INT 0
94035: PPUSH
94036: PPUSH
94037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
94038: NOP4
94042: PUSH
94043: LD_INT 81
94045: PUSH
94046: NOP4
94050: PUSH
94051: EMPTY
94052: LIST
94053: LIST
94054: PUSH
94055: LD_INT 2
94057: PUSH
94058: LD_INT 21
94060: PUSH
94061: LD_INT 1
94063: PUSH
94064: EMPTY
94065: LIST
94066: LIST
94067: PUSH
94068: LD_INT 21
94070: PUSH
94071: LD_INT 2
94073: PUSH
94074: EMPTY
94075: LIST
94076: LIST
94077: PUSH
94078: EMPTY
94079: LIST
94080: LIST
94081: LIST
94082: PUSH
94083: EMPTY
94084: LIST
94085: LIST
94086: PPUSH
94087: NOP4
94091: ST_TO_ADDR
// if not tmp then
94092: NOP4
94096: NOT
94097: IFFALSE 94101
// exit ;
94099: GO 94184
// p := 0 ;
94101: NOP4
94105: PUSH
94106: LD_INT 0
94108: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
94109: LD_INT 35
94111: PPUSH
94112: NOP4
// p := p + 1 ;
94116: NOP4
94120: PUSH
94121: NOP4
94125: PUSH
94126: LD_INT 1
94128: PLUS
94129: ST_TO_ADDR
// for i in tmp do
94130: NOP4
94134: PUSH
94135: NOP4
94139: PUSH
94140: FOR_IN
94141: IFFALSE 94172
// if GetLives ( i ) < 1000 then
94143: NOP4
94147: PPUSH
94148: NOP4
94152: PUSH
94153: LD_INT 1000
94155: LESS
94156: IFFALSE 94170
// SetLives ( i , 1000 ) ;
94158: NOP4
94162: PPUSH
94163: LD_INT 1000
94165: PPUSH
94166: NOP4
94170: GO 94140
94172: POP
94173: POP
// until p > 20 ;
94174: NOP4
94178: PUSH
94179: LD_INT 20
94181: GREATER
94182: IFFALSE 94109
// end ;
94184: PPOPN 3
94186: END
// every 0 0$1 trigger StreamModeActive and sTime do
94187: NOP4
94191: PUSH
94192: NOP4
94196: AND
94197: IFFALSE 94232
94199: GO 94201
94201: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
94202: LD_INT 28
94204: PPUSH
94205: NOP4
94209: PPUSH
94210: LD_INT 2
94212: PPUSH
94213: NOP4
// SetTech ( tech_tauField , your_side , state_researched ) ;
94217: LD_INT 30
94219: PPUSH
94220: NOP4
94224: PPUSH
94225: LD_INT 2
94227: PPUSH
94228: NOP4
// end ;
94232: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
94233: NOP4
94237: PUSH
94238: NOP4
94242: AND
94243: IFFALSE 94364
94245: GO 94247
94247: DISABLE
94248: LD_INT 0
94250: PPUSH
94251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
94252: NOP4
94256: PUSH
94257: LD_INT 22
94259: PUSH
94260: NOP4
94264: PUSH
94265: EMPTY
94266: LIST
94267: LIST
94268: PUSH
94269: LD_INT 21
94271: PUSH
94272: LD_INT 1
94274: PUSH
94275: EMPTY
94276: LIST
94277: LIST
94278: PUSH
94279: LD_INT 3
94281: PUSH
94282: LD_INT 23
94284: PUSH
94285: LD_INT 0
94287: PUSH
94288: EMPTY
94289: LIST
94290: LIST
94291: PUSH
94292: EMPTY
94293: LIST
94294: LIST
94295: PUSH
94296: EMPTY
94297: LIST
94298: LIST
94299: LIST
94300: PPUSH
94301: NOP4
94305: ST_TO_ADDR
// if not tmp then
94306: NOP4
94310: NOT
94311: IFFALSE 94315
// exit ;
94313: GO 94364
// for i in tmp do
94315: NOP4
94319: PUSH
94320: NOP4
94324: PUSH
94325: FOR_IN
94326: IFFALSE 94362
// begin if Crawls ( i ) then
94328: NOP4
94332: PPUSH
94333: NOP4
94337: IFFALSE 94348
// ComWalk ( i ) ;
94339: NOP4
94343: PPUSH
94344: NOP4
// SetClass ( i , 2 ) ;
94348: NOP4
94352: PPUSH
94353: LD_INT 2
94355: PPUSH
94356: NOP4
// end ;
94360: GO 94325
94362: POP
94363: POP
// end ;
94364: PPOPN 2
94366: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
94367: NOP4
94371: PUSH
94372: NOP4
94376: AND
94377: IFFALSE 94658
94379: GO 94381
94381: DISABLE
94382: LD_INT 0
94384: PPUSH
94385: PPUSH
94386: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
94387: NOP4
94391: PPUSH
94392: LD_INT 9
94394: PPUSH
94395: LD_INT 1
94397: PPUSH
94398: LD_INT 1
94400: PPUSH
94401: NOP4
// ChangeSideFog ( 9 , your_side ) ;
94405: LD_INT 9
94407: PPUSH
94408: NOP4
94412: PPUSH
94413: NOP4
// uc_side := 9 ;
94417: LD_ADDR_OWVAR 20
94421: PUSH
94422: LD_INT 9
94424: ST_TO_ADDR
// uc_nation := 2 ;
94425: LD_ADDR_OWVAR 21
94429: PUSH
94430: LD_INT 2
94432: ST_TO_ADDR
// hc_name := Dark Warrior ;
94433: LD_ADDR_OWVAR 26
94437: PUSH
94438: LD_STRING Dark Warrior
94440: ST_TO_ADDR
// hc_gallery :=  ;
94441: LD_ADDR_OWVAR 33
94445: PUSH
94446: LD_STRING 
94448: ST_TO_ADDR
// hc_noskilllimit := true ;
94449: LD_ADDR_OWVAR 76
94453: PUSH
94454: LD_INT 1
94456: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
94457: LD_ADDR_OWVAR 31
94461: PUSH
94462: LD_INT 30
94464: PUSH
94465: LD_INT 30
94467: PUSH
94468: LD_INT 30
94470: PUSH
94471: LD_INT 30
94473: PUSH
94474: EMPTY
94475: LIST
94476: LIST
94477: LIST
94478: LIST
94479: ST_TO_ADDR
// un := CreateHuman ;
94480: NOP4
94484: PUSH
94485: NOP4
94489: ST_TO_ADDR
// hc_noskilllimit := false ;
94490: LD_ADDR_OWVAR 76
94494: PUSH
94495: LD_INT 0
94497: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
94498: NOP4
94502: PPUSH
94503: LD_INT 1
94505: PPUSH
94506: NOP4
// p := 0 ;
94510: NOP4
94514: PUSH
94515: LD_INT 0
94517: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
94518: LD_INT 35
94520: PPUSH
94521: NOP4
// p := p + 1 ;
94525: NOP4
94529: PUSH
94530: NOP4
94534: PUSH
94535: LD_INT 1
94537: PLUS
94538: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
94539: NOP4
94543: PPUSH
94544: NOP4
94548: PUSH
94549: LD_INT 1000
94551: LESS
94552: IFFALSE 94566
// SetLives ( un , 1000 ) ;
94554: NOP4
94558: PPUSH
94559: LD_INT 1000
94561: PPUSH
94562: NOP4
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
94566: NOP4
94570: PPUSH
94571: LD_INT 81
94573: PUSH
94574: NOP4
94578: PUSH
94579: EMPTY
94580: LIST
94581: LIST
94582: PUSH
94583: LD_INT 91
94585: PUSH
94586: NOP4
94590: PUSH
94591: LD_INT 30
94593: PUSH
94594: EMPTY
94595: LIST
94596: LIST
94597: LIST
94598: PUSH
94599: EMPTY
94600: LIST
94601: LIST
94602: PPUSH
94603: NOP4
94607: PPUSH
94608: NOP4
94612: PPUSH
94613: NOP4
94617: PPUSH
94618: NOP4
// until p > 60 or IsDead ( un ) ;
94622: NOP4
94626: PUSH
94627: LD_INT 60
94629: GREATER
94630: PUSH
94631: NOP4
94635: PPUSH
94636: NOP4
94640: OR
94641: IFFALSE 94518
// if un then
94643: NOP4
94647: IFFALSE 94658
// RemoveUnit ( un ) ;
94649: NOP4
94653: PPUSH
94654: NOP4
// end ; end_of_file
94658: PPOPN 3
94660: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
94661: LD_INT 0
94663: PPUSH
94664: PPUSH
94665: PPUSH
94666: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
94667: NOP4
94671: PPUSH
94672: NOP4
94676: PUSH
94677: NOP4
94681: EQUAL
94682: IFFALSE 94754
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
94684: LD_INT 68
94686: PPUSH
94687: NOP4
94691: PPUSH
94692: NOP4
94696: PPUSH
94697: NOP4
94701: PUSH
94702: LD_INT 2
94704: EQUAL
94705: IFFALSE 94717
// eff := 70 else
94707: NOP4
94711: PUSH
94712: LD_INT 70
94714: ST_TO_ADDR
94715: GO 94725
// eff := 30 ;
94717: NOP4
94721: PUSH
94722: LD_INT 30
94724: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
94725: NOP4
94729: PPUSH
94730: NOP4
94734: PPUSH
94735: NOP4
94739: PPUSH
94740: NOP4
94744: PPUSH
94745: NOP4
94749: PPUSH
94750: NOP4
// end ; end ;
94754: LD_VAR 0 2
94758: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
94759: LD_INT 0
94761: PPUSH
// end ;
94762: LD_VAR 0 4
94766: RET
// export function SOS_Command ( cmd ) ; begin
94767: LD_INT 0
94769: PPUSH
// end ;
94770: LD_VAR 0 2
94774: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
94775: NOP4
94779: PUSH
94780: LD_INT 255
94782: EQUAL
94783: PUSH
94784: NOP4
94788: PPUSH
94789: NOP4
94793: PUSH
94794: LD_INT 14
94796: PUSH
94797: LD_INT 53
94799: PUSH
94800: EMPTY
94801: LIST
94802: LIST
94803: IN
94804: AND
94805: PUSH
94806: NOP4
94810: PPUSH
94811: NOP4
94815: PPUSH
94816: NOP4
94820: AND
94821: IFFALSE 94845
// CutTreeXYR ( unit , x , y , 12 ) ;
94823: NOP4
94827: PPUSH
94828: NOP4
94832: PPUSH
94833: NOP4
94837: PPUSH
94838: LD_INT 12
94840: PPUSH
94841: NOP4
// end ;
94845: PPOPN 5
94847: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
94848: LD_INT 0
94850: PPUSH
94851: PPUSH
94852: PPUSH
94853: PPUSH
94854: PPUSH
94855: PPUSH
94856: PPUSH
94857: PPUSH
94858: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
94859: NOP4
94863: NOT
94864: PUSH
94865: NOP4
94869: PPUSH
94870: NOP4
94874: PPUSH
94875: NOP4
94879: NOT
94880: OR
94881: PUSH
94882: NOP4
94886: NOT
94887: OR
94888: IFFALSE 94892
// exit ;
94890: GO 95232
// list := [ ] ;
94892: NOP4
94896: PUSH
94897: EMPTY
94898: ST_TO_ADDR
// if x - r < 0 then
94899: NOP4
94903: PUSH
94904: NOP4
94908: MINUS
94909: PUSH
94910: LD_INT 0
94912: LESS
94913: IFFALSE 94925
// min_x := 0 else
94915: NOP4
94919: PUSH
94920: LD_INT 0
94922: ST_TO_ADDR
94923: GO 94941
// min_x := x - r ;
94925: NOP4
94929: PUSH
94930: NOP4
94934: PUSH
94935: NOP4
94939: MINUS
94940: ST_TO_ADDR
// if y - r < 0 then
94941: NOP4
94945: PUSH
94946: NOP4
94950: MINUS
94951: PUSH
94952: LD_INT 0
94954: LESS
94955: IFFALSE 94967
// min_y := 0 else
94957: NOP4
94961: PUSH
94962: LD_INT 0
94964: ST_TO_ADDR
94965: GO 94983
// min_y := y - r ;
94967: NOP4
94971: PUSH
94972: NOP4
94976: PUSH
94977: NOP4
94981: MINUS
94982: ST_TO_ADDR
// max_x := x + r ;
94983: NOP4
94987: PUSH
94988: NOP4
94992: PUSH
94993: NOP4
94997: PLUS
94998: ST_TO_ADDR
// max_y := y + r ;
94999: NOP4
95003: PUSH
95004: NOP4
95008: PUSH
95009: NOP4
95013: PLUS
95014: ST_TO_ADDR
// for _x = min_x to max_x do
95015: NOP4
95019: PUSH
95020: DOUBLE
95021: NOP4
95025: DEC
95026: ST_TO_ADDR
95027: NOP4
95031: PUSH
95032: FOR_TO
95033: IFFALSE 95150
// for _y = min_y to max_y do
95035: NOP4
95039: PUSH
95040: DOUBLE
95041: NOP4
95045: DEC
95046: ST_TO_ADDR
95047: NOP4
95051: PUSH
95052: FOR_TO
95053: IFFALSE 95146
// begin if not ValidHex ( _x , _y ) then
95055: NOP4
95059: PPUSH
95060: NOP4
95064: PPUSH
95065: NOP4
95069: NOT
95070: IFFALSE 95074
// continue ;
95072: GO 95052
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
95074: NOP4
95078: PPUSH
95079: NOP4
95083: PPUSH
95084: NOP4
95088: PUSH
95089: NOP4
95093: PPUSH
95094: NOP4
95098: PPUSH
95099: NOP4
95103: AND
95104: IFFALSE 95144
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
95106: NOP4
95110: PUSH
95111: NOP4
95115: PPUSH
95116: NOP4
95120: PUSH
95121: LD_INT 1
95123: PLUS
95124: PPUSH
95125: NOP4
95129: PUSH
95130: NOP4
95134: PUSH
95135: EMPTY
95136: LIST
95137: LIST
95138: PPUSH
95139: NOP4
95143: ST_TO_ADDR
// end ;
95144: GO 95052
95146: POP
95147: POP
95148: GO 95032
95150: POP
95151: POP
// if not list then
95152: NOP4
95156: NOT
95157: IFFALSE 95161
// exit ;
95159: GO 95232
// for i in list do
95161: NOP4
95165: PUSH
95166: NOP4
95170: PUSH
95171: FOR_IN
95172: IFFALSE 95230
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
95174: NOP4
95178: PPUSH
95179: LD_STRING M
95181: PUSH
95182: NOP4
95186: PUSH
95187: LD_INT 1
95189: ARRAY
95190: PUSH
95191: NOP4
95195: PUSH
95196: LD_INT 2
95198: ARRAY
95199: PUSH
95200: LD_INT 0
95202: PUSH
95203: LD_INT 0
95205: PUSH
95206: LD_INT 0
95208: PUSH
95209: LD_INT 0
95211: PUSH
95212: EMPTY
95213: LIST
95214: LIST
95215: LIST
95216: LIST
95217: LIST
95218: LIST
95219: LIST
95220: PUSH
95221: EMPTY
95222: LIST
95223: PPUSH
95224: NOP4
95228: GO 95171
95230: POP
95231: POP
// end ;
95232: LD_VAR 0 5
95236: RET
