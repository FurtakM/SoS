// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareNature ;
   8: CALL 449 0 0
// PrepareArabian ;
  12: CALL 804 0 0
// PrepareAmerican ;
  16: CALL 2709 0 0
// Action ;
  20: CALL 2740 0 0
// end ;
  24: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := true ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// prefix := 02_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 02_
  43: ST_TO_ADDR
// gameStarted := false ;
  44: LD_ADDR_EXP 3
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// farmerBaseReady := false ;
  52: LD_ADDR_EXP 4
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// americanBaseSpoted := false ;
  60: LD_ADDR_EXP 5
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// americanBaseCaptured := false ;
  68: LD_ADDR_EXP 6
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// end ; end_of_file
  76: LD_VAR 0 1
  80: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  81: LD_INT 0
  83: PPUSH
  84: PPUSH
// if exist_mode then
  85: LD_VAR 0 2
  89: IFFALSE 114
// unit := CreateCharacter ( prefix & ident ) else
  91: LD_ADDR_VAR 0 5
  95: PUSH
  96: LD_VAR 0 3
 100: PUSH
 101: LD_VAR 0 1
 105: STR
 106: PPUSH
 107: CALL_OW 34
 111: ST_TO_ADDR
 112: GO 129
// unit := NewCharacter ( ident ) ;
 114: LD_ADDR_VAR 0 5
 118: PUSH
 119: LD_VAR 0 1
 123: PPUSH
 124: CALL_OW 25
 128: ST_TO_ADDR
// result := unit ;
 129: LD_ADDR_VAR 0 4
 133: PUSH
 134: LD_VAR 0 5
 138: ST_TO_ADDR
// end ;
 139: LD_VAR 0 4
 143: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 144: LD_INT 0
 146: PPUSH
// uc_side := side ;
 147: LD_ADDR_OWVAR 20
 151: PUSH
 152: LD_VAR 0 1
 156: ST_TO_ADDR
// uc_nation := nation ;
 157: LD_ADDR_OWVAR 21
 161: PUSH
 162: LD_VAR 0 2
 166: ST_TO_ADDR
// vc_chassis := chassis ;
 167: LD_ADDR_OWVAR 37
 171: PUSH
 172: LD_VAR 0 3
 176: ST_TO_ADDR
// vc_engine := engine ;
 177: LD_ADDR_OWVAR 39
 181: PUSH
 182: LD_VAR 0 4
 186: ST_TO_ADDR
// vc_control := control ;
 187: LD_ADDR_OWVAR 38
 191: PUSH
 192: LD_VAR 0 5
 196: ST_TO_ADDR
// vc_weapon := weapon ;
 197: LD_ADDR_OWVAR 40
 201: PUSH
 202: LD_VAR 0 6
 206: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 207: LD_ADDR_OWVAR 41
 211: PUSH
 212: LD_VAR 0 7
 216: ST_TO_ADDR
// result := CreateVehicle ;
 217: LD_ADDR_VAR 0 8
 221: PUSH
 222: CALL_OW 45
 226: ST_TO_ADDR
// end ;
 227: LD_VAR 0 8
 231: RET
// export function SayX ( units , ident ) ; var i ; begin
 232: LD_INT 0
 234: PPUSH
 235: PPUSH
// result := false ;
 236: LD_ADDR_VAR 0 3
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// if not units then
 244: LD_VAR 0 1
 248: NOT
 249: IFFALSE 253
// exit ;
 251: GO 307
// for i in units do
 253: LD_ADDR_VAR 0 4
 257: PUSH
 258: LD_VAR 0 1
 262: PUSH
 263: FOR_IN
 264: IFFALSE 305
// if IsOk ( i ) then
 266: LD_VAR 0 4
 270: PPUSH
 271: CALL_OW 302
 275: IFFALSE 303
// begin Say ( i , ident ) ;
 277: LD_VAR 0 4
 281: PPUSH
 282: LD_VAR 0 2
 286: PPUSH
 287: CALL_OW 88
// result := i ;
 291: LD_ADDR_VAR 0 3
 295: PUSH
 296: LD_VAR 0 4
 300: ST_TO_ADDR
// break ;
 301: GO 305
// end ;
 303: GO 263
 305: POP
 306: POP
// end ;
 307: LD_VAR 0 3
 311: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 312: LD_INT 0
 314: PPUSH
 315: PPUSH
// InitUc ;
 316: CALL_OW 18
// InitHc ;
 320: CALL_OW 19
// uc_side := 0 ;
 324: LD_ADDR_OWVAR 20
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// uc_nation := 0 ;
 332: LD_ADDR_OWVAR 21
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// for i = 1 to amount do
 340: LD_ADDR_VAR 0 4
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_VAR 0 2
 354: PUSH
 355: FOR_TO
 356: IFFALSE 438
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 358: LD_ADDR_OWVAR 29
 362: PUSH
 363: LD_INT 9
 365: PPUSH
 366: LD_INT 12
 368: PPUSH
 369: CALL_OW 12
 373: PUSH
 374: LD_INT 9
 376: PPUSH
 377: LD_INT 12
 379: PPUSH
 380: CALL_OW 12
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 389: LD_ADDR_OWVAR 35
 393: PUSH
 394: LD_INT 1
 396: NEG
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL_OW 12
 405: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 406: LD_INT 0
 408: PPUSH
 409: LD_INT 12
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 419: CALL_OW 44
 423: PPUSH
 424: LD_VAR 0 1
 428: PPUSH
 429: LD_INT 0
 431: PPUSH
 432: CALL_OW 49
// end ;
 436: GO 355
 438: POP
 439: POP
// InitHc ;
 440: CALL_OW 19
// end ;
 444: LD_VAR 0 3
 448: RET
// export function PrepareNature ; var i ; begin
 449: LD_INT 0
 451: PPUSH
 452: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 453: LD_INT 2
 455: PPUSH
 456: LD_INT 4
 458: PUSH
 459: LD_INT 4
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: LD_OWVAR 67
 474: ARRAY
 475: PPUSH
 476: CALL 312 0 2
// for i := 1 to 3 do
 480: LD_ADDR_VAR 0 2
 484: PUSH
 485: DOUBLE
 486: LD_INT 1
 488: DEC
 489: ST_TO_ADDR
 490: LD_INT 3
 492: PUSH
 493: FOR_TO
 494: IFFALSE 529
// begin hc_class := 21 ;
 496: LD_ADDR_OWVAR 28
 500: PUSH
 501: LD_INT 21
 503: ST_TO_ADDR
// hc_gallery :=  ;
 504: LD_ADDR_OWVAR 33
 508: PUSH
 509: LD_STRING 
 511: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 512: CALL_OW 44
 516: PPUSH
 517: LD_INT 2
 519: PPUSH
 520: LD_INT 0
 522: PPUSH
 523: CALL_OW 49
// end ;
 527: GO 493
 529: POP
 530: POP
// for i := 1 to 2 do
 531: LD_ADDR_VAR 0 2
 535: PUSH
 536: DOUBLE
 537: LD_INT 1
 539: DEC
 540: ST_TO_ADDR
 541: LD_INT 2
 543: PUSH
 544: FOR_TO
 545: IFFALSE 580
// begin hc_class := 18 ;
 547: LD_ADDR_OWVAR 28
 551: PUSH
 552: LD_INT 18
 554: ST_TO_ADDR
// hc_gallery :=  ;
 555: LD_ADDR_OWVAR 33
 559: PUSH
 560: LD_STRING 
 562: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 563: CALL_OW 44
 567: PPUSH
 568: LD_INT 2
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: CALL_OW 49
// end ;
 578: GO 544
 580: POP
 581: POP
// for i := 1 to 2 do
 582: LD_ADDR_VAR 0 2
 586: PUSH
 587: DOUBLE
 588: LD_INT 1
 590: DEC
 591: ST_TO_ADDR
 592: LD_INT 2
 594: PUSH
 595: FOR_TO
 596: IFFALSE 631
// begin hc_class := 13 ;
 598: LD_ADDR_OWVAR 28
 602: PUSH
 603: LD_INT 13
 605: ST_TO_ADDR
// hc_gallery :=  ;
 606: LD_ADDR_OWVAR 33
 610: PUSH
 611: LD_STRING 
 613: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 614: CALL_OW 44
 618: PPUSH
 619: LD_INT 2
 621: PPUSH
 622: LD_INT 0
 624: PPUSH
 625: CALL_OW 49
// end ;
 629: GO 595
 631: POP
 632: POP
// end ;
 633: LD_VAR 0 1
 637: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 638: LD_INT 0
 640: PPUSH
 641: PPUSH
 642: PPUSH
// if not observer or not unit then
 643: LD_VAR 0 1
 647: NOT
 648: PUSH
 649: LD_VAR 0 2
 653: NOT
 654: OR
 655: IFFALSE 659
// exit ;
 657: GO 707
// if not See ( GetSide ( observer ) , unit ) then
 659: LD_VAR 0 1
 663: PPUSH
 664: CALL_OW 255
 668: PPUSH
 669: LD_VAR 0 2
 673: PPUSH
 674: CALL_OW 292
 678: NOT
 679: IFFALSE 683
// exit ;
 681: GO 707
// result := GetDistUnits ( observer , unit ) < 12 ;
 683: LD_ADDR_VAR 0 3
 687: PUSH
 688: LD_VAR 0 1
 692: PPUSH
 693: LD_VAR 0 2
 697: PPUSH
 698: CALL_OW 296
 702: PUSH
 703: LD_INT 12
 705: LESS
 706: ST_TO_ADDR
// end ;
 707: LD_VAR 0 3
 711: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 712: LD_INT 0
 714: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 715: LD_VAR 0 2
 719: PUSH
 720: LD_INT 1
 722: ARRAY
 723: PPUSH
 724: LD_VAR 0 2
 728: PUSH
 729: LD_INT 2
 731: ARRAY
 732: PPUSH
 733: CALL_OW 488
 737: PUSH
 738: LD_VAR 0 2
 742: PUSH
 743: LD_INT 1
 745: ARRAY
 746: PPUSH
 747: LD_VAR 0 2
 751: PUSH
 752: LD_INT 2
 754: ARRAY
 755: PPUSH
 756: CALL_OW 428
 760: PUSH
 761: LD_INT 0
 763: EQUAL
 764: AND
 765: IFFALSE 799
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 767: LD_VAR 0 1
 771: PPUSH
 772: LD_VAR 0 2
 776: PUSH
 777: LD_INT 1
 779: ARRAY
 780: PPUSH
 781: LD_VAR 0 2
 785: PUSH
 786: LD_INT 2
 788: ARRAY
 789: PPUSH
 790: LD_VAR 0 3
 794: PPUSH
 795: CALL_OW 48
// end ; end_of_file
 799: LD_VAR 0 4
 803: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar ; export farmerSquad , omarSquad , heikeSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 804: LD_INT 0
 806: PPUSH
 807: PPUSH
 808: PPUSH
 809: PPUSH
// uc_side := 5 ;
 810: LD_ADDR_OWVAR 20
 814: PUSH
 815: LD_INT 5
 817: ST_TO_ADDR
// uc_nation := 2 ;
 818: LD_ADDR_OWVAR 21
 822: PUSH
 823: LD_INT 2
 825: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
 826: LD_INT 5
 828: PPUSH
 829: CALL_OW 274
 833: PPUSH
 834: LD_INT 1
 836: PPUSH
 837: LD_INT 45
 839: PPUSH
 840: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
 844: LD_ADDR_EXP 15
 848: PUSH
 849: LD_STRING Farmer
 851: PPUSH
 852: LD_INT 0
 854: PPUSH
 855: LD_STRING 
 857: PPUSH
 858: CALL 81 0 3
 862: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 863: LD_ADDR_EXP 16
 867: PUSH
 868: LD_STRING Omar
 870: PPUSH
 871: LD_INT 0
 873: PPUSH
 874: LD_STRING 
 876: PPUSH
 877: CALL 81 0 3
 881: ST_TO_ADDR
// omarSquad := [ ] ;
 882: LD_ADDR_EXP 18
 886: PUSH
 887: EMPTY
 888: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
 889: LD_ADDR_EXP 19
 893: PUSH
 894: EMPTY
 895: ST_TO_ADDR
// for i := 1 to 5 do
 896: LD_ADDR_VAR 0 2
 900: PUSH
 901: DOUBLE
 902: LD_INT 1
 904: DEC
 905: ST_TO_ADDR
 906: LD_INT 5
 908: PUSH
 909: FOR_TO
 910: IFFALSE 1068
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
 912: LD_INT 0
 914: PPUSH
 915: LD_INT 1
 917: PUSH
 918: LD_INT 1
 920: PUSH
 921: LD_INT 2
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: LD_INT 1
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: PUSH
 937: LD_VAR 0 2
 941: ARRAY
 942: PPUSH
 943: LD_INT 3
 945: PPUSH
 946: CALL_OW 380
// un := CreateHuman ;
 950: LD_ADDR_VAR 0 3
 954: PUSH
 955: CALL_OW 44
 959: ST_TO_ADDR
// omarSquad := omarSquad union un ;
 960: LD_ADDR_EXP 18
 964: PUSH
 965: LD_EXP 18
 969: PUSH
 970: LD_VAR 0 3
 974: UNION
 975: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
 976: LD_VAR 0 3
 980: PPUSH
 981: LD_INT 87
 983: PUSH
 984: LD_INT 30
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: LD_INT 91
 993: PUSH
 994: LD_INT 32
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 82
1003: PUSH
1004: LD_INT 15
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 79
1013: PUSH
1014: LD_INT 14
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 82
1023: PUSH
1024: LD_INT 13
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: LD_VAR 0 2
1042: ARRAY
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: CALL 712 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1051: LD_VAR 0 3
1055: PPUSH
1056: LD_INT 93
1058: PPUSH
1059: LD_INT 21
1061: PPUSH
1062: CALL_OW 118
// end ;
1066: GO 909
1068: POP
1069: POP
// uc_side := 2 ;
1070: LD_ADDR_OWVAR 20
1074: PUSH
1075: LD_INT 2
1077: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1078: LD_ADDR_EXP 7
1082: PUSH
1083: LD_STRING Heike
1085: PPUSH
1086: LD_EXP 1
1090: NOT
1091: PPUSH
1092: LD_EXP 2
1096: PPUSH
1097: CALL 81 0 3
1101: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1102: LD_ADDR_EXP 11
1106: PUSH
1107: LD_STRING Aviradze
1109: PPUSH
1110: LD_EXP 1
1114: NOT
1115: PPUSH
1116: LD_EXP 2
1120: PPUSH
1121: CALL 81 0 3
1125: ST_TO_ADDR
// tmp := [ ] ;
1126: LD_ADDR_VAR 0 4
1130: PUSH
1131: EMPTY
1132: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1133: LD_ADDR_EXP 8
1137: PUSH
1138: LD_STRING Givi
1140: PPUSH
1141: LD_EXP 1
1145: NOT
1146: PPUSH
1147: LD_EXP 2
1151: PPUSH
1152: CALL 81 0 3
1156: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1157: LD_ADDR_EXP 9
1161: PUSH
1162: LD_STRING Mike
1164: PPUSH
1165: LD_EXP 1
1169: NOT
1170: PPUSH
1171: LD_EXP 2
1175: PPUSH
1176: CALL 81 0 3
1180: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1181: LD_ADDR_EXP 10
1185: PUSH
1186: LD_STRING Kamil
1188: PPUSH
1189: LD_EXP 1
1193: NOT
1194: PPUSH
1195: LD_EXP 2
1199: PPUSH
1200: CALL 81 0 3
1204: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1205: LD_ADDR_EXP 12
1209: PUSH
1210: LD_STRING Kaia
1212: PPUSH
1213: LD_EXP 1
1217: NOT
1218: PPUSH
1219: LD_EXP 2
1223: PPUSH
1224: CALL 81 0 3
1228: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1229: LD_ADDR_EXP 13
1233: PUSH
1234: LD_STRING Sophia
1236: PPUSH
1237: LD_EXP 1
1241: NOT
1242: PPUSH
1243: LD_EXP 2
1247: PPUSH
1248: CALL 81 0 3
1252: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1253: LD_ADDR_EXP 14
1257: PUSH
1258: LD_STRING Markov
1260: PPUSH
1261: LD_EXP 1
1265: NOT
1266: PPUSH
1267: LD_EXP 2
1271: PPUSH
1272: CALL 81 0 3
1276: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1277: LD_ADDR_EXP 19
1281: PUSH
1282: LD_STRING 02_others
1284: PPUSH
1285: CALL_OW 31
1289: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1290: LD_ADDR_VAR 0 4
1294: PUSH
1295: LD_EXP 9
1299: PUSH
1300: LD_EXP 10
1304: PUSH
1305: LD_EXP 12
1309: PUSH
1310: LD_EXP 13
1314: PUSH
1315: LD_EXP 14
1319: PUSH
1320: LD_EXP 8
1324: PUSH
1325: EMPTY
1326: LIST
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: PUSH
1333: LD_EXP 19
1337: ADD
1338: PUSH
1339: LD_INT 0
1341: DIFF
1342: ST_TO_ADDR
// uc_nation := 0 ;
1343: LD_ADDR_OWVAR 21
1347: PUSH
1348: LD_INT 0
1350: ST_TO_ADDR
// hc_class := class_apeman ;
1351: LD_ADDR_OWVAR 28
1355: PUSH
1356: LD_INT 12
1358: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1359: LD_ADDR_OWVAR 31
1363: PUSH
1364: LD_INT 0
1366: PUSH
1367: LD_INT 0
1369: PUSH
1370: LD_INT 0
1372: PUSH
1373: LD_INT 0
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: ST_TO_ADDR
// hc_gallery :=  ;
1382: LD_ADDR_OWVAR 33
1386: PUSH
1387: LD_STRING 
1389: ST_TO_ADDR
// hc_name :=  ;
1390: LD_ADDR_OWVAR 26
1394: PUSH
1395: LD_STRING 
1397: ST_TO_ADDR
// tmp := tmp union CreateHuman ;
1398: LD_ADDR_VAR 0 4
1402: PUSH
1403: LD_VAR 0 4
1407: PUSH
1408: CALL_OW 44
1412: UNION
1413: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1414: LD_EXP 7
1418: PPUSH
1419: LD_INT 92
1421: PPUSH
1422: LD_INT 17
1424: PPUSH
1425: LD_INT 0
1427: PPUSH
1428: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1432: LD_EXP 15
1436: PPUSH
1437: LD_INT 95
1439: PPUSH
1440: LD_INT 19
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1450: LD_EXP 16
1454: PPUSH
1455: LD_INT 89
1457: PPUSH
1458: LD_INT 25
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1468: LD_EXP 11
1472: PPUSH
1473: LD_INT 92
1475: PPUSH
1476: LD_INT 27
1478: PPUSH
1479: LD_INT 0
1481: PPUSH
1482: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1486: LD_EXP 16
1490: PPUSH
1491: LD_EXP 11
1495: PPUSH
1496: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1500: LD_EXP 11
1504: PPUSH
1505: LD_EXP 16
1509: PPUSH
1510: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1514: LD_EXP 7
1518: PUSH
1519: LD_EXP 15
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: PPUSH
1528: LD_EXP 16
1532: PPUSH
1533: CALL_OW 119
// if tmp then
1537: LD_VAR 0 4
1541: IFFALSE 1595
// for i in tmp do
1543: LD_ADDR_VAR 0 2
1547: PUSH
1548: LD_VAR 0 4
1552: PUSH
1553: FOR_IN
1554: IFFALSE 1593
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1556: LD_VAR 0 2
1560: PPUSH
1561: LD_INT 94
1563: PPUSH
1564: LD_INT 14
1566: PPUSH
1567: LD_INT 4
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1577: LD_VAR 0 2
1581: PPUSH
1582: LD_EXP 7
1586: PPUSH
1587: CALL_OW 119
// end ;
1591: GO 1553
1593: POP
1594: POP
// farmerSquad := [ ] ;
1595: LD_ADDR_EXP 17
1599: PUSH
1600: EMPTY
1601: ST_TO_ADDR
// uc_side := 5 ;
1602: LD_ADDR_OWVAR 20
1606: PUSH
1607: LD_INT 5
1609: ST_TO_ADDR
// uc_nation := 2 ;
1610: LD_ADDR_OWVAR 21
1614: PUSH
1615: LD_INT 2
1617: ST_TO_ADDR
// for i := 1 to 4 do
1618: LD_ADDR_VAR 0 2
1622: PUSH
1623: DOUBLE
1624: LD_INT 1
1626: DEC
1627: ST_TO_ADDR
1628: LD_INT 4
1630: PUSH
1631: FOR_TO
1632: IFFALSE 1710
// begin PrepareHuman ( false , 1 , 2 ) ;
1634: LD_INT 0
1636: PPUSH
1637: LD_INT 1
1639: PPUSH
1640: LD_INT 2
1642: PPUSH
1643: CALL_OW 380
// un := CreateHuman ;
1647: LD_ADDR_VAR 0 3
1651: PUSH
1652: CALL_OW 44
1656: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 102
1664: PPUSH
1665: LD_INT 27
1667: PPUSH
1668: LD_INT 4
1670: PPUSH
1671: LD_INT 0
1673: PPUSH
1674: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1678: LD_ADDR_EXP 17
1682: PUSH
1683: LD_EXP 17
1687: PUSH
1688: LD_VAR 0 3
1692: UNION
1693: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: LD_EXP 16
1703: PPUSH
1704: CALL_OW 119
// end ;
1708: GO 1631
1710: POP
1711: POP
// PrepareHuman ( false , 2 , 2 ) ;
1712: LD_INT 0
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 2
1720: PPUSH
1721: CALL_OW 380
// un := CreateHuman ;
1725: LD_ADDR_VAR 0 3
1729: PUSH
1730: CALL_OW 44
1734: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1735: LD_VAR 0 3
1739: PPUSH
1740: LD_INT 108
1742: PPUSH
1743: LD_INT 62
1745: PPUSH
1746: LD_INT 2
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1756: LD_ADDR_EXP 17
1760: PUSH
1761: LD_EXP 17
1765: PUSH
1766: LD_VAR 0 3
1770: UNION
1771: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1772: LD_VAR 0 3
1776: PPUSH
1777: LD_EXP 16
1781: PPUSH
1782: CALL_OW 119
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
1786: LD_INT 109
1788: PPUSH
1789: LD_INT 63
1791: PPUSH
1792: LD_INT 2
1794: PPUSH
1795: LD_INT 15
1797: NEG
1798: PPUSH
1799: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
1803: LD_INT 109
1805: PPUSH
1806: LD_INT 63
1808: PPUSH
1809: LD_INT 2
1811: PPUSH
1812: CALL_OW 331
// end ;
1816: LD_VAR 0 1
1820: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
1821: LD_EXP 16
1825: PUSH
1826: LD_EXP 18
1830: ADD
1831: PPUSH
1832: LD_INT 95
1834: PUSH
1835: LD_INT 3
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 72
1846: IFFALSE 1902
1848: GO 1850
1850: DISABLE
1851: LD_INT 0
1853: PPUSH
// begin enable ;
1854: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
1855: LD_ADDR_VAR 0 1
1859: PUSH
1860: LD_EXP 16
1864: PUSH
1865: LD_EXP 18
1869: ADD
1870: PPUSH
1871: LD_INT 95
1873: PUSH
1874: LD_INT 3
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: PPUSH
1881: CALL_OW 72
1885: PUSH
1886: FOR_IN
1887: IFFALSE 1900
// RemoveUnit ( i ) ;
1889: LD_VAR 0 1
1893: PPUSH
1894: CALL_OW 64
1898: GO 1886
1900: POP
1901: POP
// end ;
1902: PPOPN 1
1904: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
1905: LD_EXP 3
1909: PUSH
1910: LD_EXP 15
1914: PPUSH
1915: LD_INT 4
1917: PPUSH
1918: CALL_OW 308
1922: AND
1923: IFFALSE 2706
1925: GO 1927
1927: DISABLE
1928: LD_INT 0
1930: PPUSH
1931: PPUSH
1932: PPUSH
1933: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
1934: LD_EXP 15
1938: PPUSH
1939: LD_INT 110
1941: PPUSH
1942: LD_INT 60
1944: PPUSH
1945: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
1949: LD_EXP 15
1953: PPUSH
1954: LD_INT 110
1956: PPUSH
1957: LD_INT 61
1959: PPUSH
1960: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_EXP 17
1973: PPUSH
1974: LD_INT 25
1976: PUSH
1977: LD_INT 1
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PPUSH
1984: CALL_OW 72
1988: ST_TO_ADDR
// if tmp then
1989: LD_VAR 0 2
1993: IFFALSE 2087
// begin for i := 1 to 2 do
1995: LD_ADDR_VAR 0 1
1999: PUSH
2000: DOUBLE
2001: LD_INT 1
2003: DEC
2004: ST_TO_ADDR
2005: LD_INT 2
2007: PUSH
2008: FOR_TO
2009: IFFALSE 2085
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2011: LD_VAR 0 2
2015: PUSH
2016: LD_VAR 0 1
2020: ARRAY
2021: PPUSH
2022: LD_INT 5
2024: PPUSH
2025: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2029: LD_VAR 0 2
2033: PUSH
2034: LD_VAR 0 1
2038: ARRAY
2039: PPUSH
2040: LD_INT 2
2042: PPUSH
2043: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2047: LD_VAR 0 2
2051: PUSH
2052: LD_VAR 0 1
2056: ARRAY
2057: PPUSH
2058: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2062: LD_VAR 0 2
2066: PUSH
2067: LD_VAR 0 1
2071: ARRAY
2072: PPUSH
2073: LD_INT 107
2075: PPUSH
2076: LD_INT 66
2078: PPUSH
2079: CALL_OW 171
// end ;
2083: GO 2008
2085: POP
2086: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2087: LD_ADDR_VAR 0 2
2091: PUSH
2092: LD_EXP 17
2096: PPUSH
2097: LD_INT 25
2099: PUSH
2100: LD_INT 2
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PPUSH
2107: CALL_OW 72
2111: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2112: LD_INT 35
2114: PPUSH
2115: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2119: LD_ADDR_VAR 0 2
2123: PUSH
2124: LD_EXP 17
2128: PPUSH
2129: LD_INT 25
2131: PUSH
2132: LD_INT 2
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 72
2143: ST_TO_ADDR
// until tmp ;
2144: LD_VAR 0 2
2148: IFFALSE 2112
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_INT 31
2157: PPUSH
2158: LD_INT 102
2160: PPUSH
2161: LD_INT 69
2163: PPUSH
2164: LD_INT 2
2166: PPUSH
2167: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2171: LD_INT 35
2173: PPUSH
2174: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2178: LD_EXP 17
2182: PPUSH
2183: LD_INT 3
2185: PUSH
2186: LD_INT 60
2188: PUSH
2189: EMPTY
2190: LIST
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 25
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PPUSH
2210: CALL_OW 72
2214: IFFALSE 2171
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: LD_EXP 17
2225: PPUSH
2226: LD_INT 25
2228: PUSH
2229: LD_INT 2
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PPUSH
2236: CALL_OW 72
2240: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2241: LD_VAR 0 2
2245: PPUSH
2246: LD_INT 4
2248: PPUSH
2249: LD_INT 116
2251: PPUSH
2252: LD_INT 70
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 31
2269: PPUSH
2270: LD_INT 108
2272: PPUSH
2273: LD_INT 50
2275: PPUSH
2276: LD_INT 2
2278: PPUSH
2279: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2283: LD_INT 35
2285: PPUSH
2286: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2290: LD_INT 22
2292: PUSH
2293: LD_INT 5
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 30
2302: PUSH
2303: LD_INT 4
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 3
2312: PUSH
2313: LD_INT 57
2315: PUSH
2316: EMPTY
2317: LIST
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: LIST
2327: PPUSH
2328: CALL_OW 69
2332: IFFALSE 2283
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: LD_INT 22
2341: PUSH
2342: LD_INT 5
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 30
2351: PUSH
2352: LD_INT 4
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 3
2361: PUSH
2362: LD_INT 57
2364: PUSH
2365: EMPTY
2366: LIST
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: LIST
2376: PPUSH
2377: CALL_OW 69
2381: PUSH
2382: LD_INT 1
2384: ARRAY
2385: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2386: LD_ADDR_VAR 0 2
2390: PUSH
2391: LD_EXP 17
2395: PPUSH
2396: LD_INT 25
2398: PUSH
2399: LD_INT 1
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PPUSH
2406: CALL_OW 72
2410: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2411: LD_VAR 0 2
2415: PPUSH
2416: LD_VAR 0 3
2420: PPUSH
2421: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2432: LD_INT 22
2434: PUSH
2435: LD_INT 5
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 3
2454: PUSH
2455: LD_INT 57
2457: PUSH
2458: EMPTY
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: LIST
2469: PPUSH
2470: CALL_OW 69
2474: PUSH
2475: LD_INT 2
2477: GREATEREQUAL
2478: IFFALSE 2425
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2480: LD_ADDR_VAR 0 2
2484: PUSH
2485: LD_EXP 17
2489: PPUSH
2490: LD_INT 25
2492: PUSH
2493: LD_INT 2
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 72
2504: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2505: LD_VAR 0 2
2509: PUSH
2510: LD_INT 1
2512: ARRAY
2513: PPUSH
2514: LD_INT 5
2516: PPUSH
2517: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2521: LD_VAR 0 2
2525: PUSH
2526: LD_INT 2
2528: ARRAY
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: LD_INT 3
2537: ARRAY
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PPUSH
2543: LD_VAR 0 3
2547: PPUSH
2548: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2552: LD_VAR 0 2
2556: PUSH
2557: LD_INT 2
2559: ARRAY
2560: PUSH
2561: LD_VAR 0 2
2565: PUSH
2566: LD_INT 3
2568: ARRAY
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PPUSH
2574: LD_INT 1
2576: PPUSH
2577: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2581: LD_VAR 0 2
2585: PUSH
2586: LD_INT 2
2588: ARRAY
2589: PUSH
2590: LD_VAR 0 2
2594: PUSH
2595: LD_INT 3
2597: ARRAY
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PPUSH
2603: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2607: LD_ADDR_VAR 0 4
2611: PUSH
2612: LD_INT 22
2614: PUSH
2615: LD_INT 5
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: LD_INT 30
2624: PUSH
2625: LD_INT 31
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PPUSH
2636: CALL_OW 69
2640: ST_TO_ADDR
// for i := 1 to 2 do
2641: LD_ADDR_VAR 0 1
2645: PUSH
2646: DOUBLE
2647: LD_INT 1
2649: DEC
2650: ST_TO_ADDR
2651: LD_INT 2
2653: PUSH
2654: FOR_TO
2655: IFFALSE 2689
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
2657: LD_VAR 0 2
2661: PUSH
2662: LD_VAR 0 1
2666: PUSH
2667: LD_INT 1
2669: PLUS
2670: ARRAY
2671: PPUSH
2672: LD_VAR 0 4
2676: PUSH
2677: LD_VAR 0 1
2681: ARRAY
2682: PPUSH
2683: CALL_OW 180
2687: GO 2654
2689: POP
2690: POP
// wait ( 1 1$00 ) ;
2691: LD_INT 2100
2693: PPUSH
2694: CALL_OW 67
// farmerBaseReady := true ;
2698: LD_ADDR_EXP 4
2702: PUSH
2703: LD_INT 1
2705: ST_TO_ADDR
// end ; end_of_file
2706: PPOPN 4
2708: END
// export usForces ; export function PrepareAmerican ; begin
2709: LD_INT 0
2711: PPUSH
// usForces := [ ] ;
2712: LD_ADDR_EXP 20
2716: PUSH
2717: EMPTY
2718: ST_TO_ADDR
// uc_side := 1 ;
2719: LD_ADDR_OWVAR 20
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// uc_nation := 1 ;
2727: LD_ADDR_OWVAR 21
2731: PUSH
2732: LD_INT 1
2734: ST_TO_ADDR
// end ; end_of_file
2735: LD_VAR 0 1
2739: RET
// export function Action ; var hasAll , i , tmp ; begin
2740: LD_INT 0
2742: PPUSH
2743: PPUSH
2744: PPUSH
2745: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
2746: LD_ADDR_VAR 0 2
2750: PUSH
2751: LD_INT 22
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 21
2763: PUSH
2764: LD_INT 1
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 23
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PPUSH
2786: CALL_OW 69
2790: PUSH
2791: LD_INT 7
2793: GREATEREQUAL
2794: ST_TO_ADDR
// InGameOn ;
2795: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
2799: LD_EXP 7
2803: PPUSH
2804: CALL_OW 87
// wait ( 0 0$2 ) ;
2808: LD_INT 70
2810: PPUSH
2811: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
2815: LD_EXP 15
2819: PPUSH
2820: LD_STRING DF-1-start
2822: PPUSH
2823: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
2827: LD_EXP 7
2831: PPUSH
2832: LD_EXP 15
2836: PPUSH
2837: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
2841: LD_EXP 7
2845: PPUSH
2846: LD_STRING DH-1-start
2848: PPUSH
2849: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
2853: LD_EXP 16
2857: PPUSH
2858: LD_INT 92
2860: PPUSH
2861: LD_INT 21
2863: PPUSH
2864: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
2868: LD_EXP 11
2872: PPUSH
2873: LD_INT 94
2875: PPUSH
2876: LD_INT 23
2878: PPUSH
2879: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
2883: LD_EXP 18
2887: PUSH
2888: LD_INT 1
2890: ARRAY
2891: PPUSH
2892: LD_INT 90
2894: PPUSH
2895: LD_INT 23
2897: PPUSH
2898: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
2902: LD_EXP 18
2906: PUSH
2907: LD_INT 2
2909: ARRAY
2910: PPUSH
2911: LD_INT 93
2913: PPUSH
2914: LD_INT 25
2916: PPUSH
2917: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
2921: LD_EXP 18
2925: PPUSH
2926: LD_EXP 16
2930: PPUSH
2931: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
2935: LD_EXP 16
2939: PUSH
2940: LD_EXP 11
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PPUSH
2949: LD_EXP 7
2953: PPUSH
2954: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
2958: LD_EXP 7
2962: PPUSH
2963: LD_EXP 16
2967: PPUSH
2968: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2972: LD_INT 35
2974: PPUSH
2975: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
2979: LD_EXP 16
2983: PPUSH
2984: LD_INT 92
2986: PPUSH
2987: LD_INT 21
2989: PPUSH
2990: CALL_OW 307
2994: IFFALSE 2972
// Say ( Omar , DO-1-start ) ;
2996: LD_EXP 16
3000: PPUSH
3001: LD_STRING DO-1-start
3003: PPUSH
3004: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
3008: LD_EXP 7
3012: PPUSH
3013: LD_STRING DH-2-start
3015: PPUSH
3016: CALL_OW 88
// if hasAll then
3020: LD_VAR 0 2
3024: IFFALSE 3152
// begin Say ( Omar , DO-2-start ) ;
3026: LD_EXP 16
3030: PPUSH
3031: LD_STRING DO-2-start
3033: PPUSH
3034: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
3038: LD_EXP 16
3042: PPUSH
3043: LD_STRING DO-3-start
3045: PPUSH
3046: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
3050: LD_EXP 7
3054: PPUSH
3055: LD_STRING DH-3-start
3057: PPUSH
3058: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
3062: LD_EXP 15
3066: PPUSH
3067: LD_STRING DF-2-start
3069: PPUSH
3070: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
3074: LD_EXP 16
3078: PPUSH
3079: LD_EXP 15
3083: PPUSH
3084: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
3088: LD_EXP 16
3092: PPUSH
3093: LD_STRING DO-4-start
3095: PPUSH
3096: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
3100: LD_EXP 15
3104: PPUSH
3105: LD_STRING DF-3-start
3107: PPUSH
3108: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
3112: LD_EXP 16
3116: PPUSH
3117: LD_STRING DO-5-start
3119: PPUSH
3120: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
3124: LD_EXP 15
3128: PPUSH
3129: LD_STRING DF-4-start
3131: PPUSH
3132: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
3136: LD_EXP 16
3140: PPUSH
3141: LD_EXP 7
3145: PPUSH
3146: CALL_OW 119
// end else
3150: GO 3252
// begin Say ( Omar , DO-2-start-a ) ;
3152: LD_EXP 16
3156: PPUSH
3157: LD_STRING DO-2-start-a
3159: PPUSH
3160: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
3164: LD_EXP 16
3168: PPUSH
3169: LD_STRING DO-3-start-a
3171: PPUSH
3172: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
3176: LD_EXP 7
3180: PPUSH
3181: LD_STRING DH-3-start-a
3183: PPUSH
3184: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
3188: LD_EXP 15
3192: PPUSH
3193: LD_STRING DF-2-start-a
3195: PPUSH
3196: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
3200: LD_EXP 16
3204: PPUSH
3205: LD_EXP 15
3209: PPUSH
3210: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
3214: LD_EXP 16
3218: PPUSH
3219: LD_STRING DO-4-start-a
3221: PPUSH
3222: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
3226: LD_EXP 15
3230: PPUSH
3231: LD_STRING DF-3-start-a
3233: PPUSH
3234: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
3238: LD_EXP 16
3242: PPUSH
3243: LD_EXP 7
3247: PPUSH
3248: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
3252: LD_INT 10
3254: PPUSH
3255: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
3259: LD_EXP 16
3263: PPUSH
3264: LD_STRING DO-1-mission
3266: PPUSH
3267: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
3271: LD_EXP 16
3275: PPUSH
3276: LD_STRING DO-2-mission
3278: PPUSH
3279: CALL_OW 88
// if not hasAll then
3283: LD_VAR 0 2
3287: NOT
3288: IFFALSE 3302
// Say ( Omar , DO-3-mission ) ;
3290: LD_EXP 16
3294: PPUSH
3295: LD_STRING DO-3-mission
3297: PPUSH
3298: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
3302: LD_EXP 16
3306: PPUSH
3307: LD_STRING DO-4-mission
3309: PPUSH
3310: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
3314: LD_EXP 7
3318: PPUSH
3319: LD_STRING DH-1-mission
3321: PPUSH
3322: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
3326: LD_EXP 15
3330: PPUSH
3331: LD_STRING DF-1-mission
3333: PPUSH
3334: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
3338: LD_EXP 16
3342: PPUSH
3343: LD_STRING DO-5-mission
3345: PPUSH
3346: CALL_OW 88
// if not hasAll then
3350: LD_VAR 0 2
3354: NOT
3355: IFFALSE 3470
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
3357: LD_ADDR_VAR 0 4
3361: PUSH
3362: LD_INT 22
3364: PUSH
3365: LD_INT 2
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: LD_INT 21
3374: PUSH
3375: LD_INT 1
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: LD_INT 23
3384: PUSH
3385: LD_INT 2
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: LIST
3396: PPUSH
3397: CALL_OW 69
3401: ST_TO_ADDR
// for i := 7 downto tmp do
3402: LD_ADDR_VAR 0 3
3406: PUSH
3407: DOUBLE
3408: LD_INT 7
3410: INC
3411: ST_TO_ADDR
3412: LD_VAR 0 4
3416: PUSH
3417: FOR_DOWNTO
3418: IFFALSE 3468
// begin if omarSquad < 3 then
3420: LD_EXP 18
3424: PUSH
3425: LD_INT 3
3427: LESS
3428: IFFALSE 3432
// break ;
3430: GO 3468
// SetSide ( omarSquad [ 3 ] , 2 ) ;
3432: LD_EXP 18
3436: PUSH
3437: LD_INT 3
3439: ARRAY
3440: PPUSH
3441: LD_INT 2
3443: PPUSH
3444: CALL_OW 235
// omarSquad := Delete ( omarSquad , 3 ) ;
3448: LD_ADDR_EXP 18
3452: PUSH
3453: LD_EXP 18
3457: PPUSH
3458: LD_INT 3
3460: PPUSH
3461: CALL_OW 3
3465: ST_TO_ADDR
// end ;
3466: GO 3417
3468: POP
3469: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
3470: LD_EXP 16
3474: PUSH
3475: LD_EXP 18
3479: ADD
3480: PPUSH
3481: LD_INT 103
3483: PPUSH
3484: LD_INT 9
3486: PPUSH
3487: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
3491: LD_VAR 0 2
3495: PUSH
3496: LD_EXP 12
3500: PPUSH
3501: CALL_OW 302
3505: AND
3506: IFFALSE 3567
// begin wait ( 0 0$3 ) ;
3508: LD_INT 105
3510: PPUSH
3511: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
3515: LD_EXP 12
3519: PPUSH
3520: LD_EXP 15
3524: PPUSH
3525: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
3529: LD_EXP 12
3533: PPUSH
3534: LD_STRING DK-1-side
3536: PPUSH
3537: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
3541: LD_EXP 15
3545: PPUSH
3546: LD_EXP 12
3550: PPUSH
3551: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
3555: LD_EXP 15
3559: PPUSH
3560: LD_STRING DF-1-side
3562: PPUSH
3563: CALL_OW 88
// end ; InGameOff ;
3567: CALL_OW 9
// ChangeMissionObjectives ( BuildBase ) ;
3571: LD_STRING BuildBase
3573: PPUSH
3574: CALL_OW 337
// ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
3578: LD_INT 22
3580: PUSH
3581: LD_INT 2
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: PPUSH
3588: CALL_OW 69
3592: PPUSH
3593: CALL_OW 139
// SaveForQuickRestart ;
3597: CALL_OW 22
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
3601: LD_EXP 15
3605: PUSH
3606: LD_EXP 17
3610: ADD
3611: PPUSH
3612: LD_INT 108
3614: PPUSH
3615: LD_INT 62
3617: PPUSH
3618: CALL_OW 111
// gameStarted := true ;
3622: LD_ADDR_EXP 3
3626: PUSH
3627: LD_INT 1
3629: ST_TO_ADDR
// end ;
3630: LD_VAR 0 1
3634: RET
// every 0 0$6 trigger gameStarted do
3635: LD_EXP 3
3639: IFFALSE 3947
3641: GO 3643
3643: DISABLE
// begin InGameOn ;
3644: CALL_OW 8
// CenterOnUnits ( Heike ) ;
3648: LD_EXP 7
3652: PPUSH
3653: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
3657: LD_EXP 7
3661: PPUSH
3662: LD_EXP 11
3666: PPUSH
3667: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
3671: LD_INT 22
3673: PUSH
3674: LD_INT 2
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: PPUSH
3681: CALL_OW 69
3685: PUSH
3686: LD_EXP 7
3690: DIFF
3691: PPUSH
3692: LD_EXP 7
3696: PPUSH
3697: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
3701: LD_EXP 7
3705: PPUSH
3706: LD_STRING DH-1-explore
3708: PPUSH
3709: CALL_OW 88
// if Givi then
3713: LD_EXP 8
3717: IFFALSE 3733
// Say ( Givi , DG-1-explore ) else
3719: LD_EXP 8
3723: PPUSH
3724: LD_STRING DG-1-explore
3726: PPUSH
3727: CALL_OW 88
3731: GO 3770
// if heikeSecondSquad then
3733: LD_EXP 19
3737: IFFALSE 3770
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
3739: LD_EXP 19
3743: PPUSH
3744: LD_INT 26
3746: PUSH
3747: LD_INT 1
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: PPUSH
3754: CALL_OW 72
3758: PUSH
3759: LD_INT 1
3761: ARRAY
3762: PPUSH
3763: LD_STRING DArm-1-explore
3765: PPUSH
3766: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
3770: LD_EXP 11
3774: PPUSH
3775: LD_STRING DA-1-explore
3777: PPUSH
3778: CALL_OW 88
// if Sophia then
3782: LD_EXP 13
3786: IFFALSE 3864
// begin Say ( Sophia , DS-2-explore ) ;
3788: LD_EXP 13
3792: PPUSH
3793: LD_STRING DS-2-explore
3795: PPUSH
3796: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
3800: LD_EXP 11
3804: PPUSH
3805: LD_STRING DA-2-explore
3807: PPUSH
3808: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
3812: LD_EXP 13
3816: PPUSH
3817: LD_EXP 11
3821: PPUSH
3822: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
3826: LD_EXP 11
3830: PPUSH
3831: LD_EXP 13
3835: PPUSH
3836: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
3840: LD_EXP 13
3844: PPUSH
3845: LD_STRING DS-3-explore
3847: PPUSH
3848: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
3852: LD_EXP 11
3856: PPUSH
3857: LD_STRING DA-3-explore
3859: PPUSH
3860: CALL_OW 88
// end ; if Mike then
3864: LD_EXP 9
3868: IFFALSE 3924
// begin Say ( Mike , DM-1-explore ) ;
3870: LD_EXP 9
3874: PPUSH
3875: LD_STRING DM-1-explore
3877: PPUSH
3878: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
3882: LD_EXP 7
3886: PPUSH
3887: LD_STRING DH-2-explore
3889: PPUSH
3890: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
3894: LD_EXP 9
3898: PPUSH
3899: LD_STRING DM-2-explore
3901: PPUSH
3902: CALL_OW 88
// if Kaia then
3906: LD_EXP 12
3910: IFFALSE 3924
// Say ( Kaia , DK-1-explore ) ;
3912: LD_EXP 12
3916: PPUSH
3917: LD_STRING DK-1-explore
3919: PPUSH
3920: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
3924: LD_INT 22
3926: PUSH
3927: LD_INT 2
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PPUSH
3934: CALL_OW 69
3938: PPUSH
3939: CALL_OW 139
// InGameOff ;
3943: CALL_OW 9
// end ;
3947: END
// every 0 0$1 trigger not americanBaseSpoted and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
3948: LD_EXP 5
3952: NOT
3953: PUSH
3954: LD_INT 5
3956: PPUSH
3957: LD_INT 22
3959: PUSH
3960: LD_INT 2
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PPUSH
3967: CALL_OW 70
3971: AND
3972: PUSH
3973: LD_EXP 6
3977: NOT
3978: AND
3979: IFFALSE 4064
3981: GO 3983
3983: DISABLE
// begin if Mike then
3984: LD_EXP 9
3988: IFFALSE 4004
// Say ( Mike , DM-1-scout ) else
3990: LD_EXP 9
3994: PPUSH
3995: LD_STRING DM-1-scout
3997: PPUSH
3998: CALL_OW 88
4002: GO 4035
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
4004: LD_EXP 19
4008: PPUSH
4009: LD_INT 26
4011: PUSH
4012: LD_INT 1
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PPUSH
4019: CALL_OW 72
4023: PUSH
4024: LD_INT 1
4026: ARRAY
4027: PPUSH
4028: LD_STRING DArm-1-explore
4030: PPUSH
4031: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
4035: LD_INT 54
4037: PPUSH
4038: LD_INT 35
4040: PPUSH
4041: LD_INT 2
4043: PPUSH
4044: LD_INT 1
4046: PPUSH
4047: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
4051: LD_INT 54
4053: PPUSH
4054: LD_INT 35
4056: PPUSH
4057: LD_INT 2
4059: PPUSH
4060: CALL_OW 331
// end ;
4064: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) do var randomMen , randomWomen , speakerOk ;
4065: LD_INT 6
4067: PPUSH
4068: LD_INT 22
4070: PUSH
4071: LD_INT 2
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PPUSH
4078: CALL_OW 70
4082: IFFALSE 4337
4084: GO 4086
4086: DISABLE
4087: LD_INT 0
4089: PPUSH
4090: PPUSH
4091: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
4092: LD_ADDR_VAR 0 1
4096: PUSH
4097: LD_EXP 19
4101: PPUSH
4102: LD_INT 26
4104: PUSH
4105: LD_INT 1
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PPUSH
4112: CALL_OW 72
4116: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
4117: LD_ADDR_VAR 0 2
4121: PUSH
4122: LD_EXP 19
4126: PPUSH
4127: LD_INT 26
4129: PUSH
4130: LD_INT 2
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: PPUSH
4137: CALL_OW 72
4141: ST_TO_ADDR
// DialogueOn ;
4142: CALL_OW 6
// PlaceSeeing ( 36 , 27 , 2 , - 10 ) ;
4146: LD_INT 36
4148: PPUSH
4149: LD_INT 27
4151: PPUSH
4152: LD_INT 2
4154: PPUSH
4155: LD_INT 10
4157: NEG
4158: PPUSH
4159: CALL_OW 330
// dwait ( 0 0$2 ) ;
4163: LD_INT 70
4165: PPUSH
4166: CALL_OW 68
// speakerOk := false ;
4170: LD_ADDR_VAR 0 3
4174: PUSH
4175: LD_INT 0
4177: ST_TO_ADDR
// if Mike then
4178: LD_EXP 9
4182: IFFALSE 4204
// speakerOk := Say ( Mike , DM-1-spot ) else
4184: LD_ADDR_VAR 0 3
4188: PUSH
4189: LD_EXP 9
4193: PPUSH
4194: LD_STRING DM-1-spot
4196: PPUSH
4197: CALL_OW 88
4201: ST_TO_ADDR
4202: GO 4232
// if randomMen then
4204: LD_VAR 0 1
4208: IFFALSE 4232
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
4210: LD_ADDR_VAR 0 3
4214: PUSH
4215: LD_VAR 0 1
4219: PUSH
4220: LD_INT 1
4222: ARRAY
4223: PPUSH
4224: LD_STRING DArm-1-spot-a
4226: PPUSH
4227: CALL_OW 88
4231: ST_TO_ADDR
// if speakerOk then
4232: LD_VAR 0 3
4236: IFFALSE 4280
// begin if Givi then
4238: LD_EXP 8
4242: IFFALSE 4258
// Say ( Givi , DG-1-spot ) else
4244: LD_EXP 8
4248: PPUSH
4249: LD_STRING DG-1-spot
4251: PPUSH
4252: CALL_OW 88
4256: GO 4280
// if randomWomen then
4258: LD_VAR 0 2
4262: IFFALSE 4280
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
4264: LD_VAR 0 2
4268: PUSH
4269: LD_INT 1
4271: ARRAY
4272: PPUSH
4273: LD_STRING DArf-1-spot-a
4275: PPUSH
4276: CALL_OW 88
// end ; if Mike then
4280: LD_EXP 9
4284: IFFALSE 4300
// Say ( Heike , DH-1-spot ) else
4286: LD_EXP 7
4290: PPUSH
4291: LD_STRING DH-1-spot
4293: PPUSH
4294: CALL_OW 88
4298: GO 4312
// Say ( Heike , DH-1-spot-a ) ;
4300: LD_EXP 7
4304: PPUSH
4305: LD_STRING DH-1-spot-a
4307: PPUSH
4308: CALL_OW 88
// RemoveSeeing ( 36 , 27 , 2 ) ;
4312: LD_INT 36
4314: PPUSH
4315: LD_INT 27
4317: PPUSH
4318: LD_INT 2
4320: PPUSH
4321: CALL_OW 331
// DialogueOff ;
4325: CALL_OW 7
// americanBaseSpoted := true ;
4329: LD_ADDR_EXP 5
4333: PUSH
4334: LD_INT 1
4336: ST_TO_ADDR
// end ;
4337: PPOPN 3
4339: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
4340: LD_EXP 5
4344: NOT
4345: PUSH
4346: LD_INT 22
4348: PUSH
4349: LD_INT 2
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: PUSH
4356: LD_INT 101
4358: PUSH
4359: LD_INT 1
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PPUSH
4370: CALL_OW 69
4374: AND
4375: PUSH
4376: LD_EXP 6
4380: NOT
4381: AND
4382: IFFALSE 4468
4384: GO 4386
4386: DISABLE
4387: LD_INT 0
4389: PPUSH
// begin americanBaseSpoted := true ;
4390: LD_ADDR_EXP 5
4394: PUSH
4395: LD_INT 1
4397: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
4398: LD_ADDR_VAR 0 1
4402: PUSH
4403: LD_EXP 19
4407: PPUSH
4408: LD_INT 26
4410: PUSH
4411: LD_INT 1
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: ST_TO_ADDR
// if not randomMen then
4423: LD_VAR 0 1
4427: NOT
4428: IFFALSE 4432
// exit ;
4430: GO 4468
// DialogueOn ;
4432: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
4436: LD_VAR 0 1
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: PPUSH
4445: LD_STRING DArm-1-spot-a
4447: PPUSH
4448: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
4452: LD_EXP 7
4456: PPUSH
4457: LD_STRING DH-1-spot-a
4459: PPUSH
4460: CALL_OW 88
// DialogueOff ;
4464: CALL_OW 7
// end ;
4468: PPOPN 1
4470: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
4471: LD_INT 5
4473: PPUSH
4474: CALL_OW 255
4478: PUSH
4479: LD_INT 2
4481: EQUAL
4482: IFFALSE 4494
4484: GO 4486
4486: DISABLE
// YouLost ( Attack ) ; end_of_file
4487: LD_STRING Attack
4489: PPUSH
4490: CALL_OW 104
4494: END
// on UnitDestroyed ( un ) do begin if un = Heike then
4495: LD_VAR 0 1
4499: PUSH
4500: LD_EXP 7
4504: EQUAL
4505: IFFALSE 4514
// YouLost ( Heike ) ;
4507: LD_STRING Heike
4509: PPUSH
4510: CALL_OW 104
// end ;
4514: PPOPN 1
4516: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4517: LD_VAR 0 1
4521: PUSH
4522: LD_INT 2
4524: EQUAL
4525: PUSH
4526: LD_VAR 0 2
4530: PUSH
4531: LD_INT 5
4533: EQUAL
4534: AND
4535: IFFALSE 4544
// YouLost ( Attack ) ;
4537: LD_STRING Attack
4539: PPUSH
4540: CALL_OW 104
// end ; end_of_file
4544: PPOPN 2
4546: END
