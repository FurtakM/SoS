// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 645 0 0
// PrepareArabian ;
  12: CALL 1004 0 0
// PrepareAmerican ;
  16: CALL 4065 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9184 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack , cargoRecycled ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// cargoRecycled := false ;
 336: LD_ADDR_EXP 30
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 349: LD_INT 0
 351: PPUSH
// uc_side := side ;
 352: LD_ADDR_OWVAR 20
 356: PUSH
 357: LD_VAR 0 1
 361: ST_TO_ADDR
// uc_nation := nation ;
 362: LD_ADDR_OWVAR 21
 366: PUSH
 367: LD_VAR 0 2
 371: ST_TO_ADDR
// vc_chassis := chassis ;
 372: LD_ADDR_OWVAR 37
 376: PUSH
 377: LD_VAR 0 3
 381: ST_TO_ADDR
// vc_engine := engine ;
 382: LD_ADDR_OWVAR 39
 386: PUSH
 387: LD_VAR 0 4
 391: ST_TO_ADDR
// vc_control := control ;
 392: LD_ADDR_OWVAR 38
 396: PUSH
 397: LD_VAR 0 5
 401: ST_TO_ADDR
// vc_weapon := weapon ;
 402: LD_ADDR_OWVAR 40
 406: PUSH
 407: LD_VAR 0 6
 411: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 412: LD_ADDR_OWVAR 41
 416: PUSH
 417: LD_VAR 0 7
 421: ST_TO_ADDR
// result := CreateVehicle ;
 422: LD_ADDR_VAR 0 8
 426: PUSH
 427: CALL_OW 45
 431: ST_TO_ADDR
// end ;
 432: LD_VAR 0 8
 436: RET
// export function SayX ( units , ident ) ; var i ; begin
 437: LD_INT 0
 439: PPUSH
 440: PPUSH
// result := false ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// if not units then
 449: LD_VAR 0 1
 453: NOT
 454: IFFALSE 458
// exit ;
 456: GO 512
// for i in units do
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 1
 467: PUSH
 468: FOR_IN
 469: IFFALSE 510
// if IsOk ( i ) then
 471: LD_VAR 0 4
 475: PPUSH
 476: CALL_OW 302
 480: IFFALSE 508
// begin Say ( i , ident ) ;
 482: LD_VAR 0 4
 486: PPUSH
 487: LD_VAR 0 2
 491: PPUSH
 492: CALL_OW 88
// result := i ;
 496: LD_ADDR_VAR 0 3
 500: PUSH
 501: LD_VAR 0 4
 505: ST_TO_ADDR
// break ;
 506: GO 510
// end ;
 508: GO 468
 510: POP
 511: POP
// end ;
 512: LD_VAR 0 3
 516: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// InitUc ;
 521: CALL_OW 18
// InitHc ;
 525: CALL_OW 19
// uc_side := 0 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// uc_nation := 0 ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_INT 0
 544: ST_TO_ADDR
// for i = 1 to amount do
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: DOUBLE
 551: LD_INT 1
 553: DEC
 554: ST_TO_ADDR
 555: LD_VAR 0 2
 559: PUSH
 560: FOR_TO
 561: IFFALSE 634
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 563: LD_ADDR_OWVAR 29
 567: PUSH
 568: LD_INT 9
 570: PPUSH
 571: LD_INT 12
 573: PPUSH
 574: CALL_OW 12
 578: PUSH
 579: LD_INT 9
 581: PPUSH
 582: LD_INT 12
 584: PPUSH
 585: CALL_OW 12
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: ST_TO_ADDR
// hc_agressivity := 0 ;
 594: LD_ADDR_OWVAR 35
 598: PUSH
 599: LD_INT 0
 601: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 602: LD_INT 0
 604: PPUSH
 605: LD_INT 12
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 615: CALL_OW 44
 619: PPUSH
 620: LD_VAR 0 1
 624: PPUSH
 625: LD_INT 0
 627: PPUSH
 628: CALL_OW 49
// end ;
 632: GO 560
 634: POP
 635: POP
// InitHc ;
 636: CALL_OW 19
// end ;
 640: LD_VAR 0 3
 644: RET
// export function CreateNature ; var i ; begin
 645: LD_INT 0
 647: PPUSH
 648: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 649: LD_INT 2
 651: PPUSH
 652: LD_INT 5
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: LD_INT 4
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_OWVAR 67
 674: ARRAY
 675: PPUSH
 676: CALL 517 0 2
// for i := 1 to 2 do
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: DOUBLE
 686: LD_INT 1
 688: DEC
 689: ST_TO_ADDR
 690: LD_INT 2
 692: PUSH
 693: FOR_TO
 694: IFFALSE 729
// begin hc_class := 21 ;
 696: LD_ADDR_OWVAR 28
 700: PUSH
 701: LD_INT 21
 703: ST_TO_ADDR
// hc_gallery :=  ;
 704: LD_ADDR_OWVAR 33
 708: PUSH
 709: LD_STRING 
 711: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 712: CALL_OW 44
 716: PPUSH
 717: LD_INT 2
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 693
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 2
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 780
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_INT 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 49
// end ;
 778: GO 744
 780: POP
 781: POP
// for i := 1 to 2 do
 782: LD_ADDR_VAR 0 2
 786: PUSH
 787: DOUBLE
 788: LD_INT 1
 790: DEC
 791: ST_TO_ADDR
 792: LD_INT 2
 794: PUSH
 795: FOR_TO
 796: IFFALSE 831
// begin hc_class := 13 ;
 798: LD_ADDR_OWVAR 28
 802: PUSH
 803: LD_INT 13
 805: ST_TO_ADDR
// hc_gallery :=  ;
 806: LD_ADDR_OWVAR 33
 810: PUSH
 811: LD_STRING 
 813: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 814: CALL_OW 44
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 795
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 1
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ; end_of_file
 999: LD_VAR 0 4
1003: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1004: LD_INT 0
1006: PPUSH
1007: PPUSH
1008: PPUSH
1009: PPUSH
// uc_side := 5 ;
1010: LD_ADDR_OWVAR 20
1014: PUSH
1015: LD_INT 5
1017: ST_TO_ADDR
// uc_nation := 2 ;
1018: LD_ADDR_OWVAR 21
1022: PUSH
1023: LD_INT 2
1025: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1026: LD_INT 5
1028: PPUSH
1029: CALL_OW 274
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 65
1039: PPUSH
1040: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1044: LD_ADDR_EXP 39
1048: PUSH
1049: LD_STRING Farmer
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: LD_STRING 
1057: PPUSH
1058: CALL 40820 0 3
1062: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1063: LD_ADDR_EXP 40
1067: PUSH
1068: LD_STRING Omar
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: LD_STRING 
1076: PPUSH
1077: CALL 40820 0 3
1081: ST_TO_ADDR
// omarSquad := [ ] ;
1082: LD_ADDR_EXP 43
1086: PUSH
1087: EMPTY
1088: ST_TO_ADDR
// heikeSquad := [ ] ;
1089: LD_ADDR_EXP 44
1093: PUSH
1094: EMPTY
1095: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1096: LD_ADDR_EXP 45
1100: PUSH
1101: EMPTY
1102: ST_TO_ADDR
// omarCargo := [ ] ;
1103: LD_ADDR_EXP 46
1107: PUSH
1108: EMPTY
1109: ST_TO_ADDR
// for i := 1 to 5 do
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_INT 5
1122: PUSH
1123: FOR_TO
1124: IFFALSE 1282
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1126: LD_INT 0
1128: PPUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 2
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_VAR 0 2
1155: ARRAY
1156: PPUSH
1157: LD_INT 3
1159: PPUSH
1160: CALL_OW 380
// un := CreateHuman ;
1164: LD_ADDR_VAR 0 3
1168: PUSH
1169: CALL_OW 44
1173: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1174: LD_ADDR_EXP 43
1178: PUSH
1179: LD_EXP 43
1183: PUSH
1184: LD_VAR 0 3
1188: UNION
1189: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1190: LD_VAR 0 3
1194: PPUSH
1195: LD_INT 87
1197: PUSH
1198: LD_INT 30
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 91
1207: PUSH
1208: LD_INT 32
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 82
1217: PUSH
1218: LD_INT 15
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 79
1227: PUSH
1228: LD_INT 14
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: LD_INT 82
1237: PUSH
1238: LD_INT 13
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_VAR 0 2
1256: ARRAY
1257: PPUSH
1258: LD_INT 0
1260: PPUSH
1261: CALL 912 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1265: LD_VAR 0 3
1269: PPUSH
1270: LD_INT 93
1272: PPUSH
1273: LD_INT 21
1275: PPUSH
1276: CALL_OW 118
// end ;
1280: GO 1123
1282: POP
1283: POP
// uc_side := 2 ;
1284: LD_ADDR_OWVAR 20
1288: PUSH
1289: LD_INT 2
1291: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1292: LD_ADDR_EXP 31
1296: PUSH
1297: LD_STRING Heike
1299: PPUSH
1300: LD_EXP 1
1304: NOT
1305: PPUSH
1306: LD_EXP 2
1310: PPUSH
1311: CALL 40820 0 3
1315: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1316: LD_ADDR_EXP 35
1320: PUSH
1321: LD_STRING Aviradze
1323: PPUSH
1324: LD_EXP 1
1328: NOT
1329: PPUSH
1330: LD_EXP 2
1334: PPUSH
1335: CALL 40820 0 3
1339: ST_TO_ADDR
// tmp := [ ] ;
1340: LD_ADDR_VAR 0 4
1344: PUSH
1345: EMPTY
1346: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1347: LD_ADDR_EXP 32
1351: PUSH
1352: LD_STRING Givi
1354: PPUSH
1355: LD_EXP 1
1359: NOT
1360: PPUSH
1361: LD_EXP 2
1365: PPUSH
1366: CALL 40820 0 3
1370: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1371: LD_ADDR_EXP 33
1375: PUSH
1376: LD_STRING Mike
1378: PPUSH
1379: LD_EXP 1
1383: NOT
1384: PPUSH
1385: LD_EXP 2
1389: PPUSH
1390: CALL 40820 0 3
1394: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1395: LD_ADDR_EXP 34
1399: PUSH
1400: LD_STRING Kamil
1402: PPUSH
1403: LD_EXP 1
1407: NOT
1408: PPUSH
1409: LD_EXP 2
1413: PPUSH
1414: CALL 40820 0 3
1418: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1419: LD_ADDR_EXP 36
1423: PUSH
1424: LD_STRING Kaia
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_EXP 2
1437: PPUSH
1438: CALL 40820 0 3
1442: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1443: LD_ADDR_EXP 37
1447: PUSH
1448: LD_STRING Sophia
1450: PPUSH
1451: LD_EXP 1
1455: NOT
1456: PPUSH
1457: LD_EXP 2
1461: PPUSH
1462: CALL 40820 0 3
1466: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1467: LD_ADDR_EXP 38
1471: PUSH
1472: LD_STRING Markov
1474: PPUSH
1475: LD_EXP 1
1479: NOT
1480: PPUSH
1481: LD_EXP 2
1485: PPUSH
1486: CALL 40820 0 3
1490: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1491: LD_ADDR_EXP 45
1495: PUSH
1496: LD_STRING 02_others
1498: PPUSH
1499: CALL_OW 31
1503: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1504: LD_ADDR_VAR 0 4
1508: PUSH
1509: LD_EXP 33
1513: PUSH
1514: LD_EXP 34
1518: PUSH
1519: LD_EXP 36
1523: PUSH
1524: LD_EXP 37
1528: PUSH
1529: LD_EXP 38
1533: PUSH
1534: LD_EXP 32
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_EXP 45
1551: ADD
1552: PUSH
1553: LD_INT 0
1555: DIFF
1556: ST_TO_ADDR
// heikeSquad := tmp ;
1557: LD_ADDR_EXP 44
1561: PUSH
1562: LD_VAR 0 4
1566: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1567: LD_EXP 44
1571: PPUSH
1572: LD_INT 25
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 72
1586: PUSH
1587: LD_INT 3
1589: LESS
1590: IFFALSE 1640
// begin SetClass ( Kaia , 1 ) ;
1592: LD_EXP 36
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1604: LD_EXP 33
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1616: LD_EXP 32
1620: PPUSH
1621: LD_INT 1
1623: PPUSH
1624: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1628: LD_EXP 31
1632: PPUSH
1633: LD_INT 1
1635: PPUSH
1636: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1640: LD_ADDR_VAR 0 4
1644: PUSH
1645: LD_VAR 0 4
1649: PUSH
1650: LD_STRING 02_ape
1652: PPUSH
1653: CALL_OW 31
1657: UNION
1658: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1659: LD_EXP 31
1663: PPUSH
1664: LD_INT 92
1666: PPUSH
1667: LD_INT 17
1669: PPUSH
1670: LD_INT 0
1672: PPUSH
1673: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1677: LD_EXP 39
1681: PPUSH
1682: LD_INT 95
1684: PPUSH
1685: LD_INT 19
1687: PPUSH
1688: LD_INT 0
1690: PPUSH
1691: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1695: LD_EXP 40
1699: PPUSH
1700: LD_INT 89
1702: PPUSH
1703: LD_INT 25
1705: PPUSH
1706: LD_INT 0
1708: PPUSH
1709: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1713: LD_EXP 35
1717: PPUSH
1718: LD_INT 92
1720: PPUSH
1721: LD_INT 27
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1731: LD_EXP 40
1735: PPUSH
1736: LD_EXP 35
1740: PPUSH
1741: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1745: LD_EXP 35
1749: PPUSH
1750: LD_EXP 40
1754: PPUSH
1755: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1759: LD_EXP 31
1763: PUSH
1764: LD_EXP 39
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PPUSH
1773: LD_EXP 40
1777: PPUSH
1778: CALL_OW 119
// if tmp then
1782: LD_VAR 0 4
1786: IFFALSE 1840
// for i in tmp do
1788: LD_ADDR_VAR 0 2
1792: PUSH
1793: LD_VAR 0 4
1797: PUSH
1798: FOR_IN
1799: IFFALSE 1838
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1801: LD_VAR 0 2
1805: PPUSH
1806: LD_INT 94
1808: PPUSH
1809: LD_INT 14
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1822: LD_VAR 0 2
1826: PPUSH
1827: LD_EXP 31
1831: PPUSH
1832: CALL_OW 119
// end ;
1836: GO 1798
1838: POP
1839: POP
// farmerSquad := [ ] ;
1840: LD_ADDR_EXP 42
1844: PUSH
1845: EMPTY
1846: ST_TO_ADDR
// uc_side := 5 ;
1847: LD_ADDR_OWVAR 20
1851: PUSH
1852: LD_INT 5
1854: ST_TO_ADDR
// uc_nation := 2 ;
1855: LD_ADDR_OWVAR 21
1859: PUSH
1860: LD_INT 2
1862: ST_TO_ADDR
// for i := 1 to 4 do
1863: LD_ADDR_VAR 0 2
1867: PUSH
1868: DOUBLE
1869: LD_INT 1
1871: DEC
1872: ST_TO_ADDR
1873: LD_INT 4
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1955
// begin PrepareHuman ( false , 1 , 2 ) ;
1879: LD_INT 0
1881: PPUSH
1882: LD_INT 1
1884: PPUSH
1885: LD_INT 2
1887: PPUSH
1888: CALL_OW 380
// un := CreateHuman ;
1892: LD_ADDR_VAR 0 3
1896: PUSH
1897: CALL_OW 44
1901: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1902: LD_VAR 0 3
1906: PPUSH
1907: LD_INT 102
1909: PPUSH
1910: LD_INT 27
1912: PPUSH
1913: LD_INT 4
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1923: LD_ADDR_EXP 42
1927: PUSH
1928: LD_EXP 42
1932: PUSH
1933: LD_VAR 0 3
1937: UNION
1938: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1939: LD_VAR 0 3
1943: PPUSH
1944: LD_EXP 40
1948: PPUSH
1949: CALL_OW 119
// end ;
1953: GO 1876
1955: POP
1956: POP
// for i := 1 to 2 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_INT 2
1969: PUSH
1970: FOR_TO
1971: IFFALSE 2049
// begin PrepareHuman ( false , 2 , 2 ) ;
1973: LD_INT 0
1975: PPUSH
1976: LD_INT 2
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: CALL_OW 380
// un := CreateHuman ;
1986: LD_ADDR_VAR 0 3
1990: PUSH
1991: CALL_OW 44
1995: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1996: LD_VAR 0 3
2000: PPUSH
2001: LD_INT 108
2003: PPUSH
2004: LD_INT 62
2006: PPUSH
2007: LD_INT 2
2009: PPUSH
2010: LD_INT 0
2012: PPUSH
2013: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2017: LD_ADDR_EXP 42
2021: PUSH
2022: LD_EXP 42
2026: PUSH
2027: LD_VAR 0 3
2031: UNION
2032: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2033: LD_VAR 0 3
2037: PPUSH
2038: LD_EXP 40
2042: PPUSH
2043: CALL_OW 119
// end ;
2047: GO 1970
2049: POP
2050: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2051: LD_INT 109
2053: PPUSH
2054: LD_INT 63
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: LD_INT 15
2062: NEG
2063: PPUSH
2064: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2068: LD_INT 109
2070: PPUSH
2071: LD_INT 63
2073: PPUSH
2074: LD_INT 2
2076: PPUSH
2077: CALL_OW 331
// end ;
2081: LD_VAR 0 1
2085: RET
// export function PrepareIbrahim ( x , y ) ; begin
2086: LD_INT 0
2088: PPUSH
// uc_side := 6 ;
2089: LD_ADDR_OWVAR 20
2093: PUSH
2094: LD_INT 6
2096: ST_TO_ADDR
// uc_nation := 3 ;
2097: LD_ADDR_OWVAR 21
2101: PUSH
2102: LD_INT 3
2104: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2105: LD_ADDR_EXP 41
2109: PUSH
2110: LD_STRING IbrahimRu
2112: PPUSH
2113: LD_INT 0
2115: PPUSH
2116: LD_STRING 
2118: PPUSH
2119: CALL 40820 0 3
2123: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2124: LD_EXP 41
2128: PPUSH
2129: LD_VAR 0 1
2133: PPUSH
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: CALL_OW 50
// end ;
2149: LD_VAR 0 3
2153: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2154: LD_EXP 40
2158: PUSH
2159: LD_EXP 43
2163: ADD
2164: PPUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 3
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 72
2179: IFFALSE 2235
2181: GO 2183
2183: DISABLE
2184: LD_INT 0
2186: PPUSH
// begin enable ;
2187: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2188: LD_ADDR_VAR 0 1
2192: PUSH
2193: LD_EXP 40
2197: PUSH
2198: LD_EXP 43
2202: ADD
2203: PPUSH
2204: LD_INT 95
2206: PUSH
2207: LD_INT 3
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PPUSH
2214: CALL_OW 72
2218: PUSH
2219: FOR_IN
2220: IFFALSE 2233
// RemoveUnit ( i ) ;
2222: LD_VAR 0 1
2226: PPUSH
2227: CALL_OW 64
2231: GO 2219
2233: POP
2234: POP
// end ;
2235: PPOPN 1
2237: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2238: LD_EXP 3
2242: PUSH
2243: LD_EXP 39
2247: PPUSH
2248: LD_INT 4
2250: PPUSH
2251: CALL_OW 308
2255: AND
2256: IFFALSE 3060
2258: GO 2260
2260: DISABLE
2261: LD_INT 0
2263: PPUSH
2264: PPUSH
2265: PPUSH
2266: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2267: LD_EXP 39
2271: PPUSH
2272: LD_INT 110
2274: PPUSH
2275: LD_INT 60
2277: PPUSH
2278: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2282: LD_EXP 39
2286: PPUSH
2287: LD_INT 110
2289: PPUSH
2290: LD_INT 61
2292: PPUSH
2293: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_EXP 42
2306: PPUSH
2307: LD_INT 25
2309: PUSH
2310: LD_INT 1
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PPUSH
2317: CALL_OW 72
2321: ST_TO_ADDR
// if tmp then
2322: LD_VAR 0 2
2326: IFFALSE 2420
// begin for i := 1 to 2 do
2328: LD_ADDR_VAR 0 1
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_INT 2
2340: PUSH
2341: FOR_TO
2342: IFFALSE 2418
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2344: LD_VAR 0 2
2348: PUSH
2349: LD_VAR 0 1
2353: ARRAY
2354: PPUSH
2355: LD_INT 5
2357: PPUSH
2358: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2362: LD_VAR 0 2
2366: PUSH
2367: LD_VAR 0 1
2371: ARRAY
2372: PPUSH
2373: LD_INT 2
2375: PPUSH
2376: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2380: LD_VAR 0 2
2384: PUSH
2385: LD_VAR 0 1
2389: ARRAY
2390: PPUSH
2391: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2395: LD_VAR 0 2
2399: PUSH
2400: LD_VAR 0 1
2404: ARRAY
2405: PPUSH
2406: LD_INT 107
2408: PPUSH
2409: LD_INT 66
2411: PPUSH
2412: CALL_OW 171
// end ;
2416: GO 2341
2418: POP
2419: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2420: LD_ADDR_VAR 0 2
2424: PUSH
2425: LD_EXP 42
2429: PPUSH
2430: LD_INT 25
2432: PUSH
2433: LD_INT 2
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PPUSH
2440: CALL_OW 72
2444: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2445: LD_INT 35
2447: PPUSH
2448: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_EXP 42
2461: PPUSH
2462: LD_INT 25
2464: PUSH
2465: LD_INT 2
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 72
2476: ST_TO_ADDR
// until tmp ;
2477: LD_VAR 0 2
2481: IFFALSE 2445
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2483: LD_VAR 0 2
2487: PPUSH
2488: LD_INT 31
2490: PPUSH
2491: LD_INT 102
2493: PPUSH
2494: LD_INT 69
2496: PPUSH
2497: LD_INT 2
2499: PPUSH
2500: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2504: LD_INT 35
2506: PPUSH
2507: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2511: LD_EXP 42
2515: PPUSH
2516: LD_INT 3
2518: PUSH
2519: LD_INT 60
2521: PUSH
2522: EMPTY
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: LD_INT 25
2531: PUSH
2532: LD_INT 2
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PPUSH
2543: CALL_OW 72
2547: IFFALSE 2504
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: LD_EXP 42
2558: PPUSH
2559: LD_INT 25
2561: PUSH
2562: LD_INT 2
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PPUSH
2569: CALL_OW 72
2573: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2574: LD_VAR 0 2
2578: PPUSH
2579: LD_INT 6
2581: PPUSH
2582: LD_INT 116
2584: PPUSH
2585: LD_INT 55
2587: PPUSH
2588: LD_INT 4
2590: PPUSH
2591: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2595: LD_VAR 0 2
2599: PPUSH
2600: LD_INT 4
2602: PPUSH
2603: LD_INT 116
2605: PPUSH
2606: LD_INT 70
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 31
2623: PPUSH
2624: LD_INT 109
2626: PPUSH
2627: LD_INT 50
2629: PPUSH
2630: LD_INT 2
2632: PPUSH
2633: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2637: LD_INT 35
2639: PPUSH
2640: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2644: LD_INT 22
2646: PUSH
2647: LD_INT 5
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PUSH
2654: LD_INT 30
2656: PUSH
2657: LD_INT 4
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: PUSH
2664: LD_INT 3
2666: PUSH
2667: LD_INT 57
2669: PUSH
2670: EMPTY
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: LIST
2681: PPUSH
2682: CALL_OW 69
2686: IFFALSE 2637
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2688: LD_ADDR_VAR 0 3
2692: PUSH
2693: LD_INT 22
2695: PUSH
2696: LD_INT 5
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 30
2705: PUSH
2706: LD_INT 4
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 57
2718: PUSH
2719: EMPTY
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 69
2735: PUSH
2736: LD_INT 1
2738: ARRAY
2739: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2740: LD_ADDR_VAR 0 2
2744: PUSH
2745: LD_EXP 42
2749: PPUSH
2750: LD_INT 25
2752: PUSH
2753: LD_INT 1
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PPUSH
2760: CALL_OW 72
2764: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_VAR 0 3
2774: PPUSH
2775: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2779: LD_INT 35
2781: PPUSH
2782: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 30
2798: PUSH
2799: LD_INT 31
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: LD_INT 3
2808: PUSH
2809: LD_INT 57
2811: PUSH
2812: EMPTY
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 69
2828: PUSH
2829: LD_INT 2
2831: GREATEREQUAL
2832: IFFALSE 2779
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2834: LD_ADDR_VAR 0 2
2838: PUSH
2839: LD_EXP 42
2843: PPUSH
2844: LD_INT 25
2846: PUSH
2847: LD_INT 2
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 72
2858: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2859: LD_VAR 0 2
2863: PUSH
2864: LD_INT 1
2866: ARRAY
2867: PPUSH
2868: LD_INT 5
2870: PPUSH
2871: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2875: LD_VAR 0 2
2879: PUSH
2880: LD_INT 2
2882: ARRAY
2883: PUSH
2884: LD_VAR 0 2
2888: PUSH
2889: LD_INT 3
2891: ARRAY
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PPUSH
2897: LD_VAR 0 3
2901: PPUSH
2902: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2906: LD_VAR 0 2
2910: PUSH
2911: LD_INT 2
2913: ARRAY
2914: PUSH
2915: LD_VAR 0 2
2919: PUSH
2920: LD_INT 3
2922: ARRAY
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2935: LD_VAR 0 2
2939: PUSH
2940: LD_INT 2
2942: ARRAY
2943: PUSH
2944: LD_VAR 0 2
2948: PUSH
2949: LD_INT 3
2951: ARRAY
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: PPUSH
2957: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2961: LD_ADDR_VAR 0 4
2965: PUSH
2966: LD_INT 22
2968: PUSH
2969: LD_INT 5
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 31
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PPUSH
2990: CALL_OW 69
2994: ST_TO_ADDR
// for i := 1 to 2 do
2995: LD_ADDR_VAR 0 1
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 2
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3043
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3011: LD_VAR 0 2
3015: PUSH
3016: LD_VAR 0 1
3020: PUSH
3021: LD_INT 1
3023: PLUS
3024: ARRAY
3025: PPUSH
3026: LD_VAR 0 4
3030: PUSH
3031: LD_VAR 0 1
3035: ARRAY
3036: PPUSH
3037: CALL_OW 180
3041: GO 3008
3043: POP
3044: POP
// wait ( 1 1$00 ) ;
3045: LD_INT 2100
3047: PPUSH
3048: CALL_OW 67
// farmerBaseReady := true ;
3052: LD_ADDR_EXP 4
3056: PUSH
3057: LD_INT 1
3059: ST_TO_ADDR
// end ;
3060: PPOPN 4
3062: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3063: LD_EXP 4
3067: PUSH
3068: LD_EXP 12
3072: NOT
3073: AND
3074: IFFALSE 3596
3076: GO 3078
3078: DISABLE
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
3085: PPUSH
// begin enable ;
3086: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: LD_EXP 42
3096: PPUSH
3097: LD_INT 25
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PPUSH
3107: CALL_OW 72
3111: PUSH
3112: LD_EXP 39
3116: ADD
3117: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_EXP 42
3127: PPUSH
3128: LD_INT 25
3130: PUSH
3131: LD_INT 2
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 72
3142: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3143: LD_ADDR_VAR 0 5
3147: PUSH
3148: LD_INT 22
3150: PUSH
3151: LD_INT 5
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: LD_INT 21
3160: PUSH
3161: LD_INT 3
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: LD_INT 24
3173: PUSH
3174: LD_INT 1000
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 69
3194: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3195: LD_ADDR_VAR 0 4
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 5
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_INT 30
3212: PUSH
3213: LD_INT 4
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PPUSH
3224: CALL_OW 69
3228: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3229: LD_VAR 0 4
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: CALL_OW 302
3242: IFFALSE 3306
// for i in sol do
3244: LD_ADDR_VAR 0 1
3248: PUSH
3249: LD_VAR 0 3
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3304
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3257: LD_VAR 0 1
3261: PPUSH
3262: CALL_OW 256
3266: PUSH
3267: LD_INT 999
3269: LESS
3270: PUSH
3271: LD_VAR 0 1
3275: PPUSH
3276: CALL_OW 310
3280: NOT
3281: AND
3282: IFFALSE 3302
// ComEnterUnit ( i , arm [ 1 ] ) ;
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_VAR 0 4
3293: PUSH
3294: LD_INT 1
3296: ARRAY
3297: PPUSH
3298: CALL_OW 120
3302: GO 3254
3304: POP
3305: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3306: LD_VAR 0 2
3310: NOT
3311: PUSH
3312: LD_INT 22
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 21
3324: PUSH
3325: LD_INT 1
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PPUSH
3336: CALL_OW 69
3340: NOT
3341: AND
3342: IFFALSE 3434
// begin uc_side := 5 ;
3344: LD_ADDR_OWVAR 20
3348: PUSH
3349: LD_INT 5
3351: ST_TO_ADDR
// uc_nation := 2 ;
3352: LD_ADDR_OWVAR 21
3356: PUSH
3357: LD_INT 2
3359: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3360: LD_INT 0
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_INT 2
3368: PPUSH
3369: CALL_OW 380
// eng := CreateHuman ;
3373: LD_ADDR_VAR 0 2
3377: PUSH
3378: CALL_OW 44
3382: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3383: LD_VAR 0 2
3387: PPUSH
3388: LD_INT 102
3390: PPUSH
3391: LD_INT 8
3393: PPUSH
3394: LD_INT 0
3396: PPUSH
3397: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3401: LD_VAR 0 2
3405: PPUSH
3406: LD_INT 110
3408: PPUSH
3409: LD_INT 60
3411: PPUSH
3412: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3416: LD_ADDR_EXP 42
3420: PUSH
3421: LD_EXP 42
3425: PUSH
3426: LD_VAR 0 2
3430: UNION
3431: ST_TO_ADDR
// end else
3432: GO 3596
// begin for i in eng do
3434: LD_ADDR_VAR 0 1
3438: PUSH
3439: LD_VAR 0 2
3443: PUSH
3444: FOR_IN
3445: IFFALSE 3594
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3447: LD_INT 10
3449: PPUSH
3450: LD_INT 1
3452: PPUSH
3453: CALL_OW 287
3457: IFFALSE 3508
// begin if IsInUnit ( i ) then
3459: LD_VAR 0 1
3463: PPUSH
3464: CALL_OW 310
3468: IFFALSE 3479
// ComExitBuilding ( i ) ;
3470: LD_VAR 0 1
3474: PPUSH
3475: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3479: LD_VAR 0 1
3483: PPUSH
3484: LD_INT 10
3486: PPUSH
3487: CALL_OW 308
3491: NOT
3492: IFFALSE 3506
// AddComMoveToArea ( i , collectFarmerArea ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: LD_INT 10
3501: PPUSH
3502: CALL_OW 173
// end else
3506: GO 3592
// begin if damagedBuilding then
3508: LD_VAR 0 5
3512: IFFALSE 3556
// begin if IsInUnit ( i ) then
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 310
3523: IFFALSE 3536
// ComExitBuilding ( i ) else
3525: LD_VAR 0 1
3529: PPUSH
3530: CALL_OW 122
3534: GO 3554
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3536: LD_VAR 0 1
3540: PPUSH
3541: LD_VAR 0 5
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 130
// end else
3554: GO 3592
// if not IsInUnit ( i ) and not HasTask ( i ) then
3556: LD_VAR 0 1
3560: PPUSH
3561: CALL_OW 310
3565: NOT
3566: PUSH
3567: LD_VAR 0 1
3571: PPUSH
3572: CALL_OW 314
3576: NOT
3577: AND
3578: IFFALSE 3592
// ComEnterUnit ( i , arDepot ) ;
3580: LD_VAR 0 1
3584: PPUSH
3585: LD_INT 5
3587: PPUSH
3588: CALL_OW 120
// end ; end ;
3592: GO 3444
3594: POP
3595: POP
// end ; end ;
3596: PPOPN 5
3598: END
// export function CargoEvacuation ; begin
3599: LD_INT 0
3601: PPUSH
// wait ( 0 0$3 ) ;
3602: LD_INT 105
3604: PPUSH
3605: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3609: LD_ADDR_EXP 22
3613: PUSH
3614: LD_EXP 22
3618: PUSH
3619: LD_INT 1
3621: MINUS
3622: ST_TO_ADDR
// if omarCargoCounter = 0 then
3623: LD_EXP 22
3627: PUSH
3628: LD_INT 0
3630: EQUAL
3631: IFFALSE 3635
// exit ;
3633: GO 3942
// if omarCargo then
3635: LD_EXP 46
3639: IFFALSE 3650
// RemoveUnit ( omarCargo ) ;
3641: LD_EXP 46
3645: PPUSH
3646: CALL_OW 64
// omarCargo := PrepareCargo ;
3650: LD_ADDR_EXP 46
3654: PUSH
3655: CALL 3947 0 0
3659: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3660: LD_EXP 46
3664: PPUSH
3665: LD_INT 0
3667: PPUSH
3668: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3672: LD_EXP 46
3676: PPUSH
3677: LD_INT 107
3679: PPUSH
3680: LD_INT 59
3682: PPUSH
3683: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3687: LD_INT 35
3689: PPUSH
3690: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3694: LD_EXP 46
3698: PPUSH
3699: LD_INT 107
3701: PPUSH
3702: LD_INT 59
3704: PPUSH
3705: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3709: LD_EXP 46
3713: PPUSH
3714: CALL_OW 302
3718: NOT
3719: PUSH
3720: LD_EXP 46
3724: PPUSH
3725: CALL_OW 301
3729: OR
3730: IFFALSE 3734
// exit ;
3732: GO 3942
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3734: LD_EXP 46
3738: PPUSH
3739: LD_INT 107
3741: PPUSH
3742: LD_INT 59
3744: PPUSH
3745: CALL_OW 307
3749: PUSH
3750: LD_EXP 46
3754: PPUSH
3755: LD_INT 5
3757: PPUSH
3758: CALL_OW 296
3762: PUSH
3763: LD_INT 6
3765: LESS
3766: OR
3767: IFFALSE 3687
// SetTag ( omarCargo , 1 ) ;
3769: LD_EXP 46
3773: PPUSH
3774: LD_INT 1
3776: PPUSH
3777: CALL_OW 109
// wait ( 0 0$03 ) ;
3781: LD_INT 105
3783: PPUSH
3784: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3788: LD_EXP 46
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3803: LD_EXP 46
3807: PPUSH
3808: LD_INT 103
3810: PPUSH
3811: LD_INT 9
3813: PPUSH
3814: CALL_OW 171
// wait ( 0 0$1 ) ;
3818: LD_INT 35
3820: PPUSH
3821: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3825: LD_EXP 46
3829: PPUSH
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 100
3835: PPUSH
3836: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3847: LD_EXP 46
3851: PPUSH
3852: LD_INT 103
3854: PPUSH
3855: LD_INT 9
3857: PPUSH
3858: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3862: LD_EXP 46
3866: PPUSH
3867: CALL_OW 302
3871: NOT
3872: PUSH
3873: LD_EXP 46
3877: PPUSH
3878: CALL_OW 301
3882: OR
3883: IFFALSE 3887
// exit ;
3885: GO 3942
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3887: LD_EXP 46
3891: PPUSH
3892: LD_INT 103
3894: PPUSH
3895: LD_INT 9
3897: PPUSH
3898: CALL_OW 307
3902: PUSH
3903: LD_EXP 46
3907: PPUSH
3908: LD_INT 3
3910: PPUSH
3911: CALL_OW 308
3915: OR
3916: PUSH
3917: LD_EXP 46
3921: PPUSH
3922: CALL_OW 110
3926: PUSH
3927: LD_INT 0
3929: GREATER
3930: AND
3931: IFFALSE 3840
// RemoveUnit ( omarCargo ) ;
3933: LD_EXP 46
3937: PPUSH
3938: CALL_OW 64
// end ;
3942: LD_VAR 0 1
3946: RET
// export function PrepareCargo ; var un , veh ; begin
3947: LD_INT 0
3949: PPUSH
3950: PPUSH
3951: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3952: LD_ADDR_VAR 0 3
3956: PUSH
3957: LD_INT 5
3959: PPUSH
3960: LD_INT 2
3962: PPUSH
3963: LD_INT 14
3965: PPUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 32
3974: PPUSH
3975: LD_INT 80
3977: PPUSH
3978: CALL 349 0 7
3982: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3983: LD_VAR 0 3
3987: PPUSH
3988: LD_INT 4
3990: PPUSH
3991: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 101
4002: PPUSH
4003: LD_INT 8
4005: PPUSH
4006: LD_INT 0
4008: PPUSH
4009: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4013: LD_INT 0
4015: PPUSH
4016: LD_INT 3
4018: PPUSH
4019: LD_INT 4
4021: PPUSH
4022: CALL_OW 380
// un := CreateHuman ;
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: CALL_OW 44
4035: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4036: LD_VAR 0 2
4040: PPUSH
4041: LD_VAR 0 3
4045: PPUSH
4046: CALL_OW 52
// result := veh ;
4050: LD_ADDR_VAR 0 1
4054: PUSH
4055: LD_VAR 0 3
4059: ST_TO_ADDR
// end ; end_of_file
4060: LD_VAR 0 1
4064: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4065: LD_INT 0
4067: PPUSH
4068: PPUSH
4069: PPUSH
// usForces := [ ] ;
4070: LD_ADDR_EXP 47
4074: PUSH
4075: EMPTY
4076: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4077: LD_ADDR_EXP 49
4081: PUSH
4082: LD_INT 6
4084: PUSH
4085: LD_INT 32
4087: PUSH
4088: LD_INT 27
4090: PUSH
4091: LD_INT 1
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: PUSH
4100: LD_INT 4
4102: PUSH
4103: LD_INT 43
4105: PUSH
4106: LD_INT 24
4108: PUSH
4109: LD_INT 5
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 27
4120: PUSH
4121: LD_INT 29
4123: PUSH
4124: LD_INT 21
4126: PUSH
4127: LD_INT 0
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4141: LD_INT 11
4143: PPUSH
4144: CALL_OW 274
4148: PPUSH
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 150
4154: PUSH
4155: LD_INT 120
4157: PUSH
4158: LD_INT 100
4160: PUSH
4161: LD_INT 80
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: LD_OWVAR 67
4174: ARRAY
4175: PPUSH
4176: CALL_OW 277
// if Difficulty = 1 then
4180: LD_OWVAR 67
4184: PUSH
4185: LD_INT 1
4187: EQUAL
4188: IFFALSE 4197
// RemoveUnit ( hillBun ) ;
4190: LD_INT 14
4192: PPUSH
4193: CALL_OW 64
// uc_side := 1 ;
4197: LD_ADDR_OWVAR 20
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// uc_nation := 1 ;
4205: LD_ADDR_OWVAR 21
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// hc_gallery :=  ;
4213: LD_ADDR_OWVAR 33
4217: PUSH
4218: LD_STRING 
4220: ST_TO_ADDR
// hc_name :=  ;
4221: LD_ADDR_OWVAR 26
4225: PUSH
4226: LD_STRING 
4228: ST_TO_ADDR
// hc_importance := 0 ;
4229: LD_ADDR_OWVAR 32
4233: PUSH
4234: LD_INT 0
4236: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4237: LD_INT 1
4239: PPUSH
4240: LD_INT 1
4242: PPUSH
4243: LD_INT 3
4245: PPUSH
4246: CALL_OW 380
// usCommander := CreateHuman ;
4250: LD_ADDR_EXP 48
4254: PUSH
4255: CALL_OW 44
4259: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4260: LD_EXP 48
4264: PPUSH
4265: LD_INT 11
4267: PPUSH
4268: CALL_OW 52
// if Difficulty > 1 then
4272: LD_OWVAR 67
4276: PUSH
4277: LD_INT 1
4279: GREATER
4280: IFFALSE 4362
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4282: LD_INT 0
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PUSH
4291: LD_INT 2
4293: PUSH
4294: LD_INT 3
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: LIST
4301: PUSH
4302: LD_OWVAR 67
4306: ARRAY
4307: PPUSH
4308: CALL_OW 380
// un := CreateHuman ;
4312: LD_ADDR_VAR 0 3
4316: PUSH
4317: CALL_OW 44
4321: ST_TO_ADDR
// usForces := usForces union un ;
4322: LD_ADDR_EXP 47
4326: PUSH
4327: LD_EXP 47
4331: PUSH
4332: LD_VAR 0 3
4336: UNION
4337: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4338: LD_VAR 0 3
4342: PPUSH
4343: LD_INT 1
4345: PPUSH
4346: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4350: LD_VAR 0 3
4354: PPUSH
4355: LD_INT 14
4357: PPUSH
4358: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: DOUBLE
4368: LD_INT 1
4370: DEC
4371: ST_TO_ADDR
4372: LD_INT 2
4374: PUSH
4375: LD_INT 3
4377: PUSH
4378: LD_INT 4
4380: PUSH
4381: LD_INT 4
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: PUSH
4390: LD_OWVAR 67
4394: ARRAY
4395: PUSH
4396: FOR_TO
4397: IFFALSE 4543
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4399: LD_INT 0
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: LD_INT 1
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: LD_INT 3
4413: PUSH
4414: LD_INT 3
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: PUSH
4423: LD_OWVAR 67
4427: ARRAY
4428: PPUSH
4429: CALL_OW 380
// un := CreateHuman ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: CALL_OW 44
4442: ST_TO_ADDR
// usForces := usForces union un ;
4443: LD_ADDR_EXP 47
4447: PUSH
4448: LD_EXP 47
4452: PUSH
4453: LD_VAR 0 3
4457: UNION
4458: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4459: LD_VAR 0 3
4463: PPUSH
4464: LD_INT 39
4466: PPUSH
4467: LD_INT 24
4469: PPUSH
4470: LD_INT 4
4472: PPUSH
4473: LD_INT 0
4475: PPUSH
4476: CALL_OW 50
// if i < 3 then
4480: LD_VAR 0 2
4484: PUSH
4485: LD_INT 3
4487: LESS
4488: IFFALSE 4541
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4490: LD_VAR 0 3
4494: PPUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 1
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 58
4507: PUSH
4508: EMPTY
4509: LIST
4510: PUSH
4511: LD_INT 30
4513: PUSH
4514: LD_INT 31
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: LIST
4525: PPUSH
4526: CALL_OW 69
4530: PUSH
4531: LD_VAR 0 2
4535: ARRAY
4536: PPUSH
4537: CALL_OW 120
// end ;
4541: GO 4396
4543: POP
4544: POP
// for i := 1 to 2 do
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: DOUBLE
4551: LD_INT 1
4553: DEC
4554: ST_TO_ADDR
4555: LD_INT 2
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4623
// begin PrepareHuman ( false , 2 , 2 ) ;
4561: LD_INT 0
4563: PPUSH
4564: LD_INT 2
4566: PPUSH
4567: LD_INT 2
4569: PPUSH
4570: CALL_OW 380
// un := CreateHuman ;
4574: LD_ADDR_VAR 0 3
4578: PUSH
4579: CALL_OW 44
4583: ST_TO_ADDR
// usForces := usForces union un ;
4584: LD_ADDR_EXP 47
4588: PUSH
4589: LD_EXP 47
4593: PUSH
4594: LD_VAR 0 3
4598: UNION
4599: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4600: LD_VAR 0 3
4604: PPUSH
4605: LD_INT 39
4607: PPUSH
4608: LD_INT 24
4610: PPUSH
4611: LD_INT 4
4613: PPUSH
4614: LD_INT 0
4616: PPUSH
4617: CALL_OW 50
// end ;
4621: GO 4558
4623: POP
4624: POP
// PrepareHuman ( false , 4 , 1 ) ;
4625: LD_INT 0
4627: PPUSH
4628: LD_INT 4
4630: PPUSH
4631: LD_INT 1
4633: PPUSH
4634: CALL_OW 380
// un := CreateHuman ;
4638: LD_ADDR_VAR 0 3
4642: PUSH
4643: CALL_OW 44
4647: ST_TO_ADDR
// usForces := usForces union un ;
4648: LD_ADDR_EXP 47
4652: PUSH
4653: LD_EXP 47
4657: PUSH
4658: LD_VAR 0 3
4662: UNION
4663: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4664: LD_VAR 0 3
4668: PPUSH
4669: LD_INT 39
4671: PPUSH
4672: LD_INT 24
4674: PPUSH
4675: LD_INT 4
4677: PPUSH
4678: LD_INT 0
4680: PPUSH
4681: CALL_OW 50
// end ;
4685: LD_VAR 0 1
4689: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4690: LD_EXP 47
4694: PUSH
4695: LD_EXP 7
4699: NOT
4700: AND
4701: PUSH
4702: LD_EXP 15
4706: NOT
4707: AND
4708: IFFALSE 5139
4710: GO 4712
4712: DISABLE
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
// begin enable ;
4720: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4721: LD_ADDR_VAR 0 3
4725: PUSH
4726: LD_EXP 47
4730: PPUSH
4731: LD_INT 25
4733: PUSH
4734: LD_INT 2
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PPUSH
4741: CALL_OW 72
4745: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4746: LD_ADDR_VAR 0 4
4750: PUSH
4751: LD_EXP 47
4755: PPUSH
4756: LD_INT 25
4758: PUSH
4759: LD_INT 1
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PPUSH
4766: CALL_OW 72
4770: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4771: LD_ADDR_VAR 0 5
4775: PUSH
4776: LD_EXP 47
4780: PPUSH
4781: LD_INT 25
4783: PUSH
4784: LD_INT 4
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PPUSH
4791: CALL_OW 72
4795: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4796: LD_INT 7
4798: PPUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 2
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PPUSH
4809: CALL_OW 70
4813: PUSH
4814: LD_INT 1
4816: EQUAL
4817: IFFALSE 4893
// for i in sol do
4819: LD_ADDR_VAR 0 1
4823: PUSH
4824: LD_VAR 0 4
4828: PUSH
4829: FOR_IN
4830: IFFALSE 4891
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4832: LD_VAR 0 1
4836: PPUSH
4837: CALL_OW 310
4841: NOT
4842: PUSH
4843: LD_VAR 0 1
4847: PPUSH
4848: CALL_OW 310
4852: PPUSH
4853: CALL_OW 266
4857: PUSH
4858: LD_INT 4
4860: EQUAL
4861: NOT
4862: OR
4863: IFFALSE 4889
// begin ComExitBuilding ( i ) ;
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4874: LD_VAR 0 1
4878: PPUSH
4879: LD_INT 37
4881: PPUSH
4882: LD_INT 23
4884: PPUSH
4885: CALL_OW 174
// end ;
4889: GO 4829
4891: POP
4892: POP
// if eng then
4893: LD_VAR 0 3
4897: IFFALSE 5139
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4899: LD_ADDR_VAR 0 2
4903: PUSH
4904: LD_INT 22
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: LD_INT 95
4916: PUSH
4917: LD_INT 7
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 21
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 3
4936: PUSH
4937: LD_INT 24
4939: PUSH
4940: LD_INT 1000
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: ST_TO_ADDR
// if b then
4962: LD_VAR 0 2
4966: IFFALSE 4997
// begin ComExitBuilding ( eng ) ;
4968: LD_VAR 0 3
4972: PPUSH
4973: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4977: LD_VAR 0 3
4981: PPUSH
4982: LD_VAR 0 2
4986: PUSH
4987: LD_INT 1
4989: ARRAY
4990: PPUSH
4991: CALL_OW 190
// end else
4995: GO 5139
// begin for i in eng do
4997: LD_ADDR_VAR 0 1
5001: PUSH
5002: LD_VAR 0 3
5006: PUSH
5007: FOR_IN
5008: IFFALSE 5137
// if not HasTask ( i ) then
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 314
5019: NOT
5020: IFFALSE 5135
// begin if americanBuildList then
5022: LD_EXP 49
5026: IFFALSE 5111
// begin if IsInUnit ( i ) then
5028: LD_VAR 0 1
5032: PPUSH
5033: CALL_OW 310
5037: IFFALSE 5048
// ComExitBuilding ( i ) ;
5039: LD_VAR 0 1
5043: PPUSH
5044: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5048: LD_VAR 0 1
5052: PPUSH
5053: LD_EXP 49
5057: PUSH
5058: LD_INT 1
5060: ARRAY
5061: PUSH
5062: LD_INT 1
5064: ARRAY
5065: PPUSH
5066: LD_EXP 49
5070: PUSH
5071: LD_INT 1
5073: ARRAY
5074: PUSH
5075: LD_INT 2
5077: ARRAY
5078: PPUSH
5079: LD_EXP 49
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PUSH
5088: LD_INT 3
5090: ARRAY
5091: PPUSH
5092: LD_EXP 49
5096: PUSH
5097: LD_INT 1
5099: ARRAY
5100: PUSH
5101: LD_INT 4
5103: ARRAY
5104: PPUSH
5105: CALL_OW 205
// end else
5109: GO 5135
// if not IsInUnit ( i ) then
5111: LD_VAR 0 1
5115: PPUSH
5116: CALL_OW 310
5120: NOT
5121: IFFALSE 5135
// ComEnterUnit ( i , usDepot ) ;
5123: LD_VAR 0 1
5127: PPUSH
5128: LD_INT 11
5130: PPUSH
5131: CALL_OW 120
// end ;
5135: GO 5007
5137: POP
5138: POP
// end ; end ; end ;
5139: PPOPN 5
5141: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5142: LD_INT 0
5144: PPUSH
5145: PPUSH
5146: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5147: LD_ADDR_VAR 0 3
5151: PUSH
5152: LD_INT 35
5154: PUSH
5155: LD_INT 45
5157: PUSH
5158: LD_INT 48
5160: PUSH
5161: LD_INT 82
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: ST_TO_ADDR
// for i in tech do
5170: LD_ADDR_VAR 0 4
5174: PUSH
5175: LD_VAR 0 3
5179: PUSH
5180: FOR_IN
5181: IFFALSE 5199
// AddComResearch ( lab , i ) ;
5183: LD_VAR 0 1
5187: PPUSH
5188: LD_VAR 0 4
5192: PPUSH
5193: CALL_OW 184
5197: GO 5180
5199: POP
5200: POP
// end ;
5201: LD_VAR 0 2
5205: RET
// every 4 4$00 + 3 3$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5206: LD_EXP 13
5210: PUSH
5211: LD_EXP 24
5215: PUSH
5216: LD_EXP 28
5220: LESSEQUAL
5221: AND
5222: IFFALSE 5247
5224: GO 5226
5226: DISABLE
// begin enable ;
5227: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5228: LD_INT 35
5230: PPUSH
5231: LD_INT 2065
5233: PPUSH
5234: CALL_OW 12
5238: PPUSH
5239: CALL_OW 67
// SendConvoy ;
5243: CALL 5353 0 0
// end ;
5247: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5248: LD_EXP 7
5252: PUSH
5253: LD_EXP 19
5257: AND
5258: IFFALSE 5352
5260: GO 5262
5262: DISABLE
// begin if americanHasEscaped then
5263: LD_EXP 9
5267: IFFALSE 5278
// wait ( 3 3$20 ) else
5269: LD_INT 7000
5271: PPUSH
5272: CALL_OW 67
5276: GO 5285
// wait ( 6 6$40 ) ;
5278: LD_INT 14000
5280: PPUSH
5281: CALL_OW 67
// SendAttack ;
5285: CALL 6126 0 0
// repeat wait ( [ 7 7$40 , 6 6$40 , 6 6$20 , 5 5$50 ] [ Difficulty ] ) ;
5289: LD_INT 16100
5291: PUSH
5292: LD_INT 14000
5294: PUSH
5295: LD_INT 13300
5297: PUSH
5298: LD_INT 12250
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: PPUSH
5313: CALL_OW 67
// SendAttack ;
5317: CALL 6126 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5321: LD_EXP 20
5325: PUSH
5326: LD_INT 5
5328: PUSH
5329: LD_INT 6
5331: PUSH
5332: LD_INT 7
5334: PUSH
5335: LD_INT 8
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: PUSH
5344: LD_OWVAR 67
5348: ARRAY
5349: LESS
5350: IFFALSE 5289
// end ;
5352: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5353: LD_INT 0
5355: PPUSH
5356: PPUSH
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
5361: PPUSH
5362: PPUSH
// road := rand ( 1 , 2 ) ;
5363: LD_ADDR_VAR 0 4
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 2
5373: PPUSH
5374: CALL_OW 12
5378: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5379: LD_ADDR_VAR 0 8
5383: PUSH
5384: LD_INT 3
5386: PUSH
5387: LD_INT 8
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: PUSH
5394: LD_VAR 0 4
5398: ARRAY
5399: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5400: LD_ADDR_VAR 0 5
5404: PUSH
5405: LD_INT 35
5407: PUSH
5408: LD_INT 66
5410: PUSH
5411: LD_INT 1
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 101
5421: PUSH
5422: LD_INT 8
5424: PUSH
5425: LD_INT 4
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5437: LD_ADDR_VAR 0 6
5441: PUSH
5442: LD_INT 34
5444: PUSH
5445: LD_INT 67
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PUSH
5452: LD_INT 38
5454: PUSH
5455: LD_INT 62
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 43
5464: PUSH
5465: LD_INT 54
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: LD_INT 57
5474: PUSH
5475: LD_INT 57
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 77
5484: PUSH
5485: LD_INT 71
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 86
5494: PUSH
5495: LD_INT 60
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 89
5504: PUSH
5505: LD_INT 35
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 93
5514: PUSH
5515: LD_INT 17
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 97
5524: PUSH
5525: LD_INT 10
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: LD_INT 103
5534: PUSH
5535: LD_INT 9
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: ST_TO_ADDR
// if road = 2 then
5554: LD_VAR 0 4
5558: PUSH
5559: LD_INT 2
5561: EQUAL
5562: IFFALSE 5579
// points := ReverseArray ( points ) ;
5564: LD_ADDR_VAR 0 6
5568: PUSH
5569: LD_VAR 0 6
5573: PPUSH
5574: CALL 73798 0 1
5578: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5579: LD_INT 4
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: LD_INT 2
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 12
5596: PPUSH
5597: LD_INT 80
5599: PPUSH
5600: CALL 349 0 7
// veh := CreateVehicle ;
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: CALL_OW 45
5613: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5614: LD_VAR 0 3
5618: PPUSH
5619: LD_VAR 0 5
5623: PUSH
5624: LD_VAR 0 4
5628: ARRAY
5629: PUSH
5630: LD_INT 3
5632: ARRAY
5633: PPUSH
5634: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_VAR 0 5
5647: PUSH
5648: LD_VAR 0 4
5652: ARRAY
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PPUSH
5658: LD_VAR 0 5
5662: PUSH
5663: LD_VAR 0 4
5667: ARRAY
5668: PUSH
5669: LD_INT 2
5671: ARRAY
5672: PPUSH
5673: LD_INT 0
5675: PPUSH
5676: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5680: LD_INT 0
5682: PPUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PPUSH
5691: CALL_OW 380
// un := CreateHuman ;
5695: LD_ADDR_VAR 0 2
5699: PUSH
5700: CALL_OW 44
5704: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5705: LD_VAR 0 2
5709: PPUSH
5710: LD_VAR 0 3
5714: PPUSH
5715: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5719: LD_INT 70
5721: PUSH
5722: LD_INT 66
5724: PUSH
5725: LD_INT 62
5727: PUSH
5728: LD_INT 58
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: LD_OWVAR 67
5741: ARRAY
5742: PPUSH
5743: CALL_OW 13
5747: PUSH
5748: LD_OWVAR 1
5752: PUSH
5753: LD_INT 30
5755: MOD
5756: PLUS
5757: PUSH
5758: LD_EXP 24
5762: PUSH
5763: LD_INT 4
5765: LESS
5766: OR
5767: IFFALSE 5784
// SetCargo ( veh , mat_cans , 100 ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: LD_INT 1
5776: PPUSH
5777: LD_INT 100
5779: PPUSH
5780: CALL_OW 290
// for i := 2 to points do
5784: LD_ADDR_VAR 0 7
5788: PUSH
5789: DOUBLE
5790: LD_INT 2
5792: DEC
5793: ST_TO_ADDR
5794: LD_VAR 0 6
5798: PUSH
5799: FOR_TO
5800: IFFALSE 5843
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5802: LD_VAR 0 3
5806: PPUSH
5807: LD_VAR 0 6
5811: PUSH
5812: LD_VAR 0 7
5816: ARRAY
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PPUSH
5822: LD_VAR 0 6
5826: PUSH
5827: LD_VAR 0 7
5831: ARRAY
5832: PUSH
5833: LD_INT 2
5835: ARRAY
5836: PPUSH
5837: CALL_OW 171
5841: GO 5799
5843: POP
5844: POP
// convoyCounter := convoyCounter + 1 ;
5845: LD_ADDR_EXP 24
5849: PUSH
5850: LD_EXP 24
5854: PUSH
5855: LD_INT 1
5857: PLUS
5858: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5859: LD_INT 35
5861: PPUSH
5862: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5866: LD_VAR 0 3
5870: PPUSH
5871: CALL_OW 255
5875: PUSH
5876: LD_INT 4
5878: NONEQUAL
5879: IFFALSE 5892
// begin ComStop ( veh ) ;
5881: LD_VAR 0 3
5885: PPUSH
5886: CALL_OW 141
// exit ;
5890: GO 6121
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5892: LD_VAR 0 3
5896: PPUSH
5897: CALL_OW 314
5901: NOT
5902: PUSH
5903: LD_VAR 0 3
5907: PPUSH
5908: CALL_OW 302
5912: AND
5913: IFFALSE 5954
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5915: LD_VAR 0 3
5919: PPUSH
5920: LD_VAR 0 6
5924: PUSH
5925: LD_VAR 0 6
5929: ARRAY
5930: PUSH
5931: LD_INT 1
5933: ARRAY
5934: PPUSH
5935: LD_VAR 0 6
5939: PUSH
5940: LD_VAR 0 6
5944: ARRAY
5945: PUSH
5946: LD_INT 2
5948: ARRAY
5949: PPUSH
5950: CALL_OW 111
// if not IsInUnit ( un ) then
5954: LD_VAR 0 2
5958: PPUSH
5959: CALL_OW 310
5963: NOT
5964: IFFALSE 6005
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_VAR 0 6
5975: PUSH
5976: LD_VAR 0 6
5980: ARRAY
5981: PUSH
5982: LD_INT 1
5984: ARRAY
5985: PPUSH
5986: LD_VAR 0 6
5990: PUSH
5991: LD_VAR 0 6
5995: ARRAY
5996: PUSH
5997: LD_INT 2
5999: ARRAY
6000: PPUSH
6001: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6005: LD_VAR 0 3
6009: PPUSH
6010: LD_VAR 0 8
6014: PPUSH
6015: CALL_OW 308
6019: PUSH
6020: LD_VAR 0 2
6024: PPUSH
6025: LD_VAR 0 8
6029: PPUSH
6030: CALL_OW 308
6034: OR
6035: IFFALSE 5859
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6037: LD_VAR 0 2
6041: PPUSH
6042: CALL_OW 302
6046: PUSH
6047: LD_VAR 0 3
6051: PPUSH
6052: CALL_OW 302
6056: NOT
6057: AND
6058: PUSH
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_VAR 0 8
6068: PPUSH
6069: CALL_OW 308
6073: AND
6074: IFFALSE 6085
// RemoveUnit ( un ) ;
6076: LD_VAR 0 2
6080: PPUSH
6081: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6085: LD_VAR 0 3
6089: PPUSH
6090: LD_VAR 0 8
6094: PPUSH
6095: CALL_OW 308
6099: PUSH
6100: LD_VAR 0 3
6104: PPUSH
6105: CALL_OW 302
6109: AND
6110: IFFALSE 6121
// RemoveUnit ( veh ) ;
6112: LD_VAR 0 3
6116: PPUSH
6117: CALL_OW 64
// end ;
6121: LD_VAR 0 1
6125: RET
// export function SendAttack ; var un , veh , i ; begin
6126: LD_INT 0
6128: PPUSH
6129: PPUSH
6130: PPUSH
6131: PPUSH
// if blockAttack then
6132: LD_EXP 29
6136: IFFALSE 6159
// begin repeat wait ( 0 0$1 ) ;
6138: LD_INT 35
6140: PPUSH
6141: CALL_OW 67
// until not blockAttack ;
6145: LD_EXP 29
6149: NOT
6150: IFFALSE 6138
// wait ( 0 0$5 ) ;
6152: LD_INT 175
6154: PPUSH
6155: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 21
6171: PUSH
6172: LD_INT 1
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: PUSH
6188: LD_INT 10
6190: GREATER
6191: IFFALSE 6234
// begin repeat wait ( 0 0$1 ) ;
6193: LD_INT 35
6195: PPUSH
6196: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6200: LD_INT 22
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 21
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PPUSH
6224: CALL_OW 69
6228: PUSH
6229: LD_INT 10
6231: LESSEQUAL
6232: IFFALSE 6193
// end ; IncomingAttack ;
6234: CALL 15576 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6238: LD_INT 2100
6240: PPUSH
6241: LD_INT 3500
6243: PPUSH
6244: CALL_OW 12
6248: PPUSH
6249: CALL_OW 67
// if blockAttack then
6253: LD_EXP 29
6257: IFFALSE 6280
// begin repeat wait ( 0 0$1 ) ;
6259: LD_INT 35
6261: PPUSH
6262: CALL_OW 67
// until not blockAttack ;
6266: LD_EXP 29
6270: NOT
6271: IFFALSE 6259
// wait ( 0 0$5 ) ;
6273: LD_INT 175
6275: PPUSH
6276: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6280: LD_ADDR_VAR 0 4
6284: PUSH
6285: DOUBLE
6286: LD_INT 1
6288: DEC
6289: ST_TO_ADDR
6290: LD_INT 3
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 5
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_OWVAR 67
6312: ARRAY
6313: PUSH
6314: LD_EXP 20
6318: PUSH
6319: LD_INT 3
6321: DIV
6322: PLUS
6323: PUSH
6324: FOR_TO
6325: IFFALSE 6441
// begin uc_side := 1 ;
6327: LD_ADDR_OWVAR 20
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// uc_nation := 1 ;
6335: LD_ADDR_OWVAR 21
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6343: LD_INT 0
6345: PPUSH
6346: LD_INT 1
6348: PPUSH
6349: LD_INT 2
6351: PUSH
6352: LD_INT 3
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: PPUSH
6373: CALL_OW 380
// un := CreateHuman ;
6377: LD_ADDR_VAR 0 2
6381: PUSH
6382: CALL_OW 44
6386: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6387: LD_VAR 0 2
6391: PPUSH
6392: LD_INT 37
6394: PPUSH
6395: LD_INT 70
6397: PPUSH
6398: LD_INT 3
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: CALL_OW 50
// usAttackers := usAttackers union un ;
6408: LD_ADDR_EXP 50
6412: PUSH
6413: LD_EXP 50
6417: PUSH
6418: LD_VAR 0 2
6422: UNION
6423: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6424: LD_VAR 0 2
6428: PPUSH
6429: LD_INT 40
6431: PPUSH
6432: LD_INT 65
6434: PPUSH
6435: CALL_OW 111
// end ;
6439: GO 6324
6441: POP
6442: POP
// uc_side := 1 ;
6443: LD_ADDR_OWVAR 20
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// uc_nation := 1 ;
6451: LD_ADDR_OWVAR 21
6455: PUSH
6456: LD_INT 1
6458: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6459: LD_INT 0
6461: PPUSH
6462: LD_INT 4
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: CALL_OW 380
// un := CreateHuman ;
6472: LD_ADDR_VAR 0 2
6476: PUSH
6477: CALL_OW 44
6481: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6482: LD_VAR 0 2
6486: PPUSH
6487: LD_INT 37
6489: PPUSH
6490: LD_INT 70
6492: PPUSH
6493: LD_INT 3
6495: PPUSH
6496: LD_INT 0
6498: PPUSH
6499: CALL_OW 50
// usAttackers := usAttackers union un ;
6503: LD_ADDR_EXP 50
6507: PUSH
6508: LD_EXP 50
6512: PUSH
6513: LD_VAR 0 2
6517: UNION
6518: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6519: LD_VAR 0 2
6523: PPUSH
6524: LD_INT 40
6526: PPUSH
6527: LD_INT 65
6529: PPUSH
6530: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6534: LD_ADDR_VAR 0 4
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_OWVAR 67
6548: PUSH
6549: LD_EXP 20
6553: PUSH
6554: LD_INT 4
6556: DIV
6557: PLUS
6558: PUSH
6559: FOR_TO
6560: IFFALSE 6756
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_INT 1
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: LD_INT 2
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 3
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 1
6589: PPUSH
6590: LD_INT 3
6592: PPUSH
6593: CALL_OW 12
6597: ARRAY
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 2
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: LD_INT 90
6633: PPUSH
6634: CALL 349 0 7
6638: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6639: LD_VAR 0 3
6643: PPUSH
6644: LD_INT 35
6646: PPUSH
6647: LD_INT 65
6649: PPUSH
6650: LD_INT 0
6652: PPUSH
6653: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6657: LD_INT 0
6659: PPUSH
6660: LD_INT 3
6662: PPUSH
6663: LD_OWVAR 67
6667: PUSH
6668: LD_INT 1
6670: PLUS
6671: PPUSH
6672: CALL_OW 380
// un := CreateHuman ;
6676: LD_ADDR_VAR 0 2
6680: PUSH
6681: CALL_OW 44
6685: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_VAR 0 3
6695: PPUSH
6696: CALL_OW 52
// usAttackers := usAttackers union un ;
6700: LD_ADDR_EXP 50
6704: PUSH
6705: LD_EXP 50
6709: PUSH
6710: LD_VAR 0 2
6714: UNION
6715: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6716: LD_VAR 0 3
6720: PPUSH
6721: LD_INT 39
6723: PPUSH
6724: LD_INT 60
6726: PPUSH
6727: CALL_OW 111
// wait ( 0 0$3 ) ;
6731: LD_INT 105
6733: PPUSH
6734: CALL_OW 67
// usAttackers := usAttackers union veh ;
6738: LD_ADDR_EXP 50
6742: PUSH
6743: LD_EXP 50
6747: PUSH
6748: LD_VAR 0 3
6752: UNION
6753: ST_TO_ADDR
// end ;
6754: GO 6559
6756: POP
6757: POP
// attackWave := attackWave + 1 ;
6758: LD_ADDR_EXP 20
6762: PUSH
6763: LD_EXP 20
6767: PUSH
6768: LD_INT 1
6770: PLUS
6771: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6772: LD_EXP 25
6776: PPUSH
6777: CALL_OW 427
// end ;
6781: LD_VAR 0 1
6785: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6786: LD_INT 0
6788: PPUSH
6789: PPUSH
6790: PPUSH
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
// if retreatAllowed then
6799: LD_EXP 12
6803: IFFALSE 6815
// strategy := 2 else
6805: LD_ADDR_VAR 0 5
6809: PUSH
6810: LD_INT 2
6812: ST_TO_ADDR
6813: GO 6831
// strategy := rand ( 0 , 2 ) ;
6815: LD_ADDR_VAR 0 5
6819: PUSH
6820: LD_INT 0
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: CALL_OW 12
6830: ST_TO_ADDR
// attackFormula := [ ] ;
6831: LD_ADDR_VAR 0 6
6835: PUSH
6836: EMPTY
6837: ST_TO_ADDR
// case strategy of 0 :
6838: LD_VAR 0 5
6842: PUSH
6843: LD_INT 0
6845: DOUBLE
6846: EQUAL
6847: IFTRUE 6851
6849: GO 7181
6851: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6852: LD_INT 11
6854: PPUSH
6855: LD_INT 22
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 30
6867: PUSH
6868: LD_INT 4
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PPUSH
6879: CALL_OW 70
6883: NOT
6884: IFFALSE 6956
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6886: LD_ADDR_VAR 0 6
6890: PUSH
6891: LD_INT 41
6893: PUSH
6894: LD_INT 34
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: PUSH
6904: LD_INT 53
6906: PUSH
6907: LD_INT 62
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 37
6916: PUSH
6917: LD_INT 63
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 44
6926: PUSH
6927: LD_INT 45
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 37
6936: PUSH
6937: LD_INT 28
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: ST_TO_ADDR
6954: GO 7179
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6956: LD_INT 12
6958: PPUSH
6959: LD_INT 22
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 30
6974: PUSH
6975: LD_INT 4
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 30
6984: PUSH
6985: LD_INT 31
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 30
6994: PUSH
6995: LD_INT 32
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PPUSH
7012: CALL_OW 70
7016: NOT
7017: IFFALSE 7100
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7019: LD_ADDR_VAR 0 6
7023: PUSH
7024: LD_INT 27
7026: PUSH
7027: LD_INT 42
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 27
7036: PUSH
7037: LD_INT 32
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 53
7050: PUSH
7051: LD_INT 62
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 37
7060: PUSH
7061: LD_INT 63
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 44
7070: PUSH
7071: LD_INT 45
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 37
7080: PUSH
7081: LD_INT 28
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: ST_TO_ADDR
7098: GO 7179
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7100: LD_ADDR_VAR 0 6
7104: PUSH
7105: LD_INT 71
7107: PUSH
7108: LD_INT 67
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 54
7117: PUSH
7118: LD_INT 35
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 63
7131: PUSH
7132: LD_INT 40
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 37
7141: PUSH
7142: LD_INT 63
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 44
7151: PUSH
7152: LD_INT 45
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 37
7161: PUSH
7162: LD_INT 28
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: ST_TO_ADDR
// end ; 1 :
7179: GO 7384
7181: LD_INT 1
7183: DOUBLE
7184: EQUAL
7185: IFTRUE 7189
7187: GO 7293
7189: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7190: LD_ADDR_VAR 0 6
7194: PUSH
7195: LD_INT 71
7197: PUSH
7198: LD_INT 67
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 82
7207: PUSH
7208: LD_INT 23
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 53
7217: PUSH
7218: LD_INT 7
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 43
7227: PUSH
7228: LD_INT 10
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 53
7243: PUSH
7244: LD_INT 62
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 37
7253: PUSH
7254: LD_INT 63
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 44
7263: PUSH
7264: LD_INT 45
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 37
7273: PUSH
7274: LD_INT 28
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: ST_TO_ADDR
7291: GO 7384
7293: LD_INT 2
7295: DOUBLE
7296: EQUAL
7297: IFTRUE 7301
7299: GO 7383
7301: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7302: LD_ADDR_VAR 0 6
7306: PUSH
7307: LD_INT 90
7309: PUSH
7310: LD_INT 59
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 108
7319: PUSH
7320: LD_INT 64
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 82
7333: PUSH
7334: LD_INT 75
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 73
7343: PUSH
7344: LD_INT 67
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 101
7353: PUSH
7354: LD_INT 65
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 108
7363: PUSH
7364: LD_INT 62
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: ST_TO_ADDR
7381: GO 7384
7383: POP
// if not attackFormula then
7384: LD_VAR 0 6
7388: NOT
7389: IFFALSE 7393
// exit ;
7391: GO 9071
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7393: LD_ADDR_VAR 0 7
7397: PUSH
7398: LD_EXP 50
7402: PPUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 1
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PPUSH
7413: CALL_OW 72
7417: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7418: LD_ADDR_VAR 0 8
7422: PUSH
7423: LD_EXP 50
7427: PPUSH
7428: LD_INT 25
7430: PUSH
7431: LD_INT 4
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PPUSH
7438: CALL_OW 72
7442: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7443: LD_ADDR_VAR 0 9
7447: PUSH
7448: LD_EXP 50
7452: PPUSH
7453: LD_INT 25
7455: PUSH
7456: LD_INT 3
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PPUSH
7463: CALL_OW 72
7467: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7468: LD_ADDR_VAR 0 10
7472: PUSH
7473: LD_EXP 50
7477: PPUSH
7478: LD_INT 21
7480: PUSH
7481: LD_INT 2
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PPUSH
7488: CALL_OW 72
7492: ST_TO_ADDR
// if sci then
7493: LD_VAR 0 8
7497: IFFALSE 7534
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7499: LD_VAR 0 8
7503: PPUSH
7504: LD_VAR 0 6
7508: PUSH
7509: LD_INT 2
7511: ARRAY
7512: PUSH
7513: LD_INT 1
7515: ARRAY
7516: PPUSH
7517: LD_VAR 0 6
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PUSH
7526: LD_INT 2
7528: ARRAY
7529: PPUSH
7530: CALL_OW 111
// repeat wait ( 10 ) ;
7534: LD_INT 10
7536: PPUSH
7537: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7541: LD_ADDR_VAR 0 7
7545: PUSH
7546: LD_EXP 50
7550: PPUSH
7551: LD_INT 25
7553: PUSH
7554: LD_INT 1
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 72
7565: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7566: LD_ADDR_VAR 0 8
7570: PUSH
7571: LD_EXP 50
7575: PPUSH
7576: LD_INT 25
7578: PUSH
7579: LD_INT 4
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 72
7590: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7591: LD_ADDR_VAR 0 9
7595: PUSH
7596: LD_EXP 50
7600: PPUSH
7601: LD_INT 25
7603: PUSH
7604: LD_INT 3
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PPUSH
7611: CALL_OW 72
7615: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7616: LD_ADDR_VAR 0 10
7620: PUSH
7621: LD_EXP 50
7625: PPUSH
7626: LD_INT 21
7628: PUSH
7629: LD_INT 2
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 72
7640: ST_TO_ADDR
// if sol then
7641: LD_VAR 0 7
7645: IFFALSE 8066
// begin for i in sol do
7647: LD_ADDR_VAR 0 2
7651: PUSH
7652: LD_VAR 0 7
7656: PUSH
7657: FOR_IN
7658: IFFALSE 8064
// begin tag := GetTag ( i ) ;
7660: LD_ADDR_VAR 0 4
7664: PUSH
7665: LD_VAR 0 2
7669: PPUSH
7670: CALL_OW 110
7674: ST_TO_ADDR
// if not tag then
7675: LD_VAR 0 4
7679: NOT
7680: IFFALSE 7789
// begin if GetLives ( i ) = 1000 then
7682: LD_VAR 0 2
7686: PPUSH
7687: CALL_OW 256
7691: PUSH
7692: LD_INT 1000
7694: EQUAL
7695: IFFALSE 7711
// SetTag ( i , 1 ) else
7697: LD_VAR 0 2
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 109
7709: GO 7787
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7711: LD_VAR 0 2
7715: PPUSH
7716: LD_VAR 0 6
7720: PUSH
7721: LD_INT 2
7723: ARRAY
7724: PUSH
7725: LD_INT 1
7727: ARRAY
7728: PPUSH
7729: LD_VAR 0 6
7733: PUSH
7734: LD_INT 2
7736: ARRAY
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: PPUSH
7742: CALL_OW 297
7746: PUSH
7747: LD_INT 10
7749: GREATER
7750: IFFALSE 7787
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7752: LD_VAR 0 2
7756: PPUSH
7757: LD_VAR 0 6
7761: PUSH
7762: LD_INT 2
7764: ARRAY
7765: PUSH
7766: LD_INT 1
7768: ARRAY
7769: PPUSH
7770: LD_VAR 0 6
7774: PUSH
7775: LD_INT 2
7777: ARRAY
7778: PUSH
7779: LD_INT 2
7781: ARRAY
7782: PPUSH
7783: CALL_OW 111
// end else
7787: GO 8062
// begin if GetLives ( i ) < 760 then
7789: LD_VAR 0 2
7793: PPUSH
7794: CALL_OW 256
7798: PUSH
7799: LD_INT 760
7801: LESS
7802: IFFALSE 7853
// begin SetTag ( i , 0 ) ;
7804: LD_VAR 0 2
7808: PPUSH
7809: LD_INT 0
7811: PPUSH
7812: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7816: LD_VAR 0 2
7820: PPUSH
7821: LD_VAR 0 6
7825: PUSH
7826: LD_INT 2
7828: ARRAY
7829: PUSH
7830: LD_INT 1
7832: ARRAY
7833: PPUSH
7834: LD_VAR 0 6
7838: PUSH
7839: LD_INT 2
7841: ARRAY
7842: PUSH
7843: LD_INT 2
7845: ARRAY
7846: PPUSH
7847: CALL_OW 111
// end else
7851: GO 8062
// if tag <= attackFormula [ 1 ] then
7853: LD_VAR 0 4
7857: PUSH
7858: LD_VAR 0 6
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: LESSEQUAL
7867: IFFALSE 8028
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7869: LD_VAR 0 2
7873: PPUSH
7874: LD_VAR 0 6
7878: PUSH
7879: LD_INT 1
7881: ARRAY
7882: PUSH
7883: LD_VAR 0 4
7887: ARRAY
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PPUSH
7893: LD_VAR 0 6
7897: PUSH
7898: LD_INT 1
7900: ARRAY
7901: PUSH
7902: LD_VAR 0 4
7906: ARRAY
7907: PUSH
7908: LD_INT 2
7910: ARRAY
7911: PPUSH
7912: CALL_OW 297
7916: PUSH
7917: LD_INT 6
7919: GREATER
7920: IFFALSE 7971
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7922: LD_VAR 0 2
7926: PPUSH
7927: LD_VAR 0 6
7931: PUSH
7932: LD_INT 1
7934: ARRAY
7935: PUSH
7936: LD_VAR 0 4
7940: ARRAY
7941: PUSH
7942: LD_INT 1
7944: ARRAY
7945: PPUSH
7946: LD_VAR 0 6
7950: PUSH
7951: LD_INT 1
7953: ARRAY
7954: PUSH
7955: LD_VAR 0 4
7959: ARRAY
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 114
7969: GO 8026
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7971: LD_INT 81
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 91
7983: PUSH
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 10
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PPUSH
8001: CALL_OW 69
8005: NOT
8006: IFFALSE 8026
// SetTag ( i , tag + 1 ) ;
8008: LD_VAR 0 2
8012: PPUSH
8013: LD_VAR 0 4
8017: PUSH
8018: LD_INT 1
8020: PLUS
8021: PPUSH
8022: CALL_OW 109
// end else
8026: GO 8062
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8028: LD_VAR 0 2
8032: PPUSH
8033: LD_INT 81
8035: PUSH
8036: LD_INT 1
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PPUSH
8043: CALL_OW 69
8047: PPUSH
8048: LD_VAR 0 2
8052: PPUSH
8053: CALL_OW 74
8057: PPUSH
8058: CALL_OW 115
// end ; end ;
8062: GO 7657
8064: POP
8065: POP
// end ; if sci then
8066: LD_VAR 0 8
8070: IFFALSE 8339
// begin if not sol and not mech then
8072: LD_VAR 0 7
8076: NOT
8077: PUSH
8078: LD_VAR 0 9
8082: NOT
8083: AND
8084: IFFALSE 8136
// begin for i in sci do
8086: LD_ADDR_VAR 0 2
8090: PUSH
8091: LD_VAR 0 8
8095: PUSH
8096: FOR_IN
8097: IFFALSE 8132
// begin usForces := usForces union i ;
8099: LD_ADDR_EXP 47
8103: PUSH
8104: LD_EXP 47
8108: PUSH
8109: LD_VAR 0 2
8113: UNION
8114: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_INT 34
8122: PPUSH
8123: LD_INT 68
8125: PPUSH
8126: CALL_OW 111
// end ;
8130: GO 8096
8132: POP
8133: POP
// end else
8134: GO 8339
// for i in sci do
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_VAR 0 8
8145: PUSH
8146: FOR_IN
8147: IFFALSE 8337
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8149: LD_VAR 0 2
8153: PPUSH
8154: LD_VAR 0 6
8158: PUSH
8159: LD_INT 2
8161: ARRAY
8162: PUSH
8163: LD_INT 1
8165: ARRAY
8166: PPUSH
8167: LD_VAR 0 6
8171: PUSH
8172: LD_INT 2
8174: ARRAY
8175: PUSH
8176: LD_INT 2
8178: ARRAY
8179: PPUSH
8180: CALL_OW 297
8184: PUSH
8185: LD_INT 10
8187: GREATER
8188: IFFALSE 8227
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8190: LD_VAR 0 2
8194: PPUSH
8195: LD_VAR 0 6
8199: PUSH
8200: LD_INT 2
8202: ARRAY
8203: PUSH
8204: LD_INT 1
8206: ARRAY
8207: PPUSH
8208: LD_VAR 0 6
8212: PUSH
8213: LD_INT 2
8215: ARRAY
8216: PUSH
8217: LD_INT 2
8219: ARRAY
8220: PPUSH
8221: CALL_OW 111
8225: GO 8335
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8227: LD_VAR 0 7
8231: PPUSH
8232: LD_INT 3
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 1000
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 91
8251: PUSH
8252: LD_VAR 0 2
8256: PUSH
8257: LD_INT 10
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PPUSH
8269: CALL_OW 72
8273: IFFALSE 8335
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8275: LD_VAR 0 2
8279: PPUSH
8280: LD_VAR 0 7
8284: PPUSH
8285: LD_INT 3
8287: PUSH
8288: LD_INT 24
8290: PUSH
8291: LD_INT 1000
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 91
8304: PUSH
8305: LD_VAR 0 2
8309: PUSH
8310: LD_INT 10
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PPUSH
8322: CALL_OW 72
8326: PUSH
8327: LD_INT 1
8329: ARRAY
8330: PPUSH
8331: CALL_OW 128
8335: GO 8146
8337: POP
8338: POP
// end ; if mech then
8339: LD_VAR 0 9
8343: IFFALSE 9053
// begin for i in mech do
8345: LD_ADDR_VAR 0 2
8349: PUSH
8350: LD_VAR 0 9
8354: PUSH
8355: FOR_IN
8356: IFFALSE 9051
// begin tag := GetTag ( i ) ;
8358: LD_ADDR_VAR 0 4
8362: PUSH
8363: LD_VAR 0 2
8367: PPUSH
8368: CALL_OW 110
8372: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8373: LD_ADDR_VAR 0 11
8377: PUSH
8378: LD_VAR 0 2
8382: PPUSH
8383: CALL_OW 310
8387: ST_TO_ADDR
// if not tag then
8388: LD_VAR 0 4
8392: NOT
8393: IFFALSE 8764
// begin if veh then
8395: LD_VAR 0 11
8399: IFFALSE 8570
// begin if GetLives ( veh ) = 1000 then
8401: LD_VAR 0 11
8405: PPUSH
8406: CALL_OW 256
8410: PUSH
8411: LD_INT 1000
8413: EQUAL
8414: IFFALSE 8430
// SetTag ( i , 1 ) else
8416: LD_VAR 0 2
8420: PPUSH
8421: LD_INT 1
8423: PPUSH
8424: CALL_OW 109
8428: GO 8568
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8430: LD_VAR 0 11
8434: PPUSH
8435: LD_VAR 0 6
8439: PUSH
8440: LD_INT 3
8442: ARRAY
8443: PUSH
8444: LD_INT 1
8446: ARRAY
8447: PPUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 3
8455: ARRAY
8456: PUSH
8457: LD_INT 2
8459: ARRAY
8460: PPUSH
8461: CALL_OW 297
8465: PUSH
8466: LD_INT 8
8468: GREATER
8469: IFFALSE 8508
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8471: LD_VAR 0 11
8475: PPUSH
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 3
8483: ARRAY
8484: PUSH
8485: LD_INT 1
8487: ARRAY
8488: PPUSH
8489: LD_VAR 0 6
8493: PUSH
8494: LD_INT 3
8496: ARRAY
8497: PUSH
8498: LD_INT 2
8500: ARRAY
8501: PPUSH
8502: CALL_OW 111
8506: GO 8568
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8508: LD_INT 81
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 91
8520: PUSH
8521: LD_VAR 0 2
8525: PUSH
8526: LD_INT 12
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PPUSH
8538: CALL_OW 69
8542: NOT
8543: IFFALSE 8568
// begin ComExitVehicle ( i ) ;
8545: LD_VAR 0 2
8549: PPUSH
8550: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8554: LD_VAR 0 2
8558: PPUSH
8559: LD_VAR 0 11
8563: PPUSH
8564: CALL_OW 189
// end ; end else
8568: GO 8762
// if GetLives ( i ) < 400 then
8570: LD_VAR 0 2
8574: PPUSH
8575: CALL_OW 256
8579: PUSH
8580: LD_INT 400
8582: LESS
8583: IFFALSE 8634
// begin usAttackers := usAttackers diff i ;
8585: LD_ADDR_EXP 50
8589: PUSH
8590: LD_EXP 50
8594: PUSH
8595: LD_VAR 0 2
8599: DIFF
8600: ST_TO_ADDR
// usForces := usForces union i ;
8601: LD_ADDR_EXP 47
8605: PUSH
8606: LD_EXP 47
8610: PUSH
8611: LD_VAR 0 2
8615: UNION
8616: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8617: LD_VAR 0 2
8621: PPUSH
8622: LD_INT 34
8624: PPUSH
8625: LD_INT 68
8627: PPUSH
8628: CALL_OW 111
// end else
8632: GO 8762
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8634: LD_VAR 0 10
8638: PPUSH
8639: LD_INT 58
8641: PUSH
8642: EMPTY
8643: LIST
8644: PUSH
8645: LD_INT 24
8647: PUSH
8648: LD_INT 1000
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PPUSH
8659: CALL_OW 72
8663: PUSH
8664: LD_VAR 0 2
8668: PPUSH
8669: CALL_OW 314
8673: NOT
8674: AND
8675: PUSH
8676: LD_INT 81
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 91
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: LD_INT 9
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 69
8710: OR
8711: IFFALSE 8762
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8713: LD_VAR 0 2
8717: PPUSH
8718: LD_VAR 0 10
8722: PPUSH
8723: LD_INT 58
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: LD_INT 24
8731: PUSH
8732: LD_INT 250
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PPUSH
8743: CALL_OW 72
8747: PPUSH
8748: LD_VAR 0 2
8752: PPUSH
8753: CALL_OW 74
8757: PPUSH
8758: CALL_OW 120
// end else
8762: GO 9049
// begin if veh and GetLives ( veh ) < 760 then
8764: LD_VAR 0 11
8768: PUSH
8769: LD_VAR 0 11
8773: PPUSH
8774: CALL_OW 256
8778: PUSH
8779: LD_INT 760
8781: LESS
8782: AND
8783: IFFALSE 8834
// begin SetTag ( i , 0 ) ;
8785: LD_VAR 0 2
8789: PPUSH
8790: LD_INT 0
8792: PPUSH
8793: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8797: LD_VAR 0 11
8801: PPUSH
8802: LD_VAR 0 6
8806: PUSH
8807: LD_INT 3
8809: ARRAY
8810: PUSH
8811: LD_INT 1
8813: ARRAY
8814: PPUSH
8815: LD_VAR 0 6
8819: PUSH
8820: LD_INT 3
8822: ARRAY
8823: PUSH
8824: LD_INT 2
8826: ARRAY
8827: PPUSH
8828: CALL_OW 111
// end else
8832: GO 9049
// if veh then
8834: LD_VAR 0 11
8838: IFFALSE 9049
// if tag <= attackFormula [ 4 ] then
8840: LD_VAR 0 4
8844: PUSH
8845: LD_VAR 0 6
8849: PUSH
8850: LD_INT 4
8852: ARRAY
8853: LESSEQUAL
8854: IFFALSE 9015
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8856: LD_VAR 0 11
8860: PPUSH
8861: LD_VAR 0 6
8865: PUSH
8866: LD_INT 4
8868: ARRAY
8869: PUSH
8870: LD_VAR 0 4
8874: ARRAY
8875: PUSH
8876: LD_INT 1
8878: ARRAY
8879: PPUSH
8880: LD_VAR 0 6
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PUSH
8889: LD_VAR 0 4
8893: ARRAY
8894: PUSH
8895: LD_INT 2
8897: ARRAY
8898: PPUSH
8899: CALL_OW 297
8903: PUSH
8904: LD_INT 6
8906: GREATER
8907: IFFALSE 8958
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8909: LD_VAR 0 11
8913: PPUSH
8914: LD_VAR 0 6
8918: PUSH
8919: LD_INT 4
8921: ARRAY
8922: PUSH
8923: LD_VAR 0 4
8927: ARRAY
8928: PUSH
8929: LD_INT 1
8931: ARRAY
8932: PPUSH
8933: LD_VAR 0 6
8937: PUSH
8938: LD_INT 4
8940: ARRAY
8941: PUSH
8942: LD_VAR 0 4
8946: ARRAY
8947: PUSH
8948: LD_INT 2
8950: ARRAY
8951: PPUSH
8952: CALL_OW 114
8956: GO 9013
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8958: LD_INT 81
8960: PUSH
8961: LD_INT 1
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 91
8970: PUSH
8971: LD_VAR 0 11
8975: PUSH
8976: LD_INT 10
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: NOT
8993: IFFALSE 9013
// SetTag ( i , tag + 1 ) ;
8995: LD_VAR 0 2
8999: PPUSH
9000: LD_VAR 0 4
9004: PUSH
9005: LD_INT 1
9007: PLUS
9008: PPUSH
9009: CALL_OW 109
// end else
9013: GO 9049
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9015: LD_VAR 0 11
9019: PPUSH
9020: LD_INT 81
9022: PUSH
9023: LD_INT 1
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PPUSH
9035: LD_VAR 0 2
9039: PPUSH
9040: CALL_OW 74
9044: PPUSH
9045: CALL_OW 115
// end ; end ;
9049: GO 8355
9051: POP
9052: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9053: LD_EXP 50
9057: PPUSH
9058: LD_INT 52
9060: PUSH
9061: EMPTY
9062: LIST
9063: PPUSH
9064: CALL_OW 72
9068: NOT
9069: IFFALSE 7534
// end ;
9071: LD_VAR 0 1
9075: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9076: LD_INT 22
9078: PUSH
9079: LD_INT 1
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 32
9088: PUSH
9089: LD_INT 1
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 69
9104: IFFALSE 9181
9106: GO 9108
9108: DISABLE
9109: LD_INT 0
9111: PPUSH
// begin enable ;
9112: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_INT 22
9120: PUSH
9121: LD_INT 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 32
9130: PUSH
9131: LD_INT 1
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 69
9146: PUSH
9147: FOR_IN
9148: IFFALSE 9179
// if GetFuel ( i ) < 10 then
9150: LD_VAR 0 1
9154: PPUSH
9155: CALL_OW 261
9159: PUSH
9160: LD_INT 10
9162: LESS
9163: IFFALSE 9177
// SetFuel ( i , 10 ) ;
9165: LD_VAR 0 1
9169: PPUSH
9170: LD_INT 10
9172: PPUSH
9173: CALL_OW 240
9177: GO 9147
9179: POP
9180: POP
// end ; end_of_file
9181: PPOPN 1
9183: END
// export function Action ; var hasAll , i , tmp ; begin
9184: LD_INT 0
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_INT 22
9197: PUSH
9198: LD_INT 2
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: LD_INT 21
9207: PUSH
9208: LD_INT 1
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PUSH
9215: LD_INT 23
9217: PUSH
9218: LD_INT 2
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: PPUSH
9230: CALL_OW 69
9234: PUSH
9235: LD_INT 7
9237: GREATEREQUAL
9238: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9239: LD_VAR 0 2
9243: PPUSH
9244: LD_STRING 03_HasAll
9246: PPUSH
9247: CALL_OW 39
// Video ( true ) ;
9251: LD_INT 1
9253: PPUSH
9254: CALL 78483 0 1
// CenterNowOnUnits ( Heike ) ;
9258: LD_EXP 31
9262: PPUSH
9263: CALL_OW 87
// wait ( 0 0$2 ) ;
9267: LD_INT 70
9269: PPUSH
9270: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9274: LD_EXP 39
9278: PPUSH
9279: LD_STRING DF-1-start
9281: PPUSH
9282: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9286: LD_EXP 31
9290: PPUSH
9291: LD_EXP 39
9295: PPUSH
9296: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9300: LD_EXP 31
9304: PPUSH
9305: LD_STRING DH-1-start
9307: PPUSH
9308: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9312: LD_EXP 40
9316: PPUSH
9317: LD_INT 92
9319: PPUSH
9320: LD_INT 21
9322: PPUSH
9323: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9327: LD_EXP 35
9331: PPUSH
9332: LD_INT 94
9334: PPUSH
9335: LD_INT 23
9337: PPUSH
9338: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9342: LD_EXP 43
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PPUSH
9351: LD_INT 90
9353: PPUSH
9354: LD_INT 23
9356: PPUSH
9357: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9361: LD_EXP 43
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: LD_INT 93
9372: PPUSH
9373: LD_INT 25
9375: PPUSH
9376: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9380: LD_EXP 43
9384: PPUSH
9385: LD_EXP 40
9389: PPUSH
9390: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9394: LD_EXP 40
9398: PUSH
9399: LD_EXP 35
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PPUSH
9408: LD_EXP 31
9412: PPUSH
9413: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9417: LD_EXP 31
9421: PPUSH
9422: LD_EXP 40
9426: PPUSH
9427: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9431: LD_INT 35
9433: PPUSH
9434: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9438: LD_EXP 40
9442: PPUSH
9443: LD_INT 92
9445: PPUSH
9446: LD_INT 21
9448: PPUSH
9449: CALL_OW 307
9453: IFFALSE 9431
// Say ( Omar , DO-1-start ) ;
9455: LD_EXP 40
9459: PPUSH
9460: LD_STRING DO-1-start
9462: PPUSH
9463: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9467: LD_EXP 31
9471: PPUSH
9472: LD_STRING DH-2-start
9474: PPUSH
9475: CALL_OW 88
// if hasAll then
9479: LD_VAR 0 2
9483: IFFALSE 9611
// begin Say ( Omar , DO-2-start ) ;
9485: LD_EXP 40
9489: PPUSH
9490: LD_STRING DO-2-start
9492: PPUSH
9493: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9497: LD_EXP 40
9501: PPUSH
9502: LD_STRING DO-3-start
9504: PPUSH
9505: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9509: LD_EXP 31
9513: PPUSH
9514: LD_STRING DH-3-start
9516: PPUSH
9517: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9521: LD_EXP 39
9525: PPUSH
9526: LD_STRING DF-2-start
9528: PPUSH
9529: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9533: LD_EXP 40
9537: PPUSH
9538: LD_EXP 39
9542: PPUSH
9543: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9547: LD_EXP 40
9551: PPUSH
9552: LD_STRING DO-4-start
9554: PPUSH
9555: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9559: LD_EXP 39
9563: PPUSH
9564: LD_STRING DF-3-start
9566: PPUSH
9567: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9571: LD_EXP 40
9575: PPUSH
9576: LD_STRING DO-5-start
9578: PPUSH
9579: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9583: LD_EXP 39
9587: PPUSH
9588: LD_STRING DF-4-start
9590: PPUSH
9591: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9595: LD_EXP 40
9599: PPUSH
9600: LD_EXP 31
9604: PPUSH
9605: CALL_OW 119
// end else
9609: GO 9711
// begin Say ( Omar , DO-2-start-a ) ;
9611: LD_EXP 40
9615: PPUSH
9616: LD_STRING DO-2-start-a
9618: PPUSH
9619: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9623: LD_EXP 40
9627: PPUSH
9628: LD_STRING DO-3-start-a
9630: PPUSH
9631: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9635: LD_EXP 31
9639: PPUSH
9640: LD_STRING DH-3-start-a
9642: PPUSH
9643: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9647: LD_EXP 39
9651: PPUSH
9652: LD_STRING DF-2-start-a
9654: PPUSH
9655: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9659: LD_EXP 40
9663: PPUSH
9664: LD_EXP 39
9668: PPUSH
9669: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9673: LD_EXP 40
9677: PPUSH
9678: LD_STRING DO-4-start-a
9680: PPUSH
9681: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9685: LD_EXP 39
9689: PPUSH
9690: LD_STRING DF-3-start-a
9692: PPUSH
9693: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9697: LD_EXP 40
9701: PPUSH
9702: LD_EXP 31
9706: PPUSH
9707: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9711: LD_INT 10
9713: PPUSH
9714: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9718: LD_EXP 40
9722: PPUSH
9723: LD_STRING DO-1-mission
9725: PPUSH
9726: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9730: LD_EXP 40
9734: PPUSH
9735: LD_STRING DO-2-mission
9737: PPUSH
9738: CALL_OW 88
// if not hasAll then
9742: LD_VAR 0 2
9746: NOT
9747: IFFALSE 9761
// Say ( Omar , DO-3-mission ) ;
9749: LD_EXP 40
9753: PPUSH
9754: LD_STRING DO-3-mission
9756: PPUSH
9757: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9761: LD_EXP 40
9765: PPUSH
9766: LD_STRING DO-4-mission
9768: PPUSH
9769: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9773: LD_EXP 31
9777: PPUSH
9778: LD_STRING DH-1-mission
9780: PPUSH
9781: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9785: LD_EXP 39
9789: PPUSH
9790: LD_STRING DF-1-mission
9792: PPUSH
9793: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9797: LD_EXP 40
9801: PPUSH
9802: LD_STRING DO-5-mission
9804: PPUSH
9805: CALL_OW 88
// if not hasAll then
9809: LD_VAR 0 2
9813: NOT
9814: IFFALSE 9949
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9816: LD_ADDR_VAR 0 4
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 21
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 23
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: LIST
9855: PPUSH
9856: CALL_OW 69
9860: ST_TO_ADDR
// for i := 7 downto tmp do
9861: LD_ADDR_VAR 0 3
9865: PUSH
9866: DOUBLE
9867: LD_INT 7
9869: INC
9870: ST_TO_ADDR
9871: LD_VAR 0 4
9875: PUSH
9876: FOR_DOWNTO
9877: IFFALSE 9947
// begin if omarSquad < 3 then
9879: LD_EXP 43
9883: PUSH
9884: LD_INT 3
9886: LESS
9887: IFFALSE 9891
// break ;
9889: GO 9947
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9891: LD_EXP 43
9895: PUSH
9896: LD_INT 3
9898: ARRAY
9899: PPUSH
9900: LD_INT 2
9902: PPUSH
9903: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9907: LD_ADDR_EXP 45
9911: PUSH
9912: LD_EXP 45
9916: PUSH
9917: LD_EXP 43
9921: PUSH
9922: LD_INT 3
9924: ARRAY
9925: UNION
9926: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9927: LD_ADDR_EXP 43
9931: PUSH
9932: LD_EXP 43
9936: PPUSH
9937: LD_INT 3
9939: PPUSH
9940: CALL_OW 3
9944: ST_TO_ADDR
// end ;
9945: GO 9876
9947: POP
9948: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9949: LD_EXP 40
9953: PUSH
9954: LD_EXP 43
9958: ADD
9959: PPUSH
9960: LD_INT 103
9962: PPUSH
9963: LD_INT 9
9965: PPUSH
9966: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9970: LD_VAR 0 2
9974: PUSH
9975: LD_EXP 36
9979: PPUSH
9980: CALL_OW 302
9984: AND
9985: IFFALSE 10046
// begin wait ( 0 0$3 ) ;
9987: LD_INT 105
9989: PPUSH
9990: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9994: LD_EXP 36
9998: PPUSH
9999: LD_EXP 39
10003: PPUSH
10004: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10008: LD_EXP 36
10012: PPUSH
10013: LD_STRING DK-1-side
10015: PPUSH
10016: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10020: LD_EXP 39
10024: PPUSH
10025: LD_EXP 36
10029: PPUSH
10030: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10034: LD_EXP 39
10038: PPUSH
10039: LD_STRING DF-1-side
10041: PPUSH
10042: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10046: LD_INT 22
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PPUSH
10056: CALL_OW 69
10060: PPUSH
10061: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10065: LD_EXP 39
10069: PUSH
10070: LD_EXP 42
10074: ADD
10075: PPUSH
10076: LD_INT 108
10078: PPUSH
10079: LD_INT 62
10081: PPUSH
10082: CALL_OW 111
// gameStarted := true ;
10086: LD_ADDR_EXP 3
10090: PUSH
10091: LD_INT 1
10093: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10094: LD_INT 105
10096: PPUSH
10097: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10101: LD_EXP 31
10105: PPUSH
10106: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10110: LD_EXP 31
10114: PPUSH
10115: LD_EXP 35
10119: PPUSH
10120: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10124: LD_INT 22
10126: PUSH
10127: LD_INT 2
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PPUSH
10134: CALL_OW 69
10138: PUSH
10139: LD_EXP 31
10143: DIFF
10144: PPUSH
10145: LD_EXP 31
10149: PPUSH
10150: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10154: LD_EXP 31
10158: PPUSH
10159: LD_STRING DH-1-explore
10161: PPUSH
10162: CALL_OW 88
// if Givi then
10166: LD_EXP 32
10170: IFFALSE 10186
// Say ( Givi , DG-1-explore ) else
10172: LD_EXP 32
10176: PPUSH
10177: LD_STRING DG-1-explore
10179: PPUSH
10180: CALL_OW 88
10184: GO 10223
// if heikeSecondSquad then
10186: LD_EXP 45
10190: IFFALSE 10223
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10192: LD_EXP 45
10196: PPUSH
10197: LD_INT 26
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PPUSH
10207: CALL_OW 72
10211: PUSH
10212: LD_INT 1
10214: ARRAY
10215: PPUSH
10216: LD_STRING DArm-1-explore
10218: PPUSH
10219: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10223: LD_EXP 35
10227: PPUSH
10228: LD_STRING DA-1-explore
10230: PPUSH
10231: CALL_OW 88
// if Sophia then
10235: LD_EXP 37
10239: IFFALSE 10317
// begin Say ( Sophia , DS-2-explore ) ;
10241: LD_EXP 37
10245: PPUSH
10246: LD_STRING DS-2-explore
10248: PPUSH
10249: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10253: LD_EXP 35
10257: PPUSH
10258: LD_STRING DA-2-explore
10260: PPUSH
10261: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10265: LD_EXP 37
10269: PPUSH
10270: LD_EXP 35
10274: PPUSH
10275: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10279: LD_EXP 35
10283: PPUSH
10284: LD_EXP 37
10288: PPUSH
10289: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10293: LD_EXP 37
10297: PPUSH
10298: LD_STRING DS-3-explore
10300: PPUSH
10301: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10305: LD_EXP 35
10309: PPUSH
10310: LD_STRING DA-3-explore
10312: PPUSH
10313: CALL_OW 88
// end ; if Mike then
10317: LD_EXP 33
10321: IFFALSE 10377
// begin Say ( Mike , DM-1-explore ) ;
10323: LD_EXP 33
10327: PPUSH
10328: LD_STRING DM-1-explore
10330: PPUSH
10331: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10335: LD_EXP 31
10339: PPUSH
10340: LD_STRING DH-2-explore
10342: PPUSH
10343: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10347: LD_EXP 33
10351: PPUSH
10352: LD_STRING DM-2-explore
10354: PPUSH
10355: CALL_OW 88
// if Kaia then
10359: LD_EXP 36
10363: IFFALSE 10377
// Say ( Kaia , DK-1-explore ) ;
10365: LD_EXP 36
10369: PPUSH
10370: LD_STRING DK-1-explore
10372: PPUSH
10373: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10377: LD_INT 22
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: PPUSH
10392: CALL_OW 139
// Video ( false ) ;
10396: LD_INT 0
10398: PPUSH
10399: CALL 78483 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10403: LD_STRING BuildBase
10405: PPUSH
10406: CALL_OW 337
// SaveForQuickRestart ;
10410: CALL_OW 22
// end ;
10414: LD_VAR 0 1
10418: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10419: LD_EXP 5
10423: PUSH
10424: LD_EXP 7
10428: NOT
10429: AND
10430: IFFALSE 10617
10432: GO 10434
10434: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10435: LD_EXP 48
10439: PPUSH
10440: LD_STRING DUsm-4-assault
10442: PPUSH
10443: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10447: LD_INT 35
10449: PPUSH
10450: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10454: LD_INT 22
10456: PUSH
10457: LD_INT 2
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 21
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 50
10476: PUSH
10477: EMPTY
10478: LIST
10479: PUSH
10480: LD_INT 95
10482: PUSH
10483: LD_INT 7
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 69
10500: IFFALSE 10447
// if not IsOk ( usCommander ) or americanBaseCaptured then
10502: LD_EXP 48
10506: PPUSH
10507: CALL_OW 302
10511: NOT
10512: PUSH
10513: LD_EXP 7
10517: OR
10518: IFFALSE 10522
// exit ;
10520: GO 10617
// repeat wait ( 0 0$1 ) ;
10522: LD_INT 35
10524: PPUSH
10525: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10529: LD_INT 22
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 21
10541: PUSH
10542: LD_INT 1
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 50
10551: PUSH
10552: EMPTY
10553: LIST
10554: PUSH
10555: LD_INT 95
10557: PUSH
10558: LD_INT 7
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 69
10575: NOT
10576: IFFALSE 10522
// wait ( 0 0$3 ) ;
10578: LD_INT 105
10580: PPUSH
10581: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10585: LD_EXP 48
10589: PPUSH
10590: CALL_OW 302
10594: NOT
10595: PUSH
10596: LD_EXP 7
10600: OR
10601: IFFALSE 10605
// exit ;
10603: GO 10617
// Say ( usCommander , DUsm-3-assault ) ;
10605: LD_EXP 48
10609: PPUSH
10610: LD_STRING DUsm-3-assault
10612: PPUSH
10613: CALL_OW 88
// end ;
10617: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseCaptured do
10618: LD_EXP 6
10622: NOT
10623: PUSH
10624: LD_EXP 7
10628: NOT
10629: AND
10630: PUSH
10631: LD_INT 5
10633: PPUSH
10634: LD_INT 22
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 21
10646: PUSH
10647: LD_INT 1
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PPUSH
10658: CALL_OW 70
10662: AND
10663: PUSH
10664: LD_EXP 7
10668: NOT
10669: AND
10670: IFFALSE 10755
10672: GO 10674
10674: DISABLE
// begin if Mike then
10675: LD_EXP 33
10679: IFFALSE 10695
// Say ( Mike , DM-1-scout ) else
10681: LD_EXP 33
10685: PPUSH
10686: LD_STRING DM-1-scout
10688: PPUSH
10689: CALL_OW 88
10693: GO 10726
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10695: LD_EXP 45
10699: PPUSH
10700: LD_INT 26
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PPUSH
10710: CALL_OW 72
10714: PUSH
10715: LD_INT 1
10717: ARRAY
10718: PPUSH
10719: LD_STRING DArm-1-explore
10721: PPUSH
10722: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10726: LD_INT 54
10728: PPUSH
10729: LD_INT 35
10731: PPUSH
10732: LD_INT 2
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10742: LD_INT 54
10744: PPUSH
10745: LD_INT 35
10747: PPUSH
10748: LD_INT 2
10750: PPUSH
10751: CALL_OW 331
// end ;
10755: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseSpoted and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10756: LD_INT 6
10758: PPUSH
10759: LD_INT 22
10761: PUSH
10762: LD_INT 2
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 21
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PPUSH
10783: CALL_OW 70
10787: PUSH
10788: LD_EXP 6
10792: NOT
10793: AND
10794: PUSH
10795: LD_EXP 7
10799: NOT
10800: AND
10801: IFFALSE 11055
10803: GO 10805
10805: DISABLE
10806: LD_INT 0
10808: PPUSH
10809: PPUSH
10810: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10811: LD_ADDR_VAR 0 1
10815: PUSH
10816: LD_EXP 45
10820: PPUSH
10821: LD_INT 26
10823: PUSH
10824: LD_INT 1
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PPUSH
10831: CALL_OW 72
10835: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10836: LD_ADDR_VAR 0 2
10840: PUSH
10841: LD_EXP 45
10845: PPUSH
10846: LD_INT 26
10848: PUSH
10849: LD_INT 2
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PPUSH
10856: CALL_OW 72
10860: ST_TO_ADDR
// DialogueOn ;
10861: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10865: LD_INT 36
10867: PPUSH
10868: LD_INT 22
10870: PPUSH
10871: LD_INT 2
10873: PPUSH
10874: LD_INT 8
10876: PPUSH
10877: CALL_OW 330
// dwait ( 0 0$1 ) ;
10881: LD_INT 35
10883: PPUSH
10884: CALL_OW 68
// speakerOk := false ;
10888: LD_ADDR_VAR 0 3
10892: PUSH
10893: LD_INT 0
10895: ST_TO_ADDR
// if Mike then
10896: LD_EXP 33
10900: IFFALSE 10922
// speakerOk := Say ( Mike , DM-1-spot ) else
10902: LD_ADDR_VAR 0 3
10906: PUSH
10907: LD_EXP 33
10911: PPUSH
10912: LD_STRING DM-1-spot
10914: PPUSH
10915: CALL_OW 88
10919: ST_TO_ADDR
10920: GO 10950
// if randomMen then
10922: LD_VAR 0 1
10926: IFFALSE 10950
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10928: LD_ADDR_VAR 0 3
10932: PUSH
10933: LD_VAR 0 1
10937: PUSH
10938: LD_INT 1
10940: ARRAY
10941: PPUSH
10942: LD_STRING DArm-1-spot-a
10944: PPUSH
10945: CALL_OW 88
10949: ST_TO_ADDR
// if speakerOk then
10950: LD_VAR 0 3
10954: IFFALSE 10998
// begin if Givi then
10956: LD_EXP 32
10960: IFFALSE 10976
// Say ( Givi , DG-1-spot ) else
10962: LD_EXP 32
10966: PPUSH
10967: LD_STRING DG-1-spot
10969: PPUSH
10970: CALL_OW 88
10974: GO 10998
// if randomWomen then
10976: LD_VAR 0 2
10980: IFFALSE 10998
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10982: LD_VAR 0 2
10986: PUSH
10987: LD_INT 1
10989: ARRAY
10990: PPUSH
10991: LD_STRING DArf-1-spot-a
10993: PPUSH
10994: CALL_OW 88
// end ; if Mike then
10998: LD_EXP 33
11002: IFFALSE 11018
// Say ( Heike , DH-1-spot ) else
11004: LD_EXP 31
11008: PPUSH
11009: LD_STRING DH-1-spot
11011: PPUSH
11012: CALL_OW 88
11016: GO 11030
// Say ( Heike , DH-1-spot-a ) ;
11018: LD_EXP 31
11022: PPUSH
11023: LD_STRING DH-1-spot-a
11025: PPUSH
11026: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
11030: LD_INT 36
11032: PPUSH
11033: LD_INT 22
11035: PPUSH
11036: LD_INT 2
11038: PPUSH
11039: CALL_OW 331
// DialogueOff ;
11043: CALL_OW 7
// americanBaseSpoted := true ;
11047: LD_ADDR_EXP 6
11051: PUSH
11052: LD_INT 1
11054: ST_TO_ADDR
// end ;
11055: PPOPN 3
11057: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11058: LD_EXP 6
11062: NOT
11063: PUSH
11064: LD_INT 22
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 101
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PPUSH
11088: CALL_OW 69
11092: AND
11093: PUSH
11094: LD_EXP 7
11098: NOT
11099: AND
11100: IFFALSE 11186
11102: GO 11104
11104: DISABLE
11105: LD_INT 0
11107: PPUSH
// begin americanBaseSpoted := true ;
11108: LD_ADDR_EXP 6
11112: PUSH
11113: LD_INT 1
11115: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11116: LD_ADDR_VAR 0 1
11120: PUSH
11121: LD_EXP 45
11125: PPUSH
11126: LD_INT 26
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 72
11140: ST_TO_ADDR
// if not randomMen then
11141: LD_VAR 0 1
11145: NOT
11146: IFFALSE 11150
// exit ;
11148: GO 11186
// DialogueOn ;
11150: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11154: LD_VAR 0 1
11158: PUSH
11159: LD_INT 1
11161: ARRAY
11162: PPUSH
11163: LD_STRING DArm-1-spot-a
11165: PPUSH
11166: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11170: LD_EXP 31
11174: PPUSH
11175: LD_STRING DH-1-spot-a
11177: PPUSH
11178: CALL_OW 88
// DialogueOff ;
11182: CALL_OW 7
// end ;
11186: PPOPN 1
11188: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11189: LD_INT 11
11191: PPUSH
11192: CALL_OW 255
11196: PUSH
11197: LD_INT 2
11199: EQUAL
11200: PUSH
11201: LD_INT 7
11203: PPUSH
11204: LD_INT 22
11206: PUSH
11207: LD_INT 1
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 3
11216: PUSH
11217: LD_INT 50
11219: PUSH
11220: EMPTY
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 30
11229: PUSH
11230: LD_INT 31
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: PPUSH
11242: CALL_OW 70
11246: OR
11247: PUSH
11248: LD_INT 7
11250: PPUSH
11251: LD_INT 22
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 70
11265: PUSH
11266: LD_INT 2
11268: GREATER
11269: OR
11270: PUSH
11271: LD_EXP 47
11275: PUSH
11276: LD_INT 4
11278: LESSEQUAL
11279: OR
11280: IFFALSE 11864
11282: GO 11284
11284: DISABLE
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
// begin wait ( 0 0$3 ) ;
11289: LD_INT 105
11291: PPUSH
11292: CALL_OW 67
// americanStartRun := true ;
11296: LD_ADDR_EXP 15
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// if IsOk ( usCommander ) then
11304: LD_EXP 48
11308: PPUSH
11309: CALL_OW 302
11313: IFFALSE 11343
// begin usForces := usForces union usCommander ;
11315: LD_ADDR_EXP 47
11319: PUSH
11320: LD_EXP 47
11324: PUSH
11325: LD_EXP 48
11329: UNION
11330: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11331: LD_EXP 48
11335: PPUSH
11336: LD_STRING DUsm-1-assault
11338: PPUSH
11339: CALL_OW 88
// end ; for i in usForces do
11343: LD_ADDR_VAR 0 1
11347: PUSH
11348: LD_EXP 47
11352: PUSH
11353: FOR_IN
11354: IFFALSE 11400
// begin if IsInUnit ( i ) then
11356: LD_VAR 0 1
11360: PPUSH
11361: CALL_OW 310
11365: IFFALSE 11376
// ComExitBuilding ( i ) ;
11367: LD_VAR 0 1
11371: PPUSH
11372: CALL_OW 122
// wait ( 3 ) ;
11376: LD_INT 3
11378: PPUSH
11379: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11383: LD_VAR 0 1
11387: PPUSH
11388: LD_INT 34
11390: PPUSH
11391: LD_INT 67
11393: PPUSH
11394: CALL_OW 111
// end ;
11398: GO 11353
11400: POP
11401: POP
// Say ( Heike , DH-1-assault ) ;
11402: LD_EXP 31
11406: PPUSH
11407: LD_STRING DH-1-assault
11409: PPUSH
11410: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11414: LD_INT 35
11416: PPUSH
11417: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11421: LD_VAR 0 1
11425: PPUSH
11426: LD_INT 34
11428: PPUSH
11429: LD_INT 67
11431: PPUSH
11432: CALL_OW 111
// until not usForces ;
11436: LD_EXP 47
11440: NOT
11441: IFFALSE 11414
// music_nat := 2 ;
11443: LD_ADDR_OWVAR 71
11447: PUSH
11448: LD_INT 2
11450: ST_TO_ADDR
// music_class := music_victory ;
11451: LD_ADDR_OWVAR 72
11455: PUSH
11456: LD_INT 4
11458: ST_TO_ADDR
// if not americanHasEscaped then
11459: LD_EXP 9
11463: NOT
11464: IFFALSE 11485
// begin Say ( Heike , DH-2-assault ) ;
11466: LD_EXP 31
11470: PPUSH
11471: LD_STRING DH-2-assault
11473: PPUSH
11474: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11478: LD_STRING ACH_CLEAN
11480: PPUSH
11481: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11485: LD_INT 70
11487: PPUSH
11488: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11492: LD_INT 35
11494: PPUSH
11495: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11499: LD_INT 22
11501: PUSH
11502: LD_INT 2
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 21
11511: PUSH
11512: LD_INT 1
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: LD_INT 50
11524: PUSH
11525: EMPTY
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 69
11541: NOT
11542: IFFALSE 11492
// InGameOn ;
11544: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11548: LD_INT 11
11550: PPUSH
11551: CALL_OW 255
11555: PUSH
11556: LD_INT 2
11558: EQUAL
11559: NOT
11560: IFFALSE 11572
// SetSide ( usDepot , 2 ) ;
11562: LD_INT 11
11564: PPUSH
11565: LD_INT 2
11567: PPUSH
11568: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11572: LD_INT 35
11574: PPUSH
11575: LD_INT 22
11577: PPUSH
11578: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11582: LD_EXP 31
11586: PPUSH
11587: LD_INT 35
11589: PPUSH
11590: LD_INT 22
11592: PPUSH
11593: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11597: LD_EXP 31
11601: PPUSH
11602: LD_INT 38
11604: PPUSH
11605: LD_INT 25
11607: PPUSH
11608: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11612: LD_EXP 35
11616: PUSH
11617: LD_EXP 44
11621: UNION
11622: PUSH
11623: LD_EXP 45
11627: UNION
11628: PPUSH
11629: LD_INT 39
11631: PPUSH
11632: LD_INT 26
11634: PPUSH
11635: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11639: LD_EXP 35
11643: PUSH
11644: LD_EXP 44
11648: UNION
11649: PUSH
11650: LD_EXP 45
11654: UNION
11655: PPUSH
11656: LD_EXP 31
11660: PPUSH
11661: CALL_OW 179
// p := 0 ;
11665: LD_ADDR_VAR 0 2
11669: PUSH
11670: LD_INT 0
11672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11673: LD_INT 35
11675: PPUSH
11676: CALL_OW 67
// p := p + 1 ;
11680: LD_ADDR_VAR 0 2
11684: PUSH
11685: LD_VAR 0 2
11689: PUSH
11690: LD_INT 1
11692: PLUS
11693: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11694: LD_EXP 31
11698: PPUSH
11699: CALL_OW 314
11703: NOT
11704: PUSH
11705: LD_VAR 0 2
11709: PUSH
11710: LD_INT 10
11712: GREATER
11713: OR
11714: IFFALSE 11673
// Say ( Heike , DH-1-capture ) ;
11716: LD_EXP 31
11720: PPUSH
11721: LD_STRING DH-1-capture
11723: PPUSH
11724: CALL_OW 88
// if Markov then
11728: LD_EXP 38
11732: IFFALSE 11746
// Say ( Markov , DMar-1-capture ) ;
11734: LD_EXP 38
11738: PPUSH
11739: LD_STRING DMar-1-capture
11741: PPUSH
11742: CALL_OW 88
// if Sophia then
11746: LD_EXP 37
11750: IFFALSE 11776
// begin Say ( Heike , DH-2-capture ) ;
11752: LD_EXP 31
11756: PPUSH
11757: LD_STRING DH-2-capture
11759: PPUSH
11760: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11764: LD_EXP 37
11768: PPUSH
11769: LD_STRING DS-1-capture
11771: PPUSH
11772: CALL_OW 88
// end ; americanBaseCaptured := true ;
11776: LD_ADDR_EXP 7
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// InGameOff ;
11784: CALL_OW 9
// music_nat := music_auto ;
11788: LD_ADDR_OWVAR 71
11792: PUSH
11793: LD_INT 0
11795: ST_TO_ADDR
// music_class := music_auto ;
11796: LD_ADDR_OWVAR 72
11800: PUSH
11801: LD_INT 0
11803: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11804: LD_STRING ConstructBase
11806: PPUSH
11807: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: LD_INT 22
11818: PUSH
11819: LD_INT 1
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 21
11828: PUSH
11829: LD_INT 3
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 69
11844: PUSH
11845: FOR_IN
11846: IFFALSE 11862
// SetSide ( i , 2 ) ;
11848: LD_VAR 0 1
11852: PPUSH
11853: LD_INT 2
11855: PPUSH
11856: CALL_OW 235
11860: GO 11845
11862: POP
11863: POP
// end ;
11864: PPOPN 2
11866: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11867: LD_EXP 14
11871: PUSH
11872: LD_INT 3
11874: GREATEREQUAL
11875: IFFALSE 11887
11877: GO 11879
11879: DISABLE
// SetAchievement ( ACH_ENG ) ;
11880: LD_STRING ACH_ENG
11882: PPUSH
11883: CALL_OW 543
11887: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11888: LD_INT 22
11890: PUSH
11891: LD_INT 2
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 25
11900: PUSH
11901: LD_INT 15
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PPUSH
11912: CALL_OW 69
11916: PUSH
11917: LD_INT 4
11919: GREATEREQUAL
11920: IFFALSE 11932
11922: GO 11924
11924: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11925: LD_STRING ACH_APEGEN
11927: PPUSH
11928: CALL_OW 543
11932: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11933: LD_INT 22
11935: PUSH
11936: LD_INT 2
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 30
11945: PUSH
11946: LD_INT 2
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 3
11955: PUSH
11956: LD_INT 57
11958: PUSH
11959: EMPTY
11960: LIST
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: PPUSH
11971: CALL_OW 69
11975: IFFALSE 12240
11977: GO 11979
11979: DISABLE
// begin workshopBuilded := true ;
11980: LD_ADDR_EXP 11
11984: PUSH
11985: LD_INT 1
11987: ST_TO_ADDR
// if IsOk ( Markov ) then
11988: LD_EXP 38
11992: PPUSH
11993: CALL_OW 302
11997: IFFALSE 12056
// begin Say ( Heike , DH-1-shop-a ) ;
11999: LD_EXP 31
12003: PPUSH
12004: LD_STRING DH-1-shop-a
12006: PPUSH
12007: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
12011: LD_INT 47
12013: PPUSH
12014: LD_INT 2
12016: PPUSH
12017: CALL_OW 321
12021: PUSH
12022: LD_INT 2
12024: EQUAL
12025: PUSH
12026: LD_INT 45
12028: PPUSH
12029: LD_INT 2
12031: PPUSH
12032: CALL_OW 321
12036: PUSH
12037: LD_INT 2
12039: EQUAL
12040: AND
12041: NOT
12042: IFFALSE 12056
// Say ( Markov , DMar-1-shop-a ) ;
12044: LD_EXP 38
12048: PPUSH
12049: LD_STRING DMar-1-shop-a
12051: PPUSH
12052: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12056: LD_INT 35
12058: PPUSH
12059: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12063: LD_INT 47
12065: PPUSH
12066: LD_INT 2
12068: PPUSH
12069: CALL_OW 321
12073: PUSH
12074: LD_INT 2
12076: EQUAL
12077: PUSH
12078: LD_INT 45
12080: PPUSH
12081: LD_INT 2
12083: PPUSH
12084: CALL_OW 321
12088: PUSH
12089: LD_INT 2
12091: EQUAL
12092: OR
12093: IFFALSE 12056
// if IsOk ( Markov ) and IsOk ( Heike ) then
12095: LD_EXP 38
12099: PPUSH
12100: CALL_OW 302
12104: PUSH
12105: LD_EXP 31
12109: PPUSH
12110: CALL_OW 302
12114: AND
12115: IFFALSE 12233
// begin DialogueOn ;
12117: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12121: LD_EXP 38
12125: PPUSH
12126: LD_STRING DMar-1-shop
12128: PPUSH
12129: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12133: LD_EXP 31
12137: PPUSH
12138: LD_STRING DH-1-shop
12140: PPUSH
12141: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12145: LD_EXP 38
12149: PPUSH
12150: LD_STRING DMar-2-shop
12152: PPUSH
12153: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12157: LD_EXP 38
12161: PPUSH
12162: LD_STRING DMar-3-shop
12164: PPUSH
12165: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12169: LD_EXP 31
12173: PPUSH
12174: LD_STRING DH-2-shop
12176: PPUSH
12177: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12181: LD_EXP 38
12185: PPUSH
12186: LD_STRING DMar-4-shop
12188: PPUSH
12189: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12193: LD_EXP 31
12197: PPUSH
12198: LD_STRING DH-3-shop
12200: PPUSH
12201: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12205: LD_EXP 38
12209: PPUSH
12210: LD_STRING DMar-5-shop
12212: PPUSH
12213: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12217: LD_EXP 31
12221: PPUSH
12222: LD_STRING DH-4-shop
12224: PPUSH
12225: CALL_OW 88
// DialogueOff ;
12229: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12233: LD_STRING ConstructVeh
12235: PPUSH
12236: CALL_OW 337
// end ;
12240: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12241: LD_INT 2
12243: PPUSH
12244: LD_INT 2
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL 40883 0 3
12254: PUSH
12255: LD_INT 0
12257: EQUAL
12258: IFFALSE 12270
12260: GO 12262
12262: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12263: LD_STRING Techs
12265: PPUSH
12266: CALL_OW 337
12270: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12271: LD_EXP 38
12275: PPUSH
12276: CALL_OW 302
12280: PUSH
12281: LD_INT 22
12283: PUSH
12284: LD_INT 2
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 2
12293: PUSH
12294: LD_INT 34
12296: PUSH
12297: LD_INT 22
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 35
12306: PUSH
12307: LD_INT 22
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: LIST
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 69
12327: AND
12328: IFFALSE 12435
12330: GO 12332
12332: DISABLE
// begin DialogueOn ;
12333: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12337: LD_INT 22
12339: PUSH
12340: LD_INT 2
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: LD_INT 2
12349: PUSH
12350: LD_INT 34
12352: PUSH
12353: LD_INT 22
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 35
12362: PUSH
12363: LD_INT 22
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: LIST
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PPUSH
12379: CALL_OW 69
12383: PPUSH
12384: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12388: LD_INT 10
12390: PPUSH
12391: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12395: LD_EXP 31
12399: PPUSH
12400: LD_STRING DH-1-bal
12402: PPUSH
12403: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12407: LD_EXP 38
12411: PPUSH
12412: LD_STRING DMar-1-bal
12414: PPUSH
12415: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12419: LD_EXP 31
12423: PPUSH
12424: LD_STRING DH-2-bal
12426: PPUSH
12427: CALL_OW 88
// DialogueOff ;
12431: CALL_OW 7
// end ;
12435: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12436: LD_EXP 35
12440: PPUSH
12441: CALL_OW 302
12445: PUSH
12446: LD_INT 22
12448: PUSH
12449: LD_INT 2
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 30
12458: PUSH
12459: LD_INT 6
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: AND
12475: IFFALSE 12536
12477: GO 12479
12479: DISABLE
// begin DialogueOn ;
12480: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12484: LD_EXP 35
12488: PPUSH
12489: LD_STRING DA-1-lab
12491: PPUSH
12492: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12496: LD_EXP 31
12500: PPUSH
12501: LD_STRING DH-1-lab
12503: PPUSH
12504: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12508: LD_EXP 35
12512: PPUSH
12513: LD_STRING DA-2-lab
12515: PPUSH
12516: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12520: LD_EXP 31
12524: PPUSH
12525: LD_STRING DH-2-lab
12527: PPUSH
12528: CALL_OW 88
// DialogueOff ;
12532: CALL_OW 7
// end ;
12536: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12537: LD_EXP 36
12541: PPUSH
12542: CALL_OW 302
12546: PUSH
12547: LD_INT 22
12549: PUSH
12550: LD_INT 2
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: LD_INT 25
12559: PUSH
12560: LD_INT 15
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PPUSH
12571: CALL_OW 69
12575: AND
12576: PUSH
12577: LD_INT 81
12579: PUSH
12580: LD_INT 2
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PPUSH
12587: CALL_OW 69
12591: NOT
12592: AND
12593: IFFALSE 12782
12595: GO 12597
12597: DISABLE
12598: LD_INT 0
12600: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12601: LD_ADDR_VAR 0 1
12605: PUSH
12606: LD_INT 22
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 25
12618: PUSH
12619: LD_INT 15
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PPUSH
12630: CALL_OW 69
12634: ST_TO_ADDR
// InGameOn ;
12635: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12639: LD_VAR 0 1
12643: PUSH
12644: LD_INT 1
12646: ARRAY
12647: PPUSH
12648: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12652: LD_VAR 0 1
12656: PUSH
12657: LD_INT 1
12659: ARRAY
12660: PPUSH
12661: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12665: LD_EXP 36
12669: PPUSH
12670: LD_STRING DK-1-apesol
12672: PPUSH
12673: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12677: LD_VAR 0 1
12681: PUSH
12682: LD_INT 1
12684: ARRAY
12685: PPUSH
12686: LD_INT 35
12688: PPUSH
12689: LD_INT 28
12691: PPUSH
12692: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12696: LD_VAR 0 1
12700: PUSH
12701: LD_INT 1
12703: ARRAY
12704: PPUSH
12705: LD_INT 36
12707: PPUSH
12708: LD_INT 17
12710: PPUSH
12711: CALL_OW 171
// wait ( 0 0$2 ) ;
12715: LD_INT 70
12717: PPUSH
12718: CALL_OW 67
// DialogueOn ;
12722: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12726: LD_EXP 35
12730: PPUSH
12731: LD_STRING DA-1-apesol
12733: PPUSH
12734: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12738: LD_EXP 36
12742: PPUSH
12743: LD_STRING DK-2-apesol
12745: PPUSH
12746: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12750: LD_EXP 35
12754: PPUSH
12755: LD_STRING DA-2-apesol
12757: PPUSH
12758: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12762: LD_EXP 36
12766: PPUSH
12767: LD_STRING DK-3-apesol
12769: PPUSH
12770: CALL_OW 88
// DialogueOff ;
12774: CALL_OW 7
// InGameOff ;
12778: CALL_OW 9
// end ;
12782: PPOPN 1
12784: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12785: LD_EXP 37
12789: PPUSH
12790: CALL_OW 302
12794: PUSH
12795: LD_INT 22
12797: PUSH
12798: LD_INT 2
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PUSH
12805: LD_INT 25
12807: PUSH
12808: LD_INT 16
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PPUSH
12819: CALL_OW 69
12823: AND
12824: PUSH
12825: LD_INT 81
12827: PUSH
12828: LD_INT 2
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 69
12839: NOT
12840: AND
12841: IFFALSE 13155
12843: GO 12845
12845: DISABLE
12846: LD_INT 0
12848: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12849: LD_ADDR_VAR 0 1
12853: PUSH
12854: LD_INT 22
12856: PUSH
12857: LD_INT 2
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PUSH
12864: LD_INT 25
12866: PUSH
12867: LD_INT 16
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PPUSH
12878: CALL_OW 69
12882: ST_TO_ADDR
// blockAttack := true ;
12883: LD_ADDR_EXP 29
12887: PUSH
12888: LD_INT 1
12890: ST_TO_ADDR
// InGameOn ;
12891: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12895: LD_INT 35
12897: PPUSH
12898: LD_INT 22
12900: PPUSH
12901: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12905: LD_INT 5
12907: PPUSH
12908: LD_INT 35
12910: PPUSH
12911: LD_INT 22
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12921: LD_EXP 37
12925: PPUSH
12926: LD_VAR 0 1
12930: PUSH
12931: LD_INT 1
12933: ARRAY
12934: PPUSH
12935: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12939: LD_VAR 0 1
12943: PUSH
12944: LD_INT 1
12946: ARRAY
12947: PPUSH
12948: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12952: LD_VAR 0 1
12956: PUSH
12957: LD_INT 1
12959: ARRAY
12960: PPUSH
12961: CALL_OW 122
// wait ( 0 0$2 ) ;
12965: LD_INT 70
12967: PPUSH
12968: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12972: LD_EXP 37
12976: PPUSH
12977: LD_STRING DS-1-apeeng
12979: PPUSH
12980: CALL_OW 88
// if IsOk ( Kamil ) then
12984: LD_EXP 34
12988: PPUSH
12989: CALL_OW 302
12993: IFFALSE 13143
// begin Say ( Kamil , DKam-1-apeeng ) ;
12995: LD_EXP 34
12999: PPUSH
13000: LD_STRING DKam-1-apeeng
13002: PPUSH
13003: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
13007: LD_EXP 37
13011: PPUSH
13012: LD_STRING DS-2-apeeng
13014: PPUSH
13015: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
13019: LD_EXP 34
13023: PPUSH
13024: LD_STRING DKam-2-apeeng
13026: PPUSH
13027: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
13031: LD_EXP 37
13035: PPUSH
13036: LD_STRING DS-3-apeeng
13038: PPUSH
13039: CALL_OW 88
// if not IsOK ( Kaia ) then
13043: LD_EXP 36
13047: PPUSH
13048: CALL_OW 302
13052: NOT
13053: IFFALSE 13069
// begin InGameOff ;
13055: CALL_OW 9
// blockAttack := false ;
13059: LD_ADDR_EXP 29
13063: PUSH
13064: LD_INT 0
13066: ST_TO_ADDR
// exit ;
13067: GO 13155
// end ; Say ( Kaia , DK-1-apeeng ) ;
13069: LD_EXP 36
13073: PPUSH
13074: LD_STRING DK-1-apeeng
13076: PPUSH
13077: CALL_OW 88
// if not IsOk ( Givi ) then
13081: LD_EXP 32
13085: PPUSH
13086: CALL_OW 302
13090: NOT
13091: IFFALSE 13107
// begin InGameOff ;
13093: CALL_OW 9
// blockAttack := false ;
13097: LD_ADDR_EXP 29
13101: PUSH
13102: LD_INT 0
13104: ST_TO_ADDR
// exit ;
13105: GO 13155
// end ; Say ( Givi , DG-1-apeeng ) ;
13107: LD_EXP 32
13111: PPUSH
13112: LD_STRING DG-1-apeeng
13114: PPUSH
13115: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13119: LD_EXP 36
13123: PPUSH
13124: LD_STRING DK-2-apeeng
13126: PPUSH
13127: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13131: LD_EXP 36
13135: PPUSH
13136: LD_STRING DK-3-apeeng
13138: PPUSH
13139: CALL_OW 88
// end ; InGameOff ;
13143: CALL_OW 9
// blockAttack := false ;
13147: LD_ADDR_EXP 29
13151: PUSH
13152: LD_INT 0
13154: ST_TO_ADDR
// end ;
13155: PPOPN 1
13157: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13158: LD_EXP 4
13162: PUSH
13163: LD_INT 22
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 30
13175: PUSH
13176: LD_INT 0
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: AND
13192: IFFALSE 13373
13194: GO 13196
13196: DISABLE
// begin blockAttack := true ;
13197: LD_ADDR_EXP 29
13201: PUSH
13202: LD_INT 1
13204: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13205: LD_INT 350
13207: PPUSH
13208: CALL_OW 67
// DialogueOn ;
13212: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13216: LD_EXP 39
13220: PPUSH
13221: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13225: LD_EXP 39
13229: PPUSH
13230: LD_STRING DF-1-distribution
13232: PPUSH
13233: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13237: LD_EXP 31
13241: PPUSH
13242: LD_STRING DH-2-distribution
13244: PPUSH
13245: CALL_OW 88
// if IsOk ( Kaia ) then
13249: LD_EXP 36
13253: PPUSH
13254: CALL_OW 302
13258: IFFALSE 13319
// begin Say ( Kaia , DK-1-distribution ) ;
13260: LD_EXP 36
13264: PPUSH
13265: LD_STRING DK-1-distribution
13267: PPUSH
13268: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13272: LD_EXP 31
13276: PPUSH
13277: LD_STRING DH-1-distribution
13279: PPUSH
13280: CALL_OW 88
// if IsOk ( Givi ) then
13284: LD_EXP 32
13288: PPUSH
13289: CALL_OW 302
13293: IFFALSE 13319
// begin Say ( Givi , DG-1-distribution ) ;
13295: LD_EXP 32
13299: PPUSH
13300: LD_STRING DG-1-distribution
13302: PPUSH
13303: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13307: LD_EXP 31
13311: PPUSH
13312: LD_STRING DH-3-distribution
13314: PPUSH
13315: CALL_OW 88
// end ; end ; DialogueOff ;
13319: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13323: LD_STRING Crates1
13325: PPUSH
13326: CALL_OW 337
// farmerRequestedCrates := 300 ;
13330: LD_ADDR_EXP 17
13334: PUSH
13335: LD_INT 300
13337: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13338: LD_STRING FarmerCrates
13340: PPUSH
13341: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13345: LD_INT 10
13347: PPUSH
13348: LD_INT 1
13350: PPUSH
13351: CALL_OW 424
// blockAttack := false ;
13355: LD_ADDR_EXP 29
13359: PUSH
13360: LD_INT 0
13362: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13363: LD_INT 108
13365: PPUSH
13366: LD_INT 61
13368: PPUSH
13369: CALL_OW 86
// end ;
13373: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13374: LD_EXP 7
13378: PUSH
13379: LD_INT 22
13381: PUSH
13382: LD_INT 2
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 3
13391: PUSH
13392: LD_INT 57
13394: PUSH
13395: EMPTY
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 2
13404: PUSH
13405: LD_INT 30
13407: PUSH
13408: LD_INT 6
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 30
13417: PUSH
13418: LD_INT 7
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: PPUSH
13435: CALL_OW 69
13439: AND
13440: PUSH
13441: LD_INT 22
13443: PUSH
13444: LD_INT 2
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 3
13453: PUSH
13454: LD_INT 57
13456: PUSH
13457: EMPTY
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 30
13466: PUSH
13467: LD_INT 4
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: PPUSH
13479: CALL_OW 69
13483: AND
13484: IFFALSE 13648
13486: GO 13488
13488: DISABLE
13489: LD_INT 0
13491: PPUSH
// begin wait ( 0 0$10 ) ;
13492: LD_INT 350
13494: PPUSH
13495: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13499: LD_ADDR_VAR 0 1
13503: PUSH
13504: LD_EXP 45
13508: PPUSH
13509: LD_INT 26
13511: PUSH
13512: LD_INT 1
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 25
13521: PUSH
13522: LD_INT 2
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PPUSH
13533: CALL_OW 72
13537: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13538: LD_EXP 31
13542: PPUSH
13543: LD_STRING DH-1-task
13545: PPUSH
13546: CALL_OW 88
// if IsOk ( Sophia ) then
13550: LD_EXP 37
13554: PPUSH
13555: CALL_OW 302
13559: IFFALSE 13599
// begin Say ( Sophia , DS-1-task ) ;
13561: LD_EXP 37
13565: PPUSH
13566: LD_STRING DS-1-task
13568: PPUSH
13569: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13573: LD_EXP 37
13577: PPUSH
13578: LD_STRING DS-2-task
13580: PPUSH
13581: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13585: LD_EXP 31
13589: PPUSH
13590: LD_STRING DH-2-task
13592: PPUSH
13593: CALL_OW 88
// end else
13597: GO 13633
// if eng then
13599: LD_VAR 0 1
13603: IFFALSE 13633
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13605: LD_VAR 0 1
13609: PUSH
13610: LD_INT 1
13612: ARRAY
13613: PPUSH
13614: LD_STRING DArm-1-task
13616: PPUSH
13617: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13621: LD_EXP 31
13625: PPUSH
13626: LD_STRING DH-2-task
13628: PPUSH
13629: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13633: LD_STRING BaseConstructed
13635: PPUSH
13636: CALL_OW 337
// allowConvoys := true ;
13640: LD_ADDR_EXP 13
13644: PUSH
13645: LD_INT 1
13647: ST_TO_ADDR
// end ;
13648: PPOPN 1
13650: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13651: LD_INT 22
13653: PUSH
13654: LD_INT 4
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 34
13663: PUSH
13664: LD_INT 12
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PPUSH
13675: CALL_OW 69
13679: IFFALSE 13847
13681: GO 13683
13683: DISABLE
13684: LD_INT 0
13686: PPUSH
13687: PPUSH
13688: PPUSH
// begin wait ( 0 0$2 ) ;
13689: LD_INT 70
13691: PPUSH
13692: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13696: LD_ADDR_VAR 0 1
13700: PUSH
13701: LD_INT 22
13703: PUSH
13704: LD_INT 4
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 34
13713: PUSH
13714: LD_INT 12
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PPUSH
13725: CALL_OW 69
13729: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13730: LD_ADDR_VAR 0 2
13734: PUSH
13735: LD_VAR 0 1
13739: PUSH
13740: LD_INT 1
13742: ARRAY
13743: PPUSH
13744: CALL_OW 250
13748: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13749: LD_ADDR_VAR 0 3
13753: PUSH
13754: LD_VAR 0 1
13758: PUSH
13759: LD_INT 1
13761: ARRAY
13762: PPUSH
13763: CALL_OW 251
13767: ST_TO_ADDR
// DialogueOn ;
13768: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13772: LD_VAR 0 2
13776: PPUSH
13777: LD_VAR 0 3
13781: PPUSH
13782: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13786: LD_VAR 0 2
13790: PPUSH
13791: LD_VAR 0 3
13795: PPUSH
13796: LD_INT 2
13798: PPUSH
13799: LD_INT 6
13801: NEG
13802: PPUSH
13803: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13807: LD_INT 10
13809: PPUSH
13810: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13814: LD_EXP 31
13818: PPUSH
13819: LD_STRING DH-1-seecargo
13821: PPUSH
13822: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13826: LD_VAR 0 2
13830: PPUSH
13831: LD_VAR 0 3
13835: PPUSH
13836: LD_INT 2
13838: PPUSH
13839: CALL_OW 331
// DialogueOff ;
13843: CALL_OW 7
// end ;
13847: PPOPN 3
13849: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13850: LD_EXP 4
13854: PUSH
13855: LD_EXP 16
13859: PUSH
13860: LD_INT 300
13862: GREATEREQUAL
13863: AND
13864: IFFALSE 13936
13866: GO 13868
13868: DISABLE
// begin DialogueOn ;
13869: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13873: LD_EXP 39
13877: PPUSH
13878: LD_STRING DF-1-delivery-2
13880: PPUSH
13881: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13885: LD_EXP 31
13889: PPUSH
13890: LD_STRING DH-1-delivery-2
13892: PPUSH
13893: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13897: LD_EXP 39
13901: PPUSH
13902: LD_STRING DF-2-delivery-2
13904: PPUSH
13905: CALL_OW 94
// DialogueOff ;
13909: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13913: LD_STRING Crates2
13915: PPUSH
13916: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13920: LD_ADDR_EXP 18
13924: PUSH
13925: LD_INT 63000
13927: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13928: LD_ADDR_EXP 17
13932: PUSH
13933: LD_INT 600
13935: ST_TO_ADDR
// end ;
13936: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13937: LD_EXP 4
13941: PUSH
13942: LD_EXP 16
13946: PUSH
13947: LD_INT 600
13949: GREATEREQUAL
13950: AND
13951: PUSH
13952: LD_OWVAR 67
13956: PUSH
13957: LD_INT 1
13959: GREATER
13960: AND
13961: IFFALSE 14161
13963: GO 13965
13965: DISABLE
// begin DialogueOn ;
13966: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13970: LD_EXP 39
13974: PPUSH
13975: LD_STRING DF-1-delivery-3
13977: PPUSH
13978: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13982: LD_EXP 31
13986: PPUSH
13987: LD_STRING DH-1-delivery-3
13989: PPUSH
13990: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13994: LD_EXP 39
13998: PPUSH
13999: LD_STRING DF-2-delivery-3
14001: PPUSH
14002: CALL_OW 94
// if IsOk ( Kaia ) then
14006: LD_EXP 36
14010: PPUSH
14011: CALL_OW 302
14015: IFFALSE 14065
// begin Say ( Kaia , DK-1-delivery-3 ) ;
14017: LD_EXP 36
14021: PPUSH
14022: LD_STRING DK-1-delivery-3
14024: PPUSH
14025: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
14029: LD_EXP 31
14033: PPUSH
14034: LD_STRING DH-2-delivery-3
14036: PPUSH
14037: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14041: LD_EXP 32
14045: PPUSH
14046: LD_STRING DG-1-delivery-3
14048: PPUSH
14049: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14053: LD_EXP 33
14057: PPUSH
14058: LD_STRING DM-1-delivery-3
14060: PPUSH
14061: CALL_OW 88
// end ; DialogueOff ;
14065: CALL_OW 7
// case Difficulty of 2 :
14069: LD_OWVAR 67
14073: PUSH
14074: LD_INT 2
14076: DOUBLE
14077: EQUAL
14078: IFTRUE 14082
14080: GO 14100
14082: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14083: LD_STRING Crates3
14085: PPUSH
14086: CALL_OW 337
// farmerRequestedCrates := 900 ;
14090: LD_ADDR_EXP 17
14094: PUSH
14095: LD_INT 900
14097: ST_TO_ADDR
// end ; 3 :
14098: GO 14153
14100: LD_INT 3
14102: DOUBLE
14103: EQUAL
14104: IFTRUE 14108
14106: GO 14126
14108: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14109: LD_STRING Crates4
14111: PPUSH
14112: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14116: LD_ADDR_EXP 17
14120: PUSH
14121: LD_INT 1200
14123: ST_TO_ADDR
// end ; 4 :
14124: GO 14153
14126: LD_INT 4
14128: DOUBLE
14129: EQUAL
14130: IFTRUE 14134
14132: GO 14152
14134: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14135: LD_STRING Crates5
14137: PPUSH
14138: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14142: LD_ADDR_EXP 17
14146: PUSH
14147: LD_INT 1400
14149: ST_TO_ADDR
// end ; end ;
14150: GO 14153
14152: POP
// farmerCratesCounter := 30 30$00 ;
14153: LD_ADDR_EXP 18
14157: PUSH
14158: LD_INT 63000
14160: ST_TO_ADDR
// end ;
14161: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14162: LD_EXP 4
14166: PUSH
14167: LD_EXP 16
14171: PUSH
14172: LD_INT 600
14174: PUSH
14175: LD_INT 900
14177: PUSH
14178: LD_INT 1200
14180: PUSH
14181: LD_INT 1400
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_OWVAR 67
14194: ARRAY
14195: GREATEREQUAL
14196: AND
14197: IFFALSE 14283
14199: GO 14201
14201: DISABLE
// begin retreatAllowed := true ;
14202: LD_ADDR_EXP 12
14206: PUSH
14207: LD_INT 1
14209: ST_TO_ADDR
// display_strings := [ ] ;
14210: LD_ADDR_OWVAR 47
14214: PUSH
14215: EMPTY
14216: ST_TO_ADDR
// DialogueOn ;
14217: CALL_OW 6
// InGameOn ;
14221: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14225: LD_EXP 40
14229: PPUSH
14230: LD_STRING DO-radio-end
14232: PPUSH
14233: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14237: LD_EXP 31
14241: PPUSH
14242: LD_STRING DH-1-radio-end
14244: PPUSH
14245: CALL_OW 88
// InGameOff ;
14249: CALL_OW 9
// DialogueOff ;
14253: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14257: LD_STRING Retreat
14259: PPUSH
14260: CALL_OW 337
// wait ( 0 0$2 ) ;
14264: LD_INT 70
14266: PPUSH
14267: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14271: LD_EXP 31
14275: PPUSH
14276: LD_STRING DH-2-radio-end
14278: PPUSH
14279: CALL_OW 88
// end ;
14283: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14284: LD_EXP 12
14288: IFFALSE 14419
14290: GO 14292
14292: DISABLE
14293: LD_INT 0
14295: PPUSH
14296: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14297: LD_INT 10
14299: PPUSH
14300: LD_INT 0
14302: PPUSH
14303: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14307: LD_ADDR_VAR 0 1
14311: PUSH
14312: LD_EXP 42
14316: PPUSH
14317: LD_INT 25
14319: PUSH
14320: LD_INT 2
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PPUSH
14327: CALL_OW 72
14331: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14332: LD_VAR 0 1
14336: PUSH
14337: LD_INT 102
14339: PPUSH
14340: LD_INT 69
14342: PPUSH
14343: CALL_OW 428
14347: PUSH
14348: LD_INT 0
14350: EQUAL
14351: AND
14352: IFFALSE 14419
// begin for i in tmp do
14354: LD_ADDR_VAR 0 2
14358: PUSH
14359: LD_VAR 0 1
14363: PUSH
14364: FOR_IN
14365: IFFALSE 14389
// if IsInUnit ( i ) then
14367: LD_VAR 0 2
14371: PPUSH
14372: CALL_OW 310
14376: IFFALSE 14387
// ComExitBuilding ( i ) ;
14378: LD_VAR 0 2
14382: PPUSH
14383: CALL_OW 122
14387: GO 14364
14389: POP
14390: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14391: LD_VAR 0 1
14395: PPUSH
14396: LD_INT 31
14398: PPUSH
14399: LD_INT 102
14401: PPUSH
14402: LD_INT 69
14404: PPUSH
14405: LD_INT 2
14407: PPUSH
14408: CALL_OW 205
// wait ( 0 0$3 ) ;
14412: LD_INT 105
14414: PPUSH
14415: CALL_OW 67
// end ; end ;
14419: PPOPN 2
14421: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14422: LD_EXP 12
14426: NOT
14427: PUSH
14428: LD_INT 5
14430: PPUSH
14431: CALL_OW 301
14435: AND
14436: IFFALSE 14468
14438: GO 14440
14440: DISABLE
// begin DialogueOn ;
14441: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14445: LD_EXP 39
14449: PPUSH
14450: LD_STRING DF-1-failure
14452: PPUSH
14453: CALL_OW 94
// DialogueOff ;
14457: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14461: LD_STRING FarmerDepot
14463: PPUSH
14464: CALL_OW 104
// end ;
14468: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14469: LD_EXP 12
14473: PUSH
14474: LD_EXP 31
14478: PPUSH
14479: LD_EXP 39
14483: PPUSH
14484: CALL_OW 296
14488: PUSH
14489: LD_INT 12
14491: LESS
14492: AND
14493: PUSH
14494: LD_INT 81
14496: PUSH
14497: LD_INT 2
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 21
14506: PUSH
14507: LD_INT 1
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PPUSH
14518: CALL_OW 69
14522: NOT
14523: AND
14524: IFFALSE 15208
14526: GO 14528
14528: DISABLE
14529: LD_INT 0
14531: PPUSH
14532: PPUSH
14533: PPUSH
// begin allowConvoys := false ;
14534: LD_ADDR_EXP 13
14538: PUSH
14539: LD_INT 0
14541: ST_TO_ADDR
// InGameOn ;
14542: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14546: LD_EXP 31
14550: PPUSH
14551: LD_EXP 39
14555: PPUSH
14556: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14560: LD_EXP 39
14564: PPUSH
14565: LD_EXP 31
14569: PPUSH
14570: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14574: LD_EXP 39
14578: PPUSH
14579: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14583: LD_EXP 31
14587: PPUSH
14588: LD_STRING DH-1-end
14590: PPUSH
14591: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14595: LD_EXP 39
14599: PPUSH
14600: LD_STRING DF-1-end
14602: PPUSH
14603: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14607: LD_EXP 39
14611: PPUSH
14612: LD_STRING DF-2-end
14614: PPUSH
14615: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14619: LD_EXP 31
14623: PPUSH
14624: LD_STRING DH-2-end
14626: PPUSH
14627: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14631: LD_EXP 39
14635: PPUSH
14636: LD_STRING DF-3-end
14638: PPUSH
14639: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14643: LD_EXP 31
14647: PPUSH
14648: LD_STRING DH-3-end
14650: PPUSH
14651: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14655: LD_EXP 32
14659: PPUSH
14660: LD_STRING DG-1-end
14662: PPUSH
14663: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14667: LD_EXP 31
14671: PPUSH
14672: LD_STRING DH-4-end
14674: PPUSH
14675: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14679: LD_EXP 39
14683: PPUSH
14684: LD_STRING DF-4-end
14686: PPUSH
14687: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14691: LD_EXP 31
14695: PPUSH
14696: LD_STRING DH-5-end
14698: PPUSH
14699: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14703: LD_EXP 39
14707: PPUSH
14708: LD_STRING DF-5-end
14710: PPUSH
14711: CALL_OW 88
// InGameOff ;
14715: CALL_OW 9
// allowCargoEvacuation := true ;
14719: LD_ADDR_EXP 8
14723: PUSH
14724: LD_INT 1
14726: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14727: LD_ADDR_VAR 0 2
14731: PUSH
14732: LD_INT 4
14734: PUSH
14735: LD_INT 3
14737: PUSH
14738: LD_INT 2
14740: PUSH
14741: LD_INT 1
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: PUSH
14750: LD_OWVAR 67
14754: ARRAY
14755: ST_TO_ADDR
// if farmerSquad < max then
14756: LD_EXP 42
14760: PUSH
14761: LD_VAR 0 2
14765: LESS
14766: IFFALSE 14778
// max := farmerSquad ;
14768: LD_ADDR_VAR 0 2
14772: PUSH
14773: LD_EXP 42
14777: ST_TO_ADDR
// for i := 1 to max do
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: DOUBLE
14784: LD_INT 1
14786: DEC
14787: ST_TO_ADDR
14788: LD_VAR 0 2
14792: PUSH
14793: FOR_TO
14794: IFFALSE 14832
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14796: LD_EXP 42
14800: PUSH
14801: LD_INT 1
14803: ARRAY
14804: PPUSH
14805: LD_INT 2
14807: PPUSH
14808: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14812: LD_ADDR_EXP 42
14816: PUSH
14817: LD_EXP 42
14821: PPUSH
14822: LD_INT 1
14824: PPUSH
14825: CALL_OW 3
14829: ST_TO_ADDR
// end ;
14830: GO 14793
14832: POP
14833: POP
// for i in Farmer ^ farmerSquad do
14834: LD_ADDR_VAR 0 1
14838: PUSH
14839: LD_EXP 39
14843: PUSH
14844: LD_EXP 42
14848: ADD
14849: PUSH
14850: FOR_IN
14851: IFFALSE 14890
// begin if IsInUnit ( i ) then
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 310
14862: IFFALSE 14873
// ComExitBuilding ( i ) ;
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14873: LD_VAR 0 1
14877: PPUSH
14878: LD_INT 102
14880: PPUSH
14881: LD_INT 7
14883: PPUSH
14884: CALL_OW 171
// end ;
14888: GO 14850
14890: POP
14891: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14892: LD_ADDR_VAR 0 1
14896: PUSH
14897: LD_INT 22
14899: PUSH
14900: LD_INT 5
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: LD_INT 21
14909: PUSH
14910: LD_INT 3
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PPUSH
14921: CALL_OW 69
14925: PUSH
14926: LD_INT 5
14928: DIFF
14929: PUSH
14930: FOR_IN
14931: IFFALSE 14947
// SetSide ( i , 2 ) ;
14933: LD_VAR 0 1
14937: PPUSH
14938: LD_INT 2
14940: PPUSH
14941: CALL_OW 235
14945: GO 14930
14947: POP
14948: POP
// wait ( 0 0$2 ) ;
14949: LD_INT 70
14951: PPUSH
14952: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14956: LD_EXP 31
14960: PPUSH
14961: LD_STRING DH-6-end
14963: PPUSH
14964: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14968: LD_INT 35
14970: PPUSH
14971: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14975: LD_ADDR_VAR 0 3
14979: PUSH
14980: LD_EXP 39
14984: PUSH
14985: LD_EXP 42
14989: ADD
14990: PPUSH
14991: LD_INT 95
14993: PUSH
14994: LD_INT 3
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PPUSH
15001: CALL_OW 72
15005: ST_TO_ADDR
// if tmp then
15006: LD_VAR 0 3
15010: IFFALSE 15054
// for i in tmp do
15012: LD_ADDR_VAR 0 1
15016: PUSH
15017: LD_VAR 0 3
15021: PUSH
15022: FOR_IN
15023: IFFALSE 15052
// begin farmerSquad := farmerSquad diff i ;
15025: LD_ADDR_EXP 42
15029: PUSH
15030: LD_EXP 42
15034: PUSH
15035: LD_VAR 0 1
15039: DIFF
15040: ST_TO_ADDR
// RemoveUnit ( i ) ;
15041: LD_VAR 0 1
15045: PPUSH
15046: CALL_OW 64
// end ;
15050: GO 15022
15052: POP
15053: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15054: LD_EXP 42
15058: PUSH
15059: EMPTY
15060: EQUAL
15061: PUSH
15062: LD_EXP 39
15066: PPUSH
15067: CALL_OW 305
15071: NOT
15072: AND
15073: IFFALSE 14968
// if farmerHumanLoseCounter = 0 then
15075: LD_EXP 21
15079: PUSH
15080: LD_INT 0
15082: EQUAL
15083: IFFALSE 15092
// SetAchievement ( ACH_BABY ) ;
15085: LD_STRING ACH_BABY
15087: PPUSH
15088: CALL_OW 543
// wait ( 1 1$00 ) ;
15092: LD_INT 2100
15094: PPUSH
15095: CALL_OW 67
// SendAttack ;
15099: CALL 6126 0 0
// Say ( Heike , DH-7-end ) ;
15103: LD_EXP 31
15107: PPUSH
15108: LD_STRING DH-7-end
15110: PPUSH
15111: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15115: LD_ADDR_VAR 0 1
15119: PUSH
15120: DOUBLE
15121: LD_INT 1
15123: DEC
15124: ST_TO_ADDR
15125: LD_INT 2
15127: PUSH
15128: LD_INT 3
15130: PUSH
15131: LD_INT 3
15133: PUSH
15134: LD_INT 4
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: PUSH
15143: LD_OWVAR 67
15147: ARRAY
15148: PUSH
15149: FOR_TO
15150: IFFALSE 15206
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15152: LD_INT 4200
15154: PUSH
15155: LD_INT 3500
15157: PUSH
15158: LD_INT 3150
15160: PUSH
15161: LD_INT 2800
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: PUSH
15170: LD_OWVAR 67
15174: ARRAY
15175: PPUSH
15176: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15180: LD_EXP 12
15184: PUSH
15185: LD_EXP 22
15189: PUSH
15190: LD_INT 1
15192: LESS
15193: AND
15194: IFFALSE 15200
// exit ;
15196: POP
15197: POP
15198: GO 15208
// SendAttack ;
15200: CALL 6126 0 0
// end ;
15204: GO 15149
15206: POP
15207: POP
// end ;
15208: PPOPN 3
15210: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15211: LD_EXP 8
15215: PUSH
15216: LD_EXP 22
15220: PUSH
15221: LD_INT 0
15223: GREATER
15224: AND
15225: IFFALSE 15235
15227: GO 15229
15229: DISABLE
// begin enable ;
15230: ENABLE
// CargoEvacuation ;
15231: CALL 3599 0 0
// end ;
15235: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15236: LD_EXP 18
15240: PUSH
15241: LD_INT 18900
15243: LESSEQUAL
15244: IFFALSE 15293
15246: GO 15248
15248: DISABLE
// begin DialogueOn ;
15249: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15253: LD_EXP 39
15257: PPUSH
15258: LD_STRING DF-1-distribution-a
15260: PPUSH
15261: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15265: LD_EXP 31
15269: PPUSH
15270: LD_STRING DH-1-distribution-a
15272: PPUSH
15273: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15277: LD_EXP 39
15281: PPUSH
15282: LD_STRING DF-2-distribution-a
15284: PPUSH
15285: CALL_OW 94
// DialogueOff ;
15289: CALL_OW 7
// end ;
15293: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15294: LD_EXP 18
15298: PUSH
15299: LD_INT 0
15301: LESSEQUAL
15302: IFFALSE 15334
15304: GO 15306
15306: DISABLE
// begin DialogueOn ;
15307: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15311: LD_EXP 39
15315: PPUSH
15316: LD_STRING DF-3-distribution-a
15318: PPUSH
15319: CALL_OW 94
// YouLost ( Distribution ) ;
15323: LD_STRING Distribution
15325: PPUSH
15326: CALL_OW 104
// DialogueOff ;
15330: CALL_OW 7
// end ;
15334: END
// every 0 0$1 trigger vehCounter >= 2 do
15335: LD_EXP 23
15339: PUSH
15340: LD_INT 2
15342: GREATEREQUAL
15343: IFFALSE 15355
15345: GO 15347
15347: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15348: LD_STRING VehConstructed
15350: PPUSH
15351: CALL_OW 337
15355: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15356: LD_INT 22
15358: PUSH
15359: LD_INT 2
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 34
15368: PUSH
15369: LD_INT 12
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PPUSH
15380: CALL_OW 69
15384: IFFALSE 15444
15386: GO 15388
15388: DISABLE
// begin DialogueOn ;
15389: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15393: LD_EXP 31
15397: PPUSH
15398: LD_STRING DH-1-truck
15400: PPUSH
15401: CALL_OW 88
// if IsOk ( Markov ) then
15405: LD_EXP 38
15409: PPUSH
15410: CALL_OW 302
15414: IFFALSE 15440
// begin Say ( Markov , DMar-1-truck ) ;
15416: LD_EXP 38
15420: PPUSH
15421: LD_STRING DMar-1-truck
15423: PPUSH
15424: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15428: LD_EXP 31
15432: PPUSH
15433: LD_STRING DH-2-truck
15435: PPUSH
15436: CALL_OW 88
// end ; DialogueOff ;
15440: CALL_OW 7
// end ;
15444: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15445: LD_INT 0
15447: PPUSH
15448: PPUSH
15449: PPUSH
// if IsOk ( Givi ) then
15450: LD_EXP 32
15454: PPUSH
15455: CALL_OW 302
15459: IFFALSE 15475
// begin Say ( Givi , DG-1-nocargo ) ;
15461: LD_EXP 32
15465: PPUSH
15466: LD_STRING DG-1-nocargo
15468: PPUSH
15469: CALL_OW 88
// exit ;
15473: GO 15571
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15475: LD_ADDR_VAR 0 2
15479: PUSH
15480: LD_EXP 45
15484: PPUSH
15485: LD_INT 26
15487: PUSH
15488: LD_INT 1
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PPUSH
15495: CALL_OW 72
15499: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15500: LD_ADDR_VAR 0 3
15504: PUSH
15505: LD_EXP 45
15509: PPUSH
15510: LD_INT 26
15512: PUSH
15513: LD_INT 2
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PPUSH
15520: CALL_OW 72
15524: ST_TO_ADDR
// if randomMen then
15525: LD_VAR 0 2
15529: IFFALSE 15549
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15531: LD_VAR 0 2
15535: PUSH
15536: LD_INT 1
15538: ARRAY
15539: PPUSH
15540: LD_STRING DArm-1-nocargo
15542: PPUSH
15543: CALL_OW 88
15547: GO 15571
// if randomWomen then
15549: LD_VAR 0 3
15553: IFFALSE 15571
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15555: LD_VAR 0 3
15559: PUSH
15560: LD_INT 1
15562: ARRAY
15563: PPUSH
15564: LD_STRING DArf-1-nocargo
15566: PPUSH
15567: CALL_OW 88
// end ;
15571: LD_VAR 0 1
15575: RET
// export function IncomingAttack ; begin
15576: LD_INT 0
15578: PPUSH
// if attackWave = 1 then
15579: LD_EXP 20
15583: PUSH
15584: LD_INT 1
15586: EQUAL
15587: IFFALSE 15658
// begin DialogueOn ;
15589: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15593: LD_EXP 40
15597: PPUSH
15598: LD_STRING DO-1-radio-1
15600: PPUSH
15601: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15605: LD_EXP 31
15609: PPUSH
15610: LD_STRING DH-1-radio-1-
15612: PPUSH
15613: CALL_OW 88
// if IsOk ( Markov ) then
15617: LD_EXP 38
15621: PPUSH
15622: CALL_OW 302
15626: IFFALSE 15652
// begin Say ( Markov , DMar-1-radio-1 ) ;
15628: LD_EXP 38
15632: PPUSH
15633: LD_STRING DMar-1-radio-1
15635: PPUSH
15636: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15640: LD_EXP 31
15644: PPUSH
15645: LD_STRING DH-2-radio-1
15647: PPUSH
15648: CALL_OW 88
// end ; DialogueOff ;
15652: CALL_OW 7
// end else
15656: GO 15682
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15658: LD_EXP 40
15662: PPUSH
15663: LD_STRING DO-1-radio-u
15665: PPUSH
15666: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15670: LD_EXP 31
15674: PPUSH
15675: LD_STRING DH-1-radio-u
15677: PPUSH
15678: CALL_OW 88
// end ; end ;
15682: LD_VAR 0 1
15686: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15687: LD_EXP 47
15691: PPUSH
15692: LD_INT 95
15694: PUSH
15695: LD_INT 8
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PPUSH
15702: CALL_OW 72
15706: IFFALSE 15809
15708: GO 15710
15710: DISABLE
15711: LD_INT 0
15713: PPUSH
// begin enable ;
15714: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15715: LD_ADDR_VAR 0 1
15719: PUSH
15720: LD_EXP 47
15724: PPUSH
15725: LD_INT 95
15727: PUSH
15728: LD_INT 8
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PPUSH
15735: CALL_OW 72
15739: PUSH
15740: FOR_IN
15741: IFFALSE 15770
// begin usForces := usForces diff i ;
15743: LD_ADDR_EXP 47
15747: PUSH
15748: LD_EXP 47
15752: PUSH
15753: LD_VAR 0 1
15757: DIFF
15758: ST_TO_ADDR
// RemoveUnit ( i ) ;
15759: LD_VAR 0 1
15763: PPUSH
15764: CALL_OW 64
// end ;
15768: GO 15740
15770: POP
15771: POP
// if not americanHasEscaped and attackWave = 1 then
15772: LD_EXP 9
15776: NOT
15777: PUSH
15778: LD_EXP 20
15782: PUSH
15783: LD_INT 1
15785: EQUAL
15786: AND
15787: IFFALSE 15809
// begin americanHasEscaped := true ;
15789: LD_ADDR_EXP 9
15793: PUSH
15794: LD_INT 1
15796: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15797: LD_EXP 31
15801: PPUSH
15802: LD_STRING DH-2-assault-a
15804: PPUSH
15805: CALL_OW 88
// end ; end ;
15809: PPOPN 1
15811: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15812: LD_INT 4
15814: PPUSH
15815: LD_INT 22
15817: PUSH
15818: LD_INT 1
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PPUSH
15825: CALL_OW 70
15829: PUSH
15830: LD_EXP 12
15834: NOT
15835: AND
15836: IFFALSE 15853
15838: GO 15840
15840: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15841: LD_EXP 39
15845: PPUSH
15846: LD_STRING DF-1-attack
15848: PPUSH
15849: CALL_OW 94
15853: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15854: LD_INT 5
15856: PPUSH
15857: CALL_OW 255
15861: PUSH
15862: LD_INT 2
15864: EQUAL
15865: IFFALSE 15881
15867: GO 15869
15869: DISABLE
// begin enable ;
15870: ENABLE
// SetSide ( arDepot , 5 ) ;
15871: LD_INT 5
15873: PPUSH
15874: LD_INT 5
15876: PPUSH
15877: CALL_OW 235
// end ;
15881: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15882: LD_INT 22
15884: PUSH
15885: LD_INT 1
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: LD_INT 21
15894: PUSH
15895: LD_INT 1
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PPUSH
15906: CALL_OW 69
15910: NOT
15911: PUSH
15912: LD_INT 22
15914: PUSH
15915: LD_INT 4
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PPUSH
15922: CALL_OW 69
15926: NOT
15927: AND
15928: PUSH
15929: LD_EXP 12
15933: NOT
15934: AND
15935: PUSH
15936: LD_EXP 16
15940: PUSH
15941: LD_INT 90
15943: GREATER
15944: AND
15945: PUSH
15946: LD_INT 7
15948: PPUSH
15949: LD_INT 22
15951: PUSH
15952: LD_INT 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 21
15961: PUSH
15962: LD_INT 1
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PPUSH
15973: CALL_OW 70
15977: AND
15978: PUSH
15979: LD_INT 22
15981: PUSH
15982: LD_INT 2
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 50
15991: PUSH
15992: EMPTY
15993: LIST
15994: PUSH
15995: LD_INT 30
15997: PUSH
15998: LD_INT 0
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: LIST
16009: PPUSH
16010: CALL_OW 69
16014: AND
16015: IFFALSE 16824
16017: GO 16019
16019: DISABLE
16020: LD_INT 0
16022: PPUSH
16023: PPUSH
16024: PPUSH
16025: PPUSH
16026: PPUSH
// begin depot := usDepot ;
16027: LD_ADDR_VAR 0 5
16031: PUSH
16032: LD_INT 11
16034: ST_TO_ADDR
// if not depot then
16035: LD_VAR 0 5
16039: NOT
16040: IFFALSE 16080
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16042: LD_ADDR_VAR 0 5
16046: PUSH
16047: LD_INT 22
16049: PUSH
16050: LD_INT 2
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 30
16059: PUSH
16060: LD_INT 0
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PPUSH
16071: CALL_OW 69
16075: PUSH
16076: LD_INT 1
16078: ARRAY
16079: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16080: LD_ADDR_VAR 0 1
16084: PUSH
16085: LD_EXP 45
16089: PPUSH
16090: LD_INT 26
16092: PUSH
16093: LD_INT 1
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 72
16104: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16105: LD_ADDR_VAR 0 2
16109: PUSH
16110: LD_EXP 45
16114: PPUSH
16115: LD_INT 26
16117: PUSH
16118: LD_INT 2
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PPUSH
16125: CALL_OW 72
16129: ST_TO_ADDR
// if IsOk ( Kaia ) then
16130: LD_EXP 36
16134: PPUSH
16135: CALL_OW 302
16139: IFFALSE 16160
// speaker := [ Kaia , DK ] else
16141: LD_ADDR_VAR 0 3
16145: PUSH
16146: LD_EXP 36
16150: PUSH
16151: LD_STRING DK
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: ST_TO_ADDR
16158: GO 16240
// if randomMen then
16160: LD_VAR 0 1
16164: IFFALSE 16199
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16166: LD_ADDR_VAR 0 3
16170: PUSH
16171: LD_VAR 0 1
16175: PUSH
16176: LD_INT 1
16178: PPUSH
16179: LD_VAR 0 1
16183: PPUSH
16184: CALL_OW 12
16188: ARRAY
16189: PUSH
16190: LD_STRING DArm
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: ST_TO_ADDR
16197: GO 16240
// if randomWomen then
16199: LD_VAR 0 2
16203: IFFALSE 16238
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16205: LD_ADDR_VAR 0 3
16209: PUSH
16210: LD_VAR 0 2
16214: PUSH
16215: LD_INT 1
16217: PPUSH
16218: LD_VAR 0 2
16222: PPUSH
16223: CALL_OW 12
16227: ARRAY
16228: PUSH
16229: LD_STRING DArf
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: ST_TO_ADDR
16236: GO 16240
// exit ;
16238: GO 16824
// if IsInUnit ( speaker [ 1 ] ) then
16240: LD_VAR 0 3
16244: PUSH
16245: LD_INT 1
16247: ARRAY
16248: PPUSH
16249: CALL_OW 310
16253: IFFALSE 16276
// place := IsInUnit ( speaker [ 1 ] ) else
16255: LD_ADDR_VAR 0 4
16259: PUSH
16260: LD_VAR 0 3
16264: PUSH
16265: LD_INT 1
16267: ARRAY
16268: PPUSH
16269: CALL_OW 310
16273: ST_TO_ADDR
16274: GO 16290
// place := speaker [ 1 ] ;
16276: LD_ADDR_VAR 0 4
16280: PUSH
16281: LD_VAR 0 3
16285: PUSH
16286: LD_INT 1
16288: ARRAY
16289: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16290: LD_VAR 0 4
16294: PPUSH
16295: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16299: LD_VAR 0 4
16303: PPUSH
16304: CALL_OW 250
16308: PPUSH
16309: LD_VAR 0 4
16313: PPUSH
16314: CALL_OW 251
16318: PPUSH
16319: CALL 2086 0 2
// wait ( 0 0$2 ) ;
16323: LD_INT 70
16325: PPUSH
16326: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16330: LD_EXP 41
16334: PPUSH
16335: CALL_OW 305
16339: NOT
16340: IFFALSE 16344
// exit ;
16342: GO 16824
// allowConvoys := false ;
16344: LD_ADDR_EXP 13
16348: PUSH
16349: LD_INT 0
16351: ST_TO_ADDR
// blockAttack := true ;
16352: LD_ADDR_EXP 29
16356: PUSH
16357: LD_INT 1
16359: ST_TO_ADDR
// InGameOn ;
16360: CALL_OW 8
// wait ( 0 0$1 ) ;
16364: LD_INT 35
16366: PPUSH
16367: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16371: LD_EXP 41
16375: PPUSH
16376: LD_STRING DI-1-land
16378: PPUSH
16379: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16383: LD_VAR 0 3
16387: PUSH
16388: LD_INT 1
16390: ARRAY
16391: PPUSH
16392: CALL_OW 310
16396: IFFALSE 16411
// ComExit ( speaker [ 1 ] ) ;
16398: LD_VAR 0 3
16402: PUSH
16403: LD_INT 1
16405: ARRAY
16406: PPUSH
16407: CALL 78909 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16411: LD_VAR 0 3
16415: PUSH
16416: LD_INT 1
16418: ARRAY
16419: PPUSH
16420: LD_EXP 41
16424: PPUSH
16425: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16429: LD_VAR 0 3
16433: PUSH
16434: LD_INT 1
16436: ARRAY
16437: PPUSH
16438: LD_EXP 41
16442: PPUSH
16443: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16447: LD_EXP 41
16451: PPUSH
16452: LD_VAR 0 3
16456: PUSH
16457: LD_INT 1
16459: ARRAY
16460: PPUSH
16461: CALL_OW 119
// wait ( 0 0$1 ) ;
16465: LD_INT 35
16467: PPUSH
16468: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16472: LD_VAR 0 3
16476: PUSH
16477: LD_INT 1
16479: ARRAY
16480: PPUSH
16481: LD_VAR 0 3
16485: PUSH
16486: LD_INT 2
16488: ARRAY
16489: PUSH
16490: LD_STRING -1-land
16492: STR
16493: PPUSH
16494: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16498: LD_EXP 41
16502: PPUSH
16503: LD_STRING DI-2-land
16505: PPUSH
16506: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16510: LD_VAR 0 3
16514: PUSH
16515: LD_INT 1
16517: ARRAY
16518: PPUSH
16519: LD_VAR 0 3
16523: PUSH
16524: LD_INT 2
16526: ARRAY
16527: PUSH
16528: LD_STRING -2-land
16530: STR
16531: PPUSH
16532: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16536: LD_VAR 0 3
16540: PUSH
16541: LD_INT 1
16543: ARRAY
16544: PPUSH
16545: LD_VAR 0 3
16549: PUSH
16550: LD_INT 2
16552: ARRAY
16553: PUSH
16554: LD_STRING -3-land
16556: STR
16557: PPUSH
16558: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16562: LD_EXP 31
16566: PPUSH
16567: LD_STRING DH-1-land
16569: PPUSH
16570: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16574: LD_VAR 0 5
16578: PPUSH
16579: CALL_OW 313
16583: PUSH
16584: LD_INT 6
16586: EQUAL
16587: IFFALSE 16607
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16589: LD_VAR 0 5
16593: PPUSH
16594: CALL_OW 313
16598: PUSH
16599: LD_INT 1
16601: ARRAY
16602: PPUSH
16603: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16607: LD_EXP 41
16611: PPUSH
16612: LD_INT 2
16614: PPUSH
16615: CALL_OW 235
// CenterOnUnits ( depot ) ;
16619: LD_VAR 0 5
16623: PPUSH
16624: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16628: LD_EXP 41
16632: PPUSH
16633: LD_VAR 0 5
16637: PPUSH
16638: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16642: LD_VAR 0 3
16646: PUSH
16647: LD_INT 1
16649: ARRAY
16650: PPUSH
16651: LD_VAR 0 5
16655: PPUSH
16656: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16660: LD_INT 35
16662: PPUSH
16663: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16667: LD_EXP 41
16671: PPUSH
16672: CALL_OW 310
16676: PUSH
16677: LD_EXP 41
16681: PPUSH
16682: CALL_OW 302
16686: NOT
16687: OR
16688: PUSH
16689: LD_VAR 0 5
16693: PPUSH
16694: CALL_OW 302
16698: NOT
16699: OR
16700: IFFALSE 16660
// InGameOff ;
16702: CALL_OW 9
// blockAttack := false ;
16706: LD_ADDR_EXP 29
16710: PUSH
16711: LD_INT 0
16713: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16714: LD_EXP 41
16718: PPUSH
16719: CALL_OW 302
16723: NOT
16724: IFFALSE 16728
// exit ;
16726: GO 16824
// if not IsOk ( depot ) then
16728: LD_VAR 0 5
16732: PPUSH
16733: CALL_OW 302
16737: NOT
16738: IFFALSE 16801
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16740: LD_EXP 41
16744: PPUSH
16745: LD_INT 30
16747: PPUSH
16748: LD_INT 1
16750: PPUSH
16751: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16755: LD_INT 35
16757: PPUSH
16758: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16762: LD_EXP 41
16766: PPUSH
16767: LD_INT 30
16769: PPUSH
16770: LD_INT 1
16772: PPUSH
16773: CALL_OW 307
16777: PUSH
16778: LD_EXP 41
16782: PPUSH
16783: CALL_OW 301
16787: OR
16788: IFFALSE 16755
// RemoveUnit ( Ibrahim ) ;
16790: LD_EXP 41
16794: PPUSH
16795: CALL_OW 64
// exit ;
16799: GO 16824
// end ; ibrahimInDepot := true ;
16801: LD_ADDR_EXP 26
16805: PUSH
16806: LD_INT 1
16808: ST_TO_ADDR
// allowConvoys := true ;
16809: LD_ADDR_EXP 13
16813: PUSH
16814: LD_INT 1
16816: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16817: LD_STRING IbrahimInDepot
16819: PPUSH
16820: CALL_OW 97
// end ;
16824: PPOPN 5
16826: END
// export function IbrahimQuery ; begin
16827: LD_INT 0
16829: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16830: LD_STRING IbrahimQuery
16832: PPUSH
16833: CALL_OW 97
16837: PUSH
16838: LD_INT 1
16840: DOUBLE
16841: EQUAL
16842: IFTRUE 16846
16844: GO 17216
16846: POP
// begin allowConvoys := false ;
16847: LD_ADDR_EXP 13
16851: PUSH
16852: LD_INT 0
16854: ST_TO_ADDR
// ibrahimInDepot := false ;
16855: LD_ADDR_EXP 26
16859: PUSH
16860: LD_INT 0
16862: ST_TO_ADDR
// InGameOn ;
16863: CALL_OW 8
// DialogueOn ;
16867: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
16871: LD_EXP 31
16875: PPUSH
16876: CALL_OW 87
// wait ( 0 0$1 ) ;
16880: LD_INT 35
16882: PPUSH
16883: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16887: LD_EXP 31
16891: PPUSH
16892: LD_STRING DH-1-interrogation
16894: PPUSH
16895: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16899: LD_EXP 41
16903: PPUSH
16904: LD_STRING DI-1-interrogation
16906: PPUSH
16907: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16911: LD_EXP 31
16915: PPUSH
16916: LD_STRING DH-2-interrogation
16918: PPUSH
16919: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16923: LD_EXP 41
16927: PPUSH
16928: LD_STRING DI-2-interrogation
16930: PPUSH
16931: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16935: LD_EXP 31
16939: PPUSH
16940: LD_STRING DH-3-interrogation
16942: PPUSH
16943: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16947: LD_EXP 41
16951: PPUSH
16952: LD_STRING DI-3-interrogation
16954: PPUSH
16955: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16959: LD_EXP 31
16963: PPUSH
16964: LD_STRING DH-4-interrogation
16966: PPUSH
16967: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16971: LD_EXP 41
16975: PPUSH
16976: LD_STRING DI-4-interrogation
16978: PPUSH
16979: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16983: LD_EXP 31
16987: PPUSH
16988: LD_STRING DH-5-interrogation
16990: PPUSH
16991: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16995: LD_EXP 41
16999: PPUSH
17000: LD_STRING DI-5-interrogation
17002: PPUSH
17003: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17007: LD_INT 10
17009: PPUSH
17010: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
17014: LD_EXP 31
17018: PPUSH
17019: LD_STRING DH-6-interrogation
17021: PPUSH
17022: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
17026: LD_EXP 41
17030: PPUSH
17031: LD_STRING DI-6-interrogation
17033: PPUSH
17034: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
17038: LD_EXP 41
17042: PPUSH
17043: LD_STRING DI-7-interrogation
17045: PPUSH
17046: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17050: LD_EXP 31
17054: PPUSH
17055: LD_STRING DH-7-interrogation
17057: PPUSH
17058: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17062: LD_INT 10
17064: PPUSH
17065: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17069: LD_EXP 31
17073: PPUSH
17074: LD_STRING DH-8-interrogation
17076: PPUSH
17077: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17081: LD_EXP 41
17085: PPUSH
17086: LD_STRING DI-8-interrogation
17088: PPUSH
17089: CALL_OW 88
// wait ( 0 0$1 ) ;
17093: LD_INT 35
17095: PPUSH
17096: CALL_OW 67
// DialogueOff ;
17100: CALL_OW 7
// case Query ( IbrahimDecisionQuery ) of 1 :
17104: LD_STRING IbrahimDecisionQuery
17106: PPUSH
17107: CALL_OW 97
17111: PUSH
17112: LD_INT 1
17114: DOUBLE
17115: EQUAL
17116: IFTRUE 17120
17118: GO 17144
17120: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17121: LD_EXP 41
17125: PPUSH
17126: LD_STRING DI-1-kill
17128: PPUSH
17129: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17133: LD_EXP 41
17137: PPUSH
17138: CALL_OW 66
// end ; 2 :
17142: GO 17210
17144: LD_INT 2
17146: DOUBLE
17147: EQUAL
17148: IFTRUE 17152
17150: GO 17209
17152: POP
// begin SetSide ( Ibrahim , 6 ) ;
17153: LD_EXP 41
17157: PPUSH
17158: LD_INT 6
17160: PPUSH
17161: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17165: LD_EXP 41
17169: PPUSH
17170: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17174: LD_EXP 41
17178: PPUSH
17179: LD_INT 66
17181: PPUSH
17182: LD_INT 2
17184: PPUSH
17185: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17189: LD_EXP 41
17193: PPUSH
17194: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17198: LD_EXP 31
17202: PPUSH
17203: CALL_OW 122
// end ; end ;
17207: GO 17210
17209: POP
// InGameOff ;
17210: CALL_OW 9
// end ; 2 :
17214: GO 17230
17216: LD_INT 2
17218: DOUBLE
17219: EQUAL
17220: IFTRUE 17224
17222: GO 17229
17224: POP
// exit ; end ;
17225: GO 17314
17227: GO 17230
17229: POP
// allowConvoys := true ;
17230: LD_ADDR_EXP 13
17234: PUSH
17235: LD_INT 1
17237: ST_TO_ADDR
// blockAttack := false ;
17238: LD_ADDR_EXP 29
17242: PUSH
17243: LD_INT 0
17245: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17246: LD_INT 5250
17248: PPUSH
17249: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17253: LD_INT 35
17255: PPUSH
17256: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17260: LD_INT 81
17262: PUSH
17263: LD_INT 2
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 21
17272: PUSH
17273: LD_INT 1
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PPUSH
17284: CALL_OW 69
17288: NOT
17289: IFFALSE 17253
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17291: LD_EXP 41
17295: PPUSH
17296: LD_INT 34
17298: PPUSH
17299: LD_INT 21
17301: PPUSH
17302: CALL_OW 111
// ibrahimIsFree := true ;
17306: LD_ADDR_EXP 27
17310: PUSH
17311: LD_INT 1
17313: ST_TO_ADDR
// end ;
17314: LD_VAR 0 1
17318: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17319: LD_EXP 27
17323: PUSH
17324: LD_EXP 41
17328: PPUSH
17329: CALL_OW 302
17333: AND
17334: PUSH
17335: LD_INT 2
17337: PPUSH
17338: LD_EXP 41
17342: PPUSH
17343: CALL_OW 292
17347: AND
17348: IFFALSE 18160
17350: GO 17352
17352: DISABLE
17353: LD_INT 0
17355: PPUSH
17356: PPUSH
17357: PPUSH
17358: PPUSH
17359: PPUSH
17360: PPUSH
// begin wait ( 0 0$10 ) ;
17361: LD_INT 350
17363: PPUSH
17364: CALL_OW 67
// allowConvoys := false ;
17368: LD_ADDR_EXP 13
17372: PUSH
17373: LD_INT 0
17375: ST_TO_ADDR
// blockAttack := true ;
17376: LD_ADDR_EXP 29
17380: PUSH
17381: LD_INT 1
17383: ST_TO_ADDR
// depot := usDepot ;
17384: LD_ADDR_VAR 0 4
17388: PUSH
17389: LD_INT 11
17391: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17392: LD_INT 11
17394: NOT
17395: PUSH
17396: LD_INT 22
17398: PUSH
17399: LD_INT 2
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 50
17408: PUSH
17409: EMPTY
17410: LIST
17411: PUSH
17412: LD_INT 30
17414: PUSH
17415: LD_INT 0
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: LIST
17426: PPUSH
17427: CALL_OW 69
17431: AND
17432: IFFALSE 17479
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17434: LD_ADDR_VAR 0 4
17438: PUSH
17439: LD_INT 22
17441: PUSH
17442: LD_INT 2
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 50
17451: PUSH
17452: EMPTY
17453: LIST
17454: PUSH
17455: LD_INT 30
17457: PUSH
17458: LD_INT 0
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: PPUSH
17470: CALL_OW 69
17474: PUSH
17475: LD_INT 1
17477: ARRAY
17478: ST_TO_ADDR
// InGameOn ;
17479: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17483: LD_EXP 41
17487: PPUSH
17488: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17492: LD_EXP 31
17496: PPUSH
17497: LD_EXP 41
17501: PPUSH
17502: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17506: LD_EXP 41
17510: PPUSH
17511: LD_EXP 31
17515: PPUSH
17516: CALL_OW 119
// DialogueOn ;
17520: CALL_OW 6
// Say ( Ibrahim , DI-1-free ) ;
17524: LD_EXP 41
17528: PPUSH
17529: LD_STRING DI-1-free
17531: PPUSH
17532: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17536: LD_EXP 31
17540: PPUSH
17541: LD_STRING DH-1-free
17543: PPUSH
17544: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17548: LD_EXP 41
17552: PPUSH
17553: LD_STRING DI-2-free
17555: PPUSH
17556: CALL_OW 88
// changeClass := 0 ;
17560: LD_ADDR_VAR 0 1
17564: PUSH
17565: LD_INT 0
17567: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17568: LD_STRING IbrahimJoinQuery
17570: PPUSH
17571: CALL_OW 97
17575: PUSH
17576: LD_INT 1
17578: DOUBLE
17579: EQUAL
17580: IFTRUE 17584
17582: GO 17595
17584: POP
// begin changeClass := 1 ;
17585: LD_ADDR_VAR 0 1
17589: PUSH
17590: LD_INT 1
17592: ST_TO_ADDR
// end ; 2 :
17593: GO 17847
17595: LD_INT 2
17597: DOUBLE
17598: EQUAL
17599: IFTRUE 17603
17601: GO 17767
17603: POP
// begin Say ( Heike , DH-1-decline ) ;
17604: LD_EXP 31
17608: PPUSH
17609: LD_STRING DH-1-decline
17611: PPUSH
17612: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17616: LD_EXP 41
17620: PPUSH
17621: LD_STRING DI-1-decline
17623: PPUSH
17624: CALL_OW 88
// DialogueOff ;
17628: CALL_OW 7
// InGameOff ;
17632: CALL_OW 9
// blockAttack := false ;
17636: LD_ADDR_EXP 29
17640: PUSH
17641: LD_INT 0
17643: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17644: LD_EXP 41
17648: PPUSH
17649: LD_INT 30
17651: PPUSH
17652: LD_INT 1
17654: PPUSH
17655: CALL_OW 111
// p := 0 ;
17659: LD_ADDR_VAR 0 3
17663: PUSH
17664: LD_INT 0
17666: ST_TO_ADDR
// repeat p := p + 1 ;
17667: LD_ADDR_VAR 0 3
17671: PUSH
17672: LD_VAR 0 3
17676: PUSH
17677: LD_INT 1
17679: PLUS
17680: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17681: LD_INT 35
17683: PPUSH
17684: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17688: LD_EXP 41
17692: PPUSH
17693: LD_INT 30
17695: PPUSH
17696: LD_INT 1
17698: PPUSH
17699: CALL_OW 307
17703: PUSH
17704: LD_INT 22
17706: PUSH
17707: LD_INT 2
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 101
17716: PUSH
17717: LD_INT 6
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PPUSH
17728: CALL_OW 69
17732: NOT
17733: OR
17734: PUSH
17735: LD_VAR 0 3
17739: PUSH
17740: LD_INT 10
17742: GREATER
17743: OR
17744: IFFALSE 17667
// RemoveUnit ( Ibrahim ) ;
17746: LD_EXP 41
17750: PPUSH
17751: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17755: LD_INT 1
17757: PPUSH
17758: LD_STRING 03_IbrahimHasEscaped
17760: PPUSH
17761: CALL_OW 39
// end ; 3 :
17765: GO 17847
17767: LD_INT 3
17769: DOUBLE
17770: EQUAL
17771: IFTRUE 17775
17773: GO 17846
17775: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17776: LD_EXP 31
17780: PPUSH
17781: LD_STRING DH-1-radio-hq
17783: PPUSH
17784: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17788: LD_EXP 40
17792: PPUSH
17793: LD_STRING DO-1-radio-hq
17795: PPUSH
17796: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17800: LD_EXP 31
17804: PPUSH
17805: LD_STRING DH-2-radio-hq
17807: PPUSH
17808: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17812: LD_EXP 40
17816: PPUSH
17817: LD_STRING DO-2-radio-hq
17819: PPUSH
17820: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17824: LD_EXP 31
17828: PPUSH
17829: LD_STRING DH-3-radio-hq
17831: PPUSH
17832: CALL_OW 88
// changeClass := 1 ;
17836: LD_ADDR_VAR 0 1
17840: PUSH
17841: LD_INT 1
17843: ST_TO_ADDR
// end ; end ;
17844: GO 17847
17846: POP
// if changeClass then
17847: LD_VAR 0 1
17851: IFFALSE 18160
// begin Say ( Heike , DH-1-agree ) ;
17853: LD_EXP 31
17857: PPUSH
17858: LD_STRING DH-1-agree
17860: PPUSH
17861: CALL_OW 88
// if IsOk ( Givi ) then
17865: LD_EXP 32
17869: PPUSH
17870: CALL_OW 302
17874: IFFALSE 17912
// begin Say ( Givi , DG-1-agree ) ;
17876: LD_EXP 32
17880: PPUSH
17881: LD_STRING DG-1-agree
17883: PPUSH
17884: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17888: LD_EXP 31
17892: PPUSH
17893: LD_STRING DH-2-agree
17895: PPUSH
17896: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17900: LD_EXP 32
17904: PPUSH
17905: LD_STRING DG-2-agree
17907: PPUSH
17908: CALL_OW 88
// end ; CenterNowOnUnits ( Ibrahim ) ;
17912: LD_EXP 41
17916: PPUSH
17917: CALL_OW 87
// DialogueOff ;
17921: CALL_OW 7
// if UnitsInside ( depot ) = 6 then
17925: LD_VAR 0 4
17929: PPUSH
17930: CALL_OW 313
17934: PUSH
17935: LD_INT 6
17937: EQUAL
17938: IFFALSE 17958
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17940: LD_VAR 0 4
17944: PPUSH
17945: CALL_OW 313
17949: PUSH
17950: LD_INT 1
17952: ARRAY
17953: PPUSH
17954: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17958: LD_EXP 41
17962: PPUSH
17963: LD_INT 2
17965: PPUSH
17966: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17970: LD_ADDR_VAR 0 5
17974: PUSH
17975: LD_EXP 41
17979: PPUSH
17980: CALL_OW 250
17984: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17985: LD_ADDR_VAR 0 6
17989: PUSH
17990: LD_EXP 41
17994: PPUSH
17995: CALL_OW 251
17999: ST_TO_ADDR
// if depot then
18000: LD_VAR 0 4
18004: IFFALSE 18053
// begin ComEnterUnit ( Ibrahim , depot ) ;
18006: LD_EXP 41
18010: PPUSH
18011: LD_VAR 0 4
18015: PPUSH
18016: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18020: LD_INT 35
18022: PPUSH
18023: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18027: LD_EXP 41
18031: PPUSH
18032: CALL_OW 310
18036: IFFALSE 18020
// b := IsInUnit ( Ibrahim ) ;
18038: LD_ADDR_VAR 0 2
18042: PUSH
18043: LD_EXP 41
18047: PPUSH
18048: CALL_OW 310
18052: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
18053: LD_EXP 41
18057: PPUSH
18058: CALL_OW 64
// uc_side := 2 ;
18062: LD_ADDR_OWVAR 20
18066: PUSH
18067: LD_INT 2
18069: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18070: LD_ADDR_EXP 41
18074: PUSH
18075: LD_STRING Ibrahim
18077: PPUSH
18078: LD_INT 0
18080: PPUSH
18081: LD_STRING 
18083: PPUSH
18084: CALL 40820 0 3
18088: ST_TO_ADDR
// if depot then
18089: LD_VAR 0 4
18093: IFFALSE 18111
// PlaceHumanInUnit ( Ibrahim , b ) else
18095: LD_EXP 41
18099: PPUSH
18100: LD_VAR 0 2
18104: PPUSH
18105: CALL_OW 52
18109: GO 18133
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18111: LD_EXP 41
18115: PPUSH
18116: LD_VAR 0 5
18120: PPUSH
18121: LD_VAR 0 6
18125: PPUSH
18126: LD_INT 0
18128: PPUSH
18129: CALL_OW 48
// InGameOff ;
18133: CALL_OW 9
// allowConvoys := true ;
18137: LD_ADDR_EXP 13
18141: PUSH
18142: LD_INT 1
18144: ST_TO_ADDR
// blockAttack := false ;
18145: LD_ADDR_EXP 29
18149: PUSH
18150: LD_INT 0
18152: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18153: LD_STRING ACH_IBRAHIM
18155: PPUSH
18156: CALL_OW 543
// end ; end ;
18160: PPOPN 6
18162: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18163: LD_EXP 36
18167: PPUSH
18168: CALL_OW 256
18172: PUSH
18173: LD_INT 3
18175: LESS
18176: IFFALSE 18243
18178: GO 18180
18180: DISABLE
// begin DialogueOn ;
18181: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18185: LD_EXP 36
18189: PPUSH
18190: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18194: LD_EXP 36
18198: PPUSH
18199: LD_STRING DK-keydeath-1
18201: PPUSH
18202: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18206: LD_EXP 31
18210: PPUSH
18211: LD_STRING DH-keydeath-2
18213: PPUSH
18214: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18218: LD_EXP 31
18222: PPUSH
18223: LD_STRING DH-keydeath-3
18225: PPUSH
18226: CALL_OW 88
// DialogueOff ;
18230: CALL_OW 7
// KillUnit ( Kaia ) ;
18234: LD_EXP 36
18238: PPUSH
18239: CALL_OW 66
// end ;
18243: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18244: LD_EXP 12
18248: PUSH
18249: LD_EXP 22
18253: PUSH
18254: LD_INT 1
18256: LESS
18257: AND
18258: IFFALSE 18827
18260: GO 18262
18262: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18263: LD_INT 22
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: LD_INT 25
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 25
18288: PUSH
18289: LD_INT 3
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PPUSH
18305: CALL_OW 69
18309: IFFALSE 18387
// begin ChangeSideFog ( 1 , 2 ) ;
18311: LD_INT 1
18313: PPUSH
18314: LD_INT 2
18316: PPUSH
18317: CALL_OW 343
// Query ( DestroyEnemy ) ;
18321: LD_STRING DestroyEnemy
18323: PPUSH
18324: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18328: LD_INT 35
18330: PPUSH
18331: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18335: LD_INT 22
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 2
18347: PUSH
18348: LD_INT 25
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 25
18360: PUSH
18361: LD_INT 3
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PPUSH
18377: CALL_OW 69
18381: PUSH
18382: LD_INT 0
18384: EQUAL
18385: IFFALSE 18328
// end ; if tick <= 45 45$00 then
18387: LD_OWVAR 1
18391: PUSH
18392: LD_INT 94500
18394: LESSEQUAL
18395: IFFALSE 18404
// SetAchievement ( ACH_HSPEED_3 ) ;
18397: LD_STRING ACH_HSPEED_3
18399: PPUSH
18400: CALL_OW 543
// DialogueOn ;
18404: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18408: LD_EXP 31
18412: PPUSH
18413: LD_STRING DH-1-final
18415: PPUSH
18416: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18420: LD_OWVAR 1
18424: PUSH
18425: LD_INT 138600
18427: PUSH
18428: LD_INT 134400
18430: PUSH
18431: LD_INT 130200
18433: PUSH
18434: LD_INT 126000
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: PUSH
18443: LD_OWVAR 67
18447: ARRAY
18448: LESSEQUAL
18449: IFFALSE 18463
// AddMedal ( med1 , 1 ) else
18451: LD_STRING med1
18453: PPUSH
18454: LD_INT 1
18456: PPUSH
18457: CALL_OW 101
18461: GO 18474
// AddMedal ( med1 , - 1 ) ;
18463: LD_STRING med1
18465: PPUSH
18466: LD_INT 1
18468: NEG
18469: PPUSH
18470: CALL_OW 101
// if vehCounter >= 2 then
18474: LD_EXP 23
18478: PUSH
18479: LD_INT 2
18481: GREATEREQUAL
18482: IFFALSE 18496
// AddMedal ( med2 , 1 ) else
18484: LD_STRING med2
18486: PPUSH
18487: LD_INT 1
18489: PPUSH
18490: CALL_OW 101
18494: GO 18507
// AddMedal ( med2 , - 1 ) ;
18496: LD_STRING med2
18498: PPUSH
18499: LD_INT 1
18501: NEG
18502: PPUSH
18503: CALL_OW 101
// if deadCounter = 0 then
18507: LD_EXP 10
18511: PUSH
18512: LD_INT 0
18514: EQUAL
18515: IFFALSE 18529
// AddMedal ( med3 , 1 ) else
18517: LD_STRING med3
18519: PPUSH
18520: LD_INT 1
18522: PPUSH
18523: CALL_OW 101
18527: GO 18540
// AddMedal ( med3 , - 1 ) ;
18529: LD_STRING med3
18531: PPUSH
18532: LD_INT 1
18534: NEG
18535: PPUSH
18536: CALL_OW 101
// GiveMedals ( MAIN ) ;
18540: LD_STRING MAIN
18542: PPUSH
18543: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18547: LD_INT 22
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 23
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 21
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: LIST
18581: PPUSH
18582: CALL_OW 69
18586: PPUSH
18587: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18591: LD_EXP 31
18595: PPUSH
18596: LD_STRING 03_Heike
18598: PPUSH
18599: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18603: LD_EXP 35
18607: PPUSH
18608: LD_STRING 03_Aviradze
18610: PPUSH
18611: CALL_OW 38
// if Givi then
18615: LD_EXP 32
18619: IFFALSE 18633
// SaveCharacters ( Givi , 03_Givi ) ;
18621: LD_EXP 32
18625: PPUSH
18626: LD_STRING 03_Givi
18628: PPUSH
18629: CALL_OW 38
// if Mike then
18633: LD_EXP 33
18637: IFFALSE 18651
// SaveCharacters ( Mike , 03_Mike ) ;
18639: LD_EXP 33
18643: PPUSH
18644: LD_STRING 03_Mike
18646: PPUSH
18647: CALL_OW 38
// if Kamil then
18651: LD_EXP 34
18655: IFFALSE 18669
// SaveCharacters ( Kamil , 03_Kamil ) ;
18657: LD_EXP 34
18661: PPUSH
18662: LD_STRING 03_Kamil
18664: PPUSH
18665: CALL_OW 38
// if Kaia then
18669: LD_EXP 36
18673: IFFALSE 18687
// SaveCharacters ( Kaia , 03_Kaia ) ;
18675: LD_EXP 36
18679: PPUSH
18680: LD_STRING 03_Kaia
18682: PPUSH
18683: CALL_OW 38
// if Sophia then
18687: LD_EXP 37
18691: IFFALSE 18705
// SaveCharacters ( Sophia , 03_Sophia ) ;
18693: LD_EXP 37
18697: PPUSH
18698: LD_STRING 03_Sophia
18700: PPUSH
18701: CALL_OW 38
// if Markov then
18705: LD_EXP 38
18709: IFFALSE 18723
// SaveCharacters ( Markov , 03_Markov ) ;
18711: LD_EXP 38
18715: PPUSH
18716: LD_STRING 03_Markov
18718: PPUSH
18719: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18723: LD_EXP 41
18727: PUSH
18728: LD_EXP 41
18732: PPUSH
18733: CALL_OW 255
18737: PUSH
18738: LD_INT 2
18740: EQUAL
18741: AND
18742: IFFALSE 18763
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18744: LD_STRING enableBioCharacter(BIO_IBRA)
18746: PPUSH
18747: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18751: LD_EXP 41
18755: PPUSH
18756: LD_STRING 03_Ibrahim
18758: PPUSH
18759: CALL_OW 38
// end ; if heikeSecondSquad then
18763: LD_EXP 45
18767: IFFALSE 18781
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18769: LD_EXP 45
18773: PPUSH
18774: LD_STRING 03_others
18776: PPUSH
18777: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18781: LD_EXP 10
18785: PPUSH
18786: LD_STRING 03_DeadCounter
18788: PPUSH
18789: CALL_OW 39
// SaveVariable ( cargoRecycled , 03_CargoRecycled ) ;
18793: LD_EXP 30
18797: PPUSH
18798: LD_STRING 03_CargoRecycled
18800: PPUSH
18801: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18805: LD_STRING enableBioCharacter(BIO_OMAR)
18807: PPUSH
18808: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18812: LD_STRING enableBioCharacter(BIO_FARM)
18814: PPUSH
18815: CALL_OW 559
// YouWin ;
18819: CALL_OW 103
// DialogueOff ;
18823: CALL_OW 7
// end ; end_of_file
18827: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18828: LD_VAR 0 1
18832: PPUSH
18833: CALL 35926 0 1
// if un = Heike then
18837: LD_VAR 0 1
18841: PUSH
18842: LD_EXP 31
18846: EQUAL
18847: IFFALSE 18856
// YouLost ( Heike ) ;
18849: LD_STRING Heike
18851: PPUSH
18852: CALL_OW 104
// if un = Aviradze then
18856: LD_VAR 0 1
18860: PUSH
18861: LD_EXP 35
18865: EQUAL
18866: IFFALSE 18875
// YouLost ( Aviradze ) ;
18868: LD_STRING Aviradze
18870: PPUSH
18871: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18875: LD_VAR 0 1
18879: PUSH
18880: LD_INT 11
18882: EQUAL
18883: PUSH
18884: LD_EXP 12
18888: NOT
18889: AND
18890: IFFALSE 18899
// YouLost ( Depot ) ;
18892: LD_STRING Depot
18894: PPUSH
18895: CALL_OW 104
// if un = arDepot then
18899: LD_VAR 0 1
18903: PUSH
18904: LD_INT 5
18906: EQUAL
18907: IFFALSE 18916
// YouLost ( FarmerDepot ) ;
18909: LD_STRING FarmerDepot
18911: PPUSH
18912: CALL_OW 104
// if un = Farmer then
18916: LD_VAR 0 1
18920: PUSH
18921: LD_EXP 39
18925: EQUAL
18926: IFFALSE 18935
// YouLost ( Farmer ) ;
18928: LD_STRING Farmer
18930: PPUSH
18931: CALL_OW 104
// if un in usForces then
18935: LD_VAR 0 1
18939: PUSH
18940: LD_EXP 47
18944: IN
18945: IFFALSE 18963
// usForces := usForces diff un ;
18947: LD_ADDR_EXP 47
18951: PUSH
18952: LD_EXP 47
18956: PUSH
18957: LD_VAR 0 1
18961: DIFF
18962: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18963: LD_VAR 0 1
18967: PUSH
18968: LD_INT 22
18970: PUSH
18971: LD_INT 2
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 23
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 21
18990: PUSH
18991: LD_INT 1
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: LIST
19002: PPUSH
19003: CALL_OW 69
19007: IN
19008: IFFALSE 19024
// deadCounter := deadCounter + 1 ;
19010: LD_ADDR_EXP 10
19014: PUSH
19015: LD_EXP 10
19019: PUSH
19020: LD_INT 1
19022: PLUS
19023: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
19024: LD_VAR 0 1
19028: PUSH
19029: LD_INT 22
19031: PUSH
19032: LD_INT 4
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 34
19041: PUSH
19042: LD_INT 12
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PPUSH
19053: CALL_OW 69
19057: IN
19058: PUSH
19059: LD_EXP 19
19063: NOT
19064: AND
19065: IFFALSE 19075
// firstConvoyDestroyed := true ;
19067: LD_ADDR_EXP 19
19071: PUSH
19072: LD_INT 1
19074: ST_TO_ADDR
// if un in usAttackers then
19075: LD_VAR 0 1
19079: PUSH
19080: LD_EXP 50
19084: IN
19085: IFFALSE 19103
// usAttackers := usAttackers diff un ;
19087: LD_ADDR_EXP 50
19091: PUSH
19092: LD_EXP 50
19096: PUSH
19097: LD_VAR 0 1
19101: DIFF
19102: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19103: LD_VAR 0 1
19107: PUSH
19108: LD_INT 22
19110: PUSH
19111: LD_INT 5
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 21
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PPUSH
19132: CALL_OW 69
19136: IN
19137: IFFALSE 19153
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19139: LD_ADDR_EXP 21
19143: PUSH
19144: LD_EXP 21
19148: PUSH
19149: LD_INT 1
19151: PLUS
19152: ST_TO_ADDR
// end ;
19153: PPOPN 1
19155: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19156: LD_VAR 0 2
19160: PUSH
19161: LD_EXP 41
19165: EQUAL
19166: PUSH
19167: LD_EXP 26
19171: AND
19172: IFFALSE 19357
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19174: LD_INT 22
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 30
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 50
19196: PUSH
19197: EMPTY
19198: LIST
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: PPUSH
19205: CALL_OW 69
19209: IFFALSE 19263
// begin InGameOn ;
19211: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19215: LD_EXP 41
19219: PPUSH
19220: LD_INT 11
19222: PPUSH
19223: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19227: LD_INT 35
19229: PPUSH
19230: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19234: LD_EXP 41
19238: PPUSH
19239: LD_INT 11
19241: PPUSH
19242: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19246: LD_EXP 41
19250: PPUSH
19251: CALL_OW 310
19255: IFFALSE 19227
// InGameOff ;
19257: CALL_OW 9
// end else
19261: GO 19357
// begin SetSide ( Ibrahim , 6 ) ;
19263: LD_EXP 41
19267: PPUSH
19268: LD_INT 6
19270: PPUSH
19271: CALL_OW 235
// ibrahimInDepot := false ;
19275: LD_ADDR_EXP 26
19279: PUSH
19280: LD_INT 0
19282: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19283: LD_EXP 41
19287: PPUSH
19288: LD_INT 30
19290: PPUSH
19291: LD_INT 1
19293: PPUSH
19294: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19298: LD_INT 35
19300: PPUSH
19301: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19305: LD_EXP 41
19309: PPUSH
19310: LD_INT 30
19312: PPUSH
19313: LD_INT 1
19315: PPUSH
19316: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19320: LD_EXP 41
19324: PPUSH
19325: LD_INT 30
19327: PPUSH
19328: LD_INT 1
19330: PPUSH
19331: CALL_OW 307
19335: PUSH
19336: LD_EXP 41
19340: PPUSH
19341: CALL_OW 301
19345: OR
19346: IFFALSE 19298
// RemoveUnit ( Ibrahim ) ;
19348: LD_EXP 41
19352: PPUSH
19353: CALL_OW 64
// end ; end ; end ;
19357: PPOPN 2
19359: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19360: LD_VAR 0 2
19364: PUSH
19365: LD_EXP 31
19369: EQUAL
19370: PUSH
19371: LD_VAR 0 1
19375: PUSH
19376: LD_INT 11
19378: EQUAL
19379: AND
19380: PUSH
19381: LD_EXP 26
19385: AND
19386: IFFALSE 19392
// IbrahimQuery ;
19388: CALL 16827 0 0
// end ;
19392: PPOPN 2
19394: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19395: LD_VAR 0 1
19399: PPUSH
19400: CALL_OW 141
// if oldId in usAttackers then
19404: LD_VAR 0 2
19408: PUSH
19409: LD_EXP 50
19413: IN
19414: IFFALSE 19432
// usAttackers := usAttackers diff oldId ;
19416: LD_ADDR_EXP 50
19420: PUSH
19421: LD_EXP 50
19425: PUSH
19426: LD_VAR 0 2
19430: DIFF
19431: ST_TO_ADDR
// if newId in usAttackers then
19432: LD_VAR 0 1
19436: PUSH
19437: LD_EXP 50
19441: IN
19442: IFFALSE 19460
// usAttackers := usAttackers diff newId ;
19444: LD_ADDR_EXP 50
19448: PUSH
19449: LD_EXP 50
19453: PUSH
19454: LD_VAR 0 1
19458: DIFF
19459: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19460: LD_VAR 0 3
19464: PUSH
19465: LD_INT 4
19467: EQUAL
19468: PUSH
19469: LD_EXP 19
19473: NOT
19474: AND
19475: IFFALSE 19485
// firstConvoyDestroyed := true ;
19477: LD_ADDR_EXP 19
19481: PUSH
19482: LD_INT 1
19484: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19485: LD_VAR 0 1
19489: PPUSH
19490: CALL_OW 264
19494: PUSH
19495: LD_INT 12
19497: EQUAL
19498: IFFALSE 19536
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19500: LD_ADDR_EXP 14
19504: PUSH
19505: LD_EXP 14
19509: PUSH
19510: LD_INT 1
19512: PLUS
19513: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19514: LD_VAR 0 1
19518: PPUSH
19519: LD_INT 1
19521: PPUSH
19522: CALL_OW 289
19526: PUSH
19527: LD_INT 0
19529: EQUAL
19530: IFFALSE 19536
// EmptyCargoDialog ;
19532: CALL 15445 0 0
// end ; end ;
19536: PPOPN 4
19538: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19539: LD_VAR 0 1
19543: PUSH
19544: LD_INT 2
19546: EQUAL
19547: PUSH
19548: LD_VAR 0 2
19552: PUSH
19553: LD_INT 5
19555: EQUAL
19556: AND
19557: IFFALSE 19566
// YouLost ( Attack ) ;
19559: LD_STRING Attack
19561: PPUSH
19562: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19566: LD_VAR 0 1
19570: PUSH
19571: LD_INT 2
19573: EQUAL
19574: PUSH
19575: LD_VAR 0 2
19579: PUSH
19580: LD_INT 1
19582: EQUAL
19583: AND
19584: IFFALSE 19594
// americanContact := true ;
19586: LD_ADDR_EXP 5
19590: PUSH
19591: LD_INT 1
19593: ST_TO_ADDR
// end ;
19594: PPOPN 2
19596: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19597: LD_VAR 0 1
19601: PPUSH
19602: CALL_OW 255
19606: PUSH
19607: LD_INT 1
19609: EQUAL
19610: PUSH
19611: LD_EXP 7
19615: NOT
19616: AND
19617: IFFALSE 19751
// begin if GetBType ( b ) = b_lab then
19619: LD_VAR 0 1
19623: PPUSH
19624: CALL_OW 266
19628: PUSH
19629: LD_INT 6
19631: EQUAL
19632: IFFALSE 19672
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19634: LD_EXP 47
19638: PPUSH
19639: LD_INT 25
19641: PUSH
19642: LD_INT 4
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 72
19653: PPUSH
19654: LD_VAR 0 1
19658: PPUSH
19659: CALL_OW 120
// AmLabResearch ( b ) ;
19663: LD_VAR 0 1
19667: PPUSH
19668: CALL 5142 0 1
// end ; if GetBType ( b ) = b_armoury then
19672: LD_VAR 0 1
19676: PPUSH
19677: CALL_OW 266
19681: PUSH
19682: LD_INT 4
19684: EQUAL
19685: IFFALSE 19733
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19687: LD_EXP 47
19691: PPUSH
19692: LD_INT 25
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 3
19704: PUSH
19705: LD_INT 54
19707: PUSH
19708: EMPTY
19709: LIST
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PPUSH
19719: CALL_OW 72
19723: PPUSH
19724: LD_VAR 0 1
19728: PPUSH
19729: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19733: LD_ADDR_EXP 49
19737: PUSH
19738: LD_EXP 49
19742: PPUSH
19743: LD_INT 1
19745: PPUSH
19746: CALL_OW 3
19750: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19751: LD_VAR 0 1
19755: PPUSH
19756: CALL_OW 255
19760: PUSH
19761: LD_INT 5
19763: EQUAL
19764: IFFALSE 19778
// SetBLevel ( b , 5 ) ;
19766: LD_VAR 0 1
19770: PPUSH
19771: LD_INT 5
19773: PPUSH
19774: CALL_OW 241
// end ;
19778: PPOPN 1
19780: END
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin if weapon = us_cargo_bay then
19781: LD_VAR 0 11
19785: PUSH
19786: LD_INT 12
19788: EQUAL
19789: IFFALSE 19799
// cargoRecycled := true ;
19791: LD_ADDR_EXP 30
19795: PUSH
19796: LD_INT 1
19798: ST_TO_ADDR
// end ;
19799: PPOPN 11
19801: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19802: LD_VAR 0 1
19806: PPUSH
19807: CALL_OW 255
19811: PUSH
19812: LD_INT 2
19814: EQUAL
19815: IFFALSE 19831
// vehCounter := vehCounter + 1 ;
19817: LD_ADDR_EXP 23
19821: PUSH
19822: LD_EXP 23
19826: PUSH
19827: LD_INT 1
19829: PLUS
19830: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19831: LD_VAR 0 1
19835: PPUSH
19836: LD_VAR 0 2
19840: PPUSH
19841: CALL 36046 0 2
// end ;
19845: PPOPN 2
19847: END
// on SailEvent ( event ) do begin if event = eventAttack then
19848: LD_VAR 0 1
19852: PUSH
19853: LD_EXP 25
19857: EQUAL
19858: IFFALSE 19864
// AmericanAttack ;
19860: CALL 6786 0 0
// end ; end_of_file
19864: PPOPN 1
19866: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19867: LD_OWVAR 1
19871: PUSH
19872: LD_INT 10500
19874: PUSH
19875: LD_INT 9800
19877: PUSH
19878: LD_INT 9450
19880: PUSH
19881: LD_INT 9100
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: PUSH
19890: LD_OWVAR 67
19894: ARRAY
19895: LESSEQUAL
19896: IFFALSE 19923
19898: GO 19900
19900: DISABLE
// begin enable ;
19901: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19902: LD_INT 1
19904: PPUSH
19905: LD_INT 5
19907: PPUSH
19908: CALL_OW 12
19912: PPUSH
19913: LD_INT 9
19915: PPUSH
19916: LD_INT 1
19918: PPUSH
19919: CALL_OW 55
// end ;
19923: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19924: LD_EXP 7
19928: PUSH
19929: LD_OWVAR 1
19933: PUSH
19934: LD_INT 94500
19936: LESSEQUAL
19937: AND
19938: IFFALSE 19965
19940: GO 19942
19942: DISABLE
// begin enable ;
19943: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19944: LD_INT 3
19946: PPUSH
19947: LD_INT 5
19949: PPUSH
19950: CALL_OW 12
19954: PPUSH
19955: LD_INT 9
19957: PPUSH
19958: LD_INT 1
19960: PPUSH
19961: CALL_OW 55
// end ; end_of_file
19965: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19966: LD_EXP 12
19970: NOT
19971: PUSH
19972: LD_EXP 17
19976: AND
19977: PUSH
19978: LD_EXP 4
19982: AND
19983: PUSH
19984: LD_EXP 16
19988: PUSH
19989: LD_EXP 17
19993: LESSEQUAL
19994: AND
19995: IFFALSE 20106
19997: GO 19999
19999: DISABLE
// begin enable ;
20000: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
20001: LD_ADDR_OWVAR 47
20005: PUSH
20006: LD_STRING #X103-1
20008: PUSH
20009: LD_EXP 17
20013: PUSH
20014: LD_EXP 16
20018: MINUS
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
20024: LD_ADDR_EXP 16
20028: PUSH
20029: LD_INT 5
20031: PPUSH
20032: CALL_OW 274
20036: PPUSH
20037: LD_INT 1
20039: PPUSH
20040: CALL_OW 275
20044: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
20045: LD_INT 10
20047: PPUSH
20048: LD_INT 1
20050: PPUSH
20051: CALL_OW 287
20055: PUSH
20056: LD_INT 0
20058: EQUAL
20059: IFFALSE 20077
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
20061: LD_ADDR_EXP 18
20065: PUSH
20066: LD_EXP 18
20070: PUSH
20071: LD_INT 35
20073: MINUS
20074: ST_TO_ADDR
20075: GO 20106
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
20077: LD_ADDR_EXP 18
20081: PUSH
20082: LD_INT 42000
20084: PUSH
20085: LD_INT 31500
20087: PUSH
20088: LD_INT 25200
20090: PUSH
20091: LD_INT 21000
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: PUSH
20100: LD_OWVAR 67
20104: ARRAY
20105: ST_TO_ADDR
// end ; end_of_file
20106: END
// export globalGameSaveCounter ; every 0 0$1 do
20107: GO 20109
20109: DISABLE
// begin enable ;
20110: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20111: LD_STRING updateTimer(
20113: PUSH
20114: LD_OWVAR 1
20118: STR
20119: PUSH
20120: LD_STRING );
20122: STR
20123: PPUSH
20124: CALL_OW 559
// end ;
20128: END
// every 0 0$1 do
20129: GO 20131
20131: DISABLE
// begin globalGameSaveCounter := 0 ;
20132: LD_ADDR_EXP 51
20136: PUSH
20137: LD_INT 0
20139: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20140: LD_STRING setGameSaveCounter(0)
20142: PPUSH
20143: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20147: LD_STRING initStreamRollete();
20149: PPUSH
20150: CALL_OW 559
// InitStreamMode ;
20154: CALL 21497 0 0
// DefineStreamItems ( false ) ;
20158: LD_INT 0
20160: PPUSH
20161: CALL 21961 0 1
// end ;
20165: END
// export function SOS_MapStart ( ) ; begin
20166: LD_INT 0
20168: PPUSH
// if streamModeActive then
20169: LD_EXP 52
20173: IFFALSE 20182
// DefineStreamItems ( true ) ;
20175: LD_INT 1
20177: PPUSH
20178: CALL 21961 0 1
// UpdateLuaVariables ( ) ;
20182: CALL 20199 0 0
// UpdateFactoryWaypoints ( ) ;
20186: CALL 34830 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20190: CALL 35087 0 0
// end ;
20194: LD_VAR 0 1
20198: RET
// function UpdateLuaVariables ( ) ; begin
20199: LD_INT 0
20201: PPUSH
// if globalGameSaveCounter then
20202: LD_EXP 51
20206: IFFALSE 20240
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20208: LD_ADDR_EXP 51
20212: PUSH
20213: LD_EXP 51
20217: PPUSH
20218: CALL 79872 0 1
20222: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20223: LD_STRING setGameSaveCounter(
20225: PUSH
20226: LD_EXP 51
20230: STR
20231: PUSH
20232: LD_STRING )
20234: STR
20235: PPUSH
20236: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20240: LD_STRING setGameDifficulty(
20242: PUSH
20243: LD_OWVAR 67
20247: STR
20248: PUSH
20249: LD_STRING )
20251: STR
20252: PPUSH
20253: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20257: LD_STRING displayDifficulty(
20259: PUSH
20260: LD_OWVAR 67
20264: STR
20265: PUSH
20266: LD_STRING )
20268: STR
20269: PPUSH
20270: CALL_OW 559
// end ;
20274: LD_VAR 0 1
20278: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20279: LD_INT 0
20281: PPUSH
// if p2 = stream_mode then
20282: LD_VAR 0 2
20286: PUSH
20287: LD_INT 100
20289: EQUAL
20290: IFFALSE 21293
// begin if not StreamModeActive then
20292: LD_EXP 52
20296: NOT
20297: IFFALSE 20307
// StreamModeActive := true ;
20299: LD_ADDR_EXP 52
20303: PUSH
20304: LD_INT 1
20306: ST_TO_ADDR
// if p3 = 0 then
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 0
20314: EQUAL
20315: IFFALSE 20321
// InitStreamMode ;
20317: CALL 21497 0 0
// if p3 = 1 then
20321: LD_VAR 0 3
20325: PUSH
20326: LD_INT 1
20328: EQUAL
20329: IFFALSE 20339
// sRocket := true ;
20331: LD_ADDR_EXP 57
20335: PUSH
20336: LD_INT 1
20338: ST_TO_ADDR
// if p3 = 2 then
20339: LD_VAR 0 3
20343: PUSH
20344: LD_INT 2
20346: EQUAL
20347: IFFALSE 20357
// sSpeed := true ;
20349: LD_ADDR_EXP 56
20353: PUSH
20354: LD_INT 1
20356: ST_TO_ADDR
// if p3 = 3 then
20357: LD_VAR 0 3
20361: PUSH
20362: LD_INT 3
20364: EQUAL
20365: IFFALSE 20375
// sEngine := true ;
20367: LD_ADDR_EXP 58
20371: PUSH
20372: LD_INT 1
20374: ST_TO_ADDR
// if p3 = 4 then
20375: LD_VAR 0 3
20379: PUSH
20380: LD_INT 4
20382: EQUAL
20383: IFFALSE 20393
// sSpec := true ;
20385: LD_ADDR_EXP 55
20389: PUSH
20390: LD_INT 1
20392: ST_TO_ADDR
// if p3 = 5 then
20393: LD_VAR 0 3
20397: PUSH
20398: LD_INT 5
20400: EQUAL
20401: IFFALSE 20411
// sLevel := true ;
20403: LD_ADDR_EXP 59
20407: PUSH
20408: LD_INT 1
20410: ST_TO_ADDR
// if p3 = 6 then
20411: LD_VAR 0 3
20415: PUSH
20416: LD_INT 6
20418: EQUAL
20419: IFFALSE 20429
// sArmoury := true ;
20421: LD_ADDR_EXP 60
20425: PUSH
20426: LD_INT 1
20428: ST_TO_ADDR
// if p3 = 7 then
20429: LD_VAR 0 3
20433: PUSH
20434: LD_INT 7
20436: EQUAL
20437: IFFALSE 20447
// sRadar := true ;
20439: LD_ADDR_EXP 61
20443: PUSH
20444: LD_INT 1
20446: ST_TO_ADDR
// if p3 = 8 then
20447: LD_VAR 0 3
20451: PUSH
20452: LD_INT 8
20454: EQUAL
20455: IFFALSE 20465
// sBunker := true ;
20457: LD_ADDR_EXP 62
20461: PUSH
20462: LD_INT 1
20464: ST_TO_ADDR
// if p3 = 9 then
20465: LD_VAR 0 3
20469: PUSH
20470: LD_INT 9
20472: EQUAL
20473: IFFALSE 20483
// sHack := true ;
20475: LD_ADDR_EXP 63
20479: PUSH
20480: LD_INT 1
20482: ST_TO_ADDR
// if p3 = 10 then
20483: LD_VAR 0 3
20487: PUSH
20488: LD_INT 10
20490: EQUAL
20491: IFFALSE 20501
// sFire := true ;
20493: LD_ADDR_EXP 64
20497: PUSH
20498: LD_INT 1
20500: ST_TO_ADDR
// if p3 = 11 then
20501: LD_VAR 0 3
20505: PUSH
20506: LD_INT 11
20508: EQUAL
20509: IFFALSE 20519
// sRefresh := true ;
20511: LD_ADDR_EXP 65
20515: PUSH
20516: LD_INT 1
20518: ST_TO_ADDR
// if p3 = 12 then
20519: LD_VAR 0 3
20523: PUSH
20524: LD_INT 12
20526: EQUAL
20527: IFFALSE 20537
// sExp := true ;
20529: LD_ADDR_EXP 66
20533: PUSH
20534: LD_INT 1
20536: ST_TO_ADDR
// if p3 = 13 then
20537: LD_VAR 0 3
20541: PUSH
20542: LD_INT 13
20544: EQUAL
20545: IFFALSE 20555
// sDepot := true ;
20547: LD_ADDR_EXP 67
20551: PUSH
20552: LD_INT 1
20554: ST_TO_ADDR
// if p3 = 14 then
20555: LD_VAR 0 3
20559: PUSH
20560: LD_INT 14
20562: EQUAL
20563: IFFALSE 20573
// sFlag := true ;
20565: LD_ADDR_EXP 68
20569: PUSH
20570: LD_INT 1
20572: ST_TO_ADDR
// if p3 = 15 then
20573: LD_VAR 0 3
20577: PUSH
20578: LD_INT 15
20580: EQUAL
20581: IFFALSE 20591
// sKamikadze := true ;
20583: LD_ADDR_EXP 76
20587: PUSH
20588: LD_INT 1
20590: ST_TO_ADDR
// if p3 = 16 then
20591: LD_VAR 0 3
20595: PUSH
20596: LD_INT 16
20598: EQUAL
20599: IFFALSE 20609
// sTroll := true ;
20601: LD_ADDR_EXP 77
20605: PUSH
20606: LD_INT 1
20608: ST_TO_ADDR
// if p3 = 17 then
20609: LD_VAR 0 3
20613: PUSH
20614: LD_INT 17
20616: EQUAL
20617: IFFALSE 20627
// sSlow := true ;
20619: LD_ADDR_EXP 78
20623: PUSH
20624: LD_INT 1
20626: ST_TO_ADDR
// if p3 = 18 then
20627: LD_VAR 0 3
20631: PUSH
20632: LD_INT 18
20634: EQUAL
20635: IFFALSE 20645
// sLack := true ;
20637: LD_ADDR_EXP 79
20641: PUSH
20642: LD_INT 1
20644: ST_TO_ADDR
// if p3 = 19 then
20645: LD_VAR 0 3
20649: PUSH
20650: LD_INT 19
20652: EQUAL
20653: IFFALSE 20663
// sTank := true ;
20655: LD_ADDR_EXP 81
20659: PUSH
20660: LD_INT 1
20662: ST_TO_ADDR
// if p3 = 20 then
20663: LD_VAR 0 3
20667: PUSH
20668: LD_INT 20
20670: EQUAL
20671: IFFALSE 20681
// sRemote := true ;
20673: LD_ADDR_EXP 82
20677: PUSH
20678: LD_INT 1
20680: ST_TO_ADDR
// if p3 = 21 then
20681: LD_VAR 0 3
20685: PUSH
20686: LD_INT 21
20688: EQUAL
20689: IFFALSE 20699
// sPowell := true ;
20691: LD_ADDR_EXP 83
20695: PUSH
20696: LD_INT 1
20698: ST_TO_ADDR
// if p3 = 22 then
20699: LD_VAR 0 3
20703: PUSH
20704: LD_INT 22
20706: EQUAL
20707: IFFALSE 20717
// sTeleport := true ;
20709: LD_ADDR_EXP 86
20713: PUSH
20714: LD_INT 1
20716: ST_TO_ADDR
// if p3 = 23 then
20717: LD_VAR 0 3
20721: PUSH
20722: LD_INT 23
20724: EQUAL
20725: IFFALSE 20735
// sOilTower := true ;
20727: LD_ADDR_EXP 88
20731: PUSH
20732: LD_INT 1
20734: ST_TO_ADDR
// if p3 = 24 then
20735: LD_VAR 0 3
20739: PUSH
20740: LD_INT 24
20742: EQUAL
20743: IFFALSE 20753
// sShovel := true ;
20745: LD_ADDR_EXP 89
20749: PUSH
20750: LD_INT 1
20752: ST_TO_ADDR
// if p3 = 25 then
20753: LD_VAR 0 3
20757: PUSH
20758: LD_INT 25
20760: EQUAL
20761: IFFALSE 20771
// sSheik := true ;
20763: LD_ADDR_EXP 90
20767: PUSH
20768: LD_INT 1
20770: ST_TO_ADDR
// if p3 = 26 then
20771: LD_VAR 0 3
20775: PUSH
20776: LD_INT 26
20778: EQUAL
20779: IFFALSE 20789
// sEarthquake := true ;
20781: LD_ADDR_EXP 92
20785: PUSH
20786: LD_INT 1
20788: ST_TO_ADDR
// if p3 = 27 then
20789: LD_VAR 0 3
20793: PUSH
20794: LD_INT 27
20796: EQUAL
20797: IFFALSE 20807
// sAI := true ;
20799: LD_ADDR_EXP 93
20803: PUSH
20804: LD_INT 1
20806: ST_TO_ADDR
// if p3 = 28 then
20807: LD_VAR 0 3
20811: PUSH
20812: LD_INT 28
20814: EQUAL
20815: IFFALSE 20825
// sCargo := true ;
20817: LD_ADDR_EXP 96
20821: PUSH
20822: LD_INT 1
20824: ST_TO_ADDR
// if p3 = 29 then
20825: LD_VAR 0 3
20829: PUSH
20830: LD_INT 29
20832: EQUAL
20833: IFFALSE 20843
// sDLaser := true ;
20835: LD_ADDR_EXP 97
20839: PUSH
20840: LD_INT 1
20842: ST_TO_ADDR
// if p3 = 30 then
20843: LD_VAR 0 3
20847: PUSH
20848: LD_INT 30
20850: EQUAL
20851: IFFALSE 20861
// sExchange := true ;
20853: LD_ADDR_EXP 98
20857: PUSH
20858: LD_INT 1
20860: ST_TO_ADDR
// if p3 = 31 then
20861: LD_VAR 0 3
20865: PUSH
20866: LD_INT 31
20868: EQUAL
20869: IFFALSE 20879
// sFac := true ;
20871: LD_ADDR_EXP 99
20875: PUSH
20876: LD_INT 1
20878: ST_TO_ADDR
// if p3 = 32 then
20879: LD_VAR 0 3
20883: PUSH
20884: LD_INT 32
20886: EQUAL
20887: IFFALSE 20897
// sPower := true ;
20889: LD_ADDR_EXP 100
20893: PUSH
20894: LD_INT 1
20896: ST_TO_ADDR
// if p3 = 33 then
20897: LD_VAR 0 3
20901: PUSH
20902: LD_INT 33
20904: EQUAL
20905: IFFALSE 20915
// sRandom := true ;
20907: LD_ADDR_EXP 101
20911: PUSH
20912: LD_INT 1
20914: ST_TO_ADDR
// if p3 = 34 then
20915: LD_VAR 0 3
20919: PUSH
20920: LD_INT 34
20922: EQUAL
20923: IFFALSE 20933
// sShield := true ;
20925: LD_ADDR_EXP 102
20929: PUSH
20930: LD_INT 1
20932: ST_TO_ADDR
// if p3 = 35 then
20933: LD_VAR 0 3
20937: PUSH
20938: LD_INT 35
20940: EQUAL
20941: IFFALSE 20951
// sTime := true ;
20943: LD_ADDR_EXP 103
20947: PUSH
20948: LD_INT 1
20950: ST_TO_ADDR
// if p3 = 36 then
20951: LD_VAR 0 3
20955: PUSH
20956: LD_INT 36
20958: EQUAL
20959: IFFALSE 20969
// sTools := true ;
20961: LD_ADDR_EXP 104
20965: PUSH
20966: LD_INT 1
20968: ST_TO_ADDR
// if p3 = 101 then
20969: LD_VAR 0 3
20973: PUSH
20974: LD_INT 101
20976: EQUAL
20977: IFFALSE 20987
// sSold := true ;
20979: LD_ADDR_EXP 69
20983: PUSH
20984: LD_INT 1
20986: ST_TO_ADDR
// if p3 = 102 then
20987: LD_VAR 0 3
20991: PUSH
20992: LD_INT 102
20994: EQUAL
20995: IFFALSE 21005
// sDiff := true ;
20997: LD_ADDR_EXP 70
21001: PUSH
21002: LD_INT 1
21004: ST_TO_ADDR
// if p3 = 103 then
21005: LD_VAR 0 3
21009: PUSH
21010: LD_INT 103
21012: EQUAL
21013: IFFALSE 21023
// sFog := true ;
21015: LD_ADDR_EXP 73
21019: PUSH
21020: LD_INT 1
21022: ST_TO_ADDR
// if p3 = 104 then
21023: LD_VAR 0 3
21027: PUSH
21028: LD_INT 104
21030: EQUAL
21031: IFFALSE 21041
// sReset := true ;
21033: LD_ADDR_EXP 74
21037: PUSH
21038: LD_INT 1
21040: ST_TO_ADDR
// if p3 = 105 then
21041: LD_VAR 0 3
21045: PUSH
21046: LD_INT 105
21048: EQUAL
21049: IFFALSE 21059
// sSun := true ;
21051: LD_ADDR_EXP 75
21055: PUSH
21056: LD_INT 1
21058: ST_TO_ADDR
// if p3 = 106 then
21059: LD_VAR 0 3
21063: PUSH
21064: LD_INT 106
21066: EQUAL
21067: IFFALSE 21077
// sTiger := true ;
21069: LD_ADDR_EXP 71
21073: PUSH
21074: LD_INT 1
21076: ST_TO_ADDR
// if p3 = 107 then
21077: LD_VAR 0 3
21081: PUSH
21082: LD_INT 107
21084: EQUAL
21085: IFFALSE 21095
// sBomb := true ;
21087: LD_ADDR_EXP 72
21091: PUSH
21092: LD_INT 1
21094: ST_TO_ADDR
// if p3 = 108 then
21095: LD_VAR 0 3
21099: PUSH
21100: LD_INT 108
21102: EQUAL
21103: IFFALSE 21113
// sWound := true ;
21105: LD_ADDR_EXP 80
21109: PUSH
21110: LD_INT 1
21112: ST_TO_ADDR
// if p3 = 109 then
21113: LD_VAR 0 3
21117: PUSH
21118: LD_INT 109
21120: EQUAL
21121: IFFALSE 21131
// sBetray := true ;
21123: LD_ADDR_EXP 84
21127: PUSH
21128: LD_INT 1
21130: ST_TO_ADDR
// if p3 = 110 then
21131: LD_VAR 0 3
21135: PUSH
21136: LD_INT 110
21138: EQUAL
21139: IFFALSE 21149
// sContamin := true ;
21141: LD_ADDR_EXP 85
21145: PUSH
21146: LD_INT 1
21148: ST_TO_ADDR
// if p3 = 111 then
21149: LD_VAR 0 3
21153: PUSH
21154: LD_INT 111
21156: EQUAL
21157: IFFALSE 21167
// sOil := true ;
21159: LD_ADDR_EXP 87
21163: PUSH
21164: LD_INT 1
21166: ST_TO_ADDR
// if p3 = 112 then
21167: LD_VAR 0 3
21171: PUSH
21172: LD_INT 112
21174: EQUAL
21175: IFFALSE 21185
// sStu := true ;
21177: LD_ADDR_EXP 91
21181: PUSH
21182: LD_INT 1
21184: ST_TO_ADDR
// if p3 = 113 then
21185: LD_VAR 0 3
21189: PUSH
21190: LD_INT 113
21192: EQUAL
21193: IFFALSE 21203
// sBazooka := true ;
21195: LD_ADDR_EXP 94
21199: PUSH
21200: LD_INT 1
21202: ST_TO_ADDR
// if p3 = 114 then
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 114
21210: EQUAL
21211: IFFALSE 21221
// sMortar := true ;
21213: LD_ADDR_EXP 95
21217: PUSH
21218: LD_INT 1
21220: ST_TO_ADDR
// if p3 = 115 then
21221: LD_VAR 0 3
21225: PUSH
21226: LD_INT 115
21228: EQUAL
21229: IFFALSE 21239
// sRanger := true ;
21231: LD_ADDR_EXP 105
21235: PUSH
21236: LD_INT 1
21238: ST_TO_ADDR
// if p3 = 116 then
21239: LD_VAR 0 3
21243: PUSH
21244: LD_INT 116
21246: EQUAL
21247: IFFALSE 21257
// sComputer := true ;
21249: LD_ADDR_EXP 106
21253: PUSH
21254: LD_INT 1
21256: ST_TO_ADDR
// if p3 = 117 then
21257: LD_VAR 0 3
21261: PUSH
21262: LD_INT 117
21264: EQUAL
21265: IFFALSE 21275
// s30 := true ;
21267: LD_ADDR_EXP 107
21271: PUSH
21272: LD_INT 1
21274: ST_TO_ADDR
// if p3 = 118 then
21275: LD_VAR 0 3
21279: PUSH
21280: LD_INT 118
21282: EQUAL
21283: IFFALSE 21293
// s60 := true ;
21285: LD_ADDR_EXP 108
21289: PUSH
21290: LD_INT 1
21292: ST_TO_ADDR
// end ; if p2 = hack_mode then
21293: LD_VAR 0 2
21297: PUSH
21298: LD_INT 101
21300: EQUAL
21301: IFFALSE 21429
// begin case p3 of 1 :
21303: LD_VAR 0 3
21307: PUSH
21308: LD_INT 1
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21323
21316: POP
// hHackUnlimitedResources ; 2 :
21317: CALL 33576 0 0
21321: GO 21429
21323: LD_INT 2
21325: DOUBLE
21326: EQUAL
21327: IFTRUE 21331
21329: GO 21338
21331: POP
// hHackSetLevel10 ; 3 :
21332: CALL 33709 0 0
21336: GO 21429
21338: LD_INT 3
21340: DOUBLE
21341: EQUAL
21342: IFTRUE 21346
21344: GO 21353
21346: POP
// hHackSetLevel10YourUnits ; 4 :
21347: CALL 33794 0 0
21351: GO 21429
21353: LD_INT 4
21355: DOUBLE
21356: EQUAL
21357: IFTRUE 21361
21359: GO 21368
21361: POP
// hHackInvincible ; 5 :
21362: CALL 34242 0 0
21366: GO 21429
21368: LD_INT 5
21370: DOUBLE
21371: EQUAL
21372: IFTRUE 21376
21374: GO 21383
21376: POP
// hHackInvisible ; 6 :
21377: CALL 34353 0 0
21381: GO 21429
21383: LD_INT 6
21385: DOUBLE
21386: EQUAL
21387: IFTRUE 21391
21389: GO 21398
21391: POP
// hHackChangeYourSide ; 7 :
21392: CALL 34410 0 0
21396: GO 21429
21398: LD_INT 7
21400: DOUBLE
21401: EQUAL
21402: IFTRUE 21406
21404: GO 21413
21406: POP
// hHackChangeUnitSide ; 8 :
21407: CALL 34452 0 0
21411: GO 21429
21413: LD_INT 8
21415: DOUBLE
21416: EQUAL
21417: IFTRUE 21421
21419: GO 21428
21421: POP
// hHackFog ; end ;
21422: CALL 34553 0 0
21426: GO 21429
21428: POP
// end ; if p2 = game_save_mode then
21429: LD_VAR 0 2
21433: PUSH
21434: LD_INT 102
21436: EQUAL
21437: IFFALSE 21492
// begin if p3 = 1 then
21439: LD_VAR 0 3
21443: PUSH
21444: LD_INT 1
21446: EQUAL
21447: IFFALSE 21459
// globalGameSaveCounter := p4 ;
21449: LD_ADDR_EXP 51
21453: PUSH
21454: LD_VAR 0 4
21458: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21459: LD_VAR 0 3
21463: PUSH
21464: LD_INT 2
21466: EQUAL
21467: PUSH
21468: LD_EXP 51
21472: AND
21473: IFFALSE 21492
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21475: LD_STRING setGameSaveCounter(
21477: PUSH
21478: LD_EXP 51
21482: STR
21483: PUSH
21484: LD_STRING )
21486: STR
21487: PPUSH
21488: CALL_OW 559
// end ; end ;
21492: LD_VAR 0 7
21496: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21497: LD_INT 0
21499: PPUSH
// streamModeActive := false ;
21500: LD_ADDR_EXP 52
21504: PUSH
21505: LD_INT 0
21507: ST_TO_ADDR
// normalCounter := 36 ;
21508: LD_ADDR_EXP 53
21512: PUSH
21513: LD_INT 36
21515: ST_TO_ADDR
// hardcoreCounter := 18 ;
21516: LD_ADDR_EXP 54
21520: PUSH
21521: LD_INT 18
21523: ST_TO_ADDR
// sRocket := false ;
21524: LD_ADDR_EXP 57
21528: PUSH
21529: LD_INT 0
21531: ST_TO_ADDR
// sSpeed := false ;
21532: LD_ADDR_EXP 56
21536: PUSH
21537: LD_INT 0
21539: ST_TO_ADDR
// sEngine := false ;
21540: LD_ADDR_EXP 58
21544: PUSH
21545: LD_INT 0
21547: ST_TO_ADDR
// sSpec := false ;
21548: LD_ADDR_EXP 55
21552: PUSH
21553: LD_INT 0
21555: ST_TO_ADDR
// sLevel := false ;
21556: LD_ADDR_EXP 59
21560: PUSH
21561: LD_INT 0
21563: ST_TO_ADDR
// sArmoury := false ;
21564: LD_ADDR_EXP 60
21568: PUSH
21569: LD_INT 0
21571: ST_TO_ADDR
// sRadar := false ;
21572: LD_ADDR_EXP 61
21576: PUSH
21577: LD_INT 0
21579: ST_TO_ADDR
// sBunker := false ;
21580: LD_ADDR_EXP 62
21584: PUSH
21585: LD_INT 0
21587: ST_TO_ADDR
// sHack := false ;
21588: LD_ADDR_EXP 63
21592: PUSH
21593: LD_INT 0
21595: ST_TO_ADDR
// sFire := false ;
21596: LD_ADDR_EXP 64
21600: PUSH
21601: LD_INT 0
21603: ST_TO_ADDR
// sRefresh := false ;
21604: LD_ADDR_EXP 65
21608: PUSH
21609: LD_INT 0
21611: ST_TO_ADDR
// sExp := false ;
21612: LD_ADDR_EXP 66
21616: PUSH
21617: LD_INT 0
21619: ST_TO_ADDR
// sDepot := false ;
21620: LD_ADDR_EXP 67
21624: PUSH
21625: LD_INT 0
21627: ST_TO_ADDR
// sFlag := false ;
21628: LD_ADDR_EXP 68
21632: PUSH
21633: LD_INT 0
21635: ST_TO_ADDR
// sKamikadze := false ;
21636: LD_ADDR_EXP 76
21640: PUSH
21641: LD_INT 0
21643: ST_TO_ADDR
// sTroll := false ;
21644: LD_ADDR_EXP 77
21648: PUSH
21649: LD_INT 0
21651: ST_TO_ADDR
// sSlow := false ;
21652: LD_ADDR_EXP 78
21656: PUSH
21657: LD_INT 0
21659: ST_TO_ADDR
// sLack := false ;
21660: LD_ADDR_EXP 79
21664: PUSH
21665: LD_INT 0
21667: ST_TO_ADDR
// sTank := false ;
21668: LD_ADDR_EXP 81
21672: PUSH
21673: LD_INT 0
21675: ST_TO_ADDR
// sRemote := false ;
21676: LD_ADDR_EXP 82
21680: PUSH
21681: LD_INT 0
21683: ST_TO_ADDR
// sPowell := false ;
21684: LD_ADDR_EXP 83
21688: PUSH
21689: LD_INT 0
21691: ST_TO_ADDR
// sTeleport := false ;
21692: LD_ADDR_EXP 86
21696: PUSH
21697: LD_INT 0
21699: ST_TO_ADDR
// sOilTower := false ;
21700: LD_ADDR_EXP 88
21704: PUSH
21705: LD_INT 0
21707: ST_TO_ADDR
// sShovel := false ;
21708: LD_ADDR_EXP 89
21712: PUSH
21713: LD_INT 0
21715: ST_TO_ADDR
// sSheik := false ;
21716: LD_ADDR_EXP 90
21720: PUSH
21721: LD_INT 0
21723: ST_TO_ADDR
// sEarthquake := false ;
21724: LD_ADDR_EXP 92
21728: PUSH
21729: LD_INT 0
21731: ST_TO_ADDR
// sAI := false ;
21732: LD_ADDR_EXP 93
21736: PUSH
21737: LD_INT 0
21739: ST_TO_ADDR
// sCargo := false ;
21740: LD_ADDR_EXP 96
21744: PUSH
21745: LD_INT 0
21747: ST_TO_ADDR
// sDLaser := false ;
21748: LD_ADDR_EXP 97
21752: PUSH
21753: LD_INT 0
21755: ST_TO_ADDR
// sExchange := false ;
21756: LD_ADDR_EXP 98
21760: PUSH
21761: LD_INT 0
21763: ST_TO_ADDR
// sFac := false ;
21764: LD_ADDR_EXP 99
21768: PUSH
21769: LD_INT 0
21771: ST_TO_ADDR
// sPower := false ;
21772: LD_ADDR_EXP 100
21776: PUSH
21777: LD_INT 0
21779: ST_TO_ADDR
// sRandom := false ;
21780: LD_ADDR_EXP 101
21784: PUSH
21785: LD_INT 0
21787: ST_TO_ADDR
// sShield := false ;
21788: LD_ADDR_EXP 102
21792: PUSH
21793: LD_INT 0
21795: ST_TO_ADDR
// sTime := false ;
21796: LD_ADDR_EXP 103
21800: PUSH
21801: LD_INT 0
21803: ST_TO_ADDR
// sTools := false ;
21804: LD_ADDR_EXP 104
21808: PUSH
21809: LD_INT 0
21811: ST_TO_ADDR
// sSold := false ;
21812: LD_ADDR_EXP 69
21816: PUSH
21817: LD_INT 0
21819: ST_TO_ADDR
// sDiff := false ;
21820: LD_ADDR_EXP 70
21824: PUSH
21825: LD_INT 0
21827: ST_TO_ADDR
// sFog := false ;
21828: LD_ADDR_EXP 73
21832: PUSH
21833: LD_INT 0
21835: ST_TO_ADDR
// sReset := false ;
21836: LD_ADDR_EXP 74
21840: PUSH
21841: LD_INT 0
21843: ST_TO_ADDR
// sSun := false ;
21844: LD_ADDR_EXP 75
21848: PUSH
21849: LD_INT 0
21851: ST_TO_ADDR
// sTiger := false ;
21852: LD_ADDR_EXP 71
21856: PUSH
21857: LD_INT 0
21859: ST_TO_ADDR
// sBomb := false ;
21860: LD_ADDR_EXP 72
21864: PUSH
21865: LD_INT 0
21867: ST_TO_ADDR
// sWound := false ;
21868: LD_ADDR_EXP 80
21872: PUSH
21873: LD_INT 0
21875: ST_TO_ADDR
// sBetray := false ;
21876: LD_ADDR_EXP 84
21880: PUSH
21881: LD_INT 0
21883: ST_TO_ADDR
// sContamin := false ;
21884: LD_ADDR_EXP 85
21888: PUSH
21889: LD_INT 0
21891: ST_TO_ADDR
// sOil := false ;
21892: LD_ADDR_EXP 87
21896: PUSH
21897: LD_INT 0
21899: ST_TO_ADDR
// sStu := false ;
21900: LD_ADDR_EXP 91
21904: PUSH
21905: LD_INT 0
21907: ST_TO_ADDR
// sBazooka := false ;
21908: LD_ADDR_EXP 94
21912: PUSH
21913: LD_INT 0
21915: ST_TO_ADDR
// sMortar := false ;
21916: LD_ADDR_EXP 95
21920: PUSH
21921: LD_INT 0
21923: ST_TO_ADDR
// sRanger := false ;
21924: LD_ADDR_EXP 105
21928: PUSH
21929: LD_INT 0
21931: ST_TO_ADDR
// sComputer := false ;
21932: LD_ADDR_EXP 106
21936: PUSH
21937: LD_INT 0
21939: ST_TO_ADDR
// s30 := false ;
21940: LD_ADDR_EXP 107
21944: PUSH
21945: LD_INT 0
21947: ST_TO_ADDR
// s60 := false ;
21948: LD_ADDR_EXP 108
21952: PUSH
21953: LD_INT 0
21955: ST_TO_ADDR
// end ;
21956: LD_VAR 0 1
21960: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21961: LD_INT 0
21963: PPUSH
21964: PPUSH
21965: PPUSH
21966: PPUSH
21967: PPUSH
21968: PPUSH
21969: PPUSH
// result := [ ] ;
21970: LD_ADDR_VAR 0 2
21974: PUSH
21975: EMPTY
21976: ST_TO_ADDR
// if campaign_id = 1 then
21977: LD_OWVAR 69
21981: PUSH
21982: LD_INT 1
21984: EQUAL
21985: IFFALSE 25151
// begin case mission_number of 1 :
21987: LD_OWVAR 70
21991: PUSH
21992: LD_INT 1
21994: DOUBLE
21995: EQUAL
21996: IFTRUE 22000
21998: GO 22076
22000: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22001: LD_ADDR_VAR 0 2
22005: PUSH
22006: LD_INT 2
22008: PUSH
22009: LD_INT 4
22011: PUSH
22012: LD_INT 11
22014: PUSH
22015: LD_INT 12
22017: PUSH
22018: LD_INT 15
22020: PUSH
22021: LD_INT 16
22023: PUSH
22024: LD_INT 22
22026: PUSH
22027: LD_INT 23
22029: PUSH
22030: LD_INT 26
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 101
22046: PUSH
22047: LD_INT 102
22049: PUSH
22050: LD_INT 106
22052: PUSH
22053: LD_INT 116
22055: PUSH
22056: LD_INT 117
22058: PUSH
22059: LD_INT 118
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: ST_TO_ADDR
22074: GO 25149
22076: LD_INT 2
22078: DOUBLE
22079: EQUAL
22080: IFTRUE 22084
22082: GO 22168
22084: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22085: LD_ADDR_VAR 0 2
22089: PUSH
22090: LD_INT 2
22092: PUSH
22093: LD_INT 4
22095: PUSH
22096: LD_INT 11
22098: PUSH
22099: LD_INT 12
22101: PUSH
22102: LD_INT 15
22104: PUSH
22105: LD_INT 16
22107: PUSH
22108: LD_INT 22
22110: PUSH
22111: LD_INT 23
22113: PUSH
22114: LD_INT 26
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 101
22130: PUSH
22131: LD_INT 102
22133: PUSH
22134: LD_INT 105
22136: PUSH
22137: LD_INT 106
22139: PUSH
22140: LD_INT 108
22142: PUSH
22143: LD_INT 116
22145: PUSH
22146: LD_INT 117
22148: PUSH
22149: LD_INT 118
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: ST_TO_ADDR
22166: GO 25149
22168: LD_INT 3
22170: DOUBLE
22171: EQUAL
22172: IFTRUE 22176
22174: GO 22264
22176: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22177: LD_ADDR_VAR 0 2
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: LD_INT 4
22187: PUSH
22188: LD_INT 5
22190: PUSH
22191: LD_INT 11
22193: PUSH
22194: LD_INT 12
22196: PUSH
22197: LD_INT 15
22199: PUSH
22200: LD_INT 16
22202: PUSH
22203: LD_INT 22
22205: PUSH
22206: LD_INT 26
22208: PUSH
22209: LD_INT 36
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 101
22226: PUSH
22227: LD_INT 102
22229: PUSH
22230: LD_INT 105
22232: PUSH
22233: LD_INT 106
22235: PUSH
22236: LD_INT 108
22238: PUSH
22239: LD_INT 116
22241: PUSH
22242: LD_INT 117
22244: PUSH
22245: LD_INT 118
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: ST_TO_ADDR
22262: GO 25149
22264: LD_INT 4
22266: DOUBLE
22267: EQUAL
22268: IFTRUE 22272
22270: GO 22368
22272: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22273: LD_ADDR_VAR 0 2
22277: PUSH
22278: LD_INT 2
22280: PUSH
22281: LD_INT 4
22283: PUSH
22284: LD_INT 5
22286: PUSH
22287: LD_INT 8
22289: PUSH
22290: LD_INT 11
22292: PUSH
22293: LD_INT 12
22295: PUSH
22296: LD_INT 15
22298: PUSH
22299: LD_INT 16
22301: PUSH
22302: LD_INT 22
22304: PUSH
22305: LD_INT 23
22307: PUSH
22308: LD_INT 26
22310: PUSH
22311: LD_INT 36
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 101
22330: PUSH
22331: LD_INT 102
22333: PUSH
22334: LD_INT 105
22336: PUSH
22337: LD_INT 106
22339: PUSH
22340: LD_INT 108
22342: PUSH
22343: LD_INT 116
22345: PUSH
22346: LD_INT 117
22348: PUSH
22349: LD_INT 118
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: ST_TO_ADDR
22366: GO 25149
22368: LD_INT 5
22370: DOUBLE
22371: EQUAL
22372: IFTRUE 22376
22374: GO 22488
22376: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22377: LD_ADDR_VAR 0 2
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: LD_INT 4
22387: PUSH
22388: LD_INT 5
22390: PUSH
22391: LD_INT 6
22393: PUSH
22394: LD_INT 8
22396: PUSH
22397: LD_INT 11
22399: PUSH
22400: LD_INT 12
22402: PUSH
22403: LD_INT 15
22405: PUSH
22406: LD_INT 16
22408: PUSH
22409: LD_INT 22
22411: PUSH
22412: LD_INT 23
22414: PUSH
22415: LD_INT 25
22417: PUSH
22418: LD_INT 26
22420: PUSH
22421: LD_INT 36
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 101
22442: PUSH
22443: LD_INT 102
22445: PUSH
22446: LD_INT 105
22448: PUSH
22449: LD_INT 106
22451: PUSH
22452: LD_INT 108
22454: PUSH
22455: LD_INT 109
22457: PUSH
22458: LD_INT 112
22460: PUSH
22461: LD_INT 116
22463: PUSH
22464: LD_INT 117
22466: PUSH
22467: LD_INT 118
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: ST_TO_ADDR
22486: GO 25149
22488: LD_INT 6
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22628
22496: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22497: LD_ADDR_VAR 0 2
22501: PUSH
22502: LD_INT 2
22504: PUSH
22505: LD_INT 4
22507: PUSH
22508: LD_INT 5
22510: PUSH
22511: LD_INT 6
22513: PUSH
22514: LD_INT 8
22516: PUSH
22517: LD_INT 11
22519: PUSH
22520: LD_INT 12
22522: PUSH
22523: LD_INT 15
22525: PUSH
22526: LD_INT 16
22528: PUSH
22529: LD_INT 20
22531: PUSH
22532: LD_INT 21
22534: PUSH
22535: LD_INT 22
22537: PUSH
22538: LD_INT 23
22540: PUSH
22541: LD_INT 25
22543: PUSH
22544: LD_INT 26
22546: PUSH
22547: LD_INT 30
22549: PUSH
22550: LD_INT 31
22552: PUSH
22553: LD_INT 32
22555: PUSH
22556: LD_INT 36
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 101
22582: PUSH
22583: LD_INT 102
22585: PUSH
22586: LD_INT 105
22588: PUSH
22589: LD_INT 106
22591: PUSH
22592: LD_INT 108
22594: PUSH
22595: LD_INT 109
22597: PUSH
22598: LD_INT 112
22600: PUSH
22601: LD_INT 116
22603: PUSH
22604: LD_INT 117
22606: PUSH
22607: LD_INT 118
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: ST_TO_ADDR
22626: GO 25149
22628: LD_INT 7
22630: DOUBLE
22631: EQUAL
22632: IFTRUE 22636
22634: GO 22748
22636: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 2
22644: PUSH
22645: LD_INT 4
22647: PUSH
22648: LD_INT 5
22650: PUSH
22651: LD_INT 7
22653: PUSH
22654: LD_INT 11
22656: PUSH
22657: LD_INT 12
22659: PUSH
22660: LD_INT 15
22662: PUSH
22663: LD_INT 16
22665: PUSH
22666: LD_INT 20
22668: PUSH
22669: LD_INT 21
22671: PUSH
22672: LD_INT 22
22674: PUSH
22675: LD_INT 23
22677: PUSH
22678: LD_INT 25
22680: PUSH
22681: LD_INT 26
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 101
22702: PUSH
22703: LD_INT 102
22705: PUSH
22706: LD_INT 103
22708: PUSH
22709: LD_INT 105
22711: PUSH
22712: LD_INT 106
22714: PUSH
22715: LD_INT 108
22717: PUSH
22718: LD_INT 112
22720: PUSH
22721: LD_INT 116
22723: PUSH
22724: LD_INT 117
22726: PUSH
22727: LD_INT 118
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: ST_TO_ADDR
22746: GO 25149
22748: LD_INT 8
22750: DOUBLE
22751: EQUAL
22752: IFTRUE 22756
22754: GO 22896
22756: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22757: LD_ADDR_VAR 0 2
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: LD_INT 4
22767: PUSH
22768: LD_INT 5
22770: PUSH
22771: LD_INT 6
22773: PUSH
22774: LD_INT 7
22776: PUSH
22777: LD_INT 8
22779: PUSH
22780: LD_INT 11
22782: PUSH
22783: LD_INT 12
22785: PUSH
22786: LD_INT 15
22788: PUSH
22789: LD_INT 16
22791: PUSH
22792: LD_INT 20
22794: PUSH
22795: LD_INT 21
22797: PUSH
22798: LD_INT 22
22800: PUSH
22801: LD_INT 23
22803: PUSH
22804: LD_INT 25
22806: PUSH
22807: LD_INT 26
22809: PUSH
22810: LD_INT 30
22812: PUSH
22813: LD_INT 31
22815: PUSH
22816: LD_INT 32
22818: PUSH
22819: LD_INT 36
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 101
22846: PUSH
22847: LD_INT 102
22849: PUSH
22850: LD_INT 103
22852: PUSH
22853: LD_INT 105
22855: PUSH
22856: LD_INT 106
22858: PUSH
22859: LD_INT 108
22861: PUSH
22862: LD_INT 109
22864: PUSH
22865: LD_INT 112
22867: PUSH
22868: LD_INT 116
22870: PUSH
22871: LD_INT 117
22873: PUSH
22874: LD_INT 118
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: ST_TO_ADDR
22894: GO 25149
22896: LD_INT 9
22898: DOUBLE
22899: EQUAL
22900: IFTRUE 22904
22902: GO 23052
22904: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22905: LD_ADDR_VAR 0 2
22909: PUSH
22910: LD_INT 2
22912: PUSH
22913: LD_INT 4
22915: PUSH
22916: LD_INT 5
22918: PUSH
22919: LD_INT 6
22921: PUSH
22922: LD_INT 7
22924: PUSH
22925: LD_INT 8
22927: PUSH
22928: LD_INT 11
22930: PUSH
22931: LD_INT 12
22933: PUSH
22934: LD_INT 15
22936: PUSH
22937: LD_INT 16
22939: PUSH
22940: LD_INT 20
22942: PUSH
22943: LD_INT 21
22945: PUSH
22946: LD_INT 22
22948: PUSH
22949: LD_INT 23
22951: PUSH
22952: LD_INT 25
22954: PUSH
22955: LD_INT 26
22957: PUSH
22958: LD_INT 28
22960: PUSH
22961: LD_INT 30
22963: PUSH
22964: LD_INT 31
22966: PUSH
22967: LD_INT 32
22969: PUSH
22970: LD_INT 36
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 101
22998: PUSH
22999: LD_INT 102
23001: PUSH
23002: LD_INT 103
23004: PUSH
23005: LD_INT 105
23007: PUSH
23008: LD_INT 106
23010: PUSH
23011: LD_INT 108
23013: PUSH
23014: LD_INT 109
23016: PUSH
23017: LD_INT 112
23019: PUSH
23020: LD_INT 114
23022: PUSH
23023: LD_INT 116
23025: PUSH
23026: LD_INT 117
23028: PUSH
23029: LD_INT 118
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: ST_TO_ADDR
23050: GO 25149
23052: LD_INT 10
23054: DOUBLE
23055: EQUAL
23056: IFTRUE 23060
23058: GO 23256
23060: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23061: LD_ADDR_VAR 0 2
23065: PUSH
23066: LD_INT 2
23068: PUSH
23069: LD_INT 4
23071: PUSH
23072: LD_INT 5
23074: PUSH
23075: LD_INT 6
23077: PUSH
23078: LD_INT 7
23080: PUSH
23081: LD_INT 8
23083: PUSH
23084: LD_INT 9
23086: PUSH
23087: LD_INT 10
23089: PUSH
23090: LD_INT 11
23092: PUSH
23093: LD_INT 12
23095: PUSH
23096: LD_INT 13
23098: PUSH
23099: LD_INT 14
23101: PUSH
23102: LD_INT 15
23104: PUSH
23105: LD_INT 16
23107: PUSH
23108: LD_INT 17
23110: PUSH
23111: LD_INT 18
23113: PUSH
23114: LD_INT 19
23116: PUSH
23117: LD_INT 20
23119: PUSH
23120: LD_INT 21
23122: PUSH
23123: LD_INT 22
23125: PUSH
23126: LD_INT 23
23128: PUSH
23129: LD_INT 24
23131: PUSH
23132: LD_INT 25
23134: PUSH
23135: LD_INT 26
23137: PUSH
23138: LD_INT 28
23140: PUSH
23141: LD_INT 30
23143: PUSH
23144: LD_INT 31
23146: PUSH
23147: LD_INT 32
23149: PUSH
23150: LD_INT 36
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 101
23186: PUSH
23187: LD_INT 102
23189: PUSH
23190: LD_INT 103
23192: PUSH
23193: LD_INT 104
23195: PUSH
23196: LD_INT 105
23198: PUSH
23199: LD_INT 106
23201: PUSH
23202: LD_INT 107
23204: PUSH
23205: LD_INT 108
23207: PUSH
23208: LD_INT 109
23210: PUSH
23211: LD_INT 110
23213: PUSH
23214: LD_INT 111
23216: PUSH
23217: LD_INT 112
23219: PUSH
23220: LD_INT 114
23222: PUSH
23223: LD_INT 116
23225: PUSH
23226: LD_INT 117
23228: PUSH
23229: LD_INT 118
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: ST_TO_ADDR
23254: GO 25149
23256: LD_INT 11
23258: DOUBLE
23259: EQUAL
23260: IFTRUE 23264
23262: GO 23468
23264: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23265: LD_ADDR_VAR 0 2
23269: PUSH
23270: LD_INT 2
23272: PUSH
23273: LD_INT 3
23275: PUSH
23276: LD_INT 4
23278: PUSH
23279: LD_INT 5
23281: PUSH
23282: LD_INT 6
23284: PUSH
23285: LD_INT 7
23287: PUSH
23288: LD_INT 8
23290: PUSH
23291: LD_INT 9
23293: PUSH
23294: LD_INT 10
23296: PUSH
23297: LD_INT 11
23299: PUSH
23300: LD_INT 12
23302: PUSH
23303: LD_INT 13
23305: PUSH
23306: LD_INT 14
23308: PUSH
23309: LD_INT 15
23311: PUSH
23312: LD_INT 16
23314: PUSH
23315: LD_INT 17
23317: PUSH
23318: LD_INT 18
23320: PUSH
23321: LD_INT 19
23323: PUSH
23324: LD_INT 20
23326: PUSH
23327: LD_INT 21
23329: PUSH
23330: LD_INT 22
23332: PUSH
23333: LD_INT 23
23335: PUSH
23336: LD_INT 24
23338: PUSH
23339: LD_INT 25
23341: PUSH
23342: LD_INT 26
23344: PUSH
23345: LD_INT 28
23347: PUSH
23348: LD_INT 30
23350: PUSH
23351: LD_INT 31
23353: PUSH
23354: LD_INT 32
23356: PUSH
23357: LD_INT 34
23359: PUSH
23360: LD_INT 36
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 101
23398: PUSH
23399: LD_INT 102
23401: PUSH
23402: LD_INT 103
23404: PUSH
23405: LD_INT 104
23407: PUSH
23408: LD_INT 105
23410: PUSH
23411: LD_INT 106
23413: PUSH
23414: LD_INT 107
23416: PUSH
23417: LD_INT 108
23419: PUSH
23420: LD_INT 109
23422: PUSH
23423: LD_INT 110
23425: PUSH
23426: LD_INT 111
23428: PUSH
23429: LD_INT 112
23431: PUSH
23432: LD_INT 114
23434: PUSH
23435: LD_INT 116
23437: PUSH
23438: LD_INT 117
23440: PUSH
23441: LD_INT 118
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: ST_TO_ADDR
23466: GO 25149
23468: LD_INT 12
23470: DOUBLE
23471: EQUAL
23472: IFTRUE 23476
23474: GO 23696
23476: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23477: LD_ADDR_VAR 0 2
23481: PUSH
23482: LD_INT 1
23484: PUSH
23485: LD_INT 2
23487: PUSH
23488: LD_INT 3
23490: PUSH
23491: LD_INT 4
23493: PUSH
23494: LD_INT 5
23496: PUSH
23497: LD_INT 6
23499: PUSH
23500: LD_INT 7
23502: PUSH
23503: LD_INT 8
23505: PUSH
23506: LD_INT 9
23508: PUSH
23509: LD_INT 10
23511: PUSH
23512: LD_INT 11
23514: PUSH
23515: LD_INT 12
23517: PUSH
23518: LD_INT 13
23520: PUSH
23521: LD_INT 14
23523: PUSH
23524: LD_INT 15
23526: PUSH
23527: LD_INT 16
23529: PUSH
23530: LD_INT 17
23532: PUSH
23533: LD_INT 18
23535: PUSH
23536: LD_INT 19
23538: PUSH
23539: LD_INT 20
23541: PUSH
23542: LD_INT 21
23544: PUSH
23545: LD_INT 22
23547: PUSH
23548: LD_INT 23
23550: PUSH
23551: LD_INT 24
23553: PUSH
23554: LD_INT 25
23556: PUSH
23557: LD_INT 26
23559: PUSH
23560: LD_INT 27
23562: PUSH
23563: LD_INT 28
23565: PUSH
23566: LD_INT 30
23568: PUSH
23569: LD_INT 31
23571: PUSH
23572: LD_INT 32
23574: PUSH
23575: LD_INT 33
23577: PUSH
23578: LD_INT 34
23580: PUSH
23581: LD_INT 36
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 101
23622: PUSH
23623: LD_INT 102
23625: PUSH
23626: LD_INT 103
23628: PUSH
23629: LD_INT 104
23631: PUSH
23632: LD_INT 105
23634: PUSH
23635: LD_INT 106
23637: PUSH
23638: LD_INT 107
23640: PUSH
23641: LD_INT 108
23643: PUSH
23644: LD_INT 109
23646: PUSH
23647: LD_INT 110
23649: PUSH
23650: LD_INT 111
23652: PUSH
23653: LD_INT 112
23655: PUSH
23656: LD_INT 113
23658: PUSH
23659: LD_INT 114
23661: PUSH
23662: LD_INT 116
23664: PUSH
23665: LD_INT 117
23667: PUSH
23668: LD_INT 118
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: ST_TO_ADDR
23694: GO 25149
23696: LD_INT 13
23698: DOUBLE
23699: EQUAL
23700: IFTRUE 23704
23702: GO 23912
23704: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23705: LD_ADDR_VAR 0 2
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: LD_INT 2
23715: PUSH
23716: LD_INT 3
23718: PUSH
23719: LD_INT 4
23721: PUSH
23722: LD_INT 5
23724: PUSH
23725: LD_INT 8
23727: PUSH
23728: LD_INT 9
23730: PUSH
23731: LD_INT 10
23733: PUSH
23734: LD_INT 11
23736: PUSH
23737: LD_INT 12
23739: PUSH
23740: LD_INT 14
23742: PUSH
23743: LD_INT 15
23745: PUSH
23746: LD_INT 16
23748: PUSH
23749: LD_INT 17
23751: PUSH
23752: LD_INT 18
23754: PUSH
23755: LD_INT 19
23757: PUSH
23758: LD_INT 20
23760: PUSH
23761: LD_INT 21
23763: PUSH
23764: LD_INT 22
23766: PUSH
23767: LD_INT 23
23769: PUSH
23770: LD_INT 24
23772: PUSH
23773: LD_INT 25
23775: PUSH
23776: LD_INT 26
23778: PUSH
23779: LD_INT 27
23781: PUSH
23782: LD_INT 28
23784: PUSH
23785: LD_INT 30
23787: PUSH
23788: LD_INT 31
23790: PUSH
23791: LD_INT 32
23793: PUSH
23794: LD_INT 33
23796: PUSH
23797: LD_INT 34
23799: PUSH
23800: LD_INT 36
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 101
23838: PUSH
23839: LD_INT 102
23841: PUSH
23842: LD_INT 103
23844: PUSH
23845: LD_INT 104
23847: PUSH
23848: LD_INT 105
23850: PUSH
23851: LD_INT 106
23853: PUSH
23854: LD_INT 107
23856: PUSH
23857: LD_INT 108
23859: PUSH
23860: LD_INT 109
23862: PUSH
23863: LD_INT 110
23865: PUSH
23866: LD_INT 111
23868: PUSH
23869: LD_INT 112
23871: PUSH
23872: LD_INT 113
23874: PUSH
23875: LD_INT 114
23877: PUSH
23878: LD_INT 116
23880: PUSH
23881: LD_INT 117
23883: PUSH
23884: LD_INT 118
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: ST_TO_ADDR
23910: GO 25149
23912: LD_INT 14
23914: DOUBLE
23915: EQUAL
23916: IFTRUE 23920
23918: GO 24144
23920: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23921: LD_ADDR_VAR 0 2
23925: PUSH
23926: LD_INT 1
23928: PUSH
23929: LD_INT 2
23931: PUSH
23932: LD_INT 3
23934: PUSH
23935: LD_INT 4
23937: PUSH
23938: LD_INT 5
23940: PUSH
23941: LD_INT 6
23943: PUSH
23944: LD_INT 7
23946: PUSH
23947: LD_INT 8
23949: PUSH
23950: LD_INT 9
23952: PUSH
23953: LD_INT 10
23955: PUSH
23956: LD_INT 11
23958: PUSH
23959: LD_INT 12
23961: PUSH
23962: LD_INT 13
23964: PUSH
23965: LD_INT 14
23967: PUSH
23968: LD_INT 15
23970: PUSH
23971: LD_INT 16
23973: PUSH
23974: LD_INT 17
23976: PUSH
23977: LD_INT 18
23979: PUSH
23980: LD_INT 19
23982: PUSH
23983: LD_INT 20
23985: PUSH
23986: LD_INT 21
23988: PUSH
23989: LD_INT 22
23991: PUSH
23992: LD_INT 23
23994: PUSH
23995: LD_INT 24
23997: PUSH
23998: LD_INT 25
24000: PUSH
24001: LD_INT 26
24003: PUSH
24004: LD_INT 27
24006: PUSH
24007: LD_INT 28
24009: PUSH
24010: LD_INT 29
24012: PUSH
24013: LD_INT 30
24015: PUSH
24016: LD_INT 31
24018: PUSH
24019: LD_INT 32
24021: PUSH
24022: LD_INT 33
24024: PUSH
24025: LD_INT 34
24027: PUSH
24028: LD_INT 36
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 101
24070: PUSH
24071: LD_INT 102
24073: PUSH
24074: LD_INT 103
24076: PUSH
24077: LD_INT 104
24079: PUSH
24080: LD_INT 105
24082: PUSH
24083: LD_INT 106
24085: PUSH
24086: LD_INT 107
24088: PUSH
24089: LD_INT 108
24091: PUSH
24092: LD_INT 109
24094: PUSH
24095: LD_INT 110
24097: PUSH
24098: LD_INT 111
24100: PUSH
24101: LD_INT 112
24103: PUSH
24104: LD_INT 113
24106: PUSH
24107: LD_INT 114
24109: PUSH
24110: LD_INT 116
24112: PUSH
24113: LD_INT 117
24115: PUSH
24116: LD_INT 118
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: ST_TO_ADDR
24142: GO 25149
24144: LD_INT 15
24146: DOUBLE
24147: EQUAL
24148: IFTRUE 24152
24150: GO 24376
24152: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24153: LD_ADDR_VAR 0 2
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: LD_INT 2
24163: PUSH
24164: LD_INT 3
24166: PUSH
24167: LD_INT 4
24169: PUSH
24170: LD_INT 5
24172: PUSH
24173: LD_INT 6
24175: PUSH
24176: LD_INT 7
24178: PUSH
24179: LD_INT 8
24181: PUSH
24182: LD_INT 9
24184: PUSH
24185: LD_INT 10
24187: PUSH
24188: LD_INT 11
24190: PUSH
24191: LD_INT 12
24193: PUSH
24194: LD_INT 13
24196: PUSH
24197: LD_INT 14
24199: PUSH
24200: LD_INT 15
24202: PUSH
24203: LD_INT 16
24205: PUSH
24206: LD_INT 17
24208: PUSH
24209: LD_INT 18
24211: PUSH
24212: LD_INT 19
24214: PUSH
24215: LD_INT 20
24217: PUSH
24218: LD_INT 21
24220: PUSH
24221: LD_INT 22
24223: PUSH
24224: LD_INT 23
24226: PUSH
24227: LD_INT 24
24229: PUSH
24230: LD_INT 25
24232: PUSH
24233: LD_INT 26
24235: PUSH
24236: LD_INT 27
24238: PUSH
24239: LD_INT 28
24241: PUSH
24242: LD_INT 29
24244: PUSH
24245: LD_INT 30
24247: PUSH
24248: LD_INT 31
24250: PUSH
24251: LD_INT 32
24253: PUSH
24254: LD_INT 33
24256: PUSH
24257: LD_INT 34
24259: PUSH
24260: LD_INT 36
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 101
24302: PUSH
24303: LD_INT 102
24305: PUSH
24306: LD_INT 103
24308: PUSH
24309: LD_INT 104
24311: PUSH
24312: LD_INT 105
24314: PUSH
24315: LD_INT 106
24317: PUSH
24318: LD_INT 107
24320: PUSH
24321: LD_INT 108
24323: PUSH
24324: LD_INT 109
24326: PUSH
24327: LD_INT 110
24329: PUSH
24330: LD_INT 111
24332: PUSH
24333: LD_INT 112
24335: PUSH
24336: LD_INT 113
24338: PUSH
24339: LD_INT 114
24341: PUSH
24342: LD_INT 116
24344: PUSH
24345: LD_INT 117
24347: PUSH
24348: LD_INT 118
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: ST_TO_ADDR
24374: GO 25149
24376: LD_INT 16
24378: DOUBLE
24379: EQUAL
24380: IFTRUE 24384
24382: GO 24520
24384: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24385: LD_ADDR_VAR 0 2
24389: PUSH
24390: LD_INT 2
24392: PUSH
24393: LD_INT 4
24395: PUSH
24396: LD_INT 5
24398: PUSH
24399: LD_INT 7
24401: PUSH
24402: LD_INT 11
24404: PUSH
24405: LD_INT 12
24407: PUSH
24408: LD_INT 15
24410: PUSH
24411: LD_INT 16
24413: PUSH
24414: LD_INT 20
24416: PUSH
24417: LD_INT 21
24419: PUSH
24420: LD_INT 22
24422: PUSH
24423: LD_INT 23
24425: PUSH
24426: LD_INT 25
24428: PUSH
24429: LD_INT 26
24431: PUSH
24432: LD_INT 30
24434: PUSH
24435: LD_INT 31
24437: PUSH
24438: LD_INT 32
24440: PUSH
24441: LD_INT 33
24443: PUSH
24444: LD_INT 34
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 101
24470: PUSH
24471: LD_INT 102
24473: PUSH
24474: LD_INT 103
24476: PUSH
24477: LD_INT 106
24479: PUSH
24480: LD_INT 108
24482: PUSH
24483: LD_INT 112
24485: PUSH
24486: LD_INT 113
24488: PUSH
24489: LD_INT 114
24491: PUSH
24492: LD_INT 116
24494: PUSH
24495: LD_INT 117
24497: PUSH
24498: LD_INT 118
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: ST_TO_ADDR
24518: GO 25149
24520: LD_INT 17
24522: DOUBLE
24523: EQUAL
24524: IFTRUE 24528
24526: GO 24752
24528: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24529: LD_ADDR_VAR 0 2
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: LD_INT 2
24539: PUSH
24540: LD_INT 3
24542: PUSH
24543: LD_INT 4
24545: PUSH
24546: LD_INT 5
24548: PUSH
24549: LD_INT 6
24551: PUSH
24552: LD_INT 7
24554: PUSH
24555: LD_INT 8
24557: PUSH
24558: LD_INT 9
24560: PUSH
24561: LD_INT 10
24563: PUSH
24564: LD_INT 11
24566: PUSH
24567: LD_INT 12
24569: PUSH
24570: LD_INT 13
24572: PUSH
24573: LD_INT 14
24575: PUSH
24576: LD_INT 15
24578: PUSH
24579: LD_INT 16
24581: PUSH
24582: LD_INT 17
24584: PUSH
24585: LD_INT 18
24587: PUSH
24588: LD_INT 19
24590: PUSH
24591: LD_INT 20
24593: PUSH
24594: LD_INT 21
24596: PUSH
24597: LD_INT 22
24599: PUSH
24600: LD_INT 23
24602: PUSH
24603: LD_INT 24
24605: PUSH
24606: LD_INT 25
24608: PUSH
24609: LD_INT 26
24611: PUSH
24612: LD_INT 27
24614: PUSH
24615: LD_INT 28
24617: PUSH
24618: LD_INT 29
24620: PUSH
24621: LD_INT 30
24623: PUSH
24624: LD_INT 31
24626: PUSH
24627: LD_INT 32
24629: PUSH
24630: LD_INT 33
24632: PUSH
24633: LD_INT 34
24635: PUSH
24636: LD_INT 36
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 101
24678: PUSH
24679: LD_INT 102
24681: PUSH
24682: LD_INT 103
24684: PUSH
24685: LD_INT 104
24687: PUSH
24688: LD_INT 105
24690: PUSH
24691: LD_INT 106
24693: PUSH
24694: LD_INT 107
24696: PUSH
24697: LD_INT 108
24699: PUSH
24700: LD_INT 109
24702: PUSH
24703: LD_INT 110
24705: PUSH
24706: LD_INT 111
24708: PUSH
24709: LD_INT 112
24711: PUSH
24712: LD_INT 113
24714: PUSH
24715: LD_INT 114
24717: PUSH
24718: LD_INT 116
24720: PUSH
24721: LD_INT 117
24723: PUSH
24724: LD_INT 118
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: ST_TO_ADDR
24750: GO 25149
24752: LD_INT 18
24754: DOUBLE
24755: EQUAL
24756: IFTRUE 24760
24758: GO 24908
24760: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24761: LD_ADDR_VAR 0 2
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: LD_INT 4
24771: PUSH
24772: LD_INT 5
24774: PUSH
24775: LD_INT 7
24777: PUSH
24778: LD_INT 11
24780: PUSH
24781: LD_INT 12
24783: PUSH
24784: LD_INT 15
24786: PUSH
24787: LD_INT 16
24789: PUSH
24790: LD_INT 20
24792: PUSH
24793: LD_INT 21
24795: PUSH
24796: LD_INT 22
24798: PUSH
24799: LD_INT 23
24801: PUSH
24802: LD_INT 25
24804: PUSH
24805: LD_INT 26
24807: PUSH
24808: LD_INT 30
24810: PUSH
24811: LD_INT 31
24813: PUSH
24814: LD_INT 32
24816: PUSH
24817: LD_INT 33
24819: PUSH
24820: LD_INT 34
24822: PUSH
24823: LD_INT 35
24825: PUSH
24826: LD_INT 36
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 101
24854: PUSH
24855: LD_INT 102
24857: PUSH
24858: LD_INT 103
24860: PUSH
24861: LD_INT 106
24863: PUSH
24864: LD_INT 108
24866: PUSH
24867: LD_INT 112
24869: PUSH
24870: LD_INT 113
24872: PUSH
24873: LD_INT 114
24875: PUSH
24876: LD_INT 115
24878: PUSH
24879: LD_INT 116
24881: PUSH
24882: LD_INT 117
24884: PUSH
24885: LD_INT 118
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: ST_TO_ADDR
24906: GO 25149
24908: LD_INT 19
24910: DOUBLE
24911: EQUAL
24912: IFTRUE 24916
24914: GO 25148
24916: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24917: LD_ADDR_VAR 0 2
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: LD_INT 3
24930: PUSH
24931: LD_INT 4
24933: PUSH
24934: LD_INT 5
24936: PUSH
24937: LD_INT 6
24939: PUSH
24940: LD_INT 7
24942: PUSH
24943: LD_INT 8
24945: PUSH
24946: LD_INT 9
24948: PUSH
24949: LD_INT 10
24951: PUSH
24952: LD_INT 11
24954: PUSH
24955: LD_INT 12
24957: PUSH
24958: LD_INT 13
24960: PUSH
24961: LD_INT 14
24963: PUSH
24964: LD_INT 15
24966: PUSH
24967: LD_INT 16
24969: PUSH
24970: LD_INT 17
24972: PUSH
24973: LD_INT 18
24975: PUSH
24976: LD_INT 19
24978: PUSH
24979: LD_INT 20
24981: PUSH
24982: LD_INT 21
24984: PUSH
24985: LD_INT 22
24987: PUSH
24988: LD_INT 23
24990: PUSH
24991: LD_INT 24
24993: PUSH
24994: LD_INT 25
24996: PUSH
24997: LD_INT 26
24999: PUSH
25000: LD_INT 27
25002: PUSH
25003: LD_INT 28
25005: PUSH
25006: LD_INT 29
25008: PUSH
25009: LD_INT 30
25011: PUSH
25012: LD_INT 31
25014: PUSH
25015: LD_INT 32
25017: PUSH
25018: LD_INT 33
25020: PUSH
25021: LD_INT 34
25023: PUSH
25024: LD_INT 35
25026: PUSH
25027: LD_INT 36
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 101
25070: PUSH
25071: LD_INT 102
25073: PUSH
25074: LD_INT 103
25076: PUSH
25077: LD_INT 104
25079: PUSH
25080: LD_INT 105
25082: PUSH
25083: LD_INT 106
25085: PUSH
25086: LD_INT 107
25088: PUSH
25089: LD_INT 108
25091: PUSH
25092: LD_INT 109
25094: PUSH
25095: LD_INT 110
25097: PUSH
25098: LD_INT 111
25100: PUSH
25101: LD_INT 112
25103: PUSH
25104: LD_INT 113
25106: PUSH
25107: LD_INT 114
25109: PUSH
25110: LD_INT 115
25112: PUSH
25113: LD_INT 116
25115: PUSH
25116: LD_INT 117
25118: PUSH
25119: LD_INT 118
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: ST_TO_ADDR
25146: GO 25149
25148: POP
// end else
25149: GO 25380
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25151: LD_ADDR_VAR 0 2
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: LD_INT 2
25161: PUSH
25162: LD_INT 3
25164: PUSH
25165: LD_INT 4
25167: PUSH
25168: LD_INT 5
25170: PUSH
25171: LD_INT 6
25173: PUSH
25174: LD_INT 7
25176: PUSH
25177: LD_INT 8
25179: PUSH
25180: LD_INT 9
25182: PUSH
25183: LD_INT 10
25185: PUSH
25186: LD_INT 11
25188: PUSH
25189: LD_INT 12
25191: PUSH
25192: LD_INT 13
25194: PUSH
25195: LD_INT 14
25197: PUSH
25198: LD_INT 15
25200: PUSH
25201: LD_INT 16
25203: PUSH
25204: LD_INT 17
25206: PUSH
25207: LD_INT 18
25209: PUSH
25210: LD_INT 19
25212: PUSH
25213: LD_INT 20
25215: PUSH
25216: LD_INT 21
25218: PUSH
25219: LD_INT 22
25221: PUSH
25222: LD_INT 23
25224: PUSH
25225: LD_INT 24
25227: PUSH
25228: LD_INT 25
25230: PUSH
25231: LD_INT 26
25233: PUSH
25234: LD_INT 27
25236: PUSH
25237: LD_INT 28
25239: PUSH
25240: LD_INT 29
25242: PUSH
25243: LD_INT 30
25245: PUSH
25246: LD_INT 31
25248: PUSH
25249: LD_INT 32
25251: PUSH
25252: LD_INT 33
25254: PUSH
25255: LD_INT 34
25257: PUSH
25258: LD_INT 35
25260: PUSH
25261: LD_INT 36
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 101
25304: PUSH
25305: LD_INT 102
25307: PUSH
25308: LD_INT 103
25310: PUSH
25311: LD_INT 104
25313: PUSH
25314: LD_INT 105
25316: PUSH
25317: LD_INT 106
25319: PUSH
25320: LD_INT 107
25322: PUSH
25323: LD_INT 108
25325: PUSH
25326: LD_INT 109
25328: PUSH
25329: LD_INT 110
25331: PUSH
25332: LD_INT 111
25334: PUSH
25335: LD_INT 112
25337: PUSH
25338: LD_INT 113
25340: PUSH
25341: LD_INT 114
25343: PUSH
25344: LD_INT 115
25346: PUSH
25347: LD_INT 116
25349: PUSH
25350: LD_INT 117
25352: PUSH
25353: LD_INT 118
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: ST_TO_ADDR
// if result then
25380: LD_VAR 0 2
25384: IFFALSE 26170
// begin normal :=  ;
25386: LD_ADDR_VAR 0 5
25390: PUSH
25391: LD_STRING 
25393: ST_TO_ADDR
// hardcore :=  ;
25394: LD_ADDR_VAR 0 6
25398: PUSH
25399: LD_STRING 
25401: ST_TO_ADDR
// active :=  ;
25402: LD_ADDR_VAR 0 7
25406: PUSH
25407: LD_STRING 
25409: ST_TO_ADDR
// for i = 1 to normalCounter do
25410: LD_ADDR_VAR 0 8
25414: PUSH
25415: DOUBLE
25416: LD_INT 1
25418: DEC
25419: ST_TO_ADDR
25420: LD_EXP 53
25424: PUSH
25425: FOR_TO
25426: IFFALSE 25527
// begin tmp := 0 ;
25428: LD_ADDR_VAR 0 3
25432: PUSH
25433: LD_STRING 0
25435: ST_TO_ADDR
// if result [ 1 ] then
25436: LD_VAR 0 2
25440: PUSH
25441: LD_INT 1
25443: ARRAY
25444: IFFALSE 25509
// if result [ 1 ] [ 1 ] = i then
25446: LD_VAR 0 2
25450: PUSH
25451: LD_INT 1
25453: ARRAY
25454: PUSH
25455: LD_INT 1
25457: ARRAY
25458: PUSH
25459: LD_VAR 0 8
25463: EQUAL
25464: IFFALSE 25509
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25466: LD_ADDR_VAR 0 2
25470: PUSH
25471: LD_VAR 0 2
25475: PPUSH
25476: LD_INT 1
25478: PPUSH
25479: LD_VAR 0 2
25483: PUSH
25484: LD_INT 1
25486: ARRAY
25487: PPUSH
25488: LD_INT 1
25490: PPUSH
25491: CALL_OW 3
25495: PPUSH
25496: CALL_OW 1
25500: ST_TO_ADDR
// tmp := 1 ;
25501: LD_ADDR_VAR 0 3
25505: PUSH
25506: LD_STRING 1
25508: ST_TO_ADDR
// end ; normal := normal & tmp ;
25509: LD_ADDR_VAR 0 5
25513: PUSH
25514: LD_VAR 0 5
25518: PUSH
25519: LD_VAR 0 3
25523: STR
25524: ST_TO_ADDR
// end ;
25525: GO 25425
25527: POP
25528: POP
// for i = 1 to hardcoreCounter do
25529: LD_ADDR_VAR 0 8
25533: PUSH
25534: DOUBLE
25535: LD_INT 1
25537: DEC
25538: ST_TO_ADDR
25539: LD_EXP 54
25543: PUSH
25544: FOR_TO
25545: IFFALSE 25650
// begin tmp := 0 ;
25547: LD_ADDR_VAR 0 3
25551: PUSH
25552: LD_STRING 0
25554: ST_TO_ADDR
// if result [ 2 ] then
25555: LD_VAR 0 2
25559: PUSH
25560: LD_INT 2
25562: ARRAY
25563: IFFALSE 25632
// if result [ 2 ] [ 1 ] = 100 + i then
25565: LD_VAR 0 2
25569: PUSH
25570: LD_INT 2
25572: ARRAY
25573: PUSH
25574: LD_INT 1
25576: ARRAY
25577: PUSH
25578: LD_INT 100
25580: PUSH
25581: LD_VAR 0 8
25585: PLUS
25586: EQUAL
25587: IFFALSE 25632
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25589: LD_ADDR_VAR 0 2
25593: PUSH
25594: LD_VAR 0 2
25598: PPUSH
25599: LD_INT 2
25601: PPUSH
25602: LD_VAR 0 2
25606: PUSH
25607: LD_INT 2
25609: ARRAY
25610: PPUSH
25611: LD_INT 1
25613: PPUSH
25614: CALL_OW 3
25618: PPUSH
25619: CALL_OW 1
25623: ST_TO_ADDR
// tmp := 1 ;
25624: LD_ADDR_VAR 0 3
25628: PUSH
25629: LD_STRING 1
25631: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25632: LD_ADDR_VAR 0 6
25636: PUSH
25637: LD_VAR 0 6
25641: PUSH
25642: LD_VAR 0 3
25646: STR
25647: ST_TO_ADDR
// end ;
25648: GO 25544
25650: POP
25651: POP
// if isGameLoad then
25652: LD_VAR 0 1
25656: IFFALSE 26131
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25658: LD_ADDR_VAR 0 4
25662: PUSH
25663: LD_EXP 57
25667: PUSH
25668: LD_EXP 56
25672: PUSH
25673: LD_EXP 58
25677: PUSH
25678: LD_EXP 55
25682: PUSH
25683: LD_EXP 59
25687: PUSH
25688: LD_EXP 60
25692: PUSH
25693: LD_EXP 61
25697: PUSH
25698: LD_EXP 62
25702: PUSH
25703: LD_EXP 63
25707: PUSH
25708: LD_EXP 64
25712: PUSH
25713: LD_EXP 65
25717: PUSH
25718: LD_EXP 66
25722: PUSH
25723: LD_EXP 67
25727: PUSH
25728: LD_EXP 68
25732: PUSH
25733: LD_EXP 76
25737: PUSH
25738: LD_EXP 77
25742: PUSH
25743: LD_EXP 78
25747: PUSH
25748: LD_EXP 79
25752: PUSH
25753: LD_EXP 81
25757: PUSH
25758: LD_EXP 82
25762: PUSH
25763: LD_EXP 83
25767: PUSH
25768: LD_EXP 86
25772: PUSH
25773: LD_EXP 88
25777: PUSH
25778: LD_EXP 89
25782: PUSH
25783: LD_EXP 90
25787: PUSH
25788: LD_EXP 92
25792: PUSH
25793: LD_EXP 93
25797: PUSH
25798: LD_EXP 96
25802: PUSH
25803: LD_EXP 97
25807: PUSH
25808: LD_EXP 98
25812: PUSH
25813: LD_EXP 99
25817: PUSH
25818: LD_EXP 100
25822: PUSH
25823: LD_EXP 101
25827: PUSH
25828: LD_EXP 102
25832: PUSH
25833: LD_EXP 103
25837: PUSH
25838: LD_EXP 104
25842: PUSH
25843: LD_EXP 69
25847: PUSH
25848: LD_EXP 70
25852: PUSH
25853: LD_EXP 73
25857: PUSH
25858: LD_EXP 74
25862: PUSH
25863: LD_EXP 75
25867: PUSH
25868: LD_EXP 71
25872: PUSH
25873: LD_EXP 72
25877: PUSH
25878: LD_EXP 80
25882: PUSH
25883: LD_EXP 84
25887: PUSH
25888: LD_EXP 85
25892: PUSH
25893: LD_EXP 87
25897: PUSH
25898: LD_EXP 91
25902: PUSH
25903: LD_EXP 94
25907: PUSH
25908: LD_EXP 95
25912: PUSH
25913: LD_EXP 105
25917: PUSH
25918: LD_EXP 106
25922: PUSH
25923: LD_EXP 107
25927: PUSH
25928: LD_EXP 108
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: ST_TO_ADDR
// tmp :=  ;
25989: LD_ADDR_VAR 0 3
25993: PUSH
25994: LD_STRING 
25996: ST_TO_ADDR
// for i = 1 to normalCounter do
25997: LD_ADDR_VAR 0 8
26001: PUSH
26002: DOUBLE
26003: LD_INT 1
26005: DEC
26006: ST_TO_ADDR
26007: LD_EXP 53
26011: PUSH
26012: FOR_TO
26013: IFFALSE 26049
// begin if flags [ i ] then
26015: LD_VAR 0 4
26019: PUSH
26020: LD_VAR 0 8
26024: ARRAY
26025: IFFALSE 26047
// tmp := tmp & i & ; ;
26027: LD_ADDR_VAR 0 3
26031: PUSH
26032: LD_VAR 0 3
26036: PUSH
26037: LD_VAR 0 8
26041: STR
26042: PUSH
26043: LD_STRING ;
26045: STR
26046: ST_TO_ADDR
// end ;
26047: GO 26012
26049: POP
26050: POP
// for i = 1 to hardcoreCounter do
26051: LD_ADDR_VAR 0 8
26055: PUSH
26056: DOUBLE
26057: LD_INT 1
26059: DEC
26060: ST_TO_ADDR
26061: LD_EXP 54
26065: PUSH
26066: FOR_TO
26067: IFFALSE 26113
// begin if flags [ normalCounter + i ] then
26069: LD_VAR 0 4
26073: PUSH
26074: LD_EXP 53
26078: PUSH
26079: LD_VAR 0 8
26083: PLUS
26084: ARRAY
26085: IFFALSE 26111
// tmp := tmp & ( 100 + i ) & ; ;
26087: LD_ADDR_VAR 0 3
26091: PUSH
26092: LD_VAR 0 3
26096: PUSH
26097: LD_INT 100
26099: PUSH
26100: LD_VAR 0 8
26104: PLUS
26105: STR
26106: PUSH
26107: LD_STRING ;
26109: STR
26110: ST_TO_ADDR
// end ;
26111: GO 26066
26113: POP
26114: POP
// if tmp then
26115: LD_VAR 0 3
26119: IFFALSE 26131
// active := tmp ;
26121: LD_ADDR_VAR 0 7
26125: PUSH
26126: LD_VAR 0 3
26130: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26131: LD_STRING getStreamItemsFromMission("
26133: PUSH
26134: LD_VAR 0 5
26138: STR
26139: PUSH
26140: LD_STRING ","
26142: STR
26143: PUSH
26144: LD_VAR 0 6
26148: STR
26149: PUSH
26150: LD_STRING ","
26152: STR
26153: PUSH
26154: LD_VAR 0 7
26158: STR
26159: PUSH
26160: LD_STRING ")
26162: STR
26163: PPUSH
26164: CALL_OW 559
// end else
26168: GO 26177
// ToLua ( getStreamItemsFromMission("","","") ) ;
26170: LD_STRING getStreamItemsFromMission("","","")
26172: PPUSH
26173: CALL_OW 559
// end ;
26177: LD_VAR 0 2
26181: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26182: LD_EXP 52
26186: PUSH
26187: LD_EXP 57
26191: AND
26192: IFFALSE 26316
26194: GO 26196
26196: DISABLE
26197: LD_INT 0
26199: PPUSH
26200: PPUSH
// begin enable ;
26201: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26202: LD_ADDR_VAR 0 2
26206: PUSH
26207: LD_INT 22
26209: PUSH
26210: LD_OWVAR 2
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: LD_INT 34
26224: PUSH
26225: LD_INT 7
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 34
26234: PUSH
26235: LD_INT 45
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 34
26244: PUSH
26245: LD_INT 28
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 34
26254: PUSH
26255: LD_INT 47
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PPUSH
26273: CALL_OW 69
26277: ST_TO_ADDR
// if not tmp then
26278: LD_VAR 0 2
26282: NOT
26283: IFFALSE 26287
// exit ;
26285: GO 26316
// for i in tmp do
26287: LD_ADDR_VAR 0 1
26291: PUSH
26292: LD_VAR 0 2
26296: PUSH
26297: FOR_IN
26298: IFFALSE 26314
// begin SetLives ( i , 0 ) ;
26300: LD_VAR 0 1
26304: PPUSH
26305: LD_INT 0
26307: PPUSH
26308: CALL_OW 234
// end ;
26312: GO 26297
26314: POP
26315: POP
// end ;
26316: PPOPN 2
26318: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26319: LD_EXP 52
26323: PUSH
26324: LD_EXP 58
26328: AND
26329: IFFALSE 26413
26331: GO 26333
26333: DISABLE
26334: LD_INT 0
26336: PPUSH
26337: PPUSH
// begin enable ;
26338: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26339: LD_ADDR_VAR 0 2
26343: PUSH
26344: LD_INT 22
26346: PUSH
26347: LD_OWVAR 2
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 32
26358: PUSH
26359: LD_INT 3
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PPUSH
26370: CALL_OW 69
26374: ST_TO_ADDR
// if not tmp then
26375: LD_VAR 0 2
26379: NOT
26380: IFFALSE 26384
// exit ;
26382: GO 26413
// for i in tmp do
26384: LD_ADDR_VAR 0 1
26388: PUSH
26389: LD_VAR 0 2
26393: PUSH
26394: FOR_IN
26395: IFFALSE 26411
// begin SetLives ( i , 0 ) ;
26397: LD_VAR 0 1
26401: PPUSH
26402: LD_INT 0
26404: PPUSH
26405: CALL_OW 234
// end ;
26409: GO 26394
26411: POP
26412: POP
// end ;
26413: PPOPN 2
26415: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26416: LD_EXP 52
26420: PUSH
26421: LD_EXP 55
26425: AND
26426: IFFALSE 26519
26428: GO 26430
26430: DISABLE
26431: LD_INT 0
26433: PPUSH
// begin enable ;
26434: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26435: LD_ADDR_VAR 0 1
26439: PUSH
26440: LD_INT 22
26442: PUSH
26443: LD_OWVAR 2
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 2
26454: PUSH
26455: LD_INT 25
26457: PUSH
26458: LD_INT 5
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 25
26467: PUSH
26468: LD_INT 9
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 25
26477: PUSH
26478: LD_INT 8
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PPUSH
26495: CALL_OW 69
26499: PUSH
26500: FOR_IN
26501: IFFALSE 26517
// begin SetClass ( i , 1 ) ;
26503: LD_VAR 0 1
26507: PPUSH
26508: LD_INT 1
26510: PPUSH
26511: CALL_OW 336
// end ;
26515: GO 26500
26517: POP
26518: POP
// end ;
26519: PPOPN 1
26521: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26522: LD_EXP 52
26526: PUSH
26527: LD_EXP 56
26531: AND
26532: PUSH
26533: LD_OWVAR 65
26537: PUSH
26538: LD_INT 7
26540: LESS
26541: AND
26542: IFFALSE 26556
26544: GO 26546
26546: DISABLE
// begin enable ;
26547: ENABLE
// game_speed := 7 ;
26548: LD_ADDR_OWVAR 65
26552: PUSH
26553: LD_INT 7
26555: ST_TO_ADDR
// end ;
26556: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26557: LD_EXP 52
26561: PUSH
26562: LD_EXP 59
26566: AND
26567: IFFALSE 26769
26569: GO 26571
26571: DISABLE
26572: LD_INT 0
26574: PPUSH
26575: PPUSH
26576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26577: LD_ADDR_VAR 0 3
26581: PUSH
26582: LD_INT 81
26584: PUSH
26585: LD_OWVAR 2
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 21
26596: PUSH
26597: LD_INT 1
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PPUSH
26608: CALL_OW 69
26612: ST_TO_ADDR
// if not tmp then
26613: LD_VAR 0 3
26617: NOT
26618: IFFALSE 26622
// exit ;
26620: GO 26769
// if tmp > 5 then
26622: LD_VAR 0 3
26626: PUSH
26627: LD_INT 5
26629: GREATER
26630: IFFALSE 26642
// k := 5 else
26632: LD_ADDR_VAR 0 2
26636: PUSH
26637: LD_INT 5
26639: ST_TO_ADDR
26640: GO 26652
// k := tmp ;
26642: LD_ADDR_VAR 0 2
26646: PUSH
26647: LD_VAR 0 3
26651: ST_TO_ADDR
// for i := 1 to k do
26652: LD_ADDR_VAR 0 1
26656: PUSH
26657: DOUBLE
26658: LD_INT 1
26660: DEC
26661: ST_TO_ADDR
26662: LD_VAR 0 2
26666: PUSH
26667: FOR_TO
26668: IFFALSE 26767
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26670: LD_VAR 0 3
26674: PUSH
26675: LD_VAR 0 1
26679: ARRAY
26680: PPUSH
26681: LD_VAR 0 1
26685: PUSH
26686: LD_INT 4
26688: MOD
26689: PUSH
26690: LD_INT 1
26692: PLUS
26693: PPUSH
26694: CALL_OW 259
26698: PUSH
26699: LD_INT 10
26701: LESS
26702: IFFALSE 26765
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26704: LD_VAR 0 3
26708: PUSH
26709: LD_VAR 0 1
26713: ARRAY
26714: PPUSH
26715: LD_VAR 0 1
26719: PUSH
26720: LD_INT 4
26722: MOD
26723: PUSH
26724: LD_INT 1
26726: PLUS
26727: PPUSH
26728: LD_VAR 0 3
26732: PUSH
26733: LD_VAR 0 1
26737: ARRAY
26738: PPUSH
26739: LD_VAR 0 1
26743: PUSH
26744: LD_INT 4
26746: MOD
26747: PUSH
26748: LD_INT 1
26750: PLUS
26751: PPUSH
26752: CALL_OW 259
26756: PUSH
26757: LD_INT 1
26759: PLUS
26760: PPUSH
26761: CALL_OW 237
26765: GO 26667
26767: POP
26768: POP
// end ;
26769: PPOPN 3
26771: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26772: LD_EXP 52
26776: PUSH
26777: LD_EXP 60
26781: AND
26782: IFFALSE 26802
26784: GO 26786
26786: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26787: LD_INT 4
26789: PPUSH
26790: LD_OWVAR 2
26794: PPUSH
26795: LD_INT 0
26797: PPUSH
26798: CALL_OW 324
26802: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26803: LD_EXP 52
26807: PUSH
26808: LD_EXP 89
26812: AND
26813: IFFALSE 26833
26815: GO 26817
26817: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26818: LD_INT 19
26820: PPUSH
26821: LD_OWVAR 2
26825: PPUSH
26826: LD_INT 0
26828: PPUSH
26829: CALL_OW 324
26833: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26834: LD_EXP 52
26838: PUSH
26839: LD_EXP 61
26843: AND
26844: IFFALSE 26946
26846: GO 26848
26848: DISABLE
26849: LD_INT 0
26851: PPUSH
26852: PPUSH
// begin enable ;
26853: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26854: LD_ADDR_VAR 0 2
26858: PUSH
26859: LD_INT 22
26861: PUSH
26862: LD_OWVAR 2
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 2
26873: PUSH
26874: LD_INT 34
26876: PUSH
26877: LD_INT 11
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 34
26886: PUSH
26887: LD_INT 30
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: LIST
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PPUSH
26903: CALL_OW 69
26907: ST_TO_ADDR
// if not tmp then
26908: LD_VAR 0 2
26912: NOT
26913: IFFALSE 26917
// exit ;
26915: GO 26946
// for i in tmp do
26917: LD_ADDR_VAR 0 1
26921: PUSH
26922: LD_VAR 0 2
26926: PUSH
26927: FOR_IN
26928: IFFALSE 26944
// begin SetLives ( i , 0 ) ;
26930: LD_VAR 0 1
26934: PPUSH
26935: LD_INT 0
26937: PPUSH
26938: CALL_OW 234
// end ;
26942: GO 26927
26944: POP
26945: POP
// end ;
26946: PPOPN 2
26948: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26949: LD_EXP 52
26953: PUSH
26954: LD_EXP 62
26958: AND
26959: IFFALSE 26979
26961: GO 26963
26963: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26964: LD_INT 32
26966: PPUSH
26967: LD_OWVAR 2
26971: PPUSH
26972: LD_INT 0
26974: PPUSH
26975: CALL_OW 324
26979: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26980: LD_EXP 52
26984: PUSH
26985: LD_EXP 63
26989: AND
26990: IFFALSE 27171
26992: GO 26994
26994: DISABLE
26995: LD_INT 0
26997: PPUSH
26998: PPUSH
26999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27000: LD_ADDR_VAR 0 2
27004: PUSH
27005: LD_INT 22
27007: PUSH
27008: LD_OWVAR 2
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 33
27019: PUSH
27020: LD_INT 3
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PPUSH
27031: CALL_OW 69
27035: ST_TO_ADDR
// if not tmp then
27036: LD_VAR 0 2
27040: NOT
27041: IFFALSE 27045
// exit ;
27043: GO 27171
// side := 0 ;
27045: LD_ADDR_VAR 0 3
27049: PUSH
27050: LD_INT 0
27052: ST_TO_ADDR
// for i := 1 to 8 do
27053: LD_ADDR_VAR 0 1
27057: PUSH
27058: DOUBLE
27059: LD_INT 1
27061: DEC
27062: ST_TO_ADDR
27063: LD_INT 8
27065: PUSH
27066: FOR_TO
27067: IFFALSE 27115
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27069: LD_OWVAR 2
27073: PUSH
27074: LD_VAR 0 1
27078: NONEQUAL
27079: PUSH
27080: LD_OWVAR 2
27084: PPUSH
27085: LD_VAR 0 1
27089: PPUSH
27090: CALL_OW 81
27094: PUSH
27095: LD_INT 2
27097: EQUAL
27098: AND
27099: IFFALSE 27113
// begin side := i ;
27101: LD_ADDR_VAR 0 3
27105: PUSH
27106: LD_VAR 0 1
27110: ST_TO_ADDR
// break ;
27111: GO 27115
// end ;
27113: GO 27066
27115: POP
27116: POP
// if not side then
27117: LD_VAR 0 3
27121: NOT
27122: IFFALSE 27126
// exit ;
27124: GO 27171
// for i := 1 to tmp do
27126: LD_ADDR_VAR 0 1
27130: PUSH
27131: DOUBLE
27132: LD_INT 1
27134: DEC
27135: ST_TO_ADDR
27136: LD_VAR 0 2
27140: PUSH
27141: FOR_TO
27142: IFFALSE 27169
// if Prob ( 60 ) then
27144: LD_INT 60
27146: PPUSH
27147: CALL_OW 13
27151: IFFALSE 27167
// SetSide ( i , side ) ;
27153: LD_VAR 0 1
27157: PPUSH
27158: LD_VAR 0 3
27162: PPUSH
27163: CALL_OW 235
27167: GO 27141
27169: POP
27170: POP
// end ;
27171: PPOPN 3
27173: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27174: LD_EXP 52
27178: PUSH
27179: LD_EXP 65
27183: AND
27184: IFFALSE 27303
27186: GO 27188
27188: DISABLE
27189: LD_INT 0
27191: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27192: LD_ADDR_VAR 0 1
27196: PUSH
27197: LD_INT 22
27199: PUSH
27200: LD_OWVAR 2
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 21
27211: PUSH
27212: LD_INT 1
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 3
27221: PUSH
27222: LD_INT 23
27224: PUSH
27225: LD_INT 0
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: PPUSH
27241: CALL_OW 69
27245: PUSH
27246: FOR_IN
27247: IFFALSE 27301
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27249: LD_VAR 0 1
27253: PPUSH
27254: CALL_OW 257
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: LD_INT 2
27264: PUSH
27265: LD_INT 3
27267: PUSH
27268: LD_INT 4
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: IN
27277: IFFALSE 27299
// SetClass ( un , rand ( 1 , 4 ) ) ;
27279: LD_VAR 0 1
27283: PPUSH
27284: LD_INT 1
27286: PPUSH
27287: LD_INT 4
27289: PPUSH
27290: CALL_OW 12
27294: PPUSH
27295: CALL_OW 336
27299: GO 27246
27301: POP
27302: POP
// end ;
27303: PPOPN 1
27305: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27306: LD_EXP 52
27310: PUSH
27311: LD_EXP 64
27315: AND
27316: IFFALSE 27395
27318: GO 27320
27320: DISABLE
27321: LD_INT 0
27323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27324: LD_ADDR_VAR 0 1
27328: PUSH
27329: LD_INT 22
27331: PUSH
27332: LD_OWVAR 2
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 21
27343: PUSH
27344: LD_INT 3
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PPUSH
27355: CALL_OW 69
27359: ST_TO_ADDR
// if not tmp then
27360: LD_VAR 0 1
27364: NOT
27365: IFFALSE 27369
// exit ;
27367: GO 27395
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27369: LD_VAR 0 1
27373: PUSH
27374: LD_INT 1
27376: PPUSH
27377: LD_VAR 0 1
27381: PPUSH
27382: CALL_OW 12
27386: ARRAY
27387: PPUSH
27388: LD_INT 100
27390: PPUSH
27391: CALL_OW 234
// end ;
27395: PPOPN 1
27397: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27398: LD_EXP 52
27402: PUSH
27403: LD_EXP 66
27407: AND
27408: IFFALSE 27506
27410: GO 27412
27412: DISABLE
27413: LD_INT 0
27415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27416: LD_ADDR_VAR 0 1
27420: PUSH
27421: LD_INT 22
27423: PUSH
27424: LD_OWVAR 2
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 21
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PPUSH
27447: CALL_OW 69
27451: ST_TO_ADDR
// if not tmp then
27452: LD_VAR 0 1
27456: NOT
27457: IFFALSE 27461
// exit ;
27459: GO 27506
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27461: LD_VAR 0 1
27465: PUSH
27466: LD_INT 1
27468: PPUSH
27469: LD_VAR 0 1
27473: PPUSH
27474: CALL_OW 12
27478: ARRAY
27479: PPUSH
27480: LD_INT 1
27482: PPUSH
27483: LD_INT 4
27485: PPUSH
27486: CALL_OW 12
27490: PPUSH
27491: LD_INT 3000
27493: PPUSH
27494: LD_INT 9000
27496: PPUSH
27497: CALL_OW 12
27501: PPUSH
27502: CALL_OW 492
// end ;
27506: PPOPN 1
27508: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27509: LD_EXP 52
27513: PUSH
27514: LD_EXP 67
27518: AND
27519: IFFALSE 27539
27521: GO 27523
27523: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27524: LD_INT 1
27526: PPUSH
27527: LD_OWVAR 2
27531: PPUSH
27532: LD_INT 0
27534: PPUSH
27535: CALL_OW 324
27539: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27540: LD_EXP 52
27544: PUSH
27545: LD_EXP 68
27549: AND
27550: IFFALSE 27633
27552: GO 27554
27554: DISABLE
27555: LD_INT 0
27557: PPUSH
27558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27559: LD_ADDR_VAR 0 2
27563: PUSH
27564: LD_INT 22
27566: PUSH
27567: LD_OWVAR 2
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 21
27578: PUSH
27579: LD_INT 3
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PPUSH
27590: CALL_OW 69
27594: ST_TO_ADDR
// if not tmp then
27595: LD_VAR 0 2
27599: NOT
27600: IFFALSE 27604
// exit ;
27602: GO 27633
// for i in tmp do
27604: LD_ADDR_VAR 0 1
27608: PUSH
27609: LD_VAR 0 2
27613: PUSH
27614: FOR_IN
27615: IFFALSE 27631
// SetBLevel ( i , 10 ) ;
27617: LD_VAR 0 1
27621: PPUSH
27622: LD_INT 10
27624: PPUSH
27625: CALL_OW 241
27629: GO 27614
27631: POP
27632: POP
// end ;
27633: PPOPN 2
27635: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27636: LD_EXP 52
27640: PUSH
27641: LD_EXP 69
27645: AND
27646: IFFALSE 27757
27648: GO 27650
27650: DISABLE
27651: LD_INT 0
27653: PPUSH
27654: PPUSH
27655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27656: LD_ADDR_VAR 0 3
27660: PUSH
27661: LD_INT 22
27663: PUSH
27664: LD_OWVAR 2
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 25
27675: PUSH
27676: LD_INT 1
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PPUSH
27687: CALL_OW 69
27691: ST_TO_ADDR
// if not tmp then
27692: LD_VAR 0 3
27696: NOT
27697: IFFALSE 27701
// exit ;
27699: GO 27757
// un := tmp [ rand ( 1 , tmp ) ] ;
27701: LD_ADDR_VAR 0 2
27705: PUSH
27706: LD_VAR 0 3
27710: PUSH
27711: LD_INT 1
27713: PPUSH
27714: LD_VAR 0 3
27718: PPUSH
27719: CALL_OW 12
27723: ARRAY
27724: ST_TO_ADDR
// if Crawls ( un ) then
27725: LD_VAR 0 2
27729: PPUSH
27730: CALL_OW 318
27734: IFFALSE 27745
// ComWalk ( un ) ;
27736: LD_VAR 0 2
27740: PPUSH
27741: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27745: LD_VAR 0 2
27749: PPUSH
27750: LD_INT 5
27752: PPUSH
27753: CALL_OW 336
// end ;
27757: PPOPN 3
27759: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27760: LD_EXP 52
27764: PUSH
27765: LD_EXP 70
27769: AND
27770: PUSH
27771: LD_OWVAR 67
27775: PUSH
27776: LD_INT 4
27778: LESS
27779: AND
27780: IFFALSE 27799
27782: GO 27784
27784: DISABLE
// begin Difficulty := Difficulty + 1 ;
27785: LD_ADDR_OWVAR 67
27789: PUSH
27790: LD_OWVAR 67
27794: PUSH
27795: LD_INT 1
27797: PLUS
27798: ST_TO_ADDR
// end ;
27799: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27800: LD_EXP 52
27804: PUSH
27805: LD_EXP 71
27809: AND
27810: IFFALSE 27913
27812: GO 27814
27814: DISABLE
27815: LD_INT 0
27817: PPUSH
// begin for i := 1 to 5 do
27818: LD_ADDR_VAR 0 1
27822: PUSH
27823: DOUBLE
27824: LD_INT 1
27826: DEC
27827: ST_TO_ADDR
27828: LD_INT 5
27830: PUSH
27831: FOR_TO
27832: IFFALSE 27911
// begin uc_nation := nation_nature ;
27834: LD_ADDR_OWVAR 21
27838: PUSH
27839: LD_INT 0
27841: ST_TO_ADDR
// uc_side := 0 ;
27842: LD_ADDR_OWVAR 20
27846: PUSH
27847: LD_INT 0
27849: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27850: LD_ADDR_OWVAR 29
27854: PUSH
27855: LD_INT 12
27857: PUSH
27858: LD_INT 12
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: ST_TO_ADDR
// hc_agressivity := 20 ;
27865: LD_ADDR_OWVAR 35
27869: PUSH
27870: LD_INT 20
27872: ST_TO_ADDR
// hc_class := class_tiger ;
27873: LD_ADDR_OWVAR 28
27877: PUSH
27878: LD_INT 14
27880: ST_TO_ADDR
// hc_gallery :=  ;
27881: LD_ADDR_OWVAR 33
27885: PUSH
27886: LD_STRING 
27888: ST_TO_ADDR
// hc_name :=  ;
27889: LD_ADDR_OWVAR 26
27893: PUSH
27894: LD_STRING 
27896: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27897: CALL_OW 44
27901: PPUSH
27902: LD_INT 0
27904: PPUSH
27905: CALL_OW 51
// end ;
27909: GO 27831
27911: POP
27912: POP
// end ;
27913: PPOPN 1
27915: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27916: LD_EXP 52
27920: PUSH
27921: LD_EXP 72
27925: AND
27926: IFFALSE 27935
27928: GO 27930
27930: DISABLE
// StreamSibBomb ;
27931: CALL 27936 0 0
27935: END
// export function StreamSibBomb ; var i , x , y ; begin
27936: LD_INT 0
27938: PPUSH
27939: PPUSH
27940: PPUSH
27941: PPUSH
// result := false ;
27942: LD_ADDR_VAR 0 1
27946: PUSH
27947: LD_INT 0
27949: ST_TO_ADDR
// for i := 1 to 16 do
27950: LD_ADDR_VAR 0 2
27954: PUSH
27955: DOUBLE
27956: LD_INT 1
27958: DEC
27959: ST_TO_ADDR
27960: LD_INT 16
27962: PUSH
27963: FOR_TO
27964: IFFALSE 28163
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27966: LD_ADDR_VAR 0 3
27970: PUSH
27971: LD_INT 10
27973: PUSH
27974: LD_INT 20
27976: PUSH
27977: LD_INT 30
27979: PUSH
27980: LD_INT 40
27982: PUSH
27983: LD_INT 50
27985: PUSH
27986: LD_INT 60
27988: PUSH
27989: LD_INT 70
27991: PUSH
27992: LD_INT 80
27994: PUSH
27995: LD_INT 90
27997: PUSH
27998: LD_INT 100
28000: PUSH
28001: LD_INT 110
28003: PUSH
28004: LD_INT 120
28006: PUSH
28007: LD_INT 130
28009: PUSH
28010: LD_INT 140
28012: PUSH
28013: LD_INT 150
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: PPUSH
28036: LD_INT 15
28038: PPUSH
28039: CALL_OW 12
28043: ARRAY
28044: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28045: LD_ADDR_VAR 0 4
28049: PUSH
28050: LD_INT 10
28052: PUSH
28053: LD_INT 20
28055: PUSH
28056: LD_INT 30
28058: PUSH
28059: LD_INT 40
28061: PUSH
28062: LD_INT 50
28064: PUSH
28065: LD_INT 60
28067: PUSH
28068: LD_INT 70
28070: PUSH
28071: LD_INT 80
28073: PUSH
28074: LD_INT 90
28076: PUSH
28077: LD_INT 100
28079: PUSH
28080: LD_INT 110
28082: PUSH
28083: LD_INT 120
28085: PUSH
28086: LD_INT 130
28088: PUSH
28089: LD_INT 140
28091: PUSH
28092: LD_INT 150
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: PPUSH
28115: LD_INT 15
28117: PPUSH
28118: CALL_OW 12
28122: ARRAY
28123: ST_TO_ADDR
// if ValidHex ( x , y ) then
28124: LD_VAR 0 3
28128: PPUSH
28129: LD_VAR 0 4
28133: PPUSH
28134: CALL_OW 488
28138: IFFALSE 28161
// begin result := [ x , y ] ;
28140: LD_ADDR_VAR 0 1
28144: PUSH
28145: LD_VAR 0 3
28149: PUSH
28150: LD_VAR 0 4
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: ST_TO_ADDR
// break ;
28159: GO 28163
// end ; end ;
28161: GO 27963
28163: POP
28164: POP
// if result then
28165: LD_VAR 0 1
28169: IFFALSE 28229
// begin ToLua ( playSibBomb() ) ;
28171: LD_STRING playSibBomb()
28173: PPUSH
28174: CALL_OW 559
// wait ( 0 0$14 ) ;
28178: LD_INT 490
28180: PPUSH
28181: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28185: LD_VAR 0 1
28189: PUSH
28190: LD_INT 1
28192: ARRAY
28193: PPUSH
28194: LD_VAR 0 1
28198: PUSH
28199: LD_INT 2
28201: ARRAY
28202: PPUSH
28203: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28207: LD_VAR 0 1
28211: PUSH
28212: LD_INT 1
28214: ARRAY
28215: PPUSH
28216: LD_VAR 0 1
28220: PUSH
28221: LD_INT 2
28223: ARRAY
28224: PPUSH
28225: CALL_OW 429
// end ; end ;
28229: LD_VAR 0 1
28233: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28234: LD_EXP 52
28238: PUSH
28239: LD_EXP 74
28243: AND
28244: IFFALSE 28256
28246: GO 28248
28248: DISABLE
// YouLost (  ) ;
28249: LD_STRING 
28251: PPUSH
28252: CALL_OW 104
28256: END
// every 0 0$1 trigger StreamModeActive and sFog do
28257: LD_EXP 52
28261: PUSH
28262: LD_EXP 73
28266: AND
28267: IFFALSE 28281
28269: GO 28271
28271: DISABLE
// FogOff ( your_side ) ;
28272: LD_OWVAR 2
28276: PPUSH
28277: CALL_OW 344
28281: END
// every 0 0$1 trigger StreamModeActive and sSun do
28282: LD_EXP 52
28286: PUSH
28287: LD_EXP 75
28291: AND
28292: IFFALSE 28320
28294: GO 28296
28296: DISABLE
// begin solar_recharge_percent := 0 ;
28297: LD_ADDR_OWVAR 79
28301: PUSH
28302: LD_INT 0
28304: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28305: LD_INT 10500
28307: PPUSH
28308: CALL_OW 67
// solar_recharge_percent := 100 ;
28312: LD_ADDR_OWVAR 79
28316: PUSH
28317: LD_INT 100
28319: ST_TO_ADDR
// end ;
28320: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28321: LD_EXP 52
28325: PUSH
28326: LD_EXP 76
28330: AND
28331: IFFALSE 28570
28333: GO 28335
28335: DISABLE
28336: LD_INT 0
28338: PPUSH
28339: PPUSH
28340: PPUSH
// begin tmp := [ ] ;
28341: LD_ADDR_VAR 0 3
28345: PUSH
28346: EMPTY
28347: ST_TO_ADDR
// for i := 1 to 6 do
28348: LD_ADDR_VAR 0 1
28352: PUSH
28353: DOUBLE
28354: LD_INT 1
28356: DEC
28357: ST_TO_ADDR
28358: LD_INT 6
28360: PUSH
28361: FOR_TO
28362: IFFALSE 28467
// begin uc_nation := nation_nature ;
28364: LD_ADDR_OWVAR 21
28368: PUSH
28369: LD_INT 0
28371: ST_TO_ADDR
// uc_side := 0 ;
28372: LD_ADDR_OWVAR 20
28376: PUSH
28377: LD_INT 0
28379: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28380: LD_ADDR_OWVAR 29
28384: PUSH
28385: LD_INT 12
28387: PUSH
28388: LD_INT 12
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: ST_TO_ADDR
// hc_agressivity := 20 ;
28395: LD_ADDR_OWVAR 35
28399: PUSH
28400: LD_INT 20
28402: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28403: LD_ADDR_OWVAR 28
28407: PUSH
28408: LD_INT 17
28410: ST_TO_ADDR
// hc_gallery :=  ;
28411: LD_ADDR_OWVAR 33
28415: PUSH
28416: LD_STRING 
28418: ST_TO_ADDR
// hc_name :=  ;
28419: LD_ADDR_OWVAR 26
28423: PUSH
28424: LD_STRING 
28426: ST_TO_ADDR
// un := CreateHuman ;
28427: LD_ADDR_VAR 0 2
28431: PUSH
28432: CALL_OW 44
28436: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28437: LD_VAR 0 2
28441: PPUSH
28442: LD_INT 1
28444: PPUSH
28445: CALL_OW 51
// tmp := tmp ^ un ;
28449: LD_ADDR_VAR 0 3
28453: PUSH
28454: LD_VAR 0 3
28458: PUSH
28459: LD_VAR 0 2
28463: ADD
28464: ST_TO_ADDR
// end ;
28465: GO 28361
28467: POP
28468: POP
// repeat wait ( 0 0$1 ) ;
28469: LD_INT 35
28471: PPUSH
28472: CALL_OW 67
// for un in tmp do
28476: LD_ADDR_VAR 0 2
28480: PUSH
28481: LD_VAR 0 3
28485: PUSH
28486: FOR_IN
28487: IFFALSE 28561
// begin if IsDead ( un ) then
28489: LD_VAR 0 2
28493: PPUSH
28494: CALL_OW 301
28498: IFFALSE 28518
// begin tmp := tmp diff un ;
28500: LD_ADDR_VAR 0 3
28504: PUSH
28505: LD_VAR 0 3
28509: PUSH
28510: LD_VAR 0 2
28514: DIFF
28515: ST_TO_ADDR
// continue ;
28516: GO 28486
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28518: LD_VAR 0 2
28522: PPUSH
28523: LD_INT 3
28525: PUSH
28526: LD_INT 22
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PPUSH
28540: CALL_OW 69
28544: PPUSH
28545: LD_VAR 0 2
28549: PPUSH
28550: CALL_OW 74
28554: PPUSH
28555: CALL_OW 115
// end ;
28559: GO 28486
28561: POP
28562: POP
// until not tmp ;
28563: LD_VAR 0 3
28567: NOT
28568: IFFALSE 28469
// end ;
28570: PPOPN 3
28572: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28573: LD_EXP 52
28577: PUSH
28578: LD_EXP 77
28582: AND
28583: IFFALSE 28637
28585: GO 28587
28587: DISABLE
// begin ToLua ( displayTroll(); ) ;
28588: LD_STRING displayTroll();
28590: PPUSH
28591: CALL_OW 559
// wait ( 3 3$00 ) ;
28595: LD_INT 6300
28597: PPUSH
28598: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28602: LD_STRING hideTroll();
28604: PPUSH
28605: CALL_OW 559
// wait ( 1 1$00 ) ;
28609: LD_INT 2100
28611: PPUSH
28612: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28616: LD_STRING displayTroll();
28618: PPUSH
28619: CALL_OW 559
// wait ( 1 1$00 ) ;
28623: LD_INT 2100
28625: PPUSH
28626: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28630: LD_STRING hideTroll();
28632: PPUSH
28633: CALL_OW 559
// end ;
28637: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28638: LD_EXP 52
28642: PUSH
28643: LD_EXP 78
28647: AND
28648: IFFALSE 28711
28650: GO 28652
28652: DISABLE
28653: LD_INT 0
28655: PPUSH
// begin p := 0 ;
28656: LD_ADDR_VAR 0 1
28660: PUSH
28661: LD_INT 0
28663: ST_TO_ADDR
// repeat game_speed := 1 ;
28664: LD_ADDR_OWVAR 65
28668: PUSH
28669: LD_INT 1
28671: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28672: LD_INT 35
28674: PPUSH
28675: CALL_OW 67
// p := p + 1 ;
28679: LD_ADDR_VAR 0 1
28683: PUSH
28684: LD_VAR 0 1
28688: PUSH
28689: LD_INT 1
28691: PLUS
28692: ST_TO_ADDR
// until p >= 60 ;
28693: LD_VAR 0 1
28697: PUSH
28698: LD_INT 60
28700: GREATEREQUAL
28701: IFFALSE 28664
// game_speed := 4 ;
28703: LD_ADDR_OWVAR 65
28707: PUSH
28708: LD_INT 4
28710: ST_TO_ADDR
// end ;
28711: PPOPN 1
28713: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28714: LD_EXP 52
28718: PUSH
28719: LD_EXP 79
28723: AND
28724: IFFALSE 28870
28726: GO 28728
28728: DISABLE
28729: LD_INT 0
28731: PPUSH
28732: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28733: LD_ADDR_VAR 0 1
28737: PUSH
28738: LD_INT 22
28740: PUSH
28741: LD_OWVAR 2
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: LD_INT 30
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 30
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PPUSH
28782: CALL_OW 69
28786: ST_TO_ADDR
// if not depot then
28787: LD_VAR 0 1
28791: NOT
28792: IFFALSE 28796
// exit ;
28794: GO 28870
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28796: LD_ADDR_VAR 0 2
28800: PUSH
28801: LD_VAR 0 1
28805: PUSH
28806: LD_INT 1
28808: PPUSH
28809: LD_VAR 0 1
28813: PPUSH
28814: CALL_OW 12
28818: ARRAY
28819: PPUSH
28820: CALL_OW 274
28824: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28825: LD_VAR 0 2
28829: PPUSH
28830: LD_INT 1
28832: PPUSH
28833: LD_INT 0
28835: PPUSH
28836: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28840: LD_VAR 0 2
28844: PPUSH
28845: LD_INT 2
28847: PPUSH
28848: LD_INT 0
28850: PPUSH
28851: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28855: LD_VAR 0 2
28859: PPUSH
28860: LD_INT 3
28862: PPUSH
28863: LD_INT 0
28865: PPUSH
28866: CALL_OW 277
// end ;
28870: PPOPN 2
28872: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28873: LD_EXP 52
28877: PUSH
28878: LD_EXP 80
28882: AND
28883: IFFALSE 28980
28885: GO 28887
28887: DISABLE
28888: LD_INT 0
28890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28891: LD_ADDR_VAR 0 1
28895: PUSH
28896: LD_INT 22
28898: PUSH
28899: LD_OWVAR 2
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 21
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 3
28920: PUSH
28921: LD_INT 23
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: LIST
28939: PPUSH
28940: CALL_OW 69
28944: ST_TO_ADDR
// if not tmp then
28945: LD_VAR 0 1
28949: NOT
28950: IFFALSE 28954
// exit ;
28952: GO 28980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28954: LD_VAR 0 1
28958: PUSH
28959: LD_INT 1
28961: PPUSH
28962: LD_VAR 0 1
28966: PPUSH
28967: CALL_OW 12
28971: ARRAY
28972: PPUSH
28973: LD_INT 200
28975: PPUSH
28976: CALL_OW 234
// end ;
28980: PPOPN 1
28982: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28983: LD_EXP 52
28987: PUSH
28988: LD_EXP 81
28992: AND
28993: IFFALSE 29072
28995: GO 28997
28997: DISABLE
28998: LD_INT 0
29000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29001: LD_ADDR_VAR 0 1
29005: PUSH
29006: LD_INT 22
29008: PUSH
29009: LD_OWVAR 2
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 21
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PPUSH
29032: CALL_OW 69
29036: ST_TO_ADDR
// if not tmp then
29037: LD_VAR 0 1
29041: NOT
29042: IFFALSE 29046
// exit ;
29044: GO 29072
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29046: LD_VAR 0 1
29050: PUSH
29051: LD_INT 1
29053: PPUSH
29054: LD_VAR 0 1
29058: PPUSH
29059: CALL_OW 12
29063: ARRAY
29064: PPUSH
29065: LD_INT 60
29067: PPUSH
29068: CALL_OW 234
// end ;
29072: PPOPN 1
29074: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29075: LD_EXP 52
29079: PUSH
29080: LD_EXP 82
29084: AND
29085: IFFALSE 29184
29087: GO 29089
29089: DISABLE
29090: LD_INT 0
29092: PPUSH
29093: PPUSH
// begin enable ;
29094: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29095: LD_ADDR_VAR 0 1
29099: PUSH
29100: LD_INT 22
29102: PUSH
29103: LD_OWVAR 2
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 61
29114: PUSH
29115: EMPTY
29116: LIST
29117: PUSH
29118: LD_INT 33
29120: PUSH
29121: LD_INT 2
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: LIST
29132: PPUSH
29133: CALL_OW 69
29137: ST_TO_ADDR
// if not tmp then
29138: LD_VAR 0 1
29142: NOT
29143: IFFALSE 29147
// exit ;
29145: GO 29184
// for i in tmp do
29147: LD_ADDR_VAR 0 2
29151: PUSH
29152: LD_VAR 0 1
29156: PUSH
29157: FOR_IN
29158: IFFALSE 29182
// if IsControledBy ( i ) then
29160: LD_VAR 0 2
29164: PPUSH
29165: CALL_OW 312
29169: IFFALSE 29180
// ComUnlink ( i ) ;
29171: LD_VAR 0 2
29175: PPUSH
29176: CALL_OW 136
29180: GO 29157
29182: POP
29183: POP
// end ;
29184: PPOPN 2
29186: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29187: LD_EXP 52
29191: PUSH
29192: LD_EXP 83
29196: AND
29197: IFFALSE 29337
29199: GO 29201
29201: DISABLE
29202: LD_INT 0
29204: PPUSH
29205: PPUSH
// begin ToLua ( displayPowell(); ) ;
29206: LD_STRING displayPowell();
29208: PPUSH
29209: CALL_OW 559
// uc_side := 0 ;
29213: LD_ADDR_OWVAR 20
29217: PUSH
29218: LD_INT 0
29220: ST_TO_ADDR
// uc_nation := 2 ;
29221: LD_ADDR_OWVAR 21
29225: PUSH
29226: LD_INT 2
29228: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29229: LD_ADDR_OWVAR 37
29233: PUSH
29234: LD_INT 14
29236: ST_TO_ADDR
// vc_engine := engine_siberite ;
29237: LD_ADDR_OWVAR 39
29241: PUSH
29242: LD_INT 3
29244: ST_TO_ADDR
// vc_control := control_apeman ;
29245: LD_ADDR_OWVAR 38
29249: PUSH
29250: LD_INT 5
29252: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29253: LD_ADDR_OWVAR 40
29257: PUSH
29258: LD_INT 29
29260: ST_TO_ADDR
// un := CreateVehicle ;
29261: LD_ADDR_VAR 0 2
29265: PUSH
29266: CALL_OW 45
29270: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29271: LD_VAR 0 2
29275: PPUSH
29276: LD_INT 1
29278: PPUSH
29279: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29283: LD_INT 35
29285: PPUSH
29286: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29290: LD_VAR 0 2
29294: PPUSH
29295: LD_INT 22
29297: PUSH
29298: LD_OWVAR 2
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PPUSH
29307: CALL_OW 69
29311: PPUSH
29312: LD_VAR 0 2
29316: PPUSH
29317: CALL_OW 74
29321: PPUSH
29322: CALL_OW 115
// until IsDead ( un ) ;
29326: LD_VAR 0 2
29330: PPUSH
29331: CALL_OW 301
29335: IFFALSE 29283
// end ;
29337: PPOPN 2
29339: END
// every 0 0$1 trigger StreamModeActive and sStu do
29340: LD_EXP 52
29344: PUSH
29345: LD_EXP 91
29349: AND
29350: IFFALSE 29366
29352: GO 29354
29354: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29355: LD_STRING displayStucuk();
29357: PPUSH
29358: CALL_OW 559
// ResetFog ;
29362: CALL_OW 335
// end ;
29366: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29367: LD_EXP 52
29371: PUSH
29372: LD_EXP 84
29376: AND
29377: IFFALSE 29518
29379: GO 29381
29381: DISABLE
29382: LD_INT 0
29384: PPUSH
29385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29386: LD_ADDR_VAR 0 2
29390: PUSH
29391: LD_INT 22
29393: PUSH
29394: LD_OWVAR 2
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 21
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PPUSH
29417: CALL_OW 69
29421: ST_TO_ADDR
// if not tmp then
29422: LD_VAR 0 2
29426: NOT
29427: IFFALSE 29431
// exit ;
29429: GO 29518
// un := tmp [ rand ( 1 , tmp ) ] ;
29431: LD_ADDR_VAR 0 1
29435: PUSH
29436: LD_VAR 0 2
29440: PUSH
29441: LD_INT 1
29443: PPUSH
29444: LD_VAR 0 2
29448: PPUSH
29449: CALL_OW 12
29453: ARRAY
29454: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29455: LD_VAR 0 1
29459: PPUSH
29460: LD_INT 0
29462: PPUSH
29463: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29467: LD_VAR 0 1
29471: PPUSH
29472: LD_OWVAR 3
29476: PUSH
29477: LD_VAR 0 1
29481: DIFF
29482: PPUSH
29483: LD_VAR 0 1
29487: PPUSH
29488: CALL_OW 74
29492: PPUSH
29493: CALL_OW 115
// wait ( 0 0$20 ) ;
29497: LD_INT 700
29499: PPUSH
29500: CALL_OW 67
// SetSide ( un , your_side ) ;
29504: LD_VAR 0 1
29508: PPUSH
29509: LD_OWVAR 2
29513: PPUSH
29514: CALL_OW 235
// end ;
29518: PPOPN 2
29520: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29521: LD_EXP 52
29525: PUSH
29526: LD_EXP 85
29530: AND
29531: IFFALSE 29637
29533: GO 29535
29535: DISABLE
29536: LD_INT 0
29538: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29539: LD_ADDR_VAR 0 1
29543: PUSH
29544: LD_INT 22
29546: PUSH
29547: LD_OWVAR 2
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 2
29558: PUSH
29559: LD_INT 30
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 30
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PPUSH
29588: CALL_OW 69
29592: ST_TO_ADDR
// if not depot then
29593: LD_VAR 0 1
29597: NOT
29598: IFFALSE 29602
// exit ;
29600: GO 29637
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29602: LD_VAR 0 1
29606: PUSH
29607: LD_INT 1
29609: ARRAY
29610: PPUSH
29611: CALL_OW 250
29615: PPUSH
29616: LD_VAR 0 1
29620: PUSH
29621: LD_INT 1
29623: ARRAY
29624: PPUSH
29625: CALL_OW 251
29629: PPUSH
29630: LD_INT 70
29632: PPUSH
29633: CALL_OW 495
// end ;
29637: PPOPN 1
29639: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29640: LD_EXP 52
29644: PUSH
29645: LD_EXP 86
29649: AND
29650: IFFALSE 29861
29652: GO 29654
29654: DISABLE
29655: LD_INT 0
29657: PPUSH
29658: PPUSH
29659: PPUSH
29660: PPUSH
29661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29662: LD_ADDR_VAR 0 5
29666: PUSH
29667: LD_INT 22
29669: PUSH
29670: LD_OWVAR 2
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 21
29681: PUSH
29682: LD_INT 1
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PPUSH
29693: CALL_OW 69
29697: ST_TO_ADDR
// if not tmp then
29698: LD_VAR 0 5
29702: NOT
29703: IFFALSE 29707
// exit ;
29705: GO 29861
// for i in tmp do
29707: LD_ADDR_VAR 0 1
29711: PUSH
29712: LD_VAR 0 5
29716: PUSH
29717: FOR_IN
29718: IFFALSE 29859
// begin d := rand ( 0 , 5 ) ;
29720: LD_ADDR_VAR 0 4
29724: PUSH
29725: LD_INT 0
29727: PPUSH
29728: LD_INT 5
29730: PPUSH
29731: CALL_OW 12
29735: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29736: LD_ADDR_VAR 0 2
29740: PUSH
29741: LD_VAR 0 1
29745: PPUSH
29746: CALL_OW 250
29750: PPUSH
29751: LD_VAR 0 4
29755: PPUSH
29756: LD_INT 3
29758: PPUSH
29759: LD_INT 12
29761: PPUSH
29762: CALL_OW 12
29766: PPUSH
29767: CALL_OW 272
29771: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29772: LD_ADDR_VAR 0 3
29776: PUSH
29777: LD_VAR 0 1
29781: PPUSH
29782: CALL_OW 251
29786: PPUSH
29787: LD_VAR 0 4
29791: PPUSH
29792: LD_INT 3
29794: PPUSH
29795: LD_INT 12
29797: PPUSH
29798: CALL_OW 12
29802: PPUSH
29803: CALL_OW 273
29807: ST_TO_ADDR
// if ValidHex ( x , y ) then
29808: LD_VAR 0 2
29812: PPUSH
29813: LD_VAR 0 3
29817: PPUSH
29818: CALL_OW 488
29822: IFFALSE 29857
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29824: LD_VAR 0 1
29828: PPUSH
29829: LD_VAR 0 2
29833: PPUSH
29834: LD_VAR 0 3
29838: PPUSH
29839: LD_INT 3
29841: PPUSH
29842: LD_INT 6
29844: PPUSH
29845: CALL_OW 12
29849: PPUSH
29850: LD_INT 1
29852: PPUSH
29853: CALL_OW 483
// end ;
29857: GO 29717
29859: POP
29860: POP
// end ;
29861: PPOPN 5
29863: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29864: LD_EXP 52
29868: PUSH
29869: LD_EXP 87
29873: AND
29874: IFFALSE 29968
29876: GO 29878
29878: DISABLE
29879: LD_INT 0
29881: PPUSH
29882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29883: LD_ADDR_VAR 0 2
29887: PUSH
29888: LD_INT 22
29890: PUSH
29891: LD_OWVAR 2
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 32
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 21
29912: PUSH
29913: LD_INT 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: PPUSH
29925: CALL_OW 69
29929: ST_TO_ADDR
// if not tmp then
29930: LD_VAR 0 2
29934: NOT
29935: IFFALSE 29939
// exit ;
29937: GO 29968
// for i in tmp do
29939: LD_ADDR_VAR 0 1
29943: PUSH
29944: LD_VAR 0 2
29948: PUSH
29949: FOR_IN
29950: IFFALSE 29966
// SetFuel ( i , 0 ) ;
29952: LD_VAR 0 1
29956: PPUSH
29957: LD_INT 0
29959: PPUSH
29960: CALL_OW 240
29964: GO 29949
29966: POP
29967: POP
// end ;
29968: PPOPN 2
29970: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29971: LD_EXP 52
29975: PUSH
29976: LD_EXP 88
29980: AND
29981: IFFALSE 30047
29983: GO 29985
29985: DISABLE
29986: LD_INT 0
29988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29989: LD_ADDR_VAR 0 1
29993: PUSH
29994: LD_INT 22
29996: PUSH
29997: LD_OWVAR 2
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 30
30008: PUSH
30009: LD_INT 29
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PPUSH
30020: CALL_OW 69
30024: ST_TO_ADDR
// if not tmp then
30025: LD_VAR 0 1
30029: NOT
30030: IFFALSE 30034
// exit ;
30032: GO 30047
// DestroyUnit ( tmp [ 1 ] ) ;
30034: LD_VAR 0 1
30038: PUSH
30039: LD_INT 1
30041: ARRAY
30042: PPUSH
30043: CALL_OW 65
// end ;
30047: PPOPN 1
30049: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30050: LD_EXP 52
30054: PUSH
30055: LD_EXP 90
30059: AND
30060: IFFALSE 30189
30062: GO 30064
30064: DISABLE
30065: LD_INT 0
30067: PPUSH
// begin uc_side := 0 ;
30068: LD_ADDR_OWVAR 20
30072: PUSH
30073: LD_INT 0
30075: ST_TO_ADDR
// uc_nation := nation_arabian ;
30076: LD_ADDR_OWVAR 21
30080: PUSH
30081: LD_INT 2
30083: ST_TO_ADDR
// hc_gallery :=  ;
30084: LD_ADDR_OWVAR 33
30088: PUSH
30089: LD_STRING 
30091: ST_TO_ADDR
// hc_name :=  ;
30092: LD_ADDR_OWVAR 26
30096: PUSH
30097: LD_STRING 
30099: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30100: LD_INT 1
30102: PPUSH
30103: LD_INT 11
30105: PPUSH
30106: LD_INT 10
30108: PPUSH
30109: CALL_OW 380
// un := CreateHuman ;
30113: LD_ADDR_VAR 0 1
30117: PUSH
30118: CALL_OW 44
30122: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30123: LD_VAR 0 1
30127: PPUSH
30128: LD_INT 1
30130: PPUSH
30131: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30135: LD_INT 35
30137: PPUSH
30138: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30142: LD_VAR 0 1
30146: PPUSH
30147: LD_INT 22
30149: PUSH
30150: LD_OWVAR 2
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PPUSH
30159: CALL_OW 69
30163: PPUSH
30164: LD_VAR 0 1
30168: PPUSH
30169: CALL_OW 74
30173: PPUSH
30174: CALL_OW 115
// until IsDead ( un ) ;
30178: LD_VAR 0 1
30182: PPUSH
30183: CALL_OW 301
30187: IFFALSE 30135
// end ;
30189: PPOPN 1
30191: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30192: LD_EXP 52
30196: PUSH
30197: LD_EXP 92
30201: AND
30202: IFFALSE 30214
30204: GO 30206
30206: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30207: LD_STRING earthquake(getX(game), 0, 32)
30209: PPUSH
30210: CALL_OW 559
30214: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30215: LD_EXP 52
30219: PUSH
30220: LD_EXP 93
30224: AND
30225: IFFALSE 30316
30227: GO 30229
30229: DISABLE
30230: LD_INT 0
30232: PPUSH
// begin enable ;
30233: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30234: LD_ADDR_VAR 0 1
30238: PUSH
30239: LD_INT 22
30241: PUSH
30242: LD_OWVAR 2
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 21
30253: PUSH
30254: LD_INT 2
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 33
30263: PUSH
30264: LD_INT 3
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: LIST
30275: PPUSH
30276: CALL_OW 69
30280: ST_TO_ADDR
// if not tmp then
30281: LD_VAR 0 1
30285: NOT
30286: IFFALSE 30290
// exit ;
30288: GO 30316
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30290: LD_VAR 0 1
30294: PUSH
30295: LD_INT 1
30297: PPUSH
30298: LD_VAR 0 1
30302: PPUSH
30303: CALL_OW 12
30307: ARRAY
30308: PPUSH
30309: LD_INT 1
30311: PPUSH
30312: CALL_OW 234
// end ;
30316: PPOPN 1
30318: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30319: LD_EXP 52
30323: PUSH
30324: LD_EXP 94
30328: AND
30329: IFFALSE 30470
30331: GO 30333
30333: DISABLE
30334: LD_INT 0
30336: PPUSH
30337: PPUSH
30338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30339: LD_ADDR_VAR 0 3
30343: PUSH
30344: LD_INT 22
30346: PUSH
30347: LD_OWVAR 2
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 25
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PPUSH
30370: CALL_OW 69
30374: ST_TO_ADDR
// if not tmp then
30375: LD_VAR 0 3
30379: NOT
30380: IFFALSE 30384
// exit ;
30382: GO 30470
// un := tmp [ rand ( 1 , tmp ) ] ;
30384: LD_ADDR_VAR 0 2
30388: PUSH
30389: LD_VAR 0 3
30393: PUSH
30394: LD_INT 1
30396: PPUSH
30397: LD_VAR 0 3
30401: PPUSH
30402: CALL_OW 12
30406: ARRAY
30407: ST_TO_ADDR
// if Crawls ( un ) then
30408: LD_VAR 0 2
30412: PPUSH
30413: CALL_OW 318
30417: IFFALSE 30428
// ComWalk ( un ) ;
30419: LD_VAR 0 2
30423: PPUSH
30424: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30428: LD_VAR 0 2
30432: PPUSH
30433: LD_INT 9
30435: PPUSH
30436: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30440: LD_INT 28
30442: PPUSH
30443: LD_OWVAR 2
30447: PPUSH
30448: LD_INT 2
30450: PPUSH
30451: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30455: LD_INT 29
30457: PPUSH
30458: LD_OWVAR 2
30462: PPUSH
30463: LD_INT 2
30465: PPUSH
30466: CALL_OW 322
// end ;
30470: PPOPN 3
30472: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30473: LD_EXP 52
30477: PUSH
30478: LD_EXP 95
30482: AND
30483: IFFALSE 30594
30485: GO 30487
30487: DISABLE
30488: LD_INT 0
30490: PPUSH
30491: PPUSH
30492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30493: LD_ADDR_VAR 0 3
30497: PUSH
30498: LD_INT 22
30500: PUSH
30501: LD_OWVAR 2
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 25
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PPUSH
30524: CALL_OW 69
30528: ST_TO_ADDR
// if not tmp then
30529: LD_VAR 0 3
30533: NOT
30534: IFFALSE 30538
// exit ;
30536: GO 30594
// un := tmp [ rand ( 1 , tmp ) ] ;
30538: LD_ADDR_VAR 0 2
30542: PUSH
30543: LD_VAR 0 3
30547: PUSH
30548: LD_INT 1
30550: PPUSH
30551: LD_VAR 0 3
30555: PPUSH
30556: CALL_OW 12
30560: ARRAY
30561: ST_TO_ADDR
// if Crawls ( un ) then
30562: LD_VAR 0 2
30566: PPUSH
30567: CALL_OW 318
30571: IFFALSE 30582
// ComWalk ( un ) ;
30573: LD_VAR 0 2
30577: PPUSH
30578: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30582: LD_VAR 0 2
30586: PPUSH
30587: LD_INT 8
30589: PPUSH
30590: CALL_OW 336
// end ;
30594: PPOPN 3
30596: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30597: LD_EXP 52
30601: PUSH
30602: LD_EXP 96
30606: AND
30607: IFFALSE 30751
30609: GO 30611
30611: DISABLE
30612: LD_INT 0
30614: PPUSH
30615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30616: LD_ADDR_VAR 0 2
30620: PUSH
30621: LD_INT 22
30623: PUSH
30624: LD_OWVAR 2
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 21
30635: PUSH
30636: LD_INT 2
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 2
30645: PUSH
30646: LD_INT 34
30648: PUSH
30649: LD_INT 12
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 34
30658: PUSH
30659: LD_INT 51
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 34
30668: PUSH
30669: LD_INT 32
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: PPUSH
30687: CALL_OW 69
30691: ST_TO_ADDR
// if not tmp then
30692: LD_VAR 0 2
30696: NOT
30697: IFFALSE 30701
// exit ;
30699: GO 30751
// for i in tmp do
30701: LD_ADDR_VAR 0 1
30705: PUSH
30706: LD_VAR 0 2
30710: PUSH
30711: FOR_IN
30712: IFFALSE 30749
// if GetCargo ( i , mat_artifact ) = 0 then
30714: LD_VAR 0 1
30718: PPUSH
30719: LD_INT 4
30721: PPUSH
30722: CALL_OW 289
30726: PUSH
30727: LD_INT 0
30729: EQUAL
30730: IFFALSE 30747
// SetCargo ( i , mat_siberit , 100 ) ;
30732: LD_VAR 0 1
30736: PPUSH
30737: LD_INT 3
30739: PPUSH
30740: LD_INT 100
30742: PPUSH
30743: CALL_OW 290
30747: GO 30711
30749: POP
30750: POP
// end ;
30751: PPOPN 2
30753: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30754: LD_EXP 52
30758: PUSH
30759: LD_EXP 97
30763: AND
30764: IFFALSE 30947
30766: GO 30768
30768: DISABLE
30769: LD_INT 0
30771: PPUSH
30772: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30773: LD_ADDR_VAR 0 2
30777: PUSH
30778: LD_INT 22
30780: PUSH
30781: LD_OWVAR 2
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PPUSH
30790: CALL_OW 69
30794: ST_TO_ADDR
// if not tmp then
30795: LD_VAR 0 2
30799: NOT
30800: IFFALSE 30804
// exit ;
30802: GO 30947
// for i := 1 to 2 do
30804: LD_ADDR_VAR 0 1
30808: PUSH
30809: DOUBLE
30810: LD_INT 1
30812: DEC
30813: ST_TO_ADDR
30814: LD_INT 2
30816: PUSH
30817: FOR_TO
30818: IFFALSE 30945
// begin uc_side := your_side ;
30820: LD_ADDR_OWVAR 20
30824: PUSH
30825: LD_OWVAR 2
30829: ST_TO_ADDR
// uc_nation := nation_american ;
30830: LD_ADDR_OWVAR 21
30834: PUSH
30835: LD_INT 1
30837: ST_TO_ADDR
// vc_chassis := us_morphling ;
30838: LD_ADDR_OWVAR 37
30842: PUSH
30843: LD_INT 5
30845: ST_TO_ADDR
// vc_engine := engine_siberite ;
30846: LD_ADDR_OWVAR 39
30850: PUSH
30851: LD_INT 3
30853: ST_TO_ADDR
// vc_control := control_computer ;
30854: LD_ADDR_OWVAR 38
30858: PUSH
30859: LD_INT 3
30861: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30862: LD_ADDR_OWVAR 40
30866: PUSH
30867: LD_INT 10
30869: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30870: LD_VAR 0 2
30874: PUSH
30875: LD_INT 1
30877: ARRAY
30878: PPUSH
30879: CALL_OW 310
30883: NOT
30884: IFFALSE 30931
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30886: CALL_OW 45
30890: PPUSH
30891: LD_VAR 0 2
30895: PUSH
30896: LD_INT 1
30898: ARRAY
30899: PPUSH
30900: CALL_OW 250
30904: PPUSH
30905: LD_VAR 0 2
30909: PUSH
30910: LD_INT 1
30912: ARRAY
30913: PPUSH
30914: CALL_OW 251
30918: PPUSH
30919: LD_INT 12
30921: PPUSH
30922: LD_INT 1
30924: PPUSH
30925: CALL_OW 50
30929: GO 30943
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30931: CALL_OW 45
30935: PPUSH
30936: LD_INT 1
30938: PPUSH
30939: CALL_OW 51
// end ;
30943: GO 30817
30945: POP
30946: POP
// end ;
30947: PPOPN 2
30949: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30950: LD_EXP 52
30954: PUSH
30955: LD_EXP 98
30959: AND
30960: IFFALSE 31182
30962: GO 30964
30964: DISABLE
30965: LD_INT 0
30967: PPUSH
30968: PPUSH
30969: PPUSH
30970: PPUSH
30971: PPUSH
30972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30973: LD_ADDR_VAR 0 6
30977: PUSH
30978: LD_INT 22
30980: PUSH
30981: LD_OWVAR 2
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 21
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 3
31002: PUSH
31003: LD_INT 23
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: LIST
31021: PPUSH
31022: CALL_OW 69
31026: ST_TO_ADDR
// if not tmp then
31027: LD_VAR 0 6
31031: NOT
31032: IFFALSE 31036
// exit ;
31034: GO 31182
// s1 := rand ( 1 , 4 ) ;
31036: LD_ADDR_VAR 0 2
31040: PUSH
31041: LD_INT 1
31043: PPUSH
31044: LD_INT 4
31046: PPUSH
31047: CALL_OW 12
31051: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31052: LD_ADDR_VAR 0 4
31056: PUSH
31057: LD_VAR 0 6
31061: PUSH
31062: LD_INT 1
31064: ARRAY
31065: PPUSH
31066: LD_VAR 0 2
31070: PPUSH
31071: CALL_OW 259
31075: ST_TO_ADDR
// if s1 = 1 then
31076: LD_VAR 0 2
31080: PUSH
31081: LD_INT 1
31083: EQUAL
31084: IFFALSE 31104
// s2 := rand ( 2 , 4 ) else
31086: LD_ADDR_VAR 0 3
31090: PUSH
31091: LD_INT 2
31093: PPUSH
31094: LD_INT 4
31096: PPUSH
31097: CALL_OW 12
31101: ST_TO_ADDR
31102: GO 31112
// s2 := 1 ;
31104: LD_ADDR_VAR 0 3
31108: PUSH
31109: LD_INT 1
31111: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31112: LD_ADDR_VAR 0 5
31116: PUSH
31117: LD_VAR 0 6
31121: PUSH
31122: LD_INT 1
31124: ARRAY
31125: PPUSH
31126: LD_VAR 0 3
31130: PPUSH
31131: CALL_OW 259
31135: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31136: LD_VAR 0 6
31140: PUSH
31141: LD_INT 1
31143: ARRAY
31144: PPUSH
31145: LD_VAR 0 2
31149: PPUSH
31150: LD_VAR 0 5
31154: PPUSH
31155: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31159: LD_VAR 0 6
31163: PUSH
31164: LD_INT 1
31166: ARRAY
31167: PPUSH
31168: LD_VAR 0 3
31172: PPUSH
31173: LD_VAR 0 4
31177: PPUSH
31178: CALL_OW 237
// end ;
31182: PPOPN 6
31184: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31185: LD_EXP 52
31189: PUSH
31190: LD_EXP 99
31194: AND
31195: IFFALSE 31274
31197: GO 31199
31199: DISABLE
31200: LD_INT 0
31202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31203: LD_ADDR_VAR 0 1
31207: PUSH
31208: LD_INT 22
31210: PUSH
31211: LD_OWVAR 2
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 30
31222: PUSH
31223: LD_INT 3
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PPUSH
31234: CALL_OW 69
31238: ST_TO_ADDR
// if not tmp then
31239: LD_VAR 0 1
31243: NOT
31244: IFFALSE 31248
// exit ;
31246: GO 31274
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31248: LD_VAR 0 1
31252: PUSH
31253: LD_INT 1
31255: PPUSH
31256: LD_VAR 0 1
31260: PPUSH
31261: CALL_OW 12
31265: ARRAY
31266: PPUSH
31267: LD_INT 1
31269: PPUSH
31270: CALL_OW 234
// end ;
31274: PPOPN 1
31276: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31277: LD_EXP 52
31281: PUSH
31282: LD_EXP 100
31286: AND
31287: IFFALSE 31399
31289: GO 31291
31291: DISABLE
31292: LD_INT 0
31294: PPUSH
31295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31296: LD_ADDR_VAR 0 2
31300: PUSH
31301: LD_INT 22
31303: PUSH
31304: LD_OWVAR 2
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: LD_INT 30
31318: PUSH
31319: LD_INT 27
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 30
31328: PUSH
31329: LD_INT 26
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 30
31338: PUSH
31339: LD_INT 28
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PPUSH
31356: CALL_OW 69
31360: ST_TO_ADDR
// if not tmp then
31361: LD_VAR 0 2
31365: NOT
31366: IFFALSE 31370
// exit ;
31368: GO 31399
// for i in tmp do
31370: LD_ADDR_VAR 0 1
31374: PUSH
31375: LD_VAR 0 2
31379: PUSH
31380: FOR_IN
31381: IFFALSE 31397
// SetLives ( i , 1 ) ;
31383: LD_VAR 0 1
31387: PPUSH
31388: LD_INT 1
31390: PPUSH
31391: CALL_OW 234
31395: GO 31380
31397: POP
31398: POP
// end ;
31399: PPOPN 2
31401: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31402: LD_EXP 52
31406: PUSH
31407: LD_EXP 101
31411: AND
31412: IFFALSE 31699
31414: GO 31416
31416: DISABLE
31417: LD_INT 0
31419: PPUSH
31420: PPUSH
31421: PPUSH
// begin i := rand ( 1 , 7 ) ;
31422: LD_ADDR_VAR 0 1
31426: PUSH
31427: LD_INT 1
31429: PPUSH
31430: LD_INT 7
31432: PPUSH
31433: CALL_OW 12
31437: ST_TO_ADDR
// case i of 1 :
31438: LD_VAR 0 1
31442: PUSH
31443: LD_INT 1
31445: DOUBLE
31446: EQUAL
31447: IFTRUE 31451
31449: GO 31461
31451: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31452: LD_STRING earthquake(getX(game), 0, 32)
31454: PPUSH
31455: CALL_OW 559
31459: GO 31699
31461: LD_INT 2
31463: DOUBLE
31464: EQUAL
31465: IFTRUE 31469
31467: GO 31483
31469: POP
// begin ToLua ( displayStucuk(); ) ;
31470: LD_STRING displayStucuk();
31472: PPUSH
31473: CALL_OW 559
// ResetFog ;
31477: CALL_OW 335
// end ; 3 :
31481: GO 31699
31483: LD_INT 3
31485: DOUBLE
31486: EQUAL
31487: IFTRUE 31491
31489: GO 31595
31491: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31492: LD_ADDR_VAR 0 2
31496: PUSH
31497: LD_INT 22
31499: PUSH
31500: LD_OWVAR 2
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 25
31511: PUSH
31512: LD_INT 1
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PPUSH
31523: CALL_OW 69
31527: ST_TO_ADDR
// if not tmp then
31528: LD_VAR 0 2
31532: NOT
31533: IFFALSE 31537
// exit ;
31535: GO 31699
// un := tmp [ rand ( 1 , tmp ) ] ;
31537: LD_ADDR_VAR 0 3
31541: PUSH
31542: LD_VAR 0 2
31546: PUSH
31547: LD_INT 1
31549: PPUSH
31550: LD_VAR 0 2
31554: PPUSH
31555: CALL_OW 12
31559: ARRAY
31560: ST_TO_ADDR
// if Crawls ( un ) then
31561: LD_VAR 0 3
31565: PPUSH
31566: CALL_OW 318
31570: IFFALSE 31581
// ComWalk ( un ) ;
31572: LD_VAR 0 3
31576: PPUSH
31577: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31581: LD_VAR 0 3
31585: PPUSH
31586: LD_INT 8
31588: PPUSH
31589: CALL_OW 336
// end ; 4 :
31593: GO 31699
31595: LD_INT 4
31597: DOUBLE
31598: EQUAL
31599: IFTRUE 31603
31601: GO 31677
31603: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31604: LD_ADDR_VAR 0 2
31608: PUSH
31609: LD_INT 22
31611: PUSH
31612: LD_OWVAR 2
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 30
31623: PUSH
31624: LD_INT 29
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PPUSH
31635: CALL_OW 69
31639: ST_TO_ADDR
// if not tmp then
31640: LD_VAR 0 2
31644: NOT
31645: IFFALSE 31649
// exit ;
31647: GO 31699
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31649: LD_VAR 0 2
31653: PUSH
31654: LD_INT 1
31656: ARRAY
31657: PPUSH
31658: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31662: LD_VAR 0 2
31666: PUSH
31667: LD_INT 1
31669: ARRAY
31670: PPUSH
31671: CALL_OW 65
// end ; 5 .. 7 :
31675: GO 31699
31677: LD_INT 5
31679: DOUBLE
31680: GREATEREQUAL
31681: IFFALSE 31689
31683: LD_INT 7
31685: DOUBLE
31686: LESSEQUAL
31687: IFTRUE 31691
31689: GO 31698
31691: POP
// StreamSibBomb ; end ;
31692: CALL 27936 0 0
31696: GO 31699
31698: POP
// end ;
31699: PPOPN 3
31701: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31702: LD_EXP 52
31706: PUSH
31707: LD_EXP 102
31711: AND
31712: IFFALSE 31868
31714: GO 31716
31716: DISABLE
31717: LD_INT 0
31719: PPUSH
31720: PPUSH
31721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31722: LD_ADDR_VAR 0 2
31726: PUSH
31727: LD_INT 81
31729: PUSH
31730: LD_OWVAR 2
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: LD_INT 21
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 21
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: LIST
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PPUSH
31771: CALL_OW 69
31775: ST_TO_ADDR
// if not tmp then
31776: LD_VAR 0 2
31780: NOT
31781: IFFALSE 31785
// exit ;
31783: GO 31868
// p := 0 ;
31785: LD_ADDR_VAR 0 3
31789: PUSH
31790: LD_INT 0
31792: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31793: LD_INT 35
31795: PPUSH
31796: CALL_OW 67
// p := p + 1 ;
31800: LD_ADDR_VAR 0 3
31804: PUSH
31805: LD_VAR 0 3
31809: PUSH
31810: LD_INT 1
31812: PLUS
31813: ST_TO_ADDR
// for i in tmp do
31814: LD_ADDR_VAR 0 1
31818: PUSH
31819: LD_VAR 0 2
31823: PUSH
31824: FOR_IN
31825: IFFALSE 31856
// if GetLives ( i ) < 1000 then
31827: LD_VAR 0 1
31831: PPUSH
31832: CALL_OW 256
31836: PUSH
31837: LD_INT 1000
31839: LESS
31840: IFFALSE 31854
// SetLives ( i , 1000 ) ;
31842: LD_VAR 0 1
31846: PPUSH
31847: LD_INT 1000
31849: PPUSH
31850: CALL_OW 234
31854: GO 31824
31856: POP
31857: POP
// until p > 20 ;
31858: LD_VAR 0 3
31862: PUSH
31863: LD_INT 20
31865: GREATER
31866: IFFALSE 31793
// end ;
31868: PPOPN 3
31870: END
// every 0 0$1 trigger StreamModeActive and sTime do
31871: LD_EXP 52
31875: PUSH
31876: LD_EXP 103
31880: AND
31881: IFFALSE 31916
31883: GO 31885
31885: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31886: LD_INT 28
31888: PPUSH
31889: LD_OWVAR 2
31893: PPUSH
31894: LD_INT 2
31896: PPUSH
31897: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31901: LD_INT 30
31903: PPUSH
31904: LD_OWVAR 2
31908: PPUSH
31909: LD_INT 2
31911: PPUSH
31912: CALL_OW 322
// end ;
31916: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31917: LD_EXP 52
31921: PUSH
31922: LD_EXP 104
31926: AND
31927: IFFALSE 32048
31929: GO 31931
31931: DISABLE
31932: LD_INT 0
31934: PPUSH
31935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31936: LD_ADDR_VAR 0 2
31940: PUSH
31941: LD_INT 22
31943: PUSH
31944: LD_OWVAR 2
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 21
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 3
31965: PUSH
31966: LD_INT 23
31968: PUSH
31969: LD_INT 0
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: LIST
31984: PPUSH
31985: CALL_OW 69
31989: ST_TO_ADDR
// if not tmp then
31990: LD_VAR 0 2
31994: NOT
31995: IFFALSE 31999
// exit ;
31997: GO 32048
// for i in tmp do
31999: LD_ADDR_VAR 0 1
32003: PUSH
32004: LD_VAR 0 2
32008: PUSH
32009: FOR_IN
32010: IFFALSE 32046
// begin if Crawls ( i ) then
32012: LD_VAR 0 1
32016: PPUSH
32017: CALL_OW 318
32021: IFFALSE 32032
// ComWalk ( i ) ;
32023: LD_VAR 0 1
32027: PPUSH
32028: CALL_OW 138
// SetClass ( i , 2 ) ;
32032: LD_VAR 0 1
32036: PPUSH
32037: LD_INT 2
32039: PPUSH
32040: CALL_OW 336
// end ;
32044: GO 32009
32046: POP
32047: POP
// end ;
32048: PPOPN 2
32050: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32051: LD_EXP 52
32055: PUSH
32056: LD_EXP 105
32060: AND
32061: IFFALSE 32349
32063: GO 32065
32065: DISABLE
32066: LD_INT 0
32068: PPUSH
32069: PPUSH
32070: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32071: LD_OWVAR 2
32075: PPUSH
32076: LD_INT 9
32078: PPUSH
32079: LD_INT 1
32081: PPUSH
32082: LD_INT 1
32084: PPUSH
32085: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32089: LD_INT 9
32091: PPUSH
32092: LD_OWVAR 2
32096: PPUSH
32097: CALL_OW 343
// uc_side := 9 ;
32101: LD_ADDR_OWVAR 20
32105: PUSH
32106: LD_INT 9
32108: ST_TO_ADDR
// uc_nation := 2 ;
32109: LD_ADDR_OWVAR 21
32113: PUSH
32114: LD_INT 2
32116: ST_TO_ADDR
// hc_name := Dark Warrior ;
32117: LD_ADDR_OWVAR 26
32121: PUSH
32122: LD_STRING Dark Warrior
32124: ST_TO_ADDR
// hc_gallery :=  ;
32125: LD_ADDR_OWVAR 33
32129: PUSH
32130: LD_STRING 
32132: ST_TO_ADDR
// hc_noskilllimit := true ;
32133: LD_ADDR_OWVAR 76
32137: PUSH
32138: LD_INT 1
32140: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32141: LD_ADDR_OWVAR 31
32145: PUSH
32146: LD_INT 30
32148: PUSH
32149: LD_INT 30
32151: PUSH
32152: LD_INT 30
32154: PUSH
32155: LD_INT 30
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: ST_TO_ADDR
// un := CreateHuman ;
32164: LD_ADDR_VAR 0 3
32168: PUSH
32169: CALL_OW 44
32173: ST_TO_ADDR
// hc_noskilllimit := false ;
32174: LD_ADDR_OWVAR 76
32178: PUSH
32179: LD_INT 0
32181: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32182: LD_VAR 0 3
32186: PPUSH
32187: LD_INT 1
32189: PPUSH
32190: CALL_OW 51
// ToLua ( playRanger() ) ;
32194: LD_STRING playRanger()
32196: PPUSH
32197: CALL_OW 559
// p := 0 ;
32201: LD_ADDR_VAR 0 2
32205: PUSH
32206: LD_INT 0
32208: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32209: LD_INT 35
32211: PPUSH
32212: CALL_OW 67
// p := p + 1 ;
32216: LD_ADDR_VAR 0 2
32220: PUSH
32221: LD_VAR 0 2
32225: PUSH
32226: LD_INT 1
32228: PLUS
32229: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32230: LD_VAR 0 3
32234: PPUSH
32235: CALL_OW 256
32239: PUSH
32240: LD_INT 1000
32242: LESS
32243: IFFALSE 32257
// SetLives ( un , 1000 ) ;
32245: LD_VAR 0 3
32249: PPUSH
32250: LD_INT 1000
32252: PPUSH
32253: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32257: LD_VAR 0 3
32261: PPUSH
32262: LD_INT 81
32264: PUSH
32265: LD_OWVAR 2
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 91
32276: PUSH
32277: LD_VAR 0 3
32281: PUSH
32282: LD_INT 30
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PPUSH
32294: CALL_OW 69
32298: PPUSH
32299: LD_VAR 0 3
32303: PPUSH
32304: CALL_OW 74
32308: PPUSH
32309: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32313: LD_VAR 0 2
32317: PUSH
32318: LD_INT 80
32320: GREATER
32321: PUSH
32322: LD_VAR 0 3
32326: PPUSH
32327: CALL_OW 301
32331: OR
32332: IFFALSE 32209
// if un then
32334: LD_VAR 0 3
32338: IFFALSE 32349
// RemoveUnit ( un ) ;
32340: LD_VAR 0 3
32344: PPUSH
32345: CALL_OW 64
// end ;
32349: PPOPN 3
32351: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32352: LD_EXP 106
32356: IFFALSE 32472
32358: GO 32360
32360: DISABLE
32361: LD_INT 0
32363: PPUSH
32364: PPUSH
32365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32366: LD_ADDR_VAR 0 2
32370: PUSH
32371: LD_INT 81
32373: PUSH
32374: LD_OWVAR 2
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 21
32385: PUSH
32386: LD_INT 1
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PPUSH
32397: CALL_OW 69
32401: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32402: LD_STRING playComputer()
32404: PPUSH
32405: CALL_OW 559
// if not tmp then
32409: LD_VAR 0 2
32413: NOT
32414: IFFALSE 32418
// exit ;
32416: GO 32472
// for i in tmp do
32418: LD_ADDR_VAR 0 1
32422: PUSH
32423: LD_VAR 0 2
32427: PUSH
32428: FOR_IN
32429: IFFALSE 32470
// for j := 1 to 4 do
32431: LD_ADDR_VAR 0 3
32435: PUSH
32436: DOUBLE
32437: LD_INT 1
32439: DEC
32440: ST_TO_ADDR
32441: LD_INT 4
32443: PUSH
32444: FOR_TO
32445: IFFALSE 32466
// SetSkill ( i , j , 10 ) ;
32447: LD_VAR 0 1
32451: PPUSH
32452: LD_VAR 0 3
32456: PPUSH
32457: LD_INT 10
32459: PPUSH
32460: CALL_OW 237
32464: GO 32444
32466: POP
32467: POP
32468: GO 32428
32470: POP
32471: POP
// end ;
32472: PPOPN 3
32474: END
// every 0 0$1 trigger s30 do var i , tmp ;
32475: LD_EXP 107
32479: IFFALSE 32548
32481: GO 32483
32483: DISABLE
32484: LD_INT 0
32486: PPUSH
32487: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32488: LD_ADDR_VAR 0 2
32492: PUSH
32493: LD_INT 22
32495: PUSH
32496: LD_OWVAR 2
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PPUSH
32505: CALL_OW 69
32509: ST_TO_ADDR
// if not tmp then
32510: LD_VAR 0 2
32514: NOT
32515: IFFALSE 32519
// exit ;
32517: GO 32548
// for i in tmp do
32519: LD_ADDR_VAR 0 1
32523: PUSH
32524: LD_VAR 0 2
32528: PUSH
32529: FOR_IN
32530: IFFALSE 32546
// SetLives ( i , 300 ) ;
32532: LD_VAR 0 1
32536: PPUSH
32537: LD_INT 300
32539: PPUSH
32540: CALL_OW 234
32544: GO 32529
32546: POP
32547: POP
// end ;
32548: PPOPN 2
32550: END
// every 0 0$1 trigger s60 do var i , tmp ;
32551: LD_EXP 108
32555: IFFALSE 32624
32557: GO 32559
32559: DISABLE
32560: LD_INT 0
32562: PPUSH
32563: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32564: LD_ADDR_VAR 0 2
32568: PUSH
32569: LD_INT 22
32571: PUSH
32572: LD_OWVAR 2
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PPUSH
32581: CALL_OW 69
32585: ST_TO_ADDR
// if not tmp then
32586: LD_VAR 0 2
32590: NOT
32591: IFFALSE 32595
// exit ;
32593: GO 32624
// for i in tmp do
32595: LD_ADDR_VAR 0 1
32599: PUSH
32600: LD_VAR 0 2
32604: PUSH
32605: FOR_IN
32606: IFFALSE 32622
// SetLives ( i , 600 ) ;
32608: LD_VAR 0 1
32612: PPUSH
32613: LD_INT 600
32615: PPUSH
32616: CALL_OW 234
32620: GO 32605
32622: POP
32623: POP
// end ;
32624: PPOPN 2
32626: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32627: LD_INT 0
32629: PPUSH
// case cmd of 301 :
32630: LD_VAR 0 1
32634: PUSH
32635: LD_INT 301
32637: DOUBLE
32638: EQUAL
32639: IFTRUE 32643
32641: GO 32675
32643: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32644: LD_VAR 0 6
32648: PPUSH
32649: LD_VAR 0 7
32653: PPUSH
32654: LD_VAR 0 8
32658: PPUSH
32659: LD_VAR 0 4
32663: PPUSH
32664: LD_VAR 0 5
32668: PPUSH
32669: CALL 33884 0 5
32673: GO 32796
32675: LD_INT 302
32677: DOUBLE
32678: EQUAL
32679: IFTRUE 32683
32681: GO 32720
32683: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32684: LD_VAR 0 6
32688: PPUSH
32689: LD_VAR 0 7
32693: PPUSH
32694: LD_VAR 0 8
32698: PPUSH
32699: LD_VAR 0 9
32703: PPUSH
32704: LD_VAR 0 4
32708: PPUSH
32709: LD_VAR 0 5
32713: PPUSH
32714: CALL 33975 0 6
32718: GO 32796
32720: LD_INT 303
32722: DOUBLE
32723: EQUAL
32724: IFTRUE 32728
32726: GO 32765
32728: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32729: LD_VAR 0 6
32733: PPUSH
32734: LD_VAR 0 7
32738: PPUSH
32739: LD_VAR 0 8
32743: PPUSH
32744: LD_VAR 0 9
32748: PPUSH
32749: LD_VAR 0 4
32753: PPUSH
32754: LD_VAR 0 5
32758: PPUSH
32759: CALL 32801 0 6
32763: GO 32796
32765: LD_INT 304
32767: DOUBLE
32768: EQUAL
32769: IFTRUE 32773
32771: GO 32795
32773: POP
// hHackTeleport ( unit , x , y ) ; end ;
32774: LD_VAR 0 2
32778: PPUSH
32779: LD_VAR 0 4
32783: PPUSH
32784: LD_VAR 0 5
32788: PPUSH
32789: CALL 34568 0 3
32793: GO 32796
32795: POP
// end ;
32796: LD_VAR 0 12
32800: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32801: LD_INT 0
32803: PPUSH
32804: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32805: LD_VAR 0 1
32809: PUSH
32810: LD_INT 1
32812: LESS
32813: PUSH
32814: LD_VAR 0 1
32818: PUSH
32819: LD_INT 3
32821: GREATER
32822: OR
32823: PUSH
32824: LD_VAR 0 5
32828: PPUSH
32829: LD_VAR 0 6
32833: PPUSH
32834: CALL_OW 428
32838: OR
32839: IFFALSE 32843
// exit ;
32841: GO 33571
// uc_side := your_side ;
32843: LD_ADDR_OWVAR 20
32847: PUSH
32848: LD_OWVAR 2
32852: ST_TO_ADDR
// uc_nation := nation ;
32853: LD_ADDR_OWVAR 21
32857: PUSH
32858: LD_VAR 0 1
32862: ST_TO_ADDR
// bc_level = 1 ;
32863: LD_ADDR_OWVAR 43
32867: PUSH
32868: LD_INT 1
32870: ST_TO_ADDR
// case btype of 1 :
32871: LD_VAR 0 2
32875: PUSH
32876: LD_INT 1
32878: DOUBLE
32879: EQUAL
32880: IFTRUE 32884
32882: GO 32895
32884: POP
// bc_type := b_depot ; 2 :
32885: LD_ADDR_OWVAR 42
32889: PUSH
32890: LD_INT 0
32892: ST_TO_ADDR
32893: GO 33515
32895: LD_INT 2
32897: DOUBLE
32898: EQUAL
32899: IFTRUE 32903
32901: GO 32914
32903: POP
// bc_type := b_warehouse ; 3 :
32904: LD_ADDR_OWVAR 42
32908: PUSH
32909: LD_INT 1
32911: ST_TO_ADDR
32912: GO 33515
32914: LD_INT 3
32916: DOUBLE
32917: EQUAL
32918: IFTRUE 32922
32920: GO 32933
32922: POP
// bc_type := b_lab ; 4 .. 9 :
32923: LD_ADDR_OWVAR 42
32927: PUSH
32928: LD_INT 6
32930: ST_TO_ADDR
32931: GO 33515
32933: LD_INT 4
32935: DOUBLE
32936: GREATEREQUAL
32937: IFFALSE 32945
32939: LD_INT 9
32941: DOUBLE
32942: LESSEQUAL
32943: IFTRUE 32947
32945: GO 33007
32947: POP
// begin bc_type := b_lab_half ;
32948: LD_ADDR_OWVAR 42
32952: PUSH
32953: LD_INT 7
32955: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32956: LD_ADDR_OWVAR 44
32960: PUSH
32961: LD_INT 10
32963: PUSH
32964: LD_INT 11
32966: PUSH
32967: LD_INT 12
32969: PUSH
32970: LD_INT 15
32972: PUSH
32973: LD_INT 14
32975: PUSH
32976: LD_INT 13
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: PUSH
32987: LD_VAR 0 2
32991: PUSH
32992: LD_INT 3
32994: MINUS
32995: ARRAY
32996: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32997: LD_ADDR_OWVAR 45
33001: PUSH
33002: LD_INT 9
33004: ST_TO_ADDR
// end ; 10 .. 13 :
33005: GO 33515
33007: LD_INT 10
33009: DOUBLE
33010: GREATEREQUAL
33011: IFFALSE 33019
33013: LD_INT 13
33015: DOUBLE
33016: LESSEQUAL
33017: IFTRUE 33021
33019: GO 33098
33021: POP
// begin bc_type := b_lab_full ;
33022: LD_ADDR_OWVAR 42
33026: PUSH
33027: LD_INT 8
33029: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33030: LD_ADDR_OWVAR 44
33034: PUSH
33035: LD_INT 10
33037: PUSH
33038: LD_INT 12
33040: PUSH
33041: LD_INT 14
33043: PUSH
33044: LD_INT 13
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: PUSH
33053: LD_VAR 0 2
33057: PUSH
33058: LD_INT 9
33060: MINUS
33061: ARRAY
33062: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33063: LD_ADDR_OWVAR 45
33067: PUSH
33068: LD_INT 11
33070: PUSH
33071: LD_INT 15
33073: PUSH
33074: LD_INT 12
33076: PUSH
33077: LD_INT 15
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: PUSH
33086: LD_VAR 0 2
33090: PUSH
33091: LD_INT 9
33093: MINUS
33094: ARRAY
33095: ST_TO_ADDR
// end ; 14 :
33096: GO 33515
33098: LD_INT 14
33100: DOUBLE
33101: EQUAL
33102: IFTRUE 33106
33104: GO 33117
33106: POP
// bc_type := b_workshop ; 15 :
33107: LD_ADDR_OWVAR 42
33111: PUSH
33112: LD_INT 2
33114: ST_TO_ADDR
33115: GO 33515
33117: LD_INT 15
33119: DOUBLE
33120: EQUAL
33121: IFTRUE 33125
33123: GO 33136
33125: POP
// bc_type := b_factory ; 16 :
33126: LD_ADDR_OWVAR 42
33130: PUSH
33131: LD_INT 3
33133: ST_TO_ADDR
33134: GO 33515
33136: LD_INT 16
33138: DOUBLE
33139: EQUAL
33140: IFTRUE 33144
33142: GO 33155
33144: POP
// bc_type := b_ext_gun ; 17 :
33145: LD_ADDR_OWVAR 42
33149: PUSH
33150: LD_INT 17
33152: ST_TO_ADDR
33153: GO 33515
33155: LD_INT 17
33157: DOUBLE
33158: EQUAL
33159: IFTRUE 33163
33161: GO 33191
33163: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33164: LD_ADDR_OWVAR 42
33168: PUSH
33169: LD_INT 19
33171: PUSH
33172: LD_INT 23
33174: PUSH
33175: LD_INT 19
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: LIST
33182: PUSH
33183: LD_VAR 0 1
33187: ARRAY
33188: ST_TO_ADDR
33189: GO 33515
33191: LD_INT 18
33193: DOUBLE
33194: EQUAL
33195: IFTRUE 33199
33197: GO 33210
33199: POP
// bc_type := b_ext_radar ; 19 :
33200: LD_ADDR_OWVAR 42
33204: PUSH
33205: LD_INT 20
33207: ST_TO_ADDR
33208: GO 33515
33210: LD_INT 19
33212: DOUBLE
33213: EQUAL
33214: IFTRUE 33218
33216: GO 33229
33218: POP
// bc_type := b_ext_radio ; 20 :
33219: LD_ADDR_OWVAR 42
33223: PUSH
33224: LD_INT 22
33226: ST_TO_ADDR
33227: GO 33515
33229: LD_INT 20
33231: DOUBLE
33232: EQUAL
33233: IFTRUE 33237
33235: GO 33248
33237: POP
// bc_type := b_ext_siberium ; 21 :
33238: LD_ADDR_OWVAR 42
33242: PUSH
33243: LD_INT 21
33245: ST_TO_ADDR
33246: GO 33515
33248: LD_INT 21
33250: DOUBLE
33251: EQUAL
33252: IFTRUE 33256
33254: GO 33267
33256: POP
// bc_type := b_ext_computer ; 22 :
33257: LD_ADDR_OWVAR 42
33261: PUSH
33262: LD_INT 24
33264: ST_TO_ADDR
33265: GO 33515
33267: LD_INT 22
33269: DOUBLE
33270: EQUAL
33271: IFTRUE 33275
33273: GO 33286
33275: POP
// bc_type := b_ext_track ; 23 :
33276: LD_ADDR_OWVAR 42
33280: PUSH
33281: LD_INT 16
33283: ST_TO_ADDR
33284: GO 33515
33286: LD_INT 23
33288: DOUBLE
33289: EQUAL
33290: IFTRUE 33294
33292: GO 33305
33294: POP
// bc_type := b_ext_laser ; 24 :
33295: LD_ADDR_OWVAR 42
33299: PUSH
33300: LD_INT 25
33302: ST_TO_ADDR
33303: GO 33515
33305: LD_INT 24
33307: DOUBLE
33308: EQUAL
33309: IFTRUE 33313
33311: GO 33324
33313: POP
// bc_type := b_control_tower ; 25 :
33314: LD_ADDR_OWVAR 42
33318: PUSH
33319: LD_INT 36
33321: ST_TO_ADDR
33322: GO 33515
33324: LD_INT 25
33326: DOUBLE
33327: EQUAL
33328: IFTRUE 33332
33330: GO 33343
33332: POP
// bc_type := b_breastwork ; 26 :
33333: LD_ADDR_OWVAR 42
33337: PUSH
33338: LD_INT 31
33340: ST_TO_ADDR
33341: GO 33515
33343: LD_INT 26
33345: DOUBLE
33346: EQUAL
33347: IFTRUE 33351
33349: GO 33362
33351: POP
// bc_type := b_bunker ; 27 :
33352: LD_ADDR_OWVAR 42
33356: PUSH
33357: LD_INT 32
33359: ST_TO_ADDR
33360: GO 33515
33362: LD_INT 27
33364: DOUBLE
33365: EQUAL
33366: IFTRUE 33370
33368: GO 33381
33370: POP
// bc_type := b_turret ; 28 :
33371: LD_ADDR_OWVAR 42
33375: PUSH
33376: LD_INT 33
33378: ST_TO_ADDR
33379: GO 33515
33381: LD_INT 28
33383: DOUBLE
33384: EQUAL
33385: IFTRUE 33389
33387: GO 33400
33389: POP
// bc_type := b_armoury ; 29 :
33390: LD_ADDR_OWVAR 42
33394: PUSH
33395: LD_INT 4
33397: ST_TO_ADDR
33398: GO 33515
33400: LD_INT 29
33402: DOUBLE
33403: EQUAL
33404: IFTRUE 33408
33406: GO 33419
33408: POP
// bc_type := b_barracks ; 30 :
33409: LD_ADDR_OWVAR 42
33413: PUSH
33414: LD_INT 5
33416: ST_TO_ADDR
33417: GO 33515
33419: LD_INT 30
33421: DOUBLE
33422: EQUAL
33423: IFTRUE 33427
33425: GO 33438
33427: POP
// bc_type := b_solar_power ; 31 :
33428: LD_ADDR_OWVAR 42
33432: PUSH
33433: LD_INT 27
33435: ST_TO_ADDR
33436: GO 33515
33438: LD_INT 31
33440: DOUBLE
33441: EQUAL
33442: IFTRUE 33446
33444: GO 33457
33446: POP
// bc_type := b_oil_power ; 32 :
33447: LD_ADDR_OWVAR 42
33451: PUSH
33452: LD_INT 26
33454: ST_TO_ADDR
33455: GO 33515
33457: LD_INT 32
33459: DOUBLE
33460: EQUAL
33461: IFTRUE 33465
33463: GO 33476
33465: POP
// bc_type := b_siberite_power ; 33 :
33466: LD_ADDR_OWVAR 42
33470: PUSH
33471: LD_INT 28
33473: ST_TO_ADDR
33474: GO 33515
33476: LD_INT 33
33478: DOUBLE
33479: EQUAL
33480: IFTRUE 33484
33482: GO 33495
33484: POP
// bc_type := b_oil_mine ; 34 :
33485: LD_ADDR_OWVAR 42
33489: PUSH
33490: LD_INT 29
33492: ST_TO_ADDR
33493: GO 33515
33495: LD_INT 34
33497: DOUBLE
33498: EQUAL
33499: IFTRUE 33503
33501: GO 33514
33503: POP
// bc_type := b_siberite_mine ; end ;
33504: LD_ADDR_OWVAR 42
33508: PUSH
33509: LD_INT 30
33511: ST_TO_ADDR
33512: GO 33515
33514: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33515: LD_ADDR_VAR 0 8
33519: PUSH
33520: LD_VAR 0 5
33524: PPUSH
33525: LD_VAR 0 6
33529: PPUSH
33530: LD_VAR 0 3
33534: PPUSH
33535: CALL_OW 47
33539: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33540: LD_OWVAR 42
33544: PUSH
33545: LD_INT 32
33547: PUSH
33548: LD_INT 33
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: IN
33555: IFFALSE 33571
// PlaceWeaponTurret ( b , weapon ) ;
33557: LD_VAR 0 8
33561: PPUSH
33562: LD_VAR 0 4
33566: PPUSH
33567: CALL_OW 431
// end ;
33571: LD_VAR 0 7
33575: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33576: LD_INT 0
33578: PPUSH
33579: PPUSH
33580: PPUSH
33581: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33582: LD_ADDR_VAR 0 4
33586: PUSH
33587: LD_INT 22
33589: PUSH
33590: LD_OWVAR 2
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: LD_INT 30
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 30
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: LIST
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PPUSH
33631: CALL_OW 69
33635: ST_TO_ADDR
// if not tmp then
33636: LD_VAR 0 4
33640: NOT
33641: IFFALSE 33645
// exit ;
33643: GO 33704
// for i in tmp do
33645: LD_ADDR_VAR 0 2
33649: PUSH
33650: LD_VAR 0 4
33654: PUSH
33655: FOR_IN
33656: IFFALSE 33702
// for j = 1 to 3 do
33658: LD_ADDR_VAR 0 3
33662: PUSH
33663: DOUBLE
33664: LD_INT 1
33666: DEC
33667: ST_TO_ADDR
33668: LD_INT 3
33670: PUSH
33671: FOR_TO
33672: IFFALSE 33698
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33674: LD_VAR 0 2
33678: PPUSH
33679: CALL_OW 274
33683: PPUSH
33684: LD_VAR 0 3
33688: PPUSH
33689: LD_INT 99999
33691: PPUSH
33692: CALL_OW 277
33696: GO 33671
33698: POP
33699: POP
33700: GO 33655
33702: POP
33703: POP
// end ;
33704: LD_VAR 0 1
33708: RET
// export function hHackSetLevel10 ; var i , j ; begin
33709: LD_INT 0
33711: PPUSH
33712: PPUSH
33713: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33714: LD_ADDR_VAR 0 2
33718: PUSH
33719: LD_INT 21
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PPUSH
33729: CALL_OW 69
33733: PUSH
33734: FOR_IN
33735: IFFALSE 33787
// if IsSelected ( i ) then
33737: LD_VAR 0 2
33741: PPUSH
33742: CALL_OW 306
33746: IFFALSE 33785
// begin for j := 1 to 4 do
33748: LD_ADDR_VAR 0 3
33752: PUSH
33753: DOUBLE
33754: LD_INT 1
33756: DEC
33757: ST_TO_ADDR
33758: LD_INT 4
33760: PUSH
33761: FOR_TO
33762: IFFALSE 33783
// SetSkill ( i , j , 10 ) ;
33764: LD_VAR 0 2
33768: PPUSH
33769: LD_VAR 0 3
33773: PPUSH
33774: LD_INT 10
33776: PPUSH
33777: CALL_OW 237
33781: GO 33761
33783: POP
33784: POP
// end ;
33785: GO 33734
33787: POP
33788: POP
// end ;
33789: LD_VAR 0 1
33793: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33794: LD_INT 0
33796: PPUSH
33797: PPUSH
33798: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33799: LD_ADDR_VAR 0 2
33803: PUSH
33804: LD_INT 22
33806: PUSH
33807: LD_OWVAR 2
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 21
33818: PUSH
33819: LD_INT 1
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PPUSH
33830: CALL_OW 69
33834: PUSH
33835: FOR_IN
33836: IFFALSE 33877
// begin for j := 1 to 4 do
33838: LD_ADDR_VAR 0 3
33842: PUSH
33843: DOUBLE
33844: LD_INT 1
33846: DEC
33847: ST_TO_ADDR
33848: LD_INT 4
33850: PUSH
33851: FOR_TO
33852: IFFALSE 33873
// SetSkill ( i , j , 10 ) ;
33854: LD_VAR 0 2
33858: PPUSH
33859: LD_VAR 0 3
33863: PPUSH
33864: LD_INT 10
33866: PPUSH
33867: CALL_OW 237
33871: GO 33851
33873: POP
33874: POP
// end ;
33875: GO 33835
33877: POP
33878: POP
// end ;
33879: LD_VAR 0 1
33883: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33884: LD_INT 0
33886: PPUSH
// uc_side := your_side ;
33887: LD_ADDR_OWVAR 20
33891: PUSH
33892: LD_OWVAR 2
33896: ST_TO_ADDR
// uc_nation := nation ;
33897: LD_ADDR_OWVAR 21
33901: PUSH
33902: LD_VAR 0 1
33906: ST_TO_ADDR
// InitHc ;
33907: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33911: LD_INT 0
33913: PPUSH
33914: LD_VAR 0 2
33918: PPUSH
33919: LD_VAR 0 3
33923: PPUSH
33924: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33928: LD_VAR 0 4
33932: PPUSH
33933: LD_VAR 0 5
33937: PPUSH
33938: CALL_OW 428
33942: PUSH
33943: LD_INT 0
33945: EQUAL
33946: IFFALSE 33970
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33948: CALL_OW 44
33952: PPUSH
33953: LD_VAR 0 4
33957: PPUSH
33958: LD_VAR 0 5
33962: PPUSH
33963: LD_INT 1
33965: PPUSH
33966: CALL_OW 48
// end ;
33970: LD_VAR 0 6
33974: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33975: LD_INT 0
33977: PPUSH
33978: PPUSH
// uc_side := your_side ;
33979: LD_ADDR_OWVAR 20
33983: PUSH
33984: LD_OWVAR 2
33988: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33989: LD_VAR 0 1
33993: PUSH
33994: LD_INT 1
33996: PUSH
33997: LD_INT 2
33999: PUSH
34000: LD_INT 3
34002: PUSH
34003: LD_INT 4
34005: PUSH
34006: LD_INT 5
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: IN
34016: IFFALSE 34028
// uc_nation := nation_american else
34018: LD_ADDR_OWVAR 21
34022: PUSH
34023: LD_INT 1
34025: ST_TO_ADDR
34026: GO 34071
// if chassis in [ 11 , 12 , 13 , 14 ] then
34028: LD_VAR 0 1
34032: PUSH
34033: LD_INT 11
34035: PUSH
34036: LD_INT 12
34038: PUSH
34039: LD_INT 13
34041: PUSH
34042: LD_INT 14
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: IN
34051: IFFALSE 34063
// uc_nation := nation_arabian else
34053: LD_ADDR_OWVAR 21
34057: PUSH
34058: LD_INT 2
34060: ST_TO_ADDR
34061: GO 34071
// uc_nation := nation_russian ;
34063: LD_ADDR_OWVAR 21
34067: PUSH
34068: LD_INT 3
34070: ST_TO_ADDR
// vc_chassis := chassis ;
34071: LD_ADDR_OWVAR 37
34075: PUSH
34076: LD_VAR 0 1
34080: ST_TO_ADDR
// vc_engine := engine ;
34081: LD_ADDR_OWVAR 39
34085: PUSH
34086: LD_VAR 0 2
34090: ST_TO_ADDR
// vc_control := control ;
34091: LD_ADDR_OWVAR 38
34095: PUSH
34096: LD_VAR 0 3
34100: ST_TO_ADDR
// vc_weapon := weapon ;
34101: LD_ADDR_OWVAR 40
34105: PUSH
34106: LD_VAR 0 4
34110: ST_TO_ADDR
// un := CreateVehicle ;
34111: LD_ADDR_VAR 0 8
34115: PUSH
34116: CALL_OW 45
34120: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34121: LD_VAR 0 8
34125: PPUSH
34126: LD_INT 0
34128: PPUSH
34129: LD_INT 5
34131: PPUSH
34132: CALL_OW 12
34136: PPUSH
34137: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34141: LD_VAR 0 8
34145: PPUSH
34146: LD_VAR 0 5
34150: PPUSH
34151: LD_VAR 0 6
34155: PPUSH
34156: LD_INT 1
34158: PPUSH
34159: CALL_OW 48
// end ;
34163: LD_VAR 0 7
34167: RET
// export hInvincible ; every 1 do
34168: GO 34170
34170: DISABLE
// hInvincible := [ ] ;
34171: LD_ADDR_EXP 109
34175: PUSH
34176: EMPTY
34177: ST_TO_ADDR
34178: END
// every 10 do var i ;
34179: GO 34181
34181: DISABLE
34182: LD_INT 0
34184: PPUSH
// begin enable ;
34185: ENABLE
// if not hInvincible then
34186: LD_EXP 109
34190: NOT
34191: IFFALSE 34195
// exit ;
34193: GO 34239
// for i in hInvincible do
34195: LD_ADDR_VAR 0 1
34199: PUSH
34200: LD_EXP 109
34204: PUSH
34205: FOR_IN
34206: IFFALSE 34237
// if GetLives ( i ) < 1000 then
34208: LD_VAR 0 1
34212: PPUSH
34213: CALL_OW 256
34217: PUSH
34218: LD_INT 1000
34220: LESS
34221: IFFALSE 34235
// SetLives ( i , 1000 ) ;
34223: LD_VAR 0 1
34227: PPUSH
34228: LD_INT 1000
34230: PPUSH
34231: CALL_OW 234
34235: GO 34205
34237: POP
34238: POP
// end ;
34239: PPOPN 1
34241: END
// export function hHackInvincible ; var i ; begin
34242: LD_INT 0
34244: PPUSH
34245: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34246: LD_ADDR_VAR 0 2
34250: PUSH
34251: LD_INT 2
34253: PUSH
34254: LD_INT 21
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 21
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: LIST
34278: PPUSH
34279: CALL_OW 69
34283: PUSH
34284: FOR_IN
34285: IFFALSE 34346
// if IsSelected ( i ) then
34287: LD_VAR 0 2
34291: PPUSH
34292: CALL_OW 306
34296: IFFALSE 34344
// begin if i in hInvincible then
34298: LD_VAR 0 2
34302: PUSH
34303: LD_EXP 109
34307: IN
34308: IFFALSE 34328
// hInvincible := hInvincible diff i else
34310: LD_ADDR_EXP 109
34314: PUSH
34315: LD_EXP 109
34319: PUSH
34320: LD_VAR 0 2
34324: DIFF
34325: ST_TO_ADDR
34326: GO 34344
// hInvincible := hInvincible union i ;
34328: LD_ADDR_EXP 109
34332: PUSH
34333: LD_EXP 109
34337: PUSH
34338: LD_VAR 0 2
34342: UNION
34343: ST_TO_ADDR
// end ;
34344: GO 34284
34346: POP
34347: POP
// end ;
34348: LD_VAR 0 1
34352: RET
// export function hHackInvisible ; var i , j ; begin
34353: LD_INT 0
34355: PPUSH
34356: PPUSH
34357: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34358: LD_ADDR_VAR 0 2
34362: PUSH
34363: LD_INT 21
34365: PUSH
34366: LD_INT 1
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PPUSH
34373: CALL_OW 69
34377: PUSH
34378: FOR_IN
34379: IFFALSE 34403
// if IsSelected ( i ) then
34381: LD_VAR 0 2
34385: PPUSH
34386: CALL_OW 306
34390: IFFALSE 34401
// ComForceInvisible ( i ) ;
34392: LD_VAR 0 2
34396: PPUSH
34397: CALL_OW 496
34401: GO 34378
34403: POP
34404: POP
// end ;
34405: LD_VAR 0 1
34409: RET
// export function hHackChangeYourSide ; begin
34410: LD_INT 0
34412: PPUSH
// if your_side = 8 then
34413: LD_OWVAR 2
34417: PUSH
34418: LD_INT 8
34420: EQUAL
34421: IFFALSE 34433
// your_side := 0 else
34423: LD_ADDR_OWVAR 2
34427: PUSH
34428: LD_INT 0
34430: ST_TO_ADDR
34431: GO 34447
// your_side := your_side + 1 ;
34433: LD_ADDR_OWVAR 2
34437: PUSH
34438: LD_OWVAR 2
34442: PUSH
34443: LD_INT 1
34445: PLUS
34446: ST_TO_ADDR
// end ;
34447: LD_VAR 0 1
34451: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34452: LD_INT 0
34454: PPUSH
34455: PPUSH
34456: PPUSH
// for i in all_units do
34457: LD_ADDR_VAR 0 2
34461: PUSH
34462: LD_OWVAR 3
34466: PUSH
34467: FOR_IN
34468: IFFALSE 34546
// if IsSelected ( i ) then
34470: LD_VAR 0 2
34474: PPUSH
34475: CALL_OW 306
34479: IFFALSE 34544
// begin j := GetSide ( i ) ;
34481: LD_ADDR_VAR 0 3
34485: PUSH
34486: LD_VAR 0 2
34490: PPUSH
34491: CALL_OW 255
34495: ST_TO_ADDR
// if j = 8 then
34496: LD_VAR 0 3
34500: PUSH
34501: LD_INT 8
34503: EQUAL
34504: IFFALSE 34516
// j := 0 else
34506: LD_ADDR_VAR 0 3
34510: PUSH
34511: LD_INT 0
34513: ST_TO_ADDR
34514: GO 34530
// j := j + 1 ;
34516: LD_ADDR_VAR 0 3
34520: PUSH
34521: LD_VAR 0 3
34525: PUSH
34526: LD_INT 1
34528: PLUS
34529: ST_TO_ADDR
// SetSide ( i , j ) ;
34530: LD_VAR 0 2
34534: PPUSH
34535: LD_VAR 0 3
34539: PPUSH
34540: CALL_OW 235
// end ;
34544: GO 34467
34546: POP
34547: POP
// end ;
34548: LD_VAR 0 1
34552: RET
// export function hHackFog ; begin
34553: LD_INT 0
34555: PPUSH
// FogOff ( true ) ;
34556: LD_INT 1
34558: PPUSH
34559: CALL_OW 344
// end ;
34563: LD_VAR 0 1
34567: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34568: LD_INT 0
34570: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34571: LD_VAR 0 1
34575: PPUSH
34576: LD_VAR 0 2
34580: PPUSH
34581: LD_VAR 0 3
34585: PPUSH
34586: LD_INT 1
34588: PPUSH
34589: LD_INT 1
34591: PPUSH
34592: CALL_OW 483
// CenterOnXY ( x , y ) ;
34596: LD_VAR 0 2
34600: PPUSH
34601: LD_VAR 0 3
34605: PPUSH
34606: CALL_OW 84
// end ;
34610: LD_VAR 0 4
34614: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34615: LD_INT 0
34617: PPUSH
34618: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34619: LD_VAR 0 1
34623: NOT
34624: PUSH
34625: LD_VAR 0 2
34629: PPUSH
34630: LD_VAR 0 3
34634: PPUSH
34635: CALL_OW 488
34639: NOT
34640: OR
34641: PUSH
34642: LD_VAR 0 1
34646: PPUSH
34647: CALL_OW 266
34651: PUSH
34652: LD_INT 3
34654: NONEQUAL
34655: PUSH
34656: LD_VAR 0 1
34660: PPUSH
34661: CALL_OW 247
34665: PUSH
34666: LD_INT 1
34668: EQUAL
34669: NOT
34670: AND
34671: OR
34672: IFFALSE 34676
// exit ;
34674: GO 34825
// if GetType ( factory ) = unit_human then
34676: LD_VAR 0 1
34680: PPUSH
34681: CALL_OW 247
34685: PUSH
34686: LD_INT 1
34688: EQUAL
34689: IFFALSE 34706
// factory := IsInUnit ( factory ) ;
34691: LD_ADDR_VAR 0 1
34695: PUSH
34696: LD_VAR 0 1
34700: PPUSH
34701: CALL_OW 310
34705: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34706: LD_VAR 0 1
34710: PPUSH
34711: CALL_OW 266
34715: PUSH
34716: LD_INT 3
34718: NONEQUAL
34719: IFFALSE 34723
// exit ;
34721: GO 34825
// if HexInfo ( x , y ) = factory then
34723: LD_VAR 0 2
34727: PPUSH
34728: LD_VAR 0 3
34732: PPUSH
34733: CALL_OW 428
34737: PUSH
34738: LD_VAR 0 1
34742: EQUAL
34743: IFFALSE 34770
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34745: LD_ADDR_EXP 110
34749: PUSH
34750: LD_EXP 110
34754: PPUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: LD_INT 0
34762: PPUSH
34763: CALL_OW 1
34767: ST_TO_ADDR
34768: GO 34821
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34770: LD_ADDR_EXP 110
34774: PUSH
34775: LD_EXP 110
34779: PPUSH
34780: LD_VAR 0 1
34784: PPUSH
34785: LD_VAR 0 1
34789: PPUSH
34790: CALL_OW 255
34794: PUSH
34795: LD_VAR 0 1
34799: PUSH
34800: LD_VAR 0 2
34804: PUSH
34805: LD_VAR 0 3
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: PPUSH
34816: CALL_OW 1
34820: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34821: CALL 34830 0 0
// end ;
34825: LD_VAR 0 4
34829: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34830: LD_INT 0
34832: PPUSH
34833: PPUSH
34834: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34835: LD_STRING resetFactoryWaypoint();
34837: PPUSH
34838: CALL_OW 559
// if factoryWaypoints then
34842: LD_EXP 110
34846: IFFALSE 34972
// begin list := PrepareArray ( factoryWaypoints ) ;
34848: LD_ADDR_VAR 0 3
34852: PUSH
34853: LD_EXP 110
34857: PPUSH
34858: CALL 82269 0 1
34862: ST_TO_ADDR
// for i := 1 to list do
34863: LD_ADDR_VAR 0 2
34867: PUSH
34868: DOUBLE
34869: LD_INT 1
34871: DEC
34872: ST_TO_ADDR
34873: LD_VAR 0 3
34877: PUSH
34878: FOR_TO
34879: IFFALSE 34970
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34881: LD_STRING setFactoryWaypointXY(
34883: PUSH
34884: LD_VAR 0 3
34888: PUSH
34889: LD_VAR 0 2
34893: ARRAY
34894: PUSH
34895: LD_INT 1
34897: ARRAY
34898: STR
34899: PUSH
34900: LD_STRING ,
34902: STR
34903: PUSH
34904: LD_VAR 0 3
34908: PUSH
34909: LD_VAR 0 2
34913: ARRAY
34914: PUSH
34915: LD_INT 2
34917: ARRAY
34918: STR
34919: PUSH
34920: LD_STRING ,
34922: STR
34923: PUSH
34924: LD_VAR 0 3
34928: PUSH
34929: LD_VAR 0 2
34933: ARRAY
34934: PUSH
34935: LD_INT 3
34937: ARRAY
34938: STR
34939: PUSH
34940: LD_STRING ,
34942: STR
34943: PUSH
34944: LD_VAR 0 3
34948: PUSH
34949: LD_VAR 0 2
34953: ARRAY
34954: PUSH
34955: LD_INT 4
34957: ARRAY
34958: STR
34959: PUSH
34960: LD_STRING )
34962: STR
34963: PPUSH
34964: CALL_OW 559
34968: GO 34878
34970: POP
34971: POP
// end ; end ;
34972: LD_VAR 0 1
34976: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34977: LD_INT 0
34979: PPUSH
// if HexInfo ( x , y ) = warehouse then
34980: LD_VAR 0 2
34984: PPUSH
34985: LD_VAR 0 3
34989: PPUSH
34990: CALL_OW 428
34994: PUSH
34995: LD_VAR 0 1
34999: EQUAL
35000: IFFALSE 35027
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35002: LD_ADDR_EXP 111
35006: PUSH
35007: LD_EXP 111
35011: PPUSH
35012: LD_VAR 0 1
35016: PPUSH
35017: LD_INT 0
35019: PPUSH
35020: CALL_OW 1
35024: ST_TO_ADDR
35025: GO 35078
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35027: LD_ADDR_EXP 111
35031: PUSH
35032: LD_EXP 111
35036: PPUSH
35037: LD_VAR 0 1
35041: PPUSH
35042: LD_VAR 0 1
35046: PPUSH
35047: CALL_OW 255
35051: PUSH
35052: LD_VAR 0 1
35056: PUSH
35057: LD_VAR 0 2
35061: PUSH
35062: LD_VAR 0 3
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: PPUSH
35073: CALL_OW 1
35077: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35078: CALL 35087 0 0
// end ;
35082: LD_VAR 0 4
35086: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35087: LD_INT 0
35089: PPUSH
35090: PPUSH
35091: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35092: LD_STRING resetWarehouseGatheringPoints();
35094: PPUSH
35095: CALL_OW 559
// if warehouseGatheringPoints then
35099: LD_EXP 111
35103: IFFALSE 35229
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35105: LD_ADDR_VAR 0 3
35109: PUSH
35110: LD_EXP 111
35114: PPUSH
35115: CALL 82269 0 1
35119: ST_TO_ADDR
// for i := 1 to list do
35120: LD_ADDR_VAR 0 2
35124: PUSH
35125: DOUBLE
35126: LD_INT 1
35128: DEC
35129: ST_TO_ADDR
35130: LD_VAR 0 3
35134: PUSH
35135: FOR_TO
35136: IFFALSE 35227
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35138: LD_STRING setWarehouseGatheringPointXY(
35140: PUSH
35141: LD_VAR 0 3
35145: PUSH
35146: LD_VAR 0 2
35150: ARRAY
35151: PUSH
35152: LD_INT 1
35154: ARRAY
35155: STR
35156: PUSH
35157: LD_STRING ,
35159: STR
35160: PUSH
35161: LD_VAR 0 3
35165: PUSH
35166: LD_VAR 0 2
35170: ARRAY
35171: PUSH
35172: LD_INT 2
35174: ARRAY
35175: STR
35176: PUSH
35177: LD_STRING ,
35179: STR
35180: PUSH
35181: LD_VAR 0 3
35185: PUSH
35186: LD_VAR 0 2
35190: ARRAY
35191: PUSH
35192: LD_INT 3
35194: ARRAY
35195: STR
35196: PUSH
35197: LD_STRING ,
35199: STR
35200: PUSH
35201: LD_VAR 0 3
35205: PUSH
35206: LD_VAR 0 2
35210: ARRAY
35211: PUSH
35212: LD_INT 4
35214: ARRAY
35215: STR
35216: PUSH
35217: LD_STRING )
35219: STR
35220: PPUSH
35221: CALL_OW 559
35225: GO 35135
35227: POP
35228: POP
// end ; end ;
35229: LD_VAR 0 1
35233: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35234: LD_EXP 111
35238: IFFALSE 35923
35240: GO 35242
35242: DISABLE
35243: LD_INT 0
35245: PPUSH
35246: PPUSH
35247: PPUSH
35248: PPUSH
35249: PPUSH
35250: PPUSH
35251: PPUSH
35252: PPUSH
35253: PPUSH
// begin enable ;
35254: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35255: LD_ADDR_VAR 0 3
35259: PUSH
35260: LD_EXP 111
35264: PPUSH
35265: CALL 82269 0 1
35269: ST_TO_ADDR
// if not list then
35270: LD_VAR 0 3
35274: NOT
35275: IFFALSE 35279
// exit ;
35277: GO 35923
// for i := 1 to list do
35279: LD_ADDR_VAR 0 1
35283: PUSH
35284: DOUBLE
35285: LD_INT 1
35287: DEC
35288: ST_TO_ADDR
35289: LD_VAR 0 3
35293: PUSH
35294: FOR_TO
35295: IFFALSE 35921
// begin depot := list [ i ] [ 2 ] ;
35297: LD_ADDR_VAR 0 8
35301: PUSH
35302: LD_VAR 0 3
35306: PUSH
35307: LD_VAR 0 1
35311: ARRAY
35312: PUSH
35313: LD_INT 2
35315: ARRAY
35316: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35317: LD_ADDR_VAR 0 5
35321: PUSH
35322: LD_VAR 0 3
35326: PUSH
35327: LD_VAR 0 1
35331: ARRAY
35332: PUSH
35333: LD_INT 1
35335: ARRAY
35336: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35337: LD_VAR 0 8
35341: PPUSH
35342: CALL_OW 301
35346: PUSH
35347: LD_VAR 0 5
35351: PUSH
35352: LD_VAR 0 8
35356: PPUSH
35357: CALL_OW 255
35361: NONEQUAL
35362: OR
35363: IFFALSE 35392
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35365: LD_ADDR_EXP 111
35369: PUSH
35370: LD_EXP 111
35374: PPUSH
35375: LD_VAR 0 8
35379: PPUSH
35380: LD_INT 0
35382: PPUSH
35383: CALL_OW 1
35387: ST_TO_ADDR
// exit ;
35388: POP
35389: POP
35390: GO 35923
// end ; x := list [ i ] [ 3 ] ;
35392: LD_ADDR_VAR 0 6
35396: PUSH
35397: LD_VAR 0 3
35401: PUSH
35402: LD_VAR 0 1
35406: ARRAY
35407: PUSH
35408: LD_INT 3
35410: ARRAY
35411: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35412: LD_ADDR_VAR 0 7
35416: PUSH
35417: LD_VAR 0 3
35421: PUSH
35422: LD_VAR 0 1
35426: ARRAY
35427: PUSH
35428: LD_INT 4
35430: ARRAY
35431: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35432: LD_ADDR_VAR 0 9
35436: PUSH
35437: LD_VAR 0 6
35441: PPUSH
35442: LD_VAR 0 7
35446: PPUSH
35447: LD_INT 16
35449: PPUSH
35450: CALL 80857 0 3
35454: ST_TO_ADDR
// if not cratesNearbyPoint then
35455: LD_VAR 0 9
35459: NOT
35460: IFFALSE 35466
// exit ;
35462: POP
35463: POP
35464: GO 35923
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35466: LD_ADDR_VAR 0 4
35470: PUSH
35471: LD_INT 22
35473: PUSH
35474: LD_VAR 0 5
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 3
35485: PUSH
35486: LD_INT 60
35488: PUSH
35489: EMPTY
35490: LIST
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 91
35498: PUSH
35499: LD_VAR 0 8
35503: PUSH
35504: LD_INT 6
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: LD_INT 25
35517: PUSH
35518: LD_INT 2
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 25
35527: PUSH
35528: LD_INT 16
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: LIST
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: PPUSH
35546: CALL_OW 69
35550: PUSH
35551: LD_VAR 0 8
35555: PPUSH
35556: CALL_OW 313
35560: PPUSH
35561: LD_INT 3
35563: PUSH
35564: LD_INT 60
35566: PUSH
35567: EMPTY
35568: LIST
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: LD_INT 25
35579: PUSH
35580: LD_INT 2
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 25
35589: PUSH
35590: LD_INT 16
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: LIST
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PPUSH
35606: CALL_OW 72
35610: UNION
35611: ST_TO_ADDR
// if tmp then
35612: LD_VAR 0 4
35616: IFFALSE 35696
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35618: LD_ADDR_VAR 0 4
35622: PUSH
35623: LD_VAR 0 4
35627: PPUSH
35628: LD_INT 3
35630: PPUSH
35631: CALL 78826 0 2
35635: ST_TO_ADDR
// for j in tmp do
35636: LD_ADDR_VAR 0 2
35640: PUSH
35641: LD_VAR 0 4
35645: PUSH
35646: FOR_IN
35647: IFFALSE 35690
// begin if IsInUnit ( j ) then
35649: LD_VAR 0 2
35653: PPUSH
35654: CALL_OW 310
35658: IFFALSE 35669
// ComExit ( j ) ;
35660: LD_VAR 0 2
35664: PPUSH
35665: CALL 78909 0 1
// AddComCollect ( j , x , y ) ;
35669: LD_VAR 0 2
35673: PPUSH
35674: LD_VAR 0 6
35678: PPUSH
35679: LD_VAR 0 7
35683: PPUSH
35684: CALL_OW 177
// end ;
35688: GO 35646
35690: POP
35691: POP
// exit ;
35692: POP
35693: POP
35694: GO 35923
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35696: LD_ADDR_VAR 0 4
35700: PUSH
35701: LD_INT 22
35703: PUSH
35704: LD_VAR 0 5
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 91
35715: PUSH
35716: LD_VAR 0 8
35720: PUSH
35721: LD_INT 8
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 2
35731: PUSH
35732: LD_INT 34
35734: PUSH
35735: LD_INT 12
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 34
35744: PUSH
35745: LD_INT 51
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 34
35754: PUSH
35755: LD_INT 32
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 34
35764: PUSH
35765: LD_INT 89
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: PPUSH
35784: CALL_OW 69
35788: ST_TO_ADDR
// if tmp then
35789: LD_VAR 0 4
35793: IFFALSE 35919
// begin for j in tmp do
35795: LD_ADDR_VAR 0 2
35799: PUSH
35800: LD_VAR 0 4
35804: PUSH
35805: FOR_IN
35806: IFFALSE 35917
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35808: LD_VAR 0 2
35812: PPUSH
35813: CALL_OW 262
35817: PUSH
35818: LD_INT 3
35820: EQUAL
35821: PUSH
35822: LD_VAR 0 2
35826: PPUSH
35827: CALL_OW 261
35831: PUSH
35832: LD_INT 20
35834: GREATER
35835: OR
35836: PUSH
35837: LD_VAR 0 2
35841: PPUSH
35842: CALL_OW 314
35846: NOT
35847: AND
35848: PUSH
35849: LD_VAR 0 2
35853: PPUSH
35854: CALL_OW 263
35858: PUSH
35859: LD_INT 1
35861: NONEQUAL
35862: PUSH
35863: LD_VAR 0 2
35867: PPUSH
35868: CALL_OW 311
35872: OR
35873: AND
35874: IFFALSE 35915
// begin ComCollect ( j , x , y ) ;
35876: LD_VAR 0 2
35880: PPUSH
35881: LD_VAR 0 6
35885: PPUSH
35886: LD_VAR 0 7
35890: PPUSH
35891: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35895: LD_VAR 0 2
35899: PPUSH
35900: LD_VAR 0 8
35904: PPUSH
35905: CALL_OW 172
// exit ;
35909: POP
35910: POP
35911: POP
35912: POP
35913: GO 35923
// end ;
35915: GO 35805
35917: POP
35918: POP
// end ; end ;
35919: GO 35294
35921: POP
35922: POP
// end ; end_of_file
35923: PPOPN 9
35925: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35926: LD_INT 0
35928: PPUSH
35929: PPUSH
35930: PPUSH
35931: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35932: LD_VAR 0 1
35936: PPUSH
35937: CALL_OW 264
35941: PUSH
35942: LD_INT 91
35944: EQUAL
35945: IFFALSE 36017
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35947: LD_INT 68
35949: PPUSH
35950: LD_VAR 0 1
35954: PPUSH
35955: CALL_OW 255
35959: PPUSH
35960: CALL_OW 321
35964: PUSH
35965: LD_INT 2
35967: EQUAL
35968: IFFALSE 35980
// eff := 70 else
35970: LD_ADDR_VAR 0 4
35974: PUSH
35975: LD_INT 70
35977: ST_TO_ADDR
35978: GO 35988
// eff := 30 ;
35980: LD_ADDR_VAR 0 4
35984: PUSH
35985: LD_INT 30
35987: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35988: LD_VAR 0 1
35992: PPUSH
35993: CALL_OW 250
35997: PPUSH
35998: LD_VAR 0 1
36002: PPUSH
36003: CALL_OW 251
36007: PPUSH
36008: LD_VAR 0 4
36012: PPUSH
36013: CALL_OW 495
// end ; end ;
36017: LD_VAR 0 2
36021: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36022: LD_INT 0
36024: PPUSH
// end ;
36025: LD_VAR 0 4
36029: RET
// export function SOS_Command ( cmd ) ; begin
36030: LD_INT 0
36032: PPUSH
// end ;
36033: LD_VAR 0 2
36037: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36038: LD_INT 0
36040: PPUSH
// end ;
36041: LD_VAR 0 6
36045: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36046: LD_INT 0
36048: PPUSH
36049: PPUSH
// if not vehicle or not factory then
36050: LD_VAR 0 1
36054: NOT
36055: PUSH
36056: LD_VAR 0 2
36060: NOT
36061: OR
36062: IFFALSE 36066
// exit ;
36064: GO 36297
// if factoryWaypoints >= factory then
36066: LD_EXP 110
36070: PUSH
36071: LD_VAR 0 2
36075: GREATEREQUAL
36076: IFFALSE 36297
// if factoryWaypoints [ factory ] then
36078: LD_EXP 110
36082: PUSH
36083: LD_VAR 0 2
36087: ARRAY
36088: IFFALSE 36297
// begin if GetControl ( vehicle ) = control_manual then
36090: LD_VAR 0 1
36094: PPUSH
36095: CALL_OW 263
36099: PUSH
36100: LD_INT 1
36102: EQUAL
36103: IFFALSE 36184
// begin driver := IsDrivenBy ( vehicle ) ;
36105: LD_ADDR_VAR 0 4
36109: PUSH
36110: LD_VAR 0 1
36114: PPUSH
36115: CALL_OW 311
36119: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36120: LD_VAR 0 4
36124: PPUSH
36125: LD_EXP 110
36129: PUSH
36130: LD_VAR 0 2
36134: ARRAY
36135: PUSH
36136: LD_INT 3
36138: ARRAY
36139: PPUSH
36140: LD_EXP 110
36144: PUSH
36145: LD_VAR 0 2
36149: ARRAY
36150: PUSH
36151: LD_INT 4
36153: ARRAY
36154: PPUSH
36155: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36159: LD_VAR 0 4
36163: PPUSH
36164: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36168: LD_VAR 0 4
36172: PPUSH
36173: LD_VAR 0 2
36177: PPUSH
36178: CALL_OW 180
// end else
36182: GO 36297
// if GetControl ( vehicle ) = control_remote then
36184: LD_VAR 0 1
36188: PPUSH
36189: CALL_OW 263
36193: PUSH
36194: LD_INT 2
36196: EQUAL
36197: IFFALSE 36258
// begin wait ( 0 0$2 ) ;
36199: LD_INT 70
36201: PPUSH
36202: CALL_OW 67
// if Connect ( vehicle ) then
36206: LD_VAR 0 1
36210: PPUSH
36211: CALL 49128 0 1
36215: IFFALSE 36256
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36217: LD_VAR 0 1
36221: PPUSH
36222: LD_EXP 110
36226: PUSH
36227: LD_VAR 0 2
36231: ARRAY
36232: PUSH
36233: LD_INT 3
36235: ARRAY
36236: PPUSH
36237: LD_EXP 110
36241: PUSH
36242: LD_VAR 0 2
36246: ARRAY
36247: PUSH
36248: LD_INT 4
36250: ARRAY
36251: PPUSH
36252: CALL_OW 171
// end else
36256: GO 36297
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36258: LD_VAR 0 1
36262: PPUSH
36263: LD_EXP 110
36267: PUSH
36268: LD_VAR 0 2
36272: ARRAY
36273: PUSH
36274: LD_INT 3
36276: ARRAY
36277: PPUSH
36278: LD_EXP 110
36282: PUSH
36283: LD_VAR 0 2
36287: ARRAY
36288: PUSH
36289: LD_INT 4
36291: ARRAY
36292: PPUSH
36293: CALL_OW 171
// end ; end ;
36297: LD_VAR 0 3
36301: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36302: LD_INT 0
36304: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36305: LD_VAR 0 1
36309: PUSH
36310: LD_INT 250
36312: EQUAL
36313: PUSH
36314: LD_VAR 0 2
36318: PPUSH
36319: CALL_OW 264
36323: PUSH
36324: LD_INT 81
36326: EQUAL
36327: AND
36328: IFFALSE 36349
// MinerPlaceMine ( unit , x , y ) ;
36330: LD_VAR 0 2
36334: PPUSH
36335: LD_VAR 0 4
36339: PPUSH
36340: LD_VAR 0 5
36344: PPUSH
36345: CALL 39339 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36349: LD_VAR 0 1
36353: PUSH
36354: LD_INT 251
36356: EQUAL
36357: PUSH
36358: LD_VAR 0 2
36362: PPUSH
36363: CALL_OW 264
36367: PUSH
36368: LD_INT 81
36370: EQUAL
36371: AND
36372: IFFALSE 36393
// MinerDetonateMine ( unit , x , y ) ;
36374: LD_VAR 0 2
36378: PPUSH
36379: LD_VAR 0 4
36383: PPUSH
36384: LD_VAR 0 5
36388: PPUSH
36389: CALL 39614 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36393: LD_VAR 0 1
36397: PUSH
36398: LD_INT 252
36400: EQUAL
36401: PUSH
36402: LD_VAR 0 2
36406: PPUSH
36407: CALL_OW 264
36411: PUSH
36412: LD_INT 81
36414: EQUAL
36415: AND
36416: IFFALSE 36437
// MinerCreateMinefield ( unit , x , y ) ;
36418: LD_VAR 0 2
36422: PPUSH
36423: LD_VAR 0 4
36427: PPUSH
36428: LD_VAR 0 5
36432: PPUSH
36433: CALL 40031 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36437: LD_VAR 0 1
36441: PUSH
36442: LD_INT 253
36444: EQUAL
36445: PUSH
36446: LD_VAR 0 2
36450: PPUSH
36451: CALL_OW 257
36455: PUSH
36456: LD_INT 5
36458: EQUAL
36459: AND
36460: IFFALSE 36481
// ComBinocular ( unit , x , y ) ;
36462: LD_VAR 0 2
36466: PPUSH
36467: LD_VAR 0 4
36471: PPUSH
36472: LD_VAR 0 5
36476: PPUSH
36477: CALL 40400 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36481: LD_VAR 0 1
36485: PUSH
36486: LD_INT 254
36488: EQUAL
36489: PUSH
36490: LD_VAR 0 2
36494: PPUSH
36495: CALL_OW 264
36499: PUSH
36500: LD_INT 99
36502: EQUAL
36503: AND
36504: PUSH
36505: LD_VAR 0 3
36509: PPUSH
36510: CALL_OW 263
36514: PUSH
36515: LD_INT 3
36517: EQUAL
36518: AND
36519: IFFALSE 36535
// HackDestroyVehicle ( unit , selectedUnit ) ;
36521: LD_VAR 0 2
36525: PPUSH
36526: LD_VAR 0 3
36530: PPUSH
36531: CALL 38703 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36535: LD_VAR 0 1
36539: PUSH
36540: LD_INT 255
36542: EQUAL
36543: PUSH
36544: LD_VAR 0 2
36548: PPUSH
36549: CALL_OW 264
36553: PUSH
36554: LD_INT 14
36556: PUSH
36557: LD_INT 53
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: IN
36564: AND
36565: PUSH
36566: LD_VAR 0 4
36570: PPUSH
36571: LD_VAR 0 5
36575: PPUSH
36576: CALL_OW 488
36580: AND
36581: IFFALSE 36605
// CutTreeXYR ( unit , x , y , 12 ) ;
36583: LD_VAR 0 2
36587: PPUSH
36588: LD_VAR 0 4
36592: PPUSH
36593: LD_VAR 0 5
36597: PPUSH
36598: LD_INT 12
36600: PPUSH
36601: CALL 36700 0 4
// if cmd = 256 then
36605: LD_VAR 0 1
36609: PUSH
36610: LD_INT 256
36612: EQUAL
36613: IFFALSE 36634
// SetFactoryWaypoint ( unit , x , y ) ;
36615: LD_VAR 0 2
36619: PPUSH
36620: LD_VAR 0 4
36624: PPUSH
36625: LD_VAR 0 5
36629: PPUSH
36630: CALL 34615 0 3
// if cmd = 257 then
36634: LD_VAR 0 1
36638: PUSH
36639: LD_INT 257
36641: EQUAL
36642: IFFALSE 36663
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36644: LD_VAR 0 2
36648: PPUSH
36649: LD_VAR 0 4
36653: PPUSH
36654: LD_VAR 0 5
36658: PPUSH
36659: CALL 34977 0 3
// if cmd = 258 then
36663: LD_VAR 0 1
36667: PUSH
36668: LD_INT 258
36670: EQUAL
36671: IFFALSE 36695
// BurnTreeXYR ( unit , x , y , 8 ) ;
36673: LD_VAR 0 2
36677: PPUSH
36678: LD_VAR 0 4
36682: PPUSH
36683: LD_VAR 0 5
36687: PPUSH
36688: LD_INT 8
36690: PPUSH
36691: CALL 37094 0 4
// end ;
36695: LD_VAR 0 6
36699: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36700: LD_INT 0
36702: PPUSH
36703: PPUSH
36704: PPUSH
36705: PPUSH
36706: PPUSH
36707: PPUSH
36708: PPUSH
36709: PPUSH
36710: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36711: LD_VAR 0 1
36715: PPUSH
36716: CALL_OW 302
36720: NOT
36721: PUSH
36722: LD_VAR 0 2
36726: PPUSH
36727: LD_VAR 0 3
36731: PPUSH
36732: CALL_OW 488
36736: NOT
36737: OR
36738: PUSH
36739: LD_VAR 0 4
36743: NOT
36744: OR
36745: IFFALSE 36749
// exit ;
36747: GO 37089
// list := [ ] ;
36749: LD_ADDR_VAR 0 13
36753: PUSH
36754: EMPTY
36755: ST_TO_ADDR
// if x - r < 0 then
36756: LD_VAR 0 2
36760: PUSH
36761: LD_VAR 0 4
36765: MINUS
36766: PUSH
36767: LD_INT 0
36769: LESS
36770: IFFALSE 36782
// min_x := 0 else
36772: LD_ADDR_VAR 0 7
36776: PUSH
36777: LD_INT 0
36779: ST_TO_ADDR
36780: GO 36798
// min_x := x - r ;
36782: LD_ADDR_VAR 0 7
36786: PUSH
36787: LD_VAR 0 2
36791: PUSH
36792: LD_VAR 0 4
36796: MINUS
36797: ST_TO_ADDR
// if y - r < 0 then
36798: LD_VAR 0 3
36802: PUSH
36803: LD_VAR 0 4
36807: MINUS
36808: PUSH
36809: LD_INT 0
36811: LESS
36812: IFFALSE 36824
// min_y := 0 else
36814: LD_ADDR_VAR 0 8
36818: PUSH
36819: LD_INT 0
36821: ST_TO_ADDR
36822: GO 36840
// min_y := y - r ;
36824: LD_ADDR_VAR 0 8
36828: PUSH
36829: LD_VAR 0 3
36833: PUSH
36834: LD_VAR 0 4
36838: MINUS
36839: ST_TO_ADDR
// max_x := x + r ;
36840: LD_ADDR_VAR 0 9
36844: PUSH
36845: LD_VAR 0 2
36849: PUSH
36850: LD_VAR 0 4
36854: PLUS
36855: ST_TO_ADDR
// max_y := y + r ;
36856: LD_ADDR_VAR 0 10
36860: PUSH
36861: LD_VAR 0 3
36865: PUSH
36866: LD_VAR 0 4
36870: PLUS
36871: ST_TO_ADDR
// for _x = min_x to max_x do
36872: LD_ADDR_VAR 0 11
36876: PUSH
36877: DOUBLE
36878: LD_VAR 0 7
36882: DEC
36883: ST_TO_ADDR
36884: LD_VAR 0 9
36888: PUSH
36889: FOR_TO
36890: IFFALSE 37007
// for _y = min_y to max_y do
36892: LD_ADDR_VAR 0 12
36896: PUSH
36897: DOUBLE
36898: LD_VAR 0 8
36902: DEC
36903: ST_TO_ADDR
36904: LD_VAR 0 10
36908: PUSH
36909: FOR_TO
36910: IFFALSE 37003
// begin if not ValidHex ( _x , _y ) then
36912: LD_VAR 0 11
36916: PPUSH
36917: LD_VAR 0 12
36921: PPUSH
36922: CALL_OW 488
36926: NOT
36927: IFFALSE 36931
// continue ;
36929: GO 36909
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36931: LD_VAR 0 11
36935: PPUSH
36936: LD_VAR 0 12
36940: PPUSH
36941: CALL_OW 351
36945: PUSH
36946: LD_VAR 0 11
36950: PPUSH
36951: LD_VAR 0 12
36955: PPUSH
36956: CALL_OW 554
36960: AND
36961: IFFALSE 37001
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36963: LD_ADDR_VAR 0 13
36967: PUSH
36968: LD_VAR 0 13
36972: PPUSH
36973: LD_VAR 0 13
36977: PUSH
36978: LD_INT 1
36980: PLUS
36981: PPUSH
36982: LD_VAR 0 11
36986: PUSH
36987: LD_VAR 0 12
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PPUSH
36996: CALL_OW 2
37000: ST_TO_ADDR
// end ;
37001: GO 36909
37003: POP
37004: POP
37005: GO 36889
37007: POP
37008: POP
// if not list then
37009: LD_VAR 0 13
37013: NOT
37014: IFFALSE 37018
// exit ;
37016: GO 37089
// for i in list do
37018: LD_ADDR_VAR 0 6
37022: PUSH
37023: LD_VAR 0 13
37027: PUSH
37028: FOR_IN
37029: IFFALSE 37087
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37031: LD_VAR 0 1
37035: PPUSH
37036: LD_STRING M
37038: PUSH
37039: LD_VAR 0 6
37043: PUSH
37044: LD_INT 1
37046: ARRAY
37047: PUSH
37048: LD_VAR 0 6
37052: PUSH
37053: LD_INT 2
37055: ARRAY
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: PUSH
37078: EMPTY
37079: LIST
37080: PPUSH
37081: CALL_OW 447
37085: GO 37028
37087: POP
37088: POP
// end ;
37089: LD_VAR 0 5
37093: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37094: LD_INT 0
37096: PPUSH
37097: PPUSH
37098: PPUSH
37099: PPUSH
37100: PPUSH
37101: PPUSH
37102: PPUSH
37103: PPUSH
37104: PPUSH
37105: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37106: LD_VAR 0 1
37110: PPUSH
37111: CALL_OW 302
37115: NOT
37116: PUSH
37117: LD_VAR 0 2
37121: PPUSH
37122: LD_VAR 0 3
37126: PPUSH
37127: CALL_OW 488
37131: NOT
37132: OR
37133: PUSH
37134: LD_VAR 0 4
37138: NOT
37139: OR
37140: IFFALSE 37144
// exit ;
37142: GO 37657
// list := [ ] ;
37144: LD_ADDR_VAR 0 13
37148: PUSH
37149: EMPTY
37150: ST_TO_ADDR
// if x - r < 0 then
37151: LD_VAR 0 2
37155: PUSH
37156: LD_VAR 0 4
37160: MINUS
37161: PUSH
37162: LD_INT 0
37164: LESS
37165: IFFALSE 37177
// min_x := 0 else
37167: LD_ADDR_VAR 0 7
37171: PUSH
37172: LD_INT 0
37174: ST_TO_ADDR
37175: GO 37193
// min_x := x - r ;
37177: LD_ADDR_VAR 0 7
37181: PUSH
37182: LD_VAR 0 2
37186: PUSH
37187: LD_VAR 0 4
37191: MINUS
37192: ST_TO_ADDR
// if y - r < 0 then
37193: LD_VAR 0 3
37197: PUSH
37198: LD_VAR 0 4
37202: MINUS
37203: PUSH
37204: LD_INT 0
37206: LESS
37207: IFFALSE 37219
// min_y := 0 else
37209: LD_ADDR_VAR 0 8
37213: PUSH
37214: LD_INT 0
37216: ST_TO_ADDR
37217: GO 37235
// min_y := y - r ;
37219: LD_ADDR_VAR 0 8
37223: PUSH
37224: LD_VAR 0 3
37228: PUSH
37229: LD_VAR 0 4
37233: MINUS
37234: ST_TO_ADDR
// max_x := x + r ;
37235: LD_ADDR_VAR 0 9
37239: PUSH
37240: LD_VAR 0 2
37244: PUSH
37245: LD_VAR 0 4
37249: PLUS
37250: ST_TO_ADDR
// max_y := y + r ;
37251: LD_ADDR_VAR 0 10
37255: PUSH
37256: LD_VAR 0 3
37260: PUSH
37261: LD_VAR 0 4
37265: PLUS
37266: ST_TO_ADDR
// for _x = min_x to max_x do
37267: LD_ADDR_VAR 0 11
37271: PUSH
37272: DOUBLE
37273: LD_VAR 0 7
37277: DEC
37278: ST_TO_ADDR
37279: LD_VAR 0 9
37283: PUSH
37284: FOR_TO
37285: IFFALSE 37402
// for _y = min_y to max_y do
37287: LD_ADDR_VAR 0 12
37291: PUSH
37292: DOUBLE
37293: LD_VAR 0 8
37297: DEC
37298: ST_TO_ADDR
37299: LD_VAR 0 10
37303: PUSH
37304: FOR_TO
37305: IFFALSE 37398
// begin if not ValidHex ( _x , _y ) then
37307: LD_VAR 0 11
37311: PPUSH
37312: LD_VAR 0 12
37316: PPUSH
37317: CALL_OW 488
37321: NOT
37322: IFFALSE 37326
// continue ;
37324: GO 37304
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37326: LD_VAR 0 11
37330: PPUSH
37331: LD_VAR 0 12
37335: PPUSH
37336: CALL_OW 351
37340: PUSH
37341: LD_VAR 0 11
37345: PPUSH
37346: LD_VAR 0 12
37350: PPUSH
37351: CALL_OW 554
37355: AND
37356: IFFALSE 37396
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37358: LD_ADDR_VAR 0 13
37362: PUSH
37363: LD_VAR 0 13
37367: PPUSH
37368: LD_VAR 0 13
37372: PUSH
37373: LD_INT 1
37375: PLUS
37376: PPUSH
37377: LD_VAR 0 11
37381: PUSH
37382: LD_VAR 0 12
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PPUSH
37391: CALL_OW 2
37395: ST_TO_ADDR
// end ;
37396: GO 37304
37398: POP
37399: POP
37400: GO 37284
37402: POP
37403: POP
// if not list then
37404: LD_VAR 0 13
37408: NOT
37409: IFFALSE 37413
// exit ;
37411: GO 37657
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37413: LD_ADDR_VAR 0 13
37417: PUSH
37418: LD_VAR 0 1
37422: PPUSH
37423: LD_VAR 0 13
37427: PPUSH
37428: LD_INT 1
37430: PPUSH
37431: LD_INT 1
37433: PPUSH
37434: CALL 46270 0 4
37438: ST_TO_ADDR
// ComStop ( flame ) ;
37439: LD_VAR 0 1
37443: PPUSH
37444: CALL_OW 141
// for i in list do
37448: LD_ADDR_VAR 0 6
37452: PUSH
37453: LD_VAR 0 13
37457: PUSH
37458: FOR_IN
37459: IFFALSE 37490
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37461: LD_VAR 0 1
37465: PPUSH
37466: LD_VAR 0 6
37470: PUSH
37471: LD_INT 1
37473: ARRAY
37474: PPUSH
37475: LD_VAR 0 6
37479: PUSH
37480: LD_INT 2
37482: ARRAY
37483: PPUSH
37484: CALL_OW 176
37488: GO 37458
37490: POP
37491: POP
// repeat wait ( 0 0$1 ) ;
37492: LD_INT 35
37494: PPUSH
37495: CALL_OW 67
// task := GetTaskList ( flame ) ;
37499: LD_ADDR_VAR 0 14
37503: PUSH
37504: LD_VAR 0 1
37508: PPUSH
37509: CALL_OW 437
37513: ST_TO_ADDR
// if not task then
37514: LD_VAR 0 14
37518: NOT
37519: IFFALSE 37523
// exit ;
37521: GO 37657
// if task [ 1 ] [ 1 ] <> | then
37523: LD_VAR 0 14
37527: PUSH
37528: LD_INT 1
37530: ARRAY
37531: PUSH
37532: LD_INT 1
37534: ARRAY
37535: PUSH
37536: LD_STRING |
37538: NONEQUAL
37539: IFFALSE 37543
// exit ;
37541: GO 37657
// _x := task [ 1 ] [ 2 ] ;
37543: LD_ADDR_VAR 0 11
37547: PUSH
37548: LD_VAR 0 14
37552: PUSH
37553: LD_INT 1
37555: ARRAY
37556: PUSH
37557: LD_INT 2
37559: ARRAY
37560: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37561: LD_ADDR_VAR 0 12
37565: PUSH
37566: LD_VAR 0 14
37570: PUSH
37571: LD_INT 1
37573: ARRAY
37574: PUSH
37575: LD_INT 3
37577: ARRAY
37578: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37579: LD_VAR 0 11
37583: PPUSH
37584: LD_VAR 0 12
37588: PPUSH
37589: CALL_OW 351
37593: NOT
37594: PUSH
37595: LD_VAR 0 11
37599: PPUSH
37600: LD_VAR 0 12
37604: PPUSH
37605: CALL_OW 554
37609: NOT
37610: OR
37611: IFFALSE 37645
// begin task := Delete ( task , 1 ) ;
37613: LD_ADDR_VAR 0 14
37617: PUSH
37618: LD_VAR 0 14
37622: PPUSH
37623: LD_INT 1
37625: PPUSH
37626: CALL_OW 3
37630: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37631: LD_VAR 0 1
37635: PPUSH
37636: LD_VAR 0 14
37640: PPUSH
37641: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37645: LD_VAR 0 1
37649: PPUSH
37650: CALL_OW 314
37654: NOT
37655: IFFALSE 37492
// end ;
37657: LD_VAR 0 5
37661: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37662: LD_EXP 113
37666: NOT
37667: IFFALSE 37717
37669: GO 37671
37671: DISABLE
// begin initHack := true ;
37672: LD_ADDR_EXP 113
37676: PUSH
37677: LD_INT 1
37679: ST_TO_ADDR
// hackTanks := [ ] ;
37680: LD_ADDR_EXP 114
37684: PUSH
37685: EMPTY
37686: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37687: LD_ADDR_EXP 115
37691: PUSH
37692: EMPTY
37693: ST_TO_ADDR
// hackLimit := 3 ;
37694: LD_ADDR_EXP 116
37698: PUSH
37699: LD_INT 3
37701: ST_TO_ADDR
// hackDist := 12 ;
37702: LD_ADDR_EXP 117
37706: PUSH
37707: LD_INT 12
37709: ST_TO_ADDR
// hackCounter := [ ] ;
37710: LD_ADDR_EXP 118
37714: PUSH
37715: EMPTY
37716: ST_TO_ADDR
// end ;
37717: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37718: LD_EXP 113
37722: PUSH
37723: LD_INT 34
37725: PUSH
37726: LD_INT 99
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PPUSH
37733: CALL_OW 69
37737: AND
37738: IFFALSE 37991
37740: GO 37742
37742: DISABLE
37743: LD_INT 0
37745: PPUSH
37746: PPUSH
// begin enable ;
37747: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37748: LD_ADDR_VAR 0 1
37752: PUSH
37753: LD_INT 34
37755: PUSH
37756: LD_INT 99
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PPUSH
37763: CALL_OW 69
37767: PUSH
37768: FOR_IN
37769: IFFALSE 37989
// begin if not i in hackTanks then
37771: LD_VAR 0 1
37775: PUSH
37776: LD_EXP 114
37780: IN
37781: NOT
37782: IFFALSE 37865
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37784: LD_ADDR_EXP 114
37788: PUSH
37789: LD_EXP 114
37793: PPUSH
37794: LD_EXP 114
37798: PUSH
37799: LD_INT 1
37801: PLUS
37802: PPUSH
37803: LD_VAR 0 1
37807: PPUSH
37808: CALL_OW 1
37812: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37813: LD_ADDR_EXP 115
37817: PUSH
37818: LD_EXP 115
37822: PPUSH
37823: LD_EXP 115
37827: PUSH
37828: LD_INT 1
37830: PLUS
37831: PPUSH
37832: EMPTY
37833: PPUSH
37834: CALL_OW 1
37838: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37839: LD_ADDR_EXP 118
37843: PUSH
37844: LD_EXP 118
37848: PPUSH
37849: LD_EXP 118
37853: PUSH
37854: LD_INT 1
37856: PLUS
37857: PPUSH
37858: EMPTY
37859: PPUSH
37860: CALL_OW 1
37864: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37865: LD_VAR 0 1
37869: PPUSH
37870: CALL_OW 302
37874: NOT
37875: IFFALSE 37888
// begin HackUnlinkAll ( i ) ;
37877: LD_VAR 0 1
37881: PPUSH
37882: CALL 37994 0 1
// continue ;
37886: GO 37768
// end ; HackCheckCapturedStatus ( i ) ;
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL 38437 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37897: LD_ADDR_VAR 0 2
37901: PUSH
37902: LD_INT 81
37904: PUSH
37905: LD_VAR 0 1
37909: PPUSH
37910: CALL_OW 255
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 33
37921: PUSH
37922: LD_INT 3
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 91
37931: PUSH
37932: LD_VAR 0 1
37936: PUSH
37937: LD_EXP 117
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 50
37949: PUSH
37950: EMPTY
37951: LIST
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: PPUSH
37959: CALL_OW 69
37963: ST_TO_ADDR
// if not tmp then
37964: LD_VAR 0 2
37968: NOT
37969: IFFALSE 37973
// continue ;
37971: GO 37768
// HackLink ( i , tmp ) ;
37973: LD_VAR 0 1
37977: PPUSH
37978: LD_VAR 0 2
37982: PPUSH
37983: CALL 38130 0 2
// end ;
37987: GO 37768
37989: POP
37990: POP
// end ;
37991: PPOPN 2
37993: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37994: LD_INT 0
37996: PPUSH
37997: PPUSH
37998: PPUSH
// if not hack in hackTanks then
37999: LD_VAR 0 1
38003: PUSH
38004: LD_EXP 114
38008: IN
38009: NOT
38010: IFFALSE 38014
// exit ;
38012: GO 38125
// index := GetElementIndex ( hackTanks , hack ) ;
38014: LD_ADDR_VAR 0 4
38018: PUSH
38019: LD_EXP 114
38023: PPUSH
38024: LD_VAR 0 1
38028: PPUSH
38029: CALL 45567 0 2
38033: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38034: LD_EXP 115
38038: PUSH
38039: LD_VAR 0 4
38043: ARRAY
38044: IFFALSE 38125
// begin for i in hackTanksCaptured [ index ] do
38046: LD_ADDR_VAR 0 3
38050: PUSH
38051: LD_EXP 115
38055: PUSH
38056: LD_VAR 0 4
38060: ARRAY
38061: PUSH
38062: FOR_IN
38063: IFFALSE 38089
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38065: LD_VAR 0 3
38069: PUSH
38070: LD_INT 1
38072: ARRAY
38073: PPUSH
38074: LD_VAR 0 3
38078: PUSH
38079: LD_INT 2
38081: ARRAY
38082: PPUSH
38083: CALL_OW 235
38087: GO 38062
38089: POP
38090: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38091: LD_ADDR_EXP 115
38095: PUSH
38096: LD_EXP 115
38100: PPUSH
38101: LD_VAR 0 4
38105: PPUSH
38106: EMPTY
38107: PPUSH
38108: CALL_OW 1
38112: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38113: LD_VAR 0 1
38117: PPUSH
38118: LD_INT 0
38120: PPUSH
38121: CALL_OW 505
// end ; end ;
38125: LD_VAR 0 2
38129: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38130: LD_INT 0
38132: PPUSH
38133: PPUSH
38134: PPUSH
// if not hack in hackTanks or not vehicles then
38135: LD_VAR 0 1
38139: PUSH
38140: LD_EXP 114
38144: IN
38145: NOT
38146: PUSH
38147: LD_VAR 0 2
38151: NOT
38152: OR
38153: IFFALSE 38157
// exit ;
38155: GO 38432
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38157: LD_ADDR_VAR 0 2
38161: PUSH
38162: LD_VAR 0 1
38166: PPUSH
38167: LD_VAR 0 2
38171: PPUSH
38172: LD_INT 1
38174: PPUSH
38175: LD_INT 1
38177: PPUSH
38178: CALL 46217 0 4
38182: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38183: LD_ADDR_VAR 0 5
38187: PUSH
38188: LD_EXP 114
38192: PPUSH
38193: LD_VAR 0 1
38197: PPUSH
38198: CALL 45567 0 2
38202: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38203: LD_EXP 115
38207: PUSH
38208: LD_VAR 0 5
38212: ARRAY
38213: PUSH
38214: LD_EXP 116
38218: LESS
38219: IFFALSE 38408
// begin for i := 1 to vehicles do
38221: LD_ADDR_VAR 0 4
38225: PUSH
38226: DOUBLE
38227: LD_INT 1
38229: DEC
38230: ST_TO_ADDR
38231: LD_VAR 0 2
38235: PUSH
38236: FOR_TO
38237: IFFALSE 38406
// begin if hackTanksCaptured [ index ] = hackLimit then
38239: LD_EXP 115
38243: PUSH
38244: LD_VAR 0 5
38248: ARRAY
38249: PUSH
38250: LD_EXP 116
38254: EQUAL
38255: IFFALSE 38259
// break ;
38257: GO 38406
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38259: LD_ADDR_EXP 118
38263: PUSH
38264: LD_EXP 118
38268: PPUSH
38269: LD_VAR 0 5
38273: PPUSH
38274: LD_EXP 118
38278: PUSH
38279: LD_VAR 0 5
38283: ARRAY
38284: PUSH
38285: LD_INT 1
38287: PLUS
38288: PPUSH
38289: CALL_OW 1
38293: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38294: LD_ADDR_EXP 115
38298: PUSH
38299: LD_EXP 115
38303: PPUSH
38304: LD_VAR 0 5
38308: PUSH
38309: LD_EXP 115
38313: PUSH
38314: LD_VAR 0 5
38318: ARRAY
38319: PUSH
38320: LD_INT 1
38322: PLUS
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PPUSH
38328: LD_VAR 0 2
38332: PUSH
38333: LD_VAR 0 4
38337: ARRAY
38338: PUSH
38339: LD_VAR 0 2
38343: PUSH
38344: LD_VAR 0 4
38348: ARRAY
38349: PPUSH
38350: CALL_OW 255
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PPUSH
38359: CALL 45782 0 3
38363: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38364: LD_VAR 0 2
38368: PUSH
38369: LD_VAR 0 4
38373: ARRAY
38374: PPUSH
38375: LD_VAR 0 1
38379: PPUSH
38380: CALL_OW 255
38384: PPUSH
38385: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38389: LD_VAR 0 2
38393: PUSH
38394: LD_VAR 0 4
38398: ARRAY
38399: PPUSH
38400: CALL_OW 141
// end ;
38404: GO 38236
38406: POP
38407: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38408: LD_VAR 0 1
38412: PPUSH
38413: LD_EXP 115
38417: PUSH
38418: LD_VAR 0 5
38422: ARRAY
38423: PUSH
38424: LD_INT 0
38426: PLUS
38427: PPUSH
38428: CALL_OW 505
// end ;
38432: LD_VAR 0 3
38436: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38437: LD_INT 0
38439: PPUSH
38440: PPUSH
38441: PPUSH
38442: PPUSH
// if not hack in hackTanks then
38443: LD_VAR 0 1
38447: PUSH
38448: LD_EXP 114
38452: IN
38453: NOT
38454: IFFALSE 38458
// exit ;
38456: GO 38698
// index := GetElementIndex ( hackTanks , hack ) ;
38458: LD_ADDR_VAR 0 4
38462: PUSH
38463: LD_EXP 114
38467: PPUSH
38468: LD_VAR 0 1
38472: PPUSH
38473: CALL 45567 0 2
38477: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38478: LD_ADDR_VAR 0 3
38482: PUSH
38483: DOUBLE
38484: LD_EXP 115
38488: PUSH
38489: LD_VAR 0 4
38493: ARRAY
38494: INC
38495: ST_TO_ADDR
38496: LD_INT 1
38498: PUSH
38499: FOR_DOWNTO
38500: IFFALSE 38672
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38502: LD_ADDR_VAR 0 5
38506: PUSH
38507: LD_EXP 115
38511: PUSH
38512: LD_VAR 0 4
38516: ARRAY
38517: PUSH
38518: LD_VAR 0 3
38522: ARRAY
38523: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38524: LD_VAR 0 5
38528: PUSH
38529: LD_INT 1
38531: ARRAY
38532: PPUSH
38533: CALL_OW 302
38537: NOT
38538: PUSH
38539: LD_VAR 0 5
38543: PUSH
38544: LD_INT 1
38546: ARRAY
38547: PPUSH
38548: CALL_OW 255
38552: PUSH
38553: LD_VAR 0 1
38557: PPUSH
38558: CALL_OW 255
38562: NONEQUAL
38563: OR
38564: IFFALSE 38670
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38566: LD_VAR 0 5
38570: PUSH
38571: LD_INT 1
38573: ARRAY
38574: PPUSH
38575: CALL_OW 305
38579: PUSH
38580: LD_VAR 0 5
38584: PUSH
38585: LD_INT 1
38587: ARRAY
38588: PPUSH
38589: CALL_OW 255
38593: PUSH
38594: LD_VAR 0 1
38598: PPUSH
38599: CALL_OW 255
38603: EQUAL
38604: AND
38605: IFFALSE 38629
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38607: LD_VAR 0 5
38611: PUSH
38612: LD_INT 1
38614: ARRAY
38615: PPUSH
38616: LD_VAR 0 5
38620: PUSH
38621: LD_INT 2
38623: ARRAY
38624: PPUSH
38625: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38629: LD_ADDR_EXP 115
38633: PUSH
38634: LD_EXP 115
38638: PPUSH
38639: LD_VAR 0 4
38643: PPUSH
38644: LD_EXP 115
38648: PUSH
38649: LD_VAR 0 4
38653: ARRAY
38654: PPUSH
38655: LD_VAR 0 3
38659: PPUSH
38660: CALL_OW 3
38664: PPUSH
38665: CALL_OW 1
38669: ST_TO_ADDR
// end ; end ;
38670: GO 38499
38672: POP
38673: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38674: LD_VAR 0 1
38678: PPUSH
38679: LD_EXP 115
38683: PUSH
38684: LD_VAR 0 4
38688: ARRAY
38689: PUSH
38690: LD_INT 0
38692: PLUS
38693: PPUSH
38694: CALL_OW 505
// end ;
38698: LD_VAR 0 2
38702: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38703: LD_INT 0
38705: PPUSH
38706: PPUSH
38707: PPUSH
38708: PPUSH
// if not hack in hackTanks then
38709: LD_VAR 0 1
38713: PUSH
38714: LD_EXP 114
38718: IN
38719: NOT
38720: IFFALSE 38724
// exit ;
38722: GO 38809
// index := GetElementIndex ( hackTanks , hack ) ;
38724: LD_ADDR_VAR 0 5
38728: PUSH
38729: LD_EXP 114
38733: PPUSH
38734: LD_VAR 0 1
38738: PPUSH
38739: CALL 45567 0 2
38743: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38744: LD_ADDR_VAR 0 4
38748: PUSH
38749: DOUBLE
38750: LD_INT 1
38752: DEC
38753: ST_TO_ADDR
38754: LD_EXP 115
38758: PUSH
38759: LD_VAR 0 5
38763: ARRAY
38764: PUSH
38765: FOR_TO
38766: IFFALSE 38807
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38768: LD_EXP 115
38772: PUSH
38773: LD_VAR 0 5
38777: ARRAY
38778: PUSH
38779: LD_VAR 0 4
38783: ARRAY
38784: PUSH
38785: LD_INT 1
38787: ARRAY
38788: PUSH
38789: LD_VAR 0 2
38793: EQUAL
38794: IFFALSE 38805
// KillUnit ( vehicle ) ;
38796: LD_VAR 0 2
38800: PPUSH
38801: CALL_OW 66
38805: GO 38765
38807: POP
38808: POP
// end ;
38809: LD_VAR 0 3
38813: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38814: LD_EXP 119
38818: NOT
38819: IFFALSE 38854
38821: GO 38823
38823: DISABLE
// begin initMiner := true ;
38824: LD_ADDR_EXP 119
38828: PUSH
38829: LD_INT 1
38831: ST_TO_ADDR
// minersList := [ ] ;
38832: LD_ADDR_EXP 120
38836: PUSH
38837: EMPTY
38838: ST_TO_ADDR
// minerMinesList := [ ] ;
38839: LD_ADDR_EXP 121
38843: PUSH
38844: EMPTY
38845: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38846: LD_ADDR_EXP 122
38850: PUSH
38851: LD_INT 5
38853: ST_TO_ADDR
// end ;
38854: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38855: LD_EXP 119
38859: PUSH
38860: LD_INT 34
38862: PUSH
38863: LD_INT 81
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PPUSH
38870: CALL_OW 69
38874: AND
38875: IFFALSE 39336
38877: GO 38879
38879: DISABLE
38880: LD_INT 0
38882: PPUSH
38883: PPUSH
38884: PPUSH
38885: PPUSH
// begin enable ;
38886: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38887: LD_ADDR_VAR 0 1
38891: PUSH
38892: LD_INT 34
38894: PUSH
38895: LD_INT 81
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PPUSH
38902: CALL_OW 69
38906: PUSH
38907: FOR_IN
38908: IFFALSE 38980
// begin if not i in minersList then
38910: LD_VAR 0 1
38914: PUSH
38915: LD_EXP 120
38919: IN
38920: NOT
38921: IFFALSE 38978
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38923: LD_ADDR_EXP 120
38927: PUSH
38928: LD_EXP 120
38932: PPUSH
38933: LD_EXP 120
38937: PUSH
38938: LD_INT 1
38940: PLUS
38941: PPUSH
38942: LD_VAR 0 1
38946: PPUSH
38947: CALL_OW 1
38951: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38952: LD_ADDR_EXP 121
38956: PUSH
38957: LD_EXP 121
38961: PPUSH
38962: LD_EXP 121
38966: PUSH
38967: LD_INT 1
38969: PLUS
38970: PPUSH
38971: EMPTY
38972: PPUSH
38973: CALL_OW 1
38977: ST_TO_ADDR
// end end ;
38978: GO 38907
38980: POP
38981: POP
// for i := minerMinesList downto 1 do
38982: LD_ADDR_VAR 0 1
38986: PUSH
38987: DOUBLE
38988: LD_EXP 121
38992: INC
38993: ST_TO_ADDR
38994: LD_INT 1
38996: PUSH
38997: FOR_DOWNTO
38998: IFFALSE 39334
// begin if IsLive ( minersList [ i ] ) then
39000: LD_EXP 120
39004: PUSH
39005: LD_VAR 0 1
39009: ARRAY
39010: PPUSH
39011: CALL_OW 300
39015: IFFALSE 39043
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39017: LD_EXP 120
39021: PUSH
39022: LD_VAR 0 1
39026: ARRAY
39027: PPUSH
39028: LD_EXP 121
39032: PUSH
39033: LD_VAR 0 1
39037: ARRAY
39038: PPUSH
39039: CALL_OW 505
// if not minerMinesList [ i ] then
39043: LD_EXP 121
39047: PUSH
39048: LD_VAR 0 1
39052: ARRAY
39053: NOT
39054: IFFALSE 39058
// continue ;
39056: GO 38997
// for j := minerMinesList [ i ] downto 1 do
39058: LD_ADDR_VAR 0 2
39062: PUSH
39063: DOUBLE
39064: LD_EXP 121
39068: PUSH
39069: LD_VAR 0 1
39073: ARRAY
39074: INC
39075: ST_TO_ADDR
39076: LD_INT 1
39078: PUSH
39079: FOR_DOWNTO
39080: IFFALSE 39330
// begin side := GetSide ( minersList [ i ] ) ;
39082: LD_ADDR_VAR 0 3
39086: PUSH
39087: LD_EXP 120
39091: PUSH
39092: LD_VAR 0 1
39096: ARRAY
39097: PPUSH
39098: CALL_OW 255
39102: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39103: LD_ADDR_VAR 0 4
39107: PUSH
39108: LD_EXP 121
39112: PUSH
39113: LD_VAR 0 1
39117: ARRAY
39118: PUSH
39119: LD_VAR 0 2
39123: ARRAY
39124: PUSH
39125: LD_INT 1
39127: ARRAY
39128: PPUSH
39129: LD_EXP 121
39133: PUSH
39134: LD_VAR 0 1
39138: ARRAY
39139: PUSH
39140: LD_VAR 0 2
39144: ARRAY
39145: PUSH
39146: LD_INT 2
39148: ARRAY
39149: PPUSH
39150: CALL_OW 428
39154: ST_TO_ADDR
// if not tmp then
39155: LD_VAR 0 4
39159: NOT
39160: IFFALSE 39164
// continue ;
39162: GO 39079
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39164: LD_VAR 0 4
39168: PUSH
39169: LD_INT 81
39171: PUSH
39172: LD_VAR 0 3
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PPUSH
39181: CALL_OW 69
39185: IN
39186: PUSH
39187: LD_EXP 121
39191: PUSH
39192: LD_VAR 0 1
39196: ARRAY
39197: PUSH
39198: LD_VAR 0 2
39202: ARRAY
39203: PUSH
39204: LD_INT 1
39206: ARRAY
39207: PPUSH
39208: LD_EXP 121
39212: PUSH
39213: LD_VAR 0 1
39217: ARRAY
39218: PUSH
39219: LD_VAR 0 2
39223: ARRAY
39224: PUSH
39225: LD_INT 2
39227: ARRAY
39228: PPUSH
39229: CALL_OW 458
39233: AND
39234: IFFALSE 39328
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39236: LD_EXP 121
39240: PUSH
39241: LD_VAR 0 1
39245: ARRAY
39246: PUSH
39247: LD_VAR 0 2
39251: ARRAY
39252: PUSH
39253: LD_INT 1
39255: ARRAY
39256: PPUSH
39257: LD_EXP 121
39261: PUSH
39262: LD_VAR 0 1
39266: ARRAY
39267: PUSH
39268: LD_VAR 0 2
39272: ARRAY
39273: PUSH
39274: LD_INT 2
39276: ARRAY
39277: PPUSH
39278: LD_VAR 0 3
39282: PPUSH
39283: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39287: LD_ADDR_EXP 121
39291: PUSH
39292: LD_EXP 121
39296: PPUSH
39297: LD_VAR 0 1
39301: PPUSH
39302: LD_EXP 121
39306: PUSH
39307: LD_VAR 0 1
39311: ARRAY
39312: PPUSH
39313: LD_VAR 0 2
39317: PPUSH
39318: CALL_OW 3
39322: PPUSH
39323: CALL_OW 1
39327: ST_TO_ADDR
// end ; end ;
39328: GO 39079
39330: POP
39331: POP
// end ;
39332: GO 38997
39334: POP
39335: POP
// end ;
39336: PPOPN 4
39338: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39339: LD_INT 0
39341: PPUSH
39342: PPUSH
// result := false ;
39343: LD_ADDR_VAR 0 4
39347: PUSH
39348: LD_INT 0
39350: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39351: LD_VAR 0 1
39355: PPUSH
39356: CALL_OW 264
39360: PUSH
39361: LD_INT 81
39363: EQUAL
39364: NOT
39365: IFFALSE 39369
// exit ;
39367: GO 39609
// index := GetElementIndex ( minersList , unit ) ;
39369: LD_ADDR_VAR 0 5
39373: PUSH
39374: LD_EXP 120
39378: PPUSH
39379: LD_VAR 0 1
39383: PPUSH
39384: CALL 45567 0 2
39388: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39389: LD_EXP 121
39393: PUSH
39394: LD_VAR 0 5
39398: ARRAY
39399: PUSH
39400: LD_EXP 122
39404: GREATEREQUAL
39405: IFFALSE 39409
// exit ;
39407: GO 39609
// ComMoveXY ( unit , x , y ) ;
39409: LD_VAR 0 1
39413: PPUSH
39414: LD_VAR 0 2
39418: PPUSH
39419: LD_VAR 0 3
39423: PPUSH
39424: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39428: LD_INT 35
39430: PPUSH
39431: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39435: LD_VAR 0 1
39439: PPUSH
39440: LD_VAR 0 2
39444: PPUSH
39445: LD_VAR 0 3
39449: PPUSH
39450: CALL 77308 0 3
39454: NOT
39455: PUSH
39456: LD_VAR 0 1
39460: PPUSH
39461: CALL_OW 314
39465: AND
39466: IFFALSE 39470
// exit ;
39468: GO 39609
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39470: LD_VAR 0 2
39474: PPUSH
39475: LD_VAR 0 3
39479: PPUSH
39480: CALL_OW 428
39484: PUSH
39485: LD_VAR 0 1
39489: EQUAL
39490: PUSH
39491: LD_VAR 0 1
39495: PPUSH
39496: CALL_OW 314
39500: NOT
39501: AND
39502: IFFALSE 39428
// PlaySoundXY ( x , y , PlantMine ) ;
39504: LD_VAR 0 2
39508: PPUSH
39509: LD_VAR 0 3
39513: PPUSH
39514: LD_STRING PlantMine
39516: PPUSH
39517: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39521: LD_VAR 0 2
39525: PPUSH
39526: LD_VAR 0 3
39530: PPUSH
39531: LD_VAR 0 1
39535: PPUSH
39536: CALL_OW 255
39540: PPUSH
39541: LD_INT 0
39543: PPUSH
39544: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39548: LD_ADDR_EXP 121
39552: PUSH
39553: LD_EXP 121
39557: PPUSH
39558: LD_VAR 0 5
39562: PUSH
39563: LD_EXP 121
39567: PUSH
39568: LD_VAR 0 5
39572: ARRAY
39573: PUSH
39574: LD_INT 1
39576: PLUS
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PPUSH
39582: LD_VAR 0 2
39586: PUSH
39587: LD_VAR 0 3
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PPUSH
39596: CALL 45782 0 3
39600: ST_TO_ADDR
// result := true ;
39601: LD_ADDR_VAR 0 4
39605: PUSH
39606: LD_INT 1
39608: ST_TO_ADDR
// end ;
39609: LD_VAR 0 4
39613: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39614: LD_INT 0
39616: PPUSH
39617: PPUSH
39618: PPUSH
// if not unit in minersList then
39619: LD_VAR 0 1
39623: PUSH
39624: LD_EXP 120
39628: IN
39629: NOT
39630: IFFALSE 39634
// exit ;
39632: GO 40026
// index := GetElementIndex ( minersList , unit ) ;
39634: LD_ADDR_VAR 0 6
39638: PUSH
39639: LD_EXP 120
39643: PPUSH
39644: LD_VAR 0 1
39648: PPUSH
39649: CALL 45567 0 2
39653: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39654: LD_ADDR_VAR 0 5
39658: PUSH
39659: DOUBLE
39660: LD_EXP 121
39664: PUSH
39665: LD_VAR 0 6
39669: ARRAY
39670: INC
39671: ST_TO_ADDR
39672: LD_INT 1
39674: PUSH
39675: FOR_DOWNTO
39676: IFFALSE 39837
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39678: LD_EXP 121
39682: PUSH
39683: LD_VAR 0 6
39687: ARRAY
39688: PUSH
39689: LD_VAR 0 5
39693: ARRAY
39694: PUSH
39695: LD_INT 1
39697: ARRAY
39698: PUSH
39699: LD_VAR 0 2
39703: EQUAL
39704: PUSH
39705: LD_EXP 121
39709: PUSH
39710: LD_VAR 0 6
39714: ARRAY
39715: PUSH
39716: LD_VAR 0 5
39720: ARRAY
39721: PUSH
39722: LD_INT 2
39724: ARRAY
39725: PUSH
39726: LD_VAR 0 3
39730: EQUAL
39731: AND
39732: IFFALSE 39835
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39734: LD_EXP 121
39738: PUSH
39739: LD_VAR 0 6
39743: ARRAY
39744: PUSH
39745: LD_VAR 0 5
39749: ARRAY
39750: PUSH
39751: LD_INT 1
39753: ARRAY
39754: PPUSH
39755: LD_EXP 121
39759: PUSH
39760: LD_VAR 0 6
39764: ARRAY
39765: PUSH
39766: LD_VAR 0 5
39770: ARRAY
39771: PUSH
39772: LD_INT 2
39774: ARRAY
39775: PPUSH
39776: LD_VAR 0 1
39780: PPUSH
39781: CALL_OW 255
39785: PPUSH
39786: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39790: LD_ADDR_EXP 121
39794: PUSH
39795: LD_EXP 121
39799: PPUSH
39800: LD_VAR 0 6
39804: PPUSH
39805: LD_EXP 121
39809: PUSH
39810: LD_VAR 0 6
39814: ARRAY
39815: PPUSH
39816: LD_VAR 0 5
39820: PPUSH
39821: CALL_OW 3
39825: PPUSH
39826: CALL_OW 1
39830: ST_TO_ADDR
// exit ;
39831: POP
39832: POP
39833: GO 40026
// end ; end ;
39835: GO 39675
39837: POP
39838: POP
// for i := minerMinesList [ index ] downto 1 do
39839: LD_ADDR_VAR 0 5
39843: PUSH
39844: DOUBLE
39845: LD_EXP 121
39849: PUSH
39850: LD_VAR 0 6
39854: ARRAY
39855: INC
39856: ST_TO_ADDR
39857: LD_INT 1
39859: PUSH
39860: FOR_DOWNTO
39861: IFFALSE 40024
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39863: LD_EXP 121
39867: PUSH
39868: LD_VAR 0 6
39872: ARRAY
39873: PUSH
39874: LD_VAR 0 5
39878: ARRAY
39879: PUSH
39880: LD_INT 1
39882: ARRAY
39883: PPUSH
39884: LD_EXP 121
39888: PUSH
39889: LD_VAR 0 6
39893: ARRAY
39894: PUSH
39895: LD_VAR 0 5
39899: ARRAY
39900: PUSH
39901: LD_INT 2
39903: ARRAY
39904: PPUSH
39905: LD_VAR 0 2
39909: PPUSH
39910: LD_VAR 0 3
39914: PPUSH
39915: CALL_OW 298
39919: PUSH
39920: LD_INT 6
39922: LESS
39923: IFFALSE 40022
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39925: LD_EXP 121
39929: PUSH
39930: LD_VAR 0 6
39934: ARRAY
39935: PUSH
39936: LD_VAR 0 5
39940: ARRAY
39941: PUSH
39942: LD_INT 1
39944: ARRAY
39945: PPUSH
39946: LD_EXP 121
39950: PUSH
39951: LD_VAR 0 6
39955: ARRAY
39956: PUSH
39957: LD_VAR 0 5
39961: ARRAY
39962: PUSH
39963: LD_INT 2
39965: ARRAY
39966: PPUSH
39967: LD_VAR 0 1
39971: PPUSH
39972: CALL_OW 255
39976: PPUSH
39977: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39981: LD_ADDR_EXP 121
39985: PUSH
39986: LD_EXP 121
39990: PPUSH
39991: LD_VAR 0 6
39995: PPUSH
39996: LD_EXP 121
40000: PUSH
40001: LD_VAR 0 6
40005: ARRAY
40006: PPUSH
40007: LD_VAR 0 5
40011: PPUSH
40012: CALL_OW 3
40016: PPUSH
40017: CALL_OW 1
40021: ST_TO_ADDR
// end ; end ;
40022: GO 39860
40024: POP
40025: POP
// end ;
40026: LD_VAR 0 4
40030: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40031: LD_INT 0
40033: PPUSH
40034: PPUSH
40035: PPUSH
40036: PPUSH
40037: PPUSH
40038: PPUSH
40039: PPUSH
40040: PPUSH
40041: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40042: LD_VAR 0 1
40046: PPUSH
40047: CALL_OW 264
40051: PUSH
40052: LD_INT 81
40054: EQUAL
40055: NOT
40056: PUSH
40057: LD_VAR 0 1
40061: PUSH
40062: LD_EXP 120
40066: IN
40067: NOT
40068: OR
40069: IFFALSE 40073
// exit ;
40071: GO 40395
// index := GetElementIndex ( minersList , unit ) ;
40073: LD_ADDR_VAR 0 6
40077: PUSH
40078: LD_EXP 120
40082: PPUSH
40083: LD_VAR 0 1
40087: PPUSH
40088: CALL 45567 0 2
40092: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40093: LD_ADDR_VAR 0 8
40097: PUSH
40098: LD_EXP 122
40102: PUSH
40103: LD_EXP 121
40107: PUSH
40108: LD_VAR 0 6
40112: ARRAY
40113: MINUS
40114: ST_TO_ADDR
// if not minesFreeAmount then
40115: LD_VAR 0 8
40119: NOT
40120: IFFALSE 40124
// exit ;
40122: GO 40395
// tmp := [ ] ;
40124: LD_ADDR_VAR 0 7
40128: PUSH
40129: EMPTY
40130: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40131: LD_ADDR_VAR 0 5
40135: PUSH
40136: DOUBLE
40137: LD_INT 1
40139: DEC
40140: ST_TO_ADDR
40141: LD_VAR 0 8
40145: PUSH
40146: FOR_TO
40147: IFFALSE 40342
// begin _d := rand ( 0 , 5 ) ;
40149: LD_ADDR_VAR 0 11
40153: PUSH
40154: LD_INT 0
40156: PPUSH
40157: LD_INT 5
40159: PPUSH
40160: CALL_OW 12
40164: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40165: LD_ADDR_VAR 0 12
40169: PUSH
40170: LD_INT 2
40172: PPUSH
40173: LD_INT 6
40175: PPUSH
40176: CALL_OW 12
40180: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40181: LD_ADDR_VAR 0 9
40185: PUSH
40186: LD_VAR 0 2
40190: PPUSH
40191: LD_VAR 0 11
40195: PPUSH
40196: LD_VAR 0 12
40200: PPUSH
40201: CALL_OW 272
40205: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40206: LD_ADDR_VAR 0 10
40210: PUSH
40211: LD_VAR 0 3
40215: PPUSH
40216: LD_VAR 0 11
40220: PPUSH
40221: LD_VAR 0 12
40225: PPUSH
40226: CALL_OW 273
40230: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40231: LD_VAR 0 9
40235: PPUSH
40236: LD_VAR 0 10
40240: PPUSH
40241: CALL_OW 488
40245: PUSH
40246: LD_VAR 0 9
40250: PUSH
40251: LD_VAR 0 10
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_VAR 0 7
40264: IN
40265: NOT
40266: AND
40267: PUSH
40268: LD_VAR 0 9
40272: PPUSH
40273: LD_VAR 0 10
40277: PPUSH
40278: CALL_OW 458
40282: NOT
40283: AND
40284: IFFALSE 40326
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40286: LD_ADDR_VAR 0 7
40290: PUSH
40291: LD_VAR 0 7
40295: PPUSH
40296: LD_VAR 0 7
40300: PUSH
40301: LD_INT 1
40303: PLUS
40304: PPUSH
40305: LD_VAR 0 9
40309: PUSH
40310: LD_VAR 0 10
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PPUSH
40319: CALL_OW 1
40323: ST_TO_ADDR
40324: GO 40340
// i := i - 1 ;
40326: LD_ADDR_VAR 0 5
40330: PUSH
40331: LD_VAR 0 5
40335: PUSH
40336: LD_INT 1
40338: MINUS
40339: ST_TO_ADDR
// end ;
40340: GO 40146
40342: POP
40343: POP
// for i in tmp do
40344: LD_ADDR_VAR 0 5
40348: PUSH
40349: LD_VAR 0 7
40353: PUSH
40354: FOR_IN
40355: IFFALSE 40393
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40357: LD_VAR 0 1
40361: PPUSH
40362: LD_VAR 0 5
40366: PUSH
40367: LD_INT 1
40369: ARRAY
40370: PPUSH
40371: LD_VAR 0 5
40375: PUSH
40376: LD_INT 2
40378: ARRAY
40379: PPUSH
40380: CALL 39339 0 3
40384: NOT
40385: IFFALSE 40391
// exit ;
40387: POP
40388: POP
40389: GO 40395
40391: GO 40354
40393: POP
40394: POP
// end ;
40395: LD_VAR 0 4
40399: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40400: LD_INT 0
40402: PPUSH
40403: PPUSH
40404: PPUSH
40405: PPUSH
40406: PPUSH
40407: PPUSH
40408: PPUSH
// if not GetClass ( unit ) = class_sniper then
40409: LD_VAR 0 1
40413: PPUSH
40414: CALL_OW 257
40418: PUSH
40419: LD_INT 5
40421: EQUAL
40422: NOT
40423: IFFALSE 40427
// exit ;
40425: GO 40815
// dist := 8 ;
40427: LD_ADDR_VAR 0 5
40431: PUSH
40432: LD_INT 8
40434: ST_TO_ADDR
// viewRange := 12 ;
40435: LD_ADDR_VAR 0 7
40439: PUSH
40440: LD_INT 12
40442: ST_TO_ADDR
// side := GetSide ( unit ) ;
40443: LD_ADDR_VAR 0 6
40447: PUSH
40448: LD_VAR 0 1
40452: PPUSH
40453: CALL_OW 255
40457: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40458: LD_INT 61
40460: PPUSH
40461: LD_VAR 0 6
40465: PPUSH
40466: CALL_OW 321
40470: PUSH
40471: LD_INT 2
40473: EQUAL
40474: IFFALSE 40484
// viewRange := 16 ;
40476: LD_ADDR_VAR 0 7
40480: PUSH
40481: LD_INT 16
40483: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40484: LD_VAR 0 1
40488: PPUSH
40489: LD_VAR 0 2
40493: PPUSH
40494: LD_VAR 0 3
40498: PPUSH
40499: CALL_OW 297
40503: PUSH
40504: LD_VAR 0 5
40508: GREATER
40509: IFFALSE 40588
// begin ComMoveXY ( unit , x , y ) ;
40511: LD_VAR 0 1
40515: PPUSH
40516: LD_VAR 0 2
40520: PPUSH
40521: LD_VAR 0 3
40525: PPUSH
40526: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40530: LD_INT 35
40532: PPUSH
40533: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40537: LD_VAR 0 1
40541: PPUSH
40542: LD_VAR 0 2
40546: PPUSH
40547: LD_VAR 0 3
40551: PPUSH
40552: CALL 77308 0 3
40556: NOT
40557: IFFALSE 40561
// exit ;
40559: GO 40815
// until GetDistUnitXY ( unit , x , y ) < dist ;
40561: LD_VAR 0 1
40565: PPUSH
40566: LD_VAR 0 2
40570: PPUSH
40571: LD_VAR 0 3
40575: PPUSH
40576: CALL_OW 297
40580: PUSH
40581: LD_VAR 0 5
40585: LESS
40586: IFFALSE 40530
// end ; ComTurnXY ( unit , x , y ) ;
40588: LD_VAR 0 1
40592: PPUSH
40593: LD_VAR 0 2
40597: PPUSH
40598: LD_VAR 0 3
40602: PPUSH
40603: CALL_OW 118
// wait ( 5 ) ;
40607: LD_INT 5
40609: PPUSH
40610: CALL_OW 67
// _d := GetDir ( unit ) ;
40614: LD_ADDR_VAR 0 10
40618: PUSH
40619: LD_VAR 0 1
40623: PPUSH
40624: CALL_OW 254
40628: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40629: LD_ADDR_VAR 0 8
40633: PUSH
40634: LD_VAR 0 1
40638: PPUSH
40639: CALL_OW 250
40643: PPUSH
40644: LD_VAR 0 10
40648: PPUSH
40649: LD_VAR 0 5
40653: PPUSH
40654: CALL_OW 272
40658: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40659: LD_ADDR_VAR 0 9
40663: PUSH
40664: LD_VAR 0 1
40668: PPUSH
40669: CALL_OW 251
40673: PPUSH
40674: LD_VAR 0 10
40678: PPUSH
40679: LD_VAR 0 5
40683: PPUSH
40684: CALL_OW 273
40688: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40689: LD_VAR 0 8
40693: PPUSH
40694: LD_VAR 0 9
40698: PPUSH
40699: CALL_OW 488
40703: NOT
40704: IFFALSE 40708
// exit ;
40706: GO 40815
// ComAnimCustom ( unit , 1 ) ;
40708: LD_VAR 0 1
40712: PPUSH
40713: LD_INT 1
40715: PPUSH
40716: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40720: LD_VAR 0 8
40724: PPUSH
40725: LD_VAR 0 9
40729: PPUSH
40730: LD_VAR 0 6
40734: PPUSH
40735: LD_VAR 0 7
40739: PPUSH
40740: CALL_OW 330
// repeat wait ( 1 ) ;
40744: LD_INT 1
40746: PPUSH
40747: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40751: LD_VAR 0 1
40755: PPUSH
40756: CALL_OW 316
40760: PUSH
40761: LD_VAR 0 1
40765: PPUSH
40766: CALL_OW 314
40770: OR
40771: PUSH
40772: LD_VAR 0 1
40776: PPUSH
40777: CALL_OW 302
40781: NOT
40782: OR
40783: PUSH
40784: LD_VAR 0 1
40788: PPUSH
40789: CALL_OW 301
40793: OR
40794: IFFALSE 40744
// RemoveSeeing ( _x , _y , side ) ;
40796: LD_VAR 0 8
40800: PPUSH
40801: LD_VAR 0 9
40805: PPUSH
40806: LD_VAR 0 6
40810: PPUSH
40811: CALL_OW 331
// end ; end_of_file
40815: LD_VAR 0 4
40819: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40820: LD_INT 0
40822: PPUSH
40823: PPUSH
// if exist_mode then
40824: LD_VAR 0 2
40828: IFFALSE 40853
// unit := CreateCharacter ( prefix & ident ) else
40830: LD_ADDR_VAR 0 5
40834: PUSH
40835: LD_VAR 0 3
40839: PUSH
40840: LD_VAR 0 1
40844: STR
40845: PPUSH
40846: CALL_OW 34
40850: ST_TO_ADDR
40851: GO 40868
// unit := NewCharacter ( ident ) ;
40853: LD_ADDR_VAR 0 5
40857: PUSH
40858: LD_VAR 0 1
40862: PPUSH
40863: CALL_OW 25
40867: ST_TO_ADDR
// result := unit ;
40868: LD_ADDR_VAR 0 4
40872: PUSH
40873: LD_VAR 0 5
40877: ST_TO_ADDR
// end ;
40878: LD_VAR 0 4
40882: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40883: LD_INT 0
40885: PPUSH
40886: PPUSH
// if not side or not nation then
40887: LD_VAR 0 1
40891: NOT
40892: PUSH
40893: LD_VAR 0 2
40897: NOT
40898: OR
40899: IFFALSE 40903
// exit ;
40901: GO 41671
// case nation of nation_american :
40903: LD_VAR 0 2
40907: PUSH
40908: LD_INT 1
40910: DOUBLE
40911: EQUAL
40912: IFTRUE 40916
40914: GO 41130
40916: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40917: LD_ADDR_VAR 0 4
40921: PUSH
40922: LD_INT 35
40924: PUSH
40925: LD_INT 45
40927: PUSH
40928: LD_INT 46
40930: PUSH
40931: LD_INT 47
40933: PUSH
40934: LD_INT 82
40936: PUSH
40937: LD_INT 83
40939: PUSH
40940: LD_INT 84
40942: PUSH
40943: LD_INT 85
40945: PUSH
40946: LD_INT 86
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 6
40957: PUSH
40958: LD_INT 15
40960: PUSH
40961: LD_INT 16
40963: PUSH
40964: LD_INT 7
40966: PUSH
40967: LD_INT 12
40969: PUSH
40970: LD_INT 13
40972: PUSH
40973: LD_INT 10
40975: PUSH
40976: LD_INT 14
40978: PUSH
40979: LD_INT 20
40981: PUSH
40982: LD_INT 21
40984: PUSH
40985: LD_INT 22
40987: PUSH
40988: LD_INT 25
40990: PUSH
40991: LD_INT 32
40993: PUSH
40994: LD_INT 27
40996: PUSH
40997: LD_INT 36
40999: PUSH
41000: LD_INT 69
41002: PUSH
41003: LD_INT 39
41005: PUSH
41006: LD_INT 34
41008: PUSH
41009: LD_INT 40
41011: PUSH
41012: LD_INT 48
41014: PUSH
41015: LD_INT 49
41017: PUSH
41018: LD_INT 50
41020: PUSH
41021: LD_INT 51
41023: PUSH
41024: LD_INT 52
41026: PUSH
41027: LD_INT 53
41029: PUSH
41030: LD_INT 54
41032: PUSH
41033: LD_INT 55
41035: PUSH
41036: LD_INT 56
41038: PUSH
41039: LD_INT 57
41041: PUSH
41042: LD_INT 58
41044: PUSH
41045: LD_INT 59
41047: PUSH
41048: LD_INT 60
41050: PUSH
41051: LD_INT 61
41053: PUSH
41054: LD_INT 62
41056: PUSH
41057: LD_INT 80
41059: PUSH
41060: LD_INT 82
41062: PUSH
41063: LD_INT 83
41065: PUSH
41066: LD_INT 84
41068: PUSH
41069: LD_INT 85
41071: PUSH
41072: LD_INT 86
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: ST_TO_ADDR
41128: GO 41595
41130: LD_INT 2
41132: DOUBLE
41133: EQUAL
41134: IFTRUE 41138
41136: GO 41364
41138: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41139: LD_ADDR_VAR 0 4
41143: PUSH
41144: LD_INT 35
41146: PUSH
41147: LD_INT 45
41149: PUSH
41150: LD_INT 46
41152: PUSH
41153: LD_INT 47
41155: PUSH
41156: LD_INT 82
41158: PUSH
41159: LD_INT 83
41161: PUSH
41162: LD_INT 84
41164: PUSH
41165: LD_INT 85
41167: PUSH
41168: LD_INT 87
41170: PUSH
41171: LD_INT 70
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: LD_INT 11
41179: PUSH
41180: LD_INT 3
41182: PUSH
41183: LD_INT 4
41185: PUSH
41186: LD_INT 5
41188: PUSH
41189: LD_INT 6
41191: PUSH
41192: LD_INT 15
41194: PUSH
41195: LD_INT 18
41197: PUSH
41198: LD_INT 7
41200: PUSH
41201: LD_INT 17
41203: PUSH
41204: LD_INT 8
41206: PUSH
41207: LD_INT 20
41209: PUSH
41210: LD_INT 21
41212: PUSH
41213: LD_INT 22
41215: PUSH
41216: LD_INT 72
41218: PUSH
41219: LD_INT 26
41221: PUSH
41222: LD_INT 69
41224: PUSH
41225: LD_INT 39
41227: PUSH
41228: LD_INT 40
41230: PUSH
41231: LD_INT 41
41233: PUSH
41234: LD_INT 42
41236: PUSH
41237: LD_INT 43
41239: PUSH
41240: LD_INT 48
41242: PUSH
41243: LD_INT 49
41245: PUSH
41246: LD_INT 50
41248: PUSH
41249: LD_INT 51
41251: PUSH
41252: LD_INT 52
41254: PUSH
41255: LD_INT 53
41257: PUSH
41258: LD_INT 54
41260: PUSH
41261: LD_INT 55
41263: PUSH
41264: LD_INT 56
41266: PUSH
41267: LD_INT 60
41269: PUSH
41270: LD_INT 61
41272: PUSH
41273: LD_INT 62
41275: PUSH
41276: LD_INT 66
41278: PUSH
41279: LD_INT 67
41281: PUSH
41282: LD_INT 68
41284: PUSH
41285: LD_INT 81
41287: PUSH
41288: LD_INT 82
41290: PUSH
41291: LD_INT 83
41293: PUSH
41294: LD_INT 84
41296: PUSH
41297: LD_INT 85
41299: PUSH
41300: LD_INT 87
41302: PUSH
41303: LD_INT 88
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: ST_TO_ADDR
41362: GO 41595
41364: LD_INT 3
41366: DOUBLE
41367: EQUAL
41368: IFTRUE 41372
41370: GO 41594
41372: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41373: LD_ADDR_VAR 0 4
41377: PUSH
41378: LD_INT 46
41380: PUSH
41381: LD_INT 47
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: LD_INT 82
41392: PUSH
41393: LD_INT 83
41395: PUSH
41396: LD_INT 84
41398: PUSH
41399: LD_INT 85
41401: PUSH
41402: LD_INT 86
41404: PUSH
41405: LD_INT 11
41407: PUSH
41408: LD_INT 9
41410: PUSH
41411: LD_INT 20
41413: PUSH
41414: LD_INT 19
41416: PUSH
41417: LD_INT 21
41419: PUSH
41420: LD_INT 24
41422: PUSH
41423: LD_INT 22
41425: PUSH
41426: LD_INT 25
41428: PUSH
41429: LD_INT 28
41431: PUSH
41432: LD_INT 29
41434: PUSH
41435: LD_INT 30
41437: PUSH
41438: LD_INT 31
41440: PUSH
41441: LD_INT 37
41443: PUSH
41444: LD_INT 38
41446: PUSH
41447: LD_INT 32
41449: PUSH
41450: LD_INT 27
41452: PUSH
41453: LD_INT 33
41455: PUSH
41456: LD_INT 69
41458: PUSH
41459: LD_INT 39
41461: PUSH
41462: LD_INT 34
41464: PUSH
41465: LD_INT 40
41467: PUSH
41468: LD_INT 71
41470: PUSH
41471: LD_INT 23
41473: PUSH
41474: LD_INT 44
41476: PUSH
41477: LD_INT 48
41479: PUSH
41480: LD_INT 49
41482: PUSH
41483: LD_INT 50
41485: PUSH
41486: LD_INT 51
41488: PUSH
41489: LD_INT 52
41491: PUSH
41492: LD_INT 53
41494: PUSH
41495: LD_INT 54
41497: PUSH
41498: LD_INT 55
41500: PUSH
41501: LD_INT 56
41503: PUSH
41504: LD_INT 57
41506: PUSH
41507: LD_INT 58
41509: PUSH
41510: LD_INT 59
41512: PUSH
41513: LD_INT 63
41515: PUSH
41516: LD_INT 64
41518: PUSH
41519: LD_INT 65
41521: PUSH
41522: LD_INT 82
41524: PUSH
41525: LD_INT 83
41527: PUSH
41528: LD_INT 84
41530: PUSH
41531: LD_INT 85
41533: PUSH
41534: LD_INT 86
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: ST_TO_ADDR
41592: GO 41595
41594: POP
// if state > - 1 and state < 3 then
41595: LD_VAR 0 3
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: GREATER
41604: PUSH
41605: LD_VAR 0 3
41609: PUSH
41610: LD_INT 3
41612: LESS
41613: AND
41614: IFFALSE 41671
// for i in result do
41616: LD_ADDR_VAR 0 5
41620: PUSH
41621: LD_VAR 0 4
41625: PUSH
41626: FOR_IN
41627: IFFALSE 41669
// if GetTech ( i , side ) <> state then
41629: LD_VAR 0 5
41633: PPUSH
41634: LD_VAR 0 1
41638: PPUSH
41639: CALL_OW 321
41643: PUSH
41644: LD_VAR 0 3
41648: NONEQUAL
41649: IFFALSE 41667
// result := result diff i ;
41651: LD_ADDR_VAR 0 4
41655: PUSH
41656: LD_VAR 0 4
41660: PUSH
41661: LD_VAR 0 5
41665: DIFF
41666: ST_TO_ADDR
41667: GO 41626
41669: POP
41670: POP
// end ;
41671: LD_VAR 0 4
41675: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41676: LD_INT 0
41678: PPUSH
41679: PPUSH
41680: PPUSH
// result := true ;
41681: LD_ADDR_VAR 0 3
41685: PUSH
41686: LD_INT 1
41688: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41689: LD_ADDR_VAR 0 5
41693: PUSH
41694: LD_VAR 0 2
41698: PPUSH
41699: CALL_OW 480
41703: ST_TO_ADDR
// if not tmp then
41704: LD_VAR 0 5
41708: NOT
41709: IFFALSE 41713
// exit ;
41711: GO 41762
// for i in tmp do
41713: LD_ADDR_VAR 0 4
41717: PUSH
41718: LD_VAR 0 5
41722: PUSH
41723: FOR_IN
41724: IFFALSE 41760
// if GetTech ( i , side ) <> state_researched then
41726: LD_VAR 0 4
41730: PPUSH
41731: LD_VAR 0 1
41735: PPUSH
41736: CALL_OW 321
41740: PUSH
41741: LD_INT 2
41743: NONEQUAL
41744: IFFALSE 41758
// begin result := false ;
41746: LD_ADDR_VAR 0 3
41750: PUSH
41751: LD_INT 0
41753: ST_TO_ADDR
// exit ;
41754: POP
41755: POP
41756: GO 41762
// end ;
41758: GO 41723
41760: POP
41761: POP
// end ;
41762: LD_VAR 0 3
41766: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41767: LD_INT 0
41769: PPUSH
41770: PPUSH
41771: PPUSH
41772: PPUSH
41773: PPUSH
41774: PPUSH
41775: PPUSH
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41782: LD_VAR 0 1
41786: NOT
41787: PUSH
41788: LD_VAR 0 1
41792: PPUSH
41793: CALL_OW 257
41797: PUSH
41798: LD_INT 9
41800: NONEQUAL
41801: OR
41802: IFFALSE 41806
// exit ;
41804: GO 42379
// side := GetSide ( unit ) ;
41806: LD_ADDR_VAR 0 9
41810: PUSH
41811: LD_VAR 0 1
41815: PPUSH
41816: CALL_OW 255
41820: ST_TO_ADDR
// tech_space := tech_spacanom ;
41821: LD_ADDR_VAR 0 12
41825: PUSH
41826: LD_INT 29
41828: ST_TO_ADDR
// tech_time := tech_taurad ;
41829: LD_ADDR_VAR 0 13
41833: PUSH
41834: LD_INT 28
41836: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41837: LD_ADDR_VAR 0 11
41841: PUSH
41842: LD_VAR 0 1
41846: PPUSH
41847: CALL_OW 310
41851: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41852: LD_VAR 0 11
41856: PPUSH
41857: CALL_OW 247
41861: PUSH
41862: LD_INT 2
41864: EQUAL
41865: IFFALSE 41869
// exit ;
41867: GO 42379
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41869: LD_ADDR_VAR 0 8
41873: PUSH
41874: LD_INT 81
41876: PUSH
41877: LD_VAR 0 9
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 3
41888: PUSH
41889: LD_INT 21
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PPUSH
41907: CALL_OW 69
41911: ST_TO_ADDR
// if not tmp then
41912: LD_VAR 0 8
41916: NOT
41917: IFFALSE 41921
// exit ;
41919: GO 42379
// if in_unit then
41921: LD_VAR 0 11
41925: IFFALSE 41949
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41927: LD_ADDR_VAR 0 10
41931: PUSH
41932: LD_VAR 0 8
41936: PPUSH
41937: LD_VAR 0 11
41941: PPUSH
41942: CALL_OW 74
41946: ST_TO_ADDR
41947: GO 41969
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41949: LD_ADDR_VAR 0 10
41953: PUSH
41954: LD_VAR 0 8
41958: PPUSH
41959: LD_VAR 0 1
41963: PPUSH
41964: CALL_OW 74
41968: ST_TO_ADDR
// if not enemy then
41969: LD_VAR 0 10
41973: NOT
41974: IFFALSE 41978
// exit ;
41976: GO 42379
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41978: LD_VAR 0 11
41982: PUSH
41983: LD_VAR 0 11
41987: PPUSH
41988: LD_VAR 0 10
41992: PPUSH
41993: CALL_OW 296
41997: PUSH
41998: LD_INT 13
42000: GREATER
42001: AND
42002: PUSH
42003: LD_VAR 0 1
42007: PPUSH
42008: LD_VAR 0 10
42012: PPUSH
42013: CALL_OW 296
42017: PUSH
42018: LD_INT 12
42020: GREATER
42021: OR
42022: IFFALSE 42026
// exit ;
42024: GO 42379
// missile := [ 1 ] ;
42026: LD_ADDR_VAR 0 14
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: EMPTY
42035: LIST
42036: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42037: LD_VAR 0 9
42041: PPUSH
42042: LD_VAR 0 12
42046: PPUSH
42047: CALL_OW 325
42051: IFFALSE 42080
// missile := Replace ( missile , missile + 1 , 2 ) ;
42053: LD_ADDR_VAR 0 14
42057: PUSH
42058: LD_VAR 0 14
42062: PPUSH
42063: LD_VAR 0 14
42067: PUSH
42068: LD_INT 1
42070: PLUS
42071: PPUSH
42072: LD_INT 2
42074: PPUSH
42075: CALL_OW 1
42079: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42080: LD_VAR 0 9
42084: PPUSH
42085: LD_VAR 0 13
42089: PPUSH
42090: CALL_OW 325
42094: PUSH
42095: LD_VAR 0 10
42099: PPUSH
42100: CALL_OW 255
42104: PPUSH
42105: LD_VAR 0 13
42109: PPUSH
42110: CALL_OW 325
42114: NOT
42115: AND
42116: IFFALSE 42145
// missile := Replace ( missile , missile + 1 , 3 ) ;
42118: LD_ADDR_VAR 0 14
42122: PUSH
42123: LD_VAR 0 14
42127: PPUSH
42128: LD_VAR 0 14
42132: PUSH
42133: LD_INT 1
42135: PLUS
42136: PPUSH
42137: LD_INT 3
42139: PPUSH
42140: CALL_OW 1
42144: ST_TO_ADDR
// if missile < 2 then
42145: LD_VAR 0 14
42149: PUSH
42150: LD_INT 2
42152: LESS
42153: IFFALSE 42157
// exit ;
42155: GO 42379
// x := GetX ( enemy ) ;
42157: LD_ADDR_VAR 0 4
42161: PUSH
42162: LD_VAR 0 10
42166: PPUSH
42167: CALL_OW 250
42171: ST_TO_ADDR
// y := GetY ( enemy ) ;
42172: LD_ADDR_VAR 0 5
42176: PUSH
42177: LD_VAR 0 10
42181: PPUSH
42182: CALL_OW 251
42186: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42187: LD_ADDR_VAR 0 6
42191: PUSH
42192: LD_VAR 0 4
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PPUSH
42201: LD_INT 1
42203: PPUSH
42204: CALL_OW 12
42208: PLUS
42209: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42210: LD_ADDR_VAR 0 7
42214: PUSH
42215: LD_VAR 0 5
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PPUSH
42224: LD_INT 1
42226: PPUSH
42227: CALL_OW 12
42231: PLUS
42232: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42233: LD_VAR 0 6
42237: PPUSH
42238: LD_VAR 0 7
42242: PPUSH
42243: CALL_OW 488
42247: NOT
42248: IFFALSE 42270
// begin _x := x ;
42250: LD_ADDR_VAR 0 6
42254: PUSH
42255: LD_VAR 0 4
42259: ST_TO_ADDR
// _y := y ;
42260: LD_ADDR_VAR 0 7
42264: PUSH
42265: LD_VAR 0 5
42269: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42270: LD_ADDR_VAR 0 3
42274: PUSH
42275: LD_INT 1
42277: PPUSH
42278: LD_VAR 0 14
42282: PPUSH
42283: CALL_OW 12
42287: ST_TO_ADDR
// case i of 1 :
42288: LD_VAR 0 3
42292: PUSH
42293: LD_INT 1
42295: DOUBLE
42296: EQUAL
42297: IFTRUE 42301
42299: GO 42318
42301: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42302: LD_VAR 0 1
42306: PPUSH
42307: LD_VAR 0 10
42311: PPUSH
42312: CALL_OW 115
42316: GO 42379
42318: LD_INT 2
42320: DOUBLE
42321: EQUAL
42322: IFTRUE 42326
42324: GO 42348
42326: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42327: LD_VAR 0 1
42331: PPUSH
42332: LD_VAR 0 6
42336: PPUSH
42337: LD_VAR 0 7
42341: PPUSH
42342: CALL_OW 153
42346: GO 42379
42348: LD_INT 3
42350: DOUBLE
42351: EQUAL
42352: IFTRUE 42356
42354: GO 42378
42356: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42357: LD_VAR 0 1
42361: PPUSH
42362: LD_VAR 0 6
42366: PPUSH
42367: LD_VAR 0 7
42371: PPUSH
42372: CALL_OW 154
42376: GO 42379
42378: POP
// end ;
42379: LD_VAR 0 2
42383: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42384: LD_INT 0
42386: PPUSH
42387: PPUSH
42388: PPUSH
42389: PPUSH
42390: PPUSH
42391: PPUSH
// if not unit or not building then
42392: LD_VAR 0 1
42396: NOT
42397: PUSH
42398: LD_VAR 0 2
42402: NOT
42403: OR
42404: IFFALSE 42408
// exit ;
42406: GO 42566
// x := GetX ( building ) ;
42408: LD_ADDR_VAR 0 5
42412: PUSH
42413: LD_VAR 0 2
42417: PPUSH
42418: CALL_OW 250
42422: ST_TO_ADDR
// y := GetY ( building ) ;
42423: LD_ADDR_VAR 0 6
42427: PUSH
42428: LD_VAR 0 2
42432: PPUSH
42433: CALL_OW 251
42437: ST_TO_ADDR
// for i = 0 to 5 do
42438: LD_ADDR_VAR 0 4
42442: PUSH
42443: DOUBLE
42444: LD_INT 0
42446: DEC
42447: ST_TO_ADDR
42448: LD_INT 5
42450: PUSH
42451: FOR_TO
42452: IFFALSE 42564
// begin _x := ShiftX ( x , i , 3 ) ;
42454: LD_ADDR_VAR 0 7
42458: PUSH
42459: LD_VAR 0 5
42463: PPUSH
42464: LD_VAR 0 4
42468: PPUSH
42469: LD_INT 3
42471: PPUSH
42472: CALL_OW 272
42476: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42477: LD_ADDR_VAR 0 8
42481: PUSH
42482: LD_VAR 0 6
42486: PPUSH
42487: LD_VAR 0 4
42491: PPUSH
42492: LD_INT 3
42494: PPUSH
42495: CALL_OW 273
42499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42500: LD_VAR 0 7
42504: PPUSH
42505: LD_VAR 0 8
42509: PPUSH
42510: CALL_OW 488
42514: NOT
42515: IFFALSE 42519
// continue ;
42517: GO 42451
// if HexInfo ( _x , _y ) = 0 then
42519: LD_VAR 0 7
42523: PPUSH
42524: LD_VAR 0 8
42528: PPUSH
42529: CALL_OW 428
42533: PUSH
42534: LD_INT 0
42536: EQUAL
42537: IFFALSE 42562
// begin ComMoveXY ( unit , _x , _y ) ;
42539: LD_VAR 0 1
42543: PPUSH
42544: LD_VAR 0 7
42548: PPUSH
42549: LD_VAR 0 8
42553: PPUSH
42554: CALL_OW 111
// exit ;
42558: POP
42559: POP
42560: GO 42566
// end ; end ;
42562: GO 42451
42564: POP
42565: POP
// end ;
42566: LD_VAR 0 3
42570: RET
// export function ScanBase ( side , base_area ) ; begin
42571: LD_INT 0
42573: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42574: LD_ADDR_VAR 0 3
42578: PUSH
42579: LD_VAR 0 2
42583: PPUSH
42584: LD_INT 81
42586: PUSH
42587: LD_VAR 0 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PPUSH
42596: CALL_OW 70
42600: ST_TO_ADDR
// end ;
42601: LD_VAR 0 3
42605: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42606: LD_INT 0
42608: PPUSH
42609: PPUSH
42610: PPUSH
42611: PPUSH
// result := false ;
42612: LD_ADDR_VAR 0 2
42616: PUSH
42617: LD_INT 0
42619: ST_TO_ADDR
// side := GetSide ( unit ) ;
42620: LD_ADDR_VAR 0 3
42624: PUSH
42625: LD_VAR 0 1
42629: PPUSH
42630: CALL_OW 255
42634: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42635: LD_ADDR_VAR 0 4
42639: PUSH
42640: LD_VAR 0 1
42644: PPUSH
42645: CALL_OW 248
42649: ST_TO_ADDR
// case nat of 1 :
42650: LD_VAR 0 4
42654: PUSH
42655: LD_INT 1
42657: DOUBLE
42658: EQUAL
42659: IFTRUE 42663
42661: GO 42674
42663: POP
// tech := tech_lassight ; 2 :
42664: LD_ADDR_VAR 0 5
42668: PUSH
42669: LD_INT 12
42671: ST_TO_ADDR
42672: GO 42713
42674: LD_INT 2
42676: DOUBLE
42677: EQUAL
42678: IFTRUE 42682
42680: GO 42693
42682: POP
// tech := tech_mortar ; 3 :
42683: LD_ADDR_VAR 0 5
42687: PUSH
42688: LD_INT 41
42690: ST_TO_ADDR
42691: GO 42713
42693: LD_INT 3
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42701
42699: GO 42712
42701: POP
// tech := tech_bazooka ; end ;
42702: LD_ADDR_VAR 0 5
42706: PUSH
42707: LD_INT 44
42709: ST_TO_ADDR
42710: GO 42713
42712: POP
// if Researched ( side , tech ) then
42713: LD_VAR 0 3
42717: PPUSH
42718: LD_VAR 0 5
42722: PPUSH
42723: CALL_OW 325
42727: IFFALSE 42754
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42729: LD_ADDR_VAR 0 2
42733: PUSH
42734: LD_INT 5
42736: PUSH
42737: LD_INT 8
42739: PUSH
42740: LD_INT 9
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: LIST
42747: PUSH
42748: LD_VAR 0 4
42752: ARRAY
42753: ST_TO_ADDR
// end ;
42754: LD_VAR 0 2
42758: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42759: LD_INT 0
42761: PPUSH
42762: PPUSH
42763: PPUSH
// if not mines then
42764: LD_VAR 0 2
42768: NOT
42769: IFFALSE 42773
// exit ;
42771: GO 42917
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42773: LD_ADDR_VAR 0 5
42777: PUSH
42778: LD_INT 81
42780: PUSH
42781: LD_VAR 0 1
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: LD_INT 21
42795: PUSH
42796: LD_INT 3
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PPUSH
42811: CALL_OW 69
42815: ST_TO_ADDR
// for i in mines do
42816: LD_ADDR_VAR 0 4
42820: PUSH
42821: LD_VAR 0 2
42825: PUSH
42826: FOR_IN
42827: IFFALSE 42915
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42829: LD_VAR 0 4
42833: PUSH
42834: LD_INT 1
42836: ARRAY
42837: PPUSH
42838: LD_VAR 0 4
42842: PUSH
42843: LD_INT 2
42845: ARRAY
42846: PPUSH
42847: CALL_OW 458
42851: NOT
42852: IFFALSE 42856
// continue ;
42854: GO 42826
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42856: LD_VAR 0 4
42860: PUSH
42861: LD_INT 1
42863: ARRAY
42864: PPUSH
42865: LD_VAR 0 4
42869: PUSH
42870: LD_INT 2
42872: ARRAY
42873: PPUSH
42874: CALL_OW 428
42878: PUSH
42879: LD_VAR 0 5
42883: IN
42884: IFFALSE 42913
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42886: LD_VAR 0 4
42890: PUSH
42891: LD_INT 1
42893: ARRAY
42894: PPUSH
42895: LD_VAR 0 4
42899: PUSH
42900: LD_INT 2
42902: ARRAY
42903: PPUSH
42904: LD_VAR 0 1
42908: PPUSH
42909: CALL_OW 456
// end ;
42913: GO 42826
42915: POP
42916: POP
// end ;
42917: LD_VAR 0 3
42921: RET
// export function Count ( array ) ; begin
42922: LD_INT 0
42924: PPUSH
// result := array + 0 ;
42925: LD_ADDR_VAR 0 2
42929: PUSH
42930: LD_VAR 0 1
42934: PUSH
42935: LD_INT 0
42937: PLUS
42938: ST_TO_ADDR
// end ;
42939: LD_VAR 0 2
42943: RET
// export function IsEmpty ( building ) ; begin
42944: LD_INT 0
42946: PPUSH
// if not building then
42947: LD_VAR 0 1
42951: NOT
42952: IFFALSE 42956
// exit ;
42954: GO 42999
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42956: LD_ADDR_VAR 0 2
42960: PUSH
42961: LD_VAR 0 1
42965: PUSH
42966: LD_INT 22
42968: PUSH
42969: LD_VAR 0 1
42973: PPUSH
42974: CALL_OW 255
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 58
42985: PUSH
42986: EMPTY
42987: LIST
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PPUSH
42993: CALL_OW 69
42997: IN
42998: ST_TO_ADDR
// end ;
42999: LD_VAR 0 2
43003: RET
// export function IsNotFull ( building ) ; var places ; begin
43004: LD_INT 0
43006: PPUSH
43007: PPUSH
// if not building then
43008: LD_VAR 0 1
43012: NOT
43013: IFFALSE 43017
// exit ;
43015: GO 43045
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43017: LD_ADDR_VAR 0 2
43021: PUSH
43022: LD_VAR 0 1
43026: PPUSH
43027: LD_INT 3
43029: PUSH
43030: LD_INT 62
43032: PUSH
43033: EMPTY
43034: LIST
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PPUSH
43040: CALL_OW 72
43044: ST_TO_ADDR
// end ;
43045: LD_VAR 0 2
43049: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43050: LD_INT 0
43052: PPUSH
43053: PPUSH
43054: PPUSH
43055: PPUSH
// tmp := [ ] ;
43056: LD_ADDR_VAR 0 3
43060: PUSH
43061: EMPTY
43062: ST_TO_ADDR
// list := [ ] ;
43063: LD_ADDR_VAR 0 5
43067: PUSH
43068: EMPTY
43069: ST_TO_ADDR
// for i = 16 to 25 do
43070: LD_ADDR_VAR 0 4
43074: PUSH
43075: DOUBLE
43076: LD_INT 16
43078: DEC
43079: ST_TO_ADDR
43080: LD_INT 25
43082: PUSH
43083: FOR_TO
43084: IFFALSE 43157
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43086: LD_ADDR_VAR 0 3
43090: PUSH
43091: LD_VAR 0 3
43095: PUSH
43096: LD_INT 22
43098: PUSH
43099: LD_VAR 0 1
43103: PPUSH
43104: CALL_OW 255
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 91
43115: PUSH
43116: LD_VAR 0 1
43120: PUSH
43121: LD_INT 6
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 30
43131: PUSH
43132: LD_VAR 0 4
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: LIST
43145: PUSH
43146: EMPTY
43147: LIST
43148: PPUSH
43149: CALL_OW 69
43153: ADD
43154: ST_TO_ADDR
43155: GO 43083
43157: POP
43158: POP
// for i = 1 to tmp do
43159: LD_ADDR_VAR 0 4
43163: PUSH
43164: DOUBLE
43165: LD_INT 1
43167: DEC
43168: ST_TO_ADDR
43169: LD_VAR 0 3
43173: PUSH
43174: FOR_TO
43175: IFFALSE 43263
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43177: LD_ADDR_VAR 0 5
43181: PUSH
43182: LD_VAR 0 5
43186: PUSH
43187: LD_VAR 0 3
43191: PUSH
43192: LD_VAR 0 4
43196: ARRAY
43197: PPUSH
43198: CALL_OW 266
43202: PUSH
43203: LD_VAR 0 3
43207: PUSH
43208: LD_VAR 0 4
43212: ARRAY
43213: PPUSH
43214: CALL_OW 250
43218: PUSH
43219: LD_VAR 0 3
43223: PUSH
43224: LD_VAR 0 4
43228: ARRAY
43229: PPUSH
43230: CALL_OW 251
43234: PUSH
43235: LD_VAR 0 3
43239: PUSH
43240: LD_VAR 0 4
43244: ARRAY
43245: PPUSH
43246: CALL_OW 254
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: PUSH
43257: EMPTY
43258: LIST
43259: ADD
43260: ST_TO_ADDR
43261: GO 43174
43263: POP
43264: POP
// result := list ;
43265: LD_ADDR_VAR 0 2
43269: PUSH
43270: LD_VAR 0 5
43274: ST_TO_ADDR
// end ;
43275: LD_VAR 0 2
43279: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43280: LD_INT 0
43282: PPUSH
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
43287: PPUSH
43288: PPUSH
// if not factory then
43289: LD_VAR 0 1
43293: NOT
43294: IFFALSE 43298
// exit ;
43296: GO 43891
// if control = control_apeman then
43298: LD_VAR 0 4
43302: PUSH
43303: LD_INT 5
43305: EQUAL
43306: IFFALSE 43415
// begin tmp := UnitsInside ( factory ) ;
43308: LD_ADDR_VAR 0 8
43312: PUSH
43313: LD_VAR 0 1
43317: PPUSH
43318: CALL_OW 313
43322: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43323: LD_VAR 0 8
43327: PPUSH
43328: LD_INT 25
43330: PUSH
43331: LD_INT 12
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PPUSH
43338: CALL_OW 72
43342: NOT
43343: IFFALSE 43353
// control := control_manual ;
43345: LD_ADDR_VAR 0 4
43349: PUSH
43350: LD_INT 1
43352: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43353: LD_ADDR_VAR 0 8
43357: PUSH
43358: LD_VAR 0 1
43362: PPUSH
43363: CALL 43050 0 1
43367: ST_TO_ADDR
// if tmp then
43368: LD_VAR 0 8
43372: IFFALSE 43415
// begin for i in tmp do
43374: LD_ADDR_VAR 0 7
43378: PUSH
43379: LD_VAR 0 8
43383: PUSH
43384: FOR_IN
43385: IFFALSE 43413
// if i [ 1 ] = b_ext_radio then
43387: LD_VAR 0 7
43391: PUSH
43392: LD_INT 1
43394: ARRAY
43395: PUSH
43396: LD_INT 22
43398: EQUAL
43399: IFFALSE 43411
// begin control := control_remote ;
43401: LD_ADDR_VAR 0 4
43405: PUSH
43406: LD_INT 2
43408: ST_TO_ADDR
// break ;
43409: GO 43413
// end ;
43411: GO 43384
43413: POP
43414: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43415: LD_VAR 0 1
43419: PPUSH
43420: LD_VAR 0 2
43424: PPUSH
43425: LD_VAR 0 3
43429: PPUSH
43430: LD_VAR 0 4
43434: PPUSH
43435: LD_VAR 0 5
43439: PPUSH
43440: CALL_OW 448
43444: IFFALSE 43479
// begin result := [ chassis , engine , control , weapon ] ;
43446: LD_ADDR_VAR 0 6
43450: PUSH
43451: LD_VAR 0 2
43455: PUSH
43456: LD_VAR 0 3
43460: PUSH
43461: LD_VAR 0 4
43465: PUSH
43466: LD_VAR 0 5
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: ST_TO_ADDR
// exit ;
43477: GO 43891
// end ; _chassis := AvailableChassisList ( factory ) ;
43479: LD_ADDR_VAR 0 9
43483: PUSH
43484: LD_VAR 0 1
43488: PPUSH
43489: CALL_OW 475
43493: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43494: LD_ADDR_VAR 0 11
43498: PUSH
43499: LD_VAR 0 1
43503: PPUSH
43504: CALL_OW 476
43508: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43509: LD_ADDR_VAR 0 12
43513: PUSH
43514: LD_VAR 0 1
43518: PPUSH
43519: CALL_OW 477
43523: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43524: LD_ADDR_VAR 0 10
43528: PUSH
43529: LD_VAR 0 1
43533: PPUSH
43534: CALL_OW 478
43538: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43539: LD_VAR 0 9
43543: NOT
43544: PUSH
43545: LD_VAR 0 11
43549: NOT
43550: OR
43551: PUSH
43552: LD_VAR 0 12
43556: NOT
43557: OR
43558: PUSH
43559: LD_VAR 0 10
43563: NOT
43564: OR
43565: IFFALSE 43600
// begin result := [ chassis , engine , control , weapon ] ;
43567: LD_ADDR_VAR 0 6
43571: PUSH
43572: LD_VAR 0 2
43576: PUSH
43577: LD_VAR 0 3
43581: PUSH
43582: LD_VAR 0 4
43586: PUSH
43587: LD_VAR 0 5
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: ST_TO_ADDR
// exit ;
43598: GO 43891
// end ; if not chassis in _chassis then
43600: LD_VAR 0 2
43604: PUSH
43605: LD_VAR 0 9
43609: IN
43610: NOT
43611: IFFALSE 43637
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43613: LD_ADDR_VAR 0 2
43617: PUSH
43618: LD_VAR 0 9
43622: PUSH
43623: LD_INT 1
43625: PPUSH
43626: LD_VAR 0 9
43630: PPUSH
43631: CALL_OW 12
43635: ARRAY
43636: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43637: LD_VAR 0 2
43641: PPUSH
43642: LD_VAR 0 3
43646: PPUSH
43647: CALL 43896 0 2
43651: NOT
43652: IFFALSE 43711
// repeat engine := _engine [ 1 ] ;
43654: LD_ADDR_VAR 0 3
43658: PUSH
43659: LD_VAR 0 11
43663: PUSH
43664: LD_INT 1
43666: ARRAY
43667: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43668: LD_ADDR_VAR 0 11
43672: PUSH
43673: LD_VAR 0 11
43677: PPUSH
43678: LD_INT 1
43680: PPUSH
43681: CALL_OW 3
43685: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43686: LD_VAR 0 2
43690: PPUSH
43691: LD_VAR 0 3
43695: PPUSH
43696: CALL 43896 0 2
43700: PUSH
43701: LD_VAR 0 11
43705: PUSH
43706: EMPTY
43707: EQUAL
43708: OR
43709: IFFALSE 43654
// if not control in _control then
43711: LD_VAR 0 4
43715: PUSH
43716: LD_VAR 0 12
43720: IN
43721: NOT
43722: IFFALSE 43748
// control := _control [ rand ( 1 , _control ) ] ;
43724: LD_ADDR_VAR 0 4
43728: PUSH
43729: LD_VAR 0 12
43733: PUSH
43734: LD_INT 1
43736: PPUSH
43737: LD_VAR 0 12
43741: PPUSH
43742: CALL_OW 12
43746: ARRAY
43747: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43748: LD_VAR 0 2
43752: PPUSH
43753: LD_VAR 0 5
43757: PPUSH
43758: CALL 44116 0 2
43762: NOT
43763: IFFALSE 43822
// repeat weapon := _weapon [ 1 ] ;
43765: LD_ADDR_VAR 0 5
43769: PUSH
43770: LD_VAR 0 10
43774: PUSH
43775: LD_INT 1
43777: ARRAY
43778: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43779: LD_ADDR_VAR 0 10
43783: PUSH
43784: LD_VAR 0 10
43788: PPUSH
43789: LD_INT 1
43791: PPUSH
43792: CALL_OW 3
43796: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43797: LD_VAR 0 2
43801: PPUSH
43802: LD_VAR 0 5
43806: PPUSH
43807: CALL 44116 0 2
43811: PUSH
43812: LD_VAR 0 10
43816: PUSH
43817: EMPTY
43818: EQUAL
43819: OR
43820: IFFALSE 43765
// result := [ ] ;
43822: LD_ADDR_VAR 0 6
43826: PUSH
43827: EMPTY
43828: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43829: LD_VAR 0 1
43833: PPUSH
43834: LD_VAR 0 2
43838: PPUSH
43839: LD_VAR 0 3
43843: PPUSH
43844: LD_VAR 0 4
43848: PPUSH
43849: LD_VAR 0 5
43853: PPUSH
43854: CALL_OW 448
43858: IFFALSE 43891
// result := [ chassis , engine , control , weapon ] ;
43860: LD_ADDR_VAR 0 6
43864: PUSH
43865: LD_VAR 0 2
43869: PUSH
43870: LD_VAR 0 3
43874: PUSH
43875: LD_VAR 0 4
43879: PUSH
43880: LD_VAR 0 5
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: ST_TO_ADDR
// end ;
43891: LD_VAR 0 6
43895: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43896: LD_INT 0
43898: PPUSH
// if not chassis or not engine then
43899: LD_VAR 0 1
43903: NOT
43904: PUSH
43905: LD_VAR 0 2
43909: NOT
43910: OR
43911: IFFALSE 43915
// exit ;
43913: GO 44111
// case engine of engine_solar :
43915: LD_VAR 0 2
43919: PUSH
43920: LD_INT 2
43922: DOUBLE
43923: EQUAL
43924: IFTRUE 43928
43926: GO 43966
43928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43929: LD_ADDR_VAR 0 3
43933: PUSH
43934: LD_INT 11
43936: PUSH
43937: LD_INT 12
43939: PUSH
43940: LD_INT 13
43942: PUSH
43943: LD_INT 14
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 2
43951: PUSH
43952: LD_INT 3
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
43964: GO 44095
43966: LD_INT 1
43968: DOUBLE
43969: EQUAL
43970: IFTRUE 43974
43972: GO 44036
43974: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43975: LD_ADDR_VAR 0 3
43979: PUSH
43980: LD_INT 11
43982: PUSH
43983: LD_INT 12
43985: PUSH
43986: LD_INT 13
43988: PUSH
43989: LD_INT 14
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: LD_INT 3
44000: PUSH
44001: LD_INT 4
44003: PUSH
44004: LD_INT 5
44006: PUSH
44007: LD_INT 21
44009: PUSH
44010: LD_INT 23
44012: PUSH
44013: LD_INT 22
44015: PUSH
44016: LD_INT 24
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: ST_TO_ADDR
44034: GO 44095
44036: LD_INT 3
44038: DOUBLE
44039: EQUAL
44040: IFTRUE 44044
44042: GO 44094
44044: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44045: LD_ADDR_VAR 0 3
44049: PUSH
44050: LD_INT 13
44052: PUSH
44053: LD_INT 14
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: LD_INT 4
44064: PUSH
44065: LD_INT 5
44067: PUSH
44068: LD_INT 21
44070: PUSH
44071: LD_INT 22
44073: PUSH
44074: LD_INT 23
44076: PUSH
44077: LD_INT 24
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: ST_TO_ADDR
44092: GO 44095
44094: POP
// result := ( chassis in result ) ;
44095: LD_ADDR_VAR 0 3
44099: PUSH
44100: LD_VAR 0 1
44104: PUSH
44105: LD_VAR 0 3
44109: IN
44110: ST_TO_ADDR
// end ;
44111: LD_VAR 0 3
44115: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44116: LD_INT 0
44118: PPUSH
// if not chassis or not weapon then
44119: LD_VAR 0 1
44123: NOT
44124: PUSH
44125: LD_VAR 0 2
44129: NOT
44130: OR
44131: IFFALSE 44135
// exit ;
44133: GO 45195
// case weapon of us_machine_gun :
44135: LD_VAR 0 2
44139: PUSH
44140: LD_INT 2
44142: DOUBLE
44143: EQUAL
44144: IFTRUE 44148
44146: GO 44178
44148: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44149: LD_ADDR_VAR 0 3
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: LD_INT 3
44162: PUSH
44163: LD_INT 4
44165: PUSH
44166: LD_INT 5
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: ST_TO_ADDR
44176: GO 45179
44178: LD_INT 3
44180: DOUBLE
44181: EQUAL
44182: IFTRUE 44186
44184: GO 44216
44186: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44187: LD_ADDR_VAR 0 3
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: LD_INT 3
44200: PUSH
44201: LD_INT 4
44203: PUSH
44204: LD_INT 5
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: ST_TO_ADDR
44214: GO 45179
44216: LD_INT 11
44218: DOUBLE
44219: EQUAL
44220: IFTRUE 44224
44222: GO 44254
44224: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44225: LD_ADDR_VAR 0 3
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: LD_INT 3
44238: PUSH
44239: LD_INT 4
44241: PUSH
44242: LD_INT 5
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: ST_TO_ADDR
44252: GO 45179
44254: LD_INT 4
44256: DOUBLE
44257: EQUAL
44258: IFTRUE 44262
44260: GO 44288
44262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44263: LD_ADDR_VAR 0 3
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: LD_INT 3
44273: PUSH
44274: LD_INT 4
44276: PUSH
44277: LD_INT 5
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: ST_TO_ADDR
44286: GO 45179
44288: LD_INT 5
44290: DOUBLE
44291: EQUAL
44292: IFTRUE 44296
44294: GO 44322
44296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44297: LD_ADDR_VAR 0 3
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: LD_INT 3
44307: PUSH
44308: LD_INT 4
44310: PUSH
44311: LD_INT 5
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: ST_TO_ADDR
44320: GO 45179
44322: LD_INT 9
44324: DOUBLE
44325: EQUAL
44326: IFTRUE 44330
44328: GO 44356
44330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44331: LD_ADDR_VAR 0 3
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: LD_INT 3
44341: PUSH
44342: LD_INT 4
44344: PUSH
44345: LD_INT 5
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: ST_TO_ADDR
44354: GO 45179
44356: LD_INT 7
44358: DOUBLE
44359: EQUAL
44360: IFTRUE 44364
44362: GO 44390
44364: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44365: LD_ADDR_VAR 0 3
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 3
44375: PUSH
44376: LD_INT 4
44378: PUSH
44379: LD_INT 5
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: ST_TO_ADDR
44388: GO 45179
44390: LD_INT 12
44392: DOUBLE
44393: EQUAL
44394: IFTRUE 44398
44396: GO 44424
44398: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44399: LD_ADDR_VAR 0 3
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: LD_INT 3
44409: PUSH
44410: LD_INT 4
44412: PUSH
44413: LD_INT 5
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: ST_TO_ADDR
44422: GO 45179
44424: LD_INT 13
44426: DOUBLE
44427: EQUAL
44428: IFTRUE 44432
44430: GO 44458
44432: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44433: LD_ADDR_VAR 0 3
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 3
44443: PUSH
44444: LD_INT 4
44446: PUSH
44447: LD_INT 5
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: ST_TO_ADDR
44456: GO 45179
44458: LD_INT 14
44460: DOUBLE
44461: EQUAL
44462: IFTRUE 44466
44464: GO 44484
44466: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44467: LD_ADDR_VAR 0 3
44471: PUSH
44472: LD_INT 4
44474: PUSH
44475: LD_INT 5
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: ST_TO_ADDR
44482: GO 45179
44484: LD_INT 6
44486: DOUBLE
44487: EQUAL
44488: IFTRUE 44492
44490: GO 44510
44492: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44493: LD_ADDR_VAR 0 3
44497: PUSH
44498: LD_INT 4
44500: PUSH
44501: LD_INT 5
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: ST_TO_ADDR
44508: GO 45179
44510: LD_INT 10
44512: DOUBLE
44513: EQUAL
44514: IFTRUE 44518
44516: GO 44536
44518: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44519: LD_ADDR_VAR 0 3
44523: PUSH
44524: LD_INT 4
44526: PUSH
44527: LD_INT 5
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: ST_TO_ADDR
44534: GO 45179
44536: LD_INT 22
44538: DOUBLE
44539: EQUAL
44540: IFTRUE 44544
44542: GO 44570
44544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44545: LD_ADDR_VAR 0 3
44549: PUSH
44550: LD_INT 11
44552: PUSH
44553: LD_INT 12
44555: PUSH
44556: LD_INT 13
44558: PUSH
44559: LD_INT 14
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: ST_TO_ADDR
44568: GO 45179
44570: LD_INT 23
44572: DOUBLE
44573: EQUAL
44574: IFTRUE 44578
44576: GO 44604
44578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44579: LD_ADDR_VAR 0 3
44583: PUSH
44584: LD_INT 11
44586: PUSH
44587: LD_INT 12
44589: PUSH
44590: LD_INT 13
44592: PUSH
44593: LD_INT 14
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: ST_TO_ADDR
44602: GO 45179
44604: LD_INT 24
44606: DOUBLE
44607: EQUAL
44608: IFTRUE 44612
44610: GO 44638
44612: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44613: LD_ADDR_VAR 0 3
44617: PUSH
44618: LD_INT 11
44620: PUSH
44621: LD_INT 12
44623: PUSH
44624: LD_INT 13
44626: PUSH
44627: LD_INT 14
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: ST_TO_ADDR
44636: GO 45179
44638: LD_INT 30
44640: DOUBLE
44641: EQUAL
44642: IFTRUE 44646
44644: GO 44672
44646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44647: LD_ADDR_VAR 0 3
44651: PUSH
44652: LD_INT 11
44654: PUSH
44655: LD_INT 12
44657: PUSH
44658: LD_INT 13
44660: PUSH
44661: LD_INT 14
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: ST_TO_ADDR
44670: GO 45179
44672: LD_INT 25
44674: DOUBLE
44675: EQUAL
44676: IFTRUE 44680
44678: GO 44698
44680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44681: LD_ADDR_VAR 0 3
44685: PUSH
44686: LD_INT 13
44688: PUSH
44689: LD_INT 14
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: ST_TO_ADDR
44696: GO 45179
44698: LD_INT 27
44700: DOUBLE
44701: EQUAL
44702: IFTRUE 44706
44704: GO 44724
44706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44707: LD_ADDR_VAR 0 3
44711: PUSH
44712: LD_INT 13
44714: PUSH
44715: LD_INT 14
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: ST_TO_ADDR
44722: GO 45179
44724: LD_INT 92
44726: DOUBLE
44727: EQUAL
44728: IFTRUE 44732
44730: GO 44758
44732: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44733: LD_ADDR_VAR 0 3
44737: PUSH
44738: LD_INT 11
44740: PUSH
44741: LD_INT 12
44743: PUSH
44744: LD_INT 13
44746: PUSH
44747: LD_INT 14
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: ST_TO_ADDR
44756: GO 45179
44758: LD_INT 28
44760: DOUBLE
44761: EQUAL
44762: IFTRUE 44766
44764: GO 44784
44766: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44767: LD_ADDR_VAR 0 3
44771: PUSH
44772: LD_INT 13
44774: PUSH
44775: LD_INT 14
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: ST_TO_ADDR
44782: GO 45179
44784: LD_INT 29
44786: DOUBLE
44787: EQUAL
44788: IFTRUE 44792
44790: GO 44810
44792: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44793: LD_ADDR_VAR 0 3
44797: PUSH
44798: LD_INT 13
44800: PUSH
44801: LD_INT 14
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: ST_TO_ADDR
44808: GO 45179
44810: LD_INT 31
44812: DOUBLE
44813: EQUAL
44814: IFTRUE 44818
44816: GO 44836
44818: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44819: LD_ADDR_VAR 0 3
44823: PUSH
44824: LD_INT 13
44826: PUSH
44827: LD_INT 14
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: ST_TO_ADDR
44834: GO 45179
44836: LD_INT 26
44838: DOUBLE
44839: EQUAL
44840: IFTRUE 44844
44842: GO 44862
44844: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44845: LD_ADDR_VAR 0 3
44849: PUSH
44850: LD_INT 13
44852: PUSH
44853: LD_INT 14
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: ST_TO_ADDR
44860: GO 45179
44862: LD_INT 42
44864: DOUBLE
44865: EQUAL
44866: IFTRUE 44870
44868: GO 44896
44870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44871: LD_ADDR_VAR 0 3
44875: PUSH
44876: LD_INT 21
44878: PUSH
44879: LD_INT 22
44881: PUSH
44882: LD_INT 23
44884: PUSH
44885: LD_INT 24
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
44894: GO 45179
44896: LD_INT 43
44898: DOUBLE
44899: EQUAL
44900: IFTRUE 44904
44902: GO 44930
44904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44905: LD_ADDR_VAR 0 3
44909: PUSH
44910: LD_INT 21
44912: PUSH
44913: LD_INT 22
44915: PUSH
44916: LD_INT 23
44918: PUSH
44919: LD_INT 24
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: ST_TO_ADDR
44928: GO 45179
44930: LD_INT 44
44932: DOUBLE
44933: EQUAL
44934: IFTRUE 44938
44936: GO 44964
44938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44939: LD_ADDR_VAR 0 3
44943: PUSH
44944: LD_INT 21
44946: PUSH
44947: LD_INT 22
44949: PUSH
44950: LD_INT 23
44952: PUSH
44953: LD_INT 24
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: ST_TO_ADDR
44962: GO 45179
44964: LD_INT 45
44966: DOUBLE
44967: EQUAL
44968: IFTRUE 44972
44970: GO 44998
44972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44973: LD_ADDR_VAR 0 3
44977: PUSH
44978: LD_INT 21
44980: PUSH
44981: LD_INT 22
44983: PUSH
44984: LD_INT 23
44986: PUSH
44987: LD_INT 24
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: ST_TO_ADDR
44996: GO 45179
44998: LD_INT 49
45000: DOUBLE
45001: EQUAL
45002: IFTRUE 45006
45004: GO 45032
45006: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45007: LD_ADDR_VAR 0 3
45011: PUSH
45012: LD_INT 21
45014: PUSH
45015: LD_INT 22
45017: PUSH
45018: LD_INT 23
45020: PUSH
45021: LD_INT 24
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: ST_TO_ADDR
45030: GO 45179
45032: LD_INT 51
45034: DOUBLE
45035: EQUAL
45036: IFTRUE 45040
45038: GO 45066
45040: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45041: LD_ADDR_VAR 0 3
45045: PUSH
45046: LD_INT 21
45048: PUSH
45049: LD_INT 22
45051: PUSH
45052: LD_INT 23
45054: PUSH
45055: LD_INT 24
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: ST_TO_ADDR
45064: GO 45179
45066: LD_INT 52
45068: DOUBLE
45069: EQUAL
45070: IFTRUE 45074
45072: GO 45100
45074: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45075: LD_ADDR_VAR 0 3
45079: PUSH
45080: LD_INT 21
45082: PUSH
45083: LD_INT 22
45085: PUSH
45086: LD_INT 23
45088: PUSH
45089: LD_INT 24
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: ST_TO_ADDR
45098: GO 45179
45100: LD_INT 53
45102: DOUBLE
45103: EQUAL
45104: IFTRUE 45108
45106: GO 45126
45108: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45109: LD_ADDR_VAR 0 3
45113: PUSH
45114: LD_INT 23
45116: PUSH
45117: LD_INT 24
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: ST_TO_ADDR
45124: GO 45179
45126: LD_INT 46
45128: DOUBLE
45129: EQUAL
45130: IFTRUE 45134
45132: GO 45152
45134: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45135: LD_ADDR_VAR 0 3
45139: PUSH
45140: LD_INT 23
45142: PUSH
45143: LD_INT 24
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: ST_TO_ADDR
45150: GO 45179
45152: LD_INT 47
45154: DOUBLE
45155: EQUAL
45156: IFTRUE 45160
45158: GO 45178
45160: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45161: LD_ADDR_VAR 0 3
45165: PUSH
45166: LD_INT 23
45168: PUSH
45169: LD_INT 24
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: ST_TO_ADDR
45176: GO 45179
45178: POP
// result := ( chassis in result ) ;
45179: LD_ADDR_VAR 0 3
45183: PUSH
45184: LD_VAR 0 1
45188: PUSH
45189: LD_VAR 0 3
45193: IN
45194: ST_TO_ADDR
// end ;
45195: LD_VAR 0 3
45199: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45200: LD_INT 0
45202: PPUSH
45203: PPUSH
45204: PPUSH
45205: PPUSH
45206: PPUSH
45207: PPUSH
45208: PPUSH
// result := array ;
45209: LD_ADDR_VAR 0 5
45213: PUSH
45214: LD_VAR 0 1
45218: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45219: LD_VAR 0 1
45223: NOT
45224: PUSH
45225: LD_VAR 0 2
45229: NOT
45230: OR
45231: PUSH
45232: LD_VAR 0 3
45236: NOT
45237: OR
45238: PUSH
45239: LD_VAR 0 2
45243: PUSH
45244: LD_VAR 0 1
45248: GREATER
45249: OR
45250: PUSH
45251: LD_VAR 0 3
45255: PUSH
45256: LD_VAR 0 1
45260: GREATER
45261: OR
45262: IFFALSE 45266
// exit ;
45264: GO 45562
// if direction then
45266: LD_VAR 0 4
45270: IFFALSE 45334
// begin d := 1 ;
45272: LD_ADDR_VAR 0 9
45276: PUSH
45277: LD_INT 1
45279: ST_TO_ADDR
// if i_from > i_to then
45280: LD_VAR 0 2
45284: PUSH
45285: LD_VAR 0 3
45289: GREATER
45290: IFFALSE 45316
// length := ( array - i_from ) + i_to else
45292: LD_ADDR_VAR 0 11
45296: PUSH
45297: LD_VAR 0 1
45301: PUSH
45302: LD_VAR 0 2
45306: MINUS
45307: PUSH
45308: LD_VAR 0 3
45312: PLUS
45313: ST_TO_ADDR
45314: GO 45332
// length := i_to - i_from ;
45316: LD_ADDR_VAR 0 11
45320: PUSH
45321: LD_VAR 0 3
45325: PUSH
45326: LD_VAR 0 2
45330: MINUS
45331: ST_TO_ADDR
// end else
45332: GO 45395
// begin d := - 1 ;
45334: LD_ADDR_VAR 0 9
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: ST_TO_ADDR
// if i_from > i_to then
45343: LD_VAR 0 2
45347: PUSH
45348: LD_VAR 0 3
45352: GREATER
45353: IFFALSE 45373
// length := i_from - i_to else
45355: LD_ADDR_VAR 0 11
45359: PUSH
45360: LD_VAR 0 2
45364: PUSH
45365: LD_VAR 0 3
45369: MINUS
45370: ST_TO_ADDR
45371: GO 45395
// length := ( array - i_to ) + i_from ;
45373: LD_ADDR_VAR 0 11
45377: PUSH
45378: LD_VAR 0 1
45382: PUSH
45383: LD_VAR 0 3
45387: MINUS
45388: PUSH
45389: LD_VAR 0 2
45393: PLUS
45394: ST_TO_ADDR
// end ; if not length then
45395: LD_VAR 0 11
45399: NOT
45400: IFFALSE 45404
// exit ;
45402: GO 45562
// tmp := array ;
45404: LD_ADDR_VAR 0 10
45408: PUSH
45409: LD_VAR 0 1
45413: ST_TO_ADDR
// for i = 1 to length do
45414: LD_ADDR_VAR 0 6
45418: PUSH
45419: DOUBLE
45420: LD_INT 1
45422: DEC
45423: ST_TO_ADDR
45424: LD_VAR 0 11
45428: PUSH
45429: FOR_TO
45430: IFFALSE 45550
// begin for j = 1 to array do
45432: LD_ADDR_VAR 0 7
45436: PUSH
45437: DOUBLE
45438: LD_INT 1
45440: DEC
45441: ST_TO_ADDR
45442: LD_VAR 0 1
45446: PUSH
45447: FOR_TO
45448: IFFALSE 45536
// begin k := j + d ;
45450: LD_ADDR_VAR 0 8
45454: PUSH
45455: LD_VAR 0 7
45459: PUSH
45460: LD_VAR 0 9
45464: PLUS
45465: ST_TO_ADDR
// if k > array then
45466: LD_VAR 0 8
45470: PUSH
45471: LD_VAR 0 1
45475: GREATER
45476: IFFALSE 45486
// k := 1 ;
45478: LD_ADDR_VAR 0 8
45482: PUSH
45483: LD_INT 1
45485: ST_TO_ADDR
// if not k then
45486: LD_VAR 0 8
45490: NOT
45491: IFFALSE 45503
// k := array ;
45493: LD_ADDR_VAR 0 8
45497: PUSH
45498: LD_VAR 0 1
45502: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45503: LD_ADDR_VAR 0 10
45507: PUSH
45508: LD_VAR 0 10
45512: PPUSH
45513: LD_VAR 0 8
45517: PPUSH
45518: LD_VAR 0 1
45522: PUSH
45523: LD_VAR 0 7
45527: ARRAY
45528: PPUSH
45529: CALL_OW 1
45533: ST_TO_ADDR
// end ;
45534: GO 45447
45536: POP
45537: POP
// array := tmp ;
45538: LD_ADDR_VAR 0 1
45542: PUSH
45543: LD_VAR 0 10
45547: ST_TO_ADDR
// end ;
45548: GO 45429
45550: POP
45551: POP
// result := array ;
45552: LD_ADDR_VAR 0 5
45556: PUSH
45557: LD_VAR 0 1
45561: ST_TO_ADDR
// end ;
45562: LD_VAR 0 5
45566: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45567: LD_INT 0
45569: PPUSH
45570: PPUSH
// result := 0 ;
45571: LD_ADDR_VAR 0 3
45575: PUSH
45576: LD_INT 0
45578: ST_TO_ADDR
// if not array or not value in array then
45579: LD_VAR 0 1
45583: NOT
45584: PUSH
45585: LD_VAR 0 2
45589: PUSH
45590: LD_VAR 0 1
45594: IN
45595: NOT
45596: OR
45597: IFFALSE 45601
// exit ;
45599: GO 45655
// for i = 1 to array do
45601: LD_ADDR_VAR 0 4
45605: PUSH
45606: DOUBLE
45607: LD_INT 1
45609: DEC
45610: ST_TO_ADDR
45611: LD_VAR 0 1
45615: PUSH
45616: FOR_TO
45617: IFFALSE 45653
// if value = array [ i ] then
45619: LD_VAR 0 2
45623: PUSH
45624: LD_VAR 0 1
45628: PUSH
45629: LD_VAR 0 4
45633: ARRAY
45634: EQUAL
45635: IFFALSE 45651
// begin result := i ;
45637: LD_ADDR_VAR 0 3
45641: PUSH
45642: LD_VAR 0 4
45646: ST_TO_ADDR
// exit ;
45647: POP
45648: POP
45649: GO 45655
// end ;
45651: GO 45616
45653: POP
45654: POP
// end ;
45655: LD_VAR 0 3
45659: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45660: LD_INT 0
45662: PPUSH
// vc_chassis := chassis ;
45663: LD_ADDR_OWVAR 37
45667: PUSH
45668: LD_VAR 0 1
45672: ST_TO_ADDR
// vc_engine := engine ;
45673: LD_ADDR_OWVAR 39
45677: PUSH
45678: LD_VAR 0 2
45682: ST_TO_ADDR
// vc_control := control ;
45683: LD_ADDR_OWVAR 38
45687: PUSH
45688: LD_VAR 0 3
45692: ST_TO_ADDR
// vc_weapon := weapon ;
45693: LD_ADDR_OWVAR 40
45697: PUSH
45698: LD_VAR 0 4
45702: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45703: LD_ADDR_OWVAR 41
45707: PUSH
45708: LD_VAR 0 5
45712: ST_TO_ADDR
// end ;
45713: LD_VAR 0 6
45717: RET
// export function WantPlant ( unit ) ; var task ; begin
45718: LD_INT 0
45720: PPUSH
45721: PPUSH
// result := false ;
45722: LD_ADDR_VAR 0 2
45726: PUSH
45727: LD_INT 0
45729: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45730: LD_ADDR_VAR 0 3
45734: PUSH
45735: LD_VAR 0 1
45739: PPUSH
45740: CALL_OW 437
45744: ST_TO_ADDR
// if task then
45745: LD_VAR 0 3
45749: IFFALSE 45777
// if task [ 1 ] [ 1 ] = p then
45751: LD_VAR 0 3
45755: PUSH
45756: LD_INT 1
45758: ARRAY
45759: PUSH
45760: LD_INT 1
45762: ARRAY
45763: PUSH
45764: LD_STRING p
45766: EQUAL
45767: IFFALSE 45777
// result := true ;
45769: LD_ADDR_VAR 0 2
45773: PUSH
45774: LD_INT 1
45776: ST_TO_ADDR
// end ;
45777: LD_VAR 0 2
45781: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45782: LD_INT 0
45784: PPUSH
45785: PPUSH
45786: PPUSH
45787: PPUSH
// if pos < 1 then
45788: LD_VAR 0 2
45792: PUSH
45793: LD_INT 1
45795: LESS
45796: IFFALSE 45800
// exit ;
45798: GO 46103
// if pos = 1 then
45800: LD_VAR 0 2
45804: PUSH
45805: LD_INT 1
45807: EQUAL
45808: IFFALSE 45841
// result := Replace ( arr , pos [ 1 ] , value ) else
45810: LD_ADDR_VAR 0 4
45814: PUSH
45815: LD_VAR 0 1
45819: PPUSH
45820: LD_VAR 0 2
45824: PUSH
45825: LD_INT 1
45827: ARRAY
45828: PPUSH
45829: LD_VAR 0 3
45833: PPUSH
45834: CALL_OW 1
45838: ST_TO_ADDR
45839: GO 46103
// begin tmp := arr ;
45841: LD_ADDR_VAR 0 6
45845: PUSH
45846: LD_VAR 0 1
45850: ST_TO_ADDR
// s_arr := [ tmp ] ;
45851: LD_ADDR_VAR 0 7
45855: PUSH
45856: LD_VAR 0 6
45860: PUSH
45861: EMPTY
45862: LIST
45863: ST_TO_ADDR
// for i = 1 to pos - 1 do
45864: LD_ADDR_VAR 0 5
45868: PUSH
45869: DOUBLE
45870: LD_INT 1
45872: DEC
45873: ST_TO_ADDR
45874: LD_VAR 0 2
45878: PUSH
45879: LD_INT 1
45881: MINUS
45882: PUSH
45883: FOR_TO
45884: IFFALSE 45929
// begin tmp := tmp [ pos [ i ] ] ;
45886: LD_ADDR_VAR 0 6
45890: PUSH
45891: LD_VAR 0 6
45895: PUSH
45896: LD_VAR 0 2
45900: PUSH
45901: LD_VAR 0 5
45905: ARRAY
45906: ARRAY
45907: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45908: LD_ADDR_VAR 0 7
45912: PUSH
45913: LD_VAR 0 7
45917: PUSH
45918: LD_VAR 0 6
45922: PUSH
45923: EMPTY
45924: LIST
45925: ADD
45926: ST_TO_ADDR
// end ;
45927: GO 45883
45929: POP
45930: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45931: LD_ADDR_VAR 0 6
45935: PUSH
45936: LD_VAR 0 6
45940: PPUSH
45941: LD_VAR 0 2
45945: PUSH
45946: LD_VAR 0 2
45950: ARRAY
45951: PPUSH
45952: LD_VAR 0 3
45956: PPUSH
45957: CALL_OW 1
45961: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45962: LD_ADDR_VAR 0 7
45966: PUSH
45967: LD_VAR 0 7
45971: PPUSH
45972: LD_VAR 0 7
45976: PPUSH
45977: LD_VAR 0 6
45981: PPUSH
45982: CALL_OW 1
45986: ST_TO_ADDR
// for i = s_arr downto 2 do
45987: LD_ADDR_VAR 0 5
45991: PUSH
45992: DOUBLE
45993: LD_VAR 0 7
45997: INC
45998: ST_TO_ADDR
45999: LD_INT 2
46001: PUSH
46002: FOR_DOWNTO
46003: IFFALSE 46087
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46005: LD_ADDR_VAR 0 6
46009: PUSH
46010: LD_VAR 0 7
46014: PUSH
46015: LD_VAR 0 5
46019: PUSH
46020: LD_INT 1
46022: MINUS
46023: ARRAY
46024: PPUSH
46025: LD_VAR 0 2
46029: PUSH
46030: LD_VAR 0 5
46034: PUSH
46035: LD_INT 1
46037: MINUS
46038: ARRAY
46039: PPUSH
46040: LD_VAR 0 7
46044: PUSH
46045: LD_VAR 0 5
46049: ARRAY
46050: PPUSH
46051: CALL_OW 1
46055: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46056: LD_ADDR_VAR 0 7
46060: PUSH
46061: LD_VAR 0 7
46065: PPUSH
46066: LD_VAR 0 5
46070: PUSH
46071: LD_INT 1
46073: MINUS
46074: PPUSH
46075: LD_VAR 0 6
46079: PPUSH
46080: CALL_OW 1
46084: ST_TO_ADDR
// end ;
46085: GO 46002
46087: POP
46088: POP
// result := s_arr [ 1 ] ;
46089: LD_ADDR_VAR 0 4
46093: PUSH
46094: LD_VAR 0 7
46098: PUSH
46099: LD_INT 1
46101: ARRAY
46102: ST_TO_ADDR
// end ; end ;
46103: LD_VAR 0 4
46107: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46108: LD_INT 0
46110: PPUSH
46111: PPUSH
// if not list then
46112: LD_VAR 0 1
46116: NOT
46117: IFFALSE 46121
// exit ;
46119: GO 46212
// i := list [ pos1 ] ;
46121: LD_ADDR_VAR 0 5
46125: PUSH
46126: LD_VAR 0 1
46130: PUSH
46131: LD_VAR 0 2
46135: ARRAY
46136: ST_TO_ADDR
// if not i then
46137: LD_VAR 0 5
46141: NOT
46142: IFFALSE 46146
// exit ;
46144: GO 46212
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46146: LD_ADDR_VAR 0 1
46150: PUSH
46151: LD_VAR 0 1
46155: PPUSH
46156: LD_VAR 0 2
46160: PPUSH
46161: LD_VAR 0 1
46165: PUSH
46166: LD_VAR 0 3
46170: ARRAY
46171: PPUSH
46172: CALL_OW 1
46176: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46177: LD_ADDR_VAR 0 1
46181: PUSH
46182: LD_VAR 0 1
46186: PPUSH
46187: LD_VAR 0 3
46191: PPUSH
46192: LD_VAR 0 5
46196: PPUSH
46197: CALL_OW 1
46201: ST_TO_ADDR
// result := list ;
46202: LD_ADDR_VAR 0 4
46206: PUSH
46207: LD_VAR 0 1
46211: ST_TO_ADDR
// end ;
46212: LD_VAR 0 4
46216: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46217: LD_INT 0
46219: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46220: LD_ADDR_VAR 0 5
46224: PUSH
46225: LD_VAR 0 1
46229: PPUSH
46230: CALL_OW 250
46234: PPUSH
46235: LD_VAR 0 1
46239: PPUSH
46240: CALL_OW 251
46244: PPUSH
46245: LD_VAR 0 2
46249: PPUSH
46250: LD_VAR 0 3
46254: PPUSH
46255: LD_VAR 0 4
46259: PPUSH
46260: CALL 46638 0 5
46264: ST_TO_ADDR
// end ;
46265: LD_VAR 0 5
46269: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46270: LD_INT 0
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
// if not list or not unit then
46276: LD_VAR 0 2
46280: NOT
46281: PUSH
46282: LD_VAR 0 1
46286: NOT
46287: OR
46288: IFFALSE 46292
// exit ;
46290: GO 46633
// result := [ ] ;
46292: LD_ADDR_VAR 0 5
46296: PUSH
46297: EMPTY
46298: ST_TO_ADDR
// for i in list do
46299: LD_ADDR_VAR 0 6
46303: PUSH
46304: LD_VAR 0 2
46308: PUSH
46309: FOR_IN
46310: IFFALSE 46528
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46312: LD_ADDR_VAR 0 8
46316: PUSH
46317: LD_VAR 0 1
46321: PPUSH
46322: LD_VAR 0 6
46326: PUSH
46327: LD_INT 1
46329: ARRAY
46330: PPUSH
46331: LD_VAR 0 6
46335: PUSH
46336: LD_INT 2
46338: ARRAY
46339: PPUSH
46340: CALL_OW 297
46344: ST_TO_ADDR
// if not Count ( result ) then
46345: LD_VAR 0 5
46349: PPUSH
46350: CALL 42922 0 1
46354: NOT
46355: IFFALSE 46388
// begin result := Join ( result , [ i , tmp ] ) ;
46357: LD_ADDR_VAR 0 5
46361: PUSH
46362: LD_VAR 0 5
46366: PPUSH
46367: LD_VAR 0 6
46371: PUSH
46372: LD_VAR 0 8
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PPUSH
46381: CALL 78511 0 2
46385: ST_TO_ADDR
// continue ;
46386: GO 46309
// end ; if result [ result ] [ 2 ] <= tmp then
46388: LD_VAR 0 5
46392: PUSH
46393: LD_VAR 0 5
46397: ARRAY
46398: PUSH
46399: LD_INT 2
46401: ARRAY
46402: PUSH
46403: LD_VAR 0 8
46407: LESSEQUAL
46408: IFFALSE 46441
// result := Join ( result , [ i , tmp ] ) else
46410: LD_ADDR_VAR 0 5
46414: PUSH
46415: LD_VAR 0 5
46419: PPUSH
46420: LD_VAR 0 6
46424: PUSH
46425: LD_VAR 0 8
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PPUSH
46434: CALL 78511 0 2
46438: ST_TO_ADDR
46439: GO 46526
// begin for j := 1 to Count ( result ) do
46441: LD_ADDR_VAR 0 7
46445: PUSH
46446: DOUBLE
46447: LD_INT 1
46449: DEC
46450: ST_TO_ADDR
46451: LD_VAR 0 5
46455: PPUSH
46456: CALL 42922 0 1
46460: PUSH
46461: FOR_TO
46462: IFFALSE 46524
// begin if tmp < result [ j ] [ 2 ] then
46464: LD_VAR 0 8
46468: PUSH
46469: LD_VAR 0 5
46473: PUSH
46474: LD_VAR 0 7
46478: ARRAY
46479: PUSH
46480: LD_INT 2
46482: ARRAY
46483: LESS
46484: IFFALSE 46522
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46486: LD_ADDR_VAR 0 5
46490: PUSH
46491: LD_VAR 0 5
46495: PPUSH
46496: LD_VAR 0 7
46500: PPUSH
46501: LD_VAR 0 6
46505: PUSH
46506: LD_VAR 0 8
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PPUSH
46515: CALL_OW 2
46519: ST_TO_ADDR
// break ;
46520: GO 46524
// end ; end ;
46522: GO 46461
46524: POP
46525: POP
// end ; end ;
46526: GO 46309
46528: POP
46529: POP
// if result and not asc then
46530: LD_VAR 0 5
46534: PUSH
46535: LD_VAR 0 3
46539: NOT
46540: AND
46541: IFFALSE 46558
// result := ReverseArray ( result ) ;
46543: LD_ADDR_VAR 0 5
46547: PUSH
46548: LD_VAR 0 5
46552: PPUSH
46553: CALL 73798 0 1
46557: ST_TO_ADDR
// tmp := [ ] ;
46558: LD_ADDR_VAR 0 8
46562: PUSH
46563: EMPTY
46564: ST_TO_ADDR
// if mode then
46565: LD_VAR 0 4
46569: IFFALSE 46633
// begin for i := 1 to result do
46571: LD_ADDR_VAR 0 6
46575: PUSH
46576: DOUBLE
46577: LD_INT 1
46579: DEC
46580: ST_TO_ADDR
46581: LD_VAR 0 5
46585: PUSH
46586: FOR_TO
46587: IFFALSE 46621
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46589: LD_ADDR_VAR 0 8
46593: PUSH
46594: LD_VAR 0 8
46598: PPUSH
46599: LD_VAR 0 5
46603: PUSH
46604: LD_VAR 0 6
46608: ARRAY
46609: PUSH
46610: LD_INT 1
46612: ARRAY
46613: PPUSH
46614: CALL 78511 0 2
46618: ST_TO_ADDR
46619: GO 46586
46621: POP
46622: POP
// result := tmp ;
46623: LD_ADDR_VAR 0 5
46627: PUSH
46628: LD_VAR 0 8
46632: ST_TO_ADDR
// end ; end ;
46633: LD_VAR 0 5
46637: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46638: LD_INT 0
46640: PPUSH
46641: PPUSH
46642: PPUSH
46643: PPUSH
// if not list then
46644: LD_VAR 0 3
46648: NOT
46649: IFFALSE 46653
// exit ;
46651: GO 47041
// result := [ ] ;
46653: LD_ADDR_VAR 0 6
46657: PUSH
46658: EMPTY
46659: ST_TO_ADDR
// for i in list do
46660: LD_ADDR_VAR 0 7
46664: PUSH
46665: LD_VAR 0 3
46669: PUSH
46670: FOR_IN
46671: IFFALSE 46873
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46673: LD_ADDR_VAR 0 9
46677: PUSH
46678: LD_VAR 0 7
46682: PPUSH
46683: LD_VAR 0 1
46687: PPUSH
46688: LD_VAR 0 2
46692: PPUSH
46693: CALL_OW 297
46697: ST_TO_ADDR
// if not result then
46698: LD_VAR 0 6
46702: NOT
46703: IFFALSE 46729
// result := [ [ i , tmp ] ] else
46705: LD_ADDR_VAR 0 6
46709: PUSH
46710: LD_VAR 0 7
46714: PUSH
46715: LD_VAR 0 9
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: EMPTY
46725: LIST
46726: ST_TO_ADDR
46727: GO 46871
// begin if result [ result ] [ 2 ] < tmp then
46729: LD_VAR 0 6
46733: PUSH
46734: LD_VAR 0 6
46738: ARRAY
46739: PUSH
46740: LD_INT 2
46742: ARRAY
46743: PUSH
46744: LD_VAR 0 9
46748: LESS
46749: IFFALSE 46791
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46751: LD_ADDR_VAR 0 6
46755: PUSH
46756: LD_VAR 0 6
46760: PPUSH
46761: LD_VAR 0 6
46765: PUSH
46766: LD_INT 1
46768: PLUS
46769: PPUSH
46770: LD_VAR 0 7
46774: PUSH
46775: LD_VAR 0 9
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PPUSH
46784: CALL_OW 2
46788: ST_TO_ADDR
46789: GO 46871
// for j = 1 to result do
46791: LD_ADDR_VAR 0 8
46795: PUSH
46796: DOUBLE
46797: LD_INT 1
46799: DEC
46800: ST_TO_ADDR
46801: LD_VAR 0 6
46805: PUSH
46806: FOR_TO
46807: IFFALSE 46869
// begin if tmp < result [ j ] [ 2 ] then
46809: LD_VAR 0 9
46813: PUSH
46814: LD_VAR 0 6
46818: PUSH
46819: LD_VAR 0 8
46823: ARRAY
46824: PUSH
46825: LD_INT 2
46827: ARRAY
46828: LESS
46829: IFFALSE 46867
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46831: LD_ADDR_VAR 0 6
46835: PUSH
46836: LD_VAR 0 6
46840: PPUSH
46841: LD_VAR 0 8
46845: PPUSH
46846: LD_VAR 0 7
46850: PUSH
46851: LD_VAR 0 9
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PPUSH
46860: CALL_OW 2
46864: ST_TO_ADDR
// break ;
46865: GO 46869
// end ; end ;
46867: GO 46806
46869: POP
46870: POP
// end ; end ;
46871: GO 46670
46873: POP
46874: POP
// if result and not asc then
46875: LD_VAR 0 6
46879: PUSH
46880: LD_VAR 0 4
46884: NOT
46885: AND
46886: IFFALSE 46961
// begin tmp := result ;
46888: LD_ADDR_VAR 0 9
46892: PUSH
46893: LD_VAR 0 6
46897: ST_TO_ADDR
// for i = tmp downto 1 do
46898: LD_ADDR_VAR 0 7
46902: PUSH
46903: DOUBLE
46904: LD_VAR 0 9
46908: INC
46909: ST_TO_ADDR
46910: LD_INT 1
46912: PUSH
46913: FOR_DOWNTO
46914: IFFALSE 46959
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46916: LD_ADDR_VAR 0 6
46920: PUSH
46921: LD_VAR 0 6
46925: PPUSH
46926: LD_VAR 0 9
46930: PUSH
46931: LD_VAR 0 7
46935: MINUS
46936: PUSH
46937: LD_INT 1
46939: PLUS
46940: PPUSH
46941: LD_VAR 0 9
46945: PUSH
46946: LD_VAR 0 7
46950: ARRAY
46951: PPUSH
46952: CALL_OW 1
46956: ST_TO_ADDR
46957: GO 46913
46959: POP
46960: POP
// end ; tmp := [ ] ;
46961: LD_ADDR_VAR 0 9
46965: PUSH
46966: EMPTY
46967: ST_TO_ADDR
// if mode then
46968: LD_VAR 0 5
46972: IFFALSE 47041
// begin for i = 1 to result do
46974: LD_ADDR_VAR 0 7
46978: PUSH
46979: DOUBLE
46980: LD_INT 1
46982: DEC
46983: ST_TO_ADDR
46984: LD_VAR 0 6
46988: PUSH
46989: FOR_TO
46990: IFFALSE 47029
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46992: LD_ADDR_VAR 0 9
46996: PUSH
46997: LD_VAR 0 9
47001: PPUSH
47002: LD_VAR 0 7
47006: PPUSH
47007: LD_VAR 0 6
47011: PUSH
47012: LD_VAR 0 7
47016: ARRAY
47017: PUSH
47018: LD_INT 1
47020: ARRAY
47021: PPUSH
47022: CALL_OW 1
47026: ST_TO_ADDR
47027: GO 46989
47029: POP
47030: POP
// result := tmp ;
47031: LD_ADDR_VAR 0 6
47035: PUSH
47036: LD_VAR 0 9
47040: ST_TO_ADDR
// end ; end ;
47041: LD_VAR 0 6
47045: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47046: LD_INT 0
47048: PPUSH
47049: PPUSH
47050: PPUSH
47051: PPUSH
47052: PPUSH
47053: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47054: LD_ADDR_VAR 0 5
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: ST_TO_ADDR
// if not x or not y then
47076: LD_VAR 0 2
47080: NOT
47081: PUSH
47082: LD_VAR 0 3
47086: NOT
47087: OR
47088: IFFALSE 47092
// exit ;
47090: GO 48742
// if not range then
47092: LD_VAR 0 4
47096: NOT
47097: IFFALSE 47107
// range := 10 ;
47099: LD_ADDR_VAR 0 4
47103: PUSH
47104: LD_INT 10
47106: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47107: LD_ADDR_VAR 0 8
47111: PUSH
47112: LD_INT 81
47114: PUSH
47115: LD_VAR 0 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 92
47126: PUSH
47127: LD_VAR 0 2
47131: PUSH
47132: LD_VAR 0 3
47136: PUSH
47137: LD_VAR 0 4
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 3
47150: PUSH
47151: LD_INT 21
47153: PUSH
47154: LD_INT 3
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: LIST
47169: PPUSH
47170: CALL_OW 69
47174: ST_TO_ADDR
// if not tmp then
47175: LD_VAR 0 8
47179: NOT
47180: IFFALSE 47184
// exit ;
47182: GO 48742
// for i in tmp do
47184: LD_ADDR_VAR 0 6
47188: PUSH
47189: LD_VAR 0 8
47193: PUSH
47194: FOR_IN
47195: IFFALSE 48717
// begin points := [ 0 , 0 , 0 ] ;
47197: LD_ADDR_VAR 0 9
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: LIST
47215: ST_TO_ADDR
// bpoints := 1 ;
47216: LD_ADDR_VAR 0 10
47220: PUSH
47221: LD_INT 1
47223: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47224: LD_VAR 0 6
47228: PPUSH
47229: CALL_OW 247
47233: PUSH
47234: LD_INT 1
47236: DOUBLE
47237: EQUAL
47238: IFTRUE 47242
47240: GO 47820
47242: POP
// begin if GetClass ( i ) = 1 then
47243: LD_VAR 0 6
47247: PPUSH
47248: CALL_OW 257
47252: PUSH
47253: LD_INT 1
47255: EQUAL
47256: IFFALSE 47277
// points := [ 10 , 5 , 3 ] ;
47258: LD_ADDR_VAR 0 9
47262: PUSH
47263: LD_INT 10
47265: PUSH
47266: LD_INT 5
47268: PUSH
47269: LD_INT 3
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47277: LD_VAR 0 6
47281: PPUSH
47282: CALL_OW 257
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: LD_INT 4
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: IN
47301: IFFALSE 47322
// points := [ 3 , 2 , 1 ] ;
47303: LD_ADDR_VAR 0 9
47307: PUSH
47308: LD_INT 3
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47322: LD_VAR 0 6
47326: PPUSH
47327: CALL_OW 257
47331: PUSH
47332: LD_INT 5
47334: EQUAL
47335: IFFALSE 47356
// points := [ 130 , 5 , 2 ] ;
47337: LD_ADDR_VAR 0 9
47341: PUSH
47342: LD_INT 130
47344: PUSH
47345: LD_INT 5
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47356: LD_VAR 0 6
47360: PPUSH
47361: CALL_OW 257
47365: PUSH
47366: LD_INT 8
47368: EQUAL
47369: IFFALSE 47390
// points := [ 35 , 35 , 30 ] ;
47371: LD_ADDR_VAR 0 9
47375: PUSH
47376: LD_INT 35
47378: PUSH
47379: LD_INT 35
47381: PUSH
47382: LD_INT 30
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: LIST
47389: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47390: LD_VAR 0 6
47394: PPUSH
47395: CALL_OW 257
47399: PUSH
47400: LD_INT 9
47402: EQUAL
47403: IFFALSE 47424
// points := [ 20 , 55 , 40 ] ;
47405: LD_ADDR_VAR 0 9
47409: PUSH
47410: LD_INT 20
47412: PUSH
47413: LD_INT 55
47415: PUSH
47416: LD_INT 40
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47424: LD_VAR 0 6
47428: PPUSH
47429: CALL_OW 257
47433: PUSH
47434: LD_INT 12
47436: PUSH
47437: LD_INT 16
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: IN
47444: IFFALSE 47465
// points := [ 5 , 3 , 2 ] ;
47446: LD_ADDR_VAR 0 9
47450: PUSH
47451: LD_INT 5
47453: PUSH
47454: LD_INT 3
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: LIST
47464: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47465: LD_VAR 0 6
47469: PPUSH
47470: CALL_OW 257
47474: PUSH
47475: LD_INT 17
47477: EQUAL
47478: IFFALSE 47499
// points := [ 100 , 50 , 75 ] ;
47480: LD_ADDR_VAR 0 9
47484: PUSH
47485: LD_INT 100
47487: PUSH
47488: LD_INT 50
47490: PUSH
47491: LD_INT 75
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: LIST
47498: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47499: LD_VAR 0 6
47503: PPUSH
47504: CALL_OW 257
47508: PUSH
47509: LD_INT 15
47511: EQUAL
47512: IFFALSE 47533
// points := [ 10 , 5 , 3 ] ;
47514: LD_ADDR_VAR 0 9
47518: PUSH
47519: LD_INT 10
47521: PUSH
47522: LD_INT 5
47524: PUSH
47525: LD_INT 3
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47533: LD_VAR 0 6
47537: PPUSH
47538: CALL_OW 257
47542: PUSH
47543: LD_INT 14
47545: EQUAL
47546: IFFALSE 47567
// points := [ 10 , 0 , 0 ] ;
47548: LD_ADDR_VAR 0 9
47552: PUSH
47553: LD_INT 10
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: LIST
47566: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47567: LD_VAR 0 6
47571: PPUSH
47572: CALL_OW 257
47576: PUSH
47577: LD_INT 11
47579: EQUAL
47580: IFFALSE 47601
// points := [ 30 , 10 , 5 ] ;
47582: LD_ADDR_VAR 0 9
47586: PUSH
47587: LD_INT 30
47589: PUSH
47590: LD_INT 10
47592: PUSH
47593: LD_INT 5
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: LIST
47600: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47601: LD_VAR 0 1
47605: PPUSH
47606: LD_INT 5
47608: PPUSH
47609: CALL_OW 321
47613: PUSH
47614: LD_INT 2
47616: EQUAL
47617: IFFALSE 47634
// bpoints := bpoints * 1.8 ;
47619: LD_ADDR_VAR 0 10
47623: PUSH
47624: LD_VAR 0 10
47628: PUSH
47629: LD_REAL  1.80000000000000E+0000
47632: MUL
47633: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47634: LD_VAR 0 6
47638: PPUSH
47639: CALL_OW 257
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: LD_INT 3
47652: PUSH
47653: LD_INT 4
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: IN
47662: PUSH
47663: LD_VAR 0 1
47667: PPUSH
47668: LD_INT 51
47670: PPUSH
47671: CALL_OW 321
47675: PUSH
47676: LD_INT 2
47678: EQUAL
47679: AND
47680: IFFALSE 47697
// bpoints := bpoints * 1.2 ;
47682: LD_ADDR_VAR 0 10
47686: PUSH
47687: LD_VAR 0 10
47691: PUSH
47692: LD_REAL  1.20000000000000E+0000
47695: MUL
47696: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47697: LD_VAR 0 6
47701: PPUSH
47702: CALL_OW 257
47706: PUSH
47707: LD_INT 5
47709: PUSH
47710: LD_INT 7
47712: PUSH
47713: LD_INT 9
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: LIST
47720: IN
47721: PUSH
47722: LD_VAR 0 1
47726: PPUSH
47727: LD_INT 52
47729: PPUSH
47730: CALL_OW 321
47734: PUSH
47735: LD_INT 2
47737: EQUAL
47738: AND
47739: IFFALSE 47756
// bpoints := bpoints * 1.5 ;
47741: LD_ADDR_VAR 0 10
47745: PUSH
47746: LD_VAR 0 10
47750: PUSH
47751: LD_REAL  1.50000000000000E+0000
47754: MUL
47755: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47756: LD_VAR 0 1
47760: PPUSH
47761: LD_INT 66
47763: PPUSH
47764: CALL_OW 321
47768: PUSH
47769: LD_INT 2
47771: EQUAL
47772: IFFALSE 47789
// bpoints := bpoints * 1.1 ;
47774: LD_ADDR_VAR 0 10
47778: PUSH
47779: LD_VAR 0 10
47783: PUSH
47784: LD_REAL  1.10000000000000E+0000
47787: MUL
47788: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47789: LD_ADDR_VAR 0 10
47793: PUSH
47794: LD_VAR 0 10
47798: PUSH
47799: LD_VAR 0 6
47803: PPUSH
47804: LD_INT 1
47806: PPUSH
47807: CALL_OW 259
47811: PUSH
47812: LD_REAL  1.15000000000000E+0000
47815: MUL
47816: MUL
47817: ST_TO_ADDR
// end ; unit_vehicle :
47818: GO 48646
47820: LD_INT 2
47822: DOUBLE
47823: EQUAL
47824: IFTRUE 47828
47826: GO 48634
47828: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47829: LD_VAR 0 6
47833: PPUSH
47834: CALL_OW 264
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: LD_INT 42
47844: PUSH
47845: LD_INT 24
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: LIST
47852: IN
47853: IFFALSE 47874
// points := [ 25 , 5 , 3 ] ;
47855: LD_ADDR_VAR 0 9
47859: PUSH
47860: LD_INT 25
47862: PUSH
47863: LD_INT 5
47865: PUSH
47866: LD_INT 3
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47874: LD_VAR 0 6
47878: PPUSH
47879: CALL_OW 264
47883: PUSH
47884: LD_INT 4
47886: PUSH
47887: LD_INT 43
47889: PUSH
47890: LD_INT 25
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: LIST
47897: IN
47898: IFFALSE 47919
// points := [ 40 , 15 , 5 ] ;
47900: LD_ADDR_VAR 0 9
47904: PUSH
47905: LD_INT 40
47907: PUSH
47908: LD_INT 15
47910: PUSH
47911: LD_INT 5
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: LIST
47918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47919: LD_VAR 0 6
47923: PPUSH
47924: CALL_OW 264
47928: PUSH
47929: LD_INT 3
47931: PUSH
47932: LD_INT 23
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: IN
47939: IFFALSE 47960
// points := [ 7 , 25 , 8 ] ;
47941: LD_ADDR_VAR 0 9
47945: PUSH
47946: LD_INT 7
47948: PUSH
47949: LD_INT 25
47951: PUSH
47952: LD_INT 8
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: LIST
47959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47960: LD_VAR 0 6
47964: PPUSH
47965: CALL_OW 264
47969: PUSH
47970: LD_INT 5
47972: PUSH
47973: LD_INT 27
47975: PUSH
47976: LD_INT 44
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: IN
47984: IFFALSE 48005
// points := [ 14 , 50 , 16 ] ;
47986: LD_ADDR_VAR 0 9
47990: PUSH
47991: LD_INT 14
47993: PUSH
47994: LD_INT 50
47996: PUSH
47997: LD_INT 16
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48005: LD_VAR 0 6
48009: PPUSH
48010: CALL_OW 264
48014: PUSH
48015: LD_INT 6
48017: PUSH
48018: LD_INT 46
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: IN
48025: IFFALSE 48046
// points := [ 32 , 120 , 70 ] ;
48027: LD_ADDR_VAR 0 9
48031: PUSH
48032: LD_INT 32
48034: PUSH
48035: LD_INT 120
48037: PUSH
48038: LD_INT 70
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: LIST
48045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48046: LD_VAR 0 6
48050: PPUSH
48051: CALL_OW 264
48055: PUSH
48056: LD_INT 7
48058: PUSH
48059: LD_INT 28
48061: PUSH
48062: LD_INT 45
48064: PUSH
48065: LD_INT 92
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: IN
48074: IFFALSE 48095
// points := [ 35 , 20 , 45 ] ;
48076: LD_ADDR_VAR 0 9
48080: PUSH
48081: LD_INT 35
48083: PUSH
48084: LD_INT 20
48086: PUSH
48087: LD_INT 45
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: LIST
48094: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48095: LD_VAR 0 6
48099: PPUSH
48100: CALL_OW 264
48104: PUSH
48105: LD_INT 47
48107: PUSH
48108: EMPTY
48109: LIST
48110: IN
48111: IFFALSE 48132
// points := [ 67 , 45 , 75 ] ;
48113: LD_ADDR_VAR 0 9
48117: PUSH
48118: LD_INT 67
48120: PUSH
48121: LD_INT 45
48123: PUSH
48124: LD_INT 75
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: LIST
48131: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48132: LD_VAR 0 6
48136: PPUSH
48137: CALL_OW 264
48141: PUSH
48142: LD_INT 26
48144: PUSH
48145: EMPTY
48146: LIST
48147: IN
48148: IFFALSE 48169
// points := [ 120 , 30 , 80 ] ;
48150: LD_ADDR_VAR 0 9
48154: PUSH
48155: LD_INT 120
48157: PUSH
48158: LD_INT 30
48160: PUSH
48161: LD_INT 80
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: LIST
48168: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48169: LD_VAR 0 6
48173: PPUSH
48174: CALL_OW 264
48178: PUSH
48179: LD_INT 22
48181: PUSH
48182: EMPTY
48183: LIST
48184: IN
48185: IFFALSE 48206
// points := [ 40 , 1 , 1 ] ;
48187: LD_ADDR_VAR 0 9
48191: PUSH
48192: LD_INT 40
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: LIST
48205: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48206: LD_VAR 0 6
48210: PPUSH
48211: CALL_OW 264
48215: PUSH
48216: LD_INT 29
48218: PUSH
48219: EMPTY
48220: LIST
48221: IN
48222: IFFALSE 48243
// points := [ 70 , 200 , 400 ] ;
48224: LD_ADDR_VAR 0 9
48228: PUSH
48229: LD_INT 70
48231: PUSH
48232: LD_INT 200
48234: PUSH
48235: LD_INT 400
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48243: LD_VAR 0 6
48247: PPUSH
48248: CALL_OW 264
48252: PUSH
48253: LD_INT 14
48255: PUSH
48256: LD_INT 53
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: IN
48263: IFFALSE 48284
// points := [ 40 , 10 , 20 ] ;
48265: LD_ADDR_VAR 0 9
48269: PUSH
48270: LD_INT 40
48272: PUSH
48273: LD_INT 10
48275: PUSH
48276: LD_INT 20
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: LIST
48283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48284: LD_VAR 0 6
48288: PPUSH
48289: CALL_OW 264
48293: PUSH
48294: LD_INT 9
48296: PUSH
48297: EMPTY
48298: LIST
48299: IN
48300: IFFALSE 48321
// points := [ 5 , 70 , 20 ] ;
48302: LD_ADDR_VAR 0 9
48306: PUSH
48307: LD_INT 5
48309: PUSH
48310: LD_INT 70
48312: PUSH
48313: LD_INT 20
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: LIST
48320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48321: LD_VAR 0 6
48325: PPUSH
48326: CALL_OW 264
48330: PUSH
48331: LD_INT 10
48333: PUSH
48334: EMPTY
48335: LIST
48336: IN
48337: IFFALSE 48358
// points := [ 35 , 110 , 70 ] ;
48339: LD_ADDR_VAR 0 9
48343: PUSH
48344: LD_INT 35
48346: PUSH
48347: LD_INT 110
48349: PUSH
48350: LD_INT 70
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: LIST
48357: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48358: LD_VAR 0 6
48362: PPUSH
48363: CALL_OW 265
48367: PUSH
48368: LD_INT 25
48370: EQUAL
48371: IFFALSE 48392
// points := [ 80 , 65 , 100 ] ;
48373: LD_ADDR_VAR 0 9
48377: PUSH
48378: LD_INT 80
48380: PUSH
48381: LD_INT 65
48383: PUSH
48384: LD_INT 100
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: LIST
48391: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48392: LD_VAR 0 6
48396: PPUSH
48397: CALL_OW 263
48401: PUSH
48402: LD_INT 1
48404: EQUAL
48405: IFFALSE 48440
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48407: LD_ADDR_VAR 0 10
48411: PUSH
48412: LD_VAR 0 10
48416: PUSH
48417: LD_VAR 0 6
48421: PPUSH
48422: CALL_OW 311
48426: PPUSH
48427: LD_INT 3
48429: PPUSH
48430: CALL_OW 259
48434: PUSH
48435: LD_INT 4
48437: MUL
48438: MUL
48439: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48440: LD_VAR 0 6
48444: PPUSH
48445: CALL_OW 263
48449: PUSH
48450: LD_INT 2
48452: EQUAL
48453: IFFALSE 48504
// begin j := IsControledBy ( i ) ;
48455: LD_ADDR_VAR 0 7
48459: PUSH
48460: LD_VAR 0 6
48464: PPUSH
48465: CALL_OW 312
48469: ST_TO_ADDR
// if j then
48470: LD_VAR 0 7
48474: IFFALSE 48504
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48476: LD_ADDR_VAR 0 10
48480: PUSH
48481: LD_VAR 0 10
48485: PUSH
48486: LD_VAR 0 7
48490: PPUSH
48491: LD_INT 3
48493: PPUSH
48494: CALL_OW 259
48498: PUSH
48499: LD_INT 3
48501: MUL
48502: MUL
48503: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48504: LD_VAR 0 6
48508: PPUSH
48509: CALL_OW 264
48513: PUSH
48514: LD_INT 5
48516: PUSH
48517: LD_INT 6
48519: PUSH
48520: LD_INT 46
48522: PUSH
48523: LD_INT 44
48525: PUSH
48526: LD_INT 47
48528: PUSH
48529: LD_INT 45
48531: PUSH
48532: LD_INT 28
48534: PUSH
48535: LD_INT 7
48537: PUSH
48538: LD_INT 27
48540: PUSH
48541: LD_INT 29
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: IN
48556: PUSH
48557: LD_VAR 0 1
48561: PPUSH
48562: LD_INT 52
48564: PPUSH
48565: CALL_OW 321
48569: PUSH
48570: LD_INT 2
48572: EQUAL
48573: AND
48574: IFFALSE 48591
// bpoints := bpoints * 1.2 ;
48576: LD_ADDR_VAR 0 10
48580: PUSH
48581: LD_VAR 0 10
48585: PUSH
48586: LD_REAL  1.20000000000000E+0000
48589: MUL
48590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48591: LD_VAR 0 6
48595: PPUSH
48596: CALL_OW 264
48600: PUSH
48601: LD_INT 6
48603: PUSH
48604: LD_INT 46
48606: PUSH
48607: LD_INT 47
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: LIST
48614: IN
48615: IFFALSE 48632
// bpoints := bpoints * 1.2 ;
48617: LD_ADDR_VAR 0 10
48621: PUSH
48622: LD_VAR 0 10
48626: PUSH
48627: LD_REAL  1.20000000000000E+0000
48630: MUL
48631: ST_TO_ADDR
// end ; unit_building :
48632: GO 48646
48634: LD_INT 3
48636: DOUBLE
48637: EQUAL
48638: IFTRUE 48642
48640: GO 48645
48642: POP
// ; end ;
48643: GO 48646
48645: POP
// for j = 1 to 3 do
48646: LD_ADDR_VAR 0 7
48650: PUSH
48651: DOUBLE
48652: LD_INT 1
48654: DEC
48655: ST_TO_ADDR
48656: LD_INT 3
48658: PUSH
48659: FOR_TO
48660: IFFALSE 48713
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48662: LD_ADDR_VAR 0 5
48666: PUSH
48667: LD_VAR 0 5
48671: PPUSH
48672: LD_VAR 0 7
48676: PPUSH
48677: LD_VAR 0 5
48681: PUSH
48682: LD_VAR 0 7
48686: ARRAY
48687: PUSH
48688: LD_VAR 0 9
48692: PUSH
48693: LD_VAR 0 7
48697: ARRAY
48698: PUSH
48699: LD_VAR 0 10
48703: MUL
48704: PLUS
48705: PPUSH
48706: CALL_OW 1
48710: ST_TO_ADDR
48711: GO 48659
48713: POP
48714: POP
// end ;
48715: GO 47194
48717: POP
48718: POP
// result := Replace ( result , 4 , tmp ) ;
48719: LD_ADDR_VAR 0 5
48723: PUSH
48724: LD_VAR 0 5
48728: PPUSH
48729: LD_INT 4
48731: PPUSH
48732: LD_VAR 0 8
48736: PPUSH
48737: CALL_OW 1
48741: ST_TO_ADDR
// end ;
48742: LD_VAR 0 5
48746: RET
// export function DangerAtRange ( unit , range ) ; begin
48747: LD_INT 0
48749: PPUSH
// if not unit then
48750: LD_VAR 0 1
48754: NOT
48755: IFFALSE 48759
// exit ;
48757: GO 48804
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48759: LD_ADDR_VAR 0 3
48763: PUSH
48764: LD_VAR 0 1
48768: PPUSH
48769: CALL_OW 255
48773: PPUSH
48774: LD_VAR 0 1
48778: PPUSH
48779: CALL_OW 250
48783: PPUSH
48784: LD_VAR 0 1
48788: PPUSH
48789: CALL_OW 251
48793: PPUSH
48794: LD_VAR 0 2
48798: PPUSH
48799: CALL 47046 0 4
48803: ST_TO_ADDR
// end ;
48804: LD_VAR 0 3
48808: RET
// export function DangerInArea ( side , area ) ; begin
48809: LD_INT 0
48811: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48812: LD_ADDR_VAR 0 3
48816: PUSH
48817: LD_VAR 0 2
48821: PPUSH
48822: LD_INT 81
48824: PUSH
48825: LD_VAR 0 1
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PPUSH
48834: CALL_OW 70
48838: ST_TO_ADDR
// end ;
48839: LD_VAR 0 3
48843: RET
// export function IsExtension ( b ) ; begin
48844: LD_INT 0
48846: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48847: LD_ADDR_VAR 0 2
48851: PUSH
48852: LD_VAR 0 1
48856: PUSH
48857: LD_INT 23
48859: PUSH
48860: LD_INT 20
48862: PUSH
48863: LD_INT 22
48865: PUSH
48866: LD_INT 17
48868: PUSH
48869: LD_INT 24
48871: PUSH
48872: LD_INT 21
48874: PUSH
48875: LD_INT 19
48877: PUSH
48878: LD_INT 16
48880: PUSH
48881: LD_INT 25
48883: PUSH
48884: LD_INT 18
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: IN
48899: ST_TO_ADDR
// end ;
48900: LD_VAR 0 2
48904: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48905: LD_INT 0
48907: PPUSH
48908: PPUSH
48909: PPUSH
// result := [ ] ;
48910: LD_ADDR_VAR 0 4
48914: PUSH
48915: EMPTY
48916: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48917: LD_ADDR_VAR 0 5
48921: PUSH
48922: LD_VAR 0 2
48926: PPUSH
48927: LD_INT 21
48929: PUSH
48930: LD_INT 3
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PPUSH
48937: CALL_OW 70
48941: ST_TO_ADDR
// if not tmp then
48942: LD_VAR 0 5
48946: NOT
48947: IFFALSE 48951
// exit ;
48949: GO 49015
// if checkLink then
48951: LD_VAR 0 3
48955: IFFALSE 49005
// begin for i in tmp do
48957: LD_ADDR_VAR 0 6
48961: PUSH
48962: LD_VAR 0 5
48966: PUSH
48967: FOR_IN
48968: IFFALSE 49003
// if GetBase ( i ) <> base then
48970: LD_VAR 0 6
48974: PPUSH
48975: CALL_OW 274
48979: PUSH
48980: LD_VAR 0 1
48984: NONEQUAL
48985: IFFALSE 49001
// ComLinkToBase ( base , i ) ;
48987: LD_VAR 0 1
48991: PPUSH
48992: LD_VAR 0 6
48996: PPUSH
48997: CALL_OW 169
49001: GO 48967
49003: POP
49004: POP
// end ; result := tmp ;
49005: LD_ADDR_VAR 0 4
49009: PUSH
49010: LD_VAR 0 5
49014: ST_TO_ADDR
// end ;
49015: LD_VAR 0 4
49019: RET
// export function ComComplete ( units , b ) ; var i ; begin
49020: LD_INT 0
49022: PPUSH
49023: PPUSH
// if not units then
49024: LD_VAR 0 1
49028: NOT
49029: IFFALSE 49033
// exit ;
49031: GO 49123
// for i in units do
49033: LD_ADDR_VAR 0 4
49037: PUSH
49038: LD_VAR 0 1
49042: PUSH
49043: FOR_IN
49044: IFFALSE 49121
// if BuildingStatus ( b ) = bs_build then
49046: LD_VAR 0 2
49050: PPUSH
49051: CALL_OW 461
49055: PUSH
49056: LD_INT 1
49058: EQUAL
49059: IFFALSE 49119
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49061: LD_VAR 0 4
49065: PPUSH
49066: LD_STRING h
49068: PUSH
49069: LD_VAR 0 2
49073: PPUSH
49074: CALL_OW 250
49078: PUSH
49079: LD_VAR 0 2
49083: PPUSH
49084: CALL_OW 251
49088: PUSH
49089: LD_VAR 0 2
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: PUSH
49112: EMPTY
49113: LIST
49114: PPUSH
49115: CALL_OW 446
49119: GO 49043
49121: POP
49122: POP
// end ;
49123: LD_VAR 0 3
49127: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49128: LD_INT 0
49130: PPUSH
49131: PPUSH
49132: PPUSH
49133: PPUSH
49134: PPUSH
49135: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49136: LD_VAR 0 1
49140: NOT
49141: PUSH
49142: LD_VAR 0 1
49146: PPUSH
49147: CALL_OW 263
49151: PUSH
49152: LD_INT 2
49154: NONEQUAL
49155: OR
49156: IFFALSE 49160
// exit ;
49158: GO 49476
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49160: LD_ADDR_VAR 0 6
49164: PUSH
49165: LD_INT 22
49167: PUSH
49168: LD_VAR 0 1
49172: PPUSH
49173: CALL_OW 255
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 30
49187: PUSH
49188: LD_INT 36
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 34
49197: PUSH
49198: LD_INT 31
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: LIST
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PPUSH
49214: CALL_OW 69
49218: ST_TO_ADDR
// if not tmp then
49219: LD_VAR 0 6
49223: NOT
49224: IFFALSE 49228
// exit ;
49226: GO 49476
// result := [ ] ;
49228: LD_ADDR_VAR 0 2
49232: PUSH
49233: EMPTY
49234: ST_TO_ADDR
// for i in tmp do
49235: LD_ADDR_VAR 0 3
49239: PUSH
49240: LD_VAR 0 6
49244: PUSH
49245: FOR_IN
49246: IFFALSE 49317
// begin t := UnitsInside ( i ) ;
49248: LD_ADDR_VAR 0 4
49252: PUSH
49253: LD_VAR 0 3
49257: PPUSH
49258: CALL_OW 313
49262: ST_TO_ADDR
// if t then
49263: LD_VAR 0 4
49267: IFFALSE 49315
// for j in t do
49269: LD_ADDR_VAR 0 7
49273: PUSH
49274: LD_VAR 0 4
49278: PUSH
49279: FOR_IN
49280: IFFALSE 49313
// result := Replace ( result , result + 1 , j ) ;
49282: LD_ADDR_VAR 0 2
49286: PUSH
49287: LD_VAR 0 2
49291: PPUSH
49292: LD_VAR 0 2
49296: PUSH
49297: LD_INT 1
49299: PLUS
49300: PPUSH
49301: LD_VAR 0 7
49305: PPUSH
49306: CALL_OW 1
49310: ST_TO_ADDR
49311: GO 49279
49313: POP
49314: POP
// end ;
49315: GO 49245
49317: POP
49318: POP
// if not result then
49319: LD_VAR 0 2
49323: NOT
49324: IFFALSE 49328
// exit ;
49326: GO 49476
// mech := result [ 1 ] ;
49328: LD_ADDR_VAR 0 5
49332: PUSH
49333: LD_VAR 0 2
49337: PUSH
49338: LD_INT 1
49340: ARRAY
49341: ST_TO_ADDR
// if result > 1 then
49342: LD_VAR 0 2
49346: PUSH
49347: LD_INT 1
49349: GREATER
49350: IFFALSE 49462
// begin for i = 2 to result do
49352: LD_ADDR_VAR 0 3
49356: PUSH
49357: DOUBLE
49358: LD_INT 2
49360: DEC
49361: ST_TO_ADDR
49362: LD_VAR 0 2
49366: PUSH
49367: FOR_TO
49368: IFFALSE 49460
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49370: LD_ADDR_VAR 0 4
49374: PUSH
49375: LD_VAR 0 2
49379: PUSH
49380: LD_VAR 0 3
49384: ARRAY
49385: PPUSH
49386: LD_INT 3
49388: PPUSH
49389: CALL_OW 259
49393: PUSH
49394: LD_VAR 0 2
49398: PUSH
49399: LD_VAR 0 3
49403: ARRAY
49404: PPUSH
49405: CALL_OW 432
49409: MINUS
49410: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49411: LD_VAR 0 4
49415: PUSH
49416: LD_VAR 0 5
49420: PPUSH
49421: LD_INT 3
49423: PPUSH
49424: CALL_OW 259
49428: PUSH
49429: LD_VAR 0 5
49433: PPUSH
49434: CALL_OW 432
49438: MINUS
49439: GREATEREQUAL
49440: IFFALSE 49458
// mech := result [ i ] ;
49442: LD_ADDR_VAR 0 5
49446: PUSH
49447: LD_VAR 0 2
49451: PUSH
49452: LD_VAR 0 3
49456: ARRAY
49457: ST_TO_ADDR
// end ;
49458: GO 49367
49460: POP
49461: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49462: LD_VAR 0 1
49466: PPUSH
49467: LD_VAR 0 5
49471: PPUSH
49472: CALL_OW 135
// end ;
49476: LD_VAR 0 2
49480: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49481: LD_INT 0
49483: PPUSH
49484: PPUSH
49485: PPUSH
49486: PPUSH
49487: PPUSH
49488: PPUSH
49489: PPUSH
49490: PPUSH
49491: PPUSH
49492: PPUSH
49493: PPUSH
49494: PPUSH
49495: PPUSH
// result := [ ] ;
49496: LD_ADDR_VAR 0 7
49500: PUSH
49501: EMPTY
49502: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49503: LD_VAR 0 1
49507: PPUSH
49508: CALL_OW 266
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: IN
49523: NOT
49524: IFFALSE 49528
// exit ;
49526: GO 51162
// if name then
49528: LD_VAR 0 3
49532: IFFALSE 49548
// SetBName ( base_dep , name ) ;
49534: LD_VAR 0 1
49538: PPUSH
49539: LD_VAR 0 3
49543: PPUSH
49544: CALL_OW 500
// base := GetBase ( base_dep ) ;
49548: LD_ADDR_VAR 0 15
49552: PUSH
49553: LD_VAR 0 1
49557: PPUSH
49558: CALL_OW 274
49562: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49563: LD_ADDR_VAR 0 16
49567: PUSH
49568: LD_VAR 0 1
49572: PPUSH
49573: CALL_OW 255
49577: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49578: LD_ADDR_VAR 0 17
49582: PUSH
49583: LD_VAR 0 1
49587: PPUSH
49588: CALL_OW 248
49592: ST_TO_ADDR
// if sources then
49593: LD_VAR 0 5
49597: IFFALSE 49644
// for i = 1 to 3 do
49599: LD_ADDR_VAR 0 8
49603: PUSH
49604: DOUBLE
49605: LD_INT 1
49607: DEC
49608: ST_TO_ADDR
49609: LD_INT 3
49611: PUSH
49612: FOR_TO
49613: IFFALSE 49642
// AddResourceType ( base , i , sources [ i ] ) ;
49615: LD_VAR 0 15
49619: PPUSH
49620: LD_VAR 0 8
49624: PPUSH
49625: LD_VAR 0 5
49629: PUSH
49630: LD_VAR 0 8
49634: ARRAY
49635: PPUSH
49636: CALL_OW 276
49640: GO 49612
49642: POP
49643: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49644: LD_ADDR_VAR 0 18
49648: PUSH
49649: LD_VAR 0 15
49653: PPUSH
49654: LD_VAR 0 2
49658: PPUSH
49659: LD_INT 1
49661: PPUSH
49662: CALL 48905 0 3
49666: ST_TO_ADDR
// InitHc ;
49667: CALL_OW 19
// InitUc ;
49671: CALL_OW 18
// uc_side := side ;
49675: LD_ADDR_OWVAR 20
49679: PUSH
49680: LD_VAR 0 16
49684: ST_TO_ADDR
// uc_nation := nation ;
49685: LD_ADDR_OWVAR 21
49689: PUSH
49690: LD_VAR 0 17
49694: ST_TO_ADDR
// if buildings then
49695: LD_VAR 0 18
49699: IFFALSE 51021
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49701: LD_ADDR_VAR 0 19
49705: PUSH
49706: LD_VAR 0 18
49710: PPUSH
49711: LD_INT 2
49713: PUSH
49714: LD_INT 30
49716: PUSH
49717: LD_INT 29
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 30
49726: PUSH
49727: LD_INT 30
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: PPUSH
49739: CALL_OW 72
49743: ST_TO_ADDR
// if tmp then
49744: LD_VAR 0 19
49748: IFFALSE 49796
// for i in tmp do
49750: LD_ADDR_VAR 0 8
49754: PUSH
49755: LD_VAR 0 19
49759: PUSH
49760: FOR_IN
49761: IFFALSE 49794
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49763: LD_VAR 0 8
49767: PPUSH
49768: CALL_OW 250
49772: PPUSH
49773: LD_VAR 0 8
49777: PPUSH
49778: CALL_OW 251
49782: PPUSH
49783: LD_VAR 0 16
49787: PPUSH
49788: CALL_OW 441
49792: GO 49760
49794: POP
49795: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49796: LD_VAR 0 18
49800: PPUSH
49801: LD_INT 2
49803: PUSH
49804: LD_INT 30
49806: PUSH
49807: LD_INT 32
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 30
49816: PUSH
49817: LD_INT 33
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: PPUSH
49829: CALL_OW 72
49833: IFFALSE 49921
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49835: LD_ADDR_VAR 0 8
49839: PUSH
49840: LD_VAR 0 18
49844: PPUSH
49845: LD_INT 2
49847: PUSH
49848: LD_INT 30
49850: PUSH
49851: LD_INT 32
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 30
49860: PUSH
49861: LD_INT 33
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: LIST
49872: PPUSH
49873: CALL_OW 72
49877: PUSH
49878: FOR_IN
49879: IFFALSE 49919
// begin if not GetBWeapon ( i ) then
49881: LD_VAR 0 8
49885: PPUSH
49886: CALL_OW 269
49890: NOT
49891: IFFALSE 49917
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49893: LD_VAR 0 8
49897: PPUSH
49898: LD_VAR 0 8
49902: PPUSH
49903: LD_VAR 0 2
49907: PPUSH
49908: CALL 51167 0 2
49912: PPUSH
49913: CALL_OW 431
// end ;
49917: GO 49878
49919: POP
49920: POP
// end ; for i = 1 to personel do
49921: LD_ADDR_VAR 0 8
49925: PUSH
49926: DOUBLE
49927: LD_INT 1
49929: DEC
49930: ST_TO_ADDR
49931: LD_VAR 0 6
49935: PUSH
49936: FOR_TO
49937: IFFALSE 51001
// begin if i > 4 then
49939: LD_VAR 0 8
49943: PUSH
49944: LD_INT 4
49946: GREATER
49947: IFFALSE 49951
// break ;
49949: GO 51001
// case i of 1 :
49951: LD_VAR 0 8
49955: PUSH
49956: LD_INT 1
49958: DOUBLE
49959: EQUAL
49960: IFTRUE 49964
49962: GO 50044
49964: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49965: LD_ADDR_VAR 0 12
49969: PUSH
49970: LD_VAR 0 18
49974: PPUSH
49975: LD_INT 22
49977: PUSH
49978: LD_VAR 0 16
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 58
49989: PUSH
49990: EMPTY
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: LD_INT 30
49998: PUSH
49999: LD_INT 32
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 30
50008: PUSH
50009: LD_INT 4
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 30
50018: PUSH
50019: LD_INT 5
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: LIST
50036: PPUSH
50037: CALL_OW 72
50041: ST_TO_ADDR
50042: GO 50266
50044: LD_INT 2
50046: DOUBLE
50047: EQUAL
50048: IFTRUE 50052
50050: GO 50114
50052: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50053: LD_ADDR_VAR 0 12
50057: PUSH
50058: LD_VAR 0 18
50062: PPUSH
50063: LD_INT 22
50065: PUSH
50066: LD_VAR 0 16
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: LD_INT 30
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 30
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: LIST
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PPUSH
50107: CALL_OW 72
50111: ST_TO_ADDR
50112: GO 50266
50114: LD_INT 3
50116: DOUBLE
50117: EQUAL
50118: IFTRUE 50122
50120: GO 50184
50122: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50123: LD_ADDR_VAR 0 12
50127: PUSH
50128: LD_VAR 0 18
50132: PPUSH
50133: LD_INT 22
50135: PUSH
50136: LD_VAR 0 16
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: LD_INT 30
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 30
50160: PUSH
50161: LD_INT 3
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: LIST
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PPUSH
50177: CALL_OW 72
50181: ST_TO_ADDR
50182: GO 50266
50184: LD_INT 4
50186: DOUBLE
50187: EQUAL
50188: IFTRUE 50192
50190: GO 50265
50192: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50193: LD_ADDR_VAR 0 12
50197: PUSH
50198: LD_VAR 0 18
50202: PPUSH
50203: LD_INT 22
50205: PUSH
50206: LD_VAR 0 16
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: LD_INT 30
50220: PUSH
50221: LD_INT 6
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 30
50230: PUSH
50231: LD_INT 7
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 30
50240: PUSH
50241: LD_INT 8
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PPUSH
50258: CALL_OW 72
50262: ST_TO_ADDR
50263: GO 50266
50265: POP
// if i = 1 then
50266: LD_VAR 0 8
50270: PUSH
50271: LD_INT 1
50273: EQUAL
50274: IFFALSE 50385
// begin tmp := [ ] ;
50276: LD_ADDR_VAR 0 19
50280: PUSH
50281: EMPTY
50282: ST_TO_ADDR
// for j in f do
50283: LD_ADDR_VAR 0 9
50287: PUSH
50288: LD_VAR 0 12
50292: PUSH
50293: FOR_IN
50294: IFFALSE 50367
// if GetBType ( j ) = b_bunker then
50296: LD_VAR 0 9
50300: PPUSH
50301: CALL_OW 266
50305: PUSH
50306: LD_INT 32
50308: EQUAL
50309: IFFALSE 50336
// tmp := Insert ( tmp , 1 , j ) else
50311: LD_ADDR_VAR 0 19
50315: PUSH
50316: LD_VAR 0 19
50320: PPUSH
50321: LD_INT 1
50323: PPUSH
50324: LD_VAR 0 9
50328: PPUSH
50329: CALL_OW 2
50333: ST_TO_ADDR
50334: GO 50365
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50336: LD_ADDR_VAR 0 19
50340: PUSH
50341: LD_VAR 0 19
50345: PPUSH
50346: LD_VAR 0 19
50350: PUSH
50351: LD_INT 1
50353: PLUS
50354: PPUSH
50355: LD_VAR 0 9
50359: PPUSH
50360: CALL_OW 2
50364: ST_TO_ADDR
50365: GO 50293
50367: POP
50368: POP
// if tmp then
50369: LD_VAR 0 19
50373: IFFALSE 50385
// f := tmp ;
50375: LD_ADDR_VAR 0 12
50379: PUSH
50380: LD_VAR 0 19
50384: ST_TO_ADDR
// end ; x := personel [ i ] ;
50385: LD_ADDR_VAR 0 13
50389: PUSH
50390: LD_VAR 0 6
50394: PUSH
50395: LD_VAR 0 8
50399: ARRAY
50400: ST_TO_ADDR
// if x = - 1 then
50401: LD_VAR 0 13
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: EQUAL
50410: IFFALSE 50619
// begin for j in f do
50412: LD_ADDR_VAR 0 9
50416: PUSH
50417: LD_VAR 0 12
50421: PUSH
50422: FOR_IN
50423: IFFALSE 50615
// repeat InitHc ;
50425: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50429: LD_VAR 0 9
50433: PPUSH
50434: CALL_OW 266
50438: PUSH
50439: LD_INT 5
50441: EQUAL
50442: IFFALSE 50512
// begin if UnitsInside ( j ) < 3 then
50444: LD_VAR 0 9
50448: PPUSH
50449: CALL_OW 313
50453: PUSH
50454: LD_INT 3
50456: LESS
50457: IFFALSE 50493
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50459: LD_INT 0
50461: PPUSH
50462: LD_INT 5
50464: PUSH
50465: LD_INT 8
50467: PUSH
50468: LD_INT 9
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: LIST
50475: PUSH
50476: LD_VAR 0 17
50480: ARRAY
50481: PPUSH
50482: LD_VAR 0 4
50486: PPUSH
50487: CALL_OW 380
50491: GO 50510
// PrepareHuman ( false , i , skill ) ;
50493: LD_INT 0
50495: PPUSH
50496: LD_VAR 0 8
50500: PPUSH
50501: LD_VAR 0 4
50505: PPUSH
50506: CALL_OW 380
// end else
50510: GO 50529
// PrepareHuman ( false , i , skill ) ;
50512: LD_INT 0
50514: PPUSH
50515: LD_VAR 0 8
50519: PPUSH
50520: LD_VAR 0 4
50524: PPUSH
50525: CALL_OW 380
// un := CreateHuman ;
50529: LD_ADDR_VAR 0 14
50533: PUSH
50534: CALL_OW 44
50538: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50539: LD_ADDR_VAR 0 7
50543: PUSH
50544: LD_VAR 0 7
50548: PPUSH
50549: LD_INT 1
50551: PPUSH
50552: LD_VAR 0 14
50556: PPUSH
50557: CALL_OW 2
50561: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50562: LD_VAR 0 14
50566: PPUSH
50567: LD_VAR 0 9
50571: PPUSH
50572: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50576: LD_VAR 0 9
50580: PPUSH
50581: CALL_OW 313
50585: PUSH
50586: LD_INT 6
50588: EQUAL
50589: PUSH
50590: LD_VAR 0 9
50594: PPUSH
50595: CALL_OW 266
50599: PUSH
50600: LD_INT 32
50602: PUSH
50603: LD_INT 31
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: IN
50610: OR
50611: IFFALSE 50425
50613: GO 50422
50615: POP
50616: POP
// end else
50617: GO 50999
// for j = 1 to x do
50619: LD_ADDR_VAR 0 9
50623: PUSH
50624: DOUBLE
50625: LD_INT 1
50627: DEC
50628: ST_TO_ADDR
50629: LD_VAR 0 13
50633: PUSH
50634: FOR_TO
50635: IFFALSE 50997
// begin InitHc ;
50637: CALL_OW 19
// if not f then
50641: LD_VAR 0 12
50645: NOT
50646: IFFALSE 50735
// begin PrepareHuman ( false , i , skill ) ;
50648: LD_INT 0
50650: PPUSH
50651: LD_VAR 0 8
50655: PPUSH
50656: LD_VAR 0 4
50660: PPUSH
50661: CALL_OW 380
// un := CreateHuman ;
50665: LD_ADDR_VAR 0 14
50669: PUSH
50670: CALL_OW 44
50674: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50675: LD_ADDR_VAR 0 7
50679: PUSH
50680: LD_VAR 0 7
50684: PPUSH
50685: LD_INT 1
50687: PPUSH
50688: LD_VAR 0 14
50692: PPUSH
50693: CALL_OW 2
50697: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50698: LD_VAR 0 14
50702: PPUSH
50703: LD_VAR 0 1
50707: PPUSH
50708: CALL_OW 250
50712: PPUSH
50713: LD_VAR 0 1
50717: PPUSH
50718: CALL_OW 251
50722: PPUSH
50723: LD_INT 10
50725: PPUSH
50726: LD_INT 0
50728: PPUSH
50729: CALL_OW 50
// continue ;
50733: GO 50634
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50735: LD_VAR 0 12
50739: PUSH
50740: LD_INT 1
50742: ARRAY
50743: PPUSH
50744: CALL_OW 313
50748: PUSH
50749: LD_VAR 0 12
50753: PUSH
50754: LD_INT 1
50756: ARRAY
50757: PPUSH
50758: CALL_OW 266
50762: PUSH
50763: LD_INT 32
50765: PUSH
50766: LD_INT 31
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: IN
50773: AND
50774: PUSH
50775: LD_VAR 0 12
50779: PUSH
50780: LD_INT 1
50782: ARRAY
50783: PPUSH
50784: CALL_OW 313
50788: PUSH
50789: LD_INT 6
50791: EQUAL
50792: OR
50793: IFFALSE 50813
// f := Delete ( f , 1 ) ;
50795: LD_ADDR_VAR 0 12
50799: PUSH
50800: LD_VAR 0 12
50804: PPUSH
50805: LD_INT 1
50807: PPUSH
50808: CALL_OW 3
50812: ST_TO_ADDR
// if not f then
50813: LD_VAR 0 12
50817: NOT
50818: IFFALSE 50836
// begin x := x + 2 ;
50820: LD_ADDR_VAR 0 13
50824: PUSH
50825: LD_VAR 0 13
50829: PUSH
50830: LD_INT 2
50832: PLUS
50833: ST_TO_ADDR
// continue ;
50834: GO 50634
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50836: LD_VAR 0 12
50840: PUSH
50841: LD_INT 1
50843: ARRAY
50844: PPUSH
50845: CALL_OW 266
50849: PUSH
50850: LD_INT 5
50852: EQUAL
50853: IFFALSE 50927
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50855: LD_VAR 0 12
50859: PUSH
50860: LD_INT 1
50862: ARRAY
50863: PPUSH
50864: CALL_OW 313
50868: PUSH
50869: LD_INT 3
50871: LESS
50872: IFFALSE 50908
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50874: LD_INT 0
50876: PPUSH
50877: LD_INT 5
50879: PUSH
50880: LD_INT 8
50882: PUSH
50883: LD_INT 9
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: LIST
50890: PUSH
50891: LD_VAR 0 17
50895: ARRAY
50896: PPUSH
50897: LD_VAR 0 4
50901: PPUSH
50902: CALL_OW 380
50906: GO 50925
// PrepareHuman ( false , i , skill ) ;
50908: LD_INT 0
50910: PPUSH
50911: LD_VAR 0 8
50915: PPUSH
50916: LD_VAR 0 4
50920: PPUSH
50921: CALL_OW 380
// end else
50925: GO 50944
// PrepareHuman ( false , i , skill ) ;
50927: LD_INT 0
50929: PPUSH
50930: LD_VAR 0 8
50934: PPUSH
50935: LD_VAR 0 4
50939: PPUSH
50940: CALL_OW 380
// un := CreateHuman ;
50944: LD_ADDR_VAR 0 14
50948: PUSH
50949: CALL_OW 44
50953: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50954: LD_ADDR_VAR 0 7
50958: PUSH
50959: LD_VAR 0 7
50963: PPUSH
50964: LD_INT 1
50966: PPUSH
50967: LD_VAR 0 14
50971: PPUSH
50972: CALL_OW 2
50976: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50977: LD_VAR 0 14
50981: PPUSH
50982: LD_VAR 0 12
50986: PUSH
50987: LD_INT 1
50989: ARRAY
50990: PPUSH
50991: CALL_OW 52
// end ;
50995: GO 50634
50997: POP
50998: POP
// end ;
50999: GO 49936
51001: POP
51002: POP
// result := result ^ buildings ;
51003: LD_ADDR_VAR 0 7
51007: PUSH
51008: LD_VAR 0 7
51012: PUSH
51013: LD_VAR 0 18
51017: ADD
51018: ST_TO_ADDR
// end else
51019: GO 51162
// begin for i = 1 to personel do
51021: LD_ADDR_VAR 0 8
51025: PUSH
51026: DOUBLE
51027: LD_INT 1
51029: DEC
51030: ST_TO_ADDR
51031: LD_VAR 0 6
51035: PUSH
51036: FOR_TO
51037: IFFALSE 51160
// begin if i > 4 then
51039: LD_VAR 0 8
51043: PUSH
51044: LD_INT 4
51046: GREATER
51047: IFFALSE 51051
// break ;
51049: GO 51160
// x := personel [ i ] ;
51051: LD_ADDR_VAR 0 13
51055: PUSH
51056: LD_VAR 0 6
51060: PUSH
51061: LD_VAR 0 8
51065: ARRAY
51066: ST_TO_ADDR
// if x = - 1 then
51067: LD_VAR 0 13
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: EQUAL
51076: IFFALSE 51080
// continue ;
51078: GO 51036
// PrepareHuman ( false , i , skill ) ;
51080: LD_INT 0
51082: PPUSH
51083: LD_VAR 0 8
51087: PPUSH
51088: LD_VAR 0 4
51092: PPUSH
51093: CALL_OW 380
// un := CreateHuman ;
51097: LD_ADDR_VAR 0 14
51101: PUSH
51102: CALL_OW 44
51106: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51107: LD_VAR 0 14
51111: PPUSH
51112: LD_VAR 0 1
51116: PPUSH
51117: CALL_OW 250
51121: PPUSH
51122: LD_VAR 0 1
51126: PPUSH
51127: CALL_OW 251
51131: PPUSH
51132: LD_INT 10
51134: PPUSH
51135: LD_INT 0
51137: PPUSH
51138: CALL_OW 50
// result := result ^ un ;
51142: LD_ADDR_VAR 0 7
51146: PUSH
51147: LD_VAR 0 7
51151: PUSH
51152: LD_VAR 0 14
51156: ADD
51157: ST_TO_ADDR
// end ;
51158: GO 51036
51160: POP
51161: POP
// end ; end ;
51162: LD_VAR 0 7
51166: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51167: LD_INT 0
51169: PPUSH
51170: PPUSH
51171: PPUSH
51172: PPUSH
51173: PPUSH
51174: PPUSH
51175: PPUSH
51176: PPUSH
51177: PPUSH
51178: PPUSH
51179: PPUSH
51180: PPUSH
51181: PPUSH
51182: PPUSH
51183: PPUSH
51184: PPUSH
// result := false ;
51185: LD_ADDR_VAR 0 3
51189: PUSH
51190: LD_INT 0
51192: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51193: LD_VAR 0 1
51197: NOT
51198: PUSH
51199: LD_VAR 0 1
51203: PPUSH
51204: CALL_OW 266
51208: PUSH
51209: LD_INT 32
51211: PUSH
51212: LD_INT 33
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: IN
51219: NOT
51220: OR
51221: IFFALSE 51225
// exit ;
51223: GO 52334
// nat := GetNation ( tower ) ;
51225: LD_ADDR_VAR 0 12
51229: PUSH
51230: LD_VAR 0 1
51234: PPUSH
51235: CALL_OW 248
51239: ST_TO_ADDR
// side := GetSide ( tower ) ;
51240: LD_ADDR_VAR 0 16
51244: PUSH
51245: LD_VAR 0 1
51249: PPUSH
51250: CALL_OW 255
51254: ST_TO_ADDR
// x := GetX ( tower ) ;
51255: LD_ADDR_VAR 0 10
51259: PUSH
51260: LD_VAR 0 1
51264: PPUSH
51265: CALL_OW 250
51269: ST_TO_ADDR
// y := GetY ( tower ) ;
51270: LD_ADDR_VAR 0 11
51274: PUSH
51275: LD_VAR 0 1
51279: PPUSH
51280: CALL_OW 251
51284: ST_TO_ADDR
// if not x or not y then
51285: LD_VAR 0 10
51289: NOT
51290: PUSH
51291: LD_VAR 0 11
51295: NOT
51296: OR
51297: IFFALSE 51301
// exit ;
51299: GO 52334
// weapon := 0 ;
51301: LD_ADDR_VAR 0 18
51305: PUSH
51306: LD_INT 0
51308: ST_TO_ADDR
// fac_list := [ ] ;
51309: LD_ADDR_VAR 0 17
51313: PUSH
51314: EMPTY
51315: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51316: LD_ADDR_VAR 0 6
51320: PUSH
51321: LD_VAR 0 1
51325: PPUSH
51326: CALL_OW 274
51330: PPUSH
51331: LD_VAR 0 2
51335: PPUSH
51336: LD_INT 0
51338: PPUSH
51339: CALL 48905 0 3
51343: PPUSH
51344: LD_INT 30
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PPUSH
51354: CALL_OW 72
51358: ST_TO_ADDR
// if not factories then
51359: LD_VAR 0 6
51363: NOT
51364: IFFALSE 51368
// exit ;
51366: GO 52334
// for i in factories do
51368: LD_ADDR_VAR 0 8
51372: PUSH
51373: LD_VAR 0 6
51377: PUSH
51378: FOR_IN
51379: IFFALSE 51404
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51381: LD_ADDR_VAR 0 17
51385: PUSH
51386: LD_VAR 0 17
51390: PUSH
51391: LD_VAR 0 8
51395: PPUSH
51396: CALL_OW 478
51400: UNION
51401: ST_TO_ADDR
51402: GO 51378
51404: POP
51405: POP
// if not fac_list then
51406: LD_VAR 0 17
51410: NOT
51411: IFFALSE 51415
// exit ;
51413: GO 52334
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51415: LD_ADDR_VAR 0 5
51419: PUSH
51420: LD_INT 4
51422: PUSH
51423: LD_INT 5
51425: PUSH
51426: LD_INT 9
51428: PUSH
51429: LD_INT 10
51431: PUSH
51432: LD_INT 6
51434: PUSH
51435: LD_INT 7
51437: PUSH
51438: LD_INT 11
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 27
51452: PUSH
51453: LD_INT 28
51455: PUSH
51456: LD_INT 26
51458: PUSH
51459: LD_INT 30
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 43
51470: PUSH
51471: LD_INT 44
51473: PUSH
51474: LD_INT 46
51476: PUSH
51477: LD_INT 45
51479: PUSH
51480: LD_INT 47
51482: PUSH
51483: LD_INT 49
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: LIST
51498: PUSH
51499: LD_VAR 0 12
51503: ARRAY
51504: ST_TO_ADDR
// list := list isect fac_list ;
51505: LD_ADDR_VAR 0 5
51509: PUSH
51510: LD_VAR 0 5
51514: PUSH
51515: LD_VAR 0 17
51519: ISECT
51520: ST_TO_ADDR
// if not list then
51521: LD_VAR 0 5
51525: NOT
51526: IFFALSE 51530
// exit ;
51528: GO 52334
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51530: LD_VAR 0 12
51534: PUSH
51535: LD_INT 3
51537: EQUAL
51538: PUSH
51539: LD_INT 49
51541: PUSH
51542: LD_VAR 0 5
51546: IN
51547: AND
51548: PUSH
51549: LD_INT 31
51551: PPUSH
51552: LD_VAR 0 16
51556: PPUSH
51557: CALL_OW 321
51561: PUSH
51562: LD_INT 2
51564: EQUAL
51565: AND
51566: IFFALSE 51626
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51568: LD_INT 22
51570: PUSH
51571: LD_VAR 0 16
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 35
51582: PUSH
51583: LD_INT 49
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 91
51592: PUSH
51593: LD_VAR 0 1
51597: PUSH
51598: LD_INT 10
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: PPUSH
51611: CALL_OW 69
51615: NOT
51616: IFFALSE 51626
// weapon := ru_time_lapser ;
51618: LD_ADDR_VAR 0 18
51622: PUSH
51623: LD_INT 49
51625: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51626: LD_VAR 0 12
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: IN
51641: PUSH
51642: LD_INT 11
51644: PUSH
51645: LD_VAR 0 5
51649: IN
51650: PUSH
51651: LD_INT 30
51653: PUSH
51654: LD_VAR 0 5
51658: IN
51659: OR
51660: AND
51661: PUSH
51662: LD_INT 6
51664: PPUSH
51665: LD_VAR 0 16
51669: PPUSH
51670: CALL_OW 321
51674: PUSH
51675: LD_INT 2
51677: EQUAL
51678: AND
51679: IFFALSE 51844
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51681: LD_INT 22
51683: PUSH
51684: LD_VAR 0 16
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: LD_INT 35
51698: PUSH
51699: LD_INT 11
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 35
51708: PUSH
51709: LD_INT 30
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 91
51723: PUSH
51724: LD_VAR 0 1
51728: PUSH
51729: LD_INT 18
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: LIST
51741: PPUSH
51742: CALL_OW 69
51746: NOT
51747: PUSH
51748: LD_INT 22
51750: PUSH
51751: LD_VAR 0 16
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: LD_INT 30
51765: PUSH
51766: LD_INT 32
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 30
51775: PUSH
51776: LD_INT 33
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 91
51790: PUSH
51791: LD_VAR 0 1
51795: PUSH
51796: LD_INT 12
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: LIST
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: LIST
51808: PUSH
51809: EMPTY
51810: LIST
51811: PPUSH
51812: CALL_OW 69
51816: PUSH
51817: LD_INT 2
51819: GREATER
51820: AND
51821: IFFALSE 51844
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51823: LD_ADDR_VAR 0 18
51827: PUSH
51828: LD_INT 11
51830: PUSH
51831: LD_INT 30
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_VAR 0 12
51842: ARRAY
51843: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51844: LD_VAR 0 18
51848: NOT
51849: PUSH
51850: LD_INT 40
51852: PPUSH
51853: LD_VAR 0 16
51857: PPUSH
51858: CALL_OW 321
51862: PUSH
51863: LD_INT 2
51865: EQUAL
51866: AND
51867: PUSH
51868: LD_INT 7
51870: PUSH
51871: LD_VAR 0 5
51875: IN
51876: PUSH
51877: LD_INT 28
51879: PUSH
51880: LD_VAR 0 5
51884: IN
51885: OR
51886: PUSH
51887: LD_INT 45
51889: PUSH
51890: LD_VAR 0 5
51894: IN
51895: OR
51896: AND
51897: IFFALSE 52151
// begin hex := GetHexInfo ( x , y ) ;
51899: LD_ADDR_VAR 0 4
51903: PUSH
51904: LD_VAR 0 10
51908: PPUSH
51909: LD_VAR 0 11
51913: PPUSH
51914: CALL_OW 546
51918: ST_TO_ADDR
// if hex [ 1 ] then
51919: LD_VAR 0 4
51923: PUSH
51924: LD_INT 1
51926: ARRAY
51927: IFFALSE 51931
// exit ;
51929: GO 52334
// height := hex [ 2 ] ;
51931: LD_ADDR_VAR 0 15
51935: PUSH
51936: LD_VAR 0 4
51940: PUSH
51941: LD_INT 2
51943: ARRAY
51944: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51945: LD_ADDR_VAR 0 14
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 3
51958: PUSH
51959: LD_INT 5
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: ST_TO_ADDR
// for i in tmp do
51968: LD_ADDR_VAR 0 8
51972: PUSH
51973: LD_VAR 0 14
51977: PUSH
51978: FOR_IN
51979: IFFALSE 52149
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51981: LD_ADDR_VAR 0 9
51985: PUSH
51986: LD_VAR 0 10
51990: PPUSH
51991: LD_VAR 0 8
51995: PPUSH
51996: LD_INT 5
51998: PPUSH
51999: CALL_OW 272
52003: PUSH
52004: LD_VAR 0 11
52008: PPUSH
52009: LD_VAR 0 8
52013: PPUSH
52014: LD_INT 5
52016: PPUSH
52017: CALL_OW 273
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52026: LD_VAR 0 9
52030: PUSH
52031: LD_INT 1
52033: ARRAY
52034: PPUSH
52035: LD_VAR 0 9
52039: PUSH
52040: LD_INT 2
52042: ARRAY
52043: PPUSH
52044: CALL_OW 488
52048: IFFALSE 52147
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52050: LD_ADDR_VAR 0 4
52054: PUSH
52055: LD_VAR 0 9
52059: PUSH
52060: LD_INT 1
52062: ARRAY
52063: PPUSH
52064: LD_VAR 0 9
52068: PUSH
52069: LD_INT 2
52071: ARRAY
52072: PPUSH
52073: CALL_OW 546
52077: ST_TO_ADDR
// if hex [ 1 ] then
52078: LD_VAR 0 4
52082: PUSH
52083: LD_INT 1
52085: ARRAY
52086: IFFALSE 52090
// continue ;
52088: GO 51978
// h := hex [ 2 ] ;
52090: LD_ADDR_VAR 0 13
52094: PUSH
52095: LD_VAR 0 4
52099: PUSH
52100: LD_INT 2
52102: ARRAY
52103: ST_TO_ADDR
// if h + 7 < height then
52104: LD_VAR 0 13
52108: PUSH
52109: LD_INT 7
52111: PLUS
52112: PUSH
52113: LD_VAR 0 15
52117: LESS
52118: IFFALSE 52147
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52120: LD_ADDR_VAR 0 18
52124: PUSH
52125: LD_INT 7
52127: PUSH
52128: LD_INT 28
52130: PUSH
52131: LD_INT 45
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: LIST
52138: PUSH
52139: LD_VAR 0 12
52143: ARRAY
52144: ST_TO_ADDR
// break ;
52145: GO 52149
// end ; end ; end ;
52147: GO 51978
52149: POP
52150: POP
// end ; if not weapon then
52151: LD_VAR 0 18
52155: NOT
52156: IFFALSE 52216
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52158: LD_ADDR_VAR 0 5
52162: PUSH
52163: LD_VAR 0 5
52167: PUSH
52168: LD_INT 11
52170: PUSH
52171: LD_INT 30
52173: PUSH
52174: LD_INT 49
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: DIFF
52182: ST_TO_ADDR
// if not list then
52183: LD_VAR 0 5
52187: NOT
52188: IFFALSE 52192
// exit ;
52190: GO 52334
// weapon := list [ rand ( 1 , list ) ] ;
52192: LD_ADDR_VAR 0 18
52196: PUSH
52197: LD_VAR 0 5
52201: PUSH
52202: LD_INT 1
52204: PPUSH
52205: LD_VAR 0 5
52209: PPUSH
52210: CALL_OW 12
52214: ARRAY
52215: ST_TO_ADDR
// end ; if weapon then
52216: LD_VAR 0 18
52220: IFFALSE 52334
// begin tmp := CostOfWeapon ( weapon ) ;
52222: LD_ADDR_VAR 0 14
52226: PUSH
52227: LD_VAR 0 18
52231: PPUSH
52232: CALL_OW 451
52236: ST_TO_ADDR
// j := GetBase ( tower ) ;
52237: LD_ADDR_VAR 0 9
52241: PUSH
52242: LD_VAR 0 1
52246: PPUSH
52247: CALL_OW 274
52251: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52252: LD_VAR 0 9
52256: PPUSH
52257: LD_INT 1
52259: PPUSH
52260: CALL_OW 275
52264: PUSH
52265: LD_VAR 0 14
52269: PUSH
52270: LD_INT 1
52272: ARRAY
52273: GREATEREQUAL
52274: PUSH
52275: LD_VAR 0 9
52279: PPUSH
52280: LD_INT 2
52282: PPUSH
52283: CALL_OW 275
52287: PUSH
52288: LD_VAR 0 14
52292: PUSH
52293: LD_INT 2
52295: ARRAY
52296: GREATEREQUAL
52297: AND
52298: PUSH
52299: LD_VAR 0 9
52303: PPUSH
52304: LD_INT 3
52306: PPUSH
52307: CALL_OW 275
52311: PUSH
52312: LD_VAR 0 14
52316: PUSH
52317: LD_INT 3
52319: ARRAY
52320: GREATEREQUAL
52321: AND
52322: IFFALSE 52334
// result := weapon ;
52324: LD_ADDR_VAR 0 3
52328: PUSH
52329: LD_VAR 0 18
52333: ST_TO_ADDR
// end ; end ;
52334: LD_VAR 0 3
52338: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52339: LD_INT 0
52341: PPUSH
52342: PPUSH
// result := true ;
52343: LD_ADDR_VAR 0 3
52347: PUSH
52348: LD_INT 1
52350: ST_TO_ADDR
// if array1 = array2 then
52351: LD_VAR 0 1
52355: PUSH
52356: LD_VAR 0 2
52360: EQUAL
52361: IFFALSE 52421
// begin for i = 1 to array1 do
52363: LD_ADDR_VAR 0 4
52367: PUSH
52368: DOUBLE
52369: LD_INT 1
52371: DEC
52372: ST_TO_ADDR
52373: LD_VAR 0 1
52377: PUSH
52378: FOR_TO
52379: IFFALSE 52417
// if array1 [ i ] <> array2 [ i ] then
52381: LD_VAR 0 1
52385: PUSH
52386: LD_VAR 0 4
52390: ARRAY
52391: PUSH
52392: LD_VAR 0 2
52396: PUSH
52397: LD_VAR 0 4
52401: ARRAY
52402: NONEQUAL
52403: IFFALSE 52415
// begin result := false ;
52405: LD_ADDR_VAR 0 3
52409: PUSH
52410: LD_INT 0
52412: ST_TO_ADDR
// break ;
52413: GO 52417
// end ;
52415: GO 52378
52417: POP
52418: POP
// end else
52419: GO 52429
// result := false ;
52421: LD_ADDR_VAR 0 3
52425: PUSH
52426: LD_INT 0
52428: ST_TO_ADDR
// end ;
52429: LD_VAR 0 3
52433: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52434: LD_INT 0
52436: PPUSH
52437: PPUSH
// if not array1 or not array2 then
52438: LD_VAR 0 1
52442: NOT
52443: PUSH
52444: LD_VAR 0 2
52448: NOT
52449: OR
52450: IFFALSE 52454
// exit ;
52452: GO 52518
// result := true ;
52454: LD_ADDR_VAR 0 3
52458: PUSH
52459: LD_INT 1
52461: ST_TO_ADDR
// for i = 1 to array1 do
52462: LD_ADDR_VAR 0 4
52466: PUSH
52467: DOUBLE
52468: LD_INT 1
52470: DEC
52471: ST_TO_ADDR
52472: LD_VAR 0 1
52476: PUSH
52477: FOR_TO
52478: IFFALSE 52516
// if array1 [ i ] <> array2 [ i ] then
52480: LD_VAR 0 1
52484: PUSH
52485: LD_VAR 0 4
52489: ARRAY
52490: PUSH
52491: LD_VAR 0 2
52495: PUSH
52496: LD_VAR 0 4
52500: ARRAY
52501: NONEQUAL
52502: IFFALSE 52514
// begin result := false ;
52504: LD_ADDR_VAR 0 3
52508: PUSH
52509: LD_INT 0
52511: ST_TO_ADDR
// break ;
52512: GO 52516
// end ;
52514: GO 52477
52516: POP
52517: POP
// end ;
52518: LD_VAR 0 3
52522: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52523: LD_INT 0
52525: PPUSH
52526: PPUSH
52527: PPUSH
// pom := GetBase ( fac ) ;
52528: LD_ADDR_VAR 0 5
52532: PUSH
52533: LD_VAR 0 1
52537: PPUSH
52538: CALL_OW 274
52542: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52543: LD_ADDR_VAR 0 4
52547: PUSH
52548: LD_VAR 0 2
52552: PUSH
52553: LD_INT 1
52555: ARRAY
52556: PPUSH
52557: LD_VAR 0 2
52561: PUSH
52562: LD_INT 2
52564: ARRAY
52565: PPUSH
52566: LD_VAR 0 2
52570: PUSH
52571: LD_INT 3
52573: ARRAY
52574: PPUSH
52575: LD_VAR 0 2
52579: PUSH
52580: LD_INT 4
52582: ARRAY
52583: PPUSH
52584: CALL_OW 449
52588: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52589: LD_ADDR_VAR 0 3
52593: PUSH
52594: LD_VAR 0 5
52598: PPUSH
52599: LD_INT 1
52601: PPUSH
52602: CALL_OW 275
52606: PUSH
52607: LD_VAR 0 4
52611: PUSH
52612: LD_INT 1
52614: ARRAY
52615: GREATEREQUAL
52616: PUSH
52617: LD_VAR 0 5
52621: PPUSH
52622: LD_INT 2
52624: PPUSH
52625: CALL_OW 275
52629: PUSH
52630: LD_VAR 0 4
52634: PUSH
52635: LD_INT 2
52637: ARRAY
52638: GREATEREQUAL
52639: AND
52640: PUSH
52641: LD_VAR 0 5
52645: PPUSH
52646: LD_INT 3
52648: PPUSH
52649: CALL_OW 275
52653: PUSH
52654: LD_VAR 0 4
52658: PUSH
52659: LD_INT 3
52661: ARRAY
52662: GREATEREQUAL
52663: AND
52664: ST_TO_ADDR
// end ;
52665: LD_VAR 0 3
52669: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52670: LD_INT 0
52672: PPUSH
52673: PPUSH
52674: PPUSH
52675: PPUSH
// pom := GetBase ( building ) ;
52676: LD_ADDR_VAR 0 3
52680: PUSH
52681: LD_VAR 0 1
52685: PPUSH
52686: CALL_OW 274
52690: ST_TO_ADDR
// if not pom then
52691: LD_VAR 0 3
52695: NOT
52696: IFFALSE 52700
// exit ;
52698: GO 52870
// btype := GetBType ( building ) ;
52700: LD_ADDR_VAR 0 5
52704: PUSH
52705: LD_VAR 0 1
52709: PPUSH
52710: CALL_OW 266
52714: ST_TO_ADDR
// if btype = b_armoury then
52715: LD_VAR 0 5
52719: PUSH
52720: LD_INT 4
52722: EQUAL
52723: IFFALSE 52733
// btype := b_barracks ;
52725: LD_ADDR_VAR 0 5
52729: PUSH
52730: LD_INT 5
52732: ST_TO_ADDR
// if btype = b_depot then
52733: LD_VAR 0 5
52737: PUSH
52738: LD_INT 0
52740: EQUAL
52741: IFFALSE 52751
// btype := b_warehouse ;
52743: LD_ADDR_VAR 0 5
52747: PUSH
52748: LD_INT 1
52750: ST_TO_ADDR
// if btype = b_workshop then
52751: LD_VAR 0 5
52755: PUSH
52756: LD_INT 2
52758: EQUAL
52759: IFFALSE 52769
// btype := b_factory ;
52761: LD_ADDR_VAR 0 5
52765: PUSH
52766: LD_INT 3
52768: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52769: LD_ADDR_VAR 0 4
52773: PUSH
52774: LD_VAR 0 5
52778: PPUSH
52779: LD_VAR 0 1
52783: PPUSH
52784: CALL_OW 248
52788: PPUSH
52789: CALL_OW 450
52793: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52794: LD_ADDR_VAR 0 2
52798: PUSH
52799: LD_VAR 0 3
52803: PPUSH
52804: LD_INT 1
52806: PPUSH
52807: CALL_OW 275
52811: PUSH
52812: LD_VAR 0 4
52816: PUSH
52817: LD_INT 1
52819: ARRAY
52820: GREATEREQUAL
52821: PUSH
52822: LD_VAR 0 3
52826: PPUSH
52827: LD_INT 2
52829: PPUSH
52830: CALL_OW 275
52834: PUSH
52835: LD_VAR 0 4
52839: PUSH
52840: LD_INT 2
52842: ARRAY
52843: GREATEREQUAL
52844: AND
52845: PUSH
52846: LD_VAR 0 3
52850: PPUSH
52851: LD_INT 3
52853: PPUSH
52854: CALL_OW 275
52858: PUSH
52859: LD_VAR 0 4
52863: PUSH
52864: LD_INT 3
52866: ARRAY
52867: GREATEREQUAL
52868: AND
52869: ST_TO_ADDR
// end ;
52870: LD_VAR 0 2
52874: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52875: LD_INT 0
52877: PPUSH
52878: PPUSH
52879: PPUSH
// pom := GetBase ( building ) ;
52880: LD_ADDR_VAR 0 4
52884: PUSH
52885: LD_VAR 0 1
52889: PPUSH
52890: CALL_OW 274
52894: ST_TO_ADDR
// if not pom then
52895: LD_VAR 0 4
52899: NOT
52900: IFFALSE 52904
// exit ;
52902: GO 53005
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52904: LD_ADDR_VAR 0 5
52908: PUSH
52909: LD_VAR 0 2
52913: PPUSH
52914: LD_VAR 0 1
52918: PPUSH
52919: CALL_OW 248
52923: PPUSH
52924: CALL_OW 450
52928: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52929: LD_ADDR_VAR 0 3
52933: PUSH
52934: LD_VAR 0 4
52938: PPUSH
52939: LD_INT 1
52941: PPUSH
52942: CALL_OW 275
52946: PUSH
52947: LD_VAR 0 5
52951: PUSH
52952: LD_INT 1
52954: ARRAY
52955: GREATEREQUAL
52956: PUSH
52957: LD_VAR 0 4
52961: PPUSH
52962: LD_INT 2
52964: PPUSH
52965: CALL_OW 275
52969: PUSH
52970: LD_VAR 0 5
52974: PUSH
52975: LD_INT 2
52977: ARRAY
52978: GREATEREQUAL
52979: AND
52980: PUSH
52981: LD_VAR 0 4
52985: PPUSH
52986: LD_INT 3
52988: PPUSH
52989: CALL_OW 275
52993: PUSH
52994: LD_VAR 0 5
52998: PUSH
52999: LD_INT 3
53001: ARRAY
53002: GREATEREQUAL
53003: AND
53004: ST_TO_ADDR
// end ;
53005: LD_VAR 0 3
53009: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53010: LD_INT 0
53012: PPUSH
53013: PPUSH
53014: PPUSH
53015: PPUSH
53016: PPUSH
53017: PPUSH
53018: PPUSH
53019: PPUSH
53020: PPUSH
53021: PPUSH
53022: PPUSH
// result := false ;
53023: LD_ADDR_VAR 0 8
53027: PUSH
53028: LD_INT 0
53030: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53031: LD_VAR 0 5
53035: NOT
53036: PUSH
53037: LD_VAR 0 1
53041: NOT
53042: OR
53043: PUSH
53044: LD_VAR 0 2
53048: NOT
53049: OR
53050: PUSH
53051: LD_VAR 0 3
53055: NOT
53056: OR
53057: IFFALSE 53061
// exit ;
53059: GO 53875
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53061: LD_ADDR_VAR 0 14
53065: PUSH
53066: LD_VAR 0 1
53070: PPUSH
53071: LD_VAR 0 2
53075: PPUSH
53076: LD_VAR 0 3
53080: PPUSH
53081: LD_VAR 0 4
53085: PPUSH
53086: LD_VAR 0 5
53090: PUSH
53091: LD_INT 1
53093: ARRAY
53094: PPUSH
53095: CALL_OW 248
53099: PPUSH
53100: LD_INT 0
53102: PPUSH
53103: CALL 55128 0 6
53107: ST_TO_ADDR
// if not hexes then
53108: LD_VAR 0 14
53112: NOT
53113: IFFALSE 53117
// exit ;
53115: GO 53875
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53117: LD_ADDR_VAR 0 17
53121: PUSH
53122: LD_VAR 0 5
53126: PPUSH
53127: LD_INT 22
53129: PUSH
53130: LD_VAR 0 13
53134: PPUSH
53135: CALL_OW 255
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: LD_INT 30
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 30
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: LIST
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PPUSH
53176: CALL_OW 72
53180: ST_TO_ADDR
// for i = 1 to hexes do
53181: LD_ADDR_VAR 0 9
53185: PUSH
53186: DOUBLE
53187: LD_INT 1
53189: DEC
53190: ST_TO_ADDR
53191: LD_VAR 0 14
53195: PUSH
53196: FOR_TO
53197: IFFALSE 53873
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53199: LD_ADDR_VAR 0 13
53203: PUSH
53204: LD_VAR 0 14
53208: PUSH
53209: LD_VAR 0 9
53213: ARRAY
53214: PUSH
53215: LD_INT 1
53217: ARRAY
53218: PPUSH
53219: LD_VAR 0 14
53223: PUSH
53224: LD_VAR 0 9
53228: ARRAY
53229: PUSH
53230: LD_INT 2
53232: ARRAY
53233: PPUSH
53234: CALL_OW 428
53238: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53239: LD_VAR 0 14
53243: PUSH
53244: LD_VAR 0 9
53248: ARRAY
53249: PUSH
53250: LD_INT 1
53252: ARRAY
53253: PPUSH
53254: LD_VAR 0 14
53258: PUSH
53259: LD_VAR 0 9
53263: ARRAY
53264: PUSH
53265: LD_INT 2
53267: ARRAY
53268: PPUSH
53269: CALL_OW 351
53273: PUSH
53274: LD_VAR 0 14
53278: PUSH
53279: LD_VAR 0 9
53283: ARRAY
53284: PUSH
53285: LD_INT 1
53287: ARRAY
53288: PPUSH
53289: LD_VAR 0 14
53293: PUSH
53294: LD_VAR 0 9
53298: ARRAY
53299: PUSH
53300: LD_INT 2
53302: ARRAY
53303: PPUSH
53304: CALL_OW 488
53308: NOT
53309: OR
53310: PUSH
53311: LD_VAR 0 13
53315: PPUSH
53316: CALL_OW 247
53320: PUSH
53321: LD_INT 3
53323: EQUAL
53324: OR
53325: IFFALSE 53331
// exit ;
53327: POP
53328: POP
53329: GO 53875
// if not tmp then
53331: LD_VAR 0 13
53335: NOT
53336: IFFALSE 53340
// continue ;
53338: GO 53196
// result := true ;
53340: LD_ADDR_VAR 0 8
53344: PUSH
53345: LD_INT 1
53347: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53348: LD_VAR 0 6
53352: PUSH
53353: LD_VAR 0 13
53357: PPUSH
53358: CALL_OW 247
53362: PUSH
53363: LD_INT 2
53365: EQUAL
53366: AND
53367: PUSH
53368: LD_VAR 0 13
53372: PPUSH
53373: CALL_OW 263
53377: PUSH
53378: LD_INT 1
53380: EQUAL
53381: AND
53382: IFFALSE 53546
// begin if IsDrivenBy ( tmp ) then
53384: LD_VAR 0 13
53388: PPUSH
53389: CALL_OW 311
53393: IFFALSE 53397
// continue ;
53395: GO 53196
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53397: LD_VAR 0 6
53401: PPUSH
53402: LD_INT 3
53404: PUSH
53405: LD_INT 60
53407: PUSH
53408: EMPTY
53409: LIST
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 3
53417: PUSH
53418: LD_INT 55
53420: PUSH
53421: EMPTY
53422: LIST
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PPUSH
53432: CALL_OW 72
53436: IFFALSE 53544
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53438: LD_ADDR_VAR 0 18
53442: PUSH
53443: LD_VAR 0 6
53447: PPUSH
53448: LD_INT 3
53450: PUSH
53451: LD_INT 60
53453: PUSH
53454: EMPTY
53455: LIST
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 3
53463: PUSH
53464: LD_INT 55
53466: PUSH
53467: EMPTY
53468: LIST
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PPUSH
53478: CALL_OW 72
53482: PUSH
53483: LD_INT 1
53485: ARRAY
53486: ST_TO_ADDR
// if IsInUnit ( driver ) then
53487: LD_VAR 0 18
53491: PPUSH
53492: CALL_OW 310
53496: IFFALSE 53507
// ComExit ( driver ) ;
53498: LD_VAR 0 18
53502: PPUSH
53503: CALL 78909 0 1
// AddComEnterUnit ( driver , tmp ) ;
53507: LD_VAR 0 18
53511: PPUSH
53512: LD_VAR 0 13
53516: PPUSH
53517: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53521: LD_VAR 0 18
53525: PPUSH
53526: LD_VAR 0 7
53530: PPUSH
53531: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53535: LD_VAR 0 18
53539: PPUSH
53540: CALL_OW 181
// end ; continue ;
53544: GO 53196
// end ; if not cleaners or not tmp in cleaners then
53546: LD_VAR 0 6
53550: NOT
53551: PUSH
53552: LD_VAR 0 13
53556: PUSH
53557: LD_VAR 0 6
53561: IN
53562: NOT
53563: OR
53564: IFFALSE 53871
// begin if dep then
53566: LD_VAR 0 17
53570: IFFALSE 53706
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53572: LD_ADDR_VAR 0 16
53576: PUSH
53577: LD_VAR 0 17
53581: PUSH
53582: LD_INT 1
53584: ARRAY
53585: PPUSH
53586: CALL_OW 250
53590: PPUSH
53591: LD_VAR 0 17
53595: PUSH
53596: LD_INT 1
53598: ARRAY
53599: PPUSH
53600: CALL_OW 254
53604: PPUSH
53605: LD_INT 5
53607: PPUSH
53608: CALL_OW 272
53612: PUSH
53613: LD_VAR 0 17
53617: PUSH
53618: LD_INT 1
53620: ARRAY
53621: PPUSH
53622: CALL_OW 251
53626: PPUSH
53627: LD_VAR 0 17
53631: PUSH
53632: LD_INT 1
53634: ARRAY
53635: PPUSH
53636: CALL_OW 254
53640: PPUSH
53641: LD_INT 5
53643: PPUSH
53644: CALL_OW 273
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53653: LD_VAR 0 16
53657: PUSH
53658: LD_INT 1
53660: ARRAY
53661: PPUSH
53662: LD_VAR 0 16
53666: PUSH
53667: LD_INT 2
53669: ARRAY
53670: PPUSH
53671: CALL_OW 488
53675: IFFALSE 53706
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53677: LD_VAR 0 13
53681: PPUSH
53682: LD_VAR 0 16
53686: PUSH
53687: LD_INT 1
53689: ARRAY
53690: PPUSH
53691: LD_VAR 0 16
53695: PUSH
53696: LD_INT 2
53698: ARRAY
53699: PPUSH
53700: CALL_OW 111
// continue ;
53704: GO 53196
// end ; end ; r := GetDir ( tmp ) ;
53706: LD_ADDR_VAR 0 15
53710: PUSH
53711: LD_VAR 0 13
53715: PPUSH
53716: CALL_OW 254
53720: ST_TO_ADDR
// if r = 5 then
53721: LD_VAR 0 15
53725: PUSH
53726: LD_INT 5
53728: EQUAL
53729: IFFALSE 53739
// r := 0 ;
53731: LD_ADDR_VAR 0 15
53735: PUSH
53736: LD_INT 0
53738: ST_TO_ADDR
// for j = r to 5 do
53739: LD_ADDR_VAR 0 10
53743: PUSH
53744: DOUBLE
53745: LD_VAR 0 15
53749: DEC
53750: ST_TO_ADDR
53751: LD_INT 5
53753: PUSH
53754: FOR_TO
53755: IFFALSE 53869
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53757: LD_ADDR_VAR 0 11
53761: PUSH
53762: LD_VAR 0 13
53766: PPUSH
53767: CALL_OW 250
53771: PPUSH
53772: LD_VAR 0 10
53776: PPUSH
53777: LD_INT 2
53779: PPUSH
53780: CALL_OW 272
53784: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53785: LD_ADDR_VAR 0 12
53789: PUSH
53790: LD_VAR 0 13
53794: PPUSH
53795: CALL_OW 251
53799: PPUSH
53800: LD_VAR 0 10
53804: PPUSH
53805: LD_INT 2
53807: PPUSH
53808: CALL_OW 273
53812: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53813: LD_VAR 0 11
53817: PPUSH
53818: LD_VAR 0 12
53822: PPUSH
53823: CALL_OW 488
53827: PUSH
53828: LD_VAR 0 11
53832: PPUSH
53833: LD_VAR 0 12
53837: PPUSH
53838: CALL_OW 428
53842: NOT
53843: AND
53844: IFFALSE 53867
// begin ComMoveXY ( tmp , _x , _y ) ;
53846: LD_VAR 0 13
53850: PPUSH
53851: LD_VAR 0 11
53855: PPUSH
53856: LD_VAR 0 12
53860: PPUSH
53861: CALL_OW 111
// break ;
53865: GO 53869
// end ; end ;
53867: GO 53754
53869: POP
53870: POP
// end ; end ;
53871: GO 53196
53873: POP
53874: POP
// end ;
53875: LD_VAR 0 8
53879: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53880: LD_INT 0
53882: PPUSH
// result := true ;
53883: LD_ADDR_VAR 0 3
53887: PUSH
53888: LD_INT 1
53890: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53891: LD_VAR 0 2
53895: PUSH
53896: LD_INT 24
53898: DOUBLE
53899: EQUAL
53900: IFTRUE 53910
53902: LD_INT 33
53904: DOUBLE
53905: EQUAL
53906: IFTRUE 53910
53908: GO 53935
53910: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53911: LD_ADDR_VAR 0 3
53915: PUSH
53916: LD_INT 32
53918: PPUSH
53919: LD_VAR 0 1
53923: PPUSH
53924: CALL_OW 321
53928: PUSH
53929: LD_INT 2
53931: EQUAL
53932: ST_TO_ADDR
53933: GO 54251
53935: LD_INT 20
53937: DOUBLE
53938: EQUAL
53939: IFTRUE 53943
53941: GO 53968
53943: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53944: LD_ADDR_VAR 0 3
53948: PUSH
53949: LD_INT 6
53951: PPUSH
53952: LD_VAR 0 1
53956: PPUSH
53957: CALL_OW 321
53961: PUSH
53962: LD_INT 2
53964: EQUAL
53965: ST_TO_ADDR
53966: GO 54251
53968: LD_INT 22
53970: DOUBLE
53971: EQUAL
53972: IFTRUE 53982
53974: LD_INT 36
53976: DOUBLE
53977: EQUAL
53978: IFTRUE 53982
53980: GO 54007
53982: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53983: LD_ADDR_VAR 0 3
53987: PUSH
53988: LD_INT 15
53990: PPUSH
53991: LD_VAR 0 1
53995: PPUSH
53996: CALL_OW 321
54000: PUSH
54001: LD_INT 2
54003: EQUAL
54004: ST_TO_ADDR
54005: GO 54251
54007: LD_INT 30
54009: DOUBLE
54010: EQUAL
54011: IFTRUE 54015
54013: GO 54040
54015: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54016: LD_ADDR_VAR 0 3
54020: PUSH
54021: LD_INT 20
54023: PPUSH
54024: LD_VAR 0 1
54028: PPUSH
54029: CALL_OW 321
54033: PUSH
54034: LD_INT 2
54036: EQUAL
54037: ST_TO_ADDR
54038: GO 54251
54040: LD_INT 28
54042: DOUBLE
54043: EQUAL
54044: IFTRUE 54054
54046: LD_INT 21
54048: DOUBLE
54049: EQUAL
54050: IFTRUE 54054
54052: GO 54079
54054: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54055: LD_ADDR_VAR 0 3
54059: PUSH
54060: LD_INT 21
54062: PPUSH
54063: LD_VAR 0 1
54067: PPUSH
54068: CALL_OW 321
54072: PUSH
54073: LD_INT 2
54075: EQUAL
54076: ST_TO_ADDR
54077: GO 54251
54079: LD_INT 16
54081: DOUBLE
54082: EQUAL
54083: IFTRUE 54087
54085: GO 54112
54087: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54088: LD_ADDR_VAR 0 3
54092: PUSH
54093: LD_INT 84
54095: PPUSH
54096: LD_VAR 0 1
54100: PPUSH
54101: CALL_OW 321
54105: PUSH
54106: LD_INT 2
54108: EQUAL
54109: ST_TO_ADDR
54110: GO 54251
54112: LD_INT 19
54114: DOUBLE
54115: EQUAL
54116: IFTRUE 54126
54118: LD_INT 23
54120: DOUBLE
54121: EQUAL
54122: IFTRUE 54126
54124: GO 54151
54126: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54127: LD_ADDR_VAR 0 3
54131: PUSH
54132: LD_INT 83
54134: PPUSH
54135: LD_VAR 0 1
54139: PPUSH
54140: CALL_OW 321
54144: PUSH
54145: LD_INT 2
54147: EQUAL
54148: ST_TO_ADDR
54149: GO 54251
54151: LD_INT 17
54153: DOUBLE
54154: EQUAL
54155: IFTRUE 54159
54157: GO 54184
54159: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54160: LD_ADDR_VAR 0 3
54164: PUSH
54165: LD_INT 39
54167: PPUSH
54168: LD_VAR 0 1
54172: PPUSH
54173: CALL_OW 321
54177: PUSH
54178: LD_INT 2
54180: EQUAL
54181: ST_TO_ADDR
54182: GO 54251
54184: LD_INT 18
54186: DOUBLE
54187: EQUAL
54188: IFTRUE 54192
54190: GO 54217
54192: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54193: LD_ADDR_VAR 0 3
54197: PUSH
54198: LD_INT 40
54200: PPUSH
54201: LD_VAR 0 1
54205: PPUSH
54206: CALL_OW 321
54210: PUSH
54211: LD_INT 2
54213: EQUAL
54214: ST_TO_ADDR
54215: GO 54251
54217: LD_INT 27
54219: DOUBLE
54220: EQUAL
54221: IFTRUE 54225
54223: GO 54250
54225: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54226: LD_ADDR_VAR 0 3
54230: PUSH
54231: LD_INT 35
54233: PPUSH
54234: LD_VAR 0 1
54238: PPUSH
54239: CALL_OW 321
54243: PUSH
54244: LD_INT 2
54246: EQUAL
54247: ST_TO_ADDR
54248: GO 54251
54250: POP
// end ;
54251: LD_VAR 0 3
54255: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54256: LD_INT 0
54258: PPUSH
54259: PPUSH
54260: PPUSH
54261: PPUSH
54262: PPUSH
54263: PPUSH
54264: PPUSH
54265: PPUSH
54266: PPUSH
54267: PPUSH
54268: PPUSH
// result := false ;
54269: LD_ADDR_VAR 0 6
54273: PUSH
54274: LD_INT 0
54276: ST_TO_ADDR
// if btype = b_depot then
54277: LD_VAR 0 2
54281: PUSH
54282: LD_INT 0
54284: EQUAL
54285: IFFALSE 54297
// begin result := true ;
54287: LD_ADDR_VAR 0 6
54291: PUSH
54292: LD_INT 1
54294: ST_TO_ADDR
// exit ;
54295: GO 55123
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54297: LD_VAR 0 1
54301: NOT
54302: PUSH
54303: LD_VAR 0 1
54307: PPUSH
54308: CALL_OW 266
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: IN
54323: NOT
54324: OR
54325: PUSH
54326: LD_VAR 0 2
54330: NOT
54331: OR
54332: PUSH
54333: LD_VAR 0 5
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: LD_INT 3
54349: PUSH
54350: LD_INT 4
54352: PUSH
54353: LD_INT 5
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: IN
54364: NOT
54365: OR
54366: PUSH
54367: LD_VAR 0 3
54371: PPUSH
54372: LD_VAR 0 4
54376: PPUSH
54377: CALL_OW 488
54381: NOT
54382: OR
54383: IFFALSE 54387
// exit ;
54385: GO 55123
// side := GetSide ( depot ) ;
54387: LD_ADDR_VAR 0 9
54391: PUSH
54392: LD_VAR 0 1
54396: PPUSH
54397: CALL_OW 255
54401: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54402: LD_VAR 0 9
54406: PPUSH
54407: LD_VAR 0 2
54411: PPUSH
54412: CALL 53880 0 2
54416: NOT
54417: IFFALSE 54421
// exit ;
54419: GO 55123
// pom := GetBase ( depot ) ;
54421: LD_ADDR_VAR 0 10
54425: PUSH
54426: LD_VAR 0 1
54430: PPUSH
54431: CALL_OW 274
54435: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54436: LD_ADDR_VAR 0 11
54440: PUSH
54441: LD_VAR 0 2
54445: PPUSH
54446: LD_VAR 0 1
54450: PPUSH
54451: CALL_OW 248
54455: PPUSH
54456: CALL_OW 450
54460: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54461: LD_VAR 0 10
54465: PPUSH
54466: LD_INT 1
54468: PPUSH
54469: CALL_OW 275
54473: PUSH
54474: LD_VAR 0 11
54478: PUSH
54479: LD_INT 1
54481: ARRAY
54482: GREATEREQUAL
54483: PUSH
54484: LD_VAR 0 10
54488: PPUSH
54489: LD_INT 2
54491: PPUSH
54492: CALL_OW 275
54496: PUSH
54497: LD_VAR 0 11
54501: PUSH
54502: LD_INT 2
54504: ARRAY
54505: GREATEREQUAL
54506: AND
54507: PUSH
54508: LD_VAR 0 10
54512: PPUSH
54513: LD_INT 3
54515: PPUSH
54516: CALL_OW 275
54520: PUSH
54521: LD_VAR 0 11
54525: PUSH
54526: LD_INT 3
54528: ARRAY
54529: GREATEREQUAL
54530: AND
54531: NOT
54532: IFFALSE 54536
// exit ;
54534: GO 55123
// if GetBType ( depot ) = b_depot then
54536: LD_VAR 0 1
54540: PPUSH
54541: CALL_OW 266
54545: PUSH
54546: LD_INT 0
54548: EQUAL
54549: IFFALSE 54561
// dist := 28 else
54551: LD_ADDR_VAR 0 14
54555: PUSH
54556: LD_INT 28
54558: ST_TO_ADDR
54559: GO 54569
// dist := 36 ;
54561: LD_ADDR_VAR 0 14
54565: PUSH
54566: LD_INT 36
54568: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54569: LD_VAR 0 1
54573: PPUSH
54574: LD_VAR 0 3
54578: PPUSH
54579: LD_VAR 0 4
54583: PPUSH
54584: CALL_OW 297
54588: PUSH
54589: LD_VAR 0 14
54593: GREATER
54594: IFFALSE 54598
// exit ;
54596: GO 55123
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54598: LD_ADDR_VAR 0 12
54602: PUSH
54603: LD_VAR 0 2
54607: PPUSH
54608: LD_VAR 0 3
54612: PPUSH
54613: LD_VAR 0 4
54617: PPUSH
54618: LD_VAR 0 5
54622: PPUSH
54623: LD_VAR 0 1
54627: PPUSH
54628: CALL_OW 248
54632: PPUSH
54633: LD_INT 0
54635: PPUSH
54636: CALL 55128 0 6
54640: ST_TO_ADDR
// if not hexes then
54641: LD_VAR 0 12
54645: NOT
54646: IFFALSE 54650
// exit ;
54648: GO 55123
// hex := GetHexInfo ( x , y ) ;
54650: LD_ADDR_VAR 0 15
54654: PUSH
54655: LD_VAR 0 3
54659: PPUSH
54660: LD_VAR 0 4
54664: PPUSH
54665: CALL_OW 546
54669: ST_TO_ADDR
// if hex [ 1 ] then
54670: LD_VAR 0 15
54674: PUSH
54675: LD_INT 1
54677: ARRAY
54678: IFFALSE 54682
// exit ;
54680: GO 55123
// height := hex [ 2 ] ;
54682: LD_ADDR_VAR 0 13
54686: PUSH
54687: LD_VAR 0 15
54691: PUSH
54692: LD_INT 2
54694: ARRAY
54695: ST_TO_ADDR
// for i = 1 to hexes do
54696: LD_ADDR_VAR 0 7
54700: PUSH
54701: DOUBLE
54702: LD_INT 1
54704: DEC
54705: ST_TO_ADDR
54706: LD_VAR 0 12
54710: PUSH
54711: FOR_TO
54712: IFFALSE 55042
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54714: LD_VAR 0 12
54718: PUSH
54719: LD_VAR 0 7
54723: ARRAY
54724: PUSH
54725: LD_INT 1
54727: ARRAY
54728: PPUSH
54729: LD_VAR 0 12
54733: PUSH
54734: LD_VAR 0 7
54738: ARRAY
54739: PUSH
54740: LD_INT 2
54742: ARRAY
54743: PPUSH
54744: CALL_OW 488
54748: NOT
54749: PUSH
54750: LD_VAR 0 12
54754: PUSH
54755: LD_VAR 0 7
54759: ARRAY
54760: PUSH
54761: LD_INT 1
54763: ARRAY
54764: PPUSH
54765: LD_VAR 0 12
54769: PUSH
54770: LD_VAR 0 7
54774: ARRAY
54775: PUSH
54776: LD_INT 2
54778: ARRAY
54779: PPUSH
54780: CALL_OW 428
54784: PUSH
54785: LD_INT 0
54787: GREATER
54788: OR
54789: PUSH
54790: LD_VAR 0 12
54794: PUSH
54795: LD_VAR 0 7
54799: ARRAY
54800: PUSH
54801: LD_INT 1
54803: ARRAY
54804: PPUSH
54805: LD_VAR 0 12
54809: PUSH
54810: LD_VAR 0 7
54814: ARRAY
54815: PUSH
54816: LD_INT 2
54818: ARRAY
54819: PPUSH
54820: CALL_OW 351
54824: OR
54825: IFFALSE 54831
// exit ;
54827: POP
54828: POP
54829: GO 55123
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54831: LD_ADDR_VAR 0 8
54835: PUSH
54836: LD_VAR 0 12
54840: PUSH
54841: LD_VAR 0 7
54845: ARRAY
54846: PUSH
54847: LD_INT 1
54849: ARRAY
54850: PPUSH
54851: LD_VAR 0 12
54855: PUSH
54856: LD_VAR 0 7
54860: ARRAY
54861: PUSH
54862: LD_INT 2
54864: ARRAY
54865: PPUSH
54866: CALL_OW 546
54870: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54871: LD_VAR 0 8
54875: PUSH
54876: LD_INT 1
54878: ARRAY
54879: PUSH
54880: LD_VAR 0 8
54884: PUSH
54885: LD_INT 2
54887: ARRAY
54888: PUSH
54889: LD_VAR 0 13
54893: PUSH
54894: LD_INT 2
54896: PLUS
54897: GREATER
54898: OR
54899: PUSH
54900: LD_VAR 0 8
54904: PUSH
54905: LD_INT 2
54907: ARRAY
54908: PUSH
54909: LD_VAR 0 13
54913: PUSH
54914: LD_INT 2
54916: MINUS
54917: LESS
54918: OR
54919: PUSH
54920: LD_VAR 0 8
54924: PUSH
54925: LD_INT 3
54927: ARRAY
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 8
54934: PUSH
54935: LD_INT 9
54937: PUSH
54938: LD_INT 10
54940: PUSH
54941: LD_INT 11
54943: PUSH
54944: LD_INT 12
54946: PUSH
54947: LD_INT 13
54949: PUSH
54950: LD_INT 16
54952: PUSH
54953: LD_INT 17
54955: PUSH
54956: LD_INT 18
54958: PUSH
54959: LD_INT 19
54961: PUSH
54962: LD_INT 20
54964: PUSH
54965: LD_INT 21
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: IN
54983: NOT
54984: OR
54985: PUSH
54986: LD_VAR 0 8
54990: PUSH
54991: LD_INT 5
54993: ARRAY
54994: NOT
54995: OR
54996: PUSH
54997: LD_VAR 0 8
55001: PUSH
55002: LD_INT 6
55004: ARRAY
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: LD_INT 7
55014: PUSH
55015: LD_INT 9
55017: PUSH
55018: LD_INT 10
55020: PUSH
55021: LD_INT 11
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: IN
55032: NOT
55033: OR
55034: IFFALSE 55040
// exit ;
55036: POP
55037: POP
55038: GO 55123
// end ;
55040: GO 54711
55042: POP
55043: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55044: LD_VAR 0 9
55048: PPUSH
55049: LD_VAR 0 3
55053: PPUSH
55054: LD_VAR 0 4
55058: PPUSH
55059: LD_INT 20
55061: PPUSH
55062: CALL 47046 0 4
55066: PUSH
55067: LD_INT 4
55069: ARRAY
55070: IFFALSE 55074
// exit ;
55072: GO 55123
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55074: LD_VAR 0 2
55078: PUSH
55079: LD_INT 29
55081: PUSH
55082: LD_INT 30
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: IN
55089: PUSH
55090: LD_VAR 0 3
55094: PPUSH
55095: LD_VAR 0 4
55099: PPUSH
55100: LD_VAR 0 9
55104: PPUSH
55105: CALL_OW 440
55109: NOT
55110: AND
55111: IFFALSE 55115
// exit ;
55113: GO 55123
// result := true ;
55115: LD_ADDR_VAR 0 6
55119: PUSH
55120: LD_INT 1
55122: ST_TO_ADDR
// end ;
55123: LD_VAR 0 6
55127: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55128: LD_INT 0
55130: PPUSH
55131: PPUSH
55132: PPUSH
55133: PPUSH
55134: PPUSH
55135: PPUSH
55136: PPUSH
55137: PPUSH
55138: PPUSH
55139: PPUSH
55140: PPUSH
55141: PPUSH
55142: PPUSH
55143: PPUSH
55144: PPUSH
55145: PPUSH
55146: PPUSH
55147: PPUSH
55148: PPUSH
55149: PPUSH
55150: PPUSH
55151: PPUSH
55152: PPUSH
55153: PPUSH
55154: PPUSH
55155: PPUSH
55156: PPUSH
55157: PPUSH
55158: PPUSH
55159: PPUSH
55160: PPUSH
55161: PPUSH
55162: PPUSH
55163: PPUSH
55164: PPUSH
55165: PPUSH
55166: PPUSH
55167: PPUSH
55168: PPUSH
55169: PPUSH
55170: PPUSH
55171: PPUSH
55172: PPUSH
55173: PPUSH
55174: PPUSH
55175: PPUSH
55176: PPUSH
55177: PPUSH
55178: PPUSH
55179: PPUSH
55180: PPUSH
55181: PPUSH
55182: PPUSH
55183: PPUSH
55184: PPUSH
55185: PPUSH
55186: PPUSH
55187: PPUSH
// result = [ ] ;
55188: LD_ADDR_VAR 0 7
55192: PUSH
55193: EMPTY
55194: ST_TO_ADDR
// temp_list = [ ] ;
55195: LD_ADDR_VAR 0 9
55199: PUSH
55200: EMPTY
55201: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55202: LD_VAR 0 4
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: LD_INT 4
55221: PUSH
55222: LD_INT 5
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: IN
55233: NOT
55234: PUSH
55235: LD_VAR 0 1
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: IN
55250: PUSH
55251: LD_VAR 0 5
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: LD_INT 3
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: IN
55270: NOT
55271: AND
55272: OR
55273: IFFALSE 55277
// exit ;
55275: GO 73668
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55277: LD_VAR 0 1
55281: PUSH
55282: LD_INT 6
55284: PUSH
55285: LD_INT 7
55287: PUSH
55288: LD_INT 8
55290: PUSH
55291: LD_INT 13
55293: PUSH
55294: LD_INT 12
55296: PUSH
55297: LD_INT 15
55299: PUSH
55300: LD_INT 11
55302: PUSH
55303: LD_INT 14
55305: PUSH
55306: LD_INT 10
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: IN
55320: IFFALSE 55330
// btype = b_lab ;
55322: LD_ADDR_VAR 0 1
55326: PUSH
55327: LD_INT 6
55329: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55330: LD_VAR 0 6
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: LIST
55348: IN
55349: NOT
55350: PUSH
55351: LD_VAR 0 1
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: LD_INT 3
55367: PUSH
55368: LD_INT 6
55370: PUSH
55371: LD_INT 36
55373: PUSH
55374: LD_INT 4
55376: PUSH
55377: LD_INT 5
55379: PUSH
55380: LD_INT 31
55382: PUSH
55383: LD_INT 32
55385: PUSH
55386: LD_INT 33
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: IN
55402: NOT
55403: PUSH
55404: LD_VAR 0 6
55408: PUSH
55409: LD_INT 1
55411: EQUAL
55412: AND
55413: OR
55414: PUSH
55415: LD_VAR 0 1
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: LD_INT 3
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: IN
55430: NOT
55431: PUSH
55432: LD_VAR 0 6
55436: PUSH
55437: LD_INT 2
55439: EQUAL
55440: AND
55441: OR
55442: IFFALSE 55452
// mode = 0 ;
55444: LD_ADDR_VAR 0 6
55448: PUSH
55449: LD_INT 0
55451: ST_TO_ADDR
// case mode of 0 :
55452: LD_VAR 0 6
55456: PUSH
55457: LD_INT 0
55459: DOUBLE
55460: EQUAL
55461: IFTRUE 55465
55463: GO 66918
55465: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55466: LD_ADDR_VAR 0 11
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: LD_INT 3
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 3
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55659: LD_ADDR_VAR 0 12
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: NEG
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 3
55827: NEG
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55855: LD_ADDR_VAR 0 13
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 2
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 3
56026: NEG
56027: PUSH
56028: LD_INT 3
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56054: LD_ADDR_VAR 0 14
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 2
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 3
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 3
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56250: LD_ADDR_VAR 0 15
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: NEG
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 2
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 3
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56443: LD_ADDR_VAR 0 16
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: LD_INT 2
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 3
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: LD_INT 3
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56636: LD_ADDR_VAR 0 17
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 2
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: NEG
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56866: LD_ADDR_VAR 0 18
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: NEG
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: LD_INT 2
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57096: LD_ADDR_VAR 0 19
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 2
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 2
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 2
57295: NEG
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57326: LD_ADDR_VAR 0 20
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 0
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 2
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: NEG
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: NEG
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 2
57525: NEG
57526: PUSH
57527: LD_INT 2
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57556: LD_ADDR_VAR 0 21
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: LD_INT 2
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: NEG
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: NEG
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57786: LD_ADDR_VAR 0 22
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: LD_INT 2
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: LD_INT 2
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 2
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 2
57962: NEG
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 2
57973: NEG
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58016: LD_ADDR_VAR 0 23
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 2
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 2
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 2
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: NEG
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: NEG
58228: PUSH
58229: LD_INT 3
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58296: LD_ADDR_VAR 0 24
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: LD_INT 2
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 2
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 2
58472: NEG
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: LD_INT 2
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: LD_INT 2
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 2
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58572: LD_ADDR_VAR 0 25
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 2
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: LD_INT 2
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 3
58793: PUSH
58794: LD_INT 2
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: LD_INT 3
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: LD_INT 3
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58846: LD_ADDR_VAR 0 26
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: LD_INT 2
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: NEG
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 2
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: LD_INT 3
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: LD_INT 2
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59122: LD_ADDR_VAR 0 27
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 2
59298: NEG
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: LD_INT 1
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 2
59321: NEG
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: LD_INT 2
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 3
59367: NEG
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59402: LD_ADDR_VAR 0 28
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: LD_INT 2
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: LD_INT 2
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: LD_INT 2
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: NEG
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: LD_INT 2
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: LD_INT 3
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: LD_INT 3
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 3
59637: NEG
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 3
59649: NEG
59650: PUSH
59651: LD_INT 2
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59684: LD_ADDR_VAR 0 29
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: LD_INT 1
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: LD_INT 2
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 2
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 2
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 2
59850: NEG
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: NEG
59875: PUSH
59876: LD_INT 3
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 3
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: LD_INT 3
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: NEG
59929: PUSH
59930: LD_INT 2
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59963: LD_ADDR_VAR 0 30
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: LD_INT 1
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: NEG
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: LD_INT 3
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 3
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 2
60185: PUSH
60186: LD_INT 3
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 3
60206: NEG
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60241: LD_ADDR_VAR 0 31
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 1
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: LD_INT 2
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 2
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 2
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: LD_INT 2
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 2
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 2
60418: NEG
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: NEG
60431: PUSH
60432: LD_INT 3
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 3
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: LD_INT 3
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 3
60484: NEG
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60519: LD_ADDR_VAR 0 32
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: LD_INT 2
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: NEG
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: LD_INT 3
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: LD_INT 2
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 3
60731: PUSH
60732: LD_INT 2
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: PUSH
60742: LD_INT 3
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 2
60751: NEG
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 3
60762: NEG
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60797: LD_ADDR_VAR 0 33
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: LD_INT 2
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 2
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: LD_INT 1
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: LD_INT 2
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 2
60952: NEG
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 2
60975: NEG
60976: PUSH
60977: LD_INT 2
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: LD_INT 3
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 2
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 3
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: LD_INT 3
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 3
61041: NEG
61042: PUSH
61043: LD_INT 2
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61076: LD_ADDR_VAR 0 34
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 2
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: LD_INT 2
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: LD_INT 3
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: LD_INT 2
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 3
61290: PUSH
61291: LD_INT 2
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 2
61310: NEG
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 3
61321: NEG
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61356: LD_ADDR_VAR 0 35
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 2
61447: NEG
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61468: LD_ADDR_VAR 0 36
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 0
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: NEG
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61580: LD_ADDR_VAR 0 37
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61692: LD_ADDR_VAR 0 38
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 1
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: NEG
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61804: LD_ADDR_VAR 0 39
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 1
61885: NEG
61886: PUSH
61887: LD_INT 2
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61916: LD_ADDR_VAR 0 40
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62028: LD_ADDR_VAR 0 41
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 2
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 2
62183: NEG
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 2
62194: NEG
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 2
62206: NEG
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: LD_INT 3
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 3
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 3
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 3
62261: PUSH
62262: LD_INT 2
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 3
62271: PUSH
62272: LD_INT 3
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 2
62281: PUSH
62282: LD_INT 3
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 3
62302: NEG
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 3
62313: NEG
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 3
62325: NEG
62326: PUSH
62327: LD_INT 2
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 3
62337: NEG
62338: PUSH
62339: LD_INT 3
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62378: LD_ADDR_VAR 0 42
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: LD_INT 1
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: LD_INT 2
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_INT 2
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: LD_INT 1
62485: NEG
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 2
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 2
62503: PUSH
62504: LD_INT 2
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: LD_INT 2
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: LD_INT 2
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 2
62544: NEG
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 2
62556: NEG
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 2
62568: NEG
62569: PUSH
62570: LD_INT 3
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 1
62580: NEG
62581: PUSH
62582: LD_INT 3
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: LD_INT 3
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: LD_INT 2
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 3
62614: PUSH
62615: LD_INT 2
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 3
62624: PUSH
62625: LD_INT 3
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 2
62634: PUSH
62635: LD_INT 3
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: LD_INT 3
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: LD_INT 3
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: NEG
62665: PUSH
62666: LD_INT 2
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 3
62675: NEG
62676: PUSH
62677: LD_INT 2
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 3
62687: NEG
62688: PUSH
62689: LD_INT 3
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62728: LD_ADDR_VAR 0 43
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: LD_INT 1
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 1
62786: NEG
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 1
62797: NEG
62798: PUSH
62799: LD_INT 1
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: LD_INT 2
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: LD_INT 2
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 2
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 2
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 1
62863: PUSH
62864: LD_INT 2
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: LD_INT 2
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: NEG
62884: PUSH
62885: LD_INT 1
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 2
62894: NEG
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 2
62905: NEG
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: NEG
62918: PUSH
62919: LD_INT 3
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: LD_INT 3
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: PUSH
62941: LD_INT 2
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: LD_INT 1
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 3
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 3
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: LD_INT 3
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: LD_INT 3
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 2
63013: NEG
63014: PUSH
63015: LD_INT 1
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 3
63024: NEG
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 3
63035: NEG
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63076: LD_ADDR_VAR 0 44
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 0
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 1
63145: NEG
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: PUSH
63159: LD_INT 2
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 2
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: LD_INT 2
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: LD_INT 2
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: NEG
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 2
63231: NEG
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 2
63242: NEG
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 2
63254: NEG
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 2
63266: NEG
63267: PUSH
63268: LD_INT 3
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 2
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 3
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 3
63299: PUSH
63300: LD_INT 1
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 3
63309: PUSH
63310: LD_INT 2
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 3
63319: PUSH
63320: LD_INT 3
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 2
63329: PUSH
63330: LD_INT 3
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 2
63339: NEG
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 3
63350: NEG
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 3
63361: NEG
63362: PUSH
63363: LD_INT 1
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 3
63373: NEG
63374: PUSH
63375: LD_INT 2
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 3
63385: NEG
63386: PUSH
63387: LD_INT 3
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63426: LD_ADDR_VAR 0 45
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: LD_INT 1
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: NEG
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 1
63495: NEG
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 1
63507: NEG
63508: PUSH
63509: LD_INT 2
63511: NEG
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: LD_INT 2
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: LD_INT 1
63533: NEG
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 2
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 2
63551: PUSH
63552: LD_INT 2
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: LD_INT 2
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: LD_INT 2
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 1
63581: NEG
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 2
63592: NEG
63593: PUSH
63594: LD_INT 1
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 2
63604: NEG
63605: PUSH
63606: LD_INT 2
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 2
63616: NEG
63617: PUSH
63618: LD_INT 3
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: LD_INT 3
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 0
63640: PUSH
63641: LD_INT 3
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 3
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 3
63672: PUSH
63673: LD_INT 3
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: LD_INT 3
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: PUSH
63693: LD_INT 3
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 0
63702: PUSH
63703: LD_INT 3
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: LD_INT 2
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 3
63723: NEG
63724: PUSH
63725: LD_INT 2
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 3
63735: NEG
63736: PUSH
63737: LD_INT 3
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63776: LD_ADDR_VAR 0 46
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 0
63793: PUSH
63794: LD_INT 1
63796: NEG
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 1
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 1
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: LD_INT 2
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 0
63869: PUSH
63870: LD_INT 2
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 1
63880: PUSH
63881: LD_INT 1
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: LD_INT 0
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 2
63901: PUSH
63902: LD_INT 1
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 1
63911: PUSH
63912: LD_INT 2
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: LD_INT 2
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 1
63931: NEG
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 2
63942: NEG
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 2
63953: NEG
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: LD_INT 3
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: LD_INT 3
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: PUSH
63989: LD_INT 2
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 3
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 3
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: LD_INT 3
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: LD_INT 3
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 1
64050: NEG
64051: PUSH
64052: LD_INT 2
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 2
64061: NEG
64062: PUSH
64063: LD_INT 1
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 3
64072: NEG
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 3
64083: NEG
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64124: LD_ADDR_VAR 0 47
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: LD_INT 1
64144: NEG
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 1
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: LD_INT 1
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 1
64193: NEG
64194: PUSH
64195: LD_INT 1
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 1
64205: NEG
64206: PUSH
64207: LD_INT 2
64209: NEG
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: LD_INT 2
64220: NEG
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 1
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 2
64239: NEG
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 2
64251: NEG
64252: PUSH
64253: LD_INT 2
64255: NEG
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64275: LD_ADDR_VAR 0 48
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: LD_INT 1
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: LD_INT 1
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: LD_INT 1
64348: NEG
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: LD_INT 2
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 0
64368: PUSH
64369: LD_INT 2
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 2
64400: PUSH
64401: LD_INT 1
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64422: LD_ADDR_VAR 0 49
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: LD_INT 1
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: LD_INT 1
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 1
64480: NEG
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: NEG
64492: PUSH
64493: LD_INT 1
64495: NEG
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 2
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 2
64534: PUSH
64535: LD_INT 2
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: LD_INT 2
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64566: LD_ADDR_VAR 0 50
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: LD_INT 1
64586: NEG
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: LD_INT 1
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: LD_INT 1
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 1
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 2
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: LD_INT 2
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: LD_INT 2
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: LD_INT 2
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64710: LD_ADDR_VAR 0 51
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: LD_INT 1
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 1
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: LD_INT 1
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 1
64768: NEG
64769: PUSH
64770: LD_INT 0
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: LD_INT 2
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: LD_INT 2
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 2
64822: NEG
64823: PUSH
64824: LD_INT 0
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 2
64833: NEG
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64857: LD_ADDR_VAR 0 52
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: LD_INT 1
64877: NEG
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 0
64905: PUSH
64906: LD_INT 1
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 1
64915: NEG
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 1
64926: NEG
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: LD_INT 2
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 1
64950: NEG
64951: PUSH
64952: LD_INT 1
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 2
64961: NEG
64962: PUSH
64963: LD_INT 0
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 2
64972: NEG
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 2
64984: NEG
64985: PUSH
64986: LD_INT 2
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65008: LD_ADDR_VAR 0 53
65012: PUSH
65013: LD_INT 0
65015: PUSH
65016: LD_INT 0
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: LD_INT 1
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 1
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: LD_INT 1
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: LD_INT 1
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: LD_INT 2
65093: NEG
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: LD_INT 2
65104: NEG
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: LD_INT 1
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 2
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 2
65133: PUSH
65134: LD_INT 1
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 2
65143: PUSH
65144: LD_INT 2
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: LD_INT 2
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: LD_INT 2
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: LD_INT 1
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 2
65184: NEG
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 2
65195: NEG
65196: PUSH
65197: LD_INT 1
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 2
65207: NEG
65208: PUSH
65209: LD_INT 2
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65238: LD_ADDR_VAR 0 54
65242: PUSH
65243: LD_INT 0
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: LD_INT 1
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 1
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 1
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 0
65286: PUSH
65287: LD_INT 1
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 1
65307: NEG
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 1
65319: NEG
65320: PUSH
65321: LD_INT 2
65323: NEG
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: LD_INT 2
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 1
65342: PUSH
65343: LD_INT 1
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 2
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 2
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 2
65373: PUSH
65374: LD_INT 2
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 1
65383: PUSH
65384: LD_INT 2
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: LD_INT 2
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 1
65403: NEG
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 2
65425: NEG
65426: PUSH
65427: LD_INT 1
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 2
65437: NEG
65438: PUSH
65439: LD_INT 2
65441: NEG
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65468: LD_ADDR_VAR 0 55
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: LD_INT 1
65488: NEG
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: LD_INT 1
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: LD_INT 0
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: NEG
65550: PUSH
65551: LD_INT 2
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: LD_INT 2
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 2
65583: PUSH
65584: LD_INT 0
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 2
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 2
65603: PUSH
65604: LD_INT 2
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: LD_INT 2
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: LD_INT 2
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: LD_INT 1
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 2
65644: NEG
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 2
65655: NEG
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 2
65667: NEG
65668: PUSH
65669: LD_INT 2
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65698: LD_ADDR_VAR 0 56
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 0
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 0
65746: PUSH
65747: LD_INT 1
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 1
65756: NEG
65757: PUSH
65758: LD_INT 0
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 1
65767: NEG
65768: PUSH
65769: LD_INT 1
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: LD_INT 2
65783: NEG
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 0
65791: PUSH
65792: LD_INT 2
65794: NEG
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 1
65802: PUSH
65803: LD_INT 1
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 2
65823: PUSH
65824: LD_INT 1
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 2
65833: PUSH
65834: LD_INT 2
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 1
65843: PUSH
65844: LD_INT 2
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 2
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: LD_INT 1
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 2
65874: NEG
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 2
65885: NEG
65886: PUSH
65887: LD_INT 1
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 2
65897: NEG
65898: PUSH
65899: LD_INT 2
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65928: LD_ADDR_VAR 0 57
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: LD_INT 1
65948: NEG
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 1
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: LD_INT 1
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: LD_INT 1
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 1
65986: NEG
65987: PUSH
65988: LD_INT 0
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 1
65997: NEG
65998: PUSH
65999: LD_INT 1
66001: NEG
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 1
66009: NEG
66010: PUSH
66011: LD_INT 2
66013: NEG
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 0
66021: PUSH
66022: LD_INT 2
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 1
66032: PUSH
66033: LD_INT 1
66035: NEG
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 2
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 2
66053: PUSH
66054: LD_INT 1
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 2
66063: PUSH
66064: LD_INT 2
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: PUSH
66074: LD_INT 2
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: LD_INT 2
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 1
66093: NEG
66094: PUSH
66095: LD_INT 1
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 2
66104: NEG
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 2
66115: NEG
66116: PUSH
66117: LD_INT 1
66119: NEG
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 2
66127: NEG
66128: PUSH
66129: LD_INT 2
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66158: LD_ADDR_VAR 0 58
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: LD_INT 1
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 1
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 1
66196: PUSH
66197: LD_INT 1
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: LD_INT 1
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 1
66216: NEG
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 1
66227: NEG
66228: PUSH
66229: LD_INT 1
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: LD_INT 2
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: LD_INT 2
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: LD_INT 1
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 2
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 2
66283: PUSH
66284: LD_INT 1
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 2
66293: PUSH
66294: LD_INT 2
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 1
66303: PUSH
66304: LD_INT 2
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: LD_INT 2
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 1
66323: NEG
66324: PUSH
66325: LD_INT 1
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 2
66334: NEG
66335: PUSH
66336: LD_INT 0
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 2
66345: NEG
66346: PUSH
66347: LD_INT 1
66349: NEG
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 2
66357: NEG
66358: PUSH
66359: LD_INT 2
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66388: LD_ADDR_VAR 0 59
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: LD_INT 0
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: LD_INT 1
66408: NEG
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: LD_INT 1
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 1
66446: NEG
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 1
66457: NEG
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66476: LD_ADDR_VAR 0 60
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: LD_INT 0
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: LD_INT 1
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 1
66504: PUSH
66505: LD_INT 0
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 1
66514: PUSH
66515: LD_INT 1
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 0
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: LD_INT 0
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: LD_INT 1
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66564: LD_ADDR_VAR 0 61
66568: PUSH
66569: LD_INT 0
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: LD_INT 1
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 1
66592: PUSH
66593: LD_INT 0
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 1
66602: PUSH
66603: LD_INT 1
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: LD_INT 1
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: LD_INT 0
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 1
66633: NEG
66634: PUSH
66635: LD_INT 1
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66652: LD_ADDR_VAR 0 62
66656: PUSH
66657: LD_INT 0
66659: PUSH
66660: LD_INT 0
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: LD_INT 1
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 1
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 1
66690: PUSH
66691: LD_INT 1
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 1
66710: NEG
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 1
66721: NEG
66722: PUSH
66723: LD_INT 1
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66740: LD_ADDR_VAR 0 63
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: LD_INT 1
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 1
66768: PUSH
66769: LD_INT 0
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: LD_INT 1
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: LD_INT 1
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 1
66798: NEG
66799: PUSH
66800: LD_INT 0
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 1
66809: NEG
66810: PUSH
66811: LD_INT 1
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66828: LD_ADDR_VAR 0 64
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: LD_INT 0
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: LD_INT 1
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 1
66856: PUSH
66857: LD_INT 0
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 1
66866: PUSH
66867: LD_INT 1
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 0
66876: PUSH
66877: LD_INT 1
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 1
66886: NEG
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 1
66897: NEG
66898: PUSH
66899: LD_INT 1
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: ST_TO_ADDR
// end ; 1 :
66916: GO 72813
66918: LD_INT 1
66920: DOUBLE
66921: EQUAL
66922: IFTRUE 66926
66924: GO 69549
66926: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66927: LD_ADDR_VAR 0 11
66931: PUSH
66932: LD_INT 1
66934: NEG
66935: PUSH
66936: LD_INT 3
66938: NEG
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 0
66946: PUSH
66947: LD_INT 3
66949: NEG
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: LD_INT 2
66960: NEG
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: LIST
66970: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66971: LD_ADDR_VAR 0 12
66975: PUSH
66976: LD_INT 2
66978: PUSH
66979: LD_INT 1
66981: NEG
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 3
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 3
66999: PUSH
67000: LD_INT 1
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: LIST
67011: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67012: LD_ADDR_VAR 0 13
67016: PUSH
67017: LD_INT 3
67019: PUSH
67020: LD_INT 2
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 3
67029: PUSH
67030: LD_INT 3
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 2
67039: PUSH
67040: LD_INT 3
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: LIST
67051: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67052: LD_ADDR_VAR 0 14
67056: PUSH
67057: LD_INT 1
67059: PUSH
67060: LD_INT 3
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 0
67069: PUSH
67070: LD_INT 3
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 1
67079: NEG
67080: PUSH
67081: LD_INT 2
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: LIST
67092: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67093: LD_ADDR_VAR 0 15
67097: PUSH
67098: LD_INT 2
67100: NEG
67101: PUSH
67102: LD_INT 1
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 3
67111: NEG
67112: PUSH
67113: LD_INT 0
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 3
67122: NEG
67123: PUSH
67124: LD_INT 1
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: LIST
67136: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67137: LD_ADDR_VAR 0 16
67141: PUSH
67142: LD_INT 2
67144: NEG
67145: PUSH
67146: LD_INT 3
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 3
67156: NEG
67157: PUSH
67158: LD_INT 2
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 3
67168: NEG
67169: PUSH
67170: LD_INT 3
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: LIST
67182: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67183: LD_ADDR_VAR 0 17
67187: PUSH
67188: LD_INT 1
67190: NEG
67191: PUSH
67192: LD_INT 3
67194: NEG
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: LD_INT 3
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: LD_INT 2
67216: NEG
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: LIST
67226: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67227: LD_ADDR_VAR 0 18
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: LD_INT 1
67237: NEG
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 3
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 3
67255: PUSH
67256: LD_INT 1
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: LIST
67267: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67268: LD_ADDR_VAR 0 19
67272: PUSH
67273: LD_INT 3
67275: PUSH
67276: LD_INT 2
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 3
67285: PUSH
67286: LD_INT 3
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 2
67295: PUSH
67296: LD_INT 3
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: LIST
67307: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67308: LD_ADDR_VAR 0 20
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: LD_INT 3
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 0
67325: PUSH
67326: LD_INT 3
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 1
67335: NEG
67336: PUSH
67337: LD_INT 2
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: LIST
67348: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67349: LD_ADDR_VAR 0 21
67353: PUSH
67354: LD_INT 2
67356: NEG
67357: PUSH
67358: LD_INT 1
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 3
67367: NEG
67368: PUSH
67369: LD_INT 0
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 3
67378: NEG
67379: PUSH
67380: LD_INT 1
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: LIST
67392: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67393: LD_ADDR_VAR 0 22
67397: PUSH
67398: LD_INT 2
67400: NEG
67401: PUSH
67402: LD_INT 3
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 3
67412: NEG
67413: PUSH
67414: LD_INT 2
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 3
67424: NEG
67425: PUSH
67426: LD_INT 3
67428: NEG
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: LIST
67438: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67439: LD_ADDR_VAR 0 23
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: LD_INT 3
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 1
67457: NEG
67458: PUSH
67459: LD_INT 4
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 1
67469: PUSH
67470: LD_INT 3
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: LIST
67482: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67483: LD_ADDR_VAR 0 24
67487: PUSH
67488: LD_INT 3
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 3
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 4
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: LIST
67523: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67524: LD_ADDR_VAR 0 25
67528: PUSH
67529: LD_INT 3
67531: PUSH
67532: LD_INT 3
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 4
67541: PUSH
67542: LD_INT 3
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 3
67551: PUSH
67552: LD_INT 4
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: LIST
67563: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67564: LD_ADDR_VAR 0 26
67568: PUSH
67569: LD_INT 0
67571: PUSH
67572: LD_INT 3
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 1
67581: PUSH
67582: LD_INT 4
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 1
67591: NEG
67592: PUSH
67593: LD_INT 3
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: LIST
67604: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67605: LD_ADDR_VAR 0 27
67609: PUSH
67610: LD_INT 3
67612: NEG
67613: PUSH
67614: LD_INT 0
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 3
67623: NEG
67624: PUSH
67625: LD_INT 1
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 4
67634: NEG
67635: PUSH
67636: LD_INT 1
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: LIST
67648: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67649: LD_ADDR_VAR 0 28
67653: PUSH
67654: LD_INT 3
67656: NEG
67657: PUSH
67658: LD_INT 3
67660: NEG
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 3
67668: NEG
67669: PUSH
67670: LD_INT 4
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 4
67680: NEG
67681: PUSH
67682: LD_INT 3
67684: NEG
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: LIST
67694: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67695: LD_ADDR_VAR 0 29
67699: PUSH
67700: LD_INT 1
67702: NEG
67703: PUSH
67704: LD_INT 3
67706: NEG
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 0
67714: PUSH
67715: LD_INT 3
67717: NEG
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 1
67725: PUSH
67726: LD_INT 2
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 4
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 4
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 1
67759: PUSH
67760: LD_INT 3
67762: NEG
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 1
67770: NEG
67771: PUSH
67772: LD_INT 5
67774: NEG
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 0
67782: PUSH
67783: LD_INT 5
67785: NEG
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 1
67793: PUSH
67794: LD_INT 4
67796: NEG
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 1
67804: NEG
67805: PUSH
67806: LD_INT 6
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 0
67816: PUSH
67817: LD_INT 6
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: LD_INT 5
67830: NEG
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67850: LD_ADDR_VAR 0 30
67854: PUSH
67855: LD_INT 2
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 3
67868: PUSH
67869: LD_INT 0
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 3
67878: PUSH
67879: LD_INT 1
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 3
67888: PUSH
67889: LD_INT 1
67891: NEG
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 4
67899: PUSH
67900: LD_INT 0
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 4
67909: PUSH
67910: LD_INT 1
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 4
67919: PUSH
67920: LD_INT 1
67922: NEG
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 5
67930: PUSH
67931: LD_INT 0
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 5
67940: PUSH
67941: LD_INT 1
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 5
67950: PUSH
67951: LD_INT 1
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 6
67961: PUSH
67962: LD_INT 0
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 6
67971: PUSH
67972: LD_INT 1
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67993: LD_ADDR_VAR 0 31
67997: PUSH
67998: LD_INT 3
68000: PUSH
68001: LD_INT 2
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 3
68010: PUSH
68011: LD_INT 3
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 2
68020: PUSH
68021: LD_INT 3
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 4
68030: PUSH
68031: LD_INT 3
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 4
68040: PUSH
68041: LD_INT 4
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 3
68050: PUSH
68051: LD_INT 4
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 5
68060: PUSH
68061: LD_INT 4
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 5
68070: PUSH
68071: LD_INT 5
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 4
68080: PUSH
68081: LD_INT 5
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 6
68090: PUSH
68091: LD_INT 5
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 6
68100: PUSH
68101: LD_INT 6
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 5
68110: PUSH
68111: LD_INT 6
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68132: LD_ADDR_VAR 0 32
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: LD_INT 3
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 0
68149: PUSH
68150: LD_INT 3
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 1
68159: NEG
68160: PUSH
68161: LD_INT 2
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 1
68170: PUSH
68171: LD_INT 4
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 0
68180: PUSH
68181: LD_INT 4
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 1
68190: NEG
68191: PUSH
68192: LD_INT 3
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 1
68201: PUSH
68202: LD_INT 5
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 0
68211: PUSH
68212: LD_INT 5
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 1
68221: NEG
68222: PUSH
68223: LD_INT 4
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 1
68232: PUSH
68233: LD_INT 6
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 0
68242: PUSH
68243: LD_INT 6
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 1
68252: NEG
68253: PUSH
68254: LD_INT 5
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68275: LD_ADDR_VAR 0 33
68279: PUSH
68280: LD_INT 2
68282: NEG
68283: PUSH
68284: LD_INT 1
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 3
68293: NEG
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 3
68304: NEG
68305: PUSH
68306: LD_INT 1
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 3
68316: NEG
68317: PUSH
68318: LD_INT 1
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 4
68327: NEG
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 4
68338: NEG
68339: PUSH
68340: LD_INT 1
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 4
68350: NEG
68351: PUSH
68352: LD_INT 1
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 5
68361: NEG
68362: PUSH
68363: LD_INT 0
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 5
68372: NEG
68373: PUSH
68374: LD_INT 1
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 5
68384: NEG
68385: PUSH
68386: LD_INT 1
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 6
68395: NEG
68396: PUSH
68397: LD_INT 0
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 6
68406: NEG
68407: PUSH
68408: LD_INT 1
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68430: LD_ADDR_VAR 0 34
68434: PUSH
68435: LD_INT 2
68437: NEG
68438: PUSH
68439: LD_INT 3
68441: NEG
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 3
68449: NEG
68450: PUSH
68451: LD_INT 2
68453: NEG
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 3
68461: NEG
68462: PUSH
68463: LD_INT 3
68465: NEG
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 3
68473: NEG
68474: PUSH
68475: LD_INT 4
68477: NEG
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 4
68485: NEG
68486: PUSH
68487: LD_INT 3
68489: NEG
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 4
68497: NEG
68498: PUSH
68499: LD_INT 4
68501: NEG
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 4
68509: NEG
68510: PUSH
68511: LD_INT 5
68513: NEG
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 5
68521: NEG
68522: PUSH
68523: LD_INT 4
68525: NEG
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 5
68533: NEG
68534: PUSH
68535: LD_INT 5
68537: NEG
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 5
68545: NEG
68546: PUSH
68547: LD_INT 6
68549: NEG
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 6
68557: NEG
68558: PUSH
68559: LD_INT 5
68561: NEG
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 6
68569: NEG
68570: PUSH
68571: LD_INT 6
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68593: LD_ADDR_VAR 0 41
68597: PUSH
68598: LD_INT 0
68600: PUSH
68601: LD_INT 2
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 1
68611: NEG
68612: PUSH
68613: LD_INT 3
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 1
68623: PUSH
68624: LD_INT 2
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: LIST
68636: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68637: LD_ADDR_VAR 0 42
68641: PUSH
68642: LD_INT 2
68644: PUSH
68645: LD_INT 0
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 2
68654: PUSH
68655: LD_INT 1
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 3
68665: PUSH
68666: LD_INT 1
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: LIST
68677: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68678: LD_ADDR_VAR 0 43
68682: PUSH
68683: LD_INT 2
68685: PUSH
68686: LD_INT 2
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 3
68695: PUSH
68696: LD_INT 2
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 2
68705: PUSH
68706: LD_INT 3
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: LIST
68717: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68718: LD_ADDR_VAR 0 44
68722: PUSH
68723: LD_INT 0
68725: PUSH
68726: LD_INT 2
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 1
68735: PUSH
68736: LD_INT 3
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 1
68745: NEG
68746: PUSH
68747: LD_INT 2
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: LIST
68758: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68759: LD_ADDR_VAR 0 45
68763: PUSH
68764: LD_INT 2
68766: NEG
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 2
68777: NEG
68778: PUSH
68779: LD_INT 1
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 3
68788: NEG
68789: PUSH
68790: LD_INT 1
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: LIST
68802: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68803: LD_ADDR_VAR 0 46
68807: PUSH
68808: LD_INT 2
68810: NEG
68811: PUSH
68812: LD_INT 2
68814: NEG
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 2
68822: NEG
68823: PUSH
68824: LD_INT 3
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 3
68834: NEG
68835: PUSH
68836: LD_INT 2
68838: NEG
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: LIST
68848: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68849: LD_ADDR_VAR 0 47
68853: PUSH
68854: LD_INT 2
68856: NEG
68857: PUSH
68858: LD_INT 3
68860: NEG
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 1
68868: NEG
68869: PUSH
68870: LD_INT 3
68872: NEG
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68882: LD_ADDR_VAR 0 48
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: LD_INT 2
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 2
68900: PUSH
68901: LD_INT 1
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68913: LD_ADDR_VAR 0 49
68917: PUSH
68918: LD_INT 3
68920: PUSH
68921: LD_INT 1
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 3
68930: PUSH
68931: LD_INT 2
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68942: LD_ADDR_VAR 0 50
68946: PUSH
68947: LD_INT 2
68949: PUSH
68950: LD_INT 3
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 1
68959: PUSH
68960: LD_INT 3
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68971: LD_ADDR_VAR 0 51
68975: PUSH
68976: LD_INT 1
68978: NEG
68979: PUSH
68980: LD_INT 2
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 2
68989: NEG
68990: PUSH
68991: LD_INT 1
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69002: LD_ADDR_VAR 0 52
69006: PUSH
69007: LD_INT 3
69009: NEG
69010: PUSH
69011: LD_INT 1
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 3
69021: NEG
69022: PUSH
69023: LD_INT 2
69025: NEG
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69035: LD_ADDR_VAR 0 53
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: LD_INT 3
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: LD_INT 3
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 1
69065: PUSH
69066: LD_INT 2
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: LIST
69078: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69079: LD_ADDR_VAR 0 54
69083: PUSH
69084: LD_INT 2
69086: PUSH
69087: LD_INT 1
69089: NEG
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 3
69097: PUSH
69098: LD_INT 0
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 3
69107: PUSH
69108: LD_INT 1
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: LIST
69119: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69120: LD_ADDR_VAR 0 55
69124: PUSH
69125: LD_INT 3
69127: PUSH
69128: LD_INT 2
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 3
69137: PUSH
69138: LD_INT 3
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 2
69147: PUSH
69148: LD_INT 3
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: LIST
69159: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69160: LD_ADDR_VAR 0 56
69164: PUSH
69165: LD_INT 1
69167: PUSH
69168: LD_INT 3
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 0
69177: PUSH
69178: LD_INT 3
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 1
69187: NEG
69188: PUSH
69189: LD_INT 2
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: LIST
69200: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69201: LD_ADDR_VAR 0 57
69205: PUSH
69206: LD_INT 2
69208: NEG
69209: PUSH
69210: LD_INT 1
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 3
69219: NEG
69220: PUSH
69221: LD_INT 0
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 3
69230: NEG
69231: PUSH
69232: LD_INT 1
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: LIST
69244: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69245: LD_ADDR_VAR 0 58
69249: PUSH
69250: LD_INT 2
69252: NEG
69253: PUSH
69254: LD_INT 3
69256: NEG
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 3
69264: NEG
69265: PUSH
69266: LD_INT 2
69268: NEG
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 3
69276: NEG
69277: PUSH
69278: LD_INT 3
69280: NEG
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: LIST
69290: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69291: LD_ADDR_VAR 0 59
69295: PUSH
69296: LD_INT 1
69298: NEG
69299: PUSH
69300: LD_INT 2
69302: NEG
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 0
69310: PUSH
69311: LD_INT 2
69313: NEG
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 1
69321: PUSH
69322: LD_INT 1
69324: NEG
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: LIST
69334: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69335: LD_ADDR_VAR 0 60
69339: PUSH
69340: LD_INT 1
69342: PUSH
69343: LD_INT 1
69345: NEG
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 2
69353: PUSH
69354: LD_INT 0
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 2
69363: PUSH
69364: LD_INT 1
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: LIST
69375: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69376: LD_ADDR_VAR 0 61
69380: PUSH
69381: LD_INT 2
69383: PUSH
69384: LD_INT 1
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: LD_INT 2
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 1
69403: PUSH
69404: LD_INT 2
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: LIST
69415: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69416: LD_ADDR_VAR 0 62
69420: PUSH
69421: LD_INT 1
69423: PUSH
69424: LD_INT 2
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 0
69433: PUSH
69434: LD_INT 2
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 1
69443: NEG
69444: PUSH
69445: LD_INT 1
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: LIST
69456: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69457: LD_ADDR_VAR 0 63
69461: PUSH
69462: LD_INT 1
69464: NEG
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 2
69475: NEG
69476: PUSH
69477: LD_INT 0
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 2
69486: NEG
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: LIST
69500: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69501: LD_ADDR_VAR 0 64
69505: PUSH
69506: LD_INT 1
69508: NEG
69509: PUSH
69510: LD_INT 2
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 2
69520: NEG
69521: PUSH
69522: LD_INT 1
69524: NEG
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 2
69532: NEG
69533: PUSH
69534: LD_INT 2
69536: NEG
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: LIST
69546: ST_TO_ADDR
// end ; 2 :
69547: GO 72813
69549: LD_INT 2
69551: DOUBLE
69552: EQUAL
69553: IFTRUE 69557
69555: GO 72812
69557: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69558: LD_ADDR_VAR 0 29
69562: PUSH
69563: LD_INT 4
69565: PUSH
69566: LD_INT 0
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 4
69575: PUSH
69576: LD_INT 1
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 5
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 5
69596: PUSH
69597: LD_INT 1
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 4
69606: PUSH
69607: LD_INT 1
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 3
69616: PUSH
69617: LD_INT 0
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 3
69626: PUSH
69627: LD_INT 1
69629: NEG
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 3
69637: PUSH
69638: LD_INT 2
69640: NEG
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 5
69648: PUSH
69649: LD_INT 2
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 3
69658: PUSH
69659: LD_INT 3
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 3
69668: PUSH
69669: LD_INT 2
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 4
69678: PUSH
69679: LD_INT 3
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 4
69688: PUSH
69689: LD_INT 4
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 3
69698: PUSH
69699: LD_INT 4
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 2
69708: PUSH
69709: LD_INT 3
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 2
69718: PUSH
69719: LD_INT 2
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 4
69728: PUSH
69729: LD_INT 2
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 2
69738: PUSH
69739: LD_INT 4
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 0
69748: PUSH
69749: LD_INT 4
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: LD_INT 3
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 1
69768: PUSH
69769: LD_INT 4
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 1
69778: PUSH
69779: LD_INT 5
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 0
69788: PUSH
69789: LD_INT 5
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 1
69798: NEG
69799: PUSH
69800: LD_INT 4
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 1
69809: NEG
69810: PUSH
69811: LD_INT 3
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 2
69820: PUSH
69821: LD_INT 5
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 2
69830: NEG
69831: PUSH
69832: LD_INT 3
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 3
69841: NEG
69842: PUSH
69843: LD_INT 0
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 3
69852: NEG
69853: PUSH
69854: LD_INT 1
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 2
69864: NEG
69865: PUSH
69866: LD_INT 0
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 2
69875: NEG
69876: PUSH
69877: LD_INT 1
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 3
69886: NEG
69887: PUSH
69888: LD_INT 1
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 4
69897: NEG
69898: PUSH
69899: LD_INT 0
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 4
69908: NEG
69909: PUSH
69910: LD_INT 1
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 4
69920: NEG
69921: PUSH
69922: LD_INT 2
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 2
69932: NEG
69933: PUSH
69934: LD_INT 2
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 4
69943: NEG
69944: PUSH
69945: LD_INT 4
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 4
69955: NEG
69956: PUSH
69957: LD_INT 5
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 3
69967: NEG
69968: PUSH
69969: LD_INT 4
69971: NEG
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 3
69979: NEG
69980: PUSH
69981: LD_INT 3
69983: NEG
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 4
69991: NEG
69992: PUSH
69993: LD_INT 3
69995: NEG
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 5
70003: NEG
70004: PUSH
70005: LD_INT 4
70007: NEG
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 5
70015: NEG
70016: PUSH
70017: LD_INT 5
70019: NEG
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 3
70027: NEG
70028: PUSH
70029: LD_INT 5
70031: NEG
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 5
70039: NEG
70040: PUSH
70041: LD_INT 3
70043: NEG
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70096: LD_ADDR_VAR 0 30
70100: PUSH
70101: LD_INT 4
70103: PUSH
70104: LD_INT 4
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 4
70113: PUSH
70114: LD_INT 3
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 5
70123: PUSH
70124: LD_INT 4
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 5
70133: PUSH
70134: LD_INT 5
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 4
70143: PUSH
70144: LD_INT 5
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 3
70153: PUSH
70154: LD_INT 4
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 3
70163: PUSH
70164: LD_INT 3
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 5
70173: PUSH
70174: LD_INT 3
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 3
70183: PUSH
70184: LD_INT 5
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 0
70193: PUSH
70194: LD_INT 3
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: LD_INT 2
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 1
70213: PUSH
70214: LD_INT 3
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 1
70223: PUSH
70224: LD_INT 4
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 0
70233: PUSH
70234: LD_INT 4
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 1
70243: NEG
70244: PUSH
70245: LD_INT 3
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: LD_INT 1
70254: NEG
70255: PUSH
70256: LD_INT 2
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 2
70265: PUSH
70266: LD_INT 4
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 2
70275: NEG
70276: PUSH
70277: LD_INT 2
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 4
70286: NEG
70287: PUSH
70288: LD_INT 0
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 4
70297: NEG
70298: PUSH
70299: LD_INT 1
70301: NEG
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 3
70309: NEG
70310: PUSH
70311: LD_INT 0
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 3
70320: NEG
70321: PUSH
70322: LD_INT 1
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 4
70331: NEG
70332: PUSH
70333: LD_INT 1
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 5
70342: NEG
70343: PUSH
70344: LD_INT 0
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 5
70353: NEG
70354: PUSH
70355: LD_INT 1
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 5
70365: NEG
70366: PUSH
70367: LD_INT 2
70369: NEG
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 3
70377: NEG
70378: PUSH
70379: LD_INT 2
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 3
70388: NEG
70389: PUSH
70390: LD_INT 3
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 3
70400: NEG
70401: PUSH
70402: LD_INT 4
70404: NEG
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 2
70412: NEG
70413: PUSH
70414: LD_INT 3
70416: NEG
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 2
70424: NEG
70425: PUSH
70426: LD_INT 2
70428: NEG
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 3
70436: NEG
70437: PUSH
70438: LD_INT 2
70440: NEG
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 4
70448: NEG
70449: PUSH
70450: LD_INT 3
70452: NEG
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 4
70460: NEG
70461: PUSH
70462: LD_INT 4
70464: NEG
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 2
70472: NEG
70473: PUSH
70474: LD_INT 4
70476: NEG
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 4
70484: NEG
70485: PUSH
70486: LD_INT 2
70488: NEG
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 0
70496: PUSH
70497: LD_INT 4
70499: NEG
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 0
70507: PUSH
70508: LD_INT 5
70510: NEG
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 1
70518: PUSH
70519: LD_INT 4
70521: NEG
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 1
70529: PUSH
70530: LD_INT 3
70532: NEG
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 0
70540: PUSH
70541: LD_INT 3
70543: NEG
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 1
70551: NEG
70552: PUSH
70553: LD_INT 4
70555: NEG
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 1
70563: NEG
70564: PUSH
70565: LD_INT 5
70567: NEG
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 2
70575: PUSH
70576: LD_INT 3
70578: NEG
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 2
70586: NEG
70587: PUSH
70588: LD_INT 5
70590: NEG
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70643: LD_ADDR_VAR 0 31
70647: PUSH
70648: LD_INT 0
70650: PUSH
70651: LD_INT 4
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: LD_INT 0
70660: PUSH
70661: LD_INT 3
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 1
70670: PUSH
70671: LD_INT 4
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 1
70680: PUSH
70681: LD_INT 5
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 0
70690: PUSH
70691: LD_INT 5
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 1
70700: NEG
70701: PUSH
70702: LD_INT 4
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 1
70711: NEG
70712: PUSH
70713: LD_INT 3
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 2
70722: PUSH
70723: LD_INT 5
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 2
70732: NEG
70733: PUSH
70734: LD_INT 3
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 3
70743: NEG
70744: PUSH
70745: LD_INT 0
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 3
70754: NEG
70755: PUSH
70756: LD_INT 1
70758: NEG
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 2
70766: NEG
70767: PUSH
70768: LD_INT 0
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 2
70777: NEG
70778: PUSH
70779: LD_INT 1
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 3
70788: NEG
70789: PUSH
70790: LD_INT 1
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 4
70799: NEG
70800: PUSH
70801: LD_INT 0
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 4
70810: NEG
70811: PUSH
70812: LD_INT 1
70814: NEG
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 4
70822: NEG
70823: PUSH
70824: LD_INT 2
70826: NEG
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 2
70834: NEG
70835: PUSH
70836: LD_INT 2
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 4
70845: NEG
70846: PUSH
70847: LD_INT 4
70849: NEG
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 4
70857: NEG
70858: PUSH
70859: LD_INT 5
70861: NEG
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 3
70869: NEG
70870: PUSH
70871: LD_INT 4
70873: NEG
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 3
70881: NEG
70882: PUSH
70883: LD_INT 3
70885: NEG
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 4
70893: NEG
70894: PUSH
70895: LD_INT 3
70897: NEG
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 5
70905: NEG
70906: PUSH
70907: LD_INT 4
70909: NEG
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 5
70917: NEG
70918: PUSH
70919: LD_INT 5
70921: NEG
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 3
70929: NEG
70930: PUSH
70931: LD_INT 5
70933: NEG
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 5
70941: NEG
70942: PUSH
70943: LD_INT 3
70945: NEG
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 0
70953: PUSH
70954: LD_INT 3
70956: NEG
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 0
70964: PUSH
70965: LD_INT 4
70967: NEG
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 1
70975: PUSH
70976: LD_INT 3
70978: NEG
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 1
70986: PUSH
70987: LD_INT 2
70989: NEG
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 0
70997: PUSH
70998: LD_INT 2
71000: NEG
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 1
71008: NEG
71009: PUSH
71010: LD_INT 3
71012: NEG
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_INT 1
71020: NEG
71021: PUSH
71022: LD_INT 4
71024: NEG
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 2
71032: PUSH
71033: LD_INT 2
71035: NEG
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 2
71043: NEG
71044: PUSH
71045: LD_INT 4
71047: NEG
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 4
71055: PUSH
71056: LD_INT 0
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 4
71065: PUSH
71066: LD_INT 1
71068: NEG
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 5
71076: PUSH
71077: LD_INT 0
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 5
71086: PUSH
71087: LD_INT 1
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 4
71096: PUSH
71097: LD_INT 1
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 3
71106: PUSH
71107: LD_INT 0
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 3
71116: PUSH
71117: LD_INT 1
71119: NEG
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 3
71127: PUSH
71128: LD_INT 2
71130: NEG
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 5
71138: PUSH
71139: LD_INT 2
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71193: LD_ADDR_VAR 0 32
71197: PUSH
71198: LD_INT 4
71200: NEG
71201: PUSH
71202: LD_INT 0
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 4
71211: NEG
71212: PUSH
71213: LD_INT 1
71215: NEG
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 3
71223: NEG
71224: PUSH
71225: LD_INT 0
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 3
71234: NEG
71235: PUSH
71236: LD_INT 1
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 4
71245: NEG
71246: PUSH
71247: LD_INT 1
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 5
71256: NEG
71257: PUSH
71258: LD_INT 0
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 5
71267: NEG
71268: PUSH
71269: LD_INT 1
71271: NEG
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 5
71279: NEG
71280: PUSH
71281: LD_INT 2
71283: NEG
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 3
71291: NEG
71292: PUSH
71293: LD_INT 2
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 3
71302: NEG
71303: PUSH
71304: LD_INT 3
71306: NEG
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 3
71314: NEG
71315: PUSH
71316: LD_INT 4
71318: NEG
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 2
71326: NEG
71327: PUSH
71328: LD_INT 3
71330: NEG
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 2
71338: NEG
71339: PUSH
71340: LD_INT 2
71342: NEG
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 3
71350: NEG
71351: PUSH
71352: LD_INT 2
71354: NEG
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 4
71362: NEG
71363: PUSH
71364: LD_INT 3
71366: NEG
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 4
71374: NEG
71375: PUSH
71376: LD_INT 4
71378: NEG
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 2
71386: NEG
71387: PUSH
71388: LD_INT 4
71390: NEG
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 4
71398: NEG
71399: PUSH
71400: LD_INT 2
71402: NEG
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 0
71410: PUSH
71411: LD_INT 4
71413: NEG
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 0
71421: PUSH
71422: LD_INT 5
71424: NEG
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 1
71432: PUSH
71433: LD_INT 4
71435: NEG
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 1
71443: PUSH
71444: LD_INT 3
71446: NEG
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 0
71454: PUSH
71455: LD_INT 3
71457: NEG
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 1
71465: NEG
71466: PUSH
71467: LD_INT 4
71469: NEG
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 1
71477: NEG
71478: PUSH
71479: LD_INT 5
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 2
71489: PUSH
71490: LD_INT 3
71492: NEG
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 2
71500: NEG
71501: PUSH
71502: LD_INT 5
71504: NEG
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 3
71512: PUSH
71513: LD_INT 0
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 3
71522: PUSH
71523: LD_INT 1
71525: NEG
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 4
71533: PUSH
71534: LD_INT 0
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 4
71543: PUSH
71544: LD_INT 1
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 3
71553: PUSH
71554: LD_INT 1
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: LD_INT 2
71563: PUSH
71564: LD_INT 0
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 2
71573: PUSH
71574: LD_INT 1
71576: NEG
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 2
71584: PUSH
71585: LD_INT 2
71587: NEG
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 4
71595: PUSH
71596: LD_INT 2
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PUSH
71603: LD_INT 4
71605: PUSH
71606: LD_INT 4
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 4
71615: PUSH
71616: LD_INT 3
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 5
71625: PUSH
71626: LD_INT 4
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 5
71635: PUSH
71636: LD_INT 5
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 4
71645: PUSH
71646: LD_INT 5
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 3
71655: PUSH
71656: LD_INT 4
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: PUSH
71663: LD_INT 3
71665: PUSH
71666: LD_INT 3
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 5
71675: PUSH
71676: LD_INT 3
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 3
71685: PUSH
71686: LD_INT 5
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71740: LD_ADDR_VAR 0 33
71744: PUSH
71745: LD_INT 4
71747: NEG
71748: PUSH
71749: LD_INT 4
71751: NEG
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 4
71759: NEG
71760: PUSH
71761: LD_INT 5
71763: NEG
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: PUSH
71769: LD_INT 3
71771: NEG
71772: PUSH
71773: LD_INT 4
71775: NEG
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 3
71783: NEG
71784: PUSH
71785: LD_INT 3
71787: NEG
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 4
71795: NEG
71796: PUSH
71797: LD_INT 3
71799: NEG
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 5
71807: NEG
71808: PUSH
71809: LD_INT 4
71811: NEG
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 5
71819: NEG
71820: PUSH
71821: LD_INT 5
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 3
71831: NEG
71832: PUSH
71833: LD_INT 5
71835: NEG
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 5
71843: NEG
71844: PUSH
71845: LD_INT 3
71847: NEG
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 0
71855: PUSH
71856: LD_INT 3
71858: NEG
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 0
71866: PUSH
71867: LD_INT 4
71869: NEG
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 1
71877: PUSH
71878: LD_INT 3
71880: NEG
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 1
71888: PUSH
71889: LD_INT 2
71891: NEG
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 0
71899: PUSH
71900: LD_INT 2
71902: NEG
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 1
71910: NEG
71911: PUSH
71912: LD_INT 3
71914: NEG
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: LD_INT 1
71922: NEG
71923: PUSH
71924: LD_INT 4
71926: NEG
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 2
71934: PUSH
71935: LD_INT 2
71937: NEG
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: LD_INT 2
71945: NEG
71946: PUSH
71947: LD_INT 4
71949: NEG
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: PUSH
71955: LD_INT 4
71957: PUSH
71958: LD_INT 0
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: LD_INT 4
71967: PUSH
71968: LD_INT 1
71970: NEG
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: PUSH
71976: LD_INT 5
71978: PUSH
71979: LD_INT 0
71981: PUSH
71982: EMPTY
71983: LIST
71984: LIST
71985: PUSH
71986: LD_INT 5
71988: PUSH
71989: LD_INT 1
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PUSH
71996: LD_INT 4
71998: PUSH
71999: LD_INT 1
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_INT 3
72008: PUSH
72009: LD_INT 0
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 3
72018: PUSH
72019: LD_INT 1
72021: NEG
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: LD_INT 3
72029: PUSH
72030: LD_INT 2
72032: NEG
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: PUSH
72038: LD_INT 5
72040: PUSH
72041: LD_INT 2
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: PUSH
72048: LD_INT 3
72050: PUSH
72051: LD_INT 3
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: PUSH
72058: LD_INT 3
72060: PUSH
72061: LD_INT 2
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: PUSH
72068: LD_INT 4
72070: PUSH
72071: LD_INT 3
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PUSH
72078: LD_INT 4
72080: PUSH
72081: LD_INT 4
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: LD_INT 3
72090: PUSH
72091: LD_INT 4
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 2
72100: PUSH
72101: LD_INT 3
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: PUSH
72108: LD_INT 2
72110: PUSH
72111: LD_INT 2
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 4
72120: PUSH
72121: LD_INT 2
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 2
72130: PUSH
72131: LD_INT 4
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 0
72140: PUSH
72141: LD_INT 4
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 0
72150: PUSH
72151: LD_INT 3
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 1
72160: PUSH
72161: LD_INT 4
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 1
72170: PUSH
72171: LD_INT 5
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 0
72180: PUSH
72181: LD_INT 5
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: LD_INT 1
72190: NEG
72191: PUSH
72192: LD_INT 4
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: PUSH
72199: LD_INT 1
72201: NEG
72202: PUSH
72203: LD_INT 3
72205: PUSH
72206: EMPTY
72207: LIST
72208: LIST
72209: PUSH
72210: LD_INT 2
72212: PUSH
72213: LD_INT 5
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: PUSH
72220: LD_INT 2
72222: NEG
72223: PUSH
72224: LD_INT 3
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72278: LD_ADDR_VAR 0 34
72282: PUSH
72283: LD_INT 0
72285: PUSH
72286: LD_INT 4
72288: NEG
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 0
72296: PUSH
72297: LD_INT 5
72299: NEG
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 1
72307: PUSH
72308: LD_INT 4
72310: NEG
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: PUSH
72316: LD_INT 1
72318: PUSH
72319: LD_INT 3
72321: NEG
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 0
72329: PUSH
72330: LD_INT 3
72332: NEG
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 1
72340: NEG
72341: PUSH
72342: LD_INT 4
72344: NEG
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 1
72352: NEG
72353: PUSH
72354: LD_INT 5
72356: NEG
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 2
72364: PUSH
72365: LD_INT 3
72367: NEG
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 2
72375: NEG
72376: PUSH
72377: LD_INT 5
72379: NEG
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 3
72387: PUSH
72388: LD_INT 0
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 3
72397: PUSH
72398: LD_INT 1
72400: NEG
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 4
72408: PUSH
72409: LD_INT 0
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: LD_INT 4
72418: PUSH
72419: LD_INT 1
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: PUSH
72426: LD_INT 3
72428: PUSH
72429: LD_INT 1
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PUSH
72436: LD_INT 2
72438: PUSH
72439: LD_INT 0
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: LD_INT 2
72448: PUSH
72449: LD_INT 1
72451: NEG
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 2
72459: PUSH
72460: LD_INT 2
72462: NEG
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: LD_INT 4
72470: PUSH
72471: LD_INT 2
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 4
72480: PUSH
72481: LD_INT 4
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 4
72490: PUSH
72491: LD_INT 3
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 5
72500: PUSH
72501: LD_INT 4
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 5
72510: PUSH
72511: LD_INT 5
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 4
72520: PUSH
72521: LD_INT 5
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 3
72530: PUSH
72531: LD_INT 4
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 3
72540: PUSH
72541: LD_INT 3
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 5
72550: PUSH
72551: LD_INT 3
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 3
72560: PUSH
72561: LD_INT 5
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 0
72570: PUSH
72571: LD_INT 3
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PUSH
72578: LD_INT 0
72580: PUSH
72581: LD_INT 2
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 1
72590: PUSH
72591: LD_INT 3
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 1
72600: PUSH
72601: LD_INT 4
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 0
72610: PUSH
72611: LD_INT 4
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 1
72620: NEG
72621: PUSH
72622: LD_INT 3
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: LD_INT 1
72631: NEG
72632: PUSH
72633: LD_INT 2
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 2
72642: PUSH
72643: LD_INT 4
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 2
72652: NEG
72653: PUSH
72654: LD_INT 2
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 4
72663: NEG
72664: PUSH
72665: LD_INT 0
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 4
72674: NEG
72675: PUSH
72676: LD_INT 1
72678: NEG
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 3
72686: NEG
72687: PUSH
72688: LD_INT 0
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 3
72697: NEG
72698: PUSH
72699: LD_INT 1
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 4
72708: NEG
72709: PUSH
72710: LD_INT 1
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 5
72719: NEG
72720: PUSH
72721: LD_INT 0
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 5
72730: NEG
72731: PUSH
72732: LD_INT 1
72734: NEG
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PUSH
72740: LD_INT 5
72742: NEG
72743: PUSH
72744: LD_INT 2
72746: NEG
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: LD_INT 3
72754: NEG
72755: PUSH
72756: LD_INT 2
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: ST_TO_ADDR
// end ; end ;
72810: GO 72813
72812: POP
// case btype of b_depot , b_warehouse :
72813: LD_VAR 0 1
72817: PUSH
72818: LD_INT 0
72820: DOUBLE
72821: EQUAL
72822: IFTRUE 72832
72824: LD_INT 1
72826: DOUBLE
72827: EQUAL
72828: IFTRUE 72832
72830: GO 73033
72832: POP
// case nation of nation_american :
72833: LD_VAR 0 5
72837: PUSH
72838: LD_INT 1
72840: DOUBLE
72841: EQUAL
72842: IFTRUE 72846
72844: GO 72902
72846: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72847: LD_ADDR_VAR 0 9
72851: PUSH
72852: LD_VAR 0 11
72856: PUSH
72857: LD_VAR 0 12
72861: PUSH
72862: LD_VAR 0 13
72866: PUSH
72867: LD_VAR 0 14
72871: PUSH
72872: LD_VAR 0 15
72876: PUSH
72877: LD_VAR 0 16
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: PUSH
72890: LD_VAR 0 4
72894: PUSH
72895: LD_INT 1
72897: PLUS
72898: ARRAY
72899: ST_TO_ADDR
72900: GO 73031
72902: LD_INT 2
72904: DOUBLE
72905: EQUAL
72906: IFTRUE 72910
72908: GO 72966
72910: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72911: LD_ADDR_VAR 0 9
72915: PUSH
72916: LD_VAR 0 17
72920: PUSH
72921: LD_VAR 0 18
72925: PUSH
72926: LD_VAR 0 19
72930: PUSH
72931: LD_VAR 0 20
72935: PUSH
72936: LD_VAR 0 21
72940: PUSH
72941: LD_VAR 0 22
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: PUSH
72954: LD_VAR 0 4
72958: PUSH
72959: LD_INT 1
72961: PLUS
72962: ARRAY
72963: ST_TO_ADDR
72964: GO 73031
72966: LD_INT 3
72968: DOUBLE
72969: EQUAL
72970: IFTRUE 72974
72972: GO 73030
72974: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72975: LD_ADDR_VAR 0 9
72979: PUSH
72980: LD_VAR 0 23
72984: PUSH
72985: LD_VAR 0 24
72989: PUSH
72990: LD_VAR 0 25
72994: PUSH
72995: LD_VAR 0 26
72999: PUSH
73000: LD_VAR 0 27
73004: PUSH
73005: LD_VAR 0 28
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: PUSH
73018: LD_VAR 0 4
73022: PUSH
73023: LD_INT 1
73025: PLUS
73026: ARRAY
73027: ST_TO_ADDR
73028: GO 73031
73030: POP
73031: GO 73586
73033: LD_INT 2
73035: DOUBLE
73036: EQUAL
73037: IFTRUE 73047
73039: LD_INT 3
73041: DOUBLE
73042: EQUAL
73043: IFTRUE 73047
73045: GO 73103
73047: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73048: LD_ADDR_VAR 0 9
73052: PUSH
73053: LD_VAR 0 29
73057: PUSH
73058: LD_VAR 0 30
73062: PUSH
73063: LD_VAR 0 31
73067: PUSH
73068: LD_VAR 0 32
73072: PUSH
73073: LD_VAR 0 33
73077: PUSH
73078: LD_VAR 0 34
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: PUSH
73091: LD_VAR 0 4
73095: PUSH
73096: LD_INT 1
73098: PLUS
73099: ARRAY
73100: ST_TO_ADDR
73101: GO 73586
73103: LD_INT 16
73105: DOUBLE
73106: EQUAL
73107: IFTRUE 73165
73109: LD_INT 17
73111: DOUBLE
73112: EQUAL
73113: IFTRUE 73165
73115: LD_INT 18
73117: DOUBLE
73118: EQUAL
73119: IFTRUE 73165
73121: LD_INT 19
73123: DOUBLE
73124: EQUAL
73125: IFTRUE 73165
73127: LD_INT 22
73129: DOUBLE
73130: EQUAL
73131: IFTRUE 73165
73133: LD_INT 20
73135: DOUBLE
73136: EQUAL
73137: IFTRUE 73165
73139: LD_INT 21
73141: DOUBLE
73142: EQUAL
73143: IFTRUE 73165
73145: LD_INT 23
73147: DOUBLE
73148: EQUAL
73149: IFTRUE 73165
73151: LD_INT 24
73153: DOUBLE
73154: EQUAL
73155: IFTRUE 73165
73157: LD_INT 25
73159: DOUBLE
73160: EQUAL
73161: IFTRUE 73165
73163: GO 73221
73165: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73166: LD_ADDR_VAR 0 9
73170: PUSH
73171: LD_VAR 0 35
73175: PUSH
73176: LD_VAR 0 36
73180: PUSH
73181: LD_VAR 0 37
73185: PUSH
73186: LD_VAR 0 38
73190: PUSH
73191: LD_VAR 0 39
73195: PUSH
73196: LD_VAR 0 40
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: PUSH
73209: LD_VAR 0 4
73213: PUSH
73214: LD_INT 1
73216: PLUS
73217: ARRAY
73218: ST_TO_ADDR
73219: GO 73586
73221: LD_INT 6
73223: DOUBLE
73224: EQUAL
73225: IFTRUE 73277
73227: LD_INT 7
73229: DOUBLE
73230: EQUAL
73231: IFTRUE 73277
73233: LD_INT 8
73235: DOUBLE
73236: EQUAL
73237: IFTRUE 73277
73239: LD_INT 13
73241: DOUBLE
73242: EQUAL
73243: IFTRUE 73277
73245: LD_INT 12
73247: DOUBLE
73248: EQUAL
73249: IFTRUE 73277
73251: LD_INT 15
73253: DOUBLE
73254: EQUAL
73255: IFTRUE 73277
73257: LD_INT 11
73259: DOUBLE
73260: EQUAL
73261: IFTRUE 73277
73263: LD_INT 14
73265: DOUBLE
73266: EQUAL
73267: IFTRUE 73277
73269: LD_INT 10
73271: DOUBLE
73272: EQUAL
73273: IFTRUE 73277
73275: GO 73333
73277: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73278: LD_ADDR_VAR 0 9
73282: PUSH
73283: LD_VAR 0 41
73287: PUSH
73288: LD_VAR 0 42
73292: PUSH
73293: LD_VAR 0 43
73297: PUSH
73298: LD_VAR 0 44
73302: PUSH
73303: LD_VAR 0 45
73307: PUSH
73308: LD_VAR 0 46
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: PUSH
73321: LD_VAR 0 4
73325: PUSH
73326: LD_INT 1
73328: PLUS
73329: ARRAY
73330: ST_TO_ADDR
73331: GO 73586
73333: LD_INT 36
73335: DOUBLE
73336: EQUAL
73337: IFTRUE 73341
73339: GO 73397
73341: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73342: LD_ADDR_VAR 0 9
73346: PUSH
73347: LD_VAR 0 47
73351: PUSH
73352: LD_VAR 0 48
73356: PUSH
73357: LD_VAR 0 49
73361: PUSH
73362: LD_VAR 0 50
73366: PUSH
73367: LD_VAR 0 51
73371: PUSH
73372: LD_VAR 0 52
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: LIST
73381: LIST
73382: LIST
73383: LIST
73384: PUSH
73385: LD_VAR 0 4
73389: PUSH
73390: LD_INT 1
73392: PLUS
73393: ARRAY
73394: ST_TO_ADDR
73395: GO 73586
73397: LD_INT 4
73399: DOUBLE
73400: EQUAL
73401: IFTRUE 73423
73403: LD_INT 5
73405: DOUBLE
73406: EQUAL
73407: IFTRUE 73423
73409: LD_INT 34
73411: DOUBLE
73412: EQUAL
73413: IFTRUE 73423
73415: LD_INT 37
73417: DOUBLE
73418: EQUAL
73419: IFTRUE 73423
73421: GO 73479
73423: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73424: LD_ADDR_VAR 0 9
73428: PUSH
73429: LD_VAR 0 53
73433: PUSH
73434: LD_VAR 0 54
73438: PUSH
73439: LD_VAR 0 55
73443: PUSH
73444: LD_VAR 0 56
73448: PUSH
73449: LD_VAR 0 57
73453: PUSH
73454: LD_VAR 0 58
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: PUSH
73467: LD_VAR 0 4
73471: PUSH
73472: LD_INT 1
73474: PLUS
73475: ARRAY
73476: ST_TO_ADDR
73477: GO 73586
73479: LD_INT 31
73481: DOUBLE
73482: EQUAL
73483: IFTRUE 73529
73485: LD_INT 32
73487: DOUBLE
73488: EQUAL
73489: IFTRUE 73529
73491: LD_INT 33
73493: DOUBLE
73494: EQUAL
73495: IFTRUE 73529
73497: LD_INT 27
73499: DOUBLE
73500: EQUAL
73501: IFTRUE 73529
73503: LD_INT 26
73505: DOUBLE
73506: EQUAL
73507: IFTRUE 73529
73509: LD_INT 28
73511: DOUBLE
73512: EQUAL
73513: IFTRUE 73529
73515: LD_INT 29
73517: DOUBLE
73518: EQUAL
73519: IFTRUE 73529
73521: LD_INT 30
73523: DOUBLE
73524: EQUAL
73525: IFTRUE 73529
73527: GO 73585
73529: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73530: LD_ADDR_VAR 0 9
73534: PUSH
73535: LD_VAR 0 59
73539: PUSH
73540: LD_VAR 0 60
73544: PUSH
73545: LD_VAR 0 61
73549: PUSH
73550: LD_VAR 0 62
73554: PUSH
73555: LD_VAR 0 63
73559: PUSH
73560: LD_VAR 0 64
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: PUSH
73573: LD_VAR 0 4
73577: PUSH
73578: LD_INT 1
73580: PLUS
73581: ARRAY
73582: ST_TO_ADDR
73583: GO 73586
73585: POP
// temp_list2 = [ ] ;
73586: LD_ADDR_VAR 0 10
73590: PUSH
73591: EMPTY
73592: ST_TO_ADDR
// for i in temp_list do
73593: LD_ADDR_VAR 0 8
73597: PUSH
73598: LD_VAR 0 9
73602: PUSH
73603: FOR_IN
73604: IFFALSE 73656
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73606: LD_ADDR_VAR 0 10
73610: PUSH
73611: LD_VAR 0 10
73615: PUSH
73616: LD_VAR 0 8
73620: PUSH
73621: LD_INT 1
73623: ARRAY
73624: PUSH
73625: LD_VAR 0 2
73629: PLUS
73630: PUSH
73631: LD_VAR 0 8
73635: PUSH
73636: LD_INT 2
73638: ARRAY
73639: PUSH
73640: LD_VAR 0 3
73644: PLUS
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: EMPTY
73651: LIST
73652: ADD
73653: ST_TO_ADDR
73654: GO 73603
73656: POP
73657: POP
// result = temp_list2 ;
73658: LD_ADDR_VAR 0 7
73662: PUSH
73663: LD_VAR 0 10
73667: ST_TO_ADDR
// end ;
73668: LD_VAR 0 7
73672: RET
// export function EnemyInRange ( unit , dist ) ; begin
73673: LD_INT 0
73675: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73676: LD_ADDR_VAR 0 3
73680: PUSH
73681: LD_VAR 0 1
73685: PPUSH
73686: CALL_OW 255
73690: PPUSH
73691: LD_VAR 0 1
73695: PPUSH
73696: CALL_OW 250
73700: PPUSH
73701: LD_VAR 0 1
73705: PPUSH
73706: CALL_OW 251
73710: PPUSH
73711: LD_VAR 0 2
73715: PPUSH
73716: CALL 47046 0 4
73720: PUSH
73721: LD_INT 4
73723: ARRAY
73724: ST_TO_ADDR
// end ;
73725: LD_VAR 0 3
73729: RET
// export function PlayerSeeMe ( unit ) ; begin
73730: LD_INT 0
73732: PPUSH
// result := See ( your_side , unit ) ;
73733: LD_ADDR_VAR 0 2
73737: PUSH
73738: LD_OWVAR 2
73742: PPUSH
73743: LD_VAR 0 1
73747: PPUSH
73748: CALL_OW 292
73752: ST_TO_ADDR
// end ;
73753: LD_VAR 0 2
73757: RET
// export function ReverseDir ( unit ) ; begin
73758: LD_INT 0
73760: PPUSH
// if not unit then
73761: LD_VAR 0 1
73765: NOT
73766: IFFALSE 73770
// exit ;
73768: GO 73793
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73770: LD_ADDR_VAR 0 2
73774: PUSH
73775: LD_VAR 0 1
73779: PPUSH
73780: CALL_OW 254
73784: PUSH
73785: LD_INT 3
73787: PLUS
73788: PUSH
73789: LD_INT 6
73791: MOD
73792: ST_TO_ADDR
// end ;
73793: LD_VAR 0 2
73797: RET
// export function ReverseArray ( array ) ; var i ; begin
73798: LD_INT 0
73800: PPUSH
73801: PPUSH
// if not array then
73802: LD_VAR 0 1
73806: NOT
73807: IFFALSE 73811
// exit ;
73809: GO 73866
// result := [ ] ;
73811: LD_ADDR_VAR 0 2
73815: PUSH
73816: EMPTY
73817: ST_TO_ADDR
// for i := array downto 1 do
73818: LD_ADDR_VAR 0 3
73822: PUSH
73823: DOUBLE
73824: LD_VAR 0 1
73828: INC
73829: ST_TO_ADDR
73830: LD_INT 1
73832: PUSH
73833: FOR_DOWNTO
73834: IFFALSE 73864
// result := Join ( result , array [ i ] ) ;
73836: LD_ADDR_VAR 0 2
73840: PUSH
73841: LD_VAR 0 2
73845: PPUSH
73846: LD_VAR 0 1
73850: PUSH
73851: LD_VAR 0 3
73855: ARRAY
73856: PPUSH
73857: CALL 78511 0 2
73861: ST_TO_ADDR
73862: GO 73833
73864: POP
73865: POP
// end ;
73866: LD_VAR 0 2
73870: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73871: LD_INT 0
73873: PPUSH
73874: PPUSH
73875: PPUSH
73876: PPUSH
73877: PPUSH
73878: PPUSH
// if not unit or not hexes then
73879: LD_VAR 0 1
73883: NOT
73884: PUSH
73885: LD_VAR 0 2
73889: NOT
73890: OR
73891: IFFALSE 73895
// exit ;
73893: GO 74018
// dist := 9999 ;
73895: LD_ADDR_VAR 0 5
73899: PUSH
73900: LD_INT 9999
73902: ST_TO_ADDR
// for i = 1 to hexes do
73903: LD_ADDR_VAR 0 4
73907: PUSH
73908: DOUBLE
73909: LD_INT 1
73911: DEC
73912: ST_TO_ADDR
73913: LD_VAR 0 2
73917: PUSH
73918: FOR_TO
73919: IFFALSE 74006
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73921: LD_ADDR_VAR 0 6
73925: PUSH
73926: LD_VAR 0 1
73930: PPUSH
73931: LD_VAR 0 2
73935: PUSH
73936: LD_VAR 0 4
73940: ARRAY
73941: PUSH
73942: LD_INT 1
73944: ARRAY
73945: PPUSH
73946: LD_VAR 0 2
73950: PUSH
73951: LD_VAR 0 4
73955: ARRAY
73956: PUSH
73957: LD_INT 2
73959: ARRAY
73960: PPUSH
73961: CALL_OW 297
73965: ST_TO_ADDR
// if tdist < dist then
73966: LD_VAR 0 6
73970: PUSH
73971: LD_VAR 0 5
73975: LESS
73976: IFFALSE 74004
// begin hex := hexes [ i ] ;
73978: LD_ADDR_VAR 0 8
73982: PUSH
73983: LD_VAR 0 2
73987: PUSH
73988: LD_VAR 0 4
73992: ARRAY
73993: ST_TO_ADDR
// dist := tdist ;
73994: LD_ADDR_VAR 0 5
73998: PUSH
73999: LD_VAR 0 6
74003: ST_TO_ADDR
// end ; end ;
74004: GO 73918
74006: POP
74007: POP
// result := hex ;
74008: LD_ADDR_VAR 0 3
74012: PUSH
74013: LD_VAR 0 8
74017: ST_TO_ADDR
// end ;
74018: LD_VAR 0 3
74022: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74023: LD_INT 0
74025: PPUSH
74026: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74027: LD_VAR 0 1
74031: NOT
74032: PUSH
74033: LD_VAR 0 1
74037: PUSH
74038: LD_INT 21
74040: PUSH
74041: LD_INT 2
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: LD_INT 23
74050: PUSH
74051: LD_INT 2
74053: PUSH
74054: EMPTY
74055: LIST
74056: LIST
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PPUSH
74062: CALL_OW 69
74066: IN
74067: NOT
74068: OR
74069: IFFALSE 74073
// exit ;
74071: GO 74120
// for i = 1 to 3 do
74073: LD_ADDR_VAR 0 3
74077: PUSH
74078: DOUBLE
74079: LD_INT 1
74081: DEC
74082: ST_TO_ADDR
74083: LD_INT 3
74085: PUSH
74086: FOR_TO
74087: IFFALSE 74118
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74089: LD_VAR 0 1
74093: PPUSH
74094: CALL_OW 250
74098: PPUSH
74099: LD_VAR 0 1
74103: PPUSH
74104: CALL_OW 251
74108: PPUSH
74109: LD_INT 1
74111: PPUSH
74112: CALL_OW 453
74116: GO 74086
74118: POP
74119: POP
// end ;
74120: LD_VAR 0 2
74124: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74125: LD_INT 0
74127: PPUSH
74128: PPUSH
74129: PPUSH
74130: PPUSH
74131: PPUSH
74132: PPUSH
// if not unit or not enemy_unit then
74133: LD_VAR 0 1
74137: NOT
74138: PUSH
74139: LD_VAR 0 2
74143: NOT
74144: OR
74145: IFFALSE 74149
// exit ;
74147: GO 74616
// if GetLives ( i ) < 250 then
74149: LD_VAR 0 4
74153: PPUSH
74154: CALL_OW 256
74158: PUSH
74159: LD_INT 250
74161: LESS
74162: IFFALSE 74175
// begin ComAutodestruct ( i ) ;
74164: LD_VAR 0 4
74168: PPUSH
74169: CALL 74023 0 1
// exit ;
74173: GO 74616
// end ; x := GetX ( enemy_unit ) ;
74175: LD_ADDR_VAR 0 7
74179: PUSH
74180: LD_VAR 0 2
74184: PPUSH
74185: CALL_OW 250
74189: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74190: LD_ADDR_VAR 0 8
74194: PUSH
74195: LD_VAR 0 2
74199: PPUSH
74200: CALL_OW 251
74204: ST_TO_ADDR
// if not x or not y then
74205: LD_VAR 0 7
74209: NOT
74210: PUSH
74211: LD_VAR 0 8
74215: NOT
74216: OR
74217: IFFALSE 74221
// exit ;
74219: GO 74616
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74221: LD_ADDR_VAR 0 6
74225: PUSH
74226: LD_VAR 0 7
74230: PPUSH
74231: LD_INT 0
74233: PPUSH
74234: LD_INT 4
74236: PPUSH
74237: CALL_OW 272
74241: PUSH
74242: LD_VAR 0 8
74246: PPUSH
74247: LD_INT 0
74249: PPUSH
74250: LD_INT 4
74252: PPUSH
74253: CALL_OW 273
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: LD_VAR 0 7
74266: PPUSH
74267: LD_INT 1
74269: PPUSH
74270: LD_INT 4
74272: PPUSH
74273: CALL_OW 272
74277: PUSH
74278: LD_VAR 0 8
74282: PPUSH
74283: LD_INT 1
74285: PPUSH
74286: LD_INT 4
74288: PPUSH
74289: CALL_OW 273
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: PUSH
74298: LD_VAR 0 7
74302: PPUSH
74303: LD_INT 2
74305: PPUSH
74306: LD_INT 4
74308: PPUSH
74309: CALL_OW 272
74313: PUSH
74314: LD_VAR 0 8
74318: PPUSH
74319: LD_INT 2
74321: PPUSH
74322: LD_INT 4
74324: PPUSH
74325: CALL_OW 273
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: PUSH
74334: LD_VAR 0 7
74338: PPUSH
74339: LD_INT 3
74341: PPUSH
74342: LD_INT 4
74344: PPUSH
74345: CALL_OW 272
74349: PUSH
74350: LD_VAR 0 8
74354: PPUSH
74355: LD_INT 3
74357: PPUSH
74358: LD_INT 4
74360: PPUSH
74361: CALL_OW 273
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: LD_VAR 0 7
74374: PPUSH
74375: LD_INT 4
74377: PPUSH
74378: LD_INT 4
74380: PPUSH
74381: CALL_OW 272
74385: PUSH
74386: LD_VAR 0 8
74390: PPUSH
74391: LD_INT 4
74393: PPUSH
74394: LD_INT 4
74396: PPUSH
74397: CALL_OW 273
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: PUSH
74406: LD_VAR 0 7
74410: PPUSH
74411: LD_INT 5
74413: PPUSH
74414: LD_INT 4
74416: PPUSH
74417: CALL_OW 272
74421: PUSH
74422: LD_VAR 0 8
74426: PPUSH
74427: LD_INT 5
74429: PPUSH
74430: LD_INT 4
74432: PPUSH
74433: CALL_OW 273
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: ST_TO_ADDR
// for i = tmp downto 1 do
74450: LD_ADDR_VAR 0 4
74454: PUSH
74455: DOUBLE
74456: LD_VAR 0 6
74460: INC
74461: ST_TO_ADDR
74462: LD_INT 1
74464: PUSH
74465: FOR_DOWNTO
74466: IFFALSE 74567
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74468: LD_VAR 0 6
74472: PUSH
74473: LD_VAR 0 4
74477: ARRAY
74478: PUSH
74479: LD_INT 1
74481: ARRAY
74482: PPUSH
74483: LD_VAR 0 6
74487: PUSH
74488: LD_VAR 0 4
74492: ARRAY
74493: PUSH
74494: LD_INT 2
74496: ARRAY
74497: PPUSH
74498: CALL_OW 488
74502: NOT
74503: PUSH
74504: LD_VAR 0 6
74508: PUSH
74509: LD_VAR 0 4
74513: ARRAY
74514: PUSH
74515: LD_INT 1
74517: ARRAY
74518: PPUSH
74519: LD_VAR 0 6
74523: PUSH
74524: LD_VAR 0 4
74528: ARRAY
74529: PUSH
74530: LD_INT 2
74532: ARRAY
74533: PPUSH
74534: CALL_OW 428
74538: PUSH
74539: LD_INT 0
74541: NONEQUAL
74542: OR
74543: IFFALSE 74565
// tmp := Delete ( tmp , i ) ;
74545: LD_ADDR_VAR 0 6
74549: PUSH
74550: LD_VAR 0 6
74554: PPUSH
74555: LD_VAR 0 4
74559: PPUSH
74560: CALL_OW 3
74564: ST_TO_ADDR
74565: GO 74465
74567: POP
74568: POP
// j := GetClosestHex ( unit , tmp ) ;
74569: LD_ADDR_VAR 0 5
74573: PUSH
74574: LD_VAR 0 1
74578: PPUSH
74579: LD_VAR 0 6
74583: PPUSH
74584: CALL 73871 0 2
74588: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74589: LD_VAR 0 1
74593: PPUSH
74594: LD_VAR 0 5
74598: PUSH
74599: LD_INT 1
74601: ARRAY
74602: PPUSH
74603: LD_VAR 0 5
74607: PUSH
74608: LD_INT 2
74610: ARRAY
74611: PPUSH
74612: CALL_OW 111
// end ;
74616: LD_VAR 0 3
74620: RET
// export function PrepareApemanSoldier ( ) ; begin
74621: LD_INT 0
74623: PPUSH
// uc_nation := 0 ;
74624: LD_ADDR_OWVAR 21
74628: PUSH
74629: LD_INT 0
74631: ST_TO_ADDR
// hc_sex := sex_male ;
74632: LD_ADDR_OWVAR 27
74636: PUSH
74637: LD_INT 1
74639: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74640: LD_ADDR_OWVAR 28
74644: PUSH
74645: LD_INT 15
74647: ST_TO_ADDR
// hc_gallery :=  ;
74648: LD_ADDR_OWVAR 33
74652: PUSH
74653: LD_STRING 
74655: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74656: LD_ADDR_OWVAR 31
74660: PUSH
74661: LD_INT 0
74663: PPUSH
74664: LD_INT 3
74666: PPUSH
74667: CALL_OW 12
74671: PUSH
74672: LD_INT 0
74674: PPUSH
74675: LD_INT 3
74677: PPUSH
74678: CALL_OW 12
74682: PUSH
74683: LD_INT 0
74685: PUSH
74686: LD_INT 0
74688: PUSH
74689: EMPTY
74690: LIST
74691: LIST
74692: LIST
74693: LIST
74694: ST_TO_ADDR
// end ;
74695: LD_VAR 0 1
74699: RET
// export function PrepareApemanEngineer ( ) ; begin
74700: LD_INT 0
74702: PPUSH
// uc_nation := 0 ;
74703: LD_ADDR_OWVAR 21
74707: PUSH
74708: LD_INT 0
74710: ST_TO_ADDR
// hc_sex := sex_male ;
74711: LD_ADDR_OWVAR 27
74715: PUSH
74716: LD_INT 1
74718: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74719: LD_ADDR_OWVAR 28
74723: PUSH
74724: LD_INT 16
74726: ST_TO_ADDR
// hc_gallery :=  ;
74727: LD_ADDR_OWVAR 33
74731: PUSH
74732: LD_STRING 
74734: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74735: LD_ADDR_OWVAR 31
74739: PUSH
74740: LD_INT 0
74742: PPUSH
74743: LD_INT 3
74745: PPUSH
74746: CALL_OW 12
74750: PUSH
74751: LD_INT 0
74753: PPUSH
74754: LD_INT 3
74756: PPUSH
74757: CALL_OW 12
74761: PUSH
74762: LD_INT 0
74764: PUSH
74765: LD_INT 0
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: ST_TO_ADDR
// end ;
74774: LD_VAR 0 1
74778: RET
// export function PrepareApeman ( agressivity ) ; begin
74779: LD_INT 0
74781: PPUSH
// uc_side := 0 ;
74782: LD_ADDR_OWVAR 20
74786: PUSH
74787: LD_INT 0
74789: ST_TO_ADDR
// uc_nation := 0 ;
74790: LD_ADDR_OWVAR 21
74794: PUSH
74795: LD_INT 0
74797: ST_TO_ADDR
// hc_sex := sex_male ;
74798: LD_ADDR_OWVAR 27
74802: PUSH
74803: LD_INT 1
74805: ST_TO_ADDR
// hc_class := class_apeman ;
74806: LD_ADDR_OWVAR 28
74810: PUSH
74811: LD_INT 12
74813: ST_TO_ADDR
// hc_gallery :=  ;
74814: LD_ADDR_OWVAR 33
74818: PUSH
74819: LD_STRING 
74821: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74822: LD_ADDR_OWVAR 35
74826: PUSH
74827: LD_VAR 0 1
74831: NEG
74832: PPUSH
74833: LD_VAR 0 1
74837: PPUSH
74838: CALL_OW 12
74842: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74843: LD_ADDR_OWVAR 31
74847: PUSH
74848: LD_INT 0
74850: PPUSH
74851: LD_INT 3
74853: PPUSH
74854: CALL_OW 12
74858: PUSH
74859: LD_INT 0
74861: PPUSH
74862: LD_INT 3
74864: PPUSH
74865: CALL_OW 12
74869: PUSH
74870: LD_INT 0
74872: PUSH
74873: LD_INT 0
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: LIST
74880: LIST
74881: ST_TO_ADDR
// end ;
74882: LD_VAR 0 2
74886: RET
// export function PrepareTiger ( agressivity ) ; begin
74887: LD_INT 0
74889: PPUSH
// uc_side := 0 ;
74890: LD_ADDR_OWVAR 20
74894: PUSH
74895: LD_INT 0
74897: ST_TO_ADDR
// uc_nation := 0 ;
74898: LD_ADDR_OWVAR 21
74902: PUSH
74903: LD_INT 0
74905: ST_TO_ADDR
// hc_class := class_tiger ;
74906: LD_ADDR_OWVAR 28
74910: PUSH
74911: LD_INT 14
74913: ST_TO_ADDR
// hc_gallery :=  ;
74914: LD_ADDR_OWVAR 33
74918: PUSH
74919: LD_STRING 
74921: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74922: LD_ADDR_OWVAR 35
74926: PUSH
74927: LD_VAR 0 1
74931: NEG
74932: PPUSH
74933: LD_VAR 0 1
74937: PPUSH
74938: CALL_OW 12
74942: ST_TO_ADDR
// end ;
74943: LD_VAR 0 2
74947: RET
// export function PrepareEnchidna ( ) ; begin
74948: LD_INT 0
74950: PPUSH
// uc_side := 0 ;
74951: LD_ADDR_OWVAR 20
74955: PUSH
74956: LD_INT 0
74958: ST_TO_ADDR
// uc_nation := 0 ;
74959: LD_ADDR_OWVAR 21
74963: PUSH
74964: LD_INT 0
74966: ST_TO_ADDR
// hc_class := class_baggie ;
74967: LD_ADDR_OWVAR 28
74971: PUSH
74972: LD_INT 13
74974: ST_TO_ADDR
// hc_gallery :=  ;
74975: LD_ADDR_OWVAR 33
74979: PUSH
74980: LD_STRING 
74982: ST_TO_ADDR
// end ;
74983: LD_VAR 0 1
74987: RET
// export function PrepareFrog ( ) ; begin
74988: LD_INT 0
74990: PPUSH
// uc_side := 0 ;
74991: LD_ADDR_OWVAR 20
74995: PUSH
74996: LD_INT 0
74998: ST_TO_ADDR
// uc_nation := 0 ;
74999: LD_ADDR_OWVAR 21
75003: PUSH
75004: LD_INT 0
75006: ST_TO_ADDR
// hc_class := class_frog ;
75007: LD_ADDR_OWVAR 28
75011: PUSH
75012: LD_INT 19
75014: ST_TO_ADDR
// hc_gallery :=  ;
75015: LD_ADDR_OWVAR 33
75019: PUSH
75020: LD_STRING 
75022: ST_TO_ADDR
// end ;
75023: LD_VAR 0 1
75027: RET
// export function PrepareFish ( ) ; begin
75028: LD_INT 0
75030: PPUSH
// uc_side := 0 ;
75031: LD_ADDR_OWVAR 20
75035: PUSH
75036: LD_INT 0
75038: ST_TO_ADDR
// uc_nation := 0 ;
75039: LD_ADDR_OWVAR 21
75043: PUSH
75044: LD_INT 0
75046: ST_TO_ADDR
// hc_class := class_fish ;
75047: LD_ADDR_OWVAR 28
75051: PUSH
75052: LD_INT 20
75054: ST_TO_ADDR
// hc_gallery :=  ;
75055: LD_ADDR_OWVAR 33
75059: PUSH
75060: LD_STRING 
75062: ST_TO_ADDR
// end ;
75063: LD_VAR 0 1
75067: RET
// export function PrepareBird ( ) ; begin
75068: LD_INT 0
75070: PPUSH
// uc_side := 0 ;
75071: LD_ADDR_OWVAR 20
75075: PUSH
75076: LD_INT 0
75078: ST_TO_ADDR
// uc_nation := 0 ;
75079: LD_ADDR_OWVAR 21
75083: PUSH
75084: LD_INT 0
75086: ST_TO_ADDR
// hc_class := class_phororhacos ;
75087: LD_ADDR_OWVAR 28
75091: PUSH
75092: LD_INT 18
75094: ST_TO_ADDR
// hc_gallery :=  ;
75095: LD_ADDR_OWVAR 33
75099: PUSH
75100: LD_STRING 
75102: ST_TO_ADDR
// end ;
75103: LD_VAR 0 1
75107: RET
// export function PrepareHorse ( ) ; begin
75108: LD_INT 0
75110: PPUSH
// uc_side := 0 ;
75111: LD_ADDR_OWVAR 20
75115: PUSH
75116: LD_INT 0
75118: ST_TO_ADDR
// uc_nation := 0 ;
75119: LD_ADDR_OWVAR 21
75123: PUSH
75124: LD_INT 0
75126: ST_TO_ADDR
// hc_class := class_horse ;
75127: LD_ADDR_OWVAR 28
75131: PUSH
75132: LD_INT 21
75134: ST_TO_ADDR
// hc_gallery :=  ;
75135: LD_ADDR_OWVAR 33
75139: PUSH
75140: LD_STRING 
75142: ST_TO_ADDR
// end ;
75143: LD_VAR 0 1
75147: RET
// export function PrepareMastodont ( ) ; begin
75148: LD_INT 0
75150: PPUSH
// uc_side := 0 ;
75151: LD_ADDR_OWVAR 20
75155: PUSH
75156: LD_INT 0
75158: ST_TO_ADDR
// uc_nation := 0 ;
75159: LD_ADDR_OWVAR 21
75163: PUSH
75164: LD_INT 0
75166: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75167: LD_ADDR_OWVAR 37
75171: PUSH
75172: LD_INT 31
75174: ST_TO_ADDR
// vc_control := control_rider ;
75175: LD_ADDR_OWVAR 38
75179: PUSH
75180: LD_INT 4
75182: ST_TO_ADDR
// end ;
75183: LD_VAR 0 1
75187: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75188: LD_INT 0
75190: PPUSH
75191: PPUSH
75192: PPUSH
// uc_side = 0 ;
75193: LD_ADDR_OWVAR 20
75197: PUSH
75198: LD_INT 0
75200: ST_TO_ADDR
// uc_nation = 0 ;
75201: LD_ADDR_OWVAR 21
75205: PUSH
75206: LD_INT 0
75208: ST_TO_ADDR
// InitHc_All ( ) ;
75209: CALL_OW 584
// InitVc ;
75213: CALL_OW 20
// if mastodonts then
75217: LD_VAR 0 6
75221: IFFALSE 75288
// for i = 1 to mastodonts do
75223: LD_ADDR_VAR 0 11
75227: PUSH
75228: DOUBLE
75229: LD_INT 1
75231: DEC
75232: ST_TO_ADDR
75233: LD_VAR 0 6
75237: PUSH
75238: FOR_TO
75239: IFFALSE 75286
// begin vc_chassis := 31 ;
75241: LD_ADDR_OWVAR 37
75245: PUSH
75246: LD_INT 31
75248: ST_TO_ADDR
// vc_control := control_rider ;
75249: LD_ADDR_OWVAR 38
75253: PUSH
75254: LD_INT 4
75256: ST_TO_ADDR
// animal := CreateVehicle ;
75257: LD_ADDR_VAR 0 12
75261: PUSH
75262: CALL_OW 45
75266: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75267: LD_VAR 0 12
75271: PPUSH
75272: LD_VAR 0 8
75276: PPUSH
75277: LD_INT 0
75279: PPUSH
75280: CALL 77416 0 3
// end ;
75284: GO 75238
75286: POP
75287: POP
// if horses then
75288: LD_VAR 0 5
75292: IFFALSE 75359
// for i = 1 to horses do
75294: LD_ADDR_VAR 0 11
75298: PUSH
75299: DOUBLE
75300: LD_INT 1
75302: DEC
75303: ST_TO_ADDR
75304: LD_VAR 0 5
75308: PUSH
75309: FOR_TO
75310: IFFALSE 75357
// begin hc_class := 21 ;
75312: LD_ADDR_OWVAR 28
75316: PUSH
75317: LD_INT 21
75319: ST_TO_ADDR
// hc_gallery :=  ;
75320: LD_ADDR_OWVAR 33
75324: PUSH
75325: LD_STRING 
75327: ST_TO_ADDR
// animal := CreateHuman ;
75328: LD_ADDR_VAR 0 12
75332: PUSH
75333: CALL_OW 44
75337: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75338: LD_VAR 0 12
75342: PPUSH
75343: LD_VAR 0 8
75347: PPUSH
75348: LD_INT 0
75350: PPUSH
75351: CALL 77416 0 3
// end ;
75355: GO 75309
75357: POP
75358: POP
// if birds then
75359: LD_VAR 0 1
75363: IFFALSE 75430
// for i = 1 to birds do
75365: LD_ADDR_VAR 0 11
75369: PUSH
75370: DOUBLE
75371: LD_INT 1
75373: DEC
75374: ST_TO_ADDR
75375: LD_VAR 0 1
75379: PUSH
75380: FOR_TO
75381: IFFALSE 75428
// begin hc_class := 18 ;
75383: LD_ADDR_OWVAR 28
75387: PUSH
75388: LD_INT 18
75390: ST_TO_ADDR
// hc_gallery =  ;
75391: LD_ADDR_OWVAR 33
75395: PUSH
75396: LD_STRING 
75398: ST_TO_ADDR
// animal := CreateHuman ;
75399: LD_ADDR_VAR 0 12
75403: PUSH
75404: CALL_OW 44
75408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75409: LD_VAR 0 12
75413: PPUSH
75414: LD_VAR 0 8
75418: PPUSH
75419: LD_INT 0
75421: PPUSH
75422: CALL 77416 0 3
// end ;
75426: GO 75380
75428: POP
75429: POP
// if tigers then
75430: LD_VAR 0 2
75434: IFFALSE 75518
// for i = 1 to tigers do
75436: LD_ADDR_VAR 0 11
75440: PUSH
75441: DOUBLE
75442: LD_INT 1
75444: DEC
75445: ST_TO_ADDR
75446: LD_VAR 0 2
75450: PUSH
75451: FOR_TO
75452: IFFALSE 75516
// begin hc_class = class_tiger ;
75454: LD_ADDR_OWVAR 28
75458: PUSH
75459: LD_INT 14
75461: ST_TO_ADDR
// hc_gallery =  ;
75462: LD_ADDR_OWVAR 33
75466: PUSH
75467: LD_STRING 
75469: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75470: LD_ADDR_OWVAR 35
75474: PUSH
75475: LD_INT 7
75477: NEG
75478: PPUSH
75479: LD_INT 7
75481: PPUSH
75482: CALL_OW 12
75486: ST_TO_ADDR
// animal := CreateHuman ;
75487: LD_ADDR_VAR 0 12
75491: PUSH
75492: CALL_OW 44
75496: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75497: LD_VAR 0 12
75501: PPUSH
75502: LD_VAR 0 8
75506: PPUSH
75507: LD_INT 0
75509: PPUSH
75510: CALL 77416 0 3
// end ;
75514: GO 75451
75516: POP
75517: POP
// if apemans then
75518: LD_VAR 0 3
75522: IFFALSE 75645
// for i = 1 to apemans do
75524: LD_ADDR_VAR 0 11
75528: PUSH
75529: DOUBLE
75530: LD_INT 1
75532: DEC
75533: ST_TO_ADDR
75534: LD_VAR 0 3
75538: PUSH
75539: FOR_TO
75540: IFFALSE 75643
// begin hc_class = class_apeman ;
75542: LD_ADDR_OWVAR 28
75546: PUSH
75547: LD_INT 12
75549: ST_TO_ADDR
// hc_gallery =  ;
75550: LD_ADDR_OWVAR 33
75554: PUSH
75555: LD_STRING 
75557: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75558: LD_ADDR_OWVAR 35
75562: PUSH
75563: LD_INT 2
75565: NEG
75566: PPUSH
75567: LD_INT 2
75569: PPUSH
75570: CALL_OW 12
75574: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75575: LD_ADDR_OWVAR 31
75579: PUSH
75580: LD_INT 1
75582: PPUSH
75583: LD_INT 3
75585: PPUSH
75586: CALL_OW 12
75590: PUSH
75591: LD_INT 1
75593: PPUSH
75594: LD_INT 3
75596: PPUSH
75597: CALL_OW 12
75601: PUSH
75602: LD_INT 0
75604: PUSH
75605: LD_INT 0
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: LIST
75612: LIST
75613: ST_TO_ADDR
// animal := CreateHuman ;
75614: LD_ADDR_VAR 0 12
75618: PUSH
75619: CALL_OW 44
75623: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75624: LD_VAR 0 12
75628: PPUSH
75629: LD_VAR 0 8
75633: PPUSH
75634: LD_INT 0
75636: PPUSH
75637: CALL 77416 0 3
// end ;
75641: GO 75539
75643: POP
75644: POP
// if enchidnas then
75645: LD_VAR 0 4
75649: IFFALSE 75716
// for i = 1 to enchidnas do
75651: LD_ADDR_VAR 0 11
75655: PUSH
75656: DOUBLE
75657: LD_INT 1
75659: DEC
75660: ST_TO_ADDR
75661: LD_VAR 0 4
75665: PUSH
75666: FOR_TO
75667: IFFALSE 75714
// begin hc_class = 13 ;
75669: LD_ADDR_OWVAR 28
75673: PUSH
75674: LD_INT 13
75676: ST_TO_ADDR
// hc_gallery =  ;
75677: LD_ADDR_OWVAR 33
75681: PUSH
75682: LD_STRING 
75684: ST_TO_ADDR
// animal := CreateHuman ;
75685: LD_ADDR_VAR 0 12
75689: PUSH
75690: CALL_OW 44
75694: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75695: LD_VAR 0 12
75699: PPUSH
75700: LD_VAR 0 8
75704: PPUSH
75705: LD_INT 0
75707: PPUSH
75708: CALL 77416 0 3
// end ;
75712: GO 75666
75714: POP
75715: POP
// if fishes then
75716: LD_VAR 0 7
75720: IFFALSE 75787
// for i = 1 to fishes do
75722: LD_ADDR_VAR 0 11
75726: PUSH
75727: DOUBLE
75728: LD_INT 1
75730: DEC
75731: ST_TO_ADDR
75732: LD_VAR 0 7
75736: PUSH
75737: FOR_TO
75738: IFFALSE 75785
// begin hc_class = 20 ;
75740: LD_ADDR_OWVAR 28
75744: PUSH
75745: LD_INT 20
75747: ST_TO_ADDR
// hc_gallery =  ;
75748: LD_ADDR_OWVAR 33
75752: PUSH
75753: LD_STRING 
75755: ST_TO_ADDR
// animal := CreateHuman ;
75756: LD_ADDR_VAR 0 12
75760: PUSH
75761: CALL_OW 44
75765: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75766: LD_VAR 0 12
75770: PPUSH
75771: LD_VAR 0 9
75775: PPUSH
75776: LD_INT 0
75778: PPUSH
75779: CALL 77416 0 3
// end ;
75783: GO 75737
75785: POP
75786: POP
// end ;
75787: LD_VAR 0 10
75791: RET
// export function WantHeal ( sci , unit ) ; begin
75792: LD_INT 0
75794: PPUSH
// if GetTaskList ( sci ) > 0 then
75795: LD_VAR 0 1
75799: PPUSH
75800: CALL_OW 437
75804: PUSH
75805: LD_INT 0
75807: GREATER
75808: IFFALSE 75878
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75810: LD_VAR 0 1
75814: PPUSH
75815: CALL_OW 437
75819: PUSH
75820: LD_INT 1
75822: ARRAY
75823: PUSH
75824: LD_INT 1
75826: ARRAY
75827: PUSH
75828: LD_STRING l
75830: EQUAL
75831: PUSH
75832: LD_VAR 0 1
75836: PPUSH
75837: CALL_OW 437
75841: PUSH
75842: LD_INT 1
75844: ARRAY
75845: PUSH
75846: LD_INT 4
75848: ARRAY
75849: PUSH
75850: LD_VAR 0 2
75854: EQUAL
75855: AND
75856: IFFALSE 75868
// result := true else
75858: LD_ADDR_VAR 0 3
75862: PUSH
75863: LD_INT 1
75865: ST_TO_ADDR
75866: GO 75876
// result := false ;
75868: LD_ADDR_VAR 0 3
75872: PUSH
75873: LD_INT 0
75875: ST_TO_ADDR
// end else
75876: GO 75886
// result := false ;
75878: LD_ADDR_VAR 0 3
75882: PUSH
75883: LD_INT 0
75885: ST_TO_ADDR
// end ;
75886: LD_VAR 0 3
75890: RET
// export function HealTarget ( sci ) ; begin
75891: LD_INT 0
75893: PPUSH
// if not sci then
75894: LD_VAR 0 1
75898: NOT
75899: IFFALSE 75903
// exit ;
75901: GO 75968
// result := 0 ;
75903: LD_ADDR_VAR 0 2
75907: PUSH
75908: LD_INT 0
75910: ST_TO_ADDR
// if GetTaskList ( sci ) then
75911: LD_VAR 0 1
75915: PPUSH
75916: CALL_OW 437
75920: IFFALSE 75968
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75922: LD_VAR 0 1
75926: PPUSH
75927: CALL_OW 437
75931: PUSH
75932: LD_INT 1
75934: ARRAY
75935: PUSH
75936: LD_INT 1
75938: ARRAY
75939: PUSH
75940: LD_STRING l
75942: EQUAL
75943: IFFALSE 75968
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75945: LD_ADDR_VAR 0 2
75949: PUSH
75950: LD_VAR 0 1
75954: PPUSH
75955: CALL_OW 437
75959: PUSH
75960: LD_INT 1
75962: ARRAY
75963: PUSH
75964: LD_INT 4
75966: ARRAY
75967: ST_TO_ADDR
// end ;
75968: LD_VAR 0 2
75972: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75973: LD_INT 0
75975: PPUSH
75976: PPUSH
75977: PPUSH
75978: PPUSH
// if not base_units then
75979: LD_VAR 0 1
75983: NOT
75984: IFFALSE 75988
// exit ;
75986: GO 76075
// result := false ;
75988: LD_ADDR_VAR 0 2
75992: PUSH
75993: LD_INT 0
75995: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75996: LD_ADDR_VAR 0 5
76000: PUSH
76001: LD_VAR 0 1
76005: PPUSH
76006: LD_INT 21
76008: PUSH
76009: LD_INT 3
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: PPUSH
76016: CALL_OW 72
76020: ST_TO_ADDR
// if not tmp then
76021: LD_VAR 0 5
76025: NOT
76026: IFFALSE 76030
// exit ;
76028: GO 76075
// for i in tmp do
76030: LD_ADDR_VAR 0 3
76034: PUSH
76035: LD_VAR 0 5
76039: PUSH
76040: FOR_IN
76041: IFFALSE 76073
// begin result := EnemyInRange ( i , 22 ) ;
76043: LD_ADDR_VAR 0 2
76047: PUSH
76048: LD_VAR 0 3
76052: PPUSH
76053: LD_INT 22
76055: PPUSH
76056: CALL 73673 0 2
76060: ST_TO_ADDR
// if result then
76061: LD_VAR 0 2
76065: IFFALSE 76071
// exit ;
76067: POP
76068: POP
76069: GO 76075
// end ;
76071: GO 76040
76073: POP
76074: POP
// end ;
76075: LD_VAR 0 2
76079: RET
// export function FilterByTag ( units , tag ) ; begin
76080: LD_INT 0
76082: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76083: LD_ADDR_VAR 0 3
76087: PUSH
76088: LD_VAR 0 1
76092: PPUSH
76093: LD_INT 120
76095: PUSH
76096: LD_VAR 0 2
76100: PUSH
76101: EMPTY
76102: LIST
76103: LIST
76104: PPUSH
76105: CALL_OW 72
76109: ST_TO_ADDR
// end ;
76110: LD_VAR 0 3
76114: RET
// export function IsDriver ( un ) ; begin
76115: LD_INT 0
76117: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76118: LD_ADDR_VAR 0 2
76122: PUSH
76123: LD_VAR 0 1
76127: PUSH
76128: LD_INT 55
76130: PUSH
76131: EMPTY
76132: LIST
76133: PPUSH
76134: CALL_OW 69
76138: IN
76139: ST_TO_ADDR
// end ;
76140: LD_VAR 0 2
76144: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76145: LD_INT 0
76147: PPUSH
76148: PPUSH
// list := [ ] ;
76149: LD_ADDR_VAR 0 5
76153: PUSH
76154: EMPTY
76155: ST_TO_ADDR
// case d of 0 :
76156: LD_VAR 0 3
76160: PUSH
76161: LD_INT 0
76163: DOUBLE
76164: EQUAL
76165: IFTRUE 76169
76167: GO 76302
76169: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76170: LD_ADDR_VAR 0 5
76174: PUSH
76175: LD_VAR 0 1
76179: PUSH
76180: LD_INT 4
76182: MINUS
76183: PUSH
76184: LD_VAR 0 2
76188: PUSH
76189: LD_INT 4
76191: MINUS
76192: PUSH
76193: LD_INT 2
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: LIST
76200: PUSH
76201: LD_VAR 0 1
76205: PUSH
76206: LD_INT 3
76208: MINUS
76209: PUSH
76210: LD_VAR 0 2
76214: PUSH
76215: LD_INT 1
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: LIST
76222: PUSH
76223: LD_VAR 0 1
76227: PUSH
76228: LD_INT 4
76230: PLUS
76231: PUSH
76232: LD_VAR 0 2
76236: PUSH
76237: LD_INT 4
76239: PUSH
76240: EMPTY
76241: LIST
76242: LIST
76243: LIST
76244: PUSH
76245: LD_VAR 0 1
76249: PUSH
76250: LD_INT 3
76252: PLUS
76253: PUSH
76254: LD_VAR 0 2
76258: PUSH
76259: LD_INT 3
76261: PLUS
76262: PUSH
76263: LD_INT 5
76265: PUSH
76266: EMPTY
76267: LIST
76268: LIST
76269: LIST
76270: PUSH
76271: LD_VAR 0 1
76275: PUSH
76276: LD_VAR 0 2
76280: PUSH
76281: LD_INT 4
76283: PLUS
76284: PUSH
76285: LD_INT 0
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: LIST
76292: PUSH
76293: EMPTY
76294: LIST
76295: LIST
76296: LIST
76297: LIST
76298: LIST
76299: ST_TO_ADDR
// end ; 1 :
76300: GO 77000
76302: LD_INT 1
76304: DOUBLE
76305: EQUAL
76306: IFTRUE 76310
76308: GO 76443
76310: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76311: LD_ADDR_VAR 0 5
76315: PUSH
76316: LD_VAR 0 1
76320: PUSH
76321: LD_VAR 0 2
76325: PUSH
76326: LD_INT 4
76328: MINUS
76329: PUSH
76330: LD_INT 3
76332: PUSH
76333: EMPTY
76334: LIST
76335: LIST
76336: LIST
76337: PUSH
76338: LD_VAR 0 1
76342: PUSH
76343: LD_INT 3
76345: MINUS
76346: PUSH
76347: LD_VAR 0 2
76351: PUSH
76352: LD_INT 3
76354: MINUS
76355: PUSH
76356: LD_INT 2
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: LIST
76363: PUSH
76364: LD_VAR 0 1
76368: PUSH
76369: LD_INT 4
76371: MINUS
76372: PUSH
76373: LD_VAR 0 2
76377: PUSH
76378: LD_INT 1
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: LIST
76385: PUSH
76386: LD_VAR 0 1
76390: PUSH
76391: LD_VAR 0 2
76395: PUSH
76396: LD_INT 3
76398: PLUS
76399: PUSH
76400: LD_INT 0
76402: PUSH
76403: EMPTY
76404: LIST
76405: LIST
76406: LIST
76407: PUSH
76408: LD_VAR 0 1
76412: PUSH
76413: LD_INT 4
76415: PLUS
76416: PUSH
76417: LD_VAR 0 2
76421: PUSH
76422: LD_INT 4
76424: PLUS
76425: PUSH
76426: LD_INT 5
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: LIST
76433: PUSH
76434: EMPTY
76435: LIST
76436: LIST
76437: LIST
76438: LIST
76439: LIST
76440: ST_TO_ADDR
// end ; 2 :
76441: GO 77000
76443: LD_INT 2
76445: DOUBLE
76446: EQUAL
76447: IFTRUE 76451
76449: GO 76580
76451: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76452: LD_ADDR_VAR 0 5
76456: PUSH
76457: LD_VAR 0 1
76461: PUSH
76462: LD_VAR 0 2
76466: PUSH
76467: LD_INT 3
76469: MINUS
76470: PUSH
76471: LD_INT 3
76473: PUSH
76474: EMPTY
76475: LIST
76476: LIST
76477: LIST
76478: PUSH
76479: LD_VAR 0 1
76483: PUSH
76484: LD_INT 4
76486: PLUS
76487: PUSH
76488: LD_VAR 0 2
76492: PUSH
76493: LD_INT 4
76495: PUSH
76496: EMPTY
76497: LIST
76498: LIST
76499: LIST
76500: PUSH
76501: LD_VAR 0 1
76505: PUSH
76506: LD_VAR 0 2
76510: PUSH
76511: LD_INT 4
76513: PLUS
76514: PUSH
76515: LD_INT 0
76517: PUSH
76518: EMPTY
76519: LIST
76520: LIST
76521: LIST
76522: PUSH
76523: LD_VAR 0 1
76527: PUSH
76528: LD_INT 3
76530: MINUS
76531: PUSH
76532: LD_VAR 0 2
76536: PUSH
76537: LD_INT 1
76539: PUSH
76540: EMPTY
76541: LIST
76542: LIST
76543: LIST
76544: PUSH
76545: LD_VAR 0 1
76549: PUSH
76550: LD_INT 4
76552: MINUS
76553: PUSH
76554: LD_VAR 0 2
76558: PUSH
76559: LD_INT 4
76561: MINUS
76562: PUSH
76563: LD_INT 2
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: LIST
76570: PUSH
76571: EMPTY
76572: LIST
76573: LIST
76574: LIST
76575: LIST
76576: LIST
76577: ST_TO_ADDR
// end ; 3 :
76578: GO 77000
76580: LD_INT 3
76582: DOUBLE
76583: EQUAL
76584: IFTRUE 76588
76586: GO 76721
76588: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76589: LD_ADDR_VAR 0 5
76593: PUSH
76594: LD_VAR 0 1
76598: PUSH
76599: LD_INT 3
76601: PLUS
76602: PUSH
76603: LD_VAR 0 2
76607: PUSH
76608: LD_INT 4
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: LIST
76615: PUSH
76616: LD_VAR 0 1
76620: PUSH
76621: LD_INT 4
76623: PLUS
76624: PUSH
76625: LD_VAR 0 2
76629: PUSH
76630: LD_INT 4
76632: PLUS
76633: PUSH
76634: LD_INT 5
76636: PUSH
76637: EMPTY
76638: LIST
76639: LIST
76640: LIST
76641: PUSH
76642: LD_VAR 0 1
76646: PUSH
76647: LD_INT 4
76649: MINUS
76650: PUSH
76651: LD_VAR 0 2
76655: PUSH
76656: LD_INT 1
76658: PUSH
76659: EMPTY
76660: LIST
76661: LIST
76662: LIST
76663: PUSH
76664: LD_VAR 0 1
76668: PUSH
76669: LD_VAR 0 2
76673: PUSH
76674: LD_INT 4
76676: MINUS
76677: PUSH
76678: LD_INT 3
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: LIST
76685: PUSH
76686: LD_VAR 0 1
76690: PUSH
76691: LD_INT 3
76693: MINUS
76694: PUSH
76695: LD_VAR 0 2
76699: PUSH
76700: LD_INT 3
76702: MINUS
76703: PUSH
76704: LD_INT 2
76706: PUSH
76707: EMPTY
76708: LIST
76709: LIST
76710: LIST
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: LIST
76716: LIST
76717: LIST
76718: ST_TO_ADDR
// end ; 4 :
76719: GO 77000
76721: LD_INT 4
76723: DOUBLE
76724: EQUAL
76725: IFTRUE 76729
76727: GO 76862
76729: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76730: LD_ADDR_VAR 0 5
76734: PUSH
76735: LD_VAR 0 1
76739: PUSH
76740: LD_VAR 0 2
76744: PUSH
76745: LD_INT 4
76747: PLUS
76748: PUSH
76749: LD_INT 0
76751: PUSH
76752: EMPTY
76753: LIST
76754: LIST
76755: LIST
76756: PUSH
76757: LD_VAR 0 1
76761: PUSH
76762: LD_INT 3
76764: PLUS
76765: PUSH
76766: LD_VAR 0 2
76770: PUSH
76771: LD_INT 3
76773: PLUS
76774: PUSH
76775: LD_INT 5
76777: PUSH
76778: EMPTY
76779: LIST
76780: LIST
76781: LIST
76782: PUSH
76783: LD_VAR 0 1
76787: PUSH
76788: LD_INT 4
76790: PLUS
76791: PUSH
76792: LD_VAR 0 2
76796: PUSH
76797: LD_INT 4
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: LIST
76804: PUSH
76805: LD_VAR 0 1
76809: PUSH
76810: LD_VAR 0 2
76814: PUSH
76815: LD_INT 3
76817: MINUS
76818: PUSH
76819: LD_INT 3
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: LIST
76826: PUSH
76827: LD_VAR 0 1
76831: PUSH
76832: LD_INT 4
76834: MINUS
76835: PUSH
76836: LD_VAR 0 2
76840: PUSH
76841: LD_INT 4
76843: MINUS
76844: PUSH
76845: LD_INT 2
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: LIST
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: LIST
76857: LIST
76858: LIST
76859: ST_TO_ADDR
// end ; 5 :
76860: GO 77000
76862: LD_INT 5
76864: DOUBLE
76865: EQUAL
76866: IFTRUE 76870
76868: GO 76999
76870: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76871: LD_ADDR_VAR 0 5
76875: PUSH
76876: LD_VAR 0 1
76880: PUSH
76881: LD_INT 4
76883: MINUS
76884: PUSH
76885: LD_VAR 0 2
76889: PUSH
76890: LD_INT 1
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: LIST
76897: PUSH
76898: LD_VAR 0 1
76902: PUSH
76903: LD_VAR 0 2
76907: PUSH
76908: LD_INT 4
76910: MINUS
76911: PUSH
76912: LD_INT 3
76914: PUSH
76915: EMPTY
76916: LIST
76917: LIST
76918: LIST
76919: PUSH
76920: LD_VAR 0 1
76924: PUSH
76925: LD_INT 4
76927: PLUS
76928: PUSH
76929: LD_VAR 0 2
76933: PUSH
76934: LD_INT 4
76936: PLUS
76937: PUSH
76938: LD_INT 5
76940: PUSH
76941: EMPTY
76942: LIST
76943: LIST
76944: LIST
76945: PUSH
76946: LD_VAR 0 1
76950: PUSH
76951: LD_INT 3
76953: PLUS
76954: PUSH
76955: LD_VAR 0 2
76959: PUSH
76960: LD_INT 4
76962: PUSH
76963: EMPTY
76964: LIST
76965: LIST
76966: LIST
76967: PUSH
76968: LD_VAR 0 1
76972: PUSH
76973: LD_VAR 0 2
76977: PUSH
76978: LD_INT 3
76980: PLUS
76981: PUSH
76982: LD_INT 0
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: LIST
76989: PUSH
76990: EMPTY
76991: LIST
76992: LIST
76993: LIST
76994: LIST
76995: LIST
76996: ST_TO_ADDR
// end ; end ;
76997: GO 77000
76999: POP
// result := list ;
77000: LD_ADDR_VAR 0 4
77004: PUSH
77005: LD_VAR 0 5
77009: ST_TO_ADDR
// end ;
77010: LD_VAR 0 4
77014: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77015: LD_INT 0
77017: PPUSH
77018: PPUSH
77019: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77020: LD_VAR 0 1
77024: NOT
77025: PUSH
77026: LD_VAR 0 2
77030: PUSH
77031: LD_INT 1
77033: PUSH
77034: LD_INT 2
77036: PUSH
77037: LD_INT 3
77039: PUSH
77040: LD_INT 4
77042: PUSH
77043: EMPTY
77044: LIST
77045: LIST
77046: LIST
77047: LIST
77048: IN
77049: NOT
77050: OR
77051: IFFALSE 77055
// exit ;
77053: GO 77138
// tmp := [ ] ;
77055: LD_ADDR_VAR 0 5
77059: PUSH
77060: EMPTY
77061: ST_TO_ADDR
// for i in units do
77062: LD_ADDR_VAR 0 4
77066: PUSH
77067: LD_VAR 0 1
77071: PUSH
77072: FOR_IN
77073: IFFALSE 77107
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77075: LD_ADDR_VAR 0 5
77079: PUSH
77080: LD_VAR 0 5
77084: PPUSH
77085: LD_VAR 0 4
77089: PPUSH
77090: LD_VAR 0 2
77094: PPUSH
77095: CALL_OW 259
77099: PPUSH
77100: CALL 78511 0 2
77104: ST_TO_ADDR
77105: GO 77072
77107: POP
77108: POP
// if not tmp then
77109: LD_VAR 0 5
77113: NOT
77114: IFFALSE 77118
// exit ;
77116: GO 77138
// result := SortListByListDesc ( units , tmp ) ;
77118: LD_ADDR_VAR 0 3
77122: PUSH
77123: LD_VAR 0 1
77127: PPUSH
77128: LD_VAR 0 5
77132: PPUSH
77133: CALL_OW 77
77137: ST_TO_ADDR
// end ;
77138: LD_VAR 0 3
77142: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77143: LD_INT 0
77145: PPUSH
77146: PPUSH
77147: PPUSH
// result := false ;
77148: LD_ADDR_VAR 0 3
77152: PUSH
77153: LD_INT 0
77155: ST_TO_ADDR
// if not building then
77156: LD_VAR 0 2
77160: NOT
77161: IFFALSE 77165
// exit ;
77163: GO 77303
// x := GetX ( building ) ;
77165: LD_ADDR_VAR 0 4
77169: PUSH
77170: LD_VAR 0 2
77174: PPUSH
77175: CALL_OW 250
77179: ST_TO_ADDR
// y := GetY ( building ) ;
77180: LD_ADDR_VAR 0 5
77184: PUSH
77185: LD_VAR 0 2
77189: PPUSH
77190: CALL_OW 251
77194: ST_TO_ADDR
// if not x or not y then
77195: LD_VAR 0 4
77199: NOT
77200: PUSH
77201: LD_VAR 0 5
77205: NOT
77206: OR
77207: IFFALSE 77211
// exit ;
77209: GO 77303
// if GetTaskList ( unit ) then
77211: LD_VAR 0 1
77215: PPUSH
77216: CALL_OW 437
77220: IFFALSE 77303
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77222: LD_STRING e
77224: PUSH
77225: LD_VAR 0 1
77229: PPUSH
77230: CALL_OW 437
77234: PUSH
77235: LD_INT 1
77237: ARRAY
77238: PUSH
77239: LD_INT 1
77241: ARRAY
77242: EQUAL
77243: PUSH
77244: LD_VAR 0 4
77248: PUSH
77249: LD_VAR 0 1
77253: PPUSH
77254: CALL_OW 437
77258: PUSH
77259: LD_INT 1
77261: ARRAY
77262: PUSH
77263: LD_INT 2
77265: ARRAY
77266: EQUAL
77267: AND
77268: PUSH
77269: LD_VAR 0 5
77273: PUSH
77274: LD_VAR 0 1
77278: PPUSH
77279: CALL_OW 437
77283: PUSH
77284: LD_INT 1
77286: ARRAY
77287: PUSH
77288: LD_INT 3
77290: ARRAY
77291: EQUAL
77292: AND
77293: IFFALSE 77303
// result := true end ;
77295: LD_ADDR_VAR 0 3
77299: PUSH
77300: LD_INT 1
77302: ST_TO_ADDR
// end ;
77303: LD_VAR 0 3
77307: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77308: LD_INT 0
77310: PPUSH
// result := false ;
77311: LD_ADDR_VAR 0 4
77315: PUSH
77316: LD_INT 0
77318: ST_TO_ADDR
// if GetTaskList ( unit ) then
77319: LD_VAR 0 1
77323: PPUSH
77324: CALL_OW 437
77328: IFFALSE 77411
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77330: LD_STRING M
77332: PUSH
77333: LD_VAR 0 1
77337: PPUSH
77338: CALL_OW 437
77342: PUSH
77343: LD_INT 1
77345: ARRAY
77346: PUSH
77347: LD_INT 1
77349: ARRAY
77350: EQUAL
77351: PUSH
77352: LD_VAR 0 2
77356: PUSH
77357: LD_VAR 0 1
77361: PPUSH
77362: CALL_OW 437
77366: PUSH
77367: LD_INT 1
77369: ARRAY
77370: PUSH
77371: LD_INT 2
77373: ARRAY
77374: EQUAL
77375: AND
77376: PUSH
77377: LD_VAR 0 3
77381: PUSH
77382: LD_VAR 0 1
77386: PPUSH
77387: CALL_OW 437
77391: PUSH
77392: LD_INT 1
77394: ARRAY
77395: PUSH
77396: LD_INT 3
77398: ARRAY
77399: EQUAL
77400: AND
77401: IFFALSE 77411
// result := true ;
77403: LD_ADDR_VAR 0 4
77407: PUSH
77408: LD_INT 1
77410: ST_TO_ADDR
// end ; end ;
77411: LD_VAR 0 4
77415: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77416: LD_INT 0
77418: PPUSH
77419: PPUSH
77420: PPUSH
77421: PPUSH
// if not unit or not area then
77422: LD_VAR 0 1
77426: NOT
77427: PUSH
77428: LD_VAR 0 2
77432: NOT
77433: OR
77434: IFFALSE 77438
// exit ;
77436: GO 77614
// tmp := AreaToList ( area , i ) ;
77438: LD_ADDR_VAR 0 6
77442: PUSH
77443: LD_VAR 0 2
77447: PPUSH
77448: LD_VAR 0 5
77452: PPUSH
77453: CALL_OW 517
77457: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77458: LD_ADDR_VAR 0 5
77462: PUSH
77463: DOUBLE
77464: LD_INT 1
77466: DEC
77467: ST_TO_ADDR
77468: LD_VAR 0 6
77472: PUSH
77473: LD_INT 1
77475: ARRAY
77476: PUSH
77477: FOR_TO
77478: IFFALSE 77612
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77480: LD_ADDR_VAR 0 7
77484: PUSH
77485: LD_VAR 0 6
77489: PUSH
77490: LD_INT 1
77492: ARRAY
77493: PUSH
77494: LD_VAR 0 5
77498: ARRAY
77499: PUSH
77500: LD_VAR 0 6
77504: PUSH
77505: LD_INT 2
77507: ARRAY
77508: PUSH
77509: LD_VAR 0 5
77513: ARRAY
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77519: LD_INT 92
77521: PUSH
77522: LD_VAR 0 7
77526: PUSH
77527: LD_INT 1
77529: ARRAY
77530: PUSH
77531: LD_VAR 0 7
77535: PUSH
77536: LD_INT 2
77538: ARRAY
77539: PUSH
77540: LD_INT 2
77542: PUSH
77543: EMPTY
77544: LIST
77545: LIST
77546: LIST
77547: LIST
77548: PPUSH
77549: CALL_OW 69
77553: PUSH
77554: LD_INT 0
77556: EQUAL
77557: IFFALSE 77610
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77559: LD_VAR 0 1
77563: PPUSH
77564: LD_VAR 0 7
77568: PUSH
77569: LD_INT 1
77571: ARRAY
77572: PPUSH
77573: LD_VAR 0 7
77577: PUSH
77578: LD_INT 2
77580: ARRAY
77581: PPUSH
77582: LD_VAR 0 3
77586: PPUSH
77587: CALL_OW 48
// result := IsPlaced ( unit ) ;
77591: LD_ADDR_VAR 0 4
77595: PUSH
77596: LD_VAR 0 1
77600: PPUSH
77601: CALL_OW 305
77605: ST_TO_ADDR
// exit ;
77606: POP
77607: POP
77608: GO 77614
// end ; end ;
77610: GO 77477
77612: POP
77613: POP
// end ;
77614: LD_VAR 0 4
77618: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77619: LD_INT 0
77621: PPUSH
77622: PPUSH
77623: PPUSH
// if not side or side > 8 then
77624: LD_VAR 0 1
77628: NOT
77629: PUSH
77630: LD_VAR 0 1
77634: PUSH
77635: LD_INT 8
77637: GREATER
77638: OR
77639: IFFALSE 77643
// exit ;
77641: GO 77830
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77643: LD_ADDR_VAR 0 4
77647: PUSH
77648: LD_INT 22
77650: PUSH
77651: LD_VAR 0 1
77655: PUSH
77656: EMPTY
77657: LIST
77658: LIST
77659: PUSH
77660: LD_INT 21
77662: PUSH
77663: LD_INT 3
77665: PUSH
77666: EMPTY
77667: LIST
77668: LIST
77669: PUSH
77670: EMPTY
77671: LIST
77672: LIST
77673: PPUSH
77674: CALL_OW 69
77678: ST_TO_ADDR
// if not tmp then
77679: LD_VAR 0 4
77683: NOT
77684: IFFALSE 77688
// exit ;
77686: GO 77830
// enable_addtolog := true ;
77688: LD_ADDR_OWVAR 81
77692: PUSH
77693: LD_INT 1
77695: ST_TO_ADDR
// AddToLog ( [ ) ;
77696: LD_STRING [
77698: PPUSH
77699: CALL_OW 561
// for i in tmp do
77703: LD_ADDR_VAR 0 3
77707: PUSH
77708: LD_VAR 0 4
77712: PUSH
77713: FOR_IN
77714: IFFALSE 77821
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77716: LD_STRING [
77718: PUSH
77719: LD_VAR 0 3
77723: PPUSH
77724: CALL_OW 266
77728: STR
77729: PUSH
77730: LD_STRING , 
77732: STR
77733: PUSH
77734: LD_VAR 0 3
77738: PPUSH
77739: CALL_OW 250
77743: STR
77744: PUSH
77745: LD_STRING , 
77747: STR
77748: PUSH
77749: LD_VAR 0 3
77753: PPUSH
77754: CALL_OW 251
77758: STR
77759: PUSH
77760: LD_STRING , 
77762: STR
77763: PUSH
77764: LD_VAR 0 3
77768: PPUSH
77769: CALL_OW 254
77773: STR
77774: PUSH
77775: LD_STRING , 
77777: STR
77778: PUSH
77779: LD_VAR 0 3
77783: PPUSH
77784: LD_INT 1
77786: PPUSH
77787: CALL_OW 268
77791: STR
77792: PUSH
77793: LD_STRING , 
77795: STR
77796: PUSH
77797: LD_VAR 0 3
77801: PPUSH
77802: LD_INT 2
77804: PPUSH
77805: CALL_OW 268
77809: STR
77810: PUSH
77811: LD_STRING ],
77813: STR
77814: PPUSH
77815: CALL_OW 561
// end ;
77819: GO 77713
77821: POP
77822: POP
// AddToLog ( ]; ) ;
77823: LD_STRING ];
77825: PPUSH
77826: CALL_OW 561
// end ;
77830: LD_VAR 0 2
77834: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77835: LD_INT 0
77837: PPUSH
77838: PPUSH
77839: PPUSH
77840: PPUSH
77841: PPUSH
// if not area or not rate or not max then
77842: LD_VAR 0 1
77846: NOT
77847: PUSH
77848: LD_VAR 0 2
77852: NOT
77853: OR
77854: PUSH
77855: LD_VAR 0 4
77859: NOT
77860: OR
77861: IFFALSE 77865
// exit ;
77863: GO 78054
// while 1 do
77865: LD_INT 1
77867: IFFALSE 78054
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77869: LD_ADDR_VAR 0 9
77873: PUSH
77874: LD_VAR 0 1
77878: PPUSH
77879: LD_INT 1
77881: PPUSH
77882: CALL_OW 287
77886: PUSH
77887: LD_INT 10
77889: MUL
77890: ST_TO_ADDR
// r := rate / 10 ;
77891: LD_ADDR_VAR 0 7
77895: PUSH
77896: LD_VAR 0 2
77900: PUSH
77901: LD_INT 10
77903: DIVREAL
77904: ST_TO_ADDR
// time := 1 1$00 ;
77905: LD_ADDR_VAR 0 8
77909: PUSH
77910: LD_INT 2100
77912: ST_TO_ADDR
// if amount < min then
77913: LD_VAR 0 9
77917: PUSH
77918: LD_VAR 0 3
77922: LESS
77923: IFFALSE 77941
// r := r * 2 else
77925: LD_ADDR_VAR 0 7
77929: PUSH
77930: LD_VAR 0 7
77934: PUSH
77935: LD_INT 2
77937: MUL
77938: ST_TO_ADDR
77939: GO 77967
// if amount > max then
77941: LD_VAR 0 9
77945: PUSH
77946: LD_VAR 0 4
77950: GREATER
77951: IFFALSE 77967
// r := r / 2 ;
77953: LD_ADDR_VAR 0 7
77957: PUSH
77958: LD_VAR 0 7
77962: PUSH
77963: LD_INT 2
77965: DIVREAL
77966: ST_TO_ADDR
// time := time / r ;
77967: LD_ADDR_VAR 0 8
77971: PUSH
77972: LD_VAR 0 8
77976: PUSH
77977: LD_VAR 0 7
77981: DIVREAL
77982: ST_TO_ADDR
// if time < 0 then
77983: LD_VAR 0 8
77987: PUSH
77988: LD_INT 0
77990: LESS
77991: IFFALSE 78008
// time := time * - 1 ;
77993: LD_ADDR_VAR 0 8
77997: PUSH
77998: LD_VAR 0 8
78002: PUSH
78003: LD_INT 1
78005: NEG
78006: MUL
78007: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78008: LD_VAR 0 8
78012: PUSH
78013: LD_INT 35
78015: PPUSH
78016: LD_INT 875
78018: PPUSH
78019: CALL_OW 12
78023: PLUS
78024: PPUSH
78025: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78029: LD_INT 1
78031: PPUSH
78032: LD_INT 5
78034: PPUSH
78035: CALL_OW 12
78039: PPUSH
78040: LD_VAR 0 1
78044: PPUSH
78045: LD_INT 1
78047: PPUSH
78048: CALL_OW 55
// end ;
78052: GO 77865
// end ;
78054: LD_VAR 0 5
78058: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78059: LD_INT 0
78061: PPUSH
78062: PPUSH
78063: PPUSH
78064: PPUSH
78065: PPUSH
78066: PPUSH
78067: PPUSH
78068: PPUSH
// if not turrets or not factories then
78069: LD_VAR 0 1
78073: NOT
78074: PUSH
78075: LD_VAR 0 2
78079: NOT
78080: OR
78081: IFFALSE 78085
// exit ;
78083: GO 78392
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78085: LD_ADDR_VAR 0 10
78089: PUSH
78090: LD_INT 5
78092: PUSH
78093: LD_INT 6
78095: PUSH
78096: EMPTY
78097: LIST
78098: LIST
78099: PUSH
78100: LD_INT 2
78102: PUSH
78103: LD_INT 4
78105: PUSH
78106: EMPTY
78107: LIST
78108: LIST
78109: PUSH
78110: LD_INT 3
78112: PUSH
78113: LD_INT 5
78115: PUSH
78116: EMPTY
78117: LIST
78118: LIST
78119: PUSH
78120: EMPTY
78121: LIST
78122: LIST
78123: LIST
78124: PUSH
78125: LD_INT 24
78127: PUSH
78128: LD_INT 25
78130: PUSH
78131: EMPTY
78132: LIST
78133: LIST
78134: PUSH
78135: LD_INT 23
78137: PUSH
78138: LD_INT 27
78140: PUSH
78141: EMPTY
78142: LIST
78143: LIST
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: PUSH
78149: LD_INT 42
78151: PUSH
78152: LD_INT 43
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: PUSH
78159: LD_INT 44
78161: PUSH
78162: LD_INT 46
78164: PUSH
78165: EMPTY
78166: LIST
78167: LIST
78168: PUSH
78169: LD_INT 45
78171: PUSH
78172: LD_INT 47
78174: PUSH
78175: EMPTY
78176: LIST
78177: LIST
78178: PUSH
78179: EMPTY
78180: LIST
78181: LIST
78182: LIST
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: LIST
78188: ST_TO_ADDR
// result := [ ] ;
78189: LD_ADDR_VAR 0 3
78193: PUSH
78194: EMPTY
78195: ST_TO_ADDR
// for i in turrets do
78196: LD_ADDR_VAR 0 4
78200: PUSH
78201: LD_VAR 0 1
78205: PUSH
78206: FOR_IN
78207: IFFALSE 78390
// begin nat := GetNation ( i ) ;
78209: LD_ADDR_VAR 0 7
78213: PUSH
78214: LD_VAR 0 4
78218: PPUSH
78219: CALL_OW 248
78223: ST_TO_ADDR
// weapon := 0 ;
78224: LD_ADDR_VAR 0 8
78228: PUSH
78229: LD_INT 0
78231: ST_TO_ADDR
// if not nat then
78232: LD_VAR 0 7
78236: NOT
78237: IFFALSE 78241
// continue ;
78239: GO 78206
// for j in list [ nat ] do
78241: LD_ADDR_VAR 0 5
78245: PUSH
78246: LD_VAR 0 10
78250: PUSH
78251: LD_VAR 0 7
78255: ARRAY
78256: PUSH
78257: FOR_IN
78258: IFFALSE 78299
// if GetBWeapon ( i ) = j [ 1 ] then
78260: LD_VAR 0 4
78264: PPUSH
78265: CALL_OW 269
78269: PUSH
78270: LD_VAR 0 5
78274: PUSH
78275: LD_INT 1
78277: ARRAY
78278: EQUAL
78279: IFFALSE 78297
// begin weapon := j [ 2 ] ;
78281: LD_ADDR_VAR 0 8
78285: PUSH
78286: LD_VAR 0 5
78290: PUSH
78291: LD_INT 2
78293: ARRAY
78294: ST_TO_ADDR
// break ;
78295: GO 78299
// end ;
78297: GO 78257
78299: POP
78300: POP
// if not weapon then
78301: LD_VAR 0 8
78305: NOT
78306: IFFALSE 78310
// continue ;
78308: GO 78206
// for k in factories do
78310: LD_ADDR_VAR 0 6
78314: PUSH
78315: LD_VAR 0 2
78319: PUSH
78320: FOR_IN
78321: IFFALSE 78386
// begin weapons := AvailableWeaponList ( k ) ;
78323: LD_ADDR_VAR 0 9
78327: PUSH
78328: LD_VAR 0 6
78332: PPUSH
78333: CALL_OW 478
78337: ST_TO_ADDR
// if not weapons then
78338: LD_VAR 0 9
78342: NOT
78343: IFFALSE 78347
// continue ;
78345: GO 78320
// if weapon in weapons then
78347: LD_VAR 0 8
78351: PUSH
78352: LD_VAR 0 9
78356: IN
78357: IFFALSE 78384
// begin result := [ i , weapon ] ;
78359: LD_ADDR_VAR 0 3
78363: PUSH
78364: LD_VAR 0 4
78368: PUSH
78369: LD_VAR 0 8
78373: PUSH
78374: EMPTY
78375: LIST
78376: LIST
78377: ST_TO_ADDR
// exit ;
78378: POP
78379: POP
78380: POP
78381: POP
78382: GO 78392
// end ; end ;
78384: GO 78320
78386: POP
78387: POP
// end ;
78388: GO 78206
78390: POP
78391: POP
// end ;
78392: LD_VAR 0 3
78396: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78397: LD_INT 0
78399: PPUSH
// if not side or side > 8 then
78400: LD_VAR 0 3
78404: NOT
78405: PUSH
78406: LD_VAR 0 3
78410: PUSH
78411: LD_INT 8
78413: GREATER
78414: OR
78415: IFFALSE 78419
// exit ;
78417: GO 78478
// if not range then
78419: LD_VAR 0 4
78423: NOT
78424: IFFALSE 78435
// range := - 12 ;
78426: LD_ADDR_VAR 0 4
78430: PUSH
78431: LD_INT 12
78433: NEG
78434: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78435: LD_VAR 0 1
78439: PPUSH
78440: LD_VAR 0 2
78444: PPUSH
78445: LD_VAR 0 3
78449: PPUSH
78450: LD_VAR 0 4
78454: PPUSH
78455: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78459: LD_VAR 0 1
78463: PPUSH
78464: LD_VAR 0 2
78468: PPUSH
78469: LD_VAR 0 3
78473: PPUSH
78474: CALL_OW 331
// end ;
78478: LD_VAR 0 5
78482: RET
// export function Video ( mode ) ; begin
78483: LD_INT 0
78485: PPUSH
// ingame_video = mode ;
78486: LD_ADDR_OWVAR 52
78490: PUSH
78491: LD_VAR 0 1
78495: ST_TO_ADDR
// interface_hidden = mode ;
78496: LD_ADDR_OWVAR 54
78500: PUSH
78501: LD_VAR 0 1
78505: ST_TO_ADDR
// end ;
78506: LD_VAR 0 2
78510: RET
// export function Join ( array , element ) ; begin
78511: LD_INT 0
78513: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78514: LD_ADDR_VAR 0 3
78518: PUSH
78519: LD_VAR 0 1
78523: PPUSH
78524: LD_VAR 0 1
78528: PUSH
78529: LD_INT 1
78531: PLUS
78532: PPUSH
78533: LD_VAR 0 2
78537: PPUSH
78538: CALL_OW 1
78542: ST_TO_ADDR
// end ;
78543: LD_VAR 0 3
78547: RET
// export function JoinUnion ( array , element ) ; begin
78548: LD_INT 0
78550: PPUSH
// result := array union element ;
78551: LD_ADDR_VAR 0 3
78555: PUSH
78556: LD_VAR 0 1
78560: PUSH
78561: LD_VAR 0 2
78565: UNION
78566: ST_TO_ADDR
// end ;
78567: LD_VAR 0 3
78571: RET
// export function GetBehemoths ( side ) ; begin
78572: LD_INT 0
78574: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78575: LD_ADDR_VAR 0 2
78579: PUSH
78580: LD_INT 22
78582: PUSH
78583: LD_VAR 0 1
78587: PUSH
78588: EMPTY
78589: LIST
78590: LIST
78591: PUSH
78592: LD_INT 31
78594: PUSH
78595: LD_INT 25
78597: PUSH
78598: EMPTY
78599: LIST
78600: LIST
78601: PUSH
78602: EMPTY
78603: LIST
78604: LIST
78605: PPUSH
78606: CALL_OW 69
78610: ST_TO_ADDR
// end ;
78611: LD_VAR 0 2
78615: RET
// export function Shuffle ( array ) ; var i , index ; begin
78616: LD_INT 0
78618: PPUSH
78619: PPUSH
78620: PPUSH
// result := [ ] ;
78621: LD_ADDR_VAR 0 2
78625: PUSH
78626: EMPTY
78627: ST_TO_ADDR
// if not array then
78628: LD_VAR 0 1
78632: NOT
78633: IFFALSE 78637
// exit ;
78635: GO 78736
// Randomize ;
78637: CALL_OW 10
// for i = array downto 1 do
78641: LD_ADDR_VAR 0 3
78645: PUSH
78646: DOUBLE
78647: LD_VAR 0 1
78651: INC
78652: ST_TO_ADDR
78653: LD_INT 1
78655: PUSH
78656: FOR_DOWNTO
78657: IFFALSE 78734
// begin index := rand ( 1 , array ) ;
78659: LD_ADDR_VAR 0 4
78663: PUSH
78664: LD_INT 1
78666: PPUSH
78667: LD_VAR 0 1
78671: PPUSH
78672: CALL_OW 12
78676: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78677: LD_ADDR_VAR 0 2
78681: PUSH
78682: LD_VAR 0 2
78686: PPUSH
78687: LD_VAR 0 2
78691: PUSH
78692: LD_INT 1
78694: PLUS
78695: PPUSH
78696: LD_VAR 0 1
78700: PUSH
78701: LD_VAR 0 4
78705: ARRAY
78706: PPUSH
78707: CALL_OW 2
78711: ST_TO_ADDR
// array := Delete ( array , index ) ;
78712: LD_ADDR_VAR 0 1
78716: PUSH
78717: LD_VAR 0 1
78721: PPUSH
78722: LD_VAR 0 4
78726: PPUSH
78727: CALL_OW 3
78731: ST_TO_ADDR
// end ;
78732: GO 78656
78734: POP
78735: POP
// end ;
78736: LD_VAR 0 2
78740: RET
// export function GetBaseMaterials ( base ) ; begin
78741: LD_INT 0
78743: PPUSH
// result := [ 0 , 0 , 0 ] ;
78744: LD_ADDR_VAR 0 2
78748: PUSH
78749: LD_INT 0
78751: PUSH
78752: LD_INT 0
78754: PUSH
78755: LD_INT 0
78757: PUSH
78758: EMPTY
78759: LIST
78760: LIST
78761: LIST
78762: ST_TO_ADDR
// if not base then
78763: LD_VAR 0 1
78767: NOT
78768: IFFALSE 78772
// exit ;
78770: GO 78821
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78772: LD_ADDR_VAR 0 2
78776: PUSH
78777: LD_VAR 0 1
78781: PPUSH
78782: LD_INT 1
78784: PPUSH
78785: CALL_OW 275
78789: PUSH
78790: LD_VAR 0 1
78794: PPUSH
78795: LD_INT 2
78797: PPUSH
78798: CALL_OW 275
78802: PUSH
78803: LD_VAR 0 1
78807: PPUSH
78808: LD_INT 3
78810: PPUSH
78811: CALL_OW 275
78815: PUSH
78816: EMPTY
78817: LIST
78818: LIST
78819: LIST
78820: ST_TO_ADDR
// end ;
78821: LD_VAR 0 2
78825: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78826: LD_INT 0
78828: PPUSH
78829: PPUSH
// result := array ;
78830: LD_ADDR_VAR 0 3
78834: PUSH
78835: LD_VAR 0 1
78839: ST_TO_ADDR
// if size >= result then
78840: LD_VAR 0 2
78844: PUSH
78845: LD_VAR 0 3
78849: GREATEREQUAL
78850: IFFALSE 78854
// exit ;
78852: GO 78904
// if size then
78854: LD_VAR 0 2
78858: IFFALSE 78904
// for i := array downto size do
78860: LD_ADDR_VAR 0 4
78864: PUSH
78865: DOUBLE
78866: LD_VAR 0 1
78870: INC
78871: ST_TO_ADDR
78872: LD_VAR 0 2
78876: PUSH
78877: FOR_DOWNTO
78878: IFFALSE 78902
// result := Delete ( result , result ) ;
78880: LD_ADDR_VAR 0 3
78884: PUSH
78885: LD_VAR 0 3
78889: PPUSH
78890: LD_VAR 0 3
78894: PPUSH
78895: CALL_OW 3
78899: ST_TO_ADDR
78900: GO 78877
78902: POP
78903: POP
// end ;
78904: LD_VAR 0 3
78908: RET
// export function ComExit ( unit ) ; var tmp ; begin
78909: LD_INT 0
78911: PPUSH
78912: PPUSH
// if not IsInUnit ( unit ) then
78913: LD_VAR 0 1
78917: PPUSH
78918: CALL_OW 310
78922: NOT
78923: IFFALSE 78927
// exit ;
78925: GO 78987
// tmp := IsInUnit ( unit ) ;
78927: LD_ADDR_VAR 0 3
78931: PUSH
78932: LD_VAR 0 1
78936: PPUSH
78937: CALL_OW 310
78941: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78942: LD_VAR 0 3
78946: PPUSH
78947: CALL_OW 247
78951: PUSH
78952: LD_INT 2
78954: EQUAL
78955: IFFALSE 78968
// ComExitVehicle ( unit ) else
78957: LD_VAR 0 1
78961: PPUSH
78962: CALL_OW 121
78966: GO 78977
// ComExitBuilding ( unit ) ;
78968: LD_VAR 0 1
78972: PPUSH
78973: CALL_OW 122
// result := tmp ;
78977: LD_ADDR_VAR 0 2
78981: PUSH
78982: LD_VAR 0 3
78986: ST_TO_ADDR
// end ;
78987: LD_VAR 0 2
78991: RET
// export function ComExitAll ( units ) ; var i ; begin
78992: LD_INT 0
78994: PPUSH
78995: PPUSH
// if not units then
78996: LD_VAR 0 1
79000: NOT
79001: IFFALSE 79005
// exit ;
79003: GO 79031
// for i in units do
79005: LD_ADDR_VAR 0 3
79009: PUSH
79010: LD_VAR 0 1
79014: PUSH
79015: FOR_IN
79016: IFFALSE 79029
// ComExit ( i ) ;
79018: LD_VAR 0 3
79022: PPUSH
79023: CALL 78909 0 1
79027: GO 79015
79029: POP
79030: POP
// end ;
79031: LD_VAR 0 2
79035: RET
// export function ResetHc ; begin
79036: LD_INT 0
79038: PPUSH
// InitHc ;
79039: CALL_OW 19
// hc_importance := 0 ;
79043: LD_ADDR_OWVAR 32
79047: PUSH
79048: LD_INT 0
79050: ST_TO_ADDR
// end ;
79051: LD_VAR 0 1
79055: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79056: LD_INT 0
79058: PPUSH
79059: PPUSH
79060: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79061: LD_ADDR_VAR 0 6
79065: PUSH
79066: LD_VAR 0 1
79070: PUSH
79071: LD_VAR 0 3
79075: PLUS
79076: PUSH
79077: LD_INT 2
79079: DIV
79080: ST_TO_ADDR
// if _x < 0 then
79081: LD_VAR 0 6
79085: PUSH
79086: LD_INT 0
79088: LESS
79089: IFFALSE 79106
// _x := _x * - 1 ;
79091: LD_ADDR_VAR 0 6
79095: PUSH
79096: LD_VAR 0 6
79100: PUSH
79101: LD_INT 1
79103: NEG
79104: MUL
79105: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79106: LD_ADDR_VAR 0 7
79110: PUSH
79111: LD_VAR 0 2
79115: PUSH
79116: LD_VAR 0 4
79120: PLUS
79121: PUSH
79122: LD_INT 2
79124: DIV
79125: ST_TO_ADDR
// if _y < 0 then
79126: LD_VAR 0 7
79130: PUSH
79131: LD_INT 0
79133: LESS
79134: IFFALSE 79151
// _y := _y * - 1 ;
79136: LD_ADDR_VAR 0 7
79140: PUSH
79141: LD_VAR 0 7
79145: PUSH
79146: LD_INT 1
79148: NEG
79149: MUL
79150: ST_TO_ADDR
// result := [ _x , _y ] ;
79151: LD_ADDR_VAR 0 5
79155: PUSH
79156: LD_VAR 0 6
79160: PUSH
79161: LD_VAR 0 7
79165: PUSH
79166: EMPTY
79167: LIST
79168: LIST
79169: ST_TO_ADDR
// end ;
79170: LD_VAR 0 5
79174: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79175: LD_INT 0
79177: PPUSH
79178: PPUSH
79179: PPUSH
79180: PPUSH
// task := GetTaskList ( unit ) ;
79181: LD_ADDR_VAR 0 7
79185: PUSH
79186: LD_VAR 0 1
79190: PPUSH
79191: CALL_OW 437
79195: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79196: LD_VAR 0 7
79200: NOT
79201: PUSH
79202: LD_VAR 0 1
79206: PPUSH
79207: LD_VAR 0 2
79211: PPUSH
79212: CALL_OW 308
79216: NOT
79217: AND
79218: IFFALSE 79222
// exit ;
79220: GO 79340
// if IsInArea ( unit , area ) then
79222: LD_VAR 0 1
79226: PPUSH
79227: LD_VAR 0 2
79231: PPUSH
79232: CALL_OW 308
79236: IFFALSE 79254
// begin ComMoveToArea ( unit , goAway ) ;
79238: LD_VAR 0 1
79242: PPUSH
79243: LD_VAR 0 3
79247: PPUSH
79248: CALL_OW 113
// exit ;
79252: GO 79340
// end ; if task [ 1 ] [ 1 ] <> M then
79254: LD_VAR 0 7
79258: PUSH
79259: LD_INT 1
79261: ARRAY
79262: PUSH
79263: LD_INT 1
79265: ARRAY
79266: PUSH
79267: LD_STRING M
79269: NONEQUAL
79270: IFFALSE 79274
// exit ;
79272: GO 79340
// x := task [ 1 ] [ 2 ] ;
79274: LD_ADDR_VAR 0 5
79278: PUSH
79279: LD_VAR 0 7
79283: PUSH
79284: LD_INT 1
79286: ARRAY
79287: PUSH
79288: LD_INT 2
79290: ARRAY
79291: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79292: LD_ADDR_VAR 0 6
79296: PUSH
79297: LD_VAR 0 7
79301: PUSH
79302: LD_INT 1
79304: ARRAY
79305: PUSH
79306: LD_INT 3
79308: ARRAY
79309: ST_TO_ADDR
// if InArea ( x , y , area ) then
79310: LD_VAR 0 5
79314: PPUSH
79315: LD_VAR 0 6
79319: PPUSH
79320: LD_VAR 0 2
79324: PPUSH
79325: CALL_OW 309
79329: IFFALSE 79340
// ComStop ( unit ) ;
79331: LD_VAR 0 1
79335: PPUSH
79336: CALL_OW 141
// end ;
79340: LD_VAR 0 4
79344: RET
// export function Abs ( value ) ; begin
79345: LD_INT 0
79347: PPUSH
// result := value ;
79348: LD_ADDR_VAR 0 2
79352: PUSH
79353: LD_VAR 0 1
79357: ST_TO_ADDR
// if value < 0 then
79358: LD_VAR 0 1
79362: PUSH
79363: LD_INT 0
79365: LESS
79366: IFFALSE 79383
// result := value * - 1 ;
79368: LD_ADDR_VAR 0 2
79372: PUSH
79373: LD_VAR 0 1
79377: PUSH
79378: LD_INT 1
79380: NEG
79381: MUL
79382: ST_TO_ADDR
// end ;
79383: LD_VAR 0 2
79387: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79388: LD_INT 0
79390: PPUSH
79391: PPUSH
79392: PPUSH
79393: PPUSH
79394: PPUSH
79395: PPUSH
79396: PPUSH
79397: PPUSH
// if not unit or not building then
79398: LD_VAR 0 1
79402: NOT
79403: PUSH
79404: LD_VAR 0 2
79408: NOT
79409: OR
79410: IFFALSE 79414
// exit ;
79412: GO 79640
// x := GetX ( building ) ;
79414: LD_ADDR_VAR 0 4
79418: PUSH
79419: LD_VAR 0 2
79423: PPUSH
79424: CALL_OW 250
79428: ST_TO_ADDR
// y := GetY ( building ) ;
79429: LD_ADDR_VAR 0 6
79433: PUSH
79434: LD_VAR 0 2
79438: PPUSH
79439: CALL_OW 251
79443: ST_TO_ADDR
// d := GetDir ( building ) ;
79444: LD_ADDR_VAR 0 8
79448: PUSH
79449: LD_VAR 0 2
79453: PPUSH
79454: CALL_OW 254
79458: ST_TO_ADDR
// r := 4 ;
79459: LD_ADDR_VAR 0 9
79463: PUSH
79464: LD_INT 4
79466: ST_TO_ADDR
// for i := 1 to 5 do
79467: LD_ADDR_VAR 0 10
79471: PUSH
79472: DOUBLE
79473: LD_INT 1
79475: DEC
79476: ST_TO_ADDR
79477: LD_INT 5
79479: PUSH
79480: FOR_TO
79481: IFFALSE 79638
// begin _x := ShiftX ( x , d , r + i ) ;
79483: LD_ADDR_VAR 0 5
79487: PUSH
79488: LD_VAR 0 4
79492: PPUSH
79493: LD_VAR 0 8
79497: PPUSH
79498: LD_VAR 0 9
79502: PUSH
79503: LD_VAR 0 10
79507: PLUS
79508: PPUSH
79509: CALL_OW 272
79513: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79514: LD_ADDR_VAR 0 7
79518: PUSH
79519: LD_VAR 0 6
79523: PPUSH
79524: LD_VAR 0 8
79528: PPUSH
79529: LD_VAR 0 9
79533: PUSH
79534: LD_VAR 0 10
79538: PLUS
79539: PPUSH
79540: CALL_OW 273
79544: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79545: LD_VAR 0 5
79549: PPUSH
79550: LD_VAR 0 7
79554: PPUSH
79555: CALL_OW 488
79559: PUSH
79560: LD_VAR 0 5
79564: PPUSH
79565: LD_VAR 0 7
79569: PPUSH
79570: CALL_OW 428
79574: PPUSH
79575: CALL_OW 247
79579: PUSH
79580: LD_INT 3
79582: PUSH
79583: LD_INT 2
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: IN
79590: NOT
79591: AND
79592: IFFALSE 79636
// begin ComMoveXY ( unit , _x , _y ) ;
79594: LD_VAR 0 1
79598: PPUSH
79599: LD_VAR 0 5
79603: PPUSH
79604: LD_VAR 0 7
79608: PPUSH
79609: CALL_OW 111
// result := [ _x , _y ] ;
79613: LD_ADDR_VAR 0 3
79617: PUSH
79618: LD_VAR 0 5
79622: PUSH
79623: LD_VAR 0 7
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: ST_TO_ADDR
// exit ;
79632: POP
79633: POP
79634: GO 79640
// end ; end ;
79636: GO 79480
79638: POP
79639: POP
// end ;
79640: LD_VAR 0 3
79644: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79645: LD_INT 0
79647: PPUSH
79648: PPUSH
79649: PPUSH
// result := 0 ;
79650: LD_ADDR_VAR 0 3
79654: PUSH
79655: LD_INT 0
79657: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79658: LD_VAR 0 1
79662: PUSH
79663: LD_INT 0
79665: LESS
79666: PUSH
79667: LD_VAR 0 1
79671: PUSH
79672: LD_INT 8
79674: GREATER
79675: OR
79676: PUSH
79677: LD_VAR 0 2
79681: PUSH
79682: LD_INT 0
79684: LESS
79685: OR
79686: PUSH
79687: LD_VAR 0 2
79691: PUSH
79692: LD_INT 8
79694: GREATER
79695: OR
79696: IFFALSE 79700
// exit ;
79698: GO 79775
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79700: LD_ADDR_VAR 0 4
79704: PUSH
79705: LD_INT 22
79707: PUSH
79708: LD_VAR 0 2
79712: PUSH
79713: EMPTY
79714: LIST
79715: LIST
79716: PPUSH
79717: CALL_OW 69
79721: PUSH
79722: FOR_IN
79723: IFFALSE 79773
// begin un := UnitShoot ( i ) ;
79725: LD_ADDR_VAR 0 5
79729: PUSH
79730: LD_VAR 0 4
79734: PPUSH
79735: CALL_OW 504
79739: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79740: LD_VAR 0 5
79744: PPUSH
79745: CALL_OW 255
79749: PUSH
79750: LD_VAR 0 1
79754: EQUAL
79755: IFFALSE 79771
// begin result := un ;
79757: LD_ADDR_VAR 0 3
79761: PUSH
79762: LD_VAR 0 5
79766: ST_TO_ADDR
// exit ;
79767: POP
79768: POP
79769: GO 79775
// end ; end ;
79771: GO 79722
79773: POP
79774: POP
// end ;
79775: LD_VAR 0 3
79779: RET
// export function GetCargoBay ( units ) ; begin
79780: LD_INT 0
79782: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79783: LD_ADDR_VAR 0 2
79787: PUSH
79788: LD_VAR 0 1
79792: PPUSH
79793: LD_INT 2
79795: PUSH
79796: LD_INT 34
79798: PUSH
79799: LD_INT 12
79801: PUSH
79802: EMPTY
79803: LIST
79804: LIST
79805: PUSH
79806: LD_INT 34
79808: PUSH
79809: LD_INT 51
79811: PUSH
79812: EMPTY
79813: LIST
79814: LIST
79815: PUSH
79816: LD_INT 34
79818: PUSH
79819: LD_INT 32
79821: PUSH
79822: EMPTY
79823: LIST
79824: LIST
79825: PUSH
79826: LD_INT 34
79828: PUSH
79829: LD_INT 89
79831: PUSH
79832: EMPTY
79833: LIST
79834: LIST
79835: PUSH
79836: EMPTY
79837: LIST
79838: LIST
79839: LIST
79840: LIST
79841: LIST
79842: PPUSH
79843: CALL_OW 72
79847: ST_TO_ADDR
// end ;
79848: LD_VAR 0 2
79852: RET
// export function Negate ( value ) ; begin
79853: LD_INT 0
79855: PPUSH
// result := not value ;
79856: LD_ADDR_VAR 0 2
79860: PUSH
79861: LD_VAR 0 1
79865: NOT
79866: ST_TO_ADDR
// end ;
79867: LD_VAR 0 2
79871: RET
// export function Inc ( value ) ; begin
79872: LD_INT 0
79874: PPUSH
// result := value + 1 ;
79875: LD_ADDR_VAR 0 2
79879: PUSH
79880: LD_VAR 0 1
79884: PUSH
79885: LD_INT 1
79887: PLUS
79888: ST_TO_ADDR
// end ;
79889: LD_VAR 0 2
79893: RET
// export function Dec ( value ) ; begin
79894: LD_INT 0
79896: PPUSH
// result := value - 1 ;
79897: LD_ADDR_VAR 0 2
79901: PUSH
79902: LD_VAR 0 1
79906: PUSH
79907: LD_INT 1
79909: MINUS
79910: ST_TO_ADDR
// end ;
79911: LD_VAR 0 2
79915: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79916: LD_INT 0
79918: PPUSH
79919: PPUSH
79920: PPUSH
79921: PPUSH
79922: PPUSH
79923: PPUSH
79924: PPUSH
79925: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79926: LD_VAR 0 1
79930: PPUSH
79931: LD_VAR 0 2
79935: PPUSH
79936: CALL_OW 488
79940: NOT
79941: PUSH
79942: LD_VAR 0 3
79946: PPUSH
79947: LD_VAR 0 4
79951: PPUSH
79952: CALL_OW 488
79956: NOT
79957: OR
79958: IFFALSE 79971
// begin result := - 1 ;
79960: LD_ADDR_VAR 0 5
79964: PUSH
79965: LD_INT 1
79967: NEG
79968: ST_TO_ADDR
// exit ;
79969: GO 80206
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79971: LD_ADDR_VAR 0 12
79975: PUSH
79976: LD_VAR 0 1
79980: PPUSH
79981: LD_VAR 0 2
79985: PPUSH
79986: LD_VAR 0 3
79990: PPUSH
79991: LD_VAR 0 4
79995: PPUSH
79996: CALL 79056 0 4
80000: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80001: LD_ADDR_VAR 0 11
80005: PUSH
80006: LD_VAR 0 1
80010: PPUSH
80011: LD_VAR 0 2
80015: PPUSH
80016: LD_VAR 0 12
80020: PUSH
80021: LD_INT 1
80023: ARRAY
80024: PPUSH
80025: LD_VAR 0 12
80029: PUSH
80030: LD_INT 2
80032: ARRAY
80033: PPUSH
80034: CALL_OW 298
80038: ST_TO_ADDR
// distance := 9999 ;
80039: LD_ADDR_VAR 0 10
80043: PUSH
80044: LD_INT 9999
80046: ST_TO_ADDR
// for i := 0 to 5 do
80047: LD_ADDR_VAR 0 6
80051: PUSH
80052: DOUBLE
80053: LD_INT 0
80055: DEC
80056: ST_TO_ADDR
80057: LD_INT 5
80059: PUSH
80060: FOR_TO
80061: IFFALSE 80204
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80063: LD_ADDR_VAR 0 7
80067: PUSH
80068: LD_VAR 0 1
80072: PPUSH
80073: LD_VAR 0 6
80077: PPUSH
80078: LD_VAR 0 11
80082: PPUSH
80083: CALL_OW 272
80087: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80088: LD_ADDR_VAR 0 8
80092: PUSH
80093: LD_VAR 0 2
80097: PPUSH
80098: LD_VAR 0 6
80102: PPUSH
80103: LD_VAR 0 11
80107: PPUSH
80108: CALL_OW 273
80112: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80113: LD_VAR 0 7
80117: PPUSH
80118: LD_VAR 0 8
80122: PPUSH
80123: CALL_OW 488
80127: NOT
80128: IFFALSE 80132
// continue ;
80130: GO 80060
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80132: LD_ADDR_VAR 0 9
80136: PUSH
80137: LD_VAR 0 12
80141: PUSH
80142: LD_INT 1
80144: ARRAY
80145: PPUSH
80146: LD_VAR 0 12
80150: PUSH
80151: LD_INT 2
80153: ARRAY
80154: PPUSH
80155: LD_VAR 0 7
80159: PPUSH
80160: LD_VAR 0 8
80164: PPUSH
80165: CALL_OW 298
80169: ST_TO_ADDR
// if tmp < distance then
80170: LD_VAR 0 9
80174: PUSH
80175: LD_VAR 0 10
80179: LESS
80180: IFFALSE 80202
// begin result := i ;
80182: LD_ADDR_VAR 0 5
80186: PUSH
80187: LD_VAR 0 6
80191: ST_TO_ADDR
// distance := tmp ;
80192: LD_ADDR_VAR 0 10
80196: PUSH
80197: LD_VAR 0 9
80201: ST_TO_ADDR
// end ; end ;
80202: GO 80060
80204: POP
80205: POP
// end ;
80206: LD_VAR 0 5
80210: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80211: LD_INT 0
80213: PPUSH
80214: PPUSH
// if not driver or not IsInUnit ( driver ) then
80215: LD_VAR 0 1
80219: NOT
80220: PUSH
80221: LD_VAR 0 1
80225: PPUSH
80226: CALL_OW 310
80230: NOT
80231: OR
80232: IFFALSE 80236
// exit ;
80234: GO 80326
// vehicle := IsInUnit ( driver ) ;
80236: LD_ADDR_VAR 0 3
80240: PUSH
80241: LD_VAR 0 1
80245: PPUSH
80246: CALL_OW 310
80250: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80251: LD_VAR 0 1
80255: PPUSH
80256: LD_STRING \
80258: PUSH
80259: LD_INT 0
80261: PUSH
80262: LD_INT 0
80264: PUSH
80265: LD_INT 0
80267: PUSH
80268: LD_INT 0
80270: PUSH
80271: LD_INT 0
80273: PUSH
80274: LD_INT 0
80276: PUSH
80277: EMPTY
80278: LIST
80279: LIST
80280: LIST
80281: LIST
80282: LIST
80283: LIST
80284: LIST
80285: PUSH
80286: LD_STRING E
80288: PUSH
80289: LD_INT 0
80291: PUSH
80292: LD_INT 0
80294: PUSH
80295: LD_VAR 0 3
80299: PUSH
80300: LD_INT 0
80302: PUSH
80303: LD_INT 0
80305: PUSH
80306: LD_INT 0
80308: PUSH
80309: EMPTY
80310: LIST
80311: LIST
80312: LIST
80313: LIST
80314: LIST
80315: LIST
80316: LIST
80317: PUSH
80318: EMPTY
80319: LIST
80320: LIST
80321: PPUSH
80322: CALL_OW 446
// end ;
80326: LD_VAR 0 2
80330: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80331: LD_INT 0
80333: PPUSH
80334: PPUSH
// if not driver or not IsInUnit ( driver ) then
80335: LD_VAR 0 1
80339: NOT
80340: PUSH
80341: LD_VAR 0 1
80345: PPUSH
80346: CALL_OW 310
80350: NOT
80351: OR
80352: IFFALSE 80356
// exit ;
80354: GO 80446
// vehicle := IsInUnit ( driver ) ;
80356: LD_ADDR_VAR 0 3
80360: PUSH
80361: LD_VAR 0 1
80365: PPUSH
80366: CALL_OW 310
80370: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80371: LD_VAR 0 1
80375: PPUSH
80376: LD_STRING \
80378: PUSH
80379: LD_INT 0
80381: PUSH
80382: LD_INT 0
80384: PUSH
80385: LD_INT 0
80387: PUSH
80388: LD_INT 0
80390: PUSH
80391: LD_INT 0
80393: PUSH
80394: LD_INT 0
80396: PUSH
80397: EMPTY
80398: LIST
80399: LIST
80400: LIST
80401: LIST
80402: LIST
80403: LIST
80404: LIST
80405: PUSH
80406: LD_STRING E
80408: PUSH
80409: LD_INT 0
80411: PUSH
80412: LD_INT 0
80414: PUSH
80415: LD_VAR 0 3
80419: PUSH
80420: LD_INT 0
80422: PUSH
80423: LD_INT 0
80425: PUSH
80426: LD_INT 0
80428: PUSH
80429: EMPTY
80430: LIST
80431: LIST
80432: LIST
80433: LIST
80434: LIST
80435: LIST
80436: LIST
80437: PUSH
80438: EMPTY
80439: LIST
80440: LIST
80441: PPUSH
80442: CALL_OW 447
// end ;
80446: LD_VAR 0 2
80450: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80451: LD_INT 0
80453: PPUSH
80454: PPUSH
80455: PPUSH
// tmp := [ ] ;
80456: LD_ADDR_VAR 0 5
80460: PUSH
80461: EMPTY
80462: ST_TO_ADDR
// for i in units do
80463: LD_ADDR_VAR 0 4
80467: PUSH
80468: LD_VAR 0 1
80472: PUSH
80473: FOR_IN
80474: IFFALSE 80512
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80476: LD_ADDR_VAR 0 5
80480: PUSH
80481: LD_VAR 0 5
80485: PPUSH
80486: LD_VAR 0 5
80490: PUSH
80491: LD_INT 1
80493: PLUS
80494: PPUSH
80495: LD_VAR 0 4
80499: PPUSH
80500: CALL_OW 256
80504: PPUSH
80505: CALL_OW 2
80509: ST_TO_ADDR
80510: GO 80473
80512: POP
80513: POP
// if not tmp then
80514: LD_VAR 0 5
80518: NOT
80519: IFFALSE 80523
// exit ;
80521: GO 80571
// if asc then
80523: LD_VAR 0 2
80527: IFFALSE 80551
// result := SortListByListAsc ( units , tmp ) else
80529: LD_ADDR_VAR 0 3
80533: PUSH
80534: LD_VAR 0 1
80538: PPUSH
80539: LD_VAR 0 5
80543: PPUSH
80544: CALL_OW 76
80548: ST_TO_ADDR
80549: GO 80571
// result := SortListByListDesc ( units , tmp ) ;
80551: LD_ADDR_VAR 0 3
80555: PUSH
80556: LD_VAR 0 1
80560: PPUSH
80561: LD_VAR 0 5
80565: PPUSH
80566: CALL_OW 77
80570: ST_TO_ADDR
// end ;
80571: LD_VAR 0 3
80575: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80576: LD_INT 0
80578: PPUSH
80579: PPUSH
// task := GetTaskList ( mech ) ;
80580: LD_ADDR_VAR 0 4
80584: PUSH
80585: LD_VAR 0 1
80589: PPUSH
80590: CALL_OW 437
80594: ST_TO_ADDR
// if not task then
80595: LD_VAR 0 4
80599: NOT
80600: IFFALSE 80604
// exit ;
80602: GO 80646
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80604: LD_ADDR_VAR 0 3
80608: PUSH
80609: LD_VAR 0 4
80613: PUSH
80614: LD_INT 1
80616: ARRAY
80617: PUSH
80618: LD_INT 1
80620: ARRAY
80621: PUSH
80622: LD_STRING r
80624: EQUAL
80625: PUSH
80626: LD_VAR 0 4
80630: PUSH
80631: LD_INT 1
80633: ARRAY
80634: PUSH
80635: LD_INT 4
80637: ARRAY
80638: PUSH
80639: LD_VAR 0 2
80643: EQUAL
80644: AND
80645: ST_TO_ADDR
// end ;
80646: LD_VAR 0 3
80650: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80651: LD_INT 0
80653: PPUSH
// SetDir ( unit , d ) ;
80654: LD_VAR 0 1
80658: PPUSH
80659: LD_VAR 0 4
80663: PPUSH
80664: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80668: LD_VAR 0 1
80672: PPUSH
80673: LD_VAR 0 2
80677: PPUSH
80678: LD_VAR 0 3
80682: PPUSH
80683: LD_VAR 0 5
80687: PPUSH
80688: CALL_OW 48
// end ;
80692: LD_VAR 0 6
80696: RET
// export function ToNaturalNumber ( number ) ; begin
80697: LD_INT 0
80699: PPUSH
// result := number div 1 ;
80700: LD_ADDR_VAR 0 2
80704: PUSH
80705: LD_VAR 0 1
80709: PUSH
80710: LD_INT 1
80712: DIV
80713: ST_TO_ADDR
// if number < 0 then
80714: LD_VAR 0 1
80718: PUSH
80719: LD_INT 0
80721: LESS
80722: IFFALSE 80732
// result := 0 ;
80724: LD_ADDR_VAR 0 2
80728: PUSH
80729: LD_INT 0
80731: ST_TO_ADDR
// end ;
80732: LD_VAR 0 2
80736: RET
// export function SortByClass ( units , class ) ; var un ; begin
80737: LD_INT 0
80739: PPUSH
80740: PPUSH
// if not units or not class then
80741: LD_VAR 0 1
80745: NOT
80746: PUSH
80747: LD_VAR 0 2
80751: NOT
80752: OR
80753: IFFALSE 80757
// exit ;
80755: GO 80852
// result := [ ] ;
80757: LD_ADDR_VAR 0 3
80761: PUSH
80762: EMPTY
80763: ST_TO_ADDR
// for un in units do
80764: LD_ADDR_VAR 0 4
80768: PUSH
80769: LD_VAR 0 1
80773: PUSH
80774: FOR_IN
80775: IFFALSE 80850
// if GetClass ( un ) = class then
80777: LD_VAR 0 4
80781: PPUSH
80782: CALL_OW 257
80786: PUSH
80787: LD_VAR 0 2
80791: EQUAL
80792: IFFALSE 80819
// result := Insert ( result , 1 , un ) else
80794: LD_ADDR_VAR 0 3
80798: PUSH
80799: LD_VAR 0 3
80803: PPUSH
80804: LD_INT 1
80806: PPUSH
80807: LD_VAR 0 4
80811: PPUSH
80812: CALL_OW 2
80816: ST_TO_ADDR
80817: GO 80848
// result := Replace ( result , result + 1 , un ) ;
80819: LD_ADDR_VAR 0 3
80823: PUSH
80824: LD_VAR 0 3
80828: PPUSH
80829: LD_VAR 0 3
80833: PUSH
80834: LD_INT 1
80836: PLUS
80837: PPUSH
80838: LD_VAR 0 4
80842: PPUSH
80843: CALL_OW 1
80847: ST_TO_ADDR
80848: GO 80774
80850: POP
80851: POP
// end ;
80852: LD_VAR 0 3
80856: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80857: LD_INT 0
80859: PPUSH
80860: PPUSH
80861: PPUSH
80862: PPUSH
80863: PPUSH
80864: PPUSH
80865: PPUSH
// result := [ ] ;
80866: LD_ADDR_VAR 0 4
80870: PUSH
80871: EMPTY
80872: ST_TO_ADDR
// if x - r < 0 then
80873: LD_VAR 0 1
80877: PUSH
80878: LD_VAR 0 3
80882: MINUS
80883: PUSH
80884: LD_INT 0
80886: LESS
80887: IFFALSE 80899
// min_x := 0 else
80889: LD_ADDR_VAR 0 8
80893: PUSH
80894: LD_INT 0
80896: ST_TO_ADDR
80897: GO 80915
// min_x := x - r ;
80899: LD_ADDR_VAR 0 8
80903: PUSH
80904: LD_VAR 0 1
80908: PUSH
80909: LD_VAR 0 3
80913: MINUS
80914: ST_TO_ADDR
// if y - r < 0 then
80915: LD_VAR 0 2
80919: PUSH
80920: LD_VAR 0 3
80924: MINUS
80925: PUSH
80926: LD_INT 0
80928: LESS
80929: IFFALSE 80941
// min_y := 0 else
80931: LD_ADDR_VAR 0 7
80935: PUSH
80936: LD_INT 0
80938: ST_TO_ADDR
80939: GO 80957
// min_y := y - r ;
80941: LD_ADDR_VAR 0 7
80945: PUSH
80946: LD_VAR 0 2
80950: PUSH
80951: LD_VAR 0 3
80955: MINUS
80956: ST_TO_ADDR
// max_x := x + r ;
80957: LD_ADDR_VAR 0 9
80961: PUSH
80962: LD_VAR 0 1
80966: PUSH
80967: LD_VAR 0 3
80971: PLUS
80972: ST_TO_ADDR
// max_y := y + r ;
80973: LD_ADDR_VAR 0 10
80977: PUSH
80978: LD_VAR 0 2
80982: PUSH
80983: LD_VAR 0 3
80987: PLUS
80988: ST_TO_ADDR
// for _x = min_x to max_x do
80989: LD_ADDR_VAR 0 5
80993: PUSH
80994: DOUBLE
80995: LD_VAR 0 8
80999: DEC
81000: ST_TO_ADDR
81001: LD_VAR 0 9
81005: PUSH
81006: FOR_TO
81007: IFFALSE 81108
// for _y = min_y to max_y do
81009: LD_ADDR_VAR 0 6
81013: PUSH
81014: DOUBLE
81015: LD_VAR 0 7
81019: DEC
81020: ST_TO_ADDR
81021: LD_VAR 0 10
81025: PUSH
81026: FOR_TO
81027: IFFALSE 81104
// begin if not ValidHex ( _x , _y ) then
81029: LD_VAR 0 5
81033: PPUSH
81034: LD_VAR 0 6
81038: PPUSH
81039: CALL_OW 488
81043: NOT
81044: IFFALSE 81048
// continue ;
81046: GO 81026
// if GetResourceTypeXY ( _x , _y ) then
81048: LD_VAR 0 5
81052: PPUSH
81053: LD_VAR 0 6
81057: PPUSH
81058: CALL_OW 283
81062: IFFALSE 81102
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81064: LD_ADDR_VAR 0 4
81068: PUSH
81069: LD_VAR 0 4
81073: PPUSH
81074: LD_VAR 0 4
81078: PUSH
81079: LD_INT 1
81081: PLUS
81082: PPUSH
81083: LD_VAR 0 5
81087: PUSH
81088: LD_VAR 0 6
81092: PUSH
81093: EMPTY
81094: LIST
81095: LIST
81096: PPUSH
81097: CALL_OW 1
81101: ST_TO_ADDR
// end ;
81102: GO 81026
81104: POP
81105: POP
81106: GO 81006
81108: POP
81109: POP
// end ;
81110: LD_VAR 0 4
81114: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81115: LD_INT 0
81117: PPUSH
81118: PPUSH
81119: PPUSH
81120: PPUSH
81121: PPUSH
81122: PPUSH
81123: PPUSH
81124: PPUSH
// if not units then
81125: LD_VAR 0 1
81129: NOT
81130: IFFALSE 81134
// exit ;
81132: GO 81658
// result := UnitFilter ( units , [ f_ok ] ) ;
81134: LD_ADDR_VAR 0 3
81138: PUSH
81139: LD_VAR 0 1
81143: PPUSH
81144: LD_INT 50
81146: PUSH
81147: EMPTY
81148: LIST
81149: PPUSH
81150: CALL_OW 72
81154: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81155: LD_ADDR_VAR 0 8
81159: PUSH
81160: LD_VAR 0 1
81164: PUSH
81165: LD_INT 1
81167: ARRAY
81168: PPUSH
81169: CALL_OW 255
81173: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81174: LD_ADDR_VAR 0 10
81178: PUSH
81179: LD_INT 29
81181: PUSH
81182: LD_INT 91
81184: PUSH
81185: LD_INT 49
81187: PUSH
81188: EMPTY
81189: LIST
81190: LIST
81191: LIST
81192: ST_TO_ADDR
// if not result then
81193: LD_VAR 0 3
81197: NOT
81198: IFFALSE 81202
// exit ;
81200: GO 81658
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81202: LD_ADDR_VAR 0 5
81206: PUSH
81207: LD_INT 81
81209: PUSH
81210: LD_VAR 0 8
81214: PUSH
81215: EMPTY
81216: LIST
81217: LIST
81218: PPUSH
81219: CALL_OW 69
81223: ST_TO_ADDR
// for i in result do
81224: LD_ADDR_VAR 0 4
81228: PUSH
81229: LD_VAR 0 3
81233: PUSH
81234: FOR_IN
81235: IFFALSE 81656
// begin tag := GetTag ( i ) + 1 ;
81237: LD_ADDR_VAR 0 9
81241: PUSH
81242: LD_VAR 0 4
81246: PPUSH
81247: CALL_OW 110
81251: PUSH
81252: LD_INT 1
81254: PLUS
81255: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81256: LD_ADDR_VAR 0 7
81260: PUSH
81261: LD_VAR 0 4
81265: PPUSH
81266: CALL_OW 250
81270: PPUSH
81271: LD_VAR 0 4
81275: PPUSH
81276: CALL_OW 251
81280: PPUSH
81281: LD_INT 6
81283: PPUSH
81284: CALL 80857 0 3
81288: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81289: LD_VAR 0 4
81293: PPUSH
81294: CALL_OW 247
81298: PUSH
81299: LD_INT 2
81301: EQUAL
81302: PUSH
81303: LD_VAR 0 7
81307: AND
81308: PUSH
81309: LD_VAR 0 4
81313: PPUSH
81314: CALL_OW 264
81318: PUSH
81319: LD_VAR 0 10
81323: IN
81324: NOT
81325: AND
81326: IFFALSE 81365
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81328: LD_VAR 0 4
81332: PPUSH
81333: LD_VAR 0 7
81337: PUSH
81338: LD_INT 1
81340: ARRAY
81341: PUSH
81342: LD_INT 1
81344: ARRAY
81345: PPUSH
81346: LD_VAR 0 7
81350: PUSH
81351: LD_INT 1
81353: ARRAY
81354: PUSH
81355: LD_INT 2
81357: ARRAY
81358: PPUSH
81359: CALL_OW 116
81363: GO 81654
// if path > tag then
81365: LD_VAR 0 2
81369: PUSH
81370: LD_VAR 0 9
81374: GREATER
81375: IFFALSE 81583
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81377: LD_ADDR_VAR 0 6
81381: PUSH
81382: LD_VAR 0 5
81386: PPUSH
81387: LD_INT 91
81389: PUSH
81390: LD_VAR 0 4
81394: PUSH
81395: LD_INT 8
81397: PUSH
81398: EMPTY
81399: LIST
81400: LIST
81401: LIST
81402: PPUSH
81403: CALL_OW 72
81407: ST_TO_ADDR
// if nearEnemy then
81408: LD_VAR 0 6
81412: IFFALSE 81481
// begin if GetWeapon ( i ) = ru_time_lapser then
81414: LD_VAR 0 4
81418: PPUSH
81419: CALL_OW 264
81423: PUSH
81424: LD_INT 49
81426: EQUAL
81427: IFFALSE 81455
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81429: LD_VAR 0 4
81433: PPUSH
81434: LD_VAR 0 6
81438: PPUSH
81439: LD_VAR 0 4
81443: PPUSH
81444: CALL_OW 74
81448: PPUSH
81449: CALL_OW 112
81453: GO 81479
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81455: LD_VAR 0 4
81459: PPUSH
81460: LD_VAR 0 6
81464: PPUSH
81465: LD_VAR 0 4
81469: PPUSH
81470: CALL_OW 74
81474: PPUSH
81475: CALL 82583 0 2
// end else
81479: GO 81581
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81481: LD_VAR 0 4
81485: PPUSH
81486: LD_VAR 0 2
81490: PUSH
81491: LD_VAR 0 9
81495: ARRAY
81496: PUSH
81497: LD_INT 1
81499: ARRAY
81500: PPUSH
81501: LD_VAR 0 2
81505: PUSH
81506: LD_VAR 0 9
81510: ARRAY
81511: PUSH
81512: LD_INT 2
81514: ARRAY
81515: PPUSH
81516: CALL_OW 297
81520: PUSH
81521: LD_INT 6
81523: GREATER
81524: IFFALSE 81567
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81526: LD_VAR 0 4
81530: PPUSH
81531: LD_VAR 0 2
81535: PUSH
81536: LD_VAR 0 9
81540: ARRAY
81541: PUSH
81542: LD_INT 1
81544: ARRAY
81545: PPUSH
81546: LD_VAR 0 2
81550: PUSH
81551: LD_VAR 0 9
81555: ARRAY
81556: PUSH
81557: LD_INT 2
81559: ARRAY
81560: PPUSH
81561: CALL_OW 114
81565: GO 81581
// SetTag ( i , tag ) ;
81567: LD_VAR 0 4
81571: PPUSH
81572: LD_VAR 0 9
81576: PPUSH
81577: CALL_OW 109
// end else
81581: GO 81654
// if enemy then
81583: LD_VAR 0 5
81587: IFFALSE 81654
// begin if GetWeapon ( i ) = ru_time_lapser then
81589: LD_VAR 0 4
81593: PPUSH
81594: CALL_OW 264
81598: PUSH
81599: LD_INT 49
81601: EQUAL
81602: IFFALSE 81630
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81604: LD_VAR 0 4
81608: PPUSH
81609: LD_VAR 0 5
81613: PPUSH
81614: LD_VAR 0 4
81618: PPUSH
81619: CALL_OW 74
81623: PPUSH
81624: CALL_OW 112
81628: GO 81654
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81630: LD_VAR 0 4
81634: PPUSH
81635: LD_VAR 0 5
81639: PPUSH
81640: LD_VAR 0 4
81644: PPUSH
81645: CALL_OW 74
81649: PPUSH
81650: CALL 82583 0 2
// end ; end ;
81654: GO 81234
81656: POP
81657: POP
// end ;
81658: LD_VAR 0 3
81662: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81663: LD_INT 0
81665: PPUSH
81666: PPUSH
81667: PPUSH
// if not unit or IsInUnit ( unit ) then
81668: LD_VAR 0 1
81672: NOT
81673: PUSH
81674: LD_VAR 0 1
81678: PPUSH
81679: CALL_OW 310
81683: OR
81684: IFFALSE 81688
// exit ;
81686: GO 81779
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81688: LD_ADDR_VAR 0 4
81692: PUSH
81693: LD_VAR 0 1
81697: PPUSH
81698: CALL_OW 250
81702: PPUSH
81703: LD_VAR 0 2
81707: PPUSH
81708: LD_INT 1
81710: PPUSH
81711: CALL_OW 272
81715: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81716: LD_ADDR_VAR 0 5
81720: PUSH
81721: LD_VAR 0 1
81725: PPUSH
81726: CALL_OW 251
81730: PPUSH
81731: LD_VAR 0 2
81735: PPUSH
81736: LD_INT 1
81738: PPUSH
81739: CALL_OW 273
81743: ST_TO_ADDR
// if ValidHex ( x , y ) then
81744: LD_VAR 0 4
81748: PPUSH
81749: LD_VAR 0 5
81753: PPUSH
81754: CALL_OW 488
81758: IFFALSE 81779
// ComTurnXY ( unit , x , y ) ;
81760: LD_VAR 0 1
81764: PPUSH
81765: LD_VAR 0 4
81769: PPUSH
81770: LD_VAR 0 5
81774: PPUSH
81775: CALL_OW 118
// end ;
81779: LD_VAR 0 3
81783: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81784: LD_INT 0
81786: PPUSH
81787: PPUSH
// result := false ;
81788: LD_ADDR_VAR 0 3
81792: PUSH
81793: LD_INT 0
81795: ST_TO_ADDR
// if not units then
81796: LD_VAR 0 2
81800: NOT
81801: IFFALSE 81805
// exit ;
81803: GO 81850
// for i in units do
81805: LD_ADDR_VAR 0 4
81809: PUSH
81810: LD_VAR 0 2
81814: PUSH
81815: FOR_IN
81816: IFFALSE 81848
// if See ( side , i ) then
81818: LD_VAR 0 1
81822: PPUSH
81823: LD_VAR 0 4
81827: PPUSH
81828: CALL_OW 292
81832: IFFALSE 81846
// begin result := true ;
81834: LD_ADDR_VAR 0 3
81838: PUSH
81839: LD_INT 1
81841: ST_TO_ADDR
// exit ;
81842: POP
81843: POP
81844: GO 81850
// end ;
81846: GO 81815
81848: POP
81849: POP
// end ;
81850: LD_VAR 0 3
81854: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81855: LD_INT 0
81857: PPUSH
81858: PPUSH
81859: PPUSH
81860: PPUSH
// if not unit or not points then
81861: LD_VAR 0 1
81865: NOT
81866: PUSH
81867: LD_VAR 0 2
81871: NOT
81872: OR
81873: IFFALSE 81877
// exit ;
81875: GO 81967
// dist := 99999 ;
81877: LD_ADDR_VAR 0 5
81881: PUSH
81882: LD_INT 99999
81884: ST_TO_ADDR
// for i in points do
81885: LD_ADDR_VAR 0 4
81889: PUSH
81890: LD_VAR 0 2
81894: PUSH
81895: FOR_IN
81896: IFFALSE 81965
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81898: LD_ADDR_VAR 0 6
81902: PUSH
81903: LD_VAR 0 1
81907: PPUSH
81908: LD_VAR 0 4
81912: PUSH
81913: LD_INT 1
81915: ARRAY
81916: PPUSH
81917: LD_VAR 0 4
81921: PUSH
81922: LD_INT 2
81924: ARRAY
81925: PPUSH
81926: CALL_OW 297
81930: ST_TO_ADDR
// if tmpDist < dist then
81931: LD_VAR 0 6
81935: PUSH
81936: LD_VAR 0 5
81940: LESS
81941: IFFALSE 81963
// begin result := i ;
81943: LD_ADDR_VAR 0 3
81947: PUSH
81948: LD_VAR 0 4
81952: ST_TO_ADDR
// dist := tmpDist ;
81953: LD_ADDR_VAR 0 5
81957: PUSH
81958: LD_VAR 0 6
81962: ST_TO_ADDR
// end ; end ;
81963: GO 81895
81965: POP
81966: POP
// end ;
81967: LD_VAR 0 3
81971: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81972: LD_INT 0
81974: PPUSH
// uc_side := side ;
81975: LD_ADDR_OWVAR 20
81979: PUSH
81980: LD_VAR 0 1
81984: ST_TO_ADDR
// uc_nation := 3 ;
81985: LD_ADDR_OWVAR 21
81989: PUSH
81990: LD_INT 3
81992: ST_TO_ADDR
// vc_chassis := 25 ;
81993: LD_ADDR_OWVAR 37
81997: PUSH
81998: LD_INT 25
82000: ST_TO_ADDR
// vc_engine := engine_siberite ;
82001: LD_ADDR_OWVAR 39
82005: PUSH
82006: LD_INT 3
82008: ST_TO_ADDR
// vc_control := control_computer ;
82009: LD_ADDR_OWVAR 38
82013: PUSH
82014: LD_INT 3
82016: ST_TO_ADDR
// vc_weapon := 59 ;
82017: LD_ADDR_OWVAR 40
82021: PUSH
82022: LD_INT 59
82024: ST_TO_ADDR
// result := CreateVehicle ;
82025: LD_ADDR_VAR 0 5
82029: PUSH
82030: CALL_OW 45
82034: ST_TO_ADDR
// SetDir ( result , d ) ;
82035: LD_VAR 0 5
82039: PPUSH
82040: LD_VAR 0 4
82044: PPUSH
82045: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82049: LD_VAR 0 5
82053: PPUSH
82054: LD_VAR 0 2
82058: PPUSH
82059: LD_VAR 0 3
82063: PPUSH
82064: LD_INT 0
82066: PPUSH
82067: CALL_OW 48
// end ;
82071: LD_VAR 0 5
82075: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82076: LD_INT 0
82078: PPUSH
82079: PPUSH
82080: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82081: LD_ADDR_VAR 0 2
82085: PUSH
82086: LD_INT 0
82088: PUSH
82089: LD_INT 0
82091: PUSH
82092: LD_INT 0
82094: PUSH
82095: LD_INT 0
82097: PUSH
82098: EMPTY
82099: LIST
82100: LIST
82101: LIST
82102: LIST
82103: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82104: LD_VAR 0 1
82108: NOT
82109: PUSH
82110: LD_VAR 0 1
82114: PPUSH
82115: CALL_OW 264
82119: PUSH
82120: LD_INT 12
82122: PUSH
82123: LD_INT 51
82125: PUSH
82126: LD_INT 32
82128: PUSH
82129: LD_INT 89
82131: PUSH
82132: EMPTY
82133: LIST
82134: LIST
82135: LIST
82136: LIST
82137: IN
82138: NOT
82139: OR
82140: IFFALSE 82144
// exit ;
82142: GO 82242
// for i := 1 to 3 do
82144: LD_ADDR_VAR 0 3
82148: PUSH
82149: DOUBLE
82150: LD_INT 1
82152: DEC
82153: ST_TO_ADDR
82154: LD_INT 3
82156: PUSH
82157: FOR_TO
82158: IFFALSE 82240
// begin tmp := GetCargo ( cargo , i ) ;
82160: LD_ADDR_VAR 0 4
82164: PUSH
82165: LD_VAR 0 1
82169: PPUSH
82170: LD_VAR 0 3
82174: PPUSH
82175: CALL_OW 289
82179: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82180: LD_ADDR_VAR 0 2
82184: PUSH
82185: LD_VAR 0 2
82189: PPUSH
82190: LD_VAR 0 3
82194: PPUSH
82195: LD_VAR 0 4
82199: PPUSH
82200: CALL_OW 1
82204: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82205: LD_ADDR_VAR 0 2
82209: PUSH
82210: LD_VAR 0 2
82214: PPUSH
82215: LD_INT 4
82217: PPUSH
82218: LD_VAR 0 2
82222: PUSH
82223: LD_INT 4
82225: ARRAY
82226: PUSH
82227: LD_VAR 0 4
82231: PLUS
82232: PPUSH
82233: CALL_OW 1
82237: ST_TO_ADDR
// end ;
82238: GO 82157
82240: POP
82241: POP
// end ;
82242: LD_VAR 0 2
82246: RET
// export function Length ( array ) ; begin
82247: LD_INT 0
82249: PPUSH
// result := array + 0 ;
82250: LD_ADDR_VAR 0 2
82254: PUSH
82255: LD_VAR 0 1
82259: PUSH
82260: LD_INT 0
82262: PLUS
82263: ST_TO_ADDR
// end ;
82264: LD_VAR 0 2
82268: RET
// export function PrepareArray ( array ) ; begin
82269: LD_INT 0
82271: PPUSH
// result := array diff 0 ;
82272: LD_ADDR_VAR 0 2
82276: PUSH
82277: LD_VAR 0 1
82281: PUSH
82282: LD_INT 0
82284: DIFF
82285: ST_TO_ADDR
// if not result [ 1 ] then
82286: LD_VAR 0 2
82290: PUSH
82291: LD_INT 1
82293: ARRAY
82294: NOT
82295: IFFALSE 82315
// result := Delete ( result , 1 ) ;
82297: LD_ADDR_VAR 0 2
82301: PUSH
82302: LD_VAR 0 2
82306: PPUSH
82307: LD_INT 1
82309: PPUSH
82310: CALL_OW 3
82314: ST_TO_ADDR
// end ;
82315: LD_VAR 0 2
82319: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82320: LD_INT 0
82322: PPUSH
82323: PPUSH
82324: PPUSH
82325: PPUSH
// sibRocketRange := 25 ;
82326: LD_ADDR_VAR 0 6
82330: PUSH
82331: LD_INT 25
82333: ST_TO_ADDR
// result := false ;
82334: LD_ADDR_VAR 0 4
82338: PUSH
82339: LD_INT 0
82341: ST_TO_ADDR
// for i := 0 to 5 do
82342: LD_ADDR_VAR 0 5
82346: PUSH
82347: DOUBLE
82348: LD_INT 0
82350: DEC
82351: ST_TO_ADDR
82352: LD_INT 5
82354: PUSH
82355: FOR_TO
82356: IFFALSE 82423
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82358: LD_VAR 0 1
82362: PPUSH
82363: LD_VAR 0 5
82367: PPUSH
82368: LD_VAR 0 6
82372: PPUSH
82373: CALL_OW 272
82377: PPUSH
82378: LD_VAR 0 2
82382: PPUSH
82383: LD_VAR 0 5
82387: PPUSH
82388: LD_VAR 0 6
82392: PPUSH
82393: CALL_OW 273
82397: PPUSH
82398: LD_VAR 0 3
82402: PPUSH
82403: CALL_OW 309
82407: IFFALSE 82421
// begin result := true ;
82409: LD_ADDR_VAR 0 4
82413: PUSH
82414: LD_INT 1
82416: ST_TO_ADDR
// exit ;
82417: POP
82418: POP
82419: GO 82425
// end ;
82421: GO 82355
82423: POP
82424: POP
// end ;
82425: LD_VAR 0 4
82429: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82430: LD_INT 0
82432: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82433: LD_VAR 0 1
82437: PPUSH
82438: LD_VAR 0 2
82442: PPUSH
82443: LD_INT 0
82445: PPUSH
82446: LD_INT 0
82448: PPUSH
82449: LD_INT 1
82451: PPUSH
82452: LD_INT 0
82454: PPUSH
82455: CALL_OW 587
// end ;
82459: LD_VAR 0 3
82463: RET
// export function CenterOnNow ( unit ) ; begin
82464: LD_INT 0
82466: PPUSH
// result := IsInUnit ( unit ) ;
82467: LD_ADDR_VAR 0 2
82471: PUSH
82472: LD_VAR 0 1
82476: PPUSH
82477: CALL_OW 310
82481: ST_TO_ADDR
// if not result then
82482: LD_VAR 0 2
82486: NOT
82487: IFFALSE 82499
// result := unit ;
82489: LD_ADDR_VAR 0 2
82493: PUSH
82494: LD_VAR 0 1
82498: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82499: LD_VAR 0 1
82503: PPUSH
82504: CALL_OW 87
// end ;
82508: LD_VAR 0 2
82512: RET
// export function ComMoveHex ( unit , hex ) ; begin
82513: LD_INT 0
82515: PPUSH
// if not hex then
82516: LD_VAR 0 2
82520: NOT
82521: IFFALSE 82525
// exit ;
82523: GO 82578
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82525: LD_VAR 0 2
82529: PUSH
82530: LD_INT 1
82532: ARRAY
82533: PPUSH
82534: LD_VAR 0 2
82538: PUSH
82539: LD_INT 2
82541: ARRAY
82542: PPUSH
82543: CALL_OW 428
82547: IFFALSE 82551
// exit ;
82549: GO 82578
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82551: LD_VAR 0 1
82555: PPUSH
82556: LD_VAR 0 2
82560: PUSH
82561: LD_INT 1
82563: ARRAY
82564: PPUSH
82565: LD_VAR 0 2
82569: PUSH
82570: LD_INT 2
82572: ARRAY
82573: PPUSH
82574: CALL_OW 111
// end ;
82578: LD_VAR 0 3
82582: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82583: LD_INT 0
82585: PPUSH
82586: PPUSH
82587: PPUSH
// if not unit or not enemy then
82588: LD_VAR 0 1
82592: NOT
82593: PUSH
82594: LD_VAR 0 2
82598: NOT
82599: OR
82600: IFFALSE 82604
// exit ;
82602: GO 82728
// x := GetX ( enemy ) ;
82604: LD_ADDR_VAR 0 4
82608: PUSH
82609: LD_VAR 0 2
82613: PPUSH
82614: CALL_OW 250
82618: ST_TO_ADDR
// y := GetY ( enemy ) ;
82619: LD_ADDR_VAR 0 5
82623: PUSH
82624: LD_VAR 0 2
82628: PPUSH
82629: CALL_OW 251
82633: ST_TO_ADDR
// if ValidHex ( x , y ) then
82634: LD_VAR 0 4
82638: PPUSH
82639: LD_VAR 0 5
82643: PPUSH
82644: CALL_OW 488
82648: IFFALSE 82728
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82650: LD_VAR 0 2
82654: PPUSH
82655: CALL_OW 247
82659: PUSH
82660: LD_INT 3
82662: PUSH
82663: LD_INT 2
82665: PUSH
82666: EMPTY
82667: LIST
82668: LIST
82669: IN
82670: PUSH
82671: LD_VAR 0 1
82675: PPUSH
82676: CALL_OW 255
82680: PPUSH
82681: LD_VAR 0 2
82685: PPUSH
82686: CALL_OW 292
82690: OR
82691: IFFALSE 82709
// ComAttackUnit ( unit , enemy ) else
82693: LD_VAR 0 1
82697: PPUSH
82698: LD_VAR 0 2
82702: PPUSH
82703: CALL_OW 115
82707: GO 82728
// ComAgressiveMove ( unit , x , y ) ;
82709: LD_VAR 0 1
82713: PPUSH
82714: LD_VAR 0 4
82718: PPUSH
82719: LD_VAR 0 5
82723: PPUSH
82724: CALL_OW 114
// end ;
82728: LD_VAR 0 3
82732: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82733: LD_INT 0
82735: PPUSH
82736: PPUSH
82737: PPUSH
// list := AreaToList ( area , 0 ) ;
82738: LD_ADDR_VAR 0 5
82742: PUSH
82743: LD_VAR 0 1
82747: PPUSH
82748: LD_INT 0
82750: PPUSH
82751: CALL_OW 517
82755: ST_TO_ADDR
// if not list then
82756: LD_VAR 0 5
82760: NOT
82761: IFFALSE 82765
// exit ;
82763: GO 82895
// if all then
82765: LD_VAR 0 2
82769: IFFALSE 82857
// begin for i := 1 to list [ 1 ] do
82771: LD_ADDR_VAR 0 4
82775: PUSH
82776: DOUBLE
82777: LD_INT 1
82779: DEC
82780: ST_TO_ADDR
82781: LD_VAR 0 5
82785: PUSH
82786: LD_INT 1
82788: ARRAY
82789: PUSH
82790: FOR_TO
82791: IFFALSE 82853
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82793: LD_ADDR_VAR 0 3
82797: PUSH
82798: LD_VAR 0 3
82802: PPUSH
82803: LD_VAR 0 3
82807: PUSH
82808: LD_INT 1
82810: PLUS
82811: PPUSH
82812: LD_VAR 0 5
82816: PUSH
82817: LD_INT 1
82819: ARRAY
82820: PUSH
82821: LD_VAR 0 4
82825: ARRAY
82826: PUSH
82827: LD_VAR 0 5
82831: PUSH
82832: LD_INT 2
82834: ARRAY
82835: PUSH
82836: LD_VAR 0 4
82840: ARRAY
82841: PUSH
82842: EMPTY
82843: LIST
82844: LIST
82845: PPUSH
82846: CALL_OW 1
82850: ST_TO_ADDR
82851: GO 82790
82853: POP
82854: POP
// exit ;
82855: GO 82895
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82857: LD_ADDR_VAR 0 3
82861: PUSH
82862: LD_VAR 0 5
82866: PUSH
82867: LD_INT 1
82869: ARRAY
82870: PUSH
82871: LD_INT 1
82873: ARRAY
82874: PUSH
82875: LD_VAR 0 5
82879: PUSH
82880: LD_INT 2
82882: ARRAY
82883: PUSH
82884: LD_INT 1
82886: ARRAY
82887: PUSH
82888: EMPTY
82889: LIST
82890: LIST
82891: PUSH
82892: EMPTY
82893: LIST
82894: ST_TO_ADDR
// end ;
82895: LD_VAR 0 3
82899: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82900: LD_INT 0
82902: PPUSH
82903: PPUSH
// list := AreaToList ( area , 0 ) ;
82904: LD_ADDR_VAR 0 4
82908: PUSH
82909: LD_VAR 0 1
82913: PPUSH
82914: LD_INT 0
82916: PPUSH
82917: CALL_OW 517
82921: ST_TO_ADDR
// if not list then
82922: LD_VAR 0 4
82926: NOT
82927: IFFALSE 82931
// exit ;
82929: GO 82972
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82931: LD_ADDR_VAR 0 3
82935: PUSH
82936: LD_VAR 0 4
82940: PUSH
82941: LD_INT 1
82943: ARRAY
82944: PUSH
82945: LD_INT 1
82947: ARRAY
82948: PUSH
82949: LD_VAR 0 4
82953: PUSH
82954: LD_INT 2
82956: ARRAY
82957: PUSH
82958: LD_INT 1
82960: ARRAY
82961: PUSH
82962: LD_VAR 0 2
82966: PUSH
82967: EMPTY
82968: LIST
82969: LIST
82970: LIST
82971: ST_TO_ADDR
// end ;
82972: LD_VAR 0 3
82976: RET
// export function First ( array ) ; begin
82977: LD_INT 0
82979: PPUSH
// if not array then
82980: LD_VAR 0 1
82984: NOT
82985: IFFALSE 82989
// exit ;
82987: GO 83003
// result := array [ 1 ] ;
82989: LD_ADDR_VAR 0 2
82993: PUSH
82994: LD_VAR 0 1
82998: PUSH
82999: LD_INT 1
83001: ARRAY
83002: ST_TO_ADDR
// end ;
83003: LD_VAR 0 2
83007: RET
// export function Last ( array ) ; begin
83008: LD_INT 0
83010: PPUSH
// if not array then
83011: LD_VAR 0 1
83015: NOT
83016: IFFALSE 83020
// exit ;
83018: GO 83036
// result := array [ array ] ;
83020: LD_ADDR_VAR 0 2
83024: PUSH
83025: LD_VAR 0 1
83029: PUSH
83030: LD_VAR 0 1
83034: ARRAY
83035: ST_TO_ADDR
// end ;
83036: LD_VAR 0 2
83040: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83041: LD_INT 0
83043: PPUSH
83044: PPUSH
// result := [ ] ;
83045: LD_ADDR_VAR 0 5
83049: PUSH
83050: EMPTY
83051: ST_TO_ADDR
// if not array then
83052: LD_VAR 0 1
83056: NOT
83057: IFFALSE 83061
// exit ;
83059: GO 83173
// for i := 1 to array do
83061: LD_ADDR_VAR 0 6
83065: PUSH
83066: DOUBLE
83067: LD_INT 1
83069: DEC
83070: ST_TO_ADDR
83071: LD_VAR 0 1
83075: PUSH
83076: FOR_TO
83077: IFFALSE 83171
// if array [ i ] [ index ] = value then
83079: LD_VAR 0 1
83083: PUSH
83084: LD_VAR 0 6
83088: ARRAY
83089: PUSH
83090: LD_VAR 0 2
83094: ARRAY
83095: PUSH
83096: LD_VAR 0 3
83100: EQUAL
83101: IFFALSE 83169
// begin if indexColumn then
83103: LD_VAR 0 4
83107: IFFALSE 83143
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83109: LD_ADDR_VAR 0 5
83113: PUSH
83114: LD_VAR 0 5
83118: PPUSH
83119: LD_VAR 0 1
83123: PUSH
83124: LD_VAR 0 6
83128: ARRAY
83129: PUSH
83130: LD_VAR 0 4
83134: ARRAY
83135: PPUSH
83136: CALL 78511 0 2
83140: ST_TO_ADDR
83141: GO 83169
// result := Join ( result , array [ i ] ) ;
83143: LD_ADDR_VAR 0 5
83147: PUSH
83148: LD_VAR 0 5
83152: PPUSH
83153: LD_VAR 0 1
83157: PUSH
83158: LD_VAR 0 6
83162: ARRAY
83163: PPUSH
83164: CALL 78511 0 2
83168: ST_TO_ADDR
// end ;
83169: GO 83076
83171: POP
83172: POP
// end ;
83173: LD_VAR 0 5
83177: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83178: LD_INT 0
83180: PPUSH
83181: PPUSH
83182: PPUSH
// if btype = b_depot then
83183: LD_VAR 0 2
83187: PUSH
83188: LD_INT 0
83190: EQUAL
83191: IFFALSE 83203
// begin result := true ;
83193: LD_ADDR_VAR 0 3
83197: PUSH
83198: LD_INT 1
83200: ST_TO_ADDR
// exit ;
83201: GO 83319
// end ; pom := GetBase ( depot ) ;
83203: LD_ADDR_VAR 0 4
83207: PUSH
83208: LD_VAR 0 1
83212: PPUSH
83213: CALL_OW 274
83217: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83218: LD_ADDR_VAR 0 5
83222: PUSH
83223: LD_VAR 0 2
83227: PPUSH
83228: LD_VAR 0 1
83232: PPUSH
83233: CALL_OW 248
83237: PPUSH
83238: CALL_OW 450
83242: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83243: LD_ADDR_VAR 0 3
83247: PUSH
83248: LD_VAR 0 4
83252: PPUSH
83253: LD_INT 1
83255: PPUSH
83256: CALL_OW 275
83260: PUSH
83261: LD_VAR 0 5
83265: PUSH
83266: LD_INT 1
83268: ARRAY
83269: GREATEREQUAL
83270: PUSH
83271: LD_VAR 0 4
83275: PPUSH
83276: LD_INT 2
83278: PPUSH
83279: CALL_OW 275
83283: PUSH
83284: LD_VAR 0 5
83288: PUSH
83289: LD_INT 2
83291: ARRAY
83292: GREATEREQUAL
83293: AND
83294: PUSH
83295: LD_VAR 0 4
83299: PPUSH
83300: LD_INT 3
83302: PPUSH
83303: CALL_OW 275
83307: PUSH
83308: LD_VAR 0 5
83312: PUSH
83313: LD_INT 3
83315: ARRAY
83316: GREATEREQUAL
83317: AND
83318: ST_TO_ADDR
// end ;
83319: LD_VAR 0 3
83323: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83324: LD_INT 0
83326: PPUSH
// if not vehicles or not parkingPoint then
83327: LD_VAR 0 1
83331: NOT
83332: PUSH
83333: LD_VAR 0 2
83337: NOT
83338: OR
83339: IFFALSE 83343
// exit ;
83341: GO 83441
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83343: LD_ADDR_VAR 0 1
83347: PUSH
83348: LD_VAR 0 1
83352: PPUSH
83353: LD_INT 50
83355: PUSH
83356: EMPTY
83357: LIST
83358: PUSH
83359: LD_INT 3
83361: PUSH
83362: LD_INT 92
83364: PUSH
83365: LD_VAR 0 2
83369: PUSH
83370: LD_INT 1
83372: ARRAY
83373: PUSH
83374: LD_VAR 0 2
83378: PUSH
83379: LD_INT 2
83381: ARRAY
83382: PUSH
83383: LD_INT 8
83385: PUSH
83386: EMPTY
83387: LIST
83388: LIST
83389: LIST
83390: LIST
83391: PUSH
83392: EMPTY
83393: LIST
83394: LIST
83395: PUSH
83396: EMPTY
83397: LIST
83398: LIST
83399: PPUSH
83400: CALL_OW 72
83404: ST_TO_ADDR
// if not vehicles then
83405: LD_VAR 0 1
83409: NOT
83410: IFFALSE 83414
// exit ;
83412: GO 83441
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83414: LD_VAR 0 1
83418: PPUSH
83419: LD_VAR 0 2
83423: PUSH
83424: LD_INT 1
83426: ARRAY
83427: PPUSH
83428: LD_VAR 0 2
83432: PUSH
83433: LD_INT 2
83435: ARRAY
83436: PPUSH
83437: CALL_OW 111
// end ;
83441: LD_VAR 0 3
83445: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83446: LD_INT 0
83448: PPUSH
83449: PPUSH
83450: PPUSH
// if not side or not area then
83451: LD_VAR 0 1
83455: NOT
83456: PUSH
83457: LD_VAR 0 2
83461: NOT
83462: OR
83463: IFFALSE 83467
// exit ;
83465: GO 83586
// tmp := AreaToList ( area , 0 ) ;
83467: LD_ADDR_VAR 0 5
83471: PUSH
83472: LD_VAR 0 2
83476: PPUSH
83477: LD_INT 0
83479: PPUSH
83480: CALL_OW 517
83484: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83485: LD_ADDR_VAR 0 4
83489: PUSH
83490: DOUBLE
83491: LD_INT 1
83493: DEC
83494: ST_TO_ADDR
83495: LD_VAR 0 5
83499: PUSH
83500: LD_INT 1
83502: ARRAY
83503: PUSH
83504: FOR_TO
83505: IFFALSE 83584
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83507: LD_VAR 0 5
83511: PUSH
83512: LD_INT 1
83514: ARRAY
83515: PUSH
83516: LD_VAR 0 4
83520: ARRAY
83521: PPUSH
83522: LD_VAR 0 5
83526: PUSH
83527: LD_INT 2
83529: ARRAY
83530: PUSH
83531: LD_VAR 0 4
83535: ARRAY
83536: PPUSH
83537: CALL_OW 351
83541: IFFALSE 83582
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83543: LD_VAR 0 5
83547: PUSH
83548: LD_INT 1
83550: ARRAY
83551: PUSH
83552: LD_VAR 0 4
83556: ARRAY
83557: PPUSH
83558: LD_VAR 0 5
83562: PUSH
83563: LD_INT 2
83565: ARRAY
83566: PUSH
83567: LD_VAR 0 4
83571: ARRAY
83572: PPUSH
83573: LD_VAR 0 1
83577: PPUSH
83578: CALL_OW 244
// end ;
83582: GO 83504
83584: POP
83585: POP
// end ; end_of_file
83586: LD_VAR 0 3
83590: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83591: LD_VAR 0 1
83595: PUSH
83596: LD_INT 200
83598: DOUBLE
83599: GREATEREQUAL
83600: IFFALSE 83608
83602: LD_INT 299
83604: DOUBLE
83605: LESSEQUAL
83606: IFTRUE 83610
83608: GO 83642
83610: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83611: LD_VAR 0 1
83615: PPUSH
83616: LD_VAR 0 2
83620: PPUSH
83621: LD_VAR 0 3
83625: PPUSH
83626: LD_VAR 0 4
83630: PPUSH
83631: LD_VAR 0 5
83635: PPUSH
83636: CALL 36302 0 5
83640: GO 83719
83642: LD_INT 300
83644: DOUBLE
83645: GREATEREQUAL
83646: IFFALSE 83654
83648: LD_INT 399
83650: DOUBLE
83651: LESSEQUAL
83652: IFTRUE 83656
83654: GO 83718
83656: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83657: LD_VAR 0 1
83661: PPUSH
83662: LD_VAR 0 2
83666: PPUSH
83667: LD_VAR 0 3
83671: PPUSH
83672: LD_VAR 0 4
83676: PPUSH
83677: LD_VAR 0 5
83681: PPUSH
83682: LD_VAR 0 6
83686: PPUSH
83687: LD_VAR 0 7
83691: PPUSH
83692: LD_VAR 0 8
83696: PPUSH
83697: LD_VAR 0 9
83701: PPUSH
83702: LD_VAR 0 10
83706: PPUSH
83707: LD_VAR 0 11
83711: PPUSH
83712: CALL 32627 0 11
83716: GO 83719
83718: POP
// end ;
83719: PPOPN 11
83721: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83722: LD_VAR 0 1
83726: PPUSH
83727: LD_VAR 0 2
83731: PPUSH
83732: LD_VAR 0 3
83736: PPUSH
83737: LD_VAR 0 4
83741: PPUSH
83742: LD_VAR 0 5
83746: PPUSH
83747: CALL 36038 0 5
// end ; end_of_file
83751: PPOPN 5
83753: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83754: LD_VAR 0 1
83758: PPUSH
83759: LD_VAR 0 2
83763: PPUSH
83764: LD_VAR 0 3
83768: PPUSH
83769: LD_VAR 0 4
83773: PPUSH
83774: LD_VAR 0 5
83778: PPUSH
83779: LD_VAR 0 6
83783: PPUSH
83784: CALL 20279 0 6
// end ;
83788: PPOPN 6
83790: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83791: LD_INT 0
83793: PPUSH
// begin if not units then
83794: LD_VAR 0 1
83798: NOT
83799: IFFALSE 83803
// exit ;
83801: GO 83803
// end ;
83803: PPOPN 7
83805: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83806: CALL 20166 0 0
// end ;
83810: PPOPN 1
83812: END
