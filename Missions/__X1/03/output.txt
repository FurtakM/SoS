// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 630 0 0
// PrepareArabian ;
  12: CALL 1065 0 0
// PrepareAmerican ;
  16: CALL 4126 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9096 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: LD_INT 42000
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 182: LD_ADDR_EXP 20
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 190: LD_ADDR_EXP 18
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// attackWave := 1 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 9 , 10 ] [ Difficulty ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 6
 213: PUSH
 214: LD_INT 8
 216: PUSH
 217: LD_INT 9
 219: PUSH
 220: LD_INT 10
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: PUSH
 229: LD_OWVAR 67
 233: ARRAY
 234: ST_TO_ADDR
// vehCounter := 0 ;
 235: LD_ADDR_EXP 22
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// convoyCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimInDepot := false ;
 251: LD_ADDR_EXP 25
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimIsFree := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 16
 274: PUSH
 275: LD_INT 16
 277: PUSH
 278: LD_INT 15
 280: PUSH
 281: LD_INT 14
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: LIST
 289: PUSH
 290: LD_OWVAR 67
 294: ARRAY
 295: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 296: LD_ADDR_EXP 13
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// allowCargoEvacuation := false ;
 304: LD_ADDR_EXP 7
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// americanStartRun := false ;
 312: LD_ADDR_EXP 14
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// end ; end_of_file
 320: LD_VAR 0 1
 324: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 325: LD_INT 0
 327: PPUSH
// uc_side := side ;
 328: LD_ADDR_OWVAR 20
 332: PUSH
 333: LD_VAR 0 1
 337: ST_TO_ADDR
// uc_nation := nation ;
 338: LD_ADDR_OWVAR 21
 342: PUSH
 343: LD_VAR 0 2
 347: ST_TO_ADDR
// vc_chassis := chassis ;
 348: LD_ADDR_OWVAR 37
 352: PUSH
 353: LD_VAR 0 3
 357: ST_TO_ADDR
// vc_engine := engine ;
 358: LD_ADDR_OWVAR 39
 362: PUSH
 363: LD_VAR 0 4
 367: ST_TO_ADDR
// vc_control := control ;
 368: LD_ADDR_OWVAR 38
 372: PUSH
 373: LD_VAR 0 5
 377: ST_TO_ADDR
// vc_weapon := weapon ;
 378: LD_ADDR_OWVAR 40
 382: PUSH
 383: LD_VAR 0 6
 387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 388: LD_ADDR_OWVAR 41
 392: PUSH
 393: LD_VAR 0 7
 397: ST_TO_ADDR
// result := CreateVehicle ;
 398: LD_ADDR_VAR 0 8
 402: PUSH
 403: CALL_OW 45
 407: ST_TO_ADDR
// end ;
 408: LD_VAR 0 8
 412: RET
// export function SayX ( units , ident ) ; var i ; begin
 413: LD_INT 0
 415: PPUSH
 416: PPUSH
// result := false ;
 417: LD_ADDR_VAR 0 3
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// if not units then
 425: LD_VAR 0 1
 429: NOT
 430: IFFALSE 434
// exit ;
 432: GO 488
// for i in units do
 434: LD_ADDR_VAR 0 4
 438: PUSH
 439: LD_VAR 0 1
 443: PUSH
 444: FOR_IN
 445: IFFALSE 486
// if IsOk ( i ) then
 447: LD_VAR 0 4
 451: PPUSH
 452: CALL_OW 302
 456: IFFALSE 484
// begin Say ( i , ident ) ;
 458: LD_VAR 0 4
 462: PPUSH
 463: LD_VAR 0 2
 467: PPUSH
 468: CALL_OW 88
// result := i ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// break ;
 482: GO 486
// end ;
 484: GO 444
 486: POP
 487: POP
// end ;
 488: LD_VAR 0 3
 492: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 493: LD_INT 0
 495: PPUSH
 496: PPUSH
// InitUc ;
 497: CALL_OW 18
// InitHc ;
 501: CALL_OW 19
// uc_side := 0 ;
 505: LD_ADDR_OWVAR 20
 509: PUSH
 510: LD_INT 0
 512: ST_TO_ADDR
// uc_nation := 0 ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_INT 0
 520: ST_TO_ADDR
// for i = 1 to amount do
 521: LD_ADDR_VAR 0 4
 525: PUSH
 526: DOUBLE
 527: LD_INT 1
 529: DEC
 530: ST_TO_ADDR
 531: LD_VAR 0 2
 535: PUSH
 536: FOR_TO
 537: IFFALSE 619
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 539: LD_ADDR_OWVAR 29
 543: PUSH
 544: LD_INT 9
 546: PPUSH
 547: LD_INT 12
 549: PPUSH
 550: CALL_OW 12
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 570: LD_ADDR_OWVAR 35
 574: PUSH
 575: LD_INT 1
 577: NEG
 578: PPUSH
 579: LD_INT 1
 581: PPUSH
 582: CALL_OW 12
 586: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 587: LD_INT 0
 589: PPUSH
 590: LD_INT 12
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 600: CALL_OW 44
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 49
// end ;
 617: GO 536
 619: POP
 620: POP
// InitHc ;
 621: CALL_OW 19
// end ;
 625: LD_VAR 0 3
 629: RET
// export function CreateNature ; var i ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 634: LD_INT 2
 636: PPUSH
 637: LD_INT 5
 639: PUSH
 640: LD_INT 4
 642: PUSH
 643: LD_INT 4
 645: PUSH
 646: LD_INT 3
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: PUSH
 655: LD_OWVAR 67
 659: ARRAY
 660: PPUSH
 661: CALL 493 0 2
// for i := 1 to 2 do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_INT 2
 677: PUSH
 678: FOR_TO
 679: IFFALSE 714
// begin hc_class := 21 ;
 681: LD_ADDR_OWVAR 28
 685: PUSH
 686: LD_INT 21
 688: ST_TO_ADDR
// hc_gallery :=  ;
 689: LD_ADDR_OWVAR 33
 693: PUSH
 694: LD_STRING 
 696: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 697: CALL_OW 44
 701: PPUSH
 702: LD_INT 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// end ;
 712: GO 678
 714: POP
 715: POP
// for i := 1 to 2 do
 716: LD_ADDR_VAR 0 2
 720: PUSH
 721: DOUBLE
 722: LD_INT 1
 724: DEC
 725: ST_TO_ADDR
 726: LD_INT 2
 728: PUSH
 729: FOR_TO
 730: IFFALSE 765
// begin hc_class := 18 ;
 732: LD_ADDR_OWVAR 28
 736: PUSH
 737: LD_INT 18
 739: ST_TO_ADDR
// hc_gallery :=  ;
 740: LD_ADDR_OWVAR 33
 744: PUSH
 745: LD_STRING 
 747: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 748: CALL_OW 44
 752: PPUSH
 753: LD_INT 2
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 49
// end ;
 763: GO 729
 765: POP
 766: POP
// for i := 1 to 2 do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_INT 2
 779: PUSH
 780: FOR_TO
 781: IFFALSE 816
// begin hc_class := 13 ;
 783: LD_ADDR_OWVAR 28
 787: PUSH
 788: LD_INT 13
 790: ST_TO_ADDR
// hc_gallery :=  ;
 791: LD_ADDR_OWVAR 33
 795: PUSH
 796: LD_STRING 
 798: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 799: CALL_OW 44
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end ;
 814: GO 780
 816: POP
 817: POP
// end ;
 818: LD_VAR 0 1
 822: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 823: LD_INT 0
 825: PPUSH
 826: PPUSH
 827: PPUSH
// if not observer or not unit then
 828: LD_VAR 0 1
 832: NOT
 833: PUSH
 834: LD_VAR 0 2
 838: NOT
 839: OR
 840: IFFALSE 844
// exit ;
 842: GO 892
// if not See ( GetSide ( observer ) , unit ) then
 844: LD_VAR 0 1
 848: PPUSH
 849: CALL_OW 255
 853: PPUSH
 854: LD_VAR 0 2
 858: PPUSH
 859: CALL_OW 292
 863: NOT
 864: IFFALSE 868
// exit ;
 866: GO 892
// result := GetDistUnits ( observer , unit ) < 12 ;
 868: LD_ADDR_VAR 0 3
 872: PUSH
 873: LD_VAR 0 1
 877: PPUSH
 878: LD_VAR 0 2
 882: PPUSH
 883: CALL_OW 296
 887: PUSH
 888: LD_INT 12
 890: LESS
 891: ST_TO_ADDR
// end ;
 892: LD_VAR 0 3
 896: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 897: LD_INT 0
 899: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 900: LD_VAR 0 2
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: PPUSH
 909: LD_VAR 0 2
 913: PUSH
 914: LD_INT 2
 916: ARRAY
 917: PPUSH
 918: CALL_OW 488
 922: PUSH
 923: LD_VAR 0 2
 927: PUSH
 928: LD_INT 1
 930: ARRAY
 931: PPUSH
 932: LD_VAR 0 2
 936: PUSH
 937: LD_INT 2
 939: ARRAY
 940: PPUSH
 941: CALL_OW 428
 945: PUSH
 946: LD_INT 0
 948: EQUAL
 949: AND
 950: IFFALSE 984
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 952: LD_VAR 0 1
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PPUSH
 966: LD_VAR 0 2
 970: PUSH
 971: LD_INT 2
 973: ARRAY
 974: PPUSH
 975: LD_VAR 0 3
 979: PPUSH
 980: CALL_OW 48
// end ;
 984: LD_VAR 0 4
 988: RET
// export function ReverseArray ( array ) ; var i ; begin
 989: LD_INT 0
 991: PPUSH
 992: PPUSH
// if not array then
 993: LD_VAR 0 1
 997: NOT
 998: IFFALSE 1002
// exit ;
1000: GO 1060
// result := [ ] ;
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: EMPTY
1008: ST_TO_ADDR
// for i := 1 to array do
1009: LD_ADDR_VAR 0 3
1013: PUSH
1014: DOUBLE
1015: LD_INT 1
1017: DEC
1018: ST_TO_ADDR
1019: LD_VAR 0 1
1023: PUSH
1024: FOR_TO
1025: IFFALSE 1058
// result := Insert ( result , 1 , array [ i ] ) ;
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_VAR 0 2
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_VAR 0 1
1044: PUSH
1045: LD_VAR 0 3
1049: ARRAY
1050: PPUSH
1051: CALL_OW 2
1055: ST_TO_ADDR
1056: GO 1024
1058: POP
1059: POP
// end ; end_of_file
1060: LD_VAR 0 2
1064: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
1069: PPUSH
1070: PPUSH
// uc_side := 5 ;
1071: LD_ADDR_OWVAR 20
1075: PUSH
1076: LD_INT 5
1078: ST_TO_ADDR
// uc_nation := 2 ;
1079: LD_ADDR_OWVAR 21
1083: PUSH
1084: LD_INT 2
1086: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1087: LD_INT 5
1089: PPUSH
1090: CALL_OW 274
1094: PPUSH
1095: LD_INT 1
1097: PPUSH
1098: LD_INT 65
1100: PPUSH
1101: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1105: LD_ADDR_EXP 36
1109: PUSH
1110: LD_STRING Farmer
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 36777 0 3
1123: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1124: LD_ADDR_EXP 37
1128: PUSH
1129: LD_STRING Omar
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: LD_STRING 
1137: PPUSH
1138: CALL 36777 0 3
1142: ST_TO_ADDR
// omarSquad := [ ] ;
1143: LD_ADDR_EXP 40
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// heikeSquad := [ ] ;
1150: LD_ADDR_EXP 41
1154: PUSH
1155: EMPTY
1156: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1157: LD_ADDR_EXP 42
1161: PUSH
1162: EMPTY
1163: ST_TO_ADDR
// omarCargo := [ ] ;
1164: LD_ADDR_EXP 43
1168: PUSH
1169: EMPTY
1170: ST_TO_ADDR
// for i := 1 to 5 do
1171: LD_ADDR_VAR 0 2
1175: PUSH
1176: DOUBLE
1177: LD_INT 1
1179: DEC
1180: ST_TO_ADDR
1181: LD_INT 5
1183: PUSH
1184: FOR_TO
1185: IFFALSE 1343
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1187: LD_INT 0
1189: PPUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 2
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: LD_VAR 0 2
1216: ARRAY
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 380
// un := CreateHuman ;
1225: LD_ADDR_VAR 0 3
1229: PUSH
1230: CALL_OW 44
1234: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1235: LD_ADDR_EXP 40
1239: PUSH
1240: LD_EXP 40
1244: PUSH
1245: LD_VAR 0 3
1249: UNION
1250: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1251: LD_VAR 0 3
1255: PPUSH
1256: LD_INT 87
1258: PUSH
1259: LD_INT 30
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 91
1268: PUSH
1269: LD_INT 32
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 82
1278: PUSH
1279: LD_INT 15
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 79
1288: PUSH
1289: LD_INT 14
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: PUSH
1296: LD_INT 82
1298: PUSH
1299: LD_INT 13
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_VAR 0 2
1317: ARRAY
1318: PPUSH
1319: LD_INT 0
1321: PPUSH
1322: CALL 897 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1326: LD_VAR 0 3
1330: PPUSH
1331: LD_INT 93
1333: PPUSH
1334: LD_INT 21
1336: PPUSH
1337: CALL_OW 118
// end ;
1341: GO 1184
1343: POP
1344: POP
// uc_side := 2 ;
1345: LD_ADDR_OWVAR 20
1349: PUSH
1350: LD_INT 2
1352: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1353: LD_ADDR_EXP 28
1357: PUSH
1358: LD_STRING Heike
1360: PPUSH
1361: LD_EXP 1
1365: NOT
1366: PPUSH
1367: LD_EXP 2
1371: PPUSH
1372: CALL 36777 0 3
1376: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1377: LD_ADDR_EXP 32
1381: PUSH
1382: LD_STRING Aviradze
1384: PPUSH
1385: LD_EXP 1
1389: NOT
1390: PPUSH
1391: LD_EXP 2
1395: PPUSH
1396: CALL 36777 0 3
1400: ST_TO_ADDR
// tmp := [ ] ;
1401: LD_ADDR_VAR 0 4
1405: PUSH
1406: EMPTY
1407: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1408: LD_ADDR_EXP 29
1412: PUSH
1413: LD_STRING Givi
1415: PPUSH
1416: LD_EXP 1
1420: NOT
1421: PPUSH
1422: LD_EXP 2
1426: PPUSH
1427: CALL 36777 0 3
1431: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1432: LD_ADDR_EXP 30
1436: PUSH
1437: LD_STRING Mike
1439: PPUSH
1440: LD_EXP 1
1444: NOT
1445: PPUSH
1446: LD_EXP 2
1450: PPUSH
1451: CALL 36777 0 3
1455: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1456: LD_ADDR_EXP 31
1460: PUSH
1461: LD_STRING Kamil
1463: PPUSH
1464: LD_EXP 1
1468: NOT
1469: PPUSH
1470: LD_EXP 2
1474: PPUSH
1475: CALL 36777 0 3
1479: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1480: LD_ADDR_EXP 33
1484: PUSH
1485: LD_STRING Kaia
1487: PPUSH
1488: LD_EXP 1
1492: NOT
1493: PPUSH
1494: LD_EXP 2
1498: PPUSH
1499: CALL 36777 0 3
1503: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1504: LD_ADDR_EXP 34
1508: PUSH
1509: LD_STRING Sophia
1511: PPUSH
1512: LD_EXP 1
1516: NOT
1517: PPUSH
1518: LD_EXP 2
1522: PPUSH
1523: CALL 36777 0 3
1527: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1528: LD_ADDR_EXP 35
1532: PUSH
1533: LD_STRING Markov
1535: PPUSH
1536: LD_EXP 1
1540: NOT
1541: PPUSH
1542: LD_EXP 2
1546: PPUSH
1547: CALL 36777 0 3
1551: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1552: LD_ADDR_EXP 42
1556: PUSH
1557: LD_STRING 02_others
1559: PPUSH
1560: CALL_OW 31
1564: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_EXP 30
1574: PUSH
1575: LD_EXP 31
1579: PUSH
1580: LD_EXP 33
1584: PUSH
1585: LD_EXP 34
1589: PUSH
1590: LD_EXP 35
1594: PUSH
1595: LD_EXP 29
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: LD_EXP 42
1612: ADD
1613: PUSH
1614: LD_INT 0
1616: DIFF
1617: ST_TO_ADDR
// heikeSquad := tmp ;
1618: LD_ADDR_EXP 41
1622: PUSH
1623: LD_VAR 0 4
1627: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1628: LD_EXP 41
1632: PPUSH
1633: LD_INT 25
1635: PUSH
1636: LD_INT 1
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 72
1647: PUSH
1648: LD_INT 3
1650: LESS
1651: IFFALSE 1701
// begin SetClass ( Kaia , 1 ) ;
1653: LD_EXP 33
1657: PPUSH
1658: LD_INT 1
1660: PPUSH
1661: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1665: LD_EXP 30
1669: PPUSH
1670: LD_INT 1
1672: PPUSH
1673: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1677: LD_EXP 29
1681: PPUSH
1682: LD_INT 1
1684: PPUSH
1685: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1689: LD_EXP 28
1693: PPUSH
1694: LD_INT 1
1696: PPUSH
1697: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1701: LD_ADDR_VAR 0 4
1705: PUSH
1706: LD_VAR 0 4
1710: PUSH
1711: LD_STRING 02_ape
1713: PPUSH
1714: CALL_OW 31
1718: UNION
1719: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1720: LD_EXP 28
1724: PPUSH
1725: LD_INT 92
1727: PPUSH
1728: LD_INT 17
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1738: LD_EXP 36
1742: PPUSH
1743: LD_INT 95
1745: PPUSH
1746: LD_INT 19
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1756: LD_EXP 37
1760: PPUSH
1761: LD_INT 89
1763: PPUSH
1764: LD_INT 25
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1774: LD_EXP 32
1778: PPUSH
1779: LD_INT 92
1781: PPUSH
1782: LD_INT 27
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1792: LD_EXP 37
1796: PPUSH
1797: LD_EXP 32
1801: PPUSH
1802: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1806: LD_EXP 32
1810: PPUSH
1811: LD_EXP 37
1815: PPUSH
1816: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1820: LD_EXP 28
1824: PUSH
1825: LD_EXP 36
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PPUSH
1834: LD_EXP 37
1838: PPUSH
1839: CALL_OW 119
// if tmp then
1843: LD_VAR 0 4
1847: IFFALSE 1901
// for i in tmp do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: LD_VAR 0 4
1858: PUSH
1859: FOR_IN
1860: IFFALSE 1899
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1862: LD_VAR 0 2
1866: PPUSH
1867: LD_INT 94
1869: PPUSH
1870: LD_INT 14
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_EXP 28
1892: PPUSH
1893: CALL_OW 119
// end ;
1897: GO 1859
1899: POP
1900: POP
// farmerSquad := [ ] ;
1901: LD_ADDR_EXP 39
1905: PUSH
1906: EMPTY
1907: ST_TO_ADDR
// uc_side := 5 ;
1908: LD_ADDR_OWVAR 20
1912: PUSH
1913: LD_INT 5
1915: ST_TO_ADDR
// uc_nation := 2 ;
1916: LD_ADDR_OWVAR 21
1920: PUSH
1921: LD_INT 2
1923: ST_TO_ADDR
// for i := 1 to 4 do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_INT 4
1936: PUSH
1937: FOR_TO
1938: IFFALSE 2016
// begin PrepareHuman ( false , 1 , 2 ) ;
1940: LD_INT 0
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_INT 2
1948: PPUSH
1949: CALL_OW 380
// un := CreateHuman ;
1953: LD_ADDR_VAR 0 3
1957: PUSH
1958: CALL_OW 44
1962: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1963: LD_VAR 0 3
1967: PPUSH
1968: LD_INT 102
1970: PPUSH
1971: LD_INT 27
1973: PPUSH
1974: LD_INT 4
1976: PPUSH
1977: LD_INT 0
1979: PPUSH
1980: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1984: LD_ADDR_EXP 39
1988: PUSH
1989: LD_EXP 39
1993: PUSH
1994: LD_VAR 0 3
1998: UNION
1999: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2000: LD_VAR 0 3
2004: PPUSH
2005: LD_EXP 37
2009: PPUSH
2010: CALL_OW 119
// end ;
2014: GO 1937
2016: POP
2017: POP
// for i := 1 to 2 do
2018: LD_ADDR_VAR 0 2
2022: PUSH
2023: DOUBLE
2024: LD_INT 1
2026: DEC
2027: ST_TO_ADDR
2028: LD_INT 2
2030: PUSH
2031: FOR_TO
2032: IFFALSE 2110
// begin PrepareHuman ( false , 2 , 2 ) ;
2034: LD_INT 0
2036: PPUSH
2037: LD_INT 2
2039: PPUSH
2040: LD_INT 2
2042: PPUSH
2043: CALL_OW 380
// un := CreateHuman ;
2047: LD_ADDR_VAR 0 3
2051: PUSH
2052: CALL_OW 44
2056: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2057: LD_VAR 0 3
2061: PPUSH
2062: LD_INT 108
2064: PPUSH
2065: LD_INT 62
2067: PPUSH
2068: LD_INT 2
2070: PPUSH
2071: LD_INT 0
2073: PPUSH
2074: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2078: LD_ADDR_EXP 39
2082: PUSH
2083: LD_EXP 39
2087: PUSH
2088: LD_VAR 0 3
2092: UNION
2093: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2094: LD_VAR 0 3
2098: PPUSH
2099: LD_EXP 37
2103: PPUSH
2104: CALL_OW 119
// end ;
2108: GO 2031
2110: POP
2111: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2112: LD_INT 109
2114: PPUSH
2115: LD_INT 63
2117: PPUSH
2118: LD_INT 2
2120: PPUSH
2121: LD_INT 15
2123: NEG
2124: PPUSH
2125: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2129: LD_INT 109
2131: PPUSH
2132: LD_INT 63
2134: PPUSH
2135: LD_INT 2
2137: PPUSH
2138: CALL_OW 331
// end ;
2142: LD_VAR 0 1
2146: RET
// export function PrepareIbrahim ( x , y ) ; begin
2147: LD_INT 0
2149: PPUSH
// uc_side := 6 ;
2150: LD_ADDR_OWVAR 20
2154: PUSH
2155: LD_INT 6
2157: ST_TO_ADDR
// uc_nation := 3 ;
2158: LD_ADDR_OWVAR 21
2162: PUSH
2163: LD_INT 3
2165: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2166: LD_ADDR_EXP 38
2170: PUSH
2171: LD_STRING IbrahimRu
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: LD_STRING 
2179: PPUSH
2180: CALL 36777 0 3
2184: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2185: LD_EXP 38
2189: PPUSH
2190: LD_VAR 0 1
2194: PPUSH
2195: LD_VAR 0 2
2199: PPUSH
2200: LD_INT 8
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL_OW 50
// end ;
2210: LD_VAR 0 3
2214: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2215: LD_EXP 37
2219: PUSH
2220: LD_EXP 40
2224: ADD
2225: PPUSH
2226: LD_INT 95
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PPUSH
2236: CALL_OW 72
2240: IFFALSE 2296
2242: GO 2244
2244: DISABLE
2245: LD_INT 0
2247: PPUSH
// begin enable ;
2248: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2249: LD_ADDR_VAR 0 1
2253: PUSH
2254: LD_EXP 37
2258: PUSH
2259: LD_EXP 40
2263: ADD
2264: PPUSH
2265: LD_INT 95
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 72
2279: PUSH
2280: FOR_IN
2281: IFFALSE 2294
// RemoveUnit ( i ) ;
2283: LD_VAR 0 1
2287: PPUSH
2288: CALL_OW 64
2292: GO 2280
2294: POP
2295: POP
// end ;
2296: PPOPN 1
2298: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2299: LD_EXP 3
2303: PUSH
2304: LD_EXP 36
2308: PPUSH
2309: LD_INT 4
2311: PPUSH
2312: CALL_OW 308
2316: AND
2317: IFFALSE 3121
2319: GO 2321
2321: DISABLE
2322: LD_INT 0
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2328: LD_EXP 36
2332: PPUSH
2333: LD_INT 110
2335: PPUSH
2336: LD_INT 60
2338: PPUSH
2339: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2343: LD_EXP 36
2347: PPUSH
2348: LD_INT 110
2350: PPUSH
2351: LD_INT 61
2353: PPUSH
2354: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2358: LD_ADDR_VAR 0 2
2362: PUSH
2363: LD_EXP 39
2367: PPUSH
2368: LD_INT 25
2370: PUSH
2371: LD_INT 1
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PPUSH
2378: CALL_OW 72
2382: ST_TO_ADDR
// if tmp then
2383: LD_VAR 0 2
2387: IFFALSE 2481
// begin for i := 1 to 2 do
2389: LD_ADDR_VAR 0 1
2393: PUSH
2394: DOUBLE
2395: LD_INT 1
2397: DEC
2398: ST_TO_ADDR
2399: LD_INT 2
2401: PUSH
2402: FOR_TO
2403: IFFALSE 2479
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2405: LD_VAR 0 2
2409: PUSH
2410: LD_VAR 0 1
2414: ARRAY
2415: PPUSH
2416: LD_INT 5
2418: PPUSH
2419: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 1
2432: ARRAY
2433: PPUSH
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2441: LD_VAR 0 2
2445: PUSH
2446: LD_VAR 0 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2456: LD_VAR 0 2
2460: PUSH
2461: LD_VAR 0 1
2465: ARRAY
2466: PPUSH
2467: LD_INT 107
2469: PPUSH
2470: LD_INT 66
2472: PPUSH
2473: CALL_OW 171
// end ;
2477: GO 2402
2479: POP
2480: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2481: LD_ADDR_VAR 0 2
2485: PUSH
2486: LD_EXP 39
2490: PPUSH
2491: LD_INT 25
2493: PUSH
2494: LD_INT 2
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 72
2505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2506: LD_INT 35
2508: PPUSH
2509: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: LD_EXP 39
2522: PPUSH
2523: LD_INT 25
2525: PUSH
2526: LD_INT 2
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: ST_TO_ADDR
// until tmp ;
2538: LD_VAR 0 2
2542: IFFALSE 2506
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2544: LD_VAR 0 2
2548: PPUSH
2549: LD_INT 31
2551: PPUSH
2552: LD_INT 102
2554: PPUSH
2555: LD_INT 69
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2565: LD_INT 35
2567: PPUSH
2568: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2572: LD_EXP 39
2576: PPUSH
2577: LD_INT 3
2579: PUSH
2580: LD_INT 60
2582: PUSH
2583: EMPTY
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 25
2592: PUSH
2593: LD_INT 2
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 72
2608: IFFALSE 2565
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2610: LD_ADDR_VAR 0 2
2614: PUSH
2615: LD_EXP 39
2619: PPUSH
2620: LD_INT 25
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PPUSH
2630: CALL_OW 72
2634: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2635: LD_VAR 0 2
2639: PPUSH
2640: LD_INT 6
2642: PPUSH
2643: LD_INT 116
2645: PPUSH
2646: LD_INT 55
2648: PPUSH
2649: LD_INT 4
2651: PPUSH
2652: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2656: LD_VAR 0 2
2660: PPUSH
2661: LD_INT 4
2663: PPUSH
2664: LD_INT 116
2666: PPUSH
2667: LD_INT 70
2669: PPUSH
2670: LD_INT 5
2672: PPUSH
2673: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2677: LD_VAR 0 2
2681: PPUSH
2682: LD_INT 31
2684: PPUSH
2685: LD_INT 109
2687: PPUSH
2688: LD_INT 50
2690: PPUSH
2691: LD_INT 2
2693: PPUSH
2694: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2698: LD_INT 35
2700: PPUSH
2701: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2705: LD_INT 22
2707: PUSH
2708: LD_INT 5
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 30
2717: PUSH
2718: LD_INT 4
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 3
2727: PUSH
2728: LD_INT 57
2730: PUSH
2731: EMPTY
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: PPUSH
2743: CALL_OW 69
2747: IFFALSE 2698
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: LD_INT 22
2756: PUSH
2757: LD_INT 5
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 30
2766: PUSH
2767: LD_INT 4
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 3
2776: PUSH
2777: LD_INT 57
2779: PUSH
2780: EMPTY
2781: LIST
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL_OW 69
2796: PUSH
2797: LD_INT 1
2799: ARRAY
2800: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2801: LD_ADDR_VAR 0 2
2805: PUSH
2806: LD_EXP 39
2810: PPUSH
2811: LD_INT 25
2813: PUSH
2814: LD_INT 1
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PPUSH
2821: CALL_OW 72
2825: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2826: LD_VAR 0 2
2830: PPUSH
2831: LD_VAR 0 3
2835: PPUSH
2836: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2840: LD_INT 35
2842: PPUSH
2843: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2847: LD_INT 22
2849: PUSH
2850: LD_INT 5
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 30
2859: PUSH
2860: LD_INT 31
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 3
2869: PUSH
2870: LD_INT 57
2872: PUSH
2873: EMPTY
2874: LIST
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 69
2889: PUSH
2890: LD_INT 2
2892: GREATEREQUAL
2893: IFFALSE 2840
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: LD_EXP 39
2904: PPUSH
2905: LD_INT 25
2907: PUSH
2908: LD_INT 2
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: PPUSH
2915: CALL_OW 72
2919: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2920: LD_VAR 0 2
2924: PUSH
2925: LD_INT 1
2927: ARRAY
2928: PPUSH
2929: LD_INT 5
2931: PPUSH
2932: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 2
2943: ARRAY
2944: PUSH
2945: LD_VAR 0 2
2949: PUSH
2950: LD_INT 3
2952: ARRAY
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: PPUSH
2958: LD_VAR 0 3
2962: PPUSH
2963: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PUSH
2976: LD_VAR 0 2
2980: PUSH
2981: LD_INT 3
2983: ARRAY
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PPUSH
2989: LD_INT 1
2991: PPUSH
2992: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2996: LD_VAR 0 2
3000: PUSH
3001: LD_INT 2
3003: ARRAY
3004: PUSH
3005: LD_VAR 0 2
3009: PUSH
3010: LD_INT 3
3012: ARRAY
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3022: LD_ADDR_VAR 0 4
3026: PUSH
3027: LD_INT 22
3029: PUSH
3030: LD_INT 5
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 30
3039: PUSH
3040: LD_INT 31
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// for i := 1 to 2 do
3056: LD_ADDR_VAR 0 1
3060: PUSH
3061: DOUBLE
3062: LD_INT 1
3064: DEC
3065: ST_TO_ADDR
3066: LD_INT 2
3068: PUSH
3069: FOR_TO
3070: IFFALSE 3104
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3072: LD_VAR 0 2
3076: PUSH
3077: LD_VAR 0 1
3081: PUSH
3082: LD_INT 1
3084: PLUS
3085: ARRAY
3086: PPUSH
3087: LD_VAR 0 4
3091: PUSH
3092: LD_VAR 0 1
3096: ARRAY
3097: PPUSH
3098: CALL_OW 180
3102: GO 3069
3104: POP
3105: POP
// wait ( 1 1$00 ) ;
3106: LD_INT 2100
3108: PPUSH
3109: CALL_OW 67
// farmerBaseReady := true ;
3113: LD_ADDR_EXP 4
3117: PUSH
3118: LD_INT 1
3120: ST_TO_ADDR
// end ;
3121: PPOPN 4
3123: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3124: LD_EXP 4
3128: PUSH
3129: LD_EXP 11
3133: NOT
3134: AND
3135: IFFALSE 3657
3137: GO 3139
3139: DISABLE
3140: LD_INT 0
3142: PPUSH
3143: PPUSH
3144: PPUSH
3145: PPUSH
3146: PPUSH
// begin enable ;
3147: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3148: LD_ADDR_VAR 0 3
3152: PUSH
3153: LD_EXP 39
3157: PPUSH
3158: LD_INT 25
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 72
3172: PUSH
3173: LD_EXP 36
3177: ADD
3178: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: LD_EXP 39
3188: PPUSH
3189: LD_INT 25
3191: PUSH
3192: LD_INT 2
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 72
3203: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3204: LD_ADDR_VAR 0 5
3208: PUSH
3209: LD_INT 22
3211: PUSH
3212: LD_INT 5
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 21
3221: PUSH
3222: LD_INT 3
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 3
3231: PUSH
3232: LD_INT 24
3234: PUSH
3235: LD_INT 1000
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PPUSH
3251: CALL_OW 69
3255: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3256: LD_ADDR_VAR 0 4
3260: PUSH
3261: LD_INT 22
3263: PUSH
3264: LD_INT 5
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 30
3273: PUSH
3274: LD_INT 4
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PPUSH
3285: CALL_OW 69
3289: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3290: LD_VAR 0 4
3294: PUSH
3295: LD_INT 1
3297: ARRAY
3298: PPUSH
3299: CALL_OW 302
3303: IFFALSE 3367
// for i in sol do
3305: LD_ADDR_VAR 0 1
3309: PUSH
3310: LD_VAR 0 3
3314: PUSH
3315: FOR_IN
3316: IFFALSE 3365
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3318: LD_VAR 0 1
3322: PPUSH
3323: CALL_OW 256
3327: PUSH
3328: LD_INT 999
3330: LESS
3331: PUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL_OW 310
3341: NOT
3342: AND
3343: IFFALSE 3363
// ComEnterUnit ( i , arm [ 1 ] ) ;
3345: LD_VAR 0 1
3349: PPUSH
3350: LD_VAR 0 4
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PPUSH
3359: CALL_OW 120
3363: GO 3315
3365: POP
3366: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3367: LD_VAR 0 2
3371: NOT
3372: PUSH
3373: LD_INT 22
3375: PUSH
3376: LD_INT 1
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: LD_INT 21
3385: PUSH
3386: LD_INT 1
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PPUSH
3397: CALL_OW 69
3401: NOT
3402: AND
3403: IFFALSE 3495
// begin uc_side := 5 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 5
3412: ST_TO_ADDR
// uc_nation := 2 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 2
3420: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3421: LD_INT 0
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: LD_INT 2
3429: PPUSH
3430: CALL_OW 380
// eng := CreateHuman ;
3434: LD_ADDR_VAR 0 2
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3444: LD_VAR 0 2
3448: PPUSH
3449: LD_INT 102
3451: PPUSH
3452: LD_INT 8
3454: PPUSH
3455: LD_INT 0
3457: PPUSH
3458: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3462: LD_VAR 0 2
3466: PPUSH
3467: LD_INT 110
3469: PPUSH
3470: LD_INT 60
3472: PPUSH
3473: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3477: LD_ADDR_EXP 39
3481: PUSH
3482: LD_EXP 39
3486: PUSH
3487: LD_VAR 0 2
3491: UNION
3492: ST_TO_ADDR
// end else
3493: GO 3657
// begin for i in eng do
3495: LD_ADDR_VAR 0 1
3499: PUSH
3500: LD_VAR 0 2
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3655
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3508: LD_INT 10
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: CALL_OW 287
3518: IFFALSE 3569
// begin if IsInUnit ( i ) then
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL_OW 310
3529: IFFALSE 3540
// ComExitBuilding ( i ) ;
3531: LD_VAR 0 1
3535: PPUSH
3536: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 10
3547: PPUSH
3548: CALL_OW 308
3552: NOT
3553: IFFALSE 3567
// AddComMoveToArea ( i , collectFarmerArea ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 10
3562: PPUSH
3563: CALL_OW 173
// end else
3567: GO 3653
// begin if damagedBuilding then
3569: LD_VAR 0 5
3573: IFFALSE 3617
// begin if IsInUnit ( i ) then
3575: LD_VAR 0 1
3579: PPUSH
3580: CALL_OW 310
3584: IFFALSE 3597
// ComExitBuilding ( i ) else
3586: LD_VAR 0 1
3590: PPUSH
3591: CALL_OW 122
3595: GO 3615
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3597: LD_VAR 0 1
3601: PPUSH
3602: LD_VAR 0 5
3606: PUSH
3607: LD_INT 1
3609: ARRAY
3610: PPUSH
3611: CALL_OW 130
// end else
3615: GO 3653
// if not IsInUnit ( i ) and not HasTask ( i ) then
3617: LD_VAR 0 1
3621: PPUSH
3622: CALL_OW 310
3626: NOT
3627: PUSH
3628: LD_VAR 0 1
3632: PPUSH
3633: CALL_OW 314
3637: NOT
3638: AND
3639: IFFALSE 3653
// ComEnterUnit ( i , arDepot ) ;
3641: LD_VAR 0 1
3645: PPUSH
3646: LD_INT 5
3648: PPUSH
3649: CALL_OW 120
// end ; end ;
3653: GO 3505
3655: POP
3656: POP
// end ; end ;
3657: PPOPN 5
3659: END
// export function CargoEvacuation ; begin
3660: LD_INT 0
3662: PPUSH
// wait ( 0 0$20 ) ;
3663: LD_INT 700
3665: PPUSH
3666: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3670: LD_ADDR_EXP 21
3674: PUSH
3675: LD_EXP 21
3679: PUSH
3680: LD_INT 1
3682: MINUS
3683: ST_TO_ADDR
// if omarCargoCounter = 0 then
3684: LD_EXP 21
3688: PUSH
3689: LD_INT 0
3691: EQUAL
3692: IFFALSE 3696
// exit ;
3694: GO 4003
// if omarCargo then
3696: LD_EXP 43
3700: IFFALSE 3711
// RemoveUnit ( omarCargo ) ;
3702: LD_EXP 43
3706: PPUSH
3707: CALL_OW 64
// omarCargo := PrepareCargo ;
3711: LD_ADDR_EXP 43
3715: PUSH
3716: CALL 4008 0 0
3720: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3721: LD_EXP 43
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3733: LD_EXP 43
3737: PPUSH
3738: LD_INT 107
3740: PPUSH
3741: LD_INT 59
3743: PPUSH
3744: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3748: LD_INT 35
3750: PPUSH
3751: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3755: LD_EXP 43
3759: PPUSH
3760: LD_INT 107
3762: PPUSH
3763: LD_INT 59
3765: PPUSH
3766: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3770: LD_EXP 43
3774: PPUSH
3775: CALL_OW 302
3779: NOT
3780: PUSH
3781: LD_EXP 43
3785: PPUSH
3786: CALL_OW 301
3790: OR
3791: IFFALSE 3795
// exit ;
3793: GO 4003
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3795: LD_EXP 43
3799: PPUSH
3800: LD_INT 107
3802: PPUSH
3803: LD_INT 59
3805: PPUSH
3806: CALL_OW 307
3810: PUSH
3811: LD_EXP 43
3815: PPUSH
3816: LD_INT 5
3818: PPUSH
3819: CALL_OW 296
3823: PUSH
3824: LD_INT 6
3826: LESS
3827: OR
3828: IFFALSE 3748
// SetTag ( omarCargo , 1 ) ;
3830: LD_EXP 43
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: CALL_OW 109
// wait ( 0 0$05 ) ;
3842: LD_INT 175
3844: PPUSH
3845: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3849: LD_EXP 43
3853: PPUSH
3854: LD_INT 5
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3864: LD_EXP 43
3868: PPUSH
3869: LD_INT 103
3871: PPUSH
3872: LD_INT 9
3874: PPUSH
3875: CALL_OW 171
// wait ( 0 0$1 ) ;
3879: LD_INT 35
3881: PPUSH
3882: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3886: LD_EXP 43
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 100
3896: PPUSH
3897: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3901: LD_INT 35
3903: PPUSH
3904: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3908: LD_EXP 43
3912: PPUSH
3913: LD_INT 103
3915: PPUSH
3916: LD_INT 9
3918: PPUSH
3919: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3923: LD_EXP 43
3927: PPUSH
3928: CALL_OW 302
3932: NOT
3933: PUSH
3934: LD_EXP 43
3938: PPUSH
3939: CALL_OW 301
3943: OR
3944: IFFALSE 3948
// exit ;
3946: GO 4003
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3948: LD_EXP 43
3952: PPUSH
3953: LD_INT 103
3955: PPUSH
3956: LD_INT 9
3958: PPUSH
3959: CALL_OW 307
3963: PUSH
3964: LD_EXP 43
3968: PPUSH
3969: LD_INT 3
3971: PPUSH
3972: CALL_OW 308
3976: OR
3977: PUSH
3978: LD_EXP 43
3982: PPUSH
3983: CALL_OW 110
3987: PUSH
3988: LD_INT 0
3990: GREATER
3991: AND
3992: IFFALSE 3901
// RemoveUnit ( omarCargo ) ;
3994: LD_EXP 43
3998: PPUSH
3999: CALL_OW 64
// end ;
4003: LD_VAR 0 1
4007: RET
// export function PrepareCargo ; var un , veh ; begin
4008: LD_INT 0
4010: PPUSH
4011: PPUSH
4012: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4013: LD_ADDR_VAR 0 3
4017: PUSH
4018: LD_INT 5
4020: PPUSH
4021: LD_INT 2
4023: PPUSH
4024: LD_INT 14
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_INT 1
4032: PPUSH
4033: LD_INT 32
4035: PPUSH
4036: LD_INT 80
4038: PPUSH
4039: CALL 325 0 7
4043: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4044: LD_VAR 0 3
4048: PPUSH
4049: LD_INT 4
4051: PPUSH
4052: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_INT 101
4063: PPUSH
4064: LD_INT 8
4066: PPUSH
4067: LD_INT 0
4069: PPUSH
4070: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4074: LD_INT 0
4076: PPUSH
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 2
4082: PPUSH
4083: CALL_OW 380
// un := CreateHuman ;
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: CALL_OW 44
4096: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_VAR 0 3
4106: PPUSH
4107: CALL_OW 52
// result := veh ;
4111: LD_ADDR_VAR 0 1
4115: PUSH
4116: LD_VAR 0 3
4120: ST_TO_ADDR
// end ; end_of_file
4121: LD_VAR 0 1
4125: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
// usForces := [ ] ;
4131: LD_ADDR_EXP 44
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4138: LD_ADDR_EXP 46
4142: PUSH
4143: LD_INT 6
4145: PUSH
4146: LD_INT 32
4148: PUSH
4149: LD_INT 27
4151: PUSH
4152: LD_INT 1
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 43
4166: PUSH
4167: LD_INT 24
4169: PUSH
4170: LD_INT 5
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 27
4181: PUSH
4182: LD_INT 29
4184: PUSH
4185: LD_INT 21
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: LIST
4201: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4202: LD_INT 11
4204: PPUSH
4205: CALL_OW 274
4209: PPUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 150
4215: PUSH
4216: LD_INT 120
4218: PUSH
4219: LD_INT 100
4221: PUSH
4222: LD_INT 80
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: PUSH
4231: LD_OWVAR 67
4235: ARRAY
4236: PPUSH
4237: CALL_OW 277
// if Difficulty = 1 then
4241: LD_OWVAR 67
4245: PUSH
4246: LD_INT 1
4248: EQUAL
4249: IFFALSE 4258
// RemoveUnit ( hillBun ) ;
4251: LD_INT 14
4253: PPUSH
4254: CALL_OW 64
// uc_side := 1 ;
4258: LD_ADDR_OWVAR 20
4262: PUSH
4263: LD_INT 1
4265: ST_TO_ADDR
// uc_nation := 1 ;
4266: LD_ADDR_OWVAR 21
4270: PUSH
4271: LD_INT 1
4273: ST_TO_ADDR
// hc_gallery :=  ;
4274: LD_ADDR_OWVAR 33
4278: PUSH
4279: LD_STRING 
4281: ST_TO_ADDR
// hc_name :=  ;
4282: LD_ADDR_OWVAR 26
4286: PUSH
4287: LD_STRING 
4289: ST_TO_ADDR
// hc_importance := 0 ;
4290: LD_ADDR_OWVAR 32
4294: PUSH
4295: LD_INT 0
4297: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4298: LD_INT 1
4300: PPUSH
4301: LD_INT 1
4303: PPUSH
4304: LD_INT 3
4306: PPUSH
4307: CALL_OW 380
// usCommander := CreateHuman ;
4311: LD_ADDR_EXP 45
4315: PUSH
4316: CALL_OW 44
4320: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4321: LD_EXP 45
4325: PPUSH
4326: LD_INT 11
4328: PPUSH
4329: CALL_OW 52
// if Difficulty > 1 then
4333: LD_OWVAR 67
4337: PUSH
4338: LD_INT 1
4340: GREATER
4341: IFFALSE 4423
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4343: LD_INT 0
4345: PPUSH
4346: LD_INT 1
4348: PPUSH
4349: LD_INT 1
4351: PUSH
4352: LD_INT 2
4354: PUSH
4355: LD_INT 3
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: LIST
4362: PUSH
4363: LD_OWVAR 67
4367: ARRAY
4368: PPUSH
4369: CALL_OW 380
// un := CreateHuman ;
4373: LD_ADDR_VAR 0 3
4377: PUSH
4378: CALL_OW 44
4382: ST_TO_ADDR
// usForces := usForces union un ;
4383: LD_ADDR_EXP 44
4387: PUSH
4388: LD_EXP 44
4392: PUSH
4393: LD_VAR 0 3
4397: UNION
4398: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: LD_INT 1
4406: PPUSH
4407: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 14
4418: PPUSH
4419: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4423: LD_ADDR_VAR 0 2
4427: PUSH
4428: DOUBLE
4429: LD_INT 1
4431: DEC
4432: ST_TO_ADDR
4433: LD_INT 2
4435: PUSH
4436: LD_INT 3
4438: PUSH
4439: LD_INT 4
4441: PUSH
4442: LD_INT 4
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_OWVAR 67
4455: ARRAY
4456: PUSH
4457: FOR_TO
4458: IFFALSE 4604
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4460: LD_INT 0
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: LD_INT 1
4468: PUSH
4469: LD_INT 2
4471: PUSH
4472: LD_INT 3
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: PUSH
4484: LD_OWVAR 67
4488: ARRAY
4489: PPUSH
4490: CALL_OW 380
// un := CreateHuman ;
4494: LD_ADDR_VAR 0 3
4498: PUSH
4499: CALL_OW 44
4503: ST_TO_ADDR
// usForces := usForces union un ;
4504: LD_ADDR_EXP 44
4508: PUSH
4509: LD_EXP 44
4513: PUSH
4514: LD_VAR 0 3
4518: UNION
4519: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4520: LD_VAR 0 3
4524: PPUSH
4525: LD_INT 39
4527: PPUSH
4528: LD_INT 24
4530: PPUSH
4531: LD_INT 4
4533: PPUSH
4534: LD_INT 0
4536: PPUSH
4537: CALL_OW 50
// if i < 3 then
4541: LD_VAR 0 2
4545: PUSH
4546: LD_INT 3
4548: LESS
4549: IFFALSE 4602
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4551: LD_VAR 0 3
4555: PPUSH
4556: LD_INT 22
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 58
4568: PUSH
4569: EMPTY
4570: LIST
4571: PUSH
4572: LD_INT 30
4574: PUSH
4575: LD_INT 31
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: PPUSH
4587: CALL_OW 69
4591: PUSH
4592: LD_VAR 0 2
4596: ARRAY
4597: PPUSH
4598: CALL_OW 120
// end ;
4602: GO 4457
4604: POP
4605: POP
// for i := 1 to 2 do
4606: LD_ADDR_VAR 0 2
4610: PUSH
4611: DOUBLE
4612: LD_INT 1
4614: DEC
4615: ST_TO_ADDR
4616: LD_INT 2
4618: PUSH
4619: FOR_TO
4620: IFFALSE 4684
// begin PrepareHuman ( false , 2 , 2 ) ;
4622: LD_INT 0
4624: PPUSH
4625: LD_INT 2
4627: PPUSH
4628: LD_INT 2
4630: PPUSH
4631: CALL_OW 380
// un := CreateHuman ;
4635: LD_ADDR_VAR 0 3
4639: PUSH
4640: CALL_OW 44
4644: ST_TO_ADDR
// usForces := usForces union un ;
4645: LD_ADDR_EXP 44
4649: PUSH
4650: LD_EXP 44
4654: PUSH
4655: LD_VAR 0 3
4659: UNION
4660: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4661: LD_VAR 0 3
4665: PPUSH
4666: LD_INT 39
4668: PPUSH
4669: LD_INT 24
4671: PPUSH
4672: LD_INT 4
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: CALL_OW 50
// end ;
4682: GO 4619
4684: POP
4685: POP
// PrepareHuman ( false , 4 , 1 ) ;
4686: LD_INT 0
4688: PPUSH
4689: LD_INT 4
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: CALL_OW 380
// un := CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// usForces := usForces union un ;
4709: LD_ADDR_EXP 44
4713: PUSH
4714: LD_EXP 44
4718: PUSH
4719: LD_VAR 0 3
4723: UNION
4724: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4725: LD_VAR 0 3
4729: PPUSH
4730: LD_INT 39
4732: PPUSH
4733: LD_INT 24
4735: PPUSH
4736: LD_INT 4
4738: PPUSH
4739: LD_INT 0
4741: PPUSH
4742: CALL_OW 50
// end ;
4746: LD_VAR 0 1
4750: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4751: LD_EXP 44
4755: PUSH
4756: LD_EXP 6
4760: NOT
4761: AND
4762: PUSH
4763: LD_EXP 14
4767: NOT
4768: AND
4769: IFFALSE 5200
4771: GO 4773
4773: DISABLE
4774: LD_INT 0
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// begin enable ;
4781: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4782: LD_ADDR_VAR 0 3
4786: PUSH
4787: LD_EXP 44
4791: PPUSH
4792: LD_INT 25
4794: PUSH
4795: LD_INT 2
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PPUSH
4802: CALL_OW 72
4806: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4807: LD_ADDR_VAR 0 4
4811: PUSH
4812: LD_EXP 44
4816: PPUSH
4817: LD_INT 25
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: CALL_OW 72
4831: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4832: LD_ADDR_VAR 0 5
4836: PUSH
4837: LD_EXP 44
4841: PPUSH
4842: LD_INT 25
4844: PUSH
4845: LD_INT 4
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 72
4856: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4857: LD_INT 7
4859: PPUSH
4860: LD_INT 22
4862: PUSH
4863: LD_INT 2
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PPUSH
4870: CALL_OW 70
4874: PUSH
4875: LD_INT 1
4877: EQUAL
4878: IFFALSE 4954
// for i in sol do
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_VAR 0 4
4889: PUSH
4890: FOR_IN
4891: IFFALSE 4952
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4893: LD_VAR 0 1
4897: PPUSH
4898: CALL_OW 310
4902: NOT
4903: PUSH
4904: LD_VAR 0 1
4908: PPUSH
4909: CALL_OW 310
4913: PPUSH
4914: CALL_OW 266
4918: PUSH
4919: LD_INT 4
4921: EQUAL
4922: NOT
4923: OR
4924: IFFALSE 4950
// begin ComExitBuilding ( i ) ;
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4935: LD_VAR 0 1
4939: PPUSH
4940: LD_INT 37
4942: PPUSH
4943: LD_INT 23
4945: PPUSH
4946: CALL_OW 174
// end ;
4950: GO 4890
4952: POP
4953: POP
// if eng then
4954: LD_VAR 0 3
4958: IFFALSE 5200
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: LD_INT 22
4967: PUSH
4968: LD_INT 1
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PUSH
4975: LD_INT 95
4977: PUSH
4978: LD_INT 7
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PUSH
4985: LD_INT 21
4987: PUSH
4988: LD_INT 3
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 24
5000: PUSH
5001: LD_INT 1000
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: ST_TO_ADDR
// if b then
5023: LD_VAR 0 2
5027: IFFALSE 5058
// begin ComExitBuilding ( eng ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5038: LD_VAR 0 3
5042: PPUSH
5043: LD_VAR 0 2
5047: PUSH
5048: LD_INT 1
5050: ARRAY
5051: PPUSH
5052: CALL_OW 190
// end else
5056: GO 5200
// begin for i in eng do
5058: LD_ADDR_VAR 0 1
5062: PUSH
5063: LD_VAR 0 3
5067: PUSH
5068: FOR_IN
5069: IFFALSE 5198
// if not HasTask ( i ) then
5071: LD_VAR 0 1
5075: PPUSH
5076: CALL_OW 314
5080: NOT
5081: IFFALSE 5196
// begin if americanBuildList then
5083: LD_EXP 46
5087: IFFALSE 5172
// begin if IsInUnit ( i ) then
5089: LD_VAR 0 1
5093: PPUSH
5094: CALL_OW 310
5098: IFFALSE 5109
// ComExitBuilding ( i ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5109: LD_VAR 0 1
5113: PPUSH
5114: LD_EXP 46
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PPUSH
5127: LD_EXP 46
5131: PUSH
5132: LD_INT 1
5134: ARRAY
5135: PUSH
5136: LD_INT 2
5138: ARRAY
5139: PPUSH
5140: LD_EXP 46
5144: PUSH
5145: LD_INT 1
5147: ARRAY
5148: PUSH
5149: LD_INT 3
5151: ARRAY
5152: PPUSH
5153: LD_EXP 46
5157: PUSH
5158: LD_INT 1
5160: ARRAY
5161: PUSH
5162: LD_INT 4
5164: ARRAY
5165: PPUSH
5166: CALL_OW 205
// end else
5170: GO 5196
// if not IsInUnit ( i ) then
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 310
5181: NOT
5182: IFFALSE 5196
// ComEnterUnit ( i , usDepot ) ;
5184: LD_VAR 0 1
5188: PPUSH
5189: LD_INT 11
5191: PPUSH
5192: CALL_OW 120
// end ;
5196: GO 5068
5198: POP
5199: POP
// end ; end ; end ;
5200: PPOPN 5
5202: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5203: LD_INT 0
5205: PPUSH
5206: PPUSH
5207: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_INT 35
5215: PUSH
5216: LD_INT 45
5218: PUSH
5219: LD_INT 48
5221: PUSH
5222: LD_EXP 58
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: ST_TO_ADDR
// for i in tech do
5233: LD_ADDR_VAR 0 4
5237: PUSH
5238: LD_VAR 0 3
5242: PUSH
5243: FOR_IN
5244: IFFALSE 5262
// AddComResearch ( lab , i ) ;
5246: LD_VAR 0 1
5250: PPUSH
5251: LD_VAR 0 4
5255: PPUSH
5256: CALL_OW 184
5260: GO 5243
5262: POP
5263: POP
// end ;
5264: LD_VAR 0 2
5268: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5269: LD_EXP 12
5273: PUSH
5274: LD_EXP 23
5278: PUSH
5279: LD_EXP 27
5283: LESSEQUAL
5284: AND
5285: IFFALSE 5310
5287: GO 5289
5289: DISABLE
// begin enable ;
5290: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5291: LD_INT 35
5293: PPUSH
5294: LD_INT 2065
5296: PPUSH
5297: CALL_OW 12
5301: PPUSH
5302: CALL_OW 67
// SendConvoy ;
5306: CALL 5416 0 0
// end ;
5310: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5311: LD_EXP 6
5315: PUSH
5316: LD_EXP 18
5320: AND
5321: IFFALSE 5415
5323: GO 5325
5325: DISABLE
// begin if americanHasEscaped then
5326: LD_EXP 8
5330: IFFALSE 5341
// wait ( 3 3$20 ) else
5332: LD_INT 7000
5334: PPUSH
5335: CALL_OW 67
5339: GO 5348
// wait ( 6 6$40 ) ;
5341: LD_INT 14000
5343: PPUSH
5344: CALL_OW 67
// SendAttack ;
5348: CALL 6163 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 , 4 4$00 ] [ Difficulty ] ) ;
5352: LD_INT 14000
5354: PUSH
5355: LD_INT 11900
5357: PUSH
5358: LD_INT 9800
5360: PUSH
5361: LD_INT 8400
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: LD_OWVAR 67
5374: ARRAY
5375: PPUSH
5376: CALL_OW 67
// SendAttack ;
5380: CALL 6163 0 0
// until attackWave < [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5384: LD_EXP 19
5388: PUSH
5389: LD_INT 6
5391: PUSH
5392: LD_INT 7
5394: PUSH
5395: LD_INT 8
5397: PUSH
5398: LD_INT 9
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_OWVAR 67
5411: ARRAY
5412: LESS
5413: IFFALSE 5352
// end ;
5415: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
5421: PPUSH
5422: PPUSH
5423: PPUSH
5424: PPUSH
5425: PPUSH
// road := rand ( 1 , 2 ) ;
5426: LD_ADDR_VAR 0 4
5430: PUSH
5431: LD_INT 1
5433: PPUSH
5434: LD_INT 2
5436: PPUSH
5437: CALL_OW 12
5441: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5442: LD_ADDR_VAR 0 8
5446: PUSH
5447: LD_INT 3
5449: PUSH
5450: LD_INT 8
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PUSH
5457: LD_VAR 0 4
5461: ARRAY
5462: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5463: LD_ADDR_VAR 0 5
5467: PUSH
5468: LD_INT 35
5470: PUSH
5471: LD_INT 66
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 101
5484: PUSH
5485: LD_INT 8
5487: PUSH
5488: LD_INT 4
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5500: LD_ADDR_VAR 0 6
5504: PUSH
5505: LD_INT 34
5507: PUSH
5508: LD_INT 67
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PUSH
5515: LD_INT 38
5517: PUSH
5518: LD_INT 62
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: LD_INT 43
5527: PUSH
5528: LD_INT 54
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 57
5537: PUSH
5538: LD_INT 57
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 77
5547: PUSH
5548: LD_INT 71
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 86
5557: PUSH
5558: LD_INT 60
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 89
5567: PUSH
5568: LD_INT 35
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 93
5577: PUSH
5578: LD_INT 17
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: LD_INT 97
5587: PUSH
5588: LD_INT 10
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 103
5597: PUSH
5598: LD_INT 9
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: ST_TO_ADDR
// if road = 2 then
5617: LD_VAR 0 4
5621: PUSH
5622: LD_INT 2
5624: EQUAL
5625: IFFALSE 5642
// points := ReverseArray ( points ) ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_VAR 0 6
5636: PPUSH
5637: CALL 989 0 1
5641: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5642: LD_INT 4
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: LD_INT 2
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 12
5659: PPUSH
5660: LD_INT 80
5662: PPUSH
5663: CALL 325 0 7
// veh := CreateVehicle ;
5667: LD_ADDR_VAR 0 3
5671: PUSH
5672: CALL_OW 45
5676: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5677: LD_VAR 0 3
5681: PPUSH
5682: LD_VAR 0 5
5686: PUSH
5687: LD_VAR 0 4
5691: ARRAY
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PPUSH
5697: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5701: LD_VAR 0 3
5705: PPUSH
5706: LD_VAR 0 5
5710: PUSH
5711: LD_VAR 0 4
5715: ARRAY
5716: PUSH
5717: LD_INT 1
5719: ARRAY
5720: PPUSH
5721: LD_VAR 0 5
5725: PUSH
5726: LD_VAR 0 4
5730: ARRAY
5731: PUSH
5732: LD_INT 2
5734: ARRAY
5735: PPUSH
5736: LD_INT 0
5738: PPUSH
5739: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5743: LD_INT 0
5745: PPUSH
5746: LD_INT 1
5748: PPUSH
5749: LD_OWVAR 67
5753: PPUSH
5754: CALL_OW 380
// un := CreateHuman ;
5758: LD_ADDR_VAR 0 2
5762: PUSH
5763: CALL_OW 44
5767: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5768: LD_VAR 0 2
5772: PPUSH
5773: LD_VAR 0 3
5777: PPUSH
5778: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 , 48 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5782: LD_INT 60
5784: PUSH
5785: LD_INT 56
5787: PUSH
5788: LD_INT 52
5790: PUSH
5791: LD_INT 48
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: PUSH
5800: LD_OWVAR 67
5804: ARRAY
5805: PPUSH
5806: CALL_OW 13
5810: PUSH
5811: LD_OWVAR 1
5815: PUSH
5816: LD_INT 30
5818: MOD
5819: PLUS
5820: PUSH
5821: LD_EXP 23
5825: PUSH
5826: LD_INT 4
5828: LESS
5829: OR
5830: IFFALSE 5847
// SetCargo ( veh , mat_cans , 100 ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: LD_INT 100
5842: PPUSH
5843: CALL_OW 290
// for i := 2 to points do
5847: LD_ADDR_VAR 0 7
5851: PUSH
5852: DOUBLE
5853: LD_INT 2
5855: DEC
5856: ST_TO_ADDR
5857: LD_VAR 0 6
5861: PUSH
5862: FOR_TO
5863: IFFALSE 5906
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5865: LD_VAR 0 3
5869: PPUSH
5870: LD_VAR 0 6
5874: PUSH
5875: LD_VAR 0 7
5879: ARRAY
5880: PUSH
5881: LD_INT 1
5883: ARRAY
5884: PPUSH
5885: LD_VAR 0 6
5889: PUSH
5890: LD_VAR 0 7
5894: ARRAY
5895: PUSH
5896: LD_INT 2
5898: ARRAY
5899: PPUSH
5900: CALL_OW 171
5904: GO 5862
5906: POP
5907: POP
// convoyCounter := convoyCounter + 1 ;
5908: LD_ADDR_EXP 23
5912: PUSH
5913: LD_EXP 23
5917: PUSH
5918: LD_INT 1
5920: PLUS
5921: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5922: LD_INT 35
5924: PPUSH
5925: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5929: LD_VAR 0 3
5933: PPUSH
5934: CALL_OW 314
5938: NOT
5939: PUSH
5940: LD_VAR 0 3
5944: PPUSH
5945: CALL_OW 302
5949: AND
5950: IFFALSE 5991
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5952: LD_VAR 0 3
5956: PPUSH
5957: LD_VAR 0 6
5961: PUSH
5962: LD_VAR 0 6
5966: ARRAY
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_VAR 0 6
5976: PUSH
5977: LD_VAR 0 6
5981: ARRAY
5982: PUSH
5983: LD_INT 2
5985: ARRAY
5986: PPUSH
5987: CALL_OW 111
// if not IsInUnit ( un ) then
5991: LD_VAR 0 2
5995: PPUSH
5996: CALL_OW 310
6000: NOT
6001: IFFALSE 6042
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_VAR 0 6
6012: PUSH
6013: LD_VAR 0 6
6017: ARRAY
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PPUSH
6023: LD_VAR 0 6
6027: PUSH
6028: LD_VAR 0 6
6032: ARRAY
6033: PUSH
6034: LD_INT 2
6036: ARRAY
6037: PPUSH
6038: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6042: LD_VAR 0 3
6046: PPUSH
6047: LD_VAR 0 8
6051: PPUSH
6052: CALL_OW 308
6056: PUSH
6057: LD_VAR 0 2
6061: PPUSH
6062: LD_VAR 0 8
6066: PPUSH
6067: CALL_OW 308
6071: OR
6072: IFFALSE 5922
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6074: LD_VAR 0 2
6078: PPUSH
6079: CALL_OW 302
6083: PUSH
6084: LD_VAR 0 3
6088: PPUSH
6089: CALL_OW 302
6093: NOT
6094: AND
6095: PUSH
6096: LD_VAR 0 2
6100: PPUSH
6101: LD_VAR 0 8
6105: PPUSH
6106: CALL_OW 308
6110: AND
6111: IFFALSE 6122
// RemoveUnit ( un ) ;
6113: LD_VAR 0 2
6117: PPUSH
6118: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6122: LD_VAR 0 3
6126: PPUSH
6127: LD_VAR 0 8
6131: PPUSH
6132: CALL_OW 308
6136: PUSH
6137: LD_VAR 0 3
6141: PPUSH
6142: CALL_OW 302
6146: AND
6147: IFFALSE 6158
// RemoveUnit ( veh ) ;
6149: LD_VAR 0 3
6153: PPUSH
6154: CALL_OW 64
// end ;
6158: LD_VAR 0 1
6162: RET
// export function SendAttack ; var un , veh , i ; begin
6163: LD_INT 0
6165: PPUSH
6166: PPUSH
6167: PPUSH
6168: PPUSH
// if ingame_video then
6169: LD_OWVAR 52
6173: IFFALSE 6196
// begin repeat wait ( 0 0$1 ) ;
6175: LD_INT 35
6177: PPUSH
6178: CALL_OW 67
// until not ingame_video ;
6182: LD_OWVAR 52
6186: NOT
6187: IFFALSE 6175
// wait ( 0 0$5 ) ;
6189: LD_INT 175
6191: PPUSH
6192: CALL_OW 67
// end ; IncomingAttack ;
6196: CALL 15155 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6200: LD_INT 2100
6202: PPUSH
6203: LD_INT 3500
6205: PPUSH
6206: CALL_OW 12
6210: PPUSH
6211: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: DOUBLE
6221: LD_INT 1
6223: DEC
6224: ST_TO_ADDR
6225: LD_INT 3
6227: PUSH
6228: LD_INT 4
6230: PUSH
6231: LD_INT 4
6233: PUSH
6234: LD_INT 5
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: PUSH
6243: LD_OWVAR 67
6247: ARRAY
6248: PUSH
6249: LD_EXP 19
6253: PUSH
6254: LD_INT 3
6256: DIV
6257: PLUS
6258: PUSH
6259: FOR_TO
6260: IFFALSE 6376
// begin uc_side := 1 ;
6262: LD_ADDR_OWVAR 20
6266: PUSH
6267: LD_INT 1
6269: ST_TO_ADDR
// uc_nation := 1 ;
6270: LD_ADDR_OWVAR 21
6274: PUSH
6275: LD_INT 1
6277: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6278: LD_INT 0
6280: PPUSH
6281: LD_INT 1
6283: PPUSH
6284: LD_INT 2
6286: PUSH
6287: LD_INT 3
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: PUSH
6302: LD_OWVAR 67
6306: ARRAY
6307: PPUSH
6308: CALL_OW 380
// un := CreateHuman ;
6312: LD_ADDR_VAR 0 2
6316: PUSH
6317: CALL_OW 44
6321: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6322: LD_VAR 0 2
6326: PPUSH
6327: LD_INT 37
6329: PPUSH
6330: LD_INT 70
6332: PPUSH
6333: LD_INT 3
6335: PPUSH
6336: LD_INT 0
6338: PPUSH
6339: CALL_OW 50
// usAttackers := usAttackers union un ;
6343: LD_ADDR_EXP 47
6347: PUSH
6348: LD_EXP 47
6352: PUSH
6353: LD_VAR 0 2
6357: UNION
6358: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6359: LD_VAR 0 2
6363: PPUSH
6364: LD_INT 40
6366: PPUSH
6367: LD_INT 65
6369: PPUSH
6370: CALL_OW 111
// end ;
6374: GO 6259
6376: POP
6377: POP
// uc_side := 1 ;
6378: LD_ADDR_OWVAR 20
6382: PUSH
6383: LD_INT 1
6385: ST_TO_ADDR
// uc_nation := 1 ;
6386: LD_ADDR_OWVAR 21
6390: PUSH
6391: LD_INT 1
6393: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6394: LD_INT 0
6396: PPUSH
6397: LD_INT 4
6399: PPUSH
6400: LD_INT 2
6402: PPUSH
6403: CALL_OW 380
// un := CreateHuman ;
6407: LD_ADDR_VAR 0 2
6411: PUSH
6412: CALL_OW 44
6416: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6417: LD_VAR 0 2
6421: PPUSH
6422: LD_INT 37
6424: PPUSH
6425: LD_INT 70
6427: PPUSH
6428: LD_INT 3
6430: PPUSH
6431: LD_INT 0
6433: PPUSH
6434: CALL_OW 50
// usAttackers := usAttackers union un ;
6438: LD_ADDR_EXP 47
6442: PUSH
6443: LD_EXP 47
6447: PUSH
6448: LD_VAR 0 2
6452: UNION
6453: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6454: LD_VAR 0 2
6458: PPUSH
6459: LD_INT 40
6461: PPUSH
6462: LD_INT 65
6464: PPUSH
6465: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6469: LD_ADDR_VAR 0 4
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_OWVAR 67
6483: PUSH
6484: LD_EXP 19
6488: PUSH
6489: LD_INT 4
6491: DIV
6492: PLUS
6493: PUSH
6494: FOR_TO
6495: IFFALSE 6668
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6497: LD_ADDR_VAR 0 3
6501: PUSH
6502: LD_INT 1
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: LD_INT 2
6510: PPUSH
6511: LD_INT 1
6513: PPUSH
6514: LD_INT 1
6516: PPUSH
6517: LD_INT 4
6519: PUSH
6520: LD_INT 3
6522: PUSH
6523: LD_INT 2
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 3
6536: PPUSH
6537: CALL_OW 12
6541: ARRAY
6542: PPUSH
6543: LD_INT 90
6545: PPUSH
6546: CALL 325 0 7
6550: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6551: LD_VAR 0 3
6555: PPUSH
6556: LD_INT 35
6558: PPUSH
6559: LD_INT 65
6561: PPUSH
6562: LD_INT 0
6564: PPUSH
6565: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6569: LD_INT 0
6571: PPUSH
6572: LD_INT 3
6574: PPUSH
6575: LD_OWVAR 67
6579: PUSH
6580: LD_INT 1
6582: PLUS
6583: PPUSH
6584: CALL_OW 380
// un := CreateHuman ;
6588: LD_ADDR_VAR 0 2
6592: PUSH
6593: CALL_OW 44
6597: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6598: LD_VAR 0 2
6602: PPUSH
6603: LD_VAR 0 3
6607: PPUSH
6608: CALL_OW 52
// usAttackers := usAttackers union un ;
6612: LD_ADDR_EXP 47
6616: PUSH
6617: LD_EXP 47
6621: PUSH
6622: LD_VAR 0 2
6626: UNION
6627: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6628: LD_VAR 0 3
6632: PPUSH
6633: LD_INT 39
6635: PPUSH
6636: LD_INT 60
6638: PPUSH
6639: CALL_OW 111
// wait ( 0 0$3 ) ;
6643: LD_INT 105
6645: PPUSH
6646: CALL_OW 67
// usAttackers := usAttackers union veh ;
6650: LD_ADDR_EXP 47
6654: PUSH
6655: LD_EXP 47
6659: PUSH
6660: LD_VAR 0 3
6664: UNION
6665: ST_TO_ADDR
// end ;
6666: GO 6494
6668: POP
6669: POP
// attackWave := attackWave + 1 ;
6670: LD_ADDR_EXP 19
6674: PUSH
6675: LD_EXP 19
6679: PUSH
6680: LD_INT 1
6682: PLUS
6683: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6684: LD_EXP 24
6688: PPUSH
6689: CALL_OW 427
// end ;
6693: LD_VAR 0 1
6697: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6698: LD_INT 0
6700: PPUSH
6701: PPUSH
6702: PPUSH
6703: PPUSH
6704: PPUSH
6705: PPUSH
6706: PPUSH
6707: PPUSH
6708: PPUSH
6709: PPUSH
6710: PPUSH
// if retreatAllowed then
6711: LD_EXP 11
6715: IFFALSE 6727
// strategy := 2 else
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: LD_INT 2
6724: ST_TO_ADDR
6725: GO 6743
// strategy := rand ( 0 , 2 ) ;
6727: LD_ADDR_VAR 0 5
6731: PUSH
6732: LD_INT 0
6734: PPUSH
6735: LD_INT 2
6737: PPUSH
6738: CALL_OW 12
6742: ST_TO_ADDR
// attackFormula := [ ] ;
6743: LD_ADDR_VAR 0 6
6747: PUSH
6748: EMPTY
6749: ST_TO_ADDR
// case strategy of 0 :
6750: LD_VAR 0 5
6754: PUSH
6755: LD_INT 0
6757: DOUBLE
6758: EQUAL
6759: IFTRUE 6763
6761: GO 7093
6763: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6764: LD_INT 11
6766: PPUSH
6767: LD_INT 22
6769: PUSH
6770: LD_INT 2
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 30
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 70
6795: NOT
6796: IFFALSE 6868
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6798: LD_ADDR_VAR 0 6
6802: PUSH
6803: LD_INT 41
6805: PUSH
6806: LD_INT 34
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: EMPTY
6814: LIST
6815: PUSH
6816: LD_INT 53
6818: PUSH
6819: LD_INT 62
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 37
6828: PUSH
6829: LD_INT 63
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 44
6838: PUSH
6839: LD_INT 45
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 37
6848: PUSH
6849: LD_INT 28
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: ST_TO_ADDR
6866: GO 7091
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6868: LD_INT 12
6870: PPUSH
6871: LD_INT 22
6873: PUSH
6874: LD_INT 2
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 2
6883: PUSH
6884: LD_INT 30
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 30
6896: PUSH
6897: LD_INT 31
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 30
6906: PUSH
6907: LD_INT 32
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 70
6928: NOT
6929: IFFALSE 7012
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6931: LD_ADDR_VAR 0 6
6935: PUSH
6936: LD_INT 27
6938: PUSH
6939: LD_INT 42
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 27
6948: PUSH
6949: LD_INT 32
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 53
6962: PUSH
6963: LD_INT 62
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 37
6972: PUSH
6973: LD_INT 63
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 44
6982: PUSH
6983: LD_INT 45
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 37
6992: PUSH
6993: LD_INT 28
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: ST_TO_ADDR
7010: GO 7091
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7012: LD_ADDR_VAR 0 6
7016: PUSH
7017: LD_INT 71
7019: PUSH
7020: LD_INT 67
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 54
7029: PUSH
7030: LD_INT 35
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 63
7043: PUSH
7044: LD_INT 40
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: LD_INT 37
7053: PUSH
7054: LD_INT 63
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 44
7063: PUSH
7064: LD_INT 45
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 37
7073: PUSH
7074: LD_INT 28
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: ST_TO_ADDR
// end ; 1 :
7091: GO 7296
7093: LD_INT 1
7095: DOUBLE
7096: EQUAL
7097: IFTRUE 7101
7099: GO 7205
7101: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7102: LD_ADDR_VAR 0 6
7106: PUSH
7107: LD_INT 71
7109: PUSH
7110: LD_INT 67
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 82
7119: PUSH
7120: LD_INT 23
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: LD_INT 53
7129: PUSH
7130: LD_INT 7
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 43
7139: PUSH
7140: LD_INT 10
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: PUSH
7153: LD_INT 53
7155: PUSH
7156: LD_INT 62
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PUSH
7163: LD_INT 37
7165: PUSH
7166: LD_INT 63
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: LD_INT 44
7175: PUSH
7176: LD_INT 45
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 37
7185: PUSH
7186: LD_INT 28
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: ST_TO_ADDR
7203: GO 7296
7205: LD_INT 2
7207: DOUBLE
7208: EQUAL
7209: IFTRUE 7213
7211: GO 7295
7213: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7214: LD_ADDR_VAR 0 6
7218: PUSH
7219: LD_INT 90
7221: PUSH
7222: LD_INT 59
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 108
7231: PUSH
7232: LD_INT 64
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 82
7245: PUSH
7246: LD_INT 75
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 73
7255: PUSH
7256: LD_INT 67
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 101
7265: PUSH
7266: LD_INT 65
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: LD_INT 108
7275: PUSH
7276: LD_INT 62
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: ST_TO_ADDR
7293: GO 7296
7295: POP
// if not attackFormula then
7296: LD_VAR 0 6
7300: NOT
7301: IFFALSE 7305
// exit ;
7303: GO 8983
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7305: LD_ADDR_VAR 0 7
7309: PUSH
7310: LD_EXP 47
7314: PPUSH
7315: LD_INT 25
7317: PUSH
7318: LD_INT 1
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PPUSH
7325: CALL_OW 72
7329: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7330: LD_ADDR_VAR 0 8
7334: PUSH
7335: LD_EXP 47
7339: PPUSH
7340: LD_INT 25
7342: PUSH
7343: LD_INT 4
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PPUSH
7350: CALL_OW 72
7354: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7355: LD_ADDR_VAR 0 9
7359: PUSH
7360: LD_EXP 47
7364: PPUSH
7365: LD_INT 25
7367: PUSH
7368: LD_INT 3
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 72
7379: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7380: LD_ADDR_VAR 0 10
7384: PUSH
7385: LD_EXP 47
7389: PPUSH
7390: LD_INT 21
7392: PUSH
7393: LD_INT 2
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PPUSH
7400: CALL_OW 72
7404: ST_TO_ADDR
// if sci then
7405: LD_VAR 0 8
7409: IFFALSE 7446
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7411: LD_VAR 0 8
7415: PPUSH
7416: LD_VAR 0 6
7420: PUSH
7421: LD_INT 2
7423: ARRAY
7424: PUSH
7425: LD_INT 1
7427: ARRAY
7428: PPUSH
7429: LD_VAR 0 6
7433: PUSH
7434: LD_INT 2
7436: ARRAY
7437: PUSH
7438: LD_INT 2
7440: ARRAY
7441: PPUSH
7442: CALL_OW 111
// repeat wait ( 10 ) ;
7446: LD_INT 10
7448: PPUSH
7449: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7453: LD_ADDR_VAR 0 7
7457: PUSH
7458: LD_EXP 47
7462: PPUSH
7463: LD_INT 25
7465: PUSH
7466: LD_INT 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 72
7477: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7478: LD_ADDR_VAR 0 8
7482: PUSH
7483: LD_EXP 47
7487: PPUSH
7488: LD_INT 25
7490: PUSH
7491: LD_INT 4
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PPUSH
7498: CALL_OW 72
7502: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7503: LD_ADDR_VAR 0 9
7507: PUSH
7508: LD_EXP 47
7512: PPUSH
7513: LD_INT 25
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PPUSH
7523: CALL_OW 72
7527: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7528: LD_ADDR_VAR 0 10
7532: PUSH
7533: LD_EXP 47
7537: PPUSH
7538: LD_INT 21
7540: PUSH
7541: LD_INT 2
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 72
7552: ST_TO_ADDR
// if sol then
7553: LD_VAR 0 7
7557: IFFALSE 7978
// begin for i in sol do
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: LD_VAR 0 7
7568: PUSH
7569: FOR_IN
7570: IFFALSE 7976
// begin tag := GetTag ( i ) ;
7572: LD_ADDR_VAR 0 4
7576: PUSH
7577: LD_VAR 0 2
7581: PPUSH
7582: CALL_OW 110
7586: ST_TO_ADDR
// if not tag then
7587: LD_VAR 0 4
7591: NOT
7592: IFFALSE 7701
// begin if GetLives ( i ) = 1000 then
7594: LD_VAR 0 2
7598: PPUSH
7599: CALL_OW 256
7603: PUSH
7604: LD_INT 1000
7606: EQUAL
7607: IFFALSE 7623
// SetTag ( i , 1 ) else
7609: LD_VAR 0 2
7613: PPUSH
7614: LD_INT 1
7616: PPUSH
7617: CALL_OW 109
7621: GO 7699
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7623: LD_VAR 0 2
7627: PPUSH
7628: LD_VAR 0 6
7632: PUSH
7633: LD_INT 2
7635: ARRAY
7636: PUSH
7637: LD_INT 1
7639: ARRAY
7640: PPUSH
7641: LD_VAR 0 6
7645: PUSH
7646: LD_INT 2
7648: ARRAY
7649: PUSH
7650: LD_INT 2
7652: ARRAY
7653: PPUSH
7654: CALL_OW 297
7658: PUSH
7659: LD_INT 10
7661: GREATER
7662: IFFALSE 7699
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7664: LD_VAR 0 2
7668: PPUSH
7669: LD_VAR 0 6
7673: PUSH
7674: LD_INT 2
7676: ARRAY
7677: PUSH
7678: LD_INT 1
7680: ARRAY
7681: PPUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_INT 2
7689: ARRAY
7690: PUSH
7691: LD_INT 2
7693: ARRAY
7694: PPUSH
7695: CALL_OW 111
// end else
7699: GO 7974
// begin if GetLives ( i ) < 760 then
7701: LD_VAR 0 2
7705: PPUSH
7706: CALL_OW 256
7710: PUSH
7711: LD_INT 760
7713: LESS
7714: IFFALSE 7765
// begin SetTag ( i , 0 ) ;
7716: LD_VAR 0 2
7720: PPUSH
7721: LD_INT 0
7723: PPUSH
7724: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7728: LD_VAR 0 2
7732: PPUSH
7733: LD_VAR 0 6
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: PUSH
7742: LD_INT 1
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 6
7750: PUSH
7751: LD_INT 2
7753: ARRAY
7754: PUSH
7755: LD_INT 2
7757: ARRAY
7758: PPUSH
7759: CALL_OW 111
// end else
7763: GO 7974
// if tag <= attackFormula [ 1 ] then
7765: LD_VAR 0 4
7769: PUSH
7770: LD_VAR 0 6
7774: PUSH
7775: LD_INT 1
7777: ARRAY
7778: LESSEQUAL
7779: IFFALSE 7940
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7781: LD_VAR 0 2
7785: PPUSH
7786: LD_VAR 0 6
7790: PUSH
7791: LD_INT 1
7793: ARRAY
7794: PUSH
7795: LD_VAR 0 4
7799: ARRAY
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PPUSH
7805: LD_VAR 0 6
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PUSH
7814: LD_VAR 0 4
7818: ARRAY
7819: PUSH
7820: LD_INT 2
7822: ARRAY
7823: PPUSH
7824: CALL_OW 297
7828: PUSH
7829: LD_INT 6
7831: GREATER
7832: IFFALSE 7883
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7834: LD_VAR 0 2
7838: PPUSH
7839: LD_VAR 0 6
7843: PUSH
7844: LD_INT 1
7846: ARRAY
7847: PUSH
7848: LD_VAR 0 4
7852: ARRAY
7853: PUSH
7854: LD_INT 1
7856: ARRAY
7857: PPUSH
7858: LD_VAR 0 6
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: PUSH
7867: LD_VAR 0 4
7871: ARRAY
7872: PUSH
7873: LD_INT 2
7875: ARRAY
7876: PPUSH
7877: CALL_OW 114
7881: GO 7938
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7883: LD_INT 81
7885: PUSH
7886: LD_INT 1
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: LD_INT 91
7895: PUSH
7896: LD_VAR 0 2
7900: PUSH
7901: LD_INT 10
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PPUSH
7913: CALL_OW 69
7917: NOT
7918: IFFALSE 7938
// SetTag ( i , tag + 1 ) ;
7920: LD_VAR 0 2
7924: PPUSH
7925: LD_VAR 0 4
7929: PUSH
7930: LD_INT 1
7932: PLUS
7933: PPUSH
7934: CALL_OW 109
// end else
7938: GO 7974
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7940: LD_VAR 0 2
7944: PPUSH
7945: LD_INT 81
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PPUSH
7955: CALL_OW 69
7959: PPUSH
7960: LD_VAR 0 2
7964: PPUSH
7965: CALL_OW 74
7969: PPUSH
7970: CALL_OW 115
// end ; end ;
7974: GO 7569
7976: POP
7977: POP
// end ; if sci then
7978: LD_VAR 0 8
7982: IFFALSE 8251
// begin if not sol and not mech then
7984: LD_VAR 0 7
7988: NOT
7989: PUSH
7990: LD_VAR 0 9
7994: NOT
7995: AND
7996: IFFALSE 8048
// begin for i in sci do
7998: LD_ADDR_VAR 0 2
8002: PUSH
8003: LD_VAR 0 8
8007: PUSH
8008: FOR_IN
8009: IFFALSE 8044
// begin usForces := usForces union i ;
8011: LD_ADDR_EXP 44
8015: PUSH
8016: LD_EXP 44
8020: PUSH
8021: LD_VAR 0 2
8025: UNION
8026: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8027: LD_VAR 0 2
8031: PPUSH
8032: LD_INT 34
8034: PPUSH
8035: LD_INT 68
8037: PPUSH
8038: CALL_OW 111
// end ;
8042: GO 8008
8044: POP
8045: POP
// end else
8046: GO 8251
// for i in sci do
8048: LD_ADDR_VAR 0 2
8052: PUSH
8053: LD_VAR 0 8
8057: PUSH
8058: FOR_IN
8059: IFFALSE 8249
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8061: LD_VAR 0 2
8065: PPUSH
8066: LD_VAR 0 6
8070: PUSH
8071: LD_INT 2
8073: ARRAY
8074: PUSH
8075: LD_INT 1
8077: ARRAY
8078: PPUSH
8079: LD_VAR 0 6
8083: PUSH
8084: LD_INT 2
8086: ARRAY
8087: PUSH
8088: LD_INT 2
8090: ARRAY
8091: PPUSH
8092: CALL_OW 297
8096: PUSH
8097: LD_INT 10
8099: GREATER
8100: IFFALSE 8139
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8102: LD_VAR 0 2
8106: PPUSH
8107: LD_VAR 0 6
8111: PUSH
8112: LD_INT 2
8114: ARRAY
8115: PUSH
8116: LD_INT 1
8118: ARRAY
8119: PPUSH
8120: LD_VAR 0 6
8124: PUSH
8125: LD_INT 2
8127: ARRAY
8128: PUSH
8129: LD_INT 2
8131: ARRAY
8132: PPUSH
8133: CALL_OW 111
8137: GO 8247
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8139: LD_VAR 0 7
8143: PPUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 24
8149: PUSH
8150: LD_INT 1000
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 91
8163: PUSH
8164: LD_VAR 0 2
8168: PUSH
8169: LD_INT 10
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PPUSH
8181: CALL_OW 72
8185: IFFALSE 8247
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: LD_VAR 0 7
8196: PPUSH
8197: LD_INT 3
8199: PUSH
8200: LD_INT 24
8202: PUSH
8203: LD_INT 1000
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 91
8216: PUSH
8217: LD_VAR 0 2
8221: PUSH
8222: LD_INT 10
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 72
8238: PUSH
8239: LD_INT 1
8241: ARRAY
8242: PPUSH
8243: CALL_OW 128
8247: GO 8058
8249: POP
8250: POP
// end ; if mech then
8251: LD_VAR 0 9
8255: IFFALSE 8965
// begin for i in mech do
8257: LD_ADDR_VAR 0 2
8261: PUSH
8262: LD_VAR 0 9
8266: PUSH
8267: FOR_IN
8268: IFFALSE 8963
// begin tag := GetTag ( i ) ;
8270: LD_ADDR_VAR 0 4
8274: PUSH
8275: LD_VAR 0 2
8279: PPUSH
8280: CALL_OW 110
8284: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8285: LD_ADDR_VAR 0 11
8289: PUSH
8290: LD_VAR 0 2
8294: PPUSH
8295: CALL_OW 310
8299: ST_TO_ADDR
// if not tag then
8300: LD_VAR 0 4
8304: NOT
8305: IFFALSE 8676
// begin if veh then
8307: LD_VAR 0 11
8311: IFFALSE 8482
// begin if GetLives ( veh ) = 1000 then
8313: LD_VAR 0 11
8317: PPUSH
8318: CALL_OW 256
8322: PUSH
8323: LD_INT 1000
8325: EQUAL
8326: IFFALSE 8342
// SetTag ( i , 1 ) else
8328: LD_VAR 0 2
8332: PPUSH
8333: LD_INT 1
8335: PPUSH
8336: CALL_OW 109
8340: GO 8480
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8342: LD_VAR 0 11
8346: PPUSH
8347: LD_VAR 0 6
8351: PUSH
8352: LD_INT 3
8354: ARRAY
8355: PUSH
8356: LD_INT 1
8358: ARRAY
8359: PPUSH
8360: LD_VAR 0 6
8364: PUSH
8365: LD_INT 3
8367: ARRAY
8368: PUSH
8369: LD_INT 2
8371: ARRAY
8372: PPUSH
8373: CALL_OW 297
8377: PUSH
8378: LD_INT 8
8380: GREATER
8381: IFFALSE 8420
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8383: LD_VAR 0 11
8387: PPUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_INT 3
8395: ARRAY
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PPUSH
8401: LD_VAR 0 6
8405: PUSH
8406: LD_INT 3
8408: ARRAY
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PPUSH
8414: CALL_OW 111
8418: GO 8480
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8420: LD_INT 81
8422: PUSH
8423: LD_INT 1
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 91
8432: PUSH
8433: LD_VAR 0 2
8437: PUSH
8438: LD_INT 10
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 69
8454: NOT
8455: IFFALSE 8480
// begin ComExitVehicle ( i ) ;
8457: LD_VAR 0 2
8461: PPUSH
8462: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8466: LD_VAR 0 2
8470: PPUSH
8471: LD_VAR 0 11
8475: PPUSH
8476: CALL_OW 189
// end ; end else
8480: GO 8674
// if GetLives ( i ) < 400 then
8482: LD_VAR 0 2
8486: PPUSH
8487: CALL_OW 256
8491: PUSH
8492: LD_INT 400
8494: LESS
8495: IFFALSE 8546
// begin usAttackers := usAttackers diff i ;
8497: LD_ADDR_EXP 47
8501: PUSH
8502: LD_EXP 47
8506: PUSH
8507: LD_VAR 0 2
8511: DIFF
8512: ST_TO_ADDR
// usForces := usForces union i ;
8513: LD_ADDR_EXP 44
8517: PUSH
8518: LD_EXP 44
8522: PUSH
8523: LD_VAR 0 2
8527: UNION
8528: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8529: LD_VAR 0 2
8533: PPUSH
8534: LD_INT 34
8536: PPUSH
8537: LD_INT 68
8539: PPUSH
8540: CALL_OW 111
// end else
8544: GO 8674
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8546: LD_VAR 0 10
8550: PPUSH
8551: LD_INT 58
8553: PUSH
8554: EMPTY
8555: LIST
8556: PUSH
8557: LD_INT 24
8559: PUSH
8560: LD_INT 1000
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 72
8575: PUSH
8576: LD_VAR 0 2
8580: PPUSH
8581: CALL_OW 314
8585: NOT
8586: AND
8587: PUSH
8588: LD_INT 81
8590: PUSH
8591: LD_INT 1
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 91
8600: PUSH
8601: LD_VAR 0 2
8605: PUSH
8606: LD_INT 9
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 69
8622: OR
8623: IFFALSE 8674
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8625: LD_VAR 0 2
8629: PPUSH
8630: LD_VAR 0 10
8634: PPUSH
8635: LD_INT 58
8637: PUSH
8638: EMPTY
8639: LIST
8640: PUSH
8641: LD_INT 24
8643: PUSH
8644: LD_INT 250
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 72
8659: PPUSH
8660: LD_VAR 0 2
8664: PPUSH
8665: CALL_OW 74
8669: PPUSH
8670: CALL_OW 120
// end else
8674: GO 8961
// begin if veh and GetLives ( veh ) < 760 then
8676: LD_VAR 0 11
8680: PUSH
8681: LD_VAR 0 11
8685: PPUSH
8686: CALL_OW 256
8690: PUSH
8691: LD_INT 760
8693: LESS
8694: AND
8695: IFFALSE 8746
// begin SetTag ( i , 0 ) ;
8697: LD_VAR 0 2
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8709: LD_VAR 0 11
8713: PPUSH
8714: LD_VAR 0 6
8718: PUSH
8719: LD_INT 3
8721: ARRAY
8722: PUSH
8723: LD_INT 1
8725: ARRAY
8726: PPUSH
8727: LD_VAR 0 6
8731: PUSH
8732: LD_INT 3
8734: ARRAY
8735: PUSH
8736: LD_INT 2
8738: ARRAY
8739: PPUSH
8740: CALL_OW 111
// end else
8744: GO 8961
// if veh then
8746: LD_VAR 0 11
8750: IFFALSE 8961
// if tag <= attackFormula [ 4 ] then
8752: LD_VAR 0 4
8756: PUSH
8757: LD_VAR 0 6
8761: PUSH
8762: LD_INT 4
8764: ARRAY
8765: LESSEQUAL
8766: IFFALSE 8927
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8768: LD_VAR 0 11
8772: PPUSH
8773: LD_VAR 0 6
8777: PUSH
8778: LD_INT 4
8780: ARRAY
8781: PUSH
8782: LD_VAR 0 4
8786: ARRAY
8787: PUSH
8788: LD_INT 1
8790: ARRAY
8791: PPUSH
8792: LD_VAR 0 6
8796: PUSH
8797: LD_INT 4
8799: ARRAY
8800: PUSH
8801: LD_VAR 0 4
8805: ARRAY
8806: PUSH
8807: LD_INT 2
8809: ARRAY
8810: PPUSH
8811: CALL_OW 297
8815: PUSH
8816: LD_INT 6
8818: GREATER
8819: IFFALSE 8870
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8821: LD_VAR 0 11
8825: PPUSH
8826: LD_VAR 0 6
8830: PUSH
8831: LD_INT 4
8833: ARRAY
8834: PUSH
8835: LD_VAR 0 4
8839: ARRAY
8840: PUSH
8841: LD_INT 1
8843: ARRAY
8844: PPUSH
8845: LD_VAR 0 6
8849: PUSH
8850: LD_INT 4
8852: ARRAY
8853: PUSH
8854: LD_VAR 0 4
8858: ARRAY
8859: PUSH
8860: LD_INT 2
8862: ARRAY
8863: PPUSH
8864: CALL_OW 114
8868: GO 8925
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8870: LD_INT 81
8872: PUSH
8873: LD_INT 1
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 91
8882: PUSH
8883: LD_VAR 0 11
8887: PUSH
8888: LD_INT 10
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PPUSH
8900: CALL_OW 69
8904: NOT
8905: IFFALSE 8925
// SetTag ( i , tag + 1 ) ;
8907: LD_VAR 0 2
8911: PPUSH
8912: LD_VAR 0 4
8916: PUSH
8917: LD_INT 1
8919: PLUS
8920: PPUSH
8921: CALL_OW 109
// end else
8925: GO 8961
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8927: LD_VAR 0 11
8931: PPUSH
8932: LD_INT 81
8934: PUSH
8935: LD_INT 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PPUSH
8942: CALL_OW 69
8946: PPUSH
8947: LD_VAR 0 2
8951: PPUSH
8952: CALL_OW 74
8956: PPUSH
8957: CALL_OW 115
// end ; end ;
8961: GO 8267
8963: POP
8964: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8965: LD_EXP 47
8969: PPUSH
8970: LD_INT 52
8972: PUSH
8973: EMPTY
8974: LIST
8975: PPUSH
8976: CALL_OW 72
8980: NOT
8981: IFFALSE 7446
// end ;
8983: LD_VAR 0 1
8987: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8988: LD_INT 22
8990: PUSH
8991: LD_INT 1
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 32
9000: PUSH
9001: LD_INT 1
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: IFFALSE 9093
9018: GO 9020
9020: DISABLE
9021: LD_INT 0
9023: PPUSH
// begin enable ;
9024: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9025: LD_ADDR_VAR 0 1
9029: PUSH
9030: LD_INT 22
9032: PUSH
9033: LD_INT 1
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 32
9042: PUSH
9043: LD_INT 1
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 69
9058: PUSH
9059: FOR_IN
9060: IFFALSE 9091
// if GetFuel ( i ) < 10 then
9062: LD_VAR 0 1
9066: PPUSH
9067: CALL_OW 261
9071: PUSH
9072: LD_INT 10
9074: LESS
9075: IFFALSE 9089
// SetFuel ( i , 10 ) ;
9077: LD_VAR 0 1
9081: PPUSH
9082: LD_INT 10
9084: PPUSH
9085: CALL_OW 240
9089: GO 9059
9091: POP
9092: POP
// end ; end_of_file
9093: PPOPN 1
9095: END
// export function Action ; var hasAll , i , tmp ; begin
9096: LD_INT 0
9098: PPUSH
9099: PPUSH
9100: PPUSH
9101: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9102: LD_ADDR_VAR 0 2
9106: PUSH
9107: LD_INT 22
9109: PUSH
9110: LD_INT 2
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 21
9119: PUSH
9120: LD_INT 1
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 23
9129: PUSH
9130: LD_INT 2
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 69
9146: PUSH
9147: LD_INT 7
9149: GREATEREQUAL
9150: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9151: LD_VAR 0 2
9155: PPUSH
9156: LD_STRING 03_HasAll
9158: PPUSH
9159: CALL_OW 39
// Video ( true ) ;
9163: LD_INT 1
9165: PPUSH
9166: CALL 73486 0 1
// CenterNowOnUnits ( Heike ) ;
9170: LD_EXP 28
9174: PPUSH
9175: CALL_OW 87
// wait ( 0 0$2 ) ;
9179: LD_INT 70
9181: PPUSH
9182: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9186: LD_EXP 36
9190: PPUSH
9191: LD_STRING DF-1-start
9193: PPUSH
9194: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9198: LD_EXP 28
9202: PPUSH
9203: LD_EXP 36
9207: PPUSH
9208: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9212: LD_EXP 28
9216: PPUSH
9217: LD_STRING DH-1-start
9219: PPUSH
9220: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9224: LD_EXP 37
9228: PPUSH
9229: LD_INT 92
9231: PPUSH
9232: LD_INT 21
9234: PPUSH
9235: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9239: LD_EXP 32
9243: PPUSH
9244: LD_INT 94
9246: PPUSH
9247: LD_INT 23
9249: PPUSH
9250: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9254: LD_EXP 40
9258: PUSH
9259: LD_INT 1
9261: ARRAY
9262: PPUSH
9263: LD_INT 90
9265: PPUSH
9266: LD_INT 23
9268: PPUSH
9269: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9273: LD_EXP 40
9277: PUSH
9278: LD_INT 2
9280: ARRAY
9281: PPUSH
9282: LD_INT 93
9284: PPUSH
9285: LD_INT 25
9287: PPUSH
9288: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9292: LD_EXP 40
9296: PPUSH
9297: LD_EXP 37
9301: PPUSH
9302: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9306: LD_EXP 37
9310: PUSH
9311: LD_EXP 32
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PPUSH
9320: LD_EXP 28
9324: PPUSH
9325: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9329: LD_EXP 28
9333: PPUSH
9334: LD_EXP 37
9338: PPUSH
9339: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9343: LD_INT 35
9345: PPUSH
9346: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9350: LD_EXP 37
9354: PPUSH
9355: LD_INT 92
9357: PPUSH
9358: LD_INT 21
9360: PPUSH
9361: CALL_OW 307
9365: IFFALSE 9343
// Say ( Omar , DO-1-start ) ;
9367: LD_EXP 37
9371: PPUSH
9372: LD_STRING DO-1-start
9374: PPUSH
9375: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9379: LD_EXP 28
9383: PPUSH
9384: LD_STRING DH-2-start
9386: PPUSH
9387: CALL_OW 88
// if hasAll then
9391: LD_VAR 0 2
9395: IFFALSE 9523
// begin Say ( Omar , DO-2-start ) ;
9397: LD_EXP 37
9401: PPUSH
9402: LD_STRING DO-2-start
9404: PPUSH
9405: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9409: LD_EXP 37
9413: PPUSH
9414: LD_STRING DO-3-start
9416: PPUSH
9417: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9421: LD_EXP 28
9425: PPUSH
9426: LD_STRING DH-3-start
9428: PPUSH
9429: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9433: LD_EXP 36
9437: PPUSH
9438: LD_STRING DF-2-start
9440: PPUSH
9441: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9445: LD_EXP 37
9449: PPUSH
9450: LD_EXP 36
9454: PPUSH
9455: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9459: LD_EXP 37
9463: PPUSH
9464: LD_STRING DO-4-start
9466: PPUSH
9467: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9471: LD_EXP 36
9475: PPUSH
9476: LD_STRING DF-3-start
9478: PPUSH
9479: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9483: LD_EXP 37
9487: PPUSH
9488: LD_STRING DO-5-start
9490: PPUSH
9491: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9495: LD_EXP 36
9499: PPUSH
9500: LD_STRING DF-4-start
9502: PPUSH
9503: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9507: LD_EXP 37
9511: PPUSH
9512: LD_EXP 28
9516: PPUSH
9517: CALL_OW 119
// end else
9521: GO 9623
// begin Say ( Omar , DO-2-start-a ) ;
9523: LD_EXP 37
9527: PPUSH
9528: LD_STRING DO-2-start-a
9530: PPUSH
9531: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9535: LD_EXP 37
9539: PPUSH
9540: LD_STRING DO-3-start-a
9542: PPUSH
9543: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9547: LD_EXP 28
9551: PPUSH
9552: LD_STRING DH-3-start-a
9554: PPUSH
9555: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9559: LD_EXP 36
9563: PPUSH
9564: LD_STRING DF-2-start-a
9566: PPUSH
9567: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9571: LD_EXP 37
9575: PPUSH
9576: LD_EXP 36
9580: PPUSH
9581: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9585: LD_EXP 37
9589: PPUSH
9590: LD_STRING DO-4-start-a
9592: PPUSH
9593: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9597: LD_EXP 36
9601: PPUSH
9602: LD_STRING DF-3-start-a
9604: PPUSH
9605: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9609: LD_EXP 37
9613: PPUSH
9614: LD_EXP 28
9618: PPUSH
9619: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9623: LD_INT 10
9625: PPUSH
9626: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9630: LD_EXP 37
9634: PPUSH
9635: LD_STRING DO-1-mission
9637: PPUSH
9638: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING DO-2-mission
9649: PPUSH
9650: CALL_OW 88
// if not hasAll then
9654: LD_VAR 0 2
9658: NOT
9659: IFFALSE 9673
// Say ( Omar , DO-3-mission ) ;
9661: LD_EXP 37
9665: PPUSH
9666: LD_STRING DO-3-mission
9668: PPUSH
9669: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9673: LD_EXP 37
9677: PPUSH
9678: LD_STRING DO-4-mission
9680: PPUSH
9681: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9685: LD_EXP 28
9689: PPUSH
9690: LD_STRING DH-1-mission
9692: PPUSH
9693: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9697: LD_EXP 36
9701: PPUSH
9702: LD_STRING DF-1-mission
9704: PPUSH
9705: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9709: LD_EXP 37
9713: PPUSH
9714: LD_STRING DO-5-mission
9716: PPUSH
9717: CALL_OW 88
// if not hasAll then
9721: LD_VAR 0 2
9725: NOT
9726: IFFALSE 9861
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9728: LD_ADDR_VAR 0 4
9732: PUSH
9733: LD_INT 22
9735: PUSH
9736: LD_INT 2
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 21
9745: PUSH
9746: LD_INT 1
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 23
9755: PUSH
9756: LD_INT 2
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: PPUSH
9768: CALL_OW 69
9772: ST_TO_ADDR
// for i := 7 downto tmp do
9773: LD_ADDR_VAR 0 3
9777: PUSH
9778: DOUBLE
9779: LD_INT 7
9781: INC
9782: ST_TO_ADDR
9783: LD_VAR 0 4
9787: PUSH
9788: FOR_DOWNTO
9789: IFFALSE 9859
// begin if omarSquad < 3 then
9791: LD_EXP 40
9795: PUSH
9796: LD_INT 3
9798: LESS
9799: IFFALSE 9803
// break ;
9801: GO 9859
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9803: LD_EXP 40
9807: PUSH
9808: LD_INT 3
9810: ARRAY
9811: PPUSH
9812: LD_INT 2
9814: PPUSH
9815: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9819: LD_ADDR_EXP 42
9823: PUSH
9824: LD_EXP 42
9828: PUSH
9829: LD_EXP 40
9833: PUSH
9834: LD_INT 3
9836: ARRAY
9837: UNION
9838: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9839: LD_ADDR_EXP 40
9843: PUSH
9844: LD_EXP 40
9848: PPUSH
9849: LD_INT 3
9851: PPUSH
9852: CALL_OW 3
9856: ST_TO_ADDR
// end ;
9857: GO 9788
9859: POP
9860: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9861: LD_EXP 37
9865: PUSH
9866: LD_EXP 40
9870: ADD
9871: PPUSH
9872: LD_INT 103
9874: PPUSH
9875: LD_INT 9
9877: PPUSH
9878: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9882: LD_VAR 0 2
9886: PUSH
9887: LD_EXP 33
9891: PPUSH
9892: CALL_OW 302
9896: AND
9897: IFFALSE 9958
// begin wait ( 0 0$3 ) ;
9899: LD_INT 105
9901: PPUSH
9902: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9906: LD_EXP 33
9910: PPUSH
9911: LD_EXP 36
9915: PPUSH
9916: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9920: LD_EXP 33
9924: PPUSH
9925: LD_STRING DK-1-side
9927: PPUSH
9928: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9932: LD_EXP 36
9936: PPUSH
9937: LD_EXP 33
9941: PPUSH
9942: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9946: LD_EXP 36
9950: PPUSH
9951: LD_STRING DF-1-side
9953: PPUSH
9954: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9958: LD_INT 22
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: PPUSH
9973: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9977: LD_EXP 36
9981: PUSH
9982: LD_EXP 39
9986: ADD
9987: PPUSH
9988: LD_INT 108
9990: PPUSH
9991: LD_INT 62
9993: PPUSH
9994: CALL_OW 111
// gameStarted := true ;
9998: LD_ADDR_EXP 3
10002: PUSH
10003: LD_INT 1
10005: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10006: LD_INT 105
10008: PPUSH
10009: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10013: LD_EXP 28
10017: PPUSH
10018: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10022: LD_EXP 28
10026: PPUSH
10027: LD_EXP 32
10031: PPUSH
10032: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 2
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PPUSH
10046: CALL_OW 69
10050: PUSH
10051: LD_EXP 28
10055: DIFF
10056: PPUSH
10057: LD_EXP 28
10061: PPUSH
10062: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10066: LD_EXP 28
10070: PPUSH
10071: LD_STRING DH-1-explore
10073: PPUSH
10074: CALL_OW 88
// if Givi then
10078: LD_EXP 29
10082: IFFALSE 10098
// Say ( Givi , DG-1-explore ) else
10084: LD_EXP 29
10088: PPUSH
10089: LD_STRING DG-1-explore
10091: PPUSH
10092: CALL_OW 88
10096: GO 10135
// if heikeSecondSquad then
10098: LD_EXP 42
10102: IFFALSE 10135
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10104: LD_EXP 42
10108: PPUSH
10109: LD_INT 26
10111: PUSH
10112: LD_INT 1
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PPUSH
10119: CALL_OW 72
10123: PUSH
10124: LD_INT 1
10126: ARRAY
10127: PPUSH
10128: LD_STRING DArm-1-explore
10130: PPUSH
10131: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10135: LD_EXP 32
10139: PPUSH
10140: LD_STRING DA-1-explore
10142: PPUSH
10143: CALL_OW 88
// if Sophia then
10147: LD_EXP 34
10151: IFFALSE 10229
// begin Say ( Sophia , DS-2-explore ) ;
10153: LD_EXP 34
10157: PPUSH
10158: LD_STRING DS-2-explore
10160: PPUSH
10161: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10165: LD_EXP 32
10169: PPUSH
10170: LD_STRING DA-2-explore
10172: PPUSH
10173: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10177: LD_EXP 34
10181: PPUSH
10182: LD_EXP 32
10186: PPUSH
10187: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10191: LD_EXP 32
10195: PPUSH
10196: LD_EXP 34
10200: PPUSH
10201: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10205: LD_EXP 34
10209: PPUSH
10210: LD_STRING DS-3-explore
10212: PPUSH
10213: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10217: LD_EXP 32
10221: PPUSH
10222: LD_STRING DA-3-explore
10224: PPUSH
10225: CALL_OW 88
// end ; if Mike then
10229: LD_EXP 30
10233: IFFALSE 10289
// begin Say ( Mike , DM-1-explore ) ;
10235: LD_EXP 30
10239: PPUSH
10240: LD_STRING DM-1-explore
10242: PPUSH
10243: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10247: LD_EXP 28
10251: PPUSH
10252: LD_STRING DH-2-explore
10254: PPUSH
10255: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10259: LD_EXP 30
10263: PPUSH
10264: LD_STRING DM-2-explore
10266: PPUSH
10267: CALL_OW 88
// if Kaia then
10271: LD_EXP 33
10275: IFFALSE 10289
// Say ( Kaia , DK-1-explore ) ;
10277: LD_EXP 33
10281: PPUSH
10282: LD_STRING DK-1-explore
10284: PPUSH
10285: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10289: LD_INT 22
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: PPUSH
10304: CALL_OW 139
// Video ( false ) ;
10308: LD_INT 0
10310: PPUSH
10311: CALL 73486 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10315: LD_STRING BuildBase
10317: PPUSH
10318: CALL_OW 337
// SaveForQuickRestart ;
10322: CALL_OW 22
// end ;
10326: LD_VAR 0 1
10330: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10331: LD_EXP 5
10335: NOT
10336: PUSH
10337: LD_EXP 6
10341: NOT
10342: AND
10343: PUSH
10344: LD_INT 5
10346: PPUSH
10347: LD_INT 22
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 70
10361: AND
10362: PUSH
10363: LD_EXP 6
10367: NOT
10368: AND
10369: IFFALSE 10454
10371: GO 10373
10373: DISABLE
// begin if Mike then
10374: LD_EXP 30
10378: IFFALSE 10394
// Say ( Mike , DM-1-scout ) else
10380: LD_EXP 30
10384: PPUSH
10385: LD_STRING DM-1-scout
10387: PPUSH
10388: CALL_OW 88
10392: GO 10425
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10394: LD_EXP 42
10398: PPUSH
10399: LD_INT 26
10401: PUSH
10402: LD_INT 1
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PPUSH
10409: CALL_OW 72
10413: PUSH
10414: LD_INT 1
10416: ARRAY
10417: PPUSH
10418: LD_STRING DArm-1-explore
10420: PPUSH
10421: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10425: LD_INT 54
10427: PPUSH
10428: LD_INT 35
10430: PPUSH
10431: LD_INT 2
10433: PPUSH
10434: LD_INT 1
10436: PPUSH
10437: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10441: LD_INT 54
10443: PPUSH
10444: LD_INT 35
10446: PPUSH
10447: LD_INT 2
10449: PPUSH
10450: CALL_OW 331
// end ;
10454: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10455: LD_INT 6
10457: PPUSH
10458: LD_INT 22
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 70
10472: PUSH
10473: LD_EXP 6
10477: NOT
10478: AND
10479: IFFALSE 10733
10481: GO 10483
10483: DISABLE
10484: LD_INT 0
10486: PPUSH
10487: PPUSH
10488: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10489: LD_ADDR_VAR 0 1
10493: PUSH
10494: LD_EXP 42
10498: PPUSH
10499: LD_INT 26
10501: PUSH
10502: LD_INT 1
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PPUSH
10509: CALL_OW 72
10513: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10514: LD_ADDR_VAR 0 2
10518: PUSH
10519: LD_EXP 42
10523: PPUSH
10524: LD_INT 26
10526: PUSH
10527: LD_INT 2
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PPUSH
10534: CALL_OW 72
10538: ST_TO_ADDR
// DialogueOn ;
10539: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10543: LD_INT 36
10545: PPUSH
10546: LD_INT 22
10548: PPUSH
10549: LD_INT 2
10551: PPUSH
10552: LD_INT 8
10554: PPUSH
10555: CALL_OW 330
// dwait ( 0 0$1 ) ;
10559: LD_INT 35
10561: PPUSH
10562: CALL_OW 68
// speakerOk := false ;
10566: LD_ADDR_VAR 0 3
10570: PUSH
10571: LD_INT 0
10573: ST_TO_ADDR
// if Mike then
10574: LD_EXP 30
10578: IFFALSE 10600
// speakerOk := Say ( Mike , DM-1-spot ) else
10580: LD_ADDR_VAR 0 3
10584: PUSH
10585: LD_EXP 30
10589: PPUSH
10590: LD_STRING DM-1-spot
10592: PPUSH
10593: CALL_OW 88
10597: ST_TO_ADDR
10598: GO 10628
// if randomMen then
10600: LD_VAR 0 1
10604: IFFALSE 10628
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10606: LD_ADDR_VAR 0 3
10610: PUSH
10611: LD_VAR 0 1
10615: PUSH
10616: LD_INT 1
10618: ARRAY
10619: PPUSH
10620: LD_STRING DArm-1-spot-a
10622: PPUSH
10623: CALL_OW 88
10627: ST_TO_ADDR
// if speakerOk then
10628: LD_VAR 0 3
10632: IFFALSE 10676
// begin if Givi then
10634: LD_EXP 29
10638: IFFALSE 10654
// Say ( Givi , DG-1-spot ) else
10640: LD_EXP 29
10644: PPUSH
10645: LD_STRING DG-1-spot
10647: PPUSH
10648: CALL_OW 88
10652: GO 10676
// if randomWomen then
10654: LD_VAR 0 2
10658: IFFALSE 10676
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10660: LD_VAR 0 2
10664: PUSH
10665: LD_INT 1
10667: ARRAY
10668: PPUSH
10669: LD_STRING DArf-1-spot-a
10671: PPUSH
10672: CALL_OW 88
// end ; if Mike then
10676: LD_EXP 30
10680: IFFALSE 10696
// Say ( Heike , DH-1-spot ) else
10682: LD_EXP 28
10686: PPUSH
10687: LD_STRING DH-1-spot
10689: PPUSH
10690: CALL_OW 88
10694: GO 10708
// Say ( Heike , DH-1-spot-a ) ;
10696: LD_EXP 28
10700: PPUSH
10701: LD_STRING DH-1-spot-a
10703: PPUSH
10704: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10708: LD_INT 36
10710: PPUSH
10711: LD_INT 22
10713: PPUSH
10714: LD_INT 2
10716: PPUSH
10717: CALL_OW 331
// DialogueOff ;
10721: CALL_OW 7
// americanBaseSpoted := true ;
10725: LD_ADDR_EXP 5
10729: PUSH
10730: LD_INT 1
10732: ST_TO_ADDR
// end ;
10733: PPOPN 3
10735: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10736: LD_EXP 5
10740: NOT
10741: PUSH
10742: LD_INT 22
10744: PUSH
10745: LD_INT 2
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 101
10754: PUSH
10755: LD_INT 1
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 69
10770: AND
10771: PUSH
10772: LD_EXP 6
10776: NOT
10777: AND
10778: IFFALSE 10864
10780: GO 10782
10782: DISABLE
10783: LD_INT 0
10785: PPUSH
// begin americanBaseSpoted := true ;
10786: LD_ADDR_EXP 5
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10794: LD_ADDR_VAR 0 1
10798: PUSH
10799: LD_EXP 42
10803: PPUSH
10804: LD_INT 26
10806: PUSH
10807: LD_INT 1
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 72
10818: ST_TO_ADDR
// if not randomMen then
10819: LD_VAR 0 1
10823: NOT
10824: IFFALSE 10828
// exit ;
10826: GO 10864
// DialogueOn ;
10828: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10832: LD_VAR 0 1
10836: PUSH
10837: LD_INT 1
10839: ARRAY
10840: PPUSH
10841: LD_STRING DArm-1-spot-a
10843: PPUSH
10844: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10848: LD_EXP 28
10852: PPUSH
10853: LD_STRING DH-1-spot-a
10855: PPUSH
10856: CALL_OW 88
// DialogueOff ;
10860: CALL_OW 7
// end ;
10864: PPOPN 1
10866: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10867: LD_INT 11
10869: PPUSH
10870: CALL_OW 255
10874: PUSH
10875: LD_INT 2
10877: EQUAL
10878: PUSH
10879: LD_INT 7
10881: PPUSH
10882: LD_INT 22
10884: PUSH
10885: LD_INT 1
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: LD_INT 50
10897: PUSH
10898: EMPTY
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 30
10907: PUSH
10908: LD_INT 31
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: PPUSH
10920: CALL_OW 70
10924: OR
10925: PUSH
10926: LD_INT 7
10928: PPUSH
10929: LD_INT 22
10931: PUSH
10932: LD_INT 2
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PPUSH
10939: CALL_OW 70
10943: PUSH
10944: LD_INT 1
10946: GREATER
10947: OR
10948: PUSH
10949: LD_EXP 44
10953: PUSH
10954: LD_INT 4
10956: LESSEQUAL
10957: OR
10958: IFFALSE 11537
10960: GO 10962
10962: DISABLE
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
// begin wait ( 0 0$3 ) ;
10967: LD_INT 105
10969: PPUSH
10970: CALL_OW 67
// americanStartRun := true ;
10974: LD_ADDR_EXP 14
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// if IsOk ( usCommander ) then
10982: LD_EXP 45
10986: PPUSH
10987: CALL_OW 302
10991: IFFALSE 11021
// begin usForces := usForces union usCommander ;
10993: LD_ADDR_EXP 44
10997: PUSH
10998: LD_EXP 44
11002: PUSH
11003: LD_EXP 45
11007: UNION
11008: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11009: LD_EXP 45
11013: PPUSH
11014: LD_STRING DUsm-1-assault
11016: PPUSH
11017: CALL_OW 88
// end ; for i in usForces do
11021: LD_ADDR_VAR 0 1
11025: PUSH
11026: LD_EXP 44
11030: PUSH
11031: FOR_IN
11032: IFFALSE 11078
// begin if IsInUnit ( i ) then
11034: LD_VAR 0 1
11038: PPUSH
11039: CALL_OW 310
11043: IFFALSE 11054
// ComExitBuilding ( i ) ;
11045: LD_VAR 0 1
11049: PPUSH
11050: CALL_OW 122
// wait ( 3 ) ;
11054: LD_INT 3
11056: PPUSH
11057: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11061: LD_VAR 0 1
11065: PPUSH
11066: LD_INT 34
11068: PPUSH
11069: LD_INT 67
11071: PPUSH
11072: CALL_OW 111
// end ;
11076: GO 11031
11078: POP
11079: POP
// Say ( Heike , DH-1-assault ) ;
11080: LD_EXP 28
11084: PPUSH
11085: LD_STRING DH-1-assault
11087: PPUSH
11088: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11092: LD_INT 35
11094: PPUSH
11095: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11099: LD_VAR 0 1
11103: PPUSH
11104: LD_INT 34
11106: PPUSH
11107: LD_INT 67
11109: PPUSH
11110: CALL_OW 111
// until not usForces ;
11114: LD_EXP 44
11118: NOT
11119: IFFALSE 11092
// music_nat := 2 ;
11121: LD_ADDR_OWVAR 71
11125: PUSH
11126: LD_INT 2
11128: ST_TO_ADDR
// music_class := music_victory ;
11129: LD_ADDR_OWVAR 72
11133: PUSH
11134: LD_INT 4
11136: ST_TO_ADDR
// if not americanHasEscaped then
11137: LD_EXP 8
11141: NOT
11142: IFFALSE 11163
// begin Say ( Heike , DH-2-assault ) ;
11144: LD_EXP 28
11148: PPUSH
11149: LD_STRING DH-2-assault
11151: PPUSH
11152: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11156: LD_STRING ACH_CLEAN
11158: PPUSH
11159: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11163: LD_INT 70
11165: PPUSH
11166: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11170: LD_INT 35
11172: PPUSH
11173: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11177: LD_INT 22
11179: PUSH
11180: LD_INT 2
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 21
11189: PUSH
11190: LD_INT 1
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 3
11199: PUSH
11200: LD_INT 50
11202: PUSH
11203: EMPTY
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: PPUSH
11215: CALL_OW 69
11219: NOT
11220: IFFALSE 11170
// InGameOn ;
11222: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11226: LD_INT 11
11228: PPUSH
11229: CALL_OW 255
11233: PUSH
11234: LD_INT 2
11236: EQUAL
11237: NOT
11238: IFFALSE 11250
// SetSide ( usDepot , 2 ) ;
11240: LD_INT 11
11242: PPUSH
11243: LD_INT 2
11245: PPUSH
11246: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11250: LD_INT 35
11252: PPUSH
11253: LD_INT 22
11255: PPUSH
11256: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11260: LD_EXP 28
11264: PPUSH
11265: LD_INT 35
11267: PPUSH
11268: LD_INT 22
11270: PPUSH
11271: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11275: LD_EXP 28
11279: PPUSH
11280: LD_INT 38
11282: PPUSH
11283: LD_INT 25
11285: PPUSH
11286: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11290: LD_EXP 41
11294: PUSH
11295: LD_EXP 42
11299: UNION
11300: PPUSH
11301: LD_INT 39
11303: PPUSH
11304: LD_INT 26
11306: PPUSH
11307: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11311: LD_EXP 41
11315: PUSH
11316: LD_EXP 42
11320: UNION
11321: PPUSH
11322: LD_EXP 28
11326: PPUSH
11327: CALL_OW 179
// p := 0 ;
11331: LD_ADDR_VAR 0 2
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11339: LD_INT 35
11341: PPUSH
11342: CALL_OW 67
// p := p + 1 ;
11346: LD_ADDR_VAR 0 2
11350: PUSH
11351: LD_VAR 0 2
11355: PUSH
11356: LD_INT 1
11358: PLUS
11359: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11360: LD_EXP 28
11364: PPUSH
11365: CALL_OW 314
11369: NOT
11370: PUSH
11371: LD_VAR 0 2
11375: PUSH
11376: LD_INT 10
11378: GREATER
11379: OR
11380: IFFALSE 11339
// Say ( Heike , DH-1-capture ) ;
11382: LD_EXP 28
11386: PPUSH
11387: LD_STRING DH-1-capture
11389: PPUSH
11390: CALL_OW 88
// if Markov then
11394: LD_EXP 35
11398: IFFALSE 11412
// Say ( Markov , DMar-1-capture ) ;
11400: LD_EXP 35
11404: PPUSH
11405: LD_STRING DMar-1-capture
11407: PPUSH
11408: CALL_OW 88
// if Sophia then
11412: LD_EXP 34
11416: IFFALSE 11442
// begin Say ( Heike , DH-2-capture ) ;
11418: LD_EXP 28
11422: PPUSH
11423: LD_STRING DH-2-capture
11425: PPUSH
11426: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11430: LD_EXP 34
11434: PPUSH
11435: LD_STRING DS-1-capture
11437: PPUSH
11438: CALL_OW 88
// end ; InGameOff ;
11442: CALL_OW 9
// music_nat := music_auto ;
11446: LD_ADDR_OWVAR 71
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// music_class := music_auto ;
11454: LD_ADDR_OWVAR 72
11458: PUSH
11459: LD_INT 0
11461: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11462: LD_STRING ConstructBase
11464: PPUSH
11465: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11469: LD_ADDR_VAR 0 1
11473: PUSH
11474: LD_INT 22
11476: PUSH
11477: LD_INT 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 21
11486: PUSH
11487: LD_INT 3
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PPUSH
11498: CALL_OW 69
11502: PUSH
11503: FOR_IN
11504: IFFALSE 11520
// SetSide ( i , 2 ) ;
11506: LD_VAR 0 1
11510: PPUSH
11511: LD_INT 2
11513: PPUSH
11514: CALL_OW 235
11518: GO 11503
11520: POP
11521: POP
// wait ( 0 0$3 ) ;
11522: LD_INT 105
11524: PPUSH
11525: CALL_OW 67
// americanBaseCaptured := true ;
11529: LD_ADDR_EXP 6
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// end ;
11537: PPOPN 2
11539: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11540: LD_EXP 13
11544: PUSH
11545: LD_INT 3
11547: GREATEREQUAL
11548: IFFALSE 11560
11550: GO 11552
11552: DISABLE
// SetAchievement ( ACH_ENG ) ;
11553: LD_STRING ACH_ENG
11555: PPUSH
11556: CALL_OW 543
11560: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11561: LD_INT 22
11563: PUSH
11564: LD_INT 2
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 25
11573: PUSH
11574: LD_INT 15
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PPUSH
11585: CALL_OW 69
11589: PUSH
11590: LD_INT 4
11592: GREATEREQUAL
11593: IFFALSE 11605
11595: GO 11597
11597: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11598: LD_STRING ACH_APEGEN
11600: PPUSH
11601: CALL_OW 543
11605: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11606: LD_INT 22
11608: PUSH
11609: LD_INT 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 30
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 3
11628: PUSH
11629: LD_INT 57
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: PPUSH
11644: CALL_OW 69
11648: IFFALSE 11913
11650: GO 11652
11652: DISABLE
// begin workshopBuilded := true ;
11653: LD_ADDR_EXP 10
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// if IsOk ( Markov ) then
11661: LD_EXP 35
11665: PPUSH
11666: CALL_OW 302
11670: IFFALSE 11729
// begin Say ( Heike , DH-1-shop-a ) ;
11672: LD_EXP 28
11676: PPUSH
11677: LD_STRING DH-1-shop-a
11679: PPUSH
11680: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11684: LD_INT 47
11686: PPUSH
11687: LD_INT 2
11689: PPUSH
11690: CALL_OW 321
11694: PUSH
11695: LD_INT 2
11697: EQUAL
11698: PUSH
11699: LD_INT 45
11701: PPUSH
11702: LD_INT 2
11704: PPUSH
11705: CALL_OW 321
11709: PUSH
11710: LD_INT 2
11712: EQUAL
11713: AND
11714: NOT
11715: IFFALSE 11729
// Say ( Markov , DMar-1-shop-a ) ;
11717: LD_EXP 35
11721: PPUSH
11722: LD_STRING DMar-1-shop-a
11724: PPUSH
11725: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11729: LD_INT 35
11731: PPUSH
11732: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11736: LD_INT 47
11738: PPUSH
11739: LD_INT 2
11741: PPUSH
11742: CALL_OW 321
11746: PUSH
11747: LD_INT 2
11749: EQUAL
11750: PUSH
11751: LD_INT 45
11753: PPUSH
11754: LD_INT 2
11756: PPUSH
11757: CALL_OW 321
11761: PUSH
11762: LD_INT 2
11764: EQUAL
11765: OR
11766: IFFALSE 11729
// if IsOk ( Markov ) and IsOk ( Heike ) then
11768: LD_EXP 35
11772: PPUSH
11773: CALL_OW 302
11777: PUSH
11778: LD_EXP 28
11782: PPUSH
11783: CALL_OW 302
11787: AND
11788: IFFALSE 11906
// begin DialogueOn ;
11790: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11794: LD_EXP 35
11798: PPUSH
11799: LD_STRING DMar-1-shop
11801: PPUSH
11802: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11806: LD_EXP 28
11810: PPUSH
11811: LD_STRING DH-1-shop
11813: PPUSH
11814: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11818: LD_EXP 35
11822: PPUSH
11823: LD_STRING DMar-2-shop
11825: PPUSH
11826: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11830: LD_EXP 35
11834: PPUSH
11835: LD_STRING DMar-3-shop
11837: PPUSH
11838: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11842: LD_EXP 28
11846: PPUSH
11847: LD_STRING DH-2-shop
11849: PPUSH
11850: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11854: LD_EXP 35
11858: PPUSH
11859: LD_STRING DMar-4-shop
11861: PPUSH
11862: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11866: LD_EXP 28
11870: PPUSH
11871: LD_STRING DH-3-shop
11873: PPUSH
11874: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11878: LD_EXP 35
11882: PPUSH
11883: LD_STRING DMar-5-shop
11885: PPUSH
11886: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11890: LD_EXP 28
11894: PPUSH
11895: LD_STRING DH-4-shop
11897: PPUSH
11898: CALL_OW 88
// DialogueOff ;
11902: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
11906: LD_STRING ConstructVeh
11908: PPUSH
11909: CALL_OW 337
// end ;
11913: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11914: LD_INT 2
11916: PPUSH
11917: LD_INT 2
11919: PPUSH
11920: LD_INT 1
11922: PPUSH
11923: CALL 36840 0 3
11927: PUSH
11928: LD_INT 0
11930: EQUAL
11931: IFFALSE 11943
11933: GO 11935
11935: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11936: LD_STRING Techs
11938: PPUSH
11939: CALL_OW 337
11943: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11944: LD_EXP 35
11948: PPUSH
11949: CALL_OW 302
11953: PUSH
11954: LD_INT 22
11956: PUSH
11957: LD_INT 2
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 2
11966: PUSH
11967: LD_INT 34
11969: PUSH
11970: LD_INT 22
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 35
11979: PUSH
11980: LD_INT 22
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PPUSH
11996: CALL_OW 69
12000: AND
12001: IFFALSE 12108
12003: GO 12005
12005: DISABLE
// begin DialogueOn ;
12006: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12010: LD_INT 22
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 2
12022: PUSH
12023: LD_INT 34
12025: PUSH
12026: LD_INT 22
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 35
12035: PUSH
12036: LD_INT 22
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PPUSH
12052: CALL_OW 69
12056: PPUSH
12057: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12061: LD_INT 10
12063: PPUSH
12064: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12068: LD_EXP 28
12072: PPUSH
12073: LD_STRING DH-1-bal
12075: PPUSH
12076: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12080: LD_EXP 35
12084: PPUSH
12085: LD_STRING DMar-1-bal
12087: PPUSH
12088: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12092: LD_EXP 28
12096: PPUSH
12097: LD_STRING DH-2-bal
12099: PPUSH
12100: CALL_OW 88
// DialogueOff ;
12104: CALL_OW 7
// end ;
12108: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12109: LD_EXP 32
12113: PPUSH
12114: CALL_OW 302
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_INT 2
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 30
12131: PUSH
12132: LD_INT 6
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: AND
12148: IFFALSE 12209
12150: GO 12152
12152: DISABLE
// begin DialogueOn ;
12153: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12157: LD_EXP 32
12161: PPUSH
12162: LD_STRING DA-1-lab
12164: PPUSH
12165: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12169: LD_EXP 28
12173: PPUSH
12174: LD_STRING DH-1-lab
12176: PPUSH
12177: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12181: LD_EXP 32
12185: PPUSH
12186: LD_STRING DA-2-lab
12188: PPUSH
12189: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12193: LD_EXP 28
12197: PPUSH
12198: LD_STRING DH-2-lab
12200: PPUSH
12201: CALL_OW 88
// DialogueOff ;
12205: CALL_OW 7
// end ;
12209: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12210: LD_EXP 33
12214: PPUSH
12215: CALL_OW 302
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 25
12232: PUSH
12233: LD_INT 15
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: AND
12249: PUSH
12250: LD_INT 81
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 69
12264: NOT
12265: AND
12266: IFFALSE 12448
12268: GO 12270
12270: DISABLE
12271: LD_INT 0
12273: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12274: LD_ADDR_VAR 0 1
12278: PUSH
12279: LD_INT 22
12281: PUSH
12282: LD_INT 2
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: LD_INT 25
12291: PUSH
12292: LD_INT 15
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PPUSH
12303: CALL_OW 69
12307: ST_TO_ADDR
// InGameOn ;
12308: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12312: LD_VAR 0 1
12316: PUSH
12317: LD_INT 1
12319: ARRAY
12320: PPUSH
12321: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12325: LD_VAR 0 1
12329: PUSH
12330: LD_INT 1
12332: ARRAY
12333: PPUSH
12334: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12338: LD_EXP 33
12342: PPUSH
12343: LD_STRING DK-1-apesol
12345: PPUSH
12346: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12350: LD_VAR 0 1
12354: PUSH
12355: LD_INT 1
12357: ARRAY
12358: PPUSH
12359: LD_INT 35
12361: PPUSH
12362: LD_INT 28
12364: PPUSH
12365: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12369: LD_VAR 0 1
12373: PUSH
12374: LD_INT 1
12376: ARRAY
12377: PPUSH
12378: LD_INT 36
12380: PPUSH
12381: LD_INT 17
12383: PPUSH
12384: CALL_OW 171
// DialogueOn ;
12388: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12392: LD_EXP 32
12396: PPUSH
12397: LD_STRING DA-1-apesol
12399: PPUSH
12400: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12404: LD_EXP 33
12408: PPUSH
12409: LD_STRING DK-2-apesol
12411: PPUSH
12412: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12416: LD_EXP 32
12420: PPUSH
12421: LD_STRING DA-2-apesol
12423: PPUSH
12424: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12428: LD_EXP 33
12432: PPUSH
12433: LD_STRING DK-3-apesol
12435: PPUSH
12436: CALL_OW 88
// DialogueOff ;
12440: CALL_OW 7
// InGameOff ;
12444: CALL_OW 9
// end ;
12448: PPOPN 1
12450: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12451: LD_EXP 34
12455: PPUSH
12456: CALL_OW 302
12460: PUSH
12461: LD_INT 22
12463: PUSH
12464: LD_INT 2
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 25
12473: PUSH
12474: LD_INT 16
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PPUSH
12485: CALL_OW 69
12489: AND
12490: PUSH
12491: LD_INT 81
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PPUSH
12501: CALL_OW 69
12505: NOT
12506: AND
12507: IFFALSE 12792
12509: GO 12511
12511: DISABLE
12512: LD_INT 0
12514: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12515: LD_ADDR_VAR 0 1
12519: PUSH
12520: LD_INT 22
12522: PUSH
12523: LD_INT 2
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 25
12532: PUSH
12533: LD_INT 16
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PPUSH
12544: CALL_OW 69
12548: ST_TO_ADDR
// InGameOn ;
12549: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12553: LD_INT 35
12555: PPUSH
12556: LD_INT 22
12558: PPUSH
12559: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12563: LD_INT 5
12565: PPUSH
12566: LD_INT 35
12568: PPUSH
12569: LD_INT 22
12571: PPUSH
12572: LD_INT 1
12574: PPUSH
12575: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12579: LD_EXP 34
12583: PPUSH
12584: LD_VAR 0 1
12588: PUSH
12589: LD_INT 1
12591: ARRAY
12592: PPUSH
12593: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12597: LD_VAR 0 1
12601: PUSH
12602: LD_INT 1
12604: ARRAY
12605: PPUSH
12606: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12610: LD_VAR 0 1
12614: PUSH
12615: LD_INT 1
12617: ARRAY
12618: PPUSH
12619: CALL_OW 122
// wait ( 0 0$2 ) ;
12623: LD_INT 70
12625: PPUSH
12626: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12630: LD_EXP 34
12634: PPUSH
12635: LD_STRING DS-1-apeeng
12637: PPUSH
12638: CALL_OW 88
// if IsOk ( Kamil ) then
12642: LD_EXP 31
12646: PPUSH
12647: CALL_OW 302
12651: IFFALSE 12788
// begin Say ( Kamil , DKam-1-apeeng ) ;
12653: LD_EXP 31
12657: PPUSH
12658: LD_STRING DKam-1-apeeng
12660: PPUSH
12661: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12665: LD_EXP 34
12669: PPUSH
12670: LD_STRING DS-2-apeeng
12672: PPUSH
12673: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12677: LD_EXP 31
12681: PPUSH
12682: LD_STRING DKam-2-apeeng
12684: PPUSH
12685: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12689: LD_EXP 34
12693: PPUSH
12694: LD_STRING DS-3-apeeng
12696: PPUSH
12697: CALL_OW 88
// if not IsOK ( Kaia ) then
12701: LD_EXP 33
12705: PPUSH
12706: CALL_OW 302
12710: NOT
12711: IFFALSE 12719
// begin InGameOff ;
12713: CALL_OW 9
// exit ;
12717: GO 12792
// end ; Say ( Kaia , DK-1-apeeng ) ;
12719: LD_EXP 33
12723: PPUSH
12724: LD_STRING DK-1-apeeng
12726: PPUSH
12727: CALL_OW 88
// if not IsOk ( Givi ) then
12731: LD_EXP 29
12735: PPUSH
12736: CALL_OW 302
12740: NOT
12741: IFFALSE 12752
// begin Video ( false ) ;
12743: LD_INT 0
12745: PPUSH
12746: CALL 73486 0 1
// exit ;
12750: GO 12792
// end ; Say ( Givi , DG-1-apeeng ) ;
12752: LD_EXP 29
12756: PPUSH
12757: LD_STRING DG-1-apeeng
12759: PPUSH
12760: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12764: LD_EXP 33
12768: PPUSH
12769: LD_STRING DK-2-apeeng
12771: PPUSH
12772: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
12776: LD_EXP 33
12780: PPUSH
12781: LD_STRING DK-3-apeeng
12783: PPUSH
12784: CALL_OW 88
// end ; InGameOff ;
12788: CALL_OW 9
// end ;
12792: PPOPN 1
12794: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12795: LD_EXP 4
12799: PUSH
12800: LD_INT 22
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 30
12812: PUSH
12813: LD_INT 0
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PPUSH
12824: CALL_OW 69
12828: AND
12829: IFFALSE 12994
12831: GO 12833
12833: DISABLE
// begin wait ( 0 0$10 ) ;
12834: LD_INT 350
12836: PPUSH
12837: CALL_OW 67
// DialogueOn ;
12841: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12845: LD_EXP 36
12849: PPUSH
12850: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12854: LD_EXP 36
12858: PPUSH
12859: LD_STRING DF-1-distribution
12861: PPUSH
12862: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12866: LD_EXP 28
12870: PPUSH
12871: LD_STRING DH-2-distribution
12873: PPUSH
12874: CALL_OW 88
// if IsOk ( Kaia ) then
12878: LD_EXP 33
12882: PPUSH
12883: CALL_OW 302
12887: IFFALSE 12948
// begin Say ( Kaia , DK-1-distribution ) ;
12889: LD_EXP 33
12893: PPUSH
12894: LD_STRING DK-1-distribution
12896: PPUSH
12897: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12901: LD_EXP 28
12905: PPUSH
12906: LD_STRING DH-1-distribution
12908: PPUSH
12909: CALL_OW 88
// if IsOk ( Givi ) then
12913: LD_EXP 29
12917: PPUSH
12918: CALL_OW 302
12922: IFFALSE 12948
// begin Say ( Givi , DG-1-distribution ) ;
12924: LD_EXP 29
12928: PPUSH
12929: LD_STRING DG-1-distribution
12931: PPUSH
12932: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12936: LD_EXP 28
12940: PPUSH
12941: LD_STRING DH-3-distribution
12943: PPUSH
12944: CALL_OW 88
// end ; end ; DialogueOff ;
12948: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12952: LD_STRING Crates1
12954: PPUSH
12955: CALL_OW 337
// farmerRequestedCrates := 300 ;
12959: LD_ADDR_EXP 16
12963: PUSH
12964: LD_INT 300
12966: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12967: LD_STRING FarmerCrates
12969: PPUSH
12970: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12974: LD_INT 10
12976: PPUSH
12977: LD_INT 1
12979: PPUSH
12980: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12984: LD_INT 108
12986: PPUSH
12987: LD_INT 61
12989: PPUSH
12990: CALL_OW 86
// end ;
12994: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12995: LD_EXP 6
12999: PUSH
13000: LD_INT 22
13002: PUSH
13003: LD_INT 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 3
13012: PUSH
13013: LD_INT 57
13015: PUSH
13016: EMPTY
13017: LIST
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: LD_INT 30
13028: PUSH
13029: LD_INT 6
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 30
13038: PUSH
13039: LD_INT 7
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: PPUSH
13056: CALL_OW 69
13060: AND
13061: PUSH
13062: LD_INT 22
13064: PUSH
13065: LD_INT 2
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 3
13074: PUSH
13075: LD_INT 57
13077: PUSH
13078: EMPTY
13079: LIST
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 30
13087: PUSH
13088: LD_INT 4
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: PPUSH
13100: CALL_OW 69
13104: AND
13105: IFFALSE 13269
13107: GO 13109
13109: DISABLE
13110: LD_INT 0
13112: PPUSH
// begin wait ( 0 0$10 ) ;
13113: LD_INT 350
13115: PPUSH
13116: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13120: LD_ADDR_VAR 0 1
13124: PUSH
13125: LD_EXP 42
13129: PPUSH
13130: LD_INT 26
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 25
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 72
13158: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13159: LD_EXP 28
13163: PPUSH
13164: LD_STRING DH-1-task
13166: PPUSH
13167: CALL_OW 88
// if IsOk ( Sophia ) then
13171: LD_EXP 34
13175: PPUSH
13176: CALL_OW 302
13180: IFFALSE 13220
// begin Say ( Sophia , DS-1-task ) ;
13182: LD_EXP 34
13186: PPUSH
13187: LD_STRING DS-1-task
13189: PPUSH
13190: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13194: LD_EXP 34
13198: PPUSH
13199: LD_STRING DS-2-task
13201: PPUSH
13202: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13206: LD_EXP 28
13210: PPUSH
13211: LD_STRING DH-2-task
13213: PPUSH
13214: CALL_OW 88
// end else
13218: GO 13254
// if eng then
13220: LD_VAR 0 1
13224: IFFALSE 13254
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13226: LD_VAR 0 1
13230: PUSH
13231: LD_INT 1
13233: ARRAY
13234: PPUSH
13235: LD_STRING DArm-1-task
13237: PPUSH
13238: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13242: LD_EXP 28
13246: PPUSH
13247: LD_STRING DH-2-task
13249: PPUSH
13250: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13254: LD_STRING BaseConstructed
13256: PPUSH
13257: CALL_OW 337
// allowConvoys := true ;
13261: LD_ADDR_EXP 12
13265: PUSH
13266: LD_INT 1
13268: ST_TO_ADDR
// end ;
13269: PPOPN 1
13271: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13272: LD_INT 22
13274: PUSH
13275: LD_INT 4
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 34
13284: PUSH
13285: LD_INT 12
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PPUSH
13296: CALL_OW 69
13300: IFFALSE 13468
13302: GO 13304
13304: DISABLE
13305: LD_INT 0
13307: PPUSH
13308: PPUSH
13309: PPUSH
// begin wait ( 0 0$2 ) ;
13310: LD_INT 70
13312: PPUSH
13313: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13317: LD_ADDR_VAR 0 1
13321: PUSH
13322: LD_INT 22
13324: PUSH
13325: LD_INT 4
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 34
13334: PUSH
13335: LD_INT 12
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13351: LD_ADDR_VAR 0 2
13355: PUSH
13356: LD_VAR 0 1
13360: PUSH
13361: LD_INT 1
13363: ARRAY
13364: PPUSH
13365: CALL_OW 250
13369: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13370: LD_ADDR_VAR 0 3
13374: PUSH
13375: LD_VAR 0 1
13379: PUSH
13380: LD_INT 1
13382: ARRAY
13383: PPUSH
13384: CALL_OW 251
13388: ST_TO_ADDR
// DialogueOn ;
13389: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13393: LD_VAR 0 2
13397: PPUSH
13398: LD_VAR 0 3
13402: PPUSH
13403: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13407: LD_VAR 0 2
13411: PPUSH
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 2
13419: PPUSH
13420: LD_INT 6
13422: NEG
13423: PPUSH
13424: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13428: LD_INT 10
13430: PPUSH
13431: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13435: LD_EXP 28
13439: PPUSH
13440: LD_STRING DH-1-seecargo
13442: PPUSH
13443: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13447: LD_VAR 0 2
13451: PPUSH
13452: LD_VAR 0 3
13456: PPUSH
13457: LD_INT 2
13459: PPUSH
13460: CALL_OW 331
// DialogueOff ;
13464: CALL_OW 7
// end ;
13468: PPOPN 3
13470: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13471: LD_EXP 4
13475: PUSH
13476: LD_EXP 15
13480: PUSH
13481: LD_INT 300
13483: GREATEREQUAL
13484: AND
13485: IFFALSE 13557
13487: GO 13489
13489: DISABLE
// begin DialogueOn ;
13490: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13494: LD_EXP 36
13498: PPUSH
13499: LD_STRING DF-1-delivery-2
13501: PPUSH
13502: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13506: LD_EXP 28
13510: PPUSH
13511: LD_STRING DH-1-delivery-2
13513: PPUSH
13514: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13518: LD_EXP 36
13522: PPUSH
13523: LD_STRING DF-2-delivery-2
13525: PPUSH
13526: CALL_OW 94
// DialogueOff ;
13530: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13534: LD_STRING Crates2
13536: PPUSH
13537: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13541: LD_ADDR_EXP 17
13545: PUSH
13546: LD_INT 63000
13548: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13549: LD_ADDR_EXP 16
13553: PUSH
13554: LD_INT 600
13556: ST_TO_ADDR
// end ;
13557: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13558: LD_EXP 4
13562: PUSH
13563: LD_EXP 15
13567: PUSH
13568: LD_INT 600
13570: GREATEREQUAL
13571: AND
13572: PUSH
13573: LD_OWVAR 67
13577: PUSH
13578: LD_INT 1
13580: GREATER
13581: AND
13582: IFFALSE 13748
13584: GO 13586
13586: DISABLE
// begin DialogueOn ;
13587: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13591: LD_EXP 36
13595: PPUSH
13596: LD_STRING DF-1-delivery-3
13598: PPUSH
13599: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13603: LD_EXP 28
13607: PPUSH
13608: LD_STRING DH-1-delivery-3
13610: PPUSH
13611: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13615: LD_EXP 36
13619: PPUSH
13620: LD_STRING DF-2-delivery-3
13622: PPUSH
13623: CALL_OW 94
// if IsOk ( Kaia ) then
13627: LD_EXP 33
13631: PPUSH
13632: CALL_OW 302
13636: IFFALSE 13686
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13638: LD_EXP 33
13642: PPUSH
13643: LD_STRING DK-1-delivery-3
13645: PPUSH
13646: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13650: LD_EXP 28
13654: PPUSH
13655: LD_STRING DH-2-delivery-3
13657: PPUSH
13658: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13662: LD_EXP 29
13666: PPUSH
13667: LD_STRING DG-1-delivery-3
13669: PPUSH
13670: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13674: LD_EXP 30
13678: PPUSH
13679: LD_STRING DM-1-delivery-3
13681: PPUSH
13682: CALL_OW 88
// end ; DialogueOff ;
13686: CALL_OW 7
// if Difficulty = 2 then
13690: LD_OWVAR 67
13694: PUSH
13695: LD_INT 2
13697: EQUAL
13698: IFFALSE 13725
// begin ChangeMissionObjectives ( Crates3 ) ;
13700: LD_STRING Crates3
13702: PPUSH
13703: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13707: LD_ADDR_EXP 17
13711: PUSH
13712: LD_INT 63000
13714: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13715: LD_ADDR_EXP 16
13719: PUSH
13720: LD_INT 900
13722: ST_TO_ADDR
// end else
13723: GO 13748
// begin ChangeMissionObjectives ( Crates4 ) ;
13725: LD_STRING Crates4
13727: PPUSH
13728: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13732: LD_ADDR_EXP 17
13736: PUSH
13737: LD_INT 63000
13739: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13740: LD_ADDR_EXP 16
13744: PUSH
13745: LD_INT 1200
13747: ST_TO_ADDR
// end ; end ;
13748: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13749: LD_EXP 4
13753: PUSH
13754: LD_EXP 15
13758: PUSH
13759: LD_INT 600
13761: PUSH
13762: LD_INT 900
13764: PUSH
13765: LD_INT 1200
13767: PUSH
13768: LD_INT 1400
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: PUSH
13777: LD_OWVAR 67
13781: ARRAY
13782: GREATEREQUAL
13783: AND
13784: PUSH
13785: LD_EXP 16
13789: PUSH
13790: LD_EXP 17
13794: LESSEQUAL
13795: AND
13796: IFFALSE 13882
13798: GO 13800
13800: DISABLE
// begin retreatAllowed := true ;
13801: LD_ADDR_EXP 11
13805: PUSH
13806: LD_INT 1
13808: ST_TO_ADDR
// display_strings := [ ] ;
13809: LD_ADDR_OWVAR 47
13813: PUSH
13814: EMPTY
13815: ST_TO_ADDR
// DialogueOn ;
13816: CALL_OW 6
// InGameOn ;
13820: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13824: LD_EXP 37
13828: PPUSH
13829: LD_STRING DO-radio-end
13831: PPUSH
13832: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13836: LD_EXP 28
13840: PPUSH
13841: LD_STRING DH-1-radio-end
13843: PPUSH
13844: CALL_OW 88
// InGameOff ;
13848: CALL_OW 9
// DialogueOff ;
13852: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13856: LD_STRING Retreat
13858: PPUSH
13859: CALL_OW 337
// wait ( 0 0$2 ) ;
13863: LD_INT 70
13865: PPUSH
13866: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
13870: LD_EXP 28
13874: PPUSH
13875: LD_STRING DH-2-radio-end
13877: PPUSH
13878: CALL_OW 88
// end ;
13882: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13883: LD_EXP 11
13887: IFFALSE 14018
13889: GO 13891
13891: DISABLE
13892: LD_INT 0
13894: PPUSH
13895: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13896: LD_INT 10
13898: PPUSH
13899: LD_INT 0
13901: PPUSH
13902: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13906: LD_ADDR_VAR 0 1
13910: PUSH
13911: LD_EXP 39
13915: PPUSH
13916: LD_INT 25
13918: PUSH
13919: LD_INT 2
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PPUSH
13926: CALL_OW 72
13930: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13931: LD_VAR 0 1
13935: PUSH
13936: LD_INT 102
13938: PPUSH
13939: LD_INT 69
13941: PPUSH
13942: CALL_OW 428
13946: PUSH
13947: LD_INT 0
13949: EQUAL
13950: AND
13951: IFFALSE 14018
// begin for i in tmp do
13953: LD_ADDR_VAR 0 2
13957: PUSH
13958: LD_VAR 0 1
13962: PUSH
13963: FOR_IN
13964: IFFALSE 13988
// if IsInUnit ( i ) then
13966: LD_VAR 0 2
13970: PPUSH
13971: CALL_OW 310
13975: IFFALSE 13986
// ComExitBuilding ( i ) ;
13977: LD_VAR 0 2
13981: PPUSH
13982: CALL_OW 122
13986: GO 13963
13988: POP
13989: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13990: LD_VAR 0 1
13994: PPUSH
13995: LD_INT 31
13997: PPUSH
13998: LD_INT 102
14000: PPUSH
14001: LD_INT 69
14003: PPUSH
14004: LD_INT 2
14006: PPUSH
14007: CALL_OW 205
// wait ( 0 0$3 ) ;
14011: LD_INT 105
14013: PPUSH
14014: CALL_OW 67
// end ; end ;
14018: PPOPN 2
14020: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14021: LD_EXP 11
14025: NOT
14026: PUSH
14027: LD_INT 5
14029: PPUSH
14030: CALL_OW 301
14034: AND
14035: IFFALSE 14067
14037: GO 14039
14039: DISABLE
// begin DialogueOn ;
14040: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14044: LD_EXP 36
14048: PPUSH
14049: LD_STRING DF-1-failure
14051: PPUSH
14052: CALL_OW 94
// DialogueOff ;
14056: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14060: LD_STRING FarmerDepot
14062: PPUSH
14063: CALL_OW 104
// end ;
14067: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14068: LD_EXP 11
14072: PUSH
14073: LD_EXP 28
14077: PPUSH
14078: LD_EXP 36
14082: PPUSH
14083: CALL_OW 296
14087: PUSH
14088: LD_INT 12
14090: LESS
14091: AND
14092: PUSH
14093: LD_INT 81
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 21
14105: PUSH
14106: LD_INT 1
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 69
14121: NOT
14122: AND
14123: IFFALSE 14787
14125: GO 14127
14127: DISABLE
14128: LD_INT 0
14130: PPUSH
14131: PPUSH
14132: PPUSH
// begin allowConvoys := false ;
14133: LD_ADDR_EXP 12
14137: PUSH
14138: LD_INT 0
14140: ST_TO_ADDR
// InGameOn ;
14141: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14145: LD_EXP 28
14149: PPUSH
14150: LD_EXP 36
14154: PPUSH
14155: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14159: LD_EXP 36
14163: PPUSH
14164: LD_EXP 28
14168: PPUSH
14169: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14173: LD_EXP 36
14177: PPUSH
14178: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14182: LD_EXP 28
14186: PPUSH
14187: LD_STRING DH-1-end
14189: PPUSH
14190: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14194: LD_EXP 36
14198: PPUSH
14199: LD_STRING DF-1-end
14201: PPUSH
14202: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14206: LD_EXP 36
14210: PPUSH
14211: LD_STRING DF-2-end
14213: PPUSH
14214: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14218: LD_EXP 28
14222: PPUSH
14223: LD_STRING DH-2-end
14225: PPUSH
14226: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14230: LD_EXP 36
14234: PPUSH
14235: LD_STRING DF-3-end
14237: PPUSH
14238: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14242: LD_EXP 28
14246: PPUSH
14247: LD_STRING DH-3-end
14249: PPUSH
14250: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14254: LD_EXP 29
14258: PPUSH
14259: LD_STRING DG-1-end
14261: PPUSH
14262: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14266: LD_EXP 28
14270: PPUSH
14271: LD_STRING DH-4-end
14273: PPUSH
14274: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14278: LD_EXP 36
14282: PPUSH
14283: LD_STRING DF-4-end
14285: PPUSH
14286: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14290: LD_EXP 28
14294: PPUSH
14295: LD_STRING DH-5-end
14297: PPUSH
14298: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14302: LD_EXP 36
14306: PPUSH
14307: LD_STRING DF-5-end
14309: PPUSH
14310: CALL_OW 88
// InGameOff ;
14314: CALL_OW 9
// allowCargoEvacuation := true ;
14318: LD_ADDR_EXP 7
14322: PUSH
14323: LD_INT 1
14325: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14326: LD_ADDR_VAR 0 2
14330: PUSH
14331: LD_INT 4
14333: PUSH
14334: LD_INT 3
14336: PUSH
14337: LD_INT 2
14339: PUSH
14340: LD_INT 1
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: PUSH
14349: LD_OWVAR 67
14353: ARRAY
14354: ST_TO_ADDR
// if farmerSquad < max then
14355: LD_EXP 39
14359: PUSH
14360: LD_VAR 0 2
14364: LESS
14365: IFFALSE 14377
// max := farmerSquad ;
14367: LD_ADDR_VAR 0 2
14371: PUSH
14372: LD_EXP 39
14376: ST_TO_ADDR
// for i := 1 to max do
14377: LD_ADDR_VAR 0 1
14381: PUSH
14382: DOUBLE
14383: LD_INT 1
14385: DEC
14386: ST_TO_ADDR
14387: LD_VAR 0 2
14391: PUSH
14392: FOR_TO
14393: IFFALSE 14431
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14395: LD_EXP 39
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: LD_INT 2
14406: PPUSH
14407: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14411: LD_ADDR_EXP 39
14415: PUSH
14416: LD_EXP 39
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 3
14428: ST_TO_ADDR
// end ;
14429: GO 14392
14431: POP
14432: POP
// for i in Farmer ^ farmerSquad do
14433: LD_ADDR_VAR 0 1
14437: PUSH
14438: LD_EXP 36
14442: PUSH
14443: LD_EXP 39
14447: ADD
14448: PUSH
14449: FOR_IN
14450: IFFALSE 14489
// begin if IsInUnit ( i ) then
14452: LD_VAR 0 1
14456: PPUSH
14457: CALL_OW 310
14461: IFFALSE 14472
// ComExitBuilding ( i ) ;
14463: LD_VAR 0 1
14467: PPUSH
14468: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14472: LD_VAR 0 1
14476: PPUSH
14477: LD_INT 102
14479: PPUSH
14480: LD_INT 7
14482: PPUSH
14483: CALL_OW 171
// end ;
14487: GO 14449
14489: POP
14490: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14491: LD_ADDR_VAR 0 1
14495: PUSH
14496: LD_INT 22
14498: PUSH
14499: LD_INT 5
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 21
14508: PUSH
14509: LD_INT 3
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PPUSH
14520: CALL_OW 69
14524: PUSH
14525: LD_INT 5
14527: DIFF
14528: PUSH
14529: FOR_IN
14530: IFFALSE 14546
// SetSide ( i , 2 ) ;
14532: LD_VAR 0 1
14536: PPUSH
14537: LD_INT 2
14539: PPUSH
14540: CALL_OW 235
14544: GO 14529
14546: POP
14547: POP
// wait ( 0 0$2 ) ;
14548: LD_INT 70
14550: PPUSH
14551: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14555: LD_EXP 28
14559: PPUSH
14560: LD_STRING DH-6-end
14562: PPUSH
14563: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14567: LD_INT 35
14569: PPUSH
14570: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14574: LD_ADDR_VAR 0 3
14578: PUSH
14579: LD_EXP 36
14583: PUSH
14584: LD_EXP 39
14588: ADD
14589: PPUSH
14590: LD_INT 95
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PPUSH
14600: CALL_OW 72
14604: ST_TO_ADDR
// if tmp then
14605: LD_VAR 0 3
14609: IFFALSE 14653
// for i in tmp do
14611: LD_ADDR_VAR 0 1
14615: PUSH
14616: LD_VAR 0 3
14620: PUSH
14621: FOR_IN
14622: IFFALSE 14651
// begin farmerSquad := farmerSquad diff i ;
14624: LD_ADDR_EXP 39
14628: PUSH
14629: LD_EXP 39
14633: PUSH
14634: LD_VAR 0 1
14638: DIFF
14639: ST_TO_ADDR
// RemoveUnit ( i ) ;
14640: LD_VAR 0 1
14644: PPUSH
14645: CALL_OW 64
// end ;
14649: GO 14621
14651: POP
14652: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14653: LD_EXP 39
14657: PUSH
14658: EMPTY
14659: EQUAL
14660: PUSH
14661: LD_EXP 36
14665: PPUSH
14666: CALL_OW 305
14670: NOT
14671: AND
14672: IFFALSE 14567
// if farmerHumanLoseCounter = 0 then
14674: LD_EXP 20
14678: PUSH
14679: LD_INT 0
14681: EQUAL
14682: IFFALSE 14691
// SetAchievement ( ACH_BABY ) ;
14684: LD_STRING ACH_BABY
14686: PPUSH
14687: CALL_OW 543
// wait ( 1 1$00 ) ;
14691: LD_INT 2100
14693: PPUSH
14694: CALL_OW 67
// SendAttack ;
14698: CALL 6163 0 0
// Say ( Heike , DH-7-end ) ;
14702: LD_EXP 28
14706: PPUSH
14707: LD_STRING DH-7-end
14709: PPUSH
14710: CALL_OW 88
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
14714: LD_ADDR_VAR 0 1
14718: PUSH
14719: DOUBLE
14720: LD_INT 1
14722: DEC
14723: ST_TO_ADDR
14724: LD_INT 2
14726: PUSH
14727: LD_INT 3
14729: PUSH
14730: LD_INT 4
14732: PUSH
14733: LD_INT 4
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: PUSH
14742: LD_OWVAR 67
14746: ARRAY
14747: PUSH
14748: FOR_TO
14749: IFFALSE 14785
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
14751: LD_INT 4200
14753: PUSH
14754: LD_INT 3500
14756: PUSH
14757: LD_INT 3150
14759: PUSH
14760: LD_INT 2800
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: PUSH
14769: LD_OWVAR 67
14773: ARRAY
14774: PPUSH
14775: CALL_OW 67
// SendAttack ;
14779: CALL 6163 0 0
// end ;
14783: GO 14748
14785: POP
14786: POP
// end ;
14787: PPOPN 3
14789: END
// every 2 2$00 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14790: LD_EXP 7
14794: PUSH
14795: LD_EXP 21
14799: PUSH
14800: LD_INT 0
14802: GREATER
14803: AND
14804: IFFALSE 14814
14806: GO 14808
14808: DISABLE
// begin enable ;
14809: ENABLE
// CargoEvacuation ;
14810: CALL 3660 0 0
// end ;
14814: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14815: LD_EXP 17
14819: PUSH
14820: LD_INT 18900
14822: LESSEQUAL
14823: IFFALSE 14872
14825: GO 14827
14827: DISABLE
// begin DialogueOn ;
14828: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14832: LD_EXP 36
14836: PPUSH
14837: LD_STRING DF-1-distribution-a
14839: PPUSH
14840: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14844: LD_EXP 28
14848: PPUSH
14849: LD_STRING DH-1-distribution-a
14851: PPUSH
14852: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14856: LD_EXP 36
14860: PPUSH
14861: LD_STRING DF-2-distribution-a
14863: PPUSH
14864: CALL_OW 94
// DialogueOff ;
14868: CALL_OW 7
// end ;
14872: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14873: LD_EXP 17
14877: PUSH
14878: LD_INT 0
14880: LESSEQUAL
14881: IFFALSE 14913
14883: GO 14885
14885: DISABLE
// begin DialogueOn ;
14886: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14890: LD_EXP 36
14894: PPUSH
14895: LD_STRING DF-3-distribution-a
14897: PPUSH
14898: CALL_OW 94
// YouLost ( Distribution ) ;
14902: LD_STRING Distribution
14904: PPUSH
14905: CALL_OW 104
// DialogueOff ;
14909: CALL_OW 7
// end ;
14913: END
// every 0 0$1 trigger vehCounter >= 2 do
14914: LD_EXP 22
14918: PUSH
14919: LD_INT 2
14921: GREATEREQUAL
14922: IFFALSE 14934
14924: GO 14926
14926: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14927: LD_STRING VehConstructed
14929: PPUSH
14930: CALL_OW 337
14934: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14935: LD_INT 22
14937: PUSH
14938: LD_INT 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 34
14947: PUSH
14948: LD_INT 12
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PPUSH
14959: CALL_OW 69
14963: IFFALSE 15023
14965: GO 14967
14967: DISABLE
// begin DialogueOn ;
14968: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14972: LD_EXP 28
14976: PPUSH
14977: LD_STRING DH-1-truck
14979: PPUSH
14980: CALL_OW 88
// if IsOk ( Markov ) then
14984: LD_EXP 35
14988: PPUSH
14989: CALL_OW 302
14993: IFFALSE 15019
// begin Say ( Markov , DMar-1-truck ) ;
14995: LD_EXP 35
14999: PPUSH
15000: LD_STRING DMar-1-truck
15002: PPUSH
15003: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15007: LD_EXP 28
15011: PPUSH
15012: LD_STRING DH-2-truck
15014: PPUSH
15015: CALL_OW 88
// end ; DialogueOff ;
15019: CALL_OW 7
// end ;
15023: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15024: LD_INT 0
15026: PPUSH
15027: PPUSH
15028: PPUSH
// if IsOk ( Givi ) then
15029: LD_EXP 29
15033: PPUSH
15034: CALL_OW 302
15038: IFFALSE 15054
// begin Say ( Givi , DG-1-nocargo ) ;
15040: LD_EXP 29
15044: PPUSH
15045: LD_STRING DG-1-nocargo
15047: PPUSH
15048: CALL_OW 88
// exit ;
15052: GO 15150
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15054: LD_ADDR_VAR 0 2
15058: PUSH
15059: LD_EXP 42
15063: PPUSH
15064: LD_INT 26
15066: PUSH
15067: LD_INT 1
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 72
15078: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15079: LD_ADDR_VAR 0 3
15083: PUSH
15084: LD_EXP 42
15088: PPUSH
15089: LD_INT 26
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PPUSH
15099: CALL_OW 72
15103: ST_TO_ADDR
// if randomMen then
15104: LD_VAR 0 2
15108: IFFALSE 15128
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15110: LD_VAR 0 2
15114: PUSH
15115: LD_INT 1
15117: ARRAY
15118: PPUSH
15119: LD_STRING DArm-1-nocargo
15121: PPUSH
15122: CALL_OW 88
15126: GO 15150
// if randomWomen then
15128: LD_VAR 0 3
15132: IFFALSE 15150
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15134: LD_VAR 0 3
15138: PUSH
15139: LD_INT 1
15141: ARRAY
15142: PPUSH
15143: LD_STRING DArf-1-nocargo
15145: PPUSH
15146: CALL_OW 88
// end ;
15150: LD_VAR 0 1
15154: RET
// export function IncomingAttack ; begin
15155: LD_INT 0
15157: PPUSH
// if attackWave = 1 then
15158: LD_EXP 19
15162: PUSH
15163: LD_INT 1
15165: EQUAL
15166: IFFALSE 15237
// begin DialogueOn ;
15168: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15172: LD_EXP 37
15176: PPUSH
15177: LD_STRING DO-1-radio-1
15179: PPUSH
15180: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15184: LD_EXP 28
15188: PPUSH
15189: LD_STRING DH-1-radio-1-
15191: PPUSH
15192: CALL_OW 88
// if IsOk ( Markov ) then
15196: LD_EXP 35
15200: PPUSH
15201: CALL_OW 302
15205: IFFALSE 15231
// begin Say ( Markov , DMar-1-radio-1 ) ;
15207: LD_EXP 35
15211: PPUSH
15212: LD_STRING DMar-1-radio-1
15214: PPUSH
15215: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15219: LD_EXP 28
15223: PPUSH
15224: LD_STRING DH-2-radio-1
15226: PPUSH
15227: CALL_OW 88
// end ; DialogueOff ;
15231: CALL_OW 7
// end else
15235: GO 15261
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15237: LD_EXP 37
15241: PPUSH
15242: LD_STRING DO-1-radio-u
15244: PPUSH
15245: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15249: LD_EXP 28
15253: PPUSH
15254: LD_STRING DH-1-radio-u
15256: PPUSH
15257: CALL_OW 88
// end ; end ;
15261: LD_VAR 0 1
15265: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15266: LD_EXP 44
15270: PPUSH
15271: LD_INT 95
15273: PUSH
15274: LD_INT 8
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PPUSH
15281: CALL_OW 72
15285: IFFALSE 15388
15287: GO 15289
15289: DISABLE
15290: LD_INT 0
15292: PPUSH
// begin enable ;
15293: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15294: LD_ADDR_VAR 0 1
15298: PUSH
15299: LD_EXP 44
15303: PPUSH
15304: LD_INT 95
15306: PUSH
15307: LD_INT 8
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PPUSH
15314: CALL_OW 72
15318: PUSH
15319: FOR_IN
15320: IFFALSE 15349
// begin usForces := usForces diff i ;
15322: LD_ADDR_EXP 44
15326: PUSH
15327: LD_EXP 44
15331: PUSH
15332: LD_VAR 0 1
15336: DIFF
15337: ST_TO_ADDR
// RemoveUnit ( i ) ;
15338: LD_VAR 0 1
15342: PPUSH
15343: CALL_OW 64
// end ;
15347: GO 15319
15349: POP
15350: POP
// if not americanHasEscaped and attackWave = 1 then
15351: LD_EXP 8
15355: NOT
15356: PUSH
15357: LD_EXP 19
15361: PUSH
15362: LD_INT 1
15364: EQUAL
15365: AND
15366: IFFALSE 15388
// begin americanHasEscaped := true ;
15368: LD_ADDR_EXP 8
15372: PUSH
15373: LD_INT 1
15375: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15376: LD_EXP 28
15380: PPUSH
15381: LD_STRING DH-2-assault-a
15383: PPUSH
15384: CALL_OW 88
// end ; end ;
15388: PPOPN 1
15390: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15391: LD_INT 4
15393: PPUSH
15394: LD_INT 22
15396: PUSH
15397: LD_INT 1
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 70
15408: PUSH
15409: LD_EXP 11
15413: NOT
15414: AND
15415: IFFALSE 15432
15417: GO 15419
15419: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15420: LD_EXP 36
15424: PPUSH
15425: LD_STRING DF-1-attack
15427: PPUSH
15428: CALL_OW 94
15432: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15433: LD_INT 5
15435: PPUSH
15436: CALL_OW 255
15440: PUSH
15441: LD_INT 2
15443: EQUAL
15444: IFFALSE 15460
15446: GO 15448
15448: DISABLE
// begin enable ;
15449: ENABLE
// SetSide ( arDepot , 5 ) ;
15450: LD_INT 5
15452: PPUSH
15453: LD_INT 5
15455: PPUSH
15456: CALL_OW 235
// end ;
15460: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15461: LD_INT 22
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PPUSH
15485: CALL_OW 69
15489: NOT
15490: PUSH
15491: LD_INT 22
15493: PUSH
15494: LD_INT 4
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PPUSH
15501: CALL_OW 69
15505: NOT
15506: AND
15507: PUSH
15508: LD_EXP 11
15512: NOT
15513: AND
15514: PUSH
15515: LD_EXP 15
15519: PUSH
15520: LD_INT 90
15522: GREATER
15523: AND
15524: PUSH
15525: LD_INT 7
15527: PPUSH
15528: LD_INT 22
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 21
15540: PUSH
15541: LD_INT 1
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PPUSH
15552: CALL_OW 70
15556: AND
15557: PUSH
15558: LD_INT 22
15560: PUSH
15561: LD_INT 2
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 50
15570: PUSH
15571: EMPTY
15572: LIST
15573: PUSH
15574: LD_INT 30
15576: PUSH
15577: LD_INT 0
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 69
15593: AND
15594: IFFALSE 16387
15596: GO 15598
15598: DISABLE
15599: LD_INT 0
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
15605: PPUSH
// begin depot := usDepot ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_INT 11
15613: ST_TO_ADDR
// if not depot then
15614: LD_VAR 0 5
15618: NOT
15619: IFFALSE 15659
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15621: LD_ADDR_VAR 0 5
15625: PUSH
15626: LD_INT 22
15628: PUSH
15629: LD_INT 2
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 30
15638: PUSH
15639: LD_INT 0
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PPUSH
15650: CALL_OW 69
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15659: LD_ADDR_VAR 0 1
15663: PUSH
15664: LD_EXP 42
15668: PPUSH
15669: LD_INT 26
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 72
15683: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_EXP 42
15693: PPUSH
15694: LD_INT 26
15696: PUSH
15697: LD_INT 2
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PPUSH
15704: CALL_OW 72
15708: ST_TO_ADDR
// if IsOk ( Kaia ) then
15709: LD_EXP 33
15713: PPUSH
15714: CALL_OW 302
15718: IFFALSE 15739
// speaker := [ Kaia , DK ] else
15720: LD_ADDR_VAR 0 3
15724: PUSH
15725: LD_EXP 33
15729: PUSH
15730: LD_STRING DK
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: ST_TO_ADDR
15737: GO 15819
// if randomMen then
15739: LD_VAR 0 1
15743: IFFALSE 15778
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15745: LD_ADDR_VAR 0 3
15749: PUSH
15750: LD_VAR 0 1
15754: PUSH
15755: LD_INT 1
15757: PPUSH
15758: LD_VAR 0 1
15762: PPUSH
15763: CALL_OW 12
15767: ARRAY
15768: PUSH
15769: LD_STRING DArm
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
15776: GO 15819
// if randomWomen then
15778: LD_VAR 0 2
15782: IFFALSE 15817
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15784: LD_ADDR_VAR 0 3
15788: PUSH
15789: LD_VAR 0 2
15793: PUSH
15794: LD_INT 1
15796: PPUSH
15797: LD_VAR 0 2
15801: PPUSH
15802: CALL_OW 12
15806: ARRAY
15807: PUSH
15808: LD_STRING DArf
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: ST_TO_ADDR
15815: GO 15819
// exit ;
15817: GO 16387
// if IsInUnit ( speaker [ 1 ] ) then
15819: LD_VAR 0 3
15823: PUSH
15824: LD_INT 1
15826: ARRAY
15827: PPUSH
15828: CALL_OW 310
15832: IFFALSE 15855
// place := IsInUnit ( speaker [ 1 ] ) else
15834: LD_ADDR_VAR 0 4
15838: PUSH
15839: LD_VAR 0 3
15843: PUSH
15844: LD_INT 1
15846: ARRAY
15847: PPUSH
15848: CALL_OW 310
15852: ST_TO_ADDR
15853: GO 15869
// place := speaker [ 1 ] ;
15855: LD_ADDR_VAR 0 4
15859: PUSH
15860: LD_VAR 0 3
15864: PUSH
15865: LD_INT 1
15867: ARRAY
15868: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15869: LD_VAR 0 4
15873: PPUSH
15874: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15878: LD_VAR 0 4
15882: PPUSH
15883: CALL_OW 250
15887: PPUSH
15888: LD_VAR 0 4
15892: PPUSH
15893: CALL_OW 251
15897: PPUSH
15898: CALL 2147 0 2
// wait ( 0 0$2 ) ;
15902: LD_INT 70
15904: PPUSH
15905: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15909: LD_EXP 38
15913: PPUSH
15914: CALL_OW 305
15918: NOT
15919: IFFALSE 15923
// exit ;
15921: GO 16387
// allowConvoys := false ;
15923: LD_ADDR_EXP 12
15927: PUSH
15928: LD_INT 0
15930: ST_TO_ADDR
// InGameOn ;
15931: CALL_OW 8
// wait ( 0 0$1 ) ;
15935: LD_INT 35
15937: PPUSH
15938: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15942: LD_EXP 38
15946: PPUSH
15947: LD_STRING DI-1-land
15949: PPUSH
15950: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15954: LD_VAR 0 3
15958: PUSH
15959: LD_INT 1
15961: ARRAY
15962: PPUSH
15963: CALL_OW 310
15967: IFFALSE 15982
// ComExit ( speaker [ 1 ] ) ;
15969: LD_VAR 0 3
15973: PUSH
15974: LD_INT 1
15976: ARRAY
15977: PPUSH
15978: CALL 73902 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15982: LD_VAR 0 3
15986: PUSH
15987: LD_INT 1
15989: ARRAY
15990: PPUSH
15991: LD_EXP 38
15995: PPUSH
15996: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16000: LD_VAR 0 3
16004: PUSH
16005: LD_INT 1
16007: ARRAY
16008: PPUSH
16009: LD_EXP 38
16013: PPUSH
16014: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16018: LD_EXP 38
16022: PPUSH
16023: LD_VAR 0 3
16027: PUSH
16028: LD_INT 1
16030: ARRAY
16031: PPUSH
16032: CALL_OW 119
// wait ( 0 0$1 ) ;
16036: LD_INT 35
16038: PPUSH
16039: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16043: LD_VAR 0 3
16047: PUSH
16048: LD_INT 1
16050: ARRAY
16051: PPUSH
16052: LD_VAR 0 3
16056: PUSH
16057: LD_INT 2
16059: ARRAY
16060: PUSH
16061: LD_STRING -1-land
16063: STR
16064: PPUSH
16065: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16069: LD_EXP 38
16073: PPUSH
16074: LD_STRING DI-2-land
16076: PPUSH
16077: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16081: LD_VAR 0 3
16085: PUSH
16086: LD_INT 1
16088: ARRAY
16089: PPUSH
16090: LD_VAR 0 3
16094: PUSH
16095: LD_INT 2
16097: ARRAY
16098: PUSH
16099: LD_STRING -2-land
16101: STR
16102: PPUSH
16103: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16107: LD_VAR 0 3
16111: PUSH
16112: LD_INT 1
16114: ARRAY
16115: PPUSH
16116: LD_VAR 0 3
16120: PUSH
16121: LD_INT 2
16123: ARRAY
16124: PUSH
16125: LD_STRING -3-land
16127: STR
16128: PPUSH
16129: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16133: LD_EXP 28
16137: PPUSH
16138: LD_STRING DH-1-land
16140: PPUSH
16141: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16145: LD_VAR 0 5
16149: PPUSH
16150: CALL_OW 313
16154: PUSH
16155: LD_INT 6
16157: EQUAL
16158: IFFALSE 16178
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16160: LD_VAR 0 5
16164: PPUSH
16165: CALL_OW 313
16169: PUSH
16170: LD_INT 1
16172: ARRAY
16173: PPUSH
16174: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16178: LD_EXP 38
16182: PPUSH
16183: LD_INT 2
16185: PPUSH
16186: CALL_OW 235
// CenterOnUnits ( depot ) ;
16190: LD_VAR 0 5
16194: PPUSH
16195: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16199: LD_EXP 38
16203: PPUSH
16204: LD_VAR 0 5
16208: PPUSH
16209: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16213: LD_VAR 0 3
16217: PUSH
16218: LD_INT 1
16220: ARRAY
16221: PPUSH
16222: LD_VAR 0 5
16226: PPUSH
16227: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16231: LD_INT 35
16233: PPUSH
16234: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16238: LD_EXP 38
16242: PPUSH
16243: CALL_OW 310
16247: PUSH
16248: LD_EXP 38
16252: PPUSH
16253: CALL_OW 302
16257: NOT
16258: OR
16259: PUSH
16260: LD_VAR 0 5
16264: PPUSH
16265: CALL_OW 302
16269: NOT
16270: OR
16271: IFFALSE 16231
// InGameOff ;
16273: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16277: LD_EXP 38
16281: PPUSH
16282: CALL_OW 302
16286: NOT
16287: IFFALSE 16291
// exit ;
16289: GO 16387
// if not IsOk ( depot ) then
16291: LD_VAR 0 5
16295: PPUSH
16296: CALL_OW 302
16300: NOT
16301: IFFALSE 16364
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16303: LD_EXP 38
16307: PPUSH
16308: LD_INT 30
16310: PPUSH
16311: LD_INT 1
16313: PPUSH
16314: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16318: LD_INT 35
16320: PPUSH
16321: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16325: LD_EXP 38
16329: PPUSH
16330: LD_INT 30
16332: PPUSH
16333: LD_INT 1
16335: PPUSH
16336: CALL_OW 307
16340: PUSH
16341: LD_EXP 38
16345: PPUSH
16346: CALL_OW 301
16350: OR
16351: IFFALSE 16318
// RemoveUnit ( Ibrahim ) ;
16353: LD_EXP 38
16357: PPUSH
16358: CALL_OW 64
// exit ;
16362: GO 16387
// end ; ibrahimInDepot := true ;
16364: LD_ADDR_EXP 25
16368: PUSH
16369: LD_INT 1
16371: ST_TO_ADDR
// allowConvoys := true ;
16372: LD_ADDR_EXP 12
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16380: LD_STRING IbrahimInDepot
16382: PPUSH
16383: CALL_OW 97
// end ;
16387: PPOPN 5
16389: END
// export function IbrahimQuery ; begin
16390: LD_INT 0
16392: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16393: LD_STRING IbrahimQuery
16395: PPUSH
16396: CALL_OW 97
16400: PUSH
16401: LD_INT 1
16403: DOUBLE
16404: EQUAL
16405: IFTRUE 16409
16407: GO 16685
16409: POP
// begin allowConvoys := false ;
16410: LD_ADDR_EXP 12
16414: PUSH
16415: LD_INT 0
16417: ST_TO_ADDR
// ibrahimInDepot := false ;
16418: LD_ADDR_EXP 25
16422: PUSH
16423: LD_INT 0
16425: ST_TO_ADDR
// InGameOn ;
16426: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16430: LD_EXP 28
16434: PPUSH
16435: CALL_OW 87
// wait ( 0 0$1 ) ;
16439: LD_INT 35
16441: PPUSH
16442: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16446: LD_EXP 28
16450: PPUSH
16451: LD_STRING DH-1-interrogation
16453: PPUSH
16454: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16458: LD_EXP 38
16462: PPUSH
16463: LD_STRING DI-1-interrogation
16465: PPUSH
16466: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16470: LD_EXP 28
16474: PPUSH
16475: LD_STRING DH-2-interrogation
16477: PPUSH
16478: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16482: LD_EXP 38
16486: PPUSH
16487: LD_STRING DI-2-interrogation
16489: PPUSH
16490: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16494: LD_EXP 28
16498: PPUSH
16499: LD_STRING DH-3-interrogation
16501: PPUSH
16502: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16506: LD_EXP 38
16510: PPUSH
16511: LD_STRING DI-3-interrogation
16513: PPUSH
16514: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16518: LD_EXP 28
16522: PPUSH
16523: LD_STRING DH-4-interrogation
16525: PPUSH
16526: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16530: LD_EXP 38
16534: PPUSH
16535: LD_STRING DI-4-interrogation
16537: PPUSH
16538: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16542: LD_EXP 28
16546: PPUSH
16547: LD_STRING DH-5-interrogation
16549: PPUSH
16550: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16554: LD_EXP 38
16558: PPUSH
16559: LD_STRING DI-5-interrogation
16561: PPUSH
16562: CALL_OW 88
// wait ( 0 0$1 ) ;
16566: LD_INT 35
16568: PPUSH
16569: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16573: LD_STRING IbrahimDecisionQuery
16575: PPUSH
16576: CALL_OW 97
16580: PUSH
16581: LD_INT 1
16583: DOUBLE
16584: EQUAL
16585: IFTRUE 16589
16587: GO 16613
16589: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16590: LD_EXP 38
16594: PPUSH
16595: LD_STRING DI-1-kill
16597: PPUSH
16598: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16602: LD_EXP 38
16606: PPUSH
16607: CALL_OW 66
// end ; 2 :
16611: GO 16679
16613: LD_INT 2
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16678
16621: POP
// begin SetSide ( Ibrahim , 6 ) ;
16622: LD_EXP 38
16626: PPUSH
16627: LD_INT 6
16629: PPUSH
16630: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16634: LD_EXP 38
16638: PPUSH
16639: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16643: LD_EXP 38
16647: PPUSH
16648: LD_INT 66
16650: PPUSH
16651: LD_INT 2
16653: PPUSH
16654: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16658: LD_EXP 38
16662: PPUSH
16663: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16667: LD_EXP 28
16671: PPUSH
16672: CALL_OW 122
// end ; end ;
16676: GO 16679
16678: POP
// InGameOff ;
16679: CALL_OW 9
// end ; 2 :
16683: GO 16699
16685: LD_INT 2
16687: DOUBLE
16688: EQUAL
16689: IFTRUE 16693
16691: GO 16698
16693: POP
// exit ; end ;
16694: GO 16775
16696: GO 16699
16698: POP
// allowConvoys := true ;
16699: LD_ADDR_EXP 12
16703: PUSH
16704: LD_INT 1
16706: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16707: LD_INT 5250
16709: PPUSH
16710: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16714: LD_INT 35
16716: PPUSH
16717: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16721: LD_INT 81
16723: PUSH
16724: LD_INT 2
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 21
16733: PUSH
16734: LD_INT 1
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PPUSH
16745: CALL_OW 69
16749: NOT
16750: IFFALSE 16714
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
16752: LD_EXP 38
16756: PPUSH
16757: LD_INT 34
16759: PPUSH
16760: LD_INT 21
16762: PPUSH
16763: CALL_OW 111
// ibrahimIsFree := true ;
16767: LD_ADDR_EXP 26
16771: PUSH
16772: LD_INT 1
16774: ST_TO_ADDR
// end ;
16775: LD_VAR 0 1
16779: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
16780: LD_EXP 26
16784: PUSH
16785: LD_EXP 38
16789: PPUSH
16790: CALL_OW 302
16794: AND
16795: PUSH
16796: LD_INT 2
16798: PPUSH
16799: LD_EXP 38
16803: PPUSH
16804: CALL_OW 292
16808: AND
16809: IFFALSE 17576
16811: GO 16813
16813: DISABLE
16814: LD_INT 0
16816: PPUSH
16817: PPUSH
16818: PPUSH
16819: PPUSH
16820: PPUSH
16821: PPUSH
// begin wait ( 0 0$10 ) ;
16822: LD_INT 350
16824: PPUSH
16825: CALL_OW 67
// allowConvoys := false ;
16829: LD_ADDR_EXP 12
16833: PUSH
16834: LD_INT 0
16836: ST_TO_ADDR
// depot := usDepot ;
16837: LD_ADDR_VAR 0 4
16841: PUSH
16842: LD_INT 11
16844: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16845: LD_INT 11
16847: NOT
16848: PUSH
16849: LD_INT 22
16851: PUSH
16852: LD_INT 2
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 50
16861: PUSH
16862: EMPTY
16863: LIST
16864: PUSH
16865: LD_INT 30
16867: PUSH
16868: LD_INT 0
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: LIST
16879: PPUSH
16880: CALL_OW 69
16884: AND
16885: IFFALSE 16932
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16887: LD_ADDR_VAR 0 4
16891: PUSH
16892: LD_INT 22
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 50
16904: PUSH
16905: EMPTY
16906: LIST
16907: PUSH
16908: LD_INT 30
16910: PUSH
16911: LD_INT 0
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: PPUSH
16923: CALL_OW 69
16927: PUSH
16928: LD_INT 1
16930: ARRAY
16931: ST_TO_ADDR
// InGameOn ;
16932: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16936: LD_EXP 38
16940: PPUSH
16941: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
16945: LD_EXP 38
16949: PPUSH
16950: LD_STRING DI-1-free
16952: PPUSH
16953: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
16957: LD_EXP 28
16961: PPUSH
16962: LD_EXP 38
16966: PPUSH
16967: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
16971: LD_EXP 28
16975: PPUSH
16976: LD_STRING DH-1-free
16978: PPUSH
16979: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
16983: LD_EXP 38
16987: PPUSH
16988: LD_EXP 28
16992: PPUSH
16993: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
16997: LD_EXP 38
17001: PPUSH
17002: LD_STRING DI-2-free
17004: PPUSH
17005: CALL_OW 88
// changeClass := 0 ;
17009: LD_ADDR_VAR 0 1
17013: PUSH
17014: LD_INT 0
17016: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17017: LD_STRING IbrahimJoinQuery
17019: PPUSH
17020: CALL_OW 97
17024: PUSH
17025: LD_INT 1
17027: DOUBLE
17028: EQUAL
17029: IFTRUE 17033
17031: GO 17044
17033: POP
// begin changeClass := 1 ;
17034: LD_ADDR_VAR 0 1
17038: PUSH
17039: LD_INT 1
17041: ST_TO_ADDR
// end ; 2 :
17042: GO 17284
17044: LD_INT 2
17046: DOUBLE
17047: EQUAL
17048: IFTRUE 17052
17050: GO 17204
17052: POP
// begin Say ( Heike , DH-1-decline ) ;
17053: LD_EXP 28
17057: PPUSH
17058: LD_STRING DH-1-decline
17060: PPUSH
17061: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17065: LD_EXP 38
17069: PPUSH
17070: LD_STRING DI-1-decline
17072: PPUSH
17073: CALL_OW 88
// InGameOff ;
17077: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17081: LD_EXP 38
17085: PPUSH
17086: LD_INT 30
17088: PPUSH
17089: LD_INT 1
17091: PPUSH
17092: CALL_OW 111
// p := 0 ;
17096: LD_ADDR_VAR 0 3
17100: PUSH
17101: LD_INT 0
17103: ST_TO_ADDR
// repeat p := p + 1 ;
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: LD_VAR 0 3
17113: PUSH
17114: LD_INT 1
17116: PLUS
17117: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17118: LD_INT 35
17120: PPUSH
17121: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17125: LD_EXP 38
17129: PPUSH
17130: LD_INT 30
17132: PPUSH
17133: LD_INT 1
17135: PPUSH
17136: CALL_OW 307
17140: PUSH
17141: LD_INT 22
17143: PUSH
17144: LD_INT 2
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 101
17153: PUSH
17154: LD_INT 6
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PPUSH
17165: CALL_OW 69
17169: NOT
17170: OR
17171: PUSH
17172: LD_VAR 0 3
17176: PUSH
17177: LD_INT 10
17179: GREATER
17180: OR
17181: IFFALSE 17104
// RemoveUnit ( Ibrahim ) ;
17183: LD_EXP 38
17187: PPUSH
17188: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17192: LD_INT 1
17194: PPUSH
17195: LD_STRING 03_IbrahimHasEscaped
17197: PPUSH
17198: CALL_OW 39
// end ; 3 :
17202: GO 17284
17204: LD_INT 3
17206: DOUBLE
17207: EQUAL
17208: IFTRUE 17212
17210: GO 17283
17212: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17213: LD_EXP 28
17217: PPUSH
17218: LD_STRING DH-1-radio-hq
17220: PPUSH
17221: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17225: LD_EXP 37
17229: PPUSH
17230: LD_STRING DO-1-radio-hq
17232: PPUSH
17233: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17237: LD_EXP 28
17241: PPUSH
17242: LD_STRING DH-2-radio-hq
17244: PPUSH
17245: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17249: LD_EXP 37
17253: PPUSH
17254: LD_STRING DO-2-radio-hq
17256: PPUSH
17257: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17261: LD_EXP 28
17265: PPUSH
17266: LD_STRING DH-3-radio-hq
17268: PPUSH
17269: CALL_OW 88
// changeClass := 1 ;
17273: LD_ADDR_VAR 0 1
17277: PUSH
17278: LD_INT 1
17280: ST_TO_ADDR
// end ; end ;
17281: GO 17284
17283: POP
// if changeClass then
17284: LD_VAR 0 1
17288: IFFALSE 17576
// begin Say ( Heike , DH-1-agree ) ;
17290: LD_EXP 28
17294: PPUSH
17295: LD_STRING DH-1-agree
17297: PPUSH
17298: CALL_OW 88
// if IsOk ( Givi ) then
17302: LD_EXP 29
17306: PPUSH
17307: CALL_OW 302
17311: IFFALSE 17349
// begin Say ( Givi , DG-1-agree ) ;
17313: LD_EXP 29
17317: PPUSH
17318: LD_STRING DG-1-agree
17320: PPUSH
17321: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17325: LD_EXP 28
17329: PPUSH
17330: LD_STRING DH-2-agree
17332: PPUSH
17333: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17337: LD_EXP 29
17341: PPUSH
17342: LD_STRING DG-2-agree
17344: PPUSH
17345: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17349: LD_VAR 0 4
17353: PPUSH
17354: CALL_OW 313
17358: PUSH
17359: LD_INT 6
17361: EQUAL
17362: IFFALSE 17382
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17364: LD_VAR 0 4
17368: PPUSH
17369: CALL_OW 313
17373: PUSH
17374: LD_INT 1
17376: ARRAY
17377: PPUSH
17378: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17382: LD_EXP 38
17386: PPUSH
17387: LD_INT 2
17389: PPUSH
17390: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17394: LD_ADDR_VAR 0 5
17398: PUSH
17399: LD_EXP 38
17403: PPUSH
17404: CALL_OW 250
17408: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17409: LD_ADDR_VAR 0 6
17413: PUSH
17414: LD_EXP 38
17418: PPUSH
17419: CALL_OW 251
17423: ST_TO_ADDR
// if depot then
17424: LD_VAR 0 4
17428: IFFALSE 17477
// begin ComEnterUnit ( Ibrahim , depot ) ;
17430: LD_EXP 38
17434: PPUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17444: LD_INT 35
17446: PPUSH
17447: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17451: LD_EXP 38
17455: PPUSH
17456: CALL_OW 310
17460: IFFALSE 17444
// b := IsInUnit ( Ibrahim ) ;
17462: LD_ADDR_VAR 0 2
17466: PUSH
17467: LD_EXP 38
17471: PPUSH
17472: CALL_OW 310
17476: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17477: LD_EXP 38
17481: PPUSH
17482: CALL_OW 64
// uc_side := 2 ;
17486: LD_ADDR_OWVAR 20
17490: PUSH
17491: LD_INT 2
17493: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17494: LD_ADDR_EXP 38
17498: PUSH
17499: LD_STRING Ibrahim
17501: PPUSH
17502: LD_INT 0
17504: PPUSH
17505: LD_STRING 
17507: PPUSH
17508: CALL 36777 0 3
17512: ST_TO_ADDR
// if depot then
17513: LD_VAR 0 4
17517: IFFALSE 17535
// PlaceHumanInUnit ( Ibrahim , b ) else
17519: LD_EXP 38
17523: PPUSH
17524: LD_VAR 0 2
17528: PPUSH
17529: CALL_OW 52
17533: GO 17557
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17535: LD_EXP 38
17539: PPUSH
17540: LD_VAR 0 5
17544: PPUSH
17545: LD_VAR 0 6
17549: PPUSH
17550: LD_INT 0
17552: PPUSH
17553: CALL_OW 48
// InGameOff ;
17557: CALL_OW 9
// allowConvoys := true ;
17561: LD_ADDR_EXP 12
17565: PUSH
17566: LD_INT 1
17568: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17569: LD_STRING ACH_IBRAHIM
17571: PPUSH
17572: CALL_OW 543
// end ; end ;
17576: PPOPN 6
17578: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17579: LD_EXP 33
17583: PPUSH
17584: CALL_OW 256
17588: PUSH
17589: LD_INT 3
17591: LESS
17592: IFFALSE 17659
17594: GO 17596
17596: DISABLE
// begin DialogueOn ;
17597: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17601: LD_EXP 33
17605: PPUSH
17606: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17610: LD_EXP 33
17614: PPUSH
17615: LD_STRING DK-keydeath-1
17617: PPUSH
17618: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17622: LD_EXP 28
17626: PPUSH
17627: LD_STRING DH-keydeath-2
17629: PPUSH
17630: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17634: LD_EXP 28
17638: PPUSH
17639: LD_STRING DH-keydeath-3
17641: PPUSH
17642: CALL_OW 88
// DialogueOff ;
17646: CALL_OW 7
// KillUnit ( Kaia ) ;
17650: LD_EXP 33
17654: PPUSH
17655: CALL_OW 66
// end ;
17659: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17660: LD_EXP 11
17664: PUSH
17665: LD_EXP 21
17669: PUSH
17670: LD_INT 1
17672: LESS
17673: AND
17674: IFFALSE 18214
17676: GO 17678
17678: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
17679: LD_INT 22
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 2
17691: PUSH
17692: LD_INT 25
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 25
17704: PUSH
17705: LD_INT 3
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: IFFALSE 17803
// begin ChangeSideFog ( 1 , 2 ) ;
17727: LD_INT 1
17729: PPUSH
17730: LD_INT 2
17732: PPUSH
17733: CALL_OW 343
// Query ( DestroyEnemy ) ;
17737: LD_STRING DestroyEnemy
17739: PPUSH
17740: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
17744: LD_INT 35
17746: PPUSH
17747: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
17751: LD_INT 22
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 2
17763: PUSH
17764: LD_INT 25
17766: PUSH
17767: LD_INT 1
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 25
17776: PUSH
17777: LD_INT 3
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PPUSH
17793: CALL_OW 69
17797: PUSH
17798: LD_INT 0
17800: EQUAL
17801: IFFALSE 17744
// end ; DialogueOn ;
17803: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17807: LD_EXP 28
17811: PPUSH
17812: LD_STRING DH-1-final
17814: PPUSH
17815: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
17819: LD_OWVAR 1
17823: PUSH
17824: LD_INT 126000
17826: PUSH
17827: LD_INT 115500
17829: PUSH
17830: LD_INT 105000
17832: PUSH
17833: LD_INT 94500
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: PUSH
17842: LD_OWVAR 67
17846: ARRAY
17847: LESSEQUAL
17848: IFFALSE 17862
// AddMedal ( med1 , 1 ) else
17850: LD_STRING med1
17852: PPUSH
17853: LD_INT 1
17855: PPUSH
17856: CALL_OW 101
17860: GO 17873
// AddMedal ( med1 , - 1 ) ;
17862: LD_STRING med1
17864: PPUSH
17865: LD_INT 1
17867: NEG
17868: PPUSH
17869: CALL_OW 101
// if vehCounter >= 2 then
17873: LD_EXP 22
17877: PUSH
17878: LD_INT 2
17880: GREATEREQUAL
17881: IFFALSE 17895
// AddMedal ( med2 , 1 ) else
17883: LD_STRING med2
17885: PPUSH
17886: LD_INT 1
17888: PPUSH
17889: CALL_OW 101
17893: GO 17906
// AddMedal ( med2 , - 1 ) ;
17895: LD_STRING med2
17897: PPUSH
17898: LD_INT 1
17900: NEG
17901: PPUSH
17902: CALL_OW 101
// if deadCounter = 0 then
17906: LD_EXP 9
17910: PUSH
17911: LD_INT 0
17913: EQUAL
17914: IFFALSE 17928
// AddMedal ( med3 , 1 ) else
17916: LD_STRING med3
17918: PPUSH
17919: LD_INT 1
17921: PPUSH
17922: CALL_OW 101
17926: GO 17939
// AddMedal ( med3 , - 1 ) ;
17928: LD_STRING med3
17930: PPUSH
17931: LD_INT 1
17933: NEG
17934: PPUSH
17935: CALL_OW 101
// GiveMedals ( MAIN ) ;
17939: LD_STRING MAIN
17941: PPUSH
17942: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17946: LD_INT 22
17948: PUSH
17949: LD_INT 2
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 23
17958: PUSH
17959: LD_INT 2
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 21
17968: PUSH
17969: LD_INT 1
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: PPUSH
17981: CALL_OW 69
17985: PPUSH
17986: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17990: LD_EXP 28
17994: PPUSH
17995: LD_STRING 03_Heike
17997: PPUSH
17998: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18002: LD_EXP 32
18006: PPUSH
18007: LD_STRING 03_Aviradze
18009: PPUSH
18010: CALL_OW 38
// if Givi then
18014: LD_EXP 29
18018: IFFALSE 18032
// SaveCharacters ( Givi , 03_Givi ) ;
18020: LD_EXP 29
18024: PPUSH
18025: LD_STRING 03_Givi
18027: PPUSH
18028: CALL_OW 38
// if Mike then
18032: LD_EXP 30
18036: IFFALSE 18050
// SaveCharacters ( Mike , 03_Mike ) ;
18038: LD_EXP 30
18042: PPUSH
18043: LD_STRING 03_Mike
18045: PPUSH
18046: CALL_OW 38
// if Kamil then
18050: LD_EXP 31
18054: IFFALSE 18068
// SaveCharacters ( Kamil , 03_Kamil ) ;
18056: LD_EXP 31
18060: PPUSH
18061: LD_STRING 03_Kamil
18063: PPUSH
18064: CALL_OW 38
// if Kaia then
18068: LD_EXP 33
18072: IFFALSE 18086
// SaveCharacters ( Kaia , 03_Kaia ) ;
18074: LD_EXP 33
18078: PPUSH
18079: LD_STRING 03_Kaia
18081: PPUSH
18082: CALL_OW 38
// if Sophia then
18086: LD_EXP 34
18090: IFFALSE 18104
// SaveCharacters ( Sophia , 03_Sophia ) ;
18092: LD_EXP 34
18096: PPUSH
18097: LD_STRING 03_Sophia
18099: PPUSH
18100: CALL_OW 38
// if Markov then
18104: LD_EXP 35
18108: IFFALSE 18122
// SaveCharacters ( Markov , 03_Markov ) ;
18110: LD_EXP 35
18114: PPUSH
18115: LD_STRING 03_Markov
18117: PPUSH
18118: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18122: LD_EXP 38
18126: PUSH
18127: LD_EXP 38
18131: PPUSH
18132: CALL_OW 255
18136: PUSH
18137: LD_INT 2
18139: EQUAL
18140: AND
18141: IFFALSE 18162
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18143: LD_STRING enableBioCharacter(BIO_IBRA)
18145: PPUSH
18146: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18150: LD_EXP 38
18154: PPUSH
18155: LD_STRING 03_Ibrahim
18157: PPUSH
18158: CALL_OW 38
// end ; if heikeSecondSquad then
18162: LD_EXP 42
18166: IFFALSE 18180
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18168: LD_EXP 42
18172: PPUSH
18173: LD_STRING 03_others
18175: PPUSH
18176: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18180: LD_EXP 9
18184: PPUSH
18185: LD_STRING 03_DeadCounter
18187: PPUSH
18188: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18192: LD_STRING enableBioCharacter(BIO_OMAR)
18194: PPUSH
18195: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18199: LD_STRING enableBioCharacter(BIO_FARM)
18201: PPUSH
18202: CALL_OW 559
// YouWin ;
18206: CALL_OW 103
// DialogueOff ;
18210: CALL_OW 7
// end ; end_of_file
18214: END
// on UnitDestroyed ( un ) do begin if un = Heike then
18215: LD_VAR 0 1
18219: PUSH
18220: LD_EXP 28
18224: EQUAL
18225: IFFALSE 18234
// YouLost ( Heike ) ;
18227: LD_STRING Heike
18229: PPUSH
18230: CALL_OW 104
// if un = Aviradze then
18234: LD_VAR 0 1
18238: PUSH
18239: LD_EXP 32
18243: EQUAL
18244: IFFALSE 18253
// YouLost ( Aviradze ) ;
18246: LD_STRING Aviradze
18248: PPUSH
18249: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18253: LD_VAR 0 1
18257: PUSH
18258: LD_INT 11
18260: EQUAL
18261: PUSH
18262: LD_EXP 11
18266: NOT
18267: AND
18268: IFFALSE 18277
// YouLost ( Depot ) ;
18270: LD_STRING Depot
18272: PPUSH
18273: CALL_OW 104
// if un = arDepot then
18277: LD_VAR 0 1
18281: PUSH
18282: LD_INT 5
18284: EQUAL
18285: IFFALSE 18294
// YouLost ( FarmerDepot ) ;
18287: LD_STRING FarmerDepot
18289: PPUSH
18290: CALL_OW 104
// if un = Farmer then
18294: LD_VAR 0 1
18298: PUSH
18299: LD_EXP 36
18303: EQUAL
18304: IFFALSE 18313
// YouLost ( Farmer ) ;
18306: LD_STRING Farmer
18308: PPUSH
18309: CALL_OW 104
// if un in usForces then
18313: LD_VAR 0 1
18317: PUSH
18318: LD_EXP 44
18322: IN
18323: IFFALSE 18341
// usForces := usForces diff un ;
18325: LD_ADDR_EXP 44
18329: PUSH
18330: LD_EXP 44
18334: PUSH
18335: LD_VAR 0 1
18339: DIFF
18340: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18341: LD_VAR 0 1
18345: PUSH
18346: LD_INT 22
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 23
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 21
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 69
18385: IN
18386: IFFALSE 18402
// deadCounter := deadCounter + 1 ;
18388: LD_ADDR_EXP 9
18392: PUSH
18393: LD_EXP 9
18397: PUSH
18398: LD_INT 1
18400: PLUS
18401: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18402: LD_VAR 0 1
18406: PUSH
18407: LD_INT 22
18409: PUSH
18410: LD_INT 4
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 34
18419: PUSH
18420: LD_INT 12
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PPUSH
18431: CALL_OW 69
18435: IN
18436: PUSH
18437: LD_EXP 18
18441: NOT
18442: AND
18443: IFFALSE 18453
// firstConvoyDestroyed := true ;
18445: LD_ADDR_EXP 18
18449: PUSH
18450: LD_INT 1
18452: ST_TO_ADDR
// if un in usAttackers then
18453: LD_VAR 0 1
18457: PUSH
18458: LD_EXP 47
18462: IN
18463: IFFALSE 18481
// usAttackers := usAttackers diff un ;
18465: LD_ADDR_EXP 47
18469: PUSH
18470: LD_EXP 47
18474: PUSH
18475: LD_VAR 0 1
18479: DIFF
18480: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18481: LD_VAR 0 1
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_INT 5
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 21
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PPUSH
18510: CALL_OW 69
18514: IN
18515: IFFALSE 18531
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18517: LD_ADDR_EXP 20
18521: PUSH
18522: LD_EXP 20
18526: PUSH
18527: LD_INT 1
18529: PLUS
18530: ST_TO_ADDR
// end ;
18531: PPOPN 1
18533: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18534: LD_VAR 0 2
18538: PUSH
18539: LD_EXP 38
18543: EQUAL
18544: PUSH
18545: LD_EXP 25
18549: AND
18550: IFFALSE 18735
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18552: LD_INT 22
18554: PUSH
18555: LD_INT 2
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 30
18564: PUSH
18565: LD_INT 0
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 50
18574: PUSH
18575: EMPTY
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: PPUSH
18583: CALL_OW 69
18587: IFFALSE 18641
// begin InGameOn ;
18589: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18593: LD_EXP 38
18597: PPUSH
18598: LD_INT 11
18600: PPUSH
18601: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18605: LD_INT 35
18607: PPUSH
18608: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18612: LD_EXP 38
18616: PPUSH
18617: LD_INT 11
18619: PPUSH
18620: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18624: LD_EXP 38
18628: PPUSH
18629: CALL_OW 310
18633: IFFALSE 18605
// InGameOff ;
18635: CALL_OW 9
// end else
18639: GO 18735
// begin SetSide ( Ibrahim , 6 ) ;
18641: LD_EXP 38
18645: PPUSH
18646: LD_INT 6
18648: PPUSH
18649: CALL_OW 235
// ibrahimInDepot := false ;
18653: LD_ADDR_EXP 25
18657: PUSH
18658: LD_INT 0
18660: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18661: LD_EXP 38
18665: PPUSH
18666: LD_INT 30
18668: PPUSH
18669: LD_INT 1
18671: PPUSH
18672: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18676: LD_INT 35
18678: PPUSH
18679: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18683: LD_EXP 38
18687: PPUSH
18688: LD_INT 30
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18698: LD_EXP 38
18702: PPUSH
18703: LD_INT 30
18705: PPUSH
18706: LD_INT 1
18708: PPUSH
18709: CALL_OW 307
18713: PUSH
18714: LD_EXP 38
18718: PPUSH
18719: CALL_OW 301
18723: OR
18724: IFFALSE 18676
// RemoveUnit ( Ibrahim ) ;
18726: LD_EXP 38
18730: PPUSH
18731: CALL_OW 64
// end ; end ; end ;
18735: PPOPN 2
18737: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18738: LD_VAR 0 2
18742: PUSH
18743: LD_EXP 28
18747: EQUAL
18748: PUSH
18749: LD_VAR 0 1
18753: PUSH
18754: LD_INT 11
18756: EQUAL
18757: AND
18758: PUSH
18759: LD_EXP 25
18763: AND
18764: IFFALSE 18770
// IbrahimQuery ;
18766: CALL 16390 0 0
// end ;
18770: PPOPN 2
18772: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18773: LD_VAR 0 1
18777: PPUSH
18778: CALL_OW 141
// if oldId in usAttackers then
18782: LD_VAR 0 2
18786: PUSH
18787: LD_EXP 47
18791: IN
18792: IFFALSE 18810
// usAttackers := usAttackers diff oldId ;
18794: LD_ADDR_EXP 47
18798: PUSH
18799: LD_EXP 47
18803: PUSH
18804: LD_VAR 0 2
18808: DIFF
18809: ST_TO_ADDR
// if newId in usAttackers then
18810: LD_VAR 0 1
18814: PUSH
18815: LD_EXP 47
18819: IN
18820: IFFALSE 18838
// usAttackers := usAttackers diff newId ;
18822: LD_ADDR_EXP 47
18826: PUSH
18827: LD_EXP 47
18831: PUSH
18832: LD_VAR 0 1
18836: DIFF
18837: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18838: LD_VAR 0 3
18842: PUSH
18843: LD_INT 4
18845: EQUAL
18846: PUSH
18847: LD_EXP 18
18851: NOT
18852: AND
18853: IFFALSE 18863
// firstConvoyDestroyed := true ;
18855: LD_ADDR_EXP 18
18859: PUSH
18860: LD_INT 1
18862: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18863: LD_VAR 0 1
18867: PPUSH
18868: CALL_OW 264
18872: PUSH
18873: LD_INT 12
18875: EQUAL
18876: IFFALSE 18914
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18878: LD_ADDR_EXP 13
18882: PUSH
18883: LD_EXP 13
18887: PUSH
18888: LD_INT 1
18890: PLUS
18891: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18892: LD_VAR 0 1
18896: PPUSH
18897: LD_INT 1
18899: PPUSH
18900: CALL_OW 289
18904: PUSH
18905: LD_INT 0
18907: EQUAL
18908: IFFALSE 18914
// EmptyCargoDialog ;
18910: CALL 15024 0 0
// end ; end ;
18914: PPOPN 4
18916: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18917: LD_VAR 0 1
18921: PUSH
18922: LD_INT 2
18924: EQUAL
18925: PUSH
18926: LD_VAR 0 2
18930: PUSH
18931: LD_INT 5
18933: EQUAL
18934: AND
18935: IFFALSE 18944
// YouLost ( Attack ) ;
18937: LD_STRING Attack
18939: PPUSH
18940: CALL_OW 104
// end ;
18944: PPOPN 2
18946: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 255
18956: PUSH
18957: LD_INT 1
18959: EQUAL
18960: PUSH
18961: LD_EXP 6
18965: NOT
18966: AND
18967: IFFALSE 19101
// begin if GetBType ( b ) = b_lab then
18969: LD_VAR 0 1
18973: PPUSH
18974: CALL_OW 266
18978: PUSH
18979: LD_INT 6
18981: EQUAL
18982: IFFALSE 19022
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18984: LD_EXP 44
18988: PPUSH
18989: LD_INT 25
18991: PUSH
18992: LD_INT 4
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PPUSH
18999: CALL_OW 72
19003: PPUSH
19004: LD_VAR 0 1
19008: PPUSH
19009: CALL_OW 120
// AmLabResearch ( b ) ;
19013: LD_VAR 0 1
19017: PPUSH
19018: CALL 5203 0 1
// end ; if GetBType ( b ) = b_armoury then
19022: LD_VAR 0 1
19026: PPUSH
19027: CALL_OW 266
19031: PUSH
19032: LD_INT 4
19034: EQUAL
19035: IFFALSE 19083
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19037: LD_EXP 44
19041: PPUSH
19042: LD_INT 25
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 3
19054: PUSH
19055: LD_INT 54
19057: PUSH
19058: EMPTY
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PPUSH
19069: CALL_OW 72
19073: PPUSH
19074: LD_VAR 0 1
19078: PPUSH
19079: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19083: LD_ADDR_EXP 46
19087: PUSH
19088: LD_EXP 46
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: CALL_OW 3
19100: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19101: LD_VAR 0 1
19105: PPUSH
19106: CALL_OW 255
19110: PUSH
19111: LD_INT 5
19113: EQUAL
19114: IFFALSE 19128
// SetBLevel ( b , 5 ) ;
19116: LD_VAR 0 1
19120: PPUSH
19121: LD_INT 5
19123: PPUSH
19124: CALL_OW 241
// end ;
19128: PPOPN 1
19130: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19131: LD_VAR 0 1
19135: PPUSH
19136: CALL_OW 255
19140: PUSH
19141: LD_INT 2
19143: EQUAL
19144: IFFALSE 19160
// vehCounter := vehCounter + 1 ;
19146: LD_ADDR_EXP 22
19150: PUSH
19151: LD_EXP 22
19155: PUSH
19156: LD_INT 1
19158: PLUS
19159: ST_TO_ADDR
// end ;
19160: PPOPN 2
19162: END
// on SailEvent ( event ) do begin if event = eventAttack then
19163: LD_VAR 0 1
19167: PUSH
19168: LD_EXP 24
19172: EQUAL
19173: IFFALSE 19179
// AmericanAttack ;
19175: CALL 6698 0 0
// end ; end_of_file
19179: PPOPN 1
19181: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19182: LD_OWVAR 1
19186: PUSH
19187: LD_INT 10500
19189: PUSH
19190: LD_INT 9800
19192: PUSH
19193: LD_INT 9450
19195: PUSH
19196: LD_INT 9100
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: PUSH
19205: LD_OWVAR 67
19209: ARRAY
19210: LESSEQUAL
19211: IFFALSE 19238
19213: GO 19215
19215: DISABLE
// begin enable ;
19216: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19217: LD_INT 1
19219: PPUSH
19220: LD_INT 5
19222: PPUSH
19223: CALL_OW 12
19227: PPUSH
19228: LD_INT 9
19230: PPUSH
19231: LD_INT 1
19233: PPUSH
19234: CALL_OW 55
// end ;
19238: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 , 25 25$00 ] [ Difficulty ] do
19239: LD_EXP 6
19243: PUSH
19244: LD_OWVAR 1
19248: PUSH
19249: LD_INT 56700
19251: PUSH
19252: LD_INT 55650
19254: PUSH
19255: LD_INT 54600
19257: PUSH
19258: LD_INT 52500
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: PUSH
19267: LD_OWVAR 67
19271: ARRAY
19272: LESSEQUAL
19273: AND
19274: IFFALSE 19301
19276: GO 19278
19278: DISABLE
// begin enable ;
19279: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19280: LD_INT 3
19282: PPUSH
19283: LD_INT 5
19285: PPUSH
19286: CALL_OW 12
19290: PPUSH
19291: LD_INT 9
19293: PPUSH
19294: LD_INT 1
19296: PPUSH
19297: CALL_OW 55
// end ; end_of_file
19301: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19302: LD_EXP 11
19306: NOT
19307: PUSH
19308: LD_EXP 16
19312: AND
19313: PUSH
19314: LD_EXP 4
19318: AND
19319: PUSH
19320: LD_EXP 15
19324: PUSH
19325: LD_EXP 16
19329: LESSEQUAL
19330: AND
19331: IFFALSE 19421
19333: GO 19335
19335: DISABLE
// begin enable ;
19336: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19337: LD_ADDR_OWVAR 47
19341: PUSH
19342: LD_STRING #X103-1
19344: PUSH
19345: LD_EXP 16
19349: PUSH
19350: LD_EXP 15
19354: MINUS
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19360: LD_ADDR_EXP 15
19364: PUSH
19365: LD_INT 5
19367: PPUSH
19368: CALL_OW 274
19372: PPUSH
19373: LD_INT 1
19375: PPUSH
19376: CALL_OW 275
19380: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19381: LD_INT 10
19383: PPUSH
19384: LD_INT 1
19386: PPUSH
19387: CALL_OW 287
19391: PUSH
19392: LD_INT 0
19394: EQUAL
19395: IFFALSE 19413
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19397: LD_ADDR_EXP 17
19401: PUSH
19402: LD_EXP 17
19406: PUSH
19407: LD_INT 35
19409: MINUS
19410: ST_TO_ADDR
19411: GO 19421
// farmerCratesCounter := 30 30$00 ;
19413: LD_ADDR_EXP 17
19417: PUSH
19418: LD_INT 63000
19420: ST_TO_ADDR
// end ; end_of_file
19421: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19422: LD_INT 0
19424: PPUSH
// ar_miner := 81 ;
19425: LD_ADDR_EXP 55
19429: PUSH
19430: LD_INT 81
19432: ST_TO_ADDR
// ar_crane := 88 ;
19433: LD_ADDR_EXP 54
19437: PUSH
19438: LD_INT 88
19440: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19441: LD_ADDR_EXP 49
19445: PUSH
19446: LD_INT 89
19448: ST_TO_ADDR
// us_hack := 99 ;
19449: LD_ADDR_EXP 50
19453: PUSH
19454: LD_INT 99
19456: ST_TO_ADDR
// us_artillery := 97 ;
19457: LD_ADDR_EXP 51
19461: PUSH
19462: LD_INT 97
19464: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19465: LD_ADDR_EXP 52
19469: PUSH
19470: LD_INT 91
19472: ST_TO_ADDR
// ar_mortar := 92 ;
19473: LD_ADDR_EXP 53
19477: PUSH
19478: LD_INT 92
19480: ST_TO_ADDR
// ru_radar := 98 ;
19481: LD_ADDR_EXP 48
19485: PUSH
19486: LD_INT 98
19488: ST_TO_ADDR
// tech_Artillery := 80 ;
19489: LD_ADDR_EXP 56
19493: PUSH
19494: LD_INT 80
19496: ST_TO_ADDR
// tech_RadMat := 81 ;
19497: LD_ADDR_EXP 57
19501: PUSH
19502: LD_INT 81
19504: ST_TO_ADDR
// tech_BasicTools := 82 ;
19505: LD_ADDR_EXP 58
19509: PUSH
19510: LD_INT 82
19512: ST_TO_ADDR
// tech_Cargo := 83 ;
19513: LD_ADDR_EXP 59
19517: PUSH
19518: LD_INT 83
19520: ST_TO_ADDR
// tech_Track := 84 ;
19521: LD_ADDR_EXP 60
19525: PUSH
19526: LD_INT 84
19528: ST_TO_ADDR
// tech_Crane := 85 ;
19529: LD_ADDR_EXP 61
19533: PUSH
19534: LD_INT 85
19536: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19537: LD_ADDR_EXP 62
19541: PUSH
19542: LD_INT 86
19544: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19545: LD_ADDR_EXP 63
19549: PUSH
19550: LD_INT 87
19552: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19553: LD_ADDR_EXP 64
19557: PUSH
19558: LD_INT 88
19560: ST_TO_ADDR
// class_mastodont := 31 ;
19561: LD_ADDR_EXP 65
19565: PUSH
19566: LD_INT 31
19568: ST_TO_ADDR
// class_horse := 21 ;
19569: LD_ADDR_EXP 66
19573: PUSH
19574: LD_INT 21
19576: ST_TO_ADDR
// end ;
19577: LD_VAR 0 1
19581: RET
// every 1 do
19582: GO 19584
19584: DISABLE
// InitGlobalVariables ; end_of_file
19585: CALL 19422 0 0
19589: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19590: LD_INT 0
19592: PPUSH
// if p2 = 100 then
19593: LD_VAR 0 2
19597: PUSH
19598: LD_INT 100
19600: EQUAL
19601: IFFALSE 20550
// begin if not StreamModeActive then
19603: LD_EXP 67
19607: NOT
19608: IFFALSE 19618
// StreamModeActive := true ;
19610: LD_ADDR_EXP 67
19614: PUSH
19615: LD_INT 1
19617: ST_TO_ADDR
// if p3 = 0 then
19618: LD_VAR 0 3
19622: PUSH
19623: LD_INT 0
19625: EQUAL
19626: IFFALSE 19632
// InitStreamMode ;
19628: CALL 20710 0 0
// if p3 = 1 then
19632: LD_VAR 0 3
19636: PUSH
19637: LD_INT 1
19639: EQUAL
19640: IFFALSE 19650
// sRocket := true ;
19642: LD_ADDR_EXP 72
19646: PUSH
19647: LD_INT 1
19649: ST_TO_ADDR
// if p3 = 2 then
19650: LD_VAR 0 3
19654: PUSH
19655: LD_INT 2
19657: EQUAL
19658: IFFALSE 19668
// sSpeed := true ;
19660: LD_ADDR_EXP 71
19664: PUSH
19665: LD_INT 1
19667: ST_TO_ADDR
// if p3 = 3 then
19668: LD_VAR 0 3
19672: PUSH
19673: LD_INT 3
19675: EQUAL
19676: IFFALSE 19686
// sEngine := true ;
19678: LD_ADDR_EXP 73
19682: PUSH
19683: LD_INT 1
19685: ST_TO_ADDR
// if p3 = 4 then
19686: LD_VAR 0 3
19690: PUSH
19691: LD_INT 4
19693: EQUAL
19694: IFFALSE 19704
// sSpec := true ;
19696: LD_ADDR_EXP 70
19700: PUSH
19701: LD_INT 1
19703: ST_TO_ADDR
// if p3 = 5 then
19704: LD_VAR 0 3
19708: PUSH
19709: LD_INT 5
19711: EQUAL
19712: IFFALSE 19722
// sLevel := true ;
19714: LD_ADDR_EXP 74
19718: PUSH
19719: LD_INT 1
19721: ST_TO_ADDR
// if p3 = 6 then
19722: LD_VAR 0 3
19726: PUSH
19727: LD_INT 6
19729: EQUAL
19730: IFFALSE 19740
// sArmoury := true ;
19732: LD_ADDR_EXP 75
19736: PUSH
19737: LD_INT 1
19739: ST_TO_ADDR
// if p3 = 7 then
19740: LD_VAR 0 3
19744: PUSH
19745: LD_INT 7
19747: EQUAL
19748: IFFALSE 19758
// sRadar := true ;
19750: LD_ADDR_EXP 76
19754: PUSH
19755: LD_INT 1
19757: ST_TO_ADDR
// if p3 = 8 then
19758: LD_VAR 0 3
19762: PUSH
19763: LD_INT 8
19765: EQUAL
19766: IFFALSE 19776
// sBunker := true ;
19768: LD_ADDR_EXP 77
19772: PUSH
19773: LD_INT 1
19775: ST_TO_ADDR
// if p3 = 9 then
19776: LD_VAR 0 3
19780: PUSH
19781: LD_INT 9
19783: EQUAL
19784: IFFALSE 19794
// sHack := true ;
19786: LD_ADDR_EXP 78
19790: PUSH
19791: LD_INT 1
19793: ST_TO_ADDR
// if p3 = 10 then
19794: LD_VAR 0 3
19798: PUSH
19799: LD_INT 10
19801: EQUAL
19802: IFFALSE 19812
// sFire := true ;
19804: LD_ADDR_EXP 79
19808: PUSH
19809: LD_INT 1
19811: ST_TO_ADDR
// if p3 = 11 then
19812: LD_VAR 0 3
19816: PUSH
19817: LD_INT 11
19819: EQUAL
19820: IFFALSE 19830
// sRefresh := true ;
19822: LD_ADDR_EXP 80
19826: PUSH
19827: LD_INT 1
19829: ST_TO_ADDR
// if p3 = 12 then
19830: LD_VAR 0 3
19834: PUSH
19835: LD_INT 12
19837: EQUAL
19838: IFFALSE 19848
// sExp := true ;
19840: LD_ADDR_EXP 81
19844: PUSH
19845: LD_INT 1
19847: ST_TO_ADDR
// if p3 = 13 then
19848: LD_VAR 0 3
19852: PUSH
19853: LD_INT 13
19855: EQUAL
19856: IFFALSE 19866
// sDepot := true ;
19858: LD_ADDR_EXP 82
19862: PUSH
19863: LD_INT 1
19865: ST_TO_ADDR
// if p3 = 14 then
19866: LD_VAR 0 3
19870: PUSH
19871: LD_INT 14
19873: EQUAL
19874: IFFALSE 19884
// sFlag := true ;
19876: LD_ADDR_EXP 83
19880: PUSH
19881: LD_INT 1
19883: ST_TO_ADDR
// if p3 = 15 then
19884: LD_VAR 0 3
19888: PUSH
19889: LD_INT 15
19891: EQUAL
19892: IFFALSE 19902
// sKamikadze := true ;
19894: LD_ADDR_EXP 91
19898: PUSH
19899: LD_INT 1
19901: ST_TO_ADDR
// if p3 = 16 then
19902: LD_VAR 0 3
19906: PUSH
19907: LD_INT 16
19909: EQUAL
19910: IFFALSE 19920
// sTroll := true ;
19912: LD_ADDR_EXP 92
19916: PUSH
19917: LD_INT 1
19919: ST_TO_ADDR
// if p3 = 17 then
19920: LD_VAR 0 3
19924: PUSH
19925: LD_INT 17
19927: EQUAL
19928: IFFALSE 19938
// sSlow := true ;
19930: LD_ADDR_EXP 93
19934: PUSH
19935: LD_INT 1
19937: ST_TO_ADDR
// if p3 = 18 then
19938: LD_VAR 0 3
19942: PUSH
19943: LD_INT 18
19945: EQUAL
19946: IFFALSE 19956
// sLack := true ;
19948: LD_ADDR_EXP 94
19952: PUSH
19953: LD_INT 1
19955: ST_TO_ADDR
// if p3 = 19 then
19956: LD_VAR 0 3
19960: PUSH
19961: LD_INT 19
19963: EQUAL
19964: IFFALSE 19974
// sTank := true ;
19966: LD_ADDR_EXP 96
19970: PUSH
19971: LD_INT 1
19973: ST_TO_ADDR
// if p3 = 20 then
19974: LD_VAR 0 3
19978: PUSH
19979: LD_INT 20
19981: EQUAL
19982: IFFALSE 19992
// sRemote := true ;
19984: LD_ADDR_EXP 97
19988: PUSH
19989: LD_INT 1
19991: ST_TO_ADDR
// if p3 = 21 then
19992: LD_VAR 0 3
19996: PUSH
19997: LD_INT 21
19999: EQUAL
20000: IFFALSE 20010
// sPowell := true ;
20002: LD_ADDR_EXP 98
20006: PUSH
20007: LD_INT 1
20009: ST_TO_ADDR
// if p3 = 22 then
20010: LD_VAR 0 3
20014: PUSH
20015: LD_INT 22
20017: EQUAL
20018: IFFALSE 20028
// sTeleport := true ;
20020: LD_ADDR_EXP 101
20024: PUSH
20025: LD_INT 1
20027: ST_TO_ADDR
// if p3 = 23 then
20028: LD_VAR 0 3
20032: PUSH
20033: LD_INT 23
20035: EQUAL
20036: IFFALSE 20046
// sOilTower := true ;
20038: LD_ADDR_EXP 103
20042: PUSH
20043: LD_INT 1
20045: ST_TO_ADDR
// if p3 = 24 then
20046: LD_VAR 0 3
20050: PUSH
20051: LD_INT 24
20053: EQUAL
20054: IFFALSE 20064
// sShovel := true ;
20056: LD_ADDR_EXP 104
20060: PUSH
20061: LD_INT 1
20063: ST_TO_ADDR
// if p3 = 25 then
20064: LD_VAR 0 3
20068: PUSH
20069: LD_INT 25
20071: EQUAL
20072: IFFALSE 20082
// sSheik := true ;
20074: LD_ADDR_EXP 105
20078: PUSH
20079: LD_INT 1
20081: ST_TO_ADDR
// if p3 = 26 then
20082: LD_VAR 0 3
20086: PUSH
20087: LD_INT 26
20089: EQUAL
20090: IFFALSE 20100
// sEarthquake := true ;
20092: LD_ADDR_EXP 107
20096: PUSH
20097: LD_INT 1
20099: ST_TO_ADDR
// if p3 = 27 then
20100: LD_VAR 0 3
20104: PUSH
20105: LD_INT 27
20107: EQUAL
20108: IFFALSE 20118
// sAI := true ;
20110: LD_ADDR_EXP 108
20114: PUSH
20115: LD_INT 1
20117: ST_TO_ADDR
// if p3 = 28 then
20118: LD_VAR 0 3
20122: PUSH
20123: LD_INT 28
20125: EQUAL
20126: IFFALSE 20136
// sCargo := true ;
20128: LD_ADDR_EXP 111
20132: PUSH
20133: LD_INT 1
20135: ST_TO_ADDR
// if p3 = 29 then
20136: LD_VAR 0 3
20140: PUSH
20141: LD_INT 29
20143: EQUAL
20144: IFFALSE 20154
// sDLaser := true ;
20146: LD_ADDR_EXP 112
20150: PUSH
20151: LD_INT 1
20153: ST_TO_ADDR
// if p3 = 30 then
20154: LD_VAR 0 3
20158: PUSH
20159: LD_INT 30
20161: EQUAL
20162: IFFALSE 20172
// sExchange := true ;
20164: LD_ADDR_EXP 113
20168: PUSH
20169: LD_INT 1
20171: ST_TO_ADDR
// if p3 = 31 then
20172: LD_VAR 0 3
20176: PUSH
20177: LD_INT 31
20179: EQUAL
20180: IFFALSE 20190
// sFac := true ;
20182: LD_ADDR_EXP 114
20186: PUSH
20187: LD_INT 1
20189: ST_TO_ADDR
// if p3 = 32 then
20190: LD_VAR 0 3
20194: PUSH
20195: LD_INT 32
20197: EQUAL
20198: IFFALSE 20208
// sPower := true ;
20200: LD_ADDR_EXP 115
20204: PUSH
20205: LD_INT 1
20207: ST_TO_ADDR
// if p3 = 33 then
20208: LD_VAR 0 3
20212: PUSH
20213: LD_INT 33
20215: EQUAL
20216: IFFALSE 20226
// sRandom := true ;
20218: LD_ADDR_EXP 116
20222: PUSH
20223: LD_INT 1
20225: ST_TO_ADDR
// if p3 = 34 then
20226: LD_VAR 0 3
20230: PUSH
20231: LD_INT 34
20233: EQUAL
20234: IFFALSE 20244
// sShield := true ;
20236: LD_ADDR_EXP 117
20240: PUSH
20241: LD_INT 1
20243: ST_TO_ADDR
// if p3 = 35 then
20244: LD_VAR 0 3
20248: PUSH
20249: LD_INT 35
20251: EQUAL
20252: IFFALSE 20262
// sTime := true ;
20254: LD_ADDR_EXP 118
20258: PUSH
20259: LD_INT 1
20261: ST_TO_ADDR
// if p3 = 36 then
20262: LD_VAR 0 3
20266: PUSH
20267: LD_INT 36
20269: EQUAL
20270: IFFALSE 20280
// sTools := true ;
20272: LD_ADDR_EXP 119
20276: PUSH
20277: LD_INT 1
20279: ST_TO_ADDR
// if p3 = 101 then
20280: LD_VAR 0 3
20284: PUSH
20285: LD_INT 101
20287: EQUAL
20288: IFFALSE 20298
// sSold := true ;
20290: LD_ADDR_EXP 84
20294: PUSH
20295: LD_INT 1
20297: ST_TO_ADDR
// if p3 = 102 then
20298: LD_VAR 0 3
20302: PUSH
20303: LD_INT 102
20305: EQUAL
20306: IFFALSE 20316
// sDiff := true ;
20308: LD_ADDR_EXP 85
20312: PUSH
20313: LD_INT 1
20315: ST_TO_ADDR
// if p3 = 103 then
20316: LD_VAR 0 3
20320: PUSH
20321: LD_INT 103
20323: EQUAL
20324: IFFALSE 20334
// sFog := true ;
20326: LD_ADDR_EXP 88
20330: PUSH
20331: LD_INT 1
20333: ST_TO_ADDR
// if p3 = 104 then
20334: LD_VAR 0 3
20338: PUSH
20339: LD_INT 104
20341: EQUAL
20342: IFFALSE 20352
// sReset := true ;
20344: LD_ADDR_EXP 89
20348: PUSH
20349: LD_INT 1
20351: ST_TO_ADDR
// if p3 = 105 then
20352: LD_VAR 0 3
20356: PUSH
20357: LD_INT 105
20359: EQUAL
20360: IFFALSE 20370
// sSun := true ;
20362: LD_ADDR_EXP 90
20366: PUSH
20367: LD_INT 1
20369: ST_TO_ADDR
// if p3 = 106 then
20370: LD_VAR 0 3
20374: PUSH
20375: LD_INT 106
20377: EQUAL
20378: IFFALSE 20388
// sTiger := true ;
20380: LD_ADDR_EXP 86
20384: PUSH
20385: LD_INT 1
20387: ST_TO_ADDR
// if p3 = 107 then
20388: LD_VAR 0 3
20392: PUSH
20393: LD_INT 107
20395: EQUAL
20396: IFFALSE 20406
// sBomb := true ;
20398: LD_ADDR_EXP 87
20402: PUSH
20403: LD_INT 1
20405: ST_TO_ADDR
// if p3 = 108 then
20406: LD_VAR 0 3
20410: PUSH
20411: LD_INT 108
20413: EQUAL
20414: IFFALSE 20424
// sWound := true ;
20416: LD_ADDR_EXP 95
20420: PUSH
20421: LD_INT 1
20423: ST_TO_ADDR
// if p3 = 109 then
20424: LD_VAR 0 3
20428: PUSH
20429: LD_INT 109
20431: EQUAL
20432: IFFALSE 20442
// sBetray := true ;
20434: LD_ADDR_EXP 99
20438: PUSH
20439: LD_INT 1
20441: ST_TO_ADDR
// if p3 = 110 then
20442: LD_VAR 0 3
20446: PUSH
20447: LD_INT 110
20449: EQUAL
20450: IFFALSE 20460
// sContamin := true ;
20452: LD_ADDR_EXP 100
20456: PUSH
20457: LD_INT 1
20459: ST_TO_ADDR
// if p3 = 111 then
20460: LD_VAR 0 3
20464: PUSH
20465: LD_INT 111
20467: EQUAL
20468: IFFALSE 20478
// sOil := true ;
20470: LD_ADDR_EXP 102
20474: PUSH
20475: LD_INT 1
20477: ST_TO_ADDR
// if p3 = 112 then
20478: LD_VAR 0 3
20482: PUSH
20483: LD_INT 112
20485: EQUAL
20486: IFFALSE 20496
// sStu := true ;
20488: LD_ADDR_EXP 106
20492: PUSH
20493: LD_INT 1
20495: ST_TO_ADDR
// if p3 = 113 then
20496: LD_VAR 0 3
20500: PUSH
20501: LD_INT 113
20503: EQUAL
20504: IFFALSE 20514
// sBazooka := true ;
20506: LD_ADDR_EXP 109
20510: PUSH
20511: LD_INT 1
20513: ST_TO_ADDR
// if p3 = 114 then
20514: LD_VAR 0 3
20518: PUSH
20519: LD_INT 114
20521: EQUAL
20522: IFFALSE 20532
// sMortar := true ;
20524: LD_ADDR_EXP 110
20528: PUSH
20529: LD_INT 1
20531: ST_TO_ADDR
// if p3 = 115 then
20532: LD_VAR 0 3
20536: PUSH
20537: LD_INT 115
20539: EQUAL
20540: IFFALSE 20550
// sRanger := true ;
20542: LD_ADDR_EXP 120
20546: PUSH
20547: LD_INT 1
20549: ST_TO_ADDR
// end ; if p2 = 101 then
20550: LD_VAR 0 2
20554: PUSH
20555: LD_INT 101
20557: EQUAL
20558: IFFALSE 20686
// begin case p3 of 1 :
20560: LD_VAR 0 3
20564: PUSH
20565: LD_INT 1
20567: DOUBLE
20568: EQUAL
20569: IFTRUE 20573
20571: GO 20580
20573: POP
// hHackUnlimitedResources ; 2 :
20574: CALL 31723 0 0
20578: GO 20686
20580: LD_INT 2
20582: DOUBLE
20583: EQUAL
20584: IFTRUE 20588
20586: GO 20595
20588: POP
// hHackSetLevel10 ; 3 :
20589: CALL 31856 0 0
20593: GO 20686
20595: LD_INT 3
20597: DOUBLE
20598: EQUAL
20599: IFTRUE 20603
20601: GO 20610
20603: POP
// hHackSetLevel10YourUnits ; 4 :
20604: CALL 31941 0 0
20608: GO 20686
20610: LD_INT 4
20612: DOUBLE
20613: EQUAL
20614: IFTRUE 20618
20616: GO 20625
20618: POP
// hHackInvincible ; 5 :
20619: CALL 32389 0 0
20623: GO 20686
20625: LD_INT 5
20627: DOUBLE
20628: EQUAL
20629: IFTRUE 20633
20631: GO 20640
20633: POP
// hHackInvisible ; 6 :
20634: CALL 32500 0 0
20638: GO 20686
20640: LD_INT 6
20642: DOUBLE
20643: EQUAL
20644: IFTRUE 20648
20646: GO 20655
20648: POP
// hHackChangeYourSide ; 7 :
20649: CALL 32557 0 0
20653: GO 20686
20655: LD_INT 7
20657: DOUBLE
20658: EQUAL
20659: IFTRUE 20663
20661: GO 20670
20663: POP
// hHackChangeUnitSide ; 8 :
20664: CALL 32599 0 0
20668: GO 20686
20670: LD_INT 8
20672: DOUBLE
20673: EQUAL
20674: IFTRUE 20678
20676: GO 20685
20678: POP
// hHackFog ; end ;
20679: CALL 32700 0 0
20683: GO 20686
20685: POP
// end ; end ;
20686: LD_VAR 0 7
20690: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20691: GO 20693
20693: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20694: LD_STRING initStreamRollete();
20696: PPUSH
20697: CALL_OW 559
// InitStreamMode ;
20701: CALL 20710 0 0
// DefineStreamItems ( ) ;
20705: CALL 21150 0 0
// end ;
20709: END
// function InitStreamMode ; begin
20710: LD_INT 0
20712: PPUSH
// streamModeActive := false ;
20713: LD_ADDR_EXP 67
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// normalCounter := 36 ;
20721: LD_ADDR_EXP 68
20725: PUSH
20726: LD_INT 36
20728: ST_TO_ADDR
// hardcoreCounter := 16 ;
20729: LD_ADDR_EXP 69
20733: PUSH
20734: LD_INT 16
20736: ST_TO_ADDR
// sRocket := false ;
20737: LD_ADDR_EXP 72
20741: PUSH
20742: LD_INT 0
20744: ST_TO_ADDR
// sSpeed := false ;
20745: LD_ADDR_EXP 71
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// sEngine := false ;
20753: LD_ADDR_EXP 73
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// sSpec := false ;
20761: LD_ADDR_EXP 70
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// sLevel := false ;
20769: LD_ADDR_EXP 74
20773: PUSH
20774: LD_INT 0
20776: ST_TO_ADDR
// sArmoury := false ;
20777: LD_ADDR_EXP 75
20781: PUSH
20782: LD_INT 0
20784: ST_TO_ADDR
// sRadar := false ;
20785: LD_ADDR_EXP 76
20789: PUSH
20790: LD_INT 0
20792: ST_TO_ADDR
// sBunker := false ;
20793: LD_ADDR_EXP 77
20797: PUSH
20798: LD_INT 0
20800: ST_TO_ADDR
// sHack := false ;
20801: LD_ADDR_EXP 78
20805: PUSH
20806: LD_INT 0
20808: ST_TO_ADDR
// sFire := false ;
20809: LD_ADDR_EXP 79
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// sRefresh := false ;
20817: LD_ADDR_EXP 80
20821: PUSH
20822: LD_INT 0
20824: ST_TO_ADDR
// sExp := false ;
20825: LD_ADDR_EXP 81
20829: PUSH
20830: LD_INT 0
20832: ST_TO_ADDR
// sDepot := false ;
20833: LD_ADDR_EXP 82
20837: PUSH
20838: LD_INT 0
20840: ST_TO_ADDR
// sFlag := false ;
20841: LD_ADDR_EXP 83
20845: PUSH
20846: LD_INT 0
20848: ST_TO_ADDR
// sKamikadze := false ;
20849: LD_ADDR_EXP 91
20853: PUSH
20854: LD_INT 0
20856: ST_TO_ADDR
// sTroll := false ;
20857: LD_ADDR_EXP 92
20861: PUSH
20862: LD_INT 0
20864: ST_TO_ADDR
// sSlow := false ;
20865: LD_ADDR_EXP 93
20869: PUSH
20870: LD_INT 0
20872: ST_TO_ADDR
// sLack := false ;
20873: LD_ADDR_EXP 94
20877: PUSH
20878: LD_INT 0
20880: ST_TO_ADDR
// sTank := false ;
20881: LD_ADDR_EXP 96
20885: PUSH
20886: LD_INT 0
20888: ST_TO_ADDR
// sRemote := false ;
20889: LD_ADDR_EXP 97
20893: PUSH
20894: LD_INT 0
20896: ST_TO_ADDR
// sPowell := false ;
20897: LD_ADDR_EXP 98
20901: PUSH
20902: LD_INT 0
20904: ST_TO_ADDR
// sTeleport := false ;
20905: LD_ADDR_EXP 101
20909: PUSH
20910: LD_INT 0
20912: ST_TO_ADDR
// sOilTower := false ;
20913: LD_ADDR_EXP 103
20917: PUSH
20918: LD_INT 0
20920: ST_TO_ADDR
// sShovel := false ;
20921: LD_ADDR_EXP 104
20925: PUSH
20926: LD_INT 0
20928: ST_TO_ADDR
// sSheik := false ;
20929: LD_ADDR_EXP 105
20933: PUSH
20934: LD_INT 0
20936: ST_TO_ADDR
// sEarthquake := false ;
20937: LD_ADDR_EXP 107
20941: PUSH
20942: LD_INT 0
20944: ST_TO_ADDR
// sAI := false ;
20945: LD_ADDR_EXP 108
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// sCargo := false ;
20953: LD_ADDR_EXP 111
20957: PUSH
20958: LD_INT 0
20960: ST_TO_ADDR
// sDLaser := false ;
20961: LD_ADDR_EXP 112
20965: PUSH
20966: LD_INT 0
20968: ST_TO_ADDR
// sExchange := false ;
20969: LD_ADDR_EXP 113
20973: PUSH
20974: LD_INT 0
20976: ST_TO_ADDR
// sFac := false ;
20977: LD_ADDR_EXP 114
20981: PUSH
20982: LD_INT 0
20984: ST_TO_ADDR
// sPower := false ;
20985: LD_ADDR_EXP 115
20989: PUSH
20990: LD_INT 0
20992: ST_TO_ADDR
// sRandom := false ;
20993: LD_ADDR_EXP 116
20997: PUSH
20998: LD_INT 0
21000: ST_TO_ADDR
// sShield := false ;
21001: LD_ADDR_EXP 117
21005: PUSH
21006: LD_INT 0
21008: ST_TO_ADDR
// sTime := false ;
21009: LD_ADDR_EXP 118
21013: PUSH
21014: LD_INT 0
21016: ST_TO_ADDR
// sTools := false ;
21017: LD_ADDR_EXP 119
21021: PUSH
21022: LD_INT 0
21024: ST_TO_ADDR
// sSold := false ;
21025: LD_ADDR_EXP 84
21029: PUSH
21030: LD_INT 0
21032: ST_TO_ADDR
// sDiff := false ;
21033: LD_ADDR_EXP 85
21037: PUSH
21038: LD_INT 0
21040: ST_TO_ADDR
// sFog := false ;
21041: LD_ADDR_EXP 88
21045: PUSH
21046: LD_INT 0
21048: ST_TO_ADDR
// sReset := false ;
21049: LD_ADDR_EXP 89
21053: PUSH
21054: LD_INT 0
21056: ST_TO_ADDR
// sSun := false ;
21057: LD_ADDR_EXP 90
21061: PUSH
21062: LD_INT 0
21064: ST_TO_ADDR
// sTiger := false ;
21065: LD_ADDR_EXP 86
21069: PUSH
21070: LD_INT 0
21072: ST_TO_ADDR
// sBomb := false ;
21073: LD_ADDR_EXP 87
21077: PUSH
21078: LD_INT 0
21080: ST_TO_ADDR
// sWound := false ;
21081: LD_ADDR_EXP 95
21085: PUSH
21086: LD_INT 0
21088: ST_TO_ADDR
// sBetray := false ;
21089: LD_ADDR_EXP 99
21093: PUSH
21094: LD_INT 0
21096: ST_TO_ADDR
// sContamin := false ;
21097: LD_ADDR_EXP 100
21101: PUSH
21102: LD_INT 0
21104: ST_TO_ADDR
// sOil := false ;
21105: LD_ADDR_EXP 102
21109: PUSH
21110: LD_INT 0
21112: ST_TO_ADDR
// sStu := false ;
21113: LD_ADDR_EXP 106
21117: PUSH
21118: LD_INT 0
21120: ST_TO_ADDR
// sBazooka := false ;
21121: LD_ADDR_EXP 109
21125: PUSH
21126: LD_INT 0
21128: ST_TO_ADDR
// sMortar := false ;
21129: LD_ADDR_EXP 110
21133: PUSH
21134: LD_INT 0
21136: ST_TO_ADDR
// sRanger := false ;
21137: LD_ADDR_EXP 120
21141: PUSH
21142: LD_INT 0
21144: ST_TO_ADDR
// end ;
21145: LD_VAR 0 1
21149: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21150: LD_INT 0
21152: PPUSH
21153: PPUSH
21154: PPUSH
21155: PPUSH
21156: PPUSH
// result := [ ] ;
21157: LD_ADDR_VAR 0 1
21161: PUSH
21162: EMPTY
21163: ST_TO_ADDR
// if campaign_id = 1 then
21164: LD_OWVAR 69
21168: PUSH
21169: LD_INT 1
21171: EQUAL
21172: IFFALSE 24110
// begin case mission_number of 1 :
21174: LD_OWVAR 70
21178: PUSH
21179: LD_INT 1
21181: DOUBLE
21182: EQUAL
21183: IFTRUE 21187
21185: GO 21251
21187: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21188: LD_ADDR_VAR 0 1
21192: PUSH
21193: LD_INT 2
21195: PUSH
21196: LD_INT 4
21198: PUSH
21199: LD_INT 11
21201: PUSH
21202: LD_INT 12
21204: PUSH
21205: LD_INT 15
21207: PUSH
21208: LD_INT 16
21210: PUSH
21211: LD_INT 22
21213: PUSH
21214: LD_INT 23
21216: PUSH
21217: LD_INT 26
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 101
21233: PUSH
21234: LD_INT 102
21236: PUSH
21237: LD_INT 106
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: LIST
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: ST_TO_ADDR
21249: GO 24108
21251: LD_INT 2
21253: DOUBLE
21254: EQUAL
21255: IFTRUE 21259
21257: GO 21331
21259: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21260: LD_ADDR_VAR 0 1
21264: PUSH
21265: LD_INT 2
21267: PUSH
21268: LD_INT 4
21270: PUSH
21271: LD_INT 11
21273: PUSH
21274: LD_INT 12
21276: PUSH
21277: LD_INT 15
21279: PUSH
21280: LD_INT 16
21282: PUSH
21283: LD_INT 22
21285: PUSH
21286: LD_INT 23
21288: PUSH
21289: LD_INT 26
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 101
21305: PUSH
21306: LD_INT 102
21308: PUSH
21309: LD_INT 105
21311: PUSH
21312: LD_INT 106
21314: PUSH
21315: LD_INT 108
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: ST_TO_ADDR
21329: GO 24108
21331: LD_INT 3
21333: DOUBLE
21334: EQUAL
21335: IFTRUE 21339
21337: GO 21415
21339: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21340: LD_ADDR_VAR 0 1
21344: PUSH
21345: LD_INT 2
21347: PUSH
21348: LD_INT 4
21350: PUSH
21351: LD_INT 5
21353: PUSH
21354: LD_INT 11
21356: PUSH
21357: LD_INT 12
21359: PUSH
21360: LD_INT 15
21362: PUSH
21363: LD_INT 16
21365: PUSH
21366: LD_INT 22
21368: PUSH
21369: LD_INT 26
21371: PUSH
21372: LD_INT 36
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 101
21389: PUSH
21390: LD_INT 102
21392: PUSH
21393: LD_INT 105
21395: PUSH
21396: LD_INT 106
21398: PUSH
21399: LD_INT 108
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: ST_TO_ADDR
21413: GO 24108
21415: LD_INT 4
21417: DOUBLE
21418: EQUAL
21419: IFTRUE 21423
21421: GO 21507
21423: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21424: LD_ADDR_VAR 0 1
21428: PUSH
21429: LD_INT 2
21431: PUSH
21432: LD_INT 4
21434: PUSH
21435: LD_INT 5
21437: PUSH
21438: LD_INT 8
21440: PUSH
21441: LD_INT 11
21443: PUSH
21444: LD_INT 12
21446: PUSH
21447: LD_INT 15
21449: PUSH
21450: LD_INT 16
21452: PUSH
21453: LD_INT 22
21455: PUSH
21456: LD_INT 23
21458: PUSH
21459: LD_INT 26
21461: PUSH
21462: LD_INT 36
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 101
21481: PUSH
21482: LD_INT 102
21484: PUSH
21485: LD_INT 105
21487: PUSH
21488: LD_INT 106
21490: PUSH
21491: LD_INT 108
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: ST_TO_ADDR
21505: GO 24108
21507: LD_INT 5
21509: DOUBLE
21510: EQUAL
21511: IFTRUE 21515
21513: GO 21615
21515: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21516: LD_ADDR_VAR 0 1
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: LD_INT 4
21526: PUSH
21527: LD_INT 5
21529: PUSH
21530: LD_INT 6
21532: PUSH
21533: LD_INT 8
21535: PUSH
21536: LD_INT 11
21538: PUSH
21539: LD_INT 12
21541: PUSH
21542: LD_INT 15
21544: PUSH
21545: LD_INT 16
21547: PUSH
21548: LD_INT 22
21550: PUSH
21551: LD_INT 23
21553: PUSH
21554: LD_INT 25
21556: PUSH
21557: LD_INT 26
21559: PUSH
21560: LD_INT 36
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 101
21581: PUSH
21582: LD_INT 102
21584: PUSH
21585: LD_INT 105
21587: PUSH
21588: LD_INT 106
21590: PUSH
21591: LD_INT 108
21593: PUSH
21594: LD_INT 109
21596: PUSH
21597: LD_INT 112
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: ST_TO_ADDR
21613: GO 24108
21615: LD_INT 6
21617: DOUBLE
21618: EQUAL
21619: IFTRUE 21623
21621: GO 21743
21623: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21624: LD_ADDR_VAR 0 1
21628: PUSH
21629: LD_INT 2
21631: PUSH
21632: LD_INT 4
21634: PUSH
21635: LD_INT 5
21637: PUSH
21638: LD_INT 6
21640: PUSH
21641: LD_INT 8
21643: PUSH
21644: LD_INT 11
21646: PUSH
21647: LD_INT 12
21649: PUSH
21650: LD_INT 15
21652: PUSH
21653: LD_INT 16
21655: PUSH
21656: LD_INT 20
21658: PUSH
21659: LD_INT 21
21661: PUSH
21662: LD_INT 22
21664: PUSH
21665: LD_INT 23
21667: PUSH
21668: LD_INT 25
21670: PUSH
21671: LD_INT 26
21673: PUSH
21674: LD_INT 30
21676: PUSH
21677: LD_INT 31
21679: PUSH
21680: LD_INT 32
21682: PUSH
21683: LD_INT 36
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 101
21709: PUSH
21710: LD_INT 102
21712: PUSH
21713: LD_INT 105
21715: PUSH
21716: LD_INT 106
21718: PUSH
21719: LD_INT 108
21721: PUSH
21722: LD_INT 109
21724: PUSH
21725: LD_INT 112
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: ST_TO_ADDR
21741: GO 24108
21743: LD_INT 7
21745: DOUBLE
21746: EQUAL
21747: IFTRUE 21751
21749: GO 21851
21751: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21752: LD_ADDR_VAR 0 1
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: LD_INT 4
21762: PUSH
21763: LD_INT 5
21765: PUSH
21766: LD_INT 7
21768: PUSH
21769: LD_INT 11
21771: PUSH
21772: LD_INT 12
21774: PUSH
21775: LD_INT 15
21777: PUSH
21778: LD_INT 16
21780: PUSH
21781: LD_INT 20
21783: PUSH
21784: LD_INT 21
21786: PUSH
21787: LD_INT 22
21789: PUSH
21790: LD_INT 23
21792: PUSH
21793: LD_INT 25
21795: PUSH
21796: LD_INT 26
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 101
21817: PUSH
21818: LD_INT 102
21820: PUSH
21821: LD_INT 103
21823: PUSH
21824: LD_INT 105
21826: PUSH
21827: LD_INT 106
21829: PUSH
21830: LD_INT 108
21832: PUSH
21833: LD_INT 112
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: ST_TO_ADDR
21849: GO 24108
21851: LD_INT 8
21853: DOUBLE
21854: EQUAL
21855: IFTRUE 21859
21857: GO 21987
21859: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21860: LD_ADDR_VAR 0 1
21864: PUSH
21865: LD_INT 2
21867: PUSH
21868: LD_INT 4
21870: PUSH
21871: LD_INT 5
21873: PUSH
21874: LD_INT 6
21876: PUSH
21877: LD_INT 7
21879: PUSH
21880: LD_INT 8
21882: PUSH
21883: LD_INT 11
21885: PUSH
21886: LD_INT 12
21888: PUSH
21889: LD_INT 15
21891: PUSH
21892: LD_INT 16
21894: PUSH
21895: LD_INT 20
21897: PUSH
21898: LD_INT 21
21900: PUSH
21901: LD_INT 22
21903: PUSH
21904: LD_INT 23
21906: PUSH
21907: LD_INT 25
21909: PUSH
21910: LD_INT 26
21912: PUSH
21913: LD_INT 30
21915: PUSH
21916: LD_INT 31
21918: PUSH
21919: LD_INT 32
21921: PUSH
21922: LD_INT 36
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 101
21949: PUSH
21950: LD_INT 102
21952: PUSH
21953: LD_INT 103
21955: PUSH
21956: LD_INT 105
21958: PUSH
21959: LD_INT 106
21961: PUSH
21962: LD_INT 108
21964: PUSH
21965: LD_INT 109
21967: PUSH
21968: LD_INT 112
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: ST_TO_ADDR
21985: GO 24108
21987: LD_INT 9
21989: DOUBLE
21990: EQUAL
21991: IFTRUE 21995
21993: GO 22131
21995: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21996: LD_ADDR_VAR 0 1
22000: PUSH
22001: LD_INT 2
22003: PUSH
22004: LD_INT 4
22006: PUSH
22007: LD_INT 5
22009: PUSH
22010: LD_INT 6
22012: PUSH
22013: LD_INT 7
22015: PUSH
22016: LD_INT 8
22018: PUSH
22019: LD_INT 11
22021: PUSH
22022: LD_INT 12
22024: PUSH
22025: LD_INT 15
22027: PUSH
22028: LD_INT 16
22030: PUSH
22031: LD_INT 20
22033: PUSH
22034: LD_INT 21
22036: PUSH
22037: LD_INT 22
22039: PUSH
22040: LD_INT 23
22042: PUSH
22043: LD_INT 25
22045: PUSH
22046: LD_INT 26
22048: PUSH
22049: LD_INT 28
22051: PUSH
22052: LD_INT 30
22054: PUSH
22055: LD_INT 31
22057: PUSH
22058: LD_INT 32
22060: PUSH
22061: LD_INT 36
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 101
22089: PUSH
22090: LD_INT 102
22092: PUSH
22093: LD_INT 103
22095: PUSH
22096: LD_INT 105
22098: PUSH
22099: LD_INT 106
22101: PUSH
22102: LD_INT 108
22104: PUSH
22105: LD_INT 109
22107: PUSH
22108: LD_INT 112
22110: PUSH
22111: LD_INT 114
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: ST_TO_ADDR
22129: GO 24108
22131: LD_INT 10
22133: DOUBLE
22134: EQUAL
22135: IFTRUE 22139
22137: GO 22323
22139: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22140: LD_ADDR_VAR 0 1
22144: PUSH
22145: LD_INT 2
22147: PUSH
22148: LD_INT 4
22150: PUSH
22151: LD_INT 5
22153: PUSH
22154: LD_INT 6
22156: PUSH
22157: LD_INT 7
22159: PUSH
22160: LD_INT 8
22162: PUSH
22163: LD_INT 9
22165: PUSH
22166: LD_INT 10
22168: PUSH
22169: LD_INT 11
22171: PUSH
22172: LD_INT 12
22174: PUSH
22175: LD_INT 13
22177: PUSH
22178: LD_INT 14
22180: PUSH
22181: LD_INT 15
22183: PUSH
22184: LD_INT 16
22186: PUSH
22187: LD_INT 17
22189: PUSH
22190: LD_INT 18
22192: PUSH
22193: LD_INT 19
22195: PUSH
22196: LD_INT 20
22198: PUSH
22199: LD_INT 21
22201: PUSH
22202: LD_INT 22
22204: PUSH
22205: LD_INT 23
22207: PUSH
22208: LD_INT 24
22210: PUSH
22211: LD_INT 25
22213: PUSH
22214: LD_INT 26
22216: PUSH
22217: LD_INT 28
22219: PUSH
22220: LD_INT 30
22222: PUSH
22223: LD_INT 31
22225: PUSH
22226: LD_INT 32
22228: PUSH
22229: LD_INT 36
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 101
22265: PUSH
22266: LD_INT 102
22268: PUSH
22269: LD_INT 103
22271: PUSH
22272: LD_INT 104
22274: PUSH
22275: LD_INT 105
22277: PUSH
22278: LD_INT 106
22280: PUSH
22281: LD_INT 107
22283: PUSH
22284: LD_INT 108
22286: PUSH
22287: LD_INT 109
22289: PUSH
22290: LD_INT 110
22292: PUSH
22293: LD_INT 111
22295: PUSH
22296: LD_INT 112
22298: PUSH
22299: LD_INT 114
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: ST_TO_ADDR
22321: GO 24108
22323: LD_INT 11
22325: DOUBLE
22326: EQUAL
22327: IFTRUE 22331
22329: GO 22523
22331: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22332: LD_ADDR_VAR 0 1
22336: PUSH
22337: LD_INT 2
22339: PUSH
22340: LD_INT 3
22342: PUSH
22343: LD_INT 4
22345: PUSH
22346: LD_INT 5
22348: PUSH
22349: LD_INT 6
22351: PUSH
22352: LD_INT 7
22354: PUSH
22355: LD_INT 8
22357: PUSH
22358: LD_INT 9
22360: PUSH
22361: LD_INT 10
22363: PUSH
22364: LD_INT 11
22366: PUSH
22367: LD_INT 12
22369: PUSH
22370: LD_INT 13
22372: PUSH
22373: LD_INT 14
22375: PUSH
22376: LD_INT 15
22378: PUSH
22379: LD_INT 16
22381: PUSH
22382: LD_INT 17
22384: PUSH
22385: LD_INT 18
22387: PUSH
22388: LD_INT 19
22390: PUSH
22391: LD_INT 20
22393: PUSH
22394: LD_INT 21
22396: PUSH
22397: LD_INT 22
22399: PUSH
22400: LD_INT 23
22402: PUSH
22403: LD_INT 24
22405: PUSH
22406: LD_INT 25
22408: PUSH
22409: LD_INT 26
22411: PUSH
22412: LD_INT 28
22414: PUSH
22415: LD_INT 30
22417: PUSH
22418: LD_INT 31
22420: PUSH
22421: LD_INT 32
22423: PUSH
22424: LD_INT 34
22426: PUSH
22427: LD_INT 36
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 101
22465: PUSH
22466: LD_INT 102
22468: PUSH
22469: LD_INT 103
22471: PUSH
22472: LD_INT 104
22474: PUSH
22475: LD_INT 105
22477: PUSH
22478: LD_INT 106
22480: PUSH
22481: LD_INT 107
22483: PUSH
22484: LD_INT 108
22486: PUSH
22487: LD_INT 109
22489: PUSH
22490: LD_INT 110
22492: PUSH
22493: LD_INT 111
22495: PUSH
22496: LD_INT 112
22498: PUSH
22499: LD_INT 114
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: ST_TO_ADDR
22521: GO 24108
22523: LD_INT 12
22525: DOUBLE
22526: EQUAL
22527: IFTRUE 22531
22529: GO 22739
22531: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22532: LD_ADDR_VAR 0 1
22536: PUSH
22537: LD_INT 1
22539: PUSH
22540: LD_INT 2
22542: PUSH
22543: LD_INT 3
22545: PUSH
22546: LD_INT 4
22548: PUSH
22549: LD_INT 5
22551: PUSH
22552: LD_INT 6
22554: PUSH
22555: LD_INT 7
22557: PUSH
22558: LD_INT 8
22560: PUSH
22561: LD_INT 9
22563: PUSH
22564: LD_INT 10
22566: PUSH
22567: LD_INT 11
22569: PUSH
22570: LD_INT 12
22572: PUSH
22573: LD_INT 13
22575: PUSH
22576: LD_INT 14
22578: PUSH
22579: LD_INT 15
22581: PUSH
22582: LD_INT 16
22584: PUSH
22585: LD_INT 17
22587: PUSH
22588: LD_INT 18
22590: PUSH
22591: LD_INT 19
22593: PUSH
22594: LD_INT 20
22596: PUSH
22597: LD_INT 21
22599: PUSH
22600: LD_INT 22
22602: PUSH
22603: LD_INT 23
22605: PUSH
22606: LD_INT 24
22608: PUSH
22609: LD_INT 25
22611: PUSH
22612: LD_INT 26
22614: PUSH
22615: LD_INT 27
22617: PUSH
22618: LD_INT 28
22620: PUSH
22621: LD_INT 30
22623: PUSH
22624: LD_INT 31
22626: PUSH
22627: LD_INT 32
22629: PUSH
22630: LD_INT 33
22632: PUSH
22633: LD_INT 34
22635: PUSH
22636: LD_INT 36
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 101
22677: PUSH
22678: LD_INT 102
22680: PUSH
22681: LD_INT 103
22683: PUSH
22684: LD_INT 104
22686: PUSH
22687: LD_INT 105
22689: PUSH
22690: LD_INT 106
22692: PUSH
22693: LD_INT 107
22695: PUSH
22696: LD_INT 108
22698: PUSH
22699: LD_INT 109
22701: PUSH
22702: LD_INT 110
22704: PUSH
22705: LD_INT 111
22707: PUSH
22708: LD_INT 112
22710: PUSH
22711: LD_INT 113
22713: PUSH
22714: LD_INT 114
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: ST_TO_ADDR
22737: GO 24108
22739: LD_INT 13
22741: DOUBLE
22742: EQUAL
22743: IFTRUE 22747
22745: GO 22943
22747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22748: LD_ADDR_VAR 0 1
22752: PUSH
22753: LD_INT 1
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 3
22761: PUSH
22762: LD_INT 4
22764: PUSH
22765: LD_INT 5
22767: PUSH
22768: LD_INT 8
22770: PUSH
22771: LD_INT 9
22773: PUSH
22774: LD_INT 10
22776: PUSH
22777: LD_INT 11
22779: PUSH
22780: LD_INT 12
22782: PUSH
22783: LD_INT 14
22785: PUSH
22786: LD_INT 15
22788: PUSH
22789: LD_INT 16
22791: PUSH
22792: LD_INT 17
22794: PUSH
22795: LD_INT 18
22797: PUSH
22798: LD_INT 19
22800: PUSH
22801: LD_INT 20
22803: PUSH
22804: LD_INT 21
22806: PUSH
22807: LD_INT 22
22809: PUSH
22810: LD_INT 23
22812: PUSH
22813: LD_INT 24
22815: PUSH
22816: LD_INT 25
22818: PUSH
22819: LD_INT 26
22821: PUSH
22822: LD_INT 27
22824: PUSH
22825: LD_INT 28
22827: PUSH
22828: LD_INT 30
22830: PUSH
22831: LD_INT 31
22833: PUSH
22834: LD_INT 32
22836: PUSH
22837: LD_INT 33
22839: PUSH
22840: LD_INT 34
22842: PUSH
22843: LD_INT 36
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 101
22881: PUSH
22882: LD_INT 102
22884: PUSH
22885: LD_INT 103
22887: PUSH
22888: LD_INT 104
22890: PUSH
22891: LD_INT 105
22893: PUSH
22894: LD_INT 106
22896: PUSH
22897: LD_INT 107
22899: PUSH
22900: LD_INT 108
22902: PUSH
22903: LD_INT 109
22905: PUSH
22906: LD_INT 110
22908: PUSH
22909: LD_INT 111
22911: PUSH
22912: LD_INT 112
22914: PUSH
22915: LD_INT 113
22917: PUSH
22918: LD_INT 114
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: ST_TO_ADDR
22941: GO 24108
22943: LD_INT 14
22945: DOUBLE
22946: EQUAL
22947: IFTRUE 22951
22949: GO 23163
22951: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22952: LD_ADDR_VAR 0 1
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 2
22962: PUSH
22963: LD_INT 3
22965: PUSH
22966: LD_INT 4
22968: PUSH
22969: LD_INT 5
22971: PUSH
22972: LD_INT 6
22974: PUSH
22975: LD_INT 7
22977: PUSH
22978: LD_INT 8
22980: PUSH
22981: LD_INT 9
22983: PUSH
22984: LD_INT 10
22986: PUSH
22987: LD_INT 11
22989: PUSH
22990: LD_INT 12
22992: PUSH
22993: LD_INT 13
22995: PUSH
22996: LD_INT 14
22998: PUSH
22999: LD_INT 15
23001: PUSH
23002: LD_INT 16
23004: PUSH
23005: LD_INT 17
23007: PUSH
23008: LD_INT 18
23010: PUSH
23011: LD_INT 19
23013: PUSH
23014: LD_INT 20
23016: PUSH
23017: LD_INT 21
23019: PUSH
23020: LD_INT 22
23022: PUSH
23023: LD_INT 23
23025: PUSH
23026: LD_INT 24
23028: PUSH
23029: LD_INT 25
23031: PUSH
23032: LD_INT 26
23034: PUSH
23035: LD_INT 27
23037: PUSH
23038: LD_INT 28
23040: PUSH
23041: LD_INT 29
23043: PUSH
23044: LD_INT 30
23046: PUSH
23047: LD_INT 31
23049: PUSH
23050: LD_INT 32
23052: PUSH
23053: LD_INT 33
23055: PUSH
23056: LD_INT 34
23058: PUSH
23059: LD_INT 36
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 101
23101: PUSH
23102: LD_INT 102
23104: PUSH
23105: LD_INT 103
23107: PUSH
23108: LD_INT 104
23110: PUSH
23111: LD_INT 105
23113: PUSH
23114: LD_INT 106
23116: PUSH
23117: LD_INT 107
23119: PUSH
23120: LD_INT 108
23122: PUSH
23123: LD_INT 109
23125: PUSH
23126: LD_INT 110
23128: PUSH
23129: LD_INT 111
23131: PUSH
23132: LD_INT 112
23134: PUSH
23135: LD_INT 113
23137: PUSH
23138: LD_INT 114
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: ST_TO_ADDR
23161: GO 24108
23163: LD_INT 15
23165: DOUBLE
23166: EQUAL
23167: IFTRUE 23171
23169: GO 23383
23171: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23172: LD_ADDR_VAR 0 1
23176: PUSH
23177: LD_INT 1
23179: PUSH
23180: LD_INT 2
23182: PUSH
23183: LD_INT 3
23185: PUSH
23186: LD_INT 4
23188: PUSH
23189: LD_INT 5
23191: PUSH
23192: LD_INT 6
23194: PUSH
23195: LD_INT 7
23197: PUSH
23198: LD_INT 8
23200: PUSH
23201: LD_INT 9
23203: PUSH
23204: LD_INT 10
23206: PUSH
23207: LD_INT 11
23209: PUSH
23210: LD_INT 12
23212: PUSH
23213: LD_INT 13
23215: PUSH
23216: LD_INT 14
23218: PUSH
23219: LD_INT 15
23221: PUSH
23222: LD_INT 16
23224: PUSH
23225: LD_INT 17
23227: PUSH
23228: LD_INT 18
23230: PUSH
23231: LD_INT 19
23233: PUSH
23234: LD_INT 20
23236: PUSH
23237: LD_INT 21
23239: PUSH
23240: LD_INT 22
23242: PUSH
23243: LD_INT 23
23245: PUSH
23246: LD_INT 24
23248: PUSH
23249: LD_INT 25
23251: PUSH
23252: LD_INT 26
23254: PUSH
23255: LD_INT 27
23257: PUSH
23258: LD_INT 28
23260: PUSH
23261: LD_INT 29
23263: PUSH
23264: LD_INT 30
23266: PUSH
23267: LD_INT 31
23269: PUSH
23270: LD_INT 32
23272: PUSH
23273: LD_INT 33
23275: PUSH
23276: LD_INT 34
23278: PUSH
23279: LD_INT 36
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 101
23321: PUSH
23322: LD_INT 102
23324: PUSH
23325: LD_INT 103
23327: PUSH
23328: LD_INT 104
23330: PUSH
23331: LD_INT 105
23333: PUSH
23334: LD_INT 106
23336: PUSH
23337: LD_INT 107
23339: PUSH
23340: LD_INT 108
23342: PUSH
23343: LD_INT 109
23345: PUSH
23346: LD_INT 110
23348: PUSH
23349: LD_INT 111
23351: PUSH
23352: LD_INT 112
23354: PUSH
23355: LD_INT 113
23357: PUSH
23358: LD_INT 114
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: ST_TO_ADDR
23381: GO 24108
23383: LD_INT 16
23385: DOUBLE
23386: EQUAL
23387: IFTRUE 23391
23389: GO 23515
23391: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23392: LD_ADDR_VAR 0 1
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: LD_INT 4
23402: PUSH
23403: LD_INT 5
23405: PUSH
23406: LD_INT 7
23408: PUSH
23409: LD_INT 11
23411: PUSH
23412: LD_INT 12
23414: PUSH
23415: LD_INT 15
23417: PUSH
23418: LD_INT 16
23420: PUSH
23421: LD_INT 20
23423: PUSH
23424: LD_INT 21
23426: PUSH
23427: LD_INT 22
23429: PUSH
23430: LD_INT 23
23432: PUSH
23433: LD_INT 25
23435: PUSH
23436: LD_INT 26
23438: PUSH
23439: LD_INT 30
23441: PUSH
23442: LD_INT 31
23444: PUSH
23445: LD_INT 32
23447: PUSH
23448: LD_INT 33
23450: PUSH
23451: LD_INT 34
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 101
23477: PUSH
23478: LD_INT 102
23480: PUSH
23481: LD_INT 103
23483: PUSH
23484: LD_INT 106
23486: PUSH
23487: LD_INT 108
23489: PUSH
23490: LD_INT 112
23492: PUSH
23493: LD_INT 113
23495: PUSH
23496: LD_INT 114
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: ST_TO_ADDR
23513: GO 24108
23515: LD_INT 17
23517: DOUBLE
23518: EQUAL
23519: IFTRUE 23523
23521: GO 23735
23523: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23524: LD_ADDR_VAR 0 1
23528: PUSH
23529: LD_INT 1
23531: PUSH
23532: LD_INT 2
23534: PUSH
23535: LD_INT 3
23537: PUSH
23538: LD_INT 4
23540: PUSH
23541: LD_INT 5
23543: PUSH
23544: LD_INT 6
23546: PUSH
23547: LD_INT 7
23549: PUSH
23550: LD_INT 8
23552: PUSH
23553: LD_INT 9
23555: PUSH
23556: LD_INT 10
23558: PUSH
23559: LD_INT 11
23561: PUSH
23562: LD_INT 12
23564: PUSH
23565: LD_INT 13
23567: PUSH
23568: LD_INT 14
23570: PUSH
23571: LD_INT 15
23573: PUSH
23574: LD_INT 16
23576: PUSH
23577: LD_INT 17
23579: PUSH
23580: LD_INT 18
23582: PUSH
23583: LD_INT 19
23585: PUSH
23586: LD_INT 20
23588: PUSH
23589: LD_INT 21
23591: PUSH
23592: LD_INT 22
23594: PUSH
23595: LD_INT 23
23597: PUSH
23598: LD_INT 24
23600: PUSH
23601: LD_INT 25
23603: PUSH
23604: LD_INT 26
23606: PUSH
23607: LD_INT 27
23609: PUSH
23610: LD_INT 28
23612: PUSH
23613: LD_INT 29
23615: PUSH
23616: LD_INT 30
23618: PUSH
23619: LD_INT 31
23621: PUSH
23622: LD_INT 32
23624: PUSH
23625: LD_INT 33
23627: PUSH
23628: LD_INT 34
23630: PUSH
23631: LD_INT 36
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 101
23673: PUSH
23674: LD_INT 102
23676: PUSH
23677: LD_INT 103
23679: PUSH
23680: LD_INT 104
23682: PUSH
23683: LD_INT 105
23685: PUSH
23686: LD_INT 106
23688: PUSH
23689: LD_INT 107
23691: PUSH
23692: LD_INT 108
23694: PUSH
23695: LD_INT 109
23697: PUSH
23698: LD_INT 110
23700: PUSH
23701: LD_INT 111
23703: PUSH
23704: LD_INT 112
23706: PUSH
23707: LD_INT 113
23709: PUSH
23710: LD_INT 114
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: ST_TO_ADDR
23733: GO 24108
23735: LD_INT 18
23737: DOUBLE
23738: EQUAL
23739: IFTRUE 23743
23741: GO 23879
23743: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23744: LD_ADDR_VAR 0 1
23748: PUSH
23749: LD_INT 2
23751: PUSH
23752: LD_INT 4
23754: PUSH
23755: LD_INT 5
23757: PUSH
23758: LD_INT 7
23760: PUSH
23761: LD_INT 11
23763: PUSH
23764: LD_INT 12
23766: PUSH
23767: LD_INT 15
23769: PUSH
23770: LD_INT 16
23772: PUSH
23773: LD_INT 20
23775: PUSH
23776: LD_INT 21
23778: PUSH
23779: LD_INT 22
23781: PUSH
23782: LD_INT 23
23784: PUSH
23785: LD_INT 25
23787: PUSH
23788: LD_INT 26
23790: PUSH
23791: LD_INT 30
23793: PUSH
23794: LD_INT 31
23796: PUSH
23797: LD_INT 32
23799: PUSH
23800: LD_INT 33
23802: PUSH
23803: LD_INT 34
23805: PUSH
23806: LD_INT 35
23808: PUSH
23809: LD_INT 36
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 101
23837: PUSH
23838: LD_INT 102
23840: PUSH
23841: LD_INT 103
23843: PUSH
23844: LD_INT 106
23846: PUSH
23847: LD_INT 108
23849: PUSH
23850: LD_INT 112
23852: PUSH
23853: LD_INT 113
23855: PUSH
23856: LD_INT 114
23858: PUSH
23859: LD_INT 115
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: ST_TO_ADDR
23877: GO 24108
23879: LD_INT 19
23881: DOUBLE
23882: EQUAL
23883: IFTRUE 23887
23885: GO 24107
23887: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23888: LD_ADDR_VAR 0 1
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: LD_INT 2
23898: PUSH
23899: LD_INT 3
23901: PUSH
23902: LD_INT 4
23904: PUSH
23905: LD_INT 5
23907: PUSH
23908: LD_INT 6
23910: PUSH
23911: LD_INT 7
23913: PUSH
23914: LD_INT 8
23916: PUSH
23917: LD_INT 9
23919: PUSH
23920: LD_INT 10
23922: PUSH
23923: LD_INT 11
23925: PUSH
23926: LD_INT 12
23928: PUSH
23929: LD_INT 13
23931: PUSH
23932: LD_INT 14
23934: PUSH
23935: LD_INT 15
23937: PUSH
23938: LD_INT 16
23940: PUSH
23941: LD_INT 17
23943: PUSH
23944: LD_INT 18
23946: PUSH
23947: LD_INT 19
23949: PUSH
23950: LD_INT 20
23952: PUSH
23953: LD_INT 21
23955: PUSH
23956: LD_INT 22
23958: PUSH
23959: LD_INT 23
23961: PUSH
23962: LD_INT 24
23964: PUSH
23965: LD_INT 25
23967: PUSH
23968: LD_INT 26
23970: PUSH
23971: LD_INT 27
23973: PUSH
23974: LD_INT 28
23976: PUSH
23977: LD_INT 29
23979: PUSH
23980: LD_INT 30
23982: PUSH
23983: LD_INT 31
23985: PUSH
23986: LD_INT 32
23988: PUSH
23989: LD_INT 33
23991: PUSH
23992: LD_INT 34
23994: PUSH
23995: LD_INT 35
23997: PUSH
23998: LD_INT 36
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 101
24041: PUSH
24042: LD_INT 102
24044: PUSH
24045: LD_INT 103
24047: PUSH
24048: LD_INT 104
24050: PUSH
24051: LD_INT 105
24053: PUSH
24054: LD_INT 106
24056: PUSH
24057: LD_INT 107
24059: PUSH
24060: LD_INT 108
24062: PUSH
24063: LD_INT 109
24065: PUSH
24066: LD_INT 110
24068: PUSH
24069: LD_INT 111
24071: PUSH
24072: LD_INT 112
24074: PUSH
24075: LD_INT 113
24077: PUSH
24078: LD_INT 114
24080: PUSH
24081: LD_INT 115
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: ST_TO_ADDR
24105: GO 24108
24107: POP
// end else
24108: GO 24327
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24110: LD_ADDR_VAR 0 1
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: LD_INT 2
24120: PUSH
24121: LD_INT 3
24123: PUSH
24124: LD_INT 4
24126: PUSH
24127: LD_INT 5
24129: PUSH
24130: LD_INT 6
24132: PUSH
24133: LD_INT 7
24135: PUSH
24136: LD_INT 8
24138: PUSH
24139: LD_INT 9
24141: PUSH
24142: LD_INT 10
24144: PUSH
24145: LD_INT 11
24147: PUSH
24148: LD_INT 12
24150: PUSH
24151: LD_INT 13
24153: PUSH
24154: LD_INT 14
24156: PUSH
24157: LD_INT 15
24159: PUSH
24160: LD_INT 16
24162: PUSH
24163: LD_INT 17
24165: PUSH
24166: LD_INT 18
24168: PUSH
24169: LD_INT 19
24171: PUSH
24172: LD_INT 20
24174: PUSH
24175: LD_INT 21
24177: PUSH
24178: LD_INT 22
24180: PUSH
24181: LD_INT 23
24183: PUSH
24184: LD_INT 24
24186: PUSH
24187: LD_INT 25
24189: PUSH
24190: LD_INT 26
24192: PUSH
24193: LD_INT 27
24195: PUSH
24196: LD_INT 28
24198: PUSH
24199: LD_INT 29
24201: PUSH
24202: LD_INT 30
24204: PUSH
24205: LD_INT 31
24207: PUSH
24208: LD_INT 32
24210: PUSH
24211: LD_INT 33
24213: PUSH
24214: LD_INT 34
24216: PUSH
24217: LD_INT 35
24219: PUSH
24220: LD_INT 36
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 101
24263: PUSH
24264: LD_INT 102
24266: PUSH
24267: LD_INT 103
24269: PUSH
24270: LD_INT 104
24272: PUSH
24273: LD_INT 105
24275: PUSH
24276: LD_INT 106
24278: PUSH
24279: LD_INT 107
24281: PUSH
24282: LD_INT 108
24284: PUSH
24285: LD_INT 109
24287: PUSH
24288: LD_INT 110
24290: PUSH
24291: LD_INT 111
24293: PUSH
24294: LD_INT 112
24296: PUSH
24297: LD_INT 113
24299: PUSH
24300: LD_INT 114
24302: PUSH
24303: LD_INT 115
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: ST_TO_ADDR
// if result then
24327: LD_VAR 0 1
24331: IFFALSE 24620
// begin normal :=  ;
24333: LD_ADDR_VAR 0 3
24337: PUSH
24338: LD_STRING 
24340: ST_TO_ADDR
// hardcore :=  ;
24341: LD_ADDR_VAR 0 4
24345: PUSH
24346: LD_STRING 
24348: ST_TO_ADDR
// for i = 1 to normalCounter do
24349: LD_ADDR_VAR 0 5
24353: PUSH
24354: DOUBLE
24355: LD_INT 1
24357: DEC
24358: ST_TO_ADDR
24359: LD_EXP 68
24363: PUSH
24364: FOR_TO
24365: IFFALSE 24466
// begin tmp := 0 ;
24367: LD_ADDR_VAR 0 2
24371: PUSH
24372: LD_STRING 0
24374: ST_TO_ADDR
// if result [ 1 ] then
24375: LD_VAR 0 1
24379: PUSH
24380: LD_INT 1
24382: ARRAY
24383: IFFALSE 24448
// if result [ 1 ] [ 1 ] = i then
24385: LD_VAR 0 1
24389: PUSH
24390: LD_INT 1
24392: ARRAY
24393: PUSH
24394: LD_INT 1
24396: ARRAY
24397: PUSH
24398: LD_VAR 0 5
24402: EQUAL
24403: IFFALSE 24448
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24405: LD_ADDR_VAR 0 1
24409: PUSH
24410: LD_VAR 0 1
24414: PPUSH
24415: LD_INT 1
24417: PPUSH
24418: LD_VAR 0 1
24422: PUSH
24423: LD_INT 1
24425: ARRAY
24426: PPUSH
24427: LD_INT 1
24429: PPUSH
24430: CALL_OW 3
24434: PPUSH
24435: CALL_OW 1
24439: ST_TO_ADDR
// tmp := 1 ;
24440: LD_ADDR_VAR 0 2
24444: PUSH
24445: LD_STRING 1
24447: ST_TO_ADDR
// end ; normal := normal & tmp ;
24448: LD_ADDR_VAR 0 3
24452: PUSH
24453: LD_VAR 0 3
24457: PUSH
24458: LD_VAR 0 2
24462: STR
24463: ST_TO_ADDR
// end ;
24464: GO 24364
24466: POP
24467: POP
// for i = 1 to hardcoreCounter do
24468: LD_ADDR_VAR 0 5
24472: PUSH
24473: DOUBLE
24474: LD_INT 1
24476: DEC
24477: ST_TO_ADDR
24478: LD_EXP 69
24482: PUSH
24483: FOR_TO
24484: IFFALSE 24589
// begin tmp := 0 ;
24486: LD_ADDR_VAR 0 2
24490: PUSH
24491: LD_STRING 0
24493: ST_TO_ADDR
// if result [ 2 ] then
24494: LD_VAR 0 1
24498: PUSH
24499: LD_INT 2
24501: ARRAY
24502: IFFALSE 24571
// if result [ 2 ] [ 1 ] = 100 + i then
24504: LD_VAR 0 1
24508: PUSH
24509: LD_INT 2
24511: ARRAY
24512: PUSH
24513: LD_INT 1
24515: ARRAY
24516: PUSH
24517: LD_INT 100
24519: PUSH
24520: LD_VAR 0 5
24524: PLUS
24525: EQUAL
24526: IFFALSE 24571
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24528: LD_ADDR_VAR 0 1
24532: PUSH
24533: LD_VAR 0 1
24537: PPUSH
24538: LD_INT 2
24540: PPUSH
24541: LD_VAR 0 1
24545: PUSH
24546: LD_INT 2
24548: ARRAY
24549: PPUSH
24550: LD_INT 1
24552: PPUSH
24553: CALL_OW 3
24557: PPUSH
24558: CALL_OW 1
24562: ST_TO_ADDR
// tmp := 1 ;
24563: LD_ADDR_VAR 0 2
24567: PUSH
24568: LD_STRING 1
24570: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24571: LD_ADDR_VAR 0 4
24575: PUSH
24576: LD_VAR 0 4
24580: PUSH
24581: LD_VAR 0 2
24585: STR
24586: ST_TO_ADDR
// end ;
24587: GO 24483
24589: POP
24590: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24591: LD_STRING getStreamItemsFromMission("
24593: PUSH
24594: LD_VAR 0 3
24598: STR
24599: PUSH
24600: LD_STRING ","
24602: STR
24603: PUSH
24604: LD_VAR 0 4
24608: STR
24609: PUSH
24610: LD_STRING ")
24612: STR
24613: PPUSH
24614: CALL_OW 559
// end else
24618: GO 24627
// ToLua ( getStreamItemsFromMission("","") ) ;
24620: LD_STRING getStreamItemsFromMission("","")
24622: PPUSH
24623: CALL_OW 559
// end ;
24627: LD_VAR 0 1
24631: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24632: LD_EXP 67
24636: PUSH
24637: LD_EXP 72
24641: AND
24642: IFFALSE 24766
24644: GO 24646
24646: DISABLE
24647: LD_INT 0
24649: PPUSH
24650: PPUSH
// begin enable ;
24651: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24652: LD_ADDR_VAR 0 2
24656: PUSH
24657: LD_INT 22
24659: PUSH
24660: LD_OWVAR 2
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 2
24671: PUSH
24672: LD_INT 34
24674: PUSH
24675: LD_INT 7
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 34
24684: PUSH
24685: LD_INT 45
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 34
24694: PUSH
24695: LD_INT 28
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 34
24704: PUSH
24705: LD_INT 47
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PPUSH
24723: CALL_OW 69
24727: ST_TO_ADDR
// if not tmp then
24728: LD_VAR 0 2
24732: NOT
24733: IFFALSE 24737
// exit ;
24735: GO 24766
// for i in tmp do
24737: LD_ADDR_VAR 0 1
24741: PUSH
24742: LD_VAR 0 2
24746: PUSH
24747: FOR_IN
24748: IFFALSE 24764
// begin SetLives ( i , 0 ) ;
24750: LD_VAR 0 1
24754: PPUSH
24755: LD_INT 0
24757: PPUSH
24758: CALL_OW 234
// end ;
24762: GO 24747
24764: POP
24765: POP
// end ;
24766: PPOPN 2
24768: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24769: LD_EXP 67
24773: PUSH
24774: LD_EXP 73
24778: AND
24779: IFFALSE 24863
24781: GO 24783
24783: DISABLE
24784: LD_INT 0
24786: PPUSH
24787: PPUSH
// begin enable ;
24788: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24789: LD_ADDR_VAR 0 2
24793: PUSH
24794: LD_INT 22
24796: PUSH
24797: LD_OWVAR 2
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 32
24808: PUSH
24809: LD_INT 3
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PPUSH
24820: CALL_OW 69
24824: ST_TO_ADDR
// if not tmp then
24825: LD_VAR 0 2
24829: NOT
24830: IFFALSE 24834
// exit ;
24832: GO 24863
// for i in tmp do
24834: LD_ADDR_VAR 0 1
24838: PUSH
24839: LD_VAR 0 2
24843: PUSH
24844: FOR_IN
24845: IFFALSE 24861
// begin SetLives ( i , 0 ) ;
24847: LD_VAR 0 1
24851: PPUSH
24852: LD_INT 0
24854: PPUSH
24855: CALL_OW 234
// end ;
24859: GO 24844
24861: POP
24862: POP
// end ;
24863: PPOPN 2
24865: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24866: LD_EXP 67
24870: PUSH
24871: LD_EXP 70
24875: AND
24876: IFFALSE 24969
24878: GO 24880
24880: DISABLE
24881: LD_INT 0
24883: PPUSH
// begin enable ;
24884: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24885: LD_ADDR_VAR 0 1
24889: PUSH
24890: LD_INT 22
24892: PUSH
24893: LD_OWVAR 2
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 2
24904: PUSH
24905: LD_INT 25
24907: PUSH
24908: LD_INT 5
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 25
24917: PUSH
24918: LD_INT 9
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 25
24927: PUSH
24928: LD_INT 8
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PPUSH
24945: CALL_OW 69
24949: PUSH
24950: FOR_IN
24951: IFFALSE 24967
// begin SetClass ( i , 1 ) ;
24953: LD_VAR 0 1
24957: PPUSH
24958: LD_INT 1
24960: PPUSH
24961: CALL_OW 336
// end ;
24965: GO 24950
24967: POP
24968: POP
// end ;
24969: PPOPN 1
24971: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24972: LD_EXP 67
24976: PUSH
24977: LD_EXP 71
24981: AND
24982: PUSH
24983: LD_OWVAR 65
24987: PUSH
24988: LD_INT 7
24990: LESS
24991: AND
24992: IFFALSE 25006
24994: GO 24996
24996: DISABLE
// begin enable ;
24997: ENABLE
// game_speed := 7 ;
24998: LD_ADDR_OWVAR 65
25002: PUSH
25003: LD_INT 7
25005: ST_TO_ADDR
// end ;
25006: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25007: LD_EXP 67
25011: PUSH
25012: LD_EXP 74
25016: AND
25017: IFFALSE 25219
25019: GO 25021
25021: DISABLE
25022: LD_INT 0
25024: PPUSH
25025: PPUSH
25026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25027: LD_ADDR_VAR 0 3
25031: PUSH
25032: LD_INT 81
25034: PUSH
25035: LD_OWVAR 2
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 21
25046: PUSH
25047: LD_INT 1
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PPUSH
25058: CALL_OW 69
25062: ST_TO_ADDR
// if not tmp then
25063: LD_VAR 0 3
25067: NOT
25068: IFFALSE 25072
// exit ;
25070: GO 25219
// if tmp > 5 then
25072: LD_VAR 0 3
25076: PUSH
25077: LD_INT 5
25079: GREATER
25080: IFFALSE 25092
// k := 5 else
25082: LD_ADDR_VAR 0 2
25086: PUSH
25087: LD_INT 5
25089: ST_TO_ADDR
25090: GO 25102
// k := tmp ;
25092: LD_ADDR_VAR 0 2
25096: PUSH
25097: LD_VAR 0 3
25101: ST_TO_ADDR
// for i := 1 to k do
25102: LD_ADDR_VAR 0 1
25106: PUSH
25107: DOUBLE
25108: LD_INT 1
25110: DEC
25111: ST_TO_ADDR
25112: LD_VAR 0 2
25116: PUSH
25117: FOR_TO
25118: IFFALSE 25217
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25120: LD_VAR 0 3
25124: PUSH
25125: LD_VAR 0 1
25129: ARRAY
25130: PPUSH
25131: LD_VAR 0 1
25135: PUSH
25136: LD_INT 4
25138: MOD
25139: PUSH
25140: LD_INT 1
25142: PLUS
25143: PPUSH
25144: CALL_OW 259
25148: PUSH
25149: LD_INT 10
25151: LESS
25152: IFFALSE 25215
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25154: LD_VAR 0 3
25158: PUSH
25159: LD_VAR 0 1
25163: ARRAY
25164: PPUSH
25165: LD_VAR 0 1
25169: PUSH
25170: LD_INT 4
25172: MOD
25173: PUSH
25174: LD_INT 1
25176: PLUS
25177: PPUSH
25178: LD_VAR 0 3
25182: PUSH
25183: LD_VAR 0 1
25187: ARRAY
25188: PPUSH
25189: LD_VAR 0 1
25193: PUSH
25194: LD_INT 4
25196: MOD
25197: PUSH
25198: LD_INT 1
25200: PLUS
25201: PPUSH
25202: CALL_OW 259
25206: PUSH
25207: LD_INT 1
25209: PLUS
25210: PPUSH
25211: CALL_OW 237
25215: GO 25117
25217: POP
25218: POP
// end ;
25219: PPOPN 3
25221: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25222: LD_EXP 67
25226: PUSH
25227: LD_EXP 75
25231: AND
25232: IFFALSE 25252
25234: GO 25236
25236: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25237: LD_INT 4
25239: PPUSH
25240: LD_OWVAR 2
25244: PPUSH
25245: LD_INT 0
25247: PPUSH
25248: CALL_OW 324
25252: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25253: LD_EXP 67
25257: PUSH
25258: LD_EXP 104
25262: AND
25263: IFFALSE 25283
25265: GO 25267
25267: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25268: LD_INT 19
25270: PPUSH
25271: LD_OWVAR 2
25275: PPUSH
25276: LD_INT 0
25278: PPUSH
25279: CALL_OW 324
25283: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25284: LD_EXP 67
25288: PUSH
25289: LD_EXP 76
25293: AND
25294: IFFALSE 25396
25296: GO 25298
25298: DISABLE
25299: LD_INT 0
25301: PPUSH
25302: PPUSH
// begin enable ;
25303: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25304: LD_ADDR_VAR 0 2
25308: PUSH
25309: LD_INT 22
25311: PUSH
25312: LD_OWVAR 2
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 2
25323: PUSH
25324: LD_INT 34
25326: PUSH
25327: LD_INT 11
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 34
25336: PUSH
25337: LD_INT 30
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PPUSH
25353: CALL_OW 69
25357: ST_TO_ADDR
// if not tmp then
25358: LD_VAR 0 2
25362: NOT
25363: IFFALSE 25367
// exit ;
25365: GO 25396
// for i in tmp do
25367: LD_ADDR_VAR 0 1
25371: PUSH
25372: LD_VAR 0 2
25376: PUSH
25377: FOR_IN
25378: IFFALSE 25394
// begin SetLives ( i , 0 ) ;
25380: LD_VAR 0 1
25384: PPUSH
25385: LD_INT 0
25387: PPUSH
25388: CALL_OW 234
// end ;
25392: GO 25377
25394: POP
25395: POP
// end ;
25396: PPOPN 2
25398: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25399: LD_EXP 67
25403: PUSH
25404: LD_EXP 77
25408: AND
25409: IFFALSE 25429
25411: GO 25413
25413: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25414: LD_INT 32
25416: PPUSH
25417: LD_OWVAR 2
25421: PPUSH
25422: LD_INT 0
25424: PPUSH
25425: CALL_OW 324
25429: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25430: LD_EXP 67
25434: PUSH
25435: LD_EXP 78
25439: AND
25440: IFFALSE 25621
25442: GO 25444
25444: DISABLE
25445: LD_INT 0
25447: PPUSH
25448: PPUSH
25449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25450: LD_ADDR_VAR 0 2
25454: PUSH
25455: LD_INT 22
25457: PUSH
25458: LD_OWVAR 2
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 33
25469: PUSH
25470: LD_INT 3
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PPUSH
25481: CALL_OW 69
25485: ST_TO_ADDR
// if not tmp then
25486: LD_VAR 0 2
25490: NOT
25491: IFFALSE 25495
// exit ;
25493: GO 25621
// side := 0 ;
25495: LD_ADDR_VAR 0 3
25499: PUSH
25500: LD_INT 0
25502: ST_TO_ADDR
// for i := 1 to 8 do
25503: LD_ADDR_VAR 0 1
25507: PUSH
25508: DOUBLE
25509: LD_INT 1
25511: DEC
25512: ST_TO_ADDR
25513: LD_INT 8
25515: PUSH
25516: FOR_TO
25517: IFFALSE 25565
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25519: LD_OWVAR 2
25523: PUSH
25524: LD_VAR 0 1
25528: NONEQUAL
25529: PUSH
25530: LD_OWVAR 2
25534: PPUSH
25535: LD_VAR 0 1
25539: PPUSH
25540: CALL_OW 81
25544: PUSH
25545: LD_INT 2
25547: EQUAL
25548: AND
25549: IFFALSE 25563
// begin side := i ;
25551: LD_ADDR_VAR 0 3
25555: PUSH
25556: LD_VAR 0 1
25560: ST_TO_ADDR
// break ;
25561: GO 25565
// end ;
25563: GO 25516
25565: POP
25566: POP
// if not side then
25567: LD_VAR 0 3
25571: NOT
25572: IFFALSE 25576
// exit ;
25574: GO 25621
// for i := 1 to tmp do
25576: LD_ADDR_VAR 0 1
25580: PUSH
25581: DOUBLE
25582: LD_INT 1
25584: DEC
25585: ST_TO_ADDR
25586: LD_VAR 0 2
25590: PUSH
25591: FOR_TO
25592: IFFALSE 25619
// if Prob ( 60 ) then
25594: LD_INT 60
25596: PPUSH
25597: CALL_OW 13
25601: IFFALSE 25617
// SetSide ( i , side ) ;
25603: LD_VAR 0 1
25607: PPUSH
25608: LD_VAR 0 3
25612: PPUSH
25613: CALL_OW 235
25617: GO 25591
25619: POP
25620: POP
// end ;
25621: PPOPN 3
25623: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25624: LD_EXP 67
25628: PUSH
25629: LD_EXP 80
25633: AND
25634: IFFALSE 25753
25636: GO 25638
25638: DISABLE
25639: LD_INT 0
25641: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25642: LD_ADDR_VAR 0 1
25646: PUSH
25647: LD_INT 22
25649: PUSH
25650: LD_OWVAR 2
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 21
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 3
25671: PUSH
25672: LD_INT 23
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: LIST
25690: PPUSH
25691: CALL_OW 69
25695: PUSH
25696: FOR_IN
25697: IFFALSE 25751
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25699: LD_VAR 0 1
25703: PPUSH
25704: CALL_OW 257
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: LD_INT 3
25717: PUSH
25718: LD_INT 4
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: IN
25727: IFFALSE 25749
// SetClass ( un , rand ( 1 , 4 ) ) ;
25729: LD_VAR 0 1
25733: PPUSH
25734: LD_INT 1
25736: PPUSH
25737: LD_INT 4
25739: PPUSH
25740: CALL_OW 12
25744: PPUSH
25745: CALL_OW 336
25749: GO 25696
25751: POP
25752: POP
// end ;
25753: PPOPN 1
25755: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25756: LD_EXP 67
25760: PUSH
25761: LD_EXP 79
25765: AND
25766: IFFALSE 25845
25768: GO 25770
25770: DISABLE
25771: LD_INT 0
25773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25774: LD_ADDR_VAR 0 1
25778: PUSH
25779: LD_INT 22
25781: PUSH
25782: LD_OWVAR 2
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 21
25793: PUSH
25794: LD_INT 3
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PPUSH
25805: CALL_OW 69
25809: ST_TO_ADDR
// if not tmp then
25810: LD_VAR 0 1
25814: NOT
25815: IFFALSE 25819
// exit ;
25817: GO 25845
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25819: LD_VAR 0 1
25823: PUSH
25824: LD_INT 1
25826: PPUSH
25827: LD_VAR 0 1
25831: PPUSH
25832: CALL_OW 12
25836: ARRAY
25837: PPUSH
25838: LD_INT 100
25840: PPUSH
25841: CALL_OW 234
// end ;
25845: PPOPN 1
25847: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25848: LD_EXP 67
25852: PUSH
25853: LD_EXP 81
25857: AND
25858: IFFALSE 25956
25860: GO 25862
25862: DISABLE
25863: LD_INT 0
25865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25866: LD_ADDR_VAR 0 1
25870: PUSH
25871: LD_INT 22
25873: PUSH
25874: LD_OWVAR 2
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 21
25885: PUSH
25886: LD_INT 1
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PPUSH
25897: CALL_OW 69
25901: ST_TO_ADDR
// if not tmp then
25902: LD_VAR 0 1
25906: NOT
25907: IFFALSE 25911
// exit ;
25909: GO 25956
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25911: LD_VAR 0 1
25915: PUSH
25916: LD_INT 1
25918: PPUSH
25919: LD_VAR 0 1
25923: PPUSH
25924: CALL_OW 12
25928: ARRAY
25929: PPUSH
25930: LD_INT 1
25932: PPUSH
25933: LD_INT 4
25935: PPUSH
25936: CALL_OW 12
25940: PPUSH
25941: LD_INT 3000
25943: PPUSH
25944: LD_INT 9000
25946: PPUSH
25947: CALL_OW 12
25951: PPUSH
25952: CALL_OW 492
// end ;
25956: PPOPN 1
25958: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25959: LD_EXP 67
25963: PUSH
25964: LD_EXP 82
25968: AND
25969: IFFALSE 25989
25971: GO 25973
25973: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25974: LD_INT 1
25976: PPUSH
25977: LD_OWVAR 2
25981: PPUSH
25982: LD_INT 0
25984: PPUSH
25985: CALL_OW 324
25989: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25990: LD_EXP 67
25994: PUSH
25995: LD_EXP 83
25999: AND
26000: IFFALSE 26083
26002: GO 26004
26004: DISABLE
26005: LD_INT 0
26007: PPUSH
26008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26009: LD_ADDR_VAR 0 2
26013: PUSH
26014: LD_INT 22
26016: PUSH
26017: LD_OWVAR 2
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 21
26028: PUSH
26029: LD_INT 3
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PPUSH
26040: CALL_OW 69
26044: ST_TO_ADDR
// if not tmp then
26045: LD_VAR 0 2
26049: NOT
26050: IFFALSE 26054
// exit ;
26052: GO 26083
// for i in tmp do
26054: LD_ADDR_VAR 0 1
26058: PUSH
26059: LD_VAR 0 2
26063: PUSH
26064: FOR_IN
26065: IFFALSE 26081
// SetBLevel ( i , 10 ) ;
26067: LD_VAR 0 1
26071: PPUSH
26072: LD_INT 10
26074: PPUSH
26075: CALL_OW 241
26079: GO 26064
26081: POP
26082: POP
// end ;
26083: PPOPN 2
26085: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26086: LD_EXP 67
26090: PUSH
26091: LD_EXP 84
26095: AND
26096: IFFALSE 26207
26098: GO 26100
26100: DISABLE
26101: LD_INT 0
26103: PPUSH
26104: PPUSH
26105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26106: LD_ADDR_VAR 0 3
26110: PUSH
26111: LD_INT 22
26113: PUSH
26114: LD_OWVAR 2
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 25
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PPUSH
26137: CALL_OW 69
26141: ST_TO_ADDR
// if not tmp then
26142: LD_VAR 0 3
26146: NOT
26147: IFFALSE 26151
// exit ;
26149: GO 26207
// un := tmp [ rand ( 1 , tmp ) ] ;
26151: LD_ADDR_VAR 0 2
26155: PUSH
26156: LD_VAR 0 3
26160: PUSH
26161: LD_INT 1
26163: PPUSH
26164: LD_VAR 0 3
26168: PPUSH
26169: CALL_OW 12
26173: ARRAY
26174: ST_TO_ADDR
// if Crawls ( un ) then
26175: LD_VAR 0 2
26179: PPUSH
26180: CALL_OW 318
26184: IFFALSE 26195
// ComWalk ( un ) ;
26186: LD_VAR 0 2
26190: PPUSH
26191: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26195: LD_VAR 0 2
26199: PPUSH
26200: LD_INT 5
26202: PPUSH
26203: CALL_OW 336
// end ;
26207: PPOPN 3
26209: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26210: LD_EXP 67
26214: PUSH
26215: LD_EXP 85
26219: AND
26220: PUSH
26221: LD_OWVAR 67
26225: PUSH
26226: LD_INT 4
26228: LESS
26229: AND
26230: IFFALSE 26249
26232: GO 26234
26234: DISABLE
// begin Difficulty := Difficulty + 1 ;
26235: LD_ADDR_OWVAR 67
26239: PUSH
26240: LD_OWVAR 67
26244: PUSH
26245: LD_INT 1
26247: PLUS
26248: ST_TO_ADDR
// end ;
26249: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26250: LD_EXP 67
26254: PUSH
26255: LD_EXP 86
26259: AND
26260: IFFALSE 26363
26262: GO 26264
26264: DISABLE
26265: LD_INT 0
26267: PPUSH
// begin for i := 1 to 5 do
26268: LD_ADDR_VAR 0 1
26272: PUSH
26273: DOUBLE
26274: LD_INT 1
26276: DEC
26277: ST_TO_ADDR
26278: LD_INT 5
26280: PUSH
26281: FOR_TO
26282: IFFALSE 26361
// begin uc_nation := nation_nature ;
26284: LD_ADDR_OWVAR 21
26288: PUSH
26289: LD_INT 0
26291: ST_TO_ADDR
// uc_side := 0 ;
26292: LD_ADDR_OWVAR 20
26296: PUSH
26297: LD_INT 0
26299: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26300: LD_ADDR_OWVAR 29
26304: PUSH
26305: LD_INT 12
26307: PUSH
26308: LD_INT 12
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: ST_TO_ADDR
// hc_agressivity := 20 ;
26315: LD_ADDR_OWVAR 35
26319: PUSH
26320: LD_INT 20
26322: ST_TO_ADDR
// hc_class := class_tiger ;
26323: LD_ADDR_OWVAR 28
26327: PUSH
26328: LD_INT 14
26330: ST_TO_ADDR
// hc_gallery :=  ;
26331: LD_ADDR_OWVAR 33
26335: PUSH
26336: LD_STRING 
26338: ST_TO_ADDR
// hc_name :=  ;
26339: LD_ADDR_OWVAR 26
26343: PUSH
26344: LD_STRING 
26346: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26347: CALL_OW 44
26351: PPUSH
26352: LD_INT 0
26354: PPUSH
26355: CALL_OW 51
// end ;
26359: GO 26281
26361: POP
26362: POP
// end ;
26363: PPOPN 1
26365: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26366: LD_EXP 67
26370: PUSH
26371: LD_EXP 87
26375: AND
26376: IFFALSE 26385
26378: GO 26380
26380: DISABLE
// StreamSibBomb ;
26381: CALL 26386 0 0
26385: END
// export function StreamSibBomb ; var i , x , y ; begin
26386: LD_INT 0
26388: PPUSH
26389: PPUSH
26390: PPUSH
26391: PPUSH
// result := false ;
26392: LD_ADDR_VAR 0 1
26396: PUSH
26397: LD_INT 0
26399: ST_TO_ADDR
// for i := 1 to 16 do
26400: LD_ADDR_VAR 0 2
26404: PUSH
26405: DOUBLE
26406: LD_INT 1
26408: DEC
26409: ST_TO_ADDR
26410: LD_INT 16
26412: PUSH
26413: FOR_TO
26414: IFFALSE 26613
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26416: LD_ADDR_VAR 0 3
26420: PUSH
26421: LD_INT 10
26423: PUSH
26424: LD_INT 20
26426: PUSH
26427: LD_INT 30
26429: PUSH
26430: LD_INT 40
26432: PUSH
26433: LD_INT 50
26435: PUSH
26436: LD_INT 60
26438: PUSH
26439: LD_INT 70
26441: PUSH
26442: LD_INT 80
26444: PUSH
26445: LD_INT 90
26447: PUSH
26448: LD_INT 100
26450: PUSH
26451: LD_INT 110
26453: PUSH
26454: LD_INT 120
26456: PUSH
26457: LD_INT 130
26459: PUSH
26460: LD_INT 140
26462: PUSH
26463: LD_INT 150
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 1
26485: PPUSH
26486: LD_INT 15
26488: PPUSH
26489: CALL_OW 12
26493: ARRAY
26494: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26495: LD_ADDR_VAR 0 4
26499: PUSH
26500: LD_INT 10
26502: PUSH
26503: LD_INT 20
26505: PUSH
26506: LD_INT 30
26508: PUSH
26509: LD_INT 40
26511: PUSH
26512: LD_INT 50
26514: PUSH
26515: LD_INT 60
26517: PUSH
26518: LD_INT 70
26520: PUSH
26521: LD_INT 80
26523: PUSH
26524: LD_INT 90
26526: PUSH
26527: LD_INT 100
26529: PUSH
26530: LD_INT 110
26532: PUSH
26533: LD_INT 120
26535: PUSH
26536: LD_INT 130
26538: PUSH
26539: LD_INT 140
26541: PUSH
26542: LD_INT 150
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 1
26564: PPUSH
26565: LD_INT 15
26567: PPUSH
26568: CALL_OW 12
26572: ARRAY
26573: ST_TO_ADDR
// if ValidHex ( x , y ) then
26574: LD_VAR 0 3
26578: PPUSH
26579: LD_VAR 0 4
26583: PPUSH
26584: CALL_OW 488
26588: IFFALSE 26611
// begin result := [ x , y ] ;
26590: LD_ADDR_VAR 0 1
26594: PUSH
26595: LD_VAR 0 3
26599: PUSH
26600: LD_VAR 0 4
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: ST_TO_ADDR
// break ;
26609: GO 26613
// end ; end ;
26611: GO 26413
26613: POP
26614: POP
// if result then
26615: LD_VAR 0 1
26619: IFFALSE 26679
// begin ToLua ( playSibBomb() ) ;
26621: LD_STRING playSibBomb()
26623: PPUSH
26624: CALL_OW 559
// wait ( 0 0$14 ) ;
26628: LD_INT 490
26630: PPUSH
26631: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26635: LD_VAR 0 1
26639: PUSH
26640: LD_INT 1
26642: ARRAY
26643: PPUSH
26644: LD_VAR 0 1
26648: PUSH
26649: LD_INT 2
26651: ARRAY
26652: PPUSH
26653: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26657: LD_VAR 0 1
26661: PUSH
26662: LD_INT 1
26664: ARRAY
26665: PPUSH
26666: LD_VAR 0 1
26670: PUSH
26671: LD_INT 2
26673: ARRAY
26674: PPUSH
26675: CALL_OW 429
// end ; end ;
26679: LD_VAR 0 1
26683: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26684: LD_EXP 67
26688: PUSH
26689: LD_EXP 89
26693: AND
26694: IFFALSE 26706
26696: GO 26698
26698: DISABLE
// YouLost (  ) ;
26699: LD_STRING 
26701: PPUSH
26702: CALL_OW 104
26706: END
// every 0 0$1 trigger StreamModeActive and sFog do
26707: LD_EXP 67
26711: PUSH
26712: LD_EXP 88
26716: AND
26717: IFFALSE 26731
26719: GO 26721
26721: DISABLE
// FogOff ( your_side ) ;
26722: LD_OWVAR 2
26726: PPUSH
26727: CALL_OW 344
26731: END
// every 0 0$1 trigger StreamModeActive and sSun do
26732: LD_EXP 67
26736: PUSH
26737: LD_EXP 90
26741: AND
26742: IFFALSE 26770
26744: GO 26746
26746: DISABLE
// begin solar_recharge_percent := 0 ;
26747: LD_ADDR_OWVAR 79
26751: PUSH
26752: LD_INT 0
26754: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26755: LD_INT 10500
26757: PPUSH
26758: CALL_OW 67
// solar_recharge_percent := 100 ;
26762: LD_ADDR_OWVAR 79
26766: PUSH
26767: LD_INT 100
26769: ST_TO_ADDR
// end ;
26770: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26771: LD_EXP 67
26775: PUSH
26776: LD_EXP 91
26780: AND
26781: IFFALSE 27020
26783: GO 26785
26785: DISABLE
26786: LD_INT 0
26788: PPUSH
26789: PPUSH
26790: PPUSH
// begin tmp := [ ] ;
26791: LD_ADDR_VAR 0 3
26795: PUSH
26796: EMPTY
26797: ST_TO_ADDR
// for i := 1 to 6 do
26798: LD_ADDR_VAR 0 1
26802: PUSH
26803: DOUBLE
26804: LD_INT 1
26806: DEC
26807: ST_TO_ADDR
26808: LD_INT 6
26810: PUSH
26811: FOR_TO
26812: IFFALSE 26917
// begin uc_nation := nation_nature ;
26814: LD_ADDR_OWVAR 21
26818: PUSH
26819: LD_INT 0
26821: ST_TO_ADDR
// uc_side := 0 ;
26822: LD_ADDR_OWVAR 20
26826: PUSH
26827: LD_INT 0
26829: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26830: LD_ADDR_OWVAR 29
26834: PUSH
26835: LD_INT 12
26837: PUSH
26838: LD_INT 12
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: ST_TO_ADDR
// hc_agressivity := 20 ;
26845: LD_ADDR_OWVAR 35
26849: PUSH
26850: LD_INT 20
26852: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26853: LD_ADDR_OWVAR 28
26857: PUSH
26858: LD_INT 17
26860: ST_TO_ADDR
// hc_gallery :=  ;
26861: LD_ADDR_OWVAR 33
26865: PUSH
26866: LD_STRING 
26868: ST_TO_ADDR
// hc_name :=  ;
26869: LD_ADDR_OWVAR 26
26873: PUSH
26874: LD_STRING 
26876: ST_TO_ADDR
// un := CreateHuman ;
26877: LD_ADDR_VAR 0 2
26881: PUSH
26882: CALL_OW 44
26886: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26887: LD_VAR 0 2
26891: PPUSH
26892: LD_INT 1
26894: PPUSH
26895: CALL_OW 51
// tmp := tmp ^ un ;
26899: LD_ADDR_VAR 0 3
26903: PUSH
26904: LD_VAR 0 3
26908: PUSH
26909: LD_VAR 0 2
26913: ADD
26914: ST_TO_ADDR
// end ;
26915: GO 26811
26917: POP
26918: POP
// repeat wait ( 0 0$1 ) ;
26919: LD_INT 35
26921: PPUSH
26922: CALL_OW 67
// for un in tmp do
26926: LD_ADDR_VAR 0 2
26930: PUSH
26931: LD_VAR 0 3
26935: PUSH
26936: FOR_IN
26937: IFFALSE 27011
// begin if IsDead ( un ) then
26939: LD_VAR 0 2
26943: PPUSH
26944: CALL_OW 301
26948: IFFALSE 26968
// begin tmp := tmp diff un ;
26950: LD_ADDR_VAR 0 3
26954: PUSH
26955: LD_VAR 0 3
26959: PUSH
26960: LD_VAR 0 2
26964: DIFF
26965: ST_TO_ADDR
// continue ;
26966: GO 26936
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26968: LD_VAR 0 2
26972: PPUSH
26973: LD_INT 3
26975: PUSH
26976: LD_INT 22
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PPUSH
26990: CALL_OW 69
26994: PPUSH
26995: LD_VAR 0 2
26999: PPUSH
27000: CALL_OW 74
27004: PPUSH
27005: CALL_OW 115
// end ;
27009: GO 26936
27011: POP
27012: POP
// until not tmp ;
27013: LD_VAR 0 3
27017: NOT
27018: IFFALSE 26919
// end ;
27020: PPOPN 3
27022: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27023: LD_EXP 67
27027: PUSH
27028: LD_EXP 92
27032: AND
27033: IFFALSE 27087
27035: GO 27037
27037: DISABLE
// begin ToLua ( displayTroll(); ) ;
27038: LD_STRING displayTroll();
27040: PPUSH
27041: CALL_OW 559
// wait ( 3 3$00 ) ;
27045: LD_INT 6300
27047: PPUSH
27048: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27052: LD_STRING hideTroll();
27054: PPUSH
27055: CALL_OW 559
// wait ( 1 1$00 ) ;
27059: LD_INT 2100
27061: PPUSH
27062: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27066: LD_STRING displayTroll();
27068: PPUSH
27069: CALL_OW 559
// wait ( 1 1$00 ) ;
27073: LD_INT 2100
27075: PPUSH
27076: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27080: LD_STRING hideTroll();
27082: PPUSH
27083: CALL_OW 559
// end ;
27087: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27088: LD_EXP 67
27092: PUSH
27093: LD_EXP 93
27097: AND
27098: IFFALSE 27161
27100: GO 27102
27102: DISABLE
27103: LD_INT 0
27105: PPUSH
// begin p := 0 ;
27106: LD_ADDR_VAR 0 1
27110: PUSH
27111: LD_INT 0
27113: ST_TO_ADDR
// repeat game_speed := 1 ;
27114: LD_ADDR_OWVAR 65
27118: PUSH
27119: LD_INT 1
27121: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27122: LD_INT 35
27124: PPUSH
27125: CALL_OW 67
// p := p + 1 ;
27129: LD_ADDR_VAR 0 1
27133: PUSH
27134: LD_VAR 0 1
27138: PUSH
27139: LD_INT 1
27141: PLUS
27142: ST_TO_ADDR
// until p >= 60 ;
27143: LD_VAR 0 1
27147: PUSH
27148: LD_INT 60
27150: GREATEREQUAL
27151: IFFALSE 27114
// game_speed := 4 ;
27153: LD_ADDR_OWVAR 65
27157: PUSH
27158: LD_INT 4
27160: ST_TO_ADDR
// end ;
27161: PPOPN 1
27163: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27164: LD_EXP 67
27168: PUSH
27169: LD_EXP 94
27173: AND
27174: IFFALSE 27320
27176: GO 27178
27178: DISABLE
27179: LD_INT 0
27181: PPUSH
27182: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27183: LD_ADDR_VAR 0 1
27187: PUSH
27188: LD_INT 22
27190: PUSH
27191: LD_OWVAR 2
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 2
27202: PUSH
27203: LD_INT 30
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 30
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: LIST
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PPUSH
27232: CALL_OW 69
27236: ST_TO_ADDR
// if not depot then
27237: LD_VAR 0 1
27241: NOT
27242: IFFALSE 27246
// exit ;
27244: GO 27320
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27246: LD_ADDR_VAR 0 2
27250: PUSH
27251: LD_VAR 0 1
27255: PUSH
27256: LD_INT 1
27258: PPUSH
27259: LD_VAR 0 1
27263: PPUSH
27264: CALL_OW 12
27268: ARRAY
27269: PPUSH
27270: CALL_OW 274
27274: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27275: LD_VAR 0 2
27279: PPUSH
27280: LD_INT 1
27282: PPUSH
27283: LD_INT 0
27285: PPUSH
27286: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27290: LD_VAR 0 2
27294: PPUSH
27295: LD_INT 2
27297: PPUSH
27298: LD_INT 0
27300: PPUSH
27301: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27305: LD_VAR 0 2
27309: PPUSH
27310: LD_INT 3
27312: PPUSH
27313: LD_INT 0
27315: PPUSH
27316: CALL_OW 277
// end ;
27320: PPOPN 2
27322: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27323: LD_EXP 67
27327: PUSH
27328: LD_EXP 95
27332: AND
27333: IFFALSE 27430
27335: GO 27337
27337: DISABLE
27338: LD_INT 0
27340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27341: LD_ADDR_VAR 0 1
27345: PUSH
27346: LD_INT 22
27348: PUSH
27349: LD_OWVAR 2
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 21
27360: PUSH
27361: LD_INT 1
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 3
27370: PUSH
27371: LD_INT 23
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: PPUSH
27390: CALL_OW 69
27394: ST_TO_ADDR
// if not tmp then
27395: LD_VAR 0 1
27399: NOT
27400: IFFALSE 27404
// exit ;
27402: GO 27430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27404: LD_VAR 0 1
27408: PUSH
27409: LD_INT 1
27411: PPUSH
27412: LD_VAR 0 1
27416: PPUSH
27417: CALL_OW 12
27421: ARRAY
27422: PPUSH
27423: LD_INT 200
27425: PPUSH
27426: CALL_OW 234
// end ;
27430: PPOPN 1
27432: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27433: LD_EXP 67
27437: PUSH
27438: LD_EXP 96
27442: AND
27443: IFFALSE 27522
27445: GO 27447
27447: DISABLE
27448: LD_INT 0
27450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27451: LD_ADDR_VAR 0 1
27455: PUSH
27456: LD_INT 22
27458: PUSH
27459: LD_OWVAR 2
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 21
27470: PUSH
27471: LD_INT 2
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PPUSH
27482: CALL_OW 69
27486: ST_TO_ADDR
// if not tmp then
27487: LD_VAR 0 1
27491: NOT
27492: IFFALSE 27496
// exit ;
27494: GO 27522
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27496: LD_VAR 0 1
27500: PUSH
27501: LD_INT 1
27503: PPUSH
27504: LD_VAR 0 1
27508: PPUSH
27509: CALL_OW 12
27513: ARRAY
27514: PPUSH
27515: LD_INT 60
27517: PPUSH
27518: CALL_OW 234
// end ;
27522: PPOPN 1
27524: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27525: LD_EXP 67
27529: PUSH
27530: LD_EXP 97
27534: AND
27535: IFFALSE 27634
27537: GO 27539
27539: DISABLE
27540: LD_INT 0
27542: PPUSH
27543: PPUSH
// begin enable ;
27544: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27545: LD_ADDR_VAR 0 1
27549: PUSH
27550: LD_INT 22
27552: PUSH
27553: LD_OWVAR 2
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 61
27564: PUSH
27565: EMPTY
27566: LIST
27567: PUSH
27568: LD_INT 33
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: PPUSH
27583: CALL_OW 69
27587: ST_TO_ADDR
// if not tmp then
27588: LD_VAR 0 1
27592: NOT
27593: IFFALSE 27597
// exit ;
27595: GO 27634
// for i in tmp do
27597: LD_ADDR_VAR 0 2
27601: PUSH
27602: LD_VAR 0 1
27606: PUSH
27607: FOR_IN
27608: IFFALSE 27632
// if IsControledBy ( i ) then
27610: LD_VAR 0 2
27614: PPUSH
27615: CALL_OW 312
27619: IFFALSE 27630
// ComUnlink ( i ) ;
27621: LD_VAR 0 2
27625: PPUSH
27626: CALL_OW 136
27630: GO 27607
27632: POP
27633: POP
// end ;
27634: PPOPN 2
27636: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27637: LD_EXP 67
27641: PUSH
27642: LD_EXP 98
27646: AND
27647: IFFALSE 27787
27649: GO 27651
27651: DISABLE
27652: LD_INT 0
27654: PPUSH
27655: PPUSH
// begin ToLua ( displayPowell(); ) ;
27656: LD_STRING displayPowell();
27658: PPUSH
27659: CALL_OW 559
// uc_side := 0 ;
27663: LD_ADDR_OWVAR 20
27667: PUSH
27668: LD_INT 0
27670: ST_TO_ADDR
// uc_nation := 2 ;
27671: LD_ADDR_OWVAR 21
27675: PUSH
27676: LD_INT 2
27678: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27679: LD_ADDR_OWVAR 37
27683: PUSH
27684: LD_INT 14
27686: ST_TO_ADDR
// vc_engine := engine_siberite ;
27687: LD_ADDR_OWVAR 39
27691: PUSH
27692: LD_INT 3
27694: ST_TO_ADDR
// vc_control := control_apeman ;
27695: LD_ADDR_OWVAR 38
27699: PUSH
27700: LD_INT 5
27702: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27703: LD_ADDR_OWVAR 40
27707: PUSH
27708: LD_INT 29
27710: ST_TO_ADDR
// un := CreateVehicle ;
27711: LD_ADDR_VAR 0 2
27715: PUSH
27716: CALL_OW 45
27720: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27721: LD_VAR 0 2
27725: PPUSH
27726: LD_INT 1
27728: PPUSH
27729: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27733: LD_INT 35
27735: PPUSH
27736: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27740: LD_VAR 0 2
27744: PPUSH
27745: LD_INT 22
27747: PUSH
27748: LD_OWVAR 2
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PPUSH
27757: CALL_OW 69
27761: PPUSH
27762: LD_VAR 0 2
27766: PPUSH
27767: CALL_OW 74
27771: PPUSH
27772: CALL_OW 115
// until IsDead ( un ) ;
27776: LD_VAR 0 2
27780: PPUSH
27781: CALL_OW 301
27785: IFFALSE 27733
// end ;
27787: PPOPN 2
27789: END
// every 0 0$1 trigger StreamModeActive and sStu do
27790: LD_EXP 67
27794: PUSH
27795: LD_EXP 106
27799: AND
27800: IFFALSE 27816
27802: GO 27804
27804: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27805: LD_STRING displayStucuk();
27807: PPUSH
27808: CALL_OW 559
// ResetFog ;
27812: CALL_OW 335
// end ;
27816: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27817: LD_EXP 67
27821: PUSH
27822: LD_EXP 99
27826: AND
27827: IFFALSE 27968
27829: GO 27831
27831: DISABLE
27832: LD_INT 0
27834: PPUSH
27835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27836: LD_ADDR_VAR 0 2
27840: PUSH
27841: LD_INT 22
27843: PUSH
27844: LD_OWVAR 2
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 21
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PPUSH
27867: CALL_OW 69
27871: ST_TO_ADDR
// if not tmp then
27872: LD_VAR 0 2
27876: NOT
27877: IFFALSE 27881
// exit ;
27879: GO 27968
// un := tmp [ rand ( 1 , tmp ) ] ;
27881: LD_ADDR_VAR 0 1
27885: PUSH
27886: LD_VAR 0 2
27890: PUSH
27891: LD_INT 1
27893: PPUSH
27894: LD_VAR 0 2
27898: PPUSH
27899: CALL_OW 12
27903: ARRAY
27904: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27905: LD_VAR 0 1
27909: PPUSH
27910: LD_INT 0
27912: PPUSH
27913: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27917: LD_VAR 0 1
27921: PPUSH
27922: LD_OWVAR 3
27926: PUSH
27927: LD_VAR 0 1
27931: DIFF
27932: PPUSH
27933: LD_VAR 0 1
27937: PPUSH
27938: CALL_OW 74
27942: PPUSH
27943: CALL_OW 115
// wait ( 0 0$20 ) ;
27947: LD_INT 700
27949: PPUSH
27950: CALL_OW 67
// SetSide ( un , your_side ) ;
27954: LD_VAR 0 1
27958: PPUSH
27959: LD_OWVAR 2
27963: PPUSH
27964: CALL_OW 235
// end ;
27968: PPOPN 2
27970: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27971: LD_EXP 67
27975: PUSH
27976: LD_EXP 100
27980: AND
27981: IFFALSE 28087
27983: GO 27985
27985: DISABLE
27986: LD_INT 0
27988: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27989: LD_ADDR_VAR 0 1
27993: PUSH
27994: LD_INT 22
27996: PUSH
27997: LD_OWVAR 2
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: LD_INT 30
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 30
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: LIST
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PPUSH
28038: CALL_OW 69
28042: ST_TO_ADDR
// if not depot then
28043: LD_VAR 0 1
28047: NOT
28048: IFFALSE 28052
// exit ;
28050: GO 28087
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28052: LD_VAR 0 1
28056: PUSH
28057: LD_INT 1
28059: ARRAY
28060: PPUSH
28061: CALL_OW 250
28065: PPUSH
28066: LD_VAR 0 1
28070: PUSH
28071: LD_INT 1
28073: ARRAY
28074: PPUSH
28075: CALL_OW 251
28079: PPUSH
28080: LD_INT 70
28082: PPUSH
28083: CALL_OW 495
// end ;
28087: PPOPN 1
28089: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28090: LD_EXP 67
28094: PUSH
28095: LD_EXP 101
28099: AND
28100: IFFALSE 28311
28102: GO 28104
28104: DISABLE
28105: LD_INT 0
28107: PPUSH
28108: PPUSH
28109: PPUSH
28110: PPUSH
28111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28112: LD_ADDR_VAR 0 5
28116: PUSH
28117: LD_INT 22
28119: PUSH
28120: LD_OWVAR 2
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 21
28131: PUSH
28132: LD_INT 1
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PPUSH
28143: CALL_OW 69
28147: ST_TO_ADDR
// if not tmp then
28148: LD_VAR 0 5
28152: NOT
28153: IFFALSE 28157
// exit ;
28155: GO 28311
// for i in tmp do
28157: LD_ADDR_VAR 0 1
28161: PUSH
28162: LD_VAR 0 5
28166: PUSH
28167: FOR_IN
28168: IFFALSE 28309
// begin d := rand ( 0 , 5 ) ;
28170: LD_ADDR_VAR 0 4
28174: PUSH
28175: LD_INT 0
28177: PPUSH
28178: LD_INT 5
28180: PPUSH
28181: CALL_OW 12
28185: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28186: LD_ADDR_VAR 0 2
28190: PUSH
28191: LD_VAR 0 1
28195: PPUSH
28196: CALL_OW 250
28200: PPUSH
28201: LD_VAR 0 4
28205: PPUSH
28206: LD_INT 3
28208: PPUSH
28209: LD_INT 12
28211: PPUSH
28212: CALL_OW 12
28216: PPUSH
28217: CALL_OW 272
28221: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28222: LD_ADDR_VAR 0 3
28226: PUSH
28227: LD_VAR 0 1
28231: PPUSH
28232: CALL_OW 251
28236: PPUSH
28237: LD_VAR 0 4
28241: PPUSH
28242: LD_INT 3
28244: PPUSH
28245: LD_INT 12
28247: PPUSH
28248: CALL_OW 12
28252: PPUSH
28253: CALL_OW 273
28257: ST_TO_ADDR
// if ValidHex ( x , y ) then
28258: LD_VAR 0 2
28262: PPUSH
28263: LD_VAR 0 3
28267: PPUSH
28268: CALL_OW 488
28272: IFFALSE 28307
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28274: LD_VAR 0 1
28278: PPUSH
28279: LD_VAR 0 2
28283: PPUSH
28284: LD_VAR 0 3
28288: PPUSH
28289: LD_INT 3
28291: PPUSH
28292: LD_INT 6
28294: PPUSH
28295: CALL_OW 12
28299: PPUSH
28300: LD_INT 1
28302: PPUSH
28303: CALL_OW 483
// end ;
28307: GO 28167
28309: POP
28310: POP
// end ;
28311: PPOPN 5
28313: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28314: LD_EXP 67
28318: PUSH
28319: LD_EXP 102
28323: AND
28324: IFFALSE 28418
28326: GO 28328
28328: DISABLE
28329: LD_INT 0
28331: PPUSH
28332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28333: LD_ADDR_VAR 0 2
28337: PUSH
28338: LD_INT 22
28340: PUSH
28341: LD_OWVAR 2
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 32
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 21
28362: PUSH
28363: LD_INT 2
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: LIST
28374: PPUSH
28375: CALL_OW 69
28379: ST_TO_ADDR
// if not tmp then
28380: LD_VAR 0 2
28384: NOT
28385: IFFALSE 28389
// exit ;
28387: GO 28418
// for i in tmp do
28389: LD_ADDR_VAR 0 1
28393: PUSH
28394: LD_VAR 0 2
28398: PUSH
28399: FOR_IN
28400: IFFALSE 28416
// SetFuel ( i , 0 ) ;
28402: LD_VAR 0 1
28406: PPUSH
28407: LD_INT 0
28409: PPUSH
28410: CALL_OW 240
28414: GO 28399
28416: POP
28417: POP
// end ;
28418: PPOPN 2
28420: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28421: LD_EXP 67
28425: PUSH
28426: LD_EXP 103
28430: AND
28431: IFFALSE 28497
28433: GO 28435
28435: DISABLE
28436: LD_INT 0
28438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28439: LD_ADDR_VAR 0 1
28443: PUSH
28444: LD_INT 22
28446: PUSH
28447: LD_OWVAR 2
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 30
28458: PUSH
28459: LD_INT 29
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PPUSH
28470: CALL_OW 69
28474: ST_TO_ADDR
// if not tmp then
28475: LD_VAR 0 1
28479: NOT
28480: IFFALSE 28484
// exit ;
28482: GO 28497
// DestroyUnit ( tmp [ 1 ] ) ;
28484: LD_VAR 0 1
28488: PUSH
28489: LD_INT 1
28491: ARRAY
28492: PPUSH
28493: CALL_OW 65
// end ;
28497: PPOPN 1
28499: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28500: LD_EXP 67
28504: PUSH
28505: LD_EXP 105
28509: AND
28510: IFFALSE 28639
28512: GO 28514
28514: DISABLE
28515: LD_INT 0
28517: PPUSH
// begin uc_side := 0 ;
28518: LD_ADDR_OWVAR 20
28522: PUSH
28523: LD_INT 0
28525: ST_TO_ADDR
// uc_nation := nation_arabian ;
28526: LD_ADDR_OWVAR 21
28530: PUSH
28531: LD_INT 2
28533: ST_TO_ADDR
// hc_gallery :=  ;
28534: LD_ADDR_OWVAR 33
28538: PUSH
28539: LD_STRING 
28541: ST_TO_ADDR
// hc_name :=  ;
28542: LD_ADDR_OWVAR 26
28546: PUSH
28547: LD_STRING 
28549: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28550: LD_INT 1
28552: PPUSH
28553: LD_INT 11
28555: PPUSH
28556: LD_INT 10
28558: PPUSH
28559: CALL_OW 380
// un := CreateHuman ;
28563: LD_ADDR_VAR 0 1
28567: PUSH
28568: CALL_OW 44
28572: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28573: LD_VAR 0 1
28577: PPUSH
28578: LD_INT 1
28580: PPUSH
28581: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28585: LD_INT 35
28587: PPUSH
28588: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28592: LD_VAR 0 1
28596: PPUSH
28597: LD_INT 22
28599: PUSH
28600: LD_OWVAR 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PPUSH
28609: CALL_OW 69
28613: PPUSH
28614: LD_VAR 0 1
28618: PPUSH
28619: CALL_OW 74
28623: PPUSH
28624: CALL_OW 115
// until IsDead ( un ) ;
28628: LD_VAR 0 1
28632: PPUSH
28633: CALL_OW 301
28637: IFFALSE 28585
// end ;
28639: PPOPN 1
28641: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28642: LD_EXP 67
28646: PUSH
28647: LD_EXP 107
28651: AND
28652: IFFALSE 28664
28654: GO 28656
28656: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28657: LD_STRING earthquake(getX(game), 0, 32)
28659: PPUSH
28660: CALL_OW 559
28664: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28665: LD_EXP 67
28669: PUSH
28670: LD_EXP 108
28674: AND
28675: IFFALSE 28766
28677: GO 28679
28679: DISABLE
28680: LD_INT 0
28682: PPUSH
// begin enable ;
28683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28684: LD_ADDR_VAR 0 1
28688: PUSH
28689: LD_INT 22
28691: PUSH
28692: LD_OWVAR 2
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 21
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 33
28713: PUSH
28714: LD_INT 3
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: PPUSH
28726: CALL_OW 69
28730: ST_TO_ADDR
// if not tmp then
28731: LD_VAR 0 1
28735: NOT
28736: IFFALSE 28740
// exit ;
28738: GO 28766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28740: LD_VAR 0 1
28744: PUSH
28745: LD_INT 1
28747: PPUSH
28748: LD_VAR 0 1
28752: PPUSH
28753: CALL_OW 12
28757: ARRAY
28758: PPUSH
28759: LD_INT 1
28761: PPUSH
28762: CALL_OW 234
// end ;
28766: PPOPN 1
28768: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28769: LD_EXP 67
28773: PUSH
28774: LD_EXP 109
28778: AND
28779: IFFALSE 28920
28781: GO 28783
28783: DISABLE
28784: LD_INT 0
28786: PPUSH
28787: PPUSH
28788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28789: LD_ADDR_VAR 0 3
28793: PUSH
28794: LD_INT 22
28796: PUSH
28797: LD_OWVAR 2
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 25
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PPUSH
28820: CALL_OW 69
28824: ST_TO_ADDR
// if not tmp then
28825: LD_VAR 0 3
28829: NOT
28830: IFFALSE 28834
// exit ;
28832: GO 28920
// un := tmp [ rand ( 1 , tmp ) ] ;
28834: LD_ADDR_VAR 0 2
28838: PUSH
28839: LD_VAR 0 3
28843: PUSH
28844: LD_INT 1
28846: PPUSH
28847: LD_VAR 0 3
28851: PPUSH
28852: CALL_OW 12
28856: ARRAY
28857: ST_TO_ADDR
// if Crawls ( un ) then
28858: LD_VAR 0 2
28862: PPUSH
28863: CALL_OW 318
28867: IFFALSE 28878
// ComWalk ( un ) ;
28869: LD_VAR 0 2
28873: PPUSH
28874: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28878: LD_VAR 0 2
28882: PPUSH
28883: LD_INT 9
28885: PPUSH
28886: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28890: LD_INT 28
28892: PPUSH
28893: LD_OWVAR 2
28897: PPUSH
28898: LD_INT 2
28900: PPUSH
28901: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28905: LD_INT 29
28907: PPUSH
28908: LD_OWVAR 2
28912: PPUSH
28913: LD_INT 2
28915: PPUSH
28916: CALL_OW 322
// end ;
28920: PPOPN 3
28922: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28923: LD_EXP 67
28927: PUSH
28928: LD_EXP 110
28932: AND
28933: IFFALSE 29044
28935: GO 28937
28937: DISABLE
28938: LD_INT 0
28940: PPUSH
28941: PPUSH
28942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28943: LD_ADDR_VAR 0 3
28947: PUSH
28948: LD_INT 22
28950: PUSH
28951: LD_OWVAR 2
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 25
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PPUSH
28974: CALL_OW 69
28978: ST_TO_ADDR
// if not tmp then
28979: LD_VAR 0 3
28983: NOT
28984: IFFALSE 28988
// exit ;
28986: GO 29044
// un := tmp [ rand ( 1 , tmp ) ] ;
28988: LD_ADDR_VAR 0 2
28992: PUSH
28993: LD_VAR 0 3
28997: PUSH
28998: LD_INT 1
29000: PPUSH
29001: LD_VAR 0 3
29005: PPUSH
29006: CALL_OW 12
29010: ARRAY
29011: ST_TO_ADDR
// if Crawls ( un ) then
29012: LD_VAR 0 2
29016: PPUSH
29017: CALL_OW 318
29021: IFFALSE 29032
// ComWalk ( un ) ;
29023: LD_VAR 0 2
29027: PPUSH
29028: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29032: LD_VAR 0 2
29036: PPUSH
29037: LD_INT 8
29039: PPUSH
29040: CALL_OW 336
// end ;
29044: PPOPN 3
29046: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29047: LD_EXP 67
29051: PUSH
29052: LD_EXP 111
29056: AND
29057: IFFALSE 29201
29059: GO 29061
29061: DISABLE
29062: LD_INT 0
29064: PPUSH
29065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29066: LD_ADDR_VAR 0 2
29070: PUSH
29071: LD_INT 22
29073: PUSH
29074: LD_OWVAR 2
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 21
29085: PUSH
29086: LD_INT 2
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 2
29095: PUSH
29096: LD_INT 34
29098: PUSH
29099: LD_INT 12
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 34
29108: PUSH
29109: LD_INT 51
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 34
29118: PUSH
29119: LD_INT 32
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: LIST
29136: PPUSH
29137: CALL_OW 69
29141: ST_TO_ADDR
// if not tmp then
29142: LD_VAR 0 2
29146: NOT
29147: IFFALSE 29151
// exit ;
29149: GO 29201
// for i in tmp do
29151: LD_ADDR_VAR 0 1
29155: PUSH
29156: LD_VAR 0 2
29160: PUSH
29161: FOR_IN
29162: IFFALSE 29199
// if GetCargo ( i , mat_artifact ) = 0 then
29164: LD_VAR 0 1
29168: PPUSH
29169: LD_INT 4
29171: PPUSH
29172: CALL_OW 289
29176: PUSH
29177: LD_INT 0
29179: EQUAL
29180: IFFALSE 29197
// SetCargo ( i , mat_siberit , 100 ) ;
29182: LD_VAR 0 1
29186: PPUSH
29187: LD_INT 3
29189: PPUSH
29190: LD_INT 100
29192: PPUSH
29193: CALL_OW 290
29197: GO 29161
29199: POP
29200: POP
// end ;
29201: PPOPN 2
29203: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29204: LD_EXP 67
29208: PUSH
29209: LD_EXP 112
29213: AND
29214: IFFALSE 29397
29216: GO 29218
29218: DISABLE
29219: LD_INT 0
29221: PPUSH
29222: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29223: LD_ADDR_VAR 0 2
29227: PUSH
29228: LD_INT 22
29230: PUSH
29231: LD_OWVAR 2
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PPUSH
29240: CALL_OW 69
29244: ST_TO_ADDR
// if not tmp then
29245: LD_VAR 0 2
29249: NOT
29250: IFFALSE 29254
// exit ;
29252: GO 29397
// for i := 1 to 2 do
29254: LD_ADDR_VAR 0 1
29258: PUSH
29259: DOUBLE
29260: LD_INT 1
29262: DEC
29263: ST_TO_ADDR
29264: LD_INT 2
29266: PUSH
29267: FOR_TO
29268: IFFALSE 29395
// begin uc_side := your_side ;
29270: LD_ADDR_OWVAR 20
29274: PUSH
29275: LD_OWVAR 2
29279: ST_TO_ADDR
// uc_nation := nation_american ;
29280: LD_ADDR_OWVAR 21
29284: PUSH
29285: LD_INT 1
29287: ST_TO_ADDR
// vc_chassis := us_morphling ;
29288: LD_ADDR_OWVAR 37
29292: PUSH
29293: LD_INT 5
29295: ST_TO_ADDR
// vc_engine := engine_siberite ;
29296: LD_ADDR_OWVAR 39
29300: PUSH
29301: LD_INT 3
29303: ST_TO_ADDR
// vc_control := control_computer ;
29304: LD_ADDR_OWVAR 38
29308: PUSH
29309: LD_INT 3
29311: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29312: LD_ADDR_OWVAR 40
29316: PUSH
29317: LD_INT 10
29319: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29320: LD_VAR 0 2
29324: PUSH
29325: LD_INT 1
29327: ARRAY
29328: PPUSH
29329: CALL_OW 310
29333: NOT
29334: IFFALSE 29381
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29336: CALL_OW 45
29340: PPUSH
29341: LD_VAR 0 2
29345: PUSH
29346: LD_INT 1
29348: ARRAY
29349: PPUSH
29350: CALL_OW 250
29354: PPUSH
29355: LD_VAR 0 2
29359: PUSH
29360: LD_INT 1
29362: ARRAY
29363: PPUSH
29364: CALL_OW 251
29368: PPUSH
29369: LD_INT 12
29371: PPUSH
29372: LD_INT 1
29374: PPUSH
29375: CALL_OW 50
29379: GO 29393
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29381: CALL_OW 45
29385: PPUSH
29386: LD_INT 1
29388: PPUSH
29389: CALL_OW 51
// end ;
29393: GO 29267
29395: POP
29396: POP
// end ;
29397: PPOPN 2
29399: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29400: LD_EXP 67
29404: PUSH
29405: LD_EXP 113
29409: AND
29410: IFFALSE 29632
29412: GO 29414
29414: DISABLE
29415: LD_INT 0
29417: PPUSH
29418: PPUSH
29419: PPUSH
29420: PPUSH
29421: PPUSH
29422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29423: LD_ADDR_VAR 0 6
29427: PUSH
29428: LD_INT 22
29430: PUSH
29431: LD_OWVAR 2
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 21
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 3
29452: PUSH
29453: LD_INT 23
29455: PUSH
29456: LD_INT 0
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: LIST
29471: PPUSH
29472: CALL_OW 69
29476: ST_TO_ADDR
// if not tmp then
29477: LD_VAR 0 6
29481: NOT
29482: IFFALSE 29486
// exit ;
29484: GO 29632
// s1 := rand ( 1 , 4 ) ;
29486: LD_ADDR_VAR 0 2
29490: PUSH
29491: LD_INT 1
29493: PPUSH
29494: LD_INT 4
29496: PPUSH
29497: CALL_OW 12
29501: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29502: LD_ADDR_VAR 0 4
29506: PUSH
29507: LD_VAR 0 6
29511: PUSH
29512: LD_INT 1
29514: ARRAY
29515: PPUSH
29516: LD_VAR 0 2
29520: PPUSH
29521: CALL_OW 259
29525: ST_TO_ADDR
// if s1 = 1 then
29526: LD_VAR 0 2
29530: PUSH
29531: LD_INT 1
29533: EQUAL
29534: IFFALSE 29554
// s2 := rand ( 2 , 4 ) else
29536: LD_ADDR_VAR 0 3
29540: PUSH
29541: LD_INT 2
29543: PPUSH
29544: LD_INT 4
29546: PPUSH
29547: CALL_OW 12
29551: ST_TO_ADDR
29552: GO 29562
// s2 := 1 ;
29554: LD_ADDR_VAR 0 3
29558: PUSH
29559: LD_INT 1
29561: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29562: LD_ADDR_VAR 0 5
29566: PUSH
29567: LD_VAR 0 6
29571: PUSH
29572: LD_INT 1
29574: ARRAY
29575: PPUSH
29576: LD_VAR 0 3
29580: PPUSH
29581: CALL_OW 259
29585: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29586: LD_VAR 0 6
29590: PUSH
29591: LD_INT 1
29593: ARRAY
29594: PPUSH
29595: LD_VAR 0 2
29599: PPUSH
29600: LD_VAR 0 5
29604: PPUSH
29605: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29609: LD_VAR 0 6
29613: PUSH
29614: LD_INT 1
29616: ARRAY
29617: PPUSH
29618: LD_VAR 0 3
29622: PPUSH
29623: LD_VAR 0 4
29627: PPUSH
29628: CALL_OW 237
// end ;
29632: PPOPN 6
29634: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29635: LD_EXP 67
29639: PUSH
29640: LD_EXP 114
29644: AND
29645: IFFALSE 29724
29647: GO 29649
29649: DISABLE
29650: LD_INT 0
29652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29653: LD_ADDR_VAR 0 1
29657: PUSH
29658: LD_INT 22
29660: PUSH
29661: LD_OWVAR 2
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 30
29672: PUSH
29673: LD_INT 3
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PPUSH
29684: CALL_OW 69
29688: ST_TO_ADDR
// if not tmp then
29689: LD_VAR 0 1
29693: NOT
29694: IFFALSE 29698
// exit ;
29696: GO 29724
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29698: LD_VAR 0 1
29702: PUSH
29703: LD_INT 1
29705: PPUSH
29706: LD_VAR 0 1
29710: PPUSH
29711: CALL_OW 12
29715: ARRAY
29716: PPUSH
29717: LD_INT 1
29719: PPUSH
29720: CALL_OW 234
// end ;
29724: PPOPN 1
29726: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29727: LD_EXP 67
29731: PUSH
29732: LD_EXP 115
29736: AND
29737: IFFALSE 29849
29739: GO 29741
29741: DISABLE
29742: LD_INT 0
29744: PPUSH
29745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29746: LD_ADDR_VAR 0 2
29750: PUSH
29751: LD_INT 22
29753: PUSH
29754: LD_OWVAR 2
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: LD_INT 30
29768: PUSH
29769: LD_INT 27
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 30
29778: PUSH
29779: LD_INT 26
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 30
29788: PUSH
29789: LD_INT 28
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PPUSH
29806: CALL_OW 69
29810: ST_TO_ADDR
// if not tmp then
29811: LD_VAR 0 2
29815: NOT
29816: IFFALSE 29820
// exit ;
29818: GO 29849
// for i in tmp do
29820: LD_ADDR_VAR 0 1
29824: PUSH
29825: LD_VAR 0 2
29829: PUSH
29830: FOR_IN
29831: IFFALSE 29847
// SetLives ( i , 1 ) ;
29833: LD_VAR 0 1
29837: PPUSH
29838: LD_INT 1
29840: PPUSH
29841: CALL_OW 234
29845: GO 29830
29847: POP
29848: POP
// end ;
29849: PPOPN 2
29851: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29852: LD_EXP 67
29856: PUSH
29857: LD_EXP 116
29861: AND
29862: IFFALSE 30136
29864: GO 29866
29866: DISABLE
29867: LD_INT 0
29869: PPUSH
29870: PPUSH
29871: PPUSH
// begin i := rand ( 1 , 7 ) ;
29872: LD_ADDR_VAR 0 1
29876: PUSH
29877: LD_INT 1
29879: PPUSH
29880: LD_INT 7
29882: PPUSH
29883: CALL_OW 12
29887: ST_TO_ADDR
// case i of 1 :
29888: LD_VAR 0 1
29892: PUSH
29893: LD_INT 1
29895: DOUBLE
29896: EQUAL
29897: IFTRUE 29901
29899: GO 29911
29901: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29902: LD_STRING earthquake(getX(game), 0, 32)
29904: PPUSH
29905: CALL_OW 559
29909: GO 30136
29911: LD_INT 2
29913: DOUBLE
29914: EQUAL
29915: IFTRUE 29919
29917: GO 29933
29919: POP
// begin ToLua ( displayStucuk(); ) ;
29920: LD_STRING displayStucuk();
29922: PPUSH
29923: CALL_OW 559
// ResetFog ;
29927: CALL_OW 335
// end ; 3 :
29931: GO 30136
29933: LD_INT 3
29935: DOUBLE
29936: EQUAL
29937: IFTRUE 29941
29939: GO 30045
29941: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29942: LD_ADDR_VAR 0 2
29946: PUSH
29947: LD_INT 22
29949: PUSH
29950: LD_OWVAR 2
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 25
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PPUSH
29973: CALL_OW 69
29977: ST_TO_ADDR
// if not tmp then
29978: LD_VAR 0 2
29982: NOT
29983: IFFALSE 29987
// exit ;
29985: GO 30136
// un := tmp [ rand ( 1 , tmp ) ] ;
29987: LD_ADDR_VAR 0 3
29991: PUSH
29992: LD_VAR 0 2
29996: PUSH
29997: LD_INT 1
29999: PPUSH
30000: LD_VAR 0 2
30004: PPUSH
30005: CALL_OW 12
30009: ARRAY
30010: ST_TO_ADDR
// if Crawls ( un ) then
30011: LD_VAR 0 3
30015: PPUSH
30016: CALL_OW 318
30020: IFFALSE 30031
// ComWalk ( un ) ;
30022: LD_VAR 0 3
30026: PPUSH
30027: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30031: LD_VAR 0 3
30035: PPUSH
30036: LD_INT 8
30038: PPUSH
30039: CALL_OW 336
// end ; 4 :
30043: GO 30136
30045: LD_INT 4
30047: DOUBLE
30048: EQUAL
30049: IFTRUE 30053
30051: GO 30114
30053: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30054: LD_ADDR_VAR 0 2
30058: PUSH
30059: LD_INT 22
30061: PUSH
30062: LD_OWVAR 2
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 30
30073: PUSH
30074: LD_INT 29
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PPUSH
30085: CALL_OW 69
30089: ST_TO_ADDR
// if not tmp then
30090: LD_VAR 0 2
30094: NOT
30095: IFFALSE 30099
// exit ;
30097: GO 30136
// DestroyUnit ( tmp [ 1 ] ) ;
30099: LD_VAR 0 2
30103: PUSH
30104: LD_INT 1
30106: ARRAY
30107: PPUSH
30108: CALL_OW 65
// end ; 5 .. 7 :
30112: GO 30136
30114: LD_INT 5
30116: DOUBLE
30117: GREATEREQUAL
30118: IFFALSE 30126
30120: LD_INT 7
30122: DOUBLE
30123: LESSEQUAL
30124: IFTRUE 30128
30126: GO 30135
30128: POP
// StreamSibBomb ; end ;
30129: CALL 26386 0 0
30133: GO 30136
30135: POP
// end ;
30136: PPOPN 3
30138: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30139: LD_EXP 67
30143: PUSH
30144: LD_EXP 117
30148: AND
30149: IFFALSE 30305
30151: GO 30153
30153: DISABLE
30154: LD_INT 0
30156: PPUSH
30157: PPUSH
30158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30159: LD_ADDR_VAR 0 2
30163: PUSH
30164: LD_INT 81
30166: PUSH
30167: LD_OWVAR 2
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 2
30178: PUSH
30179: LD_INT 21
30181: PUSH
30182: LD_INT 1
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 21
30191: PUSH
30192: LD_INT 2
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PPUSH
30208: CALL_OW 69
30212: ST_TO_ADDR
// if not tmp then
30213: LD_VAR 0 2
30217: NOT
30218: IFFALSE 30222
// exit ;
30220: GO 30305
// p := 0 ;
30222: LD_ADDR_VAR 0 3
30226: PUSH
30227: LD_INT 0
30229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30230: LD_INT 35
30232: PPUSH
30233: CALL_OW 67
// p := p + 1 ;
30237: LD_ADDR_VAR 0 3
30241: PUSH
30242: LD_VAR 0 3
30246: PUSH
30247: LD_INT 1
30249: PLUS
30250: ST_TO_ADDR
// for i in tmp do
30251: LD_ADDR_VAR 0 1
30255: PUSH
30256: LD_VAR 0 2
30260: PUSH
30261: FOR_IN
30262: IFFALSE 30293
// if GetLives ( i ) < 1000 then
30264: LD_VAR 0 1
30268: PPUSH
30269: CALL_OW 256
30273: PUSH
30274: LD_INT 1000
30276: LESS
30277: IFFALSE 30291
// SetLives ( i , 1000 ) ;
30279: LD_VAR 0 1
30283: PPUSH
30284: LD_INT 1000
30286: PPUSH
30287: CALL_OW 234
30291: GO 30261
30293: POP
30294: POP
// until p > 20 ;
30295: LD_VAR 0 3
30299: PUSH
30300: LD_INT 20
30302: GREATER
30303: IFFALSE 30230
// end ;
30305: PPOPN 3
30307: END
// every 0 0$1 trigger StreamModeActive and sTime do
30308: LD_EXP 67
30312: PUSH
30313: LD_EXP 118
30317: AND
30318: IFFALSE 30353
30320: GO 30322
30322: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30323: LD_INT 28
30325: PPUSH
30326: LD_OWVAR 2
30330: PPUSH
30331: LD_INT 2
30333: PPUSH
30334: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30338: LD_INT 30
30340: PPUSH
30341: LD_OWVAR 2
30345: PPUSH
30346: LD_INT 2
30348: PPUSH
30349: CALL_OW 322
// end ;
30353: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30354: LD_EXP 67
30358: PUSH
30359: LD_EXP 119
30363: AND
30364: IFFALSE 30485
30366: GO 30368
30368: DISABLE
30369: LD_INT 0
30371: PPUSH
30372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30373: LD_ADDR_VAR 0 2
30377: PUSH
30378: LD_INT 22
30380: PUSH
30381: LD_OWVAR 2
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 21
30392: PUSH
30393: LD_INT 1
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 3
30402: PUSH
30403: LD_INT 23
30405: PUSH
30406: LD_INT 0
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: LIST
30421: PPUSH
30422: CALL_OW 69
30426: ST_TO_ADDR
// if not tmp then
30427: LD_VAR 0 2
30431: NOT
30432: IFFALSE 30436
// exit ;
30434: GO 30485
// for i in tmp do
30436: LD_ADDR_VAR 0 1
30440: PUSH
30441: LD_VAR 0 2
30445: PUSH
30446: FOR_IN
30447: IFFALSE 30483
// begin if Crawls ( i ) then
30449: LD_VAR 0 1
30453: PPUSH
30454: CALL_OW 318
30458: IFFALSE 30469
// ComWalk ( i ) ;
30460: LD_VAR 0 1
30464: PPUSH
30465: CALL_OW 138
// SetClass ( i , 2 ) ;
30469: LD_VAR 0 1
30473: PPUSH
30474: LD_INT 2
30476: PPUSH
30477: CALL_OW 336
// end ;
30481: GO 30446
30483: POP
30484: POP
// end ;
30485: PPOPN 2
30487: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30488: LD_EXP 67
30492: PUSH
30493: LD_EXP 120
30497: AND
30498: IFFALSE 30779
30500: GO 30502
30502: DISABLE
30503: LD_INT 0
30505: PPUSH
30506: PPUSH
30507: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30508: LD_OWVAR 2
30512: PPUSH
30513: LD_INT 9
30515: PPUSH
30516: LD_INT 1
30518: PPUSH
30519: LD_INT 1
30521: PPUSH
30522: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30526: LD_INT 9
30528: PPUSH
30529: LD_OWVAR 2
30533: PPUSH
30534: CALL_OW 343
// uc_side := 9 ;
30538: LD_ADDR_OWVAR 20
30542: PUSH
30543: LD_INT 9
30545: ST_TO_ADDR
// uc_nation := 2 ;
30546: LD_ADDR_OWVAR 21
30550: PUSH
30551: LD_INT 2
30553: ST_TO_ADDR
// hc_name := Dark Warrior ;
30554: LD_ADDR_OWVAR 26
30558: PUSH
30559: LD_STRING Dark Warrior
30561: ST_TO_ADDR
// hc_gallery :=  ;
30562: LD_ADDR_OWVAR 33
30566: PUSH
30567: LD_STRING 
30569: ST_TO_ADDR
// hc_noskilllimit := true ;
30570: LD_ADDR_OWVAR 76
30574: PUSH
30575: LD_INT 1
30577: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30578: LD_ADDR_OWVAR 31
30582: PUSH
30583: LD_INT 30
30585: PUSH
30586: LD_INT 30
30588: PUSH
30589: LD_INT 30
30591: PUSH
30592: LD_INT 30
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: ST_TO_ADDR
// un := CreateHuman ;
30601: LD_ADDR_VAR 0 3
30605: PUSH
30606: CALL_OW 44
30610: ST_TO_ADDR
// hc_noskilllimit := false ;
30611: LD_ADDR_OWVAR 76
30615: PUSH
30616: LD_INT 0
30618: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30619: LD_VAR 0 3
30623: PPUSH
30624: LD_INT 1
30626: PPUSH
30627: CALL_OW 51
// p := 0 ;
30631: LD_ADDR_VAR 0 2
30635: PUSH
30636: LD_INT 0
30638: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30639: LD_INT 35
30641: PPUSH
30642: CALL_OW 67
// p := p + 1 ;
30646: LD_ADDR_VAR 0 2
30650: PUSH
30651: LD_VAR 0 2
30655: PUSH
30656: LD_INT 1
30658: PLUS
30659: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30660: LD_VAR 0 3
30664: PPUSH
30665: CALL_OW 256
30669: PUSH
30670: LD_INT 1000
30672: LESS
30673: IFFALSE 30687
// SetLives ( un , 1000 ) ;
30675: LD_VAR 0 3
30679: PPUSH
30680: LD_INT 1000
30682: PPUSH
30683: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30687: LD_VAR 0 3
30691: PPUSH
30692: LD_INT 81
30694: PUSH
30695: LD_OWVAR 2
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 91
30706: PUSH
30707: LD_VAR 0 3
30711: PUSH
30712: LD_INT 30
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: LIST
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PPUSH
30724: CALL_OW 69
30728: PPUSH
30729: LD_VAR 0 3
30733: PPUSH
30734: CALL_OW 74
30738: PPUSH
30739: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30743: LD_VAR 0 2
30747: PUSH
30748: LD_INT 60
30750: GREATER
30751: PUSH
30752: LD_VAR 0 3
30756: PPUSH
30757: CALL_OW 301
30761: OR
30762: IFFALSE 30639
// if un then
30764: LD_VAR 0 3
30768: IFFALSE 30779
// RemoveUnit ( un ) ;
30770: LD_VAR 0 3
30774: PPUSH
30775: CALL_OW 64
// end ;
30779: PPOPN 3
30781: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30782: LD_INT 0
30784: PPUSH
// case cmd of 301 :
30785: LD_VAR 0 1
30789: PUSH
30790: LD_INT 301
30792: DOUBLE
30793: EQUAL
30794: IFTRUE 30798
30796: GO 30830
30798: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30799: LD_VAR 0 6
30803: PPUSH
30804: LD_VAR 0 7
30808: PPUSH
30809: LD_VAR 0 8
30813: PPUSH
30814: LD_VAR 0 4
30818: PPUSH
30819: LD_VAR 0 5
30823: PPUSH
30824: CALL 32031 0 5
30828: GO 30951
30830: LD_INT 302
30832: DOUBLE
30833: EQUAL
30834: IFTRUE 30838
30836: GO 30875
30838: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30839: LD_VAR 0 6
30843: PPUSH
30844: LD_VAR 0 7
30848: PPUSH
30849: LD_VAR 0 8
30853: PPUSH
30854: LD_VAR 0 9
30858: PPUSH
30859: LD_VAR 0 4
30863: PPUSH
30864: LD_VAR 0 5
30868: PPUSH
30869: CALL 32122 0 6
30873: GO 30951
30875: LD_INT 303
30877: DOUBLE
30878: EQUAL
30879: IFTRUE 30883
30881: GO 30920
30883: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30884: LD_VAR 0 6
30888: PPUSH
30889: LD_VAR 0 7
30893: PPUSH
30894: LD_VAR 0 8
30898: PPUSH
30899: LD_VAR 0 9
30903: PPUSH
30904: LD_VAR 0 4
30908: PPUSH
30909: LD_VAR 0 5
30913: PPUSH
30914: CALL 30956 0 6
30918: GO 30951
30920: LD_INT 304
30922: DOUBLE
30923: EQUAL
30924: IFTRUE 30928
30926: GO 30950
30928: POP
// hHackTeleport ( unit , x , y ) ; end ;
30929: LD_VAR 0 2
30933: PPUSH
30934: LD_VAR 0 4
30938: PPUSH
30939: LD_VAR 0 5
30943: PPUSH
30944: CALL 32715 0 3
30948: GO 30951
30950: POP
// end ;
30951: LD_VAR 0 12
30955: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30956: LD_INT 0
30958: PPUSH
30959: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30960: LD_VAR 0 1
30964: PUSH
30965: LD_INT 1
30967: LESS
30968: PUSH
30969: LD_VAR 0 1
30973: PUSH
30974: LD_INT 3
30976: GREATER
30977: OR
30978: PUSH
30979: LD_VAR 0 5
30983: PPUSH
30984: LD_VAR 0 6
30988: PPUSH
30989: CALL_OW 428
30993: OR
30994: IFFALSE 30998
// exit ;
30996: GO 31718
// uc_side := your_side ;
30998: LD_ADDR_OWVAR 20
31002: PUSH
31003: LD_OWVAR 2
31007: ST_TO_ADDR
// uc_nation := nation ;
31008: LD_ADDR_OWVAR 21
31012: PUSH
31013: LD_VAR 0 1
31017: ST_TO_ADDR
// bc_level = 1 ;
31018: LD_ADDR_OWVAR 43
31022: PUSH
31023: LD_INT 1
31025: ST_TO_ADDR
// case btype of 1 :
31026: LD_VAR 0 2
31030: PUSH
31031: LD_INT 1
31033: DOUBLE
31034: EQUAL
31035: IFTRUE 31039
31037: GO 31050
31039: POP
// bc_type := b_depot ; 2 :
31040: LD_ADDR_OWVAR 42
31044: PUSH
31045: LD_INT 0
31047: ST_TO_ADDR
31048: GO 31662
31050: LD_INT 2
31052: DOUBLE
31053: EQUAL
31054: IFTRUE 31058
31056: GO 31069
31058: POP
// bc_type := b_warehouse ; 3 :
31059: LD_ADDR_OWVAR 42
31063: PUSH
31064: LD_INT 1
31066: ST_TO_ADDR
31067: GO 31662
31069: LD_INT 3
31071: DOUBLE
31072: EQUAL
31073: IFTRUE 31077
31075: GO 31088
31077: POP
// bc_type := b_lab ; 4 .. 9 :
31078: LD_ADDR_OWVAR 42
31082: PUSH
31083: LD_INT 6
31085: ST_TO_ADDR
31086: GO 31662
31088: LD_INT 4
31090: DOUBLE
31091: GREATEREQUAL
31092: IFFALSE 31100
31094: LD_INT 9
31096: DOUBLE
31097: LESSEQUAL
31098: IFTRUE 31102
31100: GO 31154
31102: POP
// begin bc_type := b_lab_half ;
31103: LD_ADDR_OWVAR 42
31107: PUSH
31108: LD_INT 7
31110: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31111: LD_ADDR_OWVAR 44
31115: PUSH
31116: LD_INT 10
31118: PUSH
31119: LD_INT 11
31121: PUSH
31122: LD_INT 12
31124: PUSH
31125: LD_INT 15
31127: PUSH
31128: LD_INT 14
31130: PUSH
31131: LD_INT 13
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: PUSH
31142: LD_VAR 0 2
31146: PUSH
31147: LD_INT 3
31149: MINUS
31150: ARRAY
31151: ST_TO_ADDR
// end ; 10 .. 13 :
31152: GO 31662
31154: LD_INT 10
31156: DOUBLE
31157: GREATEREQUAL
31158: IFFALSE 31166
31160: LD_INT 13
31162: DOUBLE
31163: LESSEQUAL
31164: IFTRUE 31168
31166: GO 31245
31168: POP
// begin bc_type := b_lab_full ;
31169: LD_ADDR_OWVAR 42
31173: PUSH
31174: LD_INT 8
31176: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31177: LD_ADDR_OWVAR 44
31181: PUSH
31182: LD_INT 10
31184: PUSH
31185: LD_INT 12
31187: PUSH
31188: LD_INT 14
31190: PUSH
31191: LD_INT 13
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: PUSH
31200: LD_VAR 0 2
31204: PUSH
31205: LD_INT 9
31207: MINUS
31208: ARRAY
31209: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31210: LD_ADDR_OWVAR 45
31214: PUSH
31215: LD_INT 11
31217: PUSH
31218: LD_INT 15
31220: PUSH
31221: LD_INT 12
31223: PUSH
31224: LD_INT 15
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: PUSH
31233: LD_VAR 0 2
31237: PUSH
31238: LD_INT 9
31240: MINUS
31241: ARRAY
31242: ST_TO_ADDR
// end ; 14 :
31243: GO 31662
31245: LD_INT 14
31247: DOUBLE
31248: EQUAL
31249: IFTRUE 31253
31251: GO 31264
31253: POP
// bc_type := b_workshop ; 15 :
31254: LD_ADDR_OWVAR 42
31258: PUSH
31259: LD_INT 2
31261: ST_TO_ADDR
31262: GO 31662
31264: LD_INT 15
31266: DOUBLE
31267: EQUAL
31268: IFTRUE 31272
31270: GO 31283
31272: POP
// bc_type := b_factory ; 16 :
31273: LD_ADDR_OWVAR 42
31277: PUSH
31278: LD_INT 3
31280: ST_TO_ADDR
31281: GO 31662
31283: LD_INT 16
31285: DOUBLE
31286: EQUAL
31287: IFTRUE 31291
31289: GO 31302
31291: POP
// bc_type := b_ext_gun ; 17 :
31292: LD_ADDR_OWVAR 42
31296: PUSH
31297: LD_INT 17
31299: ST_TO_ADDR
31300: GO 31662
31302: LD_INT 17
31304: DOUBLE
31305: EQUAL
31306: IFTRUE 31310
31308: GO 31338
31310: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31311: LD_ADDR_OWVAR 42
31315: PUSH
31316: LD_INT 19
31318: PUSH
31319: LD_INT 23
31321: PUSH
31322: LD_INT 19
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: LIST
31329: PUSH
31330: LD_VAR 0 1
31334: ARRAY
31335: ST_TO_ADDR
31336: GO 31662
31338: LD_INT 18
31340: DOUBLE
31341: EQUAL
31342: IFTRUE 31346
31344: GO 31357
31346: POP
// bc_type := b_ext_radar ; 19 :
31347: LD_ADDR_OWVAR 42
31351: PUSH
31352: LD_INT 20
31354: ST_TO_ADDR
31355: GO 31662
31357: LD_INT 19
31359: DOUBLE
31360: EQUAL
31361: IFTRUE 31365
31363: GO 31376
31365: POP
// bc_type := b_ext_radio ; 20 :
31366: LD_ADDR_OWVAR 42
31370: PUSH
31371: LD_INT 22
31373: ST_TO_ADDR
31374: GO 31662
31376: LD_INT 20
31378: DOUBLE
31379: EQUAL
31380: IFTRUE 31384
31382: GO 31395
31384: POP
// bc_type := b_ext_siberium ; 21 :
31385: LD_ADDR_OWVAR 42
31389: PUSH
31390: LD_INT 21
31392: ST_TO_ADDR
31393: GO 31662
31395: LD_INT 21
31397: DOUBLE
31398: EQUAL
31399: IFTRUE 31403
31401: GO 31414
31403: POP
// bc_type := b_ext_computer ; 22 :
31404: LD_ADDR_OWVAR 42
31408: PUSH
31409: LD_INT 24
31411: ST_TO_ADDR
31412: GO 31662
31414: LD_INT 22
31416: DOUBLE
31417: EQUAL
31418: IFTRUE 31422
31420: GO 31433
31422: POP
// bc_type := b_ext_track ; 23 :
31423: LD_ADDR_OWVAR 42
31427: PUSH
31428: LD_INT 16
31430: ST_TO_ADDR
31431: GO 31662
31433: LD_INT 23
31435: DOUBLE
31436: EQUAL
31437: IFTRUE 31441
31439: GO 31452
31441: POP
// bc_type := b_ext_laser ; 24 :
31442: LD_ADDR_OWVAR 42
31446: PUSH
31447: LD_INT 25
31449: ST_TO_ADDR
31450: GO 31662
31452: LD_INT 24
31454: DOUBLE
31455: EQUAL
31456: IFTRUE 31460
31458: GO 31471
31460: POP
// bc_type := b_control_tower ; 25 :
31461: LD_ADDR_OWVAR 42
31465: PUSH
31466: LD_INT 36
31468: ST_TO_ADDR
31469: GO 31662
31471: LD_INT 25
31473: DOUBLE
31474: EQUAL
31475: IFTRUE 31479
31477: GO 31490
31479: POP
// bc_type := b_breastwork ; 26 :
31480: LD_ADDR_OWVAR 42
31484: PUSH
31485: LD_INT 31
31487: ST_TO_ADDR
31488: GO 31662
31490: LD_INT 26
31492: DOUBLE
31493: EQUAL
31494: IFTRUE 31498
31496: GO 31509
31498: POP
// bc_type := b_bunker ; 27 :
31499: LD_ADDR_OWVAR 42
31503: PUSH
31504: LD_INT 32
31506: ST_TO_ADDR
31507: GO 31662
31509: LD_INT 27
31511: DOUBLE
31512: EQUAL
31513: IFTRUE 31517
31515: GO 31528
31517: POP
// bc_type := b_turret ; 28 :
31518: LD_ADDR_OWVAR 42
31522: PUSH
31523: LD_INT 33
31525: ST_TO_ADDR
31526: GO 31662
31528: LD_INT 28
31530: DOUBLE
31531: EQUAL
31532: IFTRUE 31536
31534: GO 31547
31536: POP
// bc_type := b_armoury ; 29 :
31537: LD_ADDR_OWVAR 42
31541: PUSH
31542: LD_INT 4
31544: ST_TO_ADDR
31545: GO 31662
31547: LD_INT 29
31549: DOUBLE
31550: EQUAL
31551: IFTRUE 31555
31553: GO 31566
31555: POP
// bc_type := b_barracks ; 30 :
31556: LD_ADDR_OWVAR 42
31560: PUSH
31561: LD_INT 5
31563: ST_TO_ADDR
31564: GO 31662
31566: LD_INT 30
31568: DOUBLE
31569: EQUAL
31570: IFTRUE 31574
31572: GO 31585
31574: POP
// bc_type := b_solar_power ; 31 :
31575: LD_ADDR_OWVAR 42
31579: PUSH
31580: LD_INT 27
31582: ST_TO_ADDR
31583: GO 31662
31585: LD_INT 31
31587: DOUBLE
31588: EQUAL
31589: IFTRUE 31593
31591: GO 31604
31593: POP
// bc_type := b_oil_power ; 32 :
31594: LD_ADDR_OWVAR 42
31598: PUSH
31599: LD_INT 26
31601: ST_TO_ADDR
31602: GO 31662
31604: LD_INT 32
31606: DOUBLE
31607: EQUAL
31608: IFTRUE 31612
31610: GO 31623
31612: POP
// bc_type := b_siberite_power ; 33 :
31613: LD_ADDR_OWVAR 42
31617: PUSH
31618: LD_INT 28
31620: ST_TO_ADDR
31621: GO 31662
31623: LD_INT 33
31625: DOUBLE
31626: EQUAL
31627: IFTRUE 31631
31629: GO 31642
31631: POP
// bc_type := b_oil_mine ; 34 :
31632: LD_ADDR_OWVAR 42
31636: PUSH
31637: LD_INT 29
31639: ST_TO_ADDR
31640: GO 31662
31642: LD_INT 34
31644: DOUBLE
31645: EQUAL
31646: IFTRUE 31650
31648: GO 31661
31650: POP
// bc_type := b_siberite_mine ; end ;
31651: LD_ADDR_OWVAR 42
31655: PUSH
31656: LD_INT 30
31658: ST_TO_ADDR
31659: GO 31662
31661: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31662: LD_ADDR_VAR 0 8
31666: PUSH
31667: LD_VAR 0 5
31671: PPUSH
31672: LD_VAR 0 6
31676: PPUSH
31677: LD_VAR 0 3
31681: PPUSH
31682: CALL_OW 47
31686: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31687: LD_OWVAR 42
31691: PUSH
31692: LD_INT 32
31694: PUSH
31695: LD_INT 33
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: IN
31702: IFFALSE 31718
// PlaceWeaponTurret ( b , weapon ) ;
31704: LD_VAR 0 8
31708: PPUSH
31709: LD_VAR 0 4
31713: PPUSH
31714: CALL_OW 431
// end ;
31718: LD_VAR 0 7
31722: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31723: LD_INT 0
31725: PPUSH
31726: PPUSH
31727: PPUSH
31728: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31729: LD_ADDR_VAR 0 4
31733: PUSH
31734: LD_INT 22
31736: PUSH
31737: LD_OWVAR 2
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: LD_INT 30
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 30
31761: PUSH
31762: LD_INT 1
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: LIST
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PPUSH
31778: CALL_OW 69
31782: ST_TO_ADDR
// if not tmp then
31783: LD_VAR 0 4
31787: NOT
31788: IFFALSE 31792
// exit ;
31790: GO 31851
// for i in tmp do
31792: LD_ADDR_VAR 0 2
31796: PUSH
31797: LD_VAR 0 4
31801: PUSH
31802: FOR_IN
31803: IFFALSE 31849
// for j = 1 to 3 do
31805: LD_ADDR_VAR 0 3
31809: PUSH
31810: DOUBLE
31811: LD_INT 1
31813: DEC
31814: ST_TO_ADDR
31815: LD_INT 3
31817: PUSH
31818: FOR_TO
31819: IFFALSE 31845
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31821: LD_VAR 0 2
31825: PPUSH
31826: CALL_OW 274
31830: PPUSH
31831: LD_VAR 0 3
31835: PPUSH
31836: LD_INT 99999
31838: PPUSH
31839: CALL_OW 277
31843: GO 31818
31845: POP
31846: POP
31847: GO 31802
31849: POP
31850: POP
// end ;
31851: LD_VAR 0 1
31855: RET
// export function hHackSetLevel10 ; var i , j ; begin
31856: LD_INT 0
31858: PPUSH
31859: PPUSH
31860: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31861: LD_ADDR_VAR 0 2
31865: PUSH
31866: LD_INT 21
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PPUSH
31876: CALL_OW 69
31880: PUSH
31881: FOR_IN
31882: IFFALSE 31934
// if IsSelected ( i ) then
31884: LD_VAR 0 2
31888: PPUSH
31889: CALL_OW 306
31893: IFFALSE 31932
// begin for j := 1 to 4 do
31895: LD_ADDR_VAR 0 3
31899: PUSH
31900: DOUBLE
31901: LD_INT 1
31903: DEC
31904: ST_TO_ADDR
31905: LD_INT 4
31907: PUSH
31908: FOR_TO
31909: IFFALSE 31930
// SetSkill ( i , j , 10 ) ;
31911: LD_VAR 0 2
31915: PPUSH
31916: LD_VAR 0 3
31920: PPUSH
31921: LD_INT 10
31923: PPUSH
31924: CALL_OW 237
31928: GO 31908
31930: POP
31931: POP
// end ;
31932: GO 31881
31934: POP
31935: POP
// end ;
31936: LD_VAR 0 1
31940: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31941: LD_INT 0
31943: PPUSH
31944: PPUSH
31945: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31946: LD_ADDR_VAR 0 2
31950: PUSH
31951: LD_INT 22
31953: PUSH
31954: LD_OWVAR 2
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 21
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PPUSH
31977: CALL_OW 69
31981: PUSH
31982: FOR_IN
31983: IFFALSE 32024
// begin for j := 1 to 4 do
31985: LD_ADDR_VAR 0 3
31989: PUSH
31990: DOUBLE
31991: LD_INT 1
31993: DEC
31994: ST_TO_ADDR
31995: LD_INT 4
31997: PUSH
31998: FOR_TO
31999: IFFALSE 32020
// SetSkill ( i , j , 10 ) ;
32001: LD_VAR 0 2
32005: PPUSH
32006: LD_VAR 0 3
32010: PPUSH
32011: LD_INT 10
32013: PPUSH
32014: CALL_OW 237
32018: GO 31998
32020: POP
32021: POP
// end ;
32022: GO 31982
32024: POP
32025: POP
// end ;
32026: LD_VAR 0 1
32030: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32031: LD_INT 0
32033: PPUSH
// uc_side := your_side ;
32034: LD_ADDR_OWVAR 20
32038: PUSH
32039: LD_OWVAR 2
32043: ST_TO_ADDR
// uc_nation := nation ;
32044: LD_ADDR_OWVAR 21
32048: PUSH
32049: LD_VAR 0 1
32053: ST_TO_ADDR
// InitHc ;
32054: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32058: LD_INT 0
32060: PPUSH
32061: LD_VAR 0 2
32065: PPUSH
32066: LD_VAR 0 3
32070: PPUSH
32071: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32075: LD_VAR 0 4
32079: PPUSH
32080: LD_VAR 0 5
32084: PPUSH
32085: CALL_OW 428
32089: PUSH
32090: LD_INT 0
32092: EQUAL
32093: IFFALSE 32117
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32095: CALL_OW 44
32099: PPUSH
32100: LD_VAR 0 4
32104: PPUSH
32105: LD_VAR 0 5
32109: PPUSH
32110: LD_INT 1
32112: PPUSH
32113: CALL_OW 48
// end ;
32117: LD_VAR 0 6
32121: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32122: LD_INT 0
32124: PPUSH
32125: PPUSH
// uc_side := your_side ;
32126: LD_ADDR_OWVAR 20
32130: PUSH
32131: LD_OWVAR 2
32135: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32136: LD_VAR 0 1
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: LD_INT 2
32146: PUSH
32147: LD_INT 3
32149: PUSH
32150: LD_INT 4
32152: PUSH
32153: LD_INT 5
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: IN
32163: IFFALSE 32175
// uc_nation := nation_american else
32165: LD_ADDR_OWVAR 21
32169: PUSH
32170: LD_INT 1
32172: ST_TO_ADDR
32173: GO 32218
// if chassis in [ 11 , 12 , 13 , 14 ] then
32175: LD_VAR 0 1
32179: PUSH
32180: LD_INT 11
32182: PUSH
32183: LD_INT 12
32185: PUSH
32186: LD_INT 13
32188: PUSH
32189: LD_INT 14
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: IN
32198: IFFALSE 32210
// uc_nation := nation_arabian else
32200: LD_ADDR_OWVAR 21
32204: PUSH
32205: LD_INT 2
32207: ST_TO_ADDR
32208: GO 32218
// uc_nation := nation_russian ;
32210: LD_ADDR_OWVAR 21
32214: PUSH
32215: LD_INT 3
32217: ST_TO_ADDR
// vc_chassis := chassis ;
32218: LD_ADDR_OWVAR 37
32222: PUSH
32223: LD_VAR 0 1
32227: ST_TO_ADDR
// vc_engine := engine ;
32228: LD_ADDR_OWVAR 39
32232: PUSH
32233: LD_VAR 0 2
32237: ST_TO_ADDR
// vc_control := control ;
32238: LD_ADDR_OWVAR 38
32242: PUSH
32243: LD_VAR 0 3
32247: ST_TO_ADDR
// vc_weapon := weapon ;
32248: LD_ADDR_OWVAR 40
32252: PUSH
32253: LD_VAR 0 4
32257: ST_TO_ADDR
// un := CreateVehicle ;
32258: LD_ADDR_VAR 0 8
32262: PUSH
32263: CALL_OW 45
32267: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32268: LD_VAR 0 8
32272: PPUSH
32273: LD_INT 0
32275: PPUSH
32276: LD_INT 5
32278: PPUSH
32279: CALL_OW 12
32283: PPUSH
32284: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32288: LD_VAR 0 8
32292: PPUSH
32293: LD_VAR 0 5
32297: PPUSH
32298: LD_VAR 0 6
32302: PPUSH
32303: LD_INT 1
32305: PPUSH
32306: CALL_OW 48
// end ;
32310: LD_VAR 0 7
32314: RET
// export hInvincible ; every 1 do
32315: GO 32317
32317: DISABLE
// hInvincible := [ ] ;
32318: LD_ADDR_EXP 121
32322: PUSH
32323: EMPTY
32324: ST_TO_ADDR
32325: END
// every 10 do var i ;
32326: GO 32328
32328: DISABLE
32329: LD_INT 0
32331: PPUSH
// begin enable ;
32332: ENABLE
// if not hInvincible then
32333: LD_EXP 121
32337: NOT
32338: IFFALSE 32342
// exit ;
32340: GO 32386
// for i in hInvincible do
32342: LD_ADDR_VAR 0 1
32346: PUSH
32347: LD_EXP 121
32351: PUSH
32352: FOR_IN
32353: IFFALSE 32384
// if GetLives ( i ) < 1000 then
32355: LD_VAR 0 1
32359: PPUSH
32360: CALL_OW 256
32364: PUSH
32365: LD_INT 1000
32367: LESS
32368: IFFALSE 32382
// SetLives ( i , 1000 ) ;
32370: LD_VAR 0 1
32374: PPUSH
32375: LD_INT 1000
32377: PPUSH
32378: CALL_OW 234
32382: GO 32352
32384: POP
32385: POP
// end ;
32386: PPOPN 1
32388: END
// export function hHackInvincible ; var i ; begin
32389: LD_INT 0
32391: PPUSH
32392: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32393: LD_ADDR_VAR 0 2
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: LD_INT 21
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 21
32413: PUSH
32414: LD_INT 2
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: LIST
32425: PPUSH
32426: CALL_OW 69
32430: PUSH
32431: FOR_IN
32432: IFFALSE 32493
// if IsSelected ( i ) then
32434: LD_VAR 0 2
32438: PPUSH
32439: CALL_OW 306
32443: IFFALSE 32491
// begin if i in hInvincible then
32445: LD_VAR 0 2
32449: PUSH
32450: LD_EXP 121
32454: IN
32455: IFFALSE 32475
// hInvincible := hInvincible diff i else
32457: LD_ADDR_EXP 121
32461: PUSH
32462: LD_EXP 121
32466: PUSH
32467: LD_VAR 0 2
32471: DIFF
32472: ST_TO_ADDR
32473: GO 32491
// hInvincible := hInvincible union i ;
32475: LD_ADDR_EXP 121
32479: PUSH
32480: LD_EXP 121
32484: PUSH
32485: LD_VAR 0 2
32489: UNION
32490: ST_TO_ADDR
// end ;
32491: GO 32431
32493: POP
32494: POP
// end ;
32495: LD_VAR 0 1
32499: RET
// export function hHackInvisible ; var i , j ; begin
32500: LD_INT 0
32502: PPUSH
32503: PPUSH
32504: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32505: LD_ADDR_VAR 0 2
32509: PUSH
32510: LD_INT 21
32512: PUSH
32513: LD_INT 1
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PPUSH
32520: CALL_OW 69
32524: PUSH
32525: FOR_IN
32526: IFFALSE 32550
// if IsSelected ( i ) then
32528: LD_VAR 0 2
32532: PPUSH
32533: CALL_OW 306
32537: IFFALSE 32548
// ComForceInvisible ( i ) ;
32539: LD_VAR 0 2
32543: PPUSH
32544: CALL_OW 496
32548: GO 32525
32550: POP
32551: POP
// end ;
32552: LD_VAR 0 1
32556: RET
// export function hHackChangeYourSide ; begin
32557: LD_INT 0
32559: PPUSH
// if your_side = 8 then
32560: LD_OWVAR 2
32564: PUSH
32565: LD_INT 8
32567: EQUAL
32568: IFFALSE 32580
// your_side := 0 else
32570: LD_ADDR_OWVAR 2
32574: PUSH
32575: LD_INT 0
32577: ST_TO_ADDR
32578: GO 32594
// your_side := your_side + 1 ;
32580: LD_ADDR_OWVAR 2
32584: PUSH
32585: LD_OWVAR 2
32589: PUSH
32590: LD_INT 1
32592: PLUS
32593: ST_TO_ADDR
// end ;
32594: LD_VAR 0 1
32598: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32599: LD_INT 0
32601: PPUSH
32602: PPUSH
32603: PPUSH
// for i in all_units do
32604: LD_ADDR_VAR 0 2
32608: PUSH
32609: LD_OWVAR 3
32613: PUSH
32614: FOR_IN
32615: IFFALSE 32693
// if IsSelected ( i ) then
32617: LD_VAR 0 2
32621: PPUSH
32622: CALL_OW 306
32626: IFFALSE 32691
// begin j := GetSide ( i ) ;
32628: LD_ADDR_VAR 0 3
32632: PUSH
32633: LD_VAR 0 2
32637: PPUSH
32638: CALL_OW 255
32642: ST_TO_ADDR
// if j = 8 then
32643: LD_VAR 0 3
32647: PUSH
32648: LD_INT 8
32650: EQUAL
32651: IFFALSE 32663
// j := 0 else
32653: LD_ADDR_VAR 0 3
32657: PUSH
32658: LD_INT 0
32660: ST_TO_ADDR
32661: GO 32677
// j := j + 1 ;
32663: LD_ADDR_VAR 0 3
32667: PUSH
32668: LD_VAR 0 3
32672: PUSH
32673: LD_INT 1
32675: PLUS
32676: ST_TO_ADDR
// SetSide ( i , j ) ;
32677: LD_VAR 0 2
32681: PPUSH
32682: LD_VAR 0 3
32686: PPUSH
32687: CALL_OW 235
// end ;
32691: GO 32614
32693: POP
32694: POP
// end ;
32695: LD_VAR 0 1
32699: RET
// export function hHackFog ; begin
32700: LD_INT 0
32702: PPUSH
// FogOff ( true ) ;
32703: LD_INT 1
32705: PPUSH
32706: CALL_OW 344
// end ;
32710: LD_VAR 0 1
32714: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32715: LD_INT 0
32717: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32718: LD_VAR 0 1
32722: PPUSH
32723: LD_VAR 0 2
32727: PPUSH
32728: LD_VAR 0 3
32732: PPUSH
32733: LD_INT 1
32735: PPUSH
32736: LD_INT 1
32738: PPUSH
32739: CALL_OW 483
// CenterOnXY ( x , y ) ;
32743: LD_VAR 0 2
32747: PPUSH
32748: LD_VAR 0 3
32752: PPUSH
32753: CALL_OW 84
// end ; end_of_file
32757: LD_VAR 0 4
32761: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32762: LD_INT 0
32764: PPUSH
32765: PPUSH
32766: PPUSH
32767: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32768: LD_VAR 0 1
32772: PPUSH
32773: CALL_OW 264
32777: PUSH
32778: LD_EXP 52
32782: EQUAL
32783: IFFALSE 32855
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32785: LD_INT 68
32787: PPUSH
32788: LD_VAR 0 1
32792: PPUSH
32793: CALL_OW 255
32797: PPUSH
32798: CALL_OW 321
32802: PUSH
32803: LD_INT 2
32805: EQUAL
32806: IFFALSE 32818
// eff := 70 else
32808: LD_ADDR_VAR 0 4
32812: PUSH
32813: LD_INT 70
32815: ST_TO_ADDR
32816: GO 32826
// eff := 30 ;
32818: LD_ADDR_VAR 0 4
32822: PUSH
32823: LD_INT 30
32825: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32826: LD_VAR 0 1
32830: PPUSH
32831: CALL_OW 250
32835: PPUSH
32836: LD_VAR 0 1
32840: PPUSH
32841: CALL_OW 251
32845: PPUSH
32846: LD_VAR 0 4
32850: PPUSH
32851: CALL_OW 495
// end ; end ;
32855: LD_VAR 0 2
32859: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32860: LD_INT 0
32862: PPUSH
// end ;
32863: LD_VAR 0 4
32867: RET
// export function SOS_Command ( cmd ) ; begin
32868: LD_INT 0
32870: PPUSH
// end ;
32871: LD_VAR 0 2
32875: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32876: LD_INT 0
32878: PPUSH
// if cmd = 121 then
32879: LD_VAR 0 1
32883: PUSH
32884: LD_INT 121
32886: EQUAL
32887: IFFALSE 32889
// end ;
32889: LD_VAR 0 6
32893: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32894: LD_INT 0
32896: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32897: LD_VAR 0 1
32901: PUSH
32902: LD_INT 250
32904: EQUAL
32905: PUSH
32906: LD_VAR 0 2
32910: PPUSH
32911: CALL_OW 264
32915: PUSH
32916: LD_EXP 55
32920: EQUAL
32921: AND
32922: IFFALSE 32943
// MinerPlaceMine ( unit , x , y ) ;
32924: LD_VAR 0 2
32928: PPUSH
32929: LD_VAR 0 4
32933: PPUSH
32934: LD_VAR 0 5
32938: PPUSH
32939: CALL 35292 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32943: LD_VAR 0 1
32947: PUSH
32948: LD_INT 251
32950: EQUAL
32951: PUSH
32952: LD_VAR 0 2
32956: PPUSH
32957: CALL_OW 264
32961: PUSH
32962: LD_EXP 55
32966: EQUAL
32967: AND
32968: IFFALSE 32989
// MinerDetonateMine ( unit , x , y ) ;
32970: LD_VAR 0 2
32974: PPUSH
32975: LD_VAR 0 4
32979: PPUSH
32980: LD_VAR 0 5
32984: PPUSH
32985: CALL 35569 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32989: LD_VAR 0 1
32993: PUSH
32994: LD_INT 252
32996: EQUAL
32997: PUSH
32998: LD_VAR 0 2
33002: PPUSH
33003: CALL_OW 264
33007: PUSH
33008: LD_EXP 55
33012: EQUAL
33013: AND
33014: IFFALSE 33035
// MinerCreateMinefield ( unit , x , y ) ;
33016: LD_VAR 0 2
33020: PPUSH
33021: LD_VAR 0 4
33025: PPUSH
33026: LD_VAR 0 5
33030: PPUSH
33031: CALL 35986 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33035: LD_VAR 0 1
33039: PUSH
33040: LD_INT 253
33042: EQUAL
33043: PUSH
33044: LD_VAR 0 2
33048: PPUSH
33049: CALL_OW 257
33053: PUSH
33054: LD_INT 5
33056: EQUAL
33057: AND
33058: IFFALSE 33079
// ComBinocular ( unit , x , y ) ;
33060: LD_VAR 0 2
33064: PPUSH
33065: LD_VAR 0 4
33069: PPUSH
33070: LD_VAR 0 5
33074: PPUSH
33075: CALL 36357 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33079: LD_VAR 0 1
33083: PUSH
33084: LD_INT 254
33086: EQUAL
33087: PUSH
33088: LD_VAR 0 2
33092: PPUSH
33093: CALL_OW 264
33097: PUSH
33098: LD_EXP 50
33102: EQUAL
33103: AND
33104: PUSH
33105: LD_VAR 0 3
33109: PPUSH
33110: CALL_OW 263
33114: PUSH
33115: LD_INT 3
33117: EQUAL
33118: AND
33119: IFFALSE 33135
// HackDestroyVehicle ( unit , selectedUnit ) ;
33121: LD_VAR 0 2
33125: PPUSH
33126: LD_VAR 0 3
33130: PPUSH
33131: CALL 34652 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33135: LD_VAR 0 1
33139: PUSH
33140: LD_INT 255
33142: EQUAL
33143: PUSH
33144: LD_VAR 0 2
33148: PPUSH
33149: CALL_OW 264
33153: PUSH
33154: LD_INT 14
33156: PUSH
33157: LD_INT 53
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: IN
33164: AND
33165: PUSH
33166: LD_VAR 0 4
33170: PPUSH
33171: LD_VAR 0 5
33175: PPUSH
33176: CALL_OW 488
33180: AND
33181: IFFALSE 33205
// CutTreeXYR ( unit , x , y , 12 ) ;
33183: LD_VAR 0 2
33187: PPUSH
33188: LD_VAR 0 4
33192: PPUSH
33193: LD_VAR 0 5
33197: PPUSH
33198: LD_INT 12
33200: PPUSH
33201: CALL 33218 0 4
// end ;
33205: LD_VAR 0 6
33209: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33210: LD_INT 0
33212: PPUSH
// end ;
33213: LD_VAR 0 4
33217: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33218: LD_INT 0
33220: PPUSH
33221: PPUSH
33222: PPUSH
33223: PPUSH
33224: PPUSH
33225: PPUSH
33226: PPUSH
33227: PPUSH
33228: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33229: LD_VAR 0 1
33233: NOT
33234: PUSH
33235: LD_VAR 0 2
33239: PPUSH
33240: LD_VAR 0 3
33244: PPUSH
33245: CALL_OW 488
33249: NOT
33250: OR
33251: PUSH
33252: LD_VAR 0 4
33256: NOT
33257: OR
33258: IFFALSE 33262
// exit ;
33260: GO 33602
// list := [ ] ;
33262: LD_ADDR_VAR 0 13
33266: PUSH
33267: EMPTY
33268: ST_TO_ADDR
// if x - r < 0 then
33269: LD_VAR 0 2
33273: PUSH
33274: LD_VAR 0 4
33278: MINUS
33279: PUSH
33280: LD_INT 0
33282: LESS
33283: IFFALSE 33295
// min_x := 0 else
33285: LD_ADDR_VAR 0 7
33289: PUSH
33290: LD_INT 0
33292: ST_TO_ADDR
33293: GO 33311
// min_x := x - r ;
33295: LD_ADDR_VAR 0 7
33299: PUSH
33300: LD_VAR 0 2
33304: PUSH
33305: LD_VAR 0 4
33309: MINUS
33310: ST_TO_ADDR
// if y - r < 0 then
33311: LD_VAR 0 3
33315: PUSH
33316: LD_VAR 0 4
33320: MINUS
33321: PUSH
33322: LD_INT 0
33324: LESS
33325: IFFALSE 33337
// min_y := 0 else
33327: LD_ADDR_VAR 0 8
33331: PUSH
33332: LD_INT 0
33334: ST_TO_ADDR
33335: GO 33353
// min_y := y - r ;
33337: LD_ADDR_VAR 0 8
33341: PUSH
33342: LD_VAR 0 3
33346: PUSH
33347: LD_VAR 0 4
33351: MINUS
33352: ST_TO_ADDR
// max_x := x + r ;
33353: LD_ADDR_VAR 0 9
33357: PUSH
33358: LD_VAR 0 2
33362: PUSH
33363: LD_VAR 0 4
33367: PLUS
33368: ST_TO_ADDR
// max_y := y + r ;
33369: LD_ADDR_VAR 0 10
33373: PUSH
33374: LD_VAR 0 3
33378: PUSH
33379: LD_VAR 0 4
33383: PLUS
33384: ST_TO_ADDR
// for _x = min_x to max_x do
33385: LD_ADDR_VAR 0 11
33389: PUSH
33390: DOUBLE
33391: LD_VAR 0 7
33395: DEC
33396: ST_TO_ADDR
33397: LD_VAR 0 9
33401: PUSH
33402: FOR_TO
33403: IFFALSE 33520
// for _y = min_y to max_y do
33405: LD_ADDR_VAR 0 12
33409: PUSH
33410: DOUBLE
33411: LD_VAR 0 8
33415: DEC
33416: ST_TO_ADDR
33417: LD_VAR 0 10
33421: PUSH
33422: FOR_TO
33423: IFFALSE 33516
// begin if not ValidHex ( _x , _y ) then
33425: LD_VAR 0 11
33429: PPUSH
33430: LD_VAR 0 12
33434: PPUSH
33435: CALL_OW 488
33439: NOT
33440: IFFALSE 33444
// continue ;
33442: GO 33422
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33444: LD_VAR 0 11
33448: PPUSH
33449: LD_VAR 0 12
33453: PPUSH
33454: CALL_OW 351
33458: PUSH
33459: LD_VAR 0 11
33463: PPUSH
33464: LD_VAR 0 12
33468: PPUSH
33469: CALL_OW 554
33473: AND
33474: IFFALSE 33514
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33476: LD_ADDR_VAR 0 13
33480: PUSH
33481: LD_VAR 0 13
33485: PPUSH
33486: LD_VAR 0 13
33490: PUSH
33491: LD_INT 1
33493: PLUS
33494: PPUSH
33495: LD_VAR 0 11
33499: PUSH
33500: LD_VAR 0 12
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PPUSH
33509: CALL_OW 2
33513: ST_TO_ADDR
// end ;
33514: GO 33422
33516: POP
33517: POP
33518: GO 33402
33520: POP
33521: POP
// if not list then
33522: LD_VAR 0 13
33526: NOT
33527: IFFALSE 33531
// exit ;
33529: GO 33602
// for i in list do
33531: LD_ADDR_VAR 0 6
33535: PUSH
33536: LD_VAR 0 13
33540: PUSH
33541: FOR_IN
33542: IFFALSE 33600
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33544: LD_VAR 0 1
33548: PPUSH
33549: LD_STRING M
33551: PUSH
33552: LD_VAR 0 6
33556: PUSH
33557: LD_INT 1
33559: ARRAY
33560: PUSH
33561: LD_VAR 0 6
33565: PUSH
33566: LD_INT 2
33568: ARRAY
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: PUSH
33591: EMPTY
33592: LIST
33593: PPUSH
33594: CALL_OW 447
33598: GO 33541
33600: POP
33601: POP
// end ;
33602: LD_VAR 0 5
33606: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33607: LD_EXP 124
33611: NOT
33612: IFFALSE 33662
33614: GO 33616
33616: DISABLE
// begin initHack := true ;
33617: LD_ADDR_EXP 124
33621: PUSH
33622: LD_INT 1
33624: ST_TO_ADDR
// hackTanks := [ ] ;
33625: LD_ADDR_EXP 125
33629: PUSH
33630: EMPTY
33631: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33632: LD_ADDR_EXP 126
33636: PUSH
33637: EMPTY
33638: ST_TO_ADDR
// hackLimit := 3 ;
33639: LD_ADDR_EXP 127
33643: PUSH
33644: LD_INT 3
33646: ST_TO_ADDR
// hackDist := 12 ;
33647: LD_ADDR_EXP 128
33651: PUSH
33652: LD_INT 12
33654: ST_TO_ADDR
// hackCounter := [ ] ;
33655: LD_ADDR_EXP 129
33659: PUSH
33660: EMPTY
33661: ST_TO_ADDR
// end ;
33662: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33663: LD_EXP 124
33667: PUSH
33668: LD_INT 34
33670: PUSH
33671: LD_EXP 50
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PPUSH
33680: CALL_OW 69
33684: AND
33685: IFFALSE 33940
33687: GO 33689
33689: DISABLE
33690: LD_INT 0
33692: PPUSH
33693: PPUSH
// begin enable ;
33694: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33695: LD_ADDR_VAR 0 1
33699: PUSH
33700: LD_INT 34
33702: PUSH
33703: LD_EXP 50
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PPUSH
33712: CALL_OW 69
33716: PUSH
33717: FOR_IN
33718: IFFALSE 33938
// begin if not i in hackTanks then
33720: LD_VAR 0 1
33724: PUSH
33725: LD_EXP 125
33729: IN
33730: NOT
33731: IFFALSE 33814
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33733: LD_ADDR_EXP 125
33737: PUSH
33738: LD_EXP 125
33742: PPUSH
33743: LD_EXP 125
33747: PUSH
33748: LD_INT 1
33750: PLUS
33751: PPUSH
33752: LD_VAR 0 1
33756: PPUSH
33757: CALL_OW 1
33761: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33762: LD_ADDR_EXP 126
33766: PUSH
33767: LD_EXP 126
33771: PPUSH
33772: LD_EXP 126
33776: PUSH
33777: LD_INT 1
33779: PLUS
33780: PPUSH
33781: EMPTY
33782: PPUSH
33783: CALL_OW 1
33787: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33788: LD_ADDR_EXP 129
33792: PUSH
33793: LD_EXP 129
33797: PPUSH
33798: LD_EXP 129
33802: PUSH
33803: LD_INT 1
33805: PLUS
33806: PPUSH
33807: EMPTY
33808: PPUSH
33809: CALL_OW 1
33813: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33814: LD_VAR 0 1
33818: PPUSH
33819: CALL_OW 302
33823: NOT
33824: IFFALSE 33837
// begin HackUnlinkAll ( i ) ;
33826: LD_VAR 0 1
33830: PPUSH
33831: CALL 33943 0 1
// continue ;
33835: GO 33717
// end ; HackCheckCapturedStatus ( i ) ;
33837: LD_VAR 0 1
33841: PPUSH
33842: CALL 34386 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33846: LD_ADDR_VAR 0 2
33850: PUSH
33851: LD_INT 81
33853: PUSH
33854: LD_VAR 0 1
33858: PPUSH
33859: CALL_OW 255
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 33
33870: PUSH
33871: LD_INT 3
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 91
33880: PUSH
33881: LD_VAR 0 1
33885: PUSH
33886: LD_EXP 128
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 50
33898: PUSH
33899: EMPTY
33900: LIST
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: PPUSH
33908: CALL_OW 69
33912: ST_TO_ADDR
// if not tmp then
33913: LD_VAR 0 2
33917: NOT
33918: IFFALSE 33922
// continue ;
33920: GO 33717
// HackLink ( i , tmp ) ;
33922: LD_VAR 0 1
33926: PPUSH
33927: LD_VAR 0 2
33931: PPUSH
33932: CALL 34079 0 2
// end ;
33936: GO 33717
33938: POP
33939: POP
// end ;
33940: PPOPN 2
33942: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33943: LD_INT 0
33945: PPUSH
33946: PPUSH
33947: PPUSH
// if not hack in hackTanks then
33948: LD_VAR 0 1
33952: PUSH
33953: LD_EXP 125
33957: IN
33958: NOT
33959: IFFALSE 33963
// exit ;
33961: GO 34074
// index := GetElementIndex ( hackTanks , hack ) ;
33963: LD_ADDR_VAR 0 4
33967: PUSH
33968: LD_EXP 125
33972: PPUSH
33973: LD_VAR 0 1
33977: PPUSH
33978: CALL 41548 0 2
33982: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33983: LD_EXP 126
33987: PUSH
33988: LD_VAR 0 4
33992: ARRAY
33993: IFFALSE 34074
// begin for i in hackTanksCaptured [ index ] do
33995: LD_ADDR_VAR 0 3
33999: PUSH
34000: LD_EXP 126
34004: PUSH
34005: LD_VAR 0 4
34009: ARRAY
34010: PUSH
34011: FOR_IN
34012: IFFALSE 34038
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34014: LD_VAR 0 3
34018: PUSH
34019: LD_INT 1
34021: ARRAY
34022: PPUSH
34023: LD_VAR 0 3
34027: PUSH
34028: LD_INT 2
34030: ARRAY
34031: PPUSH
34032: CALL_OW 235
34036: GO 34011
34038: POP
34039: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34040: LD_ADDR_EXP 126
34044: PUSH
34045: LD_EXP 126
34049: PPUSH
34050: LD_VAR 0 4
34054: PPUSH
34055: EMPTY
34056: PPUSH
34057: CALL_OW 1
34061: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34062: LD_VAR 0 1
34066: PPUSH
34067: LD_INT 0
34069: PPUSH
34070: CALL_OW 505
// end ; end ;
34074: LD_VAR 0 2
34078: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34079: LD_INT 0
34081: PPUSH
34082: PPUSH
34083: PPUSH
// if not hack in hackTanks or not vehicles then
34084: LD_VAR 0 1
34088: PUSH
34089: LD_EXP 125
34093: IN
34094: NOT
34095: PUSH
34096: LD_VAR 0 2
34100: NOT
34101: OR
34102: IFFALSE 34106
// exit ;
34104: GO 34381
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34106: LD_ADDR_VAR 0 2
34110: PUSH
34111: LD_VAR 0 1
34115: PPUSH
34116: LD_VAR 0 2
34120: PPUSH
34121: LD_INT 1
34123: PPUSH
34124: LD_INT 1
34126: PPUSH
34127: CALL 42198 0 4
34131: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34132: LD_ADDR_VAR 0 5
34136: PUSH
34137: LD_EXP 125
34141: PPUSH
34142: LD_VAR 0 1
34146: PPUSH
34147: CALL 41548 0 2
34151: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34152: LD_EXP 126
34156: PUSH
34157: LD_VAR 0 5
34161: ARRAY
34162: PUSH
34163: LD_EXP 127
34167: LESS
34168: IFFALSE 34357
// begin for i := 1 to vehicles do
34170: LD_ADDR_VAR 0 4
34174: PUSH
34175: DOUBLE
34176: LD_INT 1
34178: DEC
34179: ST_TO_ADDR
34180: LD_VAR 0 2
34184: PUSH
34185: FOR_TO
34186: IFFALSE 34355
// begin if hackTanksCaptured [ index ] = hackLimit then
34188: LD_EXP 126
34192: PUSH
34193: LD_VAR 0 5
34197: ARRAY
34198: PUSH
34199: LD_EXP 127
34203: EQUAL
34204: IFFALSE 34208
// break ;
34206: GO 34355
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34208: LD_ADDR_EXP 129
34212: PUSH
34213: LD_EXP 129
34217: PPUSH
34218: LD_VAR 0 5
34222: PPUSH
34223: LD_EXP 129
34227: PUSH
34228: LD_VAR 0 5
34232: ARRAY
34233: PUSH
34234: LD_INT 1
34236: PLUS
34237: PPUSH
34238: CALL_OW 1
34242: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34243: LD_ADDR_EXP 126
34247: PUSH
34248: LD_EXP 126
34252: PPUSH
34253: LD_VAR 0 5
34257: PUSH
34258: LD_EXP 126
34262: PUSH
34263: LD_VAR 0 5
34267: ARRAY
34268: PUSH
34269: LD_INT 1
34271: PLUS
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PPUSH
34277: LD_VAR 0 2
34281: PUSH
34282: LD_VAR 0 4
34286: ARRAY
34287: PUSH
34288: LD_VAR 0 2
34292: PUSH
34293: LD_VAR 0 4
34297: ARRAY
34298: PPUSH
34299: CALL_OW 255
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PPUSH
34308: CALL 41763 0 3
34312: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34313: LD_VAR 0 2
34317: PUSH
34318: LD_VAR 0 4
34322: ARRAY
34323: PPUSH
34324: LD_VAR 0 1
34328: PPUSH
34329: CALL_OW 255
34333: PPUSH
34334: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34338: LD_VAR 0 2
34342: PUSH
34343: LD_VAR 0 4
34347: ARRAY
34348: PPUSH
34349: CALL_OW 141
// end ;
34353: GO 34185
34355: POP
34356: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34357: LD_VAR 0 1
34361: PPUSH
34362: LD_EXP 126
34366: PUSH
34367: LD_VAR 0 5
34371: ARRAY
34372: PUSH
34373: LD_INT 0
34375: PLUS
34376: PPUSH
34377: CALL_OW 505
// end ;
34381: LD_VAR 0 3
34385: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34386: LD_INT 0
34388: PPUSH
34389: PPUSH
34390: PPUSH
34391: PPUSH
// if not hack in hackTanks then
34392: LD_VAR 0 1
34396: PUSH
34397: LD_EXP 125
34401: IN
34402: NOT
34403: IFFALSE 34407
// exit ;
34405: GO 34647
// index := GetElementIndex ( hackTanks , hack ) ;
34407: LD_ADDR_VAR 0 4
34411: PUSH
34412: LD_EXP 125
34416: PPUSH
34417: LD_VAR 0 1
34421: PPUSH
34422: CALL 41548 0 2
34426: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34427: LD_ADDR_VAR 0 3
34431: PUSH
34432: DOUBLE
34433: LD_EXP 126
34437: PUSH
34438: LD_VAR 0 4
34442: ARRAY
34443: INC
34444: ST_TO_ADDR
34445: LD_INT 1
34447: PUSH
34448: FOR_DOWNTO
34449: IFFALSE 34621
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34451: LD_ADDR_VAR 0 5
34455: PUSH
34456: LD_EXP 126
34460: PUSH
34461: LD_VAR 0 4
34465: ARRAY
34466: PUSH
34467: LD_VAR 0 3
34471: ARRAY
34472: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34473: LD_VAR 0 5
34477: PUSH
34478: LD_INT 1
34480: ARRAY
34481: PPUSH
34482: CALL_OW 302
34486: NOT
34487: PUSH
34488: LD_VAR 0 5
34492: PUSH
34493: LD_INT 1
34495: ARRAY
34496: PPUSH
34497: CALL_OW 255
34501: PUSH
34502: LD_VAR 0 1
34506: PPUSH
34507: CALL_OW 255
34511: NONEQUAL
34512: OR
34513: IFFALSE 34619
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34515: LD_VAR 0 5
34519: PUSH
34520: LD_INT 1
34522: ARRAY
34523: PPUSH
34524: CALL_OW 305
34528: PUSH
34529: LD_VAR 0 5
34533: PUSH
34534: LD_INT 1
34536: ARRAY
34537: PPUSH
34538: CALL_OW 255
34542: PUSH
34543: LD_VAR 0 1
34547: PPUSH
34548: CALL_OW 255
34552: EQUAL
34553: AND
34554: IFFALSE 34578
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34556: LD_VAR 0 5
34560: PUSH
34561: LD_INT 1
34563: ARRAY
34564: PPUSH
34565: LD_VAR 0 5
34569: PUSH
34570: LD_INT 2
34572: ARRAY
34573: PPUSH
34574: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34578: LD_ADDR_EXP 126
34582: PUSH
34583: LD_EXP 126
34587: PPUSH
34588: LD_VAR 0 4
34592: PPUSH
34593: LD_EXP 126
34597: PUSH
34598: LD_VAR 0 4
34602: ARRAY
34603: PPUSH
34604: LD_VAR 0 3
34608: PPUSH
34609: CALL_OW 3
34613: PPUSH
34614: CALL_OW 1
34618: ST_TO_ADDR
// end ; end ;
34619: GO 34448
34621: POP
34622: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34623: LD_VAR 0 1
34627: PPUSH
34628: LD_EXP 126
34632: PUSH
34633: LD_VAR 0 4
34637: ARRAY
34638: PUSH
34639: LD_INT 0
34641: PLUS
34642: PPUSH
34643: CALL_OW 505
// end ;
34647: LD_VAR 0 2
34651: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34652: LD_INT 0
34654: PPUSH
34655: PPUSH
34656: PPUSH
34657: PPUSH
// if not hack in hackTanks then
34658: LD_VAR 0 1
34662: PUSH
34663: LD_EXP 125
34667: IN
34668: NOT
34669: IFFALSE 34673
// exit ;
34671: GO 34758
// index := GetElementIndex ( hackTanks , hack ) ;
34673: LD_ADDR_VAR 0 5
34677: PUSH
34678: LD_EXP 125
34682: PPUSH
34683: LD_VAR 0 1
34687: PPUSH
34688: CALL 41548 0 2
34692: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34693: LD_ADDR_VAR 0 4
34697: PUSH
34698: DOUBLE
34699: LD_INT 1
34701: DEC
34702: ST_TO_ADDR
34703: LD_EXP 126
34707: PUSH
34708: LD_VAR 0 5
34712: ARRAY
34713: PUSH
34714: FOR_TO
34715: IFFALSE 34756
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34717: LD_EXP 126
34721: PUSH
34722: LD_VAR 0 5
34726: ARRAY
34727: PUSH
34728: LD_VAR 0 4
34732: ARRAY
34733: PUSH
34734: LD_INT 1
34736: ARRAY
34737: PUSH
34738: LD_VAR 0 2
34742: EQUAL
34743: IFFALSE 34754
// KillUnit ( vehicle ) ;
34745: LD_VAR 0 2
34749: PPUSH
34750: CALL_OW 66
34754: GO 34714
34756: POP
34757: POP
// end ;
34758: LD_VAR 0 3
34762: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34763: LD_EXP 130
34767: NOT
34768: IFFALSE 34803
34770: GO 34772
34772: DISABLE
// begin initMiner := true ;
34773: LD_ADDR_EXP 130
34777: PUSH
34778: LD_INT 1
34780: ST_TO_ADDR
// minersList := [ ] ;
34781: LD_ADDR_EXP 131
34785: PUSH
34786: EMPTY
34787: ST_TO_ADDR
// minerMinesList := [ ] ;
34788: LD_ADDR_EXP 132
34792: PUSH
34793: EMPTY
34794: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34795: LD_ADDR_EXP 133
34799: PUSH
34800: LD_INT 5
34802: ST_TO_ADDR
// end ;
34803: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34804: LD_EXP 130
34808: PUSH
34809: LD_INT 34
34811: PUSH
34812: LD_EXP 55
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PPUSH
34821: CALL_OW 69
34825: AND
34826: IFFALSE 35289
34828: GO 34830
34830: DISABLE
34831: LD_INT 0
34833: PPUSH
34834: PPUSH
34835: PPUSH
34836: PPUSH
// begin enable ;
34837: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34838: LD_ADDR_VAR 0 1
34842: PUSH
34843: LD_INT 34
34845: PUSH
34846: LD_EXP 55
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PPUSH
34855: CALL_OW 69
34859: PUSH
34860: FOR_IN
34861: IFFALSE 34933
// begin if not i in minersList then
34863: LD_VAR 0 1
34867: PUSH
34868: LD_EXP 131
34872: IN
34873: NOT
34874: IFFALSE 34931
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34876: LD_ADDR_EXP 131
34880: PUSH
34881: LD_EXP 131
34885: PPUSH
34886: LD_EXP 131
34890: PUSH
34891: LD_INT 1
34893: PLUS
34894: PPUSH
34895: LD_VAR 0 1
34899: PPUSH
34900: CALL_OW 1
34904: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34905: LD_ADDR_EXP 132
34909: PUSH
34910: LD_EXP 132
34914: PPUSH
34915: LD_EXP 132
34919: PUSH
34920: LD_INT 1
34922: PLUS
34923: PPUSH
34924: EMPTY
34925: PPUSH
34926: CALL_OW 1
34930: ST_TO_ADDR
// end end ;
34931: GO 34860
34933: POP
34934: POP
// for i := minerMinesList downto 1 do
34935: LD_ADDR_VAR 0 1
34939: PUSH
34940: DOUBLE
34941: LD_EXP 132
34945: INC
34946: ST_TO_ADDR
34947: LD_INT 1
34949: PUSH
34950: FOR_DOWNTO
34951: IFFALSE 35287
// begin if IsLive ( minersList [ i ] ) then
34953: LD_EXP 131
34957: PUSH
34958: LD_VAR 0 1
34962: ARRAY
34963: PPUSH
34964: CALL_OW 300
34968: IFFALSE 34996
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34970: LD_EXP 131
34974: PUSH
34975: LD_VAR 0 1
34979: ARRAY
34980: PPUSH
34981: LD_EXP 132
34985: PUSH
34986: LD_VAR 0 1
34990: ARRAY
34991: PPUSH
34992: CALL_OW 505
// if not minerMinesList [ i ] then
34996: LD_EXP 132
35000: PUSH
35001: LD_VAR 0 1
35005: ARRAY
35006: NOT
35007: IFFALSE 35011
// continue ;
35009: GO 34950
// for j := minerMinesList [ i ] downto 1 do
35011: LD_ADDR_VAR 0 2
35015: PUSH
35016: DOUBLE
35017: LD_EXP 132
35021: PUSH
35022: LD_VAR 0 1
35026: ARRAY
35027: INC
35028: ST_TO_ADDR
35029: LD_INT 1
35031: PUSH
35032: FOR_DOWNTO
35033: IFFALSE 35283
// begin side := GetSide ( minersList [ i ] ) ;
35035: LD_ADDR_VAR 0 3
35039: PUSH
35040: LD_EXP 131
35044: PUSH
35045: LD_VAR 0 1
35049: ARRAY
35050: PPUSH
35051: CALL_OW 255
35055: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35056: LD_ADDR_VAR 0 4
35060: PUSH
35061: LD_EXP 132
35065: PUSH
35066: LD_VAR 0 1
35070: ARRAY
35071: PUSH
35072: LD_VAR 0 2
35076: ARRAY
35077: PUSH
35078: LD_INT 1
35080: ARRAY
35081: PPUSH
35082: LD_EXP 132
35086: PUSH
35087: LD_VAR 0 1
35091: ARRAY
35092: PUSH
35093: LD_VAR 0 2
35097: ARRAY
35098: PUSH
35099: LD_INT 2
35101: ARRAY
35102: PPUSH
35103: CALL_OW 428
35107: ST_TO_ADDR
// if not tmp then
35108: LD_VAR 0 4
35112: NOT
35113: IFFALSE 35117
// continue ;
35115: GO 35032
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35117: LD_VAR 0 4
35121: PUSH
35122: LD_INT 81
35124: PUSH
35125: LD_VAR 0 3
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PPUSH
35134: CALL_OW 69
35138: IN
35139: PUSH
35140: LD_EXP 132
35144: PUSH
35145: LD_VAR 0 1
35149: ARRAY
35150: PUSH
35151: LD_VAR 0 2
35155: ARRAY
35156: PUSH
35157: LD_INT 1
35159: ARRAY
35160: PPUSH
35161: LD_EXP 132
35165: PUSH
35166: LD_VAR 0 1
35170: ARRAY
35171: PUSH
35172: LD_VAR 0 2
35176: ARRAY
35177: PUSH
35178: LD_INT 2
35180: ARRAY
35181: PPUSH
35182: CALL_OW 458
35186: AND
35187: IFFALSE 35281
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35189: LD_EXP 132
35193: PUSH
35194: LD_VAR 0 1
35198: ARRAY
35199: PUSH
35200: LD_VAR 0 2
35204: ARRAY
35205: PUSH
35206: LD_INT 1
35208: ARRAY
35209: PPUSH
35210: LD_EXP 132
35214: PUSH
35215: LD_VAR 0 1
35219: ARRAY
35220: PUSH
35221: LD_VAR 0 2
35225: ARRAY
35226: PUSH
35227: LD_INT 2
35229: ARRAY
35230: PPUSH
35231: LD_VAR 0 3
35235: PPUSH
35236: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35240: LD_ADDR_EXP 132
35244: PUSH
35245: LD_EXP 132
35249: PPUSH
35250: LD_VAR 0 1
35254: PPUSH
35255: LD_EXP 132
35259: PUSH
35260: LD_VAR 0 1
35264: ARRAY
35265: PPUSH
35266: LD_VAR 0 2
35270: PPUSH
35271: CALL_OW 3
35275: PPUSH
35276: CALL_OW 1
35280: ST_TO_ADDR
// end ; end ;
35281: GO 35032
35283: POP
35284: POP
// end ;
35285: GO 34950
35287: POP
35288: POP
// end ;
35289: PPOPN 4
35291: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35292: LD_INT 0
35294: PPUSH
35295: PPUSH
// result := false ;
35296: LD_ADDR_VAR 0 4
35300: PUSH
35301: LD_INT 0
35303: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35304: LD_VAR 0 1
35308: PPUSH
35309: CALL_OW 264
35313: PUSH
35314: LD_EXP 55
35318: EQUAL
35319: NOT
35320: IFFALSE 35324
// exit ;
35322: GO 35564
// index := GetElementIndex ( minersList , unit ) ;
35324: LD_ADDR_VAR 0 5
35328: PUSH
35329: LD_EXP 131
35333: PPUSH
35334: LD_VAR 0 1
35338: PPUSH
35339: CALL 41548 0 2
35343: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35344: LD_EXP 132
35348: PUSH
35349: LD_VAR 0 5
35353: ARRAY
35354: PUSH
35355: LD_EXP 133
35359: GREATEREQUAL
35360: IFFALSE 35364
// exit ;
35362: GO 35564
// ComMoveXY ( unit , x , y ) ;
35364: LD_VAR 0 1
35368: PPUSH
35369: LD_VAR 0 2
35373: PPUSH
35374: LD_VAR 0 3
35378: PPUSH
35379: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35383: LD_INT 35
35385: PPUSH
35386: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35390: LD_VAR 0 1
35394: PPUSH
35395: LD_VAR 0 2
35399: PPUSH
35400: LD_VAR 0 3
35404: PPUSH
35405: CALL 72320 0 3
35409: NOT
35410: PUSH
35411: LD_VAR 0 1
35415: PPUSH
35416: CALL_OW 314
35420: AND
35421: IFFALSE 35425
// exit ;
35423: GO 35564
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35425: LD_VAR 0 2
35429: PPUSH
35430: LD_VAR 0 3
35434: PPUSH
35435: CALL_OW 428
35439: PUSH
35440: LD_VAR 0 1
35444: EQUAL
35445: PUSH
35446: LD_VAR 0 1
35450: PPUSH
35451: CALL_OW 314
35455: NOT
35456: AND
35457: IFFALSE 35383
// PlaySoundXY ( x , y , PlantMine ) ;
35459: LD_VAR 0 2
35463: PPUSH
35464: LD_VAR 0 3
35468: PPUSH
35469: LD_STRING PlantMine
35471: PPUSH
35472: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35476: LD_VAR 0 2
35480: PPUSH
35481: LD_VAR 0 3
35485: PPUSH
35486: LD_VAR 0 1
35490: PPUSH
35491: CALL_OW 255
35495: PPUSH
35496: LD_INT 0
35498: PPUSH
35499: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35503: LD_ADDR_EXP 132
35507: PUSH
35508: LD_EXP 132
35512: PPUSH
35513: LD_VAR 0 5
35517: PUSH
35518: LD_EXP 132
35522: PUSH
35523: LD_VAR 0 5
35527: ARRAY
35528: PUSH
35529: LD_INT 1
35531: PLUS
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PPUSH
35537: LD_VAR 0 2
35541: PUSH
35542: LD_VAR 0 3
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PPUSH
35551: CALL 41763 0 3
35555: ST_TO_ADDR
// result := true ;
35556: LD_ADDR_VAR 0 4
35560: PUSH
35561: LD_INT 1
35563: ST_TO_ADDR
// end ;
35564: LD_VAR 0 4
35568: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35569: LD_INT 0
35571: PPUSH
35572: PPUSH
35573: PPUSH
// if not unit in minersList then
35574: LD_VAR 0 1
35578: PUSH
35579: LD_EXP 131
35583: IN
35584: NOT
35585: IFFALSE 35589
// exit ;
35587: GO 35981
// index := GetElementIndex ( minersList , unit ) ;
35589: LD_ADDR_VAR 0 6
35593: PUSH
35594: LD_EXP 131
35598: PPUSH
35599: LD_VAR 0 1
35603: PPUSH
35604: CALL 41548 0 2
35608: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35609: LD_ADDR_VAR 0 5
35613: PUSH
35614: DOUBLE
35615: LD_EXP 132
35619: PUSH
35620: LD_VAR 0 6
35624: ARRAY
35625: INC
35626: ST_TO_ADDR
35627: LD_INT 1
35629: PUSH
35630: FOR_DOWNTO
35631: IFFALSE 35792
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35633: LD_EXP 132
35637: PUSH
35638: LD_VAR 0 6
35642: ARRAY
35643: PUSH
35644: LD_VAR 0 5
35648: ARRAY
35649: PUSH
35650: LD_INT 1
35652: ARRAY
35653: PUSH
35654: LD_VAR 0 2
35658: EQUAL
35659: PUSH
35660: LD_EXP 132
35664: PUSH
35665: LD_VAR 0 6
35669: ARRAY
35670: PUSH
35671: LD_VAR 0 5
35675: ARRAY
35676: PUSH
35677: LD_INT 2
35679: ARRAY
35680: PUSH
35681: LD_VAR 0 3
35685: EQUAL
35686: AND
35687: IFFALSE 35790
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35689: LD_EXP 132
35693: PUSH
35694: LD_VAR 0 6
35698: ARRAY
35699: PUSH
35700: LD_VAR 0 5
35704: ARRAY
35705: PUSH
35706: LD_INT 1
35708: ARRAY
35709: PPUSH
35710: LD_EXP 132
35714: PUSH
35715: LD_VAR 0 6
35719: ARRAY
35720: PUSH
35721: LD_VAR 0 5
35725: ARRAY
35726: PUSH
35727: LD_INT 2
35729: ARRAY
35730: PPUSH
35731: LD_VAR 0 1
35735: PPUSH
35736: CALL_OW 255
35740: PPUSH
35741: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35745: LD_ADDR_EXP 132
35749: PUSH
35750: LD_EXP 132
35754: PPUSH
35755: LD_VAR 0 6
35759: PPUSH
35760: LD_EXP 132
35764: PUSH
35765: LD_VAR 0 6
35769: ARRAY
35770: PPUSH
35771: LD_VAR 0 5
35775: PPUSH
35776: CALL_OW 3
35780: PPUSH
35781: CALL_OW 1
35785: ST_TO_ADDR
// exit ;
35786: POP
35787: POP
35788: GO 35981
// end ; end ;
35790: GO 35630
35792: POP
35793: POP
// for i := minerMinesList [ index ] downto 1 do
35794: LD_ADDR_VAR 0 5
35798: PUSH
35799: DOUBLE
35800: LD_EXP 132
35804: PUSH
35805: LD_VAR 0 6
35809: ARRAY
35810: INC
35811: ST_TO_ADDR
35812: LD_INT 1
35814: PUSH
35815: FOR_DOWNTO
35816: IFFALSE 35979
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35818: LD_EXP 132
35822: PUSH
35823: LD_VAR 0 6
35827: ARRAY
35828: PUSH
35829: LD_VAR 0 5
35833: ARRAY
35834: PUSH
35835: LD_INT 1
35837: ARRAY
35838: PPUSH
35839: LD_EXP 132
35843: PUSH
35844: LD_VAR 0 6
35848: ARRAY
35849: PUSH
35850: LD_VAR 0 5
35854: ARRAY
35855: PUSH
35856: LD_INT 2
35858: ARRAY
35859: PPUSH
35860: LD_VAR 0 2
35864: PPUSH
35865: LD_VAR 0 3
35869: PPUSH
35870: CALL_OW 298
35874: PUSH
35875: LD_INT 6
35877: LESS
35878: IFFALSE 35977
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35880: LD_EXP 132
35884: PUSH
35885: LD_VAR 0 6
35889: ARRAY
35890: PUSH
35891: LD_VAR 0 5
35895: ARRAY
35896: PUSH
35897: LD_INT 1
35899: ARRAY
35900: PPUSH
35901: LD_EXP 132
35905: PUSH
35906: LD_VAR 0 6
35910: ARRAY
35911: PUSH
35912: LD_VAR 0 5
35916: ARRAY
35917: PUSH
35918: LD_INT 2
35920: ARRAY
35921: PPUSH
35922: LD_VAR 0 1
35926: PPUSH
35927: CALL_OW 255
35931: PPUSH
35932: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35936: LD_ADDR_EXP 132
35940: PUSH
35941: LD_EXP 132
35945: PPUSH
35946: LD_VAR 0 6
35950: PPUSH
35951: LD_EXP 132
35955: PUSH
35956: LD_VAR 0 6
35960: ARRAY
35961: PPUSH
35962: LD_VAR 0 5
35966: PPUSH
35967: CALL_OW 3
35971: PPUSH
35972: CALL_OW 1
35976: ST_TO_ADDR
// end ; end ;
35977: GO 35815
35979: POP
35980: POP
// end ;
35981: LD_VAR 0 4
35985: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35986: LD_INT 0
35988: PPUSH
35989: PPUSH
35990: PPUSH
35991: PPUSH
35992: PPUSH
35993: PPUSH
35994: PPUSH
35995: PPUSH
35996: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35997: LD_VAR 0 1
36001: PPUSH
36002: CALL_OW 264
36006: PUSH
36007: LD_EXP 55
36011: EQUAL
36012: NOT
36013: PUSH
36014: LD_VAR 0 1
36018: PUSH
36019: LD_EXP 131
36023: IN
36024: NOT
36025: OR
36026: IFFALSE 36030
// exit ;
36028: GO 36352
// index := GetElementIndex ( minersList , unit ) ;
36030: LD_ADDR_VAR 0 6
36034: PUSH
36035: LD_EXP 131
36039: PPUSH
36040: LD_VAR 0 1
36044: PPUSH
36045: CALL 41548 0 2
36049: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36050: LD_ADDR_VAR 0 8
36054: PUSH
36055: LD_EXP 133
36059: PUSH
36060: LD_EXP 132
36064: PUSH
36065: LD_VAR 0 6
36069: ARRAY
36070: MINUS
36071: ST_TO_ADDR
// if not minesFreeAmount then
36072: LD_VAR 0 8
36076: NOT
36077: IFFALSE 36081
// exit ;
36079: GO 36352
// tmp := [ ] ;
36081: LD_ADDR_VAR 0 7
36085: PUSH
36086: EMPTY
36087: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36088: LD_ADDR_VAR 0 5
36092: PUSH
36093: DOUBLE
36094: LD_INT 1
36096: DEC
36097: ST_TO_ADDR
36098: LD_VAR 0 8
36102: PUSH
36103: FOR_TO
36104: IFFALSE 36299
// begin _d := rand ( 0 , 5 ) ;
36106: LD_ADDR_VAR 0 11
36110: PUSH
36111: LD_INT 0
36113: PPUSH
36114: LD_INT 5
36116: PPUSH
36117: CALL_OW 12
36121: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36122: LD_ADDR_VAR 0 12
36126: PUSH
36127: LD_INT 2
36129: PPUSH
36130: LD_INT 6
36132: PPUSH
36133: CALL_OW 12
36137: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36138: LD_ADDR_VAR 0 9
36142: PUSH
36143: LD_VAR 0 2
36147: PPUSH
36148: LD_VAR 0 11
36152: PPUSH
36153: LD_VAR 0 12
36157: PPUSH
36158: CALL_OW 272
36162: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36163: LD_ADDR_VAR 0 10
36167: PUSH
36168: LD_VAR 0 3
36172: PPUSH
36173: LD_VAR 0 11
36177: PPUSH
36178: LD_VAR 0 12
36182: PPUSH
36183: CALL_OW 273
36187: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36188: LD_VAR 0 9
36192: PPUSH
36193: LD_VAR 0 10
36197: PPUSH
36198: CALL_OW 488
36202: PUSH
36203: LD_VAR 0 9
36207: PUSH
36208: LD_VAR 0 10
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_VAR 0 7
36221: IN
36222: NOT
36223: AND
36224: PUSH
36225: LD_VAR 0 9
36229: PPUSH
36230: LD_VAR 0 10
36234: PPUSH
36235: CALL_OW 458
36239: NOT
36240: AND
36241: IFFALSE 36283
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36243: LD_ADDR_VAR 0 7
36247: PUSH
36248: LD_VAR 0 7
36252: PPUSH
36253: LD_VAR 0 7
36257: PUSH
36258: LD_INT 1
36260: PLUS
36261: PPUSH
36262: LD_VAR 0 9
36266: PUSH
36267: LD_VAR 0 10
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PPUSH
36276: CALL_OW 1
36280: ST_TO_ADDR
36281: GO 36297
// i := i - 1 ;
36283: LD_ADDR_VAR 0 5
36287: PUSH
36288: LD_VAR 0 5
36292: PUSH
36293: LD_INT 1
36295: MINUS
36296: ST_TO_ADDR
// end ;
36297: GO 36103
36299: POP
36300: POP
// for i in tmp do
36301: LD_ADDR_VAR 0 5
36305: PUSH
36306: LD_VAR 0 7
36310: PUSH
36311: FOR_IN
36312: IFFALSE 36350
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36314: LD_VAR 0 1
36318: PPUSH
36319: LD_VAR 0 5
36323: PUSH
36324: LD_INT 1
36326: ARRAY
36327: PPUSH
36328: LD_VAR 0 5
36332: PUSH
36333: LD_INT 2
36335: ARRAY
36336: PPUSH
36337: CALL 35292 0 3
36341: NOT
36342: IFFALSE 36348
// exit ;
36344: POP
36345: POP
36346: GO 36352
36348: GO 36311
36350: POP
36351: POP
// end ;
36352: LD_VAR 0 4
36356: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36357: LD_INT 0
36359: PPUSH
36360: PPUSH
36361: PPUSH
36362: PPUSH
36363: PPUSH
36364: PPUSH
36365: PPUSH
// if not GetClass ( unit ) = class_sniper then
36366: LD_VAR 0 1
36370: PPUSH
36371: CALL_OW 257
36375: PUSH
36376: LD_INT 5
36378: EQUAL
36379: NOT
36380: IFFALSE 36384
// exit ;
36382: GO 36772
// dist := 8 ;
36384: LD_ADDR_VAR 0 5
36388: PUSH
36389: LD_INT 8
36391: ST_TO_ADDR
// viewRange := 12 ;
36392: LD_ADDR_VAR 0 7
36396: PUSH
36397: LD_INT 12
36399: ST_TO_ADDR
// side := GetSide ( unit ) ;
36400: LD_ADDR_VAR 0 6
36404: PUSH
36405: LD_VAR 0 1
36409: PPUSH
36410: CALL_OW 255
36414: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36415: LD_INT 61
36417: PPUSH
36418: LD_VAR 0 6
36422: PPUSH
36423: CALL_OW 321
36427: PUSH
36428: LD_INT 2
36430: EQUAL
36431: IFFALSE 36441
// viewRange := 16 ;
36433: LD_ADDR_VAR 0 7
36437: PUSH
36438: LD_INT 16
36440: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36441: LD_VAR 0 1
36445: PPUSH
36446: LD_VAR 0 2
36450: PPUSH
36451: LD_VAR 0 3
36455: PPUSH
36456: CALL_OW 297
36460: PUSH
36461: LD_VAR 0 5
36465: GREATER
36466: IFFALSE 36545
// begin ComMoveXY ( unit , x , y ) ;
36468: LD_VAR 0 1
36472: PPUSH
36473: LD_VAR 0 2
36477: PPUSH
36478: LD_VAR 0 3
36482: PPUSH
36483: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36487: LD_INT 35
36489: PPUSH
36490: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36494: LD_VAR 0 1
36498: PPUSH
36499: LD_VAR 0 2
36503: PPUSH
36504: LD_VAR 0 3
36508: PPUSH
36509: CALL 72320 0 3
36513: NOT
36514: IFFALSE 36518
// exit ;
36516: GO 36772
// until GetDistUnitXY ( unit , x , y ) < dist ;
36518: LD_VAR 0 1
36522: PPUSH
36523: LD_VAR 0 2
36527: PPUSH
36528: LD_VAR 0 3
36532: PPUSH
36533: CALL_OW 297
36537: PUSH
36538: LD_VAR 0 5
36542: LESS
36543: IFFALSE 36487
// end ; ComTurnXY ( unit , x , y ) ;
36545: LD_VAR 0 1
36549: PPUSH
36550: LD_VAR 0 2
36554: PPUSH
36555: LD_VAR 0 3
36559: PPUSH
36560: CALL_OW 118
// wait ( 5 ) ;
36564: LD_INT 5
36566: PPUSH
36567: CALL_OW 67
// _d := GetDir ( unit ) ;
36571: LD_ADDR_VAR 0 10
36575: PUSH
36576: LD_VAR 0 1
36580: PPUSH
36581: CALL_OW 254
36585: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36586: LD_ADDR_VAR 0 8
36590: PUSH
36591: LD_VAR 0 1
36595: PPUSH
36596: CALL_OW 250
36600: PPUSH
36601: LD_VAR 0 10
36605: PPUSH
36606: LD_VAR 0 5
36610: PPUSH
36611: CALL_OW 272
36615: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36616: LD_ADDR_VAR 0 9
36620: PUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 251
36630: PPUSH
36631: LD_VAR 0 10
36635: PPUSH
36636: LD_VAR 0 5
36640: PPUSH
36641: CALL_OW 273
36645: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36646: LD_VAR 0 8
36650: PPUSH
36651: LD_VAR 0 9
36655: PPUSH
36656: CALL_OW 488
36660: NOT
36661: IFFALSE 36665
// exit ;
36663: GO 36772
// ComAnimCustom ( unit , 1 ) ;
36665: LD_VAR 0 1
36669: PPUSH
36670: LD_INT 1
36672: PPUSH
36673: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36677: LD_VAR 0 8
36681: PPUSH
36682: LD_VAR 0 9
36686: PPUSH
36687: LD_VAR 0 6
36691: PPUSH
36692: LD_VAR 0 7
36696: PPUSH
36697: CALL_OW 330
// repeat wait ( 1 ) ;
36701: LD_INT 1
36703: PPUSH
36704: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36708: LD_VAR 0 1
36712: PPUSH
36713: CALL_OW 316
36717: PUSH
36718: LD_VAR 0 1
36722: PPUSH
36723: CALL_OW 314
36727: OR
36728: PUSH
36729: LD_VAR 0 1
36733: PPUSH
36734: CALL_OW 302
36738: NOT
36739: OR
36740: PUSH
36741: LD_VAR 0 1
36745: PPUSH
36746: CALL_OW 301
36750: OR
36751: IFFALSE 36701
// RemoveSeeing ( _x , _y , side ) ;
36753: LD_VAR 0 8
36757: PPUSH
36758: LD_VAR 0 9
36762: PPUSH
36763: LD_VAR 0 6
36767: PPUSH
36768: CALL_OW 331
// end ; end_of_file
36772: LD_VAR 0 4
36776: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36777: LD_INT 0
36779: PPUSH
36780: PPUSH
// if exist_mode then
36781: LD_VAR 0 2
36785: IFFALSE 36810
// unit := CreateCharacter ( prefix & ident ) else
36787: LD_ADDR_VAR 0 5
36791: PUSH
36792: LD_VAR 0 3
36796: PUSH
36797: LD_VAR 0 1
36801: STR
36802: PPUSH
36803: CALL_OW 34
36807: ST_TO_ADDR
36808: GO 36825
// unit := NewCharacter ( ident ) ;
36810: LD_ADDR_VAR 0 5
36814: PUSH
36815: LD_VAR 0 1
36819: PPUSH
36820: CALL_OW 25
36824: ST_TO_ADDR
// result := unit ;
36825: LD_ADDR_VAR 0 4
36829: PUSH
36830: LD_VAR 0 5
36834: ST_TO_ADDR
// end ;
36835: LD_VAR 0 4
36839: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36840: LD_INT 0
36842: PPUSH
36843: PPUSH
// if not side or not nation then
36844: LD_VAR 0 1
36848: NOT
36849: PUSH
36850: LD_VAR 0 2
36854: NOT
36855: OR
36856: IFFALSE 36860
// exit ;
36858: GO 37628
// case nation of nation_american :
36860: LD_VAR 0 2
36864: PUSH
36865: LD_INT 1
36867: DOUBLE
36868: EQUAL
36869: IFTRUE 36873
36871: GO 37087
36873: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36874: LD_ADDR_VAR 0 4
36878: PUSH
36879: LD_INT 35
36881: PUSH
36882: LD_INT 45
36884: PUSH
36885: LD_INT 46
36887: PUSH
36888: LD_INT 47
36890: PUSH
36891: LD_INT 82
36893: PUSH
36894: LD_INT 83
36896: PUSH
36897: LD_INT 84
36899: PUSH
36900: LD_INT 85
36902: PUSH
36903: LD_INT 86
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: LD_INT 6
36914: PUSH
36915: LD_INT 15
36917: PUSH
36918: LD_INT 16
36920: PUSH
36921: LD_INT 7
36923: PUSH
36924: LD_INT 12
36926: PUSH
36927: LD_INT 13
36929: PUSH
36930: LD_INT 10
36932: PUSH
36933: LD_INT 14
36935: PUSH
36936: LD_INT 20
36938: PUSH
36939: LD_INT 21
36941: PUSH
36942: LD_INT 22
36944: PUSH
36945: LD_INT 25
36947: PUSH
36948: LD_INT 32
36950: PUSH
36951: LD_INT 27
36953: PUSH
36954: LD_INT 36
36956: PUSH
36957: LD_INT 69
36959: PUSH
36960: LD_INT 39
36962: PUSH
36963: LD_INT 34
36965: PUSH
36966: LD_INT 40
36968: PUSH
36969: LD_INT 48
36971: PUSH
36972: LD_INT 49
36974: PUSH
36975: LD_INT 50
36977: PUSH
36978: LD_INT 51
36980: PUSH
36981: LD_INT 52
36983: PUSH
36984: LD_INT 53
36986: PUSH
36987: LD_INT 54
36989: PUSH
36990: LD_INT 55
36992: PUSH
36993: LD_INT 56
36995: PUSH
36996: LD_INT 57
36998: PUSH
36999: LD_INT 58
37001: PUSH
37002: LD_INT 59
37004: PUSH
37005: LD_INT 60
37007: PUSH
37008: LD_INT 61
37010: PUSH
37011: LD_INT 62
37013: PUSH
37014: LD_INT 80
37016: PUSH
37017: LD_INT 82
37019: PUSH
37020: LD_INT 83
37022: PUSH
37023: LD_INT 84
37025: PUSH
37026: LD_INT 85
37028: PUSH
37029: LD_INT 86
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: ST_TO_ADDR
37085: GO 37552
37087: LD_INT 2
37089: DOUBLE
37090: EQUAL
37091: IFTRUE 37095
37093: GO 37321
37095: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37096: LD_ADDR_VAR 0 4
37100: PUSH
37101: LD_INT 35
37103: PUSH
37104: LD_INT 45
37106: PUSH
37107: LD_INT 46
37109: PUSH
37110: LD_INT 47
37112: PUSH
37113: LD_INT 82
37115: PUSH
37116: LD_INT 83
37118: PUSH
37119: LD_INT 84
37121: PUSH
37122: LD_INT 85
37124: PUSH
37125: LD_INT 87
37127: PUSH
37128: LD_INT 70
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: LD_INT 11
37136: PUSH
37137: LD_INT 3
37139: PUSH
37140: LD_INT 4
37142: PUSH
37143: LD_INT 5
37145: PUSH
37146: LD_INT 6
37148: PUSH
37149: LD_INT 15
37151: PUSH
37152: LD_INT 18
37154: PUSH
37155: LD_INT 7
37157: PUSH
37158: LD_INT 17
37160: PUSH
37161: LD_INT 8
37163: PUSH
37164: LD_INT 20
37166: PUSH
37167: LD_INT 21
37169: PUSH
37170: LD_INT 22
37172: PUSH
37173: LD_INT 72
37175: PUSH
37176: LD_INT 26
37178: PUSH
37179: LD_INT 69
37181: PUSH
37182: LD_INT 39
37184: PUSH
37185: LD_INT 40
37187: PUSH
37188: LD_INT 41
37190: PUSH
37191: LD_INT 42
37193: PUSH
37194: LD_INT 43
37196: PUSH
37197: LD_INT 48
37199: PUSH
37200: LD_INT 49
37202: PUSH
37203: LD_INT 50
37205: PUSH
37206: LD_INT 51
37208: PUSH
37209: LD_INT 52
37211: PUSH
37212: LD_INT 53
37214: PUSH
37215: LD_INT 54
37217: PUSH
37218: LD_INT 55
37220: PUSH
37221: LD_INT 56
37223: PUSH
37224: LD_INT 60
37226: PUSH
37227: LD_INT 61
37229: PUSH
37230: LD_INT 62
37232: PUSH
37233: LD_INT 66
37235: PUSH
37236: LD_INT 67
37238: PUSH
37239: LD_INT 68
37241: PUSH
37242: LD_INT 81
37244: PUSH
37245: LD_INT 82
37247: PUSH
37248: LD_INT 83
37250: PUSH
37251: LD_INT 84
37253: PUSH
37254: LD_INT 85
37256: PUSH
37257: LD_INT 87
37259: PUSH
37260: LD_INT 88
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: ST_TO_ADDR
37319: GO 37552
37321: LD_INT 3
37323: DOUBLE
37324: EQUAL
37325: IFTRUE 37329
37327: GO 37551
37329: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37330: LD_ADDR_VAR 0 4
37334: PUSH
37335: LD_INT 46
37337: PUSH
37338: LD_INT 47
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: LD_INT 2
37346: PUSH
37347: LD_INT 82
37349: PUSH
37350: LD_INT 83
37352: PUSH
37353: LD_INT 84
37355: PUSH
37356: LD_INT 85
37358: PUSH
37359: LD_INT 86
37361: PUSH
37362: LD_INT 11
37364: PUSH
37365: LD_INT 9
37367: PUSH
37368: LD_INT 20
37370: PUSH
37371: LD_INT 19
37373: PUSH
37374: LD_INT 21
37376: PUSH
37377: LD_INT 24
37379: PUSH
37380: LD_INT 22
37382: PUSH
37383: LD_INT 25
37385: PUSH
37386: LD_INT 28
37388: PUSH
37389: LD_INT 29
37391: PUSH
37392: LD_INT 30
37394: PUSH
37395: LD_INT 31
37397: PUSH
37398: LD_INT 37
37400: PUSH
37401: LD_INT 38
37403: PUSH
37404: LD_INT 32
37406: PUSH
37407: LD_INT 27
37409: PUSH
37410: LD_INT 33
37412: PUSH
37413: LD_INT 69
37415: PUSH
37416: LD_INT 39
37418: PUSH
37419: LD_INT 34
37421: PUSH
37422: LD_INT 40
37424: PUSH
37425: LD_INT 71
37427: PUSH
37428: LD_INT 23
37430: PUSH
37431: LD_INT 44
37433: PUSH
37434: LD_INT 48
37436: PUSH
37437: LD_INT 49
37439: PUSH
37440: LD_INT 50
37442: PUSH
37443: LD_INT 51
37445: PUSH
37446: LD_INT 52
37448: PUSH
37449: LD_INT 53
37451: PUSH
37452: LD_INT 54
37454: PUSH
37455: LD_INT 55
37457: PUSH
37458: LD_INT 56
37460: PUSH
37461: LD_INT 57
37463: PUSH
37464: LD_INT 58
37466: PUSH
37467: LD_INT 59
37469: PUSH
37470: LD_INT 63
37472: PUSH
37473: LD_INT 64
37475: PUSH
37476: LD_INT 65
37478: PUSH
37479: LD_INT 82
37481: PUSH
37482: LD_INT 83
37484: PUSH
37485: LD_INT 84
37487: PUSH
37488: LD_INT 85
37490: PUSH
37491: LD_INT 86
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: ST_TO_ADDR
37549: GO 37552
37551: POP
// if state > - 1 and state < 3 then
37552: LD_VAR 0 3
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: GREATER
37561: PUSH
37562: LD_VAR 0 3
37566: PUSH
37567: LD_INT 3
37569: LESS
37570: AND
37571: IFFALSE 37628
// for i in result do
37573: LD_ADDR_VAR 0 5
37577: PUSH
37578: LD_VAR 0 4
37582: PUSH
37583: FOR_IN
37584: IFFALSE 37626
// if GetTech ( i , side ) <> state then
37586: LD_VAR 0 5
37590: PPUSH
37591: LD_VAR 0 1
37595: PPUSH
37596: CALL_OW 321
37600: PUSH
37601: LD_VAR 0 3
37605: NONEQUAL
37606: IFFALSE 37624
// result := result diff i ;
37608: LD_ADDR_VAR 0 4
37612: PUSH
37613: LD_VAR 0 4
37617: PUSH
37618: LD_VAR 0 5
37622: DIFF
37623: ST_TO_ADDR
37624: GO 37583
37626: POP
37627: POP
// end ;
37628: LD_VAR 0 4
37632: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37633: LD_INT 0
37635: PPUSH
37636: PPUSH
37637: PPUSH
// result := true ;
37638: LD_ADDR_VAR 0 3
37642: PUSH
37643: LD_INT 1
37645: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37646: LD_ADDR_VAR 0 5
37650: PUSH
37651: LD_VAR 0 2
37655: PPUSH
37656: CALL_OW 480
37660: ST_TO_ADDR
// if not tmp then
37661: LD_VAR 0 5
37665: NOT
37666: IFFALSE 37670
// exit ;
37668: GO 37719
// for i in tmp do
37670: LD_ADDR_VAR 0 4
37674: PUSH
37675: LD_VAR 0 5
37679: PUSH
37680: FOR_IN
37681: IFFALSE 37717
// if GetTech ( i , side ) <> state_researched then
37683: LD_VAR 0 4
37687: PPUSH
37688: LD_VAR 0 1
37692: PPUSH
37693: CALL_OW 321
37697: PUSH
37698: LD_INT 2
37700: NONEQUAL
37701: IFFALSE 37715
// begin result := false ;
37703: LD_ADDR_VAR 0 3
37707: PUSH
37708: LD_INT 0
37710: ST_TO_ADDR
// exit ;
37711: POP
37712: POP
37713: GO 37719
// end ;
37715: GO 37680
37717: POP
37718: POP
// end ;
37719: LD_VAR 0 3
37723: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37724: LD_INT 0
37726: PPUSH
37727: PPUSH
37728: PPUSH
37729: PPUSH
37730: PPUSH
37731: PPUSH
37732: PPUSH
37733: PPUSH
37734: PPUSH
37735: PPUSH
37736: PPUSH
37737: PPUSH
37738: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37739: LD_VAR 0 1
37743: NOT
37744: PUSH
37745: LD_VAR 0 1
37749: PPUSH
37750: CALL_OW 257
37754: PUSH
37755: LD_INT 9
37757: NONEQUAL
37758: OR
37759: IFFALSE 37763
// exit ;
37761: GO 38336
// side := GetSide ( unit ) ;
37763: LD_ADDR_VAR 0 9
37767: PUSH
37768: LD_VAR 0 1
37772: PPUSH
37773: CALL_OW 255
37777: ST_TO_ADDR
// tech_space := tech_spacanom ;
37778: LD_ADDR_VAR 0 12
37782: PUSH
37783: LD_INT 29
37785: ST_TO_ADDR
// tech_time := tech_taurad ;
37786: LD_ADDR_VAR 0 13
37790: PUSH
37791: LD_INT 28
37793: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37794: LD_ADDR_VAR 0 11
37798: PUSH
37799: LD_VAR 0 1
37803: PPUSH
37804: CALL_OW 310
37808: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37809: LD_VAR 0 11
37813: PPUSH
37814: CALL_OW 247
37818: PUSH
37819: LD_INT 2
37821: EQUAL
37822: IFFALSE 37826
// exit ;
37824: GO 38336
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37826: LD_ADDR_VAR 0 8
37830: PUSH
37831: LD_INT 81
37833: PUSH
37834: LD_VAR 0 9
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 3
37845: PUSH
37846: LD_INT 21
37848: PUSH
37849: LD_INT 3
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PPUSH
37864: CALL_OW 69
37868: ST_TO_ADDR
// if not tmp then
37869: LD_VAR 0 8
37873: NOT
37874: IFFALSE 37878
// exit ;
37876: GO 38336
// if in_unit then
37878: LD_VAR 0 11
37882: IFFALSE 37906
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37884: LD_ADDR_VAR 0 10
37888: PUSH
37889: LD_VAR 0 8
37893: PPUSH
37894: LD_VAR 0 11
37898: PPUSH
37899: CALL_OW 74
37903: ST_TO_ADDR
37904: GO 37926
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37906: LD_ADDR_VAR 0 10
37910: PUSH
37911: LD_VAR 0 8
37915: PPUSH
37916: LD_VAR 0 1
37920: PPUSH
37921: CALL_OW 74
37925: ST_TO_ADDR
// if not enemy then
37926: LD_VAR 0 10
37930: NOT
37931: IFFALSE 37935
// exit ;
37933: GO 38336
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37935: LD_VAR 0 11
37939: PUSH
37940: LD_VAR 0 11
37944: PPUSH
37945: LD_VAR 0 10
37949: PPUSH
37950: CALL_OW 296
37954: PUSH
37955: LD_INT 13
37957: GREATER
37958: AND
37959: PUSH
37960: LD_VAR 0 1
37964: PPUSH
37965: LD_VAR 0 10
37969: PPUSH
37970: CALL_OW 296
37974: PUSH
37975: LD_INT 12
37977: GREATER
37978: OR
37979: IFFALSE 37983
// exit ;
37981: GO 38336
// missile := [ 1 ] ;
37983: LD_ADDR_VAR 0 14
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37994: LD_VAR 0 9
37998: PPUSH
37999: LD_VAR 0 12
38003: PPUSH
38004: CALL_OW 325
38008: IFFALSE 38037
// missile := Insert ( missile , missile + 1 , 2 ) ;
38010: LD_ADDR_VAR 0 14
38014: PUSH
38015: LD_VAR 0 14
38019: PPUSH
38020: LD_VAR 0 14
38024: PUSH
38025: LD_INT 1
38027: PLUS
38028: PPUSH
38029: LD_INT 2
38031: PPUSH
38032: CALL_OW 2
38036: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38037: LD_VAR 0 9
38041: PPUSH
38042: LD_VAR 0 13
38046: PPUSH
38047: CALL_OW 325
38051: PUSH
38052: LD_VAR 0 10
38056: PPUSH
38057: CALL_OW 255
38061: PPUSH
38062: LD_VAR 0 13
38066: PPUSH
38067: CALL_OW 325
38071: NOT
38072: AND
38073: IFFALSE 38102
// missile := Insert ( missile , missile + 1 , 3 ) ;
38075: LD_ADDR_VAR 0 14
38079: PUSH
38080: LD_VAR 0 14
38084: PPUSH
38085: LD_VAR 0 14
38089: PUSH
38090: LD_INT 1
38092: PLUS
38093: PPUSH
38094: LD_INT 3
38096: PPUSH
38097: CALL_OW 2
38101: ST_TO_ADDR
// if missile < 2 then
38102: LD_VAR 0 14
38106: PUSH
38107: LD_INT 2
38109: LESS
38110: IFFALSE 38114
// exit ;
38112: GO 38336
// x := GetX ( enemy ) ;
38114: LD_ADDR_VAR 0 4
38118: PUSH
38119: LD_VAR 0 10
38123: PPUSH
38124: CALL_OW 250
38128: ST_TO_ADDR
// y := GetY ( enemy ) ;
38129: LD_ADDR_VAR 0 5
38133: PUSH
38134: LD_VAR 0 10
38138: PPUSH
38139: CALL_OW 251
38143: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38144: LD_ADDR_VAR 0 6
38148: PUSH
38149: LD_VAR 0 4
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PPUSH
38158: LD_INT 1
38160: PPUSH
38161: CALL_OW 12
38165: PLUS
38166: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38167: LD_ADDR_VAR 0 7
38171: PUSH
38172: LD_VAR 0 5
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PPUSH
38181: LD_INT 1
38183: PPUSH
38184: CALL_OW 12
38188: PLUS
38189: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38190: LD_VAR 0 6
38194: PPUSH
38195: LD_VAR 0 7
38199: PPUSH
38200: CALL_OW 488
38204: NOT
38205: IFFALSE 38227
// begin _x := x ;
38207: LD_ADDR_VAR 0 6
38211: PUSH
38212: LD_VAR 0 4
38216: ST_TO_ADDR
// _y := y ;
38217: LD_ADDR_VAR 0 7
38221: PUSH
38222: LD_VAR 0 5
38226: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38227: LD_ADDR_VAR 0 3
38231: PUSH
38232: LD_INT 1
38234: PPUSH
38235: LD_VAR 0 14
38239: PPUSH
38240: CALL_OW 12
38244: ST_TO_ADDR
// case i of 1 :
38245: LD_VAR 0 3
38249: PUSH
38250: LD_INT 1
38252: DOUBLE
38253: EQUAL
38254: IFTRUE 38258
38256: GO 38275
38258: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38259: LD_VAR 0 1
38263: PPUSH
38264: LD_VAR 0 10
38268: PPUSH
38269: CALL_OW 115
38273: GO 38336
38275: LD_INT 2
38277: DOUBLE
38278: EQUAL
38279: IFTRUE 38283
38281: GO 38305
38283: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38284: LD_VAR 0 1
38288: PPUSH
38289: LD_VAR 0 6
38293: PPUSH
38294: LD_VAR 0 7
38298: PPUSH
38299: CALL_OW 153
38303: GO 38336
38305: LD_INT 3
38307: DOUBLE
38308: EQUAL
38309: IFTRUE 38313
38311: GO 38335
38313: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38314: LD_VAR 0 1
38318: PPUSH
38319: LD_VAR 0 6
38323: PPUSH
38324: LD_VAR 0 7
38328: PPUSH
38329: CALL_OW 154
38333: GO 38336
38335: POP
// end ;
38336: LD_VAR 0 2
38340: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38341: LD_INT 0
38343: PPUSH
38344: PPUSH
38345: PPUSH
38346: PPUSH
38347: PPUSH
38348: PPUSH
// if not unit or not building then
38349: LD_VAR 0 1
38353: NOT
38354: PUSH
38355: LD_VAR 0 2
38359: NOT
38360: OR
38361: IFFALSE 38365
// exit ;
38363: GO 38523
// x := GetX ( building ) ;
38365: LD_ADDR_VAR 0 5
38369: PUSH
38370: LD_VAR 0 2
38374: PPUSH
38375: CALL_OW 250
38379: ST_TO_ADDR
// y := GetY ( building ) ;
38380: LD_ADDR_VAR 0 6
38384: PUSH
38385: LD_VAR 0 2
38389: PPUSH
38390: CALL_OW 251
38394: ST_TO_ADDR
// for i = 0 to 5 do
38395: LD_ADDR_VAR 0 4
38399: PUSH
38400: DOUBLE
38401: LD_INT 0
38403: DEC
38404: ST_TO_ADDR
38405: LD_INT 5
38407: PUSH
38408: FOR_TO
38409: IFFALSE 38521
// begin _x := ShiftX ( x , i , 3 ) ;
38411: LD_ADDR_VAR 0 7
38415: PUSH
38416: LD_VAR 0 5
38420: PPUSH
38421: LD_VAR 0 4
38425: PPUSH
38426: LD_INT 3
38428: PPUSH
38429: CALL_OW 272
38433: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38434: LD_ADDR_VAR 0 8
38438: PUSH
38439: LD_VAR 0 6
38443: PPUSH
38444: LD_VAR 0 4
38448: PPUSH
38449: LD_INT 3
38451: PPUSH
38452: CALL_OW 273
38456: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38457: LD_VAR 0 7
38461: PPUSH
38462: LD_VAR 0 8
38466: PPUSH
38467: CALL_OW 488
38471: NOT
38472: IFFALSE 38476
// continue ;
38474: GO 38408
// if HexInfo ( _x , _y ) = 0 then
38476: LD_VAR 0 7
38480: PPUSH
38481: LD_VAR 0 8
38485: PPUSH
38486: CALL_OW 428
38490: PUSH
38491: LD_INT 0
38493: EQUAL
38494: IFFALSE 38519
// begin ComMoveXY ( unit , _x , _y ) ;
38496: LD_VAR 0 1
38500: PPUSH
38501: LD_VAR 0 7
38505: PPUSH
38506: LD_VAR 0 8
38510: PPUSH
38511: CALL_OW 111
// exit ;
38515: POP
38516: POP
38517: GO 38523
// end ; end ;
38519: GO 38408
38521: POP
38522: POP
// end ;
38523: LD_VAR 0 3
38527: RET
// export function ScanBase ( side , base_area ) ; begin
38528: LD_INT 0
38530: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38531: LD_ADDR_VAR 0 3
38535: PUSH
38536: LD_VAR 0 2
38540: PPUSH
38541: LD_INT 81
38543: PUSH
38544: LD_VAR 0 1
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PPUSH
38553: CALL_OW 70
38557: ST_TO_ADDR
// end ;
38558: LD_VAR 0 3
38562: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38563: LD_INT 0
38565: PPUSH
38566: PPUSH
38567: PPUSH
38568: PPUSH
// result := false ;
38569: LD_ADDR_VAR 0 2
38573: PUSH
38574: LD_INT 0
38576: ST_TO_ADDR
// side := GetSide ( unit ) ;
38577: LD_ADDR_VAR 0 3
38581: PUSH
38582: LD_VAR 0 1
38586: PPUSH
38587: CALL_OW 255
38591: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38592: LD_ADDR_VAR 0 4
38596: PUSH
38597: LD_VAR 0 1
38601: PPUSH
38602: CALL_OW 248
38606: ST_TO_ADDR
// case nat of 1 :
38607: LD_VAR 0 4
38611: PUSH
38612: LD_INT 1
38614: DOUBLE
38615: EQUAL
38616: IFTRUE 38620
38618: GO 38631
38620: POP
// tech := tech_lassight ; 2 :
38621: LD_ADDR_VAR 0 5
38625: PUSH
38626: LD_INT 12
38628: ST_TO_ADDR
38629: GO 38670
38631: LD_INT 2
38633: DOUBLE
38634: EQUAL
38635: IFTRUE 38639
38637: GO 38650
38639: POP
// tech := tech_mortar ; 3 :
38640: LD_ADDR_VAR 0 5
38644: PUSH
38645: LD_INT 41
38647: ST_TO_ADDR
38648: GO 38670
38650: LD_INT 3
38652: DOUBLE
38653: EQUAL
38654: IFTRUE 38658
38656: GO 38669
38658: POP
// tech := tech_bazooka ; end ;
38659: LD_ADDR_VAR 0 5
38663: PUSH
38664: LD_INT 44
38666: ST_TO_ADDR
38667: GO 38670
38669: POP
// if Researched ( side , tech ) then
38670: LD_VAR 0 3
38674: PPUSH
38675: LD_VAR 0 5
38679: PPUSH
38680: CALL_OW 325
38684: IFFALSE 38711
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38686: LD_ADDR_VAR 0 2
38690: PUSH
38691: LD_INT 5
38693: PUSH
38694: LD_INT 8
38696: PUSH
38697: LD_INT 9
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: LIST
38704: PUSH
38705: LD_VAR 0 4
38709: ARRAY
38710: ST_TO_ADDR
// end ;
38711: LD_VAR 0 2
38715: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38716: LD_INT 0
38718: PPUSH
38719: PPUSH
38720: PPUSH
// if not mines then
38721: LD_VAR 0 2
38725: NOT
38726: IFFALSE 38730
// exit ;
38728: GO 38874
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38730: LD_ADDR_VAR 0 5
38734: PUSH
38735: LD_INT 81
38737: PUSH
38738: LD_VAR 0 1
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 3
38749: PUSH
38750: LD_INT 21
38752: PUSH
38753: LD_INT 3
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PPUSH
38768: CALL_OW 69
38772: ST_TO_ADDR
// for i in mines do
38773: LD_ADDR_VAR 0 4
38777: PUSH
38778: LD_VAR 0 2
38782: PUSH
38783: FOR_IN
38784: IFFALSE 38872
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38786: LD_VAR 0 4
38790: PUSH
38791: LD_INT 1
38793: ARRAY
38794: PPUSH
38795: LD_VAR 0 4
38799: PUSH
38800: LD_INT 2
38802: ARRAY
38803: PPUSH
38804: CALL_OW 458
38808: NOT
38809: IFFALSE 38813
// continue ;
38811: GO 38783
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38813: LD_VAR 0 4
38817: PUSH
38818: LD_INT 1
38820: ARRAY
38821: PPUSH
38822: LD_VAR 0 4
38826: PUSH
38827: LD_INT 2
38829: ARRAY
38830: PPUSH
38831: CALL_OW 428
38835: PUSH
38836: LD_VAR 0 5
38840: IN
38841: IFFALSE 38870
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38843: LD_VAR 0 4
38847: PUSH
38848: LD_INT 1
38850: ARRAY
38851: PPUSH
38852: LD_VAR 0 4
38856: PUSH
38857: LD_INT 2
38859: ARRAY
38860: PPUSH
38861: LD_VAR 0 1
38865: PPUSH
38866: CALL_OW 456
// end ;
38870: GO 38783
38872: POP
38873: POP
// end ;
38874: LD_VAR 0 3
38878: RET
// export function Count ( array ) ; var i ; begin
38879: LD_INT 0
38881: PPUSH
38882: PPUSH
// result := 0 ;
38883: LD_ADDR_VAR 0 2
38887: PUSH
38888: LD_INT 0
38890: ST_TO_ADDR
// for i in array do
38891: LD_ADDR_VAR 0 3
38895: PUSH
38896: LD_VAR 0 1
38900: PUSH
38901: FOR_IN
38902: IFFALSE 38926
// if i then
38904: LD_VAR 0 3
38908: IFFALSE 38924
// result := result + 1 ;
38910: LD_ADDR_VAR 0 2
38914: PUSH
38915: LD_VAR 0 2
38919: PUSH
38920: LD_INT 1
38922: PLUS
38923: ST_TO_ADDR
38924: GO 38901
38926: POP
38927: POP
// end ;
38928: LD_VAR 0 2
38932: RET
// export function IsEmpty ( building ) ; begin
38933: LD_INT 0
38935: PPUSH
// if not building then
38936: LD_VAR 0 1
38940: NOT
38941: IFFALSE 38945
// exit ;
38943: GO 38988
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38945: LD_ADDR_VAR 0 2
38949: PUSH
38950: LD_VAR 0 1
38954: PUSH
38955: LD_INT 22
38957: PUSH
38958: LD_VAR 0 1
38962: PPUSH
38963: CALL_OW 255
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 58
38974: PUSH
38975: EMPTY
38976: LIST
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PPUSH
38982: CALL_OW 69
38986: IN
38987: ST_TO_ADDR
// end ;
38988: LD_VAR 0 2
38992: RET
// export function IsNotFull ( building ) ; begin
38993: LD_INT 0
38995: PPUSH
// if not building then
38996: LD_VAR 0 1
39000: NOT
39001: IFFALSE 39005
// exit ;
39003: GO 39024
// result := UnitsInside ( building ) < 6 ;
39005: LD_ADDR_VAR 0 2
39009: PUSH
39010: LD_VAR 0 1
39014: PPUSH
39015: CALL_OW 313
39019: PUSH
39020: LD_INT 6
39022: LESS
39023: ST_TO_ADDR
// end ;
39024: LD_VAR 0 2
39028: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39029: LD_INT 0
39031: PPUSH
39032: PPUSH
39033: PPUSH
39034: PPUSH
// tmp := [ ] ;
39035: LD_ADDR_VAR 0 3
39039: PUSH
39040: EMPTY
39041: ST_TO_ADDR
// list := [ ] ;
39042: LD_ADDR_VAR 0 5
39046: PUSH
39047: EMPTY
39048: ST_TO_ADDR
// for i = 16 to 25 do
39049: LD_ADDR_VAR 0 4
39053: PUSH
39054: DOUBLE
39055: LD_INT 16
39057: DEC
39058: ST_TO_ADDR
39059: LD_INT 25
39061: PUSH
39062: FOR_TO
39063: IFFALSE 39136
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39065: LD_ADDR_VAR 0 3
39069: PUSH
39070: LD_VAR 0 3
39074: PUSH
39075: LD_INT 22
39077: PUSH
39078: LD_VAR 0 1
39082: PPUSH
39083: CALL_OW 255
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 91
39094: PUSH
39095: LD_VAR 0 1
39099: PUSH
39100: LD_INT 6
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 30
39110: PUSH
39111: LD_VAR 0 4
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: PUSH
39125: EMPTY
39126: LIST
39127: PPUSH
39128: CALL_OW 69
39132: ADD
39133: ST_TO_ADDR
39134: GO 39062
39136: POP
39137: POP
// for i = 1 to tmp do
39138: LD_ADDR_VAR 0 4
39142: PUSH
39143: DOUBLE
39144: LD_INT 1
39146: DEC
39147: ST_TO_ADDR
39148: LD_VAR 0 3
39152: PUSH
39153: FOR_TO
39154: IFFALSE 39242
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39156: LD_ADDR_VAR 0 5
39160: PUSH
39161: LD_VAR 0 5
39165: PUSH
39166: LD_VAR 0 3
39170: PUSH
39171: LD_VAR 0 4
39175: ARRAY
39176: PPUSH
39177: CALL_OW 266
39181: PUSH
39182: LD_VAR 0 3
39186: PUSH
39187: LD_VAR 0 4
39191: ARRAY
39192: PPUSH
39193: CALL_OW 250
39197: PUSH
39198: LD_VAR 0 3
39202: PUSH
39203: LD_VAR 0 4
39207: ARRAY
39208: PPUSH
39209: CALL_OW 251
39213: PUSH
39214: LD_VAR 0 3
39218: PUSH
39219: LD_VAR 0 4
39223: ARRAY
39224: PPUSH
39225: CALL_OW 254
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: PUSH
39236: EMPTY
39237: LIST
39238: ADD
39239: ST_TO_ADDR
39240: GO 39153
39242: POP
39243: POP
// result := list ;
39244: LD_ADDR_VAR 0 2
39248: PUSH
39249: LD_VAR 0 5
39253: ST_TO_ADDR
// end ;
39254: LD_VAR 0 2
39258: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39259: LD_INT 0
39261: PPUSH
39262: PPUSH
39263: PPUSH
39264: PPUSH
39265: PPUSH
39266: PPUSH
39267: PPUSH
// if not factory then
39268: LD_VAR 0 1
39272: NOT
39273: IFFALSE 39277
// exit ;
39275: GO 39870
// if control = control_apeman then
39277: LD_VAR 0 4
39281: PUSH
39282: LD_INT 5
39284: EQUAL
39285: IFFALSE 39394
// begin tmp := UnitsInside ( factory ) ;
39287: LD_ADDR_VAR 0 8
39291: PUSH
39292: LD_VAR 0 1
39296: PPUSH
39297: CALL_OW 313
39301: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39302: LD_VAR 0 8
39306: PPUSH
39307: LD_INT 25
39309: PUSH
39310: LD_INT 12
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PPUSH
39317: CALL_OW 72
39321: NOT
39322: IFFALSE 39332
// control := control_manual ;
39324: LD_ADDR_VAR 0 4
39328: PUSH
39329: LD_INT 1
39331: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39332: LD_ADDR_VAR 0 8
39336: PUSH
39337: LD_VAR 0 1
39341: PPUSH
39342: CALL 39029 0 1
39346: ST_TO_ADDR
// if tmp then
39347: LD_VAR 0 8
39351: IFFALSE 39394
// begin for i in tmp do
39353: LD_ADDR_VAR 0 7
39357: PUSH
39358: LD_VAR 0 8
39362: PUSH
39363: FOR_IN
39364: IFFALSE 39392
// if i [ 1 ] = b_ext_radio then
39366: LD_VAR 0 7
39370: PUSH
39371: LD_INT 1
39373: ARRAY
39374: PUSH
39375: LD_INT 22
39377: EQUAL
39378: IFFALSE 39390
// begin control := control_remote ;
39380: LD_ADDR_VAR 0 4
39384: PUSH
39385: LD_INT 2
39387: ST_TO_ADDR
// break ;
39388: GO 39392
// end ;
39390: GO 39363
39392: POP
39393: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39394: LD_VAR 0 1
39398: PPUSH
39399: LD_VAR 0 2
39403: PPUSH
39404: LD_VAR 0 3
39408: PPUSH
39409: LD_VAR 0 4
39413: PPUSH
39414: LD_VAR 0 5
39418: PPUSH
39419: CALL_OW 448
39423: IFFALSE 39458
// begin result := [ chassis , engine , control , weapon ] ;
39425: LD_ADDR_VAR 0 6
39429: PUSH
39430: LD_VAR 0 2
39434: PUSH
39435: LD_VAR 0 3
39439: PUSH
39440: LD_VAR 0 4
39444: PUSH
39445: LD_VAR 0 5
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: ST_TO_ADDR
// exit ;
39456: GO 39870
// end ; _chassis := AvailableChassisList ( factory ) ;
39458: LD_ADDR_VAR 0 9
39462: PUSH
39463: LD_VAR 0 1
39467: PPUSH
39468: CALL_OW 475
39472: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39473: LD_ADDR_VAR 0 11
39477: PUSH
39478: LD_VAR 0 1
39482: PPUSH
39483: CALL_OW 476
39487: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39488: LD_ADDR_VAR 0 12
39492: PUSH
39493: LD_VAR 0 1
39497: PPUSH
39498: CALL_OW 477
39502: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39503: LD_ADDR_VAR 0 10
39507: PUSH
39508: LD_VAR 0 1
39512: PPUSH
39513: CALL_OW 478
39517: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39518: LD_VAR 0 9
39522: NOT
39523: PUSH
39524: LD_VAR 0 11
39528: NOT
39529: OR
39530: PUSH
39531: LD_VAR 0 12
39535: NOT
39536: OR
39537: PUSH
39538: LD_VAR 0 10
39542: NOT
39543: OR
39544: IFFALSE 39579
// begin result := [ chassis , engine , control , weapon ] ;
39546: LD_ADDR_VAR 0 6
39550: PUSH
39551: LD_VAR 0 2
39555: PUSH
39556: LD_VAR 0 3
39560: PUSH
39561: LD_VAR 0 4
39565: PUSH
39566: LD_VAR 0 5
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: ST_TO_ADDR
// exit ;
39577: GO 39870
// end ; if not chassis in _chassis then
39579: LD_VAR 0 2
39583: PUSH
39584: LD_VAR 0 9
39588: IN
39589: NOT
39590: IFFALSE 39616
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39592: LD_ADDR_VAR 0 2
39596: PUSH
39597: LD_VAR 0 9
39601: PUSH
39602: LD_INT 1
39604: PPUSH
39605: LD_VAR 0 9
39609: PPUSH
39610: CALL_OW 12
39614: ARRAY
39615: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39616: LD_VAR 0 2
39620: PPUSH
39621: LD_VAR 0 3
39625: PPUSH
39626: CALL 39875 0 2
39630: NOT
39631: IFFALSE 39690
// repeat engine := _engine [ 1 ] ;
39633: LD_ADDR_VAR 0 3
39637: PUSH
39638: LD_VAR 0 11
39642: PUSH
39643: LD_INT 1
39645: ARRAY
39646: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39647: LD_ADDR_VAR 0 11
39651: PUSH
39652: LD_VAR 0 11
39656: PPUSH
39657: LD_INT 1
39659: PPUSH
39660: CALL_OW 3
39664: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39665: LD_VAR 0 2
39669: PPUSH
39670: LD_VAR 0 3
39674: PPUSH
39675: CALL 39875 0 2
39679: PUSH
39680: LD_VAR 0 11
39684: PUSH
39685: EMPTY
39686: EQUAL
39687: OR
39688: IFFALSE 39633
// if not control in _control then
39690: LD_VAR 0 4
39694: PUSH
39695: LD_VAR 0 12
39699: IN
39700: NOT
39701: IFFALSE 39727
// control := _control [ rand ( 1 , _control ) ] ;
39703: LD_ADDR_VAR 0 4
39707: PUSH
39708: LD_VAR 0 12
39712: PUSH
39713: LD_INT 1
39715: PPUSH
39716: LD_VAR 0 12
39720: PPUSH
39721: CALL_OW 12
39725: ARRAY
39726: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39727: LD_VAR 0 2
39731: PPUSH
39732: LD_VAR 0 5
39736: PPUSH
39737: CALL 40095 0 2
39741: NOT
39742: IFFALSE 39801
// repeat weapon := _weapon [ 1 ] ;
39744: LD_ADDR_VAR 0 5
39748: PUSH
39749: LD_VAR 0 10
39753: PUSH
39754: LD_INT 1
39756: ARRAY
39757: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39758: LD_ADDR_VAR 0 10
39762: PUSH
39763: LD_VAR 0 10
39767: PPUSH
39768: LD_INT 1
39770: PPUSH
39771: CALL_OW 3
39775: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39776: LD_VAR 0 2
39780: PPUSH
39781: LD_VAR 0 5
39785: PPUSH
39786: CALL 40095 0 2
39790: PUSH
39791: LD_VAR 0 10
39795: PUSH
39796: EMPTY
39797: EQUAL
39798: OR
39799: IFFALSE 39744
// result := [ ] ;
39801: LD_ADDR_VAR 0 6
39805: PUSH
39806: EMPTY
39807: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39808: LD_VAR 0 1
39812: PPUSH
39813: LD_VAR 0 2
39817: PPUSH
39818: LD_VAR 0 3
39822: PPUSH
39823: LD_VAR 0 4
39827: PPUSH
39828: LD_VAR 0 5
39832: PPUSH
39833: CALL_OW 448
39837: IFFALSE 39870
// result := [ chassis , engine , control , weapon ] ;
39839: LD_ADDR_VAR 0 6
39843: PUSH
39844: LD_VAR 0 2
39848: PUSH
39849: LD_VAR 0 3
39853: PUSH
39854: LD_VAR 0 4
39858: PUSH
39859: LD_VAR 0 5
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: ST_TO_ADDR
// end ;
39870: LD_VAR 0 6
39874: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39875: LD_INT 0
39877: PPUSH
// if not chassis or not engine then
39878: LD_VAR 0 1
39882: NOT
39883: PUSH
39884: LD_VAR 0 2
39888: NOT
39889: OR
39890: IFFALSE 39894
// exit ;
39892: GO 40090
// case engine of engine_solar :
39894: LD_VAR 0 2
39898: PUSH
39899: LD_INT 2
39901: DOUBLE
39902: EQUAL
39903: IFTRUE 39907
39905: GO 39945
39907: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39908: LD_ADDR_VAR 0 3
39912: PUSH
39913: LD_INT 11
39915: PUSH
39916: LD_INT 12
39918: PUSH
39919: LD_INT 13
39921: PUSH
39922: LD_INT 14
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: LD_INT 3
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: ST_TO_ADDR
39943: GO 40074
39945: LD_INT 1
39947: DOUBLE
39948: EQUAL
39949: IFTRUE 39953
39951: GO 40015
39953: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39954: LD_ADDR_VAR 0 3
39958: PUSH
39959: LD_INT 11
39961: PUSH
39962: LD_INT 12
39964: PUSH
39965: LD_INT 13
39967: PUSH
39968: LD_INT 14
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: LD_INT 3
39979: PUSH
39980: LD_INT 4
39982: PUSH
39983: LD_INT 5
39985: PUSH
39986: LD_INT 21
39988: PUSH
39989: LD_INT 23
39991: PUSH
39992: LD_INT 22
39994: PUSH
39995: LD_INT 24
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: ST_TO_ADDR
40013: GO 40074
40015: LD_INT 3
40017: DOUBLE
40018: EQUAL
40019: IFTRUE 40023
40021: GO 40073
40023: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40024: LD_ADDR_VAR 0 3
40028: PUSH
40029: LD_INT 13
40031: PUSH
40032: LD_INT 14
40034: PUSH
40035: LD_INT 2
40037: PUSH
40038: LD_INT 3
40040: PUSH
40041: LD_INT 4
40043: PUSH
40044: LD_INT 5
40046: PUSH
40047: LD_INT 21
40049: PUSH
40050: LD_INT 22
40052: PUSH
40053: LD_INT 23
40055: PUSH
40056: LD_INT 24
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: ST_TO_ADDR
40071: GO 40074
40073: POP
// result := ( chassis in result ) ;
40074: LD_ADDR_VAR 0 3
40078: PUSH
40079: LD_VAR 0 1
40083: PUSH
40084: LD_VAR 0 3
40088: IN
40089: ST_TO_ADDR
// end ;
40090: LD_VAR 0 3
40094: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40095: LD_INT 0
40097: PPUSH
// if not chassis or not weapon then
40098: LD_VAR 0 1
40102: NOT
40103: PUSH
40104: LD_VAR 0 2
40108: NOT
40109: OR
40110: IFFALSE 40114
// exit ;
40112: GO 41176
// case weapon of us_machine_gun :
40114: LD_VAR 0 2
40118: PUSH
40119: LD_INT 2
40121: DOUBLE
40122: EQUAL
40123: IFTRUE 40127
40125: GO 40157
40127: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40128: LD_ADDR_VAR 0 3
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 2
40138: PUSH
40139: LD_INT 3
40141: PUSH
40142: LD_INT 4
40144: PUSH
40145: LD_INT 5
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: ST_TO_ADDR
40155: GO 41160
40157: LD_INT 3
40159: DOUBLE
40160: EQUAL
40161: IFTRUE 40165
40163: GO 40195
40165: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40166: LD_ADDR_VAR 0 3
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: LD_INT 3
40179: PUSH
40180: LD_INT 4
40182: PUSH
40183: LD_INT 5
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: ST_TO_ADDR
40193: GO 41160
40195: LD_INT 11
40197: DOUBLE
40198: EQUAL
40199: IFTRUE 40203
40201: GO 40233
40203: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40204: LD_ADDR_VAR 0 3
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 3
40217: PUSH
40218: LD_INT 4
40220: PUSH
40221: LD_INT 5
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: ST_TO_ADDR
40231: GO 41160
40233: LD_INT 4
40235: DOUBLE
40236: EQUAL
40237: IFTRUE 40241
40239: GO 40267
40241: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40242: LD_ADDR_VAR 0 3
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: LD_INT 3
40252: PUSH
40253: LD_INT 4
40255: PUSH
40256: LD_INT 5
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: ST_TO_ADDR
40265: GO 41160
40267: LD_INT 5
40269: DOUBLE
40270: EQUAL
40271: IFTRUE 40275
40273: GO 40301
40275: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40276: LD_ADDR_VAR 0 3
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 3
40286: PUSH
40287: LD_INT 4
40289: PUSH
40290: LD_INT 5
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: ST_TO_ADDR
40299: GO 41160
40301: LD_INT 9
40303: DOUBLE
40304: EQUAL
40305: IFTRUE 40309
40307: GO 40335
40309: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40310: LD_ADDR_VAR 0 3
40314: PUSH
40315: LD_INT 2
40317: PUSH
40318: LD_INT 3
40320: PUSH
40321: LD_INT 4
40323: PUSH
40324: LD_INT 5
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: ST_TO_ADDR
40333: GO 41160
40335: LD_INT 7
40337: DOUBLE
40338: EQUAL
40339: IFTRUE 40343
40341: GO 40369
40343: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40344: LD_ADDR_VAR 0 3
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: LD_INT 3
40354: PUSH
40355: LD_INT 4
40357: PUSH
40358: LD_INT 5
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: ST_TO_ADDR
40367: GO 41160
40369: LD_INT 12
40371: DOUBLE
40372: EQUAL
40373: IFTRUE 40377
40375: GO 40403
40377: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40378: LD_ADDR_VAR 0 3
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: LD_INT 3
40388: PUSH
40389: LD_INT 4
40391: PUSH
40392: LD_INT 5
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: ST_TO_ADDR
40401: GO 41160
40403: LD_INT 13
40405: DOUBLE
40406: EQUAL
40407: IFTRUE 40411
40409: GO 40437
40411: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40412: LD_ADDR_VAR 0 3
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: LD_INT 3
40422: PUSH
40423: LD_INT 4
40425: PUSH
40426: LD_INT 5
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: ST_TO_ADDR
40435: GO 41160
40437: LD_INT 14
40439: DOUBLE
40440: EQUAL
40441: IFTRUE 40445
40443: GO 40463
40445: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40446: LD_ADDR_VAR 0 3
40450: PUSH
40451: LD_INT 4
40453: PUSH
40454: LD_INT 5
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: ST_TO_ADDR
40461: GO 41160
40463: LD_INT 6
40465: DOUBLE
40466: EQUAL
40467: IFTRUE 40471
40469: GO 40489
40471: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40472: LD_ADDR_VAR 0 3
40476: PUSH
40477: LD_INT 4
40479: PUSH
40480: LD_INT 5
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: ST_TO_ADDR
40487: GO 41160
40489: LD_INT 10
40491: DOUBLE
40492: EQUAL
40493: IFTRUE 40497
40495: GO 40515
40497: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40498: LD_ADDR_VAR 0 3
40502: PUSH
40503: LD_INT 4
40505: PUSH
40506: LD_INT 5
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: ST_TO_ADDR
40513: GO 41160
40515: LD_INT 22
40517: DOUBLE
40518: EQUAL
40519: IFTRUE 40523
40521: GO 40549
40523: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40524: LD_ADDR_VAR 0 3
40528: PUSH
40529: LD_INT 11
40531: PUSH
40532: LD_INT 12
40534: PUSH
40535: LD_INT 13
40537: PUSH
40538: LD_INT 14
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: ST_TO_ADDR
40547: GO 41160
40549: LD_INT 23
40551: DOUBLE
40552: EQUAL
40553: IFTRUE 40557
40555: GO 40583
40557: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40558: LD_ADDR_VAR 0 3
40562: PUSH
40563: LD_INT 11
40565: PUSH
40566: LD_INT 12
40568: PUSH
40569: LD_INT 13
40571: PUSH
40572: LD_INT 14
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: ST_TO_ADDR
40581: GO 41160
40583: LD_INT 24
40585: DOUBLE
40586: EQUAL
40587: IFTRUE 40591
40589: GO 40617
40591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40592: LD_ADDR_VAR 0 3
40596: PUSH
40597: LD_INT 11
40599: PUSH
40600: LD_INT 12
40602: PUSH
40603: LD_INT 13
40605: PUSH
40606: LD_INT 14
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: ST_TO_ADDR
40615: GO 41160
40617: LD_INT 30
40619: DOUBLE
40620: EQUAL
40621: IFTRUE 40625
40623: GO 40651
40625: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40626: LD_ADDR_VAR 0 3
40630: PUSH
40631: LD_INT 11
40633: PUSH
40634: LD_INT 12
40636: PUSH
40637: LD_INT 13
40639: PUSH
40640: LD_INT 14
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: ST_TO_ADDR
40649: GO 41160
40651: LD_INT 25
40653: DOUBLE
40654: EQUAL
40655: IFTRUE 40659
40657: GO 40677
40659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40660: LD_ADDR_VAR 0 3
40664: PUSH
40665: LD_INT 13
40667: PUSH
40668: LD_INT 14
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: ST_TO_ADDR
40675: GO 41160
40677: LD_INT 27
40679: DOUBLE
40680: EQUAL
40681: IFTRUE 40685
40683: GO 40703
40685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40686: LD_ADDR_VAR 0 3
40690: PUSH
40691: LD_INT 13
40693: PUSH
40694: LD_INT 14
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: ST_TO_ADDR
40701: GO 41160
40703: LD_EXP 53
40707: DOUBLE
40708: EQUAL
40709: IFTRUE 40713
40711: GO 40739
40713: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40714: LD_ADDR_VAR 0 3
40718: PUSH
40719: LD_INT 11
40721: PUSH
40722: LD_INT 12
40724: PUSH
40725: LD_INT 13
40727: PUSH
40728: LD_INT 14
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: ST_TO_ADDR
40737: GO 41160
40739: LD_INT 28
40741: DOUBLE
40742: EQUAL
40743: IFTRUE 40747
40745: GO 40765
40747: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40748: LD_ADDR_VAR 0 3
40752: PUSH
40753: LD_INT 13
40755: PUSH
40756: LD_INT 14
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: ST_TO_ADDR
40763: GO 41160
40765: LD_INT 29
40767: DOUBLE
40768: EQUAL
40769: IFTRUE 40773
40771: GO 40791
40773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40774: LD_ADDR_VAR 0 3
40778: PUSH
40779: LD_INT 13
40781: PUSH
40782: LD_INT 14
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: ST_TO_ADDR
40789: GO 41160
40791: LD_INT 31
40793: DOUBLE
40794: EQUAL
40795: IFTRUE 40799
40797: GO 40817
40799: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40800: LD_ADDR_VAR 0 3
40804: PUSH
40805: LD_INT 13
40807: PUSH
40808: LD_INT 14
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: ST_TO_ADDR
40815: GO 41160
40817: LD_INT 26
40819: DOUBLE
40820: EQUAL
40821: IFTRUE 40825
40823: GO 40843
40825: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40826: LD_ADDR_VAR 0 3
40830: PUSH
40831: LD_INT 13
40833: PUSH
40834: LD_INT 14
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: ST_TO_ADDR
40841: GO 41160
40843: LD_INT 42
40845: DOUBLE
40846: EQUAL
40847: IFTRUE 40851
40849: GO 40877
40851: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40852: LD_ADDR_VAR 0 3
40856: PUSH
40857: LD_INT 21
40859: PUSH
40860: LD_INT 22
40862: PUSH
40863: LD_INT 23
40865: PUSH
40866: LD_INT 24
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: ST_TO_ADDR
40875: GO 41160
40877: LD_INT 43
40879: DOUBLE
40880: EQUAL
40881: IFTRUE 40885
40883: GO 40911
40885: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40886: LD_ADDR_VAR 0 3
40890: PUSH
40891: LD_INT 21
40893: PUSH
40894: LD_INT 22
40896: PUSH
40897: LD_INT 23
40899: PUSH
40900: LD_INT 24
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: ST_TO_ADDR
40909: GO 41160
40911: LD_INT 44
40913: DOUBLE
40914: EQUAL
40915: IFTRUE 40919
40917: GO 40945
40919: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40920: LD_ADDR_VAR 0 3
40924: PUSH
40925: LD_INT 21
40927: PUSH
40928: LD_INT 22
40930: PUSH
40931: LD_INT 23
40933: PUSH
40934: LD_INT 24
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: ST_TO_ADDR
40943: GO 41160
40945: LD_INT 45
40947: DOUBLE
40948: EQUAL
40949: IFTRUE 40953
40951: GO 40979
40953: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40954: LD_ADDR_VAR 0 3
40958: PUSH
40959: LD_INT 21
40961: PUSH
40962: LD_INT 22
40964: PUSH
40965: LD_INT 23
40967: PUSH
40968: LD_INT 24
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: ST_TO_ADDR
40977: GO 41160
40979: LD_INT 49
40981: DOUBLE
40982: EQUAL
40983: IFTRUE 40987
40985: GO 41013
40987: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40988: LD_ADDR_VAR 0 3
40992: PUSH
40993: LD_INT 21
40995: PUSH
40996: LD_INT 22
40998: PUSH
40999: LD_INT 23
41001: PUSH
41002: LD_INT 24
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: ST_TO_ADDR
41011: GO 41160
41013: LD_INT 51
41015: DOUBLE
41016: EQUAL
41017: IFTRUE 41021
41019: GO 41047
41021: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41022: LD_ADDR_VAR 0 3
41026: PUSH
41027: LD_INT 21
41029: PUSH
41030: LD_INT 22
41032: PUSH
41033: LD_INT 23
41035: PUSH
41036: LD_INT 24
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: ST_TO_ADDR
41045: GO 41160
41047: LD_INT 52
41049: DOUBLE
41050: EQUAL
41051: IFTRUE 41055
41053: GO 41081
41055: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41056: LD_ADDR_VAR 0 3
41060: PUSH
41061: LD_INT 21
41063: PUSH
41064: LD_INT 22
41066: PUSH
41067: LD_INT 23
41069: PUSH
41070: LD_INT 24
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: ST_TO_ADDR
41079: GO 41160
41081: LD_INT 53
41083: DOUBLE
41084: EQUAL
41085: IFTRUE 41089
41087: GO 41107
41089: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41090: LD_ADDR_VAR 0 3
41094: PUSH
41095: LD_INT 23
41097: PUSH
41098: LD_INT 24
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: ST_TO_ADDR
41105: GO 41160
41107: LD_INT 46
41109: DOUBLE
41110: EQUAL
41111: IFTRUE 41115
41113: GO 41133
41115: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41116: LD_ADDR_VAR 0 3
41120: PUSH
41121: LD_INT 23
41123: PUSH
41124: LD_INT 24
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: ST_TO_ADDR
41131: GO 41160
41133: LD_INT 47
41135: DOUBLE
41136: EQUAL
41137: IFTRUE 41141
41139: GO 41159
41141: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41142: LD_ADDR_VAR 0 3
41146: PUSH
41147: LD_INT 23
41149: PUSH
41150: LD_INT 24
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: ST_TO_ADDR
41157: GO 41160
41159: POP
// result := ( chassis in result ) ;
41160: LD_ADDR_VAR 0 3
41164: PUSH
41165: LD_VAR 0 1
41169: PUSH
41170: LD_VAR 0 3
41174: IN
41175: ST_TO_ADDR
// end ;
41176: LD_VAR 0 3
41180: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41181: LD_INT 0
41183: PPUSH
41184: PPUSH
41185: PPUSH
41186: PPUSH
41187: PPUSH
41188: PPUSH
41189: PPUSH
// result := array ;
41190: LD_ADDR_VAR 0 5
41194: PUSH
41195: LD_VAR 0 1
41199: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41200: LD_VAR 0 1
41204: NOT
41205: PUSH
41206: LD_VAR 0 2
41210: NOT
41211: OR
41212: PUSH
41213: LD_VAR 0 3
41217: NOT
41218: OR
41219: PUSH
41220: LD_VAR 0 2
41224: PUSH
41225: LD_VAR 0 1
41229: GREATER
41230: OR
41231: PUSH
41232: LD_VAR 0 3
41236: PUSH
41237: LD_VAR 0 1
41241: GREATER
41242: OR
41243: IFFALSE 41247
// exit ;
41245: GO 41543
// if direction then
41247: LD_VAR 0 4
41251: IFFALSE 41315
// begin d := 1 ;
41253: LD_ADDR_VAR 0 9
41257: PUSH
41258: LD_INT 1
41260: ST_TO_ADDR
// if i_from > i_to then
41261: LD_VAR 0 2
41265: PUSH
41266: LD_VAR 0 3
41270: GREATER
41271: IFFALSE 41297
// length := ( array - i_from ) + i_to else
41273: LD_ADDR_VAR 0 11
41277: PUSH
41278: LD_VAR 0 1
41282: PUSH
41283: LD_VAR 0 2
41287: MINUS
41288: PUSH
41289: LD_VAR 0 3
41293: PLUS
41294: ST_TO_ADDR
41295: GO 41313
// length := i_to - i_from ;
41297: LD_ADDR_VAR 0 11
41301: PUSH
41302: LD_VAR 0 3
41306: PUSH
41307: LD_VAR 0 2
41311: MINUS
41312: ST_TO_ADDR
// end else
41313: GO 41376
// begin d := - 1 ;
41315: LD_ADDR_VAR 0 9
41319: PUSH
41320: LD_INT 1
41322: NEG
41323: ST_TO_ADDR
// if i_from > i_to then
41324: LD_VAR 0 2
41328: PUSH
41329: LD_VAR 0 3
41333: GREATER
41334: IFFALSE 41354
// length := i_from - i_to else
41336: LD_ADDR_VAR 0 11
41340: PUSH
41341: LD_VAR 0 2
41345: PUSH
41346: LD_VAR 0 3
41350: MINUS
41351: ST_TO_ADDR
41352: GO 41376
// length := ( array - i_to ) + i_from ;
41354: LD_ADDR_VAR 0 11
41358: PUSH
41359: LD_VAR 0 1
41363: PUSH
41364: LD_VAR 0 3
41368: MINUS
41369: PUSH
41370: LD_VAR 0 2
41374: PLUS
41375: ST_TO_ADDR
// end ; if not length then
41376: LD_VAR 0 11
41380: NOT
41381: IFFALSE 41385
// exit ;
41383: GO 41543
// tmp := array ;
41385: LD_ADDR_VAR 0 10
41389: PUSH
41390: LD_VAR 0 1
41394: ST_TO_ADDR
// for i = 1 to length do
41395: LD_ADDR_VAR 0 6
41399: PUSH
41400: DOUBLE
41401: LD_INT 1
41403: DEC
41404: ST_TO_ADDR
41405: LD_VAR 0 11
41409: PUSH
41410: FOR_TO
41411: IFFALSE 41531
// begin for j = 1 to array do
41413: LD_ADDR_VAR 0 7
41417: PUSH
41418: DOUBLE
41419: LD_INT 1
41421: DEC
41422: ST_TO_ADDR
41423: LD_VAR 0 1
41427: PUSH
41428: FOR_TO
41429: IFFALSE 41517
// begin k := j + d ;
41431: LD_ADDR_VAR 0 8
41435: PUSH
41436: LD_VAR 0 7
41440: PUSH
41441: LD_VAR 0 9
41445: PLUS
41446: ST_TO_ADDR
// if k > array then
41447: LD_VAR 0 8
41451: PUSH
41452: LD_VAR 0 1
41456: GREATER
41457: IFFALSE 41467
// k := 1 ;
41459: LD_ADDR_VAR 0 8
41463: PUSH
41464: LD_INT 1
41466: ST_TO_ADDR
// if not k then
41467: LD_VAR 0 8
41471: NOT
41472: IFFALSE 41484
// k := array ;
41474: LD_ADDR_VAR 0 8
41478: PUSH
41479: LD_VAR 0 1
41483: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41484: LD_ADDR_VAR 0 10
41488: PUSH
41489: LD_VAR 0 10
41493: PPUSH
41494: LD_VAR 0 8
41498: PPUSH
41499: LD_VAR 0 1
41503: PUSH
41504: LD_VAR 0 7
41508: ARRAY
41509: PPUSH
41510: CALL_OW 1
41514: ST_TO_ADDR
// end ;
41515: GO 41428
41517: POP
41518: POP
// array := tmp ;
41519: LD_ADDR_VAR 0 1
41523: PUSH
41524: LD_VAR 0 10
41528: ST_TO_ADDR
// end ;
41529: GO 41410
41531: POP
41532: POP
// result := array ;
41533: LD_ADDR_VAR 0 5
41537: PUSH
41538: LD_VAR 0 1
41542: ST_TO_ADDR
// end ;
41543: LD_VAR 0 5
41547: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41548: LD_INT 0
41550: PPUSH
41551: PPUSH
// result := 0 ;
41552: LD_ADDR_VAR 0 3
41556: PUSH
41557: LD_INT 0
41559: ST_TO_ADDR
// if not array or not value in array then
41560: LD_VAR 0 1
41564: NOT
41565: PUSH
41566: LD_VAR 0 2
41570: PUSH
41571: LD_VAR 0 1
41575: IN
41576: NOT
41577: OR
41578: IFFALSE 41582
// exit ;
41580: GO 41636
// for i = 1 to array do
41582: LD_ADDR_VAR 0 4
41586: PUSH
41587: DOUBLE
41588: LD_INT 1
41590: DEC
41591: ST_TO_ADDR
41592: LD_VAR 0 1
41596: PUSH
41597: FOR_TO
41598: IFFALSE 41634
// if value = array [ i ] then
41600: LD_VAR 0 2
41604: PUSH
41605: LD_VAR 0 1
41609: PUSH
41610: LD_VAR 0 4
41614: ARRAY
41615: EQUAL
41616: IFFALSE 41632
// begin result := i ;
41618: LD_ADDR_VAR 0 3
41622: PUSH
41623: LD_VAR 0 4
41627: ST_TO_ADDR
// exit ;
41628: POP
41629: POP
41630: GO 41636
// end ;
41632: GO 41597
41634: POP
41635: POP
// end ;
41636: LD_VAR 0 3
41640: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41641: LD_INT 0
41643: PPUSH
// vc_chassis := chassis ;
41644: LD_ADDR_OWVAR 37
41648: PUSH
41649: LD_VAR 0 1
41653: ST_TO_ADDR
// vc_engine := engine ;
41654: LD_ADDR_OWVAR 39
41658: PUSH
41659: LD_VAR 0 2
41663: ST_TO_ADDR
// vc_control := control ;
41664: LD_ADDR_OWVAR 38
41668: PUSH
41669: LD_VAR 0 3
41673: ST_TO_ADDR
// vc_weapon := weapon ;
41674: LD_ADDR_OWVAR 40
41678: PUSH
41679: LD_VAR 0 4
41683: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41684: LD_ADDR_OWVAR 41
41688: PUSH
41689: LD_VAR 0 5
41693: ST_TO_ADDR
// end ;
41694: LD_VAR 0 6
41698: RET
// export function WantPlant ( unit ) ; var task ; begin
41699: LD_INT 0
41701: PPUSH
41702: PPUSH
// result := false ;
41703: LD_ADDR_VAR 0 2
41707: PUSH
41708: LD_INT 0
41710: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41711: LD_ADDR_VAR 0 3
41715: PUSH
41716: LD_VAR 0 1
41720: PPUSH
41721: CALL_OW 437
41725: ST_TO_ADDR
// if task then
41726: LD_VAR 0 3
41730: IFFALSE 41758
// if task [ 1 ] [ 1 ] = p then
41732: LD_VAR 0 3
41736: PUSH
41737: LD_INT 1
41739: ARRAY
41740: PUSH
41741: LD_INT 1
41743: ARRAY
41744: PUSH
41745: LD_STRING p
41747: EQUAL
41748: IFFALSE 41758
// result := true ;
41750: LD_ADDR_VAR 0 2
41754: PUSH
41755: LD_INT 1
41757: ST_TO_ADDR
// end ;
41758: LD_VAR 0 2
41762: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41763: LD_INT 0
41765: PPUSH
41766: PPUSH
41767: PPUSH
41768: PPUSH
// if pos < 1 then
41769: LD_VAR 0 2
41773: PUSH
41774: LD_INT 1
41776: LESS
41777: IFFALSE 41781
// exit ;
41779: GO 42084
// if pos = 1 then
41781: LD_VAR 0 2
41785: PUSH
41786: LD_INT 1
41788: EQUAL
41789: IFFALSE 41822
// result := Replace ( arr , pos [ 1 ] , value ) else
41791: LD_ADDR_VAR 0 4
41795: PUSH
41796: LD_VAR 0 1
41800: PPUSH
41801: LD_VAR 0 2
41805: PUSH
41806: LD_INT 1
41808: ARRAY
41809: PPUSH
41810: LD_VAR 0 3
41814: PPUSH
41815: CALL_OW 1
41819: ST_TO_ADDR
41820: GO 42084
// begin tmp := arr ;
41822: LD_ADDR_VAR 0 6
41826: PUSH
41827: LD_VAR 0 1
41831: ST_TO_ADDR
// s_arr := [ tmp ] ;
41832: LD_ADDR_VAR 0 7
41836: PUSH
41837: LD_VAR 0 6
41841: PUSH
41842: EMPTY
41843: LIST
41844: ST_TO_ADDR
// for i = 1 to pos - 1 do
41845: LD_ADDR_VAR 0 5
41849: PUSH
41850: DOUBLE
41851: LD_INT 1
41853: DEC
41854: ST_TO_ADDR
41855: LD_VAR 0 2
41859: PUSH
41860: LD_INT 1
41862: MINUS
41863: PUSH
41864: FOR_TO
41865: IFFALSE 41910
// begin tmp := tmp [ pos [ i ] ] ;
41867: LD_ADDR_VAR 0 6
41871: PUSH
41872: LD_VAR 0 6
41876: PUSH
41877: LD_VAR 0 2
41881: PUSH
41882: LD_VAR 0 5
41886: ARRAY
41887: ARRAY
41888: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41889: LD_ADDR_VAR 0 7
41893: PUSH
41894: LD_VAR 0 7
41898: PUSH
41899: LD_VAR 0 6
41903: PUSH
41904: EMPTY
41905: LIST
41906: ADD
41907: ST_TO_ADDR
// end ;
41908: GO 41864
41910: POP
41911: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41912: LD_ADDR_VAR 0 6
41916: PUSH
41917: LD_VAR 0 6
41921: PPUSH
41922: LD_VAR 0 2
41926: PUSH
41927: LD_VAR 0 2
41931: ARRAY
41932: PPUSH
41933: LD_VAR 0 3
41937: PPUSH
41938: CALL_OW 1
41942: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41943: LD_ADDR_VAR 0 7
41947: PUSH
41948: LD_VAR 0 7
41952: PPUSH
41953: LD_VAR 0 7
41957: PPUSH
41958: LD_VAR 0 6
41962: PPUSH
41963: CALL_OW 1
41967: ST_TO_ADDR
// for i = s_arr downto 2 do
41968: LD_ADDR_VAR 0 5
41972: PUSH
41973: DOUBLE
41974: LD_VAR 0 7
41978: INC
41979: ST_TO_ADDR
41980: LD_INT 2
41982: PUSH
41983: FOR_DOWNTO
41984: IFFALSE 42068
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41986: LD_ADDR_VAR 0 6
41990: PUSH
41991: LD_VAR 0 7
41995: PUSH
41996: LD_VAR 0 5
42000: PUSH
42001: LD_INT 1
42003: MINUS
42004: ARRAY
42005: PPUSH
42006: LD_VAR 0 2
42010: PUSH
42011: LD_VAR 0 5
42015: PUSH
42016: LD_INT 1
42018: MINUS
42019: ARRAY
42020: PPUSH
42021: LD_VAR 0 7
42025: PUSH
42026: LD_VAR 0 5
42030: ARRAY
42031: PPUSH
42032: CALL_OW 1
42036: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42037: LD_ADDR_VAR 0 7
42041: PUSH
42042: LD_VAR 0 7
42046: PPUSH
42047: LD_VAR 0 5
42051: PUSH
42052: LD_INT 1
42054: MINUS
42055: PPUSH
42056: LD_VAR 0 6
42060: PPUSH
42061: CALL_OW 1
42065: ST_TO_ADDR
// end ;
42066: GO 41983
42068: POP
42069: POP
// result := s_arr [ 1 ] ;
42070: LD_ADDR_VAR 0 4
42074: PUSH
42075: LD_VAR 0 7
42079: PUSH
42080: LD_INT 1
42082: ARRAY
42083: ST_TO_ADDR
// end ; end ;
42084: LD_VAR 0 4
42088: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42089: LD_INT 0
42091: PPUSH
42092: PPUSH
// if not list then
42093: LD_VAR 0 1
42097: NOT
42098: IFFALSE 42102
// exit ;
42100: GO 42193
// i := list [ pos1 ] ;
42102: LD_ADDR_VAR 0 5
42106: PUSH
42107: LD_VAR 0 1
42111: PUSH
42112: LD_VAR 0 2
42116: ARRAY
42117: ST_TO_ADDR
// if not i then
42118: LD_VAR 0 5
42122: NOT
42123: IFFALSE 42127
// exit ;
42125: GO 42193
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42127: LD_ADDR_VAR 0 1
42131: PUSH
42132: LD_VAR 0 1
42136: PPUSH
42137: LD_VAR 0 2
42141: PPUSH
42142: LD_VAR 0 1
42146: PUSH
42147: LD_VAR 0 3
42151: ARRAY
42152: PPUSH
42153: CALL_OW 1
42157: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42158: LD_ADDR_VAR 0 1
42162: PUSH
42163: LD_VAR 0 1
42167: PPUSH
42168: LD_VAR 0 3
42172: PPUSH
42173: LD_VAR 0 5
42177: PPUSH
42178: CALL_OW 1
42182: ST_TO_ADDR
// result := list ;
42183: LD_ADDR_VAR 0 4
42187: PUSH
42188: LD_VAR 0 1
42192: ST_TO_ADDR
// end ;
42193: LD_VAR 0 4
42197: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42198: LD_INT 0
42200: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42201: LD_ADDR_VAR 0 5
42205: PUSH
42206: LD_VAR 0 1
42210: PPUSH
42211: CALL_OW 250
42215: PPUSH
42216: LD_VAR 0 1
42220: PPUSH
42221: CALL_OW 251
42225: PPUSH
42226: LD_VAR 0 2
42230: PPUSH
42231: LD_VAR 0 3
42235: PPUSH
42236: LD_VAR 0 4
42240: PPUSH
42241: CALL 42251 0 5
42245: ST_TO_ADDR
// end ;
42246: LD_VAR 0 5
42250: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42251: LD_INT 0
42253: PPUSH
42254: PPUSH
42255: PPUSH
42256: PPUSH
// if not list then
42257: LD_VAR 0 3
42261: NOT
42262: IFFALSE 42266
// exit ;
42264: GO 42654
// result := [ ] ;
42266: LD_ADDR_VAR 0 6
42270: PUSH
42271: EMPTY
42272: ST_TO_ADDR
// for i in list do
42273: LD_ADDR_VAR 0 7
42277: PUSH
42278: LD_VAR 0 3
42282: PUSH
42283: FOR_IN
42284: IFFALSE 42486
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42286: LD_ADDR_VAR 0 9
42290: PUSH
42291: LD_VAR 0 7
42295: PPUSH
42296: LD_VAR 0 1
42300: PPUSH
42301: LD_VAR 0 2
42305: PPUSH
42306: CALL_OW 297
42310: ST_TO_ADDR
// if not result then
42311: LD_VAR 0 6
42315: NOT
42316: IFFALSE 42342
// result := [ [ i , tmp ] ] else
42318: LD_ADDR_VAR 0 6
42322: PUSH
42323: LD_VAR 0 7
42327: PUSH
42328: LD_VAR 0 9
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: EMPTY
42338: LIST
42339: ST_TO_ADDR
42340: GO 42484
// begin if result [ result ] [ 2 ] < tmp then
42342: LD_VAR 0 6
42346: PUSH
42347: LD_VAR 0 6
42351: ARRAY
42352: PUSH
42353: LD_INT 2
42355: ARRAY
42356: PUSH
42357: LD_VAR 0 9
42361: LESS
42362: IFFALSE 42404
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42364: LD_ADDR_VAR 0 6
42368: PUSH
42369: LD_VAR 0 6
42373: PPUSH
42374: LD_VAR 0 6
42378: PUSH
42379: LD_INT 1
42381: PLUS
42382: PPUSH
42383: LD_VAR 0 7
42387: PUSH
42388: LD_VAR 0 9
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PPUSH
42397: CALL_OW 2
42401: ST_TO_ADDR
42402: GO 42484
// for j = 1 to result do
42404: LD_ADDR_VAR 0 8
42408: PUSH
42409: DOUBLE
42410: LD_INT 1
42412: DEC
42413: ST_TO_ADDR
42414: LD_VAR 0 6
42418: PUSH
42419: FOR_TO
42420: IFFALSE 42482
// begin if tmp < result [ j ] [ 2 ] then
42422: LD_VAR 0 9
42426: PUSH
42427: LD_VAR 0 6
42431: PUSH
42432: LD_VAR 0 8
42436: ARRAY
42437: PUSH
42438: LD_INT 2
42440: ARRAY
42441: LESS
42442: IFFALSE 42480
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42444: LD_ADDR_VAR 0 6
42448: PUSH
42449: LD_VAR 0 6
42453: PPUSH
42454: LD_VAR 0 8
42458: PPUSH
42459: LD_VAR 0 7
42463: PUSH
42464: LD_VAR 0 9
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PPUSH
42473: CALL_OW 2
42477: ST_TO_ADDR
// break ;
42478: GO 42482
// end ; end ;
42480: GO 42419
42482: POP
42483: POP
// end ; end ;
42484: GO 42283
42486: POP
42487: POP
// if result and not asc then
42488: LD_VAR 0 6
42492: PUSH
42493: LD_VAR 0 4
42497: NOT
42498: AND
42499: IFFALSE 42574
// begin tmp := result ;
42501: LD_ADDR_VAR 0 9
42505: PUSH
42506: LD_VAR 0 6
42510: ST_TO_ADDR
// for i = tmp downto 1 do
42511: LD_ADDR_VAR 0 7
42515: PUSH
42516: DOUBLE
42517: LD_VAR 0 9
42521: INC
42522: ST_TO_ADDR
42523: LD_INT 1
42525: PUSH
42526: FOR_DOWNTO
42527: IFFALSE 42572
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42529: LD_ADDR_VAR 0 6
42533: PUSH
42534: LD_VAR 0 6
42538: PPUSH
42539: LD_VAR 0 9
42543: PUSH
42544: LD_VAR 0 7
42548: MINUS
42549: PUSH
42550: LD_INT 1
42552: PLUS
42553: PPUSH
42554: LD_VAR 0 9
42558: PUSH
42559: LD_VAR 0 7
42563: ARRAY
42564: PPUSH
42565: CALL_OW 1
42569: ST_TO_ADDR
42570: GO 42526
42572: POP
42573: POP
// end ; tmp := [ ] ;
42574: LD_ADDR_VAR 0 9
42578: PUSH
42579: EMPTY
42580: ST_TO_ADDR
// if mode then
42581: LD_VAR 0 5
42585: IFFALSE 42654
// begin for i = 1 to result do
42587: LD_ADDR_VAR 0 7
42591: PUSH
42592: DOUBLE
42593: LD_INT 1
42595: DEC
42596: ST_TO_ADDR
42597: LD_VAR 0 6
42601: PUSH
42602: FOR_TO
42603: IFFALSE 42642
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42605: LD_ADDR_VAR 0 9
42609: PUSH
42610: LD_VAR 0 9
42614: PPUSH
42615: LD_VAR 0 7
42619: PPUSH
42620: LD_VAR 0 6
42624: PUSH
42625: LD_VAR 0 7
42629: ARRAY
42630: PUSH
42631: LD_INT 1
42633: ARRAY
42634: PPUSH
42635: CALL_OW 1
42639: ST_TO_ADDR
42640: GO 42602
42642: POP
42643: POP
// result := tmp ;
42644: LD_ADDR_VAR 0 6
42648: PUSH
42649: LD_VAR 0 9
42653: ST_TO_ADDR
// end ; end ;
42654: LD_VAR 0 6
42658: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42659: LD_INT 0
42661: PPUSH
42662: PPUSH
42663: PPUSH
42664: PPUSH
42665: PPUSH
42666: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42667: LD_ADDR_VAR 0 5
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: EMPTY
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: ST_TO_ADDR
// if not x or not y then
42689: LD_VAR 0 2
42693: NOT
42694: PUSH
42695: LD_VAR 0 3
42699: NOT
42700: OR
42701: IFFALSE 42705
// exit ;
42703: GO 44357
// if not range then
42705: LD_VAR 0 4
42709: NOT
42710: IFFALSE 42720
// range := 10 ;
42712: LD_ADDR_VAR 0 4
42716: PUSH
42717: LD_INT 10
42719: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42720: LD_ADDR_VAR 0 8
42724: PUSH
42725: LD_INT 81
42727: PUSH
42728: LD_VAR 0 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 92
42739: PUSH
42740: LD_VAR 0 2
42744: PUSH
42745: LD_VAR 0 3
42749: PUSH
42750: LD_VAR 0 4
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 3
42763: PUSH
42764: LD_INT 21
42766: PUSH
42767: LD_INT 3
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: LIST
42782: PPUSH
42783: CALL_OW 69
42787: ST_TO_ADDR
// if not tmp then
42788: LD_VAR 0 8
42792: NOT
42793: IFFALSE 42797
// exit ;
42795: GO 44357
// for i in tmp do
42797: LD_ADDR_VAR 0 6
42801: PUSH
42802: LD_VAR 0 8
42806: PUSH
42807: FOR_IN
42808: IFFALSE 44332
// begin points := [ 0 , 0 , 0 ] ;
42810: LD_ADDR_VAR 0 9
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: ST_TO_ADDR
// bpoints := 1 ;
42829: LD_ADDR_VAR 0 10
42833: PUSH
42834: LD_INT 1
42836: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42837: LD_VAR 0 6
42841: PPUSH
42842: CALL_OW 247
42846: PUSH
42847: LD_INT 1
42849: DOUBLE
42850: EQUAL
42851: IFTRUE 42855
42853: GO 43433
42855: POP
// begin if GetClass ( i ) = 1 then
42856: LD_VAR 0 6
42860: PPUSH
42861: CALL_OW 257
42865: PUSH
42866: LD_INT 1
42868: EQUAL
42869: IFFALSE 42890
// points := [ 10 , 5 , 3 ] ;
42871: LD_ADDR_VAR 0 9
42875: PUSH
42876: LD_INT 10
42878: PUSH
42879: LD_INT 5
42881: PUSH
42882: LD_INT 3
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: LIST
42889: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42890: LD_VAR 0 6
42894: PPUSH
42895: CALL_OW 257
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: LD_INT 3
42905: PUSH
42906: LD_INT 4
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: LIST
42913: IN
42914: IFFALSE 42935
// points := [ 3 , 2 , 1 ] ;
42916: LD_ADDR_VAR 0 9
42920: PUSH
42921: LD_INT 3
42923: PUSH
42924: LD_INT 2
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: LIST
42934: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42935: LD_VAR 0 6
42939: PPUSH
42940: CALL_OW 257
42944: PUSH
42945: LD_INT 5
42947: EQUAL
42948: IFFALSE 42969
// points := [ 130 , 5 , 2 ] ;
42950: LD_ADDR_VAR 0 9
42954: PUSH
42955: LD_INT 130
42957: PUSH
42958: LD_INT 5
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42969: LD_VAR 0 6
42973: PPUSH
42974: CALL_OW 257
42978: PUSH
42979: LD_INT 8
42981: EQUAL
42982: IFFALSE 43003
// points := [ 35 , 35 , 30 ] ;
42984: LD_ADDR_VAR 0 9
42988: PUSH
42989: LD_INT 35
42991: PUSH
42992: LD_INT 35
42994: PUSH
42995: LD_INT 30
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43003: LD_VAR 0 6
43007: PPUSH
43008: CALL_OW 257
43012: PUSH
43013: LD_INT 9
43015: EQUAL
43016: IFFALSE 43037
// points := [ 20 , 55 , 40 ] ;
43018: LD_ADDR_VAR 0 9
43022: PUSH
43023: LD_INT 20
43025: PUSH
43026: LD_INT 55
43028: PUSH
43029: LD_INT 40
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43037: LD_VAR 0 6
43041: PPUSH
43042: CALL_OW 257
43046: PUSH
43047: LD_INT 12
43049: PUSH
43050: LD_INT 16
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: IN
43057: IFFALSE 43078
// points := [ 5 , 3 , 2 ] ;
43059: LD_ADDR_VAR 0 9
43063: PUSH
43064: LD_INT 5
43066: PUSH
43067: LD_INT 3
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43078: LD_VAR 0 6
43082: PPUSH
43083: CALL_OW 257
43087: PUSH
43088: LD_INT 17
43090: EQUAL
43091: IFFALSE 43112
// points := [ 100 , 50 , 75 ] ;
43093: LD_ADDR_VAR 0 9
43097: PUSH
43098: LD_INT 100
43100: PUSH
43101: LD_INT 50
43103: PUSH
43104: LD_INT 75
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43112: LD_VAR 0 6
43116: PPUSH
43117: CALL_OW 257
43121: PUSH
43122: LD_INT 15
43124: EQUAL
43125: IFFALSE 43146
// points := [ 10 , 5 , 3 ] ;
43127: LD_ADDR_VAR 0 9
43131: PUSH
43132: LD_INT 10
43134: PUSH
43135: LD_INT 5
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: LIST
43145: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43146: LD_VAR 0 6
43150: PPUSH
43151: CALL_OW 257
43155: PUSH
43156: LD_INT 14
43158: EQUAL
43159: IFFALSE 43180
// points := [ 10 , 0 , 0 ] ;
43161: LD_ADDR_VAR 0 9
43165: PUSH
43166: LD_INT 10
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: LIST
43179: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43180: LD_VAR 0 6
43184: PPUSH
43185: CALL_OW 257
43189: PUSH
43190: LD_INT 11
43192: EQUAL
43193: IFFALSE 43214
// points := [ 30 , 10 , 5 ] ;
43195: LD_ADDR_VAR 0 9
43199: PUSH
43200: LD_INT 30
43202: PUSH
43203: LD_INT 10
43205: PUSH
43206: LD_INT 5
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: LIST
43213: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43214: LD_VAR 0 1
43218: PPUSH
43219: LD_INT 5
43221: PPUSH
43222: CALL_OW 321
43226: PUSH
43227: LD_INT 2
43229: EQUAL
43230: IFFALSE 43247
// bpoints := bpoints * 1.8 ;
43232: LD_ADDR_VAR 0 10
43236: PUSH
43237: LD_VAR 0 10
43241: PUSH
43242: LD_REAL  1.80000000000000E+0000
43245: MUL
43246: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43247: LD_VAR 0 6
43251: PPUSH
43252: CALL_OW 257
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: LD_INT 3
43265: PUSH
43266: LD_INT 4
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: IN
43275: PUSH
43276: LD_VAR 0 1
43280: PPUSH
43281: LD_INT 51
43283: PPUSH
43284: CALL_OW 321
43288: PUSH
43289: LD_INT 2
43291: EQUAL
43292: AND
43293: IFFALSE 43310
// bpoints := bpoints * 1.2 ;
43295: LD_ADDR_VAR 0 10
43299: PUSH
43300: LD_VAR 0 10
43304: PUSH
43305: LD_REAL  1.20000000000000E+0000
43308: MUL
43309: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43310: LD_VAR 0 6
43314: PPUSH
43315: CALL_OW 257
43319: PUSH
43320: LD_INT 5
43322: PUSH
43323: LD_INT 7
43325: PUSH
43326: LD_INT 9
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: LIST
43333: IN
43334: PUSH
43335: LD_VAR 0 1
43339: PPUSH
43340: LD_INT 52
43342: PPUSH
43343: CALL_OW 321
43347: PUSH
43348: LD_INT 2
43350: EQUAL
43351: AND
43352: IFFALSE 43369
// bpoints := bpoints * 1.5 ;
43354: LD_ADDR_VAR 0 10
43358: PUSH
43359: LD_VAR 0 10
43363: PUSH
43364: LD_REAL  1.50000000000000E+0000
43367: MUL
43368: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43369: LD_VAR 0 1
43373: PPUSH
43374: LD_INT 66
43376: PPUSH
43377: CALL_OW 321
43381: PUSH
43382: LD_INT 2
43384: EQUAL
43385: IFFALSE 43402
// bpoints := bpoints * 1.1 ;
43387: LD_ADDR_VAR 0 10
43391: PUSH
43392: LD_VAR 0 10
43396: PUSH
43397: LD_REAL  1.10000000000000E+0000
43400: MUL
43401: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43402: LD_ADDR_VAR 0 10
43406: PUSH
43407: LD_VAR 0 10
43411: PUSH
43412: LD_VAR 0 6
43416: PPUSH
43417: LD_INT 1
43419: PPUSH
43420: CALL_OW 259
43424: PUSH
43425: LD_REAL  1.15000000000000E+0000
43428: MUL
43429: MUL
43430: ST_TO_ADDR
// end ; unit_vehicle :
43431: GO 44261
43433: LD_INT 2
43435: DOUBLE
43436: EQUAL
43437: IFTRUE 43441
43439: GO 44249
43441: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43442: LD_VAR 0 6
43446: PPUSH
43447: CALL_OW 264
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: LD_INT 42
43457: PUSH
43458: LD_INT 24
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: LIST
43465: IN
43466: IFFALSE 43487
// points := [ 25 , 5 , 3 ] ;
43468: LD_ADDR_VAR 0 9
43472: PUSH
43473: LD_INT 25
43475: PUSH
43476: LD_INT 5
43478: PUSH
43479: LD_INT 3
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: LIST
43486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43487: LD_VAR 0 6
43491: PPUSH
43492: CALL_OW 264
43496: PUSH
43497: LD_INT 4
43499: PUSH
43500: LD_INT 43
43502: PUSH
43503: LD_INT 25
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: IN
43511: IFFALSE 43532
// points := [ 40 , 15 , 5 ] ;
43513: LD_ADDR_VAR 0 9
43517: PUSH
43518: LD_INT 40
43520: PUSH
43521: LD_INT 15
43523: PUSH
43524: LD_INT 5
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: LIST
43531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43532: LD_VAR 0 6
43536: PPUSH
43537: CALL_OW 264
43541: PUSH
43542: LD_INT 3
43544: PUSH
43545: LD_INT 23
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: IN
43552: IFFALSE 43573
// points := [ 7 , 25 , 8 ] ;
43554: LD_ADDR_VAR 0 9
43558: PUSH
43559: LD_INT 7
43561: PUSH
43562: LD_INT 25
43564: PUSH
43565: LD_INT 8
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: LIST
43572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43573: LD_VAR 0 6
43577: PPUSH
43578: CALL_OW 264
43582: PUSH
43583: LD_INT 5
43585: PUSH
43586: LD_INT 27
43588: PUSH
43589: LD_INT 44
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: LIST
43596: IN
43597: IFFALSE 43618
// points := [ 14 , 50 , 16 ] ;
43599: LD_ADDR_VAR 0 9
43603: PUSH
43604: LD_INT 14
43606: PUSH
43607: LD_INT 50
43609: PUSH
43610: LD_INT 16
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: LIST
43617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43618: LD_VAR 0 6
43622: PPUSH
43623: CALL_OW 264
43627: PUSH
43628: LD_INT 6
43630: PUSH
43631: LD_INT 46
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: IN
43638: IFFALSE 43659
// points := [ 32 , 120 , 70 ] ;
43640: LD_ADDR_VAR 0 9
43644: PUSH
43645: LD_INT 32
43647: PUSH
43648: LD_INT 120
43650: PUSH
43651: LD_INT 70
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: LIST
43658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43659: LD_VAR 0 6
43663: PPUSH
43664: CALL_OW 264
43668: PUSH
43669: LD_INT 7
43671: PUSH
43672: LD_INT 28
43674: PUSH
43675: LD_INT 45
43677: PUSH
43678: LD_EXP 53
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: IN
43689: IFFALSE 43710
// points := [ 35 , 20 , 45 ] ;
43691: LD_ADDR_VAR 0 9
43695: PUSH
43696: LD_INT 35
43698: PUSH
43699: LD_INT 20
43701: PUSH
43702: LD_INT 45
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43710: LD_VAR 0 6
43714: PPUSH
43715: CALL_OW 264
43719: PUSH
43720: LD_INT 47
43722: PUSH
43723: EMPTY
43724: LIST
43725: IN
43726: IFFALSE 43747
// points := [ 67 , 45 , 75 ] ;
43728: LD_ADDR_VAR 0 9
43732: PUSH
43733: LD_INT 67
43735: PUSH
43736: LD_INT 45
43738: PUSH
43739: LD_INT 75
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43747: LD_VAR 0 6
43751: PPUSH
43752: CALL_OW 264
43756: PUSH
43757: LD_INT 26
43759: PUSH
43760: EMPTY
43761: LIST
43762: IN
43763: IFFALSE 43784
// points := [ 120 , 30 , 80 ] ;
43765: LD_ADDR_VAR 0 9
43769: PUSH
43770: LD_INT 120
43772: PUSH
43773: LD_INT 30
43775: PUSH
43776: LD_INT 80
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43784: LD_VAR 0 6
43788: PPUSH
43789: CALL_OW 264
43793: PUSH
43794: LD_INT 22
43796: PUSH
43797: EMPTY
43798: LIST
43799: IN
43800: IFFALSE 43821
// points := [ 40 , 1 , 1 ] ;
43802: LD_ADDR_VAR 0 9
43806: PUSH
43807: LD_INT 40
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: LIST
43820: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43821: LD_VAR 0 6
43825: PPUSH
43826: CALL_OW 264
43830: PUSH
43831: LD_INT 29
43833: PUSH
43834: EMPTY
43835: LIST
43836: IN
43837: IFFALSE 43858
// points := [ 70 , 200 , 400 ] ;
43839: LD_ADDR_VAR 0 9
43843: PUSH
43844: LD_INT 70
43846: PUSH
43847: LD_INT 200
43849: PUSH
43850: LD_INT 400
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43858: LD_VAR 0 6
43862: PPUSH
43863: CALL_OW 264
43867: PUSH
43868: LD_INT 14
43870: PUSH
43871: LD_INT 53
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: IN
43878: IFFALSE 43899
// points := [ 40 , 10 , 20 ] ;
43880: LD_ADDR_VAR 0 9
43884: PUSH
43885: LD_INT 40
43887: PUSH
43888: LD_INT 10
43890: PUSH
43891: LD_INT 20
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: LIST
43898: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43899: LD_VAR 0 6
43903: PPUSH
43904: CALL_OW 264
43908: PUSH
43909: LD_INT 9
43911: PUSH
43912: EMPTY
43913: LIST
43914: IN
43915: IFFALSE 43936
// points := [ 5 , 70 , 20 ] ;
43917: LD_ADDR_VAR 0 9
43921: PUSH
43922: LD_INT 5
43924: PUSH
43925: LD_INT 70
43927: PUSH
43928: LD_INT 20
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: LIST
43935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43936: LD_VAR 0 6
43940: PPUSH
43941: CALL_OW 264
43945: PUSH
43946: LD_INT 10
43948: PUSH
43949: EMPTY
43950: LIST
43951: IN
43952: IFFALSE 43973
// points := [ 35 , 110 , 70 ] ;
43954: LD_ADDR_VAR 0 9
43958: PUSH
43959: LD_INT 35
43961: PUSH
43962: LD_INT 110
43964: PUSH
43965: LD_INT 70
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43973: LD_VAR 0 6
43977: PPUSH
43978: CALL_OW 265
43982: PUSH
43983: LD_INT 25
43985: EQUAL
43986: IFFALSE 44007
// points := [ 80 , 65 , 100 ] ;
43988: LD_ADDR_VAR 0 9
43992: PUSH
43993: LD_INT 80
43995: PUSH
43996: LD_INT 65
43998: PUSH
43999: LD_INT 100
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44007: LD_VAR 0 6
44011: PPUSH
44012: CALL_OW 263
44016: PUSH
44017: LD_INT 1
44019: EQUAL
44020: IFFALSE 44055
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44022: LD_ADDR_VAR 0 10
44026: PUSH
44027: LD_VAR 0 10
44031: PUSH
44032: LD_VAR 0 6
44036: PPUSH
44037: CALL_OW 311
44041: PPUSH
44042: LD_INT 3
44044: PPUSH
44045: CALL_OW 259
44049: PUSH
44050: LD_INT 4
44052: MUL
44053: MUL
44054: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44055: LD_VAR 0 6
44059: PPUSH
44060: CALL_OW 263
44064: PUSH
44065: LD_INT 2
44067: EQUAL
44068: IFFALSE 44119
// begin j := IsControledBy ( i ) ;
44070: LD_ADDR_VAR 0 7
44074: PUSH
44075: LD_VAR 0 6
44079: PPUSH
44080: CALL_OW 312
44084: ST_TO_ADDR
// if j then
44085: LD_VAR 0 7
44089: IFFALSE 44119
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44091: LD_ADDR_VAR 0 10
44095: PUSH
44096: LD_VAR 0 10
44100: PUSH
44101: LD_VAR 0 7
44105: PPUSH
44106: LD_INT 3
44108: PPUSH
44109: CALL_OW 259
44113: PUSH
44114: LD_INT 3
44116: MUL
44117: MUL
44118: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44119: LD_VAR 0 6
44123: PPUSH
44124: CALL_OW 264
44128: PUSH
44129: LD_INT 5
44131: PUSH
44132: LD_INT 6
44134: PUSH
44135: LD_INT 46
44137: PUSH
44138: LD_INT 44
44140: PUSH
44141: LD_INT 47
44143: PUSH
44144: LD_INT 45
44146: PUSH
44147: LD_INT 28
44149: PUSH
44150: LD_INT 7
44152: PUSH
44153: LD_INT 27
44155: PUSH
44156: LD_INT 29
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: IN
44171: PUSH
44172: LD_VAR 0 1
44176: PPUSH
44177: LD_INT 52
44179: PPUSH
44180: CALL_OW 321
44184: PUSH
44185: LD_INT 2
44187: EQUAL
44188: AND
44189: IFFALSE 44206
// bpoints := bpoints * 1.2 ;
44191: LD_ADDR_VAR 0 10
44195: PUSH
44196: LD_VAR 0 10
44200: PUSH
44201: LD_REAL  1.20000000000000E+0000
44204: MUL
44205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44206: LD_VAR 0 6
44210: PPUSH
44211: CALL_OW 264
44215: PUSH
44216: LD_INT 6
44218: PUSH
44219: LD_INT 46
44221: PUSH
44222: LD_INT 47
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: LIST
44229: IN
44230: IFFALSE 44247
// bpoints := bpoints * 1.2 ;
44232: LD_ADDR_VAR 0 10
44236: PUSH
44237: LD_VAR 0 10
44241: PUSH
44242: LD_REAL  1.20000000000000E+0000
44245: MUL
44246: ST_TO_ADDR
// end ; unit_building :
44247: GO 44261
44249: LD_INT 3
44251: DOUBLE
44252: EQUAL
44253: IFTRUE 44257
44255: GO 44260
44257: POP
// ; end ;
44258: GO 44261
44260: POP
// for j = 1 to 3 do
44261: LD_ADDR_VAR 0 7
44265: PUSH
44266: DOUBLE
44267: LD_INT 1
44269: DEC
44270: ST_TO_ADDR
44271: LD_INT 3
44273: PUSH
44274: FOR_TO
44275: IFFALSE 44328
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44277: LD_ADDR_VAR 0 5
44281: PUSH
44282: LD_VAR 0 5
44286: PPUSH
44287: LD_VAR 0 7
44291: PPUSH
44292: LD_VAR 0 5
44296: PUSH
44297: LD_VAR 0 7
44301: ARRAY
44302: PUSH
44303: LD_VAR 0 9
44307: PUSH
44308: LD_VAR 0 7
44312: ARRAY
44313: PUSH
44314: LD_VAR 0 10
44318: MUL
44319: PLUS
44320: PPUSH
44321: CALL_OW 1
44325: ST_TO_ADDR
44326: GO 44274
44328: POP
44329: POP
// end ;
44330: GO 42807
44332: POP
44333: POP
// result := Replace ( result , 4 , tmp ) ;
44334: LD_ADDR_VAR 0 5
44338: PUSH
44339: LD_VAR 0 5
44343: PPUSH
44344: LD_INT 4
44346: PPUSH
44347: LD_VAR 0 8
44351: PPUSH
44352: CALL_OW 1
44356: ST_TO_ADDR
// end ;
44357: LD_VAR 0 5
44361: RET
// export function DangerAtRange ( unit , range ) ; begin
44362: LD_INT 0
44364: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44365: LD_ADDR_VAR 0 3
44369: PUSH
44370: LD_VAR 0 1
44374: PPUSH
44375: CALL_OW 255
44379: PPUSH
44380: LD_VAR 0 1
44384: PPUSH
44385: CALL_OW 250
44389: PPUSH
44390: LD_VAR 0 1
44394: PPUSH
44395: CALL_OW 251
44399: PPUSH
44400: LD_VAR 0 2
44404: PPUSH
44405: CALL 42659 0 4
44409: ST_TO_ADDR
// end ;
44410: LD_VAR 0 3
44414: RET
// export function DangerInArea ( side , area ) ; begin
44415: LD_INT 0
44417: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44418: LD_ADDR_VAR 0 3
44422: PUSH
44423: LD_VAR 0 2
44427: PPUSH
44428: LD_INT 81
44430: PUSH
44431: LD_VAR 0 1
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PPUSH
44440: CALL_OW 70
44444: ST_TO_ADDR
// end ;
44445: LD_VAR 0 3
44449: RET
// export function IsExtension ( b ) ; begin
44450: LD_INT 0
44452: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44453: LD_ADDR_VAR 0 2
44457: PUSH
44458: LD_VAR 0 1
44462: PUSH
44463: LD_INT 23
44465: PUSH
44466: LD_INT 20
44468: PUSH
44469: LD_INT 22
44471: PUSH
44472: LD_INT 17
44474: PUSH
44475: LD_INT 24
44477: PUSH
44478: LD_INT 21
44480: PUSH
44481: LD_INT 19
44483: PUSH
44484: LD_INT 16
44486: PUSH
44487: LD_INT 25
44489: PUSH
44490: LD_INT 18
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: IN
44505: ST_TO_ADDR
// end ;
44506: LD_VAR 0 2
44510: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44511: LD_INT 0
44513: PPUSH
44514: PPUSH
44515: PPUSH
// result := [ ] ;
44516: LD_ADDR_VAR 0 4
44520: PUSH
44521: EMPTY
44522: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44523: LD_ADDR_VAR 0 5
44527: PUSH
44528: LD_VAR 0 2
44532: PPUSH
44533: LD_INT 21
44535: PUSH
44536: LD_INT 3
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PPUSH
44543: CALL_OW 70
44547: ST_TO_ADDR
// if not tmp then
44548: LD_VAR 0 5
44552: NOT
44553: IFFALSE 44557
// exit ;
44555: GO 44621
// if checkLink then
44557: LD_VAR 0 3
44561: IFFALSE 44611
// begin for i in tmp do
44563: LD_ADDR_VAR 0 6
44567: PUSH
44568: LD_VAR 0 5
44572: PUSH
44573: FOR_IN
44574: IFFALSE 44609
// if GetBase ( i ) <> base then
44576: LD_VAR 0 6
44580: PPUSH
44581: CALL_OW 274
44585: PUSH
44586: LD_VAR 0 1
44590: NONEQUAL
44591: IFFALSE 44607
// ComLinkToBase ( base , i ) ;
44593: LD_VAR 0 1
44597: PPUSH
44598: LD_VAR 0 6
44602: PPUSH
44603: CALL_OW 169
44607: GO 44573
44609: POP
44610: POP
// end ; result := tmp ;
44611: LD_ADDR_VAR 0 4
44615: PUSH
44616: LD_VAR 0 5
44620: ST_TO_ADDR
// end ;
44621: LD_VAR 0 4
44625: RET
// export function ComComplete ( units , b ) ; var i ; begin
44626: LD_INT 0
44628: PPUSH
44629: PPUSH
// if not units then
44630: LD_VAR 0 1
44634: NOT
44635: IFFALSE 44639
// exit ;
44637: GO 44729
// for i in units do
44639: LD_ADDR_VAR 0 4
44643: PUSH
44644: LD_VAR 0 1
44648: PUSH
44649: FOR_IN
44650: IFFALSE 44727
// if BuildingStatus ( b ) = bs_build then
44652: LD_VAR 0 2
44656: PPUSH
44657: CALL_OW 461
44661: PUSH
44662: LD_INT 1
44664: EQUAL
44665: IFFALSE 44725
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44667: LD_VAR 0 4
44671: PPUSH
44672: LD_STRING h
44674: PUSH
44675: LD_VAR 0 2
44679: PPUSH
44680: CALL_OW 250
44684: PUSH
44685: LD_VAR 0 2
44689: PPUSH
44690: CALL_OW 251
44694: PUSH
44695: LD_VAR 0 2
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: PUSH
44718: EMPTY
44719: LIST
44720: PPUSH
44721: CALL_OW 446
44725: GO 44649
44727: POP
44728: POP
// end ;
44729: LD_VAR 0 3
44733: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44734: LD_INT 0
44736: PPUSH
44737: PPUSH
44738: PPUSH
44739: PPUSH
44740: PPUSH
44741: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44742: LD_VAR 0 1
44746: NOT
44747: PUSH
44748: LD_VAR 0 1
44752: PPUSH
44753: CALL_OW 263
44757: PUSH
44758: LD_INT 2
44760: NONEQUAL
44761: OR
44762: IFFALSE 44766
// exit ;
44764: GO 45082
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44766: LD_ADDR_VAR 0 6
44770: PUSH
44771: LD_INT 22
44773: PUSH
44774: LD_VAR 0 1
44778: PPUSH
44779: CALL_OW 255
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 30
44793: PUSH
44794: LD_INT 36
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 34
44803: PUSH
44804: LD_INT 31
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PPUSH
44820: CALL_OW 69
44824: ST_TO_ADDR
// if not tmp then
44825: LD_VAR 0 6
44829: NOT
44830: IFFALSE 44834
// exit ;
44832: GO 45082
// result := [ ] ;
44834: LD_ADDR_VAR 0 2
44838: PUSH
44839: EMPTY
44840: ST_TO_ADDR
// for i in tmp do
44841: LD_ADDR_VAR 0 3
44845: PUSH
44846: LD_VAR 0 6
44850: PUSH
44851: FOR_IN
44852: IFFALSE 44923
// begin t := UnitsInside ( i ) ;
44854: LD_ADDR_VAR 0 4
44858: PUSH
44859: LD_VAR 0 3
44863: PPUSH
44864: CALL_OW 313
44868: ST_TO_ADDR
// if t then
44869: LD_VAR 0 4
44873: IFFALSE 44921
// for j in t do
44875: LD_ADDR_VAR 0 7
44879: PUSH
44880: LD_VAR 0 4
44884: PUSH
44885: FOR_IN
44886: IFFALSE 44919
// result := Replace ( result , result + 1 , j ) ;
44888: LD_ADDR_VAR 0 2
44892: PUSH
44893: LD_VAR 0 2
44897: PPUSH
44898: LD_VAR 0 2
44902: PUSH
44903: LD_INT 1
44905: PLUS
44906: PPUSH
44907: LD_VAR 0 7
44911: PPUSH
44912: CALL_OW 1
44916: ST_TO_ADDR
44917: GO 44885
44919: POP
44920: POP
// end ;
44921: GO 44851
44923: POP
44924: POP
// if not result then
44925: LD_VAR 0 2
44929: NOT
44930: IFFALSE 44934
// exit ;
44932: GO 45082
// mech := result [ 1 ] ;
44934: LD_ADDR_VAR 0 5
44938: PUSH
44939: LD_VAR 0 2
44943: PUSH
44944: LD_INT 1
44946: ARRAY
44947: ST_TO_ADDR
// if result > 1 then
44948: LD_VAR 0 2
44952: PUSH
44953: LD_INT 1
44955: GREATER
44956: IFFALSE 45068
// begin for i = 2 to result do
44958: LD_ADDR_VAR 0 3
44962: PUSH
44963: DOUBLE
44964: LD_INT 2
44966: DEC
44967: ST_TO_ADDR
44968: LD_VAR 0 2
44972: PUSH
44973: FOR_TO
44974: IFFALSE 45066
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44976: LD_ADDR_VAR 0 4
44980: PUSH
44981: LD_VAR 0 2
44985: PUSH
44986: LD_VAR 0 3
44990: ARRAY
44991: PPUSH
44992: LD_INT 3
44994: PPUSH
44995: CALL_OW 259
44999: PUSH
45000: LD_VAR 0 2
45004: PUSH
45005: LD_VAR 0 3
45009: ARRAY
45010: PPUSH
45011: CALL_OW 432
45015: MINUS
45016: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45017: LD_VAR 0 4
45021: PUSH
45022: LD_VAR 0 5
45026: PPUSH
45027: LD_INT 3
45029: PPUSH
45030: CALL_OW 259
45034: PUSH
45035: LD_VAR 0 5
45039: PPUSH
45040: CALL_OW 432
45044: MINUS
45045: GREATEREQUAL
45046: IFFALSE 45064
// mech := result [ i ] ;
45048: LD_ADDR_VAR 0 5
45052: PUSH
45053: LD_VAR 0 2
45057: PUSH
45058: LD_VAR 0 3
45062: ARRAY
45063: ST_TO_ADDR
// end ;
45064: GO 44973
45066: POP
45067: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45068: LD_VAR 0 1
45072: PPUSH
45073: LD_VAR 0 5
45077: PPUSH
45078: CALL_OW 135
// end ;
45082: LD_VAR 0 2
45086: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45087: LD_INT 0
45089: PPUSH
45090: PPUSH
45091: PPUSH
45092: PPUSH
45093: PPUSH
45094: PPUSH
45095: PPUSH
45096: PPUSH
45097: PPUSH
45098: PPUSH
45099: PPUSH
45100: PPUSH
45101: PPUSH
// result := [ ] ;
45102: LD_ADDR_VAR 0 7
45106: PUSH
45107: EMPTY
45108: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45109: LD_VAR 0 1
45113: PPUSH
45114: CALL_OW 266
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: IN
45129: NOT
45130: IFFALSE 45134
// exit ;
45132: GO 46768
// if name then
45134: LD_VAR 0 3
45138: IFFALSE 45154
// SetBName ( base_dep , name ) ;
45140: LD_VAR 0 1
45144: PPUSH
45145: LD_VAR 0 3
45149: PPUSH
45150: CALL_OW 500
// base := GetBase ( base_dep ) ;
45154: LD_ADDR_VAR 0 15
45158: PUSH
45159: LD_VAR 0 1
45163: PPUSH
45164: CALL_OW 274
45168: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45169: LD_ADDR_VAR 0 16
45173: PUSH
45174: LD_VAR 0 1
45178: PPUSH
45179: CALL_OW 255
45183: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45184: LD_ADDR_VAR 0 17
45188: PUSH
45189: LD_VAR 0 1
45193: PPUSH
45194: CALL_OW 248
45198: ST_TO_ADDR
// if sources then
45199: LD_VAR 0 5
45203: IFFALSE 45250
// for i = 1 to 3 do
45205: LD_ADDR_VAR 0 8
45209: PUSH
45210: DOUBLE
45211: LD_INT 1
45213: DEC
45214: ST_TO_ADDR
45215: LD_INT 3
45217: PUSH
45218: FOR_TO
45219: IFFALSE 45248
// AddResourceType ( base , i , sources [ i ] ) ;
45221: LD_VAR 0 15
45225: PPUSH
45226: LD_VAR 0 8
45230: PPUSH
45231: LD_VAR 0 5
45235: PUSH
45236: LD_VAR 0 8
45240: ARRAY
45241: PPUSH
45242: CALL_OW 276
45246: GO 45218
45248: POP
45249: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45250: LD_ADDR_VAR 0 18
45254: PUSH
45255: LD_VAR 0 15
45259: PPUSH
45260: LD_VAR 0 2
45264: PPUSH
45265: LD_INT 1
45267: PPUSH
45268: CALL 44511 0 3
45272: ST_TO_ADDR
// InitHc ;
45273: CALL_OW 19
// InitUc ;
45277: CALL_OW 18
// uc_side := side ;
45281: LD_ADDR_OWVAR 20
45285: PUSH
45286: LD_VAR 0 16
45290: ST_TO_ADDR
// uc_nation := nation ;
45291: LD_ADDR_OWVAR 21
45295: PUSH
45296: LD_VAR 0 17
45300: ST_TO_ADDR
// if buildings then
45301: LD_VAR 0 18
45305: IFFALSE 46627
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45307: LD_ADDR_VAR 0 19
45311: PUSH
45312: LD_VAR 0 18
45316: PPUSH
45317: LD_INT 2
45319: PUSH
45320: LD_INT 30
45322: PUSH
45323: LD_INT 29
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 30
45332: PUSH
45333: LD_INT 30
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: PPUSH
45345: CALL_OW 72
45349: ST_TO_ADDR
// if tmp then
45350: LD_VAR 0 19
45354: IFFALSE 45402
// for i in tmp do
45356: LD_ADDR_VAR 0 8
45360: PUSH
45361: LD_VAR 0 19
45365: PUSH
45366: FOR_IN
45367: IFFALSE 45400
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45369: LD_VAR 0 8
45373: PPUSH
45374: CALL_OW 250
45378: PPUSH
45379: LD_VAR 0 8
45383: PPUSH
45384: CALL_OW 251
45388: PPUSH
45389: LD_VAR 0 16
45393: PPUSH
45394: CALL_OW 441
45398: GO 45366
45400: POP
45401: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45402: LD_VAR 0 18
45406: PPUSH
45407: LD_INT 2
45409: PUSH
45410: LD_INT 30
45412: PUSH
45413: LD_INT 32
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 30
45422: PUSH
45423: LD_INT 33
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: PPUSH
45435: CALL_OW 72
45439: IFFALSE 45527
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45441: LD_ADDR_VAR 0 8
45445: PUSH
45446: LD_VAR 0 18
45450: PPUSH
45451: LD_INT 2
45453: PUSH
45454: LD_INT 30
45456: PUSH
45457: LD_INT 32
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 30
45466: PUSH
45467: LD_INT 33
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: LIST
45478: PPUSH
45479: CALL_OW 72
45483: PUSH
45484: FOR_IN
45485: IFFALSE 45525
// begin if not GetBWeapon ( i ) then
45487: LD_VAR 0 8
45491: PPUSH
45492: CALL_OW 269
45496: NOT
45497: IFFALSE 45523
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45499: LD_VAR 0 8
45503: PPUSH
45504: LD_VAR 0 8
45508: PPUSH
45509: LD_VAR 0 2
45513: PPUSH
45514: CALL 46773 0 2
45518: PPUSH
45519: CALL_OW 431
// end ;
45523: GO 45484
45525: POP
45526: POP
// end ; for i = 1 to personel do
45527: LD_ADDR_VAR 0 8
45531: PUSH
45532: DOUBLE
45533: LD_INT 1
45535: DEC
45536: ST_TO_ADDR
45537: LD_VAR 0 6
45541: PUSH
45542: FOR_TO
45543: IFFALSE 46607
// begin if i > 4 then
45545: LD_VAR 0 8
45549: PUSH
45550: LD_INT 4
45552: GREATER
45553: IFFALSE 45557
// break ;
45555: GO 46607
// case i of 1 :
45557: LD_VAR 0 8
45561: PUSH
45562: LD_INT 1
45564: DOUBLE
45565: EQUAL
45566: IFTRUE 45570
45568: GO 45650
45570: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45571: LD_ADDR_VAR 0 12
45575: PUSH
45576: LD_VAR 0 18
45580: PPUSH
45581: LD_INT 22
45583: PUSH
45584: LD_VAR 0 16
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 58
45595: PUSH
45596: EMPTY
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 30
45604: PUSH
45605: LD_INT 32
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 30
45614: PUSH
45615: LD_INT 4
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 30
45624: PUSH
45625: LD_INT 5
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: LIST
45642: PPUSH
45643: CALL_OW 72
45647: ST_TO_ADDR
45648: GO 45872
45650: LD_INT 2
45652: DOUBLE
45653: EQUAL
45654: IFTRUE 45658
45656: GO 45720
45658: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45659: LD_ADDR_VAR 0 12
45663: PUSH
45664: LD_VAR 0 18
45668: PPUSH
45669: LD_INT 22
45671: PUSH
45672: LD_VAR 0 16
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: LD_INT 30
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 30
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PPUSH
45713: CALL_OW 72
45717: ST_TO_ADDR
45718: GO 45872
45720: LD_INT 3
45722: DOUBLE
45723: EQUAL
45724: IFTRUE 45728
45726: GO 45790
45728: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45729: LD_ADDR_VAR 0 12
45733: PUSH
45734: LD_VAR 0 18
45738: PPUSH
45739: LD_INT 22
45741: PUSH
45742: LD_VAR 0 16
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 30
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 30
45766: PUSH
45767: LD_INT 3
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: LIST
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PPUSH
45783: CALL_OW 72
45787: ST_TO_ADDR
45788: GO 45872
45790: LD_INT 4
45792: DOUBLE
45793: EQUAL
45794: IFTRUE 45798
45796: GO 45871
45798: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45799: LD_ADDR_VAR 0 12
45803: PUSH
45804: LD_VAR 0 18
45808: PPUSH
45809: LD_INT 22
45811: PUSH
45812: LD_VAR 0 16
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: PUSH
45824: LD_INT 30
45826: PUSH
45827: LD_INT 6
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 30
45836: PUSH
45837: LD_INT 7
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 30
45846: PUSH
45847: LD_INT 8
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PPUSH
45864: CALL_OW 72
45868: ST_TO_ADDR
45869: GO 45872
45871: POP
// if i = 1 then
45872: LD_VAR 0 8
45876: PUSH
45877: LD_INT 1
45879: EQUAL
45880: IFFALSE 45991
// begin tmp := [ ] ;
45882: LD_ADDR_VAR 0 19
45886: PUSH
45887: EMPTY
45888: ST_TO_ADDR
// for j in f do
45889: LD_ADDR_VAR 0 9
45893: PUSH
45894: LD_VAR 0 12
45898: PUSH
45899: FOR_IN
45900: IFFALSE 45973
// if GetBType ( j ) = b_bunker then
45902: LD_VAR 0 9
45906: PPUSH
45907: CALL_OW 266
45911: PUSH
45912: LD_INT 32
45914: EQUAL
45915: IFFALSE 45942
// tmp := Insert ( tmp , 1 , j ) else
45917: LD_ADDR_VAR 0 19
45921: PUSH
45922: LD_VAR 0 19
45926: PPUSH
45927: LD_INT 1
45929: PPUSH
45930: LD_VAR 0 9
45934: PPUSH
45935: CALL_OW 2
45939: ST_TO_ADDR
45940: GO 45971
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45942: LD_ADDR_VAR 0 19
45946: PUSH
45947: LD_VAR 0 19
45951: PPUSH
45952: LD_VAR 0 19
45956: PUSH
45957: LD_INT 1
45959: PLUS
45960: PPUSH
45961: LD_VAR 0 9
45965: PPUSH
45966: CALL_OW 2
45970: ST_TO_ADDR
45971: GO 45899
45973: POP
45974: POP
// if tmp then
45975: LD_VAR 0 19
45979: IFFALSE 45991
// f := tmp ;
45981: LD_ADDR_VAR 0 12
45985: PUSH
45986: LD_VAR 0 19
45990: ST_TO_ADDR
// end ; x := personel [ i ] ;
45991: LD_ADDR_VAR 0 13
45995: PUSH
45996: LD_VAR 0 6
46000: PUSH
46001: LD_VAR 0 8
46005: ARRAY
46006: ST_TO_ADDR
// if x = - 1 then
46007: LD_VAR 0 13
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: EQUAL
46016: IFFALSE 46225
// begin for j in f do
46018: LD_ADDR_VAR 0 9
46022: PUSH
46023: LD_VAR 0 12
46027: PUSH
46028: FOR_IN
46029: IFFALSE 46221
// repeat InitHc ;
46031: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46035: LD_VAR 0 9
46039: PPUSH
46040: CALL_OW 266
46044: PUSH
46045: LD_INT 5
46047: EQUAL
46048: IFFALSE 46118
// begin if UnitsInside ( j ) < 3 then
46050: LD_VAR 0 9
46054: PPUSH
46055: CALL_OW 313
46059: PUSH
46060: LD_INT 3
46062: LESS
46063: IFFALSE 46099
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46065: LD_INT 0
46067: PPUSH
46068: LD_INT 5
46070: PUSH
46071: LD_INT 8
46073: PUSH
46074: LD_INT 9
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: PUSH
46082: LD_VAR 0 17
46086: ARRAY
46087: PPUSH
46088: LD_VAR 0 4
46092: PPUSH
46093: CALL_OW 380
46097: GO 46116
// PrepareHuman ( false , i , skill ) ;
46099: LD_INT 0
46101: PPUSH
46102: LD_VAR 0 8
46106: PPUSH
46107: LD_VAR 0 4
46111: PPUSH
46112: CALL_OW 380
// end else
46116: GO 46135
// PrepareHuman ( false , i , skill ) ;
46118: LD_INT 0
46120: PPUSH
46121: LD_VAR 0 8
46125: PPUSH
46126: LD_VAR 0 4
46130: PPUSH
46131: CALL_OW 380
// un := CreateHuman ;
46135: LD_ADDR_VAR 0 14
46139: PUSH
46140: CALL_OW 44
46144: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46145: LD_ADDR_VAR 0 7
46149: PUSH
46150: LD_VAR 0 7
46154: PPUSH
46155: LD_INT 1
46157: PPUSH
46158: LD_VAR 0 14
46162: PPUSH
46163: CALL_OW 2
46167: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46168: LD_VAR 0 14
46172: PPUSH
46173: LD_VAR 0 9
46177: PPUSH
46178: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46182: LD_VAR 0 9
46186: PPUSH
46187: CALL_OW 313
46191: PUSH
46192: LD_INT 6
46194: EQUAL
46195: PUSH
46196: LD_VAR 0 9
46200: PPUSH
46201: CALL_OW 266
46205: PUSH
46206: LD_INT 32
46208: PUSH
46209: LD_INT 31
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: IN
46216: OR
46217: IFFALSE 46031
46219: GO 46028
46221: POP
46222: POP
// end else
46223: GO 46605
// for j = 1 to x do
46225: LD_ADDR_VAR 0 9
46229: PUSH
46230: DOUBLE
46231: LD_INT 1
46233: DEC
46234: ST_TO_ADDR
46235: LD_VAR 0 13
46239: PUSH
46240: FOR_TO
46241: IFFALSE 46603
// begin InitHc ;
46243: CALL_OW 19
// if not f then
46247: LD_VAR 0 12
46251: NOT
46252: IFFALSE 46341
// begin PrepareHuman ( false , i , skill ) ;
46254: LD_INT 0
46256: PPUSH
46257: LD_VAR 0 8
46261: PPUSH
46262: LD_VAR 0 4
46266: PPUSH
46267: CALL_OW 380
// un := CreateHuman ;
46271: LD_ADDR_VAR 0 14
46275: PUSH
46276: CALL_OW 44
46280: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46281: LD_ADDR_VAR 0 7
46285: PUSH
46286: LD_VAR 0 7
46290: PPUSH
46291: LD_INT 1
46293: PPUSH
46294: LD_VAR 0 14
46298: PPUSH
46299: CALL_OW 2
46303: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46304: LD_VAR 0 14
46308: PPUSH
46309: LD_VAR 0 1
46313: PPUSH
46314: CALL_OW 250
46318: PPUSH
46319: LD_VAR 0 1
46323: PPUSH
46324: CALL_OW 251
46328: PPUSH
46329: LD_INT 10
46331: PPUSH
46332: LD_INT 0
46334: PPUSH
46335: CALL_OW 50
// continue ;
46339: GO 46240
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46341: LD_VAR 0 12
46345: PUSH
46346: LD_INT 1
46348: ARRAY
46349: PPUSH
46350: CALL_OW 313
46354: PUSH
46355: LD_VAR 0 12
46359: PUSH
46360: LD_INT 1
46362: ARRAY
46363: PPUSH
46364: CALL_OW 266
46368: PUSH
46369: LD_INT 32
46371: PUSH
46372: LD_INT 31
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: IN
46379: AND
46380: PUSH
46381: LD_VAR 0 12
46385: PUSH
46386: LD_INT 1
46388: ARRAY
46389: PPUSH
46390: CALL_OW 313
46394: PUSH
46395: LD_INT 6
46397: EQUAL
46398: OR
46399: IFFALSE 46419
// f := Delete ( f , 1 ) ;
46401: LD_ADDR_VAR 0 12
46405: PUSH
46406: LD_VAR 0 12
46410: PPUSH
46411: LD_INT 1
46413: PPUSH
46414: CALL_OW 3
46418: ST_TO_ADDR
// if not f then
46419: LD_VAR 0 12
46423: NOT
46424: IFFALSE 46442
// begin x := x + 2 ;
46426: LD_ADDR_VAR 0 13
46430: PUSH
46431: LD_VAR 0 13
46435: PUSH
46436: LD_INT 2
46438: PLUS
46439: ST_TO_ADDR
// continue ;
46440: GO 46240
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46442: LD_VAR 0 12
46446: PUSH
46447: LD_INT 1
46449: ARRAY
46450: PPUSH
46451: CALL_OW 266
46455: PUSH
46456: LD_INT 5
46458: EQUAL
46459: IFFALSE 46533
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46461: LD_VAR 0 12
46465: PUSH
46466: LD_INT 1
46468: ARRAY
46469: PPUSH
46470: CALL_OW 313
46474: PUSH
46475: LD_INT 3
46477: LESS
46478: IFFALSE 46514
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46480: LD_INT 0
46482: PPUSH
46483: LD_INT 5
46485: PUSH
46486: LD_INT 8
46488: PUSH
46489: LD_INT 9
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: LIST
46496: PUSH
46497: LD_VAR 0 17
46501: ARRAY
46502: PPUSH
46503: LD_VAR 0 4
46507: PPUSH
46508: CALL_OW 380
46512: GO 46531
// PrepareHuman ( false , i , skill ) ;
46514: LD_INT 0
46516: PPUSH
46517: LD_VAR 0 8
46521: PPUSH
46522: LD_VAR 0 4
46526: PPUSH
46527: CALL_OW 380
// end else
46531: GO 46550
// PrepareHuman ( false , i , skill ) ;
46533: LD_INT 0
46535: PPUSH
46536: LD_VAR 0 8
46540: PPUSH
46541: LD_VAR 0 4
46545: PPUSH
46546: CALL_OW 380
// un := CreateHuman ;
46550: LD_ADDR_VAR 0 14
46554: PUSH
46555: CALL_OW 44
46559: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46560: LD_ADDR_VAR 0 7
46564: PUSH
46565: LD_VAR 0 7
46569: PPUSH
46570: LD_INT 1
46572: PPUSH
46573: LD_VAR 0 14
46577: PPUSH
46578: CALL_OW 2
46582: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46583: LD_VAR 0 14
46587: PPUSH
46588: LD_VAR 0 12
46592: PUSH
46593: LD_INT 1
46595: ARRAY
46596: PPUSH
46597: CALL_OW 52
// end ;
46601: GO 46240
46603: POP
46604: POP
// end ;
46605: GO 45542
46607: POP
46608: POP
// result := result ^ buildings ;
46609: LD_ADDR_VAR 0 7
46613: PUSH
46614: LD_VAR 0 7
46618: PUSH
46619: LD_VAR 0 18
46623: ADD
46624: ST_TO_ADDR
// end else
46625: GO 46768
// begin for i = 1 to personel do
46627: LD_ADDR_VAR 0 8
46631: PUSH
46632: DOUBLE
46633: LD_INT 1
46635: DEC
46636: ST_TO_ADDR
46637: LD_VAR 0 6
46641: PUSH
46642: FOR_TO
46643: IFFALSE 46766
// begin if i > 4 then
46645: LD_VAR 0 8
46649: PUSH
46650: LD_INT 4
46652: GREATER
46653: IFFALSE 46657
// break ;
46655: GO 46766
// x := personel [ i ] ;
46657: LD_ADDR_VAR 0 13
46661: PUSH
46662: LD_VAR 0 6
46666: PUSH
46667: LD_VAR 0 8
46671: ARRAY
46672: ST_TO_ADDR
// if x = - 1 then
46673: LD_VAR 0 13
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: EQUAL
46682: IFFALSE 46686
// continue ;
46684: GO 46642
// PrepareHuman ( false , i , skill ) ;
46686: LD_INT 0
46688: PPUSH
46689: LD_VAR 0 8
46693: PPUSH
46694: LD_VAR 0 4
46698: PPUSH
46699: CALL_OW 380
// un := CreateHuman ;
46703: LD_ADDR_VAR 0 14
46707: PUSH
46708: CALL_OW 44
46712: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46713: LD_VAR 0 14
46717: PPUSH
46718: LD_VAR 0 1
46722: PPUSH
46723: CALL_OW 250
46727: PPUSH
46728: LD_VAR 0 1
46732: PPUSH
46733: CALL_OW 251
46737: PPUSH
46738: LD_INT 10
46740: PPUSH
46741: LD_INT 0
46743: PPUSH
46744: CALL_OW 50
// result := result ^ un ;
46748: LD_ADDR_VAR 0 7
46752: PUSH
46753: LD_VAR 0 7
46757: PUSH
46758: LD_VAR 0 14
46762: ADD
46763: ST_TO_ADDR
// end ;
46764: GO 46642
46766: POP
46767: POP
// end ; end ;
46768: LD_VAR 0 7
46772: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46773: LD_INT 0
46775: PPUSH
46776: PPUSH
46777: PPUSH
46778: PPUSH
46779: PPUSH
46780: PPUSH
46781: PPUSH
46782: PPUSH
46783: PPUSH
46784: PPUSH
46785: PPUSH
46786: PPUSH
46787: PPUSH
46788: PPUSH
46789: PPUSH
46790: PPUSH
// result := false ;
46791: LD_ADDR_VAR 0 3
46795: PUSH
46796: LD_INT 0
46798: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46799: LD_VAR 0 1
46803: NOT
46804: PUSH
46805: LD_VAR 0 1
46809: PPUSH
46810: CALL_OW 266
46814: PUSH
46815: LD_INT 32
46817: PUSH
46818: LD_INT 33
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: IN
46825: NOT
46826: OR
46827: IFFALSE 46831
// exit ;
46829: GO 47940
// nat := GetNation ( tower ) ;
46831: LD_ADDR_VAR 0 12
46835: PUSH
46836: LD_VAR 0 1
46840: PPUSH
46841: CALL_OW 248
46845: ST_TO_ADDR
// side := GetSide ( tower ) ;
46846: LD_ADDR_VAR 0 16
46850: PUSH
46851: LD_VAR 0 1
46855: PPUSH
46856: CALL_OW 255
46860: ST_TO_ADDR
// x := GetX ( tower ) ;
46861: LD_ADDR_VAR 0 10
46865: PUSH
46866: LD_VAR 0 1
46870: PPUSH
46871: CALL_OW 250
46875: ST_TO_ADDR
// y := GetY ( tower ) ;
46876: LD_ADDR_VAR 0 11
46880: PUSH
46881: LD_VAR 0 1
46885: PPUSH
46886: CALL_OW 251
46890: ST_TO_ADDR
// if not x or not y then
46891: LD_VAR 0 10
46895: NOT
46896: PUSH
46897: LD_VAR 0 11
46901: NOT
46902: OR
46903: IFFALSE 46907
// exit ;
46905: GO 47940
// weapon := 0 ;
46907: LD_ADDR_VAR 0 18
46911: PUSH
46912: LD_INT 0
46914: ST_TO_ADDR
// fac_list := [ ] ;
46915: LD_ADDR_VAR 0 17
46919: PUSH
46920: EMPTY
46921: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46922: LD_ADDR_VAR 0 6
46926: PUSH
46927: LD_VAR 0 1
46931: PPUSH
46932: CALL_OW 274
46936: PPUSH
46937: LD_VAR 0 2
46941: PPUSH
46942: LD_INT 0
46944: PPUSH
46945: CALL 44511 0 3
46949: PPUSH
46950: LD_INT 30
46952: PUSH
46953: LD_INT 3
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PPUSH
46960: CALL_OW 72
46964: ST_TO_ADDR
// if not factories then
46965: LD_VAR 0 6
46969: NOT
46970: IFFALSE 46974
// exit ;
46972: GO 47940
// for i in factories do
46974: LD_ADDR_VAR 0 8
46978: PUSH
46979: LD_VAR 0 6
46983: PUSH
46984: FOR_IN
46985: IFFALSE 47010
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46987: LD_ADDR_VAR 0 17
46991: PUSH
46992: LD_VAR 0 17
46996: PUSH
46997: LD_VAR 0 8
47001: PPUSH
47002: CALL_OW 478
47006: UNION
47007: ST_TO_ADDR
47008: GO 46984
47010: POP
47011: POP
// if not fac_list then
47012: LD_VAR 0 17
47016: NOT
47017: IFFALSE 47021
// exit ;
47019: GO 47940
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47021: LD_ADDR_VAR 0 5
47025: PUSH
47026: LD_INT 4
47028: PUSH
47029: LD_INT 5
47031: PUSH
47032: LD_INT 9
47034: PUSH
47035: LD_INT 10
47037: PUSH
47038: LD_INT 6
47040: PUSH
47041: LD_INT 7
47043: PUSH
47044: LD_INT 11
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 27
47058: PUSH
47059: LD_INT 28
47061: PUSH
47062: LD_INT 26
47064: PUSH
47065: LD_INT 30
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 43
47076: PUSH
47077: LD_INT 44
47079: PUSH
47080: LD_INT 46
47082: PUSH
47083: LD_INT 45
47085: PUSH
47086: LD_INT 47
47088: PUSH
47089: LD_INT 49
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: LIST
47104: PUSH
47105: LD_VAR 0 12
47109: ARRAY
47110: ST_TO_ADDR
// list := list isect fac_list ;
47111: LD_ADDR_VAR 0 5
47115: PUSH
47116: LD_VAR 0 5
47120: PUSH
47121: LD_VAR 0 17
47125: ISECT
47126: ST_TO_ADDR
// if not list then
47127: LD_VAR 0 5
47131: NOT
47132: IFFALSE 47136
// exit ;
47134: GO 47940
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47136: LD_VAR 0 12
47140: PUSH
47141: LD_INT 3
47143: EQUAL
47144: PUSH
47145: LD_INT 49
47147: PUSH
47148: LD_VAR 0 5
47152: IN
47153: AND
47154: PUSH
47155: LD_INT 31
47157: PPUSH
47158: LD_VAR 0 16
47162: PPUSH
47163: CALL_OW 321
47167: PUSH
47168: LD_INT 2
47170: EQUAL
47171: AND
47172: IFFALSE 47232
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47174: LD_INT 22
47176: PUSH
47177: LD_VAR 0 16
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 35
47188: PUSH
47189: LD_INT 49
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 91
47198: PUSH
47199: LD_VAR 0 1
47203: PUSH
47204: LD_INT 10
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: LIST
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: LIST
47216: PPUSH
47217: CALL_OW 69
47221: NOT
47222: IFFALSE 47232
// weapon := ru_time_lapser ;
47224: LD_ADDR_VAR 0 18
47228: PUSH
47229: LD_INT 49
47231: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47232: LD_VAR 0 12
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: IN
47247: PUSH
47248: LD_INT 11
47250: PUSH
47251: LD_VAR 0 5
47255: IN
47256: PUSH
47257: LD_INT 30
47259: PUSH
47260: LD_VAR 0 5
47264: IN
47265: OR
47266: AND
47267: PUSH
47268: LD_INT 6
47270: PPUSH
47271: LD_VAR 0 16
47275: PPUSH
47276: CALL_OW 321
47280: PUSH
47281: LD_INT 2
47283: EQUAL
47284: AND
47285: IFFALSE 47450
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47287: LD_INT 22
47289: PUSH
47290: LD_VAR 0 16
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: LD_INT 35
47304: PUSH
47305: LD_INT 11
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 35
47314: PUSH
47315: LD_INT 30
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 91
47329: PUSH
47330: LD_VAR 0 1
47334: PUSH
47335: LD_INT 18
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: LIST
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: LIST
47347: PPUSH
47348: CALL_OW 69
47352: NOT
47353: PUSH
47354: LD_INT 22
47356: PUSH
47357: LD_VAR 0 16
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: LD_INT 30
47371: PUSH
47372: LD_INT 32
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 30
47381: PUSH
47382: LD_INT 33
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 91
47396: PUSH
47397: LD_VAR 0 1
47401: PUSH
47402: LD_INT 12
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: LIST
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: LIST
47414: PUSH
47415: EMPTY
47416: LIST
47417: PPUSH
47418: CALL_OW 69
47422: PUSH
47423: LD_INT 2
47425: GREATER
47426: AND
47427: IFFALSE 47450
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47429: LD_ADDR_VAR 0 18
47433: PUSH
47434: LD_INT 11
47436: PUSH
47437: LD_INT 30
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_VAR 0 12
47448: ARRAY
47449: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47450: LD_VAR 0 18
47454: NOT
47455: PUSH
47456: LD_INT 40
47458: PPUSH
47459: LD_VAR 0 16
47463: PPUSH
47464: CALL_OW 321
47468: PUSH
47469: LD_INT 2
47471: EQUAL
47472: AND
47473: PUSH
47474: LD_INT 7
47476: PUSH
47477: LD_VAR 0 5
47481: IN
47482: PUSH
47483: LD_INT 28
47485: PUSH
47486: LD_VAR 0 5
47490: IN
47491: OR
47492: PUSH
47493: LD_INT 45
47495: PUSH
47496: LD_VAR 0 5
47500: IN
47501: OR
47502: AND
47503: IFFALSE 47757
// begin hex := GetHexInfo ( x , y ) ;
47505: LD_ADDR_VAR 0 4
47509: PUSH
47510: LD_VAR 0 10
47514: PPUSH
47515: LD_VAR 0 11
47519: PPUSH
47520: CALL_OW 546
47524: ST_TO_ADDR
// if hex [ 1 ] then
47525: LD_VAR 0 4
47529: PUSH
47530: LD_INT 1
47532: ARRAY
47533: IFFALSE 47537
// exit ;
47535: GO 47940
// height := hex [ 2 ] ;
47537: LD_ADDR_VAR 0 15
47541: PUSH
47542: LD_VAR 0 4
47546: PUSH
47547: LD_INT 2
47549: ARRAY
47550: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47551: LD_ADDR_VAR 0 14
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: LD_INT 3
47564: PUSH
47565: LD_INT 5
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: ST_TO_ADDR
// for i in tmp do
47574: LD_ADDR_VAR 0 8
47578: PUSH
47579: LD_VAR 0 14
47583: PUSH
47584: FOR_IN
47585: IFFALSE 47755
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47587: LD_ADDR_VAR 0 9
47591: PUSH
47592: LD_VAR 0 10
47596: PPUSH
47597: LD_VAR 0 8
47601: PPUSH
47602: LD_INT 5
47604: PPUSH
47605: CALL_OW 272
47609: PUSH
47610: LD_VAR 0 11
47614: PPUSH
47615: LD_VAR 0 8
47619: PPUSH
47620: LD_INT 5
47622: PPUSH
47623: CALL_OW 273
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47632: LD_VAR 0 9
47636: PUSH
47637: LD_INT 1
47639: ARRAY
47640: PPUSH
47641: LD_VAR 0 9
47645: PUSH
47646: LD_INT 2
47648: ARRAY
47649: PPUSH
47650: CALL_OW 488
47654: IFFALSE 47753
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47656: LD_ADDR_VAR 0 4
47660: PUSH
47661: LD_VAR 0 9
47665: PUSH
47666: LD_INT 1
47668: ARRAY
47669: PPUSH
47670: LD_VAR 0 9
47674: PUSH
47675: LD_INT 2
47677: ARRAY
47678: PPUSH
47679: CALL_OW 546
47683: ST_TO_ADDR
// if hex [ 1 ] then
47684: LD_VAR 0 4
47688: PUSH
47689: LD_INT 1
47691: ARRAY
47692: IFFALSE 47696
// continue ;
47694: GO 47584
// h := hex [ 2 ] ;
47696: LD_ADDR_VAR 0 13
47700: PUSH
47701: LD_VAR 0 4
47705: PUSH
47706: LD_INT 2
47708: ARRAY
47709: ST_TO_ADDR
// if h + 7 < height then
47710: LD_VAR 0 13
47714: PUSH
47715: LD_INT 7
47717: PLUS
47718: PUSH
47719: LD_VAR 0 15
47723: LESS
47724: IFFALSE 47753
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47726: LD_ADDR_VAR 0 18
47730: PUSH
47731: LD_INT 7
47733: PUSH
47734: LD_INT 28
47736: PUSH
47737: LD_INT 45
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: PUSH
47745: LD_VAR 0 12
47749: ARRAY
47750: ST_TO_ADDR
// break ;
47751: GO 47755
// end ; end ; end ;
47753: GO 47584
47755: POP
47756: POP
// end ; if not weapon then
47757: LD_VAR 0 18
47761: NOT
47762: IFFALSE 47822
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47764: LD_ADDR_VAR 0 5
47768: PUSH
47769: LD_VAR 0 5
47773: PUSH
47774: LD_INT 11
47776: PUSH
47777: LD_INT 30
47779: PUSH
47780: LD_INT 49
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: LIST
47787: DIFF
47788: ST_TO_ADDR
// if not list then
47789: LD_VAR 0 5
47793: NOT
47794: IFFALSE 47798
// exit ;
47796: GO 47940
// weapon := list [ rand ( 1 , list ) ] ;
47798: LD_ADDR_VAR 0 18
47802: PUSH
47803: LD_VAR 0 5
47807: PUSH
47808: LD_INT 1
47810: PPUSH
47811: LD_VAR 0 5
47815: PPUSH
47816: CALL_OW 12
47820: ARRAY
47821: ST_TO_ADDR
// end ; if weapon then
47822: LD_VAR 0 18
47826: IFFALSE 47940
// begin tmp := CostOfWeapon ( weapon ) ;
47828: LD_ADDR_VAR 0 14
47832: PUSH
47833: LD_VAR 0 18
47837: PPUSH
47838: CALL_OW 451
47842: ST_TO_ADDR
// j := GetBase ( tower ) ;
47843: LD_ADDR_VAR 0 9
47847: PUSH
47848: LD_VAR 0 1
47852: PPUSH
47853: CALL_OW 274
47857: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47858: LD_VAR 0 9
47862: PPUSH
47863: LD_INT 1
47865: PPUSH
47866: CALL_OW 275
47870: PUSH
47871: LD_VAR 0 14
47875: PUSH
47876: LD_INT 1
47878: ARRAY
47879: GREATEREQUAL
47880: PUSH
47881: LD_VAR 0 9
47885: PPUSH
47886: LD_INT 2
47888: PPUSH
47889: CALL_OW 275
47893: PUSH
47894: LD_VAR 0 14
47898: PUSH
47899: LD_INT 2
47901: ARRAY
47902: GREATEREQUAL
47903: AND
47904: PUSH
47905: LD_VAR 0 9
47909: PPUSH
47910: LD_INT 3
47912: PPUSH
47913: CALL_OW 275
47917: PUSH
47918: LD_VAR 0 14
47922: PUSH
47923: LD_INT 3
47925: ARRAY
47926: GREATEREQUAL
47927: AND
47928: IFFALSE 47940
// result := weapon ;
47930: LD_ADDR_VAR 0 3
47934: PUSH
47935: LD_VAR 0 18
47939: ST_TO_ADDR
// end ; end ;
47940: LD_VAR 0 3
47944: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47945: LD_INT 0
47947: PPUSH
47948: PPUSH
// result := true ;
47949: LD_ADDR_VAR 0 3
47953: PUSH
47954: LD_INT 1
47956: ST_TO_ADDR
// if array1 = array2 then
47957: LD_VAR 0 1
47961: PUSH
47962: LD_VAR 0 2
47966: EQUAL
47967: IFFALSE 48027
// begin for i = 1 to array1 do
47969: LD_ADDR_VAR 0 4
47973: PUSH
47974: DOUBLE
47975: LD_INT 1
47977: DEC
47978: ST_TO_ADDR
47979: LD_VAR 0 1
47983: PUSH
47984: FOR_TO
47985: IFFALSE 48023
// if array1 [ i ] <> array2 [ i ] then
47987: LD_VAR 0 1
47991: PUSH
47992: LD_VAR 0 4
47996: ARRAY
47997: PUSH
47998: LD_VAR 0 2
48002: PUSH
48003: LD_VAR 0 4
48007: ARRAY
48008: NONEQUAL
48009: IFFALSE 48021
// begin result := false ;
48011: LD_ADDR_VAR 0 3
48015: PUSH
48016: LD_INT 0
48018: ST_TO_ADDR
// break ;
48019: GO 48023
// end ;
48021: GO 47984
48023: POP
48024: POP
// end else
48025: GO 48035
// result := false ;
48027: LD_ADDR_VAR 0 3
48031: PUSH
48032: LD_INT 0
48034: ST_TO_ADDR
// end ;
48035: LD_VAR 0 3
48039: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48040: LD_INT 0
48042: PPUSH
48043: PPUSH
// if not array1 or not array2 then
48044: LD_VAR 0 1
48048: NOT
48049: PUSH
48050: LD_VAR 0 2
48054: NOT
48055: OR
48056: IFFALSE 48060
// exit ;
48058: GO 48124
// result := true ;
48060: LD_ADDR_VAR 0 3
48064: PUSH
48065: LD_INT 1
48067: ST_TO_ADDR
// for i = 1 to array1 do
48068: LD_ADDR_VAR 0 4
48072: PUSH
48073: DOUBLE
48074: LD_INT 1
48076: DEC
48077: ST_TO_ADDR
48078: LD_VAR 0 1
48082: PUSH
48083: FOR_TO
48084: IFFALSE 48122
// if array1 [ i ] <> array2 [ i ] then
48086: LD_VAR 0 1
48090: PUSH
48091: LD_VAR 0 4
48095: ARRAY
48096: PUSH
48097: LD_VAR 0 2
48101: PUSH
48102: LD_VAR 0 4
48106: ARRAY
48107: NONEQUAL
48108: IFFALSE 48120
// begin result := false ;
48110: LD_ADDR_VAR 0 3
48114: PUSH
48115: LD_INT 0
48117: ST_TO_ADDR
// break ;
48118: GO 48122
// end ;
48120: GO 48083
48122: POP
48123: POP
// end ;
48124: LD_VAR 0 3
48128: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48129: LD_INT 0
48131: PPUSH
48132: PPUSH
48133: PPUSH
// pom := GetBase ( fac ) ;
48134: LD_ADDR_VAR 0 5
48138: PUSH
48139: LD_VAR 0 1
48143: PPUSH
48144: CALL_OW 274
48148: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48149: LD_ADDR_VAR 0 4
48153: PUSH
48154: LD_VAR 0 2
48158: PUSH
48159: LD_INT 1
48161: ARRAY
48162: PPUSH
48163: LD_VAR 0 2
48167: PUSH
48168: LD_INT 2
48170: ARRAY
48171: PPUSH
48172: LD_VAR 0 2
48176: PUSH
48177: LD_INT 3
48179: ARRAY
48180: PPUSH
48181: LD_VAR 0 2
48185: PUSH
48186: LD_INT 4
48188: ARRAY
48189: PPUSH
48190: CALL_OW 449
48194: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48195: LD_ADDR_VAR 0 3
48199: PUSH
48200: LD_VAR 0 5
48204: PPUSH
48205: LD_INT 1
48207: PPUSH
48208: CALL_OW 275
48212: PUSH
48213: LD_VAR 0 4
48217: PUSH
48218: LD_INT 1
48220: ARRAY
48221: GREATEREQUAL
48222: PUSH
48223: LD_VAR 0 5
48227: PPUSH
48228: LD_INT 2
48230: PPUSH
48231: CALL_OW 275
48235: PUSH
48236: LD_VAR 0 4
48240: PUSH
48241: LD_INT 2
48243: ARRAY
48244: GREATEREQUAL
48245: AND
48246: PUSH
48247: LD_VAR 0 5
48251: PPUSH
48252: LD_INT 3
48254: PPUSH
48255: CALL_OW 275
48259: PUSH
48260: LD_VAR 0 4
48264: PUSH
48265: LD_INT 3
48267: ARRAY
48268: GREATEREQUAL
48269: AND
48270: ST_TO_ADDR
// end ;
48271: LD_VAR 0 3
48275: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48276: LD_INT 0
48278: PPUSH
48279: PPUSH
48280: PPUSH
48281: PPUSH
// pom := GetBase ( building ) ;
48282: LD_ADDR_VAR 0 3
48286: PUSH
48287: LD_VAR 0 1
48291: PPUSH
48292: CALL_OW 274
48296: ST_TO_ADDR
// if not pom then
48297: LD_VAR 0 3
48301: NOT
48302: IFFALSE 48306
// exit ;
48304: GO 48476
// btype := GetBType ( building ) ;
48306: LD_ADDR_VAR 0 5
48310: PUSH
48311: LD_VAR 0 1
48315: PPUSH
48316: CALL_OW 266
48320: ST_TO_ADDR
// if btype = b_armoury then
48321: LD_VAR 0 5
48325: PUSH
48326: LD_INT 4
48328: EQUAL
48329: IFFALSE 48339
// btype := b_barracks ;
48331: LD_ADDR_VAR 0 5
48335: PUSH
48336: LD_INT 5
48338: ST_TO_ADDR
// if btype = b_depot then
48339: LD_VAR 0 5
48343: PUSH
48344: LD_INT 0
48346: EQUAL
48347: IFFALSE 48357
// btype := b_warehouse ;
48349: LD_ADDR_VAR 0 5
48353: PUSH
48354: LD_INT 1
48356: ST_TO_ADDR
// if btype = b_workshop then
48357: LD_VAR 0 5
48361: PUSH
48362: LD_INT 2
48364: EQUAL
48365: IFFALSE 48375
// btype := b_factory ;
48367: LD_ADDR_VAR 0 5
48371: PUSH
48372: LD_INT 3
48374: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48375: LD_ADDR_VAR 0 4
48379: PUSH
48380: LD_VAR 0 5
48384: PPUSH
48385: LD_VAR 0 1
48389: PPUSH
48390: CALL_OW 248
48394: PPUSH
48395: CALL_OW 450
48399: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48400: LD_ADDR_VAR 0 2
48404: PUSH
48405: LD_VAR 0 3
48409: PPUSH
48410: LD_INT 1
48412: PPUSH
48413: CALL_OW 275
48417: PUSH
48418: LD_VAR 0 4
48422: PUSH
48423: LD_INT 1
48425: ARRAY
48426: GREATEREQUAL
48427: PUSH
48428: LD_VAR 0 3
48432: PPUSH
48433: LD_INT 2
48435: PPUSH
48436: CALL_OW 275
48440: PUSH
48441: LD_VAR 0 4
48445: PUSH
48446: LD_INT 2
48448: ARRAY
48449: GREATEREQUAL
48450: AND
48451: PUSH
48452: LD_VAR 0 3
48456: PPUSH
48457: LD_INT 3
48459: PPUSH
48460: CALL_OW 275
48464: PUSH
48465: LD_VAR 0 4
48469: PUSH
48470: LD_INT 3
48472: ARRAY
48473: GREATEREQUAL
48474: AND
48475: ST_TO_ADDR
// end ;
48476: LD_VAR 0 2
48480: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48481: LD_INT 0
48483: PPUSH
48484: PPUSH
48485: PPUSH
// pom := GetBase ( building ) ;
48486: LD_ADDR_VAR 0 4
48490: PUSH
48491: LD_VAR 0 1
48495: PPUSH
48496: CALL_OW 274
48500: ST_TO_ADDR
// if not pom then
48501: LD_VAR 0 4
48505: NOT
48506: IFFALSE 48510
// exit ;
48508: GO 48611
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48510: LD_ADDR_VAR 0 5
48514: PUSH
48515: LD_VAR 0 2
48519: PPUSH
48520: LD_VAR 0 1
48524: PPUSH
48525: CALL_OW 248
48529: PPUSH
48530: CALL_OW 450
48534: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48535: LD_ADDR_VAR 0 3
48539: PUSH
48540: LD_VAR 0 4
48544: PPUSH
48545: LD_INT 1
48547: PPUSH
48548: CALL_OW 275
48552: PUSH
48553: LD_VAR 0 5
48557: PUSH
48558: LD_INT 1
48560: ARRAY
48561: GREATEREQUAL
48562: PUSH
48563: LD_VAR 0 4
48567: PPUSH
48568: LD_INT 2
48570: PPUSH
48571: CALL_OW 275
48575: PUSH
48576: LD_VAR 0 5
48580: PUSH
48581: LD_INT 2
48583: ARRAY
48584: GREATEREQUAL
48585: AND
48586: PUSH
48587: LD_VAR 0 4
48591: PPUSH
48592: LD_INT 3
48594: PPUSH
48595: CALL_OW 275
48599: PUSH
48600: LD_VAR 0 5
48604: PUSH
48605: LD_INT 3
48607: ARRAY
48608: GREATEREQUAL
48609: AND
48610: ST_TO_ADDR
// end ;
48611: LD_VAR 0 3
48615: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48616: LD_INT 0
48618: PPUSH
48619: PPUSH
48620: PPUSH
48621: PPUSH
48622: PPUSH
48623: PPUSH
48624: PPUSH
48625: PPUSH
48626: PPUSH
48627: PPUSH
48628: PPUSH
// result := false ;
48629: LD_ADDR_VAR 0 8
48633: PUSH
48634: LD_INT 0
48636: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48637: LD_VAR 0 5
48641: NOT
48642: PUSH
48643: LD_VAR 0 1
48647: NOT
48648: OR
48649: PUSH
48650: LD_VAR 0 2
48654: NOT
48655: OR
48656: PUSH
48657: LD_VAR 0 3
48661: NOT
48662: OR
48663: IFFALSE 48667
// exit ;
48665: GO 49481
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48667: LD_ADDR_VAR 0 14
48671: PUSH
48672: LD_VAR 0 1
48676: PPUSH
48677: LD_VAR 0 2
48681: PPUSH
48682: LD_VAR 0 3
48686: PPUSH
48687: LD_VAR 0 4
48691: PPUSH
48692: LD_VAR 0 5
48696: PUSH
48697: LD_INT 1
48699: ARRAY
48700: PPUSH
48701: CALL_OW 248
48705: PPUSH
48706: LD_INT 0
48708: PPUSH
48709: CALL 50718 0 6
48713: ST_TO_ADDR
// if not hexes then
48714: LD_VAR 0 14
48718: NOT
48719: IFFALSE 48723
// exit ;
48721: GO 49481
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48723: LD_ADDR_VAR 0 17
48727: PUSH
48728: LD_VAR 0 5
48732: PPUSH
48733: LD_INT 22
48735: PUSH
48736: LD_VAR 0 13
48740: PPUSH
48741: CALL_OW 255
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: LD_INT 30
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 30
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: LIST
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PPUSH
48782: CALL_OW 72
48786: ST_TO_ADDR
// for i = 1 to hexes do
48787: LD_ADDR_VAR 0 9
48791: PUSH
48792: DOUBLE
48793: LD_INT 1
48795: DEC
48796: ST_TO_ADDR
48797: LD_VAR 0 14
48801: PUSH
48802: FOR_TO
48803: IFFALSE 49479
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48805: LD_ADDR_VAR 0 13
48809: PUSH
48810: LD_VAR 0 14
48814: PUSH
48815: LD_VAR 0 9
48819: ARRAY
48820: PUSH
48821: LD_INT 1
48823: ARRAY
48824: PPUSH
48825: LD_VAR 0 14
48829: PUSH
48830: LD_VAR 0 9
48834: ARRAY
48835: PUSH
48836: LD_INT 2
48838: ARRAY
48839: PPUSH
48840: CALL_OW 428
48844: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48845: LD_VAR 0 14
48849: PUSH
48850: LD_VAR 0 9
48854: ARRAY
48855: PUSH
48856: LD_INT 1
48858: ARRAY
48859: PPUSH
48860: LD_VAR 0 14
48864: PUSH
48865: LD_VAR 0 9
48869: ARRAY
48870: PUSH
48871: LD_INT 2
48873: ARRAY
48874: PPUSH
48875: CALL_OW 351
48879: PUSH
48880: LD_VAR 0 14
48884: PUSH
48885: LD_VAR 0 9
48889: ARRAY
48890: PUSH
48891: LD_INT 1
48893: ARRAY
48894: PPUSH
48895: LD_VAR 0 14
48899: PUSH
48900: LD_VAR 0 9
48904: ARRAY
48905: PUSH
48906: LD_INT 2
48908: ARRAY
48909: PPUSH
48910: CALL_OW 488
48914: NOT
48915: OR
48916: PUSH
48917: LD_VAR 0 13
48921: PPUSH
48922: CALL_OW 247
48926: PUSH
48927: LD_INT 3
48929: EQUAL
48930: OR
48931: IFFALSE 48937
// exit ;
48933: POP
48934: POP
48935: GO 49481
// if not tmp then
48937: LD_VAR 0 13
48941: NOT
48942: IFFALSE 48946
// continue ;
48944: GO 48802
// result := true ;
48946: LD_ADDR_VAR 0 8
48950: PUSH
48951: LD_INT 1
48953: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48954: LD_VAR 0 6
48958: PUSH
48959: LD_VAR 0 13
48963: PPUSH
48964: CALL_OW 247
48968: PUSH
48969: LD_INT 2
48971: EQUAL
48972: AND
48973: PUSH
48974: LD_VAR 0 13
48978: PPUSH
48979: CALL_OW 263
48983: PUSH
48984: LD_INT 1
48986: EQUAL
48987: AND
48988: IFFALSE 49152
// begin if IsDrivenBy ( tmp ) then
48990: LD_VAR 0 13
48994: PPUSH
48995: CALL_OW 311
48999: IFFALSE 49003
// continue ;
49001: GO 48802
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49003: LD_VAR 0 6
49007: PPUSH
49008: LD_INT 3
49010: PUSH
49011: LD_INT 60
49013: PUSH
49014: EMPTY
49015: LIST
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 3
49023: PUSH
49024: LD_INT 55
49026: PUSH
49027: EMPTY
49028: LIST
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PPUSH
49038: CALL_OW 72
49042: IFFALSE 49150
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49044: LD_ADDR_VAR 0 18
49048: PUSH
49049: LD_VAR 0 6
49053: PPUSH
49054: LD_INT 3
49056: PUSH
49057: LD_INT 60
49059: PUSH
49060: EMPTY
49061: LIST
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 3
49069: PUSH
49070: LD_INT 55
49072: PUSH
49073: EMPTY
49074: LIST
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PPUSH
49084: CALL_OW 72
49088: PUSH
49089: LD_INT 1
49091: ARRAY
49092: ST_TO_ADDR
// if IsInUnit ( driver ) then
49093: LD_VAR 0 18
49097: PPUSH
49098: CALL_OW 310
49102: IFFALSE 49113
// ComExit ( driver ) ;
49104: LD_VAR 0 18
49108: PPUSH
49109: CALL 73902 0 1
// AddComEnterUnit ( driver , tmp ) ;
49113: LD_VAR 0 18
49117: PPUSH
49118: LD_VAR 0 13
49122: PPUSH
49123: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49127: LD_VAR 0 18
49131: PPUSH
49132: LD_VAR 0 7
49136: PPUSH
49137: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49141: LD_VAR 0 18
49145: PPUSH
49146: CALL_OW 181
// end ; continue ;
49150: GO 48802
// end ; if not cleaners or not tmp in cleaners then
49152: LD_VAR 0 6
49156: NOT
49157: PUSH
49158: LD_VAR 0 13
49162: PUSH
49163: LD_VAR 0 6
49167: IN
49168: NOT
49169: OR
49170: IFFALSE 49477
// begin if dep then
49172: LD_VAR 0 17
49176: IFFALSE 49312
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49178: LD_ADDR_VAR 0 16
49182: PUSH
49183: LD_VAR 0 17
49187: PUSH
49188: LD_INT 1
49190: ARRAY
49191: PPUSH
49192: CALL_OW 250
49196: PPUSH
49197: LD_VAR 0 17
49201: PUSH
49202: LD_INT 1
49204: ARRAY
49205: PPUSH
49206: CALL_OW 254
49210: PPUSH
49211: LD_INT 5
49213: PPUSH
49214: CALL_OW 272
49218: PUSH
49219: LD_VAR 0 17
49223: PUSH
49224: LD_INT 1
49226: ARRAY
49227: PPUSH
49228: CALL_OW 251
49232: PPUSH
49233: LD_VAR 0 17
49237: PUSH
49238: LD_INT 1
49240: ARRAY
49241: PPUSH
49242: CALL_OW 254
49246: PPUSH
49247: LD_INT 5
49249: PPUSH
49250: CALL_OW 273
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49259: LD_VAR 0 16
49263: PUSH
49264: LD_INT 1
49266: ARRAY
49267: PPUSH
49268: LD_VAR 0 16
49272: PUSH
49273: LD_INT 2
49275: ARRAY
49276: PPUSH
49277: CALL_OW 488
49281: IFFALSE 49312
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49283: LD_VAR 0 13
49287: PPUSH
49288: LD_VAR 0 16
49292: PUSH
49293: LD_INT 1
49295: ARRAY
49296: PPUSH
49297: LD_VAR 0 16
49301: PUSH
49302: LD_INT 2
49304: ARRAY
49305: PPUSH
49306: CALL_OW 111
// continue ;
49310: GO 48802
// end ; end ; r := GetDir ( tmp ) ;
49312: LD_ADDR_VAR 0 15
49316: PUSH
49317: LD_VAR 0 13
49321: PPUSH
49322: CALL_OW 254
49326: ST_TO_ADDR
// if r = 5 then
49327: LD_VAR 0 15
49331: PUSH
49332: LD_INT 5
49334: EQUAL
49335: IFFALSE 49345
// r := 0 ;
49337: LD_ADDR_VAR 0 15
49341: PUSH
49342: LD_INT 0
49344: ST_TO_ADDR
// for j = r to 5 do
49345: LD_ADDR_VAR 0 10
49349: PUSH
49350: DOUBLE
49351: LD_VAR 0 15
49355: DEC
49356: ST_TO_ADDR
49357: LD_INT 5
49359: PUSH
49360: FOR_TO
49361: IFFALSE 49475
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49363: LD_ADDR_VAR 0 11
49367: PUSH
49368: LD_VAR 0 13
49372: PPUSH
49373: CALL_OW 250
49377: PPUSH
49378: LD_VAR 0 10
49382: PPUSH
49383: LD_INT 2
49385: PPUSH
49386: CALL_OW 272
49390: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49391: LD_ADDR_VAR 0 12
49395: PUSH
49396: LD_VAR 0 13
49400: PPUSH
49401: CALL_OW 251
49405: PPUSH
49406: LD_VAR 0 10
49410: PPUSH
49411: LD_INT 2
49413: PPUSH
49414: CALL_OW 273
49418: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49419: LD_VAR 0 11
49423: PPUSH
49424: LD_VAR 0 12
49428: PPUSH
49429: CALL_OW 488
49433: PUSH
49434: LD_VAR 0 11
49438: PPUSH
49439: LD_VAR 0 12
49443: PPUSH
49444: CALL_OW 428
49448: NOT
49449: AND
49450: IFFALSE 49473
// begin ComMoveXY ( tmp , _x , _y ) ;
49452: LD_VAR 0 13
49456: PPUSH
49457: LD_VAR 0 11
49461: PPUSH
49462: LD_VAR 0 12
49466: PPUSH
49467: CALL_OW 111
// break ;
49471: GO 49475
// end ; end ;
49473: GO 49360
49475: POP
49476: POP
// end ; end ;
49477: GO 48802
49479: POP
49480: POP
// end ;
49481: LD_VAR 0 8
49485: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49486: LD_INT 0
49488: PPUSH
// result := true ;
49489: LD_ADDR_VAR 0 3
49493: PUSH
49494: LD_INT 1
49496: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49497: LD_VAR 0 2
49501: PUSH
49502: LD_INT 24
49504: DOUBLE
49505: EQUAL
49506: IFTRUE 49516
49508: LD_INT 33
49510: DOUBLE
49511: EQUAL
49512: IFTRUE 49516
49514: GO 49541
49516: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49517: LD_ADDR_VAR 0 3
49521: PUSH
49522: LD_INT 32
49524: PPUSH
49525: LD_VAR 0 1
49529: PPUSH
49530: CALL_OW 321
49534: PUSH
49535: LD_INT 2
49537: EQUAL
49538: ST_TO_ADDR
49539: GO 49861
49541: LD_INT 20
49543: DOUBLE
49544: EQUAL
49545: IFTRUE 49549
49547: GO 49574
49549: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49550: LD_ADDR_VAR 0 3
49554: PUSH
49555: LD_INT 6
49557: PPUSH
49558: LD_VAR 0 1
49562: PPUSH
49563: CALL_OW 321
49567: PUSH
49568: LD_INT 2
49570: EQUAL
49571: ST_TO_ADDR
49572: GO 49861
49574: LD_INT 22
49576: DOUBLE
49577: EQUAL
49578: IFTRUE 49588
49580: LD_INT 36
49582: DOUBLE
49583: EQUAL
49584: IFTRUE 49588
49586: GO 49613
49588: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49589: LD_ADDR_VAR 0 3
49593: PUSH
49594: LD_INT 15
49596: PPUSH
49597: LD_VAR 0 1
49601: PPUSH
49602: CALL_OW 321
49606: PUSH
49607: LD_INT 2
49609: EQUAL
49610: ST_TO_ADDR
49611: GO 49861
49613: LD_INT 30
49615: DOUBLE
49616: EQUAL
49617: IFTRUE 49621
49619: GO 49646
49621: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49622: LD_ADDR_VAR 0 3
49626: PUSH
49627: LD_INT 20
49629: PPUSH
49630: LD_VAR 0 1
49634: PPUSH
49635: CALL_OW 321
49639: PUSH
49640: LD_INT 2
49642: EQUAL
49643: ST_TO_ADDR
49644: GO 49861
49646: LD_INT 28
49648: DOUBLE
49649: EQUAL
49650: IFTRUE 49660
49652: LD_INT 21
49654: DOUBLE
49655: EQUAL
49656: IFTRUE 49660
49658: GO 49685
49660: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49661: LD_ADDR_VAR 0 3
49665: PUSH
49666: LD_INT 21
49668: PPUSH
49669: LD_VAR 0 1
49673: PPUSH
49674: CALL_OW 321
49678: PUSH
49679: LD_INT 2
49681: EQUAL
49682: ST_TO_ADDR
49683: GO 49861
49685: LD_INT 16
49687: DOUBLE
49688: EQUAL
49689: IFTRUE 49693
49691: GO 49720
49693: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49694: LD_ADDR_VAR 0 3
49698: PUSH
49699: LD_EXP 60
49703: PPUSH
49704: LD_VAR 0 1
49708: PPUSH
49709: CALL_OW 321
49713: PUSH
49714: LD_INT 2
49716: EQUAL
49717: ST_TO_ADDR
49718: GO 49861
49720: LD_INT 19
49722: DOUBLE
49723: EQUAL
49724: IFTRUE 49734
49726: LD_INT 23
49728: DOUBLE
49729: EQUAL
49730: IFTRUE 49734
49732: GO 49761
49734: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49735: LD_ADDR_VAR 0 3
49739: PUSH
49740: LD_EXP 59
49744: PPUSH
49745: LD_VAR 0 1
49749: PPUSH
49750: CALL_OW 321
49754: PUSH
49755: LD_INT 2
49757: EQUAL
49758: ST_TO_ADDR
49759: GO 49861
49761: LD_INT 17
49763: DOUBLE
49764: EQUAL
49765: IFTRUE 49769
49767: GO 49794
49769: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49770: LD_ADDR_VAR 0 3
49774: PUSH
49775: LD_INT 39
49777: PPUSH
49778: LD_VAR 0 1
49782: PPUSH
49783: CALL_OW 321
49787: PUSH
49788: LD_INT 2
49790: EQUAL
49791: ST_TO_ADDR
49792: GO 49861
49794: LD_INT 18
49796: DOUBLE
49797: EQUAL
49798: IFTRUE 49802
49800: GO 49827
49802: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49803: LD_ADDR_VAR 0 3
49807: PUSH
49808: LD_INT 40
49810: PPUSH
49811: LD_VAR 0 1
49815: PPUSH
49816: CALL_OW 321
49820: PUSH
49821: LD_INT 2
49823: EQUAL
49824: ST_TO_ADDR
49825: GO 49861
49827: LD_INT 27
49829: DOUBLE
49830: EQUAL
49831: IFTRUE 49835
49833: GO 49860
49835: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49836: LD_ADDR_VAR 0 3
49840: PUSH
49841: LD_INT 35
49843: PPUSH
49844: LD_VAR 0 1
49848: PPUSH
49849: CALL_OW 321
49853: PUSH
49854: LD_INT 2
49856: EQUAL
49857: ST_TO_ADDR
49858: GO 49861
49860: POP
// end ;
49861: LD_VAR 0 3
49865: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49866: LD_INT 0
49868: PPUSH
49869: PPUSH
49870: PPUSH
49871: PPUSH
49872: PPUSH
49873: PPUSH
49874: PPUSH
49875: PPUSH
49876: PPUSH
49877: PPUSH
49878: PPUSH
// result := false ;
49879: LD_ADDR_VAR 0 6
49883: PUSH
49884: LD_INT 0
49886: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49887: LD_VAR 0 1
49891: NOT
49892: PUSH
49893: LD_VAR 0 1
49897: PPUSH
49898: CALL_OW 266
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: IN
49913: NOT
49914: OR
49915: PUSH
49916: LD_VAR 0 2
49920: NOT
49921: OR
49922: PUSH
49923: LD_VAR 0 5
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: LD_INT 3
49939: PUSH
49940: LD_INT 4
49942: PUSH
49943: LD_INT 5
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: IN
49954: NOT
49955: OR
49956: PUSH
49957: LD_VAR 0 3
49961: PPUSH
49962: LD_VAR 0 4
49966: PPUSH
49967: CALL_OW 488
49971: NOT
49972: OR
49973: IFFALSE 49977
// exit ;
49975: GO 50713
// side := GetSide ( depot ) ;
49977: LD_ADDR_VAR 0 9
49981: PUSH
49982: LD_VAR 0 1
49986: PPUSH
49987: CALL_OW 255
49991: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49992: LD_VAR 0 9
49996: PPUSH
49997: LD_VAR 0 2
50001: PPUSH
50002: CALL 49486 0 2
50006: NOT
50007: IFFALSE 50011
// exit ;
50009: GO 50713
// pom := GetBase ( depot ) ;
50011: LD_ADDR_VAR 0 10
50015: PUSH
50016: LD_VAR 0 1
50020: PPUSH
50021: CALL_OW 274
50025: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50026: LD_ADDR_VAR 0 11
50030: PUSH
50031: LD_VAR 0 2
50035: PPUSH
50036: LD_VAR 0 1
50040: PPUSH
50041: CALL_OW 248
50045: PPUSH
50046: CALL_OW 450
50050: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50051: LD_VAR 0 10
50055: PPUSH
50056: LD_INT 1
50058: PPUSH
50059: CALL_OW 275
50063: PUSH
50064: LD_VAR 0 11
50068: PUSH
50069: LD_INT 1
50071: ARRAY
50072: GREATEREQUAL
50073: PUSH
50074: LD_VAR 0 10
50078: PPUSH
50079: LD_INT 2
50081: PPUSH
50082: CALL_OW 275
50086: PUSH
50087: LD_VAR 0 11
50091: PUSH
50092: LD_INT 2
50094: ARRAY
50095: GREATEREQUAL
50096: AND
50097: PUSH
50098: LD_VAR 0 10
50102: PPUSH
50103: LD_INT 3
50105: PPUSH
50106: CALL_OW 275
50110: PUSH
50111: LD_VAR 0 11
50115: PUSH
50116: LD_INT 3
50118: ARRAY
50119: GREATEREQUAL
50120: AND
50121: NOT
50122: IFFALSE 50126
// exit ;
50124: GO 50713
// if GetBType ( depot ) = b_depot then
50126: LD_VAR 0 1
50130: PPUSH
50131: CALL_OW 266
50135: PUSH
50136: LD_INT 0
50138: EQUAL
50139: IFFALSE 50151
// dist := 28 else
50141: LD_ADDR_VAR 0 14
50145: PUSH
50146: LD_INT 28
50148: ST_TO_ADDR
50149: GO 50159
// dist := 36 ;
50151: LD_ADDR_VAR 0 14
50155: PUSH
50156: LD_INT 36
50158: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50159: LD_VAR 0 1
50163: PPUSH
50164: LD_VAR 0 3
50168: PPUSH
50169: LD_VAR 0 4
50173: PPUSH
50174: CALL_OW 297
50178: PUSH
50179: LD_VAR 0 14
50183: GREATER
50184: IFFALSE 50188
// exit ;
50186: GO 50713
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50188: LD_ADDR_VAR 0 12
50192: PUSH
50193: LD_VAR 0 2
50197: PPUSH
50198: LD_VAR 0 3
50202: PPUSH
50203: LD_VAR 0 4
50207: PPUSH
50208: LD_VAR 0 5
50212: PPUSH
50213: LD_VAR 0 1
50217: PPUSH
50218: CALL_OW 248
50222: PPUSH
50223: LD_INT 0
50225: PPUSH
50226: CALL 50718 0 6
50230: ST_TO_ADDR
// if not hexes then
50231: LD_VAR 0 12
50235: NOT
50236: IFFALSE 50240
// exit ;
50238: GO 50713
// hex := GetHexInfo ( x , y ) ;
50240: LD_ADDR_VAR 0 15
50244: PUSH
50245: LD_VAR 0 3
50249: PPUSH
50250: LD_VAR 0 4
50254: PPUSH
50255: CALL_OW 546
50259: ST_TO_ADDR
// if hex [ 1 ] then
50260: LD_VAR 0 15
50264: PUSH
50265: LD_INT 1
50267: ARRAY
50268: IFFALSE 50272
// exit ;
50270: GO 50713
// height := hex [ 2 ] ;
50272: LD_ADDR_VAR 0 13
50276: PUSH
50277: LD_VAR 0 15
50281: PUSH
50282: LD_INT 2
50284: ARRAY
50285: ST_TO_ADDR
// for i = 1 to hexes do
50286: LD_ADDR_VAR 0 7
50290: PUSH
50291: DOUBLE
50292: LD_INT 1
50294: DEC
50295: ST_TO_ADDR
50296: LD_VAR 0 12
50300: PUSH
50301: FOR_TO
50302: IFFALSE 50632
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50304: LD_VAR 0 12
50308: PUSH
50309: LD_VAR 0 7
50313: ARRAY
50314: PUSH
50315: LD_INT 1
50317: ARRAY
50318: PPUSH
50319: LD_VAR 0 12
50323: PUSH
50324: LD_VAR 0 7
50328: ARRAY
50329: PUSH
50330: LD_INT 2
50332: ARRAY
50333: PPUSH
50334: CALL_OW 488
50338: NOT
50339: PUSH
50340: LD_VAR 0 12
50344: PUSH
50345: LD_VAR 0 7
50349: ARRAY
50350: PUSH
50351: LD_INT 1
50353: ARRAY
50354: PPUSH
50355: LD_VAR 0 12
50359: PUSH
50360: LD_VAR 0 7
50364: ARRAY
50365: PUSH
50366: LD_INT 2
50368: ARRAY
50369: PPUSH
50370: CALL_OW 428
50374: PUSH
50375: LD_INT 0
50377: GREATER
50378: OR
50379: PUSH
50380: LD_VAR 0 12
50384: PUSH
50385: LD_VAR 0 7
50389: ARRAY
50390: PUSH
50391: LD_INT 1
50393: ARRAY
50394: PPUSH
50395: LD_VAR 0 12
50399: PUSH
50400: LD_VAR 0 7
50404: ARRAY
50405: PUSH
50406: LD_INT 2
50408: ARRAY
50409: PPUSH
50410: CALL_OW 351
50414: OR
50415: IFFALSE 50421
// exit ;
50417: POP
50418: POP
50419: GO 50713
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50421: LD_ADDR_VAR 0 8
50425: PUSH
50426: LD_VAR 0 12
50430: PUSH
50431: LD_VAR 0 7
50435: ARRAY
50436: PUSH
50437: LD_INT 1
50439: ARRAY
50440: PPUSH
50441: LD_VAR 0 12
50445: PUSH
50446: LD_VAR 0 7
50450: ARRAY
50451: PUSH
50452: LD_INT 2
50454: ARRAY
50455: PPUSH
50456: CALL_OW 546
50460: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50461: LD_VAR 0 8
50465: PUSH
50466: LD_INT 1
50468: ARRAY
50469: PUSH
50470: LD_VAR 0 8
50474: PUSH
50475: LD_INT 2
50477: ARRAY
50478: PUSH
50479: LD_VAR 0 13
50483: PUSH
50484: LD_INT 2
50486: PLUS
50487: GREATER
50488: OR
50489: PUSH
50490: LD_VAR 0 8
50494: PUSH
50495: LD_INT 2
50497: ARRAY
50498: PUSH
50499: LD_VAR 0 13
50503: PUSH
50504: LD_INT 2
50506: MINUS
50507: LESS
50508: OR
50509: PUSH
50510: LD_VAR 0 8
50514: PUSH
50515: LD_INT 3
50517: ARRAY
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 8
50524: PUSH
50525: LD_INT 9
50527: PUSH
50528: LD_INT 10
50530: PUSH
50531: LD_INT 11
50533: PUSH
50534: LD_INT 12
50536: PUSH
50537: LD_INT 13
50539: PUSH
50540: LD_INT 16
50542: PUSH
50543: LD_INT 17
50545: PUSH
50546: LD_INT 18
50548: PUSH
50549: LD_INT 19
50551: PUSH
50552: LD_INT 20
50554: PUSH
50555: LD_INT 21
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: IN
50573: NOT
50574: OR
50575: PUSH
50576: LD_VAR 0 8
50580: PUSH
50581: LD_INT 5
50583: ARRAY
50584: NOT
50585: OR
50586: PUSH
50587: LD_VAR 0 8
50591: PUSH
50592: LD_INT 6
50594: ARRAY
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 2
50601: PUSH
50602: LD_INT 7
50604: PUSH
50605: LD_INT 9
50607: PUSH
50608: LD_INT 10
50610: PUSH
50611: LD_INT 11
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: IN
50622: NOT
50623: OR
50624: IFFALSE 50630
// exit ;
50626: POP
50627: POP
50628: GO 50713
// end ;
50630: GO 50301
50632: POP
50633: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50634: LD_VAR 0 9
50638: PPUSH
50639: LD_VAR 0 3
50643: PPUSH
50644: LD_VAR 0 4
50648: PPUSH
50649: LD_INT 20
50651: PPUSH
50652: CALL 42659 0 4
50656: PUSH
50657: LD_INT 4
50659: ARRAY
50660: IFFALSE 50664
// exit ;
50662: GO 50713
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50664: LD_VAR 0 2
50668: PUSH
50669: LD_INT 29
50671: PUSH
50672: LD_INT 30
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: IN
50679: PUSH
50680: LD_VAR 0 3
50684: PPUSH
50685: LD_VAR 0 4
50689: PPUSH
50690: LD_VAR 0 9
50694: PPUSH
50695: CALL_OW 440
50699: NOT
50700: AND
50701: IFFALSE 50705
// exit ;
50703: GO 50713
// result := true ;
50705: LD_ADDR_VAR 0 6
50709: PUSH
50710: LD_INT 1
50712: ST_TO_ADDR
// end ;
50713: LD_VAR 0 6
50717: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50718: LD_INT 0
50720: PPUSH
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
50730: PPUSH
50731: PPUSH
50732: PPUSH
50733: PPUSH
50734: PPUSH
50735: PPUSH
50736: PPUSH
50737: PPUSH
50738: PPUSH
50739: PPUSH
50740: PPUSH
50741: PPUSH
50742: PPUSH
50743: PPUSH
50744: PPUSH
50745: PPUSH
50746: PPUSH
50747: PPUSH
50748: PPUSH
50749: PPUSH
50750: PPUSH
50751: PPUSH
50752: PPUSH
50753: PPUSH
50754: PPUSH
50755: PPUSH
50756: PPUSH
50757: PPUSH
50758: PPUSH
50759: PPUSH
50760: PPUSH
50761: PPUSH
50762: PPUSH
50763: PPUSH
50764: PPUSH
50765: PPUSH
50766: PPUSH
50767: PPUSH
50768: PPUSH
50769: PPUSH
50770: PPUSH
50771: PPUSH
50772: PPUSH
50773: PPUSH
50774: PPUSH
50775: PPUSH
50776: PPUSH
50777: PPUSH
// result = [ ] ;
50778: LD_ADDR_VAR 0 7
50782: PUSH
50783: EMPTY
50784: ST_TO_ADDR
// temp_list = [ ] ;
50785: LD_ADDR_VAR 0 9
50789: PUSH
50790: EMPTY
50791: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50792: LD_VAR 0 4
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: LD_INT 4
50811: PUSH
50812: LD_INT 5
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: IN
50823: NOT
50824: PUSH
50825: LD_VAR 0 1
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: IN
50840: PUSH
50841: LD_VAR 0 5
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 2
50851: PUSH
50852: LD_INT 3
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: LIST
50859: IN
50860: NOT
50861: AND
50862: OR
50863: IFFALSE 50867
// exit ;
50865: GO 69258
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50867: LD_VAR 0 1
50871: PUSH
50872: LD_INT 6
50874: PUSH
50875: LD_INT 7
50877: PUSH
50878: LD_INT 8
50880: PUSH
50881: LD_INT 13
50883: PUSH
50884: LD_INT 12
50886: PUSH
50887: LD_INT 15
50889: PUSH
50890: LD_INT 11
50892: PUSH
50893: LD_INT 14
50895: PUSH
50896: LD_INT 10
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: IN
50910: IFFALSE 50920
// btype = b_lab ;
50912: LD_ADDR_VAR 0 1
50916: PUSH
50917: LD_INT 6
50919: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50920: LD_VAR 0 6
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: LIST
50938: IN
50939: NOT
50940: PUSH
50941: LD_VAR 0 1
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: LD_INT 6
50960: PUSH
50961: LD_INT 36
50963: PUSH
50964: LD_INT 4
50966: PUSH
50967: LD_INT 5
50969: PUSH
50970: LD_INT 31
50972: PUSH
50973: LD_INT 32
50975: PUSH
50976: LD_INT 33
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: IN
50992: NOT
50993: PUSH
50994: LD_VAR 0 6
50998: PUSH
50999: LD_INT 1
51001: EQUAL
51002: AND
51003: OR
51004: PUSH
51005: LD_VAR 0 1
51009: PUSH
51010: LD_INT 2
51012: PUSH
51013: LD_INT 3
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: IN
51020: NOT
51021: PUSH
51022: LD_VAR 0 6
51026: PUSH
51027: LD_INT 2
51029: EQUAL
51030: AND
51031: OR
51032: IFFALSE 51042
// mode = 0 ;
51034: LD_ADDR_VAR 0 6
51038: PUSH
51039: LD_INT 0
51041: ST_TO_ADDR
// case mode of 0 :
51042: LD_VAR 0 6
51046: PUSH
51047: LD_INT 0
51049: DOUBLE
51050: EQUAL
51051: IFTRUE 51055
51053: GO 62508
51055: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51056: LD_ADDR_VAR 0 11
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: LD_INT 3
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: LD_INT 3
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51249: LD_ADDR_VAR 0 12
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 3
51406: NEG
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 3
51417: NEG
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51445: LD_ADDR_VAR 0 13
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: LD_INT 2
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 2
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 2
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: NEG
51593: PUSH
51594: LD_INT 3
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 3
51604: NEG
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 3
51616: NEG
51617: PUSH
51618: LD_INT 3
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51644: LD_ADDR_VAR 0 14
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 3
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 3
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51840: LD_ADDR_VAR 0 15
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 3
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 3
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52033: LD_ADDR_VAR 0 16
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: LD_INT 3
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: LD_INT 3
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52226: LD_ADDR_VAR 0 17
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 2
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: LD_INT 2
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 2
52413: NEG
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52456: LD_ADDR_VAR 0 18
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52686: LD_ADDR_VAR 0 19
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52916: LD_ADDR_VAR 0 20
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53146: LD_ADDR_VAR 0 21
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 2
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53376: LD_ADDR_VAR 0 22
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 2
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 2
53552: NEG
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 2
53563: NEG
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53606: LD_ADDR_VAR 0 23
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 2
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: NEG
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: LD_INT 3
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: LD_INT 3
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53886: LD_ADDR_VAR 0 24
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 2
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 3
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54162: LD_ADDR_VAR 0 25
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: NEG
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 3
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: LD_INT 3
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 3
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54436: LD_ADDR_VAR 0 26
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: LD_INT 2
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: NEG
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: LD_INT 3
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54712: LD_ADDR_VAR 0 27
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 2
54899: NEG
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 3
54945: NEG
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: LD_INT 2
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54992: LD_ADDR_VAR 0 28
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 2
55168: NEG
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 2
55179: NEG
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: LD_INT 2
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: LD_INT 3
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 3
55227: NEG
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55274: LD_ADDR_VAR 0 29
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: LD_INT 3
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 3
55518: NEG
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55553: LD_ADDR_VAR 0 30
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 2
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: LD_INT 3
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 2
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55831: LD_ADDR_VAR 0 31
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: LD_INT 2
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 2
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 2
56008: NEG
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: LD_INT 3
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 2
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 3
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 3
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 2
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 3
56074: NEG
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56109: LD_ADDR_VAR 0 32
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 2
56286: NEG
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 3
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: LD_INT 3
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 2
56341: NEG
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 3
56352: NEG
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56387: LD_ADDR_VAR 0 33
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: LD_INT 2
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 2
56553: NEG
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 3
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 3
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 3
56631: NEG
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56666: LD_ADDR_VAR 0 34
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: LD_INT 2
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: LD_INT 2
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: NEG
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: LD_INT 2
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: LD_INT 3
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 3
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 3
56911: NEG
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56946: LD_ADDR_VAR 0 35
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57058: LD_ADDR_VAR 0 36
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57170: LD_ADDR_VAR 0 37
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57282: LD_ADDR_VAR 0 38
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 2
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57394: LD_ADDR_VAR 0 39
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: LD_INT 2
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57506: LD_ADDR_VAR 0 40
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57618: LD_ADDR_VAR 0 41
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: LD_INT 3
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 3
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 3
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 3
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 3
57861: PUSH
57862: LD_INT 3
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: LD_INT 3
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 3
57892: NEG
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 3
57903: NEG
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 3
57915: NEG
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: LD_INT 3
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57968: LD_ADDR_VAR 0 42
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 2
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: LD_INT 2
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: NEG
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: LD_INT 3
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: LD_INT 3
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: LD_INT 2
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: LD_INT 2
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: LD_INT 3
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: LD_INT 3
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: NEG
58266: PUSH
58267: LD_INT 2
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: NEG
58278: PUSH
58279: LD_INT 3
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58318: LD_ADDR_VAR 0 43
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: LD_INT 2
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 2
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: NEG
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 3
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: NEG
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 3
58625: NEG
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58666: LD_ADDR_VAR 0 44
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: LD_INT 3
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 3
58909: PUSH
58910: LD_INT 3
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: LD_INT 3
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: NEG
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 3
58940: NEG
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 3
58951: NEG
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: LD_INT 3
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59016: LD_ADDR_VAR 0 45
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 2
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 3
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: LD_INT 3
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 3
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: LD_INT 2
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: LD_INT 3
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 3
59313: NEG
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 3
59325: NEG
59326: PUSH
59327: LD_INT 3
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59366: LD_ADDR_VAR 0 46
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: NEG
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 3
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: LD_INT 3
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: LD_INT 2
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 3
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 3
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 3
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 3
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 3
59662: NEG
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 3
59673: NEG
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59714: LD_ADDR_VAR 0 47
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 2
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59865: LD_ADDR_VAR 0 48
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: LD_INT 2
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: LD_INT 1
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60012: LD_ADDR_VAR 0 49
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60156: LD_ADDR_VAR 0 50
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60300: LD_ADDR_VAR 0 51
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60447: LD_ADDR_VAR 0 52
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: LD_INT 2
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: NEG
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: LD_INT 2
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60598: LD_ADDR_VAR 0 53
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: LD_INT 2
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: NEG
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: NEG
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60828: LD_ADDR_VAR 0 54
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: LD_INT 2
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 2
61004: NEG
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 2
61027: NEG
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61058: LD_ADDR_VAR 0 55
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: LD_INT 2
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 2
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: NEG
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 2
61257: NEG
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61288: LD_ADDR_VAR 0 56
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: NEG
61370: PUSH
61371: LD_INT 2
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: LD_INT 2
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 2
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 2
61423: PUSH
61424: LD_INT 2
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: LD_INT 2
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 2
61464: NEG
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 2
61475: NEG
61476: PUSH
61477: LD_INT 1
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61518: LD_ADDR_VAR 0 57
61522: PUSH
61523: LD_INT 0
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: LD_INT 1
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 1
61587: NEG
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: LD_INT 2
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: LD_INT 2
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 1
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 2
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 2
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: LD_INT 2
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: LD_INT 1
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61748: LD_ADDR_VAR 0 58
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: LD_INT 1
61768: NEG
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: NEG
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: LD_INT 2
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 2
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: LD_INT 1
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 2
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 2
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 2
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 2
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 2
61924: NEG
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 2
61935: NEG
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: LD_INT 2
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61978: LD_ADDR_VAR 0 59
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62066: LD_ADDR_VAR 0 60
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62154: LD_ADDR_VAR 0 61
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62242: LD_ADDR_VAR 0 62
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 1
62311: NEG
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62330: LD_ADDR_VAR 0 63
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: LD_INT 1
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: LD_INT 1
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62418: LD_ADDR_VAR 0 64
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: LD_INT 1
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: ST_TO_ADDR
// end ; 1 :
62506: GO 68403
62508: LD_INT 1
62510: DOUBLE
62511: EQUAL
62512: IFTRUE 62516
62514: GO 65139
62516: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62517: LD_ADDR_VAR 0 11
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: LD_INT 3
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: LD_INT 3
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: LIST
62560: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62561: LD_ADDR_VAR 0 12
62565: PUSH
62566: LD_INT 2
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 3
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62602: LD_ADDR_VAR 0 13
62606: PUSH
62607: LD_INT 3
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 3
62619: PUSH
62620: LD_INT 3
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: PUSH
62630: LD_INT 3
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: LIST
62641: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62642: LD_ADDR_VAR 0 14
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: LD_INT 3
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_INT 3
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: LD_INT 2
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62683: LD_ADDR_VAR 0 15
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 3
62701: NEG
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 3
62712: NEG
62713: PUSH
62714: LD_INT 1
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: LIST
62726: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62727: LD_ADDR_VAR 0 16
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: LD_INT 3
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 3
62746: NEG
62747: PUSH
62748: LD_INT 2
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 3
62758: NEG
62759: PUSH
62760: LD_INT 3
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: LIST
62772: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62773: LD_ADDR_VAR 0 17
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: LD_INT 3
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: LD_INT 3
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 1
62803: PUSH
62804: LD_INT 2
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: LIST
62816: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62817: LD_ADDR_VAR 0 18
62821: PUSH
62822: LD_INT 2
62824: PUSH
62825: LD_INT 1
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 3
62845: PUSH
62846: LD_INT 1
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62858: LD_ADDR_VAR 0 19
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 3
62875: PUSH
62876: LD_INT 3
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 2
62885: PUSH
62886: LD_INT 3
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: LIST
62897: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62898: LD_ADDR_VAR 0 20
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: LD_INT 3
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: LD_INT 3
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: LD_INT 2
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: LIST
62938: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62939: LD_ADDR_VAR 0 21
62943: PUSH
62944: LD_INT 2
62946: NEG
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 3
62957: NEG
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 3
62968: NEG
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: LIST
62982: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62983: LD_ADDR_VAR 0 22
62987: PUSH
62988: LD_INT 2
62990: NEG
62991: PUSH
62992: LD_INT 3
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 3
63002: NEG
63003: PUSH
63004: LD_INT 2
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 3
63014: NEG
63015: PUSH
63016: LD_INT 3
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: LIST
63028: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63029: LD_ADDR_VAR 0 23
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: LD_INT 3
63039: NEG
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: LD_INT 4
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: LD_INT 3
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: LIST
63072: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63073: LD_ADDR_VAR 0 24
63077: PUSH
63078: LD_INT 3
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 3
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 4
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: LIST
63113: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63114: LD_ADDR_VAR 0 25
63118: PUSH
63119: LD_INT 3
63121: PUSH
63122: LD_INT 3
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 4
63131: PUSH
63132: LD_INT 3
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 3
63141: PUSH
63142: LD_INT 4
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63154: LD_ADDR_VAR 0 26
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: LD_INT 3
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 1
63171: PUSH
63172: LD_INT 4
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: NEG
63182: PUSH
63183: LD_INT 3
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: LIST
63194: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63195: LD_ADDR_VAR 0 27
63199: PUSH
63200: LD_INT 3
63202: NEG
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 3
63213: NEG
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 4
63224: NEG
63225: PUSH
63226: LD_INT 1
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: LIST
63238: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63239: LD_ADDR_VAR 0 28
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: LD_INT 3
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 3
63258: NEG
63259: PUSH
63260: LD_INT 4
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 4
63270: NEG
63271: PUSH
63272: LD_INT 3
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: LIST
63284: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63285: LD_ADDR_VAR 0 29
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: LD_INT 3
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: LD_INT 3
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: LD_INT 2
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: NEG
63327: PUSH
63328: LD_INT 4
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: LD_INT 4
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: LD_INT 3
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: LD_INT 5
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 0
63372: PUSH
63373: LD_INT 5
63375: NEG
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 1
63383: PUSH
63384: LD_INT 4
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: LD_INT 6
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: LD_INT 6
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: LD_INT 5
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63440: LD_ADDR_VAR 0 30
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 3
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 3
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 3
63478: PUSH
63479: LD_INT 1
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 4
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 4
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 4
63509: PUSH
63510: LD_INT 1
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 5
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 5
63530: PUSH
63531: LD_INT 1
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 5
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 6
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 6
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63583: LD_ADDR_VAR 0 31
63587: PUSH
63588: LD_INT 3
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 3
63600: PUSH
63601: LD_INT 3
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 2
63610: PUSH
63611: LD_INT 3
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 4
63620: PUSH
63621: LD_INT 3
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 4
63630: PUSH
63631: LD_INT 4
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 3
63640: PUSH
63641: LD_INT 4
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 5
63650: PUSH
63651: LD_INT 4
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 5
63660: PUSH
63661: LD_INT 5
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 4
63670: PUSH
63671: LD_INT 5
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 6
63680: PUSH
63681: LD_INT 5
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 6
63690: PUSH
63691: LD_INT 6
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 5
63700: PUSH
63701: LD_INT 6
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63722: LD_ADDR_VAR 0 32
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: LD_INT 3
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: LD_INT 3
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: NEG
63750: PUSH
63751: LD_INT 2
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: LD_INT 4
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: LD_INT 4
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 1
63780: NEG
63781: PUSH
63782: LD_INT 3
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 1
63791: PUSH
63792: LD_INT 5
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: LD_INT 5
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: NEG
63812: PUSH
63813: LD_INT 4
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 1
63822: PUSH
63823: LD_INT 6
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: LD_INT 6
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: LD_INT 5
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63865: LD_ADDR_VAR 0 33
63869: PUSH
63870: LD_INT 2
63872: NEG
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 3
63883: NEG
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 3
63894: NEG
63895: PUSH
63896: LD_INT 1
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 3
63906: NEG
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 4
63917: NEG
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 4
63928: NEG
63929: PUSH
63930: LD_INT 1
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 4
63940: NEG
63941: PUSH
63942: LD_INT 1
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 5
63951: NEG
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 5
63962: NEG
63963: PUSH
63964: LD_INT 1
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 5
63974: NEG
63975: PUSH
63976: LD_INT 1
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 6
63985: NEG
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 6
63996: NEG
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64020: LD_ADDR_VAR 0 34
64024: PUSH
64025: LD_INT 2
64027: NEG
64028: PUSH
64029: LD_INT 3
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 3
64039: NEG
64040: PUSH
64041: LD_INT 2
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 3
64051: NEG
64052: PUSH
64053: LD_INT 3
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 3
64063: NEG
64064: PUSH
64065: LD_INT 4
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 4
64075: NEG
64076: PUSH
64077: LD_INT 3
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 4
64087: NEG
64088: PUSH
64089: LD_INT 4
64091: NEG
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 4
64099: NEG
64100: PUSH
64101: LD_INT 5
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 5
64111: NEG
64112: PUSH
64113: LD_INT 4
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 5
64123: NEG
64124: PUSH
64125: LD_INT 5
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 5
64135: NEG
64136: PUSH
64137: LD_INT 6
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 6
64147: NEG
64148: PUSH
64149: LD_INT 5
64151: NEG
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 6
64159: NEG
64160: PUSH
64161: LD_INT 6
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64183: LD_ADDR_VAR 0 41
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: LD_INT 2
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: LD_INT 3
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: LD_INT 2
64216: NEG
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: LIST
64226: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64227: LD_ADDR_VAR 0 42
64231: PUSH
64232: LD_INT 2
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 2
64244: PUSH
64245: LD_INT 1
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 3
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: LIST
64267: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64268: LD_ADDR_VAR 0 43
64272: PUSH
64273: LD_INT 2
64275: PUSH
64276: LD_INT 2
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 3
64285: PUSH
64286: LD_INT 2
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 2
64295: PUSH
64296: LD_INT 3
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: LIST
64307: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64308: LD_ADDR_VAR 0 44
64312: PUSH
64313: LD_INT 0
64315: PUSH
64316: LD_INT 2
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 1
64325: PUSH
64326: LD_INT 3
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: LD_INT 2
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: LIST
64348: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64349: LD_ADDR_VAR 0 45
64353: PUSH
64354: LD_INT 2
64356: NEG
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 2
64367: NEG
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 3
64378: NEG
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: LIST
64392: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64393: LD_ADDR_VAR 0 46
64397: PUSH
64398: LD_INT 2
64400: NEG
64401: PUSH
64402: LD_INT 2
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 2
64412: NEG
64413: PUSH
64414: LD_INT 3
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 3
64424: NEG
64425: PUSH
64426: LD_INT 2
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: LIST
64438: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64439: LD_ADDR_VAR 0 47
64443: PUSH
64444: LD_INT 2
64446: NEG
64447: PUSH
64448: LD_INT 3
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: LD_INT 3
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64472: LD_ADDR_VAR 0 48
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: LD_INT 2
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 2
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64503: LD_ADDR_VAR 0 49
64507: PUSH
64508: LD_INT 3
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 3
64520: PUSH
64521: LD_INT 2
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64532: LD_ADDR_VAR 0 50
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: LD_INT 3
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: LD_INT 3
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64561: LD_ADDR_VAR 0 51
64565: PUSH
64566: LD_INT 1
64568: NEG
64569: PUSH
64570: LD_INT 2
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 2
64579: NEG
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64592: LD_ADDR_VAR 0 52
64596: PUSH
64597: LD_INT 3
64599: NEG
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 3
64611: NEG
64612: PUSH
64613: LD_INT 2
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64625: LD_ADDR_VAR 0 53
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 3
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 0
64644: PUSH
64645: LD_INT 3
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: LD_INT 2
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: LIST
64668: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64669: LD_ADDR_VAR 0 54
64673: PUSH
64674: LD_INT 2
64676: PUSH
64677: LD_INT 1
64679: NEG
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 3
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 3
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: LIST
64709: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64710: LD_ADDR_VAR 0 55
64714: PUSH
64715: LD_INT 3
64717: PUSH
64718: LD_INT 2
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 3
64727: PUSH
64728: LD_INT 3
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 2
64737: PUSH
64738: LD_INT 3
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: LIST
64749: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64750: LD_ADDR_VAR 0 56
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: LD_INT 3
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: LD_INT 3
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: PUSH
64779: LD_INT 2
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: LIST
64790: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64791: LD_ADDR_VAR 0 57
64795: PUSH
64796: LD_INT 2
64798: NEG
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 3
64809: NEG
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 3
64820: NEG
64821: PUSH
64822: LD_INT 1
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: LIST
64834: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64835: LD_ADDR_VAR 0 58
64839: PUSH
64840: LD_INT 2
64842: NEG
64843: PUSH
64844: LD_INT 3
64846: NEG
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 3
64854: NEG
64855: PUSH
64856: LD_INT 2
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 3
64866: NEG
64867: PUSH
64868: LD_INT 3
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: LIST
64880: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64881: LD_ADDR_VAR 0 59
64885: PUSH
64886: LD_INT 1
64888: NEG
64889: PUSH
64890: LD_INT 2
64892: NEG
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 0
64900: PUSH
64901: LD_INT 2
64903: NEG
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64925: LD_ADDR_VAR 0 60
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 2
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 2
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: LIST
64965: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64966: LD_ADDR_VAR 0 61
64970: PUSH
64971: LD_INT 2
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 2
64983: PUSH
64984: LD_INT 2
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 1
64993: PUSH
64994: LD_INT 2
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: LIST
65005: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65006: LD_ADDR_VAR 0 62
65010: PUSH
65011: LD_INT 1
65013: PUSH
65014: LD_INT 2
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: LD_INT 2
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 1
65033: NEG
65034: PUSH
65035: LD_INT 1
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: LIST
65046: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65047: LD_ADDR_VAR 0 63
65051: PUSH
65052: LD_INT 1
65054: NEG
65055: PUSH
65056: LD_INT 1
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 2
65065: NEG
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 2
65076: NEG
65077: PUSH
65078: LD_INT 1
65080: NEG
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: LIST
65090: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65091: LD_ADDR_VAR 0 64
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: LD_INT 2
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: NEG
65111: PUSH
65112: LD_INT 1
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: LD_INT 2
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: ST_TO_ADDR
// end ; 2 :
65137: GO 68403
65139: LD_INT 2
65141: DOUBLE
65142: EQUAL
65143: IFTRUE 65147
65145: GO 68402
65147: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65148: LD_ADDR_VAR 0 29
65152: PUSH
65153: LD_INT 4
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 4
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 5
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 5
65186: PUSH
65187: LD_INT 1
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 4
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 3
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 3
65216: PUSH
65217: LD_INT 1
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 3
65227: PUSH
65228: LD_INT 2
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 5
65238: PUSH
65239: LD_INT 2
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 3
65248: PUSH
65249: LD_INT 3
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 3
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 4
65268: PUSH
65269: LD_INT 3
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 4
65278: PUSH
65279: LD_INT 4
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 3
65288: PUSH
65289: LD_INT 4
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 2
65298: PUSH
65299: LD_INT 3
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 2
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 4
65318: PUSH
65319: LD_INT 2
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 2
65328: PUSH
65329: LD_INT 4
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: LD_INT 4
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: LD_INT 3
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: LD_INT 4
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 1
65368: PUSH
65369: LD_INT 5
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: LD_INT 5
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: NEG
65389: PUSH
65390: LD_INT 4
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: LD_INT 3
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 2
65410: PUSH
65411: LD_INT 5
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: LD_INT 3
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 3
65431: NEG
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 3
65442: NEG
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 2
65454: NEG
65455: PUSH
65456: LD_INT 0
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 2
65465: NEG
65466: PUSH
65467: LD_INT 1
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 3
65476: NEG
65477: PUSH
65478: LD_INT 1
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 4
65487: NEG
65488: PUSH
65489: LD_INT 0
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 4
65498: NEG
65499: PUSH
65500: LD_INT 1
65502: NEG
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 4
65510: NEG
65511: PUSH
65512: LD_INT 2
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 2
65522: NEG
65523: PUSH
65524: LD_INT 2
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 4
65533: NEG
65534: PUSH
65535: LD_INT 4
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 4
65545: NEG
65546: PUSH
65547: LD_INT 5
65549: NEG
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 3
65557: NEG
65558: PUSH
65559: LD_INT 4
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 3
65569: NEG
65570: PUSH
65571: LD_INT 3
65573: NEG
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 4
65581: NEG
65582: PUSH
65583: LD_INT 3
65585: NEG
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 5
65593: NEG
65594: PUSH
65595: LD_INT 4
65597: NEG
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 5
65605: NEG
65606: PUSH
65607: LD_INT 5
65609: NEG
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 3
65617: NEG
65618: PUSH
65619: LD_INT 5
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 5
65629: NEG
65630: PUSH
65631: LD_INT 3
65633: NEG
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65686: LD_ADDR_VAR 0 30
65690: PUSH
65691: LD_INT 4
65693: PUSH
65694: LD_INT 4
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 4
65703: PUSH
65704: LD_INT 3
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 5
65713: PUSH
65714: LD_INT 4
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 5
65723: PUSH
65724: LD_INT 5
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 4
65733: PUSH
65734: LD_INT 5
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 3
65743: PUSH
65744: LD_INT 4
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 3
65753: PUSH
65754: LD_INT 3
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 5
65763: PUSH
65764: LD_INT 3
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: LD_INT 5
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 0
65783: PUSH
65784: LD_INT 3
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: LD_INT 2
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 1
65803: PUSH
65804: LD_INT 3
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 1
65813: PUSH
65814: LD_INT 4
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: LD_INT 4
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: NEG
65834: PUSH
65835: LD_INT 3
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 1
65844: NEG
65845: PUSH
65846: LD_INT 2
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 2
65855: PUSH
65856: LD_INT 4
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 2
65865: NEG
65866: PUSH
65867: LD_INT 2
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 4
65876: NEG
65877: PUSH
65878: LD_INT 0
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 4
65887: NEG
65888: PUSH
65889: LD_INT 1
65891: NEG
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 3
65899: NEG
65900: PUSH
65901: LD_INT 0
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 3
65910: NEG
65911: PUSH
65912: LD_INT 1
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 4
65921: NEG
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 5
65932: NEG
65933: PUSH
65934: LD_INT 0
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 5
65943: NEG
65944: PUSH
65945: LD_INT 1
65947: NEG
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 5
65955: NEG
65956: PUSH
65957: LD_INT 2
65959: NEG
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 3
65967: NEG
65968: PUSH
65969: LD_INT 2
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 3
65978: NEG
65979: PUSH
65980: LD_INT 3
65982: NEG
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 3
65990: NEG
65991: PUSH
65992: LD_INT 4
65994: NEG
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 2
66002: NEG
66003: PUSH
66004: LD_INT 3
66006: NEG
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 2
66014: NEG
66015: PUSH
66016: LD_INT 2
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 3
66026: NEG
66027: PUSH
66028: LD_INT 2
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 4
66038: NEG
66039: PUSH
66040: LD_INT 3
66042: NEG
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 4
66050: NEG
66051: PUSH
66052: LD_INT 4
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 2
66062: NEG
66063: PUSH
66064: LD_INT 4
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 4
66074: NEG
66075: PUSH
66076: LD_INT 2
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: LD_INT 4
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: LD_INT 5
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 1
66108: PUSH
66109: LD_INT 4
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 1
66119: PUSH
66120: LD_INT 3
66122: NEG
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 0
66130: PUSH
66131: LD_INT 3
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: LD_INT 4
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: LD_INT 5
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 2
66165: PUSH
66166: LD_INT 3
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 2
66176: NEG
66177: PUSH
66178: LD_INT 5
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66233: LD_ADDR_VAR 0 31
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: LD_INT 4
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: LD_INT 3
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 1
66260: PUSH
66261: LD_INT 4
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 1
66270: PUSH
66271: LD_INT 5
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 0
66280: PUSH
66281: LD_INT 5
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 1
66290: NEG
66291: PUSH
66292: LD_INT 4
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 1
66301: NEG
66302: PUSH
66303: LD_INT 3
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 2
66312: PUSH
66313: LD_INT 5
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 2
66322: NEG
66323: PUSH
66324: LD_INT 3
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 3
66333: NEG
66334: PUSH
66335: LD_INT 0
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 3
66344: NEG
66345: PUSH
66346: LD_INT 1
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 2
66356: NEG
66357: PUSH
66358: LD_INT 0
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 2
66367: NEG
66368: PUSH
66369: LD_INT 1
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 3
66378: NEG
66379: PUSH
66380: LD_INT 1
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 4
66389: NEG
66390: PUSH
66391: LD_INT 0
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 4
66400: NEG
66401: PUSH
66402: LD_INT 1
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 4
66412: NEG
66413: PUSH
66414: LD_INT 2
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 2
66424: NEG
66425: PUSH
66426: LD_INT 2
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 4
66435: NEG
66436: PUSH
66437: LD_INT 4
66439: NEG
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 4
66447: NEG
66448: PUSH
66449: LD_INT 5
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 3
66459: NEG
66460: PUSH
66461: LD_INT 4
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 3
66471: NEG
66472: PUSH
66473: LD_INT 3
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 4
66483: NEG
66484: PUSH
66485: LD_INT 3
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 5
66495: NEG
66496: PUSH
66497: LD_INT 4
66499: NEG
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 5
66507: NEG
66508: PUSH
66509: LD_INT 5
66511: NEG
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 3
66519: NEG
66520: PUSH
66521: LD_INT 5
66523: NEG
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 5
66531: NEG
66532: PUSH
66533: LD_INT 3
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: LD_INT 3
66546: NEG
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: LD_INT 4
66557: NEG
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 1
66565: PUSH
66566: LD_INT 3
66568: NEG
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 1
66576: PUSH
66577: LD_INT 2
66579: NEG
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 0
66587: PUSH
66588: LD_INT 2
66590: NEG
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 1
66598: NEG
66599: PUSH
66600: LD_INT 3
66602: NEG
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 1
66610: NEG
66611: PUSH
66612: LD_INT 4
66614: NEG
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 2
66622: PUSH
66623: LD_INT 2
66625: NEG
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 2
66633: NEG
66634: PUSH
66635: LD_INT 4
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 4
66645: PUSH
66646: LD_INT 0
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 4
66655: PUSH
66656: LD_INT 1
66658: NEG
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 5
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 5
66676: PUSH
66677: LD_INT 1
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 4
66686: PUSH
66687: LD_INT 1
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 3
66696: PUSH
66697: LD_INT 0
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 3
66706: PUSH
66707: LD_INT 1
66709: NEG
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 3
66717: PUSH
66718: LD_INT 2
66720: NEG
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: LD_INT 5
66728: PUSH
66729: LD_INT 2
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66783: LD_ADDR_VAR 0 32
66787: PUSH
66788: LD_INT 4
66790: NEG
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 4
66801: NEG
66802: PUSH
66803: LD_INT 1
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 3
66813: NEG
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 3
66824: NEG
66825: PUSH
66826: LD_INT 1
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 4
66835: NEG
66836: PUSH
66837: LD_INT 1
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 5
66846: NEG
66847: PUSH
66848: LD_INT 0
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 5
66857: NEG
66858: PUSH
66859: LD_INT 1
66861: NEG
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 5
66869: NEG
66870: PUSH
66871: LD_INT 2
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 3
66881: NEG
66882: PUSH
66883: LD_INT 2
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 3
66892: NEG
66893: PUSH
66894: LD_INT 3
66896: NEG
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 3
66904: NEG
66905: PUSH
66906: LD_INT 4
66908: NEG
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 2
66916: NEG
66917: PUSH
66918: LD_INT 3
66920: NEG
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 2
66928: NEG
66929: PUSH
66930: LD_INT 2
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 3
66940: NEG
66941: PUSH
66942: LD_INT 2
66944: NEG
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 4
66952: NEG
66953: PUSH
66954: LD_INT 3
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 4
66964: NEG
66965: PUSH
66966: LD_INT 4
66968: NEG
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 2
66976: NEG
66977: PUSH
66978: LD_INT 4
66980: NEG
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 4
66988: NEG
66989: PUSH
66990: LD_INT 2
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 0
67000: PUSH
67001: LD_INT 4
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: LD_INT 5
67014: NEG
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: LD_INT 4
67025: NEG
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 1
67033: PUSH
67034: LD_INT 3
67036: NEG
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: LD_INT 3
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 1
67055: NEG
67056: PUSH
67057: LD_INT 4
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 1
67067: NEG
67068: PUSH
67069: LD_INT 5
67071: NEG
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 2
67079: PUSH
67080: LD_INT 3
67082: NEG
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 2
67090: NEG
67091: PUSH
67092: LD_INT 5
67094: NEG
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 3
67102: PUSH
67103: LD_INT 0
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 3
67112: PUSH
67113: LD_INT 1
67115: NEG
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 4
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 4
67133: PUSH
67134: LD_INT 1
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 3
67143: PUSH
67144: LD_INT 1
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 2
67153: PUSH
67154: LD_INT 0
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 2
67163: PUSH
67164: LD_INT 1
67166: NEG
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 2
67174: PUSH
67175: LD_INT 2
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 4
67185: PUSH
67186: LD_INT 2
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 4
67195: PUSH
67196: LD_INT 4
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 4
67205: PUSH
67206: LD_INT 3
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 5
67215: PUSH
67216: LD_INT 4
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 5
67225: PUSH
67226: LD_INT 5
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 4
67235: PUSH
67236: LD_INT 5
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 3
67245: PUSH
67246: LD_INT 4
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 3
67255: PUSH
67256: LD_INT 3
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 5
67265: PUSH
67266: LD_INT 3
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: PUSH
67276: LD_INT 5
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67330: LD_ADDR_VAR 0 33
67334: PUSH
67335: LD_INT 4
67337: NEG
67338: PUSH
67339: LD_INT 4
67341: NEG
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 4
67349: NEG
67350: PUSH
67351: LD_INT 5
67353: NEG
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 3
67361: NEG
67362: PUSH
67363: LD_INT 4
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 3
67373: NEG
67374: PUSH
67375: LD_INT 3
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 4
67385: NEG
67386: PUSH
67387: LD_INT 3
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 5
67397: NEG
67398: PUSH
67399: LD_INT 4
67401: NEG
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 5
67409: NEG
67410: PUSH
67411: LD_INT 5
67413: NEG
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 3
67421: NEG
67422: PUSH
67423: LD_INT 5
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 5
67433: NEG
67434: PUSH
67435: LD_INT 3
67437: NEG
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 0
67445: PUSH
67446: LD_INT 3
67448: NEG
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 0
67456: PUSH
67457: LD_INT 4
67459: NEG
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 1
67467: PUSH
67468: LD_INT 3
67470: NEG
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 1
67478: PUSH
67479: LD_INT 2
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: LD_INT 2
67492: NEG
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 1
67500: NEG
67501: PUSH
67502: LD_INT 3
67504: NEG
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 1
67512: NEG
67513: PUSH
67514: LD_INT 4
67516: NEG
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 2
67524: PUSH
67525: LD_INT 2
67527: NEG
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 2
67535: NEG
67536: PUSH
67537: LD_INT 4
67539: NEG
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 4
67547: PUSH
67548: LD_INT 0
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 4
67557: PUSH
67558: LD_INT 1
67560: NEG
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 5
67568: PUSH
67569: LD_INT 0
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 5
67578: PUSH
67579: LD_INT 1
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 4
67588: PUSH
67589: LD_INT 1
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 3
67598: PUSH
67599: LD_INT 0
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 3
67608: PUSH
67609: LD_INT 1
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 3
67619: PUSH
67620: LD_INT 2
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 5
67630: PUSH
67631: LD_INT 2
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 3
67640: PUSH
67641: LD_INT 3
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 3
67650: PUSH
67651: LD_INT 2
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 4
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 4
67670: PUSH
67671: LD_INT 4
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 3
67680: PUSH
67681: LD_INT 4
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 2
67690: PUSH
67691: LD_INT 3
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 2
67700: PUSH
67701: LD_INT 2
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 4
67710: PUSH
67711: LD_INT 2
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 2
67720: PUSH
67721: LD_INT 4
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 0
67730: PUSH
67731: LD_INT 4
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 0
67740: PUSH
67741: LD_INT 3
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 1
67750: PUSH
67751: LD_INT 4
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 1
67760: PUSH
67761: LD_INT 5
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 0
67770: PUSH
67771: LD_INT 5
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 1
67780: NEG
67781: PUSH
67782: LD_INT 4
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 1
67791: NEG
67792: PUSH
67793: LD_INT 3
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 2
67802: PUSH
67803: LD_INT 5
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 2
67812: NEG
67813: PUSH
67814: LD_INT 3
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67868: LD_ADDR_VAR 0 34
67872: PUSH
67873: LD_INT 0
67875: PUSH
67876: LD_INT 4
67878: NEG
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: LD_INT 5
67889: NEG
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 1
67897: PUSH
67898: LD_INT 4
67900: NEG
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 1
67908: PUSH
67909: LD_INT 3
67911: NEG
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: LD_INT 3
67922: NEG
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 1
67930: NEG
67931: PUSH
67932: LD_INT 4
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 1
67942: NEG
67943: PUSH
67944: LD_INT 5
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 2
67954: PUSH
67955: LD_INT 3
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 2
67965: NEG
67966: PUSH
67967: LD_INT 5
67969: NEG
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 3
67977: PUSH
67978: LD_INT 0
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 3
67987: PUSH
67988: LD_INT 1
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 4
67998: PUSH
67999: LD_INT 0
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 4
68008: PUSH
68009: LD_INT 1
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 3
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 2
68028: PUSH
68029: LD_INT 0
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 2
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 2
68049: PUSH
68050: LD_INT 2
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 4
68060: PUSH
68061: LD_INT 2
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 4
68070: PUSH
68071: LD_INT 4
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 4
68080: PUSH
68081: LD_INT 3
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 5
68090: PUSH
68091: LD_INT 4
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 5
68100: PUSH
68101: LD_INT 5
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 4
68110: PUSH
68111: LD_INT 5
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 3
68120: PUSH
68121: LD_INT 4
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 3
68130: PUSH
68131: LD_INT 3
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 5
68140: PUSH
68141: LD_INT 3
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 3
68150: PUSH
68151: LD_INT 5
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 0
68160: PUSH
68161: LD_INT 3
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: LD_INT 2
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 1
68180: PUSH
68181: LD_INT 3
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 1
68190: PUSH
68191: LD_INT 4
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: LD_INT 4
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 1
68210: NEG
68211: PUSH
68212: LD_INT 3
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 1
68221: NEG
68222: PUSH
68223: LD_INT 2
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 2
68232: PUSH
68233: LD_INT 4
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 2
68242: NEG
68243: PUSH
68244: LD_INT 2
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 4
68253: NEG
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 4
68264: NEG
68265: PUSH
68266: LD_INT 1
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 3
68276: NEG
68277: PUSH
68278: LD_INT 0
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 3
68287: NEG
68288: PUSH
68289: LD_INT 1
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 4
68298: NEG
68299: PUSH
68300: LD_INT 1
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 5
68309: NEG
68310: PUSH
68311: LD_INT 0
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 5
68320: NEG
68321: PUSH
68322: LD_INT 1
68324: NEG
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 5
68332: NEG
68333: PUSH
68334: LD_INT 2
68336: NEG
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 3
68344: NEG
68345: PUSH
68346: LD_INT 2
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: ST_TO_ADDR
// end ; end ;
68400: GO 68403
68402: POP
// case btype of b_depot , b_warehouse :
68403: LD_VAR 0 1
68407: PUSH
68408: LD_INT 0
68410: DOUBLE
68411: EQUAL
68412: IFTRUE 68422
68414: LD_INT 1
68416: DOUBLE
68417: EQUAL
68418: IFTRUE 68422
68420: GO 68623
68422: POP
// case nation of nation_american :
68423: LD_VAR 0 5
68427: PUSH
68428: LD_INT 1
68430: DOUBLE
68431: EQUAL
68432: IFTRUE 68436
68434: GO 68492
68436: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68437: LD_ADDR_VAR 0 9
68441: PUSH
68442: LD_VAR 0 11
68446: PUSH
68447: LD_VAR 0 12
68451: PUSH
68452: LD_VAR 0 13
68456: PUSH
68457: LD_VAR 0 14
68461: PUSH
68462: LD_VAR 0 15
68466: PUSH
68467: LD_VAR 0 16
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: PUSH
68480: LD_VAR 0 4
68484: PUSH
68485: LD_INT 1
68487: PLUS
68488: ARRAY
68489: ST_TO_ADDR
68490: GO 68621
68492: LD_INT 2
68494: DOUBLE
68495: EQUAL
68496: IFTRUE 68500
68498: GO 68556
68500: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68501: LD_ADDR_VAR 0 9
68505: PUSH
68506: LD_VAR 0 17
68510: PUSH
68511: LD_VAR 0 18
68515: PUSH
68516: LD_VAR 0 19
68520: PUSH
68521: LD_VAR 0 20
68525: PUSH
68526: LD_VAR 0 21
68530: PUSH
68531: LD_VAR 0 22
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: PUSH
68544: LD_VAR 0 4
68548: PUSH
68549: LD_INT 1
68551: PLUS
68552: ARRAY
68553: ST_TO_ADDR
68554: GO 68621
68556: LD_INT 3
68558: DOUBLE
68559: EQUAL
68560: IFTRUE 68564
68562: GO 68620
68564: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68565: LD_ADDR_VAR 0 9
68569: PUSH
68570: LD_VAR 0 23
68574: PUSH
68575: LD_VAR 0 24
68579: PUSH
68580: LD_VAR 0 25
68584: PUSH
68585: LD_VAR 0 26
68589: PUSH
68590: LD_VAR 0 27
68594: PUSH
68595: LD_VAR 0 28
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: PUSH
68608: LD_VAR 0 4
68612: PUSH
68613: LD_INT 1
68615: PLUS
68616: ARRAY
68617: ST_TO_ADDR
68618: GO 68621
68620: POP
68621: GO 69176
68623: LD_INT 2
68625: DOUBLE
68626: EQUAL
68627: IFTRUE 68637
68629: LD_INT 3
68631: DOUBLE
68632: EQUAL
68633: IFTRUE 68637
68635: GO 68693
68637: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68638: LD_ADDR_VAR 0 9
68642: PUSH
68643: LD_VAR 0 29
68647: PUSH
68648: LD_VAR 0 30
68652: PUSH
68653: LD_VAR 0 31
68657: PUSH
68658: LD_VAR 0 32
68662: PUSH
68663: LD_VAR 0 33
68667: PUSH
68668: LD_VAR 0 34
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: PUSH
68681: LD_VAR 0 4
68685: PUSH
68686: LD_INT 1
68688: PLUS
68689: ARRAY
68690: ST_TO_ADDR
68691: GO 69176
68693: LD_INT 16
68695: DOUBLE
68696: EQUAL
68697: IFTRUE 68755
68699: LD_INT 17
68701: DOUBLE
68702: EQUAL
68703: IFTRUE 68755
68705: LD_INT 18
68707: DOUBLE
68708: EQUAL
68709: IFTRUE 68755
68711: LD_INT 19
68713: DOUBLE
68714: EQUAL
68715: IFTRUE 68755
68717: LD_INT 22
68719: DOUBLE
68720: EQUAL
68721: IFTRUE 68755
68723: LD_INT 20
68725: DOUBLE
68726: EQUAL
68727: IFTRUE 68755
68729: LD_INT 21
68731: DOUBLE
68732: EQUAL
68733: IFTRUE 68755
68735: LD_INT 23
68737: DOUBLE
68738: EQUAL
68739: IFTRUE 68755
68741: LD_INT 24
68743: DOUBLE
68744: EQUAL
68745: IFTRUE 68755
68747: LD_INT 25
68749: DOUBLE
68750: EQUAL
68751: IFTRUE 68755
68753: GO 68811
68755: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68756: LD_ADDR_VAR 0 9
68760: PUSH
68761: LD_VAR 0 35
68765: PUSH
68766: LD_VAR 0 36
68770: PUSH
68771: LD_VAR 0 37
68775: PUSH
68776: LD_VAR 0 38
68780: PUSH
68781: LD_VAR 0 39
68785: PUSH
68786: LD_VAR 0 40
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: PUSH
68799: LD_VAR 0 4
68803: PUSH
68804: LD_INT 1
68806: PLUS
68807: ARRAY
68808: ST_TO_ADDR
68809: GO 69176
68811: LD_INT 6
68813: DOUBLE
68814: EQUAL
68815: IFTRUE 68867
68817: LD_INT 7
68819: DOUBLE
68820: EQUAL
68821: IFTRUE 68867
68823: LD_INT 8
68825: DOUBLE
68826: EQUAL
68827: IFTRUE 68867
68829: LD_INT 13
68831: DOUBLE
68832: EQUAL
68833: IFTRUE 68867
68835: LD_INT 12
68837: DOUBLE
68838: EQUAL
68839: IFTRUE 68867
68841: LD_INT 15
68843: DOUBLE
68844: EQUAL
68845: IFTRUE 68867
68847: LD_INT 11
68849: DOUBLE
68850: EQUAL
68851: IFTRUE 68867
68853: LD_INT 14
68855: DOUBLE
68856: EQUAL
68857: IFTRUE 68867
68859: LD_INT 10
68861: DOUBLE
68862: EQUAL
68863: IFTRUE 68867
68865: GO 68923
68867: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68868: LD_ADDR_VAR 0 9
68872: PUSH
68873: LD_VAR 0 41
68877: PUSH
68878: LD_VAR 0 42
68882: PUSH
68883: LD_VAR 0 43
68887: PUSH
68888: LD_VAR 0 44
68892: PUSH
68893: LD_VAR 0 45
68897: PUSH
68898: LD_VAR 0 46
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: PUSH
68911: LD_VAR 0 4
68915: PUSH
68916: LD_INT 1
68918: PLUS
68919: ARRAY
68920: ST_TO_ADDR
68921: GO 69176
68923: LD_INT 36
68925: DOUBLE
68926: EQUAL
68927: IFTRUE 68931
68929: GO 68987
68931: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68932: LD_ADDR_VAR 0 9
68936: PUSH
68937: LD_VAR 0 47
68941: PUSH
68942: LD_VAR 0 48
68946: PUSH
68947: LD_VAR 0 49
68951: PUSH
68952: LD_VAR 0 50
68956: PUSH
68957: LD_VAR 0 51
68961: PUSH
68962: LD_VAR 0 52
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: PUSH
68975: LD_VAR 0 4
68979: PUSH
68980: LD_INT 1
68982: PLUS
68983: ARRAY
68984: ST_TO_ADDR
68985: GO 69176
68987: LD_INT 4
68989: DOUBLE
68990: EQUAL
68991: IFTRUE 69013
68993: LD_INT 5
68995: DOUBLE
68996: EQUAL
68997: IFTRUE 69013
68999: LD_INT 34
69001: DOUBLE
69002: EQUAL
69003: IFTRUE 69013
69005: LD_INT 37
69007: DOUBLE
69008: EQUAL
69009: IFTRUE 69013
69011: GO 69069
69013: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69014: LD_ADDR_VAR 0 9
69018: PUSH
69019: LD_VAR 0 53
69023: PUSH
69024: LD_VAR 0 54
69028: PUSH
69029: LD_VAR 0 55
69033: PUSH
69034: LD_VAR 0 56
69038: PUSH
69039: LD_VAR 0 57
69043: PUSH
69044: LD_VAR 0 58
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: PUSH
69057: LD_VAR 0 4
69061: PUSH
69062: LD_INT 1
69064: PLUS
69065: ARRAY
69066: ST_TO_ADDR
69067: GO 69176
69069: LD_INT 31
69071: DOUBLE
69072: EQUAL
69073: IFTRUE 69119
69075: LD_INT 32
69077: DOUBLE
69078: EQUAL
69079: IFTRUE 69119
69081: LD_INT 33
69083: DOUBLE
69084: EQUAL
69085: IFTRUE 69119
69087: LD_INT 27
69089: DOUBLE
69090: EQUAL
69091: IFTRUE 69119
69093: LD_INT 26
69095: DOUBLE
69096: EQUAL
69097: IFTRUE 69119
69099: LD_INT 28
69101: DOUBLE
69102: EQUAL
69103: IFTRUE 69119
69105: LD_INT 29
69107: DOUBLE
69108: EQUAL
69109: IFTRUE 69119
69111: LD_INT 30
69113: DOUBLE
69114: EQUAL
69115: IFTRUE 69119
69117: GO 69175
69119: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69120: LD_ADDR_VAR 0 9
69124: PUSH
69125: LD_VAR 0 59
69129: PUSH
69130: LD_VAR 0 60
69134: PUSH
69135: LD_VAR 0 61
69139: PUSH
69140: LD_VAR 0 62
69144: PUSH
69145: LD_VAR 0 63
69149: PUSH
69150: LD_VAR 0 64
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: PUSH
69163: LD_VAR 0 4
69167: PUSH
69168: LD_INT 1
69170: PLUS
69171: ARRAY
69172: ST_TO_ADDR
69173: GO 69176
69175: POP
// temp_list2 = [ ] ;
69176: LD_ADDR_VAR 0 10
69180: PUSH
69181: EMPTY
69182: ST_TO_ADDR
// for i in temp_list do
69183: LD_ADDR_VAR 0 8
69187: PUSH
69188: LD_VAR 0 9
69192: PUSH
69193: FOR_IN
69194: IFFALSE 69246
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69196: LD_ADDR_VAR 0 10
69200: PUSH
69201: LD_VAR 0 10
69205: PUSH
69206: LD_VAR 0 8
69210: PUSH
69211: LD_INT 1
69213: ARRAY
69214: PUSH
69215: LD_VAR 0 2
69219: PLUS
69220: PUSH
69221: LD_VAR 0 8
69225: PUSH
69226: LD_INT 2
69228: ARRAY
69229: PUSH
69230: LD_VAR 0 3
69234: PLUS
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: EMPTY
69241: LIST
69242: ADD
69243: ST_TO_ADDR
69244: GO 69193
69246: POP
69247: POP
// result = temp_list2 ;
69248: LD_ADDR_VAR 0 7
69252: PUSH
69253: LD_VAR 0 10
69257: ST_TO_ADDR
// end ;
69258: LD_VAR 0 7
69262: RET
// export function EnemyInRange ( unit , dist ) ; begin
69263: LD_INT 0
69265: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69266: LD_ADDR_VAR 0 3
69270: PUSH
69271: LD_VAR 0 1
69275: PPUSH
69276: CALL_OW 255
69280: PPUSH
69281: LD_VAR 0 1
69285: PPUSH
69286: CALL_OW 250
69290: PPUSH
69291: LD_VAR 0 1
69295: PPUSH
69296: CALL_OW 251
69300: PPUSH
69301: LD_VAR 0 2
69305: PPUSH
69306: CALL 42659 0 4
69310: PUSH
69311: LD_INT 4
69313: ARRAY
69314: ST_TO_ADDR
// end ;
69315: LD_VAR 0 3
69319: RET
// export function PlayerSeeMe ( unit ) ; begin
69320: LD_INT 0
69322: PPUSH
// result := See ( your_side , unit ) ;
69323: LD_ADDR_VAR 0 2
69327: PUSH
69328: LD_OWVAR 2
69332: PPUSH
69333: LD_VAR 0 1
69337: PPUSH
69338: CALL_OW 292
69342: ST_TO_ADDR
// end ;
69343: LD_VAR 0 2
69347: RET
// export function ReverseDir ( unit ) ; begin
69348: LD_INT 0
69350: PPUSH
// if not unit then
69351: LD_VAR 0 1
69355: NOT
69356: IFFALSE 69360
// exit ;
69358: GO 69383
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69360: LD_ADDR_VAR 0 2
69364: PUSH
69365: LD_VAR 0 1
69369: PPUSH
69370: CALL_OW 254
69374: PUSH
69375: LD_INT 3
69377: PLUS
69378: PUSH
69379: LD_INT 6
69381: MOD
69382: ST_TO_ADDR
// end ;
69383: LD_VAR 0 2
69387: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69388: LD_INT 0
69390: PPUSH
69391: PPUSH
69392: PPUSH
69393: PPUSH
69394: PPUSH
// if not hexes then
69395: LD_VAR 0 2
69399: NOT
69400: IFFALSE 69404
// exit ;
69402: GO 69552
// dist := 9999 ;
69404: LD_ADDR_VAR 0 5
69408: PUSH
69409: LD_INT 9999
69411: ST_TO_ADDR
// for i = 1 to hexes do
69412: LD_ADDR_VAR 0 4
69416: PUSH
69417: DOUBLE
69418: LD_INT 1
69420: DEC
69421: ST_TO_ADDR
69422: LD_VAR 0 2
69426: PUSH
69427: FOR_TO
69428: IFFALSE 69540
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69430: LD_VAR 0 1
69434: PPUSH
69435: LD_VAR 0 2
69439: PUSH
69440: LD_VAR 0 4
69444: ARRAY
69445: PUSH
69446: LD_INT 1
69448: ARRAY
69449: PPUSH
69450: LD_VAR 0 2
69454: PUSH
69455: LD_VAR 0 4
69459: ARRAY
69460: PUSH
69461: LD_INT 2
69463: ARRAY
69464: PPUSH
69465: CALL_OW 297
69469: PUSH
69470: LD_VAR 0 5
69474: LESS
69475: IFFALSE 69538
// begin hex := hexes [ i ] ;
69477: LD_ADDR_VAR 0 7
69481: PUSH
69482: LD_VAR 0 2
69486: PUSH
69487: LD_VAR 0 4
69491: ARRAY
69492: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69493: LD_ADDR_VAR 0 5
69497: PUSH
69498: LD_VAR 0 1
69502: PPUSH
69503: LD_VAR 0 2
69507: PUSH
69508: LD_VAR 0 4
69512: ARRAY
69513: PUSH
69514: LD_INT 1
69516: ARRAY
69517: PPUSH
69518: LD_VAR 0 2
69522: PUSH
69523: LD_VAR 0 4
69527: ARRAY
69528: PUSH
69529: LD_INT 2
69531: ARRAY
69532: PPUSH
69533: CALL_OW 297
69537: ST_TO_ADDR
// end ; end ;
69538: GO 69427
69540: POP
69541: POP
// result := hex ;
69542: LD_ADDR_VAR 0 3
69546: PUSH
69547: LD_VAR 0 7
69551: ST_TO_ADDR
// end ;
69552: LD_VAR 0 3
69556: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69557: LD_INT 0
69559: PPUSH
69560: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69561: LD_VAR 0 1
69565: NOT
69566: PUSH
69567: LD_VAR 0 1
69571: PUSH
69572: LD_INT 21
69574: PUSH
69575: LD_INT 2
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 23
69584: PUSH
69585: LD_INT 2
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PPUSH
69596: CALL_OW 69
69600: IN
69601: NOT
69602: OR
69603: IFFALSE 69607
// exit ;
69605: GO 69654
// for i = 1 to 3 do
69607: LD_ADDR_VAR 0 3
69611: PUSH
69612: DOUBLE
69613: LD_INT 1
69615: DEC
69616: ST_TO_ADDR
69617: LD_INT 3
69619: PUSH
69620: FOR_TO
69621: IFFALSE 69652
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69623: LD_VAR 0 1
69627: PPUSH
69628: CALL_OW 250
69632: PPUSH
69633: LD_VAR 0 1
69637: PPUSH
69638: CALL_OW 251
69642: PPUSH
69643: LD_INT 1
69645: PPUSH
69646: CALL_OW 453
69650: GO 69620
69652: POP
69653: POP
// end ;
69654: LD_VAR 0 2
69658: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69659: LD_INT 0
69661: PPUSH
69662: PPUSH
69663: PPUSH
69664: PPUSH
69665: PPUSH
69666: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69667: LD_VAR 0 1
69671: NOT
69672: PUSH
69673: LD_VAR 0 2
69677: NOT
69678: OR
69679: PUSH
69680: LD_VAR 0 1
69684: PPUSH
69685: CALL_OW 314
69689: OR
69690: IFFALSE 69694
// exit ;
69692: GO 70135
// x := GetX ( enemy_unit ) ;
69694: LD_ADDR_VAR 0 7
69698: PUSH
69699: LD_VAR 0 2
69703: PPUSH
69704: CALL_OW 250
69708: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69709: LD_ADDR_VAR 0 8
69713: PUSH
69714: LD_VAR 0 2
69718: PPUSH
69719: CALL_OW 251
69723: ST_TO_ADDR
// if not x or not y then
69724: LD_VAR 0 7
69728: NOT
69729: PUSH
69730: LD_VAR 0 8
69734: NOT
69735: OR
69736: IFFALSE 69740
// exit ;
69738: GO 70135
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69740: LD_ADDR_VAR 0 6
69744: PUSH
69745: LD_VAR 0 7
69749: PPUSH
69750: LD_INT 0
69752: PPUSH
69753: LD_INT 4
69755: PPUSH
69756: CALL_OW 272
69760: PUSH
69761: LD_VAR 0 8
69765: PPUSH
69766: LD_INT 0
69768: PPUSH
69769: LD_INT 4
69771: PPUSH
69772: CALL_OW 273
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_VAR 0 7
69785: PPUSH
69786: LD_INT 1
69788: PPUSH
69789: LD_INT 4
69791: PPUSH
69792: CALL_OW 272
69796: PUSH
69797: LD_VAR 0 8
69801: PPUSH
69802: LD_INT 1
69804: PPUSH
69805: LD_INT 4
69807: PPUSH
69808: CALL_OW 273
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_VAR 0 7
69821: PPUSH
69822: LD_INT 2
69824: PPUSH
69825: LD_INT 4
69827: PPUSH
69828: CALL_OW 272
69832: PUSH
69833: LD_VAR 0 8
69837: PPUSH
69838: LD_INT 2
69840: PPUSH
69841: LD_INT 4
69843: PPUSH
69844: CALL_OW 273
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_VAR 0 7
69857: PPUSH
69858: LD_INT 3
69860: PPUSH
69861: LD_INT 4
69863: PPUSH
69864: CALL_OW 272
69868: PUSH
69869: LD_VAR 0 8
69873: PPUSH
69874: LD_INT 3
69876: PPUSH
69877: LD_INT 4
69879: PPUSH
69880: CALL_OW 273
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_VAR 0 7
69893: PPUSH
69894: LD_INT 4
69896: PPUSH
69897: LD_INT 4
69899: PPUSH
69900: CALL_OW 272
69904: PUSH
69905: LD_VAR 0 8
69909: PPUSH
69910: LD_INT 4
69912: PPUSH
69913: LD_INT 4
69915: PPUSH
69916: CALL_OW 273
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_VAR 0 7
69929: PPUSH
69930: LD_INT 5
69932: PPUSH
69933: LD_INT 4
69935: PPUSH
69936: CALL_OW 272
69940: PUSH
69941: LD_VAR 0 8
69945: PPUSH
69946: LD_INT 5
69948: PPUSH
69949: LD_INT 4
69951: PPUSH
69952: CALL_OW 273
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: ST_TO_ADDR
// for i = tmp downto 1 do
69969: LD_ADDR_VAR 0 4
69973: PUSH
69974: DOUBLE
69975: LD_VAR 0 6
69979: INC
69980: ST_TO_ADDR
69981: LD_INT 1
69983: PUSH
69984: FOR_DOWNTO
69985: IFFALSE 70086
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69987: LD_VAR 0 6
69991: PUSH
69992: LD_VAR 0 4
69996: ARRAY
69997: PUSH
69998: LD_INT 1
70000: ARRAY
70001: PPUSH
70002: LD_VAR 0 6
70006: PUSH
70007: LD_VAR 0 4
70011: ARRAY
70012: PUSH
70013: LD_INT 2
70015: ARRAY
70016: PPUSH
70017: CALL_OW 488
70021: NOT
70022: PUSH
70023: LD_VAR 0 6
70027: PUSH
70028: LD_VAR 0 4
70032: ARRAY
70033: PUSH
70034: LD_INT 1
70036: ARRAY
70037: PPUSH
70038: LD_VAR 0 6
70042: PUSH
70043: LD_VAR 0 4
70047: ARRAY
70048: PUSH
70049: LD_INT 2
70051: ARRAY
70052: PPUSH
70053: CALL_OW 428
70057: PUSH
70058: LD_INT 0
70060: NONEQUAL
70061: OR
70062: IFFALSE 70084
// tmp := Delete ( tmp , i ) ;
70064: LD_ADDR_VAR 0 6
70068: PUSH
70069: LD_VAR 0 6
70073: PPUSH
70074: LD_VAR 0 4
70078: PPUSH
70079: CALL_OW 3
70083: ST_TO_ADDR
70084: GO 69984
70086: POP
70087: POP
// j := GetClosestHex ( unit , tmp ) ;
70088: LD_ADDR_VAR 0 5
70092: PUSH
70093: LD_VAR 0 1
70097: PPUSH
70098: LD_VAR 0 6
70102: PPUSH
70103: CALL 69388 0 2
70107: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70108: LD_VAR 0 1
70112: PPUSH
70113: LD_VAR 0 5
70117: PUSH
70118: LD_INT 1
70120: ARRAY
70121: PPUSH
70122: LD_VAR 0 5
70126: PUSH
70127: LD_INT 2
70129: ARRAY
70130: PPUSH
70131: CALL_OW 111
// end ;
70135: LD_VAR 0 3
70139: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70140: LD_INT 0
70142: PPUSH
70143: PPUSH
70144: PPUSH
// uc_side = 0 ;
70145: LD_ADDR_OWVAR 20
70149: PUSH
70150: LD_INT 0
70152: ST_TO_ADDR
// uc_nation = 0 ;
70153: LD_ADDR_OWVAR 21
70157: PUSH
70158: LD_INT 0
70160: ST_TO_ADDR
// InitHc_All ( ) ;
70161: CALL_OW 584
// InitVc ;
70165: CALL_OW 20
// if mastodonts then
70169: LD_VAR 0 6
70173: IFFALSE 70240
// for i = 1 to mastodonts do
70175: LD_ADDR_VAR 0 11
70179: PUSH
70180: DOUBLE
70181: LD_INT 1
70183: DEC
70184: ST_TO_ADDR
70185: LD_VAR 0 6
70189: PUSH
70190: FOR_TO
70191: IFFALSE 70238
// begin vc_chassis := 31 ;
70193: LD_ADDR_OWVAR 37
70197: PUSH
70198: LD_INT 31
70200: ST_TO_ADDR
// vc_control := control_rider ;
70201: LD_ADDR_OWVAR 38
70205: PUSH
70206: LD_INT 4
70208: ST_TO_ADDR
// animal := CreateVehicle ;
70209: LD_ADDR_VAR 0 12
70213: PUSH
70214: CALL_OW 45
70218: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70219: LD_VAR 0 12
70223: PPUSH
70224: LD_VAR 0 8
70228: PPUSH
70229: LD_INT 0
70231: PPUSH
70232: CALL 72428 0 3
// end ;
70236: GO 70190
70238: POP
70239: POP
// if horses then
70240: LD_VAR 0 5
70244: IFFALSE 70311
// for i = 1 to horses do
70246: LD_ADDR_VAR 0 11
70250: PUSH
70251: DOUBLE
70252: LD_INT 1
70254: DEC
70255: ST_TO_ADDR
70256: LD_VAR 0 5
70260: PUSH
70261: FOR_TO
70262: IFFALSE 70309
// begin hc_class := 21 ;
70264: LD_ADDR_OWVAR 28
70268: PUSH
70269: LD_INT 21
70271: ST_TO_ADDR
// hc_gallery :=  ;
70272: LD_ADDR_OWVAR 33
70276: PUSH
70277: LD_STRING 
70279: ST_TO_ADDR
// animal := CreateHuman ;
70280: LD_ADDR_VAR 0 12
70284: PUSH
70285: CALL_OW 44
70289: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70290: LD_VAR 0 12
70294: PPUSH
70295: LD_VAR 0 8
70299: PPUSH
70300: LD_INT 0
70302: PPUSH
70303: CALL 72428 0 3
// end ;
70307: GO 70261
70309: POP
70310: POP
// if birds then
70311: LD_VAR 0 1
70315: IFFALSE 70382
// for i = 1 to birds do
70317: LD_ADDR_VAR 0 11
70321: PUSH
70322: DOUBLE
70323: LD_INT 1
70325: DEC
70326: ST_TO_ADDR
70327: LD_VAR 0 1
70331: PUSH
70332: FOR_TO
70333: IFFALSE 70380
// begin hc_class = 18 ;
70335: LD_ADDR_OWVAR 28
70339: PUSH
70340: LD_INT 18
70342: ST_TO_ADDR
// hc_gallery =  ;
70343: LD_ADDR_OWVAR 33
70347: PUSH
70348: LD_STRING 
70350: ST_TO_ADDR
// animal := CreateHuman ;
70351: LD_ADDR_VAR 0 12
70355: PUSH
70356: CALL_OW 44
70360: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70361: LD_VAR 0 12
70365: PPUSH
70366: LD_VAR 0 8
70370: PPUSH
70371: LD_INT 0
70373: PPUSH
70374: CALL 72428 0 3
// end ;
70378: GO 70332
70380: POP
70381: POP
// if tigers then
70382: LD_VAR 0 2
70386: IFFALSE 70470
// for i = 1 to tigers do
70388: LD_ADDR_VAR 0 11
70392: PUSH
70393: DOUBLE
70394: LD_INT 1
70396: DEC
70397: ST_TO_ADDR
70398: LD_VAR 0 2
70402: PUSH
70403: FOR_TO
70404: IFFALSE 70468
// begin hc_class = class_tiger ;
70406: LD_ADDR_OWVAR 28
70410: PUSH
70411: LD_INT 14
70413: ST_TO_ADDR
// hc_gallery =  ;
70414: LD_ADDR_OWVAR 33
70418: PUSH
70419: LD_STRING 
70421: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70422: LD_ADDR_OWVAR 35
70426: PUSH
70427: LD_INT 7
70429: NEG
70430: PPUSH
70431: LD_INT 7
70433: PPUSH
70434: CALL_OW 12
70438: ST_TO_ADDR
// animal := CreateHuman ;
70439: LD_ADDR_VAR 0 12
70443: PUSH
70444: CALL_OW 44
70448: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70449: LD_VAR 0 12
70453: PPUSH
70454: LD_VAR 0 8
70458: PPUSH
70459: LD_INT 0
70461: PPUSH
70462: CALL 72428 0 3
// end ;
70466: GO 70403
70468: POP
70469: POP
// if apemans then
70470: LD_VAR 0 3
70474: IFFALSE 70597
// for i = 1 to apemans do
70476: LD_ADDR_VAR 0 11
70480: PUSH
70481: DOUBLE
70482: LD_INT 1
70484: DEC
70485: ST_TO_ADDR
70486: LD_VAR 0 3
70490: PUSH
70491: FOR_TO
70492: IFFALSE 70595
// begin hc_class = class_apeman ;
70494: LD_ADDR_OWVAR 28
70498: PUSH
70499: LD_INT 12
70501: ST_TO_ADDR
// hc_gallery =  ;
70502: LD_ADDR_OWVAR 33
70506: PUSH
70507: LD_STRING 
70509: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70510: LD_ADDR_OWVAR 35
70514: PUSH
70515: LD_INT 2
70517: NEG
70518: PPUSH
70519: LD_INT 2
70521: PPUSH
70522: CALL_OW 12
70526: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70527: LD_ADDR_OWVAR 31
70531: PUSH
70532: LD_INT 1
70534: PPUSH
70535: LD_INT 3
70537: PPUSH
70538: CALL_OW 12
70542: PUSH
70543: LD_INT 1
70545: PPUSH
70546: LD_INT 3
70548: PPUSH
70549: CALL_OW 12
70553: PUSH
70554: LD_INT 0
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: ST_TO_ADDR
// animal := CreateHuman ;
70566: LD_ADDR_VAR 0 12
70570: PUSH
70571: CALL_OW 44
70575: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70576: LD_VAR 0 12
70580: PPUSH
70581: LD_VAR 0 8
70585: PPUSH
70586: LD_INT 0
70588: PPUSH
70589: CALL 72428 0 3
// end ;
70593: GO 70491
70595: POP
70596: POP
// if enchidnas then
70597: LD_VAR 0 4
70601: IFFALSE 70668
// for i = 1 to enchidnas do
70603: LD_ADDR_VAR 0 11
70607: PUSH
70608: DOUBLE
70609: LD_INT 1
70611: DEC
70612: ST_TO_ADDR
70613: LD_VAR 0 4
70617: PUSH
70618: FOR_TO
70619: IFFALSE 70666
// begin hc_class = 13 ;
70621: LD_ADDR_OWVAR 28
70625: PUSH
70626: LD_INT 13
70628: ST_TO_ADDR
// hc_gallery =  ;
70629: LD_ADDR_OWVAR 33
70633: PUSH
70634: LD_STRING 
70636: ST_TO_ADDR
// animal := CreateHuman ;
70637: LD_ADDR_VAR 0 12
70641: PUSH
70642: CALL_OW 44
70646: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70647: LD_VAR 0 12
70651: PPUSH
70652: LD_VAR 0 8
70656: PPUSH
70657: LD_INT 0
70659: PPUSH
70660: CALL 72428 0 3
// end ;
70664: GO 70618
70666: POP
70667: POP
// if fishes then
70668: LD_VAR 0 7
70672: IFFALSE 70739
// for i = 1 to fishes do
70674: LD_ADDR_VAR 0 11
70678: PUSH
70679: DOUBLE
70680: LD_INT 1
70682: DEC
70683: ST_TO_ADDR
70684: LD_VAR 0 7
70688: PUSH
70689: FOR_TO
70690: IFFALSE 70737
// begin hc_class = 20 ;
70692: LD_ADDR_OWVAR 28
70696: PUSH
70697: LD_INT 20
70699: ST_TO_ADDR
// hc_gallery =  ;
70700: LD_ADDR_OWVAR 33
70704: PUSH
70705: LD_STRING 
70707: ST_TO_ADDR
// animal := CreateHuman ;
70708: LD_ADDR_VAR 0 12
70712: PUSH
70713: CALL_OW 44
70717: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70718: LD_VAR 0 12
70722: PPUSH
70723: LD_VAR 0 9
70727: PPUSH
70728: LD_INT 0
70730: PPUSH
70731: CALL 72428 0 3
// end ;
70735: GO 70689
70737: POP
70738: POP
// end ;
70739: LD_VAR 0 10
70743: RET
// export function WantHeal ( sci , unit ) ; begin
70744: LD_INT 0
70746: PPUSH
// if GetTaskList ( sci ) > 0 then
70747: LD_VAR 0 1
70751: PPUSH
70752: CALL_OW 437
70756: PUSH
70757: LD_INT 0
70759: GREATER
70760: IFFALSE 70830
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70762: LD_VAR 0 1
70766: PPUSH
70767: CALL_OW 437
70771: PUSH
70772: LD_INT 1
70774: ARRAY
70775: PUSH
70776: LD_INT 1
70778: ARRAY
70779: PUSH
70780: LD_STRING l
70782: EQUAL
70783: PUSH
70784: LD_VAR 0 1
70788: PPUSH
70789: CALL_OW 437
70793: PUSH
70794: LD_INT 1
70796: ARRAY
70797: PUSH
70798: LD_INT 4
70800: ARRAY
70801: PUSH
70802: LD_VAR 0 2
70806: EQUAL
70807: AND
70808: IFFALSE 70820
// result := true else
70810: LD_ADDR_VAR 0 3
70814: PUSH
70815: LD_INT 1
70817: ST_TO_ADDR
70818: GO 70828
// result := false ;
70820: LD_ADDR_VAR 0 3
70824: PUSH
70825: LD_INT 0
70827: ST_TO_ADDR
// end else
70828: GO 70838
// result := false ;
70830: LD_ADDR_VAR 0 3
70834: PUSH
70835: LD_INT 0
70837: ST_TO_ADDR
// end ;
70838: LD_VAR 0 3
70842: RET
// export function HealTarget ( sci ) ; begin
70843: LD_INT 0
70845: PPUSH
// if not sci then
70846: LD_VAR 0 1
70850: NOT
70851: IFFALSE 70855
// exit ;
70853: GO 70920
// result := 0 ;
70855: LD_ADDR_VAR 0 2
70859: PUSH
70860: LD_INT 0
70862: ST_TO_ADDR
// if GetTaskList ( sci ) then
70863: LD_VAR 0 1
70867: PPUSH
70868: CALL_OW 437
70872: IFFALSE 70920
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70874: LD_VAR 0 1
70878: PPUSH
70879: CALL_OW 437
70883: PUSH
70884: LD_INT 1
70886: ARRAY
70887: PUSH
70888: LD_INT 1
70890: ARRAY
70891: PUSH
70892: LD_STRING l
70894: EQUAL
70895: IFFALSE 70920
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70897: LD_ADDR_VAR 0 2
70901: PUSH
70902: LD_VAR 0 1
70906: PPUSH
70907: CALL_OW 437
70911: PUSH
70912: LD_INT 1
70914: ARRAY
70915: PUSH
70916: LD_INT 4
70918: ARRAY
70919: ST_TO_ADDR
// end ;
70920: LD_VAR 0 2
70924: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70925: LD_INT 0
70927: PPUSH
70928: PPUSH
70929: PPUSH
70930: PPUSH
// if not base_units then
70931: LD_VAR 0 1
70935: NOT
70936: IFFALSE 70940
// exit ;
70938: GO 71027
// result := false ;
70940: LD_ADDR_VAR 0 2
70944: PUSH
70945: LD_INT 0
70947: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70948: LD_ADDR_VAR 0 5
70952: PUSH
70953: LD_VAR 0 1
70957: PPUSH
70958: LD_INT 21
70960: PUSH
70961: LD_INT 3
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PPUSH
70968: CALL_OW 72
70972: ST_TO_ADDR
// if not tmp then
70973: LD_VAR 0 5
70977: NOT
70978: IFFALSE 70982
// exit ;
70980: GO 71027
// for i in tmp do
70982: LD_ADDR_VAR 0 3
70986: PUSH
70987: LD_VAR 0 5
70991: PUSH
70992: FOR_IN
70993: IFFALSE 71025
// begin result := EnemyInRange ( i , 22 ) ;
70995: LD_ADDR_VAR 0 2
70999: PUSH
71000: LD_VAR 0 3
71004: PPUSH
71005: LD_INT 22
71007: PPUSH
71008: CALL 69263 0 2
71012: ST_TO_ADDR
// if result then
71013: LD_VAR 0 2
71017: IFFALSE 71023
// exit ;
71019: POP
71020: POP
71021: GO 71027
// end ;
71023: GO 70992
71025: POP
71026: POP
// end ;
71027: LD_VAR 0 2
71031: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71032: LD_INT 0
71034: PPUSH
71035: PPUSH
// if not units then
71036: LD_VAR 0 1
71040: NOT
71041: IFFALSE 71045
// exit ;
71043: GO 71115
// result := [ ] ;
71045: LD_ADDR_VAR 0 3
71049: PUSH
71050: EMPTY
71051: ST_TO_ADDR
// for i in units do
71052: LD_ADDR_VAR 0 4
71056: PUSH
71057: LD_VAR 0 1
71061: PUSH
71062: FOR_IN
71063: IFFALSE 71113
// if GetTag ( i ) = tag then
71065: LD_VAR 0 4
71069: PPUSH
71070: CALL_OW 110
71074: PUSH
71075: LD_VAR 0 2
71079: EQUAL
71080: IFFALSE 71111
// result := Replace ( result , result + 1 , i ) ;
71082: LD_ADDR_VAR 0 3
71086: PUSH
71087: LD_VAR 0 3
71091: PPUSH
71092: LD_VAR 0 3
71096: PUSH
71097: LD_INT 1
71099: PLUS
71100: PPUSH
71101: LD_VAR 0 4
71105: PPUSH
71106: CALL_OW 1
71110: ST_TO_ADDR
71111: GO 71062
71113: POP
71114: POP
// end ;
71115: LD_VAR 0 3
71119: RET
// export function IsDriver ( un ) ; begin
71120: LD_INT 0
71122: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71123: LD_ADDR_VAR 0 2
71127: PUSH
71128: LD_VAR 0 1
71132: PUSH
71133: LD_INT 55
71135: PUSH
71136: EMPTY
71137: LIST
71138: PPUSH
71139: CALL_OW 69
71143: IN
71144: ST_TO_ADDR
// end ;
71145: LD_VAR 0 2
71149: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71150: LD_INT 0
71152: PPUSH
71153: PPUSH
// list := [ ] ;
71154: LD_ADDR_VAR 0 5
71158: PUSH
71159: EMPTY
71160: ST_TO_ADDR
// case d of 0 :
71161: LD_VAR 0 3
71165: PUSH
71166: LD_INT 0
71168: DOUBLE
71169: EQUAL
71170: IFTRUE 71174
71172: GO 71307
71174: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71175: LD_ADDR_VAR 0 5
71179: PUSH
71180: LD_VAR 0 1
71184: PUSH
71185: LD_INT 4
71187: MINUS
71188: PUSH
71189: LD_VAR 0 2
71193: PUSH
71194: LD_INT 4
71196: MINUS
71197: PUSH
71198: LD_INT 2
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: LIST
71205: PUSH
71206: LD_VAR 0 1
71210: PUSH
71211: LD_INT 3
71213: MINUS
71214: PUSH
71215: LD_VAR 0 2
71219: PUSH
71220: LD_INT 1
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: LIST
71227: PUSH
71228: LD_VAR 0 1
71232: PUSH
71233: LD_INT 4
71235: PLUS
71236: PUSH
71237: LD_VAR 0 2
71241: PUSH
71242: LD_INT 4
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: LIST
71249: PUSH
71250: LD_VAR 0 1
71254: PUSH
71255: LD_INT 3
71257: PLUS
71258: PUSH
71259: LD_VAR 0 2
71263: PUSH
71264: LD_INT 3
71266: PLUS
71267: PUSH
71268: LD_INT 5
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: LIST
71275: PUSH
71276: LD_VAR 0 1
71280: PUSH
71281: LD_VAR 0 2
71285: PUSH
71286: LD_INT 4
71288: PLUS
71289: PUSH
71290: LD_INT 0
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: LIST
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: ST_TO_ADDR
// end ; 1 :
71305: GO 72005
71307: LD_INT 1
71309: DOUBLE
71310: EQUAL
71311: IFTRUE 71315
71313: GO 71448
71315: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71316: LD_ADDR_VAR 0 5
71320: PUSH
71321: LD_VAR 0 1
71325: PUSH
71326: LD_VAR 0 2
71330: PUSH
71331: LD_INT 4
71333: MINUS
71334: PUSH
71335: LD_INT 3
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: LIST
71342: PUSH
71343: LD_VAR 0 1
71347: PUSH
71348: LD_INT 3
71350: MINUS
71351: PUSH
71352: LD_VAR 0 2
71356: PUSH
71357: LD_INT 3
71359: MINUS
71360: PUSH
71361: LD_INT 2
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: LIST
71368: PUSH
71369: LD_VAR 0 1
71373: PUSH
71374: LD_INT 4
71376: MINUS
71377: PUSH
71378: LD_VAR 0 2
71382: PUSH
71383: LD_INT 1
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: LIST
71390: PUSH
71391: LD_VAR 0 1
71395: PUSH
71396: LD_VAR 0 2
71400: PUSH
71401: LD_INT 3
71403: PLUS
71404: PUSH
71405: LD_INT 0
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: LIST
71412: PUSH
71413: LD_VAR 0 1
71417: PUSH
71418: LD_INT 4
71420: PLUS
71421: PUSH
71422: LD_VAR 0 2
71426: PUSH
71427: LD_INT 4
71429: PLUS
71430: PUSH
71431: LD_INT 5
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: LIST
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: ST_TO_ADDR
// end ; 2 :
71446: GO 72005
71448: LD_INT 2
71450: DOUBLE
71451: EQUAL
71452: IFTRUE 71456
71454: GO 71585
71456: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71457: LD_ADDR_VAR 0 5
71461: PUSH
71462: LD_VAR 0 1
71466: PUSH
71467: LD_VAR 0 2
71471: PUSH
71472: LD_INT 3
71474: MINUS
71475: PUSH
71476: LD_INT 3
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: LIST
71483: PUSH
71484: LD_VAR 0 1
71488: PUSH
71489: LD_INT 4
71491: PLUS
71492: PUSH
71493: LD_VAR 0 2
71497: PUSH
71498: LD_INT 4
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: LIST
71505: PUSH
71506: LD_VAR 0 1
71510: PUSH
71511: LD_VAR 0 2
71515: PUSH
71516: LD_INT 4
71518: PLUS
71519: PUSH
71520: LD_INT 0
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: LIST
71527: PUSH
71528: LD_VAR 0 1
71532: PUSH
71533: LD_INT 3
71535: MINUS
71536: PUSH
71537: LD_VAR 0 2
71541: PUSH
71542: LD_INT 1
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: LIST
71549: PUSH
71550: LD_VAR 0 1
71554: PUSH
71555: LD_INT 4
71557: MINUS
71558: PUSH
71559: LD_VAR 0 2
71563: PUSH
71564: LD_INT 4
71566: MINUS
71567: PUSH
71568: LD_INT 2
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: LIST
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: ST_TO_ADDR
// end ; 3 :
71583: GO 72005
71585: LD_INT 3
71587: DOUBLE
71588: EQUAL
71589: IFTRUE 71593
71591: GO 71726
71593: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71594: LD_ADDR_VAR 0 5
71598: PUSH
71599: LD_VAR 0 1
71603: PUSH
71604: LD_INT 3
71606: PLUS
71607: PUSH
71608: LD_VAR 0 2
71612: PUSH
71613: LD_INT 4
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: LIST
71620: PUSH
71621: LD_VAR 0 1
71625: PUSH
71626: LD_INT 4
71628: PLUS
71629: PUSH
71630: LD_VAR 0 2
71634: PUSH
71635: LD_INT 4
71637: PLUS
71638: PUSH
71639: LD_INT 5
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: LIST
71646: PUSH
71647: LD_VAR 0 1
71651: PUSH
71652: LD_INT 4
71654: MINUS
71655: PUSH
71656: LD_VAR 0 2
71660: PUSH
71661: LD_INT 1
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: LIST
71668: PUSH
71669: LD_VAR 0 1
71673: PUSH
71674: LD_VAR 0 2
71678: PUSH
71679: LD_INT 4
71681: MINUS
71682: PUSH
71683: LD_INT 3
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: LIST
71690: PUSH
71691: LD_VAR 0 1
71695: PUSH
71696: LD_INT 3
71698: MINUS
71699: PUSH
71700: LD_VAR 0 2
71704: PUSH
71705: LD_INT 3
71707: MINUS
71708: PUSH
71709: LD_INT 2
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: LIST
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: ST_TO_ADDR
// end ; 4 :
71724: GO 72005
71726: LD_INT 4
71728: DOUBLE
71729: EQUAL
71730: IFTRUE 71734
71732: GO 71867
71734: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71735: LD_ADDR_VAR 0 5
71739: PUSH
71740: LD_VAR 0 1
71744: PUSH
71745: LD_VAR 0 2
71749: PUSH
71750: LD_INT 4
71752: PLUS
71753: PUSH
71754: LD_INT 0
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: LIST
71761: PUSH
71762: LD_VAR 0 1
71766: PUSH
71767: LD_INT 3
71769: PLUS
71770: PUSH
71771: LD_VAR 0 2
71775: PUSH
71776: LD_INT 3
71778: PLUS
71779: PUSH
71780: LD_INT 5
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: LIST
71787: PUSH
71788: LD_VAR 0 1
71792: PUSH
71793: LD_INT 4
71795: PLUS
71796: PUSH
71797: LD_VAR 0 2
71801: PUSH
71802: LD_INT 4
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: LIST
71809: PUSH
71810: LD_VAR 0 1
71814: PUSH
71815: LD_VAR 0 2
71819: PUSH
71820: LD_INT 3
71822: MINUS
71823: PUSH
71824: LD_INT 3
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: LIST
71831: PUSH
71832: LD_VAR 0 1
71836: PUSH
71837: LD_INT 4
71839: MINUS
71840: PUSH
71841: LD_VAR 0 2
71845: PUSH
71846: LD_INT 4
71848: MINUS
71849: PUSH
71850: LD_INT 2
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: LIST
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: ST_TO_ADDR
// end ; 5 :
71865: GO 72005
71867: LD_INT 5
71869: DOUBLE
71870: EQUAL
71871: IFTRUE 71875
71873: GO 72004
71875: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71876: LD_ADDR_VAR 0 5
71880: PUSH
71881: LD_VAR 0 1
71885: PUSH
71886: LD_INT 4
71888: MINUS
71889: PUSH
71890: LD_VAR 0 2
71894: PUSH
71895: LD_INT 1
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: LIST
71902: PUSH
71903: LD_VAR 0 1
71907: PUSH
71908: LD_VAR 0 2
71912: PUSH
71913: LD_INT 4
71915: MINUS
71916: PUSH
71917: LD_INT 3
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: LIST
71924: PUSH
71925: LD_VAR 0 1
71929: PUSH
71930: LD_INT 4
71932: PLUS
71933: PUSH
71934: LD_VAR 0 2
71938: PUSH
71939: LD_INT 4
71941: PLUS
71942: PUSH
71943: LD_INT 5
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: LIST
71950: PUSH
71951: LD_VAR 0 1
71955: PUSH
71956: LD_INT 3
71958: PLUS
71959: PUSH
71960: LD_VAR 0 2
71964: PUSH
71965: LD_INT 4
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: LIST
71972: PUSH
71973: LD_VAR 0 1
71977: PUSH
71978: LD_VAR 0 2
71982: PUSH
71983: LD_INT 3
71985: PLUS
71986: PUSH
71987: LD_INT 0
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: LIST
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: ST_TO_ADDR
// end ; end ;
72002: GO 72005
72004: POP
// result := list ;
72005: LD_ADDR_VAR 0 4
72009: PUSH
72010: LD_VAR 0 5
72014: ST_TO_ADDR
// end ;
72015: LD_VAR 0 4
72019: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72020: LD_INT 0
72022: PPUSH
72023: PPUSH
72024: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72025: LD_VAR 0 1
72029: NOT
72030: PUSH
72031: LD_VAR 0 2
72035: PUSH
72036: LD_INT 1
72038: PUSH
72039: LD_INT 2
72041: PUSH
72042: LD_INT 3
72044: PUSH
72045: LD_INT 4
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: IN
72054: NOT
72055: OR
72056: IFFALSE 72060
// exit ;
72058: GO 72152
// tmp := [ ] ;
72060: LD_ADDR_VAR 0 5
72064: PUSH
72065: EMPTY
72066: ST_TO_ADDR
// for i in units do
72067: LD_ADDR_VAR 0 4
72071: PUSH
72072: LD_VAR 0 1
72076: PUSH
72077: FOR_IN
72078: IFFALSE 72121
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72080: LD_ADDR_VAR 0 5
72084: PUSH
72085: LD_VAR 0 5
72089: PPUSH
72090: LD_VAR 0 5
72094: PUSH
72095: LD_INT 1
72097: PLUS
72098: PPUSH
72099: LD_VAR 0 4
72103: PPUSH
72104: LD_VAR 0 2
72108: PPUSH
72109: CALL_OW 259
72113: PPUSH
72114: CALL_OW 2
72118: ST_TO_ADDR
72119: GO 72077
72121: POP
72122: POP
// if not tmp then
72123: LD_VAR 0 5
72127: NOT
72128: IFFALSE 72132
// exit ;
72130: GO 72152
// result := SortListByListDesc ( units , tmp ) ;
72132: LD_ADDR_VAR 0 3
72136: PUSH
72137: LD_VAR 0 1
72141: PPUSH
72142: LD_VAR 0 5
72146: PPUSH
72147: CALL_OW 77
72151: ST_TO_ADDR
// end ;
72152: LD_VAR 0 3
72156: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72157: LD_INT 0
72159: PPUSH
72160: PPUSH
72161: PPUSH
// result := false ;
72162: LD_ADDR_VAR 0 3
72166: PUSH
72167: LD_INT 0
72169: ST_TO_ADDR
// x := GetX ( building ) ;
72170: LD_ADDR_VAR 0 4
72174: PUSH
72175: LD_VAR 0 2
72179: PPUSH
72180: CALL_OW 250
72184: ST_TO_ADDR
// y := GetY ( building ) ;
72185: LD_ADDR_VAR 0 5
72189: PUSH
72190: LD_VAR 0 2
72194: PPUSH
72195: CALL_OW 251
72199: ST_TO_ADDR
// if not building or not x or not y then
72200: LD_VAR 0 2
72204: NOT
72205: PUSH
72206: LD_VAR 0 4
72210: NOT
72211: OR
72212: PUSH
72213: LD_VAR 0 5
72217: NOT
72218: OR
72219: IFFALSE 72223
// exit ;
72221: GO 72315
// if GetTaskList ( unit ) then
72223: LD_VAR 0 1
72227: PPUSH
72228: CALL_OW 437
72232: IFFALSE 72315
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72234: LD_STRING e
72236: PUSH
72237: LD_VAR 0 1
72241: PPUSH
72242: CALL_OW 437
72246: PUSH
72247: LD_INT 1
72249: ARRAY
72250: PUSH
72251: LD_INT 1
72253: ARRAY
72254: EQUAL
72255: PUSH
72256: LD_VAR 0 4
72260: PUSH
72261: LD_VAR 0 1
72265: PPUSH
72266: CALL_OW 437
72270: PUSH
72271: LD_INT 1
72273: ARRAY
72274: PUSH
72275: LD_INT 2
72277: ARRAY
72278: EQUAL
72279: AND
72280: PUSH
72281: LD_VAR 0 5
72285: PUSH
72286: LD_VAR 0 1
72290: PPUSH
72291: CALL_OW 437
72295: PUSH
72296: LD_INT 1
72298: ARRAY
72299: PUSH
72300: LD_INT 3
72302: ARRAY
72303: EQUAL
72304: AND
72305: IFFALSE 72315
// result := true end ;
72307: LD_ADDR_VAR 0 3
72311: PUSH
72312: LD_INT 1
72314: ST_TO_ADDR
// end ;
72315: LD_VAR 0 3
72319: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72320: LD_INT 0
72322: PPUSH
// result := false ;
72323: LD_ADDR_VAR 0 4
72327: PUSH
72328: LD_INT 0
72330: ST_TO_ADDR
// if GetTaskList ( unit ) then
72331: LD_VAR 0 1
72335: PPUSH
72336: CALL_OW 437
72340: IFFALSE 72423
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72342: LD_STRING M
72344: PUSH
72345: LD_VAR 0 1
72349: PPUSH
72350: CALL_OW 437
72354: PUSH
72355: LD_INT 1
72357: ARRAY
72358: PUSH
72359: LD_INT 1
72361: ARRAY
72362: EQUAL
72363: PUSH
72364: LD_VAR 0 2
72368: PUSH
72369: LD_VAR 0 1
72373: PPUSH
72374: CALL_OW 437
72378: PUSH
72379: LD_INT 1
72381: ARRAY
72382: PUSH
72383: LD_INT 2
72385: ARRAY
72386: EQUAL
72387: AND
72388: PUSH
72389: LD_VAR 0 3
72393: PUSH
72394: LD_VAR 0 1
72398: PPUSH
72399: CALL_OW 437
72403: PUSH
72404: LD_INT 1
72406: ARRAY
72407: PUSH
72408: LD_INT 3
72410: ARRAY
72411: EQUAL
72412: AND
72413: IFFALSE 72423
// result := true ;
72415: LD_ADDR_VAR 0 4
72419: PUSH
72420: LD_INT 1
72422: ST_TO_ADDR
// end ; end ;
72423: LD_VAR 0 4
72427: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72428: LD_INT 0
72430: PPUSH
72431: PPUSH
72432: PPUSH
72433: PPUSH
// if not unit or not area then
72434: LD_VAR 0 1
72438: NOT
72439: PUSH
72440: LD_VAR 0 2
72444: NOT
72445: OR
72446: IFFALSE 72450
// exit ;
72448: GO 72614
// tmp := AreaToList ( area , i ) ;
72450: LD_ADDR_VAR 0 6
72454: PUSH
72455: LD_VAR 0 2
72459: PPUSH
72460: LD_VAR 0 5
72464: PPUSH
72465: CALL_OW 517
72469: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72470: LD_ADDR_VAR 0 5
72474: PUSH
72475: DOUBLE
72476: LD_INT 1
72478: DEC
72479: ST_TO_ADDR
72480: LD_VAR 0 6
72484: PUSH
72485: LD_INT 1
72487: ARRAY
72488: PUSH
72489: FOR_TO
72490: IFFALSE 72612
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72492: LD_ADDR_VAR 0 7
72496: PUSH
72497: LD_VAR 0 6
72501: PUSH
72502: LD_INT 1
72504: ARRAY
72505: PUSH
72506: LD_VAR 0 5
72510: ARRAY
72511: PUSH
72512: LD_VAR 0 6
72516: PUSH
72517: LD_INT 2
72519: ARRAY
72520: PUSH
72521: LD_VAR 0 5
72525: ARRAY
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72531: LD_VAR 0 7
72535: PUSH
72536: LD_INT 1
72538: ARRAY
72539: PPUSH
72540: LD_VAR 0 7
72544: PUSH
72545: LD_INT 2
72547: ARRAY
72548: PPUSH
72549: CALL_OW 428
72553: PUSH
72554: LD_INT 0
72556: EQUAL
72557: IFFALSE 72610
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72559: LD_VAR 0 1
72563: PPUSH
72564: LD_VAR 0 7
72568: PUSH
72569: LD_INT 1
72571: ARRAY
72572: PPUSH
72573: LD_VAR 0 7
72577: PUSH
72578: LD_INT 2
72580: ARRAY
72581: PPUSH
72582: LD_VAR 0 3
72586: PPUSH
72587: CALL_OW 48
// result := IsPlaced ( unit ) ;
72591: LD_ADDR_VAR 0 4
72595: PUSH
72596: LD_VAR 0 1
72600: PPUSH
72601: CALL_OW 305
72605: ST_TO_ADDR
// exit ;
72606: POP
72607: POP
72608: GO 72614
// end ; end ;
72610: GO 72489
72612: POP
72613: POP
// end ;
72614: LD_VAR 0 4
72618: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72619: LD_INT 0
72621: PPUSH
72622: PPUSH
72623: PPUSH
// if not side or side > 8 then
72624: LD_VAR 0 1
72628: NOT
72629: PUSH
72630: LD_VAR 0 1
72634: PUSH
72635: LD_INT 8
72637: GREATER
72638: OR
72639: IFFALSE 72643
// exit ;
72641: GO 72830
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72643: LD_ADDR_VAR 0 4
72647: PUSH
72648: LD_INT 22
72650: PUSH
72651: LD_VAR 0 1
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 21
72662: PUSH
72663: LD_INT 3
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: PPUSH
72674: CALL_OW 69
72678: ST_TO_ADDR
// if not tmp then
72679: LD_VAR 0 4
72683: NOT
72684: IFFALSE 72688
// exit ;
72686: GO 72830
// enable_addtolog := true ;
72688: LD_ADDR_OWVAR 81
72692: PUSH
72693: LD_INT 1
72695: ST_TO_ADDR
// AddToLog ( [ ) ;
72696: LD_STRING [
72698: PPUSH
72699: CALL_OW 561
// for i in tmp do
72703: LD_ADDR_VAR 0 3
72707: PUSH
72708: LD_VAR 0 4
72712: PUSH
72713: FOR_IN
72714: IFFALSE 72821
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72716: LD_STRING [
72718: PUSH
72719: LD_VAR 0 3
72723: PPUSH
72724: CALL_OW 266
72728: STR
72729: PUSH
72730: LD_STRING , 
72732: STR
72733: PUSH
72734: LD_VAR 0 3
72738: PPUSH
72739: CALL_OW 250
72743: STR
72744: PUSH
72745: LD_STRING , 
72747: STR
72748: PUSH
72749: LD_VAR 0 3
72753: PPUSH
72754: CALL_OW 251
72758: STR
72759: PUSH
72760: LD_STRING , 
72762: STR
72763: PUSH
72764: LD_VAR 0 3
72768: PPUSH
72769: CALL_OW 254
72773: STR
72774: PUSH
72775: LD_STRING , 
72777: STR
72778: PUSH
72779: LD_VAR 0 3
72783: PPUSH
72784: LD_INT 1
72786: PPUSH
72787: CALL_OW 268
72791: STR
72792: PUSH
72793: LD_STRING , 
72795: STR
72796: PUSH
72797: LD_VAR 0 3
72801: PPUSH
72802: LD_INT 2
72804: PPUSH
72805: CALL_OW 268
72809: STR
72810: PUSH
72811: LD_STRING ],
72813: STR
72814: PPUSH
72815: CALL_OW 561
// end ;
72819: GO 72713
72821: POP
72822: POP
// AddToLog ( ]; ) ;
72823: LD_STRING ];
72825: PPUSH
72826: CALL_OW 561
// end ;
72830: LD_VAR 0 2
72834: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72835: LD_INT 0
72837: PPUSH
72838: PPUSH
72839: PPUSH
72840: PPUSH
72841: PPUSH
// if not area or not rate or not max then
72842: LD_VAR 0 1
72846: NOT
72847: PUSH
72848: LD_VAR 0 2
72852: NOT
72853: OR
72854: PUSH
72855: LD_VAR 0 4
72859: NOT
72860: OR
72861: IFFALSE 72865
// exit ;
72863: GO 73057
// while 1 do
72865: LD_INT 1
72867: IFFALSE 73057
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72869: LD_ADDR_VAR 0 9
72873: PUSH
72874: LD_VAR 0 1
72878: PPUSH
72879: LD_INT 1
72881: PPUSH
72882: CALL_OW 287
72886: PUSH
72887: LD_INT 10
72889: MUL
72890: ST_TO_ADDR
// r := rate / 10 ;
72891: LD_ADDR_VAR 0 7
72895: PUSH
72896: LD_VAR 0 2
72900: PUSH
72901: LD_INT 10
72903: DIVREAL
72904: ST_TO_ADDR
// time := 1 1$00 ;
72905: LD_ADDR_VAR 0 8
72909: PUSH
72910: LD_INT 2100
72912: ST_TO_ADDR
// if amount < min then
72913: LD_VAR 0 9
72917: PUSH
72918: LD_VAR 0 3
72922: LESS
72923: IFFALSE 72941
// r := r * 2 else
72925: LD_ADDR_VAR 0 7
72929: PUSH
72930: LD_VAR 0 7
72934: PUSH
72935: LD_INT 2
72937: MUL
72938: ST_TO_ADDR
72939: GO 72967
// if amount > max then
72941: LD_VAR 0 9
72945: PUSH
72946: LD_VAR 0 4
72950: GREATER
72951: IFFALSE 72967
// r := r / 2 ;
72953: LD_ADDR_VAR 0 7
72957: PUSH
72958: LD_VAR 0 7
72962: PUSH
72963: LD_INT 2
72965: DIVREAL
72966: ST_TO_ADDR
// time := time / r ;
72967: LD_ADDR_VAR 0 8
72971: PUSH
72972: LD_VAR 0 8
72976: PUSH
72977: LD_VAR 0 7
72981: DIVREAL
72982: ST_TO_ADDR
// if time < 0 then
72983: LD_VAR 0 8
72987: PUSH
72988: LD_INT 0
72990: LESS
72991: IFFALSE 73008
// time := time * - 1 ;
72993: LD_ADDR_VAR 0 8
72997: PUSH
72998: LD_VAR 0 8
73002: PUSH
73003: LD_INT 1
73005: NEG
73006: MUL
73007: ST_TO_ADDR
// wait ( time ) ;
73008: LD_VAR 0 8
73012: PPUSH
73013: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73017: LD_INT 35
73019: PPUSH
73020: LD_INT 875
73022: PPUSH
73023: CALL_OW 12
73027: PPUSH
73028: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73032: LD_INT 1
73034: PPUSH
73035: LD_INT 5
73037: PPUSH
73038: CALL_OW 12
73042: PPUSH
73043: LD_VAR 0 1
73047: PPUSH
73048: LD_INT 1
73050: PPUSH
73051: CALL_OW 55
// end ;
73055: GO 72865
// end ;
73057: LD_VAR 0 5
73061: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73062: LD_INT 0
73064: PPUSH
73065: PPUSH
73066: PPUSH
73067: PPUSH
73068: PPUSH
73069: PPUSH
73070: PPUSH
73071: PPUSH
// if not turrets or not factories then
73072: LD_VAR 0 1
73076: NOT
73077: PUSH
73078: LD_VAR 0 2
73082: NOT
73083: OR
73084: IFFALSE 73088
// exit ;
73086: GO 73395
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73088: LD_ADDR_VAR 0 10
73092: PUSH
73093: LD_INT 5
73095: PUSH
73096: LD_INT 6
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: PUSH
73103: LD_INT 2
73105: PUSH
73106: LD_INT 4
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: PUSH
73113: LD_INT 3
73115: PUSH
73116: LD_INT 5
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 24
73130: PUSH
73131: LD_INT 25
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: PUSH
73138: LD_INT 23
73140: PUSH
73141: LD_INT 27
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: LD_INT 42
73154: PUSH
73155: LD_INT 43
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PUSH
73162: LD_INT 44
73164: PUSH
73165: LD_INT 46
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: PUSH
73172: LD_INT 45
73174: PUSH
73175: LD_INT 47
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: LIST
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: LIST
73191: ST_TO_ADDR
// result := [ ] ;
73192: LD_ADDR_VAR 0 3
73196: PUSH
73197: EMPTY
73198: ST_TO_ADDR
// for i in turrets do
73199: LD_ADDR_VAR 0 4
73203: PUSH
73204: LD_VAR 0 1
73208: PUSH
73209: FOR_IN
73210: IFFALSE 73393
// begin nat := GetNation ( i ) ;
73212: LD_ADDR_VAR 0 7
73216: PUSH
73217: LD_VAR 0 4
73221: PPUSH
73222: CALL_OW 248
73226: ST_TO_ADDR
// weapon := 0 ;
73227: LD_ADDR_VAR 0 8
73231: PUSH
73232: LD_INT 0
73234: ST_TO_ADDR
// if not nat then
73235: LD_VAR 0 7
73239: NOT
73240: IFFALSE 73244
// continue ;
73242: GO 73209
// for j in list [ nat ] do
73244: LD_ADDR_VAR 0 5
73248: PUSH
73249: LD_VAR 0 10
73253: PUSH
73254: LD_VAR 0 7
73258: ARRAY
73259: PUSH
73260: FOR_IN
73261: IFFALSE 73302
// if GetBWeapon ( i ) = j [ 1 ] then
73263: LD_VAR 0 4
73267: PPUSH
73268: CALL_OW 269
73272: PUSH
73273: LD_VAR 0 5
73277: PUSH
73278: LD_INT 1
73280: ARRAY
73281: EQUAL
73282: IFFALSE 73300
// begin weapon := j [ 2 ] ;
73284: LD_ADDR_VAR 0 8
73288: PUSH
73289: LD_VAR 0 5
73293: PUSH
73294: LD_INT 2
73296: ARRAY
73297: ST_TO_ADDR
// break ;
73298: GO 73302
// end ;
73300: GO 73260
73302: POP
73303: POP
// if not weapon then
73304: LD_VAR 0 8
73308: NOT
73309: IFFALSE 73313
// continue ;
73311: GO 73209
// for k in factories do
73313: LD_ADDR_VAR 0 6
73317: PUSH
73318: LD_VAR 0 2
73322: PUSH
73323: FOR_IN
73324: IFFALSE 73389
// begin weapons := AvailableWeaponList ( k ) ;
73326: LD_ADDR_VAR 0 9
73330: PUSH
73331: LD_VAR 0 6
73335: PPUSH
73336: CALL_OW 478
73340: ST_TO_ADDR
// if not weapons then
73341: LD_VAR 0 9
73345: NOT
73346: IFFALSE 73350
// continue ;
73348: GO 73323
// if weapon in weapons then
73350: LD_VAR 0 8
73354: PUSH
73355: LD_VAR 0 9
73359: IN
73360: IFFALSE 73387
// begin result := [ i , weapon ] ;
73362: LD_ADDR_VAR 0 3
73366: PUSH
73367: LD_VAR 0 4
73371: PUSH
73372: LD_VAR 0 8
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: ST_TO_ADDR
// exit ;
73381: POP
73382: POP
73383: POP
73384: POP
73385: GO 73395
// end ; end ;
73387: GO 73323
73389: POP
73390: POP
// end ;
73391: GO 73209
73393: POP
73394: POP
// end ;
73395: LD_VAR 0 3
73399: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73400: LD_INT 0
73402: PPUSH
// if not side or side > 8 then
73403: LD_VAR 0 3
73407: NOT
73408: PUSH
73409: LD_VAR 0 3
73413: PUSH
73414: LD_INT 8
73416: GREATER
73417: OR
73418: IFFALSE 73422
// exit ;
73420: GO 73481
// if not range then
73422: LD_VAR 0 4
73426: NOT
73427: IFFALSE 73438
// range := - 12 ;
73429: LD_ADDR_VAR 0 4
73433: PUSH
73434: LD_INT 12
73436: NEG
73437: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73438: LD_VAR 0 1
73442: PPUSH
73443: LD_VAR 0 2
73447: PPUSH
73448: LD_VAR 0 3
73452: PPUSH
73453: LD_VAR 0 4
73457: PPUSH
73458: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73462: LD_VAR 0 1
73466: PPUSH
73467: LD_VAR 0 2
73471: PPUSH
73472: LD_VAR 0 3
73476: PPUSH
73477: CALL_OW 331
// end ;
73481: LD_VAR 0 5
73485: RET
// export function Video ( mode ) ; begin
73486: LD_INT 0
73488: PPUSH
// ingame_video = mode ;
73489: LD_ADDR_OWVAR 52
73493: PUSH
73494: LD_VAR 0 1
73498: ST_TO_ADDR
// interface_hidden = mode ;
73499: LD_ADDR_OWVAR 54
73503: PUSH
73504: LD_VAR 0 1
73508: ST_TO_ADDR
// end ;
73509: LD_VAR 0 2
73513: RET
// export function Join ( array , element ) ; begin
73514: LD_INT 0
73516: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73517: LD_ADDR_VAR 0 3
73521: PUSH
73522: LD_VAR 0 1
73526: PPUSH
73527: LD_VAR 0 1
73531: PUSH
73532: LD_INT 1
73534: PLUS
73535: PPUSH
73536: LD_VAR 0 2
73540: PPUSH
73541: CALL_OW 1
73545: ST_TO_ADDR
// end ;
73546: LD_VAR 0 3
73550: RET
// export function JoinUnion ( array , element ) ; begin
73551: LD_INT 0
73553: PPUSH
// result := array union element ;
73554: LD_ADDR_VAR 0 3
73558: PUSH
73559: LD_VAR 0 1
73563: PUSH
73564: LD_VAR 0 2
73568: UNION
73569: ST_TO_ADDR
// end ;
73570: LD_VAR 0 3
73574: RET
// export function GetBehemoths ( side ) ; begin
73575: LD_INT 0
73577: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73578: LD_ADDR_VAR 0 2
73582: PUSH
73583: LD_INT 22
73585: PUSH
73586: LD_VAR 0 1
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 31
73597: PUSH
73598: LD_INT 25
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PPUSH
73609: CALL_OW 69
73613: ST_TO_ADDR
// end ;
73614: LD_VAR 0 2
73618: RET
// export function Shuffle ( array ) ; var i , index ; begin
73619: LD_INT 0
73621: PPUSH
73622: PPUSH
73623: PPUSH
// result := [ ] ;
73624: LD_ADDR_VAR 0 2
73628: PUSH
73629: EMPTY
73630: ST_TO_ADDR
// if not array then
73631: LD_VAR 0 1
73635: NOT
73636: IFFALSE 73640
// exit ;
73638: GO 73739
// Randomize ;
73640: CALL_OW 10
// for i = array downto 1 do
73644: LD_ADDR_VAR 0 3
73648: PUSH
73649: DOUBLE
73650: LD_VAR 0 1
73654: INC
73655: ST_TO_ADDR
73656: LD_INT 1
73658: PUSH
73659: FOR_DOWNTO
73660: IFFALSE 73737
// begin index := rand ( 1 , array ) ;
73662: LD_ADDR_VAR 0 4
73666: PUSH
73667: LD_INT 1
73669: PPUSH
73670: LD_VAR 0 1
73674: PPUSH
73675: CALL_OW 12
73679: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73680: LD_ADDR_VAR 0 2
73684: PUSH
73685: LD_VAR 0 2
73689: PPUSH
73690: LD_VAR 0 2
73694: PUSH
73695: LD_INT 1
73697: PLUS
73698: PPUSH
73699: LD_VAR 0 1
73703: PUSH
73704: LD_VAR 0 4
73708: ARRAY
73709: PPUSH
73710: CALL_OW 2
73714: ST_TO_ADDR
// array := Delete ( array , index ) ;
73715: LD_ADDR_VAR 0 1
73719: PUSH
73720: LD_VAR 0 1
73724: PPUSH
73725: LD_VAR 0 4
73729: PPUSH
73730: CALL_OW 3
73734: ST_TO_ADDR
// end ;
73735: GO 73659
73737: POP
73738: POP
// end ;
73739: LD_VAR 0 2
73743: RET
// export function GetBaseMaterials ( base ) ; begin
73744: LD_INT 0
73746: PPUSH
// result := [ 0 , 0 , 0 ] ;
73747: LD_ADDR_VAR 0 2
73751: PUSH
73752: LD_INT 0
73754: PUSH
73755: LD_INT 0
73757: PUSH
73758: LD_INT 0
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: LIST
73765: ST_TO_ADDR
// if not base then
73766: LD_VAR 0 1
73770: NOT
73771: IFFALSE 73775
// exit ;
73773: GO 73824
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73775: LD_ADDR_VAR 0 2
73779: PUSH
73780: LD_VAR 0 1
73784: PPUSH
73785: LD_INT 1
73787: PPUSH
73788: CALL_OW 275
73792: PUSH
73793: LD_VAR 0 1
73797: PPUSH
73798: LD_INT 2
73800: PPUSH
73801: CALL_OW 275
73805: PUSH
73806: LD_VAR 0 1
73810: PPUSH
73811: LD_INT 3
73813: PPUSH
73814: CALL_OW 275
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: LIST
73823: ST_TO_ADDR
// end ;
73824: LD_VAR 0 2
73828: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73829: LD_INT 0
73831: PPUSH
73832: PPUSH
// result := array ;
73833: LD_ADDR_VAR 0 3
73837: PUSH
73838: LD_VAR 0 1
73842: ST_TO_ADDR
// if size > 0 then
73843: LD_VAR 0 2
73847: PUSH
73848: LD_INT 0
73850: GREATER
73851: IFFALSE 73897
// for i := array downto size do
73853: LD_ADDR_VAR 0 4
73857: PUSH
73858: DOUBLE
73859: LD_VAR 0 1
73863: INC
73864: ST_TO_ADDR
73865: LD_VAR 0 2
73869: PUSH
73870: FOR_DOWNTO
73871: IFFALSE 73895
// result := Delete ( result , result ) ;
73873: LD_ADDR_VAR 0 3
73877: PUSH
73878: LD_VAR 0 3
73882: PPUSH
73883: LD_VAR 0 3
73887: PPUSH
73888: CALL_OW 3
73892: ST_TO_ADDR
73893: GO 73870
73895: POP
73896: POP
// end ;
73897: LD_VAR 0 3
73901: RET
// export function ComExit ( unit ) ; var tmp ; begin
73902: LD_INT 0
73904: PPUSH
73905: PPUSH
// if not IsInUnit ( unit ) then
73906: LD_VAR 0 1
73910: PPUSH
73911: CALL_OW 310
73915: NOT
73916: IFFALSE 73920
// exit ;
73918: GO 73980
// tmp := IsInUnit ( unit ) ;
73920: LD_ADDR_VAR 0 3
73924: PUSH
73925: LD_VAR 0 1
73929: PPUSH
73930: CALL_OW 310
73934: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73935: LD_VAR 0 3
73939: PPUSH
73940: CALL_OW 247
73944: PUSH
73945: LD_INT 2
73947: EQUAL
73948: IFFALSE 73961
// ComExitVehicle ( unit ) else
73950: LD_VAR 0 1
73954: PPUSH
73955: CALL_OW 121
73959: GO 73970
// ComExitBuilding ( unit ) ;
73961: LD_VAR 0 1
73965: PPUSH
73966: CALL_OW 122
// result := tmp ;
73970: LD_ADDR_VAR 0 2
73974: PUSH
73975: LD_VAR 0 3
73979: ST_TO_ADDR
// end ;
73980: LD_VAR 0 2
73984: RET
// export function ComExitAll ( units ) ; var i ; begin
73985: LD_INT 0
73987: PPUSH
73988: PPUSH
// if not units then
73989: LD_VAR 0 1
73993: NOT
73994: IFFALSE 73998
// exit ;
73996: GO 74024
// for i in units do
73998: LD_ADDR_VAR 0 3
74002: PUSH
74003: LD_VAR 0 1
74007: PUSH
74008: FOR_IN
74009: IFFALSE 74022
// ComExit ( i ) ;
74011: LD_VAR 0 3
74015: PPUSH
74016: CALL 73902 0 1
74020: GO 74008
74022: POP
74023: POP
// end ;
74024: LD_VAR 0 2
74028: RET
// export function ResetHc ; begin
74029: LD_INT 0
74031: PPUSH
// InitHc ;
74032: CALL_OW 19
// hc_importance := 0 ;
74036: LD_ADDR_OWVAR 32
74040: PUSH
74041: LD_INT 0
74043: ST_TO_ADDR
// end ;
74044: LD_VAR 0 1
74048: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74049: LD_INT 0
74051: PPUSH
74052: PPUSH
74053: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74054: LD_ADDR_VAR 0 6
74058: PUSH
74059: LD_VAR 0 1
74063: PUSH
74064: LD_VAR 0 3
74068: PLUS
74069: PUSH
74070: LD_INT 2
74072: DIV
74073: ST_TO_ADDR
// if _x < 0 then
74074: LD_VAR 0 6
74078: PUSH
74079: LD_INT 0
74081: LESS
74082: IFFALSE 74099
// _x := _x * - 1 ;
74084: LD_ADDR_VAR 0 6
74088: PUSH
74089: LD_VAR 0 6
74093: PUSH
74094: LD_INT 1
74096: NEG
74097: MUL
74098: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74099: LD_ADDR_VAR 0 7
74103: PUSH
74104: LD_VAR 0 2
74108: PUSH
74109: LD_VAR 0 4
74113: PLUS
74114: PUSH
74115: LD_INT 2
74117: DIV
74118: ST_TO_ADDR
// if _y < 0 then
74119: LD_VAR 0 7
74123: PUSH
74124: LD_INT 0
74126: LESS
74127: IFFALSE 74144
// _y := _y * - 1 ;
74129: LD_ADDR_VAR 0 7
74133: PUSH
74134: LD_VAR 0 7
74138: PUSH
74139: LD_INT 1
74141: NEG
74142: MUL
74143: ST_TO_ADDR
// result := [ _x , _y ] ;
74144: LD_ADDR_VAR 0 5
74148: PUSH
74149: LD_VAR 0 6
74153: PUSH
74154: LD_VAR 0 7
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: ST_TO_ADDR
// end ;
74163: LD_VAR 0 5
74167: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74168: LD_INT 0
74170: PPUSH
74171: PPUSH
74172: PPUSH
74173: PPUSH
// task := GetTaskList ( unit ) ;
74174: LD_ADDR_VAR 0 7
74178: PUSH
74179: LD_VAR 0 1
74183: PPUSH
74184: CALL_OW 437
74188: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74189: LD_VAR 0 7
74193: NOT
74194: PUSH
74195: LD_VAR 0 1
74199: PPUSH
74200: LD_VAR 0 2
74204: PPUSH
74205: CALL_OW 308
74209: NOT
74210: AND
74211: IFFALSE 74215
// exit ;
74213: GO 74333
// if IsInArea ( unit , area ) then
74215: LD_VAR 0 1
74219: PPUSH
74220: LD_VAR 0 2
74224: PPUSH
74225: CALL_OW 308
74229: IFFALSE 74247
// begin ComMoveToArea ( unit , goAway ) ;
74231: LD_VAR 0 1
74235: PPUSH
74236: LD_VAR 0 3
74240: PPUSH
74241: CALL_OW 113
// exit ;
74245: GO 74333
// end ; if task [ 1 ] [ 1 ] <> M then
74247: LD_VAR 0 7
74251: PUSH
74252: LD_INT 1
74254: ARRAY
74255: PUSH
74256: LD_INT 1
74258: ARRAY
74259: PUSH
74260: LD_STRING M
74262: NONEQUAL
74263: IFFALSE 74267
// exit ;
74265: GO 74333
// x := task [ 1 ] [ 2 ] ;
74267: LD_ADDR_VAR 0 5
74271: PUSH
74272: LD_VAR 0 7
74276: PUSH
74277: LD_INT 1
74279: ARRAY
74280: PUSH
74281: LD_INT 2
74283: ARRAY
74284: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74285: LD_ADDR_VAR 0 6
74289: PUSH
74290: LD_VAR 0 7
74294: PUSH
74295: LD_INT 1
74297: ARRAY
74298: PUSH
74299: LD_INT 3
74301: ARRAY
74302: ST_TO_ADDR
// if InArea ( x , y , area ) then
74303: LD_VAR 0 5
74307: PPUSH
74308: LD_VAR 0 6
74312: PPUSH
74313: LD_VAR 0 2
74317: PPUSH
74318: CALL_OW 309
74322: IFFALSE 74333
// ComStop ( unit ) ;
74324: LD_VAR 0 1
74328: PPUSH
74329: CALL_OW 141
// end ;
74333: LD_VAR 0 4
74337: RET
// export function Abs ( value ) ; begin
74338: LD_INT 0
74340: PPUSH
// result := value ;
74341: LD_ADDR_VAR 0 2
74345: PUSH
74346: LD_VAR 0 1
74350: ST_TO_ADDR
// if value < 0 then
74351: LD_VAR 0 1
74355: PUSH
74356: LD_INT 0
74358: LESS
74359: IFFALSE 74376
// result := value * - 1 ;
74361: LD_ADDR_VAR 0 2
74365: PUSH
74366: LD_VAR 0 1
74370: PUSH
74371: LD_INT 1
74373: NEG
74374: MUL
74375: ST_TO_ADDR
// end ;
74376: LD_VAR 0 2
74380: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74381: LD_INT 0
74383: PPUSH
74384: PPUSH
74385: PPUSH
74386: PPUSH
74387: PPUSH
74388: PPUSH
74389: PPUSH
74390: PPUSH
// if not unit or not building then
74391: LD_VAR 0 1
74395: NOT
74396: PUSH
74397: LD_VAR 0 2
74401: NOT
74402: OR
74403: IFFALSE 74407
// exit ;
74405: GO 74633
// x := GetX ( building ) ;
74407: LD_ADDR_VAR 0 4
74411: PUSH
74412: LD_VAR 0 2
74416: PPUSH
74417: CALL_OW 250
74421: ST_TO_ADDR
// y := GetY ( building ) ;
74422: LD_ADDR_VAR 0 6
74426: PUSH
74427: LD_VAR 0 2
74431: PPUSH
74432: CALL_OW 251
74436: ST_TO_ADDR
// d := GetDir ( building ) ;
74437: LD_ADDR_VAR 0 8
74441: PUSH
74442: LD_VAR 0 2
74446: PPUSH
74447: CALL_OW 254
74451: ST_TO_ADDR
// r := 4 ;
74452: LD_ADDR_VAR 0 9
74456: PUSH
74457: LD_INT 4
74459: ST_TO_ADDR
// for i := 1 to 5 do
74460: LD_ADDR_VAR 0 10
74464: PUSH
74465: DOUBLE
74466: LD_INT 1
74468: DEC
74469: ST_TO_ADDR
74470: LD_INT 5
74472: PUSH
74473: FOR_TO
74474: IFFALSE 74631
// begin _x := ShiftX ( x , d , r + i ) ;
74476: LD_ADDR_VAR 0 5
74480: PUSH
74481: LD_VAR 0 4
74485: PPUSH
74486: LD_VAR 0 8
74490: PPUSH
74491: LD_VAR 0 9
74495: PUSH
74496: LD_VAR 0 10
74500: PLUS
74501: PPUSH
74502: CALL_OW 272
74506: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74507: LD_ADDR_VAR 0 7
74511: PUSH
74512: LD_VAR 0 6
74516: PPUSH
74517: LD_VAR 0 8
74521: PPUSH
74522: LD_VAR 0 9
74526: PUSH
74527: LD_VAR 0 10
74531: PLUS
74532: PPUSH
74533: CALL_OW 273
74537: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74538: LD_VAR 0 5
74542: PPUSH
74543: LD_VAR 0 7
74547: PPUSH
74548: CALL_OW 488
74552: PUSH
74553: LD_VAR 0 5
74557: PPUSH
74558: LD_VAR 0 7
74562: PPUSH
74563: CALL_OW 428
74567: PPUSH
74568: CALL_OW 247
74572: PUSH
74573: LD_INT 3
74575: PUSH
74576: LD_INT 2
74578: PUSH
74579: EMPTY
74580: LIST
74581: LIST
74582: IN
74583: NOT
74584: AND
74585: IFFALSE 74629
// begin ComMoveXY ( unit , _x , _y ) ;
74587: LD_VAR 0 1
74591: PPUSH
74592: LD_VAR 0 5
74596: PPUSH
74597: LD_VAR 0 7
74601: PPUSH
74602: CALL_OW 111
// result := [ _x , _y ] ;
74606: LD_ADDR_VAR 0 3
74610: PUSH
74611: LD_VAR 0 5
74615: PUSH
74616: LD_VAR 0 7
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: ST_TO_ADDR
// exit ;
74625: POP
74626: POP
74627: GO 74633
// end ; end ;
74629: GO 74473
74631: POP
74632: POP
// end ;
74633: LD_VAR 0 3
74637: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74638: LD_INT 0
74640: PPUSH
74641: PPUSH
74642: PPUSH
// result := 0 ;
74643: LD_ADDR_VAR 0 3
74647: PUSH
74648: LD_INT 0
74650: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74651: LD_VAR 0 1
74655: PUSH
74656: LD_INT 0
74658: LESS
74659: PUSH
74660: LD_VAR 0 1
74664: PUSH
74665: LD_INT 8
74667: GREATER
74668: OR
74669: PUSH
74670: LD_VAR 0 2
74674: PUSH
74675: LD_INT 0
74677: LESS
74678: OR
74679: PUSH
74680: LD_VAR 0 2
74684: PUSH
74685: LD_INT 8
74687: GREATER
74688: OR
74689: IFFALSE 74693
// exit ;
74691: GO 74768
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74693: LD_ADDR_VAR 0 4
74697: PUSH
74698: LD_INT 22
74700: PUSH
74701: LD_VAR 0 2
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PPUSH
74710: CALL_OW 69
74714: PUSH
74715: FOR_IN
74716: IFFALSE 74766
// begin un := UnitShoot ( i ) ;
74718: LD_ADDR_VAR 0 5
74722: PUSH
74723: LD_VAR 0 4
74727: PPUSH
74728: CALL_OW 504
74732: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74733: LD_VAR 0 5
74737: PPUSH
74738: CALL_OW 255
74742: PUSH
74743: LD_VAR 0 1
74747: EQUAL
74748: IFFALSE 74764
// begin result := un ;
74750: LD_ADDR_VAR 0 3
74754: PUSH
74755: LD_VAR 0 5
74759: ST_TO_ADDR
// exit ;
74760: POP
74761: POP
74762: GO 74768
// end ; end ;
74764: GO 74715
74766: POP
74767: POP
// end ;
74768: LD_VAR 0 3
74772: RET
// export function GetCargoBay ( units ) ; begin
74773: LD_INT 0
74775: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74776: LD_ADDR_VAR 0 2
74780: PUSH
74781: LD_VAR 0 1
74785: PPUSH
74786: LD_INT 2
74788: PUSH
74789: LD_INT 34
74791: PUSH
74792: LD_INT 12
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: PUSH
74799: LD_INT 34
74801: PUSH
74802: LD_INT 51
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: PUSH
74809: LD_INT 34
74811: PUSH
74812: LD_INT 32
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: PUSH
74819: LD_INT 34
74821: PUSH
74822: LD_EXP 49
74826: PUSH
74827: EMPTY
74828: LIST
74829: LIST
74830: PUSH
74831: EMPTY
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: PPUSH
74838: CALL_OW 72
74842: ST_TO_ADDR
// end ;
74843: LD_VAR 0 2
74847: RET
// export function Negate ( value ) ; begin
74848: LD_INT 0
74850: PPUSH
// result := not value ;
74851: LD_ADDR_VAR 0 2
74855: PUSH
74856: LD_VAR 0 1
74860: NOT
74861: ST_TO_ADDR
// end ;
74862: LD_VAR 0 2
74866: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74867: LD_INT 0
74869: PPUSH
// if x1 = x2 then
74870: LD_VAR 0 1
74874: PUSH
74875: LD_VAR 0 3
74879: EQUAL
74880: IFFALSE 74914
// begin if y1 > y2 then
74882: LD_VAR 0 2
74886: PUSH
74887: LD_VAR 0 4
74891: GREATER
74892: IFFALSE 74904
// result := 0 else
74894: LD_ADDR_VAR 0 5
74898: PUSH
74899: LD_INT 0
74901: ST_TO_ADDR
74902: GO 74912
// result := 3 ;
74904: LD_ADDR_VAR 0 5
74908: PUSH
74909: LD_INT 3
74911: ST_TO_ADDR
// exit ;
74912: GO 75000
// end ; if y1 = y2 then
74914: LD_VAR 0 2
74918: PUSH
74919: LD_VAR 0 4
74923: EQUAL
74924: IFFALSE 74958
// begin if x1 > x2 then
74926: LD_VAR 0 1
74930: PUSH
74931: LD_VAR 0 3
74935: GREATER
74936: IFFALSE 74948
// result := 1 else
74938: LD_ADDR_VAR 0 5
74942: PUSH
74943: LD_INT 1
74945: ST_TO_ADDR
74946: GO 74956
// result := 4 ;
74948: LD_ADDR_VAR 0 5
74952: PUSH
74953: LD_INT 4
74955: ST_TO_ADDR
// exit ;
74956: GO 75000
// end ; if x1 > x2 and y1 > y2 then
74958: LD_VAR 0 1
74962: PUSH
74963: LD_VAR 0 3
74967: GREATER
74968: PUSH
74969: LD_VAR 0 2
74973: PUSH
74974: LD_VAR 0 4
74978: GREATER
74979: AND
74980: IFFALSE 74992
// result := 2 else
74982: LD_ADDR_VAR 0 5
74986: PUSH
74987: LD_INT 2
74989: ST_TO_ADDR
74990: GO 75000
// result := 5 ;
74992: LD_ADDR_VAR 0 5
74996: PUSH
74997: LD_INT 5
74999: ST_TO_ADDR
// end ;
75000: LD_VAR 0 5
75004: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75005: LD_INT 0
75007: PPUSH
75008: PPUSH
// if not driver or not IsInUnit ( driver ) then
75009: LD_VAR 0 1
75013: NOT
75014: PUSH
75015: LD_VAR 0 1
75019: PPUSH
75020: CALL_OW 310
75024: NOT
75025: OR
75026: IFFALSE 75030
// exit ;
75028: GO 75120
// vehicle := IsInUnit ( driver ) ;
75030: LD_ADDR_VAR 0 3
75034: PUSH
75035: LD_VAR 0 1
75039: PPUSH
75040: CALL_OW 310
75044: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75045: LD_VAR 0 1
75049: PPUSH
75050: LD_STRING \
75052: PUSH
75053: LD_INT 0
75055: PUSH
75056: LD_INT 0
75058: PUSH
75059: LD_INT 0
75061: PUSH
75062: LD_INT 0
75064: PUSH
75065: LD_INT 0
75067: PUSH
75068: LD_INT 0
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: PUSH
75080: LD_STRING E
75082: PUSH
75083: LD_INT 0
75085: PUSH
75086: LD_INT 0
75088: PUSH
75089: LD_VAR 0 3
75093: PUSH
75094: LD_INT 0
75096: PUSH
75097: LD_INT 0
75099: PUSH
75100: LD_INT 0
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: LIST
75107: LIST
75108: LIST
75109: LIST
75110: LIST
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: PPUSH
75116: CALL_OW 446
// end ;
75120: LD_VAR 0 2
75124: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75125: LD_INT 0
75127: PPUSH
75128: PPUSH
// if not driver or not IsInUnit ( driver ) then
75129: LD_VAR 0 1
75133: NOT
75134: PUSH
75135: LD_VAR 0 1
75139: PPUSH
75140: CALL_OW 310
75144: NOT
75145: OR
75146: IFFALSE 75150
// exit ;
75148: GO 75240
// vehicle := IsInUnit ( driver ) ;
75150: LD_ADDR_VAR 0 3
75154: PUSH
75155: LD_VAR 0 1
75159: PPUSH
75160: CALL_OW 310
75164: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75165: LD_VAR 0 1
75169: PPUSH
75170: LD_STRING \
75172: PUSH
75173: LD_INT 0
75175: PUSH
75176: LD_INT 0
75178: PUSH
75179: LD_INT 0
75181: PUSH
75182: LD_INT 0
75184: PUSH
75185: LD_INT 0
75187: PUSH
75188: LD_INT 0
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: LIST
75195: LIST
75196: LIST
75197: LIST
75198: LIST
75199: PUSH
75200: LD_STRING E
75202: PUSH
75203: LD_INT 0
75205: PUSH
75206: LD_INT 0
75208: PUSH
75209: LD_VAR 0 3
75213: PUSH
75214: LD_INT 0
75216: PUSH
75217: LD_INT 0
75219: PUSH
75220: LD_INT 0
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: LIST
75231: PUSH
75232: EMPTY
75233: LIST
75234: LIST
75235: PPUSH
75236: CALL_OW 447
// end ;
75240: LD_VAR 0 2
75244: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75245: LD_INT 0
75247: PPUSH
75248: PPUSH
75249: PPUSH
// tmp := [ ] ;
75250: LD_ADDR_VAR 0 5
75254: PUSH
75255: EMPTY
75256: ST_TO_ADDR
// for i in units do
75257: LD_ADDR_VAR 0 4
75261: PUSH
75262: LD_VAR 0 1
75266: PUSH
75267: FOR_IN
75268: IFFALSE 75306
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75270: LD_ADDR_VAR 0 5
75274: PUSH
75275: LD_VAR 0 5
75279: PPUSH
75280: LD_VAR 0 5
75284: PUSH
75285: LD_INT 1
75287: PLUS
75288: PPUSH
75289: LD_VAR 0 4
75293: PPUSH
75294: CALL_OW 256
75298: PPUSH
75299: CALL_OW 2
75303: ST_TO_ADDR
75304: GO 75267
75306: POP
75307: POP
// if not tmp then
75308: LD_VAR 0 5
75312: NOT
75313: IFFALSE 75317
// exit ;
75315: GO 75365
// if asc then
75317: LD_VAR 0 2
75321: IFFALSE 75345
// result := SortListByListAsc ( units , tmp ) else
75323: LD_ADDR_VAR 0 3
75327: PUSH
75328: LD_VAR 0 1
75332: PPUSH
75333: LD_VAR 0 5
75337: PPUSH
75338: CALL_OW 76
75342: ST_TO_ADDR
75343: GO 75365
// result := SortListByListDesc ( units , tmp ) ;
75345: LD_ADDR_VAR 0 3
75349: PUSH
75350: LD_VAR 0 1
75354: PPUSH
75355: LD_VAR 0 5
75359: PPUSH
75360: CALL_OW 77
75364: ST_TO_ADDR
// end ;
75365: LD_VAR 0 3
75369: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75370: LD_INT 0
75372: PPUSH
75373: PPUSH
// task := GetTaskList ( mech ) ;
75374: LD_ADDR_VAR 0 4
75378: PUSH
75379: LD_VAR 0 1
75383: PPUSH
75384: CALL_OW 437
75388: ST_TO_ADDR
// if not task then
75389: LD_VAR 0 4
75393: NOT
75394: IFFALSE 75398
// exit ;
75396: GO 75440
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75398: LD_ADDR_VAR 0 3
75402: PUSH
75403: LD_VAR 0 4
75407: PUSH
75408: LD_INT 1
75410: ARRAY
75411: PUSH
75412: LD_INT 1
75414: ARRAY
75415: PUSH
75416: LD_STRING r
75418: EQUAL
75419: PUSH
75420: LD_VAR 0 4
75424: PUSH
75425: LD_INT 1
75427: ARRAY
75428: PUSH
75429: LD_INT 4
75431: ARRAY
75432: PUSH
75433: LD_VAR 0 2
75437: EQUAL
75438: AND
75439: ST_TO_ADDR
// end ;
75440: LD_VAR 0 3
75444: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75445: LD_INT 0
75447: PPUSH
// SetDir ( unit , d ) ;
75448: LD_VAR 0 1
75452: PPUSH
75453: LD_VAR 0 4
75457: PPUSH
75458: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75462: LD_VAR 0 1
75466: PPUSH
75467: LD_VAR 0 2
75471: PPUSH
75472: LD_VAR 0 3
75476: PPUSH
75477: LD_VAR 0 5
75481: PPUSH
75482: CALL_OW 48
// end ;
75486: LD_VAR 0 6
75490: RET
// export function ToNaturalNumber ( number ) ; begin
75491: LD_INT 0
75493: PPUSH
// result := number div 1 ;
75494: LD_ADDR_VAR 0 2
75498: PUSH
75499: LD_VAR 0 1
75503: PUSH
75504: LD_INT 1
75506: DIV
75507: ST_TO_ADDR
// if number < 0 then
75508: LD_VAR 0 1
75512: PUSH
75513: LD_INT 0
75515: LESS
75516: IFFALSE 75526
// result := 0 ;
75518: LD_ADDR_VAR 0 2
75522: PUSH
75523: LD_INT 0
75525: ST_TO_ADDR
// end ;
75526: LD_VAR 0 2
75530: RET
// export function SortByClass ( units , class ) ; var un ; begin
75531: LD_INT 0
75533: PPUSH
75534: PPUSH
// if not units or not class then
75535: LD_VAR 0 1
75539: NOT
75540: PUSH
75541: LD_VAR 0 2
75545: NOT
75546: OR
75547: IFFALSE 75551
// exit ;
75549: GO 75646
// result := [ ] ;
75551: LD_ADDR_VAR 0 3
75555: PUSH
75556: EMPTY
75557: ST_TO_ADDR
// for un in units do
75558: LD_ADDR_VAR 0 4
75562: PUSH
75563: LD_VAR 0 1
75567: PUSH
75568: FOR_IN
75569: IFFALSE 75644
// if GetClass ( un ) = class then
75571: LD_VAR 0 4
75575: PPUSH
75576: CALL_OW 257
75580: PUSH
75581: LD_VAR 0 2
75585: EQUAL
75586: IFFALSE 75613
// result := Insert ( result , 1 , un ) else
75588: LD_ADDR_VAR 0 3
75592: PUSH
75593: LD_VAR 0 3
75597: PPUSH
75598: LD_INT 1
75600: PPUSH
75601: LD_VAR 0 4
75605: PPUSH
75606: CALL_OW 2
75610: ST_TO_ADDR
75611: GO 75642
// result := Replace ( result , result + 1 , un ) ;
75613: LD_ADDR_VAR 0 3
75617: PUSH
75618: LD_VAR 0 3
75622: PPUSH
75623: LD_VAR 0 3
75627: PUSH
75628: LD_INT 1
75630: PLUS
75631: PPUSH
75632: LD_VAR 0 4
75636: PPUSH
75637: CALL_OW 1
75641: ST_TO_ADDR
75642: GO 75568
75644: POP
75645: POP
// end ;
75646: LD_VAR 0 3
75650: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75651: LD_INT 0
75653: PPUSH
75654: PPUSH
75655: PPUSH
75656: PPUSH
75657: PPUSH
75658: PPUSH
75659: PPUSH
// result := [ ] ;
75660: LD_ADDR_VAR 0 4
75664: PUSH
75665: EMPTY
75666: ST_TO_ADDR
// if x - r < 0 then
75667: LD_VAR 0 1
75671: PUSH
75672: LD_VAR 0 3
75676: MINUS
75677: PUSH
75678: LD_INT 0
75680: LESS
75681: IFFALSE 75693
// min_x := 0 else
75683: LD_ADDR_VAR 0 8
75687: PUSH
75688: LD_INT 0
75690: ST_TO_ADDR
75691: GO 75709
// min_x := x - r ;
75693: LD_ADDR_VAR 0 8
75697: PUSH
75698: LD_VAR 0 1
75702: PUSH
75703: LD_VAR 0 3
75707: MINUS
75708: ST_TO_ADDR
// if y - r < 0 then
75709: LD_VAR 0 2
75713: PUSH
75714: LD_VAR 0 3
75718: MINUS
75719: PUSH
75720: LD_INT 0
75722: LESS
75723: IFFALSE 75735
// min_y := 0 else
75725: LD_ADDR_VAR 0 7
75729: PUSH
75730: LD_INT 0
75732: ST_TO_ADDR
75733: GO 75751
// min_y := y - r ;
75735: LD_ADDR_VAR 0 7
75739: PUSH
75740: LD_VAR 0 2
75744: PUSH
75745: LD_VAR 0 3
75749: MINUS
75750: ST_TO_ADDR
// max_x := x + r ;
75751: LD_ADDR_VAR 0 9
75755: PUSH
75756: LD_VAR 0 1
75760: PUSH
75761: LD_VAR 0 3
75765: PLUS
75766: ST_TO_ADDR
// max_y := y + r ;
75767: LD_ADDR_VAR 0 10
75771: PUSH
75772: LD_VAR 0 2
75776: PUSH
75777: LD_VAR 0 3
75781: PLUS
75782: ST_TO_ADDR
// for _x = min_x to max_x do
75783: LD_ADDR_VAR 0 5
75787: PUSH
75788: DOUBLE
75789: LD_VAR 0 8
75793: DEC
75794: ST_TO_ADDR
75795: LD_VAR 0 9
75799: PUSH
75800: FOR_TO
75801: IFFALSE 75902
// for _y = min_y to max_y do
75803: LD_ADDR_VAR 0 6
75807: PUSH
75808: DOUBLE
75809: LD_VAR 0 7
75813: DEC
75814: ST_TO_ADDR
75815: LD_VAR 0 10
75819: PUSH
75820: FOR_TO
75821: IFFALSE 75898
// begin if not ValidHex ( _x , _y ) then
75823: LD_VAR 0 5
75827: PPUSH
75828: LD_VAR 0 6
75832: PPUSH
75833: CALL_OW 488
75837: NOT
75838: IFFALSE 75842
// continue ;
75840: GO 75820
// if GetResourceTypeXY ( _x , _y ) then
75842: LD_VAR 0 5
75846: PPUSH
75847: LD_VAR 0 6
75851: PPUSH
75852: CALL_OW 283
75856: IFFALSE 75896
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75858: LD_ADDR_VAR 0 4
75862: PUSH
75863: LD_VAR 0 4
75867: PPUSH
75868: LD_VAR 0 4
75872: PUSH
75873: LD_INT 1
75875: PLUS
75876: PPUSH
75877: LD_VAR 0 5
75881: PUSH
75882: LD_VAR 0 6
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: PPUSH
75891: CALL_OW 1
75895: ST_TO_ADDR
// end ;
75896: GO 75820
75898: POP
75899: POP
75900: GO 75800
75902: POP
75903: POP
// end ;
75904: LD_VAR 0 4
75908: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
75909: LD_INT 0
75911: PPUSH
75912: PPUSH
75913: PPUSH
75914: PPUSH
75915: PPUSH
75916: PPUSH
// if not units then
75917: LD_VAR 0 1
75921: NOT
75922: IFFALSE 75926
// exit ;
75924: GO 76327
// result := UnitFilter ( units , [ f_ok ] ) ;
75926: LD_ADDR_VAR 0 3
75930: PUSH
75931: LD_VAR 0 1
75935: PPUSH
75936: LD_INT 50
75938: PUSH
75939: EMPTY
75940: LIST
75941: PPUSH
75942: CALL_OW 72
75946: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75947: LD_ADDR_VAR 0 7
75951: PUSH
75952: LD_VAR 0 1
75956: PUSH
75957: LD_INT 1
75959: ARRAY
75960: PPUSH
75961: CALL_OW 255
75965: ST_TO_ADDR
// if not result then
75966: LD_VAR 0 3
75970: NOT
75971: IFFALSE 75975
// exit ;
75973: GO 76327
// for i in result do
75975: LD_ADDR_VAR 0 4
75979: PUSH
75980: LD_VAR 0 3
75984: PUSH
75985: FOR_IN
75986: IFFALSE 76325
// begin tag := GetTag ( i ) + 1 ;
75988: LD_ADDR_VAR 0 8
75992: PUSH
75993: LD_VAR 0 4
75997: PPUSH
75998: CALL_OW 110
76002: PUSH
76003: LD_INT 1
76005: PLUS
76006: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76007: LD_ADDR_VAR 0 6
76011: PUSH
76012: LD_VAR 0 4
76016: PPUSH
76017: CALL_OW 250
76021: PPUSH
76022: LD_VAR 0 4
76026: PPUSH
76027: CALL_OW 251
76031: PPUSH
76032: LD_INT 6
76034: PPUSH
76035: CALL 75651 0 3
76039: ST_TO_ADDR
// if cr then
76040: LD_VAR 0 6
76044: IFFALSE 76083
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76046: LD_VAR 0 4
76050: PPUSH
76051: LD_VAR 0 6
76055: PUSH
76056: LD_INT 1
76058: ARRAY
76059: PUSH
76060: LD_INT 1
76062: ARRAY
76063: PPUSH
76064: LD_VAR 0 6
76068: PUSH
76069: LD_INT 1
76071: ARRAY
76072: PUSH
76073: LD_INT 2
76075: ARRAY
76076: PPUSH
76077: CALL_OW 116
76081: GO 76323
// if path > tag then
76083: LD_VAR 0 2
76087: PUSH
76088: LD_VAR 0 8
76092: GREATER
76093: IFFALSE 76271
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
76095: LD_ADDR_VAR 0 5
76099: PUSH
76100: LD_INT 81
76102: PUSH
76103: LD_VAR 0 7
76107: PUSH
76108: EMPTY
76109: LIST
76110: LIST
76111: PUSH
76112: LD_INT 91
76114: PUSH
76115: LD_VAR 0 4
76119: PUSH
76120: LD_INT 12
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: LIST
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: PPUSH
76132: CALL_OW 69
76136: ST_TO_ADDR
// if enemy then
76137: LD_VAR 0 5
76141: IFFALSE 76169
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76143: LD_VAR 0 4
76147: PPUSH
76148: LD_VAR 0 5
76152: PPUSH
76153: LD_VAR 0 4
76157: PPUSH
76158: CALL_OW 74
76162: PPUSH
76163: CALL_OW 115
76167: GO 76269
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76169: LD_VAR 0 4
76173: PPUSH
76174: LD_VAR 0 2
76178: PUSH
76179: LD_VAR 0 8
76183: ARRAY
76184: PUSH
76185: LD_INT 1
76187: ARRAY
76188: PPUSH
76189: LD_VAR 0 2
76193: PUSH
76194: LD_VAR 0 8
76198: ARRAY
76199: PUSH
76200: LD_INT 2
76202: ARRAY
76203: PPUSH
76204: CALL_OW 297
76208: PUSH
76209: LD_INT 6
76211: GREATER
76212: IFFALSE 76255
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76214: LD_VAR 0 4
76218: PPUSH
76219: LD_VAR 0 2
76223: PUSH
76224: LD_VAR 0 8
76228: ARRAY
76229: PUSH
76230: LD_INT 1
76232: ARRAY
76233: PPUSH
76234: LD_VAR 0 2
76238: PUSH
76239: LD_VAR 0 8
76243: ARRAY
76244: PUSH
76245: LD_INT 2
76247: ARRAY
76248: PPUSH
76249: CALL_OW 114
76253: GO 76269
// SetTag ( i , tag ) ;
76255: LD_VAR 0 4
76259: PPUSH
76260: LD_VAR 0 8
76264: PPUSH
76265: CALL_OW 109
// end else
76269: GO 76323
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76271: LD_ADDR_VAR 0 5
76275: PUSH
76276: LD_INT 81
76278: PUSH
76279: LD_VAR 0 7
76283: PUSH
76284: EMPTY
76285: LIST
76286: LIST
76287: PPUSH
76288: CALL_OW 69
76292: ST_TO_ADDR
// if enemy then
76293: LD_VAR 0 5
76297: IFFALSE 76323
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76299: LD_VAR 0 4
76303: PPUSH
76304: LD_VAR 0 5
76308: PPUSH
76309: LD_VAR 0 4
76313: PPUSH
76314: CALL_OW 74
76318: PPUSH
76319: CALL_OW 115
// end ; end ;
76323: GO 75985
76325: POP
76326: POP
// end ; end_of_file
76327: LD_VAR 0 3
76331: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76332: LD_VAR 0 1
76336: PUSH
76337: LD_INT 200
76339: DOUBLE
76340: GREATEREQUAL
76341: IFFALSE 76349
76343: LD_INT 299
76345: DOUBLE
76346: LESSEQUAL
76347: IFTRUE 76351
76349: GO 76383
76351: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76352: LD_VAR 0 1
76356: PPUSH
76357: LD_VAR 0 2
76361: PPUSH
76362: LD_VAR 0 3
76366: PPUSH
76367: LD_VAR 0 4
76371: PPUSH
76372: LD_VAR 0 5
76376: PPUSH
76377: CALL 32894 0 5
76381: GO 76460
76383: LD_INT 300
76385: DOUBLE
76386: GREATEREQUAL
76387: IFFALSE 76395
76389: LD_INT 399
76391: DOUBLE
76392: LESSEQUAL
76393: IFTRUE 76397
76395: GO 76459
76397: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76398: LD_VAR 0 1
76402: PPUSH
76403: LD_VAR 0 2
76407: PPUSH
76408: LD_VAR 0 3
76412: PPUSH
76413: LD_VAR 0 4
76417: PPUSH
76418: LD_VAR 0 5
76422: PPUSH
76423: LD_VAR 0 6
76427: PPUSH
76428: LD_VAR 0 7
76432: PPUSH
76433: LD_VAR 0 8
76437: PPUSH
76438: LD_VAR 0 9
76442: PPUSH
76443: LD_VAR 0 10
76447: PPUSH
76448: LD_VAR 0 11
76452: PPUSH
76453: CALL 30782 0 11
76457: GO 76460
76459: POP
// end ;
76460: PPOPN 11
76462: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76463: LD_VAR 0 1
76467: PPUSH
76468: LD_VAR 0 2
76472: PPUSH
76473: LD_VAR 0 3
76477: PPUSH
76478: LD_VAR 0 4
76482: PPUSH
76483: LD_VAR 0 5
76487: PPUSH
76488: CALL 32876 0 5
// end ; end_of_file
76492: PPOPN 5
76494: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76495: LD_VAR 0 1
76499: PPUSH
76500: LD_VAR 0 2
76504: PPUSH
76505: LD_VAR 0 3
76509: PPUSH
76510: LD_VAR 0 4
76514: PPUSH
76515: LD_VAR 0 5
76519: PPUSH
76520: LD_VAR 0 6
76524: PPUSH
76525: CALL 19590 0 6
// end ;
76529: PPOPN 6
76531: END
