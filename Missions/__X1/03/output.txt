// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// PrepareNature ;
   8: CALL 534 0 0
// PrepareArabian ;
  12: CALL 917 0 0
// PrepareAmerican ;
  16: CALL 3065 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 3967 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , americanHasEscaped , deadCounter , farmerOnMap , workshopBuilded , retreatAllowed , allowConvoys , farmerCrates , farmerRequestedCrates , farmerCratesCounter ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := true ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 1
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// deadCounter := 0 ;
  57: LD_ADDR_EXP 8
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// gameStarted := false ;
  65: LD_ADDR_EXP 3
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// farmerBaseReady := false ;
  73: LD_ADDR_EXP 4
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// americanBaseSpoted := false ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseCaptured := false ;
  89: LD_ADDR_EXP 6
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanHasEscaped := false ;
  97: LD_ADDR_EXP 7
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// farmerOnMap := true ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 14
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := 3 3$00 ;
 153: LD_ADDR_EXP 15
 157: PUSH
 158: LD_INT 6300
 160: ST_TO_ADDR
// end ; end_of_file
 161: LD_VAR 0 1
 165: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
// if exist_mode then
 170: LD_VAR 0 2
 174: IFFALSE 199
// unit := CreateCharacter ( prefix & ident ) else
 176: LD_ADDR_VAR 0 5
 180: PUSH
 181: LD_VAR 0 3
 185: PUSH
 186: LD_VAR 0 1
 190: STR
 191: PPUSH
 192: CALL_OW 34
 196: ST_TO_ADDR
 197: GO 214
// unit := NewCharacter ( ident ) ;
 199: LD_ADDR_VAR 0 5
 203: PUSH
 204: LD_VAR 0 1
 208: PPUSH
 209: CALL_OW 25
 213: ST_TO_ADDR
// result := unit ;
 214: LD_ADDR_VAR 0 4
 218: PUSH
 219: LD_VAR 0 5
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 4
 228: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 229: LD_INT 0
 231: PPUSH
// uc_side := side ;
 232: LD_ADDR_OWVAR 20
 236: PUSH
 237: LD_VAR 0 1
 241: ST_TO_ADDR
// uc_nation := nation ;
 242: LD_ADDR_OWVAR 21
 246: PUSH
 247: LD_VAR 0 2
 251: ST_TO_ADDR
// vc_chassis := chassis ;
 252: LD_ADDR_OWVAR 37
 256: PUSH
 257: LD_VAR 0 3
 261: ST_TO_ADDR
// vc_engine := engine ;
 262: LD_ADDR_OWVAR 39
 266: PUSH
 267: LD_VAR 0 4
 271: ST_TO_ADDR
// vc_control := control ;
 272: LD_ADDR_OWVAR 38
 276: PUSH
 277: LD_VAR 0 5
 281: ST_TO_ADDR
// vc_weapon := weapon ;
 282: LD_ADDR_OWVAR 40
 286: PUSH
 287: LD_VAR 0 6
 291: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 292: LD_ADDR_OWVAR 41
 296: PUSH
 297: LD_VAR 0 7
 301: ST_TO_ADDR
// result := CreateVehicle ;
 302: LD_ADDR_VAR 0 8
 306: PUSH
 307: CALL_OW 45
 311: ST_TO_ADDR
// end ;
 312: LD_VAR 0 8
 316: RET
// export function SayX ( units , ident ) ; var i ; begin
 317: LD_INT 0
 319: PPUSH
 320: PPUSH
// result := false ;
 321: LD_ADDR_VAR 0 3
 325: PUSH
 326: LD_INT 0
 328: ST_TO_ADDR
// if not units then
 329: LD_VAR 0 1
 333: NOT
 334: IFFALSE 338
// exit ;
 336: GO 392
// for i in units do
 338: LD_ADDR_VAR 0 4
 342: PUSH
 343: LD_VAR 0 1
 347: PUSH
 348: FOR_IN
 349: IFFALSE 390
// if IsOk ( i ) then
 351: LD_VAR 0 4
 355: PPUSH
 356: CALL_OW 302
 360: IFFALSE 388
// begin Say ( i , ident ) ;
 362: LD_VAR 0 4
 366: PPUSH
 367: LD_VAR 0 2
 371: PPUSH
 372: CALL_OW 88
// result := i ;
 376: LD_ADDR_VAR 0 3
 380: PUSH
 381: LD_VAR 0 4
 385: ST_TO_ADDR
// break ;
 386: GO 390
// end ;
 388: GO 348
 390: POP
 391: POP
// end ;
 392: LD_VAR 0 3
 396: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 397: LD_INT 0
 399: PPUSH
 400: PPUSH
// InitUc ;
 401: CALL_OW 18
// InitHc ;
 405: CALL_OW 19
// uc_side := 0 ;
 409: LD_ADDR_OWVAR 20
 413: PUSH
 414: LD_INT 0
 416: ST_TO_ADDR
// uc_nation := 0 ;
 417: LD_ADDR_OWVAR 21
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// for i = 1 to amount do
 425: LD_ADDR_VAR 0 4
 429: PUSH
 430: DOUBLE
 431: LD_INT 1
 433: DEC
 434: ST_TO_ADDR
 435: LD_VAR 0 2
 439: PUSH
 440: FOR_TO
 441: IFFALSE 523
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 443: LD_ADDR_OWVAR 29
 447: PUSH
 448: LD_INT 9
 450: PPUSH
 451: LD_INT 12
 453: PPUSH
 454: CALL_OW 12
 458: PUSH
 459: LD_INT 9
 461: PPUSH
 462: LD_INT 12
 464: PPUSH
 465: CALL_OW 12
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 474: LD_ADDR_OWVAR 35
 478: PUSH
 479: LD_INT 1
 481: NEG
 482: PPUSH
 483: LD_INT 1
 485: PPUSH
 486: CALL_OW 12
 490: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 491: LD_INT 0
 493: PPUSH
 494: LD_INT 12
 496: PPUSH
 497: LD_INT 1
 499: PPUSH
 500: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 504: CALL_OW 44
 508: PPUSH
 509: LD_VAR 0 1
 513: PPUSH
 514: LD_INT 0
 516: PPUSH
 517: CALL_OW 49
// end ;
 521: GO 440
 523: POP
 524: POP
// InitHc ;
 525: CALL_OW 19
// end ;
 529: LD_VAR 0 3
 533: RET
// export function PrepareNature ; var i ; begin
 534: LD_INT 0
 536: PPUSH
 537: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 538: LD_INT 2
 540: PPUSH
 541: LD_INT 4
 543: PUSH
 544: LD_INT 4
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PUSH
 555: LD_OWVAR 67
 559: ARRAY
 560: PPUSH
 561: CALL 397 0 2
// for i := 1 to 3 do
 565: LD_ADDR_VAR 0 2
 569: PUSH
 570: DOUBLE
 571: LD_INT 1
 573: DEC
 574: ST_TO_ADDR
 575: LD_INT 3
 577: PUSH
 578: FOR_TO
 579: IFFALSE 614
// begin hc_class := 21 ;
 581: LD_ADDR_OWVAR 28
 585: PUSH
 586: LD_INT 21
 588: ST_TO_ADDR
// hc_gallery :=  ;
 589: LD_ADDR_OWVAR 33
 593: PUSH
 594: LD_STRING 
 596: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 597: CALL_OW 44
 601: PPUSH
 602: LD_INT 2
 604: PPUSH
 605: LD_INT 0
 607: PPUSH
 608: CALL_OW 49
// end ;
 612: GO 578
 614: POP
 615: POP
// for i := 1 to 2 do
 616: LD_ADDR_VAR 0 2
 620: PUSH
 621: DOUBLE
 622: LD_INT 1
 624: DEC
 625: ST_TO_ADDR
 626: LD_INT 2
 628: PUSH
 629: FOR_TO
 630: IFFALSE 665
// begin hc_class := 18 ;
 632: LD_ADDR_OWVAR 28
 636: PUSH
 637: LD_INT 18
 639: ST_TO_ADDR
// hc_gallery :=  ;
 640: LD_ADDR_OWVAR 33
 644: PUSH
 645: LD_STRING 
 647: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 648: CALL_OW 44
 652: PPUSH
 653: LD_INT 2
 655: PPUSH
 656: LD_INT 0
 658: PPUSH
 659: CALL_OW 49
// end ;
 663: GO 629
 665: POP
 666: POP
// for i := 1 to 2 do
 667: LD_ADDR_VAR 0 2
 671: PUSH
 672: DOUBLE
 673: LD_INT 1
 675: DEC
 676: ST_TO_ADDR
 677: LD_INT 2
 679: PUSH
 680: FOR_TO
 681: IFFALSE 716
// begin hc_class := 13 ;
 683: LD_ADDR_OWVAR 28
 687: PUSH
 688: LD_INT 13
 690: ST_TO_ADDR
// hc_gallery :=  ;
 691: LD_ADDR_OWVAR 33
 695: PUSH
 696: LD_STRING 
 698: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 699: CALL_OW 44
 703: PPUSH
 704: LD_INT 2
 706: PPUSH
 707: LD_INT 0
 709: PPUSH
 710: CALL_OW 49
// end ;
 714: GO 680
 716: POP
 717: POP
// end ;
 718: LD_VAR 0 1
 722: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 723: LD_INT 0
 725: PPUSH
 726: PPUSH
 727: PPUSH
// if not observer or not unit then
 728: LD_VAR 0 1
 732: NOT
 733: PUSH
 734: LD_VAR 0 2
 738: NOT
 739: OR
 740: IFFALSE 744
// exit ;
 742: GO 792
// if not See ( GetSide ( observer ) , unit ) then
 744: LD_VAR 0 1
 748: PPUSH
 749: CALL_OW 255
 753: PPUSH
 754: LD_VAR 0 2
 758: PPUSH
 759: CALL_OW 292
 763: NOT
 764: IFFALSE 768
// exit ;
 766: GO 792
// result := GetDistUnits ( observer , unit ) < 12 ;
 768: LD_ADDR_VAR 0 3
 772: PUSH
 773: LD_VAR 0 1
 777: PPUSH
 778: LD_VAR 0 2
 782: PPUSH
 783: CALL_OW 296
 787: PUSH
 788: LD_INT 12
 790: LESS
 791: ST_TO_ADDR
// end ;
 792: LD_VAR 0 3
 796: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 797: LD_INT 0
 799: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 800: LD_VAR 0 2
 804: PUSH
 805: LD_INT 1
 807: ARRAY
 808: PPUSH
 809: LD_VAR 0 2
 813: PUSH
 814: LD_INT 2
 816: ARRAY
 817: PPUSH
 818: CALL_OW 488
 822: PUSH
 823: LD_VAR 0 2
 827: PUSH
 828: LD_INT 1
 830: ARRAY
 831: PPUSH
 832: LD_VAR 0 2
 836: PUSH
 837: LD_INT 2
 839: ARRAY
 840: PPUSH
 841: CALL_OW 428
 845: PUSH
 846: LD_INT 0
 848: EQUAL
 849: AND
 850: IFFALSE 884
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 852: LD_VAR 0 1
 856: PPUSH
 857: LD_VAR 0 2
 861: PUSH
 862: LD_INT 1
 864: ARRAY
 865: PPUSH
 866: LD_VAR 0 2
 870: PUSH
 871: LD_INT 2
 873: ARRAY
 874: PPUSH
 875: LD_VAR 0 3
 879: PPUSH
 880: CALL_OW 48
// end ;
 884: LD_VAR 0 4
 888: RET
// export function Video ( mode ) ; begin
 889: LD_INT 0
 891: PPUSH
// ingame_video = mode ;
 892: LD_ADDR_OWVAR 52
 896: PUSH
 897: LD_VAR 0 1
 901: ST_TO_ADDR
// interface_hidden = mode ;
 902: LD_ADDR_OWVAR 54
 906: PUSH
 907: LD_VAR 0 1
 911: ST_TO_ADDR
// end ; end_of_file
 912: LD_VAR 0 2
 916: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export function PrepareArabian ; var i , un , tmp ; begin
 917: LD_INT 0
 919: PPUSH
 920: PPUSH
 921: PPUSH
 922: PPUSH
// uc_side := 5 ;
 923: LD_ADDR_OWVAR 20
 927: PUSH
 928: LD_INT 5
 930: ST_TO_ADDR
// uc_nation := 2 ;
 931: LD_ADDR_OWVAR 21
 935: PUSH
 936: LD_INT 2
 938: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
 939: LD_INT 5
 941: PPUSH
 942: CALL_OW 274
 946: PPUSH
 947: LD_INT 1
 949: PPUSH
 950: LD_INT 45
 952: PPUSH
 953: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
 957: LD_ADDR_EXP 24
 961: PUSH
 962: LD_STRING Farmer
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: LD_STRING 
 970: PPUSH
 971: CALL 166 0 3
 975: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 976: LD_ADDR_EXP 25
 980: PUSH
 981: LD_STRING Omar
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: LD_STRING 
 989: PPUSH
 990: CALL 166 0 3
 994: ST_TO_ADDR
// omarSquad := [ ] ;
 995: LD_ADDR_EXP 27
 999: PUSH
1000: EMPTY
1001: ST_TO_ADDR
// heikeSquad := [ ] ;
1002: LD_ADDR_EXP 28
1006: PUSH
1007: EMPTY
1008: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1009: LD_ADDR_EXP 29
1013: PUSH
1014: EMPTY
1015: ST_TO_ADDR
// for i := 1 to 5 do
1016: LD_ADDR_VAR 0 2
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_INT 5
1028: PUSH
1029: FOR_TO
1030: IFFALSE 1188
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1032: LD_INT 0
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 1
1046: PUSH
1047: LD_INT 1
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_VAR 0 2
1061: ARRAY
1062: PPUSH
1063: LD_INT 3
1065: PPUSH
1066: CALL_OW 380
// un := CreateHuman ;
1070: LD_ADDR_VAR 0 3
1074: PUSH
1075: CALL_OW 44
1079: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1080: LD_ADDR_EXP 27
1084: PUSH
1085: LD_EXP 27
1089: PUSH
1090: LD_VAR 0 3
1094: UNION
1095: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1096: LD_VAR 0 3
1100: PPUSH
1101: LD_INT 87
1103: PUSH
1104: LD_INT 30
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 91
1113: PUSH
1114: LD_INT 32
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 82
1123: PUSH
1124: LD_INT 15
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: LD_INT 79
1133: PUSH
1134: LD_INT 14
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 82
1143: PUSH
1144: LD_INT 13
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_VAR 0 2
1162: ARRAY
1163: PPUSH
1164: LD_INT 0
1166: PPUSH
1167: CALL 797 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1171: LD_VAR 0 3
1175: PPUSH
1176: LD_INT 93
1178: PPUSH
1179: LD_INT 21
1181: PPUSH
1182: CALL_OW 118
// end ;
1186: GO 1029
1188: POP
1189: POP
// uc_side := 2 ;
1190: LD_ADDR_OWVAR 20
1194: PUSH
1195: LD_INT 2
1197: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1198: LD_ADDR_EXP 16
1202: PUSH
1203: LD_STRING Heike
1205: PPUSH
1206: LD_EXP 1
1210: NOT
1211: PPUSH
1212: LD_EXP 2
1216: PPUSH
1217: CALL 166 0 3
1221: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1222: LD_ADDR_EXP 20
1226: PUSH
1227: LD_STRING Aviradze
1229: PPUSH
1230: LD_EXP 1
1234: NOT
1235: PPUSH
1236: LD_EXP 2
1240: PPUSH
1241: CALL 166 0 3
1245: ST_TO_ADDR
// tmp := [ ] ;
1246: LD_ADDR_VAR 0 4
1250: PUSH
1251: EMPTY
1252: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1253: LD_ADDR_EXP 17
1257: PUSH
1258: LD_STRING Givi
1260: PPUSH
1261: LD_EXP 1
1265: NOT
1266: PPUSH
1267: LD_EXP 2
1271: PPUSH
1272: CALL 166 0 3
1276: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1277: LD_ADDR_EXP 18
1281: PUSH
1282: LD_STRING Mike
1284: PPUSH
1285: LD_EXP 1
1289: NOT
1290: PPUSH
1291: LD_EXP 2
1295: PPUSH
1296: CALL 166 0 3
1300: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1301: LD_ADDR_EXP 19
1305: PUSH
1306: LD_STRING Kamil
1308: PPUSH
1309: LD_EXP 1
1313: NOT
1314: PPUSH
1315: LD_EXP 2
1319: PPUSH
1320: CALL 166 0 3
1324: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1325: LD_ADDR_EXP 21
1329: PUSH
1330: LD_STRING Kaia
1332: PPUSH
1333: LD_EXP 1
1337: NOT
1338: PPUSH
1339: LD_EXP 2
1343: PPUSH
1344: CALL 166 0 3
1348: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1349: LD_ADDR_EXP 22
1353: PUSH
1354: LD_STRING Sophia
1356: PPUSH
1357: LD_EXP 1
1361: NOT
1362: PPUSH
1363: LD_EXP 2
1367: PPUSH
1368: CALL 166 0 3
1372: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1373: LD_ADDR_EXP 23
1377: PUSH
1378: LD_STRING Markov
1380: PPUSH
1381: LD_EXP 1
1385: NOT
1386: PPUSH
1387: LD_EXP 2
1391: PPUSH
1392: CALL 166 0 3
1396: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1397: LD_ADDR_EXP 29
1401: PUSH
1402: LD_STRING 02_others
1404: PPUSH
1405: CALL_OW 31
1409: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1410: LD_ADDR_VAR 0 4
1414: PUSH
1415: LD_EXP 18
1419: PUSH
1420: LD_EXP 19
1424: PUSH
1425: LD_EXP 21
1429: PUSH
1430: LD_EXP 22
1434: PUSH
1435: LD_EXP 23
1439: PUSH
1440: LD_EXP 17
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: PUSH
1453: LD_EXP 29
1457: ADD
1458: PUSH
1459: LD_INT 0
1461: DIFF
1462: ST_TO_ADDR
// heikeSquad := tmp ;
1463: LD_ADDR_EXP 28
1467: PUSH
1468: LD_VAR 0 4
1472: ST_TO_ADDR
// uc_nation := 0 ;
1473: LD_ADDR_OWVAR 21
1477: PUSH
1478: LD_INT 0
1480: ST_TO_ADDR
// hc_class := class_apeman ;
1481: LD_ADDR_OWVAR 28
1485: PUSH
1486: LD_INT 12
1488: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1489: LD_ADDR_OWVAR 31
1493: PUSH
1494: LD_INT 0
1496: PUSH
1497: LD_INT 0
1499: PUSH
1500: LD_INT 0
1502: PUSH
1503: LD_INT 0
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: ST_TO_ADDR
// hc_gallery :=  ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING 
1519: ST_TO_ADDR
// hc_name :=  ;
1520: LD_ADDR_OWVAR 26
1524: PUSH
1525: LD_STRING 
1527: ST_TO_ADDR
// tmp := tmp union CreateHuman ;
1528: LD_ADDR_VAR 0 4
1532: PUSH
1533: LD_VAR 0 4
1537: PUSH
1538: CALL_OW 44
1542: UNION
1543: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1544: LD_EXP 16
1548: PPUSH
1549: LD_INT 92
1551: PPUSH
1552: LD_INT 17
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1562: LD_EXP 24
1566: PPUSH
1567: LD_INT 95
1569: PPUSH
1570: LD_INT 19
1572: PPUSH
1573: LD_INT 0
1575: PPUSH
1576: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1580: LD_EXP 25
1584: PPUSH
1585: LD_INT 89
1587: PPUSH
1588: LD_INT 25
1590: PPUSH
1591: LD_INT 0
1593: PPUSH
1594: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1598: LD_EXP 20
1602: PPUSH
1603: LD_INT 92
1605: PPUSH
1606: LD_INT 27
1608: PPUSH
1609: LD_INT 0
1611: PPUSH
1612: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1616: LD_EXP 25
1620: PPUSH
1621: LD_EXP 20
1625: PPUSH
1626: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1630: LD_EXP 20
1634: PPUSH
1635: LD_EXP 25
1639: PPUSH
1640: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1644: LD_EXP 16
1648: PUSH
1649: LD_EXP 24
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: PPUSH
1658: LD_EXP 25
1662: PPUSH
1663: CALL_OW 119
// if tmp then
1667: LD_VAR 0 4
1671: IFFALSE 1725
// for i in tmp do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: LD_VAR 0 4
1682: PUSH
1683: FOR_IN
1684: IFFALSE 1723
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1686: LD_VAR 0 2
1690: PPUSH
1691: LD_INT 94
1693: PPUSH
1694: LD_INT 14
1696: PPUSH
1697: LD_INT 4
1699: PPUSH
1700: LD_INT 0
1702: PPUSH
1703: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1707: LD_VAR 0 2
1711: PPUSH
1712: LD_EXP 16
1716: PPUSH
1717: CALL_OW 119
// end ;
1721: GO 1683
1723: POP
1724: POP
// farmerSquad := [ ] ;
1725: LD_ADDR_EXP 26
1729: PUSH
1730: EMPTY
1731: ST_TO_ADDR
// uc_side := 5 ;
1732: LD_ADDR_OWVAR 20
1736: PUSH
1737: LD_INT 5
1739: ST_TO_ADDR
// uc_nation := 2 ;
1740: LD_ADDR_OWVAR 21
1744: PUSH
1745: LD_INT 2
1747: ST_TO_ADDR
// for i := 1 to 4 do
1748: LD_ADDR_VAR 0 2
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 4
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1840
// begin PrepareHuman ( false , 1 , 2 ) ;
1764: LD_INT 0
1766: PPUSH
1767: LD_INT 1
1769: PPUSH
1770: LD_INT 2
1772: PPUSH
1773: CALL_OW 380
// un := CreateHuman ;
1777: LD_ADDR_VAR 0 3
1781: PUSH
1782: CALL_OW 44
1786: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1787: LD_VAR 0 3
1791: PPUSH
1792: LD_INT 102
1794: PPUSH
1795: LD_INT 27
1797: PPUSH
1798: LD_INT 4
1800: PPUSH
1801: LD_INT 0
1803: PPUSH
1804: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1808: LD_ADDR_EXP 26
1812: PUSH
1813: LD_EXP 26
1817: PUSH
1818: LD_VAR 0 3
1822: UNION
1823: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1824: LD_VAR 0 3
1828: PPUSH
1829: LD_EXP 25
1833: PPUSH
1834: CALL_OW 119
// end ;
1838: GO 1761
1840: POP
1841: POP
// PrepareHuman ( false , 2 , 2 ) ;
1842: LD_INT 0
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: LD_INT 2
1850: PPUSH
1851: CALL_OW 380
// un := CreateHuman ;
1855: LD_ADDR_VAR 0 3
1859: PUSH
1860: CALL_OW 44
1864: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1865: LD_VAR 0 3
1869: PPUSH
1870: LD_INT 108
1872: PPUSH
1873: LD_INT 62
1875: PPUSH
1876: LD_INT 2
1878: PPUSH
1879: LD_INT 0
1881: PPUSH
1882: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1886: LD_ADDR_EXP 26
1890: PUSH
1891: LD_EXP 26
1895: PUSH
1896: LD_VAR 0 3
1900: UNION
1901: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1902: LD_VAR 0 3
1906: PPUSH
1907: LD_EXP 25
1911: PPUSH
1912: CALL_OW 119
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
1916: LD_INT 109
1918: PPUSH
1919: LD_INT 63
1921: PPUSH
1922: LD_INT 2
1924: PPUSH
1925: LD_INT 15
1927: NEG
1928: PPUSH
1929: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
1933: LD_INT 109
1935: PPUSH
1936: LD_INT 63
1938: PPUSH
1939: LD_INT 2
1941: PPUSH
1942: CALL_OW 331
// end ;
1946: LD_VAR 0 1
1950: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
1951: LD_EXP 25
1955: PUSH
1956: LD_EXP 27
1960: ADD
1961: PPUSH
1962: LD_INT 95
1964: PUSH
1965: LD_INT 3
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PPUSH
1972: CALL_OW 72
1976: IFFALSE 2032
1978: GO 1980
1980: DISABLE
1981: LD_INT 0
1983: PPUSH
// begin enable ;
1984: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
1985: LD_ADDR_VAR 0 1
1989: PUSH
1990: LD_EXP 25
1994: PUSH
1995: LD_EXP 27
1999: ADD
2000: PPUSH
2001: LD_INT 95
2003: PUSH
2004: LD_INT 3
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PPUSH
2011: CALL_OW 72
2015: PUSH
2016: FOR_IN
2017: IFFALSE 2030
// RemoveUnit ( i ) ;
2019: LD_VAR 0 1
2023: PPUSH
2024: CALL_OW 64
2028: GO 2016
2030: POP
2031: POP
// end ;
2032: PPOPN 1
2034: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2035: LD_EXP 3
2039: PUSH
2040: LD_EXP 24
2044: PPUSH
2045: LD_INT 4
2047: PPUSH
2048: CALL_OW 308
2052: AND
2053: IFFALSE 2836
2055: GO 2057
2057: DISABLE
2058: LD_INT 0
2060: PPUSH
2061: PPUSH
2062: PPUSH
2063: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2064: LD_EXP 24
2068: PPUSH
2069: LD_INT 110
2071: PPUSH
2072: LD_INT 60
2074: PPUSH
2075: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2079: LD_EXP 24
2083: PPUSH
2084: LD_INT 110
2086: PPUSH
2087: LD_INT 61
2089: PPUSH
2090: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2094: LD_ADDR_VAR 0 2
2098: PUSH
2099: LD_EXP 26
2103: PPUSH
2104: LD_INT 25
2106: PUSH
2107: LD_INT 1
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PPUSH
2114: CALL_OW 72
2118: ST_TO_ADDR
// if tmp then
2119: LD_VAR 0 2
2123: IFFALSE 2217
// begin for i := 1 to 2 do
2125: LD_ADDR_VAR 0 1
2129: PUSH
2130: DOUBLE
2131: LD_INT 1
2133: DEC
2134: ST_TO_ADDR
2135: LD_INT 2
2137: PUSH
2138: FOR_TO
2139: IFFALSE 2215
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2141: LD_VAR 0 2
2145: PUSH
2146: LD_VAR 0 1
2150: ARRAY
2151: PPUSH
2152: LD_INT 5
2154: PPUSH
2155: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2159: LD_VAR 0 2
2163: PUSH
2164: LD_VAR 0 1
2168: ARRAY
2169: PPUSH
2170: LD_INT 2
2172: PPUSH
2173: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2177: LD_VAR 0 2
2181: PUSH
2182: LD_VAR 0 1
2186: ARRAY
2187: PPUSH
2188: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2192: LD_VAR 0 2
2196: PUSH
2197: LD_VAR 0 1
2201: ARRAY
2202: PPUSH
2203: LD_INT 107
2205: PPUSH
2206: LD_INT 66
2208: PPUSH
2209: CALL_OW 171
// end ;
2213: GO 2138
2215: POP
2216: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: LD_EXP 26
2226: PPUSH
2227: LD_INT 25
2229: PUSH
2230: LD_INT 2
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: PPUSH
2237: CALL_OW 72
2241: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2242: LD_INT 35
2244: PPUSH
2245: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2249: LD_ADDR_VAR 0 2
2253: PUSH
2254: LD_EXP 26
2258: PPUSH
2259: LD_INT 25
2261: PUSH
2262: LD_INT 2
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PPUSH
2269: CALL_OW 72
2273: ST_TO_ADDR
// until tmp ;
2274: LD_VAR 0 2
2278: IFFALSE 2242
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2280: LD_VAR 0 2
2284: PPUSH
2285: LD_INT 31
2287: PPUSH
2288: LD_INT 102
2290: PPUSH
2291: LD_INT 69
2293: PPUSH
2294: LD_INT 2
2296: PPUSH
2297: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2301: LD_INT 35
2303: PPUSH
2304: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2308: LD_EXP 26
2312: PPUSH
2313: LD_INT 3
2315: PUSH
2316: LD_INT 60
2318: PUSH
2319: EMPTY
2320: LIST
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: LD_INT 25
2328: PUSH
2329: LD_INT 2
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PPUSH
2340: CALL_OW 72
2344: IFFALSE 2301
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2346: LD_ADDR_VAR 0 2
2350: PUSH
2351: LD_EXP 26
2355: PPUSH
2356: LD_INT 25
2358: PUSH
2359: LD_INT 2
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PPUSH
2366: CALL_OW 72
2370: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2371: LD_VAR 0 2
2375: PPUSH
2376: LD_INT 4
2378: PPUSH
2379: LD_INT 116
2381: PPUSH
2382: LD_INT 70
2384: PPUSH
2385: LD_INT 5
2387: PPUSH
2388: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 31
2399: PPUSH
2400: LD_INT 108
2402: PPUSH
2403: LD_INT 50
2405: PPUSH
2406: LD_INT 2
2408: PPUSH
2409: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2413: LD_INT 35
2415: PPUSH
2416: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2420: LD_INT 22
2422: PUSH
2423: LD_INT 5
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 30
2432: PUSH
2433: LD_INT 4
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PUSH
2440: LD_INT 3
2442: PUSH
2443: LD_INT 57
2445: PUSH
2446: EMPTY
2447: LIST
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PPUSH
2458: CALL_OW 69
2462: IFFALSE 2413
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2464: LD_ADDR_VAR 0 3
2468: PUSH
2469: LD_INT 22
2471: PUSH
2472: LD_INT 5
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: PUSH
2479: LD_INT 30
2481: PUSH
2482: LD_INT 4
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: LD_INT 3
2491: PUSH
2492: LD_INT 57
2494: PUSH
2495: EMPTY
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: LIST
2506: PPUSH
2507: CALL_OW 69
2511: PUSH
2512: LD_INT 1
2514: ARRAY
2515: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2516: LD_ADDR_VAR 0 2
2520: PUSH
2521: LD_EXP 26
2525: PPUSH
2526: LD_INT 25
2528: PUSH
2529: LD_INT 1
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 72
2540: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_VAR 0 3
2550: PPUSH
2551: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2555: LD_INT 35
2557: PPUSH
2558: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2562: LD_INT 22
2564: PUSH
2565: LD_INT 5
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: LD_INT 30
2574: PUSH
2575: LD_INT 31
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: PUSH
2582: LD_INT 3
2584: PUSH
2585: LD_INT 57
2587: PUSH
2588: EMPTY
2589: LIST
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: CALL_OW 69
2604: PUSH
2605: LD_INT 2
2607: GREATEREQUAL
2608: IFFALSE 2555
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2610: LD_ADDR_VAR 0 2
2614: PUSH
2615: LD_EXP 26
2619: PPUSH
2620: LD_INT 25
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PPUSH
2630: CALL_OW 72
2634: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2635: LD_VAR 0 2
2639: PUSH
2640: LD_INT 1
2642: ARRAY
2643: PPUSH
2644: LD_INT 5
2646: PPUSH
2647: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2651: LD_VAR 0 2
2655: PUSH
2656: LD_INT 2
2658: ARRAY
2659: PUSH
2660: LD_VAR 0 2
2664: PUSH
2665: LD_INT 3
2667: ARRAY
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PPUSH
2673: LD_VAR 0 3
2677: PPUSH
2678: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2682: LD_VAR 0 2
2686: PUSH
2687: LD_INT 2
2689: ARRAY
2690: PUSH
2691: LD_VAR 0 2
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2711: LD_VAR 0 2
2715: PUSH
2716: LD_INT 2
2718: ARRAY
2719: PUSH
2720: LD_VAR 0 2
2724: PUSH
2725: LD_INT 3
2727: ARRAY
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: PPUSH
2733: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2737: LD_ADDR_VAR 0 4
2741: PUSH
2742: LD_INT 22
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 30
2754: PUSH
2755: LD_INT 31
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: PPUSH
2766: CALL_OW 69
2770: ST_TO_ADDR
// for i := 1 to 2 do
2771: LD_ADDR_VAR 0 1
2775: PUSH
2776: DOUBLE
2777: LD_INT 1
2779: DEC
2780: ST_TO_ADDR
2781: LD_INT 2
2783: PUSH
2784: FOR_TO
2785: IFFALSE 2819
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
2787: LD_VAR 0 2
2791: PUSH
2792: LD_VAR 0 1
2796: PUSH
2797: LD_INT 1
2799: PLUS
2800: ARRAY
2801: PPUSH
2802: LD_VAR 0 4
2806: PUSH
2807: LD_VAR 0 1
2811: ARRAY
2812: PPUSH
2813: CALL_OW 180
2817: GO 2784
2819: POP
2820: POP
// wait ( 1 1$00 ) ;
2821: LD_INT 2100
2823: PPUSH
2824: CALL_OW 67
// farmerBaseReady := true ;
2828: LD_ADDR_EXP 4
2832: PUSH
2833: LD_INT 1
2835: ST_TO_ADDR
// end ;
2836: PPOPN 4
2838: END
// every 0 0$1 trigger farmerBaseReady do var i , eng ;
2839: LD_EXP 4
2843: IFFALSE 3062
2845: GO 2847
2847: DISABLE
2848: LD_INT 0
2850: PPUSH
2851: PPUSH
// begin enable ;
2852: ENABLE
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2853: LD_ADDR_VAR 0 2
2857: PUSH
2858: LD_EXP 26
2862: PPUSH
2863: LD_INT 25
2865: PUSH
2866: LD_INT 2
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 72
2877: ST_TO_ADDR
// if not eng then
2878: LD_VAR 0 2
2882: NOT
2883: IFFALSE 2975
// begin uc_side := 5 ;
2885: LD_ADDR_OWVAR 20
2889: PUSH
2890: LD_INT 5
2892: ST_TO_ADDR
// uc_nation := 2 ;
2893: LD_ADDR_OWVAR 21
2897: PUSH
2898: LD_INT 2
2900: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
2901: LD_INT 0
2903: PPUSH
2904: LD_INT 2
2906: PPUSH
2907: LD_INT 2
2909: PPUSH
2910: CALL_OW 380
// eng := CreateHuman ;
2914: LD_ADDR_VAR 0 2
2918: PUSH
2919: CALL_OW 44
2923: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
2924: LD_VAR 0 2
2928: PPUSH
2929: LD_INT 102
2931: PPUSH
2932: LD_INT 8
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 110
2949: PPUSH
2950: LD_INT 60
2952: PPUSH
2953: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
2957: LD_ADDR_EXP 26
2961: PUSH
2962: LD_EXP 26
2966: PUSH
2967: LD_VAR 0 2
2971: UNION
2972: ST_TO_ADDR
// end else
2973: GO 3062
// begin for i in eng do
2975: LD_ADDR_VAR 0 1
2979: PUSH
2980: LD_VAR 0 2
2984: PUSH
2985: FOR_IN
2986: IFFALSE 3060
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
2988: LD_INT 10
2990: PPUSH
2991: LD_INT 1
2993: PPUSH
2994: CALL_OW 287
2998: IFFALSE 3022
// begin if IsInUnit ( i ) then
3000: LD_VAR 0 1
3004: PPUSH
3005: CALL_OW 310
3009: IFFALSE 3020
// ComExitBuilding ( i ) ;
3011: LD_VAR 0 1
3015: PPUSH
3016: CALL_OW 122
// end else
3020: GO 3058
// if not IsInUnit ( i ) and not HasTask ( i ) then
3022: LD_VAR 0 1
3026: PPUSH
3027: CALL_OW 310
3031: NOT
3032: PUSH
3033: LD_VAR 0 1
3037: PPUSH
3038: CALL_OW 314
3042: NOT
3043: AND
3044: IFFALSE 3058
// ComEnterUnit ( i , arDepot ) ;
3046: LD_VAR 0 1
3050: PPUSH
3051: LD_INT 5
3053: PPUSH
3054: CALL_OW 120
// end ;
3058: GO 2985
3060: POP
3061: POP
// end ; end ; end_of_file
3062: PPOPN 2
3064: END
// export usForces , usCommander , americanBuildList ; export function PrepareAmerican ; var i , un ; begin
3065: LD_INT 0
3067: PPUSH
3068: PPUSH
3069: PPUSH
// usForces := [ ] ;
3070: LD_ADDR_EXP 30
3074: PUSH
3075: EMPTY
3076: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
3077: LD_ADDR_EXP 32
3081: PUSH
3082: LD_INT 6
3084: PUSH
3085: LD_INT 32
3087: PUSH
3088: LD_INT 27
3090: PUSH
3091: LD_INT 1
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 4
3102: PUSH
3103: LD_INT 43
3105: PUSH
3106: LD_INT 24
3108: PUSH
3109: LD_INT 5
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 27
3120: PUSH
3121: LD_INT 29
3123: PUSH
3124: LD_INT 21
3126: PUSH
3127: LD_INT 0
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: LIST
3140: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
3141: LD_INT 11
3143: PPUSH
3144: CALL_OW 274
3148: PPUSH
3149: LD_INT 1
3151: PPUSH
3152: LD_INT 150
3154: PUSH
3155: LD_INT 120
3157: PUSH
3158: LD_INT 100
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: PUSH
3166: LD_OWVAR 67
3170: ARRAY
3171: PPUSH
3172: CALL_OW 277
// uc_side := 1 ;
3176: LD_ADDR_OWVAR 20
3180: PUSH
3181: LD_INT 1
3183: ST_TO_ADDR
// uc_nation := 1 ;
3184: LD_ADDR_OWVAR 21
3188: PUSH
3189: LD_INT 1
3191: ST_TO_ADDR
// hc_gallery :=  ;
3192: LD_ADDR_OWVAR 33
3196: PUSH
3197: LD_STRING 
3199: ST_TO_ADDR
// hc_name :=  ;
3200: LD_ADDR_OWVAR 26
3204: PUSH
3205: LD_STRING 
3207: ST_TO_ADDR
// hc_importance := 0 ;
3208: LD_ADDR_OWVAR 32
3212: PUSH
3213: LD_INT 0
3215: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3216: LD_INT 1
3218: PPUSH
3219: LD_INT 1
3221: PPUSH
3222: LD_INT 3
3224: PPUSH
3225: CALL_OW 380
// usCommander := CreateHuman ;
3229: LD_ADDR_EXP 31
3233: PUSH
3234: CALL_OW 44
3238: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
3239: LD_EXP 31
3243: PPUSH
3244: LD_INT 11
3246: PPUSH
3247: CALL_OW 52
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3251: LD_ADDR_VAR 0 2
3255: PUSH
3256: DOUBLE
3257: LD_INT 1
3259: DEC
3260: ST_TO_ADDR
3261: LD_INT 2
3263: PUSH
3264: LD_INT 3
3266: PUSH
3267: LD_INT 4
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: LIST
3274: PUSH
3275: LD_OWVAR 67
3279: ARRAY
3280: PUSH
3281: FOR_TO
3282: IFFALSE 3417
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
3284: LD_INT 0
3286: PPUSH
3287: LD_INT 1
3289: PPUSH
3290: LD_INT 1
3292: PUSH
3293: LD_INT 2
3295: PUSH
3296: LD_INT 3
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_OWVAR 67
3308: ARRAY
3309: PPUSH
3310: CALL_OW 380
// un := CreateHuman ;
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: CALL_OW 44
3323: ST_TO_ADDR
// usForces := usForces union un ;
3324: LD_ADDR_EXP 30
3328: PUSH
3329: LD_EXP 30
3333: PUSH
3334: LD_VAR 0 3
3338: UNION
3339: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
3340: LD_VAR 0 3
3344: PPUSH
3345: LD_INT 39
3347: PPUSH
3348: LD_INT 24
3350: PPUSH
3351: LD_INT 4
3353: PPUSH
3354: LD_INT 0
3356: PPUSH
3357: CALL_OW 50
// if i < 3 then
3361: LD_VAR 0 2
3365: PUSH
3366: LD_INT 3
3368: LESS
3369: IFFALSE 3415
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
3371: LD_VAR 0 3
3375: PPUSH
3376: LD_INT 22
3378: PUSH
3379: LD_INT 1
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: PUSH
3386: LD_INT 30
3388: PUSH
3389: LD_INT 31
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PPUSH
3400: CALL_OW 69
3404: PUSH
3405: LD_VAR 0 2
3409: ARRAY
3410: PPUSH
3411: CALL_OW 120
// end ;
3415: GO 3281
3417: POP
3418: POP
// for i := 1 to 2 do
3419: LD_ADDR_VAR 0 2
3423: PUSH
3424: DOUBLE
3425: LD_INT 1
3427: DEC
3428: ST_TO_ADDR
3429: LD_INT 2
3431: PUSH
3432: FOR_TO
3433: IFFALSE 3497
// begin PrepareHuman ( false , 2 , 2 ) ;
3435: LD_INT 0
3437: PPUSH
3438: LD_INT 2
3440: PPUSH
3441: LD_INT 2
3443: PPUSH
3444: CALL_OW 380
// un := CreateHuman ;
3448: LD_ADDR_VAR 0 3
3452: PUSH
3453: CALL_OW 44
3457: ST_TO_ADDR
// usForces := usForces union un ;
3458: LD_ADDR_EXP 30
3462: PUSH
3463: LD_EXP 30
3467: PUSH
3468: LD_VAR 0 3
3472: UNION
3473: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
3474: LD_VAR 0 3
3478: PPUSH
3479: LD_INT 39
3481: PPUSH
3482: LD_INT 24
3484: PPUSH
3485: LD_INT 4
3487: PPUSH
3488: LD_INT 0
3490: PPUSH
3491: CALL_OW 50
// end ;
3495: GO 3432
3497: POP
3498: POP
// PrepareHuman ( false , 4 , 1 ) ;
3499: LD_INT 0
3501: PPUSH
3502: LD_INT 4
3504: PPUSH
3505: LD_INT 1
3507: PPUSH
3508: CALL_OW 380
// un := CreateHuman ;
3512: LD_ADDR_VAR 0 3
3516: PUSH
3517: CALL_OW 44
3521: ST_TO_ADDR
// usForces := usForces union un ;
3522: LD_ADDR_EXP 30
3526: PUSH
3527: LD_EXP 30
3531: PUSH
3532: LD_VAR 0 3
3536: UNION
3537: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_INT 39
3545: PPUSH
3546: LD_INT 24
3548: PPUSH
3549: LD_INT 4
3551: PPUSH
3552: LD_INT 0
3554: PPUSH
3555: CALL_OW 50
// end ;
3559: LD_VAR 0 1
3563: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured do var i , b , eng , sol , sci ;
3564: LD_EXP 30
3568: PUSH
3569: LD_EXP 6
3573: NOT
3574: AND
3575: IFFALSE 3898
3577: GO 3579
3579: DISABLE
3580: LD_INT 0
3582: PPUSH
3583: PPUSH
3584: PPUSH
3585: PPUSH
3586: PPUSH
// begin enable ;
3587: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: LD_EXP 30
3597: PPUSH
3598: LD_INT 25
3600: PUSH
3601: LD_INT 2
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 72
3612: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
3613: LD_ADDR_VAR 0 4
3617: PUSH
3618: LD_EXP 30
3622: PPUSH
3623: LD_INT 25
3625: PUSH
3626: LD_INT 1
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PPUSH
3633: CALL_OW 72
3637: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
3638: LD_ADDR_VAR 0 5
3642: PUSH
3643: LD_EXP 30
3647: PPUSH
3648: LD_INT 25
3650: PUSH
3651: LD_INT 4
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PPUSH
3658: CALL_OW 72
3662: ST_TO_ADDR
// if eng then
3663: LD_VAR 0 3
3667: IFFALSE 3898
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3669: LD_ADDR_VAR 0 2
3673: PUSH
3674: LD_INT 22
3676: PUSH
3677: LD_INT 1
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: PUSH
3684: LD_INT 21
3686: PUSH
3687: LD_INT 3
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 3
3696: PUSH
3697: LD_INT 24
3699: PUSH
3700: LD_INT 1000
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: LIST
3715: PPUSH
3716: CALL_OW 69
3720: ST_TO_ADDR
// if b then
3721: LD_VAR 0 2
3725: IFFALSE 3756
// begin ComExitBuilding ( eng ) ;
3727: LD_VAR 0 3
3731: PPUSH
3732: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
3736: LD_VAR 0 3
3740: PPUSH
3741: LD_VAR 0 2
3745: PUSH
3746: LD_INT 1
3748: ARRAY
3749: PPUSH
3750: CALL_OW 190
// end else
3754: GO 3898
// begin for i in eng do
3756: LD_ADDR_VAR 0 1
3760: PUSH
3761: LD_VAR 0 3
3765: PUSH
3766: FOR_IN
3767: IFFALSE 3896
// if not HasTask ( i ) then
3769: LD_VAR 0 1
3773: PPUSH
3774: CALL_OW 314
3778: NOT
3779: IFFALSE 3894
// begin if americanBuildList then
3781: LD_EXP 32
3785: IFFALSE 3870
// begin if IsInUnit ( i ) then
3787: LD_VAR 0 1
3791: PPUSH
3792: CALL_OW 310
3796: IFFALSE 3807
// ComExitBuilding ( i ) ;
3798: LD_VAR 0 1
3802: PPUSH
3803: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
3807: LD_VAR 0 1
3811: PPUSH
3812: LD_EXP 32
3816: PUSH
3817: LD_INT 1
3819: ARRAY
3820: PUSH
3821: LD_INT 1
3823: ARRAY
3824: PPUSH
3825: LD_EXP 32
3829: PUSH
3830: LD_INT 1
3832: ARRAY
3833: PUSH
3834: LD_INT 2
3836: ARRAY
3837: PPUSH
3838: LD_EXP 32
3842: PUSH
3843: LD_INT 1
3845: ARRAY
3846: PUSH
3847: LD_INT 3
3849: ARRAY
3850: PPUSH
3851: LD_EXP 32
3855: PUSH
3856: LD_INT 1
3858: ARRAY
3859: PUSH
3860: LD_INT 4
3862: ARRAY
3863: PPUSH
3864: CALL_OW 205
// end else
3868: GO 3894
// if not IsInUnit ( i ) then
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 310
3879: NOT
3880: IFFALSE 3894
// ComEnterUnit ( i , usDepot ) ;
3882: LD_VAR 0 1
3886: PPUSH
3887: LD_INT 11
3889: PPUSH
3890: CALL_OW 120
// end ;
3894: GO 3766
3896: POP
3897: POP
// end ; end ; end ;
3898: PPOPN 5
3900: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
3901: LD_INT 0
3903: PPUSH
3904: PPUSH
3905: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
3906: LD_ADDR_VAR 0 3
3910: PUSH
3911: LD_INT 35
3913: PUSH
3914: LD_INT 45
3916: PUSH
3917: LD_INT 48
3919: PUSH
3920: LD_EXP 40
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: ST_TO_ADDR
// for i in tech do
3931: LD_ADDR_VAR 0 4
3935: PUSH
3936: LD_VAR 0 3
3940: PUSH
3941: FOR_IN
3942: IFFALSE 3960
// AddComResearch ( lab , i ) ;
3944: LD_VAR 0 1
3948: PPUSH
3949: LD_VAR 0 4
3953: PPUSH
3954: CALL_OW 184
3958: GO 3941
3960: POP
3961: POP
// end ; end_of_file
3962: LD_VAR 0 2
3966: RET
// export function Action ; var hasAll , i , tmp ; begin
3967: LD_INT 0
3969: PPUSH
3970: PPUSH
3971: PPUSH
3972: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
3973: LD_ADDR_VAR 0 2
3977: PUSH
3978: LD_INT 22
3980: PUSH
3981: LD_INT 2
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: PUSH
3988: LD_INT 21
3990: PUSH
3991: LD_INT 1
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: PUSH
3998: LD_INT 23
4000: PUSH
4001: LD_INT 2
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: LIST
4012: PPUSH
4013: CALL_OW 69
4017: PUSH
4018: LD_INT 7
4020: GREATEREQUAL
4021: ST_TO_ADDR
// InGameOn ;
4022: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
4026: LD_EXP 16
4030: PPUSH
4031: CALL_OW 87
// wait ( 0 0$2 ) ;
4035: LD_INT 70
4037: PPUSH
4038: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
4042: LD_EXP 24
4046: PPUSH
4047: LD_STRING DF-1-start
4049: PPUSH
4050: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
4054: LD_EXP 16
4058: PPUSH
4059: LD_EXP 24
4063: PPUSH
4064: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
4068: LD_EXP 16
4072: PPUSH
4073: LD_STRING DH-1-start
4075: PPUSH
4076: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
4080: LD_EXP 25
4084: PPUSH
4085: LD_INT 92
4087: PPUSH
4088: LD_INT 21
4090: PPUSH
4091: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
4095: LD_EXP 20
4099: PPUSH
4100: LD_INT 94
4102: PPUSH
4103: LD_INT 23
4105: PPUSH
4106: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
4110: LD_EXP 27
4114: PUSH
4115: LD_INT 1
4117: ARRAY
4118: PPUSH
4119: LD_INT 90
4121: PPUSH
4122: LD_INT 23
4124: PPUSH
4125: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
4129: LD_EXP 27
4133: PUSH
4134: LD_INT 2
4136: ARRAY
4137: PPUSH
4138: LD_INT 93
4140: PPUSH
4141: LD_INT 25
4143: PPUSH
4144: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
4148: LD_EXP 27
4152: PPUSH
4153: LD_EXP 25
4157: PPUSH
4158: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
4162: LD_EXP 25
4166: PUSH
4167: LD_EXP 20
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: LD_EXP 16
4180: PPUSH
4181: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
4185: LD_EXP 16
4189: PPUSH
4190: LD_EXP 25
4194: PPUSH
4195: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4199: LD_INT 35
4201: PPUSH
4202: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
4206: LD_EXP 25
4210: PPUSH
4211: LD_INT 92
4213: PPUSH
4214: LD_INT 21
4216: PPUSH
4217: CALL_OW 307
4221: IFFALSE 4199
// Say ( Omar , DO-1-start ) ;
4223: LD_EXP 25
4227: PPUSH
4228: LD_STRING DO-1-start
4230: PPUSH
4231: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4235: LD_EXP 16
4239: PPUSH
4240: LD_STRING DH-2-start
4242: PPUSH
4243: CALL_OW 88
// if hasAll then
4247: LD_VAR 0 2
4251: IFFALSE 4379
// begin Say ( Omar , DO-2-start ) ;
4253: LD_EXP 25
4257: PPUSH
4258: LD_STRING DO-2-start
4260: PPUSH
4261: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
4265: LD_EXP 25
4269: PPUSH
4270: LD_STRING DO-3-start
4272: PPUSH
4273: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4277: LD_EXP 16
4281: PPUSH
4282: LD_STRING DH-3-start
4284: PPUSH
4285: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
4289: LD_EXP 24
4293: PPUSH
4294: LD_STRING DF-2-start
4296: PPUSH
4297: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
4301: LD_EXP 25
4305: PPUSH
4306: LD_EXP 24
4310: PPUSH
4311: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
4315: LD_EXP 25
4319: PPUSH
4320: LD_STRING DO-4-start
4322: PPUSH
4323: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
4327: LD_EXP 24
4331: PPUSH
4332: LD_STRING DF-3-start
4334: PPUSH
4335: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
4339: LD_EXP 25
4343: PPUSH
4344: LD_STRING DO-5-start
4346: PPUSH
4347: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
4351: LD_EXP 24
4355: PPUSH
4356: LD_STRING DF-4-start
4358: PPUSH
4359: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
4363: LD_EXP 25
4367: PPUSH
4368: LD_EXP 16
4372: PPUSH
4373: CALL_OW 119
// end else
4377: GO 4479
// begin Say ( Omar , DO-2-start-a ) ;
4379: LD_EXP 25
4383: PPUSH
4384: LD_STRING DO-2-start-a
4386: PPUSH
4387: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
4391: LD_EXP 25
4395: PPUSH
4396: LD_STRING DO-3-start-a
4398: PPUSH
4399: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
4403: LD_EXP 16
4407: PPUSH
4408: LD_STRING DH-3-start-a
4410: PPUSH
4411: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
4415: LD_EXP 24
4419: PPUSH
4420: LD_STRING DF-2-start-a
4422: PPUSH
4423: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
4427: LD_EXP 25
4431: PPUSH
4432: LD_EXP 24
4436: PPUSH
4437: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
4441: LD_EXP 25
4445: PPUSH
4446: LD_STRING DO-4-start-a
4448: PPUSH
4449: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
4453: LD_EXP 24
4457: PPUSH
4458: LD_STRING DF-3-start-a
4460: PPUSH
4461: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
4465: LD_EXP 25
4469: PPUSH
4470: LD_EXP 16
4474: PPUSH
4475: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
4479: LD_INT 10
4481: PPUSH
4482: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
4486: LD_EXP 25
4490: PPUSH
4491: LD_STRING DO-1-mission
4493: PPUSH
4494: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
4498: LD_EXP 25
4502: PPUSH
4503: LD_STRING DO-2-mission
4505: PPUSH
4506: CALL_OW 88
// if not hasAll then
4510: LD_VAR 0 2
4514: NOT
4515: IFFALSE 4529
// Say ( Omar , DO-3-mission ) ;
4517: LD_EXP 25
4521: PPUSH
4522: LD_STRING DO-3-mission
4524: PPUSH
4525: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
4529: LD_EXP 25
4533: PPUSH
4534: LD_STRING DO-4-mission
4536: PPUSH
4537: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
4541: LD_EXP 16
4545: PPUSH
4546: LD_STRING DH-1-mission
4548: PPUSH
4549: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
4553: LD_EXP 24
4557: PPUSH
4558: LD_STRING DF-1-mission
4560: PPUSH
4561: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
4565: LD_EXP 25
4569: PPUSH
4570: LD_STRING DO-5-mission
4572: PPUSH
4573: CALL_OW 88
// if not hasAll then
4577: LD_VAR 0 2
4581: NOT
4582: IFFALSE 4697
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
4584: LD_ADDR_VAR 0 4
4588: PUSH
4589: LD_INT 22
4591: PUSH
4592: LD_INT 2
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 21
4601: PUSH
4602: LD_INT 1
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: LD_INT 23
4611: PUSH
4612: LD_INT 2
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: LIST
4623: PPUSH
4624: CALL_OW 69
4628: ST_TO_ADDR
// for i := 7 downto tmp do
4629: LD_ADDR_VAR 0 3
4633: PUSH
4634: DOUBLE
4635: LD_INT 7
4637: INC
4638: ST_TO_ADDR
4639: LD_VAR 0 4
4643: PUSH
4644: FOR_DOWNTO
4645: IFFALSE 4695
// begin if omarSquad < 3 then
4647: LD_EXP 27
4651: PUSH
4652: LD_INT 3
4654: LESS
4655: IFFALSE 4659
// break ;
4657: GO 4695
// SetSide ( omarSquad [ 3 ] , 2 ) ;
4659: LD_EXP 27
4663: PUSH
4664: LD_INT 3
4666: ARRAY
4667: PPUSH
4668: LD_INT 2
4670: PPUSH
4671: CALL_OW 235
// omarSquad := Delete ( omarSquad , 3 ) ;
4675: LD_ADDR_EXP 27
4679: PUSH
4680: LD_EXP 27
4684: PPUSH
4685: LD_INT 3
4687: PPUSH
4688: CALL_OW 3
4692: ST_TO_ADDR
// end ;
4693: GO 4644
4695: POP
4696: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
4697: LD_EXP 25
4701: PUSH
4702: LD_EXP 27
4706: ADD
4707: PPUSH
4708: LD_INT 103
4710: PPUSH
4711: LD_INT 9
4713: PPUSH
4714: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
4718: LD_VAR 0 2
4722: PUSH
4723: LD_EXP 21
4727: PPUSH
4728: CALL_OW 302
4732: AND
4733: IFFALSE 4794
// begin wait ( 0 0$3 ) ;
4735: LD_INT 105
4737: PPUSH
4738: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
4742: LD_EXP 21
4746: PPUSH
4747: LD_EXP 24
4751: PPUSH
4752: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
4756: LD_EXP 21
4760: PPUSH
4761: LD_STRING DK-1-side
4763: PPUSH
4764: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
4768: LD_EXP 24
4772: PPUSH
4773: LD_EXP 21
4777: PPUSH
4778: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
4782: LD_EXP 24
4786: PPUSH
4787: LD_STRING DF-1-side
4789: PPUSH
4790: CALL_OW 88
// end ; InGameOff ;
4794: CALL_OW 9
// ChangeMissionObjectives ( BuildBase ) ;
4798: LD_STRING BuildBase
4800: PPUSH
4801: CALL_OW 337
// ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
4805: LD_INT 22
4807: PUSH
4808: LD_INT 2
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: PPUSH
4815: CALL_OW 69
4819: PPUSH
4820: CALL_OW 139
// SaveForQuickRestart ;
4824: CALL_OW 22
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
4828: LD_EXP 24
4832: PUSH
4833: LD_EXP 26
4837: ADD
4838: PPUSH
4839: LD_INT 108
4841: PPUSH
4842: LD_INT 62
4844: PPUSH
4845: CALL_OW 111
// gameStarted := true ;
4849: LD_ADDR_EXP 3
4853: PUSH
4854: LD_INT 1
4856: ST_TO_ADDR
// end ;
4857: LD_VAR 0 1
4861: RET
// every 0 0$3 trigger gameStarted do
4862: LD_EXP 3
4866: IFFALSE 5180
4868: GO 4870
4870: DISABLE
// begin Video ( true ) ;
4871: LD_INT 1
4873: PPUSH
4874: CALL 889 0 1
// CenterOnUnits ( Heike ) ;
4878: LD_EXP 16
4882: PPUSH
4883: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
4887: LD_EXP 16
4891: PPUSH
4892: LD_EXP 20
4896: PPUSH
4897: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
4901: LD_INT 22
4903: PUSH
4904: LD_INT 2
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PPUSH
4911: CALL_OW 69
4915: PUSH
4916: LD_EXP 16
4920: DIFF
4921: PPUSH
4922: LD_EXP 16
4926: PPUSH
4927: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
4931: LD_EXP 16
4935: PPUSH
4936: LD_STRING DH-1-explore
4938: PPUSH
4939: CALL_OW 88
// if Givi then
4943: LD_EXP 17
4947: IFFALSE 4963
// Say ( Givi , DG-1-explore ) else
4949: LD_EXP 17
4953: PPUSH
4954: LD_STRING DG-1-explore
4956: PPUSH
4957: CALL_OW 88
4961: GO 5000
// if heikeSecondSquad then
4963: LD_EXP 29
4967: IFFALSE 5000
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
4969: LD_EXP 29
4973: PPUSH
4974: LD_INT 26
4976: PUSH
4977: LD_INT 1
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PPUSH
4984: CALL_OW 72
4988: PUSH
4989: LD_INT 1
4991: ARRAY
4992: PPUSH
4993: LD_STRING DArm-1-explore
4995: PPUSH
4996: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
5000: LD_EXP 20
5004: PPUSH
5005: LD_STRING DA-1-explore
5007: PPUSH
5008: CALL_OW 88
// if Sophia then
5012: LD_EXP 22
5016: IFFALSE 5094
// begin Say ( Sophia , DS-2-explore ) ;
5018: LD_EXP 22
5022: PPUSH
5023: LD_STRING DS-2-explore
5025: PPUSH
5026: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
5030: LD_EXP 20
5034: PPUSH
5035: LD_STRING DA-2-explore
5037: PPUSH
5038: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
5042: LD_EXP 22
5046: PPUSH
5047: LD_EXP 20
5051: PPUSH
5052: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
5056: LD_EXP 20
5060: PPUSH
5061: LD_EXP 22
5065: PPUSH
5066: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
5070: LD_EXP 22
5074: PPUSH
5075: LD_STRING DS-3-explore
5077: PPUSH
5078: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
5082: LD_EXP 20
5086: PPUSH
5087: LD_STRING DA-3-explore
5089: PPUSH
5090: CALL_OW 88
// end ; if Mike then
5094: LD_EXP 18
5098: IFFALSE 5154
// begin Say ( Mike , DM-1-explore ) ;
5100: LD_EXP 18
5104: PPUSH
5105: LD_STRING DM-1-explore
5107: PPUSH
5108: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
5112: LD_EXP 16
5116: PPUSH
5117: LD_STRING DH-2-explore
5119: PPUSH
5120: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
5124: LD_EXP 18
5128: PPUSH
5129: LD_STRING DM-2-explore
5131: PPUSH
5132: CALL_OW 88
// if Kaia then
5136: LD_EXP 21
5140: IFFALSE 5154
// Say ( Kaia , DK-1-explore ) ;
5142: LD_EXP 21
5146: PPUSH
5147: LD_STRING DK-1-explore
5149: PPUSH
5150: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
5154: LD_INT 22
5156: PUSH
5157: LD_INT 2
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PPUSH
5164: CALL_OW 69
5168: PPUSH
5169: CALL_OW 139
// Video ( false ) ;
5173: LD_INT 0
5175: PPUSH
5176: CALL 889 0 1
// end ;
5180: END
// every 0 0$1 trigger not americanBaseSpoted and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
5181: LD_EXP 5
5185: NOT
5186: PUSH
5187: LD_INT 5
5189: PPUSH
5190: LD_INT 22
5192: PUSH
5193: LD_INT 2
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PPUSH
5200: CALL_OW 70
5204: AND
5205: PUSH
5206: LD_EXP 6
5210: NOT
5211: AND
5212: IFFALSE 5297
5214: GO 5216
5216: DISABLE
// begin if Mike then
5217: LD_EXP 18
5221: IFFALSE 5237
// Say ( Mike , DM-1-scout ) else
5223: LD_EXP 18
5227: PPUSH
5228: LD_STRING DM-1-scout
5230: PPUSH
5231: CALL_OW 88
5235: GO 5268
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
5237: LD_EXP 29
5241: PPUSH
5242: LD_INT 26
5244: PUSH
5245: LD_INT 1
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PPUSH
5252: CALL_OW 72
5256: PUSH
5257: LD_INT 1
5259: ARRAY
5260: PPUSH
5261: LD_STRING DArm-1-explore
5263: PPUSH
5264: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
5268: LD_INT 54
5270: PPUSH
5271: LD_INT 35
5273: PPUSH
5274: LD_INT 2
5276: PPUSH
5277: LD_INT 1
5279: PPUSH
5280: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
5284: LD_INT 54
5286: PPUSH
5287: LD_INT 35
5289: PPUSH
5290: LD_INT 2
5292: PPUSH
5293: CALL_OW 331
// end ;
5297: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) do var randomMen , randomWomen , speakerOk ;
5298: LD_INT 6
5300: PPUSH
5301: LD_INT 22
5303: PUSH
5304: LD_INT 2
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PPUSH
5311: CALL_OW 70
5315: IFFALSE 5540
5317: GO 5319
5319: DISABLE
5320: LD_INT 0
5322: PPUSH
5323: PPUSH
5324: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
5325: LD_ADDR_VAR 0 1
5329: PUSH
5330: LD_EXP 29
5334: PPUSH
5335: LD_INT 26
5337: PUSH
5338: LD_INT 1
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PPUSH
5345: CALL_OW 72
5349: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
5350: LD_ADDR_VAR 0 2
5354: PUSH
5355: LD_EXP 29
5359: PPUSH
5360: LD_INT 26
5362: PUSH
5363: LD_INT 2
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PPUSH
5370: CALL_OW 72
5374: ST_TO_ADDR
// DialogueOn ;
5375: CALL_OW 6
// dwait ( 0 0$1 ) ;
5379: LD_INT 35
5381: PPUSH
5382: CALL_OW 68
// speakerOk := false ;
5386: LD_ADDR_VAR 0 3
5390: PUSH
5391: LD_INT 0
5393: ST_TO_ADDR
// if Mike then
5394: LD_EXP 18
5398: IFFALSE 5420
// speakerOk := Say ( Mike , DM-1-spot ) else
5400: LD_ADDR_VAR 0 3
5404: PUSH
5405: LD_EXP 18
5409: PPUSH
5410: LD_STRING DM-1-spot
5412: PPUSH
5413: CALL_OW 88
5417: ST_TO_ADDR
5418: GO 5448
// if randomMen then
5420: LD_VAR 0 1
5424: IFFALSE 5448
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
5426: LD_ADDR_VAR 0 3
5430: PUSH
5431: LD_VAR 0 1
5435: PUSH
5436: LD_INT 1
5438: ARRAY
5439: PPUSH
5440: LD_STRING DArm-1-spot-a
5442: PPUSH
5443: CALL_OW 88
5447: ST_TO_ADDR
// if speakerOk then
5448: LD_VAR 0 3
5452: IFFALSE 5496
// begin if Givi then
5454: LD_EXP 17
5458: IFFALSE 5474
// Say ( Givi , DG-1-spot ) else
5460: LD_EXP 17
5464: PPUSH
5465: LD_STRING DG-1-spot
5467: PPUSH
5468: CALL_OW 88
5472: GO 5496
// if randomWomen then
5474: LD_VAR 0 2
5478: IFFALSE 5496
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
5480: LD_VAR 0 2
5484: PUSH
5485: LD_INT 1
5487: ARRAY
5488: PPUSH
5489: LD_STRING DArf-1-spot-a
5491: PPUSH
5492: CALL_OW 88
// end ; if Mike then
5496: LD_EXP 18
5500: IFFALSE 5516
// Say ( Heike , DH-1-spot ) else
5502: LD_EXP 16
5506: PPUSH
5507: LD_STRING DH-1-spot
5509: PPUSH
5510: CALL_OW 88
5514: GO 5528
// Say ( Heike , DH-1-spot-a ) ;
5516: LD_EXP 16
5520: PPUSH
5521: LD_STRING DH-1-spot-a
5523: PPUSH
5524: CALL_OW 88
// DialogueOff ;
5528: CALL_OW 7
// americanBaseSpoted := true ;
5532: LD_ADDR_EXP 5
5536: PUSH
5537: LD_INT 1
5539: ST_TO_ADDR
// end ;
5540: PPOPN 3
5542: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
5543: LD_EXP 5
5547: NOT
5548: PUSH
5549: LD_INT 22
5551: PUSH
5552: LD_INT 2
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 101
5561: PUSH
5562: LD_INT 1
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PPUSH
5573: CALL_OW 69
5577: AND
5578: PUSH
5579: LD_EXP 6
5583: NOT
5584: AND
5585: IFFALSE 5671
5587: GO 5589
5589: DISABLE
5590: LD_INT 0
5592: PPUSH
// begin americanBaseSpoted := true ;
5593: LD_ADDR_EXP 5
5597: PUSH
5598: LD_INT 1
5600: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
5601: LD_ADDR_VAR 0 1
5605: PUSH
5606: LD_EXP 29
5610: PPUSH
5611: LD_INT 26
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PPUSH
5621: CALL_OW 72
5625: ST_TO_ADDR
// if not randomMen then
5626: LD_VAR 0 1
5630: NOT
5631: IFFALSE 5635
// exit ;
5633: GO 5671
// DialogueOn ;
5635: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
5639: LD_VAR 0 1
5643: PUSH
5644: LD_INT 1
5646: ARRAY
5647: PPUSH
5648: LD_STRING DArm-1-spot-a
5650: PPUSH
5651: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
5655: LD_EXP 16
5659: PPUSH
5660: LD_STRING DH-1-spot-a
5662: PPUSH
5663: CALL_OW 88
// DialogueOff ;
5667: CALL_OW 7
// end ;
5671: PPOPN 1
5673: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 do var i , p ;
5674: LD_INT 11
5676: PPUSH
5677: CALL_OW 255
5681: PUSH
5682: LD_INT 2
5684: EQUAL
5685: PUSH
5686: LD_INT 22
5688: PUSH
5689: LD_INT 1
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: PUSH
5696: LD_INT 3
5698: PUSH
5699: LD_INT 50
5701: PUSH
5702: EMPTY
5703: LIST
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: LD_INT 30
5711: PUSH
5712: LD_INT 31
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: PPUSH
5724: CALL_OW 69
5728: OR
5729: PUSH
5730: LD_INT 7
5732: PPUSH
5733: LD_INT 22
5735: PUSH
5736: LD_INT 2
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 70
5747: PUSH
5748: LD_INT 1
5750: GREATER
5751: OR
5752: IFFALSE 6208
5754: GO 5756
5756: DISABLE
5757: LD_INT 0
5759: PPUSH
5760: PPUSH
// begin americanBaseCaptured := true ;
5761: LD_ADDR_EXP 6
5765: PUSH
5766: LD_INT 1
5768: ST_TO_ADDR
// wait ( 0 0$2 ) ;
5769: LD_INT 70
5771: PPUSH
5772: CALL_OW 67
// if IsOk ( usCommander ) then
5776: LD_EXP 31
5780: PPUSH
5781: CALL_OW 302
5785: IFFALSE 5815
// begin usForces := usForces union usCommander ;
5787: LD_ADDR_EXP 30
5791: PUSH
5792: LD_EXP 30
5796: PUSH
5797: LD_EXP 31
5801: UNION
5802: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
5803: LD_EXP 31
5807: PPUSH
5808: LD_STRING DUsm-1-assault
5810: PPUSH
5811: CALL_OW 88
// end ; for i in usForces do
5815: LD_ADDR_VAR 0 1
5819: PUSH
5820: LD_EXP 30
5824: PUSH
5825: FOR_IN
5826: IFFALSE 5865
// begin if IsInUnit ( i ) then
5828: LD_VAR 0 1
5832: PPUSH
5833: CALL_OW 310
5837: IFFALSE 5848
// ComExitBuilding ( i ) ;
5839: LD_VAR 0 1
5843: PPUSH
5844: CALL_OW 122
// AddComMoveXY ( i , 34 , 67 ) ;
5848: LD_VAR 0 1
5852: PPUSH
5853: LD_INT 34
5855: PPUSH
5856: LD_INT 67
5858: PPUSH
5859: CALL_OW 171
// end ;
5863: GO 5825
5865: POP
5866: POP
// Say ( Heike , DH-1-assault ) ;
5867: LD_EXP 16
5871: PPUSH
5872: LD_STRING DH-1-assault
5874: PPUSH
5875: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5879: LD_INT 35
5881: PPUSH
5882: CALL_OW 67
// until not usForces ;
5886: LD_EXP 30
5890: NOT
5891: IFFALSE 5879
// if not americanHasEscaped then
5893: LD_EXP 7
5897: NOT
5898: IFFALSE 5912
// Say ( Heike , DH-2-assault ) ;
5900: LD_EXP 16
5904: PPUSH
5905: LD_STRING DH-2-assault
5907: PPUSH
5908: CALL_OW 88
// wait ( 0 0$2 ) ;
5912: LD_INT 70
5914: PPUSH
5915: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5919: LD_INT 35
5921: PPUSH
5922: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
5926: LD_INT 22
5928: PUSH
5929: LD_INT 2
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 21
5938: PUSH
5939: LD_INT 1
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 3
5948: PUSH
5949: LD_INT 50
5951: PUSH
5952: EMPTY
5953: LIST
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: LIST
5963: PPUSH
5964: CALL_OW 69
5968: NOT
5969: IFFALSE 5919
// Video ( true ) ;
5971: LD_INT 1
5973: PPUSH
5974: CALL 889 0 1
// if not GetSide ( usDepot ) = 2 then
5978: LD_INT 11
5980: PPUSH
5981: CALL_OW 255
5985: PUSH
5986: LD_INT 2
5988: EQUAL
5989: NOT
5990: IFFALSE 6002
// SetSide ( usDepot , 2 ) ;
5992: LD_INT 11
5994: PPUSH
5995: LD_INT 2
5997: PPUSH
5998: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
6002: LD_INT 35
6004: PPUSH
6005: LD_INT 22
6007: PPUSH
6008: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
6012: LD_EXP 16
6016: PPUSH
6017: LD_INT 35
6019: PPUSH
6020: LD_INT 22
6022: PPUSH
6023: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
6027: LD_EXP 16
6031: PPUSH
6032: LD_INT 38
6034: PPUSH
6035: LD_INT 25
6037: PPUSH
6038: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
6042: LD_EXP 28
6046: PUSH
6047: LD_EXP 29
6051: UNION
6052: PPUSH
6053: LD_INT 39
6055: PPUSH
6056: LD_INT 26
6058: PPUSH
6059: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
6063: LD_EXP 28
6067: PUSH
6068: LD_EXP 29
6072: UNION
6073: PPUSH
6074: LD_EXP 16
6078: PPUSH
6079: CALL_OW 179
// p := 0 ;
6083: LD_ADDR_VAR 0 2
6087: PUSH
6088: LD_INT 0
6090: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6091: LD_INT 35
6093: PPUSH
6094: CALL_OW 67
// p := p + 1 ;
6098: LD_ADDR_VAR 0 2
6102: PUSH
6103: LD_VAR 0 2
6107: PUSH
6108: LD_INT 1
6110: PLUS
6111: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
6112: LD_EXP 16
6116: PPUSH
6117: CALL_OW 314
6121: NOT
6122: PUSH
6123: LD_VAR 0 2
6127: PUSH
6128: LD_INT 10
6130: GREATER
6131: OR
6132: IFFALSE 6091
// Say ( Heike , DH-1-capture ) ;
6134: LD_EXP 16
6138: PPUSH
6139: LD_STRING DH-1-capture
6141: PPUSH
6142: CALL_OW 88
// if Markov then
6146: LD_EXP 23
6150: IFFALSE 6164
// Say ( Markov , DMar-1-capture ) ;
6152: LD_EXP 23
6156: PPUSH
6157: LD_STRING DMar-1-capture
6159: PPUSH
6160: CALL_OW 88
// if Sophia then
6164: LD_EXP 22
6168: IFFALSE 6194
// begin Say ( Heike , DH-2-capture ) ;
6170: LD_EXP 16
6174: PPUSH
6175: LD_STRING DH-2-capture
6177: PPUSH
6178: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
6182: LD_EXP 22
6186: PPUSH
6187: LD_STRING DS-1-capture
6189: PPUSH
6190: CALL_OW 88
// end ; Video ( false ) ;
6194: LD_INT 0
6196: PPUSH
6197: CALL 889 0 1
// ChangeMissionObjectives ( ConstructBase ) ;
6201: LD_STRING ConstructBase
6203: PPUSH
6204: CALL_OW 337
// end ;
6208: PPOPN 2
6210: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
6211: LD_INT 22
6213: PUSH
6214: LD_INT 2
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: LD_INT 30
6223: PUSH
6224: LD_INT 2
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 3
6233: PUSH
6234: LD_INT 57
6236: PUSH
6237: EMPTY
6238: LIST
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: LIST
6248: PPUSH
6249: CALL_OW 69
6253: IFFALSE 6344
6255: GO 6257
6257: DISABLE
// begin workshopBuilded := true ;
6258: LD_ADDR_EXP 10
6262: PUSH
6263: LD_INT 1
6265: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructVeh ) ;
6266: LD_STRING ConstructVeh
6268: PPUSH
6269: CALL_OW 337
// if not IsOk ( Markov ) then
6273: LD_EXP 23
6277: PPUSH
6278: CALL_OW 302
6282: NOT
6283: IFFALSE 6287
// exit ;
6285: GO 6344
// Say ( Heike , DH-1-shop ) ;
6287: LD_EXP 16
6291: PPUSH
6292: LD_STRING DH-1-shop
6294: PPUSH
6295: CALL_OW 88
// if not ( GetTech ( 2 , tech_OilEng ) = state_researched and GetTech ( 2 , tech_SolEng ) = state_researched ) then
6299: LD_INT 2
6301: PPUSH
6302: LD_INT 47
6304: PPUSH
6305: CALL_OW 321
6309: PUSH
6310: LD_INT 2
6312: EQUAL
6313: PUSH
6314: LD_INT 2
6316: PPUSH
6317: LD_INT 45
6319: PPUSH
6320: CALL_OW 321
6324: PUSH
6325: LD_INT 2
6327: EQUAL
6328: AND
6329: NOT
6330: IFFALSE 6344
// Say ( Markov , DMar-1-shop-a ) ;
6332: LD_EXP 23
6336: PPUSH
6337: LD_STRING DMar-1-shop-a
6339: PPUSH
6340: CALL_OW 88
// end ;
6344: END
// every 0 0$1 trigger IsOk ( Markov ) and workshopBuilded and GetTech ( 2 , tech_OilEng ) = state_researched and GetTech ( 2 , tech_SolEng ) = state_researched do
6345: LD_EXP 23
6349: PPUSH
6350: CALL_OW 302
6354: PUSH
6355: LD_EXP 10
6359: AND
6360: PUSH
6361: LD_INT 2
6363: PPUSH
6364: LD_INT 47
6366: PPUSH
6367: CALL_OW 321
6371: PUSH
6372: LD_INT 2
6374: EQUAL
6375: AND
6376: PUSH
6377: LD_INT 2
6379: PPUSH
6380: LD_INT 45
6382: PPUSH
6383: CALL_OW 321
6387: PUSH
6388: LD_INT 2
6390: EQUAL
6391: AND
6392: IFFALSE 6513
6394: GO 6396
6396: DISABLE
// begin DialogueOn ;
6397: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
6401: LD_EXP 23
6405: PPUSH
6406: LD_STRING DMar-1-shop
6408: PPUSH
6409: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
6413: LD_EXP 16
6417: PPUSH
6418: LD_STRING DH-1-shop
6420: PPUSH
6421: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
6425: LD_EXP 23
6429: PPUSH
6430: LD_STRING DMar-2-shop
6432: PPUSH
6433: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
6437: LD_EXP 23
6441: PPUSH
6442: LD_STRING DMar-3-shop
6444: PPUSH
6445: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
6449: LD_EXP 16
6453: PPUSH
6454: LD_STRING DH-2-shop
6456: PPUSH
6457: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
6461: LD_EXP 23
6465: PPUSH
6466: LD_STRING DMar-4-shop
6468: PPUSH
6469: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
6473: LD_EXP 16
6477: PPUSH
6478: LD_STRING DH-3-shop
6480: PPUSH
6481: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DMar-5-shop
6492: PPUSH
6493: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
6497: LD_EXP 16
6501: PPUSH
6502: LD_STRING DH-4-shop
6504: PPUSH
6505: CALL_OW 88
// DialogueOff ;
6509: CALL_OW 7
// end ;
6513: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
6514: LD_EXP 23
6518: PPUSH
6519: CALL_OW 302
6523: PUSH
6524: LD_INT 22
6526: PUSH
6527: LD_INT 2
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: LD_INT 2
6536: PUSH
6537: LD_INT 34
6539: PUSH
6540: LD_INT 22
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 35
6549: PUSH
6550: LD_INT 22
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PPUSH
6566: CALL_OW 69
6570: AND
6571: IFFALSE 6678
6573: GO 6575
6575: DISABLE
// begin DialogueOn ;
6576: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
6580: LD_INT 22
6582: PUSH
6583: LD_INT 2
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 2
6592: PUSH
6593: LD_INT 34
6595: PUSH
6596: LD_INT 22
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: LD_INT 35
6605: PUSH
6606: LD_INT 22
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PPUSH
6622: CALL_OW 69
6626: PPUSH
6627: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
6631: LD_INT 10
6633: PPUSH
6634: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
6638: LD_EXP 16
6642: PPUSH
6643: LD_STRING DH-1-bal
6645: PPUSH
6646: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
6650: LD_EXP 23
6654: PPUSH
6655: LD_STRING DMar-1-bal
6657: PPUSH
6658: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
6662: LD_EXP 16
6666: PPUSH
6667: LD_STRING DH-2-bal
6669: PPUSH
6670: CALL_OW 88
// DialogueOff ;
6674: CALL_OW 7
// end ;
6678: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
6679: LD_EXP 20
6683: PPUSH
6684: CALL_OW 302
6688: PUSH
6689: LD_INT 22
6691: PUSH
6692: LD_INT 2
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PUSH
6699: LD_INT 30
6701: PUSH
6702: LD_INT 6
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PPUSH
6713: CALL_OW 69
6717: AND
6718: IFFALSE 6779
6720: GO 6722
6722: DISABLE
// begin DialogueOn ;
6723: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
6727: LD_EXP 20
6731: PPUSH
6732: LD_STRING DA-1-lab
6734: PPUSH
6735: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
6739: LD_EXP 16
6743: PPUSH
6744: LD_STRING DH-1-lab
6746: PPUSH
6747: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
6751: LD_EXP 20
6755: PPUSH
6756: LD_STRING DA-2-lab
6758: PPUSH
6759: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
6763: LD_EXP 16
6767: PPUSH
6768: LD_STRING DH-2-lab
6770: PPUSH
6771: CALL_OW 88
// DialogueOff ;
6775: CALL_OW 7
// end ;
6779: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) do var ape ;
6780: LD_EXP 21
6784: PPUSH
6785: CALL_OW 302
6789: PUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 2
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 25
6802: PUSH
6803: LD_INT 15
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PPUSH
6814: CALL_OW 69
6818: AND
6819: IFFALSE 6999
6821: GO 6823
6823: DISABLE
6824: LD_INT 0
6826: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
6827: LD_ADDR_VAR 0 1
6831: PUSH
6832: LD_INT 22
6834: PUSH
6835: LD_INT 2
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 25
6844: PUSH
6845: LD_INT 15
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PPUSH
6856: CALL_OW 69
6860: ST_TO_ADDR
// Video ( true ) ;
6861: LD_INT 1
6863: PPUSH
6864: CALL 889 0 1
// CenterNowOnUnits ( ape [ 1 ] ) ;
6868: LD_VAR 0 1
6872: PUSH
6873: LD_INT 1
6875: ARRAY
6876: PPUSH
6877: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
6881: LD_VAR 0 1
6885: PUSH
6886: LD_INT 1
6888: ARRAY
6889: PPUSH
6890: CALL_OW 122
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
6894: LD_VAR 0 1
6898: PUSH
6899: LD_INT 1
6901: ARRAY
6902: PPUSH
6903: LD_INT 35
6905: PPUSH
6906: LD_INT 28
6908: PPUSH
6909: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
6913: LD_VAR 0 1
6917: PUSH
6918: LD_INT 1
6920: ARRAY
6921: PPUSH
6922: LD_INT 36
6924: PPUSH
6925: LD_INT 17
6927: PPUSH
6928: CALL_OW 171
// Say ( Kaia , DK-1-apesol ) ;
6932: LD_EXP 21
6936: PPUSH
6937: LD_STRING DK-1-apesol
6939: PPUSH
6940: CALL_OW 88
// Say ( Aviradze , DA-1-apesol ) ;
6944: LD_EXP 20
6948: PPUSH
6949: LD_STRING DA-1-apesol
6951: PPUSH
6952: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
6956: LD_EXP 21
6960: PPUSH
6961: LD_STRING DK-2-apesol
6963: PPUSH
6964: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
6968: LD_EXP 20
6972: PPUSH
6973: LD_STRING DA-2-apesol
6975: PPUSH
6976: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
6980: LD_EXP 21
6984: PPUSH
6985: LD_STRING DK-3-apesol
6987: PPUSH
6988: CALL_OW 88
// Video ( false ) ;
6992: LD_INT 0
6994: PPUSH
6995: CALL 889 0 1
// end ;
6999: PPOPN 1
7001: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) do var ape ;
7002: LD_EXP 22
7006: PPUSH
7007: CALL_OW 302
7011: PUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 2
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 25
7024: PUSH
7025: LD_INT 16
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 69
7040: AND
7041: IFFALSE 7313
7043: GO 7045
7045: DISABLE
7046: LD_INT 0
7048: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
7049: LD_ADDR_VAR 0 1
7053: PUSH
7054: LD_INT 22
7056: PUSH
7057: LD_INT 2
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 25
7066: PUSH
7067: LD_INT 16
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PPUSH
7078: CALL_OW 69
7082: ST_TO_ADDR
// Video ( true ) ;
7083: LD_INT 1
7085: PPUSH
7086: CALL 889 0 1
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
7090: LD_INT 5
7092: PPUSH
7093: LD_INT 35
7095: PPUSH
7096: LD_INT 22
7098: PPUSH
7099: LD_INT 1
7101: PPUSH
7102: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
7106: LD_EXP 22
7110: PPUSH
7111: LD_VAR 0 1
7115: PUSH
7116: LD_INT 1
7118: ARRAY
7119: PPUSH
7120: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
7124: LD_VAR 0 1
7128: PUSH
7129: LD_INT 1
7131: ARRAY
7132: PPUSH
7133: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
7137: LD_VAR 0 1
7141: PUSH
7142: LD_INT 1
7144: ARRAY
7145: PPUSH
7146: CALL_OW 122
// wait ( 0 0$2 ) ;
7150: LD_INT 70
7152: PPUSH
7153: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
7157: LD_EXP 22
7161: PPUSH
7162: LD_STRING DS-1-apeeng
7164: PPUSH
7165: CALL_OW 88
// if IsOk ( Kamil ) then
7169: LD_EXP 19
7173: PPUSH
7174: CALL_OW 302
7178: IFFALSE 7306
// begin Say ( Kamil , DKam-1-apeeng ) ;
7180: LD_EXP 19
7184: PPUSH
7185: LD_STRING DKam-1-apeeng
7187: PPUSH
7188: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
7192: LD_EXP 22
7196: PPUSH
7197: LD_STRING DS-2-apeeng
7199: PPUSH
7200: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
7204: LD_EXP 19
7208: PPUSH
7209: LD_STRING DKam-2-apeeng
7211: PPUSH
7212: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
7216: LD_EXP 22
7220: PPUSH
7221: LD_STRING DS-3-apeeng
7223: PPUSH
7224: CALL_OW 88
// if not IsOK ( Kaia ) then
7228: LD_EXP 21
7232: PPUSH
7233: CALL_OW 302
7237: NOT
7238: IFFALSE 7249
// begin Video ( false ) ;
7240: LD_INT 0
7242: PPUSH
7243: CALL 889 0 1
// exit ;
7247: GO 7313
// end ; Say ( Kaia , DK-1-apeeng ) ;
7249: LD_EXP 21
7253: PPUSH
7254: LD_STRING DK-1-apeeng
7256: PPUSH
7257: CALL_OW 88
// if not IsOk ( Givi ) then
7261: LD_EXP 17
7265: PPUSH
7266: CALL_OW 302
7270: NOT
7271: IFFALSE 7282
// begin Video ( false ) ;
7273: LD_INT 0
7275: PPUSH
7276: CALL 889 0 1
// exit ;
7280: GO 7313
// end ; Say ( Givi , DG-1-apeeng ) ;
7282: LD_EXP 17
7286: PPUSH
7287: LD_STRING DG-1-apeeng
7289: PPUSH
7290: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
7294: LD_EXP 21
7298: PPUSH
7299: LD_STRING DK-2-apeeng
7301: PPUSH
7302: CALL_OW 88
// end ; Video ( false ) ;
7306: LD_INT 0
7308: PPUSH
7309: CALL 889 0 1
// end ;
7313: PPOPN 1
7315: END
// every 0 0$1 trigger farmerBaseReady do
7316: LD_EXP 4
7320: IFFALSE 7478
7322: GO 7324
7324: DISABLE
// begin DialogueOn ;
7325: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
7329: LD_EXP 24
7333: PPUSH
7334: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
7338: LD_EXP 24
7342: PPUSH
7343: LD_STRING DF-1-distribution
7345: PPUSH
7346: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
7350: LD_EXP 16
7354: PPUSH
7355: LD_STRING DH-2-distribution
7357: PPUSH
7358: CALL_OW 88
// if IsOk ( Kaia ) then
7362: LD_EXP 21
7366: PPUSH
7367: CALL_OW 302
7371: IFFALSE 7432
// begin Say ( Kaia , DK-1-distribution ) ;
7373: LD_EXP 21
7377: PPUSH
7378: LD_STRING DK-1-distribution
7380: PPUSH
7381: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
7385: LD_EXP 16
7389: PPUSH
7390: LD_STRING DH-1-distribution
7392: PPUSH
7393: CALL_OW 88
// if IsOk ( Givi ) then
7397: LD_EXP 17
7401: PPUSH
7402: CALL_OW 302
7406: IFFALSE 7432
// begin Say ( Givi , DG-1-distribution ) ;
7408: LD_EXP 17
7412: PPUSH
7413: LD_STRING DG-1-distribution
7415: PPUSH
7416: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
7420: LD_EXP 16
7424: PPUSH
7425: LD_STRING DH-3-distribution
7427: PPUSH
7428: CALL_OW 88
// end ; end ; DialogueOff ;
7432: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
7436: LD_STRING Crates1
7438: PPUSH
7439: CALL_OW 337
// farmerRequestedCrates := 300 ;
7443: LD_ADDR_EXP 14
7447: PUSH
7448: LD_INT 300
7450: ST_TO_ADDR
// Query ( FarmerCrates ) ;
7451: LD_STRING FarmerCrates
7453: PPUSH
7454: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
7458: LD_INT 10
7460: PPUSH
7461: LD_INT 1
7463: PPUSH
7464: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
7468: LD_INT 108
7470: PPUSH
7471: LD_INT 61
7473: PPUSH
7474: CALL_OW 86
// end ;
7478: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_lab ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
7479: LD_EXP 6
7483: PUSH
7484: LD_INT 22
7486: PUSH
7487: LD_INT 2
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 3
7496: PUSH
7497: LD_INT 57
7499: PUSH
7500: EMPTY
7501: LIST
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: PUSH
7507: LD_INT 30
7509: PUSH
7510: LD_INT 6
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: LIST
7521: PPUSH
7522: CALL_OW 69
7526: AND
7527: PUSH
7528: LD_INT 22
7530: PUSH
7531: LD_INT 2
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 3
7540: PUSH
7541: LD_INT 57
7543: PUSH
7544: EMPTY
7545: LIST
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 30
7553: PUSH
7554: LD_INT 4
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: PPUSH
7566: CALL_OW 69
7570: AND
7571: IFFALSE 7723
7573: GO 7575
7575: DISABLE
7576: LD_INT 0
7578: PPUSH
// begin wait ( 0 0$10 ) ;
7579: LD_INT 350
7581: PPUSH
7582: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
7586: LD_ADDR_VAR 0 1
7590: PUSH
7591: LD_EXP 29
7595: PPUSH
7596: LD_INT 26
7598: PUSH
7599: LD_INT 1
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: LD_INT 25
7608: PUSH
7609: LD_INT 2
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PPUSH
7620: CALL_OW 72
7624: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
7625: LD_EXP 16
7629: PPUSH
7630: LD_STRING DH-1-task
7632: PPUSH
7633: CALL_OW 88
// if IsOk ( Sophia ) then
7637: LD_EXP 22
7641: PPUSH
7642: CALL_OW 302
7646: IFFALSE 7674
// begin Say ( Sophia , DS-1-task ) ;
7648: LD_EXP 22
7652: PPUSH
7653: LD_STRING DS-1-task
7655: PPUSH
7656: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
7660: LD_EXP 16
7664: PPUSH
7665: LD_STRING DH-2-task
7667: PPUSH
7668: CALL_OW 88
// end else
7672: GO 7708
// if eng then
7674: LD_VAR 0 1
7678: IFFALSE 7708
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
7680: LD_VAR 0 1
7684: PUSH
7685: LD_INT 1
7687: ARRAY
7688: PPUSH
7689: LD_STRING DArm-1-task
7691: PPUSH
7692: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
7696: LD_EXP 16
7700: PPUSH
7701: LD_STRING DH-2-task
7703: PPUSH
7704: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
7708: LD_STRING BaseConstructed
7710: PPUSH
7711: CALL_OW 337
// allowConvoys := true ;
7715: LD_ADDR_EXP 12
7719: PUSH
7720: LD_INT 1
7722: ST_TO_ADDR
// end ;
7723: PPOPN 1
7725: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
7726: LD_EXP 4
7730: PUSH
7731: LD_EXP 13
7735: PUSH
7736: LD_INT 300
7738: GREATEREQUAL
7739: AND
7740: IFFALSE 7753
7742: GO 7744
7744: DISABLE
// begin farmerRequestedCrates := 600 ;
7745: LD_ADDR_EXP 14
7749: PUSH
7750: LD_INT 600
7752: ST_TO_ADDR
// end ;
7753: END
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
7754: LD_EXP 30
7758: PPUSH
7759: LD_INT 95
7761: PUSH
7762: LD_INT 8
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PPUSH
7769: CALL_OW 72
7773: IFFALSE 7866
7775: GO 7777
7777: DISABLE
7778: LD_INT 0
7780: PPUSH
// begin enable ;
7781: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
7782: LD_ADDR_VAR 0 1
7786: PUSH
7787: LD_EXP 30
7791: PPUSH
7792: LD_INT 95
7794: PUSH
7795: LD_INT 8
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 72
7806: PUSH
7807: FOR_IN
7808: IFFALSE 7837
// begin usForces := usForces diff i ;
7810: LD_ADDR_EXP 30
7814: PUSH
7815: LD_EXP 30
7819: PUSH
7820: LD_VAR 0 1
7824: DIFF
7825: ST_TO_ADDR
// RemoveUnit ( i ) ;
7826: LD_VAR 0 1
7830: PPUSH
7831: CALL_OW 64
// end ;
7835: GO 7807
7837: POP
7838: POP
// if not americanHasEscaped then
7839: LD_EXP 7
7843: NOT
7844: IFFALSE 7866
// begin americanHasEscaped := true ;
7846: LD_ADDR_EXP 7
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
7854: LD_EXP 16
7858: PPUSH
7859: LD_STRING DH-2-assault-a
7861: PPUSH
7862: CALL_OW 88
// end ; end ;
7866: PPOPN 1
7868: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 and FarmerOnMap do
7869: LD_INT 5
7871: PPUSH
7872: CALL_OW 255
7876: PUSH
7877: LD_INT 2
7879: EQUAL
7880: PUSH
7881: LD_EXP 9
7885: AND
7886: IFFALSE 7898
7888: GO 7890
7890: DISABLE
// YouLost ( Attack ) ; end_of_file
7891: LD_STRING Attack
7893: PPUSH
7894: CALL_OW 104
7898: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7899: LD_VAR 0 1
7903: PUSH
7904: LD_EXP 16
7908: EQUAL
7909: IFFALSE 7918
// YouLost ( Heike ) ;
7911: LD_STRING Heike
7913: PPUSH
7914: CALL_OW 104
// if un = Aviradze then
7918: LD_VAR 0 1
7922: PUSH
7923: LD_EXP 20
7927: EQUAL
7928: IFFALSE 7937
// YouLost ( Aviradze ) ;
7930: LD_STRING Aviradze
7932: PPUSH
7933: CALL_OW 104
// if un = usDepot and not retreatAllowed then
7937: LD_VAR 0 1
7941: PUSH
7942: LD_INT 11
7944: EQUAL
7945: PUSH
7946: LD_EXP 11
7950: NOT
7951: AND
7952: IFFALSE 7961
// YouLost ( Depot ) ;
7954: LD_STRING Depot
7956: PPUSH
7957: CALL_OW 104
// if un in usForces then
7961: LD_VAR 0 1
7965: PUSH
7966: LD_EXP 30
7970: IN
7971: IFFALSE 7989
// usForces := usForces diff un ;
7973: LD_ADDR_EXP 30
7977: PUSH
7978: LD_EXP 30
7982: PUSH
7983: LD_VAR 0 1
7987: DIFF
7988: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
7989: LD_VAR 0 1
7993: PUSH
7994: LD_INT 22
7996: PUSH
7997: LD_INT 2
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PUSH
8004: LD_INT 23
8006: PUSH
8007: LD_INT 2
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 21
8016: PUSH
8017: LD_INT 1
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: LIST
8028: PPUSH
8029: CALL_OW 69
8033: IN
8034: IFFALSE 8050
// deadCounter := deadCounter + 1 ;
8036: LD_ADDR_EXP 8
8040: PUSH
8041: LD_EXP 8
8045: PUSH
8046: LD_INT 1
8048: PLUS
8049: ST_TO_ADDR
// end ;
8050: PPOPN 1
8052: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
8053: LD_VAR 0 1
8057: PUSH
8058: LD_INT 2
8060: EQUAL
8061: PUSH
8062: LD_VAR 0 2
8066: PUSH
8067: LD_INT 5
8069: EQUAL
8070: AND
8071: IFFALSE 8080
// YouLost ( Attack ) ;
8073: LD_STRING Attack
8075: PPUSH
8076: CALL_OW 104
// end ;
8080: PPOPN 2
8082: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 then
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 255
8092: PUSH
8093: LD_INT 1
8095: EQUAL
8096: IFFALSE 8230
// begin if GetBType ( b ) = b_lab then
8098: LD_VAR 0 1
8102: PPUSH
8103: CALL_OW 266
8107: PUSH
8108: LD_INT 6
8110: EQUAL
8111: IFFALSE 8151
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
8113: LD_EXP 30
8117: PPUSH
8118: LD_INT 25
8120: PUSH
8121: LD_INT 4
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PPUSH
8128: CALL_OW 72
8132: PPUSH
8133: LD_VAR 0 1
8137: PPUSH
8138: CALL_OW 120
// AmLabResearch ( b ) ;
8142: LD_VAR 0 1
8146: PPUSH
8147: CALL 3901 0 1
// end ; if GetBType ( b ) = b_armoury then
8151: LD_VAR 0 1
8155: PPUSH
8156: CALL_OW 266
8160: PUSH
8161: LD_INT 4
8163: EQUAL
8164: IFFALSE 8212
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
8166: LD_EXP 30
8170: PPUSH
8171: LD_INT 25
8173: PUSH
8174: LD_INT 1
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 3
8183: PUSH
8184: LD_INT 54
8186: PUSH
8187: EMPTY
8188: LIST
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PPUSH
8198: CALL_OW 72
8202: PPUSH
8203: LD_VAR 0 1
8207: PPUSH
8208: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
8212: LD_ADDR_EXP 32
8216: PUSH
8217: LD_EXP 32
8221: PPUSH
8222: LD_INT 1
8224: PPUSH
8225: CALL_OW 3
8229: ST_TO_ADDR
// end ; end ; end_of_file
8230: PPOPN 1
8232: END
// every 0 0$40 + 0 0$10 trigger tick <= [ 3 3$00 , 2 2$00 , 1 1$30 ] [ Difficulty ] do
8233: LD_OWVAR 1
8237: PUSH
8238: LD_INT 6300
8240: PUSH
8241: LD_INT 4200
8243: PUSH
8244: LD_INT 3150
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: PUSH
8252: LD_OWVAR 67
8256: ARRAY
8257: LESSEQUAL
8258: IFFALSE 8285
8260: GO 8262
8262: DISABLE
// begin enable ;
8263: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
8264: LD_INT 1
8266: PPUSH
8267: LD_INT 5
8269: PPUSH
8270: CALL_OW 12
8274: PPUSH
8275: LD_INT 9
8277: PPUSH
8278: LD_INT 1
8280: PPUSH
8281: CALL_OW 55
// end ;
8285: END
// every 1 1$30 + 0 0$20 trigger americanBaseCaptured and tick <= [ 25 25$00 , 20 20$00 , 18 18$00 ] [ Difficulty ] do
8286: LD_EXP 6
8290: PUSH
8291: LD_OWVAR 1
8295: PUSH
8296: LD_INT 52500
8298: PUSH
8299: LD_INT 42000
8301: PUSH
8302: LD_INT 37800
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: LD_OWVAR 67
8314: ARRAY
8315: LESSEQUAL
8316: AND
8317: IFFALSE 8344
8319: GO 8321
8321: DISABLE
// begin enable ;
8322: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
8323: LD_INT 1
8325: PPUSH
8326: LD_INT 5
8328: PPUSH
8329: CALL_OW 12
8333: PPUSH
8334: LD_INT 9
8336: PPUSH
8337: LD_INT 1
8339: PPUSH
8340: CALL_OW 55
// end ; end_of_file
8344: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates <= farmerRequestedCrates do
8345: LD_EXP 4
8349: PUSH
8350: LD_EXP 13
8354: PUSH
8355: LD_EXP 14
8359: LESSEQUAL
8360: AND
8361: IFFALSE 8404
8363: GO 8365
8365: DISABLE
// begin enable ;
8366: ENABLE
// display_strings := [ #X103-1 , farmerCrates , farmerRequestedCrates ] ;
8367: LD_ADDR_OWVAR 47
8371: PUSH
8372: LD_STRING #X103-1
8374: PUSH
8375: LD_EXP 13
8379: PUSH
8380: LD_EXP 14
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: ST_TO_ADDR
// farmerCratesCounter := farmerCratesCounter - 0 0$1 ;
8390: LD_ADDR_EXP 15
8394: PUSH
8395: LD_EXP 15
8399: PUSH
8400: LD_INT 35
8402: MINUS
8403: ST_TO_ADDR
// end ; end_of_file
8404: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
8405: GO 8407
8407: DISABLE
// begin ru_radar := 98 ;
8408: LD_ADDR_EXP 33
8412: PUSH
8413: LD_INT 98
8415: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8416: LD_ADDR_EXP 34
8420: PUSH
8421: LD_INT 89
8423: ST_TO_ADDR
// us_hack := 99 ;
8424: LD_ADDR_EXP 35
8428: PUSH
8429: LD_INT 99
8431: ST_TO_ADDR
// us_artillery := 97 ;
8432: LD_ADDR_EXP 36
8436: PUSH
8437: LD_INT 97
8439: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8440: LD_ADDR_EXP 37
8444: PUSH
8445: LD_INT 91
8447: ST_TO_ADDR
// tech_Artillery := 80 ;
8448: LD_ADDR_EXP 38
8452: PUSH
8453: LD_INT 80
8455: ST_TO_ADDR
// tech_RadMat := 81 ;
8456: LD_ADDR_EXP 39
8460: PUSH
8461: LD_INT 81
8463: ST_TO_ADDR
// tech_BasicTools := 82 ;
8464: LD_ADDR_EXP 40
8468: PUSH
8469: LD_INT 82
8471: ST_TO_ADDR
// tech_Cargo := 83 ;
8472: LD_ADDR_EXP 41
8476: PUSH
8477: LD_INT 83
8479: ST_TO_ADDR
// tech_Track := 84 ;
8480: LD_ADDR_EXP 42
8484: PUSH
8485: LD_INT 84
8487: ST_TO_ADDR
// tech_Crane := 85 ;
8488: LD_ADDR_EXP 43
8492: PUSH
8493: LD_INT 85
8495: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8496: LD_ADDR_EXP 44
8500: PUSH
8501: LD_INT 86
8503: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8504: LD_ADDR_EXP 45
8508: PUSH
8509: LD_INT 87
8511: ST_TO_ADDR
// end ;
8512: END
