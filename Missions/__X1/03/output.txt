// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// PrepareNature ;
   8: CALL 619 0 0
// PrepareArabian ;
  12: CALL 1934 0 0
// PrepareAmerican ;
  16: CALL 4712 0 0
// Action ;
  20: CALL 9199 0 0
// end ;
  24: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// prefix := 02_ ;
  36: LD_ADDR_EXP 2
  40: PUSH
  41: LD_STRING 02_
  43: ST_TO_ADDR
// eventAttack := 1 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// deadCounter := 0 ;
  52: LD_ADDR_EXP 8
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// gameStarted := false ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// farmerBaseReady := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// americanBaseSpoted := false ;
  76: LD_ADDR_EXP 5
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// americanBaseCaptured := false ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// americanHasEscaped := false ;
  92: LD_ADDR_EXP 7
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// workshopBuilded := false ;
 100: LD_ADDR_EXP 9
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// retreatAllowed := false ;
 108: LD_ADDR_EXP 10
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// allowConvoys := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// farmerCrates := 0 ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// farmerCratesCounter := 30 30$00 ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: LD_INT 63000
 147: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 148: LD_ADDR_EXP 15
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// attackWave := 1 ;
 156: LD_ADDR_EXP 16
 160: PUSH
 161: LD_INT 1
 163: ST_TO_ADDR
// omarCargoCounter := [ 6 , 9 , 12 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 17
 168: PUSH
 169: LD_INT 6
 171: PUSH
 172: LD_INT 9
 174: PUSH
 175: LD_INT 12
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// vehCounter := 0 ;
 189: LD_ADDR_EXP 18
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// convoyCounter := 0 ;
 197: LD_ADDR_EXP 19
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// ibrahimInDepot := false ;
 205: LD_ADDR_EXP 21
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// ibrahimIsFree := false ;
 213: LD_ADDR_EXP 22
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// maxConvoys := [ 16 , 15 , 14 ] [ Difficulty ] ;
 221: LD_ADDR_EXP 23
 225: PUSH
 226: LD_INT 16
 228: PUSH
 229: LD_INT 15
 231: PUSH
 232: LD_INT 14
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: LD_OWVAR 67
 244: ARRAY
 245: ST_TO_ADDR
// end ; end_of_file
 246: LD_VAR 0 1
 250: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 251: LD_INT 0
 253: PPUSH
 254: PPUSH
// if exist_mode then
 255: LD_VAR 0 2
 259: IFFALSE 284
// unit := CreateCharacter ( prefix & ident ) else
 261: LD_ADDR_VAR 0 5
 265: PUSH
 266: LD_VAR 0 3
 270: PUSH
 271: LD_VAR 0 1
 275: STR
 276: PPUSH
 277: CALL_OW 34
 281: ST_TO_ADDR
 282: GO 299
// unit := NewCharacter ( ident ) ;
 284: LD_ADDR_VAR 0 5
 288: PUSH
 289: LD_VAR 0 1
 293: PPUSH
 294: CALL_OW 25
 298: ST_TO_ADDR
// result := unit ;
 299: LD_ADDR_VAR 0 4
 303: PUSH
 304: LD_VAR 0 5
 308: ST_TO_ADDR
// end ;
 309: LD_VAR 0 4
 313: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 314: LD_INT 0
 316: PPUSH
// uc_side := side ;
 317: LD_ADDR_OWVAR 20
 321: PUSH
 322: LD_VAR 0 1
 326: ST_TO_ADDR
// uc_nation := nation ;
 327: LD_ADDR_OWVAR 21
 331: PUSH
 332: LD_VAR 0 2
 336: ST_TO_ADDR
// vc_chassis := chassis ;
 337: LD_ADDR_OWVAR 37
 341: PUSH
 342: LD_VAR 0 3
 346: ST_TO_ADDR
// vc_engine := engine ;
 347: LD_ADDR_OWVAR 39
 351: PUSH
 352: LD_VAR 0 4
 356: ST_TO_ADDR
// vc_control := control ;
 357: LD_ADDR_OWVAR 38
 361: PUSH
 362: LD_VAR 0 5
 366: ST_TO_ADDR
// vc_weapon := weapon ;
 367: LD_ADDR_OWVAR 40
 371: PUSH
 372: LD_VAR 0 6
 376: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 377: LD_ADDR_OWVAR 41
 381: PUSH
 382: LD_VAR 0 7
 386: ST_TO_ADDR
// result := CreateVehicle ;
 387: LD_ADDR_VAR 0 8
 391: PUSH
 392: CALL_OW 45
 396: ST_TO_ADDR
// end ;
 397: LD_VAR 0 8
 401: RET
// export function SayX ( units , ident ) ; var i ; begin
 402: LD_INT 0
 404: PPUSH
 405: PPUSH
// result := false ;
 406: LD_ADDR_VAR 0 3
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// if not units then
 414: LD_VAR 0 1
 418: NOT
 419: IFFALSE 423
// exit ;
 421: GO 477
// for i in units do
 423: LD_ADDR_VAR 0 4
 427: PUSH
 428: LD_VAR 0 1
 432: PUSH
 433: FOR_IN
 434: IFFALSE 475
// if IsOk ( i ) then
 436: LD_VAR 0 4
 440: PPUSH
 441: CALL_OW 302
 445: IFFALSE 473
// begin Say ( i , ident ) ;
 447: LD_VAR 0 4
 451: PPUSH
 452: LD_VAR 0 2
 456: PPUSH
 457: CALL_OW 88
// result := i ;
 461: LD_ADDR_VAR 0 3
 465: PUSH
 466: LD_VAR 0 4
 470: ST_TO_ADDR
// break ;
 471: GO 475
// end ;
 473: GO 433
 475: POP
 476: POP
// end ;
 477: LD_VAR 0 3
 481: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 482: LD_INT 0
 484: PPUSH
 485: PPUSH
// InitUc ;
 486: CALL_OW 18
// InitHc ;
 490: CALL_OW 19
// uc_side := 0 ;
 494: LD_ADDR_OWVAR 20
 498: PUSH
 499: LD_INT 0
 501: ST_TO_ADDR
// uc_nation := 0 ;
 502: LD_ADDR_OWVAR 21
 506: PUSH
 507: LD_INT 0
 509: ST_TO_ADDR
// for i = 1 to amount do
 510: LD_ADDR_VAR 0 4
 514: PUSH
 515: DOUBLE
 516: LD_INT 1
 518: DEC
 519: ST_TO_ADDR
 520: LD_VAR 0 2
 524: PUSH
 525: FOR_TO
 526: IFFALSE 608
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 528: LD_ADDR_OWVAR 29
 532: PUSH
 533: LD_INT 9
 535: PPUSH
 536: LD_INT 12
 538: PPUSH
 539: CALL_OW 12
 543: PUSH
 544: LD_INT 9
 546: PPUSH
 547: LD_INT 12
 549: PPUSH
 550: CALL_OW 12
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 559: LD_ADDR_OWVAR 35
 563: PUSH
 564: LD_INT 1
 566: NEG
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: CALL_OW 12
 575: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 576: LD_INT 0
 578: PPUSH
 579: LD_INT 12
 581: PPUSH
 582: LD_INT 1
 584: PPUSH
 585: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 589: CALL_OW 44
 593: PPUSH
 594: LD_VAR 0 1
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 49
// end ;
 606: GO 525
 608: POP
 609: POP
// InitHc ;
 610: CALL_OW 19
// end ;
 614: LD_VAR 0 3
 618: RET
// export function PrepareNature ; var i ; begin
 619: LD_INT 0
 621: PPUSH
 622: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 623: LD_INT 2
 625: PPUSH
 626: LD_INT 4
 628: PUSH
 629: LD_INT 4
 631: PUSH
 632: LD_INT 3
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: LIST
 639: PUSH
 640: LD_OWVAR 67
 644: ARRAY
 645: PPUSH
 646: CALL 482 0 2
// for i := 1 to 3 do
 650: LD_ADDR_VAR 0 2
 654: PUSH
 655: DOUBLE
 656: LD_INT 1
 658: DEC
 659: ST_TO_ADDR
 660: LD_INT 3
 662: PUSH
 663: FOR_TO
 664: IFFALSE 699
// begin hc_class := 21 ;
 666: LD_ADDR_OWVAR 28
 670: PUSH
 671: LD_INT 21
 673: ST_TO_ADDR
// hc_gallery :=  ;
 674: LD_ADDR_OWVAR 33
 678: PUSH
 679: LD_STRING 
 681: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 682: CALL_OW 44
 686: PPUSH
 687: LD_INT 2
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 49
// end ;
 697: GO 663
 699: POP
 700: POP
// for i := 1 to 2 do
 701: LD_ADDR_VAR 0 2
 705: PUSH
 706: DOUBLE
 707: LD_INT 1
 709: DEC
 710: ST_TO_ADDR
 711: LD_INT 2
 713: PUSH
 714: FOR_TO
 715: IFFALSE 750
// begin hc_class := 18 ;
 717: LD_ADDR_OWVAR 28
 721: PUSH
 722: LD_INT 18
 724: ST_TO_ADDR
// hc_gallery :=  ;
 725: LD_ADDR_OWVAR 33
 729: PUSH
 730: LD_STRING 
 732: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 733: CALL_OW 44
 737: PPUSH
 738: LD_INT 2
 740: PPUSH
 741: LD_INT 0
 743: PPUSH
 744: CALL_OW 49
// end ;
 748: GO 714
 750: POP
 751: POP
// for i := 1 to 2 do
 752: LD_ADDR_VAR 0 2
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_INT 2
 764: PUSH
 765: FOR_TO
 766: IFFALSE 801
// begin hc_class := 13 ;
 768: LD_ADDR_OWVAR 28
 772: PUSH
 773: LD_INT 13
 775: ST_TO_ADDR
// hc_gallery :=  ;
 776: LD_ADDR_OWVAR 33
 780: PUSH
 781: LD_STRING 
 783: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 784: CALL_OW 44
 788: PPUSH
 789: LD_INT 2
 791: PPUSH
 792: LD_INT 0
 794: PPUSH
 795: CALL_OW 49
// end ;
 799: GO 765
 801: POP
 802: POP
// end ;
 803: LD_VAR 0 1
 807: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 808: LD_INT 0
 810: PPUSH
 811: PPUSH
 812: PPUSH
// if not observer or not unit then
 813: LD_VAR 0 1
 817: NOT
 818: PUSH
 819: LD_VAR 0 2
 823: NOT
 824: OR
 825: IFFALSE 829
// exit ;
 827: GO 877
// if not See ( GetSide ( observer ) , unit ) then
 829: LD_VAR 0 1
 833: PPUSH
 834: CALL_OW 255
 838: PPUSH
 839: LD_VAR 0 2
 843: PPUSH
 844: CALL_OW 292
 848: NOT
 849: IFFALSE 853
// exit ;
 851: GO 877
// result := GetDistUnits ( observer , unit ) < 12 ;
 853: LD_ADDR_VAR 0 3
 857: PUSH
 858: LD_VAR 0 1
 862: PPUSH
 863: LD_VAR 0 2
 867: PPUSH
 868: CALL_OW 296
 872: PUSH
 873: LD_INT 12
 875: LESS
 876: ST_TO_ADDR
// end ;
 877: LD_VAR 0 3
 881: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 882: LD_INT 0
 884: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 885: LD_VAR 0 2
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PPUSH
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 2
 901: ARRAY
 902: PPUSH
 903: CALL_OW 488
 907: PUSH
 908: LD_VAR 0 2
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: PPUSH
 917: LD_VAR 0 2
 921: PUSH
 922: LD_INT 2
 924: ARRAY
 925: PPUSH
 926: CALL_OW 428
 930: PUSH
 931: LD_INT 0
 933: EQUAL
 934: AND
 935: IFFALSE 969
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 937: LD_VAR 0 1
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: LD_VAR 0 3
 964: PPUSH
 965: CALL_OW 48
// end ;
 969: LD_VAR 0 4
 973: RET
// export function Video ( mode ) ; begin
 974: LD_INT 0
 976: PPUSH
// ingame_video = mode ;
 977: LD_ADDR_OWVAR 52
 981: PUSH
 982: LD_VAR 0 1
 986: ST_TO_ADDR
// interface_hidden = mode ;
 987: LD_ADDR_OWVAR 54
 991: PUSH
 992: LD_VAR 0 1
 996: ST_TO_ADDR
// end ;
 997: LD_VAR 0 2
1001: RET
// export function ReverseArray ( array ) ; var i ; begin
1002: LD_INT 0
1004: PPUSH
1005: PPUSH
// if not array then
1006: LD_VAR 0 1
1010: NOT
1011: IFFALSE 1015
// exit ;
1013: GO 1073
// result := [ ] ;
1015: LD_ADDR_VAR 0 2
1019: PUSH
1020: EMPTY
1021: ST_TO_ADDR
// for i := 1 to array do
1022: LD_ADDR_VAR 0 3
1026: PUSH
1027: DOUBLE
1028: LD_INT 1
1030: DEC
1031: ST_TO_ADDR
1032: LD_VAR 0 1
1036: PUSH
1037: FOR_TO
1038: IFFALSE 1071
// result := Insert ( result , 1 , array [ i ] ) ;
1040: LD_ADDR_VAR 0 2
1044: PUSH
1045: LD_VAR 0 2
1049: PPUSH
1050: LD_INT 1
1052: PPUSH
1053: LD_VAR 0 1
1057: PUSH
1058: LD_VAR 0 3
1062: ARRAY
1063: PPUSH
1064: CALL_OW 2
1068: ST_TO_ADDR
1069: GO 1037
1071: POP
1072: POP
// end ;
1073: LD_VAR 0 2
1077: RET
// export function ComExit ( unit ) ; begin
1078: LD_INT 0
1080: PPUSH
// result := IsInUnit ( unit ) ;
1081: LD_ADDR_VAR 0 2
1085: PUSH
1086: LD_VAR 0 1
1090: PPUSH
1091: CALL_OW 310
1095: ST_TO_ADDR
// if not result then
1096: LD_VAR 0 2
1100: NOT
1101: IFFALSE 1105
// exit ;
1103: GO 1140
// if GetType ( result ) = unit_vehicle then
1105: LD_VAR 0 2
1109: PPUSH
1110: CALL_OW 247
1114: PUSH
1115: LD_INT 2
1117: EQUAL
1118: IFFALSE 1131
// ComExitVehicle ( unit ) else
1120: LD_VAR 0 1
1124: PPUSH
1125: CALL_OW 121
1129: GO 1140
// ComExitBuilding ( unit ) ;
1131: LD_VAR 0 1
1135: PPUSH
1136: CALL_OW 122
// end ;
1140: LD_VAR 0 2
1144: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1145: LD_INT 0
1147: PPUSH
1148: PPUSH
// if not side or not nation then
1149: LD_VAR 0 1
1153: NOT
1154: PUSH
1155: LD_VAR 0 2
1159: NOT
1160: OR
1161: IFFALSE 1165
// exit ;
1163: GO 1929
// case nation of nation_american :
1165: LD_VAR 0 2
1169: PUSH
1170: LD_INT 1
1172: DOUBLE
1173: EQUAL
1174: IFTRUE 1178
1176: GO 1392
1178: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1179: LD_ADDR_VAR 0 4
1183: PUSH
1184: LD_INT 35
1186: PUSH
1187: LD_INT 45
1189: PUSH
1190: LD_INT 46
1192: PUSH
1193: LD_INT 47
1195: PUSH
1196: LD_INT 82
1198: PUSH
1199: LD_INT 83
1201: PUSH
1202: LD_INT 84
1204: PUSH
1205: LD_INT 85
1207: PUSH
1208: LD_INT 86
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 2
1216: PUSH
1217: LD_INT 6
1219: PUSH
1220: LD_INT 15
1222: PUSH
1223: LD_INT 16
1225: PUSH
1226: LD_INT 7
1228: PUSH
1229: LD_INT 12
1231: PUSH
1232: LD_INT 13
1234: PUSH
1235: LD_INT 10
1237: PUSH
1238: LD_INT 14
1240: PUSH
1241: LD_INT 20
1243: PUSH
1244: LD_INT 21
1246: PUSH
1247: LD_INT 22
1249: PUSH
1250: LD_INT 25
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: LD_INT 27
1258: PUSH
1259: LD_INT 36
1261: PUSH
1262: LD_INT 69
1264: PUSH
1265: LD_INT 39
1267: PUSH
1268: LD_INT 34
1270: PUSH
1271: LD_INT 40
1273: PUSH
1274: LD_INT 48
1276: PUSH
1277: LD_INT 49
1279: PUSH
1280: LD_INT 50
1282: PUSH
1283: LD_INT 51
1285: PUSH
1286: LD_INT 52
1288: PUSH
1289: LD_INT 53
1291: PUSH
1292: LD_INT 54
1294: PUSH
1295: LD_INT 55
1297: PUSH
1298: LD_INT 56
1300: PUSH
1301: LD_INT 57
1303: PUSH
1304: LD_INT 58
1306: PUSH
1307: LD_INT 59
1309: PUSH
1310: LD_INT 60
1312: PUSH
1313: LD_INT 61
1315: PUSH
1316: LD_INT 62
1318: PUSH
1319: LD_INT 80
1321: PUSH
1322: LD_INT 82
1324: PUSH
1325: LD_INT 83
1327: PUSH
1328: LD_INT 84
1330: PUSH
1331: LD_INT 85
1333: PUSH
1334: LD_INT 86
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: ST_TO_ADDR
1390: GO 1853
1392: LD_INT 2
1394: DOUBLE
1395: EQUAL
1396: IFTRUE 1400
1398: GO 1622
1400: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1401: LD_ADDR_VAR 0 4
1405: PUSH
1406: LD_INT 35
1408: PUSH
1409: LD_INT 45
1411: PUSH
1412: LD_INT 46
1414: PUSH
1415: LD_INT 47
1417: PUSH
1418: LD_INT 82
1420: PUSH
1421: LD_INT 83
1423: PUSH
1424: LD_INT 84
1426: PUSH
1427: LD_INT 85
1429: PUSH
1430: LD_INT 87
1432: PUSH
1433: LD_INT 70
1435: PUSH
1436: LD_INT 1
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 4
1447: PUSH
1448: LD_INT 5
1450: PUSH
1451: LD_INT 6
1453: PUSH
1454: LD_INT 15
1456: PUSH
1457: LD_INT 18
1459: PUSH
1460: LD_INT 7
1462: PUSH
1463: LD_INT 17
1465: PUSH
1466: LD_INT 8
1468: PUSH
1469: LD_INT 20
1471: PUSH
1472: LD_INT 21
1474: PUSH
1475: LD_INT 22
1477: PUSH
1478: LD_INT 72
1480: PUSH
1481: LD_INT 26
1483: PUSH
1484: LD_INT 69
1486: PUSH
1487: LD_INT 39
1489: PUSH
1490: LD_INT 40
1492: PUSH
1493: LD_INT 41
1495: PUSH
1496: LD_INT 42
1498: PUSH
1499: LD_INT 43
1501: PUSH
1502: LD_INT 48
1504: PUSH
1505: LD_INT 49
1507: PUSH
1508: LD_INT 50
1510: PUSH
1511: LD_INT 51
1513: PUSH
1514: LD_INT 52
1516: PUSH
1517: LD_INT 53
1519: PUSH
1520: LD_INT 54
1522: PUSH
1523: LD_INT 55
1525: PUSH
1526: LD_INT 56
1528: PUSH
1529: LD_INT 60
1531: PUSH
1532: LD_INT 61
1534: PUSH
1535: LD_INT 62
1537: PUSH
1538: LD_INT 66
1540: PUSH
1541: LD_INT 67
1543: PUSH
1544: LD_INT 68
1546: PUSH
1547: LD_INT 81
1549: PUSH
1550: LD_INT 82
1552: PUSH
1553: LD_INT 83
1555: PUSH
1556: LD_INT 84
1558: PUSH
1559: LD_INT 85
1561: PUSH
1562: LD_INT 87
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: ST_TO_ADDR
1620: GO 1853
1622: LD_INT 3
1624: DOUBLE
1625: EQUAL
1626: IFTRUE 1630
1628: GO 1852
1630: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1631: LD_ADDR_VAR 0 4
1635: PUSH
1636: LD_INT 46
1638: PUSH
1639: LD_INT 47
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 2
1647: PUSH
1648: LD_INT 82
1650: PUSH
1651: LD_INT 83
1653: PUSH
1654: LD_INT 84
1656: PUSH
1657: LD_INT 85
1659: PUSH
1660: LD_INT 86
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: LD_INT 9
1668: PUSH
1669: LD_INT 20
1671: PUSH
1672: LD_INT 19
1674: PUSH
1675: LD_INT 21
1677: PUSH
1678: LD_INT 24
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 25
1686: PUSH
1687: LD_INT 28
1689: PUSH
1690: LD_INT 29
1692: PUSH
1693: LD_INT 30
1695: PUSH
1696: LD_INT 31
1698: PUSH
1699: LD_INT 37
1701: PUSH
1702: LD_INT 38
1704: PUSH
1705: LD_INT 32
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 33
1713: PUSH
1714: LD_INT 69
1716: PUSH
1717: LD_INT 39
1719: PUSH
1720: LD_INT 34
1722: PUSH
1723: LD_INT 40
1725: PUSH
1726: LD_INT 71
1728: PUSH
1729: LD_INT 23
1731: PUSH
1732: LD_INT 44
1734: PUSH
1735: LD_INT 48
1737: PUSH
1738: LD_INT 49
1740: PUSH
1741: LD_INT 50
1743: PUSH
1744: LD_INT 51
1746: PUSH
1747: LD_INT 52
1749: PUSH
1750: LD_INT 53
1752: PUSH
1753: LD_INT 54
1755: PUSH
1756: LD_INT 55
1758: PUSH
1759: LD_INT 56
1761: PUSH
1762: LD_INT 57
1764: PUSH
1765: LD_INT 58
1767: PUSH
1768: LD_INT 59
1770: PUSH
1771: LD_INT 63
1773: PUSH
1774: LD_INT 64
1776: PUSH
1777: LD_INT 65
1779: PUSH
1780: LD_INT 82
1782: PUSH
1783: LD_INT 83
1785: PUSH
1786: LD_INT 84
1788: PUSH
1789: LD_INT 85
1791: PUSH
1792: LD_INT 86
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: ST_TO_ADDR
1850: GO 1853
1852: POP
// if state > - 1 and state < 3 then
1853: LD_VAR 0 3
1857: PUSH
1858: LD_INT 1
1860: NEG
1861: GREATER
1862: PUSH
1863: LD_VAR 0 3
1867: PUSH
1868: LD_INT 3
1870: LESS
1871: AND
1872: IFFALSE 1929
// for i in result do
1874: LD_ADDR_VAR 0 5
1878: PUSH
1879: LD_VAR 0 4
1883: PUSH
1884: FOR_IN
1885: IFFALSE 1927
// if GetTech ( i , side ) <> state then
1887: LD_VAR 0 5
1891: PPUSH
1892: LD_VAR 0 1
1896: PPUSH
1897: CALL_OW 321
1901: PUSH
1902: LD_VAR 0 3
1906: NONEQUAL
1907: IFFALSE 1925
// result := result diff i ;
1909: LD_ADDR_VAR 0 4
1913: PUSH
1914: LD_VAR 0 4
1918: PUSH
1919: LD_VAR 0 5
1923: DIFF
1924: ST_TO_ADDR
1925: GO 1884
1927: POP
1928: POP
// end ; end_of_file
1929: LD_VAR 0 4
1933: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1934: LD_INT 0
1936: PPUSH
1937: PPUSH
1938: PPUSH
1939: PPUSH
// uc_side := 5 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 5
1947: ST_TO_ADDR
// uc_nation := 2 ;
1948: LD_ADDR_OWVAR 21
1952: PUSH
1953: LD_INT 2
1955: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 274
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: LD_INT 45
1969: PPUSH
1970: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1974: LD_ADDR_EXP 32
1978: PUSH
1979: LD_STRING Farmer
1981: PPUSH
1982: LD_INT 0
1984: PPUSH
1985: LD_STRING 
1987: PPUSH
1988: CALL 251 0 3
1992: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1993: LD_ADDR_EXP 33
1997: PUSH
1998: LD_STRING Omar
2000: PPUSH
2001: LD_INT 0
2003: PPUSH
2004: LD_STRING 
2006: PPUSH
2007: CALL 251 0 3
2011: ST_TO_ADDR
// omarSquad := [ ] ;
2012: LD_ADDR_EXP 36
2016: PUSH
2017: EMPTY
2018: ST_TO_ADDR
// heikeSquad := [ ] ;
2019: LD_ADDR_EXP 37
2023: PUSH
2024: EMPTY
2025: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
2026: LD_ADDR_EXP 38
2030: PUSH
2031: EMPTY
2032: ST_TO_ADDR
// omarCargo := [ ] ;
2033: LD_ADDR_EXP 39
2037: PUSH
2038: EMPTY
2039: ST_TO_ADDR
// for i := 1 to 5 do
2040: LD_ADDR_VAR 0 2
2044: PUSH
2045: DOUBLE
2046: LD_INT 1
2048: DEC
2049: ST_TO_ADDR
2050: LD_INT 5
2052: PUSH
2053: FOR_TO
2054: IFFALSE 2212
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
2056: LD_INT 0
2058: PPUSH
2059: LD_INT 1
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: LD_INT 2
2067: PUSH
2068: LD_INT 1
2070: PUSH
2071: LD_INT 1
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: PUSH
2081: LD_VAR 0 2
2085: ARRAY
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: CALL_OW 380
// un := CreateHuman ;
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: CALL_OW 44
2103: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2104: LD_ADDR_EXP 36
2108: PUSH
2109: LD_EXP 36
2113: PUSH
2114: LD_VAR 0 3
2118: UNION
2119: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
2120: LD_VAR 0 3
2124: PPUSH
2125: LD_INT 87
2127: PUSH
2128: LD_INT 30
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: LD_INT 91
2137: PUSH
2138: LD_INT 32
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PUSH
2145: LD_INT 82
2147: PUSH
2148: LD_INT 15
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 79
2157: PUSH
2158: LD_INT 14
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: LD_INT 82
2167: PUSH
2168: LD_INT 13
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: PUSH
2182: LD_VAR 0 2
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL 882 0 3
// ComTurnXY ( un , 93 , 21 ) ;
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 93
2202: PPUSH
2203: LD_INT 21
2205: PPUSH
2206: CALL_OW 118
// end ;
2210: GO 2053
2212: POP
2213: POP
// uc_side := 2 ;
2214: LD_ADDR_OWVAR 20
2218: PUSH
2219: LD_INT 2
2221: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2222: LD_ADDR_EXP 24
2226: PUSH
2227: LD_STRING Heike
2229: PPUSH
2230: LD_EXP 1
2234: NOT
2235: PPUSH
2236: LD_EXP 2
2240: PPUSH
2241: CALL 251 0 3
2245: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2246: LD_ADDR_EXP 28
2250: PUSH
2251: LD_STRING Aviradze
2253: PPUSH
2254: LD_EXP 1
2258: NOT
2259: PPUSH
2260: LD_EXP 2
2264: PPUSH
2265: CALL 251 0 3
2269: ST_TO_ADDR
// tmp := [ ] ;
2270: LD_ADDR_VAR 0 4
2274: PUSH
2275: EMPTY
2276: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2277: LD_ADDR_EXP 25
2281: PUSH
2282: LD_STRING Givi
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_EXP 2
2295: PPUSH
2296: CALL 251 0 3
2300: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2301: LD_ADDR_EXP 26
2305: PUSH
2306: LD_STRING Mike
2308: PPUSH
2309: LD_EXP 1
2313: NOT
2314: PPUSH
2315: LD_EXP 2
2319: PPUSH
2320: CALL 251 0 3
2324: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2325: LD_ADDR_EXP 27
2329: PUSH
2330: LD_STRING Kamil
2332: PPUSH
2333: LD_EXP 1
2337: NOT
2338: PPUSH
2339: LD_EXP 2
2343: PPUSH
2344: CALL 251 0 3
2348: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2349: LD_ADDR_EXP 29
2353: PUSH
2354: LD_STRING Kaia
2356: PPUSH
2357: LD_EXP 1
2361: NOT
2362: PPUSH
2363: LD_EXP 2
2367: PPUSH
2368: CALL 251 0 3
2372: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2373: LD_ADDR_EXP 30
2377: PUSH
2378: LD_STRING Sophia
2380: PPUSH
2381: LD_EXP 1
2385: NOT
2386: PPUSH
2387: LD_EXP 2
2391: PPUSH
2392: CALL 251 0 3
2396: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2397: LD_ADDR_EXP 31
2401: PUSH
2402: LD_STRING Markov
2404: PPUSH
2405: LD_EXP 1
2409: NOT
2410: PPUSH
2411: LD_EXP 2
2415: PPUSH
2416: CALL 251 0 3
2420: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
2421: LD_ADDR_EXP 38
2425: PUSH
2426: LD_STRING 02_others
2428: PPUSH
2429: CALL_OW 31
2433: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
2434: LD_ADDR_VAR 0 4
2438: PUSH
2439: LD_EXP 26
2443: PUSH
2444: LD_EXP 27
2448: PUSH
2449: LD_EXP 29
2453: PUSH
2454: LD_EXP 30
2458: PUSH
2459: LD_EXP 31
2463: PUSH
2464: LD_EXP 25
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: PUSH
2477: LD_EXP 38
2481: ADD
2482: PUSH
2483: LD_INT 0
2485: DIFF
2486: ST_TO_ADDR
// heikeSquad := tmp ;
2487: LD_ADDR_EXP 37
2491: PUSH
2492: LD_VAR 0 4
2496: ST_TO_ADDR
// uc_nation := 0 ;
2497: LD_ADDR_OWVAR 21
2501: PUSH
2502: LD_INT 0
2504: ST_TO_ADDR
// hc_class := class_apeman ;
2505: LD_ADDR_OWVAR 28
2509: PUSH
2510: LD_INT 12
2512: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2513: LD_ADDR_OWVAR 31
2517: PUSH
2518: LD_INT 0
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: LD_INT 0
2526: PUSH
2527: LD_INT 0
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: ST_TO_ADDR
// hc_gallery :=  ;
2536: LD_ADDR_OWVAR 33
2540: PUSH
2541: LD_STRING 
2543: ST_TO_ADDR
// hc_name :=  ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING 
2551: ST_TO_ADDR
// tmp := tmp union CreateHuman ;
2552: LD_ADDR_VAR 0 4
2556: PUSH
2557: LD_VAR 0 4
2561: PUSH
2562: CALL_OW 44
2566: UNION
2567: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
2568: LD_EXP 24
2572: PPUSH
2573: LD_INT 92
2575: PPUSH
2576: LD_INT 17
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
2586: LD_EXP 32
2590: PPUSH
2591: LD_INT 95
2593: PPUSH
2594: LD_INT 19
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
2604: LD_EXP 33
2608: PPUSH
2609: LD_INT 89
2611: PPUSH
2612: LD_INT 25
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
2622: LD_EXP 28
2626: PPUSH
2627: LD_INT 92
2629: PPUSH
2630: LD_INT 27
2632: PPUSH
2633: LD_INT 0
2635: PPUSH
2636: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
2640: LD_EXP 33
2644: PPUSH
2645: LD_EXP 28
2649: PPUSH
2650: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
2654: LD_EXP 28
2658: PPUSH
2659: LD_EXP 33
2663: PPUSH
2664: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
2668: LD_EXP 24
2672: PUSH
2673: LD_EXP 32
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PPUSH
2682: LD_EXP 33
2686: PPUSH
2687: CALL_OW 119
// if tmp then
2691: LD_VAR 0 4
2695: IFFALSE 2749
// for i in tmp do
2697: LD_ADDR_VAR 0 2
2701: PUSH
2702: LD_VAR 0 4
2706: PUSH
2707: FOR_IN
2708: IFFALSE 2747
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
2710: LD_VAR 0 2
2714: PPUSH
2715: LD_INT 94
2717: PPUSH
2718: LD_INT 14
2720: PPUSH
2721: LD_INT 4
2723: PPUSH
2724: LD_INT 0
2726: PPUSH
2727: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
2731: LD_VAR 0 2
2735: PPUSH
2736: LD_EXP 24
2740: PPUSH
2741: CALL_OW 119
// end ;
2745: GO 2707
2747: POP
2748: POP
// farmerSquad := [ ] ;
2749: LD_ADDR_EXP 35
2753: PUSH
2754: EMPTY
2755: ST_TO_ADDR
// uc_side := 5 ;
2756: LD_ADDR_OWVAR 20
2760: PUSH
2761: LD_INT 5
2763: ST_TO_ADDR
// uc_nation := 2 ;
2764: LD_ADDR_OWVAR 21
2768: PUSH
2769: LD_INT 2
2771: ST_TO_ADDR
// for i := 1 to 4 do
2772: LD_ADDR_VAR 0 2
2776: PUSH
2777: DOUBLE
2778: LD_INT 1
2780: DEC
2781: ST_TO_ADDR
2782: LD_INT 4
2784: PUSH
2785: FOR_TO
2786: IFFALSE 2864
// begin PrepareHuman ( false , 1 , 2 ) ;
2788: LD_INT 0
2790: PPUSH
2791: LD_INT 1
2793: PPUSH
2794: LD_INT 2
2796: PPUSH
2797: CALL_OW 380
// un := CreateHuman ;
2801: LD_ADDR_VAR 0 3
2805: PUSH
2806: CALL_OW 44
2810: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
2811: LD_VAR 0 3
2815: PPUSH
2816: LD_INT 102
2818: PPUSH
2819: LD_INT 27
2821: PPUSH
2822: LD_INT 4
2824: PPUSH
2825: LD_INT 0
2827: PPUSH
2828: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2832: LD_ADDR_EXP 35
2836: PUSH
2837: LD_EXP 35
2841: PUSH
2842: LD_VAR 0 3
2846: UNION
2847: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2848: LD_VAR 0 3
2852: PPUSH
2853: LD_EXP 33
2857: PPUSH
2858: CALL_OW 119
// end ;
2862: GO 2785
2864: POP
2865: POP
// PrepareHuman ( false , 2 , 2 ) ;
2866: LD_INT 0
2868: PPUSH
2869: LD_INT 2
2871: PPUSH
2872: LD_INT 2
2874: PPUSH
2875: CALL_OW 380
// un := CreateHuman ;
2879: LD_ADDR_VAR 0 3
2883: PUSH
2884: CALL_OW 44
2888: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2889: LD_VAR 0 3
2893: PPUSH
2894: LD_INT 108
2896: PPUSH
2897: LD_INT 62
2899: PPUSH
2900: LD_INT 2
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2910: LD_ADDR_EXP 35
2914: PUSH
2915: LD_EXP 35
2919: PUSH
2920: LD_VAR 0 3
2924: UNION
2925: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_EXP 33
2935: PPUSH
2936: CALL_OW 119
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2940: LD_INT 109
2942: PPUSH
2943: LD_INT 63
2945: PPUSH
2946: LD_INT 2
2948: PPUSH
2949: LD_INT 15
2951: NEG
2952: PPUSH
2953: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2957: LD_INT 109
2959: PPUSH
2960: LD_INT 63
2962: PPUSH
2963: LD_INT 2
2965: PPUSH
2966: CALL_OW 331
// end ;
2970: LD_VAR 0 1
2974: RET
// export function PrepareIbrahim ( x , y ) ; begin
2975: LD_INT 0
2977: PPUSH
// uc_side := 6 ;
2978: LD_ADDR_OWVAR 20
2982: PUSH
2983: LD_INT 6
2985: ST_TO_ADDR
// uc_nation := 3 ;
2986: LD_ADDR_OWVAR 21
2990: PUSH
2991: LD_INT 3
2993: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2994: LD_ADDR_EXP 34
2998: PUSH
2999: LD_STRING IbrahimRu
3001: PPUSH
3002: LD_INT 0
3004: PPUSH
3005: LD_STRING 
3007: PPUSH
3008: CALL 251 0 3
3012: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
3013: LD_EXP 34
3017: PPUSH
3018: LD_VAR 0 1
3022: PPUSH
3023: LD_VAR 0 2
3027: PPUSH
3028: LD_INT 8
3030: PPUSH
3031: LD_INT 1
3033: PPUSH
3034: CALL_OW 50
// end ;
3038: LD_VAR 0 3
3042: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
3043: LD_EXP 33
3047: PUSH
3048: LD_EXP 36
3052: ADD
3053: PPUSH
3054: LD_INT 95
3056: PUSH
3057: LD_INT 3
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 72
3068: IFFALSE 3124
3070: GO 3072
3072: DISABLE
3073: LD_INT 0
3075: PPUSH
// begin enable ;
3076: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
3077: LD_ADDR_VAR 0 1
3081: PUSH
3082: LD_EXP 33
3086: PUSH
3087: LD_EXP 36
3091: ADD
3092: PPUSH
3093: LD_INT 95
3095: PUSH
3096: LD_INT 3
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 72
3107: PUSH
3108: FOR_IN
3109: IFFALSE 3122
// RemoveUnit ( i ) ;
3111: LD_VAR 0 1
3115: PPUSH
3116: CALL_OW 64
3120: GO 3108
3122: POP
3123: POP
// end ;
3124: PPOPN 1
3126: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
3127: LD_EXP 3
3131: PUSH
3132: LD_EXP 32
3136: PPUSH
3137: LD_INT 4
3139: PPUSH
3140: CALL_OW 308
3144: AND
3145: IFFALSE 3928
3147: GO 3149
3149: DISABLE
3150: LD_INT 0
3152: PPUSH
3153: PPUSH
3154: PPUSH
3155: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
3156: LD_EXP 32
3160: PPUSH
3161: LD_INT 110
3163: PPUSH
3164: LD_INT 60
3166: PPUSH
3167: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
3171: LD_EXP 32
3175: PPUSH
3176: LD_INT 110
3178: PPUSH
3179: LD_INT 61
3181: PPUSH
3182: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3186: LD_ADDR_VAR 0 2
3190: PUSH
3191: LD_EXP 35
3195: PPUSH
3196: LD_INT 25
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 72
3210: ST_TO_ADDR
// if tmp then
3211: LD_VAR 0 2
3215: IFFALSE 3309
// begin for i := 1 to 2 do
3217: LD_ADDR_VAR 0 1
3221: PUSH
3222: DOUBLE
3223: LD_INT 1
3225: DEC
3226: ST_TO_ADDR
3227: LD_INT 2
3229: PUSH
3230: FOR_TO
3231: IFFALSE 3307
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
3233: LD_VAR 0 2
3237: PUSH
3238: LD_VAR 0 1
3242: ARRAY
3243: PPUSH
3244: LD_INT 5
3246: PPUSH
3247: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
3251: LD_VAR 0 2
3255: PUSH
3256: LD_VAR 0 1
3260: ARRAY
3261: PPUSH
3262: LD_INT 2
3264: PPUSH
3265: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
3269: LD_VAR 0 2
3273: PUSH
3274: LD_VAR 0 1
3278: ARRAY
3279: PPUSH
3280: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
3284: LD_VAR 0 2
3288: PUSH
3289: LD_VAR 0 1
3293: ARRAY
3294: PPUSH
3295: LD_INT 107
3297: PPUSH
3298: LD_INT 66
3300: PPUSH
3301: CALL_OW 171
// end ;
3305: GO 3230
3307: POP
3308: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3309: LD_ADDR_VAR 0 2
3313: PUSH
3314: LD_EXP 35
3318: PPUSH
3319: LD_INT 25
3321: PUSH
3322: LD_INT 2
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 72
3333: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3334: LD_INT 35
3336: PPUSH
3337: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3341: LD_ADDR_VAR 0 2
3345: PUSH
3346: LD_EXP 35
3350: PPUSH
3351: LD_INT 25
3353: PUSH
3354: LD_INT 2
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PPUSH
3361: CALL_OW 72
3365: ST_TO_ADDR
// until tmp ;
3366: LD_VAR 0 2
3370: IFFALSE 3334
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
3372: LD_VAR 0 2
3376: PPUSH
3377: LD_INT 31
3379: PPUSH
3380: LD_INT 102
3382: PPUSH
3383: LD_INT 69
3385: PPUSH
3386: LD_INT 2
3388: PPUSH
3389: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
3393: LD_INT 35
3395: PPUSH
3396: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3400: LD_EXP 35
3404: PPUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 60
3410: PUSH
3411: EMPTY
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: LD_INT 25
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PPUSH
3432: CALL_OW 72
3436: IFFALSE 3393
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3438: LD_ADDR_VAR 0 2
3442: PUSH
3443: LD_EXP 35
3447: PPUSH
3448: LD_INT 25
3450: PUSH
3451: LD_INT 2
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PPUSH
3458: CALL_OW 72
3462: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
3463: LD_VAR 0 2
3467: PPUSH
3468: LD_INT 4
3470: PPUSH
3471: LD_INT 116
3473: PPUSH
3474: LD_INT 70
3476: PPUSH
3477: LD_INT 5
3479: PPUSH
3480: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
3484: LD_VAR 0 2
3488: PPUSH
3489: LD_INT 31
3491: PPUSH
3492: LD_INT 108
3494: PPUSH
3495: LD_INT 50
3497: PPUSH
3498: LD_INT 2
3500: PPUSH
3501: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
3505: LD_INT 35
3507: PPUSH
3508: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
3512: LD_INT 22
3514: PUSH
3515: LD_INT 5
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: PUSH
3522: LD_INT 30
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: PUSH
3532: LD_INT 3
3534: PUSH
3535: LD_INT 57
3537: PUSH
3538: EMPTY
3539: LIST
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: LIST
3549: PPUSH
3550: CALL_OW 69
3554: IFFALSE 3505
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
3556: LD_ADDR_VAR 0 3
3560: PUSH
3561: LD_INT 22
3563: PUSH
3564: LD_INT 5
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 30
3573: PUSH
3574: LD_INT 4
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 3
3583: PUSH
3584: LD_INT 57
3586: PUSH
3587: EMPTY
3588: LIST
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PPUSH
3599: CALL_OW 69
3603: PUSH
3604: LD_INT 1
3606: ARRAY
3607: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: LD_EXP 35
3617: PPUSH
3618: LD_INT 25
3620: PUSH
3621: LD_INT 1
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: PPUSH
3628: CALL_OW 72
3632: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
3633: LD_VAR 0 2
3637: PPUSH
3638: LD_VAR 0 3
3642: PPUSH
3643: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
3654: LD_INT 22
3656: PUSH
3657: LD_INT 5
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: LD_INT 30
3666: PUSH
3667: LD_INT 31
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 3
3676: PUSH
3677: LD_INT 57
3679: PUSH
3680: EMPTY
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: PUSH
3697: LD_INT 2
3699: GREATEREQUAL
3700: IFFALSE 3647
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3702: LD_ADDR_VAR 0 2
3706: PUSH
3707: LD_EXP 35
3711: PPUSH
3712: LD_INT 25
3714: PUSH
3715: LD_INT 2
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 72
3726: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
3727: LD_VAR 0 2
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: LD_INT 5
3738: PPUSH
3739: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
3743: LD_VAR 0 2
3747: PUSH
3748: LD_INT 2
3750: ARRAY
3751: PUSH
3752: LD_VAR 0 2
3756: PUSH
3757: LD_INT 3
3759: ARRAY
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: PPUSH
3765: LD_VAR 0 3
3769: PPUSH
3770: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
3774: LD_VAR 0 2
3778: PUSH
3779: LD_INT 2
3781: ARRAY
3782: PUSH
3783: LD_VAR 0 2
3787: PUSH
3788: LD_INT 3
3790: ARRAY
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
3803: LD_VAR 0 2
3807: PUSH
3808: LD_INT 2
3810: ARRAY
3811: PUSH
3812: LD_VAR 0 2
3816: PUSH
3817: LD_INT 3
3819: ARRAY
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: LD_INT 22
3836: PUSH
3837: LD_INT 5
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PUSH
3844: LD_INT 30
3846: PUSH
3847: LD_INT 31
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PPUSH
3858: CALL_OW 69
3862: ST_TO_ADDR
// for i := 1 to 2 do
3863: LD_ADDR_VAR 0 1
3867: PUSH
3868: DOUBLE
3869: LD_INT 1
3871: DEC
3872: ST_TO_ADDR
3873: LD_INT 2
3875: PUSH
3876: FOR_TO
3877: IFFALSE 3911
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3879: LD_VAR 0 2
3883: PUSH
3884: LD_VAR 0 1
3888: PUSH
3889: LD_INT 1
3891: PLUS
3892: ARRAY
3893: PPUSH
3894: LD_VAR 0 4
3898: PUSH
3899: LD_VAR 0 1
3903: ARRAY
3904: PPUSH
3905: CALL_OW 180
3909: GO 3876
3911: POP
3912: POP
// wait ( 1 1$00 ) ;
3913: LD_INT 2100
3915: PPUSH
3916: CALL_OW 67
// farmerBaseReady := true ;
3920: LD_ADDR_EXP 4
3924: PUSH
3925: LD_INT 1
3927: ST_TO_ADDR
// end ;
3928: PPOPN 4
3930: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , damagedBuilding ;
3931: LD_EXP 4
3935: PUSH
3936: LD_EXP 10
3940: NOT
3941: AND
3942: IFFALSE 4262
3944: GO 3946
3946: DISABLE
3947: LD_INT 0
3949: PPUSH
3950: PPUSH
3951: PPUSH
// begin enable ;
3952: ENABLE
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3953: LD_ADDR_VAR 0 2
3957: PUSH
3958: LD_EXP 35
3962: PPUSH
3963: LD_INT 25
3965: PUSH
3966: LD_INT 2
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PPUSH
3973: CALL_OW 72
3977: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3978: LD_ADDR_VAR 0 3
3982: PUSH
3983: LD_INT 22
3985: PUSH
3986: LD_INT 5
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: LD_INT 21
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 3
4005: PUSH
4006: LD_INT 24
4008: PUSH
4009: LD_INT 1000
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: EMPTY
4017: LIST
4018: LIST
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 69
4029: ST_TO_ADDR
// if not eng then
4030: LD_VAR 0 2
4034: NOT
4035: IFFALSE 4127
// begin uc_side := 5 ;
4037: LD_ADDR_OWVAR 20
4041: PUSH
4042: LD_INT 5
4044: ST_TO_ADDR
// uc_nation := 2 ;
4045: LD_ADDR_OWVAR 21
4049: PUSH
4050: LD_INT 2
4052: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
4053: LD_INT 0
4055: PPUSH
4056: LD_INT 2
4058: PPUSH
4059: LD_INT 2
4061: PPUSH
4062: CALL_OW 380
// eng := CreateHuman ;
4066: LD_ADDR_VAR 0 2
4070: PUSH
4071: CALL_OW 44
4075: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
4076: LD_VAR 0 2
4080: PPUSH
4081: LD_INT 102
4083: PPUSH
4084: LD_INT 8
4086: PPUSH
4087: LD_INT 0
4089: PPUSH
4090: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_INT 110
4101: PPUSH
4102: LD_INT 60
4104: PPUSH
4105: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
4109: LD_ADDR_EXP 35
4113: PUSH
4114: LD_EXP 35
4118: PUSH
4119: LD_VAR 0 2
4123: UNION
4124: ST_TO_ADDR
// end else
4125: GO 4262
// begin for i in eng do
4127: LD_ADDR_VAR 0 1
4131: PUSH
4132: LD_VAR 0 2
4136: PUSH
4137: FOR_IN
4138: IFFALSE 4260
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
4140: LD_INT 10
4142: PPUSH
4143: LD_INT 1
4145: PPUSH
4146: CALL_OW 287
4150: IFFALSE 4174
// begin if IsInUnit ( i ) then
4152: LD_VAR 0 1
4156: PPUSH
4157: CALL_OW 310
4161: IFFALSE 4172
// ComExitBuilding ( i ) ;
4163: LD_VAR 0 1
4167: PPUSH
4168: CALL_OW 122
// end else
4172: GO 4258
// begin if damagedBuilding then
4174: LD_VAR 0 3
4178: IFFALSE 4222
// begin if IsInUnit ( i ) then
4180: LD_VAR 0 1
4184: PPUSH
4185: CALL_OW 310
4189: IFFALSE 4202
// ComExitBuilding ( i ) else
4191: LD_VAR 0 1
4195: PPUSH
4196: CALL_OW 122
4200: GO 4220
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
4202: LD_VAR 0 1
4206: PPUSH
4207: LD_VAR 0 3
4211: PUSH
4212: LD_INT 1
4214: ARRAY
4215: PPUSH
4216: CALL_OW 130
// end else
4220: GO 4258
// if not IsInUnit ( i ) and not HasTask ( i ) then
4222: LD_VAR 0 1
4226: PPUSH
4227: CALL_OW 310
4231: NOT
4232: PUSH
4233: LD_VAR 0 1
4237: PPUSH
4238: CALL_OW 314
4242: NOT
4243: AND
4244: IFFALSE 4258
// ComEnterUnit ( i , arDepot ) ;
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_INT 5
4253: PPUSH
4254: CALL_OW 120
// end ; end ;
4258: GO 4137
4260: POP
4261: POP
// end ; end ;
4262: PPOPN 3
4264: END
// export function StartCargoEvacuation ; begin
4265: LD_INT 0
4267: PPUSH
// while GetResourceType ( GetBase ( arDepot ) , mat_cans ) > 0 and omarCargoCounter > 0 do
4268: LD_INT 5
4270: PPUSH
4271: CALL_OW 274
4275: PPUSH
4276: LD_INT 1
4278: PPUSH
4279: CALL_OW 275
4283: PUSH
4284: LD_INT 0
4286: GREATER
4287: PUSH
4288: LD_EXP 17
4292: PUSH
4293: LD_INT 0
4295: GREATER
4296: AND
4297: IFFALSE 4589
// begin wait ( 1 1$20 ) ;
4299: LD_INT 2800
4301: PPUSH
4302: CALL_OW 67
// omarCargo := PrepareCargo ;
4306: LD_ADDR_EXP 39
4310: PUSH
4311: CALL 4594 0 0
4315: ST_TO_ADDR
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4316: LD_EXP 39
4320: PPUSH
4321: LD_INT 107
4323: PPUSH
4324: LD_INT 59
4326: PPUSH
4327: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4331: LD_INT 35
4333: PPUSH
4334: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4338: LD_EXP 39
4342: PPUSH
4343: LD_INT 107
4345: PPUSH
4346: LD_INT 59
4348: PPUSH
4349: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4353: LD_EXP 39
4357: PPUSH
4358: CALL_OW 302
4362: NOT
4363: PUSH
4364: LD_EXP 39
4368: PPUSH
4369: CALL_OW 301
4373: OR
4374: IFFALSE 4378
// continue ;
4376: GO 4331
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
4378: LD_EXP 39
4382: PPUSH
4383: LD_INT 107
4385: PPUSH
4386: LD_INT 59
4388: PPUSH
4389: CALL_OW 307
4393: PUSH
4394: LD_EXP 39
4398: PPUSH
4399: LD_INT 5
4401: PPUSH
4402: CALL_OW 296
4406: PUSH
4407: LD_INT 6
4409: LESS
4410: OR
4411: IFFALSE 4331
// wait ( 0 0$05 ) ;
4413: LD_INT 175
4415: PPUSH
4416: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
4420: LD_EXP 39
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: LD_INT 100
4430: PPUSH
4431: CALL_OW 290
// SetResourceType ( GetBase ( arDepot ) , mat_cans , GetResourceType ( GetBase ( arDepot ) , mat_cans ) - 100 ) ;
4435: LD_INT 5
4437: PPUSH
4438: CALL_OW 274
4442: PPUSH
4443: LD_INT 1
4445: PPUSH
4446: LD_INT 5
4448: PPUSH
4449: CALL_OW 274
4453: PPUSH
4454: LD_INT 1
4456: PPUSH
4457: CALL_OW 275
4461: PUSH
4462: LD_INT 100
4464: MINUS
4465: PPUSH
4466: CALL_OW 277
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
4470: LD_EXP 39
4474: PPUSH
4475: LD_INT 103
4477: PPUSH
4478: LD_INT 9
4480: PPUSH
4481: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4485: LD_INT 35
4487: PPUSH
4488: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
4492: LD_EXP 39
4496: PPUSH
4497: LD_INT 103
4499: PPUSH
4500: LD_INT 9
4502: PPUSH
4503: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4507: LD_EXP 39
4511: PPUSH
4512: CALL_OW 302
4516: NOT
4517: PUSH
4518: LD_EXP 39
4522: PPUSH
4523: CALL_OW 301
4527: OR
4528: IFFALSE 4532
// continue ;
4530: GO 4485
// until IsInArea ( omarCargo , northRoad ) and GetCargo ( omarCargo , mat_cans ) > 0 ;
4532: LD_EXP 39
4536: PPUSH
4537: LD_INT 3
4539: PPUSH
4540: CALL_OW 308
4544: PUSH
4545: LD_EXP 39
4549: PPUSH
4550: LD_INT 1
4552: PPUSH
4553: CALL_OW 289
4557: PUSH
4558: LD_INT 0
4560: GREATER
4561: AND
4562: IFFALSE 4485
// RemoveUnit ( omarCargo ) ;
4564: LD_EXP 39
4568: PPUSH
4569: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
4573: LD_ADDR_EXP 17
4577: PUSH
4578: LD_EXP 17
4582: PUSH
4583: LD_INT 1
4585: MINUS
4586: ST_TO_ADDR
// end ;
4587: GO 4268
// end ;
4589: LD_VAR 0 1
4593: RET
// export function PrepareCargo ; var un , veh ; begin
4594: LD_INT 0
4596: PPUSH
4597: PPUSH
4598: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4599: LD_ADDR_VAR 0 3
4603: PUSH
4604: LD_INT 5
4606: PPUSH
4607: LD_INT 2
4609: PPUSH
4610: LD_INT 13
4612: PPUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_INT 1
4618: PPUSH
4619: LD_INT 32
4621: PPUSH
4622: LD_INT 80
4624: PPUSH
4625: CALL 314 0 7
4629: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4630: LD_VAR 0 3
4634: PPUSH
4635: LD_INT 4
4637: PPUSH
4638: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: LD_INT 101
4649: PPUSH
4650: LD_INT 8
4652: PPUSH
4653: LD_INT 0
4655: PPUSH
4656: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4660: LD_INT 0
4662: PPUSH
4663: LD_INT 3
4665: PPUSH
4666: LD_INT 2
4668: PPUSH
4669: CALL_OW 380
// un := CreateHuman ;
4673: LD_ADDR_VAR 0 2
4677: PUSH
4678: CALL_OW 44
4682: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4683: LD_VAR 0 2
4687: PPUSH
4688: LD_VAR 0 3
4692: PPUSH
4693: CALL_OW 52
// result := veh ;
4697: LD_ADDR_VAR 0 1
4701: PUSH
4702: LD_VAR 0 3
4706: ST_TO_ADDR
// end ; end_of_file
4707: LD_VAR 0 1
4711: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4712: LD_INT 0
4714: PPUSH
4715: PPUSH
4716: PPUSH
// usForces := [ ] ;
4717: LD_ADDR_EXP 40
4721: PUSH
4722: EMPTY
4723: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4724: LD_ADDR_EXP 42
4728: PUSH
4729: LD_INT 6
4731: PUSH
4732: LD_INT 32
4734: PUSH
4735: LD_INT 27
4737: PUSH
4738: LD_INT 1
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 4
4749: PUSH
4750: LD_INT 43
4752: PUSH
4753: LD_INT 24
4755: PUSH
4756: LD_INT 5
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: PUSH
4765: LD_INT 27
4767: PUSH
4768: LD_INT 29
4770: PUSH
4771: LD_INT 21
4773: PUSH
4774: LD_INT 0
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4788: LD_INT 11
4790: PPUSH
4791: CALL_OW 274
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: LD_INT 150
4801: PUSH
4802: LD_INT 120
4804: PUSH
4805: LD_INT 100
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: PUSH
4813: LD_OWVAR 67
4817: ARRAY
4818: PPUSH
4819: CALL_OW 277
// if Difficulty = 1 then
4823: LD_OWVAR 67
4827: PUSH
4828: LD_INT 1
4830: EQUAL
4831: IFFALSE 4840
// RemoveUnit ( hillBun ) ;
4833: LD_INT 14
4835: PPUSH
4836: CALL_OW 64
// uc_side := 1 ;
4840: LD_ADDR_OWVAR 20
4844: PUSH
4845: LD_INT 1
4847: ST_TO_ADDR
// uc_nation := 1 ;
4848: LD_ADDR_OWVAR 21
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// hc_gallery :=  ;
4856: LD_ADDR_OWVAR 33
4860: PUSH
4861: LD_STRING 
4863: ST_TO_ADDR
// hc_name :=  ;
4864: LD_ADDR_OWVAR 26
4868: PUSH
4869: LD_STRING 
4871: ST_TO_ADDR
// hc_importance := 0 ;
4872: LD_ADDR_OWVAR 32
4876: PUSH
4877: LD_INT 0
4879: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4880: LD_INT 1
4882: PPUSH
4883: LD_INT 1
4885: PPUSH
4886: LD_INT 3
4888: PPUSH
4889: CALL_OW 380
// usCommander := CreateHuman ;
4893: LD_ADDR_EXP 41
4897: PUSH
4898: CALL_OW 44
4902: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4903: LD_EXP 41
4907: PPUSH
4908: LD_INT 11
4910: PPUSH
4911: CALL_OW 52
// if hillBun then
4915: LD_INT 14
4917: IFFALSE 4999
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4919: LD_INT 0
4921: PPUSH
4922: LD_INT 1
4924: PPUSH
4925: LD_INT 1
4927: PUSH
4928: LD_INT 2
4930: PUSH
4931: LD_INT 3
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: LD_OWVAR 67
4943: ARRAY
4944: PPUSH
4945: CALL_OW 380
// un := CreateHuman ;
4949: LD_ADDR_VAR 0 3
4953: PUSH
4954: CALL_OW 44
4958: ST_TO_ADDR
// usForces := usForces union un ;
4959: LD_ADDR_EXP 40
4963: PUSH
4964: LD_EXP 40
4968: PUSH
4969: LD_VAR 0 3
4973: UNION
4974: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4975: LD_VAR 0 3
4979: PPUSH
4980: LD_INT 1
4982: PPUSH
4983: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4987: LD_VAR 0 3
4991: PPUSH
4992: LD_INT 14
4994: PPUSH
4995: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4999: LD_ADDR_VAR 0 2
5003: PUSH
5004: DOUBLE
5005: LD_INT 1
5007: DEC
5008: ST_TO_ADDR
5009: LD_INT 2
5011: PUSH
5012: LD_INT 3
5014: PUSH
5015: LD_INT 4
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: LIST
5022: PUSH
5023: LD_OWVAR 67
5027: ARRAY
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5172
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5032: LD_INT 0
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: LD_INT 1
5040: PUSH
5041: LD_INT 2
5043: PUSH
5044: LD_INT 3
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: LIST
5051: PUSH
5052: LD_OWVAR 67
5056: ARRAY
5057: PPUSH
5058: CALL_OW 380
// un := CreateHuman ;
5062: LD_ADDR_VAR 0 3
5066: PUSH
5067: CALL_OW 44
5071: ST_TO_ADDR
// usForces := usForces union un ;
5072: LD_ADDR_EXP 40
5076: PUSH
5077: LD_EXP 40
5081: PUSH
5082: LD_VAR 0 3
5086: UNION
5087: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5088: LD_VAR 0 3
5092: PPUSH
5093: LD_INT 39
5095: PPUSH
5096: LD_INT 24
5098: PPUSH
5099: LD_INT 4
5101: PPUSH
5102: LD_INT 0
5104: PPUSH
5105: CALL_OW 50
// if i < 3 then
5109: LD_VAR 0 2
5113: PUSH
5114: LD_INT 3
5116: LESS
5117: IFFALSE 5170
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
5119: LD_VAR 0 3
5123: PPUSH
5124: LD_INT 22
5126: PUSH
5127: LD_INT 1
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: PUSH
5134: LD_INT 58
5136: PUSH
5137: EMPTY
5138: LIST
5139: PUSH
5140: LD_INT 30
5142: PUSH
5143: LD_INT 31
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: LIST
5154: PPUSH
5155: CALL_OW 69
5159: PUSH
5160: LD_VAR 0 2
5164: ARRAY
5165: PPUSH
5166: CALL_OW 120
// end ;
5170: GO 5029
5172: POP
5173: POP
// for i := 1 to 2 do
5174: LD_ADDR_VAR 0 2
5178: PUSH
5179: DOUBLE
5180: LD_INT 1
5182: DEC
5183: ST_TO_ADDR
5184: LD_INT 2
5186: PUSH
5187: FOR_TO
5188: IFFALSE 5252
// begin PrepareHuman ( false , 2 , 2 ) ;
5190: LD_INT 0
5192: PPUSH
5193: LD_INT 2
5195: PPUSH
5196: LD_INT 2
5198: PPUSH
5199: CALL_OW 380
// un := CreateHuman ;
5203: LD_ADDR_VAR 0 3
5207: PUSH
5208: CALL_OW 44
5212: ST_TO_ADDR
// usForces := usForces union un ;
5213: LD_ADDR_EXP 40
5217: PUSH
5218: LD_EXP 40
5222: PUSH
5223: LD_VAR 0 3
5227: UNION
5228: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5229: LD_VAR 0 3
5233: PPUSH
5234: LD_INT 39
5236: PPUSH
5237: LD_INT 24
5239: PPUSH
5240: LD_INT 4
5242: PPUSH
5243: LD_INT 0
5245: PPUSH
5246: CALL_OW 50
// end ;
5250: GO 5187
5252: POP
5253: POP
// PrepareHuman ( false , 4 , 1 ) ;
5254: LD_INT 0
5256: PPUSH
5257: LD_INT 4
5259: PPUSH
5260: LD_INT 1
5262: PPUSH
5263: CALL_OW 380
// un := CreateHuman ;
5267: LD_ADDR_VAR 0 3
5271: PUSH
5272: CALL_OW 44
5276: ST_TO_ADDR
// usForces := usForces union un ;
5277: LD_ADDR_EXP 40
5281: PUSH
5282: LD_EXP 40
5286: PUSH
5287: LD_VAR 0 3
5291: UNION
5292: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5293: LD_VAR 0 3
5297: PPUSH
5298: LD_INT 39
5300: PPUSH
5301: LD_INT 24
5303: PPUSH
5304: LD_INT 4
5306: PPUSH
5307: LD_INT 0
5309: PPUSH
5310: CALL_OW 50
// end ;
5314: LD_VAR 0 1
5318: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured do var i , b , eng , sol , sci ;
5319: LD_EXP 40
5323: PUSH
5324: LD_EXP 6
5328: NOT
5329: AND
5330: IFFALSE 5761
5332: GO 5334
5334: DISABLE
5335: LD_INT 0
5337: PPUSH
5338: PPUSH
5339: PPUSH
5340: PPUSH
5341: PPUSH
// begin enable ;
5342: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
5343: LD_ADDR_VAR 0 3
5347: PUSH
5348: LD_EXP 40
5352: PPUSH
5353: LD_INT 25
5355: PUSH
5356: LD_INT 2
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
5368: LD_ADDR_VAR 0 4
5372: PUSH
5373: LD_EXP 40
5377: PPUSH
5378: LD_INT 25
5380: PUSH
5381: LD_INT 1
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PPUSH
5388: CALL_OW 72
5392: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
5393: LD_ADDR_VAR 0 5
5397: PUSH
5398: LD_EXP 40
5402: PPUSH
5403: LD_INT 25
5405: PUSH
5406: LD_INT 4
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PPUSH
5413: CALL_OW 72
5417: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
5418: LD_INT 7
5420: PPUSH
5421: LD_INT 22
5423: PUSH
5424: LD_INT 2
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PPUSH
5431: CALL_OW 70
5435: PUSH
5436: LD_INT 1
5438: EQUAL
5439: IFFALSE 5515
// for i in sol do
5441: LD_ADDR_VAR 0 1
5445: PUSH
5446: LD_VAR 0 4
5450: PUSH
5451: FOR_IN
5452: IFFALSE 5513
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
5454: LD_VAR 0 1
5458: PPUSH
5459: CALL_OW 310
5463: NOT
5464: PUSH
5465: LD_VAR 0 1
5469: PPUSH
5470: CALL_OW 310
5474: PPUSH
5475: CALL_OW 266
5479: PUSH
5480: LD_INT 4
5482: EQUAL
5483: NOT
5484: OR
5485: IFFALSE 5511
// begin ComExitBuilding ( i ) ;
5487: LD_VAR 0 1
5491: PPUSH
5492: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
5496: LD_VAR 0 1
5500: PPUSH
5501: LD_INT 37
5503: PPUSH
5504: LD_INT 23
5506: PPUSH
5507: CALL_OW 174
// end ;
5511: GO 5451
5513: POP
5514: POP
// if eng then
5515: LD_VAR 0 3
5519: IFFALSE 5761
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: LD_INT 22
5528: PUSH
5529: LD_INT 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 95
5538: PUSH
5539: LD_INT 7
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 21
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 3
5558: PUSH
5559: LD_INT 24
5561: PUSH
5562: LD_INT 1000
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 69
5583: ST_TO_ADDR
// if b then
5584: LD_VAR 0 2
5588: IFFALSE 5619
// begin ComExitBuilding ( eng ) ;
5590: LD_VAR 0 3
5594: PPUSH
5595: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5599: LD_VAR 0 3
5603: PPUSH
5604: LD_VAR 0 2
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: CALL_OW 190
// end else
5617: GO 5761
// begin for i in eng do
5619: LD_ADDR_VAR 0 1
5623: PUSH
5624: LD_VAR 0 3
5628: PUSH
5629: FOR_IN
5630: IFFALSE 5759
// if not HasTask ( i ) then
5632: LD_VAR 0 1
5636: PPUSH
5637: CALL_OW 314
5641: NOT
5642: IFFALSE 5757
// begin if americanBuildList then
5644: LD_EXP 42
5648: IFFALSE 5733
// begin if IsInUnit ( i ) then
5650: LD_VAR 0 1
5654: PPUSH
5655: CALL_OW 310
5659: IFFALSE 5670
// ComExitBuilding ( i ) ;
5661: LD_VAR 0 1
5665: PPUSH
5666: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5670: LD_VAR 0 1
5674: PPUSH
5675: LD_EXP 42
5679: PUSH
5680: LD_INT 1
5682: ARRAY
5683: PUSH
5684: LD_INT 1
5686: ARRAY
5687: PPUSH
5688: LD_EXP 42
5692: PUSH
5693: LD_INT 1
5695: ARRAY
5696: PUSH
5697: LD_INT 2
5699: ARRAY
5700: PPUSH
5701: LD_EXP 42
5705: PUSH
5706: LD_INT 1
5708: ARRAY
5709: PUSH
5710: LD_INT 3
5712: ARRAY
5713: PPUSH
5714: LD_EXP 42
5718: PUSH
5719: LD_INT 1
5721: ARRAY
5722: PUSH
5723: LD_INT 4
5725: ARRAY
5726: PPUSH
5727: CALL_OW 205
// end else
5731: GO 5757
// if not IsInUnit ( i ) then
5733: LD_VAR 0 1
5737: PPUSH
5738: CALL_OW 310
5742: NOT
5743: IFFALSE 5757
// ComEnterUnit ( i , usDepot ) ;
5745: LD_VAR 0 1
5749: PPUSH
5750: LD_INT 11
5752: PPUSH
5753: CALL_OW 120
// end ;
5757: GO 5629
5759: POP
5760: POP
// end ; end ; end ;
5761: PPOPN 5
5763: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5764: LD_INT 0
5766: PPUSH
5767: PPUSH
5768: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5769: LD_ADDR_VAR 0 3
5773: PUSH
5774: LD_INT 35
5776: PUSH
5777: LD_INT 45
5779: PUSH
5780: LD_INT 48
5782: PUSH
5783: LD_EXP 51
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: ST_TO_ADDR
// for i in tech do
5794: LD_ADDR_VAR 0 4
5798: PUSH
5799: LD_VAR 0 3
5803: PUSH
5804: FOR_IN
5805: IFFALSE 5823
// AddComResearch ( lab , i ) ;
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_VAR 0 4
5816: PPUSH
5817: CALL_OW 184
5821: GO 5804
5823: POP
5824: POP
// end ;
5825: LD_VAR 0 2
5829: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5830: LD_EXP 11
5834: PUSH
5835: LD_EXP 19
5839: PUSH
5840: LD_EXP 23
5844: LESSEQUAL
5845: AND
5846: IFFALSE 5871
5848: GO 5850
5850: DISABLE
// begin enable ;
5851: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5852: LD_INT 35
5854: PPUSH
5855: LD_INT 2065
5857: PPUSH
5858: CALL_OW 12
5862: PPUSH
5863: CALL_OW 67
// SendConvoy ;
5867: CALL 5969 0 0
// end ;
5871: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5872: LD_EXP 6
5876: PUSH
5877: LD_EXP 15
5881: AND
5882: IFFALSE 5968
5884: GO 5886
5886: DISABLE
// begin if americanHasEscaped then
5887: LD_EXP 7
5891: IFFALSE 5902
// wait ( 3 3$20 ) else
5893: LD_INT 7000
5895: PPUSH
5896: CALL_OW 67
5900: GO 5909
// wait ( 6 6$40 ) ;
5902: LD_INT 14000
5904: PPUSH
5905: CALL_OW 67
// SendAttack ;
5909: CALL 6684 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5913: LD_INT 14000
5915: PUSH
5916: LD_INT 11900
5918: PUSH
5919: LD_INT 9800
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: LIST
5926: PUSH
5927: LD_OWVAR 67
5931: ARRAY
5932: PPUSH
5933: CALL_OW 67
// SendAttack ;
5937: CALL 6684 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5941: LD_EXP 16
5945: PUSH
5946: LD_INT 6
5948: PUSH
5949: LD_INT 7
5951: PUSH
5952: LD_INT 8
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: LIST
5959: PUSH
5960: LD_OWVAR 67
5964: ARRAY
5965: LESS
5966: IFFALSE 5913
// end ;
5968: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5969: LD_INT 0
5971: PPUSH
5972: PPUSH
5973: PPUSH
5974: PPUSH
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
// road := rand ( 1 , 2 ) ;
5979: LD_ADDR_VAR 0 4
5983: PUSH
5984: LD_INT 1
5986: PPUSH
5987: LD_INT 2
5989: PPUSH
5990: CALL_OW 12
5994: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5995: LD_ADDR_VAR 0 8
5999: PUSH
6000: LD_INT 3
6002: PUSH
6003: LD_INT 8
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: PUSH
6010: LD_VAR 0 4
6014: ARRAY
6015: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
6016: LD_ADDR_VAR 0 5
6020: PUSH
6021: LD_INT 35
6023: PUSH
6024: LD_INT 66
6026: PUSH
6027: LD_INT 1
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 101
6037: PUSH
6038: LD_INT 8
6040: PUSH
6041: LD_INT 4
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
6053: LD_ADDR_VAR 0 6
6057: PUSH
6058: LD_INT 34
6060: PUSH
6061: LD_INT 67
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 38
6070: PUSH
6071: LD_INT 62
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 43
6080: PUSH
6081: LD_INT 54
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 57
6090: PUSH
6091: LD_INT 57
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: LD_INT 77
6100: PUSH
6101: LD_INT 71
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: LD_INT 86
6110: PUSH
6111: LD_INT 60
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 89
6120: PUSH
6121: LD_INT 35
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 93
6130: PUSH
6131: LD_INT 17
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 97
6140: PUSH
6141: LD_INT 10
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 103
6150: PUSH
6151: LD_INT 9
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: ST_TO_ADDR
// if road = 2 then
6170: LD_VAR 0 4
6174: PUSH
6175: LD_INT 2
6177: EQUAL
6178: IFFALSE 6195
// points := ReverseArray ( points ) ;
6180: LD_ADDR_VAR 0 6
6184: PUSH
6185: LD_VAR 0 6
6189: PPUSH
6190: CALL 1002 0 1
6194: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
6195: LD_INT 4
6197: PPUSH
6198: LD_INT 1
6200: PPUSH
6201: LD_INT 2
6203: PPUSH
6204: LD_INT 1
6206: PPUSH
6207: LD_INT 1
6209: PPUSH
6210: LD_INT 12
6212: PPUSH
6213: LD_INT 80
6215: PPUSH
6216: CALL 314 0 7
// veh := CreateVehicle ;
6220: LD_ADDR_VAR 0 3
6224: PUSH
6225: CALL_OW 45
6229: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
6230: LD_VAR 0 3
6234: PPUSH
6235: LD_VAR 0 5
6239: PUSH
6240: LD_VAR 0 4
6244: ARRAY
6245: PUSH
6246: LD_INT 3
6248: ARRAY
6249: PPUSH
6250: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_VAR 0 5
6263: PUSH
6264: LD_VAR 0 4
6268: ARRAY
6269: PUSH
6270: LD_INT 1
6272: ARRAY
6273: PPUSH
6274: LD_VAR 0 5
6278: PUSH
6279: LD_VAR 0 4
6283: ARRAY
6284: PUSH
6285: LD_INT 2
6287: ARRAY
6288: PPUSH
6289: LD_INT 0
6291: PPUSH
6292: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
6296: LD_INT 0
6298: PPUSH
6299: LD_INT 1
6301: PPUSH
6302: LD_OWVAR 67
6306: PPUSH
6307: CALL_OW 380
// un := CreateHuman ;
6311: LD_ADDR_VAR 0 2
6315: PUSH
6316: CALL_OW 44
6320: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6321: LD_VAR 0 2
6325: PPUSH
6326: LD_VAR 0 3
6330: PPUSH
6331: CALL_OW 52
// if Prob ( 50 + tick mod 30 ) or convoyCounter < 3 then
6335: LD_INT 50
6337: PUSH
6338: LD_OWVAR 1
6342: PUSH
6343: LD_INT 30
6345: MOD
6346: PLUS
6347: PPUSH
6348: CALL_OW 13
6352: PUSH
6353: LD_EXP 19
6357: PUSH
6358: LD_INT 3
6360: LESS
6361: OR
6362: IFFALSE 6379
// SetCargo ( veh , mat_cans , 100 ) ;
6364: LD_VAR 0 3
6368: PPUSH
6369: LD_INT 1
6371: PPUSH
6372: LD_INT 100
6374: PPUSH
6375: CALL_OW 290
// for i := 2 to points do
6379: LD_ADDR_VAR 0 7
6383: PUSH
6384: DOUBLE
6385: LD_INT 2
6387: DEC
6388: ST_TO_ADDR
6389: LD_VAR 0 6
6393: PUSH
6394: FOR_TO
6395: IFFALSE 6438
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
6397: LD_VAR 0 3
6401: PPUSH
6402: LD_VAR 0 6
6406: PUSH
6407: LD_VAR 0 7
6411: ARRAY
6412: PUSH
6413: LD_INT 1
6415: ARRAY
6416: PPUSH
6417: LD_VAR 0 6
6421: PUSH
6422: LD_VAR 0 7
6426: ARRAY
6427: PUSH
6428: LD_INT 2
6430: ARRAY
6431: PPUSH
6432: CALL_OW 171
6436: GO 6394
6438: POP
6439: POP
// convoyCounter := convoyCounter + 1 ;
6440: LD_ADDR_EXP 19
6444: PUSH
6445: LD_EXP 19
6449: PUSH
6450: LD_INT 1
6452: PLUS
6453: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6454: LD_INT 35
6456: PPUSH
6457: CALL_OW 67
// if not HasTask ( veh ) then
6461: LD_VAR 0 3
6465: PPUSH
6466: CALL_OW 314
6470: NOT
6471: IFFALSE 6512
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6473: LD_VAR 0 3
6477: PPUSH
6478: LD_VAR 0 6
6482: PUSH
6483: LD_VAR 0 6
6487: ARRAY
6488: PUSH
6489: LD_INT 1
6491: ARRAY
6492: PPUSH
6493: LD_VAR 0 6
6497: PUSH
6498: LD_VAR 0 6
6502: ARRAY
6503: PUSH
6504: LD_INT 2
6506: ARRAY
6507: PPUSH
6508: CALL_OW 111
// if not IsOk ( veh ) then
6512: LD_VAR 0 3
6516: PPUSH
6517: CALL_OW 302
6521: NOT
6522: IFFALSE 6563
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6524: LD_VAR 0 2
6528: PPUSH
6529: LD_VAR 0 6
6533: PUSH
6534: LD_VAR 0 6
6538: ARRAY
6539: PUSH
6540: LD_INT 1
6542: ARRAY
6543: PPUSH
6544: LD_VAR 0 6
6548: PUSH
6549: LD_VAR 0 6
6553: ARRAY
6554: PUSH
6555: LD_INT 2
6557: ARRAY
6558: PPUSH
6559: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6563: LD_VAR 0 3
6567: PPUSH
6568: LD_VAR 0 8
6572: PPUSH
6573: CALL_OW 308
6577: PUSH
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_VAR 0 8
6587: PPUSH
6588: CALL_OW 308
6592: OR
6593: IFFALSE 6454
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6595: LD_VAR 0 2
6599: PPUSH
6600: CALL_OW 302
6604: PUSH
6605: LD_VAR 0 3
6609: PPUSH
6610: CALL_OW 302
6614: NOT
6615: AND
6616: PUSH
6617: LD_VAR 0 2
6621: PPUSH
6622: LD_VAR 0 8
6626: PPUSH
6627: CALL_OW 308
6631: AND
6632: IFFALSE 6643
// RemoveUnit ( un ) ;
6634: LD_VAR 0 2
6638: PPUSH
6639: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6643: LD_VAR 0 3
6647: PPUSH
6648: LD_VAR 0 8
6652: PPUSH
6653: CALL_OW 308
6657: PUSH
6658: LD_VAR 0 3
6662: PPUSH
6663: CALL_OW 302
6667: AND
6668: IFFALSE 6679
// RemoveUnit ( veh ) ;
6670: LD_VAR 0 3
6674: PPUSH
6675: CALL_OW 64
// end ;
6679: LD_VAR 0 1
6683: RET
// export function SendAttack ; var un , veh , i ; begin
6684: LD_INT 0
6686: PPUSH
6687: PPUSH
6688: PPUSH
6689: PPUSH
// IncomingAttack ;
6690: CALL 14751 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6694: LD_INT 2100
6696: PPUSH
6697: LD_INT 3500
6699: PPUSH
6700: CALL_OW 12
6704: PPUSH
6705: CALL_OW 67
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] + attackWave div 3 do
6709: LD_ADDR_VAR 0 4
6713: PUSH
6714: DOUBLE
6715: LD_INT 1
6717: DEC
6718: ST_TO_ADDR
6719: LD_INT 3
6721: PUSH
6722: LD_INT 3
6724: PUSH
6725: LD_INT 4
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: LIST
6732: PUSH
6733: LD_OWVAR 67
6737: ARRAY
6738: PUSH
6739: LD_EXP 16
6743: PUSH
6744: LD_INT 3
6746: DIV
6747: PLUS
6748: PUSH
6749: FOR_TO
6750: IFFALSE 6862
// begin uc_side := 1 ;
6752: LD_ADDR_OWVAR 20
6756: PUSH
6757: LD_INT 1
6759: ST_TO_ADDR
// uc_nation := 1 ;
6760: LD_ADDR_OWVAR 21
6764: PUSH
6765: LD_INT 1
6767: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6768: LD_INT 0
6770: PPUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 2
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: PUSH
6788: LD_OWVAR 67
6792: ARRAY
6793: PPUSH
6794: CALL_OW 380
// un := CreateHuman ;
6798: LD_ADDR_VAR 0 2
6802: PUSH
6803: CALL_OW 44
6807: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6808: LD_VAR 0 2
6812: PPUSH
6813: LD_INT 37
6815: PPUSH
6816: LD_INT 70
6818: PPUSH
6819: LD_INT 3
6821: PPUSH
6822: LD_INT 0
6824: PPUSH
6825: CALL_OW 50
// usAttackers := usAttackers union un ;
6829: LD_ADDR_EXP 43
6833: PUSH
6834: LD_EXP 43
6838: PUSH
6839: LD_VAR 0 2
6843: UNION
6844: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6845: LD_VAR 0 2
6849: PPUSH
6850: LD_INT 40
6852: PPUSH
6853: LD_INT 65
6855: PPUSH
6856: CALL_OW 111
// end ;
6860: GO 6749
6862: POP
6863: POP
// if attackWave > 2 then
6864: LD_EXP 16
6868: PUSH
6869: LD_INT 2
6871: GREATER
6872: IFFALSE 6965
// begin uc_side := 1 ;
6874: LD_ADDR_OWVAR 20
6878: PUSH
6879: LD_INT 1
6881: ST_TO_ADDR
// uc_nation := 1 ;
6882: LD_ADDR_OWVAR 21
6886: PUSH
6887: LD_INT 1
6889: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6890: LD_INT 0
6892: PPUSH
6893: LD_INT 4
6895: PPUSH
6896: LD_INT 2
6898: PPUSH
6899: CALL_OW 380
// un := CreateHuman ;
6903: LD_ADDR_VAR 0 2
6907: PUSH
6908: CALL_OW 44
6912: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6913: LD_VAR 0 2
6917: PPUSH
6918: LD_INT 37
6920: PPUSH
6921: LD_INT 70
6923: PPUSH
6924: LD_INT 3
6926: PPUSH
6927: LD_INT 0
6929: PPUSH
6930: CALL_OW 50
// usAttackers := usAttackers union un ;
6934: LD_ADDR_EXP 43
6938: PUSH
6939: LD_EXP 43
6943: PUSH
6944: LD_VAR 0 2
6948: UNION
6949: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6950: LD_VAR 0 2
6954: PPUSH
6955: LD_INT 40
6957: PPUSH
6958: LD_INT 65
6960: PPUSH
6961: CALL_OW 111
// end ; if attackWave > 1 or Difficulty > 1 then
6965: LD_EXP 16
6969: PUSH
6970: LD_INT 1
6972: GREATER
6973: PUSH
6974: LD_OWVAR 67
6978: PUSH
6979: LD_INT 1
6981: GREATER
6982: OR
6983: IFFALSE 7186
// begin for i := 1 to Difficulty + attackWave div 4 do
6985: LD_ADDR_VAR 0 4
6989: PUSH
6990: DOUBLE
6991: LD_INT 1
6993: DEC
6994: ST_TO_ADDR
6995: LD_OWVAR 67
6999: PUSH
7000: LD_EXP 16
7004: PUSH
7005: LD_INT 4
7007: DIV
7008: PLUS
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7184
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
7013: LD_ADDR_VAR 0 3
7017: PUSH
7018: LD_INT 1
7020: PPUSH
7021: LD_INT 1
7023: PPUSH
7024: LD_INT 2
7026: PPUSH
7027: LD_INT 2
7029: PPUSH
7030: LD_INT 1
7032: PPUSH
7033: LD_INT 4
7035: PUSH
7036: LD_INT 3
7038: PUSH
7039: LD_INT 2
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 1
7049: PPUSH
7050: LD_INT 3
7052: PPUSH
7053: CALL_OW 12
7057: ARRAY
7058: PPUSH
7059: LD_INT 90
7061: PPUSH
7062: CALL 314 0 7
7066: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
7067: LD_VAR 0 3
7071: PPUSH
7072: LD_INT 35
7074: PPUSH
7075: LD_INT 65
7077: PPUSH
7078: LD_INT 0
7080: PPUSH
7081: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
7085: LD_INT 0
7087: PPUSH
7088: LD_INT 3
7090: PPUSH
7091: LD_OWVAR 67
7095: PUSH
7096: LD_INT 1
7098: PLUS
7099: PPUSH
7100: CALL_OW 380
// un := CreateHuman ;
7104: LD_ADDR_VAR 0 2
7108: PUSH
7109: CALL_OW 44
7113: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7114: LD_VAR 0 2
7118: PPUSH
7119: LD_VAR 0 3
7123: PPUSH
7124: CALL_OW 52
// usAttackers := usAttackers union un ;
7128: LD_ADDR_EXP 43
7132: PUSH
7133: LD_EXP 43
7137: PUSH
7138: LD_VAR 0 2
7142: UNION
7143: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
7144: LD_VAR 0 3
7148: PPUSH
7149: LD_INT 39
7151: PPUSH
7152: LD_INT 60
7154: PPUSH
7155: CALL_OW 111
// wait ( 0 0$2 ) ;
7159: LD_INT 70
7161: PPUSH
7162: CALL_OW 67
// usAttackers := usAttackers union veh ;
7166: LD_ADDR_EXP 43
7170: PUSH
7171: LD_EXP 43
7175: PUSH
7176: LD_VAR 0 3
7180: UNION
7181: ST_TO_ADDR
// end ;
7182: GO 7010
7184: POP
7185: POP
// end ; attackWave := attackWave + 1 ;
7186: LD_ADDR_EXP 16
7190: PUSH
7191: LD_EXP 16
7195: PUSH
7196: LD_INT 1
7198: PLUS
7199: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
7200: LD_EXP 20
7204: PPUSH
7205: CALL_OW 427
// end ;
7209: LD_VAR 0 1
7213: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
7214: LD_INT 0
7216: PPUSH
7217: PPUSH
7218: PPUSH
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
// if retreatAllowed then
7227: LD_EXP 10
7231: IFFALSE 7243
// strategy := 2 else
7233: LD_ADDR_VAR 0 5
7237: PUSH
7238: LD_INT 2
7240: ST_TO_ADDR
7241: GO 7259
// strategy := rand ( 0 , 2 ) ;
7243: LD_ADDR_VAR 0 5
7247: PUSH
7248: LD_INT 0
7250: PPUSH
7251: LD_INT 2
7253: PPUSH
7254: CALL_OW 12
7258: ST_TO_ADDR
// attackFormula := [ ] ;
7259: LD_ADDR_VAR 0 6
7263: PUSH
7264: EMPTY
7265: ST_TO_ADDR
// case strategy of 0 :
7266: LD_VAR 0 5
7270: PUSH
7271: LD_INT 0
7273: DOUBLE
7274: EQUAL
7275: IFTRUE 7279
7277: GO 7576
7279: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
7280: LD_INT 11
7282: PPUSH
7283: LD_INT 22
7285: PUSH
7286: LD_INT 2
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PUSH
7293: LD_INT 30
7295: PUSH
7296: LD_INT 4
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PPUSH
7307: CALL_OW 70
7311: NOT
7312: IFFALSE 7373
// attackFormula := [ [ [ 41 , 34 ] ] , [ 33 , 46 ] , [ 41 , 34 ] , [ [ 39 , 53 ] ] ] else
7314: LD_ADDR_VAR 0 6
7318: PUSH
7319: LD_INT 41
7321: PUSH
7322: LD_INT 34
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: EMPTY
7330: LIST
7331: PUSH
7332: LD_INT 33
7334: PUSH
7335: LD_INT 46
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 41
7344: PUSH
7345: LD_INT 34
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 39
7354: PUSH
7355: LD_INT 53
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: EMPTY
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: ST_TO_ADDR
7371: GO 7574
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
7373: LD_INT 12
7375: PPUSH
7376: LD_INT 22
7378: PUSH
7379: LD_INT 2
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: LD_INT 2
7388: PUSH
7389: LD_INT 30
7391: PUSH
7392: LD_INT 4
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PUSH
7399: LD_INT 30
7401: PUSH
7402: LD_INT 31
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: LD_INT 30
7411: PUSH
7412: LD_INT 32
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 70
7433: NOT
7434: IFFALSE 7506
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 33 , 46 ] , [ 41 , 34 ] , [ [ 39 , 53 ] ] ] else
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_INT 27
7443: PUSH
7444: LD_INT 42
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: LD_INT 27
7453: PUSH
7454: LD_INT 32
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: LD_INT 33
7467: PUSH
7468: LD_INT 46
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 41
7477: PUSH
7478: LD_INT 34
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 39
7487: PUSH
7488: LD_INT 53
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: EMPTY
7496: LIST
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: ST_TO_ADDR
7504: GO 7574
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 41 , 34 ] , [ [ 39 , 53 ] ] ] ;
7506: LD_ADDR_VAR 0 6
7510: PUSH
7511: LD_INT 71
7513: PUSH
7514: LD_INT 67
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 54
7523: PUSH
7524: LD_INT 35
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: LD_INT 63
7537: PUSH
7538: LD_INT 40
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: PUSH
7545: LD_INT 41
7547: PUSH
7548: LD_INT 34
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: LD_INT 39
7557: PUSH
7558: LD_INT 53
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: EMPTY
7566: LIST
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: ST_TO_ADDR
// end ; 1 :
7574: GO 7746
7576: LD_INT 1
7578: DOUBLE
7579: EQUAL
7580: IFTRUE 7584
7582: GO 7677
7584: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 63 , 40 ] , [ 41 , 34 ] , [ [ 39 , 53 ] ] ] ; 2 :
7585: LD_ADDR_VAR 0 6
7589: PUSH
7590: LD_INT 71
7592: PUSH
7593: LD_INT 67
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 82
7602: PUSH
7603: LD_INT 23
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 53
7612: PUSH
7613: LD_INT 7
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 43
7622: PUSH
7623: LD_INT 10
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 63
7638: PUSH
7639: LD_INT 40
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 41
7648: PUSH
7649: LD_INT 34
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 39
7658: PUSH
7659: LD_INT 53
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: EMPTY
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: ST_TO_ADDR
7675: GO 7746
7677: LD_INT 2
7679: DOUBLE
7680: EQUAL
7681: IFTRUE 7685
7683: GO 7745
7685: POP
// attackFormula := [ [ [ 95 , 61 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 95 , 61 ] ] ] ; end ;
7686: LD_ADDR_VAR 0 6
7690: PUSH
7691: LD_INT 95
7693: PUSH
7694: LD_INT 61
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: EMPTY
7702: LIST
7703: PUSH
7704: LD_INT 82
7706: PUSH
7707: LD_INT 75
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 73
7716: PUSH
7717: LD_INT 67
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 95
7726: PUSH
7727: LD_INT 61
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: ST_TO_ADDR
7743: GO 7746
7745: POP
// if not attackFormula then
7746: LD_VAR 0 6
7750: NOT
7751: IFFALSE 7755
// exit ;
7753: GO 9194
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7755: LD_ADDR_VAR 0 7
7759: PUSH
7760: LD_EXP 43
7764: PPUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 1
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PPUSH
7775: CALL_OW 72
7779: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7780: LD_ADDR_VAR 0 8
7784: PUSH
7785: LD_EXP 43
7789: PPUSH
7790: LD_INT 25
7792: PUSH
7793: LD_INT 4
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PPUSH
7800: CALL_OW 72
7804: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7805: LD_ADDR_VAR 0 9
7809: PUSH
7810: LD_EXP 43
7814: PPUSH
7815: LD_INT 25
7817: PUSH
7818: LD_INT 3
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PPUSH
7825: CALL_OW 72
7829: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7830: LD_ADDR_VAR 0 10
7834: PUSH
7835: LD_EXP 43
7839: PPUSH
7840: LD_INT 21
7842: PUSH
7843: LD_INT 2
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PPUSH
7850: CALL_OW 72
7854: ST_TO_ADDR
// if sci then
7855: LD_VAR 0 8
7859: IFFALSE 7896
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7861: LD_VAR 0 8
7865: PPUSH
7866: LD_VAR 0 6
7870: PUSH
7871: LD_INT 2
7873: ARRAY
7874: PUSH
7875: LD_INT 1
7877: ARRAY
7878: PPUSH
7879: LD_VAR 0 6
7883: PUSH
7884: LD_INT 2
7886: ARRAY
7887: PUSH
7888: LD_INT 2
7890: ARRAY
7891: PPUSH
7892: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7896: LD_INT 35
7898: PPUSH
7899: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7903: LD_ADDR_VAR 0 7
7907: PUSH
7908: LD_EXP 43
7912: PPUSH
7913: LD_INT 25
7915: PUSH
7916: LD_INT 1
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PPUSH
7923: CALL_OW 72
7927: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7928: LD_ADDR_VAR 0 8
7932: PUSH
7933: LD_EXP 43
7937: PPUSH
7938: LD_INT 25
7940: PUSH
7941: LD_INT 4
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PPUSH
7948: CALL_OW 72
7952: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7953: LD_ADDR_VAR 0 9
7957: PUSH
7958: LD_EXP 43
7962: PPUSH
7963: LD_INT 25
7965: PUSH
7966: LD_INT 3
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PPUSH
7973: CALL_OW 72
7977: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7978: LD_ADDR_VAR 0 10
7982: PUSH
7983: LD_EXP 43
7987: PPUSH
7988: LD_INT 21
7990: PUSH
7991: LD_INT 2
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PPUSH
7998: CALL_OW 72
8002: ST_TO_ADDR
// if sol then
8003: LD_VAR 0 7
8007: IFFALSE 8393
// begin for i in sol do
8009: LD_ADDR_VAR 0 2
8013: PUSH
8014: LD_VAR 0 7
8018: PUSH
8019: FOR_IN
8020: IFFALSE 8391
// begin tag := GetTag ( i ) ;
8022: LD_ADDR_VAR 0 4
8026: PUSH
8027: LD_VAR 0 2
8031: PPUSH
8032: CALL_OW 110
8036: ST_TO_ADDR
// if not tag then
8037: LD_VAR 0 4
8041: NOT
8042: IFFALSE 8151
// begin if GetLives ( i ) = 1000 then
8044: LD_VAR 0 2
8048: PPUSH
8049: CALL_OW 256
8053: PUSH
8054: LD_INT 1000
8056: EQUAL
8057: IFFALSE 8073
// SetTag ( i , 1 ) else
8059: LD_VAR 0 2
8063: PPUSH
8064: LD_INT 1
8066: PPUSH
8067: CALL_OW 109
8071: GO 8149
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 6 then
8073: LD_VAR 0 2
8077: PPUSH
8078: LD_VAR 0 6
8082: PUSH
8083: LD_INT 2
8085: ARRAY
8086: PUSH
8087: LD_INT 1
8089: ARRAY
8090: PPUSH
8091: LD_VAR 0 6
8095: PUSH
8096: LD_INT 2
8098: ARRAY
8099: PUSH
8100: LD_INT 2
8102: ARRAY
8103: PPUSH
8104: CALL_OW 297
8108: PUSH
8109: LD_INT 6
8111: GREATER
8112: IFFALSE 8149
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8114: LD_VAR 0 2
8118: PPUSH
8119: LD_VAR 0 6
8123: PUSH
8124: LD_INT 2
8126: ARRAY
8127: PUSH
8128: LD_INT 1
8130: ARRAY
8131: PPUSH
8132: LD_VAR 0 6
8136: PUSH
8137: LD_INT 2
8139: ARRAY
8140: PUSH
8141: LD_INT 2
8143: ARRAY
8144: PPUSH
8145: CALL_OW 111
// end else
8149: GO 8389
// begin if GetLives ( i ) < 720 then
8151: LD_VAR 0 2
8155: PPUSH
8156: CALL_OW 256
8160: PUSH
8161: LD_INT 720
8163: LESS
8164: IFFALSE 8180
// SetTag ( i , 0 ) else
8166: LD_VAR 0 2
8170: PPUSH
8171: LD_INT 0
8173: PPUSH
8174: CALL_OW 109
8178: GO 8389
// if tag <= attackFormula [ 1 ] then
8180: LD_VAR 0 4
8184: PUSH
8185: LD_VAR 0 6
8189: PUSH
8190: LD_INT 1
8192: ARRAY
8193: LESSEQUAL
8194: IFFALSE 8355
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
8196: LD_VAR 0 2
8200: PPUSH
8201: LD_VAR 0 6
8205: PUSH
8206: LD_INT 1
8208: ARRAY
8209: PUSH
8210: LD_VAR 0 4
8214: ARRAY
8215: PUSH
8216: LD_INT 1
8218: ARRAY
8219: PPUSH
8220: LD_VAR 0 6
8224: PUSH
8225: LD_INT 1
8227: ARRAY
8228: PUSH
8229: LD_VAR 0 4
8233: ARRAY
8234: PUSH
8235: LD_INT 2
8237: ARRAY
8238: PPUSH
8239: CALL_OW 297
8243: PUSH
8244: LD_INT 6
8246: GREATER
8247: IFFALSE 8298
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
8249: LD_VAR 0 2
8253: PPUSH
8254: LD_VAR 0 6
8258: PUSH
8259: LD_INT 1
8261: ARRAY
8262: PUSH
8263: LD_VAR 0 4
8267: ARRAY
8268: PUSH
8269: LD_INT 1
8271: ARRAY
8272: PPUSH
8273: LD_VAR 0 6
8277: PUSH
8278: LD_INT 1
8280: ARRAY
8281: PUSH
8282: LD_VAR 0 4
8286: ARRAY
8287: PUSH
8288: LD_INT 2
8290: ARRAY
8291: PPUSH
8292: CALL_OW 114
8296: GO 8353
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8298: LD_INT 81
8300: PUSH
8301: LD_INT 1
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: LD_INT 91
8310: PUSH
8311: LD_VAR 0 2
8315: PUSH
8316: LD_INT 10
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: LIST
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PPUSH
8328: CALL_OW 69
8332: NOT
8333: IFFALSE 8353
// SetTag ( i , tag + 1 ) ;
8335: LD_VAR 0 2
8339: PPUSH
8340: LD_VAR 0 4
8344: PUSH
8345: LD_INT 1
8347: PLUS
8348: PPUSH
8349: CALL_OW 109
// end else
8353: GO 8389
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8355: LD_VAR 0 2
8359: PPUSH
8360: LD_INT 81
8362: PUSH
8363: LD_INT 1
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PPUSH
8370: CALL_OW 69
8374: PPUSH
8375: LD_VAR 0 2
8379: PPUSH
8380: CALL_OW 74
8384: PPUSH
8385: CALL_OW 115
// end ; end ;
8389: GO 8019
8391: POP
8392: POP
// end ; if sci then
8393: LD_VAR 0 8
8397: IFFALSE 8572
// begin if not sol and not mech then
8399: LD_VAR 0 7
8403: NOT
8404: PUSH
8405: LD_VAR 0 9
8409: NOT
8410: AND
8411: IFFALSE 8479
// begin for i in sci do
8413: LD_ADDR_VAR 0 2
8417: PUSH
8418: LD_VAR 0 8
8422: PUSH
8423: FOR_IN
8424: IFFALSE 8475
// begin usAttackers := usAttackers diff i ;
8426: LD_ADDR_EXP 43
8430: PUSH
8431: LD_EXP 43
8435: PUSH
8436: LD_VAR 0 2
8440: DIFF
8441: ST_TO_ADDR
// usForces := usForces union i ;
8442: LD_ADDR_EXP 40
8446: PUSH
8447: LD_EXP 40
8451: PUSH
8452: LD_VAR 0 2
8456: UNION
8457: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8458: LD_VAR 0 2
8462: PPUSH
8463: LD_INT 34
8465: PPUSH
8466: LD_INT 68
8468: PPUSH
8469: CALL_OW 111
// end ;
8473: GO 8423
8475: POP
8476: POP
// end else
8477: GO 8572
// for i in sci do
8479: LD_ADDR_VAR 0 2
8483: PUSH
8484: LD_VAR 0 8
8488: PUSH
8489: FOR_IN
8490: IFFALSE 8570
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 8 then
8492: LD_VAR 0 2
8496: PPUSH
8497: LD_VAR 0 6
8501: PUSH
8502: LD_INT 2
8504: ARRAY
8505: PUSH
8506: LD_INT 1
8508: ARRAY
8509: PPUSH
8510: LD_VAR 0 6
8514: PUSH
8515: LD_INT 2
8517: ARRAY
8518: PUSH
8519: LD_INT 2
8521: ARRAY
8522: PPUSH
8523: CALL_OW 297
8527: PUSH
8528: LD_INT 8
8530: GREATER
8531: IFFALSE 8568
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8533: LD_VAR 0 2
8537: PPUSH
8538: LD_VAR 0 6
8542: PUSH
8543: LD_INT 2
8545: ARRAY
8546: PUSH
8547: LD_INT 1
8549: ARRAY
8550: PPUSH
8551: LD_VAR 0 6
8555: PUSH
8556: LD_INT 2
8558: ARRAY
8559: PUSH
8560: LD_INT 2
8562: ARRAY
8563: PPUSH
8564: CALL_OW 111
8568: GO 8489
8570: POP
8571: POP
// end ; if tanks and mech then
8572: LD_VAR 0 10
8576: PUSH
8577: LD_VAR 0 9
8581: AND
8582: IFFALSE 9187
// begin for i in mech do
8584: LD_ADDR_VAR 0 2
8588: PUSH
8589: LD_VAR 0 9
8593: PUSH
8594: FOR_IN
8595: IFFALSE 9185
// begin tag := GetTag ( i ) ;
8597: LD_ADDR_VAR 0 4
8601: PUSH
8602: LD_VAR 0 2
8606: PPUSH
8607: CALL_OW 110
8611: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8612: LD_ADDR_VAR 0 11
8616: PUSH
8617: LD_VAR 0 2
8621: PPUSH
8622: CALL_OW 310
8626: ST_TO_ADDR
// if not tag then
8627: LD_VAR 0 4
8631: NOT
8632: IFFALSE 8945
// begin if veh then
8634: LD_VAR 0 11
8638: IFFALSE 8787
// begin if GetLives ( veh ) = 1000 and GetFuel ( veh ) > 60 then
8640: LD_VAR 0 11
8644: PPUSH
8645: CALL_OW 256
8649: PUSH
8650: LD_INT 1000
8652: EQUAL
8653: PUSH
8654: LD_VAR 0 11
8658: PPUSH
8659: CALL_OW 261
8663: PUSH
8664: LD_INT 60
8666: GREATER
8667: AND
8668: IFFALSE 8684
// SetTag ( i , 1 ) else
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_INT 1
8677: PPUSH
8678: CALL_OW 109
8682: GO 8785
// if GetDistUnitXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8684: LD_VAR 0 2
8688: PPUSH
8689: LD_VAR 0 6
8693: PUSH
8694: LD_INT 3
8696: ARRAY
8697: PUSH
8698: LD_INT 1
8700: ARRAY
8701: PPUSH
8702: LD_VAR 0 6
8706: PUSH
8707: LD_INT 3
8709: ARRAY
8710: PUSH
8711: LD_INT 2
8713: ARRAY
8714: PPUSH
8715: CALL_OW 297
8719: PUSH
8720: LD_INT 7
8722: GREATER
8723: IFFALSE 8762
// ComMoveXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8725: LD_VAR 0 2
8729: PPUSH
8730: LD_VAR 0 6
8734: PUSH
8735: LD_INT 3
8737: ARRAY
8738: PUSH
8739: LD_INT 1
8741: ARRAY
8742: PPUSH
8743: LD_VAR 0 6
8747: PUSH
8748: LD_INT 3
8750: ARRAY
8751: PUSH
8752: LD_INT 2
8754: ARRAY
8755: PPUSH
8756: CALL_OW 111
8760: GO 8785
// begin ComExitVehicle ( i ) ;
8762: LD_VAR 0 2
8766: PPUSH
8767: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8771: LD_VAR 0 2
8775: PPUSH
8776: LD_VAR 0 11
8780: PPUSH
8781: CALL_OW 189
// end ; end else
8785: GO 8943
// if GetLives ( i ) < 700 then
8787: LD_VAR 0 2
8791: PPUSH
8792: CALL_OW 256
8796: PUSH
8797: LD_INT 700
8799: LESS
8800: IFFALSE 8851
// begin usAttackers := usAttackers diff i ;
8802: LD_ADDR_EXP 43
8806: PUSH
8807: LD_EXP 43
8811: PUSH
8812: LD_VAR 0 2
8816: DIFF
8817: ST_TO_ADDR
// usForces := usForces union i ;
8818: LD_ADDR_EXP 40
8822: PUSH
8823: LD_EXP 40
8827: PUSH
8828: LD_VAR 0 2
8832: UNION
8833: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8834: LD_VAR 0 2
8838: PPUSH
8839: LD_INT 34
8841: PPUSH
8842: LD_INT 68
8844: PPUSH
8845: CALL_OW 111
// end else
8849: GO 8943
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
8851: LD_VAR 0 10
8855: PPUSH
8856: LD_INT 58
8858: PUSH
8859: EMPTY
8860: LIST
8861: PUSH
8862: LD_INT 24
8864: PUSH
8865: LD_INT 1000
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PPUSH
8876: CALL_OW 72
8880: PUSH
8881: LD_VAR 0 2
8885: PPUSH
8886: CALL_OW 314
8890: NOT
8891: AND
8892: IFFALSE 8943
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) ;
8894: LD_VAR 0 2
8898: PPUSH
8899: LD_VAR 0 10
8903: PPUSH
8904: LD_INT 58
8906: PUSH
8907: EMPTY
8908: LIST
8909: PUSH
8910: LD_INT 24
8912: PUSH
8913: LD_INT 1000
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 72
8928: PPUSH
8929: LD_VAR 0 2
8933: PPUSH
8934: CALL_OW 74
8938: PPUSH
8939: CALL_OW 120
// end else
8943: GO 9183
// begin if GetLives ( veh ) < 620 then
8945: LD_VAR 0 11
8949: PPUSH
8950: CALL_OW 256
8954: PUSH
8955: LD_INT 620
8957: LESS
8958: IFFALSE 8974
// SetTag ( i , 0 ) else
8960: LD_VAR 0 2
8964: PPUSH
8965: LD_INT 0
8967: PPUSH
8968: CALL_OW 109
8972: GO 9183
// if tag <= attackFormula [ 4 ] then
8974: LD_VAR 0 4
8978: PUSH
8979: LD_VAR 0 6
8983: PUSH
8984: LD_INT 4
8986: ARRAY
8987: LESSEQUAL
8988: IFFALSE 9149
// begin if GetDistUnitXY ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8990: LD_VAR 0 2
8994: PPUSH
8995: LD_VAR 0 6
8999: PUSH
9000: LD_INT 4
9002: ARRAY
9003: PUSH
9004: LD_VAR 0 4
9008: ARRAY
9009: PUSH
9010: LD_INT 1
9012: ARRAY
9013: PPUSH
9014: LD_VAR 0 6
9018: PUSH
9019: LD_INT 4
9021: ARRAY
9022: PUSH
9023: LD_VAR 0 4
9027: ARRAY
9028: PUSH
9029: LD_INT 2
9031: ARRAY
9032: PPUSH
9033: CALL_OW 297
9037: PUSH
9038: LD_INT 6
9040: GREATER
9041: IFFALSE 9092
// ComAgressiveMove ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
9043: LD_VAR 0 2
9047: PPUSH
9048: LD_VAR 0 6
9052: PUSH
9053: LD_INT 4
9055: ARRAY
9056: PUSH
9057: LD_VAR 0 4
9061: ARRAY
9062: PUSH
9063: LD_INT 1
9065: ARRAY
9066: PPUSH
9067: LD_VAR 0 6
9071: PUSH
9072: LD_INT 4
9074: ARRAY
9075: PUSH
9076: LD_VAR 0 4
9080: ARRAY
9081: PUSH
9082: LD_INT 2
9084: ARRAY
9085: PPUSH
9086: CALL_OW 114
9090: GO 9147
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 16 ] ] ) then
9092: LD_INT 81
9094: PUSH
9095: LD_INT 1
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: LD_INT 91
9104: PUSH
9105: LD_VAR 0 2
9109: PUSH
9110: LD_INT 16
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PPUSH
9122: CALL_OW 69
9126: NOT
9127: IFFALSE 9147
// SetTag ( i , tag + 1 ) ;
9129: LD_VAR 0 2
9133: PPUSH
9134: LD_VAR 0 4
9138: PUSH
9139: LD_INT 1
9141: PLUS
9142: PPUSH
9143: CALL_OW 109
// end else
9147: GO 9183
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9149: LD_VAR 0 2
9153: PPUSH
9154: LD_INT 81
9156: PUSH
9157: LD_INT 1
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: PPUSH
9169: LD_VAR 0 2
9173: PPUSH
9174: CALL_OW 74
9178: PPUSH
9179: CALL_OW 115
// end ; end ;
9183: GO 8594
9185: POP
9186: POP
// end ; until not usAttackers ;
9187: LD_EXP 43
9191: NOT
9192: IFFALSE 7896
// end ; end_of_file
9194: LD_VAR 0 1
9198: RET
// export function Action ; var hasAll , i , tmp ; begin
9199: LD_INT 0
9201: PPUSH
9202: PPUSH
9203: PPUSH
9204: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9205: LD_ADDR_VAR 0 2
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 21
9222: PUSH
9223: LD_INT 1
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 23
9232: PUSH
9233: LD_INT 2
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: PPUSH
9245: CALL_OW 69
9249: PUSH
9250: LD_INT 7
9252: GREATEREQUAL
9253: ST_TO_ADDR
// Video ( true ) ;
9254: LD_INT 1
9256: PPUSH
9257: CALL 974 0 1
// CenterNowOnUnits ( Heike ) ;
9261: LD_EXP 24
9265: PPUSH
9266: CALL_OW 87
// wait ( 0 0$2 ) ;
9270: LD_INT 70
9272: PPUSH
9273: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9277: LD_EXP 32
9281: PPUSH
9282: LD_STRING DF-1-start
9284: PPUSH
9285: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9289: LD_EXP 24
9293: PPUSH
9294: LD_EXP 32
9298: PPUSH
9299: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9303: LD_EXP 24
9307: PPUSH
9308: LD_STRING DH-1-start
9310: PPUSH
9311: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9315: LD_EXP 33
9319: PPUSH
9320: LD_INT 92
9322: PPUSH
9323: LD_INT 21
9325: PPUSH
9326: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9330: LD_EXP 28
9334: PPUSH
9335: LD_INT 94
9337: PPUSH
9338: LD_INT 23
9340: PPUSH
9341: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9345: LD_EXP 36
9349: PUSH
9350: LD_INT 1
9352: ARRAY
9353: PPUSH
9354: LD_INT 90
9356: PPUSH
9357: LD_INT 23
9359: PPUSH
9360: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9364: LD_EXP 36
9368: PUSH
9369: LD_INT 2
9371: ARRAY
9372: PPUSH
9373: LD_INT 93
9375: PPUSH
9376: LD_INT 25
9378: PPUSH
9379: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9383: LD_EXP 36
9387: PPUSH
9388: LD_EXP 33
9392: PPUSH
9393: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9397: LD_EXP 33
9401: PUSH
9402: LD_EXP 28
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PPUSH
9411: LD_EXP 24
9415: PPUSH
9416: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9420: LD_EXP 24
9424: PPUSH
9425: LD_EXP 33
9429: PPUSH
9430: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9434: LD_INT 35
9436: PPUSH
9437: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9441: LD_EXP 33
9445: PPUSH
9446: LD_INT 92
9448: PPUSH
9449: LD_INT 21
9451: PPUSH
9452: CALL_OW 307
9456: IFFALSE 9434
// Say ( Omar , DO-1-start ) ;
9458: LD_EXP 33
9462: PPUSH
9463: LD_STRING DO-1-start
9465: PPUSH
9466: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9470: LD_EXP 24
9474: PPUSH
9475: LD_STRING DH-2-start
9477: PPUSH
9478: CALL_OW 88
// if hasAll then
9482: LD_VAR 0 2
9486: IFFALSE 9614
// begin Say ( Omar , DO-2-start ) ;
9488: LD_EXP 33
9492: PPUSH
9493: LD_STRING DO-2-start
9495: PPUSH
9496: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9500: LD_EXP 33
9504: PPUSH
9505: LD_STRING DO-3-start
9507: PPUSH
9508: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9512: LD_EXP 24
9516: PPUSH
9517: LD_STRING DH-3-start
9519: PPUSH
9520: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9524: LD_EXP 32
9528: PPUSH
9529: LD_STRING DF-2-start
9531: PPUSH
9532: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9536: LD_EXP 33
9540: PPUSH
9541: LD_EXP 32
9545: PPUSH
9546: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9550: LD_EXP 33
9554: PPUSH
9555: LD_STRING DO-4-start
9557: PPUSH
9558: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9562: LD_EXP 32
9566: PPUSH
9567: LD_STRING DF-3-start
9569: PPUSH
9570: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9574: LD_EXP 33
9578: PPUSH
9579: LD_STRING DO-5-start
9581: PPUSH
9582: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9586: LD_EXP 32
9590: PPUSH
9591: LD_STRING DF-4-start
9593: PPUSH
9594: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9598: LD_EXP 33
9602: PPUSH
9603: LD_EXP 24
9607: PPUSH
9608: CALL_OW 119
// end else
9612: GO 9714
// begin Say ( Omar , DO-2-start-a ) ;
9614: LD_EXP 33
9618: PPUSH
9619: LD_STRING DO-2-start-a
9621: PPUSH
9622: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9626: LD_EXP 33
9630: PPUSH
9631: LD_STRING DO-3-start-a
9633: PPUSH
9634: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9638: LD_EXP 24
9642: PPUSH
9643: LD_STRING DH-3-start-a
9645: PPUSH
9646: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9650: LD_EXP 32
9654: PPUSH
9655: LD_STRING DF-2-start-a
9657: PPUSH
9658: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9662: LD_EXP 33
9666: PPUSH
9667: LD_EXP 32
9671: PPUSH
9672: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9676: LD_EXP 33
9680: PPUSH
9681: LD_STRING DO-4-start-a
9683: PPUSH
9684: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9688: LD_EXP 32
9692: PPUSH
9693: LD_STRING DF-3-start-a
9695: PPUSH
9696: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9700: LD_EXP 33
9704: PPUSH
9705: LD_EXP 24
9709: PPUSH
9710: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9714: LD_INT 10
9716: PPUSH
9717: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9721: LD_EXP 33
9725: PPUSH
9726: LD_STRING DO-1-mission
9728: PPUSH
9729: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9733: LD_EXP 33
9737: PPUSH
9738: LD_STRING DO-2-mission
9740: PPUSH
9741: CALL_OW 88
// if not hasAll then
9745: LD_VAR 0 2
9749: NOT
9750: IFFALSE 9764
// Say ( Omar , DO-3-mission ) ;
9752: LD_EXP 33
9756: PPUSH
9757: LD_STRING DO-3-mission
9759: PPUSH
9760: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9764: LD_EXP 33
9768: PPUSH
9769: LD_STRING DO-4-mission
9771: PPUSH
9772: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9776: LD_EXP 24
9780: PPUSH
9781: LD_STRING DH-1-mission
9783: PPUSH
9784: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9788: LD_EXP 32
9792: PPUSH
9793: LD_STRING DF-1-mission
9795: PPUSH
9796: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9800: LD_EXP 33
9804: PPUSH
9805: LD_STRING DO-5-mission
9807: PPUSH
9808: CALL_OW 88
// if not hasAll then
9812: LD_VAR 0 2
9816: NOT
9817: IFFALSE 9952
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9819: LD_ADDR_VAR 0 4
9823: PUSH
9824: LD_INT 22
9826: PUSH
9827: LD_INT 2
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: LD_INT 21
9836: PUSH
9837: LD_INT 1
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: LD_INT 23
9846: PUSH
9847: LD_INT 2
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: LIST
9858: PPUSH
9859: CALL_OW 69
9863: ST_TO_ADDR
// for i := 7 downto tmp do
9864: LD_ADDR_VAR 0 3
9868: PUSH
9869: DOUBLE
9870: LD_INT 7
9872: INC
9873: ST_TO_ADDR
9874: LD_VAR 0 4
9878: PUSH
9879: FOR_DOWNTO
9880: IFFALSE 9950
// begin if omarSquad < 3 then
9882: LD_EXP 36
9886: PUSH
9887: LD_INT 3
9889: LESS
9890: IFFALSE 9894
// break ;
9892: GO 9950
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9894: LD_EXP 36
9898: PUSH
9899: LD_INT 3
9901: ARRAY
9902: PPUSH
9903: LD_INT 2
9905: PPUSH
9906: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9910: LD_ADDR_EXP 38
9914: PUSH
9915: LD_EXP 38
9919: PUSH
9920: LD_EXP 36
9924: PUSH
9925: LD_INT 3
9927: ARRAY
9928: UNION
9929: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9930: LD_ADDR_EXP 36
9934: PUSH
9935: LD_EXP 36
9939: PPUSH
9940: LD_INT 3
9942: PPUSH
9943: CALL_OW 3
9947: ST_TO_ADDR
// end ;
9948: GO 9879
9950: POP
9951: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9952: LD_EXP 33
9956: PUSH
9957: LD_EXP 36
9961: ADD
9962: PPUSH
9963: LD_INT 103
9965: PPUSH
9966: LD_INT 9
9968: PPUSH
9969: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9973: LD_VAR 0 2
9977: PUSH
9978: LD_EXP 29
9982: PPUSH
9983: CALL_OW 302
9987: AND
9988: IFFALSE 10049
// begin wait ( 0 0$3 ) ;
9990: LD_INT 105
9992: PPUSH
9993: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9997: LD_EXP 29
10001: PPUSH
10002: LD_EXP 32
10006: PPUSH
10007: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10011: LD_EXP 29
10015: PPUSH
10016: LD_STRING DK-1-side
10018: PPUSH
10019: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10023: LD_EXP 32
10027: PPUSH
10028: LD_EXP 29
10032: PPUSH
10033: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10037: LD_EXP 32
10041: PPUSH
10042: LD_STRING DF-1-side
10044: PPUSH
10045: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10049: LD_INT 22
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 69
10063: PPUSH
10064: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10068: LD_EXP 32
10072: PUSH
10073: LD_EXP 35
10077: ADD
10078: PPUSH
10079: LD_INT 108
10081: PPUSH
10082: LD_INT 62
10084: PPUSH
10085: CALL_OW 111
// gameStarted := true ;
10089: LD_ADDR_EXP 3
10093: PUSH
10094: LD_INT 1
10096: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10097: LD_INT 105
10099: PPUSH
10100: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10104: LD_EXP 24
10108: PPUSH
10109: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10113: LD_EXP 24
10117: PPUSH
10118: LD_EXP 28
10122: PPUSH
10123: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10127: LD_INT 22
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PPUSH
10137: CALL_OW 69
10141: PUSH
10142: LD_EXP 24
10146: DIFF
10147: PPUSH
10148: LD_EXP 24
10152: PPUSH
10153: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10157: LD_EXP 24
10161: PPUSH
10162: LD_STRING DH-1-explore
10164: PPUSH
10165: CALL_OW 88
// if Givi then
10169: LD_EXP 25
10173: IFFALSE 10189
// Say ( Givi , DG-1-explore ) else
10175: LD_EXP 25
10179: PPUSH
10180: LD_STRING DG-1-explore
10182: PPUSH
10183: CALL_OW 88
10187: GO 10226
// if heikeSecondSquad then
10189: LD_EXP 38
10193: IFFALSE 10226
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10195: LD_EXP 38
10199: PPUSH
10200: LD_INT 26
10202: PUSH
10203: LD_INT 1
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PPUSH
10210: CALL_OW 72
10214: PUSH
10215: LD_INT 1
10217: ARRAY
10218: PPUSH
10219: LD_STRING DArm-1-explore
10221: PPUSH
10222: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10226: LD_EXP 28
10230: PPUSH
10231: LD_STRING DA-1-explore
10233: PPUSH
10234: CALL_OW 88
// if Sophia then
10238: LD_EXP 30
10242: IFFALSE 10320
// begin Say ( Sophia , DS-2-explore ) ;
10244: LD_EXP 30
10248: PPUSH
10249: LD_STRING DS-2-explore
10251: PPUSH
10252: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10256: LD_EXP 28
10260: PPUSH
10261: LD_STRING DA-2-explore
10263: PPUSH
10264: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10268: LD_EXP 30
10272: PPUSH
10273: LD_EXP 28
10277: PPUSH
10278: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10282: LD_EXP 28
10286: PPUSH
10287: LD_EXP 30
10291: PPUSH
10292: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10296: LD_EXP 30
10300: PPUSH
10301: LD_STRING DS-3-explore
10303: PPUSH
10304: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10308: LD_EXP 28
10312: PPUSH
10313: LD_STRING DA-3-explore
10315: PPUSH
10316: CALL_OW 88
// end ; if Mike then
10320: LD_EXP 26
10324: IFFALSE 10380
// begin Say ( Mike , DM-1-explore ) ;
10326: LD_EXP 26
10330: PPUSH
10331: LD_STRING DM-1-explore
10333: PPUSH
10334: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10338: LD_EXP 24
10342: PPUSH
10343: LD_STRING DH-2-explore
10345: PPUSH
10346: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10350: LD_EXP 26
10354: PPUSH
10355: LD_STRING DM-2-explore
10357: PPUSH
10358: CALL_OW 88
// if Kaia then
10362: LD_EXP 29
10366: IFFALSE 10380
// Say ( Kaia , DK-1-explore ) ;
10368: LD_EXP 29
10372: PPUSH
10373: LD_STRING DK-1-explore
10375: PPUSH
10376: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10380: LD_INT 22
10382: PUSH
10383: LD_INT 2
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PPUSH
10390: CALL_OW 69
10394: PPUSH
10395: CALL_OW 139
// Video ( false ) ;
10399: LD_INT 0
10401: PPUSH
10402: CALL 974 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10406: LD_STRING BuildBase
10408: PPUSH
10409: CALL_OW 337
// SaveForQuickRestart ;
10413: CALL_OW 22
// end ;
10417: LD_VAR 0 1
10421: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10422: LD_EXP 5
10426: NOT
10427: PUSH
10428: LD_EXP 6
10432: NOT
10433: AND
10434: PUSH
10435: LD_INT 5
10437: PPUSH
10438: LD_INT 22
10440: PUSH
10441: LD_INT 2
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PPUSH
10448: CALL_OW 70
10452: AND
10453: PUSH
10454: LD_EXP 6
10458: NOT
10459: AND
10460: IFFALSE 10545
10462: GO 10464
10464: DISABLE
// begin if Mike then
10465: LD_EXP 26
10469: IFFALSE 10485
// Say ( Mike , DM-1-scout ) else
10471: LD_EXP 26
10475: PPUSH
10476: LD_STRING DM-1-scout
10478: PPUSH
10479: CALL_OW 88
10483: GO 10516
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10485: LD_EXP 38
10489: PPUSH
10490: LD_INT 26
10492: PUSH
10493: LD_INT 1
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PPUSH
10500: CALL_OW 72
10504: PUSH
10505: LD_INT 1
10507: ARRAY
10508: PPUSH
10509: LD_STRING DArm-1-explore
10511: PPUSH
10512: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10516: LD_INT 54
10518: PPUSH
10519: LD_INT 35
10521: PPUSH
10522: LD_INT 2
10524: PPUSH
10525: LD_INT 1
10527: PPUSH
10528: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10532: LD_INT 54
10534: PPUSH
10535: LD_INT 35
10537: PPUSH
10538: LD_INT 2
10540: PPUSH
10541: CALL_OW 331
// end ;
10545: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10546: LD_INT 6
10548: PPUSH
10549: LD_INT 22
10551: PUSH
10552: LD_INT 2
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PPUSH
10559: CALL_OW 70
10563: PUSH
10564: LD_EXP 6
10568: NOT
10569: AND
10570: IFFALSE 10824
10572: GO 10574
10574: DISABLE
10575: LD_INT 0
10577: PPUSH
10578: PPUSH
10579: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10580: LD_ADDR_VAR 0 1
10584: PUSH
10585: LD_EXP 38
10589: PPUSH
10590: LD_INT 26
10592: PUSH
10593: LD_INT 1
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PPUSH
10600: CALL_OW 72
10604: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10605: LD_ADDR_VAR 0 2
10609: PUSH
10610: LD_EXP 38
10614: PPUSH
10615: LD_INT 26
10617: PUSH
10618: LD_INT 2
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PPUSH
10625: CALL_OW 72
10629: ST_TO_ADDR
// DialogueOn ;
10630: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10634: LD_INT 36
10636: PPUSH
10637: LD_INT 22
10639: PPUSH
10640: LD_INT 2
10642: PPUSH
10643: LD_INT 8
10645: PPUSH
10646: CALL_OW 330
// dwait ( 0 0$1 ) ;
10650: LD_INT 35
10652: PPUSH
10653: CALL_OW 68
// speakerOk := false ;
10657: LD_ADDR_VAR 0 3
10661: PUSH
10662: LD_INT 0
10664: ST_TO_ADDR
// if Mike then
10665: LD_EXP 26
10669: IFFALSE 10691
// speakerOk := Say ( Mike , DM-1-spot ) else
10671: LD_ADDR_VAR 0 3
10675: PUSH
10676: LD_EXP 26
10680: PPUSH
10681: LD_STRING DM-1-spot
10683: PPUSH
10684: CALL_OW 88
10688: ST_TO_ADDR
10689: GO 10719
// if randomMen then
10691: LD_VAR 0 1
10695: IFFALSE 10719
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10697: LD_ADDR_VAR 0 3
10701: PUSH
10702: LD_VAR 0 1
10706: PUSH
10707: LD_INT 1
10709: ARRAY
10710: PPUSH
10711: LD_STRING DArm-1-spot-a
10713: PPUSH
10714: CALL_OW 88
10718: ST_TO_ADDR
// if speakerOk then
10719: LD_VAR 0 3
10723: IFFALSE 10767
// begin if Givi then
10725: LD_EXP 25
10729: IFFALSE 10745
// Say ( Givi , DG-1-spot ) else
10731: LD_EXP 25
10735: PPUSH
10736: LD_STRING DG-1-spot
10738: PPUSH
10739: CALL_OW 88
10743: GO 10767
// if randomWomen then
10745: LD_VAR 0 2
10749: IFFALSE 10767
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10751: LD_VAR 0 2
10755: PUSH
10756: LD_INT 1
10758: ARRAY
10759: PPUSH
10760: LD_STRING DArf-1-spot-a
10762: PPUSH
10763: CALL_OW 88
// end ; if Mike then
10767: LD_EXP 26
10771: IFFALSE 10787
// Say ( Heike , DH-1-spot ) else
10773: LD_EXP 24
10777: PPUSH
10778: LD_STRING DH-1-spot
10780: PPUSH
10781: CALL_OW 88
10785: GO 10799
// Say ( Heike , DH-1-spot-a ) ;
10787: LD_EXP 24
10791: PPUSH
10792: LD_STRING DH-1-spot-a
10794: PPUSH
10795: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10799: LD_INT 36
10801: PPUSH
10802: LD_INT 22
10804: PPUSH
10805: LD_INT 2
10807: PPUSH
10808: CALL_OW 331
// DialogueOff ;
10812: CALL_OW 7
// americanBaseSpoted := true ;
10816: LD_ADDR_EXP 5
10820: PUSH
10821: LD_INT 1
10823: ST_TO_ADDR
// end ;
10824: PPOPN 3
10826: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10827: LD_EXP 5
10831: NOT
10832: PUSH
10833: LD_INT 22
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 101
10845: PUSH
10846: LD_INT 1
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: AND
10862: PUSH
10863: LD_EXP 6
10867: NOT
10868: AND
10869: IFFALSE 10955
10871: GO 10873
10873: DISABLE
10874: LD_INT 0
10876: PPUSH
// begin americanBaseSpoted := true ;
10877: LD_ADDR_EXP 5
10881: PUSH
10882: LD_INT 1
10884: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10885: LD_ADDR_VAR 0 1
10889: PUSH
10890: LD_EXP 38
10894: PPUSH
10895: LD_INT 26
10897: PUSH
10898: LD_INT 1
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PPUSH
10905: CALL_OW 72
10909: ST_TO_ADDR
// if not randomMen then
10910: LD_VAR 0 1
10914: NOT
10915: IFFALSE 10919
// exit ;
10917: GO 10955
// DialogueOn ;
10919: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10923: LD_VAR 0 1
10927: PUSH
10928: LD_INT 1
10930: ARRAY
10931: PPUSH
10932: LD_STRING DArm-1-spot-a
10934: PPUSH
10935: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10939: LD_EXP 24
10943: PPUSH
10944: LD_STRING DH-1-spot-a
10946: PPUSH
10947: CALL_OW 88
// DialogueOff ;
10951: CALL_OW 7
// end ;
10955: PPOPN 1
10957: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) do var i , p ;
10958: LD_INT 11
10960: PPUSH
10961: CALL_OW 255
10965: PUSH
10966: LD_INT 2
10968: EQUAL
10969: PUSH
10970: LD_INT 7
10972: PPUSH
10973: LD_INT 22
10975: PUSH
10976: LD_INT 1
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: LD_INT 3
10985: PUSH
10986: LD_INT 50
10988: PUSH
10989: EMPTY
10990: LIST
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PUSH
10996: LD_INT 30
10998: PUSH
10999: LD_INT 31
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: LIST
11010: PPUSH
11011: CALL_OW 70
11015: OR
11016: PUSH
11017: LD_INT 7
11019: PPUSH
11020: LD_INT 22
11022: PUSH
11023: LD_INT 2
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PPUSH
11030: CALL_OW 70
11034: PUSH
11035: LD_INT 1
11037: GREATER
11038: OR
11039: PUSH
11040: LD_INT 6
11042: PPUSH
11043: LD_INT 22
11045: PUSH
11046: LD_INT 2
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 70
11057: OR
11058: IFFALSE 11594
11060: GO 11062
11062: DISABLE
11063: LD_INT 0
11065: PPUSH
11066: PPUSH
// begin americanBaseCaptured := true ;
11067: LD_ADDR_EXP 6
11071: PUSH
11072: LD_INT 1
11074: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11075: LD_INT 105
11077: PPUSH
11078: CALL_OW 67
// if IsOk ( usCommander ) then
11082: LD_EXP 41
11086: PPUSH
11087: CALL_OW 302
11091: IFFALSE 11154
// begin usForces := usForces union usCommander ;
11093: LD_ADDR_EXP 40
11097: PUSH
11098: LD_EXP 40
11102: PUSH
11103: LD_EXP 41
11107: UNION
11108: ST_TO_ADDR
// if FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) then
11109: LD_INT 6
11111: PPUSH
11112: LD_INT 22
11114: PUSH
11115: LD_INT 2
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PPUSH
11122: CALL_OW 70
11126: IFFALSE 11142
// Say ( usCommander , DUsm-2-assault ) else
11128: LD_EXP 41
11132: PPUSH
11133: LD_STRING DUsm-2-assault
11135: PPUSH
11136: CALL_OW 88
11140: GO 11154
// Say ( usCommander , DUsm-1-assault ) ;
11142: LD_EXP 41
11146: PPUSH
11147: LD_STRING DUsm-1-assault
11149: PPUSH
11150: CALL_OW 88
// end ; for i in usForces do
11154: LD_ADDR_VAR 0 1
11158: PUSH
11159: LD_EXP 40
11163: PUSH
11164: FOR_IN
11165: IFFALSE 11204
// begin if IsInUnit ( i ) then
11167: LD_VAR 0 1
11171: PPUSH
11172: CALL_OW 310
11176: IFFALSE 11187
// ComExitBuilding ( i ) ;
11178: LD_VAR 0 1
11182: PPUSH
11183: CALL_OW 122
// AddComMoveXY ( i , 34 , 67 ) ;
11187: LD_VAR 0 1
11191: PPUSH
11192: LD_INT 34
11194: PPUSH
11195: LD_INT 67
11197: PPUSH
11198: CALL_OW 171
// end ;
11202: GO 11164
11204: POP
11205: POP
// Say ( Heike , DH-1-assault ) ;
11206: LD_EXP 24
11210: PPUSH
11211: LD_STRING DH-1-assault
11213: PPUSH
11214: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11218: LD_INT 35
11220: PPUSH
11221: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11225: LD_VAR 0 1
11229: PPUSH
11230: LD_INT 34
11232: PPUSH
11233: LD_INT 67
11235: PPUSH
11236: CALL_OW 111
// until not usForces ;
11240: LD_EXP 40
11244: NOT
11245: IFFALSE 11218
// music_nat := 2 ;
11247: LD_ADDR_OWVAR 71
11251: PUSH
11252: LD_INT 2
11254: ST_TO_ADDR
// music_class := music_victory ;
11255: LD_ADDR_OWVAR 72
11259: PUSH
11260: LD_INT 4
11262: ST_TO_ADDR
// if not americanHasEscaped then
11263: LD_EXP 7
11267: NOT
11268: IFFALSE 11282
// Say ( Heike , DH-2-assault ) ;
11270: LD_EXP 24
11274: PPUSH
11275: LD_STRING DH-2-assault
11277: PPUSH
11278: CALL_OW 88
// wait ( 0 0$2 ) ;
11282: LD_INT 70
11284: PPUSH
11285: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11289: LD_INT 35
11291: PPUSH
11292: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11296: LD_INT 22
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 21
11308: PUSH
11309: LD_INT 1
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: LD_INT 3
11318: PUSH
11319: LD_INT 50
11321: PUSH
11322: EMPTY
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: PPUSH
11334: CALL_OW 69
11338: NOT
11339: IFFALSE 11289
// Video ( true ) ;
11341: LD_INT 1
11343: PPUSH
11344: CALL 974 0 1
// if not GetSide ( usDepot ) = 2 then
11348: LD_INT 11
11350: PPUSH
11351: CALL_OW 255
11355: PUSH
11356: LD_INT 2
11358: EQUAL
11359: NOT
11360: IFFALSE 11372
// SetSide ( usDepot , 2 ) ;
11362: LD_INT 11
11364: PPUSH
11365: LD_INT 2
11367: PPUSH
11368: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11372: LD_INT 35
11374: PPUSH
11375: LD_INT 22
11377: PPUSH
11378: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11382: LD_EXP 24
11386: PPUSH
11387: LD_INT 35
11389: PPUSH
11390: LD_INT 22
11392: PPUSH
11393: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11397: LD_EXP 24
11401: PPUSH
11402: LD_INT 38
11404: PPUSH
11405: LD_INT 25
11407: PPUSH
11408: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11412: LD_EXP 37
11416: PUSH
11417: LD_EXP 38
11421: UNION
11422: PPUSH
11423: LD_INT 39
11425: PPUSH
11426: LD_INT 26
11428: PPUSH
11429: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11433: LD_EXP 37
11437: PUSH
11438: LD_EXP 38
11442: UNION
11443: PPUSH
11444: LD_EXP 24
11448: PPUSH
11449: CALL_OW 179
// p := 0 ;
11453: LD_ADDR_VAR 0 2
11457: PUSH
11458: LD_INT 0
11460: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11461: LD_INT 35
11463: PPUSH
11464: CALL_OW 67
// p := p + 1 ;
11468: LD_ADDR_VAR 0 2
11472: PUSH
11473: LD_VAR 0 2
11477: PUSH
11478: LD_INT 1
11480: PLUS
11481: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11482: LD_EXP 24
11486: PPUSH
11487: CALL_OW 314
11491: NOT
11492: PUSH
11493: LD_VAR 0 2
11497: PUSH
11498: LD_INT 10
11500: GREATER
11501: OR
11502: IFFALSE 11461
// Say ( Heike , DH-1-capture ) ;
11504: LD_EXP 24
11508: PPUSH
11509: LD_STRING DH-1-capture
11511: PPUSH
11512: CALL_OW 88
// if Markov then
11516: LD_EXP 31
11520: IFFALSE 11534
// Say ( Markov , DMar-1-capture ) ;
11522: LD_EXP 31
11526: PPUSH
11527: LD_STRING DMar-1-capture
11529: PPUSH
11530: CALL_OW 88
// if Sophia then
11534: LD_EXP 30
11538: IFFALSE 11564
// begin Say ( Heike , DH-2-capture ) ;
11540: LD_EXP 24
11544: PPUSH
11545: LD_STRING DH-2-capture
11547: PPUSH
11548: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11552: LD_EXP 30
11556: PPUSH
11557: LD_STRING DS-1-capture
11559: PPUSH
11560: CALL_OW 88
// end ; Video ( false ) ;
11564: LD_INT 0
11566: PPUSH
11567: CALL 974 0 1
// music_nat := music_auto ;
11571: LD_ADDR_OWVAR 71
11575: PUSH
11576: LD_INT 0
11578: ST_TO_ADDR
// music_class := music_auto ;
11579: LD_ADDR_OWVAR 72
11583: PUSH
11584: LD_INT 0
11586: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11587: LD_STRING ConstructBase
11589: PPUSH
11590: CALL_OW 337
// end ;
11594: PPOPN 2
11596: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11597: LD_INT 22
11599: PUSH
11600: LD_INT 2
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 30
11609: PUSH
11610: LD_INT 2
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 3
11619: PUSH
11620: LD_INT 57
11622: PUSH
11623: EMPTY
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: PPUSH
11635: CALL_OW 69
11639: IFFALSE 11727
11641: GO 11643
11643: DISABLE
// begin workshopBuilded := true ;
11644: LD_ADDR_EXP 9
11648: PUSH
11649: LD_INT 1
11651: ST_TO_ADDR
// if IsOk ( Markov ) then
11652: LD_EXP 31
11656: PPUSH
11657: CALL_OW 302
11661: IFFALSE 11720
// begin Say ( Heike , DH-1-shop-a ) ;
11663: LD_EXP 24
11667: PPUSH
11668: LD_STRING DH-1-shop-a
11670: PPUSH
11671: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11675: LD_INT 47
11677: PPUSH
11678: LD_INT 2
11680: PPUSH
11681: CALL_OW 321
11685: PUSH
11686: LD_INT 2
11688: EQUAL
11689: PUSH
11690: LD_INT 45
11692: PPUSH
11693: LD_INT 2
11695: PPUSH
11696: CALL_OW 321
11700: PUSH
11701: LD_INT 2
11703: EQUAL
11704: AND
11705: NOT
11706: IFFALSE 11720
// Say ( Markov , DMar-1-shop-a ) ;
11708: LD_EXP 31
11712: PPUSH
11713: LD_STRING DMar-1-shop-a
11715: PPUSH
11716: CALL_OW 88
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
11720: LD_STRING ConstructVeh
11722: PPUSH
11723: CALL_OW 337
// end ;
11727: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11728: LD_INT 2
11730: PPUSH
11731: LD_INT 2
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL 1145 0 3
11741: PUSH
11742: LD_INT 0
11744: EQUAL
11745: IFFALSE 11757
11747: GO 11749
11749: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11750: LD_STRING Techs
11752: PPUSH
11753: CALL_OW 337
11757: END
// every 0 0$1 trigger IsOk ( Markov ) and workshopBuilded and GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched do
11758: LD_EXP 31
11762: PPUSH
11763: CALL_OW 302
11767: PUSH
11768: LD_EXP 9
11772: AND
11773: PUSH
11774: LD_INT 47
11776: PPUSH
11777: LD_INT 2
11779: PPUSH
11780: CALL_OW 321
11784: PUSH
11785: LD_INT 2
11787: EQUAL
11788: AND
11789: PUSH
11790: LD_INT 45
11792: PPUSH
11793: LD_INT 2
11795: PPUSH
11796: CALL_OW 321
11800: PUSH
11801: LD_INT 2
11803: EQUAL
11804: AND
11805: IFFALSE 11933
11807: GO 11809
11809: DISABLE
// begin wait ( 0 0$1 ) ;
11810: LD_INT 35
11812: PPUSH
11813: CALL_OW 67
// DialogueOn ;
11817: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11821: LD_EXP 31
11825: PPUSH
11826: LD_STRING DMar-1-shop
11828: PPUSH
11829: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11833: LD_EXP 24
11837: PPUSH
11838: LD_STRING DH-1-shop
11840: PPUSH
11841: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11845: LD_EXP 31
11849: PPUSH
11850: LD_STRING DMar-2-shop
11852: PPUSH
11853: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11857: LD_EXP 31
11861: PPUSH
11862: LD_STRING DMar-3-shop
11864: PPUSH
11865: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11869: LD_EXP 24
11873: PPUSH
11874: LD_STRING DH-2-shop
11876: PPUSH
11877: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11881: LD_EXP 31
11885: PPUSH
11886: LD_STRING DMar-4-shop
11888: PPUSH
11889: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11893: LD_EXP 24
11897: PPUSH
11898: LD_STRING DH-3-shop
11900: PPUSH
11901: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11905: LD_EXP 31
11909: PPUSH
11910: LD_STRING DMar-5-shop
11912: PPUSH
11913: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11917: LD_EXP 24
11921: PPUSH
11922: LD_STRING DH-4-shop
11924: PPUSH
11925: CALL_OW 88
// DialogueOff ;
11929: CALL_OW 7
// end ;
11933: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11934: LD_EXP 31
11938: PPUSH
11939: CALL_OW 302
11943: PUSH
11944: LD_INT 22
11946: PUSH
11947: LD_INT 2
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 2
11956: PUSH
11957: LD_INT 34
11959: PUSH
11960: LD_INT 22
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 35
11969: PUSH
11970: LD_INT 22
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PPUSH
11986: CALL_OW 69
11990: AND
11991: IFFALSE 12098
11993: GO 11995
11995: DISABLE
// begin DialogueOn ;
11996: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12000: LD_INT 22
12002: PUSH
12003: LD_INT 2
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 2
12012: PUSH
12013: LD_INT 34
12015: PUSH
12016: LD_INT 22
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: LD_INT 35
12025: PUSH
12026: LD_INT 22
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PPUSH
12042: CALL_OW 69
12046: PPUSH
12047: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12051: LD_INT 10
12053: PPUSH
12054: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12058: LD_EXP 24
12062: PPUSH
12063: LD_STRING DH-1-bal
12065: PPUSH
12066: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12070: LD_EXP 31
12074: PPUSH
12075: LD_STRING DMar-1-bal
12077: PPUSH
12078: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12082: LD_EXP 24
12086: PPUSH
12087: LD_STRING DH-2-bal
12089: PPUSH
12090: CALL_OW 88
// DialogueOff ;
12094: CALL_OW 7
// end ;
12098: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12099: LD_EXP 28
12103: PPUSH
12104: CALL_OW 302
12108: PUSH
12109: LD_INT 22
12111: PUSH
12112: LD_INT 2
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 30
12121: PUSH
12122: LD_INT 6
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PPUSH
12133: CALL_OW 69
12137: AND
12138: IFFALSE 12199
12140: GO 12142
12142: DISABLE
// begin DialogueOn ;
12143: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12147: LD_EXP 28
12151: PPUSH
12152: LD_STRING DA-1-lab
12154: PPUSH
12155: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12159: LD_EXP 24
12163: PPUSH
12164: LD_STRING DH-1-lab
12166: PPUSH
12167: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12171: LD_EXP 28
12175: PPUSH
12176: LD_STRING DA-2-lab
12178: PPUSH
12179: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12183: LD_EXP 24
12187: PPUSH
12188: LD_STRING DH-2-lab
12190: PPUSH
12191: CALL_OW 88
// DialogueOff ;
12195: CALL_OW 7
// end ;
12199: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) do var ape ;
12200: LD_EXP 29
12204: PPUSH
12205: CALL_OW 302
12209: PUSH
12210: LD_INT 22
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 25
12222: PUSH
12223: LD_INT 15
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PPUSH
12234: CALL_OW 69
12238: AND
12239: IFFALSE 12419
12241: GO 12243
12243: DISABLE
12244: LD_INT 0
12246: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12247: LD_ADDR_VAR 0 1
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 25
12264: PUSH
12265: LD_INT 15
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PPUSH
12276: CALL_OW 69
12280: ST_TO_ADDR
// Video ( true ) ;
12281: LD_INT 1
12283: PPUSH
12284: CALL 974 0 1
// CenterNowOnUnits ( ape [ 1 ] ) ;
12288: LD_VAR 0 1
12292: PUSH
12293: LD_INT 1
12295: ARRAY
12296: PPUSH
12297: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12301: LD_VAR 0 1
12305: PUSH
12306: LD_INT 1
12308: ARRAY
12309: PPUSH
12310: CALL_OW 122
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12314: LD_VAR 0 1
12318: PUSH
12319: LD_INT 1
12321: ARRAY
12322: PPUSH
12323: LD_INT 35
12325: PPUSH
12326: LD_INT 28
12328: PPUSH
12329: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12333: LD_VAR 0 1
12337: PUSH
12338: LD_INT 1
12340: ARRAY
12341: PPUSH
12342: LD_INT 36
12344: PPUSH
12345: LD_INT 17
12347: PPUSH
12348: CALL_OW 171
// Say ( Kaia , DK-1-apesol ) ;
12352: LD_EXP 29
12356: PPUSH
12357: LD_STRING DK-1-apesol
12359: PPUSH
12360: CALL_OW 88
// Say ( Aviradze , DA-1-apesol ) ;
12364: LD_EXP 28
12368: PPUSH
12369: LD_STRING DA-1-apesol
12371: PPUSH
12372: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12376: LD_EXP 29
12380: PPUSH
12381: LD_STRING DK-2-apesol
12383: PPUSH
12384: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12388: LD_EXP 28
12392: PPUSH
12393: LD_STRING DA-2-apesol
12395: PPUSH
12396: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12400: LD_EXP 29
12404: PPUSH
12405: LD_STRING DK-3-apesol
12407: PPUSH
12408: CALL_OW 88
// Video ( false ) ;
12412: LD_INT 0
12414: PPUSH
12415: CALL 974 0 1
// end ;
12419: PPOPN 1
12421: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) do var ape ;
12422: LD_EXP 30
12426: PPUSH
12427: CALL_OW 302
12431: PUSH
12432: LD_INT 22
12434: PUSH
12435: LD_INT 2
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: LD_INT 25
12444: PUSH
12445: LD_INT 16
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PPUSH
12456: CALL_OW 69
12460: AND
12461: IFFALSE 12733
12463: GO 12465
12465: DISABLE
12466: LD_INT 0
12468: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12469: LD_ADDR_VAR 0 1
12473: PUSH
12474: LD_INT 22
12476: PUSH
12477: LD_INT 2
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 25
12486: PUSH
12487: LD_INT 16
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PPUSH
12498: CALL_OW 69
12502: ST_TO_ADDR
// Video ( true ) ;
12503: LD_INT 1
12505: PPUSH
12506: CALL 974 0 1
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12510: LD_INT 5
12512: PPUSH
12513: LD_INT 35
12515: PPUSH
12516: LD_INT 22
12518: PPUSH
12519: LD_INT 1
12521: PPUSH
12522: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12526: LD_EXP 30
12530: PPUSH
12531: LD_VAR 0 1
12535: PUSH
12536: LD_INT 1
12538: ARRAY
12539: PPUSH
12540: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12544: LD_VAR 0 1
12548: PUSH
12549: LD_INT 1
12551: ARRAY
12552: PPUSH
12553: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12557: LD_VAR 0 1
12561: PUSH
12562: LD_INT 1
12564: ARRAY
12565: PPUSH
12566: CALL_OW 122
// wait ( 0 0$2 ) ;
12570: LD_INT 70
12572: PPUSH
12573: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12577: LD_EXP 30
12581: PPUSH
12582: LD_STRING DS-1-apeeng
12584: PPUSH
12585: CALL_OW 88
// if IsOk ( Kamil ) then
12589: LD_EXP 27
12593: PPUSH
12594: CALL_OW 302
12598: IFFALSE 12726
// begin Say ( Kamil , DKam-1-apeeng ) ;
12600: LD_EXP 27
12604: PPUSH
12605: LD_STRING DKam-1-apeeng
12607: PPUSH
12608: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12612: LD_EXP 30
12616: PPUSH
12617: LD_STRING DS-2-apeeng
12619: PPUSH
12620: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12624: LD_EXP 27
12628: PPUSH
12629: LD_STRING DKam-2-apeeng
12631: PPUSH
12632: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12636: LD_EXP 30
12640: PPUSH
12641: LD_STRING DS-3-apeeng
12643: PPUSH
12644: CALL_OW 88
// if not IsOK ( Kaia ) then
12648: LD_EXP 29
12652: PPUSH
12653: CALL_OW 302
12657: NOT
12658: IFFALSE 12669
// begin Video ( false ) ;
12660: LD_INT 0
12662: PPUSH
12663: CALL 974 0 1
// exit ;
12667: GO 12733
// end ; Say ( Kaia , DK-1-apeeng ) ;
12669: LD_EXP 29
12673: PPUSH
12674: LD_STRING DK-1-apeeng
12676: PPUSH
12677: CALL_OW 88
// if not IsOk ( Givi ) then
12681: LD_EXP 25
12685: PPUSH
12686: CALL_OW 302
12690: NOT
12691: IFFALSE 12702
// begin Video ( false ) ;
12693: LD_INT 0
12695: PPUSH
12696: CALL 974 0 1
// exit ;
12700: GO 12733
// end ; Say ( Givi , DG-1-apeeng ) ;
12702: LD_EXP 25
12706: PPUSH
12707: LD_STRING DG-1-apeeng
12709: PPUSH
12710: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12714: LD_EXP 29
12718: PPUSH
12719: LD_STRING DK-2-apeeng
12721: PPUSH
12722: CALL_OW 88
// end ; Video ( false ) ;
12726: LD_INT 0
12728: PPUSH
12729: CALL 974 0 1
// end ;
12733: PPOPN 1
12735: END
// every 0 0$1 trigger farmerBaseReady do
12736: LD_EXP 4
12740: IFFALSE 12898
12742: GO 12744
12744: DISABLE
// begin DialogueOn ;
12745: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12749: LD_EXP 32
12753: PPUSH
12754: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12758: LD_EXP 32
12762: PPUSH
12763: LD_STRING DF-1-distribution
12765: PPUSH
12766: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12770: LD_EXP 24
12774: PPUSH
12775: LD_STRING DH-2-distribution
12777: PPUSH
12778: CALL_OW 88
// if IsOk ( Kaia ) then
12782: LD_EXP 29
12786: PPUSH
12787: CALL_OW 302
12791: IFFALSE 12852
// begin Say ( Kaia , DK-1-distribution ) ;
12793: LD_EXP 29
12797: PPUSH
12798: LD_STRING DK-1-distribution
12800: PPUSH
12801: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12805: LD_EXP 24
12809: PPUSH
12810: LD_STRING DH-1-distribution
12812: PPUSH
12813: CALL_OW 88
// if IsOk ( Givi ) then
12817: LD_EXP 25
12821: PPUSH
12822: CALL_OW 302
12826: IFFALSE 12852
// begin Say ( Givi , DG-1-distribution ) ;
12828: LD_EXP 25
12832: PPUSH
12833: LD_STRING DG-1-distribution
12835: PPUSH
12836: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12840: LD_EXP 24
12844: PPUSH
12845: LD_STRING DH-3-distribution
12847: PPUSH
12848: CALL_OW 88
// end ; end ; DialogueOff ;
12852: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12856: LD_STRING Crates1
12858: PPUSH
12859: CALL_OW 337
// farmerRequestedCrates := 300 ;
12863: LD_ADDR_EXP 13
12867: PUSH
12868: LD_INT 300
12870: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12871: LD_STRING FarmerCrates
12873: PPUSH
12874: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12878: LD_INT 10
12880: PPUSH
12881: LD_INT 1
12883: PPUSH
12884: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12888: LD_INT 108
12890: PPUSH
12891: LD_INT 61
12893: PPUSH
12894: CALL_OW 86
// end ;
12898: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12899: LD_EXP 6
12903: PUSH
12904: LD_INT 22
12906: PUSH
12907: LD_INT 2
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 3
12916: PUSH
12917: LD_INT 57
12919: PUSH
12920: EMPTY
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 2
12929: PUSH
12930: LD_INT 30
12932: PUSH
12933: LD_INT 6
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: LD_INT 30
12942: PUSH
12943: LD_INT 7
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: PPUSH
12960: CALL_OW 69
12964: AND
12965: PUSH
12966: LD_INT 22
12968: PUSH
12969: LD_INT 2
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 3
12978: PUSH
12979: LD_INT 57
12981: PUSH
12982: EMPTY
12983: LIST
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PUSH
12989: LD_INT 30
12991: PUSH
12992: LD_INT 4
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: LIST
13003: PPUSH
13004: CALL_OW 69
13008: AND
13009: IFFALSE 13173
13011: GO 13013
13013: DISABLE
13014: LD_INT 0
13016: PPUSH
// begin wait ( 0 0$10 ) ;
13017: LD_INT 350
13019: PPUSH
13020: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13024: LD_ADDR_VAR 0 1
13028: PUSH
13029: LD_EXP 38
13033: PPUSH
13034: LD_INT 26
13036: PUSH
13037: LD_INT 1
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 25
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PPUSH
13058: CALL_OW 72
13062: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13063: LD_EXP 24
13067: PPUSH
13068: LD_STRING DH-1-task
13070: PPUSH
13071: CALL_OW 88
// if IsOk ( Sophia ) then
13075: LD_EXP 30
13079: PPUSH
13080: CALL_OW 302
13084: IFFALSE 13124
// begin Say ( Sophia , DS-1-task ) ;
13086: LD_EXP 30
13090: PPUSH
13091: LD_STRING DS-1-task
13093: PPUSH
13094: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13098: LD_EXP 30
13102: PPUSH
13103: LD_STRING DS-2-task
13105: PPUSH
13106: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13110: LD_EXP 24
13114: PPUSH
13115: LD_STRING DH-2-task
13117: PPUSH
13118: CALL_OW 88
// end else
13122: GO 13158
// if eng then
13124: LD_VAR 0 1
13128: IFFALSE 13158
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13130: LD_VAR 0 1
13134: PUSH
13135: LD_INT 1
13137: ARRAY
13138: PPUSH
13139: LD_STRING DArm-1-task
13141: PPUSH
13142: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13146: LD_EXP 24
13150: PPUSH
13151: LD_STRING DH-2-task
13153: PPUSH
13154: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13158: LD_STRING BaseConstructed
13160: PPUSH
13161: CALL_OW 337
// allowConvoys := true ;
13165: LD_ADDR_EXP 11
13169: PUSH
13170: LD_INT 1
13172: ST_TO_ADDR
// end ;
13173: PPOPN 1
13175: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13176: LD_INT 22
13178: PUSH
13179: LD_INT 4
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 34
13188: PUSH
13189: LD_INT 12
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PPUSH
13200: CALL_OW 69
13204: IFFALSE 13372
13206: GO 13208
13208: DISABLE
13209: LD_INT 0
13211: PPUSH
13212: PPUSH
13213: PPUSH
// begin wait ( 0 0$2 ) ;
13214: LD_INT 70
13216: PPUSH
13217: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13221: LD_ADDR_VAR 0 1
13225: PUSH
13226: LD_INT 22
13228: PUSH
13229: LD_INT 4
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 34
13238: PUSH
13239: LD_INT 12
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PPUSH
13250: CALL_OW 69
13254: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_VAR 0 1
13264: PUSH
13265: LD_INT 1
13267: ARRAY
13268: PPUSH
13269: CALL_OW 250
13273: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13274: LD_ADDR_VAR 0 3
13278: PUSH
13279: LD_VAR 0 1
13283: PUSH
13284: LD_INT 1
13286: ARRAY
13287: PPUSH
13288: CALL_OW 251
13292: ST_TO_ADDR
// DialogueOn ;
13293: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13297: LD_VAR 0 2
13301: PPUSH
13302: LD_VAR 0 3
13306: PPUSH
13307: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13311: LD_VAR 0 2
13315: PPUSH
13316: LD_VAR 0 3
13320: PPUSH
13321: LD_INT 2
13323: PPUSH
13324: LD_INT 6
13326: NEG
13327: PPUSH
13328: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13332: LD_INT 10
13334: PPUSH
13335: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13339: LD_EXP 24
13343: PPUSH
13344: LD_STRING DH-1-seecargo
13346: PPUSH
13347: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13351: LD_VAR 0 2
13355: PPUSH
13356: LD_VAR 0 3
13360: PPUSH
13361: LD_INT 2
13363: PPUSH
13364: CALL_OW 331
// DialogueOff ;
13368: CALL_OW 7
// end ;
13372: PPOPN 3
13374: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13375: LD_EXP 4
13379: PUSH
13380: LD_EXP 12
13384: PUSH
13385: LD_INT 300
13387: GREATEREQUAL
13388: AND
13389: IFFALSE 13461
13391: GO 13393
13393: DISABLE
// begin DialogueOn ;
13394: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13398: LD_EXP 32
13402: PPUSH
13403: LD_STRING DF-1-delivery-2
13405: PPUSH
13406: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13410: LD_EXP 24
13414: PPUSH
13415: LD_STRING DH-1-delivery-2
13417: PPUSH
13418: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13422: LD_EXP 32
13426: PPUSH
13427: LD_STRING DF-2-delivery-2
13429: PPUSH
13430: CALL_OW 94
// DialogueOff ;
13434: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13438: LD_STRING Crates2
13440: PPUSH
13441: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13445: LD_ADDR_EXP 14
13449: PUSH
13450: LD_INT 63000
13452: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13453: LD_ADDR_EXP 13
13457: PUSH
13458: LD_INT 600
13460: ST_TO_ADDR
// end ;
13461: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 do
13462: LD_EXP 4
13466: PUSH
13467: LD_EXP 12
13471: PUSH
13472: LD_INT 600
13474: GREATEREQUAL
13475: AND
13476: IFFALSE 13642
13478: GO 13480
13480: DISABLE
// begin DialogueOn ;
13481: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13485: LD_EXP 32
13489: PPUSH
13490: LD_STRING DF-1-delivery-3
13492: PPUSH
13493: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13497: LD_EXP 24
13501: PPUSH
13502: LD_STRING DH-1-delivery-3
13504: PPUSH
13505: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13509: LD_EXP 32
13513: PPUSH
13514: LD_STRING DF-2-delivery-3
13516: PPUSH
13517: CALL_OW 94
// if IsOk ( Kaia ) then
13521: LD_EXP 29
13525: PPUSH
13526: CALL_OW 302
13530: IFFALSE 13580
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13532: LD_EXP 29
13536: PPUSH
13537: LD_STRING DK-1-delivery-3
13539: PPUSH
13540: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13544: LD_EXP 24
13548: PPUSH
13549: LD_STRING DH-2-delivery-3
13551: PPUSH
13552: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13556: LD_EXP 25
13560: PPUSH
13561: LD_STRING DG-1-delivery-3
13563: PPUSH
13564: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13568: LD_EXP 26
13572: PPUSH
13573: LD_STRING DM-1-delivery-3
13575: PPUSH
13576: CALL_OW 88
// end ; DialogueOff ;
13580: CALL_OW 7
// if Difficulty = 2 then
13584: LD_OWVAR 67
13588: PUSH
13589: LD_INT 2
13591: EQUAL
13592: IFFALSE 13619
// begin ChangeMissionObjectives ( Crates3 ) ;
13594: LD_STRING Crates3
13596: PPUSH
13597: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13601: LD_ADDR_EXP 14
13605: PUSH
13606: LD_INT 63000
13608: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13609: LD_ADDR_EXP 13
13613: PUSH
13614: LD_INT 900
13616: ST_TO_ADDR
// end else
13617: GO 13642
// begin ChangeMissionObjectives ( Crates4 ) ;
13619: LD_STRING Crates4
13621: PPUSH
13622: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13626: LD_ADDR_EXP 14
13630: PUSH
13631: LD_INT 63000
13633: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13634: LD_ADDR_EXP 13
13638: PUSH
13639: LD_INT 1200
13641: ST_TO_ADDR
// end ; end ;
13642: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13643: LD_EXP 4
13647: PUSH
13648: LD_EXP 12
13652: PUSH
13653: LD_INT 600
13655: PUSH
13656: LD_INT 900
13658: PUSH
13659: LD_INT 1200
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: LIST
13666: PUSH
13667: LD_OWVAR 67
13671: ARRAY
13672: GREATEREQUAL
13673: AND
13674: PUSH
13675: LD_EXP 13
13679: PUSH
13680: LD_EXP 14
13684: LESSEQUAL
13685: AND
13686: IFFALSE 13759
13688: GO 13690
13690: DISABLE
// begin retreatAllowed := true ;
13691: LD_ADDR_EXP 10
13695: PUSH
13696: LD_INT 1
13698: ST_TO_ADDR
// display_strings := [ ] ;
13699: LD_ADDR_OWVAR 47
13703: PUSH
13704: EMPTY
13705: ST_TO_ADDR
// DialogueOn ;
13706: CALL_OW 6
// Video ( true ) ;
13710: LD_INT 1
13712: PPUSH
13713: CALL 974 0 1
// SayRadio ( Omar , DO-radio-end ) ;
13717: LD_EXP 33
13721: PPUSH
13722: LD_STRING DO-radio-end
13724: PPUSH
13725: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13729: LD_EXP 24
13733: PPUSH
13734: LD_STRING DH-1-radio-end
13736: PPUSH
13737: CALL_OW 88
// Video ( false ) ;
13741: LD_INT 0
13743: PPUSH
13744: CALL 974 0 1
// DialogueOff ;
13748: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13752: LD_STRING Retreat
13754: PPUSH
13755: CALL_OW 337
// end ;
13759: END
// every 0 0$1 trigger retreatAllowed do
13760: LD_EXP 10
13764: IFFALSE 13783
13766: GO 13768
13768: DISABLE
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13769: LD_INT 10
13771: PPUSH
13772: LD_INT 0
13774: PPUSH
13775: CALL_OW 424
// StartCargoEvacuation ;
13779: CALL 4265 0 0
// end ;
13783: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13784: LD_EXP 10
13788: NOT
13789: PUSH
13790: LD_INT 5
13792: PPUSH
13793: CALL_OW 301
13797: AND
13798: IFFALSE 13822
13800: GO 13802
13802: DISABLE
// begin SayRadio ( Farmer , DF-1-failure ) ;
13803: LD_EXP 32
13807: PPUSH
13808: LD_STRING DF-1-failure
13810: PPUSH
13811: CALL_OW 94
// YouLost ( FarmerDepot ) ;
13815: LD_STRING FarmerDepot
13817: PPUSH
13818: CALL_OW 104
// end ;
13822: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 do var i , max , tmp ;
13823: LD_EXP 10
13827: PUSH
13828: LD_EXP 24
13832: PPUSH
13833: LD_EXP 32
13837: PPUSH
13838: CALL_OW 296
13842: PUSH
13843: LD_INT 6
13845: LESS
13846: AND
13847: IFFALSE 14433
13849: GO 13851
13851: DISABLE
13852: LD_INT 0
13854: PPUSH
13855: PPUSH
13856: PPUSH
// begin allowConvoys := false ;
13857: LD_ADDR_EXP 11
13861: PUSH
13862: LD_INT 0
13864: ST_TO_ADDR
// Video ( true ) ;
13865: LD_INT 1
13867: PPUSH
13868: CALL 974 0 1
// ComTurnUnit ( Heike , Farmer ) ;
13872: LD_EXP 24
13876: PPUSH
13877: LD_EXP 32
13881: PPUSH
13882: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
13886: LD_EXP 32
13890: PPUSH
13891: LD_EXP 24
13895: PPUSH
13896: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
13900: LD_EXP 32
13904: PPUSH
13905: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
13909: LD_EXP 24
13913: PPUSH
13914: LD_STRING DH-1-end
13916: PPUSH
13917: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
13921: LD_EXP 32
13925: PPUSH
13926: LD_STRING DF-1-end
13928: PPUSH
13929: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
13933: LD_EXP 32
13937: PPUSH
13938: LD_STRING DF-2-end
13940: PPUSH
13941: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
13945: LD_EXP 24
13949: PPUSH
13950: LD_STRING DH-2-end
13952: PPUSH
13953: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
13957: LD_EXP 32
13961: PPUSH
13962: LD_STRING DF-3-end
13964: PPUSH
13965: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
13969: LD_EXP 24
13973: PPUSH
13974: LD_STRING DH-3-end
13976: PPUSH
13977: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
13981: LD_EXP 25
13985: PPUSH
13986: LD_STRING DG-1-end
13988: PPUSH
13989: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
13993: LD_EXP 24
13997: PPUSH
13998: LD_STRING DH-4-end
14000: PPUSH
14001: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14005: LD_EXP 32
14009: PPUSH
14010: LD_STRING DF-4-end
14012: PPUSH
14013: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14017: LD_EXP 24
14021: PPUSH
14022: LD_STRING DH-5-end
14024: PPUSH
14025: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14029: LD_EXP 32
14033: PPUSH
14034: LD_STRING DF-5-end
14036: PPUSH
14037: CALL_OW 88
// Video ( false ) ;
14041: LD_INT 0
14043: PPUSH
14044: CALL 974 0 1
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14048: LD_ADDR_VAR 0 2
14052: PUSH
14053: LD_INT 4
14055: PUSH
14056: LD_INT 3
14058: PUSH
14059: LD_INT 2
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: LIST
14066: PUSH
14067: LD_OWVAR 67
14071: ARRAY
14072: ST_TO_ADDR
// if farmerSquad < max then
14073: LD_EXP 35
14077: PUSH
14078: LD_VAR 0 2
14082: LESS
14083: IFFALSE 14095
// max := farmerSquad ;
14085: LD_ADDR_VAR 0 2
14089: PUSH
14090: LD_EXP 35
14094: ST_TO_ADDR
// for i := 1 to max do
14095: LD_ADDR_VAR 0 1
14099: PUSH
14100: DOUBLE
14101: LD_INT 1
14103: DEC
14104: ST_TO_ADDR
14105: LD_VAR 0 2
14109: PUSH
14110: FOR_TO
14111: IFFALSE 14149
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14113: LD_EXP 35
14117: PUSH
14118: LD_INT 1
14120: ARRAY
14121: PPUSH
14122: LD_INT 2
14124: PPUSH
14125: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14129: LD_ADDR_EXP 35
14133: PUSH
14134: LD_EXP 35
14138: PPUSH
14139: LD_INT 1
14141: PPUSH
14142: CALL_OW 3
14146: ST_TO_ADDR
// end ;
14147: GO 14110
14149: POP
14150: POP
// for i in Farmer ^ farmerSquad do
14151: LD_ADDR_VAR 0 1
14155: PUSH
14156: LD_EXP 32
14160: PUSH
14161: LD_EXP 35
14165: ADD
14166: PUSH
14167: FOR_IN
14168: IFFALSE 14207
// begin if IsInUnit ( i ) then
14170: LD_VAR 0 1
14174: PPUSH
14175: CALL_OW 310
14179: IFFALSE 14190
// ComExitBuilding ( i ) ;
14181: LD_VAR 0 1
14185: PPUSH
14186: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14190: LD_VAR 0 1
14194: PPUSH
14195: LD_INT 102
14197: PPUSH
14198: LD_INT 7
14200: PPUSH
14201: CALL_OW 171
// end ;
14205: GO 14167
14207: POP
14208: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14209: LD_ADDR_VAR 0 1
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_INT 5
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 21
14226: PUSH
14227: LD_INT 3
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PPUSH
14238: CALL_OW 69
14242: PUSH
14243: LD_INT 5
14245: DIFF
14246: PUSH
14247: FOR_IN
14248: IFFALSE 14264
// SetSide ( i , 2 ) ;
14250: LD_VAR 0 1
14254: PPUSH
14255: LD_INT 2
14257: PPUSH
14258: CALL_OW 235
14262: GO 14247
14264: POP
14265: POP
// repeat wait ( 0 0$1 ) ;
14266: LD_INT 35
14268: PPUSH
14269: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14273: LD_ADDR_VAR 0 3
14277: PUSH
14278: LD_EXP 32
14282: PUSH
14283: LD_EXP 35
14287: ADD
14288: PPUSH
14289: LD_INT 95
14291: PUSH
14292: LD_INT 3
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PPUSH
14299: CALL_OW 72
14303: ST_TO_ADDR
// if tmp then
14304: LD_VAR 0 3
14308: IFFALSE 14352
// for i in tmp do
14310: LD_ADDR_VAR 0 1
14314: PUSH
14315: LD_VAR 0 3
14319: PUSH
14320: FOR_IN
14321: IFFALSE 14350
// begin farmerSquad := farmerSquad diff i ;
14323: LD_ADDR_EXP 35
14327: PUSH
14328: LD_EXP 35
14332: PUSH
14333: LD_VAR 0 1
14337: DIFF
14338: ST_TO_ADDR
// RemoveUnit ( i ) ;
14339: LD_VAR 0 1
14343: PPUSH
14344: CALL_OW 64
// end ;
14348: GO 14320
14350: POP
14351: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14352: LD_EXP 35
14356: PUSH
14357: EMPTY
14358: EQUAL
14359: PUSH
14360: LD_EXP 32
14364: PPUSH
14365: CALL_OW 305
14369: NOT
14370: AND
14371: IFFALSE 14266
// wait ( 2 2$00 ) ;
14373: LD_INT 4200
14375: PPUSH
14376: CALL_OW 67
// SendAttack ;
14380: CALL 6684 0 0
// wait ( [ 4 4$00 , 3 3$30 , 3 3$00 ] [ Difficulty ] ) ;
14384: LD_INT 8400
14386: PUSH
14387: LD_INT 7350
14389: PUSH
14390: LD_INT 6300
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: LIST
14397: PUSH
14398: LD_OWVAR 67
14402: ARRAY
14403: PPUSH
14404: CALL_OW 67
// SendAttack ;
14408: CALL 6684 0 0
// if Difficulty > 2 then
14412: LD_OWVAR 67
14416: PUSH
14417: LD_INT 2
14419: GREATER
14420: IFFALSE 14433
// begin wait ( 3 3$00 ) ;
14422: LD_INT 6300
14424: PPUSH
14425: CALL_OW 67
// SendAttack ;
14429: CALL 6684 0 0
// end ; end ;
14433: PPOPN 3
14435: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14436: LD_EXP 14
14440: PUSH
14441: LD_INT 18900
14443: LESSEQUAL
14444: IFFALSE 14493
14446: GO 14448
14448: DISABLE
// begin DialogueOn ;
14449: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14453: LD_EXP 32
14457: PPUSH
14458: LD_STRING DF-1-distribution-a
14460: PPUSH
14461: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14465: LD_EXP 24
14469: PPUSH
14470: LD_STRING DH-1-distribution-a
14472: PPUSH
14473: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14477: LD_EXP 32
14481: PPUSH
14482: LD_STRING DF-2-distribution-a
14484: PPUSH
14485: CALL_OW 94
// DialogueOff ;
14489: CALL_OW 7
// end ;
14493: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14494: LD_EXP 14
14498: PUSH
14499: LD_INT 0
14501: LESSEQUAL
14502: IFFALSE 14534
14504: GO 14506
14506: DISABLE
// begin DialogueOn ;
14507: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14511: LD_EXP 32
14515: PPUSH
14516: LD_STRING DF-3-distribution-a
14518: PPUSH
14519: CALL_OW 94
// YouLost ( Distribution ) ;
14523: LD_STRING Distribution
14525: PPUSH
14526: CALL_OW 104
// DialogueOff ;
14530: CALL_OW 7
// end ;
14534: END
// every 0 0$1 trigger vehCounter >= 2 do
14535: LD_EXP 18
14539: PUSH
14540: LD_INT 2
14542: GREATEREQUAL
14543: IFFALSE 14555
14545: GO 14547
14547: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14548: LD_STRING VehConstructed
14550: PPUSH
14551: CALL_OW 337
14555: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14556: LD_INT 22
14558: PUSH
14559: LD_INT 2
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 34
14568: PUSH
14569: LD_INT 12
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PPUSH
14580: CALL_OW 69
14584: IFFALSE 14644
14586: GO 14588
14588: DISABLE
// begin DialogueOn ;
14589: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14593: LD_EXP 24
14597: PPUSH
14598: LD_STRING DH-1-truck
14600: PPUSH
14601: CALL_OW 88
// if IsOk ( Markov ) then
14605: LD_EXP 31
14609: PPUSH
14610: CALL_OW 302
14614: IFFALSE 14640
// begin Say ( Markov , DMar-1-truck ) ;
14616: LD_EXP 31
14620: PPUSH
14621: LD_STRING DMar-1-truck
14623: PPUSH
14624: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14628: LD_EXP 24
14632: PPUSH
14633: LD_STRING DH-2-truck
14635: PPUSH
14636: CALL_OW 88
// end ; DialogueOff ;
14640: CALL_OW 7
// end ;
14644: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14645: LD_INT 0
14647: PPUSH
14648: PPUSH
14649: PPUSH
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14650: LD_ADDR_VAR 0 2
14654: PUSH
14655: LD_EXP 38
14659: PPUSH
14660: LD_INT 26
14662: PUSH
14663: LD_INT 1
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL_OW 72
14674: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14675: LD_ADDR_VAR 0 3
14679: PUSH
14680: LD_EXP 38
14684: PPUSH
14685: LD_INT 26
14687: PUSH
14688: LD_INT 2
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PPUSH
14695: CALL_OW 72
14699: ST_TO_ADDR
// if randomMen then
14700: LD_VAR 0 2
14704: IFFALSE 14724
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
14706: LD_VAR 0 2
14710: PUSH
14711: LD_INT 1
14713: ARRAY
14714: PPUSH
14715: LD_STRING DArm-1-nocargo
14717: PPUSH
14718: CALL_OW 88
14722: GO 14746
// if randomWomen then
14724: LD_VAR 0 3
14728: IFFALSE 14746
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
14730: LD_VAR 0 3
14734: PUSH
14735: LD_INT 1
14737: ARRAY
14738: PPUSH
14739: LD_STRING DArf-1-nocargo
14741: PPUSH
14742: CALL_OW 88
// end ;
14746: LD_VAR 0 1
14750: RET
// export function IncomingAttack ; begin
14751: LD_INT 0
14753: PPUSH
// if attackWave = 1 then
14754: LD_EXP 16
14758: PUSH
14759: LD_INT 1
14761: EQUAL
14762: IFFALSE 14833
// begin DialogueOn ;
14764: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
14768: LD_EXP 33
14772: PPUSH
14773: LD_STRING DO-1-radio-1
14775: PPUSH
14776: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
14780: LD_EXP 24
14784: PPUSH
14785: LD_STRING DH-1-radio-1-
14787: PPUSH
14788: CALL_OW 88
// if IsOk ( Markov ) then
14792: LD_EXP 31
14796: PPUSH
14797: CALL_OW 302
14801: IFFALSE 14827
// begin Say ( Markov , DMar-1-radio-1 ) ;
14803: LD_EXP 31
14807: PPUSH
14808: LD_STRING DMar-1-radio-1
14810: PPUSH
14811: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
14815: LD_EXP 24
14819: PPUSH
14820: LD_STRING DH-2-radio-1
14822: PPUSH
14823: CALL_OW 88
// end ; DialogueOff ;
14827: CALL_OW 7
// end else
14831: GO 14857
// begin SayRadio ( Omar , DO-1-radio-u ) ;
14833: LD_EXP 33
14837: PPUSH
14838: LD_STRING DO-1-radio-u
14840: PPUSH
14841: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
14845: LD_EXP 24
14849: PPUSH
14850: LD_STRING DH-1-radio-u
14852: PPUSH
14853: CALL_OW 88
// end ; end ;
14857: LD_VAR 0 1
14861: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
14862: LD_EXP 40
14866: PPUSH
14867: LD_INT 95
14869: PUSH
14870: LD_INT 8
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PPUSH
14877: CALL_OW 72
14881: IFFALSE 14984
14883: GO 14885
14885: DISABLE
14886: LD_INT 0
14888: PPUSH
// begin enable ;
14889: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
14890: LD_ADDR_VAR 0 1
14894: PUSH
14895: LD_EXP 40
14899: PPUSH
14900: LD_INT 95
14902: PUSH
14903: LD_INT 8
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PPUSH
14910: CALL_OW 72
14914: PUSH
14915: FOR_IN
14916: IFFALSE 14945
// begin usForces := usForces diff i ;
14918: LD_ADDR_EXP 40
14922: PUSH
14923: LD_EXP 40
14927: PUSH
14928: LD_VAR 0 1
14932: DIFF
14933: ST_TO_ADDR
// RemoveUnit ( i ) ;
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL_OW 64
// end ;
14943: GO 14915
14945: POP
14946: POP
// if not americanHasEscaped and attackWave = 1 then
14947: LD_EXP 7
14951: NOT
14952: PUSH
14953: LD_EXP 16
14957: PUSH
14958: LD_INT 1
14960: EQUAL
14961: AND
14962: IFFALSE 14984
// begin americanHasEscaped := true ;
14964: LD_ADDR_EXP 7
14968: PUSH
14969: LD_INT 1
14971: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
14972: LD_EXP 24
14976: PPUSH
14977: LD_STRING DH-2-assault-a
14979: PPUSH
14980: CALL_OW 88
// end ; end ;
14984: PPOPN 1
14986: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
14987: LD_INT 5
14989: PPUSH
14990: CALL_OW 255
14994: PUSH
14995: LD_INT 2
14997: EQUAL
14998: IFFALSE 15010
15000: GO 15002
15002: DISABLE
// YouLost ( Attack ) ;
15003: LD_STRING Attack
15005: PPUSH
15006: CALL_OW 104
15010: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 160 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do var randomMen , randomWomen , speaker , place ;
15011: LD_INT 22
15013: PUSH
15014: LD_INT 1
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 21
15023: PUSH
15024: LD_INT 1
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 69
15039: NOT
15040: PUSH
15041: LD_INT 22
15043: PUSH
15044: LD_INT 4
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PPUSH
15051: CALL_OW 69
15055: NOT
15056: AND
15057: PUSH
15058: LD_EXP 10
15062: NOT
15063: AND
15064: PUSH
15065: LD_EXP 12
15069: PUSH
15070: LD_INT 160
15072: GREATER
15073: AND
15074: PUSH
15075: LD_INT 7
15077: PPUSH
15078: LD_INT 22
15080: PUSH
15081: LD_INT 2
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 21
15090: PUSH
15091: LD_INT 1
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PPUSH
15102: CALL_OW 70
15106: AND
15107: IFFALSE 15846
15109: GO 15111
15111: DISABLE
15112: LD_INT 0
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15118: LD_ADDR_VAR 0 1
15122: PUSH
15123: LD_EXP 38
15127: PPUSH
15128: LD_INT 26
15130: PUSH
15131: LD_INT 1
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PPUSH
15138: CALL_OW 72
15142: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15143: LD_ADDR_VAR 0 2
15147: PUSH
15148: LD_EXP 38
15152: PPUSH
15153: LD_INT 26
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PPUSH
15163: CALL_OW 72
15167: ST_TO_ADDR
// if IsOk ( Kaia ) then
15168: LD_EXP 29
15172: PPUSH
15173: CALL_OW 302
15177: IFFALSE 15198
// speaker := [ Kaia , DK ] else
15179: LD_ADDR_VAR 0 3
15183: PUSH
15184: LD_EXP 29
15188: PUSH
15189: LD_STRING DK
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: ST_TO_ADDR
15196: GO 15278
// if randomMen then
15198: LD_VAR 0 1
15202: IFFALSE 15237
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15204: LD_ADDR_VAR 0 3
15208: PUSH
15209: LD_VAR 0 1
15213: PUSH
15214: LD_INT 1
15216: PPUSH
15217: LD_VAR 0 1
15221: PPUSH
15222: CALL_OW 12
15226: ARRAY
15227: PUSH
15228: LD_STRING DArm
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: ST_TO_ADDR
15235: GO 15278
// if randomWomen then
15237: LD_VAR 0 2
15241: IFFALSE 15276
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15243: LD_ADDR_VAR 0 3
15247: PUSH
15248: LD_VAR 0 2
15252: PUSH
15253: LD_INT 1
15255: PPUSH
15256: LD_VAR 0 2
15260: PPUSH
15261: CALL_OW 12
15265: ARRAY
15266: PUSH
15267: LD_STRING DArf
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: ST_TO_ADDR
15274: GO 15278
// exit ;
15276: GO 15846
// if IsInUnit ( speaker [ 1 ] ) then
15278: LD_VAR 0 3
15282: PUSH
15283: LD_INT 1
15285: ARRAY
15286: PPUSH
15287: CALL_OW 310
15291: IFFALSE 15314
// place := IsInUnit ( speaker [ 1 ] ) else
15293: LD_ADDR_VAR 0 4
15297: PUSH
15298: LD_VAR 0 3
15302: PUSH
15303: LD_INT 1
15305: ARRAY
15306: PPUSH
15307: CALL_OW 310
15311: ST_TO_ADDR
15312: GO 15328
// place := speaker [ 1 ] ;
15314: LD_ADDR_VAR 0 4
15318: PUSH
15319: LD_VAR 0 3
15323: PUSH
15324: LD_INT 1
15326: ARRAY
15327: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15328: LD_VAR 0 4
15332: PPUSH
15333: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15337: LD_VAR 0 4
15341: PPUSH
15342: CALL_OW 250
15346: PPUSH
15347: LD_VAR 0 4
15351: PPUSH
15352: CALL_OW 251
15356: PPUSH
15357: CALL 2975 0 2
// wait ( 0 0$2 ) ;
15361: LD_INT 70
15363: PPUSH
15364: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15368: LD_EXP 34
15372: PPUSH
15373: CALL_OW 305
15377: NOT
15378: IFFALSE 15382
// exit ;
15380: GO 15846
// allowConvoys := false ;
15382: LD_ADDR_EXP 11
15386: PUSH
15387: LD_INT 0
15389: ST_TO_ADDR
// Video ( true ) ;
15390: LD_INT 1
15392: PPUSH
15393: CALL 974 0 1
// wait ( 0 0$1 ) ;
15397: LD_INT 35
15399: PPUSH
15400: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15404: LD_EXP 34
15408: PPUSH
15409: LD_STRING DI-1-land
15411: PPUSH
15412: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15416: LD_VAR 0 3
15420: PUSH
15421: LD_INT 1
15423: ARRAY
15424: PPUSH
15425: CALL_OW 310
15429: IFFALSE 15444
// ComExit ( speaker [ 1 ] ) ;
15431: LD_VAR 0 3
15435: PUSH
15436: LD_INT 1
15438: ARRAY
15439: PPUSH
15440: CALL 1078 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15444: LD_VAR 0 3
15448: PUSH
15449: LD_INT 1
15451: ARRAY
15452: PPUSH
15453: LD_EXP 34
15457: PPUSH
15458: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15462: LD_VAR 0 3
15466: PUSH
15467: LD_INT 1
15469: ARRAY
15470: PPUSH
15471: LD_EXP 34
15475: PPUSH
15476: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15480: LD_EXP 34
15484: PPUSH
15485: LD_VAR 0 3
15489: PUSH
15490: LD_INT 1
15492: ARRAY
15493: PPUSH
15494: CALL_OW 119
// wait ( 0 0$1 ) ;
15498: LD_INT 35
15500: PPUSH
15501: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15505: LD_VAR 0 3
15509: PUSH
15510: LD_INT 1
15512: ARRAY
15513: PPUSH
15514: LD_VAR 0 3
15518: PUSH
15519: LD_INT 2
15521: ARRAY
15522: PUSH
15523: LD_STRING -1-land
15525: STR
15526: PPUSH
15527: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15531: LD_EXP 34
15535: PPUSH
15536: LD_STRING DI-2-land
15538: PPUSH
15539: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15543: LD_VAR 0 3
15547: PUSH
15548: LD_INT 1
15550: ARRAY
15551: PPUSH
15552: LD_VAR 0 3
15556: PUSH
15557: LD_INT 2
15559: ARRAY
15560: PUSH
15561: LD_STRING -2-land
15563: STR
15564: PPUSH
15565: CALL_OW 88
// if IsInUnit ( Heike ) then
15569: LD_EXP 24
15573: PPUSH
15574: CALL_OW 310
15578: IFFALSE 15589
// ComExitBuilding ( Heike ) ;
15580: LD_EXP 24
15584: PPUSH
15585: CALL_OW 122
// AddComMoveXY ( Heike , 34 , 21 ) ;
15589: LD_EXP 24
15593: PPUSH
15594: LD_INT 34
15596: PPUSH
15597: LD_INT 21
15599: PPUSH
15600: CALL_OW 171
// AddComTurnUnit ( Heike , speaker [ 1 ] ) ;
15604: LD_EXP 24
15608: PPUSH
15609: LD_VAR 0 3
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: CALL_OW 179
// ComMoveXY ( Ibrahim , 36 , 22 ) ;
15622: LD_EXP 34
15626: PPUSH
15627: LD_INT 36
15629: PPUSH
15630: LD_INT 22
15632: PPUSH
15633: CALL_OW 111
// ComMoveXY ( speaker [ 1 ] , 35 , 22 ) ;
15637: LD_VAR 0 3
15641: PUSH
15642: LD_INT 1
15644: ARRAY
15645: PPUSH
15646: LD_INT 35
15648: PPUSH
15649: LD_INT 22
15651: PPUSH
15652: CALL_OW 111
// AddComTurnUnit ( [ Ibrahim , speaker [ 1 ] ] , Heike ) ;
15656: LD_EXP 34
15660: PUSH
15661: LD_VAR 0 3
15665: PUSH
15666: LD_INT 1
15668: ARRAY
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PPUSH
15674: LD_EXP 24
15678: PPUSH
15679: CALL_OW 179
// repeat wait ( 0 0$2 ) ;
15683: LD_INT 70
15685: PPUSH
15686: CALL_OW 67
// CenterOnUnits ( speaker [ 1 ] ) ;
15690: LD_VAR 0 3
15694: PUSH
15695: LD_INT 1
15697: ARRAY
15698: PPUSH
15699: CALL_OW 85
// until GetDistUnits ( speaker [ 1 ] , usDepot ) < 8 ;
15703: LD_VAR 0 3
15707: PUSH
15708: LD_INT 1
15710: ARRAY
15711: PPUSH
15712: LD_INT 11
15714: PPUSH
15715: CALL_OW 296
15719: PUSH
15720: LD_INT 8
15722: LESS
15723: IFFALSE 15683
// CenterOnUnits ( usDepot ) ;
15725: LD_INT 11
15727: PPUSH
15728: CALL_OW 85
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
15732: LD_VAR 0 3
15736: PUSH
15737: LD_INT 1
15739: ARRAY
15740: PPUSH
15741: LD_VAR 0 3
15745: PUSH
15746: LD_INT 2
15748: ARRAY
15749: PUSH
15750: LD_STRING -3-land
15752: STR
15753: PPUSH
15754: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
15758: LD_EXP 24
15762: PPUSH
15763: LD_STRING DH-1-land
15765: PPUSH
15766: CALL_OW 88
// if UnitsInside ( usDepot ) = 6 then
15770: LD_INT 11
15772: PPUSH
15773: CALL_OW 313
15777: PUSH
15778: LD_INT 6
15780: EQUAL
15781: IFFALSE 15799
// ComExitBuilding ( UnitsInside ( usDepot ) [ 1 ] ) ;
15783: LD_INT 11
15785: PPUSH
15786: CALL_OW 313
15790: PUSH
15791: LD_INT 1
15793: ARRAY
15794: PPUSH
15795: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
15799: LD_EXP 34
15803: PPUSH
15804: LD_INT 2
15806: PPUSH
15807: CALL_OW 235
// ComEnterUnit ( Ibrahim , usDepot ) ;
15811: LD_EXP 34
15815: PPUSH
15816: LD_INT 11
15818: PPUSH
15819: CALL_OW 120
// Video ( false ) ;
15823: LD_INT 0
15825: PPUSH
15826: CALL 974 0 1
// ibrahimInDepot := true ;
15830: LD_ADDR_EXP 21
15834: PUSH
15835: LD_INT 1
15837: ST_TO_ADDR
// allowConvoys := true ;
15838: LD_ADDR_EXP 11
15842: PUSH
15843: LD_INT 1
15845: ST_TO_ADDR
// end ;
15846: PPOPN 4
15848: END
// export function IbrahimQuery ; begin
15849: LD_INT 0
15851: PPUSH
// case Query ( IbrahimQuery ) of 1 :
15852: LD_STRING IbrahimQuery
15854: PPUSH
15855: CALL_OW 97
15859: PUSH
15860: LD_INT 1
15862: DOUBLE
15863: EQUAL
15864: IFTRUE 15868
15866: GO 16167
15868: POP
// begin allowConvoys := false ;
15869: LD_ADDR_EXP 11
15873: PUSH
15874: LD_INT 0
15876: ST_TO_ADDR
// ibrahimInDepot := false ;
15877: LD_ADDR_EXP 21
15881: PUSH
15882: LD_INT 0
15884: ST_TO_ADDR
// Video ( true ) ;
15885: LD_INT 1
15887: PPUSH
15888: CALL 974 0 1
// Say ( Heike , DH-1-interrogation ) ;
15892: LD_EXP 24
15896: PPUSH
15897: LD_STRING DH-1-interrogation
15899: PPUSH
15900: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
15904: LD_EXP 34
15908: PPUSH
15909: LD_STRING DI-1-interrogation
15911: PPUSH
15912: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
15916: LD_EXP 24
15920: PPUSH
15921: LD_STRING DH-2-interrogation
15923: PPUSH
15924: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
15928: LD_EXP 34
15932: PPUSH
15933: LD_STRING DI-2-interrogation
15935: PPUSH
15936: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
15940: LD_EXP 24
15944: PPUSH
15945: LD_STRING DH-3-interrogation
15947: PPUSH
15948: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
15952: LD_EXP 34
15956: PPUSH
15957: LD_STRING DI-3-interrogation
15959: PPUSH
15960: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
15964: LD_EXP 24
15968: PPUSH
15969: LD_STRING DH-4-interrogation
15971: PPUSH
15972: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
15976: LD_EXP 34
15980: PPUSH
15981: LD_STRING DI-4-interrogation
15983: PPUSH
15984: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
15988: LD_EXP 24
15992: PPUSH
15993: LD_STRING DH-5-interrogation
15995: PPUSH
15996: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16000: LD_EXP 34
16004: PPUSH
16005: LD_STRING DI-5-interrogation
16007: PPUSH
16008: CALL_OW 88
// wait ( 0 0$1 ) ;
16012: LD_INT 35
16014: PPUSH
16015: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16019: LD_STRING IbrahimDecisionQuery
16021: PPUSH
16022: CALL_OW 97
16026: PUSH
16027: LD_INT 1
16029: DOUBLE
16030: EQUAL
16031: IFTRUE 16035
16033: GO 16059
16035: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16036: LD_EXP 34
16040: PPUSH
16041: LD_STRING DI-1-kill
16043: PPUSH
16044: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16048: LD_EXP 34
16052: PPUSH
16053: CALL_OW 66
// end ; 2 :
16057: GO 16158
16059: LD_INT 2
16061: DOUBLE
16062: EQUAL
16063: IFTRUE 16067
16065: GO 16157
16067: POP
// begin SetSide ( Ibrahim , 6 ) ;
16068: LD_EXP 34
16072: PPUSH
16073: LD_INT 6
16075: PPUSH
16076: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16080: LD_EXP 34
16084: PPUSH
16085: CALL_OW 122
// AddComMoveXY ( Ibrahim , 32 , 5 ) ;
16089: LD_EXP 34
16093: PPUSH
16094: LD_INT 32
16096: PPUSH
16097: LD_INT 5
16099: PPUSH
16100: CALL_OW 171
// ComExitBuilding ( Heike ) ;
16104: LD_EXP 24
16108: PPUSH
16109: CALL_OW 122
// AddComMoveXY ( Heike , 36 , 21 ) ;
16113: LD_EXP 24
16117: PPUSH
16118: LD_INT 36
16120: PPUSH
16121: LD_INT 21
16123: PPUSH
16124: CALL_OW 171
// AddComWait ( Ibrahim , 1 1$20 ) ;
16128: LD_EXP 34
16132: PPUSH
16133: LD_INT 2800
16135: PPUSH
16136: CALL_OW 202
// AddComMoveXY ( Ibrahim , 38 , 28 ) ;
16140: LD_EXP 34
16144: PPUSH
16145: LD_INT 38
16147: PPUSH
16148: LD_INT 28
16150: PPUSH
16151: CALL_OW 171
// end ; end ;
16155: GO 16158
16157: POP
// Video ( false ) ;
16158: LD_INT 0
16160: PPUSH
16161: CALL 974 0 1
// end ; 2 :
16165: GO 16181
16167: LD_INT 2
16169: DOUBLE
16170: EQUAL
16171: IFTRUE 16175
16173: GO 16180
16175: POP
// exit ; end ;
16176: GO 16204
16178: GO 16181
16180: POP
// allowConvoys := true ;
16181: LD_ADDR_EXP 11
16185: PUSH
16186: LD_INT 1
16188: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16189: LD_INT 1400
16191: PPUSH
16192: CALL_OW 67
// ibrahimIsFree := true ;
16196: LD_ADDR_EXP 22
16200: PUSH
16201: LD_INT 1
16203: ST_TO_ADDR
// end ;
16204: LD_VAR 0 1
16208: RET
// every 0 0$10 trigger ibrahimIsFree and IsInArea ( Ibrahim , americanBaseArea ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass ;
16209: LD_EXP 22
16213: PUSH
16214: LD_EXP 34
16218: PPUSH
16219: LD_INT 7
16221: PPUSH
16222: CALL_OW 308
16226: AND
16227: PUSH
16228: LD_INT 6
16230: PPUSH
16231: LD_EXP 24
16235: PPUSH
16236: CALL_OW 292
16240: AND
16241: PUSH
16242: LD_INT 22
16244: PUSH
16245: LD_INT 4
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PPUSH
16252: CALL_OW 69
16256: NOT
16257: AND
16258: PUSH
16259: LD_INT 22
16261: PUSH
16262: LD_INT 1
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 21
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PPUSH
16283: CALL_OW 69
16287: NOT
16288: AND
16289: IFFALSE 16811
16291: GO 16293
16293: DISABLE
16294: LD_INT 0
16296: PPUSH
// begin allowConvoys := false ;
16297: LD_ADDR_EXP 11
16301: PUSH
16302: LD_INT 0
16304: ST_TO_ADDR
// Video ( true ) ;
16305: LD_INT 1
16307: PPUSH
16308: CALL 974 0 1
// CenterNowOnUnits ( Ibrahim ) ;
16312: LD_EXP 34
16316: PPUSH
16317: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16321: LD_EXP 24
16325: PPUSH
16326: LD_EXP 34
16330: PPUSH
16331: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16335: LD_EXP 34
16339: PPUSH
16340: LD_EXP 24
16344: PPUSH
16345: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16349: LD_EXP 34
16353: PPUSH
16354: LD_STRING DI-1-free
16356: PPUSH
16357: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16361: LD_EXP 24
16365: PPUSH
16366: LD_STRING DH-1-free
16368: PPUSH
16369: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16373: LD_EXP 34
16377: PPUSH
16378: LD_STRING DI-2-free
16380: PPUSH
16381: CALL_OW 88
// changeClass := 0 ;
16385: LD_ADDR_VAR 0 1
16389: PUSH
16390: LD_INT 0
16392: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16393: LD_STRING IbrahimJoinQuery
16395: PPUSH
16396: CALL_OW 97
16400: PUSH
16401: LD_INT 1
16403: DOUBLE
16404: EQUAL
16405: IFTRUE 16409
16407: GO 16420
16409: POP
// begin changeClass := 1 ;
16410: LD_ADDR_VAR 0 1
16414: PUSH
16415: LD_INT 1
16417: ST_TO_ADDR
// end ; 2 :
16418: GO 16624
16420: LD_INT 2
16422: DOUBLE
16423: EQUAL
16424: IFTRUE 16428
16426: GO 16544
16428: POP
// begin Say ( Heike , DH-1-decline ) ;
16429: LD_EXP 24
16433: PPUSH
16434: LD_STRING DH-1-decline
16436: PPUSH
16437: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16441: LD_EXP 34
16445: PPUSH
16446: LD_STRING DI-1-decline
16448: PPUSH
16449: CALL_OW 88
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16453: LD_EXP 34
16457: PPUSH
16458: LD_INT 30
16460: PPUSH
16461: LD_INT 1
16463: PPUSH
16464: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16468: LD_INT 35
16470: PPUSH
16471: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) ;
16475: LD_EXP 34
16479: PPUSH
16480: LD_INT 30
16482: PPUSH
16483: LD_INT 1
16485: PPUSH
16486: CALL_OW 307
16490: PUSH
16491: LD_INT 22
16493: PUSH
16494: LD_INT 2
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 101
16503: PUSH
16504: LD_INT 6
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PPUSH
16515: CALL_OW 69
16519: NOT
16520: OR
16521: IFFALSE 16468
// RemoveUnit ( Ibrahim ) ;
16523: LD_EXP 34
16527: PPUSH
16528: CALL_OW 64
// SaveVariable ( 1 , IbrahimHasEscaped ) ;
16532: LD_INT 1
16534: PPUSH
16535: LD_STRING IbrahimHasEscaped
16537: PPUSH
16538: CALL_OW 39
// end ; 3 :
16542: GO 16624
16544: LD_INT 3
16546: DOUBLE
16547: EQUAL
16548: IFTRUE 16552
16550: GO 16623
16552: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
16553: LD_EXP 24
16557: PPUSH
16558: LD_STRING DH-1-radio-hq
16560: PPUSH
16561: CALL_OW 88
// Say ( Ibrahim , DO-1-radio-hq ) ;
16565: LD_EXP 34
16569: PPUSH
16570: LD_STRING DO-1-radio-hq
16572: PPUSH
16573: CALL_OW 88
// Say ( Heike , DH-2-radio-hq ) ;
16577: LD_EXP 24
16581: PPUSH
16582: LD_STRING DH-2-radio-hq
16584: PPUSH
16585: CALL_OW 88
// Say ( Ibrahim , DO-2-radio-hq ) ;
16589: LD_EXP 34
16593: PPUSH
16594: LD_STRING DO-2-radio-hq
16596: PPUSH
16597: CALL_OW 88
// Say ( Heike , DH-3-radio-hq ) ;
16601: LD_EXP 24
16605: PPUSH
16606: LD_STRING DH-3-radio-hq
16608: PPUSH
16609: CALL_OW 88
// changeClass := 1 ;
16613: LD_ADDR_VAR 0 1
16617: PUSH
16618: LD_INT 1
16620: ST_TO_ADDR
// end ; end ;
16621: GO 16624
16623: POP
// if changeClass then
16624: LD_VAR 0 1
16628: IFFALSE 16796
// begin Say ( Heike , DH-1-agree ) ;
16630: LD_EXP 24
16634: PPUSH
16635: LD_STRING DH-1-agree
16637: PPUSH
16638: CALL_OW 88
// if IsOk ( Givi ) then
16642: LD_EXP 25
16646: PPUSH
16647: CALL_OW 302
16651: IFFALSE 16689
// begin Say ( Givi , DG-1-agree ) ;
16653: LD_EXP 25
16657: PPUSH
16658: LD_STRING DG-1-agree
16660: PPUSH
16661: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
16665: LD_EXP 24
16669: PPUSH
16670: LD_STRING DH-2-agree
16672: PPUSH
16673: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
16677: LD_EXP 25
16681: PPUSH
16682: LD_STRING DG-2-agree
16684: PPUSH
16685: CALL_OW 88
// end ; if UnitsInside ( usDepot ) = 6 then
16689: LD_INT 11
16691: PPUSH
16692: CALL_OW 313
16696: PUSH
16697: LD_INT 6
16699: EQUAL
16700: IFFALSE 16718
// ComExitBuilding ( UnitsInside ( usDepot ) [ 1 ] ) ;
16702: LD_INT 11
16704: PPUSH
16705: CALL_OW 313
16709: PUSH
16710: LD_INT 1
16712: ARRAY
16713: PPUSH
16714: CALL_OW 122
// ComEnterUnit ( Ibrahim , usDepot ) ;
16718: LD_EXP 34
16722: PPUSH
16723: LD_INT 11
16725: PPUSH
16726: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16730: LD_INT 35
16732: PPUSH
16733: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
16737: LD_EXP 34
16741: PPUSH
16742: CALL_OW 310
16746: IFFALSE 16730
// RemoveUnit ( Ibrahim ) ;
16748: LD_EXP 34
16752: PPUSH
16753: CALL_OW 64
// uc_side := 2 ;
16757: LD_ADDR_OWVAR 20
16761: PUSH
16762: LD_INT 2
16764: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
16765: LD_ADDR_EXP 34
16769: PUSH
16770: LD_STRING Ibrahim
16772: PPUSH
16773: LD_INT 0
16775: PPUSH
16776: LD_STRING 
16778: PPUSH
16779: CALL 251 0 3
16783: ST_TO_ADDR
// PlaceHumanInUnit ( Ibrahim , usDepot ) ;
16784: LD_EXP 34
16788: PPUSH
16789: LD_INT 11
16791: PPUSH
16792: CALL_OW 52
// end ; Video ( false ) ;
16796: LD_INT 0
16798: PPUSH
16799: CALL 974 0 1
// allowConvoys := true ;
16803: LD_ADDR_EXP 11
16807: PUSH
16808: LD_INT 1
16810: ST_TO_ADDR
// end ;
16811: PPOPN 1
16813: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
16814: LD_EXP 10
16818: PUSH
16819: LD_EXP 17
16823: PUSH
16824: LD_INT 1
16826: LESS
16827: AND
16828: IFFALSE 17207
16830: GO 16832
16832: DISABLE
// begin DialogueOn ;
16833: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
16837: LD_EXP 24
16841: PPUSH
16842: LD_STRING DH-1-final
16844: PPUSH
16845: CALL_OW 88
// if tick <= [ 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
16849: LD_OWVAR 1
16853: PUSH
16854: LD_INT 126000
16856: PUSH
16857: LD_INT 105000
16859: PUSH
16860: LD_INT 94500
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: LIST
16867: PUSH
16868: LD_OWVAR 67
16872: ARRAY
16873: LESSEQUAL
16874: IFFALSE 16888
// AddMedal ( med1 , 1 ) else
16876: LD_STRING med1
16878: PPUSH
16879: LD_INT 1
16881: PPUSH
16882: CALL_OW 101
16886: GO 16899
// AddMedal ( med1 , - 1 ) ;
16888: LD_STRING med1
16890: PPUSH
16891: LD_INT 1
16893: NEG
16894: PPUSH
16895: CALL_OW 101
// if vehCounter >= 2 then
16899: LD_EXP 18
16903: PUSH
16904: LD_INT 2
16906: GREATEREQUAL
16907: IFFALSE 16921
// AddMedal ( med2 , 1 ) else
16909: LD_STRING med2
16911: PPUSH
16912: LD_INT 1
16914: PPUSH
16915: CALL_OW 101
16919: GO 16932
// AddMedal ( med2 , - 1 ) ;
16921: LD_STRING med2
16923: PPUSH
16924: LD_INT 1
16926: NEG
16927: PPUSH
16928: CALL_OW 101
// if deadCounter = 0 then
16932: LD_EXP 8
16936: PUSH
16937: LD_INT 0
16939: EQUAL
16940: IFFALSE 16954
// AddMedal ( med3 , 1 ) else
16942: LD_STRING med3
16944: PPUSH
16945: LD_INT 1
16947: PPUSH
16948: CALL_OW 101
16952: GO 16965
// AddMedal ( med3 , - 1 ) ;
16954: LD_STRING med3
16956: PPUSH
16957: LD_INT 1
16959: NEG
16960: PPUSH
16961: CALL_OW 101
// GiveMedals ( MAIN ) ;
16965: LD_STRING MAIN
16967: PPUSH
16968: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
16972: LD_INT 22
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 23
16984: PUSH
16985: LD_INT 2
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 21
16994: PUSH
16995: LD_INT 1
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: LIST
17006: PPUSH
17007: CALL_OW 69
17011: PPUSH
17012: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17016: LD_EXP 24
17020: PPUSH
17021: LD_STRING 03_Heike
17023: PPUSH
17024: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17028: LD_EXP 28
17032: PPUSH
17033: LD_STRING 03_Aviradze
17035: PPUSH
17036: CALL_OW 38
// if Givi then
17040: LD_EXP 25
17044: IFFALSE 17058
// SaveCharacters ( Givi , 03_Givi ) ;
17046: LD_EXP 25
17050: PPUSH
17051: LD_STRING 03_Givi
17053: PPUSH
17054: CALL_OW 38
// if Mike then
17058: LD_EXP 26
17062: IFFALSE 17076
// SaveCharacters ( Mike , 03_Mike ) ;
17064: LD_EXP 26
17068: PPUSH
17069: LD_STRING 03_Mike
17071: PPUSH
17072: CALL_OW 38
// if Kamil then
17076: LD_EXP 27
17080: IFFALSE 17094
// SaveCharacters ( Kamil , 03_Kamil ) ;
17082: LD_EXP 27
17086: PPUSH
17087: LD_STRING 03_Kamil
17089: PPUSH
17090: CALL_OW 38
// if Kaia then
17094: LD_EXP 29
17098: IFFALSE 17112
// SaveCharacters ( Kaia , 03_Kaia ) ;
17100: LD_EXP 29
17104: PPUSH
17105: LD_STRING 03_Kaia
17107: PPUSH
17108: CALL_OW 38
// if Sophia then
17112: LD_EXP 30
17116: IFFALSE 17130
// SaveCharacters ( Sophia , 03_Sophia ) ;
17118: LD_EXP 30
17122: PPUSH
17123: LD_STRING 03_Sophia
17125: PPUSH
17126: CALL_OW 38
// if Markov then
17130: LD_EXP 31
17134: IFFALSE 17148
// SaveCharacters ( Markov , 03_Markov ) ;
17136: LD_EXP 31
17140: PPUSH
17141: LD_STRING 03_Markov
17143: PPUSH
17144: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17148: LD_EXP 34
17152: PUSH
17153: LD_EXP 34
17157: PPUSH
17158: CALL_OW 255
17162: PUSH
17163: LD_INT 2
17165: EQUAL
17166: AND
17167: IFFALSE 17181
// SaveCharacters ( Markov , 03_Ibrahim ) ;
17169: LD_EXP 31
17173: PPUSH
17174: LD_STRING 03_Ibrahim
17176: PPUSH
17177: CALL_OW 38
// if heikeSecondSquad then
17181: LD_EXP 38
17185: IFFALSE 17199
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17187: LD_EXP 38
17191: PPUSH
17192: LD_STRING 03_others
17194: PPUSH
17195: CALL_OW 38
// YouWin ;
17199: CALL_OW 103
// DialogueOff ;
17203: CALL_OW 7
// end ; end_of_file
17207: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17208: LD_VAR 0 1
17212: PUSH
17213: LD_EXP 24
17217: EQUAL
17218: IFFALSE 17227
// YouLost ( Heike ) ;
17220: LD_STRING Heike
17222: PPUSH
17223: CALL_OW 104
// if un = Aviradze then
17227: LD_VAR 0 1
17231: PUSH
17232: LD_EXP 28
17236: EQUAL
17237: IFFALSE 17246
// YouLost ( Aviradze ) ;
17239: LD_STRING Aviradze
17241: PPUSH
17242: CALL_OW 104
// if un = usDepot and not retreatAllowed then
17246: LD_VAR 0 1
17250: PUSH
17251: LD_INT 11
17253: EQUAL
17254: PUSH
17255: LD_EXP 10
17259: NOT
17260: AND
17261: IFFALSE 17270
// YouLost ( Depot ) ;
17263: LD_STRING Depot
17265: PPUSH
17266: CALL_OW 104
// if un = Farmer then
17270: LD_VAR 0 1
17274: PUSH
17275: LD_EXP 32
17279: EQUAL
17280: IFFALSE 17289
// YouLost ( Farmer ) ;
17282: LD_STRING Farmer
17284: PPUSH
17285: CALL_OW 104
// if un in usForces then
17289: LD_VAR 0 1
17293: PUSH
17294: LD_EXP 40
17298: IN
17299: IFFALSE 17317
// usForces := usForces diff un ;
17301: LD_ADDR_EXP 40
17305: PUSH
17306: LD_EXP 40
17310: PUSH
17311: LD_VAR 0 1
17315: DIFF
17316: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17317: LD_VAR 0 1
17321: PUSH
17322: LD_INT 22
17324: PUSH
17325: LD_INT 2
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 23
17334: PUSH
17335: LD_INT 2
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 21
17344: PUSH
17345: LD_INT 1
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: LIST
17356: PPUSH
17357: CALL_OW 69
17361: IN
17362: IFFALSE 17378
// deadCounter := deadCounter + 1 ;
17364: LD_ADDR_EXP 8
17368: PUSH
17369: LD_EXP 8
17373: PUSH
17374: LD_INT 1
17376: PLUS
17377: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
17378: LD_VAR 0 1
17382: PUSH
17383: LD_INT 22
17385: PUSH
17386: LD_INT 4
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 34
17395: PUSH
17396: LD_INT 12
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PPUSH
17407: CALL_OW 69
17411: IN
17412: PUSH
17413: LD_EXP 15
17417: NOT
17418: AND
17419: IFFALSE 17429
// firstConvoyDestroyed := true ;
17421: LD_ADDR_EXP 15
17425: PUSH
17426: LD_INT 1
17428: ST_TO_ADDR
// if un in usAttackers then
17429: LD_VAR 0 1
17433: PUSH
17434: LD_EXP 43
17438: IN
17439: IFFALSE 17457
// usAttackers := usAttackers diff un ;
17441: LD_ADDR_EXP 43
17445: PUSH
17446: LD_EXP 43
17450: PUSH
17451: LD_VAR 0 1
17455: DIFF
17456: ST_TO_ADDR
// end ;
17457: PPOPN 1
17459: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
17460: LD_VAR 0 2
17464: PUSH
17465: LD_EXP 34
17469: EQUAL
17470: PUSH
17471: LD_EXP 21
17475: AND
17476: IFFALSE 17511
// begin Video ( true ) ;
17478: LD_INT 1
17480: PPUSH
17481: CALL 974 0 1
// ComEnterUnit ( Ibrahim , usDepot ) ;
17485: LD_EXP 34
17489: PPUSH
17490: LD_INT 11
17492: PPUSH
17493: CALL_OW 120
// wait ( 0 0$1 ) ;
17497: LD_INT 35
17499: PPUSH
17500: CALL_OW 67
// Video ( false ) ;
17504: LD_INT 0
17506: PPUSH
17507: CALL 974 0 1
// end ; end ;
17511: PPOPN 2
17513: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
17514: LD_VAR 0 2
17518: PUSH
17519: LD_EXP 24
17523: EQUAL
17524: PUSH
17525: LD_VAR 0 1
17529: PUSH
17530: LD_INT 11
17532: EQUAL
17533: AND
17534: PUSH
17535: LD_EXP 21
17539: AND
17540: IFFALSE 17546
// IbrahimQuery ;
17542: CALL 15849 0 0
// end ;
17546: PPOPN 2
17548: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin if oldId in usAttackers then
17549: LD_VAR 0 2
17553: PUSH
17554: LD_EXP 43
17558: IN
17559: IFFALSE 17577
// usAttackers := usAttackers diff oldId ;
17561: LD_ADDR_EXP 43
17565: PUSH
17566: LD_EXP 43
17570: PUSH
17571: LD_VAR 0 2
17575: DIFF
17576: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
17577: LD_VAR 0 3
17581: PUSH
17582: LD_INT 4
17584: EQUAL
17585: PUSH
17586: LD_EXP 15
17590: NOT
17591: AND
17592: IFFALSE 17602
// firstConvoyDestroyed := true ;
17594: LD_ADDR_EXP 15
17598: PUSH
17599: LD_INT 1
17601: ST_TO_ADDR
// if GetWeapon ( oldId ) = us_cargo_bay and GetCargo ( oldId , mat_cans ) = 0 then
17602: LD_VAR 0 2
17606: PPUSH
17607: CALL_OW 264
17611: PUSH
17612: LD_INT 12
17614: EQUAL
17615: PUSH
17616: LD_VAR 0 2
17620: PPUSH
17621: LD_INT 1
17623: PPUSH
17624: CALL_OW 289
17628: PUSH
17629: LD_INT 0
17631: EQUAL
17632: AND
17633: IFFALSE 17639
// EmptyCargoDialog ;
17635: CALL 14645 0 0
// end ;
17639: PPOPN 4
17641: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
17642: LD_VAR 0 1
17646: PUSH
17647: LD_INT 2
17649: EQUAL
17650: PUSH
17651: LD_VAR 0 2
17655: PUSH
17656: LD_INT 5
17658: EQUAL
17659: AND
17660: IFFALSE 17669
// YouLost ( Attack ) ;
17662: LD_STRING Attack
17664: PPUSH
17665: CALL_OW 104
// end ;
17669: PPOPN 2
17671: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 then
17672: LD_VAR 0 1
17676: PPUSH
17677: CALL_OW 255
17681: PUSH
17682: LD_INT 1
17684: EQUAL
17685: IFFALSE 17819
// begin if GetBType ( b ) = b_lab then
17687: LD_VAR 0 1
17691: PPUSH
17692: CALL_OW 266
17696: PUSH
17697: LD_INT 6
17699: EQUAL
17700: IFFALSE 17740
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
17702: LD_EXP 40
17706: PPUSH
17707: LD_INT 25
17709: PUSH
17710: LD_INT 4
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PPUSH
17717: CALL_OW 72
17721: PPUSH
17722: LD_VAR 0 1
17726: PPUSH
17727: CALL_OW 120
// AmLabResearch ( b ) ;
17731: LD_VAR 0 1
17735: PPUSH
17736: CALL 5764 0 1
// end ; if GetBType ( b ) = b_armoury then
17740: LD_VAR 0 1
17744: PPUSH
17745: CALL_OW 266
17749: PUSH
17750: LD_INT 4
17752: EQUAL
17753: IFFALSE 17801
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
17755: LD_EXP 40
17759: PPUSH
17760: LD_INT 25
17762: PUSH
17763: LD_INT 1
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 3
17772: PUSH
17773: LD_INT 54
17775: PUSH
17776: EMPTY
17777: LIST
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PPUSH
17787: CALL_OW 72
17791: PPUSH
17792: LD_VAR 0 1
17796: PPUSH
17797: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
17801: LD_ADDR_EXP 42
17805: PUSH
17806: LD_EXP 42
17810: PPUSH
17811: LD_INT 1
17813: PPUSH
17814: CALL_OW 3
17818: ST_TO_ADDR
// end ; end ;
17819: PPOPN 1
17821: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
17822: LD_VAR 0 1
17826: PPUSH
17827: CALL_OW 255
17831: PUSH
17832: LD_INT 2
17834: EQUAL
17835: IFFALSE 17851
// vehCounter := vehCounter + 1 ;
17837: LD_ADDR_EXP 18
17841: PUSH
17842: LD_EXP 18
17846: PUSH
17847: LD_INT 1
17849: PLUS
17850: ST_TO_ADDR
// end ;
17851: PPOPN 2
17853: END
// on SailEvent ( event ) do begin if event = eventAttack then
17854: LD_VAR 0 1
17858: PUSH
17859: LD_EXP 20
17863: EQUAL
17864: IFFALSE 17870
// AmericanAttack ;
17866: CALL 7214 0 0
// end ; end_of_file
17870: PPOPN 1
17872: END
// every 0 0$40 + 0 0$10 trigger tick <= [ 3 3$00 , 2 2$00 , 1 1$30 ] [ Difficulty ] do
17873: LD_OWVAR 1
17877: PUSH
17878: LD_INT 6300
17880: PUSH
17881: LD_INT 4200
17883: PUSH
17884: LD_INT 3150
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: LIST
17891: PUSH
17892: LD_OWVAR 67
17896: ARRAY
17897: LESSEQUAL
17898: IFFALSE 17925
17900: GO 17902
17902: DISABLE
// begin enable ;
17903: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17904: LD_INT 1
17906: PPUSH
17907: LD_INT 5
17909: PPUSH
17910: CALL_OW 12
17914: PPUSH
17915: LD_INT 9
17917: PPUSH
17918: LD_INT 1
17920: PPUSH
17921: CALL_OW 55
// end ;
17925: END
// every 1 1$30 + 0 0$20 trigger americanBaseCaptured and tick <= [ 26 26$00 , 23 23$00 , 20 20$00 ] [ Difficulty ] do
17926: LD_EXP 6
17930: PUSH
17931: LD_OWVAR 1
17935: PUSH
17936: LD_INT 54600
17938: PUSH
17939: LD_INT 48300
17941: PUSH
17942: LD_INT 42000
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: LIST
17949: PUSH
17950: LD_OWVAR 67
17954: ARRAY
17955: LESSEQUAL
17956: AND
17957: IFFALSE 17984
17959: GO 17961
17961: DISABLE
// begin enable ;
17962: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17963: LD_INT 1
17965: PPUSH
17966: LD_INT 5
17968: PPUSH
17969: CALL_OW 12
17973: PPUSH
17974: LD_INT 9
17976: PPUSH
17977: LD_INT 1
17979: PPUSH
17980: CALL_OW 55
// end ; end_of_file
17984: END
// every 0 0$1 trigger not retreatAllowed and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
17985: LD_EXP 10
17989: NOT
17990: PUSH
17991: LD_EXP 4
17995: AND
17996: PUSH
17997: LD_EXP 12
18001: PUSH
18002: LD_EXP 13
18006: LESSEQUAL
18007: AND
18008: IFFALSE 18098
18010: GO 18012
18012: DISABLE
// begin enable ;
18013: ENABLE
// display_strings := [ #X103-1 , farmerCrates , farmerRequestedCrates ] ;
18014: LD_ADDR_OWVAR 47
18018: PUSH
18019: LD_STRING #X103-1
18021: PUSH
18022: LD_EXP 12
18026: PUSH
18027: LD_EXP 13
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
18037: LD_ADDR_EXP 12
18041: PUSH
18042: LD_INT 5
18044: PPUSH
18045: CALL_OW 274
18049: PPUSH
18050: LD_INT 1
18052: PPUSH
18053: CALL_OW 275
18057: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
18058: LD_INT 10
18060: PPUSH
18061: LD_INT 1
18063: PPUSH
18064: CALL_OW 287
18068: PUSH
18069: LD_INT 0
18071: EQUAL
18072: IFFALSE 18090
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
18074: LD_ADDR_EXP 14
18078: PUSH
18079: LD_EXP 14
18083: PUSH
18084: LD_INT 35
18086: MINUS
18087: ST_TO_ADDR
18088: GO 18098
// farmerCratesCounter := 30 30$00 ;
18090: LD_ADDR_EXP 14
18094: PUSH
18095: LD_INT 63000
18097: ST_TO_ADDR
// end ; end_of_file
18098: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
18099: GO 18101
18101: DISABLE
// begin ru_radar := 98 ;
18102: LD_ADDR_EXP 44
18106: PUSH
18107: LD_INT 98
18109: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18110: LD_ADDR_EXP 45
18114: PUSH
18115: LD_INT 89
18117: ST_TO_ADDR
// us_hack := 99 ;
18118: LD_ADDR_EXP 46
18122: PUSH
18123: LD_INT 99
18125: ST_TO_ADDR
// us_artillery := 97 ;
18126: LD_ADDR_EXP 47
18130: PUSH
18131: LD_INT 97
18133: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18134: LD_ADDR_EXP 48
18138: PUSH
18139: LD_INT 91
18141: ST_TO_ADDR
// tech_Artillery := 80 ;
18142: LD_ADDR_EXP 49
18146: PUSH
18147: LD_INT 80
18149: ST_TO_ADDR
// tech_RadMat := 81 ;
18150: LD_ADDR_EXP 50
18154: PUSH
18155: LD_INT 81
18157: ST_TO_ADDR
// tech_BasicTools := 82 ;
18158: LD_ADDR_EXP 51
18162: PUSH
18163: LD_INT 82
18165: ST_TO_ADDR
// tech_Cargo := 83 ;
18166: LD_ADDR_EXP 52
18170: PUSH
18171: LD_INT 83
18173: ST_TO_ADDR
// tech_Track := 84 ;
18174: LD_ADDR_EXP 53
18178: PUSH
18179: LD_INT 84
18181: ST_TO_ADDR
// tech_Crane := 85 ;
18182: LD_ADDR_EXP 54
18186: PUSH
18187: LD_INT 85
18189: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18190: LD_ADDR_EXP 55
18194: PUSH
18195: LD_INT 86
18197: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18198: LD_ADDR_EXP 56
18202: PUSH
18203: LD_INT 87
18205: ST_TO_ADDR
// end ;
18206: END
