// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 618 0 0
// PrepareArabian ;
  12: CALL 1049 0 0
// PrepareAmerican ;
  16: CALL 4110 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9048 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 20
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 19
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 23
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 25
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 26
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 27
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 15
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 13
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// allowCargoEvacuation := false ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// americanStartRun := false ;
 300: LD_ADDR_EXP 14
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// end ; end_of_file
 308: LD_VAR 0 1
 312: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 313: LD_INT 0
 315: PPUSH
// uc_side := side ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_VAR 0 1
 325: ST_TO_ADDR
// uc_nation := nation ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_VAR 0 2
 335: ST_TO_ADDR
// vc_chassis := chassis ;
 336: LD_ADDR_OWVAR 37
 340: PUSH
 341: LD_VAR 0 3
 345: ST_TO_ADDR
// vc_engine := engine ;
 346: LD_ADDR_OWVAR 39
 350: PUSH
 351: LD_VAR 0 4
 355: ST_TO_ADDR
// vc_control := control ;
 356: LD_ADDR_OWVAR 38
 360: PUSH
 361: LD_VAR 0 5
 365: ST_TO_ADDR
// vc_weapon := weapon ;
 366: LD_ADDR_OWVAR 40
 370: PUSH
 371: LD_VAR 0 6
 375: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 376: LD_ADDR_OWVAR 41
 380: PUSH
 381: LD_VAR 0 7
 385: ST_TO_ADDR
// result := CreateVehicle ;
 386: LD_ADDR_VAR 0 8
 390: PUSH
 391: CALL_OW 45
 395: ST_TO_ADDR
// end ;
 396: LD_VAR 0 8
 400: RET
// export function SayX ( units , ident ) ; var i ; begin
 401: LD_INT 0
 403: PPUSH
 404: PPUSH
// result := false ;
 405: LD_ADDR_VAR 0 3
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
// if not units then
 413: LD_VAR 0 1
 417: NOT
 418: IFFALSE 422
// exit ;
 420: GO 476
// for i in units do
 422: LD_ADDR_VAR 0 4
 426: PUSH
 427: LD_VAR 0 1
 431: PUSH
 432: FOR_IN
 433: IFFALSE 474
// if IsOk ( i ) then
 435: LD_VAR 0 4
 439: PPUSH
 440: CALL_OW 302
 444: IFFALSE 472
// begin Say ( i , ident ) ;
 446: LD_VAR 0 4
 450: PPUSH
 451: LD_VAR 0 2
 455: PPUSH
 456: CALL_OW 88
// result := i ;
 460: LD_ADDR_VAR 0 3
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// break ;
 470: GO 474
// end ;
 472: GO 432
 474: POP
 475: POP
// end ;
 476: LD_VAR 0 3
 480: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// InitUc ;
 485: CALL_OW 18
// InitHc ;
 489: CALL_OW 19
// uc_side := 0 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 0
 500: ST_TO_ADDR
// uc_nation := 0 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 0
 508: ST_TO_ADDR
// for i = 1 to amount do
 509: LD_ADDR_VAR 0 4
 513: PUSH
 514: DOUBLE
 515: LD_INT 1
 517: DEC
 518: ST_TO_ADDR
 519: LD_VAR 0 2
 523: PUSH
 524: FOR_TO
 525: IFFALSE 607
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 527: LD_ADDR_OWVAR 29
 531: PUSH
 532: LD_INT 9
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 12
 542: PUSH
 543: LD_INT 9
 545: PPUSH
 546: LD_INT 12
 548: PPUSH
 549: CALL_OW 12
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 558: LD_ADDR_OWVAR 35
 562: PUSH
 563: LD_INT 1
 565: NEG
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: CALL_OW 12
 574: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 575: LD_INT 0
 577: PPUSH
 578: LD_INT 12
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 588: CALL_OW 44
 592: PPUSH
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// end ;
 605: GO 524
 607: POP
 608: POP
// InitHc ;
 609: CALL_OW 19
// end ;
 613: LD_VAR 0 3
 617: RET
// export function CreateNature ; var i ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 4
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_OWVAR 67
 643: ARRAY
 644: PPUSH
 645: CALL 481 0 2
// for i := 1 to 2 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 2
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 21 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 21
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 2
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 2 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 2
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := 18 ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 18
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// for i := 1 to 2 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_INT 2
 763: PUSH
 764: FOR_TO
 765: IFFALSE 800
// begin hc_class := 13 ;
 767: LD_ADDR_OWVAR 28
 771: PUSH
 772: LD_INT 13
 774: ST_TO_ADDR
// hc_gallery :=  ;
 775: LD_ADDR_OWVAR 33
 779: PUSH
 780: LD_STRING 
 782: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 783: CALL_OW 44
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 764
 800: POP
 801: POP
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 807: LD_INT 0
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not observer or not unit then
 812: LD_VAR 0 1
 816: NOT
 817: PUSH
 818: LD_VAR 0 2
 822: NOT
 823: OR
 824: IFFALSE 828
// exit ;
 826: GO 876
// if not See ( GetSide ( observer ) , unit ) then
 828: LD_VAR 0 1
 832: PPUSH
 833: CALL_OW 255
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 292
 847: NOT
 848: IFFALSE 852
// exit ;
 850: GO 876
// result := GetDistUnits ( observer , unit ) < 12 ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: LD_VAR 0 1
 861: PPUSH
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 12
 874: LESS
 875: ST_TO_ADDR
// end ;
 876: LD_VAR 0 3
 880: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 881: LD_INT 0
 883: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: PPUSH
 902: CALL_OW 488
 906: PUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 428
 929: PUSH
 930: LD_INT 0
 932: EQUAL
 933: AND
 934: IFFALSE 968
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 936: LD_VAR 0 1
 940: PPUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 1
 948: ARRAY
 949: PPUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 3
 963: PPUSH
 964: CALL_OW 48
// end ;
 968: LD_VAR 0 4
 972: RET
// export function ReverseArray ( array ) ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// if not array then
 977: LD_VAR 0 1
 981: NOT
 982: IFFALSE 986
// exit ;
 984: GO 1044
// result := [ ] ;
 986: LD_ADDR_VAR 0 2
 990: PUSH
 991: EMPTY
 992: ST_TO_ADDR
// for i := 1 to array do
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: DOUBLE
 999: LD_INT 1
1001: DEC
1002: ST_TO_ADDR
1003: LD_VAR 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1042
// result := Insert ( result , 1 , array [ i ] ) ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_VAR 0 2
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_VAR 0 1
1028: PUSH
1029: LD_VAR 0 3
1033: ARRAY
1034: PPUSH
1035: CALL_OW 2
1039: ST_TO_ADDR
1040: GO 1008
1042: POP
1043: POP
// end ; end_of_file
1044: LD_VAR 0 2
1048: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1049: LD_INT 0
1051: PPUSH
1052: PPUSH
1053: PPUSH
1054: PPUSH
// uc_side := 5 ;
1055: LD_ADDR_OWVAR 20
1059: PUSH
1060: LD_INT 5
1062: ST_TO_ADDR
// uc_nation := 2 ;
1063: LD_ADDR_OWVAR 21
1067: PUSH
1068: LD_INT 2
1070: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1071: LD_INT 5
1073: PPUSH
1074: CALL_OW 274
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_INT 65
1084: PPUSH
1085: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_STRING Farmer
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 36668 0 3
1107: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1108: LD_ADDR_EXP 37
1112: PUSH
1113: LD_STRING Omar
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_STRING 
1121: PPUSH
1122: CALL 36668 0 3
1126: ST_TO_ADDR
// omarSquad := [ ] ;
1127: LD_ADDR_EXP 40
1131: PUSH
1132: EMPTY
1133: ST_TO_ADDR
// heikeSquad := [ ] ;
1134: LD_ADDR_EXP 41
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1141: LD_ADDR_EXP 42
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// omarCargo := [ ] ;
1148: LD_ADDR_EXP 43
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to 5 do
1155: LD_ADDR_VAR 0 2
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_INT 5
1167: PUSH
1168: FOR_TO
1169: IFFALSE 1327
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1171: LD_INT 0
1173: PPUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: LD_VAR 0 2
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 380
// un := CreateHuman ;
1209: LD_ADDR_VAR 0 3
1213: PUSH
1214: CALL_OW 44
1218: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1219: LD_ADDR_EXP 40
1223: PUSH
1224: LD_EXP 40
1228: PUSH
1229: LD_VAR 0 3
1233: UNION
1234: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1235: LD_VAR 0 3
1239: PPUSH
1240: LD_INT 87
1242: PUSH
1243: LD_INT 30
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 91
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 15
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 79
1272: PUSH
1273: LD_INT 14
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 82
1282: PUSH
1283: LD_INT 13
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_VAR 0 2
1301: ARRAY
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL 881 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 93
1317: PPUSH
1318: LD_INT 21
1320: PPUSH
1321: CALL_OW 118
// end ;
1325: GO 1168
1327: POP
1328: POP
// uc_side := 2 ;
1329: LD_ADDR_OWVAR 20
1333: PUSH
1334: LD_INT 2
1336: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1337: LD_ADDR_EXP 28
1341: PUSH
1342: LD_STRING Heike
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_EXP 2
1355: PPUSH
1356: CALL 36668 0 3
1360: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1361: LD_ADDR_EXP 32
1365: PUSH
1366: LD_STRING Aviradze
1368: PPUSH
1369: LD_EXP 1
1373: NOT
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL 36668 0 3
1384: ST_TO_ADDR
// tmp := [ ] ;
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: EMPTY
1391: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 29
1396: PUSH
1397: LD_STRING Givi
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 36668 0 3
1415: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 30
1420: PUSH
1421: LD_STRING Mike
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 36668 0 3
1439: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 31
1444: PUSH
1445: LD_STRING Kamil
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 36668 0 3
1463: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 33
1468: PUSH
1469: LD_STRING Kaia
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 36668 0 3
1487: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 34
1492: PUSH
1493: LD_STRING Sophia
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 36668 0 3
1511: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1512: LD_ADDR_EXP 35
1516: PUSH
1517: LD_STRING Markov
1519: PPUSH
1520: LD_EXP 1
1524: NOT
1525: PPUSH
1526: LD_EXP 2
1530: PPUSH
1531: CALL 36668 0 3
1535: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1536: LD_ADDR_EXP 42
1540: PUSH
1541: LD_STRING 02_others
1543: PPUSH
1544: CALL_OW 31
1548: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_EXP 30
1558: PUSH
1559: LD_EXP 31
1563: PUSH
1564: LD_EXP 33
1568: PUSH
1569: LD_EXP 34
1573: PUSH
1574: LD_EXP 35
1578: PUSH
1579: LD_EXP 29
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_EXP 42
1596: ADD
1597: PUSH
1598: LD_INT 0
1600: DIFF
1601: ST_TO_ADDR
// heikeSquad := tmp ;
1602: LD_ADDR_EXP 41
1606: PUSH
1607: LD_VAR 0 4
1611: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1612: LD_EXP 41
1616: PPUSH
1617: LD_INT 25
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PPUSH
1627: CALL_OW 72
1631: PUSH
1632: LD_INT 3
1634: LESS
1635: IFFALSE 1685
// begin SetClass ( Kaia , 1 ) ;
1637: LD_EXP 33
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1649: LD_EXP 30
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1661: LD_EXP 29
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1673: LD_EXP 28
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_STRING 02_ape
1697: PPUSH
1698: CALL_OW 31
1702: UNION
1703: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1704: LD_EXP 28
1708: PPUSH
1709: LD_INT 92
1711: PPUSH
1712: LD_INT 17
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1722: LD_EXP 36
1726: PPUSH
1727: LD_INT 95
1729: PPUSH
1730: LD_INT 19
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1740: LD_EXP 37
1744: PPUSH
1745: LD_INT 89
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1758: LD_EXP 32
1762: PPUSH
1763: LD_INT 92
1765: PPUSH
1766: LD_INT 27
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1776: LD_EXP 37
1780: PPUSH
1781: LD_EXP 32
1785: PPUSH
1786: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1790: LD_EXP 32
1794: PPUSH
1795: LD_EXP 37
1799: PPUSH
1800: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1804: LD_EXP 28
1808: PUSH
1809: LD_EXP 36
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_EXP 37
1822: PPUSH
1823: CALL_OW 119
// if tmp then
1827: LD_VAR 0 4
1831: IFFALSE 1885
// for i in tmp do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: LD_VAR 0 4
1842: PUSH
1843: FOR_IN
1844: IFFALSE 1883
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 94
1853: PPUSH
1854: LD_INT 14
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_EXP 28
1876: PPUSH
1877: CALL_OW 119
// end ;
1881: GO 1843
1883: POP
1884: POP
// farmerSquad := [ ] ;
1885: LD_ADDR_EXP 39
1889: PUSH
1890: EMPTY
1891: ST_TO_ADDR
// uc_side := 5 ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_INT 5
1899: ST_TO_ADDR
// uc_nation := 2 ;
1900: LD_ADDR_OWVAR 21
1904: PUSH
1905: LD_INT 2
1907: ST_TO_ADDR
// for i := 1 to 4 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 4
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// begin PrepareHuman ( false , 1 , 2 ) ;
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: LD_INT 2
1932: PPUSH
1933: CALL_OW 380
// un := CreateHuman ;
1937: LD_ADDR_VAR 0 3
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1947: LD_VAR 0 3
1951: PPUSH
1952: LD_INT 102
1954: PPUSH
1955: LD_INT 27
1957: PPUSH
1958: LD_INT 4
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1968: LD_ADDR_EXP 39
1972: PUSH
1973: LD_EXP 39
1977: PUSH
1978: LD_VAR 0 3
1982: UNION
1983: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_EXP 37
1993: PPUSH
1994: CALL_OW 119
// end ;
1998: GO 1921
2000: POP
2001: POP
// for i := 1 to 2 do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: DOUBLE
2008: LD_INT 1
2010: DEC
2011: ST_TO_ADDR
2012: LD_INT 2
2014: PUSH
2015: FOR_TO
2016: IFFALSE 2094
// begin PrepareHuman ( false , 2 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 108
2048: PPUSH
2049: LD_INT 62
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2062: LD_ADDR_EXP 39
2066: PUSH
2067: LD_EXP 39
2071: PUSH
2072: LD_VAR 0 3
2076: UNION
2077: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2078: LD_VAR 0 3
2082: PPUSH
2083: LD_EXP 37
2087: PPUSH
2088: CALL_OW 119
// end ;
2092: GO 2015
2094: POP
2095: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2096: LD_INT 109
2098: PPUSH
2099: LD_INT 63
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 15
2107: NEG
2108: PPUSH
2109: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2113: LD_INT 109
2115: PPUSH
2116: LD_INT 63
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL_OW 331
// end ;
2126: LD_VAR 0 1
2130: RET
// export function PrepareIbrahim ( x , y ) ; begin
2131: LD_INT 0
2133: PPUSH
// uc_side := 6 ;
2134: LD_ADDR_OWVAR 20
2138: PUSH
2139: LD_INT 6
2141: ST_TO_ADDR
// uc_nation := 3 ;
2142: LD_ADDR_OWVAR 21
2146: PUSH
2147: LD_INT 3
2149: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_STRING IbrahimRu
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 36668 0 3
2168: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2169: LD_EXP 38
2173: PPUSH
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_INT 8
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 50
// end ;
2194: LD_VAR 0 3
2198: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2199: LD_EXP 37
2203: PUSH
2204: LD_EXP 40
2208: ADD
2209: PPUSH
2210: LD_INT 95
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 72
2224: IFFALSE 2280
2226: GO 2228
2228: DISABLE
2229: LD_INT 0
2231: PPUSH
// begin enable ;
2232: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_EXP 37
2242: PUSH
2243: LD_EXP 40
2247: ADD
2248: PPUSH
2249: LD_INT 95
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 72
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2278
// RemoveUnit ( i ) ;
2267: LD_VAR 0 1
2271: PPUSH
2272: CALL_OW 64
2276: GO 2264
2278: POP
2279: POP
// end ;
2280: PPOPN 1
2282: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2283: LD_EXP 3
2287: PUSH
2288: LD_EXP 36
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: CALL_OW 308
2300: AND
2301: IFFALSE 3105
2303: GO 2305
2305: DISABLE
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2312: LD_EXP 36
2316: PPUSH
2317: LD_INT 110
2319: PPUSH
2320: LD_INT 60
2322: PPUSH
2323: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2327: LD_EXP 36
2331: PPUSH
2332: LD_INT 110
2334: PPUSH
2335: LD_INT 61
2337: PPUSH
2338: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_EXP 39
2351: PPUSH
2352: LD_INT 25
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 72
2366: ST_TO_ADDR
// if tmp then
2367: LD_VAR 0 2
2371: IFFALSE 2465
// begin for i := 1 to 2 do
2373: LD_ADDR_VAR 0 1
2377: PUSH
2378: DOUBLE
2379: LD_INT 1
2381: DEC
2382: ST_TO_ADDR
2383: LD_INT 2
2385: PUSH
2386: FOR_TO
2387: IFFALSE 2463
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 1
2398: ARRAY
2399: PPUSH
2400: LD_INT 5
2402: PPUSH
2403: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2407: LD_VAR 0 2
2411: PUSH
2412: LD_VAR 0 1
2416: ARRAY
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2440: LD_VAR 0 2
2444: PUSH
2445: LD_VAR 0 1
2449: ARRAY
2450: PPUSH
2451: LD_INT 107
2453: PPUSH
2454: LD_INT 66
2456: PPUSH
2457: CALL_OW 171
// end ;
2461: GO 2386
2463: POP
2464: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2465: LD_ADDR_VAR 0 2
2469: PUSH
2470: LD_EXP 39
2474: PPUSH
2475: LD_INT 25
2477: PUSH
2478: LD_INT 2
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PPUSH
2485: CALL_OW 72
2489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2490: LD_INT 35
2492: PPUSH
2493: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 39
2506: PPUSH
2507: LD_INT 25
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 72
2521: ST_TO_ADDR
// until tmp ;
2522: LD_VAR 0 2
2526: IFFALSE 2490
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 31
2535: PPUSH
2536: LD_INT 102
2538: PPUSH
2539: LD_INT 69
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2549: LD_INT 35
2551: PPUSH
2552: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2556: LD_EXP 39
2560: PPUSH
2561: LD_INT 3
2563: PUSH
2564: LD_INT 60
2566: PUSH
2567: EMPTY
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 2
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 72
2592: IFFALSE 2549
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: LD_EXP 39
2603: PPUSH
2604: LD_INT 25
2606: PUSH
2607: LD_INT 2
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2619: LD_VAR 0 2
2623: PPUSH
2624: LD_INT 6
2626: PPUSH
2627: LD_INT 116
2629: PPUSH
2630: LD_INT 55
2632: PPUSH
2633: LD_INT 4
2635: PPUSH
2636: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2640: LD_VAR 0 2
2644: PPUSH
2645: LD_INT 4
2647: PPUSH
2648: LD_INT 116
2650: PPUSH
2651: LD_INT 70
2653: PPUSH
2654: LD_INT 5
2656: PPUSH
2657: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2661: LD_VAR 0 2
2665: PPUSH
2666: LD_INT 31
2668: PPUSH
2669: LD_INT 109
2671: PPUSH
2672: LD_INT 50
2674: PPUSH
2675: LD_INT 2
2677: PPUSH
2678: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2682: LD_INT 35
2684: PPUSH
2685: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2689: LD_INT 22
2691: PUSH
2692: LD_INT 5
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 30
2701: PUSH
2702: LD_INT 4
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 3
2711: PUSH
2712: LD_INT 57
2714: PUSH
2715: EMPTY
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: PPUSH
2727: CALL_OW 69
2731: IFFALSE 2682
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2733: LD_ADDR_VAR 0 3
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 5
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 4
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 3
2760: PUSH
2761: LD_INT 57
2763: PUSH
2764: EMPTY
2765: LIST
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: PPUSH
2776: CALL_OW 69
2780: PUSH
2781: LD_INT 1
2783: ARRAY
2784: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: LD_EXP 39
2794: PPUSH
2795: LD_INT 25
2797: PUSH
2798: LD_INT 1
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PPUSH
2805: CALL_OW 72
2809: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2810: LD_VAR 0 2
2814: PPUSH
2815: LD_VAR 0 3
2819: PPUSH
2820: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2824: LD_INT 35
2826: PPUSH
2827: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2831: LD_INT 22
2833: PUSH
2834: LD_INT 5
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 30
2843: PUSH
2844: LD_INT 31
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 3
2853: PUSH
2854: LD_INT 57
2856: PUSH
2857: EMPTY
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: PUSH
2874: LD_INT 2
2876: GREATEREQUAL
2877: IFFALSE 2824
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2879: LD_ADDR_VAR 0 2
2883: PUSH
2884: LD_EXP 39
2888: PPUSH
2889: LD_INT 25
2891: PUSH
2892: LD_INT 2
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 72
2903: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2904: LD_VAR 0 2
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: LD_INT 5
2915: PPUSH
2916: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2920: LD_VAR 0 2
2924: PUSH
2925: LD_INT 2
2927: ARRAY
2928: PUSH
2929: LD_VAR 0 2
2933: PUSH
2934: LD_INT 3
2936: ARRAY
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PPUSH
2942: LD_VAR 0 3
2946: PPUSH
2947: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2951: LD_VAR 0 2
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PUSH
2960: LD_VAR 0 2
2964: PUSH
2965: LD_INT 3
2967: ARRAY
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2980: LD_VAR 0 2
2984: PUSH
2985: LD_INT 2
2987: ARRAY
2988: PUSH
2989: LD_VAR 0 2
2993: PUSH
2994: LD_INT 3
2996: ARRAY
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PPUSH
3002: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3006: LD_ADDR_VAR 0 4
3010: PUSH
3011: LD_INT 22
3013: PUSH
3014: LD_INT 5
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 30
3023: PUSH
3024: LD_INT 31
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PPUSH
3035: CALL_OW 69
3039: ST_TO_ADDR
// for i := 1 to 2 do
3040: LD_ADDR_VAR 0 1
3044: PUSH
3045: DOUBLE
3046: LD_INT 1
3048: DEC
3049: ST_TO_ADDR
3050: LD_INT 2
3052: PUSH
3053: FOR_TO
3054: IFFALSE 3088
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3056: LD_VAR 0 2
3060: PUSH
3061: LD_VAR 0 1
3065: PUSH
3066: LD_INT 1
3068: PLUS
3069: ARRAY
3070: PPUSH
3071: LD_VAR 0 4
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: CALL_OW 180
3086: GO 3053
3088: POP
3089: POP
// wait ( 1 1$00 ) ;
3090: LD_INT 2100
3092: PPUSH
3093: CALL_OW 67
// farmerBaseReady := true ;
3097: LD_ADDR_EXP 4
3101: PUSH
3102: LD_INT 1
3104: ST_TO_ADDR
// end ;
3105: PPOPN 4
3107: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3108: LD_EXP 4
3112: PUSH
3113: LD_EXP 11
3117: NOT
3118: AND
3119: IFFALSE 3641
3121: GO 3123
3123: DISABLE
3124: LD_INT 0
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
// begin enable ;
3131: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3132: LD_ADDR_VAR 0 3
3136: PUSH
3137: LD_EXP 39
3141: PPUSH
3142: LD_INT 25
3144: PUSH
3145: LD_INT 1
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PPUSH
3152: CALL_OW 72
3156: PUSH
3157: LD_EXP 36
3161: ADD
3162: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 39
3172: PPUSH
3173: LD_INT 25
3175: PUSH
3176: LD_INT 2
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: PPUSH
3183: CALL_OW 72
3187: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3188: LD_ADDR_VAR 0 5
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 5
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 21
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: LD_INT 24
3218: PUSH
3219: LD_INT 1000
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: PPUSH
3235: CALL_OW 69
3239: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3240: LD_ADDR_VAR 0 4
3244: PUSH
3245: LD_INT 22
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 30
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3274: LD_VAR 0 4
3278: PUSH
3279: LD_INT 1
3281: ARRAY
3282: PPUSH
3283: CALL_OW 302
3287: IFFALSE 3351
// for i in sol do
3289: LD_ADDR_VAR 0 1
3293: PUSH
3294: LD_VAR 0 3
3298: PUSH
3299: FOR_IN
3300: IFFALSE 3349
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3302: LD_VAR 0 1
3306: PPUSH
3307: CALL_OW 256
3311: PUSH
3312: LD_INT 999
3314: LESS
3315: PUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: CALL_OW 310
3325: NOT
3326: AND
3327: IFFALSE 3347
// ComEnterUnit ( i , arm [ 1 ] ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: LD_VAR 0 4
3338: PUSH
3339: LD_INT 1
3341: ARRAY
3342: PPUSH
3343: CALL_OW 120
3347: GO 3299
3349: POP
3350: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3351: LD_VAR 0 2
3355: NOT
3356: PUSH
3357: LD_INT 22
3359: PUSH
3360: LD_INT 1
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 1
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PPUSH
3381: CALL_OW 69
3385: NOT
3386: AND
3387: IFFALSE 3479
// begin uc_side := 5 ;
3389: LD_ADDR_OWVAR 20
3393: PUSH
3394: LD_INT 5
3396: ST_TO_ADDR
// uc_nation := 2 ;
3397: LD_ADDR_OWVAR 21
3401: PUSH
3402: LD_INT 2
3404: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3405: LD_INT 0
3407: PPUSH
3408: LD_INT 2
3410: PPUSH
3411: LD_INT 2
3413: PPUSH
3414: CALL_OW 380
// eng := CreateHuman ;
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: CALL_OW 44
3427: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3428: LD_VAR 0 2
3432: PPUSH
3433: LD_INT 102
3435: PPUSH
3436: LD_INT 8
3438: PPUSH
3439: LD_INT 0
3441: PPUSH
3442: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3446: LD_VAR 0 2
3450: PPUSH
3451: LD_INT 110
3453: PPUSH
3454: LD_INT 60
3456: PPUSH
3457: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3461: LD_ADDR_EXP 39
3465: PUSH
3466: LD_EXP 39
3470: PUSH
3471: LD_VAR 0 2
3475: UNION
3476: ST_TO_ADDR
// end else
3477: GO 3641
// begin for i in eng do
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 2
3488: PUSH
3489: FOR_IN
3490: IFFALSE 3639
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3492: LD_INT 10
3494: PPUSH
3495: LD_INT 1
3497: PPUSH
3498: CALL_OW 287
3502: IFFALSE 3553
// begin if IsInUnit ( i ) then
3504: LD_VAR 0 1
3508: PPUSH
3509: CALL_OW 310
3513: IFFALSE 3524
// ComExitBuilding ( i ) ;
3515: LD_VAR 0 1
3519: PPUSH
3520: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3524: LD_VAR 0 1
3528: PPUSH
3529: LD_INT 10
3531: PPUSH
3532: CALL_OW 308
3536: NOT
3537: IFFALSE 3551
// AddComMoveToArea ( i , collectFarmerArea ) ;
3539: LD_VAR 0 1
3543: PPUSH
3544: LD_INT 10
3546: PPUSH
3547: CALL_OW 173
// end else
3551: GO 3637
// begin if damagedBuilding then
3553: LD_VAR 0 5
3557: IFFALSE 3601
// begin if IsInUnit ( i ) then
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 310
3568: IFFALSE 3581
// ComExitBuilding ( i ) else
3570: LD_VAR 0 1
3574: PPUSH
3575: CALL_OW 122
3579: GO 3599
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: LD_VAR 0 5
3590: PUSH
3591: LD_INT 1
3593: ARRAY
3594: PPUSH
3595: CALL_OW 130
// end else
3599: GO 3637
// if not IsInUnit ( i ) and not HasTask ( i ) then
3601: LD_VAR 0 1
3605: PPUSH
3606: CALL_OW 310
3610: NOT
3611: PUSH
3612: LD_VAR 0 1
3616: PPUSH
3617: CALL_OW 314
3621: NOT
3622: AND
3623: IFFALSE 3637
// ComEnterUnit ( i , arDepot ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 5
3632: PPUSH
3633: CALL_OW 120
// end ; end ;
3637: GO 3489
3639: POP
3640: POP
// end ; end ;
3641: PPOPN 5
3643: END
// export function CargoEvacuation ; begin
3644: LD_INT 0
3646: PPUSH
// wait ( 0 0$20 ) ;
3647: LD_INT 700
3649: PPUSH
3650: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3654: LD_ADDR_EXP 21
3658: PUSH
3659: LD_EXP 21
3663: PUSH
3664: LD_INT 1
3666: MINUS
3667: ST_TO_ADDR
// if omarCargoCounter = 0 then
3668: LD_EXP 21
3672: PUSH
3673: LD_INT 0
3675: EQUAL
3676: IFFALSE 3680
// exit ;
3678: GO 3987
// if omarCargo then
3680: LD_EXP 43
3684: IFFALSE 3695
// RemoveUnit ( omarCargo ) ;
3686: LD_EXP 43
3690: PPUSH
3691: CALL_OW 64
// omarCargo := PrepareCargo ;
3695: LD_ADDR_EXP 43
3699: PUSH
3700: CALL 3992 0 0
3704: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3705: LD_EXP 43
3709: PPUSH
3710: LD_INT 0
3712: PPUSH
3713: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3717: LD_EXP 43
3721: PPUSH
3722: LD_INT 107
3724: PPUSH
3725: LD_INT 59
3727: PPUSH
3728: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3732: LD_INT 35
3734: PPUSH
3735: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3739: LD_EXP 43
3743: PPUSH
3744: LD_INT 107
3746: PPUSH
3747: LD_INT 59
3749: PPUSH
3750: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3754: LD_EXP 43
3758: PPUSH
3759: CALL_OW 302
3763: NOT
3764: PUSH
3765: LD_EXP 43
3769: PPUSH
3770: CALL_OW 301
3774: OR
3775: IFFALSE 3779
// exit ;
3777: GO 3987
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3779: LD_EXP 43
3783: PPUSH
3784: LD_INT 107
3786: PPUSH
3787: LD_INT 59
3789: PPUSH
3790: CALL_OW 307
3794: PUSH
3795: LD_EXP 43
3799: PPUSH
3800: LD_INT 5
3802: PPUSH
3803: CALL_OW 296
3807: PUSH
3808: LD_INT 6
3810: LESS
3811: OR
3812: IFFALSE 3732
// SetTag ( omarCargo , 1 ) ;
3814: LD_EXP 43
3818: PPUSH
3819: LD_INT 1
3821: PPUSH
3822: CALL_OW 109
// wait ( 0 0$05 ) ;
3826: LD_INT 175
3828: PPUSH
3829: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3833: LD_EXP 43
3837: PPUSH
3838: LD_INT 5
3840: PPUSH
3841: LD_INT 1
3843: PPUSH
3844: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3848: LD_EXP 43
3852: PPUSH
3853: LD_INT 103
3855: PPUSH
3856: LD_INT 9
3858: PPUSH
3859: CALL_OW 171
// wait ( 0 0$1 ) ;
3863: LD_INT 35
3865: PPUSH
3866: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3870: LD_EXP 43
3874: PPUSH
3875: LD_INT 1
3877: PPUSH
3878: LD_INT 100
3880: PPUSH
3881: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3885: LD_INT 35
3887: PPUSH
3888: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3892: LD_EXP 43
3896: PPUSH
3897: LD_INT 103
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3907: LD_EXP 43
3911: PPUSH
3912: CALL_OW 302
3916: NOT
3917: PUSH
3918: LD_EXP 43
3922: PPUSH
3923: CALL_OW 301
3927: OR
3928: IFFALSE 3932
// exit ;
3930: GO 3987
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3932: LD_EXP 43
3936: PPUSH
3937: LD_INT 103
3939: PPUSH
3940: LD_INT 9
3942: PPUSH
3943: CALL_OW 307
3947: PUSH
3948: LD_EXP 43
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: CALL_OW 308
3960: OR
3961: PUSH
3962: LD_EXP 43
3966: PPUSH
3967: CALL_OW 110
3971: PUSH
3972: LD_INT 0
3974: GREATER
3975: AND
3976: IFFALSE 3885
// RemoveUnit ( omarCargo ) ;
3978: LD_EXP 43
3982: PPUSH
3983: CALL_OW 64
// end ;
3987: LD_VAR 0 1
3991: RET
// export function PrepareCargo ; var un , veh ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_INT 5
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: LD_INT 14
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_INT 1
4016: PPUSH
4017: LD_INT 32
4019: PPUSH
4020: LD_INT 80
4022: PPUSH
4023: CALL 313 0 7
4027: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4028: LD_VAR 0 3
4032: PPUSH
4033: LD_INT 4
4035: PPUSH
4036: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: LD_INT 101
4047: PPUSH
4048: LD_INT 8
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4058: LD_INT 0
4060: PPUSH
4061: LD_INT 3
4063: PPUSH
4064: LD_INT 2
4066: PPUSH
4067: CALL_OW 380
// un := CreateHuman ;
4071: LD_ADDR_VAR 0 2
4075: PUSH
4076: CALL_OW 44
4080: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4081: LD_VAR 0 2
4085: PPUSH
4086: LD_VAR 0 3
4090: PPUSH
4091: CALL_OW 52
// result := veh ;
4095: LD_ADDR_VAR 0 1
4099: PUSH
4100: LD_VAR 0 3
4104: ST_TO_ADDR
// end ; end_of_file
4105: LD_VAR 0 1
4109: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4110: LD_INT 0
4112: PPUSH
4113: PPUSH
4114: PPUSH
// usForces := [ ] ;
4115: LD_ADDR_EXP 44
4119: PUSH
4120: EMPTY
4121: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4122: LD_ADDR_EXP 46
4126: PUSH
4127: LD_INT 6
4129: PUSH
4130: LD_INT 32
4132: PUSH
4133: LD_INT 27
4135: PUSH
4136: LD_INT 1
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 4
4147: PUSH
4148: LD_INT 43
4150: PUSH
4151: LD_INT 24
4153: PUSH
4154: LD_INT 5
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 27
4165: PUSH
4166: LD_INT 29
4168: PUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4186: LD_INT 11
4188: PPUSH
4189: CALL_OW 274
4193: PPUSH
4194: LD_INT 1
4196: PPUSH
4197: LD_INT 150
4199: PUSH
4200: LD_INT 120
4202: PUSH
4203: LD_INT 100
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: PUSH
4211: LD_OWVAR 67
4215: ARRAY
4216: PPUSH
4217: CALL_OW 277
// if Difficulty = 1 then
4221: LD_OWVAR 67
4225: PUSH
4226: LD_INT 1
4228: EQUAL
4229: IFFALSE 4238
// RemoveUnit ( hillBun ) ;
4231: LD_INT 14
4233: PPUSH
4234: CALL_OW 64
// uc_side := 1 ;
4238: LD_ADDR_OWVAR 20
4242: PUSH
4243: LD_INT 1
4245: ST_TO_ADDR
// uc_nation := 1 ;
4246: LD_ADDR_OWVAR 21
4250: PUSH
4251: LD_INT 1
4253: ST_TO_ADDR
// hc_gallery :=  ;
4254: LD_ADDR_OWVAR 33
4258: PUSH
4259: LD_STRING 
4261: ST_TO_ADDR
// hc_name :=  ;
4262: LD_ADDR_OWVAR 26
4266: PUSH
4267: LD_STRING 
4269: ST_TO_ADDR
// hc_importance := 0 ;
4270: LD_ADDR_OWVAR 32
4274: PUSH
4275: LD_INT 0
4277: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 1
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: CALL_OW 380
// usCommander := CreateHuman ;
4291: LD_ADDR_EXP 45
4295: PUSH
4296: CALL_OW 44
4300: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4301: LD_EXP 45
4305: PPUSH
4306: LD_INT 11
4308: PPUSH
4309: CALL_OW 52
// if Difficulty > 1 then
4313: LD_OWVAR 67
4317: PUSH
4318: LD_INT 1
4320: GREATER
4321: IFFALSE 4403
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4323: LD_INT 0
4325: PPUSH
4326: LD_INT 1
4328: PPUSH
4329: LD_INT 1
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 3
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: PUSH
4343: LD_OWVAR 67
4347: ARRAY
4348: PPUSH
4349: CALL_OW 380
// un := CreateHuman ;
4353: LD_ADDR_VAR 0 3
4357: PUSH
4358: CALL_OW 44
4362: ST_TO_ADDR
// usForces := usForces union un ;
4363: LD_ADDR_EXP 44
4367: PUSH
4368: LD_EXP 44
4372: PUSH
4373: LD_VAR 0 3
4377: UNION
4378: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4379: LD_VAR 0 3
4383: PPUSH
4384: LD_INT 1
4386: PPUSH
4387: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4391: LD_VAR 0 3
4395: PPUSH
4396: LD_INT 14
4398: PPUSH
4399: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4403: LD_ADDR_VAR 0 2
4407: PUSH
4408: DOUBLE
4409: LD_INT 1
4411: DEC
4412: ST_TO_ADDR
4413: LD_INT 2
4415: PUSH
4416: LD_INT 3
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4576
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 1
4441: PPUSH
4442: LD_INT 1
4444: PUSH
4445: LD_INT 2
4447: PUSH
4448: LD_INT 3
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_OWVAR 67
4460: ARRAY
4461: PPUSH
4462: CALL_OW 380
// un := CreateHuman ;
4466: LD_ADDR_VAR 0 3
4470: PUSH
4471: CALL_OW 44
4475: ST_TO_ADDR
// usForces := usForces union un ;
4476: LD_ADDR_EXP 44
4480: PUSH
4481: LD_EXP 44
4485: PUSH
4486: LD_VAR 0 3
4490: UNION
4491: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4492: LD_VAR 0 3
4496: PPUSH
4497: LD_INT 39
4499: PPUSH
4500: LD_INT 24
4502: PPUSH
4503: LD_INT 4
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: CALL_OW 50
// if i < 3 then
4513: LD_VAR 0 2
4517: PUSH
4518: LD_INT 3
4520: LESS
4521: IFFALSE 4574
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4523: LD_VAR 0 3
4527: PPUSH
4528: LD_INT 22
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 58
4540: PUSH
4541: EMPTY
4542: LIST
4543: PUSH
4544: LD_INT 30
4546: PUSH
4547: LD_INT 31
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: PPUSH
4559: CALL_OW 69
4563: PUSH
4564: LD_VAR 0 2
4568: ARRAY
4569: PPUSH
4570: CALL_OW 120
// end ;
4574: GO 4433
4576: POP
4577: POP
// for i := 1 to 2 do
4578: LD_ADDR_VAR 0 2
4582: PUSH
4583: DOUBLE
4584: LD_INT 1
4586: DEC
4587: ST_TO_ADDR
4588: LD_INT 2
4590: PUSH
4591: FOR_TO
4592: IFFALSE 4656
// begin PrepareHuman ( false , 2 , 2 ) ;
4594: LD_INT 0
4596: PPUSH
4597: LD_INT 2
4599: PPUSH
4600: LD_INT 2
4602: PPUSH
4603: CALL_OW 380
// un := CreateHuman ;
4607: LD_ADDR_VAR 0 3
4611: PUSH
4612: CALL_OW 44
4616: ST_TO_ADDR
// usForces := usForces union un ;
4617: LD_ADDR_EXP 44
4621: PUSH
4622: LD_EXP 44
4626: PUSH
4627: LD_VAR 0 3
4631: UNION
4632: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4633: LD_VAR 0 3
4637: PPUSH
4638: LD_INT 39
4640: PPUSH
4641: LD_INT 24
4643: PPUSH
4644: LD_INT 4
4646: PPUSH
4647: LD_INT 0
4649: PPUSH
4650: CALL_OW 50
// end ;
4654: GO 4591
4656: POP
4657: POP
// PrepareHuman ( false , 4 , 1 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 4
4663: PPUSH
4664: LD_INT 1
4666: PPUSH
4667: CALL_OW 380
// un := CreateHuman ;
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: CALL_OW 44
4680: ST_TO_ADDR
// usForces := usForces union un ;
4681: LD_ADDR_EXP 44
4685: PUSH
4686: LD_EXP 44
4690: PUSH
4691: LD_VAR 0 3
4695: UNION
4696: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4697: LD_VAR 0 3
4701: PPUSH
4702: LD_INT 39
4704: PPUSH
4705: LD_INT 24
4707: PPUSH
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 50
// end ;
4718: LD_VAR 0 1
4722: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4723: LD_EXP 44
4727: PUSH
4728: LD_EXP 6
4732: NOT
4733: AND
4734: PUSH
4735: LD_EXP 14
4739: NOT
4740: AND
4741: IFFALSE 5172
4743: GO 4745
4745: DISABLE
4746: LD_INT 0
4748: PPUSH
4749: PPUSH
4750: PPUSH
4751: PPUSH
4752: PPUSH
// begin enable ;
4753: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4754: LD_ADDR_VAR 0 3
4758: PUSH
4759: LD_EXP 44
4763: PPUSH
4764: LD_INT 25
4766: PUSH
4767: LD_INT 2
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PPUSH
4774: CALL_OW 72
4778: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4779: LD_ADDR_VAR 0 4
4783: PUSH
4784: LD_EXP 44
4788: PPUSH
4789: LD_INT 25
4791: PUSH
4792: LD_INT 1
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PPUSH
4799: CALL_OW 72
4803: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4804: LD_ADDR_VAR 0 5
4808: PUSH
4809: LD_EXP 44
4813: PPUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 4
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PPUSH
4824: CALL_OW 72
4828: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4829: LD_INT 7
4831: PPUSH
4832: LD_INT 22
4834: PUSH
4835: LD_INT 2
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL_OW 70
4846: PUSH
4847: LD_INT 1
4849: EQUAL
4850: IFFALSE 4926
// for i in sol do
4852: LD_ADDR_VAR 0 1
4856: PUSH
4857: LD_VAR 0 4
4861: PUSH
4862: FOR_IN
4863: IFFALSE 4924
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 310
4874: NOT
4875: PUSH
4876: LD_VAR 0 1
4880: PPUSH
4881: CALL_OW 310
4885: PPUSH
4886: CALL_OW 266
4890: PUSH
4891: LD_INT 4
4893: EQUAL
4894: NOT
4895: OR
4896: IFFALSE 4922
// begin ComExitBuilding ( i ) ;
4898: LD_VAR 0 1
4902: PPUSH
4903: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4907: LD_VAR 0 1
4911: PPUSH
4912: LD_INT 37
4914: PPUSH
4915: LD_INT 23
4917: PPUSH
4918: CALL_OW 174
// end ;
4922: GO 4862
4924: POP
4925: POP
// if eng then
4926: LD_VAR 0 3
4930: IFFALSE 5172
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4932: LD_ADDR_VAR 0 2
4936: PUSH
4937: LD_INT 22
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: LD_INT 95
4949: PUSH
4950: LD_INT 7
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: LD_INT 21
4959: PUSH
4960: LD_INT 3
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 3
4969: PUSH
4970: LD_INT 24
4972: PUSH
4973: LD_INT 1000
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: PPUSH
4990: CALL_OW 69
4994: ST_TO_ADDR
// if b then
4995: LD_VAR 0 2
4999: IFFALSE 5030
// begin ComExitBuilding ( eng ) ;
5001: LD_VAR 0 3
5005: PPUSH
5006: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: LD_VAR 0 2
5019: PUSH
5020: LD_INT 1
5022: ARRAY
5023: PPUSH
5024: CALL_OW 190
// end else
5028: GO 5172
// begin for i in eng do
5030: LD_ADDR_VAR 0 1
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: FOR_IN
5041: IFFALSE 5170
// if not HasTask ( i ) then
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 314
5052: NOT
5053: IFFALSE 5168
// begin if americanBuildList then
5055: LD_EXP 46
5059: IFFALSE 5144
// begin if IsInUnit ( i ) then
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL_OW 310
5070: IFFALSE 5081
// ComExitBuilding ( i ) ;
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5081: LD_VAR 0 1
5085: PPUSH
5086: LD_EXP 46
5090: PUSH
5091: LD_INT 1
5093: ARRAY
5094: PUSH
5095: LD_INT 1
5097: ARRAY
5098: PPUSH
5099: LD_EXP 46
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PUSH
5108: LD_INT 2
5110: ARRAY
5111: PPUSH
5112: LD_EXP 46
5116: PUSH
5117: LD_INT 1
5119: ARRAY
5120: PUSH
5121: LD_INT 3
5123: ARRAY
5124: PPUSH
5125: LD_EXP 46
5129: PUSH
5130: LD_INT 1
5132: ARRAY
5133: PUSH
5134: LD_INT 4
5136: ARRAY
5137: PPUSH
5138: CALL_OW 205
// end else
5142: GO 5168
// if not IsInUnit ( i ) then
5144: LD_VAR 0 1
5148: PPUSH
5149: CALL_OW 310
5153: NOT
5154: IFFALSE 5168
// ComEnterUnit ( i , usDepot ) ;
5156: LD_VAR 0 1
5160: PPUSH
5161: LD_INT 11
5163: PPUSH
5164: CALL_OW 120
// end ;
5168: GO 5040
5170: POP
5171: POP
// end ; end ; end ;
5172: PPOPN 5
5174: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5175: LD_INT 0
5177: PPUSH
5178: PPUSH
5179: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5180: LD_ADDR_VAR 0 3
5184: PUSH
5185: LD_INT 35
5187: PUSH
5188: LD_INT 45
5190: PUSH
5191: LD_INT 48
5193: PUSH
5194: LD_EXP 58
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
// for i in tech do
5205: LD_ADDR_VAR 0 4
5209: PUSH
5210: LD_VAR 0 3
5214: PUSH
5215: FOR_IN
5216: IFFALSE 5234
// AddComResearch ( lab , i ) ;
5218: LD_VAR 0 1
5222: PPUSH
5223: LD_VAR 0 4
5227: PPUSH
5228: CALL_OW 184
5232: GO 5215
5234: POP
5235: POP
// end ;
5236: LD_VAR 0 2
5240: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5241: LD_EXP 12
5245: PUSH
5246: LD_EXP 23
5250: PUSH
5251: LD_EXP 27
5255: LESSEQUAL
5256: AND
5257: IFFALSE 5282
5259: GO 5261
5261: DISABLE
// begin enable ;
5262: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5263: LD_INT 35
5265: PPUSH
5266: LD_INT 2065
5268: PPUSH
5269: CALL_OW 12
5273: PPUSH
5274: CALL_OW 67
// SendConvoy ;
5278: CALL 5380 0 0
// end ;
5282: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5283: LD_EXP 6
5287: PUSH
5288: LD_EXP 18
5292: AND
5293: IFFALSE 5379
5295: GO 5297
5297: DISABLE
// begin if americanHasEscaped then
5298: LD_EXP 8
5302: IFFALSE 5313
// wait ( 3 3$20 ) else
5304: LD_INT 7000
5306: PPUSH
5307: CALL_OW 67
5311: GO 5320
// wait ( 6 6$40 ) ;
5313: LD_INT 14000
5315: PPUSH
5316: CALL_OW 67
// SendAttack ;
5320: CALL 6123 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5324: LD_INT 14000
5326: PUSH
5327: LD_INT 11900
5329: PUSH
5330: LD_INT 9800
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: LIST
5337: PUSH
5338: LD_OWVAR 67
5342: ARRAY
5343: PPUSH
5344: CALL_OW 67
// SendAttack ;
5348: CALL 6123 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5352: LD_EXP 19
5356: PUSH
5357: LD_INT 6
5359: PUSH
5360: LD_INT 7
5362: PUSH
5363: LD_INT 8
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: PUSH
5371: LD_OWVAR 67
5375: ARRAY
5376: LESS
5377: IFFALSE 5324
// end ;
5379: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5380: LD_INT 0
5382: PPUSH
5383: PPUSH
5384: PPUSH
5385: PPUSH
5386: PPUSH
5387: PPUSH
5388: PPUSH
5389: PPUSH
// road := rand ( 1 , 2 ) ;
5390: LD_ADDR_VAR 0 4
5394: PUSH
5395: LD_INT 1
5397: PPUSH
5398: LD_INT 2
5400: PPUSH
5401: CALL_OW 12
5405: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5406: LD_ADDR_VAR 0 8
5410: PUSH
5411: LD_INT 3
5413: PUSH
5414: LD_INT 8
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_VAR 0 4
5425: ARRAY
5426: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5427: LD_ADDR_VAR 0 5
5431: PUSH
5432: LD_INT 35
5434: PUSH
5435: LD_INT 66
5437: PUSH
5438: LD_INT 1
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 101
5448: PUSH
5449: LD_INT 8
5451: PUSH
5452: LD_INT 4
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5464: LD_ADDR_VAR 0 6
5468: PUSH
5469: LD_INT 34
5471: PUSH
5472: LD_INT 67
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 38
5481: PUSH
5482: LD_INT 62
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 43
5491: PUSH
5492: LD_INT 54
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 57
5501: PUSH
5502: LD_INT 57
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 77
5511: PUSH
5512: LD_INT 71
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 86
5521: PUSH
5522: LD_INT 60
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: LD_INT 89
5531: PUSH
5532: LD_INT 35
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_INT 93
5541: PUSH
5542: LD_INT 17
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PUSH
5549: LD_INT 97
5551: PUSH
5552: LD_INT 10
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 103
5561: PUSH
5562: LD_INT 9
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: ST_TO_ADDR
// if road = 2 then
5581: LD_VAR 0 4
5585: PUSH
5586: LD_INT 2
5588: EQUAL
5589: IFFALSE 5606
// points := ReverseArray ( points ) ;
5591: LD_ADDR_VAR 0 6
5595: PUSH
5596: LD_VAR 0 6
5600: PPUSH
5601: CALL 973 0 1
5605: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5606: LD_INT 4
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: LD_INT 2
5614: PPUSH
5615: LD_INT 1
5617: PPUSH
5618: LD_INT 1
5620: PPUSH
5621: LD_INT 12
5623: PPUSH
5624: LD_INT 80
5626: PPUSH
5627: CALL 313 0 7
// veh := CreateVehicle ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 45
5640: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_VAR 0 5
5650: PUSH
5651: LD_VAR 0 4
5655: ARRAY
5656: PUSH
5657: LD_INT 3
5659: ARRAY
5660: PPUSH
5661: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5665: LD_VAR 0 3
5669: PPUSH
5670: LD_VAR 0 5
5674: PUSH
5675: LD_VAR 0 4
5679: ARRAY
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 5
5689: PUSH
5690: LD_VAR 0 4
5694: ARRAY
5695: PUSH
5696: LD_INT 2
5698: ARRAY
5699: PPUSH
5700: LD_INT 0
5702: PPUSH
5703: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5707: LD_INT 0
5709: PPUSH
5710: LD_INT 1
5712: PPUSH
5713: LD_OWVAR 67
5717: PPUSH
5718: CALL_OW 380
// un := CreateHuman ;
5722: LD_ADDR_VAR 0 2
5726: PUSH
5727: CALL_OW 44
5731: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5732: LD_VAR 0 2
5736: PPUSH
5737: LD_VAR 0 3
5741: PPUSH
5742: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5746: LD_INT 60
5748: PUSH
5749: LD_INT 56
5751: PUSH
5752: LD_INT 52
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: PUSH
5760: LD_OWVAR 67
5764: ARRAY
5765: PPUSH
5766: CALL_OW 13
5770: PUSH
5771: LD_OWVAR 1
5775: PUSH
5776: LD_INT 30
5778: MOD
5779: PLUS
5780: PUSH
5781: LD_EXP 23
5785: PUSH
5786: LD_INT 4
5788: LESS
5789: OR
5790: IFFALSE 5807
// SetCargo ( veh , mat_cans , 100 ) ;
5792: LD_VAR 0 3
5796: PPUSH
5797: LD_INT 1
5799: PPUSH
5800: LD_INT 100
5802: PPUSH
5803: CALL_OW 290
// for i := 2 to points do
5807: LD_ADDR_VAR 0 7
5811: PUSH
5812: DOUBLE
5813: LD_INT 2
5815: DEC
5816: ST_TO_ADDR
5817: LD_VAR 0 6
5821: PUSH
5822: FOR_TO
5823: IFFALSE 5866
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5825: LD_VAR 0 3
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_VAR 0 7
5839: ARRAY
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 6
5849: PUSH
5850: LD_VAR 0 7
5854: ARRAY
5855: PUSH
5856: LD_INT 2
5858: ARRAY
5859: PPUSH
5860: CALL_OW 171
5864: GO 5822
5866: POP
5867: POP
// convoyCounter := convoyCounter + 1 ;
5868: LD_ADDR_EXP 23
5872: PUSH
5873: LD_EXP 23
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5889: LD_VAR 0 3
5893: PPUSH
5894: CALL_OW 314
5898: NOT
5899: PUSH
5900: LD_VAR 0 3
5904: PPUSH
5905: CALL_OW 302
5909: AND
5910: IFFALSE 5951
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5912: LD_VAR 0 3
5916: PPUSH
5917: LD_VAR 0 6
5921: PUSH
5922: LD_VAR 0 6
5926: ARRAY
5927: PUSH
5928: LD_INT 1
5930: ARRAY
5931: PPUSH
5932: LD_VAR 0 6
5936: PUSH
5937: LD_VAR 0 6
5941: ARRAY
5942: PUSH
5943: LD_INT 2
5945: ARRAY
5946: PPUSH
5947: CALL_OW 111
// if not IsInUnit ( un ) then
5951: LD_VAR 0 2
5955: PPUSH
5956: CALL_OW 310
5960: NOT
5961: IFFALSE 6002
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5963: LD_VAR 0 2
5967: PPUSH
5968: LD_VAR 0 6
5972: PUSH
5973: LD_VAR 0 6
5977: ARRAY
5978: PUSH
5979: LD_INT 1
5981: ARRAY
5982: PPUSH
5983: LD_VAR 0 6
5987: PUSH
5988: LD_VAR 0 6
5992: ARRAY
5993: PUSH
5994: LD_INT 2
5996: ARRAY
5997: PPUSH
5998: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6002: LD_VAR 0 3
6006: PPUSH
6007: LD_VAR 0 8
6011: PPUSH
6012: CALL_OW 308
6016: PUSH
6017: LD_VAR 0 2
6021: PPUSH
6022: LD_VAR 0 8
6026: PPUSH
6027: CALL_OW 308
6031: OR
6032: IFFALSE 5882
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6034: LD_VAR 0 2
6038: PPUSH
6039: CALL_OW 302
6043: PUSH
6044: LD_VAR 0 3
6048: PPUSH
6049: CALL_OW 302
6053: NOT
6054: AND
6055: PUSH
6056: LD_VAR 0 2
6060: PPUSH
6061: LD_VAR 0 8
6065: PPUSH
6066: CALL_OW 308
6070: AND
6071: IFFALSE 6082
// RemoveUnit ( un ) ;
6073: LD_VAR 0 2
6077: PPUSH
6078: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6082: LD_VAR 0 3
6086: PPUSH
6087: LD_VAR 0 8
6091: PPUSH
6092: CALL_OW 308
6096: PUSH
6097: LD_VAR 0 3
6101: PPUSH
6102: CALL_OW 302
6106: AND
6107: IFFALSE 6118
// RemoveUnit ( veh ) ;
6109: LD_VAR 0 3
6113: PPUSH
6114: CALL_OW 64
// end ;
6118: LD_VAR 0 1
6122: RET
// export function SendAttack ; var un , veh , i ; begin
6123: LD_INT 0
6125: PPUSH
6126: PPUSH
6127: PPUSH
6128: PPUSH
// if ingame_video then
6129: LD_OWVAR 52
6133: IFFALSE 6156
// begin repeat wait ( 0 0$1 ) ;
6135: LD_INT 35
6137: PPUSH
6138: CALL_OW 67
// until not ingame_video ;
6142: LD_OWVAR 52
6146: NOT
6147: IFFALSE 6135
// wait ( 0 0$5 ) ;
6149: LD_INT 175
6151: PPUSH
6152: CALL_OW 67
// end ; IncomingAttack ;
6156: CALL 15069 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6160: LD_INT 2100
6162: PPUSH
6163: LD_INT 3500
6165: PPUSH
6166: CALL_OW 12
6170: PPUSH
6171: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] + attackWave div 3 do
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_INT 3
6187: PUSH
6188: LD_INT 4
6190: PUSH
6191: LD_INT 4
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: PUSH
6199: LD_OWVAR 67
6203: ARRAY
6204: PUSH
6205: LD_EXP 19
6209: PUSH
6210: LD_INT 3
6212: DIV
6213: PLUS
6214: PUSH
6215: FOR_TO
6216: IFFALSE 6328
// begin uc_side := 1 ;
6218: LD_ADDR_OWVAR 20
6222: PUSH
6223: LD_INT 1
6225: ST_TO_ADDR
// uc_nation := 1 ;
6226: LD_ADDR_OWVAR 21
6230: PUSH
6231: LD_INT 1
6233: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6234: LD_INT 0
6236: PPUSH
6237: LD_INT 1
6239: PPUSH
6240: LD_INT 2
6242: PUSH
6243: LD_INT 3
6245: PUSH
6246: LD_INT 4
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: PUSH
6254: LD_OWVAR 67
6258: ARRAY
6259: PPUSH
6260: CALL_OW 380
// un := CreateHuman ;
6264: LD_ADDR_VAR 0 2
6268: PUSH
6269: CALL_OW 44
6273: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6274: LD_VAR 0 2
6278: PPUSH
6279: LD_INT 37
6281: PPUSH
6282: LD_INT 70
6284: PPUSH
6285: LD_INT 3
6287: PPUSH
6288: LD_INT 0
6290: PPUSH
6291: CALL_OW 50
// usAttackers := usAttackers union un ;
6295: LD_ADDR_EXP 47
6299: PUSH
6300: LD_EXP 47
6304: PUSH
6305: LD_VAR 0 2
6309: UNION
6310: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6311: LD_VAR 0 2
6315: PPUSH
6316: LD_INT 40
6318: PPUSH
6319: LD_INT 65
6321: PPUSH
6322: CALL_OW 111
// end ;
6326: GO 6215
6328: POP
6329: POP
// uc_side := 1 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// uc_nation := 1 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 1
6345: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6346: LD_INT 0
6348: PPUSH
6349: LD_INT 4
6351: PPUSH
6352: LD_INT 2
6354: PPUSH
6355: CALL_OW 380
// un := CreateHuman ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: CALL_OW 44
6368: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6369: LD_VAR 0 2
6373: PPUSH
6374: LD_INT 37
6376: PPUSH
6377: LD_INT 70
6379: PPUSH
6380: LD_INT 3
6382: PPUSH
6383: LD_INT 0
6385: PPUSH
6386: CALL_OW 50
// usAttackers := usAttackers union un ;
6390: LD_ADDR_EXP 47
6394: PUSH
6395: LD_EXP 47
6399: PUSH
6400: LD_VAR 0 2
6404: UNION
6405: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6406: LD_VAR 0 2
6410: PPUSH
6411: LD_INT 40
6413: PPUSH
6414: LD_INT 65
6416: PPUSH
6417: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6421: LD_ADDR_VAR 0 4
6425: PUSH
6426: DOUBLE
6427: LD_INT 1
6429: DEC
6430: ST_TO_ADDR
6431: LD_OWVAR 67
6435: PUSH
6436: LD_EXP 19
6440: PUSH
6441: LD_INT 4
6443: DIV
6444: PLUS
6445: PUSH
6446: FOR_TO
6447: IFFALSE 6620
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6449: LD_ADDR_VAR 0 3
6453: PUSH
6454: LD_INT 1
6456: PPUSH
6457: LD_INT 1
6459: PPUSH
6460: LD_INT 2
6462: PPUSH
6463: LD_INT 1
6465: PPUSH
6466: LD_INT 1
6468: PPUSH
6469: LD_INT 4
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: LD_INT 2
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: CALL_OW 12
6493: ARRAY
6494: PPUSH
6495: LD_INT 90
6497: PPUSH
6498: CALL 313 0 7
6502: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6503: LD_VAR 0 3
6507: PPUSH
6508: LD_INT 35
6510: PPUSH
6511: LD_INT 65
6513: PPUSH
6514: LD_INT 0
6516: PPUSH
6517: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6521: LD_INT 0
6523: PPUSH
6524: LD_INT 3
6526: PPUSH
6527: LD_OWVAR 67
6531: PUSH
6532: LD_INT 1
6534: PLUS
6535: PPUSH
6536: CALL_OW 380
// un := CreateHuman ;
6540: LD_ADDR_VAR 0 2
6544: PUSH
6545: CALL_OW 44
6549: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6550: LD_VAR 0 2
6554: PPUSH
6555: LD_VAR 0 3
6559: PPUSH
6560: CALL_OW 52
// usAttackers := usAttackers union un ;
6564: LD_ADDR_EXP 47
6568: PUSH
6569: LD_EXP 47
6573: PUSH
6574: LD_VAR 0 2
6578: UNION
6579: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6580: LD_VAR 0 3
6584: PPUSH
6585: LD_INT 39
6587: PPUSH
6588: LD_INT 60
6590: PPUSH
6591: CALL_OW 111
// wait ( 0 0$3 ) ;
6595: LD_INT 105
6597: PPUSH
6598: CALL_OW 67
// usAttackers := usAttackers union veh ;
6602: LD_ADDR_EXP 47
6606: PUSH
6607: LD_EXP 47
6611: PUSH
6612: LD_VAR 0 3
6616: UNION
6617: ST_TO_ADDR
// end ;
6618: GO 6446
6620: POP
6621: POP
// attackWave := attackWave + 1 ;
6622: LD_ADDR_EXP 19
6626: PUSH
6627: LD_EXP 19
6631: PUSH
6632: LD_INT 1
6634: PLUS
6635: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6636: LD_EXP 24
6640: PPUSH
6641: CALL_OW 427
// end ;
6645: LD_VAR 0 1
6649: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6650: LD_INT 0
6652: PPUSH
6653: PPUSH
6654: PPUSH
6655: PPUSH
6656: PPUSH
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
// if retreatAllowed then
6663: LD_EXP 11
6667: IFFALSE 6679
// strategy := 2 else
6669: LD_ADDR_VAR 0 5
6673: PUSH
6674: LD_INT 2
6676: ST_TO_ADDR
6677: GO 6695
// strategy := rand ( 0 , 2 ) ;
6679: LD_ADDR_VAR 0 5
6683: PUSH
6684: LD_INT 0
6686: PPUSH
6687: LD_INT 2
6689: PPUSH
6690: CALL_OW 12
6694: ST_TO_ADDR
// attackFormula := [ ] ;
6695: LD_ADDR_VAR 0 6
6699: PUSH
6700: EMPTY
6701: ST_TO_ADDR
// case strategy of 0 :
6702: LD_VAR 0 5
6706: PUSH
6707: LD_INT 0
6709: DOUBLE
6710: EQUAL
6711: IFTRUE 6715
6713: GO 7045
6715: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6716: LD_INT 11
6718: PPUSH
6719: LD_INT 22
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 30
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: CALL_OW 70
6747: NOT
6748: IFFALSE 6820
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6750: LD_ADDR_VAR 0 6
6754: PUSH
6755: LD_INT 41
6757: PUSH
6758: LD_INT 34
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: PUSH
6768: LD_INT 53
6770: PUSH
6771: LD_INT 62
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 37
6780: PUSH
6781: LD_INT 63
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 44
6790: PUSH
6791: LD_INT 45
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: LD_INT 37
6800: PUSH
6801: LD_INT 28
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: ST_TO_ADDR
6818: GO 7043
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6820: LD_INT 12
6822: PPUSH
6823: LD_INT 22
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 2
6835: PUSH
6836: LD_INT 30
6838: PUSH
6839: LD_INT 4
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 30
6848: PUSH
6849: LD_INT 31
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 32
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 70
6880: NOT
6881: IFFALSE 6964
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6883: LD_ADDR_VAR 0 6
6887: PUSH
6888: LD_INT 27
6890: PUSH
6891: LD_INT 42
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 27
6900: PUSH
6901: LD_INT 32
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 53
6914: PUSH
6915: LD_INT 62
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 37
6924: PUSH
6925: LD_INT 63
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 44
6934: PUSH
6935: LD_INT 45
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 37
6944: PUSH
6945: LD_INT 28
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: ST_TO_ADDR
6962: GO 7043
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
6964: LD_ADDR_VAR 0 6
6968: PUSH
6969: LD_INT 71
6971: PUSH
6972: LD_INT 67
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 54
6981: PUSH
6982: LD_INT 35
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 63
6995: PUSH
6996: LD_INT 40
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 37
7005: PUSH
7006: LD_INT 63
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: LD_INT 44
7015: PUSH
7016: LD_INT 45
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 37
7025: PUSH
7026: LD_INT 28
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: ST_TO_ADDR
// end ; 1 :
7043: GO 7248
7045: LD_INT 1
7047: DOUBLE
7048: EQUAL
7049: IFTRUE 7053
7051: GO 7157
7053: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7054: LD_ADDR_VAR 0 6
7058: PUSH
7059: LD_INT 71
7061: PUSH
7062: LD_INT 67
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 82
7071: PUSH
7072: LD_INT 23
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 53
7081: PUSH
7082: LD_INT 7
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: LD_INT 43
7091: PUSH
7092: LD_INT 10
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 53
7107: PUSH
7108: LD_INT 62
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 37
7117: PUSH
7118: LD_INT 63
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 44
7127: PUSH
7128: LD_INT 45
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 37
7137: PUSH
7138: LD_INT 28
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: ST_TO_ADDR
7155: GO 7248
7157: LD_INT 2
7159: DOUBLE
7160: EQUAL
7161: IFTRUE 7165
7163: GO 7247
7165: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7166: LD_ADDR_VAR 0 6
7170: PUSH
7171: LD_INT 90
7173: PUSH
7174: LD_INT 59
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 108
7183: PUSH
7184: LD_INT 64
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 82
7197: PUSH
7198: LD_INT 75
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 73
7207: PUSH
7208: LD_INT 67
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 101
7217: PUSH
7218: LD_INT 65
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 108
7227: PUSH
7228: LD_INT 62
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: ST_TO_ADDR
7245: GO 7248
7247: POP
// if not attackFormula then
7248: LD_VAR 0 6
7252: NOT
7253: IFFALSE 7257
// exit ;
7255: GO 8935
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7257: LD_ADDR_VAR 0 7
7261: PUSH
7262: LD_EXP 47
7266: PPUSH
7267: LD_INT 25
7269: PUSH
7270: LD_INT 1
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PPUSH
7277: CALL_OW 72
7281: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7282: LD_ADDR_VAR 0 8
7286: PUSH
7287: LD_EXP 47
7291: PPUSH
7292: LD_INT 25
7294: PUSH
7295: LD_INT 4
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PPUSH
7302: CALL_OW 72
7306: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7307: LD_ADDR_VAR 0 9
7311: PUSH
7312: LD_EXP 47
7316: PPUSH
7317: LD_INT 25
7319: PUSH
7320: LD_INT 3
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PPUSH
7327: CALL_OW 72
7331: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7332: LD_ADDR_VAR 0 10
7336: PUSH
7337: LD_EXP 47
7341: PPUSH
7342: LD_INT 21
7344: PUSH
7345: LD_INT 2
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PPUSH
7352: CALL_OW 72
7356: ST_TO_ADDR
// if sci then
7357: LD_VAR 0 8
7361: IFFALSE 7398
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7363: LD_VAR 0 8
7367: PPUSH
7368: LD_VAR 0 6
7372: PUSH
7373: LD_INT 2
7375: ARRAY
7376: PUSH
7377: LD_INT 1
7379: ARRAY
7380: PPUSH
7381: LD_VAR 0 6
7385: PUSH
7386: LD_INT 2
7388: ARRAY
7389: PUSH
7390: LD_INT 2
7392: ARRAY
7393: PPUSH
7394: CALL_OW 111
// repeat wait ( 10 ) ;
7398: LD_INT 10
7400: PPUSH
7401: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7405: LD_ADDR_VAR 0 7
7409: PUSH
7410: LD_EXP 47
7414: PPUSH
7415: LD_INT 25
7417: PUSH
7418: LD_INT 1
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PPUSH
7425: CALL_OW 72
7429: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7430: LD_ADDR_VAR 0 8
7434: PUSH
7435: LD_EXP 47
7439: PPUSH
7440: LD_INT 25
7442: PUSH
7443: LD_INT 4
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 72
7454: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7455: LD_ADDR_VAR 0 9
7459: PUSH
7460: LD_EXP 47
7464: PPUSH
7465: LD_INT 25
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PPUSH
7475: CALL_OW 72
7479: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7480: LD_ADDR_VAR 0 10
7484: PUSH
7485: LD_EXP 47
7489: PPUSH
7490: LD_INT 21
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PPUSH
7500: CALL_OW 72
7504: ST_TO_ADDR
// if sol then
7505: LD_VAR 0 7
7509: IFFALSE 7930
// begin for i in sol do
7511: LD_ADDR_VAR 0 2
7515: PUSH
7516: LD_VAR 0 7
7520: PUSH
7521: FOR_IN
7522: IFFALSE 7928
// begin tag := GetTag ( i ) ;
7524: LD_ADDR_VAR 0 4
7528: PUSH
7529: LD_VAR 0 2
7533: PPUSH
7534: CALL_OW 110
7538: ST_TO_ADDR
// if not tag then
7539: LD_VAR 0 4
7543: NOT
7544: IFFALSE 7653
// begin if GetLives ( i ) = 1000 then
7546: LD_VAR 0 2
7550: PPUSH
7551: CALL_OW 256
7555: PUSH
7556: LD_INT 1000
7558: EQUAL
7559: IFFALSE 7575
// SetTag ( i , 1 ) else
7561: LD_VAR 0 2
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: CALL_OW 109
7573: GO 7651
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7575: LD_VAR 0 2
7579: PPUSH
7580: LD_VAR 0 6
7584: PUSH
7585: LD_INT 2
7587: ARRAY
7588: PUSH
7589: LD_INT 1
7591: ARRAY
7592: PPUSH
7593: LD_VAR 0 6
7597: PUSH
7598: LD_INT 2
7600: ARRAY
7601: PUSH
7602: LD_INT 2
7604: ARRAY
7605: PPUSH
7606: CALL_OW 297
7610: PUSH
7611: LD_INT 10
7613: GREATER
7614: IFFALSE 7651
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7616: LD_VAR 0 2
7620: PPUSH
7621: LD_VAR 0 6
7625: PUSH
7626: LD_INT 2
7628: ARRAY
7629: PUSH
7630: LD_INT 1
7632: ARRAY
7633: PPUSH
7634: LD_VAR 0 6
7638: PUSH
7639: LD_INT 2
7641: ARRAY
7642: PUSH
7643: LD_INT 2
7645: ARRAY
7646: PPUSH
7647: CALL_OW 111
// end else
7651: GO 7926
// begin if GetLives ( i ) < 760 then
7653: LD_VAR 0 2
7657: PPUSH
7658: CALL_OW 256
7662: PUSH
7663: LD_INT 760
7665: LESS
7666: IFFALSE 7717
// begin SetTag ( i , 0 ) ;
7668: LD_VAR 0 2
7672: PPUSH
7673: LD_INT 0
7675: PPUSH
7676: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7680: LD_VAR 0 2
7684: PPUSH
7685: LD_VAR 0 6
7689: PUSH
7690: LD_INT 2
7692: ARRAY
7693: PUSH
7694: LD_INT 1
7696: ARRAY
7697: PPUSH
7698: LD_VAR 0 6
7702: PUSH
7703: LD_INT 2
7705: ARRAY
7706: PUSH
7707: LD_INT 2
7709: ARRAY
7710: PPUSH
7711: CALL_OW 111
// end else
7715: GO 7926
// if tag <= attackFormula [ 1 ] then
7717: LD_VAR 0 4
7721: PUSH
7722: LD_VAR 0 6
7726: PUSH
7727: LD_INT 1
7729: ARRAY
7730: LESSEQUAL
7731: IFFALSE 7892
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7733: LD_VAR 0 2
7737: PPUSH
7738: LD_VAR 0 6
7742: PUSH
7743: LD_INT 1
7745: ARRAY
7746: PUSH
7747: LD_VAR 0 4
7751: ARRAY
7752: PUSH
7753: LD_INT 1
7755: ARRAY
7756: PPUSH
7757: LD_VAR 0 6
7761: PUSH
7762: LD_INT 1
7764: ARRAY
7765: PUSH
7766: LD_VAR 0 4
7770: ARRAY
7771: PUSH
7772: LD_INT 2
7774: ARRAY
7775: PPUSH
7776: CALL_OW 297
7780: PUSH
7781: LD_INT 6
7783: GREATER
7784: IFFALSE 7835
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7786: LD_VAR 0 2
7790: PPUSH
7791: LD_VAR 0 6
7795: PUSH
7796: LD_INT 1
7798: ARRAY
7799: PUSH
7800: LD_VAR 0 4
7804: ARRAY
7805: PUSH
7806: LD_INT 1
7808: ARRAY
7809: PPUSH
7810: LD_VAR 0 6
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PUSH
7819: LD_VAR 0 4
7823: ARRAY
7824: PUSH
7825: LD_INT 2
7827: ARRAY
7828: PPUSH
7829: CALL_OW 114
7833: GO 7890
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7835: LD_INT 81
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 91
7847: PUSH
7848: LD_VAR 0 2
7852: PUSH
7853: LD_INT 10
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: LIST
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PPUSH
7865: CALL_OW 69
7869: NOT
7870: IFFALSE 7890
// SetTag ( i , tag + 1 ) ;
7872: LD_VAR 0 2
7876: PPUSH
7877: LD_VAR 0 4
7881: PUSH
7882: LD_INT 1
7884: PLUS
7885: PPUSH
7886: CALL_OW 109
// end else
7890: GO 7926
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7892: LD_VAR 0 2
7896: PPUSH
7897: LD_INT 81
7899: PUSH
7900: LD_INT 1
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PPUSH
7907: CALL_OW 69
7911: PPUSH
7912: LD_VAR 0 2
7916: PPUSH
7917: CALL_OW 74
7921: PPUSH
7922: CALL_OW 115
// end ; end ;
7926: GO 7521
7928: POP
7929: POP
// end ; if sci then
7930: LD_VAR 0 8
7934: IFFALSE 8203
// begin if not sol and not mech then
7936: LD_VAR 0 7
7940: NOT
7941: PUSH
7942: LD_VAR 0 9
7946: NOT
7947: AND
7948: IFFALSE 8000
// begin for i in sci do
7950: LD_ADDR_VAR 0 2
7954: PUSH
7955: LD_VAR 0 8
7959: PUSH
7960: FOR_IN
7961: IFFALSE 7996
// begin usForces := usForces union i ;
7963: LD_ADDR_EXP 44
7967: PUSH
7968: LD_EXP 44
7972: PUSH
7973: LD_VAR 0 2
7977: UNION
7978: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
7979: LD_VAR 0 2
7983: PPUSH
7984: LD_INT 34
7986: PPUSH
7987: LD_INT 68
7989: PPUSH
7990: CALL_OW 111
// end ;
7994: GO 7960
7996: POP
7997: POP
// end else
7998: GO 8203
// for i in sci do
8000: LD_ADDR_VAR 0 2
8004: PUSH
8005: LD_VAR 0 8
8009: PUSH
8010: FOR_IN
8011: IFFALSE 8201
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8013: LD_VAR 0 2
8017: PPUSH
8018: LD_VAR 0 6
8022: PUSH
8023: LD_INT 2
8025: ARRAY
8026: PUSH
8027: LD_INT 1
8029: ARRAY
8030: PPUSH
8031: LD_VAR 0 6
8035: PUSH
8036: LD_INT 2
8038: ARRAY
8039: PUSH
8040: LD_INT 2
8042: ARRAY
8043: PPUSH
8044: CALL_OW 297
8048: PUSH
8049: LD_INT 10
8051: GREATER
8052: IFFALSE 8091
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8054: LD_VAR 0 2
8058: PPUSH
8059: LD_VAR 0 6
8063: PUSH
8064: LD_INT 2
8066: ARRAY
8067: PUSH
8068: LD_INT 1
8070: ARRAY
8071: PPUSH
8072: LD_VAR 0 6
8076: PUSH
8077: LD_INT 2
8079: ARRAY
8080: PUSH
8081: LD_INT 2
8083: ARRAY
8084: PPUSH
8085: CALL_OW 111
8089: GO 8199
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8091: LD_VAR 0 7
8095: PPUSH
8096: LD_INT 3
8098: PUSH
8099: LD_INT 24
8101: PUSH
8102: LD_INT 1000
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 91
8115: PUSH
8116: LD_VAR 0 2
8120: PUSH
8121: LD_INT 10
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PPUSH
8133: CALL_OW 72
8137: IFFALSE 8199
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8139: LD_VAR 0 2
8143: PPUSH
8144: LD_VAR 0 7
8148: PPUSH
8149: LD_INT 3
8151: PUSH
8152: LD_INT 24
8154: PUSH
8155: LD_INT 1000
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 91
8168: PUSH
8169: LD_VAR 0 2
8173: PUSH
8174: LD_INT 10
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: LIST
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PPUSH
8186: CALL_OW 72
8190: PUSH
8191: LD_INT 1
8193: ARRAY
8194: PPUSH
8195: CALL_OW 128
8199: GO 8010
8201: POP
8202: POP
// end ; if mech then
8203: LD_VAR 0 9
8207: IFFALSE 8917
// begin for i in mech do
8209: LD_ADDR_VAR 0 2
8213: PUSH
8214: LD_VAR 0 9
8218: PUSH
8219: FOR_IN
8220: IFFALSE 8915
// begin tag := GetTag ( i ) ;
8222: LD_ADDR_VAR 0 4
8226: PUSH
8227: LD_VAR 0 2
8231: PPUSH
8232: CALL_OW 110
8236: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8237: LD_ADDR_VAR 0 11
8241: PUSH
8242: LD_VAR 0 2
8246: PPUSH
8247: CALL_OW 310
8251: ST_TO_ADDR
// if not tag then
8252: LD_VAR 0 4
8256: NOT
8257: IFFALSE 8628
// begin if veh then
8259: LD_VAR 0 11
8263: IFFALSE 8434
// begin if GetLives ( veh ) = 1000 then
8265: LD_VAR 0 11
8269: PPUSH
8270: CALL_OW 256
8274: PUSH
8275: LD_INT 1000
8277: EQUAL
8278: IFFALSE 8294
// SetTag ( i , 1 ) else
8280: LD_VAR 0 2
8284: PPUSH
8285: LD_INT 1
8287: PPUSH
8288: CALL_OW 109
8292: GO 8432
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8294: LD_VAR 0 11
8298: PPUSH
8299: LD_VAR 0 6
8303: PUSH
8304: LD_INT 3
8306: ARRAY
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: LD_VAR 0 6
8316: PUSH
8317: LD_INT 3
8319: ARRAY
8320: PUSH
8321: LD_INT 2
8323: ARRAY
8324: PPUSH
8325: CALL_OW 297
8329: PUSH
8330: LD_INT 8
8332: GREATER
8333: IFFALSE 8372
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8335: LD_VAR 0 11
8339: PPUSH
8340: LD_VAR 0 6
8344: PUSH
8345: LD_INT 3
8347: ARRAY
8348: PUSH
8349: LD_INT 1
8351: ARRAY
8352: PPUSH
8353: LD_VAR 0 6
8357: PUSH
8358: LD_INT 3
8360: ARRAY
8361: PUSH
8362: LD_INT 2
8364: ARRAY
8365: PPUSH
8366: CALL_OW 111
8370: GO 8432
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8372: LD_INT 81
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 91
8384: PUSH
8385: LD_VAR 0 2
8389: PUSH
8390: LD_INT 10
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PPUSH
8402: CALL_OW 69
8406: NOT
8407: IFFALSE 8432
// begin ComExitVehicle ( i ) ;
8409: LD_VAR 0 2
8413: PPUSH
8414: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_VAR 0 11
8427: PPUSH
8428: CALL_OW 189
// end ; end else
8432: GO 8626
// if GetLives ( i ) < 400 then
8434: LD_VAR 0 2
8438: PPUSH
8439: CALL_OW 256
8443: PUSH
8444: LD_INT 400
8446: LESS
8447: IFFALSE 8498
// begin usAttackers := usAttackers diff i ;
8449: LD_ADDR_EXP 47
8453: PUSH
8454: LD_EXP 47
8458: PUSH
8459: LD_VAR 0 2
8463: DIFF
8464: ST_TO_ADDR
// usForces := usForces union i ;
8465: LD_ADDR_EXP 44
8469: PUSH
8470: LD_EXP 44
8474: PUSH
8475: LD_VAR 0 2
8479: UNION
8480: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8481: LD_VAR 0 2
8485: PPUSH
8486: LD_INT 34
8488: PPUSH
8489: LD_INT 68
8491: PPUSH
8492: CALL_OW 111
// end else
8496: GO 8626
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8498: LD_VAR 0 10
8502: PPUSH
8503: LD_INT 58
8505: PUSH
8506: EMPTY
8507: LIST
8508: PUSH
8509: LD_INT 24
8511: PUSH
8512: LD_INT 1000
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 72
8527: PUSH
8528: LD_VAR 0 2
8532: PPUSH
8533: CALL_OW 314
8537: NOT
8538: AND
8539: PUSH
8540: LD_INT 81
8542: PUSH
8543: LD_INT 1
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 91
8552: PUSH
8553: LD_VAR 0 2
8557: PUSH
8558: LD_INT 9
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 69
8574: OR
8575: IFFALSE 8626
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8577: LD_VAR 0 2
8581: PPUSH
8582: LD_VAR 0 10
8586: PPUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: PUSH
8593: LD_INT 24
8595: PUSH
8596: LD_INT 250
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PPUSH
8607: CALL_OW 72
8611: PPUSH
8612: LD_VAR 0 2
8616: PPUSH
8617: CALL_OW 74
8621: PPUSH
8622: CALL_OW 120
// end else
8626: GO 8913
// begin if veh and GetLives ( veh ) < 760 then
8628: LD_VAR 0 11
8632: PUSH
8633: LD_VAR 0 11
8637: PPUSH
8638: CALL_OW 256
8642: PUSH
8643: LD_INT 760
8645: LESS
8646: AND
8647: IFFALSE 8698
// begin SetTag ( i , 0 ) ;
8649: LD_VAR 0 2
8653: PPUSH
8654: LD_INT 0
8656: PPUSH
8657: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8661: LD_VAR 0 11
8665: PPUSH
8666: LD_VAR 0 6
8670: PUSH
8671: LD_INT 3
8673: ARRAY
8674: PUSH
8675: LD_INT 1
8677: ARRAY
8678: PPUSH
8679: LD_VAR 0 6
8683: PUSH
8684: LD_INT 3
8686: ARRAY
8687: PUSH
8688: LD_INT 2
8690: ARRAY
8691: PPUSH
8692: CALL_OW 111
// end else
8696: GO 8913
// if veh then
8698: LD_VAR 0 11
8702: IFFALSE 8913
// if tag <= attackFormula [ 4 ] then
8704: LD_VAR 0 4
8708: PUSH
8709: LD_VAR 0 6
8713: PUSH
8714: LD_INT 4
8716: ARRAY
8717: LESSEQUAL
8718: IFFALSE 8879
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8720: LD_VAR 0 11
8724: PPUSH
8725: LD_VAR 0 6
8729: PUSH
8730: LD_INT 4
8732: ARRAY
8733: PUSH
8734: LD_VAR 0 4
8738: ARRAY
8739: PUSH
8740: LD_INT 1
8742: ARRAY
8743: PPUSH
8744: LD_VAR 0 6
8748: PUSH
8749: LD_INT 4
8751: ARRAY
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 2
8761: ARRAY
8762: PPUSH
8763: CALL_OW 297
8767: PUSH
8768: LD_INT 6
8770: GREATER
8771: IFFALSE 8822
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8773: LD_VAR 0 11
8777: PPUSH
8778: LD_VAR 0 6
8782: PUSH
8783: LD_INT 4
8785: ARRAY
8786: PUSH
8787: LD_VAR 0 4
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: LD_VAR 0 6
8801: PUSH
8802: LD_INT 4
8804: ARRAY
8805: PUSH
8806: LD_VAR 0 4
8810: ARRAY
8811: PUSH
8812: LD_INT 2
8814: ARRAY
8815: PPUSH
8816: CALL_OW 114
8820: GO 8877
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8822: LD_INT 81
8824: PUSH
8825: LD_INT 1
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 91
8834: PUSH
8835: LD_VAR 0 11
8839: PUSH
8840: LD_INT 10
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PPUSH
8852: CALL_OW 69
8856: NOT
8857: IFFALSE 8877
// SetTag ( i , tag + 1 ) ;
8859: LD_VAR 0 2
8863: PPUSH
8864: LD_VAR 0 4
8868: PUSH
8869: LD_INT 1
8871: PLUS
8872: PPUSH
8873: CALL_OW 109
// end else
8877: GO 8913
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8879: LD_VAR 0 11
8883: PPUSH
8884: LD_INT 81
8886: PUSH
8887: LD_INT 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 69
8898: PPUSH
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 74
8908: PPUSH
8909: CALL_OW 115
// end ; end ;
8913: GO 8219
8915: POP
8916: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8917: LD_EXP 47
8921: PPUSH
8922: LD_INT 52
8924: PUSH
8925: EMPTY
8926: LIST
8927: PPUSH
8928: CALL_OW 72
8932: NOT
8933: IFFALSE 7398
// end ;
8935: LD_VAR 0 1
8939: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8940: LD_INT 22
8942: PUSH
8943: LD_INT 1
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 32
8952: PUSH
8953: LD_INT 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PPUSH
8964: CALL_OW 69
8968: IFFALSE 9045
8970: GO 8972
8972: DISABLE
8973: LD_INT 0
8975: PPUSH
// begin enable ;
8976: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
8977: LD_ADDR_VAR 0 1
8981: PUSH
8982: LD_INT 22
8984: PUSH
8985: LD_INT 1
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: LD_INT 32
8994: PUSH
8995: LD_INT 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PPUSH
9006: CALL_OW 69
9010: PUSH
9011: FOR_IN
9012: IFFALSE 9043
// if GetFuel ( i ) < 10 then
9014: LD_VAR 0 1
9018: PPUSH
9019: CALL_OW 261
9023: PUSH
9024: LD_INT 10
9026: LESS
9027: IFFALSE 9041
// SetFuel ( i , 10 ) ;
9029: LD_VAR 0 1
9033: PPUSH
9034: LD_INT 10
9036: PPUSH
9037: CALL_OW 240
9041: GO 9011
9043: POP
9044: POP
// end ; end_of_file
9045: PPOPN 1
9047: END
// export function Action ; var hasAll , i , tmp ; begin
9048: LD_INT 0
9050: PPUSH
9051: PPUSH
9052: PPUSH
9053: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9054: LD_ADDR_VAR 0 2
9058: PUSH
9059: LD_INT 22
9061: PUSH
9062: LD_INT 2
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 21
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 23
9081: PUSH
9082: LD_INT 2
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: PPUSH
9094: CALL_OW 69
9098: PUSH
9099: LD_INT 7
9101: GREATEREQUAL
9102: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9103: LD_VAR 0 2
9107: PPUSH
9108: LD_STRING 03_HasAll
9110: PPUSH
9111: CALL_OW 39
// Video ( true ) ;
9115: LD_INT 1
9117: PPUSH
9118: CALL 73377 0 1
// CenterNowOnUnits ( Heike ) ;
9122: LD_EXP 28
9126: PPUSH
9127: CALL_OW 87
// wait ( 0 0$2 ) ;
9131: LD_INT 70
9133: PPUSH
9134: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9138: LD_EXP 36
9142: PPUSH
9143: LD_STRING DF-1-start
9145: PPUSH
9146: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9150: LD_EXP 28
9154: PPUSH
9155: LD_EXP 36
9159: PPUSH
9160: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9164: LD_EXP 28
9168: PPUSH
9169: LD_STRING DH-1-start
9171: PPUSH
9172: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9176: LD_EXP 37
9180: PPUSH
9181: LD_INT 92
9183: PPUSH
9184: LD_INT 21
9186: PPUSH
9187: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9191: LD_EXP 32
9195: PPUSH
9196: LD_INT 94
9198: PPUSH
9199: LD_INT 23
9201: PPUSH
9202: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9206: LD_EXP 40
9210: PUSH
9211: LD_INT 1
9213: ARRAY
9214: PPUSH
9215: LD_INT 90
9217: PPUSH
9218: LD_INT 23
9220: PPUSH
9221: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9225: LD_EXP 40
9229: PUSH
9230: LD_INT 2
9232: ARRAY
9233: PPUSH
9234: LD_INT 93
9236: PPUSH
9237: LD_INT 25
9239: PPUSH
9240: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9244: LD_EXP 40
9248: PPUSH
9249: LD_EXP 37
9253: PPUSH
9254: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9258: LD_EXP 37
9262: PUSH
9263: LD_EXP 32
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PPUSH
9272: LD_EXP 28
9276: PPUSH
9277: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9281: LD_EXP 28
9285: PPUSH
9286: LD_EXP 37
9290: PPUSH
9291: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9295: LD_INT 35
9297: PPUSH
9298: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9302: LD_EXP 37
9306: PPUSH
9307: LD_INT 92
9309: PPUSH
9310: LD_INT 21
9312: PPUSH
9313: CALL_OW 307
9317: IFFALSE 9295
// Say ( Omar , DO-1-start ) ;
9319: LD_EXP 37
9323: PPUSH
9324: LD_STRING DO-1-start
9326: PPUSH
9327: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9331: LD_EXP 28
9335: PPUSH
9336: LD_STRING DH-2-start
9338: PPUSH
9339: CALL_OW 88
// if hasAll then
9343: LD_VAR 0 2
9347: IFFALSE 9475
// begin Say ( Omar , DO-2-start ) ;
9349: LD_EXP 37
9353: PPUSH
9354: LD_STRING DO-2-start
9356: PPUSH
9357: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9361: LD_EXP 37
9365: PPUSH
9366: LD_STRING DO-3-start
9368: PPUSH
9369: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9373: LD_EXP 28
9377: PPUSH
9378: LD_STRING DH-3-start
9380: PPUSH
9381: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9385: LD_EXP 36
9389: PPUSH
9390: LD_STRING DF-2-start
9392: PPUSH
9393: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9397: LD_EXP 37
9401: PPUSH
9402: LD_EXP 36
9406: PPUSH
9407: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9411: LD_EXP 37
9415: PPUSH
9416: LD_STRING DO-4-start
9418: PPUSH
9419: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9423: LD_EXP 36
9427: PPUSH
9428: LD_STRING DF-3-start
9430: PPUSH
9431: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9435: LD_EXP 37
9439: PPUSH
9440: LD_STRING DO-5-start
9442: PPUSH
9443: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9447: LD_EXP 36
9451: PPUSH
9452: LD_STRING DF-4-start
9454: PPUSH
9455: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9459: LD_EXP 37
9463: PPUSH
9464: LD_EXP 28
9468: PPUSH
9469: CALL_OW 119
// end else
9473: GO 9575
// begin Say ( Omar , DO-2-start-a ) ;
9475: LD_EXP 37
9479: PPUSH
9480: LD_STRING DO-2-start-a
9482: PPUSH
9483: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9487: LD_EXP 37
9491: PPUSH
9492: LD_STRING DO-3-start-a
9494: PPUSH
9495: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9499: LD_EXP 28
9503: PPUSH
9504: LD_STRING DH-3-start-a
9506: PPUSH
9507: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9511: LD_EXP 36
9515: PPUSH
9516: LD_STRING DF-2-start-a
9518: PPUSH
9519: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9523: LD_EXP 37
9527: PPUSH
9528: LD_EXP 36
9532: PPUSH
9533: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9537: LD_EXP 37
9541: PPUSH
9542: LD_STRING DO-4-start-a
9544: PPUSH
9545: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9549: LD_EXP 36
9553: PPUSH
9554: LD_STRING DF-3-start-a
9556: PPUSH
9557: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9561: LD_EXP 37
9565: PPUSH
9566: LD_EXP 28
9570: PPUSH
9571: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9575: LD_INT 10
9577: PPUSH
9578: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9582: LD_EXP 37
9586: PPUSH
9587: LD_STRING DO-1-mission
9589: PPUSH
9590: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9594: LD_EXP 37
9598: PPUSH
9599: LD_STRING DO-2-mission
9601: PPUSH
9602: CALL_OW 88
// if not hasAll then
9606: LD_VAR 0 2
9610: NOT
9611: IFFALSE 9625
// Say ( Omar , DO-3-mission ) ;
9613: LD_EXP 37
9617: PPUSH
9618: LD_STRING DO-3-mission
9620: PPUSH
9621: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9625: LD_EXP 37
9629: PPUSH
9630: LD_STRING DO-4-mission
9632: PPUSH
9633: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9637: LD_EXP 28
9641: PPUSH
9642: LD_STRING DH-1-mission
9644: PPUSH
9645: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9649: LD_EXP 36
9653: PPUSH
9654: LD_STRING DF-1-mission
9656: PPUSH
9657: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9661: LD_EXP 37
9665: PPUSH
9666: LD_STRING DO-5-mission
9668: PPUSH
9669: CALL_OW 88
// if not hasAll then
9673: LD_VAR 0 2
9677: NOT
9678: IFFALSE 9813
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9680: LD_ADDR_VAR 0 4
9684: PUSH
9685: LD_INT 22
9687: PUSH
9688: LD_INT 2
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 21
9697: PUSH
9698: LD_INT 1
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 23
9707: PUSH
9708: LD_INT 2
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: LIST
9719: PPUSH
9720: CALL_OW 69
9724: ST_TO_ADDR
// for i := 7 downto tmp do
9725: LD_ADDR_VAR 0 3
9729: PUSH
9730: DOUBLE
9731: LD_INT 7
9733: INC
9734: ST_TO_ADDR
9735: LD_VAR 0 4
9739: PUSH
9740: FOR_DOWNTO
9741: IFFALSE 9811
// begin if omarSquad < 3 then
9743: LD_EXP 40
9747: PUSH
9748: LD_INT 3
9750: LESS
9751: IFFALSE 9755
// break ;
9753: GO 9811
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9755: LD_EXP 40
9759: PUSH
9760: LD_INT 3
9762: ARRAY
9763: PPUSH
9764: LD_INT 2
9766: PPUSH
9767: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9771: LD_ADDR_EXP 42
9775: PUSH
9776: LD_EXP 42
9780: PUSH
9781: LD_EXP 40
9785: PUSH
9786: LD_INT 3
9788: ARRAY
9789: UNION
9790: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9791: LD_ADDR_EXP 40
9795: PUSH
9796: LD_EXP 40
9800: PPUSH
9801: LD_INT 3
9803: PPUSH
9804: CALL_OW 3
9808: ST_TO_ADDR
// end ;
9809: GO 9740
9811: POP
9812: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9813: LD_EXP 37
9817: PUSH
9818: LD_EXP 40
9822: ADD
9823: PPUSH
9824: LD_INT 103
9826: PPUSH
9827: LD_INT 9
9829: PPUSH
9830: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9834: LD_VAR 0 2
9838: PUSH
9839: LD_EXP 33
9843: PPUSH
9844: CALL_OW 302
9848: AND
9849: IFFALSE 9910
// begin wait ( 0 0$3 ) ;
9851: LD_INT 105
9853: PPUSH
9854: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9858: LD_EXP 33
9862: PPUSH
9863: LD_EXP 36
9867: PPUSH
9868: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9872: LD_EXP 33
9876: PPUSH
9877: LD_STRING DK-1-side
9879: PPUSH
9880: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9884: LD_EXP 36
9888: PPUSH
9889: LD_EXP 33
9893: PPUSH
9894: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9898: LD_EXP 36
9902: PPUSH
9903: LD_STRING DF-1-side
9905: PPUSH
9906: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9910: LD_INT 22
9912: PUSH
9913: LD_INT 2
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PPUSH
9920: CALL_OW 69
9924: PPUSH
9925: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9929: LD_EXP 36
9933: PUSH
9934: LD_EXP 39
9938: ADD
9939: PPUSH
9940: LD_INT 108
9942: PPUSH
9943: LD_INT 62
9945: PPUSH
9946: CALL_OW 111
// gameStarted := true ;
9950: LD_ADDR_EXP 3
9954: PUSH
9955: LD_INT 1
9957: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9958: LD_INT 105
9960: PPUSH
9961: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9965: LD_EXP 28
9969: PPUSH
9970: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
9974: LD_EXP 28
9978: PPUSH
9979: LD_EXP 32
9983: PPUSH
9984: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
9988: LD_INT 22
9990: PUSH
9991: LD_INT 2
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PPUSH
9998: CALL_OW 69
10002: PUSH
10003: LD_EXP 28
10007: DIFF
10008: PPUSH
10009: LD_EXP 28
10013: PPUSH
10014: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10018: LD_EXP 28
10022: PPUSH
10023: LD_STRING DH-1-explore
10025: PPUSH
10026: CALL_OW 88
// if Givi then
10030: LD_EXP 29
10034: IFFALSE 10050
// Say ( Givi , DG-1-explore ) else
10036: LD_EXP 29
10040: PPUSH
10041: LD_STRING DG-1-explore
10043: PPUSH
10044: CALL_OW 88
10048: GO 10087
// if heikeSecondSquad then
10050: LD_EXP 42
10054: IFFALSE 10087
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10056: LD_EXP 42
10060: PPUSH
10061: LD_INT 26
10063: PUSH
10064: LD_INT 1
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL_OW 72
10075: PUSH
10076: LD_INT 1
10078: ARRAY
10079: PPUSH
10080: LD_STRING DArm-1-explore
10082: PPUSH
10083: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10087: LD_EXP 32
10091: PPUSH
10092: LD_STRING DA-1-explore
10094: PPUSH
10095: CALL_OW 88
// if Sophia then
10099: LD_EXP 34
10103: IFFALSE 10181
// begin Say ( Sophia , DS-2-explore ) ;
10105: LD_EXP 34
10109: PPUSH
10110: LD_STRING DS-2-explore
10112: PPUSH
10113: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10117: LD_EXP 32
10121: PPUSH
10122: LD_STRING DA-2-explore
10124: PPUSH
10125: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10129: LD_EXP 34
10133: PPUSH
10134: LD_EXP 32
10138: PPUSH
10139: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10143: LD_EXP 32
10147: PPUSH
10148: LD_EXP 34
10152: PPUSH
10153: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10157: LD_EXP 34
10161: PPUSH
10162: LD_STRING DS-3-explore
10164: PPUSH
10165: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10169: LD_EXP 32
10173: PPUSH
10174: LD_STRING DA-3-explore
10176: PPUSH
10177: CALL_OW 88
// end ; if Mike then
10181: LD_EXP 30
10185: IFFALSE 10241
// begin Say ( Mike , DM-1-explore ) ;
10187: LD_EXP 30
10191: PPUSH
10192: LD_STRING DM-1-explore
10194: PPUSH
10195: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10199: LD_EXP 28
10203: PPUSH
10204: LD_STRING DH-2-explore
10206: PPUSH
10207: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10211: LD_EXP 30
10215: PPUSH
10216: LD_STRING DM-2-explore
10218: PPUSH
10219: CALL_OW 88
// if Kaia then
10223: LD_EXP 33
10227: IFFALSE 10241
// Say ( Kaia , DK-1-explore ) ;
10229: LD_EXP 33
10233: PPUSH
10234: LD_STRING DK-1-explore
10236: PPUSH
10237: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10241: LD_INT 22
10243: PUSH
10244: LD_INT 2
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PPUSH
10251: CALL_OW 69
10255: PPUSH
10256: CALL_OW 139
// Video ( false ) ;
10260: LD_INT 0
10262: PPUSH
10263: CALL 73377 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10267: LD_STRING BuildBase
10269: PPUSH
10270: CALL_OW 337
// SaveForQuickRestart ;
10274: CALL_OW 22
// end ;
10278: LD_VAR 0 1
10282: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10283: LD_EXP 5
10287: NOT
10288: PUSH
10289: LD_EXP 6
10293: NOT
10294: AND
10295: PUSH
10296: LD_INT 5
10298: PPUSH
10299: LD_INT 22
10301: PUSH
10302: LD_INT 2
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PPUSH
10309: CALL_OW 70
10313: AND
10314: PUSH
10315: LD_EXP 6
10319: NOT
10320: AND
10321: IFFALSE 10406
10323: GO 10325
10325: DISABLE
// begin if Mike then
10326: LD_EXP 30
10330: IFFALSE 10346
// Say ( Mike , DM-1-scout ) else
10332: LD_EXP 30
10336: PPUSH
10337: LD_STRING DM-1-scout
10339: PPUSH
10340: CALL_OW 88
10344: GO 10377
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10346: LD_EXP 42
10350: PPUSH
10351: LD_INT 26
10353: PUSH
10354: LD_INT 1
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PPUSH
10361: CALL_OW 72
10365: PUSH
10366: LD_INT 1
10368: ARRAY
10369: PPUSH
10370: LD_STRING DArm-1-explore
10372: PPUSH
10373: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10377: LD_INT 54
10379: PPUSH
10380: LD_INT 35
10382: PPUSH
10383: LD_INT 2
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10393: LD_INT 54
10395: PPUSH
10396: LD_INT 35
10398: PPUSH
10399: LD_INT 2
10401: PPUSH
10402: CALL_OW 331
// end ;
10406: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10407: LD_INT 6
10409: PPUSH
10410: LD_INT 22
10412: PUSH
10413: LD_INT 2
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PPUSH
10420: CALL_OW 70
10424: PUSH
10425: LD_EXP 6
10429: NOT
10430: AND
10431: IFFALSE 10685
10433: GO 10435
10435: DISABLE
10436: LD_INT 0
10438: PPUSH
10439: PPUSH
10440: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10441: LD_ADDR_VAR 0 1
10445: PUSH
10446: LD_EXP 42
10450: PPUSH
10451: LD_INT 26
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PPUSH
10461: CALL_OW 72
10465: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10466: LD_ADDR_VAR 0 2
10470: PUSH
10471: LD_EXP 42
10475: PPUSH
10476: LD_INT 26
10478: PUSH
10479: LD_INT 2
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: CALL_OW 72
10490: ST_TO_ADDR
// DialogueOn ;
10491: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10495: LD_INT 36
10497: PPUSH
10498: LD_INT 22
10500: PPUSH
10501: LD_INT 2
10503: PPUSH
10504: LD_INT 8
10506: PPUSH
10507: CALL_OW 330
// dwait ( 0 0$1 ) ;
10511: LD_INT 35
10513: PPUSH
10514: CALL_OW 68
// speakerOk := false ;
10518: LD_ADDR_VAR 0 3
10522: PUSH
10523: LD_INT 0
10525: ST_TO_ADDR
// if Mike then
10526: LD_EXP 30
10530: IFFALSE 10552
// speakerOk := Say ( Mike , DM-1-spot ) else
10532: LD_ADDR_VAR 0 3
10536: PUSH
10537: LD_EXP 30
10541: PPUSH
10542: LD_STRING DM-1-spot
10544: PPUSH
10545: CALL_OW 88
10549: ST_TO_ADDR
10550: GO 10580
// if randomMen then
10552: LD_VAR 0 1
10556: IFFALSE 10580
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10558: LD_ADDR_VAR 0 3
10562: PUSH
10563: LD_VAR 0 1
10567: PUSH
10568: LD_INT 1
10570: ARRAY
10571: PPUSH
10572: LD_STRING DArm-1-spot-a
10574: PPUSH
10575: CALL_OW 88
10579: ST_TO_ADDR
// if speakerOk then
10580: LD_VAR 0 3
10584: IFFALSE 10628
// begin if Givi then
10586: LD_EXP 29
10590: IFFALSE 10606
// Say ( Givi , DG-1-spot ) else
10592: LD_EXP 29
10596: PPUSH
10597: LD_STRING DG-1-spot
10599: PPUSH
10600: CALL_OW 88
10604: GO 10628
// if randomWomen then
10606: LD_VAR 0 2
10610: IFFALSE 10628
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10612: LD_VAR 0 2
10616: PUSH
10617: LD_INT 1
10619: ARRAY
10620: PPUSH
10621: LD_STRING DArf-1-spot-a
10623: PPUSH
10624: CALL_OW 88
// end ; if Mike then
10628: LD_EXP 30
10632: IFFALSE 10648
// Say ( Heike , DH-1-spot ) else
10634: LD_EXP 28
10638: PPUSH
10639: LD_STRING DH-1-spot
10641: PPUSH
10642: CALL_OW 88
10646: GO 10660
// Say ( Heike , DH-1-spot-a ) ;
10648: LD_EXP 28
10652: PPUSH
10653: LD_STRING DH-1-spot-a
10655: PPUSH
10656: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10660: LD_INT 36
10662: PPUSH
10663: LD_INT 22
10665: PPUSH
10666: LD_INT 2
10668: PPUSH
10669: CALL_OW 331
// DialogueOff ;
10673: CALL_OW 7
// americanBaseSpoted := true ;
10677: LD_ADDR_EXP 5
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// end ;
10685: PPOPN 3
10687: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10688: LD_EXP 5
10692: NOT
10693: PUSH
10694: LD_INT 22
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 101
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 69
10722: AND
10723: PUSH
10724: LD_EXP 6
10728: NOT
10729: AND
10730: IFFALSE 10816
10732: GO 10734
10734: DISABLE
10735: LD_INT 0
10737: PPUSH
// begin americanBaseSpoted := true ;
10738: LD_ADDR_EXP 5
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10746: LD_ADDR_VAR 0 1
10750: PUSH
10751: LD_EXP 42
10755: PPUSH
10756: LD_INT 26
10758: PUSH
10759: LD_INT 1
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 72
10770: ST_TO_ADDR
// if not randomMen then
10771: LD_VAR 0 1
10775: NOT
10776: IFFALSE 10780
// exit ;
10778: GO 10816
// DialogueOn ;
10780: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10784: LD_VAR 0 1
10788: PUSH
10789: LD_INT 1
10791: ARRAY
10792: PPUSH
10793: LD_STRING DArm-1-spot-a
10795: PPUSH
10796: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10800: LD_EXP 28
10804: PPUSH
10805: LD_STRING DH-1-spot-a
10807: PPUSH
10808: CALL_OW 88
// DialogueOff ;
10812: CALL_OW 7
// end ;
10816: PPOPN 1
10818: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10819: LD_INT 11
10821: PPUSH
10822: CALL_OW 255
10826: PUSH
10827: LD_INT 2
10829: EQUAL
10830: PUSH
10831: LD_INT 7
10833: PPUSH
10834: LD_INT 22
10836: PUSH
10837: LD_INT 1
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 3
10846: PUSH
10847: LD_INT 50
10849: PUSH
10850: EMPTY
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 30
10859: PUSH
10860: LD_INT 31
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: PPUSH
10872: CALL_OW 70
10876: OR
10877: PUSH
10878: LD_INT 7
10880: PPUSH
10881: LD_INT 22
10883: PUSH
10884: LD_INT 2
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PPUSH
10891: CALL_OW 70
10895: PUSH
10896: LD_INT 1
10898: GREATER
10899: OR
10900: PUSH
10901: LD_EXP 44
10905: PUSH
10906: LD_INT 4
10908: LESSEQUAL
10909: OR
10910: IFFALSE 11489
10912: GO 10914
10914: DISABLE
10915: LD_INT 0
10917: PPUSH
10918: PPUSH
// begin wait ( 0 0$3 ) ;
10919: LD_INT 105
10921: PPUSH
10922: CALL_OW 67
// americanStartRun := true ;
10926: LD_ADDR_EXP 14
10930: PUSH
10931: LD_INT 1
10933: ST_TO_ADDR
// if IsOk ( usCommander ) then
10934: LD_EXP 45
10938: PPUSH
10939: CALL_OW 302
10943: IFFALSE 10973
// begin usForces := usForces union usCommander ;
10945: LD_ADDR_EXP 44
10949: PUSH
10950: LD_EXP 44
10954: PUSH
10955: LD_EXP 45
10959: UNION
10960: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
10961: LD_EXP 45
10965: PPUSH
10966: LD_STRING DUsm-1-assault
10968: PPUSH
10969: CALL_OW 88
// end ; for i in usForces do
10973: LD_ADDR_VAR 0 1
10977: PUSH
10978: LD_EXP 44
10982: PUSH
10983: FOR_IN
10984: IFFALSE 11030
// begin if IsInUnit ( i ) then
10986: LD_VAR 0 1
10990: PPUSH
10991: CALL_OW 310
10995: IFFALSE 11006
// ComExitBuilding ( i ) ;
10997: LD_VAR 0 1
11001: PPUSH
11002: CALL_OW 122
// wait ( 3 ) ;
11006: LD_INT 3
11008: PPUSH
11009: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11013: LD_VAR 0 1
11017: PPUSH
11018: LD_INT 34
11020: PPUSH
11021: LD_INT 67
11023: PPUSH
11024: CALL_OW 111
// end ;
11028: GO 10983
11030: POP
11031: POP
// Say ( Heike , DH-1-assault ) ;
11032: LD_EXP 28
11036: PPUSH
11037: LD_STRING DH-1-assault
11039: PPUSH
11040: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11044: LD_INT 35
11046: PPUSH
11047: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11051: LD_VAR 0 1
11055: PPUSH
11056: LD_INT 34
11058: PPUSH
11059: LD_INT 67
11061: PPUSH
11062: CALL_OW 111
// until not usForces ;
11066: LD_EXP 44
11070: NOT
11071: IFFALSE 11044
// music_nat := 2 ;
11073: LD_ADDR_OWVAR 71
11077: PUSH
11078: LD_INT 2
11080: ST_TO_ADDR
// music_class := music_victory ;
11081: LD_ADDR_OWVAR 72
11085: PUSH
11086: LD_INT 4
11088: ST_TO_ADDR
// if not americanHasEscaped then
11089: LD_EXP 8
11093: NOT
11094: IFFALSE 11115
// begin Say ( Heike , DH-2-assault ) ;
11096: LD_EXP 28
11100: PPUSH
11101: LD_STRING DH-2-assault
11103: PPUSH
11104: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11108: LD_STRING ACH_CLEAN
11110: PPUSH
11111: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11115: LD_INT 70
11117: PPUSH
11118: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11122: LD_INT 35
11124: PPUSH
11125: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11129: LD_INT 22
11131: PUSH
11132: LD_INT 2
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 21
11141: PUSH
11142: LD_INT 1
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 3
11151: PUSH
11152: LD_INT 50
11154: PUSH
11155: EMPTY
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: PPUSH
11167: CALL_OW 69
11171: NOT
11172: IFFALSE 11122
// InGameOn ;
11174: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11178: LD_INT 11
11180: PPUSH
11181: CALL_OW 255
11185: PUSH
11186: LD_INT 2
11188: EQUAL
11189: NOT
11190: IFFALSE 11202
// SetSide ( usDepot , 2 ) ;
11192: LD_INT 11
11194: PPUSH
11195: LD_INT 2
11197: PPUSH
11198: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11202: LD_INT 35
11204: PPUSH
11205: LD_INT 22
11207: PPUSH
11208: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11212: LD_EXP 28
11216: PPUSH
11217: LD_INT 35
11219: PPUSH
11220: LD_INT 22
11222: PPUSH
11223: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11227: LD_EXP 28
11231: PPUSH
11232: LD_INT 38
11234: PPUSH
11235: LD_INT 25
11237: PPUSH
11238: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11242: LD_EXP 41
11246: PUSH
11247: LD_EXP 42
11251: UNION
11252: PPUSH
11253: LD_INT 39
11255: PPUSH
11256: LD_INT 26
11258: PPUSH
11259: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11263: LD_EXP 41
11267: PUSH
11268: LD_EXP 42
11272: UNION
11273: PPUSH
11274: LD_EXP 28
11278: PPUSH
11279: CALL_OW 179
// p := 0 ;
11283: LD_ADDR_VAR 0 2
11287: PUSH
11288: LD_INT 0
11290: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11291: LD_INT 35
11293: PPUSH
11294: CALL_OW 67
// p := p + 1 ;
11298: LD_ADDR_VAR 0 2
11302: PUSH
11303: LD_VAR 0 2
11307: PUSH
11308: LD_INT 1
11310: PLUS
11311: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11312: LD_EXP 28
11316: PPUSH
11317: CALL_OW 314
11321: NOT
11322: PUSH
11323: LD_VAR 0 2
11327: PUSH
11328: LD_INT 10
11330: GREATER
11331: OR
11332: IFFALSE 11291
// Say ( Heike , DH-1-capture ) ;
11334: LD_EXP 28
11338: PPUSH
11339: LD_STRING DH-1-capture
11341: PPUSH
11342: CALL_OW 88
// if Markov then
11346: LD_EXP 35
11350: IFFALSE 11364
// Say ( Markov , DMar-1-capture ) ;
11352: LD_EXP 35
11356: PPUSH
11357: LD_STRING DMar-1-capture
11359: PPUSH
11360: CALL_OW 88
// if Sophia then
11364: LD_EXP 34
11368: IFFALSE 11394
// begin Say ( Heike , DH-2-capture ) ;
11370: LD_EXP 28
11374: PPUSH
11375: LD_STRING DH-2-capture
11377: PPUSH
11378: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11382: LD_EXP 34
11386: PPUSH
11387: LD_STRING DS-1-capture
11389: PPUSH
11390: CALL_OW 88
// end ; InGameOff ;
11394: CALL_OW 9
// music_nat := music_auto ;
11398: LD_ADDR_OWVAR 71
11402: PUSH
11403: LD_INT 0
11405: ST_TO_ADDR
// music_class := music_auto ;
11406: LD_ADDR_OWVAR 72
11410: PUSH
11411: LD_INT 0
11413: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11414: LD_STRING ConstructBase
11416: PPUSH
11417: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11421: LD_ADDR_VAR 0 1
11425: PUSH
11426: LD_INT 22
11428: PUSH
11429: LD_INT 1
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 21
11438: PUSH
11439: LD_INT 3
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: FOR_IN
11456: IFFALSE 11472
// SetSide ( i , 2 ) ;
11458: LD_VAR 0 1
11462: PPUSH
11463: LD_INT 2
11465: PPUSH
11466: CALL_OW 235
11470: GO 11455
11472: POP
11473: POP
// wait ( 0 0$3 ) ;
11474: LD_INT 105
11476: PPUSH
11477: CALL_OW 67
// americanBaseCaptured := true ;
11481: LD_ADDR_EXP 6
11485: PUSH
11486: LD_INT 1
11488: ST_TO_ADDR
// end ;
11489: PPOPN 2
11491: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11492: LD_EXP 13
11496: PUSH
11497: LD_INT 3
11499: GREATEREQUAL
11500: IFFALSE 11512
11502: GO 11504
11504: DISABLE
// SetAchievement ( ACH_ENG ) ;
11505: LD_STRING ACH_ENG
11507: PPUSH
11508: CALL_OW 543
11512: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11513: LD_INT 22
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 25
11525: PUSH
11526: LD_INT 15
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 69
11541: PUSH
11542: LD_INT 4
11544: GREATEREQUAL
11545: IFFALSE 11557
11547: GO 11549
11549: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11550: LD_STRING ACH_APEGEN
11552: PPUSH
11553: CALL_OW 543
11557: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11558: LD_INT 22
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 30
11570: PUSH
11571: LD_INT 2
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 3
11580: PUSH
11581: LD_INT 57
11583: PUSH
11584: EMPTY
11585: LIST
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: PPUSH
11596: CALL_OW 69
11600: IFFALSE 11843
11602: GO 11604
11604: DISABLE
// begin workshopBuilded := true ;
11605: LD_ADDR_EXP 10
11609: PUSH
11610: LD_INT 1
11612: ST_TO_ADDR
// if IsOk ( Markov ) then
11613: LD_EXP 35
11617: PPUSH
11618: CALL_OW 302
11622: IFFALSE 11681
// begin Say ( Heike , DH-1-shop-a ) ;
11624: LD_EXP 28
11628: PPUSH
11629: LD_STRING DH-1-shop-a
11631: PPUSH
11632: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11636: LD_INT 47
11638: PPUSH
11639: LD_INT 2
11641: PPUSH
11642: CALL_OW 321
11646: PUSH
11647: LD_INT 2
11649: EQUAL
11650: PUSH
11651: LD_INT 45
11653: PPUSH
11654: LD_INT 2
11656: PPUSH
11657: CALL_OW 321
11661: PUSH
11662: LD_INT 2
11664: EQUAL
11665: AND
11666: NOT
11667: IFFALSE 11681
// Say ( Markov , DMar-1-shop-a ) ;
11669: LD_EXP 35
11673: PPUSH
11674: LD_STRING DMar-1-shop-a
11676: PPUSH
11677: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11681: LD_INT 35
11683: PPUSH
11684: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11688: LD_INT 47
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: CALL_OW 321
11698: PUSH
11699: LD_INT 2
11701: EQUAL
11702: PUSH
11703: LD_INT 45
11705: PPUSH
11706: LD_INT 2
11708: PPUSH
11709: CALL_OW 321
11713: PUSH
11714: LD_INT 2
11716: EQUAL
11717: OR
11718: IFFALSE 11681
// DialogueOn ;
11720: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11724: LD_EXP 35
11728: PPUSH
11729: LD_STRING DMar-1-shop
11731: PPUSH
11732: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11736: LD_EXP 28
11740: PPUSH
11741: LD_STRING DH-1-shop
11743: PPUSH
11744: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11748: LD_EXP 35
11752: PPUSH
11753: LD_STRING DMar-2-shop
11755: PPUSH
11756: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11760: LD_EXP 35
11764: PPUSH
11765: LD_STRING DMar-3-shop
11767: PPUSH
11768: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11772: LD_EXP 28
11776: PPUSH
11777: LD_STRING DH-2-shop
11779: PPUSH
11780: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11784: LD_EXP 35
11788: PPUSH
11789: LD_STRING DMar-4-shop
11791: PPUSH
11792: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11796: LD_EXP 28
11800: PPUSH
11801: LD_STRING DH-3-shop
11803: PPUSH
11804: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11808: LD_EXP 35
11812: PPUSH
11813: LD_STRING DMar-5-shop
11815: PPUSH
11816: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11820: LD_EXP 28
11824: PPUSH
11825: LD_STRING DH-4-shop
11827: PPUSH
11828: CALL_OW 88
// DialogueOff ;
11832: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
11836: LD_STRING ConstructVeh
11838: PPUSH
11839: CALL_OW 337
// end ;
11843: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11844: LD_INT 2
11846: PPUSH
11847: LD_INT 2
11849: PPUSH
11850: LD_INT 1
11852: PPUSH
11853: CALL 36731 0 3
11857: PUSH
11858: LD_INT 0
11860: EQUAL
11861: IFFALSE 11873
11863: GO 11865
11865: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11866: LD_STRING Techs
11868: PPUSH
11869: CALL_OW 337
11873: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11874: LD_EXP 35
11878: PPUSH
11879: CALL_OW 302
11883: PUSH
11884: LD_INT 22
11886: PUSH
11887: LD_INT 2
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: LD_INT 2
11896: PUSH
11897: LD_INT 34
11899: PUSH
11900: LD_INT 22
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 35
11909: PUSH
11910: LD_INT 22
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PPUSH
11926: CALL_OW 69
11930: AND
11931: IFFALSE 12038
11933: GO 11935
11935: DISABLE
// begin DialogueOn ;
11936: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
11940: LD_INT 22
11942: PUSH
11943: LD_INT 2
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 2
11952: PUSH
11953: LD_INT 34
11955: PUSH
11956: LD_INT 22
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 35
11965: PUSH
11966: LD_INT 22
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PPUSH
11982: CALL_OW 69
11986: PPUSH
11987: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11991: LD_INT 10
11993: PPUSH
11994: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
11998: LD_EXP 28
12002: PPUSH
12003: LD_STRING DH-1-bal
12005: PPUSH
12006: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12010: LD_EXP 35
12014: PPUSH
12015: LD_STRING DMar-1-bal
12017: PPUSH
12018: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12022: LD_EXP 28
12026: PPUSH
12027: LD_STRING DH-2-bal
12029: PPUSH
12030: CALL_OW 88
// DialogueOff ;
12034: CALL_OW 7
// end ;
12038: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12039: LD_EXP 32
12043: PPUSH
12044: CALL_OW 302
12048: PUSH
12049: LD_INT 22
12051: PUSH
12052: LD_INT 2
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 30
12061: PUSH
12062: LD_INT 6
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 69
12077: AND
12078: IFFALSE 12139
12080: GO 12082
12082: DISABLE
// begin DialogueOn ;
12083: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12087: LD_EXP 32
12091: PPUSH
12092: LD_STRING DA-1-lab
12094: PPUSH
12095: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12099: LD_EXP 28
12103: PPUSH
12104: LD_STRING DH-1-lab
12106: PPUSH
12107: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12111: LD_EXP 32
12115: PPUSH
12116: LD_STRING DA-2-lab
12118: PPUSH
12119: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12123: LD_EXP 28
12127: PPUSH
12128: LD_STRING DH-2-lab
12130: PPUSH
12131: CALL_OW 88
// DialogueOff ;
12135: CALL_OW 7
// end ;
12139: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12140: LD_EXP 33
12144: PPUSH
12145: CALL_OW 302
12149: PUSH
12150: LD_INT 22
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 25
12162: PUSH
12163: LD_INT 15
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PPUSH
12174: CALL_OW 69
12178: AND
12179: PUSH
12180: LD_INT 81
12182: PUSH
12183: LD_INT 2
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PPUSH
12190: CALL_OW 69
12194: NOT
12195: AND
12196: IFFALSE 12378
12198: GO 12200
12200: DISABLE
12201: LD_INT 0
12203: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12204: LD_ADDR_VAR 0 1
12208: PUSH
12209: LD_INT 22
12211: PUSH
12212: LD_INT 2
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 25
12221: PUSH
12222: LD_INT 15
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PPUSH
12233: CALL_OW 69
12237: ST_TO_ADDR
// InGameOn ;
12238: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12242: LD_VAR 0 1
12246: PUSH
12247: LD_INT 1
12249: ARRAY
12250: PPUSH
12251: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12255: LD_VAR 0 1
12259: PUSH
12260: LD_INT 1
12262: ARRAY
12263: PPUSH
12264: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12268: LD_EXP 33
12272: PPUSH
12273: LD_STRING DK-1-apesol
12275: PPUSH
12276: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12280: LD_VAR 0 1
12284: PUSH
12285: LD_INT 1
12287: ARRAY
12288: PPUSH
12289: LD_INT 35
12291: PPUSH
12292: LD_INT 28
12294: PPUSH
12295: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12299: LD_VAR 0 1
12303: PUSH
12304: LD_INT 1
12306: ARRAY
12307: PPUSH
12308: LD_INT 36
12310: PPUSH
12311: LD_INT 17
12313: PPUSH
12314: CALL_OW 171
// DialogueOn ;
12318: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12322: LD_EXP 32
12326: PPUSH
12327: LD_STRING DA-1-apesol
12329: PPUSH
12330: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12334: LD_EXP 33
12338: PPUSH
12339: LD_STRING DK-2-apesol
12341: PPUSH
12342: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12346: LD_EXP 32
12350: PPUSH
12351: LD_STRING DA-2-apesol
12353: PPUSH
12354: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12358: LD_EXP 33
12362: PPUSH
12363: LD_STRING DK-3-apesol
12365: PPUSH
12366: CALL_OW 88
// DialogueOff ;
12370: CALL_OW 7
// InGameOff ;
12374: CALL_OW 9
// end ;
12378: PPOPN 1
12380: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12381: LD_EXP 34
12385: PPUSH
12386: CALL_OW 302
12390: PUSH
12391: LD_INT 22
12393: PUSH
12394: LD_INT 2
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 25
12403: PUSH
12404: LD_INT 16
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PPUSH
12415: CALL_OW 69
12419: AND
12420: PUSH
12421: LD_INT 81
12423: PUSH
12424: LD_INT 2
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PPUSH
12431: CALL_OW 69
12435: NOT
12436: AND
12437: IFFALSE 12722
12439: GO 12441
12441: DISABLE
12442: LD_INT 0
12444: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12445: LD_ADDR_VAR 0 1
12449: PUSH
12450: LD_INT 22
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 25
12462: PUSH
12463: LD_INT 16
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PPUSH
12474: CALL_OW 69
12478: ST_TO_ADDR
// InGameOn ;
12479: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12483: LD_INT 35
12485: PPUSH
12486: LD_INT 22
12488: PPUSH
12489: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12493: LD_INT 5
12495: PPUSH
12496: LD_INT 35
12498: PPUSH
12499: LD_INT 22
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12509: LD_EXP 34
12513: PPUSH
12514: LD_VAR 0 1
12518: PUSH
12519: LD_INT 1
12521: ARRAY
12522: PPUSH
12523: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12527: LD_VAR 0 1
12531: PUSH
12532: LD_INT 1
12534: ARRAY
12535: PPUSH
12536: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12540: LD_VAR 0 1
12544: PUSH
12545: LD_INT 1
12547: ARRAY
12548: PPUSH
12549: CALL_OW 122
// wait ( 0 0$2 ) ;
12553: LD_INT 70
12555: PPUSH
12556: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12560: LD_EXP 34
12564: PPUSH
12565: LD_STRING DS-1-apeeng
12567: PPUSH
12568: CALL_OW 88
// if IsOk ( Kamil ) then
12572: LD_EXP 31
12576: PPUSH
12577: CALL_OW 302
12581: IFFALSE 12718
// begin Say ( Kamil , DKam-1-apeeng ) ;
12583: LD_EXP 31
12587: PPUSH
12588: LD_STRING DKam-1-apeeng
12590: PPUSH
12591: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12595: LD_EXP 34
12599: PPUSH
12600: LD_STRING DS-2-apeeng
12602: PPUSH
12603: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12607: LD_EXP 31
12611: PPUSH
12612: LD_STRING DKam-2-apeeng
12614: PPUSH
12615: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12619: LD_EXP 34
12623: PPUSH
12624: LD_STRING DS-3-apeeng
12626: PPUSH
12627: CALL_OW 88
// if not IsOK ( Kaia ) then
12631: LD_EXP 33
12635: PPUSH
12636: CALL_OW 302
12640: NOT
12641: IFFALSE 12649
// begin InGameOff ;
12643: CALL_OW 9
// exit ;
12647: GO 12722
// end ; Say ( Kaia , DK-1-apeeng ) ;
12649: LD_EXP 33
12653: PPUSH
12654: LD_STRING DK-1-apeeng
12656: PPUSH
12657: CALL_OW 88
// if not IsOk ( Givi ) then
12661: LD_EXP 29
12665: PPUSH
12666: CALL_OW 302
12670: NOT
12671: IFFALSE 12682
// begin Video ( false ) ;
12673: LD_INT 0
12675: PPUSH
12676: CALL 73377 0 1
// exit ;
12680: GO 12722
// end ; Say ( Givi , DG-1-apeeng ) ;
12682: LD_EXP 29
12686: PPUSH
12687: LD_STRING DG-1-apeeng
12689: PPUSH
12690: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12694: LD_EXP 33
12698: PPUSH
12699: LD_STRING DK-2-apeeng
12701: PPUSH
12702: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
12706: LD_EXP 33
12710: PPUSH
12711: LD_STRING DK-3-apeeng
12713: PPUSH
12714: CALL_OW 88
// end ; InGameOff ;
12718: CALL_OW 9
// end ;
12722: PPOPN 1
12724: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12725: LD_EXP 4
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 30
12742: PUSH
12743: LD_INT 0
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PPUSH
12754: CALL_OW 69
12758: AND
12759: IFFALSE 12924
12761: GO 12763
12763: DISABLE
// begin wait ( 0 0$10 ) ;
12764: LD_INT 350
12766: PPUSH
12767: CALL_OW 67
// DialogueOn ;
12771: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12775: LD_EXP 36
12779: PPUSH
12780: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12784: LD_EXP 36
12788: PPUSH
12789: LD_STRING DF-1-distribution
12791: PPUSH
12792: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12796: LD_EXP 28
12800: PPUSH
12801: LD_STRING DH-2-distribution
12803: PPUSH
12804: CALL_OW 88
// if IsOk ( Kaia ) then
12808: LD_EXP 33
12812: PPUSH
12813: CALL_OW 302
12817: IFFALSE 12878
// begin Say ( Kaia , DK-1-distribution ) ;
12819: LD_EXP 33
12823: PPUSH
12824: LD_STRING DK-1-distribution
12826: PPUSH
12827: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12831: LD_EXP 28
12835: PPUSH
12836: LD_STRING DH-1-distribution
12838: PPUSH
12839: CALL_OW 88
// if IsOk ( Givi ) then
12843: LD_EXP 29
12847: PPUSH
12848: CALL_OW 302
12852: IFFALSE 12878
// begin Say ( Givi , DG-1-distribution ) ;
12854: LD_EXP 29
12858: PPUSH
12859: LD_STRING DG-1-distribution
12861: PPUSH
12862: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12866: LD_EXP 28
12870: PPUSH
12871: LD_STRING DH-3-distribution
12873: PPUSH
12874: CALL_OW 88
// end ; end ; DialogueOff ;
12878: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12882: LD_STRING Crates1
12884: PPUSH
12885: CALL_OW 337
// farmerRequestedCrates := 300 ;
12889: LD_ADDR_EXP 16
12893: PUSH
12894: LD_INT 300
12896: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12897: LD_STRING FarmerCrates
12899: PPUSH
12900: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12904: LD_INT 10
12906: PPUSH
12907: LD_INT 1
12909: PPUSH
12910: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12914: LD_INT 108
12916: PPUSH
12917: LD_INT 61
12919: PPUSH
12920: CALL_OW 86
// end ;
12924: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12925: LD_EXP 6
12929: PUSH
12930: LD_INT 22
12932: PUSH
12933: LD_INT 2
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: LD_INT 3
12942: PUSH
12943: LD_INT 57
12945: PUSH
12946: EMPTY
12947: LIST
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: LD_INT 30
12958: PUSH
12959: LD_INT 6
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 30
12968: PUSH
12969: LD_INT 7
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: PPUSH
12986: CALL_OW 69
12990: AND
12991: PUSH
12992: LD_INT 22
12994: PUSH
12995: LD_INT 2
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 3
13004: PUSH
13005: LD_INT 57
13007: PUSH
13008: EMPTY
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 30
13017: PUSH
13018: LD_INT 4
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: AND
13035: IFFALSE 13199
13037: GO 13039
13039: DISABLE
13040: LD_INT 0
13042: PPUSH
// begin wait ( 0 0$10 ) ;
13043: LD_INT 350
13045: PPUSH
13046: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13050: LD_ADDR_VAR 0 1
13054: PUSH
13055: LD_EXP 42
13059: PPUSH
13060: LD_INT 26
13062: PUSH
13063: LD_INT 1
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 25
13072: PUSH
13073: LD_INT 2
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 72
13088: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13089: LD_EXP 28
13093: PPUSH
13094: LD_STRING DH-1-task
13096: PPUSH
13097: CALL_OW 88
// if IsOk ( Sophia ) then
13101: LD_EXP 34
13105: PPUSH
13106: CALL_OW 302
13110: IFFALSE 13150
// begin Say ( Sophia , DS-1-task ) ;
13112: LD_EXP 34
13116: PPUSH
13117: LD_STRING DS-1-task
13119: PPUSH
13120: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13124: LD_EXP 34
13128: PPUSH
13129: LD_STRING DS-2-task
13131: PPUSH
13132: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13136: LD_EXP 28
13140: PPUSH
13141: LD_STRING DH-2-task
13143: PPUSH
13144: CALL_OW 88
// end else
13148: GO 13184
// if eng then
13150: LD_VAR 0 1
13154: IFFALSE 13184
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13156: LD_VAR 0 1
13160: PUSH
13161: LD_INT 1
13163: ARRAY
13164: PPUSH
13165: LD_STRING DArm-1-task
13167: PPUSH
13168: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13172: LD_EXP 28
13176: PPUSH
13177: LD_STRING DH-2-task
13179: PPUSH
13180: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13184: LD_STRING BaseConstructed
13186: PPUSH
13187: CALL_OW 337
// allowConvoys := true ;
13191: LD_ADDR_EXP 12
13195: PUSH
13196: LD_INT 1
13198: ST_TO_ADDR
// end ;
13199: PPOPN 1
13201: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13202: LD_INT 22
13204: PUSH
13205: LD_INT 4
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 34
13214: PUSH
13215: LD_INT 12
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PPUSH
13226: CALL_OW 69
13230: IFFALSE 13398
13232: GO 13234
13234: DISABLE
13235: LD_INT 0
13237: PPUSH
13238: PPUSH
13239: PPUSH
// begin wait ( 0 0$2 ) ;
13240: LD_INT 70
13242: PPUSH
13243: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13247: LD_ADDR_VAR 0 1
13251: PUSH
13252: LD_INT 22
13254: PUSH
13255: LD_INT 4
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 34
13264: PUSH
13265: LD_INT 12
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PPUSH
13276: CALL_OW 69
13280: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13281: LD_ADDR_VAR 0 2
13285: PUSH
13286: LD_VAR 0 1
13290: PUSH
13291: LD_INT 1
13293: ARRAY
13294: PPUSH
13295: CALL_OW 250
13299: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13300: LD_ADDR_VAR 0 3
13304: PUSH
13305: LD_VAR 0 1
13309: PUSH
13310: LD_INT 1
13312: ARRAY
13313: PPUSH
13314: CALL_OW 251
13318: ST_TO_ADDR
// DialogueOn ;
13319: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13323: LD_VAR 0 2
13327: PPUSH
13328: LD_VAR 0 3
13332: PPUSH
13333: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13337: LD_VAR 0 2
13341: PPUSH
13342: LD_VAR 0 3
13346: PPUSH
13347: LD_INT 2
13349: PPUSH
13350: LD_INT 6
13352: NEG
13353: PPUSH
13354: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13358: LD_INT 10
13360: PPUSH
13361: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13365: LD_EXP 28
13369: PPUSH
13370: LD_STRING DH-1-seecargo
13372: PPUSH
13373: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13377: LD_VAR 0 2
13381: PPUSH
13382: LD_VAR 0 3
13386: PPUSH
13387: LD_INT 2
13389: PPUSH
13390: CALL_OW 331
// DialogueOff ;
13394: CALL_OW 7
// end ;
13398: PPOPN 3
13400: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13401: LD_EXP 4
13405: PUSH
13406: LD_EXP 15
13410: PUSH
13411: LD_INT 300
13413: GREATEREQUAL
13414: AND
13415: IFFALSE 13487
13417: GO 13419
13419: DISABLE
// begin DialogueOn ;
13420: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13424: LD_EXP 36
13428: PPUSH
13429: LD_STRING DF-1-delivery-2
13431: PPUSH
13432: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13436: LD_EXP 28
13440: PPUSH
13441: LD_STRING DH-1-delivery-2
13443: PPUSH
13444: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13448: LD_EXP 36
13452: PPUSH
13453: LD_STRING DF-2-delivery-2
13455: PPUSH
13456: CALL_OW 94
// DialogueOff ;
13460: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13464: LD_STRING Crates2
13466: PPUSH
13467: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13471: LD_ADDR_EXP 17
13475: PUSH
13476: LD_INT 63000
13478: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13479: LD_ADDR_EXP 16
13483: PUSH
13484: LD_INT 600
13486: ST_TO_ADDR
// end ;
13487: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13488: LD_EXP 4
13492: PUSH
13493: LD_EXP 15
13497: PUSH
13498: LD_INT 600
13500: GREATEREQUAL
13501: AND
13502: PUSH
13503: LD_OWVAR 67
13507: PUSH
13508: LD_INT 1
13510: GREATER
13511: AND
13512: IFFALSE 13678
13514: GO 13516
13516: DISABLE
// begin DialogueOn ;
13517: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13521: LD_EXP 36
13525: PPUSH
13526: LD_STRING DF-1-delivery-3
13528: PPUSH
13529: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13533: LD_EXP 28
13537: PPUSH
13538: LD_STRING DH-1-delivery-3
13540: PPUSH
13541: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13545: LD_EXP 36
13549: PPUSH
13550: LD_STRING DF-2-delivery-3
13552: PPUSH
13553: CALL_OW 94
// if IsOk ( Kaia ) then
13557: LD_EXP 33
13561: PPUSH
13562: CALL_OW 302
13566: IFFALSE 13616
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13568: LD_EXP 33
13572: PPUSH
13573: LD_STRING DK-1-delivery-3
13575: PPUSH
13576: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13580: LD_EXP 28
13584: PPUSH
13585: LD_STRING DH-2-delivery-3
13587: PPUSH
13588: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13592: LD_EXP 29
13596: PPUSH
13597: LD_STRING DG-1-delivery-3
13599: PPUSH
13600: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13604: LD_EXP 30
13608: PPUSH
13609: LD_STRING DM-1-delivery-3
13611: PPUSH
13612: CALL_OW 88
// end ; DialogueOff ;
13616: CALL_OW 7
// if Difficulty = 2 then
13620: LD_OWVAR 67
13624: PUSH
13625: LD_INT 2
13627: EQUAL
13628: IFFALSE 13655
// begin ChangeMissionObjectives ( Crates3 ) ;
13630: LD_STRING Crates3
13632: PPUSH
13633: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13637: LD_ADDR_EXP 17
13641: PUSH
13642: LD_INT 63000
13644: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13645: LD_ADDR_EXP 16
13649: PUSH
13650: LD_INT 900
13652: ST_TO_ADDR
// end else
13653: GO 13678
// begin ChangeMissionObjectives ( Crates4 ) ;
13655: LD_STRING Crates4
13657: PPUSH
13658: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13662: LD_ADDR_EXP 17
13666: PUSH
13667: LD_INT 63000
13669: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13670: LD_ADDR_EXP 16
13674: PUSH
13675: LD_INT 1200
13677: ST_TO_ADDR
// end ; end ;
13678: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13679: LD_EXP 4
13683: PUSH
13684: LD_EXP 15
13688: PUSH
13689: LD_INT 600
13691: PUSH
13692: LD_INT 900
13694: PUSH
13695: LD_INT 1200
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: LD_OWVAR 67
13707: ARRAY
13708: GREATEREQUAL
13709: AND
13710: PUSH
13711: LD_EXP 16
13715: PUSH
13716: LD_EXP 17
13720: LESSEQUAL
13721: AND
13722: IFFALSE 13808
13724: GO 13726
13726: DISABLE
// begin retreatAllowed := true ;
13727: LD_ADDR_EXP 11
13731: PUSH
13732: LD_INT 1
13734: ST_TO_ADDR
// display_strings := [ ] ;
13735: LD_ADDR_OWVAR 47
13739: PUSH
13740: EMPTY
13741: ST_TO_ADDR
// DialogueOn ;
13742: CALL_OW 6
// InGameOn ;
13746: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13750: LD_EXP 37
13754: PPUSH
13755: LD_STRING DO-radio-end
13757: PPUSH
13758: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13762: LD_EXP 28
13766: PPUSH
13767: LD_STRING DH-1-radio-end
13769: PPUSH
13770: CALL_OW 88
// InGameOff ;
13774: CALL_OW 9
// DialogueOff ;
13778: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13782: LD_STRING Retreat
13784: PPUSH
13785: CALL_OW 337
// wait ( 0 0$2 ) ;
13789: LD_INT 70
13791: PPUSH
13792: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
13796: LD_EXP 28
13800: PPUSH
13801: LD_STRING DH-2-radio-end
13803: PPUSH
13804: CALL_OW 88
// end ;
13808: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13809: LD_EXP 11
13813: IFFALSE 13944
13815: GO 13817
13817: DISABLE
13818: LD_INT 0
13820: PPUSH
13821: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13822: LD_INT 10
13824: PPUSH
13825: LD_INT 0
13827: PPUSH
13828: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13832: LD_ADDR_VAR 0 1
13836: PUSH
13837: LD_EXP 39
13841: PPUSH
13842: LD_INT 25
13844: PUSH
13845: LD_INT 2
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PPUSH
13852: CALL_OW 72
13856: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13857: LD_VAR 0 1
13861: PUSH
13862: LD_INT 102
13864: PPUSH
13865: LD_INT 69
13867: PPUSH
13868: CALL_OW 428
13872: PUSH
13873: LD_INT 0
13875: EQUAL
13876: AND
13877: IFFALSE 13944
// begin for i in tmp do
13879: LD_ADDR_VAR 0 2
13883: PUSH
13884: LD_VAR 0 1
13888: PUSH
13889: FOR_IN
13890: IFFALSE 13914
// if IsInUnit ( i ) then
13892: LD_VAR 0 2
13896: PPUSH
13897: CALL_OW 310
13901: IFFALSE 13912
// ComExitBuilding ( i ) ;
13903: LD_VAR 0 2
13907: PPUSH
13908: CALL_OW 122
13912: GO 13889
13914: POP
13915: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13916: LD_VAR 0 1
13920: PPUSH
13921: LD_INT 31
13923: PPUSH
13924: LD_INT 102
13926: PPUSH
13927: LD_INT 69
13929: PPUSH
13930: LD_INT 2
13932: PPUSH
13933: CALL_OW 205
// wait ( 0 0$3 ) ;
13937: LD_INT 105
13939: PPUSH
13940: CALL_OW 67
// end ; end ;
13944: PPOPN 2
13946: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13947: LD_EXP 11
13951: NOT
13952: PUSH
13953: LD_INT 5
13955: PPUSH
13956: CALL_OW 301
13960: AND
13961: IFFALSE 13993
13963: GO 13965
13965: DISABLE
// begin DialogueOn ;
13966: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
13970: LD_EXP 36
13974: PPUSH
13975: LD_STRING DF-1-failure
13977: PPUSH
13978: CALL_OW 94
// DialogueOff ;
13982: CALL_OW 7
// YouLost ( FarmerDepot ) ;
13986: LD_STRING FarmerDepot
13988: PPUSH
13989: CALL_OW 104
// end ;
13993: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
13994: LD_EXP 11
13998: PUSH
13999: LD_EXP 28
14003: PPUSH
14004: LD_EXP 36
14008: PPUSH
14009: CALL_OW 296
14013: PUSH
14014: LD_INT 12
14016: LESS
14017: AND
14018: PUSH
14019: LD_INT 81
14021: PUSH
14022: LD_INT 2
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 21
14031: PUSH
14032: LD_INT 1
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PPUSH
14043: CALL_OW 69
14047: NOT
14048: AND
14049: IFFALSE 14701
14051: GO 14053
14053: DISABLE
14054: LD_INT 0
14056: PPUSH
14057: PPUSH
14058: PPUSH
// begin allowConvoys := false ;
14059: LD_ADDR_EXP 12
14063: PUSH
14064: LD_INT 0
14066: ST_TO_ADDR
// InGameOn ;
14067: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14071: LD_EXP 28
14075: PPUSH
14076: LD_EXP 36
14080: PPUSH
14081: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14085: LD_EXP 36
14089: PPUSH
14090: LD_EXP 28
14094: PPUSH
14095: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14099: LD_EXP 36
14103: PPUSH
14104: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14108: LD_EXP 28
14112: PPUSH
14113: LD_STRING DH-1-end
14115: PPUSH
14116: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14120: LD_EXP 36
14124: PPUSH
14125: LD_STRING DF-1-end
14127: PPUSH
14128: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14132: LD_EXP 36
14136: PPUSH
14137: LD_STRING DF-2-end
14139: PPUSH
14140: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14144: LD_EXP 28
14148: PPUSH
14149: LD_STRING DH-2-end
14151: PPUSH
14152: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14156: LD_EXP 36
14160: PPUSH
14161: LD_STRING DF-3-end
14163: PPUSH
14164: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14168: LD_EXP 28
14172: PPUSH
14173: LD_STRING DH-3-end
14175: PPUSH
14176: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14180: LD_EXP 29
14184: PPUSH
14185: LD_STRING DG-1-end
14187: PPUSH
14188: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14192: LD_EXP 28
14196: PPUSH
14197: LD_STRING DH-4-end
14199: PPUSH
14200: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14204: LD_EXP 36
14208: PPUSH
14209: LD_STRING DF-4-end
14211: PPUSH
14212: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14216: LD_EXP 28
14220: PPUSH
14221: LD_STRING DH-5-end
14223: PPUSH
14224: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14228: LD_EXP 36
14232: PPUSH
14233: LD_STRING DF-5-end
14235: PPUSH
14236: CALL_OW 88
// InGameOff ;
14240: CALL_OW 9
// allowCargoEvacuation := true ;
14244: LD_ADDR_EXP 7
14248: PUSH
14249: LD_INT 1
14251: ST_TO_ADDR
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14252: LD_ADDR_VAR 0 2
14256: PUSH
14257: LD_INT 4
14259: PUSH
14260: LD_INT 3
14262: PUSH
14263: LD_INT 2
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: LIST
14270: PUSH
14271: LD_OWVAR 67
14275: ARRAY
14276: ST_TO_ADDR
// if farmerSquad < max then
14277: LD_EXP 39
14281: PUSH
14282: LD_VAR 0 2
14286: LESS
14287: IFFALSE 14299
// max := farmerSquad ;
14289: LD_ADDR_VAR 0 2
14293: PUSH
14294: LD_EXP 39
14298: ST_TO_ADDR
// for i := 1 to max do
14299: LD_ADDR_VAR 0 1
14303: PUSH
14304: DOUBLE
14305: LD_INT 1
14307: DEC
14308: ST_TO_ADDR
14309: LD_VAR 0 2
14313: PUSH
14314: FOR_TO
14315: IFFALSE 14353
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14317: LD_EXP 39
14321: PUSH
14322: LD_INT 1
14324: ARRAY
14325: PPUSH
14326: LD_INT 2
14328: PPUSH
14329: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14333: LD_ADDR_EXP 39
14337: PUSH
14338: LD_EXP 39
14342: PPUSH
14343: LD_INT 1
14345: PPUSH
14346: CALL_OW 3
14350: ST_TO_ADDR
// end ;
14351: GO 14314
14353: POP
14354: POP
// for i in Farmer ^ farmerSquad do
14355: LD_ADDR_VAR 0 1
14359: PUSH
14360: LD_EXP 36
14364: PUSH
14365: LD_EXP 39
14369: ADD
14370: PUSH
14371: FOR_IN
14372: IFFALSE 14411
// begin if IsInUnit ( i ) then
14374: LD_VAR 0 1
14378: PPUSH
14379: CALL_OW 310
14383: IFFALSE 14394
// ComExitBuilding ( i ) ;
14385: LD_VAR 0 1
14389: PPUSH
14390: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14394: LD_VAR 0 1
14398: PPUSH
14399: LD_INT 102
14401: PPUSH
14402: LD_INT 7
14404: PPUSH
14405: CALL_OW 171
// end ;
14409: GO 14371
14411: POP
14412: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14413: LD_ADDR_VAR 0 1
14417: PUSH
14418: LD_INT 22
14420: PUSH
14421: LD_INT 5
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 3
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 69
14446: PUSH
14447: LD_INT 5
14449: DIFF
14450: PUSH
14451: FOR_IN
14452: IFFALSE 14468
// SetSide ( i , 2 ) ;
14454: LD_VAR 0 1
14458: PPUSH
14459: LD_INT 2
14461: PPUSH
14462: CALL_OW 235
14466: GO 14451
14468: POP
14469: POP
// wait ( 0 0$2 ) ;
14470: LD_INT 70
14472: PPUSH
14473: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14477: LD_EXP 28
14481: PPUSH
14482: LD_STRING DH-6-end
14484: PPUSH
14485: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14489: LD_INT 35
14491: PPUSH
14492: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14496: LD_ADDR_VAR 0 3
14500: PUSH
14501: LD_EXP 36
14505: PUSH
14506: LD_EXP 39
14510: ADD
14511: PPUSH
14512: LD_INT 95
14514: PUSH
14515: LD_INT 3
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PPUSH
14522: CALL_OW 72
14526: ST_TO_ADDR
// if tmp then
14527: LD_VAR 0 3
14531: IFFALSE 14575
// for i in tmp do
14533: LD_ADDR_VAR 0 1
14537: PUSH
14538: LD_VAR 0 3
14542: PUSH
14543: FOR_IN
14544: IFFALSE 14573
// begin farmerSquad := farmerSquad diff i ;
14546: LD_ADDR_EXP 39
14550: PUSH
14551: LD_EXP 39
14555: PUSH
14556: LD_VAR 0 1
14560: DIFF
14561: ST_TO_ADDR
// RemoveUnit ( i ) ;
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 64
// end ;
14571: GO 14543
14573: POP
14574: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14575: LD_EXP 39
14579: PUSH
14580: EMPTY
14581: EQUAL
14582: PUSH
14583: LD_EXP 36
14587: PPUSH
14588: CALL_OW 305
14592: NOT
14593: AND
14594: IFFALSE 14489
// if farmerHumanLoseCounter = 0 then
14596: LD_EXP 20
14600: PUSH
14601: LD_INT 0
14603: EQUAL
14604: IFFALSE 14613
// SetAchievement ( ACH_BABY ) ;
14606: LD_STRING ACH_BABY
14608: PPUSH
14609: CALL_OW 543
// wait ( 1 1$00 ) ;
14613: LD_INT 2100
14615: PPUSH
14616: CALL_OW 67
// SendAttack ;
14620: CALL 6123 0 0
// Say ( Heike , DH-7-end ) ;
14624: LD_EXP 28
14628: PPUSH
14629: LD_STRING DH-7-end
14631: PPUSH
14632: CALL_OW 88
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
14636: LD_ADDR_VAR 0 1
14640: PUSH
14641: DOUBLE
14642: LD_INT 1
14644: DEC
14645: ST_TO_ADDR
14646: LD_INT 2
14648: PUSH
14649: LD_INT 3
14651: PUSH
14652: LD_INT 4
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: LIST
14659: PUSH
14660: LD_OWVAR 67
14664: ARRAY
14665: PUSH
14666: FOR_TO
14667: IFFALSE 14699
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 ] [ Difficulty ] ) ;
14669: LD_INT 4200
14671: PUSH
14672: LD_INT 3500
14674: PUSH
14675: LD_INT 3150
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: LIST
14682: PUSH
14683: LD_OWVAR 67
14687: ARRAY
14688: PPUSH
14689: CALL_OW 67
// SendAttack ;
14693: CALL 6123 0 0
// end ;
14697: GO 14666
14699: POP
14700: POP
// end ;
14701: PPOPN 3
14703: END
// every 2 2$00 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14704: LD_EXP 7
14708: PUSH
14709: LD_EXP 21
14713: PUSH
14714: LD_INT 0
14716: GREATER
14717: AND
14718: IFFALSE 14728
14720: GO 14722
14722: DISABLE
// begin enable ;
14723: ENABLE
// CargoEvacuation ;
14724: CALL 3644 0 0
// end ;
14728: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14729: LD_EXP 17
14733: PUSH
14734: LD_INT 18900
14736: LESSEQUAL
14737: IFFALSE 14786
14739: GO 14741
14741: DISABLE
// begin DialogueOn ;
14742: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14746: LD_EXP 36
14750: PPUSH
14751: LD_STRING DF-1-distribution-a
14753: PPUSH
14754: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14758: LD_EXP 28
14762: PPUSH
14763: LD_STRING DH-1-distribution-a
14765: PPUSH
14766: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14770: LD_EXP 36
14774: PPUSH
14775: LD_STRING DF-2-distribution-a
14777: PPUSH
14778: CALL_OW 94
// DialogueOff ;
14782: CALL_OW 7
// end ;
14786: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14787: LD_EXP 17
14791: PUSH
14792: LD_INT 0
14794: LESSEQUAL
14795: IFFALSE 14827
14797: GO 14799
14799: DISABLE
// begin DialogueOn ;
14800: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14804: LD_EXP 36
14808: PPUSH
14809: LD_STRING DF-3-distribution-a
14811: PPUSH
14812: CALL_OW 94
// YouLost ( Distribution ) ;
14816: LD_STRING Distribution
14818: PPUSH
14819: CALL_OW 104
// DialogueOff ;
14823: CALL_OW 7
// end ;
14827: END
// every 0 0$1 trigger vehCounter >= 2 do
14828: LD_EXP 22
14832: PUSH
14833: LD_INT 2
14835: GREATEREQUAL
14836: IFFALSE 14848
14838: GO 14840
14840: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14841: LD_STRING VehConstructed
14843: PPUSH
14844: CALL_OW 337
14848: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14849: LD_INT 22
14851: PUSH
14852: LD_INT 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 34
14861: PUSH
14862: LD_INT 12
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PPUSH
14873: CALL_OW 69
14877: IFFALSE 14937
14879: GO 14881
14881: DISABLE
// begin DialogueOn ;
14882: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14886: LD_EXP 28
14890: PPUSH
14891: LD_STRING DH-1-truck
14893: PPUSH
14894: CALL_OW 88
// if IsOk ( Markov ) then
14898: LD_EXP 35
14902: PPUSH
14903: CALL_OW 302
14907: IFFALSE 14933
// begin Say ( Markov , DMar-1-truck ) ;
14909: LD_EXP 35
14913: PPUSH
14914: LD_STRING DMar-1-truck
14916: PPUSH
14917: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14921: LD_EXP 28
14925: PPUSH
14926: LD_STRING DH-2-truck
14928: PPUSH
14929: CALL_OW 88
// end ; DialogueOff ;
14933: CALL_OW 7
// end ;
14937: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
// if IsOk ( Givi ) then
14943: LD_EXP 29
14947: PPUSH
14948: CALL_OW 302
14952: IFFALSE 14968
// begin Say ( Givi , DG-1-nocargo ) ;
14954: LD_EXP 29
14958: PPUSH
14959: LD_STRING DG-1-nocargo
14961: PPUSH
14962: CALL_OW 88
// exit ;
14966: GO 15064
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14968: LD_ADDR_VAR 0 2
14972: PUSH
14973: LD_EXP 42
14977: PPUSH
14978: LD_INT 26
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PPUSH
14988: CALL_OW 72
14992: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14993: LD_ADDR_VAR 0 3
14997: PUSH
14998: LD_EXP 42
15002: PPUSH
15003: LD_INT 26
15005: PUSH
15006: LD_INT 2
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 72
15017: ST_TO_ADDR
// if randomMen then
15018: LD_VAR 0 2
15022: IFFALSE 15042
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15024: LD_VAR 0 2
15028: PUSH
15029: LD_INT 1
15031: ARRAY
15032: PPUSH
15033: LD_STRING DArm-1-nocargo
15035: PPUSH
15036: CALL_OW 88
15040: GO 15064
// if randomWomen then
15042: LD_VAR 0 3
15046: IFFALSE 15064
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15048: LD_VAR 0 3
15052: PUSH
15053: LD_INT 1
15055: ARRAY
15056: PPUSH
15057: LD_STRING DArf-1-nocargo
15059: PPUSH
15060: CALL_OW 88
// end ;
15064: LD_VAR 0 1
15068: RET
// export function IncomingAttack ; begin
15069: LD_INT 0
15071: PPUSH
// if attackWave = 1 then
15072: LD_EXP 19
15076: PUSH
15077: LD_INT 1
15079: EQUAL
15080: IFFALSE 15151
// begin DialogueOn ;
15082: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15086: LD_EXP 37
15090: PPUSH
15091: LD_STRING DO-1-radio-1
15093: PPUSH
15094: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15098: LD_EXP 28
15102: PPUSH
15103: LD_STRING DH-1-radio-1-
15105: PPUSH
15106: CALL_OW 88
// if IsOk ( Markov ) then
15110: LD_EXP 35
15114: PPUSH
15115: CALL_OW 302
15119: IFFALSE 15145
// begin Say ( Markov , DMar-1-radio-1 ) ;
15121: LD_EXP 35
15125: PPUSH
15126: LD_STRING DMar-1-radio-1
15128: PPUSH
15129: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15133: LD_EXP 28
15137: PPUSH
15138: LD_STRING DH-2-radio-1
15140: PPUSH
15141: CALL_OW 88
// end ; DialogueOff ;
15145: CALL_OW 7
// end else
15149: GO 15175
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15151: LD_EXP 37
15155: PPUSH
15156: LD_STRING DO-1-radio-u
15158: PPUSH
15159: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15163: LD_EXP 28
15167: PPUSH
15168: LD_STRING DH-1-radio-u
15170: PPUSH
15171: CALL_OW 88
// end ; end ;
15175: LD_VAR 0 1
15179: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15180: LD_EXP 44
15184: PPUSH
15185: LD_INT 95
15187: PUSH
15188: LD_INT 8
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PPUSH
15195: CALL_OW 72
15199: IFFALSE 15302
15201: GO 15203
15203: DISABLE
15204: LD_INT 0
15206: PPUSH
// begin enable ;
15207: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15208: LD_ADDR_VAR 0 1
15212: PUSH
15213: LD_EXP 44
15217: PPUSH
15218: LD_INT 95
15220: PUSH
15221: LD_INT 8
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PPUSH
15228: CALL_OW 72
15232: PUSH
15233: FOR_IN
15234: IFFALSE 15263
// begin usForces := usForces diff i ;
15236: LD_ADDR_EXP 44
15240: PUSH
15241: LD_EXP 44
15245: PUSH
15246: LD_VAR 0 1
15250: DIFF
15251: ST_TO_ADDR
// RemoveUnit ( i ) ;
15252: LD_VAR 0 1
15256: PPUSH
15257: CALL_OW 64
// end ;
15261: GO 15233
15263: POP
15264: POP
// if not americanHasEscaped and attackWave = 1 then
15265: LD_EXP 8
15269: NOT
15270: PUSH
15271: LD_EXP 19
15275: PUSH
15276: LD_INT 1
15278: EQUAL
15279: AND
15280: IFFALSE 15302
// begin americanHasEscaped := true ;
15282: LD_ADDR_EXP 8
15286: PUSH
15287: LD_INT 1
15289: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15290: LD_EXP 28
15294: PPUSH
15295: LD_STRING DH-2-assault-a
15297: PPUSH
15298: CALL_OW 88
// end ; end ;
15302: PPOPN 1
15304: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15305: LD_INT 4
15307: PPUSH
15308: LD_INT 22
15310: PUSH
15311: LD_INT 1
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PPUSH
15318: CALL_OW 70
15322: PUSH
15323: LD_EXP 11
15327: NOT
15328: AND
15329: IFFALSE 15346
15331: GO 15333
15333: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15334: LD_EXP 36
15338: PPUSH
15339: LD_STRING DF-1-attack
15341: PPUSH
15342: CALL_OW 94
15346: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15347: LD_INT 5
15349: PPUSH
15350: CALL_OW 255
15354: PUSH
15355: LD_INT 2
15357: EQUAL
15358: IFFALSE 15370
15360: GO 15362
15362: DISABLE
// YouLost ( Attack ) ;
15363: LD_STRING Attack
15365: PPUSH
15366: CALL_OW 104
15370: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15371: LD_INT 22
15373: PUSH
15374: LD_INT 1
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 21
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PPUSH
15395: CALL_OW 69
15399: NOT
15400: PUSH
15401: LD_INT 22
15403: PUSH
15404: LD_INT 4
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PPUSH
15411: CALL_OW 69
15415: NOT
15416: AND
15417: PUSH
15418: LD_EXP 11
15422: NOT
15423: AND
15424: PUSH
15425: LD_EXP 15
15429: PUSH
15430: LD_INT 90
15432: GREATER
15433: AND
15434: PUSH
15435: LD_INT 7
15437: PPUSH
15438: LD_INT 22
15440: PUSH
15441: LD_INT 2
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 21
15450: PUSH
15451: LD_INT 1
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 70
15466: AND
15467: PUSH
15468: LD_INT 22
15470: PUSH
15471: LD_INT 2
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 50
15480: PUSH
15481: EMPTY
15482: LIST
15483: PUSH
15484: LD_INT 30
15486: PUSH
15487: LD_INT 0
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: AND
15504: IFFALSE 16297
15506: GO 15508
15508: DISABLE
15509: LD_INT 0
15511: PPUSH
15512: PPUSH
15513: PPUSH
15514: PPUSH
15515: PPUSH
// begin depot := usDepot ;
15516: LD_ADDR_VAR 0 5
15520: PUSH
15521: LD_INT 11
15523: ST_TO_ADDR
// if not depot then
15524: LD_VAR 0 5
15528: NOT
15529: IFFALSE 15569
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15531: LD_ADDR_VAR 0 5
15535: PUSH
15536: LD_INT 22
15538: PUSH
15539: LD_INT 2
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 30
15548: PUSH
15549: LD_INT 0
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PPUSH
15560: CALL_OW 69
15564: PUSH
15565: LD_INT 1
15567: ARRAY
15568: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15569: LD_ADDR_VAR 0 1
15573: PUSH
15574: LD_EXP 42
15578: PPUSH
15579: LD_INT 26
15581: PUSH
15582: LD_INT 1
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 72
15593: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15594: LD_ADDR_VAR 0 2
15598: PUSH
15599: LD_EXP 42
15603: PPUSH
15604: LD_INT 26
15606: PUSH
15607: LD_INT 2
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PPUSH
15614: CALL_OW 72
15618: ST_TO_ADDR
// if IsOk ( Kaia ) then
15619: LD_EXP 33
15623: PPUSH
15624: CALL_OW 302
15628: IFFALSE 15649
// speaker := [ Kaia , DK ] else
15630: LD_ADDR_VAR 0 3
15634: PUSH
15635: LD_EXP 33
15639: PUSH
15640: LD_STRING DK
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: ST_TO_ADDR
15647: GO 15729
// if randomMen then
15649: LD_VAR 0 1
15653: IFFALSE 15688
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15655: LD_ADDR_VAR 0 3
15659: PUSH
15660: LD_VAR 0 1
15664: PUSH
15665: LD_INT 1
15667: PPUSH
15668: LD_VAR 0 1
15672: PPUSH
15673: CALL_OW 12
15677: ARRAY
15678: PUSH
15679: LD_STRING DArm
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: ST_TO_ADDR
15686: GO 15729
// if randomWomen then
15688: LD_VAR 0 2
15692: IFFALSE 15727
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15694: LD_ADDR_VAR 0 3
15698: PUSH
15699: LD_VAR 0 2
15703: PUSH
15704: LD_INT 1
15706: PPUSH
15707: LD_VAR 0 2
15711: PPUSH
15712: CALL_OW 12
15716: ARRAY
15717: PUSH
15718: LD_STRING DArf
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: ST_TO_ADDR
15725: GO 15729
// exit ;
15727: GO 16297
// if IsInUnit ( speaker [ 1 ] ) then
15729: LD_VAR 0 3
15733: PUSH
15734: LD_INT 1
15736: ARRAY
15737: PPUSH
15738: CALL_OW 310
15742: IFFALSE 15765
// place := IsInUnit ( speaker [ 1 ] ) else
15744: LD_ADDR_VAR 0 4
15748: PUSH
15749: LD_VAR 0 3
15753: PUSH
15754: LD_INT 1
15756: ARRAY
15757: PPUSH
15758: CALL_OW 310
15762: ST_TO_ADDR
15763: GO 15779
// place := speaker [ 1 ] ;
15765: LD_ADDR_VAR 0 4
15769: PUSH
15770: LD_VAR 0 3
15774: PUSH
15775: LD_INT 1
15777: ARRAY
15778: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15779: LD_VAR 0 4
15783: PPUSH
15784: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15788: LD_VAR 0 4
15792: PPUSH
15793: CALL_OW 250
15797: PPUSH
15798: LD_VAR 0 4
15802: PPUSH
15803: CALL_OW 251
15807: PPUSH
15808: CALL 2131 0 2
// wait ( 0 0$2 ) ;
15812: LD_INT 70
15814: PPUSH
15815: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15819: LD_EXP 38
15823: PPUSH
15824: CALL_OW 305
15828: NOT
15829: IFFALSE 15833
// exit ;
15831: GO 16297
// allowConvoys := false ;
15833: LD_ADDR_EXP 12
15837: PUSH
15838: LD_INT 0
15840: ST_TO_ADDR
// InGameOn ;
15841: CALL_OW 8
// wait ( 0 0$1 ) ;
15845: LD_INT 35
15847: PPUSH
15848: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15852: LD_EXP 38
15856: PPUSH
15857: LD_STRING DI-1-land
15859: PPUSH
15860: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15864: LD_VAR 0 3
15868: PUSH
15869: LD_INT 1
15871: ARRAY
15872: PPUSH
15873: CALL_OW 310
15877: IFFALSE 15892
// ComExit ( speaker [ 1 ] ) ;
15879: LD_VAR 0 3
15883: PUSH
15884: LD_INT 1
15886: ARRAY
15887: PPUSH
15888: CALL 73793 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15892: LD_VAR 0 3
15896: PUSH
15897: LD_INT 1
15899: ARRAY
15900: PPUSH
15901: LD_EXP 38
15905: PPUSH
15906: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15910: LD_VAR 0 3
15914: PUSH
15915: LD_INT 1
15917: ARRAY
15918: PPUSH
15919: LD_EXP 38
15923: PPUSH
15924: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15928: LD_EXP 38
15932: PPUSH
15933: LD_VAR 0 3
15937: PUSH
15938: LD_INT 1
15940: ARRAY
15941: PPUSH
15942: CALL_OW 119
// wait ( 0 0$1 ) ;
15946: LD_INT 35
15948: PPUSH
15949: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15953: LD_VAR 0 3
15957: PUSH
15958: LD_INT 1
15960: ARRAY
15961: PPUSH
15962: LD_VAR 0 3
15966: PUSH
15967: LD_INT 2
15969: ARRAY
15970: PUSH
15971: LD_STRING -1-land
15973: STR
15974: PPUSH
15975: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15979: LD_EXP 38
15983: PPUSH
15984: LD_STRING DI-2-land
15986: PPUSH
15987: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15991: LD_VAR 0 3
15995: PUSH
15996: LD_INT 1
15998: ARRAY
15999: PPUSH
16000: LD_VAR 0 3
16004: PUSH
16005: LD_INT 2
16007: ARRAY
16008: PUSH
16009: LD_STRING -2-land
16011: STR
16012: PPUSH
16013: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16017: LD_VAR 0 3
16021: PUSH
16022: LD_INT 1
16024: ARRAY
16025: PPUSH
16026: LD_VAR 0 3
16030: PUSH
16031: LD_INT 2
16033: ARRAY
16034: PUSH
16035: LD_STRING -3-land
16037: STR
16038: PPUSH
16039: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16043: LD_EXP 28
16047: PPUSH
16048: LD_STRING DH-1-land
16050: PPUSH
16051: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16055: LD_VAR 0 5
16059: PPUSH
16060: CALL_OW 313
16064: PUSH
16065: LD_INT 6
16067: EQUAL
16068: IFFALSE 16088
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16070: LD_VAR 0 5
16074: PPUSH
16075: CALL_OW 313
16079: PUSH
16080: LD_INT 1
16082: ARRAY
16083: PPUSH
16084: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16088: LD_EXP 38
16092: PPUSH
16093: LD_INT 2
16095: PPUSH
16096: CALL_OW 235
// CenterOnUnits ( depot ) ;
16100: LD_VAR 0 5
16104: PPUSH
16105: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16109: LD_EXP 38
16113: PPUSH
16114: LD_VAR 0 5
16118: PPUSH
16119: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16123: LD_VAR 0 3
16127: PUSH
16128: LD_INT 1
16130: ARRAY
16131: PPUSH
16132: LD_VAR 0 5
16136: PPUSH
16137: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16141: LD_INT 35
16143: PPUSH
16144: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16148: LD_EXP 38
16152: PPUSH
16153: CALL_OW 310
16157: PUSH
16158: LD_EXP 38
16162: PPUSH
16163: CALL_OW 302
16167: NOT
16168: OR
16169: PUSH
16170: LD_VAR 0 5
16174: PPUSH
16175: CALL_OW 302
16179: NOT
16180: OR
16181: IFFALSE 16141
// InGameOff ;
16183: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16187: LD_EXP 38
16191: PPUSH
16192: CALL_OW 302
16196: NOT
16197: IFFALSE 16201
// exit ;
16199: GO 16297
// if not IsOk ( depot ) then
16201: LD_VAR 0 5
16205: PPUSH
16206: CALL_OW 302
16210: NOT
16211: IFFALSE 16274
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16213: LD_EXP 38
16217: PPUSH
16218: LD_INT 30
16220: PPUSH
16221: LD_INT 1
16223: PPUSH
16224: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16228: LD_INT 35
16230: PPUSH
16231: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16235: LD_EXP 38
16239: PPUSH
16240: LD_INT 30
16242: PPUSH
16243: LD_INT 1
16245: PPUSH
16246: CALL_OW 307
16250: PUSH
16251: LD_EXP 38
16255: PPUSH
16256: CALL_OW 301
16260: OR
16261: IFFALSE 16228
// RemoveUnit ( Ibrahim ) ;
16263: LD_EXP 38
16267: PPUSH
16268: CALL_OW 64
// exit ;
16272: GO 16297
// end ; ibrahimInDepot := true ;
16274: LD_ADDR_EXP 25
16278: PUSH
16279: LD_INT 1
16281: ST_TO_ADDR
// allowConvoys := true ;
16282: LD_ADDR_EXP 12
16286: PUSH
16287: LD_INT 1
16289: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16290: LD_STRING IbrahimInDepot
16292: PPUSH
16293: CALL_OW 97
// end ;
16297: PPOPN 5
16299: END
// export function IbrahimQuery ; begin
16300: LD_INT 0
16302: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16303: LD_STRING IbrahimQuery
16305: PPUSH
16306: CALL_OW 97
16310: PUSH
16311: LD_INT 1
16313: DOUBLE
16314: EQUAL
16315: IFTRUE 16319
16317: GO 16595
16319: POP
// begin allowConvoys := false ;
16320: LD_ADDR_EXP 12
16324: PUSH
16325: LD_INT 0
16327: ST_TO_ADDR
// ibrahimInDepot := false ;
16328: LD_ADDR_EXP 25
16332: PUSH
16333: LD_INT 0
16335: ST_TO_ADDR
// InGameOn ;
16336: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16340: LD_EXP 28
16344: PPUSH
16345: CALL_OW 87
// wait ( 0 0$1 ) ;
16349: LD_INT 35
16351: PPUSH
16352: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16356: LD_EXP 28
16360: PPUSH
16361: LD_STRING DH-1-interrogation
16363: PPUSH
16364: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16368: LD_EXP 38
16372: PPUSH
16373: LD_STRING DI-1-interrogation
16375: PPUSH
16376: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16380: LD_EXP 28
16384: PPUSH
16385: LD_STRING DH-2-interrogation
16387: PPUSH
16388: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16392: LD_EXP 38
16396: PPUSH
16397: LD_STRING DI-2-interrogation
16399: PPUSH
16400: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16404: LD_EXP 28
16408: PPUSH
16409: LD_STRING DH-3-interrogation
16411: PPUSH
16412: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16416: LD_EXP 38
16420: PPUSH
16421: LD_STRING DI-3-interrogation
16423: PPUSH
16424: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16428: LD_EXP 28
16432: PPUSH
16433: LD_STRING DH-4-interrogation
16435: PPUSH
16436: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16440: LD_EXP 38
16444: PPUSH
16445: LD_STRING DI-4-interrogation
16447: PPUSH
16448: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16452: LD_EXP 28
16456: PPUSH
16457: LD_STRING DH-5-interrogation
16459: PPUSH
16460: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16464: LD_EXP 38
16468: PPUSH
16469: LD_STRING DI-5-interrogation
16471: PPUSH
16472: CALL_OW 88
// wait ( 0 0$1 ) ;
16476: LD_INT 35
16478: PPUSH
16479: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16483: LD_STRING IbrahimDecisionQuery
16485: PPUSH
16486: CALL_OW 97
16490: PUSH
16491: LD_INT 1
16493: DOUBLE
16494: EQUAL
16495: IFTRUE 16499
16497: GO 16523
16499: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16500: LD_EXP 38
16504: PPUSH
16505: LD_STRING DI-1-kill
16507: PPUSH
16508: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16512: LD_EXP 38
16516: PPUSH
16517: CALL_OW 66
// end ; 2 :
16521: GO 16589
16523: LD_INT 2
16525: DOUBLE
16526: EQUAL
16527: IFTRUE 16531
16529: GO 16588
16531: POP
// begin SetSide ( Ibrahim , 6 ) ;
16532: LD_EXP 38
16536: PPUSH
16537: LD_INT 6
16539: PPUSH
16540: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16544: LD_EXP 38
16548: PPUSH
16549: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16553: LD_EXP 38
16557: PPUSH
16558: LD_INT 66
16560: PPUSH
16561: LD_INT 2
16563: PPUSH
16564: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16568: LD_EXP 38
16572: PPUSH
16573: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16577: LD_EXP 28
16581: PPUSH
16582: CALL_OW 122
// end ; end ;
16586: GO 16589
16588: POP
// InGameOff ;
16589: CALL_OW 9
// end ; 2 :
16593: GO 16609
16595: LD_INT 2
16597: DOUBLE
16598: EQUAL
16599: IFTRUE 16603
16601: GO 16608
16603: POP
// exit ; end ;
16604: GO 16685
16606: GO 16609
16608: POP
// allowConvoys := true ;
16609: LD_ADDR_EXP 12
16613: PUSH
16614: LD_INT 1
16616: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16617: LD_INT 5250
16619: PPUSH
16620: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16624: LD_INT 35
16626: PPUSH
16627: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16631: LD_INT 81
16633: PUSH
16634: LD_INT 2
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 21
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PPUSH
16655: CALL_OW 69
16659: NOT
16660: IFFALSE 16624
// ComMoveXY ( Ibrahim , 38 , 28 ) ;
16662: LD_EXP 38
16666: PPUSH
16667: LD_INT 38
16669: PPUSH
16670: LD_INT 28
16672: PPUSH
16673: CALL_OW 111
// ibrahimIsFree := true ;
16677: LD_ADDR_EXP 26
16681: PUSH
16682: LD_INT 1
16684: ST_TO_ADDR
// end ;
16685: LD_VAR 0 1
16689: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
16690: LD_EXP 26
16694: PUSH
16695: LD_EXP 38
16699: PPUSH
16700: CALL_OW 302
16704: AND
16705: PUSH
16706: LD_INT 2
16708: PPUSH
16709: LD_EXP 38
16713: PPUSH
16714: CALL_OW 292
16718: AND
16719: IFFALSE 17479
16721: GO 16723
16723: DISABLE
16724: LD_INT 0
16726: PPUSH
16727: PPUSH
16728: PPUSH
16729: PPUSH
16730: PPUSH
16731: PPUSH
// begin allowConvoys := false ;
16732: LD_ADDR_EXP 12
16736: PUSH
16737: LD_INT 0
16739: ST_TO_ADDR
// depot := usDepot ;
16740: LD_ADDR_VAR 0 4
16744: PUSH
16745: LD_INT 11
16747: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16748: LD_INT 11
16750: NOT
16751: PUSH
16752: LD_INT 22
16754: PUSH
16755: LD_INT 2
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 50
16764: PUSH
16765: EMPTY
16766: LIST
16767: PUSH
16768: LD_INT 30
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: PPUSH
16783: CALL_OW 69
16787: AND
16788: IFFALSE 16835
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16790: LD_ADDR_VAR 0 4
16794: PUSH
16795: LD_INT 22
16797: PUSH
16798: LD_INT 2
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PUSH
16805: LD_INT 50
16807: PUSH
16808: EMPTY
16809: LIST
16810: PUSH
16811: LD_INT 30
16813: PUSH
16814: LD_INT 0
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: LIST
16825: PPUSH
16826: CALL_OW 69
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: ST_TO_ADDR
// InGameOn ;
16835: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16839: LD_EXP 38
16843: PPUSH
16844: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16848: LD_EXP 28
16852: PPUSH
16853: LD_EXP 38
16857: PPUSH
16858: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16862: LD_EXP 38
16866: PPUSH
16867: LD_EXP 28
16871: PPUSH
16872: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16876: LD_EXP 38
16880: PPUSH
16881: LD_STRING DI-1-free
16883: PPUSH
16884: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16888: LD_EXP 28
16892: PPUSH
16893: LD_STRING DH-1-free
16895: PPUSH
16896: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16900: LD_EXP 38
16904: PPUSH
16905: LD_STRING DI-2-free
16907: PPUSH
16908: CALL_OW 88
// changeClass := 0 ;
16912: LD_ADDR_VAR 0 1
16916: PUSH
16917: LD_INT 0
16919: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16920: LD_STRING IbrahimJoinQuery
16922: PPUSH
16923: CALL_OW 97
16927: PUSH
16928: LD_INT 1
16930: DOUBLE
16931: EQUAL
16932: IFTRUE 16936
16934: GO 16947
16936: POP
// begin changeClass := 1 ;
16937: LD_ADDR_VAR 0 1
16941: PUSH
16942: LD_INT 1
16944: ST_TO_ADDR
// end ; 2 :
16945: GO 17187
16947: LD_INT 2
16949: DOUBLE
16950: EQUAL
16951: IFTRUE 16955
16953: GO 17107
16955: POP
// begin Say ( Heike , DH-1-decline ) ;
16956: LD_EXP 28
16960: PPUSH
16961: LD_STRING DH-1-decline
16963: PPUSH
16964: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16968: LD_EXP 38
16972: PPUSH
16973: LD_STRING DI-1-decline
16975: PPUSH
16976: CALL_OW 88
// InGameOff ;
16980: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16984: LD_EXP 38
16988: PPUSH
16989: LD_INT 30
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: CALL_OW 111
// p := 0 ;
16999: LD_ADDR_VAR 0 3
17003: PUSH
17004: LD_INT 0
17006: ST_TO_ADDR
// repeat p := p + 1 ;
17007: LD_ADDR_VAR 0 3
17011: PUSH
17012: LD_VAR 0 3
17016: PUSH
17017: LD_INT 1
17019: PLUS
17020: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17021: LD_INT 35
17023: PPUSH
17024: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17028: LD_EXP 38
17032: PPUSH
17033: LD_INT 30
17035: PPUSH
17036: LD_INT 1
17038: PPUSH
17039: CALL_OW 307
17043: PUSH
17044: LD_INT 22
17046: PUSH
17047: LD_INT 2
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 101
17056: PUSH
17057: LD_INT 6
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PPUSH
17068: CALL_OW 69
17072: NOT
17073: OR
17074: PUSH
17075: LD_VAR 0 3
17079: PUSH
17080: LD_INT 10
17082: GREATER
17083: OR
17084: IFFALSE 17007
// RemoveUnit ( Ibrahim ) ;
17086: LD_EXP 38
17090: PPUSH
17091: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17095: LD_INT 1
17097: PPUSH
17098: LD_STRING 03_IbrahimHasEscaped
17100: PPUSH
17101: CALL_OW 39
// end ; 3 :
17105: GO 17187
17107: LD_INT 3
17109: DOUBLE
17110: EQUAL
17111: IFTRUE 17115
17113: GO 17186
17115: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17116: LD_EXP 28
17120: PPUSH
17121: LD_STRING DH-1-radio-hq
17123: PPUSH
17124: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17128: LD_EXP 37
17132: PPUSH
17133: LD_STRING DO-1-radio-hq
17135: PPUSH
17136: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17140: LD_EXP 28
17144: PPUSH
17145: LD_STRING DH-2-radio-hq
17147: PPUSH
17148: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17152: LD_EXP 37
17156: PPUSH
17157: LD_STRING DO-2-radio-hq
17159: PPUSH
17160: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17164: LD_EXP 28
17168: PPUSH
17169: LD_STRING DH-3-radio-hq
17171: PPUSH
17172: CALL_OW 88
// changeClass := 1 ;
17176: LD_ADDR_VAR 0 1
17180: PUSH
17181: LD_INT 1
17183: ST_TO_ADDR
// end ; end ;
17184: GO 17187
17186: POP
// if changeClass then
17187: LD_VAR 0 1
17191: IFFALSE 17479
// begin Say ( Heike , DH-1-agree ) ;
17193: LD_EXP 28
17197: PPUSH
17198: LD_STRING DH-1-agree
17200: PPUSH
17201: CALL_OW 88
// if IsOk ( Givi ) then
17205: LD_EXP 29
17209: PPUSH
17210: CALL_OW 302
17214: IFFALSE 17252
// begin Say ( Givi , DG-1-agree ) ;
17216: LD_EXP 29
17220: PPUSH
17221: LD_STRING DG-1-agree
17223: PPUSH
17224: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17228: LD_EXP 28
17232: PPUSH
17233: LD_STRING DH-2-agree
17235: PPUSH
17236: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17240: LD_EXP 29
17244: PPUSH
17245: LD_STRING DG-2-agree
17247: PPUSH
17248: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17252: LD_VAR 0 4
17256: PPUSH
17257: CALL_OW 313
17261: PUSH
17262: LD_INT 6
17264: EQUAL
17265: IFFALSE 17285
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17267: LD_VAR 0 4
17271: PPUSH
17272: CALL_OW 313
17276: PUSH
17277: LD_INT 1
17279: ARRAY
17280: PPUSH
17281: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17285: LD_EXP 38
17289: PPUSH
17290: LD_INT 2
17292: PPUSH
17293: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17297: LD_ADDR_VAR 0 5
17301: PUSH
17302: LD_EXP 38
17306: PPUSH
17307: CALL_OW 250
17311: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17312: LD_ADDR_VAR 0 6
17316: PUSH
17317: LD_EXP 38
17321: PPUSH
17322: CALL_OW 251
17326: ST_TO_ADDR
// if depot then
17327: LD_VAR 0 4
17331: IFFALSE 17380
// begin ComEnterUnit ( Ibrahim , depot ) ;
17333: LD_EXP 38
17337: PPUSH
17338: LD_VAR 0 4
17342: PPUSH
17343: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17347: LD_INT 35
17349: PPUSH
17350: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17354: LD_EXP 38
17358: PPUSH
17359: CALL_OW 310
17363: IFFALSE 17347
// b := IsInUnit ( Ibrahim ) ;
17365: LD_ADDR_VAR 0 2
17369: PUSH
17370: LD_EXP 38
17374: PPUSH
17375: CALL_OW 310
17379: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17380: LD_EXP 38
17384: PPUSH
17385: CALL_OW 64
// uc_side := 2 ;
17389: LD_ADDR_OWVAR 20
17393: PUSH
17394: LD_INT 2
17396: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17397: LD_ADDR_EXP 38
17401: PUSH
17402: LD_STRING Ibrahim
17404: PPUSH
17405: LD_INT 0
17407: PPUSH
17408: LD_STRING 
17410: PPUSH
17411: CALL 36668 0 3
17415: ST_TO_ADDR
// if depot then
17416: LD_VAR 0 4
17420: IFFALSE 17438
// PlaceHumanInUnit ( Ibrahim , b ) else
17422: LD_EXP 38
17426: PPUSH
17427: LD_VAR 0 2
17431: PPUSH
17432: CALL_OW 52
17436: GO 17460
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17438: LD_EXP 38
17442: PPUSH
17443: LD_VAR 0 5
17447: PPUSH
17448: LD_VAR 0 6
17452: PPUSH
17453: LD_INT 0
17455: PPUSH
17456: CALL_OW 48
// InGameOff ;
17460: CALL_OW 9
// allowConvoys := true ;
17464: LD_ADDR_EXP 12
17468: PUSH
17469: LD_INT 1
17471: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17472: LD_STRING ACH_IBRAHIM
17474: PPUSH
17475: CALL_OW 543
// end ; end ;
17479: PPOPN 6
17481: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17482: LD_EXP 33
17486: PPUSH
17487: CALL_OW 256
17491: PUSH
17492: LD_INT 3
17494: LESS
17495: IFFALSE 17562
17497: GO 17499
17499: DISABLE
// begin DialogueOn ;
17500: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17504: LD_EXP 33
17508: PPUSH
17509: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17513: LD_EXP 33
17517: PPUSH
17518: LD_STRING DK-keydeath-1
17520: PPUSH
17521: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17525: LD_EXP 28
17529: PPUSH
17530: LD_STRING DH-keydeath-2
17532: PPUSH
17533: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17537: LD_EXP 28
17541: PPUSH
17542: LD_STRING DH-keydeath-3
17544: PPUSH
17545: CALL_OW 88
// DialogueOff ;
17549: CALL_OW 7
// KillUnit ( Kaia ) ;
17553: LD_EXP 33
17557: PPUSH
17558: CALL_OW 66
// end ;
17562: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17563: LD_EXP 11
17567: PUSH
17568: LD_EXP 21
17572: PUSH
17573: LD_INT 1
17575: LESS
17576: AND
17577: IFFALSE 18113
17579: GO 17581
17581: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
17582: LD_INT 22
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 2
17594: PUSH
17595: LD_INT 25
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 25
17607: PUSH
17608: LD_INT 3
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PPUSH
17624: CALL_OW 69
17628: IFFALSE 17706
// begin ChangeSideFog ( 1 , 2 ) ;
17630: LD_INT 1
17632: PPUSH
17633: LD_INT 2
17635: PPUSH
17636: CALL_OW 343
// Query ( DestroyEnemy ) ;
17640: LD_STRING DestroyEnemy
17642: PPUSH
17643: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
17647: LD_INT 35
17649: PPUSH
17650: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
17654: LD_INT 22
17656: PUSH
17657: LD_INT 1
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 2
17666: PUSH
17667: LD_INT 25
17669: PUSH
17670: LD_INT 1
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 25
17679: PUSH
17680: LD_INT 3
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PPUSH
17696: CALL_OW 69
17700: PUSH
17701: LD_INT 0
17703: EQUAL
17704: IFFALSE 17647
// end ; DialogueOn ;
17706: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17710: LD_EXP 28
17714: PPUSH
17715: LD_STRING DH-1-final
17717: PPUSH
17718: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17722: LD_OWVAR 1
17726: PUSH
17727: LD_INT 126000
17729: PUSH
17730: LD_INT 115500
17732: PUSH
17733: LD_INT 105000
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: PUSH
17741: LD_OWVAR 67
17745: ARRAY
17746: LESSEQUAL
17747: IFFALSE 17761
// AddMedal ( med1 , 1 ) else
17749: LD_STRING med1
17751: PPUSH
17752: LD_INT 1
17754: PPUSH
17755: CALL_OW 101
17759: GO 17772
// AddMedal ( med1 , - 1 ) ;
17761: LD_STRING med1
17763: PPUSH
17764: LD_INT 1
17766: NEG
17767: PPUSH
17768: CALL_OW 101
// if vehCounter >= 2 then
17772: LD_EXP 22
17776: PUSH
17777: LD_INT 2
17779: GREATEREQUAL
17780: IFFALSE 17794
// AddMedal ( med2 , 1 ) else
17782: LD_STRING med2
17784: PPUSH
17785: LD_INT 1
17787: PPUSH
17788: CALL_OW 101
17792: GO 17805
// AddMedal ( med2 , - 1 ) ;
17794: LD_STRING med2
17796: PPUSH
17797: LD_INT 1
17799: NEG
17800: PPUSH
17801: CALL_OW 101
// if deadCounter = 0 then
17805: LD_EXP 9
17809: PUSH
17810: LD_INT 0
17812: EQUAL
17813: IFFALSE 17827
// AddMedal ( med3 , 1 ) else
17815: LD_STRING med3
17817: PPUSH
17818: LD_INT 1
17820: PPUSH
17821: CALL_OW 101
17825: GO 17838
// AddMedal ( med3 , - 1 ) ;
17827: LD_STRING med3
17829: PPUSH
17830: LD_INT 1
17832: NEG
17833: PPUSH
17834: CALL_OW 101
// GiveMedals ( MAIN ) ;
17838: LD_STRING MAIN
17840: PPUSH
17841: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17845: LD_INT 22
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 23
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 21
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: LIST
17879: PPUSH
17880: CALL_OW 69
17884: PPUSH
17885: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17889: LD_EXP 28
17893: PPUSH
17894: LD_STRING 03_Heike
17896: PPUSH
17897: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17901: LD_EXP 32
17905: PPUSH
17906: LD_STRING 03_Aviradze
17908: PPUSH
17909: CALL_OW 38
// if Givi then
17913: LD_EXP 29
17917: IFFALSE 17931
// SaveCharacters ( Givi , 03_Givi ) ;
17919: LD_EXP 29
17923: PPUSH
17924: LD_STRING 03_Givi
17926: PPUSH
17927: CALL_OW 38
// if Mike then
17931: LD_EXP 30
17935: IFFALSE 17949
// SaveCharacters ( Mike , 03_Mike ) ;
17937: LD_EXP 30
17941: PPUSH
17942: LD_STRING 03_Mike
17944: PPUSH
17945: CALL_OW 38
// if Kamil then
17949: LD_EXP 31
17953: IFFALSE 17967
// SaveCharacters ( Kamil , 03_Kamil ) ;
17955: LD_EXP 31
17959: PPUSH
17960: LD_STRING 03_Kamil
17962: PPUSH
17963: CALL_OW 38
// if Kaia then
17967: LD_EXP 33
17971: IFFALSE 17985
// SaveCharacters ( Kaia , 03_Kaia ) ;
17973: LD_EXP 33
17977: PPUSH
17978: LD_STRING 03_Kaia
17980: PPUSH
17981: CALL_OW 38
// if Sophia then
17985: LD_EXP 34
17989: IFFALSE 18003
// SaveCharacters ( Sophia , 03_Sophia ) ;
17991: LD_EXP 34
17995: PPUSH
17996: LD_STRING 03_Sophia
17998: PPUSH
17999: CALL_OW 38
// if Markov then
18003: LD_EXP 35
18007: IFFALSE 18021
// SaveCharacters ( Markov , 03_Markov ) ;
18009: LD_EXP 35
18013: PPUSH
18014: LD_STRING 03_Markov
18016: PPUSH
18017: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18021: LD_EXP 38
18025: PUSH
18026: LD_EXP 38
18030: PPUSH
18031: CALL_OW 255
18035: PUSH
18036: LD_INT 2
18038: EQUAL
18039: AND
18040: IFFALSE 18061
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18042: LD_STRING enableBioCharacter(BIO_IBRA)
18044: PPUSH
18045: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18049: LD_EXP 38
18053: PPUSH
18054: LD_STRING 03_Ibrahim
18056: PPUSH
18057: CALL_OW 38
// end ; if heikeSecondSquad then
18061: LD_EXP 42
18065: IFFALSE 18079
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18067: LD_EXP 42
18071: PPUSH
18072: LD_STRING 03_others
18074: PPUSH
18075: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18079: LD_EXP 9
18083: PPUSH
18084: LD_STRING 03_DeadCounter
18086: PPUSH
18087: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18091: LD_STRING enableBioCharacter(BIO_OMAR)
18093: PPUSH
18094: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18098: LD_STRING enableBioCharacter(BIO_FARM)
18100: PPUSH
18101: CALL_OW 559
// YouWin ;
18105: CALL_OW 103
// DialogueOff ;
18109: CALL_OW 7
// end ; end_of_file
18113: END
// on UnitDestroyed ( un ) do begin if un = Heike then
18114: LD_VAR 0 1
18118: PUSH
18119: LD_EXP 28
18123: EQUAL
18124: IFFALSE 18133
// YouLost ( Heike ) ;
18126: LD_STRING Heike
18128: PPUSH
18129: CALL_OW 104
// if un = Aviradze then
18133: LD_VAR 0 1
18137: PUSH
18138: LD_EXP 32
18142: EQUAL
18143: IFFALSE 18152
// YouLost ( Aviradze ) ;
18145: LD_STRING Aviradze
18147: PPUSH
18148: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18152: LD_VAR 0 1
18156: PUSH
18157: LD_INT 11
18159: EQUAL
18160: PUSH
18161: LD_EXP 11
18165: NOT
18166: AND
18167: IFFALSE 18176
// YouLost ( Depot ) ;
18169: LD_STRING Depot
18171: PPUSH
18172: CALL_OW 104
// if un = arDepot then
18176: LD_VAR 0 1
18180: PUSH
18181: LD_INT 5
18183: EQUAL
18184: IFFALSE 18193
// YouLost ( FarmerDepot ) ;
18186: LD_STRING FarmerDepot
18188: PPUSH
18189: CALL_OW 104
// if un = Farmer then
18193: LD_VAR 0 1
18197: PUSH
18198: LD_EXP 36
18202: EQUAL
18203: IFFALSE 18212
// YouLost ( Farmer ) ;
18205: LD_STRING Farmer
18207: PPUSH
18208: CALL_OW 104
// if un in usForces then
18212: LD_VAR 0 1
18216: PUSH
18217: LD_EXP 44
18221: IN
18222: IFFALSE 18240
// usForces := usForces diff un ;
18224: LD_ADDR_EXP 44
18228: PUSH
18229: LD_EXP 44
18233: PUSH
18234: LD_VAR 0 1
18238: DIFF
18239: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18240: LD_VAR 0 1
18244: PUSH
18245: LD_INT 22
18247: PUSH
18248: LD_INT 2
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 23
18257: PUSH
18258: LD_INT 2
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 21
18267: PUSH
18268: LD_INT 1
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: LIST
18279: PPUSH
18280: CALL_OW 69
18284: IN
18285: IFFALSE 18301
// deadCounter := deadCounter + 1 ;
18287: LD_ADDR_EXP 9
18291: PUSH
18292: LD_EXP 9
18296: PUSH
18297: LD_INT 1
18299: PLUS
18300: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18301: LD_VAR 0 1
18305: PUSH
18306: LD_INT 22
18308: PUSH
18309: LD_INT 4
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 34
18318: PUSH
18319: LD_INT 12
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PPUSH
18330: CALL_OW 69
18334: IN
18335: PUSH
18336: LD_EXP 18
18340: NOT
18341: AND
18342: IFFALSE 18352
// firstConvoyDestroyed := true ;
18344: LD_ADDR_EXP 18
18348: PUSH
18349: LD_INT 1
18351: ST_TO_ADDR
// if un in usAttackers then
18352: LD_VAR 0 1
18356: PUSH
18357: LD_EXP 47
18361: IN
18362: IFFALSE 18380
// usAttackers := usAttackers diff un ;
18364: LD_ADDR_EXP 47
18368: PUSH
18369: LD_EXP 47
18373: PUSH
18374: LD_VAR 0 1
18378: DIFF
18379: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18380: LD_VAR 0 1
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_INT 5
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 21
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PPUSH
18409: CALL_OW 69
18413: IN
18414: IFFALSE 18430
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18416: LD_ADDR_EXP 20
18420: PUSH
18421: LD_EXP 20
18425: PUSH
18426: LD_INT 1
18428: PLUS
18429: ST_TO_ADDR
// end ;
18430: PPOPN 1
18432: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18433: LD_VAR 0 2
18437: PUSH
18438: LD_EXP 38
18442: EQUAL
18443: PUSH
18444: LD_EXP 25
18448: AND
18449: IFFALSE 18634
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18451: LD_INT 22
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 30
18463: PUSH
18464: LD_INT 0
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 50
18473: PUSH
18474: EMPTY
18475: LIST
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: LIST
18481: PPUSH
18482: CALL_OW 69
18486: IFFALSE 18540
// begin InGameOn ;
18488: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18492: LD_EXP 38
18496: PPUSH
18497: LD_INT 11
18499: PPUSH
18500: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18504: LD_INT 35
18506: PPUSH
18507: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18511: LD_EXP 38
18515: PPUSH
18516: LD_INT 11
18518: PPUSH
18519: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18523: LD_EXP 38
18527: PPUSH
18528: CALL_OW 310
18532: IFFALSE 18504
// InGameOff ;
18534: CALL_OW 9
// end else
18538: GO 18634
// begin SetSide ( Ibrahim , 6 ) ;
18540: LD_EXP 38
18544: PPUSH
18545: LD_INT 6
18547: PPUSH
18548: CALL_OW 235
// ibrahimInDepot := false ;
18552: LD_ADDR_EXP 25
18556: PUSH
18557: LD_INT 0
18559: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18560: LD_EXP 38
18564: PPUSH
18565: LD_INT 30
18567: PPUSH
18568: LD_INT 1
18570: PPUSH
18571: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18575: LD_INT 35
18577: PPUSH
18578: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18582: LD_EXP 38
18586: PPUSH
18587: LD_INT 30
18589: PPUSH
18590: LD_INT 1
18592: PPUSH
18593: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18597: LD_EXP 38
18601: PPUSH
18602: LD_INT 30
18604: PPUSH
18605: LD_INT 1
18607: PPUSH
18608: CALL_OW 307
18612: PUSH
18613: LD_EXP 38
18617: PPUSH
18618: CALL_OW 301
18622: OR
18623: IFFALSE 18575
// RemoveUnit ( Ibrahim ) ;
18625: LD_EXP 38
18629: PPUSH
18630: CALL_OW 64
// end ; end ; end ;
18634: PPOPN 2
18636: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18637: LD_VAR 0 2
18641: PUSH
18642: LD_EXP 28
18646: EQUAL
18647: PUSH
18648: LD_VAR 0 1
18652: PUSH
18653: LD_INT 11
18655: EQUAL
18656: AND
18657: PUSH
18658: LD_EXP 25
18662: AND
18663: IFFALSE 18669
// IbrahimQuery ;
18665: CALL 16300 0 0
// end ;
18669: PPOPN 2
18671: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18672: LD_VAR 0 1
18676: PPUSH
18677: CALL_OW 141
// if oldId in usAttackers then
18681: LD_VAR 0 2
18685: PUSH
18686: LD_EXP 47
18690: IN
18691: IFFALSE 18709
// usAttackers := usAttackers diff oldId ;
18693: LD_ADDR_EXP 47
18697: PUSH
18698: LD_EXP 47
18702: PUSH
18703: LD_VAR 0 2
18707: DIFF
18708: ST_TO_ADDR
// if newId in usAttackers then
18709: LD_VAR 0 1
18713: PUSH
18714: LD_EXP 47
18718: IN
18719: IFFALSE 18737
// usAttackers := usAttackers diff newId ;
18721: LD_ADDR_EXP 47
18725: PUSH
18726: LD_EXP 47
18730: PUSH
18731: LD_VAR 0 1
18735: DIFF
18736: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18737: LD_VAR 0 3
18741: PUSH
18742: LD_INT 4
18744: EQUAL
18745: PUSH
18746: LD_EXP 18
18750: NOT
18751: AND
18752: IFFALSE 18762
// firstConvoyDestroyed := true ;
18754: LD_ADDR_EXP 18
18758: PUSH
18759: LD_INT 1
18761: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18762: LD_VAR 0 1
18766: PPUSH
18767: CALL_OW 264
18771: PUSH
18772: LD_INT 12
18774: EQUAL
18775: IFFALSE 18813
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18777: LD_ADDR_EXP 13
18781: PUSH
18782: LD_EXP 13
18786: PUSH
18787: LD_INT 1
18789: PLUS
18790: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18791: LD_VAR 0 1
18795: PPUSH
18796: LD_INT 1
18798: PPUSH
18799: CALL_OW 289
18803: PUSH
18804: LD_INT 0
18806: EQUAL
18807: IFFALSE 18813
// EmptyCargoDialog ;
18809: CALL 14938 0 0
// end ; end ;
18813: PPOPN 4
18815: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18816: LD_VAR 0 1
18820: PUSH
18821: LD_INT 2
18823: EQUAL
18824: PUSH
18825: LD_VAR 0 2
18829: PUSH
18830: LD_INT 5
18832: EQUAL
18833: AND
18834: IFFALSE 18843
// YouLost ( Attack ) ;
18836: LD_STRING Attack
18838: PPUSH
18839: CALL_OW 104
// end ;
18843: PPOPN 2
18845: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18846: LD_VAR 0 1
18850: PPUSH
18851: CALL_OW 255
18855: PUSH
18856: LD_INT 1
18858: EQUAL
18859: PUSH
18860: LD_EXP 6
18864: NOT
18865: AND
18866: IFFALSE 19000
// begin if GetBType ( b ) = b_lab then
18868: LD_VAR 0 1
18872: PPUSH
18873: CALL_OW 266
18877: PUSH
18878: LD_INT 6
18880: EQUAL
18881: IFFALSE 18921
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18883: LD_EXP 44
18887: PPUSH
18888: LD_INT 25
18890: PUSH
18891: LD_INT 4
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PPUSH
18898: CALL_OW 72
18902: PPUSH
18903: LD_VAR 0 1
18907: PPUSH
18908: CALL_OW 120
// AmLabResearch ( b ) ;
18912: LD_VAR 0 1
18916: PPUSH
18917: CALL 5175 0 1
// end ; if GetBType ( b ) = b_armoury then
18921: LD_VAR 0 1
18925: PPUSH
18926: CALL_OW 266
18930: PUSH
18931: LD_INT 4
18933: EQUAL
18934: IFFALSE 18982
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18936: LD_EXP 44
18940: PPUSH
18941: LD_INT 25
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 3
18953: PUSH
18954: LD_INT 54
18956: PUSH
18957: EMPTY
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PPUSH
18968: CALL_OW 72
18972: PPUSH
18973: LD_VAR 0 1
18977: PPUSH
18978: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18982: LD_ADDR_EXP 46
18986: PUSH
18987: LD_EXP 46
18991: PPUSH
18992: LD_INT 1
18994: PPUSH
18995: CALL_OW 3
18999: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19000: LD_VAR 0 1
19004: PPUSH
19005: CALL_OW 255
19009: PUSH
19010: LD_INT 5
19012: EQUAL
19013: IFFALSE 19027
// SetBLevel ( b , 5 ) ;
19015: LD_VAR 0 1
19019: PPUSH
19020: LD_INT 5
19022: PPUSH
19023: CALL_OW 241
// end ;
19027: PPOPN 1
19029: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19030: LD_VAR 0 1
19034: PPUSH
19035: CALL_OW 255
19039: PUSH
19040: LD_INT 2
19042: EQUAL
19043: IFFALSE 19059
// vehCounter := vehCounter + 1 ;
19045: LD_ADDR_EXP 22
19049: PUSH
19050: LD_EXP 22
19054: PUSH
19055: LD_INT 1
19057: PLUS
19058: ST_TO_ADDR
// end ;
19059: PPOPN 2
19061: END
// on SailEvent ( event ) do begin if event = eventAttack then
19062: LD_VAR 0 1
19066: PUSH
19067: LD_EXP 24
19071: EQUAL
19072: IFFALSE 19078
// AmericanAttack ;
19074: CALL 6650 0 0
// end ; end_of_file
19078: PPOPN 1
19080: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 ] [ Difficulty ] do
19081: LD_OWVAR 1
19085: PUSH
19086: LD_INT 10500
19088: PUSH
19089: LD_INT 9800
19091: PUSH
19092: LD_INT 9450
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: PUSH
19100: LD_OWVAR 67
19104: ARRAY
19105: LESSEQUAL
19106: IFFALSE 19133
19108: GO 19110
19110: DISABLE
// begin enable ;
19111: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19112: LD_INT 1
19114: PPUSH
19115: LD_INT 5
19117: PPUSH
19118: CALL_OW 12
19122: PPUSH
19123: LD_INT 9
19125: PPUSH
19126: LD_INT 1
19128: PPUSH
19129: CALL_OW 55
// end ;
19133: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 ] [ Difficulty ] do
19134: LD_EXP 6
19138: PUSH
19139: LD_OWVAR 1
19143: PUSH
19144: LD_INT 56700
19146: PUSH
19147: LD_INT 55650
19149: PUSH
19150: LD_INT 54600
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: LIST
19157: PUSH
19158: LD_OWVAR 67
19162: ARRAY
19163: LESSEQUAL
19164: AND
19165: IFFALSE 19192
19167: GO 19169
19169: DISABLE
// begin enable ;
19170: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19171: LD_INT 3
19173: PPUSH
19174: LD_INT 5
19176: PPUSH
19177: CALL_OW 12
19181: PPUSH
19182: LD_INT 9
19184: PPUSH
19185: LD_INT 1
19187: PPUSH
19188: CALL_OW 55
// end ; end_of_file
19192: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19193: LD_EXP 11
19197: NOT
19198: PUSH
19199: LD_EXP 16
19203: AND
19204: PUSH
19205: LD_EXP 4
19209: AND
19210: PUSH
19211: LD_EXP 15
19215: PUSH
19216: LD_EXP 16
19220: LESSEQUAL
19221: AND
19222: IFFALSE 19312
19224: GO 19226
19226: DISABLE
// begin enable ;
19227: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19228: LD_ADDR_OWVAR 47
19232: PUSH
19233: LD_STRING #X103-1
19235: PUSH
19236: LD_EXP 16
19240: PUSH
19241: LD_EXP 15
19245: MINUS
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19251: LD_ADDR_EXP 15
19255: PUSH
19256: LD_INT 5
19258: PPUSH
19259: CALL_OW 274
19263: PPUSH
19264: LD_INT 1
19266: PPUSH
19267: CALL_OW 275
19271: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19272: LD_INT 10
19274: PPUSH
19275: LD_INT 1
19277: PPUSH
19278: CALL_OW 287
19282: PUSH
19283: LD_INT 0
19285: EQUAL
19286: IFFALSE 19304
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19288: LD_ADDR_EXP 17
19292: PUSH
19293: LD_EXP 17
19297: PUSH
19298: LD_INT 35
19300: MINUS
19301: ST_TO_ADDR
19302: GO 19312
// farmerCratesCounter := 30 30$00 ;
19304: LD_ADDR_EXP 17
19308: PUSH
19309: LD_INT 63000
19311: ST_TO_ADDR
// end ; end_of_file
19312: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19313: LD_INT 0
19315: PPUSH
// ar_miner := 81 ;
19316: LD_ADDR_EXP 55
19320: PUSH
19321: LD_INT 81
19323: ST_TO_ADDR
// ar_crane := 88 ;
19324: LD_ADDR_EXP 54
19328: PUSH
19329: LD_INT 88
19331: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19332: LD_ADDR_EXP 49
19336: PUSH
19337: LD_INT 89
19339: ST_TO_ADDR
// us_hack := 99 ;
19340: LD_ADDR_EXP 50
19344: PUSH
19345: LD_INT 99
19347: ST_TO_ADDR
// us_artillery := 97 ;
19348: LD_ADDR_EXP 51
19352: PUSH
19353: LD_INT 97
19355: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19356: LD_ADDR_EXP 52
19360: PUSH
19361: LD_INT 91
19363: ST_TO_ADDR
// ar_mortar := 92 ;
19364: LD_ADDR_EXP 53
19368: PUSH
19369: LD_INT 92
19371: ST_TO_ADDR
// ru_radar := 98 ;
19372: LD_ADDR_EXP 48
19376: PUSH
19377: LD_INT 98
19379: ST_TO_ADDR
// tech_Artillery := 80 ;
19380: LD_ADDR_EXP 56
19384: PUSH
19385: LD_INT 80
19387: ST_TO_ADDR
// tech_RadMat := 81 ;
19388: LD_ADDR_EXP 57
19392: PUSH
19393: LD_INT 81
19395: ST_TO_ADDR
// tech_BasicTools := 82 ;
19396: LD_ADDR_EXP 58
19400: PUSH
19401: LD_INT 82
19403: ST_TO_ADDR
// tech_Cargo := 83 ;
19404: LD_ADDR_EXP 59
19408: PUSH
19409: LD_INT 83
19411: ST_TO_ADDR
// tech_Track := 84 ;
19412: LD_ADDR_EXP 60
19416: PUSH
19417: LD_INT 84
19419: ST_TO_ADDR
// tech_Crane := 85 ;
19420: LD_ADDR_EXP 61
19424: PUSH
19425: LD_INT 85
19427: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19428: LD_ADDR_EXP 62
19432: PUSH
19433: LD_INT 86
19435: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19436: LD_ADDR_EXP 63
19440: PUSH
19441: LD_INT 87
19443: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19444: LD_ADDR_EXP 64
19448: PUSH
19449: LD_INT 88
19451: ST_TO_ADDR
// class_mastodont := 31 ;
19452: LD_ADDR_EXP 65
19456: PUSH
19457: LD_INT 31
19459: ST_TO_ADDR
// class_horse := 21 ;
19460: LD_ADDR_EXP 66
19464: PUSH
19465: LD_INT 21
19467: ST_TO_ADDR
// end ;
19468: LD_VAR 0 1
19472: RET
// every 1 do
19473: GO 19475
19475: DISABLE
// InitGlobalVariables ; end_of_file
19476: CALL 19313 0 0
19480: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19481: LD_INT 0
19483: PPUSH
// if p2 = 100 then
19484: LD_VAR 0 2
19488: PUSH
19489: LD_INT 100
19491: EQUAL
19492: IFFALSE 20441
// begin if not StreamModeActive then
19494: LD_EXP 67
19498: NOT
19499: IFFALSE 19509
// StreamModeActive := true ;
19501: LD_ADDR_EXP 67
19505: PUSH
19506: LD_INT 1
19508: ST_TO_ADDR
// if p3 = 0 then
19509: LD_VAR 0 3
19513: PUSH
19514: LD_INT 0
19516: EQUAL
19517: IFFALSE 19523
// InitStreamMode ;
19519: CALL 20601 0 0
// if p3 = 1 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 1
19530: EQUAL
19531: IFFALSE 19541
// sRocket := true ;
19533: LD_ADDR_EXP 72
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 2 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 2
19548: EQUAL
19549: IFFALSE 19559
// sSpeed := true ;
19551: LD_ADDR_EXP 71
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 3 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 3
19566: EQUAL
19567: IFFALSE 19577
// sEngine := true ;
19569: LD_ADDR_EXP 73
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 4 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 4
19584: EQUAL
19585: IFFALSE 19595
// sSpec := true ;
19587: LD_ADDR_EXP 70
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 5 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 5
19602: EQUAL
19603: IFFALSE 19613
// sLevel := true ;
19605: LD_ADDR_EXP 74
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 6 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 6
19620: EQUAL
19621: IFFALSE 19631
// sArmoury := true ;
19623: LD_ADDR_EXP 75
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 7 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 7
19638: EQUAL
19639: IFFALSE 19649
// sRadar := true ;
19641: LD_ADDR_EXP 76
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// if p3 = 8 then
19649: LD_VAR 0 3
19653: PUSH
19654: LD_INT 8
19656: EQUAL
19657: IFFALSE 19667
// sBunker := true ;
19659: LD_ADDR_EXP 77
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// if p3 = 9 then
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 9
19674: EQUAL
19675: IFFALSE 19685
// sHack := true ;
19677: LD_ADDR_EXP 78
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// if p3 = 10 then
19685: LD_VAR 0 3
19689: PUSH
19690: LD_INT 10
19692: EQUAL
19693: IFFALSE 19703
// sFire := true ;
19695: LD_ADDR_EXP 79
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// if p3 = 11 then
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 11
19710: EQUAL
19711: IFFALSE 19721
// sRefresh := true ;
19713: LD_ADDR_EXP 80
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// if p3 = 12 then
19721: LD_VAR 0 3
19725: PUSH
19726: LD_INT 12
19728: EQUAL
19729: IFFALSE 19739
// sExp := true ;
19731: LD_ADDR_EXP 81
19735: PUSH
19736: LD_INT 1
19738: ST_TO_ADDR
// if p3 = 13 then
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 13
19746: EQUAL
19747: IFFALSE 19757
// sDepot := true ;
19749: LD_ADDR_EXP 82
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// if p3 = 14 then
19757: LD_VAR 0 3
19761: PUSH
19762: LD_INT 14
19764: EQUAL
19765: IFFALSE 19775
// sFlag := true ;
19767: LD_ADDR_EXP 83
19771: PUSH
19772: LD_INT 1
19774: ST_TO_ADDR
// if p3 = 15 then
19775: LD_VAR 0 3
19779: PUSH
19780: LD_INT 15
19782: EQUAL
19783: IFFALSE 19793
// sKamikadze := true ;
19785: LD_ADDR_EXP 91
19789: PUSH
19790: LD_INT 1
19792: ST_TO_ADDR
// if p3 = 16 then
19793: LD_VAR 0 3
19797: PUSH
19798: LD_INT 16
19800: EQUAL
19801: IFFALSE 19811
// sTroll := true ;
19803: LD_ADDR_EXP 92
19807: PUSH
19808: LD_INT 1
19810: ST_TO_ADDR
// if p3 = 17 then
19811: LD_VAR 0 3
19815: PUSH
19816: LD_INT 17
19818: EQUAL
19819: IFFALSE 19829
// sSlow := true ;
19821: LD_ADDR_EXP 93
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// if p3 = 18 then
19829: LD_VAR 0 3
19833: PUSH
19834: LD_INT 18
19836: EQUAL
19837: IFFALSE 19847
// sLack := true ;
19839: LD_ADDR_EXP 94
19843: PUSH
19844: LD_INT 1
19846: ST_TO_ADDR
// if p3 = 19 then
19847: LD_VAR 0 3
19851: PUSH
19852: LD_INT 19
19854: EQUAL
19855: IFFALSE 19865
// sTank := true ;
19857: LD_ADDR_EXP 96
19861: PUSH
19862: LD_INT 1
19864: ST_TO_ADDR
// if p3 = 20 then
19865: LD_VAR 0 3
19869: PUSH
19870: LD_INT 20
19872: EQUAL
19873: IFFALSE 19883
// sRemote := true ;
19875: LD_ADDR_EXP 97
19879: PUSH
19880: LD_INT 1
19882: ST_TO_ADDR
// if p3 = 21 then
19883: LD_VAR 0 3
19887: PUSH
19888: LD_INT 21
19890: EQUAL
19891: IFFALSE 19901
// sPowell := true ;
19893: LD_ADDR_EXP 98
19897: PUSH
19898: LD_INT 1
19900: ST_TO_ADDR
// if p3 = 22 then
19901: LD_VAR 0 3
19905: PUSH
19906: LD_INT 22
19908: EQUAL
19909: IFFALSE 19919
// sTeleport := true ;
19911: LD_ADDR_EXP 101
19915: PUSH
19916: LD_INT 1
19918: ST_TO_ADDR
// if p3 = 23 then
19919: LD_VAR 0 3
19923: PUSH
19924: LD_INT 23
19926: EQUAL
19927: IFFALSE 19937
// sOilTower := true ;
19929: LD_ADDR_EXP 103
19933: PUSH
19934: LD_INT 1
19936: ST_TO_ADDR
// if p3 = 24 then
19937: LD_VAR 0 3
19941: PUSH
19942: LD_INT 24
19944: EQUAL
19945: IFFALSE 19955
// sShovel := true ;
19947: LD_ADDR_EXP 104
19951: PUSH
19952: LD_INT 1
19954: ST_TO_ADDR
// if p3 = 25 then
19955: LD_VAR 0 3
19959: PUSH
19960: LD_INT 25
19962: EQUAL
19963: IFFALSE 19973
// sSheik := true ;
19965: LD_ADDR_EXP 105
19969: PUSH
19970: LD_INT 1
19972: ST_TO_ADDR
// if p3 = 26 then
19973: LD_VAR 0 3
19977: PUSH
19978: LD_INT 26
19980: EQUAL
19981: IFFALSE 19991
// sEarthquake := true ;
19983: LD_ADDR_EXP 107
19987: PUSH
19988: LD_INT 1
19990: ST_TO_ADDR
// if p3 = 27 then
19991: LD_VAR 0 3
19995: PUSH
19996: LD_INT 27
19998: EQUAL
19999: IFFALSE 20009
// sAI := true ;
20001: LD_ADDR_EXP 108
20005: PUSH
20006: LD_INT 1
20008: ST_TO_ADDR
// if p3 = 28 then
20009: LD_VAR 0 3
20013: PUSH
20014: LD_INT 28
20016: EQUAL
20017: IFFALSE 20027
// sCargo := true ;
20019: LD_ADDR_EXP 111
20023: PUSH
20024: LD_INT 1
20026: ST_TO_ADDR
// if p3 = 29 then
20027: LD_VAR 0 3
20031: PUSH
20032: LD_INT 29
20034: EQUAL
20035: IFFALSE 20045
// sDLaser := true ;
20037: LD_ADDR_EXP 112
20041: PUSH
20042: LD_INT 1
20044: ST_TO_ADDR
// if p3 = 30 then
20045: LD_VAR 0 3
20049: PUSH
20050: LD_INT 30
20052: EQUAL
20053: IFFALSE 20063
// sExchange := true ;
20055: LD_ADDR_EXP 113
20059: PUSH
20060: LD_INT 1
20062: ST_TO_ADDR
// if p3 = 31 then
20063: LD_VAR 0 3
20067: PUSH
20068: LD_INT 31
20070: EQUAL
20071: IFFALSE 20081
// sFac := true ;
20073: LD_ADDR_EXP 114
20077: PUSH
20078: LD_INT 1
20080: ST_TO_ADDR
// if p3 = 32 then
20081: LD_VAR 0 3
20085: PUSH
20086: LD_INT 32
20088: EQUAL
20089: IFFALSE 20099
// sPower := true ;
20091: LD_ADDR_EXP 115
20095: PUSH
20096: LD_INT 1
20098: ST_TO_ADDR
// if p3 = 33 then
20099: LD_VAR 0 3
20103: PUSH
20104: LD_INT 33
20106: EQUAL
20107: IFFALSE 20117
// sRandom := true ;
20109: LD_ADDR_EXP 116
20113: PUSH
20114: LD_INT 1
20116: ST_TO_ADDR
// if p3 = 34 then
20117: LD_VAR 0 3
20121: PUSH
20122: LD_INT 34
20124: EQUAL
20125: IFFALSE 20135
// sShield := true ;
20127: LD_ADDR_EXP 117
20131: PUSH
20132: LD_INT 1
20134: ST_TO_ADDR
// if p3 = 35 then
20135: LD_VAR 0 3
20139: PUSH
20140: LD_INT 35
20142: EQUAL
20143: IFFALSE 20153
// sTime := true ;
20145: LD_ADDR_EXP 118
20149: PUSH
20150: LD_INT 1
20152: ST_TO_ADDR
// if p3 = 36 then
20153: LD_VAR 0 3
20157: PUSH
20158: LD_INT 36
20160: EQUAL
20161: IFFALSE 20171
// sTools := true ;
20163: LD_ADDR_EXP 119
20167: PUSH
20168: LD_INT 1
20170: ST_TO_ADDR
// if p3 = 101 then
20171: LD_VAR 0 3
20175: PUSH
20176: LD_INT 101
20178: EQUAL
20179: IFFALSE 20189
// sSold := true ;
20181: LD_ADDR_EXP 84
20185: PUSH
20186: LD_INT 1
20188: ST_TO_ADDR
// if p3 = 102 then
20189: LD_VAR 0 3
20193: PUSH
20194: LD_INT 102
20196: EQUAL
20197: IFFALSE 20207
// sDiff := true ;
20199: LD_ADDR_EXP 85
20203: PUSH
20204: LD_INT 1
20206: ST_TO_ADDR
// if p3 = 103 then
20207: LD_VAR 0 3
20211: PUSH
20212: LD_INT 103
20214: EQUAL
20215: IFFALSE 20225
// sFog := true ;
20217: LD_ADDR_EXP 88
20221: PUSH
20222: LD_INT 1
20224: ST_TO_ADDR
// if p3 = 104 then
20225: LD_VAR 0 3
20229: PUSH
20230: LD_INT 104
20232: EQUAL
20233: IFFALSE 20243
// sReset := true ;
20235: LD_ADDR_EXP 89
20239: PUSH
20240: LD_INT 1
20242: ST_TO_ADDR
// if p3 = 105 then
20243: LD_VAR 0 3
20247: PUSH
20248: LD_INT 105
20250: EQUAL
20251: IFFALSE 20261
// sSun := true ;
20253: LD_ADDR_EXP 90
20257: PUSH
20258: LD_INT 1
20260: ST_TO_ADDR
// if p3 = 106 then
20261: LD_VAR 0 3
20265: PUSH
20266: LD_INT 106
20268: EQUAL
20269: IFFALSE 20279
// sTiger := true ;
20271: LD_ADDR_EXP 86
20275: PUSH
20276: LD_INT 1
20278: ST_TO_ADDR
// if p3 = 107 then
20279: LD_VAR 0 3
20283: PUSH
20284: LD_INT 107
20286: EQUAL
20287: IFFALSE 20297
// sBomb := true ;
20289: LD_ADDR_EXP 87
20293: PUSH
20294: LD_INT 1
20296: ST_TO_ADDR
// if p3 = 108 then
20297: LD_VAR 0 3
20301: PUSH
20302: LD_INT 108
20304: EQUAL
20305: IFFALSE 20315
// sWound := true ;
20307: LD_ADDR_EXP 95
20311: PUSH
20312: LD_INT 1
20314: ST_TO_ADDR
// if p3 = 109 then
20315: LD_VAR 0 3
20319: PUSH
20320: LD_INT 109
20322: EQUAL
20323: IFFALSE 20333
// sBetray := true ;
20325: LD_ADDR_EXP 99
20329: PUSH
20330: LD_INT 1
20332: ST_TO_ADDR
// if p3 = 110 then
20333: LD_VAR 0 3
20337: PUSH
20338: LD_INT 110
20340: EQUAL
20341: IFFALSE 20351
// sContamin := true ;
20343: LD_ADDR_EXP 100
20347: PUSH
20348: LD_INT 1
20350: ST_TO_ADDR
// if p3 = 111 then
20351: LD_VAR 0 3
20355: PUSH
20356: LD_INT 111
20358: EQUAL
20359: IFFALSE 20369
// sOil := true ;
20361: LD_ADDR_EXP 102
20365: PUSH
20366: LD_INT 1
20368: ST_TO_ADDR
// if p3 = 112 then
20369: LD_VAR 0 3
20373: PUSH
20374: LD_INT 112
20376: EQUAL
20377: IFFALSE 20387
// sStu := true ;
20379: LD_ADDR_EXP 106
20383: PUSH
20384: LD_INT 1
20386: ST_TO_ADDR
// if p3 = 113 then
20387: LD_VAR 0 3
20391: PUSH
20392: LD_INT 113
20394: EQUAL
20395: IFFALSE 20405
// sBazooka := true ;
20397: LD_ADDR_EXP 109
20401: PUSH
20402: LD_INT 1
20404: ST_TO_ADDR
// if p3 = 114 then
20405: LD_VAR 0 3
20409: PUSH
20410: LD_INT 114
20412: EQUAL
20413: IFFALSE 20423
// sMortar := true ;
20415: LD_ADDR_EXP 110
20419: PUSH
20420: LD_INT 1
20422: ST_TO_ADDR
// if p3 = 115 then
20423: LD_VAR 0 3
20427: PUSH
20428: LD_INT 115
20430: EQUAL
20431: IFFALSE 20441
// sRanger := true ;
20433: LD_ADDR_EXP 120
20437: PUSH
20438: LD_INT 1
20440: ST_TO_ADDR
// end ; if p2 = 101 then
20441: LD_VAR 0 2
20445: PUSH
20446: LD_INT 101
20448: EQUAL
20449: IFFALSE 20577
// begin case p3 of 1 :
20451: LD_VAR 0 3
20455: PUSH
20456: LD_INT 1
20458: DOUBLE
20459: EQUAL
20460: IFTRUE 20464
20462: GO 20471
20464: POP
// hHackUnlimitedResources ; 2 :
20465: CALL 31614 0 0
20469: GO 20577
20471: LD_INT 2
20473: DOUBLE
20474: EQUAL
20475: IFTRUE 20479
20477: GO 20486
20479: POP
// hHackSetLevel10 ; 3 :
20480: CALL 31747 0 0
20484: GO 20577
20486: LD_INT 3
20488: DOUBLE
20489: EQUAL
20490: IFTRUE 20494
20492: GO 20501
20494: POP
// hHackSetLevel10YourUnits ; 4 :
20495: CALL 31832 0 0
20499: GO 20577
20501: LD_INT 4
20503: DOUBLE
20504: EQUAL
20505: IFTRUE 20509
20507: GO 20516
20509: POP
// hHackInvincible ; 5 :
20510: CALL 32280 0 0
20514: GO 20577
20516: LD_INT 5
20518: DOUBLE
20519: EQUAL
20520: IFTRUE 20524
20522: GO 20531
20524: POP
// hHackInvisible ; 6 :
20525: CALL 32391 0 0
20529: GO 20577
20531: LD_INT 6
20533: DOUBLE
20534: EQUAL
20535: IFTRUE 20539
20537: GO 20546
20539: POP
// hHackChangeYourSide ; 7 :
20540: CALL 32448 0 0
20544: GO 20577
20546: LD_INT 7
20548: DOUBLE
20549: EQUAL
20550: IFTRUE 20554
20552: GO 20561
20554: POP
// hHackChangeUnitSide ; 8 :
20555: CALL 32490 0 0
20559: GO 20577
20561: LD_INT 8
20563: DOUBLE
20564: EQUAL
20565: IFTRUE 20569
20567: GO 20576
20569: POP
// hHackFog ; end ;
20570: CALL 32591 0 0
20574: GO 20577
20576: POP
// end ; end ;
20577: LD_VAR 0 7
20581: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20582: GO 20584
20584: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20585: LD_STRING initStreamRollete();
20587: PPUSH
20588: CALL_OW 559
// InitStreamMode ;
20592: CALL 20601 0 0
// DefineStreamItems ( ) ;
20596: CALL 21041 0 0
// end ;
20600: END
// function InitStreamMode ; begin
20601: LD_INT 0
20603: PPUSH
// streamModeActive := false ;
20604: LD_ADDR_EXP 67
20608: PUSH
20609: LD_INT 0
20611: ST_TO_ADDR
// normalCounter := 36 ;
20612: LD_ADDR_EXP 68
20616: PUSH
20617: LD_INT 36
20619: ST_TO_ADDR
// hardcoreCounter := 16 ;
20620: LD_ADDR_EXP 69
20624: PUSH
20625: LD_INT 16
20627: ST_TO_ADDR
// sRocket := false ;
20628: LD_ADDR_EXP 72
20632: PUSH
20633: LD_INT 0
20635: ST_TO_ADDR
// sSpeed := false ;
20636: LD_ADDR_EXP 71
20640: PUSH
20641: LD_INT 0
20643: ST_TO_ADDR
// sEngine := false ;
20644: LD_ADDR_EXP 73
20648: PUSH
20649: LD_INT 0
20651: ST_TO_ADDR
// sSpec := false ;
20652: LD_ADDR_EXP 70
20656: PUSH
20657: LD_INT 0
20659: ST_TO_ADDR
// sLevel := false ;
20660: LD_ADDR_EXP 74
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// sArmoury := false ;
20668: LD_ADDR_EXP 75
20672: PUSH
20673: LD_INT 0
20675: ST_TO_ADDR
// sRadar := false ;
20676: LD_ADDR_EXP 76
20680: PUSH
20681: LD_INT 0
20683: ST_TO_ADDR
// sBunker := false ;
20684: LD_ADDR_EXP 77
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// sHack := false ;
20692: LD_ADDR_EXP 78
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// sFire := false ;
20700: LD_ADDR_EXP 79
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// sRefresh := false ;
20708: LD_ADDR_EXP 80
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
// sExp := false ;
20716: LD_ADDR_EXP 81
20720: PUSH
20721: LD_INT 0
20723: ST_TO_ADDR
// sDepot := false ;
20724: LD_ADDR_EXP 82
20728: PUSH
20729: LD_INT 0
20731: ST_TO_ADDR
// sFlag := false ;
20732: LD_ADDR_EXP 83
20736: PUSH
20737: LD_INT 0
20739: ST_TO_ADDR
// sKamikadze := false ;
20740: LD_ADDR_EXP 91
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// sTroll := false ;
20748: LD_ADDR_EXP 92
20752: PUSH
20753: LD_INT 0
20755: ST_TO_ADDR
// sSlow := false ;
20756: LD_ADDR_EXP 93
20760: PUSH
20761: LD_INT 0
20763: ST_TO_ADDR
// sLack := false ;
20764: LD_ADDR_EXP 94
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
// sTank := false ;
20772: LD_ADDR_EXP 96
20776: PUSH
20777: LD_INT 0
20779: ST_TO_ADDR
// sRemote := false ;
20780: LD_ADDR_EXP 97
20784: PUSH
20785: LD_INT 0
20787: ST_TO_ADDR
// sPowell := false ;
20788: LD_ADDR_EXP 98
20792: PUSH
20793: LD_INT 0
20795: ST_TO_ADDR
// sTeleport := false ;
20796: LD_ADDR_EXP 101
20800: PUSH
20801: LD_INT 0
20803: ST_TO_ADDR
// sOilTower := false ;
20804: LD_ADDR_EXP 103
20808: PUSH
20809: LD_INT 0
20811: ST_TO_ADDR
// sShovel := false ;
20812: LD_ADDR_EXP 104
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// sSheik := false ;
20820: LD_ADDR_EXP 105
20824: PUSH
20825: LD_INT 0
20827: ST_TO_ADDR
// sEarthquake := false ;
20828: LD_ADDR_EXP 107
20832: PUSH
20833: LD_INT 0
20835: ST_TO_ADDR
// sAI := false ;
20836: LD_ADDR_EXP 108
20840: PUSH
20841: LD_INT 0
20843: ST_TO_ADDR
// sCargo := false ;
20844: LD_ADDR_EXP 111
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
// sDLaser := false ;
20852: LD_ADDR_EXP 112
20856: PUSH
20857: LD_INT 0
20859: ST_TO_ADDR
// sExchange := false ;
20860: LD_ADDR_EXP 113
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// sFac := false ;
20868: LD_ADDR_EXP 114
20872: PUSH
20873: LD_INT 0
20875: ST_TO_ADDR
// sPower := false ;
20876: LD_ADDR_EXP 115
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// sRandom := false ;
20884: LD_ADDR_EXP 116
20888: PUSH
20889: LD_INT 0
20891: ST_TO_ADDR
// sShield := false ;
20892: LD_ADDR_EXP 117
20896: PUSH
20897: LD_INT 0
20899: ST_TO_ADDR
// sTime := false ;
20900: LD_ADDR_EXP 118
20904: PUSH
20905: LD_INT 0
20907: ST_TO_ADDR
// sTools := false ;
20908: LD_ADDR_EXP 119
20912: PUSH
20913: LD_INT 0
20915: ST_TO_ADDR
// sSold := false ;
20916: LD_ADDR_EXP 84
20920: PUSH
20921: LD_INT 0
20923: ST_TO_ADDR
// sDiff := false ;
20924: LD_ADDR_EXP 85
20928: PUSH
20929: LD_INT 0
20931: ST_TO_ADDR
// sFog := false ;
20932: LD_ADDR_EXP 88
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// sReset := false ;
20940: LD_ADDR_EXP 89
20944: PUSH
20945: LD_INT 0
20947: ST_TO_ADDR
// sSun := false ;
20948: LD_ADDR_EXP 90
20952: PUSH
20953: LD_INT 0
20955: ST_TO_ADDR
// sTiger := false ;
20956: LD_ADDR_EXP 86
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// sBomb := false ;
20964: LD_ADDR_EXP 87
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// sWound := false ;
20972: LD_ADDR_EXP 95
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
// sBetray := false ;
20980: LD_ADDR_EXP 99
20984: PUSH
20985: LD_INT 0
20987: ST_TO_ADDR
// sContamin := false ;
20988: LD_ADDR_EXP 100
20992: PUSH
20993: LD_INT 0
20995: ST_TO_ADDR
// sOil := false ;
20996: LD_ADDR_EXP 102
21000: PUSH
21001: LD_INT 0
21003: ST_TO_ADDR
// sStu := false ;
21004: LD_ADDR_EXP 106
21008: PUSH
21009: LD_INT 0
21011: ST_TO_ADDR
// sBazooka := false ;
21012: LD_ADDR_EXP 109
21016: PUSH
21017: LD_INT 0
21019: ST_TO_ADDR
// sMortar := false ;
21020: LD_ADDR_EXP 110
21024: PUSH
21025: LD_INT 0
21027: ST_TO_ADDR
// sRanger := false ;
21028: LD_ADDR_EXP 120
21032: PUSH
21033: LD_INT 0
21035: ST_TO_ADDR
// end ;
21036: LD_VAR 0 1
21040: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21041: LD_INT 0
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
21047: PPUSH
// result := [ ] ;
21048: LD_ADDR_VAR 0 1
21052: PUSH
21053: EMPTY
21054: ST_TO_ADDR
// if campaign_id = 1 then
21055: LD_OWVAR 69
21059: PUSH
21060: LD_INT 1
21062: EQUAL
21063: IFFALSE 24001
// begin case mission_number of 1 :
21065: LD_OWVAR 70
21069: PUSH
21070: LD_INT 1
21072: DOUBLE
21073: EQUAL
21074: IFTRUE 21078
21076: GO 21142
21078: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21079: LD_ADDR_VAR 0 1
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: LD_INT 4
21089: PUSH
21090: LD_INT 11
21092: PUSH
21093: LD_INT 12
21095: PUSH
21096: LD_INT 15
21098: PUSH
21099: LD_INT 16
21101: PUSH
21102: LD_INT 22
21104: PUSH
21105: LD_INT 23
21107: PUSH
21108: LD_INT 26
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 101
21124: PUSH
21125: LD_INT 102
21127: PUSH
21128: LD_INT 106
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: ST_TO_ADDR
21140: GO 23999
21142: LD_INT 2
21144: DOUBLE
21145: EQUAL
21146: IFTRUE 21150
21148: GO 21222
21150: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21151: LD_ADDR_VAR 0 1
21155: PUSH
21156: LD_INT 2
21158: PUSH
21159: LD_INT 4
21161: PUSH
21162: LD_INT 11
21164: PUSH
21165: LD_INT 12
21167: PUSH
21168: LD_INT 15
21170: PUSH
21171: LD_INT 16
21173: PUSH
21174: LD_INT 22
21176: PUSH
21177: LD_INT 23
21179: PUSH
21180: LD_INT 26
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 101
21196: PUSH
21197: LD_INT 102
21199: PUSH
21200: LD_INT 105
21202: PUSH
21203: LD_INT 106
21205: PUSH
21206: LD_INT 108
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: ST_TO_ADDR
21220: GO 23999
21222: LD_INT 3
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21306
21230: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21231: LD_ADDR_VAR 0 1
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: LD_INT 4
21241: PUSH
21242: LD_INT 5
21244: PUSH
21245: LD_INT 11
21247: PUSH
21248: LD_INT 12
21250: PUSH
21251: LD_INT 15
21253: PUSH
21254: LD_INT 16
21256: PUSH
21257: LD_INT 22
21259: PUSH
21260: LD_INT 26
21262: PUSH
21263: LD_INT 36
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 101
21280: PUSH
21281: LD_INT 102
21283: PUSH
21284: LD_INT 105
21286: PUSH
21287: LD_INT 106
21289: PUSH
21290: LD_INT 108
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: ST_TO_ADDR
21304: GO 23999
21306: LD_INT 4
21308: DOUBLE
21309: EQUAL
21310: IFTRUE 21314
21312: GO 21398
21314: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21315: LD_ADDR_VAR 0 1
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: LD_INT 4
21325: PUSH
21326: LD_INT 5
21328: PUSH
21329: LD_INT 8
21331: PUSH
21332: LD_INT 11
21334: PUSH
21335: LD_INT 12
21337: PUSH
21338: LD_INT 15
21340: PUSH
21341: LD_INT 16
21343: PUSH
21344: LD_INT 22
21346: PUSH
21347: LD_INT 23
21349: PUSH
21350: LD_INT 26
21352: PUSH
21353: LD_INT 36
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 101
21372: PUSH
21373: LD_INT 102
21375: PUSH
21376: LD_INT 105
21378: PUSH
21379: LD_INT 106
21381: PUSH
21382: LD_INT 108
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: ST_TO_ADDR
21396: GO 23999
21398: LD_INT 5
21400: DOUBLE
21401: EQUAL
21402: IFTRUE 21406
21404: GO 21506
21406: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21407: LD_ADDR_VAR 0 1
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: LD_INT 4
21417: PUSH
21418: LD_INT 5
21420: PUSH
21421: LD_INT 6
21423: PUSH
21424: LD_INT 8
21426: PUSH
21427: LD_INT 11
21429: PUSH
21430: LD_INT 12
21432: PUSH
21433: LD_INT 15
21435: PUSH
21436: LD_INT 16
21438: PUSH
21439: LD_INT 22
21441: PUSH
21442: LD_INT 23
21444: PUSH
21445: LD_INT 25
21447: PUSH
21448: LD_INT 26
21450: PUSH
21451: LD_INT 36
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 101
21472: PUSH
21473: LD_INT 102
21475: PUSH
21476: LD_INT 105
21478: PUSH
21479: LD_INT 106
21481: PUSH
21482: LD_INT 108
21484: PUSH
21485: LD_INT 109
21487: PUSH
21488: LD_INT 112
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: ST_TO_ADDR
21504: GO 23999
21506: LD_INT 6
21508: DOUBLE
21509: EQUAL
21510: IFTRUE 21514
21512: GO 21634
21514: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21515: LD_ADDR_VAR 0 1
21519: PUSH
21520: LD_INT 2
21522: PUSH
21523: LD_INT 4
21525: PUSH
21526: LD_INT 5
21528: PUSH
21529: LD_INT 6
21531: PUSH
21532: LD_INT 8
21534: PUSH
21535: LD_INT 11
21537: PUSH
21538: LD_INT 12
21540: PUSH
21541: LD_INT 15
21543: PUSH
21544: LD_INT 16
21546: PUSH
21547: LD_INT 20
21549: PUSH
21550: LD_INT 21
21552: PUSH
21553: LD_INT 22
21555: PUSH
21556: LD_INT 23
21558: PUSH
21559: LD_INT 25
21561: PUSH
21562: LD_INT 26
21564: PUSH
21565: LD_INT 30
21567: PUSH
21568: LD_INT 31
21570: PUSH
21571: LD_INT 32
21573: PUSH
21574: LD_INT 36
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 101
21600: PUSH
21601: LD_INT 102
21603: PUSH
21604: LD_INT 105
21606: PUSH
21607: LD_INT 106
21609: PUSH
21610: LD_INT 108
21612: PUSH
21613: LD_INT 109
21615: PUSH
21616: LD_INT 112
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: ST_TO_ADDR
21632: GO 23999
21634: LD_INT 7
21636: DOUBLE
21637: EQUAL
21638: IFTRUE 21642
21640: GO 21742
21642: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21643: LD_ADDR_VAR 0 1
21647: PUSH
21648: LD_INT 2
21650: PUSH
21651: LD_INT 4
21653: PUSH
21654: LD_INT 5
21656: PUSH
21657: LD_INT 7
21659: PUSH
21660: LD_INT 11
21662: PUSH
21663: LD_INT 12
21665: PUSH
21666: LD_INT 15
21668: PUSH
21669: LD_INT 16
21671: PUSH
21672: LD_INT 20
21674: PUSH
21675: LD_INT 21
21677: PUSH
21678: LD_INT 22
21680: PUSH
21681: LD_INT 23
21683: PUSH
21684: LD_INT 25
21686: PUSH
21687: LD_INT 26
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 101
21708: PUSH
21709: LD_INT 102
21711: PUSH
21712: LD_INT 103
21714: PUSH
21715: LD_INT 105
21717: PUSH
21718: LD_INT 106
21720: PUSH
21721: LD_INT 108
21723: PUSH
21724: LD_INT 112
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: ST_TO_ADDR
21740: GO 23999
21742: LD_INT 8
21744: DOUBLE
21745: EQUAL
21746: IFTRUE 21750
21748: GO 21878
21750: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21751: LD_ADDR_VAR 0 1
21755: PUSH
21756: LD_INT 2
21758: PUSH
21759: LD_INT 4
21761: PUSH
21762: LD_INT 5
21764: PUSH
21765: LD_INT 6
21767: PUSH
21768: LD_INT 7
21770: PUSH
21771: LD_INT 8
21773: PUSH
21774: LD_INT 11
21776: PUSH
21777: LD_INT 12
21779: PUSH
21780: LD_INT 15
21782: PUSH
21783: LD_INT 16
21785: PUSH
21786: LD_INT 20
21788: PUSH
21789: LD_INT 21
21791: PUSH
21792: LD_INT 22
21794: PUSH
21795: LD_INT 23
21797: PUSH
21798: LD_INT 25
21800: PUSH
21801: LD_INT 26
21803: PUSH
21804: LD_INT 30
21806: PUSH
21807: LD_INT 31
21809: PUSH
21810: LD_INT 32
21812: PUSH
21813: LD_INT 36
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 101
21840: PUSH
21841: LD_INT 102
21843: PUSH
21844: LD_INT 103
21846: PUSH
21847: LD_INT 105
21849: PUSH
21850: LD_INT 106
21852: PUSH
21853: LD_INT 108
21855: PUSH
21856: LD_INT 109
21858: PUSH
21859: LD_INT 112
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: ST_TO_ADDR
21876: GO 23999
21878: LD_INT 9
21880: DOUBLE
21881: EQUAL
21882: IFTRUE 21886
21884: GO 22022
21886: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21887: LD_ADDR_VAR 0 1
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: LD_INT 4
21897: PUSH
21898: LD_INT 5
21900: PUSH
21901: LD_INT 6
21903: PUSH
21904: LD_INT 7
21906: PUSH
21907: LD_INT 8
21909: PUSH
21910: LD_INT 11
21912: PUSH
21913: LD_INT 12
21915: PUSH
21916: LD_INT 15
21918: PUSH
21919: LD_INT 16
21921: PUSH
21922: LD_INT 20
21924: PUSH
21925: LD_INT 21
21927: PUSH
21928: LD_INT 22
21930: PUSH
21931: LD_INT 23
21933: PUSH
21934: LD_INT 25
21936: PUSH
21937: LD_INT 26
21939: PUSH
21940: LD_INT 28
21942: PUSH
21943: LD_INT 30
21945: PUSH
21946: LD_INT 31
21948: PUSH
21949: LD_INT 32
21951: PUSH
21952: LD_INT 36
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 101
21980: PUSH
21981: LD_INT 102
21983: PUSH
21984: LD_INT 103
21986: PUSH
21987: LD_INT 105
21989: PUSH
21990: LD_INT 106
21992: PUSH
21993: LD_INT 108
21995: PUSH
21996: LD_INT 109
21998: PUSH
21999: LD_INT 112
22001: PUSH
22002: LD_INT 114
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: ST_TO_ADDR
22020: GO 23999
22022: LD_INT 10
22024: DOUBLE
22025: EQUAL
22026: IFTRUE 22030
22028: GO 22214
22030: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22031: LD_ADDR_VAR 0 1
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: LD_INT 4
22041: PUSH
22042: LD_INT 5
22044: PUSH
22045: LD_INT 6
22047: PUSH
22048: LD_INT 7
22050: PUSH
22051: LD_INT 8
22053: PUSH
22054: LD_INT 9
22056: PUSH
22057: LD_INT 10
22059: PUSH
22060: LD_INT 11
22062: PUSH
22063: LD_INT 12
22065: PUSH
22066: LD_INT 13
22068: PUSH
22069: LD_INT 14
22071: PUSH
22072: LD_INT 15
22074: PUSH
22075: LD_INT 16
22077: PUSH
22078: LD_INT 17
22080: PUSH
22081: LD_INT 18
22083: PUSH
22084: LD_INT 19
22086: PUSH
22087: LD_INT 20
22089: PUSH
22090: LD_INT 21
22092: PUSH
22093: LD_INT 22
22095: PUSH
22096: LD_INT 23
22098: PUSH
22099: LD_INT 24
22101: PUSH
22102: LD_INT 25
22104: PUSH
22105: LD_INT 26
22107: PUSH
22108: LD_INT 28
22110: PUSH
22111: LD_INT 30
22113: PUSH
22114: LD_INT 31
22116: PUSH
22117: LD_INT 32
22119: PUSH
22120: LD_INT 36
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 101
22156: PUSH
22157: LD_INT 102
22159: PUSH
22160: LD_INT 103
22162: PUSH
22163: LD_INT 104
22165: PUSH
22166: LD_INT 105
22168: PUSH
22169: LD_INT 106
22171: PUSH
22172: LD_INT 107
22174: PUSH
22175: LD_INT 108
22177: PUSH
22178: LD_INT 109
22180: PUSH
22181: LD_INT 110
22183: PUSH
22184: LD_INT 111
22186: PUSH
22187: LD_INT 112
22189: PUSH
22190: LD_INT 114
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: ST_TO_ADDR
22212: GO 23999
22214: LD_INT 11
22216: DOUBLE
22217: EQUAL
22218: IFTRUE 22222
22220: GO 22414
22222: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22223: LD_ADDR_VAR 0 1
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: LD_INT 3
22233: PUSH
22234: LD_INT 4
22236: PUSH
22237: LD_INT 5
22239: PUSH
22240: LD_INT 6
22242: PUSH
22243: LD_INT 7
22245: PUSH
22246: LD_INT 8
22248: PUSH
22249: LD_INT 9
22251: PUSH
22252: LD_INT 10
22254: PUSH
22255: LD_INT 11
22257: PUSH
22258: LD_INT 12
22260: PUSH
22261: LD_INT 13
22263: PUSH
22264: LD_INT 14
22266: PUSH
22267: LD_INT 15
22269: PUSH
22270: LD_INT 16
22272: PUSH
22273: LD_INT 17
22275: PUSH
22276: LD_INT 18
22278: PUSH
22279: LD_INT 19
22281: PUSH
22282: LD_INT 20
22284: PUSH
22285: LD_INT 21
22287: PUSH
22288: LD_INT 22
22290: PUSH
22291: LD_INT 23
22293: PUSH
22294: LD_INT 24
22296: PUSH
22297: LD_INT 25
22299: PUSH
22300: LD_INT 26
22302: PUSH
22303: LD_INT 28
22305: PUSH
22306: LD_INT 30
22308: PUSH
22309: LD_INT 31
22311: PUSH
22312: LD_INT 32
22314: PUSH
22315: LD_INT 34
22317: PUSH
22318: LD_INT 36
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 101
22356: PUSH
22357: LD_INT 102
22359: PUSH
22360: LD_INT 103
22362: PUSH
22363: LD_INT 104
22365: PUSH
22366: LD_INT 105
22368: PUSH
22369: LD_INT 106
22371: PUSH
22372: LD_INT 107
22374: PUSH
22375: LD_INT 108
22377: PUSH
22378: LD_INT 109
22380: PUSH
22381: LD_INT 110
22383: PUSH
22384: LD_INT 111
22386: PUSH
22387: LD_INT 112
22389: PUSH
22390: LD_INT 114
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: ST_TO_ADDR
22412: GO 23999
22414: LD_INT 12
22416: DOUBLE
22417: EQUAL
22418: IFTRUE 22422
22420: GO 22630
22422: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22423: LD_ADDR_VAR 0 1
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: LD_INT 2
22433: PUSH
22434: LD_INT 3
22436: PUSH
22437: LD_INT 4
22439: PUSH
22440: LD_INT 5
22442: PUSH
22443: LD_INT 6
22445: PUSH
22446: LD_INT 7
22448: PUSH
22449: LD_INT 8
22451: PUSH
22452: LD_INT 9
22454: PUSH
22455: LD_INT 10
22457: PUSH
22458: LD_INT 11
22460: PUSH
22461: LD_INT 12
22463: PUSH
22464: LD_INT 13
22466: PUSH
22467: LD_INT 14
22469: PUSH
22470: LD_INT 15
22472: PUSH
22473: LD_INT 16
22475: PUSH
22476: LD_INT 17
22478: PUSH
22479: LD_INT 18
22481: PUSH
22482: LD_INT 19
22484: PUSH
22485: LD_INT 20
22487: PUSH
22488: LD_INT 21
22490: PUSH
22491: LD_INT 22
22493: PUSH
22494: LD_INT 23
22496: PUSH
22497: LD_INT 24
22499: PUSH
22500: LD_INT 25
22502: PUSH
22503: LD_INT 26
22505: PUSH
22506: LD_INT 27
22508: PUSH
22509: LD_INT 28
22511: PUSH
22512: LD_INT 30
22514: PUSH
22515: LD_INT 31
22517: PUSH
22518: LD_INT 32
22520: PUSH
22521: LD_INT 33
22523: PUSH
22524: LD_INT 34
22526: PUSH
22527: LD_INT 36
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 101
22568: PUSH
22569: LD_INT 102
22571: PUSH
22572: LD_INT 103
22574: PUSH
22575: LD_INT 104
22577: PUSH
22578: LD_INT 105
22580: PUSH
22581: LD_INT 106
22583: PUSH
22584: LD_INT 107
22586: PUSH
22587: LD_INT 108
22589: PUSH
22590: LD_INT 109
22592: PUSH
22593: LD_INT 110
22595: PUSH
22596: LD_INT 111
22598: PUSH
22599: LD_INT 112
22601: PUSH
22602: LD_INT 113
22604: PUSH
22605: LD_INT 114
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: ST_TO_ADDR
22628: GO 23999
22630: LD_INT 13
22632: DOUBLE
22633: EQUAL
22634: IFTRUE 22638
22636: GO 22834
22638: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22639: LD_ADDR_VAR 0 1
22643: PUSH
22644: LD_INT 1
22646: PUSH
22647: LD_INT 2
22649: PUSH
22650: LD_INT 3
22652: PUSH
22653: LD_INT 4
22655: PUSH
22656: LD_INT 5
22658: PUSH
22659: LD_INT 8
22661: PUSH
22662: LD_INT 9
22664: PUSH
22665: LD_INT 10
22667: PUSH
22668: LD_INT 11
22670: PUSH
22671: LD_INT 12
22673: PUSH
22674: LD_INT 14
22676: PUSH
22677: LD_INT 15
22679: PUSH
22680: LD_INT 16
22682: PUSH
22683: LD_INT 17
22685: PUSH
22686: LD_INT 18
22688: PUSH
22689: LD_INT 19
22691: PUSH
22692: LD_INT 20
22694: PUSH
22695: LD_INT 21
22697: PUSH
22698: LD_INT 22
22700: PUSH
22701: LD_INT 23
22703: PUSH
22704: LD_INT 24
22706: PUSH
22707: LD_INT 25
22709: PUSH
22710: LD_INT 26
22712: PUSH
22713: LD_INT 27
22715: PUSH
22716: LD_INT 28
22718: PUSH
22719: LD_INT 30
22721: PUSH
22722: LD_INT 31
22724: PUSH
22725: LD_INT 32
22727: PUSH
22728: LD_INT 33
22730: PUSH
22731: LD_INT 34
22733: PUSH
22734: LD_INT 36
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 101
22772: PUSH
22773: LD_INT 102
22775: PUSH
22776: LD_INT 103
22778: PUSH
22779: LD_INT 104
22781: PUSH
22782: LD_INT 105
22784: PUSH
22785: LD_INT 106
22787: PUSH
22788: LD_INT 107
22790: PUSH
22791: LD_INT 108
22793: PUSH
22794: LD_INT 109
22796: PUSH
22797: LD_INT 110
22799: PUSH
22800: LD_INT 111
22802: PUSH
22803: LD_INT 112
22805: PUSH
22806: LD_INT 113
22808: PUSH
22809: LD_INT 114
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: ST_TO_ADDR
22832: GO 23999
22834: LD_INT 14
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 23054
22842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22843: LD_ADDR_VAR 0 1
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: LD_INT 2
22853: PUSH
22854: LD_INT 3
22856: PUSH
22857: LD_INT 4
22859: PUSH
22860: LD_INT 5
22862: PUSH
22863: LD_INT 6
22865: PUSH
22866: LD_INT 7
22868: PUSH
22869: LD_INT 8
22871: PUSH
22872: LD_INT 9
22874: PUSH
22875: LD_INT 10
22877: PUSH
22878: LD_INT 11
22880: PUSH
22881: LD_INT 12
22883: PUSH
22884: LD_INT 13
22886: PUSH
22887: LD_INT 14
22889: PUSH
22890: LD_INT 15
22892: PUSH
22893: LD_INT 16
22895: PUSH
22896: LD_INT 17
22898: PUSH
22899: LD_INT 18
22901: PUSH
22902: LD_INT 19
22904: PUSH
22905: LD_INT 20
22907: PUSH
22908: LD_INT 21
22910: PUSH
22911: LD_INT 22
22913: PUSH
22914: LD_INT 23
22916: PUSH
22917: LD_INT 24
22919: PUSH
22920: LD_INT 25
22922: PUSH
22923: LD_INT 26
22925: PUSH
22926: LD_INT 27
22928: PUSH
22929: LD_INT 28
22931: PUSH
22932: LD_INT 29
22934: PUSH
22935: LD_INT 30
22937: PUSH
22938: LD_INT 31
22940: PUSH
22941: LD_INT 32
22943: PUSH
22944: LD_INT 33
22946: PUSH
22947: LD_INT 34
22949: PUSH
22950: LD_INT 36
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 101
22992: PUSH
22993: LD_INT 102
22995: PUSH
22996: LD_INT 103
22998: PUSH
22999: LD_INT 104
23001: PUSH
23002: LD_INT 105
23004: PUSH
23005: LD_INT 106
23007: PUSH
23008: LD_INT 107
23010: PUSH
23011: LD_INT 108
23013: PUSH
23014: LD_INT 109
23016: PUSH
23017: LD_INT 110
23019: PUSH
23020: LD_INT 111
23022: PUSH
23023: LD_INT 112
23025: PUSH
23026: LD_INT 113
23028: PUSH
23029: LD_INT 114
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: ST_TO_ADDR
23052: GO 23999
23054: LD_INT 15
23056: DOUBLE
23057: EQUAL
23058: IFTRUE 23062
23060: GO 23274
23062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23063: LD_ADDR_VAR 0 1
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: LD_INT 2
23073: PUSH
23074: LD_INT 3
23076: PUSH
23077: LD_INT 4
23079: PUSH
23080: LD_INT 5
23082: PUSH
23083: LD_INT 6
23085: PUSH
23086: LD_INT 7
23088: PUSH
23089: LD_INT 8
23091: PUSH
23092: LD_INT 9
23094: PUSH
23095: LD_INT 10
23097: PUSH
23098: LD_INT 11
23100: PUSH
23101: LD_INT 12
23103: PUSH
23104: LD_INT 13
23106: PUSH
23107: LD_INT 14
23109: PUSH
23110: LD_INT 15
23112: PUSH
23113: LD_INT 16
23115: PUSH
23116: LD_INT 17
23118: PUSH
23119: LD_INT 18
23121: PUSH
23122: LD_INT 19
23124: PUSH
23125: LD_INT 20
23127: PUSH
23128: LD_INT 21
23130: PUSH
23131: LD_INT 22
23133: PUSH
23134: LD_INT 23
23136: PUSH
23137: LD_INT 24
23139: PUSH
23140: LD_INT 25
23142: PUSH
23143: LD_INT 26
23145: PUSH
23146: LD_INT 27
23148: PUSH
23149: LD_INT 28
23151: PUSH
23152: LD_INT 29
23154: PUSH
23155: LD_INT 30
23157: PUSH
23158: LD_INT 31
23160: PUSH
23161: LD_INT 32
23163: PUSH
23164: LD_INT 33
23166: PUSH
23167: LD_INT 34
23169: PUSH
23170: LD_INT 36
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 101
23212: PUSH
23213: LD_INT 102
23215: PUSH
23216: LD_INT 103
23218: PUSH
23219: LD_INT 104
23221: PUSH
23222: LD_INT 105
23224: PUSH
23225: LD_INT 106
23227: PUSH
23228: LD_INT 107
23230: PUSH
23231: LD_INT 108
23233: PUSH
23234: LD_INT 109
23236: PUSH
23237: LD_INT 110
23239: PUSH
23240: LD_INT 111
23242: PUSH
23243: LD_INT 112
23245: PUSH
23246: LD_INT 113
23248: PUSH
23249: LD_INT 114
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: ST_TO_ADDR
23272: GO 23999
23274: LD_INT 16
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 23406
23282: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23283: LD_ADDR_VAR 0 1
23287: PUSH
23288: LD_INT 2
23290: PUSH
23291: LD_INT 4
23293: PUSH
23294: LD_INT 5
23296: PUSH
23297: LD_INT 7
23299: PUSH
23300: LD_INT 11
23302: PUSH
23303: LD_INT 12
23305: PUSH
23306: LD_INT 15
23308: PUSH
23309: LD_INT 16
23311: PUSH
23312: LD_INT 20
23314: PUSH
23315: LD_INT 21
23317: PUSH
23318: LD_INT 22
23320: PUSH
23321: LD_INT 23
23323: PUSH
23324: LD_INT 25
23326: PUSH
23327: LD_INT 26
23329: PUSH
23330: LD_INT 30
23332: PUSH
23333: LD_INT 31
23335: PUSH
23336: LD_INT 32
23338: PUSH
23339: LD_INT 33
23341: PUSH
23342: LD_INT 34
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 101
23368: PUSH
23369: LD_INT 102
23371: PUSH
23372: LD_INT 103
23374: PUSH
23375: LD_INT 106
23377: PUSH
23378: LD_INT 108
23380: PUSH
23381: LD_INT 112
23383: PUSH
23384: LD_INT 113
23386: PUSH
23387: LD_INT 114
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: ST_TO_ADDR
23404: GO 23999
23406: LD_INT 17
23408: DOUBLE
23409: EQUAL
23410: IFTRUE 23414
23412: GO 23626
23414: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23415: LD_ADDR_VAR 0 1
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: LD_INT 2
23425: PUSH
23426: LD_INT 3
23428: PUSH
23429: LD_INT 4
23431: PUSH
23432: LD_INT 5
23434: PUSH
23435: LD_INT 6
23437: PUSH
23438: LD_INT 7
23440: PUSH
23441: LD_INT 8
23443: PUSH
23444: LD_INT 9
23446: PUSH
23447: LD_INT 10
23449: PUSH
23450: LD_INT 11
23452: PUSH
23453: LD_INT 12
23455: PUSH
23456: LD_INT 13
23458: PUSH
23459: LD_INT 14
23461: PUSH
23462: LD_INT 15
23464: PUSH
23465: LD_INT 16
23467: PUSH
23468: LD_INT 17
23470: PUSH
23471: LD_INT 18
23473: PUSH
23474: LD_INT 19
23476: PUSH
23477: LD_INT 20
23479: PUSH
23480: LD_INT 21
23482: PUSH
23483: LD_INT 22
23485: PUSH
23486: LD_INT 23
23488: PUSH
23489: LD_INT 24
23491: PUSH
23492: LD_INT 25
23494: PUSH
23495: LD_INT 26
23497: PUSH
23498: LD_INT 27
23500: PUSH
23501: LD_INT 28
23503: PUSH
23504: LD_INT 29
23506: PUSH
23507: LD_INT 30
23509: PUSH
23510: LD_INT 31
23512: PUSH
23513: LD_INT 32
23515: PUSH
23516: LD_INT 33
23518: PUSH
23519: LD_INT 34
23521: PUSH
23522: LD_INT 36
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 101
23564: PUSH
23565: LD_INT 102
23567: PUSH
23568: LD_INT 103
23570: PUSH
23571: LD_INT 104
23573: PUSH
23574: LD_INT 105
23576: PUSH
23577: LD_INT 106
23579: PUSH
23580: LD_INT 107
23582: PUSH
23583: LD_INT 108
23585: PUSH
23586: LD_INT 109
23588: PUSH
23589: LD_INT 110
23591: PUSH
23592: LD_INT 111
23594: PUSH
23595: LD_INT 112
23597: PUSH
23598: LD_INT 113
23600: PUSH
23601: LD_INT 114
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: ST_TO_ADDR
23624: GO 23999
23626: LD_INT 18
23628: DOUBLE
23629: EQUAL
23630: IFTRUE 23634
23632: GO 23770
23634: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23635: LD_ADDR_VAR 0 1
23639: PUSH
23640: LD_INT 2
23642: PUSH
23643: LD_INT 4
23645: PUSH
23646: LD_INT 5
23648: PUSH
23649: LD_INT 7
23651: PUSH
23652: LD_INT 11
23654: PUSH
23655: LD_INT 12
23657: PUSH
23658: LD_INT 15
23660: PUSH
23661: LD_INT 16
23663: PUSH
23664: LD_INT 20
23666: PUSH
23667: LD_INT 21
23669: PUSH
23670: LD_INT 22
23672: PUSH
23673: LD_INT 23
23675: PUSH
23676: LD_INT 25
23678: PUSH
23679: LD_INT 26
23681: PUSH
23682: LD_INT 30
23684: PUSH
23685: LD_INT 31
23687: PUSH
23688: LD_INT 32
23690: PUSH
23691: LD_INT 33
23693: PUSH
23694: LD_INT 34
23696: PUSH
23697: LD_INT 35
23699: PUSH
23700: LD_INT 36
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 101
23728: PUSH
23729: LD_INT 102
23731: PUSH
23732: LD_INT 103
23734: PUSH
23735: LD_INT 106
23737: PUSH
23738: LD_INT 108
23740: PUSH
23741: LD_INT 112
23743: PUSH
23744: LD_INT 113
23746: PUSH
23747: LD_INT 114
23749: PUSH
23750: LD_INT 115
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: ST_TO_ADDR
23768: GO 23999
23770: LD_INT 19
23772: DOUBLE
23773: EQUAL
23774: IFTRUE 23778
23776: GO 23998
23778: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23779: LD_ADDR_VAR 0 1
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: LD_INT 2
23789: PUSH
23790: LD_INT 3
23792: PUSH
23793: LD_INT 4
23795: PUSH
23796: LD_INT 5
23798: PUSH
23799: LD_INT 6
23801: PUSH
23802: LD_INT 7
23804: PUSH
23805: LD_INT 8
23807: PUSH
23808: LD_INT 9
23810: PUSH
23811: LD_INT 10
23813: PUSH
23814: LD_INT 11
23816: PUSH
23817: LD_INT 12
23819: PUSH
23820: LD_INT 13
23822: PUSH
23823: LD_INT 14
23825: PUSH
23826: LD_INT 15
23828: PUSH
23829: LD_INT 16
23831: PUSH
23832: LD_INT 17
23834: PUSH
23835: LD_INT 18
23837: PUSH
23838: LD_INT 19
23840: PUSH
23841: LD_INT 20
23843: PUSH
23844: LD_INT 21
23846: PUSH
23847: LD_INT 22
23849: PUSH
23850: LD_INT 23
23852: PUSH
23853: LD_INT 24
23855: PUSH
23856: LD_INT 25
23858: PUSH
23859: LD_INT 26
23861: PUSH
23862: LD_INT 27
23864: PUSH
23865: LD_INT 28
23867: PUSH
23868: LD_INT 29
23870: PUSH
23871: LD_INT 30
23873: PUSH
23874: LD_INT 31
23876: PUSH
23877: LD_INT 32
23879: PUSH
23880: LD_INT 33
23882: PUSH
23883: LD_INT 34
23885: PUSH
23886: LD_INT 35
23888: PUSH
23889: LD_INT 36
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 101
23932: PUSH
23933: LD_INT 102
23935: PUSH
23936: LD_INT 103
23938: PUSH
23939: LD_INT 104
23941: PUSH
23942: LD_INT 105
23944: PUSH
23945: LD_INT 106
23947: PUSH
23948: LD_INT 107
23950: PUSH
23951: LD_INT 108
23953: PUSH
23954: LD_INT 109
23956: PUSH
23957: LD_INT 110
23959: PUSH
23960: LD_INT 111
23962: PUSH
23963: LD_INT 112
23965: PUSH
23966: LD_INT 113
23968: PUSH
23969: LD_INT 114
23971: PUSH
23972: LD_INT 115
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: ST_TO_ADDR
23996: GO 23999
23998: POP
// end else
23999: GO 24218
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24001: LD_ADDR_VAR 0 1
24005: PUSH
24006: LD_INT 1
24008: PUSH
24009: LD_INT 2
24011: PUSH
24012: LD_INT 3
24014: PUSH
24015: LD_INT 4
24017: PUSH
24018: LD_INT 5
24020: PUSH
24021: LD_INT 6
24023: PUSH
24024: LD_INT 7
24026: PUSH
24027: LD_INT 8
24029: PUSH
24030: LD_INT 9
24032: PUSH
24033: LD_INT 10
24035: PUSH
24036: LD_INT 11
24038: PUSH
24039: LD_INT 12
24041: PUSH
24042: LD_INT 13
24044: PUSH
24045: LD_INT 14
24047: PUSH
24048: LD_INT 15
24050: PUSH
24051: LD_INT 16
24053: PUSH
24054: LD_INT 17
24056: PUSH
24057: LD_INT 18
24059: PUSH
24060: LD_INT 19
24062: PUSH
24063: LD_INT 20
24065: PUSH
24066: LD_INT 21
24068: PUSH
24069: LD_INT 22
24071: PUSH
24072: LD_INT 23
24074: PUSH
24075: LD_INT 24
24077: PUSH
24078: LD_INT 25
24080: PUSH
24081: LD_INT 26
24083: PUSH
24084: LD_INT 27
24086: PUSH
24087: LD_INT 28
24089: PUSH
24090: LD_INT 29
24092: PUSH
24093: LD_INT 30
24095: PUSH
24096: LD_INT 31
24098: PUSH
24099: LD_INT 32
24101: PUSH
24102: LD_INT 33
24104: PUSH
24105: LD_INT 34
24107: PUSH
24108: LD_INT 35
24110: PUSH
24111: LD_INT 36
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 101
24154: PUSH
24155: LD_INT 102
24157: PUSH
24158: LD_INT 103
24160: PUSH
24161: LD_INT 104
24163: PUSH
24164: LD_INT 105
24166: PUSH
24167: LD_INT 106
24169: PUSH
24170: LD_INT 107
24172: PUSH
24173: LD_INT 108
24175: PUSH
24176: LD_INT 109
24178: PUSH
24179: LD_INT 110
24181: PUSH
24182: LD_INT 111
24184: PUSH
24185: LD_INT 112
24187: PUSH
24188: LD_INT 113
24190: PUSH
24191: LD_INT 114
24193: PUSH
24194: LD_INT 115
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: ST_TO_ADDR
// if result then
24218: LD_VAR 0 1
24222: IFFALSE 24511
// begin normal :=  ;
24224: LD_ADDR_VAR 0 3
24228: PUSH
24229: LD_STRING 
24231: ST_TO_ADDR
// hardcore :=  ;
24232: LD_ADDR_VAR 0 4
24236: PUSH
24237: LD_STRING 
24239: ST_TO_ADDR
// for i = 1 to normalCounter do
24240: LD_ADDR_VAR 0 5
24244: PUSH
24245: DOUBLE
24246: LD_INT 1
24248: DEC
24249: ST_TO_ADDR
24250: LD_EXP 68
24254: PUSH
24255: FOR_TO
24256: IFFALSE 24357
// begin tmp := 0 ;
24258: LD_ADDR_VAR 0 2
24262: PUSH
24263: LD_STRING 0
24265: ST_TO_ADDR
// if result [ 1 ] then
24266: LD_VAR 0 1
24270: PUSH
24271: LD_INT 1
24273: ARRAY
24274: IFFALSE 24339
// if result [ 1 ] [ 1 ] = i then
24276: LD_VAR 0 1
24280: PUSH
24281: LD_INT 1
24283: ARRAY
24284: PUSH
24285: LD_INT 1
24287: ARRAY
24288: PUSH
24289: LD_VAR 0 5
24293: EQUAL
24294: IFFALSE 24339
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24296: LD_ADDR_VAR 0 1
24300: PUSH
24301: LD_VAR 0 1
24305: PPUSH
24306: LD_INT 1
24308: PPUSH
24309: LD_VAR 0 1
24313: PUSH
24314: LD_INT 1
24316: ARRAY
24317: PPUSH
24318: LD_INT 1
24320: PPUSH
24321: CALL_OW 3
24325: PPUSH
24326: CALL_OW 1
24330: ST_TO_ADDR
// tmp := 1 ;
24331: LD_ADDR_VAR 0 2
24335: PUSH
24336: LD_STRING 1
24338: ST_TO_ADDR
// end ; normal := normal & tmp ;
24339: LD_ADDR_VAR 0 3
24343: PUSH
24344: LD_VAR 0 3
24348: PUSH
24349: LD_VAR 0 2
24353: STR
24354: ST_TO_ADDR
// end ;
24355: GO 24255
24357: POP
24358: POP
// for i = 1 to hardcoreCounter do
24359: LD_ADDR_VAR 0 5
24363: PUSH
24364: DOUBLE
24365: LD_INT 1
24367: DEC
24368: ST_TO_ADDR
24369: LD_EXP 69
24373: PUSH
24374: FOR_TO
24375: IFFALSE 24480
// begin tmp := 0 ;
24377: LD_ADDR_VAR 0 2
24381: PUSH
24382: LD_STRING 0
24384: ST_TO_ADDR
// if result [ 2 ] then
24385: LD_VAR 0 1
24389: PUSH
24390: LD_INT 2
24392: ARRAY
24393: IFFALSE 24462
// if result [ 2 ] [ 1 ] = 100 + i then
24395: LD_VAR 0 1
24399: PUSH
24400: LD_INT 2
24402: ARRAY
24403: PUSH
24404: LD_INT 1
24406: ARRAY
24407: PUSH
24408: LD_INT 100
24410: PUSH
24411: LD_VAR 0 5
24415: PLUS
24416: EQUAL
24417: IFFALSE 24462
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24419: LD_ADDR_VAR 0 1
24423: PUSH
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_INT 2
24431: PPUSH
24432: LD_VAR 0 1
24436: PUSH
24437: LD_INT 2
24439: ARRAY
24440: PPUSH
24441: LD_INT 1
24443: PPUSH
24444: CALL_OW 3
24448: PPUSH
24449: CALL_OW 1
24453: ST_TO_ADDR
// tmp := 1 ;
24454: LD_ADDR_VAR 0 2
24458: PUSH
24459: LD_STRING 1
24461: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24462: LD_ADDR_VAR 0 4
24466: PUSH
24467: LD_VAR 0 4
24471: PUSH
24472: LD_VAR 0 2
24476: STR
24477: ST_TO_ADDR
// end ;
24478: GO 24374
24480: POP
24481: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24482: LD_STRING getStreamItemsFromMission("
24484: PUSH
24485: LD_VAR 0 3
24489: STR
24490: PUSH
24491: LD_STRING ","
24493: STR
24494: PUSH
24495: LD_VAR 0 4
24499: STR
24500: PUSH
24501: LD_STRING ")
24503: STR
24504: PPUSH
24505: CALL_OW 559
// end else
24509: GO 24518
// ToLua ( getStreamItemsFromMission("","") ) ;
24511: LD_STRING getStreamItemsFromMission("","")
24513: PPUSH
24514: CALL_OW 559
// end ;
24518: LD_VAR 0 1
24522: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24523: LD_EXP 67
24527: PUSH
24528: LD_EXP 72
24532: AND
24533: IFFALSE 24657
24535: GO 24537
24537: DISABLE
24538: LD_INT 0
24540: PPUSH
24541: PPUSH
// begin enable ;
24542: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24543: LD_ADDR_VAR 0 2
24547: PUSH
24548: LD_INT 22
24550: PUSH
24551: LD_OWVAR 2
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: LD_INT 34
24565: PUSH
24566: LD_INT 7
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 34
24575: PUSH
24576: LD_INT 45
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 34
24585: PUSH
24586: LD_INT 28
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 34
24595: PUSH
24596: LD_INT 47
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PPUSH
24614: CALL_OW 69
24618: ST_TO_ADDR
// if not tmp then
24619: LD_VAR 0 2
24623: NOT
24624: IFFALSE 24628
// exit ;
24626: GO 24657
// for i in tmp do
24628: LD_ADDR_VAR 0 1
24632: PUSH
24633: LD_VAR 0 2
24637: PUSH
24638: FOR_IN
24639: IFFALSE 24655
// begin SetLives ( i , 0 ) ;
24641: LD_VAR 0 1
24645: PPUSH
24646: LD_INT 0
24648: PPUSH
24649: CALL_OW 234
// end ;
24653: GO 24638
24655: POP
24656: POP
// end ;
24657: PPOPN 2
24659: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24660: LD_EXP 67
24664: PUSH
24665: LD_EXP 73
24669: AND
24670: IFFALSE 24754
24672: GO 24674
24674: DISABLE
24675: LD_INT 0
24677: PPUSH
24678: PPUSH
// begin enable ;
24679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24680: LD_ADDR_VAR 0 2
24684: PUSH
24685: LD_INT 22
24687: PUSH
24688: LD_OWVAR 2
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 32
24699: PUSH
24700: LD_INT 3
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PPUSH
24711: CALL_OW 69
24715: ST_TO_ADDR
// if not tmp then
24716: LD_VAR 0 2
24720: NOT
24721: IFFALSE 24725
// exit ;
24723: GO 24754
// for i in tmp do
24725: LD_ADDR_VAR 0 1
24729: PUSH
24730: LD_VAR 0 2
24734: PUSH
24735: FOR_IN
24736: IFFALSE 24752
// begin SetLives ( i , 0 ) ;
24738: LD_VAR 0 1
24742: PPUSH
24743: LD_INT 0
24745: PPUSH
24746: CALL_OW 234
// end ;
24750: GO 24735
24752: POP
24753: POP
// end ;
24754: PPOPN 2
24756: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24757: LD_EXP 67
24761: PUSH
24762: LD_EXP 70
24766: AND
24767: IFFALSE 24860
24769: GO 24771
24771: DISABLE
24772: LD_INT 0
24774: PPUSH
// begin enable ;
24775: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24776: LD_ADDR_VAR 0 1
24780: PUSH
24781: LD_INT 22
24783: PUSH
24784: LD_OWVAR 2
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 2
24795: PUSH
24796: LD_INT 25
24798: PUSH
24799: LD_INT 5
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 25
24808: PUSH
24809: LD_INT 9
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 25
24818: PUSH
24819: LD_INT 8
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PPUSH
24836: CALL_OW 69
24840: PUSH
24841: FOR_IN
24842: IFFALSE 24858
// begin SetClass ( i , 1 ) ;
24844: LD_VAR 0 1
24848: PPUSH
24849: LD_INT 1
24851: PPUSH
24852: CALL_OW 336
// end ;
24856: GO 24841
24858: POP
24859: POP
// end ;
24860: PPOPN 1
24862: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24863: LD_EXP 67
24867: PUSH
24868: LD_EXP 71
24872: AND
24873: PUSH
24874: LD_OWVAR 65
24878: PUSH
24879: LD_INT 7
24881: LESS
24882: AND
24883: IFFALSE 24897
24885: GO 24887
24887: DISABLE
// begin enable ;
24888: ENABLE
// game_speed := 7 ;
24889: LD_ADDR_OWVAR 65
24893: PUSH
24894: LD_INT 7
24896: ST_TO_ADDR
// end ;
24897: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24898: LD_EXP 67
24902: PUSH
24903: LD_EXP 74
24907: AND
24908: IFFALSE 25110
24910: GO 24912
24912: DISABLE
24913: LD_INT 0
24915: PPUSH
24916: PPUSH
24917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24918: LD_ADDR_VAR 0 3
24922: PUSH
24923: LD_INT 81
24925: PUSH
24926: LD_OWVAR 2
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 21
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PPUSH
24949: CALL_OW 69
24953: ST_TO_ADDR
// if not tmp then
24954: LD_VAR 0 3
24958: NOT
24959: IFFALSE 24963
// exit ;
24961: GO 25110
// if tmp > 5 then
24963: LD_VAR 0 3
24967: PUSH
24968: LD_INT 5
24970: GREATER
24971: IFFALSE 24983
// k := 5 else
24973: LD_ADDR_VAR 0 2
24977: PUSH
24978: LD_INT 5
24980: ST_TO_ADDR
24981: GO 24993
// k := tmp ;
24983: LD_ADDR_VAR 0 2
24987: PUSH
24988: LD_VAR 0 3
24992: ST_TO_ADDR
// for i := 1 to k do
24993: LD_ADDR_VAR 0 1
24997: PUSH
24998: DOUBLE
24999: LD_INT 1
25001: DEC
25002: ST_TO_ADDR
25003: LD_VAR 0 2
25007: PUSH
25008: FOR_TO
25009: IFFALSE 25108
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25011: LD_VAR 0 3
25015: PUSH
25016: LD_VAR 0 1
25020: ARRAY
25021: PPUSH
25022: LD_VAR 0 1
25026: PUSH
25027: LD_INT 4
25029: MOD
25030: PUSH
25031: LD_INT 1
25033: PLUS
25034: PPUSH
25035: CALL_OW 259
25039: PUSH
25040: LD_INT 10
25042: LESS
25043: IFFALSE 25106
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25045: LD_VAR 0 3
25049: PUSH
25050: LD_VAR 0 1
25054: ARRAY
25055: PPUSH
25056: LD_VAR 0 1
25060: PUSH
25061: LD_INT 4
25063: MOD
25064: PUSH
25065: LD_INT 1
25067: PLUS
25068: PPUSH
25069: LD_VAR 0 3
25073: PUSH
25074: LD_VAR 0 1
25078: ARRAY
25079: PPUSH
25080: LD_VAR 0 1
25084: PUSH
25085: LD_INT 4
25087: MOD
25088: PUSH
25089: LD_INT 1
25091: PLUS
25092: PPUSH
25093: CALL_OW 259
25097: PUSH
25098: LD_INT 1
25100: PLUS
25101: PPUSH
25102: CALL_OW 237
25106: GO 25008
25108: POP
25109: POP
// end ;
25110: PPOPN 3
25112: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25113: LD_EXP 67
25117: PUSH
25118: LD_EXP 75
25122: AND
25123: IFFALSE 25143
25125: GO 25127
25127: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25128: LD_INT 4
25130: PPUSH
25131: LD_OWVAR 2
25135: PPUSH
25136: LD_INT 0
25138: PPUSH
25139: CALL_OW 324
25143: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25144: LD_EXP 67
25148: PUSH
25149: LD_EXP 104
25153: AND
25154: IFFALSE 25174
25156: GO 25158
25158: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25159: LD_INT 19
25161: PPUSH
25162: LD_OWVAR 2
25166: PPUSH
25167: LD_INT 0
25169: PPUSH
25170: CALL_OW 324
25174: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25175: LD_EXP 67
25179: PUSH
25180: LD_EXP 76
25184: AND
25185: IFFALSE 25287
25187: GO 25189
25189: DISABLE
25190: LD_INT 0
25192: PPUSH
25193: PPUSH
// begin enable ;
25194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25195: LD_ADDR_VAR 0 2
25199: PUSH
25200: LD_INT 22
25202: PUSH
25203: LD_OWVAR 2
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 2
25214: PUSH
25215: LD_INT 34
25217: PUSH
25218: LD_INT 11
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 34
25227: PUSH
25228: LD_INT 30
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PPUSH
25244: CALL_OW 69
25248: ST_TO_ADDR
// if not tmp then
25249: LD_VAR 0 2
25253: NOT
25254: IFFALSE 25258
// exit ;
25256: GO 25287
// for i in tmp do
25258: LD_ADDR_VAR 0 1
25262: PUSH
25263: LD_VAR 0 2
25267: PUSH
25268: FOR_IN
25269: IFFALSE 25285
// begin SetLives ( i , 0 ) ;
25271: LD_VAR 0 1
25275: PPUSH
25276: LD_INT 0
25278: PPUSH
25279: CALL_OW 234
// end ;
25283: GO 25268
25285: POP
25286: POP
// end ;
25287: PPOPN 2
25289: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25290: LD_EXP 67
25294: PUSH
25295: LD_EXP 77
25299: AND
25300: IFFALSE 25320
25302: GO 25304
25304: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25305: LD_INT 32
25307: PPUSH
25308: LD_OWVAR 2
25312: PPUSH
25313: LD_INT 0
25315: PPUSH
25316: CALL_OW 324
25320: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25321: LD_EXP 67
25325: PUSH
25326: LD_EXP 78
25330: AND
25331: IFFALSE 25512
25333: GO 25335
25335: DISABLE
25336: LD_INT 0
25338: PPUSH
25339: PPUSH
25340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25341: LD_ADDR_VAR 0 2
25345: PUSH
25346: LD_INT 22
25348: PUSH
25349: LD_OWVAR 2
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 33
25360: PUSH
25361: LD_INT 3
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PPUSH
25372: CALL_OW 69
25376: ST_TO_ADDR
// if not tmp then
25377: LD_VAR 0 2
25381: NOT
25382: IFFALSE 25386
// exit ;
25384: GO 25512
// side := 0 ;
25386: LD_ADDR_VAR 0 3
25390: PUSH
25391: LD_INT 0
25393: ST_TO_ADDR
// for i := 1 to 8 do
25394: LD_ADDR_VAR 0 1
25398: PUSH
25399: DOUBLE
25400: LD_INT 1
25402: DEC
25403: ST_TO_ADDR
25404: LD_INT 8
25406: PUSH
25407: FOR_TO
25408: IFFALSE 25456
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25410: LD_OWVAR 2
25414: PUSH
25415: LD_VAR 0 1
25419: NONEQUAL
25420: PUSH
25421: LD_OWVAR 2
25425: PPUSH
25426: LD_VAR 0 1
25430: PPUSH
25431: CALL_OW 81
25435: PUSH
25436: LD_INT 2
25438: EQUAL
25439: AND
25440: IFFALSE 25454
// begin side := i ;
25442: LD_ADDR_VAR 0 3
25446: PUSH
25447: LD_VAR 0 1
25451: ST_TO_ADDR
// break ;
25452: GO 25456
// end ;
25454: GO 25407
25456: POP
25457: POP
// if not side then
25458: LD_VAR 0 3
25462: NOT
25463: IFFALSE 25467
// exit ;
25465: GO 25512
// for i := 1 to tmp do
25467: LD_ADDR_VAR 0 1
25471: PUSH
25472: DOUBLE
25473: LD_INT 1
25475: DEC
25476: ST_TO_ADDR
25477: LD_VAR 0 2
25481: PUSH
25482: FOR_TO
25483: IFFALSE 25510
// if Prob ( 60 ) then
25485: LD_INT 60
25487: PPUSH
25488: CALL_OW 13
25492: IFFALSE 25508
// SetSide ( i , side ) ;
25494: LD_VAR 0 1
25498: PPUSH
25499: LD_VAR 0 3
25503: PPUSH
25504: CALL_OW 235
25508: GO 25482
25510: POP
25511: POP
// end ;
25512: PPOPN 3
25514: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25515: LD_EXP 67
25519: PUSH
25520: LD_EXP 80
25524: AND
25525: IFFALSE 25644
25527: GO 25529
25529: DISABLE
25530: LD_INT 0
25532: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25533: LD_ADDR_VAR 0 1
25537: PUSH
25538: LD_INT 22
25540: PUSH
25541: LD_OWVAR 2
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 21
25552: PUSH
25553: LD_INT 1
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 3
25562: PUSH
25563: LD_INT 23
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: LIST
25581: PPUSH
25582: CALL_OW 69
25586: PUSH
25587: FOR_IN
25588: IFFALSE 25642
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25590: LD_VAR 0 1
25594: PPUSH
25595: CALL_OW 257
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: LD_INT 2
25605: PUSH
25606: LD_INT 3
25608: PUSH
25609: LD_INT 4
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: IN
25618: IFFALSE 25640
// SetClass ( un , rand ( 1 , 4 ) ) ;
25620: LD_VAR 0 1
25624: PPUSH
25625: LD_INT 1
25627: PPUSH
25628: LD_INT 4
25630: PPUSH
25631: CALL_OW 12
25635: PPUSH
25636: CALL_OW 336
25640: GO 25587
25642: POP
25643: POP
// end ;
25644: PPOPN 1
25646: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25647: LD_EXP 67
25651: PUSH
25652: LD_EXP 79
25656: AND
25657: IFFALSE 25736
25659: GO 25661
25661: DISABLE
25662: LD_INT 0
25664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25665: LD_ADDR_VAR 0 1
25669: PUSH
25670: LD_INT 22
25672: PUSH
25673: LD_OWVAR 2
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 21
25684: PUSH
25685: LD_INT 3
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PPUSH
25696: CALL_OW 69
25700: ST_TO_ADDR
// if not tmp then
25701: LD_VAR 0 1
25705: NOT
25706: IFFALSE 25710
// exit ;
25708: GO 25736
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25710: LD_VAR 0 1
25714: PUSH
25715: LD_INT 1
25717: PPUSH
25718: LD_VAR 0 1
25722: PPUSH
25723: CALL_OW 12
25727: ARRAY
25728: PPUSH
25729: LD_INT 100
25731: PPUSH
25732: CALL_OW 234
// end ;
25736: PPOPN 1
25738: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25739: LD_EXP 67
25743: PUSH
25744: LD_EXP 81
25748: AND
25749: IFFALSE 25847
25751: GO 25753
25753: DISABLE
25754: LD_INT 0
25756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25757: LD_ADDR_VAR 0 1
25761: PUSH
25762: LD_INT 22
25764: PUSH
25765: LD_OWVAR 2
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 21
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PPUSH
25788: CALL_OW 69
25792: ST_TO_ADDR
// if not tmp then
25793: LD_VAR 0 1
25797: NOT
25798: IFFALSE 25802
// exit ;
25800: GO 25847
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25802: LD_VAR 0 1
25806: PUSH
25807: LD_INT 1
25809: PPUSH
25810: LD_VAR 0 1
25814: PPUSH
25815: CALL_OW 12
25819: ARRAY
25820: PPUSH
25821: LD_INT 1
25823: PPUSH
25824: LD_INT 4
25826: PPUSH
25827: CALL_OW 12
25831: PPUSH
25832: LD_INT 3000
25834: PPUSH
25835: LD_INT 9000
25837: PPUSH
25838: CALL_OW 12
25842: PPUSH
25843: CALL_OW 492
// end ;
25847: PPOPN 1
25849: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25850: LD_EXP 67
25854: PUSH
25855: LD_EXP 82
25859: AND
25860: IFFALSE 25880
25862: GO 25864
25864: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25865: LD_INT 1
25867: PPUSH
25868: LD_OWVAR 2
25872: PPUSH
25873: LD_INT 0
25875: PPUSH
25876: CALL_OW 324
25880: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25881: LD_EXP 67
25885: PUSH
25886: LD_EXP 83
25890: AND
25891: IFFALSE 25974
25893: GO 25895
25895: DISABLE
25896: LD_INT 0
25898: PPUSH
25899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25900: LD_ADDR_VAR 0 2
25904: PUSH
25905: LD_INT 22
25907: PUSH
25908: LD_OWVAR 2
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 21
25919: PUSH
25920: LD_INT 3
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PPUSH
25931: CALL_OW 69
25935: ST_TO_ADDR
// if not tmp then
25936: LD_VAR 0 2
25940: NOT
25941: IFFALSE 25945
// exit ;
25943: GO 25974
// for i in tmp do
25945: LD_ADDR_VAR 0 1
25949: PUSH
25950: LD_VAR 0 2
25954: PUSH
25955: FOR_IN
25956: IFFALSE 25972
// SetBLevel ( i , 10 ) ;
25958: LD_VAR 0 1
25962: PPUSH
25963: LD_INT 10
25965: PPUSH
25966: CALL_OW 241
25970: GO 25955
25972: POP
25973: POP
// end ;
25974: PPOPN 2
25976: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25977: LD_EXP 67
25981: PUSH
25982: LD_EXP 84
25986: AND
25987: IFFALSE 26098
25989: GO 25991
25991: DISABLE
25992: LD_INT 0
25994: PPUSH
25995: PPUSH
25996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25997: LD_ADDR_VAR 0 3
26001: PUSH
26002: LD_INT 22
26004: PUSH
26005: LD_OWVAR 2
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 25
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PPUSH
26028: CALL_OW 69
26032: ST_TO_ADDR
// if not tmp then
26033: LD_VAR 0 3
26037: NOT
26038: IFFALSE 26042
// exit ;
26040: GO 26098
// un := tmp [ rand ( 1 , tmp ) ] ;
26042: LD_ADDR_VAR 0 2
26046: PUSH
26047: LD_VAR 0 3
26051: PUSH
26052: LD_INT 1
26054: PPUSH
26055: LD_VAR 0 3
26059: PPUSH
26060: CALL_OW 12
26064: ARRAY
26065: ST_TO_ADDR
// if Crawls ( un ) then
26066: LD_VAR 0 2
26070: PPUSH
26071: CALL_OW 318
26075: IFFALSE 26086
// ComWalk ( un ) ;
26077: LD_VAR 0 2
26081: PPUSH
26082: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26086: LD_VAR 0 2
26090: PPUSH
26091: LD_INT 5
26093: PPUSH
26094: CALL_OW 336
// end ;
26098: PPOPN 3
26100: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26101: LD_EXP 67
26105: PUSH
26106: LD_EXP 85
26110: AND
26111: PUSH
26112: LD_OWVAR 67
26116: PUSH
26117: LD_INT 3
26119: LESS
26120: AND
26121: IFFALSE 26140
26123: GO 26125
26125: DISABLE
// Difficulty := Difficulty + 1 ;
26126: LD_ADDR_OWVAR 67
26130: PUSH
26131: LD_OWVAR 67
26135: PUSH
26136: LD_INT 1
26138: PLUS
26139: ST_TO_ADDR
26140: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26141: LD_EXP 67
26145: PUSH
26146: LD_EXP 86
26150: AND
26151: IFFALSE 26254
26153: GO 26155
26155: DISABLE
26156: LD_INT 0
26158: PPUSH
// begin for i := 1 to 5 do
26159: LD_ADDR_VAR 0 1
26163: PUSH
26164: DOUBLE
26165: LD_INT 1
26167: DEC
26168: ST_TO_ADDR
26169: LD_INT 5
26171: PUSH
26172: FOR_TO
26173: IFFALSE 26252
// begin uc_nation := nation_nature ;
26175: LD_ADDR_OWVAR 21
26179: PUSH
26180: LD_INT 0
26182: ST_TO_ADDR
// uc_side := 0 ;
26183: LD_ADDR_OWVAR 20
26187: PUSH
26188: LD_INT 0
26190: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26191: LD_ADDR_OWVAR 29
26195: PUSH
26196: LD_INT 12
26198: PUSH
26199: LD_INT 12
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: ST_TO_ADDR
// hc_agressivity := 20 ;
26206: LD_ADDR_OWVAR 35
26210: PUSH
26211: LD_INT 20
26213: ST_TO_ADDR
// hc_class := class_tiger ;
26214: LD_ADDR_OWVAR 28
26218: PUSH
26219: LD_INT 14
26221: ST_TO_ADDR
// hc_gallery :=  ;
26222: LD_ADDR_OWVAR 33
26226: PUSH
26227: LD_STRING 
26229: ST_TO_ADDR
// hc_name :=  ;
26230: LD_ADDR_OWVAR 26
26234: PUSH
26235: LD_STRING 
26237: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26238: CALL_OW 44
26242: PPUSH
26243: LD_INT 0
26245: PPUSH
26246: CALL_OW 51
// end ;
26250: GO 26172
26252: POP
26253: POP
// end ;
26254: PPOPN 1
26256: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26257: LD_EXP 67
26261: PUSH
26262: LD_EXP 87
26266: AND
26267: IFFALSE 26276
26269: GO 26271
26271: DISABLE
// StreamSibBomb ;
26272: CALL 26277 0 0
26276: END
// export function StreamSibBomb ; var i , x , y ; begin
26277: LD_INT 0
26279: PPUSH
26280: PPUSH
26281: PPUSH
26282: PPUSH
// result := false ;
26283: LD_ADDR_VAR 0 1
26287: PUSH
26288: LD_INT 0
26290: ST_TO_ADDR
// for i := 1 to 16 do
26291: LD_ADDR_VAR 0 2
26295: PUSH
26296: DOUBLE
26297: LD_INT 1
26299: DEC
26300: ST_TO_ADDR
26301: LD_INT 16
26303: PUSH
26304: FOR_TO
26305: IFFALSE 26504
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26307: LD_ADDR_VAR 0 3
26311: PUSH
26312: LD_INT 10
26314: PUSH
26315: LD_INT 20
26317: PUSH
26318: LD_INT 30
26320: PUSH
26321: LD_INT 40
26323: PUSH
26324: LD_INT 50
26326: PUSH
26327: LD_INT 60
26329: PUSH
26330: LD_INT 70
26332: PUSH
26333: LD_INT 80
26335: PUSH
26336: LD_INT 90
26338: PUSH
26339: LD_INT 100
26341: PUSH
26342: LD_INT 110
26344: PUSH
26345: LD_INT 120
26347: PUSH
26348: LD_INT 130
26350: PUSH
26351: LD_INT 140
26353: PUSH
26354: LD_INT 150
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: PPUSH
26377: LD_INT 15
26379: PPUSH
26380: CALL_OW 12
26384: ARRAY
26385: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26386: LD_ADDR_VAR 0 4
26390: PUSH
26391: LD_INT 10
26393: PUSH
26394: LD_INT 20
26396: PUSH
26397: LD_INT 30
26399: PUSH
26400: LD_INT 40
26402: PUSH
26403: LD_INT 50
26405: PUSH
26406: LD_INT 60
26408: PUSH
26409: LD_INT 70
26411: PUSH
26412: LD_INT 80
26414: PUSH
26415: LD_INT 90
26417: PUSH
26418: LD_INT 100
26420: PUSH
26421: LD_INT 110
26423: PUSH
26424: LD_INT 120
26426: PUSH
26427: LD_INT 130
26429: PUSH
26430: LD_INT 140
26432: PUSH
26433: LD_INT 150
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 1
26455: PPUSH
26456: LD_INT 15
26458: PPUSH
26459: CALL_OW 12
26463: ARRAY
26464: ST_TO_ADDR
// if ValidHex ( x , y ) then
26465: LD_VAR 0 3
26469: PPUSH
26470: LD_VAR 0 4
26474: PPUSH
26475: CALL_OW 488
26479: IFFALSE 26502
// begin result := [ x , y ] ;
26481: LD_ADDR_VAR 0 1
26485: PUSH
26486: LD_VAR 0 3
26490: PUSH
26491: LD_VAR 0 4
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: ST_TO_ADDR
// break ;
26500: GO 26504
// end ; end ;
26502: GO 26304
26504: POP
26505: POP
// if result then
26506: LD_VAR 0 1
26510: IFFALSE 26570
// begin ToLua ( playSibBomb() ) ;
26512: LD_STRING playSibBomb()
26514: PPUSH
26515: CALL_OW 559
// wait ( 0 0$14 ) ;
26519: LD_INT 490
26521: PPUSH
26522: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26526: LD_VAR 0 1
26530: PUSH
26531: LD_INT 1
26533: ARRAY
26534: PPUSH
26535: LD_VAR 0 1
26539: PUSH
26540: LD_INT 2
26542: ARRAY
26543: PPUSH
26544: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26548: LD_VAR 0 1
26552: PUSH
26553: LD_INT 1
26555: ARRAY
26556: PPUSH
26557: LD_VAR 0 1
26561: PUSH
26562: LD_INT 2
26564: ARRAY
26565: PPUSH
26566: CALL_OW 429
// end ; end ;
26570: LD_VAR 0 1
26574: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26575: LD_EXP 67
26579: PUSH
26580: LD_EXP 89
26584: AND
26585: IFFALSE 26597
26587: GO 26589
26589: DISABLE
// YouLost (  ) ;
26590: LD_STRING 
26592: PPUSH
26593: CALL_OW 104
26597: END
// every 0 0$1 trigger StreamModeActive and sFog do
26598: LD_EXP 67
26602: PUSH
26603: LD_EXP 88
26607: AND
26608: IFFALSE 26622
26610: GO 26612
26612: DISABLE
// FogOff ( your_side ) ;
26613: LD_OWVAR 2
26617: PPUSH
26618: CALL_OW 344
26622: END
// every 0 0$1 trigger StreamModeActive and sSun do
26623: LD_EXP 67
26627: PUSH
26628: LD_EXP 90
26632: AND
26633: IFFALSE 26661
26635: GO 26637
26637: DISABLE
// begin solar_recharge_percent := 0 ;
26638: LD_ADDR_OWVAR 79
26642: PUSH
26643: LD_INT 0
26645: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26646: LD_INT 10500
26648: PPUSH
26649: CALL_OW 67
// solar_recharge_percent := 100 ;
26653: LD_ADDR_OWVAR 79
26657: PUSH
26658: LD_INT 100
26660: ST_TO_ADDR
// end ;
26661: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26662: LD_EXP 67
26666: PUSH
26667: LD_EXP 91
26671: AND
26672: IFFALSE 26911
26674: GO 26676
26676: DISABLE
26677: LD_INT 0
26679: PPUSH
26680: PPUSH
26681: PPUSH
// begin tmp := [ ] ;
26682: LD_ADDR_VAR 0 3
26686: PUSH
26687: EMPTY
26688: ST_TO_ADDR
// for i := 1 to 6 do
26689: LD_ADDR_VAR 0 1
26693: PUSH
26694: DOUBLE
26695: LD_INT 1
26697: DEC
26698: ST_TO_ADDR
26699: LD_INT 6
26701: PUSH
26702: FOR_TO
26703: IFFALSE 26808
// begin uc_nation := nation_nature ;
26705: LD_ADDR_OWVAR 21
26709: PUSH
26710: LD_INT 0
26712: ST_TO_ADDR
// uc_side := 0 ;
26713: LD_ADDR_OWVAR 20
26717: PUSH
26718: LD_INT 0
26720: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26721: LD_ADDR_OWVAR 29
26725: PUSH
26726: LD_INT 12
26728: PUSH
26729: LD_INT 12
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: ST_TO_ADDR
// hc_agressivity := 20 ;
26736: LD_ADDR_OWVAR 35
26740: PUSH
26741: LD_INT 20
26743: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26744: LD_ADDR_OWVAR 28
26748: PUSH
26749: LD_INT 17
26751: ST_TO_ADDR
// hc_gallery :=  ;
26752: LD_ADDR_OWVAR 33
26756: PUSH
26757: LD_STRING 
26759: ST_TO_ADDR
// hc_name :=  ;
26760: LD_ADDR_OWVAR 26
26764: PUSH
26765: LD_STRING 
26767: ST_TO_ADDR
// un := CreateHuman ;
26768: LD_ADDR_VAR 0 2
26772: PUSH
26773: CALL_OW 44
26777: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26778: LD_VAR 0 2
26782: PPUSH
26783: LD_INT 1
26785: PPUSH
26786: CALL_OW 51
// tmp := tmp ^ un ;
26790: LD_ADDR_VAR 0 3
26794: PUSH
26795: LD_VAR 0 3
26799: PUSH
26800: LD_VAR 0 2
26804: ADD
26805: ST_TO_ADDR
// end ;
26806: GO 26702
26808: POP
26809: POP
// repeat wait ( 0 0$1 ) ;
26810: LD_INT 35
26812: PPUSH
26813: CALL_OW 67
// for un in tmp do
26817: LD_ADDR_VAR 0 2
26821: PUSH
26822: LD_VAR 0 3
26826: PUSH
26827: FOR_IN
26828: IFFALSE 26902
// begin if IsDead ( un ) then
26830: LD_VAR 0 2
26834: PPUSH
26835: CALL_OW 301
26839: IFFALSE 26859
// begin tmp := tmp diff un ;
26841: LD_ADDR_VAR 0 3
26845: PUSH
26846: LD_VAR 0 3
26850: PUSH
26851: LD_VAR 0 2
26855: DIFF
26856: ST_TO_ADDR
// continue ;
26857: GO 26827
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26859: LD_VAR 0 2
26863: PPUSH
26864: LD_INT 3
26866: PUSH
26867: LD_INT 22
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PPUSH
26881: CALL_OW 69
26885: PPUSH
26886: LD_VAR 0 2
26890: PPUSH
26891: CALL_OW 74
26895: PPUSH
26896: CALL_OW 115
// end ;
26900: GO 26827
26902: POP
26903: POP
// until not tmp ;
26904: LD_VAR 0 3
26908: NOT
26909: IFFALSE 26810
// end ;
26911: PPOPN 3
26913: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26914: LD_EXP 67
26918: PUSH
26919: LD_EXP 92
26923: AND
26924: IFFALSE 26978
26926: GO 26928
26928: DISABLE
// begin ToLua ( displayTroll(); ) ;
26929: LD_STRING displayTroll();
26931: PPUSH
26932: CALL_OW 559
// wait ( 3 3$00 ) ;
26936: LD_INT 6300
26938: PPUSH
26939: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26943: LD_STRING hideTroll();
26945: PPUSH
26946: CALL_OW 559
// wait ( 1 1$00 ) ;
26950: LD_INT 2100
26952: PPUSH
26953: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26957: LD_STRING displayTroll();
26959: PPUSH
26960: CALL_OW 559
// wait ( 1 1$00 ) ;
26964: LD_INT 2100
26966: PPUSH
26967: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26971: LD_STRING hideTroll();
26973: PPUSH
26974: CALL_OW 559
// end ;
26978: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26979: LD_EXP 67
26983: PUSH
26984: LD_EXP 93
26988: AND
26989: IFFALSE 27052
26991: GO 26993
26993: DISABLE
26994: LD_INT 0
26996: PPUSH
// begin p := 0 ;
26997: LD_ADDR_VAR 0 1
27001: PUSH
27002: LD_INT 0
27004: ST_TO_ADDR
// repeat game_speed := 1 ;
27005: LD_ADDR_OWVAR 65
27009: PUSH
27010: LD_INT 1
27012: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27013: LD_INT 35
27015: PPUSH
27016: CALL_OW 67
// p := p + 1 ;
27020: LD_ADDR_VAR 0 1
27024: PUSH
27025: LD_VAR 0 1
27029: PUSH
27030: LD_INT 1
27032: PLUS
27033: ST_TO_ADDR
// until p >= 60 ;
27034: LD_VAR 0 1
27038: PUSH
27039: LD_INT 60
27041: GREATEREQUAL
27042: IFFALSE 27005
// game_speed := 4 ;
27044: LD_ADDR_OWVAR 65
27048: PUSH
27049: LD_INT 4
27051: ST_TO_ADDR
// end ;
27052: PPOPN 1
27054: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27055: LD_EXP 67
27059: PUSH
27060: LD_EXP 94
27064: AND
27065: IFFALSE 27211
27067: GO 27069
27069: DISABLE
27070: LD_INT 0
27072: PPUSH
27073: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27074: LD_ADDR_VAR 0 1
27078: PUSH
27079: LD_INT 22
27081: PUSH
27082: LD_OWVAR 2
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: LD_INT 30
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 30
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: LIST
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PPUSH
27123: CALL_OW 69
27127: ST_TO_ADDR
// if not depot then
27128: LD_VAR 0 1
27132: NOT
27133: IFFALSE 27137
// exit ;
27135: GO 27211
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27137: LD_ADDR_VAR 0 2
27141: PUSH
27142: LD_VAR 0 1
27146: PUSH
27147: LD_INT 1
27149: PPUSH
27150: LD_VAR 0 1
27154: PPUSH
27155: CALL_OW 12
27159: ARRAY
27160: PPUSH
27161: CALL_OW 274
27165: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27166: LD_VAR 0 2
27170: PPUSH
27171: LD_INT 1
27173: PPUSH
27174: LD_INT 0
27176: PPUSH
27177: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27181: LD_VAR 0 2
27185: PPUSH
27186: LD_INT 2
27188: PPUSH
27189: LD_INT 0
27191: PPUSH
27192: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27196: LD_VAR 0 2
27200: PPUSH
27201: LD_INT 3
27203: PPUSH
27204: LD_INT 0
27206: PPUSH
27207: CALL_OW 277
// end ;
27211: PPOPN 2
27213: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27214: LD_EXP 67
27218: PUSH
27219: LD_EXP 95
27223: AND
27224: IFFALSE 27321
27226: GO 27228
27228: DISABLE
27229: LD_INT 0
27231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27232: LD_ADDR_VAR 0 1
27236: PUSH
27237: LD_INT 22
27239: PUSH
27240: LD_OWVAR 2
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 21
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 3
27261: PUSH
27262: LD_INT 23
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: PPUSH
27281: CALL_OW 69
27285: ST_TO_ADDR
// if not tmp then
27286: LD_VAR 0 1
27290: NOT
27291: IFFALSE 27295
// exit ;
27293: GO 27321
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27295: LD_VAR 0 1
27299: PUSH
27300: LD_INT 1
27302: PPUSH
27303: LD_VAR 0 1
27307: PPUSH
27308: CALL_OW 12
27312: ARRAY
27313: PPUSH
27314: LD_INT 200
27316: PPUSH
27317: CALL_OW 234
// end ;
27321: PPOPN 1
27323: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27324: LD_EXP 67
27328: PUSH
27329: LD_EXP 96
27333: AND
27334: IFFALSE 27413
27336: GO 27338
27338: DISABLE
27339: LD_INT 0
27341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27342: LD_ADDR_VAR 0 1
27346: PUSH
27347: LD_INT 22
27349: PUSH
27350: LD_OWVAR 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 21
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PPUSH
27373: CALL_OW 69
27377: ST_TO_ADDR
// if not tmp then
27378: LD_VAR 0 1
27382: NOT
27383: IFFALSE 27387
// exit ;
27385: GO 27413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27387: LD_VAR 0 1
27391: PUSH
27392: LD_INT 1
27394: PPUSH
27395: LD_VAR 0 1
27399: PPUSH
27400: CALL_OW 12
27404: ARRAY
27405: PPUSH
27406: LD_INT 60
27408: PPUSH
27409: CALL_OW 234
// end ;
27413: PPOPN 1
27415: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27416: LD_EXP 67
27420: PUSH
27421: LD_EXP 97
27425: AND
27426: IFFALSE 27525
27428: GO 27430
27430: DISABLE
27431: LD_INT 0
27433: PPUSH
27434: PPUSH
// begin enable ;
27435: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27436: LD_ADDR_VAR 0 1
27440: PUSH
27441: LD_INT 22
27443: PUSH
27444: LD_OWVAR 2
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 61
27455: PUSH
27456: EMPTY
27457: LIST
27458: PUSH
27459: LD_INT 33
27461: PUSH
27462: LD_INT 2
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: LIST
27473: PPUSH
27474: CALL_OW 69
27478: ST_TO_ADDR
// if not tmp then
27479: LD_VAR 0 1
27483: NOT
27484: IFFALSE 27488
// exit ;
27486: GO 27525
// for i in tmp do
27488: LD_ADDR_VAR 0 2
27492: PUSH
27493: LD_VAR 0 1
27497: PUSH
27498: FOR_IN
27499: IFFALSE 27523
// if IsControledBy ( i ) then
27501: LD_VAR 0 2
27505: PPUSH
27506: CALL_OW 312
27510: IFFALSE 27521
// ComUnlink ( i ) ;
27512: LD_VAR 0 2
27516: PPUSH
27517: CALL_OW 136
27521: GO 27498
27523: POP
27524: POP
// end ;
27525: PPOPN 2
27527: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27528: LD_EXP 67
27532: PUSH
27533: LD_EXP 98
27537: AND
27538: IFFALSE 27678
27540: GO 27542
27542: DISABLE
27543: LD_INT 0
27545: PPUSH
27546: PPUSH
// begin ToLua ( displayPowell(); ) ;
27547: LD_STRING displayPowell();
27549: PPUSH
27550: CALL_OW 559
// uc_side := 0 ;
27554: LD_ADDR_OWVAR 20
27558: PUSH
27559: LD_INT 0
27561: ST_TO_ADDR
// uc_nation := 2 ;
27562: LD_ADDR_OWVAR 21
27566: PUSH
27567: LD_INT 2
27569: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27570: LD_ADDR_OWVAR 37
27574: PUSH
27575: LD_INT 14
27577: ST_TO_ADDR
// vc_engine := engine_siberite ;
27578: LD_ADDR_OWVAR 39
27582: PUSH
27583: LD_INT 3
27585: ST_TO_ADDR
// vc_control := control_apeman ;
27586: LD_ADDR_OWVAR 38
27590: PUSH
27591: LD_INT 5
27593: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27594: LD_ADDR_OWVAR 40
27598: PUSH
27599: LD_INT 29
27601: ST_TO_ADDR
// un := CreateVehicle ;
27602: LD_ADDR_VAR 0 2
27606: PUSH
27607: CALL_OW 45
27611: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27612: LD_VAR 0 2
27616: PPUSH
27617: LD_INT 1
27619: PPUSH
27620: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27624: LD_INT 35
27626: PPUSH
27627: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27631: LD_VAR 0 2
27635: PPUSH
27636: LD_INT 22
27638: PUSH
27639: LD_OWVAR 2
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PPUSH
27648: CALL_OW 69
27652: PPUSH
27653: LD_VAR 0 2
27657: PPUSH
27658: CALL_OW 74
27662: PPUSH
27663: CALL_OW 115
// until IsDead ( un ) ;
27667: LD_VAR 0 2
27671: PPUSH
27672: CALL_OW 301
27676: IFFALSE 27624
// end ;
27678: PPOPN 2
27680: END
// every 0 0$1 trigger StreamModeActive and sStu do
27681: LD_EXP 67
27685: PUSH
27686: LD_EXP 106
27690: AND
27691: IFFALSE 27707
27693: GO 27695
27695: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27696: LD_STRING displayStucuk();
27698: PPUSH
27699: CALL_OW 559
// ResetFog ;
27703: CALL_OW 335
// end ;
27707: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27708: LD_EXP 67
27712: PUSH
27713: LD_EXP 99
27717: AND
27718: IFFALSE 27859
27720: GO 27722
27722: DISABLE
27723: LD_INT 0
27725: PPUSH
27726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27727: LD_ADDR_VAR 0 2
27731: PUSH
27732: LD_INT 22
27734: PUSH
27735: LD_OWVAR 2
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 21
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PPUSH
27758: CALL_OW 69
27762: ST_TO_ADDR
// if not tmp then
27763: LD_VAR 0 2
27767: NOT
27768: IFFALSE 27772
// exit ;
27770: GO 27859
// un := tmp [ rand ( 1 , tmp ) ] ;
27772: LD_ADDR_VAR 0 1
27776: PUSH
27777: LD_VAR 0 2
27781: PUSH
27782: LD_INT 1
27784: PPUSH
27785: LD_VAR 0 2
27789: PPUSH
27790: CALL_OW 12
27794: ARRAY
27795: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27796: LD_VAR 0 1
27800: PPUSH
27801: LD_INT 0
27803: PPUSH
27804: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27808: LD_VAR 0 1
27812: PPUSH
27813: LD_OWVAR 3
27817: PUSH
27818: LD_VAR 0 1
27822: DIFF
27823: PPUSH
27824: LD_VAR 0 1
27828: PPUSH
27829: CALL_OW 74
27833: PPUSH
27834: CALL_OW 115
// wait ( 0 0$20 ) ;
27838: LD_INT 700
27840: PPUSH
27841: CALL_OW 67
// SetSide ( un , your_side ) ;
27845: LD_VAR 0 1
27849: PPUSH
27850: LD_OWVAR 2
27854: PPUSH
27855: CALL_OW 235
// end ;
27859: PPOPN 2
27861: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27862: LD_EXP 67
27866: PUSH
27867: LD_EXP 100
27871: AND
27872: IFFALSE 27978
27874: GO 27876
27876: DISABLE
27877: LD_INT 0
27879: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27880: LD_ADDR_VAR 0 1
27884: PUSH
27885: LD_INT 22
27887: PUSH
27888: LD_OWVAR 2
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 2
27899: PUSH
27900: LD_INT 30
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 30
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PPUSH
27929: CALL_OW 69
27933: ST_TO_ADDR
// if not depot then
27934: LD_VAR 0 1
27938: NOT
27939: IFFALSE 27943
// exit ;
27941: GO 27978
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27943: LD_VAR 0 1
27947: PUSH
27948: LD_INT 1
27950: ARRAY
27951: PPUSH
27952: CALL_OW 250
27956: PPUSH
27957: LD_VAR 0 1
27961: PUSH
27962: LD_INT 1
27964: ARRAY
27965: PPUSH
27966: CALL_OW 251
27970: PPUSH
27971: LD_INT 70
27973: PPUSH
27974: CALL_OW 495
// end ;
27978: PPOPN 1
27980: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27981: LD_EXP 67
27985: PUSH
27986: LD_EXP 101
27990: AND
27991: IFFALSE 28202
27993: GO 27995
27995: DISABLE
27996: LD_INT 0
27998: PPUSH
27999: PPUSH
28000: PPUSH
28001: PPUSH
28002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28003: LD_ADDR_VAR 0 5
28007: PUSH
28008: LD_INT 22
28010: PUSH
28011: LD_OWVAR 2
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 21
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PPUSH
28034: CALL_OW 69
28038: ST_TO_ADDR
// if not tmp then
28039: LD_VAR 0 5
28043: NOT
28044: IFFALSE 28048
// exit ;
28046: GO 28202
// for i in tmp do
28048: LD_ADDR_VAR 0 1
28052: PUSH
28053: LD_VAR 0 5
28057: PUSH
28058: FOR_IN
28059: IFFALSE 28200
// begin d := rand ( 0 , 5 ) ;
28061: LD_ADDR_VAR 0 4
28065: PUSH
28066: LD_INT 0
28068: PPUSH
28069: LD_INT 5
28071: PPUSH
28072: CALL_OW 12
28076: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28077: LD_ADDR_VAR 0 2
28081: PUSH
28082: LD_VAR 0 1
28086: PPUSH
28087: CALL_OW 250
28091: PPUSH
28092: LD_VAR 0 4
28096: PPUSH
28097: LD_INT 3
28099: PPUSH
28100: LD_INT 12
28102: PPUSH
28103: CALL_OW 12
28107: PPUSH
28108: CALL_OW 272
28112: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28113: LD_ADDR_VAR 0 3
28117: PUSH
28118: LD_VAR 0 1
28122: PPUSH
28123: CALL_OW 251
28127: PPUSH
28128: LD_VAR 0 4
28132: PPUSH
28133: LD_INT 3
28135: PPUSH
28136: LD_INT 12
28138: PPUSH
28139: CALL_OW 12
28143: PPUSH
28144: CALL_OW 273
28148: ST_TO_ADDR
// if ValidHex ( x , y ) then
28149: LD_VAR 0 2
28153: PPUSH
28154: LD_VAR 0 3
28158: PPUSH
28159: CALL_OW 488
28163: IFFALSE 28198
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28165: LD_VAR 0 1
28169: PPUSH
28170: LD_VAR 0 2
28174: PPUSH
28175: LD_VAR 0 3
28179: PPUSH
28180: LD_INT 3
28182: PPUSH
28183: LD_INT 6
28185: PPUSH
28186: CALL_OW 12
28190: PPUSH
28191: LD_INT 1
28193: PPUSH
28194: CALL_OW 483
// end ;
28198: GO 28058
28200: POP
28201: POP
// end ;
28202: PPOPN 5
28204: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28205: LD_EXP 67
28209: PUSH
28210: LD_EXP 102
28214: AND
28215: IFFALSE 28309
28217: GO 28219
28219: DISABLE
28220: LD_INT 0
28222: PPUSH
28223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28224: LD_ADDR_VAR 0 2
28228: PUSH
28229: LD_INT 22
28231: PUSH
28232: LD_OWVAR 2
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 32
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 21
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: LIST
28265: PPUSH
28266: CALL_OW 69
28270: ST_TO_ADDR
// if not tmp then
28271: LD_VAR 0 2
28275: NOT
28276: IFFALSE 28280
// exit ;
28278: GO 28309
// for i in tmp do
28280: LD_ADDR_VAR 0 1
28284: PUSH
28285: LD_VAR 0 2
28289: PUSH
28290: FOR_IN
28291: IFFALSE 28307
// SetFuel ( i , 0 ) ;
28293: LD_VAR 0 1
28297: PPUSH
28298: LD_INT 0
28300: PPUSH
28301: CALL_OW 240
28305: GO 28290
28307: POP
28308: POP
// end ;
28309: PPOPN 2
28311: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28312: LD_EXP 67
28316: PUSH
28317: LD_EXP 103
28321: AND
28322: IFFALSE 28388
28324: GO 28326
28326: DISABLE
28327: LD_INT 0
28329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28330: LD_ADDR_VAR 0 1
28334: PUSH
28335: LD_INT 22
28337: PUSH
28338: LD_OWVAR 2
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 30
28349: PUSH
28350: LD_INT 29
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 69
28365: ST_TO_ADDR
// if not tmp then
28366: LD_VAR 0 1
28370: NOT
28371: IFFALSE 28375
// exit ;
28373: GO 28388
// DestroyUnit ( tmp [ 1 ] ) ;
28375: LD_VAR 0 1
28379: PUSH
28380: LD_INT 1
28382: ARRAY
28383: PPUSH
28384: CALL_OW 65
// end ;
28388: PPOPN 1
28390: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28391: LD_EXP 67
28395: PUSH
28396: LD_EXP 105
28400: AND
28401: IFFALSE 28530
28403: GO 28405
28405: DISABLE
28406: LD_INT 0
28408: PPUSH
// begin uc_side := 0 ;
28409: LD_ADDR_OWVAR 20
28413: PUSH
28414: LD_INT 0
28416: ST_TO_ADDR
// uc_nation := nation_arabian ;
28417: LD_ADDR_OWVAR 21
28421: PUSH
28422: LD_INT 2
28424: ST_TO_ADDR
// hc_gallery :=  ;
28425: LD_ADDR_OWVAR 33
28429: PUSH
28430: LD_STRING 
28432: ST_TO_ADDR
// hc_name :=  ;
28433: LD_ADDR_OWVAR 26
28437: PUSH
28438: LD_STRING 
28440: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28441: LD_INT 1
28443: PPUSH
28444: LD_INT 11
28446: PPUSH
28447: LD_INT 10
28449: PPUSH
28450: CALL_OW 380
// un := CreateHuman ;
28454: LD_ADDR_VAR 0 1
28458: PUSH
28459: CALL_OW 44
28463: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28464: LD_VAR 0 1
28468: PPUSH
28469: LD_INT 1
28471: PPUSH
28472: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28476: LD_INT 35
28478: PPUSH
28479: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28483: LD_VAR 0 1
28487: PPUSH
28488: LD_INT 22
28490: PUSH
28491: LD_OWVAR 2
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PPUSH
28500: CALL_OW 69
28504: PPUSH
28505: LD_VAR 0 1
28509: PPUSH
28510: CALL_OW 74
28514: PPUSH
28515: CALL_OW 115
// until IsDead ( un ) ;
28519: LD_VAR 0 1
28523: PPUSH
28524: CALL_OW 301
28528: IFFALSE 28476
// end ;
28530: PPOPN 1
28532: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28533: LD_EXP 67
28537: PUSH
28538: LD_EXP 107
28542: AND
28543: IFFALSE 28555
28545: GO 28547
28547: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28548: LD_STRING earthquake(getX(game), 0, 32)
28550: PPUSH
28551: CALL_OW 559
28555: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28556: LD_EXP 67
28560: PUSH
28561: LD_EXP 108
28565: AND
28566: IFFALSE 28657
28568: GO 28570
28570: DISABLE
28571: LD_INT 0
28573: PPUSH
// begin enable ;
28574: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28575: LD_ADDR_VAR 0 1
28579: PUSH
28580: LD_INT 22
28582: PUSH
28583: LD_OWVAR 2
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 21
28594: PUSH
28595: LD_INT 2
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 33
28604: PUSH
28605: LD_INT 3
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: LIST
28616: PPUSH
28617: CALL_OW 69
28621: ST_TO_ADDR
// if not tmp then
28622: LD_VAR 0 1
28626: NOT
28627: IFFALSE 28631
// exit ;
28629: GO 28657
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28631: LD_VAR 0 1
28635: PUSH
28636: LD_INT 1
28638: PPUSH
28639: LD_VAR 0 1
28643: PPUSH
28644: CALL_OW 12
28648: ARRAY
28649: PPUSH
28650: LD_INT 1
28652: PPUSH
28653: CALL_OW 234
// end ;
28657: PPOPN 1
28659: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28660: LD_EXP 67
28664: PUSH
28665: LD_EXP 109
28669: AND
28670: IFFALSE 28811
28672: GO 28674
28674: DISABLE
28675: LD_INT 0
28677: PPUSH
28678: PPUSH
28679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28680: LD_ADDR_VAR 0 3
28684: PUSH
28685: LD_INT 22
28687: PUSH
28688: LD_OWVAR 2
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 25
28699: PUSH
28700: LD_INT 1
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PPUSH
28711: CALL_OW 69
28715: ST_TO_ADDR
// if not tmp then
28716: LD_VAR 0 3
28720: NOT
28721: IFFALSE 28725
// exit ;
28723: GO 28811
// un := tmp [ rand ( 1 , tmp ) ] ;
28725: LD_ADDR_VAR 0 2
28729: PUSH
28730: LD_VAR 0 3
28734: PUSH
28735: LD_INT 1
28737: PPUSH
28738: LD_VAR 0 3
28742: PPUSH
28743: CALL_OW 12
28747: ARRAY
28748: ST_TO_ADDR
// if Crawls ( un ) then
28749: LD_VAR 0 2
28753: PPUSH
28754: CALL_OW 318
28758: IFFALSE 28769
// ComWalk ( un ) ;
28760: LD_VAR 0 2
28764: PPUSH
28765: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28769: LD_VAR 0 2
28773: PPUSH
28774: LD_INT 9
28776: PPUSH
28777: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28781: LD_INT 28
28783: PPUSH
28784: LD_OWVAR 2
28788: PPUSH
28789: LD_INT 2
28791: PPUSH
28792: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28796: LD_INT 29
28798: PPUSH
28799: LD_OWVAR 2
28803: PPUSH
28804: LD_INT 2
28806: PPUSH
28807: CALL_OW 322
// end ;
28811: PPOPN 3
28813: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28814: LD_EXP 67
28818: PUSH
28819: LD_EXP 110
28823: AND
28824: IFFALSE 28935
28826: GO 28828
28828: DISABLE
28829: LD_INT 0
28831: PPUSH
28832: PPUSH
28833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28834: LD_ADDR_VAR 0 3
28838: PUSH
28839: LD_INT 22
28841: PUSH
28842: LD_OWVAR 2
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 25
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PPUSH
28865: CALL_OW 69
28869: ST_TO_ADDR
// if not tmp then
28870: LD_VAR 0 3
28874: NOT
28875: IFFALSE 28879
// exit ;
28877: GO 28935
// un := tmp [ rand ( 1 , tmp ) ] ;
28879: LD_ADDR_VAR 0 2
28883: PUSH
28884: LD_VAR 0 3
28888: PUSH
28889: LD_INT 1
28891: PPUSH
28892: LD_VAR 0 3
28896: PPUSH
28897: CALL_OW 12
28901: ARRAY
28902: ST_TO_ADDR
// if Crawls ( un ) then
28903: LD_VAR 0 2
28907: PPUSH
28908: CALL_OW 318
28912: IFFALSE 28923
// ComWalk ( un ) ;
28914: LD_VAR 0 2
28918: PPUSH
28919: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28923: LD_VAR 0 2
28927: PPUSH
28928: LD_INT 8
28930: PPUSH
28931: CALL_OW 336
// end ;
28935: PPOPN 3
28937: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28938: LD_EXP 67
28942: PUSH
28943: LD_EXP 111
28947: AND
28948: IFFALSE 29092
28950: GO 28952
28952: DISABLE
28953: LD_INT 0
28955: PPUSH
28956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28957: LD_ADDR_VAR 0 2
28961: PUSH
28962: LD_INT 22
28964: PUSH
28965: LD_OWVAR 2
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 21
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: LD_INT 34
28989: PUSH
28990: LD_INT 12
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 34
28999: PUSH
29000: LD_INT 51
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 34
29009: PUSH
29010: LD_INT 32
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: LIST
29027: PPUSH
29028: CALL_OW 69
29032: ST_TO_ADDR
// if not tmp then
29033: LD_VAR 0 2
29037: NOT
29038: IFFALSE 29042
// exit ;
29040: GO 29092
// for i in tmp do
29042: LD_ADDR_VAR 0 1
29046: PUSH
29047: LD_VAR 0 2
29051: PUSH
29052: FOR_IN
29053: IFFALSE 29090
// if GetCargo ( i , mat_artifact ) = 0 then
29055: LD_VAR 0 1
29059: PPUSH
29060: LD_INT 4
29062: PPUSH
29063: CALL_OW 289
29067: PUSH
29068: LD_INT 0
29070: EQUAL
29071: IFFALSE 29088
// SetCargo ( i , mat_siberit , 100 ) ;
29073: LD_VAR 0 1
29077: PPUSH
29078: LD_INT 3
29080: PPUSH
29081: LD_INT 100
29083: PPUSH
29084: CALL_OW 290
29088: GO 29052
29090: POP
29091: POP
// end ;
29092: PPOPN 2
29094: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29095: LD_EXP 67
29099: PUSH
29100: LD_EXP 112
29104: AND
29105: IFFALSE 29288
29107: GO 29109
29109: DISABLE
29110: LD_INT 0
29112: PPUSH
29113: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29114: LD_ADDR_VAR 0 2
29118: PUSH
29119: LD_INT 22
29121: PUSH
29122: LD_OWVAR 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PPUSH
29131: CALL_OW 69
29135: ST_TO_ADDR
// if not tmp then
29136: LD_VAR 0 2
29140: NOT
29141: IFFALSE 29145
// exit ;
29143: GO 29288
// for i := 1 to 2 do
29145: LD_ADDR_VAR 0 1
29149: PUSH
29150: DOUBLE
29151: LD_INT 1
29153: DEC
29154: ST_TO_ADDR
29155: LD_INT 2
29157: PUSH
29158: FOR_TO
29159: IFFALSE 29286
// begin uc_side := your_side ;
29161: LD_ADDR_OWVAR 20
29165: PUSH
29166: LD_OWVAR 2
29170: ST_TO_ADDR
// uc_nation := nation_american ;
29171: LD_ADDR_OWVAR 21
29175: PUSH
29176: LD_INT 1
29178: ST_TO_ADDR
// vc_chassis := us_morphling ;
29179: LD_ADDR_OWVAR 37
29183: PUSH
29184: LD_INT 5
29186: ST_TO_ADDR
// vc_engine := engine_siberite ;
29187: LD_ADDR_OWVAR 39
29191: PUSH
29192: LD_INT 3
29194: ST_TO_ADDR
// vc_control := control_computer ;
29195: LD_ADDR_OWVAR 38
29199: PUSH
29200: LD_INT 3
29202: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29203: LD_ADDR_OWVAR 40
29207: PUSH
29208: LD_INT 10
29210: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29211: LD_VAR 0 2
29215: PUSH
29216: LD_INT 1
29218: ARRAY
29219: PPUSH
29220: CALL_OW 310
29224: NOT
29225: IFFALSE 29272
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29227: CALL_OW 45
29231: PPUSH
29232: LD_VAR 0 2
29236: PUSH
29237: LD_INT 1
29239: ARRAY
29240: PPUSH
29241: CALL_OW 250
29245: PPUSH
29246: LD_VAR 0 2
29250: PUSH
29251: LD_INT 1
29253: ARRAY
29254: PPUSH
29255: CALL_OW 251
29259: PPUSH
29260: LD_INT 12
29262: PPUSH
29263: LD_INT 1
29265: PPUSH
29266: CALL_OW 50
29270: GO 29284
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29272: CALL_OW 45
29276: PPUSH
29277: LD_INT 1
29279: PPUSH
29280: CALL_OW 51
// end ;
29284: GO 29158
29286: POP
29287: POP
// end ;
29288: PPOPN 2
29290: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29291: LD_EXP 67
29295: PUSH
29296: LD_EXP 113
29300: AND
29301: IFFALSE 29523
29303: GO 29305
29305: DISABLE
29306: LD_INT 0
29308: PPUSH
29309: PPUSH
29310: PPUSH
29311: PPUSH
29312: PPUSH
29313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29314: LD_ADDR_VAR 0 6
29318: PUSH
29319: LD_INT 22
29321: PUSH
29322: LD_OWVAR 2
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 21
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 3
29343: PUSH
29344: LD_INT 23
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: LIST
29362: PPUSH
29363: CALL_OW 69
29367: ST_TO_ADDR
// if not tmp then
29368: LD_VAR 0 6
29372: NOT
29373: IFFALSE 29377
// exit ;
29375: GO 29523
// s1 := rand ( 1 , 4 ) ;
29377: LD_ADDR_VAR 0 2
29381: PUSH
29382: LD_INT 1
29384: PPUSH
29385: LD_INT 4
29387: PPUSH
29388: CALL_OW 12
29392: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29393: LD_ADDR_VAR 0 4
29397: PUSH
29398: LD_VAR 0 6
29402: PUSH
29403: LD_INT 1
29405: ARRAY
29406: PPUSH
29407: LD_VAR 0 2
29411: PPUSH
29412: CALL_OW 259
29416: ST_TO_ADDR
// if s1 = 1 then
29417: LD_VAR 0 2
29421: PUSH
29422: LD_INT 1
29424: EQUAL
29425: IFFALSE 29445
// s2 := rand ( 2 , 4 ) else
29427: LD_ADDR_VAR 0 3
29431: PUSH
29432: LD_INT 2
29434: PPUSH
29435: LD_INT 4
29437: PPUSH
29438: CALL_OW 12
29442: ST_TO_ADDR
29443: GO 29453
// s2 := 1 ;
29445: LD_ADDR_VAR 0 3
29449: PUSH
29450: LD_INT 1
29452: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29453: LD_ADDR_VAR 0 5
29457: PUSH
29458: LD_VAR 0 6
29462: PUSH
29463: LD_INT 1
29465: ARRAY
29466: PPUSH
29467: LD_VAR 0 3
29471: PPUSH
29472: CALL_OW 259
29476: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29477: LD_VAR 0 6
29481: PUSH
29482: LD_INT 1
29484: ARRAY
29485: PPUSH
29486: LD_VAR 0 2
29490: PPUSH
29491: LD_VAR 0 5
29495: PPUSH
29496: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29500: LD_VAR 0 6
29504: PUSH
29505: LD_INT 1
29507: ARRAY
29508: PPUSH
29509: LD_VAR 0 3
29513: PPUSH
29514: LD_VAR 0 4
29518: PPUSH
29519: CALL_OW 237
// end ;
29523: PPOPN 6
29525: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29526: LD_EXP 67
29530: PUSH
29531: LD_EXP 114
29535: AND
29536: IFFALSE 29615
29538: GO 29540
29540: DISABLE
29541: LD_INT 0
29543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29544: LD_ADDR_VAR 0 1
29548: PUSH
29549: LD_INT 22
29551: PUSH
29552: LD_OWVAR 2
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 30
29563: PUSH
29564: LD_INT 3
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PPUSH
29575: CALL_OW 69
29579: ST_TO_ADDR
// if not tmp then
29580: LD_VAR 0 1
29584: NOT
29585: IFFALSE 29589
// exit ;
29587: GO 29615
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29589: LD_VAR 0 1
29593: PUSH
29594: LD_INT 1
29596: PPUSH
29597: LD_VAR 0 1
29601: PPUSH
29602: CALL_OW 12
29606: ARRAY
29607: PPUSH
29608: LD_INT 1
29610: PPUSH
29611: CALL_OW 234
// end ;
29615: PPOPN 1
29617: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29618: LD_EXP 67
29622: PUSH
29623: LD_EXP 115
29627: AND
29628: IFFALSE 29740
29630: GO 29632
29632: DISABLE
29633: LD_INT 0
29635: PPUSH
29636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29637: LD_ADDR_VAR 0 2
29641: PUSH
29642: LD_INT 22
29644: PUSH
29645: LD_OWVAR 2
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: LD_INT 30
29659: PUSH
29660: LD_INT 27
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 30
29669: PUSH
29670: LD_INT 26
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 30
29679: PUSH
29680: LD_INT 28
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PPUSH
29697: CALL_OW 69
29701: ST_TO_ADDR
// if not tmp then
29702: LD_VAR 0 2
29706: NOT
29707: IFFALSE 29711
// exit ;
29709: GO 29740
// for i in tmp do
29711: LD_ADDR_VAR 0 1
29715: PUSH
29716: LD_VAR 0 2
29720: PUSH
29721: FOR_IN
29722: IFFALSE 29738
// SetLives ( i , 1 ) ;
29724: LD_VAR 0 1
29728: PPUSH
29729: LD_INT 1
29731: PPUSH
29732: CALL_OW 234
29736: GO 29721
29738: POP
29739: POP
// end ;
29740: PPOPN 2
29742: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29743: LD_EXP 67
29747: PUSH
29748: LD_EXP 116
29752: AND
29753: IFFALSE 30027
29755: GO 29757
29757: DISABLE
29758: LD_INT 0
29760: PPUSH
29761: PPUSH
29762: PPUSH
// begin i := rand ( 1 , 7 ) ;
29763: LD_ADDR_VAR 0 1
29767: PUSH
29768: LD_INT 1
29770: PPUSH
29771: LD_INT 7
29773: PPUSH
29774: CALL_OW 12
29778: ST_TO_ADDR
// case i of 1 :
29779: LD_VAR 0 1
29783: PUSH
29784: LD_INT 1
29786: DOUBLE
29787: EQUAL
29788: IFTRUE 29792
29790: GO 29802
29792: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29793: LD_STRING earthquake(getX(game), 0, 32)
29795: PPUSH
29796: CALL_OW 559
29800: GO 30027
29802: LD_INT 2
29804: DOUBLE
29805: EQUAL
29806: IFTRUE 29810
29808: GO 29824
29810: POP
// begin ToLua ( displayStucuk(); ) ;
29811: LD_STRING displayStucuk();
29813: PPUSH
29814: CALL_OW 559
// ResetFog ;
29818: CALL_OW 335
// end ; 3 :
29822: GO 30027
29824: LD_INT 3
29826: DOUBLE
29827: EQUAL
29828: IFTRUE 29832
29830: GO 29936
29832: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29833: LD_ADDR_VAR 0 2
29837: PUSH
29838: LD_INT 22
29840: PUSH
29841: LD_OWVAR 2
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 25
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PPUSH
29864: CALL_OW 69
29868: ST_TO_ADDR
// if not tmp then
29869: LD_VAR 0 2
29873: NOT
29874: IFFALSE 29878
// exit ;
29876: GO 30027
// un := tmp [ rand ( 1 , tmp ) ] ;
29878: LD_ADDR_VAR 0 3
29882: PUSH
29883: LD_VAR 0 2
29887: PUSH
29888: LD_INT 1
29890: PPUSH
29891: LD_VAR 0 2
29895: PPUSH
29896: CALL_OW 12
29900: ARRAY
29901: ST_TO_ADDR
// if Crawls ( un ) then
29902: LD_VAR 0 3
29906: PPUSH
29907: CALL_OW 318
29911: IFFALSE 29922
// ComWalk ( un ) ;
29913: LD_VAR 0 3
29917: PPUSH
29918: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29922: LD_VAR 0 3
29926: PPUSH
29927: LD_INT 8
29929: PPUSH
29930: CALL_OW 336
// end ; 4 :
29934: GO 30027
29936: LD_INT 4
29938: DOUBLE
29939: EQUAL
29940: IFTRUE 29944
29942: GO 30005
29944: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29945: LD_ADDR_VAR 0 2
29949: PUSH
29950: LD_INT 22
29952: PUSH
29953: LD_OWVAR 2
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 30
29964: PUSH
29965: LD_INT 29
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PPUSH
29976: CALL_OW 69
29980: ST_TO_ADDR
// if not tmp then
29981: LD_VAR 0 2
29985: NOT
29986: IFFALSE 29990
// exit ;
29988: GO 30027
// DestroyUnit ( tmp [ 1 ] ) ;
29990: LD_VAR 0 2
29994: PUSH
29995: LD_INT 1
29997: ARRAY
29998: PPUSH
29999: CALL_OW 65
// end ; 5 .. 7 :
30003: GO 30027
30005: LD_INT 5
30007: DOUBLE
30008: GREATEREQUAL
30009: IFFALSE 30017
30011: LD_INT 7
30013: DOUBLE
30014: LESSEQUAL
30015: IFTRUE 30019
30017: GO 30026
30019: POP
// StreamSibBomb ; end ;
30020: CALL 26277 0 0
30024: GO 30027
30026: POP
// end ;
30027: PPOPN 3
30029: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30030: LD_EXP 67
30034: PUSH
30035: LD_EXP 117
30039: AND
30040: IFFALSE 30196
30042: GO 30044
30044: DISABLE
30045: LD_INT 0
30047: PPUSH
30048: PPUSH
30049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30050: LD_ADDR_VAR 0 2
30054: PUSH
30055: LD_INT 81
30057: PUSH
30058: LD_OWVAR 2
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: LD_INT 21
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 21
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PPUSH
30099: CALL_OW 69
30103: ST_TO_ADDR
// if not tmp then
30104: LD_VAR 0 2
30108: NOT
30109: IFFALSE 30113
// exit ;
30111: GO 30196
// p := 0 ;
30113: LD_ADDR_VAR 0 3
30117: PUSH
30118: LD_INT 0
30120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30121: LD_INT 35
30123: PPUSH
30124: CALL_OW 67
// p := p + 1 ;
30128: LD_ADDR_VAR 0 3
30132: PUSH
30133: LD_VAR 0 3
30137: PUSH
30138: LD_INT 1
30140: PLUS
30141: ST_TO_ADDR
// for i in tmp do
30142: LD_ADDR_VAR 0 1
30146: PUSH
30147: LD_VAR 0 2
30151: PUSH
30152: FOR_IN
30153: IFFALSE 30184
// if GetLives ( i ) < 1000 then
30155: LD_VAR 0 1
30159: PPUSH
30160: CALL_OW 256
30164: PUSH
30165: LD_INT 1000
30167: LESS
30168: IFFALSE 30182
// SetLives ( i , 1000 ) ;
30170: LD_VAR 0 1
30174: PPUSH
30175: LD_INT 1000
30177: PPUSH
30178: CALL_OW 234
30182: GO 30152
30184: POP
30185: POP
// until p > 20 ;
30186: LD_VAR 0 3
30190: PUSH
30191: LD_INT 20
30193: GREATER
30194: IFFALSE 30121
// end ;
30196: PPOPN 3
30198: END
// every 0 0$1 trigger StreamModeActive and sTime do
30199: LD_EXP 67
30203: PUSH
30204: LD_EXP 118
30208: AND
30209: IFFALSE 30244
30211: GO 30213
30213: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30214: LD_INT 28
30216: PPUSH
30217: LD_OWVAR 2
30221: PPUSH
30222: LD_INT 2
30224: PPUSH
30225: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30229: LD_INT 30
30231: PPUSH
30232: LD_OWVAR 2
30236: PPUSH
30237: LD_INT 2
30239: PPUSH
30240: CALL_OW 322
// end ;
30244: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30245: LD_EXP 67
30249: PUSH
30250: LD_EXP 119
30254: AND
30255: IFFALSE 30376
30257: GO 30259
30259: DISABLE
30260: LD_INT 0
30262: PPUSH
30263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30264: LD_ADDR_VAR 0 2
30268: PUSH
30269: LD_INT 22
30271: PUSH
30272: LD_OWVAR 2
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 21
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 3
30293: PUSH
30294: LD_INT 23
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: PPUSH
30313: CALL_OW 69
30317: ST_TO_ADDR
// if not tmp then
30318: LD_VAR 0 2
30322: NOT
30323: IFFALSE 30327
// exit ;
30325: GO 30376
// for i in tmp do
30327: LD_ADDR_VAR 0 1
30331: PUSH
30332: LD_VAR 0 2
30336: PUSH
30337: FOR_IN
30338: IFFALSE 30374
// begin if Crawls ( i ) then
30340: LD_VAR 0 1
30344: PPUSH
30345: CALL_OW 318
30349: IFFALSE 30360
// ComWalk ( i ) ;
30351: LD_VAR 0 1
30355: PPUSH
30356: CALL_OW 138
// SetClass ( i , 2 ) ;
30360: LD_VAR 0 1
30364: PPUSH
30365: LD_INT 2
30367: PPUSH
30368: CALL_OW 336
// end ;
30372: GO 30337
30374: POP
30375: POP
// end ;
30376: PPOPN 2
30378: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30379: LD_EXP 67
30383: PUSH
30384: LD_EXP 120
30388: AND
30389: IFFALSE 30670
30391: GO 30393
30393: DISABLE
30394: LD_INT 0
30396: PPUSH
30397: PPUSH
30398: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30399: LD_OWVAR 2
30403: PPUSH
30404: LD_INT 9
30406: PPUSH
30407: LD_INT 1
30409: PPUSH
30410: LD_INT 1
30412: PPUSH
30413: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30417: LD_INT 9
30419: PPUSH
30420: LD_OWVAR 2
30424: PPUSH
30425: CALL_OW 343
// uc_side := 9 ;
30429: LD_ADDR_OWVAR 20
30433: PUSH
30434: LD_INT 9
30436: ST_TO_ADDR
// uc_nation := 2 ;
30437: LD_ADDR_OWVAR 21
30441: PUSH
30442: LD_INT 2
30444: ST_TO_ADDR
// hc_name := Dark Warrior ;
30445: LD_ADDR_OWVAR 26
30449: PUSH
30450: LD_STRING Dark Warrior
30452: ST_TO_ADDR
// hc_gallery :=  ;
30453: LD_ADDR_OWVAR 33
30457: PUSH
30458: LD_STRING 
30460: ST_TO_ADDR
// hc_noskilllimit := true ;
30461: LD_ADDR_OWVAR 76
30465: PUSH
30466: LD_INT 1
30468: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30469: LD_ADDR_OWVAR 31
30473: PUSH
30474: LD_INT 30
30476: PUSH
30477: LD_INT 30
30479: PUSH
30480: LD_INT 30
30482: PUSH
30483: LD_INT 30
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: ST_TO_ADDR
// un := CreateHuman ;
30492: LD_ADDR_VAR 0 3
30496: PUSH
30497: CALL_OW 44
30501: ST_TO_ADDR
// hc_noskilllimit := false ;
30502: LD_ADDR_OWVAR 76
30506: PUSH
30507: LD_INT 0
30509: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30510: LD_VAR 0 3
30514: PPUSH
30515: LD_INT 1
30517: PPUSH
30518: CALL_OW 51
// p := 0 ;
30522: LD_ADDR_VAR 0 2
30526: PUSH
30527: LD_INT 0
30529: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30530: LD_INT 35
30532: PPUSH
30533: CALL_OW 67
// p := p + 1 ;
30537: LD_ADDR_VAR 0 2
30541: PUSH
30542: LD_VAR 0 2
30546: PUSH
30547: LD_INT 1
30549: PLUS
30550: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30551: LD_VAR 0 3
30555: PPUSH
30556: CALL_OW 256
30560: PUSH
30561: LD_INT 1000
30563: LESS
30564: IFFALSE 30578
// SetLives ( un , 1000 ) ;
30566: LD_VAR 0 3
30570: PPUSH
30571: LD_INT 1000
30573: PPUSH
30574: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30578: LD_VAR 0 3
30582: PPUSH
30583: LD_INT 81
30585: PUSH
30586: LD_OWVAR 2
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 91
30597: PUSH
30598: LD_VAR 0 3
30602: PUSH
30603: LD_INT 30
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PPUSH
30615: CALL_OW 69
30619: PPUSH
30620: LD_VAR 0 3
30624: PPUSH
30625: CALL_OW 74
30629: PPUSH
30630: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30634: LD_VAR 0 2
30638: PUSH
30639: LD_INT 60
30641: GREATER
30642: PUSH
30643: LD_VAR 0 3
30647: PPUSH
30648: CALL_OW 301
30652: OR
30653: IFFALSE 30530
// if un then
30655: LD_VAR 0 3
30659: IFFALSE 30670
// RemoveUnit ( un ) ;
30661: LD_VAR 0 3
30665: PPUSH
30666: CALL_OW 64
// end ;
30670: PPOPN 3
30672: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30673: LD_INT 0
30675: PPUSH
// case cmd of 301 :
30676: LD_VAR 0 1
30680: PUSH
30681: LD_INT 301
30683: DOUBLE
30684: EQUAL
30685: IFTRUE 30689
30687: GO 30721
30689: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30690: LD_VAR 0 6
30694: PPUSH
30695: LD_VAR 0 7
30699: PPUSH
30700: LD_VAR 0 8
30704: PPUSH
30705: LD_VAR 0 4
30709: PPUSH
30710: LD_VAR 0 5
30714: PPUSH
30715: CALL 31922 0 5
30719: GO 30842
30721: LD_INT 302
30723: DOUBLE
30724: EQUAL
30725: IFTRUE 30729
30727: GO 30766
30729: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30730: LD_VAR 0 6
30734: PPUSH
30735: LD_VAR 0 7
30739: PPUSH
30740: LD_VAR 0 8
30744: PPUSH
30745: LD_VAR 0 9
30749: PPUSH
30750: LD_VAR 0 4
30754: PPUSH
30755: LD_VAR 0 5
30759: PPUSH
30760: CALL 32013 0 6
30764: GO 30842
30766: LD_INT 303
30768: DOUBLE
30769: EQUAL
30770: IFTRUE 30774
30772: GO 30811
30774: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30775: LD_VAR 0 6
30779: PPUSH
30780: LD_VAR 0 7
30784: PPUSH
30785: LD_VAR 0 8
30789: PPUSH
30790: LD_VAR 0 9
30794: PPUSH
30795: LD_VAR 0 4
30799: PPUSH
30800: LD_VAR 0 5
30804: PPUSH
30805: CALL 30847 0 6
30809: GO 30842
30811: LD_INT 304
30813: DOUBLE
30814: EQUAL
30815: IFTRUE 30819
30817: GO 30841
30819: POP
// hHackTeleport ( unit , x , y ) ; end ;
30820: LD_VAR 0 2
30824: PPUSH
30825: LD_VAR 0 4
30829: PPUSH
30830: LD_VAR 0 5
30834: PPUSH
30835: CALL 32606 0 3
30839: GO 30842
30841: POP
// end ;
30842: LD_VAR 0 12
30846: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30847: LD_INT 0
30849: PPUSH
30850: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30851: LD_VAR 0 1
30855: PUSH
30856: LD_INT 1
30858: LESS
30859: PUSH
30860: LD_VAR 0 1
30864: PUSH
30865: LD_INT 3
30867: GREATER
30868: OR
30869: PUSH
30870: LD_VAR 0 5
30874: PPUSH
30875: LD_VAR 0 6
30879: PPUSH
30880: CALL_OW 428
30884: OR
30885: IFFALSE 30889
// exit ;
30887: GO 31609
// uc_side := your_side ;
30889: LD_ADDR_OWVAR 20
30893: PUSH
30894: LD_OWVAR 2
30898: ST_TO_ADDR
// uc_nation := nation ;
30899: LD_ADDR_OWVAR 21
30903: PUSH
30904: LD_VAR 0 1
30908: ST_TO_ADDR
// bc_level = 1 ;
30909: LD_ADDR_OWVAR 43
30913: PUSH
30914: LD_INT 1
30916: ST_TO_ADDR
// case btype of 1 :
30917: LD_VAR 0 2
30921: PUSH
30922: LD_INT 1
30924: DOUBLE
30925: EQUAL
30926: IFTRUE 30930
30928: GO 30941
30930: POP
// bc_type := b_depot ; 2 :
30931: LD_ADDR_OWVAR 42
30935: PUSH
30936: LD_INT 0
30938: ST_TO_ADDR
30939: GO 31553
30941: LD_INT 2
30943: DOUBLE
30944: EQUAL
30945: IFTRUE 30949
30947: GO 30960
30949: POP
// bc_type := b_warehouse ; 3 :
30950: LD_ADDR_OWVAR 42
30954: PUSH
30955: LD_INT 1
30957: ST_TO_ADDR
30958: GO 31553
30960: LD_INT 3
30962: DOUBLE
30963: EQUAL
30964: IFTRUE 30968
30966: GO 30979
30968: POP
// bc_type := b_lab ; 4 .. 9 :
30969: LD_ADDR_OWVAR 42
30973: PUSH
30974: LD_INT 6
30976: ST_TO_ADDR
30977: GO 31553
30979: LD_INT 4
30981: DOUBLE
30982: GREATEREQUAL
30983: IFFALSE 30991
30985: LD_INT 9
30987: DOUBLE
30988: LESSEQUAL
30989: IFTRUE 30993
30991: GO 31045
30993: POP
// begin bc_type := b_lab_half ;
30994: LD_ADDR_OWVAR 42
30998: PUSH
30999: LD_INT 7
31001: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31002: LD_ADDR_OWVAR 44
31006: PUSH
31007: LD_INT 10
31009: PUSH
31010: LD_INT 11
31012: PUSH
31013: LD_INT 12
31015: PUSH
31016: LD_INT 15
31018: PUSH
31019: LD_INT 14
31021: PUSH
31022: LD_INT 13
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: PUSH
31033: LD_VAR 0 2
31037: PUSH
31038: LD_INT 3
31040: MINUS
31041: ARRAY
31042: ST_TO_ADDR
// end ; 10 .. 13 :
31043: GO 31553
31045: LD_INT 10
31047: DOUBLE
31048: GREATEREQUAL
31049: IFFALSE 31057
31051: LD_INT 13
31053: DOUBLE
31054: LESSEQUAL
31055: IFTRUE 31059
31057: GO 31136
31059: POP
// begin bc_type := b_lab_full ;
31060: LD_ADDR_OWVAR 42
31064: PUSH
31065: LD_INT 8
31067: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31068: LD_ADDR_OWVAR 44
31072: PUSH
31073: LD_INT 10
31075: PUSH
31076: LD_INT 12
31078: PUSH
31079: LD_INT 14
31081: PUSH
31082: LD_INT 13
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: PUSH
31091: LD_VAR 0 2
31095: PUSH
31096: LD_INT 9
31098: MINUS
31099: ARRAY
31100: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31101: LD_ADDR_OWVAR 45
31105: PUSH
31106: LD_INT 11
31108: PUSH
31109: LD_INT 15
31111: PUSH
31112: LD_INT 12
31114: PUSH
31115: LD_INT 15
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: PUSH
31124: LD_VAR 0 2
31128: PUSH
31129: LD_INT 9
31131: MINUS
31132: ARRAY
31133: ST_TO_ADDR
// end ; 14 :
31134: GO 31553
31136: LD_INT 14
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 31155
31144: POP
// bc_type := b_workshop ; 15 :
31145: LD_ADDR_OWVAR 42
31149: PUSH
31150: LD_INT 2
31152: ST_TO_ADDR
31153: GO 31553
31155: LD_INT 15
31157: DOUBLE
31158: EQUAL
31159: IFTRUE 31163
31161: GO 31174
31163: POP
// bc_type := b_factory ; 16 :
31164: LD_ADDR_OWVAR 42
31168: PUSH
31169: LD_INT 3
31171: ST_TO_ADDR
31172: GO 31553
31174: LD_INT 16
31176: DOUBLE
31177: EQUAL
31178: IFTRUE 31182
31180: GO 31193
31182: POP
// bc_type := b_ext_gun ; 17 :
31183: LD_ADDR_OWVAR 42
31187: PUSH
31188: LD_INT 17
31190: ST_TO_ADDR
31191: GO 31553
31193: LD_INT 17
31195: DOUBLE
31196: EQUAL
31197: IFTRUE 31201
31199: GO 31229
31201: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31202: LD_ADDR_OWVAR 42
31206: PUSH
31207: LD_INT 19
31209: PUSH
31210: LD_INT 23
31212: PUSH
31213: LD_INT 19
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: PUSH
31221: LD_VAR 0 1
31225: ARRAY
31226: ST_TO_ADDR
31227: GO 31553
31229: LD_INT 18
31231: DOUBLE
31232: EQUAL
31233: IFTRUE 31237
31235: GO 31248
31237: POP
// bc_type := b_ext_radar ; 19 :
31238: LD_ADDR_OWVAR 42
31242: PUSH
31243: LD_INT 20
31245: ST_TO_ADDR
31246: GO 31553
31248: LD_INT 19
31250: DOUBLE
31251: EQUAL
31252: IFTRUE 31256
31254: GO 31267
31256: POP
// bc_type := b_ext_radio ; 20 :
31257: LD_ADDR_OWVAR 42
31261: PUSH
31262: LD_INT 22
31264: ST_TO_ADDR
31265: GO 31553
31267: LD_INT 20
31269: DOUBLE
31270: EQUAL
31271: IFTRUE 31275
31273: GO 31286
31275: POP
// bc_type := b_ext_siberium ; 21 :
31276: LD_ADDR_OWVAR 42
31280: PUSH
31281: LD_INT 21
31283: ST_TO_ADDR
31284: GO 31553
31286: LD_INT 21
31288: DOUBLE
31289: EQUAL
31290: IFTRUE 31294
31292: GO 31305
31294: POP
// bc_type := b_ext_computer ; 22 :
31295: LD_ADDR_OWVAR 42
31299: PUSH
31300: LD_INT 24
31302: ST_TO_ADDR
31303: GO 31553
31305: LD_INT 22
31307: DOUBLE
31308: EQUAL
31309: IFTRUE 31313
31311: GO 31324
31313: POP
// bc_type := b_ext_track ; 23 :
31314: LD_ADDR_OWVAR 42
31318: PUSH
31319: LD_INT 16
31321: ST_TO_ADDR
31322: GO 31553
31324: LD_INT 23
31326: DOUBLE
31327: EQUAL
31328: IFTRUE 31332
31330: GO 31343
31332: POP
// bc_type := b_ext_laser ; 24 :
31333: LD_ADDR_OWVAR 42
31337: PUSH
31338: LD_INT 25
31340: ST_TO_ADDR
31341: GO 31553
31343: LD_INT 24
31345: DOUBLE
31346: EQUAL
31347: IFTRUE 31351
31349: GO 31362
31351: POP
// bc_type := b_control_tower ; 25 :
31352: LD_ADDR_OWVAR 42
31356: PUSH
31357: LD_INT 36
31359: ST_TO_ADDR
31360: GO 31553
31362: LD_INT 25
31364: DOUBLE
31365: EQUAL
31366: IFTRUE 31370
31368: GO 31381
31370: POP
// bc_type := b_breastwork ; 26 :
31371: LD_ADDR_OWVAR 42
31375: PUSH
31376: LD_INT 31
31378: ST_TO_ADDR
31379: GO 31553
31381: LD_INT 26
31383: DOUBLE
31384: EQUAL
31385: IFTRUE 31389
31387: GO 31400
31389: POP
// bc_type := b_bunker ; 27 :
31390: LD_ADDR_OWVAR 42
31394: PUSH
31395: LD_INT 32
31397: ST_TO_ADDR
31398: GO 31553
31400: LD_INT 27
31402: DOUBLE
31403: EQUAL
31404: IFTRUE 31408
31406: GO 31419
31408: POP
// bc_type := b_turret ; 28 :
31409: LD_ADDR_OWVAR 42
31413: PUSH
31414: LD_INT 33
31416: ST_TO_ADDR
31417: GO 31553
31419: LD_INT 28
31421: DOUBLE
31422: EQUAL
31423: IFTRUE 31427
31425: GO 31438
31427: POP
// bc_type := b_armoury ; 29 :
31428: LD_ADDR_OWVAR 42
31432: PUSH
31433: LD_INT 4
31435: ST_TO_ADDR
31436: GO 31553
31438: LD_INT 29
31440: DOUBLE
31441: EQUAL
31442: IFTRUE 31446
31444: GO 31457
31446: POP
// bc_type := b_barracks ; 30 :
31447: LD_ADDR_OWVAR 42
31451: PUSH
31452: LD_INT 5
31454: ST_TO_ADDR
31455: GO 31553
31457: LD_INT 30
31459: DOUBLE
31460: EQUAL
31461: IFTRUE 31465
31463: GO 31476
31465: POP
// bc_type := b_solar_power ; 31 :
31466: LD_ADDR_OWVAR 42
31470: PUSH
31471: LD_INT 27
31473: ST_TO_ADDR
31474: GO 31553
31476: LD_INT 31
31478: DOUBLE
31479: EQUAL
31480: IFTRUE 31484
31482: GO 31495
31484: POP
// bc_type := b_oil_power ; 32 :
31485: LD_ADDR_OWVAR 42
31489: PUSH
31490: LD_INT 26
31492: ST_TO_ADDR
31493: GO 31553
31495: LD_INT 32
31497: DOUBLE
31498: EQUAL
31499: IFTRUE 31503
31501: GO 31514
31503: POP
// bc_type := b_siberite_power ; 33 :
31504: LD_ADDR_OWVAR 42
31508: PUSH
31509: LD_INT 28
31511: ST_TO_ADDR
31512: GO 31553
31514: LD_INT 33
31516: DOUBLE
31517: EQUAL
31518: IFTRUE 31522
31520: GO 31533
31522: POP
// bc_type := b_oil_mine ; 34 :
31523: LD_ADDR_OWVAR 42
31527: PUSH
31528: LD_INT 29
31530: ST_TO_ADDR
31531: GO 31553
31533: LD_INT 34
31535: DOUBLE
31536: EQUAL
31537: IFTRUE 31541
31539: GO 31552
31541: POP
// bc_type := b_siberite_mine ; end ;
31542: LD_ADDR_OWVAR 42
31546: PUSH
31547: LD_INT 30
31549: ST_TO_ADDR
31550: GO 31553
31552: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31553: LD_ADDR_VAR 0 8
31557: PUSH
31558: LD_VAR 0 5
31562: PPUSH
31563: LD_VAR 0 6
31567: PPUSH
31568: LD_VAR 0 3
31572: PPUSH
31573: CALL_OW 47
31577: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31578: LD_OWVAR 42
31582: PUSH
31583: LD_INT 32
31585: PUSH
31586: LD_INT 33
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: IN
31593: IFFALSE 31609
// PlaceWeaponTurret ( b , weapon ) ;
31595: LD_VAR 0 8
31599: PPUSH
31600: LD_VAR 0 4
31604: PPUSH
31605: CALL_OW 431
// end ;
31609: LD_VAR 0 7
31613: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31614: LD_INT 0
31616: PPUSH
31617: PPUSH
31618: PPUSH
31619: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31620: LD_ADDR_VAR 0 4
31624: PUSH
31625: LD_INT 22
31627: PUSH
31628: LD_OWVAR 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: LD_INT 30
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 30
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: LIST
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PPUSH
31669: CALL_OW 69
31673: ST_TO_ADDR
// if not tmp then
31674: LD_VAR 0 4
31678: NOT
31679: IFFALSE 31683
// exit ;
31681: GO 31742
// for i in tmp do
31683: LD_ADDR_VAR 0 2
31687: PUSH
31688: LD_VAR 0 4
31692: PUSH
31693: FOR_IN
31694: IFFALSE 31740
// for j = 1 to 3 do
31696: LD_ADDR_VAR 0 3
31700: PUSH
31701: DOUBLE
31702: LD_INT 1
31704: DEC
31705: ST_TO_ADDR
31706: LD_INT 3
31708: PUSH
31709: FOR_TO
31710: IFFALSE 31736
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31712: LD_VAR 0 2
31716: PPUSH
31717: CALL_OW 274
31721: PPUSH
31722: LD_VAR 0 3
31726: PPUSH
31727: LD_INT 99999
31729: PPUSH
31730: CALL_OW 277
31734: GO 31709
31736: POP
31737: POP
31738: GO 31693
31740: POP
31741: POP
// end ;
31742: LD_VAR 0 1
31746: RET
// export function hHackSetLevel10 ; var i , j ; begin
31747: LD_INT 0
31749: PPUSH
31750: PPUSH
31751: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31752: LD_ADDR_VAR 0 2
31756: PUSH
31757: LD_INT 21
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PPUSH
31767: CALL_OW 69
31771: PUSH
31772: FOR_IN
31773: IFFALSE 31825
// if IsSelected ( i ) then
31775: LD_VAR 0 2
31779: PPUSH
31780: CALL_OW 306
31784: IFFALSE 31823
// begin for j := 1 to 4 do
31786: LD_ADDR_VAR 0 3
31790: PUSH
31791: DOUBLE
31792: LD_INT 1
31794: DEC
31795: ST_TO_ADDR
31796: LD_INT 4
31798: PUSH
31799: FOR_TO
31800: IFFALSE 31821
// SetSkill ( i , j , 10 ) ;
31802: LD_VAR 0 2
31806: PPUSH
31807: LD_VAR 0 3
31811: PPUSH
31812: LD_INT 10
31814: PPUSH
31815: CALL_OW 237
31819: GO 31799
31821: POP
31822: POP
// end ;
31823: GO 31772
31825: POP
31826: POP
// end ;
31827: LD_VAR 0 1
31831: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31832: LD_INT 0
31834: PPUSH
31835: PPUSH
31836: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31837: LD_ADDR_VAR 0 2
31841: PUSH
31842: LD_INT 22
31844: PUSH
31845: LD_OWVAR 2
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 21
31856: PUSH
31857: LD_INT 1
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PPUSH
31868: CALL_OW 69
31872: PUSH
31873: FOR_IN
31874: IFFALSE 31915
// begin for j := 1 to 4 do
31876: LD_ADDR_VAR 0 3
31880: PUSH
31881: DOUBLE
31882: LD_INT 1
31884: DEC
31885: ST_TO_ADDR
31886: LD_INT 4
31888: PUSH
31889: FOR_TO
31890: IFFALSE 31911
// SetSkill ( i , j , 10 ) ;
31892: LD_VAR 0 2
31896: PPUSH
31897: LD_VAR 0 3
31901: PPUSH
31902: LD_INT 10
31904: PPUSH
31905: CALL_OW 237
31909: GO 31889
31911: POP
31912: POP
// end ;
31913: GO 31873
31915: POP
31916: POP
// end ;
31917: LD_VAR 0 1
31921: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31922: LD_INT 0
31924: PPUSH
// uc_side := your_side ;
31925: LD_ADDR_OWVAR 20
31929: PUSH
31930: LD_OWVAR 2
31934: ST_TO_ADDR
// uc_nation := nation ;
31935: LD_ADDR_OWVAR 21
31939: PUSH
31940: LD_VAR 0 1
31944: ST_TO_ADDR
// InitHc ;
31945: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31949: LD_INT 0
31951: PPUSH
31952: LD_VAR 0 2
31956: PPUSH
31957: LD_VAR 0 3
31961: PPUSH
31962: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31966: LD_VAR 0 4
31970: PPUSH
31971: LD_VAR 0 5
31975: PPUSH
31976: CALL_OW 428
31980: PUSH
31981: LD_INT 0
31983: EQUAL
31984: IFFALSE 32008
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31986: CALL_OW 44
31990: PPUSH
31991: LD_VAR 0 4
31995: PPUSH
31996: LD_VAR 0 5
32000: PPUSH
32001: LD_INT 1
32003: PPUSH
32004: CALL_OW 48
// end ;
32008: LD_VAR 0 6
32012: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32013: LD_INT 0
32015: PPUSH
32016: PPUSH
// uc_side := your_side ;
32017: LD_ADDR_OWVAR 20
32021: PUSH
32022: LD_OWVAR 2
32026: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32027: LD_VAR 0 1
32031: PUSH
32032: LD_INT 1
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: LD_INT 3
32040: PUSH
32041: LD_INT 4
32043: PUSH
32044: LD_INT 5
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: IN
32054: IFFALSE 32066
// uc_nation := nation_american else
32056: LD_ADDR_OWVAR 21
32060: PUSH
32061: LD_INT 1
32063: ST_TO_ADDR
32064: GO 32109
// if chassis in [ 11 , 12 , 13 , 14 ] then
32066: LD_VAR 0 1
32070: PUSH
32071: LD_INT 11
32073: PUSH
32074: LD_INT 12
32076: PUSH
32077: LD_INT 13
32079: PUSH
32080: LD_INT 14
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: IN
32089: IFFALSE 32101
// uc_nation := nation_arabian else
32091: LD_ADDR_OWVAR 21
32095: PUSH
32096: LD_INT 2
32098: ST_TO_ADDR
32099: GO 32109
// uc_nation := nation_russian ;
32101: LD_ADDR_OWVAR 21
32105: PUSH
32106: LD_INT 3
32108: ST_TO_ADDR
// vc_chassis := chassis ;
32109: LD_ADDR_OWVAR 37
32113: PUSH
32114: LD_VAR 0 1
32118: ST_TO_ADDR
// vc_engine := engine ;
32119: LD_ADDR_OWVAR 39
32123: PUSH
32124: LD_VAR 0 2
32128: ST_TO_ADDR
// vc_control := control ;
32129: LD_ADDR_OWVAR 38
32133: PUSH
32134: LD_VAR 0 3
32138: ST_TO_ADDR
// vc_weapon := weapon ;
32139: LD_ADDR_OWVAR 40
32143: PUSH
32144: LD_VAR 0 4
32148: ST_TO_ADDR
// un := CreateVehicle ;
32149: LD_ADDR_VAR 0 8
32153: PUSH
32154: CALL_OW 45
32158: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32159: LD_VAR 0 8
32163: PPUSH
32164: LD_INT 0
32166: PPUSH
32167: LD_INT 5
32169: PPUSH
32170: CALL_OW 12
32174: PPUSH
32175: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32179: LD_VAR 0 8
32183: PPUSH
32184: LD_VAR 0 5
32188: PPUSH
32189: LD_VAR 0 6
32193: PPUSH
32194: LD_INT 1
32196: PPUSH
32197: CALL_OW 48
// end ;
32201: LD_VAR 0 7
32205: RET
// export hInvincible ; every 1 do
32206: GO 32208
32208: DISABLE
// hInvincible := [ ] ;
32209: LD_ADDR_EXP 121
32213: PUSH
32214: EMPTY
32215: ST_TO_ADDR
32216: END
// every 10 do var i ;
32217: GO 32219
32219: DISABLE
32220: LD_INT 0
32222: PPUSH
// begin enable ;
32223: ENABLE
// if not hInvincible then
32224: LD_EXP 121
32228: NOT
32229: IFFALSE 32233
// exit ;
32231: GO 32277
// for i in hInvincible do
32233: LD_ADDR_VAR 0 1
32237: PUSH
32238: LD_EXP 121
32242: PUSH
32243: FOR_IN
32244: IFFALSE 32275
// if GetLives ( i ) < 1000 then
32246: LD_VAR 0 1
32250: PPUSH
32251: CALL_OW 256
32255: PUSH
32256: LD_INT 1000
32258: LESS
32259: IFFALSE 32273
// SetLives ( i , 1000 ) ;
32261: LD_VAR 0 1
32265: PPUSH
32266: LD_INT 1000
32268: PPUSH
32269: CALL_OW 234
32273: GO 32243
32275: POP
32276: POP
// end ;
32277: PPOPN 1
32279: END
// export function hHackInvincible ; var i ; begin
32280: LD_INT 0
32282: PPUSH
32283: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32284: LD_ADDR_VAR 0 2
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 21
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 21
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: LIST
32316: PPUSH
32317: CALL_OW 69
32321: PUSH
32322: FOR_IN
32323: IFFALSE 32384
// if IsSelected ( i ) then
32325: LD_VAR 0 2
32329: PPUSH
32330: CALL_OW 306
32334: IFFALSE 32382
// begin if i in hInvincible then
32336: LD_VAR 0 2
32340: PUSH
32341: LD_EXP 121
32345: IN
32346: IFFALSE 32366
// hInvincible := hInvincible diff i else
32348: LD_ADDR_EXP 121
32352: PUSH
32353: LD_EXP 121
32357: PUSH
32358: LD_VAR 0 2
32362: DIFF
32363: ST_TO_ADDR
32364: GO 32382
// hInvincible := hInvincible union i ;
32366: LD_ADDR_EXP 121
32370: PUSH
32371: LD_EXP 121
32375: PUSH
32376: LD_VAR 0 2
32380: UNION
32381: ST_TO_ADDR
// end ;
32382: GO 32322
32384: POP
32385: POP
// end ;
32386: LD_VAR 0 1
32390: RET
// export function hHackInvisible ; var i , j ; begin
32391: LD_INT 0
32393: PPUSH
32394: PPUSH
32395: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32396: LD_ADDR_VAR 0 2
32400: PUSH
32401: LD_INT 21
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PPUSH
32411: CALL_OW 69
32415: PUSH
32416: FOR_IN
32417: IFFALSE 32441
// if IsSelected ( i ) then
32419: LD_VAR 0 2
32423: PPUSH
32424: CALL_OW 306
32428: IFFALSE 32439
// ComForceInvisible ( i ) ;
32430: LD_VAR 0 2
32434: PPUSH
32435: CALL_OW 496
32439: GO 32416
32441: POP
32442: POP
// end ;
32443: LD_VAR 0 1
32447: RET
// export function hHackChangeYourSide ; begin
32448: LD_INT 0
32450: PPUSH
// if your_side = 8 then
32451: LD_OWVAR 2
32455: PUSH
32456: LD_INT 8
32458: EQUAL
32459: IFFALSE 32471
// your_side := 0 else
32461: LD_ADDR_OWVAR 2
32465: PUSH
32466: LD_INT 0
32468: ST_TO_ADDR
32469: GO 32485
// your_side := your_side + 1 ;
32471: LD_ADDR_OWVAR 2
32475: PUSH
32476: LD_OWVAR 2
32480: PUSH
32481: LD_INT 1
32483: PLUS
32484: ST_TO_ADDR
// end ;
32485: LD_VAR 0 1
32489: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32490: LD_INT 0
32492: PPUSH
32493: PPUSH
32494: PPUSH
// for i in all_units do
32495: LD_ADDR_VAR 0 2
32499: PUSH
32500: LD_OWVAR 3
32504: PUSH
32505: FOR_IN
32506: IFFALSE 32584
// if IsSelected ( i ) then
32508: LD_VAR 0 2
32512: PPUSH
32513: CALL_OW 306
32517: IFFALSE 32582
// begin j := GetSide ( i ) ;
32519: LD_ADDR_VAR 0 3
32523: PUSH
32524: LD_VAR 0 2
32528: PPUSH
32529: CALL_OW 255
32533: ST_TO_ADDR
// if j = 8 then
32534: LD_VAR 0 3
32538: PUSH
32539: LD_INT 8
32541: EQUAL
32542: IFFALSE 32554
// j := 0 else
32544: LD_ADDR_VAR 0 3
32548: PUSH
32549: LD_INT 0
32551: ST_TO_ADDR
32552: GO 32568
// j := j + 1 ;
32554: LD_ADDR_VAR 0 3
32558: PUSH
32559: LD_VAR 0 3
32563: PUSH
32564: LD_INT 1
32566: PLUS
32567: ST_TO_ADDR
// SetSide ( i , j ) ;
32568: LD_VAR 0 2
32572: PPUSH
32573: LD_VAR 0 3
32577: PPUSH
32578: CALL_OW 235
// end ;
32582: GO 32505
32584: POP
32585: POP
// end ;
32586: LD_VAR 0 1
32590: RET
// export function hHackFog ; begin
32591: LD_INT 0
32593: PPUSH
// FogOff ( true ) ;
32594: LD_INT 1
32596: PPUSH
32597: CALL_OW 344
// end ;
32601: LD_VAR 0 1
32605: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32606: LD_INT 0
32608: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32609: LD_VAR 0 1
32613: PPUSH
32614: LD_VAR 0 2
32618: PPUSH
32619: LD_VAR 0 3
32623: PPUSH
32624: LD_INT 1
32626: PPUSH
32627: LD_INT 1
32629: PPUSH
32630: CALL_OW 483
// CenterOnXY ( x , y ) ;
32634: LD_VAR 0 2
32638: PPUSH
32639: LD_VAR 0 3
32643: PPUSH
32644: CALL_OW 84
// end ; end_of_file
32648: LD_VAR 0 4
32652: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32653: LD_INT 0
32655: PPUSH
32656: PPUSH
32657: PPUSH
32658: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32659: LD_VAR 0 1
32663: PPUSH
32664: CALL_OW 264
32668: PUSH
32669: LD_EXP 52
32673: EQUAL
32674: IFFALSE 32746
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32676: LD_INT 68
32678: PPUSH
32679: LD_VAR 0 1
32683: PPUSH
32684: CALL_OW 255
32688: PPUSH
32689: CALL_OW 321
32693: PUSH
32694: LD_INT 2
32696: EQUAL
32697: IFFALSE 32709
// eff := 70 else
32699: LD_ADDR_VAR 0 4
32703: PUSH
32704: LD_INT 70
32706: ST_TO_ADDR
32707: GO 32717
// eff := 30 ;
32709: LD_ADDR_VAR 0 4
32713: PUSH
32714: LD_INT 30
32716: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32717: LD_VAR 0 1
32721: PPUSH
32722: CALL_OW 250
32726: PPUSH
32727: LD_VAR 0 1
32731: PPUSH
32732: CALL_OW 251
32736: PPUSH
32737: LD_VAR 0 4
32741: PPUSH
32742: CALL_OW 495
// end ; end ;
32746: LD_VAR 0 2
32750: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32751: LD_INT 0
32753: PPUSH
// end ;
32754: LD_VAR 0 4
32758: RET
// export function SOS_Command ( cmd ) ; begin
32759: LD_INT 0
32761: PPUSH
// end ;
32762: LD_VAR 0 2
32766: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32767: LD_INT 0
32769: PPUSH
// if cmd = 121 then
32770: LD_VAR 0 1
32774: PUSH
32775: LD_INT 121
32777: EQUAL
32778: IFFALSE 32780
// end ;
32780: LD_VAR 0 6
32784: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32785: LD_INT 0
32787: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32788: LD_VAR 0 1
32792: PUSH
32793: LD_INT 250
32795: EQUAL
32796: PUSH
32797: LD_VAR 0 2
32801: PPUSH
32802: CALL_OW 264
32806: PUSH
32807: LD_EXP 55
32811: EQUAL
32812: AND
32813: IFFALSE 32834
// MinerPlaceMine ( unit , x , y ) ;
32815: LD_VAR 0 2
32819: PPUSH
32820: LD_VAR 0 4
32824: PPUSH
32825: LD_VAR 0 5
32829: PPUSH
32830: CALL 35183 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32834: LD_VAR 0 1
32838: PUSH
32839: LD_INT 251
32841: EQUAL
32842: PUSH
32843: LD_VAR 0 2
32847: PPUSH
32848: CALL_OW 264
32852: PUSH
32853: LD_EXP 55
32857: EQUAL
32858: AND
32859: IFFALSE 32880
// MinerDetonateMine ( unit , x , y ) ;
32861: LD_VAR 0 2
32865: PPUSH
32866: LD_VAR 0 4
32870: PPUSH
32871: LD_VAR 0 5
32875: PPUSH
32876: CALL 35460 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32880: LD_VAR 0 1
32884: PUSH
32885: LD_INT 252
32887: EQUAL
32888: PUSH
32889: LD_VAR 0 2
32893: PPUSH
32894: CALL_OW 264
32898: PUSH
32899: LD_EXP 55
32903: EQUAL
32904: AND
32905: IFFALSE 32926
// MinerCreateMinefield ( unit , x , y ) ;
32907: LD_VAR 0 2
32911: PPUSH
32912: LD_VAR 0 4
32916: PPUSH
32917: LD_VAR 0 5
32921: PPUSH
32922: CALL 35877 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32926: LD_VAR 0 1
32930: PUSH
32931: LD_INT 253
32933: EQUAL
32934: PUSH
32935: LD_VAR 0 2
32939: PPUSH
32940: CALL_OW 257
32944: PUSH
32945: LD_INT 5
32947: EQUAL
32948: AND
32949: IFFALSE 32970
// ComBinocular ( unit , x , y ) ;
32951: LD_VAR 0 2
32955: PPUSH
32956: LD_VAR 0 4
32960: PPUSH
32961: LD_VAR 0 5
32965: PPUSH
32966: CALL 36248 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32970: LD_VAR 0 1
32974: PUSH
32975: LD_INT 254
32977: EQUAL
32978: PUSH
32979: LD_VAR 0 2
32983: PPUSH
32984: CALL_OW 264
32988: PUSH
32989: LD_EXP 50
32993: EQUAL
32994: AND
32995: PUSH
32996: LD_VAR 0 3
33000: PPUSH
33001: CALL_OW 263
33005: PUSH
33006: LD_INT 3
33008: EQUAL
33009: AND
33010: IFFALSE 33026
// HackDestroyVehicle ( unit , selectedUnit ) ;
33012: LD_VAR 0 2
33016: PPUSH
33017: LD_VAR 0 3
33021: PPUSH
33022: CALL 34543 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33026: LD_VAR 0 1
33030: PUSH
33031: LD_INT 255
33033: EQUAL
33034: PUSH
33035: LD_VAR 0 2
33039: PPUSH
33040: CALL_OW 264
33044: PUSH
33045: LD_INT 14
33047: PUSH
33048: LD_INT 53
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: IN
33055: AND
33056: PUSH
33057: LD_VAR 0 4
33061: PPUSH
33062: LD_VAR 0 5
33066: PPUSH
33067: CALL_OW 488
33071: AND
33072: IFFALSE 33096
// CutTreeXYR ( unit , x , y , 12 ) ;
33074: LD_VAR 0 2
33078: PPUSH
33079: LD_VAR 0 4
33083: PPUSH
33084: LD_VAR 0 5
33088: PPUSH
33089: LD_INT 12
33091: PPUSH
33092: CALL 33109 0 4
// end ;
33096: LD_VAR 0 6
33100: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33101: LD_INT 0
33103: PPUSH
// end ;
33104: LD_VAR 0 4
33108: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33109: LD_INT 0
33111: PPUSH
33112: PPUSH
33113: PPUSH
33114: PPUSH
33115: PPUSH
33116: PPUSH
33117: PPUSH
33118: PPUSH
33119: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33120: LD_VAR 0 1
33124: NOT
33125: PUSH
33126: LD_VAR 0 2
33130: PPUSH
33131: LD_VAR 0 3
33135: PPUSH
33136: CALL_OW 488
33140: NOT
33141: OR
33142: PUSH
33143: LD_VAR 0 4
33147: NOT
33148: OR
33149: IFFALSE 33153
// exit ;
33151: GO 33493
// list := [ ] ;
33153: LD_ADDR_VAR 0 13
33157: PUSH
33158: EMPTY
33159: ST_TO_ADDR
// if x - r < 0 then
33160: LD_VAR 0 2
33164: PUSH
33165: LD_VAR 0 4
33169: MINUS
33170: PUSH
33171: LD_INT 0
33173: LESS
33174: IFFALSE 33186
// min_x := 0 else
33176: LD_ADDR_VAR 0 7
33180: PUSH
33181: LD_INT 0
33183: ST_TO_ADDR
33184: GO 33202
// min_x := x - r ;
33186: LD_ADDR_VAR 0 7
33190: PUSH
33191: LD_VAR 0 2
33195: PUSH
33196: LD_VAR 0 4
33200: MINUS
33201: ST_TO_ADDR
// if y - r < 0 then
33202: LD_VAR 0 3
33206: PUSH
33207: LD_VAR 0 4
33211: MINUS
33212: PUSH
33213: LD_INT 0
33215: LESS
33216: IFFALSE 33228
// min_y := 0 else
33218: LD_ADDR_VAR 0 8
33222: PUSH
33223: LD_INT 0
33225: ST_TO_ADDR
33226: GO 33244
// min_y := y - r ;
33228: LD_ADDR_VAR 0 8
33232: PUSH
33233: LD_VAR 0 3
33237: PUSH
33238: LD_VAR 0 4
33242: MINUS
33243: ST_TO_ADDR
// max_x := x + r ;
33244: LD_ADDR_VAR 0 9
33248: PUSH
33249: LD_VAR 0 2
33253: PUSH
33254: LD_VAR 0 4
33258: PLUS
33259: ST_TO_ADDR
// max_y := y + r ;
33260: LD_ADDR_VAR 0 10
33264: PUSH
33265: LD_VAR 0 3
33269: PUSH
33270: LD_VAR 0 4
33274: PLUS
33275: ST_TO_ADDR
// for _x = min_x to max_x do
33276: LD_ADDR_VAR 0 11
33280: PUSH
33281: DOUBLE
33282: LD_VAR 0 7
33286: DEC
33287: ST_TO_ADDR
33288: LD_VAR 0 9
33292: PUSH
33293: FOR_TO
33294: IFFALSE 33411
// for _y = min_y to max_y do
33296: LD_ADDR_VAR 0 12
33300: PUSH
33301: DOUBLE
33302: LD_VAR 0 8
33306: DEC
33307: ST_TO_ADDR
33308: LD_VAR 0 10
33312: PUSH
33313: FOR_TO
33314: IFFALSE 33407
// begin if not ValidHex ( _x , _y ) then
33316: LD_VAR 0 11
33320: PPUSH
33321: LD_VAR 0 12
33325: PPUSH
33326: CALL_OW 488
33330: NOT
33331: IFFALSE 33335
// continue ;
33333: GO 33313
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33335: LD_VAR 0 11
33339: PPUSH
33340: LD_VAR 0 12
33344: PPUSH
33345: CALL_OW 351
33349: PUSH
33350: LD_VAR 0 11
33354: PPUSH
33355: LD_VAR 0 12
33359: PPUSH
33360: CALL_OW 554
33364: AND
33365: IFFALSE 33405
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33367: LD_ADDR_VAR 0 13
33371: PUSH
33372: LD_VAR 0 13
33376: PPUSH
33377: LD_VAR 0 13
33381: PUSH
33382: LD_INT 1
33384: PLUS
33385: PPUSH
33386: LD_VAR 0 11
33390: PUSH
33391: LD_VAR 0 12
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PPUSH
33400: CALL_OW 2
33404: ST_TO_ADDR
// end ;
33405: GO 33313
33407: POP
33408: POP
33409: GO 33293
33411: POP
33412: POP
// if not list then
33413: LD_VAR 0 13
33417: NOT
33418: IFFALSE 33422
// exit ;
33420: GO 33493
// for i in list do
33422: LD_ADDR_VAR 0 6
33426: PUSH
33427: LD_VAR 0 13
33431: PUSH
33432: FOR_IN
33433: IFFALSE 33491
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33435: LD_VAR 0 1
33439: PPUSH
33440: LD_STRING M
33442: PUSH
33443: LD_VAR 0 6
33447: PUSH
33448: LD_INT 1
33450: ARRAY
33451: PUSH
33452: LD_VAR 0 6
33456: PUSH
33457: LD_INT 2
33459: ARRAY
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: PUSH
33482: EMPTY
33483: LIST
33484: PPUSH
33485: CALL_OW 447
33489: GO 33432
33491: POP
33492: POP
// end ;
33493: LD_VAR 0 5
33497: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33498: LD_EXP 124
33502: NOT
33503: IFFALSE 33553
33505: GO 33507
33507: DISABLE
// begin initHack := true ;
33508: LD_ADDR_EXP 124
33512: PUSH
33513: LD_INT 1
33515: ST_TO_ADDR
// hackTanks := [ ] ;
33516: LD_ADDR_EXP 125
33520: PUSH
33521: EMPTY
33522: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33523: LD_ADDR_EXP 126
33527: PUSH
33528: EMPTY
33529: ST_TO_ADDR
// hackLimit := 3 ;
33530: LD_ADDR_EXP 127
33534: PUSH
33535: LD_INT 3
33537: ST_TO_ADDR
// hackDist := 12 ;
33538: LD_ADDR_EXP 128
33542: PUSH
33543: LD_INT 12
33545: ST_TO_ADDR
// hackCounter := [ ] ;
33546: LD_ADDR_EXP 129
33550: PUSH
33551: EMPTY
33552: ST_TO_ADDR
// end ;
33553: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33554: LD_EXP 124
33558: PUSH
33559: LD_INT 34
33561: PUSH
33562: LD_EXP 50
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PPUSH
33571: CALL_OW 69
33575: AND
33576: IFFALSE 33831
33578: GO 33580
33580: DISABLE
33581: LD_INT 0
33583: PPUSH
33584: PPUSH
// begin enable ;
33585: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33586: LD_ADDR_VAR 0 1
33590: PUSH
33591: LD_INT 34
33593: PUSH
33594: LD_EXP 50
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PPUSH
33603: CALL_OW 69
33607: PUSH
33608: FOR_IN
33609: IFFALSE 33829
// begin if not i in hackTanks then
33611: LD_VAR 0 1
33615: PUSH
33616: LD_EXP 125
33620: IN
33621: NOT
33622: IFFALSE 33705
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33624: LD_ADDR_EXP 125
33628: PUSH
33629: LD_EXP 125
33633: PPUSH
33634: LD_EXP 125
33638: PUSH
33639: LD_INT 1
33641: PLUS
33642: PPUSH
33643: LD_VAR 0 1
33647: PPUSH
33648: CALL_OW 1
33652: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33653: LD_ADDR_EXP 126
33657: PUSH
33658: LD_EXP 126
33662: PPUSH
33663: LD_EXP 126
33667: PUSH
33668: LD_INT 1
33670: PLUS
33671: PPUSH
33672: EMPTY
33673: PPUSH
33674: CALL_OW 1
33678: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33679: LD_ADDR_EXP 129
33683: PUSH
33684: LD_EXP 129
33688: PPUSH
33689: LD_EXP 129
33693: PUSH
33694: LD_INT 1
33696: PLUS
33697: PPUSH
33698: EMPTY
33699: PPUSH
33700: CALL_OW 1
33704: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 302
33714: NOT
33715: IFFALSE 33728
// begin HackUnlinkAll ( i ) ;
33717: LD_VAR 0 1
33721: PPUSH
33722: CALL 33834 0 1
// continue ;
33726: GO 33608
// end ; HackCheckCapturedStatus ( i ) ;
33728: LD_VAR 0 1
33732: PPUSH
33733: CALL 34277 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33737: LD_ADDR_VAR 0 2
33741: PUSH
33742: LD_INT 81
33744: PUSH
33745: LD_VAR 0 1
33749: PPUSH
33750: CALL_OW 255
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 33
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 91
33771: PUSH
33772: LD_VAR 0 1
33776: PUSH
33777: LD_EXP 128
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 50
33789: PUSH
33790: EMPTY
33791: LIST
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: PPUSH
33799: CALL_OW 69
33803: ST_TO_ADDR
// if not tmp then
33804: LD_VAR 0 2
33808: NOT
33809: IFFALSE 33813
// continue ;
33811: GO 33608
// HackLink ( i , tmp ) ;
33813: LD_VAR 0 1
33817: PPUSH
33818: LD_VAR 0 2
33822: PPUSH
33823: CALL 33970 0 2
// end ;
33827: GO 33608
33829: POP
33830: POP
// end ;
33831: PPOPN 2
33833: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33834: LD_INT 0
33836: PPUSH
33837: PPUSH
33838: PPUSH
// if not hack in hackTanks then
33839: LD_VAR 0 1
33843: PUSH
33844: LD_EXP 125
33848: IN
33849: NOT
33850: IFFALSE 33854
// exit ;
33852: GO 33965
// index := GetElementIndex ( hackTanks , hack ) ;
33854: LD_ADDR_VAR 0 4
33858: PUSH
33859: LD_EXP 125
33863: PPUSH
33864: LD_VAR 0 1
33868: PPUSH
33869: CALL 41439 0 2
33873: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33874: LD_EXP 126
33878: PUSH
33879: LD_VAR 0 4
33883: ARRAY
33884: IFFALSE 33965
// begin for i in hackTanksCaptured [ index ] do
33886: LD_ADDR_VAR 0 3
33890: PUSH
33891: LD_EXP 126
33895: PUSH
33896: LD_VAR 0 4
33900: ARRAY
33901: PUSH
33902: FOR_IN
33903: IFFALSE 33929
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33905: LD_VAR 0 3
33909: PUSH
33910: LD_INT 1
33912: ARRAY
33913: PPUSH
33914: LD_VAR 0 3
33918: PUSH
33919: LD_INT 2
33921: ARRAY
33922: PPUSH
33923: CALL_OW 235
33927: GO 33902
33929: POP
33930: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33931: LD_ADDR_EXP 126
33935: PUSH
33936: LD_EXP 126
33940: PPUSH
33941: LD_VAR 0 4
33945: PPUSH
33946: EMPTY
33947: PPUSH
33948: CALL_OW 1
33952: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33953: LD_VAR 0 1
33957: PPUSH
33958: LD_INT 0
33960: PPUSH
33961: CALL_OW 505
// end ; end ;
33965: LD_VAR 0 2
33969: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33970: LD_INT 0
33972: PPUSH
33973: PPUSH
33974: PPUSH
// if not hack in hackTanks or not vehicles then
33975: LD_VAR 0 1
33979: PUSH
33980: LD_EXP 125
33984: IN
33985: NOT
33986: PUSH
33987: LD_VAR 0 2
33991: NOT
33992: OR
33993: IFFALSE 33997
// exit ;
33995: GO 34272
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33997: LD_ADDR_VAR 0 2
34001: PUSH
34002: LD_VAR 0 1
34006: PPUSH
34007: LD_VAR 0 2
34011: PPUSH
34012: LD_INT 1
34014: PPUSH
34015: LD_INT 1
34017: PPUSH
34018: CALL 42089 0 4
34022: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34023: LD_ADDR_VAR 0 5
34027: PUSH
34028: LD_EXP 125
34032: PPUSH
34033: LD_VAR 0 1
34037: PPUSH
34038: CALL 41439 0 2
34042: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34043: LD_EXP 126
34047: PUSH
34048: LD_VAR 0 5
34052: ARRAY
34053: PUSH
34054: LD_EXP 127
34058: LESS
34059: IFFALSE 34248
// begin for i := 1 to vehicles do
34061: LD_ADDR_VAR 0 4
34065: PUSH
34066: DOUBLE
34067: LD_INT 1
34069: DEC
34070: ST_TO_ADDR
34071: LD_VAR 0 2
34075: PUSH
34076: FOR_TO
34077: IFFALSE 34246
// begin if hackTanksCaptured [ index ] = hackLimit then
34079: LD_EXP 126
34083: PUSH
34084: LD_VAR 0 5
34088: ARRAY
34089: PUSH
34090: LD_EXP 127
34094: EQUAL
34095: IFFALSE 34099
// break ;
34097: GO 34246
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34099: LD_ADDR_EXP 129
34103: PUSH
34104: LD_EXP 129
34108: PPUSH
34109: LD_VAR 0 5
34113: PPUSH
34114: LD_EXP 129
34118: PUSH
34119: LD_VAR 0 5
34123: ARRAY
34124: PUSH
34125: LD_INT 1
34127: PLUS
34128: PPUSH
34129: CALL_OW 1
34133: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34134: LD_ADDR_EXP 126
34138: PUSH
34139: LD_EXP 126
34143: PPUSH
34144: LD_VAR 0 5
34148: PUSH
34149: LD_EXP 126
34153: PUSH
34154: LD_VAR 0 5
34158: ARRAY
34159: PUSH
34160: LD_INT 1
34162: PLUS
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PPUSH
34168: LD_VAR 0 2
34172: PUSH
34173: LD_VAR 0 4
34177: ARRAY
34178: PUSH
34179: LD_VAR 0 2
34183: PUSH
34184: LD_VAR 0 4
34188: ARRAY
34189: PPUSH
34190: CALL_OW 255
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PPUSH
34199: CALL 41654 0 3
34203: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34204: LD_VAR 0 2
34208: PUSH
34209: LD_VAR 0 4
34213: ARRAY
34214: PPUSH
34215: LD_VAR 0 1
34219: PPUSH
34220: CALL_OW 255
34224: PPUSH
34225: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34229: LD_VAR 0 2
34233: PUSH
34234: LD_VAR 0 4
34238: ARRAY
34239: PPUSH
34240: CALL_OW 141
// end ;
34244: GO 34076
34246: POP
34247: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34248: LD_VAR 0 1
34252: PPUSH
34253: LD_EXP 126
34257: PUSH
34258: LD_VAR 0 5
34262: ARRAY
34263: PUSH
34264: LD_INT 0
34266: PLUS
34267: PPUSH
34268: CALL_OW 505
// end ;
34272: LD_VAR 0 3
34276: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34277: LD_INT 0
34279: PPUSH
34280: PPUSH
34281: PPUSH
34282: PPUSH
// if not hack in hackTanks then
34283: LD_VAR 0 1
34287: PUSH
34288: LD_EXP 125
34292: IN
34293: NOT
34294: IFFALSE 34298
// exit ;
34296: GO 34538
// index := GetElementIndex ( hackTanks , hack ) ;
34298: LD_ADDR_VAR 0 4
34302: PUSH
34303: LD_EXP 125
34307: PPUSH
34308: LD_VAR 0 1
34312: PPUSH
34313: CALL 41439 0 2
34317: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34318: LD_ADDR_VAR 0 3
34322: PUSH
34323: DOUBLE
34324: LD_EXP 126
34328: PUSH
34329: LD_VAR 0 4
34333: ARRAY
34334: INC
34335: ST_TO_ADDR
34336: LD_INT 1
34338: PUSH
34339: FOR_DOWNTO
34340: IFFALSE 34512
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34342: LD_ADDR_VAR 0 5
34346: PUSH
34347: LD_EXP 126
34351: PUSH
34352: LD_VAR 0 4
34356: ARRAY
34357: PUSH
34358: LD_VAR 0 3
34362: ARRAY
34363: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34364: LD_VAR 0 5
34368: PUSH
34369: LD_INT 1
34371: ARRAY
34372: PPUSH
34373: CALL_OW 302
34377: NOT
34378: PUSH
34379: LD_VAR 0 5
34383: PUSH
34384: LD_INT 1
34386: ARRAY
34387: PPUSH
34388: CALL_OW 255
34392: PUSH
34393: LD_VAR 0 1
34397: PPUSH
34398: CALL_OW 255
34402: NONEQUAL
34403: OR
34404: IFFALSE 34510
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34406: LD_VAR 0 5
34410: PUSH
34411: LD_INT 1
34413: ARRAY
34414: PPUSH
34415: CALL_OW 305
34419: PUSH
34420: LD_VAR 0 5
34424: PUSH
34425: LD_INT 1
34427: ARRAY
34428: PPUSH
34429: CALL_OW 255
34433: PUSH
34434: LD_VAR 0 1
34438: PPUSH
34439: CALL_OW 255
34443: EQUAL
34444: AND
34445: IFFALSE 34469
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34447: LD_VAR 0 5
34451: PUSH
34452: LD_INT 1
34454: ARRAY
34455: PPUSH
34456: LD_VAR 0 5
34460: PUSH
34461: LD_INT 2
34463: ARRAY
34464: PPUSH
34465: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34469: LD_ADDR_EXP 126
34473: PUSH
34474: LD_EXP 126
34478: PPUSH
34479: LD_VAR 0 4
34483: PPUSH
34484: LD_EXP 126
34488: PUSH
34489: LD_VAR 0 4
34493: ARRAY
34494: PPUSH
34495: LD_VAR 0 3
34499: PPUSH
34500: CALL_OW 3
34504: PPUSH
34505: CALL_OW 1
34509: ST_TO_ADDR
// end ; end ;
34510: GO 34339
34512: POP
34513: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34514: LD_VAR 0 1
34518: PPUSH
34519: LD_EXP 126
34523: PUSH
34524: LD_VAR 0 4
34528: ARRAY
34529: PUSH
34530: LD_INT 0
34532: PLUS
34533: PPUSH
34534: CALL_OW 505
// end ;
34538: LD_VAR 0 2
34542: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34543: LD_INT 0
34545: PPUSH
34546: PPUSH
34547: PPUSH
34548: PPUSH
// if not hack in hackTanks then
34549: LD_VAR 0 1
34553: PUSH
34554: LD_EXP 125
34558: IN
34559: NOT
34560: IFFALSE 34564
// exit ;
34562: GO 34649
// index := GetElementIndex ( hackTanks , hack ) ;
34564: LD_ADDR_VAR 0 5
34568: PUSH
34569: LD_EXP 125
34573: PPUSH
34574: LD_VAR 0 1
34578: PPUSH
34579: CALL 41439 0 2
34583: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34584: LD_ADDR_VAR 0 4
34588: PUSH
34589: DOUBLE
34590: LD_INT 1
34592: DEC
34593: ST_TO_ADDR
34594: LD_EXP 126
34598: PUSH
34599: LD_VAR 0 5
34603: ARRAY
34604: PUSH
34605: FOR_TO
34606: IFFALSE 34647
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34608: LD_EXP 126
34612: PUSH
34613: LD_VAR 0 5
34617: ARRAY
34618: PUSH
34619: LD_VAR 0 4
34623: ARRAY
34624: PUSH
34625: LD_INT 1
34627: ARRAY
34628: PUSH
34629: LD_VAR 0 2
34633: EQUAL
34634: IFFALSE 34645
// KillUnit ( vehicle ) ;
34636: LD_VAR 0 2
34640: PPUSH
34641: CALL_OW 66
34645: GO 34605
34647: POP
34648: POP
// end ;
34649: LD_VAR 0 3
34653: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34654: LD_EXP 130
34658: NOT
34659: IFFALSE 34694
34661: GO 34663
34663: DISABLE
// begin initMiner := true ;
34664: LD_ADDR_EXP 130
34668: PUSH
34669: LD_INT 1
34671: ST_TO_ADDR
// minersList := [ ] ;
34672: LD_ADDR_EXP 131
34676: PUSH
34677: EMPTY
34678: ST_TO_ADDR
// minerMinesList := [ ] ;
34679: LD_ADDR_EXP 132
34683: PUSH
34684: EMPTY
34685: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34686: LD_ADDR_EXP 133
34690: PUSH
34691: LD_INT 5
34693: ST_TO_ADDR
// end ;
34694: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34695: LD_EXP 130
34699: PUSH
34700: LD_INT 34
34702: PUSH
34703: LD_EXP 55
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PPUSH
34712: CALL_OW 69
34716: AND
34717: IFFALSE 35180
34719: GO 34721
34721: DISABLE
34722: LD_INT 0
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
// begin enable ;
34728: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34729: LD_ADDR_VAR 0 1
34733: PUSH
34734: LD_INT 34
34736: PUSH
34737: LD_EXP 55
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PPUSH
34746: CALL_OW 69
34750: PUSH
34751: FOR_IN
34752: IFFALSE 34824
// begin if not i in minersList then
34754: LD_VAR 0 1
34758: PUSH
34759: LD_EXP 131
34763: IN
34764: NOT
34765: IFFALSE 34822
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34767: LD_ADDR_EXP 131
34771: PUSH
34772: LD_EXP 131
34776: PPUSH
34777: LD_EXP 131
34781: PUSH
34782: LD_INT 1
34784: PLUS
34785: PPUSH
34786: LD_VAR 0 1
34790: PPUSH
34791: CALL_OW 1
34795: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34796: LD_ADDR_EXP 132
34800: PUSH
34801: LD_EXP 132
34805: PPUSH
34806: LD_EXP 132
34810: PUSH
34811: LD_INT 1
34813: PLUS
34814: PPUSH
34815: EMPTY
34816: PPUSH
34817: CALL_OW 1
34821: ST_TO_ADDR
// end end ;
34822: GO 34751
34824: POP
34825: POP
// for i := minerMinesList downto 1 do
34826: LD_ADDR_VAR 0 1
34830: PUSH
34831: DOUBLE
34832: LD_EXP 132
34836: INC
34837: ST_TO_ADDR
34838: LD_INT 1
34840: PUSH
34841: FOR_DOWNTO
34842: IFFALSE 35178
// begin if IsLive ( minersList [ i ] ) then
34844: LD_EXP 131
34848: PUSH
34849: LD_VAR 0 1
34853: ARRAY
34854: PPUSH
34855: CALL_OW 300
34859: IFFALSE 34887
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34861: LD_EXP 131
34865: PUSH
34866: LD_VAR 0 1
34870: ARRAY
34871: PPUSH
34872: LD_EXP 132
34876: PUSH
34877: LD_VAR 0 1
34881: ARRAY
34882: PPUSH
34883: CALL_OW 505
// if not minerMinesList [ i ] then
34887: LD_EXP 132
34891: PUSH
34892: LD_VAR 0 1
34896: ARRAY
34897: NOT
34898: IFFALSE 34902
// continue ;
34900: GO 34841
// for j := minerMinesList [ i ] downto 1 do
34902: LD_ADDR_VAR 0 2
34906: PUSH
34907: DOUBLE
34908: LD_EXP 132
34912: PUSH
34913: LD_VAR 0 1
34917: ARRAY
34918: INC
34919: ST_TO_ADDR
34920: LD_INT 1
34922: PUSH
34923: FOR_DOWNTO
34924: IFFALSE 35174
// begin side := GetSide ( minersList [ i ] ) ;
34926: LD_ADDR_VAR 0 3
34930: PUSH
34931: LD_EXP 131
34935: PUSH
34936: LD_VAR 0 1
34940: ARRAY
34941: PPUSH
34942: CALL_OW 255
34946: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34947: LD_ADDR_VAR 0 4
34951: PUSH
34952: LD_EXP 132
34956: PUSH
34957: LD_VAR 0 1
34961: ARRAY
34962: PUSH
34963: LD_VAR 0 2
34967: ARRAY
34968: PUSH
34969: LD_INT 1
34971: ARRAY
34972: PPUSH
34973: LD_EXP 132
34977: PUSH
34978: LD_VAR 0 1
34982: ARRAY
34983: PUSH
34984: LD_VAR 0 2
34988: ARRAY
34989: PUSH
34990: LD_INT 2
34992: ARRAY
34993: PPUSH
34994: CALL_OW 428
34998: ST_TO_ADDR
// if not tmp then
34999: LD_VAR 0 4
35003: NOT
35004: IFFALSE 35008
// continue ;
35006: GO 34923
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35008: LD_VAR 0 4
35012: PUSH
35013: LD_INT 81
35015: PUSH
35016: LD_VAR 0 3
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PPUSH
35025: CALL_OW 69
35029: IN
35030: PUSH
35031: LD_EXP 132
35035: PUSH
35036: LD_VAR 0 1
35040: ARRAY
35041: PUSH
35042: LD_VAR 0 2
35046: ARRAY
35047: PUSH
35048: LD_INT 1
35050: ARRAY
35051: PPUSH
35052: LD_EXP 132
35056: PUSH
35057: LD_VAR 0 1
35061: ARRAY
35062: PUSH
35063: LD_VAR 0 2
35067: ARRAY
35068: PUSH
35069: LD_INT 2
35071: ARRAY
35072: PPUSH
35073: CALL_OW 458
35077: AND
35078: IFFALSE 35172
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35080: LD_EXP 132
35084: PUSH
35085: LD_VAR 0 1
35089: ARRAY
35090: PUSH
35091: LD_VAR 0 2
35095: ARRAY
35096: PUSH
35097: LD_INT 1
35099: ARRAY
35100: PPUSH
35101: LD_EXP 132
35105: PUSH
35106: LD_VAR 0 1
35110: ARRAY
35111: PUSH
35112: LD_VAR 0 2
35116: ARRAY
35117: PUSH
35118: LD_INT 2
35120: ARRAY
35121: PPUSH
35122: LD_VAR 0 3
35126: PPUSH
35127: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35131: LD_ADDR_EXP 132
35135: PUSH
35136: LD_EXP 132
35140: PPUSH
35141: LD_VAR 0 1
35145: PPUSH
35146: LD_EXP 132
35150: PUSH
35151: LD_VAR 0 1
35155: ARRAY
35156: PPUSH
35157: LD_VAR 0 2
35161: PPUSH
35162: CALL_OW 3
35166: PPUSH
35167: CALL_OW 1
35171: ST_TO_ADDR
// end ; end ;
35172: GO 34923
35174: POP
35175: POP
// end ;
35176: GO 34841
35178: POP
35179: POP
// end ;
35180: PPOPN 4
35182: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35183: LD_INT 0
35185: PPUSH
35186: PPUSH
// result := false ;
35187: LD_ADDR_VAR 0 4
35191: PUSH
35192: LD_INT 0
35194: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35195: LD_VAR 0 1
35199: PPUSH
35200: CALL_OW 264
35204: PUSH
35205: LD_EXP 55
35209: EQUAL
35210: NOT
35211: IFFALSE 35215
// exit ;
35213: GO 35455
// index := GetElementIndex ( minersList , unit ) ;
35215: LD_ADDR_VAR 0 5
35219: PUSH
35220: LD_EXP 131
35224: PPUSH
35225: LD_VAR 0 1
35229: PPUSH
35230: CALL 41439 0 2
35234: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35235: LD_EXP 132
35239: PUSH
35240: LD_VAR 0 5
35244: ARRAY
35245: PUSH
35246: LD_EXP 133
35250: GREATEREQUAL
35251: IFFALSE 35255
// exit ;
35253: GO 35455
// ComMoveXY ( unit , x , y ) ;
35255: LD_VAR 0 1
35259: PPUSH
35260: LD_VAR 0 2
35264: PPUSH
35265: LD_VAR 0 3
35269: PPUSH
35270: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35274: LD_INT 35
35276: PPUSH
35277: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35281: LD_VAR 0 1
35285: PPUSH
35286: LD_VAR 0 2
35290: PPUSH
35291: LD_VAR 0 3
35295: PPUSH
35296: CALL 72211 0 3
35300: NOT
35301: PUSH
35302: LD_VAR 0 1
35306: PPUSH
35307: CALL_OW 314
35311: AND
35312: IFFALSE 35316
// exit ;
35314: GO 35455
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35316: LD_VAR 0 2
35320: PPUSH
35321: LD_VAR 0 3
35325: PPUSH
35326: CALL_OW 428
35330: PUSH
35331: LD_VAR 0 1
35335: EQUAL
35336: PUSH
35337: LD_VAR 0 1
35341: PPUSH
35342: CALL_OW 314
35346: NOT
35347: AND
35348: IFFALSE 35274
// PlaySoundXY ( x , y , PlantMine ) ;
35350: LD_VAR 0 2
35354: PPUSH
35355: LD_VAR 0 3
35359: PPUSH
35360: LD_STRING PlantMine
35362: PPUSH
35363: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35367: LD_VAR 0 2
35371: PPUSH
35372: LD_VAR 0 3
35376: PPUSH
35377: LD_VAR 0 1
35381: PPUSH
35382: CALL_OW 255
35386: PPUSH
35387: LD_INT 0
35389: PPUSH
35390: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35394: LD_ADDR_EXP 132
35398: PUSH
35399: LD_EXP 132
35403: PPUSH
35404: LD_VAR 0 5
35408: PUSH
35409: LD_EXP 132
35413: PUSH
35414: LD_VAR 0 5
35418: ARRAY
35419: PUSH
35420: LD_INT 1
35422: PLUS
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PPUSH
35428: LD_VAR 0 2
35432: PUSH
35433: LD_VAR 0 3
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PPUSH
35442: CALL 41654 0 3
35446: ST_TO_ADDR
// result := true ;
35447: LD_ADDR_VAR 0 4
35451: PUSH
35452: LD_INT 1
35454: ST_TO_ADDR
// end ;
35455: LD_VAR 0 4
35459: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35460: LD_INT 0
35462: PPUSH
35463: PPUSH
35464: PPUSH
// if not unit in minersList then
35465: LD_VAR 0 1
35469: PUSH
35470: LD_EXP 131
35474: IN
35475: NOT
35476: IFFALSE 35480
// exit ;
35478: GO 35872
// index := GetElementIndex ( minersList , unit ) ;
35480: LD_ADDR_VAR 0 6
35484: PUSH
35485: LD_EXP 131
35489: PPUSH
35490: LD_VAR 0 1
35494: PPUSH
35495: CALL 41439 0 2
35499: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35500: LD_ADDR_VAR 0 5
35504: PUSH
35505: DOUBLE
35506: LD_EXP 132
35510: PUSH
35511: LD_VAR 0 6
35515: ARRAY
35516: INC
35517: ST_TO_ADDR
35518: LD_INT 1
35520: PUSH
35521: FOR_DOWNTO
35522: IFFALSE 35683
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35524: LD_EXP 132
35528: PUSH
35529: LD_VAR 0 6
35533: ARRAY
35534: PUSH
35535: LD_VAR 0 5
35539: ARRAY
35540: PUSH
35541: LD_INT 1
35543: ARRAY
35544: PUSH
35545: LD_VAR 0 2
35549: EQUAL
35550: PUSH
35551: LD_EXP 132
35555: PUSH
35556: LD_VAR 0 6
35560: ARRAY
35561: PUSH
35562: LD_VAR 0 5
35566: ARRAY
35567: PUSH
35568: LD_INT 2
35570: ARRAY
35571: PUSH
35572: LD_VAR 0 3
35576: EQUAL
35577: AND
35578: IFFALSE 35681
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35580: LD_EXP 132
35584: PUSH
35585: LD_VAR 0 6
35589: ARRAY
35590: PUSH
35591: LD_VAR 0 5
35595: ARRAY
35596: PUSH
35597: LD_INT 1
35599: ARRAY
35600: PPUSH
35601: LD_EXP 132
35605: PUSH
35606: LD_VAR 0 6
35610: ARRAY
35611: PUSH
35612: LD_VAR 0 5
35616: ARRAY
35617: PUSH
35618: LD_INT 2
35620: ARRAY
35621: PPUSH
35622: LD_VAR 0 1
35626: PPUSH
35627: CALL_OW 255
35631: PPUSH
35632: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35636: LD_ADDR_EXP 132
35640: PUSH
35641: LD_EXP 132
35645: PPUSH
35646: LD_VAR 0 6
35650: PPUSH
35651: LD_EXP 132
35655: PUSH
35656: LD_VAR 0 6
35660: ARRAY
35661: PPUSH
35662: LD_VAR 0 5
35666: PPUSH
35667: CALL_OW 3
35671: PPUSH
35672: CALL_OW 1
35676: ST_TO_ADDR
// exit ;
35677: POP
35678: POP
35679: GO 35872
// end ; end ;
35681: GO 35521
35683: POP
35684: POP
// for i := minerMinesList [ index ] downto 1 do
35685: LD_ADDR_VAR 0 5
35689: PUSH
35690: DOUBLE
35691: LD_EXP 132
35695: PUSH
35696: LD_VAR 0 6
35700: ARRAY
35701: INC
35702: ST_TO_ADDR
35703: LD_INT 1
35705: PUSH
35706: FOR_DOWNTO
35707: IFFALSE 35870
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35709: LD_EXP 132
35713: PUSH
35714: LD_VAR 0 6
35718: ARRAY
35719: PUSH
35720: LD_VAR 0 5
35724: ARRAY
35725: PUSH
35726: LD_INT 1
35728: ARRAY
35729: PPUSH
35730: LD_EXP 132
35734: PUSH
35735: LD_VAR 0 6
35739: ARRAY
35740: PUSH
35741: LD_VAR 0 5
35745: ARRAY
35746: PUSH
35747: LD_INT 2
35749: ARRAY
35750: PPUSH
35751: LD_VAR 0 2
35755: PPUSH
35756: LD_VAR 0 3
35760: PPUSH
35761: CALL_OW 298
35765: PUSH
35766: LD_INT 6
35768: LESS
35769: IFFALSE 35868
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35771: LD_EXP 132
35775: PUSH
35776: LD_VAR 0 6
35780: ARRAY
35781: PUSH
35782: LD_VAR 0 5
35786: ARRAY
35787: PUSH
35788: LD_INT 1
35790: ARRAY
35791: PPUSH
35792: LD_EXP 132
35796: PUSH
35797: LD_VAR 0 6
35801: ARRAY
35802: PUSH
35803: LD_VAR 0 5
35807: ARRAY
35808: PUSH
35809: LD_INT 2
35811: ARRAY
35812: PPUSH
35813: LD_VAR 0 1
35817: PPUSH
35818: CALL_OW 255
35822: PPUSH
35823: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35827: LD_ADDR_EXP 132
35831: PUSH
35832: LD_EXP 132
35836: PPUSH
35837: LD_VAR 0 6
35841: PPUSH
35842: LD_EXP 132
35846: PUSH
35847: LD_VAR 0 6
35851: ARRAY
35852: PPUSH
35853: LD_VAR 0 5
35857: PPUSH
35858: CALL_OW 3
35862: PPUSH
35863: CALL_OW 1
35867: ST_TO_ADDR
// end ; end ;
35868: GO 35706
35870: POP
35871: POP
// end ;
35872: LD_VAR 0 4
35876: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35877: LD_INT 0
35879: PPUSH
35880: PPUSH
35881: PPUSH
35882: PPUSH
35883: PPUSH
35884: PPUSH
35885: PPUSH
35886: PPUSH
35887: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35888: LD_VAR 0 1
35892: PPUSH
35893: CALL_OW 264
35897: PUSH
35898: LD_EXP 55
35902: EQUAL
35903: NOT
35904: PUSH
35905: LD_VAR 0 1
35909: PUSH
35910: LD_EXP 131
35914: IN
35915: NOT
35916: OR
35917: IFFALSE 35921
// exit ;
35919: GO 36243
// index := GetElementIndex ( minersList , unit ) ;
35921: LD_ADDR_VAR 0 6
35925: PUSH
35926: LD_EXP 131
35930: PPUSH
35931: LD_VAR 0 1
35935: PPUSH
35936: CALL 41439 0 2
35940: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35941: LD_ADDR_VAR 0 8
35945: PUSH
35946: LD_EXP 133
35950: PUSH
35951: LD_EXP 132
35955: PUSH
35956: LD_VAR 0 6
35960: ARRAY
35961: MINUS
35962: ST_TO_ADDR
// if not minesFreeAmount then
35963: LD_VAR 0 8
35967: NOT
35968: IFFALSE 35972
// exit ;
35970: GO 36243
// tmp := [ ] ;
35972: LD_ADDR_VAR 0 7
35976: PUSH
35977: EMPTY
35978: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35979: LD_ADDR_VAR 0 5
35983: PUSH
35984: DOUBLE
35985: LD_INT 1
35987: DEC
35988: ST_TO_ADDR
35989: LD_VAR 0 8
35993: PUSH
35994: FOR_TO
35995: IFFALSE 36190
// begin _d := rand ( 0 , 5 ) ;
35997: LD_ADDR_VAR 0 11
36001: PUSH
36002: LD_INT 0
36004: PPUSH
36005: LD_INT 5
36007: PPUSH
36008: CALL_OW 12
36012: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36013: LD_ADDR_VAR 0 12
36017: PUSH
36018: LD_INT 2
36020: PPUSH
36021: LD_INT 6
36023: PPUSH
36024: CALL_OW 12
36028: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36029: LD_ADDR_VAR 0 9
36033: PUSH
36034: LD_VAR 0 2
36038: PPUSH
36039: LD_VAR 0 11
36043: PPUSH
36044: LD_VAR 0 12
36048: PPUSH
36049: CALL_OW 272
36053: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36054: LD_ADDR_VAR 0 10
36058: PUSH
36059: LD_VAR 0 3
36063: PPUSH
36064: LD_VAR 0 11
36068: PPUSH
36069: LD_VAR 0 12
36073: PPUSH
36074: CALL_OW 273
36078: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36079: LD_VAR 0 9
36083: PPUSH
36084: LD_VAR 0 10
36088: PPUSH
36089: CALL_OW 488
36093: PUSH
36094: LD_VAR 0 9
36098: PUSH
36099: LD_VAR 0 10
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_VAR 0 7
36112: IN
36113: NOT
36114: AND
36115: PUSH
36116: LD_VAR 0 9
36120: PPUSH
36121: LD_VAR 0 10
36125: PPUSH
36126: CALL_OW 458
36130: NOT
36131: AND
36132: IFFALSE 36174
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36134: LD_ADDR_VAR 0 7
36138: PUSH
36139: LD_VAR 0 7
36143: PPUSH
36144: LD_VAR 0 7
36148: PUSH
36149: LD_INT 1
36151: PLUS
36152: PPUSH
36153: LD_VAR 0 9
36157: PUSH
36158: LD_VAR 0 10
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PPUSH
36167: CALL_OW 1
36171: ST_TO_ADDR
36172: GO 36188
// i := i - 1 ;
36174: LD_ADDR_VAR 0 5
36178: PUSH
36179: LD_VAR 0 5
36183: PUSH
36184: LD_INT 1
36186: MINUS
36187: ST_TO_ADDR
// end ;
36188: GO 35994
36190: POP
36191: POP
// for i in tmp do
36192: LD_ADDR_VAR 0 5
36196: PUSH
36197: LD_VAR 0 7
36201: PUSH
36202: FOR_IN
36203: IFFALSE 36241
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36205: LD_VAR 0 1
36209: PPUSH
36210: LD_VAR 0 5
36214: PUSH
36215: LD_INT 1
36217: ARRAY
36218: PPUSH
36219: LD_VAR 0 5
36223: PUSH
36224: LD_INT 2
36226: ARRAY
36227: PPUSH
36228: CALL 35183 0 3
36232: NOT
36233: IFFALSE 36239
// exit ;
36235: POP
36236: POP
36237: GO 36243
36239: GO 36202
36241: POP
36242: POP
// end ;
36243: LD_VAR 0 4
36247: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36248: LD_INT 0
36250: PPUSH
36251: PPUSH
36252: PPUSH
36253: PPUSH
36254: PPUSH
36255: PPUSH
36256: PPUSH
// if not GetClass ( unit ) = class_sniper then
36257: LD_VAR 0 1
36261: PPUSH
36262: CALL_OW 257
36266: PUSH
36267: LD_INT 5
36269: EQUAL
36270: NOT
36271: IFFALSE 36275
// exit ;
36273: GO 36663
// dist := 8 ;
36275: LD_ADDR_VAR 0 5
36279: PUSH
36280: LD_INT 8
36282: ST_TO_ADDR
// viewRange := 12 ;
36283: LD_ADDR_VAR 0 7
36287: PUSH
36288: LD_INT 12
36290: ST_TO_ADDR
// side := GetSide ( unit ) ;
36291: LD_ADDR_VAR 0 6
36295: PUSH
36296: LD_VAR 0 1
36300: PPUSH
36301: CALL_OW 255
36305: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36306: LD_INT 61
36308: PPUSH
36309: LD_VAR 0 6
36313: PPUSH
36314: CALL_OW 321
36318: PUSH
36319: LD_INT 2
36321: EQUAL
36322: IFFALSE 36332
// viewRange := 16 ;
36324: LD_ADDR_VAR 0 7
36328: PUSH
36329: LD_INT 16
36331: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36332: LD_VAR 0 1
36336: PPUSH
36337: LD_VAR 0 2
36341: PPUSH
36342: LD_VAR 0 3
36346: PPUSH
36347: CALL_OW 297
36351: PUSH
36352: LD_VAR 0 5
36356: GREATER
36357: IFFALSE 36436
// begin ComMoveXY ( unit , x , y ) ;
36359: LD_VAR 0 1
36363: PPUSH
36364: LD_VAR 0 2
36368: PPUSH
36369: LD_VAR 0 3
36373: PPUSH
36374: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36378: LD_INT 35
36380: PPUSH
36381: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36385: LD_VAR 0 1
36389: PPUSH
36390: LD_VAR 0 2
36394: PPUSH
36395: LD_VAR 0 3
36399: PPUSH
36400: CALL 72211 0 3
36404: NOT
36405: IFFALSE 36409
// exit ;
36407: GO 36663
// until GetDistUnitXY ( unit , x , y ) < dist ;
36409: LD_VAR 0 1
36413: PPUSH
36414: LD_VAR 0 2
36418: PPUSH
36419: LD_VAR 0 3
36423: PPUSH
36424: CALL_OW 297
36428: PUSH
36429: LD_VAR 0 5
36433: LESS
36434: IFFALSE 36378
// end ; ComTurnXY ( unit , x , y ) ;
36436: LD_VAR 0 1
36440: PPUSH
36441: LD_VAR 0 2
36445: PPUSH
36446: LD_VAR 0 3
36450: PPUSH
36451: CALL_OW 118
// wait ( 5 ) ;
36455: LD_INT 5
36457: PPUSH
36458: CALL_OW 67
// _d := GetDir ( unit ) ;
36462: LD_ADDR_VAR 0 10
36466: PUSH
36467: LD_VAR 0 1
36471: PPUSH
36472: CALL_OW 254
36476: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36477: LD_ADDR_VAR 0 8
36481: PUSH
36482: LD_VAR 0 1
36486: PPUSH
36487: CALL_OW 250
36491: PPUSH
36492: LD_VAR 0 10
36496: PPUSH
36497: LD_VAR 0 5
36501: PPUSH
36502: CALL_OW 272
36506: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36507: LD_ADDR_VAR 0 9
36511: PUSH
36512: LD_VAR 0 1
36516: PPUSH
36517: CALL_OW 251
36521: PPUSH
36522: LD_VAR 0 10
36526: PPUSH
36527: LD_VAR 0 5
36531: PPUSH
36532: CALL_OW 273
36536: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36537: LD_VAR 0 8
36541: PPUSH
36542: LD_VAR 0 9
36546: PPUSH
36547: CALL_OW 488
36551: NOT
36552: IFFALSE 36556
// exit ;
36554: GO 36663
// ComAnimCustom ( unit , 1 ) ;
36556: LD_VAR 0 1
36560: PPUSH
36561: LD_INT 1
36563: PPUSH
36564: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36568: LD_VAR 0 8
36572: PPUSH
36573: LD_VAR 0 9
36577: PPUSH
36578: LD_VAR 0 6
36582: PPUSH
36583: LD_VAR 0 7
36587: PPUSH
36588: CALL_OW 330
// repeat wait ( 1 ) ;
36592: LD_INT 1
36594: PPUSH
36595: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36599: LD_VAR 0 1
36603: PPUSH
36604: CALL_OW 316
36608: PUSH
36609: LD_VAR 0 1
36613: PPUSH
36614: CALL_OW 314
36618: OR
36619: PUSH
36620: LD_VAR 0 1
36624: PPUSH
36625: CALL_OW 302
36629: NOT
36630: OR
36631: PUSH
36632: LD_VAR 0 1
36636: PPUSH
36637: CALL_OW 301
36641: OR
36642: IFFALSE 36592
// RemoveSeeing ( _x , _y , side ) ;
36644: LD_VAR 0 8
36648: PPUSH
36649: LD_VAR 0 9
36653: PPUSH
36654: LD_VAR 0 6
36658: PPUSH
36659: CALL_OW 331
// end ; end_of_file
36663: LD_VAR 0 4
36667: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36668: LD_INT 0
36670: PPUSH
36671: PPUSH
// if exist_mode then
36672: LD_VAR 0 2
36676: IFFALSE 36701
// unit := CreateCharacter ( prefix & ident ) else
36678: LD_ADDR_VAR 0 5
36682: PUSH
36683: LD_VAR 0 3
36687: PUSH
36688: LD_VAR 0 1
36692: STR
36693: PPUSH
36694: CALL_OW 34
36698: ST_TO_ADDR
36699: GO 36716
// unit := NewCharacter ( ident ) ;
36701: LD_ADDR_VAR 0 5
36705: PUSH
36706: LD_VAR 0 1
36710: PPUSH
36711: CALL_OW 25
36715: ST_TO_ADDR
// result := unit ;
36716: LD_ADDR_VAR 0 4
36720: PUSH
36721: LD_VAR 0 5
36725: ST_TO_ADDR
// end ;
36726: LD_VAR 0 4
36730: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36731: LD_INT 0
36733: PPUSH
36734: PPUSH
// if not side or not nation then
36735: LD_VAR 0 1
36739: NOT
36740: PUSH
36741: LD_VAR 0 2
36745: NOT
36746: OR
36747: IFFALSE 36751
// exit ;
36749: GO 37519
// case nation of nation_american :
36751: LD_VAR 0 2
36755: PUSH
36756: LD_INT 1
36758: DOUBLE
36759: EQUAL
36760: IFTRUE 36764
36762: GO 36978
36764: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36765: LD_ADDR_VAR 0 4
36769: PUSH
36770: LD_INT 35
36772: PUSH
36773: LD_INT 45
36775: PUSH
36776: LD_INT 46
36778: PUSH
36779: LD_INT 47
36781: PUSH
36782: LD_INT 82
36784: PUSH
36785: LD_INT 83
36787: PUSH
36788: LD_INT 84
36790: PUSH
36791: LD_INT 85
36793: PUSH
36794: LD_INT 86
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 2
36802: PUSH
36803: LD_INT 6
36805: PUSH
36806: LD_INT 15
36808: PUSH
36809: LD_INT 16
36811: PUSH
36812: LD_INT 7
36814: PUSH
36815: LD_INT 12
36817: PUSH
36818: LD_INT 13
36820: PUSH
36821: LD_INT 10
36823: PUSH
36824: LD_INT 14
36826: PUSH
36827: LD_INT 20
36829: PUSH
36830: LD_INT 21
36832: PUSH
36833: LD_INT 22
36835: PUSH
36836: LD_INT 25
36838: PUSH
36839: LD_INT 32
36841: PUSH
36842: LD_INT 27
36844: PUSH
36845: LD_INT 36
36847: PUSH
36848: LD_INT 69
36850: PUSH
36851: LD_INT 39
36853: PUSH
36854: LD_INT 34
36856: PUSH
36857: LD_INT 40
36859: PUSH
36860: LD_INT 48
36862: PUSH
36863: LD_INT 49
36865: PUSH
36866: LD_INT 50
36868: PUSH
36869: LD_INT 51
36871: PUSH
36872: LD_INT 52
36874: PUSH
36875: LD_INT 53
36877: PUSH
36878: LD_INT 54
36880: PUSH
36881: LD_INT 55
36883: PUSH
36884: LD_INT 56
36886: PUSH
36887: LD_INT 57
36889: PUSH
36890: LD_INT 58
36892: PUSH
36893: LD_INT 59
36895: PUSH
36896: LD_INT 60
36898: PUSH
36899: LD_INT 61
36901: PUSH
36902: LD_INT 62
36904: PUSH
36905: LD_INT 80
36907: PUSH
36908: LD_INT 82
36910: PUSH
36911: LD_INT 83
36913: PUSH
36914: LD_INT 84
36916: PUSH
36917: LD_INT 85
36919: PUSH
36920: LD_INT 86
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: ST_TO_ADDR
36976: GO 37443
36978: LD_INT 2
36980: DOUBLE
36981: EQUAL
36982: IFTRUE 36986
36984: GO 37212
36986: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36987: LD_ADDR_VAR 0 4
36991: PUSH
36992: LD_INT 35
36994: PUSH
36995: LD_INT 45
36997: PUSH
36998: LD_INT 46
37000: PUSH
37001: LD_INT 47
37003: PUSH
37004: LD_INT 82
37006: PUSH
37007: LD_INT 83
37009: PUSH
37010: LD_INT 84
37012: PUSH
37013: LD_INT 85
37015: PUSH
37016: LD_INT 87
37018: PUSH
37019: LD_INT 70
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: LD_INT 11
37027: PUSH
37028: LD_INT 3
37030: PUSH
37031: LD_INT 4
37033: PUSH
37034: LD_INT 5
37036: PUSH
37037: LD_INT 6
37039: PUSH
37040: LD_INT 15
37042: PUSH
37043: LD_INT 18
37045: PUSH
37046: LD_INT 7
37048: PUSH
37049: LD_INT 17
37051: PUSH
37052: LD_INT 8
37054: PUSH
37055: LD_INT 20
37057: PUSH
37058: LD_INT 21
37060: PUSH
37061: LD_INT 22
37063: PUSH
37064: LD_INT 72
37066: PUSH
37067: LD_INT 26
37069: PUSH
37070: LD_INT 69
37072: PUSH
37073: LD_INT 39
37075: PUSH
37076: LD_INT 40
37078: PUSH
37079: LD_INT 41
37081: PUSH
37082: LD_INT 42
37084: PUSH
37085: LD_INT 43
37087: PUSH
37088: LD_INT 48
37090: PUSH
37091: LD_INT 49
37093: PUSH
37094: LD_INT 50
37096: PUSH
37097: LD_INT 51
37099: PUSH
37100: LD_INT 52
37102: PUSH
37103: LD_INT 53
37105: PUSH
37106: LD_INT 54
37108: PUSH
37109: LD_INT 55
37111: PUSH
37112: LD_INT 56
37114: PUSH
37115: LD_INT 60
37117: PUSH
37118: LD_INT 61
37120: PUSH
37121: LD_INT 62
37123: PUSH
37124: LD_INT 66
37126: PUSH
37127: LD_INT 67
37129: PUSH
37130: LD_INT 68
37132: PUSH
37133: LD_INT 81
37135: PUSH
37136: LD_INT 82
37138: PUSH
37139: LD_INT 83
37141: PUSH
37142: LD_INT 84
37144: PUSH
37145: LD_INT 85
37147: PUSH
37148: LD_INT 87
37150: PUSH
37151: LD_INT 88
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: ST_TO_ADDR
37210: GO 37443
37212: LD_INT 3
37214: DOUBLE
37215: EQUAL
37216: IFTRUE 37220
37218: GO 37442
37220: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37221: LD_ADDR_VAR 0 4
37225: PUSH
37226: LD_INT 46
37228: PUSH
37229: LD_INT 47
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: LD_INT 2
37237: PUSH
37238: LD_INT 82
37240: PUSH
37241: LD_INT 83
37243: PUSH
37244: LD_INT 84
37246: PUSH
37247: LD_INT 85
37249: PUSH
37250: LD_INT 86
37252: PUSH
37253: LD_INT 11
37255: PUSH
37256: LD_INT 9
37258: PUSH
37259: LD_INT 20
37261: PUSH
37262: LD_INT 19
37264: PUSH
37265: LD_INT 21
37267: PUSH
37268: LD_INT 24
37270: PUSH
37271: LD_INT 22
37273: PUSH
37274: LD_INT 25
37276: PUSH
37277: LD_INT 28
37279: PUSH
37280: LD_INT 29
37282: PUSH
37283: LD_INT 30
37285: PUSH
37286: LD_INT 31
37288: PUSH
37289: LD_INT 37
37291: PUSH
37292: LD_INT 38
37294: PUSH
37295: LD_INT 32
37297: PUSH
37298: LD_INT 27
37300: PUSH
37301: LD_INT 33
37303: PUSH
37304: LD_INT 69
37306: PUSH
37307: LD_INT 39
37309: PUSH
37310: LD_INT 34
37312: PUSH
37313: LD_INT 40
37315: PUSH
37316: LD_INT 71
37318: PUSH
37319: LD_INT 23
37321: PUSH
37322: LD_INT 44
37324: PUSH
37325: LD_INT 48
37327: PUSH
37328: LD_INT 49
37330: PUSH
37331: LD_INT 50
37333: PUSH
37334: LD_INT 51
37336: PUSH
37337: LD_INT 52
37339: PUSH
37340: LD_INT 53
37342: PUSH
37343: LD_INT 54
37345: PUSH
37346: LD_INT 55
37348: PUSH
37349: LD_INT 56
37351: PUSH
37352: LD_INT 57
37354: PUSH
37355: LD_INT 58
37357: PUSH
37358: LD_INT 59
37360: PUSH
37361: LD_INT 63
37363: PUSH
37364: LD_INT 64
37366: PUSH
37367: LD_INT 65
37369: PUSH
37370: LD_INT 82
37372: PUSH
37373: LD_INT 83
37375: PUSH
37376: LD_INT 84
37378: PUSH
37379: LD_INT 85
37381: PUSH
37382: LD_INT 86
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: ST_TO_ADDR
37440: GO 37443
37442: POP
// if state > - 1 and state < 3 then
37443: LD_VAR 0 3
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: GREATER
37452: PUSH
37453: LD_VAR 0 3
37457: PUSH
37458: LD_INT 3
37460: LESS
37461: AND
37462: IFFALSE 37519
// for i in result do
37464: LD_ADDR_VAR 0 5
37468: PUSH
37469: LD_VAR 0 4
37473: PUSH
37474: FOR_IN
37475: IFFALSE 37517
// if GetTech ( i , side ) <> state then
37477: LD_VAR 0 5
37481: PPUSH
37482: LD_VAR 0 1
37486: PPUSH
37487: CALL_OW 321
37491: PUSH
37492: LD_VAR 0 3
37496: NONEQUAL
37497: IFFALSE 37515
// result := result diff i ;
37499: LD_ADDR_VAR 0 4
37503: PUSH
37504: LD_VAR 0 4
37508: PUSH
37509: LD_VAR 0 5
37513: DIFF
37514: ST_TO_ADDR
37515: GO 37474
37517: POP
37518: POP
// end ;
37519: LD_VAR 0 4
37523: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37524: LD_INT 0
37526: PPUSH
37527: PPUSH
37528: PPUSH
// result := true ;
37529: LD_ADDR_VAR 0 3
37533: PUSH
37534: LD_INT 1
37536: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37537: LD_ADDR_VAR 0 5
37541: PUSH
37542: LD_VAR 0 2
37546: PPUSH
37547: CALL_OW 480
37551: ST_TO_ADDR
// if not tmp then
37552: LD_VAR 0 5
37556: NOT
37557: IFFALSE 37561
// exit ;
37559: GO 37610
// for i in tmp do
37561: LD_ADDR_VAR 0 4
37565: PUSH
37566: LD_VAR 0 5
37570: PUSH
37571: FOR_IN
37572: IFFALSE 37608
// if GetTech ( i , side ) <> state_researched then
37574: LD_VAR 0 4
37578: PPUSH
37579: LD_VAR 0 1
37583: PPUSH
37584: CALL_OW 321
37588: PUSH
37589: LD_INT 2
37591: NONEQUAL
37592: IFFALSE 37606
// begin result := false ;
37594: LD_ADDR_VAR 0 3
37598: PUSH
37599: LD_INT 0
37601: ST_TO_ADDR
// exit ;
37602: POP
37603: POP
37604: GO 37610
// end ;
37606: GO 37571
37608: POP
37609: POP
// end ;
37610: LD_VAR 0 3
37614: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37615: LD_INT 0
37617: PPUSH
37618: PPUSH
37619: PPUSH
37620: PPUSH
37621: PPUSH
37622: PPUSH
37623: PPUSH
37624: PPUSH
37625: PPUSH
37626: PPUSH
37627: PPUSH
37628: PPUSH
37629: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37630: LD_VAR 0 1
37634: NOT
37635: PUSH
37636: LD_VAR 0 1
37640: PPUSH
37641: CALL_OW 257
37645: PUSH
37646: LD_INT 9
37648: NONEQUAL
37649: OR
37650: IFFALSE 37654
// exit ;
37652: GO 38227
// side := GetSide ( unit ) ;
37654: LD_ADDR_VAR 0 9
37658: PUSH
37659: LD_VAR 0 1
37663: PPUSH
37664: CALL_OW 255
37668: ST_TO_ADDR
// tech_space := tech_spacanom ;
37669: LD_ADDR_VAR 0 12
37673: PUSH
37674: LD_INT 29
37676: ST_TO_ADDR
// tech_time := tech_taurad ;
37677: LD_ADDR_VAR 0 13
37681: PUSH
37682: LD_INT 28
37684: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37685: LD_ADDR_VAR 0 11
37689: PUSH
37690: LD_VAR 0 1
37694: PPUSH
37695: CALL_OW 310
37699: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37700: LD_VAR 0 11
37704: PPUSH
37705: CALL_OW 247
37709: PUSH
37710: LD_INT 2
37712: EQUAL
37713: IFFALSE 37717
// exit ;
37715: GO 38227
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37717: LD_ADDR_VAR 0 8
37721: PUSH
37722: LD_INT 81
37724: PUSH
37725: LD_VAR 0 9
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 3
37736: PUSH
37737: LD_INT 21
37739: PUSH
37740: LD_INT 3
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PPUSH
37755: CALL_OW 69
37759: ST_TO_ADDR
// if not tmp then
37760: LD_VAR 0 8
37764: NOT
37765: IFFALSE 37769
// exit ;
37767: GO 38227
// if in_unit then
37769: LD_VAR 0 11
37773: IFFALSE 37797
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37775: LD_ADDR_VAR 0 10
37779: PUSH
37780: LD_VAR 0 8
37784: PPUSH
37785: LD_VAR 0 11
37789: PPUSH
37790: CALL_OW 74
37794: ST_TO_ADDR
37795: GO 37817
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37797: LD_ADDR_VAR 0 10
37801: PUSH
37802: LD_VAR 0 8
37806: PPUSH
37807: LD_VAR 0 1
37811: PPUSH
37812: CALL_OW 74
37816: ST_TO_ADDR
// if not enemy then
37817: LD_VAR 0 10
37821: NOT
37822: IFFALSE 37826
// exit ;
37824: GO 38227
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37826: LD_VAR 0 11
37830: PUSH
37831: LD_VAR 0 11
37835: PPUSH
37836: LD_VAR 0 10
37840: PPUSH
37841: CALL_OW 296
37845: PUSH
37846: LD_INT 13
37848: GREATER
37849: AND
37850: PUSH
37851: LD_VAR 0 1
37855: PPUSH
37856: LD_VAR 0 10
37860: PPUSH
37861: CALL_OW 296
37865: PUSH
37866: LD_INT 12
37868: GREATER
37869: OR
37870: IFFALSE 37874
// exit ;
37872: GO 38227
// missile := [ 1 ] ;
37874: LD_ADDR_VAR 0 14
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37885: LD_VAR 0 9
37889: PPUSH
37890: LD_VAR 0 12
37894: PPUSH
37895: CALL_OW 325
37899: IFFALSE 37928
// missile := Insert ( missile , missile + 1 , 2 ) ;
37901: LD_ADDR_VAR 0 14
37905: PUSH
37906: LD_VAR 0 14
37910: PPUSH
37911: LD_VAR 0 14
37915: PUSH
37916: LD_INT 1
37918: PLUS
37919: PPUSH
37920: LD_INT 2
37922: PPUSH
37923: CALL_OW 2
37927: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37928: LD_VAR 0 9
37932: PPUSH
37933: LD_VAR 0 13
37937: PPUSH
37938: CALL_OW 325
37942: PUSH
37943: LD_VAR 0 10
37947: PPUSH
37948: CALL_OW 255
37952: PPUSH
37953: LD_VAR 0 13
37957: PPUSH
37958: CALL_OW 325
37962: NOT
37963: AND
37964: IFFALSE 37993
// missile := Insert ( missile , missile + 1 , 3 ) ;
37966: LD_ADDR_VAR 0 14
37970: PUSH
37971: LD_VAR 0 14
37975: PPUSH
37976: LD_VAR 0 14
37980: PUSH
37981: LD_INT 1
37983: PLUS
37984: PPUSH
37985: LD_INT 3
37987: PPUSH
37988: CALL_OW 2
37992: ST_TO_ADDR
// if missile < 2 then
37993: LD_VAR 0 14
37997: PUSH
37998: LD_INT 2
38000: LESS
38001: IFFALSE 38005
// exit ;
38003: GO 38227
// x := GetX ( enemy ) ;
38005: LD_ADDR_VAR 0 4
38009: PUSH
38010: LD_VAR 0 10
38014: PPUSH
38015: CALL_OW 250
38019: ST_TO_ADDR
// y := GetY ( enemy ) ;
38020: LD_ADDR_VAR 0 5
38024: PUSH
38025: LD_VAR 0 10
38029: PPUSH
38030: CALL_OW 251
38034: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38035: LD_ADDR_VAR 0 6
38039: PUSH
38040: LD_VAR 0 4
38044: PUSH
38045: LD_INT 1
38047: NEG
38048: PPUSH
38049: LD_INT 1
38051: PPUSH
38052: CALL_OW 12
38056: PLUS
38057: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38058: LD_ADDR_VAR 0 7
38062: PUSH
38063: LD_VAR 0 5
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PPUSH
38072: LD_INT 1
38074: PPUSH
38075: CALL_OW 12
38079: PLUS
38080: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38081: LD_VAR 0 6
38085: PPUSH
38086: LD_VAR 0 7
38090: PPUSH
38091: CALL_OW 488
38095: NOT
38096: IFFALSE 38118
// begin _x := x ;
38098: LD_ADDR_VAR 0 6
38102: PUSH
38103: LD_VAR 0 4
38107: ST_TO_ADDR
// _y := y ;
38108: LD_ADDR_VAR 0 7
38112: PUSH
38113: LD_VAR 0 5
38117: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38118: LD_ADDR_VAR 0 3
38122: PUSH
38123: LD_INT 1
38125: PPUSH
38126: LD_VAR 0 14
38130: PPUSH
38131: CALL_OW 12
38135: ST_TO_ADDR
// case i of 1 :
38136: LD_VAR 0 3
38140: PUSH
38141: LD_INT 1
38143: DOUBLE
38144: EQUAL
38145: IFTRUE 38149
38147: GO 38166
38149: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38150: LD_VAR 0 1
38154: PPUSH
38155: LD_VAR 0 10
38159: PPUSH
38160: CALL_OW 115
38164: GO 38227
38166: LD_INT 2
38168: DOUBLE
38169: EQUAL
38170: IFTRUE 38174
38172: GO 38196
38174: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38175: LD_VAR 0 1
38179: PPUSH
38180: LD_VAR 0 6
38184: PPUSH
38185: LD_VAR 0 7
38189: PPUSH
38190: CALL_OW 153
38194: GO 38227
38196: LD_INT 3
38198: DOUBLE
38199: EQUAL
38200: IFTRUE 38204
38202: GO 38226
38204: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38205: LD_VAR 0 1
38209: PPUSH
38210: LD_VAR 0 6
38214: PPUSH
38215: LD_VAR 0 7
38219: PPUSH
38220: CALL_OW 154
38224: GO 38227
38226: POP
// end ;
38227: LD_VAR 0 2
38231: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38232: LD_INT 0
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
// if not unit or not building then
38240: LD_VAR 0 1
38244: NOT
38245: PUSH
38246: LD_VAR 0 2
38250: NOT
38251: OR
38252: IFFALSE 38256
// exit ;
38254: GO 38414
// x := GetX ( building ) ;
38256: LD_ADDR_VAR 0 5
38260: PUSH
38261: LD_VAR 0 2
38265: PPUSH
38266: CALL_OW 250
38270: ST_TO_ADDR
// y := GetY ( building ) ;
38271: LD_ADDR_VAR 0 6
38275: PUSH
38276: LD_VAR 0 2
38280: PPUSH
38281: CALL_OW 251
38285: ST_TO_ADDR
// for i = 0 to 5 do
38286: LD_ADDR_VAR 0 4
38290: PUSH
38291: DOUBLE
38292: LD_INT 0
38294: DEC
38295: ST_TO_ADDR
38296: LD_INT 5
38298: PUSH
38299: FOR_TO
38300: IFFALSE 38412
// begin _x := ShiftX ( x , i , 3 ) ;
38302: LD_ADDR_VAR 0 7
38306: PUSH
38307: LD_VAR 0 5
38311: PPUSH
38312: LD_VAR 0 4
38316: PPUSH
38317: LD_INT 3
38319: PPUSH
38320: CALL_OW 272
38324: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38325: LD_ADDR_VAR 0 8
38329: PUSH
38330: LD_VAR 0 6
38334: PPUSH
38335: LD_VAR 0 4
38339: PPUSH
38340: LD_INT 3
38342: PPUSH
38343: CALL_OW 273
38347: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38348: LD_VAR 0 7
38352: PPUSH
38353: LD_VAR 0 8
38357: PPUSH
38358: CALL_OW 488
38362: NOT
38363: IFFALSE 38367
// continue ;
38365: GO 38299
// if HexInfo ( _x , _y ) = 0 then
38367: LD_VAR 0 7
38371: PPUSH
38372: LD_VAR 0 8
38376: PPUSH
38377: CALL_OW 428
38381: PUSH
38382: LD_INT 0
38384: EQUAL
38385: IFFALSE 38410
// begin ComMoveXY ( unit , _x , _y ) ;
38387: LD_VAR 0 1
38391: PPUSH
38392: LD_VAR 0 7
38396: PPUSH
38397: LD_VAR 0 8
38401: PPUSH
38402: CALL_OW 111
// exit ;
38406: POP
38407: POP
38408: GO 38414
// end ; end ;
38410: GO 38299
38412: POP
38413: POP
// end ;
38414: LD_VAR 0 3
38418: RET
// export function ScanBase ( side , base_area ) ; begin
38419: LD_INT 0
38421: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38422: LD_ADDR_VAR 0 3
38426: PUSH
38427: LD_VAR 0 2
38431: PPUSH
38432: LD_INT 81
38434: PUSH
38435: LD_VAR 0 1
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PPUSH
38444: CALL_OW 70
38448: ST_TO_ADDR
// end ;
38449: LD_VAR 0 3
38453: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38454: LD_INT 0
38456: PPUSH
38457: PPUSH
38458: PPUSH
38459: PPUSH
// result := false ;
38460: LD_ADDR_VAR 0 2
38464: PUSH
38465: LD_INT 0
38467: ST_TO_ADDR
// side := GetSide ( unit ) ;
38468: LD_ADDR_VAR 0 3
38472: PUSH
38473: LD_VAR 0 1
38477: PPUSH
38478: CALL_OW 255
38482: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38483: LD_ADDR_VAR 0 4
38487: PUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: CALL_OW 248
38497: ST_TO_ADDR
// case nat of 1 :
38498: LD_VAR 0 4
38502: PUSH
38503: LD_INT 1
38505: DOUBLE
38506: EQUAL
38507: IFTRUE 38511
38509: GO 38522
38511: POP
// tech := tech_lassight ; 2 :
38512: LD_ADDR_VAR 0 5
38516: PUSH
38517: LD_INT 12
38519: ST_TO_ADDR
38520: GO 38561
38522: LD_INT 2
38524: DOUBLE
38525: EQUAL
38526: IFTRUE 38530
38528: GO 38541
38530: POP
// tech := tech_mortar ; 3 :
38531: LD_ADDR_VAR 0 5
38535: PUSH
38536: LD_INT 41
38538: ST_TO_ADDR
38539: GO 38561
38541: LD_INT 3
38543: DOUBLE
38544: EQUAL
38545: IFTRUE 38549
38547: GO 38560
38549: POP
// tech := tech_bazooka ; end ;
38550: LD_ADDR_VAR 0 5
38554: PUSH
38555: LD_INT 44
38557: ST_TO_ADDR
38558: GO 38561
38560: POP
// if Researched ( side , tech ) then
38561: LD_VAR 0 3
38565: PPUSH
38566: LD_VAR 0 5
38570: PPUSH
38571: CALL_OW 325
38575: IFFALSE 38602
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38577: LD_ADDR_VAR 0 2
38581: PUSH
38582: LD_INT 5
38584: PUSH
38585: LD_INT 8
38587: PUSH
38588: LD_INT 9
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: LIST
38595: PUSH
38596: LD_VAR 0 4
38600: ARRAY
38601: ST_TO_ADDR
// end ;
38602: LD_VAR 0 2
38606: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38607: LD_INT 0
38609: PPUSH
38610: PPUSH
38611: PPUSH
// if not mines then
38612: LD_VAR 0 2
38616: NOT
38617: IFFALSE 38621
// exit ;
38619: GO 38765
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38621: LD_ADDR_VAR 0 5
38625: PUSH
38626: LD_INT 81
38628: PUSH
38629: LD_VAR 0 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 3
38640: PUSH
38641: LD_INT 21
38643: PUSH
38644: LD_INT 3
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PPUSH
38659: CALL_OW 69
38663: ST_TO_ADDR
// for i in mines do
38664: LD_ADDR_VAR 0 4
38668: PUSH
38669: LD_VAR 0 2
38673: PUSH
38674: FOR_IN
38675: IFFALSE 38763
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38677: LD_VAR 0 4
38681: PUSH
38682: LD_INT 1
38684: ARRAY
38685: PPUSH
38686: LD_VAR 0 4
38690: PUSH
38691: LD_INT 2
38693: ARRAY
38694: PPUSH
38695: CALL_OW 458
38699: NOT
38700: IFFALSE 38704
// continue ;
38702: GO 38674
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38704: LD_VAR 0 4
38708: PUSH
38709: LD_INT 1
38711: ARRAY
38712: PPUSH
38713: LD_VAR 0 4
38717: PUSH
38718: LD_INT 2
38720: ARRAY
38721: PPUSH
38722: CALL_OW 428
38726: PUSH
38727: LD_VAR 0 5
38731: IN
38732: IFFALSE 38761
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38734: LD_VAR 0 4
38738: PUSH
38739: LD_INT 1
38741: ARRAY
38742: PPUSH
38743: LD_VAR 0 4
38747: PUSH
38748: LD_INT 2
38750: ARRAY
38751: PPUSH
38752: LD_VAR 0 1
38756: PPUSH
38757: CALL_OW 456
// end ;
38761: GO 38674
38763: POP
38764: POP
// end ;
38765: LD_VAR 0 3
38769: RET
// export function Count ( array ) ; var i ; begin
38770: LD_INT 0
38772: PPUSH
38773: PPUSH
// result := 0 ;
38774: LD_ADDR_VAR 0 2
38778: PUSH
38779: LD_INT 0
38781: ST_TO_ADDR
// for i in array do
38782: LD_ADDR_VAR 0 3
38786: PUSH
38787: LD_VAR 0 1
38791: PUSH
38792: FOR_IN
38793: IFFALSE 38817
// if i then
38795: LD_VAR 0 3
38799: IFFALSE 38815
// result := result + 1 ;
38801: LD_ADDR_VAR 0 2
38805: PUSH
38806: LD_VAR 0 2
38810: PUSH
38811: LD_INT 1
38813: PLUS
38814: ST_TO_ADDR
38815: GO 38792
38817: POP
38818: POP
// end ;
38819: LD_VAR 0 2
38823: RET
// export function IsEmpty ( building ) ; begin
38824: LD_INT 0
38826: PPUSH
// if not building then
38827: LD_VAR 0 1
38831: NOT
38832: IFFALSE 38836
// exit ;
38834: GO 38879
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38836: LD_ADDR_VAR 0 2
38840: PUSH
38841: LD_VAR 0 1
38845: PUSH
38846: LD_INT 22
38848: PUSH
38849: LD_VAR 0 1
38853: PPUSH
38854: CALL_OW 255
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 58
38865: PUSH
38866: EMPTY
38867: LIST
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PPUSH
38873: CALL_OW 69
38877: IN
38878: ST_TO_ADDR
// end ;
38879: LD_VAR 0 2
38883: RET
// export function IsNotFull ( building ) ; begin
38884: LD_INT 0
38886: PPUSH
// if not building then
38887: LD_VAR 0 1
38891: NOT
38892: IFFALSE 38896
// exit ;
38894: GO 38915
// result := UnitsInside ( building ) < 6 ;
38896: LD_ADDR_VAR 0 2
38900: PUSH
38901: LD_VAR 0 1
38905: PPUSH
38906: CALL_OW 313
38910: PUSH
38911: LD_INT 6
38913: LESS
38914: ST_TO_ADDR
// end ;
38915: LD_VAR 0 2
38919: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38920: LD_INT 0
38922: PPUSH
38923: PPUSH
38924: PPUSH
38925: PPUSH
// tmp := [ ] ;
38926: LD_ADDR_VAR 0 3
38930: PUSH
38931: EMPTY
38932: ST_TO_ADDR
// list := [ ] ;
38933: LD_ADDR_VAR 0 5
38937: PUSH
38938: EMPTY
38939: ST_TO_ADDR
// for i = 16 to 25 do
38940: LD_ADDR_VAR 0 4
38944: PUSH
38945: DOUBLE
38946: LD_INT 16
38948: DEC
38949: ST_TO_ADDR
38950: LD_INT 25
38952: PUSH
38953: FOR_TO
38954: IFFALSE 39027
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38956: LD_ADDR_VAR 0 3
38960: PUSH
38961: LD_VAR 0 3
38965: PUSH
38966: LD_INT 22
38968: PUSH
38969: LD_VAR 0 1
38973: PPUSH
38974: CALL_OW 255
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 91
38985: PUSH
38986: LD_VAR 0 1
38990: PUSH
38991: LD_INT 6
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 30
39001: PUSH
39002: LD_VAR 0 4
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: PPUSH
39019: CALL_OW 69
39023: ADD
39024: ST_TO_ADDR
39025: GO 38953
39027: POP
39028: POP
// for i = 1 to tmp do
39029: LD_ADDR_VAR 0 4
39033: PUSH
39034: DOUBLE
39035: LD_INT 1
39037: DEC
39038: ST_TO_ADDR
39039: LD_VAR 0 3
39043: PUSH
39044: FOR_TO
39045: IFFALSE 39133
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39047: LD_ADDR_VAR 0 5
39051: PUSH
39052: LD_VAR 0 5
39056: PUSH
39057: LD_VAR 0 3
39061: PUSH
39062: LD_VAR 0 4
39066: ARRAY
39067: PPUSH
39068: CALL_OW 266
39072: PUSH
39073: LD_VAR 0 3
39077: PUSH
39078: LD_VAR 0 4
39082: ARRAY
39083: PPUSH
39084: CALL_OW 250
39088: PUSH
39089: LD_VAR 0 3
39093: PUSH
39094: LD_VAR 0 4
39098: ARRAY
39099: PPUSH
39100: CALL_OW 251
39104: PUSH
39105: LD_VAR 0 3
39109: PUSH
39110: LD_VAR 0 4
39114: ARRAY
39115: PPUSH
39116: CALL_OW 254
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: PUSH
39127: EMPTY
39128: LIST
39129: ADD
39130: ST_TO_ADDR
39131: GO 39044
39133: POP
39134: POP
// result := list ;
39135: LD_ADDR_VAR 0 2
39139: PUSH
39140: LD_VAR 0 5
39144: ST_TO_ADDR
// end ;
39145: LD_VAR 0 2
39149: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39150: LD_INT 0
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
// if not factory then
39159: LD_VAR 0 1
39163: NOT
39164: IFFALSE 39168
// exit ;
39166: GO 39761
// if control = control_apeman then
39168: LD_VAR 0 4
39172: PUSH
39173: LD_INT 5
39175: EQUAL
39176: IFFALSE 39285
// begin tmp := UnitsInside ( factory ) ;
39178: LD_ADDR_VAR 0 8
39182: PUSH
39183: LD_VAR 0 1
39187: PPUSH
39188: CALL_OW 313
39192: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39193: LD_VAR 0 8
39197: PPUSH
39198: LD_INT 25
39200: PUSH
39201: LD_INT 12
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PPUSH
39208: CALL_OW 72
39212: NOT
39213: IFFALSE 39223
// control := control_manual ;
39215: LD_ADDR_VAR 0 4
39219: PUSH
39220: LD_INT 1
39222: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39223: LD_ADDR_VAR 0 8
39227: PUSH
39228: LD_VAR 0 1
39232: PPUSH
39233: CALL 38920 0 1
39237: ST_TO_ADDR
// if tmp then
39238: LD_VAR 0 8
39242: IFFALSE 39285
// begin for i in tmp do
39244: LD_ADDR_VAR 0 7
39248: PUSH
39249: LD_VAR 0 8
39253: PUSH
39254: FOR_IN
39255: IFFALSE 39283
// if i [ 1 ] = b_ext_radio then
39257: LD_VAR 0 7
39261: PUSH
39262: LD_INT 1
39264: ARRAY
39265: PUSH
39266: LD_INT 22
39268: EQUAL
39269: IFFALSE 39281
// begin control := control_remote ;
39271: LD_ADDR_VAR 0 4
39275: PUSH
39276: LD_INT 2
39278: ST_TO_ADDR
// break ;
39279: GO 39283
// end ;
39281: GO 39254
39283: POP
39284: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39285: LD_VAR 0 1
39289: PPUSH
39290: LD_VAR 0 2
39294: PPUSH
39295: LD_VAR 0 3
39299: PPUSH
39300: LD_VAR 0 4
39304: PPUSH
39305: LD_VAR 0 5
39309: PPUSH
39310: CALL_OW 448
39314: IFFALSE 39349
// begin result := [ chassis , engine , control , weapon ] ;
39316: LD_ADDR_VAR 0 6
39320: PUSH
39321: LD_VAR 0 2
39325: PUSH
39326: LD_VAR 0 3
39330: PUSH
39331: LD_VAR 0 4
39335: PUSH
39336: LD_VAR 0 5
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: ST_TO_ADDR
// exit ;
39347: GO 39761
// end ; _chassis := AvailableChassisList ( factory ) ;
39349: LD_ADDR_VAR 0 9
39353: PUSH
39354: LD_VAR 0 1
39358: PPUSH
39359: CALL_OW 475
39363: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39364: LD_ADDR_VAR 0 11
39368: PUSH
39369: LD_VAR 0 1
39373: PPUSH
39374: CALL_OW 476
39378: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39379: LD_ADDR_VAR 0 12
39383: PUSH
39384: LD_VAR 0 1
39388: PPUSH
39389: CALL_OW 477
39393: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39394: LD_ADDR_VAR 0 10
39398: PUSH
39399: LD_VAR 0 1
39403: PPUSH
39404: CALL_OW 478
39408: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39409: LD_VAR 0 9
39413: NOT
39414: PUSH
39415: LD_VAR 0 11
39419: NOT
39420: OR
39421: PUSH
39422: LD_VAR 0 12
39426: NOT
39427: OR
39428: PUSH
39429: LD_VAR 0 10
39433: NOT
39434: OR
39435: IFFALSE 39470
// begin result := [ chassis , engine , control , weapon ] ;
39437: LD_ADDR_VAR 0 6
39441: PUSH
39442: LD_VAR 0 2
39446: PUSH
39447: LD_VAR 0 3
39451: PUSH
39452: LD_VAR 0 4
39456: PUSH
39457: LD_VAR 0 5
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: ST_TO_ADDR
// exit ;
39468: GO 39761
// end ; if not chassis in _chassis then
39470: LD_VAR 0 2
39474: PUSH
39475: LD_VAR 0 9
39479: IN
39480: NOT
39481: IFFALSE 39507
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39483: LD_ADDR_VAR 0 2
39487: PUSH
39488: LD_VAR 0 9
39492: PUSH
39493: LD_INT 1
39495: PPUSH
39496: LD_VAR 0 9
39500: PPUSH
39501: CALL_OW 12
39505: ARRAY
39506: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39507: LD_VAR 0 2
39511: PPUSH
39512: LD_VAR 0 3
39516: PPUSH
39517: CALL 39766 0 2
39521: NOT
39522: IFFALSE 39581
// repeat engine := _engine [ 1 ] ;
39524: LD_ADDR_VAR 0 3
39528: PUSH
39529: LD_VAR 0 11
39533: PUSH
39534: LD_INT 1
39536: ARRAY
39537: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39538: LD_ADDR_VAR 0 11
39542: PUSH
39543: LD_VAR 0 11
39547: PPUSH
39548: LD_INT 1
39550: PPUSH
39551: CALL_OW 3
39555: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39556: LD_VAR 0 2
39560: PPUSH
39561: LD_VAR 0 3
39565: PPUSH
39566: CALL 39766 0 2
39570: PUSH
39571: LD_VAR 0 11
39575: PUSH
39576: EMPTY
39577: EQUAL
39578: OR
39579: IFFALSE 39524
// if not control in _control then
39581: LD_VAR 0 4
39585: PUSH
39586: LD_VAR 0 12
39590: IN
39591: NOT
39592: IFFALSE 39618
// control := _control [ rand ( 1 , _control ) ] ;
39594: LD_ADDR_VAR 0 4
39598: PUSH
39599: LD_VAR 0 12
39603: PUSH
39604: LD_INT 1
39606: PPUSH
39607: LD_VAR 0 12
39611: PPUSH
39612: CALL_OW 12
39616: ARRAY
39617: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39618: LD_VAR 0 2
39622: PPUSH
39623: LD_VAR 0 5
39627: PPUSH
39628: CALL 39986 0 2
39632: NOT
39633: IFFALSE 39692
// repeat weapon := _weapon [ 1 ] ;
39635: LD_ADDR_VAR 0 5
39639: PUSH
39640: LD_VAR 0 10
39644: PUSH
39645: LD_INT 1
39647: ARRAY
39648: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39649: LD_ADDR_VAR 0 10
39653: PUSH
39654: LD_VAR 0 10
39658: PPUSH
39659: LD_INT 1
39661: PPUSH
39662: CALL_OW 3
39666: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39667: LD_VAR 0 2
39671: PPUSH
39672: LD_VAR 0 5
39676: PPUSH
39677: CALL 39986 0 2
39681: PUSH
39682: LD_VAR 0 10
39686: PUSH
39687: EMPTY
39688: EQUAL
39689: OR
39690: IFFALSE 39635
// result := [ ] ;
39692: LD_ADDR_VAR 0 6
39696: PUSH
39697: EMPTY
39698: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39699: LD_VAR 0 1
39703: PPUSH
39704: LD_VAR 0 2
39708: PPUSH
39709: LD_VAR 0 3
39713: PPUSH
39714: LD_VAR 0 4
39718: PPUSH
39719: LD_VAR 0 5
39723: PPUSH
39724: CALL_OW 448
39728: IFFALSE 39761
// result := [ chassis , engine , control , weapon ] ;
39730: LD_ADDR_VAR 0 6
39734: PUSH
39735: LD_VAR 0 2
39739: PUSH
39740: LD_VAR 0 3
39744: PUSH
39745: LD_VAR 0 4
39749: PUSH
39750: LD_VAR 0 5
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: ST_TO_ADDR
// end ;
39761: LD_VAR 0 6
39765: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39766: LD_INT 0
39768: PPUSH
// if not chassis or not engine then
39769: LD_VAR 0 1
39773: NOT
39774: PUSH
39775: LD_VAR 0 2
39779: NOT
39780: OR
39781: IFFALSE 39785
// exit ;
39783: GO 39981
// case engine of engine_solar :
39785: LD_VAR 0 2
39789: PUSH
39790: LD_INT 2
39792: DOUBLE
39793: EQUAL
39794: IFTRUE 39798
39796: GO 39836
39798: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39799: LD_ADDR_VAR 0 3
39803: PUSH
39804: LD_INT 11
39806: PUSH
39807: LD_INT 12
39809: PUSH
39810: LD_INT 13
39812: PUSH
39813: LD_INT 14
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: LD_INT 3
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: ST_TO_ADDR
39834: GO 39965
39836: LD_INT 1
39838: DOUBLE
39839: EQUAL
39840: IFTRUE 39844
39842: GO 39906
39844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39845: LD_ADDR_VAR 0 3
39849: PUSH
39850: LD_INT 11
39852: PUSH
39853: LD_INT 12
39855: PUSH
39856: LD_INT 13
39858: PUSH
39859: LD_INT 14
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: LD_INT 2
39867: PUSH
39868: LD_INT 3
39870: PUSH
39871: LD_INT 4
39873: PUSH
39874: LD_INT 5
39876: PUSH
39877: LD_INT 21
39879: PUSH
39880: LD_INT 23
39882: PUSH
39883: LD_INT 22
39885: PUSH
39886: LD_INT 24
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: ST_TO_ADDR
39904: GO 39965
39906: LD_INT 3
39908: DOUBLE
39909: EQUAL
39910: IFTRUE 39914
39912: GO 39964
39914: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39915: LD_ADDR_VAR 0 3
39919: PUSH
39920: LD_INT 13
39922: PUSH
39923: LD_INT 14
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 3
39931: PUSH
39932: LD_INT 4
39934: PUSH
39935: LD_INT 5
39937: PUSH
39938: LD_INT 21
39940: PUSH
39941: LD_INT 22
39943: PUSH
39944: LD_INT 23
39946: PUSH
39947: LD_INT 24
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: ST_TO_ADDR
39962: GO 39965
39964: POP
// result := ( chassis in result ) ;
39965: LD_ADDR_VAR 0 3
39969: PUSH
39970: LD_VAR 0 1
39974: PUSH
39975: LD_VAR 0 3
39979: IN
39980: ST_TO_ADDR
// end ;
39981: LD_VAR 0 3
39985: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39986: LD_INT 0
39988: PPUSH
// if not chassis or not weapon then
39989: LD_VAR 0 1
39993: NOT
39994: PUSH
39995: LD_VAR 0 2
39999: NOT
40000: OR
40001: IFFALSE 40005
// exit ;
40003: GO 41067
// case weapon of us_machine_gun :
40005: LD_VAR 0 2
40009: PUSH
40010: LD_INT 2
40012: DOUBLE
40013: EQUAL
40014: IFTRUE 40018
40016: GO 40048
40018: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40019: LD_ADDR_VAR 0 3
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: LD_INT 3
40032: PUSH
40033: LD_INT 4
40035: PUSH
40036: LD_INT 5
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: ST_TO_ADDR
40046: GO 41051
40048: LD_INT 3
40050: DOUBLE
40051: EQUAL
40052: IFTRUE 40056
40054: GO 40086
40056: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40057: LD_ADDR_VAR 0 3
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: LD_INT 3
40070: PUSH
40071: LD_INT 4
40073: PUSH
40074: LD_INT 5
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: ST_TO_ADDR
40084: GO 41051
40086: LD_INT 11
40088: DOUBLE
40089: EQUAL
40090: IFTRUE 40094
40092: GO 40124
40094: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40095: LD_ADDR_VAR 0 3
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: LD_INT 2
40105: PUSH
40106: LD_INT 3
40108: PUSH
40109: LD_INT 4
40111: PUSH
40112: LD_INT 5
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: ST_TO_ADDR
40122: GO 41051
40124: LD_INT 4
40126: DOUBLE
40127: EQUAL
40128: IFTRUE 40132
40130: GO 40158
40132: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40133: LD_ADDR_VAR 0 3
40137: PUSH
40138: LD_INT 2
40140: PUSH
40141: LD_INT 3
40143: PUSH
40144: LD_INT 4
40146: PUSH
40147: LD_INT 5
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: ST_TO_ADDR
40156: GO 41051
40158: LD_INT 5
40160: DOUBLE
40161: EQUAL
40162: IFTRUE 40166
40164: GO 40192
40166: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40167: LD_ADDR_VAR 0 3
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: LD_INT 3
40177: PUSH
40178: LD_INT 4
40180: PUSH
40181: LD_INT 5
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: ST_TO_ADDR
40190: GO 41051
40192: LD_INT 9
40194: DOUBLE
40195: EQUAL
40196: IFTRUE 40200
40198: GO 40226
40200: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40201: LD_ADDR_VAR 0 3
40205: PUSH
40206: LD_INT 2
40208: PUSH
40209: LD_INT 3
40211: PUSH
40212: LD_INT 4
40214: PUSH
40215: LD_INT 5
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: ST_TO_ADDR
40224: GO 41051
40226: LD_INT 7
40228: DOUBLE
40229: EQUAL
40230: IFTRUE 40234
40232: GO 40260
40234: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40235: LD_ADDR_VAR 0 3
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 3
40245: PUSH
40246: LD_INT 4
40248: PUSH
40249: LD_INT 5
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: ST_TO_ADDR
40258: GO 41051
40260: LD_INT 12
40262: DOUBLE
40263: EQUAL
40264: IFTRUE 40268
40266: GO 40294
40268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40269: LD_ADDR_VAR 0 3
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: LD_INT 3
40279: PUSH
40280: LD_INT 4
40282: PUSH
40283: LD_INT 5
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: ST_TO_ADDR
40292: GO 41051
40294: LD_INT 13
40296: DOUBLE
40297: EQUAL
40298: IFTRUE 40302
40300: GO 40328
40302: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40303: LD_ADDR_VAR 0 3
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: LD_INT 3
40313: PUSH
40314: LD_INT 4
40316: PUSH
40317: LD_INT 5
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: ST_TO_ADDR
40326: GO 41051
40328: LD_INT 14
40330: DOUBLE
40331: EQUAL
40332: IFTRUE 40336
40334: GO 40354
40336: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40337: LD_ADDR_VAR 0 3
40341: PUSH
40342: LD_INT 4
40344: PUSH
40345: LD_INT 5
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: ST_TO_ADDR
40352: GO 41051
40354: LD_INT 6
40356: DOUBLE
40357: EQUAL
40358: IFTRUE 40362
40360: GO 40380
40362: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40363: LD_ADDR_VAR 0 3
40367: PUSH
40368: LD_INT 4
40370: PUSH
40371: LD_INT 5
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: ST_TO_ADDR
40378: GO 41051
40380: LD_INT 10
40382: DOUBLE
40383: EQUAL
40384: IFTRUE 40388
40386: GO 40406
40388: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40389: LD_ADDR_VAR 0 3
40393: PUSH
40394: LD_INT 4
40396: PUSH
40397: LD_INT 5
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: ST_TO_ADDR
40404: GO 41051
40406: LD_INT 22
40408: DOUBLE
40409: EQUAL
40410: IFTRUE 40414
40412: GO 40440
40414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40415: LD_ADDR_VAR 0 3
40419: PUSH
40420: LD_INT 11
40422: PUSH
40423: LD_INT 12
40425: PUSH
40426: LD_INT 13
40428: PUSH
40429: LD_INT 14
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: ST_TO_ADDR
40438: GO 41051
40440: LD_INT 23
40442: DOUBLE
40443: EQUAL
40444: IFTRUE 40448
40446: GO 40474
40448: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40449: LD_ADDR_VAR 0 3
40453: PUSH
40454: LD_INT 11
40456: PUSH
40457: LD_INT 12
40459: PUSH
40460: LD_INT 13
40462: PUSH
40463: LD_INT 14
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: ST_TO_ADDR
40472: GO 41051
40474: LD_INT 24
40476: DOUBLE
40477: EQUAL
40478: IFTRUE 40482
40480: GO 40508
40482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40483: LD_ADDR_VAR 0 3
40487: PUSH
40488: LD_INT 11
40490: PUSH
40491: LD_INT 12
40493: PUSH
40494: LD_INT 13
40496: PUSH
40497: LD_INT 14
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: ST_TO_ADDR
40506: GO 41051
40508: LD_INT 30
40510: DOUBLE
40511: EQUAL
40512: IFTRUE 40516
40514: GO 40542
40516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40517: LD_ADDR_VAR 0 3
40521: PUSH
40522: LD_INT 11
40524: PUSH
40525: LD_INT 12
40527: PUSH
40528: LD_INT 13
40530: PUSH
40531: LD_INT 14
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: ST_TO_ADDR
40540: GO 41051
40542: LD_INT 25
40544: DOUBLE
40545: EQUAL
40546: IFTRUE 40550
40548: GO 40568
40550: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40551: LD_ADDR_VAR 0 3
40555: PUSH
40556: LD_INT 13
40558: PUSH
40559: LD_INT 14
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: ST_TO_ADDR
40566: GO 41051
40568: LD_INT 27
40570: DOUBLE
40571: EQUAL
40572: IFTRUE 40576
40574: GO 40594
40576: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40577: LD_ADDR_VAR 0 3
40581: PUSH
40582: LD_INT 13
40584: PUSH
40585: LD_INT 14
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: ST_TO_ADDR
40592: GO 41051
40594: LD_EXP 53
40598: DOUBLE
40599: EQUAL
40600: IFTRUE 40604
40602: GO 40630
40604: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40605: LD_ADDR_VAR 0 3
40609: PUSH
40610: LD_INT 11
40612: PUSH
40613: LD_INT 12
40615: PUSH
40616: LD_INT 13
40618: PUSH
40619: LD_INT 14
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: ST_TO_ADDR
40628: GO 41051
40630: LD_INT 28
40632: DOUBLE
40633: EQUAL
40634: IFTRUE 40638
40636: GO 40656
40638: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40639: LD_ADDR_VAR 0 3
40643: PUSH
40644: LD_INT 13
40646: PUSH
40647: LD_INT 14
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: ST_TO_ADDR
40654: GO 41051
40656: LD_INT 29
40658: DOUBLE
40659: EQUAL
40660: IFTRUE 40664
40662: GO 40682
40664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40665: LD_ADDR_VAR 0 3
40669: PUSH
40670: LD_INT 13
40672: PUSH
40673: LD_INT 14
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: ST_TO_ADDR
40680: GO 41051
40682: LD_INT 31
40684: DOUBLE
40685: EQUAL
40686: IFTRUE 40690
40688: GO 40708
40690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40691: LD_ADDR_VAR 0 3
40695: PUSH
40696: LD_INT 13
40698: PUSH
40699: LD_INT 14
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: ST_TO_ADDR
40706: GO 41051
40708: LD_INT 26
40710: DOUBLE
40711: EQUAL
40712: IFTRUE 40716
40714: GO 40734
40716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40717: LD_ADDR_VAR 0 3
40721: PUSH
40722: LD_INT 13
40724: PUSH
40725: LD_INT 14
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: ST_TO_ADDR
40732: GO 41051
40734: LD_INT 42
40736: DOUBLE
40737: EQUAL
40738: IFTRUE 40742
40740: GO 40768
40742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40743: LD_ADDR_VAR 0 3
40747: PUSH
40748: LD_INT 21
40750: PUSH
40751: LD_INT 22
40753: PUSH
40754: LD_INT 23
40756: PUSH
40757: LD_INT 24
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: ST_TO_ADDR
40766: GO 41051
40768: LD_INT 43
40770: DOUBLE
40771: EQUAL
40772: IFTRUE 40776
40774: GO 40802
40776: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40777: LD_ADDR_VAR 0 3
40781: PUSH
40782: LD_INT 21
40784: PUSH
40785: LD_INT 22
40787: PUSH
40788: LD_INT 23
40790: PUSH
40791: LD_INT 24
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: ST_TO_ADDR
40800: GO 41051
40802: LD_INT 44
40804: DOUBLE
40805: EQUAL
40806: IFTRUE 40810
40808: GO 40836
40810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40811: LD_ADDR_VAR 0 3
40815: PUSH
40816: LD_INT 21
40818: PUSH
40819: LD_INT 22
40821: PUSH
40822: LD_INT 23
40824: PUSH
40825: LD_INT 24
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: ST_TO_ADDR
40834: GO 41051
40836: LD_INT 45
40838: DOUBLE
40839: EQUAL
40840: IFTRUE 40844
40842: GO 40870
40844: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40845: LD_ADDR_VAR 0 3
40849: PUSH
40850: LD_INT 21
40852: PUSH
40853: LD_INT 22
40855: PUSH
40856: LD_INT 23
40858: PUSH
40859: LD_INT 24
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: ST_TO_ADDR
40868: GO 41051
40870: LD_INT 49
40872: DOUBLE
40873: EQUAL
40874: IFTRUE 40878
40876: GO 40904
40878: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40879: LD_ADDR_VAR 0 3
40883: PUSH
40884: LD_INT 21
40886: PUSH
40887: LD_INT 22
40889: PUSH
40890: LD_INT 23
40892: PUSH
40893: LD_INT 24
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: ST_TO_ADDR
40902: GO 41051
40904: LD_INT 51
40906: DOUBLE
40907: EQUAL
40908: IFTRUE 40912
40910: GO 40938
40912: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40913: LD_ADDR_VAR 0 3
40917: PUSH
40918: LD_INT 21
40920: PUSH
40921: LD_INT 22
40923: PUSH
40924: LD_INT 23
40926: PUSH
40927: LD_INT 24
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: ST_TO_ADDR
40936: GO 41051
40938: LD_INT 52
40940: DOUBLE
40941: EQUAL
40942: IFTRUE 40946
40944: GO 40972
40946: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40947: LD_ADDR_VAR 0 3
40951: PUSH
40952: LD_INT 21
40954: PUSH
40955: LD_INT 22
40957: PUSH
40958: LD_INT 23
40960: PUSH
40961: LD_INT 24
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: ST_TO_ADDR
40970: GO 41051
40972: LD_INT 53
40974: DOUBLE
40975: EQUAL
40976: IFTRUE 40980
40978: GO 40998
40980: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40981: LD_ADDR_VAR 0 3
40985: PUSH
40986: LD_INT 23
40988: PUSH
40989: LD_INT 24
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: ST_TO_ADDR
40996: GO 41051
40998: LD_INT 46
41000: DOUBLE
41001: EQUAL
41002: IFTRUE 41006
41004: GO 41024
41006: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41007: LD_ADDR_VAR 0 3
41011: PUSH
41012: LD_INT 23
41014: PUSH
41015: LD_INT 24
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: ST_TO_ADDR
41022: GO 41051
41024: LD_INT 47
41026: DOUBLE
41027: EQUAL
41028: IFTRUE 41032
41030: GO 41050
41032: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41033: LD_ADDR_VAR 0 3
41037: PUSH
41038: LD_INT 23
41040: PUSH
41041: LD_INT 24
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: ST_TO_ADDR
41048: GO 41051
41050: POP
// result := ( chassis in result ) ;
41051: LD_ADDR_VAR 0 3
41055: PUSH
41056: LD_VAR 0 1
41060: PUSH
41061: LD_VAR 0 3
41065: IN
41066: ST_TO_ADDR
// end ;
41067: LD_VAR 0 3
41071: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41072: LD_INT 0
41074: PPUSH
41075: PPUSH
41076: PPUSH
41077: PPUSH
41078: PPUSH
41079: PPUSH
41080: PPUSH
// result := array ;
41081: LD_ADDR_VAR 0 5
41085: PUSH
41086: LD_VAR 0 1
41090: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41091: LD_VAR 0 1
41095: NOT
41096: PUSH
41097: LD_VAR 0 2
41101: NOT
41102: OR
41103: PUSH
41104: LD_VAR 0 3
41108: NOT
41109: OR
41110: PUSH
41111: LD_VAR 0 2
41115: PUSH
41116: LD_VAR 0 1
41120: GREATER
41121: OR
41122: PUSH
41123: LD_VAR 0 3
41127: PUSH
41128: LD_VAR 0 1
41132: GREATER
41133: OR
41134: IFFALSE 41138
// exit ;
41136: GO 41434
// if direction then
41138: LD_VAR 0 4
41142: IFFALSE 41206
// begin d := 1 ;
41144: LD_ADDR_VAR 0 9
41148: PUSH
41149: LD_INT 1
41151: ST_TO_ADDR
// if i_from > i_to then
41152: LD_VAR 0 2
41156: PUSH
41157: LD_VAR 0 3
41161: GREATER
41162: IFFALSE 41188
// length := ( array - i_from ) + i_to else
41164: LD_ADDR_VAR 0 11
41168: PUSH
41169: LD_VAR 0 1
41173: PUSH
41174: LD_VAR 0 2
41178: MINUS
41179: PUSH
41180: LD_VAR 0 3
41184: PLUS
41185: ST_TO_ADDR
41186: GO 41204
// length := i_to - i_from ;
41188: LD_ADDR_VAR 0 11
41192: PUSH
41193: LD_VAR 0 3
41197: PUSH
41198: LD_VAR 0 2
41202: MINUS
41203: ST_TO_ADDR
// end else
41204: GO 41267
// begin d := - 1 ;
41206: LD_ADDR_VAR 0 9
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: ST_TO_ADDR
// if i_from > i_to then
41215: LD_VAR 0 2
41219: PUSH
41220: LD_VAR 0 3
41224: GREATER
41225: IFFALSE 41245
// length := i_from - i_to else
41227: LD_ADDR_VAR 0 11
41231: PUSH
41232: LD_VAR 0 2
41236: PUSH
41237: LD_VAR 0 3
41241: MINUS
41242: ST_TO_ADDR
41243: GO 41267
// length := ( array - i_to ) + i_from ;
41245: LD_ADDR_VAR 0 11
41249: PUSH
41250: LD_VAR 0 1
41254: PUSH
41255: LD_VAR 0 3
41259: MINUS
41260: PUSH
41261: LD_VAR 0 2
41265: PLUS
41266: ST_TO_ADDR
// end ; if not length then
41267: LD_VAR 0 11
41271: NOT
41272: IFFALSE 41276
// exit ;
41274: GO 41434
// tmp := array ;
41276: LD_ADDR_VAR 0 10
41280: PUSH
41281: LD_VAR 0 1
41285: ST_TO_ADDR
// for i = 1 to length do
41286: LD_ADDR_VAR 0 6
41290: PUSH
41291: DOUBLE
41292: LD_INT 1
41294: DEC
41295: ST_TO_ADDR
41296: LD_VAR 0 11
41300: PUSH
41301: FOR_TO
41302: IFFALSE 41422
// begin for j = 1 to array do
41304: LD_ADDR_VAR 0 7
41308: PUSH
41309: DOUBLE
41310: LD_INT 1
41312: DEC
41313: ST_TO_ADDR
41314: LD_VAR 0 1
41318: PUSH
41319: FOR_TO
41320: IFFALSE 41408
// begin k := j + d ;
41322: LD_ADDR_VAR 0 8
41326: PUSH
41327: LD_VAR 0 7
41331: PUSH
41332: LD_VAR 0 9
41336: PLUS
41337: ST_TO_ADDR
// if k > array then
41338: LD_VAR 0 8
41342: PUSH
41343: LD_VAR 0 1
41347: GREATER
41348: IFFALSE 41358
// k := 1 ;
41350: LD_ADDR_VAR 0 8
41354: PUSH
41355: LD_INT 1
41357: ST_TO_ADDR
// if not k then
41358: LD_VAR 0 8
41362: NOT
41363: IFFALSE 41375
// k := array ;
41365: LD_ADDR_VAR 0 8
41369: PUSH
41370: LD_VAR 0 1
41374: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41375: LD_ADDR_VAR 0 10
41379: PUSH
41380: LD_VAR 0 10
41384: PPUSH
41385: LD_VAR 0 8
41389: PPUSH
41390: LD_VAR 0 1
41394: PUSH
41395: LD_VAR 0 7
41399: ARRAY
41400: PPUSH
41401: CALL_OW 1
41405: ST_TO_ADDR
// end ;
41406: GO 41319
41408: POP
41409: POP
// array := tmp ;
41410: LD_ADDR_VAR 0 1
41414: PUSH
41415: LD_VAR 0 10
41419: ST_TO_ADDR
// end ;
41420: GO 41301
41422: POP
41423: POP
// result := array ;
41424: LD_ADDR_VAR 0 5
41428: PUSH
41429: LD_VAR 0 1
41433: ST_TO_ADDR
// end ;
41434: LD_VAR 0 5
41438: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41439: LD_INT 0
41441: PPUSH
41442: PPUSH
// result := 0 ;
41443: LD_ADDR_VAR 0 3
41447: PUSH
41448: LD_INT 0
41450: ST_TO_ADDR
// if not array or not value in array then
41451: LD_VAR 0 1
41455: NOT
41456: PUSH
41457: LD_VAR 0 2
41461: PUSH
41462: LD_VAR 0 1
41466: IN
41467: NOT
41468: OR
41469: IFFALSE 41473
// exit ;
41471: GO 41527
// for i = 1 to array do
41473: LD_ADDR_VAR 0 4
41477: PUSH
41478: DOUBLE
41479: LD_INT 1
41481: DEC
41482: ST_TO_ADDR
41483: LD_VAR 0 1
41487: PUSH
41488: FOR_TO
41489: IFFALSE 41525
// if value = array [ i ] then
41491: LD_VAR 0 2
41495: PUSH
41496: LD_VAR 0 1
41500: PUSH
41501: LD_VAR 0 4
41505: ARRAY
41506: EQUAL
41507: IFFALSE 41523
// begin result := i ;
41509: LD_ADDR_VAR 0 3
41513: PUSH
41514: LD_VAR 0 4
41518: ST_TO_ADDR
// exit ;
41519: POP
41520: POP
41521: GO 41527
// end ;
41523: GO 41488
41525: POP
41526: POP
// end ;
41527: LD_VAR 0 3
41531: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41532: LD_INT 0
41534: PPUSH
// vc_chassis := chassis ;
41535: LD_ADDR_OWVAR 37
41539: PUSH
41540: LD_VAR 0 1
41544: ST_TO_ADDR
// vc_engine := engine ;
41545: LD_ADDR_OWVAR 39
41549: PUSH
41550: LD_VAR 0 2
41554: ST_TO_ADDR
// vc_control := control ;
41555: LD_ADDR_OWVAR 38
41559: PUSH
41560: LD_VAR 0 3
41564: ST_TO_ADDR
// vc_weapon := weapon ;
41565: LD_ADDR_OWVAR 40
41569: PUSH
41570: LD_VAR 0 4
41574: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41575: LD_ADDR_OWVAR 41
41579: PUSH
41580: LD_VAR 0 5
41584: ST_TO_ADDR
// end ;
41585: LD_VAR 0 6
41589: RET
// export function WantPlant ( unit ) ; var task ; begin
41590: LD_INT 0
41592: PPUSH
41593: PPUSH
// result := false ;
41594: LD_ADDR_VAR 0 2
41598: PUSH
41599: LD_INT 0
41601: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41602: LD_ADDR_VAR 0 3
41606: PUSH
41607: LD_VAR 0 1
41611: PPUSH
41612: CALL_OW 437
41616: ST_TO_ADDR
// if task then
41617: LD_VAR 0 3
41621: IFFALSE 41649
// if task [ 1 ] [ 1 ] = p then
41623: LD_VAR 0 3
41627: PUSH
41628: LD_INT 1
41630: ARRAY
41631: PUSH
41632: LD_INT 1
41634: ARRAY
41635: PUSH
41636: LD_STRING p
41638: EQUAL
41639: IFFALSE 41649
// result := true ;
41641: LD_ADDR_VAR 0 2
41645: PUSH
41646: LD_INT 1
41648: ST_TO_ADDR
// end ;
41649: LD_VAR 0 2
41653: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41654: LD_INT 0
41656: PPUSH
41657: PPUSH
41658: PPUSH
41659: PPUSH
// if pos < 1 then
41660: LD_VAR 0 2
41664: PUSH
41665: LD_INT 1
41667: LESS
41668: IFFALSE 41672
// exit ;
41670: GO 41975
// if pos = 1 then
41672: LD_VAR 0 2
41676: PUSH
41677: LD_INT 1
41679: EQUAL
41680: IFFALSE 41713
// result := Replace ( arr , pos [ 1 ] , value ) else
41682: LD_ADDR_VAR 0 4
41686: PUSH
41687: LD_VAR 0 1
41691: PPUSH
41692: LD_VAR 0 2
41696: PUSH
41697: LD_INT 1
41699: ARRAY
41700: PPUSH
41701: LD_VAR 0 3
41705: PPUSH
41706: CALL_OW 1
41710: ST_TO_ADDR
41711: GO 41975
// begin tmp := arr ;
41713: LD_ADDR_VAR 0 6
41717: PUSH
41718: LD_VAR 0 1
41722: ST_TO_ADDR
// s_arr := [ tmp ] ;
41723: LD_ADDR_VAR 0 7
41727: PUSH
41728: LD_VAR 0 6
41732: PUSH
41733: EMPTY
41734: LIST
41735: ST_TO_ADDR
// for i = 1 to pos - 1 do
41736: LD_ADDR_VAR 0 5
41740: PUSH
41741: DOUBLE
41742: LD_INT 1
41744: DEC
41745: ST_TO_ADDR
41746: LD_VAR 0 2
41750: PUSH
41751: LD_INT 1
41753: MINUS
41754: PUSH
41755: FOR_TO
41756: IFFALSE 41801
// begin tmp := tmp [ pos [ i ] ] ;
41758: LD_ADDR_VAR 0 6
41762: PUSH
41763: LD_VAR 0 6
41767: PUSH
41768: LD_VAR 0 2
41772: PUSH
41773: LD_VAR 0 5
41777: ARRAY
41778: ARRAY
41779: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41780: LD_ADDR_VAR 0 7
41784: PUSH
41785: LD_VAR 0 7
41789: PUSH
41790: LD_VAR 0 6
41794: PUSH
41795: EMPTY
41796: LIST
41797: ADD
41798: ST_TO_ADDR
// end ;
41799: GO 41755
41801: POP
41802: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41803: LD_ADDR_VAR 0 6
41807: PUSH
41808: LD_VAR 0 6
41812: PPUSH
41813: LD_VAR 0 2
41817: PUSH
41818: LD_VAR 0 2
41822: ARRAY
41823: PPUSH
41824: LD_VAR 0 3
41828: PPUSH
41829: CALL_OW 1
41833: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41834: LD_ADDR_VAR 0 7
41838: PUSH
41839: LD_VAR 0 7
41843: PPUSH
41844: LD_VAR 0 7
41848: PPUSH
41849: LD_VAR 0 6
41853: PPUSH
41854: CALL_OW 1
41858: ST_TO_ADDR
// for i = s_arr downto 2 do
41859: LD_ADDR_VAR 0 5
41863: PUSH
41864: DOUBLE
41865: LD_VAR 0 7
41869: INC
41870: ST_TO_ADDR
41871: LD_INT 2
41873: PUSH
41874: FOR_DOWNTO
41875: IFFALSE 41959
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41877: LD_ADDR_VAR 0 6
41881: PUSH
41882: LD_VAR 0 7
41886: PUSH
41887: LD_VAR 0 5
41891: PUSH
41892: LD_INT 1
41894: MINUS
41895: ARRAY
41896: PPUSH
41897: LD_VAR 0 2
41901: PUSH
41902: LD_VAR 0 5
41906: PUSH
41907: LD_INT 1
41909: MINUS
41910: ARRAY
41911: PPUSH
41912: LD_VAR 0 7
41916: PUSH
41917: LD_VAR 0 5
41921: ARRAY
41922: PPUSH
41923: CALL_OW 1
41927: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41928: LD_ADDR_VAR 0 7
41932: PUSH
41933: LD_VAR 0 7
41937: PPUSH
41938: LD_VAR 0 5
41942: PUSH
41943: LD_INT 1
41945: MINUS
41946: PPUSH
41947: LD_VAR 0 6
41951: PPUSH
41952: CALL_OW 1
41956: ST_TO_ADDR
// end ;
41957: GO 41874
41959: POP
41960: POP
// result := s_arr [ 1 ] ;
41961: LD_ADDR_VAR 0 4
41965: PUSH
41966: LD_VAR 0 7
41970: PUSH
41971: LD_INT 1
41973: ARRAY
41974: ST_TO_ADDR
// end ; end ;
41975: LD_VAR 0 4
41979: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41980: LD_INT 0
41982: PPUSH
41983: PPUSH
// if not list then
41984: LD_VAR 0 1
41988: NOT
41989: IFFALSE 41993
// exit ;
41991: GO 42084
// i := list [ pos1 ] ;
41993: LD_ADDR_VAR 0 5
41997: PUSH
41998: LD_VAR 0 1
42002: PUSH
42003: LD_VAR 0 2
42007: ARRAY
42008: ST_TO_ADDR
// if not i then
42009: LD_VAR 0 5
42013: NOT
42014: IFFALSE 42018
// exit ;
42016: GO 42084
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42018: LD_ADDR_VAR 0 1
42022: PUSH
42023: LD_VAR 0 1
42027: PPUSH
42028: LD_VAR 0 2
42032: PPUSH
42033: LD_VAR 0 1
42037: PUSH
42038: LD_VAR 0 3
42042: ARRAY
42043: PPUSH
42044: CALL_OW 1
42048: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42049: LD_ADDR_VAR 0 1
42053: PUSH
42054: LD_VAR 0 1
42058: PPUSH
42059: LD_VAR 0 3
42063: PPUSH
42064: LD_VAR 0 5
42068: PPUSH
42069: CALL_OW 1
42073: ST_TO_ADDR
// result := list ;
42074: LD_ADDR_VAR 0 4
42078: PUSH
42079: LD_VAR 0 1
42083: ST_TO_ADDR
// end ;
42084: LD_VAR 0 4
42088: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42089: LD_INT 0
42091: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42092: LD_ADDR_VAR 0 5
42096: PUSH
42097: LD_VAR 0 1
42101: PPUSH
42102: CALL_OW 250
42106: PPUSH
42107: LD_VAR 0 1
42111: PPUSH
42112: CALL_OW 251
42116: PPUSH
42117: LD_VAR 0 2
42121: PPUSH
42122: LD_VAR 0 3
42126: PPUSH
42127: LD_VAR 0 4
42131: PPUSH
42132: CALL 42142 0 5
42136: ST_TO_ADDR
// end ;
42137: LD_VAR 0 5
42141: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42142: LD_INT 0
42144: PPUSH
42145: PPUSH
42146: PPUSH
42147: PPUSH
// if not list then
42148: LD_VAR 0 3
42152: NOT
42153: IFFALSE 42157
// exit ;
42155: GO 42545
// result := [ ] ;
42157: LD_ADDR_VAR 0 6
42161: PUSH
42162: EMPTY
42163: ST_TO_ADDR
// for i in list do
42164: LD_ADDR_VAR 0 7
42168: PUSH
42169: LD_VAR 0 3
42173: PUSH
42174: FOR_IN
42175: IFFALSE 42377
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42177: LD_ADDR_VAR 0 9
42181: PUSH
42182: LD_VAR 0 7
42186: PPUSH
42187: LD_VAR 0 1
42191: PPUSH
42192: LD_VAR 0 2
42196: PPUSH
42197: CALL_OW 297
42201: ST_TO_ADDR
// if not result then
42202: LD_VAR 0 6
42206: NOT
42207: IFFALSE 42233
// result := [ [ i , tmp ] ] else
42209: LD_ADDR_VAR 0 6
42213: PUSH
42214: LD_VAR 0 7
42218: PUSH
42219: LD_VAR 0 9
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: EMPTY
42229: LIST
42230: ST_TO_ADDR
42231: GO 42375
// begin if result [ result ] [ 2 ] < tmp then
42233: LD_VAR 0 6
42237: PUSH
42238: LD_VAR 0 6
42242: ARRAY
42243: PUSH
42244: LD_INT 2
42246: ARRAY
42247: PUSH
42248: LD_VAR 0 9
42252: LESS
42253: IFFALSE 42295
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42255: LD_ADDR_VAR 0 6
42259: PUSH
42260: LD_VAR 0 6
42264: PPUSH
42265: LD_VAR 0 6
42269: PUSH
42270: LD_INT 1
42272: PLUS
42273: PPUSH
42274: LD_VAR 0 7
42278: PUSH
42279: LD_VAR 0 9
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PPUSH
42288: CALL_OW 2
42292: ST_TO_ADDR
42293: GO 42375
// for j = 1 to result do
42295: LD_ADDR_VAR 0 8
42299: PUSH
42300: DOUBLE
42301: LD_INT 1
42303: DEC
42304: ST_TO_ADDR
42305: LD_VAR 0 6
42309: PUSH
42310: FOR_TO
42311: IFFALSE 42373
// begin if tmp < result [ j ] [ 2 ] then
42313: LD_VAR 0 9
42317: PUSH
42318: LD_VAR 0 6
42322: PUSH
42323: LD_VAR 0 8
42327: ARRAY
42328: PUSH
42329: LD_INT 2
42331: ARRAY
42332: LESS
42333: IFFALSE 42371
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42335: LD_ADDR_VAR 0 6
42339: PUSH
42340: LD_VAR 0 6
42344: PPUSH
42345: LD_VAR 0 8
42349: PPUSH
42350: LD_VAR 0 7
42354: PUSH
42355: LD_VAR 0 9
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PPUSH
42364: CALL_OW 2
42368: ST_TO_ADDR
// break ;
42369: GO 42373
// end ; end ;
42371: GO 42310
42373: POP
42374: POP
// end ; end ;
42375: GO 42174
42377: POP
42378: POP
// if result and not asc then
42379: LD_VAR 0 6
42383: PUSH
42384: LD_VAR 0 4
42388: NOT
42389: AND
42390: IFFALSE 42465
// begin tmp := result ;
42392: LD_ADDR_VAR 0 9
42396: PUSH
42397: LD_VAR 0 6
42401: ST_TO_ADDR
// for i = tmp downto 1 do
42402: LD_ADDR_VAR 0 7
42406: PUSH
42407: DOUBLE
42408: LD_VAR 0 9
42412: INC
42413: ST_TO_ADDR
42414: LD_INT 1
42416: PUSH
42417: FOR_DOWNTO
42418: IFFALSE 42463
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42420: LD_ADDR_VAR 0 6
42424: PUSH
42425: LD_VAR 0 6
42429: PPUSH
42430: LD_VAR 0 9
42434: PUSH
42435: LD_VAR 0 7
42439: MINUS
42440: PUSH
42441: LD_INT 1
42443: PLUS
42444: PPUSH
42445: LD_VAR 0 9
42449: PUSH
42450: LD_VAR 0 7
42454: ARRAY
42455: PPUSH
42456: CALL_OW 1
42460: ST_TO_ADDR
42461: GO 42417
42463: POP
42464: POP
// end ; tmp := [ ] ;
42465: LD_ADDR_VAR 0 9
42469: PUSH
42470: EMPTY
42471: ST_TO_ADDR
// if mode then
42472: LD_VAR 0 5
42476: IFFALSE 42545
// begin for i = 1 to result do
42478: LD_ADDR_VAR 0 7
42482: PUSH
42483: DOUBLE
42484: LD_INT 1
42486: DEC
42487: ST_TO_ADDR
42488: LD_VAR 0 6
42492: PUSH
42493: FOR_TO
42494: IFFALSE 42533
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42496: LD_ADDR_VAR 0 9
42500: PUSH
42501: LD_VAR 0 9
42505: PPUSH
42506: LD_VAR 0 7
42510: PPUSH
42511: LD_VAR 0 6
42515: PUSH
42516: LD_VAR 0 7
42520: ARRAY
42521: PUSH
42522: LD_INT 1
42524: ARRAY
42525: PPUSH
42526: CALL_OW 1
42530: ST_TO_ADDR
42531: GO 42493
42533: POP
42534: POP
// result := tmp ;
42535: LD_ADDR_VAR 0 6
42539: PUSH
42540: LD_VAR 0 9
42544: ST_TO_ADDR
// end ; end ;
42545: LD_VAR 0 6
42549: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42550: LD_INT 0
42552: PPUSH
42553: PPUSH
42554: PPUSH
42555: PPUSH
42556: PPUSH
42557: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42558: LD_ADDR_VAR 0 5
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: EMPTY
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: ST_TO_ADDR
// if not x or not y then
42580: LD_VAR 0 2
42584: NOT
42585: PUSH
42586: LD_VAR 0 3
42590: NOT
42591: OR
42592: IFFALSE 42596
// exit ;
42594: GO 44248
// if not range then
42596: LD_VAR 0 4
42600: NOT
42601: IFFALSE 42611
// range := 10 ;
42603: LD_ADDR_VAR 0 4
42607: PUSH
42608: LD_INT 10
42610: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42611: LD_ADDR_VAR 0 8
42615: PUSH
42616: LD_INT 81
42618: PUSH
42619: LD_VAR 0 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 92
42630: PUSH
42631: LD_VAR 0 2
42635: PUSH
42636: LD_VAR 0 3
42640: PUSH
42641: LD_VAR 0 4
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 3
42654: PUSH
42655: LD_INT 21
42657: PUSH
42658: LD_INT 3
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: LIST
42673: PPUSH
42674: CALL_OW 69
42678: ST_TO_ADDR
// if not tmp then
42679: LD_VAR 0 8
42683: NOT
42684: IFFALSE 42688
// exit ;
42686: GO 44248
// for i in tmp do
42688: LD_ADDR_VAR 0 6
42692: PUSH
42693: LD_VAR 0 8
42697: PUSH
42698: FOR_IN
42699: IFFALSE 44223
// begin points := [ 0 , 0 , 0 ] ;
42701: LD_ADDR_VAR 0 9
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: LIST
42719: ST_TO_ADDR
// bpoints := 1 ;
42720: LD_ADDR_VAR 0 10
42724: PUSH
42725: LD_INT 1
42727: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42728: LD_VAR 0 6
42732: PPUSH
42733: CALL_OW 247
42737: PUSH
42738: LD_INT 1
42740: DOUBLE
42741: EQUAL
42742: IFTRUE 42746
42744: GO 43324
42746: POP
// begin if GetClass ( i ) = 1 then
42747: LD_VAR 0 6
42751: PPUSH
42752: CALL_OW 257
42756: PUSH
42757: LD_INT 1
42759: EQUAL
42760: IFFALSE 42781
// points := [ 10 , 5 , 3 ] ;
42762: LD_ADDR_VAR 0 9
42766: PUSH
42767: LD_INT 10
42769: PUSH
42770: LD_INT 5
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: LIST
42780: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42781: LD_VAR 0 6
42785: PPUSH
42786: CALL_OW 257
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: LD_INT 3
42796: PUSH
42797: LD_INT 4
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: LIST
42804: IN
42805: IFFALSE 42826
// points := [ 3 , 2 , 1 ] ;
42807: LD_ADDR_VAR 0 9
42811: PUSH
42812: LD_INT 3
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42826: LD_VAR 0 6
42830: PPUSH
42831: CALL_OW 257
42835: PUSH
42836: LD_INT 5
42838: EQUAL
42839: IFFALSE 42860
// points := [ 130 , 5 , 2 ] ;
42841: LD_ADDR_VAR 0 9
42845: PUSH
42846: LD_INT 130
42848: PUSH
42849: LD_INT 5
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42860: LD_VAR 0 6
42864: PPUSH
42865: CALL_OW 257
42869: PUSH
42870: LD_INT 8
42872: EQUAL
42873: IFFALSE 42894
// points := [ 35 , 35 , 30 ] ;
42875: LD_ADDR_VAR 0 9
42879: PUSH
42880: LD_INT 35
42882: PUSH
42883: LD_INT 35
42885: PUSH
42886: LD_INT 30
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42894: LD_VAR 0 6
42898: PPUSH
42899: CALL_OW 257
42903: PUSH
42904: LD_INT 9
42906: EQUAL
42907: IFFALSE 42928
// points := [ 20 , 55 , 40 ] ;
42909: LD_ADDR_VAR 0 9
42913: PUSH
42914: LD_INT 20
42916: PUSH
42917: LD_INT 55
42919: PUSH
42920: LD_INT 40
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42928: LD_VAR 0 6
42932: PPUSH
42933: CALL_OW 257
42937: PUSH
42938: LD_INT 12
42940: PUSH
42941: LD_INT 16
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: IN
42948: IFFALSE 42969
// points := [ 5 , 3 , 2 ] ;
42950: LD_ADDR_VAR 0 9
42954: PUSH
42955: LD_INT 5
42957: PUSH
42958: LD_INT 3
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42969: LD_VAR 0 6
42973: PPUSH
42974: CALL_OW 257
42978: PUSH
42979: LD_INT 17
42981: EQUAL
42982: IFFALSE 43003
// points := [ 100 , 50 , 75 ] ;
42984: LD_ADDR_VAR 0 9
42988: PUSH
42989: LD_INT 100
42991: PUSH
42992: LD_INT 50
42994: PUSH
42995: LD_INT 75
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43003: LD_VAR 0 6
43007: PPUSH
43008: CALL_OW 257
43012: PUSH
43013: LD_INT 15
43015: EQUAL
43016: IFFALSE 43037
// points := [ 10 , 5 , 3 ] ;
43018: LD_ADDR_VAR 0 9
43022: PUSH
43023: LD_INT 10
43025: PUSH
43026: LD_INT 5
43028: PUSH
43029: LD_INT 3
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43037: LD_VAR 0 6
43041: PPUSH
43042: CALL_OW 257
43046: PUSH
43047: LD_INT 14
43049: EQUAL
43050: IFFALSE 43071
// points := [ 10 , 0 , 0 ] ;
43052: LD_ADDR_VAR 0 9
43056: PUSH
43057: LD_INT 10
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: LIST
43070: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43071: LD_VAR 0 6
43075: PPUSH
43076: CALL_OW 257
43080: PUSH
43081: LD_INT 11
43083: EQUAL
43084: IFFALSE 43105
// points := [ 30 , 10 , 5 ] ;
43086: LD_ADDR_VAR 0 9
43090: PUSH
43091: LD_INT 30
43093: PUSH
43094: LD_INT 10
43096: PUSH
43097: LD_INT 5
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43105: LD_VAR 0 1
43109: PPUSH
43110: LD_INT 5
43112: PPUSH
43113: CALL_OW 321
43117: PUSH
43118: LD_INT 2
43120: EQUAL
43121: IFFALSE 43138
// bpoints := bpoints * 1.8 ;
43123: LD_ADDR_VAR 0 10
43127: PUSH
43128: LD_VAR 0 10
43132: PUSH
43133: LD_REAL  1.80000000000000E+0000
43136: MUL
43137: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43138: LD_VAR 0 6
43142: PPUSH
43143: CALL_OW 257
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: LD_INT 3
43156: PUSH
43157: LD_INT 4
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: IN
43166: PUSH
43167: LD_VAR 0 1
43171: PPUSH
43172: LD_INT 51
43174: PPUSH
43175: CALL_OW 321
43179: PUSH
43180: LD_INT 2
43182: EQUAL
43183: AND
43184: IFFALSE 43201
// bpoints := bpoints * 1.2 ;
43186: LD_ADDR_VAR 0 10
43190: PUSH
43191: LD_VAR 0 10
43195: PUSH
43196: LD_REAL  1.20000000000000E+0000
43199: MUL
43200: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43201: LD_VAR 0 6
43205: PPUSH
43206: CALL_OW 257
43210: PUSH
43211: LD_INT 5
43213: PUSH
43214: LD_INT 7
43216: PUSH
43217: LD_INT 9
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: IN
43225: PUSH
43226: LD_VAR 0 1
43230: PPUSH
43231: LD_INT 52
43233: PPUSH
43234: CALL_OW 321
43238: PUSH
43239: LD_INT 2
43241: EQUAL
43242: AND
43243: IFFALSE 43260
// bpoints := bpoints * 1.5 ;
43245: LD_ADDR_VAR 0 10
43249: PUSH
43250: LD_VAR 0 10
43254: PUSH
43255: LD_REAL  1.50000000000000E+0000
43258: MUL
43259: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43260: LD_VAR 0 1
43264: PPUSH
43265: LD_INT 66
43267: PPUSH
43268: CALL_OW 321
43272: PUSH
43273: LD_INT 2
43275: EQUAL
43276: IFFALSE 43293
// bpoints := bpoints * 1.1 ;
43278: LD_ADDR_VAR 0 10
43282: PUSH
43283: LD_VAR 0 10
43287: PUSH
43288: LD_REAL  1.10000000000000E+0000
43291: MUL
43292: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43293: LD_ADDR_VAR 0 10
43297: PUSH
43298: LD_VAR 0 10
43302: PUSH
43303: LD_VAR 0 6
43307: PPUSH
43308: LD_INT 1
43310: PPUSH
43311: CALL_OW 259
43315: PUSH
43316: LD_REAL  1.15000000000000E+0000
43319: MUL
43320: MUL
43321: ST_TO_ADDR
// end ; unit_vehicle :
43322: GO 44152
43324: LD_INT 2
43326: DOUBLE
43327: EQUAL
43328: IFTRUE 43332
43330: GO 44140
43332: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43333: LD_VAR 0 6
43337: PPUSH
43338: CALL_OW 264
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 42
43348: PUSH
43349: LD_INT 24
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: LIST
43356: IN
43357: IFFALSE 43378
// points := [ 25 , 5 , 3 ] ;
43359: LD_ADDR_VAR 0 9
43363: PUSH
43364: LD_INT 25
43366: PUSH
43367: LD_INT 5
43369: PUSH
43370: LD_INT 3
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43378: LD_VAR 0 6
43382: PPUSH
43383: CALL_OW 264
43387: PUSH
43388: LD_INT 4
43390: PUSH
43391: LD_INT 43
43393: PUSH
43394: LD_INT 25
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: LIST
43401: IN
43402: IFFALSE 43423
// points := [ 40 , 15 , 5 ] ;
43404: LD_ADDR_VAR 0 9
43408: PUSH
43409: LD_INT 40
43411: PUSH
43412: LD_INT 15
43414: PUSH
43415: LD_INT 5
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43423: LD_VAR 0 6
43427: PPUSH
43428: CALL_OW 264
43432: PUSH
43433: LD_INT 3
43435: PUSH
43436: LD_INT 23
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: IN
43443: IFFALSE 43464
// points := [ 7 , 25 , 8 ] ;
43445: LD_ADDR_VAR 0 9
43449: PUSH
43450: LD_INT 7
43452: PUSH
43453: LD_INT 25
43455: PUSH
43456: LD_INT 8
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: LIST
43463: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43464: LD_VAR 0 6
43468: PPUSH
43469: CALL_OW 264
43473: PUSH
43474: LD_INT 5
43476: PUSH
43477: LD_INT 27
43479: PUSH
43480: LD_INT 44
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: LIST
43487: IN
43488: IFFALSE 43509
// points := [ 14 , 50 , 16 ] ;
43490: LD_ADDR_VAR 0 9
43494: PUSH
43495: LD_INT 14
43497: PUSH
43498: LD_INT 50
43500: PUSH
43501: LD_INT 16
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: LIST
43508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43509: LD_VAR 0 6
43513: PPUSH
43514: CALL_OW 264
43518: PUSH
43519: LD_INT 6
43521: PUSH
43522: LD_INT 46
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: IN
43529: IFFALSE 43550
// points := [ 32 , 120 , 70 ] ;
43531: LD_ADDR_VAR 0 9
43535: PUSH
43536: LD_INT 32
43538: PUSH
43539: LD_INT 120
43541: PUSH
43542: LD_INT 70
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: LIST
43549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43550: LD_VAR 0 6
43554: PPUSH
43555: CALL_OW 264
43559: PUSH
43560: LD_INT 7
43562: PUSH
43563: LD_INT 28
43565: PUSH
43566: LD_INT 45
43568: PUSH
43569: LD_EXP 53
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: IN
43580: IFFALSE 43601
// points := [ 35 , 20 , 45 ] ;
43582: LD_ADDR_VAR 0 9
43586: PUSH
43587: LD_INT 35
43589: PUSH
43590: LD_INT 20
43592: PUSH
43593: LD_INT 45
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: LIST
43600: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43601: LD_VAR 0 6
43605: PPUSH
43606: CALL_OW 264
43610: PUSH
43611: LD_INT 47
43613: PUSH
43614: EMPTY
43615: LIST
43616: IN
43617: IFFALSE 43638
// points := [ 67 , 45 , 75 ] ;
43619: LD_ADDR_VAR 0 9
43623: PUSH
43624: LD_INT 67
43626: PUSH
43627: LD_INT 45
43629: PUSH
43630: LD_INT 75
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: LIST
43637: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43638: LD_VAR 0 6
43642: PPUSH
43643: CALL_OW 264
43647: PUSH
43648: LD_INT 26
43650: PUSH
43651: EMPTY
43652: LIST
43653: IN
43654: IFFALSE 43675
// points := [ 120 , 30 , 80 ] ;
43656: LD_ADDR_VAR 0 9
43660: PUSH
43661: LD_INT 120
43663: PUSH
43664: LD_INT 30
43666: PUSH
43667: LD_INT 80
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: LIST
43674: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43675: LD_VAR 0 6
43679: PPUSH
43680: CALL_OW 264
43684: PUSH
43685: LD_INT 22
43687: PUSH
43688: EMPTY
43689: LIST
43690: IN
43691: IFFALSE 43712
// points := [ 40 , 1 , 1 ] ;
43693: LD_ADDR_VAR 0 9
43697: PUSH
43698: LD_INT 40
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43712: LD_VAR 0 6
43716: PPUSH
43717: CALL_OW 264
43721: PUSH
43722: LD_INT 29
43724: PUSH
43725: EMPTY
43726: LIST
43727: IN
43728: IFFALSE 43749
// points := [ 70 , 200 , 400 ] ;
43730: LD_ADDR_VAR 0 9
43734: PUSH
43735: LD_INT 70
43737: PUSH
43738: LD_INT 200
43740: PUSH
43741: LD_INT 400
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43749: LD_VAR 0 6
43753: PPUSH
43754: CALL_OW 264
43758: PUSH
43759: LD_INT 14
43761: PUSH
43762: LD_INT 53
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: IN
43769: IFFALSE 43790
// points := [ 40 , 10 , 20 ] ;
43771: LD_ADDR_VAR 0 9
43775: PUSH
43776: LD_INT 40
43778: PUSH
43779: LD_INT 10
43781: PUSH
43782: LD_INT 20
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: LIST
43789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43790: LD_VAR 0 6
43794: PPUSH
43795: CALL_OW 264
43799: PUSH
43800: LD_INT 9
43802: PUSH
43803: EMPTY
43804: LIST
43805: IN
43806: IFFALSE 43827
// points := [ 5 , 70 , 20 ] ;
43808: LD_ADDR_VAR 0 9
43812: PUSH
43813: LD_INT 5
43815: PUSH
43816: LD_INT 70
43818: PUSH
43819: LD_INT 20
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: LIST
43826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43827: LD_VAR 0 6
43831: PPUSH
43832: CALL_OW 264
43836: PUSH
43837: LD_INT 10
43839: PUSH
43840: EMPTY
43841: LIST
43842: IN
43843: IFFALSE 43864
// points := [ 35 , 110 , 70 ] ;
43845: LD_ADDR_VAR 0 9
43849: PUSH
43850: LD_INT 35
43852: PUSH
43853: LD_INT 110
43855: PUSH
43856: LD_INT 70
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: LIST
43863: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43864: LD_VAR 0 6
43868: PPUSH
43869: CALL_OW 265
43873: PUSH
43874: LD_INT 25
43876: EQUAL
43877: IFFALSE 43898
// points := [ 80 , 65 , 100 ] ;
43879: LD_ADDR_VAR 0 9
43883: PUSH
43884: LD_INT 80
43886: PUSH
43887: LD_INT 65
43889: PUSH
43890: LD_INT 100
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: LIST
43897: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43898: LD_VAR 0 6
43902: PPUSH
43903: CALL_OW 263
43907: PUSH
43908: LD_INT 1
43910: EQUAL
43911: IFFALSE 43946
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43913: LD_ADDR_VAR 0 10
43917: PUSH
43918: LD_VAR 0 10
43922: PUSH
43923: LD_VAR 0 6
43927: PPUSH
43928: CALL_OW 311
43932: PPUSH
43933: LD_INT 3
43935: PPUSH
43936: CALL_OW 259
43940: PUSH
43941: LD_INT 4
43943: MUL
43944: MUL
43945: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43946: LD_VAR 0 6
43950: PPUSH
43951: CALL_OW 263
43955: PUSH
43956: LD_INT 2
43958: EQUAL
43959: IFFALSE 44010
// begin j := IsControledBy ( i ) ;
43961: LD_ADDR_VAR 0 7
43965: PUSH
43966: LD_VAR 0 6
43970: PPUSH
43971: CALL_OW 312
43975: ST_TO_ADDR
// if j then
43976: LD_VAR 0 7
43980: IFFALSE 44010
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43982: LD_ADDR_VAR 0 10
43986: PUSH
43987: LD_VAR 0 10
43991: PUSH
43992: LD_VAR 0 7
43996: PPUSH
43997: LD_INT 3
43999: PPUSH
44000: CALL_OW 259
44004: PUSH
44005: LD_INT 3
44007: MUL
44008: MUL
44009: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44010: LD_VAR 0 6
44014: PPUSH
44015: CALL_OW 264
44019: PUSH
44020: LD_INT 5
44022: PUSH
44023: LD_INT 6
44025: PUSH
44026: LD_INT 46
44028: PUSH
44029: LD_INT 44
44031: PUSH
44032: LD_INT 47
44034: PUSH
44035: LD_INT 45
44037: PUSH
44038: LD_INT 28
44040: PUSH
44041: LD_INT 7
44043: PUSH
44044: LD_INT 27
44046: PUSH
44047: LD_INT 29
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: IN
44062: PUSH
44063: LD_VAR 0 1
44067: PPUSH
44068: LD_INT 52
44070: PPUSH
44071: CALL_OW 321
44075: PUSH
44076: LD_INT 2
44078: EQUAL
44079: AND
44080: IFFALSE 44097
// bpoints := bpoints * 1.2 ;
44082: LD_ADDR_VAR 0 10
44086: PUSH
44087: LD_VAR 0 10
44091: PUSH
44092: LD_REAL  1.20000000000000E+0000
44095: MUL
44096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44097: LD_VAR 0 6
44101: PPUSH
44102: CALL_OW 264
44106: PUSH
44107: LD_INT 6
44109: PUSH
44110: LD_INT 46
44112: PUSH
44113: LD_INT 47
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: IN
44121: IFFALSE 44138
// bpoints := bpoints * 1.2 ;
44123: LD_ADDR_VAR 0 10
44127: PUSH
44128: LD_VAR 0 10
44132: PUSH
44133: LD_REAL  1.20000000000000E+0000
44136: MUL
44137: ST_TO_ADDR
// end ; unit_building :
44138: GO 44152
44140: LD_INT 3
44142: DOUBLE
44143: EQUAL
44144: IFTRUE 44148
44146: GO 44151
44148: POP
// ; end ;
44149: GO 44152
44151: POP
// for j = 1 to 3 do
44152: LD_ADDR_VAR 0 7
44156: PUSH
44157: DOUBLE
44158: LD_INT 1
44160: DEC
44161: ST_TO_ADDR
44162: LD_INT 3
44164: PUSH
44165: FOR_TO
44166: IFFALSE 44219
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44168: LD_ADDR_VAR 0 5
44172: PUSH
44173: LD_VAR 0 5
44177: PPUSH
44178: LD_VAR 0 7
44182: PPUSH
44183: LD_VAR 0 5
44187: PUSH
44188: LD_VAR 0 7
44192: ARRAY
44193: PUSH
44194: LD_VAR 0 9
44198: PUSH
44199: LD_VAR 0 7
44203: ARRAY
44204: PUSH
44205: LD_VAR 0 10
44209: MUL
44210: PLUS
44211: PPUSH
44212: CALL_OW 1
44216: ST_TO_ADDR
44217: GO 44165
44219: POP
44220: POP
// end ;
44221: GO 42698
44223: POP
44224: POP
// result := Replace ( result , 4 , tmp ) ;
44225: LD_ADDR_VAR 0 5
44229: PUSH
44230: LD_VAR 0 5
44234: PPUSH
44235: LD_INT 4
44237: PPUSH
44238: LD_VAR 0 8
44242: PPUSH
44243: CALL_OW 1
44247: ST_TO_ADDR
// end ;
44248: LD_VAR 0 5
44252: RET
// export function DangerAtRange ( unit , range ) ; begin
44253: LD_INT 0
44255: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44256: LD_ADDR_VAR 0 3
44260: PUSH
44261: LD_VAR 0 1
44265: PPUSH
44266: CALL_OW 255
44270: PPUSH
44271: LD_VAR 0 1
44275: PPUSH
44276: CALL_OW 250
44280: PPUSH
44281: LD_VAR 0 1
44285: PPUSH
44286: CALL_OW 251
44290: PPUSH
44291: LD_VAR 0 2
44295: PPUSH
44296: CALL 42550 0 4
44300: ST_TO_ADDR
// end ;
44301: LD_VAR 0 3
44305: RET
// export function DangerInArea ( side , area ) ; begin
44306: LD_INT 0
44308: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44309: LD_ADDR_VAR 0 3
44313: PUSH
44314: LD_VAR 0 2
44318: PPUSH
44319: LD_INT 81
44321: PUSH
44322: LD_VAR 0 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PPUSH
44331: CALL_OW 70
44335: ST_TO_ADDR
// end ;
44336: LD_VAR 0 3
44340: RET
// export function IsExtension ( b ) ; begin
44341: LD_INT 0
44343: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44344: LD_ADDR_VAR 0 2
44348: PUSH
44349: LD_VAR 0 1
44353: PUSH
44354: LD_INT 23
44356: PUSH
44357: LD_INT 20
44359: PUSH
44360: LD_INT 22
44362: PUSH
44363: LD_INT 17
44365: PUSH
44366: LD_INT 24
44368: PUSH
44369: LD_INT 21
44371: PUSH
44372: LD_INT 19
44374: PUSH
44375: LD_INT 16
44377: PUSH
44378: LD_INT 25
44380: PUSH
44381: LD_INT 18
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: IN
44396: ST_TO_ADDR
// end ;
44397: LD_VAR 0 2
44401: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44402: LD_INT 0
44404: PPUSH
44405: PPUSH
44406: PPUSH
// result := [ ] ;
44407: LD_ADDR_VAR 0 4
44411: PUSH
44412: EMPTY
44413: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44414: LD_ADDR_VAR 0 5
44418: PUSH
44419: LD_VAR 0 2
44423: PPUSH
44424: LD_INT 21
44426: PUSH
44427: LD_INT 3
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PPUSH
44434: CALL_OW 70
44438: ST_TO_ADDR
// if not tmp then
44439: LD_VAR 0 5
44443: NOT
44444: IFFALSE 44448
// exit ;
44446: GO 44512
// if checkLink then
44448: LD_VAR 0 3
44452: IFFALSE 44502
// begin for i in tmp do
44454: LD_ADDR_VAR 0 6
44458: PUSH
44459: LD_VAR 0 5
44463: PUSH
44464: FOR_IN
44465: IFFALSE 44500
// if GetBase ( i ) <> base then
44467: LD_VAR 0 6
44471: PPUSH
44472: CALL_OW 274
44476: PUSH
44477: LD_VAR 0 1
44481: NONEQUAL
44482: IFFALSE 44498
// ComLinkToBase ( base , i ) ;
44484: LD_VAR 0 1
44488: PPUSH
44489: LD_VAR 0 6
44493: PPUSH
44494: CALL_OW 169
44498: GO 44464
44500: POP
44501: POP
// end ; result := tmp ;
44502: LD_ADDR_VAR 0 4
44506: PUSH
44507: LD_VAR 0 5
44511: ST_TO_ADDR
// end ;
44512: LD_VAR 0 4
44516: RET
// export function ComComplete ( units , b ) ; var i ; begin
44517: LD_INT 0
44519: PPUSH
44520: PPUSH
// if not units then
44521: LD_VAR 0 1
44525: NOT
44526: IFFALSE 44530
// exit ;
44528: GO 44620
// for i in units do
44530: LD_ADDR_VAR 0 4
44534: PUSH
44535: LD_VAR 0 1
44539: PUSH
44540: FOR_IN
44541: IFFALSE 44618
// if BuildingStatus ( b ) = bs_build then
44543: LD_VAR 0 2
44547: PPUSH
44548: CALL_OW 461
44552: PUSH
44553: LD_INT 1
44555: EQUAL
44556: IFFALSE 44616
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44558: LD_VAR 0 4
44562: PPUSH
44563: LD_STRING h
44565: PUSH
44566: LD_VAR 0 2
44570: PPUSH
44571: CALL_OW 250
44575: PUSH
44576: LD_VAR 0 2
44580: PPUSH
44581: CALL_OW 251
44585: PUSH
44586: LD_VAR 0 2
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: PUSH
44609: EMPTY
44610: LIST
44611: PPUSH
44612: CALL_OW 446
44616: GO 44540
44618: POP
44619: POP
// end ;
44620: LD_VAR 0 3
44624: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44625: LD_INT 0
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44633: LD_VAR 0 1
44637: NOT
44638: PUSH
44639: LD_VAR 0 1
44643: PPUSH
44644: CALL_OW 263
44648: PUSH
44649: LD_INT 2
44651: NONEQUAL
44652: OR
44653: IFFALSE 44657
// exit ;
44655: GO 44973
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44657: LD_ADDR_VAR 0 6
44661: PUSH
44662: LD_INT 22
44664: PUSH
44665: LD_VAR 0 1
44669: PPUSH
44670: CALL_OW 255
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 30
44684: PUSH
44685: LD_INT 36
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 34
44694: PUSH
44695: LD_INT 31
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: LIST
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PPUSH
44711: CALL_OW 69
44715: ST_TO_ADDR
// if not tmp then
44716: LD_VAR 0 6
44720: NOT
44721: IFFALSE 44725
// exit ;
44723: GO 44973
// result := [ ] ;
44725: LD_ADDR_VAR 0 2
44729: PUSH
44730: EMPTY
44731: ST_TO_ADDR
// for i in tmp do
44732: LD_ADDR_VAR 0 3
44736: PUSH
44737: LD_VAR 0 6
44741: PUSH
44742: FOR_IN
44743: IFFALSE 44814
// begin t := UnitsInside ( i ) ;
44745: LD_ADDR_VAR 0 4
44749: PUSH
44750: LD_VAR 0 3
44754: PPUSH
44755: CALL_OW 313
44759: ST_TO_ADDR
// if t then
44760: LD_VAR 0 4
44764: IFFALSE 44812
// for j in t do
44766: LD_ADDR_VAR 0 7
44770: PUSH
44771: LD_VAR 0 4
44775: PUSH
44776: FOR_IN
44777: IFFALSE 44810
// result := Replace ( result , result + 1 , j ) ;
44779: LD_ADDR_VAR 0 2
44783: PUSH
44784: LD_VAR 0 2
44788: PPUSH
44789: LD_VAR 0 2
44793: PUSH
44794: LD_INT 1
44796: PLUS
44797: PPUSH
44798: LD_VAR 0 7
44802: PPUSH
44803: CALL_OW 1
44807: ST_TO_ADDR
44808: GO 44776
44810: POP
44811: POP
// end ;
44812: GO 44742
44814: POP
44815: POP
// if not result then
44816: LD_VAR 0 2
44820: NOT
44821: IFFALSE 44825
// exit ;
44823: GO 44973
// mech := result [ 1 ] ;
44825: LD_ADDR_VAR 0 5
44829: PUSH
44830: LD_VAR 0 2
44834: PUSH
44835: LD_INT 1
44837: ARRAY
44838: ST_TO_ADDR
// if result > 1 then
44839: LD_VAR 0 2
44843: PUSH
44844: LD_INT 1
44846: GREATER
44847: IFFALSE 44959
// begin for i = 2 to result do
44849: LD_ADDR_VAR 0 3
44853: PUSH
44854: DOUBLE
44855: LD_INT 2
44857: DEC
44858: ST_TO_ADDR
44859: LD_VAR 0 2
44863: PUSH
44864: FOR_TO
44865: IFFALSE 44957
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44867: LD_ADDR_VAR 0 4
44871: PUSH
44872: LD_VAR 0 2
44876: PUSH
44877: LD_VAR 0 3
44881: ARRAY
44882: PPUSH
44883: LD_INT 3
44885: PPUSH
44886: CALL_OW 259
44890: PUSH
44891: LD_VAR 0 2
44895: PUSH
44896: LD_VAR 0 3
44900: ARRAY
44901: PPUSH
44902: CALL_OW 432
44906: MINUS
44907: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44908: LD_VAR 0 4
44912: PUSH
44913: LD_VAR 0 5
44917: PPUSH
44918: LD_INT 3
44920: PPUSH
44921: CALL_OW 259
44925: PUSH
44926: LD_VAR 0 5
44930: PPUSH
44931: CALL_OW 432
44935: MINUS
44936: GREATEREQUAL
44937: IFFALSE 44955
// mech := result [ i ] ;
44939: LD_ADDR_VAR 0 5
44943: PUSH
44944: LD_VAR 0 2
44948: PUSH
44949: LD_VAR 0 3
44953: ARRAY
44954: ST_TO_ADDR
// end ;
44955: GO 44864
44957: POP
44958: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44959: LD_VAR 0 1
44963: PPUSH
44964: LD_VAR 0 5
44968: PPUSH
44969: CALL_OW 135
// end ;
44973: LD_VAR 0 2
44977: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44978: LD_INT 0
44980: PPUSH
44981: PPUSH
44982: PPUSH
44983: PPUSH
44984: PPUSH
44985: PPUSH
44986: PPUSH
44987: PPUSH
44988: PPUSH
44989: PPUSH
44990: PPUSH
44991: PPUSH
44992: PPUSH
// result := [ ] ;
44993: LD_ADDR_VAR 0 7
44997: PUSH
44998: EMPTY
44999: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45000: LD_VAR 0 1
45004: PPUSH
45005: CALL_OW 266
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: IN
45020: NOT
45021: IFFALSE 45025
// exit ;
45023: GO 46659
// if name then
45025: LD_VAR 0 3
45029: IFFALSE 45045
// SetBName ( base_dep , name ) ;
45031: LD_VAR 0 1
45035: PPUSH
45036: LD_VAR 0 3
45040: PPUSH
45041: CALL_OW 500
// base := GetBase ( base_dep ) ;
45045: LD_ADDR_VAR 0 15
45049: PUSH
45050: LD_VAR 0 1
45054: PPUSH
45055: CALL_OW 274
45059: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45060: LD_ADDR_VAR 0 16
45064: PUSH
45065: LD_VAR 0 1
45069: PPUSH
45070: CALL_OW 255
45074: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45075: LD_ADDR_VAR 0 17
45079: PUSH
45080: LD_VAR 0 1
45084: PPUSH
45085: CALL_OW 248
45089: ST_TO_ADDR
// if sources then
45090: LD_VAR 0 5
45094: IFFALSE 45141
// for i = 1 to 3 do
45096: LD_ADDR_VAR 0 8
45100: PUSH
45101: DOUBLE
45102: LD_INT 1
45104: DEC
45105: ST_TO_ADDR
45106: LD_INT 3
45108: PUSH
45109: FOR_TO
45110: IFFALSE 45139
// AddResourceType ( base , i , sources [ i ] ) ;
45112: LD_VAR 0 15
45116: PPUSH
45117: LD_VAR 0 8
45121: PPUSH
45122: LD_VAR 0 5
45126: PUSH
45127: LD_VAR 0 8
45131: ARRAY
45132: PPUSH
45133: CALL_OW 276
45137: GO 45109
45139: POP
45140: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45141: LD_ADDR_VAR 0 18
45145: PUSH
45146: LD_VAR 0 15
45150: PPUSH
45151: LD_VAR 0 2
45155: PPUSH
45156: LD_INT 1
45158: PPUSH
45159: CALL 44402 0 3
45163: ST_TO_ADDR
// InitHc ;
45164: CALL_OW 19
// InitUc ;
45168: CALL_OW 18
// uc_side := side ;
45172: LD_ADDR_OWVAR 20
45176: PUSH
45177: LD_VAR 0 16
45181: ST_TO_ADDR
// uc_nation := nation ;
45182: LD_ADDR_OWVAR 21
45186: PUSH
45187: LD_VAR 0 17
45191: ST_TO_ADDR
// if buildings then
45192: LD_VAR 0 18
45196: IFFALSE 46518
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45198: LD_ADDR_VAR 0 19
45202: PUSH
45203: LD_VAR 0 18
45207: PPUSH
45208: LD_INT 2
45210: PUSH
45211: LD_INT 30
45213: PUSH
45214: LD_INT 29
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 30
45223: PUSH
45224: LD_INT 30
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: LIST
45235: PPUSH
45236: CALL_OW 72
45240: ST_TO_ADDR
// if tmp then
45241: LD_VAR 0 19
45245: IFFALSE 45293
// for i in tmp do
45247: LD_ADDR_VAR 0 8
45251: PUSH
45252: LD_VAR 0 19
45256: PUSH
45257: FOR_IN
45258: IFFALSE 45291
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45260: LD_VAR 0 8
45264: PPUSH
45265: CALL_OW 250
45269: PPUSH
45270: LD_VAR 0 8
45274: PPUSH
45275: CALL_OW 251
45279: PPUSH
45280: LD_VAR 0 16
45284: PPUSH
45285: CALL_OW 441
45289: GO 45257
45291: POP
45292: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45293: LD_VAR 0 18
45297: PPUSH
45298: LD_INT 2
45300: PUSH
45301: LD_INT 30
45303: PUSH
45304: LD_INT 32
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 30
45313: PUSH
45314: LD_INT 33
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: PPUSH
45326: CALL_OW 72
45330: IFFALSE 45418
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45332: LD_ADDR_VAR 0 8
45336: PUSH
45337: LD_VAR 0 18
45341: PPUSH
45342: LD_INT 2
45344: PUSH
45345: LD_INT 30
45347: PUSH
45348: LD_INT 32
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 30
45357: PUSH
45358: LD_INT 33
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: LIST
45369: PPUSH
45370: CALL_OW 72
45374: PUSH
45375: FOR_IN
45376: IFFALSE 45416
// begin if not GetBWeapon ( i ) then
45378: LD_VAR 0 8
45382: PPUSH
45383: CALL_OW 269
45387: NOT
45388: IFFALSE 45414
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45390: LD_VAR 0 8
45394: PPUSH
45395: LD_VAR 0 8
45399: PPUSH
45400: LD_VAR 0 2
45404: PPUSH
45405: CALL 46664 0 2
45409: PPUSH
45410: CALL_OW 431
// end ;
45414: GO 45375
45416: POP
45417: POP
// end ; for i = 1 to personel do
45418: LD_ADDR_VAR 0 8
45422: PUSH
45423: DOUBLE
45424: LD_INT 1
45426: DEC
45427: ST_TO_ADDR
45428: LD_VAR 0 6
45432: PUSH
45433: FOR_TO
45434: IFFALSE 46498
// begin if i > 4 then
45436: LD_VAR 0 8
45440: PUSH
45441: LD_INT 4
45443: GREATER
45444: IFFALSE 45448
// break ;
45446: GO 46498
// case i of 1 :
45448: LD_VAR 0 8
45452: PUSH
45453: LD_INT 1
45455: DOUBLE
45456: EQUAL
45457: IFTRUE 45461
45459: GO 45541
45461: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45462: LD_ADDR_VAR 0 12
45466: PUSH
45467: LD_VAR 0 18
45471: PPUSH
45472: LD_INT 22
45474: PUSH
45475: LD_VAR 0 16
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 58
45486: PUSH
45487: EMPTY
45488: LIST
45489: PUSH
45490: LD_INT 2
45492: PUSH
45493: LD_INT 30
45495: PUSH
45496: LD_INT 32
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 30
45505: PUSH
45506: LD_INT 4
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 30
45515: PUSH
45516: LD_INT 5
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: LIST
45533: PPUSH
45534: CALL_OW 72
45538: ST_TO_ADDR
45539: GO 45763
45541: LD_INT 2
45543: DOUBLE
45544: EQUAL
45545: IFTRUE 45549
45547: GO 45611
45549: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45550: LD_ADDR_VAR 0 12
45554: PUSH
45555: LD_VAR 0 18
45559: PPUSH
45560: LD_INT 22
45562: PUSH
45563: LD_VAR 0 16
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: LD_INT 30
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 30
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: LIST
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PPUSH
45604: CALL_OW 72
45608: ST_TO_ADDR
45609: GO 45763
45611: LD_INT 3
45613: DOUBLE
45614: EQUAL
45615: IFTRUE 45619
45617: GO 45681
45619: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45620: LD_ADDR_VAR 0 12
45624: PUSH
45625: LD_VAR 0 18
45629: PPUSH
45630: LD_INT 22
45632: PUSH
45633: LD_VAR 0 16
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 30
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 30
45657: PUSH
45658: LD_INT 3
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: LIST
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PPUSH
45674: CALL_OW 72
45678: ST_TO_ADDR
45679: GO 45763
45681: LD_INT 4
45683: DOUBLE
45684: EQUAL
45685: IFTRUE 45689
45687: GO 45762
45689: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45690: LD_ADDR_VAR 0 12
45694: PUSH
45695: LD_VAR 0 18
45699: PPUSH
45700: LD_INT 22
45702: PUSH
45703: LD_VAR 0 16
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: LD_INT 30
45717: PUSH
45718: LD_INT 6
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 30
45727: PUSH
45728: LD_INT 7
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 30
45737: PUSH
45738: LD_INT 8
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PPUSH
45755: CALL_OW 72
45759: ST_TO_ADDR
45760: GO 45763
45762: POP
// if i = 1 then
45763: LD_VAR 0 8
45767: PUSH
45768: LD_INT 1
45770: EQUAL
45771: IFFALSE 45882
// begin tmp := [ ] ;
45773: LD_ADDR_VAR 0 19
45777: PUSH
45778: EMPTY
45779: ST_TO_ADDR
// for j in f do
45780: LD_ADDR_VAR 0 9
45784: PUSH
45785: LD_VAR 0 12
45789: PUSH
45790: FOR_IN
45791: IFFALSE 45864
// if GetBType ( j ) = b_bunker then
45793: LD_VAR 0 9
45797: PPUSH
45798: CALL_OW 266
45802: PUSH
45803: LD_INT 32
45805: EQUAL
45806: IFFALSE 45833
// tmp := Insert ( tmp , 1 , j ) else
45808: LD_ADDR_VAR 0 19
45812: PUSH
45813: LD_VAR 0 19
45817: PPUSH
45818: LD_INT 1
45820: PPUSH
45821: LD_VAR 0 9
45825: PPUSH
45826: CALL_OW 2
45830: ST_TO_ADDR
45831: GO 45862
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45833: LD_ADDR_VAR 0 19
45837: PUSH
45838: LD_VAR 0 19
45842: PPUSH
45843: LD_VAR 0 19
45847: PUSH
45848: LD_INT 1
45850: PLUS
45851: PPUSH
45852: LD_VAR 0 9
45856: PPUSH
45857: CALL_OW 2
45861: ST_TO_ADDR
45862: GO 45790
45864: POP
45865: POP
// if tmp then
45866: LD_VAR 0 19
45870: IFFALSE 45882
// f := tmp ;
45872: LD_ADDR_VAR 0 12
45876: PUSH
45877: LD_VAR 0 19
45881: ST_TO_ADDR
// end ; x := personel [ i ] ;
45882: LD_ADDR_VAR 0 13
45886: PUSH
45887: LD_VAR 0 6
45891: PUSH
45892: LD_VAR 0 8
45896: ARRAY
45897: ST_TO_ADDR
// if x = - 1 then
45898: LD_VAR 0 13
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: EQUAL
45907: IFFALSE 46116
// begin for j in f do
45909: LD_ADDR_VAR 0 9
45913: PUSH
45914: LD_VAR 0 12
45918: PUSH
45919: FOR_IN
45920: IFFALSE 46112
// repeat InitHc ;
45922: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45926: LD_VAR 0 9
45930: PPUSH
45931: CALL_OW 266
45935: PUSH
45936: LD_INT 5
45938: EQUAL
45939: IFFALSE 46009
// begin if UnitsInside ( j ) < 3 then
45941: LD_VAR 0 9
45945: PPUSH
45946: CALL_OW 313
45950: PUSH
45951: LD_INT 3
45953: LESS
45954: IFFALSE 45990
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45956: LD_INT 0
45958: PPUSH
45959: LD_INT 5
45961: PUSH
45962: LD_INT 8
45964: PUSH
45965: LD_INT 9
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: PUSH
45973: LD_VAR 0 17
45977: ARRAY
45978: PPUSH
45979: LD_VAR 0 4
45983: PPUSH
45984: CALL_OW 380
45988: GO 46007
// PrepareHuman ( false , i , skill ) ;
45990: LD_INT 0
45992: PPUSH
45993: LD_VAR 0 8
45997: PPUSH
45998: LD_VAR 0 4
46002: PPUSH
46003: CALL_OW 380
// end else
46007: GO 46026
// PrepareHuman ( false , i , skill ) ;
46009: LD_INT 0
46011: PPUSH
46012: LD_VAR 0 8
46016: PPUSH
46017: LD_VAR 0 4
46021: PPUSH
46022: CALL_OW 380
// un := CreateHuman ;
46026: LD_ADDR_VAR 0 14
46030: PUSH
46031: CALL_OW 44
46035: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46036: LD_ADDR_VAR 0 7
46040: PUSH
46041: LD_VAR 0 7
46045: PPUSH
46046: LD_INT 1
46048: PPUSH
46049: LD_VAR 0 14
46053: PPUSH
46054: CALL_OW 2
46058: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46059: LD_VAR 0 14
46063: PPUSH
46064: LD_VAR 0 9
46068: PPUSH
46069: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46073: LD_VAR 0 9
46077: PPUSH
46078: CALL_OW 313
46082: PUSH
46083: LD_INT 6
46085: EQUAL
46086: PUSH
46087: LD_VAR 0 9
46091: PPUSH
46092: CALL_OW 266
46096: PUSH
46097: LD_INT 32
46099: PUSH
46100: LD_INT 31
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: IN
46107: OR
46108: IFFALSE 45922
46110: GO 45919
46112: POP
46113: POP
// end else
46114: GO 46496
// for j = 1 to x do
46116: LD_ADDR_VAR 0 9
46120: PUSH
46121: DOUBLE
46122: LD_INT 1
46124: DEC
46125: ST_TO_ADDR
46126: LD_VAR 0 13
46130: PUSH
46131: FOR_TO
46132: IFFALSE 46494
// begin InitHc ;
46134: CALL_OW 19
// if not f then
46138: LD_VAR 0 12
46142: NOT
46143: IFFALSE 46232
// begin PrepareHuman ( false , i , skill ) ;
46145: LD_INT 0
46147: PPUSH
46148: LD_VAR 0 8
46152: PPUSH
46153: LD_VAR 0 4
46157: PPUSH
46158: CALL_OW 380
// un := CreateHuman ;
46162: LD_ADDR_VAR 0 14
46166: PUSH
46167: CALL_OW 44
46171: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46172: LD_ADDR_VAR 0 7
46176: PUSH
46177: LD_VAR 0 7
46181: PPUSH
46182: LD_INT 1
46184: PPUSH
46185: LD_VAR 0 14
46189: PPUSH
46190: CALL_OW 2
46194: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46195: LD_VAR 0 14
46199: PPUSH
46200: LD_VAR 0 1
46204: PPUSH
46205: CALL_OW 250
46209: PPUSH
46210: LD_VAR 0 1
46214: PPUSH
46215: CALL_OW 251
46219: PPUSH
46220: LD_INT 10
46222: PPUSH
46223: LD_INT 0
46225: PPUSH
46226: CALL_OW 50
// continue ;
46230: GO 46131
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46232: LD_VAR 0 12
46236: PUSH
46237: LD_INT 1
46239: ARRAY
46240: PPUSH
46241: CALL_OW 313
46245: PUSH
46246: LD_VAR 0 12
46250: PUSH
46251: LD_INT 1
46253: ARRAY
46254: PPUSH
46255: CALL_OW 266
46259: PUSH
46260: LD_INT 32
46262: PUSH
46263: LD_INT 31
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: IN
46270: AND
46271: PUSH
46272: LD_VAR 0 12
46276: PUSH
46277: LD_INT 1
46279: ARRAY
46280: PPUSH
46281: CALL_OW 313
46285: PUSH
46286: LD_INT 6
46288: EQUAL
46289: OR
46290: IFFALSE 46310
// f := Delete ( f , 1 ) ;
46292: LD_ADDR_VAR 0 12
46296: PUSH
46297: LD_VAR 0 12
46301: PPUSH
46302: LD_INT 1
46304: PPUSH
46305: CALL_OW 3
46309: ST_TO_ADDR
// if not f then
46310: LD_VAR 0 12
46314: NOT
46315: IFFALSE 46333
// begin x := x + 2 ;
46317: LD_ADDR_VAR 0 13
46321: PUSH
46322: LD_VAR 0 13
46326: PUSH
46327: LD_INT 2
46329: PLUS
46330: ST_TO_ADDR
// continue ;
46331: GO 46131
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46333: LD_VAR 0 12
46337: PUSH
46338: LD_INT 1
46340: ARRAY
46341: PPUSH
46342: CALL_OW 266
46346: PUSH
46347: LD_INT 5
46349: EQUAL
46350: IFFALSE 46424
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46352: LD_VAR 0 12
46356: PUSH
46357: LD_INT 1
46359: ARRAY
46360: PPUSH
46361: CALL_OW 313
46365: PUSH
46366: LD_INT 3
46368: LESS
46369: IFFALSE 46405
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46371: LD_INT 0
46373: PPUSH
46374: LD_INT 5
46376: PUSH
46377: LD_INT 8
46379: PUSH
46380: LD_INT 9
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: LIST
46387: PUSH
46388: LD_VAR 0 17
46392: ARRAY
46393: PPUSH
46394: LD_VAR 0 4
46398: PPUSH
46399: CALL_OW 380
46403: GO 46422
// PrepareHuman ( false , i , skill ) ;
46405: LD_INT 0
46407: PPUSH
46408: LD_VAR 0 8
46412: PPUSH
46413: LD_VAR 0 4
46417: PPUSH
46418: CALL_OW 380
// end else
46422: GO 46441
// PrepareHuman ( false , i , skill ) ;
46424: LD_INT 0
46426: PPUSH
46427: LD_VAR 0 8
46431: PPUSH
46432: LD_VAR 0 4
46436: PPUSH
46437: CALL_OW 380
// un := CreateHuman ;
46441: LD_ADDR_VAR 0 14
46445: PUSH
46446: CALL_OW 44
46450: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46451: LD_ADDR_VAR 0 7
46455: PUSH
46456: LD_VAR 0 7
46460: PPUSH
46461: LD_INT 1
46463: PPUSH
46464: LD_VAR 0 14
46468: PPUSH
46469: CALL_OW 2
46473: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46474: LD_VAR 0 14
46478: PPUSH
46479: LD_VAR 0 12
46483: PUSH
46484: LD_INT 1
46486: ARRAY
46487: PPUSH
46488: CALL_OW 52
// end ;
46492: GO 46131
46494: POP
46495: POP
// end ;
46496: GO 45433
46498: POP
46499: POP
// result := result ^ buildings ;
46500: LD_ADDR_VAR 0 7
46504: PUSH
46505: LD_VAR 0 7
46509: PUSH
46510: LD_VAR 0 18
46514: ADD
46515: ST_TO_ADDR
// end else
46516: GO 46659
// begin for i = 1 to personel do
46518: LD_ADDR_VAR 0 8
46522: PUSH
46523: DOUBLE
46524: LD_INT 1
46526: DEC
46527: ST_TO_ADDR
46528: LD_VAR 0 6
46532: PUSH
46533: FOR_TO
46534: IFFALSE 46657
// begin if i > 4 then
46536: LD_VAR 0 8
46540: PUSH
46541: LD_INT 4
46543: GREATER
46544: IFFALSE 46548
// break ;
46546: GO 46657
// x := personel [ i ] ;
46548: LD_ADDR_VAR 0 13
46552: PUSH
46553: LD_VAR 0 6
46557: PUSH
46558: LD_VAR 0 8
46562: ARRAY
46563: ST_TO_ADDR
// if x = - 1 then
46564: LD_VAR 0 13
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: EQUAL
46573: IFFALSE 46577
// continue ;
46575: GO 46533
// PrepareHuman ( false , i , skill ) ;
46577: LD_INT 0
46579: PPUSH
46580: LD_VAR 0 8
46584: PPUSH
46585: LD_VAR 0 4
46589: PPUSH
46590: CALL_OW 380
// un := CreateHuman ;
46594: LD_ADDR_VAR 0 14
46598: PUSH
46599: CALL_OW 44
46603: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46604: LD_VAR 0 14
46608: PPUSH
46609: LD_VAR 0 1
46613: PPUSH
46614: CALL_OW 250
46618: PPUSH
46619: LD_VAR 0 1
46623: PPUSH
46624: CALL_OW 251
46628: PPUSH
46629: LD_INT 10
46631: PPUSH
46632: LD_INT 0
46634: PPUSH
46635: CALL_OW 50
// result := result ^ un ;
46639: LD_ADDR_VAR 0 7
46643: PUSH
46644: LD_VAR 0 7
46648: PUSH
46649: LD_VAR 0 14
46653: ADD
46654: ST_TO_ADDR
// end ;
46655: GO 46533
46657: POP
46658: POP
// end ; end ;
46659: LD_VAR 0 7
46663: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46664: LD_INT 0
46666: PPUSH
46667: PPUSH
46668: PPUSH
46669: PPUSH
46670: PPUSH
46671: PPUSH
46672: PPUSH
46673: PPUSH
46674: PPUSH
46675: PPUSH
46676: PPUSH
46677: PPUSH
46678: PPUSH
46679: PPUSH
46680: PPUSH
46681: PPUSH
// result := false ;
46682: LD_ADDR_VAR 0 3
46686: PUSH
46687: LD_INT 0
46689: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46690: LD_VAR 0 1
46694: NOT
46695: PUSH
46696: LD_VAR 0 1
46700: PPUSH
46701: CALL_OW 266
46705: PUSH
46706: LD_INT 32
46708: PUSH
46709: LD_INT 33
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: IN
46716: NOT
46717: OR
46718: IFFALSE 46722
// exit ;
46720: GO 47831
// nat := GetNation ( tower ) ;
46722: LD_ADDR_VAR 0 12
46726: PUSH
46727: LD_VAR 0 1
46731: PPUSH
46732: CALL_OW 248
46736: ST_TO_ADDR
// side := GetSide ( tower ) ;
46737: LD_ADDR_VAR 0 16
46741: PUSH
46742: LD_VAR 0 1
46746: PPUSH
46747: CALL_OW 255
46751: ST_TO_ADDR
// x := GetX ( tower ) ;
46752: LD_ADDR_VAR 0 10
46756: PUSH
46757: LD_VAR 0 1
46761: PPUSH
46762: CALL_OW 250
46766: ST_TO_ADDR
// y := GetY ( tower ) ;
46767: LD_ADDR_VAR 0 11
46771: PUSH
46772: LD_VAR 0 1
46776: PPUSH
46777: CALL_OW 251
46781: ST_TO_ADDR
// if not x or not y then
46782: LD_VAR 0 10
46786: NOT
46787: PUSH
46788: LD_VAR 0 11
46792: NOT
46793: OR
46794: IFFALSE 46798
// exit ;
46796: GO 47831
// weapon := 0 ;
46798: LD_ADDR_VAR 0 18
46802: PUSH
46803: LD_INT 0
46805: ST_TO_ADDR
// fac_list := [ ] ;
46806: LD_ADDR_VAR 0 17
46810: PUSH
46811: EMPTY
46812: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46813: LD_ADDR_VAR 0 6
46817: PUSH
46818: LD_VAR 0 1
46822: PPUSH
46823: CALL_OW 274
46827: PPUSH
46828: LD_VAR 0 2
46832: PPUSH
46833: LD_INT 0
46835: PPUSH
46836: CALL 44402 0 3
46840: PPUSH
46841: LD_INT 30
46843: PUSH
46844: LD_INT 3
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PPUSH
46851: CALL_OW 72
46855: ST_TO_ADDR
// if not factories then
46856: LD_VAR 0 6
46860: NOT
46861: IFFALSE 46865
// exit ;
46863: GO 47831
// for i in factories do
46865: LD_ADDR_VAR 0 8
46869: PUSH
46870: LD_VAR 0 6
46874: PUSH
46875: FOR_IN
46876: IFFALSE 46901
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46878: LD_ADDR_VAR 0 17
46882: PUSH
46883: LD_VAR 0 17
46887: PUSH
46888: LD_VAR 0 8
46892: PPUSH
46893: CALL_OW 478
46897: UNION
46898: ST_TO_ADDR
46899: GO 46875
46901: POP
46902: POP
// if not fac_list then
46903: LD_VAR 0 17
46907: NOT
46908: IFFALSE 46912
// exit ;
46910: GO 47831
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46912: LD_ADDR_VAR 0 5
46916: PUSH
46917: LD_INT 4
46919: PUSH
46920: LD_INT 5
46922: PUSH
46923: LD_INT 9
46925: PUSH
46926: LD_INT 10
46928: PUSH
46929: LD_INT 6
46931: PUSH
46932: LD_INT 7
46934: PUSH
46935: LD_INT 11
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 27
46949: PUSH
46950: LD_INT 28
46952: PUSH
46953: LD_INT 26
46955: PUSH
46956: LD_INT 30
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 43
46967: PUSH
46968: LD_INT 44
46970: PUSH
46971: LD_INT 46
46973: PUSH
46974: LD_INT 45
46976: PUSH
46977: LD_INT 47
46979: PUSH
46980: LD_INT 49
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: LIST
46995: PUSH
46996: LD_VAR 0 12
47000: ARRAY
47001: ST_TO_ADDR
// list := list isect fac_list ;
47002: LD_ADDR_VAR 0 5
47006: PUSH
47007: LD_VAR 0 5
47011: PUSH
47012: LD_VAR 0 17
47016: ISECT
47017: ST_TO_ADDR
// if not list then
47018: LD_VAR 0 5
47022: NOT
47023: IFFALSE 47027
// exit ;
47025: GO 47831
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47027: LD_VAR 0 12
47031: PUSH
47032: LD_INT 3
47034: EQUAL
47035: PUSH
47036: LD_INT 49
47038: PUSH
47039: LD_VAR 0 5
47043: IN
47044: AND
47045: PUSH
47046: LD_INT 31
47048: PPUSH
47049: LD_VAR 0 16
47053: PPUSH
47054: CALL_OW 321
47058: PUSH
47059: LD_INT 2
47061: EQUAL
47062: AND
47063: IFFALSE 47123
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47065: LD_INT 22
47067: PUSH
47068: LD_VAR 0 16
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 35
47079: PUSH
47080: LD_INT 49
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 91
47089: PUSH
47090: LD_VAR 0 1
47094: PUSH
47095: LD_INT 10
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: LIST
47107: PPUSH
47108: CALL_OW 69
47112: NOT
47113: IFFALSE 47123
// weapon := ru_time_lapser ;
47115: LD_ADDR_VAR 0 18
47119: PUSH
47120: LD_INT 49
47122: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47123: LD_VAR 0 12
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 2
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: IN
47138: PUSH
47139: LD_INT 11
47141: PUSH
47142: LD_VAR 0 5
47146: IN
47147: PUSH
47148: LD_INT 30
47150: PUSH
47151: LD_VAR 0 5
47155: IN
47156: OR
47157: AND
47158: PUSH
47159: LD_INT 6
47161: PPUSH
47162: LD_VAR 0 16
47166: PPUSH
47167: CALL_OW 321
47171: PUSH
47172: LD_INT 2
47174: EQUAL
47175: AND
47176: IFFALSE 47341
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47178: LD_INT 22
47180: PUSH
47181: LD_VAR 0 16
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: LD_INT 35
47195: PUSH
47196: LD_INT 11
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 35
47205: PUSH
47206: LD_INT 30
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 91
47220: PUSH
47221: LD_VAR 0 1
47225: PUSH
47226: LD_INT 18
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: LIST
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: PPUSH
47239: CALL_OW 69
47243: NOT
47244: PUSH
47245: LD_INT 22
47247: PUSH
47248: LD_VAR 0 16
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: LD_INT 30
47262: PUSH
47263: LD_INT 32
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 30
47272: PUSH
47273: LD_INT 33
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 91
47287: PUSH
47288: LD_VAR 0 1
47292: PUSH
47293: LD_INT 12
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: LIST
47305: PUSH
47306: EMPTY
47307: LIST
47308: PPUSH
47309: CALL_OW 69
47313: PUSH
47314: LD_INT 2
47316: GREATER
47317: AND
47318: IFFALSE 47341
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47320: LD_ADDR_VAR 0 18
47324: PUSH
47325: LD_INT 11
47327: PUSH
47328: LD_INT 30
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_VAR 0 12
47339: ARRAY
47340: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47341: LD_VAR 0 18
47345: NOT
47346: PUSH
47347: LD_INT 40
47349: PPUSH
47350: LD_VAR 0 16
47354: PPUSH
47355: CALL_OW 321
47359: PUSH
47360: LD_INT 2
47362: EQUAL
47363: AND
47364: PUSH
47365: LD_INT 7
47367: PUSH
47368: LD_VAR 0 5
47372: IN
47373: PUSH
47374: LD_INT 28
47376: PUSH
47377: LD_VAR 0 5
47381: IN
47382: OR
47383: PUSH
47384: LD_INT 45
47386: PUSH
47387: LD_VAR 0 5
47391: IN
47392: OR
47393: AND
47394: IFFALSE 47648
// begin hex := GetHexInfo ( x , y ) ;
47396: LD_ADDR_VAR 0 4
47400: PUSH
47401: LD_VAR 0 10
47405: PPUSH
47406: LD_VAR 0 11
47410: PPUSH
47411: CALL_OW 546
47415: ST_TO_ADDR
// if hex [ 1 ] then
47416: LD_VAR 0 4
47420: PUSH
47421: LD_INT 1
47423: ARRAY
47424: IFFALSE 47428
// exit ;
47426: GO 47831
// height := hex [ 2 ] ;
47428: LD_ADDR_VAR 0 15
47432: PUSH
47433: LD_VAR 0 4
47437: PUSH
47438: LD_INT 2
47440: ARRAY
47441: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47442: LD_ADDR_VAR 0 14
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: LD_INT 2
47452: PUSH
47453: LD_INT 3
47455: PUSH
47456: LD_INT 5
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: ST_TO_ADDR
// for i in tmp do
47465: LD_ADDR_VAR 0 8
47469: PUSH
47470: LD_VAR 0 14
47474: PUSH
47475: FOR_IN
47476: IFFALSE 47646
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47478: LD_ADDR_VAR 0 9
47482: PUSH
47483: LD_VAR 0 10
47487: PPUSH
47488: LD_VAR 0 8
47492: PPUSH
47493: LD_INT 5
47495: PPUSH
47496: CALL_OW 272
47500: PUSH
47501: LD_VAR 0 11
47505: PPUSH
47506: LD_VAR 0 8
47510: PPUSH
47511: LD_INT 5
47513: PPUSH
47514: CALL_OW 273
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47523: LD_VAR 0 9
47527: PUSH
47528: LD_INT 1
47530: ARRAY
47531: PPUSH
47532: LD_VAR 0 9
47536: PUSH
47537: LD_INT 2
47539: ARRAY
47540: PPUSH
47541: CALL_OW 488
47545: IFFALSE 47644
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47547: LD_ADDR_VAR 0 4
47551: PUSH
47552: LD_VAR 0 9
47556: PUSH
47557: LD_INT 1
47559: ARRAY
47560: PPUSH
47561: LD_VAR 0 9
47565: PUSH
47566: LD_INT 2
47568: ARRAY
47569: PPUSH
47570: CALL_OW 546
47574: ST_TO_ADDR
// if hex [ 1 ] then
47575: LD_VAR 0 4
47579: PUSH
47580: LD_INT 1
47582: ARRAY
47583: IFFALSE 47587
// continue ;
47585: GO 47475
// h := hex [ 2 ] ;
47587: LD_ADDR_VAR 0 13
47591: PUSH
47592: LD_VAR 0 4
47596: PUSH
47597: LD_INT 2
47599: ARRAY
47600: ST_TO_ADDR
// if h + 7 < height then
47601: LD_VAR 0 13
47605: PUSH
47606: LD_INT 7
47608: PLUS
47609: PUSH
47610: LD_VAR 0 15
47614: LESS
47615: IFFALSE 47644
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47617: LD_ADDR_VAR 0 18
47621: PUSH
47622: LD_INT 7
47624: PUSH
47625: LD_INT 28
47627: PUSH
47628: LD_INT 45
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: LIST
47635: PUSH
47636: LD_VAR 0 12
47640: ARRAY
47641: ST_TO_ADDR
// break ;
47642: GO 47646
// end ; end ; end ;
47644: GO 47475
47646: POP
47647: POP
// end ; if not weapon then
47648: LD_VAR 0 18
47652: NOT
47653: IFFALSE 47713
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47655: LD_ADDR_VAR 0 5
47659: PUSH
47660: LD_VAR 0 5
47664: PUSH
47665: LD_INT 11
47667: PUSH
47668: LD_INT 30
47670: PUSH
47671: LD_INT 49
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: DIFF
47679: ST_TO_ADDR
// if not list then
47680: LD_VAR 0 5
47684: NOT
47685: IFFALSE 47689
// exit ;
47687: GO 47831
// weapon := list [ rand ( 1 , list ) ] ;
47689: LD_ADDR_VAR 0 18
47693: PUSH
47694: LD_VAR 0 5
47698: PUSH
47699: LD_INT 1
47701: PPUSH
47702: LD_VAR 0 5
47706: PPUSH
47707: CALL_OW 12
47711: ARRAY
47712: ST_TO_ADDR
// end ; if weapon then
47713: LD_VAR 0 18
47717: IFFALSE 47831
// begin tmp := CostOfWeapon ( weapon ) ;
47719: LD_ADDR_VAR 0 14
47723: PUSH
47724: LD_VAR 0 18
47728: PPUSH
47729: CALL_OW 451
47733: ST_TO_ADDR
// j := GetBase ( tower ) ;
47734: LD_ADDR_VAR 0 9
47738: PUSH
47739: LD_VAR 0 1
47743: PPUSH
47744: CALL_OW 274
47748: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47749: LD_VAR 0 9
47753: PPUSH
47754: LD_INT 1
47756: PPUSH
47757: CALL_OW 275
47761: PUSH
47762: LD_VAR 0 14
47766: PUSH
47767: LD_INT 1
47769: ARRAY
47770: GREATEREQUAL
47771: PUSH
47772: LD_VAR 0 9
47776: PPUSH
47777: LD_INT 2
47779: PPUSH
47780: CALL_OW 275
47784: PUSH
47785: LD_VAR 0 14
47789: PUSH
47790: LD_INT 2
47792: ARRAY
47793: GREATEREQUAL
47794: AND
47795: PUSH
47796: LD_VAR 0 9
47800: PPUSH
47801: LD_INT 3
47803: PPUSH
47804: CALL_OW 275
47808: PUSH
47809: LD_VAR 0 14
47813: PUSH
47814: LD_INT 3
47816: ARRAY
47817: GREATEREQUAL
47818: AND
47819: IFFALSE 47831
// result := weapon ;
47821: LD_ADDR_VAR 0 3
47825: PUSH
47826: LD_VAR 0 18
47830: ST_TO_ADDR
// end ; end ;
47831: LD_VAR 0 3
47835: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47836: LD_INT 0
47838: PPUSH
47839: PPUSH
// result := true ;
47840: LD_ADDR_VAR 0 3
47844: PUSH
47845: LD_INT 1
47847: ST_TO_ADDR
// if array1 = array2 then
47848: LD_VAR 0 1
47852: PUSH
47853: LD_VAR 0 2
47857: EQUAL
47858: IFFALSE 47918
// begin for i = 1 to array1 do
47860: LD_ADDR_VAR 0 4
47864: PUSH
47865: DOUBLE
47866: LD_INT 1
47868: DEC
47869: ST_TO_ADDR
47870: LD_VAR 0 1
47874: PUSH
47875: FOR_TO
47876: IFFALSE 47914
// if array1 [ i ] <> array2 [ i ] then
47878: LD_VAR 0 1
47882: PUSH
47883: LD_VAR 0 4
47887: ARRAY
47888: PUSH
47889: LD_VAR 0 2
47893: PUSH
47894: LD_VAR 0 4
47898: ARRAY
47899: NONEQUAL
47900: IFFALSE 47912
// begin result := false ;
47902: LD_ADDR_VAR 0 3
47906: PUSH
47907: LD_INT 0
47909: ST_TO_ADDR
// break ;
47910: GO 47914
// end ;
47912: GO 47875
47914: POP
47915: POP
// end else
47916: GO 47926
// result := false ;
47918: LD_ADDR_VAR 0 3
47922: PUSH
47923: LD_INT 0
47925: ST_TO_ADDR
// end ;
47926: LD_VAR 0 3
47930: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47931: LD_INT 0
47933: PPUSH
47934: PPUSH
// if not array1 or not array2 then
47935: LD_VAR 0 1
47939: NOT
47940: PUSH
47941: LD_VAR 0 2
47945: NOT
47946: OR
47947: IFFALSE 47951
// exit ;
47949: GO 48015
// result := true ;
47951: LD_ADDR_VAR 0 3
47955: PUSH
47956: LD_INT 1
47958: ST_TO_ADDR
// for i = 1 to array1 do
47959: LD_ADDR_VAR 0 4
47963: PUSH
47964: DOUBLE
47965: LD_INT 1
47967: DEC
47968: ST_TO_ADDR
47969: LD_VAR 0 1
47973: PUSH
47974: FOR_TO
47975: IFFALSE 48013
// if array1 [ i ] <> array2 [ i ] then
47977: LD_VAR 0 1
47981: PUSH
47982: LD_VAR 0 4
47986: ARRAY
47987: PUSH
47988: LD_VAR 0 2
47992: PUSH
47993: LD_VAR 0 4
47997: ARRAY
47998: NONEQUAL
47999: IFFALSE 48011
// begin result := false ;
48001: LD_ADDR_VAR 0 3
48005: PUSH
48006: LD_INT 0
48008: ST_TO_ADDR
// break ;
48009: GO 48013
// end ;
48011: GO 47974
48013: POP
48014: POP
// end ;
48015: LD_VAR 0 3
48019: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48020: LD_INT 0
48022: PPUSH
48023: PPUSH
48024: PPUSH
// pom := GetBase ( fac ) ;
48025: LD_ADDR_VAR 0 5
48029: PUSH
48030: LD_VAR 0 1
48034: PPUSH
48035: CALL_OW 274
48039: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48040: LD_ADDR_VAR 0 4
48044: PUSH
48045: LD_VAR 0 2
48049: PUSH
48050: LD_INT 1
48052: ARRAY
48053: PPUSH
48054: LD_VAR 0 2
48058: PUSH
48059: LD_INT 2
48061: ARRAY
48062: PPUSH
48063: LD_VAR 0 2
48067: PUSH
48068: LD_INT 3
48070: ARRAY
48071: PPUSH
48072: LD_VAR 0 2
48076: PUSH
48077: LD_INT 4
48079: ARRAY
48080: PPUSH
48081: CALL_OW 449
48085: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48086: LD_ADDR_VAR 0 3
48090: PUSH
48091: LD_VAR 0 5
48095: PPUSH
48096: LD_INT 1
48098: PPUSH
48099: CALL_OW 275
48103: PUSH
48104: LD_VAR 0 4
48108: PUSH
48109: LD_INT 1
48111: ARRAY
48112: GREATEREQUAL
48113: PUSH
48114: LD_VAR 0 5
48118: PPUSH
48119: LD_INT 2
48121: PPUSH
48122: CALL_OW 275
48126: PUSH
48127: LD_VAR 0 4
48131: PUSH
48132: LD_INT 2
48134: ARRAY
48135: GREATEREQUAL
48136: AND
48137: PUSH
48138: LD_VAR 0 5
48142: PPUSH
48143: LD_INT 3
48145: PPUSH
48146: CALL_OW 275
48150: PUSH
48151: LD_VAR 0 4
48155: PUSH
48156: LD_INT 3
48158: ARRAY
48159: GREATEREQUAL
48160: AND
48161: ST_TO_ADDR
// end ;
48162: LD_VAR 0 3
48166: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48167: LD_INT 0
48169: PPUSH
48170: PPUSH
48171: PPUSH
48172: PPUSH
// pom := GetBase ( building ) ;
48173: LD_ADDR_VAR 0 3
48177: PUSH
48178: LD_VAR 0 1
48182: PPUSH
48183: CALL_OW 274
48187: ST_TO_ADDR
// if not pom then
48188: LD_VAR 0 3
48192: NOT
48193: IFFALSE 48197
// exit ;
48195: GO 48367
// btype := GetBType ( building ) ;
48197: LD_ADDR_VAR 0 5
48201: PUSH
48202: LD_VAR 0 1
48206: PPUSH
48207: CALL_OW 266
48211: ST_TO_ADDR
// if btype = b_armoury then
48212: LD_VAR 0 5
48216: PUSH
48217: LD_INT 4
48219: EQUAL
48220: IFFALSE 48230
// btype := b_barracks ;
48222: LD_ADDR_VAR 0 5
48226: PUSH
48227: LD_INT 5
48229: ST_TO_ADDR
// if btype = b_depot then
48230: LD_VAR 0 5
48234: PUSH
48235: LD_INT 0
48237: EQUAL
48238: IFFALSE 48248
// btype := b_warehouse ;
48240: LD_ADDR_VAR 0 5
48244: PUSH
48245: LD_INT 1
48247: ST_TO_ADDR
// if btype = b_workshop then
48248: LD_VAR 0 5
48252: PUSH
48253: LD_INT 2
48255: EQUAL
48256: IFFALSE 48266
// btype := b_factory ;
48258: LD_ADDR_VAR 0 5
48262: PUSH
48263: LD_INT 3
48265: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48266: LD_ADDR_VAR 0 4
48270: PUSH
48271: LD_VAR 0 5
48275: PPUSH
48276: LD_VAR 0 1
48280: PPUSH
48281: CALL_OW 248
48285: PPUSH
48286: CALL_OW 450
48290: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48291: LD_ADDR_VAR 0 2
48295: PUSH
48296: LD_VAR 0 3
48300: PPUSH
48301: LD_INT 1
48303: PPUSH
48304: CALL_OW 275
48308: PUSH
48309: LD_VAR 0 4
48313: PUSH
48314: LD_INT 1
48316: ARRAY
48317: GREATEREQUAL
48318: PUSH
48319: LD_VAR 0 3
48323: PPUSH
48324: LD_INT 2
48326: PPUSH
48327: CALL_OW 275
48331: PUSH
48332: LD_VAR 0 4
48336: PUSH
48337: LD_INT 2
48339: ARRAY
48340: GREATEREQUAL
48341: AND
48342: PUSH
48343: LD_VAR 0 3
48347: PPUSH
48348: LD_INT 3
48350: PPUSH
48351: CALL_OW 275
48355: PUSH
48356: LD_VAR 0 4
48360: PUSH
48361: LD_INT 3
48363: ARRAY
48364: GREATEREQUAL
48365: AND
48366: ST_TO_ADDR
// end ;
48367: LD_VAR 0 2
48371: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48372: LD_INT 0
48374: PPUSH
48375: PPUSH
48376: PPUSH
// pom := GetBase ( building ) ;
48377: LD_ADDR_VAR 0 4
48381: PUSH
48382: LD_VAR 0 1
48386: PPUSH
48387: CALL_OW 274
48391: ST_TO_ADDR
// if not pom then
48392: LD_VAR 0 4
48396: NOT
48397: IFFALSE 48401
// exit ;
48399: GO 48502
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48401: LD_ADDR_VAR 0 5
48405: PUSH
48406: LD_VAR 0 2
48410: PPUSH
48411: LD_VAR 0 1
48415: PPUSH
48416: CALL_OW 248
48420: PPUSH
48421: CALL_OW 450
48425: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48426: LD_ADDR_VAR 0 3
48430: PUSH
48431: LD_VAR 0 4
48435: PPUSH
48436: LD_INT 1
48438: PPUSH
48439: CALL_OW 275
48443: PUSH
48444: LD_VAR 0 5
48448: PUSH
48449: LD_INT 1
48451: ARRAY
48452: GREATEREQUAL
48453: PUSH
48454: LD_VAR 0 4
48458: PPUSH
48459: LD_INT 2
48461: PPUSH
48462: CALL_OW 275
48466: PUSH
48467: LD_VAR 0 5
48471: PUSH
48472: LD_INT 2
48474: ARRAY
48475: GREATEREQUAL
48476: AND
48477: PUSH
48478: LD_VAR 0 4
48482: PPUSH
48483: LD_INT 3
48485: PPUSH
48486: CALL_OW 275
48490: PUSH
48491: LD_VAR 0 5
48495: PUSH
48496: LD_INT 3
48498: ARRAY
48499: GREATEREQUAL
48500: AND
48501: ST_TO_ADDR
// end ;
48502: LD_VAR 0 3
48506: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48507: LD_INT 0
48509: PPUSH
48510: PPUSH
48511: PPUSH
48512: PPUSH
48513: PPUSH
48514: PPUSH
48515: PPUSH
48516: PPUSH
48517: PPUSH
48518: PPUSH
48519: PPUSH
// result := false ;
48520: LD_ADDR_VAR 0 8
48524: PUSH
48525: LD_INT 0
48527: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48528: LD_VAR 0 5
48532: NOT
48533: PUSH
48534: LD_VAR 0 1
48538: NOT
48539: OR
48540: PUSH
48541: LD_VAR 0 2
48545: NOT
48546: OR
48547: PUSH
48548: LD_VAR 0 3
48552: NOT
48553: OR
48554: IFFALSE 48558
// exit ;
48556: GO 49372
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48558: LD_ADDR_VAR 0 14
48562: PUSH
48563: LD_VAR 0 1
48567: PPUSH
48568: LD_VAR 0 2
48572: PPUSH
48573: LD_VAR 0 3
48577: PPUSH
48578: LD_VAR 0 4
48582: PPUSH
48583: LD_VAR 0 5
48587: PUSH
48588: LD_INT 1
48590: ARRAY
48591: PPUSH
48592: CALL_OW 248
48596: PPUSH
48597: LD_INT 0
48599: PPUSH
48600: CALL 50609 0 6
48604: ST_TO_ADDR
// if not hexes then
48605: LD_VAR 0 14
48609: NOT
48610: IFFALSE 48614
// exit ;
48612: GO 49372
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48614: LD_ADDR_VAR 0 17
48618: PUSH
48619: LD_VAR 0 5
48623: PPUSH
48624: LD_INT 22
48626: PUSH
48627: LD_VAR 0 13
48631: PPUSH
48632: CALL_OW 255
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: LD_INT 30
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 30
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: LIST
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PPUSH
48673: CALL_OW 72
48677: ST_TO_ADDR
// for i = 1 to hexes do
48678: LD_ADDR_VAR 0 9
48682: PUSH
48683: DOUBLE
48684: LD_INT 1
48686: DEC
48687: ST_TO_ADDR
48688: LD_VAR 0 14
48692: PUSH
48693: FOR_TO
48694: IFFALSE 49370
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48696: LD_ADDR_VAR 0 13
48700: PUSH
48701: LD_VAR 0 14
48705: PUSH
48706: LD_VAR 0 9
48710: ARRAY
48711: PUSH
48712: LD_INT 1
48714: ARRAY
48715: PPUSH
48716: LD_VAR 0 14
48720: PUSH
48721: LD_VAR 0 9
48725: ARRAY
48726: PUSH
48727: LD_INT 2
48729: ARRAY
48730: PPUSH
48731: CALL_OW 428
48735: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48736: LD_VAR 0 14
48740: PUSH
48741: LD_VAR 0 9
48745: ARRAY
48746: PUSH
48747: LD_INT 1
48749: ARRAY
48750: PPUSH
48751: LD_VAR 0 14
48755: PUSH
48756: LD_VAR 0 9
48760: ARRAY
48761: PUSH
48762: LD_INT 2
48764: ARRAY
48765: PPUSH
48766: CALL_OW 351
48770: PUSH
48771: LD_VAR 0 14
48775: PUSH
48776: LD_VAR 0 9
48780: ARRAY
48781: PUSH
48782: LD_INT 1
48784: ARRAY
48785: PPUSH
48786: LD_VAR 0 14
48790: PUSH
48791: LD_VAR 0 9
48795: ARRAY
48796: PUSH
48797: LD_INT 2
48799: ARRAY
48800: PPUSH
48801: CALL_OW 488
48805: NOT
48806: OR
48807: PUSH
48808: LD_VAR 0 13
48812: PPUSH
48813: CALL_OW 247
48817: PUSH
48818: LD_INT 3
48820: EQUAL
48821: OR
48822: IFFALSE 48828
// exit ;
48824: POP
48825: POP
48826: GO 49372
// if not tmp then
48828: LD_VAR 0 13
48832: NOT
48833: IFFALSE 48837
// continue ;
48835: GO 48693
// result := true ;
48837: LD_ADDR_VAR 0 8
48841: PUSH
48842: LD_INT 1
48844: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48845: LD_VAR 0 6
48849: PUSH
48850: LD_VAR 0 13
48854: PPUSH
48855: CALL_OW 247
48859: PUSH
48860: LD_INT 2
48862: EQUAL
48863: AND
48864: PUSH
48865: LD_VAR 0 13
48869: PPUSH
48870: CALL_OW 263
48874: PUSH
48875: LD_INT 1
48877: EQUAL
48878: AND
48879: IFFALSE 49043
// begin if IsDrivenBy ( tmp ) then
48881: LD_VAR 0 13
48885: PPUSH
48886: CALL_OW 311
48890: IFFALSE 48894
// continue ;
48892: GO 48693
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48894: LD_VAR 0 6
48898: PPUSH
48899: LD_INT 3
48901: PUSH
48902: LD_INT 60
48904: PUSH
48905: EMPTY
48906: LIST
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: LD_INT 55
48917: PUSH
48918: EMPTY
48919: LIST
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PPUSH
48929: CALL_OW 72
48933: IFFALSE 49041
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48935: LD_ADDR_VAR 0 18
48939: PUSH
48940: LD_VAR 0 6
48944: PPUSH
48945: LD_INT 3
48947: PUSH
48948: LD_INT 60
48950: PUSH
48951: EMPTY
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 3
48960: PUSH
48961: LD_INT 55
48963: PUSH
48964: EMPTY
48965: LIST
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PPUSH
48975: CALL_OW 72
48979: PUSH
48980: LD_INT 1
48982: ARRAY
48983: ST_TO_ADDR
// if IsInUnit ( driver ) then
48984: LD_VAR 0 18
48988: PPUSH
48989: CALL_OW 310
48993: IFFALSE 49004
// ComExit ( driver ) ;
48995: LD_VAR 0 18
48999: PPUSH
49000: CALL 73793 0 1
// AddComEnterUnit ( driver , tmp ) ;
49004: LD_VAR 0 18
49008: PPUSH
49009: LD_VAR 0 13
49013: PPUSH
49014: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49018: LD_VAR 0 18
49022: PPUSH
49023: LD_VAR 0 7
49027: PPUSH
49028: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49032: LD_VAR 0 18
49036: PPUSH
49037: CALL_OW 181
// end ; continue ;
49041: GO 48693
// end ; if not cleaners or not tmp in cleaners then
49043: LD_VAR 0 6
49047: NOT
49048: PUSH
49049: LD_VAR 0 13
49053: PUSH
49054: LD_VAR 0 6
49058: IN
49059: NOT
49060: OR
49061: IFFALSE 49368
// begin if dep then
49063: LD_VAR 0 17
49067: IFFALSE 49203
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49069: LD_ADDR_VAR 0 16
49073: PUSH
49074: LD_VAR 0 17
49078: PUSH
49079: LD_INT 1
49081: ARRAY
49082: PPUSH
49083: CALL_OW 250
49087: PPUSH
49088: LD_VAR 0 17
49092: PUSH
49093: LD_INT 1
49095: ARRAY
49096: PPUSH
49097: CALL_OW 254
49101: PPUSH
49102: LD_INT 5
49104: PPUSH
49105: CALL_OW 272
49109: PUSH
49110: LD_VAR 0 17
49114: PUSH
49115: LD_INT 1
49117: ARRAY
49118: PPUSH
49119: CALL_OW 251
49123: PPUSH
49124: LD_VAR 0 17
49128: PUSH
49129: LD_INT 1
49131: ARRAY
49132: PPUSH
49133: CALL_OW 254
49137: PPUSH
49138: LD_INT 5
49140: PPUSH
49141: CALL_OW 273
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49150: LD_VAR 0 16
49154: PUSH
49155: LD_INT 1
49157: ARRAY
49158: PPUSH
49159: LD_VAR 0 16
49163: PUSH
49164: LD_INT 2
49166: ARRAY
49167: PPUSH
49168: CALL_OW 488
49172: IFFALSE 49203
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49174: LD_VAR 0 13
49178: PPUSH
49179: LD_VAR 0 16
49183: PUSH
49184: LD_INT 1
49186: ARRAY
49187: PPUSH
49188: LD_VAR 0 16
49192: PUSH
49193: LD_INT 2
49195: ARRAY
49196: PPUSH
49197: CALL_OW 111
// continue ;
49201: GO 48693
// end ; end ; r := GetDir ( tmp ) ;
49203: LD_ADDR_VAR 0 15
49207: PUSH
49208: LD_VAR 0 13
49212: PPUSH
49213: CALL_OW 254
49217: ST_TO_ADDR
// if r = 5 then
49218: LD_VAR 0 15
49222: PUSH
49223: LD_INT 5
49225: EQUAL
49226: IFFALSE 49236
// r := 0 ;
49228: LD_ADDR_VAR 0 15
49232: PUSH
49233: LD_INT 0
49235: ST_TO_ADDR
// for j = r to 5 do
49236: LD_ADDR_VAR 0 10
49240: PUSH
49241: DOUBLE
49242: LD_VAR 0 15
49246: DEC
49247: ST_TO_ADDR
49248: LD_INT 5
49250: PUSH
49251: FOR_TO
49252: IFFALSE 49366
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49254: LD_ADDR_VAR 0 11
49258: PUSH
49259: LD_VAR 0 13
49263: PPUSH
49264: CALL_OW 250
49268: PPUSH
49269: LD_VAR 0 10
49273: PPUSH
49274: LD_INT 2
49276: PPUSH
49277: CALL_OW 272
49281: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49282: LD_ADDR_VAR 0 12
49286: PUSH
49287: LD_VAR 0 13
49291: PPUSH
49292: CALL_OW 251
49296: PPUSH
49297: LD_VAR 0 10
49301: PPUSH
49302: LD_INT 2
49304: PPUSH
49305: CALL_OW 273
49309: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49310: LD_VAR 0 11
49314: PPUSH
49315: LD_VAR 0 12
49319: PPUSH
49320: CALL_OW 488
49324: PUSH
49325: LD_VAR 0 11
49329: PPUSH
49330: LD_VAR 0 12
49334: PPUSH
49335: CALL_OW 428
49339: NOT
49340: AND
49341: IFFALSE 49364
// begin ComMoveXY ( tmp , _x , _y ) ;
49343: LD_VAR 0 13
49347: PPUSH
49348: LD_VAR 0 11
49352: PPUSH
49353: LD_VAR 0 12
49357: PPUSH
49358: CALL_OW 111
// break ;
49362: GO 49366
// end ; end ;
49364: GO 49251
49366: POP
49367: POP
// end ; end ;
49368: GO 48693
49370: POP
49371: POP
// end ;
49372: LD_VAR 0 8
49376: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49377: LD_INT 0
49379: PPUSH
// result := true ;
49380: LD_ADDR_VAR 0 3
49384: PUSH
49385: LD_INT 1
49387: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49388: LD_VAR 0 2
49392: PUSH
49393: LD_INT 24
49395: DOUBLE
49396: EQUAL
49397: IFTRUE 49407
49399: LD_INT 33
49401: DOUBLE
49402: EQUAL
49403: IFTRUE 49407
49405: GO 49432
49407: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49408: LD_ADDR_VAR 0 3
49412: PUSH
49413: LD_INT 32
49415: PPUSH
49416: LD_VAR 0 1
49420: PPUSH
49421: CALL_OW 321
49425: PUSH
49426: LD_INT 2
49428: EQUAL
49429: ST_TO_ADDR
49430: GO 49752
49432: LD_INT 20
49434: DOUBLE
49435: EQUAL
49436: IFTRUE 49440
49438: GO 49465
49440: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49441: LD_ADDR_VAR 0 3
49445: PUSH
49446: LD_INT 6
49448: PPUSH
49449: LD_VAR 0 1
49453: PPUSH
49454: CALL_OW 321
49458: PUSH
49459: LD_INT 2
49461: EQUAL
49462: ST_TO_ADDR
49463: GO 49752
49465: LD_INT 22
49467: DOUBLE
49468: EQUAL
49469: IFTRUE 49479
49471: LD_INT 36
49473: DOUBLE
49474: EQUAL
49475: IFTRUE 49479
49477: GO 49504
49479: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49480: LD_ADDR_VAR 0 3
49484: PUSH
49485: LD_INT 15
49487: PPUSH
49488: LD_VAR 0 1
49492: PPUSH
49493: CALL_OW 321
49497: PUSH
49498: LD_INT 2
49500: EQUAL
49501: ST_TO_ADDR
49502: GO 49752
49504: LD_INT 30
49506: DOUBLE
49507: EQUAL
49508: IFTRUE 49512
49510: GO 49537
49512: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49513: LD_ADDR_VAR 0 3
49517: PUSH
49518: LD_INT 20
49520: PPUSH
49521: LD_VAR 0 1
49525: PPUSH
49526: CALL_OW 321
49530: PUSH
49531: LD_INT 2
49533: EQUAL
49534: ST_TO_ADDR
49535: GO 49752
49537: LD_INT 28
49539: DOUBLE
49540: EQUAL
49541: IFTRUE 49551
49543: LD_INT 21
49545: DOUBLE
49546: EQUAL
49547: IFTRUE 49551
49549: GO 49576
49551: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49552: LD_ADDR_VAR 0 3
49556: PUSH
49557: LD_INT 21
49559: PPUSH
49560: LD_VAR 0 1
49564: PPUSH
49565: CALL_OW 321
49569: PUSH
49570: LD_INT 2
49572: EQUAL
49573: ST_TO_ADDR
49574: GO 49752
49576: LD_INT 16
49578: DOUBLE
49579: EQUAL
49580: IFTRUE 49584
49582: GO 49611
49584: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49585: LD_ADDR_VAR 0 3
49589: PUSH
49590: LD_EXP 60
49594: PPUSH
49595: LD_VAR 0 1
49599: PPUSH
49600: CALL_OW 321
49604: PUSH
49605: LD_INT 2
49607: EQUAL
49608: ST_TO_ADDR
49609: GO 49752
49611: LD_INT 19
49613: DOUBLE
49614: EQUAL
49615: IFTRUE 49625
49617: LD_INT 23
49619: DOUBLE
49620: EQUAL
49621: IFTRUE 49625
49623: GO 49652
49625: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49626: LD_ADDR_VAR 0 3
49630: PUSH
49631: LD_EXP 59
49635: PPUSH
49636: LD_VAR 0 1
49640: PPUSH
49641: CALL_OW 321
49645: PUSH
49646: LD_INT 2
49648: EQUAL
49649: ST_TO_ADDR
49650: GO 49752
49652: LD_INT 17
49654: DOUBLE
49655: EQUAL
49656: IFTRUE 49660
49658: GO 49685
49660: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49661: LD_ADDR_VAR 0 3
49665: PUSH
49666: LD_INT 39
49668: PPUSH
49669: LD_VAR 0 1
49673: PPUSH
49674: CALL_OW 321
49678: PUSH
49679: LD_INT 2
49681: EQUAL
49682: ST_TO_ADDR
49683: GO 49752
49685: LD_INT 18
49687: DOUBLE
49688: EQUAL
49689: IFTRUE 49693
49691: GO 49718
49693: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49694: LD_ADDR_VAR 0 3
49698: PUSH
49699: LD_INT 40
49701: PPUSH
49702: LD_VAR 0 1
49706: PPUSH
49707: CALL_OW 321
49711: PUSH
49712: LD_INT 2
49714: EQUAL
49715: ST_TO_ADDR
49716: GO 49752
49718: LD_INT 27
49720: DOUBLE
49721: EQUAL
49722: IFTRUE 49726
49724: GO 49751
49726: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49727: LD_ADDR_VAR 0 3
49731: PUSH
49732: LD_INT 35
49734: PPUSH
49735: LD_VAR 0 1
49739: PPUSH
49740: CALL_OW 321
49744: PUSH
49745: LD_INT 2
49747: EQUAL
49748: ST_TO_ADDR
49749: GO 49752
49751: POP
// end ;
49752: LD_VAR 0 3
49756: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49757: LD_INT 0
49759: PPUSH
49760: PPUSH
49761: PPUSH
49762: PPUSH
49763: PPUSH
49764: PPUSH
49765: PPUSH
49766: PPUSH
49767: PPUSH
49768: PPUSH
49769: PPUSH
// result := false ;
49770: LD_ADDR_VAR 0 6
49774: PUSH
49775: LD_INT 0
49777: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49778: LD_VAR 0 1
49782: NOT
49783: PUSH
49784: LD_VAR 0 1
49788: PPUSH
49789: CALL_OW 266
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: IN
49804: NOT
49805: OR
49806: PUSH
49807: LD_VAR 0 2
49811: NOT
49812: OR
49813: PUSH
49814: LD_VAR 0 5
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: LD_INT 3
49830: PUSH
49831: LD_INT 4
49833: PUSH
49834: LD_INT 5
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: IN
49845: NOT
49846: OR
49847: PUSH
49848: LD_VAR 0 3
49852: PPUSH
49853: LD_VAR 0 4
49857: PPUSH
49858: CALL_OW 488
49862: NOT
49863: OR
49864: IFFALSE 49868
// exit ;
49866: GO 50604
// side := GetSide ( depot ) ;
49868: LD_ADDR_VAR 0 9
49872: PUSH
49873: LD_VAR 0 1
49877: PPUSH
49878: CALL_OW 255
49882: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49883: LD_VAR 0 9
49887: PPUSH
49888: LD_VAR 0 2
49892: PPUSH
49893: CALL 49377 0 2
49897: NOT
49898: IFFALSE 49902
// exit ;
49900: GO 50604
// pom := GetBase ( depot ) ;
49902: LD_ADDR_VAR 0 10
49906: PUSH
49907: LD_VAR 0 1
49911: PPUSH
49912: CALL_OW 274
49916: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49917: LD_ADDR_VAR 0 11
49921: PUSH
49922: LD_VAR 0 2
49926: PPUSH
49927: LD_VAR 0 1
49931: PPUSH
49932: CALL_OW 248
49936: PPUSH
49937: CALL_OW 450
49941: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49942: LD_VAR 0 10
49946: PPUSH
49947: LD_INT 1
49949: PPUSH
49950: CALL_OW 275
49954: PUSH
49955: LD_VAR 0 11
49959: PUSH
49960: LD_INT 1
49962: ARRAY
49963: GREATEREQUAL
49964: PUSH
49965: LD_VAR 0 10
49969: PPUSH
49970: LD_INT 2
49972: PPUSH
49973: CALL_OW 275
49977: PUSH
49978: LD_VAR 0 11
49982: PUSH
49983: LD_INT 2
49985: ARRAY
49986: GREATEREQUAL
49987: AND
49988: PUSH
49989: LD_VAR 0 10
49993: PPUSH
49994: LD_INT 3
49996: PPUSH
49997: CALL_OW 275
50001: PUSH
50002: LD_VAR 0 11
50006: PUSH
50007: LD_INT 3
50009: ARRAY
50010: GREATEREQUAL
50011: AND
50012: NOT
50013: IFFALSE 50017
// exit ;
50015: GO 50604
// if GetBType ( depot ) = b_depot then
50017: LD_VAR 0 1
50021: PPUSH
50022: CALL_OW 266
50026: PUSH
50027: LD_INT 0
50029: EQUAL
50030: IFFALSE 50042
// dist := 28 else
50032: LD_ADDR_VAR 0 14
50036: PUSH
50037: LD_INT 28
50039: ST_TO_ADDR
50040: GO 50050
// dist := 36 ;
50042: LD_ADDR_VAR 0 14
50046: PUSH
50047: LD_INT 36
50049: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50050: LD_VAR 0 1
50054: PPUSH
50055: LD_VAR 0 3
50059: PPUSH
50060: LD_VAR 0 4
50064: PPUSH
50065: CALL_OW 297
50069: PUSH
50070: LD_VAR 0 14
50074: GREATER
50075: IFFALSE 50079
// exit ;
50077: GO 50604
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50079: LD_ADDR_VAR 0 12
50083: PUSH
50084: LD_VAR 0 2
50088: PPUSH
50089: LD_VAR 0 3
50093: PPUSH
50094: LD_VAR 0 4
50098: PPUSH
50099: LD_VAR 0 5
50103: PPUSH
50104: LD_VAR 0 1
50108: PPUSH
50109: CALL_OW 248
50113: PPUSH
50114: LD_INT 0
50116: PPUSH
50117: CALL 50609 0 6
50121: ST_TO_ADDR
// if not hexes then
50122: LD_VAR 0 12
50126: NOT
50127: IFFALSE 50131
// exit ;
50129: GO 50604
// hex := GetHexInfo ( x , y ) ;
50131: LD_ADDR_VAR 0 15
50135: PUSH
50136: LD_VAR 0 3
50140: PPUSH
50141: LD_VAR 0 4
50145: PPUSH
50146: CALL_OW 546
50150: ST_TO_ADDR
// if hex [ 1 ] then
50151: LD_VAR 0 15
50155: PUSH
50156: LD_INT 1
50158: ARRAY
50159: IFFALSE 50163
// exit ;
50161: GO 50604
// height := hex [ 2 ] ;
50163: LD_ADDR_VAR 0 13
50167: PUSH
50168: LD_VAR 0 15
50172: PUSH
50173: LD_INT 2
50175: ARRAY
50176: ST_TO_ADDR
// for i = 1 to hexes do
50177: LD_ADDR_VAR 0 7
50181: PUSH
50182: DOUBLE
50183: LD_INT 1
50185: DEC
50186: ST_TO_ADDR
50187: LD_VAR 0 12
50191: PUSH
50192: FOR_TO
50193: IFFALSE 50523
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50195: LD_VAR 0 12
50199: PUSH
50200: LD_VAR 0 7
50204: ARRAY
50205: PUSH
50206: LD_INT 1
50208: ARRAY
50209: PPUSH
50210: LD_VAR 0 12
50214: PUSH
50215: LD_VAR 0 7
50219: ARRAY
50220: PUSH
50221: LD_INT 2
50223: ARRAY
50224: PPUSH
50225: CALL_OW 488
50229: NOT
50230: PUSH
50231: LD_VAR 0 12
50235: PUSH
50236: LD_VAR 0 7
50240: ARRAY
50241: PUSH
50242: LD_INT 1
50244: ARRAY
50245: PPUSH
50246: LD_VAR 0 12
50250: PUSH
50251: LD_VAR 0 7
50255: ARRAY
50256: PUSH
50257: LD_INT 2
50259: ARRAY
50260: PPUSH
50261: CALL_OW 428
50265: PUSH
50266: LD_INT 0
50268: GREATER
50269: OR
50270: PUSH
50271: LD_VAR 0 12
50275: PUSH
50276: LD_VAR 0 7
50280: ARRAY
50281: PUSH
50282: LD_INT 1
50284: ARRAY
50285: PPUSH
50286: LD_VAR 0 12
50290: PUSH
50291: LD_VAR 0 7
50295: ARRAY
50296: PUSH
50297: LD_INT 2
50299: ARRAY
50300: PPUSH
50301: CALL_OW 351
50305: OR
50306: IFFALSE 50312
// exit ;
50308: POP
50309: POP
50310: GO 50604
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50312: LD_ADDR_VAR 0 8
50316: PUSH
50317: LD_VAR 0 12
50321: PUSH
50322: LD_VAR 0 7
50326: ARRAY
50327: PUSH
50328: LD_INT 1
50330: ARRAY
50331: PPUSH
50332: LD_VAR 0 12
50336: PUSH
50337: LD_VAR 0 7
50341: ARRAY
50342: PUSH
50343: LD_INT 2
50345: ARRAY
50346: PPUSH
50347: CALL_OW 546
50351: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50352: LD_VAR 0 8
50356: PUSH
50357: LD_INT 1
50359: ARRAY
50360: PUSH
50361: LD_VAR 0 8
50365: PUSH
50366: LD_INT 2
50368: ARRAY
50369: PUSH
50370: LD_VAR 0 13
50374: PUSH
50375: LD_INT 2
50377: PLUS
50378: GREATER
50379: OR
50380: PUSH
50381: LD_VAR 0 8
50385: PUSH
50386: LD_INT 2
50388: ARRAY
50389: PUSH
50390: LD_VAR 0 13
50394: PUSH
50395: LD_INT 2
50397: MINUS
50398: LESS
50399: OR
50400: PUSH
50401: LD_VAR 0 8
50405: PUSH
50406: LD_INT 3
50408: ARRAY
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 8
50415: PUSH
50416: LD_INT 9
50418: PUSH
50419: LD_INT 10
50421: PUSH
50422: LD_INT 11
50424: PUSH
50425: LD_INT 12
50427: PUSH
50428: LD_INT 13
50430: PUSH
50431: LD_INT 16
50433: PUSH
50434: LD_INT 17
50436: PUSH
50437: LD_INT 18
50439: PUSH
50440: LD_INT 19
50442: PUSH
50443: LD_INT 20
50445: PUSH
50446: LD_INT 21
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: IN
50464: NOT
50465: OR
50466: PUSH
50467: LD_VAR 0 8
50471: PUSH
50472: LD_INT 5
50474: ARRAY
50475: NOT
50476: OR
50477: PUSH
50478: LD_VAR 0 8
50482: PUSH
50483: LD_INT 6
50485: ARRAY
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: LD_INT 2
50492: PUSH
50493: LD_INT 7
50495: PUSH
50496: LD_INT 9
50498: PUSH
50499: LD_INT 10
50501: PUSH
50502: LD_INT 11
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: IN
50513: NOT
50514: OR
50515: IFFALSE 50521
// exit ;
50517: POP
50518: POP
50519: GO 50604
// end ;
50521: GO 50192
50523: POP
50524: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50525: LD_VAR 0 9
50529: PPUSH
50530: LD_VAR 0 3
50534: PPUSH
50535: LD_VAR 0 4
50539: PPUSH
50540: LD_INT 20
50542: PPUSH
50543: CALL 42550 0 4
50547: PUSH
50548: LD_INT 4
50550: ARRAY
50551: IFFALSE 50555
// exit ;
50553: GO 50604
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50555: LD_VAR 0 2
50559: PUSH
50560: LD_INT 29
50562: PUSH
50563: LD_INT 30
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: IN
50570: PUSH
50571: LD_VAR 0 3
50575: PPUSH
50576: LD_VAR 0 4
50580: PPUSH
50581: LD_VAR 0 9
50585: PPUSH
50586: CALL_OW 440
50590: NOT
50591: AND
50592: IFFALSE 50596
// exit ;
50594: GO 50604
// result := true ;
50596: LD_ADDR_VAR 0 6
50600: PUSH
50601: LD_INT 1
50603: ST_TO_ADDR
// end ;
50604: LD_VAR 0 6
50608: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50609: LD_INT 0
50611: PPUSH
50612: PPUSH
50613: PPUSH
50614: PPUSH
50615: PPUSH
50616: PPUSH
50617: PPUSH
50618: PPUSH
50619: PPUSH
50620: PPUSH
50621: PPUSH
50622: PPUSH
50623: PPUSH
50624: PPUSH
50625: PPUSH
50626: PPUSH
50627: PPUSH
50628: PPUSH
50629: PPUSH
50630: PPUSH
50631: PPUSH
50632: PPUSH
50633: PPUSH
50634: PPUSH
50635: PPUSH
50636: PPUSH
50637: PPUSH
50638: PPUSH
50639: PPUSH
50640: PPUSH
50641: PPUSH
50642: PPUSH
50643: PPUSH
50644: PPUSH
50645: PPUSH
50646: PPUSH
50647: PPUSH
50648: PPUSH
50649: PPUSH
50650: PPUSH
50651: PPUSH
50652: PPUSH
50653: PPUSH
50654: PPUSH
50655: PPUSH
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
50660: PPUSH
50661: PPUSH
50662: PPUSH
50663: PPUSH
50664: PPUSH
50665: PPUSH
50666: PPUSH
50667: PPUSH
50668: PPUSH
// result = [ ] ;
50669: LD_ADDR_VAR 0 7
50673: PUSH
50674: EMPTY
50675: ST_TO_ADDR
// temp_list = [ ] ;
50676: LD_ADDR_VAR 0 9
50680: PUSH
50681: EMPTY
50682: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50683: LD_VAR 0 4
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: LD_INT 3
50699: PUSH
50700: LD_INT 4
50702: PUSH
50703: LD_INT 5
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: IN
50714: NOT
50715: PUSH
50716: LD_VAR 0 1
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: IN
50731: PUSH
50732: LD_VAR 0 5
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: LD_INT 3
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: LIST
50750: IN
50751: NOT
50752: AND
50753: OR
50754: IFFALSE 50758
// exit ;
50756: GO 69149
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50758: LD_VAR 0 1
50762: PUSH
50763: LD_INT 6
50765: PUSH
50766: LD_INT 7
50768: PUSH
50769: LD_INT 8
50771: PUSH
50772: LD_INT 13
50774: PUSH
50775: LD_INT 12
50777: PUSH
50778: LD_INT 15
50780: PUSH
50781: LD_INT 11
50783: PUSH
50784: LD_INT 14
50786: PUSH
50787: LD_INT 10
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: IN
50801: IFFALSE 50811
// btype = b_lab ;
50803: LD_ADDR_VAR 0 1
50807: PUSH
50808: LD_INT 6
50810: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50811: LD_VAR 0 6
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: LIST
50829: IN
50830: NOT
50831: PUSH
50832: LD_VAR 0 1
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: LD_INT 6
50851: PUSH
50852: LD_INT 36
50854: PUSH
50855: LD_INT 4
50857: PUSH
50858: LD_INT 5
50860: PUSH
50861: LD_INT 31
50863: PUSH
50864: LD_INT 32
50866: PUSH
50867: LD_INT 33
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: IN
50883: NOT
50884: PUSH
50885: LD_VAR 0 6
50889: PUSH
50890: LD_INT 1
50892: EQUAL
50893: AND
50894: OR
50895: PUSH
50896: LD_VAR 0 1
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 3
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: IN
50911: NOT
50912: PUSH
50913: LD_VAR 0 6
50917: PUSH
50918: LD_INT 2
50920: EQUAL
50921: AND
50922: OR
50923: IFFALSE 50933
// mode = 0 ;
50925: LD_ADDR_VAR 0 6
50929: PUSH
50930: LD_INT 0
50932: ST_TO_ADDR
// case mode of 0 :
50933: LD_VAR 0 6
50937: PUSH
50938: LD_INT 0
50940: DOUBLE
50941: EQUAL
50942: IFTRUE 50946
50944: GO 62399
50946: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50947: LD_ADDR_VAR 0 11
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51140: LD_ADDR_VAR 0 12
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: NEG
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 3
51297: NEG
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 3
51308: NEG
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51336: LD_ADDR_VAR 0 13
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: NEG
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: LD_INT 3
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 3
51495: NEG
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 3
51507: NEG
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51535: LD_ADDR_VAR 0 14
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: LD_INT 2
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: LD_INT 3
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 3
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 2
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51731: LD_ADDR_VAR 0 15
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 3
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 3
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51924: LD_ADDR_VAR 0 16
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 3
52071: PUSH
52072: LD_INT 2
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 3
52081: PUSH
52082: LD_INT 3
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52117: LD_ADDR_VAR 0 17
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 2
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: LD_INT 2
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: LD_INT 2
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52347: LD_ADDR_VAR 0 18
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: NEG
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52577: LD_ADDR_VAR 0 19
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 2
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: NEG
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: LD_INT 2
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52807: LD_ADDR_VAR 0 20
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 2
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 2
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53037: LD_ADDR_VAR 0 21
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 2
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 2
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53267: LD_ADDR_VAR 0 22
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 2
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53497: LD_ADDR_VAR 0 23
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: LD_INT 2
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 2
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 2
53708: NEG
53709: PUSH
53710: LD_INT 3
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: LD_INT 3
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 2
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53777: LD_ADDR_VAR 0 24
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 2
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: LD_INT 2
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 3
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54053: LD_ADDR_VAR 0 25
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 2
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 2
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: NEG
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 2
54252: NEG
54253: PUSH
54254: LD_INT 2
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 3
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 3
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: LD_INT 3
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 3
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54327: LD_ADDR_VAR 0 26
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: LD_INT 3
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54603: LD_ADDR_VAR 0 27
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 3
54836: NEG
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 3
54848: NEG
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54883: LD_ADDR_VAR 0 28
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: LD_INT 3
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 3
55118: NEG
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 3
55130: NEG
55131: PUSH
55132: LD_INT 2
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55165: LD_ADDR_VAR 0 29
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: LD_INT 2
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: LD_INT 3
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 3
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 3
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 3
55409: NEG
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55444: LD_ADDR_VAR 0 30
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: LD_INT 3
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 3
55687: NEG
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55722: LD_ADDR_VAR 0 31
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: LD_INT 2
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: LD_INT 3
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 3
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 3
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: LD_INT 2
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 3
55965: NEG
55966: PUSH
55967: LD_INT 2
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56000: LD_ADDR_VAR 0 32
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 2
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: LD_INT 3
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: LD_INT 2
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: LD_INT 3
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 3
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56278: LD_ADDR_VAR 0 33
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 3
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 3
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: LD_INT 3
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56557: LD_ADDR_VAR 0 34
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: LD_INT 2
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: NEG
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: LD_INT 3
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 2
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 3
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 3
56802: NEG
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56837: LD_ADDR_VAR 0 35
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56949: LD_ADDR_VAR 0 36
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: LD_INT 2
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57061: LD_ADDR_VAR 0 37
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57173: LD_ADDR_VAR 0 38
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 2
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57285: LD_ADDR_VAR 0 39
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57397: LD_ADDR_VAR 0 40
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: NEG
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57509: LD_ADDR_VAR 0 41
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: LD_INT 3
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 3
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 3
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 3
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 3
57752: PUSH
57753: LD_INT 3
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 2
57772: NEG
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 3
57783: NEG
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 3
57794: NEG
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 3
57806: NEG
57807: PUSH
57808: LD_INT 2
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 3
57818: NEG
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57859: LD_ADDR_VAR 0 42
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 2
57984: PUSH
57985: LD_INT 2
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 2
58037: NEG
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: LD_INT 3
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: LD_INT 3
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 3
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 3
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 3
58105: PUSH
58106: LD_INT 3
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 2
58115: PUSH
58116: LD_INT 3
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: LD_INT 3
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: LD_INT 3
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 3
58168: NEG
58169: PUSH
58170: LD_INT 3
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58209: LD_ADDR_VAR 0 43
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: LD_INT 2
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: LD_INT 2
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 3
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 3
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 3
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 3
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 3
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: LD_INT 3
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: NEG
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 3
58505: NEG
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 3
58516: NEG
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58557: LD_ADDR_VAR 0 44
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 2
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: LD_INT 2
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: LD_INT 3
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 3
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 3
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 3
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 3
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 3
58831: NEG
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 3
58842: NEG
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 3
58854: NEG
58855: PUSH
58856: LD_INT 2
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58907: LD_ADDR_VAR 0 45
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: LD_INT 2
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: LD_INT 2
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: LD_INT 2
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 2
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: LD_INT 3
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 3
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 3
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 3
59204: NEG
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 3
59216: NEG
59217: PUSH
59218: LD_INT 3
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59257: LD_ADDR_VAR 0 46
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: NEG
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 3
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 3
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 3
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 3
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 2
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: NEG
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 3
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59605: LD_ADDR_VAR 0 47
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: NEG
59687: PUSH
59688: LD_INT 2
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59756: LD_ADDR_VAR 0 48
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 2
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59903: LD_ADDR_VAR 0 49
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: LD_INT 1
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: NEG
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: LD_INT 2
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: LD_INT 2
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60047: LD_ADDR_VAR 0 50
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 1
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: LD_INT 2
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60191: LD_ADDR_VAR 0 51
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: NEG
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60338: LD_ADDR_VAR 0 52
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60489: LD_ADDR_VAR 0 53
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 2
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: LD_INT 2
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: NEG
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: LD_INT 2
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60719: LD_ADDR_VAR 0 54
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: LD_INT 1
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: LD_INT 2
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: LD_INT 1
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 2
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 2
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: LD_INT 2
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: LD_INT 2
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: LD_INT 2
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 2
60895: NEG
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: NEG
60919: PUSH
60920: LD_INT 2
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60949: LD_ADDR_VAR 0 55
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 1
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 2
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: LD_INT 2
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 2
61125: NEG
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 2
61136: NEG
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: LD_INT 2
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61179: LD_ADDR_VAR 0 56
61183: PUSH
61184: LD_INT 0
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: NEG
61261: PUSH
61262: LD_INT 2
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: LD_INT 2
61275: NEG
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 2
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: LD_INT 2
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: LD_INT 2
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61409: LD_ADDR_VAR 0 57
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: NEG
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 1
61490: NEG
61491: PUSH
61492: LD_INT 2
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 2
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 2
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: LD_INT 2
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: LD_INT 2
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: LD_INT 2
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 2
61585: NEG
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 2
61608: NEG
61609: PUSH
61610: LD_INT 2
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61639: LD_ADDR_VAR 0 58
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: LD_INT 1
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: LD_INT 1
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: LD_INT 2
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: LD_INT 2
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 2
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 2
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 2
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 2
61815: NEG
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 2
61826: NEG
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 2
61838: NEG
61839: PUSH
61840: LD_INT 2
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61869: LD_ADDR_VAR 0 59
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61957: LD_ADDR_VAR 0 60
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62045: LD_ADDR_VAR 0 61
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62133: LD_ADDR_VAR 0 62
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62221: LD_ADDR_VAR 0 63
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62309: LD_ADDR_VAR 0 64
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 1
62367: NEG
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: ST_TO_ADDR
// end ; 1 :
62397: GO 68294
62399: LD_INT 1
62401: DOUBLE
62402: EQUAL
62403: IFTRUE 62407
62405: GO 65030
62407: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62408: LD_ADDR_VAR 0 11
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 3
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: LD_INT 3
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: LD_INT 2
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: LIST
62451: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62452: LD_ADDR_VAR 0 12
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: LD_INT 1
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 3
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: LIST
62492: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62493: LD_ADDR_VAR 0 13
62497: PUSH
62498: LD_INT 3
62500: PUSH
62501: LD_INT 2
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 3
62510: PUSH
62511: LD_INT 3
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 2
62520: PUSH
62521: LD_INT 3
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: LIST
62532: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62533: LD_ADDR_VAR 0 14
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: LD_INT 3
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: LD_INT 3
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: PUSH
62562: LD_INT 2
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: LIST
62573: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62574: LD_ADDR_VAR 0 15
62578: PUSH
62579: LD_INT 2
62581: NEG
62582: PUSH
62583: LD_INT 1
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 3
62592: NEG
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 3
62603: NEG
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: LIST
62617: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62618: LD_ADDR_VAR 0 16
62622: PUSH
62623: LD_INT 2
62625: NEG
62626: PUSH
62627: LD_INT 3
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 3
62637: NEG
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 3
62649: NEG
62650: PUSH
62651: LD_INT 3
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: LIST
62663: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62664: LD_ADDR_VAR 0 17
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: LD_INT 3
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: LD_INT 3
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: LD_INT 2
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: LIST
62707: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62708: LD_ADDR_VAR 0 18
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 3
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 3
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: LIST
62748: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62749: LD_ADDR_VAR 0 19
62753: PUSH
62754: LD_INT 3
62756: PUSH
62757: LD_INT 2
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 3
62766: PUSH
62767: LD_INT 3
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: LD_INT 3
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: LIST
62788: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62789: LD_ADDR_VAR 0 20
62793: PUSH
62794: LD_INT 1
62796: PUSH
62797: LD_INT 3
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: LD_INT 3
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: LD_INT 2
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: LIST
62829: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62830: LD_ADDR_VAR 0 21
62834: PUSH
62835: LD_INT 2
62837: NEG
62838: PUSH
62839: LD_INT 1
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 3
62848: NEG
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 3
62859: NEG
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: LIST
62873: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62874: LD_ADDR_VAR 0 22
62878: PUSH
62879: LD_INT 2
62881: NEG
62882: PUSH
62883: LD_INT 3
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: LD_INT 2
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 3
62905: NEG
62906: PUSH
62907: LD_INT 3
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: LIST
62919: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62920: LD_ADDR_VAR 0 23
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: LD_INT 3
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 1
62938: NEG
62939: PUSH
62940: LD_INT 4
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: LD_INT 3
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: LIST
62963: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62964: LD_ADDR_VAR 0 24
62968: PUSH
62969: LD_INT 3
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 3
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 4
62992: PUSH
62993: LD_INT 1
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: LIST
63004: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63005: LD_ADDR_VAR 0 25
63009: PUSH
63010: LD_INT 3
63012: PUSH
63013: LD_INT 3
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 4
63022: PUSH
63023: LD_INT 3
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 3
63032: PUSH
63033: LD_INT 4
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: LIST
63044: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63045: LD_ADDR_VAR 0 26
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: LD_INT 4
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: NEG
63073: PUSH
63074: LD_INT 3
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: LIST
63085: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63086: LD_ADDR_VAR 0 27
63090: PUSH
63091: LD_INT 3
63093: NEG
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 3
63104: NEG
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 4
63115: NEG
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: LIST
63129: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63130: LD_ADDR_VAR 0 28
63134: PUSH
63135: LD_INT 3
63137: NEG
63138: PUSH
63139: LD_INT 3
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 3
63149: NEG
63150: PUSH
63151: LD_INT 4
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 4
63161: NEG
63162: PUSH
63163: LD_INT 3
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63176: LD_ADDR_VAR 0 29
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: LD_INT 3
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: PUSH
63207: LD_INT 2
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: NEG
63218: PUSH
63219: LD_INT 4
63221: NEG
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: LD_INT 4
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: LD_INT 3
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 1
63251: NEG
63252: PUSH
63253: LD_INT 5
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: LD_INT 5
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: PUSH
63275: LD_INT 4
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: LD_INT 6
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: LD_INT 6
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: LD_INT 5
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63331: LD_ADDR_VAR 0 30
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 3
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 3
63359: PUSH
63360: LD_INT 1
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 3
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 4
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 4
63390: PUSH
63391: LD_INT 1
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 4
63400: PUSH
63401: LD_INT 1
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 5
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 5
63421: PUSH
63422: LD_INT 1
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 5
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 6
63442: PUSH
63443: LD_INT 0
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 6
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63474: LD_ADDR_VAR 0 31
63478: PUSH
63479: LD_INT 3
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 3
63491: PUSH
63492: LD_INT 3
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: PUSH
63502: LD_INT 3
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 4
63511: PUSH
63512: LD_INT 3
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 4
63521: PUSH
63522: LD_INT 4
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: LD_INT 4
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 5
63541: PUSH
63542: LD_INT 4
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 5
63551: PUSH
63552: LD_INT 5
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 4
63561: PUSH
63562: LD_INT 5
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 6
63571: PUSH
63572: LD_INT 5
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 6
63581: PUSH
63582: LD_INT 6
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 5
63591: PUSH
63592: LD_INT 6
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63613: LD_ADDR_VAR 0 32
63617: PUSH
63618: LD_INT 1
63620: PUSH
63621: LD_INT 3
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: LD_INT 3
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 1
63640: NEG
63641: PUSH
63642: LD_INT 2
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: LD_INT 4
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: LD_INT 4
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: PUSH
63673: LD_INT 3
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: LD_INT 5
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: LD_INT 5
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: NEG
63703: PUSH
63704: LD_INT 4
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: PUSH
63714: LD_INT 6
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: LD_INT 6
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: LD_INT 5
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63756: LD_ADDR_VAR 0 33
63760: PUSH
63761: LD_INT 2
63763: NEG
63764: PUSH
63765: LD_INT 1
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 3
63774: NEG
63775: PUSH
63776: LD_INT 0
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 3
63785: NEG
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 3
63797: NEG
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 4
63808: NEG
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 4
63819: NEG
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 4
63831: NEG
63832: PUSH
63833: LD_INT 1
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 5
63842: NEG
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 5
63853: NEG
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 5
63865: NEG
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 6
63876: NEG
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 6
63887: NEG
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63911: LD_ADDR_VAR 0 34
63915: PUSH
63916: LD_INT 2
63918: NEG
63919: PUSH
63920: LD_INT 3
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: LD_INT 2
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 3
63942: NEG
63943: PUSH
63944: LD_INT 3
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 3
63954: NEG
63955: PUSH
63956: LD_INT 4
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 4
63966: NEG
63967: PUSH
63968: LD_INT 3
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 4
63978: NEG
63979: PUSH
63980: LD_INT 4
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 4
63990: NEG
63991: PUSH
63992: LD_INT 5
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 5
64002: NEG
64003: PUSH
64004: LD_INT 4
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 5
64014: NEG
64015: PUSH
64016: LD_INT 5
64018: NEG
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 5
64026: NEG
64027: PUSH
64028: LD_INT 6
64030: NEG
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 6
64038: NEG
64039: PUSH
64040: LD_INT 5
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 6
64050: NEG
64051: PUSH
64052: LD_INT 6
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64074: LD_ADDR_VAR 0 41
64078: PUSH
64079: LD_INT 0
64081: PUSH
64082: LD_INT 2
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: LD_INT 3
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: PUSH
64105: LD_INT 2
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: LIST
64117: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64118: LD_ADDR_VAR 0 42
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 2
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 3
64146: PUSH
64147: LD_INT 1
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: LIST
64158: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64159: LD_ADDR_VAR 0 43
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: LD_INT 2
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 3
64176: PUSH
64177: LD_INT 2
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 2
64186: PUSH
64187: LD_INT 3
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: LIST
64198: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64199: LD_ADDR_VAR 0 44
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: LD_INT 2
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: LD_INT 3
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: LD_INT 2
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: LIST
64239: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64240: LD_ADDR_VAR 0 45
64244: PUSH
64245: LD_INT 2
64247: NEG
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 2
64258: NEG
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 3
64269: NEG
64270: PUSH
64271: LD_INT 1
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: LIST
64283: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64284: LD_ADDR_VAR 0 46
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: LD_INT 2
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 2
64303: NEG
64304: PUSH
64305: LD_INT 3
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 3
64315: NEG
64316: PUSH
64317: LD_INT 2
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64330: LD_ADDR_VAR 0 47
64334: PUSH
64335: LD_INT 2
64337: NEG
64338: PUSH
64339: LD_INT 3
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: LD_INT 3
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64363: LD_ADDR_VAR 0 48
64367: PUSH
64368: LD_INT 1
64370: PUSH
64371: LD_INT 2
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 2
64381: PUSH
64382: LD_INT 1
64384: NEG
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64394: LD_ADDR_VAR 0 49
64398: PUSH
64399: LD_INT 3
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 3
64411: PUSH
64412: LD_INT 2
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64423: LD_ADDR_VAR 0 50
64427: PUSH
64428: LD_INT 2
64430: PUSH
64431: LD_INT 3
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 1
64440: PUSH
64441: LD_INT 3
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64452: LD_ADDR_VAR 0 51
64456: PUSH
64457: LD_INT 1
64459: NEG
64460: PUSH
64461: LD_INT 2
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 2
64470: NEG
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64483: LD_ADDR_VAR 0 52
64487: PUSH
64488: LD_INT 3
64490: NEG
64491: PUSH
64492: LD_INT 1
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 3
64502: NEG
64503: PUSH
64504: LD_INT 2
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64516: LD_ADDR_VAR 0 53
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: LD_INT 3
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 3
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: LD_INT 2
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64560: LD_ADDR_VAR 0 54
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 3
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: LIST
64600: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64601: LD_ADDR_VAR 0 55
64605: PUSH
64606: LD_INT 3
64608: PUSH
64609: LD_INT 2
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 3
64618: PUSH
64619: LD_INT 3
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 2
64628: PUSH
64629: LD_INT 3
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64641: LD_ADDR_VAR 0 56
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: LD_INT 3
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: LIST
64681: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64682: LD_ADDR_VAR 0 57
64686: PUSH
64687: LD_INT 2
64689: NEG
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 3
64700: NEG
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 3
64711: NEG
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: LIST
64725: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64726: LD_ADDR_VAR 0 58
64730: PUSH
64731: LD_INT 2
64733: NEG
64734: PUSH
64735: LD_INT 3
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 3
64745: NEG
64746: PUSH
64747: LD_INT 2
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 3
64757: NEG
64758: PUSH
64759: LD_INT 3
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: LIST
64771: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64772: LD_ADDR_VAR 0 59
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: LD_INT 2
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 2
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: LIST
64815: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64816: LD_ADDR_VAR 0 60
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 2
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 2
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: LIST
64856: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64857: LD_ADDR_VAR 0 61
64861: PUSH
64862: LD_INT 2
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 2
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 1
64884: PUSH
64885: LD_INT 2
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: LIST
64896: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64897: LD_ADDR_VAR 0 62
64901: PUSH
64902: LD_INT 1
64904: PUSH
64905: LD_INT 2
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: LIST
64937: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64938: LD_ADDR_VAR 0 63
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: LD_INT 1
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 2
64956: NEG
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 2
64967: NEG
64968: PUSH
64969: LD_INT 1
64971: NEG
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: LIST
64981: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64982: LD_ADDR_VAR 0 64
64986: PUSH
64987: LD_INT 1
64989: NEG
64990: PUSH
64991: LD_INT 2
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 2
65001: NEG
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 2
65013: NEG
65014: PUSH
65015: LD_INT 2
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: LIST
65027: ST_TO_ADDR
// end ; 2 :
65028: GO 68294
65030: LD_INT 2
65032: DOUBLE
65033: EQUAL
65034: IFTRUE 65038
65036: GO 68293
65038: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65039: LD_ADDR_VAR 0 29
65043: PUSH
65044: LD_INT 4
65046: PUSH
65047: LD_INT 0
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 4
65056: PUSH
65057: LD_INT 1
65059: NEG
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 5
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 5
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 4
65087: PUSH
65088: LD_INT 1
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 3
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 3
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 3
65118: PUSH
65119: LD_INT 2
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 5
65129: PUSH
65130: LD_INT 2
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 3
65139: PUSH
65140: LD_INT 3
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 3
65149: PUSH
65150: LD_INT 2
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 4
65159: PUSH
65160: LD_INT 3
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 4
65169: PUSH
65170: LD_INT 4
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 3
65179: PUSH
65180: LD_INT 4
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 2
65189: PUSH
65190: LD_INT 3
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 2
65199: PUSH
65200: LD_INT 2
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 4
65209: PUSH
65210: LD_INT 2
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: LD_INT 4
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: LD_INT 4
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 0
65239: PUSH
65240: LD_INT 3
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 4
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: LD_INT 5
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: LD_INT 5
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: LD_INT 4
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 1
65290: NEG
65291: PUSH
65292: LD_INT 3
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: LD_INT 5
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 2
65311: NEG
65312: PUSH
65313: LD_INT 3
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 3
65322: NEG
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 3
65333: NEG
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 2
65345: NEG
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 2
65356: NEG
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 3
65367: NEG
65368: PUSH
65369: LD_INT 1
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 4
65378: NEG
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 4
65389: NEG
65390: PUSH
65391: LD_INT 1
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 4
65401: NEG
65402: PUSH
65403: LD_INT 2
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 2
65413: NEG
65414: PUSH
65415: LD_INT 2
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 4
65424: NEG
65425: PUSH
65426: LD_INT 4
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 4
65436: NEG
65437: PUSH
65438: LD_INT 5
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 3
65448: NEG
65449: PUSH
65450: LD_INT 4
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 3
65460: NEG
65461: PUSH
65462: LD_INT 3
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 4
65472: NEG
65473: PUSH
65474: LD_INT 3
65476: NEG
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 5
65484: NEG
65485: PUSH
65486: LD_INT 4
65488: NEG
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 5
65496: NEG
65497: PUSH
65498: LD_INT 5
65500: NEG
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 3
65508: NEG
65509: PUSH
65510: LD_INT 5
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 5
65520: NEG
65521: PUSH
65522: LD_INT 3
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65577: LD_ADDR_VAR 0 30
65581: PUSH
65582: LD_INT 4
65584: PUSH
65585: LD_INT 4
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 4
65594: PUSH
65595: LD_INT 3
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 5
65604: PUSH
65605: LD_INT 4
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 5
65614: PUSH
65615: LD_INT 5
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 4
65624: PUSH
65625: LD_INT 5
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 3
65634: PUSH
65635: LD_INT 4
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 3
65644: PUSH
65645: LD_INT 3
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 5
65654: PUSH
65655: LD_INT 3
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 3
65664: PUSH
65665: LD_INT 5
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: LD_INT 3
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: LD_INT 2
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: LD_INT 3
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 1
65704: PUSH
65705: LD_INT 4
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: LD_INT 4
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 1
65724: NEG
65725: PUSH
65726: LD_INT 3
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: NEG
65736: PUSH
65737: LD_INT 2
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 2
65746: PUSH
65747: LD_INT 4
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 2
65756: NEG
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 4
65767: NEG
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 4
65778: NEG
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 3
65790: NEG
65791: PUSH
65792: LD_INT 0
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 3
65801: NEG
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 4
65812: NEG
65813: PUSH
65814: LD_INT 1
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 5
65823: NEG
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 5
65834: NEG
65835: PUSH
65836: LD_INT 1
65838: NEG
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 5
65846: NEG
65847: PUSH
65848: LD_INT 2
65850: NEG
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 3
65858: NEG
65859: PUSH
65860: LD_INT 2
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 3
65869: NEG
65870: PUSH
65871: LD_INT 3
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 3
65881: NEG
65882: PUSH
65883: LD_INT 4
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 2
65893: NEG
65894: PUSH
65895: LD_INT 3
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 2
65905: NEG
65906: PUSH
65907: LD_INT 2
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 3
65917: NEG
65918: PUSH
65919: LD_INT 2
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 4
65929: NEG
65930: PUSH
65931: LD_INT 3
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 4
65941: NEG
65942: PUSH
65943: LD_INT 4
65945: NEG
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 2
65953: NEG
65954: PUSH
65955: LD_INT 4
65957: NEG
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 4
65965: NEG
65966: PUSH
65967: LD_INT 2
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: LD_INT 4
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: LD_INT 5
65991: NEG
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 1
65999: PUSH
66000: LD_INT 4
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: LD_INT 3
66013: NEG
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 0
66021: PUSH
66022: LD_INT 3
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 1
66032: NEG
66033: PUSH
66034: LD_INT 4
66036: NEG
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: PUSH
66046: LD_INT 5
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 2
66056: PUSH
66057: LD_INT 3
66059: NEG
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 2
66067: NEG
66068: PUSH
66069: LD_INT 5
66071: NEG
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66124: LD_ADDR_VAR 0 31
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: LD_INT 4
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 0
66141: PUSH
66142: LD_INT 3
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 1
66151: PUSH
66152: LD_INT 4
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 1
66161: PUSH
66162: LD_INT 5
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 0
66171: PUSH
66172: LD_INT 5
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 1
66181: NEG
66182: PUSH
66183: LD_INT 4
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 1
66192: NEG
66193: PUSH
66194: LD_INT 3
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 2
66203: PUSH
66204: LD_INT 5
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 2
66213: NEG
66214: PUSH
66215: LD_INT 3
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 3
66224: NEG
66225: PUSH
66226: LD_INT 0
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 3
66235: NEG
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 2
66247: NEG
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 2
66258: NEG
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 3
66269: NEG
66270: PUSH
66271: LD_INT 1
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 4
66280: NEG
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 4
66291: NEG
66292: PUSH
66293: LD_INT 1
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 4
66303: NEG
66304: PUSH
66305: LD_INT 2
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 2
66315: NEG
66316: PUSH
66317: LD_INT 2
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 4
66326: NEG
66327: PUSH
66328: LD_INT 4
66330: NEG
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 4
66338: NEG
66339: PUSH
66340: LD_INT 5
66342: NEG
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 3
66350: NEG
66351: PUSH
66352: LD_INT 4
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 3
66362: NEG
66363: PUSH
66364: LD_INT 3
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 4
66374: NEG
66375: PUSH
66376: LD_INT 3
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 5
66386: NEG
66387: PUSH
66388: LD_INT 4
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 5
66398: NEG
66399: PUSH
66400: LD_INT 5
66402: NEG
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 3
66410: NEG
66411: PUSH
66412: LD_INT 5
66414: NEG
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 5
66422: NEG
66423: PUSH
66424: LD_INT 3
66426: NEG
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: LD_INT 3
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: LD_INT 4
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 1
66456: PUSH
66457: LD_INT 3
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: LD_INT 2
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: LD_INT 2
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 1
66489: NEG
66490: PUSH
66491: LD_INT 3
66493: NEG
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 1
66501: NEG
66502: PUSH
66503: LD_INT 4
66505: NEG
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 2
66513: PUSH
66514: LD_INT 2
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 2
66524: NEG
66525: PUSH
66526: LD_INT 4
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 4
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 4
66546: PUSH
66547: LD_INT 1
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 5
66557: PUSH
66558: LD_INT 0
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 5
66567: PUSH
66568: LD_INT 1
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 4
66577: PUSH
66578: LD_INT 1
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 3
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 3
66597: PUSH
66598: LD_INT 1
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 3
66608: PUSH
66609: LD_INT 2
66611: NEG
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 5
66619: PUSH
66620: LD_INT 2
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66674: LD_ADDR_VAR 0 32
66678: PUSH
66679: LD_INT 4
66681: NEG
66682: PUSH
66683: LD_INT 0
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 4
66692: NEG
66693: PUSH
66694: LD_INT 1
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 3
66704: NEG
66705: PUSH
66706: LD_INT 0
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 3
66715: NEG
66716: PUSH
66717: LD_INT 1
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 4
66726: NEG
66727: PUSH
66728: LD_INT 1
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 5
66737: NEG
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 5
66748: NEG
66749: PUSH
66750: LD_INT 1
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 5
66760: NEG
66761: PUSH
66762: LD_INT 2
66764: NEG
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 3
66772: NEG
66773: PUSH
66774: LD_INT 2
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 3
66783: NEG
66784: PUSH
66785: LD_INT 3
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 3
66795: NEG
66796: PUSH
66797: LD_INT 4
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 2
66807: NEG
66808: PUSH
66809: LD_INT 3
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 2
66819: NEG
66820: PUSH
66821: LD_INT 2
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 3
66831: NEG
66832: PUSH
66833: LD_INT 2
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 4
66843: NEG
66844: PUSH
66845: LD_INT 3
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 4
66855: NEG
66856: PUSH
66857: LD_INT 4
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 2
66867: NEG
66868: PUSH
66869: LD_INT 4
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 4
66879: NEG
66880: PUSH
66881: LD_INT 2
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: LD_INT 4
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: LD_INT 5
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: LD_INT 4
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 1
66924: PUSH
66925: LD_INT 3
66927: NEG
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 0
66935: PUSH
66936: LD_INT 3
66938: NEG
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: LD_INT 4
66950: NEG
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 1
66958: NEG
66959: PUSH
66960: LD_INT 5
66962: NEG
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 2
66970: PUSH
66971: LD_INT 3
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 2
66981: NEG
66982: PUSH
66983: LD_INT 5
66985: NEG
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 3
66993: PUSH
66994: LD_INT 0
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 3
67003: PUSH
67004: LD_INT 1
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 4
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 4
67024: PUSH
67025: LD_INT 1
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 3
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 2
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 2
67054: PUSH
67055: LD_INT 1
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 2
67065: PUSH
67066: LD_INT 2
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 4
67076: PUSH
67077: LD_INT 2
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 4
67086: PUSH
67087: LD_INT 4
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 4
67096: PUSH
67097: LD_INT 3
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 5
67106: PUSH
67107: LD_INT 4
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 5
67116: PUSH
67117: LD_INT 5
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 4
67126: PUSH
67127: LD_INT 5
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 3
67136: PUSH
67137: LD_INT 4
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 3
67146: PUSH
67147: LD_INT 3
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 5
67156: PUSH
67157: LD_INT 3
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 3
67166: PUSH
67167: LD_INT 5
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67221: LD_ADDR_VAR 0 33
67225: PUSH
67226: LD_INT 4
67228: NEG
67229: PUSH
67230: LD_INT 4
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 4
67240: NEG
67241: PUSH
67242: LD_INT 5
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 3
67252: NEG
67253: PUSH
67254: LD_INT 4
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: LD_INT 3
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 4
67276: NEG
67277: PUSH
67278: LD_INT 3
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 5
67288: NEG
67289: PUSH
67290: LD_INT 4
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 5
67300: NEG
67301: PUSH
67302: LD_INT 5
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 3
67312: NEG
67313: PUSH
67314: LD_INT 5
67316: NEG
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 5
67324: NEG
67325: PUSH
67326: LD_INT 3
67328: NEG
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: LD_INT 4
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: LD_INT 3
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 1
67369: PUSH
67370: LD_INT 2
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 0
67380: PUSH
67381: LD_INT 2
67383: NEG
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 1
67391: NEG
67392: PUSH
67393: LD_INT 3
67395: NEG
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 1
67403: NEG
67404: PUSH
67405: LD_INT 4
67407: NEG
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 2
67415: PUSH
67416: LD_INT 2
67418: NEG
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 2
67426: NEG
67427: PUSH
67428: LD_INT 4
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 4
67438: PUSH
67439: LD_INT 0
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 4
67448: PUSH
67449: LD_INT 1
67451: NEG
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 5
67459: PUSH
67460: LD_INT 0
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 5
67469: PUSH
67470: LD_INT 1
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 4
67479: PUSH
67480: LD_INT 1
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 3
67489: PUSH
67490: LD_INT 0
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 3
67499: PUSH
67500: LD_INT 1
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 3
67510: PUSH
67511: LD_INT 2
67513: NEG
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 5
67521: PUSH
67522: LD_INT 2
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 3
67531: PUSH
67532: LD_INT 3
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 3
67541: PUSH
67542: LD_INT 2
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 4
67551: PUSH
67552: LD_INT 3
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 4
67561: PUSH
67562: LD_INT 4
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 3
67571: PUSH
67572: LD_INT 4
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 2
67581: PUSH
67582: LD_INT 3
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 2
67591: PUSH
67592: LD_INT 2
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 4
67601: PUSH
67602: LD_INT 2
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 2
67611: PUSH
67612: LD_INT 4
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: LD_INT 4
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 0
67631: PUSH
67632: LD_INT 3
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 1
67641: PUSH
67642: LD_INT 4
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: LD_INT 5
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 0
67661: PUSH
67662: LD_INT 5
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 1
67671: NEG
67672: PUSH
67673: LD_INT 4
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 1
67682: NEG
67683: PUSH
67684: LD_INT 3
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 2
67693: PUSH
67694: LD_INT 5
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 2
67703: NEG
67704: PUSH
67705: LD_INT 3
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67759: LD_ADDR_VAR 0 34
67763: PUSH
67764: LD_INT 0
67766: PUSH
67767: LD_INT 4
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 0
67777: PUSH
67778: LD_INT 5
67780: NEG
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 1
67788: PUSH
67789: LD_INT 4
67791: NEG
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 1
67799: PUSH
67800: LD_INT 3
67802: NEG
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: LD_INT 3
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 1
67821: NEG
67822: PUSH
67823: LD_INT 4
67825: NEG
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: PUSH
67835: LD_INT 5
67837: NEG
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 2
67845: PUSH
67846: LD_INT 3
67848: NEG
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 2
67856: NEG
67857: PUSH
67858: LD_INT 5
67860: NEG
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 3
67868: PUSH
67869: LD_INT 0
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 3
67878: PUSH
67879: LD_INT 1
67881: NEG
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 4
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 4
67899: PUSH
67900: LD_INT 1
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 3
67909: PUSH
67910: LD_INT 1
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 2
67919: PUSH
67920: LD_INT 0
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 2
67929: PUSH
67930: LD_INT 1
67932: NEG
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 2
67940: PUSH
67941: LD_INT 2
67943: NEG
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 4
67951: PUSH
67952: LD_INT 2
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 4
67961: PUSH
67962: LD_INT 4
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 4
67971: PUSH
67972: LD_INT 3
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 5
67981: PUSH
67982: LD_INT 4
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 5
67991: PUSH
67992: LD_INT 5
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 4
68001: PUSH
68002: LD_INT 5
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 3
68011: PUSH
68012: LD_INT 4
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 3
68021: PUSH
68022: LD_INT 3
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 5
68031: PUSH
68032: LD_INT 3
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 3
68041: PUSH
68042: LD_INT 5
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 0
68051: PUSH
68052: LD_INT 3
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 0
68061: PUSH
68062: LD_INT 2
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 1
68071: PUSH
68072: LD_INT 3
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 1
68081: PUSH
68082: LD_INT 4
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: LD_INT 4
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 1
68101: NEG
68102: PUSH
68103: LD_INT 3
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 1
68112: NEG
68113: PUSH
68114: LD_INT 2
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 2
68123: PUSH
68124: LD_INT 4
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 2
68133: NEG
68134: PUSH
68135: LD_INT 2
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 4
68144: NEG
68145: PUSH
68146: LD_INT 0
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 4
68155: NEG
68156: PUSH
68157: LD_INT 1
68159: NEG
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 3
68167: NEG
68168: PUSH
68169: LD_INT 0
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 3
68178: NEG
68179: PUSH
68180: LD_INT 1
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 4
68189: NEG
68190: PUSH
68191: LD_INT 1
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 5
68200: NEG
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 5
68211: NEG
68212: PUSH
68213: LD_INT 1
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 5
68223: NEG
68224: PUSH
68225: LD_INT 2
68227: NEG
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 3
68235: NEG
68236: PUSH
68237: LD_INT 2
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: ST_TO_ADDR
// end ; end ;
68291: GO 68294
68293: POP
// case btype of b_depot , b_warehouse :
68294: LD_VAR 0 1
68298: PUSH
68299: LD_INT 0
68301: DOUBLE
68302: EQUAL
68303: IFTRUE 68313
68305: LD_INT 1
68307: DOUBLE
68308: EQUAL
68309: IFTRUE 68313
68311: GO 68514
68313: POP
// case nation of nation_american :
68314: LD_VAR 0 5
68318: PUSH
68319: LD_INT 1
68321: DOUBLE
68322: EQUAL
68323: IFTRUE 68327
68325: GO 68383
68327: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68328: LD_ADDR_VAR 0 9
68332: PUSH
68333: LD_VAR 0 11
68337: PUSH
68338: LD_VAR 0 12
68342: PUSH
68343: LD_VAR 0 13
68347: PUSH
68348: LD_VAR 0 14
68352: PUSH
68353: LD_VAR 0 15
68357: PUSH
68358: LD_VAR 0 16
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: PUSH
68371: LD_VAR 0 4
68375: PUSH
68376: LD_INT 1
68378: PLUS
68379: ARRAY
68380: ST_TO_ADDR
68381: GO 68512
68383: LD_INT 2
68385: DOUBLE
68386: EQUAL
68387: IFTRUE 68391
68389: GO 68447
68391: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68392: LD_ADDR_VAR 0 9
68396: PUSH
68397: LD_VAR 0 17
68401: PUSH
68402: LD_VAR 0 18
68406: PUSH
68407: LD_VAR 0 19
68411: PUSH
68412: LD_VAR 0 20
68416: PUSH
68417: LD_VAR 0 21
68421: PUSH
68422: LD_VAR 0 22
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: PUSH
68435: LD_VAR 0 4
68439: PUSH
68440: LD_INT 1
68442: PLUS
68443: ARRAY
68444: ST_TO_ADDR
68445: GO 68512
68447: LD_INT 3
68449: DOUBLE
68450: EQUAL
68451: IFTRUE 68455
68453: GO 68511
68455: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68456: LD_ADDR_VAR 0 9
68460: PUSH
68461: LD_VAR 0 23
68465: PUSH
68466: LD_VAR 0 24
68470: PUSH
68471: LD_VAR 0 25
68475: PUSH
68476: LD_VAR 0 26
68480: PUSH
68481: LD_VAR 0 27
68485: PUSH
68486: LD_VAR 0 28
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: PUSH
68499: LD_VAR 0 4
68503: PUSH
68504: LD_INT 1
68506: PLUS
68507: ARRAY
68508: ST_TO_ADDR
68509: GO 68512
68511: POP
68512: GO 69067
68514: LD_INT 2
68516: DOUBLE
68517: EQUAL
68518: IFTRUE 68528
68520: LD_INT 3
68522: DOUBLE
68523: EQUAL
68524: IFTRUE 68528
68526: GO 68584
68528: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68529: LD_ADDR_VAR 0 9
68533: PUSH
68534: LD_VAR 0 29
68538: PUSH
68539: LD_VAR 0 30
68543: PUSH
68544: LD_VAR 0 31
68548: PUSH
68549: LD_VAR 0 32
68553: PUSH
68554: LD_VAR 0 33
68558: PUSH
68559: LD_VAR 0 34
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: PUSH
68572: LD_VAR 0 4
68576: PUSH
68577: LD_INT 1
68579: PLUS
68580: ARRAY
68581: ST_TO_ADDR
68582: GO 69067
68584: LD_INT 16
68586: DOUBLE
68587: EQUAL
68588: IFTRUE 68646
68590: LD_INT 17
68592: DOUBLE
68593: EQUAL
68594: IFTRUE 68646
68596: LD_INT 18
68598: DOUBLE
68599: EQUAL
68600: IFTRUE 68646
68602: LD_INT 19
68604: DOUBLE
68605: EQUAL
68606: IFTRUE 68646
68608: LD_INT 22
68610: DOUBLE
68611: EQUAL
68612: IFTRUE 68646
68614: LD_INT 20
68616: DOUBLE
68617: EQUAL
68618: IFTRUE 68646
68620: LD_INT 21
68622: DOUBLE
68623: EQUAL
68624: IFTRUE 68646
68626: LD_INT 23
68628: DOUBLE
68629: EQUAL
68630: IFTRUE 68646
68632: LD_INT 24
68634: DOUBLE
68635: EQUAL
68636: IFTRUE 68646
68638: LD_INT 25
68640: DOUBLE
68641: EQUAL
68642: IFTRUE 68646
68644: GO 68702
68646: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68647: LD_ADDR_VAR 0 9
68651: PUSH
68652: LD_VAR 0 35
68656: PUSH
68657: LD_VAR 0 36
68661: PUSH
68662: LD_VAR 0 37
68666: PUSH
68667: LD_VAR 0 38
68671: PUSH
68672: LD_VAR 0 39
68676: PUSH
68677: LD_VAR 0 40
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: PUSH
68690: LD_VAR 0 4
68694: PUSH
68695: LD_INT 1
68697: PLUS
68698: ARRAY
68699: ST_TO_ADDR
68700: GO 69067
68702: LD_INT 6
68704: DOUBLE
68705: EQUAL
68706: IFTRUE 68758
68708: LD_INT 7
68710: DOUBLE
68711: EQUAL
68712: IFTRUE 68758
68714: LD_INT 8
68716: DOUBLE
68717: EQUAL
68718: IFTRUE 68758
68720: LD_INT 13
68722: DOUBLE
68723: EQUAL
68724: IFTRUE 68758
68726: LD_INT 12
68728: DOUBLE
68729: EQUAL
68730: IFTRUE 68758
68732: LD_INT 15
68734: DOUBLE
68735: EQUAL
68736: IFTRUE 68758
68738: LD_INT 11
68740: DOUBLE
68741: EQUAL
68742: IFTRUE 68758
68744: LD_INT 14
68746: DOUBLE
68747: EQUAL
68748: IFTRUE 68758
68750: LD_INT 10
68752: DOUBLE
68753: EQUAL
68754: IFTRUE 68758
68756: GO 68814
68758: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68759: LD_ADDR_VAR 0 9
68763: PUSH
68764: LD_VAR 0 41
68768: PUSH
68769: LD_VAR 0 42
68773: PUSH
68774: LD_VAR 0 43
68778: PUSH
68779: LD_VAR 0 44
68783: PUSH
68784: LD_VAR 0 45
68788: PUSH
68789: LD_VAR 0 46
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: PUSH
68802: LD_VAR 0 4
68806: PUSH
68807: LD_INT 1
68809: PLUS
68810: ARRAY
68811: ST_TO_ADDR
68812: GO 69067
68814: LD_INT 36
68816: DOUBLE
68817: EQUAL
68818: IFTRUE 68822
68820: GO 68878
68822: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68823: LD_ADDR_VAR 0 9
68827: PUSH
68828: LD_VAR 0 47
68832: PUSH
68833: LD_VAR 0 48
68837: PUSH
68838: LD_VAR 0 49
68842: PUSH
68843: LD_VAR 0 50
68847: PUSH
68848: LD_VAR 0 51
68852: PUSH
68853: LD_VAR 0 52
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: PUSH
68866: LD_VAR 0 4
68870: PUSH
68871: LD_INT 1
68873: PLUS
68874: ARRAY
68875: ST_TO_ADDR
68876: GO 69067
68878: LD_INT 4
68880: DOUBLE
68881: EQUAL
68882: IFTRUE 68904
68884: LD_INT 5
68886: DOUBLE
68887: EQUAL
68888: IFTRUE 68904
68890: LD_INT 34
68892: DOUBLE
68893: EQUAL
68894: IFTRUE 68904
68896: LD_INT 37
68898: DOUBLE
68899: EQUAL
68900: IFTRUE 68904
68902: GO 68960
68904: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68905: LD_ADDR_VAR 0 9
68909: PUSH
68910: LD_VAR 0 53
68914: PUSH
68915: LD_VAR 0 54
68919: PUSH
68920: LD_VAR 0 55
68924: PUSH
68925: LD_VAR 0 56
68929: PUSH
68930: LD_VAR 0 57
68934: PUSH
68935: LD_VAR 0 58
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: PUSH
68948: LD_VAR 0 4
68952: PUSH
68953: LD_INT 1
68955: PLUS
68956: ARRAY
68957: ST_TO_ADDR
68958: GO 69067
68960: LD_INT 31
68962: DOUBLE
68963: EQUAL
68964: IFTRUE 69010
68966: LD_INT 32
68968: DOUBLE
68969: EQUAL
68970: IFTRUE 69010
68972: LD_INT 33
68974: DOUBLE
68975: EQUAL
68976: IFTRUE 69010
68978: LD_INT 27
68980: DOUBLE
68981: EQUAL
68982: IFTRUE 69010
68984: LD_INT 26
68986: DOUBLE
68987: EQUAL
68988: IFTRUE 69010
68990: LD_INT 28
68992: DOUBLE
68993: EQUAL
68994: IFTRUE 69010
68996: LD_INT 29
68998: DOUBLE
68999: EQUAL
69000: IFTRUE 69010
69002: LD_INT 30
69004: DOUBLE
69005: EQUAL
69006: IFTRUE 69010
69008: GO 69066
69010: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69011: LD_ADDR_VAR 0 9
69015: PUSH
69016: LD_VAR 0 59
69020: PUSH
69021: LD_VAR 0 60
69025: PUSH
69026: LD_VAR 0 61
69030: PUSH
69031: LD_VAR 0 62
69035: PUSH
69036: LD_VAR 0 63
69040: PUSH
69041: LD_VAR 0 64
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: PUSH
69054: LD_VAR 0 4
69058: PUSH
69059: LD_INT 1
69061: PLUS
69062: ARRAY
69063: ST_TO_ADDR
69064: GO 69067
69066: POP
// temp_list2 = [ ] ;
69067: LD_ADDR_VAR 0 10
69071: PUSH
69072: EMPTY
69073: ST_TO_ADDR
// for i in temp_list do
69074: LD_ADDR_VAR 0 8
69078: PUSH
69079: LD_VAR 0 9
69083: PUSH
69084: FOR_IN
69085: IFFALSE 69137
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69087: LD_ADDR_VAR 0 10
69091: PUSH
69092: LD_VAR 0 10
69096: PUSH
69097: LD_VAR 0 8
69101: PUSH
69102: LD_INT 1
69104: ARRAY
69105: PUSH
69106: LD_VAR 0 2
69110: PLUS
69111: PUSH
69112: LD_VAR 0 8
69116: PUSH
69117: LD_INT 2
69119: ARRAY
69120: PUSH
69121: LD_VAR 0 3
69125: PLUS
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: EMPTY
69132: LIST
69133: ADD
69134: ST_TO_ADDR
69135: GO 69084
69137: POP
69138: POP
// result = temp_list2 ;
69139: LD_ADDR_VAR 0 7
69143: PUSH
69144: LD_VAR 0 10
69148: ST_TO_ADDR
// end ;
69149: LD_VAR 0 7
69153: RET
// export function EnemyInRange ( unit , dist ) ; begin
69154: LD_INT 0
69156: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69157: LD_ADDR_VAR 0 3
69161: PUSH
69162: LD_VAR 0 1
69166: PPUSH
69167: CALL_OW 255
69171: PPUSH
69172: LD_VAR 0 1
69176: PPUSH
69177: CALL_OW 250
69181: PPUSH
69182: LD_VAR 0 1
69186: PPUSH
69187: CALL_OW 251
69191: PPUSH
69192: LD_VAR 0 2
69196: PPUSH
69197: CALL 42550 0 4
69201: PUSH
69202: LD_INT 4
69204: ARRAY
69205: ST_TO_ADDR
// end ;
69206: LD_VAR 0 3
69210: RET
// export function PlayerSeeMe ( unit ) ; begin
69211: LD_INT 0
69213: PPUSH
// result := See ( your_side , unit ) ;
69214: LD_ADDR_VAR 0 2
69218: PUSH
69219: LD_OWVAR 2
69223: PPUSH
69224: LD_VAR 0 1
69228: PPUSH
69229: CALL_OW 292
69233: ST_TO_ADDR
// end ;
69234: LD_VAR 0 2
69238: RET
// export function ReverseDir ( unit ) ; begin
69239: LD_INT 0
69241: PPUSH
// if not unit then
69242: LD_VAR 0 1
69246: NOT
69247: IFFALSE 69251
// exit ;
69249: GO 69274
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69251: LD_ADDR_VAR 0 2
69255: PUSH
69256: LD_VAR 0 1
69260: PPUSH
69261: CALL_OW 254
69265: PUSH
69266: LD_INT 3
69268: PLUS
69269: PUSH
69270: LD_INT 6
69272: MOD
69273: ST_TO_ADDR
// end ;
69274: LD_VAR 0 2
69278: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69279: LD_INT 0
69281: PPUSH
69282: PPUSH
69283: PPUSH
69284: PPUSH
69285: PPUSH
// if not hexes then
69286: LD_VAR 0 2
69290: NOT
69291: IFFALSE 69295
// exit ;
69293: GO 69443
// dist := 9999 ;
69295: LD_ADDR_VAR 0 5
69299: PUSH
69300: LD_INT 9999
69302: ST_TO_ADDR
// for i = 1 to hexes do
69303: LD_ADDR_VAR 0 4
69307: PUSH
69308: DOUBLE
69309: LD_INT 1
69311: DEC
69312: ST_TO_ADDR
69313: LD_VAR 0 2
69317: PUSH
69318: FOR_TO
69319: IFFALSE 69431
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69321: LD_VAR 0 1
69325: PPUSH
69326: LD_VAR 0 2
69330: PUSH
69331: LD_VAR 0 4
69335: ARRAY
69336: PUSH
69337: LD_INT 1
69339: ARRAY
69340: PPUSH
69341: LD_VAR 0 2
69345: PUSH
69346: LD_VAR 0 4
69350: ARRAY
69351: PUSH
69352: LD_INT 2
69354: ARRAY
69355: PPUSH
69356: CALL_OW 297
69360: PUSH
69361: LD_VAR 0 5
69365: LESS
69366: IFFALSE 69429
// begin hex := hexes [ i ] ;
69368: LD_ADDR_VAR 0 7
69372: PUSH
69373: LD_VAR 0 2
69377: PUSH
69378: LD_VAR 0 4
69382: ARRAY
69383: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69384: LD_ADDR_VAR 0 5
69388: PUSH
69389: LD_VAR 0 1
69393: PPUSH
69394: LD_VAR 0 2
69398: PUSH
69399: LD_VAR 0 4
69403: ARRAY
69404: PUSH
69405: LD_INT 1
69407: ARRAY
69408: PPUSH
69409: LD_VAR 0 2
69413: PUSH
69414: LD_VAR 0 4
69418: ARRAY
69419: PUSH
69420: LD_INT 2
69422: ARRAY
69423: PPUSH
69424: CALL_OW 297
69428: ST_TO_ADDR
// end ; end ;
69429: GO 69318
69431: POP
69432: POP
// result := hex ;
69433: LD_ADDR_VAR 0 3
69437: PUSH
69438: LD_VAR 0 7
69442: ST_TO_ADDR
// end ;
69443: LD_VAR 0 3
69447: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69448: LD_INT 0
69450: PPUSH
69451: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69452: LD_VAR 0 1
69456: NOT
69457: PUSH
69458: LD_VAR 0 1
69462: PUSH
69463: LD_INT 21
69465: PUSH
69466: LD_INT 2
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 23
69475: PUSH
69476: LD_INT 2
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PPUSH
69487: CALL_OW 69
69491: IN
69492: NOT
69493: OR
69494: IFFALSE 69498
// exit ;
69496: GO 69545
// for i = 1 to 3 do
69498: LD_ADDR_VAR 0 3
69502: PUSH
69503: DOUBLE
69504: LD_INT 1
69506: DEC
69507: ST_TO_ADDR
69508: LD_INT 3
69510: PUSH
69511: FOR_TO
69512: IFFALSE 69543
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69514: LD_VAR 0 1
69518: PPUSH
69519: CALL_OW 250
69523: PPUSH
69524: LD_VAR 0 1
69528: PPUSH
69529: CALL_OW 251
69533: PPUSH
69534: LD_INT 1
69536: PPUSH
69537: CALL_OW 453
69541: GO 69511
69543: POP
69544: POP
// end ;
69545: LD_VAR 0 2
69549: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69550: LD_INT 0
69552: PPUSH
69553: PPUSH
69554: PPUSH
69555: PPUSH
69556: PPUSH
69557: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69558: LD_VAR 0 1
69562: NOT
69563: PUSH
69564: LD_VAR 0 2
69568: NOT
69569: OR
69570: PUSH
69571: LD_VAR 0 1
69575: PPUSH
69576: CALL_OW 314
69580: OR
69581: IFFALSE 69585
// exit ;
69583: GO 70026
// x := GetX ( enemy_unit ) ;
69585: LD_ADDR_VAR 0 7
69589: PUSH
69590: LD_VAR 0 2
69594: PPUSH
69595: CALL_OW 250
69599: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69600: LD_ADDR_VAR 0 8
69604: PUSH
69605: LD_VAR 0 2
69609: PPUSH
69610: CALL_OW 251
69614: ST_TO_ADDR
// if not x or not y then
69615: LD_VAR 0 7
69619: NOT
69620: PUSH
69621: LD_VAR 0 8
69625: NOT
69626: OR
69627: IFFALSE 69631
// exit ;
69629: GO 70026
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69631: LD_ADDR_VAR 0 6
69635: PUSH
69636: LD_VAR 0 7
69640: PPUSH
69641: LD_INT 0
69643: PPUSH
69644: LD_INT 4
69646: PPUSH
69647: CALL_OW 272
69651: PUSH
69652: LD_VAR 0 8
69656: PPUSH
69657: LD_INT 0
69659: PPUSH
69660: LD_INT 4
69662: PPUSH
69663: CALL_OW 273
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_VAR 0 7
69676: PPUSH
69677: LD_INT 1
69679: PPUSH
69680: LD_INT 4
69682: PPUSH
69683: CALL_OW 272
69687: PUSH
69688: LD_VAR 0 8
69692: PPUSH
69693: LD_INT 1
69695: PPUSH
69696: LD_INT 4
69698: PPUSH
69699: CALL_OW 273
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_VAR 0 7
69712: PPUSH
69713: LD_INT 2
69715: PPUSH
69716: LD_INT 4
69718: PPUSH
69719: CALL_OW 272
69723: PUSH
69724: LD_VAR 0 8
69728: PPUSH
69729: LD_INT 2
69731: PPUSH
69732: LD_INT 4
69734: PPUSH
69735: CALL_OW 273
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_VAR 0 7
69748: PPUSH
69749: LD_INT 3
69751: PPUSH
69752: LD_INT 4
69754: PPUSH
69755: CALL_OW 272
69759: PUSH
69760: LD_VAR 0 8
69764: PPUSH
69765: LD_INT 3
69767: PPUSH
69768: LD_INT 4
69770: PPUSH
69771: CALL_OW 273
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_VAR 0 7
69784: PPUSH
69785: LD_INT 4
69787: PPUSH
69788: LD_INT 4
69790: PPUSH
69791: CALL_OW 272
69795: PUSH
69796: LD_VAR 0 8
69800: PPUSH
69801: LD_INT 4
69803: PPUSH
69804: LD_INT 4
69806: PPUSH
69807: CALL_OW 273
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_VAR 0 7
69820: PPUSH
69821: LD_INT 5
69823: PPUSH
69824: LD_INT 4
69826: PPUSH
69827: CALL_OW 272
69831: PUSH
69832: LD_VAR 0 8
69836: PPUSH
69837: LD_INT 5
69839: PPUSH
69840: LD_INT 4
69842: PPUSH
69843: CALL_OW 273
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: ST_TO_ADDR
// for i = tmp downto 1 do
69860: LD_ADDR_VAR 0 4
69864: PUSH
69865: DOUBLE
69866: LD_VAR 0 6
69870: INC
69871: ST_TO_ADDR
69872: LD_INT 1
69874: PUSH
69875: FOR_DOWNTO
69876: IFFALSE 69977
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69878: LD_VAR 0 6
69882: PUSH
69883: LD_VAR 0 4
69887: ARRAY
69888: PUSH
69889: LD_INT 1
69891: ARRAY
69892: PPUSH
69893: LD_VAR 0 6
69897: PUSH
69898: LD_VAR 0 4
69902: ARRAY
69903: PUSH
69904: LD_INT 2
69906: ARRAY
69907: PPUSH
69908: CALL_OW 488
69912: NOT
69913: PUSH
69914: LD_VAR 0 6
69918: PUSH
69919: LD_VAR 0 4
69923: ARRAY
69924: PUSH
69925: LD_INT 1
69927: ARRAY
69928: PPUSH
69929: LD_VAR 0 6
69933: PUSH
69934: LD_VAR 0 4
69938: ARRAY
69939: PUSH
69940: LD_INT 2
69942: ARRAY
69943: PPUSH
69944: CALL_OW 428
69948: PUSH
69949: LD_INT 0
69951: NONEQUAL
69952: OR
69953: IFFALSE 69975
// tmp := Delete ( tmp , i ) ;
69955: LD_ADDR_VAR 0 6
69959: PUSH
69960: LD_VAR 0 6
69964: PPUSH
69965: LD_VAR 0 4
69969: PPUSH
69970: CALL_OW 3
69974: ST_TO_ADDR
69975: GO 69875
69977: POP
69978: POP
// j := GetClosestHex ( unit , tmp ) ;
69979: LD_ADDR_VAR 0 5
69983: PUSH
69984: LD_VAR 0 1
69988: PPUSH
69989: LD_VAR 0 6
69993: PPUSH
69994: CALL 69279 0 2
69998: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69999: LD_VAR 0 1
70003: PPUSH
70004: LD_VAR 0 5
70008: PUSH
70009: LD_INT 1
70011: ARRAY
70012: PPUSH
70013: LD_VAR 0 5
70017: PUSH
70018: LD_INT 2
70020: ARRAY
70021: PPUSH
70022: CALL_OW 111
// end ;
70026: LD_VAR 0 3
70030: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70031: LD_INT 0
70033: PPUSH
70034: PPUSH
70035: PPUSH
// uc_side = 0 ;
70036: LD_ADDR_OWVAR 20
70040: PUSH
70041: LD_INT 0
70043: ST_TO_ADDR
// uc_nation = 0 ;
70044: LD_ADDR_OWVAR 21
70048: PUSH
70049: LD_INT 0
70051: ST_TO_ADDR
// InitHc_All ( ) ;
70052: CALL_OW 584
// InitVc ;
70056: CALL_OW 20
// if mastodonts then
70060: LD_VAR 0 6
70064: IFFALSE 70131
// for i = 1 to mastodonts do
70066: LD_ADDR_VAR 0 11
70070: PUSH
70071: DOUBLE
70072: LD_INT 1
70074: DEC
70075: ST_TO_ADDR
70076: LD_VAR 0 6
70080: PUSH
70081: FOR_TO
70082: IFFALSE 70129
// begin vc_chassis := 31 ;
70084: LD_ADDR_OWVAR 37
70088: PUSH
70089: LD_INT 31
70091: ST_TO_ADDR
// vc_control := control_rider ;
70092: LD_ADDR_OWVAR 38
70096: PUSH
70097: LD_INT 4
70099: ST_TO_ADDR
// animal := CreateVehicle ;
70100: LD_ADDR_VAR 0 12
70104: PUSH
70105: CALL_OW 45
70109: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70110: LD_VAR 0 12
70114: PPUSH
70115: LD_VAR 0 8
70119: PPUSH
70120: LD_INT 0
70122: PPUSH
70123: CALL 72319 0 3
// end ;
70127: GO 70081
70129: POP
70130: POP
// if horses then
70131: LD_VAR 0 5
70135: IFFALSE 70202
// for i = 1 to horses do
70137: LD_ADDR_VAR 0 11
70141: PUSH
70142: DOUBLE
70143: LD_INT 1
70145: DEC
70146: ST_TO_ADDR
70147: LD_VAR 0 5
70151: PUSH
70152: FOR_TO
70153: IFFALSE 70200
// begin hc_class := 21 ;
70155: LD_ADDR_OWVAR 28
70159: PUSH
70160: LD_INT 21
70162: ST_TO_ADDR
// hc_gallery :=  ;
70163: LD_ADDR_OWVAR 33
70167: PUSH
70168: LD_STRING 
70170: ST_TO_ADDR
// animal := CreateHuman ;
70171: LD_ADDR_VAR 0 12
70175: PUSH
70176: CALL_OW 44
70180: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70181: LD_VAR 0 12
70185: PPUSH
70186: LD_VAR 0 8
70190: PPUSH
70191: LD_INT 0
70193: PPUSH
70194: CALL 72319 0 3
// end ;
70198: GO 70152
70200: POP
70201: POP
// if birds then
70202: LD_VAR 0 1
70206: IFFALSE 70273
// for i = 1 to birds do
70208: LD_ADDR_VAR 0 11
70212: PUSH
70213: DOUBLE
70214: LD_INT 1
70216: DEC
70217: ST_TO_ADDR
70218: LD_VAR 0 1
70222: PUSH
70223: FOR_TO
70224: IFFALSE 70271
// begin hc_class = 18 ;
70226: LD_ADDR_OWVAR 28
70230: PUSH
70231: LD_INT 18
70233: ST_TO_ADDR
// hc_gallery =  ;
70234: LD_ADDR_OWVAR 33
70238: PUSH
70239: LD_STRING 
70241: ST_TO_ADDR
// animal := CreateHuman ;
70242: LD_ADDR_VAR 0 12
70246: PUSH
70247: CALL_OW 44
70251: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70252: LD_VAR 0 12
70256: PPUSH
70257: LD_VAR 0 8
70261: PPUSH
70262: LD_INT 0
70264: PPUSH
70265: CALL 72319 0 3
// end ;
70269: GO 70223
70271: POP
70272: POP
// if tigers then
70273: LD_VAR 0 2
70277: IFFALSE 70361
// for i = 1 to tigers do
70279: LD_ADDR_VAR 0 11
70283: PUSH
70284: DOUBLE
70285: LD_INT 1
70287: DEC
70288: ST_TO_ADDR
70289: LD_VAR 0 2
70293: PUSH
70294: FOR_TO
70295: IFFALSE 70359
// begin hc_class = class_tiger ;
70297: LD_ADDR_OWVAR 28
70301: PUSH
70302: LD_INT 14
70304: ST_TO_ADDR
// hc_gallery =  ;
70305: LD_ADDR_OWVAR 33
70309: PUSH
70310: LD_STRING 
70312: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70313: LD_ADDR_OWVAR 35
70317: PUSH
70318: LD_INT 7
70320: NEG
70321: PPUSH
70322: LD_INT 7
70324: PPUSH
70325: CALL_OW 12
70329: ST_TO_ADDR
// animal := CreateHuman ;
70330: LD_ADDR_VAR 0 12
70334: PUSH
70335: CALL_OW 44
70339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70340: LD_VAR 0 12
70344: PPUSH
70345: LD_VAR 0 8
70349: PPUSH
70350: LD_INT 0
70352: PPUSH
70353: CALL 72319 0 3
// end ;
70357: GO 70294
70359: POP
70360: POP
// if apemans then
70361: LD_VAR 0 3
70365: IFFALSE 70488
// for i = 1 to apemans do
70367: LD_ADDR_VAR 0 11
70371: PUSH
70372: DOUBLE
70373: LD_INT 1
70375: DEC
70376: ST_TO_ADDR
70377: LD_VAR 0 3
70381: PUSH
70382: FOR_TO
70383: IFFALSE 70486
// begin hc_class = class_apeman ;
70385: LD_ADDR_OWVAR 28
70389: PUSH
70390: LD_INT 12
70392: ST_TO_ADDR
// hc_gallery =  ;
70393: LD_ADDR_OWVAR 33
70397: PUSH
70398: LD_STRING 
70400: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70401: LD_ADDR_OWVAR 35
70405: PUSH
70406: LD_INT 2
70408: NEG
70409: PPUSH
70410: LD_INT 2
70412: PPUSH
70413: CALL_OW 12
70417: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70418: LD_ADDR_OWVAR 31
70422: PUSH
70423: LD_INT 1
70425: PPUSH
70426: LD_INT 3
70428: PPUSH
70429: CALL_OW 12
70433: PUSH
70434: LD_INT 1
70436: PPUSH
70437: LD_INT 3
70439: PPUSH
70440: CALL_OW 12
70444: PUSH
70445: LD_INT 0
70447: PUSH
70448: LD_INT 0
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: ST_TO_ADDR
// animal := CreateHuman ;
70457: LD_ADDR_VAR 0 12
70461: PUSH
70462: CALL_OW 44
70466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70467: LD_VAR 0 12
70471: PPUSH
70472: LD_VAR 0 8
70476: PPUSH
70477: LD_INT 0
70479: PPUSH
70480: CALL 72319 0 3
// end ;
70484: GO 70382
70486: POP
70487: POP
// if enchidnas then
70488: LD_VAR 0 4
70492: IFFALSE 70559
// for i = 1 to enchidnas do
70494: LD_ADDR_VAR 0 11
70498: PUSH
70499: DOUBLE
70500: LD_INT 1
70502: DEC
70503: ST_TO_ADDR
70504: LD_VAR 0 4
70508: PUSH
70509: FOR_TO
70510: IFFALSE 70557
// begin hc_class = 13 ;
70512: LD_ADDR_OWVAR 28
70516: PUSH
70517: LD_INT 13
70519: ST_TO_ADDR
// hc_gallery =  ;
70520: LD_ADDR_OWVAR 33
70524: PUSH
70525: LD_STRING 
70527: ST_TO_ADDR
// animal := CreateHuman ;
70528: LD_ADDR_VAR 0 12
70532: PUSH
70533: CALL_OW 44
70537: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70538: LD_VAR 0 12
70542: PPUSH
70543: LD_VAR 0 8
70547: PPUSH
70548: LD_INT 0
70550: PPUSH
70551: CALL 72319 0 3
// end ;
70555: GO 70509
70557: POP
70558: POP
// if fishes then
70559: LD_VAR 0 7
70563: IFFALSE 70630
// for i = 1 to fishes do
70565: LD_ADDR_VAR 0 11
70569: PUSH
70570: DOUBLE
70571: LD_INT 1
70573: DEC
70574: ST_TO_ADDR
70575: LD_VAR 0 7
70579: PUSH
70580: FOR_TO
70581: IFFALSE 70628
// begin hc_class = 20 ;
70583: LD_ADDR_OWVAR 28
70587: PUSH
70588: LD_INT 20
70590: ST_TO_ADDR
// hc_gallery =  ;
70591: LD_ADDR_OWVAR 33
70595: PUSH
70596: LD_STRING 
70598: ST_TO_ADDR
// animal := CreateHuman ;
70599: LD_ADDR_VAR 0 12
70603: PUSH
70604: CALL_OW 44
70608: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70609: LD_VAR 0 12
70613: PPUSH
70614: LD_VAR 0 9
70618: PPUSH
70619: LD_INT 0
70621: PPUSH
70622: CALL 72319 0 3
// end ;
70626: GO 70580
70628: POP
70629: POP
// end ;
70630: LD_VAR 0 10
70634: RET
// export function WantHeal ( sci , unit ) ; begin
70635: LD_INT 0
70637: PPUSH
// if GetTaskList ( sci ) > 0 then
70638: LD_VAR 0 1
70642: PPUSH
70643: CALL_OW 437
70647: PUSH
70648: LD_INT 0
70650: GREATER
70651: IFFALSE 70721
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70653: LD_VAR 0 1
70657: PPUSH
70658: CALL_OW 437
70662: PUSH
70663: LD_INT 1
70665: ARRAY
70666: PUSH
70667: LD_INT 1
70669: ARRAY
70670: PUSH
70671: LD_STRING l
70673: EQUAL
70674: PUSH
70675: LD_VAR 0 1
70679: PPUSH
70680: CALL_OW 437
70684: PUSH
70685: LD_INT 1
70687: ARRAY
70688: PUSH
70689: LD_INT 4
70691: ARRAY
70692: PUSH
70693: LD_VAR 0 2
70697: EQUAL
70698: AND
70699: IFFALSE 70711
// result := true else
70701: LD_ADDR_VAR 0 3
70705: PUSH
70706: LD_INT 1
70708: ST_TO_ADDR
70709: GO 70719
// result := false ;
70711: LD_ADDR_VAR 0 3
70715: PUSH
70716: LD_INT 0
70718: ST_TO_ADDR
// end else
70719: GO 70729
// result := false ;
70721: LD_ADDR_VAR 0 3
70725: PUSH
70726: LD_INT 0
70728: ST_TO_ADDR
// end ;
70729: LD_VAR 0 3
70733: RET
// export function HealTarget ( sci ) ; begin
70734: LD_INT 0
70736: PPUSH
// if not sci then
70737: LD_VAR 0 1
70741: NOT
70742: IFFALSE 70746
// exit ;
70744: GO 70811
// result := 0 ;
70746: LD_ADDR_VAR 0 2
70750: PUSH
70751: LD_INT 0
70753: ST_TO_ADDR
// if GetTaskList ( sci ) then
70754: LD_VAR 0 1
70758: PPUSH
70759: CALL_OW 437
70763: IFFALSE 70811
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70765: LD_VAR 0 1
70769: PPUSH
70770: CALL_OW 437
70774: PUSH
70775: LD_INT 1
70777: ARRAY
70778: PUSH
70779: LD_INT 1
70781: ARRAY
70782: PUSH
70783: LD_STRING l
70785: EQUAL
70786: IFFALSE 70811
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70788: LD_ADDR_VAR 0 2
70792: PUSH
70793: LD_VAR 0 1
70797: PPUSH
70798: CALL_OW 437
70802: PUSH
70803: LD_INT 1
70805: ARRAY
70806: PUSH
70807: LD_INT 4
70809: ARRAY
70810: ST_TO_ADDR
// end ;
70811: LD_VAR 0 2
70815: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70816: LD_INT 0
70818: PPUSH
70819: PPUSH
70820: PPUSH
70821: PPUSH
// if not base_units then
70822: LD_VAR 0 1
70826: NOT
70827: IFFALSE 70831
// exit ;
70829: GO 70918
// result := false ;
70831: LD_ADDR_VAR 0 2
70835: PUSH
70836: LD_INT 0
70838: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70839: LD_ADDR_VAR 0 5
70843: PUSH
70844: LD_VAR 0 1
70848: PPUSH
70849: LD_INT 21
70851: PUSH
70852: LD_INT 3
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PPUSH
70859: CALL_OW 72
70863: ST_TO_ADDR
// if not tmp then
70864: LD_VAR 0 5
70868: NOT
70869: IFFALSE 70873
// exit ;
70871: GO 70918
// for i in tmp do
70873: LD_ADDR_VAR 0 3
70877: PUSH
70878: LD_VAR 0 5
70882: PUSH
70883: FOR_IN
70884: IFFALSE 70916
// begin result := EnemyInRange ( i , 22 ) ;
70886: LD_ADDR_VAR 0 2
70890: PUSH
70891: LD_VAR 0 3
70895: PPUSH
70896: LD_INT 22
70898: PPUSH
70899: CALL 69154 0 2
70903: ST_TO_ADDR
// if result then
70904: LD_VAR 0 2
70908: IFFALSE 70914
// exit ;
70910: POP
70911: POP
70912: GO 70918
// end ;
70914: GO 70883
70916: POP
70917: POP
// end ;
70918: LD_VAR 0 2
70922: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70923: LD_INT 0
70925: PPUSH
70926: PPUSH
// if not units then
70927: LD_VAR 0 1
70931: NOT
70932: IFFALSE 70936
// exit ;
70934: GO 71006
// result := [ ] ;
70936: LD_ADDR_VAR 0 3
70940: PUSH
70941: EMPTY
70942: ST_TO_ADDR
// for i in units do
70943: LD_ADDR_VAR 0 4
70947: PUSH
70948: LD_VAR 0 1
70952: PUSH
70953: FOR_IN
70954: IFFALSE 71004
// if GetTag ( i ) = tag then
70956: LD_VAR 0 4
70960: PPUSH
70961: CALL_OW 110
70965: PUSH
70966: LD_VAR 0 2
70970: EQUAL
70971: IFFALSE 71002
// result := Insert ( result , result + 1 , i ) ;
70973: LD_ADDR_VAR 0 3
70977: PUSH
70978: LD_VAR 0 3
70982: PPUSH
70983: LD_VAR 0 3
70987: PUSH
70988: LD_INT 1
70990: PLUS
70991: PPUSH
70992: LD_VAR 0 4
70996: PPUSH
70997: CALL_OW 2
71001: ST_TO_ADDR
71002: GO 70953
71004: POP
71005: POP
// end ;
71006: LD_VAR 0 3
71010: RET
// export function IsDriver ( un ) ; begin
71011: LD_INT 0
71013: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71014: LD_ADDR_VAR 0 2
71018: PUSH
71019: LD_VAR 0 1
71023: PUSH
71024: LD_INT 55
71026: PUSH
71027: EMPTY
71028: LIST
71029: PPUSH
71030: CALL_OW 69
71034: IN
71035: ST_TO_ADDR
// end ;
71036: LD_VAR 0 2
71040: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71041: LD_INT 0
71043: PPUSH
71044: PPUSH
// list := [ ] ;
71045: LD_ADDR_VAR 0 5
71049: PUSH
71050: EMPTY
71051: ST_TO_ADDR
// case d of 0 :
71052: LD_VAR 0 3
71056: PUSH
71057: LD_INT 0
71059: DOUBLE
71060: EQUAL
71061: IFTRUE 71065
71063: GO 71198
71065: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71066: LD_ADDR_VAR 0 5
71070: PUSH
71071: LD_VAR 0 1
71075: PUSH
71076: LD_INT 4
71078: MINUS
71079: PUSH
71080: LD_VAR 0 2
71084: PUSH
71085: LD_INT 4
71087: MINUS
71088: PUSH
71089: LD_INT 2
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: LIST
71096: PUSH
71097: LD_VAR 0 1
71101: PUSH
71102: LD_INT 3
71104: MINUS
71105: PUSH
71106: LD_VAR 0 2
71110: PUSH
71111: LD_INT 1
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: LIST
71118: PUSH
71119: LD_VAR 0 1
71123: PUSH
71124: LD_INT 4
71126: PLUS
71127: PUSH
71128: LD_VAR 0 2
71132: PUSH
71133: LD_INT 4
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: LIST
71140: PUSH
71141: LD_VAR 0 1
71145: PUSH
71146: LD_INT 3
71148: PLUS
71149: PUSH
71150: LD_VAR 0 2
71154: PUSH
71155: LD_INT 3
71157: PLUS
71158: PUSH
71159: LD_INT 5
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: LIST
71166: PUSH
71167: LD_VAR 0 1
71171: PUSH
71172: LD_VAR 0 2
71176: PUSH
71177: LD_INT 4
71179: PLUS
71180: PUSH
71181: LD_INT 0
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: LIST
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: ST_TO_ADDR
// end ; 1 :
71196: GO 71896
71198: LD_INT 1
71200: DOUBLE
71201: EQUAL
71202: IFTRUE 71206
71204: GO 71339
71206: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71207: LD_ADDR_VAR 0 5
71211: PUSH
71212: LD_VAR 0 1
71216: PUSH
71217: LD_VAR 0 2
71221: PUSH
71222: LD_INT 4
71224: MINUS
71225: PUSH
71226: LD_INT 3
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: LIST
71233: PUSH
71234: LD_VAR 0 1
71238: PUSH
71239: LD_INT 3
71241: MINUS
71242: PUSH
71243: LD_VAR 0 2
71247: PUSH
71248: LD_INT 3
71250: MINUS
71251: PUSH
71252: LD_INT 2
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: LIST
71259: PUSH
71260: LD_VAR 0 1
71264: PUSH
71265: LD_INT 4
71267: MINUS
71268: PUSH
71269: LD_VAR 0 2
71273: PUSH
71274: LD_INT 1
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: LIST
71281: PUSH
71282: LD_VAR 0 1
71286: PUSH
71287: LD_VAR 0 2
71291: PUSH
71292: LD_INT 3
71294: PLUS
71295: PUSH
71296: LD_INT 0
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: LIST
71303: PUSH
71304: LD_VAR 0 1
71308: PUSH
71309: LD_INT 4
71311: PLUS
71312: PUSH
71313: LD_VAR 0 2
71317: PUSH
71318: LD_INT 4
71320: PLUS
71321: PUSH
71322: LD_INT 5
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: LIST
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: ST_TO_ADDR
// end ; 2 :
71337: GO 71896
71339: LD_INT 2
71341: DOUBLE
71342: EQUAL
71343: IFTRUE 71347
71345: GO 71476
71347: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71348: LD_ADDR_VAR 0 5
71352: PUSH
71353: LD_VAR 0 1
71357: PUSH
71358: LD_VAR 0 2
71362: PUSH
71363: LD_INT 3
71365: MINUS
71366: PUSH
71367: LD_INT 3
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: LIST
71374: PUSH
71375: LD_VAR 0 1
71379: PUSH
71380: LD_INT 4
71382: PLUS
71383: PUSH
71384: LD_VAR 0 2
71388: PUSH
71389: LD_INT 4
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: LIST
71396: PUSH
71397: LD_VAR 0 1
71401: PUSH
71402: LD_VAR 0 2
71406: PUSH
71407: LD_INT 4
71409: PLUS
71410: PUSH
71411: LD_INT 0
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: LIST
71418: PUSH
71419: LD_VAR 0 1
71423: PUSH
71424: LD_INT 3
71426: MINUS
71427: PUSH
71428: LD_VAR 0 2
71432: PUSH
71433: LD_INT 1
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: LIST
71440: PUSH
71441: LD_VAR 0 1
71445: PUSH
71446: LD_INT 4
71448: MINUS
71449: PUSH
71450: LD_VAR 0 2
71454: PUSH
71455: LD_INT 4
71457: MINUS
71458: PUSH
71459: LD_INT 2
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: LIST
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: ST_TO_ADDR
// end ; 3 :
71474: GO 71896
71476: LD_INT 3
71478: DOUBLE
71479: EQUAL
71480: IFTRUE 71484
71482: GO 71617
71484: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71485: LD_ADDR_VAR 0 5
71489: PUSH
71490: LD_VAR 0 1
71494: PUSH
71495: LD_INT 3
71497: PLUS
71498: PUSH
71499: LD_VAR 0 2
71503: PUSH
71504: LD_INT 4
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: LIST
71511: PUSH
71512: LD_VAR 0 1
71516: PUSH
71517: LD_INT 4
71519: PLUS
71520: PUSH
71521: LD_VAR 0 2
71525: PUSH
71526: LD_INT 4
71528: PLUS
71529: PUSH
71530: LD_INT 5
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: LIST
71537: PUSH
71538: LD_VAR 0 1
71542: PUSH
71543: LD_INT 4
71545: MINUS
71546: PUSH
71547: LD_VAR 0 2
71551: PUSH
71552: LD_INT 1
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: LIST
71559: PUSH
71560: LD_VAR 0 1
71564: PUSH
71565: LD_VAR 0 2
71569: PUSH
71570: LD_INT 4
71572: MINUS
71573: PUSH
71574: LD_INT 3
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: LIST
71581: PUSH
71582: LD_VAR 0 1
71586: PUSH
71587: LD_INT 3
71589: MINUS
71590: PUSH
71591: LD_VAR 0 2
71595: PUSH
71596: LD_INT 3
71598: MINUS
71599: PUSH
71600: LD_INT 2
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: LIST
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: ST_TO_ADDR
// end ; 4 :
71615: GO 71896
71617: LD_INT 4
71619: DOUBLE
71620: EQUAL
71621: IFTRUE 71625
71623: GO 71758
71625: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71626: LD_ADDR_VAR 0 5
71630: PUSH
71631: LD_VAR 0 1
71635: PUSH
71636: LD_VAR 0 2
71640: PUSH
71641: LD_INT 4
71643: PLUS
71644: PUSH
71645: LD_INT 0
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: LIST
71652: PUSH
71653: LD_VAR 0 1
71657: PUSH
71658: LD_INT 3
71660: PLUS
71661: PUSH
71662: LD_VAR 0 2
71666: PUSH
71667: LD_INT 3
71669: PLUS
71670: PUSH
71671: LD_INT 5
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: LIST
71678: PUSH
71679: LD_VAR 0 1
71683: PUSH
71684: LD_INT 4
71686: PLUS
71687: PUSH
71688: LD_VAR 0 2
71692: PUSH
71693: LD_INT 4
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: LIST
71700: PUSH
71701: LD_VAR 0 1
71705: PUSH
71706: LD_VAR 0 2
71710: PUSH
71711: LD_INT 3
71713: MINUS
71714: PUSH
71715: LD_INT 3
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: LIST
71722: PUSH
71723: LD_VAR 0 1
71727: PUSH
71728: LD_INT 4
71730: MINUS
71731: PUSH
71732: LD_VAR 0 2
71736: PUSH
71737: LD_INT 4
71739: MINUS
71740: PUSH
71741: LD_INT 2
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: LIST
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: ST_TO_ADDR
// end ; 5 :
71756: GO 71896
71758: LD_INT 5
71760: DOUBLE
71761: EQUAL
71762: IFTRUE 71766
71764: GO 71895
71766: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71767: LD_ADDR_VAR 0 5
71771: PUSH
71772: LD_VAR 0 1
71776: PUSH
71777: LD_INT 4
71779: MINUS
71780: PUSH
71781: LD_VAR 0 2
71785: PUSH
71786: LD_INT 1
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: LIST
71793: PUSH
71794: LD_VAR 0 1
71798: PUSH
71799: LD_VAR 0 2
71803: PUSH
71804: LD_INT 4
71806: MINUS
71807: PUSH
71808: LD_INT 3
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: LIST
71815: PUSH
71816: LD_VAR 0 1
71820: PUSH
71821: LD_INT 4
71823: PLUS
71824: PUSH
71825: LD_VAR 0 2
71829: PUSH
71830: LD_INT 4
71832: PLUS
71833: PUSH
71834: LD_INT 5
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: LIST
71841: PUSH
71842: LD_VAR 0 1
71846: PUSH
71847: LD_INT 3
71849: PLUS
71850: PUSH
71851: LD_VAR 0 2
71855: PUSH
71856: LD_INT 4
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: LIST
71863: PUSH
71864: LD_VAR 0 1
71868: PUSH
71869: LD_VAR 0 2
71873: PUSH
71874: LD_INT 3
71876: PLUS
71877: PUSH
71878: LD_INT 0
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: LIST
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: ST_TO_ADDR
// end ; end ;
71893: GO 71896
71895: POP
// result := list ;
71896: LD_ADDR_VAR 0 4
71900: PUSH
71901: LD_VAR 0 5
71905: ST_TO_ADDR
// end ;
71906: LD_VAR 0 4
71910: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71911: LD_INT 0
71913: PPUSH
71914: PPUSH
71915: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71916: LD_VAR 0 1
71920: NOT
71921: PUSH
71922: LD_VAR 0 2
71926: PUSH
71927: LD_INT 1
71929: PUSH
71930: LD_INT 2
71932: PUSH
71933: LD_INT 3
71935: PUSH
71936: LD_INT 4
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: IN
71945: NOT
71946: OR
71947: IFFALSE 71951
// exit ;
71949: GO 72043
// tmp := [ ] ;
71951: LD_ADDR_VAR 0 5
71955: PUSH
71956: EMPTY
71957: ST_TO_ADDR
// for i in units do
71958: LD_ADDR_VAR 0 4
71962: PUSH
71963: LD_VAR 0 1
71967: PUSH
71968: FOR_IN
71969: IFFALSE 72012
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71971: LD_ADDR_VAR 0 5
71975: PUSH
71976: LD_VAR 0 5
71980: PPUSH
71981: LD_VAR 0 5
71985: PUSH
71986: LD_INT 1
71988: PLUS
71989: PPUSH
71990: LD_VAR 0 4
71994: PPUSH
71995: LD_VAR 0 2
71999: PPUSH
72000: CALL_OW 259
72004: PPUSH
72005: CALL_OW 2
72009: ST_TO_ADDR
72010: GO 71968
72012: POP
72013: POP
// if not tmp then
72014: LD_VAR 0 5
72018: NOT
72019: IFFALSE 72023
// exit ;
72021: GO 72043
// result := SortListByListDesc ( units , tmp ) ;
72023: LD_ADDR_VAR 0 3
72027: PUSH
72028: LD_VAR 0 1
72032: PPUSH
72033: LD_VAR 0 5
72037: PPUSH
72038: CALL_OW 77
72042: ST_TO_ADDR
// end ;
72043: LD_VAR 0 3
72047: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72048: LD_INT 0
72050: PPUSH
72051: PPUSH
72052: PPUSH
// result := false ;
72053: LD_ADDR_VAR 0 3
72057: PUSH
72058: LD_INT 0
72060: ST_TO_ADDR
// x := GetX ( building ) ;
72061: LD_ADDR_VAR 0 4
72065: PUSH
72066: LD_VAR 0 2
72070: PPUSH
72071: CALL_OW 250
72075: ST_TO_ADDR
// y := GetY ( building ) ;
72076: LD_ADDR_VAR 0 5
72080: PUSH
72081: LD_VAR 0 2
72085: PPUSH
72086: CALL_OW 251
72090: ST_TO_ADDR
// if not building or not x or not y then
72091: LD_VAR 0 2
72095: NOT
72096: PUSH
72097: LD_VAR 0 4
72101: NOT
72102: OR
72103: PUSH
72104: LD_VAR 0 5
72108: NOT
72109: OR
72110: IFFALSE 72114
// exit ;
72112: GO 72206
// if GetTaskList ( unit ) then
72114: LD_VAR 0 1
72118: PPUSH
72119: CALL_OW 437
72123: IFFALSE 72206
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72125: LD_STRING e
72127: PUSH
72128: LD_VAR 0 1
72132: PPUSH
72133: CALL_OW 437
72137: PUSH
72138: LD_INT 1
72140: ARRAY
72141: PUSH
72142: LD_INT 1
72144: ARRAY
72145: EQUAL
72146: PUSH
72147: LD_VAR 0 4
72151: PUSH
72152: LD_VAR 0 1
72156: PPUSH
72157: CALL_OW 437
72161: PUSH
72162: LD_INT 1
72164: ARRAY
72165: PUSH
72166: LD_INT 2
72168: ARRAY
72169: EQUAL
72170: AND
72171: PUSH
72172: LD_VAR 0 5
72176: PUSH
72177: LD_VAR 0 1
72181: PPUSH
72182: CALL_OW 437
72186: PUSH
72187: LD_INT 1
72189: ARRAY
72190: PUSH
72191: LD_INT 3
72193: ARRAY
72194: EQUAL
72195: AND
72196: IFFALSE 72206
// result := true end ;
72198: LD_ADDR_VAR 0 3
72202: PUSH
72203: LD_INT 1
72205: ST_TO_ADDR
// end ;
72206: LD_VAR 0 3
72210: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72211: LD_INT 0
72213: PPUSH
// result := false ;
72214: LD_ADDR_VAR 0 4
72218: PUSH
72219: LD_INT 0
72221: ST_TO_ADDR
// if GetTaskList ( unit ) then
72222: LD_VAR 0 1
72226: PPUSH
72227: CALL_OW 437
72231: IFFALSE 72314
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72233: LD_STRING M
72235: PUSH
72236: LD_VAR 0 1
72240: PPUSH
72241: CALL_OW 437
72245: PUSH
72246: LD_INT 1
72248: ARRAY
72249: PUSH
72250: LD_INT 1
72252: ARRAY
72253: EQUAL
72254: PUSH
72255: LD_VAR 0 2
72259: PUSH
72260: LD_VAR 0 1
72264: PPUSH
72265: CALL_OW 437
72269: PUSH
72270: LD_INT 1
72272: ARRAY
72273: PUSH
72274: LD_INT 2
72276: ARRAY
72277: EQUAL
72278: AND
72279: PUSH
72280: LD_VAR 0 3
72284: PUSH
72285: LD_VAR 0 1
72289: PPUSH
72290: CALL_OW 437
72294: PUSH
72295: LD_INT 1
72297: ARRAY
72298: PUSH
72299: LD_INT 3
72301: ARRAY
72302: EQUAL
72303: AND
72304: IFFALSE 72314
// result := true ;
72306: LD_ADDR_VAR 0 4
72310: PUSH
72311: LD_INT 1
72313: ST_TO_ADDR
// end ; end ;
72314: LD_VAR 0 4
72318: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72319: LD_INT 0
72321: PPUSH
72322: PPUSH
72323: PPUSH
72324: PPUSH
// if not unit or not area then
72325: LD_VAR 0 1
72329: NOT
72330: PUSH
72331: LD_VAR 0 2
72335: NOT
72336: OR
72337: IFFALSE 72341
// exit ;
72339: GO 72505
// tmp := AreaToList ( area , i ) ;
72341: LD_ADDR_VAR 0 6
72345: PUSH
72346: LD_VAR 0 2
72350: PPUSH
72351: LD_VAR 0 5
72355: PPUSH
72356: CALL_OW 517
72360: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72361: LD_ADDR_VAR 0 5
72365: PUSH
72366: DOUBLE
72367: LD_INT 1
72369: DEC
72370: ST_TO_ADDR
72371: LD_VAR 0 6
72375: PUSH
72376: LD_INT 1
72378: ARRAY
72379: PUSH
72380: FOR_TO
72381: IFFALSE 72503
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72383: LD_ADDR_VAR 0 7
72387: PUSH
72388: LD_VAR 0 6
72392: PUSH
72393: LD_INT 1
72395: ARRAY
72396: PUSH
72397: LD_VAR 0 5
72401: ARRAY
72402: PUSH
72403: LD_VAR 0 6
72407: PUSH
72408: LD_INT 2
72410: ARRAY
72411: PUSH
72412: LD_VAR 0 5
72416: ARRAY
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72422: LD_VAR 0 7
72426: PUSH
72427: LD_INT 1
72429: ARRAY
72430: PPUSH
72431: LD_VAR 0 7
72435: PUSH
72436: LD_INT 2
72438: ARRAY
72439: PPUSH
72440: CALL_OW 428
72444: PUSH
72445: LD_INT 0
72447: EQUAL
72448: IFFALSE 72501
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72450: LD_VAR 0 1
72454: PPUSH
72455: LD_VAR 0 7
72459: PUSH
72460: LD_INT 1
72462: ARRAY
72463: PPUSH
72464: LD_VAR 0 7
72468: PUSH
72469: LD_INT 2
72471: ARRAY
72472: PPUSH
72473: LD_VAR 0 3
72477: PPUSH
72478: CALL_OW 48
// result := IsPlaced ( unit ) ;
72482: LD_ADDR_VAR 0 4
72486: PUSH
72487: LD_VAR 0 1
72491: PPUSH
72492: CALL_OW 305
72496: ST_TO_ADDR
// exit ;
72497: POP
72498: POP
72499: GO 72505
// end ; end ;
72501: GO 72380
72503: POP
72504: POP
// end ;
72505: LD_VAR 0 4
72509: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72510: LD_INT 0
72512: PPUSH
72513: PPUSH
72514: PPUSH
// if not side or side > 8 then
72515: LD_VAR 0 1
72519: NOT
72520: PUSH
72521: LD_VAR 0 1
72525: PUSH
72526: LD_INT 8
72528: GREATER
72529: OR
72530: IFFALSE 72534
// exit ;
72532: GO 72721
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72534: LD_ADDR_VAR 0 4
72538: PUSH
72539: LD_INT 22
72541: PUSH
72542: LD_VAR 0 1
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 21
72553: PUSH
72554: LD_INT 3
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PPUSH
72565: CALL_OW 69
72569: ST_TO_ADDR
// if not tmp then
72570: LD_VAR 0 4
72574: NOT
72575: IFFALSE 72579
// exit ;
72577: GO 72721
// enable_addtolog := true ;
72579: LD_ADDR_OWVAR 81
72583: PUSH
72584: LD_INT 1
72586: ST_TO_ADDR
// AddToLog ( [ ) ;
72587: LD_STRING [
72589: PPUSH
72590: CALL_OW 561
// for i in tmp do
72594: LD_ADDR_VAR 0 3
72598: PUSH
72599: LD_VAR 0 4
72603: PUSH
72604: FOR_IN
72605: IFFALSE 72712
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72607: LD_STRING [
72609: PUSH
72610: LD_VAR 0 3
72614: PPUSH
72615: CALL_OW 266
72619: STR
72620: PUSH
72621: LD_STRING , 
72623: STR
72624: PUSH
72625: LD_VAR 0 3
72629: PPUSH
72630: CALL_OW 250
72634: STR
72635: PUSH
72636: LD_STRING , 
72638: STR
72639: PUSH
72640: LD_VAR 0 3
72644: PPUSH
72645: CALL_OW 251
72649: STR
72650: PUSH
72651: LD_STRING , 
72653: STR
72654: PUSH
72655: LD_VAR 0 3
72659: PPUSH
72660: CALL_OW 254
72664: STR
72665: PUSH
72666: LD_STRING , 
72668: STR
72669: PUSH
72670: LD_VAR 0 3
72674: PPUSH
72675: LD_INT 1
72677: PPUSH
72678: CALL_OW 268
72682: STR
72683: PUSH
72684: LD_STRING , 
72686: STR
72687: PUSH
72688: LD_VAR 0 3
72692: PPUSH
72693: LD_INT 2
72695: PPUSH
72696: CALL_OW 268
72700: STR
72701: PUSH
72702: LD_STRING ],
72704: STR
72705: PPUSH
72706: CALL_OW 561
// end ;
72710: GO 72604
72712: POP
72713: POP
// AddToLog ( ]; ) ;
72714: LD_STRING ];
72716: PPUSH
72717: CALL_OW 561
// end ;
72721: LD_VAR 0 2
72725: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72726: LD_INT 0
72728: PPUSH
72729: PPUSH
72730: PPUSH
72731: PPUSH
72732: PPUSH
// if not area or not rate or not max then
72733: LD_VAR 0 1
72737: NOT
72738: PUSH
72739: LD_VAR 0 2
72743: NOT
72744: OR
72745: PUSH
72746: LD_VAR 0 4
72750: NOT
72751: OR
72752: IFFALSE 72756
// exit ;
72754: GO 72948
// while 1 do
72756: LD_INT 1
72758: IFFALSE 72948
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72760: LD_ADDR_VAR 0 9
72764: PUSH
72765: LD_VAR 0 1
72769: PPUSH
72770: LD_INT 1
72772: PPUSH
72773: CALL_OW 287
72777: PUSH
72778: LD_INT 10
72780: MUL
72781: ST_TO_ADDR
// r := rate / 10 ;
72782: LD_ADDR_VAR 0 7
72786: PUSH
72787: LD_VAR 0 2
72791: PUSH
72792: LD_INT 10
72794: DIVREAL
72795: ST_TO_ADDR
// time := 1 1$00 ;
72796: LD_ADDR_VAR 0 8
72800: PUSH
72801: LD_INT 2100
72803: ST_TO_ADDR
// if amount < min then
72804: LD_VAR 0 9
72808: PUSH
72809: LD_VAR 0 3
72813: LESS
72814: IFFALSE 72832
// r := r * 2 else
72816: LD_ADDR_VAR 0 7
72820: PUSH
72821: LD_VAR 0 7
72825: PUSH
72826: LD_INT 2
72828: MUL
72829: ST_TO_ADDR
72830: GO 72858
// if amount > max then
72832: LD_VAR 0 9
72836: PUSH
72837: LD_VAR 0 4
72841: GREATER
72842: IFFALSE 72858
// r := r / 2 ;
72844: LD_ADDR_VAR 0 7
72848: PUSH
72849: LD_VAR 0 7
72853: PUSH
72854: LD_INT 2
72856: DIVREAL
72857: ST_TO_ADDR
// time := time / r ;
72858: LD_ADDR_VAR 0 8
72862: PUSH
72863: LD_VAR 0 8
72867: PUSH
72868: LD_VAR 0 7
72872: DIVREAL
72873: ST_TO_ADDR
// if time < 0 then
72874: LD_VAR 0 8
72878: PUSH
72879: LD_INT 0
72881: LESS
72882: IFFALSE 72899
// time := time * - 1 ;
72884: LD_ADDR_VAR 0 8
72888: PUSH
72889: LD_VAR 0 8
72893: PUSH
72894: LD_INT 1
72896: NEG
72897: MUL
72898: ST_TO_ADDR
// wait ( time ) ;
72899: LD_VAR 0 8
72903: PPUSH
72904: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72908: LD_INT 35
72910: PPUSH
72911: LD_INT 875
72913: PPUSH
72914: CALL_OW 12
72918: PPUSH
72919: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72923: LD_INT 1
72925: PPUSH
72926: LD_INT 5
72928: PPUSH
72929: CALL_OW 12
72933: PPUSH
72934: LD_VAR 0 1
72938: PPUSH
72939: LD_INT 1
72941: PPUSH
72942: CALL_OW 55
// end ;
72946: GO 72756
// end ;
72948: LD_VAR 0 5
72952: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72953: LD_INT 0
72955: PPUSH
72956: PPUSH
72957: PPUSH
72958: PPUSH
72959: PPUSH
72960: PPUSH
72961: PPUSH
72962: PPUSH
// if not turrets or not factories then
72963: LD_VAR 0 1
72967: NOT
72968: PUSH
72969: LD_VAR 0 2
72973: NOT
72974: OR
72975: IFFALSE 72979
// exit ;
72977: GO 73286
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72979: LD_ADDR_VAR 0 10
72983: PUSH
72984: LD_INT 5
72986: PUSH
72987: LD_INT 6
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 2
72996: PUSH
72997: LD_INT 4
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 3
73006: PUSH
73007: LD_INT 5
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: LIST
73018: PUSH
73019: LD_INT 24
73021: PUSH
73022: LD_INT 25
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 23
73031: PUSH
73032: LD_INT 27
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: LD_INT 42
73045: PUSH
73046: LD_INT 43
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: LD_INT 44
73055: PUSH
73056: LD_INT 46
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 45
73065: PUSH
73066: LD_INT 47
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: EMPTY
73074: LIST
73075: LIST
73076: LIST
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: LIST
73082: ST_TO_ADDR
// result := [ ] ;
73083: LD_ADDR_VAR 0 3
73087: PUSH
73088: EMPTY
73089: ST_TO_ADDR
// for i in turrets do
73090: LD_ADDR_VAR 0 4
73094: PUSH
73095: LD_VAR 0 1
73099: PUSH
73100: FOR_IN
73101: IFFALSE 73284
// begin nat := GetNation ( i ) ;
73103: LD_ADDR_VAR 0 7
73107: PUSH
73108: LD_VAR 0 4
73112: PPUSH
73113: CALL_OW 248
73117: ST_TO_ADDR
// weapon := 0 ;
73118: LD_ADDR_VAR 0 8
73122: PUSH
73123: LD_INT 0
73125: ST_TO_ADDR
// if not nat then
73126: LD_VAR 0 7
73130: NOT
73131: IFFALSE 73135
// continue ;
73133: GO 73100
// for j in list [ nat ] do
73135: LD_ADDR_VAR 0 5
73139: PUSH
73140: LD_VAR 0 10
73144: PUSH
73145: LD_VAR 0 7
73149: ARRAY
73150: PUSH
73151: FOR_IN
73152: IFFALSE 73193
// if GetBWeapon ( i ) = j [ 1 ] then
73154: LD_VAR 0 4
73158: PPUSH
73159: CALL_OW 269
73163: PUSH
73164: LD_VAR 0 5
73168: PUSH
73169: LD_INT 1
73171: ARRAY
73172: EQUAL
73173: IFFALSE 73191
// begin weapon := j [ 2 ] ;
73175: LD_ADDR_VAR 0 8
73179: PUSH
73180: LD_VAR 0 5
73184: PUSH
73185: LD_INT 2
73187: ARRAY
73188: ST_TO_ADDR
// break ;
73189: GO 73193
// end ;
73191: GO 73151
73193: POP
73194: POP
// if not weapon then
73195: LD_VAR 0 8
73199: NOT
73200: IFFALSE 73204
// continue ;
73202: GO 73100
// for k in factories do
73204: LD_ADDR_VAR 0 6
73208: PUSH
73209: LD_VAR 0 2
73213: PUSH
73214: FOR_IN
73215: IFFALSE 73280
// begin weapons := AvailableWeaponList ( k ) ;
73217: LD_ADDR_VAR 0 9
73221: PUSH
73222: LD_VAR 0 6
73226: PPUSH
73227: CALL_OW 478
73231: ST_TO_ADDR
// if not weapons then
73232: LD_VAR 0 9
73236: NOT
73237: IFFALSE 73241
// continue ;
73239: GO 73214
// if weapon in weapons then
73241: LD_VAR 0 8
73245: PUSH
73246: LD_VAR 0 9
73250: IN
73251: IFFALSE 73278
// begin result := [ i , weapon ] ;
73253: LD_ADDR_VAR 0 3
73257: PUSH
73258: LD_VAR 0 4
73262: PUSH
73263: LD_VAR 0 8
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: ST_TO_ADDR
// exit ;
73272: POP
73273: POP
73274: POP
73275: POP
73276: GO 73286
// end ; end ;
73278: GO 73214
73280: POP
73281: POP
// end ;
73282: GO 73100
73284: POP
73285: POP
// end ;
73286: LD_VAR 0 3
73290: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73291: LD_INT 0
73293: PPUSH
// if not side or side > 8 then
73294: LD_VAR 0 3
73298: NOT
73299: PUSH
73300: LD_VAR 0 3
73304: PUSH
73305: LD_INT 8
73307: GREATER
73308: OR
73309: IFFALSE 73313
// exit ;
73311: GO 73372
// if not range then
73313: LD_VAR 0 4
73317: NOT
73318: IFFALSE 73329
// range := - 12 ;
73320: LD_ADDR_VAR 0 4
73324: PUSH
73325: LD_INT 12
73327: NEG
73328: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73329: LD_VAR 0 1
73333: PPUSH
73334: LD_VAR 0 2
73338: PPUSH
73339: LD_VAR 0 3
73343: PPUSH
73344: LD_VAR 0 4
73348: PPUSH
73349: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73353: LD_VAR 0 1
73357: PPUSH
73358: LD_VAR 0 2
73362: PPUSH
73363: LD_VAR 0 3
73367: PPUSH
73368: CALL_OW 331
// end ;
73372: LD_VAR 0 5
73376: RET
// export function Video ( mode ) ; begin
73377: LD_INT 0
73379: PPUSH
// ingame_video = mode ;
73380: LD_ADDR_OWVAR 52
73384: PUSH
73385: LD_VAR 0 1
73389: ST_TO_ADDR
// interface_hidden = mode ;
73390: LD_ADDR_OWVAR 54
73394: PUSH
73395: LD_VAR 0 1
73399: ST_TO_ADDR
// end ;
73400: LD_VAR 0 2
73404: RET
// export function Join ( array , element ) ; begin
73405: LD_INT 0
73407: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73408: LD_ADDR_VAR 0 3
73412: PUSH
73413: LD_VAR 0 1
73417: PPUSH
73418: LD_VAR 0 1
73422: PUSH
73423: LD_INT 1
73425: PLUS
73426: PPUSH
73427: LD_VAR 0 2
73431: PPUSH
73432: CALL_OW 1
73436: ST_TO_ADDR
// end ;
73437: LD_VAR 0 3
73441: RET
// export function JoinUnion ( array , element ) ; begin
73442: LD_INT 0
73444: PPUSH
// result := array union element ;
73445: LD_ADDR_VAR 0 3
73449: PUSH
73450: LD_VAR 0 1
73454: PUSH
73455: LD_VAR 0 2
73459: UNION
73460: ST_TO_ADDR
// end ;
73461: LD_VAR 0 3
73465: RET
// export function GetBehemoths ( side ) ; begin
73466: LD_INT 0
73468: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73469: LD_ADDR_VAR 0 2
73473: PUSH
73474: LD_INT 22
73476: PUSH
73477: LD_VAR 0 1
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: LD_INT 31
73488: PUSH
73489: LD_INT 25
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: PPUSH
73500: CALL_OW 69
73504: ST_TO_ADDR
// end ;
73505: LD_VAR 0 2
73509: RET
// export function Shuffle ( array ) ; var i , index ; begin
73510: LD_INT 0
73512: PPUSH
73513: PPUSH
73514: PPUSH
// result := [ ] ;
73515: LD_ADDR_VAR 0 2
73519: PUSH
73520: EMPTY
73521: ST_TO_ADDR
// if not array then
73522: LD_VAR 0 1
73526: NOT
73527: IFFALSE 73531
// exit ;
73529: GO 73630
// Randomize ;
73531: CALL_OW 10
// for i = array downto 1 do
73535: LD_ADDR_VAR 0 3
73539: PUSH
73540: DOUBLE
73541: LD_VAR 0 1
73545: INC
73546: ST_TO_ADDR
73547: LD_INT 1
73549: PUSH
73550: FOR_DOWNTO
73551: IFFALSE 73628
// begin index := rand ( 1 , array ) ;
73553: LD_ADDR_VAR 0 4
73557: PUSH
73558: LD_INT 1
73560: PPUSH
73561: LD_VAR 0 1
73565: PPUSH
73566: CALL_OW 12
73570: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73571: LD_ADDR_VAR 0 2
73575: PUSH
73576: LD_VAR 0 2
73580: PPUSH
73581: LD_VAR 0 2
73585: PUSH
73586: LD_INT 1
73588: PLUS
73589: PPUSH
73590: LD_VAR 0 1
73594: PUSH
73595: LD_VAR 0 4
73599: ARRAY
73600: PPUSH
73601: CALL_OW 2
73605: ST_TO_ADDR
// array := Delete ( array , index ) ;
73606: LD_ADDR_VAR 0 1
73610: PUSH
73611: LD_VAR 0 1
73615: PPUSH
73616: LD_VAR 0 4
73620: PPUSH
73621: CALL_OW 3
73625: ST_TO_ADDR
// end ;
73626: GO 73550
73628: POP
73629: POP
// end ;
73630: LD_VAR 0 2
73634: RET
// export function GetBaseMaterials ( base ) ; begin
73635: LD_INT 0
73637: PPUSH
// result := [ 0 , 0 , 0 ] ;
73638: LD_ADDR_VAR 0 2
73642: PUSH
73643: LD_INT 0
73645: PUSH
73646: LD_INT 0
73648: PUSH
73649: LD_INT 0
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: LIST
73656: ST_TO_ADDR
// if not base then
73657: LD_VAR 0 1
73661: NOT
73662: IFFALSE 73666
// exit ;
73664: GO 73715
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73666: LD_ADDR_VAR 0 2
73670: PUSH
73671: LD_VAR 0 1
73675: PPUSH
73676: LD_INT 1
73678: PPUSH
73679: CALL_OW 275
73683: PUSH
73684: LD_VAR 0 1
73688: PPUSH
73689: LD_INT 2
73691: PPUSH
73692: CALL_OW 275
73696: PUSH
73697: LD_VAR 0 1
73701: PPUSH
73702: LD_INT 3
73704: PPUSH
73705: CALL_OW 275
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: LIST
73714: ST_TO_ADDR
// end ;
73715: LD_VAR 0 2
73719: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73720: LD_INT 0
73722: PPUSH
73723: PPUSH
// result := array ;
73724: LD_ADDR_VAR 0 3
73728: PUSH
73729: LD_VAR 0 1
73733: ST_TO_ADDR
// if size > 0 then
73734: LD_VAR 0 2
73738: PUSH
73739: LD_INT 0
73741: GREATER
73742: IFFALSE 73788
// for i := array downto size do
73744: LD_ADDR_VAR 0 4
73748: PUSH
73749: DOUBLE
73750: LD_VAR 0 1
73754: INC
73755: ST_TO_ADDR
73756: LD_VAR 0 2
73760: PUSH
73761: FOR_DOWNTO
73762: IFFALSE 73786
// result := Delete ( result , result ) ;
73764: LD_ADDR_VAR 0 3
73768: PUSH
73769: LD_VAR 0 3
73773: PPUSH
73774: LD_VAR 0 3
73778: PPUSH
73779: CALL_OW 3
73783: ST_TO_ADDR
73784: GO 73761
73786: POP
73787: POP
// end ;
73788: LD_VAR 0 3
73792: RET
// export function ComExit ( unit ) ; var tmp ; begin
73793: LD_INT 0
73795: PPUSH
73796: PPUSH
// if not IsInUnit ( unit ) then
73797: LD_VAR 0 1
73801: PPUSH
73802: CALL_OW 310
73806: NOT
73807: IFFALSE 73811
// exit ;
73809: GO 73871
// tmp := IsInUnit ( unit ) ;
73811: LD_ADDR_VAR 0 3
73815: PUSH
73816: LD_VAR 0 1
73820: PPUSH
73821: CALL_OW 310
73825: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73826: LD_VAR 0 3
73830: PPUSH
73831: CALL_OW 247
73835: PUSH
73836: LD_INT 2
73838: EQUAL
73839: IFFALSE 73852
// ComExitVehicle ( unit ) else
73841: LD_VAR 0 1
73845: PPUSH
73846: CALL_OW 121
73850: GO 73861
// ComExitBuilding ( unit ) ;
73852: LD_VAR 0 1
73856: PPUSH
73857: CALL_OW 122
// result := tmp ;
73861: LD_ADDR_VAR 0 2
73865: PUSH
73866: LD_VAR 0 3
73870: ST_TO_ADDR
// end ;
73871: LD_VAR 0 2
73875: RET
// export function ComExitAll ( units ) ; var i ; begin
73876: LD_INT 0
73878: PPUSH
73879: PPUSH
// if not units then
73880: LD_VAR 0 1
73884: NOT
73885: IFFALSE 73889
// exit ;
73887: GO 73915
// for i in units do
73889: LD_ADDR_VAR 0 3
73893: PUSH
73894: LD_VAR 0 1
73898: PUSH
73899: FOR_IN
73900: IFFALSE 73913
// ComExit ( i ) ;
73902: LD_VAR 0 3
73906: PPUSH
73907: CALL 73793 0 1
73911: GO 73899
73913: POP
73914: POP
// end ;
73915: LD_VAR 0 2
73919: RET
// export function ResetHc ; begin
73920: LD_INT 0
73922: PPUSH
// InitHc ;
73923: CALL_OW 19
// hc_importance := 0 ;
73927: LD_ADDR_OWVAR 32
73931: PUSH
73932: LD_INT 0
73934: ST_TO_ADDR
// end ;
73935: LD_VAR 0 1
73939: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73940: LD_INT 0
73942: PPUSH
73943: PPUSH
73944: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73945: LD_ADDR_VAR 0 6
73949: PUSH
73950: LD_VAR 0 1
73954: PUSH
73955: LD_VAR 0 3
73959: PLUS
73960: PUSH
73961: LD_INT 2
73963: DIV
73964: ST_TO_ADDR
// if _x < 0 then
73965: LD_VAR 0 6
73969: PUSH
73970: LD_INT 0
73972: LESS
73973: IFFALSE 73990
// _x := _x * - 1 ;
73975: LD_ADDR_VAR 0 6
73979: PUSH
73980: LD_VAR 0 6
73984: PUSH
73985: LD_INT 1
73987: NEG
73988: MUL
73989: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73990: LD_ADDR_VAR 0 7
73994: PUSH
73995: LD_VAR 0 2
73999: PUSH
74000: LD_VAR 0 4
74004: PLUS
74005: PUSH
74006: LD_INT 2
74008: DIV
74009: ST_TO_ADDR
// if _y < 0 then
74010: LD_VAR 0 7
74014: PUSH
74015: LD_INT 0
74017: LESS
74018: IFFALSE 74035
// _y := _y * - 1 ;
74020: LD_ADDR_VAR 0 7
74024: PUSH
74025: LD_VAR 0 7
74029: PUSH
74030: LD_INT 1
74032: NEG
74033: MUL
74034: ST_TO_ADDR
// result := [ _x , _y ] ;
74035: LD_ADDR_VAR 0 5
74039: PUSH
74040: LD_VAR 0 6
74044: PUSH
74045: LD_VAR 0 7
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: ST_TO_ADDR
// end ;
74054: LD_VAR 0 5
74058: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74059: LD_INT 0
74061: PPUSH
74062: PPUSH
74063: PPUSH
74064: PPUSH
// task := GetTaskList ( unit ) ;
74065: LD_ADDR_VAR 0 7
74069: PUSH
74070: LD_VAR 0 1
74074: PPUSH
74075: CALL_OW 437
74079: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74080: LD_VAR 0 7
74084: NOT
74085: PUSH
74086: LD_VAR 0 1
74090: PPUSH
74091: LD_VAR 0 2
74095: PPUSH
74096: CALL_OW 308
74100: NOT
74101: AND
74102: IFFALSE 74106
// exit ;
74104: GO 74224
// if IsInArea ( unit , area ) then
74106: LD_VAR 0 1
74110: PPUSH
74111: LD_VAR 0 2
74115: PPUSH
74116: CALL_OW 308
74120: IFFALSE 74138
// begin ComMoveToArea ( unit , goAway ) ;
74122: LD_VAR 0 1
74126: PPUSH
74127: LD_VAR 0 3
74131: PPUSH
74132: CALL_OW 113
// exit ;
74136: GO 74224
// end ; if task [ 1 ] [ 1 ] <> M then
74138: LD_VAR 0 7
74142: PUSH
74143: LD_INT 1
74145: ARRAY
74146: PUSH
74147: LD_INT 1
74149: ARRAY
74150: PUSH
74151: LD_STRING M
74153: NONEQUAL
74154: IFFALSE 74158
// exit ;
74156: GO 74224
// x := task [ 1 ] [ 2 ] ;
74158: LD_ADDR_VAR 0 5
74162: PUSH
74163: LD_VAR 0 7
74167: PUSH
74168: LD_INT 1
74170: ARRAY
74171: PUSH
74172: LD_INT 2
74174: ARRAY
74175: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74176: LD_ADDR_VAR 0 6
74180: PUSH
74181: LD_VAR 0 7
74185: PUSH
74186: LD_INT 1
74188: ARRAY
74189: PUSH
74190: LD_INT 3
74192: ARRAY
74193: ST_TO_ADDR
// if InArea ( x , y , area ) then
74194: LD_VAR 0 5
74198: PPUSH
74199: LD_VAR 0 6
74203: PPUSH
74204: LD_VAR 0 2
74208: PPUSH
74209: CALL_OW 309
74213: IFFALSE 74224
// ComStop ( unit ) ;
74215: LD_VAR 0 1
74219: PPUSH
74220: CALL_OW 141
// end ;
74224: LD_VAR 0 4
74228: RET
// export function Abs ( value ) ; begin
74229: LD_INT 0
74231: PPUSH
// result := value ;
74232: LD_ADDR_VAR 0 2
74236: PUSH
74237: LD_VAR 0 1
74241: ST_TO_ADDR
// if value < 0 then
74242: LD_VAR 0 1
74246: PUSH
74247: LD_INT 0
74249: LESS
74250: IFFALSE 74267
// result := value * - 1 ;
74252: LD_ADDR_VAR 0 2
74256: PUSH
74257: LD_VAR 0 1
74261: PUSH
74262: LD_INT 1
74264: NEG
74265: MUL
74266: ST_TO_ADDR
// end ;
74267: LD_VAR 0 2
74271: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74272: LD_INT 0
74274: PPUSH
74275: PPUSH
74276: PPUSH
74277: PPUSH
74278: PPUSH
74279: PPUSH
74280: PPUSH
74281: PPUSH
// if not unit or not building then
74282: LD_VAR 0 1
74286: NOT
74287: PUSH
74288: LD_VAR 0 2
74292: NOT
74293: OR
74294: IFFALSE 74298
// exit ;
74296: GO 74524
// x := GetX ( building ) ;
74298: LD_ADDR_VAR 0 4
74302: PUSH
74303: LD_VAR 0 2
74307: PPUSH
74308: CALL_OW 250
74312: ST_TO_ADDR
// y := GetY ( building ) ;
74313: LD_ADDR_VAR 0 6
74317: PUSH
74318: LD_VAR 0 2
74322: PPUSH
74323: CALL_OW 251
74327: ST_TO_ADDR
// d := GetDir ( building ) ;
74328: LD_ADDR_VAR 0 8
74332: PUSH
74333: LD_VAR 0 2
74337: PPUSH
74338: CALL_OW 254
74342: ST_TO_ADDR
// r := 4 ;
74343: LD_ADDR_VAR 0 9
74347: PUSH
74348: LD_INT 4
74350: ST_TO_ADDR
// for i := 1 to 5 do
74351: LD_ADDR_VAR 0 10
74355: PUSH
74356: DOUBLE
74357: LD_INT 1
74359: DEC
74360: ST_TO_ADDR
74361: LD_INT 5
74363: PUSH
74364: FOR_TO
74365: IFFALSE 74522
// begin _x := ShiftX ( x , d , r + i ) ;
74367: LD_ADDR_VAR 0 5
74371: PUSH
74372: LD_VAR 0 4
74376: PPUSH
74377: LD_VAR 0 8
74381: PPUSH
74382: LD_VAR 0 9
74386: PUSH
74387: LD_VAR 0 10
74391: PLUS
74392: PPUSH
74393: CALL_OW 272
74397: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74398: LD_ADDR_VAR 0 7
74402: PUSH
74403: LD_VAR 0 6
74407: PPUSH
74408: LD_VAR 0 8
74412: PPUSH
74413: LD_VAR 0 9
74417: PUSH
74418: LD_VAR 0 10
74422: PLUS
74423: PPUSH
74424: CALL_OW 273
74428: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74429: LD_VAR 0 5
74433: PPUSH
74434: LD_VAR 0 7
74438: PPUSH
74439: CALL_OW 488
74443: PUSH
74444: LD_VAR 0 5
74448: PPUSH
74449: LD_VAR 0 7
74453: PPUSH
74454: CALL_OW 428
74458: PPUSH
74459: CALL_OW 247
74463: PUSH
74464: LD_INT 3
74466: PUSH
74467: LD_INT 2
74469: PUSH
74470: EMPTY
74471: LIST
74472: LIST
74473: IN
74474: NOT
74475: AND
74476: IFFALSE 74520
// begin ComMoveXY ( unit , _x , _y ) ;
74478: LD_VAR 0 1
74482: PPUSH
74483: LD_VAR 0 5
74487: PPUSH
74488: LD_VAR 0 7
74492: PPUSH
74493: CALL_OW 111
// result := [ _x , _y ] ;
74497: LD_ADDR_VAR 0 3
74501: PUSH
74502: LD_VAR 0 5
74506: PUSH
74507: LD_VAR 0 7
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: ST_TO_ADDR
// exit ;
74516: POP
74517: POP
74518: GO 74524
// end ; end ;
74520: GO 74364
74522: POP
74523: POP
// end ;
74524: LD_VAR 0 3
74528: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74529: LD_INT 0
74531: PPUSH
74532: PPUSH
74533: PPUSH
// result := 0 ;
74534: LD_ADDR_VAR 0 3
74538: PUSH
74539: LD_INT 0
74541: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74542: LD_VAR 0 1
74546: PUSH
74547: LD_INT 0
74549: LESS
74550: PUSH
74551: LD_VAR 0 1
74555: PUSH
74556: LD_INT 8
74558: GREATER
74559: OR
74560: PUSH
74561: LD_VAR 0 2
74565: PUSH
74566: LD_INT 0
74568: LESS
74569: OR
74570: PUSH
74571: LD_VAR 0 2
74575: PUSH
74576: LD_INT 8
74578: GREATER
74579: OR
74580: IFFALSE 74584
// exit ;
74582: GO 74659
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74584: LD_ADDR_VAR 0 4
74588: PUSH
74589: LD_INT 22
74591: PUSH
74592: LD_VAR 0 2
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: PPUSH
74601: CALL_OW 69
74605: PUSH
74606: FOR_IN
74607: IFFALSE 74657
// begin un := UnitShoot ( i ) ;
74609: LD_ADDR_VAR 0 5
74613: PUSH
74614: LD_VAR 0 4
74618: PPUSH
74619: CALL_OW 504
74623: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74624: LD_VAR 0 5
74628: PPUSH
74629: CALL_OW 255
74633: PUSH
74634: LD_VAR 0 1
74638: EQUAL
74639: IFFALSE 74655
// begin result := un ;
74641: LD_ADDR_VAR 0 3
74645: PUSH
74646: LD_VAR 0 5
74650: ST_TO_ADDR
// exit ;
74651: POP
74652: POP
74653: GO 74659
// end ; end ;
74655: GO 74606
74657: POP
74658: POP
// end ;
74659: LD_VAR 0 3
74663: RET
// export function GetCargoBay ( units ) ; begin
74664: LD_INT 0
74666: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74667: LD_ADDR_VAR 0 2
74671: PUSH
74672: LD_VAR 0 1
74676: PPUSH
74677: LD_INT 2
74679: PUSH
74680: LD_INT 34
74682: PUSH
74683: LD_INT 12
74685: PUSH
74686: EMPTY
74687: LIST
74688: LIST
74689: PUSH
74690: LD_INT 34
74692: PUSH
74693: LD_INT 51
74695: PUSH
74696: EMPTY
74697: LIST
74698: LIST
74699: PUSH
74700: LD_INT 34
74702: PUSH
74703: LD_INT 32
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PUSH
74710: LD_INT 34
74712: PUSH
74713: LD_EXP 49
74717: PUSH
74718: EMPTY
74719: LIST
74720: LIST
74721: PUSH
74722: EMPTY
74723: LIST
74724: LIST
74725: LIST
74726: LIST
74727: LIST
74728: PPUSH
74729: CALL_OW 72
74733: ST_TO_ADDR
// end ;
74734: LD_VAR 0 2
74738: RET
// export function Negate ( value ) ; begin
74739: LD_INT 0
74741: PPUSH
// result := not value ;
74742: LD_ADDR_VAR 0 2
74746: PUSH
74747: LD_VAR 0 1
74751: NOT
74752: ST_TO_ADDR
// end ;
74753: LD_VAR 0 2
74757: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74758: LD_INT 0
74760: PPUSH
// if x1 = x2 then
74761: LD_VAR 0 1
74765: PUSH
74766: LD_VAR 0 3
74770: EQUAL
74771: IFFALSE 74805
// begin if y1 > y2 then
74773: LD_VAR 0 2
74777: PUSH
74778: LD_VAR 0 4
74782: GREATER
74783: IFFALSE 74795
// result := 0 else
74785: LD_ADDR_VAR 0 5
74789: PUSH
74790: LD_INT 0
74792: ST_TO_ADDR
74793: GO 74803
// result := 3 ;
74795: LD_ADDR_VAR 0 5
74799: PUSH
74800: LD_INT 3
74802: ST_TO_ADDR
// exit ;
74803: GO 74891
// end ; if y1 = y2 then
74805: LD_VAR 0 2
74809: PUSH
74810: LD_VAR 0 4
74814: EQUAL
74815: IFFALSE 74849
// begin if x1 > x2 then
74817: LD_VAR 0 1
74821: PUSH
74822: LD_VAR 0 3
74826: GREATER
74827: IFFALSE 74839
// result := 1 else
74829: LD_ADDR_VAR 0 5
74833: PUSH
74834: LD_INT 1
74836: ST_TO_ADDR
74837: GO 74847
// result := 4 ;
74839: LD_ADDR_VAR 0 5
74843: PUSH
74844: LD_INT 4
74846: ST_TO_ADDR
// exit ;
74847: GO 74891
// end ; if x1 > x2 and y1 > y2 then
74849: LD_VAR 0 1
74853: PUSH
74854: LD_VAR 0 3
74858: GREATER
74859: PUSH
74860: LD_VAR 0 2
74864: PUSH
74865: LD_VAR 0 4
74869: GREATER
74870: AND
74871: IFFALSE 74883
// result := 2 else
74873: LD_ADDR_VAR 0 5
74877: PUSH
74878: LD_INT 2
74880: ST_TO_ADDR
74881: GO 74891
// result := 5 ;
74883: LD_ADDR_VAR 0 5
74887: PUSH
74888: LD_INT 5
74890: ST_TO_ADDR
// end ;
74891: LD_VAR 0 5
74895: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74896: LD_INT 0
74898: PPUSH
74899: PPUSH
// if not driver or not IsInUnit ( driver ) then
74900: LD_VAR 0 1
74904: NOT
74905: PUSH
74906: LD_VAR 0 1
74910: PPUSH
74911: CALL_OW 310
74915: NOT
74916: OR
74917: IFFALSE 74921
// exit ;
74919: GO 75011
// vehicle := IsInUnit ( driver ) ;
74921: LD_ADDR_VAR 0 3
74925: PUSH
74926: LD_VAR 0 1
74930: PPUSH
74931: CALL_OW 310
74935: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74936: LD_VAR 0 1
74940: PPUSH
74941: LD_STRING \
74943: PUSH
74944: LD_INT 0
74946: PUSH
74947: LD_INT 0
74949: PUSH
74950: LD_INT 0
74952: PUSH
74953: LD_INT 0
74955: PUSH
74956: LD_INT 0
74958: PUSH
74959: LD_INT 0
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: PUSH
74971: LD_STRING E
74973: PUSH
74974: LD_INT 0
74976: PUSH
74977: LD_INT 0
74979: PUSH
74980: LD_VAR 0 3
74984: PUSH
74985: LD_INT 0
74987: PUSH
74988: LD_INT 0
74990: PUSH
74991: LD_INT 0
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: LIST
74998: LIST
74999: LIST
75000: LIST
75001: LIST
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: PPUSH
75007: CALL_OW 446
// end ;
75011: LD_VAR 0 2
75015: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75016: LD_INT 0
75018: PPUSH
75019: PPUSH
// if not driver or not IsInUnit ( driver ) then
75020: LD_VAR 0 1
75024: NOT
75025: PUSH
75026: LD_VAR 0 1
75030: PPUSH
75031: CALL_OW 310
75035: NOT
75036: OR
75037: IFFALSE 75041
// exit ;
75039: GO 75131
// vehicle := IsInUnit ( driver ) ;
75041: LD_ADDR_VAR 0 3
75045: PUSH
75046: LD_VAR 0 1
75050: PPUSH
75051: CALL_OW 310
75055: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75056: LD_VAR 0 1
75060: PPUSH
75061: LD_STRING \
75063: PUSH
75064: LD_INT 0
75066: PUSH
75067: LD_INT 0
75069: PUSH
75070: LD_INT 0
75072: PUSH
75073: LD_INT 0
75075: PUSH
75076: LD_INT 0
75078: PUSH
75079: LD_INT 0
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: LIST
75086: LIST
75087: LIST
75088: LIST
75089: LIST
75090: PUSH
75091: LD_STRING E
75093: PUSH
75094: LD_INT 0
75096: PUSH
75097: LD_INT 0
75099: PUSH
75100: LD_VAR 0 3
75104: PUSH
75105: LD_INT 0
75107: PUSH
75108: LD_INT 0
75110: PUSH
75111: LD_INT 0
75113: PUSH
75114: EMPTY
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: LIST
75120: LIST
75121: LIST
75122: PUSH
75123: EMPTY
75124: LIST
75125: LIST
75126: PPUSH
75127: CALL_OW 447
// end ;
75131: LD_VAR 0 2
75135: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75136: LD_INT 0
75138: PPUSH
75139: PPUSH
75140: PPUSH
// tmp := [ ] ;
75141: LD_ADDR_VAR 0 5
75145: PUSH
75146: EMPTY
75147: ST_TO_ADDR
// for i in units do
75148: LD_ADDR_VAR 0 4
75152: PUSH
75153: LD_VAR 0 1
75157: PUSH
75158: FOR_IN
75159: IFFALSE 75197
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75161: LD_ADDR_VAR 0 5
75165: PUSH
75166: LD_VAR 0 5
75170: PPUSH
75171: LD_VAR 0 5
75175: PUSH
75176: LD_INT 1
75178: PLUS
75179: PPUSH
75180: LD_VAR 0 4
75184: PPUSH
75185: CALL_OW 256
75189: PPUSH
75190: CALL_OW 2
75194: ST_TO_ADDR
75195: GO 75158
75197: POP
75198: POP
// if not tmp then
75199: LD_VAR 0 5
75203: NOT
75204: IFFALSE 75208
// exit ;
75206: GO 75256
// if asc then
75208: LD_VAR 0 2
75212: IFFALSE 75236
// result := SortListByListAsc ( units , tmp ) else
75214: LD_ADDR_VAR 0 3
75218: PUSH
75219: LD_VAR 0 1
75223: PPUSH
75224: LD_VAR 0 5
75228: PPUSH
75229: CALL_OW 76
75233: ST_TO_ADDR
75234: GO 75256
// result := SortListByListDesc ( units , tmp ) ;
75236: LD_ADDR_VAR 0 3
75240: PUSH
75241: LD_VAR 0 1
75245: PPUSH
75246: LD_VAR 0 5
75250: PPUSH
75251: CALL_OW 77
75255: ST_TO_ADDR
// end ;
75256: LD_VAR 0 3
75260: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75261: LD_INT 0
75263: PPUSH
75264: PPUSH
// task := GetTaskList ( mech ) ;
75265: LD_ADDR_VAR 0 4
75269: PUSH
75270: LD_VAR 0 1
75274: PPUSH
75275: CALL_OW 437
75279: ST_TO_ADDR
// if not task then
75280: LD_VAR 0 4
75284: NOT
75285: IFFALSE 75289
// exit ;
75287: GO 75331
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75289: LD_ADDR_VAR 0 3
75293: PUSH
75294: LD_VAR 0 4
75298: PUSH
75299: LD_INT 1
75301: ARRAY
75302: PUSH
75303: LD_INT 1
75305: ARRAY
75306: PUSH
75307: LD_STRING r
75309: EQUAL
75310: PUSH
75311: LD_VAR 0 4
75315: PUSH
75316: LD_INT 1
75318: ARRAY
75319: PUSH
75320: LD_INT 4
75322: ARRAY
75323: PUSH
75324: LD_VAR 0 2
75328: EQUAL
75329: AND
75330: ST_TO_ADDR
// end ;
75331: LD_VAR 0 3
75335: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75336: LD_INT 0
75338: PPUSH
// SetDir ( unit , d ) ;
75339: LD_VAR 0 1
75343: PPUSH
75344: LD_VAR 0 4
75348: PPUSH
75349: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75353: LD_VAR 0 1
75357: PPUSH
75358: LD_VAR 0 2
75362: PPUSH
75363: LD_VAR 0 3
75367: PPUSH
75368: LD_VAR 0 5
75372: PPUSH
75373: CALL_OW 48
// end ;
75377: LD_VAR 0 6
75381: RET
// export function ToNaturalNumber ( number ) ; begin
75382: LD_INT 0
75384: PPUSH
// result := number div 1 ;
75385: LD_ADDR_VAR 0 2
75389: PUSH
75390: LD_VAR 0 1
75394: PUSH
75395: LD_INT 1
75397: DIV
75398: ST_TO_ADDR
// if number < 0 then
75399: LD_VAR 0 1
75403: PUSH
75404: LD_INT 0
75406: LESS
75407: IFFALSE 75417
// result := 0 ;
75409: LD_ADDR_VAR 0 2
75413: PUSH
75414: LD_INT 0
75416: ST_TO_ADDR
// end ;
75417: LD_VAR 0 2
75421: RET
// export function SortByClass ( units , class ) ; var un ; begin
75422: LD_INT 0
75424: PPUSH
75425: PPUSH
// if not units or not class then
75426: LD_VAR 0 1
75430: NOT
75431: PUSH
75432: LD_VAR 0 2
75436: NOT
75437: OR
75438: IFFALSE 75442
// exit ;
75440: GO 75537
// result := [ ] ;
75442: LD_ADDR_VAR 0 3
75446: PUSH
75447: EMPTY
75448: ST_TO_ADDR
// for un in units do
75449: LD_ADDR_VAR 0 4
75453: PUSH
75454: LD_VAR 0 1
75458: PUSH
75459: FOR_IN
75460: IFFALSE 75535
// if GetClass ( un ) = class then
75462: LD_VAR 0 4
75466: PPUSH
75467: CALL_OW 257
75471: PUSH
75472: LD_VAR 0 2
75476: EQUAL
75477: IFFALSE 75504
// result := Insert ( result , 1 , un ) else
75479: LD_ADDR_VAR 0 3
75483: PUSH
75484: LD_VAR 0 3
75488: PPUSH
75489: LD_INT 1
75491: PPUSH
75492: LD_VAR 0 4
75496: PPUSH
75497: CALL_OW 2
75501: ST_TO_ADDR
75502: GO 75533
// result := Replace ( result , result + 1 , un ) ;
75504: LD_ADDR_VAR 0 3
75508: PUSH
75509: LD_VAR 0 3
75513: PPUSH
75514: LD_VAR 0 3
75518: PUSH
75519: LD_INT 1
75521: PLUS
75522: PPUSH
75523: LD_VAR 0 4
75527: PPUSH
75528: CALL_OW 1
75532: ST_TO_ADDR
75533: GO 75459
75535: POP
75536: POP
// end ; end_of_file
75537: LD_VAR 0 3
75541: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75542: LD_VAR 0 1
75546: PUSH
75547: LD_INT 200
75549: DOUBLE
75550: GREATEREQUAL
75551: IFFALSE 75559
75553: LD_INT 299
75555: DOUBLE
75556: LESSEQUAL
75557: IFTRUE 75561
75559: GO 75593
75561: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75562: LD_VAR 0 1
75566: PPUSH
75567: LD_VAR 0 2
75571: PPUSH
75572: LD_VAR 0 3
75576: PPUSH
75577: LD_VAR 0 4
75581: PPUSH
75582: LD_VAR 0 5
75586: PPUSH
75587: CALL 32785 0 5
75591: GO 75670
75593: LD_INT 300
75595: DOUBLE
75596: GREATEREQUAL
75597: IFFALSE 75605
75599: LD_INT 399
75601: DOUBLE
75602: LESSEQUAL
75603: IFTRUE 75607
75605: GO 75669
75607: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75608: LD_VAR 0 1
75612: PPUSH
75613: LD_VAR 0 2
75617: PPUSH
75618: LD_VAR 0 3
75622: PPUSH
75623: LD_VAR 0 4
75627: PPUSH
75628: LD_VAR 0 5
75632: PPUSH
75633: LD_VAR 0 6
75637: PPUSH
75638: LD_VAR 0 7
75642: PPUSH
75643: LD_VAR 0 8
75647: PPUSH
75648: LD_VAR 0 9
75652: PPUSH
75653: LD_VAR 0 10
75657: PPUSH
75658: LD_VAR 0 11
75662: PPUSH
75663: CALL 30673 0 11
75667: GO 75670
75669: POP
// end ;
75670: PPOPN 11
75672: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75673: LD_VAR 0 1
75677: PPUSH
75678: LD_VAR 0 2
75682: PPUSH
75683: LD_VAR 0 3
75687: PPUSH
75688: LD_VAR 0 4
75692: PPUSH
75693: LD_VAR 0 5
75697: PPUSH
75698: CALL 32767 0 5
// end ; end_of_file
75702: PPOPN 5
75704: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75705: LD_VAR 0 1
75709: PPUSH
75710: LD_VAR 0 2
75714: PPUSH
75715: LD_VAR 0 3
75719: PPUSH
75720: LD_VAR 0 4
75724: PPUSH
75725: LD_VAR 0 5
75729: PPUSH
75730: LD_VAR 0 6
75734: PPUSH
75735: CALL 19481 0 6
// end ;
75739: PPOPN 6
75741: END
