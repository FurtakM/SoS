// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 618 0 0
// PrepareArabian ;
  12: CALL 1049 0 0
// PrepareAmerican ;
  16: CALL 4074 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 8985 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 20
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 19
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 23
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 25
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 26
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 27
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 15
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 13
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// allowCargoEvacuation := false ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// americanStartRun := false ;
 300: LD_ADDR_EXP 14
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// end ; end_of_file
 308: LD_VAR 0 1
 312: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 313: LD_INT 0
 315: PPUSH
// uc_side := side ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_VAR 0 1
 325: ST_TO_ADDR
// uc_nation := nation ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_VAR 0 2
 335: ST_TO_ADDR
// vc_chassis := chassis ;
 336: LD_ADDR_OWVAR 37
 340: PUSH
 341: LD_VAR 0 3
 345: ST_TO_ADDR
// vc_engine := engine ;
 346: LD_ADDR_OWVAR 39
 350: PUSH
 351: LD_VAR 0 4
 355: ST_TO_ADDR
// vc_control := control ;
 356: LD_ADDR_OWVAR 38
 360: PUSH
 361: LD_VAR 0 5
 365: ST_TO_ADDR
// vc_weapon := weapon ;
 366: LD_ADDR_OWVAR 40
 370: PUSH
 371: LD_VAR 0 6
 375: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 376: LD_ADDR_OWVAR 41
 380: PUSH
 381: LD_VAR 0 7
 385: ST_TO_ADDR
// result := CreateVehicle ;
 386: LD_ADDR_VAR 0 8
 390: PUSH
 391: CALL_OW 45
 395: ST_TO_ADDR
// end ;
 396: LD_VAR 0 8
 400: RET
// export function SayX ( units , ident ) ; var i ; begin
 401: LD_INT 0
 403: PPUSH
 404: PPUSH
// result := false ;
 405: LD_ADDR_VAR 0 3
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
// if not units then
 413: LD_VAR 0 1
 417: NOT
 418: IFFALSE 422
// exit ;
 420: GO 476
// for i in units do
 422: LD_ADDR_VAR 0 4
 426: PUSH
 427: LD_VAR 0 1
 431: PUSH
 432: FOR_IN
 433: IFFALSE 474
// if IsOk ( i ) then
 435: LD_VAR 0 4
 439: PPUSH
 440: CALL_OW 302
 444: IFFALSE 472
// begin Say ( i , ident ) ;
 446: LD_VAR 0 4
 450: PPUSH
 451: LD_VAR 0 2
 455: PPUSH
 456: CALL_OW 88
// result := i ;
 460: LD_ADDR_VAR 0 3
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// break ;
 470: GO 474
// end ;
 472: GO 432
 474: POP
 475: POP
// end ;
 476: LD_VAR 0 3
 480: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// InitUc ;
 485: CALL_OW 18
// InitHc ;
 489: CALL_OW 19
// uc_side := 0 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 0
 500: ST_TO_ADDR
// uc_nation := 0 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 0
 508: ST_TO_ADDR
// for i = 1 to amount do
 509: LD_ADDR_VAR 0 4
 513: PUSH
 514: DOUBLE
 515: LD_INT 1
 517: DEC
 518: ST_TO_ADDR
 519: LD_VAR 0 2
 523: PUSH
 524: FOR_TO
 525: IFFALSE 607
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 527: LD_ADDR_OWVAR 29
 531: PUSH
 532: LD_INT 9
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 12
 542: PUSH
 543: LD_INT 9
 545: PPUSH
 546: LD_INT 12
 548: PPUSH
 549: CALL_OW 12
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 558: LD_ADDR_OWVAR 35
 562: PUSH
 563: LD_INT 1
 565: NEG
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: CALL_OW 12
 574: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 575: LD_INT 0
 577: PPUSH
 578: LD_INT 12
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 588: CALL_OW 44
 592: PPUSH
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// end ;
 605: GO 524
 607: POP
 608: POP
// InitHc ;
 609: CALL_OW 19
// end ;
 613: LD_VAR 0 3
 617: RET
// export function CreateNature ; var i ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 4
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_OWVAR 67
 643: ARRAY
 644: PPUSH
 645: CALL 481 0 2
// for i := 1 to 2 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 2
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 21 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 21
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 2
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 2 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 2
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := 18 ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 18
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// for i := 1 to 2 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_INT 2
 763: PUSH
 764: FOR_TO
 765: IFFALSE 800
// begin hc_class := 13 ;
 767: LD_ADDR_OWVAR 28
 771: PUSH
 772: LD_INT 13
 774: ST_TO_ADDR
// hc_gallery :=  ;
 775: LD_ADDR_OWVAR 33
 779: PUSH
 780: LD_STRING 
 782: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 783: CALL_OW 44
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 764
 800: POP
 801: POP
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 807: LD_INT 0
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not observer or not unit then
 812: LD_VAR 0 1
 816: NOT
 817: PUSH
 818: LD_VAR 0 2
 822: NOT
 823: OR
 824: IFFALSE 828
// exit ;
 826: GO 876
// if not See ( GetSide ( observer ) , unit ) then
 828: LD_VAR 0 1
 832: PPUSH
 833: CALL_OW 255
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 292
 847: NOT
 848: IFFALSE 852
// exit ;
 850: GO 876
// result := GetDistUnits ( observer , unit ) < 12 ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: LD_VAR 0 1
 861: PPUSH
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 12
 874: LESS
 875: ST_TO_ADDR
// end ;
 876: LD_VAR 0 3
 880: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 881: LD_INT 0
 883: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: PPUSH
 902: CALL_OW 488
 906: PUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 428
 929: PUSH
 930: LD_INT 0
 932: EQUAL
 933: AND
 934: IFFALSE 968
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 936: LD_VAR 0 1
 940: PPUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 1
 948: ARRAY
 949: PPUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 3
 963: PPUSH
 964: CALL_OW 48
// end ;
 968: LD_VAR 0 4
 972: RET
// export function ReverseArray ( array ) ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// if not array then
 977: LD_VAR 0 1
 981: NOT
 982: IFFALSE 986
// exit ;
 984: GO 1044
// result := [ ] ;
 986: LD_ADDR_VAR 0 2
 990: PUSH
 991: EMPTY
 992: ST_TO_ADDR
// for i := 1 to array do
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: DOUBLE
 999: LD_INT 1
1001: DEC
1002: ST_TO_ADDR
1003: LD_VAR 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1042
// result := Insert ( result , 1 , array [ i ] ) ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_VAR 0 2
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_VAR 0 1
1028: PUSH
1029: LD_VAR 0 3
1033: ARRAY
1034: PPUSH
1035: CALL_OW 2
1039: ST_TO_ADDR
1040: GO 1008
1042: POP
1043: POP
// end ; end_of_file
1044: LD_VAR 0 2
1048: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1049: LD_INT 0
1051: PPUSH
1052: PPUSH
1053: PPUSH
1054: PPUSH
// uc_side := 5 ;
1055: LD_ADDR_OWVAR 20
1059: PUSH
1060: LD_INT 5
1062: ST_TO_ADDR
// uc_nation := 2 ;
1063: LD_ADDR_OWVAR 21
1067: PUSH
1068: LD_INT 2
1070: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
1071: LD_INT 5
1073: PPUSH
1074: CALL_OW 274
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_INT 45
1084: PPUSH
1085: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_STRING Farmer
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 36327 0 3
1107: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1108: LD_ADDR_EXP 37
1112: PUSH
1113: LD_STRING Omar
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_STRING 
1121: PPUSH
1122: CALL 36327 0 3
1126: ST_TO_ADDR
// omarSquad := [ ] ;
1127: LD_ADDR_EXP 40
1131: PUSH
1132: EMPTY
1133: ST_TO_ADDR
// heikeSquad := [ ] ;
1134: LD_ADDR_EXP 41
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1141: LD_ADDR_EXP 42
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// omarCargo := [ ] ;
1148: LD_ADDR_EXP 43
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to 5 do
1155: LD_ADDR_VAR 0 2
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_INT 5
1167: PUSH
1168: FOR_TO
1169: IFFALSE 1327
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1171: LD_INT 0
1173: PPUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: LD_VAR 0 2
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 380
// un := CreateHuman ;
1209: LD_ADDR_VAR 0 3
1213: PUSH
1214: CALL_OW 44
1218: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1219: LD_ADDR_EXP 40
1223: PUSH
1224: LD_EXP 40
1228: PUSH
1229: LD_VAR 0 3
1233: UNION
1234: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1235: LD_VAR 0 3
1239: PPUSH
1240: LD_INT 87
1242: PUSH
1243: LD_INT 30
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 91
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 15
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 79
1272: PUSH
1273: LD_INT 14
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 82
1282: PUSH
1283: LD_INT 13
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_VAR 0 2
1301: ARRAY
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL 881 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 93
1317: PPUSH
1318: LD_INT 21
1320: PPUSH
1321: CALL_OW 118
// end ;
1325: GO 1168
1327: POP
1328: POP
// uc_side := 2 ;
1329: LD_ADDR_OWVAR 20
1333: PUSH
1334: LD_INT 2
1336: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1337: LD_ADDR_EXP 28
1341: PUSH
1342: LD_STRING Heike
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_EXP 2
1355: PPUSH
1356: CALL 36327 0 3
1360: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1361: LD_ADDR_EXP 32
1365: PUSH
1366: LD_STRING Aviradze
1368: PPUSH
1369: LD_EXP 1
1373: NOT
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL 36327 0 3
1384: ST_TO_ADDR
// tmp := [ ] ;
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: EMPTY
1391: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 29
1396: PUSH
1397: LD_STRING Givi
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 36327 0 3
1415: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 30
1420: PUSH
1421: LD_STRING Mike
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 36327 0 3
1439: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 31
1444: PUSH
1445: LD_STRING Kamil
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 36327 0 3
1463: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 33
1468: PUSH
1469: LD_STRING Kaia
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 36327 0 3
1487: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 34
1492: PUSH
1493: LD_STRING Sophia
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 36327 0 3
1511: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1512: LD_ADDR_EXP 35
1516: PUSH
1517: LD_STRING Markov
1519: PPUSH
1520: LD_EXP 1
1524: NOT
1525: PPUSH
1526: LD_EXP 2
1530: PPUSH
1531: CALL 36327 0 3
1535: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1536: LD_ADDR_EXP 42
1540: PUSH
1541: LD_STRING 02_others
1543: PPUSH
1544: CALL_OW 31
1548: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_EXP 30
1558: PUSH
1559: LD_EXP 31
1563: PUSH
1564: LD_EXP 33
1568: PUSH
1569: LD_EXP 34
1573: PUSH
1574: LD_EXP 35
1578: PUSH
1579: LD_EXP 29
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_EXP 42
1596: ADD
1597: PUSH
1598: LD_INT 0
1600: DIFF
1601: ST_TO_ADDR
// heikeSquad := tmp ;
1602: LD_ADDR_EXP 41
1606: PUSH
1607: LD_VAR 0 4
1611: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1612: LD_EXP 41
1616: PPUSH
1617: LD_INT 25
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PPUSH
1627: CALL_OW 72
1631: PUSH
1632: LD_INT 3
1634: LESS
1635: IFFALSE 1685
// begin SetClass ( Kaia , 1 ) ;
1637: LD_EXP 33
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1649: LD_EXP 30
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1661: LD_EXP 29
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1673: LD_EXP 28
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_STRING 02_ape
1697: PPUSH
1698: CALL_OW 31
1702: UNION
1703: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1704: LD_EXP 28
1708: PPUSH
1709: LD_INT 92
1711: PPUSH
1712: LD_INT 17
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1722: LD_EXP 36
1726: PPUSH
1727: LD_INT 95
1729: PPUSH
1730: LD_INT 19
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1740: LD_EXP 37
1744: PPUSH
1745: LD_INT 89
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1758: LD_EXP 32
1762: PPUSH
1763: LD_INT 92
1765: PPUSH
1766: LD_INT 27
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1776: LD_EXP 37
1780: PPUSH
1781: LD_EXP 32
1785: PPUSH
1786: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1790: LD_EXP 32
1794: PPUSH
1795: LD_EXP 37
1799: PPUSH
1800: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1804: LD_EXP 28
1808: PUSH
1809: LD_EXP 36
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_EXP 37
1822: PPUSH
1823: CALL_OW 119
// if tmp then
1827: LD_VAR 0 4
1831: IFFALSE 1885
// for i in tmp do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: LD_VAR 0 4
1842: PUSH
1843: FOR_IN
1844: IFFALSE 1883
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 94
1853: PPUSH
1854: LD_INT 14
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_EXP 28
1876: PPUSH
1877: CALL_OW 119
// end ;
1881: GO 1843
1883: POP
1884: POP
// farmerSquad := [ ] ;
1885: LD_ADDR_EXP 39
1889: PUSH
1890: EMPTY
1891: ST_TO_ADDR
// uc_side := 5 ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_INT 5
1899: ST_TO_ADDR
// uc_nation := 2 ;
1900: LD_ADDR_OWVAR 21
1904: PUSH
1905: LD_INT 2
1907: ST_TO_ADDR
// for i := 1 to 4 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 4
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// begin PrepareHuman ( false , 1 , 2 ) ;
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: LD_INT 2
1932: PPUSH
1933: CALL_OW 380
// un := CreateHuman ;
1937: LD_ADDR_VAR 0 3
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1947: LD_VAR 0 3
1951: PPUSH
1952: LD_INT 102
1954: PPUSH
1955: LD_INT 27
1957: PPUSH
1958: LD_INT 4
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1968: LD_ADDR_EXP 39
1972: PUSH
1973: LD_EXP 39
1977: PUSH
1978: LD_VAR 0 3
1982: UNION
1983: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_EXP 37
1993: PPUSH
1994: CALL_OW 119
// end ;
1998: GO 1921
2000: POP
2001: POP
// for i := 1 to 2 do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: DOUBLE
2008: LD_INT 1
2010: DEC
2011: ST_TO_ADDR
2012: LD_INT 2
2014: PUSH
2015: FOR_TO
2016: IFFALSE 2094
// begin PrepareHuman ( false , 2 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 108
2048: PPUSH
2049: LD_INT 62
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2062: LD_ADDR_EXP 39
2066: PUSH
2067: LD_EXP 39
2071: PUSH
2072: LD_VAR 0 3
2076: UNION
2077: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2078: LD_VAR 0 3
2082: PPUSH
2083: LD_EXP 37
2087: PPUSH
2088: CALL_OW 119
// end ;
2092: GO 2015
2094: POP
2095: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2096: LD_INT 109
2098: PPUSH
2099: LD_INT 63
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 15
2107: NEG
2108: PPUSH
2109: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2113: LD_INT 109
2115: PPUSH
2116: LD_INT 63
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL_OW 331
// end ;
2126: LD_VAR 0 1
2130: RET
// export function PrepareIbrahim ( x , y ) ; begin
2131: LD_INT 0
2133: PPUSH
// uc_side := 6 ;
2134: LD_ADDR_OWVAR 20
2138: PUSH
2139: LD_INT 6
2141: ST_TO_ADDR
// uc_nation := 3 ;
2142: LD_ADDR_OWVAR 21
2146: PUSH
2147: LD_INT 3
2149: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_STRING IbrahimRu
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 36327 0 3
2168: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2169: LD_EXP 38
2173: PPUSH
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_INT 8
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 50
// end ;
2194: LD_VAR 0 3
2198: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2199: LD_EXP 37
2203: PUSH
2204: LD_EXP 40
2208: ADD
2209: PPUSH
2210: LD_INT 95
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 72
2224: IFFALSE 2280
2226: GO 2228
2228: DISABLE
2229: LD_INT 0
2231: PPUSH
// begin enable ;
2232: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_EXP 37
2242: PUSH
2243: LD_EXP 40
2247: ADD
2248: PPUSH
2249: LD_INT 95
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 72
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2278
// RemoveUnit ( i ) ;
2267: LD_VAR 0 1
2271: PPUSH
2272: CALL_OW 64
2276: GO 2264
2278: POP
2279: POP
// end ;
2280: PPOPN 1
2282: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2283: LD_EXP 3
2287: PUSH
2288: LD_EXP 36
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: CALL_OW 308
2300: AND
2301: IFFALSE 3084
2303: GO 2305
2305: DISABLE
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2312: LD_EXP 36
2316: PPUSH
2317: LD_INT 110
2319: PPUSH
2320: LD_INT 60
2322: PPUSH
2323: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2327: LD_EXP 36
2331: PPUSH
2332: LD_INT 110
2334: PPUSH
2335: LD_INT 61
2337: PPUSH
2338: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_EXP 39
2351: PPUSH
2352: LD_INT 25
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 72
2366: ST_TO_ADDR
// if tmp then
2367: LD_VAR 0 2
2371: IFFALSE 2465
// begin for i := 1 to 2 do
2373: LD_ADDR_VAR 0 1
2377: PUSH
2378: DOUBLE
2379: LD_INT 1
2381: DEC
2382: ST_TO_ADDR
2383: LD_INT 2
2385: PUSH
2386: FOR_TO
2387: IFFALSE 2463
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 1
2398: ARRAY
2399: PPUSH
2400: LD_INT 5
2402: PPUSH
2403: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2407: LD_VAR 0 2
2411: PUSH
2412: LD_VAR 0 1
2416: ARRAY
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2440: LD_VAR 0 2
2444: PUSH
2445: LD_VAR 0 1
2449: ARRAY
2450: PPUSH
2451: LD_INT 107
2453: PPUSH
2454: LD_INT 66
2456: PPUSH
2457: CALL_OW 171
// end ;
2461: GO 2386
2463: POP
2464: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2465: LD_ADDR_VAR 0 2
2469: PUSH
2470: LD_EXP 39
2474: PPUSH
2475: LD_INT 25
2477: PUSH
2478: LD_INT 2
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PPUSH
2485: CALL_OW 72
2489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2490: LD_INT 35
2492: PPUSH
2493: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 39
2506: PPUSH
2507: LD_INT 25
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 72
2521: ST_TO_ADDR
// until tmp ;
2522: LD_VAR 0 2
2526: IFFALSE 2490
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 31
2535: PPUSH
2536: LD_INT 102
2538: PPUSH
2539: LD_INT 69
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2549: LD_INT 35
2551: PPUSH
2552: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2556: LD_EXP 39
2560: PPUSH
2561: LD_INT 3
2563: PUSH
2564: LD_INT 60
2566: PUSH
2567: EMPTY
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 2
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 72
2592: IFFALSE 2549
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: LD_EXP 39
2603: PPUSH
2604: LD_INT 25
2606: PUSH
2607: LD_INT 2
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2619: LD_VAR 0 2
2623: PPUSH
2624: LD_INT 4
2626: PPUSH
2627: LD_INT 116
2629: PPUSH
2630: LD_INT 70
2632: PPUSH
2633: LD_INT 5
2635: PPUSH
2636: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
2640: LD_VAR 0 2
2644: PPUSH
2645: LD_INT 31
2647: PPUSH
2648: LD_INT 108
2650: PPUSH
2651: LD_INT 50
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2661: LD_INT 35
2663: PPUSH
2664: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2668: LD_INT 22
2670: PUSH
2671: LD_INT 5
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 30
2680: PUSH
2681: LD_INT 4
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 57
2693: PUSH
2694: EMPTY
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: IFFALSE 2661
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2712: LD_ADDR_VAR 0 3
2716: PUSH
2717: LD_INT 22
2719: PUSH
2720: LD_INT 5
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 30
2729: PUSH
2730: LD_INT 4
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 3
2739: PUSH
2740: LD_INT 57
2742: PUSH
2743: EMPTY
2744: LIST
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: PPUSH
2755: CALL_OW 69
2759: PUSH
2760: LD_INT 1
2762: ARRAY
2763: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2764: LD_ADDR_VAR 0 2
2768: PUSH
2769: LD_EXP 39
2773: PPUSH
2774: LD_INT 25
2776: PUSH
2777: LD_INT 1
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PPUSH
2784: CALL_OW 72
2788: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2789: LD_VAR 0 2
2793: PPUSH
2794: LD_VAR 0 3
2798: PPUSH
2799: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2803: LD_INT 35
2805: PPUSH
2806: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2810: LD_INT 22
2812: PUSH
2813: LD_INT 5
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 30
2822: PUSH
2823: LD_INT 31
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 57
2835: PUSH
2836: EMPTY
2837: LIST
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: LIST
2847: PPUSH
2848: CALL_OW 69
2852: PUSH
2853: LD_INT 2
2855: GREATEREQUAL
2856: IFFALSE 2803
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2858: LD_ADDR_VAR 0 2
2862: PUSH
2863: LD_EXP 39
2867: PPUSH
2868: LD_INT 25
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 72
2882: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2883: LD_VAR 0 2
2887: PUSH
2888: LD_INT 1
2890: ARRAY
2891: PPUSH
2892: LD_INT 5
2894: PPUSH
2895: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2899: LD_VAR 0 2
2903: PUSH
2904: LD_INT 2
2906: ARRAY
2907: PUSH
2908: LD_VAR 0 2
2912: PUSH
2913: LD_INT 3
2915: ARRAY
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PPUSH
2921: LD_VAR 0 3
2925: PPUSH
2926: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2930: LD_VAR 0 2
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PUSH
2939: LD_VAR 0 2
2943: PUSH
2944: LD_INT 3
2946: ARRAY
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2959: LD_VAR 0 2
2963: PUSH
2964: LD_INT 2
2966: ARRAY
2967: PUSH
2968: LD_VAR 0 2
2972: PUSH
2973: LD_INT 3
2975: ARRAY
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PPUSH
2981: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2985: LD_ADDR_VAR 0 4
2989: PUSH
2990: LD_INT 22
2992: PUSH
2993: LD_INT 5
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PUSH
3000: LD_INT 30
3002: PUSH
3003: LD_INT 31
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PPUSH
3014: CALL_OW 69
3018: ST_TO_ADDR
// for i := 1 to 2 do
3019: LD_ADDR_VAR 0 1
3023: PUSH
3024: DOUBLE
3025: LD_INT 1
3027: DEC
3028: ST_TO_ADDR
3029: LD_INT 2
3031: PUSH
3032: FOR_TO
3033: IFFALSE 3067
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3035: LD_VAR 0 2
3039: PUSH
3040: LD_VAR 0 1
3044: PUSH
3045: LD_INT 1
3047: PLUS
3048: ARRAY
3049: PPUSH
3050: LD_VAR 0 4
3054: PUSH
3055: LD_VAR 0 1
3059: ARRAY
3060: PPUSH
3061: CALL_OW 180
3065: GO 3032
3067: POP
3068: POP
// wait ( 1 1$00 ) ;
3069: LD_INT 2100
3071: PPUSH
3072: CALL_OW 67
// farmerBaseReady := true ;
3076: LD_ADDR_EXP 4
3080: PUSH
3081: LD_INT 1
3083: ST_TO_ADDR
// end ;
3084: PPOPN 4
3086: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3087: LD_EXP 4
3091: PUSH
3092: LD_EXP 11
3096: NOT
3097: AND
3098: IFFALSE 3620
3100: GO 3102
3102: DISABLE
3103: LD_INT 0
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
// begin enable ;
3110: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3111: LD_ADDR_VAR 0 3
3115: PUSH
3116: LD_EXP 39
3120: PPUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 72
3135: PUSH
3136: LD_EXP 36
3140: ADD
3141: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3142: LD_ADDR_VAR 0 2
3146: PUSH
3147: LD_EXP 39
3151: PPUSH
3152: LD_INT 25
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PPUSH
3162: CALL_OW 72
3166: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3167: LD_ADDR_VAR 0 5
3171: PUSH
3172: LD_INT 22
3174: PUSH
3175: LD_INT 5
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 21
3184: PUSH
3185: LD_INT 3
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 24
3197: PUSH
3198: LD_INT 1000
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3219: LD_ADDR_VAR 0 4
3223: PUSH
3224: LD_INT 22
3226: PUSH
3227: LD_INT 5
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 30
3236: PUSH
3237: LD_INT 4
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3253: LD_VAR 0 4
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PPUSH
3262: CALL_OW 302
3266: IFFALSE 3330
// for i in sol do
3268: LD_ADDR_VAR 0 1
3272: PUSH
3273: LD_VAR 0 3
3277: PUSH
3278: FOR_IN
3279: IFFALSE 3328
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 256
3290: PUSH
3291: LD_INT 999
3293: LESS
3294: PUSH
3295: LD_VAR 0 1
3299: PPUSH
3300: CALL_OW 310
3304: NOT
3305: AND
3306: IFFALSE 3326
// ComEnterUnit ( i , arm [ 1 ] ) ;
3308: LD_VAR 0 1
3312: PPUSH
3313: LD_VAR 0 4
3317: PUSH
3318: LD_INT 1
3320: ARRAY
3321: PPUSH
3322: CALL_OW 120
3326: GO 3278
3328: POP
3329: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3330: LD_VAR 0 2
3334: NOT
3335: PUSH
3336: LD_INT 22
3338: PUSH
3339: LD_INT 1
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PUSH
3346: LD_INT 21
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PPUSH
3360: CALL_OW 69
3364: NOT
3365: AND
3366: IFFALSE 3458
// begin uc_side := 5 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 5
3375: ST_TO_ADDR
// uc_nation := 2 ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 2
3383: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3384: LD_INT 0
3386: PPUSH
3387: LD_INT 2
3389: PPUSH
3390: LD_INT 2
3392: PPUSH
3393: CALL_OW 380
// eng := CreateHuman ;
3397: LD_ADDR_VAR 0 2
3401: PUSH
3402: CALL_OW 44
3406: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3407: LD_VAR 0 2
3411: PPUSH
3412: LD_INT 102
3414: PPUSH
3415: LD_INT 8
3417: PPUSH
3418: LD_INT 0
3420: PPUSH
3421: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3425: LD_VAR 0 2
3429: PPUSH
3430: LD_INT 110
3432: PPUSH
3433: LD_INT 60
3435: PPUSH
3436: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3440: LD_ADDR_EXP 39
3444: PUSH
3445: LD_EXP 39
3449: PUSH
3450: LD_VAR 0 2
3454: UNION
3455: ST_TO_ADDR
// end else
3456: GO 3620
// begin for i in eng do
3458: LD_ADDR_VAR 0 1
3462: PUSH
3463: LD_VAR 0 2
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3618
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3471: LD_INT 10
3473: PPUSH
3474: LD_INT 1
3476: PPUSH
3477: CALL_OW 287
3481: IFFALSE 3532
// begin if IsInUnit ( i ) then
3483: LD_VAR 0 1
3487: PPUSH
3488: CALL_OW 310
3492: IFFALSE 3503
// ComExitBuilding ( i ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3503: LD_VAR 0 1
3507: PPUSH
3508: LD_INT 10
3510: PPUSH
3511: CALL_OW 308
3515: NOT
3516: IFFALSE 3530
// AddComMoveToArea ( i , collectFarmerArea ) ;
3518: LD_VAR 0 1
3522: PPUSH
3523: LD_INT 10
3525: PPUSH
3526: CALL_OW 173
// end else
3530: GO 3616
// begin if damagedBuilding then
3532: LD_VAR 0 5
3536: IFFALSE 3580
// begin if IsInUnit ( i ) then
3538: LD_VAR 0 1
3542: PPUSH
3543: CALL_OW 310
3547: IFFALSE 3560
// ComExitBuilding ( i ) else
3549: LD_VAR 0 1
3553: PPUSH
3554: CALL_OW 122
3558: GO 3578
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3560: LD_VAR 0 1
3564: PPUSH
3565: LD_VAR 0 5
3569: PUSH
3570: LD_INT 1
3572: ARRAY
3573: PPUSH
3574: CALL_OW 130
// end else
3578: GO 3616
// if not IsInUnit ( i ) and not HasTask ( i ) then
3580: LD_VAR 0 1
3584: PPUSH
3585: CALL_OW 310
3589: NOT
3590: PUSH
3591: LD_VAR 0 1
3595: PPUSH
3596: CALL_OW 314
3600: NOT
3601: AND
3602: IFFALSE 3616
// ComEnterUnit ( i , arDepot ) ;
3604: LD_VAR 0 1
3608: PPUSH
3609: LD_INT 5
3611: PPUSH
3612: CALL_OW 120
// end ; end ;
3616: GO 3468
3618: POP
3619: POP
// end ; end ;
3620: PPOPN 5
3622: END
// export function StartCargoEvacuation ; begin
3623: LD_INT 0
3625: PPUSH
// while omarCargoCounter > 0 do
3626: LD_EXP 21
3630: PUSH
3631: LD_INT 0
3633: GREATER
3634: IFFALSE 3951
// begin wait ( 0 0$20 ) ;
3636: LD_INT 700
3638: PPUSH
3639: CALL_OW 67
// omarCargo := PrepareCargo ;
3643: LD_ADDR_EXP 43
3647: PUSH
3648: CALL 3956 0 0
3652: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3653: LD_EXP 43
3657: PPUSH
3658: LD_INT 0
3660: PPUSH
3661: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3665: LD_EXP 43
3669: PPUSH
3670: LD_INT 107
3672: PPUSH
3673: LD_INT 59
3675: PPUSH
3676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3680: LD_INT 35
3682: PPUSH
3683: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3687: LD_EXP 43
3691: PPUSH
3692: LD_INT 107
3694: PPUSH
3695: LD_INT 59
3697: PPUSH
3698: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3702: LD_EXP 43
3706: PPUSH
3707: CALL_OW 302
3711: NOT
3712: PUSH
3713: LD_EXP 43
3717: PPUSH
3718: CALL_OW 301
3722: OR
3723: IFFALSE 3727
// continue ;
3725: GO 3680
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3727: LD_EXP 43
3731: PPUSH
3732: LD_INT 107
3734: PPUSH
3735: LD_INT 59
3737: PPUSH
3738: CALL_OW 307
3742: PUSH
3743: LD_EXP 43
3747: PPUSH
3748: LD_INT 5
3750: PPUSH
3751: CALL_OW 296
3755: PUSH
3756: LD_INT 6
3758: LESS
3759: OR
3760: IFFALSE 3680
// SetTag ( omarCargo , 1 ) ;
3762: LD_EXP 43
3766: PPUSH
3767: LD_INT 1
3769: PPUSH
3770: CALL_OW 109
// wait ( 0 0$05 ) ;
3774: LD_INT 175
3776: PPUSH
3777: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3781: LD_EXP 43
3785: PPUSH
3786: LD_INT 5
3788: PPUSH
3789: LD_INT 1
3791: PPUSH
3792: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3796: LD_EXP 43
3800: PPUSH
3801: LD_INT 103
3803: PPUSH
3804: LD_INT 9
3806: PPUSH
3807: CALL_OW 171
// wait ( 0 0$1 ) ;
3811: LD_INT 35
3813: PPUSH
3814: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3818: LD_EXP 43
3822: PPUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 100
3828: PPUSH
3829: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3840: LD_EXP 43
3844: PPUSH
3845: LD_INT 103
3847: PPUSH
3848: LD_INT 9
3850: PPUSH
3851: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3855: LD_EXP 43
3859: PPUSH
3860: CALL_OW 302
3864: NOT
3865: PUSH
3866: LD_EXP 43
3870: PPUSH
3871: CALL_OW 301
3875: OR
3876: IFFALSE 3880
// continue ;
3878: GO 3833
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3880: LD_EXP 43
3884: PPUSH
3885: LD_INT 103
3887: PPUSH
3888: LD_INT 9
3890: PPUSH
3891: CALL_OW 307
3895: PUSH
3896: LD_EXP 43
3900: PPUSH
3901: LD_INT 3
3903: PPUSH
3904: CALL_OW 308
3908: OR
3909: PUSH
3910: LD_EXP 43
3914: PPUSH
3915: CALL_OW 110
3919: PUSH
3920: LD_INT 0
3922: GREATER
3923: AND
3924: IFFALSE 3833
// RemoveUnit ( omarCargo ) ;
3926: LD_EXP 43
3930: PPUSH
3931: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
3935: LD_ADDR_EXP 21
3939: PUSH
3940: LD_EXP 21
3944: PUSH
3945: LD_INT 1
3947: MINUS
3948: ST_TO_ADDR
// end ;
3949: GO 3626
// end ;
3951: LD_VAR 0 1
3955: RET
// export function PrepareCargo ; var un , veh ; begin
3956: LD_INT 0
3958: PPUSH
3959: PPUSH
3960: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3961: LD_ADDR_VAR 0 3
3965: PUSH
3966: LD_INT 5
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: LD_INT 13
3974: PPUSH
3975: LD_INT 1
3977: PPUSH
3978: LD_INT 1
3980: PPUSH
3981: LD_INT 32
3983: PPUSH
3984: LD_INT 80
3986: PPUSH
3987: CALL 313 0 7
3991: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3992: LD_VAR 0 3
3996: PPUSH
3997: LD_INT 4
3999: PPUSH
4000: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4004: LD_VAR 0 3
4008: PPUSH
4009: LD_INT 101
4011: PPUSH
4012: LD_INT 8
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4022: LD_INT 0
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: LD_INT 2
4030: PPUSH
4031: CALL_OW 380
// un := CreateHuman ;
4035: LD_ADDR_VAR 0 2
4039: PUSH
4040: CALL_OW 44
4044: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4045: LD_VAR 0 2
4049: PPUSH
4050: LD_VAR 0 3
4054: PPUSH
4055: CALL_OW 52
// result := veh ;
4059: LD_ADDR_VAR 0 1
4063: PUSH
4064: LD_VAR 0 3
4068: ST_TO_ADDR
// end ; end_of_file
4069: LD_VAR 0 1
4073: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4074: LD_INT 0
4076: PPUSH
4077: PPUSH
4078: PPUSH
// usForces := [ ] ;
4079: LD_ADDR_EXP 44
4083: PUSH
4084: EMPTY
4085: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4086: LD_ADDR_EXP 46
4090: PUSH
4091: LD_INT 6
4093: PUSH
4094: LD_INT 32
4096: PUSH
4097: LD_INT 27
4099: PUSH
4100: LD_INT 1
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 4
4111: PUSH
4112: LD_INT 43
4114: PUSH
4115: LD_INT 24
4117: PUSH
4118: LD_INT 5
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: PUSH
4127: LD_INT 27
4129: PUSH
4130: LD_INT 29
4132: PUSH
4133: LD_INT 21
4135: PUSH
4136: LD_INT 0
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4150: LD_INT 11
4152: PPUSH
4153: CALL_OW 274
4157: PPUSH
4158: LD_INT 1
4160: PPUSH
4161: LD_INT 150
4163: PUSH
4164: LD_INT 120
4166: PUSH
4167: LD_INT 100
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: PUSH
4175: LD_OWVAR 67
4179: ARRAY
4180: PPUSH
4181: CALL_OW 277
// if Difficulty = 1 then
4185: LD_OWVAR 67
4189: PUSH
4190: LD_INT 1
4192: EQUAL
4193: IFFALSE 4202
// RemoveUnit ( hillBun ) ;
4195: LD_INT 14
4197: PPUSH
4198: CALL_OW 64
// uc_side := 1 ;
4202: LD_ADDR_OWVAR 20
4206: PUSH
4207: LD_INT 1
4209: ST_TO_ADDR
// uc_nation := 1 ;
4210: LD_ADDR_OWVAR 21
4214: PUSH
4215: LD_INT 1
4217: ST_TO_ADDR
// hc_gallery :=  ;
4218: LD_ADDR_OWVAR 33
4222: PUSH
4223: LD_STRING 
4225: ST_TO_ADDR
// hc_name :=  ;
4226: LD_ADDR_OWVAR 26
4230: PUSH
4231: LD_STRING 
4233: ST_TO_ADDR
// hc_importance := 0 ;
4234: LD_ADDR_OWVAR 32
4238: PUSH
4239: LD_INT 0
4241: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4242: LD_INT 1
4244: PPUSH
4245: LD_INT 1
4247: PPUSH
4248: LD_INT 3
4250: PPUSH
4251: CALL_OW 380
// usCommander := CreateHuman ;
4255: LD_ADDR_EXP 45
4259: PUSH
4260: CALL_OW 44
4264: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4265: LD_EXP 45
4269: PPUSH
4270: LD_INT 11
4272: PPUSH
4273: CALL_OW 52
// if Difficulty > 1 then
4277: LD_OWVAR 67
4281: PUSH
4282: LD_INT 1
4284: GREATER
4285: IFFALSE 4367
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4287: LD_INT 0
4289: PPUSH
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 1
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: LD_INT 3
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: PUSH
4307: LD_OWVAR 67
4311: ARRAY
4312: PPUSH
4313: CALL_OW 380
// un := CreateHuman ;
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: CALL_OW 44
4326: ST_TO_ADDR
// usForces := usForces union un ;
4327: LD_ADDR_EXP 44
4331: PUSH
4332: LD_EXP 44
4336: PUSH
4337: LD_VAR 0 3
4341: UNION
4342: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4343: LD_VAR 0 3
4347: PPUSH
4348: LD_INT 1
4350: PPUSH
4351: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4355: LD_VAR 0 3
4359: PPUSH
4360: LD_INT 14
4362: PPUSH
4363: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4367: LD_ADDR_VAR 0 2
4371: PUSH
4372: DOUBLE
4373: LD_INT 1
4375: DEC
4376: ST_TO_ADDR
4377: LD_INT 2
4379: PUSH
4380: LD_INT 3
4382: PUSH
4383: LD_INT 4
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: LD_OWVAR 67
4395: ARRAY
4396: PUSH
4397: FOR_TO
4398: IFFALSE 4540
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4400: LD_INT 0
4402: PPUSH
4403: LD_INT 1
4405: PPUSH
4406: LD_INT 1
4408: PUSH
4409: LD_INT 2
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_OWVAR 67
4424: ARRAY
4425: PPUSH
4426: CALL_OW 380
// un := CreateHuman ;
4430: LD_ADDR_VAR 0 3
4434: PUSH
4435: CALL_OW 44
4439: ST_TO_ADDR
// usForces := usForces union un ;
4440: LD_ADDR_EXP 44
4444: PUSH
4445: LD_EXP 44
4449: PUSH
4450: LD_VAR 0 3
4454: UNION
4455: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4456: LD_VAR 0 3
4460: PPUSH
4461: LD_INT 39
4463: PPUSH
4464: LD_INT 24
4466: PPUSH
4467: LD_INT 4
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 50
// if i < 3 then
4477: LD_VAR 0 2
4481: PUSH
4482: LD_INT 3
4484: LESS
4485: IFFALSE 4538
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_INT 22
4494: PUSH
4495: LD_INT 1
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 58
4504: PUSH
4505: EMPTY
4506: LIST
4507: PUSH
4508: LD_INT 30
4510: PUSH
4511: LD_INT 31
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: LIST
4522: PPUSH
4523: CALL_OW 69
4527: PUSH
4528: LD_VAR 0 2
4532: ARRAY
4533: PPUSH
4534: CALL_OW 120
// end ;
4538: GO 4397
4540: POP
4541: POP
// for i := 1 to 2 do
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: DOUBLE
4548: LD_INT 1
4550: DEC
4551: ST_TO_ADDR
4552: LD_INT 2
4554: PUSH
4555: FOR_TO
4556: IFFALSE 4620
// begin PrepareHuman ( false , 2 , 2 ) ;
4558: LD_INT 0
4560: PPUSH
4561: LD_INT 2
4563: PPUSH
4564: LD_INT 2
4566: PPUSH
4567: CALL_OW 380
// un := CreateHuman ;
4571: LD_ADDR_VAR 0 3
4575: PUSH
4576: CALL_OW 44
4580: ST_TO_ADDR
// usForces := usForces union un ;
4581: LD_ADDR_EXP 44
4585: PUSH
4586: LD_EXP 44
4590: PUSH
4591: LD_VAR 0 3
4595: UNION
4596: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: LD_INT 39
4604: PPUSH
4605: LD_INT 24
4607: PPUSH
4608: LD_INT 4
4610: PPUSH
4611: LD_INT 0
4613: PPUSH
4614: CALL_OW 50
// end ;
4618: GO 4555
4620: POP
4621: POP
// PrepareHuman ( false , 4 , 1 ) ;
4622: LD_INT 0
4624: PPUSH
4625: LD_INT 4
4627: PPUSH
4628: LD_INT 1
4630: PPUSH
4631: CALL_OW 380
// un := CreateHuman ;
4635: LD_ADDR_VAR 0 3
4639: PUSH
4640: CALL_OW 44
4644: ST_TO_ADDR
// usForces := usForces union un ;
4645: LD_ADDR_EXP 44
4649: PUSH
4650: LD_EXP 44
4654: PUSH
4655: LD_VAR 0 3
4659: UNION
4660: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4661: LD_VAR 0 3
4665: PPUSH
4666: LD_INT 39
4668: PPUSH
4669: LD_INT 24
4671: PPUSH
4672: LD_INT 4
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: CALL_OW 50
// end ;
4682: LD_VAR 0 1
4686: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4687: LD_EXP 44
4691: PUSH
4692: LD_EXP 6
4696: NOT
4697: AND
4698: PUSH
4699: LD_EXP 14
4703: NOT
4704: AND
4705: IFFALSE 5136
4707: GO 4709
4709: DISABLE
4710: LD_INT 0
4712: PPUSH
4713: PPUSH
4714: PPUSH
4715: PPUSH
4716: PPUSH
// begin enable ;
4717: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4718: LD_ADDR_VAR 0 3
4722: PUSH
4723: LD_EXP 44
4727: PPUSH
4728: LD_INT 25
4730: PUSH
4731: LD_INT 2
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PPUSH
4738: CALL_OW 72
4742: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4743: LD_ADDR_VAR 0 4
4747: PUSH
4748: LD_EXP 44
4752: PPUSH
4753: LD_INT 25
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PPUSH
4763: CALL_OW 72
4767: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4768: LD_ADDR_VAR 0 5
4772: PUSH
4773: LD_EXP 44
4777: PPUSH
4778: LD_INT 25
4780: PUSH
4781: LD_INT 4
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PPUSH
4788: CALL_OW 72
4792: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4793: LD_INT 7
4795: PPUSH
4796: LD_INT 22
4798: PUSH
4799: LD_INT 2
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PUSH
4811: LD_INT 1
4813: EQUAL
4814: IFFALSE 4890
// for i in sol do
4816: LD_ADDR_VAR 0 1
4820: PUSH
4821: LD_VAR 0 4
4825: PUSH
4826: FOR_IN
4827: IFFALSE 4888
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4829: LD_VAR 0 1
4833: PPUSH
4834: CALL_OW 310
4838: NOT
4839: PUSH
4840: LD_VAR 0 1
4844: PPUSH
4845: CALL_OW 310
4849: PPUSH
4850: CALL_OW 266
4854: PUSH
4855: LD_INT 4
4857: EQUAL
4858: NOT
4859: OR
4860: IFFALSE 4886
// begin ComExitBuilding ( i ) ;
4862: LD_VAR 0 1
4866: PPUSH
4867: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4871: LD_VAR 0 1
4875: PPUSH
4876: LD_INT 37
4878: PPUSH
4879: LD_INT 23
4881: PPUSH
4882: CALL_OW 174
// end ;
4886: GO 4826
4888: POP
4889: POP
// if eng then
4890: LD_VAR 0 3
4894: IFFALSE 5136
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4896: LD_ADDR_VAR 0 2
4900: PUSH
4901: LD_INT 22
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 95
4913: PUSH
4914: LD_INT 7
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: LD_INT 21
4923: PUSH
4924: LD_INT 3
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 3
4933: PUSH
4934: LD_INT 24
4936: PUSH
4937: LD_INT 1000
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: PPUSH
4954: CALL_OW 69
4958: ST_TO_ADDR
// if b then
4959: LD_VAR 0 2
4963: IFFALSE 4994
// begin ComExitBuilding ( eng ) ;
4965: LD_VAR 0 3
4969: PPUSH
4970: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4974: LD_VAR 0 3
4978: PPUSH
4979: LD_VAR 0 2
4983: PUSH
4984: LD_INT 1
4986: ARRAY
4987: PPUSH
4988: CALL_OW 190
// end else
4992: GO 5136
// begin for i in eng do
4994: LD_ADDR_VAR 0 1
4998: PUSH
4999: LD_VAR 0 3
5003: PUSH
5004: FOR_IN
5005: IFFALSE 5134
// if not HasTask ( i ) then
5007: LD_VAR 0 1
5011: PPUSH
5012: CALL_OW 314
5016: NOT
5017: IFFALSE 5132
// begin if americanBuildList then
5019: LD_EXP 46
5023: IFFALSE 5108
// begin if IsInUnit ( i ) then
5025: LD_VAR 0 1
5029: PPUSH
5030: CALL_OW 310
5034: IFFALSE 5045
// ComExitBuilding ( i ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5045: LD_VAR 0 1
5049: PPUSH
5050: LD_EXP 46
5054: PUSH
5055: LD_INT 1
5057: ARRAY
5058: PUSH
5059: LD_INT 1
5061: ARRAY
5062: PPUSH
5063: LD_EXP 46
5067: PUSH
5068: LD_INT 1
5070: ARRAY
5071: PUSH
5072: LD_INT 2
5074: ARRAY
5075: PPUSH
5076: LD_EXP 46
5080: PUSH
5081: LD_INT 1
5083: ARRAY
5084: PUSH
5085: LD_INT 3
5087: ARRAY
5088: PPUSH
5089: LD_EXP 46
5093: PUSH
5094: LD_INT 1
5096: ARRAY
5097: PUSH
5098: LD_INT 4
5100: ARRAY
5101: PPUSH
5102: CALL_OW 205
// end else
5106: GO 5132
// if not IsInUnit ( i ) then
5108: LD_VAR 0 1
5112: PPUSH
5113: CALL_OW 310
5117: NOT
5118: IFFALSE 5132
// ComEnterUnit ( i , usDepot ) ;
5120: LD_VAR 0 1
5124: PPUSH
5125: LD_INT 11
5127: PPUSH
5128: CALL_OW 120
// end ;
5132: GO 5004
5134: POP
5135: POP
// end ; end ; end ;
5136: PPOPN 5
5138: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5139: LD_INT 0
5141: PPUSH
5142: PPUSH
5143: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5144: LD_ADDR_VAR 0 3
5148: PUSH
5149: LD_INT 35
5151: PUSH
5152: LD_INT 45
5154: PUSH
5155: LD_INT 48
5157: PUSH
5158: LD_EXP 58
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: ST_TO_ADDR
// for i in tech do
5169: LD_ADDR_VAR 0 4
5173: PUSH
5174: LD_VAR 0 3
5178: PUSH
5179: FOR_IN
5180: IFFALSE 5198
// AddComResearch ( lab , i ) ;
5182: LD_VAR 0 1
5186: PPUSH
5187: LD_VAR 0 4
5191: PPUSH
5192: CALL_OW 184
5196: GO 5179
5198: POP
5199: POP
// end ;
5200: LD_VAR 0 2
5204: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5205: LD_EXP 12
5209: PUSH
5210: LD_EXP 23
5214: PUSH
5215: LD_EXP 27
5219: LESSEQUAL
5220: AND
5221: IFFALSE 5246
5223: GO 5225
5225: DISABLE
// begin enable ;
5226: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5227: LD_INT 35
5229: PPUSH
5230: LD_INT 2065
5232: PPUSH
5233: CALL_OW 12
5237: PPUSH
5238: CALL_OW 67
// SendConvoy ;
5242: CALL 5344 0 0
// end ;
5246: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5247: LD_EXP 6
5251: PUSH
5252: LD_EXP 18
5256: AND
5257: IFFALSE 5343
5259: GO 5261
5261: DISABLE
// begin if americanHasEscaped then
5262: LD_EXP 8
5266: IFFALSE 5277
// wait ( 3 3$20 ) else
5268: LD_INT 7000
5270: PPUSH
5271: CALL_OW 67
5275: GO 5284
// wait ( 6 6$40 ) ;
5277: LD_INT 14000
5279: PPUSH
5280: CALL_OW 67
// SendAttack ;
5284: CALL 6087 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5288: LD_INT 14000
5290: PUSH
5291: LD_INT 11900
5293: PUSH
5294: LD_INT 9800
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: LIST
5301: PUSH
5302: LD_OWVAR 67
5306: ARRAY
5307: PPUSH
5308: CALL_OW 67
// SendAttack ;
5312: CALL 6087 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5316: LD_EXP 19
5320: PUSH
5321: LD_INT 6
5323: PUSH
5324: LD_INT 7
5326: PUSH
5327: LD_INT 8
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PUSH
5335: LD_OWVAR 67
5339: ARRAY
5340: LESS
5341: IFFALSE 5288
// end ;
5343: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5344: LD_INT 0
5346: PPUSH
5347: PPUSH
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
5353: PPUSH
// road := rand ( 1 , 2 ) ;
5354: LD_ADDR_VAR 0 4
5358: PUSH
5359: LD_INT 1
5361: PPUSH
5362: LD_INT 2
5364: PPUSH
5365: CALL_OW 12
5369: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5370: LD_ADDR_VAR 0 8
5374: PUSH
5375: LD_INT 3
5377: PUSH
5378: LD_INT 8
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: LD_VAR 0 4
5389: ARRAY
5390: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5391: LD_ADDR_VAR 0 5
5395: PUSH
5396: LD_INT 35
5398: PUSH
5399: LD_INT 66
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: PUSH
5410: LD_INT 101
5412: PUSH
5413: LD_INT 8
5415: PUSH
5416: LD_INT 4
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5428: LD_ADDR_VAR 0 6
5432: PUSH
5433: LD_INT 34
5435: PUSH
5436: LD_INT 67
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 38
5445: PUSH
5446: LD_INT 62
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 43
5455: PUSH
5456: LD_INT 54
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: LD_INT 57
5465: PUSH
5466: LD_INT 57
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: PUSH
5473: LD_INT 77
5475: PUSH
5476: LD_INT 71
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PUSH
5483: LD_INT 86
5485: PUSH
5486: LD_INT 60
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 89
5495: PUSH
5496: LD_INT 35
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PUSH
5503: LD_INT 93
5505: PUSH
5506: LD_INT 17
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 97
5515: PUSH
5516: LD_INT 10
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 103
5525: PUSH
5526: LD_INT 9
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: ST_TO_ADDR
// if road = 2 then
5545: LD_VAR 0 4
5549: PUSH
5550: LD_INT 2
5552: EQUAL
5553: IFFALSE 5570
// points := ReverseArray ( points ) ;
5555: LD_ADDR_VAR 0 6
5559: PUSH
5560: LD_VAR 0 6
5564: PPUSH
5565: CALL 973 0 1
5569: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5570: LD_INT 4
5572: PPUSH
5573: LD_INT 1
5575: PPUSH
5576: LD_INT 2
5578: PPUSH
5579: LD_INT 1
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: LD_INT 12
5587: PPUSH
5588: LD_INT 80
5590: PPUSH
5591: CALL 313 0 7
// veh := CreateVehicle ;
5595: LD_ADDR_VAR 0 3
5599: PUSH
5600: CALL_OW 45
5604: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5605: LD_VAR 0 3
5609: PPUSH
5610: LD_VAR 0 5
5614: PUSH
5615: LD_VAR 0 4
5619: ARRAY
5620: PUSH
5621: LD_INT 3
5623: ARRAY
5624: PPUSH
5625: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5629: LD_VAR 0 3
5633: PPUSH
5634: LD_VAR 0 5
5638: PUSH
5639: LD_VAR 0 4
5643: ARRAY
5644: PUSH
5645: LD_INT 1
5647: ARRAY
5648: PPUSH
5649: LD_VAR 0 5
5653: PUSH
5654: LD_VAR 0 4
5658: ARRAY
5659: PUSH
5660: LD_INT 2
5662: ARRAY
5663: PPUSH
5664: LD_INT 0
5666: PPUSH
5667: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5671: LD_INT 0
5673: PPUSH
5674: LD_INT 1
5676: PPUSH
5677: LD_OWVAR 67
5681: PPUSH
5682: CALL_OW 380
// un := CreateHuman ;
5686: LD_ADDR_VAR 0 2
5690: PUSH
5691: CALL_OW 44
5695: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5710: LD_INT 60
5712: PUSH
5713: LD_INT 56
5715: PUSH
5716: LD_INT 52
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: PUSH
5724: LD_OWVAR 67
5728: ARRAY
5729: PPUSH
5730: CALL_OW 13
5734: PUSH
5735: LD_OWVAR 1
5739: PUSH
5740: LD_INT 30
5742: MOD
5743: PLUS
5744: PUSH
5745: LD_EXP 23
5749: PUSH
5750: LD_INT 4
5752: LESS
5753: OR
5754: IFFALSE 5771
// SetCargo ( veh , mat_cans , 100 ) ;
5756: LD_VAR 0 3
5760: PPUSH
5761: LD_INT 1
5763: PPUSH
5764: LD_INT 100
5766: PPUSH
5767: CALL_OW 290
// for i := 2 to points do
5771: LD_ADDR_VAR 0 7
5775: PUSH
5776: DOUBLE
5777: LD_INT 2
5779: DEC
5780: ST_TO_ADDR
5781: LD_VAR 0 6
5785: PUSH
5786: FOR_TO
5787: IFFALSE 5830
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5789: LD_VAR 0 3
5793: PPUSH
5794: LD_VAR 0 6
5798: PUSH
5799: LD_VAR 0 7
5803: ARRAY
5804: PUSH
5805: LD_INT 1
5807: ARRAY
5808: PPUSH
5809: LD_VAR 0 6
5813: PUSH
5814: LD_VAR 0 7
5818: ARRAY
5819: PUSH
5820: LD_INT 2
5822: ARRAY
5823: PPUSH
5824: CALL_OW 171
5828: GO 5786
5830: POP
5831: POP
// convoyCounter := convoyCounter + 1 ;
5832: LD_ADDR_EXP 23
5836: PUSH
5837: LD_EXP 23
5841: PUSH
5842: LD_INT 1
5844: PLUS
5845: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5846: LD_INT 35
5848: PPUSH
5849: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5853: LD_VAR 0 3
5857: PPUSH
5858: CALL_OW 314
5862: NOT
5863: PUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 302
5873: AND
5874: IFFALSE 5915
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5876: LD_VAR 0 3
5880: PPUSH
5881: LD_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: ARRAY
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: PPUSH
5896: LD_VAR 0 6
5900: PUSH
5901: LD_VAR 0 6
5905: ARRAY
5906: PUSH
5907: LD_INT 2
5909: ARRAY
5910: PPUSH
5911: CALL_OW 111
// if not IsInUnit ( un ) then
5915: LD_VAR 0 2
5919: PPUSH
5920: CALL_OW 310
5924: NOT
5925: IFFALSE 5966
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5927: LD_VAR 0 2
5931: PPUSH
5932: LD_VAR 0 6
5936: PUSH
5937: LD_VAR 0 6
5941: ARRAY
5942: PUSH
5943: LD_INT 1
5945: ARRAY
5946: PPUSH
5947: LD_VAR 0 6
5951: PUSH
5952: LD_VAR 0 6
5956: ARRAY
5957: PUSH
5958: LD_INT 2
5960: ARRAY
5961: PPUSH
5962: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
5966: LD_VAR 0 3
5970: PPUSH
5971: LD_VAR 0 8
5975: PPUSH
5976: CALL_OW 308
5980: PUSH
5981: LD_VAR 0 2
5985: PPUSH
5986: LD_VAR 0 8
5990: PPUSH
5991: CALL_OW 308
5995: OR
5996: IFFALSE 5846
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
5998: LD_VAR 0 2
6002: PPUSH
6003: CALL_OW 302
6007: PUSH
6008: LD_VAR 0 3
6012: PPUSH
6013: CALL_OW 302
6017: NOT
6018: AND
6019: PUSH
6020: LD_VAR 0 2
6024: PPUSH
6025: LD_VAR 0 8
6029: PPUSH
6030: CALL_OW 308
6034: AND
6035: IFFALSE 6046
// RemoveUnit ( un ) ;
6037: LD_VAR 0 2
6041: PPUSH
6042: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6046: LD_VAR 0 3
6050: PPUSH
6051: LD_VAR 0 8
6055: PPUSH
6056: CALL_OW 308
6060: PUSH
6061: LD_VAR 0 3
6065: PPUSH
6066: CALL_OW 302
6070: AND
6071: IFFALSE 6082
// RemoveUnit ( veh ) ;
6073: LD_VAR 0 3
6077: PPUSH
6078: CALL_OW 64
// end ;
6082: LD_VAR 0 1
6086: RET
// export function SendAttack ; var un , veh , i ; begin
6087: LD_INT 0
6089: PPUSH
6090: PPUSH
6091: PPUSH
6092: PPUSH
// IncomingAttack ;
6093: CALL 14923 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6097: LD_INT 2100
6099: PPUSH
6100: LD_INT 3500
6102: PPUSH
6103: CALL_OW 12
6107: PPUSH
6108: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] + attackWave div 3 do
6112: LD_ADDR_VAR 0 4
6116: PUSH
6117: DOUBLE
6118: LD_INT 1
6120: DEC
6121: ST_TO_ADDR
6122: LD_INT 3
6124: PUSH
6125: LD_INT 4
6127: PUSH
6128: LD_INT 4
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: LD_OWVAR 67
6140: ARRAY
6141: PUSH
6142: LD_EXP 19
6146: PUSH
6147: LD_INT 3
6149: DIV
6150: PLUS
6151: PUSH
6152: FOR_TO
6153: IFFALSE 6265
// begin uc_side := 1 ;
6155: LD_ADDR_OWVAR 20
6159: PUSH
6160: LD_INT 1
6162: ST_TO_ADDR
// uc_nation := 1 ;
6163: LD_ADDR_OWVAR 21
6167: PUSH
6168: LD_INT 1
6170: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6171: LD_INT 0
6173: PPUSH
6174: LD_INT 1
6176: PPUSH
6177: LD_INT 2
6179: PUSH
6180: LD_INT 3
6182: PUSH
6183: LD_INT 4
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PUSH
6191: LD_OWVAR 67
6195: ARRAY
6196: PPUSH
6197: CALL_OW 380
// un := CreateHuman ;
6201: LD_ADDR_VAR 0 2
6205: PUSH
6206: CALL_OW 44
6210: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6211: LD_VAR 0 2
6215: PPUSH
6216: LD_INT 37
6218: PPUSH
6219: LD_INT 70
6221: PPUSH
6222: LD_INT 3
6224: PPUSH
6225: LD_INT 0
6227: PPUSH
6228: CALL_OW 50
// usAttackers := usAttackers union un ;
6232: LD_ADDR_EXP 47
6236: PUSH
6237: LD_EXP 47
6241: PUSH
6242: LD_VAR 0 2
6246: UNION
6247: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6248: LD_VAR 0 2
6252: PPUSH
6253: LD_INT 40
6255: PPUSH
6256: LD_INT 65
6258: PPUSH
6259: CALL_OW 111
// end ;
6263: GO 6152
6265: POP
6266: POP
// uc_side := 1 ;
6267: LD_ADDR_OWVAR 20
6271: PUSH
6272: LD_INT 1
6274: ST_TO_ADDR
// uc_nation := 1 ;
6275: LD_ADDR_OWVAR 21
6279: PUSH
6280: LD_INT 1
6282: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6283: LD_INT 0
6285: PPUSH
6286: LD_INT 4
6288: PPUSH
6289: LD_INT 2
6291: PPUSH
6292: CALL_OW 380
// un := CreateHuman ;
6296: LD_ADDR_VAR 0 2
6300: PUSH
6301: CALL_OW 44
6305: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6306: LD_VAR 0 2
6310: PPUSH
6311: LD_INT 37
6313: PPUSH
6314: LD_INT 70
6316: PPUSH
6317: LD_INT 3
6319: PPUSH
6320: LD_INT 0
6322: PPUSH
6323: CALL_OW 50
// usAttackers := usAttackers union un ;
6327: LD_ADDR_EXP 47
6331: PUSH
6332: LD_EXP 47
6336: PUSH
6337: LD_VAR 0 2
6341: UNION
6342: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6343: LD_VAR 0 2
6347: PPUSH
6348: LD_INT 40
6350: PPUSH
6351: LD_INT 65
6353: PPUSH
6354: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6358: LD_ADDR_VAR 0 4
6362: PUSH
6363: DOUBLE
6364: LD_INT 1
6366: DEC
6367: ST_TO_ADDR
6368: LD_OWVAR 67
6372: PUSH
6373: LD_EXP 19
6377: PUSH
6378: LD_INT 4
6380: DIV
6381: PLUS
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6557
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6386: LD_ADDR_VAR 0 3
6390: PUSH
6391: LD_INT 1
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: LD_INT 2
6399: PPUSH
6400: LD_INT 1
6402: PPUSH
6403: LD_INT 1
6405: PPUSH
6406: LD_INT 4
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: LD_INT 2
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 1
6422: PPUSH
6423: LD_INT 3
6425: PPUSH
6426: CALL_OW 12
6430: ARRAY
6431: PPUSH
6432: LD_INT 90
6434: PPUSH
6435: CALL 313 0 7
6439: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6440: LD_VAR 0 3
6444: PPUSH
6445: LD_INT 35
6447: PPUSH
6448: LD_INT 65
6450: PPUSH
6451: LD_INT 0
6453: PPUSH
6454: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6458: LD_INT 0
6460: PPUSH
6461: LD_INT 3
6463: PPUSH
6464: LD_OWVAR 67
6468: PUSH
6469: LD_INT 1
6471: PLUS
6472: PPUSH
6473: CALL_OW 380
// un := CreateHuman ;
6477: LD_ADDR_VAR 0 2
6481: PUSH
6482: CALL_OW 44
6486: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6487: LD_VAR 0 2
6491: PPUSH
6492: LD_VAR 0 3
6496: PPUSH
6497: CALL_OW 52
// usAttackers := usAttackers union un ;
6501: LD_ADDR_EXP 47
6505: PUSH
6506: LD_EXP 47
6510: PUSH
6511: LD_VAR 0 2
6515: UNION
6516: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6517: LD_VAR 0 3
6521: PPUSH
6522: LD_INT 39
6524: PPUSH
6525: LD_INT 60
6527: PPUSH
6528: CALL_OW 111
// wait ( 0 0$3 ) ;
6532: LD_INT 105
6534: PPUSH
6535: CALL_OW 67
// usAttackers := usAttackers union veh ;
6539: LD_ADDR_EXP 47
6543: PUSH
6544: LD_EXP 47
6548: PUSH
6549: LD_VAR 0 3
6553: UNION
6554: ST_TO_ADDR
// end ;
6555: GO 6383
6557: POP
6558: POP
// attackWave := attackWave + 1 ;
6559: LD_ADDR_EXP 19
6563: PUSH
6564: LD_EXP 19
6568: PUSH
6569: LD_INT 1
6571: PLUS
6572: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6573: LD_EXP 24
6577: PPUSH
6578: CALL_OW 427
// end ;
6582: LD_VAR 0 1
6586: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6587: LD_INT 0
6589: PPUSH
6590: PPUSH
6591: PPUSH
6592: PPUSH
6593: PPUSH
6594: PPUSH
6595: PPUSH
6596: PPUSH
6597: PPUSH
6598: PPUSH
6599: PPUSH
// if retreatAllowed then
6600: LD_EXP 11
6604: IFFALSE 6616
// strategy := 2 else
6606: LD_ADDR_VAR 0 5
6610: PUSH
6611: LD_INT 2
6613: ST_TO_ADDR
6614: GO 6632
// strategy := rand ( 0 , 2 ) ;
6616: LD_ADDR_VAR 0 5
6620: PUSH
6621: LD_INT 0
6623: PPUSH
6624: LD_INT 2
6626: PPUSH
6627: CALL_OW 12
6631: ST_TO_ADDR
// attackFormula := [ ] ;
6632: LD_ADDR_VAR 0 6
6636: PUSH
6637: EMPTY
6638: ST_TO_ADDR
// case strategy of 0 :
6639: LD_VAR 0 5
6643: PUSH
6644: LD_INT 0
6646: DOUBLE
6647: EQUAL
6648: IFTRUE 6652
6650: GO 6982
6652: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6653: LD_INT 11
6655: PPUSH
6656: LD_INT 22
6658: PUSH
6659: LD_INT 2
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 30
6668: PUSH
6669: LD_INT 4
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PPUSH
6680: CALL_OW 70
6684: NOT
6685: IFFALSE 6757
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6687: LD_ADDR_VAR 0 6
6691: PUSH
6692: LD_INT 41
6694: PUSH
6695: LD_INT 34
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: PUSH
6705: LD_INT 53
6707: PUSH
6708: LD_INT 62
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PUSH
6715: LD_INT 37
6717: PUSH
6718: LD_INT 63
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 44
6727: PUSH
6728: LD_INT 45
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 37
6737: PUSH
6738: LD_INT 28
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: ST_TO_ADDR
6755: GO 6980
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6757: LD_INT 12
6759: PPUSH
6760: LD_INT 22
6762: PUSH
6763: LD_INT 2
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: LD_INT 2
6772: PUSH
6773: LD_INT 30
6775: PUSH
6776: LD_INT 4
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: LD_INT 30
6785: PUSH
6786: LD_INT 31
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 30
6795: PUSH
6796: LD_INT 32
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PPUSH
6813: CALL_OW 70
6817: NOT
6818: IFFALSE 6901
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6820: LD_ADDR_VAR 0 6
6824: PUSH
6825: LD_INT 27
6827: PUSH
6828: LD_INT 42
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 27
6837: PUSH
6838: LD_INT 32
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 53
6851: PUSH
6852: LD_INT 62
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 37
6861: PUSH
6862: LD_INT 63
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: LD_INT 44
6871: PUSH
6872: LD_INT 45
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 37
6881: PUSH
6882: LD_INT 28
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: ST_TO_ADDR
6899: GO 6980
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
6901: LD_ADDR_VAR 0 6
6905: PUSH
6906: LD_INT 71
6908: PUSH
6909: LD_INT 67
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 54
6918: PUSH
6919: LD_INT 35
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 63
6932: PUSH
6933: LD_INT 40
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 37
6942: PUSH
6943: LD_INT 63
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 44
6952: PUSH
6953: LD_INT 45
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 37
6962: PUSH
6963: LD_INT 28
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: ST_TO_ADDR
// end ; 1 :
6980: GO 7185
6982: LD_INT 1
6984: DOUBLE
6985: EQUAL
6986: IFTRUE 6990
6988: GO 7094
6990: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
6991: LD_ADDR_VAR 0 6
6995: PUSH
6996: LD_INT 71
6998: PUSH
6999: LD_INT 67
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 82
7008: PUSH
7009: LD_INT 23
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 53
7018: PUSH
7019: LD_INT 7
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 43
7028: PUSH
7029: LD_INT 10
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 53
7044: PUSH
7045: LD_INT 62
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 37
7054: PUSH
7055: LD_INT 63
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 44
7064: PUSH
7065: LD_INT 45
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 37
7074: PUSH
7075: LD_INT 28
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: ST_TO_ADDR
7092: GO 7185
7094: LD_INT 2
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7184
7102: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7103: LD_ADDR_VAR 0 6
7107: PUSH
7108: LD_INT 90
7110: PUSH
7111: LD_INT 59
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 108
7120: PUSH
7121: LD_INT 64
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 82
7134: PUSH
7135: LD_INT 75
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 73
7144: PUSH
7145: LD_INT 67
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 101
7154: PUSH
7155: LD_INT 65
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 108
7164: PUSH
7165: LD_INT 62
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: ST_TO_ADDR
7182: GO 7185
7184: POP
// if not attackFormula then
7185: LD_VAR 0 6
7189: NOT
7190: IFFALSE 7194
// exit ;
7192: GO 8872
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7194: LD_ADDR_VAR 0 7
7198: PUSH
7199: LD_EXP 47
7203: PPUSH
7204: LD_INT 25
7206: PUSH
7207: LD_INT 1
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 72
7218: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7219: LD_ADDR_VAR 0 8
7223: PUSH
7224: LD_EXP 47
7228: PPUSH
7229: LD_INT 25
7231: PUSH
7232: LD_INT 4
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PPUSH
7239: CALL_OW 72
7243: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7244: LD_ADDR_VAR 0 9
7248: PUSH
7249: LD_EXP 47
7253: PPUSH
7254: LD_INT 25
7256: PUSH
7257: LD_INT 3
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 72
7268: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7269: LD_ADDR_VAR 0 10
7273: PUSH
7274: LD_EXP 47
7278: PPUSH
7279: LD_INT 21
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PPUSH
7289: CALL_OW 72
7293: ST_TO_ADDR
// if sci then
7294: LD_VAR 0 8
7298: IFFALSE 7335
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7300: LD_VAR 0 8
7304: PPUSH
7305: LD_VAR 0 6
7309: PUSH
7310: LD_INT 2
7312: ARRAY
7313: PUSH
7314: LD_INT 1
7316: ARRAY
7317: PPUSH
7318: LD_VAR 0 6
7322: PUSH
7323: LD_INT 2
7325: ARRAY
7326: PUSH
7327: LD_INT 2
7329: ARRAY
7330: PPUSH
7331: CALL_OW 111
// repeat wait ( 10 ) ;
7335: LD_INT 10
7337: PPUSH
7338: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7342: LD_ADDR_VAR 0 7
7346: PUSH
7347: LD_EXP 47
7351: PPUSH
7352: LD_INT 25
7354: PUSH
7355: LD_INT 1
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 72
7366: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7367: LD_ADDR_VAR 0 8
7371: PUSH
7372: LD_EXP 47
7376: PPUSH
7377: LD_INT 25
7379: PUSH
7380: LD_INT 4
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PPUSH
7387: CALL_OW 72
7391: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7392: LD_ADDR_VAR 0 9
7396: PUSH
7397: LD_EXP 47
7401: PPUSH
7402: LD_INT 25
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PPUSH
7412: CALL_OW 72
7416: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7417: LD_ADDR_VAR 0 10
7421: PUSH
7422: LD_EXP 47
7426: PPUSH
7427: LD_INT 21
7429: PUSH
7430: LD_INT 2
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PPUSH
7437: CALL_OW 72
7441: ST_TO_ADDR
// if sol then
7442: LD_VAR 0 7
7446: IFFALSE 7867
// begin for i in sol do
7448: LD_ADDR_VAR 0 2
7452: PUSH
7453: LD_VAR 0 7
7457: PUSH
7458: FOR_IN
7459: IFFALSE 7865
// begin tag := GetTag ( i ) ;
7461: LD_ADDR_VAR 0 4
7465: PUSH
7466: LD_VAR 0 2
7470: PPUSH
7471: CALL_OW 110
7475: ST_TO_ADDR
// if not tag then
7476: LD_VAR 0 4
7480: NOT
7481: IFFALSE 7590
// begin if GetLives ( i ) = 1000 then
7483: LD_VAR 0 2
7487: PPUSH
7488: CALL_OW 256
7492: PUSH
7493: LD_INT 1000
7495: EQUAL
7496: IFFALSE 7512
// SetTag ( i , 1 ) else
7498: LD_VAR 0 2
7502: PPUSH
7503: LD_INT 1
7505: PPUSH
7506: CALL_OW 109
7510: GO 7588
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7512: LD_VAR 0 2
7516: PPUSH
7517: LD_VAR 0 6
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PUSH
7526: LD_INT 1
7528: ARRAY
7529: PPUSH
7530: LD_VAR 0 6
7534: PUSH
7535: LD_INT 2
7537: ARRAY
7538: PUSH
7539: LD_INT 2
7541: ARRAY
7542: PPUSH
7543: CALL_OW 297
7547: PUSH
7548: LD_INT 10
7550: GREATER
7551: IFFALSE 7588
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7553: LD_VAR 0 2
7557: PPUSH
7558: LD_VAR 0 6
7562: PUSH
7563: LD_INT 2
7565: ARRAY
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: LD_VAR 0 6
7575: PUSH
7576: LD_INT 2
7578: ARRAY
7579: PUSH
7580: LD_INT 2
7582: ARRAY
7583: PPUSH
7584: CALL_OW 111
// end else
7588: GO 7863
// begin if GetLives ( i ) < 760 then
7590: LD_VAR 0 2
7594: PPUSH
7595: CALL_OW 256
7599: PUSH
7600: LD_INT 760
7602: LESS
7603: IFFALSE 7654
// begin SetTag ( i , 0 ) ;
7605: LD_VAR 0 2
7609: PPUSH
7610: LD_INT 0
7612: PPUSH
7613: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7617: LD_VAR 0 2
7621: PPUSH
7622: LD_VAR 0 6
7626: PUSH
7627: LD_INT 2
7629: ARRAY
7630: PUSH
7631: LD_INT 1
7633: ARRAY
7634: PPUSH
7635: LD_VAR 0 6
7639: PUSH
7640: LD_INT 2
7642: ARRAY
7643: PUSH
7644: LD_INT 2
7646: ARRAY
7647: PPUSH
7648: CALL_OW 111
// end else
7652: GO 7863
// if tag <= attackFormula [ 1 ] then
7654: LD_VAR 0 4
7658: PUSH
7659: LD_VAR 0 6
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: LESSEQUAL
7668: IFFALSE 7829
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7670: LD_VAR 0 2
7674: PPUSH
7675: LD_VAR 0 6
7679: PUSH
7680: LD_INT 1
7682: ARRAY
7683: PUSH
7684: LD_VAR 0 4
7688: ARRAY
7689: PUSH
7690: LD_INT 1
7692: ARRAY
7693: PPUSH
7694: LD_VAR 0 6
7698: PUSH
7699: LD_INT 1
7701: ARRAY
7702: PUSH
7703: LD_VAR 0 4
7707: ARRAY
7708: PUSH
7709: LD_INT 2
7711: ARRAY
7712: PPUSH
7713: CALL_OW 297
7717: PUSH
7718: LD_INT 6
7720: GREATER
7721: IFFALSE 7772
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7723: LD_VAR 0 2
7727: PPUSH
7728: LD_VAR 0 6
7732: PUSH
7733: LD_INT 1
7735: ARRAY
7736: PUSH
7737: LD_VAR 0 4
7741: ARRAY
7742: PUSH
7743: LD_INT 1
7745: ARRAY
7746: PPUSH
7747: LD_VAR 0 6
7751: PUSH
7752: LD_INT 1
7754: ARRAY
7755: PUSH
7756: LD_VAR 0 4
7760: ARRAY
7761: PUSH
7762: LD_INT 2
7764: ARRAY
7765: PPUSH
7766: CALL_OW 114
7770: GO 7827
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7772: LD_INT 81
7774: PUSH
7775: LD_INT 1
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: LD_INT 91
7784: PUSH
7785: LD_VAR 0 2
7789: PUSH
7790: LD_INT 10
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 69
7806: NOT
7807: IFFALSE 7827
// SetTag ( i , tag + 1 ) ;
7809: LD_VAR 0 2
7813: PPUSH
7814: LD_VAR 0 4
7818: PUSH
7819: LD_INT 1
7821: PLUS
7822: PPUSH
7823: CALL_OW 109
// end else
7827: GO 7863
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7829: LD_VAR 0 2
7833: PPUSH
7834: LD_INT 81
7836: PUSH
7837: LD_INT 1
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PPUSH
7844: CALL_OW 69
7848: PPUSH
7849: LD_VAR 0 2
7853: PPUSH
7854: CALL_OW 74
7858: PPUSH
7859: CALL_OW 115
// end ; end ;
7863: GO 7458
7865: POP
7866: POP
// end ; if sci then
7867: LD_VAR 0 8
7871: IFFALSE 8140
// begin if not sol and not mech then
7873: LD_VAR 0 7
7877: NOT
7878: PUSH
7879: LD_VAR 0 9
7883: NOT
7884: AND
7885: IFFALSE 7937
// begin for i in sci do
7887: LD_ADDR_VAR 0 2
7891: PUSH
7892: LD_VAR 0 8
7896: PUSH
7897: FOR_IN
7898: IFFALSE 7933
// begin usForces := usForces union i ;
7900: LD_ADDR_EXP 44
7904: PUSH
7905: LD_EXP 44
7909: PUSH
7910: LD_VAR 0 2
7914: UNION
7915: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
7916: LD_VAR 0 2
7920: PPUSH
7921: LD_INT 34
7923: PPUSH
7924: LD_INT 68
7926: PPUSH
7927: CALL_OW 111
// end ;
7931: GO 7897
7933: POP
7934: POP
// end else
7935: GO 8140
// for i in sci do
7937: LD_ADDR_VAR 0 2
7941: PUSH
7942: LD_VAR 0 8
7946: PUSH
7947: FOR_IN
7948: IFFALSE 8138
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7950: LD_VAR 0 2
7954: PPUSH
7955: LD_VAR 0 6
7959: PUSH
7960: LD_INT 2
7962: ARRAY
7963: PUSH
7964: LD_INT 1
7966: ARRAY
7967: PPUSH
7968: LD_VAR 0 6
7972: PUSH
7973: LD_INT 2
7975: ARRAY
7976: PUSH
7977: LD_INT 2
7979: ARRAY
7980: PPUSH
7981: CALL_OW 297
7985: PUSH
7986: LD_INT 10
7988: GREATER
7989: IFFALSE 8028
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
7991: LD_VAR 0 2
7995: PPUSH
7996: LD_VAR 0 6
8000: PUSH
8001: LD_INT 2
8003: ARRAY
8004: PUSH
8005: LD_INT 1
8007: ARRAY
8008: PPUSH
8009: LD_VAR 0 6
8013: PUSH
8014: LD_INT 2
8016: ARRAY
8017: PUSH
8018: LD_INT 2
8020: ARRAY
8021: PPUSH
8022: CALL_OW 111
8026: GO 8136
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8028: LD_VAR 0 7
8032: PPUSH
8033: LD_INT 3
8035: PUSH
8036: LD_INT 24
8038: PUSH
8039: LD_INT 1000
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 91
8052: PUSH
8053: LD_VAR 0 2
8057: PUSH
8058: LD_INT 10
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 72
8074: IFFALSE 8136
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8076: LD_VAR 0 2
8080: PPUSH
8081: LD_VAR 0 7
8085: PPUSH
8086: LD_INT 3
8088: PUSH
8089: LD_INT 24
8091: PUSH
8092: LD_INT 1000
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 91
8105: PUSH
8106: LD_VAR 0 2
8110: PUSH
8111: LD_INT 10
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PPUSH
8123: CALL_OW 72
8127: PUSH
8128: LD_INT 1
8130: ARRAY
8131: PPUSH
8132: CALL_OW 128
8136: GO 7947
8138: POP
8139: POP
// end ; if mech then
8140: LD_VAR 0 9
8144: IFFALSE 8854
// begin for i in mech do
8146: LD_ADDR_VAR 0 2
8150: PUSH
8151: LD_VAR 0 9
8155: PUSH
8156: FOR_IN
8157: IFFALSE 8852
// begin tag := GetTag ( i ) ;
8159: LD_ADDR_VAR 0 4
8163: PUSH
8164: LD_VAR 0 2
8168: PPUSH
8169: CALL_OW 110
8173: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8174: LD_ADDR_VAR 0 11
8178: PUSH
8179: LD_VAR 0 2
8183: PPUSH
8184: CALL_OW 310
8188: ST_TO_ADDR
// if not tag then
8189: LD_VAR 0 4
8193: NOT
8194: IFFALSE 8565
// begin if veh then
8196: LD_VAR 0 11
8200: IFFALSE 8371
// begin if GetLives ( veh ) = 1000 then
8202: LD_VAR 0 11
8206: PPUSH
8207: CALL_OW 256
8211: PUSH
8212: LD_INT 1000
8214: EQUAL
8215: IFFALSE 8231
// SetTag ( i , 1 ) else
8217: LD_VAR 0 2
8221: PPUSH
8222: LD_INT 1
8224: PPUSH
8225: CALL_OW 109
8229: GO 8369
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8231: LD_VAR 0 11
8235: PPUSH
8236: LD_VAR 0 6
8240: PUSH
8241: LD_INT 3
8243: ARRAY
8244: PUSH
8245: LD_INT 1
8247: ARRAY
8248: PPUSH
8249: LD_VAR 0 6
8253: PUSH
8254: LD_INT 3
8256: ARRAY
8257: PUSH
8258: LD_INT 2
8260: ARRAY
8261: PPUSH
8262: CALL_OW 297
8266: PUSH
8267: LD_INT 7
8269: GREATER
8270: IFFALSE 8309
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8272: LD_VAR 0 11
8276: PPUSH
8277: LD_VAR 0 6
8281: PUSH
8282: LD_INT 3
8284: ARRAY
8285: PUSH
8286: LD_INT 1
8288: ARRAY
8289: PPUSH
8290: LD_VAR 0 6
8294: PUSH
8295: LD_INT 3
8297: ARRAY
8298: PUSH
8299: LD_INT 2
8301: ARRAY
8302: PPUSH
8303: CALL_OW 111
8307: GO 8369
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8309: LD_INT 81
8311: PUSH
8312: LD_INT 1
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: PUSH
8319: LD_INT 91
8321: PUSH
8322: LD_VAR 0 2
8326: PUSH
8327: LD_INT 10
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: NOT
8344: IFFALSE 8369
// begin ComExitVehicle ( i ) ;
8346: LD_VAR 0 2
8350: PPUSH
8351: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8355: LD_VAR 0 2
8359: PPUSH
8360: LD_VAR 0 11
8364: PPUSH
8365: CALL_OW 189
// end ; end else
8369: GO 8563
// if GetLives ( i ) < 400 then
8371: LD_VAR 0 2
8375: PPUSH
8376: CALL_OW 256
8380: PUSH
8381: LD_INT 400
8383: LESS
8384: IFFALSE 8435
// begin usAttackers := usAttackers diff i ;
8386: LD_ADDR_EXP 47
8390: PUSH
8391: LD_EXP 47
8395: PUSH
8396: LD_VAR 0 2
8400: DIFF
8401: ST_TO_ADDR
// usForces := usForces union i ;
8402: LD_ADDR_EXP 44
8406: PUSH
8407: LD_EXP 44
8411: PUSH
8412: LD_VAR 0 2
8416: UNION
8417: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_INT 34
8425: PPUSH
8426: LD_INT 68
8428: PPUSH
8429: CALL_OW 111
// end else
8433: GO 8563
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8435: LD_VAR 0 10
8439: PPUSH
8440: LD_INT 58
8442: PUSH
8443: EMPTY
8444: LIST
8445: PUSH
8446: LD_INT 24
8448: PUSH
8449: LD_INT 1000
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PPUSH
8460: CALL_OW 72
8464: PUSH
8465: LD_VAR 0 2
8469: PPUSH
8470: CALL_OW 314
8474: NOT
8475: AND
8476: PUSH
8477: LD_INT 81
8479: PUSH
8480: LD_INT 1
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PUSH
8487: LD_INT 91
8489: PUSH
8490: LD_VAR 0 2
8494: PUSH
8495: LD_INT 9
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL_OW 69
8511: OR
8512: IFFALSE 8563
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8514: LD_VAR 0 2
8518: PPUSH
8519: LD_VAR 0 10
8523: PPUSH
8524: LD_INT 58
8526: PUSH
8527: EMPTY
8528: LIST
8529: PUSH
8530: LD_INT 24
8532: PUSH
8533: LD_INT 250
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 72
8548: PPUSH
8549: LD_VAR 0 2
8553: PPUSH
8554: CALL_OW 74
8558: PPUSH
8559: CALL_OW 120
// end else
8563: GO 8850
// begin if veh and GetLives ( veh ) < 760 then
8565: LD_VAR 0 11
8569: PUSH
8570: LD_VAR 0 11
8574: PPUSH
8575: CALL_OW 256
8579: PUSH
8580: LD_INT 760
8582: LESS
8583: AND
8584: IFFALSE 8635
// begin SetTag ( i , 0 ) ;
8586: LD_VAR 0 2
8590: PPUSH
8591: LD_INT 0
8593: PPUSH
8594: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8598: LD_VAR 0 11
8602: PPUSH
8603: LD_VAR 0 6
8607: PUSH
8608: LD_INT 3
8610: ARRAY
8611: PUSH
8612: LD_INT 1
8614: ARRAY
8615: PPUSH
8616: LD_VAR 0 6
8620: PUSH
8621: LD_INT 3
8623: ARRAY
8624: PUSH
8625: LD_INT 2
8627: ARRAY
8628: PPUSH
8629: CALL_OW 111
// end else
8633: GO 8850
// if veh then
8635: LD_VAR 0 11
8639: IFFALSE 8850
// if tag <= attackFormula [ 4 ] then
8641: LD_VAR 0 4
8645: PUSH
8646: LD_VAR 0 6
8650: PUSH
8651: LD_INT 4
8653: ARRAY
8654: LESSEQUAL
8655: IFFALSE 8816
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8657: LD_VAR 0 11
8661: PPUSH
8662: LD_VAR 0 6
8666: PUSH
8667: LD_INT 4
8669: ARRAY
8670: PUSH
8671: LD_VAR 0 4
8675: ARRAY
8676: PUSH
8677: LD_INT 1
8679: ARRAY
8680: PPUSH
8681: LD_VAR 0 6
8685: PUSH
8686: LD_INT 4
8688: ARRAY
8689: PUSH
8690: LD_VAR 0 4
8694: ARRAY
8695: PUSH
8696: LD_INT 2
8698: ARRAY
8699: PPUSH
8700: CALL_OW 297
8704: PUSH
8705: LD_INT 6
8707: GREATER
8708: IFFALSE 8759
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8710: LD_VAR 0 11
8714: PPUSH
8715: LD_VAR 0 6
8719: PUSH
8720: LD_INT 4
8722: ARRAY
8723: PUSH
8724: LD_VAR 0 4
8728: ARRAY
8729: PUSH
8730: LD_INT 1
8732: ARRAY
8733: PPUSH
8734: LD_VAR 0 6
8738: PUSH
8739: LD_INT 4
8741: ARRAY
8742: PUSH
8743: LD_VAR 0 4
8747: ARRAY
8748: PUSH
8749: LD_INT 2
8751: ARRAY
8752: PPUSH
8753: CALL_OW 114
8757: GO 8814
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8759: LD_INT 81
8761: PUSH
8762: LD_INT 1
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PUSH
8769: LD_INT 91
8771: PUSH
8772: LD_VAR 0 11
8776: PUSH
8777: LD_INT 10
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: LIST
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PPUSH
8789: CALL_OW 69
8793: NOT
8794: IFFALSE 8814
// SetTag ( i , tag + 1 ) ;
8796: LD_VAR 0 2
8800: PPUSH
8801: LD_VAR 0 4
8805: PUSH
8806: LD_INT 1
8808: PLUS
8809: PPUSH
8810: CALL_OW 109
// end else
8814: GO 8850
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8816: LD_VAR 0 11
8820: PPUSH
8821: LD_INT 81
8823: PUSH
8824: LD_INT 1
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 69
8835: PPUSH
8836: LD_VAR 0 2
8840: PPUSH
8841: CALL_OW 74
8845: PPUSH
8846: CALL_OW 115
// end ; end ;
8850: GO 8156
8852: POP
8853: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8854: LD_EXP 47
8858: PPUSH
8859: LD_INT 52
8861: PUSH
8862: EMPTY
8863: LIST
8864: PPUSH
8865: CALL_OW 72
8869: NOT
8870: IFFALSE 7335
// end ;
8872: LD_VAR 0 1
8876: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8877: LD_INT 22
8879: PUSH
8880: LD_INT 1
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 32
8889: PUSH
8890: LD_INT 1
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PPUSH
8901: CALL_OW 69
8905: IFFALSE 8982
8907: GO 8909
8909: DISABLE
8910: LD_INT 0
8912: PPUSH
// begin enable ;
8913: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
8914: LD_ADDR_VAR 0 1
8918: PUSH
8919: LD_INT 22
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 32
8931: PUSH
8932: LD_INT 1
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: FOR_IN
8949: IFFALSE 8980
// if GetFuel ( i ) < 10 then
8951: LD_VAR 0 1
8955: PPUSH
8956: CALL_OW 261
8960: PUSH
8961: LD_INT 10
8963: LESS
8964: IFFALSE 8978
// SetFuel ( i , 10 ) ;
8966: LD_VAR 0 1
8970: PPUSH
8971: LD_INT 10
8973: PPUSH
8974: CALL_OW 240
8978: GO 8948
8980: POP
8981: POP
// end ; end_of_file
8982: PPOPN 1
8984: END
// export function Action ; var hasAll , i , tmp ; begin
8985: LD_INT 0
8987: PPUSH
8988: PPUSH
8989: PPUSH
8990: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
8991: LD_ADDR_VAR 0 2
8995: PUSH
8996: LD_INT 22
8998: PUSH
8999: LD_INT 2
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: LD_INT 21
9008: PUSH
9009: LD_INT 1
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: LD_INT 23
9018: PUSH
9019: LD_INT 2
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: LIST
9030: PPUSH
9031: CALL_OW 69
9035: PUSH
9036: LD_INT 7
9038: GREATEREQUAL
9039: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9040: LD_VAR 0 2
9044: PPUSH
9045: LD_STRING 03_HasAll
9047: PPUSH
9048: CALL_OW 39
// Video ( true ) ;
9052: LD_INT 1
9054: PPUSH
9055: CALL 72288 0 1
// CenterNowOnUnits ( Heike ) ;
9059: LD_EXP 28
9063: PPUSH
9064: CALL_OW 87
// wait ( 0 0$2 ) ;
9068: LD_INT 70
9070: PPUSH
9071: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9075: LD_EXP 36
9079: PPUSH
9080: LD_STRING DF-1-start
9082: PPUSH
9083: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9087: LD_EXP 28
9091: PPUSH
9092: LD_EXP 36
9096: PPUSH
9097: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9101: LD_EXP 28
9105: PPUSH
9106: LD_STRING DH-1-start
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9113: LD_EXP 37
9117: PPUSH
9118: LD_INT 92
9120: PPUSH
9121: LD_INT 21
9123: PPUSH
9124: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9128: LD_EXP 32
9132: PPUSH
9133: LD_INT 94
9135: PPUSH
9136: LD_INT 23
9138: PPUSH
9139: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9143: LD_EXP 40
9147: PUSH
9148: LD_INT 1
9150: ARRAY
9151: PPUSH
9152: LD_INT 90
9154: PPUSH
9155: LD_INT 23
9157: PPUSH
9158: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9162: LD_EXP 40
9166: PUSH
9167: LD_INT 2
9169: ARRAY
9170: PPUSH
9171: LD_INT 93
9173: PPUSH
9174: LD_INT 25
9176: PPUSH
9177: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9181: LD_EXP 40
9185: PPUSH
9186: LD_EXP 37
9190: PPUSH
9191: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9195: LD_EXP 37
9199: PUSH
9200: LD_EXP 32
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PPUSH
9209: LD_EXP 28
9213: PPUSH
9214: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9218: LD_EXP 28
9222: PPUSH
9223: LD_EXP 37
9227: PPUSH
9228: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9232: LD_INT 35
9234: PPUSH
9235: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9239: LD_EXP 37
9243: PPUSH
9244: LD_INT 92
9246: PPUSH
9247: LD_INT 21
9249: PPUSH
9250: CALL_OW 307
9254: IFFALSE 9232
// Say ( Omar , DO-1-start ) ;
9256: LD_EXP 37
9260: PPUSH
9261: LD_STRING DO-1-start
9263: PPUSH
9264: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9268: LD_EXP 28
9272: PPUSH
9273: LD_STRING DH-2-start
9275: PPUSH
9276: CALL_OW 88
// if hasAll then
9280: LD_VAR 0 2
9284: IFFALSE 9412
// begin Say ( Omar , DO-2-start ) ;
9286: LD_EXP 37
9290: PPUSH
9291: LD_STRING DO-2-start
9293: PPUSH
9294: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9298: LD_EXP 37
9302: PPUSH
9303: LD_STRING DO-3-start
9305: PPUSH
9306: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9310: LD_EXP 28
9314: PPUSH
9315: LD_STRING DH-3-start
9317: PPUSH
9318: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9322: LD_EXP 36
9326: PPUSH
9327: LD_STRING DF-2-start
9329: PPUSH
9330: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9334: LD_EXP 37
9338: PPUSH
9339: LD_EXP 36
9343: PPUSH
9344: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9348: LD_EXP 37
9352: PPUSH
9353: LD_STRING DO-4-start
9355: PPUSH
9356: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9360: LD_EXP 36
9364: PPUSH
9365: LD_STRING DF-3-start
9367: PPUSH
9368: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9372: LD_EXP 37
9376: PPUSH
9377: LD_STRING DO-5-start
9379: PPUSH
9380: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9384: LD_EXP 36
9388: PPUSH
9389: LD_STRING DF-4-start
9391: PPUSH
9392: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9396: LD_EXP 37
9400: PPUSH
9401: LD_EXP 28
9405: PPUSH
9406: CALL_OW 119
// end else
9410: GO 9512
// begin Say ( Omar , DO-2-start-a ) ;
9412: LD_EXP 37
9416: PPUSH
9417: LD_STRING DO-2-start-a
9419: PPUSH
9420: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9424: LD_EXP 37
9428: PPUSH
9429: LD_STRING DO-3-start-a
9431: PPUSH
9432: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9436: LD_EXP 28
9440: PPUSH
9441: LD_STRING DH-3-start-a
9443: PPUSH
9444: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9448: LD_EXP 36
9452: PPUSH
9453: LD_STRING DF-2-start-a
9455: PPUSH
9456: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9460: LD_EXP 37
9464: PPUSH
9465: LD_EXP 36
9469: PPUSH
9470: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9474: LD_EXP 37
9478: PPUSH
9479: LD_STRING DO-4-start-a
9481: PPUSH
9482: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9486: LD_EXP 36
9490: PPUSH
9491: LD_STRING DF-3-start-a
9493: PPUSH
9494: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9498: LD_EXP 37
9502: PPUSH
9503: LD_EXP 28
9507: PPUSH
9508: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9512: LD_INT 10
9514: PPUSH
9515: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9519: LD_EXP 37
9523: PPUSH
9524: LD_STRING DO-1-mission
9526: PPUSH
9527: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9531: LD_EXP 37
9535: PPUSH
9536: LD_STRING DO-2-mission
9538: PPUSH
9539: CALL_OW 88
// if not hasAll then
9543: LD_VAR 0 2
9547: NOT
9548: IFFALSE 9562
// Say ( Omar , DO-3-mission ) ;
9550: LD_EXP 37
9554: PPUSH
9555: LD_STRING DO-3-mission
9557: PPUSH
9558: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9562: LD_EXP 37
9566: PPUSH
9567: LD_STRING DO-4-mission
9569: PPUSH
9570: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9574: LD_EXP 28
9578: PPUSH
9579: LD_STRING DH-1-mission
9581: PPUSH
9582: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9586: LD_EXP 36
9590: PPUSH
9591: LD_STRING DF-1-mission
9593: PPUSH
9594: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9598: LD_EXP 37
9602: PPUSH
9603: LD_STRING DO-5-mission
9605: PPUSH
9606: CALL_OW 88
// if not hasAll then
9610: LD_VAR 0 2
9614: NOT
9615: IFFALSE 9750
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9617: LD_ADDR_VAR 0 4
9621: PUSH
9622: LD_INT 22
9624: PUSH
9625: LD_INT 2
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 21
9634: PUSH
9635: LD_INT 1
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 23
9644: PUSH
9645: LD_INT 2
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: LIST
9656: PPUSH
9657: CALL_OW 69
9661: ST_TO_ADDR
// for i := 7 downto tmp do
9662: LD_ADDR_VAR 0 3
9666: PUSH
9667: DOUBLE
9668: LD_INT 7
9670: INC
9671: ST_TO_ADDR
9672: LD_VAR 0 4
9676: PUSH
9677: FOR_DOWNTO
9678: IFFALSE 9748
// begin if omarSquad < 3 then
9680: LD_EXP 40
9684: PUSH
9685: LD_INT 3
9687: LESS
9688: IFFALSE 9692
// break ;
9690: GO 9748
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9692: LD_EXP 40
9696: PUSH
9697: LD_INT 3
9699: ARRAY
9700: PPUSH
9701: LD_INT 2
9703: PPUSH
9704: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9708: LD_ADDR_EXP 42
9712: PUSH
9713: LD_EXP 42
9717: PUSH
9718: LD_EXP 40
9722: PUSH
9723: LD_INT 3
9725: ARRAY
9726: UNION
9727: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9728: LD_ADDR_EXP 40
9732: PUSH
9733: LD_EXP 40
9737: PPUSH
9738: LD_INT 3
9740: PPUSH
9741: CALL_OW 3
9745: ST_TO_ADDR
// end ;
9746: GO 9677
9748: POP
9749: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9750: LD_EXP 37
9754: PUSH
9755: LD_EXP 40
9759: ADD
9760: PPUSH
9761: LD_INT 103
9763: PPUSH
9764: LD_INT 9
9766: PPUSH
9767: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9771: LD_VAR 0 2
9775: PUSH
9776: LD_EXP 33
9780: PPUSH
9781: CALL_OW 302
9785: AND
9786: IFFALSE 9847
// begin wait ( 0 0$3 ) ;
9788: LD_INT 105
9790: PPUSH
9791: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9795: LD_EXP 33
9799: PPUSH
9800: LD_EXP 36
9804: PPUSH
9805: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9809: LD_EXP 33
9813: PPUSH
9814: LD_STRING DK-1-side
9816: PPUSH
9817: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9821: LD_EXP 36
9825: PPUSH
9826: LD_EXP 33
9830: PPUSH
9831: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9835: LD_EXP 36
9839: PPUSH
9840: LD_STRING DF-1-side
9842: PPUSH
9843: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PPUSH
9857: CALL_OW 69
9861: PPUSH
9862: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9866: LD_EXP 36
9870: PUSH
9871: LD_EXP 39
9875: ADD
9876: PPUSH
9877: LD_INT 108
9879: PPUSH
9880: LD_INT 62
9882: PPUSH
9883: CALL_OW 111
// gameStarted := true ;
9887: LD_ADDR_EXP 3
9891: PUSH
9892: LD_INT 1
9894: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9895: LD_INT 105
9897: PPUSH
9898: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9902: LD_EXP 28
9906: PPUSH
9907: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
9911: LD_EXP 28
9915: PPUSH
9916: LD_EXP 32
9920: PPUSH
9921: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
9925: LD_INT 22
9927: PUSH
9928: LD_INT 2
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PPUSH
9935: CALL_OW 69
9939: PUSH
9940: LD_EXP 28
9944: DIFF
9945: PPUSH
9946: LD_EXP 28
9950: PPUSH
9951: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
9955: LD_EXP 28
9959: PPUSH
9960: LD_STRING DH-1-explore
9962: PPUSH
9963: CALL_OW 88
// if Givi then
9967: LD_EXP 29
9971: IFFALSE 9987
// Say ( Givi , DG-1-explore ) else
9973: LD_EXP 29
9977: PPUSH
9978: LD_STRING DG-1-explore
9980: PPUSH
9981: CALL_OW 88
9985: GO 10024
// if heikeSecondSquad then
9987: LD_EXP 42
9991: IFFALSE 10024
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
9993: LD_EXP 42
9997: PPUSH
9998: LD_INT 26
10000: PUSH
10001: LD_INT 1
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PPUSH
10008: CALL_OW 72
10012: PUSH
10013: LD_INT 1
10015: ARRAY
10016: PPUSH
10017: LD_STRING DArm-1-explore
10019: PPUSH
10020: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10024: LD_EXP 32
10028: PPUSH
10029: LD_STRING DA-1-explore
10031: PPUSH
10032: CALL_OW 88
// if Sophia then
10036: LD_EXP 34
10040: IFFALSE 10118
// begin Say ( Sophia , DS-2-explore ) ;
10042: LD_EXP 34
10046: PPUSH
10047: LD_STRING DS-2-explore
10049: PPUSH
10050: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10054: LD_EXP 32
10058: PPUSH
10059: LD_STRING DA-2-explore
10061: PPUSH
10062: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10066: LD_EXP 34
10070: PPUSH
10071: LD_EXP 32
10075: PPUSH
10076: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10080: LD_EXP 32
10084: PPUSH
10085: LD_EXP 34
10089: PPUSH
10090: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10094: LD_EXP 34
10098: PPUSH
10099: LD_STRING DS-3-explore
10101: PPUSH
10102: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10106: LD_EXP 32
10110: PPUSH
10111: LD_STRING DA-3-explore
10113: PPUSH
10114: CALL_OW 88
// end ; if Mike then
10118: LD_EXP 30
10122: IFFALSE 10178
// begin Say ( Mike , DM-1-explore ) ;
10124: LD_EXP 30
10128: PPUSH
10129: LD_STRING DM-1-explore
10131: PPUSH
10132: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10136: LD_EXP 28
10140: PPUSH
10141: LD_STRING DH-2-explore
10143: PPUSH
10144: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10148: LD_EXP 30
10152: PPUSH
10153: LD_STRING DM-2-explore
10155: PPUSH
10156: CALL_OW 88
// if Kaia then
10160: LD_EXP 33
10164: IFFALSE 10178
// Say ( Kaia , DK-1-explore ) ;
10166: LD_EXP 33
10170: PPUSH
10171: LD_STRING DK-1-explore
10173: PPUSH
10174: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10178: LD_INT 22
10180: PUSH
10181: LD_INT 2
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PPUSH
10188: CALL_OW 69
10192: PPUSH
10193: CALL_OW 139
// Video ( false ) ;
10197: LD_INT 0
10199: PPUSH
10200: CALL 72288 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10204: LD_STRING BuildBase
10206: PPUSH
10207: CALL_OW 337
// SaveForQuickRestart ;
10211: CALL_OW 22
// end ;
10215: LD_VAR 0 1
10219: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10220: LD_EXP 5
10224: NOT
10225: PUSH
10226: LD_EXP 6
10230: NOT
10231: AND
10232: PUSH
10233: LD_INT 5
10235: PPUSH
10236: LD_INT 22
10238: PUSH
10239: LD_INT 2
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PPUSH
10246: CALL_OW 70
10250: AND
10251: PUSH
10252: LD_EXP 6
10256: NOT
10257: AND
10258: IFFALSE 10343
10260: GO 10262
10262: DISABLE
// begin if Mike then
10263: LD_EXP 30
10267: IFFALSE 10283
// Say ( Mike , DM-1-scout ) else
10269: LD_EXP 30
10273: PPUSH
10274: LD_STRING DM-1-scout
10276: PPUSH
10277: CALL_OW 88
10281: GO 10314
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10283: LD_EXP 42
10287: PPUSH
10288: LD_INT 26
10290: PUSH
10291: LD_INT 1
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 72
10302: PUSH
10303: LD_INT 1
10305: ARRAY
10306: PPUSH
10307: LD_STRING DArm-1-explore
10309: PPUSH
10310: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10314: LD_INT 54
10316: PPUSH
10317: LD_INT 35
10319: PPUSH
10320: LD_INT 2
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10330: LD_INT 54
10332: PPUSH
10333: LD_INT 35
10335: PPUSH
10336: LD_INT 2
10338: PPUSH
10339: CALL_OW 331
// end ;
10343: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10344: LD_INT 6
10346: PPUSH
10347: LD_INT 22
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 70
10361: PUSH
10362: LD_EXP 6
10366: NOT
10367: AND
10368: IFFALSE 10622
10370: GO 10372
10372: DISABLE
10373: LD_INT 0
10375: PPUSH
10376: PPUSH
10377: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10378: LD_ADDR_VAR 0 1
10382: PUSH
10383: LD_EXP 42
10387: PPUSH
10388: LD_INT 26
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PPUSH
10398: CALL_OW 72
10402: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10403: LD_ADDR_VAR 0 2
10407: PUSH
10408: LD_EXP 42
10412: PPUSH
10413: LD_INT 26
10415: PUSH
10416: LD_INT 2
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 72
10427: ST_TO_ADDR
// DialogueOn ;
10428: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10432: LD_INT 36
10434: PPUSH
10435: LD_INT 22
10437: PPUSH
10438: LD_INT 2
10440: PPUSH
10441: LD_INT 8
10443: PPUSH
10444: CALL_OW 330
// dwait ( 0 0$1 ) ;
10448: LD_INT 35
10450: PPUSH
10451: CALL_OW 68
// speakerOk := false ;
10455: LD_ADDR_VAR 0 3
10459: PUSH
10460: LD_INT 0
10462: ST_TO_ADDR
// if Mike then
10463: LD_EXP 30
10467: IFFALSE 10489
// speakerOk := Say ( Mike , DM-1-spot ) else
10469: LD_ADDR_VAR 0 3
10473: PUSH
10474: LD_EXP 30
10478: PPUSH
10479: LD_STRING DM-1-spot
10481: PPUSH
10482: CALL_OW 88
10486: ST_TO_ADDR
10487: GO 10517
// if randomMen then
10489: LD_VAR 0 1
10493: IFFALSE 10517
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10495: LD_ADDR_VAR 0 3
10499: PUSH
10500: LD_VAR 0 1
10504: PUSH
10505: LD_INT 1
10507: ARRAY
10508: PPUSH
10509: LD_STRING DArm-1-spot-a
10511: PPUSH
10512: CALL_OW 88
10516: ST_TO_ADDR
// if speakerOk then
10517: LD_VAR 0 3
10521: IFFALSE 10565
// begin if Givi then
10523: LD_EXP 29
10527: IFFALSE 10543
// Say ( Givi , DG-1-spot ) else
10529: LD_EXP 29
10533: PPUSH
10534: LD_STRING DG-1-spot
10536: PPUSH
10537: CALL_OW 88
10541: GO 10565
// if randomWomen then
10543: LD_VAR 0 2
10547: IFFALSE 10565
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10549: LD_VAR 0 2
10553: PUSH
10554: LD_INT 1
10556: ARRAY
10557: PPUSH
10558: LD_STRING DArf-1-spot-a
10560: PPUSH
10561: CALL_OW 88
// end ; if Mike then
10565: LD_EXP 30
10569: IFFALSE 10585
// Say ( Heike , DH-1-spot ) else
10571: LD_EXP 28
10575: PPUSH
10576: LD_STRING DH-1-spot
10578: PPUSH
10579: CALL_OW 88
10583: GO 10597
// Say ( Heike , DH-1-spot-a ) ;
10585: LD_EXP 28
10589: PPUSH
10590: LD_STRING DH-1-spot-a
10592: PPUSH
10593: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10597: LD_INT 36
10599: PPUSH
10600: LD_INT 22
10602: PPUSH
10603: LD_INT 2
10605: PPUSH
10606: CALL_OW 331
// DialogueOff ;
10610: CALL_OW 7
// americanBaseSpoted := true ;
10614: LD_ADDR_EXP 5
10618: PUSH
10619: LD_INT 1
10621: ST_TO_ADDR
// end ;
10622: PPOPN 3
10624: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10625: LD_EXP 5
10629: NOT
10630: PUSH
10631: LD_INT 22
10633: PUSH
10634: LD_INT 2
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 101
10643: PUSH
10644: LD_INT 1
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PPUSH
10655: CALL_OW 69
10659: AND
10660: PUSH
10661: LD_EXP 6
10665: NOT
10666: AND
10667: IFFALSE 10753
10669: GO 10671
10671: DISABLE
10672: LD_INT 0
10674: PPUSH
// begin americanBaseSpoted := true ;
10675: LD_ADDR_EXP 5
10679: PUSH
10680: LD_INT 1
10682: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10683: LD_ADDR_VAR 0 1
10687: PUSH
10688: LD_EXP 42
10692: PPUSH
10693: LD_INT 26
10695: PUSH
10696: LD_INT 1
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PPUSH
10703: CALL_OW 72
10707: ST_TO_ADDR
// if not randomMen then
10708: LD_VAR 0 1
10712: NOT
10713: IFFALSE 10717
// exit ;
10715: GO 10753
// DialogueOn ;
10717: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10721: LD_VAR 0 1
10725: PUSH
10726: LD_INT 1
10728: ARRAY
10729: PPUSH
10730: LD_STRING DArm-1-spot-a
10732: PPUSH
10733: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10737: LD_EXP 28
10741: PPUSH
10742: LD_STRING DH-1-spot-a
10744: PPUSH
10745: CALL_OW 88
// DialogueOff ;
10749: CALL_OW 7
// end ;
10753: PPOPN 1
10755: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10756: LD_INT 11
10758: PPUSH
10759: CALL_OW 255
10763: PUSH
10764: LD_INT 2
10766: EQUAL
10767: PUSH
10768: LD_INT 7
10770: PPUSH
10771: LD_INT 22
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 3
10783: PUSH
10784: LD_INT 50
10786: PUSH
10787: EMPTY
10788: LIST
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: LD_INT 30
10796: PUSH
10797: LD_INT 31
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 70
10813: OR
10814: PUSH
10815: LD_INT 7
10817: PPUSH
10818: LD_INT 22
10820: PUSH
10821: LD_INT 2
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PPUSH
10828: CALL_OW 70
10832: PUSH
10833: LD_INT 1
10835: GREATER
10836: OR
10837: PUSH
10838: LD_EXP 44
10842: PUSH
10843: LD_INT 4
10845: LESSEQUAL
10846: OR
10847: IFFALSE 11426
10849: GO 10851
10851: DISABLE
10852: LD_INT 0
10854: PPUSH
10855: PPUSH
// begin wait ( 0 0$3 ) ;
10856: LD_INT 105
10858: PPUSH
10859: CALL_OW 67
// americanStartRun := true ;
10863: LD_ADDR_EXP 14
10867: PUSH
10868: LD_INT 1
10870: ST_TO_ADDR
// if IsOk ( usCommander ) then
10871: LD_EXP 45
10875: PPUSH
10876: CALL_OW 302
10880: IFFALSE 10910
// begin usForces := usForces union usCommander ;
10882: LD_ADDR_EXP 44
10886: PUSH
10887: LD_EXP 44
10891: PUSH
10892: LD_EXP 45
10896: UNION
10897: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
10898: LD_EXP 45
10902: PPUSH
10903: LD_STRING DUsm-1-assault
10905: PPUSH
10906: CALL_OW 88
// end ; for i in usForces do
10910: LD_ADDR_VAR 0 1
10914: PUSH
10915: LD_EXP 44
10919: PUSH
10920: FOR_IN
10921: IFFALSE 10967
// begin if IsInUnit ( i ) then
10923: LD_VAR 0 1
10927: PPUSH
10928: CALL_OW 310
10932: IFFALSE 10943
// ComExitBuilding ( i ) ;
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 122
// wait ( 3 ) ;
10943: LD_INT 3
10945: PPUSH
10946: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
10950: LD_VAR 0 1
10954: PPUSH
10955: LD_INT 34
10957: PPUSH
10958: LD_INT 67
10960: PPUSH
10961: CALL_OW 111
// end ;
10965: GO 10920
10967: POP
10968: POP
// Say ( Heike , DH-1-assault ) ;
10969: LD_EXP 28
10973: PPUSH
10974: LD_STRING DH-1-assault
10976: PPUSH
10977: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10981: LD_INT 35
10983: PPUSH
10984: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
10988: LD_VAR 0 1
10992: PPUSH
10993: LD_INT 34
10995: PPUSH
10996: LD_INT 67
10998: PPUSH
10999: CALL_OW 111
// until not usForces ;
11003: LD_EXP 44
11007: NOT
11008: IFFALSE 10981
// music_nat := 2 ;
11010: LD_ADDR_OWVAR 71
11014: PUSH
11015: LD_INT 2
11017: ST_TO_ADDR
// music_class := music_victory ;
11018: LD_ADDR_OWVAR 72
11022: PUSH
11023: LD_INT 4
11025: ST_TO_ADDR
// if not americanHasEscaped then
11026: LD_EXP 8
11030: NOT
11031: IFFALSE 11052
// begin Say ( Heike , DH-2-assault ) ;
11033: LD_EXP 28
11037: PPUSH
11038: LD_STRING DH-2-assault
11040: PPUSH
11041: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11045: LD_STRING ACH_CLEAN
11047: PPUSH
11048: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11052: LD_INT 70
11054: PPUSH
11055: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11059: LD_INT 35
11061: PPUSH
11062: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11066: LD_INT 22
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 21
11078: PUSH
11079: LD_INT 1
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 3
11088: PUSH
11089: LD_INT 50
11091: PUSH
11092: EMPTY
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: PPUSH
11104: CALL_OW 69
11108: NOT
11109: IFFALSE 11059
// InGameOn ;
11111: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11115: LD_INT 11
11117: PPUSH
11118: CALL_OW 255
11122: PUSH
11123: LD_INT 2
11125: EQUAL
11126: NOT
11127: IFFALSE 11139
// SetSide ( usDepot , 2 ) ;
11129: LD_INT 11
11131: PPUSH
11132: LD_INT 2
11134: PPUSH
11135: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11139: LD_INT 35
11141: PPUSH
11142: LD_INT 22
11144: PPUSH
11145: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11149: LD_EXP 28
11153: PPUSH
11154: LD_INT 35
11156: PPUSH
11157: LD_INT 22
11159: PPUSH
11160: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11164: LD_EXP 28
11168: PPUSH
11169: LD_INT 38
11171: PPUSH
11172: LD_INT 25
11174: PPUSH
11175: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11179: LD_EXP 41
11183: PUSH
11184: LD_EXP 42
11188: UNION
11189: PPUSH
11190: LD_INT 39
11192: PPUSH
11193: LD_INT 26
11195: PPUSH
11196: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11200: LD_EXP 41
11204: PUSH
11205: LD_EXP 42
11209: UNION
11210: PPUSH
11211: LD_EXP 28
11215: PPUSH
11216: CALL_OW 179
// p := 0 ;
11220: LD_ADDR_VAR 0 2
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11228: LD_INT 35
11230: PPUSH
11231: CALL_OW 67
// p := p + 1 ;
11235: LD_ADDR_VAR 0 2
11239: PUSH
11240: LD_VAR 0 2
11244: PUSH
11245: LD_INT 1
11247: PLUS
11248: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11249: LD_EXP 28
11253: PPUSH
11254: CALL_OW 314
11258: NOT
11259: PUSH
11260: LD_VAR 0 2
11264: PUSH
11265: LD_INT 10
11267: GREATER
11268: OR
11269: IFFALSE 11228
// Say ( Heike , DH-1-capture ) ;
11271: LD_EXP 28
11275: PPUSH
11276: LD_STRING DH-1-capture
11278: PPUSH
11279: CALL_OW 88
// if Markov then
11283: LD_EXP 35
11287: IFFALSE 11301
// Say ( Markov , DMar-1-capture ) ;
11289: LD_EXP 35
11293: PPUSH
11294: LD_STRING DMar-1-capture
11296: PPUSH
11297: CALL_OW 88
// if Sophia then
11301: LD_EXP 34
11305: IFFALSE 11331
// begin Say ( Heike , DH-2-capture ) ;
11307: LD_EXP 28
11311: PPUSH
11312: LD_STRING DH-2-capture
11314: PPUSH
11315: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11319: LD_EXP 34
11323: PPUSH
11324: LD_STRING DS-1-capture
11326: PPUSH
11327: CALL_OW 88
// end ; InGameOff ;
11331: CALL_OW 9
// music_nat := music_auto ;
11335: LD_ADDR_OWVAR 71
11339: PUSH
11340: LD_INT 0
11342: ST_TO_ADDR
// music_class := music_auto ;
11343: LD_ADDR_OWVAR 72
11347: PUSH
11348: LD_INT 0
11350: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11351: LD_STRING ConstructBase
11353: PPUSH
11354: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11358: LD_ADDR_VAR 0 1
11362: PUSH
11363: LD_INT 22
11365: PUSH
11366: LD_INT 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 21
11375: PUSH
11376: LD_INT 3
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PPUSH
11387: CALL_OW 69
11391: PUSH
11392: FOR_IN
11393: IFFALSE 11409
// SetSide ( i , 2 ) ;
11395: LD_VAR 0 1
11399: PPUSH
11400: LD_INT 2
11402: PPUSH
11403: CALL_OW 235
11407: GO 11392
11409: POP
11410: POP
// wait ( 0 0$3 ) ;
11411: LD_INT 105
11413: PPUSH
11414: CALL_OW 67
// americanBaseCaptured := true ;
11418: LD_ADDR_EXP 6
11422: PUSH
11423: LD_INT 1
11425: ST_TO_ADDR
// end ;
11426: PPOPN 2
11428: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11429: LD_EXP 13
11433: PUSH
11434: LD_INT 3
11436: GREATEREQUAL
11437: IFFALSE 11449
11439: GO 11441
11441: DISABLE
// SetAchievement ( ACH_ENG ) ;
11442: LD_STRING ACH_ENG
11444: PPUSH
11445: CALL_OW 543
11449: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11450: LD_INT 22
11452: PUSH
11453: LD_INT 2
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: LD_INT 25
11462: PUSH
11463: LD_INT 15
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PPUSH
11474: CALL_OW 69
11478: PUSH
11479: LD_INT 4
11481: GREATEREQUAL
11482: IFFALSE 11494
11484: GO 11486
11486: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11487: LD_STRING ACH_APEGEN
11489: PPUSH
11490: CALL_OW 543
11494: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11495: LD_INT 22
11497: PUSH
11498: LD_INT 2
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 30
11507: PUSH
11508: LD_INT 2
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 3
11517: PUSH
11518: LD_INT 57
11520: PUSH
11521: EMPTY
11522: LIST
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 69
11537: IFFALSE 11780
11539: GO 11541
11541: DISABLE
// begin workshopBuilded := true ;
11542: LD_ADDR_EXP 10
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// if IsOk ( Markov ) then
11550: LD_EXP 35
11554: PPUSH
11555: CALL_OW 302
11559: IFFALSE 11618
// begin Say ( Heike , DH-1-shop-a ) ;
11561: LD_EXP 28
11565: PPUSH
11566: LD_STRING DH-1-shop-a
11568: PPUSH
11569: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11573: LD_INT 47
11575: PPUSH
11576: LD_INT 2
11578: PPUSH
11579: CALL_OW 321
11583: PUSH
11584: LD_INT 2
11586: EQUAL
11587: PUSH
11588: LD_INT 45
11590: PPUSH
11591: LD_INT 2
11593: PPUSH
11594: CALL_OW 321
11598: PUSH
11599: LD_INT 2
11601: EQUAL
11602: AND
11603: NOT
11604: IFFALSE 11618
// Say ( Markov , DMar-1-shop-a ) ;
11606: LD_EXP 35
11610: PPUSH
11611: LD_STRING DMar-1-shop-a
11613: PPUSH
11614: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11618: LD_INT 35
11620: PPUSH
11621: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11625: LD_INT 47
11627: PPUSH
11628: LD_INT 2
11630: PPUSH
11631: CALL_OW 321
11635: PUSH
11636: LD_INT 2
11638: EQUAL
11639: PUSH
11640: LD_INT 45
11642: PPUSH
11643: LD_INT 2
11645: PPUSH
11646: CALL_OW 321
11650: PUSH
11651: LD_INT 2
11653: EQUAL
11654: OR
11655: IFFALSE 11618
// DialogueOn ;
11657: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11661: LD_EXP 35
11665: PPUSH
11666: LD_STRING DMar-1-shop
11668: PPUSH
11669: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11673: LD_EXP 28
11677: PPUSH
11678: LD_STRING DH-1-shop
11680: PPUSH
11681: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11685: LD_EXP 35
11689: PPUSH
11690: LD_STRING DMar-2-shop
11692: PPUSH
11693: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11697: LD_EXP 35
11701: PPUSH
11702: LD_STRING DMar-3-shop
11704: PPUSH
11705: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11709: LD_EXP 28
11713: PPUSH
11714: LD_STRING DH-2-shop
11716: PPUSH
11717: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11721: LD_EXP 35
11725: PPUSH
11726: LD_STRING DMar-4-shop
11728: PPUSH
11729: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11733: LD_EXP 28
11737: PPUSH
11738: LD_STRING DH-3-shop
11740: PPUSH
11741: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11745: LD_EXP 35
11749: PPUSH
11750: LD_STRING DMar-5-shop
11752: PPUSH
11753: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11757: LD_EXP 28
11761: PPUSH
11762: LD_STRING DH-4-shop
11764: PPUSH
11765: CALL_OW 88
// DialogueOff ;
11769: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
11773: LD_STRING ConstructVeh
11775: PPUSH
11776: CALL_OW 337
// end ;
11780: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11781: LD_INT 2
11783: PPUSH
11784: LD_INT 2
11786: PPUSH
11787: LD_INT 1
11789: PPUSH
11790: CALL 36390 0 3
11794: PUSH
11795: LD_INT 0
11797: EQUAL
11798: IFFALSE 11810
11800: GO 11802
11802: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11803: LD_STRING Techs
11805: PPUSH
11806: CALL_OW 337
11810: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11811: LD_EXP 35
11815: PPUSH
11816: CALL_OW 302
11820: PUSH
11821: LD_INT 22
11823: PUSH
11824: LD_INT 2
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 2
11833: PUSH
11834: LD_INT 34
11836: PUSH
11837: LD_INT 22
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 35
11846: PUSH
11847: LD_INT 22
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PPUSH
11863: CALL_OW 69
11867: AND
11868: IFFALSE 11975
11870: GO 11872
11872: DISABLE
// begin DialogueOn ;
11873: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
11877: LD_INT 22
11879: PUSH
11880: LD_INT 2
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: LD_INT 2
11889: PUSH
11890: LD_INT 34
11892: PUSH
11893: LD_INT 22
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 35
11902: PUSH
11903: LD_INT 22
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: LIST
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PPUSH
11919: CALL_OW 69
11923: PPUSH
11924: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11928: LD_INT 10
11930: PPUSH
11931: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
11935: LD_EXP 28
11939: PPUSH
11940: LD_STRING DH-1-bal
11942: PPUSH
11943: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
11947: LD_EXP 35
11951: PPUSH
11952: LD_STRING DMar-1-bal
11954: PPUSH
11955: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
11959: LD_EXP 28
11963: PPUSH
11964: LD_STRING DH-2-bal
11966: PPUSH
11967: CALL_OW 88
// DialogueOff ;
11971: CALL_OW 7
// end ;
11975: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
11976: LD_EXP 32
11980: PPUSH
11981: CALL_OW 302
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_INT 2
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 30
11998: PUSH
11999: LD_INT 6
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PPUSH
12010: CALL_OW 69
12014: AND
12015: IFFALSE 12076
12017: GO 12019
12019: DISABLE
// begin DialogueOn ;
12020: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12024: LD_EXP 32
12028: PPUSH
12029: LD_STRING DA-1-lab
12031: PPUSH
12032: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12036: LD_EXP 28
12040: PPUSH
12041: LD_STRING DH-1-lab
12043: PPUSH
12044: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12048: LD_EXP 32
12052: PPUSH
12053: LD_STRING DA-2-lab
12055: PPUSH
12056: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12060: LD_EXP 28
12064: PPUSH
12065: LD_STRING DH-2-lab
12067: PPUSH
12068: CALL_OW 88
// DialogueOff ;
12072: CALL_OW 7
// end ;
12076: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12077: LD_EXP 33
12081: PPUSH
12082: CALL_OW 302
12086: PUSH
12087: LD_INT 22
12089: PUSH
12090: LD_INT 2
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: LD_INT 25
12099: PUSH
12100: LD_INT 15
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PPUSH
12111: CALL_OW 69
12115: AND
12116: PUSH
12117: LD_INT 81
12119: PUSH
12120: LD_INT 2
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PPUSH
12127: CALL_OW 69
12131: NOT
12132: AND
12133: IFFALSE 12315
12135: GO 12137
12137: DISABLE
12138: LD_INT 0
12140: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12141: LD_ADDR_VAR 0 1
12145: PUSH
12146: LD_INT 22
12148: PUSH
12149: LD_INT 2
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 25
12158: PUSH
12159: LD_INT 15
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PPUSH
12170: CALL_OW 69
12174: ST_TO_ADDR
// InGameOn ;
12175: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12179: LD_VAR 0 1
12183: PUSH
12184: LD_INT 1
12186: ARRAY
12187: PPUSH
12188: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12192: LD_VAR 0 1
12196: PUSH
12197: LD_INT 1
12199: ARRAY
12200: PPUSH
12201: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12205: LD_EXP 33
12209: PPUSH
12210: LD_STRING DK-1-apesol
12212: PPUSH
12213: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12217: LD_VAR 0 1
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: PPUSH
12226: LD_INT 35
12228: PPUSH
12229: LD_INT 28
12231: PPUSH
12232: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12236: LD_VAR 0 1
12240: PUSH
12241: LD_INT 1
12243: ARRAY
12244: PPUSH
12245: LD_INT 36
12247: PPUSH
12248: LD_INT 17
12250: PPUSH
12251: CALL_OW 171
// DialogueOn ;
12255: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12259: LD_EXP 32
12263: PPUSH
12264: LD_STRING DA-1-apesol
12266: PPUSH
12267: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12271: LD_EXP 33
12275: PPUSH
12276: LD_STRING DK-2-apesol
12278: PPUSH
12279: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12283: LD_EXP 32
12287: PPUSH
12288: LD_STRING DA-2-apesol
12290: PPUSH
12291: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12295: LD_EXP 33
12299: PPUSH
12300: LD_STRING DK-3-apesol
12302: PPUSH
12303: CALL_OW 88
// DialogueOff ;
12307: CALL_OW 7
// InGameOff ;
12311: CALL_OW 9
// end ;
12315: PPOPN 1
12317: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12318: LD_EXP 34
12322: PPUSH
12323: CALL_OW 302
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 2
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 25
12340: PUSH
12341: LD_INT 16
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PPUSH
12352: CALL_OW 69
12356: AND
12357: PUSH
12358: LD_INT 81
12360: PUSH
12361: LD_INT 2
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 69
12372: NOT
12373: AND
12374: IFFALSE 12637
12376: GO 12378
12378: DISABLE
12379: LD_INT 0
12381: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12382: LD_ADDR_VAR 0 1
12386: PUSH
12387: LD_INT 22
12389: PUSH
12390: LD_INT 2
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 25
12399: PUSH
12400: LD_INT 16
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PPUSH
12411: CALL_OW 69
12415: ST_TO_ADDR
// InGameOn ;
12416: CALL_OW 8
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12420: LD_INT 5
12422: PPUSH
12423: LD_INT 35
12425: PPUSH
12426: LD_INT 22
12428: PPUSH
12429: LD_INT 1
12431: PPUSH
12432: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12436: LD_EXP 34
12440: PPUSH
12441: LD_VAR 0 1
12445: PUSH
12446: LD_INT 1
12448: ARRAY
12449: PPUSH
12450: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12454: LD_VAR 0 1
12458: PUSH
12459: LD_INT 1
12461: ARRAY
12462: PPUSH
12463: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12467: LD_VAR 0 1
12471: PUSH
12472: LD_INT 1
12474: ARRAY
12475: PPUSH
12476: CALL_OW 122
// wait ( 0 0$2 ) ;
12480: LD_INT 70
12482: PPUSH
12483: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12487: LD_EXP 34
12491: PPUSH
12492: LD_STRING DS-1-apeeng
12494: PPUSH
12495: CALL_OW 88
// if IsOk ( Kamil ) then
12499: LD_EXP 31
12503: PPUSH
12504: CALL_OW 302
12508: IFFALSE 12633
// begin Say ( Kamil , DKam-1-apeeng ) ;
12510: LD_EXP 31
12514: PPUSH
12515: LD_STRING DKam-1-apeeng
12517: PPUSH
12518: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12522: LD_EXP 34
12526: PPUSH
12527: LD_STRING DS-2-apeeng
12529: PPUSH
12530: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12534: LD_EXP 31
12538: PPUSH
12539: LD_STRING DKam-2-apeeng
12541: PPUSH
12542: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12546: LD_EXP 34
12550: PPUSH
12551: LD_STRING DS-3-apeeng
12553: PPUSH
12554: CALL_OW 88
// if not IsOK ( Kaia ) then
12558: LD_EXP 33
12562: PPUSH
12563: CALL_OW 302
12567: NOT
12568: IFFALSE 12576
// begin InGameOff ;
12570: CALL_OW 9
// exit ;
12574: GO 12637
// end ; Say ( Kaia , DK-1-apeeng ) ;
12576: LD_EXP 33
12580: PPUSH
12581: LD_STRING DK-1-apeeng
12583: PPUSH
12584: CALL_OW 88
// if not IsOk ( Givi ) then
12588: LD_EXP 29
12592: PPUSH
12593: CALL_OW 302
12597: NOT
12598: IFFALSE 12609
// begin Video ( false ) ;
12600: LD_INT 0
12602: PPUSH
12603: CALL 72288 0 1
// exit ;
12607: GO 12637
// end ; Say ( Givi , DG-1-apeeng ) ;
12609: LD_EXP 29
12613: PPUSH
12614: LD_STRING DG-1-apeeng
12616: PPUSH
12617: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12621: LD_EXP 33
12625: PPUSH
12626: LD_STRING DK-2-apeeng
12628: PPUSH
12629: CALL_OW 88
// end ; InGameOff ;
12633: CALL_OW 9
// end ;
12637: PPOPN 1
12639: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12640: LD_EXP 4
12644: PUSH
12645: LD_INT 22
12647: PUSH
12648: LD_INT 2
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 30
12657: PUSH
12658: LD_INT 0
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PPUSH
12669: CALL_OW 69
12673: AND
12674: IFFALSE 12839
12676: GO 12678
12678: DISABLE
// begin wait ( 0 0$10 ) ;
12679: LD_INT 350
12681: PPUSH
12682: CALL_OW 67
// DialogueOn ;
12686: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12690: LD_EXP 36
12694: PPUSH
12695: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12699: LD_EXP 36
12703: PPUSH
12704: LD_STRING DF-1-distribution
12706: PPUSH
12707: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12711: LD_EXP 28
12715: PPUSH
12716: LD_STRING DH-2-distribution
12718: PPUSH
12719: CALL_OW 88
// if IsOk ( Kaia ) then
12723: LD_EXP 33
12727: PPUSH
12728: CALL_OW 302
12732: IFFALSE 12793
// begin Say ( Kaia , DK-1-distribution ) ;
12734: LD_EXP 33
12738: PPUSH
12739: LD_STRING DK-1-distribution
12741: PPUSH
12742: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12746: LD_EXP 28
12750: PPUSH
12751: LD_STRING DH-1-distribution
12753: PPUSH
12754: CALL_OW 88
// if IsOk ( Givi ) then
12758: LD_EXP 29
12762: PPUSH
12763: CALL_OW 302
12767: IFFALSE 12793
// begin Say ( Givi , DG-1-distribution ) ;
12769: LD_EXP 29
12773: PPUSH
12774: LD_STRING DG-1-distribution
12776: PPUSH
12777: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12781: LD_EXP 28
12785: PPUSH
12786: LD_STRING DH-3-distribution
12788: PPUSH
12789: CALL_OW 88
// end ; end ; DialogueOff ;
12793: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12797: LD_STRING Crates1
12799: PPUSH
12800: CALL_OW 337
// farmerRequestedCrates := 300 ;
12804: LD_ADDR_EXP 16
12808: PUSH
12809: LD_INT 300
12811: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12812: LD_STRING FarmerCrates
12814: PPUSH
12815: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12819: LD_INT 10
12821: PPUSH
12822: LD_INT 1
12824: PPUSH
12825: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12829: LD_INT 108
12831: PPUSH
12832: LD_INT 61
12834: PPUSH
12835: CALL_OW 86
// end ;
12839: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12840: LD_EXP 6
12844: PUSH
12845: LD_INT 22
12847: PUSH
12848: LD_INT 2
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: LD_INT 3
12857: PUSH
12858: LD_INT 57
12860: PUSH
12861: EMPTY
12862: LIST
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PUSH
12868: LD_INT 2
12870: PUSH
12871: LD_INT 30
12873: PUSH
12874: LD_INT 6
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 30
12883: PUSH
12884: LD_INT 7
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: LIST
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: PPUSH
12901: CALL_OW 69
12905: AND
12906: PUSH
12907: LD_INT 22
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: LD_INT 57
12922: PUSH
12923: EMPTY
12924: LIST
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 30
12932: PUSH
12933: LD_INT 4
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: PPUSH
12945: CALL_OW 69
12949: AND
12950: IFFALSE 13114
12952: GO 12954
12954: DISABLE
12955: LD_INT 0
12957: PPUSH
// begin wait ( 0 0$10 ) ;
12958: LD_INT 350
12960: PPUSH
12961: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
12965: LD_ADDR_VAR 0 1
12969: PUSH
12970: LD_EXP 42
12974: PPUSH
12975: LD_INT 26
12977: PUSH
12978: LD_INT 1
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 25
12987: PUSH
12988: LD_INT 2
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PPUSH
12999: CALL_OW 72
13003: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13004: LD_EXP 28
13008: PPUSH
13009: LD_STRING DH-1-task
13011: PPUSH
13012: CALL_OW 88
// if IsOk ( Sophia ) then
13016: LD_EXP 34
13020: PPUSH
13021: CALL_OW 302
13025: IFFALSE 13065
// begin Say ( Sophia , DS-1-task ) ;
13027: LD_EXP 34
13031: PPUSH
13032: LD_STRING DS-1-task
13034: PPUSH
13035: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13039: LD_EXP 34
13043: PPUSH
13044: LD_STRING DS-2-task
13046: PPUSH
13047: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13051: LD_EXP 28
13055: PPUSH
13056: LD_STRING DH-2-task
13058: PPUSH
13059: CALL_OW 88
// end else
13063: GO 13099
// if eng then
13065: LD_VAR 0 1
13069: IFFALSE 13099
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13071: LD_VAR 0 1
13075: PUSH
13076: LD_INT 1
13078: ARRAY
13079: PPUSH
13080: LD_STRING DArm-1-task
13082: PPUSH
13083: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13087: LD_EXP 28
13091: PPUSH
13092: LD_STRING DH-2-task
13094: PPUSH
13095: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13099: LD_STRING BaseConstructed
13101: PPUSH
13102: CALL_OW 337
// allowConvoys := true ;
13106: LD_ADDR_EXP 12
13110: PUSH
13111: LD_INT 1
13113: ST_TO_ADDR
// end ;
13114: PPOPN 1
13116: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13117: LD_INT 22
13119: PUSH
13120: LD_INT 4
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 34
13129: PUSH
13130: LD_INT 12
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PPUSH
13141: CALL_OW 69
13145: IFFALSE 13313
13147: GO 13149
13149: DISABLE
13150: LD_INT 0
13152: PPUSH
13153: PPUSH
13154: PPUSH
// begin wait ( 0 0$2 ) ;
13155: LD_INT 70
13157: PPUSH
13158: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13162: LD_ADDR_VAR 0 1
13166: PUSH
13167: LD_INT 22
13169: PUSH
13170: LD_INT 4
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 34
13179: PUSH
13180: LD_INT 12
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PPUSH
13191: CALL_OW 69
13195: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13196: LD_ADDR_VAR 0 2
13200: PUSH
13201: LD_VAR 0 1
13205: PUSH
13206: LD_INT 1
13208: ARRAY
13209: PPUSH
13210: CALL_OW 250
13214: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13215: LD_ADDR_VAR 0 3
13219: PUSH
13220: LD_VAR 0 1
13224: PUSH
13225: LD_INT 1
13227: ARRAY
13228: PPUSH
13229: CALL_OW 251
13233: ST_TO_ADDR
// DialogueOn ;
13234: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13238: LD_VAR 0 2
13242: PPUSH
13243: LD_VAR 0 3
13247: PPUSH
13248: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13252: LD_VAR 0 2
13256: PPUSH
13257: LD_VAR 0 3
13261: PPUSH
13262: LD_INT 2
13264: PPUSH
13265: LD_INT 6
13267: NEG
13268: PPUSH
13269: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13273: LD_INT 10
13275: PPUSH
13276: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13280: LD_EXP 28
13284: PPUSH
13285: LD_STRING DH-1-seecargo
13287: PPUSH
13288: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13292: LD_VAR 0 2
13296: PPUSH
13297: LD_VAR 0 3
13301: PPUSH
13302: LD_INT 2
13304: PPUSH
13305: CALL_OW 331
// DialogueOff ;
13309: CALL_OW 7
// end ;
13313: PPOPN 3
13315: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13316: LD_EXP 4
13320: PUSH
13321: LD_EXP 15
13325: PUSH
13326: LD_INT 300
13328: GREATEREQUAL
13329: AND
13330: IFFALSE 13402
13332: GO 13334
13334: DISABLE
// begin DialogueOn ;
13335: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13339: LD_EXP 36
13343: PPUSH
13344: LD_STRING DF-1-delivery-2
13346: PPUSH
13347: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13351: LD_EXP 28
13355: PPUSH
13356: LD_STRING DH-1-delivery-2
13358: PPUSH
13359: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13363: LD_EXP 36
13367: PPUSH
13368: LD_STRING DF-2-delivery-2
13370: PPUSH
13371: CALL_OW 94
// DialogueOff ;
13375: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13379: LD_STRING Crates2
13381: PPUSH
13382: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13386: LD_ADDR_EXP 17
13390: PUSH
13391: LD_INT 63000
13393: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13394: LD_ADDR_EXP 16
13398: PUSH
13399: LD_INT 600
13401: ST_TO_ADDR
// end ;
13402: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13403: LD_EXP 4
13407: PUSH
13408: LD_EXP 15
13412: PUSH
13413: LD_INT 600
13415: GREATEREQUAL
13416: AND
13417: PUSH
13418: LD_OWVAR 67
13422: PUSH
13423: LD_INT 1
13425: GREATER
13426: AND
13427: IFFALSE 13593
13429: GO 13431
13431: DISABLE
// begin DialogueOn ;
13432: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13436: LD_EXP 36
13440: PPUSH
13441: LD_STRING DF-1-delivery-3
13443: PPUSH
13444: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13448: LD_EXP 28
13452: PPUSH
13453: LD_STRING DH-1-delivery-3
13455: PPUSH
13456: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13460: LD_EXP 36
13464: PPUSH
13465: LD_STRING DF-2-delivery-3
13467: PPUSH
13468: CALL_OW 94
// if IsOk ( Kaia ) then
13472: LD_EXP 33
13476: PPUSH
13477: CALL_OW 302
13481: IFFALSE 13531
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13483: LD_EXP 33
13487: PPUSH
13488: LD_STRING DK-1-delivery-3
13490: PPUSH
13491: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13495: LD_EXP 28
13499: PPUSH
13500: LD_STRING DH-2-delivery-3
13502: PPUSH
13503: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13507: LD_EXP 29
13511: PPUSH
13512: LD_STRING DG-1-delivery-3
13514: PPUSH
13515: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13519: LD_EXP 30
13523: PPUSH
13524: LD_STRING DM-1-delivery-3
13526: PPUSH
13527: CALL_OW 88
// end ; DialogueOff ;
13531: CALL_OW 7
// if Difficulty = 2 then
13535: LD_OWVAR 67
13539: PUSH
13540: LD_INT 2
13542: EQUAL
13543: IFFALSE 13570
// begin ChangeMissionObjectives ( Crates3 ) ;
13545: LD_STRING Crates3
13547: PPUSH
13548: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13552: LD_ADDR_EXP 17
13556: PUSH
13557: LD_INT 63000
13559: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13560: LD_ADDR_EXP 16
13564: PUSH
13565: LD_INT 900
13567: ST_TO_ADDR
// end else
13568: GO 13593
// begin ChangeMissionObjectives ( Crates4 ) ;
13570: LD_STRING Crates4
13572: PPUSH
13573: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13577: LD_ADDR_EXP 17
13581: PUSH
13582: LD_INT 63000
13584: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13585: LD_ADDR_EXP 16
13589: PUSH
13590: LD_INT 1200
13592: ST_TO_ADDR
// end ; end ;
13593: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13594: LD_EXP 4
13598: PUSH
13599: LD_EXP 15
13603: PUSH
13604: LD_INT 600
13606: PUSH
13607: LD_INT 900
13609: PUSH
13610: LD_INT 1200
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: LIST
13617: PUSH
13618: LD_OWVAR 67
13622: ARRAY
13623: GREATEREQUAL
13624: AND
13625: PUSH
13626: LD_EXP 16
13630: PUSH
13631: LD_EXP 17
13635: LESSEQUAL
13636: AND
13637: IFFALSE 13704
13639: GO 13641
13641: DISABLE
// begin retreatAllowed := true ;
13642: LD_ADDR_EXP 11
13646: PUSH
13647: LD_INT 1
13649: ST_TO_ADDR
// display_strings := [ ] ;
13650: LD_ADDR_OWVAR 47
13654: PUSH
13655: EMPTY
13656: ST_TO_ADDR
// DialogueOn ;
13657: CALL_OW 6
// InGameOn ;
13661: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13665: LD_EXP 37
13669: PPUSH
13670: LD_STRING DO-radio-end
13672: PPUSH
13673: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13677: LD_EXP 28
13681: PPUSH
13682: LD_STRING DH-1-radio-end
13684: PPUSH
13685: CALL_OW 88
// InGameOff ;
13689: CALL_OW 9
// DialogueOff ;
13693: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13697: LD_STRING Retreat
13699: PPUSH
13700: CALL_OW 337
// end ;
13704: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13705: LD_EXP 11
13709: IFFALSE 13840
13711: GO 13713
13713: DISABLE
13714: LD_INT 0
13716: PPUSH
13717: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13718: LD_INT 10
13720: PPUSH
13721: LD_INT 0
13723: PPUSH
13724: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13728: LD_ADDR_VAR 0 1
13732: PUSH
13733: LD_EXP 39
13737: PPUSH
13738: LD_INT 25
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PPUSH
13748: CALL_OW 72
13752: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13753: LD_VAR 0 1
13757: PUSH
13758: LD_INT 102
13760: PPUSH
13761: LD_INT 69
13763: PPUSH
13764: CALL_OW 428
13768: PUSH
13769: LD_INT 0
13771: EQUAL
13772: AND
13773: IFFALSE 13840
// begin for i in tmp do
13775: LD_ADDR_VAR 0 2
13779: PUSH
13780: LD_VAR 0 1
13784: PUSH
13785: FOR_IN
13786: IFFALSE 13810
// if IsInUnit ( i ) then
13788: LD_VAR 0 2
13792: PPUSH
13793: CALL_OW 310
13797: IFFALSE 13808
// ComExitBuilding ( i ) ;
13799: LD_VAR 0 2
13803: PPUSH
13804: CALL_OW 122
13808: GO 13785
13810: POP
13811: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13812: LD_VAR 0 1
13816: PPUSH
13817: LD_INT 31
13819: PPUSH
13820: LD_INT 102
13822: PPUSH
13823: LD_INT 69
13825: PPUSH
13826: LD_INT 2
13828: PPUSH
13829: CALL_OW 205
// wait ( 0 0$3 ) ;
13833: LD_INT 105
13835: PPUSH
13836: CALL_OW 67
// end ; end ;
13840: PPOPN 2
13842: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13843: LD_EXP 11
13847: NOT
13848: PUSH
13849: LD_INT 5
13851: PPUSH
13852: CALL_OW 301
13856: AND
13857: IFFALSE 13889
13859: GO 13861
13861: DISABLE
// begin DialogueOn ;
13862: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
13866: LD_EXP 36
13870: PPUSH
13871: LD_STRING DF-1-failure
13873: PPUSH
13874: CALL_OW 94
// DialogueOff ;
13878: CALL_OW 7
// YouLost ( FarmerDepot ) ;
13882: LD_STRING FarmerDepot
13884: PPUSH
13885: CALL_OW 104
// end ;
13889: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
13890: LD_EXP 11
13894: PUSH
13895: LD_EXP 28
13899: PPUSH
13900: LD_EXP 36
13904: PPUSH
13905: CALL_OW 296
13909: PUSH
13910: LD_INT 6
13912: LESS
13913: AND
13914: PUSH
13915: LD_INT 81
13917: PUSH
13918: LD_INT 2
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 21
13927: PUSH
13928: LD_INT 1
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: PPUSH
13939: CALL_OW 69
13943: NOT
13944: AND
13945: IFFALSE 14566
13947: GO 13949
13949: DISABLE
13950: LD_INT 0
13952: PPUSH
13953: PPUSH
13954: PPUSH
// begin allowConvoys := false ;
13955: LD_ADDR_EXP 12
13959: PUSH
13960: LD_INT 0
13962: ST_TO_ADDR
// InGameOn ;
13963: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
13967: LD_EXP 28
13971: PPUSH
13972: LD_EXP 36
13976: PPUSH
13977: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
13981: LD_EXP 36
13985: PPUSH
13986: LD_EXP 28
13990: PPUSH
13991: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
13995: LD_EXP 36
13999: PPUSH
14000: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14004: LD_EXP 28
14008: PPUSH
14009: LD_STRING DH-1-end
14011: PPUSH
14012: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14016: LD_EXP 36
14020: PPUSH
14021: LD_STRING DF-1-end
14023: PPUSH
14024: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14028: LD_EXP 36
14032: PPUSH
14033: LD_STRING DF-2-end
14035: PPUSH
14036: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14040: LD_EXP 28
14044: PPUSH
14045: LD_STRING DH-2-end
14047: PPUSH
14048: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14052: LD_EXP 36
14056: PPUSH
14057: LD_STRING DF-3-end
14059: PPUSH
14060: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14064: LD_EXP 28
14068: PPUSH
14069: LD_STRING DH-3-end
14071: PPUSH
14072: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14076: LD_EXP 29
14080: PPUSH
14081: LD_STRING DG-1-end
14083: PPUSH
14084: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14088: LD_EXP 28
14092: PPUSH
14093: LD_STRING DH-4-end
14095: PPUSH
14096: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14100: LD_EXP 36
14104: PPUSH
14105: LD_STRING DF-4-end
14107: PPUSH
14108: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14112: LD_EXP 28
14116: PPUSH
14117: LD_STRING DH-5-end
14119: PPUSH
14120: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14124: LD_EXP 36
14128: PPUSH
14129: LD_STRING DF-5-end
14131: PPUSH
14132: CALL_OW 88
// InGameOff ;
14136: CALL_OW 9
// allowCargoEvacuation := true ;
14140: LD_ADDR_EXP 7
14144: PUSH
14145: LD_INT 1
14147: ST_TO_ADDR
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14148: LD_ADDR_VAR 0 2
14152: PUSH
14153: LD_INT 4
14155: PUSH
14156: LD_INT 3
14158: PUSH
14159: LD_INT 2
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: LIST
14166: PUSH
14167: LD_OWVAR 67
14171: ARRAY
14172: ST_TO_ADDR
// if farmerSquad < max then
14173: LD_EXP 39
14177: PUSH
14178: LD_VAR 0 2
14182: LESS
14183: IFFALSE 14195
// max := farmerSquad ;
14185: LD_ADDR_VAR 0 2
14189: PUSH
14190: LD_EXP 39
14194: ST_TO_ADDR
// for i := 1 to max do
14195: LD_ADDR_VAR 0 1
14199: PUSH
14200: DOUBLE
14201: LD_INT 1
14203: DEC
14204: ST_TO_ADDR
14205: LD_VAR 0 2
14209: PUSH
14210: FOR_TO
14211: IFFALSE 14249
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14213: LD_EXP 39
14217: PUSH
14218: LD_INT 1
14220: ARRAY
14221: PPUSH
14222: LD_INT 2
14224: PPUSH
14225: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14229: LD_ADDR_EXP 39
14233: PUSH
14234: LD_EXP 39
14238: PPUSH
14239: LD_INT 1
14241: PPUSH
14242: CALL_OW 3
14246: ST_TO_ADDR
// end ;
14247: GO 14210
14249: POP
14250: POP
// for i in Farmer ^ farmerSquad do
14251: LD_ADDR_VAR 0 1
14255: PUSH
14256: LD_EXP 36
14260: PUSH
14261: LD_EXP 39
14265: ADD
14266: PUSH
14267: FOR_IN
14268: IFFALSE 14307
// begin if IsInUnit ( i ) then
14270: LD_VAR 0 1
14274: PPUSH
14275: CALL_OW 310
14279: IFFALSE 14290
// ComExitBuilding ( i ) ;
14281: LD_VAR 0 1
14285: PPUSH
14286: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14290: LD_VAR 0 1
14294: PPUSH
14295: LD_INT 102
14297: PPUSH
14298: LD_INT 7
14300: PPUSH
14301: CALL_OW 171
// end ;
14305: GO 14267
14307: POP
14308: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14309: LD_ADDR_VAR 0 1
14313: PUSH
14314: LD_INT 22
14316: PUSH
14317: LD_INT 5
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 21
14326: PUSH
14327: LD_INT 3
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PPUSH
14338: CALL_OW 69
14342: PUSH
14343: LD_INT 5
14345: DIFF
14346: PUSH
14347: FOR_IN
14348: IFFALSE 14364
// SetSide ( i , 2 ) ;
14350: LD_VAR 0 1
14354: PPUSH
14355: LD_INT 2
14357: PPUSH
14358: CALL_OW 235
14362: GO 14347
14364: POP
14365: POP
// repeat wait ( 0 0$1 ) ;
14366: LD_INT 35
14368: PPUSH
14369: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14373: LD_ADDR_VAR 0 3
14377: PUSH
14378: LD_EXP 36
14382: PUSH
14383: LD_EXP 39
14387: ADD
14388: PPUSH
14389: LD_INT 95
14391: PUSH
14392: LD_INT 3
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PPUSH
14399: CALL_OW 72
14403: ST_TO_ADDR
// if tmp then
14404: LD_VAR 0 3
14408: IFFALSE 14452
// for i in tmp do
14410: LD_ADDR_VAR 0 1
14414: PUSH
14415: LD_VAR 0 3
14419: PUSH
14420: FOR_IN
14421: IFFALSE 14450
// begin farmerSquad := farmerSquad diff i ;
14423: LD_ADDR_EXP 39
14427: PUSH
14428: LD_EXP 39
14432: PUSH
14433: LD_VAR 0 1
14437: DIFF
14438: ST_TO_ADDR
// RemoveUnit ( i ) ;
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 64
// end ;
14448: GO 14420
14450: POP
14451: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14452: LD_EXP 39
14456: PUSH
14457: EMPTY
14458: EQUAL
14459: PUSH
14460: LD_EXP 36
14464: PPUSH
14465: CALL_OW 305
14469: NOT
14470: AND
14471: IFFALSE 14366
// if farmerHumanLoseCounter = 0 then
14473: LD_EXP 20
14477: PUSH
14478: LD_INT 0
14480: EQUAL
14481: IFFALSE 14490
// SetAchievement ( ACH_BABY ) ;
14483: LD_STRING ACH_BABY
14485: PPUSH
14486: CALL_OW 543
// wait ( 1 1$00 ) ;
14490: LD_INT 2100
14492: PPUSH
14493: CALL_OW 67
// SendAttack ;
14497: CALL 6087 0 0
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
14501: LD_ADDR_VAR 0 1
14505: PUSH
14506: DOUBLE
14507: LD_INT 1
14509: DEC
14510: ST_TO_ADDR
14511: LD_INT 2
14513: PUSH
14514: LD_INT 3
14516: PUSH
14517: LD_INT 4
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: PUSH
14525: LD_OWVAR 67
14529: ARRAY
14530: PUSH
14531: FOR_TO
14532: IFFALSE 14564
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 ] [ Difficulty ] ) ;
14534: LD_INT 4200
14536: PUSH
14537: LD_INT 3500
14539: PUSH
14540: LD_INT 3150
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: PUSH
14548: LD_OWVAR 67
14552: ARRAY
14553: PPUSH
14554: CALL_OW 67
// SendAttack ;
14558: CALL 6087 0 0
// end ;
14562: GO 14531
14564: POP
14565: POP
// end ;
14566: PPOPN 3
14568: END
// every 0 0$1 trigger allowCargoEvacuation do
14569: LD_EXP 7
14573: IFFALSE 14582
14575: GO 14577
14577: DISABLE
// StartCargoEvacuation ;
14578: CALL 3623 0 0
14582: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14583: LD_EXP 17
14587: PUSH
14588: LD_INT 18900
14590: LESSEQUAL
14591: IFFALSE 14640
14593: GO 14595
14595: DISABLE
// begin DialogueOn ;
14596: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14600: LD_EXP 36
14604: PPUSH
14605: LD_STRING DF-1-distribution-a
14607: PPUSH
14608: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14612: LD_EXP 28
14616: PPUSH
14617: LD_STRING DH-1-distribution-a
14619: PPUSH
14620: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14624: LD_EXP 36
14628: PPUSH
14629: LD_STRING DF-2-distribution-a
14631: PPUSH
14632: CALL_OW 94
// DialogueOff ;
14636: CALL_OW 7
// end ;
14640: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14641: LD_EXP 17
14645: PUSH
14646: LD_INT 0
14648: LESSEQUAL
14649: IFFALSE 14681
14651: GO 14653
14653: DISABLE
// begin DialogueOn ;
14654: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14658: LD_EXP 36
14662: PPUSH
14663: LD_STRING DF-3-distribution-a
14665: PPUSH
14666: CALL_OW 94
// YouLost ( Distribution ) ;
14670: LD_STRING Distribution
14672: PPUSH
14673: CALL_OW 104
// DialogueOff ;
14677: CALL_OW 7
// end ;
14681: END
// every 0 0$1 trigger vehCounter >= 2 do
14682: LD_EXP 22
14686: PUSH
14687: LD_INT 2
14689: GREATEREQUAL
14690: IFFALSE 14702
14692: GO 14694
14694: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14695: LD_STRING VehConstructed
14697: PPUSH
14698: CALL_OW 337
14702: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14703: LD_INT 22
14705: PUSH
14706: LD_INT 2
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 34
14715: PUSH
14716: LD_INT 12
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PPUSH
14727: CALL_OW 69
14731: IFFALSE 14791
14733: GO 14735
14735: DISABLE
// begin DialogueOn ;
14736: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14740: LD_EXP 28
14744: PPUSH
14745: LD_STRING DH-1-truck
14747: PPUSH
14748: CALL_OW 88
// if IsOk ( Markov ) then
14752: LD_EXP 35
14756: PPUSH
14757: CALL_OW 302
14761: IFFALSE 14787
// begin Say ( Markov , DMar-1-truck ) ;
14763: LD_EXP 35
14767: PPUSH
14768: LD_STRING DMar-1-truck
14770: PPUSH
14771: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14775: LD_EXP 28
14779: PPUSH
14780: LD_STRING DH-2-truck
14782: PPUSH
14783: CALL_OW 88
// end ; DialogueOff ;
14787: CALL_OW 7
// end ;
14791: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14792: LD_INT 0
14794: PPUSH
14795: PPUSH
14796: PPUSH
// if IsOk ( Givi ) then
14797: LD_EXP 29
14801: PPUSH
14802: CALL_OW 302
14806: IFFALSE 14822
// begin Say ( Givi , DG-1-nocargo ) ;
14808: LD_EXP 29
14812: PPUSH
14813: LD_STRING DG-1-nocargo
14815: PPUSH
14816: CALL_OW 88
// exit ;
14820: GO 14918
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14822: LD_ADDR_VAR 0 2
14826: PUSH
14827: LD_EXP 42
14831: PPUSH
14832: LD_INT 26
14834: PUSH
14835: LD_INT 1
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PPUSH
14842: CALL_OW 72
14846: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14847: LD_ADDR_VAR 0 3
14851: PUSH
14852: LD_EXP 42
14856: PPUSH
14857: LD_INT 26
14859: PUSH
14860: LD_INT 2
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PPUSH
14867: CALL_OW 72
14871: ST_TO_ADDR
// if randomMen then
14872: LD_VAR 0 2
14876: IFFALSE 14896
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
14878: LD_VAR 0 2
14882: PUSH
14883: LD_INT 1
14885: ARRAY
14886: PPUSH
14887: LD_STRING DArm-1-nocargo
14889: PPUSH
14890: CALL_OW 88
14894: GO 14918
// if randomWomen then
14896: LD_VAR 0 3
14900: IFFALSE 14918
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
14902: LD_VAR 0 3
14906: PUSH
14907: LD_INT 1
14909: ARRAY
14910: PPUSH
14911: LD_STRING DArf-1-nocargo
14913: PPUSH
14914: CALL_OW 88
// end ;
14918: LD_VAR 0 1
14922: RET
// export function IncomingAttack ; begin
14923: LD_INT 0
14925: PPUSH
// if attackWave = 1 then
14926: LD_EXP 19
14930: PUSH
14931: LD_INT 1
14933: EQUAL
14934: IFFALSE 15005
// begin DialogueOn ;
14936: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
14940: LD_EXP 37
14944: PPUSH
14945: LD_STRING DO-1-radio-1
14947: PPUSH
14948: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
14952: LD_EXP 28
14956: PPUSH
14957: LD_STRING DH-1-radio-1-
14959: PPUSH
14960: CALL_OW 88
// if IsOk ( Markov ) then
14964: LD_EXP 35
14968: PPUSH
14969: CALL_OW 302
14973: IFFALSE 14999
// begin Say ( Markov , DMar-1-radio-1 ) ;
14975: LD_EXP 35
14979: PPUSH
14980: LD_STRING DMar-1-radio-1
14982: PPUSH
14983: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
14987: LD_EXP 28
14991: PPUSH
14992: LD_STRING DH-2-radio-1
14994: PPUSH
14995: CALL_OW 88
// end ; DialogueOff ;
14999: CALL_OW 7
// end else
15003: GO 15029
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15005: LD_EXP 37
15009: PPUSH
15010: LD_STRING DO-1-radio-u
15012: PPUSH
15013: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15017: LD_EXP 28
15021: PPUSH
15022: LD_STRING DH-1-radio-u
15024: PPUSH
15025: CALL_OW 88
// end ; end ;
15029: LD_VAR 0 1
15033: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15034: LD_EXP 44
15038: PPUSH
15039: LD_INT 95
15041: PUSH
15042: LD_INT 8
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PPUSH
15049: CALL_OW 72
15053: IFFALSE 15156
15055: GO 15057
15057: DISABLE
15058: LD_INT 0
15060: PPUSH
// begin enable ;
15061: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15062: LD_ADDR_VAR 0 1
15066: PUSH
15067: LD_EXP 44
15071: PPUSH
15072: LD_INT 95
15074: PUSH
15075: LD_INT 8
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PPUSH
15082: CALL_OW 72
15086: PUSH
15087: FOR_IN
15088: IFFALSE 15117
// begin usForces := usForces diff i ;
15090: LD_ADDR_EXP 44
15094: PUSH
15095: LD_EXP 44
15099: PUSH
15100: LD_VAR 0 1
15104: DIFF
15105: ST_TO_ADDR
// RemoveUnit ( i ) ;
15106: LD_VAR 0 1
15110: PPUSH
15111: CALL_OW 64
// end ;
15115: GO 15087
15117: POP
15118: POP
// if not americanHasEscaped and attackWave = 1 then
15119: LD_EXP 8
15123: NOT
15124: PUSH
15125: LD_EXP 19
15129: PUSH
15130: LD_INT 1
15132: EQUAL
15133: AND
15134: IFFALSE 15156
// begin americanHasEscaped := true ;
15136: LD_ADDR_EXP 8
15140: PUSH
15141: LD_INT 1
15143: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15144: LD_EXP 28
15148: PPUSH
15149: LD_STRING DH-2-assault-a
15151: PPUSH
15152: CALL_OW 88
// end ; end ;
15156: PPOPN 1
15158: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15159: LD_INT 4
15161: PPUSH
15162: LD_INT 22
15164: PUSH
15165: LD_INT 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PPUSH
15172: CALL_OW 70
15176: PUSH
15177: LD_EXP 11
15181: NOT
15182: AND
15183: IFFALSE 15200
15185: GO 15187
15187: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15188: LD_EXP 36
15192: PPUSH
15193: LD_STRING DF-1-attack
15195: PPUSH
15196: CALL_OW 94
15200: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15201: LD_INT 5
15203: PPUSH
15204: CALL_OW 255
15208: PUSH
15209: LD_INT 2
15211: EQUAL
15212: IFFALSE 15224
15214: GO 15216
15216: DISABLE
// YouLost ( Attack ) ;
15217: LD_STRING Attack
15219: PPUSH
15220: CALL_OW 104
15224: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15225: LD_INT 22
15227: PUSH
15228: LD_INT 1
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: LD_INT 21
15237: PUSH
15238: LD_INT 1
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PPUSH
15249: CALL_OW 69
15253: NOT
15254: PUSH
15255: LD_INT 22
15257: PUSH
15258: LD_INT 4
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PPUSH
15265: CALL_OW 69
15269: NOT
15270: AND
15271: PUSH
15272: LD_EXP 11
15276: NOT
15277: AND
15278: PUSH
15279: LD_EXP 15
15283: PUSH
15284: LD_INT 90
15286: GREATER
15287: AND
15288: PUSH
15289: LD_INT 7
15291: PPUSH
15292: LD_INT 22
15294: PUSH
15295: LD_INT 2
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 21
15304: PUSH
15305: LD_INT 1
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PPUSH
15316: CALL_OW 70
15320: AND
15321: PUSH
15322: LD_INT 22
15324: PUSH
15325: LD_INT 2
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 50
15334: PUSH
15335: EMPTY
15336: LIST
15337: PUSH
15338: LD_INT 30
15340: PUSH
15341: LD_INT 0
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: PPUSH
15353: CALL_OW 69
15357: AND
15358: IFFALSE 16151
15360: GO 15362
15362: DISABLE
15363: LD_INT 0
15365: PPUSH
15366: PPUSH
15367: PPUSH
15368: PPUSH
15369: PPUSH
// begin depot := usDepot ;
15370: LD_ADDR_VAR 0 5
15374: PUSH
15375: LD_INT 11
15377: ST_TO_ADDR
// if not depot then
15378: LD_VAR 0 5
15382: NOT
15383: IFFALSE 15423
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15385: LD_ADDR_VAR 0 5
15389: PUSH
15390: LD_INT 22
15392: PUSH
15393: LD_INT 2
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 30
15402: PUSH
15403: LD_INT 0
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: PUSH
15419: LD_INT 1
15421: ARRAY
15422: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15423: LD_ADDR_VAR 0 1
15427: PUSH
15428: LD_EXP 42
15432: PPUSH
15433: LD_INT 26
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PPUSH
15443: CALL_OW 72
15447: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15448: LD_ADDR_VAR 0 2
15452: PUSH
15453: LD_EXP 42
15457: PPUSH
15458: LD_INT 26
15460: PUSH
15461: LD_INT 2
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PPUSH
15468: CALL_OW 72
15472: ST_TO_ADDR
// if IsOk ( Kaia ) then
15473: LD_EXP 33
15477: PPUSH
15478: CALL_OW 302
15482: IFFALSE 15503
// speaker := [ Kaia , DK ] else
15484: LD_ADDR_VAR 0 3
15488: PUSH
15489: LD_EXP 33
15493: PUSH
15494: LD_STRING DK
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: ST_TO_ADDR
15501: GO 15583
// if randomMen then
15503: LD_VAR 0 1
15507: IFFALSE 15542
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15509: LD_ADDR_VAR 0 3
15513: PUSH
15514: LD_VAR 0 1
15518: PUSH
15519: LD_INT 1
15521: PPUSH
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 12
15531: ARRAY
15532: PUSH
15533: LD_STRING DArm
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: ST_TO_ADDR
15540: GO 15583
// if randomWomen then
15542: LD_VAR 0 2
15546: IFFALSE 15581
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15548: LD_ADDR_VAR 0 3
15552: PUSH
15553: LD_VAR 0 2
15557: PUSH
15558: LD_INT 1
15560: PPUSH
15561: LD_VAR 0 2
15565: PPUSH
15566: CALL_OW 12
15570: ARRAY
15571: PUSH
15572: LD_STRING DArf
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: ST_TO_ADDR
15579: GO 15583
// exit ;
15581: GO 16151
// if IsInUnit ( speaker [ 1 ] ) then
15583: LD_VAR 0 3
15587: PUSH
15588: LD_INT 1
15590: ARRAY
15591: PPUSH
15592: CALL_OW 310
15596: IFFALSE 15619
// place := IsInUnit ( speaker [ 1 ] ) else
15598: LD_ADDR_VAR 0 4
15602: PUSH
15603: LD_VAR 0 3
15607: PUSH
15608: LD_INT 1
15610: ARRAY
15611: PPUSH
15612: CALL_OW 310
15616: ST_TO_ADDR
15617: GO 15633
// place := speaker [ 1 ] ;
15619: LD_ADDR_VAR 0 4
15623: PUSH
15624: LD_VAR 0 3
15628: PUSH
15629: LD_INT 1
15631: ARRAY
15632: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15633: LD_VAR 0 4
15637: PPUSH
15638: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15642: LD_VAR 0 4
15646: PPUSH
15647: CALL_OW 250
15651: PPUSH
15652: LD_VAR 0 4
15656: PPUSH
15657: CALL_OW 251
15661: PPUSH
15662: CALL 2131 0 2
// wait ( 0 0$2 ) ;
15666: LD_INT 70
15668: PPUSH
15669: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15673: LD_EXP 38
15677: PPUSH
15678: CALL_OW 305
15682: NOT
15683: IFFALSE 15687
// exit ;
15685: GO 16151
// allowConvoys := false ;
15687: LD_ADDR_EXP 12
15691: PUSH
15692: LD_INT 0
15694: ST_TO_ADDR
// InGameOn ;
15695: CALL_OW 8
// wait ( 0 0$1 ) ;
15699: LD_INT 35
15701: PPUSH
15702: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15706: LD_EXP 38
15710: PPUSH
15711: LD_STRING DI-1-land
15713: PPUSH
15714: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15718: LD_VAR 0 3
15722: PUSH
15723: LD_INT 1
15725: ARRAY
15726: PPUSH
15727: CALL_OW 310
15731: IFFALSE 15746
// ComExit ( speaker [ 1 ] ) ;
15733: LD_VAR 0 3
15737: PUSH
15738: LD_INT 1
15740: ARRAY
15741: PPUSH
15742: CALL 72704 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 1
15753: ARRAY
15754: PPUSH
15755: LD_EXP 38
15759: PPUSH
15760: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 1
15771: ARRAY
15772: PPUSH
15773: LD_EXP 38
15777: PPUSH
15778: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15782: LD_EXP 38
15786: PPUSH
15787: LD_VAR 0 3
15791: PUSH
15792: LD_INT 1
15794: ARRAY
15795: PPUSH
15796: CALL_OW 119
// wait ( 0 0$1 ) ;
15800: LD_INT 35
15802: PPUSH
15803: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15807: LD_VAR 0 3
15811: PUSH
15812: LD_INT 1
15814: ARRAY
15815: PPUSH
15816: LD_VAR 0 3
15820: PUSH
15821: LD_INT 2
15823: ARRAY
15824: PUSH
15825: LD_STRING -1-land
15827: STR
15828: PPUSH
15829: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15833: LD_EXP 38
15837: PPUSH
15838: LD_STRING DI-2-land
15840: PPUSH
15841: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15845: LD_VAR 0 3
15849: PUSH
15850: LD_INT 1
15852: ARRAY
15853: PPUSH
15854: LD_VAR 0 3
15858: PUSH
15859: LD_INT 2
15861: ARRAY
15862: PUSH
15863: LD_STRING -2-land
15865: STR
15866: PPUSH
15867: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
15871: LD_VAR 0 3
15875: PUSH
15876: LD_INT 1
15878: ARRAY
15879: PPUSH
15880: LD_VAR 0 3
15884: PUSH
15885: LD_INT 2
15887: ARRAY
15888: PUSH
15889: LD_STRING -3-land
15891: STR
15892: PPUSH
15893: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
15897: LD_EXP 28
15901: PPUSH
15902: LD_STRING DH-1-land
15904: PPUSH
15905: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
15909: LD_VAR 0 5
15913: PPUSH
15914: CALL_OW 313
15918: PUSH
15919: LD_INT 6
15921: EQUAL
15922: IFFALSE 15942
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
15924: LD_VAR 0 5
15928: PPUSH
15929: CALL_OW 313
15933: PUSH
15934: LD_INT 1
15936: ARRAY
15937: PPUSH
15938: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
15942: LD_EXP 38
15946: PPUSH
15947: LD_INT 2
15949: PPUSH
15950: CALL_OW 235
// CenterOnUnits ( depot ) ;
15954: LD_VAR 0 5
15958: PPUSH
15959: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
15963: LD_EXP 38
15967: PPUSH
15968: LD_VAR 0 5
15972: PPUSH
15973: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
15977: LD_VAR 0 3
15981: PUSH
15982: LD_INT 1
15984: ARRAY
15985: PPUSH
15986: LD_VAR 0 5
15990: PPUSH
15991: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15995: LD_INT 35
15997: PPUSH
15998: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16002: LD_EXP 38
16006: PPUSH
16007: CALL_OW 310
16011: PUSH
16012: LD_EXP 38
16016: PPUSH
16017: CALL_OW 302
16021: NOT
16022: OR
16023: PUSH
16024: LD_VAR 0 5
16028: PPUSH
16029: CALL_OW 302
16033: NOT
16034: OR
16035: IFFALSE 15995
// InGameOff ;
16037: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16041: LD_EXP 38
16045: PPUSH
16046: CALL_OW 302
16050: NOT
16051: IFFALSE 16055
// exit ;
16053: GO 16151
// if not IsOk ( depot ) then
16055: LD_VAR 0 5
16059: PPUSH
16060: CALL_OW 302
16064: NOT
16065: IFFALSE 16128
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16067: LD_EXP 38
16071: PPUSH
16072: LD_INT 30
16074: PPUSH
16075: LD_INT 1
16077: PPUSH
16078: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16082: LD_INT 35
16084: PPUSH
16085: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16089: LD_EXP 38
16093: PPUSH
16094: LD_INT 30
16096: PPUSH
16097: LD_INT 1
16099: PPUSH
16100: CALL_OW 307
16104: PUSH
16105: LD_EXP 38
16109: PPUSH
16110: CALL_OW 301
16114: OR
16115: IFFALSE 16082
// RemoveUnit ( Ibrahim ) ;
16117: LD_EXP 38
16121: PPUSH
16122: CALL_OW 64
// exit ;
16126: GO 16151
// end ; ibrahimInDepot := true ;
16128: LD_ADDR_EXP 25
16132: PUSH
16133: LD_INT 1
16135: ST_TO_ADDR
// allowConvoys := true ;
16136: LD_ADDR_EXP 12
16140: PUSH
16141: LD_INT 1
16143: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16144: LD_STRING IbrahimInDepot
16146: PPUSH
16147: CALL_OW 97
// end ;
16151: PPOPN 5
16153: END
// export function IbrahimQuery ; begin
16154: LD_INT 0
16156: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16157: LD_STRING IbrahimQuery
16159: PPUSH
16160: CALL_OW 97
16164: PUSH
16165: LD_INT 1
16167: DOUBLE
16168: EQUAL
16169: IFTRUE 16173
16171: GO 16449
16173: POP
// begin allowConvoys := false ;
16174: LD_ADDR_EXP 12
16178: PUSH
16179: LD_INT 0
16181: ST_TO_ADDR
// ibrahimInDepot := false ;
16182: LD_ADDR_EXP 25
16186: PUSH
16187: LD_INT 0
16189: ST_TO_ADDR
// InGameOn ;
16190: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16194: LD_EXP 28
16198: PPUSH
16199: CALL_OW 87
// wait ( 0 0$1 ) ;
16203: LD_INT 35
16205: PPUSH
16206: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16210: LD_EXP 28
16214: PPUSH
16215: LD_STRING DH-1-interrogation
16217: PPUSH
16218: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16222: LD_EXP 38
16226: PPUSH
16227: LD_STRING DI-1-interrogation
16229: PPUSH
16230: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16234: LD_EXP 28
16238: PPUSH
16239: LD_STRING DH-2-interrogation
16241: PPUSH
16242: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16246: LD_EXP 38
16250: PPUSH
16251: LD_STRING DI-2-interrogation
16253: PPUSH
16254: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16258: LD_EXP 28
16262: PPUSH
16263: LD_STRING DH-3-interrogation
16265: PPUSH
16266: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16270: LD_EXP 38
16274: PPUSH
16275: LD_STRING DI-3-interrogation
16277: PPUSH
16278: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16282: LD_EXP 28
16286: PPUSH
16287: LD_STRING DH-4-interrogation
16289: PPUSH
16290: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16294: LD_EXP 38
16298: PPUSH
16299: LD_STRING DI-4-interrogation
16301: PPUSH
16302: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16306: LD_EXP 28
16310: PPUSH
16311: LD_STRING DH-5-interrogation
16313: PPUSH
16314: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16318: LD_EXP 38
16322: PPUSH
16323: LD_STRING DI-5-interrogation
16325: PPUSH
16326: CALL_OW 88
// wait ( 0 0$1 ) ;
16330: LD_INT 35
16332: PPUSH
16333: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16337: LD_STRING IbrahimDecisionQuery
16339: PPUSH
16340: CALL_OW 97
16344: PUSH
16345: LD_INT 1
16347: DOUBLE
16348: EQUAL
16349: IFTRUE 16353
16351: GO 16377
16353: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16354: LD_EXP 38
16358: PPUSH
16359: LD_STRING DI-1-kill
16361: PPUSH
16362: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16366: LD_EXP 38
16370: PPUSH
16371: CALL_OW 66
// end ; 2 :
16375: GO 16443
16377: LD_INT 2
16379: DOUBLE
16380: EQUAL
16381: IFTRUE 16385
16383: GO 16442
16385: POP
// begin SetSide ( Ibrahim , 6 ) ;
16386: LD_EXP 38
16390: PPUSH
16391: LD_INT 6
16393: PPUSH
16394: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16398: LD_EXP 38
16402: PPUSH
16403: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16407: LD_EXP 38
16411: PPUSH
16412: LD_INT 66
16414: PPUSH
16415: LD_INT 2
16417: PPUSH
16418: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16422: LD_EXP 38
16426: PPUSH
16427: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16431: LD_EXP 28
16435: PPUSH
16436: CALL_OW 122
// end ; end ;
16440: GO 16443
16442: POP
// InGameOff ;
16443: CALL_OW 9
// end ; 2 :
16447: GO 16463
16449: LD_INT 2
16451: DOUBLE
16452: EQUAL
16453: IFTRUE 16457
16455: GO 16462
16457: POP
// exit ; end ;
16458: GO 16501
16460: GO 16463
16462: POP
// allowConvoys := true ;
16463: LD_ADDR_EXP 12
16467: PUSH
16468: LD_INT 1
16470: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16471: LD_INT 5250
16473: PPUSH
16474: CALL_OW 67
// ComMoveXY ( Ibrahim , 38 , 28 ) ;
16478: LD_EXP 38
16482: PPUSH
16483: LD_INT 38
16485: PPUSH
16486: LD_INT 28
16488: PPUSH
16489: CALL_OW 111
// ibrahimIsFree := true ;
16493: LD_ADDR_EXP 26
16497: PUSH
16498: LD_INT 1
16500: ST_TO_ADDR
// end ;
16501: LD_VAR 0 1
16505: RET
// every 0 0$1 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass , b , p , depot , x , y ;
16506: LD_EXP 26
16510: PUSH
16511: LD_EXP 38
16515: PPUSH
16516: CALL_OW 302
16520: AND
16521: PUSH
16522: LD_INT 6
16524: PPUSH
16525: LD_EXP 28
16529: PPUSH
16530: CALL_OW 292
16534: AND
16535: PUSH
16536: LD_INT 22
16538: PUSH
16539: LD_INT 4
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PPUSH
16546: CALL_OW 69
16550: NOT
16551: AND
16552: PUSH
16553: LD_INT 22
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 21
16565: PUSH
16566: LD_INT 1
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PPUSH
16577: CALL_OW 69
16581: NOT
16582: AND
16583: IFFALSE 17343
16585: GO 16587
16587: DISABLE
16588: LD_INT 0
16590: PPUSH
16591: PPUSH
16592: PPUSH
16593: PPUSH
16594: PPUSH
16595: PPUSH
// begin allowConvoys := false ;
16596: LD_ADDR_EXP 12
16600: PUSH
16601: LD_INT 0
16603: ST_TO_ADDR
// depot := usDepot ;
16604: LD_ADDR_VAR 0 4
16608: PUSH
16609: LD_INT 11
16611: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16612: LD_INT 11
16614: NOT
16615: PUSH
16616: LD_INT 22
16618: PUSH
16619: LD_INT 2
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 50
16628: PUSH
16629: EMPTY
16630: LIST
16631: PUSH
16632: LD_INT 30
16634: PUSH
16635: LD_INT 0
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 69
16651: AND
16652: IFFALSE 16699
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16654: LD_ADDR_VAR 0 4
16658: PUSH
16659: LD_INT 22
16661: PUSH
16662: LD_INT 2
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 50
16671: PUSH
16672: EMPTY
16673: LIST
16674: PUSH
16675: LD_INT 30
16677: PUSH
16678: LD_INT 0
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: PPUSH
16690: CALL_OW 69
16694: PUSH
16695: LD_INT 1
16697: ARRAY
16698: ST_TO_ADDR
// InGameOn ;
16699: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16703: LD_EXP 38
16707: PPUSH
16708: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16712: LD_EXP 28
16716: PPUSH
16717: LD_EXP 38
16721: PPUSH
16722: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16726: LD_EXP 38
16730: PPUSH
16731: LD_EXP 28
16735: PPUSH
16736: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16740: LD_EXP 38
16744: PPUSH
16745: LD_STRING DI-1-free
16747: PPUSH
16748: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16752: LD_EXP 28
16756: PPUSH
16757: LD_STRING DH-1-free
16759: PPUSH
16760: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16764: LD_EXP 38
16768: PPUSH
16769: LD_STRING DI-2-free
16771: PPUSH
16772: CALL_OW 88
// changeClass := 0 ;
16776: LD_ADDR_VAR 0 1
16780: PUSH
16781: LD_INT 0
16783: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16784: LD_STRING IbrahimJoinQuery
16786: PPUSH
16787: CALL_OW 97
16791: PUSH
16792: LD_INT 1
16794: DOUBLE
16795: EQUAL
16796: IFTRUE 16800
16798: GO 16811
16800: POP
// begin changeClass := 1 ;
16801: LD_ADDR_VAR 0 1
16805: PUSH
16806: LD_INT 1
16808: ST_TO_ADDR
// end ; 2 :
16809: GO 17051
16811: LD_INT 2
16813: DOUBLE
16814: EQUAL
16815: IFTRUE 16819
16817: GO 16971
16819: POP
// begin Say ( Heike , DH-1-decline ) ;
16820: LD_EXP 28
16824: PPUSH
16825: LD_STRING DH-1-decline
16827: PPUSH
16828: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16832: LD_EXP 38
16836: PPUSH
16837: LD_STRING DI-1-decline
16839: PPUSH
16840: CALL_OW 88
// InGameOff ;
16844: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16848: LD_EXP 38
16852: PPUSH
16853: LD_INT 30
16855: PPUSH
16856: LD_INT 1
16858: PPUSH
16859: CALL_OW 111
// p := 0 ;
16863: LD_ADDR_VAR 0 3
16867: PUSH
16868: LD_INT 0
16870: ST_TO_ADDR
// repeat p := p + 1 ;
16871: LD_ADDR_VAR 0 3
16875: PUSH
16876: LD_VAR 0 3
16880: PUSH
16881: LD_INT 1
16883: PLUS
16884: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16885: LD_INT 35
16887: PPUSH
16888: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
16892: LD_EXP 38
16896: PPUSH
16897: LD_INT 30
16899: PPUSH
16900: LD_INT 1
16902: PPUSH
16903: CALL_OW 307
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_INT 2
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 101
16920: PUSH
16921: LD_INT 6
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PPUSH
16932: CALL_OW 69
16936: NOT
16937: OR
16938: PUSH
16939: LD_VAR 0 3
16943: PUSH
16944: LD_INT 10
16946: GREATER
16947: OR
16948: IFFALSE 16871
// RemoveUnit ( Ibrahim ) ;
16950: LD_EXP 38
16954: PPUSH
16955: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
16959: LD_INT 1
16961: PPUSH
16962: LD_STRING 03_IbrahimHasEscaped
16964: PPUSH
16965: CALL_OW 39
// end ; 3 :
16969: GO 17051
16971: LD_INT 3
16973: DOUBLE
16974: EQUAL
16975: IFTRUE 16979
16977: GO 17050
16979: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
16980: LD_EXP 28
16984: PPUSH
16985: LD_STRING DH-1-radio-hq
16987: PPUSH
16988: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
16992: LD_EXP 37
16996: PPUSH
16997: LD_STRING DO-1-radio-hq
16999: PPUSH
17000: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17004: LD_EXP 28
17008: PPUSH
17009: LD_STRING DH-2-radio-hq
17011: PPUSH
17012: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17016: LD_EXP 37
17020: PPUSH
17021: LD_STRING DO-2-radio-hq
17023: PPUSH
17024: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17028: LD_EXP 28
17032: PPUSH
17033: LD_STRING DH-3-radio-hq
17035: PPUSH
17036: CALL_OW 88
// changeClass := 1 ;
17040: LD_ADDR_VAR 0 1
17044: PUSH
17045: LD_INT 1
17047: ST_TO_ADDR
// end ; end ;
17048: GO 17051
17050: POP
// if changeClass then
17051: LD_VAR 0 1
17055: IFFALSE 17343
// begin Say ( Heike , DH-1-agree ) ;
17057: LD_EXP 28
17061: PPUSH
17062: LD_STRING DH-1-agree
17064: PPUSH
17065: CALL_OW 88
// if IsOk ( Givi ) then
17069: LD_EXP 29
17073: PPUSH
17074: CALL_OW 302
17078: IFFALSE 17116
// begin Say ( Givi , DG-1-agree ) ;
17080: LD_EXP 29
17084: PPUSH
17085: LD_STRING DG-1-agree
17087: PPUSH
17088: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17092: LD_EXP 28
17096: PPUSH
17097: LD_STRING DH-2-agree
17099: PPUSH
17100: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17104: LD_EXP 29
17108: PPUSH
17109: LD_STRING DG-2-agree
17111: PPUSH
17112: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17116: LD_VAR 0 4
17120: PPUSH
17121: CALL_OW 313
17125: PUSH
17126: LD_INT 6
17128: EQUAL
17129: IFFALSE 17149
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17131: LD_VAR 0 4
17135: PPUSH
17136: CALL_OW 313
17140: PUSH
17141: LD_INT 1
17143: ARRAY
17144: PPUSH
17145: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17149: LD_EXP 38
17153: PPUSH
17154: LD_INT 2
17156: PPUSH
17157: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17161: LD_ADDR_VAR 0 5
17165: PUSH
17166: LD_EXP 38
17170: PPUSH
17171: CALL_OW 250
17175: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17176: LD_ADDR_VAR 0 6
17180: PUSH
17181: LD_EXP 38
17185: PPUSH
17186: CALL_OW 251
17190: ST_TO_ADDR
// if depot then
17191: LD_VAR 0 4
17195: IFFALSE 17244
// begin ComEnterUnit ( Ibrahim , depot ) ;
17197: LD_EXP 38
17201: PPUSH
17202: LD_VAR 0 4
17206: PPUSH
17207: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17211: LD_INT 35
17213: PPUSH
17214: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17218: LD_EXP 38
17222: PPUSH
17223: CALL_OW 310
17227: IFFALSE 17211
// b := IsInUnit ( Ibrahim ) ;
17229: LD_ADDR_VAR 0 2
17233: PUSH
17234: LD_EXP 38
17238: PPUSH
17239: CALL_OW 310
17243: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17244: LD_EXP 38
17248: PPUSH
17249: CALL_OW 64
// uc_side := 2 ;
17253: LD_ADDR_OWVAR 20
17257: PUSH
17258: LD_INT 2
17260: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17261: LD_ADDR_EXP 38
17265: PUSH
17266: LD_STRING Ibrahim
17268: PPUSH
17269: LD_INT 0
17271: PPUSH
17272: LD_STRING 
17274: PPUSH
17275: CALL 36327 0 3
17279: ST_TO_ADDR
// if depot then
17280: LD_VAR 0 4
17284: IFFALSE 17302
// PlaceHumanInUnit ( Ibrahim , b ) else
17286: LD_EXP 38
17290: PPUSH
17291: LD_VAR 0 2
17295: PPUSH
17296: CALL_OW 52
17300: GO 17324
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17302: LD_EXP 38
17306: PPUSH
17307: LD_VAR 0 5
17311: PPUSH
17312: LD_VAR 0 6
17316: PPUSH
17317: LD_INT 0
17319: PPUSH
17320: CALL_OW 48
// InGameOff ;
17324: CALL_OW 9
// allowConvoys := true ;
17328: LD_ADDR_EXP 12
17332: PUSH
17333: LD_INT 1
17335: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17336: LD_STRING ACH_IBRAHIM
17338: PPUSH
17339: CALL_OW 543
// end ; end ;
17343: PPOPN 6
17345: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17346: LD_EXP 33
17350: PPUSH
17351: CALL_OW 256
17355: PUSH
17356: LD_INT 3
17358: LESS
17359: IFFALSE 17426
17361: GO 17363
17363: DISABLE
// begin DialogueOn ;
17364: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17368: LD_EXP 33
17372: PPUSH
17373: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17377: LD_EXP 33
17381: PPUSH
17382: LD_STRING DK-keydeath-1
17384: PPUSH
17385: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17389: LD_EXP 28
17393: PPUSH
17394: LD_STRING DH-keydeath-2
17396: PPUSH
17397: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17401: LD_EXP 28
17405: PPUSH
17406: LD_STRING DH-keydeath-3
17408: PPUSH
17409: CALL_OW 88
// DialogueOff ;
17413: CALL_OW 7
// KillUnit ( Kaia ) ;
17417: LD_EXP 33
17421: PPUSH
17422: CALL_OW 66
// end ;
17426: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 do
17427: LD_EXP 11
17431: PUSH
17432: LD_EXP 21
17436: PUSH
17437: LD_INT 1
17439: LESS
17440: AND
17441: PUSH
17442: LD_INT 22
17444: PUSH
17445: LD_INT 1
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 25
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PPUSH
17466: CALL_OW 69
17470: PUSH
17471: LD_INT 0
17473: EQUAL
17474: AND
17475: IFFALSE 17866
17477: GO 17479
17479: DISABLE
// begin DialogueOn ;
17480: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17484: LD_EXP 28
17488: PPUSH
17489: LD_STRING DH-1-final
17491: PPUSH
17492: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17496: LD_OWVAR 1
17500: PUSH
17501: LD_INT 126000
17503: PUSH
17504: LD_INT 115500
17506: PUSH
17507: LD_INT 105000
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: PUSH
17515: LD_OWVAR 67
17519: ARRAY
17520: LESSEQUAL
17521: IFFALSE 17535
// AddMedal ( med1 , 1 ) else
17523: LD_STRING med1
17525: PPUSH
17526: LD_INT 1
17528: PPUSH
17529: CALL_OW 101
17533: GO 17546
// AddMedal ( med1 , - 1 ) ;
17535: LD_STRING med1
17537: PPUSH
17538: LD_INT 1
17540: NEG
17541: PPUSH
17542: CALL_OW 101
// if vehCounter >= 2 then
17546: LD_EXP 22
17550: PUSH
17551: LD_INT 2
17553: GREATEREQUAL
17554: IFFALSE 17568
// AddMedal ( med2 , 1 ) else
17556: LD_STRING med2
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 101
17566: GO 17579
// AddMedal ( med2 , - 1 ) ;
17568: LD_STRING med2
17570: PPUSH
17571: LD_INT 1
17573: NEG
17574: PPUSH
17575: CALL_OW 101
// if deadCounter = 0 then
17579: LD_EXP 9
17583: PUSH
17584: LD_INT 0
17586: EQUAL
17587: IFFALSE 17601
// AddMedal ( med3 , 1 ) else
17589: LD_STRING med3
17591: PPUSH
17592: LD_INT 1
17594: PPUSH
17595: CALL_OW 101
17599: GO 17612
// AddMedal ( med3 , - 1 ) ;
17601: LD_STRING med3
17603: PPUSH
17604: LD_INT 1
17606: NEG
17607: PPUSH
17608: CALL_OW 101
// GiveMedals ( MAIN ) ;
17612: LD_STRING MAIN
17614: PPUSH
17615: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17619: LD_INT 22
17621: PUSH
17622: LD_INT 2
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 23
17631: PUSH
17632: LD_INT 2
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 21
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: PPUSH
17654: CALL_OW 69
17658: PPUSH
17659: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17663: LD_EXP 28
17667: PPUSH
17668: LD_STRING 03_Heike
17670: PPUSH
17671: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17675: LD_EXP 32
17679: PPUSH
17680: LD_STRING 03_Aviradze
17682: PPUSH
17683: CALL_OW 38
// if Givi then
17687: LD_EXP 29
17691: IFFALSE 17705
// SaveCharacters ( Givi , 03_Givi ) ;
17693: LD_EXP 29
17697: PPUSH
17698: LD_STRING 03_Givi
17700: PPUSH
17701: CALL_OW 38
// if Mike then
17705: LD_EXP 30
17709: IFFALSE 17723
// SaveCharacters ( Mike , 03_Mike ) ;
17711: LD_EXP 30
17715: PPUSH
17716: LD_STRING 03_Mike
17718: PPUSH
17719: CALL_OW 38
// if Kamil then
17723: LD_EXP 31
17727: IFFALSE 17741
// SaveCharacters ( Kamil , 03_Kamil ) ;
17729: LD_EXP 31
17733: PPUSH
17734: LD_STRING 03_Kamil
17736: PPUSH
17737: CALL_OW 38
// if Kaia then
17741: LD_EXP 33
17745: IFFALSE 17759
// SaveCharacters ( Kaia , 03_Kaia ) ;
17747: LD_EXP 33
17751: PPUSH
17752: LD_STRING 03_Kaia
17754: PPUSH
17755: CALL_OW 38
// if Sophia then
17759: LD_EXP 34
17763: IFFALSE 17777
// SaveCharacters ( Sophia , 03_Sophia ) ;
17765: LD_EXP 34
17769: PPUSH
17770: LD_STRING 03_Sophia
17772: PPUSH
17773: CALL_OW 38
// if Markov then
17777: LD_EXP 35
17781: IFFALSE 17795
// SaveCharacters ( Markov , 03_Markov ) ;
17783: LD_EXP 35
17787: PPUSH
17788: LD_STRING 03_Markov
17790: PPUSH
17791: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17795: LD_EXP 38
17799: PUSH
17800: LD_EXP 38
17804: PPUSH
17805: CALL_OW 255
17809: PUSH
17810: LD_INT 2
17812: EQUAL
17813: AND
17814: IFFALSE 17828
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
17816: LD_EXP 38
17820: PPUSH
17821: LD_STRING 03_Ibrahim
17823: PPUSH
17824: CALL_OW 38
// if heikeSecondSquad then
17828: LD_EXP 42
17832: IFFALSE 17846
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17834: LD_EXP 42
17838: PPUSH
17839: LD_STRING 03_others
17841: PPUSH
17842: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
17846: LD_EXP 9
17850: PPUSH
17851: LD_STRING 03_DeadCounter
17853: PPUSH
17854: CALL_OW 39
// YouWin ;
17858: CALL_OW 103
// DialogueOff ;
17862: CALL_OW 7
// end ; end_of_file
17866: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17867: LD_VAR 0 1
17871: PUSH
17872: LD_EXP 28
17876: EQUAL
17877: IFFALSE 17886
// YouLost ( Heike ) ;
17879: LD_STRING Heike
17881: PPUSH
17882: CALL_OW 104
// if un = Aviradze then
17886: LD_VAR 0 1
17890: PUSH
17891: LD_EXP 32
17895: EQUAL
17896: IFFALSE 17905
// YouLost ( Aviradze ) ;
17898: LD_STRING Aviradze
17900: PPUSH
17901: CALL_OW 104
// if un = usDepot and not retreatAllowed then
17905: LD_VAR 0 1
17909: PUSH
17910: LD_INT 11
17912: EQUAL
17913: PUSH
17914: LD_EXP 11
17918: NOT
17919: AND
17920: IFFALSE 17929
// YouLost ( Depot ) ;
17922: LD_STRING Depot
17924: PPUSH
17925: CALL_OW 104
// if un = arDepot then
17929: LD_VAR 0 1
17933: PUSH
17934: LD_INT 5
17936: EQUAL
17937: IFFALSE 17946
// YouLost ( FarmerDepot ) ;
17939: LD_STRING FarmerDepot
17941: PPUSH
17942: CALL_OW 104
// if un = Farmer then
17946: LD_VAR 0 1
17950: PUSH
17951: LD_EXP 36
17955: EQUAL
17956: IFFALSE 17965
// YouLost ( Farmer ) ;
17958: LD_STRING Farmer
17960: PPUSH
17961: CALL_OW 104
// if un in usForces then
17965: LD_VAR 0 1
17969: PUSH
17970: LD_EXP 44
17974: IN
17975: IFFALSE 17993
// usForces := usForces diff un ;
17977: LD_ADDR_EXP 44
17981: PUSH
17982: LD_EXP 44
17986: PUSH
17987: LD_VAR 0 1
17991: DIFF
17992: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17993: LD_VAR 0 1
17997: PUSH
17998: LD_INT 22
18000: PUSH
18001: LD_INT 2
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 23
18010: PUSH
18011: LD_INT 2
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 21
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: LIST
18032: PPUSH
18033: CALL_OW 69
18037: IN
18038: IFFALSE 18054
// deadCounter := deadCounter + 1 ;
18040: LD_ADDR_EXP 9
18044: PUSH
18045: LD_EXP 9
18049: PUSH
18050: LD_INT 1
18052: PLUS
18053: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18054: LD_VAR 0 1
18058: PUSH
18059: LD_INT 22
18061: PUSH
18062: LD_INT 4
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 34
18071: PUSH
18072: LD_INT 12
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PPUSH
18083: CALL_OW 69
18087: IN
18088: PUSH
18089: LD_EXP 18
18093: NOT
18094: AND
18095: IFFALSE 18105
// firstConvoyDestroyed := true ;
18097: LD_ADDR_EXP 18
18101: PUSH
18102: LD_INT 1
18104: ST_TO_ADDR
// if un in usAttackers then
18105: LD_VAR 0 1
18109: PUSH
18110: LD_EXP 47
18114: IN
18115: IFFALSE 18133
// usAttackers := usAttackers diff un ;
18117: LD_ADDR_EXP 47
18121: PUSH
18122: LD_EXP 47
18126: PUSH
18127: LD_VAR 0 1
18131: DIFF
18132: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18133: LD_VAR 0 1
18137: PUSH
18138: LD_INT 22
18140: PUSH
18141: LD_INT 5
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 21
18150: PUSH
18151: LD_INT 1
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PPUSH
18162: CALL_OW 69
18166: IN
18167: IFFALSE 18183
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18169: LD_ADDR_EXP 20
18173: PUSH
18174: LD_EXP 20
18178: PUSH
18179: LD_INT 1
18181: PLUS
18182: ST_TO_ADDR
// end ;
18183: PPOPN 1
18185: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18186: LD_VAR 0 2
18190: PUSH
18191: LD_EXP 38
18195: EQUAL
18196: PUSH
18197: LD_EXP 25
18201: AND
18202: IFFALSE 18348
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18204: LD_INT 22
18206: PUSH
18207: LD_INT 2
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 30
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 50
18226: PUSH
18227: EMPTY
18228: LIST
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: LIST
18234: PPUSH
18235: CALL_OW 69
18239: IFFALSE 18281
// begin InGameOn ;
18241: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18245: LD_EXP 38
18249: PPUSH
18250: LD_INT 11
18252: PPUSH
18253: CALL_OW 120
// repeat wait ( 3 ) ;
18257: LD_INT 3
18259: PPUSH
18260: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18264: LD_EXP 38
18268: PPUSH
18269: CALL_OW 310
18273: IFFALSE 18257
// InGameOff ;
18275: CALL_OW 9
// end else
18279: GO 18348
// begin ibrahimInDepot := false ;
18281: LD_ADDR_EXP 25
18285: PUSH
18286: LD_INT 0
18288: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18289: LD_EXP 38
18293: PPUSH
18294: LD_INT 30
18296: PPUSH
18297: LD_INT 1
18299: PPUSH
18300: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18304: LD_INT 35
18306: PPUSH
18307: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18311: LD_EXP 38
18315: PPUSH
18316: LD_INT 30
18318: PPUSH
18319: LD_INT 1
18321: PPUSH
18322: CALL_OW 307
18326: PUSH
18327: LD_EXP 38
18331: PPUSH
18332: CALL_OW 301
18336: OR
18337: IFFALSE 18304
// RemoveUnit ( Ibrahim ) ;
18339: LD_EXP 38
18343: PPUSH
18344: CALL_OW 64
// end ; end ; end ;
18348: PPOPN 2
18350: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18351: LD_VAR 0 2
18355: PUSH
18356: LD_EXP 28
18360: EQUAL
18361: PUSH
18362: LD_VAR 0 1
18366: PUSH
18367: LD_INT 11
18369: EQUAL
18370: AND
18371: PUSH
18372: LD_EXP 25
18376: AND
18377: IFFALSE 18383
// IbrahimQuery ;
18379: CALL 16154 0 0
// end ;
18383: PPOPN 2
18385: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18386: LD_VAR 0 1
18390: PPUSH
18391: CALL_OW 141
// if oldId in usAttackers then
18395: LD_VAR 0 2
18399: PUSH
18400: LD_EXP 47
18404: IN
18405: IFFALSE 18423
// usAttackers := usAttackers diff oldId ;
18407: LD_ADDR_EXP 47
18411: PUSH
18412: LD_EXP 47
18416: PUSH
18417: LD_VAR 0 2
18421: DIFF
18422: ST_TO_ADDR
// if newId in usAttackers then
18423: LD_VAR 0 1
18427: PUSH
18428: LD_EXP 47
18432: IN
18433: IFFALSE 18451
// usAttackers := usAttackers diff newId ;
18435: LD_ADDR_EXP 47
18439: PUSH
18440: LD_EXP 47
18444: PUSH
18445: LD_VAR 0 1
18449: DIFF
18450: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18451: LD_VAR 0 3
18455: PUSH
18456: LD_INT 4
18458: EQUAL
18459: PUSH
18460: LD_EXP 18
18464: NOT
18465: AND
18466: IFFALSE 18476
// firstConvoyDestroyed := true ;
18468: LD_ADDR_EXP 18
18472: PUSH
18473: LD_INT 1
18475: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18476: LD_VAR 0 1
18480: PPUSH
18481: CALL_OW 264
18485: PUSH
18486: LD_INT 12
18488: EQUAL
18489: IFFALSE 18527
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18491: LD_ADDR_EXP 13
18495: PUSH
18496: LD_EXP 13
18500: PUSH
18501: LD_INT 1
18503: PLUS
18504: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18505: LD_VAR 0 1
18509: PPUSH
18510: LD_INT 1
18512: PPUSH
18513: CALL_OW 289
18517: PUSH
18518: LD_INT 0
18520: EQUAL
18521: IFFALSE 18527
// EmptyCargoDialog ;
18523: CALL 14792 0 0
// end ; end ;
18527: PPOPN 4
18529: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18530: LD_VAR 0 1
18534: PUSH
18535: LD_INT 2
18537: EQUAL
18538: PUSH
18539: LD_VAR 0 2
18543: PUSH
18544: LD_INT 5
18546: EQUAL
18547: AND
18548: IFFALSE 18557
// YouLost ( Attack ) ;
18550: LD_STRING Attack
18552: PPUSH
18553: CALL_OW 104
// end ;
18557: PPOPN 2
18559: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18560: LD_VAR 0 1
18564: PPUSH
18565: CALL_OW 255
18569: PUSH
18570: LD_INT 1
18572: EQUAL
18573: PUSH
18574: LD_EXP 6
18578: NOT
18579: AND
18580: IFFALSE 18714
// begin if GetBType ( b ) = b_lab then
18582: LD_VAR 0 1
18586: PPUSH
18587: CALL_OW 266
18591: PUSH
18592: LD_INT 6
18594: EQUAL
18595: IFFALSE 18635
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18597: LD_EXP 44
18601: PPUSH
18602: LD_INT 25
18604: PUSH
18605: LD_INT 4
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PPUSH
18612: CALL_OW 72
18616: PPUSH
18617: LD_VAR 0 1
18621: PPUSH
18622: CALL_OW 120
// AmLabResearch ( b ) ;
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL 5139 0 1
// end ; if GetBType ( b ) = b_armoury then
18635: LD_VAR 0 1
18639: PPUSH
18640: CALL_OW 266
18644: PUSH
18645: LD_INT 4
18647: EQUAL
18648: IFFALSE 18696
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18650: LD_EXP 44
18654: PPUSH
18655: LD_INT 25
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 3
18667: PUSH
18668: LD_INT 54
18670: PUSH
18671: EMPTY
18672: LIST
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PPUSH
18682: CALL_OW 72
18686: PPUSH
18687: LD_VAR 0 1
18691: PPUSH
18692: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18696: LD_ADDR_EXP 46
18700: PUSH
18701: LD_EXP 46
18705: PPUSH
18706: LD_INT 1
18708: PPUSH
18709: CALL_OW 3
18713: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
18714: LD_VAR 0 1
18718: PPUSH
18719: CALL_OW 255
18723: PUSH
18724: LD_INT 5
18726: EQUAL
18727: IFFALSE 18741
// SetBLevel ( b , 5 ) ;
18729: LD_VAR 0 1
18733: PPUSH
18734: LD_INT 5
18736: PPUSH
18737: CALL_OW 241
// end ;
18741: PPOPN 1
18743: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18744: LD_VAR 0 1
18748: PPUSH
18749: CALL_OW 255
18753: PUSH
18754: LD_INT 2
18756: EQUAL
18757: IFFALSE 18773
// vehCounter := vehCounter + 1 ;
18759: LD_ADDR_EXP 22
18763: PUSH
18764: LD_EXP 22
18768: PUSH
18769: LD_INT 1
18771: PLUS
18772: ST_TO_ADDR
// end ;
18773: PPOPN 2
18775: END
// on SailEvent ( event ) do begin if event = eventAttack then
18776: LD_VAR 0 1
18780: PUSH
18781: LD_EXP 24
18785: EQUAL
18786: IFFALSE 18792
// AmericanAttack ;
18788: CALL 6587 0 0
// end ; end_of_file
18792: PPOPN 1
18794: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 ] [ Difficulty ] do
18795: LD_OWVAR 1
18799: PUSH
18800: LD_INT 10500
18802: PUSH
18803: LD_INT 9800
18805: PUSH
18806: LD_INT 9450
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: PUSH
18814: LD_OWVAR 67
18818: ARRAY
18819: LESSEQUAL
18820: IFFALSE 18847
18822: GO 18824
18824: DISABLE
// begin enable ;
18825: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18826: LD_INT 1
18828: PPUSH
18829: LD_INT 5
18831: PPUSH
18832: CALL_OW 12
18836: PPUSH
18837: LD_INT 9
18839: PPUSH
18840: LD_INT 1
18842: PPUSH
18843: CALL_OW 55
// end ;
18847: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 ] [ Difficulty ] do
18848: LD_EXP 6
18852: PUSH
18853: LD_OWVAR 1
18857: PUSH
18858: LD_INT 56700
18860: PUSH
18861: LD_INT 55650
18863: PUSH
18864: LD_INT 54600
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: PUSH
18872: LD_OWVAR 67
18876: ARRAY
18877: LESSEQUAL
18878: AND
18879: IFFALSE 18906
18881: GO 18883
18883: DISABLE
// begin enable ;
18884: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
18885: LD_INT 3
18887: PPUSH
18888: LD_INT 5
18890: PPUSH
18891: CALL_OW 12
18895: PPUSH
18896: LD_INT 9
18898: PPUSH
18899: LD_INT 1
18901: PPUSH
18902: CALL_OW 55
// end ; end_of_file
18906: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
18907: LD_EXP 11
18911: NOT
18912: PUSH
18913: LD_EXP 16
18917: AND
18918: PUSH
18919: LD_EXP 4
18923: AND
18924: PUSH
18925: LD_EXP 15
18929: PUSH
18930: LD_EXP 16
18934: LESSEQUAL
18935: AND
18936: IFFALSE 19026
18938: GO 18940
18940: DISABLE
// begin enable ;
18941: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
18942: LD_ADDR_OWVAR 47
18946: PUSH
18947: LD_STRING #X103-1
18949: PUSH
18950: LD_EXP 16
18954: PUSH
18955: LD_EXP 15
18959: MINUS
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
18965: LD_ADDR_EXP 15
18969: PUSH
18970: LD_INT 5
18972: PPUSH
18973: CALL_OW 274
18977: PPUSH
18978: LD_INT 1
18980: PPUSH
18981: CALL_OW 275
18985: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
18986: LD_INT 10
18988: PPUSH
18989: LD_INT 1
18991: PPUSH
18992: CALL_OW 287
18996: PUSH
18997: LD_INT 0
18999: EQUAL
19000: IFFALSE 19018
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19002: LD_ADDR_EXP 17
19006: PUSH
19007: LD_EXP 17
19011: PUSH
19012: LD_INT 35
19014: MINUS
19015: ST_TO_ADDR
19016: GO 19026
// farmerCratesCounter := 30 30$00 ;
19018: LD_ADDR_EXP 17
19022: PUSH
19023: LD_INT 63000
19025: ST_TO_ADDR
// end ; end_of_file
19026: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
19027: LD_INT 0
19029: PPUSH
// ar_miner := 81 ;
19030: LD_ADDR_EXP 55
19034: PUSH
19035: LD_INT 81
19037: ST_TO_ADDR
// ar_crane := 88 ;
19038: LD_ADDR_EXP 54
19042: PUSH
19043: LD_INT 88
19045: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19046: LD_ADDR_EXP 49
19050: PUSH
19051: LD_INT 89
19053: ST_TO_ADDR
// us_hack := 99 ;
19054: LD_ADDR_EXP 50
19058: PUSH
19059: LD_INT 99
19061: ST_TO_ADDR
// us_artillery := 97 ;
19062: LD_ADDR_EXP 51
19066: PUSH
19067: LD_INT 97
19069: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19070: LD_ADDR_EXP 52
19074: PUSH
19075: LD_INT 91
19077: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
19078: LD_ADDR_EXP 53
19082: PUSH
19083: LD_INT 92
19085: ST_TO_ADDR
// ru_radar := 98 ;
19086: LD_ADDR_EXP 48
19090: PUSH
19091: LD_INT 98
19093: ST_TO_ADDR
// tech_Artillery := 80 ;
19094: LD_ADDR_EXP 56
19098: PUSH
19099: LD_INT 80
19101: ST_TO_ADDR
// tech_RadMat := 81 ;
19102: LD_ADDR_EXP 57
19106: PUSH
19107: LD_INT 81
19109: ST_TO_ADDR
// tech_BasicTools := 82 ;
19110: LD_ADDR_EXP 58
19114: PUSH
19115: LD_INT 82
19117: ST_TO_ADDR
// tech_Cargo := 83 ;
19118: LD_ADDR_EXP 59
19122: PUSH
19123: LD_INT 83
19125: ST_TO_ADDR
// tech_Track := 84 ;
19126: LD_ADDR_EXP 60
19130: PUSH
19131: LD_INT 84
19133: ST_TO_ADDR
// tech_Crane := 85 ;
19134: LD_ADDR_EXP 61
19138: PUSH
19139: LD_INT 85
19141: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19142: LD_ADDR_EXP 62
19146: PUSH
19147: LD_INT 86
19149: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19150: LD_ADDR_EXP 63
19154: PUSH
19155: LD_INT 87
19157: ST_TO_ADDR
// end ;
19158: LD_VAR 0 1
19162: RET
// every 1 do
19163: GO 19165
19165: DISABLE
// InitGlobalVariables ; end_of_file
19166: CALL 19027 0 0
19170: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
19171: LD_VAR 0 2
19175: PUSH
19176: LD_INT 100
19178: EQUAL
19179: IFFALSE 20128
// begin if not StreamModeActive then
19181: LD_EXP 64
19185: NOT
19186: IFFALSE 19196
// StreamModeActive := true ;
19188: LD_ADDR_EXP 64
19192: PUSH
19193: LD_INT 1
19195: ST_TO_ADDR
// if p3 = 0 then
19196: LD_VAR 0 3
19200: PUSH
19201: LD_INT 0
19203: EQUAL
19204: IFFALSE 19210
// InitStreamMode ;
19206: CALL 20286 0 0
// if p3 = 1 then
19210: LD_VAR 0 3
19214: PUSH
19215: LD_INT 1
19217: EQUAL
19218: IFFALSE 19228
// sRocket := true ;
19220: LD_ADDR_EXP 69
19224: PUSH
19225: LD_INT 1
19227: ST_TO_ADDR
// if p3 = 2 then
19228: LD_VAR 0 3
19232: PUSH
19233: LD_INT 2
19235: EQUAL
19236: IFFALSE 19246
// sSpeed := true ;
19238: LD_ADDR_EXP 68
19242: PUSH
19243: LD_INT 1
19245: ST_TO_ADDR
// if p3 = 3 then
19246: LD_VAR 0 3
19250: PUSH
19251: LD_INT 3
19253: EQUAL
19254: IFFALSE 19264
// sEngine := true ;
19256: LD_ADDR_EXP 70
19260: PUSH
19261: LD_INT 1
19263: ST_TO_ADDR
// if p3 = 4 then
19264: LD_VAR 0 3
19268: PUSH
19269: LD_INT 4
19271: EQUAL
19272: IFFALSE 19282
// sSpec := true ;
19274: LD_ADDR_EXP 67
19278: PUSH
19279: LD_INT 1
19281: ST_TO_ADDR
// if p3 = 5 then
19282: LD_VAR 0 3
19286: PUSH
19287: LD_INT 5
19289: EQUAL
19290: IFFALSE 19300
// sLevel := true ;
19292: LD_ADDR_EXP 71
19296: PUSH
19297: LD_INT 1
19299: ST_TO_ADDR
// if p3 = 6 then
19300: LD_VAR 0 3
19304: PUSH
19305: LD_INT 6
19307: EQUAL
19308: IFFALSE 19318
// sArmoury := true ;
19310: LD_ADDR_EXP 72
19314: PUSH
19315: LD_INT 1
19317: ST_TO_ADDR
// if p3 = 7 then
19318: LD_VAR 0 3
19322: PUSH
19323: LD_INT 7
19325: EQUAL
19326: IFFALSE 19336
// sRadar := true ;
19328: LD_ADDR_EXP 73
19332: PUSH
19333: LD_INT 1
19335: ST_TO_ADDR
// if p3 = 8 then
19336: LD_VAR 0 3
19340: PUSH
19341: LD_INT 8
19343: EQUAL
19344: IFFALSE 19354
// sBunker := true ;
19346: LD_ADDR_EXP 74
19350: PUSH
19351: LD_INT 1
19353: ST_TO_ADDR
// if p3 = 9 then
19354: LD_VAR 0 3
19358: PUSH
19359: LD_INT 9
19361: EQUAL
19362: IFFALSE 19372
// sHack := true ;
19364: LD_ADDR_EXP 75
19368: PUSH
19369: LD_INT 1
19371: ST_TO_ADDR
// if p3 = 10 then
19372: LD_VAR 0 3
19376: PUSH
19377: LD_INT 10
19379: EQUAL
19380: IFFALSE 19390
// sFire := true ;
19382: LD_ADDR_EXP 76
19386: PUSH
19387: LD_INT 1
19389: ST_TO_ADDR
// if p3 = 11 then
19390: LD_VAR 0 3
19394: PUSH
19395: LD_INT 11
19397: EQUAL
19398: IFFALSE 19408
// sRefresh := true ;
19400: LD_ADDR_EXP 77
19404: PUSH
19405: LD_INT 1
19407: ST_TO_ADDR
// if p3 = 12 then
19408: LD_VAR 0 3
19412: PUSH
19413: LD_INT 12
19415: EQUAL
19416: IFFALSE 19426
// sExp := true ;
19418: LD_ADDR_EXP 78
19422: PUSH
19423: LD_INT 1
19425: ST_TO_ADDR
// if p3 = 13 then
19426: LD_VAR 0 3
19430: PUSH
19431: LD_INT 13
19433: EQUAL
19434: IFFALSE 19444
// sDepot := true ;
19436: LD_ADDR_EXP 79
19440: PUSH
19441: LD_INT 1
19443: ST_TO_ADDR
// if p3 = 14 then
19444: LD_VAR 0 3
19448: PUSH
19449: LD_INT 14
19451: EQUAL
19452: IFFALSE 19462
// sFlag := true ;
19454: LD_ADDR_EXP 80
19458: PUSH
19459: LD_INT 1
19461: ST_TO_ADDR
// if p3 = 15 then
19462: LD_VAR 0 3
19466: PUSH
19467: LD_INT 15
19469: EQUAL
19470: IFFALSE 19480
// sKamikadze := true ;
19472: LD_ADDR_EXP 88
19476: PUSH
19477: LD_INT 1
19479: ST_TO_ADDR
// if p3 = 16 then
19480: LD_VAR 0 3
19484: PUSH
19485: LD_INT 16
19487: EQUAL
19488: IFFALSE 19498
// sTroll := true ;
19490: LD_ADDR_EXP 89
19494: PUSH
19495: LD_INT 1
19497: ST_TO_ADDR
// if p3 = 17 then
19498: LD_VAR 0 3
19502: PUSH
19503: LD_INT 17
19505: EQUAL
19506: IFFALSE 19516
// sSlow := true ;
19508: LD_ADDR_EXP 90
19512: PUSH
19513: LD_INT 1
19515: ST_TO_ADDR
// if p3 = 18 then
19516: LD_VAR 0 3
19520: PUSH
19521: LD_INT 18
19523: EQUAL
19524: IFFALSE 19534
// sLack := true ;
19526: LD_ADDR_EXP 91
19530: PUSH
19531: LD_INT 1
19533: ST_TO_ADDR
// if p3 = 19 then
19534: LD_VAR 0 3
19538: PUSH
19539: LD_INT 19
19541: EQUAL
19542: IFFALSE 19552
// sTank := true ;
19544: LD_ADDR_EXP 93
19548: PUSH
19549: LD_INT 1
19551: ST_TO_ADDR
// if p3 = 20 then
19552: LD_VAR 0 3
19556: PUSH
19557: LD_INT 20
19559: EQUAL
19560: IFFALSE 19570
// sRemote := true ;
19562: LD_ADDR_EXP 94
19566: PUSH
19567: LD_INT 1
19569: ST_TO_ADDR
// if p3 = 21 then
19570: LD_VAR 0 3
19574: PUSH
19575: LD_INT 21
19577: EQUAL
19578: IFFALSE 19588
// sPowell := true ;
19580: LD_ADDR_EXP 95
19584: PUSH
19585: LD_INT 1
19587: ST_TO_ADDR
// if p3 = 22 then
19588: LD_VAR 0 3
19592: PUSH
19593: LD_INT 22
19595: EQUAL
19596: IFFALSE 19606
// sTeleport := true ;
19598: LD_ADDR_EXP 98
19602: PUSH
19603: LD_INT 1
19605: ST_TO_ADDR
// if p3 = 23 then
19606: LD_VAR 0 3
19610: PUSH
19611: LD_INT 23
19613: EQUAL
19614: IFFALSE 19624
// sOilTower := true ;
19616: LD_ADDR_EXP 100
19620: PUSH
19621: LD_INT 1
19623: ST_TO_ADDR
// if p3 = 24 then
19624: LD_VAR 0 3
19628: PUSH
19629: LD_INT 24
19631: EQUAL
19632: IFFALSE 19642
// sShovel := true ;
19634: LD_ADDR_EXP 101
19638: PUSH
19639: LD_INT 1
19641: ST_TO_ADDR
// if p3 = 25 then
19642: LD_VAR 0 3
19646: PUSH
19647: LD_INT 25
19649: EQUAL
19650: IFFALSE 19660
// sSheik := true ;
19652: LD_ADDR_EXP 102
19656: PUSH
19657: LD_INT 1
19659: ST_TO_ADDR
// if p3 = 26 then
19660: LD_VAR 0 3
19664: PUSH
19665: LD_INT 26
19667: EQUAL
19668: IFFALSE 19678
// sEarthquake := true ;
19670: LD_ADDR_EXP 104
19674: PUSH
19675: LD_INT 1
19677: ST_TO_ADDR
// if p3 = 27 then
19678: LD_VAR 0 3
19682: PUSH
19683: LD_INT 27
19685: EQUAL
19686: IFFALSE 19696
// sAI := true ;
19688: LD_ADDR_EXP 105
19692: PUSH
19693: LD_INT 1
19695: ST_TO_ADDR
// if p3 = 28 then
19696: LD_VAR 0 3
19700: PUSH
19701: LD_INT 28
19703: EQUAL
19704: IFFALSE 19714
// sCargo := true ;
19706: LD_ADDR_EXP 108
19710: PUSH
19711: LD_INT 1
19713: ST_TO_ADDR
// if p3 = 29 then
19714: LD_VAR 0 3
19718: PUSH
19719: LD_INT 29
19721: EQUAL
19722: IFFALSE 19732
// sDLaser := true ;
19724: LD_ADDR_EXP 109
19728: PUSH
19729: LD_INT 1
19731: ST_TO_ADDR
// if p3 = 30 then
19732: LD_VAR 0 3
19736: PUSH
19737: LD_INT 30
19739: EQUAL
19740: IFFALSE 19750
// sExchange := true ;
19742: LD_ADDR_EXP 110
19746: PUSH
19747: LD_INT 1
19749: ST_TO_ADDR
// if p3 = 31 then
19750: LD_VAR 0 3
19754: PUSH
19755: LD_INT 31
19757: EQUAL
19758: IFFALSE 19768
// sFac := true ;
19760: LD_ADDR_EXP 111
19764: PUSH
19765: LD_INT 1
19767: ST_TO_ADDR
// if p3 = 32 then
19768: LD_VAR 0 3
19772: PUSH
19773: LD_INT 32
19775: EQUAL
19776: IFFALSE 19786
// sPower := true ;
19778: LD_ADDR_EXP 112
19782: PUSH
19783: LD_INT 1
19785: ST_TO_ADDR
// if p3 = 33 then
19786: LD_VAR 0 3
19790: PUSH
19791: LD_INT 33
19793: EQUAL
19794: IFFALSE 19804
// sRandom := true ;
19796: LD_ADDR_EXP 113
19800: PUSH
19801: LD_INT 1
19803: ST_TO_ADDR
// if p3 = 34 then
19804: LD_VAR 0 3
19808: PUSH
19809: LD_INT 34
19811: EQUAL
19812: IFFALSE 19822
// sShield := true ;
19814: LD_ADDR_EXP 114
19818: PUSH
19819: LD_INT 1
19821: ST_TO_ADDR
// if p3 = 35 then
19822: LD_VAR 0 3
19826: PUSH
19827: LD_INT 35
19829: EQUAL
19830: IFFALSE 19840
// sTime := true ;
19832: LD_ADDR_EXP 115
19836: PUSH
19837: LD_INT 1
19839: ST_TO_ADDR
// if p3 = 36 then
19840: LD_VAR 0 3
19844: PUSH
19845: LD_INT 36
19847: EQUAL
19848: IFFALSE 19858
// sTools := true ;
19850: LD_ADDR_EXP 116
19854: PUSH
19855: LD_INT 1
19857: ST_TO_ADDR
// if p3 = 101 then
19858: LD_VAR 0 3
19862: PUSH
19863: LD_INT 101
19865: EQUAL
19866: IFFALSE 19876
// sSold := true ;
19868: LD_ADDR_EXP 81
19872: PUSH
19873: LD_INT 1
19875: ST_TO_ADDR
// if p3 = 102 then
19876: LD_VAR 0 3
19880: PUSH
19881: LD_INT 102
19883: EQUAL
19884: IFFALSE 19894
// sDiff := true ;
19886: LD_ADDR_EXP 82
19890: PUSH
19891: LD_INT 1
19893: ST_TO_ADDR
// if p3 = 103 then
19894: LD_VAR 0 3
19898: PUSH
19899: LD_INT 103
19901: EQUAL
19902: IFFALSE 19912
// sFog := true ;
19904: LD_ADDR_EXP 85
19908: PUSH
19909: LD_INT 1
19911: ST_TO_ADDR
// if p3 = 104 then
19912: LD_VAR 0 3
19916: PUSH
19917: LD_INT 104
19919: EQUAL
19920: IFFALSE 19930
// sReset := true ;
19922: LD_ADDR_EXP 86
19926: PUSH
19927: LD_INT 1
19929: ST_TO_ADDR
// if p3 = 105 then
19930: LD_VAR 0 3
19934: PUSH
19935: LD_INT 105
19937: EQUAL
19938: IFFALSE 19948
// sSun := true ;
19940: LD_ADDR_EXP 87
19944: PUSH
19945: LD_INT 1
19947: ST_TO_ADDR
// if p3 = 106 then
19948: LD_VAR 0 3
19952: PUSH
19953: LD_INT 106
19955: EQUAL
19956: IFFALSE 19966
// sTiger := true ;
19958: LD_ADDR_EXP 83
19962: PUSH
19963: LD_INT 1
19965: ST_TO_ADDR
// if p3 = 107 then
19966: LD_VAR 0 3
19970: PUSH
19971: LD_INT 107
19973: EQUAL
19974: IFFALSE 19984
// sBomb := true ;
19976: LD_ADDR_EXP 84
19980: PUSH
19981: LD_INT 1
19983: ST_TO_ADDR
// if p3 = 108 then
19984: LD_VAR 0 3
19988: PUSH
19989: LD_INT 108
19991: EQUAL
19992: IFFALSE 20002
// sWound := true ;
19994: LD_ADDR_EXP 92
19998: PUSH
19999: LD_INT 1
20001: ST_TO_ADDR
// if p3 = 109 then
20002: LD_VAR 0 3
20006: PUSH
20007: LD_INT 109
20009: EQUAL
20010: IFFALSE 20020
// sBetray := true ;
20012: LD_ADDR_EXP 96
20016: PUSH
20017: LD_INT 1
20019: ST_TO_ADDR
// if p3 = 110 then
20020: LD_VAR 0 3
20024: PUSH
20025: LD_INT 110
20027: EQUAL
20028: IFFALSE 20038
// sContamin := true ;
20030: LD_ADDR_EXP 97
20034: PUSH
20035: LD_INT 1
20037: ST_TO_ADDR
// if p3 = 111 then
20038: LD_VAR 0 3
20042: PUSH
20043: LD_INT 111
20045: EQUAL
20046: IFFALSE 20056
// sOil := true ;
20048: LD_ADDR_EXP 99
20052: PUSH
20053: LD_INT 1
20055: ST_TO_ADDR
// if p3 = 112 then
20056: LD_VAR 0 3
20060: PUSH
20061: LD_INT 112
20063: EQUAL
20064: IFFALSE 20074
// sStu := true ;
20066: LD_ADDR_EXP 103
20070: PUSH
20071: LD_INT 1
20073: ST_TO_ADDR
// if p3 = 113 then
20074: LD_VAR 0 3
20078: PUSH
20079: LD_INT 113
20081: EQUAL
20082: IFFALSE 20092
// sBazooka := true ;
20084: LD_ADDR_EXP 106
20088: PUSH
20089: LD_INT 1
20091: ST_TO_ADDR
// if p3 = 114 then
20092: LD_VAR 0 3
20096: PUSH
20097: LD_INT 114
20099: EQUAL
20100: IFFALSE 20110
// sMortar := true ;
20102: LD_ADDR_EXP 107
20106: PUSH
20107: LD_INT 1
20109: ST_TO_ADDR
// if p3 = 115 then
20110: LD_VAR 0 3
20114: PUSH
20115: LD_INT 115
20117: EQUAL
20118: IFFALSE 20128
// sRanger := true ;
20120: LD_ADDR_EXP 117
20124: PUSH
20125: LD_INT 1
20127: ST_TO_ADDR
// end ; if p2 = 101 then
20128: LD_VAR 0 2
20132: PUSH
20133: LD_INT 101
20135: EQUAL
20136: IFFALSE 20264
// begin case p3 of 1 :
20138: LD_VAR 0 3
20142: PUSH
20143: LD_INT 1
20145: DOUBLE
20146: EQUAL
20147: IFTRUE 20151
20149: GO 20158
20151: POP
// hHackUnlimitedResources ; 2 :
20152: CALL 31299 0 0
20156: GO 20264
20158: LD_INT 2
20160: DOUBLE
20161: EQUAL
20162: IFTRUE 20166
20164: GO 20173
20166: POP
// hHackSetLevel10 ; 3 :
20167: CALL 31432 0 0
20171: GO 20264
20173: LD_INT 3
20175: DOUBLE
20176: EQUAL
20177: IFTRUE 20181
20179: GO 20188
20181: POP
// hHackSetLevel10YourUnits ; 4 :
20182: CALL 31517 0 0
20186: GO 20264
20188: LD_INT 4
20190: DOUBLE
20191: EQUAL
20192: IFTRUE 20196
20194: GO 20203
20196: POP
// hHackInvincible ; 5 :
20197: CALL 31965 0 0
20201: GO 20264
20203: LD_INT 5
20205: DOUBLE
20206: EQUAL
20207: IFTRUE 20211
20209: GO 20218
20211: POP
// hHackInvisible ; 6 :
20212: CALL 32076 0 0
20216: GO 20264
20218: LD_INT 6
20220: DOUBLE
20221: EQUAL
20222: IFTRUE 20226
20224: GO 20233
20226: POP
// hHackChangeYourSide ; 7 :
20227: CALL 32133 0 0
20231: GO 20264
20233: LD_INT 7
20235: DOUBLE
20236: EQUAL
20237: IFTRUE 20241
20239: GO 20248
20241: POP
// hHackChangeUnitSide ; 8 :
20242: CALL 32175 0 0
20246: GO 20264
20248: LD_INT 8
20250: DOUBLE
20251: EQUAL
20252: IFTRUE 20256
20254: GO 20263
20256: POP
// hHackFog ; end ;
20257: CALL 32276 0 0
20261: GO 20264
20263: POP
// end ; end ;
20264: PPOPN 6
20266: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20267: GO 20269
20269: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20270: LD_STRING initStreamRollete();
20272: PPUSH
20273: CALL_OW 559
// InitStreamMode ;
20277: CALL 20286 0 0
// DefineStreamItems ( ) ;
20281: CALL 20726 0 0
// end ;
20285: END
// function InitStreamMode ; begin
20286: LD_INT 0
20288: PPUSH
// streamModeActive := false ;
20289: LD_ADDR_EXP 64
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// normalCounter := 36 ;
20297: LD_ADDR_EXP 65
20301: PUSH
20302: LD_INT 36
20304: ST_TO_ADDR
// hardcoreCounter := 16 ;
20305: LD_ADDR_EXP 66
20309: PUSH
20310: LD_INT 16
20312: ST_TO_ADDR
// sRocket := false ;
20313: LD_ADDR_EXP 69
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// sSpeed := false ;
20321: LD_ADDR_EXP 68
20325: PUSH
20326: LD_INT 0
20328: ST_TO_ADDR
// sEngine := false ;
20329: LD_ADDR_EXP 70
20333: PUSH
20334: LD_INT 0
20336: ST_TO_ADDR
// sSpec := false ;
20337: LD_ADDR_EXP 67
20341: PUSH
20342: LD_INT 0
20344: ST_TO_ADDR
// sLevel := false ;
20345: LD_ADDR_EXP 71
20349: PUSH
20350: LD_INT 0
20352: ST_TO_ADDR
// sArmoury := false ;
20353: LD_ADDR_EXP 72
20357: PUSH
20358: LD_INT 0
20360: ST_TO_ADDR
// sRadar := false ;
20361: LD_ADDR_EXP 73
20365: PUSH
20366: LD_INT 0
20368: ST_TO_ADDR
// sBunker := false ;
20369: LD_ADDR_EXP 74
20373: PUSH
20374: LD_INT 0
20376: ST_TO_ADDR
// sHack := false ;
20377: LD_ADDR_EXP 75
20381: PUSH
20382: LD_INT 0
20384: ST_TO_ADDR
// sFire := false ;
20385: LD_ADDR_EXP 76
20389: PUSH
20390: LD_INT 0
20392: ST_TO_ADDR
// sRefresh := false ;
20393: LD_ADDR_EXP 77
20397: PUSH
20398: LD_INT 0
20400: ST_TO_ADDR
// sExp := false ;
20401: LD_ADDR_EXP 78
20405: PUSH
20406: LD_INT 0
20408: ST_TO_ADDR
// sDepot := false ;
20409: LD_ADDR_EXP 79
20413: PUSH
20414: LD_INT 0
20416: ST_TO_ADDR
// sFlag := false ;
20417: LD_ADDR_EXP 80
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// sKamikadze := false ;
20425: LD_ADDR_EXP 88
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
// sTroll := false ;
20433: LD_ADDR_EXP 89
20437: PUSH
20438: LD_INT 0
20440: ST_TO_ADDR
// sSlow := false ;
20441: LD_ADDR_EXP 90
20445: PUSH
20446: LD_INT 0
20448: ST_TO_ADDR
// sLack := false ;
20449: LD_ADDR_EXP 91
20453: PUSH
20454: LD_INT 0
20456: ST_TO_ADDR
// sTank := false ;
20457: LD_ADDR_EXP 93
20461: PUSH
20462: LD_INT 0
20464: ST_TO_ADDR
// sRemote := false ;
20465: LD_ADDR_EXP 94
20469: PUSH
20470: LD_INT 0
20472: ST_TO_ADDR
// sPowell := false ;
20473: LD_ADDR_EXP 95
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// sTeleport := false ;
20481: LD_ADDR_EXP 98
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// sOilTower := false ;
20489: LD_ADDR_EXP 100
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// sShovel := false ;
20497: LD_ADDR_EXP 101
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// sSheik := false ;
20505: LD_ADDR_EXP 102
20509: PUSH
20510: LD_INT 0
20512: ST_TO_ADDR
// sEarthquake := false ;
20513: LD_ADDR_EXP 104
20517: PUSH
20518: LD_INT 0
20520: ST_TO_ADDR
// sAI := false ;
20521: LD_ADDR_EXP 105
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// sCargo := false ;
20529: LD_ADDR_EXP 108
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// sDLaser := false ;
20537: LD_ADDR_EXP 109
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// sExchange := false ;
20545: LD_ADDR_EXP 110
20549: PUSH
20550: LD_INT 0
20552: ST_TO_ADDR
// sFac := false ;
20553: LD_ADDR_EXP 111
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// sPower := false ;
20561: LD_ADDR_EXP 112
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// sRandom := false ;
20569: LD_ADDR_EXP 113
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// sShield := false ;
20577: LD_ADDR_EXP 114
20581: PUSH
20582: LD_INT 0
20584: ST_TO_ADDR
// sTime := false ;
20585: LD_ADDR_EXP 115
20589: PUSH
20590: LD_INT 0
20592: ST_TO_ADDR
// sTools := false ;
20593: LD_ADDR_EXP 116
20597: PUSH
20598: LD_INT 0
20600: ST_TO_ADDR
// sSold := false ;
20601: LD_ADDR_EXP 81
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// sDiff := false ;
20609: LD_ADDR_EXP 82
20613: PUSH
20614: LD_INT 0
20616: ST_TO_ADDR
// sFog := false ;
20617: LD_ADDR_EXP 85
20621: PUSH
20622: LD_INT 0
20624: ST_TO_ADDR
// sReset := false ;
20625: LD_ADDR_EXP 86
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
// sSun := false ;
20633: LD_ADDR_EXP 87
20637: PUSH
20638: LD_INT 0
20640: ST_TO_ADDR
// sTiger := false ;
20641: LD_ADDR_EXP 83
20645: PUSH
20646: LD_INT 0
20648: ST_TO_ADDR
// sBomb := false ;
20649: LD_ADDR_EXP 84
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// sWound := false ;
20657: LD_ADDR_EXP 92
20661: PUSH
20662: LD_INT 0
20664: ST_TO_ADDR
// sBetray := false ;
20665: LD_ADDR_EXP 96
20669: PUSH
20670: LD_INT 0
20672: ST_TO_ADDR
// sContamin := false ;
20673: LD_ADDR_EXP 97
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// sOil := false ;
20681: LD_ADDR_EXP 99
20685: PUSH
20686: LD_INT 0
20688: ST_TO_ADDR
// sStu := false ;
20689: LD_ADDR_EXP 103
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
// sBazooka := false ;
20697: LD_ADDR_EXP 106
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// sMortar := false ;
20705: LD_ADDR_EXP 107
20709: PUSH
20710: LD_INT 0
20712: ST_TO_ADDR
// sRanger := false ;
20713: LD_ADDR_EXP 117
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// end ;
20721: LD_VAR 0 1
20725: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20726: LD_INT 0
20728: PPUSH
20729: PPUSH
20730: PPUSH
20731: PPUSH
20732: PPUSH
// result := [ ] ;
20733: LD_ADDR_VAR 0 1
20737: PUSH
20738: EMPTY
20739: ST_TO_ADDR
// if campaign_id = 1 then
20740: LD_OWVAR 69
20744: PUSH
20745: LD_INT 1
20747: EQUAL
20748: IFFALSE 23686
// begin case mission_number of 1 :
20750: LD_OWVAR 70
20754: PUSH
20755: LD_INT 1
20757: DOUBLE
20758: EQUAL
20759: IFTRUE 20763
20761: GO 20827
20763: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20764: LD_ADDR_VAR 0 1
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: LD_INT 4
20774: PUSH
20775: LD_INT 11
20777: PUSH
20778: LD_INT 12
20780: PUSH
20781: LD_INT 15
20783: PUSH
20784: LD_INT 16
20786: PUSH
20787: LD_INT 22
20789: PUSH
20790: LD_INT 23
20792: PUSH
20793: LD_INT 26
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 101
20809: PUSH
20810: LD_INT 102
20812: PUSH
20813: LD_INT 106
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: LIST
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: ST_TO_ADDR
20825: GO 23684
20827: LD_INT 2
20829: DOUBLE
20830: EQUAL
20831: IFTRUE 20835
20833: GO 20907
20835: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20836: LD_ADDR_VAR 0 1
20840: PUSH
20841: LD_INT 2
20843: PUSH
20844: LD_INT 4
20846: PUSH
20847: LD_INT 11
20849: PUSH
20850: LD_INT 12
20852: PUSH
20853: LD_INT 15
20855: PUSH
20856: LD_INT 16
20858: PUSH
20859: LD_INT 22
20861: PUSH
20862: LD_INT 23
20864: PUSH
20865: LD_INT 26
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 101
20881: PUSH
20882: LD_INT 102
20884: PUSH
20885: LD_INT 105
20887: PUSH
20888: LD_INT 106
20890: PUSH
20891: LD_INT 108
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: ST_TO_ADDR
20905: GO 23684
20907: LD_INT 3
20909: DOUBLE
20910: EQUAL
20911: IFTRUE 20915
20913: GO 20991
20915: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20916: LD_ADDR_VAR 0 1
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: LD_INT 4
20926: PUSH
20927: LD_INT 5
20929: PUSH
20930: LD_INT 11
20932: PUSH
20933: LD_INT 12
20935: PUSH
20936: LD_INT 15
20938: PUSH
20939: LD_INT 16
20941: PUSH
20942: LD_INT 22
20944: PUSH
20945: LD_INT 26
20947: PUSH
20948: LD_INT 36
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 101
20965: PUSH
20966: LD_INT 102
20968: PUSH
20969: LD_INT 105
20971: PUSH
20972: LD_INT 106
20974: PUSH
20975: LD_INT 108
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: ST_TO_ADDR
20989: GO 23684
20991: LD_INT 4
20993: DOUBLE
20994: EQUAL
20995: IFTRUE 20999
20997: GO 21083
20999: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21000: LD_ADDR_VAR 0 1
21004: PUSH
21005: LD_INT 2
21007: PUSH
21008: LD_INT 4
21010: PUSH
21011: LD_INT 5
21013: PUSH
21014: LD_INT 8
21016: PUSH
21017: LD_INT 11
21019: PUSH
21020: LD_INT 12
21022: PUSH
21023: LD_INT 15
21025: PUSH
21026: LD_INT 16
21028: PUSH
21029: LD_INT 22
21031: PUSH
21032: LD_INT 23
21034: PUSH
21035: LD_INT 26
21037: PUSH
21038: LD_INT 36
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 101
21057: PUSH
21058: LD_INT 102
21060: PUSH
21061: LD_INT 105
21063: PUSH
21064: LD_INT 106
21066: PUSH
21067: LD_INT 108
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: ST_TO_ADDR
21081: GO 23684
21083: LD_INT 5
21085: DOUBLE
21086: EQUAL
21087: IFTRUE 21091
21089: GO 21191
21091: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21092: LD_ADDR_VAR 0 1
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 4
21102: PUSH
21103: LD_INT 5
21105: PUSH
21106: LD_INT 6
21108: PUSH
21109: LD_INT 8
21111: PUSH
21112: LD_INT 11
21114: PUSH
21115: LD_INT 12
21117: PUSH
21118: LD_INT 15
21120: PUSH
21121: LD_INT 16
21123: PUSH
21124: LD_INT 22
21126: PUSH
21127: LD_INT 23
21129: PUSH
21130: LD_INT 25
21132: PUSH
21133: LD_INT 26
21135: PUSH
21136: LD_INT 36
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 101
21157: PUSH
21158: LD_INT 102
21160: PUSH
21161: LD_INT 105
21163: PUSH
21164: LD_INT 106
21166: PUSH
21167: LD_INT 108
21169: PUSH
21170: LD_INT 109
21172: PUSH
21173: LD_INT 112
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: ST_TO_ADDR
21189: GO 23684
21191: LD_INT 6
21193: DOUBLE
21194: EQUAL
21195: IFTRUE 21199
21197: GO 21319
21199: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21200: LD_ADDR_VAR 0 1
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 4
21210: PUSH
21211: LD_INT 5
21213: PUSH
21214: LD_INT 6
21216: PUSH
21217: LD_INT 8
21219: PUSH
21220: LD_INT 11
21222: PUSH
21223: LD_INT 12
21225: PUSH
21226: LD_INT 15
21228: PUSH
21229: LD_INT 16
21231: PUSH
21232: LD_INT 20
21234: PUSH
21235: LD_INT 21
21237: PUSH
21238: LD_INT 22
21240: PUSH
21241: LD_INT 23
21243: PUSH
21244: LD_INT 25
21246: PUSH
21247: LD_INT 26
21249: PUSH
21250: LD_INT 30
21252: PUSH
21253: LD_INT 31
21255: PUSH
21256: LD_INT 32
21258: PUSH
21259: LD_INT 36
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 101
21285: PUSH
21286: LD_INT 102
21288: PUSH
21289: LD_INT 105
21291: PUSH
21292: LD_INT 106
21294: PUSH
21295: LD_INT 108
21297: PUSH
21298: LD_INT 109
21300: PUSH
21301: LD_INT 112
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: ST_TO_ADDR
21317: GO 23684
21319: LD_INT 7
21321: DOUBLE
21322: EQUAL
21323: IFTRUE 21327
21325: GO 21427
21327: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21328: LD_ADDR_VAR 0 1
21332: PUSH
21333: LD_INT 2
21335: PUSH
21336: LD_INT 4
21338: PUSH
21339: LD_INT 5
21341: PUSH
21342: LD_INT 7
21344: PUSH
21345: LD_INT 11
21347: PUSH
21348: LD_INT 12
21350: PUSH
21351: LD_INT 15
21353: PUSH
21354: LD_INT 16
21356: PUSH
21357: LD_INT 20
21359: PUSH
21360: LD_INT 21
21362: PUSH
21363: LD_INT 22
21365: PUSH
21366: LD_INT 23
21368: PUSH
21369: LD_INT 25
21371: PUSH
21372: LD_INT 26
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 101
21393: PUSH
21394: LD_INT 102
21396: PUSH
21397: LD_INT 103
21399: PUSH
21400: LD_INT 105
21402: PUSH
21403: LD_INT 106
21405: PUSH
21406: LD_INT 108
21408: PUSH
21409: LD_INT 112
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: ST_TO_ADDR
21425: GO 23684
21427: LD_INT 8
21429: DOUBLE
21430: EQUAL
21431: IFTRUE 21435
21433: GO 21563
21435: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21436: LD_ADDR_VAR 0 1
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: LD_INT 4
21446: PUSH
21447: LD_INT 5
21449: PUSH
21450: LD_INT 6
21452: PUSH
21453: LD_INT 7
21455: PUSH
21456: LD_INT 8
21458: PUSH
21459: LD_INT 11
21461: PUSH
21462: LD_INT 12
21464: PUSH
21465: LD_INT 15
21467: PUSH
21468: LD_INT 16
21470: PUSH
21471: LD_INT 20
21473: PUSH
21474: LD_INT 21
21476: PUSH
21477: LD_INT 22
21479: PUSH
21480: LD_INT 23
21482: PUSH
21483: LD_INT 25
21485: PUSH
21486: LD_INT 26
21488: PUSH
21489: LD_INT 30
21491: PUSH
21492: LD_INT 31
21494: PUSH
21495: LD_INT 32
21497: PUSH
21498: LD_INT 36
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 101
21525: PUSH
21526: LD_INT 102
21528: PUSH
21529: LD_INT 103
21531: PUSH
21532: LD_INT 105
21534: PUSH
21535: LD_INT 106
21537: PUSH
21538: LD_INT 108
21540: PUSH
21541: LD_INT 109
21543: PUSH
21544: LD_INT 112
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: ST_TO_ADDR
21561: GO 23684
21563: LD_INT 9
21565: DOUBLE
21566: EQUAL
21567: IFTRUE 21571
21569: GO 21707
21571: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21572: LD_ADDR_VAR 0 1
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: LD_INT 4
21582: PUSH
21583: LD_INT 5
21585: PUSH
21586: LD_INT 6
21588: PUSH
21589: LD_INT 7
21591: PUSH
21592: LD_INT 8
21594: PUSH
21595: LD_INT 11
21597: PUSH
21598: LD_INT 12
21600: PUSH
21601: LD_INT 15
21603: PUSH
21604: LD_INT 16
21606: PUSH
21607: LD_INT 20
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 22
21615: PUSH
21616: LD_INT 23
21618: PUSH
21619: LD_INT 25
21621: PUSH
21622: LD_INT 26
21624: PUSH
21625: LD_INT 28
21627: PUSH
21628: LD_INT 30
21630: PUSH
21631: LD_INT 31
21633: PUSH
21634: LD_INT 32
21636: PUSH
21637: LD_INT 36
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 101
21665: PUSH
21666: LD_INT 102
21668: PUSH
21669: LD_INT 103
21671: PUSH
21672: LD_INT 105
21674: PUSH
21675: LD_INT 106
21677: PUSH
21678: LD_INT 108
21680: PUSH
21681: LD_INT 109
21683: PUSH
21684: LD_INT 112
21686: PUSH
21687: LD_INT 114
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: ST_TO_ADDR
21705: GO 23684
21707: LD_INT 10
21709: DOUBLE
21710: EQUAL
21711: IFTRUE 21715
21713: GO 21899
21715: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21716: LD_ADDR_VAR 0 1
21720: PUSH
21721: LD_INT 2
21723: PUSH
21724: LD_INT 4
21726: PUSH
21727: LD_INT 5
21729: PUSH
21730: LD_INT 6
21732: PUSH
21733: LD_INT 7
21735: PUSH
21736: LD_INT 8
21738: PUSH
21739: LD_INT 9
21741: PUSH
21742: LD_INT 10
21744: PUSH
21745: LD_INT 11
21747: PUSH
21748: LD_INT 12
21750: PUSH
21751: LD_INT 13
21753: PUSH
21754: LD_INT 14
21756: PUSH
21757: LD_INT 15
21759: PUSH
21760: LD_INT 16
21762: PUSH
21763: LD_INT 17
21765: PUSH
21766: LD_INT 18
21768: PUSH
21769: LD_INT 19
21771: PUSH
21772: LD_INT 20
21774: PUSH
21775: LD_INT 21
21777: PUSH
21778: LD_INT 22
21780: PUSH
21781: LD_INT 23
21783: PUSH
21784: LD_INT 24
21786: PUSH
21787: LD_INT 25
21789: PUSH
21790: LD_INT 26
21792: PUSH
21793: LD_INT 28
21795: PUSH
21796: LD_INT 30
21798: PUSH
21799: LD_INT 31
21801: PUSH
21802: LD_INT 32
21804: PUSH
21805: LD_INT 36
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 101
21841: PUSH
21842: LD_INT 102
21844: PUSH
21845: LD_INT 103
21847: PUSH
21848: LD_INT 104
21850: PUSH
21851: LD_INT 105
21853: PUSH
21854: LD_INT 106
21856: PUSH
21857: LD_INT 107
21859: PUSH
21860: LD_INT 108
21862: PUSH
21863: LD_INT 109
21865: PUSH
21866: LD_INT 110
21868: PUSH
21869: LD_INT 111
21871: PUSH
21872: LD_INT 112
21874: PUSH
21875: LD_INT 114
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: ST_TO_ADDR
21897: GO 23684
21899: LD_INT 11
21901: DOUBLE
21902: EQUAL
21903: IFTRUE 21907
21905: GO 22099
21907: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21908: LD_ADDR_VAR 0 1
21912: PUSH
21913: LD_INT 2
21915: PUSH
21916: LD_INT 3
21918: PUSH
21919: LD_INT 4
21921: PUSH
21922: LD_INT 5
21924: PUSH
21925: LD_INT 6
21927: PUSH
21928: LD_INT 7
21930: PUSH
21931: LD_INT 8
21933: PUSH
21934: LD_INT 9
21936: PUSH
21937: LD_INT 10
21939: PUSH
21940: LD_INT 11
21942: PUSH
21943: LD_INT 12
21945: PUSH
21946: LD_INT 13
21948: PUSH
21949: LD_INT 14
21951: PUSH
21952: LD_INT 15
21954: PUSH
21955: LD_INT 16
21957: PUSH
21958: LD_INT 17
21960: PUSH
21961: LD_INT 18
21963: PUSH
21964: LD_INT 19
21966: PUSH
21967: LD_INT 20
21969: PUSH
21970: LD_INT 21
21972: PUSH
21973: LD_INT 22
21975: PUSH
21976: LD_INT 23
21978: PUSH
21979: LD_INT 24
21981: PUSH
21982: LD_INT 25
21984: PUSH
21985: LD_INT 26
21987: PUSH
21988: LD_INT 28
21990: PUSH
21991: LD_INT 30
21993: PUSH
21994: LD_INT 31
21996: PUSH
21997: LD_INT 32
21999: PUSH
22000: LD_INT 34
22002: PUSH
22003: LD_INT 36
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 101
22041: PUSH
22042: LD_INT 102
22044: PUSH
22045: LD_INT 103
22047: PUSH
22048: LD_INT 104
22050: PUSH
22051: LD_INT 105
22053: PUSH
22054: LD_INT 106
22056: PUSH
22057: LD_INT 107
22059: PUSH
22060: LD_INT 108
22062: PUSH
22063: LD_INT 109
22065: PUSH
22066: LD_INT 110
22068: PUSH
22069: LD_INT 111
22071: PUSH
22072: LD_INT 112
22074: PUSH
22075: LD_INT 114
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: ST_TO_ADDR
22097: GO 23684
22099: LD_INT 12
22101: DOUBLE
22102: EQUAL
22103: IFTRUE 22107
22105: GO 22315
22107: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22108: LD_ADDR_VAR 0 1
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: LD_INT 2
22118: PUSH
22119: LD_INT 3
22121: PUSH
22122: LD_INT 4
22124: PUSH
22125: LD_INT 5
22127: PUSH
22128: LD_INT 6
22130: PUSH
22131: LD_INT 7
22133: PUSH
22134: LD_INT 8
22136: PUSH
22137: LD_INT 9
22139: PUSH
22140: LD_INT 10
22142: PUSH
22143: LD_INT 11
22145: PUSH
22146: LD_INT 12
22148: PUSH
22149: LD_INT 13
22151: PUSH
22152: LD_INT 14
22154: PUSH
22155: LD_INT 15
22157: PUSH
22158: LD_INT 16
22160: PUSH
22161: LD_INT 17
22163: PUSH
22164: LD_INT 18
22166: PUSH
22167: LD_INT 19
22169: PUSH
22170: LD_INT 20
22172: PUSH
22173: LD_INT 21
22175: PUSH
22176: LD_INT 22
22178: PUSH
22179: LD_INT 23
22181: PUSH
22182: LD_INT 24
22184: PUSH
22185: LD_INT 25
22187: PUSH
22188: LD_INT 26
22190: PUSH
22191: LD_INT 27
22193: PUSH
22194: LD_INT 28
22196: PUSH
22197: LD_INT 30
22199: PUSH
22200: LD_INT 31
22202: PUSH
22203: LD_INT 32
22205: PUSH
22206: LD_INT 33
22208: PUSH
22209: LD_INT 34
22211: PUSH
22212: LD_INT 36
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 101
22253: PUSH
22254: LD_INT 102
22256: PUSH
22257: LD_INT 103
22259: PUSH
22260: LD_INT 104
22262: PUSH
22263: LD_INT 105
22265: PUSH
22266: LD_INT 106
22268: PUSH
22269: LD_INT 107
22271: PUSH
22272: LD_INT 108
22274: PUSH
22275: LD_INT 109
22277: PUSH
22278: LD_INT 110
22280: PUSH
22281: LD_INT 111
22283: PUSH
22284: LD_INT 112
22286: PUSH
22287: LD_INT 113
22289: PUSH
22290: LD_INT 114
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: ST_TO_ADDR
22313: GO 23684
22315: LD_INT 13
22317: DOUBLE
22318: EQUAL
22319: IFTRUE 22323
22321: GO 22519
22323: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22324: LD_ADDR_VAR 0 1
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: LD_INT 2
22334: PUSH
22335: LD_INT 3
22337: PUSH
22338: LD_INT 4
22340: PUSH
22341: LD_INT 5
22343: PUSH
22344: LD_INT 8
22346: PUSH
22347: LD_INT 9
22349: PUSH
22350: LD_INT 10
22352: PUSH
22353: LD_INT 11
22355: PUSH
22356: LD_INT 12
22358: PUSH
22359: LD_INT 14
22361: PUSH
22362: LD_INT 15
22364: PUSH
22365: LD_INT 16
22367: PUSH
22368: LD_INT 17
22370: PUSH
22371: LD_INT 18
22373: PUSH
22374: LD_INT 19
22376: PUSH
22377: LD_INT 20
22379: PUSH
22380: LD_INT 21
22382: PUSH
22383: LD_INT 22
22385: PUSH
22386: LD_INT 23
22388: PUSH
22389: LD_INT 24
22391: PUSH
22392: LD_INT 25
22394: PUSH
22395: LD_INT 26
22397: PUSH
22398: LD_INT 27
22400: PUSH
22401: LD_INT 28
22403: PUSH
22404: LD_INT 30
22406: PUSH
22407: LD_INT 31
22409: PUSH
22410: LD_INT 32
22412: PUSH
22413: LD_INT 33
22415: PUSH
22416: LD_INT 34
22418: PUSH
22419: LD_INT 36
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 101
22457: PUSH
22458: LD_INT 102
22460: PUSH
22461: LD_INT 103
22463: PUSH
22464: LD_INT 104
22466: PUSH
22467: LD_INT 105
22469: PUSH
22470: LD_INT 106
22472: PUSH
22473: LD_INT 107
22475: PUSH
22476: LD_INT 108
22478: PUSH
22479: LD_INT 109
22481: PUSH
22482: LD_INT 110
22484: PUSH
22485: LD_INT 111
22487: PUSH
22488: LD_INT 112
22490: PUSH
22491: LD_INT 113
22493: PUSH
22494: LD_INT 114
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: ST_TO_ADDR
22517: GO 23684
22519: LD_INT 14
22521: DOUBLE
22522: EQUAL
22523: IFTRUE 22527
22525: GO 22739
22527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22528: LD_ADDR_VAR 0 1
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 2
22538: PUSH
22539: LD_INT 3
22541: PUSH
22542: LD_INT 4
22544: PUSH
22545: LD_INT 5
22547: PUSH
22548: LD_INT 6
22550: PUSH
22551: LD_INT 7
22553: PUSH
22554: LD_INT 8
22556: PUSH
22557: LD_INT 9
22559: PUSH
22560: LD_INT 10
22562: PUSH
22563: LD_INT 11
22565: PUSH
22566: LD_INT 12
22568: PUSH
22569: LD_INT 13
22571: PUSH
22572: LD_INT 14
22574: PUSH
22575: LD_INT 15
22577: PUSH
22578: LD_INT 16
22580: PUSH
22581: LD_INT 17
22583: PUSH
22584: LD_INT 18
22586: PUSH
22587: LD_INT 19
22589: PUSH
22590: LD_INT 20
22592: PUSH
22593: LD_INT 21
22595: PUSH
22596: LD_INT 22
22598: PUSH
22599: LD_INT 23
22601: PUSH
22602: LD_INT 24
22604: PUSH
22605: LD_INT 25
22607: PUSH
22608: LD_INT 26
22610: PUSH
22611: LD_INT 27
22613: PUSH
22614: LD_INT 28
22616: PUSH
22617: LD_INT 29
22619: PUSH
22620: LD_INT 30
22622: PUSH
22623: LD_INT 31
22625: PUSH
22626: LD_INT 32
22628: PUSH
22629: LD_INT 33
22631: PUSH
22632: LD_INT 34
22634: PUSH
22635: LD_INT 36
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 101
22677: PUSH
22678: LD_INT 102
22680: PUSH
22681: LD_INT 103
22683: PUSH
22684: LD_INT 104
22686: PUSH
22687: LD_INT 105
22689: PUSH
22690: LD_INT 106
22692: PUSH
22693: LD_INT 107
22695: PUSH
22696: LD_INT 108
22698: PUSH
22699: LD_INT 109
22701: PUSH
22702: LD_INT 110
22704: PUSH
22705: LD_INT 111
22707: PUSH
22708: LD_INT 112
22710: PUSH
22711: LD_INT 113
22713: PUSH
22714: LD_INT 114
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: ST_TO_ADDR
22737: GO 23684
22739: LD_INT 15
22741: DOUBLE
22742: EQUAL
22743: IFTRUE 22747
22745: GO 22959
22747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22748: LD_ADDR_VAR 0 1
22752: PUSH
22753: LD_INT 1
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 3
22761: PUSH
22762: LD_INT 4
22764: PUSH
22765: LD_INT 5
22767: PUSH
22768: LD_INT 6
22770: PUSH
22771: LD_INT 7
22773: PUSH
22774: LD_INT 8
22776: PUSH
22777: LD_INT 9
22779: PUSH
22780: LD_INT 10
22782: PUSH
22783: LD_INT 11
22785: PUSH
22786: LD_INT 12
22788: PUSH
22789: LD_INT 13
22791: PUSH
22792: LD_INT 14
22794: PUSH
22795: LD_INT 15
22797: PUSH
22798: LD_INT 16
22800: PUSH
22801: LD_INT 17
22803: PUSH
22804: LD_INT 18
22806: PUSH
22807: LD_INT 19
22809: PUSH
22810: LD_INT 20
22812: PUSH
22813: LD_INT 21
22815: PUSH
22816: LD_INT 22
22818: PUSH
22819: LD_INT 23
22821: PUSH
22822: LD_INT 24
22824: PUSH
22825: LD_INT 25
22827: PUSH
22828: LD_INT 26
22830: PUSH
22831: LD_INT 27
22833: PUSH
22834: LD_INT 28
22836: PUSH
22837: LD_INT 29
22839: PUSH
22840: LD_INT 30
22842: PUSH
22843: LD_INT 31
22845: PUSH
22846: LD_INT 32
22848: PUSH
22849: LD_INT 33
22851: PUSH
22852: LD_INT 34
22854: PUSH
22855: LD_INT 36
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 101
22897: PUSH
22898: LD_INT 102
22900: PUSH
22901: LD_INT 103
22903: PUSH
22904: LD_INT 104
22906: PUSH
22907: LD_INT 105
22909: PUSH
22910: LD_INT 106
22912: PUSH
22913: LD_INT 107
22915: PUSH
22916: LD_INT 108
22918: PUSH
22919: LD_INT 109
22921: PUSH
22922: LD_INT 110
22924: PUSH
22925: LD_INT 111
22927: PUSH
22928: LD_INT 112
22930: PUSH
22931: LD_INT 113
22933: PUSH
22934: LD_INT 114
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: ST_TO_ADDR
22957: GO 23684
22959: LD_INT 16
22961: DOUBLE
22962: EQUAL
22963: IFTRUE 22967
22965: GO 23091
22967: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22968: LD_ADDR_VAR 0 1
22972: PUSH
22973: LD_INT 2
22975: PUSH
22976: LD_INT 4
22978: PUSH
22979: LD_INT 5
22981: PUSH
22982: LD_INT 7
22984: PUSH
22985: LD_INT 11
22987: PUSH
22988: LD_INT 12
22990: PUSH
22991: LD_INT 15
22993: PUSH
22994: LD_INT 16
22996: PUSH
22997: LD_INT 20
22999: PUSH
23000: LD_INT 21
23002: PUSH
23003: LD_INT 22
23005: PUSH
23006: LD_INT 23
23008: PUSH
23009: LD_INT 25
23011: PUSH
23012: LD_INT 26
23014: PUSH
23015: LD_INT 30
23017: PUSH
23018: LD_INT 31
23020: PUSH
23021: LD_INT 32
23023: PUSH
23024: LD_INT 33
23026: PUSH
23027: LD_INT 34
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 101
23053: PUSH
23054: LD_INT 102
23056: PUSH
23057: LD_INT 103
23059: PUSH
23060: LD_INT 106
23062: PUSH
23063: LD_INT 108
23065: PUSH
23066: LD_INT 112
23068: PUSH
23069: LD_INT 113
23071: PUSH
23072: LD_INT 114
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: ST_TO_ADDR
23089: GO 23684
23091: LD_INT 17
23093: DOUBLE
23094: EQUAL
23095: IFTRUE 23099
23097: GO 23311
23099: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23100: LD_ADDR_VAR 0 1
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: LD_INT 2
23110: PUSH
23111: LD_INT 3
23113: PUSH
23114: LD_INT 4
23116: PUSH
23117: LD_INT 5
23119: PUSH
23120: LD_INT 6
23122: PUSH
23123: LD_INT 7
23125: PUSH
23126: LD_INT 8
23128: PUSH
23129: LD_INT 9
23131: PUSH
23132: LD_INT 10
23134: PUSH
23135: LD_INT 11
23137: PUSH
23138: LD_INT 12
23140: PUSH
23141: LD_INT 13
23143: PUSH
23144: LD_INT 14
23146: PUSH
23147: LD_INT 15
23149: PUSH
23150: LD_INT 16
23152: PUSH
23153: LD_INT 17
23155: PUSH
23156: LD_INT 18
23158: PUSH
23159: LD_INT 19
23161: PUSH
23162: LD_INT 20
23164: PUSH
23165: LD_INT 21
23167: PUSH
23168: LD_INT 22
23170: PUSH
23171: LD_INT 23
23173: PUSH
23174: LD_INT 24
23176: PUSH
23177: LD_INT 25
23179: PUSH
23180: LD_INT 26
23182: PUSH
23183: LD_INT 27
23185: PUSH
23186: LD_INT 28
23188: PUSH
23189: LD_INT 29
23191: PUSH
23192: LD_INT 30
23194: PUSH
23195: LD_INT 31
23197: PUSH
23198: LD_INT 32
23200: PUSH
23201: LD_INT 33
23203: PUSH
23204: LD_INT 34
23206: PUSH
23207: LD_INT 36
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 101
23249: PUSH
23250: LD_INT 102
23252: PUSH
23253: LD_INT 103
23255: PUSH
23256: LD_INT 104
23258: PUSH
23259: LD_INT 105
23261: PUSH
23262: LD_INT 106
23264: PUSH
23265: LD_INT 107
23267: PUSH
23268: LD_INT 108
23270: PUSH
23271: LD_INT 109
23273: PUSH
23274: LD_INT 110
23276: PUSH
23277: LD_INT 111
23279: PUSH
23280: LD_INT 112
23282: PUSH
23283: LD_INT 113
23285: PUSH
23286: LD_INT 114
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: ST_TO_ADDR
23309: GO 23684
23311: LD_INT 18
23313: DOUBLE
23314: EQUAL
23315: IFTRUE 23319
23317: GO 23455
23319: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23320: LD_ADDR_VAR 0 1
23324: PUSH
23325: LD_INT 2
23327: PUSH
23328: LD_INT 4
23330: PUSH
23331: LD_INT 5
23333: PUSH
23334: LD_INT 7
23336: PUSH
23337: LD_INT 11
23339: PUSH
23340: LD_INT 12
23342: PUSH
23343: LD_INT 15
23345: PUSH
23346: LD_INT 16
23348: PUSH
23349: LD_INT 20
23351: PUSH
23352: LD_INT 21
23354: PUSH
23355: LD_INT 22
23357: PUSH
23358: LD_INT 23
23360: PUSH
23361: LD_INT 25
23363: PUSH
23364: LD_INT 26
23366: PUSH
23367: LD_INT 30
23369: PUSH
23370: LD_INT 31
23372: PUSH
23373: LD_INT 32
23375: PUSH
23376: LD_INT 33
23378: PUSH
23379: LD_INT 34
23381: PUSH
23382: LD_INT 35
23384: PUSH
23385: LD_INT 36
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 101
23413: PUSH
23414: LD_INT 102
23416: PUSH
23417: LD_INT 103
23419: PUSH
23420: LD_INT 106
23422: PUSH
23423: LD_INT 108
23425: PUSH
23426: LD_INT 112
23428: PUSH
23429: LD_INT 113
23431: PUSH
23432: LD_INT 114
23434: PUSH
23435: LD_INT 115
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: ST_TO_ADDR
23453: GO 23684
23455: LD_INT 19
23457: DOUBLE
23458: EQUAL
23459: IFTRUE 23463
23461: GO 23683
23463: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23464: LD_ADDR_VAR 0 1
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: LD_INT 2
23474: PUSH
23475: LD_INT 3
23477: PUSH
23478: LD_INT 4
23480: PUSH
23481: LD_INT 5
23483: PUSH
23484: LD_INT 6
23486: PUSH
23487: LD_INT 7
23489: PUSH
23490: LD_INT 8
23492: PUSH
23493: LD_INT 9
23495: PUSH
23496: LD_INT 10
23498: PUSH
23499: LD_INT 11
23501: PUSH
23502: LD_INT 12
23504: PUSH
23505: LD_INT 13
23507: PUSH
23508: LD_INT 14
23510: PUSH
23511: LD_INT 15
23513: PUSH
23514: LD_INT 16
23516: PUSH
23517: LD_INT 17
23519: PUSH
23520: LD_INT 18
23522: PUSH
23523: LD_INT 19
23525: PUSH
23526: LD_INT 20
23528: PUSH
23529: LD_INT 21
23531: PUSH
23532: LD_INT 22
23534: PUSH
23535: LD_INT 23
23537: PUSH
23538: LD_INT 24
23540: PUSH
23541: LD_INT 25
23543: PUSH
23544: LD_INT 26
23546: PUSH
23547: LD_INT 27
23549: PUSH
23550: LD_INT 28
23552: PUSH
23553: LD_INT 29
23555: PUSH
23556: LD_INT 30
23558: PUSH
23559: LD_INT 31
23561: PUSH
23562: LD_INT 32
23564: PUSH
23565: LD_INT 33
23567: PUSH
23568: LD_INT 34
23570: PUSH
23571: LD_INT 35
23573: PUSH
23574: LD_INT 36
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 101
23617: PUSH
23618: LD_INT 102
23620: PUSH
23621: LD_INT 103
23623: PUSH
23624: LD_INT 104
23626: PUSH
23627: LD_INT 105
23629: PUSH
23630: LD_INT 106
23632: PUSH
23633: LD_INT 107
23635: PUSH
23636: LD_INT 108
23638: PUSH
23639: LD_INT 109
23641: PUSH
23642: LD_INT 110
23644: PUSH
23645: LD_INT 111
23647: PUSH
23648: LD_INT 112
23650: PUSH
23651: LD_INT 113
23653: PUSH
23654: LD_INT 114
23656: PUSH
23657: LD_INT 115
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: ST_TO_ADDR
23681: GO 23684
23683: POP
// end else
23684: GO 23903
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23686: LD_ADDR_VAR 0 1
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: LD_INT 2
23696: PUSH
23697: LD_INT 3
23699: PUSH
23700: LD_INT 4
23702: PUSH
23703: LD_INT 5
23705: PUSH
23706: LD_INT 6
23708: PUSH
23709: LD_INT 7
23711: PUSH
23712: LD_INT 8
23714: PUSH
23715: LD_INT 9
23717: PUSH
23718: LD_INT 10
23720: PUSH
23721: LD_INT 11
23723: PUSH
23724: LD_INT 12
23726: PUSH
23727: LD_INT 13
23729: PUSH
23730: LD_INT 14
23732: PUSH
23733: LD_INT 15
23735: PUSH
23736: LD_INT 16
23738: PUSH
23739: LD_INT 17
23741: PUSH
23742: LD_INT 18
23744: PUSH
23745: LD_INT 19
23747: PUSH
23748: LD_INT 20
23750: PUSH
23751: LD_INT 21
23753: PUSH
23754: LD_INT 22
23756: PUSH
23757: LD_INT 23
23759: PUSH
23760: LD_INT 24
23762: PUSH
23763: LD_INT 25
23765: PUSH
23766: LD_INT 26
23768: PUSH
23769: LD_INT 27
23771: PUSH
23772: LD_INT 28
23774: PUSH
23775: LD_INT 29
23777: PUSH
23778: LD_INT 30
23780: PUSH
23781: LD_INT 31
23783: PUSH
23784: LD_INT 32
23786: PUSH
23787: LD_INT 33
23789: PUSH
23790: LD_INT 34
23792: PUSH
23793: LD_INT 35
23795: PUSH
23796: LD_INT 36
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 101
23839: PUSH
23840: LD_INT 102
23842: PUSH
23843: LD_INT 103
23845: PUSH
23846: LD_INT 104
23848: PUSH
23849: LD_INT 105
23851: PUSH
23852: LD_INT 106
23854: PUSH
23855: LD_INT 107
23857: PUSH
23858: LD_INT 108
23860: PUSH
23861: LD_INT 109
23863: PUSH
23864: LD_INT 110
23866: PUSH
23867: LD_INT 111
23869: PUSH
23870: LD_INT 112
23872: PUSH
23873: LD_INT 113
23875: PUSH
23876: LD_INT 114
23878: PUSH
23879: LD_INT 115
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: ST_TO_ADDR
// if result then
23903: LD_VAR 0 1
23907: IFFALSE 24196
// begin normal :=  ;
23909: LD_ADDR_VAR 0 3
23913: PUSH
23914: LD_STRING 
23916: ST_TO_ADDR
// hardcore :=  ;
23917: LD_ADDR_VAR 0 4
23921: PUSH
23922: LD_STRING 
23924: ST_TO_ADDR
// for i = 1 to normalCounter do
23925: LD_ADDR_VAR 0 5
23929: PUSH
23930: DOUBLE
23931: LD_INT 1
23933: DEC
23934: ST_TO_ADDR
23935: LD_EXP 65
23939: PUSH
23940: FOR_TO
23941: IFFALSE 24042
// begin tmp := 0 ;
23943: LD_ADDR_VAR 0 2
23947: PUSH
23948: LD_STRING 0
23950: ST_TO_ADDR
// if result [ 1 ] then
23951: LD_VAR 0 1
23955: PUSH
23956: LD_INT 1
23958: ARRAY
23959: IFFALSE 24024
// if result [ 1 ] [ 1 ] = i then
23961: LD_VAR 0 1
23965: PUSH
23966: LD_INT 1
23968: ARRAY
23969: PUSH
23970: LD_INT 1
23972: ARRAY
23973: PUSH
23974: LD_VAR 0 5
23978: EQUAL
23979: IFFALSE 24024
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23981: LD_ADDR_VAR 0 1
23985: PUSH
23986: LD_VAR 0 1
23990: PPUSH
23991: LD_INT 1
23993: PPUSH
23994: LD_VAR 0 1
23998: PUSH
23999: LD_INT 1
24001: ARRAY
24002: PPUSH
24003: LD_INT 1
24005: PPUSH
24006: CALL_OW 3
24010: PPUSH
24011: CALL_OW 1
24015: ST_TO_ADDR
// tmp := 1 ;
24016: LD_ADDR_VAR 0 2
24020: PUSH
24021: LD_STRING 1
24023: ST_TO_ADDR
// end ; normal := normal & tmp ;
24024: LD_ADDR_VAR 0 3
24028: PUSH
24029: LD_VAR 0 3
24033: PUSH
24034: LD_VAR 0 2
24038: STR
24039: ST_TO_ADDR
// end ;
24040: GO 23940
24042: POP
24043: POP
// for i = 1 to hardcoreCounter do
24044: LD_ADDR_VAR 0 5
24048: PUSH
24049: DOUBLE
24050: LD_INT 1
24052: DEC
24053: ST_TO_ADDR
24054: LD_EXP 66
24058: PUSH
24059: FOR_TO
24060: IFFALSE 24165
// begin tmp := 0 ;
24062: LD_ADDR_VAR 0 2
24066: PUSH
24067: LD_STRING 0
24069: ST_TO_ADDR
// if result [ 2 ] then
24070: LD_VAR 0 1
24074: PUSH
24075: LD_INT 2
24077: ARRAY
24078: IFFALSE 24147
// if result [ 2 ] [ 1 ] = 100 + i then
24080: LD_VAR 0 1
24084: PUSH
24085: LD_INT 2
24087: ARRAY
24088: PUSH
24089: LD_INT 1
24091: ARRAY
24092: PUSH
24093: LD_INT 100
24095: PUSH
24096: LD_VAR 0 5
24100: PLUS
24101: EQUAL
24102: IFFALSE 24147
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24104: LD_ADDR_VAR 0 1
24108: PUSH
24109: LD_VAR 0 1
24113: PPUSH
24114: LD_INT 2
24116: PPUSH
24117: LD_VAR 0 1
24121: PUSH
24122: LD_INT 2
24124: ARRAY
24125: PPUSH
24126: LD_INT 1
24128: PPUSH
24129: CALL_OW 3
24133: PPUSH
24134: CALL_OW 1
24138: ST_TO_ADDR
// tmp := 1 ;
24139: LD_ADDR_VAR 0 2
24143: PUSH
24144: LD_STRING 1
24146: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24147: LD_ADDR_VAR 0 4
24151: PUSH
24152: LD_VAR 0 4
24156: PUSH
24157: LD_VAR 0 2
24161: STR
24162: ST_TO_ADDR
// end ;
24163: GO 24059
24165: POP
24166: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24167: LD_STRING getStreamItemsFromMission("
24169: PUSH
24170: LD_VAR 0 3
24174: STR
24175: PUSH
24176: LD_STRING ","
24178: STR
24179: PUSH
24180: LD_VAR 0 4
24184: STR
24185: PUSH
24186: LD_STRING ")
24188: STR
24189: PPUSH
24190: CALL_OW 559
// end else
24194: GO 24203
// ToLua ( getStreamItemsFromMission("","") ) ;
24196: LD_STRING getStreamItemsFromMission("","")
24198: PPUSH
24199: CALL_OW 559
// end ;
24203: LD_VAR 0 1
24207: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24208: LD_EXP 64
24212: PUSH
24213: LD_EXP 69
24217: AND
24218: IFFALSE 24342
24220: GO 24222
24222: DISABLE
24223: LD_INT 0
24225: PPUSH
24226: PPUSH
// begin enable ;
24227: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24228: LD_ADDR_VAR 0 2
24232: PUSH
24233: LD_INT 22
24235: PUSH
24236: LD_OWVAR 2
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 2
24247: PUSH
24248: LD_INT 34
24250: PUSH
24251: LD_INT 7
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 34
24260: PUSH
24261: LD_INT 45
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 34
24270: PUSH
24271: LD_INT 28
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 34
24280: PUSH
24281: LD_INT 47
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PPUSH
24299: CALL_OW 69
24303: ST_TO_ADDR
// if not tmp then
24304: LD_VAR 0 2
24308: NOT
24309: IFFALSE 24313
// exit ;
24311: GO 24342
// for i in tmp do
24313: LD_ADDR_VAR 0 1
24317: PUSH
24318: LD_VAR 0 2
24322: PUSH
24323: FOR_IN
24324: IFFALSE 24340
// begin SetLives ( i , 0 ) ;
24326: LD_VAR 0 1
24330: PPUSH
24331: LD_INT 0
24333: PPUSH
24334: CALL_OW 234
// end ;
24338: GO 24323
24340: POP
24341: POP
// end ;
24342: PPOPN 2
24344: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24345: LD_EXP 64
24349: PUSH
24350: LD_EXP 70
24354: AND
24355: IFFALSE 24439
24357: GO 24359
24359: DISABLE
24360: LD_INT 0
24362: PPUSH
24363: PPUSH
// begin enable ;
24364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24365: LD_ADDR_VAR 0 2
24369: PUSH
24370: LD_INT 22
24372: PUSH
24373: LD_OWVAR 2
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 32
24384: PUSH
24385: LD_INT 3
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PPUSH
24396: CALL_OW 69
24400: ST_TO_ADDR
// if not tmp then
24401: LD_VAR 0 2
24405: NOT
24406: IFFALSE 24410
// exit ;
24408: GO 24439
// for i in tmp do
24410: LD_ADDR_VAR 0 1
24414: PUSH
24415: LD_VAR 0 2
24419: PUSH
24420: FOR_IN
24421: IFFALSE 24437
// begin SetLives ( i , 0 ) ;
24423: LD_VAR 0 1
24427: PPUSH
24428: LD_INT 0
24430: PPUSH
24431: CALL_OW 234
// end ;
24435: GO 24420
24437: POP
24438: POP
// end ;
24439: PPOPN 2
24441: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24442: LD_EXP 64
24446: PUSH
24447: LD_EXP 67
24451: AND
24452: IFFALSE 24545
24454: GO 24456
24456: DISABLE
24457: LD_INT 0
24459: PPUSH
// begin enable ;
24460: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24461: LD_ADDR_VAR 0 1
24465: PUSH
24466: LD_INT 22
24468: PUSH
24469: LD_OWVAR 2
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 2
24480: PUSH
24481: LD_INT 25
24483: PUSH
24484: LD_INT 5
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 25
24493: PUSH
24494: LD_INT 9
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 25
24503: PUSH
24504: LD_INT 8
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PPUSH
24521: CALL_OW 69
24525: PUSH
24526: FOR_IN
24527: IFFALSE 24543
// begin SetClass ( i , 1 ) ;
24529: LD_VAR 0 1
24533: PPUSH
24534: LD_INT 1
24536: PPUSH
24537: CALL_OW 336
// end ;
24541: GO 24526
24543: POP
24544: POP
// end ;
24545: PPOPN 1
24547: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24548: LD_EXP 64
24552: PUSH
24553: LD_EXP 68
24557: AND
24558: PUSH
24559: LD_OWVAR 65
24563: PUSH
24564: LD_INT 7
24566: LESS
24567: AND
24568: IFFALSE 24582
24570: GO 24572
24572: DISABLE
// begin enable ;
24573: ENABLE
// game_speed := 7 ;
24574: LD_ADDR_OWVAR 65
24578: PUSH
24579: LD_INT 7
24581: ST_TO_ADDR
// end ;
24582: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24583: LD_EXP 64
24587: PUSH
24588: LD_EXP 71
24592: AND
24593: IFFALSE 24795
24595: GO 24597
24597: DISABLE
24598: LD_INT 0
24600: PPUSH
24601: PPUSH
24602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24603: LD_ADDR_VAR 0 3
24607: PUSH
24608: LD_INT 81
24610: PUSH
24611: LD_OWVAR 2
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 21
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PPUSH
24634: CALL_OW 69
24638: ST_TO_ADDR
// if not tmp then
24639: LD_VAR 0 3
24643: NOT
24644: IFFALSE 24648
// exit ;
24646: GO 24795
// if tmp > 5 then
24648: LD_VAR 0 3
24652: PUSH
24653: LD_INT 5
24655: GREATER
24656: IFFALSE 24668
// k := 5 else
24658: LD_ADDR_VAR 0 2
24662: PUSH
24663: LD_INT 5
24665: ST_TO_ADDR
24666: GO 24678
// k := tmp ;
24668: LD_ADDR_VAR 0 2
24672: PUSH
24673: LD_VAR 0 3
24677: ST_TO_ADDR
// for i := 1 to k do
24678: LD_ADDR_VAR 0 1
24682: PUSH
24683: DOUBLE
24684: LD_INT 1
24686: DEC
24687: ST_TO_ADDR
24688: LD_VAR 0 2
24692: PUSH
24693: FOR_TO
24694: IFFALSE 24793
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24696: LD_VAR 0 3
24700: PUSH
24701: LD_VAR 0 1
24705: ARRAY
24706: PPUSH
24707: LD_VAR 0 1
24711: PUSH
24712: LD_INT 4
24714: MOD
24715: PUSH
24716: LD_INT 1
24718: PLUS
24719: PPUSH
24720: CALL_OW 259
24724: PUSH
24725: LD_INT 10
24727: LESS
24728: IFFALSE 24791
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24730: LD_VAR 0 3
24734: PUSH
24735: LD_VAR 0 1
24739: ARRAY
24740: PPUSH
24741: LD_VAR 0 1
24745: PUSH
24746: LD_INT 4
24748: MOD
24749: PUSH
24750: LD_INT 1
24752: PLUS
24753: PPUSH
24754: LD_VAR 0 3
24758: PUSH
24759: LD_VAR 0 1
24763: ARRAY
24764: PPUSH
24765: LD_VAR 0 1
24769: PUSH
24770: LD_INT 4
24772: MOD
24773: PUSH
24774: LD_INT 1
24776: PLUS
24777: PPUSH
24778: CALL_OW 259
24782: PUSH
24783: LD_INT 1
24785: PLUS
24786: PPUSH
24787: CALL_OW 237
24791: GO 24693
24793: POP
24794: POP
// end ;
24795: PPOPN 3
24797: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24798: LD_EXP 64
24802: PUSH
24803: LD_EXP 72
24807: AND
24808: IFFALSE 24828
24810: GO 24812
24812: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24813: LD_INT 4
24815: PPUSH
24816: LD_OWVAR 2
24820: PPUSH
24821: LD_INT 0
24823: PPUSH
24824: CALL_OW 324
24828: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24829: LD_EXP 64
24833: PUSH
24834: LD_EXP 101
24838: AND
24839: IFFALSE 24859
24841: GO 24843
24843: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24844: LD_INT 19
24846: PPUSH
24847: LD_OWVAR 2
24851: PPUSH
24852: LD_INT 0
24854: PPUSH
24855: CALL_OW 324
24859: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24860: LD_EXP 64
24864: PUSH
24865: LD_EXP 73
24869: AND
24870: IFFALSE 24972
24872: GO 24874
24874: DISABLE
24875: LD_INT 0
24877: PPUSH
24878: PPUSH
// begin enable ;
24879: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24880: LD_ADDR_VAR 0 2
24884: PUSH
24885: LD_INT 22
24887: PUSH
24888: LD_OWVAR 2
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 2
24899: PUSH
24900: LD_INT 34
24902: PUSH
24903: LD_INT 11
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 34
24912: PUSH
24913: LD_INT 30
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: LIST
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PPUSH
24929: CALL_OW 69
24933: ST_TO_ADDR
// if not tmp then
24934: LD_VAR 0 2
24938: NOT
24939: IFFALSE 24943
// exit ;
24941: GO 24972
// for i in tmp do
24943: LD_ADDR_VAR 0 1
24947: PUSH
24948: LD_VAR 0 2
24952: PUSH
24953: FOR_IN
24954: IFFALSE 24970
// begin SetLives ( i , 0 ) ;
24956: LD_VAR 0 1
24960: PPUSH
24961: LD_INT 0
24963: PPUSH
24964: CALL_OW 234
// end ;
24968: GO 24953
24970: POP
24971: POP
// end ;
24972: PPOPN 2
24974: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24975: LD_EXP 64
24979: PUSH
24980: LD_EXP 74
24984: AND
24985: IFFALSE 25005
24987: GO 24989
24989: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24990: LD_INT 32
24992: PPUSH
24993: LD_OWVAR 2
24997: PPUSH
24998: LD_INT 0
25000: PPUSH
25001: CALL_OW 324
25005: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25006: LD_EXP 64
25010: PUSH
25011: LD_EXP 75
25015: AND
25016: IFFALSE 25197
25018: GO 25020
25020: DISABLE
25021: LD_INT 0
25023: PPUSH
25024: PPUSH
25025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25026: LD_ADDR_VAR 0 2
25030: PUSH
25031: LD_INT 22
25033: PUSH
25034: LD_OWVAR 2
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 33
25045: PUSH
25046: LD_INT 3
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PPUSH
25057: CALL_OW 69
25061: ST_TO_ADDR
// if not tmp then
25062: LD_VAR 0 2
25066: NOT
25067: IFFALSE 25071
// exit ;
25069: GO 25197
// side := 0 ;
25071: LD_ADDR_VAR 0 3
25075: PUSH
25076: LD_INT 0
25078: ST_TO_ADDR
// for i := 1 to 8 do
25079: LD_ADDR_VAR 0 1
25083: PUSH
25084: DOUBLE
25085: LD_INT 1
25087: DEC
25088: ST_TO_ADDR
25089: LD_INT 8
25091: PUSH
25092: FOR_TO
25093: IFFALSE 25141
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25095: LD_OWVAR 2
25099: PUSH
25100: LD_VAR 0 1
25104: NONEQUAL
25105: PUSH
25106: LD_OWVAR 2
25110: PPUSH
25111: LD_VAR 0 1
25115: PPUSH
25116: CALL_OW 81
25120: PUSH
25121: LD_INT 2
25123: EQUAL
25124: AND
25125: IFFALSE 25139
// begin side := i ;
25127: LD_ADDR_VAR 0 3
25131: PUSH
25132: LD_VAR 0 1
25136: ST_TO_ADDR
// break ;
25137: GO 25141
// end ;
25139: GO 25092
25141: POP
25142: POP
// if not side then
25143: LD_VAR 0 3
25147: NOT
25148: IFFALSE 25152
// exit ;
25150: GO 25197
// for i := 1 to tmp do
25152: LD_ADDR_VAR 0 1
25156: PUSH
25157: DOUBLE
25158: LD_INT 1
25160: DEC
25161: ST_TO_ADDR
25162: LD_VAR 0 2
25166: PUSH
25167: FOR_TO
25168: IFFALSE 25195
// if Prob ( 60 ) then
25170: LD_INT 60
25172: PPUSH
25173: CALL_OW 13
25177: IFFALSE 25193
// SetSide ( i , side ) ;
25179: LD_VAR 0 1
25183: PPUSH
25184: LD_VAR 0 3
25188: PPUSH
25189: CALL_OW 235
25193: GO 25167
25195: POP
25196: POP
// end ;
25197: PPOPN 3
25199: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25200: LD_EXP 64
25204: PUSH
25205: LD_EXP 77
25209: AND
25210: IFFALSE 25329
25212: GO 25214
25214: DISABLE
25215: LD_INT 0
25217: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25218: LD_ADDR_VAR 0 1
25222: PUSH
25223: LD_INT 22
25225: PUSH
25226: LD_OWVAR 2
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 21
25237: PUSH
25238: LD_INT 1
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 3
25247: PUSH
25248: LD_INT 23
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: LIST
25266: PPUSH
25267: CALL_OW 69
25271: PUSH
25272: FOR_IN
25273: IFFALSE 25327
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25275: LD_VAR 0 1
25279: PPUSH
25280: CALL_OW 257
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: LD_INT 2
25290: PUSH
25291: LD_INT 3
25293: PUSH
25294: LD_INT 4
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: IN
25303: IFFALSE 25325
// SetClass ( un , rand ( 1 , 4 ) ) ;
25305: LD_VAR 0 1
25309: PPUSH
25310: LD_INT 1
25312: PPUSH
25313: LD_INT 4
25315: PPUSH
25316: CALL_OW 12
25320: PPUSH
25321: CALL_OW 336
25325: GO 25272
25327: POP
25328: POP
// end ;
25329: PPOPN 1
25331: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25332: LD_EXP 64
25336: PUSH
25337: LD_EXP 76
25341: AND
25342: IFFALSE 25421
25344: GO 25346
25346: DISABLE
25347: LD_INT 0
25349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25350: LD_ADDR_VAR 0 1
25354: PUSH
25355: LD_INT 22
25357: PUSH
25358: LD_OWVAR 2
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 21
25369: PUSH
25370: LD_INT 3
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PPUSH
25381: CALL_OW 69
25385: ST_TO_ADDR
// if not tmp then
25386: LD_VAR 0 1
25390: NOT
25391: IFFALSE 25395
// exit ;
25393: GO 25421
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25395: LD_VAR 0 1
25399: PUSH
25400: LD_INT 1
25402: PPUSH
25403: LD_VAR 0 1
25407: PPUSH
25408: CALL_OW 12
25412: ARRAY
25413: PPUSH
25414: LD_INT 100
25416: PPUSH
25417: CALL_OW 234
// end ;
25421: PPOPN 1
25423: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25424: LD_EXP 64
25428: PUSH
25429: LD_EXP 78
25433: AND
25434: IFFALSE 25532
25436: GO 25438
25438: DISABLE
25439: LD_INT 0
25441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25442: LD_ADDR_VAR 0 1
25446: PUSH
25447: LD_INT 22
25449: PUSH
25450: LD_OWVAR 2
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 21
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PPUSH
25473: CALL_OW 69
25477: ST_TO_ADDR
// if not tmp then
25478: LD_VAR 0 1
25482: NOT
25483: IFFALSE 25487
// exit ;
25485: GO 25532
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25487: LD_VAR 0 1
25491: PUSH
25492: LD_INT 1
25494: PPUSH
25495: LD_VAR 0 1
25499: PPUSH
25500: CALL_OW 12
25504: ARRAY
25505: PPUSH
25506: LD_INT 1
25508: PPUSH
25509: LD_INT 4
25511: PPUSH
25512: CALL_OW 12
25516: PPUSH
25517: LD_INT 3000
25519: PPUSH
25520: LD_INT 9000
25522: PPUSH
25523: CALL_OW 12
25527: PPUSH
25528: CALL_OW 492
// end ;
25532: PPOPN 1
25534: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25535: LD_EXP 64
25539: PUSH
25540: LD_EXP 79
25544: AND
25545: IFFALSE 25565
25547: GO 25549
25549: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25550: LD_INT 1
25552: PPUSH
25553: LD_OWVAR 2
25557: PPUSH
25558: LD_INT 0
25560: PPUSH
25561: CALL_OW 324
25565: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25566: LD_EXP 64
25570: PUSH
25571: LD_EXP 80
25575: AND
25576: IFFALSE 25659
25578: GO 25580
25580: DISABLE
25581: LD_INT 0
25583: PPUSH
25584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25585: LD_ADDR_VAR 0 2
25589: PUSH
25590: LD_INT 22
25592: PUSH
25593: LD_OWVAR 2
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 21
25604: PUSH
25605: LD_INT 3
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PPUSH
25616: CALL_OW 69
25620: ST_TO_ADDR
// if not tmp then
25621: LD_VAR 0 2
25625: NOT
25626: IFFALSE 25630
// exit ;
25628: GO 25659
// for i in tmp do
25630: LD_ADDR_VAR 0 1
25634: PUSH
25635: LD_VAR 0 2
25639: PUSH
25640: FOR_IN
25641: IFFALSE 25657
// SetBLevel ( i , 10 ) ;
25643: LD_VAR 0 1
25647: PPUSH
25648: LD_INT 10
25650: PPUSH
25651: CALL_OW 241
25655: GO 25640
25657: POP
25658: POP
// end ;
25659: PPOPN 2
25661: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25662: LD_EXP 64
25666: PUSH
25667: LD_EXP 81
25671: AND
25672: IFFALSE 25783
25674: GO 25676
25676: DISABLE
25677: LD_INT 0
25679: PPUSH
25680: PPUSH
25681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25682: LD_ADDR_VAR 0 3
25686: PUSH
25687: LD_INT 22
25689: PUSH
25690: LD_OWVAR 2
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 25
25701: PUSH
25702: LD_INT 1
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PPUSH
25713: CALL_OW 69
25717: ST_TO_ADDR
// if not tmp then
25718: LD_VAR 0 3
25722: NOT
25723: IFFALSE 25727
// exit ;
25725: GO 25783
// un := tmp [ rand ( 1 , tmp ) ] ;
25727: LD_ADDR_VAR 0 2
25731: PUSH
25732: LD_VAR 0 3
25736: PUSH
25737: LD_INT 1
25739: PPUSH
25740: LD_VAR 0 3
25744: PPUSH
25745: CALL_OW 12
25749: ARRAY
25750: ST_TO_ADDR
// if Crawls ( un ) then
25751: LD_VAR 0 2
25755: PPUSH
25756: CALL_OW 318
25760: IFFALSE 25771
// ComWalk ( un ) ;
25762: LD_VAR 0 2
25766: PPUSH
25767: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25771: LD_VAR 0 2
25775: PPUSH
25776: LD_INT 5
25778: PPUSH
25779: CALL_OW 336
// end ;
25783: PPOPN 3
25785: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25786: LD_EXP 64
25790: PUSH
25791: LD_EXP 82
25795: AND
25796: PUSH
25797: LD_OWVAR 67
25801: PUSH
25802: LD_INT 3
25804: LESS
25805: AND
25806: IFFALSE 25825
25808: GO 25810
25810: DISABLE
// Difficulty := Difficulty + 1 ;
25811: LD_ADDR_OWVAR 67
25815: PUSH
25816: LD_OWVAR 67
25820: PUSH
25821: LD_INT 1
25823: PLUS
25824: ST_TO_ADDR
25825: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25826: LD_EXP 64
25830: PUSH
25831: LD_EXP 83
25835: AND
25836: IFFALSE 25939
25838: GO 25840
25840: DISABLE
25841: LD_INT 0
25843: PPUSH
// begin for i := 1 to 5 do
25844: LD_ADDR_VAR 0 1
25848: PUSH
25849: DOUBLE
25850: LD_INT 1
25852: DEC
25853: ST_TO_ADDR
25854: LD_INT 5
25856: PUSH
25857: FOR_TO
25858: IFFALSE 25937
// begin uc_nation := nation_nature ;
25860: LD_ADDR_OWVAR 21
25864: PUSH
25865: LD_INT 0
25867: ST_TO_ADDR
// uc_side := 0 ;
25868: LD_ADDR_OWVAR 20
25872: PUSH
25873: LD_INT 0
25875: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25876: LD_ADDR_OWVAR 29
25880: PUSH
25881: LD_INT 12
25883: PUSH
25884: LD_INT 12
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: ST_TO_ADDR
// hc_agressivity := 20 ;
25891: LD_ADDR_OWVAR 35
25895: PUSH
25896: LD_INT 20
25898: ST_TO_ADDR
// hc_class := class_tiger ;
25899: LD_ADDR_OWVAR 28
25903: PUSH
25904: LD_INT 14
25906: ST_TO_ADDR
// hc_gallery :=  ;
25907: LD_ADDR_OWVAR 33
25911: PUSH
25912: LD_STRING 
25914: ST_TO_ADDR
// hc_name :=  ;
25915: LD_ADDR_OWVAR 26
25919: PUSH
25920: LD_STRING 
25922: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25923: CALL_OW 44
25927: PPUSH
25928: LD_INT 0
25930: PPUSH
25931: CALL_OW 51
// end ;
25935: GO 25857
25937: POP
25938: POP
// end ;
25939: PPOPN 1
25941: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25942: LD_EXP 64
25946: PUSH
25947: LD_EXP 84
25951: AND
25952: IFFALSE 25961
25954: GO 25956
25956: DISABLE
// StreamSibBomb ;
25957: CALL 25962 0 0
25961: END
// export function StreamSibBomb ; var i , x , y ; begin
25962: LD_INT 0
25964: PPUSH
25965: PPUSH
25966: PPUSH
25967: PPUSH
// result := false ;
25968: LD_ADDR_VAR 0 1
25972: PUSH
25973: LD_INT 0
25975: ST_TO_ADDR
// for i := 1 to 16 do
25976: LD_ADDR_VAR 0 2
25980: PUSH
25981: DOUBLE
25982: LD_INT 1
25984: DEC
25985: ST_TO_ADDR
25986: LD_INT 16
25988: PUSH
25989: FOR_TO
25990: IFFALSE 26189
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25992: LD_ADDR_VAR 0 3
25996: PUSH
25997: LD_INT 10
25999: PUSH
26000: LD_INT 20
26002: PUSH
26003: LD_INT 30
26005: PUSH
26006: LD_INT 40
26008: PUSH
26009: LD_INT 50
26011: PUSH
26012: LD_INT 60
26014: PUSH
26015: LD_INT 70
26017: PUSH
26018: LD_INT 80
26020: PUSH
26021: LD_INT 90
26023: PUSH
26024: LD_INT 100
26026: PUSH
26027: LD_INT 110
26029: PUSH
26030: LD_INT 120
26032: PUSH
26033: LD_INT 130
26035: PUSH
26036: LD_INT 140
26038: PUSH
26039: LD_INT 150
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: PPUSH
26062: LD_INT 15
26064: PPUSH
26065: CALL_OW 12
26069: ARRAY
26070: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26071: LD_ADDR_VAR 0 4
26075: PUSH
26076: LD_INT 10
26078: PUSH
26079: LD_INT 20
26081: PUSH
26082: LD_INT 30
26084: PUSH
26085: LD_INT 40
26087: PUSH
26088: LD_INT 50
26090: PUSH
26091: LD_INT 60
26093: PUSH
26094: LD_INT 70
26096: PUSH
26097: LD_INT 80
26099: PUSH
26100: LD_INT 90
26102: PUSH
26103: LD_INT 100
26105: PUSH
26106: LD_INT 110
26108: PUSH
26109: LD_INT 120
26111: PUSH
26112: LD_INT 130
26114: PUSH
26115: LD_INT 140
26117: PUSH
26118: LD_INT 150
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: PPUSH
26141: LD_INT 15
26143: PPUSH
26144: CALL_OW 12
26148: ARRAY
26149: ST_TO_ADDR
// if ValidHex ( x , y ) then
26150: LD_VAR 0 3
26154: PPUSH
26155: LD_VAR 0 4
26159: PPUSH
26160: CALL_OW 488
26164: IFFALSE 26187
// begin result := [ x , y ] ;
26166: LD_ADDR_VAR 0 1
26170: PUSH
26171: LD_VAR 0 3
26175: PUSH
26176: LD_VAR 0 4
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: ST_TO_ADDR
// break ;
26185: GO 26189
// end ; end ;
26187: GO 25989
26189: POP
26190: POP
// if result then
26191: LD_VAR 0 1
26195: IFFALSE 26255
// begin ToLua ( playSibBomb() ) ;
26197: LD_STRING playSibBomb()
26199: PPUSH
26200: CALL_OW 559
// wait ( 0 0$14 ) ;
26204: LD_INT 490
26206: PPUSH
26207: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26211: LD_VAR 0 1
26215: PUSH
26216: LD_INT 1
26218: ARRAY
26219: PPUSH
26220: LD_VAR 0 1
26224: PUSH
26225: LD_INT 2
26227: ARRAY
26228: PPUSH
26229: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26233: LD_VAR 0 1
26237: PUSH
26238: LD_INT 1
26240: ARRAY
26241: PPUSH
26242: LD_VAR 0 1
26246: PUSH
26247: LD_INT 2
26249: ARRAY
26250: PPUSH
26251: CALL_OW 429
// end ; end ;
26255: LD_VAR 0 1
26259: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26260: LD_EXP 64
26264: PUSH
26265: LD_EXP 86
26269: AND
26270: IFFALSE 26282
26272: GO 26274
26274: DISABLE
// YouLost (  ) ;
26275: LD_STRING 
26277: PPUSH
26278: CALL_OW 104
26282: END
// every 0 0$1 trigger StreamModeActive and sFog do
26283: LD_EXP 64
26287: PUSH
26288: LD_EXP 85
26292: AND
26293: IFFALSE 26307
26295: GO 26297
26297: DISABLE
// FogOff ( your_side ) ;
26298: LD_OWVAR 2
26302: PPUSH
26303: CALL_OW 344
26307: END
// every 0 0$1 trigger StreamModeActive and sSun do
26308: LD_EXP 64
26312: PUSH
26313: LD_EXP 87
26317: AND
26318: IFFALSE 26346
26320: GO 26322
26322: DISABLE
// begin solar_recharge_percent := 0 ;
26323: LD_ADDR_OWVAR 79
26327: PUSH
26328: LD_INT 0
26330: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26331: LD_INT 10500
26333: PPUSH
26334: CALL_OW 67
// solar_recharge_percent := 100 ;
26338: LD_ADDR_OWVAR 79
26342: PUSH
26343: LD_INT 100
26345: ST_TO_ADDR
// end ;
26346: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26347: LD_EXP 64
26351: PUSH
26352: LD_EXP 88
26356: AND
26357: IFFALSE 26596
26359: GO 26361
26361: DISABLE
26362: LD_INT 0
26364: PPUSH
26365: PPUSH
26366: PPUSH
// begin tmp := [ ] ;
26367: LD_ADDR_VAR 0 3
26371: PUSH
26372: EMPTY
26373: ST_TO_ADDR
// for i := 1 to 6 do
26374: LD_ADDR_VAR 0 1
26378: PUSH
26379: DOUBLE
26380: LD_INT 1
26382: DEC
26383: ST_TO_ADDR
26384: LD_INT 6
26386: PUSH
26387: FOR_TO
26388: IFFALSE 26493
// begin uc_nation := nation_nature ;
26390: LD_ADDR_OWVAR 21
26394: PUSH
26395: LD_INT 0
26397: ST_TO_ADDR
// uc_side := 0 ;
26398: LD_ADDR_OWVAR 20
26402: PUSH
26403: LD_INT 0
26405: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26406: LD_ADDR_OWVAR 29
26410: PUSH
26411: LD_INT 12
26413: PUSH
26414: LD_INT 12
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: ST_TO_ADDR
// hc_agressivity := 20 ;
26421: LD_ADDR_OWVAR 35
26425: PUSH
26426: LD_INT 20
26428: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26429: LD_ADDR_OWVAR 28
26433: PUSH
26434: LD_INT 17
26436: ST_TO_ADDR
// hc_gallery :=  ;
26437: LD_ADDR_OWVAR 33
26441: PUSH
26442: LD_STRING 
26444: ST_TO_ADDR
// hc_name :=  ;
26445: LD_ADDR_OWVAR 26
26449: PUSH
26450: LD_STRING 
26452: ST_TO_ADDR
// un := CreateHuman ;
26453: LD_ADDR_VAR 0 2
26457: PUSH
26458: CALL_OW 44
26462: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26463: LD_VAR 0 2
26467: PPUSH
26468: LD_INT 1
26470: PPUSH
26471: CALL_OW 51
// tmp := tmp ^ un ;
26475: LD_ADDR_VAR 0 3
26479: PUSH
26480: LD_VAR 0 3
26484: PUSH
26485: LD_VAR 0 2
26489: ADD
26490: ST_TO_ADDR
// end ;
26491: GO 26387
26493: POP
26494: POP
// repeat wait ( 0 0$1 ) ;
26495: LD_INT 35
26497: PPUSH
26498: CALL_OW 67
// for un in tmp do
26502: LD_ADDR_VAR 0 2
26506: PUSH
26507: LD_VAR 0 3
26511: PUSH
26512: FOR_IN
26513: IFFALSE 26587
// begin if IsDead ( un ) then
26515: LD_VAR 0 2
26519: PPUSH
26520: CALL_OW 301
26524: IFFALSE 26544
// begin tmp := tmp diff un ;
26526: LD_ADDR_VAR 0 3
26530: PUSH
26531: LD_VAR 0 3
26535: PUSH
26536: LD_VAR 0 2
26540: DIFF
26541: ST_TO_ADDR
// continue ;
26542: GO 26512
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26544: LD_VAR 0 2
26548: PPUSH
26549: LD_INT 3
26551: PUSH
26552: LD_INT 22
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PPUSH
26566: CALL_OW 69
26570: PPUSH
26571: LD_VAR 0 2
26575: PPUSH
26576: CALL_OW 74
26580: PPUSH
26581: CALL_OW 115
// end ;
26585: GO 26512
26587: POP
26588: POP
// until not tmp ;
26589: LD_VAR 0 3
26593: NOT
26594: IFFALSE 26495
// end ;
26596: PPOPN 3
26598: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26599: LD_EXP 64
26603: PUSH
26604: LD_EXP 89
26608: AND
26609: IFFALSE 26663
26611: GO 26613
26613: DISABLE
// begin ToLua ( displayTroll(); ) ;
26614: LD_STRING displayTroll();
26616: PPUSH
26617: CALL_OW 559
// wait ( 3 3$00 ) ;
26621: LD_INT 6300
26623: PPUSH
26624: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26628: LD_STRING hideTroll();
26630: PPUSH
26631: CALL_OW 559
// wait ( 1 1$00 ) ;
26635: LD_INT 2100
26637: PPUSH
26638: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26642: LD_STRING displayTroll();
26644: PPUSH
26645: CALL_OW 559
// wait ( 1 1$00 ) ;
26649: LD_INT 2100
26651: PPUSH
26652: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26656: LD_STRING hideTroll();
26658: PPUSH
26659: CALL_OW 559
// end ;
26663: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26664: LD_EXP 64
26668: PUSH
26669: LD_EXP 90
26673: AND
26674: IFFALSE 26737
26676: GO 26678
26678: DISABLE
26679: LD_INT 0
26681: PPUSH
// begin p := 0 ;
26682: LD_ADDR_VAR 0 1
26686: PUSH
26687: LD_INT 0
26689: ST_TO_ADDR
// repeat game_speed := 1 ;
26690: LD_ADDR_OWVAR 65
26694: PUSH
26695: LD_INT 1
26697: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26698: LD_INT 35
26700: PPUSH
26701: CALL_OW 67
// p := p + 1 ;
26705: LD_ADDR_VAR 0 1
26709: PUSH
26710: LD_VAR 0 1
26714: PUSH
26715: LD_INT 1
26717: PLUS
26718: ST_TO_ADDR
// until p >= 60 ;
26719: LD_VAR 0 1
26723: PUSH
26724: LD_INT 60
26726: GREATEREQUAL
26727: IFFALSE 26690
// game_speed := 4 ;
26729: LD_ADDR_OWVAR 65
26733: PUSH
26734: LD_INT 4
26736: ST_TO_ADDR
// end ;
26737: PPOPN 1
26739: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26740: LD_EXP 64
26744: PUSH
26745: LD_EXP 91
26749: AND
26750: IFFALSE 26896
26752: GO 26754
26754: DISABLE
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26759: LD_ADDR_VAR 0 1
26763: PUSH
26764: LD_INT 22
26766: PUSH
26767: LD_OWVAR 2
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: LD_INT 30
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 30
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: LIST
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PPUSH
26808: CALL_OW 69
26812: ST_TO_ADDR
// if not depot then
26813: LD_VAR 0 1
26817: NOT
26818: IFFALSE 26822
// exit ;
26820: GO 26896
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26822: LD_ADDR_VAR 0 2
26826: PUSH
26827: LD_VAR 0 1
26831: PUSH
26832: LD_INT 1
26834: PPUSH
26835: LD_VAR 0 1
26839: PPUSH
26840: CALL_OW 12
26844: ARRAY
26845: PPUSH
26846: CALL_OW 274
26850: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26851: LD_VAR 0 2
26855: PPUSH
26856: LD_INT 1
26858: PPUSH
26859: LD_INT 0
26861: PPUSH
26862: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26866: LD_VAR 0 2
26870: PPUSH
26871: LD_INT 2
26873: PPUSH
26874: LD_INT 0
26876: PPUSH
26877: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26881: LD_VAR 0 2
26885: PPUSH
26886: LD_INT 3
26888: PPUSH
26889: LD_INT 0
26891: PPUSH
26892: CALL_OW 277
// end ;
26896: PPOPN 2
26898: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26899: LD_EXP 64
26903: PUSH
26904: LD_EXP 92
26908: AND
26909: IFFALSE 27006
26911: GO 26913
26913: DISABLE
26914: LD_INT 0
26916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26917: LD_ADDR_VAR 0 1
26921: PUSH
26922: LD_INT 22
26924: PUSH
26925: LD_OWVAR 2
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 21
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 3
26946: PUSH
26947: LD_INT 23
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: LIST
26965: PPUSH
26966: CALL_OW 69
26970: ST_TO_ADDR
// if not tmp then
26971: LD_VAR 0 1
26975: NOT
26976: IFFALSE 26980
// exit ;
26978: GO 27006
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26980: LD_VAR 0 1
26984: PUSH
26985: LD_INT 1
26987: PPUSH
26988: LD_VAR 0 1
26992: PPUSH
26993: CALL_OW 12
26997: ARRAY
26998: PPUSH
26999: LD_INT 200
27001: PPUSH
27002: CALL_OW 234
// end ;
27006: PPOPN 1
27008: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27009: LD_EXP 64
27013: PUSH
27014: LD_EXP 93
27018: AND
27019: IFFALSE 27098
27021: GO 27023
27023: DISABLE
27024: LD_INT 0
27026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27027: LD_ADDR_VAR 0 1
27031: PUSH
27032: LD_INT 22
27034: PUSH
27035: LD_OWVAR 2
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 21
27046: PUSH
27047: LD_INT 2
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PPUSH
27058: CALL_OW 69
27062: ST_TO_ADDR
// if not tmp then
27063: LD_VAR 0 1
27067: NOT
27068: IFFALSE 27072
// exit ;
27070: GO 27098
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27072: LD_VAR 0 1
27076: PUSH
27077: LD_INT 1
27079: PPUSH
27080: LD_VAR 0 1
27084: PPUSH
27085: CALL_OW 12
27089: ARRAY
27090: PPUSH
27091: LD_INT 60
27093: PPUSH
27094: CALL_OW 234
// end ;
27098: PPOPN 1
27100: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27101: LD_EXP 64
27105: PUSH
27106: LD_EXP 94
27110: AND
27111: IFFALSE 27210
27113: GO 27115
27115: DISABLE
27116: LD_INT 0
27118: PPUSH
27119: PPUSH
// begin enable ;
27120: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27121: LD_ADDR_VAR 0 1
27125: PUSH
27126: LD_INT 22
27128: PUSH
27129: LD_OWVAR 2
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 61
27140: PUSH
27141: EMPTY
27142: LIST
27143: PUSH
27144: LD_INT 33
27146: PUSH
27147: LD_INT 2
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: PPUSH
27159: CALL_OW 69
27163: ST_TO_ADDR
// if not tmp then
27164: LD_VAR 0 1
27168: NOT
27169: IFFALSE 27173
// exit ;
27171: GO 27210
// for i in tmp do
27173: LD_ADDR_VAR 0 2
27177: PUSH
27178: LD_VAR 0 1
27182: PUSH
27183: FOR_IN
27184: IFFALSE 27208
// if IsControledBy ( i ) then
27186: LD_VAR 0 2
27190: PPUSH
27191: CALL_OW 312
27195: IFFALSE 27206
// ComUnlink ( i ) ;
27197: LD_VAR 0 2
27201: PPUSH
27202: CALL_OW 136
27206: GO 27183
27208: POP
27209: POP
// end ;
27210: PPOPN 2
27212: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27213: LD_EXP 64
27217: PUSH
27218: LD_EXP 95
27222: AND
27223: IFFALSE 27363
27225: GO 27227
27227: DISABLE
27228: LD_INT 0
27230: PPUSH
27231: PPUSH
// begin ToLua ( displayPowell(); ) ;
27232: LD_STRING displayPowell();
27234: PPUSH
27235: CALL_OW 559
// uc_side := 0 ;
27239: LD_ADDR_OWVAR 20
27243: PUSH
27244: LD_INT 0
27246: ST_TO_ADDR
// uc_nation := 2 ;
27247: LD_ADDR_OWVAR 21
27251: PUSH
27252: LD_INT 2
27254: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27255: LD_ADDR_OWVAR 37
27259: PUSH
27260: LD_INT 14
27262: ST_TO_ADDR
// vc_engine := engine_siberite ;
27263: LD_ADDR_OWVAR 39
27267: PUSH
27268: LD_INT 3
27270: ST_TO_ADDR
// vc_control := control_apeman ;
27271: LD_ADDR_OWVAR 38
27275: PUSH
27276: LD_INT 5
27278: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27279: LD_ADDR_OWVAR 40
27283: PUSH
27284: LD_INT 29
27286: ST_TO_ADDR
// un := CreateVehicle ;
27287: LD_ADDR_VAR 0 2
27291: PUSH
27292: CALL_OW 45
27296: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27297: LD_VAR 0 2
27301: PPUSH
27302: LD_INT 1
27304: PPUSH
27305: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27309: LD_INT 35
27311: PPUSH
27312: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27316: LD_VAR 0 2
27320: PPUSH
27321: LD_INT 22
27323: PUSH
27324: LD_OWVAR 2
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PPUSH
27333: CALL_OW 69
27337: PPUSH
27338: LD_VAR 0 2
27342: PPUSH
27343: CALL_OW 74
27347: PPUSH
27348: CALL_OW 115
// until IsDead ( un ) ;
27352: LD_VAR 0 2
27356: PPUSH
27357: CALL_OW 301
27361: IFFALSE 27309
// end ;
27363: PPOPN 2
27365: END
// every 0 0$1 trigger StreamModeActive and sStu do
27366: LD_EXP 64
27370: PUSH
27371: LD_EXP 103
27375: AND
27376: IFFALSE 27392
27378: GO 27380
27380: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27381: LD_STRING displayStucuk();
27383: PPUSH
27384: CALL_OW 559
// ResetFog ;
27388: CALL_OW 335
// end ;
27392: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27393: LD_EXP 64
27397: PUSH
27398: LD_EXP 96
27402: AND
27403: IFFALSE 27544
27405: GO 27407
27407: DISABLE
27408: LD_INT 0
27410: PPUSH
27411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27412: LD_ADDR_VAR 0 2
27416: PUSH
27417: LD_INT 22
27419: PUSH
27420: LD_OWVAR 2
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 21
27431: PUSH
27432: LD_INT 1
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PPUSH
27443: CALL_OW 69
27447: ST_TO_ADDR
// if not tmp then
27448: LD_VAR 0 2
27452: NOT
27453: IFFALSE 27457
// exit ;
27455: GO 27544
// un := tmp [ rand ( 1 , tmp ) ] ;
27457: LD_ADDR_VAR 0 1
27461: PUSH
27462: LD_VAR 0 2
27466: PUSH
27467: LD_INT 1
27469: PPUSH
27470: LD_VAR 0 2
27474: PPUSH
27475: CALL_OW 12
27479: ARRAY
27480: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27481: LD_VAR 0 1
27485: PPUSH
27486: LD_INT 0
27488: PPUSH
27489: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27493: LD_VAR 0 1
27497: PPUSH
27498: LD_OWVAR 3
27502: PUSH
27503: LD_VAR 0 1
27507: DIFF
27508: PPUSH
27509: LD_VAR 0 1
27513: PPUSH
27514: CALL_OW 74
27518: PPUSH
27519: CALL_OW 115
// wait ( 0 0$20 ) ;
27523: LD_INT 700
27525: PPUSH
27526: CALL_OW 67
// SetSide ( un , your_side ) ;
27530: LD_VAR 0 1
27534: PPUSH
27535: LD_OWVAR 2
27539: PPUSH
27540: CALL_OW 235
// end ;
27544: PPOPN 2
27546: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27547: LD_EXP 64
27551: PUSH
27552: LD_EXP 97
27556: AND
27557: IFFALSE 27663
27559: GO 27561
27561: DISABLE
27562: LD_INT 0
27564: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27565: LD_ADDR_VAR 0 1
27569: PUSH
27570: LD_INT 22
27572: PUSH
27573: LD_OWVAR 2
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 2
27584: PUSH
27585: LD_INT 30
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 30
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: LIST
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PPUSH
27614: CALL_OW 69
27618: ST_TO_ADDR
// if not depot then
27619: LD_VAR 0 1
27623: NOT
27624: IFFALSE 27628
// exit ;
27626: GO 27663
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27628: LD_VAR 0 1
27632: PUSH
27633: LD_INT 1
27635: ARRAY
27636: PPUSH
27637: CALL_OW 250
27641: PPUSH
27642: LD_VAR 0 1
27646: PUSH
27647: LD_INT 1
27649: ARRAY
27650: PPUSH
27651: CALL_OW 251
27655: PPUSH
27656: LD_INT 70
27658: PPUSH
27659: CALL_OW 495
// end ;
27663: PPOPN 1
27665: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27666: LD_EXP 64
27670: PUSH
27671: LD_EXP 98
27675: AND
27676: IFFALSE 27887
27678: GO 27680
27680: DISABLE
27681: LD_INT 0
27683: PPUSH
27684: PPUSH
27685: PPUSH
27686: PPUSH
27687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27688: LD_ADDR_VAR 0 5
27692: PUSH
27693: LD_INT 22
27695: PUSH
27696: LD_OWVAR 2
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 21
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PPUSH
27719: CALL_OW 69
27723: ST_TO_ADDR
// if not tmp then
27724: LD_VAR 0 5
27728: NOT
27729: IFFALSE 27733
// exit ;
27731: GO 27887
// for i in tmp do
27733: LD_ADDR_VAR 0 1
27737: PUSH
27738: LD_VAR 0 5
27742: PUSH
27743: FOR_IN
27744: IFFALSE 27885
// begin d := rand ( 0 , 5 ) ;
27746: LD_ADDR_VAR 0 4
27750: PUSH
27751: LD_INT 0
27753: PPUSH
27754: LD_INT 5
27756: PPUSH
27757: CALL_OW 12
27761: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27762: LD_ADDR_VAR 0 2
27766: PUSH
27767: LD_VAR 0 1
27771: PPUSH
27772: CALL_OW 250
27776: PPUSH
27777: LD_VAR 0 4
27781: PPUSH
27782: LD_INT 3
27784: PPUSH
27785: LD_INT 12
27787: PPUSH
27788: CALL_OW 12
27792: PPUSH
27793: CALL_OW 272
27797: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27798: LD_ADDR_VAR 0 3
27802: PUSH
27803: LD_VAR 0 1
27807: PPUSH
27808: CALL_OW 251
27812: PPUSH
27813: LD_VAR 0 4
27817: PPUSH
27818: LD_INT 3
27820: PPUSH
27821: LD_INT 12
27823: PPUSH
27824: CALL_OW 12
27828: PPUSH
27829: CALL_OW 273
27833: ST_TO_ADDR
// if ValidHex ( x , y ) then
27834: LD_VAR 0 2
27838: PPUSH
27839: LD_VAR 0 3
27843: PPUSH
27844: CALL_OW 488
27848: IFFALSE 27883
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27850: LD_VAR 0 1
27854: PPUSH
27855: LD_VAR 0 2
27859: PPUSH
27860: LD_VAR 0 3
27864: PPUSH
27865: LD_INT 3
27867: PPUSH
27868: LD_INT 6
27870: PPUSH
27871: CALL_OW 12
27875: PPUSH
27876: LD_INT 1
27878: PPUSH
27879: CALL_OW 483
// end ;
27883: GO 27743
27885: POP
27886: POP
// end ;
27887: PPOPN 5
27889: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27890: LD_EXP 64
27894: PUSH
27895: LD_EXP 99
27899: AND
27900: IFFALSE 27994
27902: GO 27904
27904: DISABLE
27905: LD_INT 0
27907: PPUSH
27908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27909: LD_ADDR_VAR 0 2
27913: PUSH
27914: LD_INT 22
27916: PUSH
27917: LD_OWVAR 2
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 32
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 21
27938: PUSH
27939: LD_INT 2
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: PPUSH
27951: CALL_OW 69
27955: ST_TO_ADDR
// if not tmp then
27956: LD_VAR 0 2
27960: NOT
27961: IFFALSE 27965
// exit ;
27963: GO 27994
// for i in tmp do
27965: LD_ADDR_VAR 0 1
27969: PUSH
27970: LD_VAR 0 2
27974: PUSH
27975: FOR_IN
27976: IFFALSE 27992
// SetFuel ( i , 0 ) ;
27978: LD_VAR 0 1
27982: PPUSH
27983: LD_INT 0
27985: PPUSH
27986: CALL_OW 240
27990: GO 27975
27992: POP
27993: POP
// end ;
27994: PPOPN 2
27996: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27997: LD_EXP 64
28001: PUSH
28002: LD_EXP 100
28006: AND
28007: IFFALSE 28073
28009: GO 28011
28011: DISABLE
28012: LD_INT 0
28014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28015: LD_ADDR_VAR 0 1
28019: PUSH
28020: LD_INT 22
28022: PUSH
28023: LD_OWVAR 2
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 30
28034: PUSH
28035: LD_INT 29
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PPUSH
28046: CALL_OW 69
28050: ST_TO_ADDR
// if not tmp then
28051: LD_VAR 0 1
28055: NOT
28056: IFFALSE 28060
// exit ;
28058: GO 28073
// DestroyUnit ( tmp [ 1 ] ) ;
28060: LD_VAR 0 1
28064: PUSH
28065: LD_INT 1
28067: ARRAY
28068: PPUSH
28069: CALL_OW 65
// end ;
28073: PPOPN 1
28075: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28076: LD_EXP 64
28080: PUSH
28081: LD_EXP 102
28085: AND
28086: IFFALSE 28215
28088: GO 28090
28090: DISABLE
28091: LD_INT 0
28093: PPUSH
// begin uc_side := 0 ;
28094: LD_ADDR_OWVAR 20
28098: PUSH
28099: LD_INT 0
28101: ST_TO_ADDR
// uc_nation := nation_arabian ;
28102: LD_ADDR_OWVAR 21
28106: PUSH
28107: LD_INT 2
28109: ST_TO_ADDR
// hc_gallery :=  ;
28110: LD_ADDR_OWVAR 33
28114: PUSH
28115: LD_STRING 
28117: ST_TO_ADDR
// hc_name :=  ;
28118: LD_ADDR_OWVAR 26
28122: PUSH
28123: LD_STRING 
28125: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28126: LD_INT 1
28128: PPUSH
28129: LD_INT 11
28131: PPUSH
28132: LD_INT 10
28134: PPUSH
28135: CALL_OW 380
// un := CreateHuman ;
28139: LD_ADDR_VAR 0 1
28143: PUSH
28144: CALL_OW 44
28148: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28149: LD_VAR 0 1
28153: PPUSH
28154: LD_INT 1
28156: PPUSH
28157: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28161: LD_INT 35
28163: PPUSH
28164: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28168: LD_VAR 0 1
28172: PPUSH
28173: LD_INT 22
28175: PUSH
28176: LD_OWVAR 2
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PPUSH
28185: CALL_OW 69
28189: PPUSH
28190: LD_VAR 0 1
28194: PPUSH
28195: CALL_OW 74
28199: PPUSH
28200: CALL_OW 115
// until IsDead ( un ) ;
28204: LD_VAR 0 1
28208: PPUSH
28209: CALL_OW 301
28213: IFFALSE 28161
// end ;
28215: PPOPN 1
28217: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28218: LD_EXP 64
28222: PUSH
28223: LD_EXP 104
28227: AND
28228: IFFALSE 28240
28230: GO 28232
28232: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28233: LD_STRING earthquake(getX(game), 0, 32)
28235: PPUSH
28236: CALL_OW 559
28240: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28241: LD_EXP 64
28245: PUSH
28246: LD_EXP 105
28250: AND
28251: IFFALSE 28342
28253: GO 28255
28255: DISABLE
28256: LD_INT 0
28258: PPUSH
// begin enable ;
28259: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28260: LD_ADDR_VAR 0 1
28264: PUSH
28265: LD_INT 22
28267: PUSH
28268: LD_OWVAR 2
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 21
28279: PUSH
28280: LD_INT 2
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 33
28289: PUSH
28290: LD_INT 3
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: PPUSH
28302: CALL_OW 69
28306: ST_TO_ADDR
// if not tmp then
28307: LD_VAR 0 1
28311: NOT
28312: IFFALSE 28316
// exit ;
28314: GO 28342
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28316: LD_VAR 0 1
28320: PUSH
28321: LD_INT 1
28323: PPUSH
28324: LD_VAR 0 1
28328: PPUSH
28329: CALL_OW 12
28333: ARRAY
28334: PPUSH
28335: LD_INT 1
28337: PPUSH
28338: CALL_OW 234
// end ;
28342: PPOPN 1
28344: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28345: LD_EXP 64
28349: PUSH
28350: LD_EXP 106
28354: AND
28355: IFFALSE 28496
28357: GO 28359
28359: DISABLE
28360: LD_INT 0
28362: PPUSH
28363: PPUSH
28364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28365: LD_ADDR_VAR 0 3
28369: PUSH
28370: LD_INT 22
28372: PUSH
28373: LD_OWVAR 2
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 25
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PPUSH
28396: CALL_OW 69
28400: ST_TO_ADDR
// if not tmp then
28401: LD_VAR 0 3
28405: NOT
28406: IFFALSE 28410
// exit ;
28408: GO 28496
// un := tmp [ rand ( 1 , tmp ) ] ;
28410: LD_ADDR_VAR 0 2
28414: PUSH
28415: LD_VAR 0 3
28419: PUSH
28420: LD_INT 1
28422: PPUSH
28423: LD_VAR 0 3
28427: PPUSH
28428: CALL_OW 12
28432: ARRAY
28433: ST_TO_ADDR
// if Crawls ( un ) then
28434: LD_VAR 0 2
28438: PPUSH
28439: CALL_OW 318
28443: IFFALSE 28454
// ComWalk ( un ) ;
28445: LD_VAR 0 2
28449: PPUSH
28450: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28454: LD_VAR 0 2
28458: PPUSH
28459: LD_INT 9
28461: PPUSH
28462: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28466: LD_INT 28
28468: PPUSH
28469: LD_OWVAR 2
28473: PPUSH
28474: LD_INT 2
28476: PPUSH
28477: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28481: LD_INT 29
28483: PPUSH
28484: LD_OWVAR 2
28488: PPUSH
28489: LD_INT 2
28491: PPUSH
28492: CALL_OW 322
// end ;
28496: PPOPN 3
28498: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28499: LD_EXP 64
28503: PUSH
28504: LD_EXP 107
28508: AND
28509: IFFALSE 28620
28511: GO 28513
28513: DISABLE
28514: LD_INT 0
28516: PPUSH
28517: PPUSH
28518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28519: LD_ADDR_VAR 0 3
28523: PUSH
28524: LD_INT 22
28526: PUSH
28527: LD_OWVAR 2
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 25
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PPUSH
28550: CALL_OW 69
28554: ST_TO_ADDR
// if not tmp then
28555: LD_VAR 0 3
28559: NOT
28560: IFFALSE 28564
// exit ;
28562: GO 28620
// un := tmp [ rand ( 1 , tmp ) ] ;
28564: LD_ADDR_VAR 0 2
28568: PUSH
28569: LD_VAR 0 3
28573: PUSH
28574: LD_INT 1
28576: PPUSH
28577: LD_VAR 0 3
28581: PPUSH
28582: CALL_OW 12
28586: ARRAY
28587: ST_TO_ADDR
// if Crawls ( un ) then
28588: LD_VAR 0 2
28592: PPUSH
28593: CALL_OW 318
28597: IFFALSE 28608
// ComWalk ( un ) ;
28599: LD_VAR 0 2
28603: PPUSH
28604: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28608: LD_VAR 0 2
28612: PPUSH
28613: LD_INT 8
28615: PPUSH
28616: CALL_OW 336
// end ;
28620: PPOPN 3
28622: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28623: LD_EXP 64
28627: PUSH
28628: LD_EXP 108
28632: AND
28633: IFFALSE 28777
28635: GO 28637
28637: DISABLE
28638: LD_INT 0
28640: PPUSH
28641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28642: LD_ADDR_VAR 0 2
28646: PUSH
28647: LD_INT 22
28649: PUSH
28650: LD_OWVAR 2
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 21
28661: PUSH
28662: LD_INT 2
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: PUSH
28672: LD_INT 34
28674: PUSH
28675: LD_INT 12
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 34
28684: PUSH
28685: LD_INT 51
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 34
28694: PUSH
28695: LD_INT 32
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: PPUSH
28713: CALL_OW 69
28717: ST_TO_ADDR
// if not tmp then
28718: LD_VAR 0 2
28722: NOT
28723: IFFALSE 28727
// exit ;
28725: GO 28777
// for i in tmp do
28727: LD_ADDR_VAR 0 1
28731: PUSH
28732: LD_VAR 0 2
28736: PUSH
28737: FOR_IN
28738: IFFALSE 28775
// if GetCargo ( i , mat_artifact ) = 0 then
28740: LD_VAR 0 1
28744: PPUSH
28745: LD_INT 4
28747: PPUSH
28748: CALL_OW 289
28752: PUSH
28753: LD_INT 0
28755: EQUAL
28756: IFFALSE 28773
// SetCargo ( i , mat_siberit , 100 ) ;
28758: LD_VAR 0 1
28762: PPUSH
28763: LD_INT 3
28765: PPUSH
28766: LD_INT 100
28768: PPUSH
28769: CALL_OW 290
28773: GO 28737
28775: POP
28776: POP
// end ;
28777: PPOPN 2
28779: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28780: LD_EXP 64
28784: PUSH
28785: LD_EXP 109
28789: AND
28790: IFFALSE 28973
28792: GO 28794
28794: DISABLE
28795: LD_INT 0
28797: PPUSH
28798: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28799: LD_ADDR_VAR 0 2
28803: PUSH
28804: LD_INT 22
28806: PUSH
28807: LD_OWVAR 2
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PPUSH
28816: CALL_OW 69
28820: ST_TO_ADDR
// if not tmp then
28821: LD_VAR 0 2
28825: NOT
28826: IFFALSE 28830
// exit ;
28828: GO 28973
// for i := 1 to 2 do
28830: LD_ADDR_VAR 0 1
28834: PUSH
28835: DOUBLE
28836: LD_INT 1
28838: DEC
28839: ST_TO_ADDR
28840: LD_INT 2
28842: PUSH
28843: FOR_TO
28844: IFFALSE 28971
// begin uc_side := your_side ;
28846: LD_ADDR_OWVAR 20
28850: PUSH
28851: LD_OWVAR 2
28855: ST_TO_ADDR
// uc_nation := nation_american ;
28856: LD_ADDR_OWVAR 21
28860: PUSH
28861: LD_INT 1
28863: ST_TO_ADDR
// vc_chassis := us_morphling ;
28864: LD_ADDR_OWVAR 37
28868: PUSH
28869: LD_INT 5
28871: ST_TO_ADDR
// vc_engine := engine_siberite ;
28872: LD_ADDR_OWVAR 39
28876: PUSH
28877: LD_INT 3
28879: ST_TO_ADDR
// vc_control := control_computer ;
28880: LD_ADDR_OWVAR 38
28884: PUSH
28885: LD_INT 3
28887: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28888: LD_ADDR_OWVAR 40
28892: PUSH
28893: LD_INT 10
28895: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28896: LD_VAR 0 2
28900: PUSH
28901: LD_INT 1
28903: ARRAY
28904: PPUSH
28905: CALL_OW 310
28909: NOT
28910: IFFALSE 28957
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28912: CALL_OW 45
28916: PPUSH
28917: LD_VAR 0 2
28921: PUSH
28922: LD_INT 1
28924: ARRAY
28925: PPUSH
28926: CALL_OW 250
28930: PPUSH
28931: LD_VAR 0 2
28935: PUSH
28936: LD_INT 1
28938: ARRAY
28939: PPUSH
28940: CALL_OW 251
28944: PPUSH
28945: LD_INT 12
28947: PPUSH
28948: LD_INT 1
28950: PPUSH
28951: CALL_OW 50
28955: GO 28969
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28957: CALL_OW 45
28961: PPUSH
28962: LD_INT 1
28964: PPUSH
28965: CALL_OW 51
// end ;
28969: GO 28843
28971: POP
28972: POP
// end ;
28973: PPOPN 2
28975: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28976: LD_EXP 64
28980: PUSH
28981: LD_EXP 110
28985: AND
28986: IFFALSE 29208
28988: GO 28990
28990: DISABLE
28991: LD_INT 0
28993: PPUSH
28994: PPUSH
28995: PPUSH
28996: PPUSH
28997: PPUSH
28998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28999: LD_ADDR_VAR 0 6
29003: PUSH
29004: LD_INT 22
29006: PUSH
29007: LD_OWVAR 2
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 21
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 23
29031: PUSH
29032: LD_INT 0
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: PPUSH
29048: CALL_OW 69
29052: ST_TO_ADDR
// if not tmp then
29053: LD_VAR 0 6
29057: NOT
29058: IFFALSE 29062
// exit ;
29060: GO 29208
// s1 := rand ( 1 , 4 ) ;
29062: LD_ADDR_VAR 0 2
29066: PUSH
29067: LD_INT 1
29069: PPUSH
29070: LD_INT 4
29072: PPUSH
29073: CALL_OW 12
29077: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29078: LD_ADDR_VAR 0 4
29082: PUSH
29083: LD_VAR 0 6
29087: PUSH
29088: LD_INT 1
29090: ARRAY
29091: PPUSH
29092: LD_VAR 0 2
29096: PPUSH
29097: CALL_OW 259
29101: ST_TO_ADDR
// if s1 = 1 then
29102: LD_VAR 0 2
29106: PUSH
29107: LD_INT 1
29109: EQUAL
29110: IFFALSE 29130
// s2 := rand ( 2 , 4 ) else
29112: LD_ADDR_VAR 0 3
29116: PUSH
29117: LD_INT 2
29119: PPUSH
29120: LD_INT 4
29122: PPUSH
29123: CALL_OW 12
29127: ST_TO_ADDR
29128: GO 29138
// s2 := 1 ;
29130: LD_ADDR_VAR 0 3
29134: PUSH
29135: LD_INT 1
29137: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29138: LD_ADDR_VAR 0 5
29142: PUSH
29143: LD_VAR 0 6
29147: PUSH
29148: LD_INT 1
29150: ARRAY
29151: PPUSH
29152: LD_VAR 0 3
29156: PPUSH
29157: CALL_OW 259
29161: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29162: LD_VAR 0 6
29166: PUSH
29167: LD_INT 1
29169: ARRAY
29170: PPUSH
29171: LD_VAR 0 2
29175: PPUSH
29176: LD_VAR 0 5
29180: PPUSH
29181: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29185: LD_VAR 0 6
29189: PUSH
29190: LD_INT 1
29192: ARRAY
29193: PPUSH
29194: LD_VAR 0 3
29198: PPUSH
29199: LD_VAR 0 4
29203: PPUSH
29204: CALL_OW 237
// end ;
29208: PPOPN 6
29210: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29211: LD_EXP 64
29215: PUSH
29216: LD_EXP 111
29220: AND
29221: IFFALSE 29300
29223: GO 29225
29225: DISABLE
29226: LD_INT 0
29228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29229: LD_ADDR_VAR 0 1
29233: PUSH
29234: LD_INT 22
29236: PUSH
29237: LD_OWVAR 2
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 30
29248: PUSH
29249: LD_INT 3
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PPUSH
29260: CALL_OW 69
29264: ST_TO_ADDR
// if not tmp then
29265: LD_VAR 0 1
29269: NOT
29270: IFFALSE 29274
// exit ;
29272: GO 29300
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29274: LD_VAR 0 1
29278: PUSH
29279: LD_INT 1
29281: PPUSH
29282: LD_VAR 0 1
29286: PPUSH
29287: CALL_OW 12
29291: ARRAY
29292: PPUSH
29293: LD_INT 1
29295: PPUSH
29296: CALL_OW 234
// end ;
29300: PPOPN 1
29302: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29303: LD_EXP 64
29307: PUSH
29308: LD_EXP 112
29312: AND
29313: IFFALSE 29425
29315: GO 29317
29317: DISABLE
29318: LD_INT 0
29320: PPUSH
29321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29322: LD_ADDR_VAR 0 2
29326: PUSH
29327: LD_INT 22
29329: PUSH
29330: LD_OWVAR 2
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 2
29341: PUSH
29342: LD_INT 30
29344: PUSH
29345: LD_INT 27
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 30
29354: PUSH
29355: LD_INT 26
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 30
29364: PUSH
29365: LD_INT 28
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PPUSH
29382: CALL_OW 69
29386: ST_TO_ADDR
// if not tmp then
29387: LD_VAR 0 2
29391: NOT
29392: IFFALSE 29396
// exit ;
29394: GO 29425
// for i in tmp do
29396: LD_ADDR_VAR 0 1
29400: PUSH
29401: LD_VAR 0 2
29405: PUSH
29406: FOR_IN
29407: IFFALSE 29423
// SetLives ( i , 1 ) ;
29409: LD_VAR 0 1
29413: PPUSH
29414: LD_INT 1
29416: PPUSH
29417: CALL_OW 234
29421: GO 29406
29423: POP
29424: POP
// end ;
29425: PPOPN 2
29427: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29428: LD_EXP 64
29432: PUSH
29433: LD_EXP 113
29437: AND
29438: IFFALSE 29712
29440: GO 29442
29442: DISABLE
29443: LD_INT 0
29445: PPUSH
29446: PPUSH
29447: PPUSH
// begin i := rand ( 1 , 7 ) ;
29448: LD_ADDR_VAR 0 1
29452: PUSH
29453: LD_INT 1
29455: PPUSH
29456: LD_INT 7
29458: PPUSH
29459: CALL_OW 12
29463: ST_TO_ADDR
// case i of 1 :
29464: LD_VAR 0 1
29468: PUSH
29469: LD_INT 1
29471: DOUBLE
29472: EQUAL
29473: IFTRUE 29477
29475: GO 29487
29477: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29478: LD_STRING earthquake(getX(game), 0, 32)
29480: PPUSH
29481: CALL_OW 559
29485: GO 29712
29487: LD_INT 2
29489: DOUBLE
29490: EQUAL
29491: IFTRUE 29495
29493: GO 29509
29495: POP
// begin ToLua ( displayStucuk(); ) ;
29496: LD_STRING displayStucuk();
29498: PPUSH
29499: CALL_OW 559
// ResetFog ;
29503: CALL_OW 335
// end ; 3 :
29507: GO 29712
29509: LD_INT 3
29511: DOUBLE
29512: EQUAL
29513: IFTRUE 29517
29515: GO 29621
29517: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29518: LD_ADDR_VAR 0 2
29522: PUSH
29523: LD_INT 22
29525: PUSH
29526: LD_OWVAR 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 25
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PPUSH
29549: CALL_OW 69
29553: ST_TO_ADDR
// if not tmp then
29554: LD_VAR 0 2
29558: NOT
29559: IFFALSE 29563
// exit ;
29561: GO 29712
// un := tmp [ rand ( 1 , tmp ) ] ;
29563: LD_ADDR_VAR 0 3
29567: PUSH
29568: LD_VAR 0 2
29572: PUSH
29573: LD_INT 1
29575: PPUSH
29576: LD_VAR 0 2
29580: PPUSH
29581: CALL_OW 12
29585: ARRAY
29586: ST_TO_ADDR
// if Crawls ( un ) then
29587: LD_VAR 0 3
29591: PPUSH
29592: CALL_OW 318
29596: IFFALSE 29607
// ComWalk ( un ) ;
29598: LD_VAR 0 3
29602: PPUSH
29603: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29607: LD_VAR 0 3
29611: PPUSH
29612: LD_INT 8
29614: PPUSH
29615: CALL_OW 336
// end ; 4 :
29619: GO 29712
29621: LD_INT 4
29623: DOUBLE
29624: EQUAL
29625: IFTRUE 29629
29627: GO 29690
29629: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29630: LD_ADDR_VAR 0 2
29634: PUSH
29635: LD_INT 22
29637: PUSH
29638: LD_OWVAR 2
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 30
29649: PUSH
29650: LD_INT 29
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PPUSH
29661: CALL_OW 69
29665: ST_TO_ADDR
// if not tmp then
29666: LD_VAR 0 2
29670: NOT
29671: IFFALSE 29675
// exit ;
29673: GO 29712
// DestroyUnit ( tmp [ 1 ] ) ;
29675: LD_VAR 0 2
29679: PUSH
29680: LD_INT 1
29682: ARRAY
29683: PPUSH
29684: CALL_OW 65
// end ; 5 .. 7 :
29688: GO 29712
29690: LD_INT 5
29692: DOUBLE
29693: GREATEREQUAL
29694: IFFALSE 29702
29696: LD_INT 7
29698: DOUBLE
29699: LESSEQUAL
29700: IFTRUE 29704
29702: GO 29711
29704: POP
// StreamSibBomb ; end ;
29705: CALL 25962 0 0
29709: GO 29712
29711: POP
// end ;
29712: PPOPN 3
29714: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29715: LD_EXP 64
29719: PUSH
29720: LD_EXP 114
29724: AND
29725: IFFALSE 29881
29727: GO 29729
29729: DISABLE
29730: LD_INT 0
29732: PPUSH
29733: PPUSH
29734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29735: LD_ADDR_VAR 0 2
29739: PUSH
29740: LD_INT 81
29742: PUSH
29743: LD_OWVAR 2
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 2
29754: PUSH
29755: LD_INT 21
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 21
29767: PUSH
29768: LD_INT 2
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PPUSH
29784: CALL_OW 69
29788: ST_TO_ADDR
// if not tmp then
29789: LD_VAR 0 2
29793: NOT
29794: IFFALSE 29798
// exit ;
29796: GO 29881
// p := 0 ;
29798: LD_ADDR_VAR 0 3
29802: PUSH
29803: LD_INT 0
29805: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29806: LD_INT 35
29808: PPUSH
29809: CALL_OW 67
// p := p + 1 ;
29813: LD_ADDR_VAR 0 3
29817: PUSH
29818: LD_VAR 0 3
29822: PUSH
29823: LD_INT 1
29825: PLUS
29826: ST_TO_ADDR
// for i in tmp do
29827: LD_ADDR_VAR 0 1
29831: PUSH
29832: LD_VAR 0 2
29836: PUSH
29837: FOR_IN
29838: IFFALSE 29869
// if GetLives ( i ) < 1000 then
29840: LD_VAR 0 1
29844: PPUSH
29845: CALL_OW 256
29849: PUSH
29850: LD_INT 1000
29852: LESS
29853: IFFALSE 29867
// SetLives ( i , 1000 ) ;
29855: LD_VAR 0 1
29859: PPUSH
29860: LD_INT 1000
29862: PPUSH
29863: CALL_OW 234
29867: GO 29837
29869: POP
29870: POP
// until p > 20 ;
29871: LD_VAR 0 3
29875: PUSH
29876: LD_INT 20
29878: GREATER
29879: IFFALSE 29806
// end ;
29881: PPOPN 3
29883: END
// every 0 0$1 trigger StreamModeActive and sTime do
29884: LD_EXP 64
29888: PUSH
29889: LD_EXP 115
29893: AND
29894: IFFALSE 29929
29896: GO 29898
29898: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29899: LD_INT 28
29901: PPUSH
29902: LD_OWVAR 2
29906: PPUSH
29907: LD_INT 2
29909: PPUSH
29910: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29914: LD_INT 30
29916: PPUSH
29917: LD_OWVAR 2
29921: PPUSH
29922: LD_INT 2
29924: PPUSH
29925: CALL_OW 322
// end ;
29929: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29930: LD_EXP 64
29934: PUSH
29935: LD_EXP 116
29939: AND
29940: IFFALSE 30061
29942: GO 29944
29944: DISABLE
29945: LD_INT 0
29947: PPUSH
29948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29949: LD_ADDR_VAR 0 2
29953: PUSH
29954: LD_INT 22
29956: PUSH
29957: LD_OWVAR 2
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 21
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 3
29978: PUSH
29979: LD_INT 23
29981: PUSH
29982: LD_INT 0
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: PPUSH
29998: CALL_OW 69
30002: ST_TO_ADDR
// if not tmp then
30003: LD_VAR 0 2
30007: NOT
30008: IFFALSE 30012
// exit ;
30010: GO 30061
// for i in tmp do
30012: LD_ADDR_VAR 0 1
30016: PUSH
30017: LD_VAR 0 2
30021: PUSH
30022: FOR_IN
30023: IFFALSE 30059
// begin if Crawls ( i ) then
30025: LD_VAR 0 1
30029: PPUSH
30030: CALL_OW 318
30034: IFFALSE 30045
// ComWalk ( i ) ;
30036: LD_VAR 0 1
30040: PPUSH
30041: CALL_OW 138
// SetClass ( i , 2 ) ;
30045: LD_VAR 0 1
30049: PPUSH
30050: LD_INT 2
30052: PPUSH
30053: CALL_OW 336
// end ;
30057: GO 30022
30059: POP
30060: POP
// end ;
30061: PPOPN 2
30063: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30064: LD_EXP 64
30068: PUSH
30069: LD_EXP 117
30073: AND
30074: IFFALSE 30355
30076: GO 30078
30078: DISABLE
30079: LD_INT 0
30081: PPUSH
30082: PPUSH
30083: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30084: LD_OWVAR 2
30088: PPUSH
30089: LD_INT 9
30091: PPUSH
30092: LD_INT 1
30094: PPUSH
30095: LD_INT 1
30097: PPUSH
30098: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30102: LD_INT 9
30104: PPUSH
30105: LD_OWVAR 2
30109: PPUSH
30110: CALL_OW 343
// uc_side := 9 ;
30114: LD_ADDR_OWVAR 20
30118: PUSH
30119: LD_INT 9
30121: ST_TO_ADDR
// uc_nation := 2 ;
30122: LD_ADDR_OWVAR 21
30126: PUSH
30127: LD_INT 2
30129: ST_TO_ADDR
// hc_name := Dark Warrior ;
30130: LD_ADDR_OWVAR 26
30134: PUSH
30135: LD_STRING Dark Warrior
30137: ST_TO_ADDR
// hc_gallery :=  ;
30138: LD_ADDR_OWVAR 33
30142: PUSH
30143: LD_STRING 
30145: ST_TO_ADDR
// hc_noskilllimit := true ;
30146: LD_ADDR_OWVAR 76
30150: PUSH
30151: LD_INT 1
30153: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30154: LD_ADDR_OWVAR 31
30158: PUSH
30159: LD_INT 30
30161: PUSH
30162: LD_INT 30
30164: PUSH
30165: LD_INT 30
30167: PUSH
30168: LD_INT 30
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: ST_TO_ADDR
// un := CreateHuman ;
30177: LD_ADDR_VAR 0 3
30181: PUSH
30182: CALL_OW 44
30186: ST_TO_ADDR
// hc_noskilllimit := false ;
30187: LD_ADDR_OWVAR 76
30191: PUSH
30192: LD_INT 0
30194: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30195: LD_VAR 0 3
30199: PPUSH
30200: LD_INT 1
30202: PPUSH
30203: CALL_OW 51
// p := 0 ;
30207: LD_ADDR_VAR 0 2
30211: PUSH
30212: LD_INT 0
30214: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30215: LD_INT 35
30217: PPUSH
30218: CALL_OW 67
// p := p + 1 ;
30222: LD_ADDR_VAR 0 2
30226: PUSH
30227: LD_VAR 0 2
30231: PUSH
30232: LD_INT 1
30234: PLUS
30235: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30236: LD_VAR 0 3
30240: PPUSH
30241: CALL_OW 256
30245: PUSH
30246: LD_INT 1000
30248: LESS
30249: IFFALSE 30263
// SetLives ( un , 1000 ) ;
30251: LD_VAR 0 3
30255: PPUSH
30256: LD_INT 1000
30258: PPUSH
30259: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30263: LD_VAR 0 3
30267: PPUSH
30268: LD_INT 81
30270: PUSH
30271: LD_OWVAR 2
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 91
30282: PUSH
30283: LD_VAR 0 3
30287: PUSH
30288: LD_INT 30
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PPUSH
30300: CALL_OW 69
30304: PPUSH
30305: LD_VAR 0 3
30309: PPUSH
30310: CALL_OW 74
30314: PPUSH
30315: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30319: LD_VAR 0 2
30323: PUSH
30324: LD_INT 60
30326: GREATER
30327: PUSH
30328: LD_VAR 0 3
30332: PPUSH
30333: CALL_OW 301
30337: OR
30338: IFFALSE 30215
// if un then
30340: LD_VAR 0 3
30344: IFFALSE 30355
// RemoveUnit ( un ) ;
30346: LD_VAR 0 3
30350: PPUSH
30351: CALL_OW 64
// end ;
30355: PPOPN 3
30357: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30358: LD_INT 0
30360: PPUSH
// case cmd of 301 :
30361: LD_VAR 0 1
30365: PUSH
30366: LD_INT 301
30368: DOUBLE
30369: EQUAL
30370: IFTRUE 30374
30372: GO 30406
30374: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30375: LD_VAR 0 6
30379: PPUSH
30380: LD_VAR 0 7
30384: PPUSH
30385: LD_VAR 0 8
30389: PPUSH
30390: LD_VAR 0 4
30394: PPUSH
30395: LD_VAR 0 5
30399: PPUSH
30400: CALL 31607 0 5
30404: GO 30527
30406: LD_INT 302
30408: DOUBLE
30409: EQUAL
30410: IFTRUE 30414
30412: GO 30451
30414: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30415: LD_VAR 0 6
30419: PPUSH
30420: LD_VAR 0 7
30424: PPUSH
30425: LD_VAR 0 8
30429: PPUSH
30430: LD_VAR 0 9
30434: PPUSH
30435: LD_VAR 0 4
30439: PPUSH
30440: LD_VAR 0 5
30444: PPUSH
30445: CALL 31698 0 6
30449: GO 30527
30451: LD_INT 303
30453: DOUBLE
30454: EQUAL
30455: IFTRUE 30459
30457: GO 30496
30459: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30460: LD_VAR 0 6
30464: PPUSH
30465: LD_VAR 0 7
30469: PPUSH
30470: LD_VAR 0 8
30474: PPUSH
30475: LD_VAR 0 9
30479: PPUSH
30480: LD_VAR 0 4
30484: PPUSH
30485: LD_VAR 0 5
30489: PPUSH
30490: CALL 30532 0 6
30494: GO 30527
30496: LD_INT 304
30498: DOUBLE
30499: EQUAL
30500: IFTRUE 30504
30502: GO 30526
30504: POP
// hHackTeleport ( unit , x , y ) ; end ;
30505: LD_VAR 0 2
30509: PPUSH
30510: LD_VAR 0 4
30514: PPUSH
30515: LD_VAR 0 5
30519: PPUSH
30520: CALL 32291 0 3
30524: GO 30527
30526: POP
// end ;
30527: LD_VAR 0 12
30531: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30532: LD_INT 0
30534: PPUSH
30535: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30536: LD_VAR 0 1
30540: PUSH
30541: LD_INT 1
30543: LESS
30544: PUSH
30545: LD_VAR 0 1
30549: PUSH
30550: LD_INT 3
30552: GREATER
30553: OR
30554: PUSH
30555: LD_VAR 0 5
30559: PPUSH
30560: LD_VAR 0 6
30564: PPUSH
30565: CALL_OW 428
30569: OR
30570: IFFALSE 30574
// exit ;
30572: GO 31294
// uc_side := your_side ;
30574: LD_ADDR_OWVAR 20
30578: PUSH
30579: LD_OWVAR 2
30583: ST_TO_ADDR
// uc_nation := nation ;
30584: LD_ADDR_OWVAR 21
30588: PUSH
30589: LD_VAR 0 1
30593: ST_TO_ADDR
// bc_level = 1 ;
30594: LD_ADDR_OWVAR 43
30598: PUSH
30599: LD_INT 1
30601: ST_TO_ADDR
// case btype of 1 :
30602: LD_VAR 0 2
30606: PUSH
30607: LD_INT 1
30609: DOUBLE
30610: EQUAL
30611: IFTRUE 30615
30613: GO 30626
30615: POP
// bc_type := b_depot ; 2 :
30616: LD_ADDR_OWVAR 42
30620: PUSH
30621: LD_INT 0
30623: ST_TO_ADDR
30624: GO 31238
30626: LD_INT 2
30628: DOUBLE
30629: EQUAL
30630: IFTRUE 30634
30632: GO 30645
30634: POP
// bc_type := b_warehouse ; 3 :
30635: LD_ADDR_OWVAR 42
30639: PUSH
30640: LD_INT 1
30642: ST_TO_ADDR
30643: GO 31238
30645: LD_INT 3
30647: DOUBLE
30648: EQUAL
30649: IFTRUE 30653
30651: GO 30664
30653: POP
// bc_type := b_lab ; 4 .. 9 :
30654: LD_ADDR_OWVAR 42
30658: PUSH
30659: LD_INT 6
30661: ST_TO_ADDR
30662: GO 31238
30664: LD_INT 4
30666: DOUBLE
30667: GREATEREQUAL
30668: IFFALSE 30676
30670: LD_INT 9
30672: DOUBLE
30673: LESSEQUAL
30674: IFTRUE 30678
30676: GO 30730
30678: POP
// begin bc_type := b_lab_half ;
30679: LD_ADDR_OWVAR 42
30683: PUSH
30684: LD_INT 7
30686: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30687: LD_ADDR_OWVAR 44
30691: PUSH
30692: LD_INT 10
30694: PUSH
30695: LD_INT 11
30697: PUSH
30698: LD_INT 12
30700: PUSH
30701: LD_INT 15
30703: PUSH
30704: LD_INT 14
30706: PUSH
30707: LD_INT 13
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: PUSH
30718: LD_VAR 0 2
30722: PUSH
30723: LD_INT 3
30725: MINUS
30726: ARRAY
30727: ST_TO_ADDR
// end ; 10 .. 13 :
30728: GO 31238
30730: LD_INT 10
30732: DOUBLE
30733: GREATEREQUAL
30734: IFFALSE 30742
30736: LD_INT 13
30738: DOUBLE
30739: LESSEQUAL
30740: IFTRUE 30744
30742: GO 30821
30744: POP
// begin bc_type := b_lab_full ;
30745: LD_ADDR_OWVAR 42
30749: PUSH
30750: LD_INT 8
30752: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30753: LD_ADDR_OWVAR 44
30757: PUSH
30758: LD_INT 10
30760: PUSH
30761: LD_INT 12
30763: PUSH
30764: LD_INT 14
30766: PUSH
30767: LD_INT 13
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: PUSH
30776: LD_VAR 0 2
30780: PUSH
30781: LD_INT 9
30783: MINUS
30784: ARRAY
30785: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30786: LD_ADDR_OWVAR 45
30790: PUSH
30791: LD_INT 11
30793: PUSH
30794: LD_INT 15
30796: PUSH
30797: LD_INT 12
30799: PUSH
30800: LD_INT 15
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: PUSH
30809: LD_VAR 0 2
30813: PUSH
30814: LD_INT 9
30816: MINUS
30817: ARRAY
30818: ST_TO_ADDR
// end ; 14 :
30819: GO 31238
30821: LD_INT 14
30823: DOUBLE
30824: EQUAL
30825: IFTRUE 30829
30827: GO 30840
30829: POP
// bc_type := b_workshop ; 15 :
30830: LD_ADDR_OWVAR 42
30834: PUSH
30835: LD_INT 2
30837: ST_TO_ADDR
30838: GO 31238
30840: LD_INT 15
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30848
30846: GO 30859
30848: POP
// bc_type := b_factory ; 16 :
30849: LD_ADDR_OWVAR 42
30853: PUSH
30854: LD_INT 3
30856: ST_TO_ADDR
30857: GO 31238
30859: LD_INT 16
30861: DOUBLE
30862: EQUAL
30863: IFTRUE 30867
30865: GO 30878
30867: POP
// bc_type := b_ext_gun ; 17 :
30868: LD_ADDR_OWVAR 42
30872: PUSH
30873: LD_INT 17
30875: ST_TO_ADDR
30876: GO 31238
30878: LD_INT 17
30880: DOUBLE
30881: EQUAL
30882: IFTRUE 30886
30884: GO 30914
30886: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30887: LD_ADDR_OWVAR 42
30891: PUSH
30892: LD_INT 19
30894: PUSH
30895: LD_INT 23
30897: PUSH
30898: LD_INT 19
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: PUSH
30906: LD_VAR 0 1
30910: ARRAY
30911: ST_TO_ADDR
30912: GO 31238
30914: LD_INT 18
30916: DOUBLE
30917: EQUAL
30918: IFTRUE 30922
30920: GO 30933
30922: POP
// bc_type := b_ext_radar ; 19 :
30923: LD_ADDR_OWVAR 42
30927: PUSH
30928: LD_INT 20
30930: ST_TO_ADDR
30931: GO 31238
30933: LD_INT 19
30935: DOUBLE
30936: EQUAL
30937: IFTRUE 30941
30939: GO 30952
30941: POP
// bc_type := b_ext_radio ; 20 :
30942: LD_ADDR_OWVAR 42
30946: PUSH
30947: LD_INT 22
30949: ST_TO_ADDR
30950: GO 31238
30952: LD_INT 20
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30971
30960: POP
// bc_type := b_ext_siberium ; 21 :
30961: LD_ADDR_OWVAR 42
30965: PUSH
30966: LD_INT 21
30968: ST_TO_ADDR
30969: GO 31238
30971: LD_INT 21
30973: DOUBLE
30974: EQUAL
30975: IFTRUE 30979
30977: GO 30990
30979: POP
// bc_type := b_ext_computer ; 22 :
30980: LD_ADDR_OWVAR 42
30984: PUSH
30985: LD_INT 24
30987: ST_TO_ADDR
30988: GO 31238
30990: LD_INT 22
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 30998
30996: GO 31009
30998: POP
// bc_type := b_ext_track ; 23 :
30999: LD_ADDR_OWVAR 42
31003: PUSH
31004: LD_INT 16
31006: ST_TO_ADDR
31007: GO 31238
31009: LD_INT 23
31011: DOUBLE
31012: EQUAL
31013: IFTRUE 31017
31015: GO 31028
31017: POP
// bc_type := b_ext_laser ; 24 :
31018: LD_ADDR_OWVAR 42
31022: PUSH
31023: LD_INT 25
31025: ST_TO_ADDR
31026: GO 31238
31028: LD_INT 24
31030: DOUBLE
31031: EQUAL
31032: IFTRUE 31036
31034: GO 31047
31036: POP
// bc_type := b_control_tower ; 25 :
31037: LD_ADDR_OWVAR 42
31041: PUSH
31042: LD_INT 36
31044: ST_TO_ADDR
31045: GO 31238
31047: LD_INT 25
31049: DOUBLE
31050: EQUAL
31051: IFTRUE 31055
31053: GO 31066
31055: POP
// bc_type := b_breastwork ; 26 :
31056: LD_ADDR_OWVAR 42
31060: PUSH
31061: LD_INT 31
31063: ST_TO_ADDR
31064: GO 31238
31066: LD_INT 26
31068: DOUBLE
31069: EQUAL
31070: IFTRUE 31074
31072: GO 31085
31074: POP
// bc_type := b_bunker ; 27 :
31075: LD_ADDR_OWVAR 42
31079: PUSH
31080: LD_INT 32
31082: ST_TO_ADDR
31083: GO 31238
31085: LD_INT 27
31087: DOUBLE
31088: EQUAL
31089: IFTRUE 31093
31091: GO 31104
31093: POP
// bc_type := b_turret ; 28 :
31094: LD_ADDR_OWVAR 42
31098: PUSH
31099: LD_INT 33
31101: ST_TO_ADDR
31102: GO 31238
31104: LD_INT 28
31106: DOUBLE
31107: EQUAL
31108: IFTRUE 31112
31110: GO 31123
31112: POP
// bc_type := b_armoury ; 29 :
31113: LD_ADDR_OWVAR 42
31117: PUSH
31118: LD_INT 4
31120: ST_TO_ADDR
31121: GO 31238
31123: LD_INT 29
31125: DOUBLE
31126: EQUAL
31127: IFTRUE 31131
31129: GO 31142
31131: POP
// bc_type := b_barracks ; 30 :
31132: LD_ADDR_OWVAR 42
31136: PUSH
31137: LD_INT 5
31139: ST_TO_ADDR
31140: GO 31238
31142: LD_INT 30
31144: DOUBLE
31145: EQUAL
31146: IFTRUE 31150
31148: GO 31161
31150: POP
// bc_type := b_solar_power ; 31 :
31151: LD_ADDR_OWVAR 42
31155: PUSH
31156: LD_INT 27
31158: ST_TO_ADDR
31159: GO 31238
31161: LD_INT 31
31163: DOUBLE
31164: EQUAL
31165: IFTRUE 31169
31167: GO 31180
31169: POP
// bc_type := b_oil_power ; 32 :
31170: LD_ADDR_OWVAR 42
31174: PUSH
31175: LD_INT 26
31177: ST_TO_ADDR
31178: GO 31238
31180: LD_INT 32
31182: DOUBLE
31183: EQUAL
31184: IFTRUE 31188
31186: GO 31199
31188: POP
// bc_type := b_siberite_power ; 33 :
31189: LD_ADDR_OWVAR 42
31193: PUSH
31194: LD_INT 28
31196: ST_TO_ADDR
31197: GO 31238
31199: LD_INT 33
31201: DOUBLE
31202: EQUAL
31203: IFTRUE 31207
31205: GO 31218
31207: POP
// bc_type := b_oil_mine ; 34 :
31208: LD_ADDR_OWVAR 42
31212: PUSH
31213: LD_INT 29
31215: ST_TO_ADDR
31216: GO 31238
31218: LD_INT 34
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31237
31226: POP
// bc_type := b_siberite_mine ; end ;
31227: LD_ADDR_OWVAR 42
31231: PUSH
31232: LD_INT 30
31234: ST_TO_ADDR
31235: GO 31238
31237: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31238: LD_ADDR_VAR 0 8
31242: PUSH
31243: LD_VAR 0 5
31247: PPUSH
31248: LD_VAR 0 6
31252: PPUSH
31253: LD_VAR 0 3
31257: PPUSH
31258: CALL_OW 47
31262: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31263: LD_OWVAR 42
31267: PUSH
31268: LD_INT 32
31270: PUSH
31271: LD_INT 33
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: IN
31278: IFFALSE 31294
// PlaceWeaponTurret ( b , weapon ) ;
31280: LD_VAR 0 8
31284: PPUSH
31285: LD_VAR 0 4
31289: PPUSH
31290: CALL_OW 431
// end ;
31294: LD_VAR 0 7
31298: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31299: LD_INT 0
31301: PPUSH
31302: PPUSH
31303: PPUSH
31304: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31305: LD_ADDR_VAR 0 4
31309: PUSH
31310: LD_INT 22
31312: PUSH
31313: LD_OWVAR 2
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 2
31324: PUSH
31325: LD_INT 30
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 30
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PPUSH
31354: CALL_OW 69
31358: ST_TO_ADDR
// if not tmp then
31359: LD_VAR 0 4
31363: NOT
31364: IFFALSE 31368
// exit ;
31366: GO 31427
// for i in tmp do
31368: LD_ADDR_VAR 0 2
31372: PUSH
31373: LD_VAR 0 4
31377: PUSH
31378: FOR_IN
31379: IFFALSE 31425
// for j = 1 to 3 do
31381: LD_ADDR_VAR 0 3
31385: PUSH
31386: DOUBLE
31387: LD_INT 1
31389: DEC
31390: ST_TO_ADDR
31391: LD_INT 3
31393: PUSH
31394: FOR_TO
31395: IFFALSE 31421
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31397: LD_VAR 0 2
31401: PPUSH
31402: CALL_OW 274
31406: PPUSH
31407: LD_VAR 0 3
31411: PPUSH
31412: LD_INT 99999
31414: PPUSH
31415: CALL_OW 277
31419: GO 31394
31421: POP
31422: POP
31423: GO 31378
31425: POP
31426: POP
// end ;
31427: LD_VAR 0 1
31431: RET
// export function hHackSetLevel10 ; var i , j ; begin
31432: LD_INT 0
31434: PPUSH
31435: PPUSH
31436: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31437: LD_ADDR_VAR 0 2
31441: PUSH
31442: LD_INT 21
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PPUSH
31452: CALL_OW 69
31456: PUSH
31457: FOR_IN
31458: IFFALSE 31510
// if IsSelected ( i ) then
31460: LD_VAR 0 2
31464: PPUSH
31465: CALL_OW 306
31469: IFFALSE 31508
// begin for j := 1 to 4 do
31471: LD_ADDR_VAR 0 3
31475: PUSH
31476: DOUBLE
31477: LD_INT 1
31479: DEC
31480: ST_TO_ADDR
31481: LD_INT 4
31483: PUSH
31484: FOR_TO
31485: IFFALSE 31506
// SetSkill ( i , j , 10 ) ;
31487: LD_VAR 0 2
31491: PPUSH
31492: LD_VAR 0 3
31496: PPUSH
31497: LD_INT 10
31499: PPUSH
31500: CALL_OW 237
31504: GO 31484
31506: POP
31507: POP
// end ;
31508: GO 31457
31510: POP
31511: POP
// end ;
31512: LD_VAR 0 1
31516: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31517: LD_INT 0
31519: PPUSH
31520: PPUSH
31521: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31522: LD_ADDR_VAR 0 2
31526: PUSH
31527: LD_INT 22
31529: PUSH
31530: LD_OWVAR 2
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 21
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PPUSH
31553: CALL_OW 69
31557: PUSH
31558: FOR_IN
31559: IFFALSE 31600
// begin for j := 1 to 4 do
31561: LD_ADDR_VAR 0 3
31565: PUSH
31566: DOUBLE
31567: LD_INT 1
31569: DEC
31570: ST_TO_ADDR
31571: LD_INT 4
31573: PUSH
31574: FOR_TO
31575: IFFALSE 31596
// SetSkill ( i , j , 10 ) ;
31577: LD_VAR 0 2
31581: PPUSH
31582: LD_VAR 0 3
31586: PPUSH
31587: LD_INT 10
31589: PPUSH
31590: CALL_OW 237
31594: GO 31574
31596: POP
31597: POP
// end ;
31598: GO 31558
31600: POP
31601: POP
// end ;
31602: LD_VAR 0 1
31606: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31607: LD_INT 0
31609: PPUSH
// uc_side := your_side ;
31610: LD_ADDR_OWVAR 20
31614: PUSH
31615: LD_OWVAR 2
31619: ST_TO_ADDR
// uc_nation := nation ;
31620: LD_ADDR_OWVAR 21
31624: PUSH
31625: LD_VAR 0 1
31629: ST_TO_ADDR
// InitHc ;
31630: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31634: LD_INT 0
31636: PPUSH
31637: LD_VAR 0 2
31641: PPUSH
31642: LD_VAR 0 3
31646: PPUSH
31647: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31651: LD_VAR 0 4
31655: PPUSH
31656: LD_VAR 0 5
31660: PPUSH
31661: CALL_OW 428
31665: PUSH
31666: LD_INT 0
31668: EQUAL
31669: IFFALSE 31693
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31671: CALL_OW 44
31675: PPUSH
31676: LD_VAR 0 4
31680: PPUSH
31681: LD_VAR 0 5
31685: PPUSH
31686: LD_INT 1
31688: PPUSH
31689: CALL_OW 48
// end ;
31693: LD_VAR 0 6
31697: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31698: LD_INT 0
31700: PPUSH
31701: PPUSH
// uc_side := your_side ;
31702: LD_ADDR_OWVAR 20
31706: PUSH
31707: LD_OWVAR 2
31711: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31712: LD_VAR 0 1
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 3
31725: PUSH
31726: LD_INT 4
31728: PUSH
31729: LD_INT 5
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: IN
31739: IFFALSE 31751
// uc_nation := nation_american else
31741: LD_ADDR_OWVAR 21
31745: PUSH
31746: LD_INT 1
31748: ST_TO_ADDR
31749: GO 31794
// if chassis in [ 11 , 12 , 13 , 14 ] then
31751: LD_VAR 0 1
31755: PUSH
31756: LD_INT 11
31758: PUSH
31759: LD_INT 12
31761: PUSH
31762: LD_INT 13
31764: PUSH
31765: LD_INT 14
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: IN
31774: IFFALSE 31786
// uc_nation := nation_arabian else
31776: LD_ADDR_OWVAR 21
31780: PUSH
31781: LD_INT 2
31783: ST_TO_ADDR
31784: GO 31794
// uc_nation := nation_russian ;
31786: LD_ADDR_OWVAR 21
31790: PUSH
31791: LD_INT 3
31793: ST_TO_ADDR
// vc_chassis := chassis ;
31794: LD_ADDR_OWVAR 37
31798: PUSH
31799: LD_VAR 0 1
31803: ST_TO_ADDR
// vc_engine := engine ;
31804: LD_ADDR_OWVAR 39
31808: PUSH
31809: LD_VAR 0 2
31813: ST_TO_ADDR
// vc_control := control ;
31814: LD_ADDR_OWVAR 38
31818: PUSH
31819: LD_VAR 0 3
31823: ST_TO_ADDR
// vc_weapon := weapon ;
31824: LD_ADDR_OWVAR 40
31828: PUSH
31829: LD_VAR 0 4
31833: ST_TO_ADDR
// un := CreateVehicle ;
31834: LD_ADDR_VAR 0 8
31838: PUSH
31839: CALL_OW 45
31843: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31844: LD_VAR 0 8
31848: PPUSH
31849: LD_INT 0
31851: PPUSH
31852: LD_INT 5
31854: PPUSH
31855: CALL_OW 12
31859: PPUSH
31860: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31864: LD_VAR 0 8
31868: PPUSH
31869: LD_VAR 0 5
31873: PPUSH
31874: LD_VAR 0 6
31878: PPUSH
31879: LD_INT 1
31881: PPUSH
31882: CALL_OW 48
// end ;
31886: LD_VAR 0 7
31890: RET
// export hInvincible ; every 1 do
31891: GO 31893
31893: DISABLE
// hInvincible := [ ] ;
31894: LD_ADDR_EXP 118
31898: PUSH
31899: EMPTY
31900: ST_TO_ADDR
31901: END
// every 10 do var i ;
31902: GO 31904
31904: DISABLE
31905: LD_INT 0
31907: PPUSH
// begin enable ;
31908: ENABLE
// if not hInvincible then
31909: LD_EXP 118
31913: NOT
31914: IFFALSE 31918
// exit ;
31916: GO 31962
// for i in hInvincible do
31918: LD_ADDR_VAR 0 1
31922: PUSH
31923: LD_EXP 118
31927: PUSH
31928: FOR_IN
31929: IFFALSE 31960
// if GetLives ( i ) < 1000 then
31931: LD_VAR 0 1
31935: PPUSH
31936: CALL_OW 256
31940: PUSH
31941: LD_INT 1000
31943: LESS
31944: IFFALSE 31958
// SetLives ( i , 1000 ) ;
31946: LD_VAR 0 1
31950: PPUSH
31951: LD_INT 1000
31953: PPUSH
31954: CALL_OW 234
31958: GO 31928
31960: POP
31961: POP
// end ;
31962: PPOPN 1
31964: END
// export function hHackInvincible ; var i ; begin
31965: LD_INT 0
31967: PPUSH
31968: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31969: LD_ADDR_VAR 0 2
31973: PUSH
31974: LD_INT 2
31976: PUSH
31977: LD_INT 21
31979: PUSH
31980: LD_INT 1
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 21
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: PPUSH
32002: CALL_OW 69
32006: PUSH
32007: FOR_IN
32008: IFFALSE 32069
// if IsSelected ( i ) then
32010: LD_VAR 0 2
32014: PPUSH
32015: CALL_OW 306
32019: IFFALSE 32067
// begin if i in hInvincible then
32021: LD_VAR 0 2
32025: PUSH
32026: LD_EXP 118
32030: IN
32031: IFFALSE 32051
// hInvincible := hInvincible diff i else
32033: LD_ADDR_EXP 118
32037: PUSH
32038: LD_EXP 118
32042: PUSH
32043: LD_VAR 0 2
32047: DIFF
32048: ST_TO_ADDR
32049: GO 32067
// hInvincible := hInvincible union i ;
32051: LD_ADDR_EXP 118
32055: PUSH
32056: LD_EXP 118
32060: PUSH
32061: LD_VAR 0 2
32065: UNION
32066: ST_TO_ADDR
// end ;
32067: GO 32007
32069: POP
32070: POP
// end ;
32071: LD_VAR 0 1
32075: RET
// export function hHackInvisible ; var i , j ; begin
32076: LD_INT 0
32078: PPUSH
32079: PPUSH
32080: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32081: LD_ADDR_VAR 0 2
32085: PUSH
32086: LD_INT 21
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PPUSH
32096: CALL_OW 69
32100: PUSH
32101: FOR_IN
32102: IFFALSE 32126
// if IsSelected ( i ) then
32104: LD_VAR 0 2
32108: PPUSH
32109: CALL_OW 306
32113: IFFALSE 32124
// ComForceInvisible ( i ) ;
32115: LD_VAR 0 2
32119: PPUSH
32120: CALL_OW 496
32124: GO 32101
32126: POP
32127: POP
// end ;
32128: LD_VAR 0 1
32132: RET
// export function hHackChangeYourSide ; begin
32133: LD_INT 0
32135: PPUSH
// if your_side = 8 then
32136: LD_OWVAR 2
32140: PUSH
32141: LD_INT 8
32143: EQUAL
32144: IFFALSE 32156
// your_side := 0 else
32146: LD_ADDR_OWVAR 2
32150: PUSH
32151: LD_INT 0
32153: ST_TO_ADDR
32154: GO 32170
// your_side := your_side + 1 ;
32156: LD_ADDR_OWVAR 2
32160: PUSH
32161: LD_OWVAR 2
32165: PUSH
32166: LD_INT 1
32168: PLUS
32169: ST_TO_ADDR
// end ;
32170: LD_VAR 0 1
32174: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32175: LD_INT 0
32177: PPUSH
32178: PPUSH
32179: PPUSH
// for i in all_units do
32180: LD_ADDR_VAR 0 2
32184: PUSH
32185: LD_OWVAR 3
32189: PUSH
32190: FOR_IN
32191: IFFALSE 32269
// if IsSelected ( i ) then
32193: LD_VAR 0 2
32197: PPUSH
32198: CALL_OW 306
32202: IFFALSE 32267
// begin j := GetSide ( i ) ;
32204: LD_ADDR_VAR 0 3
32208: PUSH
32209: LD_VAR 0 2
32213: PPUSH
32214: CALL_OW 255
32218: ST_TO_ADDR
// if j = 8 then
32219: LD_VAR 0 3
32223: PUSH
32224: LD_INT 8
32226: EQUAL
32227: IFFALSE 32239
// j := 0 else
32229: LD_ADDR_VAR 0 3
32233: PUSH
32234: LD_INT 0
32236: ST_TO_ADDR
32237: GO 32253
// j := j + 1 ;
32239: LD_ADDR_VAR 0 3
32243: PUSH
32244: LD_VAR 0 3
32248: PUSH
32249: LD_INT 1
32251: PLUS
32252: ST_TO_ADDR
// SetSide ( i , j ) ;
32253: LD_VAR 0 2
32257: PPUSH
32258: LD_VAR 0 3
32262: PPUSH
32263: CALL_OW 235
// end ;
32267: GO 32190
32269: POP
32270: POP
// end ;
32271: LD_VAR 0 1
32275: RET
// export function hHackFog ; begin
32276: LD_INT 0
32278: PPUSH
// FogOff ( true ) ;
32279: LD_INT 1
32281: PPUSH
32282: CALL_OW 344
// end ;
32286: LD_VAR 0 1
32290: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32291: LD_INT 0
32293: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32294: LD_VAR 0 1
32298: PPUSH
32299: LD_VAR 0 2
32303: PPUSH
32304: LD_VAR 0 3
32308: PPUSH
32309: LD_INT 1
32311: PPUSH
32312: LD_INT 1
32314: PPUSH
32315: CALL_OW 483
// CenterOnXY ( x , y ) ;
32319: LD_VAR 0 2
32323: PPUSH
32324: LD_VAR 0 3
32328: PPUSH
32329: CALL_OW 84
// end ; end_of_file
32333: LD_VAR 0 4
32337: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32338: LD_INT 0
32340: PPUSH
32341: PPUSH
32342: PPUSH
32343: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32344: LD_VAR 0 1
32348: PPUSH
32349: CALL_OW 264
32353: PUSH
32354: LD_EXP 52
32358: EQUAL
32359: IFFALSE 32431
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32361: LD_INT 68
32363: PPUSH
32364: LD_VAR 0 1
32368: PPUSH
32369: CALL_OW 255
32373: PPUSH
32374: CALL_OW 321
32378: PUSH
32379: LD_INT 2
32381: EQUAL
32382: IFFALSE 32394
// eff := 70 else
32384: LD_ADDR_VAR 0 4
32388: PUSH
32389: LD_INT 70
32391: ST_TO_ADDR
32392: GO 32402
// eff := 30 ;
32394: LD_ADDR_VAR 0 4
32398: PUSH
32399: LD_INT 30
32401: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32402: LD_VAR 0 1
32406: PPUSH
32407: CALL_OW 250
32411: PPUSH
32412: LD_VAR 0 1
32416: PPUSH
32417: CALL_OW 251
32421: PPUSH
32422: LD_VAR 0 4
32426: PPUSH
32427: CALL_OW 495
// end ; end ;
32431: LD_VAR 0 2
32435: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32436: LD_INT 0
32438: PPUSH
// end ;
32439: LD_VAR 0 4
32443: RET
// export function SOS_Command ( cmd ) ; begin
32444: LD_INT 0
32446: PPUSH
// end ;
32447: LD_VAR 0 2
32451: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32452: LD_INT 0
32454: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32455: LD_VAR 0 1
32459: PUSH
32460: LD_INT 250
32462: EQUAL
32463: PUSH
32464: LD_VAR 0 2
32468: PPUSH
32469: CALL_OW 264
32473: PUSH
32474: LD_EXP 55
32478: EQUAL
32479: AND
32480: IFFALSE 32501
// MinerPlaceMine ( unit , x , y ) ;
32482: LD_VAR 0 2
32486: PPUSH
32487: LD_VAR 0 4
32491: PPUSH
32492: LD_VAR 0 5
32496: PPUSH
32497: CALL 34842 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32501: LD_VAR 0 1
32505: PUSH
32506: LD_INT 251
32508: EQUAL
32509: PUSH
32510: LD_VAR 0 2
32514: PPUSH
32515: CALL_OW 264
32519: PUSH
32520: LD_EXP 55
32524: EQUAL
32525: AND
32526: IFFALSE 32547
// MinerDetonateMine ( unit , x , y ) ;
32528: LD_VAR 0 2
32532: PPUSH
32533: LD_VAR 0 4
32537: PPUSH
32538: LD_VAR 0 5
32542: PPUSH
32543: CALL 35119 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32547: LD_VAR 0 1
32551: PUSH
32552: LD_INT 252
32554: EQUAL
32555: PUSH
32556: LD_VAR 0 2
32560: PPUSH
32561: CALL_OW 264
32565: PUSH
32566: LD_EXP 55
32570: EQUAL
32571: AND
32572: IFFALSE 32593
// MinerCreateMinefield ( unit , x , y ) ;
32574: LD_VAR 0 2
32578: PPUSH
32579: LD_VAR 0 4
32583: PPUSH
32584: LD_VAR 0 5
32588: PPUSH
32589: CALL 35536 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32593: LD_VAR 0 1
32597: PUSH
32598: LD_INT 253
32600: EQUAL
32601: PUSH
32602: LD_VAR 0 2
32606: PPUSH
32607: CALL_OW 257
32611: PUSH
32612: LD_INT 5
32614: EQUAL
32615: AND
32616: IFFALSE 32637
// ComBinocular ( unit , x , y ) ;
32618: LD_VAR 0 2
32622: PPUSH
32623: LD_VAR 0 4
32627: PPUSH
32628: LD_VAR 0 5
32632: PPUSH
32633: CALL 35907 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32637: LD_VAR 0 1
32641: PUSH
32642: LD_INT 254
32644: EQUAL
32645: PUSH
32646: LD_VAR 0 2
32650: PPUSH
32651: CALL_OW 264
32655: PUSH
32656: LD_EXP 50
32660: EQUAL
32661: AND
32662: PUSH
32663: LD_VAR 0 3
32667: PPUSH
32668: CALL_OW 263
32672: PUSH
32673: LD_INT 3
32675: EQUAL
32676: AND
32677: IFFALSE 32693
// HackDestroyVehicle ( unit , selectedUnit ) ;
32679: LD_VAR 0 2
32683: PPUSH
32684: LD_VAR 0 3
32688: PPUSH
32689: CALL 34202 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32693: LD_VAR 0 1
32697: PUSH
32698: LD_INT 255
32700: EQUAL
32701: PUSH
32702: LD_VAR 0 2
32706: PPUSH
32707: CALL_OW 264
32711: PUSH
32712: LD_INT 14
32714: PUSH
32715: LD_INT 53
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: IN
32722: AND
32723: PUSH
32724: LD_VAR 0 4
32728: PPUSH
32729: LD_VAR 0 5
32733: PPUSH
32734: CALL_OW 488
32738: AND
32739: IFFALSE 32763
// CutTreeXYR ( unit , x , y , 12 ) ;
32741: LD_VAR 0 2
32745: PPUSH
32746: LD_VAR 0 4
32750: PPUSH
32751: LD_VAR 0 5
32755: PPUSH
32756: LD_INT 12
32758: PPUSH
32759: CALL 32768 0 4
// end ;
32763: LD_VAR 0 6
32767: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32768: LD_INT 0
32770: PPUSH
32771: PPUSH
32772: PPUSH
32773: PPUSH
32774: PPUSH
32775: PPUSH
32776: PPUSH
32777: PPUSH
32778: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32779: LD_VAR 0 1
32783: NOT
32784: PUSH
32785: LD_VAR 0 2
32789: PPUSH
32790: LD_VAR 0 3
32794: PPUSH
32795: CALL_OW 488
32799: NOT
32800: OR
32801: PUSH
32802: LD_VAR 0 4
32806: NOT
32807: OR
32808: IFFALSE 32812
// exit ;
32810: GO 33152
// list := [ ] ;
32812: LD_ADDR_VAR 0 13
32816: PUSH
32817: EMPTY
32818: ST_TO_ADDR
// if x - r < 0 then
32819: LD_VAR 0 2
32823: PUSH
32824: LD_VAR 0 4
32828: MINUS
32829: PUSH
32830: LD_INT 0
32832: LESS
32833: IFFALSE 32845
// min_x := 0 else
32835: LD_ADDR_VAR 0 7
32839: PUSH
32840: LD_INT 0
32842: ST_TO_ADDR
32843: GO 32861
// min_x := x - r ;
32845: LD_ADDR_VAR 0 7
32849: PUSH
32850: LD_VAR 0 2
32854: PUSH
32855: LD_VAR 0 4
32859: MINUS
32860: ST_TO_ADDR
// if y - r < 0 then
32861: LD_VAR 0 3
32865: PUSH
32866: LD_VAR 0 4
32870: MINUS
32871: PUSH
32872: LD_INT 0
32874: LESS
32875: IFFALSE 32887
// min_y := 0 else
32877: LD_ADDR_VAR 0 8
32881: PUSH
32882: LD_INT 0
32884: ST_TO_ADDR
32885: GO 32903
// min_y := y - r ;
32887: LD_ADDR_VAR 0 8
32891: PUSH
32892: LD_VAR 0 3
32896: PUSH
32897: LD_VAR 0 4
32901: MINUS
32902: ST_TO_ADDR
// max_x := x + r ;
32903: LD_ADDR_VAR 0 9
32907: PUSH
32908: LD_VAR 0 2
32912: PUSH
32913: LD_VAR 0 4
32917: PLUS
32918: ST_TO_ADDR
// max_y := y + r ;
32919: LD_ADDR_VAR 0 10
32923: PUSH
32924: LD_VAR 0 3
32928: PUSH
32929: LD_VAR 0 4
32933: PLUS
32934: ST_TO_ADDR
// for _x = min_x to max_x do
32935: LD_ADDR_VAR 0 11
32939: PUSH
32940: DOUBLE
32941: LD_VAR 0 7
32945: DEC
32946: ST_TO_ADDR
32947: LD_VAR 0 9
32951: PUSH
32952: FOR_TO
32953: IFFALSE 33070
// for _y = min_y to max_y do
32955: LD_ADDR_VAR 0 12
32959: PUSH
32960: DOUBLE
32961: LD_VAR 0 8
32965: DEC
32966: ST_TO_ADDR
32967: LD_VAR 0 10
32971: PUSH
32972: FOR_TO
32973: IFFALSE 33066
// begin if not ValidHex ( _x , _y ) then
32975: LD_VAR 0 11
32979: PPUSH
32980: LD_VAR 0 12
32984: PPUSH
32985: CALL_OW 488
32989: NOT
32990: IFFALSE 32994
// continue ;
32992: GO 32972
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32994: LD_VAR 0 11
32998: PPUSH
32999: LD_VAR 0 12
33003: PPUSH
33004: CALL_OW 351
33008: PUSH
33009: LD_VAR 0 11
33013: PPUSH
33014: LD_VAR 0 12
33018: PPUSH
33019: CALL_OW 554
33023: AND
33024: IFFALSE 33064
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33026: LD_ADDR_VAR 0 13
33030: PUSH
33031: LD_VAR 0 13
33035: PPUSH
33036: LD_VAR 0 13
33040: PUSH
33041: LD_INT 1
33043: PLUS
33044: PPUSH
33045: LD_VAR 0 11
33049: PUSH
33050: LD_VAR 0 12
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PPUSH
33059: CALL_OW 2
33063: ST_TO_ADDR
// end ;
33064: GO 32972
33066: POP
33067: POP
33068: GO 32952
33070: POP
33071: POP
// if not list then
33072: LD_VAR 0 13
33076: NOT
33077: IFFALSE 33081
// exit ;
33079: GO 33152
// for i in list do
33081: LD_ADDR_VAR 0 6
33085: PUSH
33086: LD_VAR 0 13
33090: PUSH
33091: FOR_IN
33092: IFFALSE 33150
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33094: LD_VAR 0 1
33098: PPUSH
33099: LD_STRING M
33101: PUSH
33102: LD_VAR 0 6
33106: PUSH
33107: LD_INT 1
33109: ARRAY
33110: PUSH
33111: LD_VAR 0 6
33115: PUSH
33116: LD_INT 2
33118: ARRAY
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: PUSH
33141: EMPTY
33142: LIST
33143: PPUSH
33144: CALL_OW 447
33148: GO 33091
33150: POP
33151: POP
// end ;
33152: LD_VAR 0 5
33156: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33157: LD_EXP 119
33161: NOT
33162: IFFALSE 33212
33164: GO 33166
33166: DISABLE
// begin initHack := true ;
33167: LD_ADDR_EXP 119
33171: PUSH
33172: LD_INT 1
33174: ST_TO_ADDR
// hackTanks := [ ] ;
33175: LD_ADDR_EXP 120
33179: PUSH
33180: EMPTY
33181: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33182: LD_ADDR_EXP 121
33186: PUSH
33187: EMPTY
33188: ST_TO_ADDR
// hackLimit := 3 ;
33189: LD_ADDR_EXP 122
33193: PUSH
33194: LD_INT 3
33196: ST_TO_ADDR
// hackDist := 12 ;
33197: LD_ADDR_EXP 123
33201: PUSH
33202: LD_INT 12
33204: ST_TO_ADDR
// hackCounter := [ ] ;
33205: LD_ADDR_EXP 124
33209: PUSH
33210: EMPTY
33211: ST_TO_ADDR
// end ;
33212: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33213: LD_EXP 119
33217: PUSH
33218: LD_INT 34
33220: PUSH
33221: LD_EXP 50
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PPUSH
33230: CALL_OW 69
33234: AND
33235: IFFALSE 33490
33237: GO 33239
33239: DISABLE
33240: LD_INT 0
33242: PPUSH
33243: PPUSH
// begin enable ;
33244: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33245: LD_ADDR_VAR 0 1
33249: PUSH
33250: LD_INT 34
33252: PUSH
33253: LD_EXP 50
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PPUSH
33262: CALL_OW 69
33266: PUSH
33267: FOR_IN
33268: IFFALSE 33488
// begin if not i in hackTanks then
33270: LD_VAR 0 1
33274: PUSH
33275: LD_EXP 120
33279: IN
33280: NOT
33281: IFFALSE 33364
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33283: LD_ADDR_EXP 120
33287: PUSH
33288: LD_EXP 120
33292: PPUSH
33293: LD_EXP 120
33297: PUSH
33298: LD_INT 1
33300: PLUS
33301: PPUSH
33302: LD_VAR 0 1
33306: PPUSH
33307: CALL_OW 1
33311: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33312: LD_ADDR_EXP 121
33316: PUSH
33317: LD_EXP 121
33321: PPUSH
33322: LD_EXP 121
33326: PUSH
33327: LD_INT 1
33329: PLUS
33330: PPUSH
33331: EMPTY
33332: PPUSH
33333: CALL_OW 1
33337: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33338: LD_ADDR_EXP 124
33342: PUSH
33343: LD_EXP 124
33347: PPUSH
33348: LD_EXP 124
33352: PUSH
33353: LD_INT 1
33355: PLUS
33356: PPUSH
33357: EMPTY
33358: PPUSH
33359: CALL_OW 1
33363: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33364: LD_VAR 0 1
33368: PPUSH
33369: CALL_OW 302
33373: NOT
33374: IFFALSE 33387
// begin HackUnlinkAll ( i ) ;
33376: LD_VAR 0 1
33380: PPUSH
33381: CALL 33493 0 1
// continue ;
33385: GO 33267
// end ; HackCheckCapturedStatus ( i ) ;
33387: LD_VAR 0 1
33391: PPUSH
33392: CALL 33936 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33396: LD_ADDR_VAR 0 2
33400: PUSH
33401: LD_INT 81
33403: PUSH
33404: LD_VAR 0 1
33408: PPUSH
33409: CALL_OW 255
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 33
33420: PUSH
33421: LD_INT 3
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 91
33430: PUSH
33431: LD_VAR 0 1
33435: PUSH
33436: LD_EXP 123
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 50
33448: PUSH
33449: EMPTY
33450: LIST
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: PPUSH
33458: CALL_OW 69
33462: ST_TO_ADDR
// if not tmp then
33463: LD_VAR 0 2
33467: NOT
33468: IFFALSE 33472
// continue ;
33470: GO 33267
// HackLink ( i , tmp ) ;
33472: LD_VAR 0 1
33476: PPUSH
33477: LD_VAR 0 2
33481: PPUSH
33482: CALL 33629 0 2
// end ;
33486: GO 33267
33488: POP
33489: POP
// end ;
33490: PPOPN 2
33492: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33493: LD_INT 0
33495: PPUSH
33496: PPUSH
33497: PPUSH
// if not hack in hackTanks then
33498: LD_VAR 0 1
33502: PUSH
33503: LD_EXP 120
33507: IN
33508: NOT
33509: IFFALSE 33513
// exit ;
33511: GO 33624
// index := GetElementIndex ( hackTanks , hack ) ;
33513: LD_ADDR_VAR 0 4
33517: PUSH
33518: LD_EXP 120
33522: PPUSH
33523: LD_VAR 0 1
33527: PPUSH
33528: CALL 41058 0 2
33532: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33533: LD_EXP 121
33537: PUSH
33538: LD_VAR 0 4
33542: ARRAY
33543: IFFALSE 33624
// begin for i in hackTanksCaptured [ index ] do
33545: LD_ADDR_VAR 0 3
33549: PUSH
33550: LD_EXP 121
33554: PUSH
33555: LD_VAR 0 4
33559: ARRAY
33560: PUSH
33561: FOR_IN
33562: IFFALSE 33588
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33564: LD_VAR 0 3
33568: PUSH
33569: LD_INT 1
33571: ARRAY
33572: PPUSH
33573: LD_VAR 0 3
33577: PUSH
33578: LD_INT 2
33580: ARRAY
33581: PPUSH
33582: CALL_OW 235
33586: GO 33561
33588: POP
33589: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33590: LD_ADDR_EXP 121
33594: PUSH
33595: LD_EXP 121
33599: PPUSH
33600: LD_VAR 0 4
33604: PPUSH
33605: EMPTY
33606: PPUSH
33607: CALL_OW 1
33611: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33612: LD_VAR 0 1
33616: PPUSH
33617: LD_INT 0
33619: PPUSH
33620: CALL_OW 505
// end ; end ;
33624: LD_VAR 0 2
33628: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33629: LD_INT 0
33631: PPUSH
33632: PPUSH
33633: PPUSH
// if not hack in hackTanks or not vehicles then
33634: LD_VAR 0 1
33638: PUSH
33639: LD_EXP 120
33643: IN
33644: NOT
33645: PUSH
33646: LD_VAR 0 2
33650: NOT
33651: OR
33652: IFFALSE 33656
// exit ;
33654: GO 33931
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33656: LD_ADDR_VAR 0 2
33660: PUSH
33661: LD_VAR 0 1
33665: PPUSH
33666: LD_VAR 0 2
33670: PPUSH
33671: LD_INT 1
33673: PPUSH
33674: LD_INT 1
33676: PPUSH
33677: CALL 41708 0 4
33681: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33682: LD_ADDR_VAR 0 5
33686: PUSH
33687: LD_EXP 120
33691: PPUSH
33692: LD_VAR 0 1
33696: PPUSH
33697: CALL 41058 0 2
33701: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33702: LD_EXP 121
33706: PUSH
33707: LD_VAR 0 5
33711: ARRAY
33712: PUSH
33713: LD_EXP 122
33717: LESS
33718: IFFALSE 33907
// begin for i := 1 to vehicles do
33720: LD_ADDR_VAR 0 4
33724: PUSH
33725: DOUBLE
33726: LD_INT 1
33728: DEC
33729: ST_TO_ADDR
33730: LD_VAR 0 2
33734: PUSH
33735: FOR_TO
33736: IFFALSE 33905
// begin if hackTanksCaptured [ index ] = hackLimit then
33738: LD_EXP 121
33742: PUSH
33743: LD_VAR 0 5
33747: ARRAY
33748: PUSH
33749: LD_EXP 122
33753: EQUAL
33754: IFFALSE 33758
// break ;
33756: GO 33905
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33758: LD_ADDR_EXP 124
33762: PUSH
33763: LD_EXP 124
33767: PPUSH
33768: LD_VAR 0 5
33772: PPUSH
33773: LD_EXP 124
33777: PUSH
33778: LD_VAR 0 5
33782: ARRAY
33783: PUSH
33784: LD_INT 1
33786: PLUS
33787: PPUSH
33788: CALL_OW 1
33792: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33793: LD_ADDR_EXP 121
33797: PUSH
33798: LD_EXP 121
33802: PPUSH
33803: LD_VAR 0 5
33807: PUSH
33808: LD_EXP 121
33812: PUSH
33813: LD_VAR 0 5
33817: ARRAY
33818: PUSH
33819: LD_INT 1
33821: PLUS
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PPUSH
33827: LD_VAR 0 2
33831: PUSH
33832: LD_VAR 0 4
33836: ARRAY
33837: PUSH
33838: LD_VAR 0 2
33842: PUSH
33843: LD_VAR 0 4
33847: ARRAY
33848: PPUSH
33849: CALL_OW 255
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PPUSH
33858: CALL 41273 0 3
33862: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33863: LD_VAR 0 2
33867: PUSH
33868: LD_VAR 0 4
33872: ARRAY
33873: PPUSH
33874: LD_VAR 0 1
33878: PPUSH
33879: CALL_OW 255
33883: PPUSH
33884: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33888: LD_VAR 0 2
33892: PUSH
33893: LD_VAR 0 4
33897: ARRAY
33898: PPUSH
33899: CALL_OW 141
// end ;
33903: GO 33735
33905: POP
33906: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33907: LD_VAR 0 1
33911: PPUSH
33912: LD_EXP 121
33916: PUSH
33917: LD_VAR 0 5
33921: ARRAY
33922: PUSH
33923: LD_INT 0
33925: PLUS
33926: PPUSH
33927: CALL_OW 505
// end ;
33931: LD_VAR 0 3
33935: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33936: LD_INT 0
33938: PPUSH
33939: PPUSH
33940: PPUSH
33941: PPUSH
// if not hack in hackTanks then
33942: LD_VAR 0 1
33946: PUSH
33947: LD_EXP 120
33951: IN
33952: NOT
33953: IFFALSE 33957
// exit ;
33955: GO 34197
// index := GetElementIndex ( hackTanks , hack ) ;
33957: LD_ADDR_VAR 0 4
33961: PUSH
33962: LD_EXP 120
33966: PPUSH
33967: LD_VAR 0 1
33971: PPUSH
33972: CALL 41058 0 2
33976: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33977: LD_ADDR_VAR 0 3
33981: PUSH
33982: DOUBLE
33983: LD_EXP 121
33987: PUSH
33988: LD_VAR 0 4
33992: ARRAY
33993: INC
33994: ST_TO_ADDR
33995: LD_INT 1
33997: PUSH
33998: FOR_DOWNTO
33999: IFFALSE 34171
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34001: LD_ADDR_VAR 0 5
34005: PUSH
34006: LD_EXP 121
34010: PUSH
34011: LD_VAR 0 4
34015: ARRAY
34016: PUSH
34017: LD_VAR 0 3
34021: ARRAY
34022: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34023: LD_VAR 0 5
34027: PUSH
34028: LD_INT 1
34030: ARRAY
34031: PPUSH
34032: CALL_OW 302
34036: NOT
34037: PUSH
34038: LD_VAR 0 5
34042: PUSH
34043: LD_INT 1
34045: ARRAY
34046: PPUSH
34047: CALL_OW 255
34051: PUSH
34052: LD_VAR 0 1
34056: PPUSH
34057: CALL_OW 255
34061: NONEQUAL
34062: OR
34063: IFFALSE 34169
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34065: LD_VAR 0 5
34069: PUSH
34070: LD_INT 1
34072: ARRAY
34073: PPUSH
34074: CALL_OW 305
34078: PUSH
34079: LD_VAR 0 5
34083: PUSH
34084: LD_INT 1
34086: ARRAY
34087: PPUSH
34088: CALL_OW 255
34092: PUSH
34093: LD_VAR 0 1
34097: PPUSH
34098: CALL_OW 255
34102: EQUAL
34103: AND
34104: IFFALSE 34128
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34106: LD_VAR 0 5
34110: PUSH
34111: LD_INT 1
34113: ARRAY
34114: PPUSH
34115: LD_VAR 0 5
34119: PUSH
34120: LD_INT 2
34122: ARRAY
34123: PPUSH
34124: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34128: LD_ADDR_EXP 121
34132: PUSH
34133: LD_EXP 121
34137: PPUSH
34138: LD_VAR 0 4
34142: PPUSH
34143: LD_EXP 121
34147: PUSH
34148: LD_VAR 0 4
34152: ARRAY
34153: PPUSH
34154: LD_VAR 0 3
34158: PPUSH
34159: CALL_OW 3
34163: PPUSH
34164: CALL_OW 1
34168: ST_TO_ADDR
// end ; end ;
34169: GO 33998
34171: POP
34172: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34173: LD_VAR 0 1
34177: PPUSH
34178: LD_EXP 121
34182: PUSH
34183: LD_VAR 0 4
34187: ARRAY
34188: PUSH
34189: LD_INT 0
34191: PLUS
34192: PPUSH
34193: CALL_OW 505
// end ;
34197: LD_VAR 0 2
34201: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34202: LD_INT 0
34204: PPUSH
34205: PPUSH
34206: PPUSH
34207: PPUSH
// if not hack in hackTanks then
34208: LD_VAR 0 1
34212: PUSH
34213: LD_EXP 120
34217: IN
34218: NOT
34219: IFFALSE 34223
// exit ;
34221: GO 34308
// index := GetElementIndex ( hackTanks , hack ) ;
34223: LD_ADDR_VAR 0 5
34227: PUSH
34228: LD_EXP 120
34232: PPUSH
34233: LD_VAR 0 1
34237: PPUSH
34238: CALL 41058 0 2
34242: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34243: LD_ADDR_VAR 0 4
34247: PUSH
34248: DOUBLE
34249: LD_INT 1
34251: DEC
34252: ST_TO_ADDR
34253: LD_EXP 121
34257: PUSH
34258: LD_VAR 0 5
34262: ARRAY
34263: PUSH
34264: FOR_TO
34265: IFFALSE 34306
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34267: LD_EXP 121
34271: PUSH
34272: LD_VAR 0 5
34276: ARRAY
34277: PUSH
34278: LD_VAR 0 4
34282: ARRAY
34283: PUSH
34284: LD_INT 1
34286: ARRAY
34287: PUSH
34288: LD_VAR 0 2
34292: EQUAL
34293: IFFALSE 34304
// KillUnit ( vehicle ) ;
34295: LD_VAR 0 2
34299: PPUSH
34300: CALL_OW 66
34304: GO 34264
34306: POP
34307: POP
// end ;
34308: LD_VAR 0 3
34312: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34313: LD_EXP 125
34317: NOT
34318: IFFALSE 34353
34320: GO 34322
34322: DISABLE
// begin initMiner := true ;
34323: LD_ADDR_EXP 125
34327: PUSH
34328: LD_INT 1
34330: ST_TO_ADDR
// minersList := [ ] ;
34331: LD_ADDR_EXP 126
34335: PUSH
34336: EMPTY
34337: ST_TO_ADDR
// minerMinesList := [ ] ;
34338: LD_ADDR_EXP 127
34342: PUSH
34343: EMPTY
34344: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34345: LD_ADDR_EXP 128
34349: PUSH
34350: LD_INT 5
34352: ST_TO_ADDR
// end ;
34353: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34354: LD_EXP 125
34358: PUSH
34359: LD_INT 34
34361: PUSH
34362: LD_EXP 55
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PPUSH
34371: CALL_OW 69
34375: AND
34376: IFFALSE 34839
34378: GO 34380
34380: DISABLE
34381: LD_INT 0
34383: PPUSH
34384: PPUSH
34385: PPUSH
34386: PPUSH
// begin enable ;
34387: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34388: LD_ADDR_VAR 0 1
34392: PUSH
34393: LD_INT 34
34395: PUSH
34396: LD_EXP 55
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PPUSH
34405: CALL_OW 69
34409: PUSH
34410: FOR_IN
34411: IFFALSE 34483
// begin if not i in minersList then
34413: LD_VAR 0 1
34417: PUSH
34418: LD_EXP 126
34422: IN
34423: NOT
34424: IFFALSE 34481
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34426: LD_ADDR_EXP 126
34430: PUSH
34431: LD_EXP 126
34435: PPUSH
34436: LD_EXP 126
34440: PUSH
34441: LD_INT 1
34443: PLUS
34444: PPUSH
34445: LD_VAR 0 1
34449: PPUSH
34450: CALL_OW 1
34454: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34455: LD_ADDR_EXP 127
34459: PUSH
34460: LD_EXP 127
34464: PPUSH
34465: LD_EXP 127
34469: PUSH
34470: LD_INT 1
34472: PLUS
34473: PPUSH
34474: EMPTY
34475: PPUSH
34476: CALL_OW 1
34480: ST_TO_ADDR
// end end ;
34481: GO 34410
34483: POP
34484: POP
// for i := minerMinesList downto 1 do
34485: LD_ADDR_VAR 0 1
34489: PUSH
34490: DOUBLE
34491: LD_EXP 127
34495: INC
34496: ST_TO_ADDR
34497: LD_INT 1
34499: PUSH
34500: FOR_DOWNTO
34501: IFFALSE 34837
// begin if IsLive ( minersList [ i ] ) then
34503: LD_EXP 126
34507: PUSH
34508: LD_VAR 0 1
34512: ARRAY
34513: PPUSH
34514: CALL_OW 300
34518: IFFALSE 34546
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34520: LD_EXP 126
34524: PUSH
34525: LD_VAR 0 1
34529: ARRAY
34530: PPUSH
34531: LD_EXP 127
34535: PUSH
34536: LD_VAR 0 1
34540: ARRAY
34541: PPUSH
34542: CALL_OW 505
// if not minerMinesList [ i ] then
34546: LD_EXP 127
34550: PUSH
34551: LD_VAR 0 1
34555: ARRAY
34556: NOT
34557: IFFALSE 34561
// continue ;
34559: GO 34500
// for j := minerMinesList [ i ] downto 1 do
34561: LD_ADDR_VAR 0 2
34565: PUSH
34566: DOUBLE
34567: LD_EXP 127
34571: PUSH
34572: LD_VAR 0 1
34576: ARRAY
34577: INC
34578: ST_TO_ADDR
34579: LD_INT 1
34581: PUSH
34582: FOR_DOWNTO
34583: IFFALSE 34833
// begin side := GetSide ( minersList [ i ] ) ;
34585: LD_ADDR_VAR 0 3
34589: PUSH
34590: LD_EXP 126
34594: PUSH
34595: LD_VAR 0 1
34599: ARRAY
34600: PPUSH
34601: CALL_OW 255
34605: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34606: LD_ADDR_VAR 0 4
34610: PUSH
34611: LD_EXP 127
34615: PUSH
34616: LD_VAR 0 1
34620: ARRAY
34621: PUSH
34622: LD_VAR 0 2
34626: ARRAY
34627: PUSH
34628: LD_INT 1
34630: ARRAY
34631: PPUSH
34632: LD_EXP 127
34636: PUSH
34637: LD_VAR 0 1
34641: ARRAY
34642: PUSH
34643: LD_VAR 0 2
34647: ARRAY
34648: PUSH
34649: LD_INT 2
34651: ARRAY
34652: PPUSH
34653: CALL_OW 428
34657: ST_TO_ADDR
// if not tmp then
34658: LD_VAR 0 4
34662: NOT
34663: IFFALSE 34667
// continue ;
34665: GO 34582
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34667: LD_VAR 0 4
34671: PUSH
34672: LD_INT 81
34674: PUSH
34675: LD_VAR 0 3
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PPUSH
34684: CALL_OW 69
34688: IN
34689: PUSH
34690: LD_EXP 127
34694: PUSH
34695: LD_VAR 0 1
34699: ARRAY
34700: PUSH
34701: LD_VAR 0 2
34705: ARRAY
34706: PUSH
34707: LD_INT 1
34709: ARRAY
34710: PPUSH
34711: LD_EXP 127
34715: PUSH
34716: LD_VAR 0 1
34720: ARRAY
34721: PUSH
34722: LD_VAR 0 2
34726: ARRAY
34727: PUSH
34728: LD_INT 2
34730: ARRAY
34731: PPUSH
34732: CALL_OW 458
34736: AND
34737: IFFALSE 34831
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34739: LD_EXP 127
34743: PUSH
34744: LD_VAR 0 1
34748: ARRAY
34749: PUSH
34750: LD_VAR 0 2
34754: ARRAY
34755: PUSH
34756: LD_INT 1
34758: ARRAY
34759: PPUSH
34760: LD_EXP 127
34764: PUSH
34765: LD_VAR 0 1
34769: ARRAY
34770: PUSH
34771: LD_VAR 0 2
34775: ARRAY
34776: PUSH
34777: LD_INT 2
34779: ARRAY
34780: PPUSH
34781: LD_VAR 0 3
34785: PPUSH
34786: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34790: LD_ADDR_EXP 127
34794: PUSH
34795: LD_EXP 127
34799: PPUSH
34800: LD_VAR 0 1
34804: PPUSH
34805: LD_EXP 127
34809: PUSH
34810: LD_VAR 0 1
34814: ARRAY
34815: PPUSH
34816: LD_VAR 0 2
34820: PPUSH
34821: CALL_OW 3
34825: PPUSH
34826: CALL_OW 1
34830: ST_TO_ADDR
// end ; end ;
34831: GO 34582
34833: POP
34834: POP
// end ;
34835: GO 34500
34837: POP
34838: POP
// end ;
34839: PPOPN 4
34841: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34842: LD_INT 0
34844: PPUSH
34845: PPUSH
// result := false ;
34846: LD_ADDR_VAR 0 4
34850: PUSH
34851: LD_INT 0
34853: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34854: LD_VAR 0 1
34858: PPUSH
34859: CALL_OW 264
34863: PUSH
34864: LD_EXP 55
34868: EQUAL
34869: NOT
34870: IFFALSE 34874
// exit ;
34872: GO 35114
// index := GetElementIndex ( minersList , unit ) ;
34874: LD_ADDR_VAR 0 5
34878: PUSH
34879: LD_EXP 126
34883: PPUSH
34884: LD_VAR 0 1
34888: PPUSH
34889: CALL 41058 0 2
34893: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34894: LD_EXP 127
34898: PUSH
34899: LD_VAR 0 5
34903: ARRAY
34904: PUSH
34905: LD_EXP 128
34909: GREATEREQUAL
34910: IFFALSE 34914
// exit ;
34912: GO 35114
// ComMoveXY ( unit , x , y ) ;
34914: LD_VAR 0 1
34918: PPUSH
34919: LD_VAR 0 2
34923: PPUSH
34924: LD_VAR 0 3
34928: PPUSH
34929: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34933: LD_INT 35
34935: PPUSH
34936: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34940: LD_VAR 0 1
34944: PPUSH
34945: LD_VAR 0 2
34949: PPUSH
34950: LD_VAR 0 3
34954: PPUSH
34955: CALL 71122 0 3
34959: NOT
34960: PUSH
34961: LD_VAR 0 1
34965: PPUSH
34966: CALL_OW 314
34970: AND
34971: IFFALSE 34975
// exit ;
34973: GO 35114
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34975: LD_VAR 0 2
34979: PPUSH
34980: LD_VAR 0 3
34984: PPUSH
34985: CALL_OW 428
34989: PUSH
34990: LD_VAR 0 1
34994: EQUAL
34995: PUSH
34996: LD_VAR 0 1
35000: PPUSH
35001: CALL_OW 314
35005: NOT
35006: AND
35007: IFFALSE 34933
// PlaySoundXY ( x , y , PlantMine ) ;
35009: LD_VAR 0 2
35013: PPUSH
35014: LD_VAR 0 3
35018: PPUSH
35019: LD_STRING PlantMine
35021: PPUSH
35022: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35026: LD_VAR 0 2
35030: PPUSH
35031: LD_VAR 0 3
35035: PPUSH
35036: LD_VAR 0 1
35040: PPUSH
35041: CALL_OW 255
35045: PPUSH
35046: LD_INT 0
35048: PPUSH
35049: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35053: LD_ADDR_EXP 127
35057: PUSH
35058: LD_EXP 127
35062: PPUSH
35063: LD_VAR 0 5
35067: PUSH
35068: LD_EXP 127
35072: PUSH
35073: LD_VAR 0 5
35077: ARRAY
35078: PUSH
35079: LD_INT 1
35081: PLUS
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PPUSH
35087: LD_VAR 0 2
35091: PUSH
35092: LD_VAR 0 3
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PPUSH
35101: CALL 41273 0 3
35105: ST_TO_ADDR
// result := true ;
35106: LD_ADDR_VAR 0 4
35110: PUSH
35111: LD_INT 1
35113: ST_TO_ADDR
// end ;
35114: LD_VAR 0 4
35118: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35119: LD_INT 0
35121: PPUSH
35122: PPUSH
35123: PPUSH
// if not unit in minersList then
35124: LD_VAR 0 1
35128: PUSH
35129: LD_EXP 126
35133: IN
35134: NOT
35135: IFFALSE 35139
// exit ;
35137: GO 35531
// index := GetElementIndex ( minersList , unit ) ;
35139: LD_ADDR_VAR 0 6
35143: PUSH
35144: LD_EXP 126
35148: PPUSH
35149: LD_VAR 0 1
35153: PPUSH
35154: CALL 41058 0 2
35158: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35159: LD_ADDR_VAR 0 5
35163: PUSH
35164: DOUBLE
35165: LD_EXP 127
35169: PUSH
35170: LD_VAR 0 6
35174: ARRAY
35175: INC
35176: ST_TO_ADDR
35177: LD_INT 1
35179: PUSH
35180: FOR_DOWNTO
35181: IFFALSE 35342
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35183: LD_EXP 127
35187: PUSH
35188: LD_VAR 0 6
35192: ARRAY
35193: PUSH
35194: LD_VAR 0 5
35198: ARRAY
35199: PUSH
35200: LD_INT 1
35202: ARRAY
35203: PUSH
35204: LD_VAR 0 2
35208: EQUAL
35209: PUSH
35210: LD_EXP 127
35214: PUSH
35215: LD_VAR 0 6
35219: ARRAY
35220: PUSH
35221: LD_VAR 0 5
35225: ARRAY
35226: PUSH
35227: LD_INT 2
35229: ARRAY
35230: PUSH
35231: LD_VAR 0 3
35235: EQUAL
35236: AND
35237: IFFALSE 35340
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35239: LD_EXP 127
35243: PUSH
35244: LD_VAR 0 6
35248: ARRAY
35249: PUSH
35250: LD_VAR 0 5
35254: ARRAY
35255: PUSH
35256: LD_INT 1
35258: ARRAY
35259: PPUSH
35260: LD_EXP 127
35264: PUSH
35265: LD_VAR 0 6
35269: ARRAY
35270: PUSH
35271: LD_VAR 0 5
35275: ARRAY
35276: PUSH
35277: LD_INT 2
35279: ARRAY
35280: PPUSH
35281: LD_VAR 0 1
35285: PPUSH
35286: CALL_OW 255
35290: PPUSH
35291: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35295: LD_ADDR_EXP 127
35299: PUSH
35300: LD_EXP 127
35304: PPUSH
35305: LD_VAR 0 6
35309: PPUSH
35310: LD_EXP 127
35314: PUSH
35315: LD_VAR 0 6
35319: ARRAY
35320: PPUSH
35321: LD_VAR 0 5
35325: PPUSH
35326: CALL_OW 3
35330: PPUSH
35331: CALL_OW 1
35335: ST_TO_ADDR
// exit ;
35336: POP
35337: POP
35338: GO 35531
// end ; end ;
35340: GO 35180
35342: POP
35343: POP
// for i := minerMinesList [ index ] downto 1 do
35344: LD_ADDR_VAR 0 5
35348: PUSH
35349: DOUBLE
35350: LD_EXP 127
35354: PUSH
35355: LD_VAR 0 6
35359: ARRAY
35360: INC
35361: ST_TO_ADDR
35362: LD_INT 1
35364: PUSH
35365: FOR_DOWNTO
35366: IFFALSE 35529
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35368: LD_EXP 127
35372: PUSH
35373: LD_VAR 0 6
35377: ARRAY
35378: PUSH
35379: LD_VAR 0 5
35383: ARRAY
35384: PUSH
35385: LD_INT 1
35387: ARRAY
35388: PPUSH
35389: LD_EXP 127
35393: PUSH
35394: LD_VAR 0 6
35398: ARRAY
35399: PUSH
35400: LD_VAR 0 5
35404: ARRAY
35405: PUSH
35406: LD_INT 2
35408: ARRAY
35409: PPUSH
35410: LD_VAR 0 2
35414: PPUSH
35415: LD_VAR 0 3
35419: PPUSH
35420: CALL_OW 298
35424: PUSH
35425: LD_INT 6
35427: LESS
35428: IFFALSE 35527
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35430: LD_EXP 127
35434: PUSH
35435: LD_VAR 0 6
35439: ARRAY
35440: PUSH
35441: LD_VAR 0 5
35445: ARRAY
35446: PUSH
35447: LD_INT 1
35449: ARRAY
35450: PPUSH
35451: LD_EXP 127
35455: PUSH
35456: LD_VAR 0 6
35460: ARRAY
35461: PUSH
35462: LD_VAR 0 5
35466: ARRAY
35467: PUSH
35468: LD_INT 2
35470: ARRAY
35471: PPUSH
35472: LD_VAR 0 1
35476: PPUSH
35477: CALL_OW 255
35481: PPUSH
35482: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35486: LD_ADDR_EXP 127
35490: PUSH
35491: LD_EXP 127
35495: PPUSH
35496: LD_VAR 0 6
35500: PPUSH
35501: LD_EXP 127
35505: PUSH
35506: LD_VAR 0 6
35510: ARRAY
35511: PPUSH
35512: LD_VAR 0 5
35516: PPUSH
35517: CALL_OW 3
35521: PPUSH
35522: CALL_OW 1
35526: ST_TO_ADDR
// end ; end ;
35527: GO 35365
35529: POP
35530: POP
// end ;
35531: LD_VAR 0 4
35535: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35536: LD_INT 0
35538: PPUSH
35539: PPUSH
35540: PPUSH
35541: PPUSH
35542: PPUSH
35543: PPUSH
35544: PPUSH
35545: PPUSH
35546: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35547: LD_VAR 0 1
35551: PPUSH
35552: CALL_OW 264
35556: PUSH
35557: LD_EXP 55
35561: EQUAL
35562: NOT
35563: PUSH
35564: LD_VAR 0 1
35568: PUSH
35569: LD_EXP 126
35573: IN
35574: NOT
35575: OR
35576: IFFALSE 35580
// exit ;
35578: GO 35902
// index := GetElementIndex ( minersList , unit ) ;
35580: LD_ADDR_VAR 0 6
35584: PUSH
35585: LD_EXP 126
35589: PPUSH
35590: LD_VAR 0 1
35594: PPUSH
35595: CALL 41058 0 2
35599: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35600: LD_ADDR_VAR 0 8
35604: PUSH
35605: LD_EXP 128
35609: PUSH
35610: LD_EXP 127
35614: PUSH
35615: LD_VAR 0 6
35619: ARRAY
35620: MINUS
35621: ST_TO_ADDR
// if not minesFreeAmount then
35622: LD_VAR 0 8
35626: NOT
35627: IFFALSE 35631
// exit ;
35629: GO 35902
// tmp := [ ] ;
35631: LD_ADDR_VAR 0 7
35635: PUSH
35636: EMPTY
35637: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35638: LD_ADDR_VAR 0 5
35642: PUSH
35643: DOUBLE
35644: LD_INT 1
35646: DEC
35647: ST_TO_ADDR
35648: LD_VAR 0 8
35652: PUSH
35653: FOR_TO
35654: IFFALSE 35849
// begin _d := rand ( 0 , 5 ) ;
35656: LD_ADDR_VAR 0 11
35660: PUSH
35661: LD_INT 0
35663: PPUSH
35664: LD_INT 5
35666: PPUSH
35667: CALL_OW 12
35671: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35672: LD_ADDR_VAR 0 12
35676: PUSH
35677: LD_INT 2
35679: PPUSH
35680: LD_INT 6
35682: PPUSH
35683: CALL_OW 12
35687: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35688: LD_ADDR_VAR 0 9
35692: PUSH
35693: LD_VAR 0 2
35697: PPUSH
35698: LD_VAR 0 11
35702: PPUSH
35703: LD_VAR 0 12
35707: PPUSH
35708: CALL_OW 272
35712: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35713: LD_ADDR_VAR 0 10
35717: PUSH
35718: LD_VAR 0 3
35722: PPUSH
35723: LD_VAR 0 11
35727: PPUSH
35728: LD_VAR 0 12
35732: PPUSH
35733: CALL_OW 273
35737: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35738: LD_VAR 0 9
35742: PPUSH
35743: LD_VAR 0 10
35747: PPUSH
35748: CALL_OW 488
35752: PUSH
35753: LD_VAR 0 9
35757: PUSH
35758: LD_VAR 0 10
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_VAR 0 7
35771: IN
35772: NOT
35773: AND
35774: PUSH
35775: LD_VAR 0 9
35779: PPUSH
35780: LD_VAR 0 10
35784: PPUSH
35785: CALL_OW 458
35789: NOT
35790: AND
35791: IFFALSE 35833
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35793: LD_ADDR_VAR 0 7
35797: PUSH
35798: LD_VAR 0 7
35802: PPUSH
35803: LD_VAR 0 7
35807: PUSH
35808: LD_INT 1
35810: PLUS
35811: PPUSH
35812: LD_VAR 0 9
35816: PUSH
35817: LD_VAR 0 10
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PPUSH
35826: CALL_OW 1
35830: ST_TO_ADDR
35831: GO 35847
// i := i - 1 ;
35833: LD_ADDR_VAR 0 5
35837: PUSH
35838: LD_VAR 0 5
35842: PUSH
35843: LD_INT 1
35845: MINUS
35846: ST_TO_ADDR
// end ;
35847: GO 35653
35849: POP
35850: POP
// for i in tmp do
35851: LD_ADDR_VAR 0 5
35855: PUSH
35856: LD_VAR 0 7
35860: PUSH
35861: FOR_IN
35862: IFFALSE 35900
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35864: LD_VAR 0 1
35868: PPUSH
35869: LD_VAR 0 5
35873: PUSH
35874: LD_INT 1
35876: ARRAY
35877: PPUSH
35878: LD_VAR 0 5
35882: PUSH
35883: LD_INT 2
35885: ARRAY
35886: PPUSH
35887: CALL 34842 0 3
35891: NOT
35892: IFFALSE 35898
// exit ;
35894: POP
35895: POP
35896: GO 35902
35898: GO 35861
35900: POP
35901: POP
// end ;
35902: LD_VAR 0 4
35906: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35907: LD_INT 0
35909: PPUSH
35910: PPUSH
35911: PPUSH
35912: PPUSH
35913: PPUSH
35914: PPUSH
35915: PPUSH
// if not GetClass ( unit ) = class_sniper then
35916: LD_VAR 0 1
35920: PPUSH
35921: CALL_OW 257
35925: PUSH
35926: LD_INT 5
35928: EQUAL
35929: NOT
35930: IFFALSE 35934
// exit ;
35932: GO 36322
// dist := 8 ;
35934: LD_ADDR_VAR 0 5
35938: PUSH
35939: LD_INT 8
35941: ST_TO_ADDR
// viewRange := 12 ;
35942: LD_ADDR_VAR 0 7
35946: PUSH
35947: LD_INT 12
35949: ST_TO_ADDR
// side := GetSide ( unit ) ;
35950: LD_ADDR_VAR 0 6
35954: PUSH
35955: LD_VAR 0 1
35959: PPUSH
35960: CALL_OW 255
35964: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35965: LD_INT 61
35967: PPUSH
35968: LD_VAR 0 6
35972: PPUSH
35973: CALL_OW 321
35977: PUSH
35978: LD_INT 2
35980: EQUAL
35981: IFFALSE 35991
// viewRange := 16 ;
35983: LD_ADDR_VAR 0 7
35987: PUSH
35988: LD_INT 16
35990: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35991: LD_VAR 0 1
35995: PPUSH
35996: LD_VAR 0 2
36000: PPUSH
36001: LD_VAR 0 3
36005: PPUSH
36006: CALL_OW 297
36010: PUSH
36011: LD_VAR 0 5
36015: GREATER
36016: IFFALSE 36095
// begin ComMoveXY ( unit , x , y ) ;
36018: LD_VAR 0 1
36022: PPUSH
36023: LD_VAR 0 2
36027: PPUSH
36028: LD_VAR 0 3
36032: PPUSH
36033: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36037: LD_INT 35
36039: PPUSH
36040: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36044: LD_VAR 0 1
36048: PPUSH
36049: LD_VAR 0 2
36053: PPUSH
36054: LD_VAR 0 3
36058: PPUSH
36059: CALL 71122 0 3
36063: NOT
36064: IFFALSE 36068
// exit ;
36066: GO 36322
// until GetDistUnitXY ( unit , x , y ) < dist ;
36068: LD_VAR 0 1
36072: PPUSH
36073: LD_VAR 0 2
36077: PPUSH
36078: LD_VAR 0 3
36082: PPUSH
36083: CALL_OW 297
36087: PUSH
36088: LD_VAR 0 5
36092: LESS
36093: IFFALSE 36037
// end ; ComTurnXY ( unit , x , y ) ;
36095: LD_VAR 0 1
36099: PPUSH
36100: LD_VAR 0 2
36104: PPUSH
36105: LD_VAR 0 3
36109: PPUSH
36110: CALL_OW 118
// wait ( 5 ) ;
36114: LD_INT 5
36116: PPUSH
36117: CALL_OW 67
// _d := GetDir ( unit ) ;
36121: LD_ADDR_VAR 0 10
36125: PUSH
36126: LD_VAR 0 1
36130: PPUSH
36131: CALL_OW 254
36135: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36136: LD_ADDR_VAR 0 8
36140: PUSH
36141: LD_VAR 0 1
36145: PPUSH
36146: CALL_OW 250
36150: PPUSH
36151: LD_VAR 0 10
36155: PPUSH
36156: LD_VAR 0 5
36160: PPUSH
36161: CALL_OW 272
36165: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36166: LD_ADDR_VAR 0 9
36170: PUSH
36171: LD_VAR 0 1
36175: PPUSH
36176: CALL_OW 251
36180: PPUSH
36181: LD_VAR 0 10
36185: PPUSH
36186: LD_VAR 0 5
36190: PPUSH
36191: CALL_OW 273
36195: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36196: LD_VAR 0 8
36200: PPUSH
36201: LD_VAR 0 9
36205: PPUSH
36206: CALL_OW 488
36210: NOT
36211: IFFALSE 36215
// exit ;
36213: GO 36322
// ComAnimCustom ( unit , 1 ) ;
36215: LD_VAR 0 1
36219: PPUSH
36220: LD_INT 1
36222: PPUSH
36223: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36227: LD_VAR 0 8
36231: PPUSH
36232: LD_VAR 0 9
36236: PPUSH
36237: LD_VAR 0 6
36241: PPUSH
36242: LD_VAR 0 7
36246: PPUSH
36247: CALL_OW 330
// repeat wait ( 1 ) ;
36251: LD_INT 1
36253: PPUSH
36254: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36258: LD_VAR 0 1
36262: PPUSH
36263: CALL_OW 316
36267: PUSH
36268: LD_VAR 0 1
36272: PPUSH
36273: CALL_OW 314
36277: OR
36278: PUSH
36279: LD_VAR 0 1
36283: PPUSH
36284: CALL_OW 302
36288: NOT
36289: OR
36290: PUSH
36291: LD_VAR 0 1
36295: PPUSH
36296: CALL_OW 301
36300: OR
36301: IFFALSE 36251
// RemoveSeeing ( _x , _y , side ) ;
36303: LD_VAR 0 8
36307: PPUSH
36308: LD_VAR 0 9
36312: PPUSH
36313: LD_VAR 0 6
36317: PPUSH
36318: CALL_OW 331
// end ; end_of_file
36322: LD_VAR 0 4
36326: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36327: LD_INT 0
36329: PPUSH
36330: PPUSH
// if exist_mode then
36331: LD_VAR 0 2
36335: IFFALSE 36360
// unit := CreateCharacter ( prefix & ident ) else
36337: LD_ADDR_VAR 0 5
36341: PUSH
36342: LD_VAR 0 3
36346: PUSH
36347: LD_VAR 0 1
36351: STR
36352: PPUSH
36353: CALL_OW 34
36357: ST_TO_ADDR
36358: GO 36375
// unit := NewCharacter ( ident ) ;
36360: LD_ADDR_VAR 0 5
36364: PUSH
36365: LD_VAR 0 1
36369: PPUSH
36370: CALL_OW 25
36374: ST_TO_ADDR
// result := unit ;
36375: LD_ADDR_VAR 0 4
36379: PUSH
36380: LD_VAR 0 5
36384: ST_TO_ADDR
// end ;
36385: LD_VAR 0 4
36389: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36390: LD_INT 0
36392: PPUSH
36393: PPUSH
// if not side or not nation then
36394: LD_VAR 0 1
36398: NOT
36399: PUSH
36400: LD_VAR 0 2
36404: NOT
36405: OR
36406: IFFALSE 36410
// exit ;
36408: GO 37174
// case nation of nation_american :
36410: LD_VAR 0 2
36414: PUSH
36415: LD_INT 1
36417: DOUBLE
36418: EQUAL
36419: IFTRUE 36423
36421: GO 36637
36423: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36424: LD_ADDR_VAR 0 4
36428: PUSH
36429: LD_INT 35
36431: PUSH
36432: LD_INT 45
36434: PUSH
36435: LD_INT 46
36437: PUSH
36438: LD_INT 47
36440: PUSH
36441: LD_INT 82
36443: PUSH
36444: LD_INT 83
36446: PUSH
36447: LD_INT 84
36449: PUSH
36450: LD_INT 85
36452: PUSH
36453: LD_INT 86
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: LD_INT 2
36461: PUSH
36462: LD_INT 6
36464: PUSH
36465: LD_INT 15
36467: PUSH
36468: LD_INT 16
36470: PUSH
36471: LD_INT 7
36473: PUSH
36474: LD_INT 12
36476: PUSH
36477: LD_INT 13
36479: PUSH
36480: LD_INT 10
36482: PUSH
36483: LD_INT 14
36485: PUSH
36486: LD_INT 20
36488: PUSH
36489: LD_INT 21
36491: PUSH
36492: LD_INT 22
36494: PUSH
36495: LD_INT 25
36497: PUSH
36498: LD_INT 32
36500: PUSH
36501: LD_INT 27
36503: PUSH
36504: LD_INT 36
36506: PUSH
36507: LD_INT 69
36509: PUSH
36510: LD_INT 39
36512: PUSH
36513: LD_INT 34
36515: PUSH
36516: LD_INT 40
36518: PUSH
36519: LD_INT 48
36521: PUSH
36522: LD_INT 49
36524: PUSH
36525: LD_INT 50
36527: PUSH
36528: LD_INT 51
36530: PUSH
36531: LD_INT 52
36533: PUSH
36534: LD_INT 53
36536: PUSH
36537: LD_INT 54
36539: PUSH
36540: LD_INT 55
36542: PUSH
36543: LD_INT 56
36545: PUSH
36546: LD_INT 57
36548: PUSH
36549: LD_INT 58
36551: PUSH
36552: LD_INT 59
36554: PUSH
36555: LD_INT 60
36557: PUSH
36558: LD_INT 61
36560: PUSH
36561: LD_INT 62
36563: PUSH
36564: LD_INT 80
36566: PUSH
36567: LD_INT 82
36569: PUSH
36570: LD_INT 83
36572: PUSH
36573: LD_INT 84
36575: PUSH
36576: LD_INT 85
36578: PUSH
36579: LD_INT 86
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: ST_TO_ADDR
36635: GO 37098
36637: LD_INT 2
36639: DOUBLE
36640: EQUAL
36641: IFTRUE 36645
36643: GO 36867
36645: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36646: LD_ADDR_VAR 0 4
36650: PUSH
36651: LD_INT 35
36653: PUSH
36654: LD_INT 45
36656: PUSH
36657: LD_INT 46
36659: PUSH
36660: LD_INT 47
36662: PUSH
36663: LD_INT 82
36665: PUSH
36666: LD_INT 83
36668: PUSH
36669: LD_INT 84
36671: PUSH
36672: LD_INT 85
36674: PUSH
36675: LD_INT 87
36677: PUSH
36678: LD_INT 70
36680: PUSH
36681: LD_INT 1
36683: PUSH
36684: LD_INT 11
36686: PUSH
36687: LD_INT 3
36689: PUSH
36690: LD_INT 4
36692: PUSH
36693: LD_INT 5
36695: PUSH
36696: LD_INT 6
36698: PUSH
36699: LD_INT 15
36701: PUSH
36702: LD_INT 18
36704: PUSH
36705: LD_INT 7
36707: PUSH
36708: LD_INT 17
36710: PUSH
36711: LD_INT 8
36713: PUSH
36714: LD_INT 20
36716: PUSH
36717: LD_INT 21
36719: PUSH
36720: LD_INT 22
36722: PUSH
36723: LD_INT 72
36725: PUSH
36726: LD_INT 26
36728: PUSH
36729: LD_INT 69
36731: PUSH
36732: LD_INT 39
36734: PUSH
36735: LD_INT 40
36737: PUSH
36738: LD_INT 41
36740: PUSH
36741: LD_INT 42
36743: PUSH
36744: LD_INT 43
36746: PUSH
36747: LD_INT 48
36749: PUSH
36750: LD_INT 49
36752: PUSH
36753: LD_INT 50
36755: PUSH
36756: LD_INT 51
36758: PUSH
36759: LD_INT 52
36761: PUSH
36762: LD_INT 53
36764: PUSH
36765: LD_INT 54
36767: PUSH
36768: LD_INT 55
36770: PUSH
36771: LD_INT 56
36773: PUSH
36774: LD_INT 60
36776: PUSH
36777: LD_INT 61
36779: PUSH
36780: LD_INT 62
36782: PUSH
36783: LD_INT 66
36785: PUSH
36786: LD_INT 67
36788: PUSH
36789: LD_INT 68
36791: PUSH
36792: LD_INT 81
36794: PUSH
36795: LD_INT 82
36797: PUSH
36798: LD_INT 83
36800: PUSH
36801: LD_INT 84
36803: PUSH
36804: LD_INT 85
36806: PUSH
36807: LD_INT 87
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: ST_TO_ADDR
36865: GO 37098
36867: LD_INT 3
36869: DOUBLE
36870: EQUAL
36871: IFTRUE 36875
36873: GO 37097
36875: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36876: LD_ADDR_VAR 0 4
36880: PUSH
36881: LD_INT 46
36883: PUSH
36884: LD_INT 47
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: LD_INT 2
36892: PUSH
36893: LD_INT 82
36895: PUSH
36896: LD_INT 83
36898: PUSH
36899: LD_INT 84
36901: PUSH
36902: LD_INT 85
36904: PUSH
36905: LD_INT 86
36907: PUSH
36908: LD_INT 11
36910: PUSH
36911: LD_INT 9
36913: PUSH
36914: LD_INT 20
36916: PUSH
36917: LD_INT 19
36919: PUSH
36920: LD_INT 21
36922: PUSH
36923: LD_INT 24
36925: PUSH
36926: LD_INT 22
36928: PUSH
36929: LD_INT 25
36931: PUSH
36932: LD_INT 28
36934: PUSH
36935: LD_INT 29
36937: PUSH
36938: LD_INT 30
36940: PUSH
36941: LD_INT 31
36943: PUSH
36944: LD_INT 37
36946: PUSH
36947: LD_INT 38
36949: PUSH
36950: LD_INT 32
36952: PUSH
36953: LD_INT 27
36955: PUSH
36956: LD_INT 33
36958: PUSH
36959: LD_INT 69
36961: PUSH
36962: LD_INT 39
36964: PUSH
36965: LD_INT 34
36967: PUSH
36968: LD_INT 40
36970: PUSH
36971: LD_INT 71
36973: PUSH
36974: LD_INT 23
36976: PUSH
36977: LD_INT 44
36979: PUSH
36980: LD_INT 48
36982: PUSH
36983: LD_INT 49
36985: PUSH
36986: LD_INT 50
36988: PUSH
36989: LD_INT 51
36991: PUSH
36992: LD_INT 52
36994: PUSH
36995: LD_INT 53
36997: PUSH
36998: LD_INT 54
37000: PUSH
37001: LD_INT 55
37003: PUSH
37004: LD_INT 56
37006: PUSH
37007: LD_INT 57
37009: PUSH
37010: LD_INT 58
37012: PUSH
37013: LD_INT 59
37015: PUSH
37016: LD_INT 63
37018: PUSH
37019: LD_INT 64
37021: PUSH
37022: LD_INT 65
37024: PUSH
37025: LD_INT 82
37027: PUSH
37028: LD_INT 83
37030: PUSH
37031: LD_INT 84
37033: PUSH
37034: LD_INT 85
37036: PUSH
37037: LD_INT 86
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: ST_TO_ADDR
37095: GO 37098
37097: POP
// if state > - 1 and state < 3 then
37098: LD_VAR 0 3
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: GREATER
37107: PUSH
37108: LD_VAR 0 3
37112: PUSH
37113: LD_INT 3
37115: LESS
37116: AND
37117: IFFALSE 37174
// for i in result do
37119: LD_ADDR_VAR 0 5
37123: PUSH
37124: LD_VAR 0 4
37128: PUSH
37129: FOR_IN
37130: IFFALSE 37172
// if GetTech ( i , side ) <> state then
37132: LD_VAR 0 5
37136: PPUSH
37137: LD_VAR 0 1
37141: PPUSH
37142: CALL_OW 321
37146: PUSH
37147: LD_VAR 0 3
37151: NONEQUAL
37152: IFFALSE 37170
// result := result diff i ;
37154: LD_ADDR_VAR 0 4
37158: PUSH
37159: LD_VAR 0 4
37163: PUSH
37164: LD_VAR 0 5
37168: DIFF
37169: ST_TO_ADDR
37170: GO 37129
37172: POP
37173: POP
// end ;
37174: LD_VAR 0 4
37178: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37179: LD_INT 0
37181: PPUSH
37182: PPUSH
37183: PPUSH
// result := true ;
37184: LD_ADDR_VAR 0 3
37188: PUSH
37189: LD_INT 1
37191: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37192: LD_ADDR_VAR 0 5
37196: PUSH
37197: LD_VAR 0 2
37201: PPUSH
37202: CALL_OW 480
37206: ST_TO_ADDR
// if not tmp then
37207: LD_VAR 0 5
37211: NOT
37212: IFFALSE 37216
// exit ;
37214: GO 37265
// for i in tmp do
37216: LD_ADDR_VAR 0 4
37220: PUSH
37221: LD_VAR 0 5
37225: PUSH
37226: FOR_IN
37227: IFFALSE 37263
// if GetTech ( i , side ) <> state_researched then
37229: LD_VAR 0 4
37233: PPUSH
37234: LD_VAR 0 1
37238: PPUSH
37239: CALL_OW 321
37243: PUSH
37244: LD_INT 2
37246: NONEQUAL
37247: IFFALSE 37261
// begin result := false ;
37249: LD_ADDR_VAR 0 3
37253: PUSH
37254: LD_INT 0
37256: ST_TO_ADDR
// exit ;
37257: POP
37258: POP
37259: GO 37265
// end ;
37261: GO 37226
37263: POP
37264: POP
// end ;
37265: LD_VAR 0 3
37269: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37270: LD_INT 0
37272: PPUSH
37273: PPUSH
37274: PPUSH
37275: PPUSH
37276: PPUSH
37277: PPUSH
37278: PPUSH
37279: PPUSH
37280: PPUSH
37281: PPUSH
37282: PPUSH
37283: PPUSH
37284: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37285: LD_VAR 0 1
37289: NOT
37290: PUSH
37291: LD_VAR 0 1
37295: PPUSH
37296: CALL_OW 257
37300: PUSH
37301: LD_INT 9
37303: NONEQUAL
37304: OR
37305: IFFALSE 37309
// exit ;
37307: GO 37882
// side := GetSide ( unit ) ;
37309: LD_ADDR_VAR 0 9
37313: PUSH
37314: LD_VAR 0 1
37318: PPUSH
37319: CALL_OW 255
37323: ST_TO_ADDR
// tech_space := tech_spacanom ;
37324: LD_ADDR_VAR 0 12
37328: PUSH
37329: LD_INT 29
37331: ST_TO_ADDR
// tech_time := tech_taurad ;
37332: LD_ADDR_VAR 0 13
37336: PUSH
37337: LD_INT 28
37339: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37340: LD_ADDR_VAR 0 11
37344: PUSH
37345: LD_VAR 0 1
37349: PPUSH
37350: CALL_OW 310
37354: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37355: LD_VAR 0 11
37359: PPUSH
37360: CALL_OW 247
37364: PUSH
37365: LD_INT 2
37367: EQUAL
37368: IFFALSE 37372
// exit ;
37370: GO 37882
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37372: LD_ADDR_VAR 0 8
37376: PUSH
37377: LD_INT 81
37379: PUSH
37380: LD_VAR 0 9
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 3
37391: PUSH
37392: LD_INT 21
37394: PUSH
37395: LD_INT 3
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PPUSH
37410: CALL_OW 69
37414: ST_TO_ADDR
// if not tmp then
37415: LD_VAR 0 8
37419: NOT
37420: IFFALSE 37424
// exit ;
37422: GO 37882
// if in_unit then
37424: LD_VAR 0 11
37428: IFFALSE 37452
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37430: LD_ADDR_VAR 0 10
37434: PUSH
37435: LD_VAR 0 8
37439: PPUSH
37440: LD_VAR 0 11
37444: PPUSH
37445: CALL_OW 74
37449: ST_TO_ADDR
37450: GO 37472
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37452: LD_ADDR_VAR 0 10
37456: PUSH
37457: LD_VAR 0 8
37461: PPUSH
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL_OW 74
37471: ST_TO_ADDR
// if not enemy then
37472: LD_VAR 0 10
37476: NOT
37477: IFFALSE 37481
// exit ;
37479: GO 37882
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37481: LD_VAR 0 11
37485: PUSH
37486: LD_VAR 0 11
37490: PPUSH
37491: LD_VAR 0 10
37495: PPUSH
37496: CALL_OW 296
37500: PUSH
37501: LD_INT 13
37503: GREATER
37504: AND
37505: PUSH
37506: LD_VAR 0 1
37510: PPUSH
37511: LD_VAR 0 10
37515: PPUSH
37516: CALL_OW 296
37520: PUSH
37521: LD_INT 12
37523: GREATER
37524: OR
37525: IFFALSE 37529
// exit ;
37527: GO 37882
// missile := [ 1 ] ;
37529: LD_ADDR_VAR 0 14
37533: PUSH
37534: LD_INT 1
37536: PUSH
37537: EMPTY
37538: LIST
37539: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37540: LD_VAR 0 9
37544: PPUSH
37545: LD_VAR 0 12
37549: PPUSH
37550: CALL_OW 325
37554: IFFALSE 37583
// missile := Insert ( missile , missile + 1 , 2 ) ;
37556: LD_ADDR_VAR 0 14
37560: PUSH
37561: LD_VAR 0 14
37565: PPUSH
37566: LD_VAR 0 14
37570: PUSH
37571: LD_INT 1
37573: PLUS
37574: PPUSH
37575: LD_INT 2
37577: PPUSH
37578: CALL_OW 2
37582: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37583: LD_VAR 0 9
37587: PPUSH
37588: LD_VAR 0 13
37592: PPUSH
37593: CALL_OW 325
37597: PUSH
37598: LD_VAR 0 10
37602: PPUSH
37603: CALL_OW 255
37607: PPUSH
37608: LD_VAR 0 13
37612: PPUSH
37613: CALL_OW 325
37617: NOT
37618: AND
37619: IFFALSE 37648
// missile := Insert ( missile , missile + 1 , 3 ) ;
37621: LD_ADDR_VAR 0 14
37625: PUSH
37626: LD_VAR 0 14
37630: PPUSH
37631: LD_VAR 0 14
37635: PUSH
37636: LD_INT 1
37638: PLUS
37639: PPUSH
37640: LD_INT 3
37642: PPUSH
37643: CALL_OW 2
37647: ST_TO_ADDR
// if missile < 2 then
37648: LD_VAR 0 14
37652: PUSH
37653: LD_INT 2
37655: LESS
37656: IFFALSE 37660
// exit ;
37658: GO 37882
// x := GetX ( enemy ) ;
37660: LD_ADDR_VAR 0 4
37664: PUSH
37665: LD_VAR 0 10
37669: PPUSH
37670: CALL_OW 250
37674: ST_TO_ADDR
// y := GetY ( enemy ) ;
37675: LD_ADDR_VAR 0 5
37679: PUSH
37680: LD_VAR 0 10
37684: PPUSH
37685: CALL_OW 251
37689: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37690: LD_ADDR_VAR 0 6
37694: PUSH
37695: LD_VAR 0 4
37699: PUSH
37700: LD_INT 1
37702: NEG
37703: PPUSH
37704: LD_INT 1
37706: PPUSH
37707: CALL_OW 12
37711: PLUS
37712: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37713: LD_ADDR_VAR 0 7
37717: PUSH
37718: LD_VAR 0 5
37722: PUSH
37723: LD_INT 1
37725: NEG
37726: PPUSH
37727: LD_INT 1
37729: PPUSH
37730: CALL_OW 12
37734: PLUS
37735: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37736: LD_VAR 0 6
37740: PPUSH
37741: LD_VAR 0 7
37745: PPUSH
37746: CALL_OW 488
37750: NOT
37751: IFFALSE 37773
// begin _x := x ;
37753: LD_ADDR_VAR 0 6
37757: PUSH
37758: LD_VAR 0 4
37762: ST_TO_ADDR
// _y := y ;
37763: LD_ADDR_VAR 0 7
37767: PUSH
37768: LD_VAR 0 5
37772: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37773: LD_ADDR_VAR 0 3
37777: PUSH
37778: LD_INT 1
37780: PPUSH
37781: LD_VAR 0 14
37785: PPUSH
37786: CALL_OW 12
37790: ST_TO_ADDR
// case i of 1 :
37791: LD_VAR 0 3
37795: PUSH
37796: LD_INT 1
37798: DOUBLE
37799: EQUAL
37800: IFTRUE 37804
37802: GO 37821
37804: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37805: LD_VAR 0 1
37809: PPUSH
37810: LD_VAR 0 10
37814: PPUSH
37815: CALL_OW 115
37819: GO 37882
37821: LD_INT 2
37823: DOUBLE
37824: EQUAL
37825: IFTRUE 37829
37827: GO 37851
37829: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37830: LD_VAR 0 1
37834: PPUSH
37835: LD_VAR 0 6
37839: PPUSH
37840: LD_VAR 0 7
37844: PPUSH
37845: CALL_OW 153
37849: GO 37882
37851: LD_INT 3
37853: DOUBLE
37854: EQUAL
37855: IFTRUE 37859
37857: GO 37881
37859: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37860: LD_VAR 0 1
37864: PPUSH
37865: LD_VAR 0 6
37869: PPUSH
37870: LD_VAR 0 7
37874: PPUSH
37875: CALL_OW 154
37879: GO 37882
37881: POP
// end ;
37882: LD_VAR 0 2
37886: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37887: LD_INT 0
37889: PPUSH
37890: PPUSH
37891: PPUSH
37892: PPUSH
37893: PPUSH
37894: PPUSH
// if not unit or not building then
37895: LD_VAR 0 1
37899: NOT
37900: PUSH
37901: LD_VAR 0 2
37905: NOT
37906: OR
37907: IFFALSE 37911
// exit ;
37909: GO 38069
// x := GetX ( building ) ;
37911: LD_ADDR_VAR 0 5
37915: PUSH
37916: LD_VAR 0 2
37920: PPUSH
37921: CALL_OW 250
37925: ST_TO_ADDR
// y := GetY ( building ) ;
37926: LD_ADDR_VAR 0 6
37930: PUSH
37931: LD_VAR 0 2
37935: PPUSH
37936: CALL_OW 251
37940: ST_TO_ADDR
// for i = 0 to 5 do
37941: LD_ADDR_VAR 0 4
37945: PUSH
37946: DOUBLE
37947: LD_INT 0
37949: DEC
37950: ST_TO_ADDR
37951: LD_INT 5
37953: PUSH
37954: FOR_TO
37955: IFFALSE 38067
// begin _x := ShiftX ( x , i , 3 ) ;
37957: LD_ADDR_VAR 0 7
37961: PUSH
37962: LD_VAR 0 5
37966: PPUSH
37967: LD_VAR 0 4
37971: PPUSH
37972: LD_INT 3
37974: PPUSH
37975: CALL_OW 272
37979: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37980: LD_ADDR_VAR 0 8
37984: PUSH
37985: LD_VAR 0 6
37989: PPUSH
37990: LD_VAR 0 4
37994: PPUSH
37995: LD_INT 3
37997: PPUSH
37998: CALL_OW 273
38002: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38003: LD_VAR 0 7
38007: PPUSH
38008: LD_VAR 0 8
38012: PPUSH
38013: CALL_OW 488
38017: NOT
38018: IFFALSE 38022
// continue ;
38020: GO 37954
// if HexInfo ( _x , _y ) = 0 then
38022: LD_VAR 0 7
38026: PPUSH
38027: LD_VAR 0 8
38031: PPUSH
38032: CALL_OW 428
38036: PUSH
38037: LD_INT 0
38039: EQUAL
38040: IFFALSE 38065
// begin ComMoveXY ( unit , _x , _y ) ;
38042: LD_VAR 0 1
38046: PPUSH
38047: LD_VAR 0 7
38051: PPUSH
38052: LD_VAR 0 8
38056: PPUSH
38057: CALL_OW 111
// exit ;
38061: POP
38062: POP
38063: GO 38069
// end ; end ;
38065: GO 37954
38067: POP
38068: POP
// end ;
38069: LD_VAR 0 3
38073: RET
// export function ScanBase ( side , base_area ) ; begin
38074: LD_INT 0
38076: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38077: LD_ADDR_VAR 0 3
38081: PUSH
38082: LD_VAR 0 2
38086: PPUSH
38087: LD_INT 81
38089: PUSH
38090: LD_VAR 0 1
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PPUSH
38099: CALL_OW 70
38103: ST_TO_ADDR
// end ;
38104: LD_VAR 0 3
38108: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38109: LD_INT 0
38111: PPUSH
38112: PPUSH
38113: PPUSH
38114: PPUSH
// result := false ;
38115: LD_ADDR_VAR 0 2
38119: PUSH
38120: LD_INT 0
38122: ST_TO_ADDR
// side := GetSide ( unit ) ;
38123: LD_ADDR_VAR 0 3
38127: PUSH
38128: LD_VAR 0 1
38132: PPUSH
38133: CALL_OW 255
38137: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38138: LD_ADDR_VAR 0 4
38142: PUSH
38143: LD_VAR 0 1
38147: PPUSH
38148: CALL_OW 248
38152: ST_TO_ADDR
// case nat of 1 :
38153: LD_VAR 0 4
38157: PUSH
38158: LD_INT 1
38160: DOUBLE
38161: EQUAL
38162: IFTRUE 38166
38164: GO 38177
38166: POP
// tech := tech_lassight ; 2 :
38167: LD_ADDR_VAR 0 5
38171: PUSH
38172: LD_INT 12
38174: ST_TO_ADDR
38175: GO 38216
38177: LD_INT 2
38179: DOUBLE
38180: EQUAL
38181: IFTRUE 38185
38183: GO 38196
38185: POP
// tech := tech_mortar ; 3 :
38186: LD_ADDR_VAR 0 5
38190: PUSH
38191: LD_INT 41
38193: ST_TO_ADDR
38194: GO 38216
38196: LD_INT 3
38198: DOUBLE
38199: EQUAL
38200: IFTRUE 38204
38202: GO 38215
38204: POP
// tech := tech_bazooka ; end ;
38205: LD_ADDR_VAR 0 5
38209: PUSH
38210: LD_INT 44
38212: ST_TO_ADDR
38213: GO 38216
38215: POP
// if Researched ( side , tech ) then
38216: LD_VAR 0 3
38220: PPUSH
38221: LD_VAR 0 5
38225: PPUSH
38226: CALL_OW 325
38230: IFFALSE 38257
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38232: LD_ADDR_VAR 0 2
38236: PUSH
38237: LD_INT 5
38239: PUSH
38240: LD_INT 8
38242: PUSH
38243: LD_INT 9
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: PUSH
38251: LD_VAR 0 4
38255: ARRAY
38256: ST_TO_ADDR
// end ;
38257: LD_VAR 0 2
38261: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38262: LD_INT 0
38264: PPUSH
38265: PPUSH
38266: PPUSH
// if not mines then
38267: LD_VAR 0 2
38271: NOT
38272: IFFALSE 38276
// exit ;
38274: GO 38420
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38276: LD_ADDR_VAR 0 5
38280: PUSH
38281: LD_INT 81
38283: PUSH
38284: LD_VAR 0 1
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 3
38295: PUSH
38296: LD_INT 21
38298: PUSH
38299: LD_INT 3
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PPUSH
38314: CALL_OW 69
38318: ST_TO_ADDR
// for i in mines do
38319: LD_ADDR_VAR 0 4
38323: PUSH
38324: LD_VAR 0 2
38328: PUSH
38329: FOR_IN
38330: IFFALSE 38418
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38332: LD_VAR 0 4
38336: PUSH
38337: LD_INT 1
38339: ARRAY
38340: PPUSH
38341: LD_VAR 0 4
38345: PUSH
38346: LD_INT 2
38348: ARRAY
38349: PPUSH
38350: CALL_OW 458
38354: NOT
38355: IFFALSE 38359
// continue ;
38357: GO 38329
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38359: LD_VAR 0 4
38363: PUSH
38364: LD_INT 1
38366: ARRAY
38367: PPUSH
38368: LD_VAR 0 4
38372: PUSH
38373: LD_INT 2
38375: ARRAY
38376: PPUSH
38377: CALL_OW 428
38381: PUSH
38382: LD_VAR 0 5
38386: IN
38387: IFFALSE 38416
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38389: LD_VAR 0 4
38393: PUSH
38394: LD_INT 1
38396: ARRAY
38397: PPUSH
38398: LD_VAR 0 4
38402: PUSH
38403: LD_INT 2
38405: ARRAY
38406: PPUSH
38407: LD_VAR 0 1
38411: PPUSH
38412: CALL_OW 456
// end ;
38416: GO 38329
38418: POP
38419: POP
// end ;
38420: LD_VAR 0 3
38424: RET
// export function Count ( array ) ; var i ; begin
38425: LD_INT 0
38427: PPUSH
38428: PPUSH
// result := 0 ;
38429: LD_ADDR_VAR 0 2
38433: PUSH
38434: LD_INT 0
38436: ST_TO_ADDR
// for i in array do
38437: LD_ADDR_VAR 0 3
38441: PUSH
38442: LD_VAR 0 1
38446: PUSH
38447: FOR_IN
38448: IFFALSE 38472
// if i then
38450: LD_VAR 0 3
38454: IFFALSE 38470
// result := result + 1 ;
38456: LD_ADDR_VAR 0 2
38460: PUSH
38461: LD_VAR 0 2
38465: PUSH
38466: LD_INT 1
38468: PLUS
38469: ST_TO_ADDR
38470: GO 38447
38472: POP
38473: POP
// end ;
38474: LD_VAR 0 2
38478: RET
// export function IsEmpty ( building ) ; begin
38479: LD_INT 0
38481: PPUSH
// if not building then
38482: LD_VAR 0 1
38486: NOT
38487: IFFALSE 38491
// exit ;
38489: GO 38534
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38491: LD_ADDR_VAR 0 2
38495: PUSH
38496: LD_VAR 0 1
38500: PUSH
38501: LD_INT 22
38503: PUSH
38504: LD_VAR 0 1
38508: PPUSH
38509: CALL_OW 255
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 58
38520: PUSH
38521: EMPTY
38522: LIST
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PPUSH
38528: CALL_OW 69
38532: IN
38533: ST_TO_ADDR
// end ;
38534: LD_VAR 0 2
38538: RET
// export function IsNotFull ( building ) ; begin
38539: LD_INT 0
38541: PPUSH
// if not building then
38542: LD_VAR 0 1
38546: NOT
38547: IFFALSE 38551
// exit ;
38549: GO 38570
// result := UnitsInside ( building ) < 6 ;
38551: LD_ADDR_VAR 0 2
38555: PUSH
38556: LD_VAR 0 1
38560: PPUSH
38561: CALL_OW 313
38565: PUSH
38566: LD_INT 6
38568: LESS
38569: ST_TO_ADDR
// end ;
38570: LD_VAR 0 2
38574: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38575: LD_INT 0
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
// tmp := [ ] ;
38581: LD_ADDR_VAR 0 3
38585: PUSH
38586: EMPTY
38587: ST_TO_ADDR
// list := [ ] ;
38588: LD_ADDR_VAR 0 5
38592: PUSH
38593: EMPTY
38594: ST_TO_ADDR
// for i = 16 to 25 do
38595: LD_ADDR_VAR 0 4
38599: PUSH
38600: DOUBLE
38601: LD_INT 16
38603: DEC
38604: ST_TO_ADDR
38605: LD_INT 25
38607: PUSH
38608: FOR_TO
38609: IFFALSE 38682
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38611: LD_ADDR_VAR 0 3
38615: PUSH
38616: LD_VAR 0 3
38620: PUSH
38621: LD_INT 22
38623: PUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: CALL_OW 255
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 91
38640: PUSH
38641: LD_VAR 0 1
38645: PUSH
38646: LD_INT 6
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 30
38656: PUSH
38657: LD_VAR 0 4
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: LIST
38670: PUSH
38671: EMPTY
38672: LIST
38673: PPUSH
38674: CALL_OW 69
38678: ADD
38679: ST_TO_ADDR
38680: GO 38608
38682: POP
38683: POP
// for i = 1 to tmp do
38684: LD_ADDR_VAR 0 4
38688: PUSH
38689: DOUBLE
38690: LD_INT 1
38692: DEC
38693: ST_TO_ADDR
38694: LD_VAR 0 3
38698: PUSH
38699: FOR_TO
38700: IFFALSE 38788
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38702: LD_ADDR_VAR 0 5
38706: PUSH
38707: LD_VAR 0 5
38711: PUSH
38712: LD_VAR 0 3
38716: PUSH
38717: LD_VAR 0 4
38721: ARRAY
38722: PPUSH
38723: CALL_OW 266
38727: PUSH
38728: LD_VAR 0 3
38732: PUSH
38733: LD_VAR 0 4
38737: ARRAY
38738: PPUSH
38739: CALL_OW 250
38743: PUSH
38744: LD_VAR 0 3
38748: PUSH
38749: LD_VAR 0 4
38753: ARRAY
38754: PPUSH
38755: CALL_OW 251
38759: PUSH
38760: LD_VAR 0 3
38764: PUSH
38765: LD_VAR 0 4
38769: ARRAY
38770: PPUSH
38771: CALL_OW 254
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: ADD
38785: ST_TO_ADDR
38786: GO 38699
38788: POP
38789: POP
// result := list ;
38790: LD_ADDR_VAR 0 2
38794: PUSH
38795: LD_VAR 0 5
38799: ST_TO_ADDR
// end ;
38800: LD_VAR 0 2
38804: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38805: LD_INT 0
38807: PPUSH
38808: PPUSH
38809: PPUSH
38810: PPUSH
38811: PPUSH
38812: PPUSH
38813: PPUSH
// if not factory then
38814: LD_VAR 0 1
38818: NOT
38819: IFFALSE 38823
// exit ;
38821: GO 39416
// if control = control_apeman then
38823: LD_VAR 0 4
38827: PUSH
38828: LD_INT 5
38830: EQUAL
38831: IFFALSE 38940
// begin tmp := UnitsInside ( factory ) ;
38833: LD_ADDR_VAR 0 8
38837: PUSH
38838: LD_VAR 0 1
38842: PPUSH
38843: CALL_OW 313
38847: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38848: LD_VAR 0 8
38852: PPUSH
38853: LD_INT 25
38855: PUSH
38856: LD_INT 12
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PPUSH
38863: CALL_OW 72
38867: NOT
38868: IFFALSE 38878
// control := control_manual ;
38870: LD_ADDR_VAR 0 4
38874: PUSH
38875: LD_INT 1
38877: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38878: LD_ADDR_VAR 0 8
38882: PUSH
38883: LD_VAR 0 1
38887: PPUSH
38888: CALL 38575 0 1
38892: ST_TO_ADDR
// if tmp then
38893: LD_VAR 0 8
38897: IFFALSE 38940
// begin for i in tmp do
38899: LD_ADDR_VAR 0 7
38903: PUSH
38904: LD_VAR 0 8
38908: PUSH
38909: FOR_IN
38910: IFFALSE 38938
// if i [ 1 ] = b_ext_radio then
38912: LD_VAR 0 7
38916: PUSH
38917: LD_INT 1
38919: ARRAY
38920: PUSH
38921: LD_INT 22
38923: EQUAL
38924: IFFALSE 38936
// begin control := control_remote ;
38926: LD_ADDR_VAR 0 4
38930: PUSH
38931: LD_INT 2
38933: ST_TO_ADDR
// break ;
38934: GO 38938
// end ;
38936: GO 38909
38938: POP
38939: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38940: LD_VAR 0 1
38944: PPUSH
38945: LD_VAR 0 2
38949: PPUSH
38950: LD_VAR 0 3
38954: PPUSH
38955: LD_VAR 0 4
38959: PPUSH
38960: LD_VAR 0 5
38964: PPUSH
38965: CALL_OW 448
38969: IFFALSE 39004
// begin result := [ chassis , engine , control , weapon ] ;
38971: LD_ADDR_VAR 0 6
38975: PUSH
38976: LD_VAR 0 2
38980: PUSH
38981: LD_VAR 0 3
38985: PUSH
38986: LD_VAR 0 4
38990: PUSH
38991: LD_VAR 0 5
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: ST_TO_ADDR
// exit ;
39002: GO 39416
// end ; _chassis := AvailableChassisList ( factory ) ;
39004: LD_ADDR_VAR 0 9
39008: PUSH
39009: LD_VAR 0 1
39013: PPUSH
39014: CALL_OW 475
39018: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39019: LD_ADDR_VAR 0 11
39023: PUSH
39024: LD_VAR 0 1
39028: PPUSH
39029: CALL_OW 476
39033: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39034: LD_ADDR_VAR 0 12
39038: PUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: CALL_OW 477
39048: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39049: LD_ADDR_VAR 0 10
39053: PUSH
39054: LD_VAR 0 1
39058: PPUSH
39059: CALL_OW 478
39063: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39064: LD_VAR 0 9
39068: NOT
39069: PUSH
39070: LD_VAR 0 11
39074: NOT
39075: OR
39076: PUSH
39077: LD_VAR 0 12
39081: NOT
39082: OR
39083: PUSH
39084: LD_VAR 0 10
39088: NOT
39089: OR
39090: IFFALSE 39125
// begin result := [ chassis , engine , control , weapon ] ;
39092: LD_ADDR_VAR 0 6
39096: PUSH
39097: LD_VAR 0 2
39101: PUSH
39102: LD_VAR 0 3
39106: PUSH
39107: LD_VAR 0 4
39111: PUSH
39112: LD_VAR 0 5
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: ST_TO_ADDR
// exit ;
39123: GO 39416
// end ; if not chassis in _chassis then
39125: LD_VAR 0 2
39129: PUSH
39130: LD_VAR 0 9
39134: IN
39135: NOT
39136: IFFALSE 39162
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39138: LD_ADDR_VAR 0 2
39142: PUSH
39143: LD_VAR 0 9
39147: PUSH
39148: LD_INT 1
39150: PPUSH
39151: LD_VAR 0 9
39155: PPUSH
39156: CALL_OW 12
39160: ARRAY
39161: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39162: LD_VAR 0 2
39166: PPUSH
39167: LD_VAR 0 3
39171: PPUSH
39172: CALL 39421 0 2
39176: NOT
39177: IFFALSE 39236
// repeat engine := _engine [ 1 ] ;
39179: LD_ADDR_VAR 0 3
39183: PUSH
39184: LD_VAR 0 11
39188: PUSH
39189: LD_INT 1
39191: ARRAY
39192: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39193: LD_ADDR_VAR 0 11
39197: PUSH
39198: LD_VAR 0 11
39202: PPUSH
39203: LD_INT 1
39205: PPUSH
39206: CALL_OW 3
39210: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39211: LD_VAR 0 2
39215: PPUSH
39216: LD_VAR 0 3
39220: PPUSH
39221: CALL 39421 0 2
39225: PUSH
39226: LD_VAR 0 11
39230: PUSH
39231: EMPTY
39232: EQUAL
39233: OR
39234: IFFALSE 39179
// if not control in _control then
39236: LD_VAR 0 4
39240: PUSH
39241: LD_VAR 0 12
39245: IN
39246: NOT
39247: IFFALSE 39273
// control := _control [ rand ( 1 , _control ) ] ;
39249: LD_ADDR_VAR 0 4
39253: PUSH
39254: LD_VAR 0 12
39258: PUSH
39259: LD_INT 1
39261: PPUSH
39262: LD_VAR 0 12
39266: PPUSH
39267: CALL_OW 12
39271: ARRAY
39272: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39273: LD_VAR 0 2
39277: PPUSH
39278: LD_VAR 0 5
39282: PPUSH
39283: CALL 39641 0 2
39287: NOT
39288: IFFALSE 39347
// repeat weapon := _weapon [ 1 ] ;
39290: LD_ADDR_VAR 0 5
39294: PUSH
39295: LD_VAR 0 10
39299: PUSH
39300: LD_INT 1
39302: ARRAY
39303: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39304: LD_ADDR_VAR 0 10
39308: PUSH
39309: LD_VAR 0 10
39313: PPUSH
39314: LD_INT 1
39316: PPUSH
39317: CALL_OW 3
39321: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39322: LD_VAR 0 2
39326: PPUSH
39327: LD_VAR 0 5
39331: PPUSH
39332: CALL 39641 0 2
39336: PUSH
39337: LD_VAR 0 10
39341: PUSH
39342: EMPTY
39343: EQUAL
39344: OR
39345: IFFALSE 39290
// result := [ ] ;
39347: LD_ADDR_VAR 0 6
39351: PUSH
39352: EMPTY
39353: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39354: LD_VAR 0 1
39358: PPUSH
39359: LD_VAR 0 2
39363: PPUSH
39364: LD_VAR 0 3
39368: PPUSH
39369: LD_VAR 0 4
39373: PPUSH
39374: LD_VAR 0 5
39378: PPUSH
39379: CALL_OW 448
39383: IFFALSE 39416
// result := [ chassis , engine , control , weapon ] ;
39385: LD_ADDR_VAR 0 6
39389: PUSH
39390: LD_VAR 0 2
39394: PUSH
39395: LD_VAR 0 3
39399: PUSH
39400: LD_VAR 0 4
39404: PUSH
39405: LD_VAR 0 5
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: ST_TO_ADDR
// end ;
39416: LD_VAR 0 6
39420: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39421: LD_INT 0
39423: PPUSH
// if not chassis or not engine then
39424: LD_VAR 0 1
39428: NOT
39429: PUSH
39430: LD_VAR 0 2
39434: NOT
39435: OR
39436: IFFALSE 39440
// exit ;
39438: GO 39636
// case engine of engine_solar :
39440: LD_VAR 0 2
39444: PUSH
39445: LD_INT 2
39447: DOUBLE
39448: EQUAL
39449: IFTRUE 39453
39451: GO 39491
39453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39454: LD_ADDR_VAR 0 3
39458: PUSH
39459: LD_INT 11
39461: PUSH
39462: LD_INT 12
39464: PUSH
39465: LD_INT 13
39467: PUSH
39468: LD_INT 14
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: LD_INT 3
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: ST_TO_ADDR
39489: GO 39620
39491: LD_INT 1
39493: DOUBLE
39494: EQUAL
39495: IFTRUE 39499
39497: GO 39561
39499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39500: LD_ADDR_VAR 0 3
39504: PUSH
39505: LD_INT 11
39507: PUSH
39508: LD_INT 12
39510: PUSH
39511: LD_INT 13
39513: PUSH
39514: LD_INT 14
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 3
39525: PUSH
39526: LD_INT 4
39528: PUSH
39529: LD_INT 5
39531: PUSH
39532: LD_INT 21
39534: PUSH
39535: LD_INT 23
39537: PUSH
39538: LD_INT 22
39540: PUSH
39541: LD_INT 24
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: ST_TO_ADDR
39559: GO 39620
39561: LD_INT 3
39563: DOUBLE
39564: EQUAL
39565: IFTRUE 39569
39567: GO 39619
39569: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39570: LD_ADDR_VAR 0 3
39574: PUSH
39575: LD_INT 13
39577: PUSH
39578: LD_INT 14
39580: PUSH
39581: LD_INT 2
39583: PUSH
39584: LD_INT 3
39586: PUSH
39587: LD_INT 4
39589: PUSH
39590: LD_INT 5
39592: PUSH
39593: LD_INT 21
39595: PUSH
39596: LD_INT 22
39598: PUSH
39599: LD_INT 23
39601: PUSH
39602: LD_INT 24
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: ST_TO_ADDR
39617: GO 39620
39619: POP
// result := ( chassis in result ) ;
39620: LD_ADDR_VAR 0 3
39624: PUSH
39625: LD_VAR 0 1
39629: PUSH
39630: LD_VAR 0 3
39634: IN
39635: ST_TO_ADDR
// end ;
39636: LD_VAR 0 3
39640: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39641: LD_INT 0
39643: PPUSH
// if not chassis or not weapon then
39644: LD_VAR 0 1
39648: NOT
39649: PUSH
39650: LD_VAR 0 2
39654: NOT
39655: OR
39656: IFFALSE 39660
// exit ;
39658: GO 40686
// case weapon of us_machine_gun :
39660: LD_VAR 0 2
39664: PUSH
39665: LD_INT 2
39667: DOUBLE
39668: EQUAL
39669: IFTRUE 39673
39671: GO 39703
39673: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39674: LD_ADDR_VAR 0 3
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: LD_INT 3
39687: PUSH
39688: LD_INT 4
39690: PUSH
39691: LD_INT 5
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: ST_TO_ADDR
39701: GO 40670
39703: LD_INT 3
39705: DOUBLE
39706: EQUAL
39707: IFTRUE 39711
39709: GO 39741
39711: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39712: LD_ADDR_VAR 0 3
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: LD_INT 4
39728: PUSH
39729: LD_INT 5
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: ST_TO_ADDR
39739: GO 40670
39741: LD_INT 11
39743: DOUBLE
39744: EQUAL
39745: IFTRUE 39749
39747: GO 39779
39749: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39750: LD_ADDR_VAR 0 3
39754: PUSH
39755: LD_INT 1
39757: PUSH
39758: LD_INT 2
39760: PUSH
39761: LD_INT 3
39763: PUSH
39764: LD_INT 4
39766: PUSH
39767: LD_INT 5
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: ST_TO_ADDR
39777: GO 40670
39779: LD_INT 4
39781: DOUBLE
39782: EQUAL
39783: IFTRUE 39787
39785: GO 39813
39787: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39788: LD_ADDR_VAR 0 3
39792: PUSH
39793: LD_INT 2
39795: PUSH
39796: LD_INT 3
39798: PUSH
39799: LD_INT 4
39801: PUSH
39802: LD_INT 5
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: ST_TO_ADDR
39811: GO 40670
39813: LD_INT 5
39815: DOUBLE
39816: EQUAL
39817: IFTRUE 39821
39819: GO 39847
39821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39822: LD_ADDR_VAR 0 3
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: LD_INT 3
39832: PUSH
39833: LD_INT 4
39835: PUSH
39836: LD_INT 5
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: ST_TO_ADDR
39845: GO 40670
39847: LD_INT 9
39849: DOUBLE
39850: EQUAL
39851: IFTRUE 39855
39853: GO 39881
39855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39856: LD_ADDR_VAR 0 3
39860: PUSH
39861: LD_INT 2
39863: PUSH
39864: LD_INT 3
39866: PUSH
39867: LD_INT 4
39869: PUSH
39870: LD_INT 5
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: ST_TO_ADDR
39879: GO 40670
39881: LD_INT 7
39883: DOUBLE
39884: EQUAL
39885: IFTRUE 39889
39887: GO 39915
39889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39890: LD_ADDR_VAR 0 3
39894: PUSH
39895: LD_INT 2
39897: PUSH
39898: LD_INT 3
39900: PUSH
39901: LD_INT 4
39903: PUSH
39904: LD_INT 5
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: ST_TO_ADDR
39913: GO 40670
39915: LD_INT 12
39917: DOUBLE
39918: EQUAL
39919: IFTRUE 39923
39921: GO 39949
39923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39924: LD_ADDR_VAR 0 3
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: LD_INT 3
39934: PUSH
39935: LD_INT 4
39937: PUSH
39938: LD_INT 5
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: ST_TO_ADDR
39947: GO 40670
39949: LD_INT 13
39951: DOUBLE
39952: EQUAL
39953: IFTRUE 39957
39955: GO 39983
39957: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39958: LD_ADDR_VAR 0 3
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: LD_INT 3
39968: PUSH
39969: LD_INT 4
39971: PUSH
39972: LD_INT 5
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: ST_TO_ADDR
39981: GO 40670
39983: LD_INT 14
39985: DOUBLE
39986: EQUAL
39987: IFTRUE 39991
39989: GO 40009
39991: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39992: LD_ADDR_VAR 0 3
39996: PUSH
39997: LD_INT 4
39999: PUSH
40000: LD_INT 5
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: ST_TO_ADDR
40007: GO 40670
40009: LD_INT 6
40011: DOUBLE
40012: EQUAL
40013: IFTRUE 40017
40015: GO 40035
40017: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40018: LD_ADDR_VAR 0 3
40022: PUSH
40023: LD_INT 4
40025: PUSH
40026: LD_INT 5
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: ST_TO_ADDR
40033: GO 40670
40035: LD_INT 10
40037: DOUBLE
40038: EQUAL
40039: IFTRUE 40043
40041: GO 40061
40043: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40044: LD_ADDR_VAR 0 3
40048: PUSH
40049: LD_INT 4
40051: PUSH
40052: LD_INT 5
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: ST_TO_ADDR
40059: GO 40670
40061: LD_INT 22
40063: DOUBLE
40064: EQUAL
40065: IFTRUE 40069
40067: GO 40095
40069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40070: LD_ADDR_VAR 0 3
40074: PUSH
40075: LD_INT 11
40077: PUSH
40078: LD_INT 12
40080: PUSH
40081: LD_INT 13
40083: PUSH
40084: LD_INT 14
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: ST_TO_ADDR
40093: GO 40670
40095: LD_INT 23
40097: DOUBLE
40098: EQUAL
40099: IFTRUE 40103
40101: GO 40129
40103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40104: LD_ADDR_VAR 0 3
40108: PUSH
40109: LD_INT 11
40111: PUSH
40112: LD_INT 12
40114: PUSH
40115: LD_INT 13
40117: PUSH
40118: LD_INT 14
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: ST_TO_ADDR
40127: GO 40670
40129: LD_INT 24
40131: DOUBLE
40132: EQUAL
40133: IFTRUE 40137
40135: GO 40163
40137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40138: LD_ADDR_VAR 0 3
40142: PUSH
40143: LD_INT 11
40145: PUSH
40146: LD_INT 12
40148: PUSH
40149: LD_INT 13
40151: PUSH
40152: LD_INT 14
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: ST_TO_ADDR
40161: GO 40670
40163: LD_INT 30
40165: DOUBLE
40166: EQUAL
40167: IFTRUE 40171
40169: GO 40197
40171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40172: LD_ADDR_VAR 0 3
40176: PUSH
40177: LD_INT 11
40179: PUSH
40180: LD_INT 12
40182: PUSH
40183: LD_INT 13
40185: PUSH
40186: LD_INT 14
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: ST_TO_ADDR
40195: GO 40670
40197: LD_INT 25
40199: DOUBLE
40200: EQUAL
40201: IFTRUE 40205
40203: GO 40223
40205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40206: LD_ADDR_VAR 0 3
40210: PUSH
40211: LD_INT 13
40213: PUSH
40214: LD_INT 14
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: ST_TO_ADDR
40221: GO 40670
40223: LD_INT 27
40225: DOUBLE
40226: EQUAL
40227: IFTRUE 40231
40229: GO 40249
40231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40232: LD_ADDR_VAR 0 3
40236: PUSH
40237: LD_INT 13
40239: PUSH
40240: LD_INT 14
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: ST_TO_ADDR
40247: GO 40670
40249: LD_INT 28
40251: DOUBLE
40252: EQUAL
40253: IFTRUE 40257
40255: GO 40275
40257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40258: LD_ADDR_VAR 0 3
40262: PUSH
40263: LD_INT 13
40265: PUSH
40266: LD_INT 14
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: ST_TO_ADDR
40273: GO 40670
40275: LD_INT 29
40277: DOUBLE
40278: EQUAL
40279: IFTRUE 40283
40281: GO 40301
40283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40284: LD_ADDR_VAR 0 3
40288: PUSH
40289: LD_INT 13
40291: PUSH
40292: LD_INT 14
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: ST_TO_ADDR
40299: GO 40670
40301: LD_INT 31
40303: DOUBLE
40304: EQUAL
40305: IFTRUE 40309
40307: GO 40327
40309: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40310: LD_ADDR_VAR 0 3
40314: PUSH
40315: LD_INT 13
40317: PUSH
40318: LD_INT 14
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: ST_TO_ADDR
40325: GO 40670
40327: LD_INT 26
40329: DOUBLE
40330: EQUAL
40331: IFTRUE 40335
40333: GO 40353
40335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40336: LD_ADDR_VAR 0 3
40340: PUSH
40341: LD_INT 13
40343: PUSH
40344: LD_INT 14
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: ST_TO_ADDR
40351: GO 40670
40353: LD_INT 42
40355: DOUBLE
40356: EQUAL
40357: IFTRUE 40361
40359: GO 40387
40361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40362: LD_ADDR_VAR 0 3
40366: PUSH
40367: LD_INT 21
40369: PUSH
40370: LD_INT 22
40372: PUSH
40373: LD_INT 23
40375: PUSH
40376: LD_INT 24
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: ST_TO_ADDR
40385: GO 40670
40387: LD_INT 43
40389: DOUBLE
40390: EQUAL
40391: IFTRUE 40395
40393: GO 40421
40395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40396: LD_ADDR_VAR 0 3
40400: PUSH
40401: LD_INT 21
40403: PUSH
40404: LD_INT 22
40406: PUSH
40407: LD_INT 23
40409: PUSH
40410: LD_INT 24
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: ST_TO_ADDR
40419: GO 40670
40421: LD_INT 44
40423: DOUBLE
40424: EQUAL
40425: IFTRUE 40429
40427: GO 40455
40429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40430: LD_ADDR_VAR 0 3
40434: PUSH
40435: LD_INT 21
40437: PUSH
40438: LD_INT 22
40440: PUSH
40441: LD_INT 23
40443: PUSH
40444: LD_INT 24
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: ST_TO_ADDR
40453: GO 40670
40455: LD_INT 45
40457: DOUBLE
40458: EQUAL
40459: IFTRUE 40463
40461: GO 40489
40463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40464: LD_ADDR_VAR 0 3
40468: PUSH
40469: LD_INT 21
40471: PUSH
40472: LD_INT 22
40474: PUSH
40475: LD_INT 23
40477: PUSH
40478: LD_INT 24
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: ST_TO_ADDR
40487: GO 40670
40489: LD_INT 49
40491: DOUBLE
40492: EQUAL
40493: IFTRUE 40497
40495: GO 40523
40497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40498: LD_ADDR_VAR 0 3
40502: PUSH
40503: LD_INT 21
40505: PUSH
40506: LD_INT 22
40508: PUSH
40509: LD_INT 23
40511: PUSH
40512: LD_INT 24
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: ST_TO_ADDR
40521: GO 40670
40523: LD_INT 51
40525: DOUBLE
40526: EQUAL
40527: IFTRUE 40531
40529: GO 40557
40531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40532: LD_ADDR_VAR 0 3
40536: PUSH
40537: LD_INT 21
40539: PUSH
40540: LD_INT 22
40542: PUSH
40543: LD_INT 23
40545: PUSH
40546: LD_INT 24
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: ST_TO_ADDR
40555: GO 40670
40557: LD_INT 52
40559: DOUBLE
40560: EQUAL
40561: IFTRUE 40565
40563: GO 40591
40565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40566: LD_ADDR_VAR 0 3
40570: PUSH
40571: LD_INT 21
40573: PUSH
40574: LD_INT 22
40576: PUSH
40577: LD_INT 23
40579: PUSH
40580: LD_INT 24
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: ST_TO_ADDR
40589: GO 40670
40591: LD_INT 53
40593: DOUBLE
40594: EQUAL
40595: IFTRUE 40599
40597: GO 40617
40599: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40600: LD_ADDR_VAR 0 3
40604: PUSH
40605: LD_INT 23
40607: PUSH
40608: LD_INT 24
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: ST_TO_ADDR
40615: GO 40670
40617: LD_INT 46
40619: DOUBLE
40620: EQUAL
40621: IFTRUE 40625
40623: GO 40643
40625: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40626: LD_ADDR_VAR 0 3
40630: PUSH
40631: LD_INT 23
40633: PUSH
40634: LD_INT 24
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: ST_TO_ADDR
40641: GO 40670
40643: LD_INT 47
40645: DOUBLE
40646: EQUAL
40647: IFTRUE 40651
40649: GO 40669
40651: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40652: LD_ADDR_VAR 0 3
40656: PUSH
40657: LD_INT 23
40659: PUSH
40660: LD_INT 24
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: ST_TO_ADDR
40667: GO 40670
40669: POP
// result := ( chassis in result ) ;
40670: LD_ADDR_VAR 0 3
40674: PUSH
40675: LD_VAR 0 1
40679: PUSH
40680: LD_VAR 0 3
40684: IN
40685: ST_TO_ADDR
// end ;
40686: LD_VAR 0 3
40690: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40691: LD_INT 0
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
40699: PPUSH
// result := array ;
40700: LD_ADDR_VAR 0 5
40704: PUSH
40705: LD_VAR 0 1
40709: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40710: LD_VAR 0 1
40714: NOT
40715: PUSH
40716: LD_VAR 0 2
40720: NOT
40721: OR
40722: PUSH
40723: LD_VAR 0 3
40727: NOT
40728: OR
40729: PUSH
40730: LD_VAR 0 2
40734: PUSH
40735: LD_VAR 0 1
40739: GREATER
40740: OR
40741: PUSH
40742: LD_VAR 0 3
40746: PUSH
40747: LD_VAR 0 1
40751: GREATER
40752: OR
40753: IFFALSE 40757
// exit ;
40755: GO 41053
// if direction then
40757: LD_VAR 0 4
40761: IFFALSE 40825
// begin d := 1 ;
40763: LD_ADDR_VAR 0 9
40767: PUSH
40768: LD_INT 1
40770: ST_TO_ADDR
// if i_from > i_to then
40771: LD_VAR 0 2
40775: PUSH
40776: LD_VAR 0 3
40780: GREATER
40781: IFFALSE 40807
// length := ( array - i_from ) + i_to else
40783: LD_ADDR_VAR 0 11
40787: PUSH
40788: LD_VAR 0 1
40792: PUSH
40793: LD_VAR 0 2
40797: MINUS
40798: PUSH
40799: LD_VAR 0 3
40803: PLUS
40804: ST_TO_ADDR
40805: GO 40823
// length := i_to - i_from ;
40807: LD_ADDR_VAR 0 11
40811: PUSH
40812: LD_VAR 0 3
40816: PUSH
40817: LD_VAR 0 2
40821: MINUS
40822: ST_TO_ADDR
// end else
40823: GO 40886
// begin d := - 1 ;
40825: LD_ADDR_VAR 0 9
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: ST_TO_ADDR
// if i_from > i_to then
40834: LD_VAR 0 2
40838: PUSH
40839: LD_VAR 0 3
40843: GREATER
40844: IFFALSE 40864
// length := i_from - i_to else
40846: LD_ADDR_VAR 0 11
40850: PUSH
40851: LD_VAR 0 2
40855: PUSH
40856: LD_VAR 0 3
40860: MINUS
40861: ST_TO_ADDR
40862: GO 40886
// length := ( array - i_to ) + i_from ;
40864: LD_ADDR_VAR 0 11
40868: PUSH
40869: LD_VAR 0 1
40873: PUSH
40874: LD_VAR 0 3
40878: MINUS
40879: PUSH
40880: LD_VAR 0 2
40884: PLUS
40885: ST_TO_ADDR
// end ; if not length then
40886: LD_VAR 0 11
40890: NOT
40891: IFFALSE 40895
// exit ;
40893: GO 41053
// tmp := array ;
40895: LD_ADDR_VAR 0 10
40899: PUSH
40900: LD_VAR 0 1
40904: ST_TO_ADDR
// for i = 1 to length do
40905: LD_ADDR_VAR 0 6
40909: PUSH
40910: DOUBLE
40911: LD_INT 1
40913: DEC
40914: ST_TO_ADDR
40915: LD_VAR 0 11
40919: PUSH
40920: FOR_TO
40921: IFFALSE 41041
// begin for j = 1 to array do
40923: LD_ADDR_VAR 0 7
40927: PUSH
40928: DOUBLE
40929: LD_INT 1
40931: DEC
40932: ST_TO_ADDR
40933: LD_VAR 0 1
40937: PUSH
40938: FOR_TO
40939: IFFALSE 41027
// begin k := j + d ;
40941: LD_ADDR_VAR 0 8
40945: PUSH
40946: LD_VAR 0 7
40950: PUSH
40951: LD_VAR 0 9
40955: PLUS
40956: ST_TO_ADDR
// if k > array then
40957: LD_VAR 0 8
40961: PUSH
40962: LD_VAR 0 1
40966: GREATER
40967: IFFALSE 40977
// k := 1 ;
40969: LD_ADDR_VAR 0 8
40973: PUSH
40974: LD_INT 1
40976: ST_TO_ADDR
// if not k then
40977: LD_VAR 0 8
40981: NOT
40982: IFFALSE 40994
// k := array ;
40984: LD_ADDR_VAR 0 8
40988: PUSH
40989: LD_VAR 0 1
40993: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40994: LD_ADDR_VAR 0 10
40998: PUSH
40999: LD_VAR 0 10
41003: PPUSH
41004: LD_VAR 0 8
41008: PPUSH
41009: LD_VAR 0 1
41013: PUSH
41014: LD_VAR 0 7
41018: ARRAY
41019: PPUSH
41020: CALL_OW 1
41024: ST_TO_ADDR
// end ;
41025: GO 40938
41027: POP
41028: POP
// array := tmp ;
41029: LD_ADDR_VAR 0 1
41033: PUSH
41034: LD_VAR 0 10
41038: ST_TO_ADDR
// end ;
41039: GO 40920
41041: POP
41042: POP
// result := array ;
41043: LD_ADDR_VAR 0 5
41047: PUSH
41048: LD_VAR 0 1
41052: ST_TO_ADDR
// end ;
41053: LD_VAR 0 5
41057: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41058: LD_INT 0
41060: PPUSH
41061: PPUSH
// result := 0 ;
41062: LD_ADDR_VAR 0 3
41066: PUSH
41067: LD_INT 0
41069: ST_TO_ADDR
// if not array or not value in array then
41070: LD_VAR 0 1
41074: NOT
41075: PUSH
41076: LD_VAR 0 2
41080: PUSH
41081: LD_VAR 0 1
41085: IN
41086: NOT
41087: OR
41088: IFFALSE 41092
// exit ;
41090: GO 41146
// for i = 1 to array do
41092: LD_ADDR_VAR 0 4
41096: PUSH
41097: DOUBLE
41098: LD_INT 1
41100: DEC
41101: ST_TO_ADDR
41102: LD_VAR 0 1
41106: PUSH
41107: FOR_TO
41108: IFFALSE 41144
// if value = array [ i ] then
41110: LD_VAR 0 2
41114: PUSH
41115: LD_VAR 0 1
41119: PUSH
41120: LD_VAR 0 4
41124: ARRAY
41125: EQUAL
41126: IFFALSE 41142
// begin result := i ;
41128: LD_ADDR_VAR 0 3
41132: PUSH
41133: LD_VAR 0 4
41137: ST_TO_ADDR
// exit ;
41138: POP
41139: POP
41140: GO 41146
// end ;
41142: GO 41107
41144: POP
41145: POP
// end ;
41146: LD_VAR 0 3
41150: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41151: LD_INT 0
41153: PPUSH
// vc_chassis := chassis ;
41154: LD_ADDR_OWVAR 37
41158: PUSH
41159: LD_VAR 0 1
41163: ST_TO_ADDR
// vc_engine := engine ;
41164: LD_ADDR_OWVAR 39
41168: PUSH
41169: LD_VAR 0 2
41173: ST_TO_ADDR
// vc_control := control ;
41174: LD_ADDR_OWVAR 38
41178: PUSH
41179: LD_VAR 0 3
41183: ST_TO_ADDR
// vc_weapon := weapon ;
41184: LD_ADDR_OWVAR 40
41188: PUSH
41189: LD_VAR 0 4
41193: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41194: LD_ADDR_OWVAR 41
41198: PUSH
41199: LD_VAR 0 5
41203: ST_TO_ADDR
// end ;
41204: LD_VAR 0 6
41208: RET
// export function WantPlant ( unit ) ; var task ; begin
41209: LD_INT 0
41211: PPUSH
41212: PPUSH
// result := false ;
41213: LD_ADDR_VAR 0 2
41217: PUSH
41218: LD_INT 0
41220: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41221: LD_ADDR_VAR 0 3
41225: PUSH
41226: LD_VAR 0 1
41230: PPUSH
41231: CALL_OW 437
41235: ST_TO_ADDR
// if task then
41236: LD_VAR 0 3
41240: IFFALSE 41268
// if task [ 1 ] [ 1 ] = p then
41242: LD_VAR 0 3
41246: PUSH
41247: LD_INT 1
41249: ARRAY
41250: PUSH
41251: LD_INT 1
41253: ARRAY
41254: PUSH
41255: LD_STRING p
41257: EQUAL
41258: IFFALSE 41268
// result := true ;
41260: LD_ADDR_VAR 0 2
41264: PUSH
41265: LD_INT 1
41267: ST_TO_ADDR
// end ;
41268: LD_VAR 0 2
41272: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41273: LD_INT 0
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
// if pos < 1 then
41279: LD_VAR 0 2
41283: PUSH
41284: LD_INT 1
41286: LESS
41287: IFFALSE 41291
// exit ;
41289: GO 41594
// if pos = 1 then
41291: LD_VAR 0 2
41295: PUSH
41296: LD_INT 1
41298: EQUAL
41299: IFFALSE 41332
// result := Replace ( arr , pos [ 1 ] , value ) else
41301: LD_ADDR_VAR 0 4
41305: PUSH
41306: LD_VAR 0 1
41310: PPUSH
41311: LD_VAR 0 2
41315: PUSH
41316: LD_INT 1
41318: ARRAY
41319: PPUSH
41320: LD_VAR 0 3
41324: PPUSH
41325: CALL_OW 1
41329: ST_TO_ADDR
41330: GO 41594
// begin tmp := arr ;
41332: LD_ADDR_VAR 0 6
41336: PUSH
41337: LD_VAR 0 1
41341: ST_TO_ADDR
// s_arr := [ tmp ] ;
41342: LD_ADDR_VAR 0 7
41346: PUSH
41347: LD_VAR 0 6
41351: PUSH
41352: EMPTY
41353: LIST
41354: ST_TO_ADDR
// for i = 1 to pos - 1 do
41355: LD_ADDR_VAR 0 5
41359: PUSH
41360: DOUBLE
41361: LD_INT 1
41363: DEC
41364: ST_TO_ADDR
41365: LD_VAR 0 2
41369: PUSH
41370: LD_INT 1
41372: MINUS
41373: PUSH
41374: FOR_TO
41375: IFFALSE 41420
// begin tmp := tmp [ pos [ i ] ] ;
41377: LD_ADDR_VAR 0 6
41381: PUSH
41382: LD_VAR 0 6
41386: PUSH
41387: LD_VAR 0 2
41391: PUSH
41392: LD_VAR 0 5
41396: ARRAY
41397: ARRAY
41398: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41399: LD_ADDR_VAR 0 7
41403: PUSH
41404: LD_VAR 0 7
41408: PUSH
41409: LD_VAR 0 6
41413: PUSH
41414: EMPTY
41415: LIST
41416: ADD
41417: ST_TO_ADDR
// end ;
41418: GO 41374
41420: POP
41421: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41422: LD_ADDR_VAR 0 6
41426: PUSH
41427: LD_VAR 0 6
41431: PPUSH
41432: LD_VAR 0 2
41436: PUSH
41437: LD_VAR 0 2
41441: ARRAY
41442: PPUSH
41443: LD_VAR 0 3
41447: PPUSH
41448: CALL_OW 1
41452: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41453: LD_ADDR_VAR 0 7
41457: PUSH
41458: LD_VAR 0 7
41462: PPUSH
41463: LD_VAR 0 7
41467: PPUSH
41468: LD_VAR 0 6
41472: PPUSH
41473: CALL_OW 1
41477: ST_TO_ADDR
// for i = s_arr downto 2 do
41478: LD_ADDR_VAR 0 5
41482: PUSH
41483: DOUBLE
41484: LD_VAR 0 7
41488: INC
41489: ST_TO_ADDR
41490: LD_INT 2
41492: PUSH
41493: FOR_DOWNTO
41494: IFFALSE 41578
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41496: LD_ADDR_VAR 0 6
41500: PUSH
41501: LD_VAR 0 7
41505: PUSH
41506: LD_VAR 0 5
41510: PUSH
41511: LD_INT 1
41513: MINUS
41514: ARRAY
41515: PPUSH
41516: LD_VAR 0 2
41520: PUSH
41521: LD_VAR 0 5
41525: PUSH
41526: LD_INT 1
41528: MINUS
41529: ARRAY
41530: PPUSH
41531: LD_VAR 0 7
41535: PUSH
41536: LD_VAR 0 5
41540: ARRAY
41541: PPUSH
41542: CALL_OW 1
41546: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41547: LD_ADDR_VAR 0 7
41551: PUSH
41552: LD_VAR 0 7
41556: PPUSH
41557: LD_VAR 0 5
41561: PUSH
41562: LD_INT 1
41564: MINUS
41565: PPUSH
41566: LD_VAR 0 6
41570: PPUSH
41571: CALL_OW 1
41575: ST_TO_ADDR
// end ;
41576: GO 41493
41578: POP
41579: POP
// result := s_arr [ 1 ] ;
41580: LD_ADDR_VAR 0 4
41584: PUSH
41585: LD_VAR 0 7
41589: PUSH
41590: LD_INT 1
41592: ARRAY
41593: ST_TO_ADDR
// end ; end ;
41594: LD_VAR 0 4
41598: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41599: LD_INT 0
41601: PPUSH
41602: PPUSH
// if not list then
41603: LD_VAR 0 1
41607: NOT
41608: IFFALSE 41612
// exit ;
41610: GO 41703
// i := list [ pos1 ] ;
41612: LD_ADDR_VAR 0 5
41616: PUSH
41617: LD_VAR 0 1
41621: PUSH
41622: LD_VAR 0 2
41626: ARRAY
41627: ST_TO_ADDR
// if not i then
41628: LD_VAR 0 5
41632: NOT
41633: IFFALSE 41637
// exit ;
41635: GO 41703
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41637: LD_ADDR_VAR 0 1
41641: PUSH
41642: LD_VAR 0 1
41646: PPUSH
41647: LD_VAR 0 2
41651: PPUSH
41652: LD_VAR 0 1
41656: PUSH
41657: LD_VAR 0 3
41661: ARRAY
41662: PPUSH
41663: CALL_OW 1
41667: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41668: LD_ADDR_VAR 0 1
41672: PUSH
41673: LD_VAR 0 1
41677: PPUSH
41678: LD_VAR 0 3
41682: PPUSH
41683: LD_VAR 0 5
41687: PPUSH
41688: CALL_OW 1
41692: ST_TO_ADDR
// result := list ;
41693: LD_ADDR_VAR 0 4
41697: PUSH
41698: LD_VAR 0 1
41702: ST_TO_ADDR
// end ;
41703: LD_VAR 0 4
41707: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41708: LD_INT 0
41710: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41711: LD_ADDR_VAR 0 5
41715: PUSH
41716: LD_VAR 0 1
41720: PPUSH
41721: CALL_OW 250
41725: PPUSH
41726: LD_VAR 0 1
41730: PPUSH
41731: CALL_OW 251
41735: PPUSH
41736: LD_VAR 0 2
41740: PPUSH
41741: LD_VAR 0 3
41745: PPUSH
41746: LD_VAR 0 4
41750: PPUSH
41751: CALL 41761 0 5
41755: ST_TO_ADDR
// end ;
41756: LD_VAR 0 5
41760: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41761: LD_INT 0
41763: PPUSH
41764: PPUSH
41765: PPUSH
41766: PPUSH
// if not list then
41767: LD_VAR 0 3
41771: NOT
41772: IFFALSE 41776
// exit ;
41774: GO 42164
// result := [ ] ;
41776: LD_ADDR_VAR 0 6
41780: PUSH
41781: EMPTY
41782: ST_TO_ADDR
// for i in list do
41783: LD_ADDR_VAR 0 7
41787: PUSH
41788: LD_VAR 0 3
41792: PUSH
41793: FOR_IN
41794: IFFALSE 41996
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41796: LD_ADDR_VAR 0 9
41800: PUSH
41801: LD_VAR 0 7
41805: PPUSH
41806: LD_VAR 0 1
41810: PPUSH
41811: LD_VAR 0 2
41815: PPUSH
41816: CALL_OW 297
41820: ST_TO_ADDR
// if not result then
41821: LD_VAR 0 6
41825: NOT
41826: IFFALSE 41852
// result := [ [ i , tmp ] ] else
41828: LD_ADDR_VAR 0 6
41832: PUSH
41833: LD_VAR 0 7
41837: PUSH
41838: LD_VAR 0 9
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: EMPTY
41848: LIST
41849: ST_TO_ADDR
41850: GO 41994
// begin if result [ result ] [ 2 ] < tmp then
41852: LD_VAR 0 6
41856: PUSH
41857: LD_VAR 0 6
41861: ARRAY
41862: PUSH
41863: LD_INT 2
41865: ARRAY
41866: PUSH
41867: LD_VAR 0 9
41871: LESS
41872: IFFALSE 41914
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41874: LD_ADDR_VAR 0 6
41878: PUSH
41879: LD_VAR 0 6
41883: PPUSH
41884: LD_VAR 0 6
41888: PUSH
41889: LD_INT 1
41891: PLUS
41892: PPUSH
41893: LD_VAR 0 7
41897: PUSH
41898: LD_VAR 0 9
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PPUSH
41907: CALL_OW 2
41911: ST_TO_ADDR
41912: GO 41994
// for j = 1 to result do
41914: LD_ADDR_VAR 0 8
41918: PUSH
41919: DOUBLE
41920: LD_INT 1
41922: DEC
41923: ST_TO_ADDR
41924: LD_VAR 0 6
41928: PUSH
41929: FOR_TO
41930: IFFALSE 41992
// begin if tmp < result [ j ] [ 2 ] then
41932: LD_VAR 0 9
41936: PUSH
41937: LD_VAR 0 6
41941: PUSH
41942: LD_VAR 0 8
41946: ARRAY
41947: PUSH
41948: LD_INT 2
41950: ARRAY
41951: LESS
41952: IFFALSE 41990
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41954: LD_ADDR_VAR 0 6
41958: PUSH
41959: LD_VAR 0 6
41963: PPUSH
41964: LD_VAR 0 8
41968: PPUSH
41969: LD_VAR 0 7
41973: PUSH
41974: LD_VAR 0 9
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PPUSH
41983: CALL_OW 2
41987: ST_TO_ADDR
// break ;
41988: GO 41992
// end ; end ;
41990: GO 41929
41992: POP
41993: POP
// end ; end ;
41994: GO 41793
41996: POP
41997: POP
// if result and not asc then
41998: LD_VAR 0 6
42002: PUSH
42003: LD_VAR 0 4
42007: NOT
42008: AND
42009: IFFALSE 42084
// begin tmp := result ;
42011: LD_ADDR_VAR 0 9
42015: PUSH
42016: LD_VAR 0 6
42020: ST_TO_ADDR
// for i = tmp downto 1 do
42021: LD_ADDR_VAR 0 7
42025: PUSH
42026: DOUBLE
42027: LD_VAR 0 9
42031: INC
42032: ST_TO_ADDR
42033: LD_INT 1
42035: PUSH
42036: FOR_DOWNTO
42037: IFFALSE 42082
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42039: LD_ADDR_VAR 0 6
42043: PUSH
42044: LD_VAR 0 6
42048: PPUSH
42049: LD_VAR 0 9
42053: PUSH
42054: LD_VAR 0 7
42058: MINUS
42059: PUSH
42060: LD_INT 1
42062: PLUS
42063: PPUSH
42064: LD_VAR 0 9
42068: PUSH
42069: LD_VAR 0 7
42073: ARRAY
42074: PPUSH
42075: CALL_OW 1
42079: ST_TO_ADDR
42080: GO 42036
42082: POP
42083: POP
// end ; tmp := [ ] ;
42084: LD_ADDR_VAR 0 9
42088: PUSH
42089: EMPTY
42090: ST_TO_ADDR
// if mode then
42091: LD_VAR 0 5
42095: IFFALSE 42164
// begin for i = 1 to result do
42097: LD_ADDR_VAR 0 7
42101: PUSH
42102: DOUBLE
42103: LD_INT 1
42105: DEC
42106: ST_TO_ADDR
42107: LD_VAR 0 6
42111: PUSH
42112: FOR_TO
42113: IFFALSE 42152
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42115: LD_ADDR_VAR 0 9
42119: PUSH
42120: LD_VAR 0 9
42124: PPUSH
42125: LD_VAR 0 7
42129: PPUSH
42130: LD_VAR 0 6
42134: PUSH
42135: LD_VAR 0 7
42139: ARRAY
42140: PUSH
42141: LD_INT 1
42143: ARRAY
42144: PPUSH
42145: CALL_OW 1
42149: ST_TO_ADDR
42150: GO 42112
42152: POP
42153: POP
// result := tmp ;
42154: LD_ADDR_VAR 0 6
42158: PUSH
42159: LD_VAR 0 9
42163: ST_TO_ADDR
// end ; end ;
42164: LD_VAR 0 6
42168: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42169: LD_INT 0
42171: PPUSH
42172: PPUSH
42173: PPUSH
42174: PPUSH
42175: PPUSH
42176: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42177: LD_ADDR_VAR 0 5
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: ST_TO_ADDR
// if not x or not y then
42199: LD_VAR 0 2
42203: NOT
42204: PUSH
42205: LD_VAR 0 3
42209: NOT
42210: OR
42211: IFFALSE 42215
// exit ;
42213: GO 43861
// if not range then
42215: LD_VAR 0 4
42219: NOT
42220: IFFALSE 42230
// range := 10 ;
42222: LD_ADDR_VAR 0 4
42226: PUSH
42227: LD_INT 10
42229: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42230: LD_ADDR_VAR 0 8
42234: PUSH
42235: LD_INT 81
42237: PUSH
42238: LD_VAR 0 1
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 92
42249: PUSH
42250: LD_VAR 0 2
42254: PUSH
42255: LD_VAR 0 3
42259: PUSH
42260: LD_VAR 0 4
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 3
42273: PUSH
42274: LD_INT 21
42276: PUSH
42277: LD_INT 3
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: LIST
42292: PPUSH
42293: CALL_OW 69
42297: ST_TO_ADDR
// if not tmp then
42298: LD_VAR 0 8
42302: NOT
42303: IFFALSE 42307
// exit ;
42305: GO 43861
// for i in tmp do
42307: LD_ADDR_VAR 0 6
42311: PUSH
42312: LD_VAR 0 8
42316: PUSH
42317: FOR_IN
42318: IFFALSE 43836
// begin points := [ 0 , 0 , 0 ] ;
42320: LD_ADDR_VAR 0 9
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: LIST
42338: ST_TO_ADDR
// bpoints := 1 ;
42339: LD_ADDR_VAR 0 10
42343: PUSH
42344: LD_INT 1
42346: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42347: LD_VAR 0 6
42351: PPUSH
42352: CALL_OW 247
42356: PUSH
42357: LD_INT 1
42359: DOUBLE
42360: EQUAL
42361: IFTRUE 42365
42363: GO 42943
42365: POP
// begin if GetClass ( i ) = 1 then
42366: LD_VAR 0 6
42370: PPUSH
42371: CALL_OW 257
42375: PUSH
42376: LD_INT 1
42378: EQUAL
42379: IFFALSE 42400
// points := [ 10 , 5 , 3 ] ;
42381: LD_ADDR_VAR 0 9
42385: PUSH
42386: LD_INT 10
42388: PUSH
42389: LD_INT 5
42391: PUSH
42392: LD_INT 3
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42400: LD_VAR 0 6
42404: PPUSH
42405: CALL_OW 257
42409: PUSH
42410: LD_INT 2
42412: PUSH
42413: LD_INT 3
42415: PUSH
42416: LD_INT 4
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: LIST
42423: IN
42424: IFFALSE 42445
// points := [ 3 , 2 , 1 ] ;
42426: LD_ADDR_VAR 0 9
42430: PUSH
42431: LD_INT 3
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42445: LD_VAR 0 6
42449: PPUSH
42450: CALL_OW 257
42454: PUSH
42455: LD_INT 5
42457: EQUAL
42458: IFFALSE 42479
// points := [ 130 , 5 , 2 ] ;
42460: LD_ADDR_VAR 0 9
42464: PUSH
42465: LD_INT 130
42467: PUSH
42468: LD_INT 5
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42479: LD_VAR 0 6
42483: PPUSH
42484: CALL_OW 257
42488: PUSH
42489: LD_INT 8
42491: EQUAL
42492: IFFALSE 42513
// points := [ 35 , 35 , 30 ] ;
42494: LD_ADDR_VAR 0 9
42498: PUSH
42499: LD_INT 35
42501: PUSH
42502: LD_INT 35
42504: PUSH
42505: LD_INT 30
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42513: LD_VAR 0 6
42517: PPUSH
42518: CALL_OW 257
42522: PUSH
42523: LD_INT 9
42525: EQUAL
42526: IFFALSE 42547
// points := [ 20 , 55 , 40 ] ;
42528: LD_ADDR_VAR 0 9
42532: PUSH
42533: LD_INT 20
42535: PUSH
42536: LD_INT 55
42538: PUSH
42539: LD_INT 40
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42547: LD_VAR 0 6
42551: PPUSH
42552: CALL_OW 257
42556: PUSH
42557: LD_INT 12
42559: PUSH
42560: LD_INT 16
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: IN
42567: IFFALSE 42588
// points := [ 5 , 3 , 2 ] ;
42569: LD_ADDR_VAR 0 9
42573: PUSH
42574: LD_INT 5
42576: PUSH
42577: LD_INT 3
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: LIST
42587: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42588: LD_VAR 0 6
42592: PPUSH
42593: CALL_OW 257
42597: PUSH
42598: LD_INT 17
42600: EQUAL
42601: IFFALSE 42622
// points := [ 100 , 50 , 75 ] ;
42603: LD_ADDR_VAR 0 9
42607: PUSH
42608: LD_INT 100
42610: PUSH
42611: LD_INT 50
42613: PUSH
42614: LD_INT 75
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42622: LD_VAR 0 6
42626: PPUSH
42627: CALL_OW 257
42631: PUSH
42632: LD_INT 15
42634: EQUAL
42635: IFFALSE 42656
// points := [ 10 , 5 , 3 ] ;
42637: LD_ADDR_VAR 0 9
42641: PUSH
42642: LD_INT 10
42644: PUSH
42645: LD_INT 5
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42656: LD_VAR 0 6
42660: PPUSH
42661: CALL_OW 257
42665: PUSH
42666: LD_INT 14
42668: EQUAL
42669: IFFALSE 42690
// points := [ 10 , 0 , 0 ] ;
42671: LD_ADDR_VAR 0 9
42675: PUSH
42676: LD_INT 10
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: LIST
42689: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42690: LD_VAR 0 6
42694: PPUSH
42695: CALL_OW 257
42699: PUSH
42700: LD_INT 11
42702: EQUAL
42703: IFFALSE 42724
// points := [ 30 , 10 , 5 ] ;
42705: LD_ADDR_VAR 0 9
42709: PUSH
42710: LD_INT 30
42712: PUSH
42713: LD_INT 10
42715: PUSH
42716: LD_INT 5
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42724: LD_VAR 0 1
42728: PPUSH
42729: LD_INT 5
42731: PPUSH
42732: CALL_OW 321
42736: PUSH
42737: LD_INT 2
42739: EQUAL
42740: IFFALSE 42757
// bpoints := bpoints * 1.8 ;
42742: LD_ADDR_VAR 0 10
42746: PUSH
42747: LD_VAR 0 10
42751: PUSH
42752: LD_REAL  1.80000000000000E+0000
42755: MUL
42756: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42757: LD_VAR 0 6
42761: PPUSH
42762: CALL_OW 257
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: LD_INT 2
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: LD_INT 4
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: IN
42785: PUSH
42786: LD_VAR 0 1
42790: PPUSH
42791: LD_INT 51
42793: PPUSH
42794: CALL_OW 321
42798: PUSH
42799: LD_INT 2
42801: EQUAL
42802: AND
42803: IFFALSE 42820
// bpoints := bpoints * 1.2 ;
42805: LD_ADDR_VAR 0 10
42809: PUSH
42810: LD_VAR 0 10
42814: PUSH
42815: LD_REAL  1.20000000000000E+0000
42818: MUL
42819: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42820: LD_VAR 0 6
42824: PPUSH
42825: CALL_OW 257
42829: PUSH
42830: LD_INT 5
42832: PUSH
42833: LD_INT 7
42835: PUSH
42836: LD_INT 9
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: LIST
42843: IN
42844: PUSH
42845: LD_VAR 0 1
42849: PPUSH
42850: LD_INT 52
42852: PPUSH
42853: CALL_OW 321
42857: PUSH
42858: LD_INT 2
42860: EQUAL
42861: AND
42862: IFFALSE 42879
// bpoints := bpoints * 1.5 ;
42864: LD_ADDR_VAR 0 10
42868: PUSH
42869: LD_VAR 0 10
42873: PUSH
42874: LD_REAL  1.50000000000000E+0000
42877: MUL
42878: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42879: LD_VAR 0 1
42883: PPUSH
42884: LD_INT 66
42886: PPUSH
42887: CALL_OW 321
42891: PUSH
42892: LD_INT 2
42894: EQUAL
42895: IFFALSE 42912
// bpoints := bpoints * 1.1 ;
42897: LD_ADDR_VAR 0 10
42901: PUSH
42902: LD_VAR 0 10
42906: PUSH
42907: LD_REAL  1.10000000000000E+0000
42910: MUL
42911: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42912: LD_ADDR_VAR 0 10
42916: PUSH
42917: LD_VAR 0 10
42921: PUSH
42922: LD_VAR 0 6
42926: PPUSH
42927: LD_INT 1
42929: PPUSH
42930: CALL_OW 259
42934: PUSH
42935: LD_REAL  1.15000000000000E+0000
42938: MUL
42939: MUL
42940: ST_TO_ADDR
// end ; unit_vehicle :
42941: GO 43765
42943: LD_INT 2
42945: DOUBLE
42946: EQUAL
42947: IFTRUE 42951
42949: GO 43753
42951: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42952: LD_VAR 0 6
42956: PPUSH
42957: CALL_OW 264
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: LD_INT 42
42967: PUSH
42968: LD_INT 24
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: LIST
42975: IN
42976: IFFALSE 42997
// points := [ 25 , 5 , 3 ] ;
42978: LD_ADDR_VAR 0 9
42982: PUSH
42983: LD_INT 25
42985: PUSH
42986: LD_INT 5
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: LIST
42996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42997: LD_VAR 0 6
43001: PPUSH
43002: CALL_OW 264
43006: PUSH
43007: LD_INT 4
43009: PUSH
43010: LD_INT 43
43012: PUSH
43013: LD_INT 25
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: IN
43021: IFFALSE 43042
// points := [ 40 , 15 , 5 ] ;
43023: LD_ADDR_VAR 0 9
43027: PUSH
43028: LD_INT 40
43030: PUSH
43031: LD_INT 15
43033: PUSH
43034: LD_INT 5
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43042: LD_VAR 0 6
43046: PPUSH
43047: CALL_OW 264
43051: PUSH
43052: LD_INT 3
43054: PUSH
43055: LD_INT 23
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: IN
43062: IFFALSE 43083
// points := [ 7 , 25 , 8 ] ;
43064: LD_ADDR_VAR 0 9
43068: PUSH
43069: LD_INT 7
43071: PUSH
43072: LD_INT 25
43074: PUSH
43075: LD_INT 8
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43083: LD_VAR 0 6
43087: PPUSH
43088: CALL_OW 264
43092: PUSH
43093: LD_INT 5
43095: PUSH
43096: LD_INT 27
43098: PUSH
43099: LD_INT 44
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: LIST
43106: IN
43107: IFFALSE 43128
// points := [ 14 , 50 , 16 ] ;
43109: LD_ADDR_VAR 0 9
43113: PUSH
43114: LD_INT 14
43116: PUSH
43117: LD_INT 50
43119: PUSH
43120: LD_INT 16
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: LIST
43127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43128: LD_VAR 0 6
43132: PPUSH
43133: CALL_OW 264
43137: PUSH
43138: LD_INT 6
43140: PUSH
43141: LD_INT 46
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: IN
43148: IFFALSE 43169
// points := [ 32 , 120 , 70 ] ;
43150: LD_ADDR_VAR 0 9
43154: PUSH
43155: LD_INT 32
43157: PUSH
43158: LD_INT 120
43160: PUSH
43161: LD_INT 70
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: LIST
43168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
43169: LD_VAR 0 6
43173: PPUSH
43174: CALL_OW 264
43178: PUSH
43179: LD_INT 7
43181: PUSH
43182: LD_INT 28
43184: PUSH
43185: LD_INT 45
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: IN
43193: IFFALSE 43214
// points := [ 35 , 20 , 45 ] ;
43195: LD_ADDR_VAR 0 9
43199: PUSH
43200: LD_INT 35
43202: PUSH
43203: LD_INT 20
43205: PUSH
43206: LD_INT 45
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: LIST
43213: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43214: LD_VAR 0 6
43218: PPUSH
43219: CALL_OW 264
43223: PUSH
43224: LD_INT 47
43226: PUSH
43227: EMPTY
43228: LIST
43229: IN
43230: IFFALSE 43251
// points := [ 67 , 45 , 75 ] ;
43232: LD_ADDR_VAR 0 9
43236: PUSH
43237: LD_INT 67
43239: PUSH
43240: LD_INT 45
43242: PUSH
43243: LD_INT 75
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: LIST
43250: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43251: LD_VAR 0 6
43255: PPUSH
43256: CALL_OW 264
43260: PUSH
43261: LD_INT 26
43263: PUSH
43264: EMPTY
43265: LIST
43266: IN
43267: IFFALSE 43288
// points := [ 120 , 30 , 80 ] ;
43269: LD_ADDR_VAR 0 9
43273: PUSH
43274: LD_INT 120
43276: PUSH
43277: LD_INT 30
43279: PUSH
43280: LD_INT 80
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: LIST
43287: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43288: LD_VAR 0 6
43292: PPUSH
43293: CALL_OW 264
43297: PUSH
43298: LD_INT 22
43300: PUSH
43301: EMPTY
43302: LIST
43303: IN
43304: IFFALSE 43325
// points := [ 40 , 1 , 1 ] ;
43306: LD_ADDR_VAR 0 9
43310: PUSH
43311: LD_INT 40
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43325: LD_VAR 0 6
43329: PPUSH
43330: CALL_OW 264
43334: PUSH
43335: LD_INT 29
43337: PUSH
43338: EMPTY
43339: LIST
43340: IN
43341: IFFALSE 43362
// points := [ 70 , 200 , 400 ] ;
43343: LD_ADDR_VAR 0 9
43347: PUSH
43348: LD_INT 70
43350: PUSH
43351: LD_INT 200
43353: PUSH
43354: LD_INT 400
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: LIST
43361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43362: LD_VAR 0 6
43366: PPUSH
43367: CALL_OW 264
43371: PUSH
43372: LD_INT 14
43374: PUSH
43375: LD_INT 53
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: IN
43382: IFFALSE 43403
// points := [ 40 , 10 , 20 ] ;
43384: LD_ADDR_VAR 0 9
43388: PUSH
43389: LD_INT 40
43391: PUSH
43392: LD_INT 10
43394: PUSH
43395: LD_INT 20
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: LIST
43402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43403: LD_VAR 0 6
43407: PPUSH
43408: CALL_OW 264
43412: PUSH
43413: LD_INT 9
43415: PUSH
43416: EMPTY
43417: LIST
43418: IN
43419: IFFALSE 43440
// points := [ 5 , 70 , 20 ] ;
43421: LD_ADDR_VAR 0 9
43425: PUSH
43426: LD_INT 5
43428: PUSH
43429: LD_INT 70
43431: PUSH
43432: LD_INT 20
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43440: LD_VAR 0 6
43444: PPUSH
43445: CALL_OW 264
43449: PUSH
43450: LD_INT 10
43452: PUSH
43453: EMPTY
43454: LIST
43455: IN
43456: IFFALSE 43477
// points := [ 35 , 110 , 70 ] ;
43458: LD_ADDR_VAR 0 9
43462: PUSH
43463: LD_INT 35
43465: PUSH
43466: LD_INT 110
43468: PUSH
43469: LD_INT 70
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43477: LD_VAR 0 6
43481: PPUSH
43482: CALL_OW 265
43486: PUSH
43487: LD_INT 25
43489: EQUAL
43490: IFFALSE 43511
// points := [ 80 , 65 , 100 ] ;
43492: LD_ADDR_VAR 0 9
43496: PUSH
43497: LD_INT 80
43499: PUSH
43500: LD_INT 65
43502: PUSH
43503: LD_INT 100
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43511: LD_VAR 0 6
43515: PPUSH
43516: CALL_OW 263
43520: PUSH
43521: LD_INT 1
43523: EQUAL
43524: IFFALSE 43559
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43526: LD_ADDR_VAR 0 10
43530: PUSH
43531: LD_VAR 0 10
43535: PUSH
43536: LD_VAR 0 6
43540: PPUSH
43541: CALL_OW 311
43545: PPUSH
43546: LD_INT 3
43548: PPUSH
43549: CALL_OW 259
43553: PUSH
43554: LD_INT 4
43556: MUL
43557: MUL
43558: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43559: LD_VAR 0 6
43563: PPUSH
43564: CALL_OW 263
43568: PUSH
43569: LD_INT 2
43571: EQUAL
43572: IFFALSE 43623
// begin j := IsControledBy ( i ) ;
43574: LD_ADDR_VAR 0 7
43578: PUSH
43579: LD_VAR 0 6
43583: PPUSH
43584: CALL_OW 312
43588: ST_TO_ADDR
// if j then
43589: LD_VAR 0 7
43593: IFFALSE 43623
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43595: LD_ADDR_VAR 0 10
43599: PUSH
43600: LD_VAR 0 10
43604: PUSH
43605: LD_VAR 0 7
43609: PPUSH
43610: LD_INT 3
43612: PPUSH
43613: CALL_OW 259
43617: PUSH
43618: LD_INT 3
43620: MUL
43621: MUL
43622: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43623: LD_VAR 0 6
43627: PPUSH
43628: CALL_OW 264
43632: PUSH
43633: LD_INT 5
43635: PUSH
43636: LD_INT 6
43638: PUSH
43639: LD_INT 46
43641: PUSH
43642: LD_INT 44
43644: PUSH
43645: LD_INT 47
43647: PUSH
43648: LD_INT 45
43650: PUSH
43651: LD_INT 28
43653: PUSH
43654: LD_INT 7
43656: PUSH
43657: LD_INT 27
43659: PUSH
43660: LD_INT 29
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: IN
43675: PUSH
43676: LD_VAR 0 1
43680: PPUSH
43681: LD_INT 52
43683: PPUSH
43684: CALL_OW 321
43688: PUSH
43689: LD_INT 2
43691: EQUAL
43692: AND
43693: IFFALSE 43710
// bpoints := bpoints * 1.2 ;
43695: LD_ADDR_VAR 0 10
43699: PUSH
43700: LD_VAR 0 10
43704: PUSH
43705: LD_REAL  1.20000000000000E+0000
43708: MUL
43709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43710: LD_VAR 0 6
43714: PPUSH
43715: CALL_OW 264
43719: PUSH
43720: LD_INT 6
43722: PUSH
43723: LD_INT 46
43725: PUSH
43726: LD_INT 47
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: IN
43734: IFFALSE 43751
// bpoints := bpoints * 1.2 ;
43736: LD_ADDR_VAR 0 10
43740: PUSH
43741: LD_VAR 0 10
43745: PUSH
43746: LD_REAL  1.20000000000000E+0000
43749: MUL
43750: ST_TO_ADDR
// end ; unit_building :
43751: GO 43765
43753: LD_INT 3
43755: DOUBLE
43756: EQUAL
43757: IFTRUE 43761
43759: GO 43764
43761: POP
// ; end ;
43762: GO 43765
43764: POP
// for j = 1 to 3 do
43765: LD_ADDR_VAR 0 7
43769: PUSH
43770: DOUBLE
43771: LD_INT 1
43773: DEC
43774: ST_TO_ADDR
43775: LD_INT 3
43777: PUSH
43778: FOR_TO
43779: IFFALSE 43832
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43781: LD_ADDR_VAR 0 5
43785: PUSH
43786: LD_VAR 0 5
43790: PPUSH
43791: LD_VAR 0 7
43795: PPUSH
43796: LD_VAR 0 5
43800: PUSH
43801: LD_VAR 0 7
43805: ARRAY
43806: PUSH
43807: LD_VAR 0 9
43811: PUSH
43812: LD_VAR 0 7
43816: ARRAY
43817: PUSH
43818: LD_VAR 0 10
43822: MUL
43823: PLUS
43824: PPUSH
43825: CALL_OW 1
43829: ST_TO_ADDR
43830: GO 43778
43832: POP
43833: POP
// end ;
43834: GO 42317
43836: POP
43837: POP
// result := Replace ( result , 4 , tmp ) ;
43838: LD_ADDR_VAR 0 5
43842: PUSH
43843: LD_VAR 0 5
43847: PPUSH
43848: LD_INT 4
43850: PPUSH
43851: LD_VAR 0 8
43855: PPUSH
43856: CALL_OW 1
43860: ST_TO_ADDR
// end ;
43861: LD_VAR 0 5
43865: RET
// export function DangerAtRange ( unit , range ) ; begin
43866: LD_INT 0
43868: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43869: LD_ADDR_VAR 0 3
43873: PUSH
43874: LD_VAR 0 1
43878: PPUSH
43879: CALL_OW 255
43883: PPUSH
43884: LD_VAR 0 1
43888: PPUSH
43889: CALL_OW 250
43893: PPUSH
43894: LD_VAR 0 1
43898: PPUSH
43899: CALL_OW 251
43903: PPUSH
43904: LD_VAR 0 2
43908: PPUSH
43909: CALL 42169 0 4
43913: ST_TO_ADDR
// end ;
43914: LD_VAR 0 3
43918: RET
// export function DangerInArea ( side , area ) ; begin
43919: LD_INT 0
43921: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43922: LD_ADDR_VAR 0 3
43926: PUSH
43927: LD_VAR 0 2
43931: PPUSH
43932: LD_INT 81
43934: PUSH
43935: LD_VAR 0 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PPUSH
43944: CALL_OW 70
43948: ST_TO_ADDR
// end ;
43949: LD_VAR 0 3
43953: RET
// export function IsExtension ( b ) ; begin
43954: LD_INT 0
43956: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43957: LD_ADDR_VAR 0 2
43961: PUSH
43962: LD_VAR 0 1
43966: PUSH
43967: LD_INT 23
43969: PUSH
43970: LD_INT 20
43972: PUSH
43973: LD_INT 22
43975: PUSH
43976: LD_INT 17
43978: PUSH
43979: LD_INT 24
43981: PUSH
43982: LD_INT 21
43984: PUSH
43985: LD_INT 19
43987: PUSH
43988: LD_INT 16
43990: PUSH
43991: LD_INT 25
43993: PUSH
43994: LD_INT 18
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: IN
44009: ST_TO_ADDR
// end ;
44010: LD_VAR 0 2
44014: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
44015: LD_INT 0
44017: PPUSH
44018: PPUSH
44019: PPUSH
// result := [ ] ;
44020: LD_ADDR_VAR 0 3
44024: PUSH
44025: EMPTY
44026: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44027: LD_ADDR_VAR 0 4
44031: PUSH
44032: LD_VAR 0 2
44036: PPUSH
44037: LD_INT 21
44039: PUSH
44040: LD_INT 3
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PPUSH
44047: CALL_OW 70
44051: ST_TO_ADDR
// if not tmp then
44052: LD_VAR 0 4
44056: NOT
44057: IFFALSE 44061
// exit ;
44059: GO 44119
// for i in tmp do
44061: LD_ADDR_VAR 0 5
44065: PUSH
44066: LD_VAR 0 4
44070: PUSH
44071: FOR_IN
44072: IFFALSE 44107
// if GetBase ( i ) <> base then
44074: LD_VAR 0 5
44078: PPUSH
44079: CALL_OW 274
44083: PUSH
44084: LD_VAR 0 1
44088: NONEQUAL
44089: IFFALSE 44105
// ComLinkToBase ( base , i ) ;
44091: LD_VAR 0 1
44095: PPUSH
44096: LD_VAR 0 5
44100: PPUSH
44101: CALL_OW 169
44105: GO 44071
44107: POP
44108: POP
// result := tmp ;
44109: LD_ADDR_VAR 0 3
44113: PUSH
44114: LD_VAR 0 4
44118: ST_TO_ADDR
// end ;
44119: LD_VAR 0 3
44123: RET
// export function ComComplete ( unit , b ) ; var i ; begin
44124: LD_INT 0
44126: PPUSH
44127: PPUSH
// if BuildingStatus ( b ) = bs_build then
44128: LD_VAR 0 2
44132: PPUSH
44133: CALL_OW 461
44137: PUSH
44138: LD_INT 1
44140: EQUAL
44141: IFFALSE 44201
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44143: LD_VAR 0 1
44147: PPUSH
44148: LD_STRING h
44150: PUSH
44151: LD_VAR 0 2
44155: PPUSH
44156: CALL_OW 250
44160: PUSH
44161: LD_VAR 0 2
44165: PPUSH
44166: CALL_OW 251
44170: PUSH
44171: LD_VAR 0 2
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: PUSH
44194: EMPTY
44195: LIST
44196: PPUSH
44197: CALL_OW 446
// end ;
44201: LD_VAR 0 3
44205: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44206: LD_INT 0
44208: PPUSH
44209: PPUSH
44210: PPUSH
44211: PPUSH
44212: PPUSH
44213: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
44214: LD_VAR 0 1
44218: NOT
44219: PUSH
44220: LD_VAR 0 1
44224: PPUSH
44225: CALL_OW 263
44229: PUSH
44230: LD_INT 2
44232: EQUAL
44233: NOT
44234: OR
44235: IFFALSE 44239
// exit ;
44237: GO 44555
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44239: LD_ADDR_VAR 0 6
44243: PUSH
44244: LD_INT 22
44246: PUSH
44247: LD_VAR 0 1
44251: PPUSH
44252: CALL_OW 255
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: LD_INT 30
44266: PUSH
44267: LD_INT 36
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 34
44276: PUSH
44277: LD_INT 31
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: LIST
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PPUSH
44293: CALL_OW 69
44297: ST_TO_ADDR
// if not tmp then
44298: LD_VAR 0 6
44302: NOT
44303: IFFALSE 44307
// exit ;
44305: GO 44555
// result := [ ] ;
44307: LD_ADDR_VAR 0 2
44311: PUSH
44312: EMPTY
44313: ST_TO_ADDR
// for i in tmp do
44314: LD_ADDR_VAR 0 3
44318: PUSH
44319: LD_VAR 0 6
44323: PUSH
44324: FOR_IN
44325: IFFALSE 44396
// begin t := UnitsInside ( i ) ;
44327: LD_ADDR_VAR 0 4
44331: PUSH
44332: LD_VAR 0 3
44336: PPUSH
44337: CALL_OW 313
44341: ST_TO_ADDR
// if t then
44342: LD_VAR 0 4
44346: IFFALSE 44394
// for j in t do
44348: LD_ADDR_VAR 0 7
44352: PUSH
44353: LD_VAR 0 4
44357: PUSH
44358: FOR_IN
44359: IFFALSE 44392
// result := Insert ( result , result + 1 , j ) ;
44361: LD_ADDR_VAR 0 2
44365: PUSH
44366: LD_VAR 0 2
44370: PPUSH
44371: LD_VAR 0 2
44375: PUSH
44376: LD_INT 1
44378: PLUS
44379: PPUSH
44380: LD_VAR 0 7
44384: PPUSH
44385: CALL_OW 2
44389: ST_TO_ADDR
44390: GO 44358
44392: POP
44393: POP
// end ;
44394: GO 44324
44396: POP
44397: POP
// if not result then
44398: LD_VAR 0 2
44402: NOT
44403: IFFALSE 44407
// exit ;
44405: GO 44555
// mech := result [ 1 ] ;
44407: LD_ADDR_VAR 0 5
44411: PUSH
44412: LD_VAR 0 2
44416: PUSH
44417: LD_INT 1
44419: ARRAY
44420: ST_TO_ADDR
// if result > 1 then
44421: LD_VAR 0 2
44425: PUSH
44426: LD_INT 1
44428: GREATER
44429: IFFALSE 44541
// for i = 2 to result do
44431: LD_ADDR_VAR 0 3
44435: PUSH
44436: DOUBLE
44437: LD_INT 2
44439: DEC
44440: ST_TO_ADDR
44441: LD_VAR 0 2
44445: PUSH
44446: FOR_TO
44447: IFFALSE 44539
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44449: LD_ADDR_VAR 0 4
44453: PUSH
44454: LD_VAR 0 2
44458: PUSH
44459: LD_VAR 0 3
44463: ARRAY
44464: PPUSH
44465: LD_INT 3
44467: PPUSH
44468: CALL_OW 259
44472: PUSH
44473: LD_VAR 0 2
44477: PUSH
44478: LD_VAR 0 3
44482: ARRAY
44483: PPUSH
44484: CALL_OW 432
44488: MINUS
44489: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44490: LD_VAR 0 4
44494: PUSH
44495: LD_VAR 0 5
44499: PPUSH
44500: LD_INT 3
44502: PPUSH
44503: CALL_OW 259
44507: PUSH
44508: LD_VAR 0 5
44512: PPUSH
44513: CALL_OW 432
44517: MINUS
44518: GREATEREQUAL
44519: IFFALSE 44537
// mech := result [ i ] ;
44521: LD_ADDR_VAR 0 5
44525: PUSH
44526: LD_VAR 0 2
44530: PUSH
44531: LD_VAR 0 3
44535: ARRAY
44536: ST_TO_ADDR
// end ;
44537: GO 44446
44539: POP
44540: POP
// ComLinkTo ( vehicle , mech ) ;
44541: LD_VAR 0 1
44545: PPUSH
44546: LD_VAR 0 5
44550: PPUSH
44551: CALL_OW 135
// end ;
44555: LD_VAR 0 2
44559: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44560: LD_INT 0
44562: PPUSH
44563: PPUSH
44564: PPUSH
44565: PPUSH
44566: PPUSH
44567: PPUSH
44568: PPUSH
44569: PPUSH
44570: PPUSH
44571: PPUSH
44572: PPUSH
44573: PPUSH
44574: PPUSH
// result := [ ] ;
44575: LD_ADDR_VAR 0 7
44579: PUSH
44580: EMPTY
44581: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44582: LD_VAR 0 1
44586: PPUSH
44587: CALL_OW 266
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: IN
44602: NOT
44603: IFFALSE 44607
// exit ;
44605: GO 46238
// if name then
44607: LD_VAR 0 3
44611: IFFALSE 44627
// SetBName ( base_dep , name ) ;
44613: LD_VAR 0 1
44617: PPUSH
44618: LD_VAR 0 3
44622: PPUSH
44623: CALL_OW 500
// base := GetBase ( base_dep ) ;
44627: LD_ADDR_VAR 0 15
44631: PUSH
44632: LD_VAR 0 1
44636: PPUSH
44637: CALL_OW 274
44641: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44642: LD_ADDR_VAR 0 16
44646: PUSH
44647: LD_VAR 0 1
44651: PPUSH
44652: CALL_OW 255
44656: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44657: LD_ADDR_VAR 0 17
44661: PUSH
44662: LD_VAR 0 1
44666: PPUSH
44667: CALL_OW 248
44671: ST_TO_ADDR
// if sources then
44672: LD_VAR 0 5
44676: IFFALSE 44723
// for i = 1 to 3 do
44678: LD_ADDR_VAR 0 8
44682: PUSH
44683: DOUBLE
44684: LD_INT 1
44686: DEC
44687: ST_TO_ADDR
44688: LD_INT 3
44690: PUSH
44691: FOR_TO
44692: IFFALSE 44721
// AddResourceType ( base , i , sources [ i ] ) ;
44694: LD_VAR 0 15
44698: PPUSH
44699: LD_VAR 0 8
44703: PPUSH
44704: LD_VAR 0 5
44708: PUSH
44709: LD_VAR 0 8
44713: ARRAY
44714: PPUSH
44715: CALL_OW 276
44719: GO 44691
44721: POP
44722: POP
// buildings := GetBaseBuildings ( base , area ) ;
44723: LD_ADDR_VAR 0 18
44727: PUSH
44728: LD_VAR 0 15
44732: PPUSH
44733: LD_VAR 0 2
44737: PPUSH
44738: CALL 44015 0 2
44742: ST_TO_ADDR
// InitHc ;
44743: CALL_OW 19
// InitUc ;
44747: CALL_OW 18
// uc_side := side ;
44751: LD_ADDR_OWVAR 20
44755: PUSH
44756: LD_VAR 0 16
44760: ST_TO_ADDR
// uc_nation := nation ;
44761: LD_ADDR_OWVAR 21
44765: PUSH
44766: LD_VAR 0 17
44770: ST_TO_ADDR
// if buildings then
44771: LD_VAR 0 18
44775: IFFALSE 46097
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44777: LD_ADDR_VAR 0 19
44781: PUSH
44782: LD_VAR 0 18
44786: PPUSH
44787: LD_INT 2
44789: PUSH
44790: LD_INT 30
44792: PUSH
44793: LD_INT 29
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 30
44802: PUSH
44803: LD_INT 30
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: PPUSH
44815: CALL_OW 72
44819: ST_TO_ADDR
// if tmp then
44820: LD_VAR 0 19
44824: IFFALSE 44872
// for i in tmp do
44826: LD_ADDR_VAR 0 8
44830: PUSH
44831: LD_VAR 0 19
44835: PUSH
44836: FOR_IN
44837: IFFALSE 44870
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44839: LD_VAR 0 8
44843: PPUSH
44844: CALL_OW 250
44848: PPUSH
44849: LD_VAR 0 8
44853: PPUSH
44854: CALL_OW 251
44858: PPUSH
44859: LD_VAR 0 16
44863: PPUSH
44864: CALL_OW 441
44868: GO 44836
44870: POP
44871: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44872: LD_VAR 0 18
44876: PPUSH
44877: LD_INT 2
44879: PUSH
44880: LD_INT 30
44882: PUSH
44883: LD_INT 32
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 30
44892: PUSH
44893: LD_INT 33
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: LIST
44904: PPUSH
44905: CALL_OW 72
44909: IFFALSE 44997
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44911: LD_ADDR_VAR 0 8
44915: PUSH
44916: LD_VAR 0 18
44920: PPUSH
44921: LD_INT 2
44923: PUSH
44924: LD_INT 30
44926: PUSH
44927: LD_INT 32
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 30
44936: PUSH
44937: LD_INT 33
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: PPUSH
44949: CALL_OW 72
44953: PUSH
44954: FOR_IN
44955: IFFALSE 44995
// begin if not GetBWeapon ( i ) then
44957: LD_VAR 0 8
44961: PPUSH
44962: CALL_OW 269
44966: NOT
44967: IFFALSE 44993
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44969: LD_VAR 0 8
44973: PPUSH
44974: LD_VAR 0 8
44978: PPUSH
44979: LD_VAR 0 2
44983: PPUSH
44984: CALL 46243 0 2
44988: PPUSH
44989: CALL_OW 431
// end ;
44993: GO 44954
44995: POP
44996: POP
// end ; for i = 1 to personel do
44997: LD_ADDR_VAR 0 8
45001: PUSH
45002: DOUBLE
45003: LD_INT 1
45005: DEC
45006: ST_TO_ADDR
45007: LD_VAR 0 6
45011: PUSH
45012: FOR_TO
45013: IFFALSE 46077
// begin if i > 4 then
45015: LD_VAR 0 8
45019: PUSH
45020: LD_INT 4
45022: GREATER
45023: IFFALSE 45027
// break ;
45025: GO 46077
// case i of 1 :
45027: LD_VAR 0 8
45031: PUSH
45032: LD_INT 1
45034: DOUBLE
45035: EQUAL
45036: IFTRUE 45040
45038: GO 45120
45040: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45041: LD_ADDR_VAR 0 12
45045: PUSH
45046: LD_VAR 0 18
45050: PPUSH
45051: LD_INT 22
45053: PUSH
45054: LD_VAR 0 16
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 58
45065: PUSH
45066: EMPTY
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: LD_INT 30
45074: PUSH
45075: LD_INT 32
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 30
45084: PUSH
45085: LD_INT 4
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 30
45094: PUSH
45095: LD_INT 5
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: PPUSH
45113: CALL_OW 72
45117: ST_TO_ADDR
45118: GO 45342
45120: LD_INT 2
45122: DOUBLE
45123: EQUAL
45124: IFTRUE 45128
45126: GO 45190
45128: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45129: LD_ADDR_VAR 0 12
45133: PUSH
45134: LD_VAR 0 18
45138: PPUSH
45139: LD_INT 22
45141: PUSH
45142: LD_VAR 0 16
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: LD_INT 30
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 30
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: LIST
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PPUSH
45183: CALL_OW 72
45187: ST_TO_ADDR
45188: GO 45342
45190: LD_INT 3
45192: DOUBLE
45193: EQUAL
45194: IFTRUE 45198
45196: GO 45260
45198: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45199: LD_ADDR_VAR 0 12
45203: PUSH
45204: LD_VAR 0 18
45208: PPUSH
45209: LD_INT 22
45211: PUSH
45212: LD_VAR 0 16
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 30
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 30
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: LIST
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PPUSH
45253: CALL_OW 72
45257: ST_TO_ADDR
45258: GO 45342
45260: LD_INT 4
45262: DOUBLE
45263: EQUAL
45264: IFTRUE 45268
45266: GO 45341
45268: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45269: LD_ADDR_VAR 0 12
45273: PUSH
45274: LD_VAR 0 18
45278: PPUSH
45279: LD_INT 22
45281: PUSH
45282: LD_VAR 0 16
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: LD_INT 30
45296: PUSH
45297: LD_INT 6
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 30
45306: PUSH
45307: LD_INT 7
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 30
45316: PUSH
45317: LD_INT 8
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PPUSH
45334: CALL_OW 72
45338: ST_TO_ADDR
45339: GO 45342
45341: POP
// if i = 1 then
45342: LD_VAR 0 8
45346: PUSH
45347: LD_INT 1
45349: EQUAL
45350: IFFALSE 45461
// begin tmp := [ ] ;
45352: LD_ADDR_VAR 0 19
45356: PUSH
45357: EMPTY
45358: ST_TO_ADDR
// for j in f do
45359: LD_ADDR_VAR 0 9
45363: PUSH
45364: LD_VAR 0 12
45368: PUSH
45369: FOR_IN
45370: IFFALSE 45443
// if GetBType ( j ) = b_bunker then
45372: LD_VAR 0 9
45376: PPUSH
45377: CALL_OW 266
45381: PUSH
45382: LD_INT 32
45384: EQUAL
45385: IFFALSE 45412
// tmp := Insert ( tmp , 1 , j ) else
45387: LD_ADDR_VAR 0 19
45391: PUSH
45392: LD_VAR 0 19
45396: PPUSH
45397: LD_INT 1
45399: PPUSH
45400: LD_VAR 0 9
45404: PPUSH
45405: CALL_OW 2
45409: ST_TO_ADDR
45410: GO 45441
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45412: LD_ADDR_VAR 0 19
45416: PUSH
45417: LD_VAR 0 19
45421: PPUSH
45422: LD_VAR 0 19
45426: PUSH
45427: LD_INT 1
45429: PLUS
45430: PPUSH
45431: LD_VAR 0 9
45435: PPUSH
45436: CALL_OW 2
45440: ST_TO_ADDR
45441: GO 45369
45443: POP
45444: POP
// if tmp then
45445: LD_VAR 0 19
45449: IFFALSE 45461
// f := tmp ;
45451: LD_ADDR_VAR 0 12
45455: PUSH
45456: LD_VAR 0 19
45460: ST_TO_ADDR
// end ; x := personel [ i ] ;
45461: LD_ADDR_VAR 0 13
45465: PUSH
45466: LD_VAR 0 6
45470: PUSH
45471: LD_VAR 0 8
45475: ARRAY
45476: ST_TO_ADDR
// if x = - 1 then
45477: LD_VAR 0 13
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: EQUAL
45486: IFFALSE 45695
// begin for j in f do
45488: LD_ADDR_VAR 0 9
45492: PUSH
45493: LD_VAR 0 12
45497: PUSH
45498: FOR_IN
45499: IFFALSE 45691
// repeat InitHc ;
45501: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45505: LD_VAR 0 9
45509: PPUSH
45510: CALL_OW 266
45514: PUSH
45515: LD_INT 5
45517: EQUAL
45518: IFFALSE 45588
// begin if UnitsInside ( j ) < 3 then
45520: LD_VAR 0 9
45524: PPUSH
45525: CALL_OW 313
45529: PUSH
45530: LD_INT 3
45532: LESS
45533: IFFALSE 45569
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45535: LD_INT 0
45537: PPUSH
45538: LD_INT 5
45540: PUSH
45541: LD_INT 8
45543: PUSH
45544: LD_INT 9
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: LIST
45551: PUSH
45552: LD_VAR 0 17
45556: ARRAY
45557: PPUSH
45558: LD_VAR 0 4
45562: PPUSH
45563: CALL_OW 380
45567: GO 45586
// PrepareHuman ( false , i , skill ) ;
45569: LD_INT 0
45571: PPUSH
45572: LD_VAR 0 8
45576: PPUSH
45577: LD_VAR 0 4
45581: PPUSH
45582: CALL_OW 380
// end else
45586: GO 45605
// PrepareHuman ( false , i , skill ) ;
45588: LD_INT 0
45590: PPUSH
45591: LD_VAR 0 8
45595: PPUSH
45596: LD_VAR 0 4
45600: PPUSH
45601: CALL_OW 380
// un := CreateHuman ;
45605: LD_ADDR_VAR 0 14
45609: PUSH
45610: CALL_OW 44
45614: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45615: LD_ADDR_VAR 0 7
45619: PUSH
45620: LD_VAR 0 7
45624: PPUSH
45625: LD_INT 1
45627: PPUSH
45628: LD_VAR 0 14
45632: PPUSH
45633: CALL_OW 2
45637: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45638: LD_VAR 0 14
45642: PPUSH
45643: LD_VAR 0 9
45647: PPUSH
45648: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45652: LD_VAR 0 9
45656: PPUSH
45657: CALL_OW 313
45661: PUSH
45662: LD_INT 6
45664: EQUAL
45665: PUSH
45666: LD_VAR 0 9
45670: PPUSH
45671: CALL_OW 266
45675: PUSH
45676: LD_INT 32
45678: PUSH
45679: LD_INT 31
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: IN
45686: OR
45687: IFFALSE 45501
45689: GO 45498
45691: POP
45692: POP
// end else
45693: GO 46075
// for j = 1 to x do
45695: LD_ADDR_VAR 0 9
45699: PUSH
45700: DOUBLE
45701: LD_INT 1
45703: DEC
45704: ST_TO_ADDR
45705: LD_VAR 0 13
45709: PUSH
45710: FOR_TO
45711: IFFALSE 46073
// begin InitHc ;
45713: CALL_OW 19
// if not f then
45717: LD_VAR 0 12
45721: NOT
45722: IFFALSE 45811
// begin PrepareHuman ( false , i , skill ) ;
45724: LD_INT 0
45726: PPUSH
45727: LD_VAR 0 8
45731: PPUSH
45732: LD_VAR 0 4
45736: PPUSH
45737: CALL_OW 380
// un := CreateHuman ;
45741: LD_ADDR_VAR 0 14
45745: PUSH
45746: CALL_OW 44
45750: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45751: LD_ADDR_VAR 0 7
45755: PUSH
45756: LD_VAR 0 7
45760: PPUSH
45761: LD_INT 1
45763: PPUSH
45764: LD_VAR 0 14
45768: PPUSH
45769: CALL_OW 2
45773: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45774: LD_VAR 0 14
45778: PPUSH
45779: LD_VAR 0 1
45783: PPUSH
45784: CALL_OW 250
45788: PPUSH
45789: LD_VAR 0 1
45793: PPUSH
45794: CALL_OW 251
45798: PPUSH
45799: LD_INT 10
45801: PPUSH
45802: LD_INT 0
45804: PPUSH
45805: CALL_OW 50
// continue ;
45809: GO 45710
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45811: LD_VAR 0 12
45815: PUSH
45816: LD_INT 1
45818: ARRAY
45819: PPUSH
45820: CALL_OW 313
45824: PUSH
45825: LD_VAR 0 12
45829: PUSH
45830: LD_INT 1
45832: ARRAY
45833: PPUSH
45834: CALL_OW 266
45838: PUSH
45839: LD_INT 32
45841: PUSH
45842: LD_INT 31
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: IN
45849: AND
45850: PUSH
45851: LD_VAR 0 12
45855: PUSH
45856: LD_INT 1
45858: ARRAY
45859: PPUSH
45860: CALL_OW 313
45864: PUSH
45865: LD_INT 6
45867: EQUAL
45868: OR
45869: IFFALSE 45889
// f := Delete ( f , 1 ) ;
45871: LD_ADDR_VAR 0 12
45875: PUSH
45876: LD_VAR 0 12
45880: PPUSH
45881: LD_INT 1
45883: PPUSH
45884: CALL_OW 3
45888: ST_TO_ADDR
// if not f then
45889: LD_VAR 0 12
45893: NOT
45894: IFFALSE 45912
// begin x := x + 2 ;
45896: LD_ADDR_VAR 0 13
45900: PUSH
45901: LD_VAR 0 13
45905: PUSH
45906: LD_INT 2
45908: PLUS
45909: ST_TO_ADDR
// continue ;
45910: GO 45710
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45912: LD_VAR 0 12
45916: PUSH
45917: LD_INT 1
45919: ARRAY
45920: PPUSH
45921: CALL_OW 266
45925: PUSH
45926: LD_INT 5
45928: EQUAL
45929: IFFALSE 46003
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45931: LD_VAR 0 12
45935: PUSH
45936: LD_INT 1
45938: ARRAY
45939: PPUSH
45940: CALL_OW 313
45944: PUSH
45945: LD_INT 3
45947: LESS
45948: IFFALSE 45984
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45950: LD_INT 0
45952: PPUSH
45953: LD_INT 5
45955: PUSH
45956: LD_INT 8
45958: PUSH
45959: LD_INT 9
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: PUSH
45967: LD_VAR 0 17
45971: ARRAY
45972: PPUSH
45973: LD_VAR 0 4
45977: PPUSH
45978: CALL_OW 380
45982: GO 46001
// PrepareHuman ( false , i , skill ) ;
45984: LD_INT 0
45986: PPUSH
45987: LD_VAR 0 8
45991: PPUSH
45992: LD_VAR 0 4
45996: PPUSH
45997: CALL_OW 380
// end else
46001: GO 46020
// PrepareHuman ( false , i , skill ) ;
46003: LD_INT 0
46005: PPUSH
46006: LD_VAR 0 8
46010: PPUSH
46011: LD_VAR 0 4
46015: PPUSH
46016: CALL_OW 380
// un := CreateHuman ;
46020: LD_ADDR_VAR 0 14
46024: PUSH
46025: CALL_OW 44
46029: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46030: LD_ADDR_VAR 0 7
46034: PUSH
46035: LD_VAR 0 7
46039: PPUSH
46040: LD_INT 1
46042: PPUSH
46043: LD_VAR 0 14
46047: PPUSH
46048: CALL_OW 2
46052: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46053: LD_VAR 0 14
46057: PPUSH
46058: LD_VAR 0 12
46062: PUSH
46063: LD_INT 1
46065: ARRAY
46066: PPUSH
46067: CALL_OW 52
// end ;
46071: GO 45710
46073: POP
46074: POP
// end ;
46075: GO 45012
46077: POP
46078: POP
// result := result ^ buildings ;
46079: LD_ADDR_VAR 0 7
46083: PUSH
46084: LD_VAR 0 7
46088: PUSH
46089: LD_VAR 0 18
46093: ADD
46094: ST_TO_ADDR
// end else
46095: GO 46238
// begin for i = 1 to personel do
46097: LD_ADDR_VAR 0 8
46101: PUSH
46102: DOUBLE
46103: LD_INT 1
46105: DEC
46106: ST_TO_ADDR
46107: LD_VAR 0 6
46111: PUSH
46112: FOR_TO
46113: IFFALSE 46236
// begin if i > 4 then
46115: LD_VAR 0 8
46119: PUSH
46120: LD_INT 4
46122: GREATER
46123: IFFALSE 46127
// break ;
46125: GO 46236
// x := personel [ i ] ;
46127: LD_ADDR_VAR 0 13
46131: PUSH
46132: LD_VAR 0 6
46136: PUSH
46137: LD_VAR 0 8
46141: ARRAY
46142: ST_TO_ADDR
// if x = - 1 then
46143: LD_VAR 0 13
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: EQUAL
46152: IFFALSE 46156
// continue ;
46154: GO 46112
// PrepareHuman ( false , i , skill ) ;
46156: LD_INT 0
46158: PPUSH
46159: LD_VAR 0 8
46163: PPUSH
46164: LD_VAR 0 4
46168: PPUSH
46169: CALL_OW 380
// un := CreateHuman ;
46173: LD_ADDR_VAR 0 14
46177: PUSH
46178: CALL_OW 44
46182: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46183: LD_VAR 0 14
46187: PPUSH
46188: LD_VAR 0 1
46192: PPUSH
46193: CALL_OW 250
46197: PPUSH
46198: LD_VAR 0 1
46202: PPUSH
46203: CALL_OW 251
46207: PPUSH
46208: LD_INT 10
46210: PPUSH
46211: LD_INT 0
46213: PPUSH
46214: CALL_OW 50
// result := result ^ un ;
46218: LD_ADDR_VAR 0 7
46222: PUSH
46223: LD_VAR 0 7
46227: PUSH
46228: LD_VAR 0 14
46232: ADD
46233: ST_TO_ADDR
// end ;
46234: GO 46112
46236: POP
46237: POP
// end ; end ;
46238: LD_VAR 0 7
46242: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46243: LD_INT 0
46245: PPUSH
46246: PPUSH
46247: PPUSH
46248: PPUSH
46249: PPUSH
46250: PPUSH
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
46260: PPUSH
// result := false ;
46261: LD_ADDR_VAR 0 3
46265: PUSH
46266: LD_INT 0
46268: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46269: LD_VAR 0 1
46273: NOT
46274: PUSH
46275: LD_VAR 0 1
46279: PPUSH
46280: CALL_OW 266
46284: PUSH
46285: LD_INT 32
46287: PUSH
46288: LD_INT 33
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: IN
46295: NOT
46296: OR
46297: IFFALSE 46301
// exit ;
46299: GO 47437
// nat := GetNation ( tower ) ;
46301: LD_ADDR_VAR 0 12
46305: PUSH
46306: LD_VAR 0 1
46310: PPUSH
46311: CALL_OW 248
46315: ST_TO_ADDR
// side := GetSide ( tower ) ;
46316: LD_ADDR_VAR 0 16
46320: PUSH
46321: LD_VAR 0 1
46325: PPUSH
46326: CALL_OW 255
46330: ST_TO_ADDR
// x := GetX ( tower ) ;
46331: LD_ADDR_VAR 0 10
46335: PUSH
46336: LD_VAR 0 1
46340: PPUSH
46341: CALL_OW 250
46345: ST_TO_ADDR
// y := GetY ( tower ) ;
46346: LD_ADDR_VAR 0 11
46350: PUSH
46351: LD_VAR 0 1
46355: PPUSH
46356: CALL_OW 251
46360: ST_TO_ADDR
// if not x or not y then
46361: LD_VAR 0 10
46365: NOT
46366: PUSH
46367: LD_VAR 0 11
46371: NOT
46372: OR
46373: IFFALSE 46377
// exit ;
46375: GO 47437
// weapon := 0 ;
46377: LD_ADDR_VAR 0 18
46381: PUSH
46382: LD_INT 0
46384: ST_TO_ADDR
// fac_list := [ ] ;
46385: LD_ADDR_VAR 0 17
46389: PUSH
46390: EMPTY
46391: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
46392: LD_ADDR_VAR 0 6
46396: PUSH
46397: LD_VAR 0 1
46401: PPUSH
46402: CALL_OW 274
46406: PPUSH
46407: LD_VAR 0 2
46411: PPUSH
46412: CALL 44015 0 2
46416: PPUSH
46417: LD_INT 30
46419: PUSH
46420: LD_INT 3
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PPUSH
46427: CALL_OW 72
46431: ST_TO_ADDR
// if not factories then
46432: LD_VAR 0 6
46436: NOT
46437: IFFALSE 46441
// exit ;
46439: GO 47437
// for i in factories do
46441: LD_ADDR_VAR 0 8
46445: PUSH
46446: LD_VAR 0 6
46450: PUSH
46451: FOR_IN
46452: IFFALSE 46477
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46454: LD_ADDR_VAR 0 17
46458: PUSH
46459: LD_VAR 0 17
46463: PUSH
46464: LD_VAR 0 8
46468: PPUSH
46469: CALL_OW 478
46473: UNION
46474: ST_TO_ADDR
46475: GO 46451
46477: POP
46478: POP
// if not fac_list then
46479: LD_VAR 0 17
46483: NOT
46484: IFFALSE 46488
// exit ;
46486: GO 47437
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46488: LD_ADDR_VAR 0 5
46492: PUSH
46493: LD_INT 4
46495: PUSH
46496: LD_INT 5
46498: PUSH
46499: LD_INT 9
46501: PUSH
46502: LD_INT 10
46504: PUSH
46505: LD_INT 6
46507: PUSH
46508: LD_INT 7
46510: PUSH
46511: LD_INT 11
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 27
46525: PUSH
46526: LD_INT 28
46528: PUSH
46529: LD_INT 26
46531: PUSH
46532: LD_INT 30
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 43
46543: PUSH
46544: LD_INT 44
46546: PUSH
46547: LD_INT 46
46549: PUSH
46550: LD_INT 45
46552: PUSH
46553: LD_INT 47
46555: PUSH
46556: LD_INT 49
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: LIST
46571: PUSH
46572: LD_VAR 0 12
46576: ARRAY
46577: ST_TO_ADDR
// for i in list do
46578: LD_ADDR_VAR 0 8
46582: PUSH
46583: LD_VAR 0 5
46587: PUSH
46588: FOR_IN
46589: IFFALSE 46622
// if not i in fac_list then
46591: LD_VAR 0 8
46595: PUSH
46596: LD_VAR 0 17
46600: IN
46601: NOT
46602: IFFALSE 46620
// list := list diff i ;
46604: LD_ADDR_VAR 0 5
46608: PUSH
46609: LD_VAR 0 5
46613: PUSH
46614: LD_VAR 0 8
46618: DIFF
46619: ST_TO_ADDR
46620: GO 46588
46622: POP
46623: POP
// if not list then
46624: LD_VAR 0 5
46628: NOT
46629: IFFALSE 46633
// exit ;
46631: GO 47437
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46633: LD_VAR 0 12
46637: PUSH
46638: LD_INT 3
46640: EQUAL
46641: PUSH
46642: LD_INT 49
46644: PUSH
46645: LD_VAR 0 5
46649: IN
46650: AND
46651: PUSH
46652: LD_INT 31
46654: PPUSH
46655: LD_VAR 0 16
46659: PPUSH
46660: CALL_OW 321
46664: PUSH
46665: LD_INT 2
46667: EQUAL
46668: AND
46669: IFFALSE 46729
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46671: LD_INT 22
46673: PUSH
46674: LD_VAR 0 16
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 35
46685: PUSH
46686: LD_INT 49
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 91
46695: PUSH
46696: LD_VAR 0 1
46700: PUSH
46701: LD_INT 10
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: LIST
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: LIST
46713: PPUSH
46714: CALL_OW 69
46718: NOT
46719: IFFALSE 46729
// weapon := ru_time_lapser ;
46721: LD_ADDR_VAR 0 18
46725: PUSH
46726: LD_INT 49
46728: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46729: LD_VAR 0 12
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: IN
46744: PUSH
46745: LD_INT 11
46747: PUSH
46748: LD_VAR 0 5
46752: IN
46753: PUSH
46754: LD_INT 30
46756: PUSH
46757: LD_VAR 0 5
46761: IN
46762: OR
46763: AND
46764: PUSH
46765: LD_INT 6
46767: PPUSH
46768: LD_VAR 0 16
46772: PPUSH
46773: CALL_OW 321
46777: PUSH
46778: LD_INT 2
46780: EQUAL
46781: AND
46782: IFFALSE 46947
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46784: LD_INT 22
46786: PUSH
46787: LD_VAR 0 16
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: LD_INT 35
46801: PUSH
46802: LD_INT 11
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 35
46811: PUSH
46812: LD_INT 30
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 91
46826: PUSH
46827: LD_VAR 0 1
46831: PUSH
46832: LD_INT 18
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: LIST
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: LIST
46844: PPUSH
46845: CALL_OW 69
46849: NOT
46850: PUSH
46851: LD_INT 22
46853: PUSH
46854: LD_VAR 0 16
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: LD_INT 30
46868: PUSH
46869: LD_INT 32
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 30
46878: PUSH
46879: LD_INT 33
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 91
46893: PUSH
46894: LD_VAR 0 1
46898: PUSH
46899: LD_INT 12
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: LIST
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: LIST
46911: PUSH
46912: EMPTY
46913: LIST
46914: PPUSH
46915: CALL_OW 69
46919: PUSH
46920: LD_INT 2
46922: GREATER
46923: AND
46924: IFFALSE 46947
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46926: LD_ADDR_VAR 0 18
46930: PUSH
46931: LD_INT 11
46933: PUSH
46934: LD_INT 30
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_VAR 0 12
46945: ARRAY
46946: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46947: LD_VAR 0 18
46951: NOT
46952: PUSH
46953: LD_INT 40
46955: PPUSH
46956: LD_VAR 0 16
46960: PPUSH
46961: CALL_OW 321
46965: PUSH
46966: LD_INT 2
46968: EQUAL
46969: AND
46970: PUSH
46971: LD_INT 7
46973: PUSH
46974: LD_VAR 0 5
46978: IN
46979: PUSH
46980: LD_INT 28
46982: PUSH
46983: LD_VAR 0 5
46987: IN
46988: OR
46989: PUSH
46990: LD_INT 45
46992: PUSH
46993: LD_VAR 0 5
46997: IN
46998: OR
46999: AND
47000: IFFALSE 47254
// begin hex := GetHexInfo ( x , y ) ;
47002: LD_ADDR_VAR 0 4
47006: PUSH
47007: LD_VAR 0 10
47011: PPUSH
47012: LD_VAR 0 11
47016: PPUSH
47017: CALL_OW 546
47021: ST_TO_ADDR
// if hex [ 1 ] then
47022: LD_VAR 0 4
47026: PUSH
47027: LD_INT 1
47029: ARRAY
47030: IFFALSE 47034
// exit ;
47032: GO 47437
// height := hex [ 2 ] ;
47034: LD_ADDR_VAR 0 15
47038: PUSH
47039: LD_VAR 0 4
47043: PUSH
47044: LD_INT 2
47046: ARRAY
47047: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47048: LD_ADDR_VAR 0 14
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: LD_INT 3
47061: PUSH
47062: LD_INT 5
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: ST_TO_ADDR
// for i in tmp do
47071: LD_ADDR_VAR 0 8
47075: PUSH
47076: LD_VAR 0 14
47080: PUSH
47081: FOR_IN
47082: IFFALSE 47252
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47084: LD_ADDR_VAR 0 9
47088: PUSH
47089: LD_VAR 0 10
47093: PPUSH
47094: LD_VAR 0 8
47098: PPUSH
47099: LD_INT 5
47101: PPUSH
47102: CALL_OW 272
47106: PUSH
47107: LD_VAR 0 11
47111: PPUSH
47112: LD_VAR 0 8
47116: PPUSH
47117: LD_INT 5
47119: PPUSH
47120: CALL_OW 273
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47129: LD_VAR 0 9
47133: PUSH
47134: LD_INT 1
47136: ARRAY
47137: PPUSH
47138: LD_VAR 0 9
47142: PUSH
47143: LD_INT 2
47145: ARRAY
47146: PPUSH
47147: CALL_OW 488
47151: IFFALSE 47250
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47153: LD_ADDR_VAR 0 4
47157: PUSH
47158: LD_VAR 0 9
47162: PUSH
47163: LD_INT 1
47165: ARRAY
47166: PPUSH
47167: LD_VAR 0 9
47171: PUSH
47172: LD_INT 2
47174: ARRAY
47175: PPUSH
47176: CALL_OW 546
47180: ST_TO_ADDR
// if hex [ 1 ] then
47181: LD_VAR 0 4
47185: PUSH
47186: LD_INT 1
47188: ARRAY
47189: IFFALSE 47193
// continue ;
47191: GO 47081
// h := hex [ 2 ] ;
47193: LD_ADDR_VAR 0 13
47197: PUSH
47198: LD_VAR 0 4
47202: PUSH
47203: LD_INT 2
47205: ARRAY
47206: ST_TO_ADDR
// if h + 7 < height then
47207: LD_VAR 0 13
47211: PUSH
47212: LD_INT 7
47214: PLUS
47215: PUSH
47216: LD_VAR 0 15
47220: LESS
47221: IFFALSE 47250
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47223: LD_ADDR_VAR 0 18
47227: PUSH
47228: LD_INT 7
47230: PUSH
47231: LD_INT 28
47233: PUSH
47234: LD_INT 45
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: LIST
47241: PUSH
47242: LD_VAR 0 12
47246: ARRAY
47247: ST_TO_ADDR
// break ;
47248: GO 47252
// end ; end ; end ;
47250: GO 47081
47252: POP
47253: POP
// end ; if not weapon then
47254: LD_VAR 0 18
47258: NOT
47259: IFFALSE 47319
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47261: LD_ADDR_VAR 0 5
47265: PUSH
47266: LD_VAR 0 5
47270: PUSH
47271: LD_INT 11
47273: PUSH
47274: LD_INT 30
47276: PUSH
47277: LD_INT 49
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: LIST
47284: DIFF
47285: ST_TO_ADDR
// if not list then
47286: LD_VAR 0 5
47290: NOT
47291: IFFALSE 47295
// exit ;
47293: GO 47437
// weapon := list [ rand ( 1 , list ) ] ;
47295: LD_ADDR_VAR 0 18
47299: PUSH
47300: LD_VAR 0 5
47304: PUSH
47305: LD_INT 1
47307: PPUSH
47308: LD_VAR 0 5
47312: PPUSH
47313: CALL_OW 12
47317: ARRAY
47318: ST_TO_ADDR
// end ; if weapon then
47319: LD_VAR 0 18
47323: IFFALSE 47437
// begin tmp := CostOfWeapon ( weapon ) ;
47325: LD_ADDR_VAR 0 14
47329: PUSH
47330: LD_VAR 0 18
47334: PPUSH
47335: CALL_OW 451
47339: ST_TO_ADDR
// j := GetBase ( tower ) ;
47340: LD_ADDR_VAR 0 9
47344: PUSH
47345: LD_VAR 0 1
47349: PPUSH
47350: CALL_OW 274
47354: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47355: LD_VAR 0 9
47359: PPUSH
47360: LD_INT 1
47362: PPUSH
47363: CALL_OW 275
47367: PUSH
47368: LD_VAR 0 14
47372: PUSH
47373: LD_INT 1
47375: ARRAY
47376: GREATEREQUAL
47377: PUSH
47378: LD_VAR 0 9
47382: PPUSH
47383: LD_INT 2
47385: PPUSH
47386: CALL_OW 275
47390: PUSH
47391: LD_VAR 0 14
47395: PUSH
47396: LD_INT 2
47398: ARRAY
47399: GREATEREQUAL
47400: AND
47401: PUSH
47402: LD_VAR 0 9
47406: PPUSH
47407: LD_INT 3
47409: PPUSH
47410: CALL_OW 275
47414: PUSH
47415: LD_VAR 0 14
47419: PUSH
47420: LD_INT 3
47422: ARRAY
47423: GREATEREQUAL
47424: AND
47425: IFFALSE 47437
// result := weapon ;
47427: LD_ADDR_VAR 0 3
47431: PUSH
47432: LD_VAR 0 18
47436: ST_TO_ADDR
// end ; end ;
47437: LD_VAR 0 3
47441: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47442: LD_INT 0
47444: PPUSH
47445: PPUSH
// result := true ;
47446: LD_ADDR_VAR 0 3
47450: PUSH
47451: LD_INT 1
47453: ST_TO_ADDR
// if array1 = array2 then
47454: LD_VAR 0 1
47458: PUSH
47459: LD_VAR 0 2
47463: EQUAL
47464: IFFALSE 47524
// begin for i = 1 to array1 do
47466: LD_ADDR_VAR 0 4
47470: PUSH
47471: DOUBLE
47472: LD_INT 1
47474: DEC
47475: ST_TO_ADDR
47476: LD_VAR 0 1
47480: PUSH
47481: FOR_TO
47482: IFFALSE 47520
// if array1 [ i ] <> array2 [ i ] then
47484: LD_VAR 0 1
47488: PUSH
47489: LD_VAR 0 4
47493: ARRAY
47494: PUSH
47495: LD_VAR 0 2
47499: PUSH
47500: LD_VAR 0 4
47504: ARRAY
47505: NONEQUAL
47506: IFFALSE 47518
// begin result := false ;
47508: LD_ADDR_VAR 0 3
47512: PUSH
47513: LD_INT 0
47515: ST_TO_ADDR
// break ;
47516: GO 47520
// end ;
47518: GO 47481
47520: POP
47521: POP
// end else
47522: GO 47532
// result := false ;
47524: LD_ADDR_VAR 0 3
47528: PUSH
47529: LD_INT 0
47531: ST_TO_ADDR
// end ;
47532: LD_VAR 0 3
47536: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47537: LD_INT 0
47539: PPUSH
47540: PPUSH
47541: PPUSH
// pom := GetBase ( fac ) ;
47542: LD_ADDR_VAR 0 5
47546: PUSH
47547: LD_VAR 0 1
47551: PPUSH
47552: CALL_OW 274
47556: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47557: LD_ADDR_VAR 0 4
47561: PUSH
47562: LD_VAR 0 2
47566: PUSH
47567: LD_INT 1
47569: ARRAY
47570: PPUSH
47571: LD_VAR 0 2
47575: PUSH
47576: LD_INT 2
47578: ARRAY
47579: PPUSH
47580: LD_VAR 0 2
47584: PUSH
47585: LD_INT 3
47587: ARRAY
47588: PPUSH
47589: LD_VAR 0 2
47593: PUSH
47594: LD_INT 4
47596: ARRAY
47597: PPUSH
47598: CALL_OW 449
47602: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47603: LD_ADDR_VAR 0 3
47607: PUSH
47608: LD_VAR 0 5
47612: PPUSH
47613: LD_INT 1
47615: PPUSH
47616: CALL_OW 275
47620: PUSH
47621: LD_VAR 0 4
47625: PUSH
47626: LD_INT 1
47628: ARRAY
47629: GREATEREQUAL
47630: PUSH
47631: LD_VAR 0 5
47635: PPUSH
47636: LD_INT 2
47638: PPUSH
47639: CALL_OW 275
47643: PUSH
47644: LD_VAR 0 4
47648: PUSH
47649: LD_INT 2
47651: ARRAY
47652: GREATEREQUAL
47653: AND
47654: PUSH
47655: LD_VAR 0 5
47659: PPUSH
47660: LD_INT 3
47662: PPUSH
47663: CALL_OW 275
47667: PUSH
47668: LD_VAR 0 4
47672: PUSH
47673: LD_INT 3
47675: ARRAY
47676: GREATEREQUAL
47677: AND
47678: ST_TO_ADDR
// end ;
47679: LD_VAR 0 3
47683: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47684: LD_INT 0
47686: PPUSH
47687: PPUSH
47688: PPUSH
47689: PPUSH
// pom := GetBase ( building ) ;
47690: LD_ADDR_VAR 0 3
47694: PUSH
47695: LD_VAR 0 1
47699: PPUSH
47700: CALL_OW 274
47704: ST_TO_ADDR
// if not pom then
47705: LD_VAR 0 3
47709: NOT
47710: IFFALSE 47714
// exit ;
47712: GO 47884
// btype := GetBType ( building ) ;
47714: LD_ADDR_VAR 0 5
47718: PUSH
47719: LD_VAR 0 1
47723: PPUSH
47724: CALL_OW 266
47728: ST_TO_ADDR
// if btype = b_armoury then
47729: LD_VAR 0 5
47733: PUSH
47734: LD_INT 4
47736: EQUAL
47737: IFFALSE 47747
// btype := b_barracks ;
47739: LD_ADDR_VAR 0 5
47743: PUSH
47744: LD_INT 5
47746: ST_TO_ADDR
// if btype = b_depot then
47747: LD_VAR 0 5
47751: PUSH
47752: LD_INT 0
47754: EQUAL
47755: IFFALSE 47765
// btype := b_warehouse ;
47757: LD_ADDR_VAR 0 5
47761: PUSH
47762: LD_INT 1
47764: ST_TO_ADDR
// if btype = b_workshop then
47765: LD_VAR 0 5
47769: PUSH
47770: LD_INT 2
47772: EQUAL
47773: IFFALSE 47783
// btype := b_factory ;
47775: LD_ADDR_VAR 0 5
47779: PUSH
47780: LD_INT 3
47782: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47783: LD_ADDR_VAR 0 4
47787: PUSH
47788: LD_VAR 0 5
47792: PPUSH
47793: LD_VAR 0 1
47797: PPUSH
47798: CALL_OW 248
47802: PPUSH
47803: CALL_OW 450
47807: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47808: LD_ADDR_VAR 0 2
47812: PUSH
47813: LD_VAR 0 3
47817: PPUSH
47818: LD_INT 1
47820: PPUSH
47821: CALL_OW 275
47825: PUSH
47826: LD_VAR 0 4
47830: PUSH
47831: LD_INT 1
47833: ARRAY
47834: GREATEREQUAL
47835: PUSH
47836: LD_VAR 0 3
47840: PPUSH
47841: LD_INT 2
47843: PPUSH
47844: CALL_OW 275
47848: PUSH
47849: LD_VAR 0 4
47853: PUSH
47854: LD_INT 2
47856: ARRAY
47857: GREATEREQUAL
47858: AND
47859: PUSH
47860: LD_VAR 0 3
47864: PPUSH
47865: LD_INT 3
47867: PPUSH
47868: CALL_OW 275
47872: PUSH
47873: LD_VAR 0 4
47877: PUSH
47878: LD_INT 3
47880: ARRAY
47881: GREATEREQUAL
47882: AND
47883: ST_TO_ADDR
// end ;
47884: LD_VAR 0 2
47888: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47889: LD_INT 0
47891: PPUSH
47892: PPUSH
47893: PPUSH
// pom := GetBase ( building ) ;
47894: LD_ADDR_VAR 0 4
47898: PUSH
47899: LD_VAR 0 1
47903: PPUSH
47904: CALL_OW 274
47908: ST_TO_ADDR
// if not pom then
47909: LD_VAR 0 4
47913: NOT
47914: IFFALSE 47918
// exit ;
47916: GO 48019
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47918: LD_ADDR_VAR 0 5
47922: PUSH
47923: LD_VAR 0 2
47927: PPUSH
47928: LD_VAR 0 1
47932: PPUSH
47933: CALL_OW 248
47937: PPUSH
47938: CALL_OW 450
47942: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47943: LD_ADDR_VAR 0 3
47947: PUSH
47948: LD_VAR 0 4
47952: PPUSH
47953: LD_INT 1
47955: PPUSH
47956: CALL_OW 275
47960: PUSH
47961: LD_VAR 0 5
47965: PUSH
47966: LD_INT 1
47968: ARRAY
47969: GREATEREQUAL
47970: PUSH
47971: LD_VAR 0 4
47975: PPUSH
47976: LD_INT 2
47978: PPUSH
47979: CALL_OW 275
47983: PUSH
47984: LD_VAR 0 5
47988: PUSH
47989: LD_INT 2
47991: ARRAY
47992: GREATEREQUAL
47993: AND
47994: PUSH
47995: LD_VAR 0 4
47999: PPUSH
48000: LD_INT 3
48002: PPUSH
48003: CALL_OW 275
48007: PUSH
48008: LD_VAR 0 5
48012: PUSH
48013: LD_INT 3
48015: ARRAY
48016: GREATEREQUAL
48017: AND
48018: ST_TO_ADDR
// end ;
48019: LD_VAR 0 3
48023: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
48024: LD_INT 0
48026: PPUSH
48027: PPUSH
48028: PPUSH
48029: PPUSH
48030: PPUSH
48031: PPUSH
48032: PPUSH
48033: PPUSH
48034: PPUSH
48035: PPUSH
// result := false ;
48036: LD_ADDR_VAR 0 6
48040: PUSH
48041: LD_INT 0
48043: ST_TO_ADDR
// if not base or not btype or not x or not y then
48044: LD_VAR 0 1
48048: NOT
48049: PUSH
48050: LD_VAR 0 2
48054: NOT
48055: OR
48056: PUSH
48057: LD_VAR 0 3
48061: NOT
48062: OR
48063: PUSH
48064: LD_VAR 0 4
48068: NOT
48069: OR
48070: IFFALSE 48074
// exit ;
48072: GO 48683
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
48074: LD_ADDR_VAR 0 12
48078: PUSH
48079: LD_VAR 0 2
48083: PPUSH
48084: LD_VAR 0 3
48088: PPUSH
48089: LD_VAR 0 4
48093: PPUSH
48094: LD_VAR 0 5
48098: PPUSH
48099: LD_VAR 0 1
48103: PUSH
48104: LD_INT 1
48106: ARRAY
48107: PPUSH
48108: CALL_OW 248
48112: PPUSH
48113: LD_INT 0
48115: PPUSH
48116: CALL 49520 0 6
48120: ST_TO_ADDR
// if not hexes then
48121: LD_VAR 0 12
48125: NOT
48126: IFFALSE 48130
// exit ;
48128: GO 48683
// for i = 1 to hexes do
48130: LD_ADDR_VAR 0 7
48134: PUSH
48135: DOUBLE
48136: LD_INT 1
48138: DEC
48139: ST_TO_ADDR
48140: LD_VAR 0 12
48144: PUSH
48145: FOR_TO
48146: IFFALSE 48681
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48148: LD_ADDR_VAR 0 11
48152: PUSH
48153: LD_VAR 0 12
48157: PUSH
48158: LD_VAR 0 7
48162: ARRAY
48163: PUSH
48164: LD_INT 1
48166: ARRAY
48167: PPUSH
48168: LD_VAR 0 12
48172: PUSH
48173: LD_VAR 0 7
48177: ARRAY
48178: PUSH
48179: LD_INT 2
48181: ARRAY
48182: PPUSH
48183: CALL_OW 428
48187: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48188: LD_VAR 0 12
48192: PUSH
48193: LD_VAR 0 7
48197: ARRAY
48198: PUSH
48199: LD_INT 1
48201: ARRAY
48202: PPUSH
48203: LD_VAR 0 12
48207: PUSH
48208: LD_VAR 0 7
48212: ARRAY
48213: PUSH
48214: LD_INT 2
48216: ARRAY
48217: PPUSH
48218: CALL_OW 351
48222: PUSH
48223: LD_VAR 0 12
48227: PUSH
48228: LD_VAR 0 7
48232: ARRAY
48233: PUSH
48234: LD_INT 1
48236: ARRAY
48237: PPUSH
48238: LD_VAR 0 12
48242: PUSH
48243: LD_VAR 0 7
48247: ARRAY
48248: PUSH
48249: LD_INT 2
48251: ARRAY
48252: PPUSH
48253: CALL_OW 488
48257: NOT
48258: OR
48259: PUSH
48260: LD_VAR 0 11
48264: PPUSH
48265: CALL_OW 247
48269: PUSH
48270: LD_INT 3
48272: EQUAL
48273: OR
48274: IFFALSE 48280
// exit ;
48276: POP
48277: POP
48278: GO 48683
// if not tmp or not tmp in base then
48280: LD_VAR 0 11
48284: NOT
48285: PUSH
48286: LD_VAR 0 11
48290: PUSH
48291: LD_VAR 0 1
48295: IN
48296: NOT
48297: OR
48298: IFFALSE 48302
// continue ;
48300: GO 48145
// result := true ;
48302: LD_ADDR_VAR 0 6
48306: PUSH
48307: LD_INT 1
48309: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48310: LD_ADDR_VAR 0 15
48314: PUSH
48315: LD_VAR 0 1
48319: PPUSH
48320: LD_INT 22
48322: PUSH
48323: LD_VAR 0 11
48327: PPUSH
48328: CALL_OW 255
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: LD_INT 30
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 30
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: LIST
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PPUSH
48369: CALL_OW 72
48373: ST_TO_ADDR
// if dep then
48374: LD_VAR 0 15
48378: IFFALSE 48514
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48380: LD_ADDR_VAR 0 14
48384: PUSH
48385: LD_VAR 0 15
48389: PUSH
48390: LD_INT 1
48392: ARRAY
48393: PPUSH
48394: CALL_OW 250
48398: PPUSH
48399: LD_VAR 0 15
48403: PUSH
48404: LD_INT 1
48406: ARRAY
48407: PPUSH
48408: CALL_OW 254
48412: PPUSH
48413: LD_INT 5
48415: PPUSH
48416: CALL_OW 272
48420: PUSH
48421: LD_VAR 0 15
48425: PUSH
48426: LD_INT 1
48428: ARRAY
48429: PPUSH
48430: CALL_OW 251
48434: PPUSH
48435: LD_VAR 0 15
48439: PUSH
48440: LD_INT 1
48442: ARRAY
48443: PPUSH
48444: CALL_OW 254
48448: PPUSH
48449: LD_INT 5
48451: PPUSH
48452: CALL_OW 273
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48461: LD_VAR 0 14
48465: PUSH
48466: LD_INT 1
48468: ARRAY
48469: PPUSH
48470: LD_VAR 0 14
48474: PUSH
48475: LD_INT 2
48477: ARRAY
48478: PPUSH
48479: CALL_OW 488
48483: IFFALSE 48514
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48485: LD_VAR 0 11
48489: PPUSH
48490: LD_VAR 0 14
48494: PUSH
48495: LD_INT 1
48497: ARRAY
48498: PPUSH
48499: LD_VAR 0 14
48503: PUSH
48504: LD_INT 2
48506: ARRAY
48507: PPUSH
48508: CALL_OW 111
// continue ;
48512: GO 48145
// end ; end ; r := GetDir ( tmp ) ;
48514: LD_ADDR_VAR 0 13
48518: PUSH
48519: LD_VAR 0 11
48523: PPUSH
48524: CALL_OW 254
48528: ST_TO_ADDR
// if r = 5 then
48529: LD_VAR 0 13
48533: PUSH
48534: LD_INT 5
48536: EQUAL
48537: IFFALSE 48547
// r := 0 ;
48539: LD_ADDR_VAR 0 13
48543: PUSH
48544: LD_INT 0
48546: ST_TO_ADDR
// for j = r to 5 do
48547: LD_ADDR_VAR 0 8
48551: PUSH
48552: DOUBLE
48553: LD_VAR 0 13
48557: DEC
48558: ST_TO_ADDR
48559: LD_INT 5
48561: PUSH
48562: FOR_TO
48563: IFFALSE 48677
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48565: LD_ADDR_VAR 0 9
48569: PUSH
48570: LD_VAR 0 11
48574: PPUSH
48575: CALL_OW 250
48579: PPUSH
48580: LD_VAR 0 8
48584: PPUSH
48585: LD_INT 2
48587: PPUSH
48588: CALL_OW 272
48592: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48593: LD_ADDR_VAR 0 10
48597: PUSH
48598: LD_VAR 0 11
48602: PPUSH
48603: CALL_OW 251
48607: PPUSH
48608: LD_VAR 0 8
48612: PPUSH
48613: LD_INT 2
48615: PPUSH
48616: CALL_OW 273
48620: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48621: LD_VAR 0 9
48625: PPUSH
48626: LD_VAR 0 10
48630: PPUSH
48631: CALL_OW 488
48635: PUSH
48636: LD_VAR 0 9
48640: PPUSH
48641: LD_VAR 0 10
48645: PPUSH
48646: CALL_OW 428
48650: NOT
48651: AND
48652: IFFALSE 48675
// begin ComMoveXY ( tmp , _x , _y ) ;
48654: LD_VAR 0 11
48658: PPUSH
48659: LD_VAR 0 9
48663: PPUSH
48664: LD_VAR 0 10
48668: PPUSH
48669: CALL_OW 111
// break ;
48673: GO 48677
// end ; end ;
48675: GO 48562
48677: POP
48678: POP
// end ;
48679: GO 48145
48681: POP
48682: POP
// end ;
48683: LD_VAR 0 6
48687: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48688: LD_INT 0
48690: PPUSH
48691: PPUSH
48692: PPUSH
48693: PPUSH
48694: PPUSH
48695: PPUSH
48696: PPUSH
48697: PPUSH
48698: PPUSH
48699: PPUSH
// result := false ;
48700: LD_ADDR_VAR 0 6
48704: PUSH
48705: LD_INT 0
48707: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48708: LD_VAR 0 1
48712: NOT
48713: PUSH
48714: LD_VAR 0 1
48718: PPUSH
48719: CALL_OW 266
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: IN
48734: NOT
48735: OR
48736: PUSH
48737: LD_VAR 0 2
48741: NOT
48742: OR
48743: PUSH
48744: LD_VAR 0 5
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: LD_INT 3
48760: PUSH
48761: LD_INT 4
48763: PUSH
48764: LD_INT 5
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: IN
48775: NOT
48776: OR
48777: PUSH
48778: LD_VAR 0 3
48782: PPUSH
48783: LD_VAR 0 4
48787: PPUSH
48788: CALL_OW 488
48792: NOT
48793: OR
48794: IFFALSE 48798
// exit ;
48796: GO 49515
// pom := GetBase ( depot ) ;
48798: LD_ADDR_VAR 0 10
48802: PUSH
48803: LD_VAR 0 1
48807: PPUSH
48808: CALL_OW 274
48812: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48813: LD_ADDR_VAR 0 11
48817: PUSH
48818: LD_VAR 0 2
48822: PPUSH
48823: LD_VAR 0 1
48827: PPUSH
48828: CALL_OW 248
48832: PPUSH
48833: CALL_OW 450
48837: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48838: LD_VAR 0 10
48842: PPUSH
48843: LD_INT 1
48845: PPUSH
48846: CALL_OW 275
48850: PUSH
48851: LD_VAR 0 11
48855: PUSH
48856: LD_INT 1
48858: ARRAY
48859: GREATEREQUAL
48860: PUSH
48861: LD_VAR 0 10
48865: PPUSH
48866: LD_INT 2
48868: PPUSH
48869: CALL_OW 275
48873: PUSH
48874: LD_VAR 0 11
48878: PUSH
48879: LD_INT 2
48881: ARRAY
48882: GREATEREQUAL
48883: AND
48884: PUSH
48885: LD_VAR 0 10
48889: PPUSH
48890: LD_INT 3
48892: PPUSH
48893: CALL_OW 275
48897: PUSH
48898: LD_VAR 0 11
48902: PUSH
48903: LD_INT 3
48905: ARRAY
48906: GREATEREQUAL
48907: AND
48908: NOT
48909: IFFALSE 48913
// exit ;
48911: GO 49515
// if GetBType ( depot ) = b_depot then
48913: LD_VAR 0 1
48917: PPUSH
48918: CALL_OW 266
48922: PUSH
48923: LD_INT 0
48925: EQUAL
48926: IFFALSE 48938
// dist := 28 else
48928: LD_ADDR_VAR 0 14
48932: PUSH
48933: LD_INT 28
48935: ST_TO_ADDR
48936: GO 48946
// dist := 36 ;
48938: LD_ADDR_VAR 0 14
48942: PUSH
48943: LD_INT 36
48945: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48946: LD_VAR 0 1
48950: PPUSH
48951: LD_VAR 0 3
48955: PPUSH
48956: LD_VAR 0 4
48960: PPUSH
48961: CALL_OW 297
48965: PUSH
48966: LD_VAR 0 14
48970: GREATER
48971: IFFALSE 48975
// exit ;
48973: GO 49515
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48975: LD_ADDR_VAR 0 12
48979: PUSH
48980: LD_VAR 0 2
48984: PPUSH
48985: LD_VAR 0 3
48989: PPUSH
48990: LD_VAR 0 4
48994: PPUSH
48995: LD_VAR 0 5
48999: PPUSH
49000: LD_VAR 0 1
49004: PPUSH
49005: CALL_OW 248
49009: PPUSH
49010: LD_INT 0
49012: PPUSH
49013: CALL 49520 0 6
49017: ST_TO_ADDR
// if not hexes then
49018: LD_VAR 0 12
49022: NOT
49023: IFFALSE 49027
// exit ;
49025: GO 49515
// hex := GetHexInfo ( x , y ) ;
49027: LD_ADDR_VAR 0 15
49031: PUSH
49032: LD_VAR 0 3
49036: PPUSH
49037: LD_VAR 0 4
49041: PPUSH
49042: CALL_OW 546
49046: ST_TO_ADDR
// if hex [ 1 ] then
49047: LD_VAR 0 15
49051: PUSH
49052: LD_INT 1
49054: ARRAY
49055: IFFALSE 49059
// exit ;
49057: GO 49515
// height := hex [ 2 ] ;
49059: LD_ADDR_VAR 0 13
49063: PUSH
49064: LD_VAR 0 15
49068: PUSH
49069: LD_INT 2
49071: ARRAY
49072: ST_TO_ADDR
// for i = 1 to hexes do
49073: LD_ADDR_VAR 0 7
49077: PUSH
49078: DOUBLE
49079: LD_INT 1
49081: DEC
49082: ST_TO_ADDR
49083: LD_VAR 0 12
49087: PUSH
49088: FOR_TO
49089: IFFALSE 49419
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49091: LD_VAR 0 12
49095: PUSH
49096: LD_VAR 0 7
49100: ARRAY
49101: PUSH
49102: LD_INT 1
49104: ARRAY
49105: PPUSH
49106: LD_VAR 0 12
49110: PUSH
49111: LD_VAR 0 7
49115: ARRAY
49116: PUSH
49117: LD_INT 2
49119: ARRAY
49120: PPUSH
49121: CALL_OW 488
49125: NOT
49126: PUSH
49127: LD_VAR 0 12
49131: PUSH
49132: LD_VAR 0 7
49136: ARRAY
49137: PUSH
49138: LD_INT 1
49140: ARRAY
49141: PPUSH
49142: LD_VAR 0 12
49146: PUSH
49147: LD_VAR 0 7
49151: ARRAY
49152: PUSH
49153: LD_INT 2
49155: ARRAY
49156: PPUSH
49157: CALL_OW 428
49161: PUSH
49162: LD_INT 0
49164: GREATER
49165: OR
49166: PUSH
49167: LD_VAR 0 12
49171: PUSH
49172: LD_VAR 0 7
49176: ARRAY
49177: PUSH
49178: LD_INT 1
49180: ARRAY
49181: PPUSH
49182: LD_VAR 0 12
49186: PUSH
49187: LD_VAR 0 7
49191: ARRAY
49192: PUSH
49193: LD_INT 2
49195: ARRAY
49196: PPUSH
49197: CALL_OW 351
49201: OR
49202: IFFALSE 49208
// exit ;
49204: POP
49205: POP
49206: GO 49515
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49208: LD_ADDR_VAR 0 8
49212: PUSH
49213: LD_VAR 0 12
49217: PUSH
49218: LD_VAR 0 7
49222: ARRAY
49223: PUSH
49224: LD_INT 1
49226: ARRAY
49227: PPUSH
49228: LD_VAR 0 12
49232: PUSH
49233: LD_VAR 0 7
49237: ARRAY
49238: PUSH
49239: LD_INT 2
49241: ARRAY
49242: PPUSH
49243: CALL_OW 546
49247: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49248: LD_VAR 0 8
49252: PUSH
49253: LD_INT 1
49255: ARRAY
49256: PUSH
49257: LD_VAR 0 8
49261: PUSH
49262: LD_INT 2
49264: ARRAY
49265: PUSH
49266: LD_VAR 0 13
49270: PUSH
49271: LD_INT 2
49273: PLUS
49274: GREATER
49275: OR
49276: PUSH
49277: LD_VAR 0 8
49281: PUSH
49282: LD_INT 2
49284: ARRAY
49285: PUSH
49286: LD_VAR 0 13
49290: PUSH
49291: LD_INT 2
49293: MINUS
49294: LESS
49295: OR
49296: PUSH
49297: LD_VAR 0 8
49301: PUSH
49302: LD_INT 3
49304: ARRAY
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 8
49311: PUSH
49312: LD_INT 9
49314: PUSH
49315: LD_INT 10
49317: PUSH
49318: LD_INT 11
49320: PUSH
49321: LD_INT 12
49323: PUSH
49324: LD_INT 13
49326: PUSH
49327: LD_INT 16
49329: PUSH
49330: LD_INT 17
49332: PUSH
49333: LD_INT 18
49335: PUSH
49336: LD_INT 19
49338: PUSH
49339: LD_INT 20
49341: PUSH
49342: LD_INT 21
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: IN
49360: NOT
49361: OR
49362: PUSH
49363: LD_VAR 0 8
49367: PUSH
49368: LD_INT 5
49370: ARRAY
49371: NOT
49372: OR
49373: PUSH
49374: LD_VAR 0 8
49378: PUSH
49379: LD_INT 6
49381: ARRAY
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: LD_INT 7
49391: PUSH
49392: LD_INT 9
49394: PUSH
49395: LD_INT 10
49397: PUSH
49398: LD_INT 11
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: IN
49409: NOT
49410: OR
49411: IFFALSE 49417
// exit ;
49413: POP
49414: POP
49415: GO 49515
// end ;
49417: GO 49088
49419: POP
49420: POP
// side := GetSide ( depot ) ;
49421: LD_ADDR_VAR 0 9
49425: PUSH
49426: LD_VAR 0 1
49430: PPUSH
49431: CALL_OW 255
49435: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49436: LD_VAR 0 9
49440: PPUSH
49441: LD_VAR 0 3
49445: PPUSH
49446: LD_VAR 0 4
49450: PPUSH
49451: LD_INT 20
49453: PPUSH
49454: CALL 42169 0 4
49458: PUSH
49459: LD_INT 4
49461: ARRAY
49462: IFFALSE 49466
// exit ;
49464: GO 49515
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49466: LD_VAR 0 2
49470: PUSH
49471: LD_INT 29
49473: PUSH
49474: LD_INT 30
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: IN
49481: PUSH
49482: LD_VAR 0 3
49486: PPUSH
49487: LD_VAR 0 4
49491: PPUSH
49492: LD_VAR 0 9
49496: PPUSH
49497: CALL_OW 440
49501: NOT
49502: AND
49503: IFFALSE 49507
// exit ;
49505: GO 49515
// result := true ;
49507: LD_ADDR_VAR 0 6
49511: PUSH
49512: LD_INT 1
49514: ST_TO_ADDR
// end ;
49515: LD_VAR 0 6
49519: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49520: LD_INT 0
49522: PPUSH
49523: PPUSH
49524: PPUSH
49525: PPUSH
49526: PPUSH
49527: PPUSH
49528: PPUSH
49529: PPUSH
49530: PPUSH
49531: PPUSH
49532: PPUSH
49533: PPUSH
49534: PPUSH
49535: PPUSH
49536: PPUSH
49537: PPUSH
49538: PPUSH
49539: PPUSH
49540: PPUSH
49541: PPUSH
49542: PPUSH
49543: PPUSH
49544: PPUSH
49545: PPUSH
49546: PPUSH
49547: PPUSH
49548: PPUSH
49549: PPUSH
49550: PPUSH
49551: PPUSH
49552: PPUSH
49553: PPUSH
49554: PPUSH
49555: PPUSH
49556: PPUSH
49557: PPUSH
49558: PPUSH
49559: PPUSH
49560: PPUSH
49561: PPUSH
49562: PPUSH
49563: PPUSH
49564: PPUSH
49565: PPUSH
49566: PPUSH
49567: PPUSH
49568: PPUSH
49569: PPUSH
49570: PPUSH
49571: PPUSH
49572: PPUSH
49573: PPUSH
49574: PPUSH
49575: PPUSH
49576: PPUSH
49577: PPUSH
49578: PPUSH
49579: PPUSH
// result = [ ] ;
49580: LD_ADDR_VAR 0 7
49584: PUSH
49585: EMPTY
49586: ST_TO_ADDR
// temp_list = [ ] ;
49587: LD_ADDR_VAR 0 9
49591: PUSH
49592: EMPTY
49593: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49594: LD_VAR 0 4
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: LD_INT 2
49607: PUSH
49608: LD_INT 3
49610: PUSH
49611: LD_INT 4
49613: PUSH
49614: LD_INT 5
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: IN
49625: NOT
49626: PUSH
49627: LD_VAR 0 1
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: IN
49642: PUSH
49643: LD_VAR 0 5
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: LD_INT 3
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: LIST
49661: IN
49662: NOT
49663: AND
49664: OR
49665: IFFALSE 49669
// exit ;
49667: GO 68060
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49669: LD_VAR 0 1
49673: PUSH
49674: LD_INT 6
49676: PUSH
49677: LD_INT 7
49679: PUSH
49680: LD_INT 8
49682: PUSH
49683: LD_INT 13
49685: PUSH
49686: LD_INT 12
49688: PUSH
49689: LD_INT 15
49691: PUSH
49692: LD_INT 11
49694: PUSH
49695: LD_INT 14
49697: PUSH
49698: LD_INT 10
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: IN
49712: IFFALSE 49722
// btype = b_lab ;
49714: LD_ADDR_VAR 0 1
49718: PUSH
49719: LD_INT 6
49721: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49722: LD_VAR 0 6
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: LIST
49740: IN
49741: NOT
49742: PUSH
49743: LD_VAR 0 1
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 2
49756: PUSH
49757: LD_INT 3
49759: PUSH
49760: LD_INT 6
49762: PUSH
49763: LD_INT 36
49765: PUSH
49766: LD_INT 4
49768: PUSH
49769: LD_INT 5
49771: PUSH
49772: LD_INT 31
49774: PUSH
49775: LD_INT 32
49777: PUSH
49778: LD_INT 33
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: IN
49794: NOT
49795: PUSH
49796: LD_VAR 0 6
49800: PUSH
49801: LD_INT 1
49803: EQUAL
49804: AND
49805: OR
49806: PUSH
49807: LD_VAR 0 1
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: LD_INT 3
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: IN
49822: NOT
49823: PUSH
49824: LD_VAR 0 6
49828: PUSH
49829: LD_INT 2
49831: EQUAL
49832: AND
49833: OR
49834: IFFALSE 49844
// mode = 0 ;
49836: LD_ADDR_VAR 0 6
49840: PUSH
49841: LD_INT 0
49843: ST_TO_ADDR
// case mode of 0 :
49844: LD_VAR 0 6
49848: PUSH
49849: LD_INT 0
49851: DOUBLE
49852: EQUAL
49853: IFTRUE 49857
49855: GO 61310
49857: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49858: LD_ADDR_VAR 0 11
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 2
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 3
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50051: LD_ADDR_VAR 0 12
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: NEG
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: NEG
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50247: LD_ADDR_VAR 0 13
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: LD_INT 3
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: NEG
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 3
50418: NEG
50419: PUSH
50420: LD_INT 3
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50446: LD_ADDR_VAR 0 14
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 3
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 3
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50642: LD_ADDR_VAR 0 15
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 3
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 3
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50835: LD_ADDR_VAR 0 16
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 3
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 3
50992: PUSH
50993: LD_INT 3
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: LD_INT 3
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51028: LD_ADDR_VAR 0 17
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51258: LD_ADDR_VAR 0 18
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: LD_INT 2
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 2
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 2
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51488: LD_ADDR_VAR 0 19
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 2
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 2
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51718: LD_ADDR_VAR 0 20
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: LD_INT 2
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51948: LD_ADDR_VAR 0 21
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52178: LD_ADDR_VAR 0 22
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 2
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52408: LD_ADDR_VAR 0 23
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 2
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: LD_INT 3
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 3
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52688: LD_ADDR_VAR 0 24
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 2
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 2
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 3
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 3
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52964: LD_ADDR_VAR 0 25
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 2
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 3
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: LD_INT 3
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53238: LD_ADDR_VAR 0 26
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: LD_INT 2
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: LD_INT 2
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: NEG
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: LD_INT 2
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: LD_INT 3
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: LD_INT 3
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: NEG
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53514: LD_ADDR_VAR 0 27
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 3
53747: NEG
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53794: LD_ADDR_VAR 0 28
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: LD_INT 3
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: LD_INT 3
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 3
54029: NEG
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54076: LD_ADDR_VAR 0 29
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 2
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 2
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 2
54254: NEG
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: LD_INT 3
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 3
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: LD_INT 3
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 3
54320: NEG
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54355: LD_ADDR_VAR 0 30
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: NEG
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 3
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 3
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: LD_INT 3
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 3
54598: NEG
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54633: LD_ADDR_VAR 0 31
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: NEG
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: LD_INT 3
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 3
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 3
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 3
54876: NEG
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54911: LD_ADDR_VAR 0 32
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: LD_INT 3
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 3
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: LD_INT 3
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 3
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55189: LD_ADDR_VAR 0 33
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: LD_INT 3
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 3
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: LD_INT 3
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 3
55433: NEG
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55468: LD_ADDR_VAR 0 34
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 3
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 2
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 3
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: LD_INT 3
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 3
55713: NEG
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55748: LD_ADDR_VAR 0 35
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55860: LD_ADDR_VAR 0 36
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55972: LD_ADDR_VAR 0 37
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56084: LD_ADDR_VAR 0 38
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56196: LD_ADDR_VAR 0 39
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56308: LD_ADDR_VAR 0 40
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56420: LD_ADDR_VAR 0 41
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: NEG
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: LD_INT 3
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 3
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 3
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 3
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 3
56663: PUSH
56664: LD_INT 3
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: LD_INT 3
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 3
56694: NEG
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 3
56705: NEG
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 3
56717: NEG
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 3
56729: NEG
56730: PUSH
56731: LD_INT 3
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56770: LD_ADDR_VAR 0 42
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: LD_INT 3
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 3
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 3
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 3
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 3
57067: NEG
57068: PUSH
57069: LD_INT 2
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: LD_INT 3
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57120: LD_ADDR_VAR 0 43
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 2
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: NEG
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: LD_INT 3
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 3
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: LD_INT 3
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 3
57416: NEG
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 3
57427: NEG
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57468: LD_ADDR_VAR 0 44
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: NEG
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 2
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: LD_INT 3
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 3
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 3
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 3
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 3
57711: PUSH
57712: LD_INT 3
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 2
57731: NEG
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 3
57742: NEG
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: NEG
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: NEG
57766: PUSH
57767: LD_INT 2
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 3
57777: NEG
57778: PUSH
57779: LD_INT 3
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57818: LD_ADDR_VAR 0 45
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 2
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: LD_INT 3
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: LD_INT 3
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: LD_INT 3
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 3
58064: PUSH
58065: LD_INT 3
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: LD_INT 3
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 3
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 3
58127: NEG
58128: PUSH
58129: LD_INT 3
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58168: LD_ADDR_VAR 0 46
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: LD_INT 2
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: LD_INT 2
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 2
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: LD_INT 3
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: LD_INT 3
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 3
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 3
58464: NEG
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 3
58475: NEG
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58516: LD_ADDR_VAR 0 47
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 2
58631: NEG
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 2
58643: NEG
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58667: LD_ADDR_VAR 0 48
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: LD_INT 2
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 2
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58814: LD_ADDR_VAR 0 49
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 2
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58958: LD_ADDR_VAR 0 50
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: LD_INT 2
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59102: LD_ADDR_VAR 0 51
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 2
59225: NEG
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59249: LD_ADDR_VAR 0 52
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 1
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 2
59376: NEG
59377: PUSH
59378: LD_INT 2
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59400: LD_ADDR_VAR 0 53
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 2
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 2
59535: PUSH
59536: LD_INT 2
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 2
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 2
59599: NEG
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59630: LD_ADDR_VAR 0 54
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: LD_INT 1
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: LD_INT 2
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 2
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 2
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: NEG
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59860: LD_ADDR_VAR 0 55
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 2
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 2
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: LD_INT 2
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60090: LD_ADDR_VAR 0 56
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: LD_INT 2
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: LD_INT 2
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 2
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 2
60266: NEG
60267: PUSH
60268: LD_INT 0
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: LD_INT 2
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60320: LD_ADDR_VAR 0 57
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: LD_INT 2
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: LD_INT 2
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: LD_INT 2
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 1
60485: NEG
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 2
60507: NEG
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60550: LD_ADDR_VAR 0 58
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 1
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 2
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: LD_INT 2
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: LD_INT 2
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: NEG
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: NEG
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 2
60737: NEG
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60780: LD_ADDR_VAR 0 59
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60868: LD_ADDR_VAR 0 60
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: NEG
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60956: LD_ADDR_VAR 0 61
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61044: LD_ADDR_VAR 0 62
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: LD_INT 1
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61132: LD_ADDR_VAR 0 63
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 1
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61220: LD_ADDR_VAR 0 64
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: ST_TO_ADDR
// end ; 1 :
61308: GO 67205
61310: LD_INT 1
61312: DOUBLE
61313: EQUAL
61314: IFTRUE 61318
61316: GO 63941
61318: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61319: LD_ADDR_VAR 0 11
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: LD_INT 3
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: LD_INT 3
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: LD_INT 2
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: LIST
61362: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61363: LD_ADDR_VAR 0 12
61367: PUSH
61368: LD_INT 2
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 3
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 3
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: LIST
61403: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61404: LD_ADDR_VAR 0 13
61408: PUSH
61409: LD_INT 3
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: LD_INT 3
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 2
61431: PUSH
61432: LD_INT 3
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: LIST
61443: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61444: LD_ADDR_VAR 0 14
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: LD_INT 3
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 3
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: LIST
61484: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61485: LD_ADDR_VAR 0 15
61489: PUSH
61490: LD_INT 2
61492: NEG
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 3
61503: NEG
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 3
61514: NEG
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: LIST
61528: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61529: LD_ADDR_VAR 0 16
61533: PUSH
61534: LD_INT 2
61536: NEG
61537: PUSH
61538: LD_INT 3
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 3
61548: NEG
61549: PUSH
61550: LD_INT 2
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 3
61560: NEG
61561: PUSH
61562: LD_INT 3
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: LIST
61574: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61575: LD_ADDR_VAR 0 17
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: LD_INT 3
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: LD_INT 3
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: LD_INT 2
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: LIST
61618: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61619: LD_ADDR_VAR 0 18
61623: PUSH
61624: LD_INT 2
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 3
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: LIST
61659: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61660: LD_ADDR_VAR 0 19
61664: PUSH
61665: LD_INT 3
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 3
61677: PUSH
61678: LD_INT 3
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: PUSH
61688: LD_INT 3
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: LIST
61699: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61700: LD_ADDR_VAR 0 20
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: LD_INT 3
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: LD_INT 3
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: LIST
61740: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61741: LD_ADDR_VAR 0 21
61745: PUSH
61746: LD_INT 2
61748: NEG
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 3
61759: NEG
61760: PUSH
61761: LD_INT 0
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 3
61770: NEG
61771: PUSH
61772: LD_INT 1
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: LIST
61784: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61785: LD_ADDR_VAR 0 22
61789: PUSH
61790: LD_INT 2
61792: NEG
61793: PUSH
61794: LD_INT 3
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 3
61804: NEG
61805: PUSH
61806: LD_INT 2
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 3
61816: NEG
61817: PUSH
61818: LD_INT 3
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: LIST
61830: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61831: LD_ADDR_VAR 0 23
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 3
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 1
61849: NEG
61850: PUSH
61851: LD_INT 4
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: LD_INT 3
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: LIST
61874: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61875: LD_ADDR_VAR 0 24
61879: PUSH
61880: LD_INT 3
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 3
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 4
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: LIST
61915: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61916: LD_ADDR_VAR 0 25
61920: PUSH
61921: LD_INT 3
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 4
61933: PUSH
61934: LD_INT 3
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 3
61943: PUSH
61944: LD_INT 4
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: LIST
61955: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61956: LD_ADDR_VAR 0 26
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: LD_INT 3
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: LD_INT 4
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: LD_INT 3
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: LIST
61996: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61997: LD_ADDR_VAR 0 27
62001: PUSH
62002: LD_INT 3
62004: NEG
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 3
62015: NEG
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 4
62026: NEG
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: LIST
62040: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62041: LD_ADDR_VAR 0 28
62045: PUSH
62046: LD_INT 3
62048: NEG
62049: PUSH
62050: LD_INT 3
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 3
62060: NEG
62061: PUSH
62062: LD_INT 4
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 4
62072: NEG
62073: PUSH
62074: LD_INT 3
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: LIST
62086: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62087: LD_ADDR_VAR 0 29
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: LD_INT 3
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: LD_INT 3
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: LD_INT 2
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 4
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: LD_INT 4
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: LD_INT 3
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: NEG
62163: PUSH
62164: LD_INT 5
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: LD_INT 5
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: LD_INT 4
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: NEG
62197: PUSH
62198: LD_INT 6
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: LD_INT 6
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: LD_INT 5
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62242: LD_ADDR_VAR 0 30
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 3
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 3
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 3
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 4
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 4
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 4
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 5
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 5
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 5
62342: PUSH
62343: LD_INT 1
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 6
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 6
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62385: LD_ADDR_VAR 0 31
62389: PUSH
62390: LD_INT 3
62392: PUSH
62393: LD_INT 2
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 3
62402: PUSH
62403: LD_INT 3
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 2
62412: PUSH
62413: LD_INT 3
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 4
62422: PUSH
62423: LD_INT 3
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 4
62432: PUSH
62433: LD_INT 4
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 3
62442: PUSH
62443: LD_INT 4
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 5
62452: PUSH
62453: LD_INT 4
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 5
62462: PUSH
62463: LD_INT 5
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 4
62472: PUSH
62473: LD_INT 5
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 6
62482: PUSH
62483: LD_INT 5
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 6
62492: PUSH
62493: LD_INT 6
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 5
62502: PUSH
62503: LD_INT 6
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62524: LD_ADDR_VAR 0 32
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: LD_INT 3
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: LD_INT 3
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: LD_INT 2
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: LD_INT 4
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: LD_INT 4
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: LD_INT 3
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: LD_INT 5
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: LD_INT 5
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 1
62613: NEG
62614: PUSH
62615: LD_INT 4
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: LD_INT 6
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 6
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: LD_INT 5
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62667: LD_ADDR_VAR 0 33
62671: PUSH
62672: LD_INT 2
62674: NEG
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 3
62685: NEG
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 3
62696: NEG
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 3
62708: NEG
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 4
62719: NEG
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 4
62730: NEG
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 4
62742: NEG
62743: PUSH
62744: LD_INT 1
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 5
62753: NEG
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 5
62764: NEG
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 5
62776: NEG
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 6
62787: NEG
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 6
62798: NEG
62799: PUSH
62800: LD_INT 1
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62822: LD_ADDR_VAR 0 34
62826: PUSH
62827: LD_INT 2
62829: NEG
62830: PUSH
62831: LD_INT 3
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 3
62841: NEG
62842: PUSH
62843: LD_INT 2
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 3
62853: NEG
62854: PUSH
62855: LD_INT 3
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 3
62865: NEG
62866: PUSH
62867: LD_INT 4
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 4
62877: NEG
62878: PUSH
62879: LD_INT 3
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 4
62889: NEG
62890: PUSH
62891: LD_INT 4
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 4
62901: NEG
62902: PUSH
62903: LD_INT 5
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 5
62913: NEG
62914: PUSH
62915: LD_INT 4
62917: NEG
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 5
62925: NEG
62926: PUSH
62927: LD_INT 5
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 5
62937: NEG
62938: PUSH
62939: LD_INT 6
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 6
62949: NEG
62950: PUSH
62951: LD_INT 5
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 6
62961: NEG
62962: PUSH
62963: LD_INT 6
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62985: LD_ADDR_VAR 0 41
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: LD_INT 2
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: LD_INT 3
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 1
63015: PUSH
63016: LD_INT 2
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: LIST
63028: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63029: LD_ADDR_VAR 0 42
63033: PUSH
63034: LD_INT 2
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 2
63046: PUSH
63047: LD_INT 1
63049: NEG
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 3
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63070: LD_ADDR_VAR 0 43
63074: PUSH
63075: LD_INT 2
63077: PUSH
63078: LD_INT 2
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 3
63087: PUSH
63088: LD_INT 2
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 2
63097: PUSH
63098: LD_INT 3
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: LIST
63109: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63110: LD_ADDR_VAR 0 44
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: LD_INT 2
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: LD_INT 3
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: LD_INT 2
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: LIST
63150: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63151: LD_ADDR_VAR 0 45
63155: PUSH
63156: LD_INT 2
63158: NEG
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 2
63169: NEG
63170: PUSH
63171: LD_INT 1
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 3
63180: NEG
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: LIST
63194: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63195: LD_ADDR_VAR 0 46
63199: PUSH
63200: LD_INT 2
63202: NEG
63203: PUSH
63204: LD_INT 2
63206: NEG
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 2
63214: NEG
63215: PUSH
63216: LD_INT 3
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 3
63226: NEG
63227: PUSH
63228: LD_INT 2
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: LIST
63240: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63241: LD_ADDR_VAR 0 47
63245: PUSH
63246: LD_INT 2
63248: NEG
63249: PUSH
63250: LD_INT 3
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: LD_INT 3
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63274: LD_ADDR_VAR 0 48
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: LD_INT 2
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 2
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63305: LD_ADDR_VAR 0 49
63309: PUSH
63310: LD_INT 3
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 3
63322: PUSH
63323: LD_INT 2
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63334: LD_ADDR_VAR 0 50
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: LD_INT 3
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: LD_INT 3
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63363: LD_ADDR_VAR 0 51
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: LD_INT 2
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 2
63381: NEG
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63394: LD_ADDR_VAR 0 52
63398: PUSH
63399: LD_INT 3
63401: NEG
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 3
63413: NEG
63414: PUSH
63415: LD_INT 2
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63427: LD_ADDR_VAR 0 53
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: LD_INT 3
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: LD_INT 3
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: LD_INT 2
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: LIST
63470: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63471: LD_ADDR_VAR 0 54
63475: PUSH
63476: LD_INT 2
63478: PUSH
63479: LD_INT 1
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 3
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 3
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63512: LD_ADDR_VAR 0 55
63516: PUSH
63517: LD_INT 3
63519: PUSH
63520: LD_INT 2
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 3
63529: PUSH
63530: LD_INT 3
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 2
63539: PUSH
63540: LD_INT 3
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: LIST
63551: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63552: LD_ADDR_VAR 0 56
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: LD_INT 3
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: LD_INT 3
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: LIST
63592: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63593: LD_ADDR_VAR 0 57
63597: PUSH
63598: LD_INT 2
63600: NEG
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 3
63611: NEG
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 3
63622: NEG
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: LIST
63636: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63637: LD_ADDR_VAR 0 58
63641: PUSH
63642: LD_INT 2
63644: NEG
63645: PUSH
63646: LD_INT 3
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 3
63656: NEG
63657: PUSH
63658: LD_INT 2
63660: NEG
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 3
63668: NEG
63669: PUSH
63670: LD_INT 3
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: LIST
63682: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63683: LD_ADDR_VAR 0 59
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: LD_INT 2
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 0
63702: PUSH
63703: LD_INT 2
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63727: LD_ADDR_VAR 0 60
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: LD_INT 1
63737: NEG
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 2
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 2
63755: PUSH
63756: LD_INT 1
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63768: LD_ADDR_VAR 0 61
63772: PUSH
63773: LD_INT 2
63775: PUSH
63776: LD_INT 1
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 2
63785: PUSH
63786: LD_INT 2
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63808: LD_ADDR_VAR 0 62
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: LD_INT 2
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 0
63825: PUSH
63826: LD_INT 2
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: LD_INT 1
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: LIST
63848: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63849: LD_ADDR_VAR 0 63
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 2
63867: NEG
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: NEG
63879: PUSH
63880: LD_INT 1
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: LIST
63892: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63893: LD_ADDR_VAR 0 64
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: LD_INT 2
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 2
63912: NEG
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 2
63924: NEG
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: LIST
63938: ST_TO_ADDR
// end ; 2 :
63939: GO 67205
63941: LD_INT 2
63943: DOUBLE
63944: EQUAL
63945: IFTRUE 63949
63947: GO 67204
63949: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63950: LD_ADDR_VAR 0 29
63954: PUSH
63955: LD_INT 4
63957: PUSH
63958: LD_INT 0
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 4
63967: PUSH
63968: LD_INT 1
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 5
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 5
63988: PUSH
63989: LD_INT 1
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 4
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 3
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 3
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 3
64029: PUSH
64030: LD_INT 2
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 5
64040: PUSH
64041: LD_INT 2
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 3
64050: PUSH
64051: LD_INT 3
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 3
64060: PUSH
64061: LD_INT 2
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 4
64070: PUSH
64071: LD_INT 3
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 4
64080: PUSH
64081: LD_INT 4
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 3
64090: PUSH
64091: LD_INT 4
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: LD_INT 3
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 2
64110: PUSH
64111: LD_INT 2
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 4
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 2
64130: PUSH
64131: LD_INT 4
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: LD_INT 4
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 3
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: LD_INT 4
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: LD_INT 5
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 5
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: LD_INT 4
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: LD_INT 3
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 2
64212: PUSH
64213: LD_INT 5
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: LD_INT 3
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 3
64233: NEG
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 3
64244: NEG
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 2
64256: NEG
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 2
64267: NEG
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 3
64278: NEG
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 4
64289: NEG
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 4
64300: NEG
64301: PUSH
64302: LD_INT 1
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 4
64312: NEG
64313: PUSH
64314: LD_INT 2
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 2
64324: NEG
64325: PUSH
64326: LD_INT 2
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 4
64335: NEG
64336: PUSH
64337: LD_INT 4
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 4
64347: NEG
64348: PUSH
64349: LD_INT 5
64351: NEG
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 3
64359: NEG
64360: PUSH
64361: LD_INT 4
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 3
64371: NEG
64372: PUSH
64373: LD_INT 3
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 4
64383: NEG
64384: PUSH
64385: LD_INT 3
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 5
64395: NEG
64396: PUSH
64397: LD_INT 4
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 5
64407: NEG
64408: PUSH
64409: LD_INT 5
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 3
64419: NEG
64420: PUSH
64421: LD_INT 5
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 5
64431: NEG
64432: PUSH
64433: LD_INT 3
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64488: LD_ADDR_VAR 0 30
64492: PUSH
64493: LD_INT 4
64495: PUSH
64496: LD_INT 4
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 4
64505: PUSH
64506: LD_INT 3
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 5
64515: PUSH
64516: LD_INT 4
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 5
64525: PUSH
64526: LD_INT 5
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 4
64535: PUSH
64536: LD_INT 5
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 3
64545: PUSH
64546: LD_INT 4
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 3
64555: PUSH
64556: LD_INT 3
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 5
64565: PUSH
64566: LD_INT 3
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 3
64575: PUSH
64576: LD_INT 5
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 3
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: LD_INT 4
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: LD_INT 4
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 3
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: LD_INT 2
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: LD_INT 4
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 2
64667: NEG
64668: PUSH
64669: LD_INT 2
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 4
64678: NEG
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 4
64689: NEG
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: NEG
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: NEG
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 4
64723: NEG
64724: PUSH
64725: LD_INT 1
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 5
64734: NEG
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 5
64745: NEG
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 5
64757: NEG
64758: PUSH
64759: LD_INT 2
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 3
64769: NEG
64770: PUSH
64771: LD_INT 2
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 3
64780: NEG
64781: PUSH
64782: LD_INT 3
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 3
64792: NEG
64793: PUSH
64794: LD_INT 4
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 2
64804: NEG
64805: PUSH
64806: LD_INT 3
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 2
64816: NEG
64817: PUSH
64818: LD_INT 2
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 3
64828: NEG
64829: PUSH
64830: LD_INT 2
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 4
64840: NEG
64841: PUSH
64842: LD_INT 3
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 4
64852: NEG
64853: PUSH
64854: LD_INT 4
64856: NEG
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 2
64864: NEG
64865: PUSH
64866: LD_INT 4
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 4
64876: NEG
64877: PUSH
64878: LD_INT 2
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: LD_INT 4
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: LD_INT 5
64902: NEG
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 1
64910: PUSH
64911: LD_INT 4
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 1
64921: PUSH
64922: LD_INT 3
64924: NEG
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: LD_INT 3
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 1
64943: NEG
64944: PUSH
64945: LD_INT 4
64947: NEG
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 1
64955: NEG
64956: PUSH
64957: LD_INT 5
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 2
64967: PUSH
64968: LD_INT 3
64970: NEG
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 2
64978: NEG
64979: PUSH
64980: LD_INT 5
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65035: LD_ADDR_VAR 0 31
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: LD_INT 4
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: LD_INT 3
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: LD_INT 4
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: PUSH
65073: LD_INT 5
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 0
65082: PUSH
65083: LD_INT 5
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: LD_INT 4
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 1
65103: NEG
65104: PUSH
65105: LD_INT 3
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 2
65114: PUSH
65115: LD_INT 5
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 2
65124: NEG
65125: PUSH
65126: LD_INT 3
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 3
65135: NEG
65136: PUSH
65137: LD_INT 0
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 3
65146: NEG
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 2
65158: NEG
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 2
65169: NEG
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 3
65180: NEG
65181: PUSH
65182: LD_INT 1
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 4
65191: NEG
65192: PUSH
65193: LD_INT 0
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 4
65202: NEG
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 4
65214: NEG
65215: PUSH
65216: LD_INT 2
65218: NEG
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 2
65226: NEG
65227: PUSH
65228: LD_INT 2
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 4
65237: NEG
65238: PUSH
65239: LD_INT 4
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 4
65249: NEG
65250: PUSH
65251: LD_INT 5
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 3
65261: NEG
65262: PUSH
65263: LD_INT 4
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 3
65273: NEG
65274: PUSH
65275: LD_INT 3
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 4
65285: NEG
65286: PUSH
65287: LD_INT 3
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 5
65297: NEG
65298: PUSH
65299: LD_INT 4
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 5
65309: NEG
65310: PUSH
65311: LD_INT 5
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 3
65321: NEG
65322: PUSH
65323: LD_INT 5
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 5
65333: NEG
65334: PUSH
65335: LD_INT 3
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: LD_INT 3
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: LD_INT 4
65359: NEG
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 1
65367: PUSH
65368: LD_INT 3
65370: NEG
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 1
65378: PUSH
65379: LD_INT 2
65381: NEG
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: LD_INT 2
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: NEG
65401: PUSH
65402: LD_INT 3
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: LD_INT 4
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 2
65424: PUSH
65425: LD_INT 2
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 2
65435: NEG
65436: PUSH
65437: LD_INT 4
65439: NEG
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 4
65447: PUSH
65448: LD_INT 0
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 4
65457: PUSH
65458: LD_INT 1
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 5
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 5
65478: PUSH
65479: LD_INT 1
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 4
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 3
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 3
65508: PUSH
65509: LD_INT 1
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 3
65519: PUSH
65520: LD_INT 2
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 5
65530: PUSH
65531: LD_INT 2
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65585: LD_ADDR_VAR 0 32
65589: PUSH
65590: LD_INT 4
65592: NEG
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 4
65603: NEG
65604: PUSH
65605: LD_INT 1
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 3
65615: NEG
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 3
65626: NEG
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 4
65637: NEG
65638: PUSH
65639: LD_INT 1
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 5
65648: NEG
65649: PUSH
65650: LD_INT 0
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 5
65659: NEG
65660: PUSH
65661: LD_INT 1
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 5
65671: NEG
65672: PUSH
65673: LD_INT 2
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 3
65683: NEG
65684: PUSH
65685: LD_INT 2
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 3
65694: NEG
65695: PUSH
65696: LD_INT 3
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 3
65706: NEG
65707: PUSH
65708: LD_INT 4
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 2
65718: NEG
65719: PUSH
65720: LD_INT 3
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 2
65730: NEG
65731: PUSH
65732: LD_INT 2
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 3
65742: NEG
65743: PUSH
65744: LD_INT 2
65746: NEG
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 4
65754: NEG
65755: PUSH
65756: LD_INT 3
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 4
65766: NEG
65767: PUSH
65768: LD_INT 4
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 2
65778: NEG
65779: PUSH
65780: LD_INT 4
65782: NEG
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 4
65790: NEG
65791: PUSH
65792: LD_INT 2
65794: NEG
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 0
65802: PUSH
65803: LD_INT 4
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: LD_INT 5
65816: NEG
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 1
65824: PUSH
65825: LD_INT 4
65827: NEG
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 1
65835: PUSH
65836: LD_INT 3
65838: NEG
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 0
65846: PUSH
65847: LD_INT 3
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: LD_INT 4
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 1
65869: NEG
65870: PUSH
65871: LD_INT 5
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 2
65881: PUSH
65882: LD_INT 3
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 2
65892: NEG
65893: PUSH
65894: LD_INT 5
65896: NEG
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 3
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 3
65914: PUSH
65915: LD_INT 1
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 4
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 4
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 3
65945: PUSH
65946: LD_INT 1
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 2
65955: PUSH
65956: LD_INT 0
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 2
65965: PUSH
65966: LD_INT 1
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 2
65976: PUSH
65977: LD_INT 2
65979: NEG
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 4
65987: PUSH
65988: LD_INT 2
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 4
65997: PUSH
65998: LD_INT 4
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 4
66007: PUSH
66008: LD_INT 3
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 5
66017: PUSH
66018: LD_INT 4
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 5
66027: PUSH
66028: LD_INT 5
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 4
66037: PUSH
66038: LD_INT 5
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 3
66047: PUSH
66048: LD_INT 4
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 3
66057: PUSH
66058: LD_INT 3
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 5
66067: PUSH
66068: LD_INT 3
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 3
66077: PUSH
66078: LD_INT 5
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66132: LD_ADDR_VAR 0 33
66136: PUSH
66137: LD_INT 4
66139: NEG
66140: PUSH
66141: LD_INT 4
66143: NEG
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 4
66151: NEG
66152: PUSH
66153: LD_INT 5
66155: NEG
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 3
66163: NEG
66164: PUSH
66165: LD_INT 4
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 3
66175: NEG
66176: PUSH
66177: LD_INT 3
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 4
66187: NEG
66188: PUSH
66189: LD_INT 3
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 5
66199: NEG
66200: PUSH
66201: LD_INT 4
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 5
66211: NEG
66212: PUSH
66213: LD_INT 5
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 3
66223: NEG
66224: PUSH
66225: LD_INT 5
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 5
66235: NEG
66236: PUSH
66237: LD_INT 3
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 0
66247: PUSH
66248: LD_INT 3
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: LD_INT 4
66261: NEG
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 1
66269: PUSH
66270: LD_INT 3
66272: NEG
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 1
66280: PUSH
66281: LD_INT 2
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: LD_INT 2
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: LD_INT 3
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 1
66314: NEG
66315: PUSH
66316: LD_INT 4
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 2
66326: PUSH
66327: LD_INT 2
66329: NEG
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 2
66337: NEG
66338: PUSH
66339: LD_INT 4
66341: NEG
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 4
66349: PUSH
66350: LD_INT 0
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 4
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 5
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 5
66380: PUSH
66381: LD_INT 1
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 4
66390: PUSH
66391: LD_INT 1
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 3
66400: PUSH
66401: LD_INT 0
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 3
66410: PUSH
66411: LD_INT 1
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 3
66421: PUSH
66422: LD_INT 2
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 5
66432: PUSH
66433: LD_INT 2
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 3
66442: PUSH
66443: LD_INT 3
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 3
66452: PUSH
66453: LD_INT 2
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 4
66462: PUSH
66463: LD_INT 3
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 4
66472: PUSH
66473: LD_INT 4
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 3
66482: PUSH
66483: LD_INT 4
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 2
66492: PUSH
66493: LD_INT 3
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 2
66502: PUSH
66503: LD_INT 2
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 4
66512: PUSH
66513: LD_INT 2
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: LD_INT 4
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 0
66532: PUSH
66533: LD_INT 4
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: LD_INT 3
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 1
66552: PUSH
66553: LD_INT 4
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: LD_INT 5
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: LD_INT 5
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: LD_INT 4
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 1
66593: NEG
66594: PUSH
66595: LD_INT 3
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 2
66604: PUSH
66605: LD_INT 5
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 2
66614: NEG
66615: PUSH
66616: LD_INT 3
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66670: LD_ADDR_VAR 0 34
66674: PUSH
66675: LD_INT 0
66677: PUSH
66678: LD_INT 4
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 0
66688: PUSH
66689: LD_INT 5
66691: NEG
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: LD_INT 4
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 1
66710: PUSH
66711: LD_INT 3
66713: NEG
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 0
66721: PUSH
66722: LD_INT 3
66724: NEG
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 1
66732: NEG
66733: PUSH
66734: LD_INT 4
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 1
66744: NEG
66745: PUSH
66746: LD_INT 5
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 2
66756: PUSH
66757: LD_INT 3
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 2
66767: NEG
66768: PUSH
66769: LD_INT 5
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 3
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 3
66789: PUSH
66790: LD_INT 1
66792: NEG
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 4
66800: PUSH
66801: LD_INT 0
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 4
66810: PUSH
66811: LD_INT 1
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 3
66820: PUSH
66821: LD_INT 1
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 2
66830: PUSH
66831: LD_INT 0
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 2
66840: PUSH
66841: LD_INT 1
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 2
66851: PUSH
66852: LD_INT 2
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 4
66862: PUSH
66863: LD_INT 2
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 4
66872: PUSH
66873: LD_INT 4
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 4
66882: PUSH
66883: LD_INT 3
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 5
66892: PUSH
66893: LD_INT 4
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 5
66902: PUSH
66903: LD_INT 5
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 4
66912: PUSH
66913: LD_INT 5
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 3
66922: PUSH
66923: LD_INT 4
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 3
66932: PUSH
66933: LD_INT 3
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 5
66942: PUSH
66943: LD_INT 3
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 3
66952: PUSH
66953: LD_INT 5
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 0
66962: PUSH
66963: LD_INT 3
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: LD_INT 2
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: LD_INT 3
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 1
66992: PUSH
66993: LD_INT 4
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 0
67002: PUSH
67003: LD_INT 4
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 1
67012: NEG
67013: PUSH
67014: LD_INT 3
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: PUSH
67025: LD_INT 2
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 2
67034: PUSH
67035: LD_INT 4
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 2
67044: NEG
67045: PUSH
67046: LD_INT 2
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 4
67055: NEG
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 4
67066: NEG
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 3
67078: NEG
67079: PUSH
67080: LD_INT 0
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 3
67089: NEG
67090: PUSH
67091: LD_INT 1
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 4
67100: NEG
67101: PUSH
67102: LD_INT 1
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 5
67111: NEG
67112: PUSH
67113: LD_INT 0
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 5
67122: NEG
67123: PUSH
67124: LD_INT 1
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 5
67134: NEG
67135: PUSH
67136: LD_INT 2
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 3
67146: NEG
67147: PUSH
67148: LD_INT 2
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: ST_TO_ADDR
// end ; end ;
67202: GO 67205
67204: POP
// case btype of b_depot , b_warehouse :
67205: LD_VAR 0 1
67209: PUSH
67210: LD_INT 0
67212: DOUBLE
67213: EQUAL
67214: IFTRUE 67224
67216: LD_INT 1
67218: DOUBLE
67219: EQUAL
67220: IFTRUE 67224
67222: GO 67425
67224: POP
// case nation of nation_american :
67225: LD_VAR 0 5
67229: PUSH
67230: LD_INT 1
67232: DOUBLE
67233: EQUAL
67234: IFTRUE 67238
67236: GO 67294
67238: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67239: LD_ADDR_VAR 0 9
67243: PUSH
67244: LD_VAR 0 11
67248: PUSH
67249: LD_VAR 0 12
67253: PUSH
67254: LD_VAR 0 13
67258: PUSH
67259: LD_VAR 0 14
67263: PUSH
67264: LD_VAR 0 15
67268: PUSH
67269: LD_VAR 0 16
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: PUSH
67282: LD_VAR 0 4
67286: PUSH
67287: LD_INT 1
67289: PLUS
67290: ARRAY
67291: ST_TO_ADDR
67292: GO 67423
67294: LD_INT 2
67296: DOUBLE
67297: EQUAL
67298: IFTRUE 67302
67300: GO 67358
67302: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67303: LD_ADDR_VAR 0 9
67307: PUSH
67308: LD_VAR 0 17
67312: PUSH
67313: LD_VAR 0 18
67317: PUSH
67318: LD_VAR 0 19
67322: PUSH
67323: LD_VAR 0 20
67327: PUSH
67328: LD_VAR 0 21
67332: PUSH
67333: LD_VAR 0 22
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: PUSH
67346: LD_VAR 0 4
67350: PUSH
67351: LD_INT 1
67353: PLUS
67354: ARRAY
67355: ST_TO_ADDR
67356: GO 67423
67358: LD_INT 3
67360: DOUBLE
67361: EQUAL
67362: IFTRUE 67366
67364: GO 67422
67366: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67367: LD_ADDR_VAR 0 9
67371: PUSH
67372: LD_VAR 0 23
67376: PUSH
67377: LD_VAR 0 24
67381: PUSH
67382: LD_VAR 0 25
67386: PUSH
67387: LD_VAR 0 26
67391: PUSH
67392: LD_VAR 0 27
67396: PUSH
67397: LD_VAR 0 28
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: PUSH
67410: LD_VAR 0 4
67414: PUSH
67415: LD_INT 1
67417: PLUS
67418: ARRAY
67419: ST_TO_ADDR
67420: GO 67423
67422: POP
67423: GO 67978
67425: LD_INT 2
67427: DOUBLE
67428: EQUAL
67429: IFTRUE 67439
67431: LD_INT 3
67433: DOUBLE
67434: EQUAL
67435: IFTRUE 67439
67437: GO 67495
67439: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67440: LD_ADDR_VAR 0 9
67444: PUSH
67445: LD_VAR 0 29
67449: PUSH
67450: LD_VAR 0 30
67454: PUSH
67455: LD_VAR 0 31
67459: PUSH
67460: LD_VAR 0 32
67464: PUSH
67465: LD_VAR 0 33
67469: PUSH
67470: LD_VAR 0 34
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: PUSH
67483: LD_VAR 0 4
67487: PUSH
67488: LD_INT 1
67490: PLUS
67491: ARRAY
67492: ST_TO_ADDR
67493: GO 67978
67495: LD_INT 16
67497: DOUBLE
67498: EQUAL
67499: IFTRUE 67557
67501: LD_INT 17
67503: DOUBLE
67504: EQUAL
67505: IFTRUE 67557
67507: LD_INT 18
67509: DOUBLE
67510: EQUAL
67511: IFTRUE 67557
67513: LD_INT 19
67515: DOUBLE
67516: EQUAL
67517: IFTRUE 67557
67519: LD_INT 22
67521: DOUBLE
67522: EQUAL
67523: IFTRUE 67557
67525: LD_INT 20
67527: DOUBLE
67528: EQUAL
67529: IFTRUE 67557
67531: LD_INT 21
67533: DOUBLE
67534: EQUAL
67535: IFTRUE 67557
67537: LD_INT 23
67539: DOUBLE
67540: EQUAL
67541: IFTRUE 67557
67543: LD_INT 24
67545: DOUBLE
67546: EQUAL
67547: IFTRUE 67557
67549: LD_INT 25
67551: DOUBLE
67552: EQUAL
67553: IFTRUE 67557
67555: GO 67613
67557: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67558: LD_ADDR_VAR 0 9
67562: PUSH
67563: LD_VAR 0 35
67567: PUSH
67568: LD_VAR 0 36
67572: PUSH
67573: LD_VAR 0 37
67577: PUSH
67578: LD_VAR 0 38
67582: PUSH
67583: LD_VAR 0 39
67587: PUSH
67588: LD_VAR 0 40
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: PUSH
67601: LD_VAR 0 4
67605: PUSH
67606: LD_INT 1
67608: PLUS
67609: ARRAY
67610: ST_TO_ADDR
67611: GO 67978
67613: LD_INT 6
67615: DOUBLE
67616: EQUAL
67617: IFTRUE 67669
67619: LD_INT 7
67621: DOUBLE
67622: EQUAL
67623: IFTRUE 67669
67625: LD_INT 8
67627: DOUBLE
67628: EQUAL
67629: IFTRUE 67669
67631: LD_INT 13
67633: DOUBLE
67634: EQUAL
67635: IFTRUE 67669
67637: LD_INT 12
67639: DOUBLE
67640: EQUAL
67641: IFTRUE 67669
67643: LD_INT 15
67645: DOUBLE
67646: EQUAL
67647: IFTRUE 67669
67649: LD_INT 11
67651: DOUBLE
67652: EQUAL
67653: IFTRUE 67669
67655: LD_INT 14
67657: DOUBLE
67658: EQUAL
67659: IFTRUE 67669
67661: LD_INT 10
67663: DOUBLE
67664: EQUAL
67665: IFTRUE 67669
67667: GO 67725
67669: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67670: LD_ADDR_VAR 0 9
67674: PUSH
67675: LD_VAR 0 41
67679: PUSH
67680: LD_VAR 0 42
67684: PUSH
67685: LD_VAR 0 43
67689: PUSH
67690: LD_VAR 0 44
67694: PUSH
67695: LD_VAR 0 45
67699: PUSH
67700: LD_VAR 0 46
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: PUSH
67713: LD_VAR 0 4
67717: PUSH
67718: LD_INT 1
67720: PLUS
67721: ARRAY
67722: ST_TO_ADDR
67723: GO 67978
67725: LD_INT 36
67727: DOUBLE
67728: EQUAL
67729: IFTRUE 67733
67731: GO 67789
67733: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67734: LD_ADDR_VAR 0 9
67738: PUSH
67739: LD_VAR 0 47
67743: PUSH
67744: LD_VAR 0 48
67748: PUSH
67749: LD_VAR 0 49
67753: PUSH
67754: LD_VAR 0 50
67758: PUSH
67759: LD_VAR 0 51
67763: PUSH
67764: LD_VAR 0 52
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: PUSH
67777: LD_VAR 0 4
67781: PUSH
67782: LD_INT 1
67784: PLUS
67785: ARRAY
67786: ST_TO_ADDR
67787: GO 67978
67789: LD_INT 4
67791: DOUBLE
67792: EQUAL
67793: IFTRUE 67815
67795: LD_INT 5
67797: DOUBLE
67798: EQUAL
67799: IFTRUE 67815
67801: LD_INT 34
67803: DOUBLE
67804: EQUAL
67805: IFTRUE 67815
67807: LD_INT 37
67809: DOUBLE
67810: EQUAL
67811: IFTRUE 67815
67813: GO 67871
67815: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67816: LD_ADDR_VAR 0 9
67820: PUSH
67821: LD_VAR 0 53
67825: PUSH
67826: LD_VAR 0 54
67830: PUSH
67831: LD_VAR 0 55
67835: PUSH
67836: LD_VAR 0 56
67840: PUSH
67841: LD_VAR 0 57
67845: PUSH
67846: LD_VAR 0 58
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: PUSH
67859: LD_VAR 0 4
67863: PUSH
67864: LD_INT 1
67866: PLUS
67867: ARRAY
67868: ST_TO_ADDR
67869: GO 67978
67871: LD_INT 31
67873: DOUBLE
67874: EQUAL
67875: IFTRUE 67921
67877: LD_INT 32
67879: DOUBLE
67880: EQUAL
67881: IFTRUE 67921
67883: LD_INT 33
67885: DOUBLE
67886: EQUAL
67887: IFTRUE 67921
67889: LD_INT 27
67891: DOUBLE
67892: EQUAL
67893: IFTRUE 67921
67895: LD_INT 26
67897: DOUBLE
67898: EQUAL
67899: IFTRUE 67921
67901: LD_INT 28
67903: DOUBLE
67904: EQUAL
67905: IFTRUE 67921
67907: LD_INT 29
67909: DOUBLE
67910: EQUAL
67911: IFTRUE 67921
67913: LD_INT 30
67915: DOUBLE
67916: EQUAL
67917: IFTRUE 67921
67919: GO 67977
67921: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67922: LD_ADDR_VAR 0 9
67926: PUSH
67927: LD_VAR 0 59
67931: PUSH
67932: LD_VAR 0 60
67936: PUSH
67937: LD_VAR 0 61
67941: PUSH
67942: LD_VAR 0 62
67946: PUSH
67947: LD_VAR 0 63
67951: PUSH
67952: LD_VAR 0 64
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: PUSH
67965: LD_VAR 0 4
67969: PUSH
67970: LD_INT 1
67972: PLUS
67973: ARRAY
67974: ST_TO_ADDR
67975: GO 67978
67977: POP
// temp_list2 = [ ] ;
67978: LD_ADDR_VAR 0 10
67982: PUSH
67983: EMPTY
67984: ST_TO_ADDR
// for i in temp_list do
67985: LD_ADDR_VAR 0 8
67989: PUSH
67990: LD_VAR 0 9
67994: PUSH
67995: FOR_IN
67996: IFFALSE 68048
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67998: LD_ADDR_VAR 0 10
68002: PUSH
68003: LD_VAR 0 10
68007: PUSH
68008: LD_VAR 0 8
68012: PUSH
68013: LD_INT 1
68015: ARRAY
68016: PUSH
68017: LD_VAR 0 2
68021: PLUS
68022: PUSH
68023: LD_VAR 0 8
68027: PUSH
68028: LD_INT 2
68030: ARRAY
68031: PUSH
68032: LD_VAR 0 3
68036: PLUS
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: EMPTY
68043: LIST
68044: ADD
68045: ST_TO_ADDR
68046: GO 67995
68048: POP
68049: POP
// result = temp_list2 ;
68050: LD_ADDR_VAR 0 7
68054: PUSH
68055: LD_VAR 0 10
68059: ST_TO_ADDR
// end ;
68060: LD_VAR 0 7
68064: RET
// export function EnemyInRange ( unit , dist ) ; begin
68065: LD_INT 0
68067: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68068: LD_ADDR_VAR 0 3
68072: PUSH
68073: LD_VAR 0 1
68077: PPUSH
68078: CALL_OW 255
68082: PPUSH
68083: LD_VAR 0 1
68087: PPUSH
68088: CALL_OW 250
68092: PPUSH
68093: LD_VAR 0 1
68097: PPUSH
68098: CALL_OW 251
68102: PPUSH
68103: LD_VAR 0 2
68107: PPUSH
68108: CALL 42169 0 4
68112: PUSH
68113: LD_INT 4
68115: ARRAY
68116: ST_TO_ADDR
// end ;
68117: LD_VAR 0 3
68121: RET
// export function PlayerSeeMe ( unit ) ; begin
68122: LD_INT 0
68124: PPUSH
// result := See ( your_side , unit ) ;
68125: LD_ADDR_VAR 0 2
68129: PUSH
68130: LD_OWVAR 2
68134: PPUSH
68135: LD_VAR 0 1
68139: PPUSH
68140: CALL_OW 292
68144: ST_TO_ADDR
// end ;
68145: LD_VAR 0 2
68149: RET
// export function ReverseDir ( unit ) ; begin
68150: LD_INT 0
68152: PPUSH
// if not unit then
68153: LD_VAR 0 1
68157: NOT
68158: IFFALSE 68162
// exit ;
68160: GO 68185
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68162: LD_ADDR_VAR 0 2
68166: PUSH
68167: LD_VAR 0 1
68171: PPUSH
68172: CALL_OW 254
68176: PUSH
68177: LD_INT 3
68179: PLUS
68180: PUSH
68181: LD_INT 6
68183: MOD
68184: ST_TO_ADDR
// end ;
68185: LD_VAR 0 2
68189: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68190: LD_INT 0
68192: PPUSH
68193: PPUSH
68194: PPUSH
68195: PPUSH
68196: PPUSH
// if not hexes then
68197: LD_VAR 0 2
68201: NOT
68202: IFFALSE 68206
// exit ;
68204: GO 68354
// dist := 9999 ;
68206: LD_ADDR_VAR 0 5
68210: PUSH
68211: LD_INT 9999
68213: ST_TO_ADDR
// for i = 1 to hexes do
68214: LD_ADDR_VAR 0 4
68218: PUSH
68219: DOUBLE
68220: LD_INT 1
68222: DEC
68223: ST_TO_ADDR
68224: LD_VAR 0 2
68228: PUSH
68229: FOR_TO
68230: IFFALSE 68342
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68232: LD_VAR 0 1
68236: PPUSH
68237: LD_VAR 0 2
68241: PUSH
68242: LD_VAR 0 4
68246: ARRAY
68247: PUSH
68248: LD_INT 1
68250: ARRAY
68251: PPUSH
68252: LD_VAR 0 2
68256: PUSH
68257: LD_VAR 0 4
68261: ARRAY
68262: PUSH
68263: LD_INT 2
68265: ARRAY
68266: PPUSH
68267: CALL_OW 297
68271: PUSH
68272: LD_VAR 0 5
68276: LESS
68277: IFFALSE 68340
// begin hex := hexes [ i ] ;
68279: LD_ADDR_VAR 0 7
68283: PUSH
68284: LD_VAR 0 2
68288: PUSH
68289: LD_VAR 0 4
68293: ARRAY
68294: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68295: LD_ADDR_VAR 0 5
68299: PUSH
68300: LD_VAR 0 1
68304: PPUSH
68305: LD_VAR 0 2
68309: PUSH
68310: LD_VAR 0 4
68314: ARRAY
68315: PUSH
68316: LD_INT 1
68318: ARRAY
68319: PPUSH
68320: LD_VAR 0 2
68324: PUSH
68325: LD_VAR 0 4
68329: ARRAY
68330: PUSH
68331: LD_INT 2
68333: ARRAY
68334: PPUSH
68335: CALL_OW 297
68339: ST_TO_ADDR
// end ; end ;
68340: GO 68229
68342: POP
68343: POP
// result := hex ;
68344: LD_ADDR_VAR 0 3
68348: PUSH
68349: LD_VAR 0 7
68353: ST_TO_ADDR
// end ;
68354: LD_VAR 0 3
68358: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68359: LD_INT 0
68361: PPUSH
68362: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68363: LD_VAR 0 1
68367: NOT
68368: PUSH
68369: LD_VAR 0 1
68373: PUSH
68374: LD_INT 21
68376: PUSH
68377: LD_INT 2
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 23
68386: PUSH
68387: LD_INT 2
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PPUSH
68398: CALL_OW 69
68402: IN
68403: NOT
68404: OR
68405: IFFALSE 68409
// exit ;
68407: GO 68456
// for i = 1 to 3 do
68409: LD_ADDR_VAR 0 3
68413: PUSH
68414: DOUBLE
68415: LD_INT 1
68417: DEC
68418: ST_TO_ADDR
68419: LD_INT 3
68421: PUSH
68422: FOR_TO
68423: IFFALSE 68454
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68425: LD_VAR 0 1
68429: PPUSH
68430: CALL_OW 250
68434: PPUSH
68435: LD_VAR 0 1
68439: PPUSH
68440: CALL_OW 251
68444: PPUSH
68445: LD_INT 1
68447: PPUSH
68448: CALL_OW 453
68452: GO 68422
68454: POP
68455: POP
// end ;
68456: LD_VAR 0 2
68460: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68461: LD_INT 0
68463: PPUSH
68464: PPUSH
68465: PPUSH
68466: PPUSH
68467: PPUSH
68468: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68469: LD_VAR 0 1
68473: NOT
68474: PUSH
68475: LD_VAR 0 2
68479: NOT
68480: OR
68481: PUSH
68482: LD_VAR 0 1
68486: PPUSH
68487: CALL_OW 314
68491: OR
68492: IFFALSE 68496
// exit ;
68494: GO 68937
// x := GetX ( enemy_unit ) ;
68496: LD_ADDR_VAR 0 7
68500: PUSH
68501: LD_VAR 0 2
68505: PPUSH
68506: CALL_OW 250
68510: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68511: LD_ADDR_VAR 0 8
68515: PUSH
68516: LD_VAR 0 2
68520: PPUSH
68521: CALL_OW 251
68525: ST_TO_ADDR
// if not x or not y then
68526: LD_VAR 0 7
68530: NOT
68531: PUSH
68532: LD_VAR 0 8
68536: NOT
68537: OR
68538: IFFALSE 68542
// exit ;
68540: GO 68937
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68542: LD_ADDR_VAR 0 6
68546: PUSH
68547: LD_VAR 0 7
68551: PPUSH
68552: LD_INT 0
68554: PPUSH
68555: LD_INT 4
68557: PPUSH
68558: CALL_OW 272
68562: PUSH
68563: LD_VAR 0 8
68567: PPUSH
68568: LD_INT 0
68570: PPUSH
68571: LD_INT 4
68573: PPUSH
68574: CALL_OW 273
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_VAR 0 7
68587: PPUSH
68588: LD_INT 1
68590: PPUSH
68591: LD_INT 4
68593: PPUSH
68594: CALL_OW 272
68598: PUSH
68599: LD_VAR 0 8
68603: PPUSH
68604: LD_INT 1
68606: PPUSH
68607: LD_INT 4
68609: PPUSH
68610: CALL_OW 273
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_VAR 0 7
68623: PPUSH
68624: LD_INT 2
68626: PPUSH
68627: LD_INT 4
68629: PPUSH
68630: CALL_OW 272
68634: PUSH
68635: LD_VAR 0 8
68639: PPUSH
68640: LD_INT 2
68642: PPUSH
68643: LD_INT 4
68645: PPUSH
68646: CALL_OW 273
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_VAR 0 7
68659: PPUSH
68660: LD_INT 3
68662: PPUSH
68663: LD_INT 4
68665: PPUSH
68666: CALL_OW 272
68670: PUSH
68671: LD_VAR 0 8
68675: PPUSH
68676: LD_INT 3
68678: PPUSH
68679: LD_INT 4
68681: PPUSH
68682: CALL_OW 273
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_VAR 0 7
68695: PPUSH
68696: LD_INT 4
68698: PPUSH
68699: LD_INT 4
68701: PPUSH
68702: CALL_OW 272
68706: PUSH
68707: LD_VAR 0 8
68711: PPUSH
68712: LD_INT 4
68714: PPUSH
68715: LD_INT 4
68717: PPUSH
68718: CALL_OW 273
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_VAR 0 7
68731: PPUSH
68732: LD_INT 5
68734: PPUSH
68735: LD_INT 4
68737: PPUSH
68738: CALL_OW 272
68742: PUSH
68743: LD_VAR 0 8
68747: PPUSH
68748: LD_INT 5
68750: PPUSH
68751: LD_INT 4
68753: PPUSH
68754: CALL_OW 273
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: ST_TO_ADDR
// for i = tmp downto 1 do
68771: LD_ADDR_VAR 0 4
68775: PUSH
68776: DOUBLE
68777: LD_VAR 0 6
68781: INC
68782: ST_TO_ADDR
68783: LD_INT 1
68785: PUSH
68786: FOR_DOWNTO
68787: IFFALSE 68888
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68789: LD_VAR 0 6
68793: PUSH
68794: LD_VAR 0 4
68798: ARRAY
68799: PUSH
68800: LD_INT 1
68802: ARRAY
68803: PPUSH
68804: LD_VAR 0 6
68808: PUSH
68809: LD_VAR 0 4
68813: ARRAY
68814: PUSH
68815: LD_INT 2
68817: ARRAY
68818: PPUSH
68819: CALL_OW 488
68823: NOT
68824: PUSH
68825: LD_VAR 0 6
68829: PUSH
68830: LD_VAR 0 4
68834: ARRAY
68835: PUSH
68836: LD_INT 1
68838: ARRAY
68839: PPUSH
68840: LD_VAR 0 6
68844: PUSH
68845: LD_VAR 0 4
68849: ARRAY
68850: PUSH
68851: LD_INT 2
68853: ARRAY
68854: PPUSH
68855: CALL_OW 428
68859: PUSH
68860: LD_INT 0
68862: NONEQUAL
68863: OR
68864: IFFALSE 68886
// tmp := Delete ( tmp , i ) ;
68866: LD_ADDR_VAR 0 6
68870: PUSH
68871: LD_VAR 0 6
68875: PPUSH
68876: LD_VAR 0 4
68880: PPUSH
68881: CALL_OW 3
68885: ST_TO_ADDR
68886: GO 68786
68888: POP
68889: POP
// j := GetClosestHex ( unit , tmp ) ;
68890: LD_ADDR_VAR 0 5
68894: PUSH
68895: LD_VAR 0 1
68899: PPUSH
68900: LD_VAR 0 6
68904: PPUSH
68905: CALL 68190 0 2
68909: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68910: LD_VAR 0 1
68914: PPUSH
68915: LD_VAR 0 5
68919: PUSH
68920: LD_INT 1
68922: ARRAY
68923: PPUSH
68924: LD_VAR 0 5
68928: PUSH
68929: LD_INT 2
68931: ARRAY
68932: PPUSH
68933: CALL_OW 111
// end ;
68937: LD_VAR 0 3
68941: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68942: LD_INT 0
68944: PPUSH
68945: PPUSH
68946: PPUSH
// uc_side = 0 ;
68947: LD_ADDR_OWVAR 20
68951: PUSH
68952: LD_INT 0
68954: ST_TO_ADDR
// uc_nation = 0 ;
68955: LD_ADDR_OWVAR 21
68959: PUSH
68960: LD_INT 0
68962: ST_TO_ADDR
// InitHc ;
68963: CALL_OW 19
// InitVc ;
68967: CALL_OW 20
// if mastodonts then
68971: LD_VAR 0 6
68975: IFFALSE 69042
// for i = 1 to mastodonts do
68977: LD_ADDR_VAR 0 11
68981: PUSH
68982: DOUBLE
68983: LD_INT 1
68985: DEC
68986: ST_TO_ADDR
68987: LD_VAR 0 6
68991: PUSH
68992: FOR_TO
68993: IFFALSE 69040
// begin vc_chassis := 31 ;
68995: LD_ADDR_OWVAR 37
68999: PUSH
69000: LD_INT 31
69002: ST_TO_ADDR
// vc_control := control_rider ;
69003: LD_ADDR_OWVAR 38
69007: PUSH
69008: LD_INT 4
69010: ST_TO_ADDR
// animal := CreateVehicle ;
69011: LD_ADDR_VAR 0 12
69015: PUSH
69016: CALL_OW 45
69020: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69021: LD_VAR 0 12
69025: PPUSH
69026: LD_VAR 0 8
69030: PPUSH
69031: LD_INT 0
69033: PPUSH
69034: CALL 71230 0 3
// end ;
69038: GO 68992
69040: POP
69041: POP
// if horses then
69042: LD_VAR 0 5
69046: IFFALSE 69113
// for i = 1 to horses do
69048: LD_ADDR_VAR 0 11
69052: PUSH
69053: DOUBLE
69054: LD_INT 1
69056: DEC
69057: ST_TO_ADDR
69058: LD_VAR 0 5
69062: PUSH
69063: FOR_TO
69064: IFFALSE 69111
// begin hc_class := 21 ;
69066: LD_ADDR_OWVAR 28
69070: PUSH
69071: LD_INT 21
69073: ST_TO_ADDR
// hc_gallery :=  ;
69074: LD_ADDR_OWVAR 33
69078: PUSH
69079: LD_STRING 
69081: ST_TO_ADDR
// animal := CreateHuman ;
69082: LD_ADDR_VAR 0 12
69086: PUSH
69087: CALL_OW 44
69091: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69092: LD_VAR 0 12
69096: PPUSH
69097: LD_VAR 0 8
69101: PPUSH
69102: LD_INT 0
69104: PPUSH
69105: CALL 71230 0 3
// end ;
69109: GO 69063
69111: POP
69112: POP
// if birds then
69113: LD_VAR 0 1
69117: IFFALSE 69184
// for i = 1 to birds do
69119: LD_ADDR_VAR 0 11
69123: PUSH
69124: DOUBLE
69125: LD_INT 1
69127: DEC
69128: ST_TO_ADDR
69129: LD_VAR 0 1
69133: PUSH
69134: FOR_TO
69135: IFFALSE 69182
// begin hc_class = 18 ;
69137: LD_ADDR_OWVAR 28
69141: PUSH
69142: LD_INT 18
69144: ST_TO_ADDR
// hc_gallery =  ;
69145: LD_ADDR_OWVAR 33
69149: PUSH
69150: LD_STRING 
69152: ST_TO_ADDR
// animal := CreateHuman ;
69153: LD_ADDR_VAR 0 12
69157: PUSH
69158: CALL_OW 44
69162: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69163: LD_VAR 0 12
69167: PPUSH
69168: LD_VAR 0 8
69172: PPUSH
69173: LD_INT 0
69175: PPUSH
69176: CALL 71230 0 3
// end ;
69180: GO 69134
69182: POP
69183: POP
// if tigers then
69184: LD_VAR 0 2
69188: IFFALSE 69272
// for i = 1 to tigers do
69190: LD_ADDR_VAR 0 11
69194: PUSH
69195: DOUBLE
69196: LD_INT 1
69198: DEC
69199: ST_TO_ADDR
69200: LD_VAR 0 2
69204: PUSH
69205: FOR_TO
69206: IFFALSE 69270
// begin hc_class = class_tiger ;
69208: LD_ADDR_OWVAR 28
69212: PUSH
69213: LD_INT 14
69215: ST_TO_ADDR
// hc_gallery =  ;
69216: LD_ADDR_OWVAR 33
69220: PUSH
69221: LD_STRING 
69223: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69224: LD_ADDR_OWVAR 35
69228: PUSH
69229: LD_INT 7
69231: NEG
69232: PPUSH
69233: LD_INT 7
69235: PPUSH
69236: CALL_OW 12
69240: ST_TO_ADDR
// animal := CreateHuman ;
69241: LD_ADDR_VAR 0 12
69245: PUSH
69246: CALL_OW 44
69250: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69251: LD_VAR 0 12
69255: PPUSH
69256: LD_VAR 0 8
69260: PPUSH
69261: LD_INT 0
69263: PPUSH
69264: CALL 71230 0 3
// end ;
69268: GO 69205
69270: POP
69271: POP
// if apemans then
69272: LD_VAR 0 3
69276: IFFALSE 69399
// for i = 1 to apemans do
69278: LD_ADDR_VAR 0 11
69282: PUSH
69283: DOUBLE
69284: LD_INT 1
69286: DEC
69287: ST_TO_ADDR
69288: LD_VAR 0 3
69292: PUSH
69293: FOR_TO
69294: IFFALSE 69397
// begin hc_class = class_apeman ;
69296: LD_ADDR_OWVAR 28
69300: PUSH
69301: LD_INT 12
69303: ST_TO_ADDR
// hc_gallery =  ;
69304: LD_ADDR_OWVAR 33
69308: PUSH
69309: LD_STRING 
69311: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
69312: LD_ADDR_OWVAR 35
69316: PUSH
69317: LD_INT 5
69319: NEG
69320: PPUSH
69321: LD_INT 5
69323: PPUSH
69324: CALL_OW 12
69328: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69329: LD_ADDR_OWVAR 31
69333: PUSH
69334: LD_INT 1
69336: PPUSH
69337: LD_INT 3
69339: PPUSH
69340: CALL_OW 12
69344: PUSH
69345: LD_INT 1
69347: PPUSH
69348: LD_INT 3
69350: PPUSH
69351: CALL_OW 12
69355: PUSH
69356: LD_INT 0
69358: PUSH
69359: LD_INT 0
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: ST_TO_ADDR
// animal := CreateHuman ;
69368: LD_ADDR_VAR 0 12
69372: PUSH
69373: CALL_OW 44
69377: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69378: LD_VAR 0 12
69382: PPUSH
69383: LD_VAR 0 8
69387: PPUSH
69388: LD_INT 0
69390: PPUSH
69391: CALL 71230 0 3
// end ;
69395: GO 69293
69397: POP
69398: POP
// if enchidnas then
69399: LD_VAR 0 4
69403: IFFALSE 69470
// for i = 1 to enchidnas do
69405: LD_ADDR_VAR 0 11
69409: PUSH
69410: DOUBLE
69411: LD_INT 1
69413: DEC
69414: ST_TO_ADDR
69415: LD_VAR 0 4
69419: PUSH
69420: FOR_TO
69421: IFFALSE 69468
// begin hc_class = 13 ;
69423: LD_ADDR_OWVAR 28
69427: PUSH
69428: LD_INT 13
69430: ST_TO_ADDR
// hc_gallery =  ;
69431: LD_ADDR_OWVAR 33
69435: PUSH
69436: LD_STRING 
69438: ST_TO_ADDR
// animal := CreateHuman ;
69439: LD_ADDR_VAR 0 12
69443: PUSH
69444: CALL_OW 44
69448: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69449: LD_VAR 0 12
69453: PPUSH
69454: LD_VAR 0 8
69458: PPUSH
69459: LD_INT 0
69461: PPUSH
69462: CALL 71230 0 3
// end ;
69466: GO 69420
69468: POP
69469: POP
// if fishes then
69470: LD_VAR 0 7
69474: IFFALSE 69541
// for i = 1 to fishes do
69476: LD_ADDR_VAR 0 11
69480: PUSH
69481: DOUBLE
69482: LD_INT 1
69484: DEC
69485: ST_TO_ADDR
69486: LD_VAR 0 7
69490: PUSH
69491: FOR_TO
69492: IFFALSE 69539
// begin hc_class = 20 ;
69494: LD_ADDR_OWVAR 28
69498: PUSH
69499: LD_INT 20
69501: ST_TO_ADDR
// hc_gallery =  ;
69502: LD_ADDR_OWVAR 33
69506: PUSH
69507: LD_STRING 
69509: ST_TO_ADDR
// animal := CreateHuman ;
69510: LD_ADDR_VAR 0 12
69514: PUSH
69515: CALL_OW 44
69519: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69520: LD_VAR 0 12
69524: PPUSH
69525: LD_VAR 0 9
69529: PPUSH
69530: LD_INT 0
69532: PPUSH
69533: CALL 71230 0 3
// end ;
69537: GO 69491
69539: POP
69540: POP
// end ;
69541: LD_VAR 0 10
69545: RET
// export function WantHeal ( sci , unit ) ; begin
69546: LD_INT 0
69548: PPUSH
// if GetTaskList ( sci ) > 0 then
69549: LD_VAR 0 1
69553: PPUSH
69554: CALL_OW 437
69558: PUSH
69559: LD_INT 0
69561: GREATER
69562: IFFALSE 69632
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69564: LD_VAR 0 1
69568: PPUSH
69569: CALL_OW 437
69573: PUSH
69574: LD_INT 1
69576: ARRAY
69577: PUSH
69578: LD_INT 1
69580: ARRAY
69581: PUSH
69582: LD_STRING l
69584: EQUAL
69585: PUSH
69586: LD_VAR 0 1
69590: PPUSH
69591: CALL_OW 437
69595: PUSH
69596: LD_INT 1
69598: ARRAY
69599: PUSH
69600: LD_INT 4
69602: ARRAY
69603: PUSH
69604: LD_VAR 0 2
69608: EQUAL
69609: AND
69610: IFFALSE 69622
// result := true else
69612: LD_ADDR_VAR 0 3
69616: PUSH
69617: LD_INT 1
69619: ST_TO_ADDR
69620: GO 69630
// result := false ;
69622: LD_ADDR_VAR 0 3
69626: PUSH
69627: LD_INT 0
69629: ST_TO_ADDR
// end else
69630: GO 69640
// result := false ;
69632: LD_ADDR_VAR 0 3
69636: PUSH
69637: LD_INT 0
69639: ST_TO_ADDR
// end ;
69640: LD_VAR 0 3
69644: RET
// export function HealTarget ( sci ) ; begin
69645: LD_INT 0
69647: PPUSH
// if not sci then
69648: LD_VAR 0 1
69652: NOT
69653: IFFALSE 69657
// exit ;
69655: GO 69722
// result := 0 ;
69657: LD_ADDR_VAR 0 2
69661: PUSH
69662: LD_INT 0
69664: ST_TO_ADDR
// if GetTaskList ( sci ) then
69665: LD_VAR 0 1
69669: PPUSH
69670: CALL_OW 437
69674: IFFALSE 69722
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69676: LD_VAR 0 1
69680: PPUSH
69681: CALL_OW 437
69685: PUSH
69686: LD_INT 1
69688: ARRAY
69689: PUSH
69690: LD_INT 1
69692: ARRAY
69693: PUSH
69694: LD_STRING l
69696: EQUAL
69697: IFFALSE 69722
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69699: LD_ADDR_VAR 0 2
69703: PUSH
69704: LD_VAR 0 1
69708: PPUSH
69709: CALL_OW 437
69713: PUSH
69714: LD_INT 1
69716: ARRAY
69717: PUSH
69718: LD_INT 4
69720: ARRAY
69721: ST_TO_ADDR
// end ;
69722: LD_VAR 0 2
69726: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69727: LD_INT 0
69729: PPUSH
69730: PPUSH
69731: PPUSH
69732: PPUSH
// if not base_units then
69733: LD_VAR 0 1
69737: NOT
69738: IFFALSE 69742
// exit ;
69740: GO 69829
// result := false ;
69742: LD_ADDR_VAR 0 2
69746: PUSH
69747: LD_INT 0
69749: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69750: LD_ADDR_VAR 0 5
69754: PUSH
69755: LD_VAR 0 1
69759: PPUSH
69760: LD_INT 21
69762: PUSH
69763: LD_INT 3
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PPUSH
69770: CALL_OW 72
69774: ST_TO_ADDR
// if not tmp then
69775: LD_VAR 0 5
69779: NOT
69780: IFFALSE 69784
// exit ;
69782: GO 69829
// for i in tmp do
69784: LD_ADDR_VAR 0 3
69788: PUSH
69789: LD_VAR 0 5
69793: PUSH
69794: FOR_IN
69795: IFFALSE 69827
// begin result := EnemyInRange ( i , 22 ) ;
69797: LD_ADDR_VAR 0 2
69801: PUSH
69802: LD_VAR 0 3
69806: PPUSH
69807: LD_INT 22
69809: PPUSH
69810: CALL 68065 0 2
69814: ST_TO_ADDR
// if result then
69815: LD_VAR 0 2
69819: IFFALSE 69825
// exit ;
69821: POP
69822: POP
69823: GO 69829
// end ;
69825: GO 69794
69827: POP
69828: POP
// end ;
69829: LD_VAR 0 2
69833: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69834: LD_INT 0
69836: PPUSH
69837: PPUSH
// if not units then
69838: LD_VAR 0 1
69842: NOT
69843: IFFALSE 69847
// exit ;
69845: GO 69917
// result := [ ] ;
69847: LD_ADDR_VAR 0 3
69851: PUSH
69852: EMPTY
69853: ST_TO_ADDR
// for i in units do
69854: LD_ADDR_VAR 0 4
69858: PUSH
69859: LD_VAR 0 1
69863: PUSH
69864: FOR_IN
69865: IFFALSE 69915
// if GetTag ( i ) = tag then
69867: LD_VAR 0 4
69871: PPUSH
69872: CALL_OW 110
69876: PUSH
69877: LD_VAR 0 2
69881: EQUAL
69882: IFFALSE 69913
// result := Insert ( result , result + 1 , i ) ;
69884: LD_ADDR_VAR 0 3
69888: PUSH
69889: LD_VAR 0 3
69893: PPUSH
69894: LD_VAR 0 3
69898: PUSH
69899: LD_INT 1
69901: PLUS
69902: PPUSH
69903: LD_VAR 0 4
69907: PPUSH
69908: CALL_OW 2
69912: ST_TO_ADDR
69913: GO 69864
69915: POP
69916: POP
// end ;
69917: LD_VAR 0 3
69921: RET
// export function IsDriver ( un ) ; begin
69922: LD_INT 0
69924: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69925: LD_ADDR_VAR 0 2
69929: PUSH
69930: LD_VAR 0 1
69934: PUSH
69935: LD_INT 55
69937: PUSH
69938: EMPTY
69939: LIST
69940: PPUSH
69941: CALL_OW 69
69945: IN
69946: ST_TO_ADDR
// end ;
69947: LD_VAR 0 2
69951: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69952: LD_INT 0
69954: PPUSH
69955: PPUSH
// list := [ ] ;
69956: LD_ADDR_VAR 0 5
69960: PUSH
69961: EMPTY
69962: ST_TO_ADDR
// case d of 0 :
69963: LD_VAR 0 3
69967: PUSH
69968: LD_INT 0
69970: DOUBLE
69971: EQUAL
69972: IFTRUE 69976
69974: GO 70109
69976: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69977: LD_ADDR_VAR 0 5
69981: PUSH
69982: LD_VAR 0 1
69986: PUSH
69987: LD_INT 4
69989: MINUS
69990: PUSH
69991: LD_VAR 0 2
69995: PUSH
69996: LD_INT 4
69998: MINUS
69999: PUSH
70000: LD_INT 2
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: LIST
70007: PUSH
70008: LD_VAR 0 1
70012: PUSH
70013: LD_INT 3
70015: MINUS
70016: PUSH
70017: LD_VAR 0 2
70021: PUSH
70022: LD_INT 1
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: LIST
70029: PUSH
70030: LD_VAR 0 1
70034: PUSH
70035: LD_INT 4
70037: PLUS
70038: PUSH
70039: LD_VAR 0 2
70043: PUSH
70044: LD_INT 4
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: LIST
70051: PUSH
70052: LD_VAR 0 1
70056: PUSH
70057: LD_INT 3
70059: PLUS
70060: PUSH
70061: LD_VAR 0 2
70065: PUSH
70066: LD_INT 3
70068: PLUS
70069: PUSH
70070: LD_INT 5
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: LIST
70077: PUSH
70078: LD_VAR 0 1
70082: PUSH
70083: LD_VAR 0 2
70087: PUSH
70088: LD_INT 4
70090: PLUS
70091: PUSH
70092: LD_INT 0
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: LIST
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: ST_TO_ADDR
// end ; 1 :
70107: GO 70807
70109: LD_INT 1
70111: DOUBLE
70112: EQUAL
70113: IFTRUE 70117
70115: GO 70250
70117: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70118: LD_ADDR_VAR 0 5
70122: PUSH
70123: LD_VAR 0 1
70127: PUSH
70128: LD_VAR 0 2
70132: PUSH
70133: LD_INT 4
70135: MINUS
70136: PUSH
70137: LD_INT 3
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: LIST
70144: PUSH
70145: LD_VAR 0 1
70149: PUSH
70150: LD_INT 3
70152: MINUS
70153: PUSH
70154: LD_VAR 0 2
70158: PUSH
70159: LD_INT 3
70161: MINUS
70162: PUSH
70163: LD_INT 2
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: LIST
70170: PUSH
70171: LD_VAR 0 1
70175: PUSH
70176: LD_INT 4
70178: MINUS
70179: PUSH
70180: LD_VAR 0 2
70184: PUSH
70185: LD_INT 1
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: LIST
70192: PUSH
70193: LD_VAR 0 1
70197: PUSH
70198: LD_VAR 0 2
70202: PUSH
70203: LD_INT 3
70205: PLUS
70206: PUSH
70207: LD_INT 0
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: LIST
70214: PUSH
70215: LD_VAR 0 1
70219: PUSH
70220: LD_INT 4
70222: PLUS
70223: PUSH
70224: LD_VAR 0 2
70228: PUSH
70229: LD_INT 4
70231: PLUS
70232: PUSH
70233: LD_INT 5
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: LIST
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: ST_TO_ADDR
// end ; 2 :
70248: GO 70807
70250: LD_INT 2
70252: DOUBLE
70253: EQUAL
70254: IFTRUE 70258
70256: GO 70387
70258: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70259: LD_ADDR_VAR 0 5
70263: PUSH
70264: LD_VAR 0 1
70268: PUSH
70269: LD_VAR 0 2
70273: PUSH
70274: LD_INT 3
70276: MINUS
70277: PUSH
70278: LD_INT 3
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: LIST
70285: PUSH
70286: LD_VAR 0 1
70290: PUSH
70291: LD_INT 4
70293: PLUS
70294: PUSH
70295: LD_VAR 0 2
70299: PUSH
70300: LD_INT 4
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: LIST
70307: PUSH
70308: LD_VAR 0 1
70312: PUSH
70313: LD_VAR 0 2
70317: PUSH
70318: LD_INT 4
70320: PLUS
70321: PUSH
70322: LD_INT 0
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: LIST
70329: PUSH
70330: LD_VAR 0 1
70334: PUSH
70335: LD_INT 3
70337: MINUS
70338: PUSH
70339: LD_VAR 0 2
70343: PUSH
70344: LD_INT 1
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: LIST
70351: PUSH
70352: LD_VAR 0 1
70356: PUSH
70357: LD_INT 4
70359: MINUS
70360: PUSH
70361: LD_VAR 0 2
70365: PUSH
70366: LD_INT 4
70368: MINUS
70369: PUSH
70370: LD_INT 2
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: LIST
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: ST_TO_ADDR
// end ; 3 :
70385: GO 70807
70387: LD_INT 3
70389: DOUBLE
70390: EQUAL
70391: IFTRUE 70395
70393: GO 70528
70395: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70396: LD_ADDR_VAR 0 5
70400: PUSH
70401: LD_VAR 0 1
70405: PUSH
70406: LD_INT 3
70408: PLUS
70409: PUSH
70410: LD_VAR 0 2
70414: PUSH
70415: LD_INT 4
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: LIST
70422: PUSH
70423: LD_VAR 0 1
70427: PUSH
70428: LD_INT 4
70430: PLUS
70431: PUSH
70432: LD_VAR 0 2
70436: PUSH
70437: LD_INT 4
70439: PLUS
70440: PUSH
70441: LD_INT 5
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: LIST
70448: PUSH
70449: LD_VAR 0 1
70453: PUSH
70454: LD_INT 4
70456: MINUS
70457: PUSH
70458: LD_VAR 0 2
70462: PUSH
70463: LD_INT 1
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: LIST
70470: PUSH
70471: LD_VAR 0 1
70475: PUSH
70476: LD_VAR 0 2
70480: PUSH
70481: LD_INT 4
70483: MINUS
70484: PUSH
70485: LD_INT 3
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: LIST
70492: PUSH
70493: LD_VAR 0 1
70497: PUSH
70498: LD_INT 3
70500: MINUS
70501: PUSH
70502: LD_VAR 0 2
70506: PUSH
70507: LD_INT 3
70509: MINUS
70510: PUSH
70511: LD_INT 2
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: LIST
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: ST_TO_ADDR
// end ; 4 :
70526: GO 70807
70528: LD_INT 4
70530: DOUBLE
70531: EQUAL
70532: IFTRUE 70536
70534: GO 70669
70536: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70537: LD_ADDR_VAR 0 5
70541: PUSH
70542: LD_VAR 0 1
70546: PUSH
70547: LD_VAR 0 2
70551: PUSH
70552: LD_INT 4
70554: PLUS
70555: PUSH
70556: LD_INT 0
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: LIST
70563: PUSH
70564: LD_VAR 0 1
70568: PUSH
70569: LD_INT 3
70571: PLUS
70572: PUSH
70573: LD_VAR 0 2
70577: PUSH
70578: LD_INT 3
70580: PLUS
70581: PUSH
70582: LD_INT 5
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: LIST
70589: PUSH
70590: LD_VAR 0 1
70594: PUSH
70595: LD_INT 4
70597: PLUS
70598: PUSH
70599: LD_VAR 0 2
70603: PUSH
70604: LD_INT 4
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: LIST
70611: PUSH
70612: LD_VAR 0 1
70616: PUSH
70617: LD_VAR 0 2
70621: PUSH
70622: LD_INT 3
70624: MINUS
70625: PUSH
70626: LD_INT 3
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: LIST
70633: PUSH
70634: LD_VAR 0 1
70638: PUSH
70639: LD_INT 4
70641: MINUS
70642: PUSH
70643: LD_VAR 0 2
70647: PUSH
70648: LD_INT 4
70650: MINUS
70651: PUSH
70652: LD_INT 2
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: LIST
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: ST_TO_ADDR
// end ; 5 :
70667: GO 70807
70669: LD_INT 5
70671: DOUBLE
70672: EQUAL
70673: IFTRUE 70677
70675: GO 70806
70677: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70678: LD_ADDR_VAR 0 5
70682: PUSH
70683: LD_VAR 0 1
70687: PUSH
70688: LD_INT 4
70690: MINUS
70691: PUSH
70692: LD_VAR 0 2
70696: PUSH
70697: LD_INT 1
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: LIST
70704: PUSH
70705: LD_VAR 0 1
70709: PUSH
70710: LD_VAR 0 2
70714: PUSH
70715: LD_INT 4
70717: MINUS
70718: PUSH
70719: LD_INT 3
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: LIST
70726: PUSH
70727: LD_VAR 0 1
70731: PUSH
70732: LD_INT 4
70734: PLUS
70735: PUSH
70736: LD_VAR 0 2
70740: PUSH
70741: LD_INT 4
70743: PLUS
70744: PUSH
70745: LD_INT 5
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: LIST
70752: PUSH
70753: LD_VAR 0 1
70757: PUSH
70758: LD_INT 3
70760: PLUS
70761: PUSH
70762: LD_VAR 0 2
70766: PUSH
70767: LD_INT 4
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: LIST
70774: PUSH
70775: LD_VAR 0 1
70779: PUSH
70780: LD_VAR 0 2
70784: PUSH
70785: LD_INT 3
70787: PLUS
70788: PUSH
70789: LD_INT 0
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: LIST
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: ST_TO_ADDR
// end ; end ;
70804: GO 70807
70806: POP
// result := list ;
70807: LD_ADDR_VAR 0 4
70811: PUSH
70812: LD_VAR 0 5
70816: ST_TO_ADDR
// end ;
70817: LD_VAR 0 4
70821: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70822: LD_INT 0
70824: PPUSH
70825: PPUSH
70826: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70827: LD_VAR 0 1
70831: NOT
70832: PUSH
70833: LD_VAR 0 2
70837: PUSH
70838: LD_INT 1
70840: PUSH
70841: LD_INT 2
70843: PUSH
70844: LD_INT 3
70846: PUSH
70847: LD_INT 4
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: IN
70856: NOT
70857: OR
70858: IFFALSE 70862
// exit ;
70860: GO 70954
// tmp := [ ] ;
70862: LD_ADDR_VAR 0 5
70866: PUSH
70867: EMPTY
70868: ST_TO_ADDR
// for i in units do
70869: LD_ADDR_VAR 0 4
70873: PUSH
70874: LD_VAR 0 1
70878: PUSH
70879: FOR_IN
70880: IFFALSE 70923
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70882: LD_ADDR_VAR 0 5
70886: PUSH
70887: LD_VAR 0 5
70891: PPUSH
70892: LD_VAR 0 5
70896: PUSH
70897: LD_INT 1
70899: PLUS
70900: PPUSH
70901: LD_VAR 0 4
70905: PPUSH
70906: LD_VAR 0 2
70910: PPUSH
70911: CALL_OW 259
70915: PPUSH
70916: CALL_OW 2
70920: ST_TO_ADDR
70921: GO 70879
70923: POP
70924: POP
// if not tmp then
70925: LD_VAR 0 5
70929: NOT
70930: IFFALSE 70934
// exit ;
70932: GO 70954
// result := SortListByListDesc ( units , tmp ) ;
70934: LD_ADDR_VAR 0 3
70938: PUSH
70939: LD_VAR 0 1
70943: PPUSH
70944: LD_VAR 0 5
70948: PPUSH
70949: CALL_OW 77
70953: ST_TO_ADDR
// end ;
70954: LD_VAR 0 3
70958: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70959: LD_INT 0
70961: PPUSH
70962: PPUSH
70963: PPUSH
// result := false ;
70964: LD_ADDR_VAR 0 3
70968: PUSH
70969: LD_INT 0
70971: ST_TO_ADDR
// x := GetX ( building ) ;
70972: LD_ADDR_VAR 0 4
70976: PUSH
70977: LD_VAR 0 2
70981: PPUSH
70982: CALL_OW 250
70986: ST_TO_ADDR
// y := GetY ( building ) ;
70987: LD_ADDR_VAR 0 5
70991: PUSH
70992: LD_VAR 0 2
70996: PPUSH
70997: CALL_OW 251
71001: ST_TO_ADDR
// if not building or not x or not y then
71002: LD_VAR 0 2
71006: NOT
71007: PUSH
71008: LD_VAR 0 4
71012: NOT
71013: OR
71014: PUSH
71015: LD_VAR 0 5
71019: NOT
71020: OR
71021: IFFALSE 71025
// exit ;
71023: GO 71117
// if GetTaskList ( unit ) then
71025: LD_VAR 0 1
71029: PPUSH
71030: CALL_OW 437
71034: IFFALSE 71117
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71036: LD_STRING e
71038: PUSH
71039: LD_VAR 0 1
71043: PPUSH
71044: CALL_OW 437
71048: PUSH
71049: LD_INT 1
71051: ARRAY
71052: PUSH
71053: LD_INT 1
71055: ARRAY
71056: EQUAL
71057: PUSH
71058: LD_VAR 0 4
71062: PUSH
71063: LD_VAR 0 1
71067: PPUSH
71068: CALL_OW 437
71072: PUSH
71073: LD_INT 1
71075: ARRAY
71076: PUSH
71077: LD_INT 2
71079: ARRAY
71080: EQUAL
71081: AND
71082: PUSH
71083: LD_VAR 0 5
71087: PUSH
71088: LD_VAR 0 1
71092: PPUSH
71093: CALL_OW 437
71097: PUSH
71098: LD_INT 1
71100: ARRAY
71101: PUSH
71102: LD_INT 3
71104: ARRAY
71105: EQUAL
71106: AND
71107: IFFALSE 71117
// result := true end ;
71109: LD_ADDR_VAR 0 3
71113: PUSH
71114: LD_INT 1
71116: ST_TO_ADDR
// end ;
71117: LD_VAR 0 3
71121: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71122: LD_INT 0
71124: PPUSH
// result := false ;
71125: LD_ADDR_VAR 0 4
71129: PUSH
71130: LD_INT 0
71132: ST_TO_ADDR
// if GetTaskList ( unit ) then
71133: LD_VAR 0 1
71137: PPUSH
71138: CALL_OW 437
71142: IFFALSE 71225
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71144: LD_STRING M
71146: PUSH
71147: LD_VAR 0 1
71151: PPUSH
71152: CALL_OW 437
71156: PUSH
71157: LD_INT 1
71159: ARRAY
71160: PUSH
71161: LD_INT 1
71163: ARRAY
71164: EQUAL
71165: PUSH
71166: LD_VAR 0 2
71170: PUSH
71171: LD_VAR 0 1
71175: PPUSH
71176: CALL_OW 437
71180: PUSH
71181: LD_INT 1
71183: ARRAY
71184: PUSH
71185: LD_INT 2
71187: ARRAY
71188: EQUAL
71189: AND
71190: PUSH
71191: LD_VAR 0 3
71195: PUSH
71196: LD_VAR 0 1
71200: PPUSH
71201: CALL_OW 437
71205: PUSH
71206: LD_INT 1
71208: ARRAY
71209: PUSH
71210: LD_INT 3
71212: ARRAY
71213: EQUAL
71214: AND
71215: IFFALSE 71225
// result := true ;
71217: LD_ADDR_VAR 0 4
71221: PUSH
71222: LD_INT 1
71224: ST_TO_ADDR
// end ; end ;
71225: LD_VAR 0 4
71229: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71230: LD_INT 0
71232: PPUSH
71233: PPUSH
71234: PPUSH
71235: PPUSH
// if not unit or not area then
71236: LD_VAR 0 1
71240: NOT
71241: PUSH
71242: LD_VAR 0 2
71246: NOT
71247: OR
71248: IFFALSE 71252
// exit ;
71250: GO 71416
// tmp := AreaToList ( area , i ) ;
71252: LD_ADDR_VAR 0 6
71256: PUSH
71257: LD_VAR 0 2
71261: PPUSH
71262: LD_VAR 0 5
71266: PPUSH
71267: CALL_OW 517
71271: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71272: LD_ADDR_VAR 0 5
71276: PUSH
71277: DOUBLE
71278: LD_INT 1
71280: DEC
71281: ST_TO_ADDR
71282: LD_VAR 0 6
71286: PUSH
71287: LD_INT 1
71289: ARRAY
71290: PUSH
71291: FOR_TO
71292: IFFALSE 71414
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71294: LD_ADDR_VAR 0 7
71298: PUSH
71299: LD_VAR 0 6
71303: PUSH
71304: LD_INT 1
71306: ARRAY
71307: PUSH
71308: LD_VAR 0 5
71312: ARRAY
71313: PUSH
71314: LD_VAR 0 6
71318: PUSH
71319: LD_INT 2
71321: ARRAY
71322: PUSH
71323: LD_VAR 0 5
71327: ARRAY
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71333: LD_VAR 0 7
71337: PUSH
71338: LD_INT 1
71340: ARRAY
71341: PPUSH
71342: LD_VAR 0 7
71346: PUSH
71347: LD_INT 2
71349: ARRAY
71350: PPUSH
71351: CALL_OW 428
71355: PUSH
71356: LD_INT 0
71358: EQUAL
71359: IFFALSE 71412
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71361: LD_VAR 0 1
71365: PPUSH
71366: LD_VAR 0 7
71370: PUSH
71371: LD_INT 1
71373: ARRAY
71374: PPUSH
71375: LD_VAR 0 7
71379: PUSH
71380: LD_INT 2
71382: ARRAY
71383: PPUSH
71384: LD_VAR 0 3
71388: PPUSH
71389: CALL_OW 48
// result := IsPlaced ( unit ) ;
71393: LD_ADDR_VAR 0 4
71397: PUSH
71398: LD_VAR 0 1
71402: PPUSH
71403: CALL_OW 305
71407: ST_TO_ADDR
// exit ;
71408: POP
71409: POP
71410: GO 71416
// end ; end ;
71412: GO 71291
71414: POP
71415: POP
// end ;
71416: LD_VAR 0 4
71420: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71421: LD_INT 0
71423: PPUSH
71424: PPUSH
71425: PPUSH
// if not side or side > 8 then
71426: LD_VAR 0 1
71430: NOT
71431: PUSH
71432: LD_VAR 0 1
71436: PUSH
71437: LD_INT 8
71439: GREATER
71440: OR
71441: IFFALSE 71445
// exit ;
71443: GO 71632
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71445: LD_ADDR_VAR 0 4
71449: PUSH
71450: LD_INT 22
71452: PUSH
71453: LD_VAR 0 1
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PUSH
71462: LD_INT 21
71464: PUSH
71465: LD_INT 3
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PPUSH
71476: CALL_OW 69
71480: ST_TO_ADDR
// if not tmp then
71481: LD_VAR 0 4
71485: NOT
71486: IFFALSE 71490
// exit ;
71488: GO 71632
// enable_addtolog := true ;
71490: LD_ADDR_OWVAR 81
71494: PUSH
71495: LD_INT 1
71497: ST_TO_ADDR
// AddToLog ( [ ) ;
71498: LD_STRING [
71500: PPUSH
71501: CALL_OW 561
// for i in tmp do
71505: LD_ADDR_VAR 0 3
71509: PUSH
71510: LD_VAR 0 4
71514: PUSH
71515: FOR_IN
71516: IFFALSE 71623
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71518: LD_STRING [
71520: PUSH
71521: LD_VAR 0 3
71525: PPUSH
71526: CALL_OW 266
71530: STR
71531: PUSH
71532: LD_STRING , 
71534: STR
71535: PUSH
71536: LD_VAR 0 3
71540: PPUSH
71541: CALL_OW 250
71545: STR
71546: PUSH
71547: LD_STRING , 
71549: STR
71550: PUSH
71551: LD_VAR 0 3
71555: PPUSH
71556: CALL_OW 251
71560: STR
71561: PUSH
71562: LD_STRING , 
71564: STR
71565: PUSH
71566: LD_VAR 0 3
71570: PPUSH
71571: CALL_OW 254
71575: STR
71576: PUSH
71577: LD_STRING , 
71579: STR
71580: PUSH
71581: LD_VAR 0 3
71585: PPUSH
71586: LD_INT 1
71588: PPUSH
71589: CALL_OW 268
71593: STR
71594: PUSH
71595: LD_STRING , 
71597: STR
71598: PUSH
71599: LD_VAR 0 3
71603: PPUSH
71604: LD_INT 2
71606: PPUSH
71607: CALL_OW 268
71611: STR
71612: PUSH
71613: LD_STRING ],
71615: STR
71616: PPUSH
71617: CALL_OW 561
// end ;
71621: GO 71515
71623: POP
71624: POP
// AddToLog ( ]; ) ;
71625: LD_STRING ];
71627: PPUSH
71628: CALL_OW 561
// end ;
71632: LD_VAR 0 2
71636: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71637: LD_INT 0
71639: PPUSH
71640: PPUSH
71641: PPUSH
71642: PPUSH
71643: PPUSH
// if not area or not rate or not max then
71644: LD_VAR 0 1
71648: NOT
71649: PUSH
71650: LD_VAR 0 2
71654: NOT
71655: OR
71656: PUSH
71657: LD_VAR 0 4
71661: NOT
71662: OR
71663: IFFALSE 71667
// exit ;
71665: GO 71859
// while 1 do
71667: LD_INT 1
71669: IFFALSE 71859
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71671: LD_ADDR_VAR 0 9
71675: PUSH
71676: LD_VAR 0 1
71680: PPUSH
71681: LD_INT 1
71683: PPUSH
71684: CALL_OW 287
71688: PUSH
71689: LD_INT 10
71691: MUL
71692: ST_TO_ADDR
// r := rate / 10 ;
71693: LD_ADDR_VAR 0 7
71697: PUSH
71698: LD_VAR 0 2
71702: PUSH
71703: LD_INT 10
71705: DIVREAL
71706: ST_TO_ADDR
// time := 1 1$00 ;
71707: LD_ADDR_VAR 0 8
71711: PUSH
71712: LD_INT 2100
71714: ST_TO_ADDR
// if amount < min then
71715: LD_VAR 0 9
71719: PUSH
71720: LD_VAR 0 3
71724: LESS
71725: IFFALSE 71743
// r := r * 2 else
71727: LD_ADDR_VAR 0 7
71731: PUSH
71732: LD_VAR 0 7
71736: PUSH
71737: LD_INT 2
71739: MUL
71740: ST_TO_ADDR
71741: GO 71769
// if amount > max then
71743: LD_VAR 0 9
71747: PUSH
71748: LD_VAR 0 4
71752: GREATER
71753: IFFALSE 71769
// r := r / 2 ;
71755: LD_ADDR_VAR 0 7
71759: PUSH
71760: LD_VAR 0 7
71764: PUSH
71765: LD_INT 2
71767: DIVREAL
71768: ST_TO_ADDR
// time := time / r ;
71769: LD_ADDR_VAR 0 8
71773: PUSH
71774: LD_VAR 0 8
71778: PUSH
71779: LD_VAR 0 7
71783: DIVREAL
71784: ST_TO_ADDR
// if time < 0 then
71785: LD_VAR 0 8
71789: PUSH
71790: LD_INT 0
71792: LESS
71793: IFFALSE 71810
// time := time * - 1 ;
71795: LD_ADDR_VAR 0 8
71799: PUSH
71800: LD_VAR 0 8
71804: PUSH
71805: LD_INT 1
71807: NEG
71808: MUL
71809: ST_TO_ADDR
// wait ( time ) ;
71810: LD_VAR 0 8
71814: PPUSH
71815: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71819: LD_INT 35
71821: PPUSH
71822: LD_INT 875
71824: PPUSH
71825: CALL_OW 12
71829: PPUSH
71830: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71834: LD_INT 1
71836: PPUSH
71837: LD_INT 5
71839: PPUSH
71840: CALL_OW 12
71844: PPUSH
71845: LD_VAR 0 1
71849: PPUSH
71850: LD_INT 1
71852: PPUSH
71853: CALL_OW 55
// end ;
71857: GO 71667
// end ;
71859: LD_VAR 0 5
71863: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71864: LD_INT 0
71866: PPUSH
71867: PPUSH
71868: PPUSH
71869: PPUSH
71870: PPUSH
71871: PPUSH
71872: PPUSH
71873: PPUSH
// if not turrets or not factories then
71874: LD_VAR 0 1
71878: NOT
71879: PUSH
71880: LD_VAR 0 2
71884: NOT
71885: OR
71886: IFFALSE 71890
// exit ;
71888: GO 72197
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71890: LD_ADDR_VAR 0 10
71894: PUSH
71895: LD_INT 5
71897: PUSH
71898: LD_INT 6
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 2
71907: PUSH
71908: LD_INT 4
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 3
71917: PUSH
71918: LD_INT 5
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: LIST
71929: PUSH
71930: LD_INT 24
71932: PUSH
71933: LD_INT 25
71935: PUSH
71936: EMPTY
71937: LIST
71938: LIST
71939: PUSH
71940: LD_INT 23
71942: PUSH
71943: LD_INT 27
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 42
71956: PUSH
71957: LD_INT 43
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 44
71966: PUSH
71967: LD_INT 46
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 45
71976: PUSH
71977: LD_INT 47
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: LIST
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: LIST
71993: ST_TO_ADDR
// result := [ ] ;
71994: LD_ADDR_VAR 0 3
71998: PUSH
71999: EMPTY
72000: ST_TO_ADDR
// for i in turrets do
72001: LD_ADDR_VAR 0 4
72005: PUSH
72006: LD_VAR 0 1
72010: PUSH
72011: FOR_IN
72012: IFFALSE 72195
// begin nat := GetNation ( i ) ;
72014: LD_ADDR_VAR 0 7
72018: PUSH
72019: LD_VAR 0 4
72023: PPUSH
72024: CALL_OW 248
72028: ST_TO_ADDR
// weapon := 0 ;
72029: LD_ADDR_VAR 0 8
72033: PUSH
72034: LD_INT 0
72036: ST_TO_ADDR
// if not nat then
72037: LD_VAR 0 7
72041: NOT
72042: IFFALSE 72046
// continue ;
72044: GO 72011
// for j in list [ nat ] do
72046: LD_ADDR_VAR 0 5
72050: PUSH
72051: LD_VAR 0 10
72055: PUSH
72056: LD_VAR 0 7
72060: ARRAY
72061: PUSH
72062: FOR_IN
72063: IFFALSE 72104
// if GetBWeapon ( i ) = j [ 1 ] then
72065: LD_VAR 0 4
72069: PPUSH
72070: CALL_OW 269
72074: PUSH
72075: LD_VAR 0 5
72079: PUSH
72080: LD_INT 1
72082: ARRAY
72083: EQUAL
72084: IFFALSE 72102
// begin weapon := j [ 2 ] ;
72086: LD_ADDR_VAR 0 8
72090: PUSH
72091: LD_VAR 0 5
72095: PUSH
72096: LD_INT 2
72098: ARRAY
72099: ST_TO_ADDR
// break ;
72100: GO 72104
// end ;
72102: GO 72062
72104: POP
72105: POP
// if not weapon then
72106: LD_VAR 0 8
72110: NOT
72111: IFFALSE 72115
// continue ;
72113: GO 72011
// for k in factories do
72115: LD_ADDR_VAR 0 6
72119: PUSH
72120: LD_VAR 0 2
72124: PUSH
72125: FOR_IN
72126: IFFALSE 72191
// begin weapons := AvailableWeaponList ( k ) ;
72128: LD_ADDR_VAR 0 9
72132: PUSH
72133: LD_VAR 0 6
72137: PPUSH
72138: CALL_OW 478
72142: ST_TO_ADDR
// if not weapons then
72143: LD_VAR 0 9
72147: NOT
72148: IFFALSE 72152
// continue ;
72150: GO 72125
// if weapon in weapons then
72152: LD_VAR 0 8
72156: PUSH
72157: LD_VAR 0 9
72161: IN
72162: IFFALSE 72189
// begin result := [ i , weapon ] ;
72164: LD_ADDR_VAR 0 3
72168: PUSH
72169: LD_VAR 0 4
72173: PUSH
72174: LD_VAR 0 8
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: ST_TO_ADDR
// exit ;
72183: POP
72184: POP
72185: POP
72186: POP
72187: GO 72197
// end ; end ;
72189: GO 72125
72191: POP
72192: POP
// end ;
72193: GO 72011
72195: POP
72196: POP
// end ;
72197: LD_VAR 0 3
72201: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72202: LD_INT 0
72204: PPUSH
// if not side or side > 8 then
72205: LD_VAR 0 3
72209: NOT
72210: PUSH
72211: LD_VAR 0 3
72215: PUSH
72216: LD_INT 8
72218: GREATER
72219: OR
72220: IFFALSE 72224
// exit ;
72222: GO 72283
// if not range then
72224: LD_VAR 0 4
72228: NOT
72229: IFFALSE 72240
// range := - 12 ;
72231: LD_ADDR_VAR 0 4
72235: PUSH
72236: LD_INT 12
72238: NEG
72239: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72240: LD_VAR 0 1
72244: PPUSH
72245: LD_VAR 0 2
72249: PPUSH
72250: LD_VAR 0 3
72254: PPUSH
72255: LD_VAR 0 4
72259: PPUSH
72260: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72264: LD_VAR 0 1
72268: PPUSH
72269: LD_VAR 0 2
72273: PPUSH
72274: LD_VAR 0 3
72278: PPUSH
72279: CALL_OW 331
// end ;
72283: LD_VAR 0 5
72287: RET
// export function Video ( mode ) ; begin
72288: LD_INT 0
72290: PPUSH
// ingame_video = mode ;
72291: LD_ADDR_OWVAR 52
72295: PUSH
72296: LD_VAR 0 1
72300: ST_TO_ADDR
// interface_hidden = mode ;
72301: LD_ADDR_OWVAR 54
72305: PUSH
72306: LD_VAR 0 1
72310: ST_TO_ADDR
// end ;
72311: LD_VAR 0 2
72315: RET
// export function Join ( array , element ) ; begin
72316: LD_INT 0
72318: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72319: LD_ADDR_VAR 0 3
72323: PUSH
72324: LD_VAR 0 1
72328: PPUSH
72329: LD_VAR 0 1
72333: PUSH
72334: LD_INT 1
72336: PLUS
72337: PPUSH
72338: LD_VAR 0 2
72342: PPUSH
72343: CALL_OW 1
72347: ST_TO_ADDR
// end ;
72348: LD_VAR 0 3
72352: RET
// export function JoinUnion ( array , element ) ; begin
72353: LD_INT 0
72355: PPUSH
// result := array union element ;
72356: LD_ADDR_VAR 0 3
72360: PUSH
72361: LD_VAR 0 1
72365: PUSH
72366: LD_VAR 0 2
72370: UNION
72371: ST_TO_ADDR
// end ;
72372: LD_VAR 0 3
72376: RET
// export function GetBehemoths ( side ) ; begin
72377: LD_INT 0
72379: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72380: LD_ADDR_VAR 0 2
72384: PUSH
72385: LD_INT 22
72387: PUSH
72388: LD_VAR 0 1
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 31
72399: PUSH
72400: LD_INT 25
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PPUSH
72411: CALL_OW 69
72415: ST_TO_ADDR
// end ;
72416: LD_VAR 0 2
72420: RET
// export function Shuffle ( array ) ; var i , index ; begin
72421: LD_INT 0
72423: PPUSH
72424: PPUSH
72425: PPUSH
// result := [ ] ;
72426: LD_ADDR_VAR 0 2
72430: PUSH
72431: EMPTY
72432: ST_TO_ADDR
// if not array then
72433: LD_VAR 0 1
72437: NOT
72438: IFFALSE 72442
// exit ;
72440: GO 72541
// Randomize ;
72442: CALL_OW 10
// for i = array downto 1 do
72446: LD_ADDR_VAR 0 3
72450: PUSH
72451: DOUBLE
72452: LD_VAR 0 1
72456: INC
72457: ST_TO_ADDR
72458: LD_INT 1
72460: PUSH
72461: FOR_DOWNTO
72462: IFFALSE 72539
// begin index := rand ( 1 , array ) ;
72464: LD_ADDR_VAR 0 4
72468: PUSH
72469: LD_INT 1
72471: PPUSH
72472: LD_VAR 0 1
72476: PPUSH
72477: CALL_OW 12
72481: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72482: LD_ADDR_VAR 0 2
72486: PUSH
72487: LD_VAR 0 2
72491: PPUSH
72492: LD_VAR 0 2
72496: PUSH
72497: LD_INT 1
72499: PLUS
72500: PPUSH
72501: LD_VAR 0 1
72505: PUSH
72506: LD_VAR 0 4
72510: ARRAY
72511: PPUSH
72512: CALL_OW 2
72516: ST_TO_ADDR
// array := Delete ( array , index ) ;
72517: LD_ADDR_VAR 0 1
72521: PUSH
72522: LD_VAR 0 1
72526: PPUSH
72527: LD_VAR 0 4
72531: PPUSH
72532: CALL_OW 3
72536: ST_TO_ADDR
// end ;
72537: GO 72461
72539: POP
72540: POP
// end ;
72541: LD_VAR 0 2
72545: RET
// export function GetBaseMaterials ( base ) ; begin
72546: LD_INT 0
72548: PPUSH
// result := [ 0 , 0 , 0 ] ;
72549: LD_ADDR_VAR 0 2
72553: PUSH
72554: LD_INT 0
72556: PUSH
72557: LD_INT 0
72559: PUSH
72560: LD_INT 0
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: LIST
72567: ST_TO_ADDR
// if not base then
72568: LD_VAR 0 1
72572: NOT
72573: IFFALSE 72577
// exit ;
72575: GO 72626
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72577: LD_ADDR_VAR 0 2
72581: PUSH
72582: LD_VAR 0 1
72586: PPUSH
72587: LD_INT 1
72589: PPUSH
72590: CALL_OW 275
72594: PUSH
72595: LD_VAR 0 1
72599: PPUSH
72600: LD_INT 2
72602: PPUSH
72603: CALL_OW 275
72607: PUSH
72608: LD_VAR 0 1
72612: PPUSH
72613: LD_INT 3
72615: PPUSH
72616: CALL_OW 275
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: LIST
72625: ST_TO_ADDR
// end ;
72626: LD_VAR 0 2
72630: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72631: LD_INT 0
72633: PPUSH
72634: PPUSH
// result := array ;
72635: LD_ADDR_VAR 0 3
72639: PUSH
72640: LD_VAR 0 1
72644: ST_TO_ADDR
// if size > 0 then
72645: LD_VAR 0 2
72649: PUSH
72650: LD_INT 0
72652: GREATER
72653: IFFALSE 72699
// for i := array downto size do
72655: LD_ADDR_VAR 0 4
72659: PUSH
72660: DOUBLE
72661: LD_VAR 0 1
72665: INC
72666: ST_TO_ADDR
72667: LD_VAR 0 2
72671: PUSH
72672: FOR_DOWNTO
72673: IFFALSE 72697
// result := Delete ( result , result ) ;
72675: LD_ADDR_VAR 0 3
72679: PUSH
72680: LD_VAR 0 3
72684: PPUSH
72685: LD_VAR 0 3
72689: PPUSH
72690: CALL_OW 3
72694: ST_TO_ADDR
72695: GO 72672
72697: POP
72698: POP
// end ;
72699: LD_VAR 0 3
72703: RET
// export function ComExit ( unit ) ; var tmp ; begin
72704: LD_INT 0
72706: PPUSH
72707: PPUSH
// if not IsInUnit ( unit ) then
72708: LD_VAR 0 1
72712: PPUSH
72713: CALL_OW 310
72717: NOT
72718: IFFALSE 72722
// exit ;
72720: GO 72782
// tmp := IsInUnit ( unit ) ;
72722: LD_ADDR_VAR 0 3
72726: PUSH
72727: LD_VAR 0 1
72731: PPUSH
72732: CALL_OW 310
72736: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72737: LD_VAR 0 3
72741: PPUSH
72742: CALL_OW 247
72746: PUSH
72747: LD_INT 2
72749: EQUAL
72750: IFFALSE 72763
// ComExitVehicle ( unit ) else
72752: LD_VAR 0 1
72756: PPUSH
72757: CALL_OW 121
72761: GO 72772
// ComExitBuilding ( unit ) ;
72763: LD_VAR 0 1
72767: PPUSH
72768: CALL_OW 122
// result := tmp ;
72772: LD_ADDR_VAR 0 2
72776: PUSH
72777: LD_VAR 0 3
72781: ST_TO_ADDR
// end ;
72782: LD_VAR 0 2
72786: RET
// export function ResetHc ; begin
72787: LD_INT 0
72789: PPUSH
// InitHc ;
72790: CALL_OW 19
// hc_importance := 0 ;
72794: LD_ADDR_OWVAR 32
72798: PUSH
72799: LD_INT 0
72801: ST_TO_ADDR
// end ;
72802: LD_VAR 0 1
72806: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72807: LD_INT 0
72809: PPUSH
72810: PPUSH
72811: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72812: LD_ADDR_VAR 0 6
72816: PUSH
72817: LD_VAR 0 1
72821: PUSH
72822: LD_VAR 0 3
72826: PLUS
72827: PUSH
72828: LD_INT 2
72830: DIV
72831: ST_TO_ADDR
// if _x < 0 then
72832: LD_VAR 0 6
72836: PUSH
72837: LD_INT 0
72839: LESS
72840: IFFALSE 72857
// _x := _x * - 1 ;
72842: LD_ADDR_VAR 0 6
72846: PUSH
72847: LD_VAR 0 6
72851: PUSH
72852: LD_INT 1
72854: NEG
72855: MUL
72856: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72857: LD_ADDR_VAR 0 7
72861: PUSH
72862: LD_VAR 0 2
72866: PUSH
72867: LD_VAR 0 4
72871: PLUS
72872: PUSH
72873: LD_INT 2
72875: DIV
72876: ST_TO_ADDR
// if _y < 0 then
72877: LD_VAR 0 7
72881: PUSH
72882: LD_INT 0
72884: LESS
72885: IFFALSE 72902
// _y := _y * - 1 ;
72887: LD_ADDR_VAR 0 7
72891: PUSH
72892: LD_VAR 0 7
72896: PUSH
72897: LD_INT 1
72899: NEG
72900: MUL
72901: ST_TO_ADDR
// result := [ _x , _y ] ;
72902: LD_ADDR_VAR 0 5
72906: PUSH
72907: LD_VAR 0 6
72911: PUSH
72912: LD_VAR 0 7
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: ST_TO_ADDR
// end ;
72921: LD_VAR 0 5
72925: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72926: LD_INT 0
72928: PPUSH
72929: PPUSH
72930: PPUSH
72931: PPUSH
// task := GetTaskList ( unit ) ;
72932: LD_ADDR_VAR 0 7
72936: PUSH
72937: LD_VAR 0 1
72941: PPUSH
72942: CALL_OW 437
72946: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72947: LD_VAR 0 7
72951: NOT
72952: PUSH
72953: LD_VAR 0 1
72957: PPUSH
72958: LD_VAR 0 2
72962: PPUSH
72963: CALL_OW 308
72967: NOT
72968: AND
72969: IFFALSE 72973
// exit ;
72971: GO 73091
// if IsInArea ( unit , area ) then
72973: LD_VAR 0 1
72977: PPUSH
72978: LD_VAR 0 2
72982: PPUSH
72983: CALL_OW 308
72987: IFFALSE 73005
// begin ComMoveToArea ( unit , goAway ) ;
72989: LD_VAR 0 1
72993: PPUSH
72994: LD_VAR 0 3
72998: PPUSH
72999: CALL_OW 113
// exit ;
73003: GO 73091
// end ; if task [ 1 ] [ 1 ] <> M then
73005: LD_VAR 0 7
73009: PUSH
73010: LD_INT 1
73012: ARRAY
73013: PUSH
73014: LD_INT 1
73016: ARRAY
73017: PUSH
73018: LD_STRING M
73020: NONEQUAL
73021: IFFALSE 73025
// exit ;
73023: GO 73091
// x := task [ 1 ] [ 2 ] ;
73025: LD_ADDR_VAR 0 5
73029: PUSH
73030: LD_VAR 0 7
73034: PUSH
73035: LD_INT 1
73037: ARRAY
73038: PUSH
73039: LD_INT 2
73041: ARRAY
73042: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73043: LD_ADDR_VAR 0 6
73047: PUSH
73048: LD_VAR 0 7
73052: PUSH
73053: LD_INT 1
73055: ARRAY
73056: PUSH
73057: LD_INT 3
73059: ARRAY
73060: ST_TO_ADDR
// if InArea ( x , y , area ) then
73061: LD_VAR 0 5
73065: PPUSH
73066: LD_VAR 0 6
73070: PPUSH
73071: LD_VAR 0 2
73075: PPUSH
73076: CALL_OW 309
73080: IFFALSE 73091
// ComStop ( unit ) ;
73082: LD_VAR 0 1
73086: PPUSH
73087: CALL_OW 141
// end ;
73091: LD_VAR 0 4
73095: RET
// export function Abs ( value ) ; begin
73096: LD_INT 0
73098: PPUSH
// result := value ;
73099: LD_ADDR_VAR 0 2
73103: PUSH
73104: LD_VAR 0 1
73108: ST_TO_ADDR
// if value < 0 then
73109: LD_VAR 0 1
73113: PUSH
73114: LD_INT 0
73116: LESS
73117: IFFALSE 73134
// result := value * - 1 ;
73119: LD_ADDR_VAR 0 2
73123: PUSH
73124: LD_VAR 0 1
73128: PUSH
73129: LD_INT 1
73131: NEG
73132: MUL
73133: ST_TO_ADDR
// end ;
73134: LD_VAR 0 2
73138: RET
