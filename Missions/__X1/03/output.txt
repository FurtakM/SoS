// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 618 0 0
// PrepareArabian ;
  12: CALL 1049 0 0
// PrepareAmerican ;
  16: CALL 4110 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9048 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 20
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 18
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 19
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 22
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 23
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 25
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 26
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 27
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 16
 269: PUSH
 270: LD_INT 15
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 13
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// allowCargoEvacuation := false ;
 292: LD_ADDR_EXP 7
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// americanStartRun := false ;
 300: LD_ADDR_EXP 14
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// end ; end_of_file
 308: LD_VAR 0 1
 312: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 313: LD_INT 0
 315: PPUSH
// uc_side := side ;
 316: LD_ADDR_OWVAR 20
 320: PUSH
 321: LD_VAR 0 1
 325: ST_TO_ADDR
// uc_nation := nation ;
 326: LD_ADDR_OWVAR 21
 330: PUSH
 331: LD_VAR 0 2
 335: ST_TO_ADDR
// vc_chassis := chassis ;
 336: LD_ADDR_OWVAR 37
 340: PUSH
 341: LD_VAR 0 3
 345: ST_TO_ADDR
// vc_engine := engine ;
 346: LD_ADDR_OWVAR 39
 350: PUSH
 351: LD_VAR 0 4
 355: ST_TO_ADDR
// vc_control := control ;
 356: LD_ADDR_OWVAR 38
 360: PUSH
 361: LD_VAR 0 5
 365: ST_TO_ADDR
// vc_weapon := weapon ;
 366: LD_ADDR_OWVAR 40
 370: PUSH
 371: LD_VAR 0 6
 375: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 376: LD_ADDR_OWVAR 41
 380: PUSH
 381: LD_VAR 0 7
 385: ST_TO_ADDR
// result := CreateVehicle ;
 386: LD_ADDR_VAR 0 8
 390: PUSH
 391: CALL_OW 45
 395: ST_TO_ADDR
// end ;
 396: LD_VAR 0 8
 400: RET
// export function SayX ( units , ident ) ; var i ; begin
 401: LD_INT 0
 403: PPUSH
 404: PPUSH
// result := false ;
 405: LD_ADDR_VAR 0 3
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
// if not units then
 413: LD_VAR 0 1
 417: NOT
 418: IFFALSE 422
// exit ;
 420: GO 476
// for i in units do
 422: LD_ADDR_VAR 0 4
 426: PUSH
 427: LD_VAR 0 1
 431: PUSH
 432: FOR_IN
 433: IFFALSE 474
// if IsOk ( i ) then
 435: LD_VAR 0 4
 439: PPUSH
 440: CALL_OW 302
 444: IFFALSE 472
// begin Say ( i , ident ) ;
 446: LD_VAR 0 4
 450: PPUSH
 451: LD_VAR 0 2
 455: PPUSH
 456: CALL_OW 88
// result := i ;
 460: LD_ADDR_VAR 0 3
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// break ;
 470: GO 474
// end ;
 472: GO 432
 474: POP
 475: POP
// end ;
 476: LD_VAR 0 3
 480: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// InitUc ;
 485: CALL_OW 18
// InitHc ;
 489: CALL_OW 19
// uc_side := 0 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 0
 500: ST_TO_ADDR
// uc_nation := 0 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 0
 508: ST_TO_ADDR
// for i = 1 to amount do
 509: LD_ADDR_VAR 0 4
 513: PUSH
 514: DOUBLE
 515: LD_INT 1
 517: DEC
 518: ST_TO_ADDR
 519: LD_VAR 0 2
 523: PUSH
 524: FOR_TO
 525: IFFALSE 607
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 527: LD_ADDR_OWVAR 29
 531: PUSH
 532: LD_INT 9
 534: PPUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 12
 542: PUSH
 543: LD_INT 9
 545: PPUSH
 546: LD_INT 12
 548: PPUSH
 549: CALL_OW 12
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 558: LD_ADDR_OWVAR 35
 562: PUSH
 563: LD_INT 1
 565: NEG
 566: PPUSH
 567: LD_INT 1
 569: PPUSH
 570: CALL_OW 12
 574: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 575: LD_INT 0
 577: PPUSH
 578: LD_INT 12
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 588: CALL_OW 44
 592: PPUSH
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// end ;
 605: GO 524
 607: POP
 608: POP
// InitHc ;
 609: CALL_OW 19
// end ;
 613: LD_VAR 0 3
 617: RET
// export function CreateNature ; var i ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 4
 630: PUSH
 631: LD_INT 4
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_OWVAR 67
 643: ARRAY
 644: PPUSH
 645: CALL 481 0 2
// for i := 1 to 2 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 2
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 21 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 21
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 2
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 2 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 2
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := 18 ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 18
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// for i := 1 to 2 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_INT 2
 763: PUSH
 764: FOR_TO
 765: IFFALSE 800
// begin hc_class := 13 ;
 767: LD_ADDR_OWVAR 28
 771: PUSH
 772: LD_INT 13
 774: ST_TO_ADDR
// hc_gallery :=  ;
 775: LD_ADDR_OWVAR 33
 779: PUSH
 780: LD_STRING 
 782: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 783: CALL_OW 44
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 49
// end ;
 798: GO 764
 800: POP
 801: POP
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 807: LD_INT 0
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not observer or not unit then
 812: LD_VAR 0 1
 816: NOT
 817: PUSH
 818: LD_VAR 0 2
 822: NOT
 823: OR
 824: IFFALSE 828
// exit ;
 826: GO 876
// if not See ( GetSide ( observer ) , unit ) then
 828: LD_VAR 0 1
 832: PPUSH
 833: CALL_OW 255
 837: PPUSH
 838: LD_VAR 0 2
 842: PPUSH
 843: CALL_OW 292
 847: NOT
 848: IFFALSE 852
// exit ;
 850: GO 876
// result := GetDistUnits ( observer , unit ) < 12 ;
 852: LD_ADDR_VAR 0 3
 856: PUSH
 857: LD_VAR 0 1
 861: PPUSH
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 12
 874: LESS
 875: ST_TO_ADDR
// end ;
 876: LD_VAR 0 3
 880: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 881: LD_INT 0
 883: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 1
 891: ARRAY
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 2
 900: ARRAY
 901: PPUSH
 902: CALL_OW 488
 906: PUSH
 907: LD_VAR 0 2
 911: PUSH
 912: LD_INT 1
 914: ARRAY
 915: PPUSH
 916: LD_VAR 0 2
 920: PUSH
 921: LD_INT 2
 923: ARRAY
 924: PPUSH
 925: CALL_OW 428
 929: PUSH
 930: LD_INT 0
 932: EQUAL
 933: AND
 934: IFFALSE 968
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 936: LD_VAR 0 1
 940: PPUSH
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 1
 948: ARRAY
 949: PPUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 3
 963: PPUSH
 964: CALL_OW 48
// end ;
 968: LD_VAR 0 4
 972: RET
// export function ReverseArray ( array ) ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// if not array then
 977: LD_VAR 0 1
 981: NOT
 982: IFFALSE 986
// exit ;
 984: GO 1044
// result := [ ] ;
 986: LD_ADDR_VAR 0 2
 990: PUSH
 991: EMPTY
 992: ST_TO_ADDR
// for i := 1 to array do
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: DOUBLE
 999: LD_INT 1
1001: DEC
1002: ST_TO_ADDR
1003: LD_VAR 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1042
// result := Insert ( result , 1 , array [ i ] ) ;
1011: LD_ADDR_VAR 0 2
1015: PUSH
1016: LD_VAR 0 2
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: LD_VAR 0 1
1028: PUSH
1029: LD_VAR 0 3
1033: ARRAY
1034: PPUSH
1035: CALL_OW 2
1039: ST_TO_ADDR
1040: GO 1008
1042: POP
1043: POP
// end ; end_of_file
1044: LD_VAR 0 2
1048: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1049: LD_INT 0
1051: PPUSH
1052: PPUSH
1053: PPUSH
1054: PPUSH
// uc_side := 5 ;
1055: LD_ADDR_OWVAR 20
1059: PUSH
1060: LD_INT 5
1062: ST_TO_ADDR
// uc_nation := 2 ;
1063: LD_ADDR_OWVAR 21
1067: PUSH
1068: LD_INT 2
1070: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1071: LD_INT 5
1073: PPUSH
1074: CALL_OW 274
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_INT 65
1084: PPUSH
1085: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1089: LD_ADDR_EXP 36
1093: PUSH
1094: LD_STRING Farmer
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 36668 0 3
1107: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1108: LD_ADDR_EXP 37
1112: PUSH
1113: LD_STRING Omar
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: LD_STRING 
1121: PPUSH
1122: CALL 36668 0 3
1126: ST_TO_ADDR
// omarSquad := [ ] ;
1127: LD_ADDR_EXP 40
1131: PUSH
1132: EMPTY
1133: ST_TO_ADDR
// heikeSquad := [ ] ;
1134: LD_ADDR_EXP 41
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1141: LD_ADDR_EXP 42
1145: PUSH
1146: EMPTY
1147: ST_TO_ADDR
// omarCargo := [ ] ;
1148: LD_ADDR_EXP 43
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to 5 do
1155: LD_ADDR_VAR 0 2
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_INT 5
1167: PUSH
1168: FOR_TO
1169: IFFALSE 1327
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1171: LD_INT 0
1173: PPUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: LD_INT 1
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: LD_VAR 0 2
1200: ARRAY
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: CALL_OW 380
// un := CreateHuman ;
1209: LD_ADDR_VAR 0 3
1213: PUSH
1214: CALL_OW 44
1218: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1219: LD_ADDR_EXP 40
1223: PUSH
1224: LD_EXP 40
1228: PUSH
1229: LD_VAR 0 3
1233: UNION
1234: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1235: LD_VAR 0 3
1239: PPUSH
1240: LD_INT 87
1242: PUSH
1243: LD_INT 30
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 91
1252: PUSH
1253: LD_INT 32
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 82
1262: PUSH
1263: LD_INT 15
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 79
1272: PUSH
1273: LD_INT 14
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 82
1282: PUSH
1283: LD_INT 13
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_VAR 0 2
1301: ARRAY
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL 881 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 93
1317: PPUSH
1318: LD_INT 21
1320: PPUSH
1321: CALL_OW 118
// end ;
1325: GO 1168
1327: POP
1328: POP
// uc_side := 2 ;
1329: LD_ADDR_OWVAR 20
1333: PUSH
1334: LD_INT 2
1336: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1337: LD_ADDR_EXP 28
1341: PUSH
1342: LD_STRING Heike
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_EXP 2
1355: PPUSH
1356: CALL 36668 0 3
1360: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1361: LD_ADDR_EXP 32
1365: PUSH
1366: LD_STRING Aviradze
1368: PPUSH
1369: LD_EXP 1
1373: NOT
1374: PPUSH
1375: LD_EXP 2
1379: PPUSH
1380: CALL 36668 0 3
1384: ST_TO_ADDR
// tmp := [ ] ;
1385: LD_ADDR_VAR 0 4
1389: PUSH
1390: EMPTY
1391: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1392: LD_ADDR_EXP 29
1396: PUSH
1397: LD_STRING Givi
1399: PPUSH
1400: LD_EXP 1
1404: NOT
1405: PPUSH
1406: LD_EXP 2
1410: PPUSH
1411: CALL 36668 0 3
1415: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1416: LD_ADDR_EXP 30
1420: PUSH
1421: LD_STRING Mike
1423: PPUSH
1424: LD_EXP 1
1428: NOT
1429: PPUSH
1430: LD_EXP 2
1434: PPUSH
1435: CALL 36668 0 3
1439: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1440: LD_ADDR_EXP 31
1444: PUSH
1445: LD_STRING Kamil
1447: PPUSH
1448: LD_EXP 1
1452: NOT
1453: PPUSH
1454: LD_EXP 2
1458: PPUSH
1459: CALL 36668 0 3
1463: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1464: LD_ADDR_EXP 33
1468: PUSH
1469: LD_STRING Kaia
1471: PPUSH
1472: LD_EXP 1
1476: NOT
1477: PPUSH
1478: LD_EXP 2
1482: PPUSH
1483: CALL 36668 0 3
1487: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1488: LD_ADDR_EXP 34
1492: PUSH
1493: LD_STRING Sophia
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 2
1506: PPUSH
1507: CALL 36668 0 3
1511: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1512: LD_ADDR_EXP 35
1516: PUSH
1517: LD_STRING Markov
1519: PPUSH
1520: LD_EXP 1
1524: NOT
1525: PPUSH
1526: LD_EXP 2
1530: PPUSH
1531: CALL 36668 0 3
1535: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1536: LD_ADDR_EXP 42
1540: PUSH
1541: LD_STRING 02_others
1543: PPUSH
1544: CALL_OW 31
1548: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_EXP 30
1558: PUSH
1559: LD_EXP 31
1563: PUSH
1564: LD_EXP 33
1568: PUSH
1569: LD_EXP 34
1573: PUSH
1574: LD_EXP 35
1578: PUSH
1579: LD_EXP 29
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_EXP 42
1596: ADD
1597: PUSH
1598: LD_INT 0
1600: DIFF
1601: ST_TO_ADDR
// heikeSquad := tmp ;
1602: LD_ADDR_EXP 41
1606: PUSH
1607: LD_VAR 0 4
1611: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1612: LD_EXP 41
1616: PPUSH
1617: LD_INT 25
1619: PUSH
1620: LD_INT 1
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PPUSH
1627: CALL_OW 72
1631: PUSH
1632: LD_INT 3
1634: LESS
1635: IFFALSE 1685
// begin SetClass ( Kaia , 1 ) ;
1637: LD_EXP 33
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1649: LD_EXP 30
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1661: LD_EXP 29
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1673: LD_EXP 28
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: LD_VAR 0 4
1694: PUSH
1695: LD_STRING 02_ape
1697: PPUSH
1698: CALL_OW 31
1702: UNION
1703: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1704: LD_EXP 28
1708: PPUSH
1709: LD_INT 92
1711: PPUSH
1712: LD_INT 17
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1722: LD_EXP 36
1726: PPUSH
1727: LD_INT 95
1729: PPUSH
1730: LD_INT 19
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1740: LD_EXP 37
1744: PPUSH
1745: LD_INT 89
1747: PPUSH
1748: LD_INT 25
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1758: LD_EXP 32
1762: PPUSH
1763: LD_INT 92
1765: PPUSH
1766: LD_INT 27
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1776: LD_EXP 37
1780: PPUSH
1781: LD_EXP 32
1785: PPUSH
1786: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1790: LD_EXP 32
1794: PPUSH
1795: LD_EXP 37
1799: PPUSH
1800: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1804: LD_EXP 28
1808: PUSH
1809: LD_EXP 36
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PPUSH
1818: LD_EXP 37
1822: PPUSH
1823: CALL_OW 119
// if tmp then
1827: LD_VAR 0 4
1831: IFFALSE 1885
// for i in tmp do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: LD_VAR 0 4
1842: PUSH
1843: FOR_IN
1844: IFFALSE 1883
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 94
1853: PPUSH
1854: LD_INT 14
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1867: LD_VAR 0 2
1871: PPUSH
1872: LD_EXP 28
1876: PPUSH
1877: CALL_OW 119
// end ;
1881: GO 1843
1883: POP
1884: POP
// farmerSquad := [ ] ;
1885: LD_ADDR_EXP 39
1889: PUSH
1890: EMPTY
1891: ST_TO_ADDR
// uc_side := 5 ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_INT 5
1899: ST_TO_ADDR
// uc_nation := 2 ;
1900: LD_ADDR_OWVAR 21
1904: PUSH
1905: LD_INT 2
1907: ST_TO_ADDR
// for i := 1 to 4 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 4
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// begin PrepareHuman ( false , 1 , 2 ) ;
1924: LD_INT 0
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: LD_INT 2
1932: PPUSH
1933: CALL_OW 380
// un := CreateHuman ;
1937: LD_ADDR_VAR 0 3
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1947: LD_VAR 0 3
1951: PPUSH
1952: LD_INT 102
1954: PPUSH
1955: LD_INT 27
1957: PPUSH
1958: LD_INT 4
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1968: LD_ADDR_EXP 39
1972: PUSH
1973: LD_EXP 39
1977: PUSH
1978: LD_VAR 0 3
1982: UNION
1983: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1984: LD_VAR 0 3
1988: PPUSH
1989: LD_EXP 37
1993: PPUSH
1994: CALL_OW 119
// end ;
1998: GO 1921
2000: POP
2001: POP
// for i := 1 to 2 do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: DOUBLE
2008: LD_INT 1
2010: DEC
2011: ST_TO_ADDR
2012: LD_INT 2
2014: PUSH
2015: FOR_TO
2016: IFFALSE 2094
// begin PrepareHuman ( false , 2 , 2 ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 2
2026: PPUSH
2027: CALL_OW 380
// un := CreateHuman ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: CALL_OW 44
2040: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 108
2048: PPUSH
2049: LD_INT 62
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2062: LD_ADDR_EXP 39
2066: PUSH
2067: LD_EXP 39
2071: PUSH
2072: LD_VAR 0 3
2076: UNION
2077: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2078: LD_VAR 0 3
2082: PPUSH
2083: LD_EXP 37
2087: PPUSH
2088: CALL_OW 119
// end ;
2092: GO 2015
2094: POP
2095: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2096: LD_INT 109
2098: PPUSH
2099: LD_INT 63
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 15
2107: NEG
2108: PPUSH
2109: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2113: LD_INT 109
2115: PPUSH
2116: LD_INT 63
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL_OW 331
// end ;
2126: LD_VAR 0 1
2130: RET
// export function PrepareIbrahim ( x , y ) ; begin
2131: LD_INT 0
2133: PPUSH
// uc_side := 6 ;
2134: LD_ADDR_OWVAR 20
2138: PUSH
2139: LD_INT 6
2141: ST_TO_ADDR
// uc_nation := 3 ;
2142: LD_ADDR_OWVAR 21
2146: PUSH
2147: LD_INT 3
2149: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_STRING IbrahimRu
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 36668 0 3
2168: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2169: LD_EXP 38
2173: PPUSH
2174: LD_VAR 0 1
2178: PPUSH
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_INT 8
2186: PPUSH
2187: LD_INT 1
2189: PPUSH
2190: CALL_OW 50
// end ;
2194: LD_VAR 0 3
2198: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2199: LD_EXP 37
2203: PUSH
2204: LD_EXP 40
2208: ADD
2209: PPUSH
2210: LD_INT 95
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL_OW 72
2224: IFFALSE 2280
2226: GO 2228
2228: DISABLE
2229: LD_INT 0
2231: PPUSH
// begin enable ;
2232: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2233: LD_ADDR_VAR 0 1
2237: PUSH
2238: LD_EXP 37
2242: PUSH
2243: LD_EXP 40
2247: ADD
2248: PPUSH
2249: LD_INT 95
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PPUSH
2259: CALL_OW 72
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2278
// RemoveUnit ( i ) ;
2267: LD_VAR 0 1
2271: PPUSH
2272: CALL_OW 64
2276: GO 2264
2278: POP
2279: POP
// end ;
2280: PPOPN 1
2282: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2283: LD_EXP 3
2287: PUSH
2288: LD_EXP 36
2292: PPUSH
2293: LD_INT 4
2295: PPUSH
2296: CALL_OW 308
2300: AND
2301: IFFALSE 3105
2303: GO 2305
2305: DISABLE
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2312: LD_EXP 36
2316: PPUSH
2317: LD_INT 110
2319: PPUSH
2320: LD_INT 60
2322: PPUSH
2323: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2327: LD_EXP 36
2331: PPUSH
2332: LD_INT 110
2334: PPUSH
2335: LD_INT 61
2337: PPUSH
2338: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_EXP 39
2351: PPUSH
2352: LD_INT 25
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 72
2366: ST_TO_ADDR
// if tmp then
2367: LD_VAR 0 2
2371: IFFALSE 2465
// begin for i := 1 to 2 do
2373: LD_ADDR_VAR 0 1
2377: PUSH
2378: DOUBLE
2379: LD_INT 1
2381: DEC
2382: ST_TO_ADDR
2383: LD_INT 2
2385: PUSH
2386: FOR_TO
2387: IFFALSE 2463
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 1
2398: ARRAY
2399: PPUSH
2400: LD_INT 5
2402: PPUSH
2403: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2407: LD_VAR 0 2
2411: PUSH
2412: LD_VAR 0 1
2416: ARRAY
2417: PPUSH
2418: LD_INT 2
2420: PPUSH
2421: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2425: LD_VAR 0 2
2429: PUSH
2430: LD_VAR 0 1
2434: ARRAY
2435: PPUSH
2436: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2440: LD_VAR 0 2
2444: PUSH
2445: LD_VAR 0 1
2449: ARRAY
2450: PPUSH
2451: LD_INT 107
2453: PPUSH
2454: LD_INT 66
2456: PPUSH
2457: CALL_OW 171
// end ;
2461: GO 2386
2463: POP
2464: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2465: LD_ADDR_VAR 0 2
2469: PUSH
2470: LD_EXP 39
2474: PPUSH
2475: LD_INT 25
2477: PUSH
2478: LD_INT 2
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: PPUSH
2485: CALL_OW 72
2489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2490: LD_INT 35
2492: PPUSH
2493: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 39
2506: PPUSH
2507: LD_INT 25
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 72
2521: ST_TO_ADDR
// until tmp ;
2522: LD_VAR 0 2
2526: IFFALSE 2490
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 31
2535: PPUSH
2536: LD_INT 102
2538: PPUSH
2539: LD_INT 69
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2549: LD_INT 35
2551: PPUSH
2552: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2556: LD_EXP 39
2560: PPUSH
2561: LD_INT 3
2563: PUSH
2564: LD_INT 60
2566: PUSH
2567: EMPTY
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 2
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 72
2592: IFFALSE 2549
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: LD_EXP 39
2603: PPUSH
2604: LD_INT 25
2606: PUSH
2607: LD_INT 2
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2619: LD_VAR 0 2
2623: PPUSH
2624: LD_INT 6
2626: PPUSH
2627: LD_INT 116
2629: PPUSH
2630: LD_INT 55
2632: PPUSH
2633: LD_INT 4
2635: PPUSH
2636: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2640: LD_VAR 0 2
2644: PPUSH
2645: LD_INT 4
2647: PPUSH
2648: LD_INT 116
2650: PPUSH
2651: LD_INT 70
2653: PPUSH
2654: LD_INT 5
2656: PPUSH
2657: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2661: LD_VAR 0 2
2665: PPUSH
2666: LD_INT 31
2668: PPUSH
2669: LD_INT 109
2671: PPUSH
2672: LD_INT 50
2674: PPUSH
2675: LD_INT 2
2677: PPUSH
2678: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2682: LD_INT 35
2684: PPUSH
2685: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2689: LD_INT 22
2691: PUSH
2692: LD_INT 5
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 30
2701: PUSH
2702: LD_INT 4
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 3
2711: PUSH
2712: LD_INT 57
2714: PUSH
2715: EMPTY
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: PPUSH
2727: CALL_OW 69
2731: IFFALSE 2682
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2733: LD_ADDR_VAR 0 3
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 5
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 4
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 3
2760: PUSH
2761: LD_INT 57
2763: PUSH
2764: EMPTY
2765: LIST
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: PPUSH
2776: CALL_OW 69
2780: PUSH
2781: LD_INT 1
2783: ARRAY
2784: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: LD_EXP 39
2794: PPUSH
2795: LD_INT 25
2797: PUSH
2798: LD_INT 1
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PPUSH
2805: CALL_OW 72
2809: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2810: LD_VAR 0 2
2814: PPUSH
2815: LD_VAR 0 3
2819: PPUSH
2820: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2824: LD_INT 35
2826: PPUSH
2827: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2831: LD_INT 22
2833: PUSH
2834: LD_INT 5
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 30
2843: PUSH
2844: LD_INT 31
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 3
2853: PUSH
2854: LD_INT 57
2856: PUSH
2857: EMPTY
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: PUSH
2874: LD_INT 2
2876: GREATEREQUAL
2877: IFFALSE 2824
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2879: LD_ADDR_VAR 0 2
2883: PUSH
2884: LD_EXP 39
2888: PPUSH
2889: LD_INT 25
2891: PUSH
2892: LD_INT 2
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 72
2903: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2904: LD_VAR 0 2
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: LD_INT 5
2915: PPUSH
2916: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2920: LD_VAR 0 2
2924: PUSH
2925: LD_INT 2
2927: ARRAY
2928: PUSH
2929: LD_VAR 0 2
2933: PUSH
2934: LD_INT 3
2936: ARRAY
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PPUSH
2942: LD_VAR 0 3
2946: PPUSH
2947: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2951: LD_VAR 0 2
2955: PUSH
2956: LD_INT 2
2958: ARRAY
2959: PUSH
2960: LD_VAR 0 2
2964: PUSH
2965: LD_INT 3
2967: ARRAY
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2980: LD_VAR 0 2
2984: PUSH
2985: LD_INT 2
2987: ARRAY
2988: PUSH
2989: LD_VAR 0 2
2993: PUSH
2994: LD_INT 3
2996: ARRAY
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PPUSH
3002: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3006: LD_ADDR_VAR 0 4
3010: PUSH
3011: LD_INT 22
3013: PUSH
3014: LD_INT 5
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 30
3023: PUSH
3024: LD_INT 31
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PPUSH
3035: CALL_OW 69
3039: ST_TO_ADDR
// for i := 1 to 2 do
3040: LD_ADDR_VAR 0 1
3044: PUSH
3045: DOUBLE
3046: LD_INT 1
3048: DEC
3049: ST_TO_ADDR
3050: LD_INT 2
3052: PUSH
3053: FOR_TO
3054: IFFALSE 3088
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3056: LD_VAR 0 2
3060: PUSH
3061: LD_VAR 0 1
3065: PUSH
3066: LD_INT 1
3068: PLUS
3069: ARRAY
3070: PPUSH
3071: LD_VAR 0 4
3075: PUSH
3076: LD_VAR 0 1
3080: ARRAY
3081: PPUSH
3082: CALL_OW 180
3086: GO 3053
3088: POP
3089: POP
// wait ( 1 1$00 ) ;
3090: LD_INT 2100
3092: PPUSH
3093: CALL_OW 67
// farmerBaseReady := true ;
3097: LD_ADDR_EXP 4
3101: PUSH
3102: LD_INT 1
3104: ST_TO_ADDR
// end ;
3105: PPOPN 4
3107: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3108: LD_EXP 4
3112: PUSH
3113: LD_EXP 11
3117: NOT
3118: AND
3119: IFFALSE 3641
3121: GO 3123
3123: DISABLE
3124: LD_INT 0
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
// begin enable ;
3131: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3132: LD_ADDR_VAR 0 3
3136: PUSH
3137: LD_EXP 39
3141: PPUSH
3142: LD_INT 25
3144: PUSH
3145: LD_INT 1
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PPUSH
3152: CALL_OW 72
3156: PUSH
3157: LD_EXP 36
3161: ADD
3162: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 39
3172: PPUSH
3173: LD_INT 25
3175: PUSH
3176: LD_INT 2
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: PPUSH
3183: CALL_OW 72
3187: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3188: LD_ADDR_VAR 0 5
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 5
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 21
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: LD_INT 24
3218: PUSH
3219: LD_INT 1000
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: PPUSH
3235: CALL_OW 69
3239: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3240: LD_ADDR_VAR 0 4
3244: PUSH
3245: LD_INT 22
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 30
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3274: LD_VAR 0 4
3278: PUSH
3279: LD_INT 1
3281: ARRAY
3282: PPUSH
3283: CALL_OW 302
3287: IFFALSE 3351
// for i in sol do
3289: LD_ADDR_VAR 0 1
3293: PUSH
3294: LD_VAR 0 3
3298: PUSH
3299: FOR_IN
3300: IFFALSE 3349
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3302: LD_VAR 0 1
3306: PPUSH
3307: CALL_OW 256
3311: PUSH
3312: LD_INT 999
3314: LESS
3315: PUSH
3316: LD_VAR 0 1
3320: PPUSH
3321: CALL_OW 310
3325: NOT
3326: AND
3327: IFFALSE 3347
// ComEnterUnit ( i , arm [ 1 ] ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: LD_VAR 0 4
3338: PUSH
3339: LD_INT 1
3341: ARRAY
3342: PPUSH
3343: CALL_OW 120
3347: GO 3299
3349: POP
3350: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3351: LD_VAR 0 2
3355: NOT
3356: PUSH
3357: LD_INT 22
3359: PUSH
3360: LD_INT 1
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 1
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PPUSH
3381: CALL_OW 69
3385: NOT
3386: AND
3387: IFFALSE 3479
// begin uc_side := 5 ;
3389: LD_ADDR_OWVAR 20
3393: PUSH
3394: LD_INT 5
3396: ST_TO_ADDR
// uc_nation := 2 ;
3397: LD_ADDR_OWVAR 21
3401: PUSH
3402: LD_INT 2
3404: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3405: LD_INT 0
3407: PPUSH
3408: LD_INT 2
3410: PPUSH
3411: LD_INT 2
3413: PPUSH
3414: CALL_OW 380
// eng := CreateHuman ;
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: CALL_OW 44
3427: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3428: LD_VAR 0 2
3432: PPUSH
3433: LD_INT 102
3435: PPUSH
3436: LD_INT 8
3438: PPUSH
3439: LD_INT 0
3441: PPUSH
3442: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3446: LD_VAR 0 2
3450: PPUSH
3451: LD_INT 110
3453: PPUSH
3454: LD_INT 60
3456: PPUSH
3457: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3461: LD_ADDR_EXP 39
3465: PUSH
3466: LD_EXP 39
3470: PUSH
3471: LD_VAR 0 2
3475: UNION
3476: ST_TO_ADDR
// end else
3477: GO 3641
// begin for i in eng do
3479: LD_ADDR_VAR 0 1
3483: PUSH
3484: LD_VAR 0 2
3488: PUSH
3489: FOR_IN
3490: IFFALSE 3639
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3492: LD_INT 10
3494: PPUSH
3495: LD_INT 1
3497: PPUSH
3498: CALL_OW 287
3502: IFFALSE 3553
// begin if IsInUnit ( i ) then
3504: LD_VAR 0 1
3508: PPUSH
3509: CALL_OW 310
3513: IFFALSE 3524
// ComExitBuilding ( i ) ;
3515: LD_VAR 0 1
3519: PPUSH
3520: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3524: LD_VAR 0 1
3528: PPUSH
3529: LD_INT 10
3531: PPUSH
3532: CALL_OW 308
3536: NOT
3537: IFFALSE 3551
// AddComMoveToArea ( i , collectFarmerArea ) ;
3539: LD_VAR 0 1
3543: PPUSH
3544: LD_INT 10
3546: PPUSH
3547: CALL_OW 173
// end else
3551: GO 3637
// begin if damagedBuilding then
3553: LD_VAR 0 5
3557: IFFALSE 3601
// begin if IsInUnit ( i ) then
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 310
3568: IFFALSE 3581
// ComExitBuilding ( i ) else
3570: LD_VAR 0 1
3574: PPUSH
3575: CALL_OW 122
3579: GO 3599
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: LD_VAR 0 5
3590: PUSH
3591: LD_INT 1
3593: ARRAY
3594: PPUSH
3595: CALL_OW 130
// end else
3599: GO 3637
// if not IsInUnit ( i ) and not HasTask ( i ) then
3601: LD_VAR 0 1
3605: PPUSH
3606: CALL_OW 310
3610: NOT
3611: PUSH
3612: LD_VAR 0 1
3616: PPUSH
3617: CALL_OW 314
3621: NOT
3622: AND
3623: IFFALSE 3637
// ComEnterUnit ( i , arDepot ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 5
3632: PPUSH
3633: CALL_OW 120
// end ; end ;
3637: GO 3489
3639: POP
3640: POP
// end ; end ;
3641: PPOPN 5
3643: END
// export function CargoEvacuation ; begin
3644: LD_INT 0
3646: PPUSH
// wait ( 0 0$20 ) ;
3647: LD_INT 700
3649: PPUSH
3650: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3654: LD_ADDR_EXP 21
3658: PUSH
3659: LD_EXP 21
3663: PUSH
3664: LD_INT 1
3666: MINUS
3667: ST_TO_ADDR
// if omarCargoCounter = 0 then
3668: LD_EXP 21
3672: PUSH
3673: LD_INT 0
3675: EQUAL
3676: IFFALSE 3680
// exit ;
3678: GO 3987
// if omarCargo then
3680: LD_EXP 43
3684: IFFALSE 3695
// RemoveUnit ( omarCargo ) ;
3686: LD_EXP 43
3690: PPUSH
3691: CALL_OW 64
// omarCargo := PrepareCargo ;
3695: LD_ADDR_EXP 43
3699: PUSH
3700: CALL 3992 0 0
3704: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3705: LD_EXP 43
3709: PPUSH
3710: LD_INT 0
3712: PPUSH
3713: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3717: LD_EXP 43
3721: PPUSH
3722: LD_INT 107
3724: PPUSH
3725: LD_INT 59
3727: PPUSH
3728: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3732: LD_INT 35
3734: PPUSH
3735: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3739: LD_EXP 43
3743: PPUSH
3744: LD_INT 107
3746: PPUSH
3747: LD_INT 59
3749: PPUSH
3750: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3754: LD_EXP 43
3758: PPUSH
3759: CALL_OW 302
3763: NOT
3764: PUSH
3765: LD_EXP 43
3769: PPUSH
3770: CALL_OW 301
3774: OR
3775: IFFALSE 3779
// exit ;
3777: GO 3987
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3779: LD_EXP 43
3783: PPUSH
3784: LD_INT 107
3786: PPUSH
3787: LD_INT 59
3789: PPUSH
3790: CALL_OW 307
3794: PUSH
3795: LD_EXP 43
3799: PPUSH
3800: LD_INT 5
3802: PPUSH
3803: CALL_OW 296
3807: PUSH
3808: LD_INT 6
3810: LESS
3811: OR
3812: IFFALSE 3732
// SetTag ( omarCargo , 1 ) ;
3814: LD_EXP 43
3818: PPUSH
3819: LD_INT 1
3821: PPUSH
3822: CALL_OW 109
// wait ( 0 0$05 ) ;
3826: LD_INT 175
3828: PPUSH
3829: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3833: LD_EXP 43
3837: PPUSH
3838: LD_INT 5
3840: PPUSH
3841: LD_INT 1
3843: PPUSH
3844: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3848: LD_EXP 43
3852: PPUSH
3853: LD_INT 103
3855: PPUSH
3856: LD_INT 9
3858: PPUSH
3859: CALL_OW 171
// wait ( 0 0$1 ) ;
3863: LD_INT 35
3865: PPUSH
3866: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3870: LD_EXP 43
3874: PPUSH
3875: LD_INT 1
3877: PPUSH
3878: LD_INT 100
3880: PPUSH
3881: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3885: LD_INT 35
3887: PPUSH
3888: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3892: LD_EXP 43
3896: PPUSH
3897: LD_INT 103
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3907: LD_EXP 43
3911: PPUSH
3912: CALL_OW 302
3916: NOT
3917: PUSH
3918: LD_EXP 43
3922: PPUSH
3923: CALL_OW 301
3927: OR
3928: IFFALSE 3932
// exit ;
3930: GO 3987
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3932: LD_EXP 43
3936: PPUSH
3937: LD_INT 103
3939: PPUSH
3940: LD_INT 9
3942: PPUSH
3943: CALL_OW 307
3947: PUSH
3948: LD_EXP 43
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: CALL_OW 308
3960: OR
3961: PUSH
3962: LD_EXP 43
3966: PPUSH
3967: CALL_OW 110
3971: PUSH
3972: LD_INT 0
3974: GREATER
3975: AND
3976: IFFALSE 3885
// RemoveUnit ( omarCargo ) ;
3978: LD_EXP 43
3982: PPUSH
3983: CALL_OW 64
// end ;
3987: LD_VAR 0 1
3991: RET
// export function PrepareCargo ; var un , veh ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_INT 5
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: LD_INT 14
4010: PPUSH
4011: LD_INT 1
4013: PPUSH
4014: LD_INT 1
4016: PPUSH
4017: LD_INT 32
4019: PPUSH
4020: LD_INT 80
4022: PPUSH
4023: CALL 313 0 7
4027: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4028: LD_VAR 0 3
4032: PPUSH
4033: LD_INT 4
4035: PPUSH
4036: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: LD_INT 101
4047: PPUSH
4048: LD_INT 8
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4058: LD_INT 0
4060: PPUSH
4061: LD_INT 3
4063: PPUSH
4064: LD_INT 2
4066: PPUSH
4067: CALL_OW 380
// un := CreateHuman ;
4071: LD_ADDR_VAR 0 2
4075: PUSH
4076: CALL_OW 44
4080: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4081: LD_VAR 0 2
4085: PPUSH
4086: LD_VAR 0 3
4090: PPUSH
4091: CALL_OW 52
// result := veh ;
4095: LD_ADDR_VAR 0 1
4099: PUSH
4100: LD_VAR 0 3
4104: ST_TO_ADDR
// end ; end_of_file
4105: LD_VAR 0 1
4109: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4110: LD_INT 0
4112: PPUSH
4113: PPUSH
4114: PPUSH
// usForces := [ ] ;
4115: LD_ADDR_EXP 44
4119: PUSH
4120: EMPTY
4121: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4122: LD_ADDR_EXP 46
4126: PUSH
4127: LD_INT 6
4129: PUSH
4130: LD_INT 32
4132: PUSH
4133: LD_INT 27
4135: PUSH
4136: LD_INT 1
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 4
4147: PUSH
4148: LD_INT 43
4150: PUSH
4151: LD_INT 24
4153: PUSH
4154: LD_INT 5
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 27
4165: PUSH
4166: LD_INT 29
4168: PUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4186: LD_INT 11
4188: PPUSH
4189: CALL_OW 274
4193: PPUSH
4194: LD_INT 1
4196: PPUSH
4197: LD_INT 150
4199: PUSH
4200: LD_INT 120
4202: PUSH
4203: LD_INT 100
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: PUSH
4211: LD_OWVAR 67
4215: ARRAY
4216: PPUSH
4217: CALL_OW 277
// if Difficulty = 1 then
4221: LD_OWVAR 67
4225: PUSH
4226: LD_INT 1
4228: EQUAL
4229: IFFALSE 4238
// RemoveUnit ( hillBun ) ;
4231: LD_INT 14
4233: PPUSH
4234: CALL_OW 64
// uc_side := 1 ;
4238: LD_ADDR_OWVAR 20
4242: PUSH
4243: LD_INT 1
4245: ST_TO_ADDR
// uc_nation := 1 ;
4246: LD_ADDR_OWVAR 21
4250: PUSH
4251: LD_INT 1
4253: ST_TO_ADDR
// hc_gallery :=  ;
4254: LD_ADDR_OWVAR 33
4258: PUSH
4259: LD_STRING 
4261: ST_TO_ADDR
// hc_name :=  ;
4262: LD_ADDR_OWVAR 26
4266: PUSH
4267: LD_STRING 
4269: ST_TO_ADDR
// hc_importance := 0 ;
4270: LD_ADDR_OWVAR 32
4274: PUSH
4275: LD_INT 0
4277: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4278: LD_INT 1
4280: PPUSH
4281: LD_INT 1
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: CALL_OW 380
// usCommander := CreateHuman ;
4291: LD_ADDR_EXP 45
4295: PUSH
4296: CALL_OW 44
4300: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4301: LD_EXP 45
4305: PPUSH
4306: LD_INT 11
4308: PPUSH
4309: CALL_OW 52
// if Difficulty > 1 then
4313: LD_OWVAR 67
4317: PUSH
4318: LD_INT 1
4320: GREATER
4321: IFFALSE 4403
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4323: LD_INT 0
4325: PPUSH
4326: LD_INT 1
4328: PPUSH
4329: LD_INT 1
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 3
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: PUSH
4343: LD_OWVAR 67
4347: ARRAY
4348: PPUSH
4349: CALL_OW 380
// un := CreateHuman ;
4353: LD_ADDR_VAR 0 3
4357: PUSH
4358: CALL_OW 44
4362: ST_TO_ADDR
// usForces := usForces union un ;
4363: LD_ADDR_EXP 44
4367: PUSH
4368: LD_EXP 44
4372: PUSH
4373: LD_VAR 0 3
4377: UNION
4378: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4379: LD_VAR 0 3
4383: PPUSH
4384: LD_INT 1
4386: PPUSH
4387: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4391: LD_VAR 0 3
4395: PPUSH
4396: LD_INT 14
4398: PPUSH
4399: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4403: LD_ADDR_VAR 0 2
4407: PUSH
4408: DOUBLE
4409: LD_INT 1
4411: DEC
4412: ST_TO_ADDR
4413: LD_INT 2
4415: PUSH
4416: LD_INT 3
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4576
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 1
4441: PPUSH
4442: LD_INT 1
4444: PUSH
4445: LD_INT 2
4447: PUSH
4448: LD_INT 3
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_OWVAR 67
4460: ARRAY
4461: PPUSH
4462: CALL_OW 380
// un := CreateHuman ;
4466: LD_ADDR_VAR 0 3
4470: PUSH
4471: CALL_OW 44
4475: ST_TO_ADDR
// usForces := usForces union un ;
4476: LD_ADDR_EXP 44
4480: PUSH
4481: LD_EXP 44
4485: PUSH
4486: LD_VAR 0 3
4490: UNION
4491: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4492: LD_VAR 0 3
4496: PPUSH
4497: LD_INT 39
4499: PPUSH
4500: LD_INT 24
4502: PPUSH
4503: LD_INT 4
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: CALL_OW 50
// if i < 3 then
4513: LD_VAR 0 2
4517: PUSH
4518: LD_INT 3
4520: LESS
4521: IFFALSE 4574
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4523: LD_VAR 0 3
4527: PPUSH
4528: LD_INT 22
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 58
4540: PUSH
4541: EMPTY
4542: LIST
4543: PUSH
4544: LD_INT 30
4546: PUSH
4547: LD_INT 31
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: PPUSH
4559: CALL_OW 69
4563: PUSH
4564: LD_VAR 0 2
4568: ARRAY
4569: PPUSH
4570: CALL_OW 120
// end ;
4574: GO 4433
4576: POP
4577: POP
// for i := 1 to 2 do
4578: LD_ADDR_VAR 0 2
4582: PUSH
4583: DOUBLE
4584: LD_INT 1
4586: DEC
4587: ST_TO_ADDR
4588: LD_INT 2
4590: PUSH
4591: FOR_TO
4592: IFFALSE 4656
// begin PrepareHuman ( false , 2 , 2 ) ;
4594: LD_INT 0
4596: PPUSH
4597: LD_INT 2
4599: PPUSH
4600: LD_INT 2
4602: PPUSH
4603: CALL_OW 380
// un := CreateHuman ;
4607: LD_ADDR_VAR 0 3
4611: PUSH
4612: CALL_OW 44
4616: ST_TO_ADDR
// usForces := usForces union un ;
4617: LD_ADDR_EXP 44
4621: PUSH
4622: LD_EXP 44
4626: PUSH
4627: LD_VAR 0 3
4631: UNION
4632: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4633: LD_VAR 0 3
4637: PPUSH
4638: LD_INT 39
4640: PPUSH
4641: LD_INT 24
4643: PPUSH
4644: LD_INT 4
4646: PPUSH
4647: LD_INT 0
4649: PPUSH
4650: CALL_OW 50
// end ;
4654: GO 4591
4656: POP
4657: POP
// PrepareHuman ( false , 4 , 1 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 4
4663: PPUSH
4664: LD_INT 1
4666: PPUSH
4667: CALL_OW 380
// un := CreateHuman ;
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: CALL_OW 44
4680: ST_TO_ADDR
// usForces := usForces union un ;
4681: LD_ADDR_EXP 44
4685: PUSH
4686: LD_EXP 44
4690: PUSH
4691: LD_VAR 0 3
4695: UNION
4696: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4697: LD_VAR 0 3
4701: PPUSH
4702: LD_INT 39
4704: PPUSH
4705: LD_INT 24
4707: PPUSH
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 50
// end ;
4718: LD_VAR 0 1
4722: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4723: LD_EXP 44
4727: PUSH
4728: LD_EXP 6
4732: NOT
4733: AND
4734: PUSH
4735: LD_EXP 14
4739: NOT
4740: AND
4741: IFFALSE 5172
4743: GO 4745
4745: DISABLE
4746: LD_INT 0
4748: PPUSH
4749: PPUSH
4750: PPUSH
4751: PPUSH
4752: PPUSH
// begin enable ;
4753: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4754: LD_ADDR_VAR 0 3
4758: PUSH
4759: LD_EXP 44
4763: PPUSH
4764: LD_INT 25
4766: PUSH
4767: LD_INT 2
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PPUSH
4774: CALL_OW 72
4778: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4779: LD_ADDR_VAR 0 4
4783: PUSH
4784: LD_EXP 44
4788: PPUSH
4789: LD_INT 25
4791: PUSH
4792: LD_INT 1
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PPUSH
4799: CALL_OW 72
4803: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4804: LD_ADDR_VAR 0 5
4808: PUSH
4809: LD_EXP 44
4813: PPUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 4
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PPUSH
4824: CALL_OW 72
4828: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4829: LD_INT 7
4831: PPUSH
4832: LD_INT 22
4834: PUSH
4835: LD_INT 2
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL_OW 70
4846: PUSH
4847: LD_INT 1
4849: EQUAL
4850: IFFALSE 4926
// for i in sol do
4852: LD_ADDR_VAR 0 1
4856: PUSH
4857: LD_VAR 0 4
4861: PUSH
4862: FOR_IN
4863: IFFALSE 4924
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 310
4874: NOT
4875: PUSH
4876: LD_VAR 0 1
4880: PPUSH
4881: CALL_OW 310
4885: PPUSH
4886: CALL_OW 266
4890: PUSH
4891: LD_INT 4
4893: EQUAL
4894: NOT
4895: OR
4896: IFFALSE 4922
// begin ComExitBuilding ( i ) ;
4898: LD_VAR 0 1
4902: PPUSH
4903: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4907: LD_VAR 0 1
4911: PPUSH
4912: LD_INT 37
4914: PPUSH
4915: LD_INT 23
4917: PPUSH
4918: CALL_OW 174
// end ;
4922: GO 4862
4924: POP
4925: POP
// if eng then
4926: LD_VAR 0 3
4930: IFFALSE 5172
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4932: LD_ADDR_VAR 0 2
4936: PUSH
4937: LD_INT 22
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: LD_INT 95
4949: PUSH
4950: LD_INT 7
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: LD_INT 21
4959: PUSH
4960: LD_INT 3
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 3
4969: PUSH
4970: LD_INT 24
4972: PUSH
4973: LD_INT 1000
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: PPUSH
4990: CALL_OW 69
4994: ST_TO_ADDR
// if b then
4995: LD_VAR 0 2
4999: IFFALSE 5030
// begin ComExitBuilding ( eng ) ;
5001: LD_VAR 0 3
5005: PPUSH
5006: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: LD_VAR 0 2
5019: PUSH
5020: LD_INT 1
5022: ARRAY
5023: PPUSH
5024: CALL_OW 190
// end else
5028: GO 5172
// begin for i in eng do
5030: LD_ADDR_VAR 0 1
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: FOR_IN
5041: IFFALSE 5170
// if not HasTask ( i ) then
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 314
5052: NOT
5053: IFFALSE 5168
// begin if americanBuildList then
5055: LD_EXP 46
5059: IFFALSE 5144
// begin if IsInUnit ( i ) then
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL_OW 310
5070: IFFALSE 5081
// ComExitBuilding ( i ) ;
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5081: LD_VAR 0 1
5085: PPUSH
5086: LD_EXP 46
5090: PUSH
5091: LD_INT 1
5093: ARRAY
5094: PUSH
5095: LD_INT 1
5097: ARRAY
5098: PPUSH
5099: LD_EXP 46
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PUSH
5108: LD_INT 2
5110: ARRAY
5111: PPUSH
5112: LD_EXP 46
5116: PUSH
5117: LD_INT 1
5119: ARRAY
5120: PUSH
5121: LD_INT 3
5123: ARRAY
5124: PPUSH
5125: LD_EXP 46
5129: PUSH
5130: LD_INT 1
5132: ARRAY
5133: PUSH
5134: LD_INT 4
5136: ARRAY
5137: PPUSH
5138: CALL_OW 205
// end else
5142: GO 5168
// if not IsInUnit ( i ) then
5144: LD_VAR 0 1
5148: PPUSH
5149: CALL_OW 310
5153: NOT
5154: IFFALSE 5168
// ComEnterUnit ( i , usDepot ) ;
5156: LD_VAR 0 1
5160: PPUSH
5161: LD_INT 11
5163: PPUSH
5164: CALL_OW 120
// end ;
5168: GO 5040
5170: POP
5171: POP
// end ; end ; end ;
5172: PPOPN 5
5174: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5175: LD_INT 0
5177: PPUSH
5178: PPUSH
5179: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5180: LD_ADDR_VAR 0 3
5184: PUSH
5185: LD_INT 35
5187: PUSH
5188: LD_INT 45
5190: PUSH
5191: LD_INT 48
5193: PUSH
5194: LD_EXP 58
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: ST_TO_ADDR
// for i in tech do
5205: LD_ADDR_VAR 0 4
5209: PUSH
5210: LD_VAR 0 3
5214: PUSH
5215: FOR_IN
5216: IFFALSE 5234
// AddComResearch ( lab , i ) ;
5218: LD_VAR 0 1
5222: PPUSH
5223: LD_VAR 0 4
5227: PPUSH
5228: CALL_OW 184
5232: GO 5215
5234: POP
5235: POP
// end ;
5236: LD_VAR 0 2
5240: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5241: LD_EXP 12
5245: PUSH
5246: LD_EXP 23
5250: PUSH
5251: LD_EXP 27
5255: LESSEQUAL
5256: AND
5257: IFFALSE 5282
5259: GO 5261
5261: DISABLE
// begin enable ;
5262: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5263: LD_INT 35
5265: PPUSH
5266: LD_INT 2065
5268: PPUSH
5269: CALL_OW 12
5273: PPUSH
5274: CALL_OW 67
// SendConvoy ;
5278: CALL 5380 0 0
// end ;
5282: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5283: LD_EXP 6
5287: PUSH
5288: LD_EXP 18
5292: AND
5293: IFFALSE 5379
5295: GO 5297
5297: DISABLE
// begin if americanHasEscaped then
5298: LD_EXP 8
5302: IFFALSE 5313
// wait ( 3 3$20 ) else
5304: LD_INT 7000
5306: PPUSH
5307: CALL_OW 67
5311: GO 5320
// wait ( 6 6$40 ) ;
5313: LD_INT 14000
5315: PPUSH
5316: CALL_OW 67
// SendAttack ;
5320: CALL 6123 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
5324: LD_INT 14000
5326: PUSH
5327: LD_INT 11900
5329: PUSH
5330: LD_INT 9800
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: LIST
5337: PUSH
5338: LD_OWVAR 67
5342: ARRAY
5343: PPUSH
5344: CALL_OW 67
// SendAttack ;
5348: CALL 6123 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
5352: LD_EXP 19
5356: PUSH
5357: LD_INT 6
5359: PUSH
5360: LD_INT 7
5362: PUSH
5363: LD_INT 8
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: PUSH
5371: LD_OWVAR 67
5375: ARRAY
5376: LESS
5377: IFFALSE 5324
// end ;
5379: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5380: LD_INT 0
5382: PPUSH
5383: PPUSH
5384: PPUSH
5385: PPUSH
5386: PPUSH
5387: PPUSH
5388: PPUSH
5389: PPUSH
// road := rand ( 1 , 2 ) ;
5390: LD_ADDR_VAR 0 4
5394: PUSH
5395: LD_INT 1
5397: PPUSH
5398: LD_INT 2
5400: PPUSH
5401: CALL_OW 12
5405: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5406: LD_ADDR_VAR 0 8
5410: PUSH
5411: LD_INT 3
5413: PUSH
5414: LD_INT 8
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_VAR 0 4
5425: ARRAY
5426: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5427: LD_ADDR_VAR 0 5
5431: PUSH
5432: LD_INT 35
5434: PUSH
5435: LD_INT 66
5437: PUSH
5438: LD_INT 1
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 101
5448: PUSH
5449: LD_INT 8
5451: PUSH
5452: LD_INT 4
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5464: LD_ADDR_VAR 0 6
5468: PUSH
5469: LD_INT 34
5471: PUSH
5472: LD_INT 67
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 38
5481: PUSH
5482: LD_INT 62
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 43
5491: PUSH
5492: LD_INT 54
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 57
5501: PUSH
5502: LD_INT 57
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 77
5511: PUSH
5512: LD_INT 71
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 86
5521: PUSH
5522: LD_INT 60
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: LD_INT 89
5531: PUSH
5532: LD_INT 35
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_INT 93
5541: PUSH
5542: LD_INT 17
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PUSH
5549: LD_INT 97
5551: PUSH
5552: LD_INT 10
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 103
5561: PUSH
5562: LD_INT 9
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: ST_TO_ADDR
// if road = 2 then
5581: LD_VAR 0 4
5585: PUSH
5586: LD_INT 2
5588: EQUAL
5589: IFFALSE 5606
// points := ReverseArray ( points ) ;
5591: LD_ADDR_VAR 0 6
5595: PUSH
5596: LD_VAR 0 6
5600: PPUSH
5601: CALL 973 0 1
5605: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5606: LD_INT 4
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: LD_INT 2
5614: PPUSH
5615: LD_INT 1
5617: PPUSH
5618: LD_INT 1
5620: PPUSH
5621: LD_INT 12
5623: PPUSH
5624: LD_INT 80
5626: PPUSH
5627: CALL 313 0 7
// veh := CreateVehicle ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 45
5640: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_VAR 0 5
5650: PUSH
5651: LD_VAR 0 4
5655: ARRAY
5656: PUSH
5657: LD_INT 3
5659: ARRAY
5660: PPUSH
5661: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5665: LD_VAR 0 3
5669: PPUSH
5670: LD_VAR 0 5
5674: PUSH
5675: LD_VAR 0 4
5679: ARRAY
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 5
5689: PUSH
5690: LD_VAR 0 4
5694: ARRAY
5695: PUSH
5696: LD_INT 2
5698: ARRAY
5699: PPUSH
5700: LD_INT 0
5702: PPUSH
5703: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5707: LD_INT 0
5709: PPUSH
5710: LD_INT 1
5712: PPUSH
5713: LD_OWVAR 67
5717: PPUSH
5718: CALL_OW 380
// un := CreateHuman ;
5722: LD_ADDR_VAR 0 2
5726: PUSH
5727: CALL_OW 44
5731: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5732: LD_VAR 0 2
5736: PPUSH
5737: LD_VAR 0 3
5741: PPUSH
5742: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5746: LD_INT 60
5748: PUSH
5749: LD_INT 56
5751: PUSH
5752: LD_INT 52
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: PUSH
5760: LD_OWVAR 67
5764: ARRAY
5765: PPUSH
5766: CALL_OW 13
5770: PUSH
5771: LD_OWVAR 1
5775: PUSH
5776: LD_INT 30
5778: MOD
5779: PLUS
5780: PUSH
5781: LD_EXP 23
5785: PUSH
5786: LD_INT 4
5788: LESS
5789: OR
5790: IFFALSE 5807
// SetCargo ( veh , mat_cans , 100 ) ;
5792: LD_VAR 0 3
5796: PPUSH
5797: LD_INT 1
5799: PPUSH
5800: LD_INT 100
5802: PPUSH
5803: CALL_OW 290
// for i := 2 to points do
5807: LD_ADDR_VAR 0 7
5811: PUSH
5812: DOUBLE
5813: LD_INT 2
5815: DEC
5816: ST_TO_ADDR
5817: LD_VAR 0 6
5821: PUSH
5822: FOR_TO
5823: IFFALSE 5866
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5825: LD_VAR 0 3
5829: PPUSH
5830: LD_VAR 0 6
5834: PUSH
5835: LD_VAR 0 7
5839: ARRAY
5840: PUSH
5841: LD_INT 1
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 6
5849: PUSH
5850: LD_VAR 0 7
5854: ARRAY
5855: PUSH
5856: LD_INT 2
5858: ARRAY
5859: PPUSH
5860: CALL_OW 171
5864: GO 5822
5866: POP
5867: POP
// convoyCounter := convoyCounter + 1 ;
5868: LD_ADDR_EXP 23
5872: PUSH
5873: LD_EXP 23
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5882: LD_INT 35
5884: PPUSH
5885: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5889: LD_VAR 0 3
5893: PPUSH
5894: CALL_OW 314
5898: NOT
5899: PUSH
5900: LD_VAR 0 3
5904: PPUSH
5905: CALL_OW 302
5909: AND
5910: IFFALSE 5951
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5912: LD_VAR 0 3
5916: PPUSH
5917: LD_VAR 0 6
5921: PUSH
5922: LD_VAR 0 6
5926: ARRAY
5927: PUSH
5928: LD_INT 1
5930: ARRAY
5931: PPUSH
5932: LD_VAR 0 6
5936: PUSH
5937: LD_VAR 0 6
5941: ARRAY
5942: PUSH
5943: LD_INT 2
5945: ARRAY
5946: PPUSH
5947: CALL_OW 111
// if not IsInUnit ( un ) then
5951: LD_VAR 0 2
5955: PPUSH
5956: CALL_OW 310
5960: NOT
5961: IFFALSE 6002
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5963: LD_VAR 0 2
5967: PPUSH
5968: LD_VAR 0 6
5972: PUSH
5973: LD_VAR 0 6
5977: ARRAY
5978: PUSH
5979: LD_INT 1
5981: ARRAY
5982: PPUSH
5983: LD_VAR 0 6
5987: PUSH
5988: LD_VAR 0 6
5992: ARRAY
5993: PUSH
5994: LD_INT 2
5996: ARRAY
5997: PPUSH
5998: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6002: LD_VAR 0 3
6006: PPUSH
6007: LD_VAR 0 8
6011: PPUSH
6012: CALL_OW 308
6016: PUSH
6017: LD_VAR 0 2
6021: PPUSH
6022: LD_VAR 0 8
6026: PPUSH
6027: CALL_OW 308
6031: OR
6032: IFFALSE 5882
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6034: LD_VAR 0 2
6038: PPUSH
6039: CALL_OW 302
6043: PUSH
6044: LD_VAR 0 3
6048: PPUSH
6049: CALL_OW 302
6053: NOT
6054: AND
6055: PUSH
6056: LD_VAR 0 2
6060: PPUSH
6061: LD_VAR 0 8
6065: PPUSH
6066: CALL_OW 308
6070: AND
6071: IFFALSE 6082
// RemoveUnit ( un ) ;
6073: LD_VAR 0 2
6077: PPUSH
6078: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6082: LD_VAR 0 3
6086: PPUSH
6087: LD_VAR 0 8
6091: PPUSH
6092: CALL_OW 308
6096: PUSH
6097: LD_VAR 0 3
6101: PPUSH
6102: CALL_OW 302
6106: AND
6107: IFFALSE 6118
// RemoveUnit ( veh ) ;
6109: LD_VAR 0 3
6113: PPUSH
6114: CALL_OW 64
// end ;
6118: LD_VAR 0 1
6122: RET
// export function SendAttack ; var un , veh , i ; begin
6123: LD_INT 0
6125: PPUSH
6126: PPUSH
6127: PPUSH
6128: PPUSH
// if ingame_video then
6129: LD_OWVAR 52
6133: IFFALSE 6156
// begin repeat wait ( 0 0$1 ) ;
6135: LD_INT 35
6137: PPUSH
6138: CALL_OW 67
// until not ingame_video ;
6142: LD_OWVAR 52
6146: NOT
6147: IFFALSE 6135
// wait ( 0 0$5 ) ;
6149: LD_INT 175
6151: PPUSH
6152: CALL_OW 67
// end ; IncomingAttack ;
6156: CALL 15069 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6160: LD_INT 2100
6162: PPUSH
6163: LD_INT 3500
6165: PPUSH
6166: CALL_OW 12
6170: PPUSH
6171: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] + attackWave div 3 do
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_INT 3
6187: PUSH
6188: LD_INT 4
6190: PUSH
6191: LD_INT 4
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: PUSH
6199: LD_OWVAR 67
6203: ARRAY
6204: PUSH
6205: LD_EXP 19
6209: PUSH
6210: LD_INT 3
6212: DIV
6213: PLUS
6214: PUSH
6215: FOR_TO
6216: IFFALSE 6328
// begin uc_side := 1 ;
6218: LD_ADDR_OWVAR 20
6222: PUSH
6223: LD_INT 1
6225: ST_TO_ADDR
// uc_nation := 1 ;
6226: LD_ADDR_OWVAR 21
6230: PUSH
6231: LD_INT 1
6233: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6234: LD_INT 0
6236: PPUSH
6237: LD_INT 1
6239: PPUSH
6240: LD_INT 2
6242: PUSH
6243: LD_INT 3
6245: PUSH
6246: LD_INT 4
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: PUSH
6254: LD_OWVAR 67
6258: ARRAY
6259: PPUSH
6260: CALL_OW 380
// un := CreateHuman ;
6264: LD_ADDR_VAR 0 2
6268: PUSH
6269: CALL_OW 44
6273: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6274: LD_VAR 0 2
6278: PPUSH
6279: LD_INT 37
6281: PPUSH
6282: LD_INT 70
6284: PPUSH
6285: LD_INT 3
6287: PPUSH
6288: LD_INT 0
6290: PPUSH
6291: CALL_OW 50
// usAttackers := usAttackers union un ;
6295: LD_ADDR_EXP 47
6299: PUSH
6300: LD_EXP 47
6304: PUSH
6305: LD_VAR 0 2
6309: UNION
6310: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6311: LD_VAR 0 2
6315: PPUSH
6316: LD_INT 40
6318: PPUSH
6319: LD_INT 65
6321: PPUSH
6322: CALL_OW 111
// end ;
6326: GO 6215
6328: POP
6329: POP
// uc_side := 1 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// uc_nation := 1 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 1
6345: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6346: LD_INT 0
6348: PPUSH
6349: LD_INT 4
6351: PPUSH
6352: LD_INT 2
6354: PPUSH
6355: CALL_OW 380
// un := CreateHuman ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: CALL_OW 44
6368: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6369: LD_VAR 0 2
6373: PPUSH
6374: LD_INT 37
6376: PPUSH
6377: LD_INT 70
6379: PPUSH
6380: LD_INT 3
6382: PPUSH
6383: LD_INT 0
6385: PPUSH
6386: CALL_OW 50
// usAttackers := usAttackers union un ;
6390: LD_ADDR_EXP 47
6394: PUSH
6395: LD_EXP 47
6399: PUSH
6400: LD_VAR 0 2
6404: UNION
6405: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6406: LD_VAR 0 2
6410: PPUSH
6411: LD_INT 40
6413: PPUSH
6414: LD_INT 65
6416: PPUSH
6417: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6421: LD_ADDR_VAR 0 4
6425: PUSH
6426: DOUBLE
6427: LD_INT 1
6429: DEC
6430: ST_TO_ADDR
6431: LD_OWVAR 67
6435: PUSH
6436: LD_EXP 19
6440: PUSH
6441: LD_INT 4
6443: DIV
6444: PLUS
6445: PUSH
6446: FOR_TO
6447: IFFALSE 6620
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6449: LD_ADDR_VAR 0 3
6453: PUSH
6454: LD_INT 1
6456: PPUSH
6457: LD_INT 1
6459: PPUSH
6460: LD_INT 2
6462: PPUSH
6463: LD_INT 1
6465: PPUSH
6466: LD_INT 1
6468: PPUSH
6469: LD_INT 4
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: LD_INT 2
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: CALL_OW 12
6493: ARRAY
6494: PPUSH
6495: LD_INT 90
6497: PPUSH
6498: CALL 313 0 7
6502: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6503: LD_VAR 0 3
6507: PPUSH
6508: LD_INT 35
6510: PPUSH
6511: LD_INT 65
6513: PPUSH
6514: LD_INT 0
6516: PPUSH
6517: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6521: LD_INT 0
6523: PPUSH
6524: LD_INT 3
6526: PPUSH
6527: LD_OWVAR 67
6531: PUSH
6532: LD_INT 1
6534: PLUS
6535: PPUSH
6536: CALL_OW 380
// un := CreateHuman ;
6540: LD_ADDR_VAR 0 2
6544: PUSH
6545: CALL_OW 44
6549: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6550: LD_VAR 0 2
6554: PPUSH
6555: LD_VAR 0 3
6559: PPUSH
6560: CALL_OW 52
// usAttackers := usAttackers union un ;
6564: LD_ADDR_EXP 47
6568: PUSH
6569: LD_EXP 47
6573: PUSH
6574: LD_VAR 0 2
6578: UNION
6579: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6580: LD_VAR 0 3
6584: PPUSH
6585: LD_INT 39
6587: PPUSH
6588: LD_INT 60
6590: PPUSH
6591: CALL_OW 111
// wait ( 0 0$3 ) ;
6595: LD_INT 105
6597: PPUSH
6598: CALL_OW 67
// usAttackers := usAttackers union veh ;
6602: LD_ADDR_EXP 47
6606: PUSH
6607: LD_EXP 47
6611: PUSH
6612: LD_VAR 0 3
6616: UNION
6617: ST_TO_ADDR
// end ;
6618: GO 6446
6620: POP
6621: POP
// attackWave := attackWave + 1 ;
6622: LD_ADDR_EXP 19
6626: PUSH
6627: LD_EXP 19
6631: PUSH
6632: LD_INT 1
6634: PLUS
6635: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6636: LD_EXP 24
6640: PPUSH
6641: CALL_OW 427
// end ;
6645: LD_VAR 0 1
6649: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6650: LD_INT 0
6652: PPUSH
6653: PPUSH
6654: PPUSH
6655: PPUSH
6656: PPUSH
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
// if retreatAllowed then
6663: LD_EXP 11
6667: IFFALSE 6679
// strategy := 2 else
6669: LD_ADDR_VAR 0 5
6673: PUSH
6674: LD_INT 2
6676: ST_TO_ADDR
6677: GO 6695
// strategy := rand ( 0 , 2 ) ;
6679: LD_ADDR_VAR 0 5
6683: PUSH
6684: LD_INT 0
6686: PPUSH
6687: LD_INT 2
6689: PPUSH
6690: CALL_OW 12
6694: ST_TO_ADDR
// attackFormula := [ ] ;
6695: LD_ADDR_VAR 0 6
6699: PUSH
6700: EMPTY
6701: ST_TO_ADDR
// case strategy of 0 :
6702: LD_VAR 0 5
6706: PUSH
6707: LD_INT 0
6709: DOUBLE
6710: EQUAL
6711: IFTRUE 6715
6713: GO 7045
6715: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6716: LD_INT 11
6718: PPUSH
6719: LD_INT 22
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 30
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: CALL_OW 70
6747: NOT
6748: IFFALSE 6820
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6750: LD_ADDR_VAR 0 6
6754: PUSH
6755: LD_INT 41
6757: PUSH
6758: LD_INT 34
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: PUSH
6768: LD_INT 53
6770: PUSH
6771: LD_INT 62
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 37
6780: PUSH
6781: LD_INT 63
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 44
6790: PUSH
6791: LD_INT 45
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: LD_INT 37
6800: PUSH
6801: LD_INT 28
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: ST_TO_ADDR
6818: GO 7043
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6820: LD_INT 12
6822: PPUSH
6823: LD_INT 22
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 2
6835: PUSH
6836: LD_INT 30
6838: PUSH
6839: LD_INT 4
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 30
6848: PUSH
6849: LD_INT 31
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 32
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 70
6880: NOT
6881: IFFALSE 6964
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6883: LD_ADDR_VAR 0 6
6887: PUSH
6888: LD_INT 27
6890: PUSH
6891: LD_INT 42
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 27
6900: PUSH
6901: LD_INT 32
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 53
6914: PUSH
6915: LD_INT 62
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 37
6924: PUSH
6925: LD_INT 63
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 44
6934: PUSH
6935: LD_INT 45
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 37
6944: PUSH
6945: LD_INT 28
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: ST_TO_ADDR
6962: GO 7043
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
6964: LD_ADDR_VAR 0 6
6968: PUSH
6969: LD_INT 71
6971: PUSH
6972: LD_INT 67
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 54
6981: PUSH
6982: LD_INT 35
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 63
6995: PUSH
6996: LD_INT 40
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 37
7005: PUSH
7006: LD_INT 63
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: LD_INT 44
7015: PUSH
7016: LD_INT 45
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 37
7025: PUSH
7026: LD_INT 28
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: ST_TO_ADDR
// end ; 1 :
7043: GO 7248
7045: LD_INT 1
7047: DOUBLE
7048: EQUAL
7049: IFTRUE 7053
7051: GO 7157
7053: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7054: LD_ADDR_VAR 0 6
7058: PUSH
7059: LD_INT 71
7061: PUSH
7062: LD_INT 67
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 82
7071: PUSH
7072: LD_INT 23
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 53
7081: PUSH
7082: LD_INT 7
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: LD_INT 43
7091: PUSH
7092: LD_INT 10
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 53
7107: PUSH
7108: LD_INT 62
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 37
7117: PUSH
7118: LD_INT 63
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 44
7127: PUSH
7128: LD_INT 45
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 37
7137: PUSH
7138: LD_INT 28
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: ST_TO_ADDR
7155: GO 7248
7157: LD_INT 2
7159: DOUBLE
7160: EQUAL
7161: IFTRUE 7165
7163: GO 7247
7165: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7166: LD_ADDR_VAR 0 6
7170: PUSH
7171: LD_INT 90
7173: PUSH
7174: LD_INT 59
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 108
7183: PUSH
7184: LD_INT 64
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 82
7197: PUSH
7198: LD_INT 75
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 73
7207: PUSH
7208: LD_INT 67
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 101
7217: PUSH
7218: LD_INT 65
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 108
7227: PUSH
7228: LD_INT 62
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: ST_TO_ADDR
7245: GO 7248
7247: POP
// if not attackFormula then
7248: LD_VAR 0 6
7252: NOT
7253: IFFALSE 7257
// exit ;
7255: GO 8935
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7257: LD_ADDR_VAR 0 7
7261: PUSH
7262: LD_EXP 47
7266: PPUSH
7267: LD_INT 25
7269: PUSH
7270: LD_INT 1
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PPUSH
7277: CALL_OW 72
7281: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7282: LD_ADDR_VAR 0 8
7286: PUSH
7287: LD_EXP 47
7291: PPUSH
7292: LD_INT 25
7294: PUSH
7295: LD_INT 4
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PPUSH
7302: CALL_OW 72
7306: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7307: LD_ADDR_VAR 0 9
7311: PUSH
7312: LD_EXP 47
7316: PPUSH
7317: LD_INT 25
7319: PUSH
7320: LD_INT 3
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PPUSH
7327: CALL_OW 72
7331: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7332: LD_ADDR_VAR 0 10
7336: PUSH
7337: LD_EXP 47
7341: PPUSH
7342: LD_INT 21
7344: PUSH
7345: LD_INT 2
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PPUSH
7352: CALL_OW 72
7356: ST_TO_ADDR
// if sci then
7357: LD_VAR 0 8
7361: IFFALSE 7398
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7363: LD_VAR 0 8
7367: PPUSH
7368: LD_VAR 0 6
7372: PUSH
7373: LD_INT 2
7375: ARRAY
7376: PUSH
7377: LD_INT 1
7379: ARRAY
7380: PPUSH
7381: LD_VAR 0 6
7385: PUSH
7386: LD_INT 2
7388: ARRAY
7389: PUSH
7390: LD_INT 2
7392: ARRAY
7393: PPUSH
7394: CALL_OW 111
// repeat wait ( 10 ) ;
7398: LD_INT 10
7400: PPUSH
7401: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7405: LD_ADDR_VAR 0 7
7409: PUSH
7410: LD_EXP 47
7414: PPUSH
7415: LD_INT 25
7417: PUSH
7418: LD_INT 1
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PPUSH
7425: CALL_OW 72
7429: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7430: LD_ADDR_VAR 0 8
7434: PUSH
7435: LD_EXP 47
7439: PPUSH
7440: LD_INT 25
7442: PUSH
7443: LD_INT 4
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 72
7454: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7455: LD_ADDR_VAR 0 9
7459: PUSH
7460: LD_EXP 47
7464: PPUSH
7465: LD_INT 25
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PPUSH
7475: CALL_OW 72
7479: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7480: LD_ADDR_VAR 0 10
7484: PUSH
7485: LD_EXP 47
7489: PPUSH
7490: LD_INT 21
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PPUSH
7500: CALL_OW 72
7504: ST_TO_ADDR
// if sol then
7505: LD_VAR 0 7
7509: IFFALSE 7930
// begin for i in sol do
7511: LD_ADDR_VAR 0 2
7515: PUSH
7516: LD_VAR 0 7
7520: PUSH
7521: FOR_IN
7522: IFFALSE 7928
// begin tag := GetTag ( i ) ;
7524: LD_ADDR_VAR 0 4
7528: PUSH
7529: LD_VAR 0 2
7533: PPUSH
7534: CALL_OW 110
7538: ST_TO_ADDR
// if not tag then
7539: LD_VAR 0 4
7543: NOT
7544: IFFALSE 7653
// begin if GetLives ( i ) = 1000 then
7546: LD_VAR 0 2
7550: PPUSH
7551: CALL_OW 256
7555: PUSH
7556: LD_INT 1000
7558: EQUAL
7559: IFFALSE 7575
// SetTag ( i , 1 ) else
7561: LD_VAR 0 2
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: CALL_OW 109
7573: GO 7651
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7575: LD_VAR 0 2
7579: PPUSH
7580: LD_VAR 0 6
7584: PUSH
7585: LD_INT 2
7587: ARRAY
7588: PUSH
7589: LD_INT 1
7591: ARRAY
7592: PPUSH
7593: LD_VAR 0 6
7597: PUSH
7598: LD_INT 2
7600: ARRAY
7601: PUSH
7602: LD_INT 2
7604: ARRAY
7605: PPUSH
7606: CALL_OW 297
7610: PUSH
7611: LD_INT 10
7613: GREATER
7614: IFFALSE 7651
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7616: LD_VAR 0 2
7620: PPUSH
7621: LD_VAR 0 6
7625: PUSH
7626: LD_INT 2
7628: ARRAY
7629: PUSH
7630: LD_INT 1
7632: ARRAY
7633: PPUSH
7634: LD_VAR 0 6
7638: PUSH
7639: LD_INT 2
7641: ARRAY
7642: PUSH
7643: LD_INT 2
7645: ARRAY
7646: PPUSH
7647: CALL_OW 111
// end else
7651: GO 7926
// begin if GetLives ( i ) < 760 then
7653: LD_VAR 0 2
7657: PPUSH
7658: CALL_OW 256
7662: PUSH
7663: LD_INT 760
7665: LESS
7666: IFFALSE 7717
// begin SetTag ( i , 0 ) ;
7668: LD_VAR 0 2
7672: PPUSH
7673: LD_INT 0
7675: PPUSH
7676: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7680: LD_VAR 0 2
7684: PPUSH
7685: LD_VAR 0 6
7689: PUSH
7690: LD_INT 2
7692: ARRAY
7693: PUSH
7694: LD_INT 1
7696: ARRAY
7697: PPUSH
7698: LD_VAR 0 6
7702: PUSH
7703: LD_INT 2
7705: ARRAY
7706: PUSH
7707: LD_INT 2
7709: ARRAY
7710: PPUSH
7711: CALL_OW 111
// end else
7715: GO 7926
// if tag <= attackFormula [ 1 ] then
7717: LD_VAR 0 4
7721: PUSH
7722: LD_VAR 0 6
7726: PUSH
7727: LD_INT 1
7729: ARRAY
7730: LESSEQUAL
7731: IFFALSE 7892
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7733: LD_VAR 0 2
7737: PPUSH
7738: LD_VAR 0 6
7742: PUSH
7743: LD_INT 1
7745: ARRAY
7746: PUSH
7747: LD_VAR 0 4
7751: ARRAY
7752: PUSH
7753: LD_INT 1
7755: ARRAY
7756: PPUSH
7757: LD_VAR 0 6
7761: PUSH
7762: LD_INT 1
7764: ARRAY
7765: PUSH
7766: LD_VAR 0 4
7770: ARRAY
7771: PUSH
7772: LD_INT 2
7774: ARRAY
7775: PPUSH
7776: CALL_OW 297
7780: PUSH
7781: LD_INT 6
7783: GREATER
7784: IFFALSE 7835
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7786: LD_VAR 0 2
7790: PPUSH
7791: LD_VAR 0 6
7795: PUSH
7796: LD_INT 1
7798: ARRAY
7799: PUSH
7800: LD_VAR 0 4
7804: ARRAY
7805: PUSH
7806: LD_INT 1
7808: ARRAY
7809: PPUSH
7810: LD_VAR 0 6
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PUSH
7819: LD_VAR 0 4
7823: ARRAY
7824: PUSH
7825: LD_INT 2
7827: ARRAY
7828: PPUSH
7829: CALL_OW 114
7833: GO 7890
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7835: LD_INT 81
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 91
7847: PUSH
7848: LD_VAR 0 2
7852: PUSH
7853: LD_INT 10
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: LIST
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PPUSH
7865: CALL_OW 69
7869: NOT
7870: IFFALSE 7890
// SetTag ( i , tag + 1 ) ;
7872: LD_VAR 0 2
7876: PPUSH
7877: LD_VAR 0 4
7881: PUSH
7882: LD_INT 1
7884: PLUS
7885: PPUSH
7886: CALL_OW 109
// end else
7890: GO 7926
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7892: LD_VAR 0 2
7896: PPUSH
7897: LD_INT 81
7899: PUSH
7900: LD_INT 1
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PPUSH
7907: CALL_OW 69
7911: PPUSH
7912: LD_VAR 0 2
7916: PPUSH
7917: CALL_OW 74
7921: PPUSH
7922: CALL_OW 115
// end ; end ;
7926: GO 7521
7928: POP
7929: POP
// end ; if sci then
7930: LD_VAR 0 8
7934: IFFALSE 8203
// begin if not sol and not mech then
7936: LD_VAR 0 7
7940: NOT
7941: PUSH
7942: LD_VAR 0 9
7946: NOT
7947: AND
7948: IFFALSE 8000
// begin for i in sci do
7950: LD_ADDR_VAR 0 2
7954: PUSH
7955: LD_VAR 0 8
7959: PUSH
7960: FOR_IN
7961: IFFALSE 7996
// begin usForces := usForces union i ;
7963: LD_ADDR_EXP 44
7967: PUSH
7968: LD_EXP 44
7972: PUSH
7973: LD_VAR 0 2
7977: UNION
7978: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
7979: LD_VAR 0 2
7983: PPUSH
7984: LD_INT 34
7986: PPUSH
7987: LD_INT 68
7989: PPUSH
7990: CALL_OW 111
// end ;
7994: GO 7960
7996: POP
7997: POP
// end else
7998: GO 8203
// for i in sci do
8000: LD_ADDR_VAR 0 2
8004: PUSH
8005: LD_VAR 0 8
8009: PUSH
8010: FOR_IN
8011: IFFALSE 8201
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8013: LD_VAR 0 2
8017: PPUSH
8018: LD_VAR 0 6
8022: PUSH
8023: LD_INT 2
8025: ARRAY
8026: PUSH
8027: LD_INT 1
8029: ARRAY
8030: PPUSH
8031: LD_VAR 0 6
8035: PUSH
8036: LD_INT 2
8038: ARRAY
8039: PUSH
8040: LD_INT 2
8042: ARRAY
8043: PPUSH
8044: CALL_OW 297
8048: PUSH
8049: LD_INT 10
8051: GREATER
8052: IFFALSE 8091
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8054: LD_VAR 0 2
8058: PPUSH
8059: LD_VAR 0 6
8063: PUSH
8064: LD_INT 2
8066: ARRAY
8067: PUSH
8068: LD_INT 1
8070: ARRAY
8071: PPUSH
8072: LD_VAR 0 6
8076: PUSH
8077: LD_INT 2
8079: ARRAY
8080: PUSH
8081: LD_INT 2
8083: ARRAY
8084: PPUSH
8085: CALL_OW 111
8089: GO 8199
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8091: LD_VAR 0 7
8095: PPUSH
8096: LD_INT 3
8098: PUSH
8099: LD_INT 24
8101: PUSH
8102: LD_INT 1000
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 91
8115: PUSH
8116: LD_VAR 0 2
8120: PUSH
8121: LD_INT 10
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PPUSH
8133: CALL_OW 72
8137: IFFALSE 8199
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8139: LD_VAR 0 2
8143: PPUSH
8144: LD_VAR 0 7
8148: PPUSH
8149: LD_INT 3
8151: PUSH
8152: LD_INT 24
8154: PUSH
8155: LD_INT 1000
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 91
8168: PUSH
8169: LD_VAR 0 2
8173: PUSH
8174: LD_INT 10
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: LIST
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PPUSH
8186: CALL_OW 72
8190: PUSH
8191: LD_INT 1
8193: ARRAY
8194: PPUSH
8195: CALL_OW 128
8199: GO 8010
8201: POP
8202: POP
// end ; if mech then
8203: LD_VAR 0 9
8207: IFFALSE 8917
// begin for i in mech do
8209: LD_ADDR_VAR 0 2
8213: PUSH
8214: LD_VAR 0 9
8218: PUSH
8219: FOR_IN
8220: IFFALSE 8915
// begin tag := GetTag ( i ) ;
8222: LD_ADDR_VAR 0 4
8226: PUSH
8227: LD_VAR 0 2
8231: PPUSH
8232: CALL_OW 110
8236: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8237: LD_ADDR_VAR 0 11
8241: PUSH
8242: LD_VAR 0 2
8246: PPUSH
8247: CALL_OW 310
8251: ST_TO_ADDR
// if not tag then
8252: LD_VAR 0 4
8256: NOT
8257: IFFALSE 8628
// begin if veh then
8259: LD_VAR 0 11
8263: IFFALSE 8434
// begin if GetLives ( veh ) = 1000 then
8265: LD_VAR 0 11
8269: PPUSH
8270: CALL_OW 256
8274: PUSH
8275: LD_INT 1000
8277: EQUAL
8278: IFFALSE 8294
// SetTag ( i , 1 ) else
8280: LD_VAR 0 2
8284: PPUSH
8285: LD_INT 1
8287: PPUSH
8288: CALL_OW 109
8292: GO 8432
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8294: LD_VAR 0 11
8298: PPUSH
8299: LD_VAR 0 6
8303: PUSH
8304: LD_INT 3
8306: ARRAY
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: LD_VAR 0 6
8316: PUSH
8317: LD_INT 3
8319: ARRAY
8320: PUSH
8321: LD_INT 2
8323: ARRAY
8324: PPUSH
8325: CALL_OW 297
8329: PUSH
8330: LD_INT 8
8332: GREATER
8333: IFFALSE 8372
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8335: LD_VAR 0 11
8339: PPUSH
8340: LD_VAR 0 6
8344: PUSH
8345: LD_INT 3
8347: ARRAY
8348: PUSH
8349: LD_INT 1
8351: ARRAY
8352: PPUSH
8353: LD_VAR 0 6
8357: PUSH
8358: LD_INT 3
8360: ARRAY
8361: PUSH
8362: LD_INT 2
8364: ARRAY
8365: PPUSH
8366: CALL_OW 111
8370: GO 8432
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8372: LD_INT 81
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 91
8384: PUSH
8385: LD_VAR 0 2
8389: PUSH
8390: LD_INT 10
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PPUSH
8402: CALL_OW 69
8406: NOT
8407: IFFALSE 8432
// begin ComExitVehicle ( i ) ;
8409: LD_VAR 0 2
8413: PPUSH
8414: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_VAR 0 11
8427: PPUSH
8428: CALL_OW 189
// end ; end else
8432: GO 8626
// if GetLives ( i ) < 400 then
8434: LD_VAR 0 2
8438: PPUSH
8439: CALL_OW 256
8443: PUSH
8444: LD_INT 400
8446: LESS
8447: IFFALSE 8498
// begin usAttackers := usAttackers diff i ;
8449: LD_ADDR_EXP 47
8453: PUSH
8454: LD_EXP 47
8458: PUSH
8459: LD_VAR 0 2
8463: DIFF
8464: ST_TO_ADDR
// usForces := usForces union i ;
8465: LD_ADDR_EXP 44
8469: PUSH
8470: LD_EXP 44
8474: PUSH
8475: LD_VAR 0 2
8479: UNION
8480: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8481: LD_VAR 0 2
8485: PPUSH
8486: LD_INT 34
8488: PPUSH
8489: LD_INT 68
8491: PPUSH
8492: CALL_OW 111
// end else
8496: GO 8626
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8498: LD_VAR 0 10
8502: PPUSH
8503: LD_INT 58
8505: PUSH
8506: EMPTY
8507: LIST
8508: PUSH
8509: LD_INT 24
8511: PUSH
8512: LD_INT 1000
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 72
8527: PUSH
8528: LD_VAR 0 2
8532: PPUSH
8533: CALL_OW 314
8537: NOT
8538: AND
8539: PUSH
8540: LD_INT 81
8542: PUSH
8543: LD_INT 1
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 91
8552: PUSH
8553: LD_VAR 0 2
8557: PUSH
8558: LD_INT 9
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 69
8574: OR
8575: IFFALSE 8626
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8577: LD_VAR 0 2
8581: PPUSH
8582: LD_VAR 0 10
8586: PPUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: PUSH
8593: LD_INT 24
8595: PUSH
8596: LD_INT 250
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PPUSH
8607: CALL_OW 72
8611: PPUSH
8612: LD_VAR 0 2
8616: PPUSH
8617: CALL_OW 74
8621: PPUSH
8622: CALL_OW 120
// end else
8626: GO 8913
// begin if veh and GetLives ( veh ) < 760 then
8628: LD_VAR 0 11
8632: PUSH
8633: LD_VAR 0 11
8637: PPUSH
8638: CALL_OW 256
8642: PUSH
8643: LD_INT 760
8645: LESS
8646: AND
8647: IFFALSE 8698
// begin SetTag ( i , 0 ) ;
8649: LD_VAR 0 2
8653: PPUSH
8654: LD_INT 0
8656: PPUSH
8657: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8661: LD_VAR 0 11
8665: PPUSH
8666: LD_VAR 0 6
8670: PUSH
8671: LD_INT 3
8673: ARRAY
8674: PUSH
8675: LD_INT 1
8677: ARRAY
8678: PPUSH
8679: LD_VAR 0 6
8683: PUSH
8684: LD_INT 3
8686: ARRAY
8687: PUSH
8688: LD_INT 2
8690: ARRAY
8691: PPUSH
8692: CALL_OW 111
// end else
8696: GO 8913
// if veh then
8698: LD_VAR 0 11
8702: IFFALSE 8913
// if tag <= attackFormula [ 4 ] then
8704: LD_VAR 0 4
8708: PUSH
8709: LD_VAR 0 6
8713: PUSH
8714: LD_INT 4
8716: ARRAY
8717: LESSEQUAL
8718: IFFALSE 8879
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8720: LD_VAR 0 11
8724: PPUSH
8725: LD_VAR 0 6
8729: PUSH
8730: LD_INT 4
8732: ARRAY
8733: PUSH
8734: LD_VAR 0 4
8738: ARRAY
8739: PUSH
8740: LD_INT 1
8742: ARRAY
8743: PPUSH
8744: LD_VAR 0 6
8748: PUSH
8749: LD_INT 4
8751: ARRAY
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 2
8761: ARRAY
8762: PPUSH
8763: CALL_OW 297
8767: PUSH
8768: LD_INT 6
8770: GREATER
8771: IFFALSE 8822
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8773: LD_VAR 0 11
8777: PPUSH
8778: LD_VAR 0 6
8782: PUSH
8783: LD_INT 4
8785: ARRAY
8786: PUSH
8787: LD_VAR 0 4
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: LD_VAR 0 6
8801: PUSH
8802: LD_INT 4
8804: ARRAY
8805: PUSH
8806: LD_VAR 0 4
8810: ARRAY
8811: PUSH
8812: LD_INT 2
8814: ARRAY
8815: PPUSH
8816: CALL_OW 114
8820: GO 8877
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8822: LD_INT 81
8824: PUSH
8825: LD_INT 1
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 91
8834: PUSH
8835: LD_VAR 0 11
8839: PUSH
8840: LD_INT 10
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PPUSH
8852: CALL_OW 69
8856: NOT
8857: IFFALSE 8877
// SetTag ( i , tag + 1 ) ;
8859: LD_VAR 0 2
8863: PPUSH
8864: LD_VAR 0 4
8868: PUSH
8869: LD_INT 1
8871: PLUS
8872: PPUSH
8873: CALL_OW 109
// end else
8877: GO 8913
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8879: LD_VAR 0 11
8883: PPUSH
8884: LD_INT 81
8886: PUSH
8887: LD_INT 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 69
8898: PPUSH
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 74
8908: PPUSH
8909: CALL_OW 115
// end ; end ;
8913: GO 8219
8915: POP
8916: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8917: LD_EXP 47
8921: PPUSH
8922: LD_INT 52
8924: PUSH
8925: EMPTY
8926: LIST
8927: PPUSH
8928: CALL_OW 72
8932: NOT
8933: IFFALSE 7398
// end ;
8935: LD_VAR 0 1
8939: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8940: LD_INT 22
8942: PUSH
8943: LD_INT 1
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 32
8952: PUSH
8953: LD_INT 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PPUSH
8964: CALL_OW 69
8968: IFFALSE 9045
8970: GO 8972
8972: DISABLE
8973: LD_INT 0
8975: PPUSH
// begin enable ;
8976: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
8977: LD_ADDR_VAR 0 1
8981: PUSH
8982: LD_INT 22
8984: PUSH
8985: LD_INT 1
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: LD_INT 32
8994: PUSH
8995: LD_INT 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PPUSH
9006: CALL_OW 69
9010: PUSH
9011: FOR_IN
9012: IFFALSE 9043
// if GetFuel ( i ) < 10 then
9014: LD_VAR 0 1
9018: PPUSH
9019: CALL_OW 261
9023: PUSH
9024: LD_INT 10
9026: LESS
9027: IFFALSE 9041
// SetFuel ( i , 10 ) ;
9029: LD_VAR 0 1
9033: PPUSH
9034: LD_INT 10
9036: PPUSH
9037: CALL_OW 240
9041: GO 9011
9043: POP
9044: POP
// end ; end_of_file
9045: PPOPN 1
9047: END
// export function Action ; var hasAll , i , tmp ; begin
9048: LD_INT 0
9050: PPUSH
9051: PPUSH
9052: PPUSH
9053: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9054: LD_ADDR_VAR 0 2
9058: PUSH
9059: LD_INT 22
9061: PUSH
9062: LD_INT 2
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 21
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 23
9081: PUSH
9082: LD_INT 2
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: PPUSH
9094: CALL_OW 69
9098: PUSH
9099: LD_INT 7
9101: GREATEREQUAL
9102: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9103: LD_VAR 0 2
9107: PPUSH
9108: LD_STRING 03_HasAll
9110: PPUSH
9111: CALL_OW 39
// Video ( true ) ;
9115: LD_INT 1
9117: PPUSH
9118: CALL 73378 0 1
// CenterNowOnUnits ( Heike ) ;
9122: LD_EXP 28
9126: PPUSH
9127: CALL_OW 87
// wait ( 0 0$2 ) ;
9131: LD_INT 70
9133: PPUSH
9134: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9138: LD_EXP 36
9142: PPUSH
9143: LD_STRING DF-1-start
9145: PPUSH
9146: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9150: LD_EXP 28
9154: PPUSH
9155: LD_EXP 36
9159: PPUSH
9160: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9164: LD_EXP 28
9168: PPUSH
9169: LD_STRING DH-1-start
9171: PPUSH
9172: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9176: LD_EXP 37
9180: PPUSH
9181: LD_INT 92
9183: PPUSH
9184: LD_INT 21
9186: PPUSH
9187: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9191: LD_EXP 32
9195: PPUSH
9196: LD_INT 94
9198: PPUSH
9199: LD_INT 23
9201: PPUSH
9202: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9206: LD_EXP 40
9210: PUSH
9211: LD_INT 1
9213: ARRAY
9214: PPUSH
9215: LD_INT 90
9217: PPUSH
9218: LD_INT 23
9220: PPUSH
9221: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9225: LD_EXP 40
9229: PUSH
9230: LD_INT 2
9232: ARRAY
9233: PPUSH
9234: LD_INT 93
9236: PPUSH
9237: LD_INT 25
9239: PPUSH
9240: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9244: LD_EXP 40
9248: PPUSH
9249: LD_EXP 37
9253: PPUSH
9254: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9258: LD_EXP 37
9262: PUSH
9263: LD_EXP 32
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PPUSH
9272: LD_EXP 28
9276: PPUSH
9277: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9281: LD_EXP 28
9285: PPUSH
9286: LD_EXP 37
9290: PPUSH
9291: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9295: LD_INT 35
9297: PPUSH
9298: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9302: LD_EXP 37
9306: PPUSH
9307: LD_INT 92
9309: PPUSH
9310: LD_INT 21
9312: PPUSH
9313: CALL_OW 307
9317: IFFALSE 9295
// Say ( Omar , DO-1-start ) ;
9319: LD_EXP 37
9323: PPUSH
9324: LD_STRING DO-1-start
9326: PPUSH
9327: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9331: LD_EXP 28
9335: PPUSH
9336: LD_STRING DH-2-start
9338: PPUSH
9339: CALL_OW 88
// if hasAll then
9343: LD_VAR 0 2
9347: IFFALSE 9475
// begin Say ( Omar , DO-2-start ) ;
9349: LD_EXP 37
9353: PPUSH
9354: LD_STRING DO-2-start
9356: PPUSH
9357: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9361: LD_EXP 37
9365: PPUSH
9366: LD_STRING DO-3-start
9368: PPUSH
9369: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9373: LD_EXP 28
9377: PPUSH
9378: LD_STRING DH-3-start
9380: PPUSH
9381: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9385: LD_EXP 36
9389: PPUSH
9390: LD_STRING DF-2-start
9392: PPUSH
9393: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9397: LD_EXP 37
9401: PPUSH
9402: LD_EXP 36
9406: PPUSH
9407: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9411: LD_EXP 37
9415: PPUSH
9416: LD_STRING DO-4-start
9418: PPUSH
9419: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9423: LD_EXP 36
9427: PPUSH
9428: LD_STRING DF-3-start
9430: PPUSH
9431: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9435: LD_EXP 37
9439: PPUSH
9440: LD_STRING DO-5-start
9442: PPUSH
9443: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9447: LD_EXP 36
9451: PPUSH
9452: LD_STRING DF-4-start
9454: PPUSH
9455: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9459: LD_EXP 37
9463: PPUSH
9464: LD_EXP 28
9468: PPUSH
9469: CALL_OW 119
// end else
9473: GO 9575
// begin Say ( Omar , DO-2-start-a ) ;
9475: LD_EXP 37
9479: PPUSH
9480: LD_STRING DO-2-start-a
9482: PPUSH
9483: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9487: LD_EXP 37
9491: PPUSH
9492: LD_STRING DO-3-start-a
9494: PPUSH
9495: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9499: LD_EXP 28
9503: PPUSH
9504: LD_STRING DH-3-start-a
9506: PPUSH
9507: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9511: LD_EXP 36
9515: PPUSH
9516: LD_STRING DF-2-start-a
9518: PPUSH
9519: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9523: LD_EXP 37
9527: PPUSH
9528: LD_EXP 36
9532: PPUSH
9533: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9537: LD_EXP 37
9541: PPUSH
9542: LD_STRING DO-4-start-a
9544: PPUSH
9545: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9549: LD_EXP 36
9553: PPUSH
9554: LD_STRING DF-3-start-a
9556: PPUSH
9557: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9561: LD_EXP 37
9565: PPUSH
9566: LD_EXP 28
9570: PPUSH
9571: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9575: LD_INT 10
9577: PPUSH
9578: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9582: LD_EXP 37
9586: PPUSH
9587: LD_STRING DO-1-mission
9589: PPUSH
9590: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9594: LD_EXP 37
9598: PPUSH
9599: LD_STRING DO-2-mission
9601: PPUSH
9602: CALL_OW 88
// if not hasAll then
9606: LD_VAR 0 2
9610: NOT
9611: IFFALSE 9625
// Say ( Omar , DO-3-mission ) ;
9613: LD_EXP 37
9617: PPUSH
9618: LD_STRING DO-3-mission
9620: PPUSH
9621: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9625: LD_EXP 37
9629: PPUSH
9630: LD_STRING DO-4-mission
9632: PPUSH
9633: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9637: LD_EXP 28
9641: PPUSH
9642: LD_STRING DH-1-mission
9644: PPUSH
9645: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9649: LD_EXP 36
9653: PPUSH
9654: LD_STRING DF-1-mission
9656: PPUSH
9657: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9661: LD_EXP 37
9665: PPUSH
9666: LD_STRING DO-5-mission
9668: PPUSH
9669: CALL_OW 88
// if not hasAll then
9673: LD_VAR 0 2
9677: NOT
9678: IFFALSE 9813
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9680: LD_ADDR_VAR 0 4
9684: PUSH
9685: LD_INT 22
9687: PUSH
9688: LD_INT 2
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 21
9697: PUSH
9698: LD_INT 1
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 23
9707: PUSH
9708: LD_INT 2
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: LIST
9719: PPUSH
9720: CALL_OW 69
9724: ST_TO_ADDR
// for i := 7 downto tmp do
9725: LD_ADDR_VAR 0 3
9729: PUSH
9730: DOUBLE
9731: LD_INT 7
9733: INC
9734: ST_TO_ADDR
9735: LD_VAR 0 4
9739: PUSH
9740: FOR_DOWNTO
9741: IFFALSE 9811
// begin if omarSquad < 3 then
9743: LD_EXP 40
9747: PUSH
9748: LD_INT 3
9750: LESS
9751: IFFALSE 9755
// break ;
9753: GO 9811
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9755: LD_EXP 40
9759: PUSH
9760: LD_INT 3
9762: ARRAY
9763: PPUSH
9764: LD_INT 2
9766: PPUSH
9767: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9771: LD_ADDR_EXP 42
9775: PUSH
9776: LD_EXP 42
9780: PUSH
9781: LD_EXP 40
9785: PUSH
9786: LD_INT 3
9788: ARRAY
9789: UNION
9790: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9791: LD_ADDR_EXP 40
9795: PUSH
9796: LD_EXP 40
9800: PPUSH
9801: LD_INT 3
9803: PPUSH
9804: CALL_OW 3
9808: ST_TO_ADDR
// end ;
9809: GO 9740
9811: POP
9812: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9813: LD_EXP 37
9817: PUSH
9818: LD_EXP 40
9822: ADD
9823: PPUSH
9824: LD_INT 103
9826: PPUSH
9827: LD_INT 9
9829: PPUSH
9830: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9834: LD_VAR 0 2
9838: PUSH
9839: LD_EXP 33
9843: PPUSH
9844: CALL_OW 302
9848: AND
9849: IFFALSE 9910
// begin wait ( 0 0$3 ) ;
9851: LD_INT 105
9853: PPUSH
9854: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9858: LD_EXP 33
9862: PPUSH
9863: LD_EXP 36
9867: PPUSH
9868: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9872: LD_EXP 33
9876: PPUSH
9877: LD_STRING DK-1-side
9879: PPUSH
9880: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9884: LD_EXP 36
9888: PPUSH
9889: LD_EXP 33
9893: PPUSH
9894: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9898: LD_EXP 36
9902: PPUSH
9903: LD_STRING DF-1-side
9905: PPUSH
9906: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9910: LD_INT 22
9912: PUSH
9913: LD_INT 2
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PPUSH
9920: CALL_OW 69
9924: PPUSH
9925: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9929: LD_EXP 36
9933: PUSH
9934: LD_EXP 39
9938: ADD
9939: PPUSH
9940: LD_INT 108
9942: PPUSH
9943: LD_INT 62
9945: PPUSH
9946: CALL_OW 111
// gameStarted := true ;
9950: LD_ADDR_EXP 3
9954: PUSH
9955: LD_INT 1
9957: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9958: LD_INT 105
9960: PPUSH
9961: CALL_OW 67
// CenterOnUnits ( Heike ) ;
9965: LD_EXP 28
9969: PPUSH
9970: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
9974: LD_EXP 28
9978: PPUSH
9979: LD_EXP 32
9983: PPUSH
9984: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
9988: LD_INT 22
9990: PUSH
9991: LD_INT 2
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PPUSH
9998: CALL_OW 69
10002: PUSH
10003: LD_EXP 28
10007: DIFF
10008: PPUSH
10009: LD_EXP 28
10013: PPUSH
10014: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10018: LD_EXP 28
10022: PPUSH
10023: LD_STRING DH-1-explore
10025: PPUSH
10026: CALL_OW 88
// if Givi then
10030: LD_EXP 29
10034: IFFALSE 10050
// Say ( Givi , DG-1-explore ) else
10036: LD_EXP 29
10040: PPUSH
10041: LD_STRING DG-1-explore
10043: PPUSH
10044: CALL_OW 88
10048: GO 10087
// if heikeSecondSquad then
10050: LD_EXP 42
10054: IFFALSE 10087
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10056: LD_EXP 42
10060: PPUSH
10061: LD_INT 26
10063: PUSH
10064: LD_INT 1
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL_OW 72
10075: PUSH
10076: LD_INT 1
10078: ARRAY
10079: PPUSH
10080: LD_STRING DArm-1-explore
10082: PPUSH
10083: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10087: LD_EXP 32
10091: PPUSH
10092: LD_STRING DA-1-explore
10094: PPUSH
10095: CALL_OW 88
// if Sophia then
10099: LD_EXP 34
10103: IFFALSE 10181
// begin Say ( Sophia , DS-2-explore ) ;
10105: LD_EXP 34
10109: PPUSH
10110: LD_STRING DS-2-explore
10112: PPUSH
10113: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10117: LD_EXP 32
10121: PPUSH
10122: LD_STRING DA-2-explore
10124: PPUSH
10125: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10129: LD_EXP 34
10133: PPUSH
10134: LD_EXP 32
10138: PPUSH
10139: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10143: LD_EXP 32
10147: PPUSH
10148: LD_EXP 34
10152: PPUSH
10153: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10157: LD_EXP 34
10161: PPUSH
10162: LD_STRING DS-3-explore
10164: PPUSH
10165: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10169: LD_EXP 32
10173: PPUSH
10174: LD_STRING DA-3-explore
10176: PPUSH
10177: CALL_OW 88
// end ; if Mike then
10181: LD_EXP 30
10185: IFFALSE 10241
// begin Say ( Mike , DM-1-explore ) ;
10187: LD_EXP 30
10191: PPUSH
10192: LD_STRING DM-1-explore
10194: PPUSH
10195: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10199: LD_EXP 28
10203: PPUSH
10204: LD_STRING DH-2-explore
10206: PPUSH
10207: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10211: LD_EXP 30
10215: PPUSH
10216: LD_STRING DM-2-explore
10218: PPUSH
10219: CALL_OW 88
// if Kaia then
10223: LD_EXP 33
10227: IFFALSE 10241
// Say ( Kaia , DK-1-explore ) ;
10229: LD_EXP 33
10233: PPUSH
10234: LD_STRING DK-1-explore
10236: PPUSH
10237: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10241: LD_INT 22
10243: PUSH
10244: LD_INT 2
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PPUSH
10251: CALL_OW 69
10255: PPUSH
10256: CALL_OW 139
// Video ( false ) ;
10260: LD_INT 0
10262: PPUSH
10263: CALL 73378 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10267: LD_STRING BuildBase
10269: PPUSH
10270: CALL_OW 337
// SaveForQuickRestart ;
10274: CALL_OW 22
// end ;
10278: LD_VAR 0 1
10282: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10283: LD_EXP 5
10287: NOT
10288: PUSH
10289: LD_EXP 6
10293: NOT
10294: AND
10295: PUSH
10296: LD_INT 5
10298: PPUSH
10299: LD_INT 22
10301: PUSH
10302: LD_INT 2
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PPUSH
10309: CALL_OW 70
10313: AND
10314: PUSH
10315: LD_EXP 6
10319: NOT
10320: AND
10321: IFFALSE 10406
10323: GO 10325
10325: DISABLE
// begin if Mike then
10326: LD_EXP 30
10330: IFFALSE 10346
// Say ( Mike , DM-1-scout ) else
10332: LD_EXP 30
10336: PPUSH
10337: LD_STRING DM-1-scout
10339: PPUSH
10340: CALL_OW 88
10344: GO 10377
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10346: LD_EXP 42
10350: PPUSH
10351: LD_INT 26
10353: PUSH
10354: LD_INT 1
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PPUSH
10361: CALL_OW 72
10365: PUSH
10366: LD_INT 1
10368: ARRAY
10369: PPUSH
10370: LD_STRING DArm-1-explore
10372: PPUSH
10373: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10377: LD_INT 54
10379: PPUSH
10380: LD_INT 35
10382: PPUSH
10383: LD_INT 2
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10393: LD_INT 54
10395: PPUSH
10396: LD_INT 35
10398: PPUSH
10399: LD_INT 2
10401: PPUSH
10402: CALL_OW 331
// end ;
10406: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10407: LD_INT 6
10409: PPUSH
10410: LD_INT 22
10412: PUSH
10413: LD_INT 2
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PPUSH
10420: CALL_OW 70
10424: PUSH
10425: LD_EXP 6
10429: NOT
10430: AND
10431: IFFALSE 10685
10433: GO 10435
10435: DISABLE
10436: LD_INT 0
10438: PPUSH
10439: PPUSH
10440: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10441: LD_ADDR_VAR 0 1
10445: PUSH
10446: LD_EXP 42
10450: PPUSH
10451: LD_INT 26
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PPUSH
10461: CALL_OW 72
10465: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10466: LD_ADDR_VAR 0 2
10470: PUSH
10471: LD_EXP 42
10475: PPUSH
10476: LD_INT 26
10478: PUSH
10479: LD_INT 2
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: CALL_OW 72
10490: ST_TO_ADDR
// DialogueOn ;
10491: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10495: LD_INT 36
10497: PPUSH
10498: LD_INT 22
10500: PPUSH
10501: LD_INT 2
10503: PPUSH
10504: LD_INT 8
10506: PPUSH
10507: CALL_OW 330
// dwait ( 0 0$1 ) ;
10511: LD_INT 35
10513: PPUSH
10514: CALL_OW 68
// speakerOk := false ;
10518: LD_ADDR_VAR 0 3
10522: PUSH
10523: LD_INT 0
10525: ST_TO_ADDR
// if Mike then
10526: LD_EXP 30
10530: IFFALSE 10552
// speakerOk := Say ( Mike , DM-1-spot ) else
10532: LD_ADDR_VAR 0 3
10536: PUSH
10537: LD_EXP 30
10541: PPUSH
10542: LD_STRING DM-1-spot
10544: PPUSH
10545: CALL_OW 88
10549: ST_TO_ADDR
10550: GO 10580
// if randomMen then
10552: LD_VAR 0 1
10556: IFFALSE 10580
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10558: LD_ADDR_VAR 0 3
10562: PUSH
10563: LD_VAR 0 1
10567: PUSH
10568: LD_INT 1
10570: ARRAY
10571: PPUSH
10572: LD_STRING DArm-1-spot-a
10574: PPUSH
10575: CALL_OW 88
10579: ST_TO_ADDR
// if speakerOk then
10580: LD_VAR 0 3
10584: IFFALSE 10628
// begin if Givi then
10586: LD_EXP 29
10590: IFFALSE 10606
// Say ( Givi , DG-1-spot ) else
10592: LD_EXP 29
10596: PPUSH
10597: LD_STRING DG-1-spot
10599: PPUSH
10600: CALL_OW 88
10604: GO 10628
// if randomWomen then
10606: LD_VAR 0 2
10610: IFFALSE 10628
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10612: LD_VAR 0 2
10616: PUSH
10617: LD_INT 1
10619: ARRAY
10620: PPUSH
10621: LD_STRING DArf-1-spot-a
10623: PPUSH
10624: CALL_OW 88
// end ; if Mike then
10628: LD_EXP 30
10632: IFFALSE 10648
// Say ( Heike , DH-1-spot ) else
10634: LD_EXP 28
10638: PPUSH
10639: LD_STRING DH-1-spot
10641: PPUSH
10642: CALL_OW 88
10646: GO 10660
// Say ( Heike , DH-1-spot-a ) ;
10648: LD_EXP 28
10652: PPUSH
10653: LD_STRING DH-1-spot-a
10655: PPUSH
10656: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10660: LD_INT 36
10662: PPUSH
10663: LD_INT 22
10665: PPUSH
10666: LD_INT 2
10668: PPUSH
10669: CALL_OW 331
// DialogueOff ;
10673: CALL_OW 7
// americanBaseSpoted := true ;
10677: LD_ADDR_EXP 5
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// end ;
10685: PPOPN 3
10687: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10688: LD_EXP 5
10692: NOT
10693: PUSH
10694: LD_INT 22
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 101
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 69
10722: AND
10723: PUSH
10724: LD_EXP 6
10728: NOT
10729: AND
10730: IFFALSE 10816
10732: GO 10734
10734: DISABLE
10735: LD_INT 0
10737: PPUSH
// begin americanBaseSpoted := true ;
10738: LD_ADDR_EXP 5
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10746: LD_ADDR_VAR 0 1
10750: PUSH
10751: LD_EXP 42
10755: PPUSH
10756: LD_INT 26
10758: PUSH
10759: LD_INT 1
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 72
10770: ST_TO_ADDR
// if not randomMen then
10771: LD_VAR 0 1
10775: NOT
10776: IFFALSE 10780
// exit ;
10778: GO 10816
// DialogueOn ;
10780: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10784: LD_VAR 0 1
10788: PUSH
10789: LD_INT 1
10791: ARRAY
10792: PPUSH
10793: LD_STRING DArm-1-spot-a
10795: PPUSH
10796: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10800: LD_EXP 28
10804: PPUSH
10805: LD_STRING DH-1-spot-a
10807: PPUSH
10808: CALL_OW 88
// DialogueOff ;
10812: CALL_OW 7
// end ;
10816: PPOPN 1
10818: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10819: LD_INT 11
10821: PPUSH
10822: CALL_OW 255
10826: PUSH
10827: LD_INT 2
10829: EQUAL
10830: PUSH
10831: LD_INT 7
10833: PPUSH
10834: LD_INT 22
10836: PUSH
10837: LD_INT 1
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 3
10846: PUSH
10847: LD_INT 50
10849: PUSH
10850: EMPTY
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 30
10859: PUSH
10860: LD_INT 31
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: PPUSH
10872: CALL_OW 70
10876: OR
10877: PUSH
10878: LD_INT 7
10880: PPUSH
10881: LD_INT 22
10883: PUSH
10884: LD_INT 2
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PPUSH
10891: CALL_OW 70
10895: PUSH
10896: LD_INT 1
10898: GREATER
10899: OR
10900: PUSH
10901: LD_EXP 44
10905: PUSH
10906: LD_INT 4
10908: LESSEQUAL
10909: OR
10910: IFFALSE 11489
10912: GO 10914
10914: DISABLE
10915: LD_INT 0
10917: PPUSH
10918: PPUSH
// begin wait ( 0 0$3 ) ;
10919: LD_INT 105
10921: PPUSH
10922: CALL_OW 67
// americanStartRun := true ;
10926: LD_ADDR_EXP 14
10930: PUSH
10931: LD_INT 1
10933: ST_TO_ADDR
// if IsOk ( usCommander ) then
10934: LD_EXP 45
10938: PPUSH
10939: CALL_OW 302
10943: IFFALSE 10973
// begin usForces := usForces union usCommander ;
10945: LD_ADDR_EXP 44
10949: PUSH
10950: LD_EXP 44
10954: PUSH
10955: LD_EXP 45
10959: UNION
10960: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
10961: LD_EXP 45
10965: PPUSH
10966: LD_STRING DUsm-1-assault
10968: PPUSH
10969: CALL_OW 88
// end ; for i in usForces do
10973: LD_ADDR_VAR 0 1
10977: PUSH
10978: LD_EXP 44
10982: PUSH
10983: FOR_IN
10984: IFFALSE 11030
// begin if IsInUnit ( i ) then
10986: LD_VAR 0 1
10990: PPUSH
10991: CALL_OW 310
10995: IFFALSE 11006
// ComExitBuilding ( i ) ;
10997: LD_VAR 0 1
11001: PPUSH
11002: CALL_OW 122
// wait ( 3 ) ;
11006: LD_INT 3
11008: PPUSH
11009: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11013: LD_VAR 0 1
11017: PPUSH
11018: LD_INT 34
11020: PPUSH
11021: LD_INT 67
11023: PPUSH
11024: CALL_OW 111
// end ;
11028: GO 10983
11030: POP
11031: POP
// Say ( Heike , DH-1-assault ) ;
11032: LD_EXP 28
11036: PPUSH
11037: LD_STRING DH-1-assault
11039: PPUSH
11040: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11044: LD_INT 35
11046: PPUSH
11047: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11051: LD_VAR 0 1
11055: PPUSH
11056: LD_INT 34
11058: PPUSH
11059: LD_INT 67
11061: PPUSH
11062: CALL_OW 111
// until not usForces ;
11066: LD_EXP 44
11070: NOT
11071: IFFALSE 11044
// music_nat := 2 ;
11073: LD_ADDR_OWVAR 71
11077: PUSH
11078: LD_INT 2
11080: ST_TO_ADDR
// music_class := music_victory ;
11081: LD_ADDR_OWVAR 72
11085: PUSH
11086: LD_INT 4
11088: ST_TO_ADDR
// if not americanHasEscaped then
11089: LD_EXP 8
11093: NOT
11094: IFFALSE 11115
// begin Say ( Heike , DH-2-assault ) ;
11096: LD_EXP 28
11100: PPUSH
11101: LD_STRING DH-2-assault
11103: PPUSH
11104: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11108: LD_STRING ACH_CLEAN
11110: PPUSH
11111: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11115: LD_INT 70
11117: PPUSH
11118: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11122: LD_INT 35
11124: PPUSH
11125: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11129: LD_INT 22
11131: PUSH
11132: LD_INT 2
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 21
11141: PUSH
11142: LD_INT 1
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 3
11151: PUSH
11152: LD_INT 50
11154: PUSH
11155: EMPTY
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: PPUSH
11167: CALL_OW 69
11171: NOT
11172: IFFALSE 11122
// InGameOn ;
11174: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11178: LD_INT 11
11180: PPUSH
11181: CALL_OW 255
11185: PUSH
11186: LD_INT 2
11188: EQUAL
11189: NOT
11190: IFFALSE 11202
// SetSide ( usDepot , 2 ) ;
11192: LD_INT 11
11194: PPUSH
11195: LD_INT 2
11197: PPUSH
11198: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11202: LD_INT 35
11204: PPUSH
11205: LD_INT 22
11207: PPUSH
11208: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11212: LD_EXP 28
11216: PPUSH
11217: LD_INT 35
11219: PPUSH
11220: LD_INT 22
11222: PPUSH
11223: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11227: LD_EXP 28
11231: PPUSH
11232: LD_INT 38
11234: PPUSH
11235: LD_INT 25
11237: PPUSH
11238: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11242: LD_EXP 41
11246: PUSH
11247: LD_EXP 42
11251: UNION
11252: PPUSH
11253: LD_INT 39
11255: PPUSH
11256: LD_INT 26
11258: PPUSH
11259: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11263: LD_EXP 41
11267: PUSH
11268: LD_EXP 42
11272: UNION
11273: PPUSH
11274: LD_EXP 28
11278: PPUSH
11279: CALL_OW 179
// p := 0 ;
11283: LD_ADDR_VAR 0 2
11287: PUSH
11288: LD_INT 0
11290: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11291: LD_INT 35
11293: PPUSH
11294: CALL_OW 67
// p := p + 1 ;
11298: LD_ADDR_VAR 0 2
11302: PUSH
11303: LD_VAR 0 2
11307: PUSH
11308: LD_INT 1
11310: PLUS
11311: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11312: LD_EXP 28
11316: PPUSH
11317: CALL_OW 314
11321: NOT
11322: PUSH
11323: LD_VAR 0 2
11327: PUSH
11328: LD_INT 10
11330: GREATER
11331: OR
11332: IFFALSE 11291
// Say ( Heike , DH-1-capture ) ;
11334: LD_EXP 28
11338: PPUSH
11339: LD_STRING DH-1-capture
11341: PPUSH
11342: CALL_OW 88
// if Markov then
11346: LD_EXP 35
11350: IFFALSE 11364
// Say ( Markov , DMar-1-capture ) ;
11352: LD_EXP 35
11356: PPUSH
11357: LD_STRING DMar-1-capture
11359: PPUSH
11360: CALL_OW 88
// if Sophia then
11364: LD_EXP 34
11368: IFFALSE 11394
// begin Say ( Heike , DH-2-capture ) ;
11370: LD_EXP 28
11374: PPUSH
11375: LD_STRING DH-2-capture
11377: PPUSH
11378: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11382: LD_EXP 34
11386: PPUSH
11387: LD_STRING DS-1-capture
11389: PPUSH
11390: CALL_OW 88
// end ; InGameOff ;
11394: CALL_OW 9
// music_nat := music_auto ;
11398: LD_ADDR_OWVAR 71
11402: PUSH
11403: LD_INT 0
11405: ST_TO_ADDR
// music_class := music_auto ;
11406: LD_ADDR_OWVAR 72
11410: PUSH
11411: LD_INT 0
11413: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11414: LD_STRING ConstructBase
11416: PPUSH
11417: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11421: LD_ADDR_VAR 0 1
11425: PUSH
11426: LD_INT 22
11428: PUSH
11429: LD_INT 1
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 21
11438: PUSH
11439: LD_INT 3
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: FOR_IN
11456: IFFALSE 11472
// SetSide ( i , 2 ) ;
11458: LD_VAR 0 1
11462: PPUSH
11463: LD_INT 2
11465: PPUSH
11466: CALL_OW 235
11470: GO 11455
11472: POP
11473: POP
// wait ( 0 0$3 ) ;
11474: LD_INT 105
11476: PPUSH
11477: CALL_OW 67
// americanBaseCaptured := true ;
11481: LD_ADDR_EXP 6
11485: PUSH
11486: LD_INT 1
11488: ST_TO_ADDR
// end ;
11489: PPOPN 2
11491: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11492: LD_EXP 13
11496: PUSH
11497: LD_INT 3
11499: GREATEREQUAL
11500: IFFALSE 11512
11502: GO 11504
11504: DISABLE
// SetAchievement ( ACH_ENG ) ;
11505: LD_STRING ACH_ENG
11507: PPUSH
11508: CALL_OW 543
11512: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11513: LD_INT 22
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 25
11525: PUSH
11526: LD_INT 15
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 69
11541: PUSH
11542: LD_INT 4
11544: GREATEREQUAL
11545: IFFALSE 11557
11547: GO 11549
11549: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11550: LD_STRING ACH_APEGEN
11552: PPUSH
11553: CALL_OW 543
11557: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11558: LD_INT 22
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 30
11570: PUSH
11571: LD_INT 2
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 3
11580: PUSH
11581: LD_INT 57
11583: PUSH
11584: EMPTY
11585: LIST
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: PPUSH
11596: CALL_OW 69
11600: IFFALSE 11843
11602: GO 11604
11604: DISABLE
// begin workshopBuilded := true ;
11605: LD_ADDR_EXP 10
11609: PUSH
11610: LD_INT 1
11612: ST_TO_ADDR
// if IsOk ( Markov ) then
11613: LD_EXP 35
11617: PPUSH
11618: CALL_OW 302
11622: IFFALSE 11681
// begin Say ( Heike , DH-1-shop-a ) ;
11624: LD_EXP 28
11628: PPUSH
11629: LD_STRING DH-1-shop-a
11631: PPUSH
11632: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11636: LD_INT 47
11638: PPUSH
11639: LD_INT 2
11641: PPUSH
11642: CALL_OW 321
11646: PUSH
11647: LD_INT 2
11649: EQUAL
11650: PUSH
11651: LD_INT 45
11653: PPUSH
11654: LD_INT 2
11656: PPUSH
11657: CALL_OW 321
11661: PUSH
11662: LD_INT 2
11664: EQUAL
11665: AND
11666: NOT
11667: IFFALSE 11681
// Say ( Markov , DMar-1-shop-a ) ;
11669: LD_EXP 35
11673: PPUSH
11674: LD_STRING DMar-1-shop-a
11676: PPUSH
11677: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11681: LD_INT 35
11683: PPUSH
11684: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11688: LD_INT 47
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: CALL_OW 321
11698: PUSH
11699: LD_INT 2
11701: EQUAL
11702: PUSH
11703: LD_INT 45
11705: PPUSH
11706: LD_INT 2
11708: PPUSH
11709: CALL_OW 321
11713: PUSH
11714: LD_INT 2
11716: EQUAL
11717: OR
11718: IFFALSE 11681
// DialogueOn ;
11720: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11724: LD_EXP 35
11728: PPUSH
11729: LD_STRING DMar-1-shop
11731: PPUSH
11732: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11736: LD_EXP 28
11740: PPUSH
11741: LD_STRING DH-1-shop
11743: PPUSH
11744: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11748: LD_EXP 35
11752: PPUSH
11753: LD_STRING DMar-2-shop
11755: PPUSH
11756: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11760: LD_EXP 35
11764: PPUSH
11765: LD_STRING DMar-3-shop
11767: PPUSH
11768: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11772: LD_EXP 28
11776: PPUSH
11777: LD_STRING DH-2-shop
11779: PPUSH
11780: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11784: LD_EXP 35
11788: PPUSH
11789: LD_STRING DMar-4-shop
11791: PPUSH
11792: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11796: LD_EXP 28
11800: PPUSH
11801: LD_STRING DH-3-shop
11803: PPUSH
11804: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11808: LD_EXP 35
11812: PPUSH
11813: LD_STRING DMar-5-shop
11815: PPUSH
11816: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11820: LD_EXP 28
11824: PPUSH
11825: LD_STRING DH-4-shop
11827: PPUSH
11828: CALL_OW 88
// DialogueOff ;
11832: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
11836: LD_STRING ConstructVeh
11838: PPUSH
11839: CALL_OW 337
// end ;
11843: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11844: LD_INT 2
11846: PPUSH
11847: LD_INT 2
11849: PPUSH
11850: LD_INT 1
11852: PPUSH
11853: CALL 36731 0 3
11857: PUSH
11858: LD_INT 0
11860: EQUAL
11861: IFFALSE 11873
11863: GO 11865
11865: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11866: LD_STRING Techs
11868: PPUSH
11869: CALL_OW 337
11873: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11874: LD_EXP 35
11878: PPUSH
11879: CALL_OW 302
11883: PUSH
11884: LD_INT 22
11886: PUSH
11887: LD_INT 2
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: LD_INT 2
11896: PUSH
11897: LD_INT 34
11899: PUSH
11900: LD_INT 22
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 35
11909: PUSH
11910: LD_INT 22
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PPUSH
11926: CALL_OW 69
11930: AND
11931: IFFALSE 12038
11933: GO 11935
11935: DISABLE
// begin DialogueOn ;
11936: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
11940: LD_INT 22
11942: PUSH
11943: LD_INT 2
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 2
11952: PUSH
11953: LD_INT 34
11955: PUSH
11956: LD_INT 22
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 35
11965: PUSH
11966: LD_INT 22
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PPUSH
11982: CALL_OW 69
11986: PPUSH
11987: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11991: LD_INT 10
11993: PPUSH
11994: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
11998: LD_EXP 28
12002: PPUSH
12003: LD_STRING DH-1-bal
12005: PPUSH
12006: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12010: LD_EXP 35
12014: PPUSH
12015: LD_STRING DMar-1-bal
12017: PPUSH
12018: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12022: LD_EXP 28
12026: PPUSH
12027: LD_STRING DH-2-bal
12029: PPUSH
12030: CALL_OW 88
// DialogueOff ;
12034: CALL_OW 7
// end ;
12038: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12039: LD_EXP 32
12043: PPUSH
12044: CALL_OW 302
12048: PUSH
12049: LD_INT 22
12051: PUSH
12052: LD_INT 2
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 30
12061: PUSH
12062: LD_INT 6
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 69
12077: AND
12078: IFFALSE 12139
12080: GO 12082
12082: DISABLE
// begin DialogueOn ;
12083: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12087: LD_EXP 32
12091: PPUSH
12092: LD_STRING DA-1-lab
12094: PPUSH
12095: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12099: LD_EXP 28
12103: PPUSH
12104: LD_STRING DH-1-lab
12106: PPUSH
12107: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12111: LD_EXP 32
12115: PPUSH
12116: LD_STRING DA-2-lab
12118: PPUSH
12119: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12123: LD_EXP 28
12127: PPUSH
12128: LD_STRING DH-2-lab
12130: PPUSH
12131: CALL_OW 88
// DialogueOff ;
12135: CALL_OW 7
// end ;
12139: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12140: LD_EXP 33
12144: PPUSH
12145: CALL_OW 302
12149: PUSH
12150: LD_INT 22
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 25
12162: PUSH
12163: LD_INT 15
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PPUSH
12174: CALL_OW 69
12178: AND
12179: PUSH
12180: LD_INT 81
12182: PUSH
12183: LD_INT 2
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PPUSH
12190: CALL_OW 69
12194: NOT
12195: AND
12196: IFFALSE 12378
12198: GO 12200
12200: DISABLE
12201: LD_INT 0
12203: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12204: LD_ADDR_VAR 0 1
12208: PUSH
12209: LD_INT 22
12211: PUSH
12212: LD_INT 2
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 25
12221: PUSH
12222: LD_INT 15
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PPUSH
12233: CALL_OW 69
12237: ST_TO_ADDR
// InGameOn ;
12238: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12242: LD_VAR 0 1
12246: PUSH
12247: LD_INT 1
12249: ARRAY
12250: PPUSH
12251: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12255: LD_VAR 0 1
12259: PUSH
12260: LD_INT 1
12262: ARRAY
12263: PPUSH
12264: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12268: LD_EXP 33
12272: PPUSH
12273: LD_STRING DK-1-apesol
12275: PPUSH
12276: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12280: LD_VAR 0 1
12284: PUSH
12285: LD_INT 1
12287: ARRAY
12288: PPUSH
12289: LD_INT 35
12291: PPUSH
12292: LD_INT 28
12294: PPUSH
12295: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12299: LD_VAR 0 1
12303: PUSH
12304: LD_INT 1
12306: ARRAY
12307: PPUSH
12308: LD_INT 36
12310: PPUSH
12311: LD_INT 17
12313: PPUSH
12314: CALL_OW 171
// DialogueOn ;
12318: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12322: LD_EXP 32
12326: PPUSH
12327: LD_STRING DA-1-apesol
12329: PPUSH
12330: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12334: LD_EXP 33
12338: PPUSH
12339: LD_STRING DK-2-apesol
12341: PPUSH
12342: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12346: LD_EXP 32
12350: PPUSH
12351: LD_STRING DA-2-apesol
12353: PPUSH
12354: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12358: LD_EXP 33
12362: PPUSH
12363: LD_STRING DK-3-apesol
12365: PPUSH
12366: CALL_OW 88
// DialogueOff ;
12370: CALL_OW 7
// InGameOff ;
12374: CALL_OW 9
// end ;
12378: PPOPN 1
12380: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12381: LD_EXP 34
12385: PPUSH
12386: CALL_OW 302
12390: PUSH
12391: LD_INT 22
12393: PUSH
12394: LD_INT 2
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 25
12403: PUSH
12404: LD_INT 16
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PPUSH
12415: CALL_OW 69
12419: AND
12420: PUSH
12421: LD_INT 81
12423: PUSH
12424: LD_INT 2
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PPUSH
12431: CALL_OW 69
12435: NOT
12436: AND
12437: IFFALSE 12722
12439: GO 12441
12441: DISABLE
12442: LD_INT 0
12444: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12445: LD_ADDR_VAR 0 1
12449: PUSH
12450: LD_INT 22
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 25
12462: PUSH
12463: LD_INT 16
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PPUSH
12474: CALL_OW 69
12478: ST_TO_ADDR
// InGameOn ;
12479: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12483: LD_INT 35
12485: PPUSH
12486: LD_INT 22
12488: PPUSH
12489: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12493: LD_INT 5
12495: PPUSH
12496: LD_INT 35
12498: PPUSH
12499: LD_INT 22
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12509: LD_EXP 34
12513: PPUSH
12514: LD_VAR 0 1
12518: PUSH
12519: LD_INT 1
12521: ARRAY
12522: PPUSH
12523: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12527: LD_VAR 0 1
12531: PUSH
12532: LD_INT 1
12534: ARRAY
12535: PPUSH
12536: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12540: LD_VAR 0 1
12544: PUSH
12545: LD_INT 1
12547: ARRAY
12548: PPUSH
12549: CALL_OW 122
// wait ( 0 0$2 ) ;
12553: LD_INT 70
12555: PPUSH
12556: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12560: LD_EXP 34
12564: PPUSH
12565: LD_STRING DS-1-apeeng
12567: PPUSH
12568: CALL_OW 88
// if IsOk ( Kamil ) then
12572: LD_EXP 31
12576: PPUSH
12577: CALL_OW 302
12581: IFFALSE 12718
// begin Say ( Kamil , DKam-1-apeeng ) ;
12583: LD_EXP 31
12587: PPUSH
12588: LD_STRING DKam-1-apeeng
12590: PPUSH
12591: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12595: LD_EXP 34
12599: PPUSH
12600: LD_STRING DS-2-apeeng
12602: PPUSH
12603: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12607: LD_EXP 31
12611: PPUSH
12612: LD_STRING DKam-2-apeeng
12614: PPUSH
12615: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12619: LD_EXP 34
12623: PPUSH
12624: LD_STRING DS-3-apeeng
12626: PPUSH
12627: CALL_OW 88
// if not IsOK ( Kaia ) then
12631: LD_EXP 33
12635: PPUSH
12636: CALL_OW 302
12640: NOT
12641: IFFALSE 12649
// begin InGameOff ;
12643: CALL_OW 9
// exit ;
12647: GO 12722
// end ; Say ( Kaia , DK-1-apeeng ) ;
12649: LD_EXP 33
12653: PPUSH
12654: LD_STRING DK-1-apeeng
12656: PPUSH
12657: CALL_OW 88
// if not IsOk ( Givi ) then
12661: LD_EXP 29
12665: PPUSH
12666: CALL_OW 302
12670: NOT
12671: IFFALSE 12682
// begin Video ( false ) ;
12673: LD_INT 0
12675: PPUSH
12676: CALL 73378 0 1
// exit ;
12680: GO 12722
// end ; Say ( Givi , DG-1-apeeng ) ;
12682: LD_EXP 29
12686: PPUSH
12687: LD_STRING DG-1-apeeng
12689: PPUSH
12690: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12694: LD_EXP 33
12698: PPUSH
12699: LD_STRING DK-2-apeeng
12701: PPUSH
12702: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
12706: LD_EXP 33
12710: PPUSH
12711: LD_STRING DK-3-apeeng
12713: PPUSH
12714: CALL_OW 88
// end ; InGameOff ;
12718: CALL_OW 9
// end ;
12722: PPOPN 1
12724: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12725: LD_EXP 4
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 30
12742: PUSH
12743: LD_INT 0
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PPUSH
12754: CALL_OW 69
12758: AND
12759: IFFALSE 12924
12761: GO 12763
12763: DISABLE
// begin wait ( 0 0$10 ) ;
12764: LD_INT 350
12766: PPUSH
12767: CALL_OW 67
// DialogueOn ;
12771: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12775: LD_EXP 36
12779: PPUSH
12780: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12784: LD_EXP 36
12788: PPUSH
12789: LD_STRING DF-1-distribution
12791: PPUSH
12792: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12796: LD_EXP 28
12800: PPUSH
12801: LD_STRING DH-2-distribution
12803: PPUSH
12804: CALL_OW 88
// if IsOk ( Kaia ) then
12808: LD_EXP 33
12812: PPUSH
12813: CALL_OW 302
12817: IFFALSE 12878
// begin Say ( Kaia , DK-1-distribution ) ;
12819: LD_EXP 33
12823: PPUSH
12824: LD_STRING DK-1-distribution
12826: PPUSH
12827: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12831: LD_EXP 28
12835: PPUSH
12836: LD_STRING DH-1-distribution
12838: PPUSH
12839: CALL_OW 88
// if IsOk ( Givi ) then
12843: LD_EXP 29
12847: PPUSH
12848: CALL_OW 302
12852: IFFALSE 12878
// begin Say ( Givi , DG-1-distribution ) ;
12854: LD_EXP 29
12858: PPUSH
12859: LD_STRING DG-1-distribution
12861: PPUSH
12862: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12866: LD_EXP 28
12870: PPUSH
12871: LD_STRING DH-3-distribution
12873: PPUSH
12874: CALL_OW 88
// end ; end ; DialogueOff ;
12878: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12882: LD_STRING Crates1
12884: PPUSH
12885: CALL_OW 337
// farmerRequestedCrates := 300 ;
12889: LD_ADDR_EXP 16
12893: PUSH
12894: LD_INT 300
12896: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12897: LD_STRING FarmerCrates
12899: PPUSH
12900: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12904: LD_INT 10
12906: PPUSH
12907: LD_INT 1
12909: PPUSH
12910: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12914: LD_INT 108
12916: PPUSH
12917: LD_INT 61
12919: PPUSH
12920: CALL_OW 86
// end ;
12924: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12925: LD_EXP 6
12929: PUSH
12930: LD_INT 22
12932: PUSH
12933: LD_INT 2
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: LD_INT 3
12942: PUSH
12943: LD_INT 57
12945: PUSH
12946: EMPTY
12947: LIST
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: LD_INT 30
12958: PUSH
12959: LD_INT 6
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 30
12968: PUSH
12969: LD_INT 7
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: PPUSH
12986: CALL_OW 69
12990: AND
12991: PUSH
12992: LD_INT 22
12994: PUSH
12995: LD_INT 2
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 3
13004: PUSH
13005: LD_INT 57
13007: PUSH
13008: EMPTY
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 30
13017: PUSH
13018: LD_INT 4
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: AND
13035: IFFALSE 13199
13037: GO 13039
13039: DISABLE
13040: LD_INT 0
13042: PPUSH
// begin wait ( 0 0$10 ) ;
13043: LD_INT 350
13045: PPUSH
13046: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13050: LD_ADDR_VAR 0 1
13054: PUSH
13055: LD_EXP 42
13059: PPUSH
13060: LD_INT 26
13062: PUSH
13063: LD_INT 1
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 25
13072: PUSH
13073: LD_INT 2
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 72
13088: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13089: LD_EXP 28
13093: PPUSH
13094: LD_STRING DH-1-task
13096: PPUSH
13097: CALL_OW 88
// if IsOk ( Sophia ) then
13101: LD_EXP 34
13105: PPUSH
13106: CALL_OW 302
13110: IFFALSE 13150
// begin Say ( Sophia , DS-1-task ) ;
13112: LD_EXP 34
13116: PPUSH
13117: LD_STRING DS-1-task
13119: PPUSH
13120: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13124: LD_EXP 34
13128: PPUSH
13129: LD_STRING DS-2-task
13131: PPUSH
13132: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13136: LD_EXP 28
13140: PPUSH
13141: LD_STRING DH-2-task
13143: PPUSH
13144: CALL_OW 88
// end else
13148: GO 13184
// if eng then
13150: LD_VAR 0 1
13154: IFFALSE 13184
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13156: LD_VAR 0 1
13160: PUSH
13161: LD_INT 1
13163: ARRAY
13164: PPUSH
13165: LD_STRING DArm-1-task
13167: PPUSH
13168: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13172: LD_EXP 28
13176: PPUSH
13177: LD_STRING DH-2-task
13179: PPUSH
13180: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13184: LD_STRING BaseConstructed
13186: PPUSH
13187: CALL_OW 337
// allowConvoys := true ;
13191: LD_ADDR_EXP 12
13195: PUSH
13196: LD_INT 1
13198: ST_TO_ADDR
// end ;
13199: PPOPN 1
13201: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13202: LD_INT 22
13204: PUSH
13205: LD_INT 4
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 34
13214: PUSH
13215: LD_INT 12
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PPUSH
13226: CALL_OW 69
13230: IFFALSE 13398
13232: GO 13234
13234: DISABLE
13235: LD_INT 0
13237: PPUSH
13238: PPUSH
13239: PPUSH
// begin wait ( 0 0$2 ) ;
13240: LD_INT 70
13242: PPUSH
13243: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13247: LD_ADDR_VAR 0 1
13251: PUSH
13252: LD_INT 22
13254: PUSH
13255: LD_INT 4
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 34
13264: PUSH
13265: LD_INT 12
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PPUSH
13276: CALL_OW 69
13280: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13281: LD_ADDR_VAR 0 2
13285: PUSH
13286: LD_VAR 0 1
13290: PUSH
13291: LD_INT 1
13293: ARRAY
13294: PPUSH
13295: CALL_OW 250
13299: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13300: LD_ADDR_VAR 0 3
13304: PUSH
13305: LD_VAR 0 1
13309: PUSH
13310: LD_INT 1
13312: ARRAY
13313: PPUSH
13314: CALL_OW 251
13318: ST_TO_ADDR
// DialogueOn ;
13319: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13323: LD_VAR 0 2
13327: PPUSH
13328: LD_VAR 0 3
13332: PPUSH
13333: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13337: LD_VAR 0 2
13341: PPUSH
13342: LD_VAR 0 3
13346: PPUSH
13347: LD_INT 2
13349: PPUSH
13350: LD_INT 6
13352: NEG
13353: PPUSH
13354: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13358: LD_INT 10
13360: PPUSH
13361: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13365: LD_EXP 28
13369: PPUSH
13370: LD_STRING DH-1-seecargo
13372: PPUSH
13373: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13377: LD_VAR 0 2
13381: PPUSH
13382: LD_VAR 0 3
13386: PPUSH
13387: LD_INT 2
13389: PPUSH
13390: CALL_OW 331
// DialogueOff ;
13394: CALL_OW 7
// end ;
13398: PPOPN 3
13400: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13401: LD_EXP 4
13405: PUSH
13406: LD_EXP 15
13410: PUSH
13411: LD_INT 300
13413: GREATEREQUAL
13414: AND
13415: IFFALSE 13487
13417: GO 13419
13419: DISABLE
// begin DialogueOn ;
13420: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13424: LD_EXP 36
13428: PPUSH
13429: LD_STRING DF-1-delivery-2
13431: PPUSH
13432: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13436: LD_EXP 28
13440: PPUSH
13441: LD_STRING DH-1-delivery-2
13443: PPUSH
13444: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13448: LD_EXP 36
13452: PPUSH
13453: LD_STRING DF-2-delivery-2
13455: PPUSH
13456: CALL_OW 94
// DialogueOff ;
13460: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13464: LD_STRING Crates2
13466: PPUSH
13467: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13471: LD_ADDR_EXP 17
13475: PUSH
13476: LD_INT 63000
13478: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13479: LD_ADDR_EXP 16
13483: PUSH
13484: LD_INT 600
13486: ST_TO_ADDR
// end ;
13487: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13488: LD_EXP 4
13492: PUSH
13493: LD_EXP 15
13497: PUSH
13498: LD_INT 600
13500: GREATEREQUAL
13501: AND
13502: PUSH
13503: LD_OWVAR 67
13507: PUSH
13508: LD_INT 1
13510: GREATER
13511: AND
13512: IFFALSE 13678
13514: GO 13516
13516: DISABLE
// begin DialogueOn ;
13517: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13521: LD_EXP 36
13525: PPUSH
13526: LD_STRING DF-1-delivery-3
13528: PPUSH
13529: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13533: LD_EXP 28
13537: PPUSH
13538: LD_STRING DH-1-delivery-3
13540: PPUSH
13541: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13545: LD_EXP 36
13549: PPUSH
13550: LD_STRING DF-2-delivery-3
13552: PPUSH
13553: CALL_OW 94
// if IsOk ( Kaia ) then
13557: LD_EXP 33
13561: PPUSH
13562: CALL_OW 302
13566: IFFALSE 13616
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13568: LD_EXP 33
13572: PPUSH
13573: LD_STRING DK-1-delivery-3
13575: PPUSH
13576: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13580: LD_EXP 28
13584: PPUSH
13585: LD_STRING DH-2-delivery-3
13587: PPUSH
13588: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13592: LD_EXP 29
13596: PPUSH
13597: LD_STRING DG-1-delivery-3
13599: PPUSH
13600: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13604: LD_EXP 30
13608: PPUSH
13609: LD_STRING DM-1-delivery-3
13611: PPUSH
13612: CALL_OW 88
// end ; DialogueOff ;
13616: CALL_OW 7
// if Difficulty = 2 then
13620: LD_OWVAR 67
13624: PUSH
13625: LD_INT 2
13627: EQUAL
13628: IFFALSE 13655
// begin ChangeMissionObjectives ( Crates3 ) ;
13630: LD_STRING Crates3
13632: PPUSH
13633: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13637: LD_ADDR_EXP 17
13641: PUSH
13642: LD_INT 63000
13644: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13645: LD_ADDR_EXP 16
13649: PUSH
13650: LD_INT 900
13652: ST_TO_ADDR
// end else
13653: GO 13678
// begin ChangeMissionObjectives ( Crates4 ) ;
13655: LD_STRING Crates4
13657: PPUSH
13658: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13662: LD_ADDR_EXP 17
13666: PUSH
13667: LD_INT 63000
13669: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13670: LD_ADDR_EXP 16
13674: PUSH
13675: LD_INT 1200
13677: ST_TO_ADDR
// end ; end ;
13678: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13679: LD_EXP 4
13683: PUSH
13684: LD_EXP 15
13688: PUSH
13689: LD_INT 600
13691: PUSH
13692: LD_INT 900
13694: PUSH
13695: LD_INT 1200
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: LD_OWVAR 67
13707: ARRAY
13708: GREATEREQUAL
13709: AND
13710: PUSH
13711: LD_EXP 16
13715: PUSH
13716: LD_EXP 17
13720: LESSEQUAL
13721: AND
13722: IFFALSE 13808
13724: GO 13726
13726: DISABLE
// begin retreatAllowed := true ;
13727: LD_ADDR_EXP 11
13731: PUSH
13732: LD_INT 1
13734: ST_TO_ADDR
// display_strings := [ ] ;
13735: LD_ADDR_OWVAR 47
13739: PUSH
13740: EMPTY
13741: ST_TO_ADDR
// DialogueOn ;
13742: CALL_OW 6
// InGameOn ;
13746: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13750: LD_EXP 37
13754: PPUSH
13755: LD_STRING DO-radio-end
13757: PPUSH
13758: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13762: LD_EXP 28
13766: PPUSH
13767: LD_STRING DH-1-radio-end
13769: PPUSH
13770: CALL_OW 88
// InGameOff ;
13774: CALL_OW 9
// DialogueOff ;
13778: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13782: LD_STRING Retreat
13784: PPUSH
13785: CALL_OW 337
// wait ( 0 0$2 ) ;
13789: LD_INT 70
13791: PPUSH
13792: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
13796: LD_EXP 28
13800: PPUSH
13801: LD_STRING DH-2-radio-end
13803: PPUSH
13804: CALL_OW 88
// end ;
13808: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13809: LD_EXP 11
13813: IFFALSE 13944
13815: GO 13817
13817: DISABLE
13818: LD_INT 0
13820: PPUSH
13821: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13822: LD_INT 10
13824: PPUSH
13825: LD_INT 0
13827: PPUSH
13828: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13832: LD_ADDR_VAR 0 1
13836: PUSH
13837: LD_EXP 39
13841: PPUSH
13842: LD_INT 25
13844: PUSH
13845: LD_INT 2
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PPUSH
13852: CALL_OW 72
13856: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13857: LD_VAR 0 1
13861: PUSH
13862: LD_INT 102
13864: PPUSH
13865: LD_INT 69
13867: PPUSH
13868: CALL_OW 428
13872: PUSH
13873: LD_INT 0
13875: EQUAL
13876: AND
13877: IFFALSE 13944
// begin for i in tmp do
13879: LD_ADDR_VAR 0 2
13883: PUSH
13884: LD_VAR 0 1
13888: PUSH
13889: FOR_IN
13890: IFFALSE 13914
// if IsInUnit ( i ) then
13892: LD_VAR 0 2
13896: PPUSH
13897: CALL_OW 310
13901: IFFALSE 13912
// ComExitBuilding ( i ) ;
13903: LD_VAR 0 2
13907: PPUSH
13908: CALL_OW 122
13912: GO 13889
13914: POP
13915: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13916: LD_VAR 0 1
13920: PPUSH
13921: LD_INT 31
13923: PPUSH
13924: LD_INT 102
13926: PPUSH
13927: LD_INT 69
13929: PPUSH
13930: LD_INT 2
13932: PPUSH
13933: CALL_OW 205
// wait ( 0 0$3 ) ;
13937: LD_INT 105
13939: PPUSH
13940: CALL_OW 67
// end ; end ;
13944: PPOPN 2
13946: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
13947: LD_EXP 11
13951: NOT
13952: PUSH
13953: LD_INT 5
13955: PPUSH
13956: CALL_OW 301
13960: AND
13961: IFFALSE 13993
13963: GO 13965
13965: DISABLE
// begin DialogueOn ;
13966: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
13970: LD_EXP 36
13974: PPUSH
13975: LD_STRING DF-1-failure
13977: PPUSH
13978: CALL_OW 94
// DialogueOff ;
13982: CALL_OW 7
// YouLost ( FarmerDepot ) ;
13986: LD_STRING FarmerDepot
13988: PPUSH
13989: CALL_OW 104
// end ;
13993: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
13994: LD_EXP 11
13998: PUSH
13999: LD_EXP 28
14003: PPUSH
14004: LD_EXP 36
14008: PPUSH
14009: CALL_OW 296
14013: PUSH
14014: LD_INT 12
14016: LESS
14017: AND
14018: PUSH
14019: LD_INT 81
14021: PUSH
14022: LD_INT 2
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 21
14031: PUSH
14032: LD_INT 1
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PPUSH
14043: CALL_OW 69
14047: NOT
14048: AND
14049: IFFALSE 14701
14051: GO 14053
14053: DISABLE
14054: LD_INT 0
14056: PPUSH
14057: PPUSH
14058: PPUSH
// begin allowConvoys := false ;
14059: LD_ADDR_EXP 12
14063: PUSH
14064: LD_INT 0
14066: ST_TO_ADDR
// InGameOn ;
14067: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14071: LD_EXP 28
14075: PPUSH
14076: LD_EXP 36
14080: PPUSH
14081: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14085: LD_EXP 36
14089: PPUSH
14090: LD_EXP 28
14094: PPUSH
14095: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14099: LD_EXP 36
14103: PPUSH
14104: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14108: LD_EXP 28
14112: PPUSH
14113: LD_STRING DH-1-end
14115: PPUSH
14116: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14120: LD_EXP 36
14124: PPUSH
14125: LD_STRING DF-1-end
14127: PPUSH
14128: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14132: LD_EXP 36
14136: PPUSH
14137: LD_STRING DF-2-end
14139: PPUSH
14140: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14144: LD_EXP 28
14148: PPUSH
14149: LD_STRING DH-2-end
14151: PPUSH
14152: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14156: LD_EXP 36
14160: PPUSH
14161: LD_STRING DF-3-end
14163: PPUSH
14164: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14168: LD_EXP 28
14172: PPUSH
14173: LD_STRING DH-3-end
14175: PPUSH
14176: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14180: LD_EXP 29
14184: PPUSH
14185: LD_STRING DG-1-end
14187: PPUSH
14188: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14192: LD_EXP 28
14196: PPUSH
14197: LD_STRING DH-4-end
14199: PPUSH
14200: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14204: LD_EXP 36
14208: PPUSH
14209: LD_STRING DF-4-end
14211: PPUSH
14212: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14216: LD_EXP 28
14220: PPUSH
14221: LD_STRING DH-5-end
14223: PPUSH
14224: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14228: LD_EXP 36
14232: PPUSH
14233: LD_STRING DF-5-end
14235: PPUSH
14236: CALL_OW 88
// InGameOff ;
14240: CALL_OW 9
// allowCargoEvacuation := true ;
14244: LD_ADDR_EXP 7
14248: PUSH
14249: LD_INT 1
14251: ST_TO_ADDR
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14252: LD_ADDR_VAR 0 2
14256: PUSH
14257: LD_INT 4
14259: PUSH
14260: LD_INT 3
14262: PUSH
14263: LD_INT 2
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: LIST
14270: PUSH
14271: LD_OWVAR 67
14275: ARRAY
14276: ST_TO_ADDR
// if farmerSquad < max then
14277: LD_EXP 39
14281: PUSH
14282: LD_VAR 0 2
14286: LESS
14287: IFFALSE 14299
// max := farmerSquad ;
14289: LD_ADDR_VAR 0 2
14293: PUSH
14294: LD_EXP 39
14298: ST_TO_ADDR
// for i := 1 to max do
14299: LD_ADDR_VAR 0 1
14303: PUSH
14304: DOUBLE
14305: LD_INT 1
14307: DEC
14308: ST_TO_ADDR
14309: LD_VAR 0 2
14313: PUSH
14314: FOR_TO
14315: IFFALSE 14353
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14317: LD_EXP 39
14321: PUSH
14322: LD_INT 1
14324: ARRAY
14325: PPUSH
14326: LD_INT 2
14328: PPUSH
14329: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14333: LD_ADDR_EXP 39
14337: PUSH
14338: LD_EXP 39
14342: PPUSH
14343: LD_INT 1
14345: PPUSH
14346: CALL_OW 3
14350: ST_TO_ADDR
// end ;
14351: GO 14314
14353: POP
14354: POP
// for i in Farmer ^ farmerSquad do
14355: LD_ADDR_VAR 0 1
14359: PUSH
14360: LD_EXP 36
14364: PUSH
14365: LD_EXP 39
14369: ADD
14370: PUSH
14371: FOR_IN
14372: IFFALSE 14411
// begin if IsInUnit ( i ) then
14374: LD_VAR 0 1
14378: PPUSH
14379: CALL_OW 310
14383: IFFALSE 14394
// ComExitBuilding ( i ) ;
14385: LD_VAR 0 1
14389: PPUSH
14390: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14394: LD_VAR 0 1
14398: PPUSH
14399: LD_INT 102
14401: PPUSH
14402: LD_INT 7
14404: PPUSH
14405: CALL_OW 171
// end ;
14409: GO 14371
14411: POP
14412: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14413: LD_ADDR_VAR 0 1
14417: PUSH
14418: LD_INT 22
14420: PUSH
14421: LD_INT 5
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 3
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 69
14446: PUSH
14447: LD_INT 5
14449: DIFF
14450: PUSH
14451: FOR_IN
14452: IFFALSE 14468
// SetSide ( i , 2 ) ;
14454: LD_VAR 0 1
14458: PPUSH
14459: LD_INT 2
14461: PPUSH
14462: CALL_OW 235
14466: GO 14451
14468: POP
14469: POP
// wait ( 0 0$2 ) ;
14470: LD_INT 70
14472: PPUSH
14473: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14477: LD_EXP 28
14481: PPUSH
14482: LD_STRING DH-6-end
14484: PPUSH
14485: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14489: LD_INT 35
14491: PPUSH
14492: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14496: LD_ADDR_VAR 0 3
14500: PUSH
14501: LD_EXP 36
14505: PUSH
14506: LD_EXP 39
14510: ADD
14511: PPUSH
14512: LD_INT 95
14514: PUSH
14515: LD_INT 3
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PPUSH
14522: CALL_OW 72
14526: ST_TO_ADDR
// if tmp then
14527: LD_VAR 0 3
14531: IFFALSE 14575
// for i in tmp do
14533: LD_ADDR_VAR 0 1
14537: PUSH
14538: LD_VAR 0 3
14542: PUSH
14543: FOR_IN
14544: IFFALSE 14573
// begin farmerSquad := farmerSquad diff i ;
14546: LD_ADDR_EXP 39
14550: PUSH
14551: LD_EXP 39
14555: PUSH
14556: LD_VAR 0 1
14560: DIFF
14561: ST_TO_ADDR
// RemoveUnit ( i ) ;
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 64
// end ;
14571: GO 14543
14573: POP
14574: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14575: LD_EXP 39
14579: PUSH
14580: EMPTY
14581: EQUAL
14582: PUSH
14583: LD_EXP 36
14587: PPUSH
14588: CALL_OW 305
14592: NOT
14593: AND
14594: IFFALSE 14489
// if farmerHumanLoseCounter = 0 then
14596: LD_EXP 20
14600: PUSH
14601: LD_INT 0
14603: EQUAL
14604: IFFALSE 14613
// SetAchievement ( ACH_BABY ) ;
14606: LD_STRING ACH_BABY
14608: PPUSH
14609: CALL_OW 543
// wait ( 1 1$00 ) ;
14613: LD_INT 2100
14615: PPUSH
14616: CALL_OW 67
// SendAttack ;
14620: CALL 6123 0 0
// Say ( Heike , DH-7-end ) ;
14624: LD_EXP 28
14628: PPUSH
14629: LD_STRING DH-7-end
14631: PPUSH
14632: CALL_OW 88
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
14636: LD_ADDR_VAR 0 1
14640: PUSH
14641: DOUBLE
14642: LD_INT 1
14644: DEC
14645: ST_TO_ADDR
14646: LD_INT 2
14648: PUSH
14649: LD_INT 3
14651: PUSH
14652: LD_INT 4
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: LIST
14659: PUSH
14660: LD_OWVAR 67
14664: ARRAY
14665: PUSH
14666: FOR_TO
14667: IFFALSE 14699
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 ] [ Difficulty ] ) ;
14669: LD_INT 4200
14671: PUSH
14672: LD_INT 3500
14674: PUSH
14675: LD_INT 3150
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: LIST
14682: PUSH
14683: LD_OWVAR 67
14687: ARRAY
14688: PPUSH
14689: CALL_OW 67
// SendAttack ;
14693: CALL 6123 0 0
// end ;
14697: GO 14666
14699: POP
14700: POP
// end ;
14701: PPOPN 3
14703: END
// every 2 2$00 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14704: LD_EXP 7
14708: PUSH
14709: LD_EXP 21
14713: PUSH
14714: LD_INT 0
14716: GREATER
14717: AND
14718: IFFALSE 14728
14720: GO 14722
14722: DISABLE
// begin enable ;
14723: ENABLE
// CargoEvacuation ;
14724: CALL 3644 0 0
// end ;
14728: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14729: LD_EXP 17
14733: PUSH
14734: LD_INT 18900
14736: LESSEQUAL
14737: IFFALSE 14786
14739: GO 14741
14741: DISABLE
// begin DialogueOn ;
14742: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14746: LD_EXP 36
14750: PPUSH
14751: LD_STRING DF-1-distribution-a
14753: PPUSH
14754: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14758: LD_EXP 28
14762: PPUSH
14763: LD_STRING DH-1-distribution-a
14765: PPUSH
14766: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14770: LD_EXP 36
14774: PPUSH
14775: LD_STRING DF-2-distribution-a
14777: PPUSH
14778: CALL_OW 94
// DialogueOff ;
14782: CALL_OW 7
// end ;
14786: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14787: LD_EXP 17
14791: PUSH
14792: LD_INT 0
14794: LESSEQUAL
14795: IFFALSE 14827
14797: GO 14799
14799: DISABLE
// begin DialogueOn ;
14800: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14804: LD_EXP 36
14808: PPUSH
14809: LD_STRING DF-3-distribution-a
14811: PPUSH
14812: CALL_OW 94
// YouLost ( Distribution ) ;
14816: LD_STRING Distribution
14818: PPUSH
14819: CALL_OW 104
// DialogueOff ;
14823: CALL_OW 7
// end ;
14827: END
// every 0 0$1 trigger vehCounter >= 2 do
14828: LD_EXP 22
14832: PUSH
14833: LD_INT 2
14835: GREATEREQUAL
14836: IFFALSE 14848
14838: GO 14840
14840: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14841: LD_STRING VehConstructed
14843: PPUSH
14844: CALL_OW 337
14848: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14849: LD_INT 22
14851: PUSH
14852: LD_INT 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 34
14861: PUSH
14862: LD_INT 12
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PPUSH
14873: CALL_OW 69
14877: IFFALSE 14937
14879: GO 14881
14881: DISABLE
// begin DialogueOn ;
14882: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14886: LD_EXP 28
14890: PPUSH
14891: LD_STRING DH-1-truck
14893: PPUSH
14894: CALL_OW 88
// if IsOk ( Markov ) then
14898: LD_EXP 35
14902: PPUSH
14903: CALL_OW 302
14907: IFFALSE 14933
// begin Say ( Markov , DMar-1-truck ) ;
14909: LD_EXP 35
14913: PPUSH
14914: LD_STRING DMar-1-truck
14916: PPUSH
14917: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
14921: LD_EXP 28
14925: PPUSH
14926: LD_STRING DH-2-truck
14928: PPUSH
14929: CALL_OW 88
// end ; DialogueOff ;
14933: CALL_OW 7
// end ;
14937: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
// if IsOk ( Givi ) then
14943: LD_EXP 29
14947: PPUSH
14948: CALL_OW 302
14952: IFFALSE 14968
// begin Say ( Givi , DG-1-nocargo ) ;
14954: LD_EXP 29
14958: PPUSH
14959: LD_STRING DG-1-nocargo
14961: PPUSH
14962: CALL_OW 88
// exit ;
14966: GO 15064
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
14968: LD_ADDR_VAR 0 2
14972: PUSH
14973: LD_EXP 42
14977: PPUSH
14978: LD_INT 26
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PPUSH
14988: CALL_OW 72
14992: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
14993: LD_ADDR_VAR 0 3
14997: PUSH
14998: LD_EXP 42
15002: PPUSH
15003: LD_INT 26
15005: PUSH
15006: LD_INT 2
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 72
15017: ST_TO_ADDR
// if randomMen then
15018: LD_VAR 0 2
15022: IFFALSE 15042
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15024: LD_VAR 0 2
15028: PUSH
15029: LD_INT 1
15031: ARRAY
15032: PPUSH
15033: LD_STRING DArm-1-nocargo
15035: PPUSH
15036: CALL_OW 88
15040: GO 15064
// if randomWomen then
15042: LD_VAR 0 3
15046: IFFALSE 15064
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15048: LD_VAR 0 3
15052: PUSH
15053: LD_INT 1
15055: ARRAY
15056: PPUSH
15057: LD_STRING DArf-1-nocargo
15059: PPUSH
15060: CALL_OW 88
// end ;
15064: LD_VAR 0 1
15068: RET
// export function IncomingAttack ; begin
15069: LD_INT 0
15071: PPUSH
// if attackWave = 1 then
15072: LD_EXP 19
15076: PUSH
15077: LD_INT 1
15079: EQUAL
15080: IFFALSE 15151
// begin DialogueOn ;
15082: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15086: LD_EXP 37
15090: PPUSH
15091: LD_STRING DO-1-radio-1
15093: PPUSH
15094: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15098: LD_EXP 28
15102: PPUSH
15103: LD_STRING DH-1-radio-1-
15105: PPUSH
15106: CALL_OW 88
// if IsOk ( Markov ) then
15110: LD_EXP 35
15114: PPUSH
15115: CALL_OW 302
15119: IFFALSE 15145
// begin Say ( Markov , DMar-1-radio-1 ) ;
15121: LD_EXP 35
15125: PPUSH
15126: LD_STRING DMar-1-radio-1
15128: PPUSH
15129: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15133: LD_EXP 28
15137: PPUSH
15138: LD_STRING DH-2-radio-1
15140: PPUSH
15141: CALL_OW 88
// end ; DialogueOff ;
15145: CALL_OW 7
// end else
15149: GO 15175
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15151: LD_EXP 37
15155: PPUSH
15156: LD_STRING DO-1-radio-u
15158: PPUSH
15159: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15163: LD_EXP 28
15167: PPUSH
15168: LD_STRING DH-1-radio-u
15170: PPUSH
15171: CALL_OW 88
// end ; end ;
15175: LD_VAR 0 1
15179: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15180: LD_EXP 44
15184: PPUSH
15185: LD_INT 95
15187: PUSH
15188: LD_INT 8
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PPUSH
15195: CALL_OW 72
15199: IFFALSE 15302
15201: GO 15203
15203: DISABLE
15204: LD_INT 0
15206: PPUSH
// begin enable ;
15207: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15208: LD_ADDR_VAR 0 1
15212: PUSH
15213: LD_EXP 44
15217: PPUSH
15218: LD_INT 95
15220: PUSH
15221: LD_INT 8
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PPUSH
15228: CALL_OW 72
15232: PUSH
15233: FOR_IN
15234: IFFALSE 15263
// begin usForces := usForces diff i ;
15236: LD_ADDR_EXP 44
15240: PUSH
15241: LD_EXP 44
15245: PUSH
15246: LD_VAR 0 1
15250: DIFF
15251: ST_TO_ADDR
// RemoveUnit ( i ) ;
15252: LD_VAR 0 1
15256: PPUSH
15257: CALL_OW 64
// end ;
15261: GO 15233
15263: POP
15264: POP
// if not americanHasEscaped and attackWave = 1 then
15265: LD_EXP 8
15269: NOT
15270: PUSH
15271: LD_EXP 19
15275: PUSH
15276: LD_INT 1
15278: EQUAL
15279: AND
15280: IFFALSE 15302
// begin americanHasEscaped := true ;
15282: LD_ADDR_EXP 8
15286: PUSH
15287: LD_INT 1
15289: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15290: LD_EXP 28
15294: PPUSH
15295: LD_STRING DH-2-assault-a
15297: PPUSH
15298: CALL_OW 88
// end ; end ;
15302: PPOPN 1
15304: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15305: LD_INT 4
15307: PPUSH
15308: LD_INT 22
15310: PUSH
15311: LD_INT 1
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PPUSH
15318: CALL_OW 70
15322: PUSH
15323: LD_EXP 11
15327: NOT
15328: AND
15329: IFFALSE 15346
15331: GO 15333
15333: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15334: LD_EXP 36
15338: PPUSH
15339: LD_STRING DF-1-attack
15341: PPUSH
15342: CALL_OW 94
15346: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15347: LD_INT 5
15349: PPUSH
15350: CALL_OW 255
15354: PUSH
15355: LD_INT 2
15357: EQUAL
15358: IFFALSE 15370
15360: GO 15362
15362: DISABLE
// YouLost ( Attack ) ;
15363: LD_STRING Attack
15365: PPUSH
15366: CALL_OW 104
15370: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15371: LD_INT 22
15373: PUSH
15374: LD_INT 1
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 21
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PPUSH
15395: CALL_OW 69
15399: NOT
15400: PUSH
15401: LD_INT 22
15403: PUSH
15404: LD_INT 4
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PPUSH
15411: CALL_OW 69
15415: NOT
15416: AND
15417: PUSH
15418: LD_EXP 11
15422: NOT
15423: AND
15424: PUSH
15425: LD_EXP 15
15429: PUSH
15430: LD_INT 90
15432: GREATER
15433: AND
15434: PUSH
15435: LD_INT 7
15437: PPUSH
15438: LD_INT 22
15440: PUSH
15441: LD_INT 2
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 21
15450: PUSH
15451: LD_INT 1
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 70
15466: AND
15467: PUSH
15468: LD_INT 22
15470: PUSH
15471: LD_INT 2
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 50
15480: PUSH
15481: EMPTY
15482: LIST
15483: PUSH
15484: LD_INT 30
15486: PUSH
15487: LD_INT 0
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: AND
15504: IFFALSE 16297
15506: GO 15508
15508: DISABLE
15509: LD_INT 0
15511: PPUSH
15512: PPUSH
15513: PPUSH
15514: PPUSH
15515: PPUSH
// begin depot := usDepot ;
15516: LD_ADDR_VAR 0 5
15520: PUSH
15521: LD_INT 11
15523: ST_TO_ADDR
// if not depot then
15524: LD_VAR 0 5
15528: NOT
15529: IFFALSE 15569
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15531: LD_ADDR_VAR 0 5
15535: PUSH
15536: LD_INT 22
15538: PUSH
15539: LD_INT 2
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 30
15548: PUSH
15549: LD_INT 0
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PPUSH
15560: CALL_OW 69
15564: PUSH
15565: LD_INT 1
15567: ARRAY
15568: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15569: LD_ADDR_VAR 0 1
15573: PUSH
15574: LD_EXP 42
15578: PPUSH
15579: LD_INT 26
15581: PUSH
15582: LD_INT 1
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 72
15593: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15594: LD_ADDR_VAR 0 2
15598: PUSH
15599: LD_EXP 42
15603: PPUSH
15604: LD_INT 26
15606: PUSH
15607: LD_INT 2
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PPUSH
15614: CALL_OW 72
15618: ST_TO_ADDR
// if IsOk ( Kaia ) then
15619: LD_EXP 33
15623: PPUSH
15624: CALL_OW 302
15628: IFFALSE 15649
// speaker := [ Kaia , DK ] else
15630: LD_ADDR_VAR 0 3
15634: PUSH
15635: LD_EXP 33
15639: PUSH
15640: LD_STRING DK
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: ST_TO_ADDR
15647: GO 15729
// if randomMen then
15649: LD_VAR 0 1
15653: IFFALSE 15688
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15655: LD_ADDR_VAR 0 3
15659: PUSH
15660: LD_VAR 0 1
15664: PUSH
15665: LD_INT 1
15667: PPUSH
15668: LD_VAR 0 1
15672: PPUSH
15673: CALL_OW 12
15677: ARRAY
15678: PUSH
15679: LD_STRING DArm
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: ST_TO_ADDR
15686: GO 15729
// if randomWomen then
15688: LD_VAR 0 2
15692: IFFALSE 15727
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15694: LD_ADDR_VAR 0 3
15698: PUSH
15699: LD_VAR 0 2
15703: PUSH
15704: LD_INT 1
15706: PPUSH
15707: LD_VAR 0 2
15711: PPUSH
15712: CALL_OW 12
15716: ARRAY
15717: PUSH
15718: LD_STRING DArf
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: ST_TO_ADDR
15725: GO 15729
// exit ;
15727: GO 16297
// if IsInUnit ( speaker [ 1 ] ) then
15729: LD_VAR 0 3
15733: PUSH
15734: LD_INT 1
15736: ARRAY
15737: PPUSH
15738: CALL_OW 310
15742: IFFALSE 15765
// place := IsInUnit ( speaker [ 1 ] ) else
15744: LD_ADDR_VAR 0 4
15748: PUSH
15749: LD_VAR 0 3
15753: PUSH
15754: LD_INT 1
15756: ARRAY
15757: PPUSH
15758: CALL_OW 310
15762: ST_TO_ADDR
15763: GO 15779
// place := speaker [ 1 ] ;
15765: LD_ADDR_VAR 0 4
15769: PUSH
15770: LD_VAR 0 3
15774: PUSH
15775: LD_INT 1
15777: ARRAY
15778: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15779: LD_VAR 0 4
15783: PPUSH
15784: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15788: LD_VAR 0 4
15792: PPUSH
15793: CALL_OW 250
15797: PPUSH
15798: LD_VAR 0 4
15802: PPUSH
15803: CALL_OW 251
15807: PPUSH
15808: CALL 2131 0 2
// wait ( 0 0$2 ) ;
15812: LD_INT 70
15814: PPUSH
15815: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15819: LD_EXP 38
15823: PPUSH
15824: CALL_OW 305
15828: NOT
15829: IFFALSE 15833
// exit ;
15831: GO 16297
// allowConvoys := false ;
15833: LD_ADDR_EXP 12
15837: PUSH
15838: LD_INT 0
15840: ST_TO_ADDR
// InGameOn ;
15841: CALL_OW 8
// wait ( 0 0$1 ) ;
15845: LD_INT 35
15847: PPUSH
15848: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15852: LD_EXP 38
15856: PPUSH
15857: LD_STRING DI-1-land
15859: PPUSH
15860: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15864: LD_VAR 0 3
15868: PUSH
15869: LD_INT 1
15871: ARRAY
15872: PPUSH
15873: CALL_OW 310
15877: IFFALSE 15892
// ComExit ( speaker [ 1 ] ) ;
15879: LD_VAR 0 3
15883: PUSH
15884: LD_INT 1
15886: ARRAY
15887: PPUSH
15888: CALL 73794 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15892: LD_VAR 0 3
15896: PUSH
15897: LD_INT 1
15899: ARRAY
15900: PPUSH
15901: LD_EXP 38
15905: PPUSH
15906: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
15910: LD_VAR 0 3
15914: PUSH
15915: LD_INT 1
15917: ARRAY
15918: PPUSH
15919: LD_EXP 38
15923: PPUSH
15924: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
15928: LD_EXP 38
15932: PPUSH
15933: LD_VAR 0 3
15937: PUSH
15938: LD_INT 1
15940: ARRAY
15941: PPUSH
15942: CALL_OW 119
// wait ( 0 0$1 ) ;
15946: LD_INT 35
15948: PPUSH
15949: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
15953: LD_VAR 0 3
15957: PUSH
15958: LD_INT 1
15960: ARRAY
15961: PPUSH
15962: LD_VAR 0 3
15966: PUSH
15967: LD_INT 2
15969: ARRAY
15970: PUSH
15971: LD_STRING -1-land
15973: STR
15974: PPUSH
15975: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
15979: LD_EXP 38
15983: PPUSH
15984: LD_STRING DI-2-land
15986: PPUSH
15987: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
15991: LD_VAR 0 3
15995: PUSH
15996: LD_INT 1
15998: ARRAY
15999: PPUSH
16000: LD_VAR 0 3
16004: PUSH
16005: LD_INT 2
16007: ARRAY
16008: PUSH
16009: LD_STRING -2-land
16011: STR
16012: PPUSH
16013: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16017: LD_VAR 0 3
16021: PUSH
16022: LD_INT 1
16024: ARRAY
16025: PPUSH
16026: LD_VAR 0 3
16030: PUSH
16031: LD_INT 2
16033: ARRAY
16034: PUSH
16035: LD_STRING -3-land
16037: STR
16038: PPUSH
16039: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16043: LD_EXP 28
16047: PPUSH
16048: LD_STRING DH-1-land
16050: PPUSH
16051: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16055: LD_VAR 0 5
16059: PPUSH
16060: CALL_OW 313
16064: PUSH
16065: LD_INT 6
16067: EQUAL
16068: IFFALSE 16088
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16070: LD_VAR 0 5
16074: PPUSH
16075: CALL_OW 313
16079: PUSH
16080: LD_INT 1
16082: ARRAY
16083: PPUSH
16084: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16088: LD_EXP 38
16092: PPUSH
16093: LD_INT 2
16095: PPUSH
16096: CALL_OW 235
// CenterOnUnits ( depot ) ;
16100: LD_VAR 0 5
16104: PPUSH
16105: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16109: LD_EXP 38
16113: PPUSH
16114: LD_VAR 0 5
16118: PPUSH
16119: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16123: LD_VAR 0 3
16127: PUSH
16128: LD_INT 1
16130: ARRAY
16131: PPUSH
16132: LD_VAR 0 5
16136: PPUSH
16137: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16141: LD_INT 35
16143: PPUSH
16144: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16148: LD_EXP 38
16152: PPUSH
16153: CALL_OW 310
16157: PUSH
16158: LD_EXP 38
16162: PPUSH
16163: CALL_OW 302
16167: NOT
16168: OR
16169: PUSH
16170: LD_VAR 0 5
16174: PPUSH
16175: CALL_OW 302
16179: NOT
16180: OR
16181: IFFALSE 16141
// InGameOff ;
16183: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16187: LD_EXP 38
16191: PPUSH
16192: CALL_OW 302
16196: NOT
16197: IFFALSE 16201
// exit ;
16199: GO 16297
// if not IsOk ( depot ) then
16201: LD_VAR 0 5
16205: PPUSH
16206: CALL_OW 302
16210: NOT
16211: IFFALSE 16274
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16213: LD_EXP 38
16217: PPUSH
16218: LD_INT 30
16220: PPUSH
16221: LD_INT 1
16223: PPUSH
16224: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16228: LD_INT 35
16230: PPUSH
16231: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16235: LD_EXP 38
16239: PPUSH
16240: LD_INT 30
16242: PPUSH
16243: LD_INT 1
16245: PPUSH
16246: CALL_OW 307
16250: PUSH
16251: LD_EXP 38
16255: PPUSH
16256: CALL_OW 301
16260: OR
16261: IFFALSE 16228
// RemoveUnit ( Ibrahim ) ;
16263: LD_EXP 38
16267: PPUSH
16268: CALL_OW 64
// exit ;
16272: GO 16297
// end ; ibrahimInDepot := true ;
16274: LD_ADDR_EXP 25
16278: PUSH
16279: LD_INT 1
16281: ST_TO_ADDR
// allowConvoys := true ;
16282: LD_ADDR_EXP 12
16286: PUSH
16287: LD_INT 1
16289: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16290: LD_STRING IbrahimInDepot
16292: PPUSH
16293: CALL_OW 97
// end ;
16297: PPOPN 5
16299: END
// export function IbrahimQuery ; begin
16300: LD_INT 0
16302: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16303: LD_STRING IbrahimQuery
16305: PPUSH
16306: CALL_OW 97
16310: PUSH
16311: LD_INT 1
16313: DOUBLE
16314: EQUAL
16315: IFTRUE 16319
16317: GO 16595
16319: POP
// begin allowConvoys := false ;
16320: LD_ADDR_EXP 12
16324: PUSH
16325: LD_INT 0
16327: ST_TO_ADDR
// ibrahimInDepot := false ;
16328: LD_ADDR_EXP 25
16332: PUSH
16333: LD_INT 0
16335: ST_TO_ADDR
// InGameOn ;
16336: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16340: LD_EXP 28
16344: PPUSH
16345: CALL_OW 87
// wait ( 0 0$1 ) ;
16349: LD_INT 35
16351: PPUSH
16352: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16356: LD_EXP 28
16360: PPUSH
16361: LD_STRING DH-1-interrogation
16363: PPUSH
16364: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16368: LD_EXP 38
16372: PPUSH
16373: LD_STRING DI-1-interrogation
16375: PPUSH
16376: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16380: LD_EXP 28
16384: PPUSH
16385: LD_STRING DH-2-interrogation
16387: PPUSH
16388: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16392: LD_EXP 38
16396: PPUSH
16397: LD_STRING DI-2-interrogation
16399: PPUSH
16400: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16404: LD_EXP 28
16408: PPUSH
16409: LD_STRING DH-3-interrogation
16411: PPUSH
16412: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16416: LD_EXP 38
16420: PPUSH
16421: LD_STRING DI-3-interrogation
16423: PPUSH
16424: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16428: LD_EXP 28
16432: PPUSH
16433: LD_STRING DH-4-interrogation
16435: PPUSH
16436: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16440: LD_EXP 38
16444: PPUSH
16445: LD_STRING DI-4-interrogation
16447: PPUSH
16448: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16452: LD_EXP 28
16456: PPUSH
16457: LD_STRING DH-5-interrogation
16459: PPUSH
16460: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16464: LD_EXP 38
16468: PPUSH
16469: LD_STRING DI-5-interrogation
16471: PPUSH
16472: CALL_OW 88
// wait ( 0 0$1 ) ;
16476: LD_INT 35
16478: PPUSH
16479: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16483: LD_STRING IbrahimDecisionQuery
16485: PPUSH
16486: CALL_OW 97
16490: PUSH
16491: LD_INT 1
16493: DOUBLE
16494: EQUAL
16495: IFTRUE 16499
16497: GO 16523
16499: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16500: LD_EXP 38
16504: PPUSH
16505: LD_STRING DI-1-kill
16507: PPUSH
16508: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16512: LD_EXP 38
16516: PPUSH
16517: CALL_OW 66
// end ; 2 :
16521: GO 16589
16523: LD_INT 2
16525: DOUBLE
16526: EQUAL
16527: IFTRUE 16531
16529: GO 16588
16531: POP
// begin SetSide ( Ibrahim , 6 ) ;
16532: LD_EXP 38
16536: PPUSH
16537: LD_INT 6
16539: PPUSH
16540: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16544: LD_EXP 38
16548: PPUSH
16549: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16553: LD_EXP 38
16557: PPUSH
16558: LD_INT 66
16560: PPUSH
16561: LD_INT 2
16563: PPUSH
16564: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16568: LD_EXP 38
16572: PPUSH
16573: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16577: LD_EXP 28
16581: PPUSH
16582: CALL_OW 122
// end ; end ;
16586: GO 16589
16588: POP
// InGameOff ;
16589: CALL_OW 9
// end ; 2 :
16593: GO 16609
16595: LD_INT 2
16597: DOUBLE
16598: EQUAL
16599: IFTRUE 16603
16601: GO 16608
16603: POP
// exit ; end ;
16604: GO 16685
16606: GO 16609
16608: POP
// allowConvoys := true ;
16609: LD_ADDR_EXP 12
16613: PUSH
16614: LD_INT 1
16616: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16617: LD_INT 5250
16619: PPUSH
16620: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16624: LD_INT 35
16626: PPUSH
16627: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16631: LD_INT 81
16633: PUSH
16634: LD_INT 2
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 21
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PPUSH
16655: CALL_OW 69
16659: NOT
16660: IFFALSE 16624
// ComMoveXY ( Ibrahim , 38 , 28 ) ;
16662: LD_EXP 38
16666: PPUSH
16667: LD_INT 38
16669: PPUSH
16670: LD_INT 28
16672: PPUSH
16673: CALL_OW 111
// ibrahimIsFree := true ;
16677: LD_ADDR_EXP 26
16681: PUSH
16682: LD_INT 1
16684: ST_TO_ADDR
// end ;
16685: LD_VAR 0 1
16689: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
16690: LD_EXP 26
16694: PUSH
16695: LD_EXP 38
16699: PPUSH
16700: CALL_OW 302
16704: AND
16705: PUSH
16706: LD_INT 2
16708: PPUSH
16709: LD_EXP 38
16713: PPUSH
16714: CALL_OW 292
16718: AND
16719: IFFALSE 17479
16721: GO 16723
16723: DISABLE
16724: LD_INT 0
16726: PPUSH
16727: PPUSH
16728: PPUSH
16729: PPUSH
16730: PPUSH
16731: PPUSH
// begin allowConvoys := false ;
16732: LD_ADDR_EXP 12
16736: PUSH
16737: LD_INT 0
16739: ST_TO_ADDR
// depot := usDepot ;
16740: LD_ADDR_VAR 0 4
16744: PUSH
16745: LD_INT 11
16747: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16748: LD_INT 11
16750: NOT
16751: PUSH
16752: LD_INT 22
16754: PUSH
16755: LD_INT 2
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 50
16764: PUSH
16765: EMPTY
16766: LIST
16767: PUSH
16768: LD_INT 30
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: PPUSH
16783: CALL_OW 69
16787: AND
16788: IFFALSE 16835
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16790: LD_ADDR_VAR 0 4
16794: PUSH
16795: LD_INT 22
16797: PUSH
16798: LD_INT 2
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PUSH
16805: LD_INT 50
16807: PUSH
16808: EMPTY
16809: LIST
16810: PUSH
16811: LD_INT 30
16813: PUSH
16814: LD_INT 0
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: LIST
16825: PPUSH
16826: CALL_OW 69
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: ST_TO_ADDR
// InGameOn ;
16835: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16839: LD_EXP 38
16843: PPUSH
16844: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
16848: LD_EXP 28
16852: PPUSH
16853: LD_EXP 38
16857: PPUSH
16858: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
16862: LD_EXP 38
16866: PPUSH
16867: LD_EXP 28
16871: PPUSH
16872: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
16876: LD_EXP 38
16880: PPUSH
16881: LD_STRING DI-1-free
16883: PPUSH
16884: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
16888: LD_EXP 28
16892: PPUSH
16893: LD_STRING DH-1-free
16895: PPUSH
16896: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
16900: LD_EXP 38
16904: PPUSH
16905: LD_STRING DI-2-free
16907: PPUSH
16908: CALL_OW 88
// changeClass := 0 ;
16912: LD_ADDR_VAR 0 1
16916: PUSH
16917: LD_INT 0
16919: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
16920: LD_STRING IbrahimJoinQuery
16922: PPUSH
16923: CALL_OW 97
16927: PUSH
16928: LD_INT 1
16930: DOUBLE
16931: EQUAL
16932: IFTRUE 16936
16934: GO 16947
16936: POP
// begin changeClass := 1 ;
16937: LD_ADDR_VAR 0 1
16941: PUSH
16942: LD_INT 1
16944: ST_TO_ADDR
// end ; 2 :
16945: GO 17187
16947: LD_INT 2
16949: DOUBLE
16950: EQUAL
16951: IFTRUE 16955
16953: GO 17107
16955: POP
// begin Say ( Heike , DH-1-decline ) ;
16956: LD_EXP 28
16960: PPUSH
16961: LD_STRING DH-1-decline
16963: PPUSH
16964: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
16968: LD_EXP 38
16972: PPUSH
16973: LD_STRING DI-1-decline
16975: PPUSH
16976: CALL_OW 88
// InGameOff ;
16980: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
16984: LD_EXP 38
16988: PPUSH
16989: LD_INT 30
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: CALL_OW 111
// p := 0 ;
16999: LD_ADDR_VAR 0 3
17003: PUSH
17004: LD_INT 0
17006: ST_TO_ADDR
// repeat p := p + 1 ;
17007: LD_ADDR_VAR 0 3
17011: PUSH
17012: LD_VAR 0 3
17016: PUSH
17017: LD_INT 1
17019: PLUS
17020: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17021: LD_INT 35
17023: PPUSH
17024: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17028: LD_EXP 38
17032: PPUSH
17033: LD_INT 30
17035: PPUSH
17036: LD_INT 1
17038: PPUSH
17039: CALL_OW 307
17043: PUSH
17044: LD_INT 22
17046: PUSH
17047: LD_INT 2
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 101
17056: PUSH
17057: LD_INT 6
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PPUSH
17068: CALL_OW 69
17072: NOT
17073: OR
17074: PUSH
17075: LD_VAR 0 3
17079: PUSH
17080: LD_INT 10
17082: GREATER
17083: OR
17084: IFFALSE 17007
// RemoveUnit ( Ibrahim ) ;
17086: LD_EXP 38
17090: PPUSH
17091: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17095: LD_INT 1
17097: PPUSH
17098: LD_STRING 03_IbrahimHasEscaped
17100: PPUSH
17101: CALL_OW 39
// end ; 3 :
17105: GO 17187
17107: LD_INT 3
17109: DOUBLE
17110: EQUAL
17111: IFTRUE 17115
17113: GO 17186
17115: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17116: LD_EXP 28
17120: PPUSH
17121: LD_STRING DH-1-radio-hq
17123: PPUSH
17124: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17128: LD_EXP 37
17132: PPUSH
17133: LD_STRING DO-1-radio-hq
17135: PPUSH
17136: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17140: LD_EXP 28
17144: PPUSH
17145: LD_STRING DH-2-radio-hq
17147: PPUSH
17148: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17152: LD_EXP 37
17156: PPUSH
17157: LD_STRING DO-2-radio-hq
17159: PPUSH
17160: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17164: LD_EXP 28
17168: PPUSH
17169: LD_STRING DH-3-radio-hq
17171: PPUSH
17172: CALL_OW 88
// changeClass := 1 ;
17176: LD_ADDR_VAR 0 1
17180: PUSH
17181: LD_INT 1
17183: ST_TO_ADDR
// end ; end ;
17184: GO 17187
17186: POP
// if changeClass then
17187: LD_VAR 0 1
17191: IFFALSE 17479
// begin Say ( Heike , DH-1-agree ) ;
17193: LD_EXP 28
17197: PPUSH
17198: LD_STRING DH-1-agree
17200: PPUSH
17201: CALL_OW 88
// if IsOk ( Givi ) then
17205: LD_EXP 29
17209: PPUSH
17210: CALL_OW 302
17214: IFFALSE 17252
// begin Say ( Givi , DG-1-agree ) ;
17216: LD_EXP 29
17220: PPUSH
17221: LD_STRING DG-1-agree
17223: PPUSH
17224: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17228: LD_EXP 28
17232: PPUSH
17233: LD_STRING DH-2-agree
17235: PPUSH
17236: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17240: LD_EXP 29
17244: PPUSH
17245: LD_STRING DG-2-agree
17247: PPUSH
17248: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17252: LD_VAR 0 4
17256: PPUSH
17257: CALL_OW 313
17261: PUSH
17262: LD_INT 6
17264: EQUAL
17265: IFFALSE 17285
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17267: LD_VAR 0 4
17271: PPUSH
17272: CALL_OW 313
17276: PUSH
17277: LD_INT 1
17279: ARRAY
17280: PPUSH
17281: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17285: LD_EXP 38
17289: PPUSH
17290: LD_INT 2
17292: PPUSH
17293: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17297: LD_ADDR_VAR 0 5
17301: PUSH
17302: LD_EXP 38
17306: PPUSH
17307: CALL_OW 250
17311: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17312: LD_ADDR_VAR 0 6
17316: PUSH
17317: LD_EXP 38
17321: PPUSH
17322: CALL_OW 251
17326: ST_TO_ADDR
// if depot then
17327: LD_VAR 0 4
17331: IFFALSE 17380
// begin ComEnterUnit ( Ibrahim , depot ) ;
17333: LD_EXP 38
17337: PPUSH
17338: LD_VAR 0 4
17342: PPUSH
17343: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17347: LD_INT 35
17349: PPUSH
17350: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17354: LD_EXP 38
17358: PPUSH
17359: CALL_OW 310
17363: IFFALSE 17347
// b := IsInUnit ( Ibrahim ) ;
17365: LD_ADDR_VAR 0 2
17369: PUSH
17370: LD_EXP 38
17374: PPUSH
17375: CALL_OW 310
17379: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17380: LD_EXP 38
17384: PPUSH
17385: CALL_OW 64
// uc_side := 2 ;
17389: LD_ADDR_OWVAR 20
17393: PUSH
17394: LD_INT 2
17396: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17397: LD_ADDR_EXP 38
17401: PUSH
17402: LD_STRING Ibrahim
17404: PPUSH
17405: LD_INT 0
17407: PPUSH
17408: LD_STRING 
17410: PPUSH
17411: CALL 36668 0 3
17415: ST_TO_ADDR
// if depot then
17416: LD_VAR 0 4
17420: IFFALSE 17438
// PlaceHumanInUnit ( Ibrahim , b ) else
17422: LD_EXP 38
17426: PPUSH
17427: LD_VAR 0 2
17431: PPUSH
17432: CALL_OW 52
17436: GO 17460
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17438: LD_EXP 38
17442: PPUSH
17443: LD_VAR 0 5
17447: PPUSH
17448: LD_VAR 0 6
17452: PPUSH
17453: LD_INT 0
17455: PPUSH
17456: CALL_OW 48
// InGameOff ;
17460: CALL_OW 9
// allowConvoys := true ;
17464: LD_ADDR_EXP 12
17468: PUSH
17469: LD_INT 1
17471: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17472: LD_STRING ACH_IBRAHIM
17474: PPUSH
17475: CALL_OW 543
// end ; end ;
17479: PPOPN 6
17481: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17482: LD_EXP 33
17486: PPUSH
17487: CALL_OW 256
17491: PUSH
17492: LD_INT 3
17494: LESS
17495: IFFALSE 17562
17497: GO 17499
17499: DISABLE
// begin DialogueOn ;
17500: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17504: LD_EXP 33
17508: PPUSH
17509: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17513: LD_EXP 33
17517: PPUSH
17518: LD_STRING DK-keydeath-1
17520: PPUSH
17521: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17525: LD_EXP 28
17529: PPUSH
17530: LD_STRING DH-keydeath-2
17532: PPUSH
17533: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17537: LD_EXP 28
17541: PPUSH
17542: LD_STRING DH-keydeath-3
17544: PPUSH
17545: CALL_OW 88
// DialogueOff ;
17549: CALL_OW 7
// KillUnit ( Kaia ) ;
17553: LD_EXP 33
17557: PPUSH
17558: CALL_OW 66
// end ;
17562: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17563: LD_EXP 11
17567: PUSH
17568: LD_EXP 21
17572: PUSH
17573: LD_INT 1
17575: LESS
17576: AND
17577: IFFALSE 18113
17579: GO 17581
17581: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
17582: LD_INT 22
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 2
17594: PUSH
17595: LD_INT 25
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 25
17607: PUSH
17608: LD_INT 3
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PPUSH
17624: CALL_OW 69
17628: IFFALSE 17706
// begin ChangeSideFog ( 1 , 2 ) ;
17630: LD_INT 1
17632: PPUSH
17633: LD_INT 2
17635: PPUSH
17636: CALL_OW 343
// Query ( DestroyEnemy ) ;
17640: LD_STRING DestroyEnemy
17642: PPUSH
17643: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
17647: LD_INT 35
17649: PPUSH
17650: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
17654: LD_INT 22
17656: PUSH
17657: LD_INT 1
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 2
17666: PUSH
17667: LD_INT 25
17669: PUSH
17670: LD_INT 1
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 25
17679: PUSH
17680: LD_INT 3
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PPUSH
17696: CALL_OW 69
17700: PUSH
17701: LD_INT 0
17703: EQUAL
17704: IFFALSE 17647
// end ; DialogueOn ;
17706: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17710: LD_EXP 28
17714: PPUSH
17715: LD_STRING DH-1-final
17717: PPUSH
17718: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17722: LD_OWVAR 1
17726: PUSH
17727: LD_INT 126000
17729: PUSH
17730: LD_INT 115500
17732: PUSH
17733: LD_INT 105000
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: PUSH
17741: LD_OWVAR 67
17745: ARRAY
17746: LESSEQUAL
17747: IFFALSE 17761
// AddMedal ( med1 , 1 ) else
17749: LD_STRING med1
17751: PPUSH
17752: LD_INT 1
17754: PPUSH
17755: CALL_OW 101
17759: GO 17772
// AddMedal ( med1 , - 1 ) ;
17761: LD_STRING med1
17763: PPUSH
17764: LD_INT 1
17766: NEG
17767: PPUSH
17768: CALL_OW 101
// if vehCounter >= 2 then
17772: LD_EXP 22
17776: PUSH
17777: LD_INT 2
17779: GREATEREQUAL
17780: IFFALSE 17794
// AddMedal ( med2 , 1 ) else
17782: LD_STRING med2
17784: PPUSH
17785: LD_INT 1
17787: PPUSH
17788: CALL_OW 101
17792: GO 17805
// AddMedal ( med2 , - 1 ) ;
17794: LD_STRING med2
17796: PPUSH
17797: LD_INT 1
17799: NEG
17800: PPUSH
17801: CALL_OW 101
// if deadCounter = 0 then
17805: LD_EXP 9
17809: PUSH
17810: LD_INT 0
17812: EQUAL
17813: IFFALSE 17827
// AddMedal ( med3 , 1 ) else
17815: LD_STRING med3
17817: PPUSH
17818: LD_INT 1
17820: PPUSH
17821: CALL_OW 101
17825: GO 17838
// AddMedal ( med3 , - 1 ) ;
17827: LD_STRING med3
17829: PPUSH
17830: LD_INT 1
17832: NEG
17833: PPUSH
17834: CALL_OW 101
// GiveMedals ( MAIN ) ;
17838: LD_STRING MAIN
17840: PPUSH
17841: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17845: LD_INT 22
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 23
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 21
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: LIST
17879: PPUSH
17880: CALL_OW 69
17884: PPUSH
17885: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17889: LD_EXP 28
17893: PPUSH
17894: LD_STRING 03_Heike
17896: PPUSH
17897: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17901: LD_EXP 32
17905: PPUSH
17906: LD_STRING 03_Aviradze
17908: PPUSH
17909: CALL_OW 38
// if Givi then
17913: LD_EXP 29
17917: IFFALSE 17931
// SaveCharacters ( Givi , 03_Givi ) ;
17919: LD_EXP 29
17923: PPUSH
17924: LD_STRING 03_Givi
17926: PPUSH
17927: CALL_OW 38
// if Mike then
17931: LD_EXP 30
17935: IFFALSE 17949
// SaveCharacters ( Mike , 03_Mike ) ;
17937: LD_EXP 30
17941: PPUSH
17942: LD_STRING 03_Mike
17944: PPUSH
17945: CALL_OW 38
// if Kamil then
17949: LD_EXP 31
17953: IFFALSE 17967
// SaveCharacters ( Kamil , 03_Kamil ) ;
17955: LD_EXP 31
17959: PPUSH
17960: LD_STRING 03_Kamil
17962: PPUSH
17963: CALL_OW 38
// if Kaia then
17967: LD_EXP 33
17971: IFFALSE 17985
// SaveCharacters ( Kaia , 03_Kaia ) ;
17973: LD_EXP 33
17977: PPUSH
17978: LD_STRING 03_Kaia
17980: PPUSH
17981: CALL_OW 38
// if Sophia then
17985: LD_EXP 34
17989: IFFALSE 18003
// SaveCharacters ( Sophia , 03_Sophia ) ;
17991: LD_EXP 34
17995: PPUSH
17996: LD_STRING 03_Sophia
17998: PPUSH
17999: CALL_OW 38
// if Markov then
18003: LD_EXP 35
18007: IFFALSE 18021
// SaveCharacters ( Markov , 03_Markov ) ;
18009: LD_EXP 35
18013: PPUSH
18014: LD_STRING 03_Markov
18016: PPUSH
18017: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18021: LD_EXP 38
18025: PUSH
18026: LD_EXP 38
18030: PPUSH
18031: CALL_OW 255
18035: PUSH
18036: LD_INT 2
18038: EQUAL
18039: AND
18040: IFFALSE 18061
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18042: LD_STRING enableBioCharacter(BIO_IBRA)
18044: PPUSH
18045: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18049: LD_EXP 38
18053: PPUSH
18054: LD_STRING 03_Ibrahim
18056: PPUSH
18057: CALL_OW 38
// end ; if heikeSecondSquad then
18061: LD_EXP 42
18065: IFFALSE 18079
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18067: LD_EXP 42
18071: PPUSH
18072: LD_STRING 03_others
18074: PPUSH
18075: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18079: LD_EXP 9
18083: PPUSH
18084: LD_STRING 03_DeadCounter
18086: PPUSH
18087: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18091: LD_STRING enableBioCharacter(BIO_OMAR)
18093: PPUSH
18094: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18098: LD_STRING enableBioCharacter(BIO_FARM)
18100: PPUSH
18101: CALL_OW 559
// YouWin ;
18105: CALL_OW 103
// DialogueOff ;
18109: CALL_OW 7
// end ; end_of_file
18113: END
// on UnitDestroyed ( un ) do begin if un = Heike then
18114: LD_VAR 0 1
18118: PUSH
18119: LD_EXP 28
18123: EQUAL
18124: IFFALSE 18133
// YouLost ( Heike ) ;
18126: LD_STRING Heike
18128: PPUSH
18129: CALL_OW 104
// if un = Aviradze then
18133: LD_VAR 0 1
18137: PUSH
18138: LD_EXP 32
18142: EQUAL
18143: IFFALSE 18152
// YouLost ( Aviradze ) ;
18145: LD_STRING Aviradze
18147: PPUSH
18148: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18152: LD_VAR 0 1
18156: PUSH
18157: LD_INT 11
18159: EQUAL
18160: PUSH
18161: LD_EXP 11
18165: NOT
18166: AND
18167: IFFALSE 18176
// YouLost ( Depot ) ;
18169: LD_STRING Depot
18171: PPUSH
18172: CALL_OW 104
// if un = arDepot then
18176: LD_VAR 0 1
18180: PUSH
18181: LD_INT 5
18183: EQUAL
18184: IFFALSE 18193
// YouLost ( FarmerDepot ) ;
18186: LD_STRING FarmerDepot
18188: PPUSH
18189: CALL_OW 104
// if un = Farmer then
18193: LD_VAR 0 1
18197: PUSH
18198: LD_EXP 36
18202: EQUAL
18203: IFFALSE 18212
// YouLost ( Farmer ) ;
18205: LD_STRING Farmer
18207: PPUSH
18208: CALL_OW 104
// if un in usForces then
18212: LD_VAR 0 1
18216: PUSH
18217: LD_EXP 44
18221: IN
18222: IFFALSE 18240
// usForces := usForces diff un ;
18224: LD_ADDR_EXP 44
18228: PUSH
18229: LD_EXP 44
18233: PUSH
18234: LD_VAR 0 1
18238: DIFF
18239: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18240: LD_VAR 0 1
18244: PUSH
18245: LD_INT 22
18247: PUSH
18248: LD_INT 2
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 23
18257: PUSH
18258: LD_INT 2
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 21
18267: PUSH
18268: LD_INT 1
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: LIST
18279: PPUSH
18280: CALL_OW 69
18284: IN
18285: IFFALSE 18301
// deadCounter := deadCounter + 1 ;
18287: LD_ADDR_EXP 9
18291: PUSH
18292: LD_EXP 9
18296: PUSH
18297: LD_INT 1
18299: PLUS
18300: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18301: LD_VAR 0 1
18305: PUSH
18306: LD_INT 22
18308: PUSH
18309: LD_INT 4
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 34
18318: PUSH
18319: LD_INT 12
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PPUSH
18330: CALL_OW 69
18334: IN
18335: PUSH
18336: LD_EXP 18
18340: NOT
18341: AND
18342: IFFALSE 18352
// firstConvoyDestroyed := true ;
18344: LD_ADDR_EXP 18
18348: PUSH
18349: LD_INT 1
18351: ST_TO_ADDR
// if un in usAttackers then
18352: LD_VAR 0 1
18356: PUSH
18357: LD_EXP 47
18361: IN
18362: IFFALSE 18380
// usAttackers := usAttackers diff un ;
18364: LD_ADDR_EXP 47
18368: PUSH
18369: LD_EXP 47
18373: PUSH
18374: LD_VAR 0 1
18378: DIFF
18379: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18380: LD_VAR 0 1
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_INT 5
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 21
18397: PUSH
18398: LD_INT 1
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PPUSH
18409: CALL_OW 69
18413: IN
18414: IFFALSE 18430
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18416: LD_ADDR_EXP 20
18420: PUSH
18421: LD_EXP 20
18425: PUSH
18426: LD_INT 1
18428: PLUS
18429: ST_TO_ADDR
// end ;
18430: PPOPN 1
18432: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18433: LD_VAR 0 2
18437: PUSH
18438: LD_EXP 38
18442: EQUAL
18443: PUSH
18444: LD_EXP 25
18448: AND
18449: IFFALSE 18634
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18451: LD_INT 22
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 30
18463: PUSH
18464: LD_INT 0
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 50
18473: PUSH
18474: EMPTY
18475: LIST
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: LIST
18481: PPUSH
18482: CALL_OW 69
18486: IFFALSE 18540
// begin InGameOn ;
18488: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18492: LD_EXP 38
18496: PPUSH
18497: LD_INT 11
18499: PPUSH
18500: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18504: LD_INT 35
18506: PPUSH
18507: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18511: LD_EXP 38
18515: PPUSH
18516: LD_INT 11
18518: PPUSH
18519: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18523: LD_EXP 38
18527: PPUSH
18528: CALL_OW 310
18532: IFFALSE 18504
// InGameOff ;
18534: CALL_OW 9
// end else
18538: GO 18634
// begin SetSide ( Ibrahim , 6 ) ;
18540: LD_EXP 38
18544: PPUSH
18545: LD_INT 6
18547: PPUSH
18548: CALL_OW 235
// ibrahimInDepot := false ;
18552: LD_ADDR_EXP 25
18556: PUSH
18557: LD_INT 0
18559: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18560: LD_EXP 38
18564: PPUSH
18565: LD_INT 30
18567: PPUSH
18568: LD_INT 1
18570: PPUSH
18571: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18575: LD_INT 35
18577: PPUSH
18578: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18582: LD_EXP 38
18586: PPUSH
18587: LD_INT 30
18589: PPUSH
18590: LD_INT 1
18592: PPUSH
18593: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18597: LD_EXP 38
18601: PPUSH
18602: LD_INT 30
18604: PPUSH
18605: LD_INT 1
18607: PPUSH
18608: CALL_OW 307
18612: PUSH
18613: LD_EXP 38
18617: PPUSH
18618: CALL_OW 301
18622: OR
18623: IFFALSE 18575
// RemoveUnit ( Ibrahim ) ;
18625: LD_EXP 38
18629: PPUSH
18630: CALL_OW 64
// end ; end ; end ;
18634: PPOPN 2
18636: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18637: LD_VAR 0 2
18641: PUSH
18642: LD_EXP 28
18646: EQUAL
18647: PUSH
18648: LD_VAR 0 1
18652: PUSH
18653: LD_INT 11
18655: EQUAL
18656: AND
18657: PUSH
18658: LD_EXP 25
18662: AND
18663: IFFALSE 18669
// IbrahimQuery ;
18665: CALL 16300 0 0
// end ;
18669: PPOPN 2
18671: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18672: LD_VAR 0 1
18676: PPUSH
18677: CALL_OW 141
// if oldId in usAttackers then
18681: LD_VAR 0 2
18685: PUSH
18686: LD_EXP 47
18690: IN
18691: IFFALSE 18709
// usAttackers := usAttackers diff oldId ;
18693: LD_ADDR_EXP 47
18697: PUSH
18698: LD_EXP 47
18702: PUSH
18703: LD_VAR 0 2
18707: DIFF
18708: ST_TO_ADDR
// if newId in usAttackers then
18709: LD_VAR 0 1
18713: PUSH
18714: LD_EXP 47
18718: IN
18719: IFFALSE 18737
// usAttackers := usAttackers diff newId ;
18721: LD_ADDR_EXP 47
18725: PUSH
18726: LD_EXP 47
18730: PUSH
18731: LD_VAR 0 1
18735: DIFF
18736: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18737: LD_VAR 0 3
18741: PUSH
18742: LD_INT 4
18744: EQUAL
18745: PUSH
18746: LD_EXP 18
18750: NOT
18751: AND
18752: IFFALSE 18762
// firstConvoyDestroyed := true ;
18754: LD_ADDR_EXP 18
18758: PUSH
18759: LD_INT 1
18761: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18762: LD_VAR 0 1
18766: PPUSH
18767: CALL_OW 264
18771: PUSH
18772: LD_INT 12
18774: EQUAL
18775: IFFALSE 18813
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18777: LD_ADDR_EXP 13
18781: PUSH
18782: LD_EXP 13
18786: PUSH
18787: LD_INT 1
18789: PLUS
18790: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18791: LD_VAR 0 1
18795: PPUSH
18796: LD_INT 1
18798: PPUSH
18799: CALL_OW 289
18803: PUSH
18804: LD_INT 0
18806: EQUAL
18807: IFFALSE 18813
// EmptyCargoDialog ;
18809: CALL 14938 0 0
// end ; end ;
18813: PPOPN 4
18815: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18816: LD_VAR 0 1
18820: PUSH
18821: LD_INT 2
18823: EQUAL
18824: PUSH
18825: LD_VAR 0 2
18829: PUSH
18830: LD_INT 5
18832: EQUAL
18833: AND
18834: IFFALSE 18843
// YouLost ( Attack ) ;
18836: LD_STRING Attack
18838: PPUSH
18839: CALL_OW 104
// end ;
18843: PPOPN 2
18845: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18846: LD_VAR 0 1
18850: PPUSH
18851: CALL_OW 255
18855: PUSH
18856: LD_INT 1
18858: EQUAL
18859: PUSH
18860: LD_EXP 6
18864: NOT
18865: AND
18866: IFFALSE 19000
// begin if GetBType ( b ) = b_lab then
18868: LD_VAR 0 1
18872: PPUSH
18873: CALL_OW 266
18877: PUSH
18878: LD_INT 6
18880: EQUAL
18881: IFFALSE 18921
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18883: LD_EXP 44
18887: PPUSH
18888: LD_INT 25
18890: PUSH
18891: LD_INT 4
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PPUSH
18898: CALL_OW 72
18902: PPUSH
18903: LD_VAR 0 1
18907: PPUSH
18908: CALL_OW 120
// AmLabResearch ( b ) ;
18912: LD_VAR 0 1
18916: PPUSH
18917: CALL 5175 0 1
// end ; if GetBType ( b ) = b_armoury then
18921: LD_VAR 0 1
18925: PPUSH
18926: CALL_OW 266
18930: PUSH
18931: LD_INT 4
18933: EQUAL
18934: IFFALSE 18982
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18936: LD_EXP 44
18940: PPUSH
18941: LD_INT 25
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 3
18953: PUSH
18954: LD_INT 54
18956: PUSH
18957: EMPTY
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PPUSH
18968: CALL_OW 72
18972: PPUSH
18973: LD_VAR 0 1
18977: PPUSH
18978: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18982: LD_ADDR_EXP 46
18986: PUSH
18987: LD_EXP 46
18991: PPUSH
18992: LD_INT 1
18994: PPUSH
18995: CALL_OW 3
18999: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19000: LD_VAR 0 1
19004: PPUSH
19005: CALL_OW 255
19009: PUSH
19010: LD_INT 5
19012: EQUAL
19013: IFFALSE 19027
// SetBLevel ( b , 5 ) ;
19015: LD_VAR 0 1
19019: PPUSH
19020: LD_INT 5
19022: PPUSH
19023: CALL_OW 241
// end ;
19027: PPOPN 1
19029: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19030: LD_VAR 0 1
19034: PPUSH
19035: CALL_OW 255
19039: PUSH
19040: LD_INT 2
19042: EQUAL
19043: IFFALSE 19059
// vehCounter := vehCounter + 1 ;
19045: LD_ADDR_EXP 22
19049: PUSH
19050: LD_EXP 22
19054: PUSH
19055: LD_INT 1
19057: PLUS
19058: ST_TO_ADDR
// end ;
19059: PPOPN 2
19061: END
// on SailEvent ( event ) do begin if event = eventAttack then
19062: LD_VAR 0 1
19066: PUSH
19067: LD_EXP 24
19071: EQUAL
19072: IFFALSE 19078
// AmericanAttack ;
19074: CALL 6650 0 0
// end ; end_of_file
19078: PPOPN 1
19080: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 ] [ Difficulty ] do
19081: LD_OWVAR 1
19085: PUSH
19086: LD_INT 10500
19088: PUSH
19089: LD_INT 9800
19091: PUSH
19092: LD_INT 9450
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: PUSH
19100: LD_OWVAR 67
19104: ARRAY
19105: LESSEQUAL
19106: IFFALSE 19133
19108: GO 19110
19110: DISABLE
// begin enable ;
19111: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19112: LD_INT 1
19114: PPUSH
19115: LD_INT 5
19117: PPUSH
19118: CALL_OW 12
19122: PPUSH
19123: LD_INT 9
19125: PPUSH
19126: LD_INT 1
19128: PPUSH
19129: CALL_OW 55
// end ;
19133: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 ] [ Difficulty ] do
19134: LD_EXP 6
19138: PUSH
19139: LD_OWVAR 1
19143: PUSH
19144: LD_INT 56700
19146: PUSH
19147: LD_INT 55650
19149: PUSH
19150: LD_INT 54600
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: LIST
19157: PUSH
19158: LD_OWVAR 67
19162: ARRAY
19163: LESSEQUAL
19164: AND
19165: IFFALSE 19192
19167: GO 19169
19169: DISABLE
// begin enable ;
19170: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19171: LD_INT 3
19173: PPUSH
19174: LD_INT 5
19176: PPUSH
19177: CALL_OW 12
19181: PPUSH
19182: LD_INT 9
19184: PPUSH
19185: LD_INT 1
19187: PPUSH
19188: CALL_OW 55
// end ; end_of_file
19192: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19193: LD_EXP 11
19197: NOT
19198: PUSH
19199: LD_EXP 16
19203: AND
19204: PUSH
19205: LD_EXP 4
19209: AND
19210: PUSH
19211: LD_EXP 15
19215: PUSH
19216: LD_EXP 16
19220: LESSEQUAL
19221: AND
19222: IFFALSE 19312
19224: GO 19226
19226: DISABLE
// begin enable ;
19227: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19228: LD_ADDR_OWVAR 47
19232: PUSH
19233: LD_STRING #X103-1
19235: PUSH
19236: LD_EXP 16
19240: PUSH
19241: LD_EXP 15
19245: MINUS
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19251: LD_ADDR_EXP 15
19255: PUSH
19256: LD_INT 5
19258: PPUSH
19259: CALL_OW 274
19263: PPUSH
19264: LD_INT 1
19266: PPUSH
19267: CALL_OW 275
19271: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19272: LD_INT 10
19274: PPUSH
19275: LD_INT 1
19277: PPUSH
19278: CALL_OW 287
19282: PUSH
19283: LD_INT 0
19285: EQUAL
19286: IFFALSE 19304
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19288: LD_ADDR_EXP 17
19292: PUSH
19293: LD_EXP 17
19297: PUSH
19298: LD_INT 35
19300: MINUS
19301: ST_TO_ADDR
19302: GO 19312
// farmerCratesCounter := 30 30$00 ;
19304: LD_ADDR_EXP 17
19308: PUSH
19309: LD_INT 63000
19311: ST_TO_ADDR
// end ; end_of_file
19312: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19313: LD_INT 0
19315: PPUSH
// ar_miner := 81 ;
19316: LD_ADDR_EXP 55
19320: PUSH
19321: LD_INT 81
19323: ST_TO_ADDR
// ar_crane := 88 ;
19324: LD_ADDR_EXP 54
19328: PUSH
19329: LD_INT 88
19331: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19332: LD_ADDR_EXP 49
19336: PUSH
19337: LD_INT 89
19339: ST_TO_ADDR
// us_hack := 99 ;
19340: LD_ADDR_EXP 50
19344: PUSH
19345: LD_INT 99
19347: ST_TO_ADDR
// us_artillery := 97 ;
19348: LD_ADDR_EXP 51
19352: PUSH
19353: LD_INT 97
19355: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19356: LD_ADDR_EXP 52
19360: PUSH
19361: LD_INT 91
19363: ST_TO_ADDR
// ar_mortar := 92 ;
19364: LD_ADDR_EXP 53
19368: PUSH
19369: LD_INT 92
19371: ST_TO_ADDR
// ru_radar := 98 ;
19372: LD_ADDR_EXP 48
19376: PUSH
19377: LD_INT 98
19379: ST_TO_ADDR
// tech_Artillery := 80 ;
19380: LD_ADDR_EXP 56
19384: PUSH
19385: LD_INT 80
19387: ST_TO_ADDR
// tech_RadMat := 81 ;
19388: LD_ADDR_EXP 57
19392: PUSH
19393: LD_INT 81
19395: ST_TO_ADDR
// tech_BasicTools := 82 ;
19396: LD_ADDR_EXP 58
19400: PUSH
19401: LD_INT 82
19403: ST_TO_ADDR
// tech_Cargo := 83 ;
19404: LD_ADDR_EXP 59
19408: PUSH
19409: LD_INT 83
19411: ST_TO_ADDR
// tech_Track := 84 ;
19412: LD_ADDR_EXP 60
19416: PUSH
19417: LD_INT 84
19419: ST_TO_ADDR
// tech_Crane := 85 ;
19420: LD_ADDR_EXP 61
19424: PUSH
19425: LD_INT 85
19427: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19428: LD_ADDR_EXP 62
19432: PUSH
19433: LD_INT 86
19435: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19436: LD_ADDR_EXP 63
19440: PUSH
19441: LD_INT 87
19443: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19444: LD_ADDR_EXP 64
19448: PUSH
19449: LD_INT 88
19451: ST_TO_ADDR
// class_mastodont := 31 ;
19452: LD_ADDR_EXP 65
19456: PUSH
19457: LD_INT 31
19459: ST_TO_ADDR
// class_horse := 21 ;
19460: LD_ADDR_EXP 66
19464: PUSH
19465: LD_INT 21
19467: ST_TO_ADDR
// end ;
19468: LD_VAR 0 1
19472: RET
// every 1 do
19473: GO 19475
19475: DISABLE
// InitGlobalVariables ; end_of_file
19476: CALL 19313 0 0
19480: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19481: LD_INT 0
19483: PPUSH
// if p2 = 100 then
19484: LD_VAR 0 2
19488: PUSH
19489: LD_INT 100
19491: EQUAL
19492: IFFALSE 20441
// begin if not StreamModeActive then
19494: LD_EXP 67
19498: NOT
19499: IFFALSE 19509
// StreamModeActive := true ;
19501: LD_ADDR_EXP 67
19505: PUSH
19506: LD_INT 1
19508: ST_TO_ADDR
// if p3 = 0 then
19509: LD_VAR 0 3
19513: PUSH
19514: LD_INT 0
19516: EQUAL
19517: IFFALSE 19523
// InitStreamMode ;
19519: CALL 20601 0 0
// if p3 = 1 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 1
19530: EQUAL
19531: IFFALSE 19541
// sRocket := true ;
19533: LD_ADDR_EXP 72
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 2 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 2
19548: EQUAL
19549: IFFALSE 19559
// sSpeed := true ;
19551: LD_ADDR_EXP 71
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 3 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 3
19566: EQUAL
19567: IFFALSE 19577
// sEngine := true ;
19569: LD_ADDR_EXP 73
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 4 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 4
19584: EQUAL
19585: IFFALSE 19595
// sSpec := true ;
19587: LD_ADDR_EXP 70
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 5 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 5
19602: EQUAL
19603: IFFALSE 19613
// sLevel := true ;
19605: LD_ADDR_EXP 74
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 6 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 6
19620: EQUAL
19621: IFFALSE 19631
// sArmoury := true ;
19623: LD_ADDR_EXP 75
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 7 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 7
19638: EQUAL
19639: IFFALSE 19649
// sRadar := true ;
19641: LD_ADDR_EXP 76
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// if p3 = 8 then
19649: LD_VAR 0 3
19653: PUSH
19654: LD_INT 8
19656: EQUAL
19657: IFFALSE 19667
// sBunker := true ;
19659: LD_ADDR_EXP 77
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// if p3 = 9 then
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 9
19674: EQUAL
19675: IFFALSE 19685
// sHack := true ;
19677: LD_ADDR_EXP 78
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// if p3 = 10 then
19685: LD_VAR 0 3
19689: PUSH
19690: LD_INT 10
19692: EQUAL
19693: IFFALSE 19703
// sFire := true ;
19695: LD_ADDR_EXP 79
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// if p3 = 11 then
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 11
19710: EQUAL
19711: IFFALSE 19721
// sRefresh := true ;
19713: LD_ADDR_EXP 80
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// if p3 = 12 then
19721: LD_VAR 0 3
19725: PUSH
19726: LD_INT 12
19728: EQUAL
19729: IFFALSE 19739
// sExp := true ;
19731: LD_ADDR_EXP 81
19735: PUSH
19736: LD_INT 1
19738: ST_TO_ADDR
// if p3 = 13 then
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 13
19746: EQUAL
19747: IFFALSE 19757
// sDepot := true ;
19749: LD_ADDR_EXP 82
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// if p3 = 14 then
19757: LD_VAR 0 3
19761: PUSH
19762: LD_INT 14
19764: EQUAL
19765: IFFALSE 19775
// sFlag := true ;
19767: LD_ADDR_EXP 83
19771: PUSH
19772: LD_INT 1
19774: ST_TO_ADDR
// if p3 = 15 then
19775: LD_VAR 0 3
19779: PUSH
19780: LD_INT 15
19782: EQUAL
19783: IFFALSE 19793
// sKamikadze := true ;
19785: LD_ADDR_EXP 91
19789: PUSH
19790: LD_INT 1
19792: ST_TO_ADDR
// if p3 = 16 then
19793: LD_VAR 0 3
19797: PUSH
19798: LD_INT 16
19800: EQUAL
19801: IFFALSE 19811
// sTroll := true ;
19803: LD_ADDR_EXP 92
19807: PUSH
19808: LD_INT 1
19810: ST_TO_ADDR
// if p3 = 17 then
19811: LD_VAR 0 3
19815: PUSH
19816: LD_INT 17
19818: EQUAL
19819: IFFALSE 19829
// sSlow := true ;
19821: LD_ADDR_EXP 93
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// if p3 = 18 then
19829: LD_VAR 0 3
19833: PUSH
19834: LD_INT 18
19836: EQUAL
19837: IFFALSE 19847
// sLack := true ;
19839: LD_ADDR_EXP 94
19843: PUSH
19844: LD_INT 1
19846: ST_TO_ADDR
// if p3 = 19 then
19847: LD_VAR 0 3
19851: PUSH
19852: LD_INT 19
19854: EQUAL
19855: IFFALSE 19865
// sTank := true ;
19857: LD_ADDR_EXP 96
19861: PUSH
19862: LD_INT 1
19864: ST_TO_ADDR
// if p3 = 20 then
19865: LD_VAR 0 3
19869: PUSH
19870: LD_INT 20
19872: EQUAL
19873: IFFALSE 19883
// sRemote := true ;
19875: LD_ADDR_EXP 97
19879: PUSH
19880: LD_INT 1
19882: ST_TO_ADDR
// if p3 = 21 then
19883: LD_VAR 0 3
19887: PUSH
19888: LD_INT 21
19890: EQUAL
19891: IFFALSE 19901
// sPowell := true ;
19893: LD_ADDR_EXP 98
19897: PUSH
19898: LD_INT 1
19900: ST_TO_ADDR
// if p3 = 22 then
19901: LD_VAR 0 3
19905: PUSH
19906: LD_INT 22
19908: EQUAL
19909: IFFALSE 19919
// sTeleport := true ;
19911: LD_ADDR_EXP 101
19915: PUSH
19916: LD_INT 1
19918: ST_TO_ADDR
// if p3 = 23 then
19919: LD_VAR 0 3
19923: PUSH
19924: LD_INT 23
19926: EQUAL
19927: IFFALSE 19937
// sOilTower := true ;
19929: LD_ADDR_EXP 103
19933: PUSH
19934: LD_INT 1
19936: ST_TO_ADDR
// if p3 = 24 then
19937: LD_VAR 0 3
19941: PUSH
19942: LD_INT 24
19944: EQUAL
19945: IFFALSE 19955
// sShovel := true ;
19947: LD_ADDR_EXP 104
19951: PUSH
19952: LD_INT 1
19954: ST_TO_ADDR
// if p3 = 25 then
19955: LD_VAR 0 3
19959: PUSH
19960: LD_INT 25
19962: EQUAL
19963: IFFALSE 19973
// sSheik := true ;
19965: LD_ADDR_EXP 105
19969: PUSH
19970: LD_INT 1
19972: ST_TO_ADDR
// if p3 = 26 then
19973: LD_VAR 0 3
19977: PUSH
19978: LD_INT 26
19980: EQUAL
19981: IFFALSE 19991
// sEarthquake := true ;
19983: LD_ADDR_EXP 107
19987: PUSH
19988: LD_INT 1
19990: ST_TO_ADDR
// if p3 = 27 then
19991: LD_VAR 0 3
19995: PUSH
19996: LD_INT 27
19998: EQUAL
19999: IFFALSE 20009
// sAI := true ;
20001: LD_ADDR_EXP 108
20005: PUSH
20006: LD_INT 1
20008: ST_TO_ADDR
// if p3 = 28 then
20009: LD_VAR 0 3
20013: PUSH
20014: LD_INT 28
20016: EQUAL
20017: IFFALSE 20027
// sCargo := true ;
20019: LD_ADDR_EXP 111
20023: PUSH
20024: LD_INT 1
20026: ST_TO_ADDR
// if p3 = 29 then
20027: LD_VAR 0 3
20031: PUSH
20032: LD_INT 29
20034: EQUAL
20035: IFFALSE 20045
// sDLaser := true ;
20037: LD_ADDR_EXP 112
20041: PUSH
20042: LD_INT 1
20044: ST_TO_ADDR
// if p3 = 30 then
20045: LD_VAR 0 3
20049: PUSH
20050: LD_INT 30
20052: EQUAL
20053: IFFALSE 20063
// sExchange := true ;
20055: LD_ADDR_EXP 113
20059: PUSH
20060: LD_INT 1
20062: ST_TO_ADDR
// if p3 = 31 then
20063: LD_VAR 0 3
20067: PUSH
20068: LD_INT 31
20070: EQUAL
20071: IFFALSE 20081
// sFac := true ;
20073: LD_ADDR_EXP 114
20077: PUSH
20078: LD_INT 1
20080: ST_TO_ADDR
// if p3 = 32 then
20081: LD_VAR 0 3
20085: PUSH
20086: LD_INT 32
20088: EQUAL
20089: IFFALSE 20099
// sPower := true ;
20091: LD_ADDR_EXP 115
20095: PUSH
20096: LD_INT 1
20098: ST_TO_ADDR
// if p3 = 33 then
20099: LD_VAR 0 3
20103: PUSH
20104: LD_INT 33
20106: EQUAL
20107: IFFALSE 20117
// sRandom := true ;
20109: LD_ADDR_EXP 116
20113: PUSH
20114: LD_INT 1
20116: ST_TO_ADDR
// if p3 = 34 then
20117: LD_VAR 0 3
20121: PUSH
20122: LD_INT 34
20124: EQUAL
20125: IFFALSE 20135
// sShield := true ;
20127: LD_ADDR_EXP 117
20131: PUSH
20132: LD_INT 1
20134: ST_TO_ADDR
// if p3 = 35 then
20135: LD_VAR 0 3
20139: PUSH
20140: LD_INT 35
20142: EQUAL
20143: IFFALSE 20153
// sTime := true ;
20145: LD_ADDR_EXP 118
20149: PUSH
20150: LD_INT 1
20152: ST_TO_ADDR
// if p3 = 36 then
20153: LD_VAR 0 3
20157: PUSH
20158: LD_INT 36
20160: EQUAL
20161: IFFALSE 20171
// sTools := true ;
20163: LD_ADDR_EXP 119
20167: PUSH
20168: LD_INT 1
20170: ST_TO_ADDR
// if p3 = 101 then
20171: LD_VAR 0 3
20175: PUSH
20176: LD_INT 101
20178: EQUAL
20179: IFFALSE 20189
// sSold := true ;
20181: LD_ADDR_EXP 84
20185: PUSH
20186: LD_INT 1
20188: ST_TO_ADDR
// if p3 = 102 then
20189: LD_VAR 0 3
20193: PUSH
20194: LD_INT 102
20196: EQUAL
20197: IFFALSE 20207
// sDiff := true ;
20199: LD_ADDR_EXP 85
20203: PUSH
20204: LD_INT 1
20206: ST_TO_ADDR
// if p3 = 103 then
20207: LD_VAR 0 3
20211: PUSH
20212: LD_INT 103
20214: EQUAL
20215: IFFALSE 20225
// sFog := true ;
20217: LD_ADDR_EXP 88
20221: PUSH
20222: LD_INT 1
20224: ST_TO_ADDR
// if p3 = 104 then
20225: LD_VAR 0 3
20229: PUSH
20230: LD_INT 104
20232: EQUAL
20233: IFFALSE 20243
// sReset := true ;
20235: LD_ADDR_EXP 89
20239: PUSH
20240: LD_INT 1
20242: ST_TO_ADDR
// if p3 = 105 then
20243: LD_VAR 0 3
20247: PUSH
20248: LD_INT 105
20250: EQUAL
20251: IFFALSE 20261
// sSun := true ;
20253: LD_ADDR_EXP 90
20257: PUSH
20258: LD_INT 1
20260: ST_TO_ADDR
// if p3 = 106 then
20261: LD_VAR 0 3
20265: PUSH
20266: LD_INT 106
20268: EQUAL
20269: IFFALSE 20279
// sTiger := true ;
20271: LD_ADDR_EXP 86
20275: PUSH
20276: LD_INT 1
20278: ST_TO_ADDR
// if p3 = 107 then
20279: LD_VAR 0 3
20283: PUSH
20284: LD_INT 107
20286: EQUAL
20287: IFFALSE 20297
// sBomb := true ;
20289: LD_ADDR_EXP 87
20293: PUSH
20294: LD_INT 1
20296: ST_TO_ADDR
// if p3 = 108 then
20297: LD_VAR 0 3
20301: PUSH
20302: LD_INT 108
20304: EQUAL
20305: IFFALSE 20315
// sWound := true ;
20307: LD_ADDR_EXP 95
20311: PUSH
20312: LD_INT 1
20314: ST_TO_ADDR
// if p3 = 109 then
20315: LD_VAR 0 3
20319: PUSH
20320: LD_INT 109
20322: EQUAL
20323: IFFALSE 20333
// sBetray := true ;
20325: LD_ADDR_EXP 99
20329: PUSH
20330: LD_INT 1
20332: ST_TO_ADDR
// if p3 = 110 then
20333: LD_VAR 0 3
20337: PUSH
20338: LD_INT 110
20340: EQUAL
20341: IFFALSE 20351
// sContamin := true ;
20343: LD_ADDR_EXP 100
20347: PUSH
20348: LD_INT 1
20350: ST_TO_ADDR
// if p3 = 111 then
20351: LD_VAR 0 3
20355: PUSH
20356: LD_INT 111
20358: EQUAL
20359: IFFALSE 20369
// sOil := true ;
20361: LD_ADDR_EXP 102
20365: PUSH
20366: LD_INT 1
20368: ST_TO_ADDR
// if p3 = 112 then
20369: LD_VAR 0 3
20373: PUSH
20374: LD_INT 112
20376: EQUAL
20377: IFFALSE 20387
// sStu := true ;
20379: LD_ADDR_EXP 106
20383: PUSH
20384: LD_INT 1
20386: ST_TO_ADDR
// if p3 = 113 then
20387: LD_VAR 0 3
20391: PUSH
20392: LD_INT 113
20394: EQUAL
20395: IFFALSE 20405
// sBazooka := true ;
20397: LD_ADDR_EXP 109
20401: PUSH
20402: LD_INT 1
20404: ST_TO_ADDR
// if p3 = 114 then
20405: LD_VAR 0 3
20409: PUSH
20410: LD_INT 114
20412: EQUAL
20413: IFFALSE 20423
// sMortar := true ;
20415: LD_ADDR_EXP 110
20419: PUSH
20420: LD_INT 1
20422: ST_TO_ADDR
// if p3 = 115 then
20423: LD_VAR 0 3
20427: PUSH
20428: LD_INT 115
20430: EQUAL
20431: IFFALSE 20441
// sRanger := true ;
20433: LD_ADDR_EXP 120
20437: PUSH
20438: LD_INT 1
20440: ST_TO_ADDR
// end ; if p2 = 101 then
20441: LD_VAR 0 2
20445: PUSH
20446: LD_INT 101
20448: EQUAL
20449: IFFALSE 20577
// begin case p3 of 1 :
20451: LD_VAR 0 3
20455: PUSH
20456: LD_INT 1
20458: DOUBLE
20459: EQUAL
20460: IFTRUE 20464
20462: GO 20471
20464: POP
// hHackUnlimitedResources ; 2 :
20465: CALL 31614 0 0
20469: GO 20577
20471: LD_INT 2
20473: DOUBLE
20474: EQUAL
20475: IFTRUE 20479
20477: GO 20486
20479: POP
// hHackSetLevel10 ; 3 :
20480: CALL 31747 0 0
20484: GO 20577
20486: LD_INT 3
20488: DOUBLE
20489: EQUAL
20490: IFTRUE 20494
20492: GO 20501
20494: POP
// hHackSetLevel10YourUnits ; 4 :
20495: CALL 31832 0 0
20499: GO 20577
20501: LD_INT 4
20503: DOUBLE
20504: EQUAL
20505: IFTRUE 20509
20507: GO 20516
20509: POP
// hHackInvincible ; 5 :
20510: CALL 32280 0 0
20514: GO 20577
20516: LD_INT 5
20518: DOUBLE
20519: EQUAL
20520: IFTRUE 20524
20522: GO 20531
20524: POP
// hHackInvisible ; 6 :
20525: CALL 32391 0 0
20529: GO 20577
20531: LD_INT 6
20533: DOUBLE
20534: EQUAL
20535: IFTRUE 20539
20537: GO 20546
20539: POP
// hHackChangeYourSide ; 7 :
20540: CALL 32448 0 0
20544: GO 20577
20546: LD_INT 7
20548: DOUBLE
20549: EQUAL
20550: IFTRUE 20554
20552: GO 20561
20554: POP
// hHackChangeUnitSide ; 8 :
20555: CALL 32490 0 0
20559: GO 20577
20561: LD_INT 8
20563: DOUBLE
20564: EQUAL
20565: IFTRUE 20569
20567: GO 20576
20569: POP
// hHackFog ; end ;
20570: CALL 32591 0 0
20574: GO 20577
20576: POP
// end ; end ;
20577: LD_VAR 0 7
20581: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20582: GO 20584
20584: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20585: LD_STRING initStreamRollete();
20587: PPUSH
20588: CALL_OW 559
// InitStreamMode ;
20592: CALL 20601 0 0
// DefineStreamItems ( ) ;
20596: CALL 21041 0 0
// end ;
20600: END
// function InitStreamMode ; begin
20601: LD_INT 0
20603: PPUSH
// streamModeActive := false ;
20604: LD_ADDR_EXP 67
20608: PUSH
20609: LD_INT 0
20611: ST_TO_ADDR
// normalCounter := 36 ;
20612: LD_ADDR_EXP 68
20616: PUSH
20617: LD_INT 36
20619: ST_TO_ADDR
// hardcoreCounter := 16 ;
20620: LD_ADDR_EXP 69
20624: PUSH
20625: LD_INT 16
20627: ST_TO_ADDR
// sRocket := false ;
20628: LD_ADDR_EXP 72
20632: PUSH
20633: LD_INT 0
20635: ST_TO_ADDR
// sSpeed := false ;
20636: LD_ADDR_EXP 71
20640: PUSH
20641: LD_INT 0
20643: ST_TO_ADDR
// sEngine := false ;
20644: LD_ADDR_EXP 73
20648: PUSH
20649: LD_INT 0
20651: ST_TO_ADDR
// sSpec := false ;
20652: LD_ADDR_EXP 70
20656: PUSH
20657: LD_INT 0
20659: ST_TO_ADDR
// sLevel := false ;
20660: LD_ADDR_EXP 74
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// sArmoury := false ;
20668: LD_ADDR_EXP 75
20672: PUSH
20673: LD_INT 0
20675: ST_TO_ADDR
// sRadar := false ;
20676: LD_ADDR_EXP 76
20680: PUSH
20681: LD_INT 0
20683: ST_TO_ADDR
// sBunker := false ;
20684: LD_ADDR_EXP 77
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// sHack := false ;
20692: LD_ADDR_EXP 78
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// sFire := false ;
20700: LD_ADDR_EXP 79
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// sRefresh := false ;
20708: LD_ADDR_EXP 80
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
// sExp := false ;
20716: LD_ADDR_EXP 81
20720: PUSH
20721: LD_INT 0
20723: ST_TO_ADDR
// sDepot := false ;
20724: LD_ADDR_EXP 82
20728: PUSH
20729: LD_INT 0
20731: ST_TO_ADDR
// sFlag := false ;
20732: LD_ADDR_EXP 83
20736: PUSH
20737: LD_INT 0
20739: ST_TO_ADDR
// sKamikadze := false ;
20740: LD_ADDR_EXP 91
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// sTroll := false ;
20748: LD_ADDR_EXP 92
20752: PUSH
20753: LD_INT 0
20755: ST_TO_ADDR
// sSlow := false ;
20756: LD_ADDR_EXP 93
20760: PUSH
20761: LD_INT 0
20763: ST_TO_ADDR
// sLack := false ;
20764: LD_ADDR_EXP 94
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
// sTank := false ;
20772: LD_ADDR_EXP 96
20776: PUSH
20777: LD_INT 0
20779: ST_TO_ADDR
// sRemote := false ;
20780: LD_ADDR_EXP 97
20784: PUSH
20785: LD_INT 0
20787: ST_TO_ADDR
// sPowell := false ;
20788: LD_ADDR_EXP 98
20792: PUSH
20793: LD_INT 0
20795: ST_TO_ADDR
// sTeleport := false ;
20796: LD_ADDR_EXP 101
20800: PUSH
20801: LD_INT 0
20803: ST_TO_ADDR
// sOilTower := false ;
20804: LD_ADDR_EXP 103
20808: PUSH
20809: LD_INT 0
20811: ST_TO_ADDR
// sShovel := false ;
20812: LD_ADDR_EXP 104
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// sSheik := false ;
20820: LD_ADDR_EXP 105
20824: PUSH
20825: LD_INT 0
20827: ST_TO_ADDR
// sEarthquake := false ;
20828: LD_ADDR_EXP 107
20832: PUSH
20833: LD_INT 0
20835: ST_TO_ADDR
// sAI := false ;
20836: LD_ADDR_EXP 108
20840: PUSH
20841: LD_INT 0
20843: ST_TO_ADDR
// sCargo := false ;
20844: LD_ADDR_EXP 111
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
// sDLaser := false ;
20852: LD_ADDR_EXP 112
20856: PUSH
20857: LD_INT 0
20859: ST_TO_ADDR
// sExchange := false ;
20860: LD_ADDR_EXP 113
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// sFac := false ;
20868: LD_ADDR_EXP 114
20872: PUSH
20873: LD_INT 0
20875: ST_TO_ADDR
// sPower := false ;
20876: LD_ADDR_EXP 115
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// sRandom := false ;
20884: LD_ADDR_EXP 116
20888: PUSH
20889: LD_INT 0
20891: ST_TO_ADDR
// sShield := false ;
20892: LD_ADDR_EXP 117
20896: PUSH
20897: LD_INT 0
20899: ST_TO_ADDR
// sTime := false ;
20900: LD_ADDR_EXP 118
20904: PUSH
20905: LD_INT 0
20907: ST_TO_ADDR
// sTools := false ;
20908: LD_ADDR_EXP 119
20912: PUSH
20913: LD_INT 0
20915: ST_TO_ADDR
// sSold := false ;
20916: LD_ADDR_EXP 84
20920: PUSH
20921: LD_INT 0
20923: ST_TO_ADDR
// sDiff := false ;
20924: LD_ADDR_EXP 85
20928: PUSH
20929: LD_INT 0
20931: ST_TO_ADDR
// sFog := false ;
20932: LD_ADDR_EXP 88
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// sReset := false ;
20940: LD_ADDR_EXP 89
20944: PUSH
20945: LD_INT 0
20947: ST_TO_ADDR
// sSun := false ;
20948: LD_ADDR_EXP 90
20952: PUSH
20953: LD_INT 0
20955: ST_TO_ADDR
// sTiger := false ;
20956: LD_ADDR_EXP 86
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// sBomb := false ;
20964: LD_ADDR_EXP 87
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// sWound := false ;
20972: LD_ADDR_EXP 95
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
// sBetray := false ;
20980: LD_ADDR_EXP 99
20984: PUSH
20985: LD_INT 0
20987: ST_TO_ADDR
// sContamin := false ;
20988: LD_ADDR_EXP 100
20992: PUSH
20993: LD_INT 0
20995: ST_TO_ADDR
// sOil := false ;
20996: LD_ADDR_EXP 102
21000: PUSH
21001: LD_INT 0
21003: ST_TO_ADDR
// sStu := false ;
21004: LD_ADDR_EXP 106
21008: PUSH
21009: LD_INT 0
21011: ST_TO_ADDR
// sBazooka := false ;
21012: LD_ADDR_EXP 109
21016: PUSH
21017: LD_INT 0
21019: ST_TO_ADDR
// sMortar := false ;
21020: LD_ADDR_EXP 110
21024: PUSH
21025: LD_INT 0
21027: ST_TO_ADDR
// sRanger := false ;
21028: LD_ADDR_EXP 120
21032: PUSH
21033: LD_INT 0
21035: ST_TO_ADDR
// end ;
21036: LD_VAR 0 1
21040: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21041: LD_INT 0
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
21047: PPUSH
// result := [ ] ;
21048: LD_ADDR_VAR 0 1
21052: PUSH
21053: EMPTY
21054: ST_TO_ADDR
// if campaign_id = 1 then
21055: LD_OWVAR 69
21059: PUSH
21060: LD_INT 1
21062: EQUAL
21063: IFFALSE 24001
// begin case mission_number of 1 :
21065: LD_OWVAR 70
21069: PUSH
21070: LD_INT 1
21072: DOUBLE
21073: EQUAL
21074: IFTRUE 21078
21076: GO 21142
21078: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21079: LD_ADDR_VAR 0 1
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: LD_INT 4
21089: PUSH
21090: LD_INT 11
21092: PUSH
21093: LD_INT 12
21095: PUSH
21096: LD_INT 15
21098: PUSH
21099: LD_INT 16
21101: PUSH
21102: LD_INT 22
21104: PUSH
21105: LD_INT 23
21107: PUSH
21108: LD_INT 26
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 101
21124: PUSH
21125: LD_INT 102
21127: PUSH
21128: LD_INT 106
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: ST_TO_ADDR
21140: GO 23999
21142: LD_INT 2
21144: DOUBLE
21145: EQUAL
21146: IFTRUE 21150
21148: GO 21222
21150: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21151: LD_ADDR_VAR 0 1
21155: PUSH
21156: LD_INT 2
21158: PUSH
21159: LD_INT 4
21161: PUSH
21162: LD_INT 11
21164: PUSH
21165: LD_INT 12
21167: PUSH
21168: LD_INT 15
21170: PUSH
21171: LD_INT 16
21173: PUSH
21174: LD_INT 22
21176: PUSH
21177: LD_INT 23
21179: PUSH
21180: LD_INT 26
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 101
21196: PUSH
21197: LD_INT 102
21199: PUSH
21200: LD_INT 105
21202: PUSH
21203: LD_INT 106
21205: PUSH
21206: LD_INT 108
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: ST_TO_ADDR
21220: GO 23999
21222: LD_INT 3
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21306
21230: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21231: LD_ADDR_VAR 0 1
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: LD_INT 4
21241: PUSH
21242: LD_INT 5
21244: PUSH
21245: LD_INT 11
21247: PUSH
21248: LD_INT 12
21250: PUSH
21251: LD_INT 15
21253: PUSH
21254: LD_INT 16
21256: PUSH
21257: LD_INT 22
21259: PUSH
21260: LD_INT 26
21262: PUSH
21263: LD_INT 36
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 101
21280: PUSH
21281: LD_INT 102
21283: PUSH
21284: LD_INT 105
21286: PUSH
21287: LD_INT 106
21289: PUSH
21290: LD_INT 108
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: ST_TO_ADDR
21304: GO 23999
21306: LD_INT 4
21308: DOUBLE
21309: EQUAL
21310: IFTRUE 21314
21312: GO 21398
21314: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21315: LD_ADDR_VAR 0 1
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: LD_INT 4
21325: PUSH
21326: LD_INT 5
21328: PUSH
21329: LD_INT 8
21331: PUSH
21332: LD_INT 11
21334: PUSH
21335: LD_INT 12
21337: PUSH
21338: LD_INT 15
21340: PUSH
21341: LD_INT 16
21343: PUSH
21344: LD_INT 22
21346: PUSH
21347: LD_INT 23
21349: PUSH
21350: LD_INT 26
21352: PUSH
21353: LD_INT 36
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 101
21372: PUSH
21373: LD_INT 102
21375: PUSH
21376: LD_INT 105
21378: PUSH
21379: LD_INT 106
21381: PUSH
21382: LD_INT 108
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: ST_TO_ADDR
21396: GO 23999
21398: LD_INT 5
21400: DOUBLE
21401: EQUAL
21402: IFTRUE 21406
21404: GO 21506
21406: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21407: LD_ADDR_VAR 0 1
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: LD_INT 4
21417: PUSH
21418: LD_INT 5
21420: PUSH
21421: LD_INT 6
21423: PUSH
21424: LD_INT 8
21426: PUSH
21427: LD_INT 11
21429: PUSH
21430: LD_INT 12
21432: PUSH
21433: LD_INT 15
21435: PUSH
21436: LD_INT 16
21438: PUSH
21439: LD_INT 22
21441: PUSH
21442: LD_INT 23
21444: PUSH
21445: LD_INT 25
21447: PUSH
21448: LD_INT 26
21450: PUSH
21451: LD_INT 36
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 101
21472: PUSH
21473: LD_INT 102
21475: PUSH
21476: LD_INT 105
21478: PUSH
21479: LD_INT 106
21481: PUSH
21482: LD_INT 108
21484: PUSH
21485: LD_INT 109
21487: PUSH
21488: LD_INT 112
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: ST_TO_ADDR
21504: GO 23999
21506: LD_INT 6
21508: DOUBLE
21509: EQUAL
21510: IFTRUE 21514
21512: GO 21634
21514: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21515: LD_ADDR_VAR 0 1
21519: PUSH
21520: LD_INT 2
21522: PUSH
21523: LD_INT 4
21525: PUSH
21526: LD_INT 5
21528: PUSH
21529: LD_INT 6
21531: PUSH
21532: LD_INT 8
21534: PUSH
21535: LD_INT 11
21537: PUSH
21538: LD_INT 12
21540: PUSH
21541: LD_INT 15
21543: PUSH
21544: LD_INT 16
21546: PUSH
21547: LD_INT 20
21549: PUSH
21550: LD_INT 21
21552: PUSH
21553: LD_INT 22
21555: PUSH
21556: LD_INT 23
21558: PUSH
21559: LD_INT 25
21561: PUSH
21562: LD_INT 26
21564: PUSH
21565: LD_INT 30
21567: PUSH
21568: LD_INT 31
21570: PUSH
21571: LD_INT 32
21573: PUSH
21574: LD_INT 36
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 101
21600: PUSH
21601: LD_INT 102
21603: PUSH
21604: LD_INT 105
21606: PUSH
21607: LD_INT 106
21609: PUSH
21610: LD_INT 108
21612: PUSH
21613: LD_INT 109
21615: PUSH
21616: LD_INT 112
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: ST_TO_ADDR
21632: GO 23999
21634: LD_INT 7
21636: DOUBLE
21637: EQUAL
21638: IFTRUE 21642
21640: GO 21742
21642: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21643: LD_ADDR_VAR 0 1
21647: PUSH
21648: LD_INT 2
21650: PUSH
21651: LD_INT 4
21653: PUSH
21654: LD_INT 5
21656: PUSH
21657: LD_INT 7
21659: PUSH
21660: LD_INT 11
21662: PUSH
21663: LD_INT 12
21665: PUSH
21666: LD_INT 15
21668: PUSH
21669: LD_INT 16
21671: PUSH
21672: LD_INT 20
21674: PUSH
21675: LD_INT 21
21677: PUSH
21678: LD_INT 22
21680: PUSH
21681: LD_INT 23
21683: PUSH
21684: LD_INT 25
21686: PUSH
21687: LD_INT 26
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 101
21708: PUSH
21709: LD_INT 102
21711: PUSH
21712: LD_INT 103
21714: PUSH
21715: LD_INT 105
21717: PUSH
21718: LD_INT 106
21720: PUSH
21721: LD_INT 108
21723: PUSH
21724: LD_INT 112
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: ST_TO_ADDR
21740: GO 23999
21742: LD_INT 8
21744: DOUBLE
21745: EQUAL
21746: IFTRUE 21750
21748: GO 21878
21750: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21751: LD_ADDR_VAR 0 1
21755: PUSH
21756: LD_INT 2
21758: PUSH
21759: LD_INT 4
21761: PUSH
21762: LD_INT 5
21764: PUSH
21765: LD_INT 6
21767: PUSH
21768: LD_INT 7
21770: PUSH
21771: LD_INT 8
21773: PUSH
21774: LD_INT 11
21776: PUSH
21777: LD_INT 12
21779: PUSH
21780: LD_INT 15
21782: PUSH
21783: LD_INT 16
21785: PUSH
21786: LD_INT 20
21788: PUSH
21789: LD_INT 21
21791: PUSH
21792: LD_INT 22
21794: PUSH
21795: LD_INT 23
21797: PUSH
21798: LD_INT 25
21800: PUSH
21801: LD_INT 26
21803: PUSH
21804: LD_INT 30
21806: PUSH
21807: LD_INT 31
21809: PUSH
21810: LD_INT 32
21812: PUSH
21813: LD_INT 36
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 101
21840: PUSH
21841: LD_INT 102
21843: PUSH
21844: LD_INT 103
21846: PUSH
21847: LD_INT 105
21849: PUSH
21850: LD_INT 106
21852: PUSH
21853: LD_INT 108
21855: PUSH
21856: LD_INT 109
21858: PUSH
21859: LD_INT 112
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: ST_TO_ADDR
21876: GO 23999
21878: LD_INT 9
21880: DOUBLE
21881: EQUAL
21882: IFTRUE 21886
21884: GO 22022
21886: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21887: LD_ADDR_VAR 0 1
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: LD_INT 4
21897: PUSH
21898: LD_INT 5
21900: PUSH
21901: LD_INT 6
21903: PUSH
21904: LD_INT 7
21906: PUSH
21907: LD_INT 8
21909: PUSH
21910: LD_INT 11
21912: PUSH
21913: LD_INT 12
21915: PUSH
21916: LD_INT 15
21918: PUSH
21919: LD_INT 16
21921: PUSH
21922: LD_INT 20
21924: PUSH
21925: LD_INT 21
21927: PUSH
21928: LD_INT 22
21930: PUSH
21931: LD_INT 23
21933: PUSH
21934: LD_INT 25
21936: PUSH
21937: LD_INT 26
21939: PUSH
21940: LD_INT 28
21942: PUSH
21943: LD_INT 30
21945: PUSH
21946: LD_INT 31
21948: PUSH
21949: LD_INT 32
21951: PUSH
21952: LD_INT 36
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 101
21980: PUSH
21981: LD_INT 102
21983: PUSH
21984: LD_INT 103
21986: PUSH
21987: LD_INT 105
21989: PUSH
21990: LD_INT 106
21992: PUSH
21993: LD_INT 108
21995: PUSH
21996: LD_INT 109
21998: PUSH
21999: LD_INT 112
22001: PUSH
22002: LD_INT 114
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: ST_TO_ADDR
22020: GO 23999
22022: LD_INT 10
22024: DOUBLE
22025: EQUAL
22026: IFTRUE 22030
22028: GO 22214
22030: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22031: LD_ADDR_VAR 0 1
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: LD_INT 4
22041: PUSH
22042: LD_INT 5
22044: PUSH
22045: LD_INT 6
22047: PUSH
22048: LD_INT 7
22050: PUSH
22051: LD_INT 8
22053: PUSH
22054: LD_INT 9
22056: PUSH
22057: LD_INT 10
22059: PUSH
22060: LD_INT 11
22062: PUSH
22063: LD_INT 12
22065: PUSH
22066: LD_INT 13
22068: PUSH
22069: LD_INT 14
22071: PUSH
22072: LD_INT 15
22074: PUSH
22075: LD_INT 16
22077: PUSH
22078: LD_INT 17
22080: PUSH
22081: LD_INT 18
22083: PUSH
22084: LD_INT 19
22086: PUSH
22087: LD_INT 20
22089: PUSH
22090: LD_INT 21
22092: PUSH
22093: LD_INT 22
22095: PUSH
22096: LD_INT 23
22098: PUSH
22099: LD_INT 24
22101: PUSH
22102: LD_INT 25
22104: PUSH
22105: LD_INT 26
22107: PUSH
22108: LD_INT 28
22110: PUSH
22111: LD_INT 30
22113: PUSH
22114: LD_INT 31
22116: PUSH
22117: LD_INT 32
22119: PUSH
22120: LD_INT 36
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 101
22156: PUSH
22157: LD_INT 102
22159: PUSH
22160: LD_INT 103
22162: PUSH
22163: LD_INT 104
22165: PUSH
22166: LD_INT 105
22168: PUSH
22169: LD_INT 106
22171: PUSH
22172: LD_INT 107
22174: PUSH
22175: LD_INT 108
22177: PUSH
22178: LD_INT 109
22180: PUSH
22181: LD_INT 110
22183: PUSH
22184: LD_INT 111
22186: PUSH
22187: LD_INT 112
22189: PUSH
22190: LD_INT 114
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: ST_TO_ADDR
22212: GO 23999
22214: LD_INT 11
22216: DOUBLE
22217: EQUAL
22218: IFTRUE 22222
22220: GO 22414
22222: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22223: LD_ADDR_VAR 0 1
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: LD_INT 3
22233: PUSH
22234: LD_INT 4
22236: PUSH
22237: LD_INT 5
22239: PUSH
22240: LD_INT 6
22242: PUSH
22243: LD_INT 7
22245: PUSH
22246: LD_INT 8
22248: PUSH
22249: LD_INT 9
22251: PUSH
22252: LD_INT 10
22254: PUSH
22255: LD_INT 11
22257: PUSH
22258: LD_INT 12
22260: PUSH
22261: LD_INT 13
22263: PUSH
22264: LD_INT 14
22266: PUSH
22267: LD_INT 15
22269: PUSH
22270: LD_INT 16
22272: PUSH
22273: LD_INT 17
22275: PUSH
22276: LD_INT 18
22278: PUSH
22279: LD_INT 19
22281: PUSH
22282: LD_INT 20
22284: PUSH
22285: LD_INT 21
22287: PUSH
22288: LD_INT 22
22290: PUSH
22291: LD_INT 23
22293: PUSH
22294: LD_INT 24
22296: PUSH
22297: LD_INT 25
22299: PUSH
22300: LD_INT 26
22302: PUSH
22303: LD_INT 28
22305: PUSH
22306: LD_INT 30
22308: PUSH
22309: LD_INT 31
22311: PUSH
22312: LD_INT 32
22314: PUSH
22315: LD_INT 34
22317: PUSH
22318: LD_INT 36
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 101
22356: PUSH
22357: LD_INT 102
22359: PUSH
22360: LD_INT 103
22362: PUSH
22363: LD_INT 104
22365: PUSH
22366: LD_INT 105
22368: PUSH
22369: LD_INT 106
22371: PUSH
22372: LD_INT 107
22374: PUSH
22375: LD_INT 108
22377: PUSH
22378: LD_INT 109
22380: PUSH
22381: LD_INT 110
22383: PUSH
22384: LD_INT 111
22386: PUSH
22387: LD_INT 112
22389: PUSH
22390: LD_INT 114
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: ST_TO_ADDR
22412: GO 23999
22414: LD_INT 12
22416: DOUBLE
22417: EQUAL
22418: IFTRUE 22422
22420: GO 22630
22422: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22423: LD_ADDR_VAR 0 1
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: LD_INT 2
22433: PUSH
22434: LD_INT 3
22436: PUSH
22437: LD_INT 4
22439: PUSH
22440: LD_INT 5
22442: PUSH
22443: LD_INT 6
22445: PUSH
22446: LD_INT 7
22448: PUSH
22449: LD_INT 8
22451: PUSH
22452: LD_INT 9
22454: PUSH
22455: LD_INT 10
22457: PUSH
22458: LD_INT 11
22460: PUSH
22461: LD_INT 12
22463: PUSH
22464: LD_INT 13
22466: PUSH
22467: LD_INT 14
22469: PUSH
22470: LD_INT 15
22472: PUSH
22473: LD_INT 16
22475: PUSH
22476: LD_INT 17
22478: PUSH
22479: LD_INT 18
22481: PUSH
22482: LD_INT 19
22484: PUSH
22485: LD_INT 20
22487: PUSH
22488: LD_INT 21
22490: PUSH
22491: LD_INT 22
22493: PUSH
22494: LD_INT 23
22496: PUSH
22497: LD_INT 24
22499: PUSH
22500: LD_INT 25
22502: PUSH
22503: LD_INT 26
22505: PUSH
22506: LD_INT 27
22508: PUSH
22509: LD_INT 28
22511: PUSH
22512: LD_INT 30
22514: PUSH
22515: LD_INT 31
22517: PUSH
22518: LD_INT 32
22520: PUSH
22521: LD_INT 33
22523: PUSH
22524: LD_INT 34
22526: PUSH
22527: LD_INT 36
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 101
22568: PUSH
22569: LD_INT 102
22571: PUSH
22572: LD_INT 103
22574: PUSH
22575: LD_INT 104
22577: PUSH
22578: LD_INT 105
22580: PUSH
22581: LD_INT 106
22583: PUSH
22584: LD_INT 107
22586: PUSH
22587: LD_INT 108
22589: PUSH
22590: LD_INT 109
22592: PUSH
22593: LD_INT 110
22595: PUSH
22596: LD_INT 111
22598: PUSH
22599: LD_INT 112
22601: PUSH
22602: LD_INT 113
22604: PUSH
22605: LD_INT 114
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: ST_TO_ADDR
22628: GO 23999
22630: LD_INT 13
22632: DOUBLE
22633: EQUAL
22634: IFTRUE 22638
22636: GO 22834
22638: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22639: LD_ADDR_VAR 0 1
22643: PUSH
22644: LD_INT 1
22646: PUSH
22647: LD_INT 2
22649: PUSH
22650: LD_INT 3
22652: PUSH
22653: LD_INT 4
22655: PUSH
22656: LD_INT 5
22658: PUSH
22659: LD_INT 8
22661: PUSH
22662: LD_INT 9
22664: PUSH
22665: LD_INT 10
22667: PUSH
22668: LD_INT 11
22670: PUSH
22671: LD_INT 12
22673: PUSH
22674: LD_INT 14
22676: PUSH
22677: LD_INT 15
22679: PUSH
22680: LD_INT 16
22682: PUSH
22683: LD_INT 17
22685: PUSH
22686: LD_INT 18
22688: PUSH
22689: LD_INT 19
22691: PUSH
22692: LD_INT 20
22694: PUSH
22695: LD_INT 21
22697: PUSH
22698: LD_INT 22
22700: PUSH
22701: LD_INT 23
22703: PUSH
22704: LD_INT 24
22706: PUSH
22707: LD_INT 25
22709: PUSH
22710: LD_INT 26
22712: PUSH
22713: LD_INT 27
22715: PUSH
22716: LD_INT 28
22718: PUSH
22719: LD_INT 30
22721: PUSH
22722: LD_INT 31
22724: PUSH
22725: LD_INT 32
22727: PUSH
22728: LD_INT 33
22730: PUSH
22731: LD_INT 34
22733: PUSH
22734: LD_INT 36
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 101
22772: PUSH
22773: LD_INT 102
22775: PUSH
22776: LD_INT 103
22778: PUSH
22779: LD_INT 104
22781: PUSH
22782: LD_INT 105
22784: PUSH
22785: LD_INT 106
22787: PUSH
22788: LD_INT 107
22790: PUSH
22791: LD_INT 108
22793: PUSH
22794: LD_INT 109
22796: PUSH
22797: LD_INT 110
22799: PUSH
22800: LD_INT 111
22802: PUSH
22803: LD_INT 112
22805: PUSH
22806: LD_INT 113
22808: PUSH
22809: LD_INT 114
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: ST_TO_ADDR
22832: GO 23999
22834: LD_INT 14
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 23054
22842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22843: LD_ADDR_VAR 0 1
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: LD_INT 2
22853: PUSH
22854: LD_INT 3
22856: PUSH
22857: LD_INT 4
22859: PUSH
22860: LD_INT 5
22862: PUSH
22863: LD_INT 6
22865: PUSH
22866: LD_INT 7
22868: PUSH
22869: LD_INT 8
22871: PUSH
22872: LD_INT 9
22874: PUSH
22875: LD_INT 10
22877: PUSH
22878: LD_INT 11
22880: PUSH
22881: LD_INT 12
22883: PUSH
22884: LD_INT 13
22886: PUSH
22887: LD_INT 14
22889: PUSH
22890: LD_INT 15
22892: PUSH
22893: LD_INT 16
22895: PUSH
22896: LD_INT 17
22898: PUSH
22899: LD_INT 18
22901: PUSH
22902: LD_INT 19
22904: PUSH
22905: LD_INT 20
22907: PUSH
22908: LD_INT 21
22910: PUSH
22911: LD_INT 22
22913: PUSH
22914: LD_INT 23
22916: PUSH
22917: LD_INT 24
22919: PUSH
22920: LD_INT 25
22922: PUSH
22923: LD_INT 26
22925: PUSH
22926: LD_INT 27
22928: PUSH
22929: LD_INT 28
22931: PUSH
22932: LD_INT 29
22934: PUSH
22935: LD_INT 30
22937: PUSH
22938: LD_INT 31
22940: PUSH
22941: LD_INT 32
22943: PUSH
22944: LD_INT 33
22946: PUSH
22947: LD_INT 34
22949: PUSH
22950: LD_INT 36
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 101
22992: PUSH
22993: LD_INT 102
22995: PUSH
22996: LD_INT 103
22998: PUSH
22999: LD_INT 104
23001: PUSH
23002: LD_INT 105
23004: PUSH
23005: LD_INT 106
23007: PUSH
23008: LD_INT 107
23010: PUSH
23011: LD_INT 108
23013: PUSH
23014: LD_INT 109
23016: PUSH
23017: LD_INT 110
23019: PUSH
23020: LD_INT 111
23022: PUSH
23023: LD_INT 112
23025: PUSH
23026: LD_INT 113
23028: PUSH
23029: LD_INT 114
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: ST_TO_ADDR
23052: GO 23999
23054: LD_INT 15
23056: DOUBLE
23057: EQUAL
23058: IFTRUE 23062
23060: GO 23274
23062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23063: LD_ADDR_VAR 0 1
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: LD_INT 2
23073: PUSH
23074: LD_INT 3
23076: PUSH
23077: LD_INT 4
23079: PUSH
23080: LD_INT 5
23082: PUSH
23083: LD_INT 6
23085: PUSH
23086: LD_INT 7
23088: PUSH
23089: LD_INT 8
23091: PUSH
23092: LD_INT 9
23094: PUSH
23095: LD_INT 10
23097: PUSH
23098: LD_INT 11
23100: PUSH
23101: LD_INT 12
23103: PUSH
23104: LD_INT 13
23106: PUSH
23107: LD_INT 14
23109: PUSH
23110: LD_INT 15
23112: PUSH
23113: LD_INT 16
23115: PUSH
23116: LD_INT 17
23118: PUSH
23119: LD_INT 18
23121: PUSH
23122: LD_INT 19
23124: PUSH
23125: LD_INT 20
23127: PUSH
23128: LD_INT 21
23130: PUSH
23131: LD_INT 22
23133: PUSH
23134: LD_INT 23
23136: PUSH
23137: LD_INT 24
23139: PUSH
23140: LD_INT 25
23142: PUSH
23143: LD_INT 26
23145: PUSH
23146: LD_INT 27
23148: PUSH
23149: LD_INT 28
23151: PUSH
23152: LD_INT 29
23154: PUSH
23155: LD_INT 30
23157: PUSH
23158: LD_INT 31
23160: PUSH
23161: LD_INT 32
23163: PUSH
23164: LD_INT 33
23166: PUSH
23167: LD_INT 34
23169: PUSH
23170: LD_INT 36
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 101
23212: PUSH
23213: LD_INT 102
23215: PUSH
23216: LD_INT 103
23218: PUSH
23219: LD_INT 104
23221: PUSH
23222: LD_INT 105
23224: PUSH
23225: LD_INT 106
23227: PUSH
23228: LD_INT 107
23230: PUSH
23231: LD_INT 108
23233: PUSH
23234: LD_INT 109
23236: PUSH
23237: LD_INT 110
23239: PUSH
23240: LD_INT 111
23242: PUSH
23243: LD_INT 112
23245: PUSH
23246: LD_INT 113
23248: PUSH
23249: LD_INT 114
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: ST_TO_ADDR
23272: GO 23999
23274: LD_INT 16
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 23406
23282: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23283: LD_ADDR_VAR 0 1
23287: PUSH
23288: LD_INT 2
23290: PUSH
23291: LD_INT 4
23293: PUSH
23294: LD_INT 5
23296: PUSH
23297: LD_INT 7
23299: PUSH
23300: LD_INT 11
23302: PUSH
23303: LD_INT 12
23305: PUSH
23306: LD_INT 15
23308: PUSH
23309: LD_INT 16
23311: PUSH
23312: LD_INT 20
23314: PUSH
23315: LD_INT 21
23317: PUSH
23318: LD_INT 22
23320: PUSH
23321: LD_INT 23
23323: PUSH
23324: LD_INT 25
23326: PUSH
23327: LD_INT 26
23329: PUSH
23330: LD_INT 30
23332: PUSH
23333: LD_INT 31
23335: PUSH
23336: LD_INT 32
23338: PUSH
23339: LD_INT 33
23341: PUSH
23342: LD_INT 34
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 101
23368: PUSH
23369: LD_INT 102
23371: PUSH
23372: LD_INT 103
23374: PUSH
23375: LD_INT 106
23377: PUSH
23378: LD_INT 108
23380: PUSH
23381: LD_INT 112
23383: PUSH
23384: LD_INT 113
23386: PUSH
23387: LD_INT 114
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: ST_TO_ADDR
23404: GO 23999
23406: LD_INT 17
23408: DOUBLE
23409: EQUAL
23410: IFTRUE 23414
23412: GO 23626
23414: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23415: LD_ADDR_VAR 0 1
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: LD_INT 2
23425: PUSH
23426: LD_INT 3
23428: PUSH
23429: LD_INT 4
23431: PUSH
23432: LD_INT 5
23434: PUSH
23435: LD_INT 6
23437: PUSH
23438: LD_INT 7
23440: PUSH
23441: LD_INT 8
23443: PUSH
23444: LD_INT 9
23446: PUSH
23447: LD_INT 10
23449: PUSH
23450: LD_INT 11
23452: PUSH
23453: LD_INT 12
23455: PUSH
23456: LD_INT 13
23458: PUSH
23459: LD_INT 14
23461: PUSH
23462: LD_INT 15
23464: PUSH
23465: LD_INT 16
23467: PUSH
23468: LD_INT 17
23470: PUSH
23471: LD_INT 18
23473: PUSH
23474: LD_INT 19
23476: PUSH
23477: LD_INT 20
23479: PUSH
23480: LD_INT 21
23482: PUSH
23483: LD_INT 22
23485: PUSH
23486: LD_INT 23
23488: PUSH
23489: LD_INT 24
23491: PUSH
23492: LD_INT 25
23494: PUSH
23495: LD_INT 26
23497: PUSH
23498: LD_INT 27
23500: PUSH
23501: LD_INT 28
23503: PUSH
23504: LD_INT 29
23506: PUSH
23507: LD_INT 30
23509: PUSH
23510: LD_INT 31
23512: PUSH
23513: LD_INT 32
23515: PUSH
23516: LD_INT 33
23518: PUSH
23519: LD_INT 34
23521: PUSH
23522: LD_INT 36
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 101
23564: PUSH
23565: LD_INT 102
23567: PUSH
23568: LD_INT 103
23570: PUSH
23571: LD_INT 104
23573: PUSH
23574: LD_INT 105
23576: PUSH
23577: LD_INT 106
23579: PUSH
23580: LD_INT 107
23582: PUSH
23583: LD_INT 108
23585: PUSH
23586: LD_INT 109
23588: PUSH
23589: LD_INT 110
23591: PUSH
23592: LD_INT 111
23594: PUSH
23595: LD_INT 112
23597: PUSH
23598: LD_INT 113
23600: PUSH
23601: LD_INT 114
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: ST_TO_ADDR
23624: GO 23999
23626: LD_INT 18
23628: DOUBLE
23629: EQUAL
23630: IFTRUE 23634
23632: GO 23770
23634: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23635: LD_ADDR_VAR 0 1
23639: PUSH
23640: LD_INT 2
23642: PUSH
23643: LD_INT 4
23645: PUSH
23646: LD_INT 5
23648: PUSH
23649: LD_INT 7
23651: PUSH
23652: LD_INT 11
23654: PUSH
23655: LD_INT 12
23657: PUSH
23658: LD_INT 15
23660: PUSH
23661: LD_INT 16
23663: PUSH
23664: LD_INT 20
23666: PUSH
23667: LD_INT 21
23669: PUSH
23670: LD_INT 22
23672: PUSH
23673: LD_INT 23
23675: PUSH
23676: LD_INT 25
23678: PUSH
23679: LD_INT 26
23681: PUSH
23682: LD_INT 30
23684: PUSH
23685: LD_INT 31
23687: PUSH
23688: LD_INT 32
23690: PUSH
23691: LD_INT 33
23693: PUSH
23694: LD_INT 34
23696: PUSH
23697: LD_INT 35
23699: PUSH
23700: LD_INT 36
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 101
23728: PUSH
23729: LD_INT 102
23731: PUSH
23732: LD_INT 103
23734: PUSH
23735: LD_INT 106
23737: PUSH
23738: LD_INT 108
23740: PUSH
23741: LD_INT 112
23743: PUSH
23744: LD_INT 113
23746: PUSH
23747: LD_INT 114
23749: PUSH
23750: LD_INT 115
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: ST_TO_ADDR
23768: GO 23999
23770: LD_INT 19
23772: DOUBLE
23773: EQUAL
23774: IFTRUE 23778
23776: GO 23998
23778: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23779: LD_ADDR_VAR 0 1
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: LD_INT 2
23789: PUSH
23790: LD_INT 3
23792: PUSH
23793: LD_INT 4
23795: PUSH
23796: LD_INT 5
23798: PUSH
23799: LD_INT 6
23801: PUSH
23802: LD_INT 7
23804: PUSH
23805: LD_INT 8
23807: PUSH
23808: LD_INT 9
23810: PUSH
23811: LD_INT 10
23813: PUSH
23814: LD_INT 11
23816: PUSH
23817: LD_INT 12
23819: PUSH
23820: LD_INT 13
23822: PUSH
23823: LD_INT 14
23825: PUSH
23826: LD_INT 15
23828: PUSH
23829: LD_INT 16
23831: PUSH
23832: LD_INT 17
23834: PUSH
23835: LD_INT 18
23837: PUSH
23838: LD_INT 19
23840: PUSH
23841: LD_INT 20
23843: PUSH
23844: LD_INT 21
23846: PUSH
23847: LD_INT 22
23849: PUSH
23850: LD_INT 23
23852: PUSH
23853: LD_INT 24
23855: PUSH
23856: LD_INT 25
23858: PUSH
23859: LD_INT 26
23861: PUSH
23862: LD_INT 27
23864: PUSH
23865: LD_INT 28
23867: PUSH
23868: LD_INT 29
23870: PUSH
23871: LD_INT 30
23873: PUSH
23874: LD_INT 31
23876: PUSH
23877: LD_INT 32
23879: PUSH
23880: LD_INT 33
23882: PUSH
23883: LD_INT 34
23885: PUSH
23886: LD_INT 35
23888: PUSH
23889: LD_INT 36
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 101
23932: PUSH
23933: LD_INT 102
23935: PUSH
23936: LD_INT 103
23938: PUSH
23939: LD_INT 104
23941: PUSH
23942: LD_INT 105
23944: PUSH
23945: LD_INT 106
23947: PUSH
23948: LD_INT 107
23950: PUSH
23951: LD_INT 108
23953: PUSH
23954: LD_INT 109
23956: PUSH
23957: LD_INT 110
23959: PUSH
23960: LD_INT 111
23962: PUSH
23963: LD_INT 112
23965: PUSH
23966: LD_INT 113
23968: PUSH
23969: LD_INT 114
23971: PUSH
23972: LD_INT 115
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: ST_TO_ADDR
23996: GO 23999
23998: POP
// end else
23999: GO 24218
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24001: LD_ADDR_VAR 0 1
24005: PUSH
24006: LD_INT 1
24008: PUSH
24009: LD_INT 2
24011: PUSH
24012: LD_INT 3
24014: PUSH
24015: LD_INT 4
24017: PUSH
24018: LD_INT 5
24020: PUSH
24021: LD_INT 6
24023: PUSH
24024: LD_INT 7
24026: PUSH
24027: LD_INT 8
24029: PUSH
24030: LD_INT 9
24032: PUSH
24033: LD_INT 10
24035: PUSH
24036: LD_INT 11
24038: PUSH
24039: LD_INT 12
24041: PUSH
24042: LD_INT 13
24044: PUSH
24045: LD_INT 14
24047: PUSH
24048: LD_INT 15
24050: PUSH
24051: LD_INT 16
24053: PUSH
24054: LD_INT 17
24056: PUSH
24057: LD_INT 18
24059: PUSH
24060: LD_INT 19
24062: PUSH
24063: LD_INT 20
24065: PUSH
24066: LD_INT 21
24068: PUSH
24069: LD_INT 22
24071: PUSH
24072: LD_INT 23
24074: PUSH
24075: LD_INT 24
24077: PUSH
24078: LD_INT 25
24080: PUSH
24081: LD_INT 26
24083: PUSH
24084: LD_INT 27
24086: PUSH
24087: LD_INT 28
24089: PUSH
24090: LD_INT 29
24092: PUSH
24093: LD_INT 30
24095: PUSH
24096: LD_INT 31
24098: PUSH
24099: LD_INT 32
24101: PUSH
24102: LD_INT 33
24104: PUSH
24105: LD_INT 34
24107: PUSH
24108: LD_INT 35
24110: PUSH
24111: LD_INT 36
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 101
24154: PUSH
24155: LD_INT 102
24157: PUSH
24158: LD_INT 103
24160: PUSH
24161: LD_INT 104
24163: PUSH
24164: LD_INT 105
24166: PUSH
24167: LD_INT 106
24169: PUSH
24170: LD_INT 107
24172: PUSH
24173: LD_INT 108
24175: PUSH
24176: LD_INT 109
24178: PUSH
24179: LD_INT 110
24181: PUSH
24182: LD_INT 111
24184: PUSH
24185: LD_INT 112
24187: PUSH
24188: LD_INT 113
24190: PUSH
24191: LD_INT 114
24193: PUSH
24194: LD_INT 115
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: ST_TO_ADDR
// if result then
24218: LD_VAR 0 1
24222: IFFALSE 24511
// begin normal :=  ;
24224: LD_ADDR_VAR 0 3
24228: PUSH
24229: LD_STRING 
24231: ST_TO_ADDR
// hardcore :=  ;
24232: LD_ADDR_VAR 0 4
24236: PUSH
24237: LD_STRING 
24239: ST_TO_ADDR
// for i = 1 to normalCounter do
24240: LD_ADDR_VAR 0 5
24244: PUSH
24245: DOUBLE
24246: LD_INT 1
24248: DEC
24249: ST_TO_ADDR
24250: LD_EXP 68
24254: PUSH
24255: FOR_TO
24256: IFFALSE 24357
// begin tmp := 0 ;
24258: LD_ADDR_VAR 0 2
24262: PUSH
24263: LD_STRING 0
24265: ST_TO_ADDR
// if result [ 1 ] then
24266: LD_VAR 0 1
24270: PUSH
24271: LD_INT 1
24273: ARRAY
24274: IFFALSE 24339
// if result [ 1 ] [ 1 ] = i then
24276: LD_VAR 0 1
24280: PUSH
24281: LD_INT 1
24283: ARRAY
24284: PUSH
24285: LD_INT 1
24287: ARRAY
24288: PUSH
24289: LD_VAR 0 5
24293: EQUAL
24294: IFFALSE 24339
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24296: LD_ADDR_VAR 0 1
24300: PUSH
24301: LD_VAR 0 1
24305: PPUSH
24306: LD_INT 1
24308: PPUSH
24309: LD_VAR 0 1
24313: PUSH
24314: LD_INT 1
24316: ARRAY
24317: PPUSH
24318: LD_INT 1
24320: PPUSH
24321: CALL_OW 3
24325: PPUSH
24326: CALL_OW 1
24330: ST_TO_ADDR
// tmp := 1 ;
24331: LD_ADDR_VAR 0 2
24335: PUSH
24336: LD_STRING 1
24338: ST_TO_ADDR
// end ; normal := normal & tmp ;
24339: LD_ADDR_VAR 0 3
24343: PUSH
24344: LD_VAR 0 3
24348: PUSH
24349: LD_VAR 0 2
24353: STR
24354: ST_TO_ADDR
// end ;
24355: GO 24255
24357: POP
24358: POP
// for i = 1 to hardcoreCounter do
24359: LD_ADDR_VAR 0 5
24363: PUSH
24364: DOUBLE
24365: LD_INT 1
24367: DEC
24368: ST_TO_ADDR
24369: LD_EXP 69
24373: PUSH
24374: FOR_TO
24375: IFFALSE 24480
// begin tmp := 0 ;
24377: LD_ADDR_VAR 0 2
24381: PUSH
24382: LD_STRING 0
24384: ST_TO_ADDR
// if result [ 2 ] then
24385: LD_VAR 0 1
24389: PUSH
24390: LD_INT 2
24392: ARRAY
24393: IFFALSE 24462
// if result [ 2 ] [ 1 ] = 100 + i then
24395: LD_VAR 0 1
24399: PUSH
24400: LD_INT 2
24402: ARRAY
24403: PUSH
24404: LD_INT 1
24406: ARRAY
24407: PUSH
24408: LD_INT 100
24410: PUSH
24411: LD_VAR 0 5
24415: PLUS
24416: EQUAL
24417: IFFALSE 24462
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24419: LD_ADDR_VAR 0 1
24423: PUSH
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_INT 2
24431: PPUSH
24432: LD_VAR 0 1
24436: PUSH
24437: LD_INT 2
24439: ARRAY
24440: PPUSH
24441: LD_INT 1
24443: PPUSH
24444: CALL_OW 3
24448: PPUSH
24449: CALL_OW 1
24453: ST_TO_ADDR
// tmp := 1 ;
24454: LD_ADDR_VAR 0 2
24458: PUSH
24459: LD_STRING 1
24461: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24462: LD_ADDR_VAR 0 4
24466: PUSH
24467: LD_VAR 0 4
24471: PUSH
24472: LD_VAR 0 2
24476: STR
24477: ST_TO_ADDR
// end ;
24478: GO 24374
24480: POP
24481: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24482: LD_STRING getStreamItemsFromMission("
24484: PUSH
24485: LD_VAR 0 3
24489: STR
24490: PUSH
24491: LD_STRING ","
24493: STR
24494: PUSH
24495: LD_VAR 0 4
24499: STR
24500: PUSH
24501: LD_STRING ")
24503: STR
24504: PPUSH
24505: CALL_OW 559
// end else
24509: GO 24518
// ToLua ( getStreamItemsFromMission("","") ) ;
24511: LD_STRING getStreamItemsFromMission("","")
24513: PPUSH
24514: CALL_OW 559
// end ;
24518: LD_VAR 0 1
24522: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24523: LD_EXP 67
24527: PUSH
24528: LD_EXP 72
24532: AND
24533: IFFALSE 24657
24535: GO 24537
24537: DISABLE
24538: LD_INT 0
24540: PPUSH
24541: PPUSH
// begin enable ;
24542: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24543: LD_ADDR_VAR 0 2
24547: PUSH
24548: LD_INT 22
24550: PUSH
24551: LD_OWVAR 2
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: LD_INT 34
24565: PUSH
24566: LD_INT 7
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 34
24575: PUSH
24576: LD_INT 45
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 34
24585: PUSH
24586: LD_INT 28
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 34
24595: PUSH
24596: LD_INT 47
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PPUSH
24614: CALL_OW 69
24618: ST_TO_ADDR
// if not tmp then
24619: LD_VAR 0 2
24623: NOT
24624: IFFALSE 24628
// exit ;
24626: GO 24657
// for i in tmp do
24628: LD_ADDR_VAR 0 1
24632: PUSH
24633: LD_VAR 0 2
24637: PUSH
24638: FOR_IN
24639: IFFALSE 24655
// begin SetLives ( i , 0 ) ;
24641: LD_VAR 0 1
24645: PPUSH
24646: LD_INT 0
24648: PPUSH
24649: CALL_OW 234
// end ;
24653: GO 24638
24655: POP
24656: POP
// end ;
24657: PPOPN 2
24659: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24660: LD_EXP 67
24664: PUSH
24665: LD_EXP 73
24669: AND
24670: IFFALSE 24754
24672: GO 24674
24674: DISABLE
24675: LD_INT 0
24677: PPUSH
24678: PPUSH
// begin enable ;
24679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24680: LD_ADDR_VAR 0 2
24684: PUSH
24685: LD_INT 22
24687: PUSH
24688: LD_OWVAR 2
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 32
24699: PUSH
24700: LD_INT 3
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PPUSH
24711: CALL_OW 69
24715: ST_TO_ADDR
// if not tmp then
24716: LD_VAR 0 2
24720: NOT
24721: IFFALSE 24725
// exit ;
24723: GO 24754
// for i in tmp do
24725: LD_ADDR_VAR 0 1
24729: PUSH
24730: LD_VAR 0 2
24734: PUSH
24735: FOR_IN
24736: IFFALSE 24752
// begin SetLives ( i , 0 ) ;
24738: LD_VAR 0 1
24742: PPUSH
24743: LD_INT 0
24745: PPUSH
24746: CALL_OW 234
// end ;
24750: GO 24735
24752: POP
24753: POP
// end ;
24754: PPOPN 2
24756: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24757: LD_EXP 67
24761: PUSH
24762: LD_EXP 70
24766: AND
24767: IFFALSE 24860
24769: GO 24771
24771: DISABLE
24772: LD_INT 0
24774: PPUSH
// begin enable ;
24775: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24776: LD_ADDR_VAR 0 1
24780: PUSH
24781: LD_INT 22
24783: PUSH
24784: LD_OWVAR 2
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 2
24795: PUSH
24796: LD_INT 25
24798: PUSH
24799: LD_INT 5
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 25
24808: PUSH
24809: LD_INT 9
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 25
24818: PUSH
24819: LD_INT 8
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PPUSH
24836: CALL_OW 69
24840: PUSH
24841: FOR_IN
24842: IFFALSE 24858
// begin SetClass ( i , 1 ) ;
24844: LD_VAR 0 1
24848: PPUSH
24849: LD_INT 1
24851: PPUSH
24852: CALL_OW 336
// end ;
24856: GO 24841
24858: POP
24859: POP
// end ;
24860: PPOPN 1
24862: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24863: LD_EXP 67
24867: PUSH
24868: LD_EXP 71
24872: AND
24873: PUSH
24874: LD_OWVAR 65
24878: PUSH
24879: LD_INT 7
24881: LESS
24882: AND
24883: IFFALSE 24897
24885: GO 24887
24887: DISABLE
// begin enable ;
24888: ENABLE
// game_speed := 7 ;
24889: LD_ADDR_OWVAR 65
24893: PUSH
24894: LD_INT 7
24896: ST_TO_ADDR
// end ;
24897: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24898: LD_EXP 67
24902: PUSH
24903: LD_EXP 74
24907: AND
24908: IFFALSE 25110
24910: GO 24912
24912: DISABLE
24913: LD_INT 0
24915: PPUSH
24916: PPUSH
24917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24918: LD_ADDR_VAR 0 3
24922: PUSH
24923: LD_INT 81
24925: PUSH
24926: LD_OWVAR 2
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 21
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PPUSH
24949: CALL_OW 69
24953: ST_TO_ADDR
// if not tmp then
24954: LD_VAR 0 3
24958: NOT
24959: IFFALSE 24963
// exit ;
24961: GO 25110
// if tmp > 5 then
24963: LD_VAR 0 3
24967: PUSH
24968: LD_INT 5
24970: GREATER
24971: IFFALSE 24983
// k := 5 else
24973: LD_ADDR_VAR 0 2
24977: PUSH
24978: LD_INT 5
24980: ST_TO_ADDR
24981: GO 24993
// k := tmp ;
24983: LD_ADDR_VAR 0 2
24987: PUSH
24988: LD_VAR 0 3
24992: ST_TO_ADDR
// for i := 1 to k do
24993: LD_ADDR_VAR 0 1
24997: PUSH
24998: DOUBLE
24999: LD_INT 1
25001: DEC
25002: ST_TO_ADDR
25003: LD_VAR 0 2
25007: PUSH
25008: FOR_TO
25009: IFFALSE 25108
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25011: LD_VAR 0 3
25015: PUSH
25016: LD_VAR 0 1
25020: ARRAY
25021: PPUSH
25022: LD_VAR 0 1
25026: PUSH
25027: LD_INT 4
25029: MOD
25030: PUSH
25031: LD_INT 1
25033: PLUS
25034: PPUSH
25035: CALL_OW 259
25039: PUSH
25040: LD_INT 10
25042: LESS
25043: IFFALSE 25106
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25045: LD_VAR 0 3
25049: PUSH
25050: LD_VAR 0 1
25054: ARRAY
25055: PPUSH
25056: LD_VAR 0 1
25060: PUSH
25061: LD_INT 4
25063: MOD
25064: PUSH
25065: LD_INT 1
25067: PLUS
25068: PPUSH
25069: LD_VAR 0 3
25073: PUSH
25074: LD_VAR 0 1
25078: ARRAY
25079: PPUSH
25080: LD_VAR 0 1
25084: PUSH
25085: LD_INT 4
25087: MOD
25088: PUSH
25089: LD_INT 1
25091: PLUS
25092: PPUSH
25093: CALL_OW 259
25097: PUSH
25098: LD_INT 1
25100: PLUS
25101: PPUSH
25102: CALL_OW 237
25106: GO 25008
25108: POP
25109: POP
// end ;
25110: PPOPN 3
25112: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25113: LD_EXP 67
25117: PUSH
25118: LD_EXP 75
25122: AND
25123: IFFALSE 25143
25125: GO 25127
25127: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25128: LD_INT 4
25130: PPUSH
25131: LD_OWVAR 2
25135: PPUSH
25136: LD_INT 0
25138: PPUSH
25139: CALL_OW 324
25143: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25144: LD_EXP 67
25148: PUSH
25149: LD_EXP 104
25153: AND
25154: IFFALSE 25174
25156: GO 25158
25158: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25159: LD_INT 19
25161: PPUSH
25162: LD_OWVAR 2
25166: PPUSH
25167: LD_INT 0
25169: PPUSH
25170: CALL_OW 324
25174: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25175: LD_EXP 67
25179: PUSH
25180: LD_EXP 76
25184: AND
25185: IFFALSE 25287
25187: GO 25189
25189: DISABLE
25190: LD_INT 0
25192: PPUSH
25193: PPUSH
// begin enable ;
25194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25195: LD_ADDR_VAR 0 2
25199: PUSH
25200: LD_INT 22
25202: PUSH
25203: LD_OWVAR 2
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 2
25214: PUSH
25215: LD_INT 34
25217: PUSH
25218: LD_INT 11
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 34
25227: PUSH
25228: LD_INT 30
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PPUSH
25244: CALL_OW 69
25248: ST_TO_ADDR
// if not tmp then
25249: LD_VAR 0 2
25253: NOT
25254: IFFALSE 25258
// exit ;
25256: GO 25287
// for i in tmp do
25258: LD_ADDR_VAR 0 1
25262: PUSH
25263: LD_VAR 0 2
25267: PUSH
25268: FOR_IN
25269: IFFALSE 25285
// begin SetLives ( i , 0 ) ;
25271: LD_VAR 0 1
25275: PPUSH
25276: LD_INT 0
25278: PPUSH
25279: CALL_OW 234
// end ;
25283: GO 25268
25285: POP
25286: POP
// end ;
25287: PPOPN 2
25289: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25290: LD_EXP 67
25294: PUSH
25295: LD_EXP 77
25299: AND
25300: IFFALSE 25320
25302: GO 25304
25304: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25305: LD_INT 32
25307: PPUSH
25308: LD_OWVAR 2
25312: PPUSH
25313: LD_INT 0
25315: PPUSH
25316: CALL_OW 324
25320: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25321: LD_EXP 67
25325: PUSH
25326: LD_EXP 78
25330: AND
25331: IFFALSE 25512
25333: GO 25335
25335: DISABLE
25336: LD_INT 0
25338: PPUSH
25339: PPUSH
25340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25341: LD_ADDR_VAR 0 2
25345: PUSH
25346: LD_INT 22
25348: PUSH
25349: LD_OWVAR 2
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 33
25360: PUSH
25361: LD_INT 3
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PPUSH
25372: CALL_OW 69
25376: ST_TO_ADDR
// if not tmp then
25377: LD_VAR 0 2
25381: NOT
25382: IFFALSE 25386
// exit ;
25384: GO 25512
// side := 0 ;
25386: LD_ADDR_VAR 0 3
25390: PUSH
25391: LD_INT 0
25393: ST_TO_ADDR
// for i := 1 to 8 do
25394: LD_ADDR_VAR 0 1
25398: PUSH
25399: DOUBLE
25400: LD_INT 1
25402: DEC
25403: ST_TO_ADDR
25404: LD_INT 8
25406: PUSH
25407: FOR_TO
25408: IFFALSE 25456
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25410: LD_OWVAR 2
25414: PUSH
25415: LD_VAR 0 1
25419: NONEQUAL
25420: PUSH
25421: LD_OWVAR 2
25425: PPUSH
25426: LD_VAR 0 1
25430: PPUSH
25431: CALL_OW 81
25435: PUSH
25436: LD_INT 2
25438: EQUAL
25439: AND
25440: IFFALSE 25454
// begin side := i ;
25442: LD_ADDR_VAR 0 3
25446: PUSH
25447: LD_VAR 0 1
25451: ST_TO_ADDR
// break ;
25452: GO 25456
// end ;
25454: GO 25407
25456: POP
25457: POP
// if not side then
25458: LD_VAR 0 3
25462: NOT
25463: IFFALSE 25467
// exit ;
25465: GO 25512
// for i := 1 to tmp do
25467: LD_ADDR_VAR 0 1
25471: PUSH
25472: DOUBLE
25473: LD_INT 1
25475: DEC
25476: ST_TO_ADDR
25477: LD_VAR 0 2
25481: PUSH
25482: FOR_TO
25483: IFFALSE 25510
// if Prob ( 60 ) then
25485: LD_INT 60
25487: PPUSH
25488: CALL_OW 13
25492: IFFALSE 25508
// SetSide ( i , side ) ;
25494: LD_VAR 0 1
25498: PPUSH
25499: LD_VAR 0 3
25503: PPUSH
25504: CALL_OW 235
25508: GO 25482
25510: POP
25511: POP
// end ;
25512: PPOPN 3
25514: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25515: LD_EXP 67
25519: PUSH
25520: LD_EXP 80
25524: AND
25525: IFFALSE 25644
25527: GO 25529
25529: DISABLE
25530: LD_INT 0
25532: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25533: LD_ADDR_VAR 0 1
25537: PUSH
25538: LD_INT 22
25540: PUSH
25541: LD_OWVAR 2
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 21
25552: PUSH
25553: LD_INT 1
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 3
25562: PUSH
25563: LD_INT 23
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: LIST
25581: PPUSH
25582: CALL_OW 69
25586: PUSH
25587: FOR_IN
25588: IFFALSE 25642
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25590: LD_VAR 0 1
25594: PPUSH
25595: CALL_OW 257
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: LD_INT 2
25605: PUSH
25606: LD_INT 3
25608: PUSH
25609: LD_INT 4
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: IN
25618: IFFALSE 25640
// SetClass ( un , rand ( 1 , 4 ) ) ;
25620: LD_VAR 0 1
25624: PPUSH
25625: LD_INT 1
25627: PPUSH
25628: LD_INT 4
25630: PPUSH
25631: CALL_OW 12
25635: PPUSH
25636: CALL_OW 336
25640: GO 25587
25642: POP
25643: POP
// end ;
25644: PPOPN 1
25646: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25647: LD_EXP 67
25651: PUSH
25652: LD_EXP 79
25656: AND
25657: IFFALSE 25736
25659: GO 25661
25661: DISABLE
25662: LD_INT 0
25664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25665: LD_ADDR_VAR 0 1
25669: PUSH
25670: LD_INT 22
25672: PUSH
25673: LD_OWVAR 2
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 21
25684: PUSH
25685: LD_INT 3
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PPUSH
25696: CALL_OW 69
25700: ST_TO_ADDR
// if not tmp then
25701: LD_VAR 0 1
25705: NOT
25706: IFFALSE 25710
// exit ;
25708: GO 25736
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25710: LD_VAR 0 1
25714: PUSH
25715: LD_INT 1
25717: PPUSH
25718: LD_VAR 0 1
25722: PPUSH
25723: CALL_OW 12
25727: ARRAY
25728: PPUSH
25729: LD_INT 100
25731: PPUSH
25732: CALL_OW 234
// end ;
25736: PPOPN 1
25738: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25739: LD_EXP 67
25743: PUSH
25744: LD_EXP 81
25748: AND
25749: IFFALSE 25847
25751: GO 25753
25753: DISABLE
25754: LD_INT 0
25756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25757: LD_ADDR_VAR 0 1
25761: PUSH
25762: LD_INT 22
25764: PUSH
25765: LD_OWVAR 2
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 21
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PPUSH
25788: CALL_OW 69
25792: ST_TO_ADDR
// if not tmp then
25793: LD_VAR 0 1
25797: NOT
25798: IFFALSE 25802
// exit ;
25800: GO 25847
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25802: LD_VAR 0 1
25806: PUSH
25807: LD_INT 1
25809: PPUSH
25810: LD_VAR 0 1
25814: PPUSH
25815: CALL_OW 12
25819: ARRAY
25820: PPUSH
25821: LD_INT 1
25823: PPUSH
25824: LD_INT 4
25826: PPUSH
25827: CALL_OW 12
25831: PPUSH
25832: LD_INT 3000
25834: PPUSH
25835: LD_INT 9000
25837: PPUSH
25838: CALL_OW 12
25842: PPUSH
25843: CALL_OW 492
// end ;
25847: PPOPN 1
25849: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25850: LD_EXP 67
25854: PUSH
25855: LD_EXP 82
25859: AND
25860: IFFALSE 25880
25862: GO 25864
25864: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25865: LD_INT 1
25867: PPUSH
25868: LD_OWVAR 2
25872: PPUSH
25873: LD_INT 0
25875: PPUSH
25876: CALL_OW 324
25880: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25881: LD_EXP 67
25885: PUSH
25886: LD_EXP 83
25890: AND
25891: IFFALSE 25974
25893: GO 25895
25895: DISABLE
25896: LD_INT 0
25898: PPUSH
25899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25900: LD_ADDR_VAR 0 2
25904: PUSH
25905: LD_INT 22
25907: PUSH
25908: LD_OWVAR 2
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 21
25919: PUSH
25920: LD_INT 3
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PPUSH
25931: CALL_OW 69
25935: ST_TO_ADDR
// if not tmp then
25936: LD_VAR 0 2
25940: NOT
25941: IFFALSE 25945
// exit ;
25943: GO 25974
// for i in tmp do
25945: LD_ADDR_VAR 0 1
25949: PUSH
25950: LD_VAR 0 2
25954: PUSH
25955: FOR_IN
25956: IFFALSE 25972
// SetBLevel ( i , 10 ) ;
25958: LD_VAR 0 1
25962: PPUSH
25963: LD_INT 10
25965: PPUSH
25966: CALL_OW 241
25970: GO 25955
25972: POP
25973: POP
// end ;
25974: PPOPN 2
25976: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25977: LD_EXP 67
25981: PUSH
25982: LD_EXP 84
25986: AND
25987: IFFALSE 26098
25989: GO 25991
25991: DISABLE
25992: LD_INT 0
25994: PPUSH
25995: PPUSH
25996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25997: LD_ADDR_VAR 0 3
26001: PUSH
26002: LD_INT 22
26004: PUSH
26005: LD_OWVAR 2
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 25
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PPUSH
26028: CALL_OW 69
26032: ST_TO_ADDR
// if not tmp then
26033: LD_VAR 0 3
26037: NOT
26038: IFFALSE 26042
// exit ;
26040: GO 26098
// un := tmp [ rand ( 1 , tmp ) ] ;
26042: LD_ADDR_VAR 0 2
26046: PUSH
26047: LD_VAR 0 3
26051: PUSH
26052: LD_INT 1
26054: PPUSH
26055: LD_VAR 0 3
26059: PPUSH
26060: CALL_OW 12
26064: ARRAY
26065: ST_TO_ADDR
// if Crawls ( un ) then
26066: LD_VAR 0 2
26070: PPUSH
26071: CALL_OW 318
26075: IFFALSE 26086
// ComWalk ( un ) ;
26077: LD_VAR 0 2
26081: PPUSH
26082: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26086: LD_VAR 0 2
26090: PPUSH
26091: LD_INT 5
26093: PPUSH
26094: CALL_OW 336
// end ;
26098: PPOPN 3
26100: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26101: LD_EXP 67
26105: PUSH
26106: LD_EXP 85
26110: AND
26111: PUSH
26112: LD_OWVAR 67
26116: PUSH
26117: LD_INT 3
26119: LESS
26120: AND
26121: IFFALSE 26140
26123: GO 26125
26125: DISABLE
// Difficulty := Difficulty + 1 ;
26126: LD_ADDR_OWVAR 67
26130: PUSH
26131: LD_OWVAR 67
26135: PUSH
26136: LD_INT 1
26138: PLUS
26139: ST_TO_ADDR
26140: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26141: LD_EXP 67
26145: PUSH
26146: LD_EXP 86
26150: AND
26151: IFFALSE 26254
26153: GO 26155
26155: DISABLE
26156: LD_INT 0
26158: PPUSH
// begin for i := 1 to 5 do
26159: LD_ADDR_VAR 0 1
26163: PUSH
26164: DOUBLE
26165: LD_INT 1
26167: DEC
26168: ST_TO_ADDR
26169: LD_INT 5
26171: PUSH
26172: FOR_TO
26173: IFFALSE 26252
// begin uc_nation := nation_nature ;
26175: LD_ADDR_OWVAR 21
26179: PUSH
26180: LD_INT 0
26182: ST_TO_ADDR
// uc_side := 0 ;
26183: LD_ADDR_OWVAR 20
26187: PUSH
26188: LD_INT 0
26190: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26191: LD_ADDR_OWVAR 29
26195: PUSH
26196: LD_INT 12
26198: PUSH
26199: LD_INT 12
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: ST_TO_ADDR
// hc_agressivity := 20 ;
26206: LD_ADDR_OWVAR 35
26210: PUSH
26211: LD_INT 20
26213: ST_TO_ADDR
// hc_class := class_tiger ;
26214: LD_ADDR_OWVAR 28
26218: PUSH
26219: LD_INT 14
26221: ST_TO_ADDR
// hc_gallery :=  ;
26222: LD_ADDR_OWVAR 33
26226: PUSH
26227: LD_STRING 
26229: ST_TO_ADDR
// hc_name :=  ;
26230: LD_ADDR_OWVAR 26
26234: PUSH
26235: LD_STRING 
26237: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26238: CALL_OW 44
26242: PPUSH
26243: LD_INT 0
26245: PPUSH
26246: CALL_OW 51
// end ;
26250: GO 26172
26252: POP
26253: POP
// end ;
26254: PPOPN 1
26256: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26257: LD_EXP 67
26261: PUSH
26262: LD_EXP 87
26266: AND
26267: IFFALSE 26276
26269: GO 26271
26271: DISABLE
// StreamSibBomb ;
26272: CALL 26277 0 0
26276: END
// export function StreamSibBomb ; var i , x , y ; begin
26277: LD_INT 0
26279: PPUSH
26280: PPUSH
26281: PPUSH
26282: PPUSH
// result := false ;
26283: LD_ADDR_VAR 0 1
26287: PUSH
26288: LD_INT 0
26290: ST_TO_ADDR
// for i := 1 to 16 do
26291: LD_ADDR_VAR 0 2
26295: PUSH
26296: DOUBLE
26297: LD_INT 1
26299: DEC
26300: ST_TO_ADDR
26301: LD_INT 16
26303: PUSH
26304: FOR_TO
26305: IFFALSE 26504
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26307: LD_ADDR_VAR 0 3
26311: PUSH
26312: LD_INT 10
26314: PUSH
26315: LD_INT 20
26317: PUSH
26318: LD_INT 30
26320: PUSH
26321: LD_INT 40
26323: PUSH
26324: LD_INT 50
26326: PUSH
26327: LD_INT 60
26329: PUSH
26330: LD_INT 70
26332: PUSH
26333: LD_INT 80
26335: PUSH
26336: LD_INT 90
26338: PUSH
26339: LD_INT 100
26341: PUSH
26342: LD_INT 110
26344: PUSH
26345: LD_INT 120
26347: PUSH
26348: LD_INT 130
26350: PUSH
26351: LD_INT 140
26353: PUSH
26354: LD_INT 150
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: PPUSH
26377: LD_INT 15
26379: PPUSH
26380: CALL_OW 12
26384: ARRAY
26385: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26386: LD_ADDR_VAR 0 4
26390: PUSH
26391: LD_INT 10
26393: PUSH
26394: LD_INT 20
26396: PUSH
26397: LD_INT 30
26399: PUSH
26400: LD_INT 40
26402: PUSH
26403: LD_INT 50
26405: PUSH
26406: LD_INT 60
26408: PUSH
26409: LD_INT 70
26411: PUSH
26412: LD_INT 80
26414: PUSH
26415: LD_INT 90
26417: PUSH
26418: LD_INT 100
26420: PUSH
26421: LD_INT 110
26423: PUSH
26424: LD_INT 120
26426: PUSH
26427: LD_INT 130
26429: PUSH
26430: LD_INT 140
26432: PUSH
26433: LD_INT 150
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 1
26455: PPUSH
26456: LD_INT 15
26458: PPUSH
26459: CALL_OW 12
26463: ARRAY
26464: ST_TO_ADDR
// if ValidHex ( x , y ) then
26465: LD_VAR 0 3
26469: PPUSH
26470: LD_VAR 0 4
26474: PPUSH
26475: CALL_OW 488
26479: IFFALSE 26502
// begin result := [ x , y ] ;
26481: LD_ADDR_VAR 0 1
26485: PUSH
26486: LD_VAR 0 3
26490: PUSH
26491: LD_VAR 0 4
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: ST_TO_ADDR
// break ;
26500: GO 26504
// end ; end ;
26502: GO 26304
26504: POP
26505: POP
// if result then
26506: LD_VAR 0 1
26510: IFFALSE 26570
// begin ToLua ( playSibBomb() ) ;
26512: LD_STRING playSibBomb()
26514: PPUSH
26515: CALL_OW 559
// wait ( 0 0$14 ) ;
26519: LD_INT 490
26521: PPUSH
26522: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26526: LD_VAR 0 1
26530: PUSH
26531: LD_INT 1
26533: ARRAY
26534: PPUSH
26535: LD_VAR 0 1
26539: PUSH
26540: LD_INT 2
26542: ARRAY
26543: PPUSH
26544: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26548: LD_VAR 0 1
26552: PUSH
26553: LD_INT 1
26555: ARRAY
26556: PPUSH
26557: LD_VAR 0 1
26561: PUSH
26562: LD_INT 2
26564: ARRAY
26565: PPUSH
26566: CALL_OW 429
// end ; end ;
26570: LD_VAR 0 1
26574: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26575: LD_EXP 67
26579: PUSH
26580: LD_EXP 89
26584: AND
26585: IFFALSE 26597
26587: GO 26589
26589: DISABLE
// YouLost (  ) ;
26590: LD_STRING 
26592: PPUSH
26593: CALL_OW 104
26597: END
// every 0 0$1 trigger StreamModeActive and sFog do
26598: LD_EXP 67
26602: PUSH
26603: LD_EXP 88
26607: AND
26608: IFFALSE 26622
26610: GO 26612
26612: DISABLE
// FogOff ( your_side ) ;
26613: LD_OWVAR 2
26617: PPUSH
26618: CALL_OW 344
26622: END
// every 0 0$1 trigger StreamModeActive and sSun do
26623: LD_EXP 67
26627: PUSH
26628: LD_EXP 90
26632: AND
26633: IFFALSE 26661
26635: GO 26637
26637: DISABLE
// begin solar_recharge_percent := 0 ;
26638: LD_ADDR_OWVAR 79
26642: PUSH
26643: LD_INT 0
26645: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26646: LD_INT 10500
26648: PPUSH
26649: CALL_OW 67
// solar_recharge_percent := 100 ;
26653: LD_ADDR_OWVAR 79
26657: PUSH
26658: LD_INT 100
26660: ST_TO_ADDR
// end ;
26661: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26662: LD_EXP 67
26666: PUSH
26667: LD_EXP 91
26671: AND
26672: IFFALSE 26911
26674: GO 26676
26676: DISABLE
26677: LD_INT 0
26679: PPUSH
26680: PPUSH
26681: PPUSH
// begin tmp := [ ] ;
26682: LD_ADDR_VAR 0 3
26686: PUSH
26687: EMPTY
26688: ST_TO_ADDR
// for i := 1 to 6 do
26689: LD_ADDR_VAR 0 1
26693: PUSH
26694: DOUBLE
26695: LD_INT 1
26697: DEC
26698: ST_TO_ADDR
26699: LD_INT 6
26701: PUSH
26702: FOR_TO
26703: IFFALSE 26808
// begin uc_nation := nation_nature ;
26705: LD_ADDR_OWVAR 21
26709: PUSH
26710: LD_INT 0
26712: ST_TO_ADDR
// uc_side := 0 ;
26713: LD_ADDR_OWVAR 20
26717: PUSH
26718: LD_INT 0
26720: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26721: LD_ADDR_OWVAR 29
26725: PUSH
26726: LD_INT 12
26728: PUSH
26729: LD_INT 12
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: ST_TO_ADDR
// hc_agressivity := 20 ;
26736: LD_ADDR_OWVAR 35
26740: PUSH
26741: LD_INT 20
26743: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26744: LD_ADDR_OWVAR 28
26748: PUSH
26749: LD_INT 17
26751: ST_TO_ADDR
// hc_gallery :=  ;
26752: LD_ADDR_OWVAR 33
26756: PUSH
26757: LD_STRING 
26759: ST_TO_ADDR
// hc_name :=  ;
26760: LD_ADDR_OWVAR 26
26764: PUSH
26765: LD_STRING 
26767: ST_TO_ADDR
// un := CreateHuman ;
26768: LD_ADDR_VAR 0 2
26772: PUSH
26773: CALL_OW 44
26777: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26778: LD_VAR 0 2
26782: PPUSH
26783: LD_INT 1
26785: PPUSH
26786: CALL_OW 51
// tmp := tmp ^ un ;
26790: LD_ADDR_VAR 0 3
26794: PUSH
26795: LD_VAR 0 3
26799: PUSH
26800: LD_VAR 0 2
26804: ADD
26805: ST_TO_ADDR
// end ;
26806: GO 26702
26808: POP
26809: POP
// repeat wait ( 0 0$1 ) ;
26810: LD_INT 35
26812: PPUSH
26813: CALL_OW 67
// for un in tmp do
26817: LD_ADDR_VAR 0 2
26821: PUSH
26822: LD_VAR 0 3
26826: PUSH
26827: FOR_IN
26828: IFFALSE 26902
// begin if IsDead ( un ) then
26830: LD_VAR 0 2
26834: PPUSH
26835: CALL_OW 301
26839: IFFALSE 26859
// begin tmp := tmp diff un ;
26841: LD_ADDR_VAR 0 3
26845: PUSH
26846: LD_VAR 0 3
26850: PUSH
26851: LD_VAR 0 2
26855: DIFF
26856: ST_TO_ADDR
// continue ;
26857: GO 26827
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26859: LD_VAR 0 2
26863: PPUSH
26864: LD_INT 3
26866: PUSH
26867: LD_INT 22
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PPUSH
26881: CALL_OW 69
26885: PPUSH
26886: LD_VAR 0 2
26890: PPUSH
26891: CALL_OW 74
26895: PPUSH
26896: CALL_OW 115
// end ;
26900: GO 26827
26902: POP
26903: POP
// until not tmp ;
26904: LD_VAR 0 3
26908: NOT
26909: IFFALSE 26810
// end ;
26911: PPOPN 3
26913: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26914: LD_EXP 67
26918: PUSH
26919: LD_EXP 92
26923: AND
26924: IFFALSE 26978
26926: GO 26928
26928: DISABLE
// begin ToLua ( displayTroll(); ) ;
26929: LD_STRING displayTroll();
26931: PPUSH
26932: CALL_OW 559
// wait ( 3 3$00 ) ;
26936: LD_INT 6300
26938: PPUSH
26939: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26943: LD_STRING hideTroll();
26945: PPUSH
26946: CALL_OW 559
// wait ( 1 1$00 ) ;
26950: LD_INT 2100
26952: PPUSH
26953: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26957: LD_STRING displayTroll();
26959: PPUSH
26960: CALL_OW 559
// wait ( 1 1$00 ) ;
26964: LD_INT 2100
26966: PPUSH
26967: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26971: LD_STRING hideTroll();
26973: PPUSH
26974: CALL_OW 559
// end ;
26978: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26979: LD_EXP 67
26983: PUSH
26984: LD_EXP 93
26988: AND
26989: IFFALSE 27052
26991: GO 26993
26993: DISABLE
26994: LD_INT 0
26996: PPUSH
// begin p := 0 ;
26997: LD_ADDR_VAR 0 1
27001: PUSH
27002: LD_INT 0
27004: ST_TO_ADDR
// repeat game_speed := 1 ;
27005: LD_ADDR_OWVAR 65
27009: PUSH
27010: LD_INT 1
27012: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27013: LD_INT 35
27015: PPUSH
27016: CALL_OW 67
// p := p + 1 ;
27020: LD_ADDR_VAR 0 1
27024: PUSH
27025: LD_VAR 0 1
27029: PUSH
27030: LD_INT 1
27032: PLUS
27033: ST_TO_ADDR
// until p >= 60 ;
27034: LD_VAR 0 1
27038: PUSH
27039: LD_INT 60
27041: GREATEREQUAL
27042: IFFALSE 27005
// game_speed := 4 ;
27044: LD_ADDR_OWVAR 65
27048: PUSH
27049: LD_INT 4
27051: ST_TO_ADDR
// end ;
27052: PPOPN 1
27054: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27055: LD_EXP 67
27059: PUSH
27060: LD_EXP 94
27064: AND
27065: IFFALSE 27211
27067: GO 27069
27069: DISABLE
27070: LD_INT 0
27072: PPUSH
27073: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27074: LD_ADDR_VAR 0 1
27078: PUSH
27079: LD_INT 22
27081: PUSH
27082: LD_OWVAR 2
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: LD_INT 30
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 30
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: LIST
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PPUSH
27123: CALL_OW 69
27127: ST_TO_ADDR
// if not depot then
27128: LD_VAR 0 1
27132: NOT
27133: IFFALSE 27137
// exit ;
27135: GO 27211
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27137: LD_ADDR_VAR 0 2
27141: PUSH
27142: LD_VAR 0 1
27146: PUSH
27147: LD_INT 1
27149: PPUSH
27150: LD_VAR 0 1
27154: PPUSH
27155: CALL_OW 12
27159: ARRAY
27160: PPUSH
27161: CALL_OW 274
27165: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27166: LD_VAR 0 2
27170: PPUSH
27171: LD_INT 1
27173: PPUSH
27174: LD_INT 0
27176: PPUSH
27177: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27181: LD_VAR 0 2
27185: PPUSH
27186: LD_INT 2
27188: PPUSH
27189: LD_INT 0
27191: PPUSH
27192: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27196: LD_VAR 0 2
27200: PPUSH
27201: LD_INT 3
27203: PPUSH
27204: LD_INT 0
27206: PPUSH
27207: CALL_OW 277
// end ;
27211: PPOPN 2
27213: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27214: LD_EXP 67
27218: PUSH
27219: LD_EXP 95
27223: AND
27224: IFFALSE 27321
27226: GO 27228
27228: DISABLE
27229: LD_INT 0
27231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27232: LD_ADDR_VAR 0 1
27236: PUSH
27237: LD_INT 22
27239: PUSH
27240: LD_OWVAR 2
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 21
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 3
27261: PUSH
27262: LD_INT 23
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: PPUSH
27281: CALL_OW 69
27285: ST_TO_ADDR
// if not tmp then
27286: LD_VAR 0 1
27290: NOT
27291: IFFALSE 27295
// exit ;
27293: GO 27321
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27295: LD_VAR 0 1
27299: PUSH
27300: LD_INT 1
27302: PPUSH
27303: LD_VAR 0 1
27307: PPUSH
27308: CALL_OW 12
27312: ARRAY
27313: PPUSH
27314: LD_INT 200
27316: PPUSH
27317: CALL_OW 234
// end ;
27321: PPOPN 1
27323: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27324: LD_EXP 67
27328: PUSH
27329: LD_EXP 96
27333: AND
27334: IFFALSE 27413
27336: GO 27338
27338: DISABLE
27339: LD_INT 0
27341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27342: LD_ADDR_VAR 0 1
27346: PUSH
27347: LD_INT 22
27349: PUSH
27350: LD_OWVAR 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 21
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PPUSH
27373: CALL_OW 69
27377: ST_TO_ADDR
// if not tmp then
27378: LD_VAR 0 1
27382: NOT
27383: IFFALSE 27387
// exit ;
27385: GO 27413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27387: LD_VAR 0 1
27391: PUSH
27392: LD_INT 1
27394: PPUSH
27395: LD_VAR 0 1
27399: PPUSH
27400: CALL_OW 12
27404: ARRAY
27405: PPUSH
27406: LD_INT 60
27408: PPUSH
27409: CALL_OW 234
// end ;
27413: PPOPN 1
27415: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27416: LD_EXP 67
27420: PUSH
27421: LD_EXP 97
27425: AND
27426: IFFALSE 27525
27428: GO 27430
27430: DISABLE
27431: LD_INT 0
27433: PPUSH
27434: PPUSH
// begin enable ;
27435: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27436: LD_ADDR_VAR 0 1
27440: PUSH
27441: LD_INT 22
27443: PUSH
27444: LD_OWVAR 2
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 61
27455: PUSH
27456: EMPTY
27457: LIST
27458: PUSH
27459: LD_INT 33
27461: PUSH
27462: LD_INT 2
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: LIST
27473: PPUSH
27474: CALL_OW 69
27478: ST_TO_ADDR
// if not tmp then
27479: LD_VAR 0 1
27483: NOT
27484: IFFALSE 27488
// exit ;
27486: GO 27525
// for i in tmp do
27488: LD_ADDR_VAR 0 2
27492: PUSH
27493: LD_VAR 0 1
27497: PUSH
27498: FOR_IN
27499: IFFALSE 27523
// if IsControledBy ( i ) then
27501: LD_VAR 0 2
27505: PPUSH
27506: CALL_OW 312
27510: IFFALSE 27521
// ComUnlink ( i ) ;
27512: LD_VAR 0 2
27516: PPUSH
27517: CALL_OW 136
27521: GO 27498
27523: POP
27524: POP
// end ;
27525: PPOPN 2
27527: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27528: LD_EXP 67
27532: PUSH
27533: LD_EXP 98
27537: AND
27538: IFFALSE 27678
27540: GO 27542
27542: DISABLE
27543: LD_INT 0
27545: PPUSH
27546: PPUSH
// begin ToLua ( displayPowell(); ) ;
27547: LD_STRING displayPowell();
27549: PPUSH
27550: CALL_OW 559
// uc_side := 0 ;
27554: LD_ADDR_OWVAR 20
27558: PUSH
27559: LD_INT 0
27561: ST_TO_ADDR
// uc_nation := 2 ;
27562: LD_ADDR_OWVAR 21
27566: PUSH
27567: LD_INT 2
27569: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27570: LD_ADDR_OWVAR 37
27574: PUSH
27575: LD_INT 14
27577: ST_TO_ADDR
// vc_engine := engine_siberite ;
27578: LD_ADDR_OWVAR 39
27582: PUSH
27583: LD_INT 3
27585: ST_TO_ADDR
// vc_control := control_apeman ;
27586: LD_ADDR_OWVAR 38
27590: PUSH
27591: LD_INT 5
27593: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27594: LD_ADDR_OWVAR 40
27598: PUSH
27599: LD_INT 29
27601: ST_TO_ADDR
// un := CreateVehicle ;
27602: LD_ADDR_VAR 0 2
27606: PUSH
27607: CALL_OW 45
27611: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27612: LD_VAR 0 2
27616: PPUSH
27617: LD_INT 1
27619: PPUSH
27620: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27624: LD_INT 35
27626: PPUSH
27627: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27631: LD_VAR 0 2
27635: PPUSH
27636: LD_INT 22
27638: PUSH
27639: LD_OWVAR 2
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PPUSH
27648: CALL_OW 69
27652: PPUSH
27653: LD_VAR 0 2
27657: PPUSH
27658: CALL_OW 74
27662: PPUSH
27663: CALL_OW 115
// until IsDead ( un ) ;
27667: LD_VAR 0 2
27671: PPUSH
27672: CALL_OW 301
27676: IFFALSE 27624
// end ;
27678: PPOPN 2
27680: END
// every 0 0$1 trigger StreamModeActive and sStu do
27681: LD_EXP 67
27685: PUSH
27686: LD_EXP 106
27690: AND
27691: IFFALSE 27707
27693: GO 27695
27695: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27696: LD_STRING displayStucuk();
27698: PPUSH
27699: CALL_OW 559
// ResetFog ;
27703: CALL_OW 335
// end ;
27707: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27708: LD_EXP 67
27712: PUSH
27713: LD_EXP 99
27717: AND
27718: IFFALSE 27859
27720: GO 27722
27722: DISABLE
27723: LD_INT 0
27725: PPUSH
27726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27727: LD_ADDR_VAR 0 2
27731: PUSH
27732: LD_INT 22
27734: PUSH
27735: LD_OWVAR 2
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 21
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PPUSH
27758: CALL_OW 69
27762: ST_TO_ADDR
// if not tmp then
27763: LD_VAR 0 2
27767: NOT
27768: IFFALSE 27772
// exit ;
27770: GO 27859
// un := tmp [ rand ( 1 , tmp ) ] ;
27772: LD_ADDR_VAR 0 1
27776: PUSH
27777: LD_VAR 0 2
27781: PUSH
27782: LD_INT 1
27784: PPUSH
27785: LD_VAR 0 2
27789: PPUSH
27790: CALL_OW 12
27794: ARRAY
27795: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27796: LD_VAR 0 1
27800: PPUSH
27801: LD_INT 0
27803: PPUSH
27804: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27808: LD_VAR 0 1
27812: PPUSH
27813: LD_OWVAR 3
27817: PUSH
27818: LD_VAR 0 1
27822: DIFF
27823: PPUSH
27824: LD_VAR 0 1
27828: PPUSH
27829: CALL_OW 74
27833: PPUSH
27834: CALL_OW 115
// wait ( 0 0$20 ) ;
27838: LD_INT 700
27840: PPUSH
27841: CALL_OW 67
// SetSide ( un , your_side ) ;
27845: LD_VAR 0 1
27849: PPUSH
27850: LD_OWVAR 2
27854: PPUSH
27855: CALL_OW 235
// end ;
27859: PPOPN 2
27861: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27862: LD_EXP 67
27866: PUSH
27867: LD_EXP 100
27871: AND
27872: IFFALSE 27978
27874: GO 27876
27876: DISABLE
27877: LD_INT 0
27879: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27880: LD_ADDR_VAR 0 1
27884: PUSH
27885: LD_INT 22
27887: PUSH
27888: LD_OWVAR 2
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 2
27899: PUSH
27900: LD_INT 30
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 30
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PPUSH
27929: CALL_OW 69
27933: ST_TO_ADDR
// if not depot then
27934: LD_VAR 0 1
27938: NOT
27939: IFFALSE 27943
// exit ;
27941: GO 27978
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27943: LD_VAR 0 1
27947: PUSH
27948: LD_INT 1
27950: ARRAY
27951: PPUSH
27952: CALL_OW 250
27956: PPUSH
27957: LD_VAR 0 1
27961: PUSH
27962: LD_INT 1
27964: ARRAY
27965: PPUSH
27966: CALL_OW 251
27970: PPUSH
27971: LD_INT 70
27973: PPUSH
27974: CALL_OW 495
// end ;
27978: PPOPN 1
27980: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27981: LD_EXP 67
27985: PUSH
27986: LD_EXP 101
27990: AND
27991: IFFALSE 28202
27993: GO 27995
27995: DISABLE
27996: LD_INT 0
27998: PPUSH
27999: PPUSH
28000: PPUSH
28001: PPUSH
28002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28003: LD_ADDR_VAR 0 5
28007: PUSH
28008: LD_INT 22
28010: PUSH
28011: LD_OWVAR 2
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 21
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PPUSH
28034: CALL_OW 69
28038: ST_TO_ADDR
// if not tmp then
28039: LD_VAR 0 5
28043: NOT
28044: IFFALSE 28048
// exit ;
28046: GO 28202
// for i in tmp do
28048: LD_ADDR_VAR 0 1
28052: PUSH
28053: LD_VAR 0 5
28057: PUSH
28058: FOR_IN
28059: IFFALSE 28200
// begin d := rand ( 0 , 5 ) ;
28061: LD_ADDR_VAR 0 4
28065: PUSH
28066: LD_INT 0
28068: PPUSH
28069: LD_INT 5
28071: PPUSH
28072: CALL_OW 12
28076: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28077: LD_ADDR_VAR 0 2
28081: PUSH
28082: LD_VAR 0 1
28086: PPUSH
28087: CALL_OW 250
28091: PPUSH
28092: LD_VAR 0 4
28096: PPUSH
28097: LD_INT 3
28099: PPUSH
28100: LD_INT 12
28102: PPUSH
28103: CALL_OW 12
28107: PPUSH
28108: CALL_OW 272
28112: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28113: LD_ADDR_VAR 0 3
28117: PUSH
28118: LD_VAR 0 1
28122: PPUSH
28123: CALL_OW 251
28127: PPUSH
28128: LD_VAR 0 4
28132: PPUSH
28133: LD_INT 3
28135: PPUSH
28136: LD_INT 12
28138: PPUSH
28139: CALL_OW 12
28143: PPUSH
28144: CALL_OW 273
28148: ST_TO_ADDR
// if ValidHex ( x , y ) then
28149: LD_VAR 0 2
28153: PPUSH
28154: LD_VAR 0 3
28158: PPUSH
28159: CALL_OW 488
28163: IFFALSE 28198
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28165: LD_VAR 0 1
28169: PPUSH
28170: LD_VAR 0 2
28174: PPUSH
28175: LD_VAR 0 3
28179: PPUSH
28180: LD_INT 3
28182: PPUSH
28183: LD_INT 6
28185: PPUSH
28186: CALL_OW 12
28190: PPUSH
28191: LD_INT 1
28193: PPUSH
28194: CALL_OW 483
// end ;
28198: GO 28058
28200: POP
28201: POP
// end ;
28202: PPOPN 5
28204: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28205: LD_EXP 67
28209: PUSH
28210: LD_EXP 102
28214: AND
28215: IFFALSE 28309
28217: GO 28219
28219: DISABLE
28220: LD_INT 0
28222: PPUSH
28223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28224: LD_ADDR_VAR 0 2
28228: PUSH
28229: LD_INT 22
28231: PUSH
28232: LD_OWVAR 2
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 32
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 21
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: LIST
28265: PPUSH
28266: CALL_OW 69
28270: ST_TO_ADDR
// if not tmp then
28271: LD_VAR 0 2
28275: NOT
28276: IFFALSE 28280
// exit ;
28278: GO 28309
// for i in tmp do
28280: LD_ADDR_VAR 0 1
28284: PUSH
28285: LD_VAR 0 2
28289: PUSH
28290: FOR_IN
28291: IFFALSE 28307
// SetFuel ( i , 0 ) ;
28293: LD_VAR 0 1
28297: PPUSH
28298: LD_INT 0
28300: PPUSH
28301: CALL_OW 240
28305: GO 28290
28307: POP
28308: POP
// end ;
28309: PPOPN 2
28311: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28312: LD_EXP 67
28316: PUSH
28317: LD_EXP 103
28321: AND
28322: IFFALSE 28388
28324: GO 28326
28326: DISABLE
28327: LD_INT 0
28329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28330: LD_ADDR_VAR 0 1
28334: PUSH
28335: LD_INT 22
28337: PUSH
28338: LD_OWVAR 2
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 30
28349: PUSH
28350: LD_INT 29
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 69
28365: ST_TO_ADDR
// if not tmp then
28366: LD_VAR 0 1
28370: NOT
28371: IFFALSE 28375
// exit ;
28373: GO 28388
// DestroyUnit ( tmp [ 1 ] ) ;
28375: LD_VAR 0 1
28379: PUSH
28380: LD_INT 1
28382: ARRAY
28383: PPUSH
28384: CALL_OW 65
// end ;
28388: PPOPN 1
28390: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28391: LD_EXP 67
28395: PUSH
28396: LD_EXP 105
28400: AND
28401: IFFALSE 28530
28403: GO 28405
28405: DISABLE
28406: LD_INT 0
28408: PPUSH
// begin uc_side := 0 ;
28409: LD_ADDR_OWVAR 20
28413: PUSH
28414: LD_INT 0
28416: ST_TO_ADDR
// uc_nation := nation_arabian ;
28417: LD_ADDR_OWVAR 21
28421: PUSH
28422: LD_INT 2
28424: ST_TO_ADDR
// hc_gallery :=  ;
28425: LD_ADDR_OWVAR 33
28429: PUSH
28430: LD_STRING 
28432: ST_TO_ADDR
// hc_name :=  ;
28433: LD_ADDR_OWVAR 26
28437: PUSH
28438: LD_STRING 
28440: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28441: LD_INT 1
28443: PPUSH
28444: LD_INT 11
28446: PPUSH
28447: LD_INT 10
28449: PPUSH
28450: CALL_OW 380
// un := CreateHuman ;
28454: LD_ADDR_VAR 0 1
28458: PUSH
28459: CALL_OW 44
28463: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28464: LD_VAR 0 1
28468: PPUSH
28469: LD_INT 1
28471: PPUSH
28472: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28476: LD_INT 35
28478: PPUSH
28479: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28483: LD_VAR 0 1
28487: PPUSH
28488: LD_INT 22
28490: PUSH
28491: LD_OWVAR 2
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PPUSH
28500: CALL_OW 69
28504: PPUSH
28505: LD_VAR 0 1
28509: PPUSH
28510: CALL_OW 74
28514: PPUSH
28515: CALL_OW 115
// until IsDead ( un ) ;
28519: LD_VAR 0 1
28523: PPUSH
28524: CALL_OW 301
28528: IFFALSE 28476
// end ;
28530: PPOPN 1
28532: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28533: LD_EXP 67
28537: PUSH
28538: LD_EXP 107
28542: AND
28543: IFFALSE 28555
28545: GO 28547
28547: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28548: LD_STRING earthquake(getX(game), 0, 32)
28550: PPUSH
28551: CALL_OW 559
28555: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28556: LD_EXP 67
28560: PUSH
28561: LD_EXP 108
28565: AND
28566: IFFALSE 28657
28568: GO 28570
28570: DISABLE
28571: LD_INT 0
28573: PPUSH
// begin enable ;
28574: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28575: LD_ADDR_VAR 0 1
28579: PUSH
28580: LD_INT 22
28582: PUSH
28583: LD_OWVAR 2
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 21
28594: PUSH
28595: LD_INT 2
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 33
28604: PUSH
28605: LD_INT 3
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: LIST
28616: PPUSH
28617: CALL_OW 69
28621: ST_TO_ADDR
// if not tmp then
28622: LD_VAR 0 1
28626: NOT
28627: IFFALSE 28631
// exit ;
28629: GO 28657
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28631: LD_VAR 0 1
28635: PUSH
28636: LD_INT 1
28638: PPUSH
28639: LD_VAR 0 1
28643: PPUSH
28644: CALL_OW 12
28648: ARRAY
28649: PPUSH
28650: LD_INT 1
28652: PPUSH
28653: CALL_OW 234
// end ;
28657: PPOPN 1
28659: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28660: LD_EXP 67
28664: PUSH
28665: LD_EXP 109
28669: AND
28670: IFFALSE 28811
28672: GO 28674
28674: DISABLE
28675: LD_INT 0
28677: PPUSH
28678: PPUSH
28679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28680: LD_ADDR_VAR 0 3
28684: PUSH
28685: LD_INT 22
28687: PUSH
28688: LD_OWVAR 2
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 25
28699: PUSH
28700: LD_INT 1
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PPUSH
28711: CALL_OW 69
28715: ST_TO_ADDR
// if not tmp then
28716: LD_VAR 0 3
28720: NOT
28721: IFFALSE 28725
// exit ;
28723: GO 28811
// un := tmp [ rand ( 1 , tmp ) ] ;
28725: LD_ADDR_VAR 0 2
28729: PUSH
28730: LD_VAR 0 3
28734: PUSH
28735: LD_INT 1
28737: PPUSH
28738: LD_VAR 0 3
28742: PPUSH
28743: CALL_OW 12
28747: ARRAY
28748: ST_TO_ADDR
// if Crawls ( un ) then
28749: LD_VAR 0 2
28753: PPUSH
28754: CALL_OW 318
28758: IFFALSE 28769
// ComWalk ( un ) ;
28760: LD_VAR 0 2
28764: PPUSH
28765: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28769: LD_VAR 0 2
28773: PPUSH
28774: LD_INT 9
28776: PPUSH
28777: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28781: LD_INT 28
28783: PPUSH
28784: LD_OWVAR 2
28788: PPUSH
28789: LD_INT 2
28791: PPUSH
28792: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28796: LD_INT 29
28798: PPUSH
28799: LD_OWVAR 2
28803: PPUSH
28804: LD_INT 2
28806: PPUSH
28807: CALL_OW 322
// end ;
28811: PPOPN 3
28813: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28814: LD_EXP 67
28818: PUSH
28819: LD_EXP 110
28823: AND
28824: IFFALSE 28935
28826: GO 28828
28828: DISABLE
28829: LD_INT 0
28831: PPUSH
28832: PPUSH
28833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28834: LD_ADDR_VAR 0 3
28838: PUSH
28839: LD_INT 22
28841: PUSH
28842: LD_OWVAR 2
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 25
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PPUSH
28865: CALL_OW 69
28869: ST_TO_ADDR
// if not tmp then
28870: LD_VAR 0 3
28874: NOT
28875: IFFALSE 28879
// exit ;
28877: GO 28935
// un := tmp [ rand ( 1 , tmp ) ] ;
28879: LD_ADDR_VAR 0 2
28883: PUSH
28884: LD_VAR 0 3
28888: PUSH
28889: LD_INT 1
28891: PPUSH
28892: LD_VAR 0 3
28896: PPUSH
28897: CALL_OW 12
28901: ARRAY
28902: ST_TO_ADDR
// if Crawls ( un ) then
28903: LD_VAR 0 2
28907: PPUSH
28908: CALL_OW 318
28912: IFFALSE 28923
// ComWalk ( un ) ;
28914: LD_VAR 0 2
28918: PPUSH
28919: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28923: LD_VAR 0 2
28927: PPUSH
28928: LD_INT 8
28930: PPUSH
28931: CALL_OW 336
// end ;
28935: PPOPN 3
28937: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28938: LD_EXP 67
28942: PUSH
28943: LD_EXP 111
28947: AND
28948: IFFALSE 29092
28950: GO 28952
28952: DISABLE
28953: LD_INT 0
28955: PPUSH
28956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28957: LD_ADDR_VAR 0 2
28961: PUSH
28962: LD_INT 22
28964: PUSH
28965: LD_OWVAR 2
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 21
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: LD_INT 34
28989: PUSH
28990: LD_INT 12
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 34
28999: PUSH
29000: LD_INT 51
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 34
29009: PUSH
29010: LD_INT 32
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: LIST
29027: PPUSH
29028: CALL_OW 69
29032: ST_TO_ADDR
// if not tmp then
29033: LD_VAR 0 2
29037: NOT
29038: IFFALSE 29042
// exit ;
29040: GO 29092
// for i in tmp do
29042: LD_ADDR_VAR 0 1
29046: PUSH
29047: LD_VAR 0 2
29051: PUSH
29052: FOR_IN
29053: IFFALSE 29090
// if GetCargo ( i , mat_artifact ) = 0 then
29055: LD_VAR 0 1
29059: PPUSH
29060: LD_INT 4
29062: PPUSH
29063: CALL_OW 289
29067: PUSH
29068: LD_INT 0
29070: EQUAL
29071: IFFALSE 29088
// SetCargo ( i , mat_siberit , 100 ) ;
29073: LD_VAR 0 1
29077: PPUSH
29078: LD_INT 3
29080: PPUSH
29081: LD_INT 100
29083: PPUSH
29084: CALL_OW 290
29088: GO 29052
29090: POP
29091: POP
// end ;
29092: PPOPN 2
29094: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29095: LD_EXP 67
29099: PUSH
29100: LD_EXP 112
29104: AND
29105: IFFALSE 29288
29107: GO 29109
29109: DISABLE
29110: LD_INT 0
29112: PPUSH
29113: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29114: LD_ADDR_VAR 0 2
29118: PUSH
29119: LD_INT 22
29121: PUSH
29122: LD_OWVAR 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PPUSH
29131: CALL_OW 69
29135: ST_TO_ADDR
// if not tmp then
29136: LD_VAR 0 2
29140: NOT
29141: IFFALSE 29145
// exit ;
29143: GO 29288
// for i := 1 to 2 do
29145: LD_ADDR_VAR 0 1
29149: PUSH
29150: DOUBLE
29151: LD_INT 1
29153: DEC
29154: ST_TO_ADDR
29155: LD_INT 2
29157: PUSH
29158: FOR_TO
29159: IFFALSE 29286
// begin uc_side := your_side ;
29161: LD_ADDR_OWVAR 20
29165: PUSH
29166: LD_OWVAR 2
29170: ST_TO_ADDR
// uc_nation := nation_american ;
29171: LD_ADDR_OWVAR 21
29175: PUSH
29176: LD_INT 1
29178: ST_TO_ADDR
// vc_chassis := us_morphling ;
29179: LD_ADDR_OWVAR 37
29183: PUSH
29184: LD_INT 5
29186: ST_TO_ADDR
// vc_engine := engine_siberite ;
29187: LD_ADDR_OWVAR 39
29191: PUSH
29192: LD_INT 3
29194: ST_TO_ADDR
// vc_control := control_computer ;
29195: LD_ADDR_OWVAR 38
29199: PUSH
29200: LD_INT 3
29202: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29203: LD_ADDR_OWVAR 40
29207: PUSH
29208: LD_INT 10
29210: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29211: LD_VAR 0 2
29215: PUSH
29216: LD_INT 1
29218: ARRAY
29219: PPUSH
29220: CALL_OW 310
29224: NOT
29225: IFFALSE 29272
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29227: CALL_OW 45
29231: PPUSH
29232: LD_VAR 0 2
29236: PUSH
29237: LD_INT 1
29239: ARRAY
29240: PPUSH
29241: CALL_OW 250
29245: PPUSH
29246: LD_VAR 0 2
29250: PUSH
29251: LD_INT 1
29253: ARRAY
29254: PPUSH
29255: CALL_OW 251
29259: PPUSH
29260: LD_INT 12
29262: PPUSH
29263: LD_INT 1
29265: PPUSH
29266: CALL_OW 50
29270: GO 29284
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29272: CALL_OW 45
29276: PPUSH
29277: LD_INT 1
29279: PPUSH
29280: CALL_OW 51
// end ;
29284: GO 29158
29286: POP
29287: POP
// end ;
29288: PPOPN 2
29290: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29291: LD_EXP 67
29295: PUSH
29296: LD_EXP 113
29300: AND
29301: IFFALSE 29523
29303: GO 29305
29305: DISABLE
29306: LD_INT 0
29308: PPUSH
29309: PPUSH
29310: PPUSH
29311: PPUSH
29312: PPUSH
29313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29314: LD_ADDR_VAR 0 6
29318: PUSH
29319: LD_INT 22
29321: PUSH
29322: LD_OWVAR 2
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 21
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 3
29343: PUSH
29344: LD_INT 23
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: LIST
29362: PPUSH
29363: CALL_OW 69
29367: ST_TO_ADDR
// if not tmp then
29368: LD_VAR 0 6
29372: NOT
29373: IFFALSE 29377
// exit ;
29375: GO 29523
// s1 := rand ( 1 , 4 ) ;
29377: LD_ADDR_VAR 0 2
29381: PUSH
29382: LD_INT 1
29384: PPUSH
29385: LD_INT 4
29387: PPUSH
29388: CALL_OW 12
29392: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29393: LD_ADDR_VAR 0 4
29397: PUSH
29398: LD_VAR 0 6
29402: PUSH
29403: LD_INT 1
29405: ARRAY
29406: PPUSH
29407: LD_VAR 0 2
29411: PPUSH
29412: CALL_OW 259
29416: ST_TO_ADDR
// if s1 = 1 then
29417: LD_VAR 0 2
29421: PUSH
29422: LD_INT 1
29424: EQUAL
29425: IFFALSE 29445
// s2 := rand ( 2 , 4 ) else
29427: LD_ADDR_VAR 0 3
29431: PUSH
29432: LD_INT 2
29434: PPUSH
29435: LD_INT 4
29437: PPUSH
29438: CALL_OW 12
29442: ST_TO_ADDR
29443: GO 29453
// s2 := 1 ;
29445: LD_ADDR_VAR 0 3
29449: PUSH
29450: LD_INT 1
29452: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29453: LD_ADDR_VAR 0 5
29457: PUSH
29458: LD_VAR 0 6
29462: PUSH
29463: LD_INT 1
29465: ARRAY
29466: PPUSH
29467: LD_VAR 0 3
29471: PPUSH
29472: CALL_OW 259
29476: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29477: LD_VAR 0 6
29481: PUSH
29482: LD_INT 1
29484: ARRAY
29485: PPUSH
29486: LD_VAR 0 2
29490: PPUSH
29491: LD_VAR 0 5
29495: PPUSH
29496: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29500: LD_VAR 0 6
29504: PUSH
29505: LD_INT 1
29507: ARRAY
29508: PPUSH
29509: LD_VAR 0 3
29513: PPUSH
29514: LD_VAR 0 4
29518: PPUSH
29519: CALL_OW 237
// end ;
29523: PPOPN 6
29525: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29526: LD_EXP 67
29530: PUSH
29531: LD_EXP 114
29535: AND
29536: IFFALSE 29615
29538: GO 29540
29540: DISABLE
29541: LD_INT 0
29543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29544: LD_ADDR_VAR 0 1
29548: PUSH
29549: LD_INT 22
29551: PUSH
29552: LD_OWVAR 2
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 30
29563: PUSH
29564: LD_INT 3
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PPUSH
29575: CALL_OW 69
29579: ST_TO_ADDR
// if not tmp then
29580: LD_VAR 0 1
29584: NOT
29585: IFFALSE 29589
// exit ;
29587: GO 29615
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29589: LD_VAR 0 1
29593: PUSH
29594: LD_INT 1
29596: PPUSH
29597: LD_VAR 0 1
29601: PPUSH
29602: CALL_OW 12
29606: ARRAY
29607: PPUSH
29608: LD_INT 1
29610: PPUSH
29611: CALL_OW 234
// end ;
29615: PPOPN 1
29617: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29618: LD_EXP 67
29622: PUSH
29623: LD_EXP 115
29627: AND
29628: IFFALSE 29740
29630: GO 29632
29632: DISABLE
29633: LD_INT 0
29635: PPUSH
29636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29637: LD_ADDR_VAR 0 2
29641: PUSH
29642: LD_INT 22
29644: PUSH
29645: LD_OWVAR 2
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: LD_INT 30
29659: PUSH
29660: LD_INT 27
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 30
29669: PUSH
29670: LD_INT 26
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 30
29679: PUSH
29680: LD_INT 28
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PPUSH
29697: CALL_OW 69
29701: ST_TO_ADDR
// if not tmp then
29702: LD_VAR 0 2
29706: NOT
29707: IFFALSE 29711
// exit ;
29709: GO 29740
// for i in tmp do
29711: LD_ADDR_VAR 0 1
29715: PUSH
29716: LD_VAR 0 2
29720: PUSH
29721: FOR_IN
29722: IFFALSE 29738
// SetLives ( i , 1 ) ;
29724: LD_VAR 0 1
29728: PPUSH
29729: LD_INT 1
29731: PPUSH
29732: CALL_OW 234
29736: GO 29721
29738: POP
29739: POP
// end ;
29740: PPOPN 2
29742: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29743: LD_EXP 67
29747: PUSH
29748: LD_EXP 116
29752: AND
29753: IFFALSE 30027
29755: GO 29757
29757: DISABLE
29758: LD_INT 0
29760: PPUSH
29761: PPUSH
29762: PPUSH
// begin i := rand ( 1 , 7 ) ;
29763: LD_ADDR_VAR 0 1
29767: PUSH
29768: LD_INT 1
29770: PPUSH
29771: LD_INT 7
29773: PPUSH
29774: CALL_OW 12
29778: ST_TO_ADDR
// case i of 1 :
29779: LD_VAR 0 1
29783: PUSH
29784: LD_INT 1
29786: DOUBLE
29787: EQUAL
29788: IFTRUE 29792
29790: GO 29802
29792: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29793: LD_STRING earthquake(getX(game), 0, 32)
29795: PPUSH
29796: CALL_OW 559
29800: GO 30027
29802: LD_INT 2
29804: DOUBLE
29805: EQUAL
29806: IFTRUE 29810
29808: GO 29824
29810: POP
// begin ToLua ( displayStucuk(); ) ;
29811: LD_STRING displayStucuk();
29813: PPUSH
29814: CALL_OW 559
// ResetFog ;
29818: CALL_OW 335
// end ; 3 :
29822: GO 30027
29824: LD_INT 3
29826: DOUBLE
29827: EQUAL
29828: IFTRUE 29832
29830: GO 29936
29832: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29833: LD_ADDR_VAR 0 2
29837: PUSH
29838: LD_INT 22
29840: PUSH
29841: LD_OWVAR 2
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 25
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PPUSH
29864: CALL_OW 69
29868: ST_TO_ADDR
// if not tmp then
29869: LD_VAR 0 2
29873: NOT
29874: IFFALSE 29878
// exit ;
29876: GO 30027
// un := tmp [ rand ( 1 , tmp ) ] ;
29878: LD_ADDR_VAR 0 3
29882: PUSH
29883: LD_VAR 0 2
29887: PUSH
29888: LD_INT 1
29890: PPUSH
29891: LD_VAR 0 2
29895: PPUSH
29896: CALL_OW 12
29900: ARRAY
29901: ST_TO_ADDR
// if Crawls ( un ) then
29902: LD_VAR 0 3
29906: PPUSH
29907: CALL_OW 318
29911: IFFALSE 29922
// ComWalk ( un ) ;
29913: LD_VAR 0 3
29917: PPUSH
29918: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29922: LD_VAR 0 3
29926: PPUSH
29927: LD_INT 8
29929: PPUSH
29930: CALL_OW 336
// end ; 4 :
29934: GO 30027
29936: LD_INT 4
29938: DOUBLE
29939: EQUAL
29940: IFTRUE 29944
29942: GO 30005
29944: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29945: LD_ADDR_VAR 0 2
29949: PUSH
29950: LD_INT 22
29952: PUSH
29953: LD_OWVAR 2
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 30
29964: PUSH
29965: LD_INT 29
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PPUSH
29976: CALL_OW 69
29980: ST_TO_ADDR
// if not tmp then
29981: LD_VAR 0 2
29985: NOT
29986: IFFALSE 29990
// exit ;
29988: GO 30027
// DestroyUnit ( tmp [ 1 ] ) ;
29990: LD_VAR 0 2
29994: PUSH
29995: LD_INT 1
29997: ARRAY
29998: PPUSH
29999: CALL_OW 65
// end ; 5 .. 7 :
30003: GO 30027
30005: LD_INT 5
30007: DOUBLE
30008: GREATEREQUAL
30009: IFFALSE 30017
30011: LD_INT 7
30013: DOUBLE
30014: LESSEQUAL
30015: IFTRUE 30019
30017: GO 30026
30019: POP
// StreamSibBomb ; end ;
30020: CALL 26277 0 0
30024: GO 30027
30026: POP
// end ;
30027: PPOPN 3
30029: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30030: LD_EXP 67
30034: PUSH
30035: LD_EXP 117
30039: AND
30040: IFFALSE 30196
30042: GO 30044
30044: DISABLE
30045: LD_INT 0
30047: PPUSH
30048: PPUSH
30049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30050: LD_ADDR_VAR 0 2
30054: PUSH
30055: LD_INT 81
30057: PUSH
30058: LD_OWVAR 2
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: LD_INT 21
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 21
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PPUSH
30099: CALL_OW 69
30103: ST_TO_ADDR
// if not tmp then
30104: LD_VAR 0 2
30108: NOT
30109: IFFALSE 30113
// exit ;
30111: GO 30196
// p := 0 ;
30113: LD_ADDR_VAR 0 3
30117: PUSH
30118: LD_INT 0
30120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30121: LD_INT 35
30123: PPUSH
30124: CALL_OW 67
// p := p + 1 ;
30128: LD_ADDR_VAR 0 3
30132: PUSH
30133: LD_VAR 0 3
30137: PUSH
30138: LD_INT 1
30140: PLUS
30141: ST_TO_ADDR
// for i in tmp do
30142: LD_ADDR_VAR 0 1
30146: PUSH
30147: LD_VAR 0 2
30151: PUSH
30152: FOR_IN
30153: IFFALSE 30184
// if GetLives ( i ) < 1000 then
30155: LD_VAR 0 1
30159: PPUSH
30160: CALL_OW 256
30164: PUSH
30165: LD_INT 1000
30167: LESS
30168: IFFALSE 30182
// SetLives ( i , 1000 ) ;
30170: LD_VAR 0 1
30174: PPUSH
30175: LD_INT 1000
30177: PPUSH
30178: CALL_OW 234
30182: GO 30152
30184: POP
30185: POP
// until p > 20 ;
30186: LD_VAR 0 3
30190: PUSH
30191: LD_INT 20
30193: GREATER
30194: IFFALSE 30121
// end ;
30196: PPOPN 3
30198: END
// every 0 0$1 trigger StreamModeActive and sTime do
30199: LD_EXP 67
30203: PUSH
30204: LD_EXP 118
30208: AND
30209: IFFALSE 30244
30211: GO 30213
30213: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30214: LD_INT 28
30216: PPUSH
30217: LD_OWVAR 2
30221: PPUSH
30222: LD_INT 2
30224: PPUSH
30225: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30229: LD_INT 30
30231: PPUSH
30232: LD_OWVAR 2
30236: PPUSH
30237: LD_INT 2
30239: PPUSH
30240: CALL_OW 322
// end ;
30244: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30245: LD_EXP 67
30249: PUSH
30250: LD_EXP 119
30254: AND
30255: IFFALSE 30376
30257: GO 30259
30259: DISABLE
30260: LD_INT 0
30262: PPUSH
30263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30264: LD_ADDR_VAR 0 2
30268: PUSH
30269: LD_INT 22
30271: PUSH
30272: LD_OWVAR 2
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 21
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 3
30293: PUSH
30294: LD_INT 23
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: PPUSH
30313: CALL_OW 69
30317: ST_TO_ADDR
// if not tmp then
30318: LD_VAR 0 2
30322: NOT
30323: IFFALSE 30327
// exit ;
30325: GO 30376
// for i in tmp do
30327: LD_ADDR_VAR 0 1
30331: PUSH
30332: LD_VAR 0 2
30336: PUSH
30337: FOR_IN
30338: IFFALSE 30374
// begin if Crawls ( i ) then
30340: LD_VAR 0 1
30344: PPUSH
30345: CALL_OW 318
30349: IFFALSE 30360
// ComWalk ( i ) ;
30351: LD_VAR 0 1
30355: PPUSH
30356: CALL_OW 138
// SetClass ( i , 2 ) ;
30360: LD_VAR 0 1
30364: PPUSH
30365: LD_INT 2
30367: PPUSH
30368: CALL_OW 336
// end ;
30372: GO 30337
30374: POP
30375: POP
// end ;
30376: PPOPN 2
30378: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30379: LD_EXP 67
30383: PUSH
30384: LD_EXP 120
30388: AND
30389: IFFALSE 30670
30391: GO 30393
30393: DISABLE
30394: LD_INT 0
30396: PPUSH
30397: PPUSH
30398: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30399: LD_OWVAR 2
30403: PPUSH
30404: LD_INT 9
30406: PPUSH
30407: LD_INT 1
30409: PPUSH
30410: LD_INT 1
30412: PPUSH
30413: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30417: LD_INT 9
30419: PPUSH
30420: LD_OWVAR 2
30424: PPUSH
30425: CALL_OW 343
// uc_side := 9 ;
30429: LD_ADDR_OWVAR 20
30433: PUSH
30434: LD_INT 9
30436: ST_TO_ADDR
// uc_nation := 2 ;
30437: LD_ADDR_OWVAR 21
30441: PUSH
30442: LD_INT 2
30444: ST_TO_ADDR
// hc_name := Dark Warrior ;
30445: LD_ADDR_OWVAR 26
30449: PUSH
30450: LD_STRING Dark Warrior
30452: ST_TO_ADDR
// hc_gallery :=  ;
30453: LD_ADDR_OWVAR 33
30457: PUSH
30458: LD_STRING 
30460: ST_TO_ADDR
// hc_noskilllimit := true ;
30461: LD_ADDR_OWVAR 76
30465: PUSH
30466: LD_INT 1
30468: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30469: LD_ADDR_OWVAR 31
30473: PUSH
30474: LD_INT 30
30476: PUSH
30477: LD_INT 30
30479: PUSH
30480: LD_INT 30
30482: PUSH
30483: LD_INT 30
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: ST_TO_ADDR
// un := CreateHuman ;
30492: LD_ADDR_VAR 0 3
30496: PUSH
30497: CALL_OW 44
30501: ST_TO_ADDR
// hc_noskilllimit := false ;
30502: LD_ADDR_OWVAR 76
30506: PUSH
30507: LD_INT 0
30509: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30510: LD_VAR 0 3
30514: PPUSH
30515: LD_INT 1
30517: PPUSH
30518: CALL_OW 51
// p := 0 ;
30522: LD_ADDR_VAR 0 2
30526: PUSH
30527: LD_INT 0
30529: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30530: LD_INT 35
30532: PPUSH
30533: CALL_OW 67
// p := p + 1 ;
30537: LD_ADDR_VAR 0 2
30541: PUSH
30542: LD_VAR 0 2
30546: PUSH
30547: LD_INT 1
30549: PLUS
30550: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30551: LD_VAR 0 3
30555: PPUSH
30556: CALL_OW 256
30560: PUSH
30561: LD_INT 1000
30563: LESS
30564: IFFALSE 30578
// SetLives ( un , 1000 ) ;
30566: LD_VAR 0 3
30570: PPUSH
30571: LD_INT 1000
30573: PPUSH
30574: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30578: LD_VAR 0 3
30582: PPUSH
30583: LD_INT 81
30585: PUSH
30586: LD_OWVAR 2
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 91
30597: PUSH
30598: LD_VAR 0 3
30602: PUSH
30603: LD_INT 30
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PPUSH
30615: CALL_OW 69
30619: PPUSH
30620: LD_VAR 0 3
30624: PPUSH
30625: CALL_OW 74
30629: PPUSH
30630: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30634: LD_VAR 0 2
30638: PUSH
30639: LD_INT 60
30641: GREATER
30642: PUSH
30643: LD_VAR 0 3
30647: PPUSH
30648: CALL_OW 301
30652: OR
30653: IFFALSE 30530
// if un then
30655: LD_VAR 0 3
30659: IFFALSE 30670
// RemoveUnit ( un ) ;
30661: LD_VAR 0 3
30665: PPUSH
30666: CALL_OW 64
// end ;
30670: PPOPN 3
30672: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30673: LD_INT 0
30675: PPUSH
// case cmd of 301 :
30676: LD_VAR 0 1
30680: PUSH
30681: LD_INT 301
30683: DOUBLE
30684: EQUAL
30685: IFTRUE 30689
30687: GO 30721
30689: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30690: LD_VAR 0 6
30694: PPUSH
30695: LD_VAR 0 7
30699: PPUSH
30700: LD_VAR 0 8
30704: PPUSH
30705: LD_VAR 0 4
30709: PPUSH
30710: LD_VAR 0 5
30714: PPUSH
30715: CALL 31922 0 5
30719: GO 30842
30721: LD_INT 302
30723: DOUBLE
30724: EQUAL
30725: IFTRUE 30729
30727: GO 30766
30729: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30730: LD_VAR 0 6
30734: PPUSH
30735: LD_VAR 0 7
30739: PPUSH
30740: LD_VAR 0 8
30744: PPUSH
30745: LD_VAR 0 9
30749: PPUSH
30750: LD_VAR 0 4
30754: PPUSH
30755: LD_VAR 0 5
30759: PPUSH
30760: CALL 32013 0 6
30764: GO 30842
30766: LD_INT 303
30768: DOUBLE
30769: EQUAL
30770: IFTRUE 30774
30772: GO 30811
30774: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30775: LD_VAR 0 6
30779: PPUSH
30780: LD_VAR 0 7
30784: PPUSH
30785: LD_VAR 0 8
30789: PPUSH
30790: LD_VAR 0 9
30794: PPUSH
30795: LD_VAR 0 4
30799: PPUSH
30800: LD_VAR 0 5
30804: PPUSH
30805: CALL 30847 0 6
30809: GO 30842
30811: LD_INT 304
30813: DOUBLE
30814: EQUAL
30815: IFTRUE 30819
30817: GO 30841
30819: POP
// hHackTeleport ( unit , x , y ) ; end ;
30820: LD_VAR 0 2
30824: PPUSH
30825: LD_VAR 0 4
30829: PPUSH
30830: LD_VAR 0 5
30834: PPUSH
30835: CALL 32606 0 3
30839: GO 30842
30841: POP
// end ;
30842: LD_VAR 0 12
30846: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30847: LD_INT 0
30849: PPUSH
30850: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30851: LD_VAR 0 1
30855: PUSH
30856: LD_INT 1
30858: LESS
30859: PUSH
30860: LD_VAR 0 1
30864: PUSH
30865: LD_INT 3
30867: GREATER
30868: OR
30869: PUSH
30870: LD_VAR 0 5
30874: PPUSH
30875: LD_VAR 0 6
30879: PPUSH
30880: CALL_OW 428
30884: OR
30885: IFFALSE 30889
// exit ;
30887: GO 31609
// uc_side := your_side ;
30889: LD_ADDR_OWVAR 20
30893: PUSH
30894: LD_OWVAR 2
30898: ST_TO_ADDR
// uc_nation := nation ;
30899: LD_ADDR_OWVAR 21
30903: PUSH
30904: LD_VAR 0 1
30908: ST_TO_ADDR
// bc_level = 1 ;
30909: LD_ADDR_OWVAR 43
30913: PUSH
30914: LD_INT 1
30916: ST_TO_ADDR
// case btype of 1 :
30917: LD_VAR 0 2
30921: PUSH
30922: LD_INT 1
30924: DOUBLE
30925: EQUAL
30926: IFTRUE 30930
30928: GO 30941
30930: POP
// bc_type := b_depot ; 2 :
30931: LD_ADDR_OWVAR 42
30935: PUSH
30936: LD_INT 0
30938: ST_TO_ADDR
30939: GO 31553
30941: LD_INT 2
30943: DOUBLE
30944: EQUAL
30945: IFTRUE 30949
30947: GO 30960
30949: POP
// bc_type := b_warehouse ; 3 :
30950: LD_ADDR_OWVAR 42
30954: PUSH
30955: LD_INT 1
30957: ST_TO_ADDR
30958: GO 31553
30960: LD_INT 3
30962: DOUBLE
30963: EQUAL
30964: IFTRUE 30968
30966: GO 30979
30968: POP
// bc_type := b_lab ; 4 .. 9 :
30969: LD_ADDR_OWVAR 42
30973: PUSH
30974: LD_INT 6
30976: ST_TO_ADDR
30977: GO 31553
30979: LD_INT 4
30981: DOUBLE
30982: GREATEREQUAL
30983: IFFALSE 30991
30985: LD_INT 9
30987: DOUBLE
30988: LESSEQUAL
30989: IFTRUE 30993
30991: GO 31045
30993: POP
// begin bc_type := b_lab_half ;
30994: LD_ADDR_OWVAR 42
30998: PUSH
30999: LD_INT 7
31001: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31002: LD_ADDR_OWVAR 44
31006: PUSH
31007: LD_INT 10
31009: PUSH
31010: LD_INT 11
31012: PUSH
31013: LD_INT 12
31015: PUSH
31016: LD_INT 15
31018: PUSH
31019: LD_INT 14
31021: PUSH
31022: LD_INT 13
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: PUSH
31033: LD_VAR 0 2
31037: PUSH
31038: LD_INT 3
31040: MINUS
31041: ARRAY
31042: ST_TO_ADDR
// end ; 10 .. 13 :
31043: GO 31553
31045: LD_INT 10
31047: DOUBLE
31048: GREATEREQUAL
31049: IFFALSE 31057
31051: LD_INT 13
31053: DOUBLE
31054: LESSEQUAL
31055: IFTRUE 31059
31057: GO 31136
31059: POP
// begin bc_type := b_lab_full ;
31060: LD_ADDR_OWVAR 42
31064: PUSH
31065: LD_INT 8
31067: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31068: LD_ADDR_OWVAR 44
31072: PUSH
31073: LD_INT 10
31075: PUSH
31076: LD_INT 12
31078: PUSH
31079: LD_INT 14
31081: PUSH
31082: LD_INT 13
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: PUSH
31091: LD_VAR 0 2
31095: PUSH
31096: LD_INT 9
31098: MINUS
31099: ARRAY
31100: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31101: LD_ADDR_OWVAR 45
31105: PUSH
31106: LD_INT 11
31108: PUSH
31109: LD_INT 15
31111: PUSH
31112: LD_INT 12
31114: PUSH
31115: LD_INT 15
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: PUSH
31124: LD_VAR 0 2
31128: PUSH
31129: LD_INT 9
31131: MINUS
31132: ARRAY
31133: ST_TO_ADDR
// end ; 14 :
31134: GO 31553
31136: LD_INT 14
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 31155
31144: POP
// bc_type := b_workshop ; 15 :
31145: LD_ADDR_OWVAR 42
31149: PUSH
31150: LD_INT 2
31152: ST_TO_ADDR
31153: GO 31553
31155: LD_INT 15
31157: DOUBLE
31158: EQUAL
31159: IFTRUE 31163
31161: GO 31174
31163: POP
// bc_type := b_factory ; 16 :
31164: LD_ADDR_OWVAR 42
31168: PUSH
31169: LD_INT 3
31171: ST_TO_ADDR
31172: GO 31553
31174: LD_INT 16
31176: DOUBLE
31177: EQUAL
31178: IFTRUE 31182
31180: GO 31193
31182: POP
// bc_type := b_ext_gun ; 17 :
31183: LD_ADDR_OWVAR 42
31187: PUSH
31188: LD_INT 17
31190: ST_TO_ADDR
31191: GO 31553
31193: LD_INT 17
31195: DOUBLE
31196: EQUAL
31197: IFTRUE 31201
31199: GO 31229
31201: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31202: LD_ADDR_OWVAR 42
31206: PUSH
31207: LD_INT 19
31209: PUSH
31210: LD_INT 23
31212: PUSH
31213: LD_INT 19
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: PUSH
31221: LD_VAR 0 1
31225: ARRAY
31226: ST_TO_ADDR
31227: GO 31553
31229: LD_INT 18
31231: DOUBLE
31232: EQUAL
31233: IFTRUE 31237
31235: GO 31248
31237: POP
// bc_type := b_ext_radar ; 19 :
31238: LD_ADDR_OWVAR 42
31242: PUSH
31243: LD_INT 20
31245: ST_TO_ADDR
31246: GO 31553
31248: LD_INT 19
31250: DOUBLE
31251: EQUAL
31252: IFTRUE 31256
31254: GO 31267
31256: POP
// bc_type := b_ext_radio ; 20 :
31257: LD_ADDR_OWVAR 42
31261: PUSH
31262: LD_INT 22
31264: ST_TO_ADDR
31265: GO 31553
31267: LD_INT 20
31269: DOUBLE
31270: EQUAL
31271: IFTRUE 31275
31273: GO 31286
31275: POP
// bc_type := b_ext_siberium ; 21 :
31276: LD_ADDR_OWVAR 42
31280: PUSH
31281: LD_INT 21
31283: ST_TO_ADDR
31284: GO 31553
31286: LD_INT 21
31288: DOUBLE
31289: EQUAL
31290: IFTRUE 31294
31292: GO 31305
31294: POP
// bc_type := b_ext_computer ; 22 :
31295: LD_ADDR_OWVAR 42
31299: PUSH
31300: LD_INT 24
31302: ST_TO_ADDR
31303: GO 31553
31305: LD_INT 22
31307: DOUBLE
31308: EQUAL
31309: IFTRUE 31313
31311: GO 31324
31313: POP
// bc_type := b_ext_track ; 23 :
31314: LD_ADDR_OWVAR 42
31318: PUSH
31319: LD_INT 16
31321: ST_TO_ADDR
31322: GO 31553
31324: LD_INT 23
31326: DOUBLE
31327: EQUAL
31328: IFTRUE 31332
31330: GO 31343
31332: POP
// bc_type := b_ext_laser ; 24 :
31333: LD_ADDR_OWVAR 42
31337: PUSH
31338: LD_INT 25
31340: ST_TO_ADDR
31341: GO 31553
31343: LD_INT 24
31345: DOUBLE
31346: EQUAL
31347: IFTRUE 31351
31349: GO 31362
31351: POP
// bc_type := b_control_tower ; 25 :
31352: LD_ADDR_OWVAR 42
31356: PUSH
31357: LD_INT 36
31359: ST_TO_ADDR
31360: GO 31553
31362: LD_INT 25
31364: DOUBLE
31365: EQUAL
31366: IFTRUE 31370
31368: GO 31381
31370: POP
// bc_type := b_breastwork ; 26 :
31371: LD_ADDR_OWVAR 42
31375: PUSH
31376: LD_INT 31
31378: ST_TO_ADDR
31379: GO 31553
31381: LD_INT 26
31383: DOUBLE
31384: EQUAL
31385: IFTRUE 31389
31387: GO 31400
31389: POP
// bc_type := b_bunker ; 27 :
31390: LD_ADDR_OWVAR 42
31394: PUSH
31395: LD_INT 32
31397: ST_TO_ADDR
31398: GO 31553
31400: LD_INT 27
31402: DOUBLE
31403: EQUAL
31404: IFTRUE 31408
31406: GO 31419
31408: POP
// bc_type := b_turret ; 28 :
31409: LD_ADDR_OWVAR 42
31413: PUSH
31414: LD_INT 33
31416: ST_TO_ADDR
31417: GO 31553
31419: LD_INT 28
31421: DOUBLE
31422: EQUAL
31423: IFTRUE 31427
31425: GO 31438
31427: POP
// bc_type := b_armoury ; 29 :
31428: LD_ADDR_OWVAR 42
31432: PUSH
31433: LD_INT 4
31435: ST_TO_ADDR
31436: GO 31553
31438: LD_INT 29
31440: DOUBLE
31441: EQUAL
31442: IFTRUE 31446
31444: GO 31457
31446: POP
// bc_type := b_barracks ; 30 :
31447: LD_ADDR_OWVAR 42
31451: PUSH
31452: LD_INT 5
31454: ST_TO_ADDR
31455: GO 31553
31457: LD_INT 30
31459: DOUBLE
31460: EQUAL
31461: IFTRUE 31465
31463: GO 31476
31465: POP
// bc_type := b_solar_power ; 31 :
31466: LD_ADDR_OWVAR 42
31470: PUSH
31471: LD_INT 27
31473: ST_TO_ADDR
31474: GO 31553
31476: LD_INT 31
31478: DOUBLE
31479: EQUAL
31480: IFTRUE 31484
31482: GO 31495
31484: POP
// bc_type := b_oil_power ; 32 :
31485: LD_ADDR_OWVAR 42
31489: PUSH
31490: LD_INT 26
31492: ST_TO_ADDR
31493: GO 31553
31495: LD_INT 32
31497: DOUBLE
31498: EQUAL
31499: IFTRUE 31503
31501: GO 31514
31503: POP
// bc_type := b_siberite_power ; 33 :
31504: LD_ADDR_OWVAR 42
31508: PUSH
31509: LD_INT 28
31511: ST_TO_ADDR
31512: GO 31553
31514: LD_INT 33
31516: DOUBLE
31517: EQUAL
31518: IFTRUE 31522
31520: GO 31533
31522: POP
// bc_type := b_oil_mine ; 34 :
31523: LD_ADDR_OWVAR 42
31527: PUSH
31528: LD_INT 29
31530: ST_TO_ADDR
31531: GO 31553
31533: LD_INT 34
31535: DOUBLE
31536: EQUAL
31537: IFTRUE 31541
31539: GO 31552
31541: POP
// bc_type := b_siberite_mine ; end ;
31542: LD_ADDR_OWVAR 42
31546: PUSH
31547: LD_INT 30
31549: ST_TO_ADDR
31550: GO 31553
31552: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31553: LD_ADDR_VAR 0 8
31557: PUSH
31558: LD_VAR 0 5
31562: PPUSH
31563: LD_VAR 0 6
31567: PPUSH
31568: LD_VAR 0 3
31572: PPUSH
31573: CALL_OW 47
31577: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31578: LD_OWVAR 42
31582: PUSH
31583: LD_INT 32
31585: PUSH
31586: LD_INT 33
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: IN
31593: IFFALSE 31609
// PlaceWeaponTurret ( b , weapon ) ;
31595: LD_VAR 0 8
31599: PPUSH
31600: LD_VAR 0 4
31604: PPUSH
31605: CALL_OW 431
// end ;
31609: LD_VAR 0 7
31613: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31614: LD_INT 0
31616: PPUSH
31617: PPUSH
31618: PPUSH
31619: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31620: LD_ADDR_VAR 0 4
31624: PUSH
31625: LD_INT 22
31627: PUSH
31628: LD_OWVAR 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: LD_INT 30
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 30
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: LIST
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PPUSH
31669: CALL_OW 69
31673: ST_TO_ADDR
// if not tmp then
31674: LD_VAR 0 4
31678: NOT
31679: IFFALSE 31683
// exit ;
31681: GO 31742
// for i in tmp do
31683: LD_ADDR_VAR 0 2
31687: PUSH
31688: LD_VAR 0 4
31692: PUSH
31693: FOR_IN
31694: IFFALSE 31740
// for j = 1 to 3 do
31696: LD_ADDR_VAR 0 3
31700: PUSH
31701: DOUBLE
31702: LD_INT 1
31704: DEC
31705: ST_TO_ADDR
31706: LD_INT 3
31708: PUSH
31709: FOR_TO
31710: IFFALSE 31736
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31712: LD_VAR 0 2
31716: PPUSH
31717: CALL_OW 274
31721: PPUSH
31722: LD_VAR 0 3
31726: PPUSH
31727: LD_INT 99999
31729: PPUSH
31730: CALL_OW 277
31734: GO 31709
31736: POP
31737: POP
31738: GO 31693
31740: POP
31741: POP
// end ;
31742: LD_VAR 0 1
31746: RET
// export function hHackSetLevel10 ; var i , j ; begin
31747: LD_INT 0
31749: PPUSH
31750: PPUSH
31751: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31752: LD_ADDR_VAR 0 2
31756: PUSH
31757: LD_INT 21
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PPUSH
31767: CALL_OW 69
31771: PUSH
31772: FOR_IN
31773: IFFALSE 31825
// if IsSelected ( i ) then
31775: LD_VAR 0 2
31779: PPUSH
31780: CALL_OW 306
31784: IFFALSE 31823
// begin for j := 1 to 4 do
31786: LD_ADDR_VAR 0 3
31790: PUSH
31791: DOUBLE
31792: LD_INT 1
31794: DEC
31795: ST_TO_ADDR
31796: LD_INT 4
31798: PUSH
31799: FOR_TO
31800: IFFALSE 31821
// SetSkill ( i , j , 10 ) ;
31802: LD_VAR 0 2
31806: PPUSH
31807: LD_VAR 0 3
31811: PPUSH
31812: LD_INT 10
31814: PPUSH
31815: CALL_OW 237
31819: GO 31799
31821: POP
31822: POP
// end ;
31823: GO 31772
31825: POP
31826: POP
// end ;
31827: LD_VAR 0 1
31831: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31832: LD_INT 0
31834: PPUSH
31835: PPUSH
31836: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31837: LD_ADDR_VAR 0 2
31841: PUSH
31842: LD_INT 22
31844: PUSH
31845: LD_OWVAR 2
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 21
31856: PUSH
31857: LD_INT 1
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PPUSH
31868: CALL_OW 69
31872: PUSH
31873: FOR_IN
31874: IFFALSE 31915
// begin for j := 1 to 4 do
31876: LD_ADDR_VAR 0 3
31880: PUSH
31881: DOUBLE
31882: LD_INT 1
31884: DEC
31885: ST_TO_ADDR
31886: LD_INT 4
31888: PUSH
31889: FOR_TO
31890: IFFALSE 31911
// SetSkill ( i , j , 10 ) ;
31892: LD_VAR 0 2
31896: PPUSH
31897: LD_VAR 0 3
31901: PPUSH
31902: LD_INT 10
31904: PPUSH
31905: CALL_OW 237
31909: GO 31889
31911: POP
31912: POP
// end ;
31913: GO 31873
31915: POP
31916: POP
// end ;
31917: LD_VAR 0 1
31921: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31922: LD_INT 0
31924: PPUSH
// uc_side := your_side ;
31925: LD_ADDR_OWVAR 20
31929: PUSH
31930: LD_OWVAR 2
31934: ST_TO_ADDR
// uc_nation := nation ;
31935: LD_ADDR_OWVAR 21
31939: PUSH
31940: LD_VAR 0 1
31944: ST_TO_ADDR
// InitHc ;
31945: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31949: LD_INT 0
31951: PPUSH
31952: LD_VAR 0 2
31956: PPUSH
31957: LD_VAR 0 3
31961: PPUSH
31962: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31966: LD_VAR 0 4
31970: PPUSH
31971: LD_VAR 0 5
31975: PPUSH
31976: CALL_OW 428
31980: PUSH
31981: LD_INT 0
31983: EQUAL
31984: IFFALSE 32008
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31986: CALL_OW 44
31990: PPUSH
31991: LD_VAR 0 4
31995: PPUSH
31996: LD_VAR 0 5
32000: PPUSH
32001: LD_INT 1
32003: PPUSH
32004: CALL_OW 48
// end ;
32008: LD_VAR 0 6
32012: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32013: LD_INT 0
32015: PPUSH
32016: PPUSH
// uc_side := your_side ;
32017: LD_ADDR_OWVAR 20
32021: PUSH
32022: LD_OWVAR 2
32026: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32027: LD_VAR 0 1
32031: PUSH
32032: LD_INT 1
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: LD_INT 3
32040: PUSH
32041: LD_INT 4
32043: PUSH
32044: LD_INT 5
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: IN
32054: IFFALSE 32066
// uc_nation := nation_american else
32056: LD_ADDR_OWVAR 21
32060: PUSH
32061: LD_INT 1
32063: ST_TO_ADDR
32064: GO 32109
// if chassis in [ 11 , 12 , 13 , 14 ] then
32066: LD_VAR 0 1
32070: PUSH
32071: LD_INT 11
32073: PUSH
32074: LD_INT 12
32076: PUSH
32077: LD_INT 13
32079: PUSH
32080: LD_INT 14
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: IN
32089: IFFALSE 32101
// uc_nation := nation_arabian else
32091: LD_ADDR_OWVAR 21
32095: PUSH
32096: LD_INT 2
32098: ST_TO_ADDR
32099: GO 32109
// uc_nation := nation_russian ;
32101: LD_ADDR_OWVAR 21
32105: PUSH
32106: LD_INT 3
32108: ST_TO_ADDR
// vc_chassis := chassis ;
32109: LD_ADDR_OWVAR 37
32113: PUSH
32114: LD_VAR 0 1
32118: ST_TO_ADDR
// vc_engine := engine ;
32119: LD_ADDR_OWVAR 39
32123: PUSH
32124: LD_VAR 0 2
32128: ST_TO_ADDR
// vc_control := control ;
32129: LD_ADDR_OWVAR 38
32133: PUSH
32134: LD_VAR 0 3
32138: ST_TO_ADDR
// vc_weapon := weapon ;
32139: LD_ADDR_OWVAR 40
32143: PUSH
32144: LD_VAR 0 4
32148: ST_TO_ADDR
// un := CreateVehicle ;
32149: LD_ADDR_VAR 0 8
32153: PUSH
32154: CALL_OW 45
32158: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32159: LD_VAR 0 8
32163: PPUSH
32164: LD_INT 0
32166: PPUSH
32167: LD_INT 5
32169: PPUSH
32170: CALL_OW 12
32174: PPUSH
32175: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32179: LD_VAR 0 8
32183: PPUSH
32184: LD_VAR 0 5
32188: PPUSH
32189: LD_VAR 0 6
32193: PPUSH
32194: LD_INT 1
32196: PPUSH
32197: CALL_OW 48
// end ;
32201: LD_VAR 0 7
32205: RET
// export hInvincible ; every 1 do
32206: GO 32208
32208: DISABLE
// hInvincible := [ ] ;
32209: LD_ADDR_EXP 121
32213: PUSH
32214: EMPTY
32215: ST_TO_ADDR
32216: END
// every 10 do var i ;
32217: GO 32219
32219: DISABLE
32220: LD_INT 0
32222: PPUSH
// begin enable ;
32223: ENABLE
// if not hInvincible then
32224: LD_EXP 121
32228: NOT
32229: IFFALSE 32233
// exit ;
32231: GO 32277
// for i in hInvincible do
32233: LD_ADDR_VAR 0 1
32237: PUSH
32238: LD_EXP 121
32242: PUSH
32243: FOR_IN
32244: IFFALSE 32275
// if GetLives ( i ) < 1000 then
32246: LD_VAR 0 1
32250: PPUSH
32251: CALL_OW 256
32255: PUSH
32256: LD_INT 1000
32258: LESS
32259: IFFALSE 32273
// SetLives ( i , 1000 ) ;
32261: LD_VAR 0 1
32265: PPUSH
32266: LD_INT 1000
32268: PPUSH
32269: CALL_OW 234
32273: GO 32243
32275: POP
32276: POP
// end ;
32277: PPOPN 1
32279: END
// export function hHackInvincible ; var i ; begin
32280: LD_INT 0
32282: PPUSH
32283: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32284: LD_ADDR_VAR 0 2
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 21
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 21
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: LIST
32316: PPUSH
32317: CALL_OW 69
32321: PUSH
32322: FOR_IN
32323: IFFALSE 32384
// if IsSelected ( i ) then
32325: LD_VAR 0 2
32329: PPUSH
32330: CALL_OW 306
32334: IFFALSE 32382
// begin if i in hInvincible then
32336: LD_VAR 0 2
32340: PUSH
32341: LD_EXP 121
32345: IN
32346: IFFALSE 32366
// hInvincible := hInvincible diff i else
32348: LD_ADDR_EXP 121
32352: PUSH
32353: LD_EXP 121
32357: PUSH
32358: LD_VAR 0 2
32362: DIFF
32363: ST_TO_ADDR
32364: GO 32382
// hInvincible := hInvincible union i ;
32366: LD_ADDR_EXP 121
32370: PUSH
32371: LD_EXP 121
32375: PUSH
32376: LD_VAR 0 2
32380: UNION
32381: ST_TO_ADDR
// end ;
32382: GO 32322
32384: POP
32385: POP
// end ;
32386: LD_VAR 0 1
32390: RET
// export function hHackInvisible ; var i , j ; begin
32391: LD_INT 0
32393: PPUSH
32394: PPUSH
32395: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32396: LD_ADDR_VAR 0 2
32400: PUSH
32401: LD_INT 21
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PPUSH
32411: CALL_OW 69
32415: PUSH
32416: FOR_IN
32417: IFFALSE 32441
// if IsSelected ( i ) then
32419: LD_VAR 0 2
32423: PPUSH
32424: CALL_OW 306
32428: IFFALSE 32439
// ComForceInvisible ( i ) ;
32430: LD_VAR 0 2
32434: PPUSH
32435: CALL_OW 496
32439: GO 32416
32441: POP
32442: POP
// end ;
32443: LD_VAR 0 1
32447: RET
// export function hHackChangeYourSide ; begin
32448: LD_INT 0
32450: PPUSH
// if your_side = 8 then
32451: LD_OWVAR 2
32455: PUSH
32456: LD_INT 8
32458: EQUAL
32459: IFFALSE 32471
// your_side := 0 else
32461: LD_ADDR_OWVAR 2
32465: PUSH
32466: LD_INT 0
32468: ST_TO_ADDR
32469: GO 32485
// your_side := your_side + 1 ;
32471: LD_ADDR_OWVAR 2
32475: PUSH
32476: LD_OWVAR 2
32480: PUSH
32481: LD_INT 1
32483: PLUS
32484: ST_TO_ADDR
// end ;
32485: LD_VAR 0 1
32489: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32490: LD_INT 0
32492: PPUSH
32493: PPUSH
32494: PPUSH
// for i in all_units do
32495: LD_ADDR_VAR 0 2
32499: PUSH
32500: LD_OWVAR 3
32504: PUSH
32505: FOR_IN
32506: IFFALSE 32584
// if IsSelected ( i ) then
32508: LD_VAR 0 2
32512: PPUSH
32513: CALL_OW 306
32517: IFFALSE 32582
// begin j := GetSide ( i ) ;
32519: LD_ADDR_VAR 0 3
32523: PUSH
32524: LD_VAR 0 2
32528: PPUSH
32529: CALL_OW 255
32533: ST_TO_ADDR
// if j = 8 then
32534: LD_VAR 0 3
32538: PUSH
32539: LD_INT 8
32541: EQUAL
32542: IFFALSE 32554
// j := 0 else
32544: LD_ADDR_VAR 0 3
32548: PUSH
32549: LD_INT 0
32551: ST_TO_ADDR
32552: GO 32568
// j := j + 1 ;
32554: LD_ADDR_VAR 0 3
32558: PUSH
32559: LD_VAR 0 3
32563: PUSH
32564: LD_INT 1
32566: PLUS
32567: ST_TO_ADDR
// SetSide ( i , j ) ;
32568: LD_VAR 0 2
32572: PPUSH
32573: LD_VAR 0 3
32577: PPUSH
32578: CALL_OW 235
// end ;
32582: GO 32505
32584: POP
32585: POP
// end ;
32586: LD_VAR 0 1
32590: RET
// export function hHackFog ; begin
32591: LD_INT 0
32593: PPUSH
// FogOff ( true ) ;
32594: LD_INT 1
32596: PPUSH
32597: CALL_OW 344
// end ;
32601: LD_VAR 0 1
32605: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32606: LD_INT 0
32608: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32609: LD_VAR 0 1
32613: PPUSH
32614: LD_VAR 0 2
32618: PPUSH
32619: LD_VAR 0 3
32623: PPUSH
32624: LD_INT 1
32626: PPUSH
32627: LD_INT 1
32629: PPUSH
32630: CALL_OW 483
// CenterOnXY ( x , y ) ;
32634: LD_VAR 0 2
32638: PPUSH
32639: LD_VAR 0 3
32643: PPUSH
32644: CALL_OW 84
// end ; end_of_file
32648: LD_VAR 0 4
32652: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32653: LD_INT 0
32655: PPUSH
32656: PPUSH
32657: PPUSH
32658: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32659: LD_VAR 0 1
32663: PPUSH
32664: CALL_OW 264
32668: PUSH
32669: LD_EXP 52
32673: EQUAL
32674: IFFALSE 32746
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32676: LD_INT 68
32678: PPUSH
32679: LD_VAR 0 1
32683: PPUSH
32684: CALL_OW 255
32688: PPUSH
32689: CALL_OW 321
32693: PUSH
32694: LD_INT 2
32696: EQUAL
32697: IFFALSE 32709
// eff := 70 else
32699: LD_ADDR_VAR 0 4
32703: PUSH
32704: LD_INT 70
32706: ST_TO_ADDR
32707: GO 32717
// eff := 30 ;
32709: LD_ADDR_VAR 0 4
32713: PUSH
32714: LD_INT 30
32716: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32717: LD_VAR 0 1
32721: PPUSH
32722: CALL_OW 250
32726: PPUSH
32727: LD_VAR 0 1
32731: PPUSH
32732: CALL_OW 251
32736: PPUSH
32737: LD_VAR 0 4
32741: PPUSH
32742: CALL_OW 495
// end ; end ;
32746: LD_VAR 0 2
32750: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32751: LD_INT 0
32753: PPUSH
// end ;
32754: LD_VAR 0 4
32758: RET
// export function SOS_Command ( cmd ) ; begin
32759: LD_INT 0
32761: PPUSH
// end ;
32762: LD_VAR 0 2
32766: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32767: LD_INT 0
32769: PPUSH
// if cmd = 121 then
32770: LD_VAR 0 1
32774: PUSH
32775: LD_INT 121
32777: EQUAL
32778: IFFALSE 32780
// end ;
32780: LD_VAR 0 6
32784: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32785: LD_INT 0
32787: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32788: LD_VAR 0 1
32792: PUSH
32793: LD_INT 250
32795: EQUAL
32796: PUSH
32797: LD_VAR 0 2
32801: PPUSH
32802: CALL_OW 264
32806: PUSH
32807: LD_EXP 55
32811: EQUAL
32812: AND
32813: IFFALSE 32834
// MinerPlaceMine ( unit , x , y ) ;
32815: LD_VAR 0 2
32819: PPUSH
32820: LD_VAR 0 4
32824: PPUSH
32825: LD_VAR 0 5
32829: PPUSH
32830: CALL 35183 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32834: LD_VAR 0 1
32838: PUSH
32839: LD_INT 251
32841: EQUAL
32842: PUSH
32843: LD_VAR 0 2
32847: PPUSH
32848: CALL_OW 264
32852: PUSH
32853: LD_EXP 55
32857: EQUAL
32858: AND
32859: IFFALSE 32880
// MinerDetonateMine ( unit , x , y ) ;
32861: LD_VAR 0 2
32865: PPUSH
32866: LD_VAR 0 4
32870: PPUSH
32871: LD_VAR 0 5
32875: PPUSH
32876: CALL 35460 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32880: LD_VAR 0 1
32884: PUSH
32885: LD_INT 252
32887: EQUAL
32888: PUSH
32889: LD_VAR 0 2
32893: PPUSH
32894: CALL_OW 264
32898: PUSH
32899: LD_EXP 55
32903: EQUAL
32904: AND
32905: IFFALSE 32926
// MinerCreateMinefield ( unit , x , y ) ;
32907: LD_VAR 0 2
32911: PPUSH
32912: LD_VAR 0 4
32916: PPUSH
32917: LD_VAR 0 5
32921: PPUSH
32922: CALL 35877 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32926: LD_VAR 0 1
32930: PUSH
32931: LD_INT 253
32933: EQUAL
32934: PUSH
32935: LD_VAR 0 2
32939: PPUSH
32940: CALL_OW 257
32944: PUSH
32945: LD_INT 5
32947: EQUAL
32948: AND
32949: IFFALSE 32970
// ComBinocular ( unit , x , y ) ;
32951: LD_VAR 0 2
32955: PPUSH
32956: LD_VAR 0 4
32960: PPUSH
32961: LD_VAR 0 5
32965: PPUSH
32966: CALL 36248 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32970: LD_VAR 0 1
32974: PUSH
32975: LD_INT 254
32977: EQUAL
32978: PUSH
32979: LD_VAR 0 2
32983: PPUSH
32984: CALL_OW 264
32988: PUSH
32989: LD_EXP 50
32993: EQUAL
32994: AND
32995: PUSH
32996: LD_VAR 0 3
33000: PPUSH
33001: CALL_OW 263
33005: PUSH
33006: LD_INT 3
33008: EQUAL
33009: AND
33010: IFFALSE 33026
// HackDestroyVehicle ( unit , selectedUnit ) ;
33012: LD_VAR 0 2
33016: PPUSH
33017: LD_VAR 0 3
33021: PPUSH
33022: CALL 34543 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33026: LD_VAR 0 1
33030: PUSH
33031: LD_INT 255
33033: EQUAL
33034: PUSH
33035: LD_VAR 0 2
33039: PPUSH
33040: CALL_OW 264
33044: PUSH
33045: LD_INT 14
33047: PUSH
33048: LD_INT 53
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: IN
33055: AND
33056: PUSH
33057: LD_VAR 0 4
33061: PPUSH
33062: LD_VAR 0 5
33066: PPUSH
33067: CALL_OW 488
33071: AND
33072: IFFALSE 33096
// CutTreeXYR ( unit , x , y , 12 ) ;
33074: LD_VAR 0 2
33078: PPUSH
33079: LD_VAR 0 4
33083: PPUSH
33084: LD_VAR 0 5
33088: PPUSH
33089: LD_INT 12
33091: PPUSH
33092: CALL 33109 0 4
// end ;
33096: LD_VAR 0 6
33100: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33101: LD_INT 0
33103: PPUSH
// end ;
33104: LD_VAR 0 4
33108: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33109: LD_INT 0
33111: PPUSH
33112: PPUSH
33113: PPUSH
33114: PPUSH
33115: PPUSH
33116: PPUSH
33117: PPUSH
33118: PPUSH
33119: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33120: LD_VAR 0 1
33124: NOT
33125: PUSH
33126: LD_VAR 0 2
33130: PPUSH
33131: LD_VAR 0 3
33135: PPUSH
33136: CALL_OW 488
33140: NOT
33141: OR
33142: PUSH
33143: LD_VAR 0 4
33147: NOT
33148: OR
33149: IFFALSE 33153
// exit ;
33151: GO 33493
// list := [ ] ;
33153: LD_ADDR_VAR 0 13
33157: PUSH
33158: EMPTY
33159: ST_TO_ADDR
// if x - r < 0 then
33160: LD_VAR 0 2
33164: PUSH
33165: LD_VAR 0 4
33169: MINUS
33170: PUSH
33171: LD_INT 0
33173: LESS
33174: IFFALSE 33186
// min_x := 0 else
33176: LD_ADDR_VAR 0 7
33180: PUSH
33181: LD_INT 0
33183: ST_TO_ADDR
33184: GO 33202
// min_x := x - r ;
33186: LD_ADDR_VAR 0 7
33190: PUSH
33191: LD_VAR 0 2
33195: PUSH
33196: LD_VAR 0 4
33200: MINUS
33201: ST_TO_ADDR
// if y - r < 0 then
33202: LD_VAR 0 3
33206: PUSH
33207: LD_VAR 0 4
33211: MINUS
33212: PUSH
33213: LD_INT 0
33215: LESS
33216: IFFALSE 33228
// min_y := 0 else
33218: LD_ADDR_VAR 0 8
33222: PUSH
33223: LD_INT 0
33225: ST_TO_ADDR
33226: GO 33244
// min_y := y - r ;
33228: LD_ADDR_VAR 0 8
33232: PUSH
33233: LD_VAR 0 3
33237: PUSH
33238: LD_VAR 0 4
33242: MINUS
33243: ST_TO_ADDR
// max_x := x + r ;
33244: LD_ADDR_VAR 0 9
33248: PUSH
33249: LD_VAR 0 2
33253: PUSH
33254: LD_VAR 0 4
33258: PLUS
33259: ST_TO_ADDR
// max_y := y + r ;
33260: LD_ADDR_VAR 0 10
33264: PUSH
33265: LD_VAR 0 3
33269: PUSH
33270: LD_VAR 0 4
33274: PLUS
33275: ST_TO_ADDR
// for _x = min_x to max_x do
33276: LD_ADDR_VAR 0 11
33280: PUSH
33281: DOUBLE
33282: LD_VAR 0 7
33286: DEC
33287: ST_TO_ADDR
33288: LD_VAR 0 9
33292: PUSH
33293: FOR_TO
33294: IFFALSE 33411
// for _y = min_y to max_y do
33296: LD_ADDR_VAR 0 12
33300: PUSH
33301: DOUBLE
33302: LD_VAR 0 8
33306: DEC
33307: ST_TO_ADDR
33308: LD_VAR 0 10
33312: PUSH
33313: FOR_TO
33314: IFFALSE 33407
// begin if not ValidHex ( _x , _y ) then
33316: LD_VAR 0 11
33320: PPUSH
33321: LD_VAR 0 12
33325: PPUSH
33326: CALL_OW 488
33330: NOT
33331: IFFALSE 33335
// continue ;
33333: GO 33313
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33335: LD_VAR 0 11
33339: PPUSH
33340: LD_VAR 0 12
33344: PPUSH
33345: CALL_OW 351
33349: PUSH
33350: LD_VAR 0 11
33354: PPUSH
33355: LD_VAR 0 12
33359: PPUSH
33360: CALL_OW 554
33364: AND
33365: IFFALSE 33405
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33367: LD_ADDR_VAR 0 13
33371: PUSH
33372: LD_VAR 0 13
33376: PPUSH
33377: LD_VAR 0 13
33381: PUSH
33382: LD_INT 1
33384: PLUS
33385: PPUSH
33386: LD_VAR 0 11
33390: PUSH
33391: LD_VAR 0 12
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PPUSH
33400: CALL_OW 2
33404: ST_TO_ADDR
// end ;
33405: GO 33313
33407: POP
33408: POP
33409: GO 33293
33411: POP
33412: POP
// if not list then
33413: LD_VAR 0 13
33417: NOT
33418: IFFALSE 33422
// exit ;
33420: GO 33493
// for i in list do
33422: LD_ADDR_VAR 0 6
33426: PUSH
33427: LD_VAR 0 13
33431: PUSH
33432: FOR_IN
33433: IFFALSE 33491
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33435: LD_VAR 0 1
33439: PPUSH
33440: LD_STRING M
33442: PUSH
33443: LD_VAR 0 6
33447: PUSH
33448: LD_INT 1
33450: ARRAY
33451: PUSH
33452: LD_VAR 0 6
33456: PUSH
33457: LD_INT 2
33459: ARRAY
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: PUSH
33482: EMPTY
33483: LIST
33484: PPUSH
33485: CALL_OW 447
33489: GO 33432
33491: POP
33492: POP
// end ;
33493: LD_VAR 0 5
33497: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33498: LD_EXP 124
33502: NOT
33503: IFFALSE 33553
33505: GO 33507
33507: DISABLE
// begin initHack := true ;
33508: LD_ADDR_EXP 124
33512: PUSH
33513: LD_INT 1
33515: ST_TO_ADDR
// hackTanks := [ ] ;
33516: LD_ADDR_EXP 125
33520: PUSH
33521: EMPTY
33522: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33523: LD_ADDR_EXP 126
33527: PUSH
33528: EMPTY
33529: ST_TO_ADDR
// hackLimit := 3 ;
33530: LD_ADDR_EXP 127
33534: PUSH
33535: LD_INT 3
33537: ST_TO_ADDR
// hackDist := 12 ;
33538: LD_ADDR_EXP 128
33542: PUSH
33543: LD_INT 12
33545: ST_TO_ADDR
// hackCounter := [ ] ;
33546: LD_ADDR_EXP 129
33550: PUSH
33551: EMPTY
33552: ST_TO_ADDR
// end ;
33553: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33554: LD_EXP 124
33558: PUSH
33559: LD_INT 34
33561: PUSH
33562: LD_EXP 50
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PPUSH
33571: CALL_OW 69
33575: AND
33576: IFFALSE 33831
33578: GO 33580
33580: DISABLE
33581: LD_INT 0
33583: PPUSH
33584: PPUSH
// begin enable ;
33585: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33586: LD_ADDR_VAR 0 1
33590: PUSH
33591: LD_INT 34
33593: PUSH
33594: LD_EXP 50
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PPUSH
33603: CALL_OW 69
33607: PUSH
33608: FOR_IN
33609: IFFALSE 33829
// begin if not i in hackTanks then
33611: LD_VAR 0 1
33615: PUSH
33616: LD_EXP 125
33620: IN
33621: NOT
33622: IFFALSE 33705
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33624: LD_ADDR_EXP 125
33628: PUSH
33629: LD_EXP 125
33633: PPUSH
33634: LD_EXP 125
33638: PUSH
33639: LD_INT 1
33641: PLUS
33642: PPUSH
33643: LD_VAR 0 1
33647: PPUSH
33648: CALL_OW 1
33652: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33653: LD_ADDR_EXP 126
33657: PUSH
33658: LD_EXP 126
33662: PPUSH
33663: LD_EXP 126
33667: PUSH
33668: LD_INT 1
33670: PLUS
33671: PPUSH
33672: EMPTY
33673: PPUSH
33674: CALL_OW 1
33678: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33679: LD_ADDR_EXP 129
33683: PUSH
33684: LD_EXP 129
33688: PPUSH
33689: LD_EXP 129
33693: PUSH
33694: LD_INT 1
33696: PLUS
33697: PPUSH
33698: EMPTY
33699: PPUSH
33700: CALL_OW 1
33704: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 302
33714: NOT
33715: IFFALSE 33728
// begin HackUnlinkAll ( i ) ;
33717: LD_VAR 0 1
33721: PPUSH
33722: CALL 33834 0 1
// continue ;
33726: GO 33608
// end ; HackCheckCapturedStatus ( i ) ;
33728: LD_VAR 0 1
33732: PPUSH
33733: CALL 34277 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33737: LD_ADDR_VAR 0 2
33741: PUSH
33742: LD_INT 81
33744: PUSH
33745: LD_VAR 0 1
33749: PPUSH
33750: CALL_OW 255
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 33
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 91
33771: PUSH
33772: LD_VAR 0 1
33776: PUSH
33777: LD_EXP 128
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 50
33789: PUSH
33790: EMPTY
33791: LIST
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: PPUSH
33799: CALL_OW 69
33803: ST_TO_ADDR
// if not tmp then
33804: LD_VAR 0 2
33808: NOT
33809: IFFALSE 33813
// continue ;
33811: GO 33608
// HackLink ( i , tmp ) ;
33813: LD_VAR 0 1
33817: PPUSH
33818: LD_VAR 0 2
33822: PPUSH
33823: CALL 33970 0 2
// end ;
33827: GO 33608
33829: POP
33830: POP
// end ;
33831: PPOPN 2
33833: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33834: LD_INT 0
33836: PPUSH
33837: PPUSH
33838: PPUSH
// if not hack in hackTanks then
33839: LD_VAR 0 1
33843: PUSH
33844: LD_EXP 125
33848: IN
33849: NOT
33850: IFFALSE 33854
// exit ;
33852: GO 33965
// index := GetElementIndex ( hackTanks , hack ) ;
33854: LD_ADDR_VAR 0 4
33858: PUSH
33859: LD_EXP 125
33863: PPUSH
33864: LD_VAR 0 1
33868: PPUSH
33869: CALL 41439 0 2
33873: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33874: LD_EXP 126
33878: PUSH
33879: LD_VAR 0 4
33883: ARRAY
33884: IFFALSE 33965
// begin for i in hackTanksCaptured [ index ] do
33886: LD_ADDR_VAR 0 3
33890: PUSH
33891: LD_EXP 126
33895: PUSH
33896: LD_VAR 0 4
33900: ARRAY
33901: PUSH
33902: FOR_IN
33903: IFFALSE 33929
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33905: LD_VAR 0 3
33909: PUSH
33910: LD_INT 1
33912: ARRAY
33913: PPUSH
33914: LD_VAR 0 3
33918: PUSH
33919: LD_INT 2
33921: ARRAY
33922: PPUSH
33923: CALL_OW 235
33927: GO 33902
33929: POP
33930: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33931: LD_ADDR_EXP 126
33935: PUSH
33936: LD_EXP 126
33940: PPUSH
33941: LD_VAR 0 4
33945: PPUSH
33946: EMPTY
33947: PPUSH
33948: CALL_OW 1
33952: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33953: LD_VAR 0 1
33957: PPUSH
33958: LD_INT 0
33960: PPUSH
33961: CALL_OW 505
// end ; end ;
33965: LD_VAR 0 2
33969: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33970: LD_INT 0
33972: PPUSH
33973: PPUSH
33974: PPUSH
// if not hack in hackTanks or not vehicles then
33975: LD_VAR 0 1
33979: PUSH
33980: LD_EXP 125
33984: IN
33985: NOT
33986: PUSH
33987: LD_VAR 0 2
33991: NOT
33992: OR
33993: IFFALSE 33997
// exit ;
33995: GO 34272
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33997: LD_ADDR_VAR 0 2
34001: PUSH
34002: LD_VAR 0 1
34006: PPUSH
34007: LD_VAR 0 2
34011: PPUSH
34012: LD_INT 1
34014: PPUSH
34015: LD_INT 1
34017: PPUSH
34018: CALL 42089 0 4
34022: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34023: LD_ADDR_VAR 0 5
34027: PUSH
34028: LD_EXP 125
34032: PPUSH
34033: LD_VAR 0 1
34037: PPUSH
34038: CALL 41439 0 2
34042: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34043: LD_EXP 126
34047: PUSH
34048: LD_VAR 0 5
34052: ARRAY
34053: PUSH
34054: LD_EXP 127
34058: LESS
34059: IFFALSE 34248
// begin for i := 1 to vehicles do
34061: LD_ADDR_VAR 0 4
34065: PUSH
34066: DOUBLE
34067: LD_INT 1
34069: DEC
34070: ST_TO_ADDR
34071: LD_VAR 0 2
34075: PUSH
34076: FOR_TO
34077: IFFALSE 34246
// begin if hackTanksCaptured [ index ] = hackLimit then
34079: LD_EXP 126
34083: PUSH
34084: LD_VAR 0 5
34088: ARRAY
34089: PUSH
34090: LD_EXP 127
34094: EQUAL
34095: IFFALSE 34099
// break ;
34097: GO 34246
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34099: LD_ADDR_EXP 129
34103: PUSH
34104: LD_EXP 129
34108: PPUSH
34109: LD_VAR 0 5
34113: PPUSH
34114: LD_EXP 129
34118: PUSH
34119: LD_VAR 0 5
34123: ARRAY
34124: PUSH
34125: LD_INT 1
34127: PLUS
34128: PPUSH
34129: CALL_OW 1
34133: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34134: LD_ADDR_EXP 126
34138: PUSH
34139: LD_EXP 126
34143: PPUSH
34144: LD_VAR 0 5
34148: PUSH
34149: LD_EXP 126
34153: PUSH
34154: LD_VAR 0 5
34158: ARRAY
34159: PUSH
34160: LD_INT 1
34162: PLUS
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PPUSH
34168: LD_VAR 0 2
34172: PUSH
34173: LD_VAR 0 4
34177: ARRAY
34178: PUSH
34179: LD_VAR 0 2
34183: PUSH
34184: LD_VAR 0 4
34188: ARRAY
34189: PPUSH
34190: CALL_OW 255
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PPUSH
34199: CALL 41654 0 3
34203: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34204: LD_VAR 0 2
34208: PUSH
34209: LD_VAR 0 4
34213: ARRAY
34214: PPUSH
34215: LD_VAR 0 1
34219: PPUSH
34220: CALL_OW 255
34224: PPUSH
34225: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34229: LD_VAR 0 2
34233: PUSH
34234: LD_VAR 0 4
34238: ARRAY
34239: PPUSH
34240: CALL_OW 141
// end ;
34244: GO 34076
34246: POP
34247: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34248: LD_VAR 0 1
34252: PPUSH
34253: LD_EXP 126
34257: PUSH
34258: LD_VAR 0 5
34262: ARRAY
34263: PUSH
34264: LD_INT 0
34266: PLUS
34267: PPUSH
34268: CALL_OW 505
// end ;
34272: LD_VAR 0 3
34276: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34277: LD_INT 0
34279: PPUSH
34280: PPUSH
34281: PPUSH
34282: PPUSH
// if not hack in hackTanks then
34283: LD_VAR 0 1
34287: PUSH
34288: LD_EXP 125
34292: IN
34293: NOT
34294: IFFALSE 34298
// exit ;
34296: GO 34538
// index := GetElementIndex ( hackTanks , hack ) ;
34298: LD_ADDR_VAR 0 4
34302: PUSH
34303: LD_EXP 125
34307: PPUSH
34308: LD_VAR 0 1
34312: PPUSH
34313: CALL 41439 0 2
34317: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34318: LD_ADDR_VAR 0 3
34322: PUSH
34323: DOUBLE
34324: LD_EXP 126
34328: PUSH
34329: LD_VAR 0 4
34333: ARRAY
34334: INC
34335: ST_TO_ADDR
34336: LD_INT 1
34338: PUSH
34339: FOR_DOWNTO
34340: IFFALSE 34512
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34342: LD_ADDR_VAR 0 5
34346: PUSH
34347: LD_EXP 126
34351: PUSH
34352: LD_VAR 0 4
34356: ARRAY
34357: PUSH
34358: LD_VAR 0 3
34362: ARRAY
34363: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34364: LD_VAR 0 5
34368: PUSH
34369: LD_INT 1
34371: ARRAY
34372: PPUSH
34373: CALL_OW 302
34377: NOT
34378: PUSH
34379: LD_VAR 0 5
34383: PUSH
34384: LD_INT 1
34386: ARRAY
34387: PPUSH
34388: CALL_OW 255
34392: PUSH
34393: LD_VAR 0 1
34397: PPUSH
34398: CALL_OW 255
34402: NONEQUAL
34403: OR
34404: IFFALSE 34510
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34406: LD_VAR 0 5
34410: PUSH
34411: LD_INT 1
34413: ARRAY
34414: PPUSH
34415: CALL_OW 305
34419: PUSH
34420: LD_VAR 0 5
34424: PUSH
34425: LD_INT 1
34427: ARRAY
34428: PPUSH
34429: CALL_OW 255
34433: PUSH
34434: LD_VAR 0 1
34438: PPUSH
34439: CALL_OW 255
34443: EQUAL
34444: AND
34445: IFFALSE 34469
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34447: LD_VAR 0 5
34451: PUSH
34452: LD_INT 1
34454: ARRAY
34455: PPUSH
34456: LD_VAR 0 5
34460: PUSH
34461: LD_INT 2
34463: ARRAY
34464: PPUSH
34465: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34469: LD_ADDR_EXP 126
34473: PUSH
34474: LD_EXP 126
34478: PPUSH
34479: LD_VAR 0 4
34483: PPUSH
34484: LD_EXP 126
34488: PUSH
34489: LD_VAR 0 4
34493: ARRAY
34494: PPUSH
34495: LD_VAR 0 3
34499: PPUSH
34500: CALL_OW 3
34504: PPUSH
34505: CALL_OW 1
34509: ST_TO_ADDR
// end ; end ;
34510: GO 34339
34512: POP
34513: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34514: LD_VAR 0 1
34518: PPUSH
34519: LD_EXP 126
34523: PUSH
34524: LD_VAR 0 4
34528: ARRAY
34529: PUSH
34530: LD_INT 0
34532: PLUS
34533: PPUSH
34534: CALL_OW 505
// end ;
34538: LD_VAR 0 2
34542: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34543: LD_INT 0
34545: PPUSH
34546: PPUSH
34547: PPUSH
34548: PPUSH
// if not hack in hackTanks then
34549: LD_VAR 0 1
34553: PUSH
34554: LD_EXP 125
34558: IN
34559: NOT
34560: IFFALSE 34564
// exit ;
34562: GO 34649
// index := GetElementIndex ( hackTanks , hack ) ;
34564: LD_ADDR_VAR 0 5
34568: PUSH
34569: LD_EXP 125
34573: PPUSH
34574: LD_VAR 0 1
34578: PPUSH
34579: CALL 41439 0 2
34583: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34584: LD_ADDR_VAR 0 4
34588: PUSH
34589: DOUBLE
34590: LD_INT 1
34592: DEC
34593: ST_TO_ADDR
34594: LD_EXP 126
34598: PUSH
34599: LD_VAR 0 5
34603: ARRAY
34604: PUSH
34605: FOR_TO
34606: IFFALSE 34647
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34608: LD_EXP 126
34612: PUSH
34613: LD_VAR 0 5
34617: ARRAY
34618: PUSH
34619: LD_VAR 0 4
34623: ARRAY
34624: PUSH
34625: LD_INT 1
34627: ARRAY
34628: PUSH
34629: LD_VAR 0 2
34633: EQUAL
34634: IFFALSE 34645
// KillUnit ( vehicle ) ;
34636: LD_VAR 0 2
34640: PPUSH
34641: CALL_OW 66
34645: GO 34605
34647: POP
34648: POP
// end ;
34649: LD_VAR 0 3
34653: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34654: LD_EXP 130
34658: NOT
34659: IFFALSE 34694
34661: GO 34663
34663: DISABLE
// begin initMiner := true ;
34664: LD_ADDR_EXP 130
34668: PUSH
34669: LD_INT 1
34671: ST_TO_ADDR
// minersList := [ ] ;
34672: LD_ADDR_EXP 131
34676: PUSH
34677: EMPTY
34678: ST_TO_ADDR
// minerMinesList := [ ] ;
34679: LD_ADDR_EXP 132
34683: PUSH
34684: EMPTY
34685: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34686: LD_ADDR_EXP 133
34690: PUSH
34691: LD_INT 5
34693: ST_TO_ADDR
// end ;
34694: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34695: LD_EXP 130
34699: PUSH
34700: LD_INT 34
34702: PUSH
34703: LD_EXP 55
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PPUSH
34712: CALL_OW 69
34716: AND
34717: IFFALSE 35180
34719: GO 34721
34721: DISABLE
34722: LD_INT 0
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
// begin enable ;
34728: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34729: LD_ADDR_VAR 0 1
34733: PUSH
34734: LD_INT 34
34736: PUSH
34737: LD_EXP 55
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PPUSH
34746: CALL_OW 69
34750: PUSH
34751: FOR_IN
34752: IFFALSE 34824
// begin if not i in minersList then
34754: LD_VAR 0 1
34758: PUSH
34759: LD_EXP 131
34763: IN
34764: NOT
34765: IFFALSE 34822
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34767: LD_ADDR_EXP 131
34771: PUSH
34772: LD_EXP 131
34776: PPUSH
34777: LD_EXP 131
34781: PUSH
34782: LD_INT 1
34784: PLUS
34785: PPUSH
34786: LD_VAR 0 1
34790: PPUSH
34791: CALL_OW 1
34795: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34796: LD_ADDR_EXP 132
34800: PUSH
34801: LD_EXP 132
34805: PPUSH
34806: LD_EXP 132
34810: PUSH
34811: LD_INT 1
34813: PLUS
34814: PPUSH
34815: EMPTY
34816: PPUSH
34817: CALL_OW 1
34821: ST_TO_ADDR
// end end ;
34822: GO 34751
34824: POP
34825: POP
// for i := minerMinesList downto 1 do
34826: LD_ADDR_VAR 0 1
34830: PUSH
34831: DOUBLE
34832: LD_EXP 132
34836: INC
34837: ST_TO_ADDR
34838: LD_INT 1
34840: PUSH
34841: FOR_DOWNTO
34842: IFFALSE 35178
// begin if IsLive ( minersList [ i ] ) then
34844: LD_EXP 131
34848: PUSH
34849: LD_VAR 0 1
34853: ARRAY
34854: PPUSH
34855: CALL_OW 300
34859: IFFALSE 34887
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34861: LD_EXP 131
34865: PUSH
34866: LD_VAR 0 1
34870: ARRAY
34871: PPUSH
34872: LD_EXP 132
34876: PUSH
34877: LD_VAR 0 1
34881: ARRAY
34882: PPUSH
34883: CALL_OW 505
// if not minerMinesList [ i ] then
34887: LD_EXP 132
34891: PUSH
34892: LD_VAR 0 1
34896: ARRAY
34897: NOT
34898: IFFALSE 34902
// continue ;
34900: GO 34841
// for j := minerMinesList [ i ] downto 1 do
34902: LD_ADDR_VAR 0 2
34906: PUSH
34907: DOUBLE
34908: LD_EXP 132
34912: PUSH
34913: LD_VAR 0 1
34917: ARRAY
34918: INC
34919: ST_TO_ADDR
34920: LD_INT 1
34922: PUSH
34923: FOR_DOWNTO
34924: IFFALSE 35174
// begin side := GetSide ( minersList [ i ] ) ;
34926: LD_ADDR_VAR 0 3
34930: PUSH
34931: LD_EXP 131
34935: PUSH
34936: LD_VAR 0 1
34940: ARRAY
34941: PPUSH
34942: CALL_OW 255
34946: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34947: LD_ADDR_VAR 0 4
34951: PUSH
34952: LD_EXP 132
34956: PUSH
34957: LD_VAR 0 1
34961: ARRAY
34962: PUSH
34963: LD_VAR 0 2
34967: ARRAY
34968: PUSH
34969: LD_INT 1
34971: ARRAY
34972: PPUSH
34973: LD_EXP 132
34977: PUSH
34978: LD_VAR 0 1
34982: ARRAY
34983: PUSH
34984: LD_VAR 0 2
34988: ARRAY
34989: PUSH
34990: LD_INT 2
34992: ARRAY
34993: PPUSH
34994: CALL_OW 428
34998: ST_TO_ADDR
// if not tmp then
34999: LD_VAR 0 4
35003: NOT
35004: IFFALSE 35008
// continue ;
35006: GO 34923
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35008: LD_VAR 0 4
35012: PUSH
35013: LD_INT 81
35015: PUSH
35016: LD_VAR 0 3
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PPUSH
35025: CALL_OW 69
35029: IN
35030: PUSH
35031: LD_EXP 132
35035: PUSH
35036: LD_VAR 0 1
35040: ARRAY
35041: PUSH
35042: LD_VAR 0 2
35046: ARRAY
35047: PUSH
35048: LD_INT 1
35050: ARRAY
35051: PPUSH
35052: LD_EXP 132
35056: PUSH
35057: LD_VAR 0 1
35061: ARRAY
35062: PUSH
35063: LD_VAR 0 2
35067: ARRAY
35068: PUSH
35069: LD_INT 2
35071: ARRAY
35072: PPUSH
35073: CALL_OW 458
35077: AND
35078: IFFALSE 35172
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35080: LD_EXP 132
35084: PUSH
35085: LD_VAR 0 1
35089: ARRAY
35090: PUSH
35091: LD_VAR 0 2
35095: ARRAY
35096: PUSH
35097: LD_INT 1
35099: ARRAY
35100: PPUSH
35101: LD_EXP 132
35105: PUSH
35106: LD_VAR 0 1
35110: ARRAY
35111: PUSH
35112: LD_VAR 0 2
35116: ARRAY
35117: PUSH
35118: LD_INT 2
35120: ARRAY
35121: PPUSH
35122: LD_VAR 0 3
35126: PPUSH
35127: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35131: LD_ADDR_EXP 132
35135: PUSH
35136: LD_EXP 132
35140: PPUSH
35141: LD_VAR 0 1
35145: PPUSH
35146: LD_EXP 132
35150: PUSH
35151: LD_VAR 0 1
35155: ARRAY
35156: PPUSH
35157: LD_VAR 0 2
35161: PPUSH
35162: CALL_OW 3
35166: PPUSH
35167: CALL_OW 1
35171: ST_TO_ADDR
// end ; end ;
35172: GO 34923
35174: POP
35175: POP
// end ;
35176: GO 34841
35178: POP
35179: POP
// end ;
35180: PPOPN 4
35182: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35183: LD_INT 0
35185: PPUSH
35186: PPUSH
// result := false ;
35187: LD_ADDR_VAR 0 4
35191: PUSH
35192: LD_INT 0
35194: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35195: LD_VAR 0 1
35199: PPUSH
35200: CALL_OW 264
35204: PUSH
35205: LD_EXP 55
35209: EQUAL
35210: NOT
35211: IFFALSE 35215
// exit ;
35213: GO 35455
// index := GetElementIndex ( minersList , unit ) ;
35215: LD_ADDR_VAR 0 5
35219: PUSH
35220: LD_EXP 131
35224: PPUSH
35225: LD_VAR 0 1
35229: PPUSH
35230: CALL 41439 0 2
35234: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35235: LD_EXP 132
35239: PUSH
35240: LD_VAR 0 5
35244: ARRAY
35245: PUSH
35246: LD_EXP 133
35250: GREATEREQUAL
35251: IFFALSE 35255
// exit ;
35253: GO 35455
// ComMoveXY ( unit , x , y ) ;
35255: LD_VAR 0 1
35259: PPUSH
35260: LD_VAR 0 2
35264: PPUSH
35265: LD_VAR 0 3
35269: PPUSH
35270: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35274: LD_INT 35
35276: PPUSH
35277: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35281: LD_VAR 0 1
35285: PPUSH
35286: LD_VAR 0 2
35290: PPUSH
35291: LD_VAR 0 3
35295: PPUSH
35296: CALL 72212 0 3
35300: NOT
35301: PUSH
35302: LD_VAR 0 1
35306: PPUSH
35307: CALL_OW 314
35311: AND
35312: IFFALSE 35316
// exit ;
35314: GO 35455
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35316: LD_VAR 0 2
35320: PPUSH
35321: LD_VAR 0 3
35325: PPUSH
35326: CALL_OW 428
35330: PUSH
35331: LD_VAR 0 1
35335: EQUAL
35336: PUSH
35337: LD_VAR 0 1
35341: PPUSH
35342: CALL_OW 314
35346: NOT
35347: AND
35348: IFFALSE 35274
// PlaySoundXY ( x , y , PlantMine ) ;
35350: LD_VAR 0 2
35354: PPUSH
35355: LD_VAR 0 3
35359: PPUSH
35360: LD_STRING PlantMine
35362: PPUSH
35363: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35367: LD_VAR 0 2
35371: PPUSH
35372: LD_VAR 0 3
35376: PPUSH
35377: LD_VAR 0 1
35381: PPUSH
35382: CALL_OW 255
35386: PPUSH
35387: LD_INT 0
35389: PPUSH
35390: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35394: LD_ADDR_EXP 132
35398: PUSH
35399: LD_EXP 132
35403: PPUSH
35404: LD_VAR 0 5
35408: PUSH
35409: LD_EXP 132
35413: PUSH
35414: LD_VAR 0 5
35418: ARRAY
35419: PUSH
35420: LD_INT 1
35422: PLUS
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PPUSH
35428: LD_VAR 0 2
35432: PUSH
35433: LD_VAR 0 3
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PPUSH
35442: CALL 41654 0 3
35446: ST_TO_ADDR
// result := true ;
35447: LD_ADDR_VAR 0 4
35451: PUSH
35452: LD_INT 1
35454: ST_TO_ADDR
// end ;
35455: LD_VAR 0 4
35459: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35460: LD_INT 0
35462: PPUSH
35463: PPUSH
35464: PPUSH
// if not unit in minersList then
35465: LD_VAR 0 1
35469: PUSH
35470: LD_EXP 131
35474: IN
35475: NOT
35476: IFFALSE 35480
// exit ;
35478: GO 35872
// index := GetElementIndex ( minersList , unit ) ;
35480: LD_ADDR_VAR 0 6
35484: PUSH
35485: LD_EXP 131
35489: PPUSH
35490: LD_VAR 0 1
35494: PPUSH
35495: CALL 41439 0 2
35499: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35500: LD_ADDR_VAR 0 5
35504: PUSH
35505: DOUBLE
35506: LD_EXP 132
35510: PUSH
35511: LD_VAR 0 6
35515: ARRAY
35516: INC
35517: ST_TO_ADDR
35518: LD_INT 1
35520: PUSH
35521: FOR_DOWNTO
35522: IFFALSE 35683
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35524: LD_EXP 132
35528: PUSH
35529: LD_VAR 0 6
35533: ARRAY
35534: PUSH
35535: LD_VAR 0 5
35539: ARRAY
35540: PUSH
35541: LD_INT 1
35543: ARRAY
35544: PUSH
35545: LD_VAR 0 2
35549: EQUAL
35550: PUSH
35551: LD_EXP 132
35555: PUSH
35556: LD_VAR 0 6
35560: ARRAY
35561: PUSH
35562: LD_VAR 0 5
35566: ARRAY
35567: PUSH
35568: LD_INT 2
35570: ARRAY
35571: PUSH
35572: LD_VAR 0 3
35576: EQUAL
35577: AND
35578: IFFALSE 35681
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35580: LD_EXP 132
35584: PUSH
35585: LD_VAR 0 6
35589: ARRAY
35590: PUSH
35591: LD_VAR 0 5
35595: ARRAY
35596: PUSH
35597: LD_INT 1
35599: ARRAY
35600: PPUSH
35601: LD_EXP 132
35605: PUSH
35606: LD_VAR 0 6
35610: ARRAY
35611: PUSH
35612: LD_VAR 0 5
35616: ARRAY
35617: PUSH
35618: LD_INT 2
35620: ARRAY
35621: PPUSH
35622: LD_VAR 0 1
35626: PPUSH
35627: CALL_OW 255
35631: PPUSH
35632: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35636: LD_ADDR_EXP 132
35640: PUSH
35641: LD_EXP 132
35645: PPUSH
35646: LD_VAR 0 6
35650: PPUSH
35651: LD_EXP 132
35655: PUSH
35656: LD_VAR 0 6
35660: ARRAY
35661: PPUSH
35662: LD_VAR 0 5
35666: PPUSH
35667: CALL_OW 3
35671: PPUSH
35672: CALL_OW 1
35676: ST_TO_ADDR
// exit ;
35677: POP
35678: POP
35679: GO 35872
// end ; end ;
35681: GO 35521
35683: POP
35684: POP
// for i := minerMinesList [ index ] downto 1 do
35685: LD_ADDR_VAR 0 5
35689: PUSH
35690: DOUBLE
35691: LD_EXP 132
35695: PUSH
35696: LD_VAR 0 6
35700: ARRAY
35701: INC
35702: ST_TO_ADDR
35703: LD_INT 1
35705: PUSH
35706: FOR_DOWNTO
35707: IFFALSE 35870
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35709: LD_EXP 132
35713: PUSH
35714: LD_VAR 0 6
35718: ARRAY
35719: PUSH
35720: LD_VAR 0 5
35724: ARRAY
35725: PUSH
35726: LD_INT 1
35728: ARRAY
35729: PPUSH
35730: LD_EXP 132
35734: PUSH
35735: LD_VAR 0 6
35739: ARRAY
35740: PUSH
35741: LD_VAR 0 5
35745: ARRAY
35746: PUSH
35747: LD_INT 2
35749: ARRAY
35750: PPUSH
35751: LD_VAR 0 2
35755: PPUSH
35756: LD_VAR 0 3
35760: PPUSH
35761: CALL_OW 298
35765: PUSH
35766: LD_INT 6
35768: LESS
35769: IFFALSE 35868
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35771: LD_EXP 132
35775: PUSH
35776: LD_VAR 0 6
35780: ARRAY
35781: PUSH
35782: LD_VAR 0 5
35786: ARRAY
35787: PUSH
35788: LD_INT 1
35790: ARRAY
35791: PPUSH
35792: LD_EXP 132
35796: PUSH
35797: LD_VAR 0 6
35801: ARRAY
35802: PUSH
35803: LD_VAR 0 5
35807: ARRAY
35808: PUSH
35809: LD_INT 2
35811: ARRAY
35812: PPUSH
35813: LD_VAR 0 1
35817: PPUSH
35818: CALL_OW 255
35822: PPUSH
35823: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35827: LD_ADDR_EXP 132
35831: PUSH
35832: LD_EXP 132
35836: PPUSH
35837: LD_VAR 0 6
35841: PPUSH
35842: LD_EXP 132
35846: PUSH
35847: LD_VAR 0 6
35851: ARRAY
35852: PPUSH
35853: LD_VAR 0 5
35857: PPUSH
35858: CALL_OW 3
35862: PPUSH
35863: CALL_OW 1
35867: ST_TO_ADDR
// end ; end ;
35868: GO 35706
35870: POP
35871: POP
// end ;
35872: LD_VAR 0 4
35876: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35877: LD_INT 0
35879: PPUSH
35880: PPUSH
35881: PPUSH
35882: PPUSH
35883: PPUSH
35884: PPUSH
35885: PPUSH
35886: PPUSH
35887: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35888: LD_VAR 0 1
35892: PPUSH
35893: CALL_OW 264
35897: PUSH
35898: LD_EXP 55
35902: EQUAL
35903: NOT
35904: PUSH
35905: LD_VAR 0 1
35909: PUSH
35910: LD_EXP 131
35914: IN
35915: NOT
35916: OR
35917: IFFALSE 35921
// exit ;
35919: GO 36243
// index := GetElementIndex ( minersList , unit ) ;
35921: LD_ADDR_VAR 0 6
35925: PUSH
35926: LD_EXP 131
35930: PPUSH
35931: LD_VAR 0 1
35935: PPUSH
35936: CALL 41439 0 2
35940: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35941: LD_ADDR_VAR 0 8
35945: PUSH
35946: LD_EXP 133
35950: PUSH
35951: LD_EXP 132
35955: PUSH
35956: LD_VAR 0 6
35960: ARRAY
35961: MINUS
35962: ST_TO_ADDR
// if not minesFreeAmount then
35963: LD_VAR 0 8
35967: NOT
35968: IFFALSE 35972
// exit ;
35970: GO 36243
// tmp := [ ] ;
35972: LD_ADDR_VAR 0 7
35976: PUSH
35977: EMPTY
35978: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35979: LD_ADDR_VAR 0 5
35983: PUSH
35984: DOUBLE
35985: LD_INT 1
35987: DEC
35988: ST_TO_ADDR
35989: LD_VAR 0 8
35993: PUSH
35994: FOR_TO
35995: IFFALSE 36190
// begin _d := rand ( 0 , 5 ) ;
35997: LD_ADDR_VAR 0 11
36001: PUSH
36002: LD_INT 0
36004: PPUSH
36005: LD_INT 5
36007: PPUSH
36008: CALL_OW 12
36012: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36013: LD_ADDR_VAR 0 12
36017: PUSH
36018: LD_INT 2
36020: PPUSH
36021: LD_INT 6
36023: PPUSH
36024: CALL_OW 12
36028: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36029: LD_ADDR_VAR 0 9
36033: PUSH
36034: LD_VAR 0 2
36038: PPUSH
36039: LD_VAR 0 11
36043: PPUSH
36044: LD_VAR 0 12
36048: PPUSH
36049: CALL_OW 272
36053: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36054: LD_ADDR_VAR 0 10
36058: PUSH
36059: LD_VAR 0 3
36063: PPUSH
36064: LD_VAR 0 11
36068: PPUSH
36069: LD_VAR 0 12
36073: PPUSH
36074: CALL_OW 273
36078: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36079: LD_VAR 0 9
36083: PPUSH
36084: LD_VAR 0 10
36088: PPUSH
36089: CALL_OW 488
36093: PUSH
36094: LD_VAR 0 9
36098: PUSH
36099: LD_VAR 0 10
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_VAR 0 7
36112: IN
36113: NOT
36114: AND
36115: PUSH
36116: LD_VAR 0 9
36120: PPUSH
36121: LD_VAR 0 10
36125: PPUSH
36126: CALL_OW 458
36130: NOT
36131: AND
36132: IFFALSE 36174
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36134: LD_ADDR_VAR 0 7
36138: PUSH
36139: LD_VAR 0 7
36143: PPUSH
36144: LD_VAR 0 7
36148: PUSH
36149: LD_INT 1
36151: PLUS
36152: PPUSH
36153: LD_VAR 0 9
36157: PUSH
36158: LD_VAR 0 10
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PPUSH
36167: CALL_OW 1
36171: ST_TO_ADDR
36172: GO 36188
// i := i - 1 ;
36174: LD_ADDR_VAR 0 5
36178: PUSH
36179: LD_VAR 0 5
36183: PUSH
36184: LD_INT 1
36186: MINUS
36187: ST_TO_ADDR
// end ;
36188: GO 35994
36190: POP
36191: POP
// for i in tmp do
36192: LD_ADDR_VAR 0 5
36196: PUSH
36197: LD_VAR 0 7
36201: PUSH
36202: FOR_IN
36203: IFFALSE 36241
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36205: LD_VAR 0 1
36209: PPUSH
36210: LD_VAR 0 5
36214: PUSH
36215: LD_INT 1
36217: ARRAY
36218: PPUSH
36219: LD_VAR 0 5
36223: PUSH
36224: LD_INT 2
36226: ARRAY
36227: PPUSH
36228: CALL 35183 0 3
36232: NOT
36233: IFFALSE 36239
// exit ;
36235: POP
36236: POP
36237: GO 36243
36239: GO 36202
36241: POP
36242: POP
// end ;
36243: LD_VAR 0 4
36247: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36248: LD_INT 0
36250: PPUSH
36251: PPUSH
36252: PPUSH
36253: PPUSH
36254: PPUSH
36255: PPUSH
36256: PPUSH
// if not GetClass ( unit ) = class_sniper then
36257: LD_VAR 0 1
36261: PPUSH
36262: CALL_OW 257
36266: PUSH
36267: LD_INT 5
36269: EQUAL
36270: NOT
36271: IFFALSE 36275
// exit ;
36273: GO 36663
// dist := 8 ;
36275: LD_ADDR_VAR 0 5
36279: PUSH
36280: LD_INT 8
36282: ST_TO_ADDR
// viewRange := 12 ;
36283: LD_ADDR_VAR 0 7
36287: PUSH
36288: LD_INT 12
36290: ST_TO_ADDR
// side := GetSide ( unit ) ;
36291: LD_ADDR_VAR 0 6
36295: PUSH
36296: LD_VAR 0 1
36300: PPUSH
36301: CALL_OW 255
36305: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36306: LD_INT 61
36308: PPUSH
36309: LD_VAR 0 6
36313: PPUSH
36314: CALL_OW 321
36318: PUSH
36319: LD_INT 2
36321: EQUAL
36322: IFFALSE 36332
// viewRange := 16 ;
36324: LD_ADDR_VAR 0 7
36328: PUSH
36329: LD_INT 16
36331: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36332: LD_VAR 0 1
36336: PPUSH
36337: LD_VAR 0 2
36341: PPUSH
36342: LD_VAR 0 3
36346: PPUSH
36347: CALL_OW 297
36351: PUSH
36352: LD_VAR 0 5
36356: GREATER
36357: IFFALSE 36436
// begin ComMoveXY ( unit , x , y ) ;
36359: LD_VAR 0 1
36363: PPUSH
36364: LD_VAR 0 2
36368: PPUSH
36369: LD_VAR 0 3
36373: PPUSH
36374: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36378: LD_INT 35
36380: PPUSH
36381: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36385: LD_VAR 0 1
36389: PPUSH
36390: LD_VAR 0 2
36394: PPUSH
36395: LD_VAR 0 3
36399: PPUSH
36400: CALL 72212 0 3
36404: NOT
36405: IFFALSE 36409
// exit ;
36407: GO 36663
// until GetDistUnitXY ( unit , x , y ) < dist ;
36409: LD_VAR 0 1
36413: PPUSH
36414: LD_VAR 0 2
36418: PPUSH
36419: LD_VAR 0 3
36423: PPUSH
36424: CALL_OW 297
36428: PUSH
36429: LD_VAR 0 5
36433: LESS
36434: IFFALSE 36378
// end ; ComTurnXY ( unit , x , y ) ;
36436: LD_VAR 0 1
36440: PPUSH
36441: LD_VAR 0 2
36445: PPUSH
36446: LD_VAR 0 3
36450: PPUSH
36451: CALL_OW 118
// wait ( 5 ) ;
36455: LD_INT 5
36457: PPUSH
36458: CALL_OW 67
// _d := GetDir ( unit ) ;
36462: LD_ADDR_VAR 0 10
36466: PUSH
36467: LD_VAR 0 1
36471: PPUSH
36472: CALL_OW 254
36476: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36477: LD_ADDR_VAR 0 8
36481: PUSH
36482: LD_VAR 0 1
36486: PPUSH
36487: CALL_OW 250
36491: PPUSH
36492: LD_VAR 0 10
36496: PPUSH
36497: LD_VAR 0 5
36501: PPUSH
36502: CALL_OW 272
36506: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36507: LD_ADDR_VAR 0 9
36511: PUSH
36512: LD_VAR 0 1
36516: PPUSH
36517: CALL_OW 251
36521: PPUSH
36522: LD_VAR 0 10
36526: PPUSH
36527: LD_VAR 0 5
36531: PPUSH
36532: CALL_OW 273
36536: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36537: LD_VAR 0 8
36541: PPUSH
36542: LD_VAR 0 9
36546: PPUSH
36547: CALL_OW 488
36551: NOT
36552: IFFALSE 36556
// exit ;
36554: GO 36663
// ComAnimCustom ( unit , 1 ) ;
36556: LD_VAR 0 1
36560: PPUSH
36561: LD_INT 1
36563: PPUSH
36564: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36568: LD_VAR 0 8
36572: PPUSH
36573: LD_VAR 0 9
36577: PPUSH
36578: LD_VAR 0 6
36582: PPUSH
36583: LD_VAR 0 7
36587: PPUSH
36588: CALL_OW 330
// repeat wait ( 1 ) ;
36592: LD_INT 1
36594: PPUSH
36595: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36599: LD_VAR 0 1
36603: PPUSH
36604: CALL_OW 316
36608: PUSH
36609: LD_VAR 0 1
36613: PPUSH
36614: CALL_OW 314
36618: OR
36619: PUSH
36620: LD_VAR 0 1
36624: PPUSH
36625: CALL_OW 302
36629: NOT
36630: OR
36631: PUSH
36632: LD_VAR 0 1
36636: PPUSH
36637: CALL_OW 301
36641: OR
36642: IFFALSE 36592
// RemoveSeeing ( _x , _y , side ) ;
36644: LD_VAR 0 8
36648: PPUSH
36649: LD_VAR 0 9
36653: PPUSH
36654: LD_VAR 0 6
36658: PPUSH
36659: CALL_OW 331
// end ; end_of_file
36663: LD_VAR 0 4
36667: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36668: LD_INT 0
36670: PPUSH
36671: PPUSH
// if exist_mode then
36672: LD_VAR 0 2
36676: IFFALSE 36701
// unit := CreateCharacter ( prefix & ident ) else
36678: LD_ADDR_VAR 0 5
36682: PUSH
36683: LD_VAR 0 3
36687: PUSH
36688: LD_VAR 0 1
36692: STR
36693: PPUSH
36694: CALL_OW 34
36698: ST_TO_ADDR
36699: GO 36716
// unit := NewCharacter ( ident ) ;
36701: LD_ADDR_VAR 0 5
36705: PUSH
36706: LD_VAR 0 1
36710: PPUSH
36711: CALL_OW 25
36715: ST_TO_ADDR
// result := unit ;
36716: LD_ADDR_VAR 0 4
36720: PUSH
36721: LD_VAR 0 5
36725: ST_TO_ADDR
// end ;
36726: LD_VAR 0 4
36730: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36731: LD_INT 0
36733: PPUSH
36734: PPUSH
// if not side or not nation then
36735: LD_VAR 0 1
36739: NOT
36740: PUSH
36741: LD_VAR 0 2
36745: NOT
36746: OR
36747: IFFALSE 36751
// exit ;
36749: GO 37519
// case nation of nation_american :
36751: LD_VAR 0 2
36755: PUSH
36756: LD_INT 1
36758: DOUBLE
36759: EQUAL
36760: IFTRUE 36764
36762: GO 36978
36764: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36765: LD_ADDR_VAR 0 4
36769: PUSH
36770: LD_INT 35
36772: PUSH
36773: LD_INT 45
36775: PUSH
36776: LD_INT 46
36778: PUSH
36779: LD_INT 47
36781: PUSH
36782: LD_INT 82
36784: PUSH
36785: LD_INT 83
36787: PUSH
36788: LD_INT 84
36790: PUSH
36791: LD_INT 85
36793: PUSH
36794: LD_INT 86
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 2
36802: PUSH
36803: LD_INT 6
36805: PUSH
36806: LD_INT 15
36808: PUSH
36809: LD_INT 16
36811: PUSH
36812: LD_INT 7
36814: PUSH
36815: LD_INT 12
36817: PUSH
36818: LD_INT 13
36820: PUSH
36821: LD_INT 10
36823: PUSH
36824: LD_INT 14
36826: PUSH
36827: LD_INT 20
36829: PUSH
36830: LD_INT 21
36832: PUSH
36833: LD_INT 22
36835: PUSH
36836: LD_INT 25
36838: PUSH
36839: LD_INT 32
36841: PUSH
36842: LD_INT 27
36844: PUSH
36845: LD_INT 36
36847: PUSH
36848: LD_INT 69
36850: PUSH
36851: LD_INT 39
36853: PUSH
36854: LD_INT 34
36856: PUSH
36857: LD_INT 40
36859: PUSH
36860: LD_INT 48
36862: PUSH
36863: LD_INT 49
36865: PUSH
36866: LD_INT 50
36868: PUSH
36869: LD_INT 51
36871: PUSH
36872: LD_INT 52
36874: PUSH
36875: LD_INT 53
36877: PUSH
36878: LD_INT 54
36880: PUSH
36881: LD_INT 55
36883: PUSH
36884: LD_INT 56
36886: PUSH
36887: LD_INT 57
36889: PUSH
36890: LD_INT 58
36892: PUSH
36893: LD_INT 59
36895: PUSH
36896: LD_INT 60
36898: PUSH
36899: LD_INT 61
36901: PUSH
36902: LD_INT 62
36904: PUSH
36905: LD_INT 80
36907: PUSH
36908: LD_INT 82
36910: PUSH
36911: LD_INT 83
36913: PUSH
36914: LD_INT 84
36916: PUSH
36917: LD_INT 85
36919: PUSH
36920: LD_INT 86
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: ST_TO_ADDR
36976: GO 37443
36978: LD_INT 2
36980: DOUBLE
36981: EQUAL
36982: IFTRUE 36986
36984: GO 37212
36986: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36987: LD_ADDR_VAR 0 4
36991: PUSH
36992: LD_INT 35
36994: PUSH
36995: LD_INT 45
36997: PUSH
36998: LD_INT 46
37000: PUSH
37001: LD_INT 47
37003: PUSH
37004: LD_INT 82
37006: PUSH
37007: LD_INT 83
37009: PUSH
37010: LD_INT 84
37012: PUSH
37013: LD_INT 85
37015: PUSH
37016: LD_INT 87
37018: PUSH
37019: LD_INT 70
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: LD_INT 11
37027: PUSH
37028: LD_INT 3
37030: PUSH
37031: LD_INT 4
37033: PUSH
37034: LD_INT 5
37036: PUSH
37037: LD_INT 6
37039: PUSH
37040: LD_INT 15
37042: PUSH
37043: LD_INT 18
37045: PUSH
37046: LD_INT 7
37048: PUSH
37049: LD_INT 17
37051: PUSH
37052: LD_INT 8
37054: PUSH
37055: LD_INT 20
37057: PUSH
37058: LD_INT 21
37060: PUSH
37061: LD_INT 22
37063: PUSH
37064: LD_INT 72
37066: PUSH
37067: LD_INT 26
37069: PUSH
37070: LD_INT 69
37072: PUSH
37073: LD_INT 39
37075: PUSH
37076: LD_INT 40
37078: PUSH
37079: LD_INT 41
37081: PUSH
37082: LD_INT 42
37084: PUSH
37085: LD_INT 43
37087: PUSH
37088: LD_INT 48
37090: PUSH
37091: LD_INT 49
37093: PUSH
37094: LD_INT 50
37096: PUSH
37097: LD_INT 51
37099: PUSH
37100: LD_INT 52
37102: PUSH
37103: LD_INT 53
37105: PUSH
37106: LD_INT 54
37108: PUSH
37109: LD_INT 55
37111: PUSH
37112: LD_INT 56
37114: PUSH
37115: LD_INT 60
37117: PUSH
37118: LD_INT 61
37120: PUSH
37121: LD_INT 62
37123: PUSH
37124: LD_INT 66
37126: PUSH
37127: LD_INT 67
37129: PUSH
37130: LD_INT 68
37132: PUSH
37133: LD_INT 81
37135: PUSH
37136: LD_INT 82
37138: PUSH
37139: LD_INT 83
37141: PUSH
37142: LD_INT 84
37144: PUSH
37145: LD_INT 85
37147: PUSH
37148: LD_INT 87
37150: PUSH
37151: LD_INT 88
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: ST_TO_ADDR
37210: GO 37443
37212: LD_INT 3
37214: DOUBLE
37215: EQUAL
37216: IFTRUE 37220
37218: GO 37442
37220: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37221: LD_ADDR_VAR 0 4
37225: PUSH
37226: LD_INT 46
37228: PUSH
37229: LD_INT 47
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: LD_INT 2
37237: PUSH
37238: LD_INT 82
37240: PUSH
37241: LD_INT 83
37243: PUSH
37244: LD_INT 84
37246: PUSH
37247: LD_INT 85
37249: PUSH
37250: LD_INT 86
37252: PUSH
37253: LD_INT 11
37255: PUSH
37256: LD_INT 9
37258: PUSH
37259: LD_INT 20
37261: PUSH
37262: LD_INT 19
37264: PUSH
37265: LD_INT 21
37267: PUSH
37268: LD_INT 24
37270: PUSH
37271: LD_INT 22
37273: PUSH
37274: LD_INT 25
37276: PUSH
37277: LD_INT 28
37279: PUSH
37280: LD_INT 29
37282: PUSH
37283: LD_INT 30
37285: PUSH
37286: LD_INT 31
37288: PUSH
37289: LD_INT 37
37291: PUSH
37292: LD_INT 38
37294: PUSH
37295: LD_INT 32
37297: PUSH
37298: LD_INT 27
37300: PUSH
37301: LD_INT 33
37303: PUSH
37304: LD_INT 69
37306: PUSH
37307: LD_INT 39
37309: PUSH
37310: LD_INT 34
37312: PUSH
37313: LD_INT 40
37315: PUSH
37316: LD_INT 71
37318: PUSH
37319: LD_INT 23
37321: PUSH
37322: LD_INT 44
37324: PUSH
37325: LD_INT 48
37327: PUSH
37328: LD_INT 49
37330: PUSH
37331: LD_INT 50
37333: PUSH
37334: LD_INT 51
37336: PUSH
37337: LD_INT 52
37339: PUSH
37340: LD_INT 53
37342: PUSH
37343: LD_INT 54
37345: PUSH
37346: LD_INT 55
37348: PUSH
37349: LD_INT 56
37351: PUSH
37352: LD_INT 57
37354: PUSH
37355: LD_INT 58
37357: PUSH
37358: LD_INT 59
37360: PUSH
37361: LD_INT 63
37363: PUSH
37364: LD_INT 64
37366: PUSH
37367: LD_INT 65
37369: PUSH
37370: LD_INT 82
37372: PUSH
37373: LD_INT 83
37375: PUSH
37376: LD_INT 84
37378: PUSH
37379: LD_INT 85
37381: PUSH
37382: LD_INT 86
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: ST_TO_ADDR
37440: GO 37443
37442: POP
// if state > - 1 and state < 3 then
37443: LD_VAR 0 3
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: GREATER
37452: PUSH
37453: LD_VAR 0 3
37457: PUSH
37458: LD_INT 3
37460: LESS
37461: AND
37462: IFFALSE 37519
// for i in result do
37464: LD_ADDR_VAR 0 5
37468: PUSH
37469: LD_VAR 0 4
37473: PUSH
37474: FOR_IN
37475: IFFALSE 37517
// if GetTech ( i , side ) <> state then
37477: LD_VAR 0 5
37481: PPUSH
37482: LD_VAR 0 1
37486: PPUSH
37487: CALL_OW 321
37491: PUSH
37492: LD_VAR 0 3
37496: NONEQUAL
37497: IFFALSE 37515
// result := result diff i ;
37499: LD_ADDR_VAR 0 4
37503: PUSH
37504: LD_VAR 0 4
37508: PUSH
37509: LD_VAR 0 5
37513: DIFF
37514: ST_TO_ADDR
37515: GO 37474
37517: POP
37518: POP
// end ;
37519: LD_VAR 0 4
37523: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37524: LD_INT 0
37526: PPUSH
37527: PPUSH
37528: PPUSH
// result := true ;
37529: LD_ADDR_VAR 0 3
37533: PUSH
37534: LD_INT 1
37536: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37537: LD_ADDR_VAR 0 5
37541: PUSH
37542: LD_VAR 0 2
37546: PPUSH
37547: CALL_OW 480
37551: ST_TO_ADDR
// if not tmp then
37552: LD_VAR 0 5
37556: NOT
37557: IFFALSE 37561
// exit ;
37559: GO 37610
// for i in tmp do
37561: LD_ADDR_VAR 0 4
37565: PUSH
37566: LD_VAR 0 5
37570: PUSH
37571: FOR_IN
37572: IFFALSE 37608
// if GetTech ( i , side ) <> state_researched then
37574: LD_VAR 0 4
37578: PPUSH
37579: LD_VAR 0 1
37583: PPUSH
37584: CALL_OW 321
37588: PUSH
37589: LD_INT 2
37591: NONEQUAL
37592: IFFALSE 37606
// begin result := false ;
37594: LD_ADDR_VAR 0 3
37598: PUSH
37599: LD_INT 0
37601: ST_TO_ADDR
// exit ;
37602: POP
37603: POP
37604: GO 37610
// end ;
37606: GO 37571
37608: POP
37609: POP
// end ;
37610: LD_VAR 0 3
37614: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37615: LD_INT 0
37617: PPUSH
37618: PPUSH
37619: PPUSH
37620: PPUSH
37621: PPUSH
37622: PPUSH
37623: PPUSH
37624: PPUSH
37625: PPUSH
37626: PPUSH
37627: PPUSH
37628: PPUSH
37629: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37630: LD_VAR 0 1
37634: NOT
37635: PUSH
37636: LD_VAR 0 1
37640: PPUSH
37641: CALL_OW 257
37645: PUSH
37646: LD_INT 9
37648: NONEQUAL
37649: OR
37650: IFFALSE 37654
// exit ;
37652: GO 38227
// side := GetSide ( unit ) ;
37654: LD_ADDR_VAR 0 9
37658: PUSH
37659: LD_VAR 0 1
37663: PPUSH
37664: CALL_OW 255
37668: ST_TO_ADDR
// tech_space := tech_spacanom ;
37669: LD_ADDR_VAR 0 12
37673: PUSH
37674: LD_INT 29
37676: ST_TO_ADDR
// tech_time := tech_taurad ;
37677: LD_ADDR_VAR 0 13
37681: PUSH
37682: LD_INT 28
37684: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37685: LD_ADDR_VAR 0 11
37689: PUSH
37690: LD_VAR 0 1
37694: PPUSH
37695: CALL_OW 310
37699: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37700: LD_VAR 0 11
37704: PPUSH
37705: CALL_OW 247
37709: PUSH
37710: LD_INT 2
37712: EQUAL
37713: IFFALSE 37717
// exit ;
37715: GO 38227
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37717: LD_ADDR_VAR 0 8
37721: PUSH
37722: LD_INT 81
37724: PUSH
37725: LD_VAR 0 9
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 3
37736: PUSH
37737: LD_INT 21
37739: PUSH
37740: LD_INT 3
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PPUSH
37755: CALL_OW 69
37759: ST_TO_ADDR
// if not tmp then
37760: LD_VAR 0 8
37764: NOT
37765: IFFALSE 37769
// exit ;
37767: GO 38227
// if in_unit then
37769: LD_VAR 0 11
37773: IFFALSE 37797
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37775: LD_ADDR_VAR 0 10
37779: PUSH
37780: LD_VAR 0 8
37784: PPUSH
37785: LD_VAR 0 11
37789: PPUSH
37790: CALL_OW 74
37794: ST_TO_ADDR
37795: GO 37817
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37797: LD_ADDR_VAR 0 10
37801: PUSH
37802: LD_VAR 0 8
37806: PPUSH
37807: LD_VAR 0 1
37811: PPUSH
37812: CALL_OW 74
37816: ST_TO_ADDR
// if not enemy then
37817: LD_VAR 0 10
37821: NOT
37822: IFFALSE 37826
// exit ;
37824: GO 38227
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37826: LD_VAR 0 11
37830: PUSH
37831: LD_VAR 0 11
37835: PPUSH
37836: LD_VAR 0 10
37840: PPUSH
37841: CALL_OW 296
37845: PUSH
37846: LD_INT 13
37848: GREATER
37849: AND
37850: PUSH
37851: LD_VAR 0 1
37855: PPUSH
37856: LD_VAR 0 10
37860: PPUSH
37861: CALL_OW 296
37865: PUSH
37866: LD_INT 12
37868: GREATER
37869: OR
37870: IFFALSE 37874
// exit ;
37872: GO 38227
// missile := [ 1 ] ;
37874: LD_ADDR_VAR 0 14
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37885: LD_VAR 0 9
37889: PPUSH
37890: LD_VAR 0 12
37894: PPUSH
37895: CALL_OW 325
37899: IFFALSE 37928
// missile := Insert ( missile , missile + 1 , 2 ) ;
37901: LD_ADDR_VAR 0 14
37905: PUSH
37906: LD_VAR 0 14
37910: PPUSH
37911: LD_VAR 0 14
37915: PUSH
37916: LD_INT 1
37918: PLUS
37919: PPUSH
37920: LD_INT 2
37922: PPUSH
37923: CALL_OW 2
37927: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37928: LD_VAR 0 9
37932: PPUSH
37933: LD_VAR 0 13
37937: PPUSH
37938: CALL_OW 325
37942: PUSH
37943: LD_VAR 0 10
37947: PPUSH
37948: CALL_OW 255
37952: PPUSH
37953: LD_VAR 0 13
37957: PPUSH
37958: CALL_OW 325
37962: NOT
37963: AND
37964: IFFALSE 37993
// missile := Insert ( missile , missile + 1 , 3 ) ;
37966: LD_ADDR_VAR 0 14
37970: PUSH
37971: LD_VAR 0 14
37975: PPUSH
37976: LD_VAR 0 14
37980: PUSH
37981: LD_INT 1
37983: PLUS
37984: PPUSH
37985: LD_INT 3
37987: PPUSH
37988: CALL_OW 2
37992: ST_TO_ADDR
// if missile < 2 then
37993: LD_VAR 0 14
37997: PUSH
37998: LD_INT 2
38000: LESS
38001: IFFALSE 38005
// exit ;
38003: GO 38227
// x := GetX ( enemy ) ;
38005: LD_ADDR_VAR 0 4
38009: PUSH
38010: LD_VAR 0 10
38014: PPUSH
38015: CALL_OW 250
38019: ST_TO_ADDR
// y := GetY ( enemy ) ;
38020: LD_ADDR_VAR 0 5
38024: PUSH
38025: LD_VAR 0 10
38029: PPUSH
38030: CALL_OW 251
38034: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38035: LD_ADDR_VAR 0 6
38039: PUSH
38040: LD_VAR 0 4
38044: PUSH
38045: LD_INT 1
38047: NEG
38048: PPUSH
38049: LD_INT 1
38051: PPUSH
38052: CALL_OW 12
38056: PLUS
38057: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38058: LD_ADDR_VAR 0 7
38062: PUSH
38063: LD_VAR 0 5
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PPUSH
38072: LD_INT 1
38074: PPUSH
38075: CALL_OW 12
38079: PLUS
38080: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38081: LD_VAR 0 6
38085: PPUSH
38086: LD_VAR 0 7
38090: PPUSH
38091: CALL_OW 488
38095: NOT
38096: IFFALSE 38118
// begin _x := x ;
38098: LD_ADDR_VAR 0 6
38102: PUSH
38103: LD_VAR 0 4
38107: ST_TO_ADDR
// _y := y ;
38108: LD_ADDR_VAR 0 7
38112: PUSH
38113: LD_VAR 0 5
38117: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38118: LD_ADDR_VAR 0 3
38122: PUSH
38123: LD_INT 1
38125: PPUSH
38126: LD_VAR 0 14
38130: PPUSH
38131: CALL_OW 12
38135: ST_TO_ADDR
// case i of 1 :
38136: LD_VAR 0 3
38140: PUSH
38141: LD_INT 1
38143: DOUBLE
38144: EQUAL
38145: IFTRUE 38149
38147: GO 38166
38149: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38150: LD_VAR 0 1
38154: PPUSH
38155: LD_VAR 0 10
38159: PPUSH
38160: CALL_OW 115
38164: GO 38227
38166: LD_INT 2
38168: DOUBLE
38169: EQUAL
38170: IFTRUE 38174
38172: GO 38196
38174: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38175: LD_VAR 0 1
38179: PPUSH
38180: LD_VAR 0 6
38184: PPUSH
38185: LD_VAR 0 7
38189: PPUSH
38190: CALL_OW 153
38194: GO 38227
38196: LD_INT 3
38198: DOUBLE
38199: EQUAL
38200: IFTRUE 38204
38202: GO 38226
38204: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38205: LD_VAR 0 1
38209: PPUSH
38210: LD_VAR 0 6
38214: PPUSH
38215: LD_VAR 0 7
38219: PPUSH
38220: CALL_OW 154
38224: GO 38227
38226: POP
// end ;
38227: LD_VAR 0 2
38231: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38232: LD_INT 0
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
// if not unit or not building then
38240: LD_VAR 0 1
38244: NOT
38245: PUSH
38246: LD_VAR 0 2
38250: NOT
38251: OR
38252: IFFALSE 38256
// exit ;
38254: GO 38414
// x := GetX ( building ) ;
38256: LD_ADDR_VAR 0 5
38260: PUSH
38261: LD_VAR 0 2
38265: PPUSH
38266: CALL_OW 250
38270: ST_TO_ADDR
// y := GetY ( building ) ;
38271: LD_ADDR_VAR 0 6
38275: PUSH
38276: LD_VAR 0 2
38280: PPUSH
38281: CALL_OW 251
38285: ST_TO_ADDR
// for i = 0 to 5 do
38286: LD_ADDR_VAR 0 4
38290: PUSH
38291: DOUBLE
38292: LD_INT 0
38294: DEC
38295: ST_TO_ADDR
38296: LD_INT 5
38298: PUSH
38299: FOR_TO
38300: IFFALSE 38412
// begin _x := ShiftX ( x , i , 3 ) ;
38302: LD_ADDR_VAR 0 7
38306: PUSH
38307: LD_VAR 0 5
38311: PPUSH
38312: LD_VAR 0 4
38316: PPUSH
38317: LD_INT 3
38319: PPUSH
38320: CALL_OW 272
38324: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38325: LD_ADDR_VAR 0 8
38329: PUSH
38330: LD_VAR 0 6
38334: PPUSH
38335: LD_VAR 0 4
38339: PPUSH
38340: LD_INT 3
38342: PPUSH
38343: CALL_OW 273
38347: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38348: LD_VAR 0 7
38352: PPUSH
38353: LD_VAR 0 8
38357: PPUSH
38358: CALL_OW 488
38362: NOT
38363: IFFALSE 38367
// continue ;
38365: GO 38299
// if HexInfo ( _x , _y ) = 0 then
38367: LD_VAR 0 7
38371: PPUSH
38372: LD_VAR 0 8
38376: PPUSH
38377: CALL_OW 428
38381: PUSH
38382: LD_INT 0
38384: EQUAL
38385: IFFALSE 38410
// begin ComMoveXY ( unit , _x , _y ) ;
38387: LD_VAR 0 1
38391: PPUSH
38392: LD_VAR 0 7
38396: PPUSH
38397: LD_VAR 0 8
38401: PPUSH
38402: CALL_OW 111
// exit ;
38406: POP
38407: POP
38408: GO 38414
// end ; end ;
38410: GO 38299
38412: POP
38413: POP
// end ;
38414: LD_VAR 0 3
38418: RET
// export function ScanBase ( side , base_area ) ; begin
38419: LD_INT 0
38421: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38422: LD_ADDR_VAR 0 3
38426: PUSH
38427: LD_VAR 0 2
38431: PPUSH
38432: LD_INT 81
38434: PUSH
38435: LD_VAR 0 1
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PPUSH
38444: CALL_OW 70
38448: ST_TO_ADDR
// end ;
38449: LD_VAR 0 3
38453: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38454: LD_INT 0
38456: PPUSH
38457: PPUSH
38458: PPUSH
38459: PPUSH
// result := false ;
38460: LD_ADDR_VAR 0 2
38464: PUSH
38465: LD_INT 0
38467: ST_TO_ADDR
// side := GetSide ( unit ) ;
38468: LD_ADDR_VAR 0 3
38472: PUSH
38473: LD_VAR 0 1
38477: PPUSH
38478: CALL_OW 255
38482: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38483: LD_ADDR_VAR 0 4
38487: PUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: CALL_OW 248
38497: ST_TO_ADDR
// case nat of 1 :
38498: LD_VAR 0 4
38502: PUSH
38503: LD_INT 1
38505: DOUBLE
38506: EQUAL
38507: IFTRUE 38511
38509: GO 38522
38511: POP
// tech := tech_lassight ; 2 :
38512: LD_ADDR_VAR 0 5
38516: PUSH
38517: LD_INT 12
38519: ST_TO_ADDR
38520: GO 38561
38522: LD_INT 2
38524: DOUBLE
38525: EQUAL
38526: IFTRUE 38530
38528: GO 38541
38530: POP
// tech := tech_mortar ; 3 :
38531: LD_ADDR_VAR 0 5
38535: PUSH
38536: LD_INT 41
38538: ST_TO_ADDR
38539: GO 38561
38541: LD_INT 3
38543: DOUBLE
38544: EQUAL
38545: IFTRUE 38549
38547: GO 38560
38549: POP
// tech := tech_bazooka ; end ;
38550: LD_ADDR_VAR 0 5
38554: PUSH
38555: LD_INT 44
38557: ST_TO_ADDR
38558: GO 38561
38560: POP
// if Researched ( side , tech ) then
38561: LD_VAR 0 3
38565: PPUSH
38566: LD_VAR 0 5
38570: PPUSH
38571: CALL_OW 325
38575: IFFALSE 38602
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38577: LD_ADDR_VAR 0 2
38581: PUSH
38582: LD_INT 5
38584: PUSH
38585: LD_INT 8
38587: PUSH
38588: LD_INT 9
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: LIST
38595: PUSH
38596: LD_VAR 0 4
38600: ARRAY
38601: ST_TO_ADDR
// end ;
38602: LD_VAR 0 2
38606: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38607: LD_INT 0
38609: PPUSH
38610: PPUSH
38611: PPUSH
// if not mines then
38612: LD_VAR 0 2
38616: NOT
38617: IFFALSE 38621
// exit ;
38619: GO 38765
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38621: LD_ADDR_VAR 0 5
38625: PUSH
38626: LD_INT 81
38628: PUSH
38629: LD_VAR 0 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 3
38640: PUSH
38641: LD_INT 21
38643: PUSH
38644: LD_INT 3
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PPUSH
38659: CALL_OW 69
38663: ST_TO_ADDR
// for i in mines do
38664: LD_ADDR_VAR 0 4
38668: PUSH
38669: LD_VAR 0 2
38673: PUSH
38674: FOR_IN
38675: IFFALSE 38763
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38677: LD_VAR 0 4
38681: PUSH
38682: LD_INT 1
38684: ARRAY
38685: PPUSH
38686: LD_VAR 0 4
38690: PUSH
38691: LD_INT 2
38693: ARRAY
38694: PPUSH
38695: CALL_OW 458
38699: NOT
38700: IFFALSE 38704
// continue ;
38702: GO 38674
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38704: LD_VAR 0 4
38708: PUSH
38709: LD_INT 1
38711: ARRAY
38712: PPUSH
38713: LD_VAR 0 4
38717: PUSH
38718: LD_INT 2
38720: ARRAY
38721: PPUSH
38722: CALL_OW 428
38726: PUSH
38727: LD_VAR 0 5
38731: IN
38732: IFFALSE 38761
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38734: LD_VAR 0 4
38738: PUSH
38739: LD_INT 1
38741: ARRAY
38742: PPUSH
38743: LD_VAR 0 4
38747: PUSH
38748: LD_INT 2
38750: ARRAY
38751: PPUSH
38752: LD_VAR 0 1
38756: PPUSH
38757: CALL_OW 456
// end ;
38761: GO 38674
38763: POP
38764: POP
// end ;
38765: LD_VAR 0 3
38769: RET
// export function Count ( array ) ; var i ; begin
38770: LD_INT 0
38772: PPUSH
38773: PPUSH
// result := 0 ;
38774: LD_ADDR_VAR 0 2
38778: PUSH
38779: LD_INT 0
38781: ST_TO_ADDR
// for i in array do
38782: LD_ADDR_VAR 0 3
38786: PUSH
38787: LD_VAR 0 1
38791: PUSH
38792: FOR_IN
38793: IFFALSE 38817
// if i then
38795: LD_VAR 0 3
38799: IFFALSE 38815
// result := result + 1 ;
38801: LD_ADDR_VAR 0 2
38805: PUSH
38806: LD_VAR 0 2
38810: PUSH
38811: LD_INT 1
38813: PLUS
38814: ST_TO_ADDR
38815: GO 38792
38817: POP
38818: POP
// end ;
38819: LD_VAR 0 2
38823: RET
// export function IsEmpty ( building ) ; begin
38824: LD_INT 0
38826: PPUSH
// if not building then
38827: LD_VAR 0 1
38831: NOT
38832: IFFALSE 38836
// exit ;
38834: GO 38879
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38836: LD_ADDR_VAR 0 2
38840: PUSH
38841: LD_VAR 0 1
38845: PUSH
38846: LD_INT 22
38848: PUSH
38849: LD_VAR 0 1
38853: PPUSH
38854: CALL_OW 255
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 58
38865: PUSH
38866: EMPTY
38867: LIST
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PPUSH
38873: CALL_OW 69
38877: IN
38878: ST_TO_ADDR
// end ;
38879: LD_VAR 0 2
38883: RET
// export function IsNotFull ( building ) ; begin
38884: LD_INT 0
38886: PPUSH
// if not building then
38887: LD_VAR 0 1
38891: NOT
38892: IFFALSE 38896
// exit ;
38894: GO 38915
// result := UnitsInside ( building ) < 6 ;
38896: LD_ADDR_VAR 0 2
38900: PUSH
38901: LD_VAR 0 1
38905: PPUSH
38906: CALL_OW 313
38910: PUSH
38911: LD_INT 6
38913: LESS
38914: ST_TO_ADDR
// end ;
38915: LD_VAR 0 2
38919: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38920: LD_INT 0
38922: PPUSH
38923: PPUSH
38924: PPUSH
38925: PPUSH
// tmp := [ ] ;
38926: LD_ADDR_VAR 0 3
38930: PUSH
38931: EMPTY
38932: ST_TO_ADDR
// list := [ ] ;
38933: LD_ADDR_VAR 0 5
38937: PUSH
38938: EMPTY
38939: ST_TO_ADDR
// for i = 16 to 25 do
38940: LD_ADDR_VAR 0 4
38944: PUSH
38945: DOUBLE
38946: LD_INT 16
38948: DEC
38949: ST_TO_ADDR
38950: LD_INT 25
38952: PUSH
38953: FOR_TO
38954: IFFALSE 39027
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38956: LD_ADDR_VAR 0 3
38960: PUSH
38961: LD_VAR 0 3
38965: PUSH
38966: LD_INT 22
38968: PUSH
38969: LD_VAR 0 1
38973: PPUSH
38974: CALL_OW 255
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 91
38985: PUSH
38986: LD_VAR 0 1
38990: PUSH
38991: LD_INT 6
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 30
39001: PUSH
39002: LD_VAR 0 4
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: LIST
39015: PUSH
39016: EMPTY
39017: LIST
39018: PPUSH
39019: CALL_OW 69
39023: ADD
39024: ST_TO_ADDR
39025: GO 38953
39027: POP
39028: POP
// for i = 1 to tmp do
39029: LD_ADDR_VAR 0 4
39033: PUSH
39034: DOUBLE
39035: LD_INT 1
39037: DEC
39038: ST_TO_ADDR
39039: LD_VAR 0 3
39043: PUSH
39044: FOR_TO
39045: IFFALSE 39133
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39047: LD_ADDR_VAR 0 5
39051: PUSH
39052: LD_VAR 0 5
39056: PUSH
39057: LD_VAR 0 3
39061: PUSH
39062: LD_VAR 0 4
39066: ARRAY
39067: PPUSH
39068: CALL_OW 266
39072: PUSH
39073: LD_VAR 0 3
39077: PUSH
39078: LD_VAR 0 4
39082: ARRAY
39083: PPUSH
39084: CALL_OW 250
39088: PUSH
39089: LD_VAR 0 3
39093: PUSH
39094: LD_VAR 0 4
39098: ARRAY
39099: PPUSH
39100: CALL_OW 251
39104: PUSH
39105: LD_VAR 0 3
39109: PUSH
39110: LD_VAR 0 4
39114: ARRAY
39115: PPUSH
39116: CALL_OW 254
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: PUSH
39127: EMPTY
39128: LIST
39129: ADD
39130: ST_TO_ADDR
39131: GO 39044
39133: POP
39134: POP
// result := list ;
39135: LD_ADDR_VAR 0 2
39139: PUSH
39140: LD_VAR 0 5
39144: ST_TO_ADDR
// end ;
39145: LD_VAR 0 2
39149: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39150: LD_INT 0
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
// if not factory then
39159: LD_VAR 0 1
39163: NOT
39164: IFFALSE 39168
// exit ;
39166: GO 39761
// if control = control_apeman then
39168: LD_VAR 0 4
39172: PUSH
39173: LD_INT 5
39175: EQUAL
39176: IFFALSE 39285
// begin tmp := UnitsInside ( factory ) ;
39178: LD_ADDR_VAR 0 8
39182: PUSH
39183: LD_VAR 0 1
39187: PPUSH
39188: CALL_OW 313
39192: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39193: LD_VAR 0 8
39197: PPUSH
39198: LD_INT 25
39200: PUSH
39201: LD_INT 12
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PPUSH
39208: CALL_OW 72
39212: NOT
39213: IFFALSE 39223
// control := control_manual ;
39215: LD_ADDR_VAR 0 4
39219: PUSH
39220: LD_INT 1
39222: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39223: LD_ADDR_VAR 0 8
39227: PUSH
39228: LD_VAR 0 1
39232: PPUSH
39233: CALL 38920 0 1
39237: ST_TO_ADDR
// if tmp then
39238: LD_VAR 0 8
39242: IFFALSE 39285
// begin for i in tmp do
39244: LD_ADDR_VAR 0 7
39248: PUSH
39249: LD_VAR 0 8
39253: PUSH
39254: FOR_IN
39255: IFFALSE 39283
// if i [ 1 ] = b_ext_radio then
39257: LD_VAR 0 7
39261: PUSH
39262: LD_INT 1
39264: ARRAY
39265: PUSH
39266: LD_INT 22
39268: EQUAL
39269: IFFALSE 39281
// begin control := control_remote ;
39271: LD_ADDR_VAR 0 4
39275: PUSH
39276: LD_INT 2
39278: ST_TO_ADDR
// break ;
39279: GO 39283
// end ;
39281: GO 39254
39283: POP
39284: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39285: LD_VAR 0 1
39289: PPUSH
39290: LD_VAR 0 2
39294: PPUSH
39295: LD_VAR 0 3
39299: PPUSH
39300: LD_VAR 0 4
39304: PPUSH
39305: LD_VAR 0 5
39309: PPUSH
39310: CALL_OW 448
39314: IFFALSE 39349
// begin result := [ chassis , engine , control , weapon ] ;
39316: LD_ADDR_VAR 0 6
39320: PUSH
39321: LD_VAR 0 2
39325: PUSH
39326: LD_VAR 0 3
39330: PUSH
39331: LD_VAR 0 4
39335: PUSH
39336: LD_VAR 0 5
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: ST_TO_ADDR
// exit ;
39347: GO 39761
// end ; _chassis := AvailableChassisList ( factory ) ;
39349: LD_ADDR_VAR 0 9
39353: PUSH
39354: LD_VAR 0 1
39358: PPUSH
39359: CALL_OW 475
39363: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39364: LD_ADDR_VAR 0 11
39368: PUSH
39369: LD_VAR 0 1
39373: PPUSH
39374: CALL_OW 476
39378: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39379: LD_ADDR_VAR 0 12
39383: PUSH
39384: LD_VAR 0 1
39388: PPUSH
39389: CALL_OW 477
39393: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39394: LD_ADDR_VAR 0 10
39398: PUSH
39399: LD_VAR 0 1
39403: PPUSH
39404: CALL_OW 478
39408: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39409: LD_VAR 0 9
39413: NOT
39414: PUSH
39415: LD_VAR 0 11
39419: NOT
39420: OR
39421: PUSH
39422: LD_VAR 0 12
39426: NOT
39427: OR
39428: PUSH
39429: LD_VAR 0 10
39433: NOT
39434: OR
39435: IFFALSE 39470
// begin result := [ chassis , engine , control , weapon ] ;
39437: LD_ADDR_VAR 0 6
39441: PUSH
39442: LD_VAR 0 2
39446: PUSH
39447: LD_VAR 0 3
39451: PUSH
39452: LD_VAR 0 4
39456: PUSH
39457: LD_VAR 0 5
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: ST_TO_ADDR
// exit ;
39468: GO 39761
// end ; if not chassis in _chassis then
39470: LD_VAR 0 2
39474: PUSH
39475: LD_VAR 0 9
39479: IN
39480: NOT
39481: IFFALSE 39507
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39483: LD_ADDR_VAR 0 2
39487: PUSH
39488: LD_VAR 0 9
39492: PUSH
39493: LD_INT 1
39495: PPUSH
39496: LD_VAR 0 9
39500: PPUSH
39501: CALL_OW 12
39505: ARRAY
39506: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39507: LD_VAR 0 2
39511: PPUSH
39512: LD_VAR 0 3
39516: PPUSH
39517: CALL 39766 0 2
39521: NOT
39522: IFFALSE 39581
// repeat engine := _engine [ 1 ] ;
39524: LD_ADDR_VAR 0 3
39528: PUSH
39529: LD_VAR 0 11
39533: PUSH
39534: LD_INT 1
39536: ARRAY
39537: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39538: LD_ADDR_VAR 0 11
39542: PUSH
39543: LD_VAR 0 11
39547: PPUSH
39548: LD_INT 1
39550: PPUSH
39551: CALL_OW 3
39555: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39556: LD_VAR 0 2
39560: PPUSH
39561: LD_VAR 0 3
39565: PPUSH
39566: CALL 39766 0 2
39570: PUSH
39571: LD_VAR 0 11
39575: PUSH
39576: EMPTY
39577: EQUAL
39578: OR
39579: IFFALSE 39524
// if not control in _control then
39581: LD_VAR 0 4
39585: PUSH
39586: LD_VAR 0 12
39590: IN
39591: NOT
39592: IFFALSE 39618
// control := _control [ rand ( 1 , _control ) ] ;
39594: LD_ADDR_VAR 0 4
39598: PUSH
39599: LD_VAR 0 12
39603: PUSH
39604: LD_INT 1
39606: PPUSH
39607: LD_VAR 0 12
39611: PPUSH
39612: CALL_OW 12
39616: ARRAY
39617: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39618: LD_VAR 0 2
39622: PPUSH
39623: LD_VAR 0 5
39627: PPUSH
39628: CALL 39986 0 2
39632: NOT
39633: IFFALSE 39692
// repeat weapon := _weapon [ 1 ] ;
39635: LD_ADDR_VAR 0 5
39639: PUSH
39640: LD_VAR 0 10
39644: PUSH
39645: LD_INT 1
39647: ARRAY
39648: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39649: LD_ADDR_VAR 0 10
39653: PUSH
39654: LD_VAR 0 10
39658: PPUSH
39659: LD_INT 1
39661: PPUSH
39662: CALL_OW 3
39666: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39667: LD_VAR 0 2
39671: PPUSH
39672: LD_VAR 0 5
39676: PPUSH
39677: CALL 39986 0 2
39681: PUSH
39682: LD_VAR 0 10
39686: PUSH
39687: EMPTY
39688: EQUAL
39689: OR
39690: IFFALSE 39635
// result := [ ] ;
39692: LD_ADDR_VAR 0 6
39696: PUSH
39697: EMPTY
39698: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39699: LD_VAR 0 1
39703: PPUSH
39704: LD_VAR 0 2
39708: PPUSH
39709: LD_VAR 0 3
39713: PPUSH
39714: LD_VAR 0 4
39718: PPUSH
39719: LD_VAR 0 5
39723: PPUSH
39724: CALL_OW 448
39728: IFFALSE 39761
// result := [ chassis , engine , control , weapon ] ;
39730: LD_ADDR_VAR 0 6
39734: PUSH
39735: LD_VAR 0 2
39739: PUSH
39740: LD_VAR 0 3
39744: PUSH
39745: LD_VAR 0 4
39749: PUSH
39750: LD_VAR 0 5
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: ST_TO_ADDR
// end ;
39761: LD_VAR 0 6
39765: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39766: LD_INT 0
39768: PPUSH
// if not chassis or not engine then
39769: LD_VAR 0 1
39773: NOT
39774: PUSH
39775: LD_VAR 0 2
39779: NOT
39780: OR
39781: IFFALSE 39785
// exit ;
39783: GO 39981
// case engine of engine_solar :
39785: LD_VAR 0 2
39789: PUSH
39790: LD_INT 2
39792: DOUBLE
39793: EQUAL
39794: IFTRUE 39798
39796: GO 39836
39798: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39799: LD_ADDR_VAR 0 3
39803: PUSH
39804: LD_INT 11
39806: PUSH
39807: LD_INT 12
39809: PUSH
39810: LD_INT 13
39812: PUSH
39813: LD_INT 14
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: LD_INT 3
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: ST_TO_ADDR
39834: GO 39965
39836: LD_INT 1
39838: DOUBLE
39839: EQUAL
39840: IFTRUE 39844
39842: GO 39906
39844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39845: LD_ADDR_VAR 0 3
39849: PUSH
39850: LD_INT 11
39852: PUSH
39853: LD_INT 12
39855: PUSH
39856: LD_INT 13
39858: PUSH
39859: LD_INT 14
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: LD_INT 2
39867: PUSH
39868: LD_INT 3
39870: PUSH
39871: LD_INT 4
39873: PUSH
39874: LD_INT 5
39876: PUSH
39877: LD_INT 21
39879: PUSH
39880: LD_INT 23
39882: PUSH
39883: LD_INT 22
39885: PUSH
39886: LD_INT 24
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: ST_TO_ADDR
39904: GO 39965
39906: LD_INT 3
39908: DOUBLE
39909: EQUAL
39910: IFTRUE 39914
39912: GO 39964
39914: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39915: LD_ADDR_VAR 0 3
39919: PUSH
39920: LD_INT 13
39922: PUSH
39923: LD_INT 14
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 3
39931: PUSH
39932: LD_INT 4
39934: PUSH
39935: LD_INT 5
39937: PUSH
39938: LD_INT 21
39940: PUSH
39941: LD_INT 22
39943: PUSH
39944: LD_INT 23
39946: PUSH
39947: LD_INT 24
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: ST_TO_ADDR
39962: GO 39965
39964: POP
// result := ( chassis in result ) ;
39965: LD_ADDR_VAR 0 3
39969: PUSH
39970: LD_VAR 0 1
39974: PUSH
39975: LD_VAR 0 3
39979: IN
39980: ST_TO_ADDR
// end ;
39981: LD_VAR 0 3
39985: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39986: LD_INT 0
39988: PPUSH
// if not chassis or not weapon then
39989: LD_VAR 0 1
39993: NOT
39994: PUSH
39995: LD_VAR 0 2
39999: NOT
40000: OR
40001: IFFALSE 40005
// exit ;
40003: GO 41067
// case weapon of us_machine_gun :
40005: LD_VAR 0 2
40009: PUSH
40010: LD_INT 2
40012: DOUBLE
40013: EQUAL
40014: IFTRUE 40018
40016: GO 40048
40018: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40019: LD_ADDR_VAR 0 3
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: LD_INT 3
40032: PUSH
40033: LD_INT 4
40035: PUSH
40036: LD_INT 5
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: ST_TO_ADDR
40046: GO 41051
40048: LD_INT 3
40050: DOUBLE
40051: EQUAL
40052: IFTRUE 40056
40054: GO 40086
40056: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40057: LD_ADDR_VAR 0 3
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: LD_INT 3
40070: PUSH
40071: LD_INT 4
40073: PUSH
40074: LD_INT 5
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: ST_TO_ADDR
40084: GO 41051
40086: LD_INT 11
40088: DOUBLE
40089: EQUAL
40090: IFTRUE 40094
40092: GO 40124
40094: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40095: LD_ADDR_VAR 0 3
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: LD_INT 2
40105: PUSH
40106: LD_INT 3
40108: PUSH
40109: LD_INT 4
40111: PUSH
40112: LD_INT 5
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: ST_TO_ADDR
40122: GO 41051
40124: LD_INT 4
40126: DOUBLE
40127: EQUAL
40128: IFTRUE 40132
40130: GO 40158
40132: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40133: LD_ADDR_VAR 0 3
40137: PUSH
40138: LD_INT 2
40140: PUSH
40141: LD_INT 3
40143: PUSH
40144: LD_INT 4
40146: PUSH
40147: LD_INT 5
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: ST_TO_ADDR
40156: GO 41051
40158: LD_INT 5
40160: DOUBLE
40161: EQUAL
40162: IFTRUE 40166
40164: GO 40192
40166: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40167: LD_ADDR_VAR 0 3
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: LD_INT 3
40177: PUSH
40178: LD_INT 4
40180: PUSH
40181: LD_INT 5
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: ST_TO_ADDR
40190: GO 41051
40192: LD_INT 9
40194: DOUBLE
40195: EQUAL
40196: IFTRUE 40200
40198: GO 40226
40200: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40201: LD_ADDR_VAR 0 3
40205: PUSH
40206: LD_INT 2
40208: PUSH
40209: LD_INT 3
40211: PUSH
40212: LD_INT 4
40214: PUSH
40215: LD_INT 5
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: ST_TO_ADDR
40224: GO 41051
40226: LD_INT 7
40228: DOUBLE
40229: EQUAL
40230: IFTRUE 40234
40232: GO 40260
40234: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40235: LD_ADDR_VAR 0 3
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 3
40245: PUSH
40246: LD_INT 4
40248: PUSH
40249: LD_INT 5
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: ST_TO_ADDR
40258: GO 41051
40260: LD_INT 12
40262: DOUBLE
40263: EQUAL
40264: IFTRUE 40268
40266: GO 40294
40268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40269: LD_ADDR_VAR 0 3
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: LD_INT 3
40279: PUSH
40280: LD_INT 4
40282: PUSH
40283: LD_INT 5
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: ST_TO_ADDR
40292: GO 41051
40294: LD_INT 13
40296: DOUBLE
40297: EQUAL
40298: IFTRUE 40302
40300: GO 40328
40302: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40303: LD_ADDR_VAR 0 3
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: LD_INT 3
40313: PUSH
40314: LD_INT 4
40316: PUSH
40317: LD_INT 5
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: ST_TO_ADDR
40326: GO 41051
40328: LD_INT 14
40330: DOUBLE
40331: EQUAL
40332: IFTRUE 40336
40334: GO 40354
40336: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40337: LD_ADDR_VAR 0 3
40341: PUSH
40342: LD_INT 4
40344: PUSH
40345: LD_INT 5
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: ST_TO_ADDR
40352: GO 41051
40354: LD_INT 6
40356: DOUBLE
40357: EQUAL
40358: IFTRUE 40362
40360: GO 40380
40362: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40363: LD_ADDR_VAR 0 3
40367: PUSH
40368: LD_INT 4
40370: PUSH
40371: LD_INT 5
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: ST_TO_ADDR
40378: GO 41051
40380: LD_INT 10
40382: DOUBLE
40383: EQUAL
40384: IFTRUE 40388
40386: GO 40406
40388: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40389: LD_ADDR_VAR 0 3
40393: PUSH
40394: LD_INT 4
40396: PUSH
40397: LD_INT 5
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: ST_TO_ADDR
40404: GO 41051
40406: LD_INT 22
40408: DOUBLE
40409: EQUAL
40410: IFTRUE 40414
40412: GO 40440
40414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40415: LD_ADDR_VAR 0 3
40419: PUSH
40420: LD_INT 11
40422: PUSH
40423: LD_INT 12
40425: PUSH
40426: LD_INT 13
40428: PUSH
40429: LD_INT 14
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: ST_TO_ADDR
40438: GO 41051
40440: LD_INT 23
40442: DOUBLE
40443: EQUAL
40444: IFTRUE 40448
40446: GO 40474
40448: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40449: LD_ADDR_VAR 0 3
40453: PUSH
40454: LD_INT 11
40456: PUSH
40457: LD_INT 12
40459: PUSH
40460: LD_INT 13
40462: PUSH
40463: LD_INT 14
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: ST_TO_ADDR
40472: GO 41051
40474: LD_INT 24
40476: DOUBLE
40477: EQUAL
40478: IFTRUE 40482
40480: GO 40508
40482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40483: LD_ADDR_VAR 0 3
40487: PUSH
40488: LD_INT 11
40490: PUSH
40491: LD_INT 12
40493: PUSH
40494: LD_INT 13
40496: PUSH
40497: LD_INT 14
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: ST_TO_ADDR
40506: GO 41051
40508: LD_INT 30
40510: DOUBLE
40511: EQUAL
40512: IFTRUE 40516
40514: GO 40542
40516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40517: LD_ADDR_VAR 0 3
40521: PUSH
40522: LD_INT 11
40524: PUSH
40525: LD_INT 12
40527: PUSH
40528: LD_INT 13
40530: PUSH
40531: LD_INT 14
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: ST_TO_ADDR
40540: GO 41051
40542: LD_INT 25
40544: DOUBLE
40545: EQUAL
40546: IFTRUE 40550
40548: GO 40568
40550: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40551: LD_ADDR_VAR 0 3
40555: PUSH
40556: LD_INT 13
40558: PUSH
40559: LD_INT 14
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: ST_TO_ADDR
40566: GO 41051
40568: LD_INT 27
40570: DOUBLE
40571: EQUAL
40572: IFTRUE 40576
40574: GO 40594
40576: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40577: LD_ADDR_VAR 0 3
40581: PUSH
40582: LD_INT 13
40584: PUSH
40585: LD_INT 14
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: ST_TO_ADDR
40592: GO 41051
40594: LD_EXP 53
40598: DOUBLE
40599: EQUAL
40600: IFTRUE 40604
40602: GO 40630
40604: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40605: LD_ADDR_VAR 0 3
40609: PUSH
40610: LD_INT 11
40612: PUSH
40613: LD_INT 12
40615: PUSH
40616: LD_INT 13
40618: PUSH
40619: LD_INT 14
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: ST_TO_ADDR
40628: GO 41051
40630: LD_INT 28
40632: DOUBLE
40633: EQUAL
40634: IFTRUE 40638
40636: GO 40656
40638: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40639: LD_ADDR_VAR 0 3
40643: PUSH
40644: LD_INT 13
40646: PUSH
40647: LD_INT 14
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: ST_TO_ADDR
40654: GO 41051
40656: LD_INT 29
40658: DOUBLE
40659: EQUAL
40660: IFTRUE 40664
40662: GO 40682
40664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40665: LD_ADDR_VAR 0 3
40669: PUSH
40670: LD_INT 13
40672: PUSH
40673: LD_INT 14
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: ST_TO_ADDR
40680: GO 41051
40682: LD_INT 31
40684: DOUBLE
40685: EQUAL
40686: IFTRUE 40690
40688: GO 40708
40690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40691: LD_ADDR_VAR 0 3
40695: PUSH
40696: LD_INT 13
40698: PUSH
40699: LD_INT 14
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: ST_TO_ADDR
40706: GO 41051
40708: LD_INT 26
40710: DOUBLE
40711: EQUAL
40712: IFTRUE 40716
40714: GO 40734
40716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40717: LD_ADDR_VAR 0 3
40721: PUSH
40722: LD_INT 13
40724: PUSH
40725: LD_INT 14
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: ST_TO_ADDR
40732: GO 41051
40734: LD_INT 42
40736: DOUBLE
40737: EQUAL
40738: IFTRUE 40742
40740: GO 40768
40742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40743: LD_ADDR_VAR 0 3
40747: PUSH
40748: LD_INT 21
40750: PUSH
40751: LD_INT 22
40753: PUSH
40754: LD_INT 23
40756: PUSH
40757: LD_INT 24
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: ST_TO_ADDR
40766: GO 41051
40768: LD_INT 43
40770: DOUBLE
40771: EQUAL
40772: IFTRUE 40776
40774: GO 40802
40776: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40777: LD_ADDR_VAR 0 3
40781: PUSH
40782: LD_INT 21
40784: PUSH
40785: LD_INT 22
40787: PUSH
40788: LD_INT 23
40790: PUSH
40791: LD_INT 24
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: ST_TO_ADDR
40800: GO 41051
40802: LD_INT 44
40804: DOUBLE
40805: EQUAL
40806: IFTRUE 40810
40808: GO 40836
40810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40811: LD_ADDR_VAR 0 3
40815: PUSH
40816: LD_INT 21
40818: PUSH
40819: LD_INT 22
40821: PUSH
40822: LD_INT 23
40824: PUSH
40825: LD_INT 24
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: ST_TO_ADDR
40834: GO 41051
40836: LD_INT 45
40838: DOUBLE
40839: EQUAL
40840: IFTRUE 40844
40842: GO 40870
40844: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40845: LD_ADDR_VAR 0 3
40849: PUSH
40850: LD_INT 21
40852: PUSH
40853: LD_INT 22
40855: PUSH
40856: LD_INT 23
40858: PUSH
40859: LD_INT 24
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: ST_TO_ADDR
40868: GO 41051
40870: LD_INT 49
40872: DOUBLE
40873: EQUAL
40874: IFTRUE 40878
40876: GO 40904
40878: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40879: LD_ADDR_VAR 0 3
40883: PUSH
40884: LD_INT 21
40886: PUSH
40887: LD_INT 22
40889: PUSH
40890: LD_INT 23
40892: PUSH
40893: LD_INT 24
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: ST_TO_ADDR
40902: GO 41051
40904: LD_INT 51
40906: DOUBLE
40907: EQUAL
40908: IFTRUE 40912
40910: GO 40938
40912: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40913: LD_ADDR_VAR 0 3
40917: PUSH
40918: LD_INT 21
40920: PUSH
40921: LD_INT 22
40923: PUSH
40924: LD_INT 23
40926: PUSH
40927: LD_INT 24
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: ST_TO_ADDR
40936: GO 41051
40938: LD_INT 52
40940: DOUBLE
40941: EQUAL
40942: IFTRUE 40946
40944: GO 40972
40946: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40947: LD_ADDR_VAR 0 3
40951: PUSH
40952: LD_INT 21
40954: PUSH
40955: LD_INT 22
40957: PUSH
40958: LD_INT 23
40960: PUSH
40961: LD_INT 24
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: ST_TO_ADDR
40970: GO 41051
40972: LD_INT 53
40974: DOUBLE
40975: EQUAL
40976: IFTRUE 40980
40978: GO 40998
40980: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40981: LD_ADDR_VAR 0 3
40985: PUSH
40986: LD_INT 23
40988: PUSH
40989: LD_INT 24
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: ST_TO_ADDR
40996: GO 41051
40998: LD_INT 46
41000: DOUBLE
41001: EQUAL
41002: IFTRUE 41006
41004: GO 41024
41006: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41007: LD_ADDR_VAR 0 3
41011: PUSH
41012: LD_INT 23
41014: PUSH
41015: LD_INT 24
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: ST_TO_ADDR
41022: GO 41051
41024: LD_INT 47
41026: DOUBLE
41027: EQUAL
41028: IFTRUE 41032
41030: GO 41050
41032: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41033: LD_ADDR_VAR 0 3
41037: PUSH
41038: LD_INT 23
41040: PUSH
41041: LD_INT 24
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: ST_TO_ADDR
41048: GO 41051
41050: POP
// result := ( chassis in result ) ;
41051: LD_ADDR_VAR 0 3
41055: PUSH
41056: LD_VAR 0 1
41060: PUSH
41061: LD_VAR 0 3
41065: IN
41066: ST_TO_ADDR
// end ;
41067: LD_VAR 0 3
41071: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41072: LD_INT 0
41074: PPUSH
41075: PPUSH
41076: PPUSH
41077: PPUSH
41078: PPUSH
41079: PPUSH
41080: PPUSH
// result := array ;
41081: LD_ADDR_VAR 0 5
41085: PUSH
41086: LD_VAR 0 1
41090: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41091: LD_VAR 0 1
41095: NOT
41096: PUSH
41097: LD_VAR 0 2
41101: NOT
41102: OR
41103: PUSH
41104: LD_VAR 0 3
41108: NOT
41109: OR
41110: PUSH
41111: LD_VAR 0 2
41115: PUSH
41116: LD_VAR 0 1
41120: GREATER
41121: OR
41122: PUSH
41123: LD_VAR 0 3
41127: PUSH
41128: LD_VAR 0 1
41132: GREATER
41133: OR
41134: IFFALSE 41138
// exit ;
41136: GO 41434
// if direction then
41138: LD_VAR 0 4
41142: IFFALSE 41206
// begin d := 1 ;
41144: LD_ADDR_VAR 0 9
41148: PUSH
41149: LD_INT 1
41151: ST_TO_ADDR
// if i_from > i_to then
41152: LD_VAR 0 2
41156: PUSH
41157: LD_VAR 0 3
41161: GREATER
41162: IFFALSE 41188
// length := ( array - i_from ) + i_to else
41164: LD_ADDR_VAR 0 11
41168: PUSH
41169: LD_VAR 0 1
41173: PUSH
41174: LD_VAR 0 2
41178: MINUS
41179: PUSH
41180: LD_VAR 0 3
41184: PLUS
41185: ST_TO_ADDR
41186: GO 41204
// length := i_to - i_from ;
41188: LD_ADDR_VAR 0 11
41192: PUSH
41193: LD_VAR 0 3
41197: PUSH
41198: LD_VAR 0 2
41202: MINUS
41203: ST_TO_ADDR
// end else
41204: GO 41267
// begin d := - 1 ;
41206: LD_ADDR_VAR 0 9
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: ST_TO_ADDR
// if i_from > i_to then
41215: LD_VAR 0 2
41219: PUSH
41220: LD_VAR 0 3
41224: GREATER
41225: IFFALSE 41245
// length := i_from - i_to else
41227: LD_ADDR_VAR 0 11
41231: PUSH
41232: LD_VAR 0 2
41236: PUSH
41237: LD_VAR 0 3
41241: MINUS
41242: ST_TO_ADDR
41243: GO 41267
// length := ( array - i_to ) + i_from ;
41245: LD_ADDR_VAR 0 11
41249: PUSH
41250: LD_VAR 0 1
41254: PUSH
41255: LD_VAR 0 3
41259: MINUS
41260: PUSH
41261: LD_VAR 0 2
41265: PLUS
41266: ST_TO_ADDR
// end ; if not length then
41267: LD_VAR 0 11
41271: NOT
41272: IFFALSE 41276
// exit ;
41274: GO 41434
// tmp := array ;
41276: LD_ADDR_VAR 0 10
41280: PUSH
41281: LD_VAR 0 1
41285: ST_TO_ADDR
// for i = 1 to length do
41286: LD_ADDR_VAR 0 6
41290: PUSH
41291: DOUBLE
41292: LD_INT 1
41294: DEC
41295: ST_TO_ADDR
41296: LD_VAR 0 11
41300: PUSH
41301: FOR_TO
41302: IFFALSE 41422
// begin for j = 1 to array do
41304: LD_ADDR_VAR 0 7
41308: PUSH
41309: DOUBLE
41310: LD_INT 1
41312: DEC
41313: ST_TO_ADDR
41314: LD_VAR 0 1
41318: PUSH
41319: FOR_TO
41320: IFFALSE 41408
// begin k := j + d ;
41322: LD_ADDR_VAR 0 8
41326: PUSH
41327: LD_VAR 0 7
41331: PUSH
41332: LD_VAR 0 9
41336: PLUS
41337: ST_TO_ADDR
// if k > array then
41338: LD_VAR 0 8
41342: PUSH
41343: LD_VAR 0 1
41347: GREATER
41348: IFFALSE 41358
// k := 1 ;
41350: LD_ADDR_VAR 0 8
41354: PUSH
41355: LD_INT 1
41357: ST_TO_ADDR
// if not k then
41358: LD_VAR 0 8
41362: NOT
41363: IFFALSE 41375
// k := array ;
41365: LD_ADDR_VAR 0 8
41369: PUSH
41370: LD_VAR 0 1
41374: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41375: LD_ADDR_VAR 0 10
41379: PUSH
41380: LD_VAR 0 10
41384: PPUSH
41385: LD_VAR 0 8
41389: PPUSH
41390: LD_VAR 0 1
41394: PUSH
41395: LD_VAR 0 7
41399: ARRAY
41400: PPUSH
41401: CALL_OW 1
41405: ST_TO_ADDR
// end ;
41406: GO 41319
41408: POP
41409: POP
// array := tmp ;
41410: LD_ADDR_VAR 0 1
41414: PUSH
41415: LD_VAR 0 10
41419: ST_TO_ADDR
// end ;
41420: GO 41301
41422: POP
41423: POP
// result := array ;
41424: LD_ADDR_VAR 0 5
41428: PUSH
41429: LD_VAR 0 1
41433: ST_TO_ADDR
// end ;
41434: LD_VAR 0 5
41438: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41439: LD_INT 0
41441: PPUSH
41442: PPUSH
// result := 0 ;
41443: LD_ADDR_VAR 0 3
41447: PUSH
41448: LD_INT 0
41450: ST_TO_ADDR
// if not array or not value in array then
41451: LD_VAR 0 1
41455: NOT
41456: PUSH
41457: LD_VAR 0 2
41461: PUSH
41462: LD_VAR 0 1
41466: IN
41467: NOT
41468: OR
41469: IFFALSE 41473
// exit ;
41471: GO 41527
// for i = 1 to array do
41473: LD_ADDR_VAR 0 4
41477: PUSH
41478: DOUBLE
41479: LD_INT 1
41481: DEC
41482: ST_TO_ADDR
41483: LD_VAR 0 1
41487: PUSH
41488: FOR_TO
41489: IFFALSE 41525
// if value = array [ i ] then
41491: LD_VAR 0 2
41495: PUSH
41496: LD_VAR 0 1
41500: PUSH
41501: LD_VAR 0 4
41505: ARRAY
41506: EQUAL
41507: IFFALSE 41523
// begin result := i ;
41509: LD_ADDR_VAR 0 3
41513: PUSH
41514: LD_VAR 0 4
41518: ST_TO_ADDR
// exit ;
41519: POP
41520: POP
41521: GO 41527
// end ;
41523: GO 41488
41525: POP
41526: POP
// end ;
41527: LD_VAR 0 3
41531: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41532: LD_INT 0
41534: PPUSH
// vc_chassis := chassis ;
41535: LD_ADDR_OWVAR 37
41539: PUSH
41540: LD_VAR 0 1
41544: ST_TO_ADDR
// vc_engine := engine ;
41545: LD_ADDR_OWVAR 39
41549: PUSH
41550: LD_VAR 0 2
41554: ST_TO_ADDR
// vc_control := control ;
41555: LD_ADDR_OWVAR 38
41559: PUSH
41560: LD_VAR 0 3
41564: ST_TO_ADDR
// vc_weapon := weapon ;
41565: LD_ADDR_OWVAR 40
41569: PUSH
41570: LD_VAR 0 4
41574: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41575: LD_ADDR_OWVAR 41
41579: PUSH
41580: LD_VAR 0 5
41584: ST_TO_ADDR
// end ;
41585: LD_VAR 0 6
41589: RET
// export function WantPlant ( unit ) ; var task ; begin
41590: LD_INT 0
41592: PPUSH
41593: PPUSH
// result := false ;
41594: LD_ADDR_VAR 0 2
41598: PUSH
41599: LD_INT 0
41601: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41602: LD_ADDR_VAR 0 3
41606: PUSH
41607: LD_VAR 0 1
41611: PPUSH
41612: CALL_OW 437
41616: ST_TO_ADDR
// if task then
41617: LD_VAR 0 3
41621: IFFALSE 41649
// if task [ 1 ] [ 1 ] = p then
41623: LD_VAR 0 3
41627: PUSH
41628: LD_INT 1
41630: ARRAY
41631: PUSH
41632: LD_INT 1
41634: ARRAY
41635: PUSH
41636: LD_STRING p
41638: EQUAL
41639: IFFALSE 41649
// result := true ;
41641: LD_ADDR_VAR 0 2
41645: PUSH
41646: LD_INT 1
41648: ST_TO_ADDR
// end ;
41649: LD_VAR 0 2
41653: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41654: LD_INT 0
41656: PPUSH
41657: PPUSH
41658: PPUSH
41659: PPUSH
// if pos < 1 then
41660: LD_VAR 0 2
41664: PUSH
41665: LD_INT 1
41667: LESS
41668: IFFALSE 41672
// exit ;
41670: GO 41975
// if pos = 1 then
41672: LD_VAR 0 2
41676: PUSH
41677: LD_INT 1
41679: EQUAL
41680: IFFALSE 41713
// result := Replace ( arr , pos [ 1 ] , value ) else
41682: LD_ADDR_VAR 0 4
41686: PUSH
41687: LD_VAR 0 1
41691: PPUSH
41692: LD_VAR 0 2
41696: PUSH
41697: LD_INT 1
41699: ARRAY
41700: PPUSH
41701: LD_VAR 0 3
41705: PPUSH
41706: CALL_OW 1
41710: ST_TO_ADDR
41711: GO 41975
// begin tmp := arr ;
41713: LD_ADDR_VAR 0 6
41717: PUSH
41718: LD_VAR 0 1
41722: ST_TO_ADDR
// s_arr := [ tmp ] ;
41723: LD_ADDR_VAR 0 7
41727: PUSH
41728: LD_VAR 0 6
41732: PUSH
41733: EMPTY
41734: LIST
41735: ST_TO_ADDR
// for i = 1 to pos - 1 do
41736: LD_ADDR_VAR 0 5
41740: PUSH
41741: DOUBLE
41742: LD_INT 1
41744: DEC
41745: ST_TO_ADDR
41746: LD_VAR 0 2
41750: PUSH
41751: LD_INT 1
41753: MINUS
41754: PUSH
41755: FOR_TO
41756: IFFALSE 41801
// begin tmp := tmp [ pos [ i ] ] ;
41758: LD_ADDR_VAR 0 6
41762: PUSH
41763: LD_VAR 0 6
41767: PUSH
41768: LD_VAR 0 2
41772: PUSH
41773: LD_VAR 0 5
41777: ARRAY
41778: ARRAY
41779: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41780: LD_ADDR_VAR 0 7
41784: PUSH
41785: LD_VAR 0 7
41789: PUSH
41790: LD_VAR 0 6
41794: PUSH
41795: EMPTY
41796: LIST
41797: ADD
41798: ST_TO_ADDR
// end ;
41799: GO 41755
41801: POP
41802: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41803: LD_ADDR_VAR 0 6
41807: PUSH
41808: LD_VAR 0 6
41812: PPUSH
41813: LD_VAR 0 2
41817: PUSH
41818: LD_VAR 0 2
41822: ARRAY
41823: PPUSH
41824: LD_VAR 0 3
41828: PPUSH
41829: CALL_OW 1
41833: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41834: LD_ADDR_VAR 0 7
41838: PUSH
41839: LD_VAR 0 7
41843: PPUSH
41844: LD_VAR 0 7
41848: PPUSH
41849: LD_VAR 0 6
41853: PPUSH
41854: CALL_OW 1
41858: ST_TO_ADDR
// for i = s_arr downto 2 do
41859: LD_ADDR_VAR 0 5
41863: PUSH
41864: DOUBLE
41865: LD_VAR 0 7
41869: INC
41870: ST_TO_ADDR
41871: LD_INT 2
41873: PUSH
41874: FOR_DOWNTO
41875: IFFALSE 41959
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41877: LD_ADDR_VAR 0 6
41881: PUSH
41882: LD_VAR 0 7
41886: PUSH
41887: LD_VAR 0 5
41891: PUSH
41892: LD_INT 1
41894: MINUS
41895: ARRAY
41896: PPUSH
41897: LD_VAR 0 2
41901: PUSH
41902: LD_VAR 0 5
41906: PUSH
41907: LD_INT 1
41909: MINUS
41910: ARRAY
41911: PPUSH
41912: LD_VAR 0 7
41916: PUSH
41917: LD_VAR 0 5
41921: ARRAY
41922: PPUSH
41923: CALL_OW 1
41927: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41928: LD_ADDR_VAR 0 7
41932: PUSH
41933: LD_VAR 0 7
41937: PPUSH
41938: LD_VAR 0 5
41942: PUSH
41943: LD_INT 1
41945: MINUS
41946: PPUSH
41947: LD_VAR 0 6
41951: PPUSH
41952: CALL_OW 1
41956: ST_TO_ADDR
// end ;
41957: GO 41874
41959: POP
41960: POP
// result := s_arr [ 1 ] ;
41961: LD_ADDR_VAR 0 4
41965: PUSH
41966: LD_VAR 0 7
41970: PUSH
41971: LD_INT 1
41973: ARRAY
41974: ST_TO_ADDR
// end ; end ;
41975: LD_VAR 0 4
41979: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41980: LD_INT 0
41982: PPUSH
41983: PPUSH
// if not list then
41984: LD_VAR 0 1
41988: NOT
41989: IFFALSE 41993
// exit ;
41991: GO 42084
// i := list [ pos1 ] ;
41993: LD_ADDR_VAR 0 5
41997: PUSH
41998: LD_VAR 0 1
42002: PUSH
42003: LD_VAR 0 2
42007: ARRAY
42008: ST_TO_ADDR
// if not i then
42009: LD_VAR 0 5
42013: NOT
42014: IFFALSE 42018
// exit ;
42016: GO 42084
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42018: LD_ADDR_VAR 0 1
42022: PUSH
42023: LD_VAR 0 1
42027: PPUSH
42028: LD_VAR 0 2
42032: PPUSH
42033: LD_VAR 0 1
42037: PUSH
42038: LD_VAR 0 3
42042: ARRAY
42043: PPUSH
42044: CALL_OW 1
42048: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42049: LD_ADDR_VAR 0 1
42053: PUSH
42054: LD_VAR 0 1
42058: PPUSH
42059: LD_VAR 0 3
42063: PPUSH
42064: LD_VAR 0 5
42068: PPUSH
42069: CALL_OW 1
42073: ST_TO_ADDR
// result := list ;
42074: LD_ADDR_VAR 0 4
42078: PUSH
42079: LD_VAR 0 1
42083: ST_TO_ADDR
// end ;
42084: LD_VAR 0 4
42088: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42089: LD_INT 0
42091: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42092: LD_ADDR_VAR 0 5
42096: PUSH
42097: LD_VAR 0 1
42101: PPUSH
42102: CALL_OW 250
42106: PPUSH
42107: LD_VAR 0 1
42111: PPUSH
42112: CALL_OW 251
42116: PPUSH
42117: LD_VAR 0 2
42121: PPUSH
42122: LD_VAR 0 3
42126: PPUSH
42127: LD_VAR 0 4
42131: PPUSH
42132: CALL 42142 0 5
42136: ST_TO_ADDR
// end ;
42137: LD_VAR 0 5
42141: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42142: LD_INT 0
42144: PPUSH
42145: PPUSH
42146: PPUSH
42147: PPUSH
// if not list then
42148: LD_VAR 0 3
42152: NOT
42153: IFFALSE 42157
// exit ;
42155: GO 42545
// result := [ ] ;
42157: LD_ADDR_VAR 0 6
42161: PUSH
42162: EMPTY
42163: ST_TO_ADDR
// for i in list do
42164: LD_ADDR_VAR 0 7
42168: PUSH
42169: LD_VAR 0 3
42173: PUSH
42174: FOR_IN
42175: IFFALSE 42377
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42177: LD_ADDR_VAR 0 9
42181: PUSH
42182: LD_VAR 0 7
42186: PPUSH
42187: LD_VAR 0 1
42191: PPUSH
42192: LD_VAR 0 2
42196: PPUSH
42197: CALL_OW 297
42201: ST_TO_ADDR
// if not result then
42202: LD_VAR 0 6
42206: NOT
42207: IFFALSE 42233
// result := [ [ i , tmp ] ] else
42209: LD_ADDR_VAR 0 6
42213: PUSH
42214: LD_VAR 0 7
42218: PUSH
42219: LD_VAR 0 9
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: EMPTY
42229: LIST
42230: ST_TO_ADDR
42231: GO 42375
// begin if result [ result ] [ 2 ] < tmp then
42233: LD_VAR 0 6
42237: PUSH
42238: LD_VAR 0 6
42242: ARRAY
42243: PUSH
42244: LD_INT 2
42246: ARRAY
42247: PUSH
42248: LD_VAR 0 9
42252: LESS
42253: IFFALSE 42295
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42255: LD_ADDR_VAR 0 6
42259: PUSH
42260: LD_VAR 0 6
42264: PPUSH
42265: LD_VAR 0 6
42269: PUSH
42270: LD_INT 1
42272: PLUS
42273: PPUSH
42274: LD_VAR 0 7
42278: PUSH
42279: LD_VAR 0 9
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PPUSH
42288: CALL_OW 2
42292: ST_TO_ADDR
42293: GO 42375
// for j = 1 to result do
42295: LD_ADDR_VAR 0 8
42299: PUSH
42300: DOUBLE
42301: LD_INT 1
42303: DEC
42304: ST_TO_ADDR
42305: LD_VAR 0 6
42309: PUSH
42310: FOR_TO
42311: IFFALSE 42373
// begin if tmp < result [ j ] [ 2 ] then
42313: LD_VAR 0 9
42317: PUSH
42318: LD_VAR 0 6
42322: PUSH
42323: LD_VAR 0 8
42327: ARRAY
42328: PUSH
42329: LD_INT 2
42331: ARRAY
42332: LESS
42333: IFFALSE 42371
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42335: LD_ADDR_VAR 0 6
42339: PUSH
42340: LD_VAR 0 6
42344: PPUSH
42345: LD_VAR 0 8
42349: PPUSH
42350: LD_VAR 0 7
42354: PUSH
42355: LD_VAR 0 9
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PPUSH
42364: CALL_OW 2
42368: ST_TO_ADDR
// break ;
42369: GO 42373
// end ; end ;
42371: GO 42310
42373: POP
42374: POP
// end ; end ;
42375: GO 42174
42377: POP
42378: POP
// if result and not asc then
42379: LD_VAR 0 6
42383: PUSH
42384: LD_VAR 0 4
42388: NOT
42389: AND
42390: IFFALSE 42465
// begin tmp := result ;
42392: LD_ADDR_VAR 0 9
42396: PUSH
42397: LD_VAR 0 6
42401: ST_TO_ADDR
// for i = tmp downto 1 do
42402: LD_ADDR_VAR 0 7
42406: PUSH
42407: DOUBLE
42408: LD_VAR 0 9
42412: INC
42413: ST_TO_ADDR
42414: LD_INT 1
42416: PUSH
42417: FOR_DOWNTO
42418: IFFALSE 42463
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42420: LD_ADDR_VAR 0 6
42424: PUSH
42425: LD_VAR 0 6
42429: PPUSH
42430: LD_VAR 0 9
42434: PUSH
42435: LD_VAR 0 7
42439: MINUS
42440: PUSH
42441: LD_INT 1
42443: PLUS
42444: PPUSH
42445: LD_VAR 0 9
42449: PUSH
42450: LD_VAR 0 7
42454: ARRAY
42455: PPUSH
42456: CALL_OW 1
42460: ST_TO_ADDR
42461: GO 42417
42463: POP
42464: POP
// end ; tmp := [ ] ;
42465: LD_ADDR_VAR 0 9
42469: PUSH
42470: EMPTY
42471: ST_TO_ADDR
// if mode then
42472: LD_VAR 0 5
42476: IFFALSE 42545
// begin for i = 1 to result do
42478: LD_ADDR_VAR 0 7
42482: PUSH
42483: DOUBLE
42484: LD_INT 1
42486: DEC
42487: ST_TO_ADDR
42488: LD_VAR 0 6
42492: PUSH
42493: FOR_TO
42494: IFFALSE 42533
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42496: LD_ADDR_VAR 0 9
42500: PUSH
42501: LD_VAR 0 9
42505: PPUSH
42506: LD_VAR 0 7
42510: PPUSH
42511: LD_VAR 0 6
42515: PUSH
42516: LD_VAR 0 7
42520: ARRAY
42521: PUSH
42522: LD_INT 1
42524: ARRAY
42525: PPUSH
42526: CALL_OW 1
42530: ST_TO_ADDR
42531: GO 42493
42533: POP
42534: POP
// result := tmp ;
42535: LD_ADDR_VAR 0 6
42539: PUSH
42540: LD_VAR 0 9
42544: ST_TO_ADDR
// end ; end ;
42545: LD_VAR 0 6
42549: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42550: LD_INT 0
42552: PPUSH
42553: PPUSH
42554: PPUSH
42555: PPUSH
42556: PPUSH
42557: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42558: LD_ADDR_VAR 0 5
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: EMPTY
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: ST_TO_ADDR
// if not x or not y then
42580: LD_VAR 0 2
42584: NOT
42585: PUSH
42586: LD_VAR 0 3
42590: NOT
42591: OR
42592: IFFALSE 42596
// exit ;
42594: GO 44248
// if not range then
42596: LD_VAR 0 4
42600: NOT
42601: IFFALSE 42611
// range := 10 ;
42603: LD_ADDR_VAR 0 4
42607: PUSH
42608: LD_INT 10
42610: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42611: LD_ADDR_VAR 0 8
42615: PUSH
42616: LD_INT 81
42618: PUSH
42619: LD_VAR 0 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 92
42630: PUSH
42631: LD_VAR 0 2
42635: PUSH
42636: LD_VAR 0 3
42640: PUSH
42641: LD_VAR 0 4
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 3
42654: PUSH
42655: LD_INT 21
42657: PUSH
42658: LD_INT 3
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: LIST
42673: PPUSH
42674: CALL_OW 69
42678: ST_TO_ADDR
// if not tmp then
42679: LD_VAR 0 8
42683: NOT
42684: IFFALSE 42688
// exit ;
42686: GO 44248
// for i in tmp do
42688: LD_ADDR_VAR 0 6
42692: PUSH
42693: LD_VAR 0 8
42697: PUSH
42698: FOR_IN
42699: IFFALSE 44223
// begin points := [ 0 , 0 , 0 ] ;
42701: LD_ADDR_VAR 0 9
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: LIST
42719: ST_TO_ADDR
// bpoints := 1 ;
42720: LD_ADDR_VAR 0 10
42724: PUSH
42725: LD_INT 1
42727: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42728: LD_VAR 0 6
42732: PPUSH
42733: CALL_OW 247
42737: PUSH
42738: LD_INT 1
42740: DOUBLE
42741: EQUAL
42742: IFTRUE 42746
42744: GO 43324
42746: POP
// begin if GetClass ( i ) = 1 then
42747: LD_VAR 0 6
42751: PPUSH
42752: CALL_OW 257
42756: PUSH
42757: LD_INT 1
42759: EQUAL
42760: IFFALSE 42781
// points := [ 10 , 5 , 3 ] ;
42762: LD_ADDR_VAR 0 9
42766: PUSH
42767: LD_INT 10
42769: PUSH
42770: LD_INT 5
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: LIST
42780: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42781: LD_VAR 0 6
42785: PPUSH
42786: CALL_OW 257
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: LD_INT 3
42796: PUSH
42797: LD_INT 4
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: LIST
42804: IN
42805: IFFALSE 42826
// points := [ 3 , 2 , 1 ] ;
42807: LD_ADDR_VAR 0 9
42811: PUSH
42812: LD_INT 3
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42826: LD_VAR 0 6
42830: PPUSH
42831: CALL_OW 257
42835: PUSH
42836: LD_INT 5
42838: EQUAL
42839: IFFALSE 42860
// points := [ 130 , 5 , 2 ] ;
42841: LD_ADDR_VAR 0 9
42845: PUSH
42846: LD_INT 130
42848: PUSH
42849: LD_INT 5
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42860: LD_VAR 0 6
42864: PPUSH
42865: CALL_OW 257
42869: PUSH
42870: LD_INT 8
42872: EQUAL
42873: IFFALSE 42894
// points := [ 35 , 35 , 30 ] ;
42875: LD_ADDR_VAR 0 9
42879: PUSH
42880: LD_INT 35
42882: PUSH
42883: LD_INT 35
42885: PUSH
42886: LD_INT 30
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42894: LD_VAR 0 6
42898: PPUSH
42899: CALL_OW 257
42903: PUSH
42904: LD_INT 9
42906: EQUAL
42907: IFFALSE 42928
// points := [ 20 , 55 , 40 ] ;
42909: LD_ADDR_VAR 0 9
42913: PUSH
42914: LD_INT 20
42916: PUSH
42917: LD_INT 55
42919: PUSH
42920: LD_INT 40
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42928: LD_VAR 0 6
42932: PPUSH
42933: CALL_OW 257
42937: PUSH
42938: LD_INT 12
42940: PUSH
42941: LD_INT 16
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: IN
42948: IFFALSE 42969
// points := [ 5 , 3 , 2 ] ;
42950: LD_ADDR_VAR 0 9
42954: PUSH
42955: LD_INT 5
42957: PUSH
42958: LD_INT 3
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42969: LD_VAR 0 6
42973: PPUSH
42974: CALL_OW 257
42978: PUSH
42979: LD_INT 17
42981: EQUAL
42982: IFFALSE 43003
// points := [ 100 , 50 , 75 ] ;
42984: LD_ADDR_VAR 0 9
42988: PUSH
42989: LD_INT 100
42991: PUSH
42992: LD_INT 50
42994: PUSH
42995: LD_INT 75
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43003: LD_VAR 0 6
43007: PPUSH
43008: CALL_OW 257
43012: PUSH
43013: LD_INT 15
43015: EQUAL
43016: IFFALSE 43037
// points := [ 10 , 5 , 3 ] ;
43018: LD_ADDR_VAR 0 9
43022: PUSH
43023: LD_INT 10
43025: PUSH
43026: LD_INT 5
43028: PUSH
43029: LD_INT 3
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43037: LD_VAR 0 6
43041: PPUSH
43042: CALL_OW 257
43046: PUSH
43047: LD_INT 14
43049: EQUAL
43050: IFFALSE 43071
// points := [ 10 , 0 , 0 ] ;
43052: LD_ADDR_VAR 0 9
43056: PUSH
43057: LD_INT 10
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: LIST
43070: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43071: LD_VAR 0 6
43075: PPUSH
43076: CALL_OW 257
43080: PUSH
43081: LD_INT 11
43083: EQUAL
43084: IFFALSE 43105
// points := [ 30 , 10 , 5 ] ;
43086: LD_ADDR_VAR 0 9
43090: PUSH
43091: LD_INT 30
43093: PUSH
43094: LD_INT 10
43096: PUSH
43097: LD_INT 5
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43105: LD_VAR 0 1
43109: PPUSH
43110: LD_INT 5
43112: PPUSH
43113: CALL_OW 321
43117: PUSH
43118: LD_INT 2
43120: EQUAL
43121: IFFALSE 43138
// bpoints := bpoints * 1.8 ;
43123: LD_ADDR_VAR 0 10
43127: PUSH
43128: LD_VAR 0 10
43132: PUSH
43133: LD_REAL  1.80000000000000E+0000
43136: MUL
43137: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43138: LD_VAR 0 6
43142: PPUSH
43143: CALL_OW 257
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: LD_INT 3
43156: PUSH
43157: LD_INT 4
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: IN
43166: PUSH
43167: LD_VAR 0 1
43171: PPUSH
43172: LD_INT 51
43174: PPUSH
43175: CALL_OW 321
43179: PUSH
43180: LD_INT 2
43182: EQUAL
43183: AND
43184: IFFALSE 43201
// bpoints := bpoints * 1.2 ;
43186: LD_ADDR_VAR 0 10
43190: PUSH
43191: LD_VAR 0 10
43195: PUSH
43196: LD_REAL  1.20000000000000E+0000
43199: MUL
43200: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43201: LD_VAR 0 6
43205: PPUSH
43206: CALL_OW 257
43210: PUSH
43211: LD_INT 5
43213: PUSH
43214: LD_INT 7
43216: PUSH
43217: LD_INT 9
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: IN
43225: PUSH
43226: LD_VAR 0 1
43230: PPUSH
43231: LD_INT 52
43233: PPUSH
43234: CALL_OW 321
43238: PUSH
43239: LD_INT 2
43241: EQUAL
43242: AND
43243: IFFALSE 43260
// bpoints := bpoints * 1.5 ;
43245: LD_ADDR_VAR 0 10
43249: PUSH
43250: LD_VAR 0 10
43254: PUSH
43255: LD_REAL  1.50000000000000E+0000
43258: MUL
43259: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43260: LD_VAR 0 1
43264: PPUSH
43265: LD_INT 66
43267: PPUSH
43268: CALL_OW 321
43272: PUSH
43273: LD_INT 2
43275: EQUAL
43276: IFFALSE 43293
// bpoints := bpoints * 1.1 ;
43278: LD_ADDR_VAR 0 10
43282: PUSH
43283: LD_VAR 0 10
43287: PUSH
43288: LD_REAL  1.10000000000000E+0000
43291: MUL
43292: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43293: LD_ADDR_VAR 0 10
43297: PUSH
43298: LD_VAR 0 10
43302: PUSH
43303: LD_VAR 0 6
43307: PPUSH
43308: LD_INT 1
43310: PPUSH
43311: CALL_OW 259
43315: PUSH
43316: LD_REAL  1.15000000000000E+0000
43319: MUL
43320: MUL
43321: ST_TO_ADDR
// end ; unit_vehicle :
43322: GO 44152
43324: LD_INT 2
43326: DOUBLE
43327: EQUAL
43328: IFTRUE 43332
43330: GO 44140
43332: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43333: LD_VAR 0 6
43337: PPUSH
43338: CALL_OW 264
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 42
43348: PUSH
43349: LD_INT 24
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: LIST
43356: IN
43357: IFFALSE 43378
// points := [ 25 , 5 , 3 ] ;
43359: LD_ADDR_VAR 0 9
43363: PUSH
43364: LD_INT 25
43366: PUSH
43367: LD_INT 5
43369: PUSH
43370: LD_INT 3
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43378: LD_VAR 0 6
43382: PPUSH
43383: CALL_OW 264
43387: PUSH
43388: LD_INT 4
43390: PUSH
43391: LD_INT 43
43393: PUSH
43394: LD_INT 25
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: LIST
43401: IN
43402: IFFALSE 43423
// points := [ 40 , 15 , 5 ] ;
43404: LD_ADDR_VAR 0 9
43408: PUSH
43409: LD_INT 40
43411: PUSH
43412: LD_INT 15
43414: PUSH
43415: LD_INT 5
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43423: LD_VAR 0 6
43427: PPUSH
43428: CALL_OW 264
43432: PUSH
43433: LD_INT 3
43435: PUSH
43436: LD_INT 23
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: IN
43443: IFFALSE 43464
// points := [ 7 , 25 , 8 ] ;
43445: LD_ADDR_VAR 0 9
43449: PUSH
43450: LD_INT 7
43452: PUSH
43453: LD_INT 25
43455: PUSH
43456: LD_INT 8
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: LIST
43463: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43464: LD_VAR 0 6
43468: PPUSH
43469: CALL_OW 264
43473: PUSH
43474: LD_INT 5
43476: PUSH
43477: LD_INT 27
43479: PUSH
43480: LD_INT 44
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: LIST
43487: IN
43488: IFFALSE 43509
// points := [ 14 , 50 , 16 ] ;
43490: LD_ADDR_VAR 0 9
43494: PUSH
43495: LD_INT 14
43497: PUSH
43498: LD_INT 50
43500: PUSH
43501: LD_INT 16
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: LIST
43508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43509: LD_VAR 0 6
43513: PPUSH
43514: CALL_OW 264
43518: PUSH
43519: LD_INT 6
43521: PUSH
43522: LD_INT 46
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: IN
43529: IFFALSE 43550
// points := [ 32 , 120 , 70 ] ;
43531: LD_ADDR_VAR 0 9
43535: PUSH
43536: LD_INT 32
43538: PUSH
43539: LD_INT 120
43541: PUSH
43542: LD_INT 70
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: LIST
43549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43550: LD_VAR 0 6
43554: PPUSH
43555: CALL_OW 264
43559: PUSH
43560: LD_INT 7
43562: PUSH
43563: LD_INT 28
43565: PUSH
43566: LD_INT 45
43568: PUSH
43569: LD_EXP 53
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: IN
43580: IFFALSE 43601
// points := [ 35 , 20 , 45 ] ;
43582: LD_ADDR_VAR 0 9
43586: PUSH
43587: LD_INT 35
43589: PUSH
43590: LD_INT 20
43592: PUSH
43593: LD_INT 45
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: LIST
43600: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43601: LD_VAR 0 6
43605: PPUSH
43606: CALL_OW 264
43610: PUSH
43611: LD_INT 47
43613: PUSH
43614: EMPTY
43615: LIST
43616: IN
43617: IFFALSE 43638
// points := [ 67 , 45 , 75 ] ;
43619: LD_ADDR_VAR 0 9
43623: PUSH
43624: LD_INT 67
43626: PUSH
43627: LD_INT 45
43629: PUSH
43630: LD_INT 75
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: LIST
43637: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43638: LD_VAR 0 6
43642: PPUSH
43643: CALL_OW 264
43647: PUSH
43648: LD_INT 26
43650: PUSH
43651: EMPTY
43652: LIST
43653: IN
43654: IFFALSE 43675
// points := [ 120 , 30 , 80 ] ;
43656: LD_ADDR_VAR 0 9
43660: PUSH
43661: LD_INT 120
43663: PUSH
43664: LD_INT 30
43666: PUSH
43667: LD_INT 80
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: LIST
43674: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43675: LD_VAR 0 6
43679: PPUSH
43680: CALL_OW 264
43684: PUSH
43685: LD_INT 22
43687: PUSH
43688: EMPTY
43689: LIST
43690: IN
43691: IFFALSE 43712
// points := [ 40 , 1 , 1 ] ;
43693: LD_ADDR_VAR 0 9
43697: PUSH
43698: LD_INT 40
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43712: LD_VAR 0 6
43716: PPUSH
43717: CALL_OW 264
43721: PUSH
43722: LD_INT 29
43724: PUSH
43725: EMPTY
43726: LIST
43727: IN
43728: IFFALSE 43749
// points := [ 70 , 200 , 400 ] ;
43730: LD_ADDR_VAR 0 9
43734: PUSH
43735: LD_INT 70
43737: PUSH
43738: LD_INT 200
43740: PUSH
43741: LD_INT 400
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43749: LD_VAR 0 6
43753: PPUSH
43754: CALL_OW 264
43758: PUSH
43759: LD_INT 14
43761: PUSH
43762: LD_INT 53
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: IN
43769: IFFALSE 43790
// points := [ 40 , 10 , 20 ] ;
43771: LD_ADDR_VAR 0 9
43775: PUSH
43776: LD_INT 40
43778: PUSH
43779: LD_INT 10
43781: PUSH
43782: LD_INT 20
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: LIST
43789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43790: LD_VAR 0 6
43794: PPUSH
43795: CALL_OW 264
43799: PUSH
43800: LD_INT 9
43802: PUSH
43803: EMPTY
43804: LIST
43805: IN
43806: IFFALSE 43827
// points := [ 5 , 70 , 20 ] ;
43808: LD_ADDR_VAR 0 9
43812: PUSH
43813: LD_INT 5
43815: PUSH
43816: LD_INT 70
43818: PUSH
43819: LD_INT 20
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: LIST
43826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43827: LD_VAR 0 6
43831: PPUSH
43832: CALL_OW 264
43836: PUSH
43837: LD_INT 10
43839: PUSH
43840: EMPTY
43841: LIST
43842: IN
43843: IFFALSE 43864
// points := [ 35 , 110 , 70 ] ;
43845: LD_ADDR_VAR 0 9
43849: PUSH
43850: LD_INT 35
43852: PUSH
43853: LD_INT 110
43855: PUSH
43856: LD_INT 70
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: LIST
43863: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43864: LD_VAR 0 6
43868: PPUSH
43869: CALL_OW 265
43873: PUSH
43874: LD_INT 25
43876: EQUAL
43877: IFFALSE 43898
// points := [ 80 , 65 , 100 ] ;
43879: LD_ADDR_VAR 0 9
43883: PUSH
43884: LD_INT 80
43886: PUSH
43887: LD_INT 65
43889: PUSH
43890: LD_INT 100
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: LIST
43897: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43898: LD_VAR 0 6
43902: PPUSH
43903: CALL_OW 263
43907: PUSH
43908: LD_INT 1
43910: EQUAL
43911: IFFALSE 43946
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43913: LD_ADDR_VAR 0 10
43917: PUSH
43918: LD_VAR 0 10
43922: PUSH
43923: LD_VAR 0 6
43927: PPUSH
43928: CALL_OW 311
43932: PPUSH
43933: LD_INT 3
43935: PPUSH
43936: CALL_OW 259
43940: PUSH
43941: LD_INT 4
43943: MUL
43944: MUL
43945: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43946: LD_VAR 0 6
43950: PPUSH
43951: CALL_OW 263
43955: PUSH
43956: LD_INT 2
43958: EQUAL
43959: IFFALSE 44010
// begin j := IsControledBy ( i ) ;
43961: LD_ADDR_VAR 0 7
43965: PUSH
43966: LD_VAR 0 6
43970: PPUSH
43971: CALL_OW 312
43975: ST_TO_ADDR
// if j then
43976: LD_VAR 0 7
43980: IFFALSE 44010
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43982: LD_ADDR_VAR 0 10
43986: PUSH
43987: LD_VAR 0 10
43991: PUSH
43992: LD_VAR 0 7
43996: PPUSH
43997: LD_INT 3
43999: PPUSH
44000: CALL_OW 259
44004: PUSH
44005: LD_INT 3
44007: MUL
44008: MUL
44009: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44010: LD_VAR 0 6
44014: PPUSH
44015: CALL_OW 264
44019: PUSH
44020: LD_INT 5
44022: PUSH
44023: LD_INT 6
44025: PUSH
44026: LD_INT 46
44028: PUSH
44029: LD_INT 44
44031: PUSH
44032: LD_INT 47
44034: PUSH
44035: LD_INT 45
44037: PUSH
44038: LD_INT 28
44040: PUSH
44041: LD_INT 7
44043: PUSH
44044: LD_INT 27
44046: PUSH
44047: LD_INT 29
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: IN
44062: PUSH
44063: LD_VAR 0 1
44067: PPUSH
44068: LD_INT 52
44070: PPUSH
44071: CALL_OW 321
44075: PUSH
44076: LD_INT 2
44078: EQUAL
44079: AND
44080: IFFALSE 44097
// bpoints := bpoints * 1.2 ;
44082: LD_ADDR_VAR 0 10
44086: PUSH
44087: LD_VAR 0 10
44091: PUSH
44092: LD_REAL  1.20000000000000E+0000
44095: MUL
44096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44097: LD_VAR 0 6
44101: PPUSH
44102: CALL_OW 264
44106: PUSH
44107: LD_INT 6
44109: PUSH
44110: LD_INT 46
44112: PUSH
44113: LD_INT 47
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: IN
44121: IFFALSE 44138
// bpoints := bpoints * 1.2 ;
44123: LD_ADDR_VAR 0 10
44127: PUSH
44128: LD_VAR 0 10
44132: PUSH
44133: LD_REAL  1.20000000000000E+0000
44136: MUL
44137: ST_TO_ADDR
// end ; unit_building :
44138: GO 44152
44140: LD_INT 3
44142: DOUBLE
44143: EQUAL
44144: IFTRUE 44148
44146: GO 44151
44148: POP
// ; end ;
44149: GO 44152
44151: POP
// for j = 1 to 3 do
44152: LD_ADDR_VAR 0 7
44156: PUSH
44157: DOUBLE
44158: LD_INT 1
44160: DEC
44161: ST_TO_ADDR
44162: LD_INT 3
44164: PUSH
44165: FOR_TO
44166: IFFALSE 44219
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44168: LD_ADDR_VAR 0 5
44172: PUSH
44173: LD_VAR 0 5
44177: PPUSH
44178: LD_VAR 0 7
44182: PPUSH
44183: LD_VAR 0 5
44187: PUSH
44188: LD_VAR 0 7
44192: ARRAY
44193: PUSH
44194: LD_VAR 0 9
44198: PUSH
44199: LD_VAR 0 7
44203: ARRAY
44204: PUSH
44205: LD_VAR 0 10
44209: MUL
44210: PLUS
44211: PPUSH
44212: CALL_OW 1
44216: ST_TO_ADDR
44217: GO 44165
44219: POP
44220: POP
// end ;
44221: GO 42698
44223: POP
44224: POP
// result := Replace ( result , 4 , tmp ) ;
44225: LD_ADDR_VAR 0 5
44229: PUSH
44230: LD_VAR 0 5
44234: PPUSH
44235: LD_INT 4
44237: PPUSH
44238: LD_VAR 0 8
44242: PPUSH
44243: CALL_OW 1
44247: ST_TO_ADDR
// end ;
44248: LD_VAR 0 5
44252: RET
// export function DangerAtRange ( unit , range ) ; begin
44253: LD_INT 0
44255: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44256: LD_ADDR_VAR 0 3
44260: PUSH
44261: LD_VAR 0 1
44265: PPUSH
44266: CALL_OW 255
44270: PPUSH
44271: LD_VAR 0 1
44275: PPUSH
44276: CALL_OW 250
44280: PPUSH
44281: LD_VAR 0 1
44285: PPUSH
44286: CALL_OW 251
44290: PPUSH
44291: LD_VAR 0 2
44295: PPUSH
44296: CALL 42550 0 4
44300: ST_TO_ADDR
// end ;
44301: LD_VAR 0 3
44305: RET
// export function DangerInArea ( side , area ) ; begin
44306: LD_INT 0
44308: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44309: LD_ADDR_VAR 0 3
44313: PUSH
44314: LD_VAR 0 2
44318: PPUSH
44319: LD_INT 81
44321: PUSH
44322: LD_VAR 0 1
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PPUSH
44331: CALL_OW 70
44335: ST_TO_ADDR
// end ;
44336: LD_VAR 0 3
44340: RET
// export function IsExtension ( b ) ; begin
44341: LD_INT 0
44343: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44344: LD_ADDR_VAR 0 2
44348: PUSH
44349: LD_VAR 0 1
44353: PUSH
44354: LD_INT 23
44356: PUSH
44357: LD_INT 20
44359: PUSH
44360: LD_INT 22
44362: PUSH
44363: LD_INT 17
44365: PUSH
44366: LD_INT 24
44368: PUSH
44369: LD_INT 21
44371: PUSH
44372: LD_INT 19
44374: PUSH
44375: LD_INT 16
44377: PUSH
44378: LD_INT 25
44380: PUSH
44381: LD_INT 18
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: IN
44396: ST_TO_ADDR
// end ;
44397: LD_VAR 0 2
44401: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44402: LD_INT 0
44404: PPUSH
44405: PPUSH
44406: PPUSH
// result := [ ] ;
44407: LD_ADDR_VAR 0 4
44411: PUSH
44412: EMPTY
44413: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44414: LD_ADDR_VAR 0 5
44418: PUSH
44419: LD_VAR 0 2
44423: PPUSH
44424: LD_INT 21
44426: PUSH
44427: LD_INT 3
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PPUSH
44434: CALL_OW 70
44438: ST_TO_ADDR
// if not tmp then
44439: LD_VAR 0 5
44443: NOT
44444: IFFALSE 44448
// exit ;
44446: GO 44512
// if checkLink then
44448: LD_VAR 0 3
44452: IFFALSE 44502
// begin for i in tmp do
44454: LD_ADDR_VAR 0 6
44458: PUSH
44459: LD_VAR 0 5
44463: PUSH
44464: FOR_IN
44465: IFFALSE 44500
// if GetBase ( i ) <> base then
44467: LD_VAR 0 6
44471: PPUSH
44472: CALL_OW 274
44476: PUSH
44477: LD_VAR 0 1
44481: NONEQUAL
44482: IFFALSE 44498
// ComLinkToBase ( base , i ) ;
44484: LD_VAR 0 1
44488: PPUSH
44489: LD_VAR 0 6
44493: PPUSH
44494: CALL_OW 169
44498: GO 44464
44500: POP
44501: POP
// end ; result := tmp ;
44502: LD_ADDR_VAR 0 4
44506: PUSH
44507: LD_VAR 0 5
44511: ST_TO_ADDR
// end ;
44512: LD_VAR 0 4
44516: RET
// export function ComComplete ( units , b ) ; var i ; begin
44517: LD_INT 0
44519: PPUSH
44520: PPUSH
// if not units then
44521: LD_VAR 0 1
44525: NOT
44526: IFFALSE 44530
// exit ;
44528: GO 44620
// for i in units do
44530: LD_ADDR_VAR 0 4
44534: PUSH
44535: LD_VAR 0 1
44539: PUSH
44540: FOR_IN
44541: IFFALSE 44618
// if BuildingStatus ( b ) = bs_build then
44543: LD_VAR 0 2
44547: PPUSH
44548: CALL_OW 461
44552: PUSH
44553: LD_INT 1
44555: EQUAL
44556: IFFALSE 44616
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44558: LD_VAR 0 4
44562: PPUSH
44563: LD_STRING h
44565: PUSH
44566: LD_VAR 0 2
44570: PPUSH
44571: CALL_OW 250
44575: PUSH
44576: LD_VAR 0 2
44580: PPUSH
44581: CALL_OW 251
44585: PUSH
44586: LD_VAR 0 2
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: PUSH
44609: EMPTY
44610: LIST
44611: PPUSH
44612: CALL_OW 446
44616: GO 44540
44618: POP
44619: POP
// end ;
44620: LD_VAR 0 3
44624: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44625: LD_INT 0
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
44633: LD_VAR 0 1
44637: NOT
44638: PUSH
44639: LD_VAR 0 1
44643: PPUSH
44644: CALL_OW 263
44648: PUSH
44649: LD_INT 2
44651: EQUAL
44652: NOT
44653: OR
44654: IFFALSE 44658
// exit ;
44656: GO 44974
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44658: LD_ADDR_VAR 0 6
44662: PUSH
44663: LD_INT 22
44665: PUSH
44666: LD_VAR 0 1
44670: PPUSH
44671: CALL_OW 255
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 30
44685: PUSH
44686: LD_INT 36
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 34
44695: PUSH
44696: LD_INT 31
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: LIST
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PPUSH
44712: CALL_OW 69
44716: ST_TO_ADDR
// if not tmp then
44717: LD_VAR 0 6
44721: NOT
44722: IFFALSE 44726
// exit ;
44724: GO 44974
// result := [ ] ;
44726: LD_ADDR_VAR 0 2
44730: PUSH
44731: EMPTY
44732: ST_TO_ADDR
// for i in tmp do
44733: LD_ADDR_VAR 0 3
44737: PUSH
44738: LD_VAR 0 6
44742: PUSH
44743: FOR_IN
44744: IFFALSE 44815
// begin t := UnitsInside ( i ) ;
44746: LD_ADDR_VAR 0 4
44750: PUSH
44751: LD_VAR 0 3
44755: PPUSH
44756: CALL_OW 313
44760: ST_TO_ADDR
// if t then
44761: LD_VAR 0 4
44765: IFFALSE 44813
// for j in t do
44767: LD_ADDR_VAR 0 7
44771: PUSH
44772: LD_VAR 0 4
44776: PUSH
44777: FOR_IN
44778: IFFALSE 44811
// result := Insert ( result , result + 1 , j ) ;
44780: LD_ADDR_VAR 0 2
44784: PUSH
44785: LD_VAR 0 2
44789: PPUSH
44790: LD_VAR 0 2
44794: PUSH
44795: LD_INT 1
44797: PLUS
44798: PPUSH
44799: LD_VAR 0 7
44803: PPUSH
44804: CALL_OW 2
44808: ST_TO_ADDR
44809: GO 44777
44811: POP
44812: POP
// end ;
44813: GO 44743
44815: POP
44816: POP
// if not result then
44817: LD_VAR 0 2
44821: NOT
44822: IFFALSE 44826
// exit ;
44824: GO 44974
// mech := result [ 1 ] ;
44826: LD_ADDR_VAR 0 5
44830: PUSH
44831: LD_VAR 0 2
44835: PUSH
44836: LD_INT 1
44838: ARRAY
44839: ST_TO_ADDR
// if result > 1 then
44840: LD_VAR 0 2
44844: PUSH
44845: LD_INT 1
44847: GREATER
44848: IFFALSE 44960
// for i = 2 to result do
44850: LD_ADDR_VAR 0 3
44854: PUSH
44855: DOUBLE
44856: LD_INT 2
44858: DEC
44859: ST_TO_ADDR
44860: LD_VAR 0 2
44864: PUSH
44865: FOR_TO
44866: IFFALSE 44958
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44868: LD_ADDR_VAR 0 4
44872: PUSH
44873: LD_VAR 0 2
44877: PUSH
44878: LD_VAR 0 3
44882: ARRAY
44883: PPUSH
44884: LD_INT 3
44886: PPUSH
44887: CALL_OW 259
44891: PUSH
44892: LD_VAR 0 2
44896: PUSH
44897: LD_VAR 0 3
44901: ARRAY
44902: PPUSH
44903: CALL_OW 432
44907: MINUS
44908: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44909: LD_VAR 0 4
44913: PUSH
44914: LD_VAR 0 5
44918: PPUSH
44919: LD_INT 3
44921: PPUSH
44922: CALL_OW 259
44926: PUSH
44927: LD_VAR 0 5
44931: PPUSH
44932: CALL_OW 432
44936: MINUS
44937: GREATEREQUAL
44938: IFFALSE 44956
// mech := result [ i ] ;
44940: LD_ADDR_VAR 0 5
44944: PUSH
44945: LD_VAR 0 2
44949: PUSH
44950: LD_VAR 0 3
44954: ARRAY
44955: ST_TO_ADDR
// end ;
44956: GO 44865
44958: POP
44959: POP
// ComLinkTo ( vehicle , mech ) ;
44960: LD_VAR 0 1
44964: PPUSH
44965: LD_VAR 0 5
44969: PPUSH
44970: CALL_OW 135
// end ;
44974: LD_VAR 0 2
44978: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44979: LD_INT 0
44981: PPUSH
44982: PPUSH
44983: PPUSH
44984: PPUSH
44985: PPUSH
44986: PPUSH
44987: PPUSH
44988: PPUSH
44989: PPUSH
44990: PPUSH
44991: PPUSH
44992: PPUSH
44993: PPUSH
// result := [ ] ;
44994: LD_ADDR_VAR 0 7
44998: PUSH
44999: EMPTY
45000: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45001: LD_VAR 0 1
45005: PPUSH
45006: CALL_OW 266
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: IN
45021: NOT
45022: IFFALSE 45026
// exit ;
45024: GO 46660
// if name then
45026: LD_VAR 0 3
45030: IFFALSE 45046
// SetBName ( base_dep , name ) ;
45032: LD_VAR 0 1
45036: PPUSH
45037: LD_VAR 0 3
45041: PPUSH
45042: CALL_OW 500
// base := GetBase ( base_dep ) ;
45046: LD_ADDR_VAR 0 15
45050: PUSH
45051: LD_VAR 0 1
45055: PPUSH
45056: CALL_OW 274
45060: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45061: LD_ADDR_VAR 0 16
45065: PUSH
45066: LD_VAR 0 1
45070: PPUSH
45071: CALL_OW 255
45075: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45076: LD_ADDR_VAR 0 17
45080: PUSH
45081: LD_VAR 0 1
45085: PPUSH
45086: CALL_OW 248
45090: ST_TO_ADDR
// if sources then
45091: LD_VAR 0 5
45095: IFFALSE 45142
// for i = 1 to 3 do
45097: LD_ADDR_VAR 0 8
45101: PUSH
45102: DOUBLE
45103: LD_INT 1
45105: DEC
45106: ST_TO_ADDR
45107: LD_INT 3
45109: PUSH
45110: FOR_TO
45111: IFFALSE 45140
// AddResourceType ( base , i , sources [ i ] ) ;
45113: LD_VAR 0 15
45117: PPUSH
45118: LD_VAR 0 8
45122: PPUSH
45123: LD_VAR 0 5
45127: PUSH
45128: LD_VAR 0 8
45132: ARRAY
45133: PPUSH
45134: CALL_OW 276
45138: GO 45110
45140: POP
45141: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45142: LD_ADDR_VAR 0 18
45146: PUSH
45147: LD_VAR 0 15
45151: PPUSH
45152: LD_VAR 0 2
45156: PPUSH
45157: LD_INT 1
45159: PPUSH
45160: CALL 44402 0 3
45164: ST_TO_ADDR
// InitHc ;
45165: CALL_OW 19
// InitUc ;
45169: CALL_OW 18
// uc_side := side ;
45173: LD_ADDR_OWVAR 20
45177: PUSH
45178: LD_VAR 0 16
45182: ST_TO_ADDR
// uc_nation := nation ;
45183: LD_ADDR_OWVAR 21
45187: PUSH
45188: LD_VAR 0 17
45192: ST_TO_ADDR
// if buildings then
45193: LD_VAR 0 18
45197: IFFALSE 46519
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45199: LD_ADDR_VAR 0 19
45203: PUSH
45204: LD_VAR 0 18
45208: PPUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 30
45214: PUSH
45215: LD_INT 29
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 30
45224: PUSH
45225: LD_INT 30
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: LIST
45236: PPUSH
45237: CALL_OW 72
45241: ST_TO_ADDR
// if tmp then
45242: LD_VAR 0 19
45246: IFFALSE 45294
// for i in tmp do
45248: LD_ADDR_VAR 0 8
45252: PUSH
45253: LD_VAR 0 19
45257: PUSH
45258: FOR_IN
45259: IFFALSE 45292
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45261: LD_VAR 0 8
45265: PPUSH
45266: CALL_OW 250
45270: PPUSH
45271: LD_VAR 0 8
45275: PPUSH
45276: CALL_OW 251
45280: PPUSH
45281: LD_VAR 0 16
45285: PPUSH
45286: CALL_OW 441
45290: GO 45258
45292: POP
45293: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45294: LD_VAR 0 18
45298: PPUSH
45299: LD_INT 2
45301: PUSH
45302: LD_INT 30
45304: PUSH
45305: LD_INT 32
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 30
45314: PUSH
45315: LD_INT 33
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: PPUSH
45327: CALL_OW 72
45331: IFFALSE 45419
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45333: LD_ADDR_VAR 0 8
45337: PUSH
45338: LD_VAR 0 18
45342: PPUSH
45343: LD_INT 2
45345: PUSH
45346: LD_INT 30
45348: PUSH
45349: LD_INT 32
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 30
45358: PUSH
45359: LD_INT 33
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: PPUSH
45371: CALL_OW 72
45375: PUSH
45376: FOR_IN
45377: IFFALSE 45417
// begin if not GetBWeapon ( i ) then
45379: LD_VAR 0 8
45383: PPUSH
45384: CALL_OW 269
45388: NOT
45389: IFFALSE 45415
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45391: LD_VAR 0 8
45395: PPUSH
45396: LD_VAR 0 8
45400: PPUSH
45401: LD_VAR 0 2
45405: PPUSH
45406: CALL 46665 0 2
45410: PPUSH
45411: CALL_OW 431
// end ;
45415: GO 45376
45417: POP
45418: POP
// end ; for i = 1 to personel do
45419: LD_ADDR_VAR 0 8
45423: PUSH
45424: DOUBLE
45425: LD_INT 1
45427: DEC
45428: ST_TO_ADDR
45429: LD_VAR 0 6
45433: PUSH
45434: FOR_TO
45435: IFFALSE 46499
// begin if i > 4 then
45437: LD_VAR 0 8
45441: PUSH
45442: LD_INT 4
45444: GREATER
45445: IFFALSE 45449
// break ;
45447: GO 46499
// case i of 1 :
45449: LD_VAR 0 8
45453: PUSH
45454: LD_INT 1
45456: DOUBLE
45457: EQUAL
45458: IFTRUE 45462
45460: GO 45542
45462: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45463: LD_ADDR_VAR 0 12
45467: PUSH
45468: LD_VAR 0 18
45472: PPUSH
45473: LD_INT 22
45475: PUSH
45476: LD_VAR 0 16
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 58
45487: PUSH
45488: EMPTY
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: LD_INT 30
45496: PUSH
45497: LD_INT 32
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 30
45506: PUSH
45507: LD_INT 4
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 30
45516: PUSH
45517: LD_INT 5
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: PPUSH
45535: CALL_OW 72
45539: ST_TO_ADDR
45540: GO 45764
45542: LD_INT 2
45544: DOUBLE
45545: EQUAL
45546: IFTRUE 45550
45548: GO 45612
45550: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45551: LD_ADDR_VAR 0 12
45555: PUSH
45556: LD_VAR 0 18
45560: PPUSH
45561: LD_INT 22
45563: PUSH
45564: LD_VAR 0 16
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 30
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 30
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PPUSH
45605: CALL_OW 72
45609: ST_TO_ADDR
45610: GO 45764
45612: LD_INT 3
45614: DOUBLE
45615: EQUAL
45616: IFTRUE 45620
45618: GO 45682
45620: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45621: LD_ADDR_VAR 0 12
45625: PUSH
45626: LD_VAR 0 18
45630: PPUSH
45631: LD_INT 22
45633: PUSH
45634: LD_VAR 0 16
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: LD_INT 30
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 30
45658: PUSH
45659: LD_INT 3
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: LIST
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PPUSH
45675: CALL_OW 72
45679: ST_TO_ADDR
45680: GO 45764
45682: LD_INT 4
45684: DOUBLE
45685: EQUAL
45686: IFTRUE 45690
45688: GO 45763
45690: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45691: LD_ADDR_VAR 0 12
45695: PUSH
45696: LD_VAR 0 18
45700: PPUSH
45701: LD_INT 22
45703: PUSH
45704: LD_VAR 0 16
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: LD_INT 30
45718: PUSH
45719: LD_INT 6
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 30
45728: PUSH
45729: LD_INT 7
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 30
45738: PUSH
45739: LD_INT 8
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PPUSH
45756: CALL_OW 72
45760: ST_TO_ADDR
45761: GO 45764
45763: POP
// if i = 1 then
45764: LD_VAR 0 8
45768: PUSH
45769: LD_INT 1
45771: EQUAL
45772: IFFALSE 45883
// begin tmp := [ ] ;
45774: LD_ADDR_VAR 0 19
45778: PUSH
45779: EMPTY
45780: ST_TO_ADDR
// for j in f do
45781: LD_ADDR_VAR 0 9
45785: PUSH
45786: LD_VAR 0 12
45790: PUSH
45791: FOR_IN
45792: IFFALSE 45865
// if GetBType ( j ) = b_bunker then
45794: LD_VAR 0 9
45798: PPUSH
45799: CALL_OW 266
45803: PUSH
45804: LD_INT 32
45806: EQUAL
45807: IFFALSE 45834
// tmp := Insert ( tmp , 1 , j ) else
45809: LD_ADDR_VAR 0 19
45813: PUSH
45814: LD_VAR 0 19
45818: PPUSH
45819: LD_INT 1
45821: PPUSH
45822: LD_VAR 0 9
45826: PPUSH
45827: CALL_OW 2
45831: ST_TO_ADDR
45832: GO 45863
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45834: LD_ADDR_VAR 0 19
45838: PUSH
45839: LD_VAR 0 19
45843: PPUSH
45844: LD_VAR 0 19
45848: PUSH
45849: LD_INT 1
45851: PLUS
45852: PPUSH
45853: LD_VAR 0 9
45857: PPUSH
45858: CALL_OW 2
45862: ST_TO_ADDR
45863: GO 45791
45865: POP
45866: POP
// if tmp then
45867: LD_VAR 0 19
45871: IFFALSE 45883
// f := tmp ;
45873: LD_ADDR_VAR 0 12
45877: PUSH
45878: LD_VAR 0 19
45882: ST_TO_ADDR
// end ; x := personel [ i ] ;
45883: LD_ADDR_VAR 0 13
45887: PUSH
45888: LD_VAR 0 6
45892: PUSH
45893: LD_VAR 0 8
45897: ARRAY
45898: ST_TO_ADDR
// if x = - 1 then
45899: LD_VAR 0 13
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: EQUAL
45908: IFFALSE 46117
// begin for j in f do
45910: LD_ADDR_VAR 0 9
45914: PUSH
45915: LD_VAR 0 12
45919: PUSH
45920: FOR_IN
45921: IFFALSE 46113
// repeat InitHc ;
45923: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45927: LD_VAR 0 9
45931: PPUSH
45932: CALL_OW 266
45936: PUSH
45937: LD_INT 5
45939: EQUAL
45940: IFFALSE 46010
// begin if UnitsInside ( j ) < 3 then
45942: LD_VAR 0 9
45946: PPUSH
45947: CALL_OW 313
45951: PUSH
45952: LD_INT 3
45954: LESS
45955: IFFALSE 45991
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45957: LD_INT 0
45959: PPUSH
45960: LD_INT 5
45962: PUSH
45963: LD_INT 8
45965: PUSH
45966: LD_INT 9
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: PUSH
45974: LD_VAR 0 17
45978: ARRAY
45979: PPUSH
45980: LD_VAR 0 4
45984: PPUSH
45985: CALL_OW 380
45989: GO 46008
// PrepareHuman ( false , i , skill ) ;
45991: LD_INT 0
45993: PPUSH
45994: LD_VAR 0 8
45998: PPUSH
45999: LD_VAR 0 4
46003: PPUSH
46004: CALL_OW 380
// end else
46008: GO 46027
// PrepareHuman ( false , i , skill ) ;
46010: LD_INT 0
46012: PPUSH
46013: LD_VAR 0 8
46017: PPUSH
46018: LD_VAR 0 4
46022: PPUSH
46023: CALL_OW 380
// un := CreateHuman ;
46027: LD_ADDR_VAR 0 14
46031: PUSH
46032: CALL_OW 44
46036: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46037: LD_ADDR_VAR 0 7
46041: PUSH
46042: LD_VAR 0 7
46046: PPUSH
46047: LD_INT 1
46049: PPUSH
46050: LD_VAR 0 14
46054: PPUSH
46055: CALL_OW 2
46059: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46060: LD_VAR 0 14
46064: PPUSH
46065: LD_VAR 0 9
46069: PPUSH
46070: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46074: LD_VAR 0 9
46078: PPUSH
46079: CALL_OW 313
46083: PUSH
46084: LD_INT 6
46086: EQUAL
46087: PUSH
46088: LD_VAR 0 9
46092: PPUSH
46093: CALL_OW 266
46097: PUSH
46098: LD_INT 32
46100: PUSH
46101: LD_INT 31
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: IN
46108: OR
46109: IFFALSE 45923
46111: GO 45920
46113: POP
46114: POP
// end else
46115: GO 46497
// for j = 1 to x do
46117: LD_ADDR_VAR 0 9
46121: PUSH
46122: DOUBLE
46123: LD_INT 1
46125: DEC
46126: ST_TO_ADDR
46127: LD_VAR 0 13
46131: PUSH
46132: FOR_TO
46133: IFFALSE 46495
// begin InitHc ;
46135: CALL_OW 19
// if not f then
46139: LD_VAR 0 12
46143: NOT
46144: IFFALSE 46233
// begin PrepareHuman ( false , i , skill ) ;
46146: LD_INT 0
46148: PPUSH
46149: LD_VAR 0 8
46153: PPUSH
46154: LD_VAR 0 4
46158: PPUSH
46159: CALL_OW 380
// un := CreateHuman ;
46163: LD_ADDR_VAR 0 14
46167: PUSH
46168: CALL_OW 44
46172: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46173: LD_ADDR_VAR 0 7
46177: PUSH
46178: LD_VAR 0 7
46182: PPUSH
46183: LD_INT 1
46185: PPUSH
46186: LD_VAR 0 14
46190: PPUSH
46191: CALL_OW 2
46195: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46196: LD_VAR 0 14
46200: PPUSH
46201: LD_VAR 0 1
46205: PPUSH
46206: CALL_OW 250
46210: PPUSH
46211: LD_VAR 0 1
46215: PPUSH
46216: CALL_OW 251
46220: PPUSH
46221: LD_INT 10
46223: PPUSH
46224: LD_INT 0
46226: PPUSH
46227: CALL_OW 50
// continue ;
46231: GO 46132
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46233: LD_VAR 0 12
46237: PUSH
46238: LD_INT 1
46240: ARRAY
46241: PPUSH
46242: CALL_OW 313
46246: PUSH
46247: LD_VAR 0 12
46251: PUSH
46252: LD_INT 1
46254: ARRAY
46255: PPUSH
46256: CALL_OW 266
46260: PUSH
46261: LD_INT 32
46263: PUSH
46264: LD_INT 31
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: IN
46271: AND
46272: PUSH
46273: LD_VAR 0 12
46277: PUSH
46278: LD_INT 1
46280: ARRAY
46281: PPUSH
46282: CALL_OW 313
46286: PUSH
46287: LD_INT 6
46289: EQUAL
46290: OR
46291: IFFALSE 46311
// f := Delete ( f , 1 ) ;
46293: LD_ADDR_VAR 0 12
46297: PUSH
46298: LD_VAR 0 12
46302: PPUSH
46303: LD_INT 1
46305: PPUSH
46306: CALL_OW 3
46310: ST_TO_ADDR
// if not f then
46311: LD_VAR 0 12
46315: NOT
46316: IFFALSE 46334
// begin x := x + 2 ;
46318: LD_ADDR_VAR 0 13
46322: PUSH
46323: LD_VAR 0 13
46327: PUSH
46328: LD_INT 2
46330: PLUS
46331: ST_TO_ADDR
// continue ;
46332: GO 46132
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46334: LD_VAR 0 12
46338: PUSH
46339: LD_INT 1
46341: ARRAY
46342: PPUSH
46343: CALL_OW 266
46347: PUSH
46348: LD_INT 5
46350: EQUAL
46351: IFFALSE 46425
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46353: LD_VAR 0 12
46357: PUSH
46358: LD_INT 1
46360: ARRAY
46361: PPUSH
46362: CALL_OW 313
46366: PUSH
46367: LD_INT 3
46369: LESS
46370: IFFALSE 46406
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46372: LD_INT 0
46374: PPUSH
46375: LD_INT 5
46377: PUSH
46378: LD_INT 8
46380: PUSH
46381: LD_INT 9
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: LIST
46388: PUSH
46389: LD_VAR 0 17
46393: ARRAY
46394: PPUSH
46395: LD_VAR 0 4
46399: PPUSH
46400: CALL_OW 380
46404: GO 46423
// PrepareHuman ( false , i , skill ) ;
46406: LD_INT 0
46408: PPUSH
46409: LD_VAR 0 8
46413: PPUSH
46414: LD_VAR 0 4
46418: PPUSH
46419: CALL_OW 380
// end else
46423: GO 46442
// PrepareHuman ( false , i , skill ) ;
46425: LD_INT 0
46427: PPUSH
46428: LD_VAR 0 8
46432: PPUSH
46433: LD_VAR 0 4
46437: PPUSH
46438: CALL_OW 380
// un := CreateHuman ;
46442: LD_ADDR_VAR 0 14
46446: PUSH
46447: CALL_OW 44
46451: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46452: LD_ADDR_VAR 0 7
46456: PUSH
46457: LD_VAR 0 7
46461: PPUSH
46462: LD_INT 1
46464: PPUSH
46465: LD_VAR 0 14
46469: PPUSH
46470: CALL_OW 2
46474: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46475: LD_VAR 0 14
46479: PPUSH
46480: LD_VAR 0 12
46484: PUSH
46485: LD_INT 1
46487: ARRAY
46488: PPUSH
46489: CALL_OW 52
// end ;
46493: GO 46132
46495: POP
46496: POP
// end ;
46497: GO 45434
46499: POP
46500: POP
// result := result ^ buildings ;
46501: LD_ADDR_VAR 0 7
46505: PUSH
46506: LD_VAR 0 7
46510: PUSH
46511: LD_VAR 0 18
46515: ADD
46516: ST_TO_ADDR
// end else
46517: GO 46660
// begin for i = 1 to personel do
46519: LD_ADDR_VAR 0 8
46523: PUSH
46524: DOUBLE
46525: LD_INT 1
46527: DEC
46528: ST_TO_ADDR
46529: LD_VAR 0 6
46533: PUSH
46534: FOR_TO
46535: IFFALSE 46658
// begin if i > 4 then
46537: LD_VAR 0 8
46541: PUSH
46542: LD_INT 4
46544: GREATER
46545: IFFALSE 46549
// break ;
46547: GO 46658
// x := personel [ i ] ;
46549: LD_ADDR_VAR 0 13
46553: PUSH
46554: LD_VAR 0 6
46558: PUSH
46559: LD_VAR 0 8
46563: ARRAY
46564: ST_TO_ADDR
// if x = - 1 then
46565: LD_VAR 0 13
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: EQUAL
46574: IFFALSE 46578
// continue ;
46576: GO 46534
// PrepareHuman ( false , i , skill ) ;
46578: LD_INT 0
46580: PPUSH
46581: LD_VAR 0 8
46585: PPUSH
46586: LD_VAR 0 4
46590: PPUSH
46591: CALL_OW 380
// un := CreateHuman ;
46595: LD_ADDR_VAR 0 14
46599: PUSH
46600: CALL_OW 44
46604: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46605: LD_VAR 0 14
46609: PPUSH
46610: LD_VAR 0 1
46614: PPUSH
46615: CALL_OW 250
46619: PPUSH
46620: LD_VAR 0 1
46624: PPUSH
46625: CALL_OW 251
46629: PPUSH
46630: LD_INT 10
46632: PPUSH
46633: LD_INT 0
46635: PPUSH
46636: CALL_OW 50
// result := result ^ un ;
46640: LD_ADDR_VAR 0 7
46644: PUSH
46645: LD_VAR 0 7
46649: PUSH
46650: LD_VAR 0 14
46654: ADD
46655: ST_TO_ADDR
// end ;
46656: GO 46534
46658: POP
46659: POP
// end ; end ;
46660: LD_VAR 0 7
46664: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46665: LD_INT 0
46667: PPUSH
46668: PPUSH
46669: PPUSH
46670: PPUSH
46671: PPUSH
46672: PPUSH
46673: PPUSH
46674: PPUSH
46675: PPUSH
46676: PPUSH
46677: PPUSH
46678: PPUSH
46679: PPUSH
46680: PPUSH
46681: PPUSH
46682: PPUSH
// result := false ;
46683: LD_ADDR_VAR 0 3
46687: PUSH
46688: LD_INT 0
46690: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46691: LD_VAR 0 1
46695: NOT
46696: PUSH
46697: LD_VAR 0 1
46701: PPUSH
46702: CALL_OW 266
46706: PUSH
46707: LD_INT 32
46709: PUSH
46710: LD_INT 33
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: IN
46717: NOT
46718: OR
46719: IFFALSE 46723
// exit ;
46721: GO 47832
// nat := GetNation ( tower ) ;
46723: LD_ADDR_VAR 0 12
46727: PUSH
46728: LD_VAR 0 1
46732: PPUSH
46733: CALL_OW 248
46737: ST_TO_ADDR
// side := GetSide ( tower ) ;
46738: LD_ADDR_VAR 0 16
46742: PUSH
46743: LD_VAR 0 1
46747: PPUSH
46748: CALL_OW 255
46752: ST_TO_ADDR
// x := GetX ( tower ) ;
46753: LD_ADDR_VAR 0 10
46757: PUSH
46758: LD_VAR 0 1
46762: PPUSH
46763: CALL_OW 250
46767: ST_TO_ADDR
// y := GetY ( tower ) ;
46768: LD_ADDR_VAR 0 11
46772: PUSH
46773: LD_VAR 0 1
46777: PPUSH
46778: CALL_OW 251
46782: ST_TO_ADDR
// if not x or not y then
46783: LD_VAR 0 10
46787: NOT
46788: PUSH
46789: LD_VAR 0 11
46793: NOT
46794: OR
46795: IFFALSE 46799
// exit ;
46797: GO 47832
// weapon := 0 ;
46799: LD_ADDR_VAR 0 18
46803: PUSH
46804: LD_INT 0
46806: ST_TO_ADDR
// fac_list := [ ] ;
46807: LD_ADDR_VAR 0 17
46811: PUSH
46812: EMPTY
46813: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46814: LD_ADDR_VAR 0 6
46818: PUSH
46819: LD_VAR 0 1
46823: PPUSH
46824: CALL_OW 274
46828: PPUSH
46829: LD_VAR 0 2
46833: PPUSH
46834: LD_INT 0
46836: PPUSH
46837: CALL 44402 0 3
46841: PPUSH
46842: LD_INT 30
46844: PUSH
46845: LD_INT 3
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PPUSH
46852: CALL_OW 72
46856: ST_TO_ADDR
// if not factories then
46857: LD_VAR 0 6
46861: NOT
46862: IFFALSE 46866
// exit ;
46864: GO 47832
// for i in factories do
46866: LD_ADDR_VAR 0 8
46870: PUSH
46871: LD_VAR 0 6
46875: PUSH
46876: FOR_IN
46877: IFFALSE 46902
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46879: LD_ADDR_VAR 0 17
46883: PUSH
46884: LD_VAR 0 17
46888: PUSH
46889: LD_VAR 0 8
46893: PPUSH
46894: CALL_OW 478
46898: UNION
46899: ST_TO_ADDR
46900: GO 46876
46902: POP
46903: POP
// if not fac_list then
46904: LD_VAR 0 17
46908: NOT
46909: IFFALSE 46913
// exit ;
46911: GO 47832
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46913: LD_ADDR_VAR 0 5
46917: PUSH
46918: LD_INT 4
46920: PUSH
46921: LD_INT 5
46923: PUSH
46924: LD_INT 9
46926: PUSH
46927: LD_INT 10
46929: PUSH
46930: LD_INT 6
46932: PUSH
46933: LD_INT 7
46935: PUSH
46936: LD_INT 11
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 27
46950: PUSH
46951: LD_INT 28
46953: PUSH
46954: LD_INT 26
46956: PUSH
46957: LD_INT 30
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 43
46968: PUSH
46969: LD_INT 44
46971: PUSH
46972: LD_INT 46
46974: PUSH
46975: LD_INT 45
46977: PUSH
46978: LD_INT 47
46980: PUSH
46981: LD_INT 49
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: LIST
46996: PUSH
46997: LD_VAR 0 12
47001: ARRAY
47002: ST_TO_ADDR
// list := list isect fac_list ;
47003: LD_ADDR_VAR 0 5
47007: PUSH
47008: LD_VAR 0 5
47012: PUSH
47013: LD_VAR 0 17
47017: ISECT
47018: ST_TO_ADDR
// if not list then
47019: LD_VAR 0 5
47023: NOT
47024: IFFALSE 47028
// exit ;
47026: GO 47832
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47028: LD_VAR 0 12
47032: PUSH
47033: LD_INT 3
47035: EQUAL
47036: PUSH
47037: LD_INT 49
47039: PUSH
47040: LD_VAR 0 5
47044: IN
47045: AND
47046: PUSH
47047: LD_INT 31
47049: PPUSH
47050: LD_VAR 0 16
47054: PPUSH
47055: CALL_OW 321
47059: PUSH
47060: LD_INT 2
47062: EQUAL
47063: AND
47064: IFFALSE 47124
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47066: LD_INT 22
47068: PUSH
47069: LD_VAR 0 16
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 35
47080: PUSH
47081: LD_INT 49
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 91
47090: PUSH
47091: LD_VAR 0 1
47095: PUSH
47096: LD_INT 10
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: LIST
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: PPUSH
47109: CALL_OW 69
47113: NOT
47114: IFFALSE 47124
// weapon := ru_time_lapser ;
47116: LD_ADDR_VAR 0 18
47120: PUSH
47121: LD_INT 49
47123: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47124: LD_VAR 0 12
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: IN
47139: PUSH
47140: LD_INT 11
47142: PUSH
47143: LD_VAR 0 5
47147: IN
47148: PUSH
47149: LD_INT 30
47151: PUSH
47152: LD_VAR 0 5
47156: IN
47157: OR
47158: AND
47159: PUSH
47160: LD_INT 6
47162: PPUSH
47163: LD_VAR 0 16
47167: PPUSH
47168: CALL_OW 321
47172: PUSH
47173: LD_INT 2
47175: EQUAL
47176: AND
47177: IFFALSE 47342
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47179: LD_INT 22
47181: PUSH
47182: LD_VAR 0 16
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: LD_INT 35
47196: PUSH
47197: LD_INT 11
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 35
47206: PUSH
47207: LD_INT 30
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 91
47221: PUSH
47222: LD_VAR 0 1
47226: PUSH
47227: LD_INT 18
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: LIST
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: LIST
47239: PPUSH
47240: CALL_OW 69
47244: NOT
47245: PUSH
47246: LD_INT 22
47248: PUSH
47249: LD_VAR 0 16
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: LD_INT 30
47263: PUSH
47264: LD_INT 32
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 30
47273: PUSH
47274: LD_INT 33
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 91
47288: PUSH
47289: LD_VAR 0 1
47293: PUSH
47294: LD_INT 12
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: PUSH
47307: EMPTY
47308: LIST
47309: PPUSH
47310: CALL_OW 69
47314: PUSH
47315: LD_INT 2
47317: GREATER
47318: AND
47319: IFFALSE 47342
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47321: LD_ADDR_VAR 0 18
47325: PUSH
47326: LD_INT 11
47328: PUSH
47329: LD_INT 30
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_VAR 0 12
47340: ARRAY
47341: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47342: LD_VAR 0 18
47346: NOT
47347: PUSH
47348: LD_INT 40
47350: PPUSH
47351: LD_VAR 0 16
47355: PPUSH
47356: CALL_OW 321
47360: PUSH
47361: LD_INT 2
47363: EQUAL
47364: AND
47365: PUSH
47366: LD_INT 7
47368: PUSH
47369: LD_VAR 0 5
47373: IN
47374: PUSH
47375: LD_INT 28
47377: PUSH
47378: LD_VAR 0 5
47382: IN
47383: OR
47384: PUSH
47385: LD_INT 45
47387: PUSH
47388: LD_VAR 0 5
47392: IN
47393: OR
47394: AND
47395: IFFALSE 47649
// begin hex := GetHexInfo ( x , y ) ;
47397: LD_ADDR_VAR 0 4
47401: PUSH
47402: LD_VAR 0 10
47406: PPUSH
47407: LD_VAR 0 11
47411: PPUSH
47412: CALL_OW 546
47416: ST_TO_ADDR
// if hex [ 1 ] then
47417: LD_VAR 0 4
47421: PUSH
47422: LD_INT 1
47424: ARRAY
47425: IFFALSE 47429
// exit ;
47427: GO 47832
// height := hex [ 2 ] ;
47429: LD_ADDR_VAR 0 15
47433: PUSH
47434: LD_VAR 0 4
47438: PUSH
47439: LD_INT 2
47441: ARRAY
47442: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47443: LD_ADDR_VAR 0 14
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: LD_INT 3
47456: PUSH
47457: LD_INT 5
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: ST_TO_ADDR
// for i in tmp do
47466: LD_ADDR_VAR 0 8
47470: PUSH
47471: LD_VAR 0 14
47475: PUSH
47476: FOR_IN
47477: IFFALSE 47647
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47479: LD_ADDR_VAR 0 9
47483: PUSH
47484: LD_VAR 0 10
47488: PPUSH
47489: LD_VAR 0 8
47493: PPUSH
47494: LD_INT 5
47496: PPUSH
47497: CALL_OW 272
47501: PUSH
47502: LD_VAR 0 11
47506: PPUSH
47507: LD_VAR 0 8
47511: PPUSH
47512: LD_INT 5
47514: PPUSH
47515: CALL_OW 273
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47524: LD_VAR 0 9
47528: PUSH
47529: LD_INT 1
47531: ARRAY
47532: PPUSH
47533: LD_VAR 0 9
47537: PUSH
47538: LD_INT 2
47540: ARRAY
47541: PPUSH
47542: CALL_OW 488
47546: IFFALSE 47645
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47548: LD_ADDR_VAR 0 4
47552: PUSH
47553: LD_VAR 0 9
47557: PUSH
47558: LD_INT 1
47560: ARRAY
47561: PPUSH
47562: LD_VAR 0 9
47566: PUSH
47567: LD_INT 2
47569: ARRAY
47570: PPUSH
47571: CALL_OW 546
47575: ST_TO_ADDR
// if hex [ 1 ] then
47576: LD_VAR 0 4
47580: PUSH
47581: LD_INT 1
47583: ARRAY
47584: IFFALSE 47588
// continue ;
47586: GO 47476
// h := hex [ 2 ] ;
47588: LD_ADDR_VAR 0 13
47592: PUSH
47593: LD_VAR 0 4
47597: PUSH
47598: LD_INT 2
47600: ARRAY
47601: ST_TO_ADDR
// if h + 7 < height then
47602: LD_VAR 0 13
47606: PUSH
47607: LD_INT 7
47609: PLUS
47610: PUSH
47611: LD_VAR 0 15
47615: LESS
47616: IFFALSE 47645
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47618: LD_ADDR_VAR 0 18
47622: PUSH
47623: LD_INT 7
47625: PUSH
47626: LD_INT 28
47628: PUSH
47629: LD_INT 45
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: LIST
47636: PUSH
47637: LD_VAR 0 12
47641: ARRAY
47642: ST_TO_ADDR
// break ;
47643: GO 47647
// end ; end ; end ;
47645: GO 47476
47647: POP
47648: POP
// end ; if not weapon then
47649: LD_VAR 0 18
47653: NOT
47654: IFFALSE 47714
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47656: LD_ADDR_VAR 0 5
47660: PUSH
47661: LD_VAR 0 5
47665: PUSH
47666: LD_INT 11
47668: PUSH
47669: LD_INT 30
47671: PUSH
47672: LD_INT 49
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: LIST
47679: DIFF
47680: ST_TO_ADDR
// if not list then
47681: LD_VAR 0 5
47685: NOT
47686: IFFALSE 47690
// exit ;
47688: GO 47832
// weapon := list [ rand ( 1 , list ) ] ;
47690: LD_ADDR_VAR 0 18
47694: PUSH
47695: LD_VAR 0 5
47699: PUSH
47700: LD_INT 1
47702: PPUSH
47703: LD_VAR 0 5
47707: PPUSH
47708: CALL_OW 12
47712: ARRAY
47713: ST_TO_ADDR
// end ; if weapon then
47714: LD_VAR 0 18
47718: IFFALSE 47832
// begin tmp := CostOfWeapon ( weapon ) ;
47720: LD_ADDR_VAR 0 14
47724: PUSH
47725: LD_VAR 0 18
47729: PPUSH
47730: CALL_OW 451
47734: ST_TO_ADDR
// j := GetBase ( tower ) ;
47735: LD_ADDR_VAR 0 9
47739: PUSH
47740: LD_VAR 0 1
47744: PPUSH
47745: CALL_OW 274
47749: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47750: LD_VAR 0 9
47754: PPUSH
47755: LD_INT 1
47757: PPUSH
47758: CALL_OW 275
47762: PUSH
47763: LD_VAR 0 14
47767: PUSH
47768: LD_INT 1
47770: ARRAY
47771: GREATEREQUAL
47772: PUSH
47773: LD_VAR 0 9
47777: PPUSH
47778: LD_INT 2
47780: PPUSH
47781: CALL_OW 275
47785: PUSH
47786: LD_VAR 0 14
47790: PUSH
47791: LD_INT 2
47793: ARRAY
47794: GREATEREQUAL
47795: AND
47796: PUSH
47797: LD_VAR 0 9
47801: PPUSH
47802: LD_INT 3
47804: PPUSH
47805: CALL_OW 275
47809: PUSH
47810: LD_VAR 0 14
47814: PUSH
47815: LD_INT 3
47817: ARRAY
47818: GREATEREQUAL
47819: AND
47820: IFFALSE 47832
// result := weapon ;
47822: LD_ADDR_VAR 0 3
47826: PUSH
47827: LD_VAR 0 18
47831: ST_TO_ADDR
// end ; end ;
47832: LD_VAR 0 3
47836: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47837: LD_INT 0
47839: PPUSH
47840: PPUSH
// result := true ;
47841: LD_ADDR_VAR 0 3
47845: PUSH
47846: LD_INT 1
47848: ST_TO_ADDR
// if array1 = array2 then
47849: LD_VAR 0 1
47853: PUSH
47854: LD_VAR 0 2
47858: EQUAL
47859: IFFALSE 47919
// begin for i = 1 to array1 do
47861: LD_ADDR_VAR 0 4
47865: PUSH
47866: DOUBLE
47867: LD_INT 1
47869: DEC
47870: ST_TO_ADDR
47871: LD_VAR 0 1
47875: PUSH
47876: FOR_TO
47877: IFFALSE 47915
// if array1 [ i ] <> array2 [ i ] then
47879: LD_VAR 0 1
47883: PUSH
47884: LD_VAR 0 4
47888: ARRAY
47889: PUSH
47890: LD_VAR 0 2
47894: PUSH
47895: LD_VAR 0 4
47899: ARRAY
47900: NONEQUAL
47901: IFFALSE 47913
// begin result := false ;
47903: LD_ADDR_VAR 0 3
47907: PUSH
47908: LD_INT 0
47910: ST_TO_ADDR
// break ;
47911: GO 47915
// end ;
47913: GO 47876
47915: POP
47916: POP
// end else
47917: GO 47927
// result := false ;
47919: LD_ADDR_VAR 0 3
47923: PUSH
47924: LD_INT 0
47926: ST_TO_ADDR
// end ;
47927: LD_VAR 0 3
47931: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47932: LD_INT 0
47934: PPUSH
47935: PPUSH
// if not array1 or not array2 then
47936: LD_VAR 0 1
47940: NOT
47941: PUSH
47942: LD_VAR 0 2
47946: NOT
47947: OR
47948: IFFALSE 47952
// exit ;
47950: GO 48016
// result := true ;
47952: LD_ADDR_VAR 0 3
47956: PUSH
47957: LD_INT 1
47959: ST_TO_ADDR
// for i = 1 to array1 do
47960: LD_ADDR_VAR 0 4
47964: PUSH
47965: DOUBLE
47966: LD_INT 1
47968: DEC
47969: ST_TO_ADDR
47970: LD_VAR 0 1
47974: PUSH
47975: FOR_TO
47976: IFFALSE 48014
// if array1 [ i ] <> array2 [ i ] then
47978: LD_VAR 0 1
47982: PUSH
47983: LD_VAR 0 4
47987: ARRAY
47988: PUSH
47989: LD_VAR 0 2
47993: PUSH
47994: LD_VAR 0 4
47998: ARRAY
47999: NONEQUAL
48000: IFFALSE 48012
// begin result := false ;
48002: LD_ADDR_VAR 0 3
48006: PUSH
48007: LD_INT 0
48009: ST_TO_ADDR
// break ;
48010: GO 48014
// end ;
48012: GO 47975
48014: POP
48015: POP
// end ;
48016: LD_VAR 0 3
48020: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48021: LD_INT 0
48023: PPUSH
48024: PPUSH
48025: PPUSH
// pom := GetBase ( fac ) ;
48026: LD_ADDR_VAR 0 5
48030: PUSH
48031: LD_VAR 0 1
48035: PPUSH
48036: CALL_OW 274
48040: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48041: LD_ADDR_VAR 0 4
48045: PUSH
48046: LD_VAR 0 2
48050: PUSH
48051: LD_INT 1
48053: ARRAY
48054: PPUSH
48055: LD_VAR 0 2
48059: PUSH
48060: LD_INT 2
48062: ARRAY
48063: PPUSH
48064: LD_VAR 0 2
48068: PUSH
48069: LD_INT 3
48071: ARRAY
48072: PPUSH
48073: LD_VAR 0 2
48077: PUSH
48078: LD_INT 4
48080: ARRAY
48081: PPUSH
48082: CALL_OW 449
48086: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48087: LD_ADDR_VAR 0 3
48091: PUSH
48092: LD_VAR 0 5
48096: PPUSH
48097: LD_INT 1
48099: PPUSH
48100: CALL_OW 275
48104: PUSH
48105: LD_VAR 0 4
48109: PUSH
48110: LD_INT 1
48112: ARRAY
48113: GREATEREQUAL
48114: PUSH
48115: LD_VAR 0 5
48119: PPUSH
48120: LD_INT 2
48122: PPUSH
48123: CALL_OW 275
48127: PUSH
48128: LD_VAR 0 4
48132: PUSH
48133: LD_INT 2
48135: ARRAY
48136: GREATEREQUAL
48137: AND
48138: PUSH
48139: LD_VAR 0 5
48143: PPUSH
48144: LD_INT 3
48146: PPUSH
48147: CALL_OW 275
48151: PUSH
48152: LD_VAR 0 4
48156: PUSH
48157: LD_INT 3
48159: ARRAY
48160: GREATEREQUAL
48161: AND
48162: ST_TO_ADDR
// end ;
48163: LD_VAR 0 3
48167: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48168: LD_INT 0
48170: PPUSH
48171: PPUSH
48172: PPUSH
48173: PPUSH
// pom := GetBase ( building ) ;
48174: LD_ADDR_VAR 0 3
48178: PUSH
48179: LD_VAR 0 1
48183: PPUSH
48184: CALL_OW 274
48188: ST_TO_ADDR
// if not pom then
48189: LD_VAR 0 3
48193: NOT
48194: IFFALSE 48198
// exit ;
48196: GO 48368
// btype := GetBType ( building ) ;
48198: LD_ADDR_VAR 0 5
48202: PUSH
48203: LD_VAR 0 1
48207: PPUSH
48208: CALL_OW 266
48212: ST_TO_ADDR
// if btype = b_armoury then
48213: LD_VAR 0 5
48217: PUSH
48218: LD_INT 4
48220: EQUAL
48221: IFFALSE 48231
// btype := b_barracks ;
48223: LD_ADDR_VAR 0 5
48227: PUSH
48228: LD_INT 5
48230: ST_TO_ADDR
// if btype = b_depot then
48231: LD_VAR 0 5
48235: PUSH
48236: LD_INT 0
48238: EQUAL
48239: IFFALSE 48249
// btype := b_warehouse ;
48241: LD_ADDR_VAR 0 5
48245: PUSH
48246: LD_INT 1
48248: ST_TO_ADDR
// if btype = b_workshop then
48249: LD_VAR 0 5
48253: PUSH
48254: LD_INT 2
48256: EQUAL
48257: IFFALSE 48267
// btype := b_factory ;
48259: LD_ADDR_VAR 0 5
48263: PUSH
48264: LD_INT 3
48266: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48267: LD_ADDR_VAR 0 4
48271: PUSH
48272: LD_VAR 0 5
48276: PPUSH
48277: LD_VAR 0 1
48281: PPUSH
48282: CALL_OW 248
48286: PPUSH
48287: CALL_OW 450
48291: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48292: LD_ADDR_VAR 0 2
48296: PUSH
48297: LD_VAR 0 3
48301: PPUSH
48302: LD_INT 1
48304: PPUSH
48305: CALL_OW 275
48309: PUSH
48310: LD_VAR 0 4
48314: PUSH
48315: LD_INT 1
48317: ARRAY
48318: GREATEREQUAL
48319: PUSH
48320: LD_VAR 0 3
48324: PPUSH
48325: LD_INT 2
48327: PPUSH
48328: CALL_OW 275
48332: PUSH
48333: LD_VAR 0 4
48337: PUSH
48338: LD_INT 2
48340: ARRAY
48341: GREATEREQUAL
48342: AND
48343: PUSH
48344: LD_VAR 0 3
48348: PPUSH
48349: LD_INT 3
48351: PPUSH
48352: CALL_OW 275
48356: PUSH
48357: LD_VAR 0 4
48361: PUSH
48362: LD_INT 3
48364: ARRAY
48365: GREATEREQUAL
48366: AND
48367: ST_TO_ADDR
// end ;
48368: LD_VAR 0 2
48372: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48373: LD_INT 0
48375: PPUSH
48376: PPUSH
48377: PPUSH
// pom := GetBase ( building ) ;
48378: LD_ADDR_VAR 0 4
48382: PUSH
48383: LD_VAR 0 1
48387: PPUSH
48388: CALL_OW 274
48392: ST_TO_ADDR
// if not pom then
48393: LD_VAR 0 4
48397: NOT
48398: IFFALSE 48402
// exit ;
48400: GO 48503
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48402: LD_ADDR_VAR 0 5
48406: PUSH
48407: LD_VAR 0 2
48411: PPUSH
48412: LD_VAR 0 1
48416: PPUSH
48417: CALL_OW 248
48421: PPUSH
48422: CALL_OW 450
48426: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48427: LD_ADDR_VAR 0 3
48431: PUSH
48432: LD_VAR 0 4
48436: PPUSH
48437: LD_INT 1
48439: PPUSH
48440: CALL_OW 275
48444: PUSH
48445: LD_VAR 0 5
48449: PUSH
48450: LD_INT 1
48452: ARRAY
48453: GREATEREQUAL
48454: PUSH
48455: LD_VAR 0 4
48459: PPUSH
48460: LD_INT 2
48462: PPUSH
48463: CALL_OW 275
48467: PUSH
48468: LD_VAR 0 5
48472: PUSH
48473: LD_INT 2
48475: ARRAY
48476: GREATEREQUAL
48477: AND
48478: PUSH
48479: LD_VAR 0 4
48483: PPUSH
48484: LD_INT 3
48486: PPUSH
48487: CALL_OW 275
48491: PUSH
48492: LD_VAR 0 5
48496: PUSH
48497: LD_INT 3
48499: ARRAY
48500: GREATEREQUAL
48501: AND
48502: ST_TO_ADDR
// end ;
48503: LD_VAR 0 3
48507: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48508: LD_INT 0
48510: PPUSH
48511: PPUSH
48512: PPUSH
48513: PPUSH
48514: PPUSH
48515: PPUSH
48516: PPUSH
48517: PPUSH
48518: PPUSH
48519: PPUSH
48520: PPUSH
// result := false ;
48521: LD_ADDR_VAR 0 8
48525: PUSH
48526: LD_INT 0
48528: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48529: LD_VAR 0 5
48533: NOT
48534: PUSH
48535: LD_VAR 0 1
48539: NOT
48540: OR
48541: PUSH
48542: LD_VAR 0 2
48546: NOT
48547: OR
48548: PUSH
48549: LD_VAR 0 3
48553: NOT
48554: OR
48555: IFFALSE 48559
// exit ;
48557: GO 49373
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48559: LD_ADDR_VAR 0 14
48563: PUSH
48564: LD_VAR 0 1
48568: PPUSH
48569: LD_VAR 0 2
48573: PPUSH
48574: LD_VAR 0 3
48578: PPUSH
48579: LD_VAR 0 4
48583: PPUSH
48584: LD_VAR 0 5
48588: PUSH
48589: LD_INT 1
48591: ARRAY
48592: PPUSH
48593: CALL_OW 248
48597: PPUSH
48598: LD_INT 0
48600: PPUSH
48601: CALL 50610 0 6
48605: ST_TO_ADDR
// if not hexes then
48606: LD_VAR 0 14
48610: NOT
48611: IFFALSE 48615
// exit ;
48613: GO 49373
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48615: LD_ADDR_VAR 0 17
48619: PUSH
48620: LD_VAR 0 5
48624: PPUSH
48625: LD_INT 22
48627: PUSH
48628: LD_VAR 0 13
48632: PPUSH
48633: CALL_OW 255
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: LD_INT 30
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 30
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: LIST
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PPUSH
48674: CALL_OW 72
48678: ST_TO_ADDR
// for i = 1 to hexes do
48679: LD_ADDR_VAR 0 9
48683: PUSH
48684: DOUBLE
48685: LD_INT 1
48687: DEC
48688: ST_TO_ADDR
48689: LD_VAR 0 14
48693: PUSH
48694: FOR_TO
48695: IFFALSE 49371
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48697: LD_ADDR_VAR 0 13
48701: PUSH
48702: LD_VAR 0 14
48706: PUSH
48707: LD_VAR 0 9
48711: ARRAY
48712: PUSH
48713: LD_INT 1
48715: ARRAY
48716: PPUSH
48717: LD_VAR 0 14
48721: PUSH
48722: LD_VAR 0 9
48726: ARRAY
48727: PUSH
48728: LD_INT 2
48730: ARRAY
48731: PPUSH
48732: CALL_OW 428
48736: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48737: LD_VAR 0 14
48741: PUSH
48742: LD_VAR 0 9
48746: ARRAY
48747: PUSH
48748: LD_INT 1
48750: ARRAY
48751: PPUSH
48752: LD_VAR 0 14
48756: PUSH
48757: LD_VAR 0 9
48761: ARRAY
48762: PUSH
48763: LD_INT 2
48765: ARRAY
48766: PPUSH
48767: CALL_OW 351
48771: PUSH
48772: LD_VAR 0 14
48776: PUSH
48777: LD_VAR 0 9
48781: ARRAY
48782: PUSH
48783: LD_INT 1
48785: ARRAY
48786: PPUSH
48787: LD_VAR 0 14
48791: PUSH
48792: LD_VAR 0 9
48796: ARRAY
48797: PUSH
48798: LD_INT 2
48800: ARRAY
48801: PPUSH
48802: CALL_OW 488
48806: NOT
48807: OR
48808: PUSH
48809: LD_VAR 0 13
48813: PPUSH
48814: CALL_OW 247
48818: PUSH
48819: LD_INT 3
48821: EQUAL
48822: OR
48823: IFFALSE 48829
// exit ;
48825: POP
48826: POP
48827: GO 49373
// if not tmp then
48829: LD_VAR 0 13
48833: NOT
48834: IFFALSE 48838
// continue ;
48836: GO 48694
// result := true ;
48838: LD_ADDR_VAR 0 8
48842: PUSH
48843: LD_INT 1
48845: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48846: LD_VAR 0 6
48850: PUSH
48851: LD_VAR 0 13
48855: PPUSH
48856: CALL_OW 247
48860: PUSH
48861: LD_INT 2
48863: EQUAL
48864: AND
48865: PUSH
48866: LD_VAR 0 13
48870: PPUSH
48871: CALL_OW 263
48875: PUSH
48876: LD_INT 1
48878: EQUAL
48879: AND
48880: IFFALSE 49044
// begin if IsDrivenBy ( tmp ) then
48882: LD_VAR 0 13
48886: PPUSH
48887: CALL_OW 311
48891: IFFALSE 48895
// continue ;
48893: GO 48694
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48895: LD_VAR 0 6
48899: PPUSH
48900: LD_INT 3
48902: PUSH
48903: LD_INT 60
48905: PUSH
48906: EMPTY
48907: LIST
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 3
48915: PUSH
48916: LD_INT 55
48918: PUSH
48919: EMPTY
48920: LIST
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PPUSH
48930: CALL_OW 72
48934: IFFALSE 49042
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48936: LD_ADDR_VAR 0 18
48940: PUSH
48941: LD_VAR 0 6
48945: PPUSH
48946: LD_INT 3
48948: PUSH
48949: LD_INT 60
48951: PUSH
48952: EMPTY
48953: LIST
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 3
48961: PUSH
48962: LD_INT 55
48964: PUSH
48965: EMPTY
48966: LIST
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PPUSH
48976: CALL_OW 72
48980: PUSH
48981: LD_INT 1
48983: ARRAY
48984: ST_TO_ADDR
// if IsInUnit ( driver ) then
48985: LD_VAR 0 18
48989: PPUSH
48990: CALL_OW 310
48994: IFFALSE 49005
// ComExit ( driver ) ;
48996: LD_VAR 0 18
49000: PPUSH
49001: CALL 73794 0 1
// AddComEnterUnit ( driver , tmp ) ;
49005: LD_VAR 0 18
49009: PPUSH
49010: LD_VAR 0 13
49014: PPUSH
49015: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49019: LD_VAR 0 18
49023: PPUSH
49024: LD_VAR 0 7
49028: PPUSH
49029: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49033: LD_VAR 0 18
49037: PPUSH
49038: CALL_OW 181
// end ; continue ;
49042: GO 48694
// end ; if not cleaners or not tmp in cleaners then
49044: LD_VAR 0 6
49048: NOT
49049: PUSH
49050: LD_VAR 0 13
49054: PUSH
49055: LD_VAR 0 6
49059: IN
49060: NOT
49061: OR
49062: IFFALSE 49369
// begin if dep then
49064: LD_VAR 0 17
49068: IFFALSE 49204
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49070: LD_ADDR_VAR 0 16
49074: PUSH
49075: LD_VAR 0 17
49079: PUSH
49080: LD_INT 1
49082: ARRAY
49083: PPUSH
49084: CALL_OW 250
49088: PPUSH
49089: LD_VAR 0 17
49093: PUSH
49094: LD_INT 1
49096: ARRAY
49097: PPUSH
49098: CALL_OW 254
49102: PPUSH
49103: LD_INT 5
49105: PPUSH
49106: CALL_OW 272
49110: PUSH
49111: LD_VAR 0 17
49115: PUSH
49116: LD_INT 1
49118: ARRAY
49119: PPUSH
49120: CALL_OW 251
49124: PPUSH
49125: LD_VAR 0 17
49129: PUSH
49130: LD_INT 1
49132: ARRAY
49133: PPUSH
49134: CALL_OW 254
49138: PPUSH
49139: LD_INT 5
49141: PPUSH
49142: CALL_OW 273
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49151: LD_VAR 0 16
49155: PUSH
49156: LD_INT 1
49158: ARRAY
49159: PPUSH
49160: LD_VAR 0 16
49164: PUSH
49165: LD_INT 2
49167: ARRAY
49168: PPUSH
49169: CALL_OW 488
49173: IFFALSE 49204
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49175: LD_VAR 0 13
49179: PPUSH
49180: LD_VAR 0 16
49184: PUSH
49185: LD_INT 1
49187: ARRAY
49188: PPUSH
49189: LD_VAR 0 16
49193: PUSH
49194: LD_INT 2
49196: ARRAY
49197: PPUSH
49198: CALL_OW 111
// continue ;
49202: GO 48694
// end ; end ; r := GetDir ( tmp ) ;
49204: LD_ADDR_VAR 0 15
49208: PUSH
49209: LD_VAR 0 13
49213: PPUSH
49214: CALL_OW 254
49218: ST_TO_ADDR
// if r = 5 then
49219: LD_VAR 0 15
49223: PUSH
49224: LD_INT 5
49226: EQUAL
49227: IFFALSE 49237
// r := 0 ;
49229: LD_ADDR_VAR 0 15
49233: PUSH
49234: LD_INT 0
49236: ST_TO_ADDR
// for j = r to 5 do
49237: LD_ADDR_VAR 0 10
49241: PUSH
49242: DOUBLE
49243: LD_VAR 0 15
49247: DEC
49248: ST_TO_ADDR
49249: LD_INT 5
49251: PUSH
49252: FOR_TO
49253: IFFALSE 49367
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49255: LD_ADDR_VAR 0 11
49259: PUSH
49260: LD_VAR 0 13
49264: PPUSH
49265: CALL_OW 250
49269: PPUSH
49270: LD_VAR 0 10
49274: PPUSH
49275: LD_INT 2
49277: PPUSH
49278: CALL_OW 272
49282: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49283: LD_ADDR_VAR 0 12
49287: PUSH
49288: LD_VAR 0 13
49292: PPUSH
49293: CALL_OW 251
49297: PPUSH
49298: LD_VAR 0 10
49302: PPUSH
49303: LD_INT 2
49305: PPUSH
49306: CALL_OW 273
49310: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49311: LD_VAR 0 11
49315: PPUSH
49316: LD_VAR 0 12
49320: PPUSH
49321: CALL_OW 488
49325: PUSH
49326: LD_VAR 0 11
49330: PPUSH
49331: LD_VAR 0 12
49335: PPUSH
49336: CALL_OW 428
49340: NOT
49341: AND
49342: IFFALSE 49365
// begin ComMoveXY ( tmp , _x , _y ) ;
49344: LD_VAR 0 13
49348: PPUSH
49349: LD_VAR 0 11
49353: PPUSH
49354: LD_VAR 0 12
49358: PPUSH
49359: CALL_OW 111
// break ;
49363: GO 49367
// end ; end ;
49365: GO 49252
49367: POP
49368: POP
// end ; end ;
49369: GO 48694
49371: POP
49372: POP
// end ;
49373: LD_VAR 0 8
49377: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49378: LD_INT 0
49380: PPUSH
// result := true ;
49381: LD_ADDR_VAR 0 3
49385: PUSH
49386: LD_INT 1
49388: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49389: LD_VAR 0 2
49393: PUSH
49394: LD_INT 24
49396: DOUBLE
49397: EQUAL
49398: IFTRUE 49408
49400: LD_INT 33
49402: DOUBLE
49403: EQUAL
49404: IFTRUE 49408
49406: GO 49433
49408: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49409: LD_ADDR_VAR 0 3
49413: PUSH
49414: LD_INT 32
49416: PPUSH
49417: LD_VAR 0 1
49421: PPUSH
49422: CALL_OW 321
49426: PUSH
49427: LD_INT 2
49429: EQUAL
49430: ST_TO_ADDR
49431: GO 49753
49433: LD_INT 20
49435: DOUBLE
49436: EQUAL
49437: IFTRUE 49441
49439: GO 49466
49441: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49442: LD_ADDR_VAR 0 3
49446: PUSH
49447: LD_INT 6
49449: PPUSH
49450: LD_VAR 0 1
49454: PPUSH
49455: CALL_OW 321
49459: PUSH
49460: LD_INT 2
49462: EQUAL
49463: ST_TO_ADDR
49464: GO 49753
49466: LD_INT 22
49468: DOUBLE
49469: EQUAL
49470: IFTRUE 49480
49472: LD_INT 36
49474: DOUBLE
49475: EQUAL
49476: IFTRUE 49480
49478: GO 49505
49480: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49481: LD_ADDR_VAR 0 3
49485: PUSH
49486: LD_INT 15
49488: PPUSH
49489: LD_VAR 0 1
49493: PPUSH
49494: CALL_OW 321
49498: PUSH
49499: LD_INT 2
49501: EQUAL
49502: ST_TO_ADDR
49503: GO 49753
49505: LD_INT 30
49507: DOUBLE
49508: EQUAL
49509: IFTRUE 49513
49511: GO 49538
49513: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49514: LD_ADDR_VAR 0 3
49518: PUSH
49519: LD_INT 20
49521: PPUSH
49522: LD_VAR 0 1
49526: PPUSH
49527: CALL_OW 321
49531: PUSH
49532: LD_INT 2
49534: EQUAL
49535: ST_TO_ADDR
49536: GO 49753
49538: LD_INT 28
49540: DOUBLE
49541: EQUAL
49542: IFTRUE 49552
49544: LD_INT 21
49546: DOUBLE
49547: EQUAL
49548: IFTRUE 49552
49550: GO 49577
49552: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49553: LD_ADDR_VAR 0 3
49557: PUSH
49558: LD_INT 21
49560: PPUSH
49561: LD_VAR 0 1
49565: PPUSH
49566: CALL_OW 321
49570: PUSH
49571: LD_INT 2
49573: EQUAL
49574: ST_TO_ADDR
49575: GO 49753
49577: LD_INT 16
49579: DOUBLE
49580: EQUAL
49581: IFTRUE 49585
49583: GO 49612
49585: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49586: LD_ADDR_VAR 0 3
49590: PUSH
49591: LD_EXP 60
49595: PPUSH
49596: LD_VAR 0 1
49600: PPUSH
49601: CALL_OW 321
49605: PUSH
49606: LD_INT 2
49608: EQUAL
49609: ST_TO_ADDR
49610: GO 49753
49612: LD_INT 19
49614: DOUBLE
49615: EQUAL
49616: IFTRUE 49626
49618: LD_INT 23
49620: DOUBLE
49621: EQUAL
49622: IFTRUE 49626
49624: GO 49653
49626: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49627: LD_ADDR_VAR 0 3
49631: PUSH
49632: LD_EXP 59
49636: PPUSH
49637: LD_VAR 0 1
49641: PPUSH
49642: CALL_OW 321
49646: PUSH
49647: LD_INT 2
49649: EQUAL
49650: ST_TO_ADDR
49651: GO 49753
49653: LD_INT 17
49655: DOUBLE
49656: EQUAL
49657: IFTRUE 49661
49659: GO 49686
49661: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49662: LD_ADDR_VAR 0 3
49666: PUSH
49667: LD_INT 39
49669: PPUSH
49670: LD_VAR 0 1
49674: PPUSH
49675: CALL_OW 321
49679: PUSH
49680: LD_INT 2
49682: EQUAL
49683: ST_TO_ADDR
49684: GO 49753
49686: LD_INT 18
49688: DOUBLE
49689: EQUAL
49690: IFTRUE 49694
49692: GO 49719
49694: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49695: LD_ADDR_VAR 0 3
49699: PUSH
49700: LD_INT 40
49702: PPUSH
49703: LD_VAR 0 1
49707: PPUSH
49708: CALL_OW 321
49712: PUSH
49713: LD_INT 2
49715: EQUAL
49716: ST_TO_ADDR
49717: GO 49753
49719: LD_INT 27
49721: DOUBLE
49722: EQUAL
49723: IFTRUE 49727
49725: GO 49752
49727: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49728: LD_ADDR_VAR 0 3
49732: PUSH
49733: LD_INT 35
49735: PPUSH
49736: LD_VAR 0 1
49740: PPUSH
49741: CALL_OW 321
49745: PUSH
49746: LD_INT 2
49748: EQUAL
49749: ST_TO_ADDR
49750: GO 49753
49752: POP
// end ;
49753: LD_VAR 0 3
49757: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49758: LD_INT 0
49760: PPUSH
49761: PPUSH
49762: PPUSH
49763: PPUSH
49764: PPUSH
49765: PPUSH
49766: PPUSH
49767: PPUSH
49768: PPUSH
49769: PPUSH
49770: PPUSH
// result := false ;
49771: LD_ADDR_VAR 0 6
49775: PUSH
49776: LD_INT 0
49778: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49779: LD_VAR 0 1
49783: NOT
49784: PUSH
49785: LD_VAR 0 1
49789: PPUSH
49790: CALL_OW 266
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: IN
49805: NOT
49806: OR
49807: PUSH
49808: LD_VAR 0 2
49812: NOT
49813: OR
49814: PUSH
49815: LD_VAR 0 5
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: LD_INT 4
49834: PUSH
49835: LD_INT 5
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: IN
49846: NOT
49847: OR
49848: PUSH
49849: LD_VAR 0 3
49853: PPUSH
49854: LD_VAR 0 4
49858: PPUSH
49859: CALL_OW 488
49863: NOT
49864: OR
49865: IFFALSE 49869
// exit ;
49867: GO 50605
// side := GetSide ( depot ) ;
49869: LD_ADDR_VAR 0 9
49873: PUSH
49874: LD_VAR 0 1
49878: PPUSH
49879: CALL_OW 255
49883: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49884: LD_VAR 0 9
49888: PPUSH
49889: LD_VAR 0 2
49893: PPUSH
49894: CALL 49378 0 2
49898: NOT
49899: IFFALSE 49903
// exit ;
49901: GO 50605
// pom := GetBase ( depot ) ;
49903: LD_ADDR_VAR 0 10
49907: PUSH
49908: LD_VAR 0 1
49912: PPUSH
49913: CALL_OW 274
49917: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49918: LD_ADDR_VAR 0 11
49922: PUSH
49923: LD_VAR 0 2
49927: PPUSH
49928: LD_VAR 0 1
49932: PPUSH
49933: CALL_OW 248
49937: PPUSH
49938: CALL_OW 450
49942: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49943: LD_VAR 0 10
49947: PPUSH
49948: LD_INT 1
49950: PPUSH
49951: CALL_OW 275
49955: PUSH
49956: LD_VAR 0 11
49960: PUSH
49961: LD_INT 1
49963: ARRAY
49964: GREATEREQUAL
49965: PUSH
49966: LD_VAR 0 10
49970: PPUSH
49971: LD_INT 2
49973: PPUSH
49974: CALL_OW 275
49978: PUSH
49979: LD_VAR 0 11
49983: PUSH
49984: LD_INT 2
49986: ARRAY
49987: GREATEREQUAL
49988: AND
49989: PUSH
49990: LD_VAR 0 10
49994: PPUSH
49995: LD_INT 3
49997: PPUSH
49998: CALL_OW 275
50002: PUSH
50003: LD_VAR 0 11
50007: PUSH
50008: LD_INT 3
50010: ARRAY
50011: GREATEREQUAL
50012: AND
50013: NOT
50014: IFFALSE 50018
// exit ;
50016: GO 50605
// if GetBType ( depot ) = b_depot then
50018: LD_VAR 0 1
50022: PPUSH
50023: CALL_OW 266
50027: PUSH
50028: LD_INT 0
50030: EQUAL
50031: IFFALSE 50043
// dist := 28 else
50033: LD_ADDR_VAR 0 14
50037: PUSH
50038: LD_INT 28
50040: ST_TO_ADDR
50041: GO 50051
// dist := 36 ;
50043: LD_ADDR_VAR 0 14
50047: PUSH
50048: LD_INT 36
50050: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50051: LD_VAR 0 1
50055: PPUSH
50056: LD_VAR 0 3
50060: PPUSH
50061: LD_VAR 0 4
50065: PPUSH
50066: CALL_OW 297
50070: PUSH
50071: LD_VAR 0 14
50075: GREATER
50076: IFFALSE 50080
// exit ;
50078: GO 50605
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50080: LD_ADDR_VAR 0 12
50084: PUSH
50085: LD_VAR 0 2
50089: PPUSH
50090: LD_VAR 0 3
50094: PPUSH
50095: LD_VAR 0 4
50099: PPUSH
50100: LD_VAR 0 5
50104: PPUSH
50105: LD_VAR 0 1
50109: PPUSH
50110: CALL_OW 248
50114: PPUSH
50115: LD_INT 0
50117: PPUSH
50118: CALL 50610 0 6
50122: ST_TO_ADDR
// if not hexes then
50123: LD_VAR 0 12
50127: NOT
50128: IFFALSE 50132
// exit ;
50130: GO 50605
// hex := GetHexInfo ( x , y ) ;
50132: LD_ADDR_VAR 0 15
50136: PUSH
50137: LD_VAR 0 3
50141: PPUSH
50142: LD_VAR 0 4
50146: PPUSH
50147: CALL_OW 546
50151: ST_TO_ADDR
// if hex [ 1 ] then
50152: LD_VAR 0 15
50156: PUSH
50157: LD_INT 1
50159: ARRAY
50160: IFFALSE 50164
// exit ;
50162: GO 50605
// height := hex [ 2 ] ;
50164: LD_ADDR_VAR 0 13
50168: PUSH
50169: LD_VAR 0 15
50173: PUSH
50174: LD_INT 2
50176: ARRAY
50177: ST_TO_ADDR
// for i = 1 to hexes do
50178: LD_ADDR_VAR 0 7
50182: PUSH
50183: DOUBLE
50184: LD_INT 1
50186: DEC
50187: ST_TO_ADDR
50188: LD_VAR 0 12
50192: PUSH
50193: FOR_TO
50194: IFFALSE 50524
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50196: LD_VAR 0 12
50200: PUSH
50201: LD_VAR 0 7
50205: ARRAY
50206: PUSH
50207: LD_INT 1
50209: ARRAY
50210: PPUSH
50211: LD_VAR 0 12
50215: PUSH
50216: LD_VAR 0 7
50220: ARRAY
50221: PUSH
50222: LD_INT 2
50224: ARRAY
50225: PPUSH
50226: CALL_OW 488
50230: NOT
50231: PUSH
50232: LD_VAR 0 12
50236: PUSH
50237: LD_VAR 0 7
50241: ARRAY
50242: PUSH
50243: LD_INT 1
50245: ARRAY
50246: PPUSH
50247: LD_VAR 0 12
50251: PUSH
50252: LD_VAR 0 7
50256: ARRAY
50257: PUSH
50258: LD_INT 2
50260: ARRAY
50261: PPUSH
50262: CALL_OW 428
50266: PUSH
50267: LD_INT 0
50269: GREATER
50270: OR
50271: PUSH
50272: LD_VAR 0 12
50276: PUSH
50277: LD_VAR 0 7
50281: ARRAY
50282: PUSH
50283: LD_INT 1
50285: ARRAY
50286: PPUSH
50287: LD_VAR 0 12
50291: PUSH
50292: LD_VAR 0 7
50296: ARRAY
50297: PUSH
50298: LD_INT 2
50300: ARRAY
50301: PPUSH
50302: CALL_OW 351
50306: OR
50307: IFFALSE 50313
// exit ;
50309: POP
50310: POP
50311: GO 50605
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50313: LD_ADDR_VAR 0 8
50317: PUSH
50318: LD_VAR 0 12
50322: PUSH
50323: LD_VAR 0 7
50327: ARRAY
50328: PUSH
50329: LD_INT 1
50331: ARRAY
50332: PPUSH
50333: LD_VAR 0 12
50337: PUSH
50338: LD_VAR 0 7
50342: ARRAY
50343: PUSH
50344: LD_INT 2
50346: ARRAY
50347: PPUSH
50348: CALL_OW 546
50352: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50353: LD_VAR 0 8
50357: PUSH
50358: LD_INT 1
50360: ARRAY
50361: PUSH
50362: LD_VAR 0 8
50366: PUSH
50367: LD_INT 2
50369: ARRAY
50370: PUSH
50371: LD_VAR 0 13
50375: PUSH
50376: LD_INT 2
50378: PLUS
50379: GREATER
50380: OR
50381: PUSH
50382: LD_VAR 0 8
50386: PUSH
50387: LD_INT 2
50389: ARRAY
50390: PUSH
50391: LD_VAR 0 13
50395: PUSH
50396: LD_INT 2
50398: MINUS
50399: LESS
50400: OR
50401: PUSH
50402: LD_VAR 0 8
50406: PUSH
50407: LD_INT 3
50409: ARRAY
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: LD_INT 8
50416: PUSH
50417: LD_INT 9
50419: PUSH
50420: LD_INT 10
50422: PUSH
50423: LD_INT 11
50425: PUSH
50426: LD_INT 12
50428: PUSH
50429: LD_INT 13
50431: PUSH
50432: LD_INT 16
50434: PUSH
50435: LD_INT 17
50437: PUSH
50438: LD_INT 18
50440: PUSH
50441: LD_INT 19
50443: PUSH
50444: LD_INT 20
50446: PUSH
50447: LD_INT 21
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: IN
50465: NOT
50466: OR
50467: PUSH
50468: LD_VAR 0 8
50472: PUSH
50473: LD_INT 5
50475: ARRAY
50476: NOT
50477: OR
50478: PUSH
50479: LD_VAR 0 8
50483: PUSH
50484: LD_INT 6
50486: ARRAY
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: LD_INT 7
50496: PUSH
50497: LD_INT 9
50499: PUSH
50500: LD_INT 10
50502: PUSH
50503: LD_INT 11
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: IN
50514: NOT
50515: OR
50516: IFFALSE 50522
// exit ;
50518: POP
50519: POP
50520: GO 50605
// end ;
50522: GO 50193
50524: POP
50525: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50526: LD_VAR 0 9
50530: PPUSH
50531: LD_VAR 0 3
50535: PPUSH
50536: LD_VAR 0 4
50540: PPUSH
50541: LD_INT 20
50543: PPUSH
50544: CALL 42550 0 4
50548: PUSH
50549: LD_INT 4
50551: ARRAY
50552: IFFALSE 50556
// exit ;
50554: GO 50605
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50556: LD_VAR 0 2
50560: PUSH
50561: LD_INT 29
50563: PUSH
50564: LD_INT 30
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: IN
50571: PUSH
50572: LD_VAR 0 3
50576: PPUSH
50577: LD_VAR 0 4
50581: PPUSH
50582: LD_VAR 0 9
50586: PPUSH
50587: CALL_OW 440
50591: NOT
50592: AND
50593: IFFALSE 50597
// exit ;
50595: GO 50605
// result := true ;
50597: LD_ADDR_VAR 0 6
50601: PUSH
50602: LD_INT 1
50604: ST_TO_ADDR
// end ;
50605: LD_VAR 0 6
50609: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50610: LD_INT 0
50612: PPUSH
50613: PPUSH
50614: PPUSH
50615: PPUSH
50616: PPUSH
50617: PPUSH
50618: PPUSH
50619: PPUSH
50620: PPUSH
50621: PPUSH
50622: PPUSH
50623: PPUSH
50624: PPUSH
50625: PPUSH
50626: PPUSH
50627: PPUSH
50628: PPUSH
50629: PPUSH
50630: PPUSH
50631: PPUSH
50632: PPUSH
50633: PPUSH
50634: PPUSH
50635: PPUSH
50636: PPUSH
50637: PPUSH
50638: PPUSH
50639: PPUSH
50640: PPUSH
50641: PPUSH
50642: PPUSH
50643: PPUSH
50644: PPUSH
50645: PPUSH
50646: PPUSH
50647: PPUSH
50648: PPUSH
50649: PPUSH
50650: PPUSH
50651: PPUSH
50652: PPUSH
50653: PPUSH
50654: PPUSH
50655: PPUSH
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
50660: PPUSH
50661: PPUSH
50662: PPUSH
50663: PPUSH
50664: PPUSH
50665: PPUSH
50666: PPUSH
50667: PPUSH
50668: PPUSH
50669: PPUSH
// result = [ ] ;
50670: LD_ADDR_VAR 0 7
50674: PUSH
50675: EMPTY
50676: ST_TO_ADDR
// temp_list = [ ] ;
50677: LD_ADDR_VAR 0 9
50681: PUSH
50682: EMPTY
50683: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50684: LD_VAR 0 4
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 2
50697: PUSH
50698: LD_INT 3
50700: PUSH
50701: LD_INT 4
50703: PUSH
50704: LD_INT 5
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: IN
50715: NOT
50716: PUSH
50717: LD_VAR 0 1
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: IN
50732: PUSH
50733: LD_VAR 0 5
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 3
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: LIST
50751: IN
50752: NOT
50753: AND
50754: OR
50755: IFFALSE 50759
// exit ;
50757: GO 69150
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50759: LD_VAR 0 1
50763: PUSH
50764: LD_INT 6
50766: PUSH
50767: LD_INT 7
50769: PUSH
50770: LD_INT 8
50772: PUSH
50773: LD_INT 13
50775: PUSH
50776: LD_INT 12
50778: PUSH
50779: LD_INT 15
50781: PUSH
50782: LD_INT 11
50784: PUSH
50785: LD_INT 14
50787: PUSH
50788: LD_INT 10
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: IN
50802: IFFALSE 50812
// btype = b_lab ;
50804: LD_ADDR_VAR 0 1
50808: PUSH
50809: LD_INT 6
50811: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50812: LD_VAR 0 6
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: LIST
50830: IN
50831: NOT
50832: PUSH
50833: LD_VAR 0 1
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: LD_INT 3
50849: PUSH
50850: LD_INT 6
50852: PUSH
50853: LD_INT 36
50855: PUSH
50856: LD_INT 4
50858: PUSH
50859: LD_INT 5
50861: PUSH
50862: LD_INT 31
50864: PUSH
50865: LD_INT 32
50867: PUSH
50868: LD_INT 33
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: IN
50884: NOT
50885: PUSH
50886: LD_VAR 0 6
50890: PUSH
50891: LD_INT 1
50893: EQUAL
50894: AND
50895: OR
50896: PUSH
50897: LD_VAR 0 1
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: IN
50912: NOT
50913: PUSH
50914: LD_VAR 0 6
50918: PUSH
50919: LD_INT 2
50921: EQUAL
50922: AND
50923: OR
50924: IFFALSE 50934
// mode = 0 ;
50926: LD_ADDR_VAR 0 6
50930: PUSH
50931: LD_INT 0
50933: ST_TO_ADDR
// case mode of 0 :
50934: LD_VAR 0 6
50938: PUSH
50939: LD_INT 0
50941: DOUBLE
50942: EQUAL
50943: IFTRUE 50947
50945: GO 62400
50947: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50948: LD_ADDR_VAR 0 11
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: LD_INT 3
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 3
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51141: LD_ADDR_VAR 0 12
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 3
51298: NEG
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 3
51309: NEG
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51337: LD_ADDR_VAR 0 13
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: NEG
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: LD_INT 3
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: NEG
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 3
51508: NEG
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51536: LD_ADDR_VAR 0 14
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: LD_INT 3
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 3
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51732: LD_ADDR_VAR 0 15
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 2
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: NEG
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 3
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 3
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51925: LD_ADDR_VAR 0 16
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 3
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52118: LD_ADDR_VAR 0 17
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 2
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52348: LD_ADDR_VAR 0 18
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 2
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 2
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 2
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: NEG
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52578: LD_ADDR_VAR 0 19
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52808: LD_ADDR_VAR 0 20
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 2
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: LD_INT 2
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53038: LD_ADDR_VAR 0 21
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: NEG
53238: PUSH
53239: LD_INT 2
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53268: LD_ADDR_VAR 0 22
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53498: LD_ADDR_VAR 0 23
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: LD_INT 3
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 3
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53778: LD_ADDR_VAR 0 24
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 3
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54054: LD_ADDR_VAR 0 25
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 2
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: LD_INT 2
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 2
54241: NEG
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 3
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 3
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: LD_INT 3
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: LD_INT 3
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54328: LD_ADDR_VAR 0 26
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 2
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 3
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54604: LD_ADDR_VAR 0 27
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: NEG
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 3
54849: NEG
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54884: LD_ADDR_VAR 0 28
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 2
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: LD_INT 3
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 3
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55166: LD_ADDR_VAR 0 29
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 2
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: LD_INT 3
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 2
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 3
55410: NEG
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55445: LD_ADDR_VAR 0 30
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 2
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 3
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 3
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 3
55688: NEG
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55723: LD_ADDR_VAR 0 31
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: LD_INT 2
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: LD_INT 3
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 3
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: LD_INT 3
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 3
55966: NEG
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56001: LD_ADDR_VAR 0 32
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 3
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 3
56244: NEG
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56279: LD_ADDR_VAR 0 33
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: LD_INT 3
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: LD_INT 3
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56558: LD_ADDR_VAR 0 34
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 2
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 3
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 3
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: LD_INT 3
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 3
56803: NEG
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56838: LD_ADDR_VAR 0 35
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56950: LD_ADDR_VAR 0 36
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: LD_INT 2
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57062: LD_ADDR_VAR 0 37
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57174: LD_ADDR_VAR 0 38
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57286: LD_ADDR_VAR 0 39
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 2
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57398: LD_ADDR_VAR 0 40
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57510: LD_ADDR_VAR 0 41
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: NEG
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 3
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: LD_INT 3
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 3
57795: NEG
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 3
57807: NEG
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 3
57819: NEG
57820: PUSH
57821: LD_INT 3
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57860: LD_ADDR_VAR 0 42
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 2
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: LD_INT 2
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 2
58026: NEG
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: LD_INT 2
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: NEG
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 3
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 3
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 2
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 3
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 3
58157: NEG
58158: PUSH
58159: LD_INT 2
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 3
58169: NEG
58170: PUSH
58171: LD_INT 3
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58210: LD_ADDR_VAR 0 43
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 2
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: LD_INT 3
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 3
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 3
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 3
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 3
58506: NEG
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 3
58517: NEG
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58558: LD_ADDR_VAR 0 44
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: LD_INT 2
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 2
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 2
58713: NEG
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 2
58724: NEG
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: LD_INT 3
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: LD_INT 3
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 3
58843: NEG
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 3
58867: NEG
58868: PUSH
58869: LD_INT 3
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58908: LD_ADDR_VAR 0 45
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 2
59086: NEG
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: LD_INT 3
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 3
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 2
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 3
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 3
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 3
59217: NEG
59218: PUSH
59219: LD_INT 3
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59258: LD_ADDR_VAR 0 46
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 2
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 3
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 3
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 3
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: LD_INT 3
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: LD_INT 3
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 3
59554: NEG
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 3
59565: NEG
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59606: LD_ADDR_VAR 0 47
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 2
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 2
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59757: LD_ADDR_VAR 0 48
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59904: LD_ADDR_VAR 0 49
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 2
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: LD_INT 2
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 2
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60048: LD_ADDR_VAR 0 50
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 2
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: LD_INT 2
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60192: LD_ADDR_VAR 0 51
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 1
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60339: LD_ADDR_VAR 0 52
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 2
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60490: LD_ADDR_VAR 0 53
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: LD_INT 1
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: PUSH
60626: LD_INT 2
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: LD_INT 2
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: NEG
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: LD_INT 2
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60720: LD_ADDR_VAR 0 54
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 1
60801: NEG
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: LD_INT 2
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: LD_INT 2
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: LD_INT 2
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60950: LD_ADDR_VAR 0 55
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: LD_INT 2
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 2
61137: NEG
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 2
61149: NEG
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61180: LD_ADDR_VAR 0 56
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 2
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 2
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: LD_INT 2
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_INT 2
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: LD_INT 2
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61410: LD_ADDR_VAR 0 57
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 1
61479: NEG
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: LD_INT 2
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 2
61597: NEG
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 2
61609: NEG
61610: PUSH
61611: LD_INT 2
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61640: LD_ADDR_VAR 0 58
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 1
61721: NEG
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 2
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 2
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: LD_INT 2
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: PUSH
61786: LD_INT 2
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: LD_INT 2
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 2
61816: NEG
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 2
61827: NEG
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 2
61839: NEG
61840: PUSH
61841: LD_INT 2
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61870: LD_ADDR_VAR 0 59
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 0
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61958: LD_ADDR_VAR 0 60
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62046: LD_ADDR_VAR 0 61
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: LD_INT 1
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62134: LD_ADDR_VAR 0 62
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: LD_INT 1
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62222: LD_ADDR_VAR 0 63
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62310: LD_ADDR_VAR 0 64
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: ST_TO_ADDR
// end ; 1 :
62398: GO 68295
62400: LD_INT 1
62402: DOUBLE
62403: EQUAL
62404: IFTRUE 62408
62406: GO 65031
62408: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62409: LD_ADDR_VAR 0 11
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: LD_INT 3
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: LD_INT 3
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: LIST
62452: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62453: LD_ADDR_VAR 0 12
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: LD_INT 1
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 3
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62494: LD_ADDR_VAR 0 13
62498: PUSH
62499: LD_INT 3
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: LD_INT 3
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 2
62521: PUSH
62522: LD_INT 3
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: LIST
62533: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62534: LD_ADDR_VAR 0 14
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: LD_INT 3
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: LD_INT 3
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: LIST
62574: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62575: LD_ADDR_VAR 0 15
62579: PUSH
62580: LD_INT 2
62582: NEG
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 3
62593: NEG
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 3
62604: NEG
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: LIST
62618: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62619: LD_ADDR_VAR 0 16
62623: PUSH
62624: LD_INT 2
62626: NEG
62627: PUSH
62628: LD_INT 3
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 3
62638: NEG
62639: PUSH
62640: LD_INT 2
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 3
62650: NEG
62651: PUSH
62652: LD_INT 3
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: LIST
62664: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62665: LD_ADDR_VAR 0 17
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: LD_INT 3
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 3
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: LD_INT 2
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: LIST
62708: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62709: LD_ADDR_VAR 0 18
62713: PUSH
62714: LD_INT 2
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 3
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 3
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: LIST
62749: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62750: LD_ADDR_VAR 0 19
62754: PUSH
62755: LD_INT 3
62757: PUSH
62758: LD_INT 2
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 3
62767: PUSH
62768: LD_INT 3
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: PUSH
62778: LD_INT 3
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: LIST
62789: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62790: LD_ADDR_VAR 0 20
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: LD_INT 3
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: LD_INT 3
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 1
62817: NEG
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: LIST
62830: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62831: LD_ADDR_VAR 0 21
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 3
62849: NEG
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 3
62860: NEG
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: LIST
62874: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62875: LD_ADDR_VAR 0 22
62879: PUSH
62880: LD_INT 2
62882: NEG
62883: PUSH
62884: LD_INT 3
62886: NEG
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 3
62894: NEG
62895: PUSH
62896: LD_INT 2
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 3
62906: NEG
62907: PUSH
62908: LD_INT 3
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: LIST
62920: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62921: LD_ADDR_VAR 0 23
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: LD_INT 3
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: NEG
62940: PUSH
62941: LD_INT 4
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: LD_INT 3
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62965: LD_ADDR_VAR 0 24
62969: PUSH
62970: LD_INT 3
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 3
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 4
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: LIST
63005: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63006: LD_ADDR_VAR 0 25
63010: PUSH
63011: LD_INT 3
63013: PUSH
63014: LD_INT 3
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 4
63023: PUSH
63024: LD_INT 3
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 3
63033: PUSH
63034: LD_INT 4
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: LIST
63045: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63046: LD_ADDR_VAR 0 26
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 3
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: LD_INT 4
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 1
63073: NEG
63074: PUSH
63075: LD_INT 3
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: LIST
63086: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63087: LD_ADDR_VAR 0 27
63091: PUSH
63092: LD_INT 3
63094: NEG
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 3
63105: NEG
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 4
63116: NEG
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: LIST
63130: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63131: LD_ADDR_VAR 0 28
63135: PUSH
63136: LD_INT 3
63138: NEG
63139: PUSH
63140: LD_INT 3
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: LD_INT 4
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 4
63162: NEG
63163: PUSH
63164: LD_INT 3
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: LIST
63176: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63177: LD_ADDR_VAR 0 29
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: LD_INT 3
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: LD_INT 3
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: LD_INT 2
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: LD_INT 4
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 4
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: LD_INT 3
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: LD_INT 5
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 5
63267: NEG
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: LD_INT 4
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: LD_INT 6
63290: NEG
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 6
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: LD_INT 5
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63332: LD_ADDR_VAR 0 30
63336: PUSH
63337: LD_INT 2
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 3
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 3
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 3
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 4
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 4
63391: PUSH
63392: LD_INT 1
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 4
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 5
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 5
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 5
63432: PUSH
63433: LD_INT 1
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 6
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 6
63453: PUSH
63454: LD_INT 1
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63475: LD_ADDR_VAR 0 31
63479: PUSH
63480: LD_INT 3
63482: PUSH
63483: LD_INT 2
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 3
63492: PUSH
63493: LD_INT 3
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 2
63502: PUSH
63503: LD_INT 3
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 4
63512: PUSH
63513: LD_INT 3
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 4
63522: PUSH
63523: LD_INT 4
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 3
63532: PUSH
63533: LD_INT 4
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 5
63542: PUSH
63543: LD_INT 4
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 5
63552: PUSH
63553: LD_INT 5
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 4
63562: PUSH
63563: LD_INT 5
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 6
63572: PUSH
63573: LD_INT 5
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 6
63582: PUSH
63583: LD_INT 6
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 5
63592: PUSH
63593: LD_INT 6
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63614: LD_ADDR_VAR 0 32
63618: PUSH
63619: LD_INT 1
63621: PUSH
63622: LD_INT 3
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: LD_INT 3
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: LD_INT 2
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: LD_INT 4
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: LD_INT 4
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: NEG
63673: PUSH
63674: LD_INT 3
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: LD_INT 5
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: LD_INT 5
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: LD_INT 4
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: LD_INT 6
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: LD_INT 6
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: LD_INT 5
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63757: LD_ADDR_VAR 0 33
63761: PUSH
63762: LD_INT 2
63764: NEG
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 3
63775: NEG
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 3
63786: NEG
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 3
63798: NEG
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 4
63809: NEG
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 4
63820: NEG
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 4
63832: NEG
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 5
63843: NEG
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 5
63854: NEG
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 5
63866: NEG
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 6
63877: NEG
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 6
63888: NEG
63889: PUSH
63890: LD_INT 1
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63912: LD_ADDR_VAR 0 34
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: LD_INT 3
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 3
63931: NEG
63932: PUSH
63933: LD_INT 2
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 3
63943: NEG
63944: PUSH
63945: LD_INT 3
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 3
63955: NEG
63956: PUSH
63957: LD_INT 4
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 4
63967: NEG
63968: PUSH
63969: LD_INT 3
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 4
63979: NEG
63980: PUSH
63981: LD_INT 4
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 4
63991: NEG
63992: PUSH
63993: LD_INT 5
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 5
64003: NEG
64004: PUSH
64005: LD_INT 4
64007: NEG
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 5
64015: NEG
64016: PUSH
64017: LD_INT 5
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 5
64027: NEG
64028: PUSH
64029: LD_INT 6
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 6
64039: NEG
64040: PUSH
64041: LD_INT 5
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 6
64051: NEG
64052: PUSH
64053: LD_INT 6
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64075: LD_ADDR_VAR 0 41
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: LD_INT 2
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: LD_INT 3
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64119: LD_ADDR_VAR 0 42
64123: PUSH
64124: LD_INT 2
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 2
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 3
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: LIST
64159: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64160: LD_ADDR_VAR 0 43
64164: PUSH
64165: LD_INT 2
64167: PUSH
64168: LD_INT 2
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 3
64177: PUSH
64178: LD_INT 2
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 2
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: LIST
64199: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64200: LD_ADDR_VAR 0 44
64204: PUSH
64205: LD_INT 0
64207: PUSH
64208: LD_INT 2
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: PUSH
64218: LD_INT 3
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: LD_INT 2
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: LIST
64240: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64241: LD_ADDR_VAR 0 45
64245: PUSH
64246: LD_INT 2
64248: NEG
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 2
64259: NEG
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 3
64270: NEG
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: LIST
64284: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64285: LD_ADDR_VAR 0 46
64289: PUSH
64290: LD_INT 2
64292: NEG
64293: PUSH
64294: LD_INT 2
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 2
64304: NEG
64305: PUSH
64306: LD_INT 3
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: LD_INT 2
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: LIST
64330: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64331: LD_ADDR_VAR 0 47
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: LD_INT 3
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: LD_INT 3
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64364: LD_ADDR_VAR 0 48
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 2
64374: NEG
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 2
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64395: LD_ADDR_VAR 0 49
64399: PUSH
64400: LD_INT 3
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 3
64412: PUSH
64413: LD_INT 2
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64424: LD_ADDR_VAR 0 50
64428: PUSH
64429: LD_INT 2
64431: PUSH
64432: LD_INT 3
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: PUSH
64442: LD_INT 3
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64453: LD_ADDR_VAR 0 51
64457: PUSH
64458: LD_INT 1
64460: NEG
64461: PUSH
64462: LD_INT 2
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 2
64471: NEG
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64484: LD_ADDR_VAR 0 52
64488: PUSH
64489: LD_INT 3
64491: NEG
64492: PUSH
64493: LD_INT 1
64495: NEG
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 3
64503: NEG
64504: PUSH
64505: LD_INT 2
64507: NEG
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64517: LD_ADDR_VAR 0 53
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: LD_INT 3
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: LD_INT 3
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: LD_INT 2
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: LIST
64560: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64561: LD_ADDR_VAR 0 54
64565: PUSH
64566: LD_INT 2
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 3
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 3
64589: PUSH
64590: LD_INT 1
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: LIST
64601: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64602: LD_ADDR_VAR 0 55
64606: PUSH
64607: LD_INT 3
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 3
64619: PUSH
64620: LD_INT 3
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 2
64629: PUSH
64630: LD_INT 3
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: LIST
64641: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64642: LD_ADDR_VAR 0 56
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: LD_INT 3
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: LD_INT 3
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: NEG
64670: PUSH
64671: LD_INT 2
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: LIST
64682: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64683: LD_ADDR_VAR 0 57
64687: PUSH
64688: LD_INT 2
64690: NEG
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: NEG
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: NEG
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64727: LD_ADDR_VAR 0 58
64731: PUSH
64732: LD_INT 2
64734: NEG
64735: PUSH
64736: LD_INT 3
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 3
64746: NEG
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 3
64758: NEG
64759: PUSH
64760: LD_INT 3
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: LIST
64772: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64773: LD_ADDR_VAR 0 59
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: LD_INT 2
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 2
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 1
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: LIST
64816: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64817: LD_ADDR_VAR 0 60
64821: PUSH
64822: LD_INT 1
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 2
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 2
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: LIST
64857: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64858: LD_ADDR_VAR 0 61
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 2
64875: PUSH
64876: LD_INT 2
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: LD_INT 2
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: LIST
64897: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64898: LD_ADDR_VAR 0 62
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: LD_INT 2
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 0
64915: PUSH
64916: LD_INT 2
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 1
64925: NEG
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: LIST
64938: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64939: LD_ADDR_VAR 0 63
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: LD_INT 1
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 2
64957: NEG
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 2
64968: NEG
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64983: LD_ADDR_VAR 0 64
64987: PUSH
64988: LD_INT 1
64990: NEG
64991: PUSH
64992: LD_INT 2
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 2
65002: NEG
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 2
65014: NEG
65015: PUSH
65016: LD_INT 2
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: LIST
65028: ST_TO_ADDR
// end ; 2 :
65029: GO 68295
65031: LD_INT 2
65033: DOUBLE
65034: EQUAL
65035: IFTRUE 65039
65037: GO 68294
65039: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65040: LD_ADDR_VAR 0 29
65044: PUSH
65045: LD_INT 4
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 4
65057: PUSH
65058: LD_INT 1
65060: NEG
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 5
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 5
65078: PUSH
65079: LD_INT 1
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 4
65088: PUSH
65089: LD_INT 1
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 3
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 3
65108: PUSH
65109: LD_INT 1
65111: NEG
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 3
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 5
65130: PUSH
65131: LD_INT 2
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 3
65140: PUSH
65141: LD_INT 3
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 3
65150: PUSH
65151: LD_INT 2
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 4
65160: PUSH
65161: LD_INT 3
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 4
65170: PUSH
65171: LD_INT 4
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 3
65180: PUSH
65181: LD_INT 4
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: LD_INT 3
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 2
65200: PUSH
65201: LD_INT 2
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 4
65210: PUSH
65211: LD_INT 2
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 2
65220: PUSH
65221: LD_INT 4
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 4
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 3
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: LD_INT 4
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 1
65260: PUSH
65261: LD_INT 5
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 0
65270: PUSH
65271: LD_INT 5
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 1
65280: NEG
65281: PUSH
65282: LD_INT 4
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 1
65291: NEG
65292: PUSH
65293: LD_INT 3
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 2
65302: PUSH
65303: LD_INT 5
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 2
65312: NEG
65313: PUSH
65314: LD_INT 3
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 3
65323: NEG
65324: PUSH
65325: LD_INT 0
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 3
65334: NEG
65335: PUSH
65336: LD_INT 1
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 2
65346: NEG
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 2
65357: NEG
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 3
65368: NEG
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 4
65379: NEG
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 4
65390: NEG
65391: PUSH
65392: LD_INT 1
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 4
65402: NEG
65403: PUSH
65404: LD_INT 2
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: LD_INT 2
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 4
65425: NEG
65426: PUSH
65427: LD_INT 4
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 4
65437: NEG
65438: PUSH
65439: LD_INT 5
65441: NEG
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 3
65449: NEG
65450: PUSH
65451: LD_INT 4
65453: NEG
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 3
65461: NEG
65462: PUSH
65463: LD_INT 3
65465: NEG
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 4
65473: NEG
65474: PUSH
65475: LD_INT 3
65477: NEG
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 5
65485: NEG
65486: PUSH
65487: LD_INT 4
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 5
65497: NEG
65498: PUSH
65499: LD_INT 5
65501: NEG
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 3
65509: NEG
65510: PUSH
65511: LD_INT 5
65513: NEG
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 5
65521: NEG
65522: PUSH
65523: LD_INT 3
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65578: LD_ADDR_VAR 0 30
65582: PUSH
65583: LD_INT 4
65585: PUSH
65586: LD_INT 4
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 4
65595: PUSH
65596: LD_INT 3
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 5
65605: PUSH
65606: LD_INT 4
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 5
65615: PUSH
65616: LD_INT 5
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 4
65625: PUSH
65626: LD_INT 5
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 3
65635: PUSH
65636: LD_INT 4
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 3
65645: PUSH
65646: LD_INT 3
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 5
65655: PUSH
65656: LD_INT 3
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 3
65665: PUSH
65666: LD_INT 5
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: LD_INT 3
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: LD_INT 2
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 1
65695: PUSH
65696: LD_INT 3
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: LD_INT 4
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 0
65715: PUSH
65716: LD_INT 4
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 1
65725: NEG
65726: PUSH
65727: LD_INT 3
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: LD_INT 2
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 2
65747: PUSH
65748: LD_INT 4
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 2
65757: NEG
65758: PUSH
65759: LD_INT 2
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 4
65768: NEG
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 4
65779: NEG
65780: PUSH
65781: LD_INT 1
65783: NEG
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 3
65791: NEG
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 3
65802: NEG
65803: PUSH
65804: LD_INT 1
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 4
65813: NEG
65814: PUSH
65815: LD_INT 1
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 5
65824: NEG
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 5
65835: NEG
65836: PUSH
65837: LD_INT 1
65839: NEG
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 5
65847: NEG
65848: PUSH
65849: LD_INT 2
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 3
65859: NEG
65860: PUSH
65861: LD_INT 2
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 3
65870: NEG
65871: PUSH
65872: LD_INT 3
65874: NEG
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 3
65882: NEG
65883: PUSH
65884: LD_INT 4
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 2
65894: NEG
65895: PUSH
65896: LD_INT 3
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 2
65906: NEG
65907: PUSH
65908: LD_INT 2
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 3
65918: NEG
65919: PUSH
65920: LD_INT 2
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 4
65930: NEG
65931: PUSH
65932: LD_INT 3
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 4
65942: NEG
65943: PUSH
65944: LD_INT 4
65946: NEG
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 2
65954: NEG
65955: PUSH
65956: LD_INT 4
65958: NEG
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 4
65966: NEG
65967: PUSH
65968: LD_INT 2
65970: NEG
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: LD_INT 4
65981: NEG
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: LD_INT 5
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: LD_INT 4
66003: NEG
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 1
66011: PUSH
66012: LD_INT 3
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 0
66022: PUSH
66023: LD_INT 3
66025: NEG
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 1
66033: NEG
66034: PUSH
66035: LD_INT 4
66037: NEG
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: LD_INT 5
66049: NEG
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 2
66057: PUSH
66058: LD_INT 3
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: LD_INT 5
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66125: LD_ADDR_VAR 0 31
66129: PUSH
66130: LD_INT 0
66132: PUSH
66133: LD_INT 4
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: LD_INT 3
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: LD_INT 4
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: LD_INT 5
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_INT 5
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 1
66182: NEG
66183: PUSH
66184: LD_INT 4
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: LD_INT 3
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 2
66204: PUSH
66205: LD_INT 5
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 2
66214: NEG
66215: PUSH
66216: LD_INT 3
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 3
66225: NEG
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 3
66236: NEG
66237: PUSH
66238: LD_INT 1
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 2
66248: NEG
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 2
66259: NEG
66260: PUSH
66261: LD_INT 1
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 3
66270: NEG
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 4
66281: NEG
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 4
66292: NEG
66293: PUSH
66294: LD_INT 1
66296: NEG
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 4
66304: NEG
66305: PUSH
66306: LD_INT 2
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 2
66316: NEG
66317: PUSH
66318: LD_INT 2
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 4
66327: NEG
66328: PUSH
66329: LD_INT 4
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 4
66339: NEG
66340: PUSH
66341: LD_INT 5
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 3
66351: NEG
66352: PUSH
66353: LD_INT 4
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 3
66363: NEG
66364: PUSH
66365: LD_INT 3
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 4
66375: NEG
66376: PUSH
66377: LD_INT 3
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 5
66387: NEG
66388: PUSH
66389: LD_INT 4
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 5
66399: NEG
66400: PUSH
66401: LD_INT 5
66403: NEG
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 3
66411: NEG
66412: PUSH
66413: LD_INT 5
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 5
66423: NEG
66424: PUSH
66425: LD_INT 3
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: LD_INT 3
66438: NEG
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 0
66446: PUSH
66447: LD_INT 4
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 1
66457: PUSH
66458: LD_INT 3
66460: NEG
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 1
66468: PUSH
66469: LD_INT 2
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 0
66479: PUSH
66480: LD_INT 2
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: LD_INT 3
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 1
66502: NEG
66503: PUSH
66504: LD_INT 4
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 2
66514: PUSH
66515: LD_INT 2
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 2
66525: NEG
66526: PUSH
66527: LD_INT 4
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 4
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 4
66547: PUSH
66548: LD_INT 1
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 5
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 5
66568: PUSH
66569: LD_INT 1
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 4
66578: PUSH
66579: LD_INT 1
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 3
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 3
66598: PUSH
66599: LD_INT 1
66601: NEG
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 3
66609: PUSH
66610: LD_INT 2
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 5
66620: PUSH
66621: LD_INT 2
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66675: LD_ADDR_VAR 0 32
66679: PUSH
66680: LD_INT 4
66682: NEG
66683: PUSH
66684: LD_INT 0
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 4
66693: NEG
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 3
66705: NEG
66706: PUSH
66707: LD_INT 0
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 3
66716: NEG
66717: PUSH
66718: LD_INT 1
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 4
66727: NEG
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 5
66738: NEG
66739: PUSH
66740: LD_INT 0
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 5
66749: NEG
66750: PUSH
66751: LD_INT 1
66753: NEG
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 5
66761: NEG
66762: PUSH
66763: LD_INT 2
66765: NEG
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 3
66773: NEG
66774: PUSH
66775: LD_INT 2
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 3
66784: NEG
66785: PUSH
66786: LD_INT 3
66788: NEG
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 3
66796: NEG
66797: PUSH
66798: LD_INT 4
66800: NEG
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 2
66808: NEG
66809: PUSH
66810: LD_INT 3
66812: NEG
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 2
66820: NEG
66821: PUSH
66822: LD_INT 2
66824: NEG
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 3
66832: NEG
66833: PUSH
66834: LD_INT 2
66836: NEG
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 4
66844: NEG
66845: PUSH
66846: LD_INT 3
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 4
66856: NEG
66857: PUSH
66858: LD_INT 4
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 2
66868: NEG
66869: PUSH
66870: LD_INT 4
66872: NEG
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 4
66880: NEG
66881: PUSH
66882: LD_INT 2
66884: NEG
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 0
66892: PUSH
66893: LD_INT 4
66895: NEG
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 0
66903: PUSH
66904: LD_INT 5
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 1
66914: PUSH
66915: LD_INT 4
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: LD_INT 3
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: LD_INT 3
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 1
66947: NEG
66948: PUSH
66949: LD_INT 4
66951: NEG
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 1
66959: NEG
66960: PUSH
66961: LD_INT 5
66963: NEG
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 2
66971: PUSH
66972: LD_INT 3
66974: NEG
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 2
66982: NEG
66983: PUSH
66984: LD_INT 5
66986: NEG
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: LD_INT 1
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 4
67015: PUSH
67016: LD_INT 0
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 4
67025: PUSH
67026: LD_INT 1
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 3
67035: PUSH
67036: LD_INT 1
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 2
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 2
67055: PUSH
67056: LD_INT 1
67058: NEG
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 2
67066: PUSH
67067: LD_INT 2
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 4
67077: PUSH
67078: LD_INT 2
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 4
67087: PUSH
67088: LD_INT 4
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 4
67097: PUSH
67098: LD_INT 3
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 5
67107: PUSH
67108: LD_INT 4
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 5
67117: PUSH
67118: LD_INT 5
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 4
67127: PUSH
67128: LD_INT 5
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 3
67137: PUSH
67138: LD_INT 4
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 3
67147: PUSH
67148: LD_INT 3
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 5
67157: PUSH
67158: LD_INT 3
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 3
67167: PUSH
67168: LD_INT 5
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67222: LD_ADDR_VAR 0 33
67226: PUSH
67227: LD_INT 4
67229: NEG
67230: PUSH
67231: LD_INT 4
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 4
67241: NEG
67242: PUSH
67243: LD_INT 5
67245: NEG
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 3
67253: NEG
67254: PUSH
67255: LD_INT 4
67257: NEG
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 3
67265: NEG
67266: PUSH
67267: LD_INT 3
67269: NEG
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 4
67277: NEG
67278: PUSH
67279: LD_INT 3
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 5
67289: NEG
67290: PUSH
67291: LD_INT 4
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 5
67301: NEG
67302: PUSH
67303: LD_INT 5
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 3
67313: NEG
67314: PUSH
67315: LD_INT 5
67317: NEG
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 5
67325: NEG
67326: PUSH
67327: LD_INT 3
67329: NEG
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: LD_INT 3
67340: NEG
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: LD_INT 4
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 1
67359: PUSH
67360: LD_INT 3
67362: NEG
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 1
67370: PUSH
67371: LD_INT 2
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 0
67381: PUSH
67382: LD_INT 2
67384: NEG
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 1
67392: NEG
67393: PUSH
67394: LD_INT 3
67396: NEG
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 1
67404: NEG
67405: PUSH
67406: LD_INT 4
67408: NEG
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 2
67416: PUSH
67417: LD_INT 2
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 2
67427: NEG
67428: PUSH
67429: LD_INT 4
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 4
67439: PUSH
67440: LD_INT 0
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 4
67449: PUSH
67450: LD_INT 1
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 5
67460: PUSH
67461: LD_INT 0
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 5
67470: PUSH
67471: LD_INT 1
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 4
67480: PUSH
67481: LD_INT 1
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 3
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 3
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 3
67511: PUSH
67512: LD_INT 2
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 5
67522: PUSH
67523: LD_INT 2
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 3
67532: PUSH
67533: LD_INT 3
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 3
67542: PUSH
67543: LD_INT 2
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 4
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 4
67562: PUSH
67563: LD_INT 4
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 3
67572: PUSH
67573: LD_INT 4
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 2
67582: PUSH
67583: LD_INT 3
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 2
67592: PUSH
67593: LD_INT 2
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 4
67602: PUSH
67603: LD_INT 2
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 2
67612: PUSH
67613: LD_INT 4
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 0
67622: PUSH
67623: LD_INT 4
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 0
67632: PUSH
67633: LD_INT 3
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 1
67642: PUSH
67643: LD_INT 4
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 1
67652: PUSH
67653: LD_INT 5
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: LD_INT 5
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 1
67672: NEG
67673: PUSH
67674: LD_INT 4
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 1
67683: NEG
67684: PUSH
67685: LD_INT 3
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 2
67694: PUSH
67695: LD_INT 5
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 2
67704: NEG
67705: PUSH
67706: LD_INT 3
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67760: LD_ADDR_VAR 0 34
67764: PUSH
67765: LD_INT 0
67767: PUSH
67768: LD_INT 4
67770: NEG
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: LD_INT 5
67781: NEG
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 1
67789: PUSH
67790: LD_INT 4
67792: NEG
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: LD_INT 3
67803: NEG
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: LD_INT 3
67814: NEG
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 1
67822: NEG
67823: PUSH
67824: LD_INT 4
67826: NEG
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 1
67834: NEG
67835: PUSH
67836: LD_INT 5
67838: NEG
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 2
67846: PUSH
67847: LD_INT 3
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 2
67857: NEG
67858: PUSH
67859: LD_INT 5
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 3
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 3
67879: PUSH
67880: LD_INT 1
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 4
67890: PUSH
67891: LD_INT 0
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 4
67900: PUSH
67901: LD_INT 1
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 3
67910: PUSH
67911: LD_INT 1
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 2
67920: PUSH
67921: LD_INT 0
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 2
67930: PUSH
67931: LD_INT 1
67933: NEG
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 2
67941: PUSH
67942: LD_INT 2
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 4
67952: PUSH
67953: LD_INT 2
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 4
67962: PUSH
67963: LD_INT 4
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 4
67972: PUSH
67973: LD_INT 3
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 5
67982: PUSH
67983: LD_INT 4
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 5
67992: PUSH
67993: LD_INT 5
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 4
68002: PUSH
68003: LD_INT 5
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 3
68012: PUSH
68013: LD_INT 4
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 3
68022: PUSH
68023: LD_INT 3
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 5
68032: PUSH
68033: LD_INT 3
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 3
68042: PUSH
68043: LD_INT 5
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 0
68052: PUSH
68053: LD_INT 3
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 0
68062: PUSH
68063: LD_INT 2
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 1
68072: PUSH
68073: LD_INT 3
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 1
68082: PUSH
68083: LD_INT 4
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 0
68092: PUSH
68093: LD_INT 4
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 1
68102: NEG
68103: PUSH
68104: LD_INT 3
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 1
68113: NEG
68114: PUSH
68115: LD_INT 2
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 2
68124: PUSH
68125: LD_INT 4
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 2
68134: NEG
68135: PUSH
68136: LD_INT 2
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 4
68145: NEG
68146: PUSH
68147: LD_INT 0
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 4
68156: NEG
68157: PUSH
68158: LD_INT 1
68160: NEG
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 3
68168: NEG
68169: PUSH
68170: LD_INT 0
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 3
68179: NEG
68180: PUSH
68181: LD_INT 1
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 4
68190: NEG
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 5
68201: NEG
68202: PUSH
68203: LD_INT 0
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 5
68212: NEG
68213: PUSH
68214: LD_INT 1
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 5
68224: NEG
68225: PUSH
68226: LD_INT 2
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 3
68236: NEG
68237: PUSH
68238: LD_INT 2
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: ST_TO_ADDR
// end ; end ;
68292: GO 68295
68294: POP
// case btype of b_depot , b_warehouse :
68295: LD_VAR 0 1
68299: PUSH
68300: LD_INT 0
68302: DOUBLE
68303: EQUAL
68304: IFTRUE 68314
68306: LD_INT 1
68308: DOUBLE
68309: EQUAL
68310: IFTRUE 68314
68312: GO 68515
68314: POP
// case nation of nation_american :
68315: LD_VAR 0 5
68319: PUSH
68320: LD_INT 1
68322: DOUBLE
68323: EQUAL
68324: IFTRUE 68328
68326: GO 68384
68328: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68329: LD_ADDR_VAR 0 9
68333: PUSH
68334: LD_VAR 0 11
68338: PUSH
68339: LD_VAR 0 12
68343: PUSH
68344: LD_VAR 0 13
68348: PUSH
68349: LD_VAR 0 14
68353: PUSH
68354: LD_VAR 0 15
68358: PUSH
68359: LD_VAR 0 16
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: PUSH
68372: LD_VAR 0 4
68376: PUSH
68377: LD_INT 1
68379: PLUS
68380: ARRAY
68381: ST_TO_ADDR
68382: GO 68513
68384: LD_INT 2
68386: DOUBLE
68387: EQUAL
68388: IFTRUE 68392
68390: GO 68448
68392: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68393: LD_ADDR_VAR 0 9
68397: PUSH
68398: LD_VAR 0 17
68402: PUSH
68403: LD_VAR 0 18
68407: PUSH
68408: LD_VAR 0 19
68412: PUSH
68413: LD_VAR 0 20
68417: PUSH
68418: LD_VAR 0 21
68422: PUSH
68423: LD_VAR 0 22
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: PUSH
68436: LD_VAR 0 4
68440: PUSH
68441: LD_INT 1
68443: PLUS
68444: ARRAY
68445: ST_TO_ADDR
68446: GO 68513
68448: LD_INT 3
68450: DOUBLE
68451: EQUAL
68452: IFTRUE 68456
68454: GO 68512
68456: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68457: LD_ADDR_VAR 0 9
68461: PUSH
68462: LD_VAR 0 23
68466: PUSH
68467: LD_VAR 0 24
68471: PUSH
68472: LD_VAR 0 25
68476: PUSH
68477: LD_VAR 0 26
68481: PUSH
68482: LD_VAR 0 27
68486: PUSH
68487: LD_VAR 0 28
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: PUSH
68500: LD_VAR 0 4
68504: PUSH
68505: LD_INT 1
68507: PLUS
68508: ARRAY
68509: ST_TO_ADDR
68510: GO 68513
68512: POP
68513: GO 69068
68515: LD_INT 2
68517: DOUBLE
68518: EQUAL
68519: IFTRUE 68529
68521: LD_INT 3
68523: DOUBLE
68524: EQUAL
68525: IFTRUE 68529
68527: GO 68585
68529: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68530: LD_ADDR_VAR 0 9
68534: PUSH
68535: LD_VAR 0 29
68539: PUSH
68540: LD_VAR 0 30
68544: PUSH
68545: LD_VAR 0 31
68549: PUSH
68550: LD_VAR 0 32
68554: PUSH
68555: LD_VAR 0 33
68559: PUSH
68560: LD_VAR 0 34
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: PUSH
68573: LD_VAR 0 4
68577: PUSH
68578: LD_INT 1
68580: PLUS
68581: ARRAY
68582: ST_TO_ADDR
68583: GO 69068
68585: LD_INT 16
68587: DOUBLE
68588: EQUAL
68589: IFTRUE 68647
68591: LD_INT 17
68593: DOUBLE
68594: EQUAL
68595: IFTRUE 68647
68597: LD_INT 18
68599: DOUBLE
68600: EQUAL
68601: IFTRUE 68647
68603: LD_INT 19
68605: DOUBLE
68606: EQUAL
68607: IFTRUE 68647
68609: LD_INT 22
68611: DOUBLE
68612: EQUAL
68613: IFTRUE 68647
68615: LD_INT 20
68617: DOUBLE
68618: EQUAL
68619: IFTRUE 68647
68621: LD_INT 21
68623: DOUBLE
68624: EQUAL
68625: IFTRUE 68647
68627: LD_INT 23
68629: DOUBLE
68630: EQUAL
68631: IFTRUE 68647
68633: LD_INT 24
68635: DOUBLE
68636: EQUAL
68637: IFTRUE 68647
68639: LD_INT 25
68641: DOUBLE
68642: EQUAL
68643: IFTRUE 68647
68645: GO 68703
68647: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68648: LD_ADDR_VAR 0 9
68652: PUSH
68653: LD_VAR 0 35
68657: PUSH
68658: LD_VAR 0 36
68662: PUSH
68663: LD_VAR 0 37
68667: PUSH
68668: LD_VAR 0 38
68672: PUSH
68673: LD_VAR 0 39
68677: PUSH
68678: LD_VAR 0 40
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: PUSH
68691: LD_VAR 0 4
68695: PUSH
68696: LD_INT 1
68698: PLUS
68699: ARRAY
68700: ST_TO_ADDR
68701: GO 69068
68703: LD_INT 6
68705: DOUBLE
68706: EQUAL
68707: IFTRUE 68759
68709: LD_INT 7
68711: DOUBLE
68712: EQUAL
68713: IFTRUE 68759
68715: LD_INT 8
68717: DOUBLE
68718: EQUAL
68719: IFTRUE 68759
68721: LD_INT 13
68723: DOUBLE
68724: EQUAL
68725: IFTRUE 68759
68727: LD_INT 12
68729: DOUBLE
68730: EQUAL
68731: IFTRUE 68759
68733: LD_INT 15
68735: DOUBLE
68736: EQUAL
68737: IFTRUE 68759
68739: LD_INT 11
68741: DOUBLE
68742: EQUAL
68743: IFTRUE 68759
68745: LD_INT 14
68747: DOUBLE
68748: EQUAL
68749: IFTRUE 68759
68751: LD_INT 10
68753: DOUBLE
68754: EQUAL
68755: IFTRUE 68759
68757: GO 68815
68759: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68760: LD_ADDR_VAR 0 9
68764: PUSH
68765: LD_VAR 0 41
68769: PUSH
68770: LD_VAR 0 42
68774: PUSH
68775: LD_VAR 0 43
68779: PUSH
68780: LD_VAR 0 44
68784: PUSH
68785: LD_VAR 0 45
68789: PUSH
68790: LD_VAR 0 46
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: PUSH
68803: LD_VAR 0 4
68807: PUSH
68808: LD_INT 1
68810: PLUS
68811: ARRAY
68812: ST_TO_ADDR
68813: GO 69068
68815: LD_INT 36
68817: DOUBLE
68818: EQUAL
68819: IFTRUE 68823
68821: GO 68879
68823: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68824: LD_ADDR_VAR 0 9
68828: PUSH
68829: LD_VAR 0 47
68833: PUSH
68834: LD_VAR 0 48
68838: PUSH
68839: LD_VAR 0 49
68843: PUSH
68844: LD_VAR 0 50
68848: PUSH
68849: LD_VAR 0 51
68853: PUSH
68854: LD_VAR 0 52
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: PUSH
68867: LD_VAR 0 4
68871: PUSH
68872: LD_INT 1
68874: PLUS
68875: ARRAY
68876: ST_TO_ADDR
68877: GO 69068
68879: LD_INT 4
68881: DOUBLE
68882: EQUAL
68883: IFTRUE 68905
68885: LD_INT 5
68887: DOUBLE
68888: EQUAL
68889: IFTRUE 68905
68891: LD_INT 34
68893: DOUBLE
68894: EQUAL
68895: IFTRUE 68905
68897: LD_INT 37
68899: DOUBLE
68900: EQUAL
68901: IFTRUE 68905
68903: GO 68961
68905: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68906: LD_ADDR_VAR 0 9
68910: PUSH
68911: LD_VAR 0 53
68915: PUSH
68916: LD_VAR 0 54
68920: PUSH
68921: LD_VAR 0 55
68925: PUSH
68926: LD_VAR 0 56
68930: PUSH
68931: LD_VAR 0 57
68935: PUSH
68936: LD_VAR 0 58
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: PUSH
68949: LD_VAR 0 4
68953: PUSH
68954: LD_INT 1
68956: PLUS
68957: ARRAY
68958: ST_TO_ADDR
68959: GO 69068
68961: LD_INT 31
68963: DOUBLE
68964: EQUAL
68965: IFTRUE 69011
68967: LD_INT 32
68969: DOUBLE
68970: EQUAL
68971: IFTRUE 69011
68973: LD_INT 33
68975: DOUBLE
68976: EQUAL
68977: IFTRUE 69011
68979: LD_INT 27
68981: DOUBLE
68982: EQUAL
68983: IFTRUE 69011
68985: LD_INT 26
68987: DOUBLE
68988: EQUAL
68989: IFTRUE 69011
68991: LD_INT 28
68993: DOUBLE
68994: EQUAL
68995: IFTRUE 69011
68997: LD_INT 29
68999: DOUBLE
69000: EQUAL
69001: IFTRUE 69011
69003: LD_INT 30
69005: DOUBLE
69006: EQUAL
69007: IFTRUE 69011
69009: GO 69067
69011: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69012: LD_ADDR_VAR 0 9
69016: PUSH
69017: LD_VAR 0 59
69021: PUSH
69022: LD_VAR 0 60
69026: PUSH
69027: LD_VAR 0 61
69031: PUSH
69032: LD_VAR 0 62
69036: PUSH
69037: LD_VAR 0 63
69041: PUSH
69042: LD_VAR 0 64
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: PUSH
69055: LD_VAR 0 4
69059: PUSH
69060: LD_INT 1
69062: PLUS
69063: ARRAY
69064: ST_TO_ADDR
69065: GO 69068
69067: POP
// temp_list2 = [ ] ;
69068: LD_ADDR_VAR 0 10
69072: PUSH
69073: EMPTY
69074: ST_TO_ADDR
// for i in temp_list do
69075: LD_ADDR_VAR 0 8
69079: PUSH
69080: LD_VAR 0 9
69084: PUSH
69085: FOR_IN
69086: IFFALSE 69138
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69088: LD_ADDR_VAR 0 10
69092: PUSH
69093: LD_VAR 0 10
69097: PUSH
69098: LD_VAR 0 8
69102: PUSH
69103: LD_INT 1
69105: ARRAY
69106: PUSH
69107: LD_VAR 0 2
69111: PLUS
69112: PUSH
69113: LD_VAR 0 8
69117: PUSH
69118: LD_INT 2
69120: ARRAY
69121: PUSH
69122: LD_VAR 0 3
69126: PLUS
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: EMPTY
69133: LIST
69134: ADD
69135: ST_TO_ADDR
69136: GO 69085
69138: POP
69139: POP
// result = temp_list2 ;
69140: LD_ADDR_VAR 0 7
69144: PUSH
69145: LD_VAR 0 10
69149: ST_TO_ADDR
// end ;
69150: LD_VAR 0 7
69154: RET
// export function EnemyInRange ( unit , dist ) ; begin
69155: LD_INT 0
69157: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69158: LD_ADDR_VAR 0 3
69162: PUSH
69163: LD_VAR 0 1
69167: PPUSH
69168: CALL_OW 255
69172: PPUSH
69173: LD_VAR 0 1
69177: PPUSH
69178: CALL_OW 250
69182: PPUSH
69183: LD_VAR 0 1
69187: PPUSH
69188: CALL_OW 251
69192: PPUSH
69193: LD_VAR 0 2
69197: PPUSH
69198: CALL 42550 0 4
69202: PUSH
69203: LD_INT 4
69205: ARRAY
69206: ST_TO_ADDR
// end ;
69207: LD_VAR 0 3
69211: RET
// export function PlayerSeeMe ( unit ) ; begin
69212: LD_INT 0
69214: PPUSH
// result := See ( your_side , unit ) ;
69215: LD_ADDR_VAR 0 2
69219: PUSH
69220: LD_OWVAR 2
69224: PPUSH
69225: LD_VAR 0 1
69229: PPUSH
69230: CALL_OW 292
69234: ST_TO_ADDR
// end ;
69235: LD_VAR 0 2
69239: RET
// export function ReverseDir ( unit ) ; begin
69240: LD_INT 0
69242: PPUSH
// if not unit then
69243: LD_VAR 0 1
69247: NOT
69248: IFFALSE 69252
// exit ;
69250: GO 69275
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69252: LD_ADDR_VAR 0 2
69256: PUSH
69257: LD_VAR 0 1
69261: PPUSH
69262: CALL_OW 254
69266: PUSH
69267: LD_INT 3
69269: PLUS
69270: PUSH
69271: LD_INT 6
69273: MOD
69274: ST_TO_ADDR
// end ;
69275: LD_VAR 0 2
69279: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69280: LD_INT 0
69282: PPUSH
69283: PPUSH
69284: PPUSH
69285: PPUSH
69286: PPUSH
// if not hexes then
69287: LD_VAR 0 2
69291: NOT
69292: IFFALSE 69296
// exit ;
69294: GO 69444
// dist := 9999 ;
69296: LD_ADDR_VAR 0 5
69300: PUSH
69301: LD_INT 9999
69303: ST_TO_ADDR
// for i = 1 to hexes do
69304: LD_ADDR_VAR 0 4
69308: PUSH
69309: DOUBLE
69310: LD_INT 1
69312: DEC
69313: ST_TO_ADDR
69314: LD_VAR 0 2
69318: PUSH
69319: FOR_TO
69320: IFFALSE 69432
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69322: LD_VAR 0 1
69326: PPUSH
69327: LD_VAR 0 2
69331: PUSH
69332: LD_VAR 0 4
69336: ARRAY
69337: PUSH
69338: LD_INT 1
69340: ARRAY
69341: PPUSH
69342: LD_VAR 0 2
69346: PUSH
69347: LD_VAR 0 4
69351: ARRAY
69352: PUSH
69353: LD_INT 2
69355: ARRAY
69356: PPUSH
69357: CALL_OW 297
69361: PUSH
69362: LD_VAR 0 5
69366: LESS
69367: IFFALSE 69430
// begin hex := hexes [ i ] ;
69369: LD_ADDR_VAR 0 7
69373: PUSH
69374: LD_VAR 0 2
69378: PUSH
69379: LD_VAR 0 4
69383: ARRAY
69384: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69385: LD_ADDR_VAR 0 5
69389: PUSH
69390: LD_VAR 0 1
69394: PPUSH
69395: LD_VAR 0 2
69399: PUSH
69400: LD_VAR 0 4
69404: ARRAY
69405: PUSH
69406: LD_INT 1
69408: ARRAY
69409: PPUSH
69410: LD_VAR 0 2
69414: PUSH
69415: LD_VAR 0 4
69419: ARRAY
69420: PUSH
69421: LD_INT 2
69423: ARRAY
69424: PPUSH
69425: CALL_OW 297
69429: ST_TO_ADDR
// end ; end ;
69430: GO 69319
69432: POP
69433: POP
// result := hex ;
69434: LD_ADDR_VAR 0 3
69438: PUSH
69439: LD_VAR 0 7
69443: ST_TO_ADDR
// end ;
69444: LD_VAR 0 3
69448: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69449: LD_INT 0
69451: PPUSH
69452: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69453: LD_VAR 0 1
69457: NOT
69458: PUSH
69459: LD_VAR 0 1
69463: PUSH
69464: LD_INT 21
69466: PUSH
69467: LD_INT 2
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 23
69476: PUSH
69477: LD_INT 2
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PPUSH
69488: CALL_OW 69
69492: IN
69493: NOT
69494: OR
69495: IFFALSE 69499
// exit ;
69497: GO 69546
// for i = 1 to 3 do
69499: LD_ADDR_VAR 0 3
69503: PUSH
69504: DOUBLE
69505: LD_INT 1
69507: DEC
69508: ST_TO_ADDR
69509: LD_INT 3
69511: PUSH
69512: FOR_TO
69513: IFFALSE 69544
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69515: LD_VAR 0 1
69519: PPUSH
69520: CALL_OW 250
69524: PPUSH
69525: LD_VAR 0 1
69529: PPUSH
69530: CALL_OW 251
69534: PPUSH
69535: LD_INT 1
69537: PPUSH
69538: CALL_OW 453
69542: GO 69512
69544: POP
69545: POP
// end ;
69546: LD_VAR 0 2
69550: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69551: LD_INT 0
69553: PPUSH
69554: PPUSH
69555: PPUSH
69556: PPUSH
69557: PPUSH
69558: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69559: LD_VAR 0 1
69563: NOT
69564: PUSH
69565: LD_VAR 0 2
69569: NOT
69570: OR
69571: PUSH
69572: LD_VAR 0 1
69576: PPUSH
69577: CALL_OW 314
69581: OR
69582: IFFALSE 69586
// exit ;
69584: GO 70027
// x := GetX ( enemy_unit ) ;
69586: LD_ADDR_VAR 0 7
69590: PUSH
69591: LD_VAR 0 2
69595: PPUSH
69596: CALL_OW 250
69600: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69601: LD_ADDR_VAR 0 8
69605: PUSH
69606: LD_VAR 0 2
69610: PPUSH
69611: CALL_OW 251
69615: ST_TO_ADDR
// if not x or not y then
69616: LD_VAR 0 7
69620: NOT
69621: PUSH
69622: LD_VAR 0 8
69626: NOT
69627: OR
69628: IFFALSE 69632
// exit ;
69630: GO 70027
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69632: LD_ADDR_VAR 0 6
69636: PUSH
69637: LD_VAR 0 7
69641: PPUSH
69642: LD_INT 0
69644: PPUSH
69645: LD_INT 4
69647: PPUSH
69648: CALL_OW 272
69652: PUSH
69653: LD_VAR 0 8
69657: PPUSH
69658: LD_INT 0
69660: PPUSH
69661: LD_INT 4
69663: PPUSH
69664: CALL_OW 273
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_VAR 0 7
69677: PPUSH
69678: LD_INT 1
69680: PPUSH
69681: LD_INT 4
69683: PPUSH
69684: CALL_OW 272
69688: PUSH
69689: LD_VAR 0 8
69693: PPUSH
69694: LD_INT 1
69696: PPUSH
69697: LD_INT 4
69699: PPUSH
69700: CALL_OW 273
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_VAR 0 7
69713: PPUSH
69714: LD_INT 2
69716: PPUSH
69717: LD_INT 4
69719: PPUSH
69720: CALL_OW 272
69724: PUSH
69725: LD_VAR 0 8
69729: PPUSH
69730: LD_INT 2
69732: PPUSH
69733: LD_INT 4
69735: PPUSH
69736: CALL_OW 273
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_VAR 0 7
69749: PPUSH
69750: LD_INT 3
69752: PPUSH
69753: LD_INT 4
69755: PPUSH
69756: CALL_OW 272
69760: PUSH
69761: LD_VAR 0 8
69765: PPUSH
69766: LD_INT 3
69768: PPUSH
69769: LD_INT 4
69771: PPUSH
69772: CALL_OW 273
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_VAR 0 7
69785: PPUSH
69786: LD_INT 4
69788: PPUSH
69789: LD_INT 4
69791: PPUSH
69792: CALL_OW 272
69796: PUSH
69797: LD_VAR 0 8
69801: PPUSH
69802: LD_INT 4
69804: PPUSH
69805: LD_INT 4
69807: PPUSH
69808: CALL_OW 273
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_VAR 0 7
69821: PPUSH
69822: LD_INT 5
69824: PPUSH
69825: LD_INT 4
69827: PPUSH
69828: CALL_OW 272
69832: PUSH
69833: LD_VAR 0 8
69837: PPUSH
69838: LD_INT 5
69840: PPUSH
69841: LD_INT 4
69843: PPUSH
69844: CALL_OW 273
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: ST_TO_ADDR
// for i = tmp downto 1 do
69861: LD_ADDR_VAR 0 4
69865: PUSH
69866: DOUBLE
69867: LD_VAR 0 6
69871: INC
69872: ST_TO_ADDR
69873: LD_INT 1
69875: PUSH
69876: FOR_DOWNTO
69877: IFFALSE 69978
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69879: LD_VAR 0 6
69883: PUSH
69884: LD_VAR 0 4
69888: ARRAY
69889: PUSH
69890: LD_INT 1
69892: ARRAY
69893: PPUSH
69894: LD_VAR 0 6
69898: PUSH
69899: LD_VAR 0 4
69903: ARRAY
69904: PUSH
69905: LD_INT 2
69907: ARRAY
69908: PPUSH
69909: CALL_OW 488
69913: NOT
69914: PUSH
69915: LD_VAR 0 6
69919: PUSH
69920: LD_VAR 0 4
69924: ARRAY
69925: PUSH
69926: LD_INT 1
69928: ARRAY
69929: PPUSH
69930: LD_VAR 0 6
69934: PUSH
69935: LD_VAR 0 4
69939: ARRAY
69940: PUSH
69941: LD_INT 2
69943: ARRAY
69944: PPUSH
69945: CALL_OW 428
69949: PUSH
69950: LD_INT 0
69952: NONEQUAL
69953: OR
69954: IFFALSE 69976
// tmp := Delete ( tmp , i ) ;
69956: LD_ADDR_VAR 0 6
69960: PUSH
69961: LD_VAR 0 6
69965: PPUSH
69966: LD_VAR 0 4
69970: PPUSH
69971: CALL_OW 3
69975: ST_TO_ADDR
69976: GO 69876
69978: POP
69979: POP
// j := GetClosestHex ( unit , tmp ) ;
69980: LD_ADDR_VAR 0 5
69984: PUSH
69985: LD_VAR 0 1
69989: PPUSH
69990: LD_VAR 0 6
69994: PPUSH
69995: CALL 69280 0 2
69999: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70000: LD_VAR 0 1
70004: PPUSH
70005: LD_VAR 0 5
70009: PUSH
70010: LD_INT 1
70012: ARRAY
70013: PPUSH
70014: LD_VAR 0 5
70018: PUSH
70019: LD_INT 2
70021: ARRAY
70022: PPUSH
70023: CALL_OW 111
// end ;
70027: LD_VAR 0 3
70031: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70032: LD_INT 0
70034: PPUSH
70035: PPUSH
70036: PPUSH
// uc_side = 0 ;
70037: LD_ADDR_OWVAR 20
70041: PUSH
70042: LD_INT 0
70044: ST_TO_ADDR
// uc_nation = 0 ;
70045: LD_ADDR_OWVAR 21
70049: PUSH
70050: LD_INT 0
70052: ST_TO_ADDR
// InitHc_All ( ) ;
70053: CALL_OW 584
// InitVc ;
70057: CALL_OW 20
// if mastodonts then
70061: LD_VAR 0 6
70065: IFFALSE 70132
// for i = 1 to mastodonts do
70067: LD_ADDR_VAR 0 11
70071: PUSH
70072: DOUBLE
70073: LD_INT 1
70075: DEC
70076: ST_TO_ADDR
70077: LD_VAR 0 6
70081: PUSH
70082: FOR_TO
70083: IFFALSE 70130
// begin vc_chassis := 31 ;
70085: LD_ADDR_OWVAR 37
70089: PUSH
70090: LD_INT 31
70092: ST_TO_ADDR
// vc_control := control_rider ;
70093: LD_ADDR_OWVAR 38
70097: PUSH
70098: LD_INT 4
70100: ST_TO_ADDR
// animal := CreateVehicle ;
70101: LD_ADDR_VAR 0 12
70105: PUSH
70106: CALL_OW 45
70110: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70111: LD_VAR 0 12
70115: PPUSH
70116: LD_VAR 0 8
70120: PPUSH
70121: LD_INT 0
70123: PPUSH
70124: CALL 72320 0 3
// end ;
70128: GO 70082
70130: POP
70131: POP
// if horses then
70132: LD_VAR 0 5
70136: IFFALSE 70203
// for i = 1 to horses do
70138: LD_ADDR_VAR 0 11
70142: PUSH
70143: DOUBLE
70144: LD_INT 1
70146: DEC
70147: ST_TO_ADDR
70148: LD_VAR 0 5
70152: PUSH
70153: FOR_TO
70154: IFFALSE 70201
// begin hc_class := 21 ;
70156: LD_ADDR_OWVAR 28
70160: PUSH
70161: LD_INT 21
70163: ST_TO_ADDR
// hc_gallery :=  ;
70164: LD_ADDR_OWVAR 33
70168: PUSH
70169: LD_STRING 
70171: ST_TO_ADDR
// animal := CreateHuman ;
70172: LD_ADDR_VAR 0 12
70176: PUSH
70177: CALL_OW 44
70181: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70182: LD_VAR 0 12
70186: PPUSH
70187: LD_VAR 0 8
70191: PPUSH
70192: LD_INT 0
70194: PPUSH
70195: CALL 72320 0 3
// end ;
70199: GO 70153
70201: POP
70202: POP
// if birds then
70203: LD_VAR 0 1
70207: IFFALSE 70274
// for i = 1 to birds do
70209: LD_ADDR_VAR 0 11
70213: PUSH
70214: DOUBLE
70215: LD_INT 1
70217: DEC
70218: ST_TO_ADDR
70219: LD_VAR 0 1
70223: PUSH
70224: FOR_TO
70225: IFFALSE 70272
// begin hc_class = 18 ;
70227: LD_ADDR_OWVAR 28
70231: PUSH
70232: LD_INT 18
70234: ST_TO_ADDR
// hc_gallery =  ;
70235: LD_ADDR_OWVAR 33
70239: PUSH
70240: LD_STRING 
70242: ST_TO_ADDR
// animal := CreateHuman ;
70243: LD_ADDR_VAR 0 12
70247: PUSH
70248: CALL_OW 44
70252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70253: LD_VAR 0 12
70257: PPUSH
70258: LD_VAR 0 8
70262: PPUSH
70263: LD_INT 0
70265: PPUSH
70266: CALL 72320 0 3
// end ;
70270: GO 70224
70272: POP
70273: POP
// if tigers then
70274: LD_VAR 0 2
70278: IFFALSE 70362
// for i = 1 to tigers do
70280: LD_ADDR_VAR 0 11
70284: PUSH
70285: DOUBLE
70286: LD_INT 1
70288: DEC
70289: ST_TO_ADDR
70290: LD_VAR 0 2
70294: PUSH
70295: FOR_TO
70296: IFFALSE 70360
// begin hc_class = class_tiger ;
70298: LD_ADDR_OWVAR 28
70302: PUSH
70303: LD_INT 14
70305: ST_TO_ADDR
// hc_gallery =  ;
70306: LD_ADDR_OWVAR 33
70310: PUSH
70311: LD_STRING 
70313: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70314: LD_ADDR_OWVAR 35
70318: PUSH
70319: LD_INT 7
70321: NEG
70322: PPUSH
70323: LD_INT 7
70325: PPUSH
70326: CALL_OW 12
70330: ST_TO_ADDR
// animal := CreateHuman ;
70331: LD_ADDR_VAR 0 12
70335: PUSH
70336: CALL_OW 44
70340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70341: LD_VAR 0 12
70345: PPUSH
70346: LD_VAR 0 8
70350: PPUSH
70351: LD_INT 0
70353: PPUSH
70354: CALL 72320 0 3
// end ;
70358: GO 70295
70360: POP
70361: POP
// if apemans then
70362: LD_VAR 0 3
70366: IFFALSE 70489
// for i = 1 to apemans do
70368: LD_ADDR_VAR 0 11
70372: PUSH
70373: DOUBLE
70374: LD_INT 1
70376: DEC
70377: ST_TO_ADDR
70378: LD_VAR 0 3
70382: PUSH
70383: FOR_TO
70384: IFFALSE 70487
// begin hc_class = class_apeman ;
70386: LD_ADDR_OWVAR 28
70390: PUSH
70391: LD_INT 12
70393: ST_TO_ADDR
// hc_gallery =  ;
70394: LD_ADDR_OWVAR 33
70398: PUSH
70399: LD_STRING 
70401: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70402: LD_ADDR_OWVAR 35
70406: PUSH
70407: LD_INT 2
70409: NEG
70410: PPUSH
70411: LD_INT 2
70413: PPUSH
70414: CALL_OW 12
70418: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70419: LD_ADDR_OWVAR 31
70423: PUSH
70424: LD_INT 1
70426: PPUSH
70427: LD_INT 3
70429: PPUSH
70430: CALL_OW 12
70434: PUSH
70435: LD_INT 1
70437: PPUSH
70438: LD_INT 3
70440: PPUSH
70441: CALL_OW 12
70445: PUSH
70446: LD_INT 0
70448: PUSH
70449: LD_INT 0
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: ST_TO_ADDR
// animal := CreateHuman ;
70458: LD_ADDR_VAR 0 12
70462: PUSH
70463: CALL_OW 44
70467: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70468: LD_VAR 0 12
70472: PPUSH
70473: LD_VAR 0 8
70477: PPUSH
70478: LD_INT 0
70480: PPUSH
70481: CALL 72320 0 3
// end ;
70485: GO 70383
70487: POP
70488: POP
// if enchidnas then
70489: LD_VAR 0 4
70493: IFFALSE 70560
// for i = 1 to enchidnas do
70495: LD_ADDR_VAR 0 11
70499: PUSH
70500: DOUBLE
70501: LD_INT 1
70503: DEC
70504: ST_TO_ADDR
70505: LD_VAR 0 4
70509: PUSH
70510: FOR_TO
70511: IFFALSE 70558
// begin hc_class = 13 ;
70513: LD_ADDR_OWVAR 28
70517: PUSH
70518: LD_INT 13
70520: ST_TO_ADDR
// hc_gallery =  ;
70521: LD_ADDR_OWVAR 33
70525: PUSH
70526: LD_STRING 
70528: ST_TO_ADDR
// animal := CreateHuman ;
70529: LD_ADDR_VAR 0 12
70533: PUSH
70534: CALL_OW 44
70538: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70539: LD_VAR 0 12
70543: PPUSH
70544: LD_VAR 0 8
70548: PPUSH
70549: LD_INT 0
70551: PPUSH
70552: CALL 72320 0 3
// end ;
70556: GO 70510
70558: POP
70559: POP
// if fishes then
70560: LD_VAR 0 7
70564: IFFALSE 70631
// for i = 1 to fishes do
70566: LD_ADDR_VAR 0 11
70570: PUSH
70571: DOUBLE
70572: LD_INT 1
70574: DEC
70575: ST_TO_ADDR
70576: LD_VAR 0 7
70580: PUSH
70581: FOR_TO
70582: IFFALSE 70629
// begin hc_class = 20 ;
70584: LD_ADDR_OWVAR 28
70588: PUSH
70589: LD_INT 20
70591: ST_TO_ADDR
// hc_gallery =  ;
70592: LD_ADDR_OWVAR 33
70596: PUSH
70597: LD_STRING 
70599: ST_TO_ADDR
// animal := CreateHuman ;
70600: LD_ADDR_VAR 0 12
70604: PUSH
70605: CALL_OW 44
70609: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70610: LD_VAR 0 12
70614: PPUSH
70615: LD_VAR 0 9
70619: PPUSH
70620: LD_INT 0
70622: PPUSH
70623: CALL 72320 0 3
// end ;
70627: GO 70581
70629: POP
70630: POP
// end ;
70631: LD_VAR 0 10
70635: RET
// export function WantHeal ( sci , unit ) ; begin
70636: LD_INT 0
70638: PPUSH
// if GetTaskList ( sci ) > 0 then
70639: LD_VAR 0 1
70643: PPUSH
70644: CALL_OW 437
70648: PUSH
70649: LD_INT 0
70651: GREATER
70652: IFFALSE 70722
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70654: LD_VAR 0 1
70658: PPUSH
70659: CALL_OW 437
70663: PUSH
70664: LD_INT 1
70666: ARRAY
70667: PUSH
70668: LD_INT 1
70670: ARRAY
70671: PUSH
70672: LD_STRING l
70674: EQUAL
70675: PUSH
70676: LD_VAR 0 1
70680: PPUSH
70681: CALL_OW 437
70685: PUSH
70686: LD_INT 1
70688: ARRAY
70689: PUSH
70690: LD_INT 4
70692: ARRAY
70693: PUSH
70694: LD_VAR 0 2
70698: EQUAL
70699: AND
70700: IFFALSE 70712
// result := true else
70702: LD_ADDR_VAR 0 3
70706: PUSH
70707: LD_INT 1
70709: ST_TO_ADDR
70710: GO 70720
// result := false ;
70712: LD_ADDR_VAR 0 3
70716: PUSH
70717: LD_INT 0
70719: ST_TO_ADDR
// end else
70720: GO 70730
// result := false ;
70722: LD_ADDR_VAR 0 3
70726: PUSH
70727: LD_INT 0
70729: ST_TO_ADDR
// end ;
70730: LD_VAR 0 3
70734: RET
// export function HealTarget ( sci ) ; begin
70735: LD_INT 0
70737: PPUSH
// if not sci then
70738: LD_VAR 0 1
70742: NOT
70743: IFFALSE 70747
// exit ;
70745: GO 70812
// result := 0 ;
70747: LD_ADDR_VAR 0 2
70751: PUSH
70752: LD_INT 0
70754: ST_TO_ADDR
// if GetTaskList ( sci ) then
70755: LD_VAR 0 1
70759: PPUSH
70760: CALL_OW 437
70764: IFFALSE 70812
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70766: LD_VAR 0 1
70770: PPUSH
70771: CALL_OW 437
70775: PUSH
70776: LD_INT 1
70778: ARRAY
70779: PUSH
70780: LD_INT 1
70782: ARRAY
70783: PUSH
70784: LD_STRING l
70786: EQUAL
70787: IFFALSE 70812
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70789: LD_ADDR_VAR 0 2
70793: PUSH
70794: LD_VAR 0 1
70798: PPUSH
70799: CALL_OW 437
70803: PUSH
70804: LD_INT 1
70806: ARRAY
70807: PUSH
70808: LD_INT 4
70810: ARRAY
70811: ST_TO_ADDR
// end ;
70812: LD_VAR 0 2
70816: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70817: LD_INT 0
70819: PPUSH
70820: PPUSH
70821: PPUSH
70822: PPUSH
// if not base_units then
70823: LD_VAR 0 1
70827: NOT
70828: IFFALSE 70832
// exit ;
70830: GO 70919
// result := false ;
70832: LD_ADDR_VAR 0 2
70836: PUSH
70837: LD_INT 0
70839: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70840: LD_ADDR_VAR 0 5
70844: PUSH
70845: LD_VAR 0 1
70849: PPUSH
70850: LD_INT 21
70852: PUSH
70853: LD_INT 3
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PPUSH
70860: CALL_OW 72
70864: ST_TO_ADDR
// if not tmp then
70865: LD_VAR 0 5
70869: NOT
70870: IFFALSE 70874
// exit ;
70872: GO 70919
// for i in tmp do
70874: LD_ADDR_VAR 0 3
70878: PUSH
70879: LD_VAR 0 5
70883: PUSH
70884: FOR_IN
70885: IFFALSE 70917
// begin result := EnemyInRange ( i , 22 ) ;
70887: LD_ADDR_VAR 0 2
70891: PUSH
70892: LD_VAR 0 3
70896: PPUSH
70897: LD_INT 22
70899: PPUSH
70900: CALL 69155 0 2
70904: ST_TO_ADDR
// if result then
70905: LD_VAR 0 2
70909: IFFALSE 70915
// exit ;
70911: POP
70912: POP
70913: GO 70919
// end ;
70915: GO 70884
70917: POP
70918: POP
// end ;
70919: LD_VAR 0 2
70923: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70924: LD_INT 0
70926: PPUSH
70927: PPUSH
// if not units then
70928: LD_VAR 0 1
70932: NOT
70933: IFFALSE 70937
// exit ;
70935: GO 71007
// result := [ ] ;
70937: LD_ADDR_VAR 0 3
70941: PUSH
70942: EMPTY
70943: ST_TO_ADDR
// for i in units do
70944: LD_ADDR_VAR 0 4
70948: PUSH
70949: LD_VAR 0 1
70953: PUSH
70954: FOR_IN
70955: IFFALSE 71005
// if GetTag ( i ) = tag then
70957: LD_VAR 0 4
70961: PPUSH
70962: CALL_OW 110
70966: PUSH
70967: LD_VAR 0 2
70971: EQUAL
70972: IFFALSE 71003
// result := Insert ( result , result + 1 , i ) ;
70974: LD_ADDR_VAR 0 3
70978: PUSH
70979: LD_VAR 0 3
70983: PPUSH
70984: LD_VAR 0 3
70988: PUSH
70989: LD_INT 1
70991: PLUS
70992: PPUSH
70993: LD_VAR 0 4
70997: PPUSH
70998: CALL_OW 2
71002: ST_TO_ADDR
71003: GO 70954
71005: POP
71006: POP
// end ;
71007: LD_VAR 0 3
71011: RET
// export function IsDriver ( un ) ; begin
71012: LD_INT 0
71014: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71015: LD_ADDR_VAR 0 2
71019: PUSH
71020: LD_VAR 0 1
71024: PUSH
71025: LD_INT 55
71027: PUSH
71028: EMPTY
71029: LIST
71030: PPUSH
71031: CALL_OW 69
71035: IN
71036: ST_TO_ADDR
// end ;
71037: LD_VAR 0 2
71041: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71042: LD_INT 0
71044: PPUSH
71045: PPUSH
// list := [ ] ;
71046: LD_ADDR_VAR 0 5
71050: PUSH
71051: EMPTY
71052: ST_TO_ADDR
// case d of 0 :
71053: LD_VAR 0 3
71057: PUSH
71058: LD_INT 0
71060: DOUBLE
71061: EQUAL
71062: IFTRUE 71066
71064: GO 71199
71066: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71067: LD_ADDR_VAR 0 5
71071: PUSH
71072: LD_VAR 0 1
71076: PUSH
71077: LD_INT 4
71079: MINUS
71080: PUSH
71081: LD_VAR 0 2
71085: PUSH
71086: LD_INT 4
71088: MINUS
71089: PUSH
71090: LD_INT 2
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: LIST
71097: PUSH
71098: LD_VAR 0 1
71102: PUSH
71103: LD_INT 3
71105: MINUS
71106: PUSH
71107: LD_VAR 0 2
71111: PUSH
71112: LD_INT 1
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: LIST
71119: PUSH
71120: LD_VAR 0 1
71124: PUSH
71125: LD_INT 4
71127: PLUS
71128: PUSH
71129: LD_VAR 0 2
71133: PUSH
71134: LD_INT 4
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: LIST
71141: PUSH
71142: LD_VAR 0 1
71146: PUSH
71147: LD_INT 3
71149: PLUS
71150: PUSH
71151: LD_VAR 0 2
71155: PUSH
71156: LD_INT 3
71158: PLUS
71159: PUSH
71160: LD_INT 5
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: LIST
71167: PUSH
71168: LD_VAR 0 1
71172: PUSH
71173: LD_VAR 0 2
71177: PUSH
71178: LD_INT 4
71180: PLUS
71181: PUSH
71182: LD_INT 0
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: LIST
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: ST_TO_ADDR
// end ; 1 :
71197: GO 71897
71199: LD_INT 1
71201: DOUBLE
71202: EQUAL
71203: IFTRUE 71207
71205: GO 71340
71207: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71208: LD_ADDR_VAR 0 5
71212: PUSH
71213: LD_VAR 0 1
71217: PUSH
71218: LD_VAR 0 2
71222: PUSH
71223: LD_INT 4
71225: MINUS
71226: PUSH
71227: LD_INT 3
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: LIST
71234: PUSH
71235: LD_VAR 0 1
71239: PUSH
71240: LD_INT 3
71242: MINUS
71243: PUSH
71244: LD_VAR 0 2
71248: PUSH
71249: LD_INT 3
71251: MINUS
71252: PUSH
71253: LD_INT 2
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: LIST
71260: PUSH
71261: LD_VAR 0 1
71265: PUSH
71266: LD_INT 4
71268: MINUS
71269: PUSH
71270: LD_VAR 0 2
71274: PUSH
71275: LD_INT 1
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: LIST
71282: PUSH
71283: LD_VAR 0 1
71287: PUSH
71288: LD_VAR 0 2
71292: PUSH
71293: LD_INT 3
71295: PLUS
71296: PUSH
71297: LD_INT 0
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: LIST
71304: PUSH
71305: LD_VAR 0 1
71309: PUSH
71310: LD_INT 4
71312: PLUS
71313: PUSH
71314: LD_VAR 0 2
71318: PUSH
71319: LD_INT 4
71321: PLUS
71322: PUSH
71323: LD_INT 5
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: LIST
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: ST_TO_ADDR
// end ; 2 :
71338: GO 71897
71340: LD_INT 2
71342: DOUBLE
71343: EQUAL
71344: IFTRUE 71348
71346: GO 71477
71348: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71349: LD_ADDR_VAR 0 5
71353: PUSH
71354: LD_VAR 0 1
71358: PUSH
71359: LD_VAR 0 2
71363: PUSH
71364: LD_INT 3
71366: MINUS
71367: PUSH
71368: LD_INT 3
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: LIST
71375: PUSH
71376: LD_VAR 0 1
71380: PUSH
71381: LD_INT 4
71383: PLUS
71384: PUSH
71385: LD_VAR 0 2
71389: PUSH
71390: LD_INT 4
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: LIST
71397: PUSH
71398: LD_VAR 0 1
71402: PUSH
71403: LD_VAR 0 2
71407: PUSH
71408: LD_INT 4
71410: PLUS
71411: PUSH
71412: LD_INT 0
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: LIST
71419: PUSH
71420: LD_VAR 0 1
71424: PUSH
71425: LD_INT 3
71427: MINUS
71428: PUSH
71429: LD_VAR 0 2
71433: PUSH
71434: LD_INT 1
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: LIST
71441: PUSH
71442: LD_VAR 0 1
71446: PUSH
71447: LD_INT 4
71449: MINUS
71450: PUSH
71451: LD_VAR 0 2
71455: PUSH
71456: LD_INT 4
71458: MINUS
71459: PUSH
71460: LD_INT 2
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: LIST
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: ST_TO_ADDR
// end ; 3 :
71475: GO 71897
71477: LD_INT 3
71479: DOUBLE
71480: EQUAL
71481: IFTRUE 71485
71483: GO 71618
71485: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71486: LD_ADDR_VAR 0 5
71490: PUSH
71491: LD_VAR 0 1
71495: PUSH
71496: LD_INT 3
71498: PLUS
71499: PUSH
71500: LD_VAR 0 2
71504: PUSH
71505: LD_INT 4
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: LIST
71512: PUSH
71513: LD_VAR 0 1
71517: PUSH
71518: LD_INT 4
71520: PLUS
71521: PUSH
71522: LD_VAR 0 2
71526: PUSH
71527: LD_INT 4
71529: PLUS
71530: PUSH
71531: LD_INT 5
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: LIST
71538: PUSH
71539: LD_VAR 0 1
71543: PUSH
71544: LD_INT 4
71546: MINUS
71547: PUSH
71548: LD_VAR 0 2
71552: PUSH
71553: LD_INT 1
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: LIST
71560: PUSH
71561: LD_VAR 0 1
71565: PUSH
71566: LD_VAR 0 2
71570: PUSH
71571: LD_INT 4
71573: MINUS
71574: PUSH
71575: LD_INT 3
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: LIST
71582: PUSH
71583: LD_VAR 0 1
71587: PUSH
71588: LD_INT 3
71590: MINUS
71591: PUSH
71592: LD_VAR 0 2
71596: PUSH
71597: LD_INT 3
71599: MINUS
71600: PUSH
71601: LD_INT 2
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: LIST
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: ST_TO_ADDR
// end ; 4 :
71616: GO 71897
71618: LD_INT 4
71620: DOUBLE
71621: EQUAL
71622: IFTRUE 71626
71624: GO 71759
71626: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71627: LD_ADDR_VAR 0 5
71631: PUSH
71632: LD_VAR 0 1
71636: PUSH
71637: LD_VAR 0 2
71641: PUSH
71642: LD_INT 4
71644: PLUS
71645: PUSH
71646: LD_INT 0
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: LIST
71653: PUSH
71654: LD_VAR 0 1
71658: PUSH
71659: LD_INT 3
71661: PLUS
71662: PUSH
71663: LD_VAR 0 2
71667: PUSH
71668: LD_INT 3
71670: PLUS
71671: PUSH
71672: LD_INT 5
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: LIST
71679: PUSH
71680: LD_VAR 0 1
71684: PUSH
71685: LD_INT 4
71687: PLUS
71688: PUSH
71689: LD_VAR 0 2
71693: PUSH
71694: LD_INT 4
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: LIST
71701: PUSH
71702: LD_VAR 0 1
71706: PUSH
71707: LD_VAR 0 2
71711: PUSH
71712: LD_INT 3
71714: MINUS
71715: PUSH
71716: LD_INT 3
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: LIST
71723: PUSH
71724: LD_VAR 0 1
71728: PUSH
71729: LD_INT 4
71731: MINUS
71732: PUSH
71733: LD_VAR 0 2
71737: PUSH
71738: LD_INT 4
71740: MINUS
71741: PUSH
71742: LD_INT 2
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: LIST
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: ST_TO_ADDR
// end ; 5 :
71757: GO 71897
71759: LD_INT 5
71761: DOUBLE
71762: EQUAL
71763: IFTRUE 71767
71765: GO 71896
71767: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71768: LD_ADDR_VAR 0 5
71772: PUSH
71773: LD_VAR 0 1
71777: PUSH
71778: LD_INT 4
71780: MINUS
71781: PUSH
71782: LD_VAR 0 2
71786: PUSH
71787: LD_INT 1
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: LIST
71794: PUSH
71795: LD_VAR 0 1
71799: PUSH
71800: LD_VAR 0 2
71804: PUSH
71805: LD_INT 4
71807: MINUS
71808: PUSH
71809: LD_INT 3
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: LIST
71816: PUSH
71817: LD_VAR 0 1
71821: PUSH
71822: LD_INT 4
71824: PLUS
71825: PUSH
71826: LD_VAR 0 2
71830: PUSH
71831: LD_INT 4
71833: PLUS
71834: PUSH
71835: LD_INT 5
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: LIST
71842: PUSH
71843: LD_VAR 0 1
71847: PUSH
71848: LD_INT 3
71850: PLUS
71851: PUSH
71852: LD_VAR 0 2
71856: PUSH
71857: LD_INT 4
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: LIST
71864: PUSH
71865: LD_VAR 0 1
71869: PUSH
71870: LD_VAR 0 2
71874: PUSH
71875: LD_INT 3
71877: PLUS
71878: PUSH
71879: LD_INT 0
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: LIST
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: ST_TO_ADDR
// end ; end ;
71894: GO 71897
71896: POP
// result := list ;
71897: LD_ADDR_VAR 0 4
71901: PUSH
71902: LD_VAR 0 5
71906: ST_TO_ADDR
// end ;
71907: LD_VAR 0 4
71911: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71912: LD_INT 0
71914: PPUSH
71915: PPUSH
71916: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71917: LD_VAR 0 1
71921: NOT
71922: PUSH
71923: LD_VAR 0 2
71927: PUSH
71928: LD_INT 1
71930: PUSH
71931: LD_INT 2
71933: PUSH
71934: LD_INT 3
71936: PUSH
71937: LD_INT 4
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: IN
71946: NOT
71947: OR
71948: IFFALSE 71952
// exit ;
71950: GO 72044
// tmp := [ ] ;
71952: LD_ADDR_VAR 0 5
71956: PUSH
71957: EMPTY
71958: ST_TO_ADDR
// for i in units do
71959: LD_ADDR_VAR 0 4
71963: PUSH
71964: LD_VAR 0 1
71968: PUSH
71969: FOR_IN
71970: IFFALSE 72013
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71972: LD_ADDR_VAR 0 5
71976: PUSH
71977: LD_VAR 0 5
71981: PPUSH
71982: LD_VAR 0 5
71986: PUSH
71987: LD_INT 1
71989: PLUS
71990: PPUSH
71991: LD_VAR 0 4
71995: PPUSH
71996: LD_VAR 0 2
72000: PPUSH
72001: CALL_OW 259
72005: PPUSH
72006: CALL_OW 2
72010: ST_TO_ADDR
72011: GO 71969
72013: POP
72014: POP
// if not tmp then
72015: LD_VAR 0 5
72019: NOT
72020: IFFALSE 72024
// exit ;
72022: GO 72044
// result := SortListByListDesc ( units , tmp ) ;
72024: LD_ADDR_VAR 0 3
72028: PUSH
72029: LD_VAR 0 1
72033: PPUSH
72034: LD_VAR 0 5
72038: PPUSH
72039: CALL_OW 77
72043: ST_TO_ADDR
// end ;
72044: LD_VAR 0 3
72048: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72049: LD_INT 0
72051: PPUSH
72052: PPUSH
72053: PPUSH
// result := false ;
72054: LD_ADDR_VAR 0 3
72058: PUSH
72059: LD_INT 0
72061: ST_TO_ADDR
// x := GetX ( building ) ;
72062: LD_ADDR_VAR 0 4
72066: PUSH
72067: LD_VAR 0 2
72071: PPUSH
72072: CALL_OW 250
72076: ST_TO_ADDR
// y := GetY ( building ) ;
72077: LD_ADDR_VAR 0 5
72081: PUSH
72082: LD_VAR 0 2
72086: PPUSH
72087: CALL_OW 251
72091: ST_TO_ADDR
// if not building or not x or not y then
72092: LD_VAR 0 2
72096: NOT
72097: PUSH
72098: LD_VAR 0 4
72102: NOT
72103: OR
72104: PUSH
72105: LD_VAR 0 5
72109: NOT
72110: OR
72111: IFFALSE 72115
// exit ;
72113: GO 72207
// if GetTaskList ( unit ) then
72115: LD_VAR 0 1
72119: PPUSH
72120: CALL_OW 437
72124: IFFALSE 72207
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72126: LD_STRING e
72128: PUSH
72129: LD_VAR 0 1
72133: PPUSH
72134: CALL_OW 437
72138: PUSH
72139: LD_INT 1
72141: ARRAY
72142: PUSH
72143: LD_INT 1
72145: ARRAY
72146: EQUAL
72147: PUSH
72148: LD_VAR 0 4
72152: PUSH
72153: LD_VAR 0 1
72157: PPUSH
72158: CALL_OW 437
72162: PUSH
72163: LD_INT 1
72165: ARRAY
72166: PUSH
72167: LD_INT 2
72169: ARRAY
72170: EQUAL
72171: AND
72172: PUSH
72173: LD_VAR 0 5
72177: PUSH
72178: LD_VAR 0 1
72182: PPUSH
72183: CALL_OW 437
72187: PUSH
72188: LD_INT 1
72190: ARRAY
72191: PUSH
72192: LD_INT 3
72194: ARRAY
72195: EQUAL
72196: AND
72197: IFFALSE 72207
// result := true end ;
72199: LD_ADDR_VAR 0 3
72203: PUSH
72204: LD_INT 1
72206: ST_TO_ADDR
// end ;
72207: LD_VAR 0 3
72211: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72212: LD_INT 0
72214: PPUSH
// result := false ;
72215: LD_ADDR_VAR 0 4
72219: PUSH
72220: LD_INT 0
72222: ST_TO_ADDR
// if GetTaskList ( unit ) then
72223: LD_VAR 0 1
72227: PPUSH
72228: CALL_OW 437
72232: IFFALSE 72315
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72234: LD_STRING M
72236: PUSH
72237: LD_VAR 0 1
72241: PPUSH
72242: CALL_OW 437
72246: PUSH
72247: LD_INT 1
72249: ARRAY
72250: PUSH
72251: LD_INT 1
72253: ARRAY
72254: EQUAL
72255: PUSH
72256: LD_VAR 0 2
72260: PUSH
72261: LD_VAR 0 1
72265: PPUSH
72266: CALL_OW 437
72270: PUSH
72271: LD_INT 1
72273: ARRAY
72274: PUSH
72275: LD_INT 2
72277: ARRAY
72278: EQUAL
72279: AND
72280: PUSH
72281: LD_VAR 0 3
72285: PUSH
72286: LD_VAR 0 1
72290: PPUSH
72291: CALL_OW 437
72295: PUSH
72296: LD_INT 1
72298: ARRAY
72299: PUSH
72300: LD_INT 3
72302: ARRAY
72303: EQUAL
72304: AND
72305: IFFALSE 72315
// result := true ;
72307: LD_ADDR_VAR 0 4
72311: PUSH
72312: LD_INT 1
72314: ST_TO_ADDR
// end ; end ;
72315: LD_VAR 0 4
72319: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72320: LD_INT 0
72322: PPUSH
72323: PPUSH
72324: PPUSH
72325: PPUSH
// if not unit or not area then
72326: LD_VAR 0 1
72330: NOT
72331: PUSH
72332: LD_VAR 0 2
72336: NOT
72337: OR
72338: IFFALSE 72342
// exit ;
72340: GO 72506
// tmp := AreaToList ( area , i ) ;
72342: LD_ADDR_VAR 0 6
72346: PUSH
72347: LD_VAR 0 2
72351: PPUSH
72352: LD_VAR 0 5
72356: PPUSH
72357: CALL_OW 517
72361: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72362: LD_ADDR_VAR 0 5
72366: PUSH
72367: DOUBLE
72368: LD_INT 1
72370: DEC
72371: ST_TO_ADDR
72372: LD_VAR 0 6
72376: PUSH
72377: LD_INT 1
72379: ARRAY
72380: PUSH
72381: FOR_TO
72382: IFFALSE 72504
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72384: LD_ADDR_VAR 0 7
72388: PUSH
72389: LD_VAR 0 6
72393: PUSH
72394: LD_INT 1
72396: ARRAY
72397: PUSH
72398: LD_VAR 0 5
72402: ARRAY
72403: PUSH
72404: LD_VAR 0 6
72408: PUSH
72409: LD_INT 2
72411: ARRAY
72412: PUSH
72413: LD_VAR 0 5
72417: ARRAY
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72423: LD_VAR 0 7
72427: PUSH
72428: LD_INT 1
72430: ARRAY
72431: PPUSH
72432: LD_VAR 0 7
72436: PUSH
72437: LD_INT 2
72439: ARRAY
72440: PPUSH
72441: CALL_OW 428
72445: PUSH
72446: LD_INT 0
72448: EQUAL
72449: IFFALSE 72502
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72451: LD_VAR 0 1
72455: PPUSH
72456: LD_VAR 0 7
72460: PUSH
72461: LD_INT 1
72463: ARRAY
72464: PPUSH
72465: LD_VAR 0 7
72469: PUSH
72470: LD_INT 2
72472: ARRAY
72473: PPUSH
72474: LD_VAR 0 3
72478: PPUSH
72479: CALL_OW 48
// result := IsPlaced ( unit ) ;
72483: LD_ADDR_VAR 0 4
72487: PUSH
72488: LD_VAR 0 1
72492: PPUSH
72493: CALL_OW 305
72497: ST_TO_ADDR
// exit ;
72498: POP
72499: POP
72500: GO 72506
// end ; end ;
72502: GO 72381
72504: POP
72505: POP
// end ;
72506: LD_VAR 0 4
72510: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72511: LD_INT 0
72513: PPUSH
72514: PPUSH
72515: PPUSH
// if not side or side > 8 then
72516: LD_VAR 0 1
72520: NOT
72521: PUSH
72522: LD_VAR 0 1
72526: PUSH
72527: LD_INT 8
72529: GREATER
72530: OR
72531: IFFALSE 72535
// exit ;
72533: GO 72722
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72535: LD_ADDR_VAR 0 4
72539: PUSH
72540: LD_INT 22
72542: PUSH
72543: LD_VAR 0 1
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: PUSH
72552: LD_INT 21
72554: PUSH
72555: LD_INT 3
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: PPUSH
72566: CALL_OW 69
72570: ST_TO_ADDR
// if not tmp then
72571: LD_VAR 0 4
72575: NOT
72576: IFFALSE 72580
// exit ;
72578: GO 72722
// enable_addtolog := true ;
72580: LD_ADDR_OWVAR 81
72584: PUSH
72585: LD_INT 1
72587: ST_TO_ADDR
// AddToLog ( [ ) ;
72588: LD_STRING [
72590: PPUSH
72591: CALL_OW 561
// for i in tmp do
72595: LD_ADDR_VAR 0 3
72599: PUSH
72600: LD_VAR 0 4
72604: PUSH
72605: FOR_IN
72606: IFFALSE 72713
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72608: LD_STRING [
72610: PUSH
72611: LD_VAR 0 3
72615: PPUSH
72616: CALL_OW 266
72620: STR
72621: PUSH
72622: LD_STRING , 
72624: STR
72625: PUSH
72626: LD_VAR 0 3
72630: PPUSH
72631: CALL_OW 250
72635: STR
72636: PUSH
72637: LD_STRING , 
72639: STR
72640: PUSH
72641: LD_VAR 0 3
72645: PPUSH
72646: CALL_OW 251
72650: STR
72651: PUSH
72652: LD_STRING , 
72654: STR
72655: PUSH
72656: LD_VAR 0 3
72660: PPUSH
72661: CALL_OW 254
72665: STR
72666: PUSH
72667: LD_STRING , 
72669: STR
72670: PUSH
72671: LD_VAR 0 3
72675: PPUSH
72676: LD_INT 1
72678: PPUSH
72679: CALL_OW 268
72683: STR
72684: PUSH
72685: LD_STRING , 
72687: STR
72688: PUSH
72689: LD_VAR 0 3
72693: PPUSH
72694: LD_INT 2
72696: PPUSH
72697: CALL_OW 268
72701: STR
72702: PUSH
72703: LD_STRING ],
72705: STR
72706: PPUSH
72707: CALL_OW 561
// end ;
72711: GO 72605
72713: POP
72714: POP
// AddToLog ( ]; ) ;
72715: LD_STRING ];
72717: PPUSH
72718: CALL_OW 561
// end ;
72722: LD_VAR 0 2
72726: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72727: LD_INT 0
72729: PPUSH
72730: PPUSH
72731: PPUSH
72732: PPUSH
72733: PPUSH
// if not area or not rate or not max then
72734: LD_VAR 0 1
72738: NOT
72739: PUSH
72740: LD_VAR 0 2
72744: NOT
72745: OR
72746: PUSH
72747: LD_VAR 0 4
72751: NOT
72752: OR
72753: IFFALSE 72757
// exit ;
72755: GO 72949
// while 1 do
72757: LD_INT 1
72759: IFFALSE 72949
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72761: LD_ADDR_VAR 0 9
72765: PUSH
72766: LD_VAR 0 1
72770: PPUSH
72771: LD_INT 1
72773: PPUSH
72774: CALL_OW 287
72778: PUSH
72779: LD_INT 10
72781: MUL
72782: ST_TO_ADDR
// r := rate / 10 ;
72783: LD_ADDR_VAR 0 7
72787: PUSH
72788: LD_VAR 0 2
72792: PUSH
72793: LD_INT 10
72795: DIVREAL
72796: ST_TO_ADDR
// time := 1 1$00 ;
72797: LD_ADDR_VAR 0 8
72801: PUSH
72802: LD_INT 2100
72804: ST_TO_ADDR
// if amount < min then
72805: LD_VAR 0 9
72809: PUSH
72810: LD_VAR 0 3
72814: LESS
72815: IFFALSE 72833
// r := r * 2 else
72817: LD_ADDR_VAR 0 7
72821: PUSH
72822: LD_VAR 0 7
72826: PUSH
72827: LD_INT 2
72829: MUL
72830: ST_TO_ADDR
72831: GO 72859
// if amount > max then
72833: LD_VAR 0 9
72837: PUSH
72838: LD_VAR 0 4
72842: GREATER
72843: IFFALSE 72859
// r := r / 2 ;
72845: LD_ADDR_VAR 0 7
72849: PUSH
72850: LD_VAR 0 7
72854: PUSH
72855: LD_INT 2
72857: DIVREAL
72858: ST_TO_ADDR
// time := time / r ;
72859: LD_ADDR_VAR 0 8
72863: PUSH
72864: LD_VAR 0 8
72868: PUSH
72869: LD_VAR 0 7
72873: DIVREAL
72874: ST_TO_ADDR
// if time < 0 then
72875: LD_VAR 0 8
72879: PUSH
72880: LD_INT 0
72882: LESS
72883: IFFALSE 72900
// time := time * - 1 ;
72885: LD_ADDR_VAR 0 8
72889: PUSH
72890: LD_VAR 0 8
72894: PUSH
72895: LD_INT 1
72897: NEG
72898: MUL
72899: ST_TO_ADDR
// wait ( time ) ;
72900: LD_VAR 0 8
72904: PPUSH
72905: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72909: LD_INT 35
72911: PPUSH
72912: LD_INT 875
72914: PPUSH
72915: CALL_OW 12
72919: PPUSH
72920: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72924: LD_INT 1
72926: PPUSH
72927: LD_INT 5
72929: PPUSH
72930: CALL_OW 12
72934: PPUSH
72935: LD_VAR 0 1
72939: PPUSH
72940: LD_INT 1
72942: PPUSH
72943: CALL_OW 55
// end ;
72947: GO 72757
// end ;
72949: LD_VAR 0 5
72953: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72954: LD_INT 0
72956: PPUSH
72957: PPUSH
72958: PPUSH
72959: PPUSH
72960: PPUSH
72961: PPUSH
72962: PPUSH
72963: PPUSH
// if not turrets or not factories then
72964: LD_VAR 0 1
72968: NOT
72969: PUSH
72970: LD_VAR 0 2
72974: NOT
72975: OR
72976: IFFALSE 72980
// exit ;
72978: GO 73287
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72980: LD_ADDR_VAR 0 10
72984: PUSH
72985: LD_INT 5
72987: PUSH
72988: LD_INT 6
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 2
72997: PUSH
72998: LD_INT 4
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: LD_INT 3
73007: PUSH
73008: LD_INT 5
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: LIST
73019: PUSH
73020: LD_INT 24
73022: PUSH
73023: LD_INT 25
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 23
73032: PUSH
73033: LD_INT 27
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PUSH
73044: LD_INT 42
73046: PUSH
73047: LD_INT 43
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 44
73056: PUSH
73057: LD_INT 46
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 45
73066: PUSH
73067: LD_INT 47
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: LIST
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: LIST
73083: ST_TO_ADDR
// result := [ ] ;
73084: LD_ADDR_VAR 0 3
73088: PUSH
73089: EMPTY
73090: ST_TO_ADDR
// for i in turrets do
73091: LD_ADDR_VAR 0 4
73095: PUSH
73096: LD_VAR 0 1
73100: PUSH
73101: FOR_IN
73102: IFFALSE 73285
// begin nat := GetNation ( i ) ;
73104: LD_ADDR_VAR 0 7
73108: PUSH
73109: LD_VAR 0 4
73113: PPUSH
73114: CALL_OW 248
73118: ST_TO_ADDR
// weapon := 0 ;
73119: LD_ADDR_VAR 0 8
73123: PUSH
73124: LD_INT 0
73126: ST_TO_ADDR
// if not nat then
73127: LD_VAR 0 7
73131: NOT
73132: IFFALSE 73136
// continue ;
73134: GO 73101
// for j in list [ nat ] do
73136: LD_ADDR_VAR 0 5
73140: PUSH
73141: LD_VAR 0 10
73145: PUSH
73146: LD_VAR 0 7
73150: ARRAY
73151: PUSH
73152: FOR_IN
73153: IFFALSE 73194
// if GetBWeapon ( i ) = j [ 1 ] then
73155: LD_VAR 0 4
73159: PPUSH
73160: CALL_OW 269
73164: PUSH
73165: LD_VAR 0 5
73169: PUSH
73170: LD_INT 1
73172: ARRAY
73173: EQUAL
73174: IFFALSE 73192
// begin weapon := j [ 2 ] ;
73176: LD_ADDR_VAR 0 8
73180: PUSH
73181: LD_VAR 0 5
73185: PUSH
73186: LD_INT 2
73188: ARRAY
73189: ST_TO_ADDR
// break ;
73190: GO 73194
// end ;
73192: GO 73152
73194: POP
73195: POP
// if not weapon then
73196: LD_VAR 0 8
73200: NOT
73201: IFFALSE 73205
// continue ;
73203: GO 73101
// for k in factories do
73205: LD_ADDR_VAR 0 6
73209: PUSH
73210: LD_VAR 0 2
73214: PUSH
73215: FOR_IN
73216: IFFALSE 73281
// begin weapons := AvailableWeaponList ( k ) ;
73218: LD_ADDR_VAR 0 9
73222: PUSH
73223: LD_VAR 0 6
73227: PPUSH
73228: CALL_OW 478
73232: ST_TO_ADDR
// if not weapons then
73233: LD_VAR 0 9
73237: NOT
73238: IFFALSE 73242
// continue ;
73240: GO 73215
// if weapon in weapons then
73242: LD_VAR 0 8
73246: PUSH
73247: LD_VAR 0 9
73251: IN
73252: IFFALSE 73279
// begin result := [ i , weapon ] ;
73254: LD_ADDR_VAR 0 3
73258: PUSH
73259: LD_VAR 0 4
73263: PUSH
73264: LD_VAR 0 8
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: ST_TO_ADDR
// exit ;
73273: POP
73274: POP
73275: POP
73276: POP
73277: GO 73287
// end ; end ;
73279: GO 73215
73281: POP
73282: POP
// end ;
73283: GO 73101
73285: POP
73286: POP
// end ;
73287: LD_VAR 0 3
73291: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73292: LD_INT 0
73294: PPUSH
// if not side or side > 8 then
73295: LD_VAR 0 3
73299: NOT
73300: PUSH
73301: LD_VAR 0 3
73305: PUSH
73306: LD_INT 8
73308: GREATER
73309: OR
73310: IFFALSE 73314
// exit ;
73312: GO 73373
// if not range then
73314: LD_VAR 0 4
73318: NOT
73319: IFFALSE 73330
// range := - 12 ;
73321: LD_ADDR_VAR 0 4
73325: PUSH
73326: LD_INT 12
73328: NEG
73329: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73330: LD_VAR 0 1
73334: PPUSH
73335: LD_VAR 0 2
73339: PPUSH
73340: LD_VAR 0 3
73344: PPUSH
73345: LD_VAR 0 4
73349: PPUSH
73350: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73354: LD_VAR 0 1
73358: PPUSH
73359: LD_VAR 0 2
73363: PPUSH
73364: LD_VAR 0 3
73368: PPUSH
73369: CALL_OW 331
// end ;
73373: LD_VAR 0 5
73377: RET
// export function Video ( mode ) ; begin
73378: LD_INT 0
73380: PPUSH
// ingame_video = mode ;
73381: LD_ADDR_OWVAR 52
73385: PUSH
73386: LD_VAR 0 1
73390: ST_TO_ADDR
// interface_hidden = mode ;
73391: LD_ADDR_OWVAR 54
73395: PUSH
73396: LD_VAR 0 1
73400: ST_TO_ADDR
// end ;
73401: LD_VAR 0 2
73405: RET
// export function Join ( array , element ) ; begin
73406: LD_INT 0
73408: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73409: LD_ADDR_VAR 0 3
73413: PUSH
73414: LD_VAR 0 1
73418: PPUSH
73419: LD_VAR 0 1
73423: PUSH
73424: LD_INT 1
73426: PLUS
73427: PPUSH
73428: LD_VAR 0 2
73432: PPUSH
73433: CALL_OW 1
73437: ST_TO_ADDR
// end ;
73438: LD_VAR 0 3
73442: RET
// export function JoinUnion ( array , element ) ; begin
73443: LD_INT 0
73445: PPUSH
// result := array union element ;
73446: LD_ADDR_VAR 0 3
73450: PUSH
73451: LD_VAR 0 1
73455: PUSH
73456: LD_VAR 0 2
73460: UNION
73461: ST_TO_ADDR
// end ;
73462: LD_VAR 0 3
73466: RET
// export function GetBehemoths ( side ) ; begin
73467: LD_INT 0
73469: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73470: LD_ADDR_VAR 0 2
73474: PUSH
73475: LD_INT 22
73477: PUSH
73478: LD_VAR 0 1
73482: PUSH
73483: EMPTY
73484: LIST
73485: LIST
73486: PUSH
73487: LD_INT 31
73489: PUSH
73490: LD_INT 25
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: PPUSH
73501: CALL_OW 69
73505: ST_TO_ADDR
// end ;
73506: LD_VAR 0 2
73510: RET
// export function Shuffle ( array ) ; var i , index ; begin
73511: LD_INT 0
73513: PPUSH
73514: PPUSH
73515: PPUSH
// result := [ ] ;
73516: LD_ADDR_VAR 0 2
73520: PUSH
73521: EMPTY
73522: ST_TO_ADDR
// if not array then
73523: LD_VAR 0 1
73527: NOT
73528: IFFALSE 73532
// exit ;
73530: GO 73631
// Randomize ;
73532: CALL_OW 10
// for i = array downto 1 do
73536: LD_ADDR_VAR 0 3
73540: PUSH
73541: DOUBLE
73542: LD_VAR 0 1
73546: INC
73547: ST_TO_ADDR
73548: LD_INT 1
73550: PUSH
73551: FOR_DOWNTO
73552: IFFALSE 73629
// begin index := rand ( 1 , array ) ;
73554: LD_ADDR_VAR 0 4
73558: PUSH
73559: LD_INT 1
73561: PPUSH
73562: LD_VAR 0 1
73566: PPUSH
73567: CALL_OW 12
73571: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73572: LD_ADDR_VAR 0 2
73576: PUSH
73577: LD_VAR 0 2
73581: PPUSH
73582: LD_VAR 0 2
73586: PUSH
73587: LD_INT 1
73589: PLUS
73590: PPUSH
73591: LD_VAR 0 1
73595: PUSH
73596: LD_VAR 0 4
73600: ARRAY
73601: PPUSH
73602: CALL_OW 2
73606: ST_TO_ADDR
// array := Delete ( array , index ) ;
73607: LD_ADDR_VAR 0 1
73611: PUSH
73612: LD_VAR 0 1
73616: PPUSH
73617: LD_VAR 0 4
73621: PPUSH
73622: CALL_OW 3
73626: ST_TO_ADDR
// end ;
73627: GO 73551
73629: POP
73630: POP
// end ;
73631: LD_VAR 0 2
73635: RET
// export function GetBaseMaterials ( base ) ; begin
73636: LD_INT 0
73638: PPUSH
// result := [ 0 , 0 , 0 ] ;
73639: LD_ADDR_VAR 0 2
73643: PUSH
73644: LD_INT 0
73646: PUSH
73647: LD_INT 0
73649: PUSH
73650: LD_INT 0
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: LIST
73657: ST_TO_ADDR
// if not base then
73658: LD_VAR 0 1
73662: NOT
73663: IFFALSE 73667
// exit ;
73665: GO 73716
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73667: LD_ADDR_VAR 0 2
73671: PUSH
73672: LD_VAR 0 1
73676: PPUSH
73677: LD_INT 1
73679: PPUSH
73680: CALL_OW 275
73684: PUSH
73685: LD_VAR 0 1
73689: PPUSH
73690: LD_INT 2
73692: PPUSH
73693: CALL_OW 275
73697: PUSH
73698: LD_VAR 0 1
73702: PPUSH
73703: LD_INT 3
73705: PPUSH
73706: CALL_OW 275
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: LIST
73715: ST_TO_ADDR
// end ;
73716: LD_VAR 0 2
73720: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73721: LD_INT 0
73723: PPUSH
73724: PPUSH
// result := array ;
73725: LD_ADDR_VAR 0 3
73729: PUSH
73730: LD_VAR 0 1
73734: ST_TO_ADDR
// if size > 0 then
73735: LD_VAR 0 2
73739: PUSH
73740: LD_INT 0
73742: GREATER
73743: IFFALSE 73789
// for i := array downto size do
73745: LD_ADDR_VAR 0 4
73749: PUSH
73750: DOUBLE
73751: LD_VAR 0 1
73755: INC
73756: ST_TO_ADDR
73757: LD_VAR 0 2
73761: PUSH
73762: FOR_DOWNTO
73763: IFFALSE 73787
// result := Delete ( result , result ) ;
73765: LD_ADDR_VAR 0 3
73769: PUSH
73770: LD_VAR 0 3
73774: PPUSH
73775: LD_VAR 0 3
73779: PPUSH
73780: CALL_OW 3
73784: ST_TO_ADDR
73785: GO 73762
73787: POP
73788: POP
// end ;
73789: LD_VAR 0 3
73793: RET
// export function ComExit ( unit ) ; var tmp ; begin
73794: LD_INT 0
73796: PPUSH
73797: PPUSH
// if not IsInUnit ( unit ) then
73798: LD_VAR 0 1
73802: PPUSH
73803: CALL_OW 310
73807: NOT
73808: IFFALSE 73812
// exit ;
73810: GO 73872
// tmp := IsInUnit ( unit ) ;
73812: LD_ADDR_VAR 0 3
73816: PUSH
73817: LD_VAR 0 1
73821: PPUSH
73822: CALL_OW 310
73826: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73827: LD_VAR 0 3
73831: PPUSH
73832: CALL_OW 247
73836: PUSH
73837: LD_INT 2
73839: EQUAL
73840: IFFALSE 73853
// ComExitVehicle ( unit ) else
73842: LD_VAR 0 1
73846: PPUSH
73847: CALL_OW 121
73851: GO 73862
// ComExitBuilding ( unit ) ;
73853: LD_VAR 0 1
73857: PPUSH
73858: CALL_OW 122
// result := tmp ;
73862: LD_ADDR_VAR 0 2
73866: PUSH
73867: LD_VAR 0 3
73871: ST_TO_ADDR
// end ;
73872: LD_VAR 0 2
73876: RET
// export function ComExitAll ( units ) ; var i ; begin
73877: LD_INT 0
73879: PPUSH
73880: PPUSH
// if not units then
73881: LD_VAR 0 1
73885: NOT
73886: IFFALSE 73890
// exit ;
73888: GO 73916
// for i in units do
73890: LD_ADDR_VAR 0 3
73894: PUSH
73895: LD_VAR 0 1
73899: PUSH
73900: FOR_IN
73901: IFFALSE 73914
// ComExit ( i ) ;
73903: LD_VAR 0 3
73907: PPUSH
73908: CALL 73794 0 1
73912: GO 73900
73914: POP
73915: POP
// end ;
73916: LD_VAR 0 2
73920: RET
// export function ResetHc ; begin
73921: LD_INT 0
73923: PPUSH
// InitHc ;
73924: CALL_OW 19
// hc_importance := 0 ;
73928: LD_ADDR_OWVAR 32
73932: PUSH
73933: LD_INT 0
73935: ST_TO_ADDR
// end ;
73936: LD_VAR 0 1
73940: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73941: LD_INT 0
73943: PPUSH
73944: PPUSH
73945: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73946: LD_ADDR_VAR 0 6
73950: PUSH
73951: LD_VAR 0 1
73955: PUSH
73956: LD_VAR 0 3
73960: PLUS
73961: PUSH
73962: LD_INT 2
73964: DIV
73965: ST_TO_ADDR
// if _x < 0 then
73966: LD_VAR 0 6
73970: PUSH
73971: LD_INT 0
73973: LESS
73974: IFFALSE 73991
// _x := _x * - 1 ;
73976: LD_ADDR_VAR 0 6
73980: PUSH
73981: LD_VAR 0 6
73985: PUSH
73986: LD_INT 1
73988: NEG
73989: MUL
73990: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73991: LD_ADDR_VAR 0 7
73995: PUSH
73996: LD_VAR 0 2
74000: PUSH
74001: LD_VAR 0 4
74005: PLUS
74006: PUSH
74007: LD_INT 2
74009: DIV
74010: ST_TO_ADDR
// if _y < 0 then
74011: LD_VAR 0 7
74015: PUSH
74016: LD_INT 0
74018: LESS
74019: IFFALSE 74036
// _y := _y * - 1 ;
74021: LD_ADDR_VAR 0 7
74025: PUSH
74026: LD_VAR 0 7
74030: PUSH
74031: LD_INT 1
74033: NEG
74034: MUL
74035: ST_TO_ADDR
// result := [ _x , _y ] ;
74036: LD_ADDR_VAR 0 5
74040: PUSH
74041: LD_VAR 0 6
74045: PUSH
74046: LD_VAR 0 7
74050: PUSH
74051: EMPTY
74052: LIST
74053: LIST
74054: ST_TO_ADDR
// end ;
74055: LD_VAR 0 5
74059: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74060: LD_INT 0
74062: PPUSH
74063: PPUSH
74064: PPUSH
74065: PPUSH
// task := GetTaskList ( unit ) ;
74066: LD_ADDR_VAR 0 7
74070: PUSH
74071: LD_VAR 0 1
74075: PPUSH
74076: CALL_OW 437
74080: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74081: LD_VAR 0 7
74085: NOT
74086: PUSH
74087: LD_VAR 0 1
74091: PPUSH
74092: LD_VAR 0 2
74096: PPUSH
74097: CALL_OW 308
74101: NOT
74102: AND
74103: IFFALSE 74107
// exit ;
74105: GO 74225
// if IsInArea ( unit , area ) then
74107: LD_VAR 0 1
74111: PPUSH
74112: LD_VAR 0 2
74116: PPUSH
74117: CALL_OW 308
74121: IFFALSE 74139
// begin ComMoveToArea ( unit , goAway ) ;
74123: LD_VAR 0 1
74127: PPUSH
74128: LD_VAR 0 3
74132: PPUSH
74133: CALL_OW 113
// exit ;
74137: GO 74225
// end ; if task [ 1 ] [ 1 ] <> M then
74139: LD_VAR 0 7
74143: PUSH
74144: LD_INT 1
74146: ARRAY
74147: PUSH
74148: LD_INT 1
74150: ARRAY
74151: PUSH
74152: LD_STRING M
74154: NONEQUAL
74155: IFFALSE 74159
// exit ;
74157: GO 74225
// x := task [ 1 ] [ 2 ] ;
74159: LD_ADDR_VAR 0 5
74163: PUSH
74164: LD_VAR 0 7
74168: PUSH
74169: LD_INT 1
74171: ARRAY
74172: PUSH
74173: LD_INT 2
74175: ARRAY
74176: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74177: LD_ADDR_VAR 0 6
74181: PUSH
74182: LD_VAR 0 7
74186: PUSH
74187: LD_INT 1
74189: ARRAY
74190: PUSH
74191: LD_INT 3
74193: ARRAY
74194: ST_TO_ADDR
// if InArea ( x , y , area ) then
74195: LD_VAR 0 5
74199: PPUSH
74200: LD_VAR 0 6
74204: PPUSH
74205: LD_VAR 0 2
74209: PPUSH
74210: CALL_OW 309
74214: IFFALSE 74225
// ComStop ( unit ) ;
74216: LD_VAR 0 1
74220: PPUSH
74221: CALL_OW 141
// end ;
74225: LD_VAR 0 4
74229: RET
// export function Abs ( value ) ; begin
74230: LD_INT 0
74232: PPUSH
// result := value ;
74233: LD_ADDR_VAR 0 2
74237: PUSH
74238: LD_VAR 0 1
74242: ST_TO_ADDR
// if value < 0 then
74243: LD_VAR 0 1
74247: PUSH
74248: LD_INT 0
74250: LESS
74251: IFFALSE 74268
// result := value * - 1 ;
74253: LD_ADDR_VAR 0 2
74257: PUSH
74258: LD_VAR 0 1
74262: PUSH
74263: LD_INT 1
74265: NEG
74266: MUL
74267: ST_TO_ADDR
// end ;
74268: LD_VAR 0 2
74272: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74273: LD_INT 0
74275: PPUSH
74276: PPUSH
74277: PPUSH
74278: PPUSH
74279: PPUSH
74280: PPUSH
74281: PPUSH
74282: PPUSH
// if not unit or not building then
74283: LD_VAR 0 1
74287: NOT
74288: PUSH
74289: LD_VAR 0 2
74293: NOT
74294: OR
74295: IFFALSE 74299
// exit ;
74297: GO 74525
// x := GetX ( building ) ;
74299: LD_ADDR_VAR 0 4
74303: PUSH
74304: LD_VAR 0 2
74308: PPUSH
74309: CALL_OW 250
74313: ST_TO_ADDR
// y := GetY ( building ) ;
74314: LD_ADDR_VAR 0 6
74318: PUSH
74319: LD_VAR 0 2
74323: PPUSH
74324: CALL_OW 251
74328: ST_TO_ADDR
// d := GetDir ( building ) ;
74329: LD_ADDR_VAR 0 8
74333: PUSH
74334: LD_VAR 0 2
74338: PPUSH
74339: CALL_OW 254
74343: ST_TO_ADDR
// r := 4 ;
74344: LD_ADDR_VAR 0 9
74348: PUSH
74349: LD_INT 4
74351: ST_TO_ADDR
// for i := 1 to 5 do
74352: LD_ADDR_VAR 0 10
74356: PUSH
74357: DOUBLE
74358: LD_INT 1
74360: DEC
74361: ST_TO_ADDR
74362: LD_INT 5
74364: PUSH
74365: FOR_TO
74366: IFFALSE 74523
// begin _x := ShiftX ( x , d , r + i ) ;
74368: LD_ADDR_VAR 0 5
74372: PUSH
74373: LD_VAR 0 4
74377: PPUSH
74378: LD_VAR 0 8
74382: PPUSH
74383: LD_VAR 0 9
74387: PUSH
74388: LD_VAR 0 10
74392: PLUS
74393: PPUSH
74394: CALL_OW 272
74398: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74399: LD_ADDR_VAR 0 7
74403: PUSH
74404: LD_VAR 0 6
74408: PPUSH
74409: LD_VAR 0 8
74413: PPUSH
74414: LD_VAR 0 9
74418: PUSH
74419: LD_VAR 0 10
74423: PLUS
74424: PPUSH
74425: CALL_OW 273
74429: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74430: LD_VAR 0 5
74434: PPUSH
74435: LD_VAR 0 7
74439: PPUSH
74440: CALL_OW 488
74444: PUSH
74445: LD_VAR 0 5
74449: PPUSH
74450: LD_VAR 0 7
74454: PPUSH
74455: CALL_OW 428
74459: PPUSH
74460: CALL_OW 247
74464: PUSH
74465: LD_INT 3
74467: PUSH
74468: LD_INT 2
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: IN
74475: NOT
74476: AND
74477: IFFALSE 74521
// begin ComMoveXY ( unit , _x , _y ) ;
74479: LD_VAR 0 1
74483: PPUSH
74484: LD_VAR 0 5
74488: PPUSH
74489: LD_VAR 0 7
74493: PPUSH
74494: CALL_OW 111
// result := [ _x , _y ] ;
74498: LD_ADDR_VAR 0 3
74502: PUSH
74503: LD_VAR 0 5
74507: PUSH
74508: LD_VAR 0 7
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: ST_TO_ADDR
// exit ;
74517: POP
74518: POP
74519: GO 74525
// end ; end ;
74521: GO 74365
74523: POP
74524: POP
// end ;
74525: LD_VAR 0 3
74529: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74530: LD_INT 0
74532: PPUSH
74533: PPUSH
74534: PPUSH
// result := 0 ;
74535: LD_ADDR_VAR 0 3
74539: PUSH
74540: LD_INT 0
74542: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74543: LD_VAR 0 1
74547: PUSH
74548: LD_INT 0
74550: LESS
74551: PUSH
74552: LD_VAR 0 1
74556: PUSH
74557: LD_INT 8
74559: GREATER
74560: OR
74561: PUSH
74562: LD_VAR 0 2
74566: PUSH
74567: LD_INT 0
74569: LESS
74570: OR
74571: PUSH
74572: LD_VAR 0 2
74576: PUSH
74577: LD_INT 8
74579: GREATER
74580: OR
74581: IFFALSE 74585
// exit ;
74583: GO 74660
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74585: LD_ADDR_VAR 0 4
74589: PUSH
74590: LD_INT 22
74592: PUSH
74593: LD_VAR 0 2
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PPUSH
74602: CALL_OW 69
74606: PUSH
74607: FOR_IN
74608: IFFALSE 74658
// begin un := UnitShoot ( i ) ;
74610: LD_ADDR_VAR 0 5
74614: PUSH
74615: LD_VAR 0 4
74619: PPUSH
74620: CALL_OW 504
74624: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74625: LD_VAR 0 5
74629: PPUSH
74630: CALL_OW 255
74634: PUSH
74635: LD_VAR 0 1
74639: EQUAL
74640: IFFALSE 74656
// begin result := un ;
74642: LD_ADDR_VAR 0 3
74646: PUSH
74647: LD_VAR 0 5
74651: ST_TO_ADDR
// exit ;
74652: POP
74653: POP
74654: GO 74660
// end ; end ;
74656: GO 74607
74658: POP
74659: POP
// end ;
74660: LD_VAR 0 3
74664: RET
// export function GetCargoBay ( units ) ; begin
74665: LD_INT 0
74667: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74668: LD_ADDR_VAR 0 2
74672: PUSH
74673: LD_VAR 0 1
74677: PPUSH
74678: LD_INT 2
74680: PUSH
74681: LD_INT 34
74683: PUSH
74684: LD_INT 12
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: LD_INT 34
74693: PUSH
74694: LD_INT 51
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: PUSH
74701: LD_INT 34
74703: PUSH
74704: LD_INT 32
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: LD_INT 34
74713: PUSH
74714: LD_EXP 49
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: LIST
74727: LIST
74728: LIST
74729: PPUSH
74730: CALL_OW 72
74734: ST_TO_ADDR
// end ;
74735: LD_VAR 0 2
74739: RET
// export function Negate ( value ) ; begin
74740: LD_INT 0
74742: PPUSH
// result := not value ;
74743: LD_ADDR_VAR 0 2
74747: PUSH
74748: LD_VAR 0 1
74752: NOT
74753: ST_TO_ADDR
// end ;
74754: LD_VAR 0 2
74758: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74759: LD_INT 0
74761: PPUSH
// if x1 = x2 then
74762: LD_VAR 0 1
74766: PUSH
74767: LD_VAR 0 3
74771: EQUAL
74772: IFFALSE 74806
// begin if y1 > y2 then
74774: LD_VAR 0 2
74778: PUSH
74779: LD_VAR 0 4
74783: GREATER
74784: IFFALSE 74796
// result := 0 else
74786: LD_ADDR_VAR 0 5
74790: PUSH
74791: LD_INT 0
74793: ST_TO_ADDR
74794: GO 74804
// result := 3 ;
74796: LD_ADDR_VAR 0 5
74800: PUSH
74801: LD_INT 3
74803: ST_TO_ADDR
// exit ;
74804: GO 74892
// end ; if y1 = y2 then
74806: LD_VAR 0 2
74810: PUSH
74811: LD_VAR 0 4
74815: EQUAL
74816: IFFALSE 74850
// begin if x1 > x2 then
74818: LD_VAR 0 1
74822: PUSH
74823: LD_VAR 0 3
74827: GREATER
74828: IFFALSE 74840
// result := 1 else
74830: LD_ADDR_VAR 0 5
74834: PUSH
74835: LD_INT 1
74837: ST_TO_ADDR
74838: GO 74848
// result := 4 ;
74840: LD_ADDR_VAR 0 5
74844: PUSH
74845: LD_INT 4
74847: ST_TO_ADDR
// exit ;
74848: GO 74892
// end ; if x1 > x2 and y1 > y2 then
74850: LD_VAR 0 1
74854: PUSH
74855: LD_VAR 0 3
74859: GREATER
74860: PUSH
74861: LD_VAR 0 2
74865: PUSH
74866: LD_VAR 0 4
74870: GREATER
74871: AND
74872: IFFALSE 74884
// result := 2 else
74874: LD_ADDR_VAR 0 5
74878: PUSH
74879: LD_INT 2
74881: ST_TO_ADDR
74882: GO 74892
// result := 5 ;
74884: LD_ADDR_VAR 0 5
74888: PUSH
74889: LD_INT 5
74891: ST_TO_ADDR
// end ;
74892: LD_VAR 0 5
74896: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74897: LD_INT 0
74899: PPUSH
74900: PPUSH
// if not driver or not IsInUnit ( driver ) then
74901: LD_VAR 0 1
74905: NOT
74906: PUSH
74907: LD_VAR 0 1
74911: PPUSH
74912: CALL_OW 310
74916: NOT
74917: OR
74918: IFFALSE 74922
// exit ;
74920: GO 75012
// vehicle := IsInUnit ( driver ) ;
74922: LD_ADDR_VAR 0 3
74926: PUSH
74927: LD_VAR 0 1
74931: PPUSH
74932: CALL_OW 310
74936: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74937: LD_VAR 0 1
74941: PPUSH
74942: LD_STRING \
74944: PUSH
74945: LD_INT 0
74947: PUSH
74948: LD_INT 0
74950: PUSH
74951: LD_INT 0
74953: PUSH
74954: LD_INT 0
74956: PUSH
74957: LD_INT 0
74959: PUSH
74960: LD_INT 0
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: PUSH
74972: LD_STRING E
74974: PUSH
74975: LD_INT 0
74977: PUSH
74978: LD_INT 0
74980: PUSH
74981: LD_VAR 0 3
74985: PUSH
74986: LD_INT 0
74988: PUSH
74989: LD_INT 0
74991: PUSH
74992: LD_INT 0
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: LIST
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PPUSH
75008: CALL_OW 446
// end ;
75012: LD_VAR 0 2
75016: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75017: LD_INT 0
75019: PPUSH
75020: PPUSH
// if not driver or not IsInUnit ( driver ) then
75021: LD_VAR 0 1
75025: NOT
75026: PUSH
75027: LD_VAR 0 1
75031: PPUSH
75032: CALL_OW 310
75036: NOT
75037: OR
75038: IFFALSE 75042
// exit ;
75040: GO 75132
// vehicle := IsInUnit ( driver ) ;
75042: LD_ADDR_VAR 0 3
75046: PUSH
75047: LD_VAR 0 1
75051: PPUSH
75052: CALL_OW 310
75056: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75057: LD_VAR 0 1
75061: PPUSH
75062: LD_STRING \
75064: PUSH
75065: LD_INT 0
75067: PUSH
75068: LD_INT 0
75070: PUSH
75071: LD_INT 0
75073: PUSH
75074: LD_INT 0
75076: PUSH
75077: LD_INT 0
75079: PUSH
75080: LD_INT 0
75082: PUSH
75083: EMPTY
75084: LIST
75085: LIST
75086: LIST
75087: LIST
75088: LIST
75089: LIST
75090: LIST
75091: PUSH
75092: LD_STRING E
75094: PUSH
75095: LD_INT 0
75097: PUSH
75098: LD_INT 0
75100: PUSH
75101: LD_VAR 0 3
75105: PUSH
75106: LD_INT 0
75108: PUSH
75109: LD_INT 0
75111: PUSH
75112: LD_INT 0
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: LIST
75119: LIST
75120: LIST
75121: LIST
75122: LIST
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: PPUSH
75128: CALL_OW 447
// end ;
75132: LD_VAR 0 2
75136: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75137: LD_INT 0
75139: PPUSH
75140: PPUSH
75141: PPUSH
// tmp := [ ] ;
75142: LD_ADDR_VAR 0 5
75146: PUSH
75147: EMPTY
75148: ST_TO_ADDR
// for i in units do
75149: LD_ADDR_VAR 0 4
75153: PUSH
75154: LD_VAR 0 1
75158: PUSH
75159: FOR_IN
75160: IFFALSE 75198
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75162: LD_ADDR_VAR 0 5
75166: PUSH
75167: LD_VAR 0 5
75171: PPUSH
75172: LD_VAR 0 5
75176: PUSH
75177: LD_INT 1
75179: PLUS
75180: PPUSH
75181: LD_VAR 0 4
75185: PPUSH
75186: CALL_OW 256
75190: PPUSH
75191: CALL_OW 2
75195: ST_TO_ADDR
75196: GO 75159
75198: POP
75199: POP
// if not tmp then
75200: LD_VAR 0 5
75204: NOT
75205: IFFALSE 75209
// exit ;
75207: GO 75257
// if asc then
75209: LD_VAR 0 2
75213: IFFALSE 75237
// result := SortListByListAsc ( units , tmp ) else
75215: LD_ADDR_VAR 0 3
75219: PUSH
75220: LD_VAR 0 1
75224: PPUSH
75225: LD_VAR 0 5
75229: PPUSH
75230: CALL_OW 76
75234: ST_TO_ADDR
75235: GO 75257
// result := SortListByListDesc ( units , tmp ) ;
75237: LD_ADDR_VAR 0 3
75241: PUSH
75242: LD_VAR 0 1
75246: PPUSH
75247: LD_VAR 0 5
75251: PPUSH
75252: CALL_OW 77
75256: ST_TO_ADDR
// end ;
75257: LD_VAR 0 3
75261: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75262: LD_INT 0
75264: PPUSH
75265: PPUSH
// task := GetTaskList ( mech ) ;
75266: LD_ADDR_VAR 0 4
75270: PUSH
75271: LD_VAR 0 1
75275: PPUSH
75276: CALL_OW 437
75280: ST_TO_ADDR
// if not task then
75281: LD_VAR 0 4
75285: NOT
75286: IFFALSE 75290
// exit ;
75288: GO 75332
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75290: LD_ADDR_VAR 0 3
75294: PUSH
75295: LD_VAR 0 4
75299: PUSH
75300: LD_INT 1
75302: ARRAY
75303: PUSH
75304: LD_INT 1
75306: ARRAY
75307: PUSH
75308: LD_STRING r
75310: EQUAL
75311: PUSH
75312: LD_VAR 0 4
75316: PUSH
75317: LD_INT 1
75319: ARRAY
75320: PUSH
75321: LD_INT 4
75323: ARRAY
75324: PUSH
75325: LD_VAR 0 2
75329: EQUAL
75330: AND
75331: ST_TO_ADDR
// end ;
75332: LD_VAR 0 3
75336: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75337: LD_INT 0
75339: PPUSH
// SetDir ( unit , d ) ;
75340: LD_VAR 0 1
75344: PPUSH
75345: LD_VAR 0 4
75349: PPUSH
75350: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75354: LD_VAR 0 1
75358: PPUSH
75359: LD_VAR 0 2
75363: PPUSH
75364: LD_VAR 0 3
75368: PPUSH
75369: LD_VAR 0 5
75373: PPUSH
75374: CALL_OW 48
// end ;
75378: LD_VAR 0 6
75382: RET
// export function ToNaturalNumber ( number ) ; begin
75383: LD_INT 0
75385: PPUSH
// result := number div 1 ;
75386: LD_ADDR_VAR 0 2
75390: PUSH
75391: LD_VAR 0 1
75395: PUSH
75396: LD_INT 1
75398: DIV
75399: ST_TO_ADDR
// if number < 0 then
75400: LD_VAR 0 1
75404: PUSH
75405: LD_INT 0
75407: LESS
75408: IFFALSE 75418
// result := 0 ;
75410: LD_ADDR_VAR 0 2
75414: PUSH
75415: LD_INT 0
75417: ST_TO_ADDR
// end ; end_of_file
75418: LD_VAR 0 2
75422: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75423: LD_VAR 0 1
75427: PUSH
75428: LD_INT 200
75430: DOUBLE
75431: GREATEREQUAL
75432: IFFALSE 75440
75434: LD_INT 299
75436: DOUBLE
75437: LESSEQUAL
75438: IFTRUE 75442
75440: GO 75474
75442: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75443: LD_VAR 0 1
75447: PPUSH
75448: LD_VAR 0 2
75452: PPUSH
75453: LD_VAR 0 3
75457: PPUSH
75458: LD_VAR 0 4
75462: PPUSH
75463: LD_VAR 0 5
75467: PPUSH
75468: CALL 32785 0 5
75472: GO 75551
75474: LD_INT 300
75476: DOUBLE
75477: GREATEREQUAL
75478: IFFALSE 75486
75480: LD_INT 399
75482: DOUBLE
75483: LESSEQUAL
75484: IFTRUE 75488
75486: GO 75550
75488: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75489: LD_VAR 0 1
75493: PPUSH
75494: LD_VAR 0 2
75498: PPUSH
75499: LD_VAR 0 3
75503: PPUSH
75504: LD_VAR 0 4
75508: PPUSH
75509: LD_VAR 0 5
75513: PPUSH
75514: LD_VAR 0 6
75518: PPUSH
75519: LD_VAR 0 7
75523: PPUSH
75524: LD_VAR 0 8
75528: PPUSH
75529: LD_VAR 0 9
75533: PPUSH
75534: LD_VAR 0 10
75538: PPUSH
75539: LD_VAR 0 11
75543: PPUSH
75544: CALL 30673 0 11
75548: GO 75551
75550: POP
// end ;
75551: PPOPN 11
75553: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75554: LD_VAR 0 1
75558: PPUSH
75559: LD_VAR 0 2
75563: PPUSH
75564: LD_VAR 0 3
75568: PPUSH
75569: LD_VAR 0 4
75573: PPUSH
75574: LD_VAR 0 5
75578: PPUSH
75579: CALL 32767 0 5
// end ; end_of_file
75583: PPOPN 5
75585: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75586: LD_VAR 0 1
75590: PPUSH
75591: LD_VAR 0 2
75595: PPUSH
75596: LD_VAR 0 3
75600: PPUSH
75601: LD_VAR 0 4
75605: PPUSH
75606: LD_VAR 0 5
75610: PPUSH
75611: LD_VAR 0 6
75615: PPUSH
75616: CALL 19481 0 6
// end ;
75620: PPOPN 6
75622: END
