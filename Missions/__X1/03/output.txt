// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// PrepareNature ;
   8: CALL 649 0 0
// PrepareArabian ;
  12: CALL 1964 0 0
// PrepareAmerican ;
  16: CALL 4882 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9418 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 20
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 8
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 12
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 14
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 178: LD_ADDR_EXP 15
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// attackWave := 1 ;
 186: LD_ADDR_EXP 16
 190: PUSH
 191: LD_INT 1
 193: ST_TO_ADDR
// omarCargoCounter := [ 6 , 9 , 12 ] [ Difficulty ] ;
 194: LD_ADDR_EXP 17
 198: PUSH
 199: LD_INT 6
 201: PUSH
 202: LD_INT 9
 204: PUSH
 205: LD_INT 12
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: PUSH
 213: LD_OWVAR 67
 217: ARRAY
 218: ST_TO_ADDR
// vehCounter := 0 ;
 219: LD_ADDR_EXP 18
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// convoyCounter := 0 ;
 227: LD_ADDR_EXP 19
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// ibrahimInDepot := false ;
 235: LD_ADDR_EXP 21
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimIsFree := false ;
 243: LD_ADDR_EXP 22
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// maxConvoys := [ 16 , 15 , 14 ] [ Difficulty ] ;
 251: LD_ADDR_EXP 23
 255: PUSH
 256: LD_INT 16
 258: PUSH
 259: LD_INT 15
 261: PUSH
 262: LD_INT 14
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: PUSH
 270: LD_OWVAR 67
 274: ARRAY
 275: ST_TO_ADDR
// end ; end_of_file
 276: LD_VAR 0 1
 280: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 281: LD_INT 0
 283: PPUSH
 284: PPUSH
// if exist_mode then
 285: LD_VAR 0 2
 289: IFFALSE 314
// unit := CreateCharacter ( prefix & ident ) else
 291: LD_ADDR_VAR 0 5
 295: PUSH
 296: LD_VAR 0 3
 300: PUSH
 301: LD_VAR 0 1
 305: STR
 306: PPUSH
 307: CALL_OW 34
 311: ST_TO_ADDR
 312: GO 329
// unit := NewCharacter ( ident ) ;
 314: LD_ADDR_VAR 0 5
 318: PUSH
 319: LD_VAR 0 1
 323: PPUSH
 324: CALL_OW 25
 328: ST_TO_ADDR
// result := unit ;
 329: LD_ADDR_VAR 0 4
 333: PUSH
 334: LD_VAR 0 5
 338: ST_TO_ADDR
// end ;
 339: LD_VAR 0 4
 343: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 344: LD_INT 0
 346: PPUSH
// uc_side := side ;
 347: LD_ADDR_OWVAR 20
 351: PUSH
 352: LD_VAR 0 1
 356: ST_TO_ADDR
// uc_nation := nation ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_VAR 0 2
 366: ST_TO_ADDR
// vc_chassis := chassis ;
 367: LD_ADDR_OWVAR 37
 371: PUSH
 372: LD_VAR 0 3
 376: ST_TO_ADDR
// vc_engine := engine ;
 377: LD_ADDR_OWVAR 39
 381: PUSH
 382: LD_VAR 0 4
 386: ST_TO_ADDR
// vc_control := control ;
 387: LD_ADDR_OWVAR 38
 391: PUSH
 392: LD_VAR 0 5
 396: ST_TO_ADDR
// vc_weapon := weapon ;
 397: LD_ADDR_OWVAR 40
 401: PUSH
 402: LD_VAR 0 6
 406: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 407: LD_ADDR_OWVAR 41
 411: PUSH
 412: LD_VAR 0 7
 416: ST_TO_ADDR
// result := CreateVehicle ;
 417: LD_ADDR_VAR 0 8
 421: PUSH
 422: CALL_OW 45
 426: ST_TO_ADDR
// end ;
 427: LD_VAR 0 8
 431: RET
// export function SayX ( units , ident ) ; var i ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// result := false ;
 436: LD_ADDR_VAR 0 3
 440: PUSH
 441: LD_INT 0
 443: ST_TO_ADDR
// if not units then
 444: LD_VAR 0 1
 448: NOT
 449: IFFALSE 453
// exit ;
 451: GO 507
// for i in units do
 453: LD_ADDR_VAR 0 4
 457: PUSH
 458: LD_VAR 0 1
 462: PUSH
 463: FOR_IN
 464: IFFALSE 505
// if IsOk ( i ) then
 466: LD_VAR 0 4
 470: PPUSH
 471: CALL_OW 302
 475: IFFALSE 503
// begin Say ( i , ident ) ;
 477: LD_VAR 0 4
 481: PPUSH
 482: LD_VAR 0 2
 486: PPUSH
 487: CALL_OW 88
// result := i ;
 491: LD_ADDR_VAR 0 3
 495: PUSH
 496: LD_VAR 0 4
 500: ST_TO_ADDR
// break ;
 501: GO 505
// end ;
 503: GO 463
 505: POP
 506: POP
// end ;
 507: LD_VAR 0 3
 511: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 512: LD_INT 0
 514: PPUSH
 515: PPUSH
// InitUc ;
 516: CALL_OW 18
// InitHc ;
 520: CALL_OW 19
// uc_side := 0 ;
 524: LD_ADDR_OWVAR 20
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// uc_nation := 0 ;
 532: LD_ADDR_OWVAR 21
 536: PUSH
 537: LD_INT 0
 539: ST_TO_ADDR
// for i = 1 to amount do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: DOUBLE
 546: LD_INT 1
 548: DEC
 549: ST_TO_ADDR
 550: LD_VAR 0 2
 554: PUSH
 555: FOR_TO
 556: IFFALSE 638
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 558: LD_ADDR_OWVAR 29
 562: PUSH
 563: LD_INT 9
 565: PPUSH
 566: LD_INT 12
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_INT 9
 576: PPUSH
 577: LD_INT 12
 579: PPUSH
 580: CALL_OW 12
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 589: LD_ADDR_OWVAR 35
 593: PUSH
 594: LD_INT 1
 596: NEG
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL_OW 12
 605: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 606: LD_INT 0
 608: PPUSH
 609: LD_INT 12
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 619: CALL_OW 44
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// end ;
 636: GO 555
 638: POP
 639: POP
// InitHc ;
 640: CALL_OW 19
// end ;
 644: LD_VAR 0 3
 648: RET
// export function PrepareNature ; var i ; begin
 649: LD_INT 0
 651: PPUSH
 652: PPUSH
// SpawnApeman ( forest , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 653: LD_INT 2
 655: PPUSH
 656: LD_INT 4
 658: PUSH
 659: LD_INT 4
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_OWVAR 67
 674: ARRAY
 675: PPUSH
 676: CALL 512 0 2
// for i := 1 to 2 do
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: DOUBLE
 686: LD_INT 1
 688: DEC
 689: ST_TO_ADDR
 690: LD_INT 2
 692: PUSH
 693: FOR_TO
 694: IFFALSE 729
// begin hc_class := 21 ;
 696: LD_ADDR_OWVAR 28
 700: PUSH
 701: LD_INT 21
 703: ST_TO_ADDR
// hc_gallery :=  ;
 704: LD_ADDR_OWVAR 33
 708: PUSH
 709: LD_STRING 
 711: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 712: CALL_OW 44
 716: PPUSH
 717: LD_INT 2
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 693
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 2
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 780
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_INT 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 49
// end ;
 778: GO 744
 780: POP
 781: POP
// for i := 1 to 2 do
 782: LD_ADDR_VAR 0 2
 786: PUSH
 787: DOUBLE
 788: LD_INT 1
 790: DEC
 791: ST_TO_ADDR
 792: LD_INT 2
 794: PUSH
 795: FOR_TO
 796: IFFALSE 831
// begin hc_class := 13 ;
 798: LD_ADDR_OWVAR 28
 802: PUSH
 803: LD_INT 13
 805: ST_TO_ADDR
// hc_gallery :=  ;
 806: LD_ADDR_OWVAR 33
 810: PUSH
 811: LD_STRING 
 813: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 814: CALL_OW 44
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 795
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 1
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ;
 999: LD_VAR 0 4
1003: RET
// export function Video ( mode ) ; begin
1004: LD_INT 0
1006: PPUSH
// ingame_video = mode ;
1007: LD_ADDR_OWVAR 52
1011: PUSH
1012: LD_VAR 0 1
1016: ST_TO_ADDR
// interface_hidden = mode ;
1017: LD_ADDR_OWVAR 54
1021: PUSH
1022: LD_VAR 0 1
1026: ST_TO_ADDR
// end ;
1027: LD_VAR 0 2
1031: RET
// export function ReverseArray ( array ) ; var i ; begin
1032: LD_INT 0
1034: PPUSH
1035: PPUSH
// if not array then
1036: LD_VAR 0 1
1040: NOT
1041: IFFALSE 1045
// exit ;
1043: GO 1103
// result := [ ] ;
1045: LD_ADDR_VAR 0 2
1049: PUSH
1050: EMPTY
1051: ST_TO_ADDR
// for i := 1 to array do
1052: LD_ADDR_VAR 0 3
1056: PUSH
1057: DOUBLE
1058: LD_INT 1
1060: DEC
1061: ST_TO_ADDR
1062: LD_VAR 0 1
1066: PUSH
1067: FOR_TO
1068: IFFALSE 1101
// result := Insert ( result , 1 , array [ i ] ) ;
1070: LD_ADDR_VAR 0 2
1074: PUSH
1075: LD_VAR 0 2
1079: PPUSH
1080: LD_INT 1
1082: PPUSH
1083: LD_VAR 0 1
1087: PUSH
1088: LD_VAR 0 3
1092: ARRAY
1093: PPUSH
1094: CALL_OW 2
1098: ST_TO_ADDR
1099: GO 1067
1101: POP
1102: POP
// end ;
1103: LD_VAR 0 2
1107: RET
// export function ComExit ( unit ) ; begin
1108: LD_INT 0
1110: PPUSH
// result := IsInUnit ( unit ) ;
1111: LD_ADDR_VAR 0 2
1115: PUSH
1116: LD_VAR 0 1
1120: PPUSH
1121: CALL_OW 310
1125: ST_TO_ADDR
// if not result then
1126: LD_VAR 0 2
1130: NOT
1131: IFFALSE 1135
// exit ;
1133: GO 1170
// if GetType ( result ) = unit_vehicle then
1135: LD_VAR 0 2
1139: PPUSH
1140: CALL_OW 247
1144: PUSH
1145: LD_INT 2
1147: EQUAL
1148: IFFALSE 1161
// ComExitVehicle ( unit ) else
1150: LD_VAR 0 1
1154: PPUSH
1155: CALL_OW 121
1159: GO 1170
// ComExitBuilding ( unit ) ;
1161: LD_VAR 0 1
1165: PPUSH
1166: CALL_OW 122
// end ;
1170: LD_VAR 0 2
1174: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1175: LD_INT 0
1177: PPUSH
1178: PPUSH
// if not side or not nation then
1179: LD_VAR 0 1
1183: NOT
1184: PUSH
1185: LD_VAR 0 2
1189: NOT
1190: OR
1191: IFFALSE 1195
// exit ;
1193: GO 1959
// case nation of nation_american :
1195: LD_VAR 0 2
1199: PUSH
1200: LD_INT 1
1202: DOUBLE
1203: EQUAL
1204: IFTRUE 1208
1206: GO 1422
1208: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1209: LD_ADDR_VAR 0 4
1213: PUSH
1214: LD_INT 35
1216: PUSH
1217: LD_INT 45
1219: PUSH
1220: LD_INT 46
1222: PUSH
1223: LD_INT 47
1225: PUSH
1226: LD_INT 82
1228: PUSH
1229: LD_INT 83
1231: PUSH
1232: LD_INT 84
1234: PUSH
1235: LD_INT 85
1237: PUSH
1238: LD_INT 86
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: LD_INT 2
1246: PUSH
1247: LD_INT 6
1249: PUSH
1250: LD_INT 15
1252: PUSH
1253: LD_INT 16
1255: PUSH
1256: LD_INT 7
1258: PUSH
1259: LD_INT 12
1261: PUSH
1262: LD_INT 13
1264: PUSH
1265: LD_INT 10
1267: PUSH
1268: LD_INT 14
1270: PUSH
1271: LD_INT 20
1273: PUSH
1274: LD_INT 21
1276: PUSH
1277: LD_INT 22
1279: PUSH
1280: LD_INT 25
1282: PUSH
1283: LD_INT 32
1285: PUSH
1286: LD_INT 27
1288: PUSH
1289: LD_INT 36
1291: PUSH
1292: LD_INT 69
1294: PUSH
1295: LD_INT 39
1297: PUSH
1298: LD_INT 34
1300: PUSH
1301: LD_INT 40
1303: PUSH
1304: LD_INT 48
1306: PUSH
1307: LD_INT 49
1309: PUSH
1310: LD_INT 50
1312: PUSH
1313: LD_INT 51
1315: PUSH
1316: LD_INT 52
1318: PUSH
1319: LD_INT 53
1321: PUSH
1322: LD_INT 54
1324: PUSH
1325: LD_INT 55
1327: PUSH
1328: LD_INT 56
1330: PUSH
1331: LD_INT 57
1333: PUSH
1334: LD_INT 58
1336: PUSH
1337: LD_INT 59
1339: PUSH
1340: LD_INT 60
1342: PUSH
1343: LD_INT 61
1345: PUSH
1346: LD_INT 62
1348: PUSH
1349: LD_INT 80
1351: PUSH
1352: LD_INT 82
1354: PUSH
1355: LD_INT 83
1357: PUSH
1358: LD_INT 84
1360: PUSH
1361: LD_INT 85
1363: PUSH
1364: LD_INT 86
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: ST_TO_ADDR
1420: GO 1883
1422: LD_INT 2
1424: DOUBLE
1425: EQUAL
1426: IFTRUE 1430
1428: GO 1652
1430: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1431: LD_ADDR_VAR 0 4
1435: PUSH
1436: LD_INT 35
1438: PUSH
1439: LD_INT 45
1441: PUSH
1442: LD_INT 46
1444: PUSH
1445: LD_INT 47
1447: PUSH
1448: LD_INT 82
1450: PUSH
1451: LD_INT 83
1453: PUSH
1454: LD_INT 84
1456: PUSH
1457: LD_INT 85
1459: PUSH
1460: LD_INT 87
1462: PUSH
1463: LD_INT 70
1465: PUSH
1466: LD_INT 1
1468: PUSH
1469: LD_INT 11
1471: PUSH
1472: LD_INT 3
1474: PUSH
1475: LD_INT 4
1477: PUSH
1478: LD_INT 5
1480: PUSH
1481: LD_INT 6
1483: PUSH
1484: LD_INT 15
1486: PUSH
1487: LD_INT 18
1489: PUSH
1490: LD_INT 7
1492: PUSH
1493: LD_INT 17
1495: PUSH
1496: LD_INT 8
1498: PUSH
1499: LD_INT 20
1501: PUSH
1502: LD_INT 21
1504: PUSH
1505: LD_INT 22
1507: PUSH
1508: LD_INT 72
1510: PUSH
1511: LD_INT 26
1513: PUSH
1514: LD_INT 69
1516: PUSH
1517: LD_INT 39
1519: PUSH
1520: LD_INT 40
1522: PUSH
1523: LD_INT 41
1525: PUSH
1526: LD_INT 42
1528: PUSH
1529: LD_INT 43
1531: PUSH
1532: LD_INT 48
1534: PUSH
1535: LD_INT 49
1537: PUSH
1538: LD_INT 50
1540: PUSH
1541: LD_INT 51
1543: PUSH
1544: LD_INT 52
1546: PUSH
1547: LD_INT 53
1549: PUSH
1550: LD_INT 54
1552: PUSH
1553: LD_INT 55
1555: PUSH
1556: LD_INT 56
1558: PUSH
1559: LD_INT 60
1561: PUSH
1562: LD_INT 61
1564: PUSH
1565: LD_INT 62
1567: PUSH
1568: LD_INT 66
1570: PUSH
1571: LD_INT 67
1573: PUSH
1574: LD_INT 68
1576: PUSH
1577: LD_INT 81
1579: PUSH
1580: LD_INT 82
1582: PUSH
1583: LD_INT 83
1585: PUSH
1586: LD_INT 84
1588: PUSH
1589: LD_INT 85
1591: PUSH
1592: LD_INT 87
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: ST_TO_ADDR
1650: GO 1883
1652: LD_INT 3
1654: DOUBLE
1655: EQUAL
1656: IFTRUE 1660
1658: GO 1882
1660: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1661: LD_ADDR_VAR 0 4
1665: PUSH
1666: LD_INT 46
1668: PUSH
1669: LD_INT 47
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: LD_INT 82
1680: PUSH
1681: LD_INT 83
1683: PUSH
1684: LD_INT 84
1686: PUSH
1687: LD_INT 85
1689: PUSH
1690: LD_INT 86
1692: PUSH
1693: LD_INT 11
1695: PUSH
1696: LD_INT 9
1698: PUSH
1699: LD_INT 20
1701: PUSH
1702: LD_INT 19
1704: PUSH
1705: LD_INT 21
1707: PUSH
1708: LD_INT 24
1710: PUSH
1711: LD_INT 22
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: LD_INT 28
1719: PUSH
1720: LD_INT 29
1722: PUSH
1723: LD_INT 30
1725: PUSH
1726: LD_INT 31
1728: PUSH
1729: LD_INT 37
1731: PUSH
1732: LD_INT 38
1734: PUSH
1735: LD_INT 32
1737: PUSH
1738: LD_INT 27
1740: PUSH
1741: LD_INT 33
1743: PUSH
1744: LD_INT 69
1746: PUSH
1747: LD_INT 39
1749: PUSH
1750: LD_INT 34
1752: PUSH
1753: LD_INT 40
1755: PUSH
1756: LD_INT 71
1758: PUSH
1759: LD_INT 23
1761: PUSH
1762: LD_INT 44
1764: PUSH
1765: LD_INT 48
1767: PUSH
1768: LD_INT 49
1770: PUSH
1771: LD_INT 50
1773: PUSH
1774: LD_INT 51
1776: PUSH
1777: LD_INT 52
1779: PUSH
1780: LD_INT 53
1782: PUSH
1783: LD_INT 54
1785: PUSH
1786: LD_INT 55
1788: PUSH
1789: LD_INT 56
1791: PUSH
1792: LD_INT 57
1794: PUSH
1795: LD_INT 58
1797: PUSH
1798: LD_INT 59
1800: PUSH
1801: LD_INT 63
1803: PUSH
1804: LD_INT 64
1806: PUSH
1807: LD_INT 65
1809: PUSH
1810: LD_INT 82
1812: PUSH
1813: LD_INT 83
1815: PUSH
1816: LD_INT 84
1818: PUSH
1819: LD_INT 85
1821: PUSH
1822: LD_INT 86
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: ST_TO_ADDR
1880: GO 1883
1882: POP
// if state > - 1 and state < 3 then
1883: LD_VAR 0 3
1887: PUSH
1888: LD_INT 1
1890: NEG
1891: GREATER
1892: PUSH
1893: LD_VAR 0 3
1897: PUSH
1898: LD_INT 3
1900: LESS
1901: AND
1902: IFFALSE 1959
// for i in result do
1904: LD_ADDR_VAR 0 5
1908: PUSH
1909: LD_VAR 0 4
1913: PUSH
1914: FOR_IN
1915: IFFALSE 1957
// if GetTech ( i , side ) <> state then
1917: LD_VAR 0 5
1921: PPUSH
1922: LD_VAR 0 1
1926: PPUSH
1927: CALL_OW 321
1931: PUSH
1932: LD_VAR 0 3
1936: NONEQUAL
1937: IFFALSE 1955
// result := result diff i ;
1939: LD_ADDR_VAR 0 4
1943: PUSH
1944: LD_VAR 0 4
1948: PUSH
1949: LD_VAR 0 5
1953: DIFF
1954: ST_TO_ADDR
1955: GO 1914
1957: POP
1958: POP
// end ; end_of_file
1959: LD_VAR 0 4
1963: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1964: LD_INT 0
1966: PPUSH
1967: PPUSH
1968: PPUSH
1969: PPUSH
// uc_side := 5 ;
1970: LD_ADDR_OWVAR 20
1974: PUSH
1975: LD_INT 5
1977: ST_TO_ADDR
// uc_nation := 2 ;
1978: LD_ADDR_OWVAR 21
1982: PUSH
1983: LD_INT 2
1985: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
1986: LD_INT 5
1988: PPUSH
1989: CALL_OW 274
1993: PPUSH
1994: LD_INT 1
1996: PPUSH
1997: LD_INT 45
1999: PPUSH
2000: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
2004: LD_ADDR_EXP 32
2008: PUSH
2009: LD_STRING Farmer
2011: PPUSH
2012: LD_INT 0
2014: PPUSH
2015: LD_STRING 
2017: PPUSH
2018: CALL 281 0 3
2022: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2023: LD_ADDR_EXP 33
2027: PUSH
2028: LD_STRING Omar
2030: PPUSH
2031: LD_INT 0
2033: PPUSH
2034: LD_STRING 
2036: PPUSH
2037: CALL 281 0 3
2041: ST_TO_ADDR
// omarSquad := [ ] ;
2042: LD_ADDR_EXP 36
2046: PUSH
2047: EMPTY
2048: ST_TO_ADDR
// heikeSquad := [ ] ;
2049: LD_ADDR_EXP 37
2053: PUSH
2054: EMPTY
2055: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
2056: LD_ADDR_EXP 38
2060: PUSH
2061: EMPTY
2062: ST_TO_ADDR
// omarCargo := [ ] ;
2063: LD_ADDR_EXP 39
2067: PUSH
2068: EMPTY
2069: ST_TO_ADDR
// for i := 1 to 5 do
2070: LD_ADDR_VAR 0 2
2074: PUSH
2075: DOUBLE
2076: LD_INT 1
2078: DEC
2079: ST_TO_ADDR
2080: LD_INT 5
2082: PUSH
2083: FOR_TO
2084: IFFALSE 2242
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
2086: LD_INT 0
2088: PPUSH
2089: LD_INT 1
2091: PUSH
2092: LD_INT 1
2094: PUSH
2095: LD_INT 2
2097: PUSH
2098: LD_INT 1
2100: PUSH
2101: LD_INT 1
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: PUSH
2111: LD_VAR 0 2
2115: ARRAY
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: CALL_OW 380
// un := CreateHuman ;
2124: LD_ADDR_VAR 0 3
2128: PUSH
2129: CALL_OW 44
2133: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2134: LD_ADDR_EXP 36
2138: PUSH
2139: LD_EXP 36
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
2150: LD_VAR 0 3
2154: PPUSH
2155: LD_INT 87
2157: PUSH
2158: LD_INT 30
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: LD_INT 91
2167: PUSH
2168: LD_INT 32
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 82
2177: PUSH
2178: LD_INT 15
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 79
2187: PUSH
2188: LD_INT 14
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 82
2197: PUSH
2198: LD_INT 13
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: PUSH
2212: LD_VAR 0 2
2216: ARRAY
2217: PPUSH
2218: LD_INT 0
2220: PPUSH
2221: CALL 912 0 3
// ComTurnXY ( un , 93 , 21 ) ;
2225: LD_VAR 0 3
2229: PPUSH
2230: LD_INT 93
2232: PPUSH
2233: LD_INT 21
2235: PPUSH
2236: CALL_OW 118
// end ;
2240: GO 2083
2242: POP
2243: POP
// uc_side := 2 ;
2244: LD_ADDR_OWVAR 20
2248: PUSH
2249: LD_INT 2
2251: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2252: LD_ADDR_EXP 24
2256: PUSH
2257: LD_STRING Heike
2259: PPUSH
2260: LD_EXP 1
2264: NOT
2265: PPUSH
2266: LD_EXP 2
2270: PPUSH
2271: CALL 281 0 3
2275: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2276: LD_ADDR_EXP 28
2280: PUSH
2281: LD_STRING Aviradze
2283: PPUSH
2284: LD_EXP 1
2288: NOT
2289: PPUSH
2290: LD_EXP 2
2294: PPUSH
2295: CALL 281 0 3
2299: ST_TO_ADDR
// tmp := [ ] ;
2300: LD_ADDR_VAR 0 4
2304: PUSH
2305: EMPTY
2306: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2307: LD_ADDR_EXP 25
2311: PUSH
2312: LD_STRING Givi
2314: PPUSH
2315: LD_EXP 1
2319: NOT
2320: PPUSH
2321: LD_EXP 2
2325: PPUSH
2326: CALL 281 0 3
2330: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2331: LD_ADDR_EXP 26
2335: PUSH
2336: LD_STRING Mike
2338: PPUSH
2339: LD_EXP 1
2343: NOT
2344: PPUSH
2345: LD_EXP 2
2349: PPUSH
2350: CALL 281 0 3
2354: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2355: LD_ADDR_EXP 27
2359: PUSH
2360: LD_STRING Kamil
2362: PPUSH
2363: LD_EXP 1
2367: NOT
2368: PPUSH
2369: LD_EXP 2
2373: PPUSH
2374: CALL 281 0 3
2378: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2379: LD_ADDR_EXP 29
2383: PUSH
2384: LD_STRING Kaia
2386: PPUSH
2387: LD_EXP 1
2391: NOT
2392: PPUSH
2393: LD_EXP 2
2397: PPUSH
2398: CALL 281 0 3
2402: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2403: LD_ADDR_EXP 30
2407: PUSH
2408: LD_STRING Sophia
2410: PPUSH
2411: LD_EXP 1
2415: NOT
2416: PPUSH
2417: LD_EXP 2
2421: PPUSH
2422: CALL 281 0 3
2426: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2427: LD_ADDR_EXP 31
2431: PUSH
2432: LD_STRING Markov
2434: PPUSH
2435: LD_EXP 1
2439: NOT
2440: PPUSH
2441: LD_EXP 2
2445: PPUSH
2446: CALL 281 0 3
2450: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
2451: LD_ADDR_EXP 38
2455: PUSH
2456: LD_STRING 02_others
2458: PPUSH
2459: CALL_OW 31
2463: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
2464: LD_ADDR_VAR 0 4
2468: PUSH
2469: LD_EXP 26
2473: PUSH
2474: LD_EXP 27
2478: PUSH
2479: LD_EXP 29
2483: PUSH
2484: LD_EXP 30
2488: PUSH
2489: LD_EXP 31
2493: PUSH
2494: LD_EXP 25
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_EXP 38
2511: ADD
2512: PUSH
2513: LD_INT 0
2515: DIFF
2516: ST_TO_ADDR
// heikeSquad := tmp ;
2517: LD_ADDR_EXP 37
2521: PUSH
2522: LD_VAR 0 4
2526: ST_TO_ADDR
// uc_nation := 0 ;
2527: LD_ADDR_OWVAR 21
2531: PUSH
2532: LD_INT 0
2534: ST_TO_ADDR
// hc_class := class_apeman ;
2535: LD_ADDR_OWVAR 28
2539: PUSH
2540: LD_INT 12
2542: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2543: LD_ADDR_OWVAR 31
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: LD_INT 0
2556: PUSH
2557: LD_INT 0
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: ST_TO_ADDR
// hc_gallery :=  ;
2566: LD_ADDR_OWVAR 33
2570: PUSH
2571: LD_STRING 
2573: ST_TO_ADDR
// hc_name :=  ;
2574: LD_ADDR_OWVAR 26
2578: PUSH
2579: LD_STRING 
2581: ST_TO_ADDR
// tmp := tmp union CreateHuman ;
2582: LD_ADDR_VAR 0 4
2586: PUSH
2587: LD_VAR 0 4
2591: PUSH
2592: CALL_OW 44
2596: UNION
2597: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
2598: LD_EXP 24
2602: PPUSH
2603: LD_INT 92
2605: PPUSH
2606: LD_INT 17
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
2616: LD_EXP 32
2620: PPUSH
2621: LD_INT 95
2623: PPUSH
2624: LD_INT 19
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
2634: LD_EXP 33
2638: PPUSH
2639: LD_INT 89
2641: PPUSH
2642: LD_INT 25
2644: PPUSH
2645: LD_INT 0
2647: PPUSH
2648: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
2652: LD_EXP 28
2656: PPUSH
2657: LD_INT 92
2659: PPUSH
2660: LD_INT 27
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
2670: LD_EXP 33
2674: PPUSH
2675: LD_EXP 28
2679: PPUSH
2680: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
2684: LD_EXP 28
2688: PPUSH
2689: LD_EXP 33
2693: PPUSH
2694: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
2698: LD_EXP 24
2702: PUSH
2703: LD_EXP 32
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PPUSH
2712: LD_EXP 33
2716: PPUSH
2717: CALL_OW 119
// if tmp then
2721: LD_VAR 0 4
2725: IFFALSE 2779
// for i in tmp do
2727: LD_ADDR_VAR 0 2
2731: PUSH
2732: LD_VAR 0 4
2736: PUSH
2737: FOR_IN
2738: IFFALSE 2777
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
2740: LD_VAR 0 2
2744: PPUSH
2745: LD_INT 94
2747: PPUSH
2748: LD_INT 14
2750: PPUSH
2751: LD_INT 4
2753: PPUSH
2754: LD_INT 0
2756: PPUSH
2757: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_EXP 24
2770: PPUSH
2771: CALL_OW 119
// end ;
2775: GO 2737
2777: POP
2778: POP
// farmerSquad := [ ] ;
2779: LD_ADDR_EXP 35
2783: PUSH
2784: EMPTY
2785: ST_TO_ADDR
// uc_side := 5 ;
2786: LD_ADDR_OWVAR 20
2790: PUSH
2791: LD_INT 5
2793: ST_TO_ADDR
// uc_nation := 2 ;
2794: LD_ADDR_OWVAR 21
2798: PUSH
2799: LD_INT 2
2801: ST_TO_ADDR
// for i := 1 to 4 do
2802: LD_ADDR_VAR 0 2
2806: PUSH
2807: DOUBLE
2808: LD_INT 1
2810: DEC
2811: ST_TO_ADDR
2812: LD_INT 4
2814: PUSH
2815: FOR_TO
2816: IFFALSE 2894
// begin PrepareHuman ( false , 1 , 2 ) ;
2818: LD_INT 0
2820: PPUSH
2821: LD_INT 1
2823: PPUSH
2824: LD_INT 2
2826: PPUSH
2827: CALL_OW 380
// un := CreateHuman ;
2831: LD_ADDR_VAR 0 3
2835: PUSH
2836: CALL_OW 44
2840: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
2841: LD_VAR 0 3
2845: PPUSH
2846: LD_INT 102
2848: PPUSH
2849: LD_INT 27
2851: PPUSH
2852: LD_INT 4
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2862: LD_ADDR_EXP 35
2866: PUSH
2867: LD_EXP 35
2871: PUSH
2872: LD_VAR 0 3
2876: UNION
2877: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2878: LD_VAR 0 3
2882: PPUSH
2883: LD_EXP 33
2887: PPUSH
2888: CALL_OW 119
// end ;
2892: GO 2815
2894: POP
2895: POP
// PrepareHuman ( false , 2 , 2 ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 2
2901: PPUSH
2902: LD_INT 2
2904: PPUSH
2905: CALL_OW 380
// un := CreateHuman ;
2909: LD_ADDR_VAR 0 3
2913: PUSH
2914: CALL_OW 44
2918: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_INT 108
2926: PPUSH
2927: LD_INT 62
2929: PPUSH
2930: LD_INT 2
2932: PPUSH
2933: LD_INT 0
2935: PPUSH
2936: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2940: LD_ADDR_EXP 35
2944: PUSH
2945: LD_EXP 35
2949: PUSH
2950: LD_VAR 0 3
2954: UNION
2955: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2956: LD_VAR 0 3
2960: PPUSH
2961: LD_EXP 33
2965: PPUSH
2966: CALL_OW 119
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2970: LD_INT 109
2972: PPUSH
2973: LD_INT 63
2975: PPUSH
2976: LD_INT 2
2978: PPUSH
2979: LD_INT 15
2981: NEG
2982: PPUSH
2983: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2987: LD_INT 109
2989: PPUSH
2990: LD_INT 63
2992: PPUSH
2993: LD_INT 2
2995: PPUSH
2996: CALL_OW 331
// end ;
3000: LD_VAR 0 1
3004: RET
// export function PrepareIbrahim ( x , y ) ; begin
3005: LD_INT 0
3007: PPUSH
// uc_side := 6 ;
3008: LD_ADDR_OWVAR 20
3012: PUSH
3013: LD_INT 6
3015: ST_TO_ADDR
// uc_nation := 3 ;
3016: LD_ADDR_OWVAR 21
3020: PUSH
3021: LD_INT 3
3023: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3024: LD_ADDR_EXP 34
3028: PUSH
3029: LD_STRING IbrahimRu
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: LD_STRING 
3037: PPUSH
3038: CALL 281 0 3
3042: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
3043: LD_EXP 34
3047: PPUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: LD_VAR 0 2
3057: PPUSH
3058: LD_INT 8
3060: PPUSH
3061: LD_INT 1
3063: PPUSH
3064: CALL_OW 50
// end ;
3068: LD_VAR 0 3
3072: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
3073: LD_EXP 33
3077: PUSH
3078: LD_EXP 36
3082: ADD
3083: PPUSH
3084: LD_INT 95
3086: PUSH
3087: LD_INT 3
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PPUSH
3094: CALL_OW 72
3098: IFFALSE 3154
3100: GO 3102
3102: DISABLE
3103: LD_INT 0
3105: PPUSH
// begin enable ;
3106: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
3107: LD_ADDR_VAR 0 1
3111: PUSH
3112: LD_EXP 33
3116: PUSH
3117: LD_EXP 36
3121: ADD
3122: PPUSH
3123: LD_INT 95
3125: PUSH
3126: LD_INT 3
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PPUSH
3133: CALL_OW 72
3137: PUSH
3138: FOR_IN
3139: IFFALSE 3152
// RemoveUnit ( i ) ;
3141: LD_VAR 0 1
3145: PPUSH
3146: CALL_OW 64
3150: GO 3138
3152: POP
3153: POP
// end ;
3154: PPOPN 1
3156: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
3157: LD_EXP 3
3161: PUSH
3162: LD_EXP 32
3166: PPUSH
3167: LD_INT 4
3169: PPUSH
3170: CALL_OW 308
3174: AND
3175: IFFALSE 3958
3177: GO 3179
3179: DISABLE
3180: LD_INT 0
3182: PPUSH
3183: PPUSH
3184: PPUSH
3185: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
3186: LD_EXP 32
3190: PPUSH
3191: LD_INT 110
3193: PPUSH
3194: LD_INT 60
3196: PPUSH
3197: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
3201: LD_EXP 32
3205: PPUSH
3206: LD_INT 110
3208: PPUSH
3209: LD_INT 61
3211: PPUSH
3212: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: LD_EXP 35
3225: PPUSH
3226: LD_INT 25
3228: PUSH
3229: LD_INT 1
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PPUSH
3236: CALL_OW 72
3240: ST_TO_ADDR
// if tmp then
3241: LD_VAR 0 2
3245: IFFALSE 3339
// begin for i := 1 to 2 do
3247: LD_ADDR_VAR 0 1
3251: PUSH
3252: DOUBLE
3253: LD_INT 1
3255: DEC
3256: ST_TO_ADDR
3257: LD_INT 2
3259: PUSH
3260: FOR_TO
3261: IFFALSE 3337
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
3263: LD_VAR 0 2
3267: PUSH
3268: LD_VAR 0 1
3272: ARRAY
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
3281: LD_VAR 0 2
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: LD_INT 2
3294: PPUSH
3295: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
3299: LD_VAR 0 2
3303: PUSH
3304: LD_VAR 0 1
3308: ARRAY
3309: PPUSH
3310: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
3314: LD_VAR 0 2
3318: PUSH
3319: LD_VAR 0 1
3323: ARRAY
3324: PPUSH
3325: LD_INT 107
3327: PPUSH
3328: LD_INT 66
3330: PPUSH
3331: CALL_OW 171
// end ;
3335: GO 3260
3337: POP
3338: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3339: LD_ADDR_VAR 0 2
3343: PUSH
3344: LD_EXP 35
3348: PPUSH
3349: LD_INT 25
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 72
3363: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3364: LD_INT 35
3366: PPUSH
3367: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3371: LD_ADDR_VAR 0 2
3375: PUSH
3376: LD_EXP 35
3380: PPUSH
3381: LD_INT 25
3383: PUSH
3384: LD_INT 2
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PPUSH
3391: CALL_OW 72
3395: ST_TO_ADDR
// until tmp ;
3396: LD_VAR 0 2
3400: IFFALSE 3364
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
3402: LD_VAR 0 2
3406: PPUSH
3407: LD_INT 31
3409: PPUSH
3410: LD_INT 102
3412: PPUSH
3413: LD_INT 69
3415: PPUSH
3416: LD_INT 2
3418: PPUSH
3419: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
3423: LD_INT 35
3425: PPUSH
3426: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3430: LD_EXP 35
3434: PPUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 60
3440: PUSH
3441: EMPTY
3442: LIST
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 25
3450: PUSH
3451: LD_INT 2
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PPUSH
3462: CALL_OW 72
3466: IFFALSE 3423
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3468: LD_ADDR_VAR 0 2
3472: PUSH
3473: LD_EXP 35
3477: PPUSH
3478: LD_INT 25
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PPUSH
3488: CALL_OW 72
3492: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
3493: LD_VAR 0 2
3497: PPUSH
3498: LD_INT 4
3500: PPUSH
3501: LD_INT 116
3503: PPUSH
3504: LD_INT 70
3506: PPUSH
3507: LD_INT 5
3509: PPUSH
3510: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_INT 31
3521: PPUSH
3522: LD_INT 108
3524: PPUSH
3525: LD_INT 50
3527: PPUSH
3528: LD_INT 2
3530: PPUSH
3531: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
3535: LD_INT 35
3537: PPUSH
3538: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
3542: LD_INT 22
3544: PUSH
3545: LD_INT 5
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: LD_INT 30
3554: PUSH
3555: LD_INT 4
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: LD_INT 57
3567: PUSH
3568: EMPTY
3569: LIST
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: PPUSH
3580: CALL_OW 69
3584: IFFALSE 3535
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
3586: LD_ADDR_VAR 0 3
3590: PUSH
3591: LD_INT 22
3593: PUSH
3594: LD_INT 5
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 30
3603: PUSH
3604: LD_INT 4
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: PUSH
3611: LD_INT 3
3613: PUSH
3614: LD_INT 57
3616: PUSH
3617: EMPTY
3618: LIST
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: LIST
3628: PPUSH
3629: CALL_OW 69
3633: PUSH
3634: LD_INT 1
3636: ARRAY
3637: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3638: LD_ADDR_VAR 0 2
3642: PUSH
3643: LD_EXP 35
3647: PPUSH
3648: LD_INT 25
3650: PUSH
3651: LD_INT 1
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PPUSH
3658: CALL_OW 72
3662: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
3663: LD_VAR 0 2
3667: PPUSH
3668: LD_VAR 0 3
3672: PPUSH
3673: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3677: LD_INT 35
3679: PPUSH
3680: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
3684: LD_INT 22
3686: PUSH
3687: LD_INT 5
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 30
3696: PUSH
3697: LD_INT 31
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: LD_INT 3
3706: PUSH
3707: LD_INT 57
3709: PUSH
3710: EMPTY
3711: LIST
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 69
3726: PUSH
3727: LD_INT 2
3729: GREATEREQUAL
3730: IFFALSE 3677
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3732: LD_ADDR_VAR 0 2
3736: PUSH
3737: LD_EXP 35
3741: PPUSH
3742: LD_INT 25
3744: PUSH
3745: LD_INT 2
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: PPUSH
3752: CALL_OW 72
3756: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
3757: LD_VAR 0 2
3761: PUSH
3762: LD_INT 1
3764: ARRAY
3765: PPUSH
3766: LD_INT 5
3768: PPUSH
3769: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
3773: LD_VAR 0 2
3777: PUSH
3778: LD_INT 2
3780: ARRAY
3781: PUSH
3782: LD_VAR 0 2
3786: PUSH
3787: LD_INT 3
3789: ARRAY
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PPUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
3804: LD_VAR 0 2
3808: PUSH
3809: LD_INT 2
3811: ARRAY
3812: PUSH
3813: LD_VAR 0 2
3817: PUSH
3818: LD_INT 3
3820: ARRAY
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PPUSH
3826: LD_INT 1
3828: PPUSH
3829: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
3833: LD_VAR 0 2
3837: PUSH
3838: LD_INT 2
3840: ARRAY
3841: PUSH
3842: LD_VAR 0 2
3846: PUSH
3847: LD_INT 3
3849: ARRAY
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PPUSH
3855: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3859: LD_ADDR_VAR 0 4
3863: PUSH
3864: LD_INT 22
3866: PUSH
3867: LD_INT 5
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 30
3876: PUSH
3877: LD_INT 31
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 69
3892: ST_TO_ADDR
// for i := 1 to 2 do
3893: LD_ADDR_VAR 0 1
3897: PUSH
3898: DOUBLE
3899: LD_INT 1
3901: DEC
3902: ST_TO_ADDR
3903: LD_INT 2
3905: PUSH
3906: FOR_TO
3907: IFFALSE 3941
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3909: LD_VAR 0 2
3913: PUSH
3914: LD_VAR 0 1
3918: PUSH
3919: LD_INT 1
3921: PLUS
3922: ARRAY
3923: PPUSH
3924: LD_VAR 0 4
3928: PUSH
3929: LD_VAR 0 1
3933: ARRAY
3934: PPUSH
3935: CALL_OW 180
3939: GO 3906
3941: POP
3942: POP
// wait ( 1 1$00 ) ;
3943: LD_INT 2100
3945: PPUSH
3946: CALL_OW 67
// farmerBaseReady := true ;
3950: LD_ADDR_EXP 4
3954: PUSH
3955: LD_INT 1
3957: ST_TO_ADDR
// end ;
3958: PPOPN 4
3960: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3961: LD_EXP 4
3965: PUSH
3966: LD_EXP 10
3970: NOT
3971: AND
3972: IFFALSE 4467
3974: GO 3976
3976: DISABLE
3977: LD_INT 0
3979: PPUSH
3980: PPUSH
3981: PPUSH
3982: PPUSH
3983: PPUSH
// begin enable ;
3984: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: LD_EXP 35
3994: PPUSH
3995: LD_INT 25
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PPUSH
4005: CALL_OW 72
4009: PUSH
4010: LD_EXP 32
4014: ADD
4015: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: LD_EXP 35
4025: PPUSH
4026: LD_INT 25
4028: PUSH
4029: LD_INT 2
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PPUSH
4036: CALL_OW 72
4040: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4041: LD_ADDR_VAR 0 5
4045: PUSH
4046: LD_INT 22
4048: PUSH
4049: LD_INT 5
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PUSH
4056: LD_INT 21
4058: PUSH
4059: LD_INT 3
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PUSH
4066: LD_INT 3
4068: PUSH
4069: LD_INT 24
4071: PUSH
4072: LD_INT 1000
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
4093: LD_ADDR_VAR 0 4
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 30
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PPUSH
4122: CALL_OW 69
4126: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
4127: LD_VAR 0 4
4131: PUSH
4132: LD_INT 1
4134: ARRAY
4135: PPUSH
4136: CALL_OW 302
4140: IFFALSE 4204
// for i in sol do
4142: LD_ADDR_VAR 0 1
4146: PUSH
4147: LD_VAR 0 3
4151: PUSH
4152: FOR_IN
4153: IFFALSE 4202
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
4155: LD_VAR 0 1
4159: PPUSH
4160: CALL_OW 256
4164: PUSH
4165: LD_INT 999
4167: LESS
4168: PUSH
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 310
4178: NOT
4179: AND
4180: IFFALSE 4200
// ComEnterUnit ( i , arm [ 1 ] ) ;
4182: LD_VAR 0 1
4186: PPUSH
4187: LD_VAR 0 4
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: CALL_OW 120
4200: GO 4152
4202: POP
4203: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
4204: LD_VAR 0 2
4208: NOT
4209: PUSH
4210: LD_INT 22
4212: PUSH
4213: LD_INT 1
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 21
4222: PUSH
4223: LD_INT 1
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PPUSH
4234: CALL_OW 69
4238: NOT
4239: AND
4240: IFFALSE 4332
// begin uc_side := 5 ;
4242: LD_ADDR_OWVAR 20
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// uc_nation := 2 ;
4250: LD_ADDR_OWVAR 21
4254: PUSH
4255: LD_INT 2
4257: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
4258: LD_INT 0
4260: PPUSH
4261: LD_INT 2
4263: PPUSH
4264: LD_INT 2
4266: PPUSH
4267: CALL_OW 380
// eng := CreateHuman ;
4271: LD_ADDR_VAR 0 2
4275: PUSH
4276: CALL_OW 44
4280: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
4281: LD_VAR 0 2
4285: PPUSH
4286: LD_INT 102
4288: PPUSH
4289: LD_INT 8
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
4299: LD_VAR 0 2
4303: PPUSH
4304: LD_INT 110
4306: PPUSH
4307: LD_INT 60
4309: PPUSH
4310: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
4314: LD_ADDR_EXP 35
4318: PUSH
4319: LD_EXP 35
4323: PUSH
4324: LD_VAR 0 2
4328: UNION
4329: ST_TO_ADDR
// end else
4330: GO 4467
// begin for i in eng do
4332: LD_ADDR_VAR 0 1
4336: PUSH
4337: LD_VAR 0 2
4341: PUSH
4342: FOR_IN
4343: IFFALSE 4465
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
4345: LD_INT 10
4347: PPUSH
4348: LD_INT 1
4350: PPUSH
4351: CALL_OW 287
4355: IFFALSE 4379
// begin if IsInUnit ( i ) then
4357: LD_VAR 0 1
4361: PPUSH
4362: CALL_OW 310
4366: IFFALSE 4377
// ComExitBuilding ( i ) ;
4368: LD_VAR 0 1
4372: PPUSH
4373: CALL_OW 122
// end else
4377: GO 4463
// begin if damagedBuilding then
4379: LD_VAR 0 5
4383: IFFALSE 4427
// begin if IsInUnit ( i ) then
4385: LD_VAR 0 1
4389: PPUSH
4390: CALL_OW 310
4394: IFFALSE 4407
// ComExitBuilding ( i ) else
4396: LD_VAR 0 1
4400: PPUSH
4401: CALL_OW 122
4405: GO 4425
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
4407: LD_VAR 0 1
4411: PPUSH
4412: LD_VAR 0 5
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: PPUSH
4421: CALL_OW 130
// end else
4425: GO 4463
// if not IsInUnit ( i ) and not HasTask ( i ) then
4427: LD_VAR 0 1
4431: PPUSH
4432: CALL_OW 310
4436: NOT
4437: PUSH
4438: LD_VAR 0 1
4442: PPUSH
4443: CALL_OW 314
4447: NOT
4448: AND
4449: IFFALSE 4463
// ComEnterUnit ( i , arDepot ) ;
4451: LD_VAR 0 1
4455: PPUSH
4456: LD_INT 5
4458: PPUSH
4459: CALL_OW 120
// end ; end ;
4463: GO 4342
4465: POP
4466: POP
// end ; end ;
4467: PPOPN 5
4469: END
// export function StartCargoEvacuation ; begin
4470: LD_INT 0
4472: PPUSH
// while GetResourceType ( GetBase ( arDepot ) , mat_cans ) > 0 and omarCargoCounter > 0 do
4473: LD_INT 5
4475: PPUSH
4476: CALL_OW 274
4480: PPUSH
4481: LD_INT 1
4483: PPUSH
4484: CALL_OW 275
4488: PUSH
4489: LD_INT 0
4491: GREATER
4492: PUSH
4493: LD_EXP 17
4497: PUSH
4498: LD_INT 0
4500: GREATER
4501: AND
4502: IFFALSE 4759
// begin wait ( 1 1$20 ) ;
4504: LD_INT 2800
4506: PPUSH
4507: CALL_OW 67
// omarCargo := PrepareCargo ;
4511: LD_ADDR_EXP 39
4515: PUSH
4516: CALL 4764 0 0
4520: ST_TO_ADDR
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4521: LD_EXP 39
4525: PPUSH
4526: LD_INT 107
4528: PPUSH
4529: LD_INT 59
4531: PPUSH
4532: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4536: LD_INT 35
4538: PPUSH
4539: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4543: LD_EXP 39
4547: PPUSH
4548: LD_INT 107
4550: PPUSH
4551: LD_INT 59
4553: PPUSH
4554: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4558: LD_EXP 39
4562: PPUSH
4563: CALL_OW 302
4567: NOT
4568: PUSH
4569: LD_EXP 39
4573: PPUSH
4574: CALL_OW 301
4578: OR
4579: IFFALSE 4583
// continue ;
4581: GO 4536
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
4583: LD_EXP 39
4587: PPUSH
4588: LD_INT 107
4590: PPUSH
4591: LD_INT 59
4593: PPUSH
4594: CALL_OW 307
4598: PUSH
4599: LD_EXP 39
4603: PPUSH
4604: LD_INT 5
4606: PPUSH
4607: CALL_OW 296
4611: PUSH
4612: LD_INT 6
4614: LESS
4615: OR
4616: IFFALSE 4536
// wait ( 0 0$05 ) ;
4618: LD_INT 175
4620: PPUSH
4621: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
4625: LD_EXP 39
4629: PPUSH
4630: LD_INT 5
4632: PPUSH
4633: LD_INT 1
4635: PPUSH
4636: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
4640: LD_EXP 39
4644: PPUSH
4645: LD_INT 103
4647: PPUSH
4648: LD_INT 9
4650: PPUSH
4651: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4655: LD_INT 35
4657: PPUSH
4658: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
4662: LD_EXP 39
4666: PPUSH
4667: LD_INT 103
4669: PPUSH
4670: LD_INT 9
4672: PPUSH
4673: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4677: LD_EXP 39
4681: PPUSH
4682: CALL_OW 302
4686: NOT
4687: PUSH
4688: LD_EXP 39
4692: PPUSH
4693: CALL_OW 301
4697: OR
4698: IFFALSE 4702
// continue ;
4700: GO 4655
// until IsInArea ( omarCargo , northRoad ) and GetCargo ( omarCargo , mat_cans ) > 0 ;
4702: LD_EXP 39
4706: PPUSH
4707: LD_INT 3
4709: PPUSH
4710: CALL_OW 308
4714: PUSH
4715: LD_EXP 39
4719: PPUSH
4720: LD_INT 1
4722: PPUSH
4723: CALL_OW 289
4727: PUSH
4728: LD_INT 0
4730: GREATER
4731: AND
4732: IFFALSE 4655
// RemoveUnit ( omarCargo ) ;
4734: LD_EXP 39
4738: PPUSH
4739: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
4743: LD_ADDR_EXP 17
4747: PUSH
4748: LD_EXP 17
4752: PUSH
4753: LD_INT 1
4755: MINUS
4756: ST_TO_ADDR
// end ;
4757: GO 4473
// end ;
4759: LD_VAR 0 1
4763: RET
// export function PrepareCargo ; var un , veh ; begin
4764: LD_INT 0
4766: PPUSH
4767: PPUSH
4768: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: LD_INT 5
4776: PPUSH
4777: LD_INT 2
4779: PPUSH
4780: LD_INT 13
4782: PPUSH
4783: LD_INT 1
4785: PPUSH
4786: LD_INT 1
4788: PPUSH
4789: LD_INT 32
4791: PPUSH
4792: LD_INT 80
4794: PPUSH
4795: CALL 344 0 7
4799: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4800: LD_VAR 0 3
4804: PPUSH
4805: LD_INT 4
4807: PPUSH
4808: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4812: LD_VAR 0 3
4816: PPUSH
4817: LD_INT 101
4819: PPUSH
4820: LD_INT 8
4822: PPUSH
4823: LD_INT 0
4825: PPUSH
4826: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4830: LD_INT 0
4832: PPUSH
4833: LD_INT 3
4835: PPUSH
4836: LD_INT 2
4838: PPUSH
4839: CALL_OW 380
// un := CreateHuman ;
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: CALL_OW 44
4852: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4853: LD_VAR 0 2
4857: PPUSH
4858: LD_VAR 0 3
4862: PPUSH
4863: CALL_OW 52
// result := veh ;
4867: LD_ADDR_VAR 0 1
4871: PUSH
4872: LD_VAR 0 3
4876: ST_TO_ADDR
// end ; end_of_file
4877: LD_VAR 0 1
4881: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4882: LD_INT 0
4884: PPUSH
4885: PPUSH
4886: PPUSH
// usForces := [ ] ;
4887: LD_ADDR_EXP 40
4891: PUSH
4892: EMPTY
4893: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4894: LD_ADDR_EXP 42
4898: PUSH
4899: LD_INT 6
4901: PUSH
4902: LD_INT 32
4904: PUSH
4905: LD_INT 27
4907: PUSH
4908: LD_INT 1
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 4
4919: PUSH
4920: LD_INT 43
4922: PUSH
4923: LD_INT 24
4925: PUSH
4926: LD_INT 5
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: PUSH
4935: LD_INT 27
4937: PUSH
4938: LD_INT 29
4940: PUSH
4941: LD_INT 21
4943: PUSH
4944: LD_INT 0
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
4958: LD_INT 11
4960: PPUSH
4961: CALL_OW 274
4965: PPUSH
4966: LD_INT 1
4968: PPUSH
4969: LD_INT 150
4971: PUSH
4972: LD_INT 120
4974: PUSH
4975: LD_INT 100
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: LIST
4982: PUSH
4983: LD_OWVAR 67
4987: ARRAY
4988: PPUSH
4989: CALL_OW 277
// if Difficulty = 1 then
4993: LD_OWVAR 67
4997: PUSH
4998: LD_INT 1
5000: EQUAL
5001: IFFALSE 5010
// RemoveUnit ( hillBun ) ;
5003: LD_INT 14
5005: PPUSH
5006: CALL_OW 64
// uc_side := 1 ;
5010: LD_ADDR_OWVAR 20
5014: PUSH
5015: LD_INT 1
5017: ST_TO_ADDR
// uc_nation := 1 ;
5018: LD_ADDR_OWVAR 21
5022: PUSH
5023: LD_INT 1
5025: ST_TO_ADDR
// hc_gallery :=  ;
5026: LD_ADDR_OWVAR 33
5030: PUSH
5031: LD_STRING 
5033: ST_TO_ADDR
// hc_name :=  ;
5034: LD_ADDR_OWVAR 26
5038: PUSH
5039: LD_STRING 
5041: ST_TO_ADDR
// hc_importance := 0 ;
5042: LD_ADDR_OWVAR 32
5046: PUSH
5047: LD_INT 0
5049: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 3
5058: PPUSH
5059: CALL_OW 380
// usCommander := CreateHuman ;
5063: LD_ADDR_EXP 41
5067: PUSH
5068: CALL_OW 44
5072: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
5073: LD_EXP 41
5077: PPUSH
5078: LD_INT 11
5080: PPUSH
5081: CALL_OW 52
// if hillBun then
5085: LD_INT 14
5087: IFFALSE 5169
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5089: LD_INT 0
5091: PPUSH
5092: LD_INT 1
5094: PPUSH
5095: LD_INT 1
5097: PUSH
5098: LD_INT 2
5100: PUSH
5101: LD_INT 3
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: LIST
5108: PUSH
5109: LD_OWVAR 67
5113: ARRAY
5114: PPUSH
5115: CALL_OW 380
// un := CreateHuman ;
5119: LD_ADDR_VAR 0 3
5123: PUSH
5124: CALL_OW 44
5128: ST_TO_ADDR
// usForces := usForces union un ;
5129: LD_ADDR_EXP 40
5133: PUSH
5134: LD_EXP 40
5138: PUSH
5139: LD_VAR 0 3
5143: UNION
5144: ST_TO_ADDR
// SetDir ( un , 1 ) ;
5145: LD_VAR 0 3
5149: PPUSH
5150: LD_INT 1
5152: PPUSH
5153: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
5157: LD_VAR 0 3
5161: PPUSH
5162: LD_INT 14
5164: PPUSH
5165: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5169: LD_ADDR_VAR 0 2
5173: PUSH
5174: DOUBLE
5175: LD_INT 1
5177: DEC
5178: ST_TO_ADDR
5179: LD_INT 2
5181: PUSH
5182: LD_INT 3
5184: PUSH
5185: LD_INT 4
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: LIST
5192: PUSH
5193: LD_OWVAR 67
5197: ARRAY
5198: PUSH
5199: FOR_TO
5200: IFFALSE 5342
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5202: LD_INT 0
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: LD_INT 1
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: PUSH
5222: LD_OWVAR 67
5226: ARRAY
5227: PPUSH
5228: CALL_OW 380
// un := CreateHuman ;
5232: LD_ADDR_VAR 0 3
5236: PUSH
5237: CALL_OW 44
5241: ST_TO_ADDR
// usForces := usForces union un ;
5242: LD_ADDR_EXP 40
5246: PUSH
5247: LD_EXP 40
5251: PUSH
5252: LD_VAR 0 3
5256: UNION
5257: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5258: LD_VAR 0 3
5262: PPUSH
5263: LD_INT 39
5265: PPUSH
5266: LD_INT 24
5268: PPUSH
5269: LD_INT 4
5271: PPUSH
5272: LD_INT 0
5274: PPUSH
5275: CALL_OW 50
// if i < 3 then
5279: LD_VAR 0 2
5283: PUSH
5284: LD_INT 3
5286: LESS
5287: IFFALSE 5340
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
5289: LD_VAR 0 3
5293: PPUSH
5294: LD_INT 22
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: LD_INT 58
5306: PUSH
5307: EMPTY
5308: LIST
5309: PUSH
5310: LD_INT 30
5312: PUSH
5313: LD_INT 31
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: LIST
5324: PPUSH
5325: CALL_OW 69
5329: PUSH
5330: LD_VAR 0 2
5334: ARRAY
5335: PPUSH
5336: CALL_OW 120
// end ;
5340: GO 5199
5342: POP
5343: POP
// for i := 1 to 2 do
5344: LD_ADDR_VAR 0 2
5348: PUSH
5349: DOUBLE
5350: LD_INT 1
5352: DEC
5353: ST_TO_ADDR
5354: LD_INT 2
5356: PUSH
5357: FOR_TO
5358: IFFALSE 5422
// begin PrepareHuman ( false , 2 , 2 ) ;
5360: LD_INT 0
5362: PPUSH
5363: LD_INT 2
5365: PPUSH
5366: LD_INT 2
5368: PPUSH
5369: CALL_OW 380
// un := CreateHuman ;
5373: LD_ADDR_VAR 0 3
5377: PUSH
5378: CALL_OW 44
5382: ST_TO_ADDR
// usForces := usForces union un ;
5383: LD_ADDR_EXP 40
5387: PUSH
5388: LD_EXP 40
5392: PUSH
5393: LD_VAR 0 3
5397: UNION
5398: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5399: LD_VAR 0 3
5403: PPUSH
5404: LD_INT 39
5406: PPUSH
5407: LD_INT 24
5409: PPUSH
5410: LD_INT 4
5412: PPUSH
5413: LD_INT 0
5415: PPUSH
5416: CALL_OW 50
// end ;
5420: GO 5357
5422: POP
5423: POP
// PrepareHuman ( false , 4 , 1 ) ;
5424: LD_INT 0
5426: PPUSH
5427: LD_INT 4
5429: PPUSH
5430: LD_INT 1
5432: PPUSH
5433: CALL_OW 380
// un := CreateHuman ;
5437: LD_ADDR_VAR 0 3
5441: PUSH
5442: CALL_OW 44
5446: ST_TO_ADDR
// usForces := usForces union un ;
5447: LD_ADDR_EXP 40
5451: PUSH
5452: LD_EXP 40
5456: PUSH
5457: LD_VAR 0 3
5461: UNION
5462: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5463: LD_VAR 0 3
5467: PPUSH
5468: LD_INT 39
5470: PPUSH
5471: LD_INT 24
5473: PPUSH
5474: LD_INT 4
5476: PPUSH
5477: LD_INT 0
5479: PPUSH
5480: CALL_OW 50
// end ;
5484: LD_VAR 0 1
5488: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured do var i , b , eng , sol , sci ;
5489: LD_EXP 40
5493: PUSH
5494: LD_EXP 6
5498: NOT
5499: AND
5500: IFFALSE 5931
5502: GO 5504
5504: DISABLE
5505: LD_INT 0
5507: PPUSH
5508: PPUSH
5509: PPUSH
5510: PPUSH
5511: PPUSH
// begin enable ;
5512: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
5513: LD_ADDR_VAR 0 3
5517: PUSH
5518: LD_EXP 40
5522: PPUSH
5523: LD_INT 25
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 72
5537: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
5538: LD_ADDR_VAR 0 4
5542: PUSH
5543: LD_EXP 40
5547: PPUSH
5548: LD_INT 25
5550: PUSH
5551: LD_INT 1
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PPUSH
5558: CALL_OW 72
5562: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
5563: LD_ADDR_VAR 0 5
5567: PUSH
5568: LD_EXP 40
5572: PPUSH
5573: LD_INT 25
5575: PUSH
5576: LD_INT 4
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: PPUSH
5583: CALL_OW 72
5587: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
5588: LD_INT 7
5590: PPUSH
5591: LD_INT 22
5593: PUSH
5594: LD_INT 2
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: PPUSH
5601: CALL_OW 70
5605: PUSH
5606: LD_INT 1
5608: EQUAL
5609: IFFALSE 5685
// for i in sol do
5611: LD_ADDR_VAR 0 1
5615: PUSH
5616: LD_VAR 0 4
5620: PUSH
5621: FOR_IN
5622: IFFALSE 5683
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
5624: LD_VAR 0 1
5628: PPUSH
5629: CALL_OW 310
5633: NOT
5634: PUSH
5635: LD_VAR 0 1
5639: PPUSH
5640: CALL_OW 310
5644: PPUSH
5645: CALL_OW 266
5649: PUSH
5650: LD_INT 4
5652: EQUAL
5653: NOT
5654: OR
5655: IFFALSE 5681
// begin ComExitBuilding ( i ) ;
5657: LD_VAR 0 1
5661: PPUSH
5662: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
5666: LD_VAR 0 1
5670: PPUSH
5671: LD_INT 37
5673: PPUSH
5674: LD_INT 23
5676: PPUSH
5677: CALL_OW 174
// end ;
5681: GO 5621
5683: POP
5684: POP
// if eng then
5685: LD_VAR 0 3
5689: IFFALSE 5931
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: LD_INT 22
5698: PUSH
5699: LD_INT 1
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 95
5708: PUSH
5709: LD_INT 7
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 21
5718: PUSH
5719: LD_INT 3
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: PUSH
5726: LD_INT 3
5728: PUSH
5729: LD_INT 24
5731: PUSH
5732: LD_INT 1000
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: PPUSH
5749: CALL_OW 69
5753: ST_TO_ADDR
// if b then
5754: LD_VAR 0 2
5758: IFFALSE 5789
// begin ComExitBuilding ( eng ) ;
5760: LD_VAR 0 3
5764: PPUSH
5765: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: LD_VAR 0 2
5778: PUSH
5779: LD_INT 1
5781: ARRAY
5782: PPUSH
5783: CALL_OW 190
// end else
5787: GO 5931
// begin for i in eng do
5789: LD_ADDR_VAR 0 1
5793: PUSH
5794: LD_VAR 0 3
5798: PUSH
5799: FOR_IN
5800: IFFALSE 5929
// if not HasTask ( i ) then
5802: LD_VAR 0 1
5806: PPUSH
5807: CALL_OW 314
5811: NOT
5812: IFFALSE 5927
// begin if americanBuildList then
5814: LD_EXP 42
5818: IFFALSE 5903
// begin if IsInUnit ( i ) then
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 310
5829: IFFALSE 5840
// ComExitBuilding ( i ) ;
5831: LD_VAR 0 1
5835: PPUSH
5836: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5840: LD_VAR 0 1
5844: PPUSH
5845: LD_EXP 42
5849: PUSH
5850: LD_INT 1
5852: ARRAY
5853: PUSH
5854: LD_INT 1
5856: ARRAY
5857: PPUSH
5858: LD_EXP 42
5862: PUSH
5863: LD_INT 1
5865: ARRAY
5866: PUSH
5867: LD_INT 2
5869: ARRAY
5870: PPUSH
5871: LD_EXP 42
5875: PUSH
5876: LD_INT 1
5878: ARRAY
5879: PUSH
5880: LD_INT 3
5882: ARRAY
5883: PPUSH
5884: LD_EXP 42
5888: PUSH
5889: LD_INT 1
5891: ARRAY
5892: PUSH
5893: LD_INT 4
5895: ARRAY
5896: PPUSH
5897: CALL_OW 205
// end else
5901: GO 5927
// if not IsInUnit ( i ) then
5903: LD_VAR 0 1
5907: PPUSH
5908: CALL_OW 310
5912: NOT
5913: IFFALSE 5927
// ComEnterUnit ( i , usDepot ) ;
5915: LD_VAR 0 1
5919: PPUSH
5920: LD_INT 11
5922: PPUSH
5923: CALL_OW 120
// end ;
5927: GO 5799
5929: POP
5930: POP
// end ; end ; end ;
5931: PPOPN 5
5933: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5934: LD_INT 0
5936: PPUSH
5937: PPUSH
5938: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5939: LD_ADDR_VAR 0 3
5943: PUSH
5944: LD_INT 35
5946: PUSH
5947: LD_INT 45
5949: PUSH
5950: LD_INT 48
5952: PUSH
5953: LD_EXP 51
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: ST_TO_ADDR
// for i in tech do
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: LD_VAR 0 3
5973: PUSH
5974: FOR_IN
5975: IFFALSE 5993
// AddComResearch ( lab , i ) ;
5977: LD_VAR 0 1
5981: PPUSH
5982: LD_VAR 0 4
5986: PPUSH
5987: CALL_OW 184
5991: GO 5974
5993: POP
5994: POP
// end ;
5995: LD_VAR 0 2
5999: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
6000: LD_EXP 11
6004: PUSH
6005: LD_EXP 19
6009: PUSH
6010: LD_EXP 23
6014: LESSEQUAL
6015: AND
6016: IFFALSE 6041
6018: GO 6020
6020: DISABLE
// begin enable ;
6021: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
6022: LD_INT 35
6024: PPUSH
6025: LD_INT 2065
6027: PPUSH
6028: CALL_OW 12
6032: PPUSH
6033: CALL_OW 67
// SendConvoy ;
6037: CALL 6139 0 0
// end ;
6041: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
6042: LD_EXP 6
6046: PUSH
6047: LD_EXP 15
6051: AND
6052: IFFALSE 6138
6054: GO 6056
6056: DISABLE
// begin if americanHasEscaped then
6057: LD_EXP 7
6061: IFFALSE 6072
// wait ( 3 3$20 ) else
6063: LD_INT 7000
6065: PPUSH
6066: CALL_OW 67
6070: GO 6079
// wait ( 6 6$40 ) ;
6072: LD_INT 14000
6074: PPUSH
6075: CALL_OW 67
// SendAttack ;
6079: CALL 6854 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
6083: LD_INT 14000
6085: PUSH
6086: LD_INT 11900
6088: PUSH
6089: LD_INT 9800
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: LIST
6096: PUSH
6097: LD_OWVAR 67
6101: ARRAY
6102: PPUSH
6103: CALL_OW 67
// SendAttack ;
6107: CALL 6854 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
6111: LD_EXP 16
6115: PUSH
6116: LD_INT 6
6118: PUSH
6119: LD_INT 7
6121: PUSH
6122: LD_INT 8
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_OWVAR 67
6134: ARRAY
6135: LESS
6136: IFFALSE 6083
// end ;
6138: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
6139: LD_INT 0
6141: PPUSH
6142: PPUSH
6143: PPUSH
6144: PPUSH
6145: PPUSH
6146: PPUSH
6147: PPUSH
6148: PPUSH
// road := rand ( 1 , 2 ) ;
6149: LD_ADDR_VAR 0 4
6153: PUSH
6154: LD_INT 1
6156: PPUSH
6157: LD_INT 2
6159: PPUSH
6160: CALL_OW 12
6164: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
6165: LD_ADDR_VAR 0 8
6169: PUSH
6170: LD_INT 3
6172: PUSH
6173: LD_INT 8
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_VAR 0 4
6184: ARRAY
6185: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
6186: LD_ADDR_VAR 0 5
6190: PUSH
6191: LD_INT 35
6193: PUSH
6194: LD_INT 66
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: PUSH
6205: LD_INT 101
6207: PUSH
6208: LD_INT 8
6210: PUSH
6211: LD_INT 4
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: LIST
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
6223: LD_ADDR_VAR 0 6
6227: PUSH
6228: LD_INT 34
6230: PUSH
6231: LD_INT 67
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: LD_INT 38
6240: PUSH
6241: LD_INT 62
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 43
6250: PUSH
6251: LD_INT 54
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 57
6260: PUSH
6261: LD_INT 57
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PUSH
6268: LD_INT 77
6270: PUSH
6271: LD_INT 71
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 86
6280: PUSH
6281: LD_INT 60
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 89
6290: PUSH
6291: LD_INT 35
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 93
6300: PUSH
6301: LD_INT 17
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 97
6310: PUSH
6311: LD_INT 10
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 103
6320: PUSH
6321: LD_INT 9
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: ST_TO_ADDR
// if road = 2 then
6340: LD_VAR 0 4
6344: PUSH
6345: LD_INT 2
6347: EQUAL
6348: IFFALSE 6365
// points := ReverseArray ( points ) ;
6350: LD_ADDR_VAR 0 6
6354: PUSH
6355: LD_VAR 0 6
6359: PPUSH
6360: CALL 1032 0 1
6364: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
6365: LD_INT 4
6367: PPUSH
6368: LD_INT 1
6370: PPUSH
6371: LD_INT 2
6373: PPUSH
6374: LD_INT 1
6376: PPUSH
6377: LD_INT 1
6379: PPUSH
6380: LD_INT 12
6382: PPUSH
6383: LD_INT 80
6385: PPUSH
6386: CALL 344 0 7
// veh := CreateVehicle ;
6390: LD_ADDR_VAR 0 3
6394: PUSH
6395: CALL_OW 45
6399: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
6400: LD_VAR 0 3
6404: PPUSH
6405: LD_VAR 0 5
6409: PUSH
6410: LD_VAR 0 4
6414: ARRAY
6415: PUSH
6416: LD_INT 3
6418: ARRAY
6419: PPUSH
6420: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
6424: LD_VAR 0 3
6428: PPUSH
6429: LD_VAR 0 5
6433: PUSH
6434: LD_VAR 0 4
6438: ARRAY
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: LD_VAR 0 5
6448: PUSH
6449: LD_VAR 0 4
6453: ARRAY
6454: PUSH
6455: LD_INT 2
6457: ARRAY
6458: PPUSH
6459: LD_INT 0
6461: PPUSH
6462: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
6466: LD_INT 0
6468: PPUSH
6469: LD_INT 1
6471: PPUSH
6472: LD_OWVAR 67
6476: PPUSH
6477: CALL_OW 380
// un := CreateHuman ;
6481: LD_ADDR_VAR 0 2
6485: PUSH
6486: CALL_OW 44
6490: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6491: LD_VAR 0 2
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: CALL_OW 52
// if Prob ( 50 + tick mod 30 ) or convoyCounter < 3 then
6505: LD_INT 50
6507: PUSH
6508: LD_OWVAR 1
6512: PUSH
6513: LD_INT 30
6515: MOD
6516: PLUS
6517: PPUSH
6518: CALL_OW 13
6522: PUSH
6523: LD_EXP 19
6527: PUSH
6528: LD_INT 3
6530: LESS
6531: OR
6532: IFFALSE 6549
// SetCargo ( veh , mat_cans , 100 ) ;
6534: LD_VAR 0 3
6538: PPUSH
6539: LD_INT 1
6541: PPUSH
6542: LD_INT 100
6544: PPUSH
6545: CALL_OW 290
// for i := 2 to points do
6549: LD_ADDR_VAR 0 7
6553: PUSH
6554: DOUBLE
6555: LD_INT 2
6557: DEC
6558: ST_TO_ADDR
6559: LD_VAR 0 6
6563: PUSH
6564: FOR_TO
6565: IFFALSE 6608
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
6567: LD_VAR 0 3
6571: PPUSH
6572: LD_VAR 0 6
6576: PUSH
6577: LD_VAR 0 7
6581: ARRAY
6582: PUSH
6583: LD_INT 1
6585: ARRAY
6586: PPUSH
6587: LD_VAR 0 6
6591: PUSH
6592: LD_VAR 0 7
6596: ARRAY
6597: PUSH
6598: LD_INT 2
6600: ARRAY
6601: PPUSH
6602: CALL_OW 171
6606: GO 6564
6608: POP
6609: POP
// convoyCounter := convoyCounter + 1 ;
6610: LD_ADDR_EXP 19
6614: PUSH
6615: LD_EXP 19
6619: PUSH
6620: LD_INT 1
6622: PLUS
6623: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6624: LD_INT 35
6626: PPUSH
6627: CALL_OW 67
// if not HasTask ( veh ) then
6631: LD_VAR 0 3
6635: PPUSH
6636: CALL_OW 314
6640: NOT
6641: IFFALSE 6682
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6643: LD_VAR 0 3
6647: PPUSH
6648: LD_VAR 0 6
6652: PUSH
6653: LD_VAR 0 6
6657: ARRAY
6658: PUSH
6659: LD_INT 1
6661: ARRAY
6662: PPUSH
6663: LD_VAR 0 6
6667: PUSH
6668: LD_VAR 0 6
6672: ARRAY
6673: PUSH
6674: LD_INT 2
6676: ARRAY
6677: PPUSH
6678: CALL_OW 111
// if not IsOk ( veh ) then
6682: LD_VAR 0 3
6686: PPUSH
6687: CALL_OW 302
6691: NOT
6692: IFFALSE 6733
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6694: LD_VAR 0 2
6698: PPUSH
6699: LD_VAR 0 6
6703: PUSH
6704: LD_VAR 0 6
6708: ARRAY
6709: PUSH
6710: LD_INT 1
6712: ARRAY
6713: PPUSH
6714: LD_VAR 0 6
6718: PUSH
6719: LD_VAR 0 6
6723: ARRAY
6724: PUSH
6725: LD_INT 2
6727: ARRAY
6728: PPUSH
6729: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6733: LD_VAR 0 3
6737: PPUSH
6738: LD_VAR 0 8
6742: PPUSH
6743: CALL_OW 308
6747: PUSH
6748: LD_VAR 0 2
6752: PPUSH
6753: LD_VAR 0 8
6757: PPUSH
6758: CALL_OW 308
6762: OR
6763: IFFALSE 6624
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6765: LD_VAR 0 2
6769: PPUSH
6770: CALL_OW 302
6774: PUSH
6775: LD_VAR 0 3
6779: PPUSH
6780: CALL_OW 302
6784: NOT
6785: AND
6786: PUSH
6787: LD_VAR 0 2
6791: PPUSH
6792: LD_VAR 0 8
6796: PPUSH
6797: CALL_OW 308
6801: AND
6802: IFFALSE 6813
// RemoveUnit ( un ) ;
6804: LD_VAR 0 2
6808: PPUSH
6809: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6813: LD_VAR 0 3
6817: PPUSH
6818: LD_VAR 0 8
6822: PPUSH
6823: CALL_OW 308
6827: PUSH
6828: LD_VAR 0 3
6832: PPUSH
6833: CALL_OW 302
6837: AND
6838: IFFALSE 6849
// RemoveUnit ( veh ) ;
6840: LD_VAR 0 3
6844: PPUSH
6845: CALL_OW 64
// end ;
6849: LD_VAR 0 1
6853: RET
// export function SendAttack ; var un , veh , i ; begin
6854: LD_INT 0
6856: PPUSH
6857: PPUSH
6858: PPUSH
6859: PPUSH
// IncomingAttack ;
6860: CALL 15176 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6864: LD_INT 2100
6866: PPUSH
6867: LD_INT 3500
6869: PPUSH
6870: CALL_OW 12
6874: PPUSH
6875: CALL_OW 67
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] + attackWave div 3 do
6879: LD_ADDR_VAR 0 4
6883: PUSH
6884: DOUBLE
6885: LD_INT 1
6887: DEC
6888: ST_TO_ADDR
6889: LD_INT 3
6891: PUSH
6892: LD_INT 3
6894: PUSH
6895: LD_INT 4
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: LIST
6902: PUSH
6903: LD_OWVAR 67
6907: ARRAY
6908: PUSH
6909: LD_EXP 16
6913: PUSH
6914: LD_INT 3
6916: DIV
6917: PLUS
6918: PUSH
6919: FOR_TO
6920: IFFALSE 7032
// begin uc_side := 1 ;
6922: LD_ADDR_OWVAR 20
6926: PUSH
6927: LD_INT 1
6929: ST_TO_ADDR
// uc_nation := 1 ;
6930: LD_ADDR_OWVAR 21
6934: PUSH
6935: LD_INT 1
6937: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
6938: LD_INT 0
6940: PPUSH
6941: LD_INT 1
6943: PPUSH
6944: LD_INT 2
6946: PUSH
6947: LD_INT 3
6949: PUSH
6950: LD_INT 4
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: PUSH
6958: LD_OWVAR 67
6962: ARRAY
6963: PPUSH
6964: CALL_OW 380
// un := CreateHuman ;
6968: LD_ADDR_VAR 0 2
6972: PUSH
6973: CALL_OW 44
6977: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6978: LD_VAR 0 2
6982: PPUSH
6983: LD_INT 37
6985: PPUSH
6986: LD_INT 70
6988: PPUSH
6989: LD_INT 3
6991: PPUSH
6992: LD_INT 0
6994: PPUSH
6995: CALL_OW 50
// usAttackers := usAttackers union un ;
6999: LD_ADDR_EXP 43
7003: PUSH
7004: LD_EXP 43
7008: PUSH
7009: LD_VAR 0 2
7013: UNION
7014: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
7015: LD_VAR 0 2
7019: PPUSH
7020: LD_INT 40
7022: PPUSH
7023: LD_INT 65
7025: PPUSH
7026: CALL_OW 111
// end ;
7030: GO 6919
7032: POP
7033: POP
// uc_side := 1 ;
7034: LD_ADDR_OWVAR 20
7038: PUSH
7039: LD_INT 1
7041: ST_TO_ADDR
// uc_nation := 1 ;
7042: LD_ADDR_OWVAR 21
7046: PUSH
7047: LD_INT 1
7049: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
7050: LD_INT 0
7052: PPUSH
7053: LD_INT 4
7055: PPUSH
7056: LD_INT 2
7058: PPUSH
7059: CALL_OW 380
// un := CreateHuman ;
7063: LD_ADDR_VAR 0 2
7067: PUSH
7068: CALL_OW 44
7072: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
7073: LD_VAR 0 2
7077: PPUSH
7078: LD_INT 37
7080: PPUSH
7081: LD_INT 70
7083: PPUSH
7084: LD_INT 3
7086: PPUSH
7087: LD_INT 0
7089: PPUSH
7090: CALL_OW 50
// usAttackers := usAttackers union un ;
7094: LD_ADDR_EXP 43
7098: PUSH
7099: LD_EXP 43
7103: PUSH
7104: LD_VAR 0 2
7108: UNION
7109: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
7110: LD_VAR 0 2
7114: PPUSH
7115: LD_INT 40
7117: PPUSH
7118: LD_INT 65
7120: PPUSH
7121: CALL_OW 111
// if attackWave > 1 or Difficulty > 1 then
7125: LD_EXP 16
7129: PUSH
7130: LD_INT 1
7132: GREATER
7133: PUSH
7134: LD_OWVAR 67
7138: PUSH
7139: LD_INT 1
7141: GREATER
7142: OR
7143: IFFALSE 7346
// begin for i := 1 to Difficulty + attackWave div 4 do
7145: LD_ADDR_VAR 0 4
7149: PUSH
7150: DOUBLE
7151: LD_INT 1
7153: DEC
7154: ST_TO_ADDR
7155: LD_OWVAR 67
7159: PUSH
7160: LD_EXP 16
7164: PUSH
7165: LD_INT 4
7167: DIV
7168: PLUS
7169: PUSH
7170: FOR_TO
7171: IFFALSE 7344
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
7173: LD_ADDR_VAR 0 3
7177: PUSH
7178: LD_INT 1
7180: PPUSH
7181: LD_INT 1
7183: PPUSH
7184: LD_INT 2
7186: PPUSH
7187: LD_INT 2
7189: PPUSH
7190: LD_INT 1
7192: PPUSH
7193: LD_INT 4
7195: PUSH
7196: LD_INT 3
7198: PUSH
7199: LD_INT 2
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 1
7209: PPUSH
7210: LD_INT 3
7212: PPUSH
7213: CALL_OW 12
7217: ARRAY
7218: PPUSH
7219: LD_INT 90
7221: PPUSH
7222: CALL 344 0 7
7226: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
7227: LD_VAR 0 3
7231: PPUSH
7232: LD_INT 35
7234: PPUSH
7235: LD_INT 65
7237: PPUSH
7238: LD_INT 0
7240: PPUSH
7241: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
7245: LD_INT 0
7247: PPUSH
7248: LD_INT 3
7250: PPUSH
7251: LD_OWVAR 67
7255: PUSH
7256: LD_INT 1
7258: PLUS
7259: PPUSH
7260: CALL_OW 380
// un := CreateHuman ;
7264: LD_ADDR_VAR 0 2
7268: PUSH
7269: CALL_OW 44
7273: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7274: LD_VAR 0 2
7278: PPUSH
7279: LD_VAR 0 3
7283: PPUSH
7284: CALL_OW 52
// usAttackers := usAttackers union un ;
7288: LD_ADDR_EXP 43
7292: PUSH
7293: LD_EXP 43
7297: PUSH
7298: LD_VAR 0 2
7302: UNION
7303: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
7304: LD_VAR 0 3
7308: PPUSH
7309: LD_INT 39
7311: PPUSH
7312: LD_INT 60
7314: PPUSH
7315: CALL_OW 111
// wait ( 0 0$2 ) ;
7319: LD_INT 70
7321: PPUSH
7322: CALL_OW 67
// usAttackers := usAttackers union veh ;
7326: LD_ADDR_EXP 43
7330: PUSH
7331: LD_EXP 43
7335: PUSH
7336: LD_VAR 0 3
7340: UNION
7341: ST_TO_ADDR
// end ;
7342: GO 7170
7344: POP
7345: POP
// end ; attackWave := attackWave + 1 ;
7346: LD_ADDR_EXP 16
7350: PUSH
7351: LD_EXP 16
7355: PUSH
7356: LD_INT 1
7358: PLUS
7359: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
7360: LD_EXP 20
7364: PPUSH
7365: CALL_OW 427
// end ;
7369: LD_VAR 0 1
7373: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
7374: LD_INT 0
7376: PPUSH
7377: PPUSH
7378: PPUSH
7379: PPUSH
7380: PPUSH
7381: PPUSH
7382: PPUSH
7383: PPUSH
7384: PPUSH
7385: PPUSH
7386: PPUSH
// if retreatAllowed then
7387: LD_EXP 10
7391: IFFALSE 7403
// strategy := 2 else
7393: LD_ADDR_VAR 0 5
7397: PUSH
7398: LD_INT 2
7400: ST_TO_ADDR
7401: GO 7419
// strategy := rand ( 0 , 2 ) ;
7403: LD_ADDR_VAR 0 5
7407: PUSH
7408: LD_INT 0
7410: PPUSH
7411: LD_INT 2
7413: PPUSH
7414: CALL_OW 12
7418: ST_TO_ADDR
// attackFormula := [ ] ;
7419: LD_ADDR_VAR 0 6
7423: PUSH
7424: EMPTY
7425: ST_TO_ADDR
// case strategy of 0 :
7426: LD_VAR 0 5
7430: PUSH
7431: LD_INT 0
7433: DOUBLE
7434: EQUAL
7435: IFTRUE 7439
7437: GO 7769
7439: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
7440: LD_INT 11
7442: PPUSH
7443: LD_INT 22
7445: PUSH
7446: LD_INT 2
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 30
7455: PUSH
7456: LD_INT 4
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: PPUSH
7467: CALL_OW 70
7471: NOT
7472: IFFALSE 7544
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7474: LD_ADDR_VAR 0 6
7478: PUSH
7479: LD_INT 41
7481: PUSH
7482: LD_INT 34
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: EMPTY
7490: LIST
7491: PUSH
7492: LD_INT 53
7494: PUSH
7495: LD_INT 62
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 37
7504: PUSH
7505: LD_INT 63
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 44
7514: PUSH
7515: LD_INT 45
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: LD_INT 37
7524: PUSH
7525: LD_INT 28
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: ST_TO_ADDR
7542: GO 7767
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
7544: LD_INT 12
7546: PPUSH
7547: LD_INT 22
7549: PUSH
7550: LD_INT 2
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: LD_INT 30
7562: PUSH
7563: LD_INT 4
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 30
7572: PUSH
7573: LD_INT 31
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PUSH
7580: LD_INT 30
7582: PUSH
7583: LD_INT 32
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PPUSH
7600: CALL_OW 70
7604: NOT
7605: IFFALSE 7688
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7607: LD_ADDR_VAR 0 6
7611: PUSH
7612: LD_INT 27
7614: PUSH
7615: LD_INT 42
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 27
7624: PUSH
7625: LD_INT 32
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 53
7638: PUSH
7639: LD_INT 62
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 37
7648: PUSH
7649: LD_INT 63
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 44
7658: PUSH
7659: LD_INT 45
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: LD_INT 37
7668: PUSH
7669: LD_INT 28
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: ST_TO_ADDR
7686: GO 7767
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7688: LD_ADDR_VAR 0 6
7692: PUSH
7693: LD_INT 71
7695: PUSH
7696: LD_INT 67
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 54
7705: PUSH
7706: LD_INT 35
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: LD_INT 63
7719: PUSH
7720: LD_INT 40
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 37
7729: PUSH
7730: LD_INT 63
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 44
7739: PUSH
7740: LD_INT 45
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 37
7749: PUSH
7750: LD_INT 28
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: ST_TO_ADDR
// end ; 1 :
7767: GO 7972
7769: LD_INT 1
7771: DOUBLE
7772: EQUAL
7773: IFTRUE 7777
7775: GO 7881
7777: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7778: LD_ADDR_VAR 0 6
7782: PUSH
7783: LD_INT 71
7785: PUSH
7786: LD_INT 67
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: LD_INT 82
7795: PUSH
7796: LD_INT 23
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: PUSH
7803: LD_INT 53
7805: PUSH
7806: LD_INT 7
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 43
7815: PUSH
7816: LD_INT 10
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 53
7831: PUSH
7832: LD_INT 62
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 37
7841: PUSH
7842: LD_INT 63
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: LD_INT 44
7851: PUSH
7852: LD_INT 45
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 37
7861: PUSH
7862: LD_INT 28
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: ST_TO_ADDR
7879: GO 7972
7881: LD_INT 2
7883: DOUBLE
7884: EQUAL
7885: IFTRUE 7889
7887: GO 7971
7889: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7890: LD_ADDR_VAR 0 6
7894: PUSH
7895: LD_INT 90
7897: PUSH
7898: LD_INT 59
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 108
7907: PUSH
7908: LD_INT 64
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 82
7921: PUSH
7922: LD_INT 75
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 73
7931: PUSH
7932: LD_INT 67
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: LD_INT 101
7941: PUSH
7942: LD_INT 65
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 108
7951: PUSH
7952: LD_INT 62
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: ST_TO_ADDR
7969: GO 7972
7971: POP
// if not attackFormula then
7972: LD_VAR 0 6
7976: NOT
7977: IFFALSE 7981
// exit ;
7979: GO 9413
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7981: LD_ADDR_VAR 0 7
7985: PUSH
7986: LD_EXP 43
7990: PPUSH
7991: LD_INT 25
7993: PUSH
7994: LD_INT 1
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PPUSH
8001: CALL_OW 72
8005: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
8006: LD_ADDR_VAR 0 8
8010: PUSH
8011: LD_EXP 43
8015: PPUSH
8016: LD_INT 25
8018: PUSH
8019: LD_INT 4
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PPUSH
8026: CALL_OW 72
8030: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
8031: LD_ADDR_VAR 0 9
8035: PUSH
8036: LD_EXP 43
8040: PPUSH
8041: LD_INT 25
8043: PUSH
8044: LD_INT 3
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PPUSH
8051: CALL_OW 72
8055: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
8056: LD_ADDR_VAR 0 10
8060: PUSH
8061: LD_EXP 43
8065: PPUSH
8066: LD_INT 21
8068: PUSH
8069: LD_INT 2
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: PPUSH
8076: CALL_OW 72
8080: ST_TO_ADDR
// if sci then
8081: LD_VAR 0 8
8085: IFFALSE 8122
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8087: LD_VAR 0 8
8091: PPUSH
8092: LD_VAR 0 6
8096: PUSH
8097: LD_INT 2
8099: ARRAY
8100: PUSH
8101: LD_INT 1
8103: ARRAY
8104: PPUSH
8105: LD_VAR 0 6
8109: PUSH
8110: LD_INT 2
8112: ARRAY
8113: PUSH
8114: LD_INT 2
8116: ARRAY
8117: PPUSH
8118: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8122: LD_INT 35
8124: PPUSH
8125: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
8129: LD_ADDR_VAR 0 7
8133: PUSH
8134: LD_EXP 43
8138: PPUSH
8139: LD_INT 25
8141: PUSH
8142: LD_INT 1
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: PPUSH
8149: CALL_OW 72
8153: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
8154: LD_ADDR_VAR 0 8
8158: PUSH
8159: LD_EXP 43
8163: PPUSH
8164: LD_INT 25
8166: PUSH
8167: LD_INT 4
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PPUSH
8174: CALL_OW 72
8178: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
8179: LD_ADDR_VAR 0 9
8183: PUSH
8184: LD_EXP 43
8188: PPUSH
8189: LD_INT 25
8191: PUSH
8192: LD_INT 3
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: PPUSH
8199: CALL_OW 72
8203: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
8204: LD_ADDR_VAR 0 10
8208: PUSH
8209: LD_EXP 43
8213: PPUSH
8214: LD_INT 21
8216: PUSH
8217: LD_INT 2
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PPUSH
8224: CALL_OW 72
8228: ST_TO_ADDR
// if sol then
8229: LD_VAR 0 7
8233: IFFALSE 8628
// begin for i in sol do
8235: LD_ADDR_VAR 0 2
8239: PUSH
8240: LD_VAR 0 7
8244: PUSH
8245: FOR_IN
8246: IFFALSE 8626
// begin tag := GetTag ( i ) ;
8248: LD_ADDR_VAR 0 4
8252: PUSH
8253: LD_VAR 0 2
8257: PPUSH
8258: CALL_OW 110
8262: ST_TO_ADDR
// if not tag then
8263: LD_VAR 0 4
8267: NOT
8268: IFFALSE 8386
// begin if GetLives ( i ) = 1000 then
8270: LD_VAR 0 2
8274: PPUSH
8275: CALL_OW 256
8279: PUSH
8280: LD_INT 1000
8282: EQUAL
8283: IFFALSE 8299
// SetTag ( i , 1 ) else
8285: LD_VAR 0 2
8289: PPUSH
8290: LD_INT 1
8292: PPUSH
8293: CALL_OW 109
8297: GO 8384
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 6 then
8299: LD_VAR 0 2
8303: PPUSH
8304: LD_VAR 0 6
8308: PUSH
8309: LD_INT 2
8311: ARRAY
8312: PUSH
8313: LD_INT 1
8315: ARRAY
8316: PPUSH
8317: LD_VAR 0 6
8321: PUSH
8322: LD_INT 2
8324: ARRAY
8325: PUSH
8326: LD_INT 2
8328: ARRAY
8329: PPUSH
8330: CALL_OW 297
8334: PUSH
8335: LD_INT 6
8337: GREATER
8338: IFFALSE 8384
// begin ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8340: LD_VAR 0 2
8344: PPUSH
8345: LD_VAR 0 6
8349: PUSH
8350: LD_INT 2
8352: ARRAY
8353: PUSH
8354: LD_INT 1
8356: ARRAY
8357: PPUSH
8358: LD_VAR 0 6
8362: PUSH
8363: LD_INT 2
8365: ARRAY
8366: PUSH
8367: LD_INT 2
8369: ARRAY
8370: PPUSH
8371: CALL_OW 111
// AddComHold ( i ) ;
8375: LD_VAR 0 2
8379: PPUSH
8380: CALL_OW 200
// end ; end else
8384: GO 8624
// begin if GetLives ( i ) < 720 then
8386: LD_VAR 0 2
8390: PPUSH
8391: CALL_OW 256
8395: PUSH
8396: LD_INT 720
8398: LESS
8399: IFFALSE 8415
// SetTag ( i , 0 ) else
8401: LD_VAR 0 2
8405: PPUSH
8406: LD_INT 0
8408: PPUSH
8409: CALL_OW 109
8413: GO 8624
// if tag <= attackFormula [ 1 ] then
8415: LD_VAR 0 4
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: LD_INT 1
8427: ARRAY
8428: LESSEQUAL
8429: IFFALSE 8590
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
8431: LD_VAR 0 2
8435: PPUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_INT 1
8443: ARRAY
8444: PUSH
8445: LD_VAR 0 4
8449: ARRAY
8450: PUSH
8451: LD_INT 1
8453: ARRAY
8454: PPUSH
8455: LD_VAR 0 6
8459: PUSH
8460: LD_INT 1
8462: ARRAY
8463: PUSH
8464: LD_VAR 0 4
8468: ARRAY
8469: PUSH
8470: LD_INT 2
8472: ARRAY
8473: PPUSH
8474: CALL_OW 297
8478: PUSH
8479: LD_INT 6
8481: GREATER
8482: IFFALSE 8533
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
8484: LD_VAR 0 2
8488: PPUSH
8489: LD_VAR 0 6
8493: PUSH
8494: LD_INT 1
8496: ARRAY
8497: PUSH
8498: LD_VAR 0 4
8502: ARRAY
8503: PUSH
8504: LD_INT 1
8506: ARRAY
8507: PPUSH
8508: LD_VAR 0 6
8512: PUSH
8513: LD_INT 1
8515: ARRAY
8516: PUSH
8517: LD_VAR 0 4
8521: ARRAY
8522: PUSH
8523: LD_INT 2
8525: ARRAY
8526: PPUSH
8527: CALL_OW 114
8531: GO 8588
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8533: LD_INT 81
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 91
8545: PUSH
8546: LD_VAR 0 2
8550: PUSH
8551: LD_INT 10
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PPUSH
8563: CALL_OW 69
8567: NOT
8568: IFFALSE 8588
// SetTag ( i , tag + 1 ) ;
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_VAR 0 4
8579: PUSH
8580: LD_INT 1
8582: PLUS
8583: PPUSH
8584: CALL_OW 109
// end else
8588: GO 8624
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8590: LD_VAR 0 2
8594: PPUSH
8595: LD_INT 81
8597: PUSH
8598: LD_INT 1
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PPUSH
8605: CALL_OW 69
8609: PPUSH
8610: LD_VAR 0 2
8614: PPUSH
8615: CALL_OW 74
8619: PPUSH
8620: CALL_OW 115
// end ; end ;
8624: GO 8245
8626: POP
8627: POP
// end ; if sci then
8628: LD_VAR 0 8
8632: IFFALSE 8791
// begin if not sol and not mech then
8634: LD_VAR 0 7
8638: NOT
8639: PUSH
8640: LD_VAR 0 9
8644: NOT
8645: AND
8646: IFFALSE 8698
// begin for i in sci do
8648: LD_ADDR_VAR 0 2
8652: PUSH
8653: LD_VAR 0 8
8657: PUSH
8658: FOR_IN
8659: IFFALSE 8694
// begin usForces := usForces union i ;
8661: LD_ADDR_EXP 40
8665: PUSH
8666: LD_EXP 40
8670: PUSH
8671: LD_VAR 0 2
8675: UNION
8676: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8677: LD_VAR 0 2
8681: PPUSH
8682: LD_INT 34
8684: PPUSH
8685: LD_INT 68
8687: PPUSH
8688: CALL_OW 111
// end ;
8692: GO 8658
8694: POP
8695: POP
// end else
8696: GO 8791
// for i in sci do
8698: LD_ADDR_VAR 0 2
8702: PUSH
8703: LD_VAR 0 8
8707: PUSH
8708: FOR_IN
8709: IFFALSE 8789
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 8 then
8711: LD_VAR 0 2
8715: PPUSH
8716: LD_VAR 0 6
8720: PUSH
8721: LD_INT 2
8723: ARRAY
8724: PUSH
8725: LD_INT 1
8727: ARRAY
8728: PPUSH
8729: LD_VAR 0 6
8733: PUSH
8734: LD_INT 2
8736: ARRAY
8737: PUSH
8738: LD_INT 2
8740: ARRAY
8741: PPUSH
8742: CALL_OW 297
8746: PUSH
8747: LD_INT 8
8749: GREATER
8750: IFFALSE 8787
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8752: LD_VAR 0 2
8756: PPUSH
8757: LD_VAR 0 6
8761: PUSH
8762: LD_INT 2
8764: ARRAY
8765: PUSH
8766: LD_INT 1
8768: ARRAY
8769: PPUSH
8770: LD_VAR 0 6
8774: PUSH
8775: LD_INT 2
8777: ARRAY
8778: PUSH
8779: LD_INT 2
8781: ARRAY
8782: PPUSH
8783: CALL_OW 111
8787: GO 8708
8789: POP
8790: POP
// end ; if tanks and mech then
8791: LD_VAR 0 10
8795: PUSH
8796: LD_VAR 0 9
8800: AND
8801: IFFALSE 9406
// begin for i in mech do
8803: LD_ADDR_VAR 0 2
8807: PUSH
8808: LD_VAR 0 9
8812: PUSH
8813: FOR_IN
8814: IFFALSE 9404
// begin tag := GetTag ( i ) ;
8816: LD_ADDR_VAR 0 4
8820: PUSH
8821: LD_VAR 0 2
8825: PPUSH
8826: CALL_OW 110
8830: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8831: LD_ADDR_VAR 0 11
8835: PUSH
8836: LD_VAR 0 2
8840: PPUSH
8841: CALL_OW 310
8845: ST_TO_ADDR
// if not tag then
8846: LD_VAR 0 4
8850: NOT
8851: IFFALSE 9164
// begin if veh then
8853: LD_VAR 0 11
8857: IFFALSE 9006
// begin if GetLives ( veh ) = 1000 and GetFuel ( veh ) > 60 then
8859: LD_VAR 0 11
8863: PPUSH
8864: CALL_OW 256
8868: PUSH
8869: LD_INT 1000
8871: EQUAL
8872: PUSH
8873: LD_VAR 0 11
8877: PPUSH
8878: CALL_OW 261
8882: PUSH
8883: LD_INT 60
8885: GREATER
8886: AND
8887: IFFALSE 8903
// SetTag ( i , 1 ) else
8889: LD_VAR 0 2
8893: PPUSH
8894: LD_INT 1
8896: PPUSH
8897: CALL_OW 109
8901: GO 9004
// if GetDistUnitXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
8903: LD_VAR 0 2
8907: PPUSH
8908: LD_VAR 0 6
8912: PUSH
8913: LD_INT 3
8915: ARRAY
8916: PUSH
8917: LD_INT 1
8919: ARRAY
8920: PPUSH
8921: LD_VAR 0 6
8925: PUSH
8926: LD_INT 3
8928: ARRAY
8929: PUSH
8930: LD_INT 2
8932: ARRAY
8933: PPUSH
8934: CALL_OW 297
8938: PUSH
8939: LD_INT 7
8941: GREATER
8942: IFFALSE 8981
// ComMoveXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8944: LD_VAR 0 2
8948: PPUSH
8949: LD_VAR 0 6
8953: PUSH
8954: LD_INT 3
8956: ARRAY
8957: PUSH
8958: LD_INT 1
8960: ARRAY
8961: PPUSH
8962: LD_VAR 0 6
8966: PUSH
8967: LD_INT 3
8969: ARRAY
8970: PUSH
8971: LD_INT 2
8973: ARRAY
8974: PPUSH
8975: CALL_OW 111
8979: GO 9004
// begin ComExitVehicle ( i ) ;
8981: LD_VAR 0 2
8985: PPUSH
8986: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8990: LD_VAR 0 2
8994: PPUSH
8995: LD_VAR 0 11
8999: PPUSH
9000: CALL_OW 189
// end ; end else
9004: GO 9162
// if GetLives ( i ) < 700 then
9006: LD_VAR 0 2
9010: PPUSH
9011: CALL_OW 256
9015: PUSH
9016: LD_INT 700
9018: LESS
9019: IFFALSE 9070
// begin usAttackers := usAttackers diff i ;
9021: LD_ADDR_EXP 43
9025: PUSH
9026: LD_EXP 43
9030: PUSH
9031: LD_VAR 0 2
9035: DIFF
9036: ST_TO_ADDR
// usForces := usForces union i ;
9037: LD_ADDR_EXP 40
9041: PUSH
9042: LD_EXP 40
9046: PUSH
9047: LD_VAR 0 2
9051: UNION
9052: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
9053: LD_VAR 0 2
9057: PPUSH
9058: LD_INT 34
9060: PPUSH
9061: LD_INT 68
9063: PPUSH
9064: CALL_OW 111
// end else
9068: GO 9162
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
9070: LD_VAR 0 10
9074: PPUSH
9075: LD_INT 58
9077: PUSH
9078: EMPTY
9079: LIST
9080: PUSH
9081: LD_INT 24
9083: PUSH
9084: LD_INT 1000
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PPUSH
9095: CALL_OW 72
9099: PUSH
9100: LD_VAR 0 2
9104: PPUSH
9105: CALL_OW 314
9109: NOT
9110: AND
9111: IFFALSE 9162
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) ;
9113: LD_VAR 0 2
9117: PPUSH
9118: LD_VAR 0 10
9122: PPUSH
9123: LD_INT 58
9125: PUSH
9126: EMPTY
9127: LIST
9128: PUSH
9129: LD_INT 24
9131: PUSH
9132: LD_INT 1000
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PPUSH
9143: CALL_OW 72
9147: PPUSH
9148: LD_VAR 0 2
9152: PPUSH
9153: CALL_OW 74
9157: PPUSH
9158: CALL_OW 120
// end else
9162: GO 9402
// begin if GetLives ( veh ) < 620 then
9164: LD_VAR 0 11
9168: PPUSH
9169: CALL_OW 256
9173: PUSH
9174: LD_INT 620
9176: LESS
9177: IFFALSE 9193
// SetTag ( i , 0 ) else
9179: LD_VAR 0 2
9183: PPUSH
9184: LD_INT 0
9186: PPUSH
9187: CALL_OW 109
9191: GO 9402
// if tag <= attackFormula [ 4 ] then
9193: LD_VAR 0 4
9197: PUSH
9198: LD_VAR 0 6
9202: PUSH
9203: LD_INT 4
9205: ARRAY
9206: LESSEQUAL
9207: IFFALSE 9368
// begin if GetDistUnitXY ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
9209: LD_VAR 0 2
9213: PPUSH
9214: LD_VAR 0 6
9218: PUSH
9219: LD_INT 4
9221: ARRAY
9222: PUSH
9223: LD_VAR 0 4
9227: ARRAY
9228: PUSH
9229: LD_INT 1
9231: ARRAY
9232: PPUSH
9233: LD_VAR 0 6
9237: PUSH
9238: LD_INT 4
9240: ARRAY
9241: PUSH
9242: LD_VAR 0 4
9246: ARRAY
9247: PUSH
9248: LD_INT 2
9250: ARRAY
9251: PPUSH
9252: CALL_OW 297
9256: PUSH
9257: LD_INT 6
9259: GREATER
9260: IFFALSE 9311
// ComAgressiveMove ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
9262: LD_VAR 0 2
9266: PPUSH
9267: LD_VAR 0 6
9271: PUSH
9272: LD_INT 4
9274: ARRAY
9275: PUSH
9276: LD_VAR 0 4
9280: ARRAY
9281: PUSH
9282: LD_INT 1
9284: ARRAY
9285: PPUSH
9286: LD_VAR 0 6
9290: PUSH
9291: LD_INT 4
9293: ARRAY
9294: PUSH
9295: LD_VAR 0 4
9299: ARRAY
9300: PUSH
9301: LD_INT 2
9303: ARRAY
9304: PPUSH
9305: CALL_OW 114
9309: GO 9366
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
9311: LD_INT 81
9313: PUSH
9314: LD_INT 1
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: LD_INT 91
9323: PUSH
9324: LD_VAR 0 2
9328: PUSH
9329: LD_INT 10
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: LIST
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PPUSH
9341: CALL_OW 69
9345: NOT
9346: IFFALSE 9366
// SetTag ( i , tag + 1 ) ;
9348: LD_VAR 0 2
9352: PPUSH
9353: LD_VAR 0 4
9357: PUSH
9358: LD_INT 1
9360: PLUS
9361: PPUSH
9362: CALL_OW 109
// end else
9366: GO 9402
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9368: LD_VAR 0 2
9372: PPUSH
9373: LD_INT 81
9375: PUSH
9376: LD_INT 1
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 69
9387: PPUSH
9388: LD_VAR 0 2
9392: PPUSH
9393: CALL_OW 74
9397: PPUSH
9398: CALL_OW 115
// end ; end ;
9402: GO 8813
9404: POP
9405: POP
// end ; until not usAttackers ;
9406: LD_EXP 43
9410: NOT
9411: IFFALSE 8122
// end ; end_of_file
9413: LD_VAR 0 1
9417: RET
// export function Action ; var hasAll , i , tmp ; begin
9418: LD_INT 0
9420: PPUSH
9421: PPUSH
9422: PPUSH
9423: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9424: LD_ADDR_VAR 0 2
9428: PUSH
9429: LD_INT 22
9431: PUSH
9432: LD_INT 2
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: LD_INT 21
9441: PUSH
9442: LD_INT 1
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: LD_INT 23
9451: PUSH
9452: LD_INT 2
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: LIST
9463: PPUSH
9464: CALL_OW 69
9468: PUSH
9469: LD_INT 7
9471: GREATEREQUAL
9472: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9473: LD_VAR 0 2
9477: PPUSH
9478: LD_STRING 03_HasAll
9480: PPUSH
9481: CALL_OW 39
// Video ( true ) ;
9485: LD_INT 1
9487: PPUSH
9488: CALL 1004 0 1
// CenterNowOnUnits ( Heike ) ;
9492: LD_EXP 24
9496: PPUSH
9497: CALL_OW 87
// wait ( 0 0$2 ) ;
9501: LD_INT 70
9503: PPUSH
9504: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9508: LD_EXP 32
9512: PPUSH
9513: LD_STRING DF-1-start
9515: PPUSH
9516: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9520: LD_EXP 24
9524: PPUSH
9525: LD_EXP 32
9529: PPUSH
9530: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9534: LD_EXP 24
9538: PPUSH
9539: LD_STRING DH-1-start
9541: PPUSH
9542: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9546: LD_EXP 33
9550: PPUSH
9551: LD_INT 92
9553: PPUSH
9554: LD_INT 21
9556: PPUSH
9557: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9561: LD_EXP 28
9565: PPUSH
9566: LD_INT 94
9568: PPUSH
9569: LD_INT 23
9571: PPUSH
9572: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9576: LD_EXP 36
9580: PUSH
9581: LD_INT 1
9583: ARRAY
9584: PPUSH
9585: LD_INT 90
9587: PPUSH
9588: LD_INT 23
9590: PPUSH
9591: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9595: LD_EXP 36
9599: PUSH
9600: LD_INT 2
9602: ARRAY
9603: PPUSH
9604: LD_INT 93
9606: PPUSH
9607: LD_INT 25
9609: PPUSH
9610: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9614: LD_EXP 36
9618: PPUSH
9619: LD_EXP 33
9623: PPUSH
9624: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9628: LD_EXP 33
9632: PUSH
9633: LD_EXP 28
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PPUSH
9642: LD_EXP 24
9646: PPUSH
9647: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9651: LD_EXP 24
9655: PPUSH
9656: LD_EXP 33
9660: PPUSH
9661: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9665: LD_INT 35
9667: PPUSH
9668: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9672: LD_EXP 33
9676: PPUSH
9677: LD_INT 92
9679: PPUSH
9680: LD_INT 21
9682: PPUSH
9683: CALL_OW 307
9687: IFFALSE 9665
// Say ( Omar , DO-1-start ) ;
9689: LD_EXP 33
9693: PPUSH
9694: LD_STRING DO-1-start
9696: PPUSH
9697: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9701: LD_EXP 24
9705: PPUSH
9706: LD_STRING DH-2-start
9708: PPUSH
9709: CALL_OW 88
// if hasAll then
9713: LD_VAR 0 2
9717: IFFALSE 9845
// begin Say ( Omar , DO-2-start ) ;
9719: LD_EXP 33
9723: PPUSH
9724: LD_STRING DO-2-start
9726: PPUSH
9727: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9731: LD_EXP 33
9735: PPUSH
9736: LD_STRING DO-3-start
9738: PPUSH
9739: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9743: LD_EXP 24
9747: PPUSH
9748: LD_STRING DH-3-start
9750: PPUSH
9751: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9755: LD_EXP 32
9759: PPUSH
9760: LD_STRING DF-2-start
9762: PPUSH
9763: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9767: LD_EXP 33
9771: PPUSH
9772: LD_EXP 32
9776: PPUSH
9777: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9781: LD_EXP 33
9785: PPUSH
9786: LD_STRING DO-4-start
9788: PPUSH
9789: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9793: LD_EXP 32
9797: PPUSH
9798: LD_STRING DF-3-start
9800: PPUSH
9801: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9805: LD_EXP 33
9809: PPUSH
9810: LD_STRING DO-5-start
9812: PPUSH
9813: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9817: LD_EXP 32
9821: PPUSH
9822: LD_STRING DF-4-start
9824: PPUSH
9825: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9829: LD_EXP 33
9833: PPUSH
9834: LD_EXP 24
9838: PPUSH
9839: CALL_OW 119
// end else
9843: GO 9945
// begin Say ( Omar , DO-2-start-a ) ;
9845: LD_EXP 33
9849: PPUSH
9850: LD_STRING DO-2-start-a
9852: PPUSH
9853: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9857: LD_EXP 33
9861: PPUSH
9862: LD_STRING DO-3-start-a
9864: PPUSH
9865: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9869: LD_EXP 24
9873: PPUSH
9874: LD_STRING DH-3-start-a
9876: PPUSH
9877: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9881: LD_EXP 32
9885: PPUSH
9886: LD_STRING DF-2-start-a
9888: PPUSH
9889: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9893: LD_EXP 33
9897: PPUSH
9898: LD_EXP 32
9902: PPUSH
9903: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9907: LD_EXP 33
9911: PPUSH
9912: LD_STRING DO-4-start-a
9914: PPUSH
9915: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9919: LD_EXP 32
9923: PPUSH
9924: LD_STRING DF-3-start-a
9926: PPUSH
9927: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9931: LD_EXP 33
9935: PPUSH
9936: LD_EXP 24
9940: PPUSH
9941: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9945: LD_INT 10
9947: PPUSH
9948: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9952: LD_EXP 33
9956: PPUSH
9957: LD_STRING DO-1-mission
9959: PPUSH
9960: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9964: LD_EXP 33
9968: PPUSH
9969: LD_STRING DO-2-mission
9971: PPUSH
9972: CALL_OW 88
// if not hasAll then
9976: LD_VAR 0 2
9980: NOT
9981: IFFALSE 9995
// Say ( Omar , DO-3-mission ) ;
9983: LD_EXP 33
9987: PPUSH
9988: LD_STRING DO-3-mission
9990: PPUSH
9991: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9995: LD_EXP 33
9999: PPUSH
10000: LD_STRING DO-4-mission
10002: PPUSH
10003: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
10007: LD_EXP 24
10011: PPUSH
10012: LD_STRING DH-1-mission
10014: PPUSH
10015: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
10019: LD_EXP 32
10023: PPUSH
10024: LD_STRING DF-1-mission
10026: PPUSH
10027: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
10031: LD_EXP 33
10035: PPUSH
10036: LD_STRING DO-5-mission
10038: PPUSH
10039: CALL_OW 88
// if not hasAll then
10043: LD_VAR 0 2
10047: NOT
10048: IFFALSE 10183
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
10050: LD_ADDR_VAR 0 4
10054: PUSH
10055: LD_INT 22
10057: PUSH
10058: LD_INT 2
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 21
10067: PUSH
10068: LD_INT 1
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 23
10077: PUSH
10078: LD_INT 2
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: PPUSH
10090: CALL_OW 69
10094: ST_TO_ADDR
// for i := 7 downto tmp do
10095: LD_ADDR_VAR 0 3
10099: PUSH
10100: DOUBLE
10101: LD_INT 7
10103: INC
10104: ST_TO_ADDR
10105: LD_VAR 0 4
10109: PUSH
10110: FOR_DOWNTO
10111: IFFALSE 10181
// begin if omarSquad < 3 then
10113: LD_EXP 36
10117: PUSH
10118: LD_INT 3
10120: LESS
10121: IFFALSE 10125
// break ;
10123: GO 10181
// SetSide ( omarSquad [ 3 ] , 2 ) ;
10125: LD_EXP 36
10129: PUSH
10130: LD_INT 3
10132: ARRAY
10133: PPUSH
10134: LD_INT 2
10136: PPUSH
10137: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
10141: LD_ADDR_EXP 38
10145: PUSH
10146: LD_EXP 38
10150: PUSH
10151: LD_EXP 36
10155: PUSH
10156: LD_INT 3
10158: ARRAY
10159: UNION
10160: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
10161: LD_ADDR_EXP 36
10165: PUSH
10166: LD_EXP 36
10170: PPUSH
10171: LD_INT 3
10173: PPUSH
10174: CALL_OW 3
10178: ST_TO_ADDR
// end ;
10179: GO 10110
10181: POP
10182: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
10183: LD_EXP 33
10187: PUSH
10188: LD_EXP 36
10192: ADD
10193: PPUSH
10194: LD_INT 103
10196: PPUSH
10197: LD_INT 9
10199: PPUSH
10200: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
10204: LD_VAR 0 2
10208: PUSH
10209: LD_EXP 29
10213: PPUSH
10214: CALL_OW 302
10218: AND
10219: IFFALSE 10280
// begin wait ( 0 0$3 ) ;
10221: LD_INT 105
10223: PPUSH
10224: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
10228: LD_EXP 29
10232: PPUSH
10233: LD_EXP 32
10237: PPUSH
10238: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10242: LD_EXP 29
10246: PPUSH
10247: LD_STRING DK-1-side
10249: PPUSH
10250: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10254: LD_EXP 32
10258: PPUSH
10259: LD_EXP 29
10263: PPUSH
10264: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10268: LD_EXP 32
10272: PPUSH
10273: LD_STRING DF-1-side
10275: PPUSH
10276: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10280: LD_INT 22
10282: PUSH
10283: LD_INT 2
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PPUSH
10290: CALL_OW 69
10294: PPUSH
10295: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10299: LD_EXP 32
10303: PUSH
10304: LD_EXP 35
10308: ADD
10309: PPUSH
10310: LD_INT 108
10312: PPUSH
10313: LD_INT 62
10315: PPUSH
10316: CALL_OW 111
// gameStarted := true ;
10320: LD_ADDR_EXP 3
10324: PUSH
10325: LD_INT 1
10327: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10328: LD_INT 105
10330: PPUSH
10331: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10335: LD_EXP 24
10339: PPUSH
10340: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10344: LD_EXP 24
10348: PPUSH
10349: LD_EXP 28
10353: PPUSH
10354: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10358: LD_INT 22
10360: PUSH
10361: LD_INT 2
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PPUSH
10368: CALL_OW 69
10372: PUSH
10373: LD_EXP 24
10377: DIFF
10378: PPUSH
10379: LD_EXP 24
10383: PPUSH
10384: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10388: LD_EXP 24
10392: PPUSH
10393: LD_STRING DH-1-explore
10395: PPUSH
10396: CALL_OW 88
// if Givi then
10400: LD_EXP 25
10404: IFFALSE 10420
// Say ( Givi , DG-1-explore ) else
10406: LD_EXP 25
10410: PPUSH
10411: LD_STRING DG-1-explore
10413: PPUSH
10414: CALL_OW 88
10418: GO 10457
// if heikeSecondSquad then
10420: LD_EXP 38
10424: IFFALSE 10457
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10426: LD_EXP 38
10430: PPUSH
10431: LD_INT 26
10433: PUSH
10434: LD_INT 1
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PPUSH
10441: CALL_OW 72
10445: PUSH
10446: LD_INT 1
10448: ARRAY
10449: PPUSH
10450: LD_STRING DArm-1-explore
10452: PPUSH
10453: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10457: LD_EXP 28
10461: PPUSH
10462: LD_STRING DA-1-explore
10464: PPUSH
10465: CALL_OW 88
// if Sophia then
10469: LD_EXP 30
10473: IFFALSE 10551
// begin Say ( Sophia , DS-2-explore ) ;
10475: LD_EXP 30
10479: PPUSH
10480: LD_STRING DS-2-explore
10482: PPUSH
10483: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10487: LD_EXP 28
10491: PPUSH
10492: LD_STRING DA-2-explore
10494: PPUSH
10495: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10499: LD_EXP 30
10503: PPUSH
10504: LD_EXP 28
10508: PPUSH
10509: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10513: LD_EXP 28
10517: PPUSH
10518: LD_EXP 30
10522: PPUSH
10523: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10527: LD_EXP 30
10531: PPUSH
10532: LD_STRING DS-3-explore
10534: PPUSH
10535: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10539: LD_EXP 28
10543: PPUSH
10544: LD_STRING DA-3-explore
10546: PPUSH
10547: CALL_OW 88
// end ; if Mike then
10551: LD_EXP 26
10555: IFFALSE 10611
// begin Say ( Mike , DM-1-explore ) ;
10557: LD_EXP 26
10561: PPUSH
10562: LD_STRING DM-1-explore
10564: PPUSH
10565: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10569: LD_EXP 24
10573: PPUSH
10574: LD_STRING DH-2-explore
10576: PPUSH
10577: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10581: LD_EXP 26
10585: PPUSH
10586: LD_STRING DM-2-explore
10588: PPUSH
10589: CALL_OW 88
// if Kaia then
10593: LD_EXP 29
10597: IFFALSE 10611
// Say ( Kaia , DK-1-explore ) ;
10599: LD_EXP 29
10603: PPUSH
10604: LD_STRING DK-1-explore
10606: PPUSH
10607: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10611: LD_INT 22
10613: PUSH
10614: LD_INT 2
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PPUSH
10621: CALL_OW 69
10625: PPUSH
10626: CALL_OW 139
// Video ( false ) ;
10630: LD_INT 0
10632: PPUSH
10633: CALL 1004 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10637: LD_STRING BuildBase
10639: PPUSH
10640: CALL_OW 337
// SaveForQuickRestart ;
10644: CALL_OW 22
// end ;
10648: LD_VAR 0 1
10652: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10653: LD_EXP 5
10657: NOT
10658: PUSH
10659: LD_EXP 6
10663: NOT
10664: AND
10665: PUSH
10666: LD_INT 5
10668: PPUSH
10669: LD_INT 22
10671: PUSH
10672: LD_INT 2
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PPUSH
10679: CALL_OW 70
10683: AND
10684: PUSH
10685: LD_EXP 6
10689: NOT
10690: AND
10691: IFFALSE 10776
10693: GO 10695
10695: DISABLE
// begin if Mike then
10696: LD_EXP 26
10700: IFFALSE 10716
// Say ( Mike , DM-1-scout ) else
10702: LD_EXP 26
10706: PPUSH
10707: LD_STRING DM-1-scout
10709: PPUSH
10710: CALL_OW 88
10714: GO 10747
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10716: LD_EXP 38
10720: PPUSH
10721: LD_INT 26
10723: PUSH
10724: LD_INT 1
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PPUSH
10731: CALL_OW 72
10735: PUSH
10736: LD_INT 1
10738: ARRAY
10739: PPUSH
10740: LD_STRING DArm-1-explore
10742: PPUSH
10743: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10747: LD_INT 54
10749: PPUSH
10750: LD_INT 35
10752: PPUSH
10753: LD_INT 2
10755: PPUSH
10756: LD_INT 1
10758: PPUSH
10759: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10763: LD_INT 54
10765: PPUSH
10766: LD_INT 35
10768: PPUSH
10769: LD_INT 2
10771: PPUSH
10772: CALL_OW 331
// end ;
10776: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10777: LD_INT 6
10779: PPUSH
10780: LD_INT 22
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PPUSH
10790: CALL_OW 70
10794: PUSH
10795: LD_EXP 6
10799: NOT
10800: AND
10801: IFFALSE 11055
10803: GO 10805
10805: DISABLE
10806: LD_INT 0
10808: PPUSH
10809: PPUSH
10810: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10811: LD_ADDR_VAR 0 1
10815: PUSH
10816: LD_EXP 38
10820: PPUSH
10821: LD_INT 26
10823: PUSH
10824: LD_INT 1
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PPUSH
10831: CALL_OW 72
10835: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10836: LD_ADDR_VAR 0 2
10840: PUSH
10841: LD_EXP 38
10845: PPUSH
10846: LD_INT 26
10848: PUSH
10849: LD_INT 2
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PPUSH
10856: CALL_OW 72
10860: ST_TO_ADDR
// DialogueOn ;
10861: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10865: LD_INT 36
10867: PPUSH
10868: LD_INT 22
10870: PPUSH
10871: LD_INT 2
10873: PPUSH
10874: LD_INT 8
10876: PPUSH
10877: CALL_OW 330
// dwait ( 0 0$1 ) ;
10881: LD_INT 35
10883: PPUSH
10884: CALL_OW 68
// speakerOk := false ;
10888: LD_ADDR_VAR 0 3
10892: PUSH
10893: LD_INT 0
10895: ST_TO_ADDR
// if Mike then
10896: LD_EXP 26
10900: IFFALSE 10922
// speakerOk := Say ( Mike , DM-1-spot ) else
10902: LD_ADDR_VAR 0 3
10906: PUSH
10907: LD_EXP 26
10911: PPUSH
10912: LD_STRING DM-1-spot
10914: PPUSH
10915: CALL_OW 88
10919: ST_TO_ADDR
10920: GO 10950
// if randomMen then
10922: LD_VAR 0 1
10926: IFFALSE 10950
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10928: LD_ADDR_VAR 0 3
10932: PUSH
10933: LD_VAR 0 1
10937: PUSH
10938: LD_INT 1
10940: ARRAY
10941: PPUSH
10942: LD_STRING DArm-1-spot-a
10944: PPUSH
10945: CALL_OW 88
10949: ST_TO_ADDR
// if speakerOk then
10950: LD_VAR 0 3
10954: IFFALSE 10998
// begin if Givi then
10956: LD_EXP 25
10960: IFFALSE 10976
// Say ( Givi , DG-1-spot ) else
10962: LD_EXP 25
10966: PPUSH
10967: LD_STRING DG-1-spot
10969: PPUSH
10970: CALL_OW 88
10974: GO 10998
// if randomWomen then
10976: LD_VAR 0 2
10980: IFFALSE 10998
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10982: LD_VAR 0 2
10986: PUSH
10987: LD_INT 1
10989: ARRAY
10990: PPUSH
10991: LD_STRING DArf-1-spot-a
10993: PPUSH
10994: CALL_OW 88
// end ; if Mike then
10998: LD_EXP 26
11002: IFFALSE 11018
// Say ( Heike , DH-1-spot ) else
11004: LD_EXP 24
11008: PPUSH
11009: LD_STRING DH-1-spot
11011: PPUSH
11012: CALL_OW 88
11016: GO 11030
// Say ( Heike , DH-1-spot-a ) ;
11018: LD_EXP 24
11022: PPUSH
11023: LD_STRING DH-1-spot-a
11025: PPUSH
11026: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
11030: LD_INT 36
11032: PPUSH
11033: LD_INT 22
11035: PPUSH
11036: LD_INT 2
11038: PPUSH
11039: CALL_OW 331
// DialogueOff ;
11043: CALL_OW 7
// americanBaseSpoted := true ;
11047: LD_ADDR_EXP 5
11051: PUSH
11052: LD_INT 1
11054: ST_TO_ADDR
// end ;
11055: PPOPN 3
11057: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11058: LD_EXP 5
11062: NOT
11063: PUSH
11064: LD_INT 22
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 101
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PPUSH
11088: CALL_OW 69
11092: AND
11093: PUSH
11094: LD_EXP 6
11098: NOT
11099: AND
11100: IFFALSE 11186
11102: GO 11104
11104: DISABLE
11105: LD_INT 0
11107: PPUSH
// begin americanBaseSpoted := true ;
11108: LD_ADDR_EXP 5
11112: PUSH
11113: LD_INT 1
11115: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11116: LD_ADDR_VAR 0 1
11120: PUSH
11121: LD_EXP 38
11125: PPUSH
11126: LD_INT 26
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 72
11140: ST_TO_ADDR
// if not randomMen then
11141: LD_VAR 0 1
11145: NOT
11146: IFFALSE 11150
// exit ;
11148: GO 11186
// DialogueOn ;
11150: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11154: LD_VAR 0 1
11158: PUSH
11159: LD_INT 1
11161: ARRAY
11162: PPUSH
11163: LD_STRING DArm-1-spot-a
11165: PPUSH
11166: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11170: LD_EXP 24
11174: PPUSH
11175: LD_STRING DH-1-spot-a
11177: PPUSH
11178: CALL_OW 88
// DialogueOff ;
11182: CALL_OW 7
// end ;
11186: PPOPN 1
11188: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) do var i , p ;
11189: LD_INT 11
11191: PPUSH
11192: CALL_OW 255
11196: PUSH
11197: LD_INT 2
11199: EQUAL
11200: PUSH
11201: LD_INT 7
11203: PPUSH
11204: LD_INT 22
11206: PUSH
11207: LD_INT 1
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 3
11216: PUSH
11217: LD_INT 50
11219: PUSH
11220: EMPTY
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 30
11229: PUSH
11230: LD_INT 31
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: PPUSH
11242: CALL_OW 70
11246: OR
11247: PUSH
11248: LD_INT 7
11250: PPUSH
11251: LD_INT 22
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 70
11265: PUSH
11266: LD_INT 1
11268: GREATER
11269: OR
11270: PUSH
11271: LD_INT 6
11273: PPUSH
11274: LD_INT 22
11276: PUSH
11277: LD_INT 2
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PPUSH
11284: CALL_OW 70
11288: OR
11289: IFFALSE 11825
11291: GO 11293
11293: DISABLE
11294: LD_INT 0
11296: PPUSH
11297: PPUSH
// begin americanBaseCaptured := true ;
11298: LD_ADDR_EXP 6
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11306: LD_INT 105
11308: PPUSH
11309: CALL_OW 67
// if IsOk ( usCommander ) then
11313: LD_EXP 41
11317: PPUSH
11318: CALL_OW 302
11322: IFFALSE 11385
// begin usForces := usForces union usCommander ;
11324: LD_ADDR_EXP 40
11328: PUSH
11329: LD_EXP 40
11333: PUSH
11334: LD_EXP 41
11338: UNION
11339: ST_TO_ADDR
// if FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) then
11340: LD_INT 6
11342: PPUSH
11343: LD_INT 22
11345: PUSH
11346: LD_INT 2
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PPUSH
11353: CALL_OW 70
11357: IFFALSE 11373
// Say ( usCommander , DUsm-2-assault ) else
11359: LD_EXP 41
11363: PPUSH
11364: LD_STRING DUsm-2-assault
11366: PPUSH
11367: CALL_OW 88
11371: GO 11385
// Say ( usCommander , DUsm-1-assault ) ;
11373: LD_EXP 41
11377: PPUSH
11378: LD_STRING DUsm-1-assault
11380: PPUSH
11381: CALL_OW 88
// end ; for i in usForces do
11385: LD_ADDR_VAR 0 1
11389: PUSH
11390: LD_EXP 40
11394: PUSH
11395: FOR_IN
11396: IFFALSE 11435
// begin if IsInUnit ( i ) then
11398: LD_VAR 0 1
11402: PPUSH
11403: CALL_OW 310
11407: IFFALSE 11418
// ComExitBuilding ( i ) ;
11409: LD_VAR 0 1
11413: PPUSH
11414: CALL_OW 122
// AddComMoveXY ( i , 34 , 67 ) ;
11418: LD_VAR 0 1
11422: PPUSH
11423: LD_INT 34
11425: PPUSH
11426: LD_INT 67
11428: PPUSH
11429: CALL_OW 171
// end ;
11433: GO 11395
11435: POP
11436: POP
// Say ( Heike , DH-1-assault ) ;
11437: LD_EXP 24
11441: PPUSH
11442: LD_STRING DH-1-assault
11444: PPUSH
11445: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11449: LD_INT 35
11451: PPUSH
11452: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11456: LD_VAR 0 1
11460: PPUSH
11461: LD_INT 34
11463: PPUSH
11464: LD_INT 67
11466: PPUSH
11467: CALL_OW 111
// until not usForces ;
11471: LD_EXP 40
11475: NOT
11476: IFFALSE 11449
// music_nat := 2 ;
11478: LD_ADDR_OWVAR 71
11482: PUSH
11483: LD_INT 2
11485: ST_TO_ADDR
// music_class := music_victory ;
11486: LD_ADDR_OWVAR 72
11490: PUSH
11491: LD_INT 4
11493: ST_TO_ADDR
// if not americanHasEscaped then
11494: LD_EXP 7
11498: NOT
11499: IFFALSE 11513
// Say ( Heike , DH-2-assault ) ;
11501: LD_EXP 24
11505: PPUSH
11506: LD_STRING DH-2-assault
11508: PPUSH
11509: CALL_OW 88
// wait ( 0 0$2 ) ;
11513: LD_INT 70
11515: PPUSH
11516: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11520: LD_INT 35
11522: PPUSH
11523: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11527: LD_INT 22
11529: PUSH
11530: LD_INT 2
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 21
11539: PUSH
11540: LD_INT 1
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 3
11549: PUSH
11550: LD_INT 50
11552: PUSH
11553: EMPTY
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: LIST
11564: PPUSH
11565: CALL_OW 69
11569: NOT
11570: IFFALSE 11520
// Video ( true ) ;
11572: LD_INT 1
11574: PPUSH
11575: CALL 1004 0 1
// if not GetSide ( usDepot ) = 2 then
11579: LD_INT 11
11581: PPUSH
11582: CALL_OW 255
11586: PUSH
11587: LD_INT 2
11589: EQUAL
11590: NOT
11591: IFFALSE 11603
// SetSide ( usDepot , 2 ) ;
11593: LD_INT 11
11595: PPUSH
11596: LD_INT 2
11598: PPUSH
11599: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11603: LD_INT 35
11605: PPUSH
11606: LD_INT 22
11608: PPUSH
11609: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11613: LD_EXP 24
11617: PPUSH
11618: LD_INT 35
11620: PPUSH
11621: LD_INT 22
11623: PPUSH
11624: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11628: LD_EXP 24
11632: PPUSH
11633: LD_INT 38
11635: PPUSH
11636: LD_INT 25
11638: PPUSH
11639: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11643: LD_EXP 37
11647: PUSH
11648: LD_EXP 38
11652: UNION
11653: PPUSH
11654: LD_INT 39
11656: PPUSH
11657: LD_INT 26
11659: PPUSH
11660: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11664: LD_EXP 37
11668: PUSH
11669: LD_EXP 38
11673: UNION
11674: PPUSH
11675: LD_EXP 24
11679: PPUSH
11680: CALL_OW 179
// p := 0 ;
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: LD_INT 0
11691: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11692: LD_INT 35
11694: PPUSH
11695: CALL_OW 67
// p := p + 1 ;
11699: LD_ADDR_VAR 0 2
11703: PUSH
11704: LD_VAR 0 2
11708: PUSH
11709: LD_INT 1
11711: PLUS
11712: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11713: LD_EXP 24
11717: PPUSH
11718: CALL_OW 314
11722: NOT
11723: PUSH
11724: LD_VAR 0 2
11728: PUSH
11729: LD_INT 10
11731: GREATER
11732: OR
11733: IFFALSE 11692
// Say ( Heike , DH-1-capture ) ;
11735: LD_EXP 24
11739: PPUSH
11740: LD_STRING DH-1-capture
11742: PPUSH
11743: CALL_OW 88
// if Markov then
11747: LD_EXP 31
11751: IFFALSE 11765
// Say ( Markov , DMar-1-capture ) ;
11753: LD_EXP 31
11757: PPUSH
11758: LD_STRING DMar-1-capture
11760: PPUSH
11761: CALL_OW 88
// if Sophia then
11765: LD_EXP 30
11769: IFFALSE 11795
// begin Say ( Heike , DH-2-capture ) ;
11771: LD_EXP 24
11775: PPUSH
11776: LD_STRING DH-2-capture
11778: PPUSH
11779: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11783: LD_EXP 30
11787: PPUSH
11788: LD_STRING DS-1-capture
11790: PPUSH
11791: CALL_OW 88
// end ; Video ( false ) ;
11795: LD_INT 0
11797: PPUSH
11798: CALL 1004 0 1
// music_nat := music_auto ;
11802: LD_ADDR_OWVAR 71
11806: PUSH
11807: LD_INT 0
11809: ST_TO_ADDR
// music_class := music_auto ;
11810: LD_ADDR_OWVAR 72
11814: PUSH
11815: LD_INT 0
11817: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11818: LD_STRING ConstructBase
11820: PPUSH
11821: CALL_OW 337
// end ;
11825: PPOPN 2
11827: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11828: LD_INT 22
11830: PUSH
11831: LD_INT 2
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 30
11840: PUSH
11841: LD_INT 2
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 3
11850: PUSH
11851: LD_INT 57
11853: PUSH
11854: EMPTY
11855: LIST
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 69
11870: IFFALSE 12113
11872: GO 11874
11874: DISABLE
// begin workshopBuilded := true ;
11875: LD_ADDR_EXP 9
11879: PUSH
11880: LD_INT 1
11882: ST_TO_ADDR
// if IsOk ( Markov ) then
11883: LD_EXP 31
11887: PPUSH
11888: CALL_OW 302
11892: IFFALSE 11951
// begin Say ( Heike , DH-1-shop-a ) ;
11894: LD_EXP 24
11898: PPUSH
11899: LD_STRING DH-1-shop-a
11901: PPUSH
11902: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11906: LD_INT 47
11908: PPUSH
11909: LD_INT 2
11911: PPUSH
11912: CALL_OW 321
11916: PUSH
11917: LD_INT 2
11919: EQUAL
11920: PUSH
11921: LD_INT 45
11923: PPUSH
11924: LD_INT 2
11926: PPUSH
11927: CALL_OW 321
11931: PUSH
11932: LD_INT 2
11934: EQUAL
11935: AND
11936: NOT
11937: IFFALSE 11951
// Say ( Markov , DMar-1-shop-a ) ;
11939: LD_EXP 31
11943: PPUSH
11944: LD_STRING DMar-1-shop-a
11946: PPUSH
11947: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11951: LD_INT 35
11953: PPUSH
11954: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ;
11958: LD_INT 47
11960: PPUSH
11961: LD_INT 2
11963: PPUSH
11964: CALL_OW 321
11968: PUSH
11969: LD_INT 2
11971: EQUAL
11972: PUSH
11973: LD_INT 45
11975: PPUSH
11976: LD_INT 2
11978: PPUSH
11979: CALL_OW 321
11983: PUSH
11984: LD_INT 2
11986: EQUAL
11987: AND
11988: IFFALSE 11951
// DialogueOn ;
11990: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11994: LD_EXP 31
11998: PPUSH
11999: LD_STRING DMar-1-shop
12001: PPUSH
12002: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12006: LD_EXP 24
12010: PPUSH
12011: LD_STRING DH-1-shop
12013: PPUSH
12014: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12018: LD_EXP 31
12022: PPUSH
12023: LD_STRING DMar-2-shop
12025: PPUSH
12026: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12030: LD_EXP 31
12034: PPUSH
12035: LD_STRING DMar-3-shop
12037: PPUSH
12038: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12042: LD_EXP 24
12046: PPUSH
12047: LD_STRING DH-2-shop
12049: PPUSH
12050: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12054: LD_EXP 31
12058: PPUSH
12059: LD_STRING DMar-4-shop
12061: PPUSH
12062: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12066: LD_EXP 24
12070: PPUSH
12071: LD_STRING DH-3-shop
12073: PPUSH
12074: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12078: LD_EXP 31
12082: PPUSH
12083: LD_STRING DMar-5-shop
12085: PPUSH
12086: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12090: LD_EXP 24
12094: PPUSH
12095: LD_STRING DH-4-shop
12097: PPUSH
12098: CALL_OW 88
// DialogueOff ;
12102: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
12106: LD_STRING ConstructVeh
12108: PPUSH
12109: CALL_OW 337
// end ;
12113: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12114: LD_INT 2
12116: PPUSH
12117: LD_INT 2
12119: PPUSH
12120: LD_INT 1
12122: PPUSH
12123: CALL 1175 0 3
12127: PUSH
12128: LD_INT 0
12130: EQUAL
12131: IFFALSE 12143
12133: GO 12135
12135: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12136: LD_STRING Techs
12138: PPUSH
12139: CALL_OW 337
12143: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12144: LD_EXP 31
12148: PPUSH
12149: CALL_OW 302
12153: PUSH
12154: LD_INT 22
12156: PUSH
12157: LD_INT 2
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: LD_INT 2
12166: PUSH
12167: LD_INT 34
12169: PUSH
12170: LD_INT 22
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 35
12179: PUSH
12180: LD_INT 22
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PPUSH
12196: CALL_OW 69
12200: AND
12201: IFFALSE 12308
12203: GO 12205
12205: DISABLE
// begin DialogueOn ;
12206: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12210: LD_INT 22
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 2
12222: PUSH
12223: LD_INT 34
12225: PUSH
12226: LD_INT 22
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 35
12235: PUSH
12236: LD_INT 22
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PPUSH
12252: CALL_OW 69
12256: PPUSH
12257: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12261: LD_INT 10
12263: PPUSH
12264: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12268: LD_EXP 24
12272: PPUSH
12273: LD_STRING DH-1-bal
12275: PPUSH
12276: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12280: LD_EXP 31
12284: PPUSH
12285: LD_STRING DMar-1-bal
12287: PPUSH
12288: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12292: LD_EXP 24
12296: PPUSH
12297: LD_STRING DH-2-bal
12299: PPUSH
12300: CALL_OW 88
// DialogueOff ;
12304: CALL_OW 7
// end ;
12308: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12309: LD_EXP 28
12313: PPUSH
12314: CALL_OW 302
12318: PUSH
12319: LD_INT 22
12321: PUSH
12322: LD_INT 2
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 30
12331: PUSH
12332: LD_INT 6
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PPUSH
12343: CALL_OW 69
12347: AND
12348: IFFALSE 12409
12350: GO 12352
12352: DISABLE
// begin DialogueOn ;
12353: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12357: LD_EXP 28
12361: PPUSH
12362: LD_STRING DA-1-lab
12364: PPUSH
12365: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12369: LD_EXP 24
12373: PPUSH
12374: LD_STRING DH-1-lab
12376: PPUSH
12377: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12381: LD_EXP 28
12385: PPUSH
12386: LD_STRING DA-2-lab
12388: PPUSH
12389: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12393: LD_EXP 24
12397: PPUSH
12398: LD_STRING DH-2-lab
12400: PPUSH
12401: CALL_OW 88
// DialogueOff ;
12405: CALL_OW 7
// end ;
12409: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) do var ape ;
12410: LD_EXP 29
12414: PPUSH
12415: CALL_OW 302
12419: PUSH
12420: LD_INT 22
12422: PUSH
12423: LD_INT 2
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 25
12432: PUSH
12433: LD_INT 15
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PPUSH
12444: CALL_OW 69
12448: AND
12449: IFFALSE 12629
12451: GO 12453
12453: DISABLE
12454: LD_INT 0
12456: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12457: LD_ADDR_VAR 0 1
12461: PUSH
12462: LD_INT 22
12464: PUSH
12465: LD_INT 2
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 25
12474: PUSH
12475: LD_INT 15
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PPUSH
12486: CALL_OW 69
12490: ST_TO_ADDR
// Video ( true ) ;
12491: LD_INT 1
12493: PPUSH
12494: CALL 1004 0 1
// CenterNowOnUnits ( ape [ 1 ] ) ;
12498: LD_VAR 0 1
12502: PUSH
12503: LD_INT 1
12505: ARRAY
12506: PPUSH
12507: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12511: LD_VAR 0 1
12515: PUSH
12516: LD_INT 1
12518: ARRAY
12519: PPUSH
12520: CALL_OW 122
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12524: LD_VAR 0 1
12528: PUSH
12529: LD_INT 1
12531: ARRAY
12532: PPUSH
12533: LD_INT 35
12535: PPUSH
12536: LD_INT 28
12538: PPUSH
12539: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12543: LD_VAR 0 1
12547: PUSH
12548: LD_INT 1
12550: ARRAY
12551: PPUSH
12552: LD_INT 36
12554: PPUSH
12555: LD_INT 17
12557: PPUSH
12558: CALL_OW 171
// Say ( Kaia , DK-1-apesol ) ;
12562: LD_EXP 29
12566: PPUSH
12567: LD_STRING DK-1-apesol
12569: PPUSH
12570: CALL_OW 88
// Say ( Aviradze , DA-1-apesol ) ;
12574: LD_EXP 28
12578: PPUSH
12579: LD_STRING DA-1-apesol
12581: PPUSH
12582: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12586: LD_EXP 29
12590: PPUSH
12591: LD_STRING DK-2-apesol
12593: PPUSH
12594: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12598: LD_EXP 28
12602: PPUSH
12603: LD_STRING DA-2-apesol
12605: PPUSH
12606: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12610: LD_EXP 29
12614: PPUSH
12615: LD_STRING DK-3-apesol
12617: PPUSH
12618: CALL_OW 88
// Video ( false ) ;
12622: LD_INT 0
12624: PPUSH
12625: CALL 1004 0 1
// end ;
12629: PPOPN 1
12631: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) do var ape ;
12632: LD_EXP 30
12636: PPUSH
12637: CALL_OW 302
12641: PUSH
12642: LD_INT 22
12644: PUSH
12645: LD_INT 2
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 25
12654: PUSH
12655: LD_INT 16
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 69
12670: AND
12671: IFFALSE 12943
12673: GO 12675
12675: DISABLE
12676: LD_INT 0
12678: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12679: LD_ADDR_VAR 0 1
12683: PUSH
12684: LD_INT 22
12686: PUSH
12687: LD_INT 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 25
12696: PUSH
12697: LD_INT 16
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PPUSH
12708: CALL_OW 69
12712: ST_TO_ADDR
// Video ( true ) ;
12713: LD_INT 1
12715: PPUSH
12716: CALL 1004 0 1
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12720: LD_INT 5
12722: PPUSH
12723: LD_INT 35
12725: PPUSH
12726: LD_INT 22
12728: PPUSH
12729: LD_INT 1
12731: PPUSH
12732: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12736: LD_EXP 30
12740: PPUSH
12741: LD_VAR 0 1
12745: PUSH
12746: LD_INT 1
12748: ARRAY
12749: PPUSH
12750: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12754: LD_VAR 0 1
12758: PUSH
12759: LD_INT 1
12761: ARRAY
12762: PPUSH
12763: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12767: LD_VAR 0 1
12771: PUSH
12772: LD_INT 1
12774: ARRAY
12775: PPUSH
12776: CALL_OW 122
// wait ( 0 0$2 ) ;
12780: LD_INT 70
12782: PPUSH
12783: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12787: LD_EXP 30
12791: PPUSH
12792: LD_STRING DS-1-apeeng
12794: PPUSH
12795: CALL_OW 88
// if IsOk ( Kamil ) then
12799: LD_EXP 27
12803: PPUSH
12804: CALL_OW 302
12808: IFFALSE 12936
// begin Say ( Kamil , DKam-1-apeeng ) ;
12810: LD_EXP 27
12814: PPUSH
12815: LD_STRING DKam-1-apeeng
12817: PPUSH
12818: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12822: LD_EXP 30
12826: PPUSH
12827: LD_STRING DS-2-apeeng
12829: PPUSH
12830: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12834: LD_EXP 27
12838: PPUSH
12839: LD_STRING DKam-2-apeeng
12841: PPUSH
12842: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12846: LD_EXP 30
12850: PPUSH
12851: LD_STRING DS-3-apeeng
12853: PPUSH
12854: CALL_OW 88
// if not IsOK ( Kaia ) then
12858: LD_EXP 29
12862: PPUSH
12863: CALL_OW 302
12867: NOT
12868: IFFALSE 12879
// begin Video ( false ) ;
12870: LD_INT 0
12872: PPUSH
12873: CALL 1004 0 1
// exit ;
12877: GO 12943
// end ; Say ( Kaia , DK-1-apeeng ) ;
12879: LD_EXP 29
12883: PPUSH
12884: LD_STRING DK-1-apeeng
12886: PPUSH
12887: CALL_OW 88
// if not IsOk ( Givi ) then
12891: LD_EXP 25
12895: PPUSH
12896: CALL_OW 302
12900: NOT
12901: IFFALSE 12912
// begin Video ( false ) ;
12903: LD_INT 0
12905: PPUSH
12906: CALL 1004 0 1
// exit ;
12910: GO 12943
// end ; Say ( Givi , DG-1-apeeng ) ;
12912: LD_EXP 25
12916: PPUSH
12917: LD_STRING DG-1-apeeng
12919: PPUSH
12920: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12924: LD_EXP 29
12928: PPUSH
12929: LD_STRING DK-2-apeeng
12931: PPUSH
12932: CALL_OW 88
// end ; Video ( false ) ;
12936: LD_INT 0
12938: PPUSH
12939: CALL 1004 0 1
// end ;
12943: PPOPN 1
12945: END
// every 0 0$1 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12946: LD_EXP 4
12950: PUSH
12951: LD_INT 22
12953: PUSH
12954: LD_INT 2
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: LD_INT 30
12963: PUSH
12964: LD_INT 0
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PPUSH
12975: CALL_OW 69
12979: AND
12980: IFFALSE 13145
12982: GO 12984
12984: DISABLE
// begin wait ( 0 0$20 ) ;
12985: LD_INT 700
12987: PPUSH
12988: CALL_OW 67
// DialogueOn ;
12992: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12996: LD_EXP 32
13000: PPUSH
13001: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13005: LD_EXP 32
13009: PPUSH
13010: LD_STRING DF-1-distribution
13012: PPUSH
13013: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13017: LD_EXP 24
13021: PPUSH
13022: LD_STRING DH-2-distribution
13024: PPUSH
13025: CALL_OW 88
// if IsOk ( Kaia ) then
13029: LD_EXP 29
13033: PPUSH
13034: CALL_OW 302
13038: IFFALSE 13099
// begin Say ( Kaia , DK-1-distribution ) ;
13040: LD_EXP 29
13044: PPUSH
13045: LD_STRING DK-1-distribution
13047: PPUSH
13048: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13052: LD_EXP 24
13056: PPUSH
13057: LD_STRING DH-1-distribution
13059: PPUSH
13060: CALL_OW 88
// if IsOk ( Givi ) then
13064: LD_EXP 25
13068: PPUSH
13069: CALL_OW 302
13073: IFFALSE 13099
// begin Say ( Givi , DG-1-distribution ) ;
13075: LD_EXP 25
13079: PPUSH
13080: LD_STRING DG-1-distribution
13082: PPUSH
13083: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13087: LD_EXP 24
13091: PPUSH
13092: LD_STRING DH-3-distribution
13094: PPUSH
13095: CALL_OW 88
// end ; end ; DialogueOff ;
13099: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13103: LD_STRING Crates1
13105: PPUSH
13106: CALL_OW 337
// farmerRequestedCrates := 300 ;
13110: LD_ADDR_EXP 13
13114: PUSH
13115: LD_INT 300
13117: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13118: LD_STRING FarmerCrates
13120: PPUSH
13121: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13125: LD_INT 10
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
13135: LD_INT 108
13137: PPUSH
13138: LD_INT 61
13140: PPUSH
13141: CALL_OW 86
// end ;
13145: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13146: LD_EXP 6
13150: PUSH
13151: LD_INT 22
13153: PUSH
13154: LD_INT 2
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 3
13163: PUSH
13164: LD_INT 57
13166: PUSH
13167: EMPTY
13168: LIST
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 2
13176: PUSH
13177: LD_INT 30
13179: PUSH
13180: LD_INT 6
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 30
13189: PUSH
13190: LD_INT 7
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 69
13211: AND
13212: PUSH
13213: LD_INT 22
13215: PUSH
13216: LD_INT 2
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: LD_INT 57
13228: PUSH
13229: EMPTY
13230: LIST
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 30
13238: PUSH
13239: LD_INT 4
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: PPUSH
13251: CALL_OW 69
13255: AND
13256: IFFALSE 13420
13258: GO 13260
13260: DISABLE
13261: LD_INT 0
13263: PPUSH
// begin wait ( 0 0$10 ) ;
13264: LD_INT 350
13266: PPUSH
13267: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13271: LD_ADDR_VAR 0 1
13275: PUSH
13276: LD_EXP 38
13280: PPUSH
13281: LD_INT 26
13283: PUSH
13284: LD_INT 1
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 25
13293: PUSH
13294: LD_INT 2
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PPUSH
13305: CALL_OW 72
13309: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13310: LD_EXP 24
13314: PPUSH
13315: LD_STRING DH-1-task
13317: PPUSH
13318: CALL_OW 88
// if IsOk ( Sophia ) then
13322: LD_EXP 30
13326: PPUSH
13327: CALL_OW 302
13331: IFFALSE 13371
// begin Say ( Sophia , DS-1-task ) ;
13333: LD_EXP 30
13337: PPUSH
13338: LD_STRING DS-1-task
13340: PPUSH
13341: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13345: LD_EXP 30
13349: PPUSH
13350: LD_STRING DS-2-task
13352: PPUSH
13353: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13357: LD_EXP 24
13361: PPUSH
13362: LD_STRING DH-2-task
13364: PPUSH
13365: CALL_OW 88
// end else
13369: GO 13405
// if eng then
13371: LD_VAR 0 1
13375: IFFALSE 13405
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13377: LD_VAR 0 1
13381: PUSH
13382: LD_INT 1
13384: ARRAY
13385: PPUSH
13386: LD_STRING DArm-1-task
13388: PPUSH
13389: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13393: LD_EXP 24
13397: PPUSH
13398: LD_STRING DH-2-task
13400: PPUSH
13401: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13405: LD_STRING BaseConstructed
13407: PPUSH
13408: CALL_OW 337
// allowConvoys := true ;
13412: LD_ADDR_EXP 11
13416: PUSH
13417: LD_INT 1
13419: ST_TO_ADDR
// end ;
13420: PPOPN 1
13422: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13423: LD_INT 22
13425: PUSH
13426: LD_INT 4
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 34
13435: PUSH
13436: LD_INT 12
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 69
13451: IFFALSE 13619
13453: GO 13455
13455: DISABLE
13456: LD_INT 0
13458: PPUSH
13459: PPUSH
13460: PPUSH
// begin wait ( 0 0$2 ) ;
13461: LD_INT 70
13463: PPUSH
13464: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13468: LD_ADDR_VAR 0 1
13472: PUSH
13473: LD_INT 22
13475: PUSH
13476: LD_INT 4
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 34
13485: PUSH
13486: LD_INT 12
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PPUSH
13497: CALL_OW 69
13501: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13502: LD_ADDR_VAR 0 2
13506: PUSH
13507: LD_VAR 0 1
13511: PUSH
13512: LD_INT 1
13514: ARRAY
13515: PPUSH
13516: CALL_OW 250
13520: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13521: LD_ADDR_VAR 0 3
13525: PUSH
13526: LD_VAR 0 1
13530: PUSH
13531: LD_INT 1
13533: ARRAY
13534: PPUSH
13535: CALL_OW 251
13539: ST_TO_ADDR
// DialogueOn ;
13540: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13544: LD_VAR 0 2
13548: PPUSH
13549: LD_VAR 0 3
13553: PPUSH
13554: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13558: LD_VAR 0 2
13562: PPUSH
13563: LD_VAR 0 3
13567: PPUSH
13568: LD_INT 2
13570: PPUSH
13571: LD_INT 6
13573: NEG
13574: PPUSH
13575: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13579: LD_INT 10
13581: PPUSH
13582: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13586: LD_EXP 24
13590: PPUSH
13591: LD_STRING DH-1-seecargo
13593: PPUSH
13594: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13598: LD_VAR 0 2
13602: PPUSH
13603: LD_VAR 0 3
13607: PPUSH
13608: LD_INT 2
13610: PPUSH
13611: CALL_OW 331
// DialogueOff ;
13615: CALL_OW 7
// end ;
13619: PPOPN 3
13621: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13622: LD_EXP 4
13626: PUSH
13627: LD_EXP 12
13631: PUSH
13632: LD_INT 300
13634: GREATEREQUAL
13635: AND
13636: IFFALSE 13708
13638: GO 13640
13640: DISABLE
// begin DialogueOn ;
13641: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13645: LD_EXP 32
13649: PPUSH
13650: LD_STRING DF-1-delivery-2
13652: PPUSH
13653: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13657: LD_EXP 24
13661: PPUSH
13662: LD_STRING DH-1-delivery-2
13664: PPUSH
13665: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13669: LD_EXP 32
13673: PPUSH
13674: LD_STRING DF-2-delivery-2
13676: PPUSH
13677: CALL_OW 94
// DialogueOff ;
13681: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13685: LD_STRING Crates2
13687: PPUSH
13688: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13692: LD_ADDR_EXP 14
13696: PUSH
13697: LD_INT 63000
13699: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13700: LD_ADDR_EXP 13
13704: PUSH
13705: LD_INT 600
13707: ST_TO_ADDR
// end ;
13708: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 do
13709: LD_EXP 4
13713: PUSH
13714: LD_EXP 12
13718: PUSH
13719: LD_INT 600
13721: GREATEREQUAL
13722: AND
13723: IFFALSE 13889
13725: GO 13727
13727: DISABLE
// begin DialogueOn ;
13728: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13732: LD_EXP 32
13736: PPUSH
13737: LD_STRING DF-1-delivery-3
13739: PPUSH
13740: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13744: LD_EXP 24
13748: PPUSH
13749: LD_STRING DH-1-delivery-3
13751: PPUSH
13752: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13756: LD_EXP 32
13760: PPUSH
13761: LD_STRING DF-2-delivery-3
13763: PPUSH
13764: CALL_OW 94
// if IsOk ( Kaia ) then
13768: LD_EXP 29
13772: PPUSH
13773: CALL_OW 302
13777: IFFALSE 13827
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13779: LD_EXP 29
13783: PPUSH
13784: LD_STRING DK-1-delivery-3
13786: PPUSH
13787: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13791: LD_EXP 24
13795: PPUSH
13796: LD_STRING DH-2-delivery-3
13798: PPUSH
13799: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13803: LD_EXP 25
13807: PPUSH
13808: LD_STRING DG-1-delivery-3
13810: PPUSH
13811: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13815: LD_EXP 26
13819: PPUSH
13820: LD_STRING DM-1-delivery-3
13822: PPUSH
13823: CALL_OW 88
// end ; DialogueOff ;
13827: CALL_OW 7
// if Difficulty = 2 then
13831: LD_OWVAR 67
13835: PUSH
13836: LD_INT 2
13838: EQUAL
13839: IFFALSE 13866
// begin ChangeMissionObjectives ( Crates3 ) ;
13841: LD_STRING Crates3
13843: PPUSH
13844: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13848: LD_ADDR_EXP 14
13852: PUSH
13853: LD_INT 63000
13855: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13856: LD_ADDR_EXP 13
13860: PUSH
13861: LD_INT 900
13863: ST_TO_ADDR
// end else
13864: GO 13889
// begin ChangeMissionObjectives ( Crates4 ) ;
13866: LD_STRING Crates4
13868: PPUSH
13869: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13873: LD_ADDR_EXP 14
13877: PUSH
13878: LD_INT 63000
13880: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13881: LD_ADDR_EXP 13
13885: PUSH
13886: LD_INT 1200
13888: ST_TO_ADDR
// end ; end ;
13889: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13890: LD_EXP 4
13894: PUSH
13895: LD_EXP 12
13899: PUSH
13900: LD_INT 600
13902: PUSH
13903: LD_INT 900
13905: PUSH
13906: LD_INT 1200
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: PUSH
13914: LD_OWVAR 67
13918: ARRAY
13919: GREATEREQUAL
13920: AND
13921: PUSH
13922: LD_EXP 13
13926: PUSH
13927: LD_EXP 14
13931: LESSEQUAL
13932: AND
13933: IFFALSE 14006
13935: GO 13937
13937: DISABLE
// begin retreatAllowed := true ;
13938: LD_ADDR_EXP 10
13942: PUSH
13943: LD_INT 1
13945: ST_TO_ADDR
// display_strings := [ ] ;
13946: LD_ADDR_OWVAR 47
13950: PUSH
13951: EMPTY
13952: ST_TO_ADDR
// DialogueOn ;
13953: CALL_OW 6
// Video ( true ) ;
13957: LD_INT 1
13959: PPUSH
13960: CALL 1004 0 1
// SayRadio ( Omar , DO-radio-end ) ;
13964: LD_EXP 33
13968: PPUSH
13969: LD_STRING DO-radio-end
13971: PPUSH
13972: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13976: LD_EXP 24
13980: PPUSH
13981: LD_STRING DH-1-radio-end
13983: PPUSH
13984: CALL_OW 88
// Video ( false ) ;
13988: LD_INT 0
13990: PPUSH
13991: CALL 1004 0 1
// DialogueOff ;
13995: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13999: LD_STRING Retreat
14001: PPUSH
14002: CALL_OW 337
// end ;
14006: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14007: LD_EXP 10
14011: IFFALSE 14181
14013: GO 14015
14015: DISABLE
14016: LD_INT 0
14018: PPUSH
14019: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14020: LD_INT 10
14022: PPUSH
14023: LD_INT 0
14025: PPUSH
14026: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14030: LD_ADDR_VAR 0 1
14034: PUSH
14035: LD_EXP 35
14039: PPUSH
14040: LD_INT 25
14042: PUSH
14043: LD_INT 2
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PPUSH
14050: CALL_OW 72
14054: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14055: LD_VAR 0 1
14059: PUSH
14060: LD_INT 102
14062: PPUSH
14063: LD_INT 69
14065: PPUSH
14066: CALL_OW 428
14070: PUSH
14071: LD_INT 0
14073: EQUAL
14074: AND
14075: IFFALSE 14177
// begin SetResourceType ( GetBase ( arDepot ) , mat_cans , GetResourceType ( GetBase ( arDepot ) , mat_cans ) + 10 ) ;
14077: LD_INT 5
14079: PPUSH
14080: CALL_OW 274
14084: PPUSH
14085: LD_INT 1
14087: PPUSH
14088: LD_INT 5
14090: PPUSH
14091: CALL_OW 274
14095: PPUSH
14096: LD_INT 1
14098: PPUSH
14099: CALL_OW 275
14103: PUSH
14104: LD_INT 10
14106: PLUS
14107: PPUSH
14108: CALL_OW 277
// for i in tmp do
14112: LD_ADDR_VAR 0 2
14116: PUSH
14117: LD_VAR 0 1
14121: PUSH
14122: FOR_IN
14123: IFFALSE 14147
// if IsInUnit ( i ) then
14125: LD_VAR 0 2
14129: PPUSH
14130: CALL_OW 310
14134: IFFALSE 14145
// ComExitBuilding ( i ) ;
14136: LD_VAR 0 2
14140: PPUSH
14141: CALL_OW 122
14145: GO 14122
14147: POP
14148: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14149: LD_VAR 0 1
14153: PPUSH
14154: LD_INT 31
14156: PPUSH
14157: LD_INT 102
14159: PPUSH
14160: LD_INT 69
14162: PPUSH
14163: LD_INT 2
14165: PPUSH
14166: CALL_OW 205
// wait ( 0 0$3 ) ;
14170: LD_INT 105
14172: PPUSH
14173: CALL_OW 67
// end ; StartCargoEvacuation ;
14177: CALL 4470 0 0
// end ;
14181: PPOPN 2
14183: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14184: LD_EXP 10
14188: NOT
14189: PUSH
14190: LD_INT 5
14192: PPUSH
14193: CALL_OW 301
14197: AND
14198: IFFALSE 14222
14200: GO 14202
14202: DISABLE
// begin SayRadio ( Farmer , DF-1-failure ) ;
14203: LD_EXP 32
14207: PPUSH
14208: LD_STRING DF-1-failure
14210: PPUSH
14211: CALL_OW 94
// YouLost ( FarmerDepot ) ;
14215: LD_STRING FarmerDepot
14217: PPUSH
14218: CALL_OW 104
// end ;
14222: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 do var i , max , tmp ;
14223: LD_EXP 10
14227: PUSH
14228: LD_EXP 24
14232: PPUSH
14233: LD_EXP 32
14237: PPUSH
14238: CALL_OW 296
14242: PUSH
14243: LD_INT 6
14245: LESS
14246: AND
14247: IFFALSE 14833
14249: GO 14251
14251: DISABLE
14252: LD_INT 0
14254: PPUSH
14255: PPUSH
14256: PPUSH
// begin allowConvoys := false ;
14257: LD_ADDR_EXP 11
14261: PUSH
14262: LD_INT 0
14264: ST_TO_ADDR
// Video ( true ) ;
14265: LD_INT 1
14267: PPUSH
14268: CALL 1004 0 1
// ComTurnUnit ( Heike , Farmer ) ;
14272: LD_EXP 24
14276: PPUSH
14277: LD_EXP 32
14281: PPUSH
14282: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14286: LD_EXP 32
14290: PPUSH
14291: LD_EXP 24
14295: PPUSH
14296: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14300: LD_EXP 32
14304: PPUSH
14305: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14309: LD_EXP 24
14313: PPUSH
14314: LD_STRING DH-1-end
14316: PPUSH
14317: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14321: LD_EXP 32
14325: PPUSH
14326: LD_STRING DF-1-end
14328: PPUSH
14329: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14333: LD_EXP 32
14337: PPUSH
14338: LD_STRING DF-2-end
14340: PPUSH
14341: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14345: LD_EXP 24
14349: PPUSH
14350: LD_STRING DH-2-end
14352: PPUSH
14353: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14357: LD_EXP 32
14361: PPUSH
14362: LD_STRING DF-3-end
14364: PPUSH
14365: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14369: LD_EXP 24
14373: PPUSH
14374: LD_STRING DH-3-end
14376: PPUSH
14377: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14381: LD_EXP 25
14385: PPUSH
14386: LD_STRING DG-1-end
14388: PPUSH
14389: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14393: LD_EXP 24
14397: PPUSH
14398: LD_STRING DH-4-end
14400: PPUSH
14401: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14405: LD_EXP 32
14409: PPUSH
14410: LD_STRING DF-4-end
14412: PPUSH
14413: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14417: LD_EXP 24
14421: PPUSH
14422: LD_STRING DH-5-end
14424: PPUSH
14425: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14429: LD_EXP 32
14433: PPUSH
14434: LD_STRING DF-5-end
14436: PPUSH
14437: CALL_OW 88
// Video ( false ) ;
14441: LD_INT 0
14443: PPUSH
14444: CALL 1004 0 1
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14448: LD_ADDR_VAR 0 2
14452: PUSH
14453: LD_INT 4
14455: PUSH
14456: LD_INT 3
14458: PUSH
14459: LD_INT 2
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: PUSH
14467: LD_OWVAR 67
14471: ARRAY
14472: ST_TO_ADDR
// if farmerSquad < max then
14473: LD_EXP 35
14477: PUSH
14478: LD_VAR 0 2
14482: LESS
14483: IFFALSE 14495
// max := farmerSquad ;
14485: LD_ADDR_VAR 0 2
14489: PUSH
14490: LD_EXP 35
14494: ST_TO_ADDR
// for i := 1 to max do
14495: LD_ADDR_VAR 0 1
14499: PUSH
14500: DOUBLE
14501: LD_INT 1
14503: DEC
14504: ST_TO_ADDR
14505: LD_VAR 0 2
14509: PUSH
14510: FOR_TO
14511: IFFALSE 14549
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14513: LD_EXP 35
14517: PUSH
14518: LD_INT 1
14520: ARRAY
14521: PPUSH
14522: LD_INT 2
14524: PPUSH
14525: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14529: LD_ADDR_EXP 35
14533: PUSH
14534: LD_EXP 35
14538: PPUSH
14539: LD_INT 1
14541: PPUSH
14542: CALL_OW 3
14546: ST_TO_ADDR
// end ;
14547: GO 14510
14549: POP
14550: POP
// for i in Farmer ^ farmerSquad do
14551: LD_ADDR_VAR 0 1
14555: PUSH
14556: LD_EXP 32
14560: PUSH
14561: LD_EXP 35
14565: ADD
14566: PUSH
14567: FOR_IN
14568: IFFALSE 14607
// begin if IsInUnit ( i ) then
14570: LD_VAR 0 1
14574: PPUSH
14575: CALL_OW 310
14579: IFFALSE 14590
// ComExitBuilding ( i ) ;
14581: LD_VAR 0 1
14585: PPUSH
14586: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14590: LD_VAR 0 1
14594: PPUSH
14595: LD_INT 102
14597: PPUSH
14598: LD_INT 7
14600: PPUSH
14601: CALL_OW 171
// end ;
14605: GO 14567
14607: POP
14608: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14609: LD_ADDR_VAR 0 1
14613: PUSH
14614: LD_INT 22
14616: PUSH
14617: LD_INT 5
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 21
14626: PUSH
14627: LD_INT 3
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PPUSH
14638: CALL_OW 69
14642: PUSH
14643: LD_INT 5
14645: DIFF
14646: PUSH
14647: FOR_IN
14648: IFFALSE 14664
// SetSide ( i , 2 ) ;
14650: LD_VAR 0 1
14654: PPUSH
14655: LD_INT 2
14657: PPUSH
14658: CALL_OW 235
14662: GO 14647
14664: POP
14665: POP
// repeat wait ( 0 0$1 ) ;
14666: LD_INT 35
14668: PPUSH
14669: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14673: LD_ADDR_VAR 0 3
14677: PUSH
14678: LD_EXP 32
14682: PUSH
14683: LD_EXP 35
14687: ADD
14688: PPUSH
14689: LD_INT 95
14691: PUSH
14692: LD_INT 3
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PPUSH
14699: CALL_OW 72
14703: ST_TO_ADDR
// if tmp then
14704: LD_VAR 0 3
14708: IFFALSE 14752
// for i in tmp do
14710: LD_ADDR_VAR 0 1
14714: PUSH
14715: LD_VAR 0 3
14719: PUSH
14720: FOR_IN
14721: IFFALSE 14750
// begin farmerSquad := farmerSquad diff i ;
14723: LD_ADDR_EXP 35
14727: PUSH
14728: LD_EXP 35
14732: PUSH
14733: LD_VAR 0 1
14737: DIFF
14738: ST_TO_ADDR
// RemoveUnit ( i ) ;
14739: LD_VAR 0 1
14743: PPUSH
14744: CALL_OW 64
// end ;
14748: GO 14720
14750: POP
14751: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14752: LD_EXP 35
14756: PUSH
14757: EMPTY
14758: EQUAL
14759: PUSH
14760: LD_EXP 32
14764: PPUSH
14765: CALL_OW 305
14769: NOT
14770: AND
14771: IFFALSE 14666
// wait ( 1 1$00 ) ;
14773: LD_INT 2100
14775: PPUSH
14776: CALL_OW 67
// SendAttack ;
14780: CALL 6854 0 0
// wait ( [ 5 5$00 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
14784: LD_INT 10500
14786: PUSH
14787: LD_INT 9450
14789: PUSH
14790: LD_INT 8400
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: LIST
14797: PUSH
14798: LD_OWVAR 67
14802: ARRAY
14803: PPUSH
14804: CALL_OW 67
// SendAttack ;
14808: CALL 6854 0 0
// if Difficulty > 2 then
14812: LD_OWVAR 67
14816: PUSH
14817: LD_INT 2
14819: GREATER
14820: IFFALSE 14833
// begin wait ( 4 4$00 ) ;
14822: LD_INT 8400
14824: PPUSH
14825: CALL_OW 67
// SendAttack ;
14829: CALL 6854 0 0
// end ; end ;
14833: PPOPN 3
14835: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14836: LD_EXP 14
14840: PUSH
14841: LD_INT 18900
14843: LESSEQUAL
14844: IFFALSE 14893
14846: GO 14848
14848: DISABLE
// begin DialogueOn ;
14849: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14853: LD_EXP 32
14857: PPUSH
14858: LD_STRING DF-1-distribution-a
14860: PPUSH
14861: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14865: LD_EXP 24
14869: PPUSH
14870: LD_STRING DH-1-distribution-a
14872: PPUSH
14873: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14877: LD_EXP 32
14881: PPUSH
14882: LD_STRING DF-2-distribution-a
14884: PPUSH
14885: CALL_OW 94
// DialogueOff ;
14889: CALL_OW 7
// end ;
14893: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14894: LD_EXP 14
14898: PUSH
14899: LD_INT 0
14901: LESSEQUAL
14902: IFFALSE 14934
14904: GO 14906
14906: DISABLE
// begin DialogueOn ;
14907: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14911: LD_EXP 32
14915: PPUSH
14916: LD_STRING DF-3-distribution-a
14918: PPUSH
14919: CALL_OW 94
// YouLost ( Distribution ) ;
14923: LD_STRING Distribution
14925: PPUSH
14926: CALL_OW 104
// DialogueOff ;
14930: CALL_OW 7
// end ;
14934: END
// every 0 0$1 trigger vehCounter >= 2 do
14935: LD_EXP 18
14939: PUSH
14940: LD_INT 2
14942: GREATEREQUAL
14943: IFFALSE 14955
14945: GO 14947
14947: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14948: LD_STRING VehConstructed
14950: PPUSH
14951: CALL_OW 337
14955: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14956: LD_INT 22
14958: PUSH
14959: LD_INT 2
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 34
14968: PUSH
14969: LD_INT 12
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PPUSH
14980: CALL_OW 69
14984: IFFALSE 15044
14986: GO 14988
14988: DISABLE
// begin DialogueOn ;
14989: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14993: LD_EXP 24
14997: PPUSH
14998: LD_STRING DH-1-truck
15000: PPUSH
15001: CALL_OW 88
// if IsOk ( Markov ) then
15005: LD_EXP 31
15009: PPUSH
15010: CALL_OW 302
15014: IFFALSE 15040
// begin Say ( Markov , DMar-1-truck ) ;
15016: LD_EXP 31
15020: PPUSH
15021: LD_STRING DMar-1-truck
15023: PPUSH
15024: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15028: LD_EXP 24
15032: PPUSH
15033: LD_STRING DH-2-truck
15035: PPUSH
15036: CALL_OW 88
// end ; DialogueOff ;
15040: CALL_OW 7
// end ;
15044: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15045: LD_INT 0
15047: PPUSH
15048: PPUSH
15049: PPUSH
// if IsOk ( Givi ) then
15050: LD_EXP 25
15054: PPUSH
15055: CALL_OW 302
15059: IFFALSE 15075
// begin Say ( Givi , DG-1-nocargo ) ;
15061: LD_EXP 25
15065: PPUSH
15066: LD_STRING DG-1-nocargo
15068: PPUSH
15069: CALL_OW 88
// exit ;
15073: GO 15171
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15075: LD_ADDR_VAR 0 2
15079: PUSH
15080: LD_EXP 38
15084: PPUSH
15085: LD_INT 26
15087: PUSH
15088: LD_INT 1
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: PPUSH
15095: CALL_OW 72
15099: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15100: LD_ADDR_VAR 0 3
15104: PUSH
15105: LD_EXP 38
15109: PPUSH
15110: LD_INT 26
15112: PUSH
15113: LD_INT 2
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PPUSH
15120: CALL_OW 72
15124: ST_TO_ADDR
// if randomMen then
15125: LD_VAR 0 2
15129: IFFALSE 15149
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15131: LD_VAR 0 2
15135: PUSH
15136: LD_INT 1
15138: ARRAY
15139: PPUSH
15140: LD_STRING DArm-1-nocargo
15142: PPUSH
15143: CALL_OW 88
15147: GO 15171
// if randomWomen then
15149: LD_VAR 0 3
15153: IFFALSE 15171
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15155: LD_VAR 0 3
15159: PUSH
15160: LD_INT 1
15162: ARRAY
15163: PPUSH
15164: LD_STRING DArf-1-nocargo
15166: PPUSH
15167: CALL_OW 88
// end ;
15171: LD_VAR 0 1
15175: RET
// export function IncomingAttack ; begin
15176: LD_INT 0
15178: PPUSH
// if attackWave = 1 then
15179: LD_EXP 16
15183: PUSH
15184: LD_INT 1
15186: EQUAL
15187: IFFALSE 15258
// begin DialogueOn ;
15189: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15193: LD_EXP 33
15197: PPUSH
15198: LD_STRING DO-1-radio-1
15200: PPUSH
15201: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15205: LD_EXP 24
15209: PPUSH
15210: LD_STRING DH-1-radio-1-
15212: PPUSH
15213: CALL_OW 88
// if IsOk ( Markov ) then
15217: LD_EXP 31
15221: PPUSH
15222: CALL_OW 302
15226: IFFALSE 15252
// begin Say ( Markov , DMar-1-radio-1 ) ;
15228: LD_EXP 31
15232: PPUSH
15233: LD_STRING DMar-1-radio-1
15235: PPUSH
15236: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15240: LD_EXP 24
15244: PPUSH
15245: LD_STRING DH-2-radio-1
15247: PPUSH
15248: CALL_OW 88
// end ; DialogueOff ;
15252: CALL_OW 7
// end else
15256: GO 15282
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15258: LD_EXP 33
15262: PPUSH
15263: LD_STRING DO-1-radio-u
15265: PPUSH
15266: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15270: LD_EXP 24
15274: PPUSH
15275: LD_STRING DH-1-radio-u
15277: PPUSH
15278: CALL_OW 88
// end ; end ;
15282: LD_VAR 0 1
15286: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15287: LD_EXP 40
15291: PPUSH
15292: LD_INT 95
15294: PUSH
15295: LD_INT 8
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PPUSH
15302: CALL_OW 72
15306: IFFALSE 15409
15308: GO 15310
15310: DISABLE
15311: LD_INT 0
15313: PPUSH
// begin enable ;
15314: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15315: LD_ADDR_VAR 0 1
15319: PUSH
15320: LD_EXP 40
15324: PPUSH
15325: LD_INT 95
15327: PUSH
15328: LD_INT 8
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PPUSH
15335: CALL_OW 72
15339: PUSH
15340: FOR_IN
15341: IFFALSE 15370
// begin usForces := usForces diff i ;
15343: LD_ADDR_EXP 40
15347: PUSH
15348: LD_EXP 40
15352: PUSH
15353: LD_VAR 0 1
15357: DIFF
15358: ST_TO_ADDR
// RemoveUnit ( i ) ;
15359: LD_VAR 0 1
15363: PPUSH
15364: CALL_OW 64
// end ;
15368: GO 15340
15370: POP
15371: POP
// if not americanHasEscaped and attackWave = 1 then
15372: LD_EXP 7
15376: NOT
15377: PUSH
15378: LD_EXP 16
15382: PUSH
15383: LD_INT 1
15385: EQUAL
15386: AND
15387: IFFALSE 15409
// begin americanHasEscaped := true ;
15389: LD_ADDR_EXP 7
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15397: LD_EXP 24
15401: PPUSH
15402: LD_STRING DH-2-assault-a
15404: PPUSH
15405: CALL_OW 88
// end ; end ;
15409: PPOPN 1
15411: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) do
15412: LD_INT 4
15414: PPUSH
15415: LD_INT 22
15417: PUSH
15418: LD_INT 1
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PPUSH
15425: CALL_OW 70
15429: IFFALSE 15446
15431: GO 15433
15433: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15434: LD_EXP 32
15438: PPUSH
15439: LD_STRING DF-1-attack
15441: PPUSH
15442: CALL_OW 94
15446: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15447: LD_INT 5
15449: PPUSH
15450: CALL_OW 255
15454: PUSH
15455: LD_INT 2
15457: EQUAL
15458: IFFALSE 15470
15460: GO 15462
15462: DISABLE
// YouLost ( Attack ) ;
15463: LD_STRING Attack
15465: PPUSH
15466: CALL_OW 104
15470: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot , p ;
15471: LD_INT 22
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 21
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PPUSH
15495: CALL_OW 69
15499: NOT
15500: PUSH
15501: LD_INT 22
15503: PUSH
15504: LD_INT 4
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PPUSH
15511: CALL_OW 69
15515: NOT
15516: AND
15517: PUSH
15518: LD_EXP 10
15522: NOT
15523: AND
15524: PUSH
15525: LD_EXP 12
15529: PUSH
15530: LD_INT 90
15532: GREATER
15533: AND
15534: PUSH
15535: LD_INT 7
15537: PPUSH
15538: LD_INT 22
15540: PUSH
15541: LD_INT 2
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: LD_INT 21
15550: PUSH
15551: LD_INT 1
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 70
15566: AND
15567: PUSH
15568: LD_INT 22
15570: PUSH
15571: LD_INT 2
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 50
15580: PUSH
15581: EMPTY
15582: LIST
15583: PUSH
15584: LD_INT 30
15586: PUSH
15587: LD_INT 0
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: LIST
15598: PPUSH
15599: CALL_OW 69
15603: AND
15604: IFFALSE 16440
15606: GO 15608
15608: DISABLE
15609: LD_INT 0
15611: PPUSH
15612: PPUSH
15613: PPUSH
15614: PPUSH
15615: PPUSH
15616: PPUSH
// begin depot := usDepot ;
15617: LD_ADDR_VAR 0 5
15621: PUSH
15622: LD_INT 11
15624: ST_TO_ADDR
// if not depot then
15625: LD_VAR 0 5
15629: NOT
15630: IFFALSE 15670
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15632: LD_ADDR_VAR 0 5
15636: PUSH
15637: LD_INT 22
15639: PUSH
15640: LD_INT 2
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 30
15649: PUSH
15650: LD_INT 0
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PPUSH
15661: CALL_OW 69
15665: PUSH
15666: LD_INT 1
15668: ARRAY
15669: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15670: LD_ADDR_VAR 0 1
15674: PUSH
15675: LD_EXP 38
15679: PPUSH
15680: LD_INT 26
15682: PUSH
15683: LD_INT 1
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 72
15694: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15695: LD_ADDR_VAR 0 2
15699: PUSH
15700: LD_EXP 38
15704: PPUSH
15705: LD_INT 26
15707: PUSH
15708: LD_INT 2
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PPUSH
15715: CALL_OW 72
15719: ST_TO_ADDR
// if IsOk ( Kaia ) then
15720: LD_EXP 29
15724: PPUSH
15725: CALL_OW 302
15729: IFFALSE 15750
// speaker := [ Kaia , DK ] else
15731: LD_ADDR_VAR 0 3
15735: PUSH
15736: LD_EXP 29
15740: PUSH
15741: LD_STRING DK
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: ST_TO_ADDR
15748: GO 15830
// if randomMen then
15750: LD_VAR 0 1
15754: IFFALSE 15789
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15756: LD_ADDR_VAR 0 3
15760: PUSH
15761: LD_VAR 0 1
15765: PUSH
15766: LD_INT 1
15768: PPUSH
15769: LD_VAR 0 1
15773: PPUSH
15774: CALL_OW 12
15778: ARRAY
15779: PUSH
15780: LD_STRING DArm
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: ST_TO_ADDR
15787: GO 15830
// if randomWomen then
15789: LD_VAR 0 2
15793: IFFALSE 15828
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15795: LD_ADDR_VAR 0 3
15799: PUSH
15800: LD_VAR 0 2
15804: PUSH
15805: LD_INT 1
15807: PPUSH
15808: LD_VAR 0 2
15812: PPUSH
15813: CALL_OW 12
15817: ARRAY
15818: PUSH
15819: LD_STRING DArf
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: ST_TO_ADDR
15826: GO 15830
// exit ;
15828: GO 16440
// if IsInUnit ( speaker [ 1 ] ) then
15830: LD_VAR 0 3
15834: PUSH
15835: LD_INT 1
15837: ARRAY
15838: PPUSH
15839: CALL_OW 310
15843: IFFALSE 15866
// place := IsInUnit ( speaker [ 1 ] ) else
15845: LD_ADDR_VAR 0 4
15849: PUSH
15850: LD_VAR 0 3
15854: PUSH
15855: LD_INT 1
15857: ARRAY
15858: PPUSH
15859: CALL_OW 310
15863: ST_TO_ADDR
15864: GO 15880
// place := speaker [ 1 ] ;
15866: LD_ADDR_VAR 0 4
15870: PUSH
15871: LD_VAR 0 3
15875: PUSH
15876: LD_INT 1
15878: ARRAY
15879: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15880: LD_VAR 0 4
15884: PPUSH
15885: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15889: LD_VAR 0 4
15893: PPUSH
15894: CALL_OW 250
15898: PPUSH
15899: LD_VAR 0 4
15903: PPUSH
15904: CALL_OW 251
15908: PPUSH
15909: CALL 3005 0 2
// wait ( 0 0$2 ) ;
15913: LD_INT 70
15915: PPUSH
15916: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15920: LD_EXP 34
15924: PPUSH
15925: CALL_OW 305
15929: NOT
15930: IFFALSE 15934
// exit ;
15932: GO 16440
// allowConvoys := false ;
15934: LD_ADDR_EXP 11
15938: PUSH
15939: LD_INT 0
15941: ST_TO_ADDR
// InGameOn ;
15942: CALL_OW 8
// wait ( 0 0$1 ) ;
15946: LD_INT 35
15948: PPUSH
15949: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15953: LD_EXP 34
15957: PPUSH
15958: LD_STRING DI-1-land
15960: PPUSH
15961: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15965: LD_VAR 0 3
15969: PUSH
15970: LD_INT 1
15972: ARRAY
15973: PPUSH
15974: CALL_OW 310
15978: IFFALSE 15993
// ComExit ( speaker [ 1 ] ) ;
15980: LD_VAR 0 3
15984: PUSH
15985: LD_INT 1
15987: ARRAY
15988: PPUSH
15989: CALL 1108 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15993: LD_VAR 0 3
15997: PUSH
15998: LD_INT 1
16000: ARRAY
16001: PPUSH
16002: LD_EXP 34
16006: PPUSH
16007: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16011: LD_VAR 0 3
16015: PUSH
16016: LD_INT 1
16018: ARRAY
16019: PPUSH
16020: LD_EXP 34
16024: PPUSH
16025: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16029: LD_EXP 34
16033: PPUSH
16034: LD_VAR 0 3
16038: PUSH
16039: LD_INT 1
16041: ARRAY
16042: PPUSH
16043: CALL_OW 119
// wait ( 0 0$1 ) ;
16047: LD_INT 35
16049: PPUSH
16050: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16054: LD_VAR 0 3
16058: PUSH
16059: LD_INT 1
16061: ARRAY
16062: PPUSH
16063: LD_VAR 0 3
16067: PUSH
16068: LD_INT 2
16070: ARRAY
16071: PUSH
16072: LD_STRING -1-land
16074: STR
16075: PPUSH
16076: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16080: LD_EXP 34
16084: PPUSH
16085: LD_STRING DI-2-land
16087: PPUSH
16088: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16092: LD_VAR 0 3
16096: PUSH
16097: LD_INT 1
16099: ARRAY
16100: PPUSH
16101: LD_VAR 0 3
16105: PUSH
16106: LD_INT 2
16108: ARRAY
16109: PUSH
16110: LD_STRING -2-land
16112: STR
16113: PPUSH
16114: CALL_OW 88
// if IsInUnit ( Heike ) then
16118: LD_EXP 24
16122: PPUSH
16123: CALL_OW 310
16127: IFFALSE 16138
// ComExitBuilding ( Heike ) ;
16129: LD_EXP 24
16133: PPUSH
16134: CALL_OW 122
// AddComMoveXY ( Heike , GetX ( speaker [ 1 ] ) , GetY ( speaker [ 1 ] ) ) ;
16138: LD_EXP 24
16142: PPUSH
16143: LD_VAR 0 3
16147: PUSH
16148: LD_INT 1
16150: ARRAY
16151: PPUSH
16152: CALL_OW 250
16156: PPUSH
16157: LD_VAR 0 3
16161: PUSH
16162: LD_INT 1
16164: ARRAY
16165: PPUSH
16166: CALL_OW 251
16170: PPUSH
16171: CALL_OW 171
// AddComTurnUnit ( Heike , speaker [ 1 ] ) ;
16175: LD_EXP 24
16179: PPUSH
16180: LD_VAR 0 3
16184: PUSH
16185: LD_INT 1
16187: ARRAY
16188: PPUSH
16189: CALL_OW 179
// AddComTurnUnit ( [ Ibrahim , speaker [ 1 ] ] , Heike ) ;
16193: LD_EXP 34
16197: PUSH
16198: LD_VAR 0 3
16202: PUSH
16203: LD_INT 1
16205: ARRAY
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PPUSH
16211: LD_EXP 24
16215: PPUSH
16216: CALL_OW 179
// p := 0 ;
16220: LD_ADDR_VAR 0 6
16224: PUSH
16225: LD_INT 0
16227: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16228: LD_INT 70
16230: PPUSH
16231: CALL_OW 67
// p := p + 1 ;
16235: LD_ADDR_VAR 0 6
16239: PUSH
16240: LD_VAR 0 6
16244: PUSH
16245: LD_INT 1
16247: PLUS
16248: ST_TO_ADDR
// CenterOnUnits ( speaker [ 1 ] ) ;
16249: LD_VAR 0 3
16253: PUSH
16254: LD_INT 1
16256: ARRAY
16257: PPUSH
16258: CALL_OW 85
// until GetDistUnits ( speaker [ 1 ] , Heike ) < 6 or p > 5 ;
16262: LD_VAR 0 3
16266: PUSH
16267: LD_INT 1
16269: ARRAY
16270: PPUSH
16271: LD_EXP 24
16275: PPUSH
16276: CALL_OW 296
16280: PUSH
16281: LD_INT 6
16283: LESS
16284: PUSH
16285: LD_VAR 0 6
16289: PUSH
16290: LD_INT 5
16292: GREATER
16293: OR
16294: IFFALSE 16228
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16296: LD_VAR 0 3
16300: PUSH
16301: LD_INT 1
16303: ARRAY
16304: PPUSH
16305: LD_VAR 0 3
16309: PUSH
16310: LD_INT 2
16312: ARRAY
16313: PUSH
16314: LD_STRING -3-land
16316: STR
16317: PPUSH
16318: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16322: LD_EXP 24
16326: PPUSH
16327: LD_STRING DH-1-land
16329: PPUSH
16330: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16334: LD_VAR 0 5
16338: PPUSH
16339: CALL_OW 313
16343: PUSH
16344: LD_INT 6
16346: EQUAL
16347: IFFALSE 16367
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16349: LD_VAR 0 5
16353: PPUSH
16354: CALL_OW 313
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16367: LD_EXP 34
16371: PPUSH
16372: LD_INT 2
16374: PPUSH
16375: CALL_OW 235
// CenterOnUnits ( depot ) ;
16379: LD_VAR 0 5
16383: PPUSH
16384: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16388: LD_EXP 34
16392: PPUSH
16393: LD_VAR 0 5
16397: PPUSH
16398: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16402: LD_INT 35
16404: PPUSH
16405: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
16409: LD_EXP 34
16413: PPUSH
16414: CALL_OW 310
16418: IFFALSE 16402
// InGameOff ;
16420: CALL_OW 9
// ibrahimInDepot := true ;
16424: LD_ADDR_EXP 21
16428: PUSH
16429: LD_INT 1
16431: ST_TO_ADDR
// allowConvoys := true ;
16432: LD_ADDR_EXP 11
16436: PUSH
16437: LD_INT 1
16439: ST_TO_ADDR
// end ;
16440: PPOPN 6
16442: END
// export function IbrahimQuery ; begin
16443: LD_INT 0
16445: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16446: LD_STRING IbrahimQuery
16448: PPUSH
16449: CALL_OW 97
16453: PUSH
16454: LD_INT 1
16456: DOUBLE
16457: EQUAL
16458: IFTRUE 16462
16460: GO 16771
16462: POP
// begin allowConvoys := false ;
16463: LD_ADDR_EXP 11
16467: PUSH
16468: LD_INT 0
16470: ST_TO_ADDR
// ibrahimInDepot := false ;
16471: LD_ADDR_EXP 21
16475: PUSH
16476: LD_INT 0
16478: ST_TO_ADDR
// InGameOn ;
16479: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16483: LD_EXP 24
16487: PPUSH
16488: CALL_OW 87
// wait ( 0 0$1 ) ;
16492: LD_INT 35
16494: PPUSH
16495: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16499: LD_EXP 24
16503: PPUSH
16504: LD_STRING DH-1-interrogation
16506: PPUSH
16507: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16511: LD_EXP 34
16515: PPUSH
16516: LD_STRING DI-1-interrogation
16518: PPUSH
16519: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16523: LD_EXP 24
16527: PPUSH
16528: LD_STRING DH-2-interrogation
16530: PPUSH
16531: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16535: LD_EXP 34
16539: PPUSH
16540: LD_STRING DI-2-interrogation
16542: PPUSH
16543: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16547: LD_EXP 24
16551: PPUSH
16552: LD_STRING DH-3-interrogation
16554: PPUSH
16555: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16559: LD_EXP 34
16563: PPUSH
16564: LD_STRING DI-3-interrogation
16566: PPUSH
16567: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16571: LD_EXP 24
16575: PPUSH
16576: LD_STRING DH-4-interrogation
16578: PPUSH
16579: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16583: LD_EXP 34
16587: PPUSH
16588: LD_STRING DI-4-interrogation
16590: PPUSH
16591: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16595: LD_EXP 24
16599: PPUSH
16600: LD_STRING DH-5-interrogation
16602: PPUSH
16603: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16607: LD_EXP 34
16611: PPUSH
16612: LD_STRING DI-5-interrogation
16614: PPUSH
16615: CALL_OW 88
// wait ( 0 0$1 ) ;
16619: LD_INT 35
16621: PPUSH
16622: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16626: LD_STRING IbrahimDecisionQuery
16628: PPUSH
16629: CALL_OW 97
16633: PUSH
16634: LD_INT 1
16636: DOUBLE
16637: EQUAL
16638: IFTRUE 16642
16640: GO 16666
16642: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16643: LD_EXP 34
16647: PPUSH
16648: LD_STRING DI-1-kill
16650: PPUSH
16651: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16655: LD_EXP 34
16659: PPUSH
16660: CALL_OW 66
// end ; 2 :
16664: GO 16765
16666: LD_INT 2
16668: DOUBLE
16669: EQUAL
16670: IFTRUE 16674
16672: GO 16764
16674: POP
// begin SetSide ( Ibrahim , 6 ) ;
16675: LD_EXP 34
16679: PPUSH
16680: LD_INT 6
16682: PPUSH
16683: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16687: LD_EXP 34
16691: PPUSH
16692: CALL_OW 122
// AddComMoveXY ( Ibrahim , 32 , 5 ) ;
16696: LD_EXP 34
16700: PPUSH
16701: LD_INT 32
16703: PPUSH
16704: LD_INT 5
16706: PPUSH
16707: CALL_OW 171
// ComExitBuilding ( Heike ) ;
16711: LD_EXP 24
16715: PPUSH
16716: CALL_OW 122
// AddComMoveXY ( Heike , 36 , 21 ) ;
16720: LD_EXP 24
16724: PPUSH
16725: LD_INT 36
16727: PPUSH
16728: LD_INT 21
16730: PPUSH
16731: CALL_OW 171
// AddComWait ( Ibrahim , 1 1$20 ) ;
16735: LD_EXP 34
16739: PPUSH
16740: LD_INT 2800
16742: PPUSH
16743: CALL_OW 202
// AddComMoveXY ( Ibrahim , 38 , 28 ) ;
16747: LD_EXP 34
16751: PPUSH
16752: LD_INT 38
16754: PPUSH
16755: LD_INT 28
16757: PPUSH
16758: CALL_OW 171
// end ; end ;
16762: GO 16765
16764: POP
// InGameOff ;
16765: CALL_OW 9
// end ; 2 :
16769: GO 16785
16771: LD_INT 2
16773: DOUBLE
16774: EQUAL
16775: IFTRUE 16779
16777: GO 16784
16779: POP
// exit ; end ;
16780: GO 16808
16782: GO 16785
16784: POP
// allowConvoys := true ;
16785: LD_ADDR_EXP 11
16789: PUSH
16790: LD_INT 1
16792: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16793: LD_INT 1400
16795: PPUSH
16796: CALL_OW 67
// ibrahimIsFree := true ;
16800: LD_ADDR_EXP 22
16804: PUSH
16805: LD_INT 1
16807: ST_TO_ADDR
// end ;
16808: LD_VAR 0 1
16812: RET
// every 0 0$10 trigger ibrahimIsFree and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) and IsInArea ( Ibrahim , americanBaseArea ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass , b , p , depot ;
16813: LD_EXP 22
16817: PUSH
16818: LD_INT 22
16820: PUSH
16821: LD_INT 2
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 50
16830: PUSH
16831: EMPTY
16832: LIST
16833: PUSH
16834: LD_INT 30
16836: PUSH
16837: LD_INT 0
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: LIST
16848: PPUSH
16849: CALL_OW 69
16853: AND
16854: PUSH
16855: LD_EXP 34
16859: PPUSH
16860: LD_INT 7
16862: PPUSH
16863: CALL_OW 308
16867: AND
16868: PUSH
16869: LD_INT 6
16871: PPUSH
16872: LD_EXP 24
16876: PPUSH
16877: CALL_OW 292
16881: AND
16882: PUSH
16883: LD_INT 22
16885: PUSH
16886: LD_INT 4
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PPUSH
16893: CALL_OW 69
16897: NOT
16898: AND
16899: PUSH
16900: LD_INT 22
16902: PUSH
16903: LD_INT 1
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 21
16912: PUSH
16913: LD_INT 1
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PPUSH
16924: CALL_OW 69
16928: NOT
16929: AND
16930: IFFALSE 17578
16932: GO 16934
16934: DISABLE
16935: LD_INT 0
16937: PPUSH
16938: PPUSH
16939: PPUSH
16940: PPUSH
// begin allowConvoys := false ;
16941: LD_ADDR_EXP 11
16945: PUSH
16946: LD_INT 0
16948: ST_TO_ADDR
// depot := usDepot ;
16949: LD_ADDR_VAR 0 4
16953: PUSH
16954: LD_INT 11
16956: ST_TO_ADDR
// if not usDepot then
16957: LD_INT 11
16959: NOT
16960: IFFALSE 17007
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16962: LD_ADDR_VAR 0 4
16966: PUSH
16967: LD_INT 22
16969: PUSH
16970: LD_INT 2
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 50
16979: PUSH
16980: EMPTY
16981: LIST
16982: PUSH
16983: LD_INT 30
16985: PUSH
16986: LD_INT 0
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: LIST
16997: PPUSH
16998: CALL_OW 69
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: ST_TO_ADDR
// InGameOn ;
17007: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17011: LD_EXP 34
17015: PPUSH
17016: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17020: LD_EXP 24
17024: PPUSH
17025: LD_EXP 34
17029: PPUSH
17030: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17034: LD_EXP 34
17038: PPUSH
17039: LD_EXP 24
17043: PPUSH
17044: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
17048: LD_EXP 34
17052: PPUSH
17053: LD_STRING DI-1-free
17055: PPUSH
17056: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17060: LD_EXP 24
17064: PPUSH
17065: LD_STRING DH-1-free
17067: PPUSH
17068: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17072: LD_EXP 34
17076: PPUSH
17077: LD_STRING DI-2-free
17079: PPUSH
17080: CALL_OW 88
// changeClass := 0 ;
17084: LD_ADDR_VAR 0 1
17088: PUSH
17089: LD_INT 0
17091: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17092: LD_STRING IbrahimJoinQuery
17094: PPUSH
17095: CALL_OW 97
17099: PUSH
17100: LD_INT 1
17102: DOUBLE
17103: EQUAL
17104: IFTRUE 17108
17106: GO 17119
17108: POP
// begin changeClass := 1 ;
17109: LD_ADDR_VAR 0 1
17113: PUSH
17114: LD_INT 1
17116: ST_TO_ADDR
// end ; 2 :
17117: GO 17359
17119: LD_INT 2
17121: DOUBLE
17122: EQUAL
17123: IFTRUE 17127
17125: GO 17279
17127: POP
// begin Say ( Heike , DH-1-decline ) ;
17128: LD_EXP 24
17132: PPUSH
17133: LD_STRING DH-1-decline
17135: PPUSH
17136: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17140: LD_EXP 34
17144: PPUSH
17145: LD_STRING DI-1-decline
17147: PPUSH
17148: CALL_OW 88
// InGameOff ;
17152: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17156: LD_EXP 34
17160: PPUSH
17161: LD_INT 30
17163: PPUSH
17164: LD_INT 1
17166: PPUSH
17167: CALL_OW 111
// p := 0 ;
17171: LD_ADDR_VAR 0 3
17175: PUSH
17176: LD_INT 0
17178: ST_TO_ADDR
// repeat p := p + 1 ;
17179: LD_ADDR_VAR 0 3
17183: PUSH
17184: LD_VAR 0 3
17188: PUSH
17189: LD_INT 1
17191: PLUS
17192: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17193: LD_INT 35
17195: PPUSH
17196: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17200: LD_EXP 34
17204: PPUSH
17205: LD_INT 30
17207: PPUSH
17208: LD_INT 1
17210: PPUSH
17211: CALL_OW 307
17215: PUSH
17216: LD_INT 22
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 101
17228: PUSH
17229: LD_INT 6
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: NOT
17245: OR
17246: PUSH
17247: LD_VAR 0 3
17251: PUSH
17252: LD_INT 10
17254: GREATER
17255: OR
17256: IFFALSE 17179
// RemoveUnit ( Ibrahim ) ;
17258: LD_EXP 34
17262: PPUSH
17263: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17267: LD_INT 1
17269: PPUSH
17270: LD_STRING 03_IbrahimHasEscaped
17272: PPUSH
17273: CALL_OW 39
// end ; 3 :
17277: GO 17359
17279: LD_INT 3
17281: DOUBLE
17282: EQUAL
17283: IFTRUE 17287
17285: GO 17358
17287: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17288: LD_EXP 24
17292: PPUSH
17293: LD_STRING DH-1-radio-hq
17295: PPUSH
17296: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17300: LD_EXP 33
17304: PPUSH
17305: LD_STRING DO-1-radio-hq
17307: PPUSH
17308: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17312: LD_EXP 24
17316: PPUSH
17317: LD_STRING DH-2-radio-hq
17319: PPUSH
17320: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17324: LD_EXP 33
17328: PPUSH
17329: LD_STRING DO-2-radio-hq
17331: PPUSH
17332: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17336: LD_EXP 24
17340: PPUSH
17341: LD_STRING DH-3-radio-hq
17343: PPUSH
17344: CALL_OW 88
// changeClass := 1 ;
17348: LD_ADDR_VAR 0 1
17352: PUSH
17353: LD_INT 1
17355: ST_TO_ADDR
// end ; end ;
17356: GO 17359
17358: POP
// if changeClass then
17359: LD_VAR 0 1
17363: IFFALSE 17578
// begin Say ( Heike , DH-1-agree ) ;
17365: LD_EXP 24
17369: PPUSH
17370: LD_STRING DH-1-agree
17372: PPUSH
17373: CALL_OW 88
// if IsOk ( Givi ) then
17377: LD_EXP 25
17381: PPUSH
17382: CALL_OW 302
17386: IFFALSE 17424
// begin Say ( Givi , DG-1-agree ) ;
17388: LD_EXP 25
17392: PPUSH
17393: LD_STRING DG-1-agree
17395: PPUSH
17396: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17400: LD_EXP 24
17404: PPUSH
17405: LD_STRING DH-2-agree
17407: PPUSH
17408: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17412: LD_EXP 25
17416: PPUSH
17417: LD_STRING DG-2-agree
17419: PPUSH
17420: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17424: LD_VAR 0 4
17428: PPUSH
17429: CALL_OW 313
17433: PUSH
17434: LD_INT 6
17436: EQUAL
17437: IFFALSE 17457
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17439: LD_VAR 0 4
17443: PPUSH
17444: CALL_OW 313
17448: PUSH
17449: LD_INT 1
17451: ARRAY
17452: PPUSH
17453: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17457: LD_EXP 34
17461: PPUSH
17462: LD_INT 2
17464: PPUSH
17465: CALL_OW 235
// ComEnterUnit ( Ibrahim , depot ) ;
17469: LD_EXP 34
17473: PPUSH
17474: LD_VAR 0 4
17478: PPUSH
17479: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17483: LD_INT 35
17485: PPUSH
17486: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17490: LD_EXP 34
17494: PPUSH
17495: CALL_OW 310
17499: IFFALSE 17483
// b := IsInUnit ( Ibrahim ) ;
17501: LD_ADDR_VAR 0 2
17505: PUSH
17506: LD_EXP 34
17510: PPUSH
17511: CALL_OW 310
17515: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
17516: LD_EXP 34
17520: PPUSH
17521: CALL_OW 64
// uc_side := 2 ;
17525: LD_ADDR_OWVAR 20
17529: PUSH
17530: LD_INT 2
17532: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17533: LD_ADDR_EXP 34
17537: PUSH
17538: LD_STRING Ibrahim
17540: PPUSH
17541: LD_INT 0
17543: PPUSH
17544: LD_STRING 
17546: PPUSH
17547: CALL 281 0 3
17551: ST_TO_ADDR
// PlaceHumanInUnit ( Ibrahim , b ) ;
17552: LD_EXP 34
17556: PPUSH
17557: LD_VAR 0 2
17561: PPUSH
17562: CALL_OW 52
// InGameOff ;
17566: CALL_OW 9
// allowConvoys := true ;
17570: LD_ADDR_EXP 11
17574: PUSH
17575: LD_INT 1
17577: ST_TO_ADDR
// end ; end ;
17578: PPOPN 4
17580: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17581: LD_EXP 10
17585: PUSH
17586: LD_EXP 17
17590: PUSH
17591: LD_INT 1
17593: LESS
17594: AND
17595: IFFALSE 17986
17597: GO 17599
17599: DISABLE
// begin DialogueOn ;
17600: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17604: LD_EXP 24
17608: PPUSH
17609: LD_STRING DH-1-final
17611: PPUSH
17612: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17616: LD_OWVAR 1
17620: PUSH
17621: LD_INT 126000
17623: PUSH
17624: LD_INT 115500
17626: PUSH
17627: LD_INT 105000
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: PUSH
17635: LD_OWVAR 67
17639: ARRAY
17640: LESSEQUAL
17641: IFFALSE 17655
// AddMedal ( med1 , 1 ) else
17643: LD_STRING med1
17645: PPUSH
17646: LD_INT 1
17648: PPUSH
17649: CALL_OW 101
17653: GO 17666
// AddMedal ( med1 , - 1 ) ;
17655: LD_STRING med1
17657: PPUSH
17658: LD_INT 1
17660: NEG
17661: PPUSH
17662: CALL_OW 101
// if vehCounter >= 2 then
17666: LD_EXP 18
17670: PUSH
17671: LD_INT 2
17673: GREATEREQUAL
17674: IFFALSE 17688
// AddMedal ( med2 , 1 ) else
17676: LD_STRING med2
17678: PPUSH
17679: LD_INT 1
17681: PPUSH
17682: CALL_OW 101
17686: GO 17699
// AddMedal ( med2 , - 1 ) ;
17688: LD_STRING med2
17690: PPUSH
17691: LD_INT 1
17693: NEG
17694: PPUSH
17695: CALL_OW 101
// if deadCounter = 0 then
17699: LD_EXP 8
17703: PUSH
17704: LD_INT 0
17706: EQUAL
17707: IFFALSE 17721
// AddMedal ( med3 , 1 ) else
17709: LD_STRING med3
17711: PPUSH
17712: LD_INT 1
17714: PPUSH
17715: CALL_OW 101
17719: GO 17732
// AddMedal ( med3 , - 1 ) ;
17721: LD_STRING med3
17723: PPUSH
17724: LD_INT 1
17726: NEG
17727: PPUSH
17728: CALL_OW 101
// GiveMedals ( MAIN ) ;
17732: LD_STRING MAIN
17734: PPUSH
17735: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17739: LD_INT 22
17741: PUSH
17742: LD_INT 2
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 23
17751: PUSH
17752: LD_INT 2
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 21
17761: PUSH
17762: LD_INT 1
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: LIST
17773: PPUSH
17774: CALL_OW 69
17778: PPUSH
17779: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17783: LD_EXP 24
17787: PPUSH
17788: LD_STRING 03_Heike
17790: PPUSH
17791: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17795: LD_EXP 28
17799: PPUSH
17800: LD_STRING 03_Aviradze
17802: PPUSH
17803: CALL_OW 38
// if Givi then
17807: LD_EXP 25
17811: IFFALSE 17825
// SaveCharacters ( Givi , 03_Givi ) ;
17813: LD_EXP 25
17817: PPUSH
17818: LD_STRING 03_Givi
17820: PPUSH
17821: CALL_OW 38
// if Mike then
17825: LD_EXP 26
17829: IFFALSE 17843
// SaveCharacters ( Mike , 03_Mike ) ;
17831: LD_EXP 26
17835: PPUSH
17836: LD_STRING 03_Mike
17838: PPUSH
17839: CALL_OW 38
// if Kamil then
17843: LD_EXP 27
17847: IFFALSE 17861
// SaveCharacters ( Kamil , 03_Kamil ) ;
17849: LD_EXP 27
17853: PPUSH
17854: LD_STRING 03_Kamil
17856: PPUSH
17857: CALL_OW 38
// if Kaia then
17861: LD_EXP 29
17865: IFFALSE 17879
// SaveCharacters ( Kaia , 03_Kaia ) ;
17867: LD_EXP 29
17871: PPUSH
17872: LD_STRING 03_Kaia
17874: PPUSH
17875: CALL_OW 38
// if Sophia then
17879: LD_EXP 30
17883: IFFALSE 17897
// SaveCharacters ( Sophia , 03_Sophia ) ;
17885: LD_EXP 30
17889: PPUSH
17890: LD_STRING 03_Sophia
17892: PPUSH
17893: CALL_OW 38
// if Markov then
17897: LD_EXP 31
17901: IFFALSE 17915
// SaveCharacters ( Markov , 03_Markov ) ;
17903: LD_EXP 31
17907: PPUSH
17908: LD_STRING 03_Markov
17910: PPUSH
17911: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
17915: LD_EXP 34
17919: PUSH
17920: LD_EXP 34
17924: PPUSH
17925: CALL_OW 255
17929: PUSH
17930: LD_INT 2
17932: EQUAL
17933: AND
17934: IFFALSE 17948
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
17936: LD_EXP 34
17940: PPUSH
17941: LD_STRING 03_Ibrahim
17943: PPUSH
17944: CALL_OW 38
// if heikeSecondSquad then
17948: LD_EXP 38
17952: IFFALSE 17966
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
17954: LD_EXP 38
17958: PPUSH
17959: LD_STRING 03_others
17961: PPUSH
17962: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
17966: LD_EXP 8
17970: PPUSH
17971: LD_STRING 03_DeadCounter
17973: PPUSH
17974: CALL_OW 39
// YouWin ;
17978: CALL_OW 103
// DialogueOff ;
17982: CALL_OW 7
// end ; end_of_file
17986: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17987: LD_VAR 0 1
17991: PUSH
17992: LD_EXP 24
17996: EQUAL
17997: IFFALSE 18006
// YouLost ( Heike ) ;
17999: LD_STRING Heike
18001: PPUSH
18002: CALL_OW 104
// if un = Aviradze then
18006: LD_VAR 0 1
18010: PUSH
18011: LD_EXP 28
18015: EQUAL
18016: IFFALSE 18025
// YouLost ( Aviradze ) ;
18018: LD_STRING Aviradze
18020: PPUSH
18021: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18025: LD_VAR 0 1
18029: PUSH
18030: LD_INT 11
18032: EQUAL
18033: PUSH
18034: LD_EXP 10
18038: NOT
18039: AND
18040: IFFALSE 18049
// YouLost ( Depot ) ;
18042: LD_STRING Depot
18044: PPUSH
18045: CALL_OW 104
// if un = arDepot then
18049: LD_VAR 0 1
18053: PUSH
18054: LD_INT 5
18056: EQUAL
18057: IFFALSE 18066
// YouLost ( FarmerDepot ) ;
18059: LD_STRING FarmerDepot
18061: PPUSH
18062: CALL_OW 104
// if un = Farmer then
18066: LD_VAR 0 1
18070: PUSH
18071: LD_EXP 32
18075: EQUAL
18076: IFFALSE 18085
// YouLost ( Farmer ) ;
18078: LD_STRING Farmer
18080: PPUSH
18081: CALL_OW 104
// if un in usForces then
18085: LD_VAR 0 1
18089: PUSH
18090: LD_EXP 40
18094: IN
18095: IFFALSE 18113
// usForces := usForces diff un ;
18097: LD_ADDR_EXP 40
18101: PUSH
18102: LD_EXP 40
18106: PUSH
18107: LD_VAR 0 1
18111: DIFF
18112: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18113: LD_VAR 0 1
18117: PUSH
18118: LD_INT 22
18120: PUSH
18121: LD_INT 2
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 23
18130: PUSH
18131: LD_INT 2
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 21
18140: PUSH
18141: LD_INT 1
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: PPUSH
18153: CALL_OW 69
18157: IN
18158: IFFALSE 18174
// deadCounter := deadCounter + 1 ;
18160: LD_ADDR_EXP 8
18164: PUSH
18165: LD_EXP 8
18169: PUSH
18170: LD_INT 1
18172: PLUS
18173: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18174: LD_VAR 0 1
18178: PUSH
18179: LD_INT 22
18181: PUSH
18182: LD_INT 4
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 34
18191: PUSH
18192: LD_INT 12
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PPUSH
18203: CALL_OW 69
18207: IN
18208: PUSH
18209: LD_EXP 15
18213: NOT
18214: AND
18215: IFFALSE 18225
// firstConvoyDestroyed := true ;
18217: LD_ADDR_EXP 15
18221: PUSH
18222: LD_INT 1
18224: ST_TO_ADDR
// if un in usAttackers then
18225: LD_VAR 0 1
18229: PUSH
18230: LD_EXP 43
18234: IN
18235: IFFALSE 18253
// usAttackers := usAttackers diff un ;
18237: LD_ADDR_EXP 43
18241: PUSH
18242: LD_EXP 43
18246: PUSH
18247: LD_VAR 0 1
18251: DIFF
18252: ST_TO_ADDR
// end ;
18253: PPOPN 1
18255: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18256: LD_VAR 0 2
18260: PUSH
18261: LD_EXP 34
18265: EQUAL
18266: PUSH
18267: LD_EXP 21
18271: AND
18272: IFFALSE 18318
// begin Video ( true ) ;
18274: LD_INT 1
18276: PPUSH
18277: CALL 1004 0 1
// ComEnterUnit ( Ibrahim , usDepot ) ;
18281: LD_EXP 34
18285: PPUSH
18286: LD_INT 11
18288: PPUSH
18289: CALL_OW 120
// repeat wait ( 3 ) ;
18293: LD_INT 3
18295: PPUSH
18296: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18300: LD_EXP 34
18304: PPUSH
18305: CALL_OW 310
18309: IFFALSE 18293
// Video ( false ) ;
18311: LD_INT 0
18313: PPUSH
18314: CALL 1004 0 1
// end ; end ;
18318: PPOPN 2
18320: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18321: LD_VAR 0 2
18325: PUSH
18326: LD_EXP 24
18330: EQUAL
18331: PUSH
18332: LD_VAR 0 1
18336: PUSH
18337: LD_INT 11
18339: EQUAL
18340: AND
18341: PUSH
18342: LD_EXP 21
18346: AND
18347: IFFALSE 18353
// IbrahimQuery ;
18349: CALL 16443 0 0
// end ;
18353: PPOPN 2
18355: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin if oldId in usAttackers then
18356: LD_VAR 0 2
18360: PUSH
18361: LD_EXP 43
18365: IN
18366: IFFALSE 18384
// usAttackers := usAttackers diff oldId ;
18368: LD_ADDR_EXP 43
18372: PUSH
18373: LD_EXP 43
18377: PUSH
18378: LD_VAR 0 2
18382: DIFF
18383: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18384: LD_VAR 0 3
18388: PUSH
18389: LD_INT 4
18391: EQUAL
18392: PUSH
18393: LD_EXP 15
18397: NOT
18398: AND
18399: IFFALSE 18409
// firstConvoyDestroyed := true ;
18401: LD_ADDR_EXP 15
18405: PUSH
18406: LD_INT 1
18408: ST_TO_ADDR
// if GetWeapon ( oldId ) = us_cargo_bay and GetCargo ( oldId , mat_cans ) = 0 then
18409: LD_VAR 0 2
18413: PPUSH
18414: CALL_OW 264
18418: PUSH
18419: LD_INT 12
18421: EQUAL
18422: PUSH
18423: LD_VAR 0 2
18427: PPUSH
18428: LD_INT 1
18430: PPUSH
18431: CALL_OW 289
18435: PUSH
18436: LD_INT 0
18438: EQUAL
18439: AND
18440: IFFALSE 18446
// EmptyCargoDialog ;
18442: CALL 15045 0 0
// end ;
18446: PPOPN 4
18448: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18449: LD_VAR 0 1
18453: PUSH
18454: LD_INT 2
18456: EQUAL
18457: PUSH
18458: LD_VAR 0 2
18462: PUSH
18463: LD_INT 5
18465: EQUAL
18466: AND
18467: IFFALSE 18476
// YouLost ( Attack ) ;
18469: LD_STRING Attack
18471: PPUSH
18472: CALL_OW 104
// end ;
18476: PPOPN 2
18478: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 then
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 255
18488: PUSH
18489: LD_INT 1
18491: EQUAL
18492: IFFALSE 18626
// begin if GetBType ( b ) = b_lab then
18494: LD_VAR 0 1
18498: PPUSH
18499: CALL_OW 266
18503: PUSH
18504: LD_INT 6
18506: EQUAL
18507: IFFALSE 18547
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18509: LD_EXP 40
18513: PPUSH
18514: LD_INT 25
18516: PUSH
18517: LD_INT 4
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PPUSH
18524: CALL_OW 72
18528: PPUSH
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 120
// AmLabResearch ( b ) ;
18538: LD_VAR 0 1
18542: PPUSH
18543: CALL 5934 0 1
// end ; if GetBType ( b ) = b_armoury then
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 266
18556: PUSH
18557: LD_INT 4
18559: EQUAL
18560: IFFALSE 18608
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18562: LD_EXP 40
18566: PPUSH
18567: LD_INT 25
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 3
18579: PUSH
18580: LD_INT 54
18582: PUSH
18583: EMPTY
18584: LIST
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PPUSH
18594: CALL_OW 72
18598: PPUSH
18599: LD_VAR 0 1
18603: PPUSH
18604: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18608: LD_ADDR_EXP 42
18612: PUSH
18613: LD_EXP 42
18617: PPUSH
18618: LD_INT 1
18620: PPUSH
18621: CALL_OW 3
18625: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
18626: LD_VAR 0 1
18630: PPUSH
18631: CALL_OW 255
18635: PUSH
18636: LD_INT 5
18638: EQUAL
18639: IFFALSE 18653
// SetBLevel ( b , 5 ) ;
18641: LD_VAR 0 1
18645: PPUSH
18646: LD_INT 5
18648: PPUSH
18649: CALL_OW 241
// end ;
18653: PPOPN 1
18655: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18656: LD_VAR 0 1
18660: PPUSH
18661: CALL_OW 255
18665: PUSH
18666: LD_INT 2
18668: EQUAL
18669: IFFALSE 18685
// vehCounter := vehCounter + 1 ;
18671: LD_ADDR_EXP 18
18675: PUSH
18676: LD_EXP 18
18680: PUSH
18681: LD_INT 1
18683: PLUS
18684: ST_TO_ADDR
// end ;
18685: PPOPN 2
18687: END
// on SailEvent ( event ) do begin if event = eventAttack then
18688: LD_VAR 0 1
18692: PUSH
18693: LD_EXP 20
18697: EQUAL
18698: IFFALSE 18704
// AmericanAttack ;
18700: CALL 7374 0 0
// end ; end_of_file
18704: PPOPN 1
18706: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] do
18707: LD_OWVAR 1
18711: PUSH
18712: LD_INT 8400
18714: PUSH
18715: LD_INT 6300
18717: PUSH
18718: LD_INT 5250
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: LIST
18725: PUSH
18726: LD_OWVAR 67
18730: ARRAY
18731: LESSEQUAL
18732: IFFALSE 18759
18734: GO 18736
18736: DISABLE
// begin enable ;
18737: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18738: LD_INT 1
18740: PPUSH
18741: LD_INT 5
18743: PPUSH
18744: CALL_OW 12
18748: PPUSH
18749: LD_INT 9
18751: PPUSH
18752: LD_INT 1
18754: PPUSH
18755: CALL_OW 55
// end ;
18759: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 26 26$00 , 23 23$00 , 20 20$00 ] [ Difficulty ] do
18760: LD_EXP 6
18764: PUSH
18765: LD_OWVAR 1
18769: PUSH
18770: LD_INT 54600
18772: PUSH
18773: LD_INT 48300
18775: PUSH
18776: LD_INT 42000
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: LIST
18783: PUSH
18784: LD_OWVAR 67
18788: ARRAY
18789: LESSEQUAL
18790: AND
18791: IFFALSE 18818
18793: GO 18795
18795: DISABLE
// begin enable ;
18796: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18797: LD_INT 1
18799: PPUSH
18800: LD_INT 5
18802: PPUSH
18803: CALL_OW 12
18807: PPUSH
18808: LD_INT 9
18810: PPUSH
18811: LD_INT 1
18813: PPUSH
18814: CALL_OW 55
// end ; end_of_file
18818: END
// every 0 0$1 trigger not retreatAllowed and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
18819: LD_EXP 10
18823: NOT
18824: PUSH
18825: LD_EXP 4
18829: AND
18830: PUSH
18831: LD_EXP 12
18835: PUSH
18836: LD_EXP 13
18840: LESSEQUAL
18841: AND
18842: IFFALSE 18932
18844: GO 18846
18846: DISABLE
// begin enable ;
18847: ENABLE
// display_strings := [ #X103-1 , farmerCrates , farmerRequestedCrates ] ;
18848: LD_ADDR_OWVAR 47
18852: PUSH
18853: LD_STRING #X103-1
18855: PUSH
18856: LD_EXP 12
18860: PUSH
18861: LD_EXP 13
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
18871: LD_ADDR_EXP 12
18875: PUSH
18876: LD_INT 5
18878: PPUSH
18879: CALL_OW 274
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: CALL_OW 275
18891: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
18892: LD_INT 10
18894: PPUSH
18895: LD_INT 1
18897: PPUSH
18898: CALL_OW 287
18902: PUSH
18903: LD_INT 0
18905: EQUAL
18906: IFFALSE 18924
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
18908: LD_ADDR_EXP 14
18912: PUSH
18913: LD_EXP 14
18917: PUSH
18918: LD_INT 35
18920: MINUS
18921: ST_TO_ADDR
18922: GO 18932
// farmerCratesCounter := 30 30$00 ;
18924: LD_ADDR_EXP 14
18928: PUSH
18929: LD_INT 63000
18931: ST_TO_ADDR
// end ; end_of_file
18932: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
18933: GO 18935
18935: DISABLE
// begin ru_radar := 98 ;
18936: LD_ADDR_EXP 44
18940: PUSH
18941: LD_INT 98
18943: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18944: LD_ADDR_EXP 45
18948: PUSH
18949: LD_INT 89
18951: ST_TO_ADDR
// us_hack := 99 ;
18952: LD_ADDR_EXP 46
18956: PUSH
18957: LD_INT 99
18959: ST_TO_ADDR
// us_artillery := 97 ;
18960: LD_ADDR_EXP 47
18964: PUSH
18965: LD_INT 97
18967: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18968: LD_ADDR_EXP 48
18972: PUSH
18973: LD_INT 91
18975: ST_TO_ADDR
// tech_Artillery := 80 ;
18976: LD_ADDR_EXP 49
18980: PUSH
18981: LD_INT 80
18983: ST_TO_ADDR
// tech_RadMat := 81 ;
18984: LD_ADDR_EXP 50
18988: PUSH
18989: LD_INT 81
18991: ST_TO_ADDR
// tech_BasicTools := 82 ;
18992: LD_ADDR_EXP 51
18996: PUSH
18997: LD_INT 82
18999: ST_TO_ADDR
// tech_Cargo := 83 ;
19000: LD_ADDR_EXP 52
19004: PUSH
19005: LD_INT 83
19007: ST_TO_ADDR
// tech_Track := 84 ;
19008: LD_ADDR_EXP 53
19012: PUSH
19013: LD_INT 84
19015: ST_TO_ADDR
// tech_Crane := 85 ;
19016: LD_ADDR_EXP 54
19020: PUSH
19021: LD_INT 85
19023: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19024: LD_ADDR_EXP 55
19028: PUSH
19029: LD_INT 86
19031: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19032: LD_ADDR_EXP 56
19036: PUSH
19037: LD_INT 87
19039: ST_TO_ADDR
// end ;
19040: END
