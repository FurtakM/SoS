// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 645 0 0
// PrepareArabian ;
  12: CALL 1004 0 0
// PrepareAmerican ;
  16: CALL 4065 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9184 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack , cargoRecycled ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// cargoRecycled := false ;
 336: LD_ADDR_EXP 30
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 349: LD_INT 0
 351: PPUSH
// uc_side := side ;
 352: LD_ADDR_OWVAR 20
 356: PUSH
 357: LD_VAR 0 1
 361: ST_TO_ADDR
// uc_nation := nation ;
 362: LD_ADDR_OWVAR 21
 366: PUSH
 367: LD_VAR 0 2
 371: ST_TO_ADDR
// vc_chassis := chassis ;
 372: LD_ADDR_OWVAR 37
 376: PUSH
 377: LD_VAR 0 3
 381: ST_TO_ADDR
// vc_engine := engine ;
 382: LD_ADDR_OWVAR 39
 386: PUSH
 387: LD_VAR 0 4
 391: ST_TO_ADDR
// vc_control := control ;
 392: LD_ADDR_OWVAR 38
 396: PUSH
 397: LD_VAR 0 5
 401: ST_TO_ADDR
// vc_weapon := weapon ;
 402: LD_ADDR_OWVAR 40
 406: PUSH
 407: LD_VAR 0 6
 411: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 412: LD_ADDR_OWVAR 41
 416: PUSH
 417: LD_VAR 0 7
 421: ST_TO_ADDR
// result := CreateVehicle ;
 422: LD_ADDR_VAR 0 8
 426: PUSH
 427: CALL_OW 45
 431: ST_TO_ADDR
// end ;
 432: LD_VAR 0 8
 436: RET
// export function SayX ( units , ident ) ; var i ; begin
 437: LD_INT 0
 439: PPUSH
 440: PPUSH
// result := false ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// if not units then
 449: LD_VAR 0 1
 453: NOT
 454: IFFALSE 458
// exit ;
 456: GO 512
// for i in units do
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 1
 467: PUSH
 468: FOR_IN
 469: IFFALSE 510
// if IsOk ( i ) then
 471: LD_VAR 0 4
 475: PPUSH
 476: CALL_OW 302
 480: IFFALSE 508
// begin Say ( i , ident ) ;
 482: LD_VAR 0 4
 486: PPUSH
 487: LD_VAR 0 2
 491: PPUSH
 492: CALL_OW 88
// result := i ;
 496: LD_ADDR_VAR 0 3
 500: PUSH
 501: LD_VAR 0 4
 505: ST_TO_ADDR
// break ;
 506: GO 510
// end ;
 508: GO 468
 510: POP
 511: POP
// end ;
 512: LD_VAR 0 3
 516: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// InitUc ;
 521: CALL_OW 18
// InitHc ;
 525: CALL_OW 19
// uc_side := 0 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// uc_nation := 0 ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_INT 0
 544: ST_TO_ADDR
// for i = 1 to amount do
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: DOUBLE
 551: LD_INT 1
 553: DEC
 554: ST_TO_ADDR
 555: LD_VAR 0 2
 559: PUSH
 560: FOR_TO
 561: IFFALSE 634
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 563: LD_ADDR_OWVAR 29
 567: PUSH
 568: LD_INT 9
 570: PPUSH
 571: LD_INT 12
 573: PPUSH
 574: CALL_OW 12
 578: PUSH
 579: LD_INT 9
 581: PPUSH
 582: LD_INT 12
 584: PPUSH
 585: CALL_OW 12
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: ST_TO_ADDR
// hc_agressivity := 0 ;
 594: LD_ADDR_OWVAR 35
 598: PUSH
 599: LD_INT 0
 601: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 602: LD_INT 0
 604: PPUSH
 605: LD_INT 12
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 615: CALL_OW 44
 619: PPUSH
 620: LD_VAR 0 1
 624: PPUSH
 625: LD_INT 0
 627: PPUSH
 628: CALL_OW 49
// end ;
 632: GO 560
 634: POP
 635: POP
// InitHc ;
 636: CALL_OW 19
// end ;
 640: LD_VAR 0 3
 644: RET
// export function CreateNature ; var i ; begin
 645: LD_INT 0
 647: PPUSH
 648: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 649: LD_INT 2
 651: PPUSH
 652: LD_INT 5
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: LD_INT 4
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_OWVAR 67
 674: ARRAY
 675: PPUSH
 676: CALL 517 0 2
// for i := 1 to 2 do
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: DOUBLE
 686: LD_INT 1
 688: DEC
 689: ST_TO_ADDR
 690: LD_INT 2
 692: PUSH
 693: FOR_TO
 694: IFFALSE 729
// begin hc_class := 21 ;
 696: LD_ADDR_OWVAR 28
 700: PUSH
 701: LD_INT 21
 703: ST_TO_ADDR
// hc_gallery :=  ;
 704: LD_ADDR_OWVAR 33
 708: PUSH
 709: LD_STRING 
 711: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 712: CALL_OW 44
 716: PPUSH
 717: LD_INT 2
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 693
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 2
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 780
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_INT 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 49
// end ;
 778: GO 744
 780: POP
 781: POP
// for i := 1 to 2 do
 782: LD_ADDR_VAR 0 2
 786: PUSH
 787: DOUBLE
 788: LD_INT 1
 790: DEC
 791: ST_TO_ADDR
 792: LD_INT 2
 794: PUSH
 795: FOR_TO
 796: IFFALSE 831
// begin hc_class := 13 ;
 798: LD_ADDR_OWVAR 28
 802: PUSH
 803: LD_INT 13
 805: ST_TO_ADDR
// hc_gallery :=  ;
 806: LD_ADDR_OWVAR 33
 810: PUSH
 811: LD_STRING 
 813: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 814: CALL_OW 44
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 795
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 1
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ; end_of_file
 999: LD_VAR 0 4
1003: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1004: LD_INT 0
1006: PPUSH
1007: PPUSH
1008: PPUSH
1009: PPUSH
// uc_side := 5 ;
1010: LD_ADDR_OWVAR 20
1014: PUSH
1015: LD_INT 5
1017: ST_TO_ADDR
// uc_nation := 2 ;
1018: LD_ADDR_OWVAR 21
1022: PUSH
1023: LD_INT 2
1025: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1026: LD_INT 5
1028: PPUSH
1029: CALL_OW 274
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 65
1039: PPUSH
1040: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1044: LD_ADDR_EXP 39
1048: PUSH
1049: LD_STRING Farmer
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: LD_STRING 
1057: PPUSH
1058: CALL 41348 0 3
1062: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1063: LD_ADDR_EXP 40
1067: PUSH
1068: LD_STRING Omar
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: LD_STRING 
1076: PPUSH
1077: CALL 41348 0 3
1081: ST_TO_ADDR
// omarSquad := [ ] ;
1082: LD_ADDR_EXP 43
1086: PUSH
1087: EMPTY
1088: ST_TO_ADDR
// heikeSquad := [ ] ;
1089: LD_ADDR_EXP 44
1093: PUSH
1094: EMPTY
1095: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1096: LD_ADDR_EXP 45
1100: PUSH
1101: EMPTY
1102: ST_TO_ADDR
// omarCargo := [ ] ;
1103: LD_ADDR_EXP 46
1107: PUSH
1108: EMPTY
1109: ST_TO_ADDR
// for i := 1 to 5 do
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_INT 5
1122: PUSH
1123: FOR_TO
1124: IFFALSE 1282
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1126: LD_INT 0
1128: PPUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 2
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_VAR 0 2
1155: ARRAY
1156: PPUSH
1157: LD_INT 3
1159: PPUSH
1160: CALL_OW 380
// un := CreateHuman ;
1164: LD_ADDR_VAR 0 3
1168: PUSH
1169: CALL_OW 44
1173: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1174: LD_ADDR_EXP 43
1178: PUSH
1179: LD_EXP 43
1183: PUSH
1184: LD_VAR 0 3
1188: UNION
1189: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1190: LD_VAR 0 3
1194: PPUSH
1195: LD_INT 87
1197: PUSH
1198: LD_INT 30
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 91
1207: PUSH
1208: LD_INT 32
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 82
1217: PUSH
1218: LD_INT 15
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 79
1227: PUSH
1228: LD_INT 14
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: LD_INT 82
1237: PUSH
1238: LD_INT 13
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_VAR 0 2
1256: ARRAY
1257: PPUSH
1258: LD_INT 0
1260: PPUSH
1261: CALL 912 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1265: LD_VAR 0 3
1269: PPUSH
1270: LD_INT 93
1272: PPUSH
1273: LD_INT 21
1275: PPUSH
1276: CALL_OW 118
// end ;
1280: GO 1123
1282: POP
1283: POP
// uc_side := 2 ;
1284: LD_ADDR_OWVAR 20
1288: PUSH
1289: LD_INT 2
1291: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1292: LD_ADDR_EXP 31
1296: PUSH
1297: LD_STRING Heike
1299: PPUSH
1300: LD_EXP 1
1304: NOT
1305: PPUSH
1306: LD_EXP 2
1310: PPUSH
1311: CALL 41348 0 3
1315: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1316: LD_ADDR_EXP 35
1320: PUSH
1321: LD_STRING Aviradze
1323: PPUSH
1324: LD_EXP 1
1328: NOT
1329: PPUSH
1330: LD_EXP 2
1334: PPUSH
1335: CALL 41348 0 3
1339: ST_TO_ADDR
// tmp := [ ] ;
1340: LD_ADDR_VAR 0 4
1344: PUSH
1345: EMPTY
1346: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1347: LD_ADDR_EXP 32
1351: PUSH
1352: LD_STRING Givi
1354: PPUSH
1355: LD_EXP 1
1359: NOT
1360: PPUSH
1361: LD_EXP 2
1365: PPUSH
1366: CALL 41348 0 3
1370: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1371: LD_ADDR_EXP 33
1375: PUSH
1376: LD_STRING Mike
1378: PPUSH
1379: LD_EXP 1
1383: NOT
1384: PPUSH
1385: LD_EXP 2
1389: PPUSH
1390: CALL 41348 0 3
1394: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1395: LD_ADDR_EXP 34
1399: PUSH
1400: LD_STRING Kamil
1402: PPUSH
1403: LD_EXP 1
1407: NOT
1408: PPUSH
1409: LD_EXP 2
1413: PPUSH
1414: CALL 41348 0 3
1418: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1419: LD_ADDR_EXP 36
1423: PUSH
1424: LD_STRING Kaia
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_EXP 2
1437: PPUSH
1438: CALL 41348 0 3
1442: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1443: LD_ADDR_EXP 37
1447: PUSH
1448: LD_STRING Sophia
1450: PPUSH
1451: LD_EXP 1
1455: NOT
1456: PPUSH
1457: LD_EXP 2
1461: PPUSH
1462: CALL 41348 0 3
1466: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1467: LD_ADDR_EXP 38
1471: PUSH
1472: LD_STRING Markov
1474: PPUSH
1475: LD_EXP 1
1479: NOT
1480: PPUSH
1481: LD_EXP 2
1485: PPUSH
1486: CALL 41348 0 3
1490: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1491: LD_ADDR_EXP 45
1495: PUSH
1496: LD_STRING 02_others
1498: PPUSH
1499: CALL_OW 31
1503: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1504: LD_ADDR_VAR 0 4
1508: PUSH
1509: LD_EXP 33
1513: PUSH
1514: LD_EXP 34
1518: PUSH
1519: LD_EXP 36
1523: PUSH
1524: LD_EXP 37
1528: PUSH
1529: LD_EXP 38
1533: PUSH
1534: LD_EXP 32
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_EXP 45
1551: ADD
1552: PUSH
1553: LD_INT 0
1555: DIFF
1556: ST_TO_ADDR
// heikeSquad := tmp ;
1557: LD_ADDR_EXP 44
1561: PUSH
1562: LD_VAR 0 4
1566: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1567: LD_EXP 44
1571: PPUSH
1572: LD_INT 25
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 72
1586: PUSH
1587: LD_INT 3
1589: LESS
1590: IFFALSE 1640
// begin SetClass ( Kaia , 1 ) ;
1592: LD_EXP 36
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1604: LD_EXP 33
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1616: LD_EXP 32
1620: PPUSH
1621: LD_INT 1
1623: PPUSH
1624: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1628: LD_EXP 31
1632: PPUSH
1633: LD_INT 1
1635: PPUSH
1636: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1640: LD_ADDR_VAR 0 4
1644: PUSH
1645: LD_VAR 0 4
1649: PUSH
1650: LD_STRING 02_ape
1652: PPUSH
1653: CALL_OW 31
1657: UNION
1658: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1659: LD_EXP 31
1663: PPUSH
1664: LD_INT 92
1666: PPUSH
1667: LD_INT 17
1669: PPUSH
1670: LD_INT 0
1672: PPUSH
1673: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1677: LD_EXP 39
1681: PPUSH
1682: LD_INT 95
1684: PPUSH
1685: LD_INT 19
1687: PPUSH
1688: LD_INT 0
1690: PPUSH
1691: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1695: LD_EXP 40
1699: PPUSH
1700: LD_INT 89
1702: PPUSH
1703: LD_INT 25
1705: PPUSH
1706: LD_INT 0
1708: PPUSH
1709: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1713: LD_EXP 35
1717: PPUSH
1718: LD_INT 92
1720: PPUSH
1721: LD_INT 27
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1731: LD_EXP 40
1735: PPUSH
1736: LD_EXP 35
1740: PPUSH
1741: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1745: LD_EXP 35
1749: PPUSH
1750: LD_EXP 40
1754: PPUSH
1755: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1759: LD_EXP 31
1763: PUSH
1764: LD_EXP 39
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PPUSH
1773: LD_EXP 40
1777: PPUSH
1778: CALL_OW 119
// if tmp then
1782: LD_VAR 0 4
1786: IFFALSE 1840
// for i in tmp do
1788: LD_ADDR_VAR 0 2
1792: PUSH
1793: LD_VAR 0 4
1797: PUSH
1798: FOR_IN
1799: IFFALSE 1838
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1801: LD_VAR 0 2
1805: PPUSH
1806: LD_INT 94
1808: PPUSH
1809: LD_INT 14
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1822: LD_VAR 0 2
1826: PPUSH
1827: LD_EXP 31
1831: PPUSH
1832: CALL_OW 119
// end ;
1836: GO 1798
1838: POP
1839: POP
// farmerSquad := [ ] ;
1840: LD_ADDR_EXP 42
1844: PUSH
1845: EMPTY
1846: ST_TO_ADDR
// uc_side := 5 ;
1847: LD_ADDR_OWVAR 20
1851: PUSH
1852: LD_INT 5
1854: ST_TO_ADDR
// uc_nation := 2 ;
1855: LD_ADDR_OWVAR 21
1859: PUSH
1860: LD_INT 2
1862: ST_TO_ADDR
// for i := 1 to 4 do
1863: LD_ADDR_VAR 0 2
1867: PUSH
1868: DOUBLE
1869: LD_INT 1
1871: DEC
1872: ST_TO_ADDR
1873: LD_INT 4
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1955
// begin PrepareHuman ( false , 1 , 2 ) ;
1879: LD_INT 0
1881: PPUSH
1882: LD_INT 1
1884: PPUSH
1885: LD_INT 2
1887: PPUSH
1888: CALL_OW 380
// un := CreateHuman ;
1892: LD_ADDR_VAR 0 3
1896: PUSH
1897: CALL_OW 44
1901: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1902: LD_VAR 0 3
1906: PPUSH
1907: LD_INT 102
1909: PPUSH
1910: LD_INT 27
1912: PPUSH
1913: LD_INT 4
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1923: LD_ADDR_EXP 42
1927: PUSH
1928: LD_EXP 42
1932: PUSH
1933: LD_VAR 0 3
1937: UNION
1938: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1939: LD_VAR 0 3
1943: PPUSH
1944: LD_EXP 40
1948: PPUSH
1949: CALL_OW 119
// end ;
1953: GO 1876
1955: POP
1956: POP
// for i := 1 to 2 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_INT 2
1969: PUSH
1970: FOR_TO
1971: IFFALSE 2049
// begin PrepareHuman ( false , 2 , 2 ) ;
1973: LD_INT 0
1975: PPUSH
1976: LD_INT 2
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: CALL_OW 380
// un := CreateHuman ;
1986: LD_ADDR_VAR 0 3
1990: PUSH
1991: CALL_OW 44
1995: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1996: LD_VAR 0 3
2000: PPUSH
2001: LD_INT 108
2003: PPUSH
2004: LD_INT 62
2006: PPUSH
2007: LD_INT 2
2009: PPUSH
2010: LD_INT 0
2012: PPUSH
2013: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2017: LD_ADDR_EXP 42
2021: PUSH
2022: LD_EXP 42
2026: PUSH
2027: LD_VAR 0 3
2031: UNION
2032: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2033: LD_VAR 0 3
2037: PPUSH
2038: LD_EXP 40
2042: PPUSH
2043: CALL_OW 119
// end ;
2047: GO 1970
2049: POP
2050: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2051: LD_INT 109
2053: PPUSH
2054: LD_INT 63
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: LD_INT 15
2062: NEG
2063: PPUSH
2064: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2068: LD_INT 109
2070: PPUSH
2071: LD_INT 63
2073: PPUSH
2074: LD_INT 2
2076: PPUSH
2077: CALL_OW 331
// end ;
2081: LD_VAR 0 1
2085: RET
// export function PrepareIbrahim ( x , y ) ; begin
2086: LD_INT 0
2088: PPUSH
// uc_side := 6 ;
2089: LD_ADDR_OWVAR 20
2093: PUSH
2094: LD_INT 6
2096: ST_TO_ADDR
// uc_nation := 3 ;
2097: LD_ADDR_OWVAR 21
2101: PUSH
2102: LD_INT 3
2104: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2105: LD_ADDR_EXP 41
2109: PUSH
2110: LD_STRING IbrahimRu
2112: PPUSH
2113: LD_INT 0
2115: PPUSH
2116: LD_STRING 
2118: PPUSH
2119: CALL 41348 0 3
2123: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2124: LD_EXP 41
2128: PPUSH
2129: LD_VAR 0 1
2133: PPUSH
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: CALL_OW 50
// end ;
2149: LD_VAR 0 3
2153: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2154: LD_EXP 40
2158: PUSH
2159: LD_EXP 43
2163: ADD
2164: PPUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 3
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 72
2179: IFFALSE 2235
2181: GO 2183
2183: DISABLE
2184: LD_INT 0
2186: PPUSH
// begin enable ;
2187: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2188: LD_ADDR_VAR 0 1
2192: PUSH
2193: LD_EXP 40
2197: PUSH
2198: LD_EXP 43
2202: ADD
2203: PPUSH
2204: LD_INT 95
2206: PUSH
2207: LD_INT 3
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PPUSH
2214: CALL_OW 72
2218: PUSH
2219: FOR_IN
2220: IFFALSE 2233
// RemoveUnit ( i ) ;
2222: LD_VAR 0 1
2226: PPUSH
2227: CALL_OW 64
2231: GO 2219
2233: POP
2234: POP
// end ;
2235: PPOPN 1
2237: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2238: LD_EXP 3
2242: PUSH
2243: LD_EXP 39
2247: PPUSH
2248: LD_INT 4
2250: PPUSH
2251: CALL_OW 308
2255: AND
2256: IFFALSE 3060
2258: GO 2260
2260: DISABLE
2261: LD_INT 0
2263: PPUSH
2264: PPUSH
2265: PPUSH
2266: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2267: LD_EXP 39
2271: PPUSH
2272: LD_INT 110
2274: PPUSH
2275: LD_INT 60
2277: PPUSH
2278: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2282: LD_EXP 39
2286: PPUSH
2287: LD_INT 110
2289: PPUSH
2290: LD_INT 61
2292: PPUSH
2293: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_EXP 42
2306: PPUSH
2307: LD_INT 25
2309: PUSH
2310: LD_INT 1
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PPUSH
2317: CALL_OW 72
2321: ST_TO_ADDR
// if tmp then
2322: LD_VAR 0 2
2326: IFFALSE 2420
// begin for i := 1 to 2 do
2328: LD_ADDR_VAR 0 1
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_INT 2
2340: PUSH
2341: FOR_TO
2342: IFFALSE 2418
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2344: LD_VAR 0 2
2348: PUSH
2349: LD_VAR 0 1
2353: ARRAY
2354: PPUSH
2355: LD_INT 5
2357: PPUSH
2358: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2362: LD_VAR 0 2
2366: PUSH
2367: LD_VAR 0 1
2371: ARRAY
2372: PPUSH
2373: LD_INT 2
2375: PPUSH
2376: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2380: LD_VAR 0 2
2384: PUSH
2385: LD_VAR 0 1
2389: ARRAY
2390: PPUSH
2391: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2395: LD_VAR 0 2
2399: PUSH
2400: LD_VAR 0 1
2404: ARRAY
2405: PPUSH
2406: LD_INT 107
2408: PPUSH
2409: LD_INT 66
2411: PPUSH
2412: CALL_OW 171
// end ;
2416: GO 2341
2418: POP
2419: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2420: LD_ADDR_VAR 0 2
2424: PUSH
2425: LD_EXP 42
2429: PPUSH
2430: LD_INT 25
2432: PUSH
2433: LD_INT 2
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PPUSH
2440: CALL_OW 72
2444: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2445: LD_INT 35
2447: PPUSH
2448: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_EXP 42
2461: PPUSH
2462: LD_INT 25
2464: PUSH
2465: LD_INT 2
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 72
2476: ST_TO_ADDR
// until tmp ;
2477: LD_VAR 0 2
2481: IFFALSE 2445
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2483: LD_VAR 0 2
2487: PPUSH
2488: LD_INT 31
2490: PPUSH
2491: LD_INT 102
2493: PPUSH
2494: LD_INT 69
2496: PPUSH
2497: LD_INT 2
2499: PPUSH
2500: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2504: LD_INT 35
2506: PPUSH
2507: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2511: LD_EXP 42
2515: PPUSH
2516: LD_INT 3
2518: PUSH
2519: LD_INT 60
2521: PUSH
2522: EMPTY
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: LD_INT 25
2531: PUSH
2532: LD_INT 2
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PPUSH
2543: CALL_OW 72
2547: IFFALSE 2504
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: LD_EXP 42
2558: PPUSH
2559: LD_INT 25
2561: PUSH
2562: LD_INT 2
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PPUSH
2569: CALL_OW 72
2573: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2574: LD_VAR 0 2
2578: PPUSH
2579: LD_INT 6
2581: PPUSH
2582: LD_INT 116
2584: PPUSH
2585: LD_INT 55
2587: PPUSH
2588: LD_INT 4
2590: PPUSH
2591: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2595: LD_VAR 0 2
2599: PPUSH
2600: LD_INT 4
2602: PPUSH
2603: LD_INT 116
2605: PPUSH
2606: LD_INT 70
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 31
2623: PPUSH
2624: LD_INT 109
2626: PPUSH
2627: LD_INT 50
2629: PPUSH
2630: LD_INT 2
2632: PPUSH
2633: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2637: LD_INT 35
2639: PPUSH
2640: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2644: LD_INT 22
2646: PUSH
2647: LD_INT 5
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PUSH
2654: LD_INT 30
2656: PUSH
2657: LD_INT 4
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: PUSH
2664: LD_INT 3
2666: PUSH
2667: LD_INT 57
2669: PUSH
2670: EMPTY
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: LIST
2681: PPUSH
2682: CALL_OW 69
2686: IFFALSE 2637
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2688: LD_ADDR_VAR 0 3
2692: PUSH
2693: LD_INT 22
2695: PUSH
2696: LD_INT 5
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 30
2705: PUSH
2706: LD_INT 4
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 57
2718: PUSH
2719: EMPTY
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 69
2735: PUSH
2736: LD_INT 1
2738: ARRAY
2739: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2740: LD_ADDR_VAR 0 2
2744: PUSH
2745: LD_EXP 42
2749: PPUSH
2750: LD_INT 25
2752: PUSH
2753: LD_INT 1
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PPUSH
2760: CALL_OW 72
2764: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_VAR 0 3
2774: PPUSH
2775: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2779: LD_INT 35
2781: PPUSH
2782: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 30
2798: PUSH
2799: LD_INT 31
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: LD_INT 3
2808: PUSH
2809: LD_INT 57
2811: PUSH
2812: EMPTY
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 69
2828: PUSH
2829: LD_INT 2
2831: GREATEREQUAL
2832: IFFALSE 2779
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2834: LD_ADDR_VAR 0 2
2838: PUSH
2839: LD_EXP 42
2843: PPUSH
2844: LD_INT 25
2846: PUSH
2847: LD_INT 2
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 72
2858: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2859: LD_VAR 0 2
2863: PUSH
2864: LD_INT 1
2866: ARRAY
2867: PPUSH
2868: LD_INT 5
2870: PPUSH
2871: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2875: LD_VAR 0 2
2879: PUSH
2880: LD_INT 2
2882: ARRAY
2883: PUSH
2884: LD_VAR 0 2
2888: PUSH
2889: LD_INT 3
2891: ARRAY
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PPUSH
2897: LD_VAR 0 3
2901: PPUSH
2902: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2906: LD_VAR 0 2
2910: PUSH
2911: LD_INT 2
2913: ARRAY
2914: PUSH
2915: LD_VAR 0 2
2919: PUSH
2920: LD_INT 3
2922: ARRAY
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2935: LD_VAR 0 2
2939: PUSH
2940: LD_INT 2
2942: ARRAY
2943: PUSH
2944: LD_VAR 0 2
2948: PUSH
2949: LD_INT 3
2951: ARRAY
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: PPUSH
2957: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2961: LD_ADDR_VAR 0 4
2965: PUSH
2966: LD_INT 22
2968: PUSH
2969: LD_INT 5
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 31
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PPUSH
2990: CALL_OW 69
2994: ST_TO_ADDR
// for i := 1 to 2 do
2995: LD_ADDR_VAR 0 1
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 2
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3043
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3011: LD_VAR 0 2
3015: PUSH
3016: LD_VAR 0 1
3020: PUSH
3021: LD_INT 1
3023: PLUS
3024: ARRAY
3025: PPUSH
3026: LD_VAR 0 4
3030: PUSH
3031: LD_VAR 0 1
3035: ARRAY
3036: PPUSH
3037: CALL_OW 180
3041: GO 3008
3043: POP
3044: POP
// wait ( 1 1$00 ) ;
3045: LD_INT 2100
3047: PPUSH
3048: CALL_OW 67
// farmerBaseReady := true ;
3052: LD_ADDR_EXP 4
3056: PUSH
3057: LD_INT 1
3059: ST_TO_ADDR
// end ;
3060: PPOPN 4
3062: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3063: LD_EXP 4
3067: PUSH
3068: LD_EXP 12
3072: NOT
3073: AND
3074: IFFALSE 3596
3076: GO 3078
3078: DISABLE
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
3085: PPUSH
// begin enable ;
3086: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: LD_EXP 42
3096: PPUSH
3097: LD_INT 25
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PPUSH
3107: CALL_OW 72
3111: PUSH
3112: LD_EXP 39
3116: ADD
3117: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_EXP 42
3127: PPUSH
3128: LD_INT 25
3130: PUSH
3131: LD_INT 2
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 72
3142: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3143: LD_ADDR_VAR 0 5
3147: PUSH
3148: LD_INT 22
3150: PUSH
3151: LD_INT 5
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: LD_INT 21
3160: PUSH
3161: LD_INT 3
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: LD_INT 24
3173: PUSH
3174: LD_INT 1000
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 69
3194: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3195: LD_ADDR_VAR 0 4
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 5
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_INT 30
3212: PUSH
3213: LD_INT 4
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PPUSH
3224: CALL_OW 69
3228: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3229: LD_VAR 0 4
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: CALL_OW 302
3242: IFFALSE 3306
// for i in sol do
3244: LD_ADDR_VAR 0 1
3248: PUSH
3249: LD_VAR 0 3
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3304
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3257: LD_VAR 0 1
3261: PPUSH
3262: CALL_OW 256
3266: PUSH
3267: LD_INT 999
3269: LESS
3270: PUSH
3271: LD_VAR 0 1
3275: PPUSH
3276: CALL_OW 310
3280: NOT
3281: AND
3282: IFFALSE 3302
// ComEnterUnit ( i , arm [ 1 ] ) ;
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_VAR 0 4
3293: PUSH
3294: LD_INT 1
3296: ARRAY
3297: PPUSH
3298: CALL_OW 120
3302: GO 3254
3304: POP
3305: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3306: LD_VAR 0 2
3310: NOT
3311: PUSH
3312: LD_INT 22
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 21
3324: PUSH
3325: LD_INT 1
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PPUSH
3336: CALL_OW 69
3340: NOT
3341: AND
3342: IFFALSE 3434
// begin uc_side := 5 ;
3344: LD_ADDR_OWVAR 20
3348: PUSH
3349: LD_INT 5
3351: ST_TO_ADDR
// uc_nation := 2 ;
3352: LD_ADDR_OWVAR 21
3356: PUSH
3357: LD_INT 2
3359: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3360: LD_INT 0
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_INT 2
3368: PPUSH
3369: CALL_OW 380
// eng := CreateHuman ;
3373: LD_ADDR_VAR 0 2
3377: PUSH
3378: CALL_OW 44
3382: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3383: LD_VAR 0 2
3387: PPUSH
3388: LD_INT 102
3390: PPUSH
3391: LD_INT 8
3393: PPUSH
3394: LD_INT 0
3396: PPUSH
3397: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3401: LD_VAR 0 2
3405: PPUSH
3406: LD_INT 110
3408: PPUSH
3409: LD_INT 60
3411: PPUSH
3412: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3416: LD_ADDR_EXP 42
3420: PUSH
3421: LD_EXP 42
3425: PUSH
3426: LD_VAR 0 2
3430: UNION
3431: ST_TO_ADDR
// end else
3432: GO 3596
// begin for i in eng do
3434: LD_ADDR_VAR 0 1
3438: PUSH
3439: LD_VAR 0 2
3443: PUSH
3444: FOR_IN
3445: IFFALSE 3594
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3447: LD_INT 10
3449: PPUSH
3450: LD_INT 1
3452: PPUSH
3453: CALL_OW 287
3457: IFFALSE 3508
// begin if IsInUnit ( i ) then
3459: LD_VAR 0 1
3463: PPUSH
3464: CALL_OW 310
3468: IFFALSE 3479
// ComExitBuilding ( i ) ;
3470: LD_VAR 0 1
3474: PPUSH
3475: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3479: LD_VAR 0 1
3483: PPUSH
3484: LD_INT 10
3486: PPUSH
3487: CALL_OW 308
3491: NOT
3492: IFFALSE 3506
// AddComMoveToArea ( i , collectFarmerArea ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: LD_INT 10
3501: PPUSH
3502: CALL_OW 173
// end else
3506: GO 3592
// begin if damagedBuilding then
3508: LD_VAR 0 5
3512: IFFALSE 3556
// begin if IsInUnit ( i ) then
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 310
3523: IFFALSE 3536
// ComExitBuilding ( i ) else
3525: LD_VAR 0 1
3529: PPUSH
3530: CALL_OW 122
3534: GO 3554
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3536: LD_VAR 0 1
3540: PPUSH
3541: LD_VAR 0 5
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 130
// end else
3554: GO 3592
// if not IsInUnit ( i ) and not HasTask ( i ) then
3556: LD_VAR 0 1
3560: PPUSH
3561: CALL_OW 310
3565: NOT
3566: PUSH
3567: LD_VAR 0 1
3571: PPUSH
3572: CALL_OW 314
3576: NOT
3577: AND
3578: IFFALSE 3592
// ComEnterUnit ( i , arDepot ) ;
3580: LD_VAR 0 1
3584: PPUSH
3585: LD_INT 5
3587: PPUSH
3588: CALL_OW 120
// end ; end ;
3592: GO 3444
3594: POP
3595: POP
// end ; end ;
3596: PPOPN 5
3598: END
// export function CargoEvacuation ; begin
3599: LD_INT 0
3601: PPUSH
// wait ( 0 0$3 ) ;
3602: LD_INT 105
3604: PPUSH
3605: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3609: LD_ADDR_EXP 22
3613: PUSH
3614: LD_EXP 22
3618: PUSH
3619: LD_INT 1
3621: MINUS
3622: ST_TO_ADDR
// if omarCargoCounter = 0 then
3623: LD_EXP 22
3627: PUSH
3628: LD_INT 0
3630: EQUAL
3631: IFFALSE 3635
// exit ;
3633: GO 3942
// if omarCargo then
3635: LD_EXP 46
3639: IFFALSE 3650
// RemoveUnit ( omarCargo ) ;
3641: LD_EXP 46
3645: PPUSH
3646: CALL_OW 64
// omarCargo := PrepareCargo ;
3650: LD_ADDR_EXP 46
3654: PUSH
3655: CALL 3947 0 0
3659: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3660: LD_EXP 46
3664: PPUSH
3665: LD_INT 0
3667: PPUSH
3668: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3672: LD_EXP 46
3676: PPUSH
3677: LD_INT 107
3679: PPUSH
3680: LD_INT 59
3682: PPUSH
3683: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3687: LD_INT 35
3689: PPUSH
3690: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3694: LD_EXP 46
3698: PPUSH
3699: LD_INT 107
3701: PPUSH
3702: LD_INT 59
3704: PPUSH
3705: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3709: LD_EXP 46
3713: PPUSH
3714: CALL_OW 302
3718: NOT
3719: PUSH
3720: LD_EXP 46
3724: PPUSH
3725: CALL_OW 301
3729: OR
3730: IFFALSE 3734
// exit ;
3732: GO 3942
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3734: LD_EXP 46
3738: PPUSH
3739: LD_INT 107
3741: PPUSH
3742: LD_INT 59
3744: PPUSH
3745: CALL_OW 307
3749: PUSH
3750: LD_EXP 46
3754: PPUSH
3755: LD_INT 5
3757: PPUSH
3758: CALL_OW 296
3762: PUSH
3763: LD_INT 6
3765: LESS
3766: OR
3767: IFFALSE 3687
// SetTag ( omarCargo , 1 ) ;
3769: LD_EXP 46
3773: PPUSH
3774: LD_INT 1
3776: PPUSH
3777: CALL_OW 109
// wait ( 0 0$03 ) ;
3781: LD_INT 105
3783: PPUSH
3784: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3788: LD_EXP 46
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3803: LD_EXP 46
3807: PPUSH
3808: LD_INT 103
3810: PPUSH
3811: LD_INT 9
3813: PPUSH
3814: CALL_OW 171
// wait ( 0 0$1 ) ;
3818: LD_INT 35
3820: PPUSH
3821: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3825: LD_EXP 46
3829: PPUSH
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 100
3835: PPUSH
3836: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3847: LD_EXP 46
3851: PPUSH
3852: LD_INT 103
3854: PPUSH
3855: LD_INT 9
3857: PPUSH
3858: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3862: LD_EXP 46
3866: PPUSH
3867: CALL_OW 302
3871: NOT
3872: PUSH
3873: LD_EXP 46
3877: PPUSH
3878: CALL_OW 301
3882: OR
3883: IFFALSE 3887
// exit ;
3885: GO 3942
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3887: LD_EXP 46
3891: PPUSH
3892: LD_INT 103
3894: PPUSH
3895: LD_INT 9
3897: PPUSH
3898: CALL_OW 307
3902: PUSH
3903: LD_EXP 46
3907: PPUSH
3908: LD_INT 3
3910: PPUSH
3911: CALL_OW 308
3915: OR
3916: PUSH
3917: LD_EXP 46
3921: PPUSH
3922: CALL_OW 110
3926: PUSH
3927: LD_INT 0
3929: GREATER
3930: AND
3931: IFFALSE 3840
// RemoveUnit ( omarCargo ) ;
3933: LD_EXP 46
3937: PPUSH
3938: CALL_OW 64
// end ;
3942: LD_VAR 0 1
3946: RET
// export function PrepareCargo ; var un , veh ; begin
3947: LD_INT 0
3949: PPUSH
3950: PPUSH
3951: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3952: LD_ADDR_VAR 0 3
3956: PUSH
3957: LD_INT 5
3959: PPUSH
3960: LD_INT 2
3962: PPUSH
3963: LD_INT 14
3965: PPUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 32
3974: PPUSH
3975: LD_INT 80
3977: PPUSH
3978: CALL 349 0 7
3982: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3983: LD_VAR 0 3
3987: PPUSH
3988: LD_INT 4
3990: PPUSH
3991: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 101
4002: PPUSH
4003: LD_INT 8
4005: PPUSH
4006: LD_INT 0
4008: PPUSH
4009: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4013: LD_INT 0
4015: PPUSH
4016: LD_INT 3
4018: PPUSH
4019: LD_INT 4
4021: PPUSH
4022: CALL_OW 380
// un := CreateHuman ;
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: CALL_OW 44
4035: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4036: LD_VAR 0 2
4040: PPUSH
4041: LD_VAR 0 3
4045: PPUSH
4046: CALL_OW 52
// result := veh ;
4050: LD_ADDR_VAR 0 1
4054: PUSH
4055: LD_VAR 0 3
4059: ST_TO_ADDR
// end ; end_of_file
4060: LD_VAR 0 1
4064: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4065: LD_INT 0
4067: PPUSH
4068: PPUSH
4069: PPUSH
// usForces := [ ] ;
4070: LD_ADDR_EXP 47
4074: PUSH
4075: EMPTY
4076: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4077: LD_ADDR_EXP 49
4081: PUSH
4082: LD_INT 6
4084: PUSH
4085: LD_INT 32
4087: PUSH
4088: LD_INT 27
4090: PUSH
4091: LD_INT 1
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: PUSH
4100: LD_INT 4
4102: PUSH
4103: LD_INT 43
4105: PUSH
4106: LD_INT 24
4108: PUSH
4109: LD_INT 5
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 27
4120: PUSH
4121: LD_INT 29
4123: PUSH
4124: LD_INT 21
4126: PUSH
4127: LD_INT 0
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4141: LD_INT 11
4143: PPUSH
4144: CALL_OW 274
4148: PPUSH
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 150
4154: PUSH
4155: LD_INT 120
4157: PUSH
4158: LD_INT 100
4160: PUSH
4161: LD_INT 80
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: LD_OWVAR 67
4174: ARRAY
4175: PPUSH
4176: CALL_OW 277
// if Difficulty = 1 then
4180: LD_OWVAR 67
4184: PUSH
4185: LD_INT 1
4187: EQUAL
4188: IFFALSE 4197
// RemoveUnit ( hillBun ) ;
4190: LD_INT 14
4192: PPUSH
4193: CALL_OW 64
// uc_side := 1 ;
4197: LD_ADDR_OWVAR 20
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// uc_nation := 1 ;
4205: LD_ADDR_OWVAR 21
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// hc_gallery :=  ;
4213: LD_ADDR_OWVAR 33
4217: PUSH
4218: LD_STRING 
4220: ST_TO_ADDR
// hc_name :=  ;
4221: LD_ADDR_OWVAR 26
4225: PUSH
4226: LD_STRING 
4228: ST_TO_ADDR
// hc_importance := 0 ;
4229: LD_ADDR_OWVAR 32
4233: PUSH
4234: LD_INT 0
4236: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4237: LD_INT 1
4239: PPUSH
4240: LD_INT 1
4242: PPUSH
4243: LD_INT 3
4245: PPUSH
4246: CALL_OW 380
// usCommander := CreateHuman ;
4250: LD_ADDR_EXP 48
4254: PUSH
4255: CALL_OW 44
4259: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4260: LD_EXP 48
4264: PPUSH
4265: LD_INT 11
4267: PPUSH
4268: CALL_OW 52
// if Difficulty > 1 then
4272: LD_OWVAR 67
4276: PUSH
4277: LD_INT 1
4279: GREATER
4280: IFFALSE 4362
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4282: LD_INT 0
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PUSH
4291: LD_INT 2
4293: PUSH
4294: LD_INT 3
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: LIST
4301: PUSH
4302: LD_OWVAR 67
4306: ARRAY
4307: PPUSH
4308: CALL_OW 380
// un := CreateHuman ;
4312: LD_ADDR_VAR 0 3
4316: PUSH
4317: CALL_OW 44
4321: ST_TO_ADDR
// usForces := usForces union un ;
4322: LD_ADDR_EXP 47
4326: PUSH
4327: LD_EXP 47
4331: PUSH
4332: LD_VAR 0 3
4336: UNION
4337: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4338: LD_VAR 0 3
4342: PPUSH
4343: LD_INT 1
4345: PPUSH
4346: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4350: LD_VAR 0 3
4354: PPUSH
4355: LD_INT 14
4357: PPUSH
4358: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: DOUBLE
4368: LD_INT 1
4370: DEC
4371: ST_TO_ADDR
4372: LD_INT 2
4374: PUSH
4375: LD_INT 3
4377: PUSH
4378: LD_INT 4
4380: PUSH
4381: LD_INT 4
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: PUSH
4390: LD_OWVAR 67
4394: ARRAY
4395: PUSH
4396: FOR_TO
4397: IFFALSE 4543
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4399: LD_INT 0
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: LD_INT 1
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: LD_INT 3
4413: PUSH
4414: LD_INT 3
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: PUSH
4423: LD_OWVAR 67
4427: ARRAY
4428: PPUSH
4429: CALL_OW 380
// un := CreateHuman ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: CALL_OW 44
4442: ST_TO_ADDR
// usForces := usForces union un ;
4443: LD_ADDR_EXP 47
4447: PUSH
4448: LD_EXP 47
4452: PUSH
4453: LD_VAR 0 3
4457: UNION
4458: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4459: LD_VAR 0 3
4463: PPUSH
4464: LD_INT 39
4466: PPUSH
4467: LD_INT 24
4469: PPUSH
4470: LD_INT 4
4472: PPUSH
4473: LD_INT 0
4475: PPUSH
4476: CALL_OW 50
// if i < 3 then
4480: LD_VAR 0 2
4484: PUSH
4485: LD_INT 3
4487: LESS
4488: IFFALSE 4541
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4490: LD_VAR 0 3
4494: PPUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 1
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 58
4507: PUSH
4508: EMPTY
4509: LIST
4510: PUSH
4511: LD_INT 30
4513: PUSH
4514: LD_INT 31
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: LIST
4525: PPUSH
4526: CALL_OW 69
4530: PUSH
4531: LD_VAR 0 2
4535: ARRAY
4536: PPUSH
4537: CALL_OW 120
// end ;
4541: GO 4396
4543: POP
4544: POP
// for i := 1 to 2 do
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: DOUBLE
4551: LD_INT 1
4553: DEC
4554: ST_TO_ADDR
4555: LD_INT 2
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4623
// begin PrepareHuman ( false , 2 , 2 ) ;
4561: LD_INT 0
4563: PPUSH
4564: LD_INT 2
4566: PPUSH
4567: LD_INT 2
4569: PPUSH
4570: CALL_OW 380
// un := CreateHuman ;
4574: LD_ADDR_VAR 0 3
4578: PUSH
4579: CALL_OW 44
4583: ST_TO_ADDR
// usForces := usForces union un ;
4584: LD_ADDR_EXP 47
4588: PUSH
4589: LD_EXP 47
4593: PUSH
4594: LD_VAR 0 3
4598: UNION
4599: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4600: LD_VAR 0 3
4604: PPUSH
4605: LD_INT 39
4607: PPUSH
4608: LD_INT 24
4610: PPUSH
4611: LD_INT 4
4613: PPUSH
4614: LD_INT 0
4616: PPUSH
4617: CALL_OW 50
// end ;
4621: GO 4558
4623: POP
4624: POP
// PrepareHuman ( false , 4 , 1 ) ;
4625: LD_INT 0
4627: PPUSH
4628: LD_INT 4
4630: PPUSH
4631: LD_INT 1
4633: PPUSH
4634: CALL_OW 380
// un := CreateHuman ;
4638: LD_ADDR_VAR 0 3
4642: PUSH
4643: CALL_OW 44
4647: ST_TO_ADDR
// usForces := usForces union un ;
4648: LD_ADDR_EXP 47
4652: PUSH
4653: LD_EXP 47
4657: PUSH
4658: LD_VAR 0 3
4662: UNION
4663: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4664: LD_VAR 0 3
4668: PPUSH
4669: LD_INT 39
4671: PPUSH
4672: LD_INT 24
4674: PPUSH
4675: LD_INT 4
4677: PPUSH
4678: LD_INT 0
4680: PPUSH
4681: CALL_OW 50
// end ;
4685: LD_VAR 0 1
4689: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4690: LD_EXP 47
4694: PUSH
4695: LD_EXP 7
4699: NOT
4700: AND
4701: PUSH
4702: LD_EXP 15
4706: NOT
4707: AND
4708: IFFALSE 5139
4710: GO 4712
4712: DISABLE
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
// begin enable ;
4720: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4721: LD_ADDR_VAR 0 3
4725: PUSH
4726: LD_EXP 47
4730: PPUSH
4731: LD_INT 25
4733: PUSH
4734: LD_INT 2
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PPUSH
4741: CALL_OW 72
4745: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4746: LD_ADDR_VAR 0 4
4750: PUSH
4751: LD_EXP 47
4755: PPUSH
4756: LD_INT 25
4758: PUSH
4759: LD_INT 1
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PPUSH
4766: CALL_OW 72
4770: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4771: LD_ADDR_VAR 0 5
4775: PUSH
4776: LD_EXP 47
4780: PPUSH
4781: LD_INT 25
4783: PUSH
4784: LD_INT 4
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PPUSH
4791: CALL_OW 72
4795: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4796: LD_INT 7
4798: PPUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 2
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PPUSH
4809: CALL_OW 70
4813: PUSH
4814: LD_INT 1
4816: EQUAL
4817: IFFALSE 4893
// for i in sol do
4819: LD_ADDR_VAR 0 1
4823: PUSH
4824: LD_VAR 0 4
4828: PUSH
4829: FOR_IN
4830: IFFALSE 4891
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4832: LD_VAR 0 1
4836: PPUSH
4837: CALL_OW 310
4841: NOT
4842: PUSH
4843: LD_VAR 0 1
4847: PPUSH
4848: CALL_OW 310
4852: PPUSH
4853: CALL_OW 266
4857: PUSH
4858: LD_INT 4
4860: EQUAL
4861: NOT
4862: OR
4863: IFFALSE 4889
// begin ComExitBuilding ( i ) ;
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4874: LD_VAR 0 1
4878: PPUSH
4879: LD_INT 37
4881: PPUSH
4882: LD_INT 23
4884: PPUSH
4885: CALL_OW 174
// end ;
4889: GO 4829
4891: POP
4892: POP
// if eng then
4893: LD_VAR 0 3
4897: IFFALSE 5139
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4899: LD_ADDR_VAR 0 2
4903: PUSH
4904: LD_INT 22
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: LD_INT 95
4916: PUSH
4917: LD_INT 7
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 21
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 3
4936: PUSH
4937: LD_INT 24
4939: PUSH
4940: LD_INT 1000
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: ST_TO_ADDR
// if b then
4962: LD_VAR 0 2
4966: IFFALSE 4997
// begin ComExitBuilding ( eng ) ;
4968: LD_VAR 0 3
4972: PPUSH
4973: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4977: LD_VAR 0 3
4981: PPUSH
4982: LD_VAR 0 2
4986: PUSH
4987: LD_INT 1
4989: ARRAY
4990: PPUSH
4991: CALL_OW 190
// end else
4995: GO 5139
// begin for i in eng do
4997: LD_ADDR_VAR 0 1
5001: PUSH
5002: LD_VAR 0 3
5006: PUSH
5007: FOR_IN
5008: IFFALSE 5137
// if not HasTask ( i ) then
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 314
5019: NOT
5020: IFFALSE 5135
// begin if americanBuildList then
5022: LD_EXP 49
5026: IFFALSE 5111
// begin if IsInUnit ( i ) then
5028: LD_VAR 0 1
5032: PPUSH
5033: CALL_OW 310
5037: IFFALSE 5048
// ComExitBuilding ( i ) ;
5039: LD_VAR 0 1
5043: PPUSH
5044: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5048: LD_VAR 0 1
5052: PPUSH
5053: LD_EXP 49
5057: PUSH
5058: LD_INT 1
5060: ARRAY
5061: PUSH
5062: LD_INT 1
5064: ARRAY
5065: PPUSH
5066: LD_EXP 49
5070: PUSH
5071: LD_INT 1
5073: ARRAY
5074: PUSH
5075: LD_INT 2
5077: ARRAY
5078: PPUSH
5079: LD_EXP 49
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PUSH
5088: LD_INT 3
5090: ARRAY
5091: PPUSH
5092: LD_EXP 49
5096: PUSH
5097: LD_INT 1
5099: ARRAY
5100: PUSH
5101: LD_INT 4
5103: ARRAY
5104: PPUSH
5105: CALL_OW 205
// end else
5109: GO 5135
// if not IsInUnit ( i ) then
5111: LD_VAR 0 1
5115: PPUSH
5116: CALL_OW 310
5120: NOT
5121: IFFALSE 5135
// ComEnterUnit ( i , usDepot ) ;
5123: LD_VAR 0 1
5127: PPUSH
5128: LD_INT 11
5130: PPUSH
5131: CALL_OW 120
// end ;
5135: GO 5007
5137: POP
5138: POP
// end ; end ; end ;
5139: PPOPN 5
5141: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5142: LD_INT 0
5144: PPUSH
5145: PPUSH
5146: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5147: LD_ADDR_VAR 0 3
5151: PUSH
5152: LD_INT 35
5154: PUSH
5155: LD_INT 45
5157: PUSH
5158: LD_INT 48
5160: PUSH
5161: LD_INT 82
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: ST_TO_ADDR
// for i in tech do
5170: LD_ADDR_VAR 0 4
5174: PUSH
5175: LD_VAR 0 3
5179: PUSH
5180: FOR_IN
5181: IFFALSE 5199
// AddComResearch ( lab , i ) ;
5183: LD_VAR 0 1
5187: PPUSH
5188: LD_VAR 0 4
5192: PPUSH
5193: CALL_OW 184
5197: GO 5180
5199: POP
5200: POP
// end ;
5201: LD_VAR 0 2
5205: RET
// every 4 4$00 + 3 3$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5206: LD_EXP 13
5210: PUSH
5211: LD_EXP 24
5215: PUSH
5216: LD_EXP 28
5220: LESSEQUAL
5221: AND
5222: IFFALSE 5247
5224: GO 5226
5226: DISABLE
// begin enable ;
5227: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5228: LD_INT 35
5230: PPUSH
5231: LD_INT 2065
5233: PPUSH
5234: CALL_OW 12
5238: PPUSH
5239: CALL_OW 67
// SendConvoy ;
5243: CALL 5353 0 0
// end ;
5247: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5248: LD_EXP 7
5252: PUSH
5253: LD_EXP 19
5257: AND
5258: IFFALSE 5352
5260: GO 5262
5262: DISABLE
// begin if americanHasEscaped then
5263: LD_EXP 9
5267: IFFALSE 5278
// wait ( 3 3$20 ) else
5269: LD_INT 7000
5271: PPUSH
5272: CALL_OW 67
5276: GO 5285
// wait ( 6 6$40 ) ;
5278: LD_INT 14000
5280: PPUSH
5281: CALL_OW 67
// SendAttack ;
5285: CALL 6126 0 0
// repeat wait ( [ 7 7$40 , 6 6$40 , 6 6$20 , 5 5$50 ] [ Difficulty ] ) ;
5289: LD_INT 16100
5291: PUSH
5292: LD_INT 14000
5294: PUSH
5295: LD_INT 13300
5297: PUSH
5298: LD_INT 12250
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: PPUSH
5313: CALL_OW 67
// SendAttack ;
5317: CALL 6126 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5321: LD_EXP 20
5325: PUSH
5326: LD_INT 5
5328: PUSH
5329: LD_INT 6
5331: PUSH
5332: LD_INT 7
5334: PUSH
5335: LD_INT 8
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: PUSH
5344: LD_OWVAR 67
5348: ARRAY
5349: LESS
5350: IFFALSE 5289
// end ;
5352: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5353: LD_INT 0
5355: PPUSH
5356: PPUSH
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
5361: PPUSH
5362: PPUSH
// road := rand ( 1 , 2 ) ;
5363: LD_ADDR_VAR 0 4
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 2
5373: PPUSH
5374: CALL_OW 12
5378: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5379: LD_ADDR_VAR 0 8
5383: PUSH
5384: LD_INT 3
5386: PUSH
5387: LD_INT 8
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: PUSH
5394: LD_VAR 0 4
5398: ARRAY
5399: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5400: LD_ADDR_VAR 0 5
5404: PUSH
5405: LD_INT 35
5407: PUSH
5408: LD_INT 66
5410: PUSH
5411: LD_INT 1
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 101
5421: PUSH
5422: LD_INT 8
5424: PUSH
5425: LD_INT 4
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5437: LD_ADDR_VAR 0 6
5441: PUSH
5442: LD_INT 34
5444: PUSH
5445: LD_INT 67
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PUSH
5452: LD_INT 38
5454: PUSH
5455: LD_INT 62
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 43
5464: PUSH
5465: LD_INT 54
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: LD_INT 57
5474: PUSH
5475: LD_INT 57
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 77
5484: PUSH
5485: LD_INT 71
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 86
5494: PUSH
5495: LD_INT 60
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 89
5504: PUSH
5505: LD_INT 35
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 93
5514: PUSH
5515: LD_INT 17
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 97
5524: PUSH
5525: LD_INT 10
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: LD_INT 103
5534: PUSH
5535: LD_INT 9
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: ST_TO_ADDR
// if road = 2 then
5554: LD_VAR 0 4
5558: PUSH
5559: LD_INT 2
5561: EQUAL
5562: IFFALSE 5579
// points := ReverseArray ( points ) ;
5564: LD_ADDR_VAR 0 6
5568: PUSH
5569: LD_VAR 0 6
5573: PPUSH
5574: CALL 74347 0 1
5578: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5579: LD_INT 4
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: LD_INT 2
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 12
5596: PPUSH
5597: LD_INT 80
5599: PPUSH
5600: CALL 349 0 7
// veh := CreateVehicle ;
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: CALL_OW 45
5613: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5614: LD_VAR 0 3
5618: PPUSH
5619: LD_VAR 0 5
5623: PUSH
5624: LD_VAR 0 4
5628: ARRAY
5629: PUSH
5630: LD_INT 3
5632: ARRAY
5633: PPUSH
5634: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_VAR 0 5
5647: PUSH
5648: LD_VAR 0 4
5652: ARRAY
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PPUSH
5658: LD_VAR 0 5
5662: PUSH
5663: LD_VAR 0 4
5667: ARRAY
5668: PUSH
5669: LD_INT 2
5671: ARRAY
5672: PPUSH
5673: LD_INT 0
5675: PPUSH
5676: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5680: LD_INT 0
5682: PPUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PPUSH
5691: CALL_OW 380
// un := CreateHuman ;
5695: LD_ADDR_VAR 0 2
5699: PUSH
5700: CALL_OW 44
5704: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5705: LD_VAR 0 2
5709: PPUSH
5710: LD_VAR 0 3
5714: PPUSH
5715: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5719: LD_INT 70
5721: PUSH
5722: LD_INT 66
5724: PUSH
5725: LD_INT 62
5727: PUSH
5728: LD_INT 58
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: LD_OWVAR 67
5741: ARRAY
5742: PPUSH
5743: CALL_OW 13
5747: PUSH
5748: LD_OWVAR 1
5752: PUSH
5753: LD_INT 30
5755: MOD
5756: PLUS
5757: PUSH
5758: LD_EXP 24
5762: PUSH
5763: LD_INT 4
5765: LESS
5766: OR
5767: IFFALSE 5784
// SetCargo ( veh , mat_cans , 100 ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: LD_INT 1
5776: PPUSH
5777: LD_INT 100
5779: PPUSH
5780: CALL_OW 290
// for i := 2 to points do
5784: LD_ADDR_VAR 0 7
5788: PUSH
5789: DOUBLE
5790: LD_INT 2
5792: DEC
5793: ST_TO_ADDR
5794: LD_VAR 0 6
5798: PUSH
5799: FOR_TO
5800: IFFALSE 5843
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5802: LD_VAR 0 3
5806: PPUSH
5807: LD_VAR 0 6
5811: PUSH
5812: LD_VAR 0 7
5816: ARRAY
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PPUSH
5822: LD_VAR 0 6
5826: PUSH
5827: LD_VAR 0 7
5831: ARRAY
5832: PUSH
5833: LD_INT 2
5835: ARRAY
5836: PPUSH
5837: CALL_OW 171
5841: GO 5799
5843: POP
5844: POP
// convoyCounter := convoyCounter + 1 ;
5845: LD_ADDR_EXP 24
5849: PUSH
5850: LD_EXP 24
5854: PUSH
5855: LD_INT 1
5857: PLUS
5858: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5859: LD_INT 35
5861: PPUSH
5862: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5866: LD_VAR 0 3
5870: PPUSH
5871: CALL_OW 255
5875: PUSH
5876: LD_INT 4
5878: NONEQUAL
5879: IFFALSE 5892
// begin ComStop ( veh ) ;
5881: LD_VAR 0 3
5885: PPUSH
5886: CALL_OW 141
// exit ;
5890: GO 6121
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5892: LD_VAR 0 3
5896: PPUSH
5897: CALL_OW 314
5901: NOT
5902: PUSH
5903: LD_VAR 0 3
5907: PPUSH
5908: CALL_OW 302
5912: AND
5913: IFFALSE 5954
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5915: LD_VAR 0 3
5919: PPUSH
5920: LD_VAR 0 6
5924: PUSH
5925: LD_VAR 0 6
5929: ARRAY
5930: PUSH
5931: LD_INT 1
5933: ARRAY
5934: PPUSH
5935: LD_VAR 0 6
5939: PUSH
5940: LD_VAR 0 6
5944: ARRAY
5945: PUSH
5946: LD_INT 2
5948: ARRAY
5949: PPUSH
5950: CALL_OW 111
// if not IsInUnit ( un ) then
5954: LD_VAR 0 2
5958: PPUSH
5959: CALL_OW 310
5963: NOT
5964: IFFALSE 6005
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_VAR 0 6
5975: PUSH
5976: LD_VAR 0 6
5980: ARRAY
5981: PUSH
5982: LD_INT 1
5984: ARRAY
5985: PPUSH
5986: LD_VAR 0 6
5990: PUSH
5991: LD_VAR 0 6
5995: ARRAY
5996: PUSH
5997: LD_INT 2
5999: ARRAY
6000: PPUSH
6001: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6005: LD_VAR 0 3
6009: PPUSH
6010: LD_VAR 0 8
6014: PPUSH
6015: CALL_OW 308
6019: PUSH
6020: LD_VAR 0 2
6024: PPUSH
6025: LD_VAR 0 8
6029: PPUSH
6030: CALL_OW 308
6034: OR
6035: IFFALSE 5859
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6037: LD_VAR 0 2
6041: PPUSH
6042: CALL_OW 302
6046: PUSH
6047: LD_VAR 0 3
6051: PPUSH
6052: CALL_OW 302
6056: NOT
6057: AND
6058: PUSH
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_VAR 0 8
6068: PPUSH
6069: CALL_OW 308
6073: AND
6074: IFFALSE 6085
// RemoveUnit ( un ) ;
6076: LD_VAR 0 2
6080: PPUSH
6081: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6085: LD_VAR 0 3
6089: PPUSH
6090: LD_VAR 0 8
6094: PPUSH
6095: CALL_OW 308
6099: PUSH
6100: LD_VAR 0 3
6104: PPUSH
6105: CALL_OW 302
6109: AND
6110: IFFALSE 6121
// RemoveUnit ( veh ) ;
6112: LD_VAR 0 3
6116: PPUSH
6117: CALL_OW 64
// end ;
6121: LD_VAR 0 1
6125: RET
// export function SendAttack ; var un , veh , i ; begin
6126: LD_INT 0
6128: PPUSH
6129: PPUSH
6130: PPUSH
6131: PPUSH
// if blockAttack then
6132: LD_EXP 29
6136: IFFALSE 6159
// begin repeat wait ( 0 0$1 ) ;
6138: LD_INT 35
6140: PPUSH
6141: CALL_OW 67
// until not blockAttack ;
6145: LD_EXP 29
6149: NOT
6150: IFFALSE 6138
// wait ( 0 0$5 ) ;
6152: LD_INT 175
6154: PPUSH
6155: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 21
6171: PUSH
6172: LD_INT 1
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: PUSH
6188: LD_INT 10
6190: GREATER
6191: IFFALSE 6234
// begin repeat wait ( 0 0$1 ) ;
6193: LD_INT 35
6195: PPUSH
6196: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6200: LD_INT 22
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 21
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PPUSH
6224: CALL_OW 69
6228: PUSH
6229: LD_INT 10
6231: LESSEQUAL
6232: IFFALSE 6193
// end ; IncomingAttack ;
6234: CALL 15586 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6238: LD_INT 2100
6240: PPUSH
6241: LD_INT 3500
6243: PPUSH
6244: CALL_OW 12
6248: PPUSH
6249: CALL_OW 67
// if blockAttack then
6253: LD_EXP 29
6257: IFFALSE 6280
// begin repeat wait ( 0 0$1 ) ;
6259: LD_INT 35
6261: PPUSH
6262: CALL_OW 67
// until not blockAttack ;
6266: LD_EXP 29
6270: NOT
6271: IFFALSE 6259
// wait ( 0 0$5 ) ;
6273: LD_INT 175
6275: PPUSH
6276: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6280: LD_ADDR_VAR 0 4
6284: PUSH
6285: DOUBLE
6286: LD_INT 1
6288: DEC
6289: ST_TO_ADDR
6290: LD_INT 3
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 5
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_OWVAR 67
6312: ARRAY
6313: PUSH
6314: LD_EXP 20
6318: PUSH
6319: LD_INT 3
6321: DIV
6322: PLUS
6323: PUSH
6324: FOR_TO
6325: IFFALSE 6441
// begin uc_side := 1 ;
6327: LD_ADDR_OWVAR 20
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// uc_nation := 1 ;
6335: LD_ADDR_OWVAR 21
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6343: LD_INT 0
6345: PPUSH
6346: LD_INT 1
6348: PPUSH
6349: LD_INT 2
6351: PUSH
6352: LD_INT 3
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: PPUSH
6373: CALL_OW 380
// un := CreateHuman ;
6377: LD_ADDR_VAR 0 2
6381: PUSH
6382: CALL_OW 44
6386: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6387: LD_VAR 0 2
6391: PPUSH
6392: LD_INT 37
6394: PPUSH
6395: LD_INT 70
6397: PPUSH
6398: LD_INT 3
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: CALL_OW 50
// usAttackers := usAttackers union un ;
6408: LD_ADDR_EXP 50
6412: PUSH
6413: LD_EXP 50
6417: PUSH
6418: LD_VAR 0 2
6422: UNION
6423: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6424: LD_VAR 0 2
6428: PPUSH
6429: LD_INT 40
6431: PPUSH
6432: LD_INT 65
6434: PPUSH
6435: CALL_OW 111
// end ;
6439: GO 6324
6441: POP
6442: POP
// uc_side := 1 ;
6443: LD_ADDR_OWVAR 20
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// uc_nation := 1 ;
6451: LD_ADDR_OWVAR 21
6455: PUSH
6456: LD_INT 1
6458: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6459: LD_INT 0
6461: PPUSH
6462: LD_INT 4
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: CALL_OW 380
// un := CreateHuman ;
6472: LD_ADDR_VAR 0 2
6476: PUSH
6477: CALL_OW 44
6481: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6482: LD_VAR 0 2
6486: PPUSH
6487: LD_INT 37
6489: PPUSH
6490: LD_INT 70
6492: PPUSH
6493: LD_INT 3
6495: PPUSH
6496: LD_INT 0
6498: PPUSH
6499: CALL_OW 50
// usAttackers := usAttackers union un ;
6503: LD_ADDR_EXP 50
6507: PUSH
6508: LD_EXP 50
6512: PUSH
6513: LD_VAR 0 2
6517: UNION
6518: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6519: LD_VAR 0 2
6523: PPUSH
6524: LD_INT 40
6526: PPUSH
6527: LD_INT 65
6529: PPUSH
6530: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6534: LD_ADDR_VAR 0 4
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_OWVAR 67
6548: PUSH
6549: LD_EXP 20
6553: PUSH
6554: LD_INT 4
6556: DIV
6557: PLUS
6558: PUSH
6559: FOR_TO
6560: IFFALSE 6756
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_INT 1
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: LD_INT 2
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 3
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 1
6589: PPUSH
6590: LD_INT 3
6592: PPUSH
6593: CALL_OW 12
6597: ARRAY
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 2
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: LD_INT 90
6633: PPUSH
6634: CALL 349 0 7
6638: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6639: LD_VAR 0 3
6643: PPUSH
6644: LD_INT 35
6646: PPUSH
6647: LD_INT 65
6649: PPUSH
6650: LD_INT 0
6652: PPUSH
6653: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6657: LD_INT 0
6659: PPUSH
6660: LD_INT 3
6662: PPUSH
6663: LD_OWVAR 67
6667: PUSH
6668: LD_INT 1
6670: PLUS
6671: PPUSH
6672: CALL_OW 380
// un := CreateHuman ;
6676: LD_ADDR_VAR 0 2
6680: PUSH
6681: CALL_OW 44
6685: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_VAR 0 3
6695: PPUSH
6696: CALL_OW 52
// usAttackers := usAttackers union un ;
6700: LD_ADDR_EXP 50
6704: PUSH
6705: LD_EXP 50
6709: PUSH
6710: LD_VAR 0 2
6714: UNION
6715: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6716: LD_VAR 0 3
6720: PPUSH
6721: LD_INT 39
6723: PPUSH
6724: LD_INT 60
6726: PPUSH
6727: CALL_OW 111
// wait ( 0 0$3 ) ;
6731: LD_INT 105
6733: PPUSH
6734: CALL_OW 67
// usAttackers := usAttackers union veh ;
6738: LD_ADDR_EXP 50
6742: PUSH
6743: LD_EXP 50
6747: PUSH
6748: LD_VAR 0 3
6752: UNION
6753: ST_TO_ADDR
// end ;
6754: GO 6559
6756: POP
6757: POP
// attackWave := attackWave + 1 ;
6758: LD_ADDR_EXP 20
6762: PUSH
6763: LD_EXP 20
6767: PUSH
6768: LD_INT 1
6770: PLUS
6771: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6772: LD_EXP 25
6776: PPUSH
6777: CALL_OW 427
// end ;
6781: LD_VAR 0 1
6785: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6786: LD_INT 0
6788: PPUSH
6789: PPUSH
6790: PPUSH
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
// if retreatAllowed then
6799: LD_EXP 12
6803: IFFALSE 6815
// strategy := 2 else
6805: LD_ADDR_VAR 0 5
6809: PUSH
6810: LD_INT 2
6812: ST_TO_ADDR
6813: GO 6831
// strategy := rand ( 0 , 2 ) ;
6815: LD_ADDR_VAR 0 5
6819: PUSH
6820: LD_INT 0
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: CALL_OW 12
6830: ST_TO_ADDR
// attackFormula := [ ] ;
6831: LD_ADDR_VAR 0 6
6835: PUSH
6836: EMPTY
6837: ST_TO_ADDR
// case strategy of 0 :
6838: LD_VAR 0 5
6842: PUSH
6843: LD_INT 0
6845: DOUBLE
6846: EQUAL
6847: IFTRUE 6851
6849: GO 7181
6851: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6852: LD_INT 11
6854: PPUSH
6855: LD_INT 22
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 30
6867: PUSH
6868: LD_INT 4
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PPUSH
6879: CALL_OW 70
6883: NOT
6884: IFFALSE 6956
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6886: LD_ADDR_VAR 0 6
6890: PUSH
6891: LD_INT 41
6893: PUSH
6894: LD_INT 34
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: PUSH
6904: LD_INT 53
6906: PUSH
6907: LD_INT 62
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 37
6916: PUSH
6917: LD_INT 63
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 44
6926: PUSH
6927: LD_INT 45
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 37
6936: PUSH
6937: LD_INT 28
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: ST_TO_ADDR
6954: GO 7179
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6956: LD_INT 12
6958: PPUSH
6959: LD_INT 22
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 30
6974: PUSH
6975: LD_INT 4
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 30
6984: PUSH
6985: LD_INT 31
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 30
6994: PUSH
6995: LD_INT 32
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PPUSH
7012: CALL_OW 70
7016: NOT
7017: IFFALSE 7100
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7019: LD_ADDR_VAR 0 6
7023: PUSH
7024: LD_INT 27
7026: PUSH
7027: LD_INT 42
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 27
7036: PUSH
7037: LD_INT 32
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 53
7050: PUSH
7051: LD_INT 62
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 37
7060: PUSH
7061: LD_INT 63
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 44
7070: PUSH
7071: LD_INT 45
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 37
7080: PUSH
7081: LD_INT 28
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: ST_TO_ADDR
7098: GO 7179
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7100: LD_ADDR_VAR 0 6
7104: PUSH
7105: LD_INT 71
7107: PUSH
7108: LD_INT 67
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 54
7117: PUSH
7118: LD_INT 35
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 63
7131: PUSH
7132: LD_INT 40
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 37
7141: PUSH
7142: LD_INT 63
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 44
7151: PUSH
7152: LD_INT 45
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 37
7161: PUSH
7162: LD_INT 28
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: ST_TO_ADDR
// end ; 1 :
7179: GO 7384
7181: LD_INT 1
7183: DOUBLE
7184: EQUAL
7185: IFTRUE 7189
7187: GO 7293
7189: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7190: LD_ADDR_VAR 0 6
7194: PUSH
7195: LD_INT 71
7197: PUSH
7198: LD_INT 67
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 82
7207: PUSH
7208: LD_INT 23
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 53
7217: PUSH
7218: LD_INT 7
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 43
7227: PUSH
7228: LD_INT 10
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 53
7243: PUSH
7244: LD_INT 62
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 37
7253: PUSH
7254: LD_INT 63
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 44
7263: PUSH
7264: LD_INT 45
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 37
7273: PUSH
7274: LD_INT 28
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: ST_TO_ADDR
7291: GO 7384
7293: LD_INT 2
7295: DOUBLE
7296: EQUAL
7297: IFTRUE 7301
7299: GO 7383
7301: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7302: LD_ADDR_VAR 0 6
7306: PUSH
7307: LD_INT 90
7309: PUSH
7310: LD_INT 59
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 108
7319: PUSH
7320: LD_INT 64
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 82
7333: PUSH
7334: LD_INT 75
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 73
7343: PUSH
7344: LD_INT 67
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 101
7353: PUSH
7354: LD_INT 65
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 108
7363: PUSH
7364: LD_INT 62
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: ST_TO_ADDR
7381: GO 7384
7383: POP
// if not attackFormula then
7384: LD_VAR 0 6
7388: NOT
7389: IFFALSE 7393
// exit ;
7391: GO 9071
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7393: LD_ADDR_VAR 0 7
7397: PUSH
7398: LD_EXP 50
7402: PPUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 1
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PPUSH
7413: CALL_OW 72
7417: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7418: LD_ADDR_VAR 0 8
7422: PUSH
7423: LD_EXP 50
7427: PPUSH
7428: LD_INT 25
7430: PUSH
7431: LD_INT 4
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PPUSH
7438: CALL_OW 72
7442: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7443: LD_ADDR_VAR 0 9
7447: PUSH
7448: LD_EXP 50
7452: PPUSH
7453: LD_INT 25
7455: PUSH
7456: LD_INT 3
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PPUSH
7463: CALL_OW 72
7467: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7468: LD_ADDR_VAR 0 10
7472: PUSH
7473: LD_EXP 50
7477: PPUSH
7478: LD_INT 21
7480: PUSH
7481: LD_INT 2
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PPUSH
7488: CALL_OW 72
7492: ST_TO_ADDR
// if sci then
7493: LD_VAR 0 8
7497: IFFALSE 7534
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7499: LD_VAR 0 8
7503: PPUSH
7504: LD_VAR 0 6
7508: PUSH
7509: LD_INT 2
7511: ARRAY
7512: PUSH
7513: LD_INT 1
7515: ARRAY
7516: PPUSH
7517: LD_VAR 0 6
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PUSH
7526: LD_INT 2
7528: ARRAY
7529: PPUSH
7530: CALL_OW 111
// repeat wait ( 10 ) ;
7534: LD_INT 10
7536: PPUSH
7537: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7541: LD_ADDR_VAR 0 7
7545: PUSH
7546: LD_EXP 50
7550: PPUSH
7551: LD_INT 25
7553: PUSH
7554: LD_INT 1
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 72
7565: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7566: LD_ADDR_VAR 0 8
7570: PUSH
7571: LD_EXP 50
7575: PPUSH
7576: LD_INT 25
7578: PUSH
7579: LD_INT 4
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 72
7590: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7591: LD_ADDR_VAR 0 9
7595: PUSH
7596: LD_EXP 50
7600: PPUSH
7601: LD_INT 25
7603: PUSH
7604: LD_INT 3
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PPUSH
7611: CALL_OW 72
7615: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7616: LD_ADDR_VAR 0 10
7620: PUSH
7621: LD_EXP 50
7625: PPUSH
7626: LD_INT 21
7628: PUSH
7629: LD_INT 2
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 72
7640: ST_TO_ADDR
// if sol then
7641: LD_VAR 0 7
7645: IFFALSE 8066
// begin for i in sol do
7647: LD_ADDR_VAR 0 2
7651: PUSH
7652: LD_VAR 0 7
7656: PUSH
7657: FOR_IN
7658: IFFALSE 8064
// begin tag := GetTag ( i ) ;
7660: LD_ADDR_VAR 0 4
7664: PUSH
7665: LD_VAR 0 2
7669: PPUSH
7670: CALL_OW 110
7674: ST_TO_ADDR
// if not tag then
7675: LD_VAR 0 4
7679: NOT
7680: IFFALSE 7789
// begin if GetLives ( i ) = 1000 then
7682: LD_VAR 0 2
7686: PPUSH
7687: CALL_OW 256
7691: PUSH
7692: LD_INT 1000
7694: EQUAL
7695: IFFALSE 7711
// SetTag ( i , 1 ) else
7697: LD_VAR 0 2
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 109
7709: GO 7787
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7711: LD_VAR 0 2
7715: PPUSH
7716: LD_VAR 0 6
7720: PUSH
7721: LD_INT 2
7723: ARRAY
7724: PUSH
7725: LD_INT 1
7727: ARRAY
7728: PPUSH
7729: LD_VAR 0 6
7733: PUSH
7734: LD_INT 2
7736: ARRAY
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: PPUSH
7742: CALL_OW 297
7746: PUSH
7747: LD_INT 10
7749: GREATER
7750: IFFALSE 7787
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7752: LD_VAR 0 2
7756: PPUSH
7757: LD_VAR 0 6
7761: PUSH
7762: LD_INT 2
7764: ARRAY
7765: PUSH
7766: LD_INT 1
7768: ARRAY
7769: PPUSH
7770: LD_VAR 0 6
7774: PUSH
7775: LD_INT 2
7777: ARRAY
7778: PUSH
7779: LD_INT 2
7781: ARRAY
7782: PPUSH
7783: CALL_OW 111
// end else
7787: GO 8062
// begin if GetLives ( i ) < 760 then
7789: LD_VAR 0 2
7793: PPUSH
7794: CALL_OW 256
7798: PUSH
7799: LD_INT 760
7801: LESS
7802: IFFALSE 7853
// begin SetTag ( i , 0 ) ;
7804: LD_VAR 0 2
7808: PPUSH
7809: LD_INT 0
7811: PPUSH
7812: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7816: LD_VAR 0 2
7820: PPUSH
7821: LD_VAR 0 6
7825: PUSH
7826: LD_INT 2
7828: ARRAY
7829: PUSH
7830: LD_INT 1
7832: ARRAY
7833: PPUSH
7834: LD_VAR 0 6
7838: PUSH
7839: LD_INT 2
7841: ARRAY
7842: PUSH
7843: LD_INT 2
7845: ARRAY
7846: PPUSH
7847: CALL_OW 111
// end else
7851: GO 8062
// if tag <= attackFormula [ 1 ] then
7853: LD_VAR 0 4
7857: PUSH
7858: LD_VAR 0 6
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: LESSEQUAL
7867: IFFALSE 8028
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7869: LD_VAR 0 2
7873: PPUSH
7874: LD_VAR 0 6
7878: PUSH
7879: LD_INT 1
7881: ARRAY
7882: PUSH
7883: LD_VAR 0 4
7887: ARRAY
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PPUSH
7893: LD_VAR 0 6
7897: PUSH
7898: LD_INT 1
7900: ARRAY
7901: PUSH
7902: LD_VAR 0 4
7906: ARRAY
7907: PUSH
7908: LD_INT 2
7910: ARRAY
7911: PPUSH
7912: CALL_OW 297
7916: PUSH
7917: LD_INT 6
7919: GREATER
7920: IFFALSE 7971
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7922: LD_VAR 0 2
7926: PPUSH
7927: LD_VAR 0 6
7931: PUSH
7932: LD_INT 1
7934: ARRAY
7935: PUSH
7936: LD_VAR 0 4
7940: ARRAY
7941: PUSH
7942: LD_INT 1
7944: ARRAY
7945: PPUSH
7946: LD_VAR 0 6
7950: PUSH
7951: LD_INT 1
7953: ARRAY
7954: PUSH
7955: LD_VAR 0 4
7959: ARRAY
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 114
7969: GO 8026
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7971: LD_INT 81
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 91
7983: PUSH
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 10
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PPUSH
8001: CALL_OW 69
8005: NOT
8006: IFFALSE 8026
// SetTag ( i , tag + 1 ) ;
8008: LD_VAR 0 2
8012: PPUSH
8013: LD_VAR 0 4
8017: PUSH
8018: LD_INT 1
8020: PLUS
8021: PPUSH
8022: CALL_OW 109
// end else
8026: GO 8062
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8028: LD_VAR 0 2
8032: PPUSH
8033: LD_INT 81
8035: PUSH
8036: LD_INT 1
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PPUSH
8043: CALL_OW 69
8047: PPUSH
8048: LD_VAR 0 2
8052: PPUSH
8053: CALL_OW 74
8057: PPUSH
8058: CALL_OW 115
// end ; end ;
8062: GO 7657
8064: POP
8065: POP
// end ; if sci then
8066: LD_VAR 0 8
8070: IFFALSE 8339
// begin if not sol and not mech then
8072: LD_VAR 0 7
8076: NOT
8077: PUSH
8078: LD_VAR 0 9
8082: NOT
8083: AND
8084: IFFALSE 8136
// begin for i in sci do
8086: LD_ADDR_VAR 0 2
8090: PUSH
8091: LD_VAR 0 8
8095: PUSH
8096: FOR_IN
8097: IFFALSE 8132
// begin usForces := usForces union i ;
8099: LD_ADDR_EXP 47
8103: PUSH
8104: LD_EXP 47
8108: PUSH
8109: LD_VAR 0 2
8113: UNION
8114: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_INT 34
8122: PPUSH
8123: LD_INT 68
8125: PPUSH
8126: CALL_OW 111
// end ;
8130: GO 8096
8132: POP
8133: POP
// end else
8134: GO 8339
// for i in sci do
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_VAR 0 8
8145: PUSH
8146: FOR_IN
8147: IFFALSE 8337
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8149: LD_VAR 0 2
8153: PPUSH
8154: LD_VAR 0 6
8158: PUSH
8159: LD_INT 2
8161: ARRAY
8162: PUSH
8163: LD_INT 1
8165: ARRAY
8166: PPUSH
8167: LD_VAR 0 6
8171: PUSH
8172: LD_INT 2
8174: ARRAY
8175: PUSH
8176: LD_INT 2
8178: ARRAY
8179: PPUSH
8180: CALL_OW 297
8184: PUSH
8185: LD_INT 10
8187: GREATER
8188: IFFALSE 8227
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8190: LD_VAR 0 2
8194: PPUSH
8195: LD_VAR 0 6
8199: PUSH
8200: LD_INT 2
8202: ARRAY
8203: PUSH
8204: LD_INT 1
8206: ARRAY
8207: PPUSH
8208: LD_VAR 0 6
8212: PUSH
8213: LD_INT 2
8215: ARRAY
8216: PUSH
8217: LD_INT 2
8219: ARRAY
8220: PPUSH
8221: CALL_OW 111
8225: GO 8335
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8227: LD_VAR 0 7
8231: PPUSH
8232: LD_INT 3
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 1000
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 91
8251: PUSH
8252: LD_VAR 0 2
8256: PUSH
8257: LD_INT 10
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PPUSH
8269: CALL_OW 72
8273: IFFALSE 8335
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8275: LD_VAR 0 2
8279: PPUSH
8280: LD_VAR 0 7
8284: PPUSH
8285: LD_INT 3
8287: PUSH
8288: LD_INT 24
8290: PUSH
8291: LD_INT 1000
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 91
8304: PUSH
8305: LD_VAR 0 2
8309: PUSH
8310: LD_INT 10
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PPUSH
8322: CALL_OW 72
8326: PUSH
8327: LD_INT 1
8329: ARRAY
8330: PPUSH
8331: CALL_OW 128
8335: GO 8146
8337: POP
8338: POP
// end ; if mech then
8339: LD_VAR 0 9
8343: IFFALSE 9053
// begin for i in mech do
8345: LD_ADDR_VAR 0 2
8349: PUSH
8350: LD_VAR 0 9
8354: PUSH
8355: FOR_IN
8356: IFFALSE 9051
// begin tag := GetTag ( i ) ;
8358: LD_ADDR_VAR 0 4
8362: PUSH
8363: LD_VAR 0 2
8367: PPUSH
8368: CALL_OW 110
8372: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8373: LD_ADDR_VAR 0 11
8377: PUSH
8378: LD_VAR 0 2
8382: PPUSH
8383: CALL_OW 310
8387: ST_TO_ADDR
// if not tag then
8388: LD_VAR 0 4
8392: NOT
8393: IFFALSE 8764
// begin if veh then
8395: LD_VAR 0 11
8399: IFFALSE 8570
// begin if GetLives ( veh ) = 1000 then
8401: LD_VAR 0 11
8405: PPUSH
8406: CALL_OW 256
8410: PUSH
8411: LD_INT 1000
8413: EQUAL
8414: IFFALSE 8430
// SetTag ( i , 1 ) else
8416: LD_VAR 0 2
8420: PPUSH
8421: LD_INT 1
8423: PPUSH
8424: CALL_OW 109
8428: GO 8568
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8430: LD_VAR 0 11
8434: PPUSH
8435: LD_VAR 0 6
8439: PUSH
8440: LD_INT 3
8442: ARRAY
8443: PUSH
8444: LD_INT 1
8446: ARRAY
8447: PPUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 3
8455: ARRAY
8456: PUSH
8457: LD_INT 2
8459: ARRAY
8460: PPUSH
8461: CALL_OW 297
8465: PUSH
8466: LD_INT 8
8468: GREATER
8469: IFFALSE 8508
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8471: LD_VAR 0 11
8475: PPUSH
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 3
8483: ARRAY
8484: PUSH
8485: LD_INT 1
8487: ARRAY
8488: PPUSH
8489: LD_VAR 0 6
8493: PUSH
8494: LD_INT 3
8496: ARRAY
8497: PUSH
8498: LD_INT 2
8500: ARRAY
8501: PPUSH
8502: CALL_OW 111
8506: GO 8568
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8508: LD_INT 81
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 91
8520: PUSH
8521: LD_VAR 0 2
8525: PUSH
8526: LD_INT 12
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PPUSH
8538: CALL_OW 69
8542: NOT
8543: IFFALSE 8568
// begin ComExitVehicle ( i ) ;
8545: LD_VAR 0 2
8549: PPUSH
8550: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8554: LD_VAR 0 2
8558: PPUSH
8559: LD_VAR 0 11
8563: PPUSH
8564: CALL_OW 189
// end ; end else
8568: GO 8762
// if GetLives ( i ) < 400 then
8570: LD_VAR 0 2
8574: PPUSH
8575: CALL_OW 256
8579: PUSH
8580: LD_INT 400
8582: LESS
8583: IFFALSE 8634
// begin usAttackers := usAttackers diff i ;
8585: LD_ADDR_EXP 50
8589: PUSH
8590: LD_EXP 50
8594: PUSH
8595: LD_VAR 0 2
8599: DIFF
8600: ST_TO_ADDR
// usForces := usForces union i ;
8601: LD_ADDR_EXP 47
8605: PUSH
8606: LD_EXP 47
8610: PUSH
8611: LD_VAR 0 2
8615: UNION
8616: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8617: LD_VAR 0 2
8621: PPUSH
8622: LD_INT 34
8624: PPUSH
8625: LD_INT 68
8627: PPUSH
8628: CALL_OW 111
// end else
8632: GO 8762
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8634: LD_VAR 0 10
8638: PPUSH
8639: LD_INT 58
8641: PUSH
8642: EMPTY
8643: LIST
8644: PUSH
8645: LD_INT 24
8647: PUSH
8648: LD_INT 1000
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PPUSH
8659: CALL_OW 72
8663: PUSH
8664: LD_VAR 0 2
8668: PPUSH
8669: CALL_OW 314
8673: NOT
8674: AND
8675: PUSH
8676: LD_INT 81
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 91
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: LD_INT 9
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 69
8710: OR
8711: IFFALSE 8762
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8713: LD_VAR 0 2
8717: PPUSH
8718: LD_VAR 0 10
8722: PPUSH
8723: LD_INT 58
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: LD_INT 24
8731: PUSH
8732: LD_INT 250
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PPUSH
8743: CALL_OW 72
8747: PPUSH
8748: LD_VAR 0 2
8752: PPUSH
8753: CALL_OW 74
8757: PPUSH
8758: CALL_OW 120
// end else
8762: GO 9049
// begin if veh and GetLives ( veh ) < 760 then
8764: LD_VAR 0 11
8768: PUSH
8769: LD_VAR 0 11
8773: PPUSH
8774: CALL_OW 256
8778: PUSH
8779: LD_INT 760
8781: LESS
8782: AND
8783: IFFALSE 8834
// begin SetTag ( i , 0 ) ;
8785: LD_VAR 0 2
8789: PPUSH
8790: LD_INT 0
8792: PPUSH
8793: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8797: LD_VAR 0 11
8801: PPUSH
8802: LD_VAR 0 6
8806: PUSH
8807: LD_INT 3
8809: ARRAY
8810: PUSH
8811: LD_INT 1
8813: ARRAY
8814: PPUSH
8815: LD_VAR 0 6
8819: PUSH
8820: LD_INT 3
8822: ARRAY
8823: PUSH
8824: LD_INT 2
8826: ARRAY
8827: PPUSH
8828: CALL_OW 111
// end else
8832: GO 9049
// if veh then
8834: LD_VAR 0 11
8838: IFFALSE 9049
// if tag <= attackFormula [ 4 ] then
8840: LD_VAR 0 4
8844: PUSH
8845: LD_VAR 0 6
8849: PUSH
8850: LD_INT 4
8852: ARRAY
8853: LESSEQUAL
8854: IFFALSE 9015
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8856: LD_VAR 0 11
8860: PPUSH
8861: LD_VAR 0 6
8865: PUSH
8866: LD_INT 4
8868: ARRAY
8869: PUSH
8870: LD_VAR 0 4
8874: ARRAY
8875: PUSH
8876: LD_INT 1
8878: ARRAY
8879: PPUSH
8880: LD_VAR 0 6
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PUSH
8889: LD_VAR 0 4
8893: ARRAY
8894: PUSH
8895: LD_INT 2
8897: ARRAY
8898: PPUSH
8899: CALL_OW 297
8903: PUSH
8904: LD_INT 6
8906: GREATER
8907: IFFALSE 8958
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8909: LD_VAR 0 11
8913: PPUSH
8914: LD_VAR 0 6
8918: PUSH
8919: LD_INT 4
8921: ARRAY
8922: PUSH
8923: LD_VAR 0 4
8927: ARRAY
8928: PUSH
8929: LD_INT 1
8931: ARRAY
8932: PPUSH
8933: LD_VAR 0 6
8937: PUSH
8938: LD_INT 4
8940: ARRAY
8941: PUSH
8942: LD_VAR 0 4
8946: ARRAY
8947: PUSH
8948: LD_INT 2
8950: ARRAY
8951: PPUSH
8952: CALL_OW 114
8956: GO 9013
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8958: LD_INT 81
8960: PUSH
8961: LD_INT 1
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 91
8970: PUSH
8971: LD_VAR 0 11
8975: PUSH
8976: LD_INT 10
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: NOT
8993: IFFALSE 9013
// SetTag ( i , tag + 1 ) ;
8995: LD_VAR 0 2
8999: PPUSH
9000: LD_VAR 0 4
9004: PUSH
9005: LD_INT 1
9007: PLUS
9008: PPUSH
9009: CALL_OW 109
// end else
9013: GO 9049
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9015: LD_VAR 0 11
9019: PPUSH
9020: LD_INT 81
9022: PUSH
9023: LD_INT 1
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PPUSH
9035: LD_VAR 0 2
9039: PPUSH
9040: CALL_OW 74
9044: PPUSH
9045: CALL_OW 115
// end ; end ;
9049: GO 8355
9051: POP
9052: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9053: LD_EXP 50
9057: PPUSH
9058: LD_INT 52
9060: PUSH
9061: EMPTY
9062: LIST
9063: PPUSH
9064: CALL_OW 72
9068: NOT
9069: IFFALSE 7534
// end ;
9071: LD_VAR 0 1
9075: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9076: LD_INT 22
9078: PUSH
9079: LD_INT 1
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 32
9088: PUSH
9089: LD_INT 1
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 69
9104: IFFALSE 9181
9106: GO 9108
9108: DISABLE
9109: LD_INT 0
9111: PPUSH
// begin enable ;
9112: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_INT 22
9120: PUSH
9121: LD_INT 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 32
9130: PUSH
9131: LD_INT 1
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 69
9146: PUSH
9147: FOR_IN
9148: IFFALSE 9179
// if GetFuel ( i ) < 10 then
9150: LD_VAR 0 1
9154: PPUSH
9155: CALL_OW 261
9159: PUSH
9160: LD_INT 10
9162: LESS
9163: IFFALSE 9177
// SetFuel ( i , 10 ) ;
9165: LD_VAR 0 1
9169: PPUSH
9170: LD_INT 10
9172: PPUSH
9173: CALL_OW 240
9177: GO 9147
9179: POP
9180: POP
// end ; end_of_file
9181: PPOPN 1
9183: END
// export function Action ; var hasAll , i , tmp ; begin
9184: LD_INT 0
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_INT 22
9197: PUSH
9198: LD_INT 2
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: LD_INT 21
9207: PUSH
9208: LD_INT 1
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PUSH
9215: LD_INT 23
9217: PUSH
9218: LD_INT 2
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: PPUSH
9230: CALL_OW 69
9234: PUSH
9235: LD_INT 7
9237: GREATEREQUAL
9238: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9239: LD_VAR 0 2
9243: PPUSH
9244: LD_STRING 03_HasAll
9246: PPUSH
9247: CALL_OW 39
// Video ( true ) ;
9251: LD_INT 1
9253: PPUSH
9254: CALL 79052 0 1
// CenterNowOnUnits ( Heike ) ;
9258: LD_EXP 31
9262: PPUSH
9263: CALL_OW 87
// wait ( 0 0$2 ) ;
9267: LD_INT 70
9269: PPUSH
9270: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9274: LD_EXP 39
9278: PPUSH
9279: LD_STRING DF-1-start
9281: PPUSH
9282: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9286: LD_EXP 31
9290: PPUSH
9291: LD_EXP 39
9295: PPUSH
9296: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9300: LD_EXP 31
9304: PPUSH
9305: LD_STRING DH-1-start
9307: PPUSH
9308: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9312: LD_EXP 40
9316: PPUSH
9317: LD_INT 92
9319: PPUSH
9320: LD_INT 21
9322: PPUSH
9323: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9327: LD_EXP 35
9331: PPUSH
9332: LD_INT 94
9334: PPUSH
9335: LD_INT 23
9337: PPUSH
9338: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9342: LD_EXP 43
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PPUSH
9351: LD_INT 90
9353: PPUSH
9354: LD_INT 23
9356: PPUSH
9357: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9361: LD_EXP 43
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: LD_INT 93
9372: PPUSH
9373: LD_INT 25
9375: PPUSH
9376: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9380: LD_EXP 43
9384: PPUSH
9385: LD_EXP 40
9389: PPUSH
9390: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9394: LD_EXP 40
9398: PUSH
9399: LD_EXP 35
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PPUSH
9408: LD_EXP 31
9412: PPUSH
9413: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9417: LD_EXP 31
9421: PPUSH
9422: LD_EXP 40
9426: PPUSH
9427: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9431: LD_INT 35
9433: PPUSH
9434: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9438: LD_EXP 40
9442: PPUSH
9443: LD_INT 92
9445: PPUSH
9446: LD_INT 21
9448: PPUSH
9449: CALL_OW 307
9453: IFFALSE 9431
// Say ( Omar , DO-1-start ) ;
9455: LD_EXP 40
9459: PPUSH
9460: LD_STRING DO-1-start
9462: PPUSH
9463: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9467: LD_EXP 31
9471: PPUSH
9472: LD_STRING DH-2-start
9474: PPUSH
9475: CALL_OW 88
// if hasAll then
9479: LD_VAR 0 2
9483: IFFALSE 9611
// begin Say ( Omar , DO-2-start ) ;
9485: LD_EXP 40
9489: PPUSH
9490: LD_STRING DO-2-start
9492: PPUSH
9493: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9497: LD_EXP 40
9501: PPUSH
9502: LD_STRING DO-3-start
9504: PPUSH
9505: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9509: LD_EXP 31
9513: PPUSH
9514: LD_STRING DH-3-start
9516: PPUSH
9517: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9521: LD_EXP 39
9525: PPUSH
9526: LD_STRING DF-2-start
9528: PPUSH
9529: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9533: LD_EXP 40
9537: PPUSH
9538: LD_EXP 39
9542: PPUSH
9543: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9547: LD_EXP 40
9551: PPUSH
9552: LD_STRING DO-4-start
9554: PPUSH
9555: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9559: LD_EXP 39
9563: PPUSH
9564: LD_STRING DF-3-start
9566: PPUSH
9567: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9571: LD_EXP 40
9575: PPUSH
9576: LD_STRING DO-5-start
9578: PPUSH
9579: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9583: LD_EXP 39
9587: PPUSH
9588: LD_STRING DF-4-start
9590: PPUSH
9591: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9595: LD_EXP 40
9599: PPUSH
9600: LD_EXP 31
9604: PPUSH
9605: CALL_OW 119
// end else
9609: GO 9711
// begin Say ( Omar , DO-2-start-a ) ;
9611: LD_EXP 40
9615: PPUSH
9616: LD_STRING DO-2-start-a
9618: PPUSH
9619: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9623: LD_EXP 40
9627: PPUSH
9628: LD_STRING DO-3-start-a
9630: PPUSH
9631: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9635: LD_EXP 31
9639: PPUSH
9640: LD_STRING DH-3-start-a
9642: PPUSH
9643: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9647: LD_EXP 39
9651: PPUSH
9652: LD_STRING DF-2-start-a
9654: PPUSH
9655: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9659: LD_EXP 40
9663: PPUSH
9664: LD_EXP 39
9668: PPUSH
9669: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9673: LD_EXP 40
9677: PPUSH
9678: LD_STRING DO-4-start-a
9680: PPUSH
9681: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9685: LD_EXP 39
9689: PPUSH
9690: LD_STRING DF-3-start-a
9692: PPUSH
9693: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9697: LD_EXP 40
9701: PPUSH
9702: LD_EXP 31
9706: PPUSH
9707: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9711: LD_INT 10
9713: PPUSH
9714: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9718: LD_EXP 40
9722: PPUSH
9723: LD_STRING DO-1-mission
9725: PPUSH
9726: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9730: LD_EXP 40
9734: PPUSH
9735: LD_STRING DO-2-mission
9737: PPUSH
9738: CALL_OW 88
// if not hasAll then
9742: LD_VAR 0 2
9746: NOT
9747: IFFALSE 9761
// Say ( Omar , DO-3-mission ) ;
9749: LD_EXP 40
9753: PPUSH
9754: LD_STRING DO-3-mission
9756: PPUSH
9757: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9761: LD_EXP 40
9765: PPUSH
9766: LD_STRING DO-4-mission
9768: PPUSH
9769: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9773: LD_EXP 31
9777: PPUSH
9778: LD_STRING DH-1-mission
9780: PPUSH
9781: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9785: LD_EXP 39
9789: PPUSH
9790: LD_STRING DF-1-mission
9792: PPUSH
9793: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9797: LD_EXP 40
9801: PPUSH
9802: LD_STRING DO-5-mission
9804: PPUSH
9805: CALL_OW 88
// if not hasAll then
9809: LD_VAR 0 2
9813: NOT
9814: IFFALSE 9949
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9816: LD_ADDR_VAR 0 4
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 21
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 23
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: LIST
9855: PPUSH
9856: CALL_OW 69
9860: ST_TO_ADDR
// for i := 7 downto tmp do
9861: LD_ADDR_VAR 0 3
9865: PUSH
9866: DOUBLE
9867: LD_INT 7
9869: INC
9870: ST_TO_ADDR
9871: LD_VAR 0 4
9875: PUSH
9876: FOR_DOWNTO
9877: IFFALSE 9947
// begin if omarSquad < 3 then
9879: LD_EXP 43
9883: PUSH
9884: LD_INT 3
9886: LESS
9887: IFFALSE 9891
// break ;
9889: GO 9947
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9891: LD_EXP 43
9895: PUSH
9896: LD_INT 3
9898: ARRAY
9899: PPUSH
9900: LD_INT 2
9902: PPUSH
9903: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9907: LD_ADDR_EXP 45
9911: PUSH
9912: LD_EXP 45
9916: PUSH
9917: LD_EXP 43
9921: PUSH
9922: LD_INT 3
9924: ARRAY
9925: UNION
9926: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9927: LD_ADDR_EXP 43
9931: PUSH
9932: LD_EXP 43
9936: PPUSH
9937: LD_INT 3
9939: PPUSH
9940: CALL_OW 3
9944: ST_TO_ADDR
// end ;
9945: GO 9876
9947: POP
9948: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9949: LD_EXP 40
9953: PUSH
9954: LD_EXP 43
9958: ADD
9959: PPUSH
9960: LD_INT 103
9962: PPUSH
9963: LD_INT 9
9965: PPUSH
9966: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9970: LD_VAR 0 2
9974: PUSH
9975: LD_EXP 36
9979: PPUSH
9980: CALL_OW 302
9984: AND
9985: IFFALSE 10046
// begin wait ( 0 0$3 ) ;
9987: LD_INT 105
9989: PPUSH
9990: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9994: LD_EXP 36
9998: PPUSH
9999: LD_EXP 39
10003: PPUSH
10004: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10008: LD_EXP 36
10012: PPUSH
10013: LD_STRING DK-1-side
10015: PPUSH
10016: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10020: LD_EXP 39
10024: PPUSH
10025: LD_EXP 36
10029: PPUSH
10030: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10034: LD_EXP 39
10038: PPUSH
10039: LD_STRING DF-1-side
10041: PPUSH
10042: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10046: LD_INT 22
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PPUSH
10056: CALL_OW 69
10060: PPUSH
10061: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10065: LD_EXP 39
10069: PUSH
10070: LD_EXP 42
10074: ADD
10075: PPUSH
10076: LD_INT 108
10078: PPUSH
10079: LD_INT 62
10081: PPUSH
10082: CALL_OW 111
// gameStarted := true ;
10086: LD_ADDR_EXP 3
10090: PUSH
10091: LD_INT 1
10093: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10094: LD_INT 105
10096: PPUSH
10097: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10101: LD_EXP 31
10105: PPUSH
10106: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10110: LD_EXP 31
10114: PPUSH
10115: LD_EXP 35
10119: PPUSH
10120: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10124: LD_INT 22
10126: PUSH
10127: LD_INT 2
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PPUSH
10134: CALL_OW 69
10138: PUSH
10139: LD_EXP 31
10143: DIFF
10144: PPUSH
10145: LD_EXP 31
10149: PPUSH
10150: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10154: LD_EXP 31
10158: PPUSH
10159: LD_STRING DH-1-explore
10161: PPUSH
10162: CALL_OW 88
// if Givi then
10166: LD_EXP 32
10170: IFFALSE 10186
// Say ( Givi , DG-1-explore ) else
10172: LD_EXP 32
10176: PPUSH
10177: LD_STRING DG-1-explore
10179: PPUSH
10180: CALL_OW 88
10184: GO 10223
// if heikeSecondSquad then
10186: LD_EXP 45
10190: IFFALSE 10223
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10192: LD_EXP 45
10196: PPUSH
10197: LD_INT 26
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PPUSH
10207: CALL_OW 72
10211: PUSH
10212: LD_INT 1
10214: ARRAY
10215: PPUSH
10216: LD_STRING DArm-1-explore
10218: PPUSH
10219: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10223: LD_EXP 35
10227: PPUSH
10228: LD_STRING DA-1-explore
10230: PPUSH
10231: CALL_OW 88
// if Sophia then
10235: LD_EXP 37
10239: IFFALSE 10317
// begin Say ( Sophia , DS-2-explore ) ;
10241: LD_EXP 37
10245: PPUSH
10246: LD_STRING DS-2-explore
10248: PPUSH
10249: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10253: LD_EXP 35
10257: PPUSH
10258: LD_STRING DA-2-explore
10260: PPUSH
10261: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10265: LD_EXP 37
10269: PPUSH
10270: LD_EXP 35
10274: PPUSH
10275: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10279: LD_EXP 35
10283: PPUSH
10284: LD_EXP 37
10288: PPUSH
10289: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10293: LD_EXP 37
10297: PPUSH
10298: LD_STRING DS-3-explore
10300: PPUSH
10301: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10305: LD_EXP 35
10309: PPUSH
10310: LD_STRING DA-3-explore
10312: PPUSH
10313: CALL_OW 88
// end ; if Mike then
10317: LD_EXP 33
10321: IFFALSE 10377
// begin Say ( Mike , DM-1-explore ) ;
10323: LD_EXP 33
10327: PPUSH
10328: LD_STRING DM-1-explore
10330: PPUSH
10331: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10335: LD_EXP 31
10339: PPUSH
10340: LD_STRING DH-2-explore
10342: PPUSH
10343: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10347: LD_EXP 33
10351: PPUSH
10352: LD_STRING DM-2-explore
10354: PPUSH
10355: CALL_OW 88
// if Kaia then
10359: LD_EXP 36
10363: IFFALSE 10377
// Say ( Kaia , DK-1-explore ) ;
10365: LD_EXP 36
10369: PPUSH
10370: LD_STRING DK-1-explore
10372: PPUSH
10373: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10377: LD_INT 22
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: PPUSH
10392: CALL_OW 139
// Video ( false ) ;
10396: LD_INT 0
10398: PPUSH
10399: CALL 79052 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10403: LD_STRING BuildBase
10405: PPUSH
10406: CALL_OW 337
// SaveForQuickRestart ;
10410: CALL_OW 22
// end ;
10414: LD_VAR 0 1
10418: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10419: LD_EXP 5
10423: PUSH
10424: LD_EXP 7
10428: NOT
10429: AND
10430: IFFALSE 10617
10432: GO 10434
10434: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10435: LD_EXP 48
10439: PPUSH
10440: LD_STRING DUsm-4-assault
10442: PPUSH
10443: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10447: LD_INT 35
10449: PPUSH
10450: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10454: LD_INT 22
10456: PUSH
10457: LD_INT 2
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 21
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 50
10476: PUSH
10477: EMPTY
10478: LIST
10479: PUSH
10480: LD_INT 95
10482: PUSH
10483: LD_INT 7
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 69
10500: IFFALSE 10447
// if not IsOk ( usCommander ) or americanBaseCaptured then
10502: LD_EXP 48
10506: PPUSH
10507: CALL_OW 302
10511: NOT
10512: PUSH
10513: LD_EXP 7
10517: OR
10518: IFFALSE 10522
// exit ;
10520: GO 10617
// repeat wait ( 0 0$1 ) ;
10522: LD_INT 35
10524: PPUSH
10525: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10529: LD_INT 22
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 21
10541: PUSH
10542: LD_INT 1
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 50
10551: PUSH
10552: EMPTY
10553: LIST
10554: PUSH
10555: LD_INT 95
10557: PUSH
10558: LD_INT 7
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 69
10575: NOT
10576: IFFALSE 10522
// wait ( 0 0$3 ) ;
10578: LD_INT 105
10580: PPUSH
10581: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10585: LD_EXP 48
10589: PPUSH
10590: CALL_OW 302
10594: NOT
10595: PUSH
10596: LD_EXP 7
10600: OR
10601: IFFALSE 10605
// exit ;
10603: GO 10617
// Say ( usCommander , DUsm-3-assault ) ;
10605: LD_EXP 48
10609: PPUSH
10610: LD_STRING DUsm-3-assault
10612: PPUSH
10613: CALL_OW 88
// end ;
10617: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseCaptured do
10618: LD_EXP 6
10622: NOT
10623: PUSH
10624: LD_EXP 7
10628: NOT
10629: AND
10630: PUSH
10631: LD_INT 5
10633: PPUSH
10634: LD_INT 22
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 21
10646: PUSH
10647: LD_INT 1
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PPUSH
10658: CALL_OW 70
10662: AND
10663: PUSH
10664: LD_EXP 7
10668: NOT
10669: AND
10670: IFFALSE 10755
10672: GO 10674
10674: DISABLE
// begin if Mike then
10675: LD_EXP 33
10679: IFFALSE 10695
// Say ( Mike , DM-1-scout ) else
10681: LD_EXP 33
10685: PPUSH
10686: LD_STRING DM-1-scout
10688: PPUSH
10689: CALL_OW 88
10693: GO 10726
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10695: LD_EXP 45
10699: PPUSH
10700: LD_INT 26
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PPUSH
10710: CALL_OW 72
10714: PUSH
10715: LD_INT 1
10717: ARRAY
10718: PPUSH
10719: LD_STRING DArm-1-explore
10721: PPUSH
10722: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10726: LD_INT 54
10728: PPUSH
10729: LD_INT 35
10731: PPUSH
10732: LD_INT 2
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10742: LD_INT 54
10744: PPUSH
10745: LD_INT 35
10747: PPUSH
10748: LD_INT 2
10750: PPUSH
10751: CALL_OW 331
// end ;
10755: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseSpoted and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10756: LD_INT 6
10758: PPUSH
10759: LD_INT 22
10761: PUSH
10762: LD_INT 2
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 21
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PPUSH
10783: CALL_OW 70
10787: PUSH
10788: LD_EXP 6
10792: NOT
10793: AND
10794: PUSH
10795: LD_EXP 7
10799: NOT
10800: AND
10801: IFFALSE 11055
10803: GO 10805
10805: DISABLE
10806: LD_INT 0
10808: PPUSH
10809: PPUSH
10810: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10811: LD_ADDR_VAR 0 1
10815: PUSH
10816: LD_EXP 45
10820: PPUSH
10821: LD_INT 26
10823: PUSH
10824: LD_INT 1
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PPUSH
10831: CALL_OW 72
10835: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10836: LD_ADDR_VAR 0 2
10840: PUSH
10841: LD_EXP 45
10845: PPUSH
10846: LD_INT 26
10848: PUSH
10849: LD_INT 2
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PPUSH
10856: CALL_OW 72
10860: ST_TO_ADDR
// DialogueOn ;
10861: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10865: LD_INT 36
10867: PPUSH
10868: LD_INT 22
10870: PPUSH
10871: LD_INT 2
10873: PPUSH
10874: LD_INT 8
10876: PPUSH
10877: CALL_OW 330
// dwait ( 0 0$1 ) ;
10881: LD_INT 35
10883: PPUSH
10884: CALL_OW 68
// speakerOk := false ;
10888: LD_ADDR_VAR 0 3
10892: PUSH
10893: LD_INT 0
10895: ST_TO_ADDR
// if Mike then
10896: LD_EXP 33
10900: IFFALSE 10922
// speakerOk := Say ( Mike , DM-1-spot ) else
10902: LD_ADDR_VAR 0 3
10906: PUSH
10907: LD_EXP 33
10911: PPUSH
10912: LD_STRING DM-1-spot
10914: PPUSH
10915: CALL_OW 88
10919: ST_TO_ADDR
10920: GO 10950
// if randomMen then
10922: LD_VAR 0 1
10926: IFFALSE 10950
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10928: LD_ADDR_VAR 0 3
10932: PUSH
10933: LD_VAR 0 1
10937: PUSH
10938: LD_INT 1
10940: ARRAY
10941: PPUSH
10942: LD_STRING DArm-1-spot-a
10944: PPUSH
10945: CALL_OW 88
10949: ST_TO_ADDR
// if speakerOk then
10950: LD_VAR 0 3
10954: IFFALSE 10998
// begin if Givi then
10956: LD_EXP 32
10960: IFFALSE 10976
// Say ( Givi , DG-1-spot ) else
10962: LD_EXP 32
10966: PPUSH
10967: LD_STRING DG-1-spot
10969: PPUSH
10970: CALL_OW 88
10974: GO 10998
// if randomWomen then
10976: LD_VAR 0 2
10980: IFFALSE 10998
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10982: LD_VAR 0 2
10986: PUSH
10987: LD_INT 1
10989: ARRAY
10990: PPUSH
10991: LD_STRING DArf-1-spot-a
10993: PPUSH
10994: CALL_OW 88
// end ; if Mike then
10998: LD_EXP 33
11002: IFFALSE 11018
// Say ( Heike , DH-1-spot ) else
11004: LD_EXP 31
11008: PPUSH
11009: LD_STRING DH-1-spot
11011: PPUSH
11012: CALL_OW 88
11016: GO 11030
// Say ( Heike , DH-1-spot-a ) ;
11018: LD_EXP 31
11022: PPUSH
11023: LD_STRING DH-1-spot-a
11025: PPUSH
11026: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
11030: LD_INT 36
11032: PPUSH
11033: LD_INT 22
11035: PPUSH
11036: LD_INT 2
11038: PPUSH
11039: CALL_OW 331
// DialogueOff ;
11043: CALL_OW 7
// americanBaseSpoted := true ;
11047: LD_ADDR_EXP 6
11051: PUSH
11052: LD_INT 1
11054: ST_TO_ADDR
// end ;
11055: PPOPN 3
11057: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11058: LD_EXP 6
11062: NOT
11063: PUSH
11064: LD_INT 22
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 101
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PPUSH
11088: CALL_OW 69
11092: AND
11093: PUSH
11094: LD_EXP 7
11098: NOT
11099: AND
11100: IFFALSE 11186
11102: GO 11104
11104: DISABLE
11105: LD_INT 0
11107: PPUSH
// begin americanBaseSpoted := true ;
11108: LD_ADDR_EXP 6
11112: PUSH
11113: LD_INT 1
11115: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11116: LD_ADDR_VAR 0 1
11120: PUSH
11121: LD_EXP 45
11125: PPUSH
11126: LD_INT 26
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 72
11140: ST_TO_ADDR
// if not randomMen then
11141: LD_VAR 0 1
11145: NOT
11146: IFFALSE 11150
// exit ;
11148: GO 11186
// DialogueOn ;
11150: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11154: LD_VAR 0 1
11158: PUSH
11159: LD_INT 1
11161: ARRAY
11162: PPUSH
11163: LD_STRING DArm-1-spot-a
11165: PPUSH
11166: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11170: LD_EXP 31
11174: PPUSH
11175: LD_STRING DH-1-spot-a
11177: PPUSH
11178: CALL_OW 88
// DialogueOff ;
11182: CALL_OW 7
// end ;
11186: PPOPN 1
11188: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11189: LD_INT 11
11191: PPUSH
11192: CALL_OW 255
11196: PUSH
11197: LD_INT 2
11199: EQUAL
11200: PUSH
11201: LD_INT 7
11203: PPUSH
11204: LD_INT 22
11206: PUSH
11207: LD_INT 1
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 3
11216: PUSH
11217: LD_INT 50
11219: PUSH
11220: EMPTY
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 30
11229: PUSH
11230: LD_INT 31
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: PPUSH
11242: CALL_OW 70
11246: OR
11247: PUSH
11248: LD_INT 7
11250: PPUSH
11251: LD_INT 22
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 70
11265: PUSH
11266: LD_INT 2
11268: GREATER
11269: OR
11270: PUSH
11271: LD_EXP 47
11275: PUSH
11276: LD_INT 4
11278: LESSEQUAL
11279: OR
11280: IFFALSE 11874
11282: GO 11284
11284: DISABLE
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
// begin wait ( 0 0$3 ) ;
11289: LD_INT 105
11291: PPUSH
11292: CALL_OW 67
// americanStartRun := true ;
11296: LD_ADDR_EXP 15
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// if IsOk ( usCommander ) then
11304: LD_EXP 48
11308: PPUSH
11309: CALL_OW 302
11313: IFFALSE 11343
// begin usForces := usForces union usCommander ;
11315: LD_ADDR_EXP 47
11319: PUSH
11320: LD_EXP 47
11324: PUSH
11325: LD_EXP 48
11329: UNION
11330: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11331: LD_EXP 48
11335: PPUSH
11336: LD_STRING DUsm-1-assault
11338: PPUSH
11339: CALL_OW 88
// end ; for i in usForces do
11343: LD_ADDR_VAR 0 1
11347: PUSH
11348: LD_EXP 47
11352: PUSH
11353: FOR_IN
11354: IFFALSE 11400
// begin if IsInUnit ( i ) then
11356: LD_VAR 0 1
11360: PPUSH
11361: CALL_OW 310
11365: IFFALSE 11376
// ComExitBuilding ( i ) ;
11367: LD_VAR 0 1
11371: PPUSH
11372: CALL_OW 122
// wait ( 3 ) ;
11376: LD_INT 3
11378: PPUSH
11379: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11383: LD_VAR 0 1
11387: PPUSH
11388: LD_INT 34
11390: PPUSH
11391: LD_INT 67
11393: PPUSH
11394: CALL_OW 111
// end ;
11398: GO 11353
11400: POP
11401: POP
// Say ( Heike , DH-1-assault ) ;
11402: LD_EXP 31
11406: PPUSH
11407: LD_STRING DH-1-assault
11409: PPUSH
11410: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11414: LD_INT 35
11416: PPUSH
11417: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11421: LD_VAR 0 1
11425: PPUSH
11426: LD_INT 34
11428: PPUSH
11429: LD_INT 67
11431: PPUSH
11432: CALL_OW 111
// until not usForces ;
11436: LD_EXP 47
11440: NOT
11441: IFFALSE 11414
// music_nat := 2 ;
11443: LD_ADDR_OWVAR 71
11447: PUSH
11448: LD_INT 2
11450: ST_TO_ADDR
// music_class := music_victory ;
11451: LD_ADDR_OWVAR 72
11455: PUSH
11456: LD_INT 4
11458: ST_TO_ADDR
// if not americanHasEscaped then
11459: LD_EXP 9
11463: NOT
11464: IFFALSE 11485
// begin Say ( Heike , DH-2-assault ) ;
11466: LD_EXP 31
11470: PPUSH
11471: LD_STRING DH-2-assault
11473: PPUSH
11474: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11478: LD_STRING ACH_CLEAN
11480: PPUSH
11481: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11485: LD_INT 70
11487: PPUSH
11488: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11492: LD_INT 35
11494: PPUSH
11495: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11499: LD_INT 22
11501: PUSH
11502: LD_INT 2
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 21
11511: PUSH
11512: LD_INT 1
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: LD_INT 50
11524: PUSH
11525: EMPTY
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 69
11541: NOT
11542: IFFALSE 11492
// InGameOn ;
11544: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11548: LD_INT 11
11550: PPUSH
11551: CALL_OW 255
11555: PUSH
11556: LD_INT 2
11558: EQUAL
11559: NOT
11560: IFFALSE 11572
// SetSide ( usDepot , 2 ) ;
11562: LD_INT 11
11564: PPUSH
11565: LD_INT 2
11567: PPUSH
11568: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11572: LD_INT 35
11574: PPUSH
11575: LD_INT 22
11577: PPUSH
11578: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11582: LD_EXP 31
11586: PPUSH
11587: LD_INT 35
11589: PPUSH
11590: LD_INT 22
11592: PPUSH
11593: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11597: LD_EXP 31
11601: PPUSH
11602: LD_INT 38
11604: PPUSH
11605: LD_INT 25
11607: PPUSH
11608: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11612: LD_EXP 35
11616: PUSH
11617: LD_EXP 44
11621: UNION
11622: PUSH
11623: LD_EXP 45
11627: UNION
11628: PPUSH
11629: LD_INT 39
11631: PPUSH
11632: LD_INT 26
11634: PPUSH
11635: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11639: LD_EXP 35
11643: PUSH
11644: LD_EXP 44
11648: UNION
11649: PUSH
11650: LD_EXP 45
11654: UNION
11655: PPUSH
11656: LD_EXP 31
11660: PPUSH
11661: CALL_OW 179
// p := 0 ;
11665: LD_ADDR_VAR 0 2
11669: PUSH
11670: LD_INT 0
11672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11673: LD_INT 35
11675: PPUSH
11676: CALL_OW 67
// p := p + 1 ;
11680: LD_ADDR_VAR 0 2
11684: PUSH
11685: LD_VAR 0 2
11689: PUSH
11690: LD_INT 1
11692: PLUS
11693: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11694: LD_EXP 31
11698: PPUSH
11699: CALL_OW 314
11703: NOT
11704: PUSH
11705: LD_VAR 0 2
11709: PUSH
11710: LD_INT 10
11712: GREATER
11713: OR
11714: IFFALSE 11673
// Say ( Heike , DH-1-capture ) ;
11716: LD_EXP 31
11720: PPUSH
11721: LD_STRING DH-1-capture
11723: PPUSH
11724: CALL_OW 88
// if IsOk ( Markov ) then
11728: LD_EXP 38
11732: PPUSH
11733: CALL_OW 302
11737: IFFALSE 11751
// Say ( Markov , DMar-1-capture ) ;
11739: LD_EXP 38
11743: PPUSH
11744: LD_STRING DMar-1-capture
11746: PPUSH
11747: CALL_OW 88
// if IsOk ( Sophia ) then
11751: LD_EXP 37
11755: PPUSH
11756: CALL_OW 302
11760: IFFALSE 11786
// begin Say ( Heike , DH-2-capture ) ;
11762: LD_EXP 31
11766: PPUSH
11767: LD_STRING DH-2-capture
11769: PPUSH
11770: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11774: LD_EXP 37
11778: PPUSH
11779: LD_STRING DS-1-capture
11781: PPUSH
11782: CALL_OW 88
// end ; americanBaseCaptured := true ;
11786: LD_ADDR_EXP 7
11790: PUSH
11791: LD_INT 1
11793: ST_TO_ADDR
// InGameOff ;
11794: CALL_OW 9
// music_nat := music_auto ;
11798: LD_ADDR_OWVAR 71
11802: PUSH
11803: LD_INT 0
11805: ST_TO_ADDR
// music_class := music_auto ;
11806: LD_ADDR_OWVAR 72
11810: PUSH
11811: LD_INT 0
11813: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11814: LD_STRING ConstructBase
11816: PPUSH
11817: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11821: LD_ADDR_VAR 0 1
11825: PUSH
11826: LD_INT 22
11828: PUSH
11829: LD_INT 1
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 21
11838: PUSH
11839: LD_INT 3
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PPUSH
11850: CALL_OW 69
11854: PUSH
11855: FOR_IN
11856: IFFALSE 11872
// SetSide ( i , 2 ) ;
11858: LD_VAR 0 1
11862: PPUSH
11863: LD_INT 2
11865: PPUSH
11866: CALL_OW 235
11870: GO 11855
11872: POP
11873: POP
// end ;
11874: PPOPN 2
11876: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11877: LD_EXP 14
11881: PUSH
11882: LD_INT 3
11884: GREATEREQUAL
11885: IFFALSE 11897
11887: GO 11889
11889: DISABLE
// SetAchievement ( ACH_ENG ) ;
11890: LD_STRING ACH_ENG
11892: PPUSH
11893: CALL_OW 543
11897: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11898: LD_INT 22
11900: PUSH
11901: LD_INT 2
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 25
11910: PUSH
11911: LD_INT 15
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PPUSH
11922: CALL_OW 69
11926: PUSH
11927: LD_INT 4
11929: GREATEREQUAL
11930: IFFALSE 11942
11932: GO 11934
11934: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11935: LD_STRING ACH_APEGEN
11937: PPUSH
11938: CALL_OW 543
11942: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11943: LD_INT 22
11945: PUSH
11946: LD_INT 2
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 30
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 3
11965: PUSH
11966: LD_INT 57
11968: PUSH
11969: EMPTY
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: LIST
11980: PPUSH
11981: CALL_OW 69
11985: IFFALSE 12250
11987: GO 11989
11989: DISABLE
// begin workshopBuilded := true ;
11990: LD_ADDR_EXP 11
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// if IsOk ( Markov ) then
11998: LD_EXP 38
12002: PPUSH
12003: CALL_OW 302
12007: IFFALSE 12066
// begin Say ( Heike , DH-1-shop-a ) ;
12009: LD_EXP 31
12013: PPUSH
12014: LD_STRING DH-1-shop-a
12016: PPUSH
12017: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
12021: LD_INT 47
12023: PPUSH
12024: LD_INT 2
12026: PPUSH
12027: CALL_OW 321
12031: PUSH
12032: LD_INT 2
12034: EQUAL
12035: PUSH
12036: LD_INT 45
12038: PPUSH
12039: LD_INT 2
12041: PPUSH
12042: CALL_OW 321
12046: PUSH
12047: LD_INT 2
12049: EQUAL
12050: AND
12051: NOT
12052: IFFALSE 12066
// Say ( Markov , DMar-1-shop-a ) ;
12054: LD_EXP 38
12058: PPUSH
12059: LD_STRING DMar-1-shop-a
12061: PPUSH
12062: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12066: LD_INT 35
12068: PPUSH
12069: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12073: LD_INT 47
12075: PPUSH
12076: LD_INT 2
12078: PPUSH
12079: CALL_OW 321
12083: PUSH
12084: LD_INT 2
12086: EQUAL
12087: PUSH
12088: LD_INT 45
12090: PPUSH
12091: LD_INT 2
12093: PPUSH
12094: CALL_OW 321
12098: PUSH
12099: LD_INT 2
12101: EQUAL
12102: OR
12103: IFFALSE 12066
// if IsOk ( Markov ) and IsOk ( Heike ) then
12105: LD_EXP 38
12109: PPUSH
12110: CALL_OW 302
12114: PUSH
12115: LD_EXP 31
12119: PPUSH
12120: CALL_OW 302
12124: AND
12125: IFFALSE 12243
// begin DialogueOn ;
12127: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12131: LD_EXP 38
12135: PPUSH
12136: LD_STRING DMar-1-shop
12138: PPUSH
12139: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12143: LD_EXP 31
12147: PPUSH
12148: LD_STRING DH-1-shop
12150: PPUSH
12151: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12155: LD_EXP 38
12159: PPUSH
12160: LD_STRING DMar-2-shop
12162: PPUSH
12163: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12167: LD_EXP 38
12171: PPUSH
12172: LD_STRING DMar-3-shop
12174: PPUSH
12175: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12179: LD_EXP 31
12183: PPUSH
12184: LD_STRING DH-2-shop
12186: PPUSH
12187: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12191: LD_EXP 38
12195: PPUSH
12196: LD_STRING DMar-4-shop
12198: PPUSH
12199: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12203: LD_EXP 31
12207: PPUSH
12208: LD_STRING DH-3-shop
12210: PPUSH
12211: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12215: LD_EXP 38
12219: PPUSH
12220: LD_STRING DMar-5-shop
12222: PPUSH
12223: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12227: LD_EXP 31
12231: PPUSH
12232: LD_STRING DH-4-shop
12234: PPUSH
12235: CALL_OW 88
// DialogueOff ;
12239: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12243: LD_STRING ConstructVeh
12245: PPUSH
12246: CALL_OW 337
// end ;
12250: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12251: LD_INT 2
12253: PPUSH
12254: LD_INT 2
12256: PPUSH
12257: LD_INT 1
12259: PPUSH
12260: CALL 41432 0 3
12264: PUSH
12265: LD_INT 0
12267: EQUAL
12268: IFFALSE 12280
12270: GO 12272
12272: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12273: LD_STRING Techs
12275: PPUSH
12276: CALL_OW 337
12280: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12281: LD_EXP 38
12285: PPUSH
12286: CALL_OW 302
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: LD_INT 2
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 2
12303: PUSH
12304: LD_INT 34
12306: PUSH
12307: LD_INT 22
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 35
12316: PUSH
12317: LD_INT 22
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: AND
12338: IFFALSE 12445
12340: GO 12342
12342: DISABLE
// begin DialogueOn ;
12343: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12347: LD_INT 22
12349: PUSH
12350: LD_INT 2
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 2
12359: PUSH
12360: LD_INT 34
12362: PUSH
12363: LD_INT 22
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: LD_INT 35
12372: PUSH
12373: LD_INT 22
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PPUSH
12389: CALL_OW 69
12393: PPUSH
12394: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12398: LD_INT 10
12400: PPUSH
12401: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12405: LD_EXP 31
12409: PPUSH
12410: LD_STRING DH-1-bal
12412: PPUSH
12413: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12417: LD_EXP 38
12421: PPUSH
12422: LD_STRING DMar-1-bal
12424: PPUSH
12425: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12429: LD_EXP 31
12433: PPUSH
12434: LD_STRING DH-2-bal
12436: PPUSH
12437: CALL_OW 88
// DialogueOff ;
12441: CALL_OW 7
// end ;
12445: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12446: LD_EXP 35
12450: PPUSH
12451: CALL_OW 302
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_INT 2
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 30
12468: PUSH
12469: LD_INT 6
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: AND
12485: IFFALSE 12546
12487: GO 12489
12489: DISABLE
// begin DialogueOn ;
12490: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12494: LD_EXP 35
12498: PPUSH
12499: LD_STRING DA-1-lab
12501: PPUSH
12502: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12506: LD_EXP 31
12510: PPUSH
12511: LD_STRING DH-1-lab
12513: PPUSH
12514: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12518: LD_EXP 35
12522: PPUSH
12523: LD_STRING DA-2-lab
12525: PPUSH
12526: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12530: LD_EXP 31
12534: PPUSH
12535: LD_STRING DH-2-lab
12537: PPUSH
12538: CALL_OW 88
// DialogueOff ;
12542: CALL_OW 7
// end ;
12546: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12547: LD_EXP 36
12551: PPUSH
12552: CALL_OW 302
12556: PUSH
12557: LD_INT 22
12559: PUSH
12560: LD_INT 2
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PUSH
12567: LD_INT 25
12569: PUSH
12570: LD_INT 15
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PPUSH
12581: CALL_OW 69
12585: AND
12586: PUSH
12587: LD_INT 81
12589: PUSH
12590: LD_INT 2
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PPUSH
12597: CALL_OW 69
12601: NOT
12602: AND
12603: IFFALSE 12792
12605: GO 12607
12607: DISABLE
12608: LD_INT 0
12610: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12611: LD_ADDR_VAR 0 1
12615: PUSH
12616: LD_INT 22
12618: PUSH
12619: LD_INT 2
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: LD_INT 25
12628: PUSH
12629: LD_INT 15
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PPUSH
12640: CALL_OW 69
12644: ST_TO_ADDR
// InGameOn ;
12645: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12649: LD_VAR 0 1
12653: PUSH
12654: LD_INT 1
12656: ARRAY
12657: PPUSH
12658: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12662: LD_VAR 0 1
12666: PUSH
12667: LD_INT 1
12669: ARRAY
12670: PPUSH
12671: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12675: LD_EXP 36
12679: PPUSH
12680: LD_STRING DK-1-apesol
12682: PPUSH
12683: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12687: LD_VAR 0 1
12691: PUSH
12692: LD_INT 1
12694: ARRAY
12695: PPUSH
12696: LD_INT 35
12698: PPUSH
12699: LD_INT 28
12701: PPUSH
12702: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12706: LD_VAR 0 1
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PPUSH
12715: LD_INT 36
12717: PPUSH
12718: LD_INT 17
12720: PPUSH
12721: CALL_OW 171
// wait ( 0 0$2 ) ;
12725: LD_INT 70
12727: PPUSH
12728: CALL_OW 67
// DialogueOn ;
12732: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12736: LD_EXP 35
12740: PPUSH
12741: LD_STRING DA-1-apesol
12743: PPUSH
12744: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12748: LD_EXP 36
12752: PPUSH
12753: LD_STRING DK-2-apesol
12755: PPUSH
12756: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12760: LD_EXP 35
12764: PPUSH
12765: LD_STRING DA-2-apesol
12767: PPUSH
12768: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12772: LD_EXP 36
12776: PPUSH
12777: LD_STRING DK-3-apesol
12779: PPUSH
12780: CALL_OW 88
// DialogueOff ;
12784: CALL_OW 7
// InGameOff ;
12788: CALL_OW 9
// end ;
12792: PPOPN 1
12794: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12795: LD_EXP 37
12799: PPUSH
12800: CALL_OW 302
12804: PUSH
12805: LD_INT 22
12807: PUSH
12808: LD_INT 2
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 25
12817: PUSH
12818: LD_INT 16
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 69
12833: AND
12834: PUSH
12835: LD_INT 81
12837: PUSH
12838: LD_INT 2
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PPUSH
12845: CALL_OW 69
12849: NOT
12850: AND
12851: IFFALSE 13165
12853: GO 12855
12855: DISABLE
12856: LD_INT 0
12858: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12859: LD_ADDR_VAR 0 1
12863: PUSH
12864: LD_INT 22
12866: PUSH
12867: LD_INT 2
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 25
12876: PUSH
12877: LD_INT 16
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PPUSH
12888: CALL_OW 69
12892: ST_TO_ADDR
// blockAttack := true ;
12893: LD_ADDR_EXP 29
12897: PUSH
12898: LD_INT 1
12900: ST_TO_ADDR
// InGameOn ;
12901: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12905: LD_INT 35
12907: PPUSH
12908: LD_INT 22
12910: PPUSH
12911: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12915: LD_INT 5
12917: PPUSH
12918: LD_INT 35
12920: PPUSH
12921: LD_INT 22
12923: PPUSH
12924: LD_INT 1
12926: PPUSH
12927: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12931: LD_EXP 37
12935: PPUSH
12936: LD_VAR 0 1
12940: PUSH
12941: LD_INT 1
12943: ARRAY
12944: PPUSH
12945: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12949: LD_VAR 0 1
12953: PUSH
12954: LD_INT 1
12956: ARRAY
12957: PPUSH
12958: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12962: LD_VAR 0 1
12966: PUSH
12967: LD_INT 1
12969: ARRAY
12970: PPUSH
12971: CALL_OW 122
// wait ( 0 0$2 ) ;
12975: LD_INT 70
12977: PPUSH
12978: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12982: LD_EXP 37
12986: PPUSH
12987: LD_STRING DS-1-apeeng
12989: PPUSH
12990: CALL_OW 88
// if IsOk ( Kamil ) then
12994: LD_EXP 34
12998: PPUSH
12999: CALL_OW 302
13003: IFFALSE 13153
// begin Say ( Kamil , DKam-1-apeeng ) ;
13005: LD_EXP 34
13009: PPUSH
13010: LD_STRING DKam-1-apeeng
13012: PPUSH
13013: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
13017: LD_EXP 37
13021: PPUSH
13022: LD_STRING DS-2-apeeng
13024: PPUSH
13025: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
13029: LD_EXP 34
13033: PPUSH
13034: LD_STRING DKam-2-apeeng
13036: PPUSH
13037: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
13041: LD_EXP 37
13045: PPUSH
13046: LD_STRING DS-3-apeeng
13048: PPUSH
13049: CALL_OW 88
// if not IsOK ( Kaia ) then
13053: LD_EXP 36
13057: PPUSH
13058: CALL_OW 302
13062: NOT
13063: IFFALSE 13079
// begin InGameOff ;
13065: CALL_OW 9
// blockAttack := false ;
13069: LD_ADDR_EXP 29
13073: PUSH
13074: LD_INT 0
13076: ST_TO_ADDR
// exit ;
13077: GO 13165
// end ; Say ( Kaia , DK-1-apeeng ) ;
13079: LD_EXP 36
13083: PPUSH
13084: LD_STRING DK-1-apeeng
13086: PPUSH
13087: CALL_OW 88
// if not IsOk ( Givi ) then
13091: LD_EXP 32
13095: PPUSH
13096: CALL_OW 302
13100: NOT
13101: IFFALSE 13117
// begin InGameOff ;
13103: CALL_OW 9
// blockAttack := false ;
13107: LD_ADDR_EXP 29
13111: PUSH
13112: LD_INT 0
13114: ST_TO_ADDR
// exit ;
13115: GO 13165
// end ; Say ( Givi , DG-1-apeeng ) ;
13117: LD_EXP 32
13121: PPUSH
13122: LD_STRING DG-1-apeeng
13124: PPUSH
13125: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13129: LD_EXP 36
13133: PPUSH
13134: LD_STRING DK-2-apeeng
13136: PPUSH
13137: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13141: LD_EXP 36
13145: PPUSH
13146: LD_STRING DK-3-apeeng
13148: PPUSH
13149: CALL_OW 88
// end ; InGameOff ;
13153: CALL_OW 9
// blockAttack := false ;
13157: LD_ADDR_EXP 29
13161: PUSH
13162: LD_INT 0
13164: ST_TO_ADDR
// end ;
13165: PPOPN 1
13167: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13168: LD_EXP 4
13172: PUSH
13173: LD_INT 22
13175: PUSH
13176: LD_INT 2
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 30
13185: PUSH
13186: LD_INT 0
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 69
13201: AND
13202: IFFALSE 13383
13204: GO 13206
13206: DISABLE
// begin blockAttack := true ;
13207: LD_ADDR_EXP 29
13211: PUSH
13212: LD_INT 1
13214: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13215: LD_INT 350
13217: PPUSH
13218: CALL_OW 67
// DialogueOn ;
13222: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13226: LD_EXP 39
13230: PPUSH
13231: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13235: LD_EXP 39
13239: PPUSH
13240: LD_STRING DF-1-distribution
13242: PPUSH
13243: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13247: LD_EXP 31
13251: PPUSH
13252: LD_STRING DH-2-distribution
13254: PPUSH
13255: CALL_OW 88
// if IsOk ( Kaia ) then
13259: LD_EXP 36
13263: PPUSH
13264: CALL_OW 302
13268: IFFALSE 13329
// begin Say ( Kaia , DK-1-distribution ) ;
13270: LD_EXP 36
13274: PPUSH
13275: LD_STRING DK-1-distribution
13277: PPUSH
13278: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13282: LD_EXP 31
13286: PPUSH
13287: LD_STRING DH-1-distribution
13289: PPUSH
13290: CALL_OW 88
// if IsOk ( Givi ) then
13294: LD_EXP 32
13298: PPUSH
13299: CALL_OW 302
13303: IFFALSE 13329
// begin Say ( Givi , DG-1-distribution ) ;
13305: LD_EXP 32
13309: PPUSH
13310: LD_STRING DG-1-distribution
13312: PPUSH
13313: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13317: LD_EXP 31
13321: PPUSH
13322: LD_STRING DH-3-distribution
13324: PPUSH
13325: CALL_OW 88
// end ; end ; DialogueOff ;
13329: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13333: LD_STRING Crates1
13335: PPUSH
13336: CALL_OW 337
// farmerRequestedCrates := 300 ;
13340: LD_ADDR_EXP 17
13344: PUSH
13345: LD_INT 300
13347: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13348: LD_STRING FarmerCrates
13350: PPUSH
13351: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13355: LD_INT 10
13357: PPUSH
13358: LD_INT 1
13360: PPUSH
13361: CALL_OW 424
// blockAttack := false ;
13365: LD_ADDR_EXP 29
13369: PUSH
13370: LD_INT 0
13372: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13373: LD_INT 108
13375: PPUSH
13376: LD_INT 61
13378: PPUSH
13379: CALL_OW 86
// end ;
13383: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13384: LD_EXP 7
13388: PUSH
13389: LD_INT 22
13391: PUSH
13392: LD_INT 2
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 3
13401: PUSH
13402: LD_INT 57
13404: PUSH
13405: EMPTY
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 2
13414: PUSH
13415: LD_INT 30
13417: PUSH
13418: LD_INT 6
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 30
13427: PUSH
13428: LD_INT 7
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: PPUSH
13445: CALL_OW 69
13449: AND
13450: PUSH
13451: LD_INT 22
13453: PUSH
13454: LD_INT 2
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 3
13463: PUSH
13464: LD_INT 57
13466: PUSH
13467: EMPTY
13468: LIST
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 30
13476: PUSH
13477: LD_INT 4
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: LIST
13488: PPUSH
13489: CALL_OW 69
13493: AND
13494: IFFALSE 13658
13496: GO 13498
13498: DISABLE
13499: LD_INT 0
13501: PPUSH
// begin wait ( 0 0$10 ) ;
13502: LD_INT 350
13504: PPUSH
13505: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13509: LD_ADDR_VAR 0 1
13513: PUSH
13514: LD_EXP 45
13518: PPUSH
13519: LD_INT 26
13521: PUSH
13522: LD_INT 1
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 25
13531: PUSH
13532: LD_INT 2
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PPUSH
13543: CALL_OW 72
13547: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13548: LD_EXP 31
13552: PPUSH
13553: LD_STRING DH-1-task
13555: PPUSH
13556: CALL_OW 88
// if IsOk ( Sophia ) then
13560: LD_EXP 37
13564: PPUSH
13565: CALL_OW 302
13569: IFFALSE 13609
// begin Say ( Sophia , DS-1-task ) ;
13571: LD_EXP 37
13575: PPUSH
13576: LD_STRING DS-1-task
13578: PPUSH
13579: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13583: LD_EXP 37
13587: PPUSH
13588: LD_STRING DS-2-task
13590: PPUSH
13591: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13595: LD_EXP 31
13599: PPUSH
13600: LD_STRING DH-2-task
13602: PPUSH
13603: CALL_OW 88
// end else
13607: GO 13643
// if eng then
13609: LD_VAR 0 1
13613: IFFALSE 13643
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13615: LD_VAR 0 1
13619: PUSH
13620: LD_INT 1
13622: ARRAY
13623: PPUSH
13624: LD_STRING DArm-1-task
13626: PPUSH
13627: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13631: LD_EXP 31
13635: PPUSH
13636: LD_STRING DH-2-task
13638: PPUSH
13639: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13643: LD_STRING BaseConstructed
13645: PPUSH
13646: CALL_OW 337
// allowConvoys := true ;
13650: LD_ADDR_EXP 13
13654: PUSH
13655: LD_INT 1
13657: ST_TO_ADDR
// end ;
13658: PPOPN 1
13660: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13661: LD_INT 22
13663: PUSH
13664: LD_INT 4
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 34
13673: PUSH
13674: LD_INT 12
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: IFFALSE 13857
13691: GO 13693
13693: DISABLE
13694: LD_INT 0
13696: PPUSH
13697: PPUSH
13698: PPUSH
// begin wait ( 0 0$2 ) ;
13699: LD_INT 70
13701: PPUSH
13702: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13706: LD_ADDR_VAR 0 1
13710: PUSH
13711: LD_INT 22
13713: PUSH
13714: LD_INT 4
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 34
13723: PUSH
13724: LD_INT 12
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13740: LD_ADDR_VAR 0 2
13744: PUSH
13745: LD_VAR 0 1
13749: PUSH
13750: LD_INT 1
13752: ARRAY
13753: PPUSH
13754: CALL_OW 250
13758: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13759: LD_ADDR_VAR 0 3
13763: PUSH
13764: LD_VAR 0 1
13768: PUSH
13769: LD_INT 1
13771: ARRAY
13772: PPUSH
13773: CALL_OW 251
13777: ST_TO_ADDR
// DialogueOn ;
13778: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13782: LD_VAR 0 2
13786: PPUSH
13787: LD_VAR 0 3
13791: PPUSH
13792: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13796: LD_VAR 0 2
13800: PPUSH
13801: LD_VAR 0 3
13805: PPUSH
13806: LD_INT 2
13808: PPUSH
13809: LD_INT 6
13811: NEG
13812: PPUSH
13813: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13817: LD_INT 10
13819: PPUSH
13820: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13824: LD_EXP 31
13828: PPUSH
13829: LD_STRING DH-1-seecargo
13831: PPUSH
13832: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13836: LD_VAR 0 2
13840: PPUSH
13841: LD_VAR 0 3
13845: PPUSH
13846: LD_INT 2
13848: PPUSH
13849: CALL_OW 331
// DialogueOff ;
13853: CALL_OW 7
// end ;
13857: PPOPN 3
13859: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13860: LD_EXP 4
13864: PUSH
13865: LD_EXP 16
13869: PUSH
13870: LD_INT 300
13872: GREATEREQUAL
13873: AND
13874: IFFALSE 13946
13876: GO 13878
13878: DISABLE
// begin DialogueOn ;
13879: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13883: LD_EXP 39
13887: PPUSH
13888: LD_STRING DF-1-delivery-2
13890: PPUSH
13891: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13895: LD_EXP 31
13899: PPUSH
13900: LD_STRING DH-1-delivery-2
13902: PPUSH
13903: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13907: LD_EXP 39
13911: PPUSH
13912: LD_STRING DF-2-delivery-2
13914: PPUSH
13915: CALL_OW 94
// DialogueOff ;
13919: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13923: LD_STRING Crates2
13925: PPUSH
13926: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13930: LD_ADDR_EXP 18
13934: PUSH
13935: LD_INT 63000
13937: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13938: LD_ADDR_EXP 17
13942: PUSH
13943: LD_INT 600
13945: ST_TO_ADDR
// end ;
13946: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13947: LD_EXP 4
13951: PUSH
13952: LD_EXP 16
13956: PUSH
13957: LD_INT 600
13959: GREATEREQUAL
13960: AND
13961: PUSH
13962: LD_OWVAR 67
13966: PUSH
13967: LD_INT 1
13969: GREATER
13970: AND
13971: IFFALSE 14171
13973: GO 13975
13975: DISABLE
// begin DialogueOn ;
13976: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13980: LD_EXP 39
13984: PPUSH
13985: LD_STRING DF-1-delivery-3
13987: PPUSH
13988: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13992: LD_EXP 31
13996: PPUSH
13997: LD_STRING DH-1-delivery-3
13999: PPUSH
14000: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
14004: LD_EXP 39
14008: PPUSH
14009: LD_STRING DF-2-delivery-3
14011: PPUSH
14012: CALL_OW 94
// if IsOk ( Kaia ) then
14016: LD_EXP 36
14020: PPUSH
14021: CALL_OW 302
14025: IFFALSE 14075
// begin Say ( Kaia , DK-1-delivery-3 ) ;
14027: LD_EXP 36
14031: PPUSH
14032: LD_STRING DK-1-delivery-3
14034: PPUSH
14035: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
14039: LD_EXP 31
14043: PPUSH
14044: LD_STRING DH-2-delivery-3
14046: PPUSH
14047: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14051: LD_EXP 32
14055: PPUSH
14056: LD_STRING DG-1-delivery-3
14058: PPUSH
14059: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14063: LD_EXP 33
14067: PPUSH
14068: LD_STRING DM-1-delivery-3
14070: PPUSH
14071: CALL_OW 88
// end ; DialogueOff ;
14075: CALL_OW 7
// case Difficulty of 2 :
14079: LD_OWVAR 67
14083: PUSH
14084: LD_INT 2
14086: DOUBLE
14087: EQUAL
14088: IFTRUE 14092
14090: GO 14110
14092: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14093: LD_STRING Crates3
14095: PPUSH
14096: CALL_OW 337
// farmerRequestedCrates := 900 ;
14100: LD_ADDR_EXP 17
14104: PUSH
14105: LD_INT 900
14107: ST_TO_ADDR
// end ; 3 :
14108: GO 14163
14110: LD_INT 3
14112: DOUBLE
14113: EQUAL
14114: IFTRUE 14118
14116: GO 14136
14118: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14119: LD_STRING Crates4
14121: PPUSH
14122: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14126: LD_ADDR_EXP 17
14130: PUSH
14131: LD_INT 1200
14133: ST_TO_ADDR
// end ; 4 :
14134: GO 14163
14136: LD_INT 4
14138: DOUBLE
14139: EQUAL
14140: IFTRUE 14144
14142: GO 14162
14144: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14145: LD_STRING Crates5
14147: PPUSH
14148: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14152: LD_ADDR_EXP 17
14156: PUSH
14157: LD_INT 1400
14159: ST_TO_ADDR
// end ; end ;
14160: GO 14163
14162: POP
// farmerCratesCounter := 30 30$00 ;
14163: LD_ADDR_EXP 18
14167: PUSH
14168: LD_INT 63000
14170: ST_TO_ADDR
// end ;
14171: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14172: LD_EXP 4
14176: PUSH
14177: LD_EXP 16
14181: PUSH
14182: LD_INT 600
14184: PUSH
14185: LD_INT 900
14187: PUSH
14188: LD_INT 1200
14190: PUSH
14191: LD_INT 1400
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: PUSH
14200: LD_OWVAR 67
14204: ARRAY
14205: GREATEREQUAL
14206: AND
14207: IFFALSE 14293
14209: GO 14211
14211: DISABLE
// begin retreatAllowed := true ;
14212: LD_ADDR_EXP 12
14216: PUSH
14217: LD_INT 1
14219: ST_TO_ADDR
// display_strings := [ ] ;
14220: LD_ADDR_OWVAR 47
14224: PUSH
14225: EMPTY
14226: ST_TO_ADDR
// DialogueOn ;
14227: CALL_OW 6
// InGameOn ;
14231: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14235: LD_EXP 40
14239: PPUSH
14240: LD_STRING DO-radio-end
14242: PPUSH
14243: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14247: LD_EXP 31
14251: PPUSH
14252: LD_STRING DH-1-radio-end
14254: PPUSH
14255: CALL_OW 88
// InGameOff ;
14259: CALL_OW 9
// DialogueOff ;
14263: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14267: LD_STRING Retreat
14269: PPUSH
14270: CALL_OW 337
// wait ( 0 0$2 ) ;
14274: LD_INT 70
14276: PPUSH
14277: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14281: LD_EXP 31
14285: PPUSH
14286: LD_STRING DH-2-radio-end
14288: PPUSH
14289: CALL_OW 88
// end ;
14293: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14294: LD_EXP 12
14298: IFFALSE 14429
14300: GO 14302
14302: DISABLE
14303: LD_INT 0
14305: PPUSH
14306: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14307: LD_INT 10
14309: PPUSH
14310: LD_INT 0
14312: PPUSH
14313: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14317: LD_ADDR_VAR 0 1
14321: PUSH
14322: LD_EXP 42
14326: PPUSH
14327: LD_INT 25
14329: PUSH
14330: LD_INT 2
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PPUSH
14337: CALL_OW 72
14341: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14342: LD_VAR 0 1
14346: PUSH
14347: LD_INT 102
14349: PPUSH
14350: LD_INT 69
14352: PPUSH
14353: CALL_OW 428
14357: PUSH
14358: LD_INT 0
14360: EQUAL
14361: AND
14362: IFFALSE 14429
// begin for i in tmp do
14364: LD_ADDR_VAR 0 2
14368: PUSH
14369: LD_VAR 0 1
14373: PUSH
14374: FOR_IN
14375: IFFALSE 14399
// if IsInUnit ( i ) then
14377: LD_VAR 0 2
14381: PPUSH
14382: CALL_OW 310
14386: IFFALSE 14397
// ComExitBuilding ( i ) ;
14388: LD_VAR 0 2
14392: PPUSH
14393: CALL_OW 122
14397: GO 14374
14399: POP
14400: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14401: LD_VAR 0 1
14405: PPUSH
14406: LD_INT 31
14408: PPUSH
14409: LD_INT 102
14411: PPUSH
14412: LD_INT 69
14414: PPUSH
14415: LD_INT 2
14417: PPUSH
14418: CALL_OW 205
// wait ( 0 0$3 ) ;
14422: LD_INT 105
14424: PPUSH
14425: CALL_OW 67
// end ; end ;
14429: PPOPN 2
14431: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14432: LD_EXP 12
14436: NOT
14437: PUSH
14438: LD_INT 5
14440: PPUSH
14441: CALL_OW 301
14445: AND
14446: IFFALSE 14478
14448: GO 14450
14450: DISABLE
// begin DialogueOn ;
14451: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14455: LD_EXP 39
14459: PPUSH
14460: LD_STRING DF-1-failure
14462: PPUSH
14463: CALL_OW 94
// DialogueOff ;
14467: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14471: LD_STRING FarmerDepot
14473: PPUSH
14474: CALL_OW 104
// end ;
14478: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14479: LD_EXP 12
14483: PUSH
14484: LD_EXP 31
14488: PPUSH
14489: LD_EXP 39
14493: PPUSH
14494: CALL_OW 296
14498: PUSH
14499: LD_INT 12
14501: LESS
14502: AND
14503: PUSH
14504: LD_INT 81
14506: PUSH
14507: LD_INT 2
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 21
14516: PUSH
14517: LD_INT 1
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PPUSH
14528: CALL_OW 69
14532: NOT
14533: AND
14534: IFFALSE 15218
14536: GO 14538
14538: DISABLE
14539: LD_INT 0
14541: PPUSH
14542: PPUSH
14543: PPUSH
// begin allowConvoys := false ;
14544: LD_ADDR_EXP 13
14548: PUSH
14549: LD_INT 0
14551: ST_TO_ADDR
// InGameOn ;
14552: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14556: LD_EXP 31
14560: PPUSH
14561: LD_EXP 39
14565: PPUSH
14566: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14570: LD_EXP 39
14574: PPUSH
14575: LD_EXP 31
14579: PPUSH
14580: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14584: LD_EXP 39
14588: PPUSH
14589: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14593: LD_EXP 31
14597: PPUSH
14598: LD_STRING DH-1-end
14600: PPUSH
14601: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14605: LD_EXP 39
14609: PPUSH
14610: LD_STRING DF-1-end
14612: PPUSH
14613: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14617: LD_EXP 39
14621: PPUSH
14622: LD_STRING DF-2-end
14624: PPUSH
14625: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14629: LD_EXP 31
14633: PPUSH
14634: LD_STRING DH-2-end
14636: PPUSH
14637: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14641: LD_EXP 39
14645: PPUSH
14646: LD_STRING DF-3-end
14648: PPUSH
14649: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14653: LD_EXP 31
14657: PPUSH
14658: LD_STRING DH-3-end
14660: PPUSH
14661: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14665: LD_EXP 32
14669: PPUSH
14670: LD_STRING DG-1-end
14672: PPUSH
14673: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14677: LD_EXP 31
14681: PPUSH
14682: LD_STRING DH-4-end
14684: PPUSH
14685: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14689: LD_EXP 39
14693: PPUSH
14694: LD_STRING DF-4-end
14696: PPUSH
14697: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14701: LD_EXP 31
14705: PPUSH
14706: LD_STRING DH-5-end
14708: PPUSH
14709: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14713: LD_EXP 39
14717: PPUSH
14718: LD_STRING DF-5-end
14720: PPUSH
14721: CALL_OW 88
// InGameOff ;
14725: CALL_OW 9
// allowCargoEvacuation := true ;
14729: LD_ADDR_EXP 8
14733: PUSH
14734: LD_INT 1
14736: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14737: LD_ADDR_VAR 0 2
14741: PUSH
14742: LD_INT 4
14744: PUSH
14745: LD_INT 3
14747: PUSH
14748: LD_INT 2
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: PUSH
14760: LD_OWVAR 67
14764: ARRAY
14765: ST_TO_ADDR
// if farmerSquad < max then
14766: LD_EXP 42
14770: PUSH
14771: LD_VAR 0 2
14775: LESS
14776: IFFALSE 14788
// max := farmerSquad ;
14778: LD_ADDR_VAR 0 2
14782: PUSH
14783: LD_EXP 42
14787: ST_TO_ADDR
// for i := 1 to max do
14788: LD_ADDR_VAR 0 1
14792: PUSH
14793: DOUBLE
14794: LD_INT 1
14796: DEC
14797: ST_TO_ADDR
14798: LD_VAR 0 2
14802: PUSH
14803: FOR_TO
14804: IFFALSE 14842
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14806: LD_EXP 42
14810: PUSH
14811: LD_INT 1
14813: ARRAY
14814: PPUSH
14815: LD_INT 2
14817: PPUSH
14818: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14822: LD_ADDR_EXP 42
14826: PUSH
14827: LD_EXP 42
14831: PPUSH
14832: LD_INT 1
14834: PPUSH
14835: CALL_OW 3
14839: ST_TO_ADDR
// end ;
14840: GO 14803
14842: POP
14843: POP
// for i in Farmer ^ farmerSquad do
14844: LD_ADDR_VAR 0 1
14848: PUSH
14849: LD_EXP 39
14853: PUSH
14854: LD_EXP 42
14858: ADD
14859: PUSH
14860: FOR_IN
14861: IFFALSE 14900
// begin if IsInUnit ( i ) then
14863: LD_VAR 0 1
14867: PPUSH
14868: CALL_OW 310
14872: IFFALSE 14883
// ComExitBuilding ( i ) ;
14874: LD_VAR 0 1
14878: PPUSH
14879: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14883: LD_VAR 0 1
14887: PPUSH
14888: LD_INT 102
14890: PPUSH
14891: LD_INT 7
14893: PPUSH
14894: CALL_OW 171
// end ;
14898: GO 14860
14900: POP
14901: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14902: LD_ADDR_VAR 0 1
14906: PUSH
14907: LD_INT 22
14909: PUSH
14910: LD_INT 5
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 21
14919: PUSH
14920: LD_INT 3
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PPUSH
14931: CALL_OW 69
14935: PUSH
14936: LD_INT 5
14938: DIFF
14939: PUSH
14940: FOR_IN
14941: IFFALSE 14957
// SetSide ( i , 2 ) ;
14943: LD_VAR 0 1
14947: PPUSH
14948: LD_INT 2
14950: PPUSH
14951: CALL_OW 235
14955: GO 14940
14957: POP
14958: POP
// wait ( 0 0$2 ) ;
14959: LD_INT 70
14961: PPUSH
14962: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14966: LD_EXP 31
14970: PPUSH
14971: LD_STRING DH-6-end
14973: PPUSH
14974: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14978: LD_INT 35
14980: PPUSH
14981: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14985: LD_ADDR_VAR 0 3
14989: PUSH
14990: LD_EXP 39
14994: PUSH
14995: LD_EXP 42
14999: ADD
15000: PPUSH
15001: LD_INT 95
15003: PUSH
15004: LD_INT 3
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PPUSH
15011: CALL_OW 72
15015: ST_TO_ADDR
// if tmp then
15016: LD_VAR 0 3
15020: IFFALSE 15064
// for i in tmp do
15022: LD_ADDR_VAR 0 1
15026: PUSH
15027: LD_VAR 0 3
15031: PUSH
15032: FOR_IN
15033: IFFALSE 15062
// begin farmerSquad := farmerSquad diff i ;
15035: LD_ADDR_EXP 42
15039: PUSH
15040: LD_EXP 42
15044: PUSH
15045: LD_VAR 0 1
15049: DIFF
15050: ST_TO_ADDR
// RemoveUnit ( i ) ;
15051: LD_VAR 0 1
15055: PPUSH
15056: CALL_OW 64
// end ;
15060: GO 15032
15062: POP
15063: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15064: LD_EXP 42
15068: PUSH
15069: EMPTY
15070: EQUAL
15071: PUSH
15072: LD_EXP 39
15076: PPUSH
15077: CALL_OW 305
15081: NOT
15082: AND
15083: IFFALSE 14978
// if farmerHumanLoseCounter = 0 then
15085: LD_EXP 21
15089: PUSH
15090: LD_INT 0
15092: EQUAL
15093: IFFALSE 15102
// SetAchievement ( ACH_BABY ) ;
15095: LD_STRING ACH_BABY
15097: PPUSH
15098: CALL_OW 543
// wait ( 1 1$00 ) ;
15102: LD_INT 2100
15104: PPUSH
15105: CALL_OW 67
// SendAttack ;
15109: CALL 6126 0 0
// Say ( Heike , DH-7-end ) ;
15113: LD_EXP 31
15117: PPUSH
15118: LD_STRING DH-7-end
15120: PPUSH
15121: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15125: LD_ADDR_VAR 0 1
15129: PUSH
15130: DOUBLE
15131: LD_INT 1
15133: DEC
15134: ST_TO_ADDR
15135: LD_INT 2
15137: PUSH
15138: LD_INT 3
15140: PUSH
15141: LD_INT 3
15143: PUSH
15144: LD_INT 4
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: PUSH
15153: LD_OWVAR 67
15157: ARRAY
15158: PUSH
15159: FOR_TO
15160: IFFALSE 15216
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15162: LD_INT 4200
15164: PUSH
15165: LD_INT 3500
15167: PUSH
15168: LD_INT 3150
15170: PUSH
15171: LD_INT 2800
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: PUSH
15180: LD_OWVAR 67
15184: ARRAY
15185: PPUSH
15186: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15190: LD_EXP 12
15194: PUSH
15195: LD_EXP 22
15199: PUSH
15200: LD_INT 1
15202: LESS
15203: AND
15204: IFFALSE 15210
// exit ;
15206: POP
15207: POP
15208: GO 15218
// SendAttack ;
15210: CALL 6126 0 0
// end ;
15214: GO 15159
15216: POP
15217: POP
// end ;
15218: PPOPN 3
15220: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15221: LD_EXP 8
15225: PUSH
15226: LD_EXP 22
15230: PUSH
15231: LD_INT 0
15233: GREATER
15234: AND
15235: IFFALSE 15245
15237: GO 15239
15239: DISABLE
// begin enable ;
15240: ENABLE
// CargoEvacuation ;
15241: CALL 3599 0 0
// end ;
15245: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15246: LD_EXP 18
15250: PUSH
15251: LD_INT 18900
15253: LESSEQUAL
15254: IFFALSE 15303
15256: GO 15258
15258: DISABLE
// begin DialogueOn ;
15259: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15263: LD_EXP 39
15267: PPUSH
15268: LD_STRING DF-1-distribution-a
15270: PPUSH
15271: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15275: LD_EXP 31
15279: PPUSH
15280: LD_STRING DH-1-distribution-a
15282: PPUSH
15283: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15287: LD_EXP 39
15291: PPUSH
15292: LD_STRING DF-2-distribution-a
15294: PPUSH
15295: CALL_OW 94
// DialogueOff ;
15299: CALL_OW 7
// end ;
15303: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15304: LD_EXP 18
15308: PUSH
15309: LD_INT 0
15311: LESSEQUAL
15312: IFFALSE 15344
15314: GO 15316
15316: DISABLE
// begin DialogueOn ;
15317: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15321: LD_EXP 39
15325: PPUSH
15326: LD_STRING DF-3-distribution-a
15328: PPUSH
15329: CALL_OW 94
// YouLost ( Distribution ) ;
15333: LD_STRING Distribution
15335: PPUSH
15336: CALL_OW 104
// DialogueOff ;
15340: CALL_OW 7
// end ;
15344: END
// every 0 0$1 trigger vehCounter >= 2 do
15345: LD_EXP 23
15349: PUSH
15350: LD_INT 2
15352: GREATEREQUAL
15353: IFFALSE 15365
15355: GO 15357
15357: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15358: LD_STRING VehConstructed
15360: PPUSH
15361: CALL_OW 337
15365: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 2
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 34
15378: PUSH
15379: LD_INT 12
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PPUSH
15390: CALL_OW 69
15394: IFFALSE 15454
15396: GO 15398
15398: DISABLE
// begin DialogueOn ;
15399: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15403: LD_EXP 31
15407: PPUSH
15408: LD_STRING DH-1-truck
15410: PPUSH
15411: CALL_OW 88
// if IsOk ( Markov ) then
15415: LD_EXP 38
15419: PPUSH
15420: CALL_OW 302
15424: IFFALSE 15450
// begin Say ( Markov , DMar-1-truck ) ;
15426: LD_EXP 38
15430: PPUSH
15431: LD_STRING DMar-1-truck
15433: PPUSH
15434: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15438: LD_EXP 31
15442: PPUSH
15443: LD_STRING DH-2-truck
15445: PPUSH
15446: CALL_OW 88
// end ; DialogueOff ;
15450: CALL_OW 7
// end ;
15454: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15455: LD_INT 0
15457: PPUSH
15458: PPUSH
15459: PPUSH
// if IsOk ( Givi ) then
15460: LD_EXP 32
15464: PPUSH
15465: CALL_OW 302
15469: IFFALSE 15485
// begin Say ( Givi , DG-1-nocargo ) ;
15471: LD_EXP 32
15475: PPUSH
15476: LD_STRING DG-1-nocargo
15478: PPUSH
15479: CALL_OW 88
// exit ;
15483: GO 15581
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15485: LD_ADDR_VAR 0 2
15489: PUSH
15490: LD_EXP 45
15494: PPUSH
15495: LD_INT 26
15497: PUSH
15498: LD_INT 1
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PPUSH
15505: CALL_OW 72
15509: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15510: LD_ADDR_VAR 0 3
15514: PUSH
15515: LD_EXP 45
15519: PPUSH
15520: LD_INT 26
15522: PUSH
15523: LD_INT 2
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PPUSH
15530: CALL_OW 72
15534: ST_TO_ADDR
// if randomMen then
15535: LD_VAR 0 2
15539: IFFALSE 15559
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15541: LD_VAR 0 2
15545: PUSH
15546: LD_INT 1
15548: ARRAY
15549: PPUSH
15550: LD_STRING DArm-1-nocargo
15552: PPUSH
15553: CALL_OW 88
15557: GO 15581
// if randomWomen then
15559: LD_VAR 0 3
15563: IFFALSE 15581
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15565: LD_VAR 0 3
15569: PUSH
15570: LD_INT 1
15572: ARRAY
15573: PPUSH
15574: LD_STRING DArf-1-nocargo
15576: PPUSH
15577: CALL_OW 88
// end ;
15581: LD_VAR 0 1
15585: RET
// export function IncomingAttack ; begin
15586: LD_INT 0
15588: PPUSH
// if attackWave = 1 then
15589: LD_EXP 20
15593: PUSH
15594: LD_INT 1
15596: EQUAL
15597: IFFALSE 15668
// begin DialogueOn ;
15599: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15603: LD_EXP 40
15607: PPUSH
15608: LD_STRING DO-1-radio-1
15610: PPUSH
15611: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15615: LD_EXP 31
15619: PPUSH
15620: LD_STRING DH-1-radio-1-
15622: PPUSH
15623: CALL_OW 88
// if IsOk ( Markov ) then
15627: LD_EXP 38
15631: PPUSH
15632: CALL_OW 302
15636: IFFALSE 15662
// begin Say ( Markov , DMar-1-radio-1 ) ;
15638: LD_EXP 38
15642: PPUSH
15643: LD_STRING DMar-1-radio-1
15645: PPUSH
15646: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15650: LD_EXP 31
15654: PPUSH
15655: LD_STRING DH-2-radio-1
15657: PPUSH
15658: CALL_OW 88
// end ; DialogueOff ;
15662: CALL_OW 7
// end else
15666: GO 15692
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15668: LD_EXP 40
15672: PPUSH
15673: LD_STRING DO-1-radio-u
15675: PPUSH
15676: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15680: LD_EXP 31
15684: PPUSH
15685: LD_STRING DH-1-radio-u
15687: PPUSH
15688: CALL_OW 88
// end ; end ;
15692: LD_VAR 0 1
15696: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15697: LD_EXP 47
15701: PPUSH
15702: LD_INT 95
15704: PUSH
15705: LD_INT 8
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PPUSH
15712: CALL_OW 72
15716: IFFALSE 15819
15718: GO 15720
15720: DISABLE
15721: LD_INT 0
15723: PPUSH
// begin enable ;
15724: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15725: LD_ADDR_VAR 0 1
15729: PUSH
15730: LD_EXP 47
15734: PPUSH
15735: LD_INT 95
15737: PUSH
15738: LD_INT 8
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 72
15749: PUSH
15750: FOR_IN
15751: IFFALSE 15780
// begin usForces := usForces diff i ;
15753: LD_ADDR_EXP 47
15757: PUSH
15758: LD_EXP 47
15762: PUSH
15763: LD_VAR 0 1
15767: DIFF
15768: ST_TO_ADDR
// RemoveUnit ( i ) ;
15769: LD_VAR 0 1
15773: PPUSH
15774: CALL_OW 64
// end ;
15778: GO 15750
15780: POP
15781: POP
// if not americanHasEscaped and attackWave = 1 then
15782: LD_EXP 9
15786: NOT
15787: PUSH
15788: LD_EXP 20
15792: PUSH
15793: LD_INT 1
15795: EQUAL
15796: AND
15797: IFFALSE 15819
// begin americanHasEscaped := true ;
15799: LD_ADDR_EXP 9
15803: PUSH
15804: LD_INT 1
15806: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15807: LD_EXP 31
15811: PPUSH
15812: LD_STRING DH-2-assault-a
15814: PPUSH
15815: CALL_OW 88
// end ; end ;
15819: PPOPN 1
15821: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15822: LD_INT 4
15824: PPUSH
15825: LD_INT 22
15827: PUSH
15828: LD_INT 1
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PPUSH
15835: CALL_OW 70
15839: PUSH
15840: LD_EXP 12
15844: NOT
15845: AND
15846: IFFALSE 15863
15848: GO 15850
15850: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15851: LD_EXP 39
15855: PPUSH
15856: LD_STRING DF-1-attack
15858: PPUSH
15859: CALL_OW 94
15863: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15864: LD_INT 5
15866: PPUSH
15867: CALL_OW 255
15871: PUSH
15872: LD_INT 2
15874: EQUAL
15875: IFFALSE 15891
15877: GO 15879
15879: DISABLE
// begin enable ;
15880: ENABLE
// SetSide ( arDepot , 5 ) ;
15881: LD_INT 5
15883: PPUSH
15884: LD_INT 5
15886: PPUSH
15887: CALL_OW 235
// end ;
15891: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15892: LD_INT 22
15894: PUSH
15895: LD_INT 1
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: LD_INT 21
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PPUSH
15916: CALL_OW 69
15920: NOT
15921: PUSH
15922: LD_INT 22
15924: PUSH
15925: LD_INT 4
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PPUSH
15932: CALL_OW 69
15936: NOT
15937: AND
15938: PUSH
15939: LD_EXP 12
15943: NOT
15944: AND
15945: PUSH
15946: LD_EXP 16
15950: PUSH
15951: LD_INT 90
15953: GREATER
15954: AND
15955: PUSH
15956: LD_INT 7
15958: PPUSH
15959: LD_INT 22
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 21
15971: PUSH
15972: LD_INT 1
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PPUSH
15983: CALL_OW 70
15987: AND
15988: PUSH
15989: LD_INT 22
15991: PUSH
15992: LD_INT 2
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 50
16001: PUSH
16002: EMPTY
16003: LIST
16004: PUSH
16005: LD_INT 30
16007: PUSH
16008: LD_INT 0
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: LIST
16019: PPUSH
16020: CALL_OW 69
16024: AND
16025: IFFALSE 16834
16027: GO 16029
16029: DISABLE
16030: LD_INT 0
16032: PPUSH
16033: PPUSH
16034: PPUSH
16035: PPUSH
16036: PPUSH
// begin depot := usDepot ;
16037: LD_ADDR_VAR 0 5
16041: PUSH
16042: LD_INT 11
16044: ST_TO_ADDR
// if not depot then
16045: LD_VAR 0 5
16049: NOT
16050: IFFALSE 16090
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16052: LD_ADDR_VAR 0 5
16056: PUSH
16057: LD_INT 22
16059: PUSH
16060: LD_INT 2
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 30
16069: PUSH
16070: LD_INT 0
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PPUSH
16081: CALL_OW 69
16085: PUSH
16086: LD_INT 1
16088: ARRAY
16089: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16090: LD_ADDR_VAR 0 1
16094: PUSH
16095: LD_EXP 45
16099: PPUSH
16100: LD_INT 26
16102: PUSH
16103: LD_INT 1
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 72
16114: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16115: LD_ADDR_VAR 0 2
16119: PUSH
16120: LD_EXP 45
16124: PPUSH
16125: LD_INT 26
16127: PUSH
16128: LD_INT 2
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PPUSH
16135: CALL_OW 72
16139: ST_TO_ADDR
// if IsOk ( Kaia ) then
16140: LD_EXP 36
16144: PPUSH
16145: CALL_OW 302
16149: IFFALSE 16170
// speaker := [ Kaia , DK ] else
16151: LD_ADDR_VAR 0 3
16155: PUSH
16156: LD_EXP 36
16160: PUSH
16161: LD_STRING DK
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: ST_TO_ADDR
16168: GO 16250
// if randomMen then
16170: LD_VAR 0 1
16174: IFFALSE 16209
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16176: LD_ADDR_VAR 0 3
16180: PUSH
16181: LD_VAR 0 1
16185: PUSH
16186: LD_INT 1
16188: PPUSH
16189: LD_VAR 0 1
16193: PPUSH
16194: CALL_OW 12
16198: ARRAY
16199: PUSH
16200: LD_STRING DArm
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: ST_TO_ADDR
16207: GO 16250
// if randomWomen then
16209: LD_VAR 0 2
16213: IFFALSE 16248
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16215: LD_ADDR_VAR 0 3
16219: PUSH
16220: LD_VAR 0 2
16224: PUSH
16225: LD_INT 1
16227: PPUSH
16228: LD_VAR 0 2
16232: PPUSH
16233: CALL_OW 12
16237: ARRAY
16238: PUSH
16239: LD_STRING DArf
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: ST_TO_ADDR
16246: GO 16250
// exit ;
16248: GO 16834
// if IsInUnit ( speaker [ 1 ] ) then
16250: LD_VAR 0 3
16254: PUSH
16255: LD_INT 1
16257: ARRAY
16258: PPUSH
16259: CALL_OW 310
16263: IFFALSE 16286
// place := IsInUnit ( speaker [ 1 ] ) else
16265: LD_ADDR_VAR 0 4
16269: PUSH
16270: LD_VAR 0 3
16274: PUSH
16275: LD_INT 1
16277: ARRAY
16278: PPUSH
16279: CALL_OW 310
16283: ST_TO_ADDR
16284: GO 16300
// place := speaker [ 1 ] ;
16286: LD_ADDR_VAR 0 4
16290: PUSH
16291: LD_VAR 0 3
16295: PUSH
16296: LD_INT 1
16298: ARRAY
16299: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16300: LD_VAR 0 4
16304: PPUSH
16305: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16309: LD_VAR 0 4
16313: PPUSH
16314: CALL_OW 250
16318: PPUSH
16319: LD_VAR 0 4
16323: PPUSH
16324: CALL_OW 251
16328: PPUSH
16329: CALL 2086 0 2
// wait ( 0 0$2 ) ;
16333: LD_INT 70
16335: PPUSH
16336: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16340: LD_EXP 41
16344: PPUSH
16345: CALL_OW 305
16349: NOT
16350: IFFALSE 16354
// exit ;
16352: GO 16834
// allowConvoys := false ;
16354: LD_ADDR_EXP 13
16358: PUSH
16359: LD_INT 0
16361: ST_TO_ADDR
// blockAttack := true ;
16362: LD_ADDR_EXP 29
16366: PUSH
16367: LD_INT 1
16369: ST_TO_ADDR
// InGameOn ;
16370: CALL_OW 8
// wait ( 0 0$1 ) ;
16374: LD_INT 35
16376: PPUSH
16377: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16381: LD_EXP 41
16385: PPUSH
16386: LD_STRING DI-1-land
16388: PPUSH
16389: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16393: LD_VAR 0 3
16397: PUSH
16398: LD_INT 1
16400: ARRAY
16401: PPUSH
16402: CALL_OW 310
16406: IFFALSE 16421
// ComExit ( speaker [ 1 ] ) ;
16408: LD_VAR 0 3
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: CALL 79478 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16421: LD_VAR 0 3
16425: PUSH
16426: LD_INT 1
16428: ARRAY
16429: PPUSH
16430: LD_EXP 41
16434: PPUSH
16435: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16439: LD_VAR 0 3
16443: PUSH
16444: LD_INT 1
16446: ARRAY
16447: PPUSH
16448: LD_EXP 41
16452: PPUSH
16453: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16457: LD_EXP 41
16461: PPUSH
16462: LD_VAR 0 3
16466: PUSH
16467: LD_INT 1
16469: ARRAY
16470: PPUSH
16471: CALL_OW 119
// wait ( 0 0$1 ) ;
16475: LD_INT 35
16477: PPUSH
16478: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16482: LD_VAR 0 3
16486: PUSH
16487: LD_INT 1
16489: ARRAY
16490: PPUSH
16491: LD_VAR 0 3
16495: PUSH
16496: LD_INT 2
16498: ARRAY
16499: PUSH
16500: LD_STRING -1-land
16502: STR
16503: PPUSH
16504: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16508: LD_EXP 41
16512: PPUSH
16513: LD_STRING DI-2-land
16515: PPUSH
16516: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16520: LD_VAR 0 3
16524: PUSH
16525: LD_INT 1
16527: ARRAY
16528: PPUSH
16529: LD_VAR 0 3
16533: PUSH
16534: LD_INT 2
16536: ARRAY
16537: PUSH
16538: LD_STRING -2-land
16540: STR
16541: PPUSH
16542: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16546: LD_VAR 0 3
16550: PUSH
16551: LD_INT 1
16553: ARRAY
16554: PPUSH
16555: LD_VAR 0 3
16559: PUSH
16560: LD_INT 2
16562: ARRAY
16563: PUSH
16564: LD_STRING -3-land
16566: STR
16567: PPUSH
16568: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16572: LD_EXP 31
16576: PPUSH
16577: LD_STRING DH-1-land
16579: PPUSH
16580: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16584: LD_VAR 0 5
16588: PPUSH
16589: CALL_OW 313
16593: PUSH
16594: LD_INT 6
16596: EQUAL
16597: IFFALSE 16617
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16599: LD_VAR 0 5
16603: PPUSH
16604: CALL_OW 313
16608: PUSH
16609: LD_INT 1
16611: ARRAY
16612: PPUSH
16613: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16617: LD_EXP 41
16621: PPUSH
16622: LD_INT 2
16624: PPUSH
16625: CALL_OW 235
// CenterOnUnits ( depot ) ;
16629: LD_VAR 0 5
16633: PPUSH
16634: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16638: LD_EXP 41
16642: PPUSH
16643: LD_VAR 0 5
16647: PPUSH
16648: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16652: LD_VAR 0 3
16656: PUSH
16657: LD_INT 1
16659: ARRAY
16660: PPUSH
16661: LD_VAR 0 5
16665: PPUSH
16666: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16670: LD_INT 35
16672: PPUSH
16673: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16677: LD_EXP 41
16681: PPUSH
16682: CALL_OW 310
16686: PUSH
16687: LD_EXP 41
16691: PPUSH
16692: CALL_OW 302
16696: NOT
16697: OR
16698: PUSH
16699: LD_VAR 0 5
16703: PPUSH
16704: CALL_OW 302
16708: NOT
16709: OR
16710: IFFALSE 16670
// InGameOff ;
16712: CALL_OW 9
// blockAttack := false ;
16716: LD_ADDR_EXP 29
16720: PUSH
16721: LD_INT 0
16723: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16724: LD_EXP 41
16728: PPUSH
16729: CALL_OW 302
16733: NOT
16734: IFFALSE 16738
// exit ;
16736: GO 16834
// if not IsOk ( depot ) then
16738: LD_VAR 0 5
16742: PPUSH
16743: CALL_OW 302
16747: NOT
16748: IFFALSE 16811
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16750: LD_EXP 41
16754: PPUSH
16755: LD_INT 30
16757: PPUSH
16758: LD_INT 1
16760: PPUSH
16761: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16765: LD_INT 35
16767: PPUSH
16768: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16772: LD_EXP 41
16776: PPUSH
16777: LD_INT 30
16779: PPUSH
16780: LD_INT 1
16782: PPUSH
16783: CALL_OW 307
16787: PUSH
16788: LD_EXP 41
16792: PPUSH
16793: CALL_OW 301
16797: OR
16798: IFFALSE 16765
// RemoveUnit ( Ibrahim ) ;
16800: LD_EXP 41
16804: PPUSH
16805: CALL_OW 64
// exit ;
16809: GO 16834
// end ; ibrahimInDepot := true ;
16811: LD_ADDR_EXP 26
16815: PUSH
16816: LD_INT 1
16818: ST_TO_ADDR
// allowConvoys := true ;
16819: LD_ADDR_EXP 13
16823: PUSH
16824: LD_INT 1
16826: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16827: LD_STRING IbrahimInDepot
16829: PPUSH
16830: CALL_OW 97
// end ;
16834: PPOPN 5
16836: END
// export function IbrahimQuery ; begin
16837: LD_INT 0
16839: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16840: LD_STRING IbrahimQuery
16842: PPUSH
16843: CALL_OW 97
16847: PUSH
16848: LD_INT 1
16850: DOUBLE
16851: EQUAL
16852: IFTRUE 16856
16854: GO 17226
16856: POP
// begin allowConvoys := false ;
16857: LD_ADDR_EXP 13
16861: PUSH
16862: LD_INT 0
16864: ST_TO_ADDR
// ibrahimInDepot := false ;
16865: LD_ADDR_EXP 26
16869: PUSH
16870: LD_INT 0
16872: ST_TO_ADDR
// InGameOn ;
16873: CALL_OW 8
// DialogueOn ;
16877: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
16881: LD_EXP 31
16885: PPUSH
16886: CALL_OW 87
// wait ( 0 0$1 ) ;
16890: LD_INT 35
16892: PPUSH
16893: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16897: LD_EXP 31
16901: PPUSH
16902: LD_STRING DH-1-interrogation
16904: PPUSH
16905: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16909: LD_EXP 41
16913: PPUSH
16914: LD_STRING DI-1-interrogation
16916: PPUSH
16917: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16921: LD_EXP 31
16925: PPUSH
16926: LD_STRING DH-2-interrogation
16928: PPUSH
16929: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16933: LD_EXP 41
16937: PPUSH
16938: LD_STRING DI-2-interrogation
16940: PPUSH
16941: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16945: LD_EXP 31
16949: PPUSH
16950: LD_STRING DH-3-interrogation
16952: PPUSH
16953: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16957: LD_EXP 41
16961: PPUSH
16962: LD_STRING DI-3-interrogation
16964: PPUSH
16965: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16969: LD_EXP 31
16973: PPUSH
16974: LD_STRING DH-4-interrogation
16976: PPUSH
16977: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16981: LD_EXP 41
16985: PPUSH
16986: LD_STRING DI-4-interrogation
16988: PPUSH
16989: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16993: LD_EXP 31
16997: PPUSH
16998: LD_STRING DH-5-interrogation
17000: PPUSH
17001: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
17005: LD_EXP 41
17009: PPUSH
17010: LD_STRING DI-5-interrogation
17012: PPUSH
17013: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17017: LD_INT 10
17019: PPUSH
17020: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
17024: LD_EXP 31
17028: PPUSH
17029: LD_STRING DH-6-interrogation
17031: PPUSH
17032: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
17036: LD_EXP 41
17040: PPUSH
17041: LD_STRING DI-6-interrogation
17043: PPUSH
17044: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
17048: LD_EXP 41
17052: PPUSH
17053: LD_STRING DI-7-interrogation
17055: PPUSH
17056: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17060: LD_EXP 31
17064: PPUSH
17065: LD_STRING DH-7-interrogation
17067: PPUSH
17068: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17072: LD_INT 10
17074: PPUSH
17075: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17079: LD_EXP 31
17083: PPUSH
17084: LD_STRING DH-8-interrogation
17086: PPUSH
17087: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17091: LD_EXP 41
17095: PPUSH
17096: LD_STRING DI-8-interrogation
17098: PPUSH
17099: CALL_OW 88
// wait ( 0 0$1 ) ;
17103: LD_INT 35
17105: PPUSH
17106: CALL_OW 67
// DialogueOff ;
17110: CALL_OW 7
// case Query ( IbrahimDecisionQuery ) of 1 :
17114: LD_STRING IbrahimDecisionQuery
17116: PPUSH
17117: CALL_OW 97
17121: PUSH
17122: LD_INT 1
17124: DOUBLE
17125: EQUAL
17126: IFTRUE 17130
17128: GO 17154
17130: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17131: LD_EXP 41
17135: PPUSH
17136: LD_STRING DI-1-kill
17138: PPUSH
17139: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17143: LD_EXP 41
17147: PPUSH
17148: CALL_OW 66
// end ; 2 :
17152: GO 17220
17154: LD_INT 2
17156: DOUBLE
17157: EQUAL
17158: IFTRUE 17162
17160: GO 17219
17162: POP
// begin SetSide ( Ibrahim , 6 ) ;
17163: LD_EXP 41
17167: PPUSH
17168: LD_INT 6
17170: PPUSH
17171: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17175: LD_EXP 41
17179: PPUSH
17180: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17184: LD_EXP 41
17188: PPUSH
17189: LD_INT 66
17191: PPUSH
17192: LD_INT 2
17194: PPUSH
17195: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17199: LD_EXP 41
17203: PPUSH
17204: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17208: LD_EXP 31
17212: PPUSH
17213: CALL_OW 122
// end ; end ;
17217: GO 17220
17219: POP
// InGameOff ;
17220: CALL_OW 9
// end ; 2 :
17224: GO 17240
17226: LD_INT 2
17228: DOUBLE
17229: EQUAL
17230: IFTRUE 17234
17232: GO 17239
17234: POP
// exit ; end ;
17235: GO 17324
17237: GO 17240
17239: POP
// allowConvoys := true ;
17240: LD_ADDR_EXP 13
17244: PUSH
17245: LD_INT 1
17247: ST_TO_ADDR
// blockAttack := false ;
17248: LD_ADDR_EXP 29
17252: PUSH
17253: LD_INT 0
17255: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17256: LD_INT 5250
17258: PPUSH
17259: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17263: LD_INT 35
17265: PPUSH
17266: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17270: LD_INT 81
17272: PUSH
17273: LD_INT 2
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 21
17282: PUSH
17283: LD_INT 1
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PPUSH
17294: CALL_OW 69
17298: NOT
17299: IFFALSE 17263
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17301: LD_EXP 41
17305: PPUSH
17306: LD_INT 34
17308: PPUSH
17309: LD_INT 21
17311: PPUSH
17312: CALL_OW 111
// ibrahimIsFree := true ;
17316: LD_ADDR_EXP 27
17320: PUSH
17321: LD_INT 1
17323: ST_TO_ADDR
// end ;
17324: LD_VAR 0 1
17328: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17329: LD_EXP 27
17333: PUSH
17334: LD_EXP 41
17338: PPUSH
17339: CALL_OW 302
17343: AND
17344: PUSH
17345: LD_INT 2
17347: PPUSH
17348: LD_EXP 41
17352: PPUSH
17353: CALL_OW 292
17357: AND
17358: IFFALSE 18170
17360: GO 17362
17362: DISABLE
17363: LD_INT 0
17365: PPUSH
17366: PPUSH
17367: PPUSH
17368: PPUSH
17369: PPUSH
17370: PPUSH
// begin wait ( 0 0$10 ) ;
17371: LD_INT 350
17373: PPUSH
17374: CALL_OW 67
// allowConvoys := false ;
17378: LD_ADDR_EXP 13
17382: PUSH
17383: LD_INT 0
17385: ST_TO_ADDR
// blockAttack := true ;
17386: LD_ADDR_EXP 29
17390: PUSH
17391: LD_INT 1
17393: ST_TO_ADDR
// depot := usDepot ;
17394: LD_ADDR_VAR 0 4
17398: PUSH
17399: LD_INT 11
17401: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17402: LD_INT 11
17404: NOT
17405: PUSH
17406: LD_INT 22
17408: PUSH
17409: LD_INT 2
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 50
17418: PUSH
17419: EMPTY
17420: LIST
17421: PUSH
17422: LD_INT 30
17424: PUSH
17425: LD_INT 0
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 69
17441: AND
17442: IFFALSE 17489
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17444: LD_ADDR_VAR 0 4
17448: PUSH
17449: LD_INT 22
17451: PUSH
17452: LD_INT 2
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 50
17461: PUSH
17462: EMPTY
17463: LIST
17464: PUSH
17465: LD_INT 30
17467: PUSH
17468: LD_INT 0
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: LIST
17479: PPUSH
17480: CALL_OW 69
17484: PUSH
17485: LD_INT 1
17487: ARRAY
17488: ST_TO_ADDR
// InGameOn ;
17489: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17493: LD_EXP 41
17497: PPUSH
17498: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17502: LD_EXP 31
17506: PPUSH
17507: LD_EXP 41
17511: PPUSH
17512: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17516: LD_EXP 41
17520: PPUSH
17521: LD_EXP 31
17525: PPUSH
17526: CALL_OW 119
// DialogueOn ;
17530: CALL_OW 6
// Say ( Ibrahim , DI-1-free ) ;
17534: LD_EXP 41
17538: PPUSH
17539: LD_STRING DI-1-free
17541: PPUSH
17542: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17546: LD_EXP 31
17550: PPUSH
17551: LD_STRING DH-1-free
17553: PPUSH
17554: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17558: LD_EXP 41
17562: PPUSH
17563: LD_STRING DI-2-free
17565: PPUSH
17566: CALL_OW 88
// changeClass := 0 ;
17570: LD_ADDR_VAR 0 1
17574: PUSH
17575: LD_INT 0
17577: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17578: LD_STRING IbrahimJoinQuery
17580: PPUSH
17581: CALL_OW 97
17585: PUSH
17586: LD_INT 1
17588: DOUBLE
17589: EQUAL
17590: IFTRUE 17594
17592: GO 17605
17594: POP
// begin changeClass := 1 ;
17595: LD_ADDR_VAR 0 1
17599: PUSH
17600: LD_INT 1
17602: ST_TO_ADDR
// end ; 2 :
17603: GO 17857
17605: LD_INT 2
17607: DOUBLE
17608: EQUAL
17609: IFTRUE 17613
17611: GO 17777
17613: POP
// begin Say ( Heike , DH-1-decline ) ;
17614: LD_EXP 31
17618: PPUSH
17619: LD_STRING DH-1-decline
17621: PPUSH
17622: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17626: LD_EXP 41
17630: PPUSH
17631: LD_STRING DI-1-decline
17633: PPUSH
17634: CALL_OW 88
// DialogueOff ;
17638: CALL_OW 7
// InGameOff ;
17642: CALL_OW 9
// blockAttack := false ;
17646: LD_ADDR_EXP 29
17650: PUSH
17651: LD_INT 0
17653: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17654: LD_EXP 41
17658: PPUSH
17659: LD_INT 30
17661: PPUSH
17662: LD_INT 1
17664: PPUSH
17665: CALL_OW 111
// p := 0 ;
17669: LD_ADDR_VAR 0 3
17673: PUSH
17674: LD_INT 0
17676: ST_TO_ADDR
// repeat p := p + 1 ;
17677: LD_ADDR_VAR 0 3
17681: PUSH
17682: LD_VAR 0 3
17686: PUSH
17687: LD_INT 1
17689: PLUS
17690: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17691: LD_INT 35
17693: PPUSH
17694: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17698: LD_EXP 41
17702: PPUSH
17703: LD_INT 30
17705: PPUSH
17706: LD_INT 1
17708: PPUSH
17709: CALL_OW 307
17713: PUSH
17714: LD_INT 22
17716: PUSH
17717: LD_INT 2
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 101
17726: PUSH
17727: LD_INT 6
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PPUSH
17738: CALL_OW 69
17742: NOT
17743: OR
17744: PUSH
17745: LD_VAR 0 3
17749: PUSH
17750: LD_INT 10
17752: GREATER
17753: OR
17754: IFFALSE 17677
// RemoveUnit ( Ibrahim ) ;
17756: LD_EXP 41
17760: PPUSH
17761: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17765: LD_INT 1
17767: PPUSH
17768: LD_STRING 03_IbrahimHasEscaped
17770: PPUSH
17771: CALL_OW 39
// end ; 3 :
17775: GO 17857
17777: LD_INT 3
17779: DOUBLE
17780: EQUAL
17781: IFTRUE 17785
17783: GO 17856
17785: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17786: LD_EXP 31
17790: PPUSH
17791: LD_STRING DH-1-radio-hq
17793: PPUSH
17794: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17798: LD_EXP 40
17802: PPUSH
17803: LD_STRING DO-1-radio-hq
17805: PPUSH
17806: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17810: LD_EXP 31
17814: PPUSH
17815: LD_STRING DH-2-radio-hq
17817: PPUSH
17818: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17822: LD_EXP 40
17826: PPUSH
17827: LD_STRING DO-2-radio-hq
17829: PPUSH
17830: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17834: LD_EXP 31
17838: PPUSH
17839: LD_STRING DH-3-radio-hq
17841: PPUSH
17842: CALL_OW 88
// changeClass := 1 ;
17846: LD_ADDR_VAR 0 1
17850: PUSH
17851: LD_INT 1
17853: ST_TO_ADDR
// end ; end ;
17854: GO 17857
17856: POP
// if changeClass then
17857: LD_VAR 0 1
17861: IFFALSE 18170
// begin Say ( Heike , DH-1-agree ) ;
17863: LD_EXP 31
17867: PPUSH
17868: LD_STRING DH-1-agree
17870: PPUSH
17871: CALL_OW 88
// if IsOk ( Givi ) then
17875: LD_EXP 32
17879: PPUSH
17880: CALL_OW 302
17884: IFFALSE 17922
// begin Say ( Givi , DG-1-agree ) ;
17886: LD_EXP 32
17890: PPUSH
17891: LD_STRING DG-1-agree
17893: PPUSH
17894: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17898: LD_EXP 31
17902: PPUSH
17903: LD_STRING DH-2-agree
17905: PPUSH
17906: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17910: LD_EXP 32
17914: PPUSH
17915: LD_STRING DG-2-agree
17917: PPUSH
17918: CALL_OW 88
// end ; CenterNowOnUnits ( Ibrahim ) ;
17922: LD_EXP 41
17926: PPUSH
17927: CALL_OW 87
// DialogueOff ;
17931: CALL_OW 7
// if UnitsInside ( depot ) = 6 then
17935: LD_VAR 0 4
17939: PPUSH
17940: CALL_OW 313
17944: PUSH
17945: LD_INT 6
17947: EQUAL
17948: IFFALSE 17968
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17950: LD_VAR 0 4
17954: PPUSH
17955: CALL_OW 313
17959: PUSH
17960: LD_INT 1
17962: ARRAY
17963: PPUSH
17964: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17968: LD_EXP 41
17972: PPUSH
17973: LD_INT 2
17975: PPUSH
17976: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17980: LD_ADDR_VAR 0 5
17984: PUSH
17985: LD_EXP 41
17989: PPUSH
17990: CALL_OW 250
17994: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17995: LD_ADDR_VAR 0 6
17999: PUSH
18000: LD_EXP 41
18004: PPUSH
18005: CALL_OW 251
18009: ST_TO_ADDR
// if depot then
18010: LD_VAR 0 4
18014: IFFALSE 18063
// begin ComEnterUnit ( Ibrahim , depot ) ;
18016: LD_EXP 41
18020: PPUSH
18021: LD_VAR 0 4
18025: PPUSH
18026: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18030: LD_INT 35
18032: PPUSH
18033: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18037: LD_EXP 41
18041: PPUSH
18042: CALL_OW 310
18046: IFFALSE 18030
// b := IsInUnit ( Ibrahim ) ;
18048: LD_ADDR_VAR 0 2
18052: PUSH
18053: LD_EXP 41
18057: PPUSH
18058: CALL_OW 310
18062: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
18063: LD_EXP 41
18067: PPUSH
18068: CALL_OW 64
// uc_side := 2 ;
18072: LD_ADDR_OWVAR 20
18076: PUSH
18077: LD_INT 2
18079: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18080: LD_ADDR_EXP 41
18084: PUSH
18085: LD_STRING Ibrahim
18087: PPUSH
18088: LD_INT 0
18090: PPUSH
18091: LD_STRING 
18093: PPUSH
18094: CALL 41348 0 3
18098: ST_TO_ADDR
// if depot then
18099: LD_VAR 0 4
18103: IFFALSE 18121
// PlaceHumanInUnit ( Ibrahim , b ) else
18105: LD_EXP 41
18109: PPUSH
18110: LD_VAR 0 2
18114: PPUSH
18115: CALL_OW 52
18119: GO 18143
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18121: LD_EXP 41
18125: PPUSH
18126: LD_VAR 0 5
18130: PPUSH
18131: LD_VAR 0 6
18135: PPUSH
18136: LD_INT 0
18138: PPUSH
18139: CALL_OW 48
// InGameOff ;
18143: CALL_OW 9
// allowConvoys := true ;
18147: LD_ADDR_EXP 13
18151: PUSH
18152: LD_INT 1
18154: ST_TO_ADDR
// blockAttack := false ;
18155: LD_ADDR_EXP 29
18159: PUSH
18160: LD_INT 0
18162: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18163: LD_STRING ACH_IBRAHIM
18165: PPUSH
18166: CALL_OW 543
// end ; end ;
18170: PPOPN 6
18172: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18173: LD_EXP 36
18177: PPUSH
18178: CALL_OW 256
18182: PUSH
18183: LD_INT 3
18185: LESS
18186: IFFALSE 18253
18188: GO 18190
18190: DISABLE
// begin DialogueOn ;
18191: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18195: LD_EXP 36
18199: PPUSH
18200: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18204: LD_EXP 36
18208: PPUSH
18209: LD_STRING DK-keydeath-1
18211: PPUSH
18212: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18216: LD_EXP 31
18220: PPUSH
18221: LD_STRING DH-keydeath-2
18223: PPUSH
18224: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18228: LD_EXP 31
18232: PPUSH
18233: LD_STRING DH-keydeath-3
18235: PPUSH
18236: CALL_OW 88
// DialogueOff ;
18240: CALL_OW 7
// KillUnit ( Kaia ) ;
18244: LD_EXP 36
18248: PPUSH
18249: CALL_OW 66
// end ;
18253: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18254: LD_EXP 12
18258: PUSH
18259: LD_EXP 22
18263: PUSH
18264: LD_INT 1
18266: LESS
18267: AND
18268: IFFALSE 18837
18270: GO 18272
18272: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18273: LD_INT 22
18275: PUSH
18276: LD_INT 1
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: LD_INT 25
18288: PUSH
18289: LD_INT 1
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 25
18298: PUSH
18299: LD_INT 3
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: LIST
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PPUSH
18315: CALL_OW 69
18319: IFFALSE 18397
// begin ChangeSideFog ( 1 , 2 ) ;
18321: LD_INT 1
18323: PPUSH
18324: LD_INT 2
18326: PPUSH
18327: CALL_OW 343
// Query ( DestroyEnemy ) ;
18331: LD_STRING DestroyEnemy
18333: PPUSH
18334: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18338: LD_INT 35
18340: PPUSH
18341: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18345: LD_INT 22
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 2
18357: PUSH
18358: LD_INT 25
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 25
18370: PUSH
18371: LD_INT 3
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PPUSH
18387: CALL_OW 69
18391: PUSH
18392: LD_INT 0
18394: EQUAL
18395: IFFALSE 18338
// end ; if tick <= 45 45$00 then
18397: LD_OWVAR 1
18401: PUSH
18402: LD_INT 94500
18404: LESSEQUAL
18405: IFFALSE 18414
// SetAchievement ( ACH_HSPEED_3 ) ;
18407: LD_STRING ACH_HSPEED_3
18409: PPUSH
18410: CALL_OW 543
// DialogueOn ;
18414: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18418: LD_EXP 31
18422: PPUSH
18423: LD_STRING DH-1-final
18425: PPUSH
18426: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18430: LD_OWVAR 1
18434: PUSH
18435: LD_INT 138600
18437: PUSH
18438: LD_INT 134400
18440: PUSH
18441: LD_INT 130200
18443: PUSH
18444: LD_INT 126000
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: PUSH
18453: LD_OWVAR 67
18457: ARRAY
18458: LESSEQUAL
18459: IFFALSE 18473
// AddMedal ( med1 , 1 ) else
18461: LD_STRING med1
18463: PPUSH
18464: LD_INT 1
18466: PPUSH
18467: CALL_OW 101
18471: GO 18484
// AddMedal ( med1 , - 1 ) ;
18473: LD_STRING med1
18475: PPUSH
18476: LD_INT 1
18478: NEG
18479: PPUSH
18480: CALL_OW 101
// if vehCounter >= 2 then
18484: LD_EXP 23
18488: PUSH
18489: LD_INT 2
18491: GREATEREQUAL
18492: IFFALSE 18506
// AddMedal ( med2 , 1 ) else
18494: LD_STRING med2
18496: PPUSH
18497: LD_INT 1
18499: PPUSH
18500: CALL_OW 101
18504: GO 18517
// AddMedal ( med2 , - 1 ) ;
18506: LD_STRING med2
18508: PPUSH
18509: LD_INT 1
18511: NEG
18512: PPUSH
18513: CALL_OW 101
// if deadCounter = 0 then
18517: LD_EXP 10
18521: PUSH
18522: LD_INT 0
18524: EQUAL
18525: IFFALSE 18539
// AddMedal ( med3 , 1 ) else
18527: LD_STRING med3
18529: PPUSH
18530: LD_INT 1
18532: PPUSH
18533: CALL_OW 101
18537: GO 18550
// AddMedal ( med3 , - 1 ) ;
18539: LD_STRING med3
18541: PPUSH
18542: LD_INT 1
18544: NEG
18545: PPUSH
18546: CALL_OW 101
// GiveMedals ( MAIN ) ;
18550: LD_STRING MAIN
18552: PPUSH
18553: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18557: LD_INT 22
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 23
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 21
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: LIST
18591: PPUSH
18592: CALL_OW 69
18596: PPUSH
18597: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18601: LD_EXP 31
18605: PPUSH
18606: LD_STRING 03_Heike
18608: PPUSH
18609: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18613: LD_EXP 35
18617: PPUSH
18618: LD_STRING 03_Aviradze
18620: PPUSH
18621: CALL_OW 38
// if Givi then
18625: LD_EXP 32
18629: IFFALSE 18643
// SaveCharacters ( Givi , 03_Givi ) ;
18631: LD_EXP 32
18635: PPUSH
18636: LD_STRING 03_Givi
18638: PPUSH
18639: CALL_OW 38
// if Mike then
18643: LD_EXP 33
18647: IFFALSE 18661
// SaveCharacters ( Mike , 03_Mike ) ;
18649: LD_EXP 33
18653: PPUSH
18654: LD_STRING 03_Mike
18656: PPUSH
18657: CALL_OW 38
// if Kamil then
18661: LD_EXP 34
18665: IFFALSE 18679
// SaveCharacters ( Kamil , 03_Kamil ) ;
18667: LD_EXP 34
18671: PPUSH
18672: LD_STRING 03_Kamil
18674: PPUSH
18675: CALL_OW 38
// if Kaia then
18679: LD_EXP 36
18683: IFFALSE 18697
// SaveCharacters ( Kaia , 03_Kaia ) ;
18685: LD_EXP 36
18689: PPUSH
18690: LD_STRING 03_Kaia
18692: PPUSH
18693: CALL_OW 38
// if Sophia then
18697: LD_EXP 37
18701: IFFALSE 18715
// SaveCharacters ( Sophia , 03_Sophia ) ;
18703: LD_EXP 37
18707: PPUSH
18708: LD_STRING 03_Sophia
18710: PPUSH
18711: CALL_OW 38
// if Markov then
18715: LD_EXP 38
18719: IFFALSE 18733
// SaveCharacters ( Markov , 03_Markov ) ;
18721: LD_EXP 38
18725: PPUSH
18726: LD_STRING 03_Markov
18728: PPUSH
18729: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18733: LD_EXP 41
18737: PUSH
18738: LD_EXP 41
18742: PPUSH
18743: CALL_OW 255
18747: PUSH
18748: LD_INT 2
18750: EQUAL
18751: AND
18752: IFFALSE 18773
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18754: LD_STRING enableBioCharacter(BIO_IBRA)
18756: PPUSH
18757: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18761: LD_EXP 41
18765: PPUSH
18766: LD_STRING 03_Ibrahim
18768: PPUSH
18769: CALL_OW 38
// end ; if heikeSecondSquad then
18773: LD_EXP 45
18777: IFFALSE 18791
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18779: LD_EXP 45
18783: PPUSH
18784: LD_STRING 03_others
18786: PPUSH
18787: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18791: LD_EXP 10
18795: PPUSH
18796: LD_STRING 03_DeadCounter
18798: PPUSH
18799: CALL_OW 39
// SaveVariable ( cargoRecycled , 03_CargoRecycled ) ;
18803: LD_EXP 30
18807: PPUSH
18808: LD_STRING 03_CargoRecycled
18810: PPUSH
18811: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18815: LD_STRING enableBioCharacter(BIO_OMAR)
18817: PPUSH
18818: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18822: LD_STRING enableBioCharacter(BIO_FARM)
18824: PPUSH
18825: CALL_OW 559
// YouWin ;
18829: CALL_OW 103
// DialogueOff ;
18833: CALL_OW 7
// end ; end_of_file
18837: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18838: LD_VAR 0 1
18842: PPUSH
18843: CALL 36064 0 1
// if un = Heike then
18847: LD_VAR 0 1
18851: PUSH
18852: LD_EXP 31
18856: EQUAL
18857: IFFALSE 18866
// YouLost ( Heike ) ;
18859: LD_STRING Heike
18861: PPUSH
18862: CALL_OW 104
// if un = Aviradze then
18866: LD_VAR 0 1
18870: PUSH
18871: LD_EXP 35
18875: EQUAL
18876: IFFALSE 18885
// YouLost ( Aviradze ) ;
18878: LD_STRING Aviradze
18880: PPUSH
18881: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18885: LD_VAR 0 1
18889: PUSH
18890: LD_INT 11
18892: EQUAL
18893: PUSH
18894: LD_EXP 12
18898: NOT
18899: AND
18900: IFFALSE 18909
// YouLost ( Depot ) ;
18902: LD_STRING Depot
18904: PPUSH
18905: CALL_OW 104
// if un = arDepot then
18909: LD_VAR 0 1
18913: PUSH
18914: LD_INT 5
18916: EQUAL
18917: IFFALSE 18926
// YouLost ( FarmerDepot ) ;
18919: LD_STRING FarmerDepot
18921: PPUSH
18922: CALL_OW 104
// if un = Farmer then
18926: LD_VAR 0 1
18930: PUSH
18931: LD_EXP 39
18935: EQUAL
18936: IFFALSE 18945
// YouLost ( Farmer ) ;
18938: LD_STRING Farmer
18940: PPUSH
18941: CALL_OW 104
// if un in usForces then
18945: LD_VAR 0 1
18949: PUSH
18950: LD_EXP 47
18954: IN
18955: IFFALSE 18973
// usForces := usForces diff un ;
18957: LD_ADDR_EXP 47
18961: PUSH
18962: LD_EXP 47
18966: PUSH
18967: LD_VAR 0 1
18971: DIFF
18972: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18973: LD_VAR 0 1
18977: PUSH
18978: LD_INT 22
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 23
18990: PUSH
18991: LD_INT 2
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 21
19000: PUSH
19001: LD_INT 1
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: LIST
19012: PPUSH
19013: CALL_OW 69
19017: IN
19018: IFFALSE 19034
// deadCounter := deadCounter + 1 ;
19020: LD_ADDR_EXP 10
19024: PUSH
19025: LD_EXP 10
19029: PUSH
19030: LD_INT 1
19032: PLUS
19033: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
19034: LD_VAR 0 1
19038: PUSH
19039: LD_INT 22
19041: PUSH
19042: LD_INT 4
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 34
19051: PUSH
19052: LD_INT 12
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PPUSH
19063: CALL_OW 69
19067: IN
19068: PUSH
19069: LD_EXP 19
19073: NOT
19074: AND
19075: IFFALSE 19085
// firstConvoyDestroyed := true ;
19077: LD_ADDR_EXP 19
19081: PUSH
19082: LD_INT 1
19084: ST_TO_ADDR
// if un in usAttackers then
19085: LD_VAR 0 1
19089: PUSH
19090: LD_EXP 50
19094: IN
19095: IFFALSE 19113
// usAttackers := usAttackers diff un ;
19097: LD_ADDR_EXP 50
19101: PUSH
19102: LD_EXP 50
19106: PUSH
19107: LD_VAR 0 1
19111: DIFF
19112: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19113: LD_VAR 0 1
19117: PUSH
19118: LD_INT 22
19120: PUSH
19121: LD_INT 5
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 21
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PPUSH
19142: CALL_OW 69
19146: IN
19147: IFFALSE 19163
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19149: LD_ADDR_EXP 21
19153: PUSH
19154: LD_EXP 21
19158: PUSH
19159: LD_INT 1
19161: PLUS
19162: ST_TO_ADDR
// end ;
19163: PPOPN 1
19165: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19166: LD_VAR 0 2
19170: PUSH
19171: LD_EXP 41
19175: EQUAL
19176: PUSH
19177: LD_EXP 26
19181: AND
19182: IFFALSE 19367
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19184: LD_INT 22
19186: PUSH
19187: LD_INT 2
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 30
19196: PUSH
19197: LD_INT 0
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 50
19206: PUSH
19207: EMPTY
19208: LIST
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: LIST
19214: PPUSH
19215: CALL_OW 69
19219: IFFALSE 19273
// begin InGameOn ;
19221: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19225: LD_EXP 41
19229: PPUSH
19230: LD_INT 11
19232: PPUSH
19233: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19237: LD_INT 35
19239: PPUSH
19240: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19244: LD_EXP 41
19248: PPUSH
19249: LD_INT 11
19251: PPUSH
19252: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19256: LD_EXP 41
19260: PPUSH
19261: CALL_OW 310
19265: IFFALSE 19237
// InGameOff ;
19267: CALL_OW 9
// end else
19271: GO 19367
// begin SetSide ( Ibrahim , 6 ) ;
19273: LD_EXP 41
19277: PPUSH
19278: LD_INT 6
19280: PPUSH
19281: CALL_OW 235
// ibrahimInDepot := false ;
19285: LD_ADDR_EXP 26
19289: PUSH
19290: LD_INT 0
19292: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19293: LD_EXP 41
19297: PPUSH
19298: LD_INT 30
19300: PPUSH
19301: LD_INT 1
19303: PPUSH
19304: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19308: LD_INT 35
19310: PPUSH
19311: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19315: LD_EXP 41
19319: PPUSH
19320: LD_INT 30
19322: PPUSH
19323: LD_INT 1
19325: PPUSH
19326: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19330: LD_EXP 41
19334: PPUSH
19335: LD_INT 30
19337: PPUSH
19338: LD_INT 1
19340: PPUSH
19341: CALL_OW 307
19345: PUSH
19346: LD_EXP 41
19350: PPUSH
19351: CALL_OW 301
19355: OR
19356: IFFALSE 19308
// RemoveUnit ( Ibrahim ) ;
19358: LD_EXP 41
19362: PPUSH
19363: CALL_OW 64
// end ; end ; end ;
19367: PPOPN 2
19369: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19370: LD_VAR 0 2
19374: PUSH
19375: LD_EXP 31
19379: EQUAL
19380: PUSH
19381: LD_VAR 0 1
19385: PUSH
19386: LD_INT 11
19388: EQUAL
19389: AND
19390: PUSH
19391: LD_EXP 26
19395: AND
19396: IFFALSE 19402
// IbrahimQuery ;
19398: CALL 16837 0 0
// end ;
19402: PPOPN 2
19404: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19405: LD_VAR 0 1
19409: PPUSH
19410: CALL_OW 141
// if oldId in usAttackers then
19414: LD_VAR 0 2
19418: PUSH
19419: LD_EXP 50
19423: IN
19424: IFFALSE 19442
// usAttackers := usAttackers diff oldId ;
19426: LD_ADDR_EXP 50
19430: PUSH
19431: LD_EXP 50
19435: PUSH
19436: LD_VAR 0 2
19440: DIFF
19441: ST_TO_ADDR
// if newId in usAttackers then
19442: LD_VAR 0 1
19446: PUSH
19447: LD_EXP 50
19451: IN
19452: IFFALSE 19470
// usAttackers := usAttackers diff newId ;
19454: LD_ADDR_EXP 50
19458: PUSH
19459: LD_EXP 50
19463: PUSH
19464: LD_VAR 0 1
19468: DIFF
19469: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19470: LD_VAR 0 3
19474: PUSH
19475: LD_INT 4
19477: EQUAL
19478: PUSH
19479: LD_EXP 19
19483: NOT
19484: AND
19485: IFFALSE 19495
// firstConvoyDestroyed := true ;
19487: LD_ADDR_EXP 19
19491: PUSH
19492: LD_INT 1
19494: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19495: LD_VAR 0 1
19499: PPUSH
19500: CALL_OW 264
19504: PUSH
19505: LD_INT 12
19507: EQUAL
19508: IFFALSE 19546
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19510: LD_ADDR_EXP 14
19514: PUSH
19515: LD_EXP 14
19519: PUSH
19520: LD_INT 1
19522: PLUS
19523: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19524: LD_VAR 0 1
19528: PPUSH
19529: LD_INT 1
19531: PPUSH
19532: CALL_OW 289
19536: PUSH
19537: LD_INT 0
19539: EQUAL
19540: IFFALSE 19546
// EmptyCargoDialog ;
19542: CALL 15455 0 0
// end ; end ;
19546: PPOPN 4
19548: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19549: LD_VAR 0 1
19553: PUSH
19554: LD_INT 2
19556: EQUAL
19557: PUSH
19558: LD_VAR 0 2
19562: PUSH
19563: LD_INT 5
19565: EQUAL
19566: AND
19567: IFFALSE 19576
// YouLost ( Attack ) ;
19569: LD_STRING Attack
19571: PPUSH
19572: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19576: LD_VAR 0 1
19580: PUSH
19581: LD_INT 2
19583: EQUAL
19584: PUSH
19585: LD_VAR 0 2
19589: PUSH
19590: LD_INT 1
19592: EQUAL
19593: AND
19594: IFFALSE 19604
// americanContact := true ;
19596: LD_ADDR_EXP 5
19600: PUSH
19601: LD_INT 1
19603: ST_TO_ADDR
// end ;
19604: PPOPN 2
19606: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19607: LD_VAR 0 1
19611: PPUSH
19612: CALL_OW 255
19616: PUSH
19617: LD_INT 1
19619: EQUAL
19620: PUSH
19621: LD_EXP 7
19625: NOT
19626: AND
19627: IFFALSE 19761
// begin if GetBType ( b ) = b_lab then
19629: LD_VAR 0 1
19633: PPUSH
19634: CALL_OW 266
19638: PUSH
19639: LD_INT 6
19641: EQUAL
19642: IFFALSE 19682
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19644: LD_EXP 47
19648: PPUSH
19649: LD_INT 25
19651: PUSH
19652: LD_INT 4
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 72
19663: PPUSH
19664: LD_VAR 0 1
19668: PPUSH
19669: CALL_OW 120
// AmLabResearch ( b ) ;
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL 5142 0 1
// end ; if GetBType ( b ) = b_armoury then
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL_OW 266
19691: PUSH
19692: LD_INT 4
19694: EQUAL
19695: IFFALSE 19743
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19697: LD_EXP 47
19701: PPUSH
19702: LD_INT 25
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 3
19714: PUSH
19715: LD_INT 54
19717: PUSH
19718: EMPTY
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PPUSH
19729: CALL_OW 72
19733: PPUSH
19734: LD_VAR 0 1
19738: PPUSH
19739: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19743: LD_ADDR_EXP 49
19747: PUSH
19748: LD_EXP 49
19752: PPUSH
19753: LD_INT 1
19755: PPUSH
19756: CALL_OW 3
19760: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19761: LD_VAR 0 1
19765: PPUSH
19766: CALL_OW 255
19770: PUSH
19771: LD_INT 5
19773: EQUAL
19774: IFFALSE 19788
// SetBLevel ( b , 5 ) ;
19776: LD_VAR 0 1
19780: PPUSH
19781: LD_INT 5
19783: PPUSH
19784: CALL_OW 241
// end ;
19788: PPOPN 1
19790: END
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin if weapon = us_cargo_bay then
19791: LD_VAR 0 11
19795: PUSH
19796: LD_INT 12
19798: EQUAL
19799: IFFALSE 19809
// cargoRecycled := true ;
19801: LD_ADDR_EXP 30
19805: PUSH
19806: LD_INT 1
19808: ST_TO_ADDR
// end ;
19809: PPOPN 11
19811: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19812: LD_VAR 0 1
19816: PPUSH
19817: CALL_OW 255
19821: PUSH
19822: LD_INT 2
19824: EQUAL
19825: IFFALSE 19841
// vehCounter := vehCounter + 1 ;
19827: LD_ADDR_EXP 23
19831: PUSH
19832: LD_EXP 23
19836: PUSH
19837: LD_INT 1
19839: PLUS
19840: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19841: LD_VAR 0 1
19845: PPUSH
19846: LD_VAR 0 2
19850: PPUSH
19851: CALL 36122 0 2
// end ;
19855: PPOPN 2
19857: END
// on SailEvent ( event ) do begin if event = eventAttack then
19858: LD_VAR 0 1
19862: PUSH
19863: LD_EXP 25
19867: EQUAL
19868: IFFALSE 19874
// AmericanAttack ;
19870: CALL 6786 0 0
// end ; end_of_file
19874: PPOPN 1
19876: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19877: LD_OWVAR 1
19881: PUSH
19882: LD_INT 10500
19884: PUSH
19885: LD_INT 9800
19887: PUSH
19888: LD_INT 9450
19890: PUSH
19891: LD_INT 9100
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: PUSH
19900: LD_OWVAR 67
19904: ARRAY
19905: LESSEQUAL
19906: IFFALSE 19933
19908: GO 19910
19910: DISABLE
// begin enable ;
19911: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19912: LD_INT 1
19914: PPUSH
19915: LD_INT 5
19917: PPUSH
19918: CALL_OW 12
19922: PPUSH
19923: LD_INT 9
19925: PPUSH
19926: LD_INT 1
19928: PPUSH
19929: CALL_OW 55
// end ;
19933: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19934: LD_EXP 7
19938: PUSH
19939: LD_OWVAR 1
19943: PUSH
19944: LD_INT 94500
19946: LESSEQUAL
19947: AND
19948: IFFALSE 19975
19950: GO 19952
19952: DISABLE
// begin enable ;
19953: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19954: LD_INT 3
19956: PPUSH
19957: LD_INT 5
19959: PPUSH
19960: CALL_OW 12
19964: PPUSH
19965: LD_INT 9
19967: PPUSH
19968: LD_INT 1
19970: PPUSH
19971: CALL_OW 55
// end ; end_of_file
19975: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19976: LD_EXP 12
19980: NOT
19981: PUSH
19982: LD_EXP 17
19986: AND
19987: PUSH
19988: LD_EXP 4
19992: AND
19993: PUSH
19994: LD_EXP 16
19998: PUSH
19999: LD_EXP 17
20003: LESSEQUAL
20004: AND
20005: IFFALSE 20116
20007: GO 20009
20009: DISABLE
// begin enable ;
20010: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
20011: LD_ADDR_OWVAR 47
20015: PUSH
20016: LD_STRING #X103-1
20018: PUSH
20019: LD_EXP 17
20023: PUSH
20024: LD_EXP 16
20028: MINUS
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
20034: LD_ADDR_EXP 16
20038: PUSH
20039: LD_INT 5
20041: PPUSH
20042: CALL_OW 274
20046: PPUSH
20047: LD_INT 1
20049: PPUSH
20050: CALL_OW 275
20054: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
20055: LD_INT 10
20057: PPUSH
20058: LD_INT 1
20060: PPUSH
20061: CALL_OW 287
20065: PUSH
20066: LD_INT 0
20068: EQUAL
20069: IFFALSE 20087
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
20071: LD_ADDR_EXP 18
20075: PUSH
20076: LD_EXP 18
20080: PUSH
20081: LD_INT 35
20083: MINUS
20084: ST_TO_ADDR
20085: GO 20116
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
20087: LD_ADDR_EXP 18
20091: PUSH
20092: LD_INT 42000
20094: PUSH
20095: LD_INT 31500
20097: PUSH
20098: LD_INT 25200
20100: PUSH
20101: LD_INT 21000
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: PUSH
20110: LD_OWVAR 67
20114: ARRAY
20115: ST_TO_ADDR
// end ; end_of_file
20116: END
// export globalGameSaveCounter ; every 0 0$1 do
20117: GO 20119
20119: DISABLE
// begin enable ;
20120: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20121: LD_STRING updateTimer(
20123: PUSH
20124: LD_OWVAR 1
20128: STR
20129: PUSH
20130: LD_STRING );
20132: STR
20133: PPUSH
20134: CALL_OW 559
// end ;
20138: END
// every 0 0$1 do
20139: GO 20141
20141: DISABLE
// begin globalGameSaveCounter := 0 ;
20142: LD_ADDR_EXP 51
20146: PUSH
20147: LD_INT 0
20149: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20150: LD_STRING setGameSaveCounter(0)
20152: PPUSH
20153: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20157: LD_STRING initStreamRollete();
20159: PPUSH
20160: CALL_OW 559
// InitStreamMode ;
20164: CALL 21507 0 0
// DefineStreamItems ( false ) ;
20168: LD_INT 0
20170: PPUSH
20171: CALL 21971 0 1
// end ;
20175: END
// export function SOS_MapStart ( ) ; begin
20176: LD_INT 0
20178: PPUSH
// if streamModeActive then
20179: LD_EXP 52
20183: IFFALSE 20192
// DefineStreamItems ( true ) ;
20185: LD_INT 1
20187: PPUSH
20188: CALL 21971 0 1
// UpdateLuaVariables ( ) ;
20192: CALL 20209 0 0
// UpdateFactoryWaypoints ( ) ;
20196: CALL 34973 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20200: CALL 35225 0 0
// end ;
20204: LD_VAR 0 1
20208: RET
// function UpdateLuaVariables ( ) ; begin
20209: LD_INT 0
20211: PPUSH
// if globalGameSaveCounter then
20212: LD_EXP 51
20216: IFFALSE 20250
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20218: LD_ADDR_EXP 51
20222: PUSH
20223: LD_EXP 51
20227: PPUSH
20228: CALL 80441 0 1
20232: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20233: LD_STRING setGameSaveCounter(
20235: PUSH
20236: LD_EXP 51
20240: STR
20241: PUSH
20242: LD_STRING )
20244: STR
20245: PPUSH
20246: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20250: LD_STRING setGameDifficulty(
20252: PUSH
20253: LD_OWVAR 67
20257: STR
20258: PUSH
20259: LD_STRING )
20261: STR
20262: PPUSH
20263: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20267: LD_STRING displayDifficulty(
20269: PUSH
20270: LD_OWVAR 67
20274: STR
20275: PUSH
20276: LD_STRING )
20278: STR
20279: PPUSH
20280: CALL_OW 559
// end ;
20284: LD_VAR 0 1
20288: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20289: LD_INT 0
20291: PPUSH
// if p2 = stream_mode then
20292: LD_VAR 0 2
20296: PUSH
20297: LD_INT 100
20299: EQUAL
20300: IFFALSE 21303
// begin if not StreamModeActive then
20302: LD_EXP 52
20306: NOT
20307: IFFALSE 20317
// StreamModeActive := true ;
20309: LD_ADDR_EXP 52
20313: PUSH
20314: LD_INT 1
20316: ST_TO_ADDR
// if p3 = 0 then
20317: LD_VAR 0 3
20321: PUSH
20322: LD_INT 0
20324: EQUAL
20325: IFFALSE 20331
// InitStreamMode ;
20327: CALL 21507 0 0
// if p3 = 1 then
20331: LD_VAR 0 3
20335: PUSH
20336: LD_INT 1
20338: EQUAL
20339: IFFALSE 20349
// sRocket := true ;
20341: LD_ADDR_EXP 57
20345: PUSH
20346: LD_INT 1
20348: ST_TO_ADDR
// if p3 = 2 then
20349: LD_VAR 0 3
20353: PUSH
20354: LD_INT 2
20356: EQUAL
20357: IFFALSE 20367
// sSpeed := true ;
20359: LD_ADDR_EXP 56
20363: PUSH
20364: LD_INT 1
20366: ST_TO_ADDR
// if p3 = 3 then
20367: LD_VAR 0 3
20371: PUSH
20372: LD_INT 3
20374: EQUAL
20375: IFFALSE 20385
// sEngine := true ;
20377: LD_ADDR_EXP 58
20381: PUSH
20382: LD_INT 1
20384: ST_TO_ADDR
// if p3 = 4 then
20385: LD_VAR 0 3
20389: PUSH
20390: LD_INT 4
20392: EQUAL
20393: IFFALSE 20403
// sSpec := true ;
20395: LD_ADDR_EXP 55
20399: PUSH
20400: LD_INT 1
20402: ST_TO_ADDR
// if p3 = 5 then
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 5
20410: EQUAL
20411: IFFALSE 20421
// sLevel := true ;
20413: LD_ADDR_EXP 59
20417: PUSH
20418: LD_INT 1
20420: ST_TO_ADDR
// if p3 = 6 then
20421: LD_VAR 0 3
20425: PUSH
20426: LD_INT 6
20428: EQUAL
20429: IFFALSE 20439
// sArmoury := true ;
20431: LD_ADDR_EXP 60
20435: PUSH
20436: LD_INT 1
20438: ST_TO_ADDR
// if p3 = 7 then
20439: LD_VAR 0 3
20443: PUSH
20444: LD_INT 7
20446: EQUAL
20447: IFFALSE 20457
// sRadar := true ;
20449: LD_ADDR_EXP 61
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// if p3 = 8 then
20457: LD_VAR 0 3
20461: PUSH
20462: LD_INT 8
20464: EQUAL
20465: IFFALSE 20475
// sBunker := true ;
20467: LD_ADDR_EXP 62
20471: PUSH
20472: LD_INT 1
20474: ST_TO_ADDR
// if p3 = 9 then
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 9
20482: EQUAL
20483: IFFALSE 20493
// sHack := true ;
20485: LD_ADDR_EXP 63
20489: PUSH
20490: LD_INT 1
20492: ST_TO_ADDR
// if p3 = 10 then
20493: LD_VAR 0 3
20497: PUSH
20498: LD_INT 10
20500: EQUAL
20501: IFFALSE 20511
// sFire := true ;
20503: LD_ADDR_EXP 64
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// if p3 = 11 then
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 11
20518: EQUAL
20519: IFFALSE 20529
// sRefresh := true ;
20521: LD_ADDR_EXP 65
20525: PUSH
20526: LD_INT 1
20528: ST_TO_ADDR
// if p3 = 12 then
20529: LD_VAR 0 3
20533: PUSH
20534: LD_INT 12
20536: EQUAL
20537: IFFALSE 20547
// sExp := true ;
20539: LD_ADDR_EXP 66
20543: PUSH
20544: LD_INT 1
20546: ST_TO_ADDR
// if p3 = 13 then
20547: LD_VAR 0 3
20551: PUSH
20552: LD_INT 13
20554: EQUAL
20555: IFFALSE 20565
// sDepot := true ;
20557: LD_ADDR_EXP 67
20561: PUSH
20562: LD_INT 1
20564: ST_TO_ADDR
// if p3 = 14 then
20565: LD_VAR 0 3
20569: PUSH
20570: LD_INT 14
20572: EQUAL
20573: IFFALSE 20583
// sFlag := true ;
20575: LD_ADDR_EXP 68
20579: PUSH
20580: LD_INT 1
20582: ST_TO_ADDR
// if p3 = 15 then
20583: LD_VAR 0 3
20587: PUSH
20588: LD_INT 15
20590: EQUAL
20591: IFFALSE 20601
// sKamikadze := true ;
20593: LD_ADDR_EXP 76
20597: PUSH
20598: LD_INT 1
20600: ST_TO_ADDR
// if p3 = 16 then
20601: LD_VAR 0 3
20605: PUSH
20606: LD_INT 16
20608: EQUAL
20609: IFFALSE 20619
// sTroll := true ;
20611: LD_ADDR_EXP 77
20615: PUSH
20616: LD_INT 1
20618: ST_TO_ADDR
// if p3 = 17 then
20619: LD_VAR 0 3
20623: PUSH
20624: LD_INT 17
20626: EQUAL
20627: IFFALSE 20637
// sSlow := true ;
20629: LD_ADDR_EXP 78
20633: PUSH
20634: LD_INT 1
20636: ST_TO_ADDR
// if p3 = 18 then
20637: LD_VAR 0 3
20641: PUSH
20642: LD_INT 18
20644: EQUAL
20645: IFFALSE 20655
// sLack := true ;
20647: LD_ADDR_EXP 79
20651: PUSH
20652: LD_INT 1
20654: ST_TO_ADDR
// if p3 = 19 then
20655: LD_VAR 0 3
20659: PUSH
20660: LD_INT 19
20662: EQUAL
20663: IFFALSE 20673
// sTank := true ;
20665: LD_ADDR_EXP 81
20669: PUSH
20670: LD_INT 1
20672: ST_TO_ADDR
// if p3 = 20 then
20673: LD_VAR 0 3
20677: PUSH
20678: LD_INT 20
20680: EQUAL
20681: IFFALSE 20691
// sRemote := true ;
20683: LD_ADDR_EXP 82
20687: PUSH
20688: LD_INT 1
20690: ST_TO_ADDR
// if p3 = 21 then
20691: LD_VAR 0 3
20695: PUSH
20696: LD_INT 21
20698: EQUAL
20699: IFFALSE 20709
// sPowell := true ;
20701: LD_ADDR_EXP 83
20705: PUSH
20706: LD_INT 1
20708: ST_TO_ADDR
// if p3 = 22 then
20709: LD_VAR 0 3
20713: PUSH
20714: LD_INT 22
20716: EQUAL
20717: IFFALSE 20727
// sTeleport := true ;
20719: LD_ADDR_EXP 86
20723: PUSH
20724: LD_INT 1
20726: ST_TO_ADDR
// if p3 = 23 then
20727: LD_VAR 0 3
20731: PUSH
20732: LD_INT 23
20734: EQUAL
20735: IFFALSE 20745
// sOilTower := true ;
20737: LD_ADDR_EXP 88
20741: PUSH
20742: LD_INT 1
20744: ST_TO_ADDR
// if p3 = 24 then
20745: LD_VAR 0 3
20749: PUSH
20750: LD_INT 24
20752: EQUAL
20753: IFFALSE 20763
// sShovel := true ;
20755: LD_ADDR_EXP 89
20759: PUSH
20760: LD_INT 1
20762: ST_TO_ADDR
// if p3 = 25 then
20763: LD_VAR 0 3
20767: PUSH
20768: LD_INT 25
20770: EQUAL
20771: IFFALSE 20781
// sSheik := true ;
20773: LD_ADDR_EXP 90
20777: PUSH
20778: LD_INT 1
20780: ST_TO_ADDR
// if p3 = 26 then
20781: LD_VAR 0 3
20785: PUSH
20786: LD_INT 26
20788: EQUAL
20789: IFFALSE 20799
// sEarthquake := true ;
20791: LD_ADDR_EXP 92
20795: PUSH
20796: LD_INT 1
20798: ST_TO_ADDR
// if p3 = 27 then
20799: LD_VAR 0 3
20803: PUSH
20804: LD_INT 27
20806: EQUAL
20807: IFFALSE 20817
// sAI := true ;
20809: LD_ADDR_EXP 93
20813: PUSH
20814: LD_INT 1
20816: ST_TO_ADDR
// if p3 = 28 then
20817: LD_VAR 0 3
20821: PUSH
20822: LD_INT 28
20824: EQUAL
20825: IFFALSE 20835
// sCargo := true ;
20827: LD_ADDR_EXP 96
20831: PUSH
20832: LD_INT 1
20834: ST_TO_ADDR
// if p3 = 29 then
20835: LD_VAR 0 3
20839: PUSH
20840: LD_INT 29
20842: EQUAL
20843: IFFALSE 20853
// sDLaser := true ;
20845: LD_ADDR_EXP 97
20849: PUSH
20850: LD_INT 1
20852: ST_TO_ADDR
// if p3 = 30 then
20853: LD_VAR 0 3
20857: PUSH
20858: LD_INT 30
20860: EQUAL
20861: IFFALSE 20871
// sExchange := true ;
20863: LD_ADDR_EXP 98
20867: PUSH
20868: LD_INT 1
20870: ST_TO_ADDR
// if p3 = 31 then
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 31
20878: EQUAL
20879: IFFALSE 20889
// sFac := true ;
20881: LD_ADDR_EXP 99
20885: PUSH
20886: LD_INT 1
20888: ST_TO_ADDR
// if p3 = 32 then
20889: LD_VAR 0 3
20893: PUSH
20894: LD_INT 32
20896: EQUAL
20897: IFFALSE 20907
// sPower := true ;
20899: LD_ADDR_EXP 100
20903: PUSH
20904: LD_INT 1
20906: ST_TO_ADDR
// if p3 = 33 then
20907: LD_VAR 0 3
20911: PUSH
20912: LD_INT 33
20914: EQUAL
20915: IFFALSE 20925
// sRandom := true ;
20917: LD_ADDR_EXP 101
20921: PUSH
20922: LD_INT 1
20924: ST_TO_ADDR
// if p3 = 34 then
20925: LD_VAR 0 3
20929: PUSH
20930: LD_INT 34
20932: EQUAL
20933: IFFALSE 20943
// sShield := true ;
20935: LD_ADDR_EXP 102
20939: PUSH
20940: LD_INT 1
20942: ST_TO_ADDR
// if p3 = 35 then
20943: LD_VAR 0 3
20947: PUSH
20948: LD_INT 35
20950: EQUAL
20951: IFFALSE 20961
// sTime := true ;
20953: LD_ADDR_EXP 103
20957: PUSH
20958: LD_INT 1
20960: ST_TO_ADDR
// if p3 = 36 then
20961: LD_VAR 0 3
20965: PUSH
20966: LD_INT 36
20968: EQUAL
20969: IFFALSE 20979
// sTools := true ;
20971: LD_ADDR_EXP 104
20975: PUSH
20976: LD_INT 1
20978: ST_TO_ADDR
// if p3 = 101 then
20979: LD_VAR 0 3
20983: PUSH
20984: LD_INT 101
20986: EQUAL
20987: IFFALSE 20997
// sSold := true ;
20989: LD_ADDR_EXP 69
20993: PUSH
20994: LD_INT 1
20996: ST_TO_ADDR
// if p3 = 102 then
20997: LD_VAR 0 3
21001: PUSH
21002: LD_INT 102
21004: EQUAL
21005: IFFALSE 21015
// sDiff := true ;
21007: LD_ADDR_EXP 70
21011: PUSH
21012: LD_INT 1
21014: ST_TO_ADDR
// if p3 = 103 then
21015: LD_VAR 0 3
21019: PUSH
21020: LD_INT 103
21022: EQUAL
21023: IFFALSE 21033
// sFog := true ;
21025: LD_ADDR_EXP 73
21029: PUSH
21030: LD_INT 1
21032: ST_TO_ADDR
// if p3 = 104 then
21033: LD_VAR 0 3
21037: PUSH
21038: LD_INT 104
21040: EQUAL
21041: IFFALSE 21051
// sReset := true ;
21043: LD_ADDR_EXP 74
21047: PUSH
21048: LD_INT 1
21050: ST_TO_ADDR
// if p3 = 105 then
21051: LD_VAR 0 3
21055: PUSH
21056: LD_INT 105
21058: EQUAL
21059: IFFALSE 21069
// sSun := true ;
21061: LD_ADDR_EXP 75
21065: PUSH
21066: LD_INT 1
21068: ST_TO_ADDR
// if p3 = 106 then
21069: LD_VAR 0 3
21073: PUSH
21074: LD_INT 106
21076: EQUAL
21077: IFFALSE 21087
// sTiger := true ;
21079: LD_ADDR_EXP 71
21083: PUSH
21084: LD_INT 1
21086: ST_TO_ADDR
// if p3 = 107 then
21087: LD_VAR 0 3
21091: PUSH
21092: LD_INT 107
21094: EQUAL
21095: IFFALSE 21105
// sBomb := true ;
21097: LD_ADDR_EXP 72
21101: PUSH
21102: LD_INT 1
21104: ST_TO_ADDR
// if p3 = 108 then
21105: LD_VAR 0 3
21109: PUSH
21110: LD_INT 108
21112: EQUAL
21113: IFFALSE 21123
// sWound := true ;
21115: LD_ADDR_EXP 80
21119: PUSH
21120: LD_INT 1
21122: ST_TO_ADDR
// if p3 = 109 then
21123: LD_VAR 0 3
21127: PUSH
21128: LD_INT 109
21130: EQUAL
21131: IFFALSE 21141
// sBetray := true ;
21133: LD_ADDR_EXP 84
21137: PUSH
21138: LD_INT 1
21140: ST_TO_ADDR
// if p3 = 110 then
21141: LD_VAR 0 3
21145: PUSH
21146: LD_INT 110
21148: EQUAL
21149: IFFALSE 21159
// sContamin := true ;
21151: LD_ADDR_EXP 85
21155: PUSH
21156: LD_INT 1
21158: ST_TO_ADDR
// if p3 = 111 then
21159: LD_VAR 0 3
21163: PUSH
21164: LD_INT 111
21166: EQUAL
21167: IFFALSE 21177
// sOil := true ;
21169: LD_ADDR_EXP 87
21173: PUSH
21174: LD_INT 1
21176: ST_TO_ADDR
// if p3 = 112 then
21177: LD_VAR 0 3
21181: PUSH
21182: LD_INT 112
21184: EQUAL
21185: IFFALSE 21195
// sStu := true ;
21187: LD_ADDR_EXP 91
21191: PUSH
21192: LD_INT 1
21194: ST_TO_ADDR
// if p3 = 113 then
21195: LD_VAR 0 3
21199: PUSH
21200: LD_INT 113
21202: EQUAL
21203: IFFALSE 21213
// sBazooka := true ;
21205: LD_ADDR_EXP 94
21209: PUSH
21210: LD_INT 1
21212: ST_TO_ADDR
// if p3 = 114 then
21213: LD_VAR 0 3
21217: PUSH
21218: LD_INT 114
21220: EQUAL
21221: IFFALSE 21231
// sMortar := true ;
21223: LD_ADDR_EXP 95
21227: PUSH
21228: LD_INT 1
21230: ST_TO_ADDR
// if p3 = 115 then
21231: LD_VAR 0 3
21235: PUSH
21236: LD_INT 115
21238: EQUAL
21239: IFFALSE 21249
// sRanger := true ;
21241: LD_ADDR_EXP 105
21245: PUSH
21246: LD_INT 1
21248: ST_TO_ADDR
// if p3 = 116 then
21249: LD_VAR 0 3
21253: PUSH
21254: LD_INT 116
21256: EQUAL
21257: IFFALSE 21267
// sComputer := true ;
21259: LD_ADDR_EXP 106
21263: PUSH
21264: LD_INT 1
21266: ST_TO_ADDR
// if p3 = 117 then
21267: LD_VAR 0 3
21271: PUSH
21272: LD_INT 117
21274: EQUAL
21275: IFFALSE 21285
// s30 := true ;
21277: LD_ADDR_EXP 107
21281: PUSH
21282: LD_INT 1
21284: ST_TO_ADDR
// if p3 = 118 then
21285: LD_VAR 0 3
21289: PUSH
21290: LD_INT 118
21292: EQUAL
21293: IFFALSE 21303
// s60 := true ;
21295: LD_ADDR_EXP 108
21299: PUSH
21300: LD_INT 1
21302: ST_TO_ADDR
// end ; if p2 = hack_mode then
21303: LD_VAR 0 2
21307: PUSH
21308: LD_INT 101
21310: EQUAL
21311: IFFALSE 21439
// begin case p3 of 1 :
21313: LD_VAR 0 3
21317: PUSH
21318: LD_INT 1
21320: DOUBLE
21321: EQUAL
21322: IFTRUE 21326
21324: GO 21333
21326: POP
// hHackUnlimitedResources ; 2 :
21327: CALL 33586 0 0
21331: GO 21439
21333: LD_INT 2
21335: DOUBLE
21336: EQUAL
21337: IFTRUE 21341
21339: GO 21348
21341: POP
// hHackSetLevel10 ; 3 :
21342: CALL 33719 0 0
21346: GO 21439
21348: LD_INT 3
21350: DOUBLE
21351: EQUAL
21352: IFTRUE 21356
21354: GO 21363
21356: POP
// hHackSetLevel10YourUnits ; 4 :
21357: CALL 33804 0 0
21361: GO 21439
21363: LD_INT 4
21365: DOUBLE
21366: EQUAL
21367: IFTRUE 21371
21369: GO 21378
21371: POP
// hHackInvincible ; 5 :
21372: CALL 34252 0 0
21376: GO 21439
21378: LD_INT 5
21380: DOUBLE
21381: EQUAL
21382: IFTRUE 21386
21384: GO 21393
21386: POP
// hHackInvisible ; 6 :
21387: CALL 34363 0 0
21391: GO 21439
21393: LD_INT 6
21395: DOUBLE
21396: EQUAL
21397: IFTRUE 21401
21399: GO 21408
21401: POP
// hHackChangeYourSide ; 7 :
21402: CALL 34420 0 0
21406: GO 21439
21408: LD_INT 7
21410: DOUBLE
21411: EQUAL
21412: IFTRUE 21416
21414: GO 21423
21416: POP
// hHackChangeUnitSide ; 8 :
21417: CALL 34462 0 0
21421: GO 21439
21423: LD_INT 8
21425: DOUBLE
21426: EQUAL
21427: IFTRUE 21431
21429: GO 21438
21431: POP
// hHackFog ; end ;
21432: CALL 34563 0 0
21436: GO 21439
21438: POP
// end ; if p2 = game_save_mode then
21439: LD_VAR 0 2
21443: PUSH
21444: LD_INT 102
21446: EQUAL
21447: IFFALSE 21502
// begin if p3 = 1 then
21449: LD_VAR 0 3
21453: PUSH
21454: LD_INT 1
21456: EQUAL
21457: IFFALSE 21469
// globalGameSaveCounter := p4 ;
21459: LD_ADDR_EXP 51
21463: PUSH
21464: LD_VAR 0 4
21468: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21469: LD_VAR 0 3
21473: PUSH
21474: LD_INT 2
21476: EQUAL
21477: PUSH
21478: LD_EXP 51
21482: AND
21483: IFFALSE 21502
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21485: LD_STRING setGameSaveCounter(
21487: PUSH
21488: LD_EXP 51
21492: STR
21493: PUSH
21494: LD_STRING )
21496: STR
21497: PPUSH
21498: CALL_OW 559
// end ; end ;
21502: LD_VAR 0 7
21506: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21507: LD_INT 0
21509: PPUSH
// streamModeActive := false ;
21510: LD_ADDR_EXP 52
21514: PUSH
21515: LD_INT 0
21517: ST_TO_ADDR
// normalCounter := 36 ;
21518: LD_ADDR_EXP 53
21522: PUSH
21523: LD_INT 36
21525: ST_TO_ADDR
// hardcoreCounter := 18 ;
21526: LD_ADDR_EXP 54
21530: PUSH
21531: LD_INT 18
21533: ST_TO_ADDR
// sRocket := false ;
21534: LD_ADDR_EXP 57
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
// sSpeed := false ;
21542: LD_ADDR_EXP 56
21546: PUSH
21547: LD_INT 0
21549: ST_TO_ADDR
// sEngine := false ;
21550: LD_ADDR_EXP 58
21554: PUSH
21555: LD_INT 0
21557: ST_TO_ADDR
// sSpec := false ;
21558: LD_ADDR_EXP 55
21562: PUSH
21563: LD_INT 0
21565: ST_TO_ADDR
// sLevel := false ;
21566: LD_ADDR_EXP 59
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
// sArmoury := false ;
21574: LD_ADDR_EXP 60
21578: PUSH
21579: LD_INT 0
21581: ST_TO_ADDR
// sRadar := false ;
21582: LD_ADDR_EXP 61
21586: PUSH
21587: LD_INT 0
21589: ST_TO_ADDR
// sBunker := false ;
21590: LD_ADDR_EXP 62
21594: PUSH
21595: LD_INT 0
21597: ST_TO_ADDR
// sHack := false ;
21598: LD_ADDR_EXP 63
21602: PUSH
21603: LD_INT 0
21605: ST_TO_ADDR
// sFire := false ;
21606: LD_ADDR_EXP 64
21610: PUSH
21611: LD_INT 0
21613: ST_TO_ADDR
// sRefresh := false ;
21614: LD_ADDR_EXP 65
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// sExp := false ;
21622: LD_ADDR_EXP 66
21626: PUSH
21627: LD_INT 0
21629: ST_TO_ADDR
// sDepot := false ;
21630: LD_ADDR_EXP 67
21634: PUSH
21635: LD_INT 0
21637: ST_TO_ADDR
// sFlag := false ;
21638: LD_ADDR_EXP 68
21642: PUSH
21643: LD_INT 0
21645: ST_TO_ADDR
// sKamikadze := false ;
21646: LD_ADDR_EXP 76
21650: PUSH
21651: LD_INT 0
21653: ST_TO_ADDR
// sTroll := false ;
21654: LD_ADDR_EXP 77
21658: PUSH
21659: LD_INT 0
21661: ST_TO_ADDR
// sSlow := false ;
21662: LD_ADDR_EXP 78
21666: PUSH
21667: LD_INT 0
21669: ST_TO_ADDR
// sLack := false ;
21670: LD_ADDR_EXP 79
21674: PUSH
21675: LD_INT 0
21677: ST_TO_ADDR
// sTank := false ;
21678: LD_ADDR_EXP 81
21682: PUSH
21683: LD_INT 0
21685: ST_TO_ADDR
// sRemote := false ;
21686: LD_ADDR_EXP 82
21690: PUSH
21691: LD_INT 0
21693: ST_TO_ADDR
// sPowell := false ;
21694: LD_ADDR_EXP 83
21698: PUSH
21699: LD_INT 0
21701: ST_TO_ADDR
// sTeleport := false ;
21702: LD_ADDR_EXP 86
21706: PUSH
21707: LD_INT 0
21709: ST_TO_ADDR
// sOilTower := false ;
21710: LD_ADDR_EXP 88
21714: PUSH
21715: LD_INT 0
21717: ST_TO_ADDR
// sShovel := false ;
21718: LD_ADDR_EXP 89
21722: PUSH
21723: LD_INT 0
21725: ST_TO_ADDR
// sSheik := false ;
21726: LD_ADDR_EXP 90
21730: PUSH
21731: LD_INT 0
21733: ST_TO_ADDR
// sEarthquake := false ;
21734: LD_ADDR_EXP 92
21738: PUSH
21739: LD_INT 0
21741: ST_TO_ADDR
// sAI := false ;
21742: LD_ADDR_EXP 93
21746: PUSH
21747: LD_INT 0
21749: ST_TO_ADDR
// sCargo := false ;
21750: LD_ADDR_EXP 96
21754: PUSH
21755: LD_INT 0
21757: ST_TO_ADDR
// sDLaser := false ;
21758: LD_ADDR_EXP 97
21762: PUSH
21763: LD_INT 0
21765: ST_TO_ADDR
// sExchange := false ;
21766: LD_ADDR_EXP 98
21770: PUSH
21771: LD_INT 0
21773: ST_TO_ADDR
// sFac := false ;
21774: LD_ADDR_EXP 99
21778: PUSH
21779: LD_INT 0
21781: ST_TO_ADDR
// sPower := false ;
21782: LD_ADDR_EXP 100
21786: PUSH
21787: LD_INT 0
21789: ST_TO_ADDR
// sRandom := false ;
21790: LD_ADDR_EXP 101
21794: PUSH
21795: LD_INT 0
21797: ST_TO_ADDR
// sShield := false ;
21798: LD_ADDR_EXP 102
21802: PUSH
21803: LD_INT 0
21805: ST_TO_ADDR
// sTime := false ;
21806: LD_ADDR_EXP 103
21810: PUSH
21811: LD_INT 0
21813: ST_TO_ADDR
// sTools := false ;
21814: LD_ADDR_EXP 104
21818: PUSH
21819: LD_INT 0
21821: ST_TO_ADDR
// sSold := false ;
21822: LD_ADDR_EXP 69
21826: PUSH
21827: LD_INT 0
21829: ST_TO_ADDR
// sDiff := false ;
21830: LD_ADDR_EXP 70
21834: PUSH
21835: LD_INT 0
21837: ST_TO_ADDR
// sFog := false ;
21838: LD_ADDR_EXP 73
21842: PUSH
21843: LD_INT 0
21845: ST_TO_ADDR
// sReset := false ;
21846: LD_ADDR_EXP 74
21850: PUSH
21851: LD_INT 0
21853: ST_TO_ADDR
// sSun := false ;
21854: LD_ADDR_EXP 75
21858: PUSH
21859: LD_INT 0
21861: ST_TO_ADDR
// sTiger := false ;
21862: LD_ADDR_EXP 71
21866: PUSH
21867: LD_INT 0
21869: ST_TO_ADDR
// sBomb := false ;
21870: LD_ADDR_EXP 72
21874: PUSH
21875: LD_INT 0
21877: ST_TO_ADDR
// sWound := false ;
21878: LD_ADDR_EXP 80
21882: PUSH
21883: LD_INT 0
21885: ST_TO_ADDR
// sBetray := false ;
21886: LD_ADDR_EXP 84
21890: PUSH
21891: LD_INT 0
21893: ST_TO_ADDR
// sContamin := false ;
21894: LD_ADDR_EXP 85
21898: PUSH
21899: LD_INT 0
21901: ST_TO_ADDR
// sOil := false ;
21902: LD_ADDR_EXP 87
21906: PUSH
21907: LD_INT 0
21909: ST_TO_ADDR
// sStu := false ;
21910: LD_ADDR_EXP 91
21914: PUSH
21915: LD_INT 0
21917: ST_TO_ADDR
// sBazooka := false ;
21918: LD_ADDR_EXP 94
21922: PUSH
21923: LD_INT 0
21925: ST_TO_ADDR
// sMortar := false ;
21926: LD_ADDR_EXP 95
21930: PUSH
21931: LD_INT 0
21933: ST_TO_ADDR
// sRanger := false ;
21934: LD_ADDR_EXP 105
21938: PUSH
21939: LD_INT 0
21941: ST_TO_ADDR
// sComputer := false ;
21942: LD_ADDR_EXP 106
21946: PUSH
21947: LD_INT 0
21949: ST_TO_ADDR
// s30 := false ;
21950: LD_ADDR_EXP 107
21954: PUSH
21955: LD_INT 0
21957: ST_TO_ADDR
// s60 := false ;
21958: LD_ADDR_EXP 108
21962: PUSH
21963: LD_INT 0
21965: ST_TO_ADDR
// end ;
21966: LD_VAR 0 1
21970: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21971: LD_INT 0
21973: PPUSH
21974: PPUSH
21975: PPUSH
21976: PPUSH
21977: PPUSH
21978: PPUSH
21979: PPUSH
// result := [ ] ;
21980: LD_ADDR_VAR 0 2
21984: PUSH
21985: EMPTY
21986: ST_TO_ADDR
// if campaign_id = 1 then
21987: LD_OWVAR 69
21991: PUSH
21992: LD_INT 1
21994: EQUAL
21995: IFFALSE 25161
// begin case mission_number of 1 :
21997: LD_OWVAR 70
22001: PUSH
22002: LD_INT 1
22004: DOUBLE
22005: EQUAL
22006: IFTRUE 22010
22008: GO 22086
22010: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22011: LD_ADDR_VAR 0 2
22015: PUSH
22016: LD_INT 2
22018: PUSH
22019: LD_INT 4
22021: PUSH
22022: LD_INT 11
22024: PUSH
22025: LD_INT 12
22027: PUSH
22028: LD_INT 15
22030: PUSH
22031: LD_INT 16
22033: PUSH
22034: LD_INT 22
22036: PUSH
22037: LD_INT 23
22039: PUSH
22040: LD_INT 26
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 101
22056: PUSH
22057: LD_INT 102
22059: PUSH
22060: LD_INT 106
22062: PUSH
22063: LD_INT 116
22065: PUSH
22066: LD_INT 117
22068: PUSH
22069: LD_INT 118
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: ST_TO_ADDR
22084: GO 25159
22086: LD_INT 2
22088: DOUBLE
22089: EQUAL
22090: IFTRUE 22094
22092: GO 22178
22094: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22095: LD_ADDR_VAR 0 2
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: LD_INT 4
22105: PUSH
22106: LD_INT 11
22108: PUSH
22109: LD_INT 12
22111: PUSH
22112: LD_INT 15
22114: PUSH
22115: LD_INT 16
22117: PUSH
22118: LD_INT 22
22120: PUSH
22121: LD_INT 23
22123: PUSH
22124: LD_INT 26
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 101
22140: PUSH
22141: LD_INT 102
22143: PUSH
22144: LD_INT 105
22146: PUSH
22147: LD_INT 106
22149: PUSH
22150: LD_INT 108
22152: PUSH
22153: LD_INT 116
22155: PUSH
22156: LD_INT 117
22158: PUSH
22159: LD_INT 118
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: ST_TO_ADDR
22176: GO 25159
22178: LD_INT 3
22180: DOUBLE
22181: EQUAL
22182: IFTRUE 22186
22184: GO 22274
22186: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22187: LD_ADDR_VAR 0 2
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: LD_INT 4
22197: PUSH
22198: LD_INT 5
22200: PUSH
22201: LD_INT 11
22203: PUSH
22204: LD_INT 12
22206: PUSH
22207: LD_INT 15
22209: PUSH
22210: LD_INT 16
22212: PUSH
22213: LD_INT 22
22215: PUSH
22216: LD_INT 26
22218: PUSH
22219: LD_INT 36
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 101
22236: PUSH
22237: LD_INT 102
22239: PUSH
22240: LD_INT 105
22242: PUSH
22243: LD_INT 106
22245: PUSH
22246: LD_INT 108
22248: PUSH
22249: LD_INT 116
22251: PUSH
22252: LD_INT 117
22254: PUSH
22255: LD_INT 118
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: ST_TO_ADDR
22272: GO 25159
22274: LD_INT 4
22276: DOUBLE
22277: EQUAL
22278: IFTRUE 22282
22280: GO 22378
22282: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22283: LD_ADDR_VAR 0 2
22287: PUSH
22288: LD_INT 2
22290: PUSH
22291: LD_INT 4
22293: PUSH
22294: LD_INT 5
22296: PUSH
22297: LD_INT 8
22299: PUSH
22300: LD_INT 11
22302: PUSH
22303: LD_INT 12
22305: PUSH
22306: LD_INT 15
22308: PUSH
22309: LD_INT 16
22311: PUSH
22312: LD_INT 22
22314: PUSH
22315: LD_INT 23
22317: PUSH
22318: LD_INT 26
22320: PUSH
22321: LD_INT 36
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 101
22340: PUSH
22341: LD_INT 102
22343: PUSH
22344: LD_INT 105
22346: PUSH
22347: LD_INT 106
22349: PUSH
22350: LD_INT 108
22352: PUSH
22353: LD_INT 116
22355: PUSH
22356: LD_INT 117
22358: PUSH
22359: LD_INT 118
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: ST_TO_ADDR
22376: GO 25159
22378: LD_INT 5
22380: DOUBLE
22381: EQUAL
22382: IFTRUE 22386
22384: GO 22498
22386: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22387: LD_ADDR_VAR 0 2
22391: PUSH
22392: LD_INT 2
22394: PUSH
22395: LD_INT 4
22397: PUSH
22398: LD_INT 5
22400: PUSH
22401: LD_INT 6
22403: PUSH
22404: LD_INT 8
22406: PUSH
22407: LD_INT 11
22409: PUSH
22410: LD_INT 12
22412: PUSH
22413: LD_INT 15
22415: PUSH
22416: LD_INT 16
22418: PUSH
22419: LD_INT 22
22421: PUSH
22422: LD_INT 23
22424: PUSH
22425: LD_INT 25
22427: PUSH
22428: LD_INT 26
22430: PUSH
22431: LD_INT 36
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 101
22452: PUSH
22453: LD_INT 102
22455: PUSH
22456: LD_INT 105
22458: PUSH
22459: LD_INT 106
22461: PUSH
22462: LD_INT 108
22464: PUSH
22465: LD_INT 109
22467: PUSH
22468: LD_INT 112
22470: PUSH
22471: LD_INT 116
22473: PUSH
22474: LD_INT 117
22476: PUSH
22477: LD_INT 118
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: ST_TO_ADDR
22496: GO 25159
22498: LD_INT 6
22500: DOUBLE
22501: EQUAL
22502: IFTRUE 22506
22504: GO 22638
22506: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22507: LD_ADDR_VAR 0 2
22511: PUSH
22512: LD_INT 2
22514: PUSH
22515: LD_INT 4
22517: PUSH
22518: LD_INT 5
22520: PUSH
22521: LD_INT 6
22523: PUSH
22524: LD_INT 8
22526: PUSH
22527: LD_INT 11
22529: PUSH
22530: LD_INT 12
22532: PUSH
22533: LD_INT 15
22535: PUSH
22536: LD_INT 16
22538: PUSH
22539: LD_INT 20
22541: PUSH
22542: LD_INT 21
22544: PUSH
22545: LD_INT 22
22547: PUSH
22548: LD_INT 23
22550: PUSH
22551: LD_INT 25
22553: PUSH
22554: LD_INT 26
22556: PUSH
22557: LD_INT 30
22559: PUSH
22560: LD_INT 31
22562: PUSH
22563: LD_INT 32
22565: PUSH
22566: LD_INT 36
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 101
22592: PUSH
22593: LD_INT 102
22595: PUSH
22596: LD_INT 105
22598: PUSH
22599: LD_INT 106
22601: PUSH
22602: LD_INT 108
22604: PUSH
22605: LD_INT 109
22607: PUSH
22608: LD_INT 112
22610: PUSH
22611: LD_INT 116
22613: PUSH
22614: LD_INT 117
22616: PUSH
22617: LD_INT 118
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: ST_TO_ADDR
22636: GO 25159
22638: LD_INT 7
22640: DOUBLE
22641: EQUAL
22642: IFTRUE 22646
22644: GO 22758
22646: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22647: LD_ADDR_VAR 0 2
22651: PUSH
22652: LD_INT 2
22654: PUSH
22655: LD_INT 4
22657: PUSH
22658: LD_INT 5
22660: PUSH
22661: LD_INT 7
22663: PUSH
22664: LD_INT 11
22666: PUSH
22667: LD_INT 12
22669: PUSH
22670: LD_INT 15
22672: PUSH
22673: LD_INT 16
22675: PUSH
22676: LD_INT 20
22678: PUSH
22679: LD_INT 21
22681: PUSH
22682: LD_INT 22
22684: PUSH
22685: LD_INT 23
22687: PUSH
22688: LD_INT 25
22690: PUSH
22691: LD_INT 26
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 101
22712: PUSH
22713: LD_INT 102
22715: PUSH
22716: LD_INT 103
22718: PUSH
22719: LD_INT 105
22721: PUSH
22722: LD_INT 106
22724: PUSH
22725: LD_INT 108
22727: PUSH
22728: LD_INT 112
22730: PUSH
22731: LD_INT 116
22733: PUSH
22734: LD_INT 117
22736: PUSH
22737: LD_INT 118
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: ST_TO_ADDR
22756: GO 25159
22758: LD_INT 8
22760: DOUBLE
22761: EQUAL
22762: IFTRUE 22766
22764: GO 22906
22766: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22767: LD_ADDR_VAR 0 2
22771: PUSH
22772: LD_INT 2
22774: PUSH
22775: LD_INT 4
22777: PUSH
22778: LD_INT 5
22780: PUSH
22781: LD_INT 6
22783: PUSH
22784: LD_INT 7
22786: PUSH
22787: LD_INT 8
22789: PUSH
22790: LD_INT 11
22792: PUSH
22793: LD_INT 12
22795: PUSH
22796: LD_INT 15
22798: PUSH
22799: LD_INT 16
22801: PUSH
22802: LD_INT 20
22804: PUSH
22805: LD_INT 21
22807: PUSH
22808: LD_INT 22
22810: PUSH
22811: LD_INT 23
22813: PUSH
22814: LD_INT 25
22816: PUSH
22817: LD_INT 26
22819: PUSH
22820: LD_INT 30
22822: PUSH
22823: LD_INT 31
22825: PUSH
22826: LD_INT 32
22828: PUSH
22829: LD_INT 36
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 101
22856: PUSH
22857: LD_INT 102
22859: PUSH
22860: LD_INT 103
22862: PUSH
22863: LD_INT 105
22865: PUSH
22866: LD_INT 106
22868: PUSH
22869: LD_INT 108
22871: PUSH
22872: LD_INT 109
22874: PUSH
22875: LD_INT 112
22877: PUSH
22878: LD_INT 116
22880: PUSH
22881: LD_INT 117
22883: PUSH
22884: LD_INT 118
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: ST_TO_ADDR
22904: GO 25159
22906: LD_INT 9
22908: DOUBLE
22909: EQUAL
22910: IFTRUE 22914
22912: GO 23062
22914: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22915: LD_ADDR_VAR 0 2
22919: PUSH
22920: LD_INT 2
22922: PUSH
22923: LD_INT 4
22925: PUSH
22926: LD_INT 5
22928: PUSH
22929: LD_INT 6
22931: PUSH
22932: LD_INT 7
22934: PUSH
22935: LD_INT 8
22937: PUSH
22938: LD_INT 11
22940: PUSH
22941: LD_INT 12
22943: PUSH
22944: LD_INT 15
22946: PUSH
22947: LD_INT 16
22949: PUSH
22950: LD_INT 20
22952: PUSH
22953: LD_INT 21
22955: PUSH
22956: LD_INT 22
22958: PUSH
22959: LD_INT 23
22961: PUSH
22962: LD_INT 25
22964: PUSH
22965: LD_INT 26
22967: PUSH
22968: LD_INT 28
22970: PUSH
22971: LD_INT 30
22973: PUSH
22974: LD_INT 31
22976: PUSH
22977: LD_INT 32
22979: PUSH
22980: LD_INT 36
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 101
23008: PUSH
23009: LD_INT 102
23011: PUSH
23012: LD_INT 103
23014: PUSH
23015: LD_INT 105
23017: PUSH
23018: LD_INT 106
23020: PUSH
23021: LD_INT 108
23023: PUSH
23024: LD_INT 109
23026: PUSH
23027: LD_INT 112
23029: PUSH
23030: LD_INT 114
23032: PUSH
23033: LD_INT 116
23035: PUSH
23036: LD_INT 117
23038: PUSH
23039: LD_INT 118
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: ST_TO_ADDR
23060: GO 25159
23062: LD_INT 10
23064: DOUBLE
23065: EQUAL
23066: IFTRUE 23070
23068: GO 23266
23070: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23071: LD_ADDR_VAR 0 2
23075: PUSH
23076: LD_INT 2
23078: PUSH
23079: LD_INT 4
23081: PUSH
23082: LD_INT 5
23084: PUSH
23085: LD_INT 6
23087: PUSH
23088: LD_INT 7
23090: PUSH
23091: LD_INT 8
23093: PUSH
23094: LD_INT 9
23096: PUSH
23097: LD_INT 10
23099: PUSH
23100: LD_INT 11
23102: PUSH
23103: LD_INT 12
23105: PUSH
23106: LD_INT 13
23108: PUSH
23109: LD_INT 14
23111: PUSH
23112: LD_INT 15
23114: PUSH
23115: LD_INT 16
23117: PUSH
23118: LD_INT 17
23120: PUSH
23121: LD_INT 18
23123: PUSH
23124: LD_INT 19
23126: PUSH
23127: LD_INT 20
23129: PUSH
23130: LD_INT 21
23132: PUSH
23133: LD_INT 22
23135: PUSH
23136: LD_INT 23
23138: PUSH
23139: LD_INT 24
23141: PUSH
23142: LD_INT 25
23144: PUSH
23145: LD_INT 26
23147: PUSH
23148: LD_INT 28
23150: PUSH
23151: LD_INT 30
23153: PUSH
23154: LD_INT 31
23156: PUSH
23157: LD_INT 32
23159: PUSH
23160: LD_INT 36
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 101
23196: PUSH
23197: LD_INT 102
23199: PUSH
23200: LD_INT 103
23202: PUSH
23203: LD_INT 104
23205: PUSH
23206: LD_INT 105
23208: PUSH
23209: LD_INT 106
23211: PUSH
23212: LD_INT 107
23214: PUSH
23215: LD_INT 108
23217: PUSH
23218: LD_INT 109
23220: PUSH
23221: LD_INT 110
23223: PUSH
23224: LD_INT 111
23226: PUSH
23227: LD_INT 112
23229: PUSH
23230: LD_INT 114
23232: PUSH
23233: LD_INT 116
23235: PUSH
23236: LD_INT 117
23238: PUSH
23239: LD_INT 118
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: ST_TO_ADDR
23264: GO 25159
23266: LD_INT 11
23268: DOUBLE
23269: EQUAL
23270: IFTRUE 23274
23272: GO 23478
23274: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23275: LD_ADDR_VAR 0 2
23279: PUSH
23280: LD_INT 2
23282: PUSH
23283: LD_INT 3
23285: PUSH
23286: LD_INT 4
23288: PUSH
23289: LD_INT 5
23291: PUSH
23292: LD_INT 6
23294: PUSH
23295: LD_INT 7
23297: PUSH
23298: LD_INT 8
23300: PUSH
23301: LD_INT 9
23303: PUSH
23304: LD_INT 10
23306: PUSH
23307: LD_INT 11
23309: PUSH
23310: LD_INT 12
23312: PUSH
23313: LD_INT 13
23315: PUSH
23316: LD_INT 14
23318: PUSH
23319: LD_INT 15
23321: PUSH
23322: LD_INT 16
23324: PUSH
23325: LD_INT 17
23327: PUSH
23328: LD_INT 18
23330: PUSH
23331: LD_INT 19
23333: PUSH
23334: LD_INT 20
23336: PUSH
23337: LD_INT 21
23339: PUSH
23340: LD_INT 22
23342: PUSH
23343: LD_INT 23
23345: PUSH
23346: LD_INT 24
23348: PUSH
23349: LD_INT 25
23351: PUSH
23352: LD_INT 26
23354: PUSH
23355: LD_INT 28
23357: PUSH
23358: LD_INT 30
23360: PUSH
23361: LD_INT 31
23363: PUSH
23364: LD_INT 32
23366: PUSH
23367: LD_INT 34
23369: PUSH
23370: LD_INT 36
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 101
23408: PUSH
23409: LD_INT 102
23411: PUSH
23412: LD_INT 103
23414: PUSH
23415: LD_INT 104
23417: PUSH
23418: LD_INT 105
23420: PUSH
23421: LD_INT 106
23423: PUSH
23424: LD_INT 107
23426: PUSH
23427: LD_INT 108
23429: PUSH
23430: LD_INT 109
23432: PUSH
23433: LD_INT 110
23435: PUSH
23436: LD_INT 111
23438: PUSH
23439: LD_INT 112
23441: PUSH
23442: LD_INT 114
23444: PUSH
23445: LD_INT 116
23447: PUSH
23448: LD_INT 117
23450: PUSH
23451: LD_INT 118
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: ST_TO_ADDR
23476: GO 25159
23478: LD_INT 12
23480: DOUBLE
23481: EQUAL
23482: IFTRUE 23486
23484: GO 23706
23486: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23487: LD_ADDR_VAR 0 2
23491: PUSH
23492: LD_INT 1
23494: PUSH
23495: LD_INT 2
23497: PUSH
23498: LD_INT 3
23500: PUSH
23501: LD_INT 4
23503: PUSH
23504: LD_INT 5
23506: PUSH
23507: LD_INT 6
23509: PUSH
23510: LD_INT 7
23512: PUSH
23513: LD_INT 8
23515: PUSH
23516: LD_INT 9
23518: PUSH
23519: LD_INT 10
23521: PUSH
23522: LD_INT 11
23524: PUSH
23525: LD_INT 12
23527: PUSH
23528: LD_INT 13
23530: PUSH
23531: LD_INT 14
23533: PUSH
23534: LD_INT 15
23536: PUSH
23537: LD_INT 16
23539: PUSH
23540: LD_INT 17
23542: PUSH
23543: LD_INT 18
23545: PUSH
23546: LD_INT 19
23548: PUSH
23549: LD_INT 20
23551: PUSH
23552: LD_INT 21
23554: PUSH
23555: LD_INT 22
23557: PUSH
23558: LD_INT 23
23560: PUSH
23561: LD_INT 24
23563: PUSH
23564: LD_INT 25
23566: PUSH
23567: LD_INT 26
23569: PUSH
23570: LD_INT 27
23572: PUSH
23573: LD_INT 28
23575: PUSH
23576: LD_INT 30
23578: PUSH
23579: LD_INT 31
23581: PUSH
23582: LD_INT 32
23584: PUSH
23585: LD_INT 33
23587: PUSH
23588: LD_INT 34
23590: PUSH
23591: LD_INT 36
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 101
23632: PUSH
23633: LD_INT 102
23635: PUSH
23636: LD_INT 103
23638: PUSH
23639: LD_INT 104
23641: PUSH
23642: LD_INT 105
23644: PUSH
23645: LD_INT 106
23647: PUSH
23648: LD_INT 107
23650: PUSH
23651: LD_INT 108
23653: PUSH
23654: LD_INT 109
23656: PUSH
23657: LD_INT 110
23659: PUSH
23660: LD_INT 111
23662: PUSH
23663: LD_INT 112
23665: PUSH
23666: LD_INT 113
23668: PUSH
23669: LD_INT 114
23671: PUSH
23672: LD_INT 116
23674: PUSH
23675: LD_INT 117
23677: PUSH
23678: LD_INT 118
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: ST_TO_ADDR
23704: GO 25159
23706: LD_INT 13
23708: DOUBLE
23709: EQUAL
23710: IFTRUE 23714
23712: GO 23922
23714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23715: LD_ADDR_VAR 0 2
23719: PUSH
23720: LD_INT 1
23722: PUSH
23723: LD_INT 2
23725: PUSH
23726: LD_INT 3
23728: PUSH
23729: LD_INT 4
23731: PUSH
23732: LD_INT 5
23734: PUSH
23735: LD_INT 8
23737: PUSH
23738: LD_INT 9
23740: PUSH
23741: LD_INT 10
23743: PUSH
23744: LD_INT 11
23746: PUSH
23747: LD_INT 12
23749: PUSH
23750: LD_INT 14
23752: PUSH
23753: LD_INT 15
23755: PUSH
23756: LD_INT 16
23758: PUSH
23759: LD_INT 17
23761: PUSH
23762: LD_INT 18
23764: PUSH
23765: LD_INT 19
23767: PUSH
23768: LD_INT 20
23770: PUSH
23771: LD_INT 21
23773: PUSH
23774: LD_INT 22
23776: PUSH
23777: LD_INT 23
23779: PUSH
23780: LD_INT 24
23782: PUSH
23783: LD_INT 25
23785: PUSH
23786: LD_INT 26
23788: PUSH
23789: LD_INT 27
23791: PUSH
23792: LD_INT 28
23794: PUSH
23795: LD_INT 30
23797: PUSH
23798: LD_INT 31
23800: PUSH
23801: LD_INT 32
23803: PUSH
23804: LD_INT 33
23806: PUSH
23807: LD_INT 34
23809: PUSH
23810: LD_INT 36
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 101
23848: PUSH
23849: LD_INT 102
23851: PUSH
23852: LD_INT 103
23854: PUSH
23855: LD_INT 104
23857: PUSH
23858: LD_INT 105
23860: PUSH
23861: LD_INT 106
23863: PUSH
23864: LD_INT 107
23866: PUSH
23867: LD_INT 108
23869: PUSH
23870: LD_INT 109
23872: PUSH
23873: LD_INT 110
23875: PUSH
23876: LD_INT 111
23878: PUSH
23879: LD_INT 112
23881: PUSH
23882: LD_INT 113
23884: PUSH
23885: LD_INT 114
23887: PUSH
23888: LD_INT 116
23890: PUSH
23891: LD_INT 117
23893: PUSH
23894: LD_INT 118
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: ST_TO_ADDR
23920: GO 25159
23922: LD_INT 14
23924: DOUBLE
23925: EQUAL
23926: IFTRUE 23930
23928: GO 24154
23930: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23931: LD_ADDR_VAR 0 2
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: LD_INT 2
23941: PUSH
23942: LD_INT 3
23944: PUSH
23945: LD_INT 4
23947: PUSH
23948: LD_INT 5
23950: PUSH
23951: LD_INT 6
23953: PUSH
23954: LD_INT 7
23956: PUSH
23957: LD_INT 8
23959: PUSH
23960: LD_INT 9
23962: PUSH
23963: LD_INT 10
23965: PUSH
23966: LD_INT 11
23968: PUSH
23969: LD_INT 12
23971: PUSH
23972: LD_INT 13
23974: PUSH
23975: LD_INT 14
23977: PUSH
23978: LD_INT 15
23980: PUSH
23981: LD_INT 16
23983: PUSH
23984: LD_INT 17
23986: PUSH
23987: LD_INT 18
23989: PUSH
23990: LD_INT 19
23992: PUSH
23993: LD_INT 20
23995: PUSH
23996: LD_INT 21
23998: PUSH
23999: LD_INT 22
24001: PUSH
24002: LD_INT 23
24004: PUSH
24005: LD_INT 24
24007: PUSH
24008: LD_INT 25
24010: PUSH
24011: LD_INT 26
24013: PUSH
24014: LD_INT 27
24016: PUSH
24017: LD_INT 28
24019: PUSH
24020: LD_INT 29
24022: PUSH
24023: LD_INT 30
24025: PUSH
24026: LD_INT 31
24028: PUSH
24029: LD_INT 32
24031: PUSH
24032: LD_INT 33
24034: PUSH
24035: LD_INT 34
24037: PUSH
24038: LD_INT 36
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 101
24080: PUSH
24081: LD_INT 102
24083: PUSH
24084: LD_INT 103
24086: PUSH
24087: LD_INT 104
24089: PUSH
24090: LD_INT 105
24092: PUSH
24093: LD_INT 106
24095: PUSH
24096: LD_INT 107
24098: PUSH
24099: LD_INT 108
24101: PUSH
24102: LD_INT 109
24104: PUSH
24105: LD_INT 110
24107: PUSH
24108: LD_INT 111
24110: PUSH
24111: LD_INT 112
24113: PUSH
24114: LD_INT 113
24116: PUSH
24117: LD_INT 114
24119: PUSH
24120: LD_INT 116
24122: PUSH
24123: LD_INT 117
24125: PUSH
24126: LD_INT 118
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: ST_TO_ADDR
24152: GO 25159
24154: LD_INT 15
24156: DOUBLE
24157: EQUAL
24158: IFTRUE 24162
24160: GO 24386
24162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24163: LD_ADDR_VAR 0 2
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: LD_INT 2
24173: PUSH
24174: LD_INT 3
24176: PUSH
24177: LD_INT 4
24179: PUSH
24180: LD_INT 5
24182: PUSH
24183: LD_INT 6
24185: PUSH
24186: LD_INT 7
24188: PUSH
24189: LD_INT 8
24191: PUSH
24192: LD_INT 9
24194: PUSH
24195: LD_INT 10
24197: PUSH
24198: LD_INT 11
24200: PUSH
24201: LD_INT 12
24203: PUSH
24204: LD_INT 13
24206: PUSH
24207: LD_INT 14
24209: PUSH
24210: LD_INT 15
24212: PUSH
24213: LD_INT 16
24215: PUSH
24216: LD_INT 17
24218: PUSH
24219: LD_INT 18
24221: PUSH
24222: LD_INT 19
24224: PUSH
24225: LD_INT 20
24227: PUSH
24228: LD_INT 21
24230: PUSH
24231: LD_INT 22
24233: PUSH
24234: LD_INT 23
24236: PUSH
24237: LD_INT 24
24239: PUSH
24240: LD_INT 25
24242: PUSH
24243: LD_INT 26
24245: PUSH
24246: LD_INT 27
24248: PUSH
24249: LD_INT 28
24251: PUSH
24252: LD_INT 29
24254: PUSH
24255: LD_INT 30
24257: PUSH
24258: LD_INT 31
24260: PUSH
24261: LD_INT 32
24263: PUSH
24264: LD_INT 33
24266: PUSH
24267: LD_INT 34
24269: PUSH
24270: LD_INT 36
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 101
24312: PUSH
24313: LD_INT 102
24315: PUSH
24316: LD_INT 103
24318: PUSH
24319: LD_INT 104
24321: PUSH
24322: LD_INT 105
24324: PUSH
24325: LD_INT 106
24327: PUSH
24328: LD_INT 107
24330: PUSH
24331: LD_INT 108
24333: PUSH
24334: LD_INT 109
24336: PUSH
24337: LD_INT 110
24339: PUSH
24340: LD_INT 111
24342: PUSH
24343: LD_INT 112
24345: PUSH
24346: LD_INT 113
24348: PUSH
24349: LD_INT 114
24351: PUSH
24352: LD_INT 116
24354: PUSH
24355: LD_INT 117
24357: PUSH
24358: LD_INT 118
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: ST_TO_ADDR
24384: GO 25159
24386: LD_INT 16
24388: DOUBLE
24389: EQUAL
24390: IFTRUE 24394
24392: GO 24530
24394: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24395: LD_ADDR_VAR 0 2
24399: PUSH
24400: LD_INT 2
24402: PUSH
24403: LD_INT 4
24405: PUSH
24406: LD_INT 5
24408: PUSH
24409: LD_INT 7
24411: PUSH
24412: LD_INT 11
24414: PUSH
24415: LD_INT 12
24417: PUSH
24418: LD_INT 15
24420: PUSH
24421: LD_INT 16
24423: PUSH
24424: LD_INT 20
24426: PUSH
24427: LD_INT 21
24429: PUSH
24430: LD_INT 22
24432: PUSH
24433: LD_INT 23
24435: PUSH
24436: LD_INT 25
24438: PUSH
24439: LD_INT 26
24441: PUSH
24442: LD_INT 30
24444: PUSH
24445: LD_INT 31
24447: PUSH
24448: LD_INT 32
24450: PUSH
24451: LD_INT 33
24453: PUSH
24454: LD_INT 34
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 101
24480: PUSH
24481: LD_INT 102
24483: PUSH
24484: LD_INT 103
24486: PUSH
24487: LD_INT 106
24489: PUSH
24490: LD_INT 108
24492: PUSH
24493: LD_INT 112
24495: PUSH
24496: LD_INT 113
24498: PUSH
24499: LD_INT 114
24501: PUSH
24502: LD_INT 116
24504: PUSH
24505: LD_INT 117
24507: PUSH
24508: LD_INT 118
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: ST_TO_ADDR
24528: GO 25159
24530: LD_INT 17
24532: DOUBLE
24533: EQUAL
24534: IFTRUE 24538
24536: GO 24762
24538: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24539: LD_ADDR_VAR 0 2
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: LD_INT 2
24549: PUSH
24550: LD_INT 3
24552: PUSH
24553: LD_INT 4
24555: PUSH
24556: LD_INT 5
24558: PUSH
24559: LD_INT 6
24561: PUSH
24562: LD_INT 7
24564: PUSH
24565: LD_INT 8
24567: PUSH
24568: LD_INT 9
24570: PUSH
24571: LD_INT 10
24573: PUSH
24574: LD_INT 11
24576: PUSH
24577: LD_INT 12
24579: PUSH
24580: LD_INT 13
24582: PUSH
24583: LD_INT 14
24585: PUSH
24586: LD_INT 15
24588: PUSH
24589: LD_INT 16
24591: PUSH
24592: LD_INT 17
24594: PUSH
24595: LD_INT 18
24597: PUSH
24598: LD_INT 19
24600: PUSH
24601: LD_INT 20
24603: PUSH
24604: LD_INT 21
24606: PUSH
24607: LD_INT 22
24609: PUSH
24610: LD_INT 23
24612: PUSH
24613: LD_INT 24
24615: PUSH
24616: LD_INT 25
24618: PUSH
24619: LD_INT 26
24621: PUSH
24622: LD_INT 27
24624: PUSH
24625: LD_INT 28
24627: PUSH
24628: LD_INT 29
24630: PUSH
24631: LD_INT 30
24633: PUSH
24634: LD_INT 31
24636: PUSH
24637: LD_INT 32
24639: PUSH
24640: LD_INT 33
24642: PUSH
24643: LD_INT 34
24645: PUSH
24646: LD_INT 36
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 101
24688: PUSH
24689: LD_INT 102
24691: PUSH
24692: LD_INT 103
24694: PUSH
24695: LD_INT 104
24697: PUSH
24698: LD_INT 105
24700: PUSH
24701: LD_INT 106
24703: PUSH
24704: LD_INT 107
24706: PUSH
24707: LD_INT 108
24709: PUSH
24710: LD_INT 109
24712: PUSH
24713: LD_INT 110
24715: PUSH
24716: LD_INT 111
24718: PUSH
24719: LD_INT 112
24721: PUSH
24722: LD_INT 113
24724: PUSH
24725: LD_INT 114
24727: PUSH
24728: LD_INT 116
24730: PUSH
24731: LD_INT 117
24733: PUSH
24734: LD_INT 118
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: ST_TO_ADDR
24760: GO 25159
24762: LD_INT 18
24764: DOUBLE
24765: EQUAL
24766: IFTRUE 24770
24768: GO 24918
24770: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24771: LD_ADDR_VAR 0 2
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: LD_INT 4
24781: PUSH
24782: LD_INT 5
24784: PUSH
24785: LD_INT 7
24787: PUSH
24788: LD_INT 11
24790: PUSH
24791: LD_INT 12
24793: PUSH
24794: LD_INT 15
24796: PUSH
24797: LD_INT 16
24799: PUSH
24800: LD_INT 20
24802: PUSH
24803: LD_INT 21
24805: PUSH
24806: LD_INT 22
24808: PUSH
24809: LD_INT 23
24811: PUSH
24812: LD_INT 25
24814: PUSH
24815: LD_INT 26
24817: PUSH
24818: LD_INT 30
24820: PUSH
24821: LD_INT 31
24823: PUSH
24824: LD_INT 32
24826: PUSH
24827: LD_INT 33
24829: PUSH
24830: LD_INT 34
24832: PUSH
24833: LD_INT 35
24835: PUSH
24836: LD_INT 36
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 101
24864: PUSH
24865: LD_INT 102
24867: PUSH
24868: LD_INT 103
24870: PUSH
24871: LD_INT 106
24873: PUSH
24874: LD_INT 108
24876: PUSH
24877: LD_INT 112
24879: PUSH
24880: LD_INT 113
24882: PUSH
24883: LD_INT 114
24885: PUSH
24886: LD_INT 115
24888: PUSH
24889: LD_INT 116
24891: PUSH
24892: LD_INT 117
24894: PUSH
24895: LD_INT 118
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: ST_TO_ADDR
24916: GO 25159
24918: LD_INT 19
24920: DOUBLE
24921: EQUAL
24922: IFTRUE 24926
24924: GO 25158
24926: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24927: LD_ADDR_VAR 0 2
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: LD_INT 2
24937: PUSH
24938: LD_INT 3
24940: PUSH
24941: LD_INT 4
24943: PUSH
24944: LD_INT 5
24946: PUSH
24947: LD_INT 6
24949: PUSH
24950: LD_INT 7
24952: PUSH
24953: LD_INT 8
24955: PUSH
24956: LD_INT 9
24958: PUSH
24959: LD_INT 10
24961: PUSH
24962: LD_INT 11
24964: PUSH
24965: LD_INT 12
24967: PUSH
24968: LD_INT 13
24970: PUSH
24971: LD_INT 14
24973: PUSH
24974: LD_INT 15
24976: PUSH
24977: LD_INT 16
24979: PUSH
24980: LD_INT 17
24982: PUSH
24983: LD_INT 18
24985: PUSH
24986: LD_INT 19
24988: PUSH
24989: LD_INT 20
24991: PUSH
24992: LD_INT 21
24994: PUSH
24995: LD_INT 22
24997: PUSH
24998: LD_INT 23
25000: PUSH
25001: LD_INT 24
25003: PUSH
25004: LD_INT 25
25006: PUSH
25007: LD_INT 26
25009: PUSH
25010: LD_INT 27
25012: PUSH
25013: LD_INT 28
25015: PUSH
25016: LD_INT 29
25018: PUSH
25019: LD_INT 30
25021: PUSH
25022: LD_INT 31
25024: PUSH
25025: LD_INT 32
25027: PUSH
25028: LD_INT 33
25030: PUSH
25031: LD_INT 34
25033: PUSH
25034: LD_INT 35
25036: PUSH
25037: LD_INT 36
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 101
25080: PUSH
25081: LD_INT 102
25083: PUSH
25084: LD_INT 103
25086: PUSH
25087: LD_INT 104
25089: PUSH
25090: LD_INT 105
25092: PUSH
25093: LD_INT 106
25095: PUSH
25096: LD_INT 107
25098: PUSH
25099: LD_INT 108
25101: PUSH
25102: LD_INT 109
25104: PUSH
25105: LD_INT 110
25107: PUSH
25108: LD_INT 111
25110: PUSH
25111: LD_INT 112
25113: PUSH
25114: LD_INT 113
25116: PUSH
25117: LD_INT 114
25119: PUSH
25120: LD_INT 115
25122: PUSH
25123: LD_INT 116
25125: PUSH
25126: LD_INT 117
25128: PUSH
25129: LD_INT 118
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: ST_TO_ADDR
25156: GO 25159
25158: POP
// end else
25159: GO 25390
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25161: LD_ADDR_VAR 0 2
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: LD_INT 2
25171: PUSH
25172: LD_INT 3
25174: PUSH
25175: LD_INT 4
25177: PUSH
25178: LD_INT 5
25180: PUSH
25181: LD_INT 6
25183: PUSH
25184: LD_INT 7
25186: PUSH
25187: LD_INT 8
25189: PUSH
25190: LD_INT 9
25192: PUSH
25193: LD_INT 10
25195: PUSH
25196: LD_INT 11
25198: PUSH
25199: LD_INT 12
25201: PUSH
25202: LD_INT 13
25204: PUSH
25205: LD_INT 14
25207: PUSH
25208: LD_INT 15
25210: PUSH
25211: LD_INT 16
25213: PUSH
25214: LD_INT 17
25216: PUSH
25217: LD_INT 18
25219: PUSH
25220: LD_INT 19
25222: PUSH
25223: LD_INT 20
25225: PUSH
25226: LD_INT 21
25228: PUSH
25229: LD_INT 22
25231: PUSH
25232: LD_INT 23
25234: PUSH
25235: LD_INT 24
25237: PUSH
25238: LD_INT 25
25240: PUSH
25241: LD_INT 26
25243: PUSH
25244: LD_INT 27
25246: PUSH
25247: LD_INT 28
25249: PUSH
25250: LD_INT 29
25252: PUSH
25253: LD_INT 30
25255: PUSH
25256: LD_INT 31
25258: PUSH
25259: LD_INT 32
25261: PUSH
25262: LD_INT 33
25264: PUSH
25265: LD_INT 34
25267: PUSH
25268: LD_INT 35
25270: PUSH
25271: LD_INT 36
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 101
25314: PUSH
25315: LD_INT 102
25317: PUSH
25318: LD_INT 103
25320: PUSH
25321: LD_INT 104
25323: PUSH
25324: LD_INT 105
25326: PUSH
25327: LD_INT 106
25329: PUSH
25330: LD_INT 107
25332: PUSH
25333: LD_INT 108
25335: PUSH
25336: LD_INT 109
25338: PUSH
25339: LD_INT 110
25341: PUSH
25342: LD_INT 111
25344: PUSH
25345: LD_INT 112
25347: PUSH
25348: LD_INT 113
25350: PUSH
25351: LD_INT 114
25353: PUSH
25354: LD_INT 115
25356: PUSH
25357: LD_INT 116
25359: PUSH
25360: LD_INT 117
25362: PUSH
25363: LD_INT 118
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: ST_TO_ADDR
// if result then
25390: LD_VAR 0 2
25394: IFFALSE 26180
// begin normal :=  ;
25396: LD_ADDR_VAR 0 5
25400: PUSH
25401: LD_STRING 
25403: ST_TO_ADDR
// hardcore :=  ;
25404: LD_ADDR_VAR 0 6
25408: PUSH
25409: LD_STRING 
25411: ST_TO_ADDR
// active :=  ;
25412: LD_ADDR_VAR 0 7
25416: PUSH
25417: LD_STRING 
25419: ST_TO_ADDR
// for i = 1 to normalCounter do
25420: LD_ADDR_VAR 0 8
25424: PUSH
25425: DOUBLE
25426: LD_INT 1
25428: DEC
25429: ST_TO_ADDR
25430: LD_EXP 53
25434: PUSH
25435: FOR_TO
25436: IFFALSE 25537
// begin tmp := 0 ;
25438: LD_ADDR_VAR 0 3
25442: PUSH
25443: LD_STRING 0
25445: ST_TO_ADDR
// if result [ 1 ] then
25446: LD_VAR 0 2
25450: PUSH
25451: LD_INT 1
25453: ARRAY
25454: IFFALSE 25519
// if result [ 1 ] [ 1 ] = i then
25456: LD_VAR 0 2
25460: PUSH
25461: LD_INT 1
25463: ARRAY
25464: PUSH
25465: LD_INT 1
25467: ARRAY
25468: PUSH
25469: LD_VAR 0 8
25473: EQUAL
25474: IFFALSE 25519
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25476: LD_ADDR_VAR 0 2
25480: PUSH
25481: LD_VAR 0 2
25485: PPUSH
25486: LD_INT 1
25488: PPUSH
25489: LD_VAR 0 2
25493: PUSH
25494: LD_INT 1
25496: ARRAY
25497: PPUSH
25498: LD_INT 1
25500: PPUSH
25501: CALL_OW 3
25505: PPUSH
25506: CALL_OW 1
25510: ST_TO_ADDR
// tmp := 1 ;
25511: LD_ADDR_VAR 0 3
25515: PUSH
25516: LD_STRING 1
25518: ST_TO_ADDR
// end ; normal := normal & tmp ;
25519: LD_ADDR_VAR 0 5
25523: PUSH
25524: LD_VAR 0 5
25528: PUSH
25529: LD_VAR 0 3
25533: STR
25534: ST_TO_ADDR
// end ;
25535: GO 25435
25537: POP
25538: POP
// for i = 1 to hardcoreCounter do
25539: LD_ADDR_VAR 0 8
25543: PUSH
25544: DOUBLE
25545: LD_INT 1
25547: DEC
25548: ST_TO_ADDR
25549: LD_EXP 54
25553: PUSH
25554: FOR_TO
25555: IFFALSE 25660
// begin tmp := 0 ;
25557: LD_ADDR_VAR 0 3
25561: PUSH
25562: LD_STRING 0
25564: ST_TO_ADDR
// if result [ 2 ] then
25565: LD_VAR 0 2
25569: PUSH
25570: LD_INT 2
25572: ARRAY
25573: IFFALSE 25642
// if result [ 2 ] [ 1 ] = 100 + i then
25575: LD_VAR 0 2
25579: PUSH
25580: LD_INT 2
25582: ARRAY
25583: PUSH
25584: LD_INT 1
25586: ARRAY
25587: PUSH
25588: LD_INT 100
25590: PUSH
25591: LD_VAR 0 8
25595: PLUS
25596: EQUAL
25597: IFFALSE 25642
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25599: LD_ADDR_VAR 0 2
25603: PUSH
25604: LD_VAR 0 2
25608: PPUSH
25609: LD_INT 2
25611: PPUSH
25612: LD_VAR 0 2
25616: PUSH
25617: LD_INT 2
25619: ARRAY
25620: PPUSH
25621: LD_INT 1
25623: PPUSH
25624: CALL_OW 3
25628: PPUSH
25629: CALL_OW 1
25633: ST_TO_ADDR
// tmp := 1 ;
25634: LD_ADDR_VAR 0 3
25638: PUSH
25639: LD_STRING 1
25641: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25642: LD_ADDR_VAR 0 6
25646: PUSH
25647: LD_VAR 0 6
25651: PUSH
25652: LD_VAR 0 3
25656: STR
25657: ST_TO_ADDR
// end ;
25658: GO 25554
25660: POP
25661: POP
// if isGameLoad then
25662: LD_VAR 0 1
25666: IFFALSE 26141
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25668: LD_ADDR_VAR 0 4
25672: PUSH
25673: LD_EXP 57
25677: PUSH
25678: LD_EXP 56
25682: PUSH
25683: LD_EXP 58
25687: PUSH
25688: LD_EXP 55
25692: PUSH
25693: LD_EXP 59
25697: PUSH
25698: LD_EXP 60
25702: PUSH
25703: LD_EXP 61
25707: PUSH
25708: LD_EXP 62
25712: PUSH
25713: LD_EXP 63
25717: PUSH
25718: LD_EXP 64
25722: PUSH
25723: LD_EXP 65
25727: PUSH
25728: LD_EXP 66
25732: PUSH
25733: LD_EXP 67
25737: PUSH
25738: LD_EXP 68
25742: PUSH
25743: LD_EXP 76
25747: PUSH
25748: LD_EXP 77
25752: PUSH
25753: LD_EXP 78
25757: PUSH
25758: LD_EXP 79
25762: PUSH
25763: LD_EXP 81
25767: PUSH
25768: LD_EXP 82
25772: PUSH
25773: LD_EXP 83
25777: PUSH
25778: LD_EXP 86
25782: PUSH
25783: LD_EXP 88
25787: PUSH
25788: LD_EXP 89
25792: PUSH
25793: LD_EXP 90
25797: PUSH
25798: LD_EXP 92
25802: PUSH
25803: LD_EXP 93
25807: PUSH
25808: LD_EXP 96
25812: PUSH
25813: LD_EXP 97
25817: PUSH
25818: LD_EXP 98
25822: PUSH
25823: LD_EXP 99
25827: PUSH
25828: LD_EXP 100
25832: PUSH
25833: LD_EXP 101
25837: PUSH
25838: LD_EXP 102
25842: PUSH
25843: LD_EXP 103
25847: PUSH
25848: LD_EXP 104
25852: PUSH
25853: LD_EXP 69
25857: PUSH
25858: LD_EXP 70
25862: PUSH
25863: LD_EXP 73
25867: PUSH
25868: LD_EXP 74
25872: PUSH
25873: LD_EXP 75
25877: PUSH
25878: LD_EXP 71
25882: PUSH
25883: LD_EXP 72
25887: PUSH
25888: LD_EXP 80
25892: PUSH
25893: LD_EXP 84
25897: PUSH
25898: LD_EXP 85
25902: PUSH
25903: LD_EXP 87
25907: PUSH
25908: LD_EXP 91
25912: PUSH
25913: LD_EXP 94
25917: PUSH
25918: LD_EXP 95
25922: PUSH
25923: LD_EXP 105
25927: PUSH
25928: LD_EXP 106
25932: PUSH
25933: LD_EXP 107
25937: PUSH
25938: LD_EXP 108
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: ST_TO_ADDR
// tmp :=  ;
25999: LD_ADDR_VAR 0 3
26003: PUSH
26004: LD_STRING 
26006: ST_TO_ADDR
// for i = 1 to normalCounter do
26007: LD_ADDR_VAR 0 8
26011: PUSH
26012: DOUBLE
26013: LD_INT 1
26015: DEC
26016: ST_TO_ADDR
26017: LD_EXP 53
26021: PUSH
26022: FOR_TO
26023: IFFALSE 26059
// begin if flags [ i ] then
26025: LD_VAR 0 4
26029: PUSH
26030: LD_VAR 0 8
26034: ARRAY
26035: IFFALSE 26057
// tmp := tmp & i & ; ;
26037: LD_ADDR_VAR 0 3
26041: PUSH
26042: LD_VAR 0 3
26046: PUSH
26047: LD_VAR 0 8
26051: STR
26052: PUSH
26053: LD_STRING ;
26055: STR
26056: ST_TO_ADDR
// end ;
26057: GO 26022
26059: POP
26060: POP
// for i = 1 to hardcoreCounter do
26061: LD_ADDR_VAR 0 8
26065: PUSH
26066: DOUBLE
26067: LD_INT 1
26069: DEC
26070: ST_TO_ADDR
26071: LD_EXP 54
26075: PUSH
26076: FOR_TO
26077: IFFALSE 26123
// begin if flags [ normalCounter + i ] then
26079: LD_VAR 0 4
26083: PUSH
26084: LD_EXP 53
26088: PUSH
26089: LD_VAR 0 8
26093: PLUS
26094: ARRAY
26095: IFFALSE 26121
// tmp := tmp & ( 100 + i ) & ; ;
26097: LD_ADDR_VAR 0 3
26101: PUSH
26102: LD_VAR 0 3
26106: PUSH
26107: LD_INT 100
26109: PUSH
26110: LD_VAR 0 8
26114: PLUS
26115: STR
26116: PUSH
26117: LD_STRING ;
26119: STR
26120: ST_TO_ADDR
// end ;
26121: GO 26076
26123: POP
26124: POP
// if tmp then
26125: LD_VAR 0 3
26129: IFFALSE 26141
// active := tmp ;
26131: LD_ADDR_VAR 0 7
26135: PUSH
26136: LD_VAR 0 3
26140: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26141: LD_STRING getStreamItemsFromMission("
26143: PUSH
26144: LD_VAR 0 5
26148: STR
26149: PUSH
26150: LD_STRING ","
26152: STR
26153: PUSH
26154: LD_VAR 0 6
26158: STR
26159: PUSH
26160: LD_STRING ","
26162: STR
26163: PUSH
26164: LD_VAR 0 7
26168: STR
26169: PUSH
26170: LD_STRING ")
26172: STR
26173: PPUSH
26174: CALL_OW 559
// end else
26178: GO 26187
// ToLua ( getStreamItemsFromMission("","","") ) ;
26180: LD_STRING getStreamItemsFromMission("","","")
26182: PPUSH
26183: CALL_OW 559
// end ;
26187: LD_VAR 0 2
26191: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26192: LD_EXP 52
26196: PUSH
26197: LD_EXP 57
26201: AND
26202: IFFALSE 26326
26204: GO 26206
26206: DISABLE
26207: LD_INT 0
26209: PPUSH
26210: PPUSH
// begin enable ;
26211: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26212: LD_ADDR_VAR 0 2
26216: PUSH
26217: LD_INT 22
26219: PUSH
26220: LD_OWVAR 2
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: LD_INT 34
26234: PUSH
26235: LD_INT 7
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 34
26244: PUSH
26245: LD_INT 45
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 34
26254: PUSH
26255: LD_INT 28
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 34
26264: PUSH
26265: LD_INT 47
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PPUSH
26283: CALL_OW 69
26287: ST_TO_ADDR
// if not tmp then
26288: LD_VAR 0 2
26292: NOT
26293: IFFALSE 26297
// exit ;
26295: GO 26326
// for i in tmp do
26297: LD_ADDR_VAR 0 1
26301: PUSH
26302: LD_VAR 0 2
26306: PUSH
26307: FOR_IN
26308: IFFALSE 26324
// begin SetLives ( i , 0 ) ;
26310: LD_VAR 0 1
26314: PPUSH
26315: LD_INT 0
26317: PPUSH
26318: CALL_OW 234
// end ;
26322: GO 26307
26324: POP
26325: POP
// end ;
26326: PPOPN 2
26328: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26329: LD_EXP 52
26333: PUSH
26334: LD_EXP 58
26338: AND
26339: IFFALSE 26423
26341: GO 26343
26343: DISABLE
26344: LD_INT 0
26346: PPUSH
26347: PPUSH
// begin enable ;
26348: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26349: LD_ADDR_VAR 0 2
26353: PUSH
26354: LD_INT 22
26356: PUSH
26357: LD_OWVAR 2
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 32
26368: PUSH
26369: LD_INT 3
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PPUSH
26380: CALL_OW 69
26384: ST_TO_ADDR
// if not tmp then
26385: LD_VAR 0 2
26389: NOT
26390: IFFALSE 26394
// exit ;
26392: GO 26423
// for i in tmp do
26394: LD_ADDR_VAR 0 1
26398: PUSH
26399: LD_VAR 0 2
26403: PUSH
26404: FOR_IN
26405: IFFALSE 26421
// begin SetLives ( i , 0 ) ;
26407: LD_VAR 0 1
26411: PPUSH
26412: LD_INT 0
26414: PPUSH
26415: CALL_OW 234
// end ;
26419: GO 26404
26421: POP
26422: POP
// end ;
26423: PPOPN 2
26425: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26426: LD_EXP 52
26430: PUSH
26431: LD_EXP 55
26435: AND
26436: IFFALSE 26529
26438: GO 26440
26440: DISABLE
26441: LD_INT 0
26443: PPUSH
// begin enable ;
26444: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26445: LD_ADDR_VAR 0 1
26449: PUSH
26450: LD_INT 22
26452: PUSH
26453: LD_OWVAR 2
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: LD_INT 25
26467: PUSH
26468: LD_INT 5
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 25
26477: PUSH
26478: LD_INT 9
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 25
26487: PUSH
26488: LD_INT 8
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PPUSH
26505: CALL_OW 69
26509: PUSH
26510: FOR_IN
26511: IFFALSE 26527
// begin SetClass ( i , 1 ) ;
26513: LD_VAR 0 1
26517: PPUSH
26518: LD_INT 1
26520: PPUSH
26521: CALL_OW 336
// end ;
26525: GO 26510
26527: POP
26528: POP
// end ;
26529: PPOPN 1
26531: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26532: LD_EXP 52
26536: PUSH
26537: LD_EXP 56
26541: AND
26542: PUSH
26543: LD_OWVAR 65
26547: PUSH
26548: LD_INT 7
26550: LESS
26551: AND
26552: IFFALSE 26566
26554: GO 26556
26556: DISABLE
// begin enable ;
26557: ENABLE
// game_speed := 7 ;
26558: LD_ADDR_OWVAR 65
26562: PUSH
26563: LD_INT 7
26565: ST_TO_ADDR
// end ;
26566: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26567: LD_EXP 52
26571: PUSH
26572: LD_EXP 59
26576: AND
26577: IFFALSE 26779
26579: GO 26581
26581: DISABLE
26582: LD_INT 0
26584: PPUSH
26585: PPUSH
26586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26587: LD_ADDR_VAR 0 3
26591: PUSH
26592: LD_INT 81
26594: PUSH
26595: LD_OWVAR 2
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 21
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PPUSH
26618: CALL_OW 69
26622: ST_TO_ADDR
// if not tmp then
26623: LD_VAR 0 3
26627: NOT
26628: IFFALSE 26632
// exit ;
26630: GO 26779
// if tmp > 5 then
26632: LD_VAR 0 3
26636: PUSH
26637: LD_INT 5
26639: GREATER
26640: IFFALSE 26652
// k := 5 else
26642: LD_ADDR_VAR 0 2
26646: PUSH
26647: LD_INT 5
26649: ST_TO_ADDR
26650: GO 26662
// k := tmp ;
26652: LD_ADDR_VAR 0 2
26656: PUSH
26657: LD_VAR 0 3
26661: ST_TO_ADDR
// for i := 1 to k do
26662: LD_ADDR_VAR 0 1
26666: PUSH
26667: DOUBLE
26668: LD_INT 1
26670: DEC
26671: ST_TO_ADDR
26672: LD_VAR 0 2
26676: PUSH
26677: FOR_TO
26678: IFFALSE 26777
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26680: LD_VAR 0 3
26684: PUSH
26685: LD_VAR 0 1
26689: ARRAY
26690: PPUSH
26691: LD_VAR 0 1
26695: PUSH
26696: LD_INT 4
26698: MOD
26699: PUSH
26700: LD_INT 1
26702: PLUS
26703: PPUSH
26704: CALL_OW 259
26708: PUSH
26709: LD_INT 10
26711: LESS
26712: IFFALSE 26775
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26714: LD_VAR 0 3
26718: PUSH
26719: LD_VAR 0 1
26723: ARRAY
26724: PPUSH
26725: LD_VAR 0 1
26729: PUSH
26730: LD_INT 4
26732: MOD
26733: PUSH
26734: LD_INT 1
26736: PLUS
26737: PPUSH
26738: LD_VAR 0 3
26742: PUSH
26743: LD_VAR 0 1
26747: ARRAY
26748: PPUSH
26749: LD_VAR 0 1
26753: PUSH
26754: LD_INT 4
26756: MOD
26757: PUSH
26758: LD_INT 1
26760: PLUS
26761: PPUSH
26762: CALL_OW 259
26766: PUSH
26767: LD_INT 1
26769: PLUS
26770: PPUSH
26771: CALL_OW 237
26775: GO 26677
26777: POP
26778: POP
// end ;
26779: PPOPN 3
26781: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26782: LD_EXP 52
26786: PUSH
26787: LD_EXP 60
26791: AND
26792: IFFALSE 26812
26794: GO 26796
26796: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26797: LD_INT 4
26799: PPUSH
26800: LD_OWVAR 2
26804: PPUSH
26805: LD_INT 0
26807: PPUSH
26808: CALL_OW 324
26812: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26813: LD_EXP 52
26817: PUSH
26818: LD_EXP 89
26822: AND
26823: IFFALSE 26843
26825: GO 26827
26827: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26828: LD_INT 19
26830: PPUSH
26831: LD_OWVAR 2
26835: PPUSH
26836: LD_INT 0
26838: PPUSH
26839: CALL_OW 324
26843: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26844: LD_EXP 52
26848: PUSH
26849: LD_EXP 61
26853: AND
26854: IFFALSE 26956
26856: GO 26858
26858: DISABLE
26859: LD_INT 0
26861: PPUSH
26862: PPUSH
// begin enable ;
26863: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26864: LD_ADDR_VAR 0 2
26868: PUSH
26869: LD_INT 22
26871: PUSH
26872: LD_OWVAR 2
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: LD_INT 34
26886: PUSH
26887: LD_INT 11
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 34
26896: PUSH
26897: LD_INT 30
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: LIST
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PPUSH
26913: CALL_OW 69
26917: ST_TO_ADDR
// if not tmp then
26918: LD_VAR 0 2
26922: NOT
26923: IFFALSE 26927
// exit ;
26925: GO 26956
// for i in tmp do
26927: LD_ADDR_VAR 0 1
26931: PUSH
26932: LD_VAR 0 2
26936: PUSH
26937: FOR_IN
26938: IFFALSE 26954
// begin SetLives ( i , 0 ) ;
26940: LD_VAR 0 1
26944: PPUSH
26945: LD_INT 0
26947: PPUSH
26948: CALL_OW 234
// end ;
26952: GO 26937
26954: POP
26955: POP
// end ;
26956: PPOPN 2
26958: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26959: LD_EXP 52
26963: PUSH
26964: LD_EXP 62
26968: AND
26969: IFFALSE 26989
26971: GO 26973
26973: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26974: LD_INT 32
26976: PPUSH
26977: LD_OWVAR 2
26981: PPUSH
26982: LD_INT 0
26984: PPUSH
26985: CALL_OW 324
26989: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26990: LD_EXP 52
26994: PUSH
26995: LD_EXP 63
26999: AND
27000: IFFALSE 27181
27002: GO 27004
27004: DISABLE
27005: LD_INT 0
27007: PPUSH
27008: PPUSH
27009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27010: LD_ADDR_VAR 0 2
27014: PUSH
27015: LD_INT 22
27017: PUSH
27018: LD_OWVAR 2
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 33
27029: PUSH
27030: LD_INT 3
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PPUSH
27041: CALL_OW 69
27045: ST_TO_ADDR
// if not tmp then
27046: LD_VAR 0 2
27050: NOT
27051: IFFALSE 27055
// exit ;
27053: GO 27181
// side := 0 ;
27055: LD_ADDR_VAR 0 3
27059: PUSH
27060: LD_INT 0
27062: ST_TO_ADDR
// for i := 1 to 8 do
27063: LD_ADDR_VAR 0 1
27067: PUSH
27068: DOUBLE
27069: LD_INT 1
27071: DEC
27072: ST_TO_ADDR
27073: LD_INT 8
27075: PUSH
27076: FOR_TO
27077: IFFALSE 27125
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27079: LD_OWVAR 2
27083: PUSH
27084: LD_VAR 0 1
27088: NONEQUAL
27089: PUSH
27090: LD_OWVAR 2
27094: PPUSH
27095: LD_VAR 0 1
27099: PPUSH
27100: CALL_OW 81
27104: PUSH
27105: LD_INT 2
27107: EQUAL
27108: AND
27109: IFFALSE 27123
// begin side := i ;
27111: LD_ADDR_VAR 0 3
27115: PUSH
27116: LD_VAR 0 1
27120: ST_TO_ADDR
// break ;
27121: GO 27125
// end ;
27123: GO 27076
27125: POP
27126: POP
// if not side then
27127: LD_VAR 0 3
27131: NOT
27132: IFFALSE 27136
// exit ;
27134: GO 27181
// for i := 1 to tmp do
27136: LD_ADDR_VAR 0 1
27140: PUSH
27141: DOUBLE
27142: LD_INT 1
27144: DEC
27145: ST_TO_ADDR
27146: LD_VAR 0 2
27150: PUSH
27151: FOR_TO
27152: IFFALSE 27179
// if Prob ( 60 ) then
27154: LD_INT 60
27156: PPUSH
27157: CALL_OW 13
27161: IFFALSE 27177
// SetSide ( i , side ) ;
27163: LD_VAR 0 1
27167: PPUSH
27168: LD_VAR 0 3
27172: PPUSH
27173: CALL_OW 235
27177: GO 27151
27179: POP
27180: POP
// end ;
27181: PPOPN 3
27183: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27184: LD_EXP 52
27188: PUSH
27189: LD_EXP 65
27193: AND
27194: IFFALSE 27313
27196: GO 27198
27198: DISABLE
27199: LD_INT 0
27201: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27202: LD_ADDR_VAR 0 1
27206: PUSH
27207: LD_INT 22
27209: PUSH
27210: LD_OWVAR 2
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 21
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 3
27231: PUSH
27232: LD_INT 23
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: LIST
27250: PPUSH
27251: CALL_OW 69
27255: PUSH
27256: FOR_IN
27257: IFFALSE 27311
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27259: LD_VAR 0 1
27263: PPUSH
27264: CALL_OW 257
27268: PUSH
27269: LD_INT 1
27271: PUSH
27272: LD_INT 2
27274: PUSH
27275: LD_INT 3
27277: PUSH
27278: LD_INT 4
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: IN
27287: IFFALSE 27309
// SetClass ( un , rand ( 1 , 4 ) ) ;
27289: LD_VAR 0 1
27293: PPUSH
27294: LD_INT 1
27296: PPUSH
27297: LD_INT 4
27299: PPUSH
27300: CALL_OW 12
27304: PPUSH
27305: CALL_OW 336
27309: GO 27256
27311: POP
27312: POP
// end ;
27313: PPOPN 1
27315: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27316: LD_EXP 52
27320: PUSH
27321: LD_EXP 64
27325: AND
27326: IFFALSE 27405
27328: GO 27330
27330: DISABLE
27331: LD_INT 0
27333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27334: LD_ADDR_VAR 0 1
27338: PUSH
27339: LD_INT 22
27341: PUSH
27342: LD_OWVAR 2
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 21
27353: PUSH
27354: LD_INT 3
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PPUSH
27365: CALL_OW 69
27369: ST_TO_ADDR
// if not tmp then
27370: LD_VAR 0 1
27374: NOT
27375: IFFALSE 27379
// exit ;
27377: GO 27405
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27379: LD_VAR 0 1
27383: PUSH
27384: LD_INT 1
27386: PPUSH
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL_OW 12
27396: ARRAY
27397: PPUSH
27398: LD_INT 100
27400: PPUSH
27401: CALL_OW 234
// end ;
27405: PPOPN 1
27407: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27408: LD_EXP 52
27412: PUSH
27413: LD_EXP 66
27417: AND
27418: IFFALSE 27516
27420: GO 27422
27422: DISABLE
27423: LD_INT 0
27425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27426: LD_ADDR_VAR 0 1
27430: PUSH
27431: LD_INT 22
27433: PUSH
27434: LD_OWVAR 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 21
27445: PUSH
27446: LD_INT 1
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PPUSH
27457: CALL_OW 69
27461: ST_TO_ADDR
// if not tmp then
27462: LD_VAR 0 1
27466: NOT
27467: IFFALSE 27471
// exit ;
27469: GO 27516
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27471: LD_VAR 0 1
27475: PUSH
27476: LD_INT 1
27478: PPUSH
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 12
27488: ARRAY
27489: PPUSH
27490: LD_INT 1
27492: PPUSH
27493: LD_INT 4
27495: PPUSH
27496: CALL_OW 12
27500: PPUSH
27501: LD_INT 3000
27503: PPUSH
27504: LD_INT 9000
27506: PPUSH
27507: CALL_OW 12
27511: PPUSH
27512: CALL_OW 492
// end ;
27516: PPOPN 1
27518: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27519: LD_EXP 52
27523: PUSH
27524: LD_EXP 67
27528: AND
27529: IFFALSE 27549
27531: GO 27533
27533: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27534: LD_INT 1
27536: PPUSH
27537: LD_OWVAR 2
27541: PPUSH
27542: LD_INT 0
27544: PPUSH
27545: CALL_OW 324
27549: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27550: LD_EXP 52
27554: PUSH
27555: LD_EXP 68
27559: AND
27560: IFFALSE 27643
27562: GO 27564
27564: DISABLE
27565: LD_INT 0
27567: PPUSH
27568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27569: LD_ADDR_VAR 0 2
27573: PUSH
27574: LD_INT 22
27576: PUSH
27577: LD_OWVAR 2
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 21
27588: PUSH
27589: LD_INT 3
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PPUSH
27600: CALL_OW 69
27604: ST_TO_ADDR
// if not tmp then
27605: LD_VAR 0 2
27609: NOT
27610: IFFALSE 27614
// exit ;
27612: GO 27643
// for i in tmp do
27614: LD_ADDR_VAR 0 1
27618: PUSH
27619: LD_VAR 0 2
27623: PUSH
27624: FOR_IN
27625: IFFALSE 27641
// SetBLevel ( i , 10 ) ;
27627: LD_VAR 0 1
27631: PPUSH
27632: LD_INT 10
27634: PPUSH
27635: CALL_OW 241
27639: GO 27624
27641: POP
27642: POP
// end ;
27643: PPOPN 2
27645: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27646: LD_EXP 52
27650: PUSH
27651: LD_EXP 69
27655: AND
27656: IFFALSE 27767
27658: GO 27660
27660: DISABLE
27661: LD_INT 0
27663: PPUSH
27664: PPUSH
27665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27666: LD_ADDR_VAR 0 3
27670: PUSH
27671: LD_INT 22
27673: PUSH
27674: LD_OWVAR 2
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 25
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PPUSH
27697: CALL_OW 69
27701: ST_TO_ADDR
// if not tmp then
27702: LD_VAR 0 3
27706: NOT
27707: IFFALSE 27711
// exit ;
27709: GO 27767
// un := tmp [ rand ( 1 , tmp ) ] ;
27711: LD_ADDR_VAR 0 2
27715: PUSH
27716: LD_VAR 0 3
27720: PUSH
27721: LD_INT 1
27723: PPUSH
27724: LD_VAR 0 3
27728: PPUSH
27729: CALL_OW 12
27733: ARRAY
27734: ST_TO_ADDR
// if Crawls ( un ) then
27735: LD_VAR 0 2
27739: PPUSH
27740: CALL_OW 318
27744: IFFALSE 27755
// ComWalk ( un ) ;
27746: LD_VAR 0 2
27750: PPUSH
27751: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27755: LD_VAR 0 2
27759: PPUSH
27760: LD_INT 5
27762: PPUSH
27763: CALL_OW 336
// end ;
27767: PPOPN 3
27769: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27770: LD_EXP 52
27774: PUSH
27775: LD_EXP 70
27779: AND
27780: PUSH
27781: LD_OWVAR 67
27785: PUSH
27786: LD_INT 4
27788: LESS
27789: AND
27790: IFFALSE 27809
27792: GO 27794
27794: DISABLE
// begin Difficulty := Difficulty + 1 ;
27795: LD_ADDR_OWVAR 67
27799: PUSH
27800: LD_OWVAR 67
27804: PUSH
27805: LD_INT 1
27807: PLUS
27808: ST_TO_ADDR
// end ;
27809: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27810: LD_EXP 52
27814: PUSH
27815: LD_EXP 71
27819: AND
27820: IFFALSE 27923
27822: GO 27824
27824: DISABLE
27825: LD_INT 0
27827: PPUSH
// begin for i := 1 to 5 do
27828: LD_ADDR_VAR 0 1
27832: PUSH
27833: DOUBLE
27834: LD_INT 1
27836: DEC
27837: ST_TO_ADDR
27838: LD_INT 5
27840: PUSH
27841: FOR_TO
27842: IFFALSE 27921
// begin uc_nation := nation_nature ;
27844: LD_ADDR_OWVAR 21
27848: PUSH
27849: LD_INT 0
27851: ST_TO_ADDR
// uc_side := 0 ;
27852: LD_ADDR_OWVAR 20
27856: PUSH
27857: LD_INT 0
27859: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27860: LD_ADDR_OWVAR 29
27864: PUSH
27865: LD_INT 12
27867: PUSH
27868: LD_INT 12
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: ST_TO_ADDR
// hc_agressivity := 20 ;
27875: LD_ADDR_OWVAR 35
27879: PUSH
27880: LD_INT 20
27882: ST_TO_ADDR
// hc_class := class_tiger ;
27883: LD_ADDR_OWVAR 28
27887: PUSH
27888: LD_INT 14
27890: ST_TO_ADDR
// hc_gallery :=  ;
27891: LD_ADDR_OWVAR 33
27895: PUSH
27896: LD_STRING 
27898: ST_TO_ADDR
// hc_name :=  ;
27899: LD_ADDR_OWVAR 26
27903: PUSH
27904: LD_STRING 
27906: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27907: CALL_OW 44
27911: PPUSH
27912: LD_INT 0
27914: PPUSH
27915: CALL_OW 51
// end ;
27919: GO 27841
27921: POP
27922: POP
// end ;
27923: PPOPN 1
27925: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27926: LD_EXP 52
27930: PUSH
27931: LD_EXP 72
27935: AND
27936: IFFALSE 27945
27938: GO 27940
27940: DISABLE
// StreamSibBomb ;
27941: CALL 27946 0 0
27945: END
// export function StreamSibBomb ; var i , x , y ; begin
27946: LD_INT 0
27948: PPUSH
27949: PPUSH
27950: PPUSH
27951: PPUSH
// result := false ;
27952: LD_ADDR_VAR 0 1
27956: PUSH
27957: LD_INT 0
27959: ST_TO_ADDR
// for i := 1 to 16 do
27960: LD_ADDR_VAR 0 2
27964: PUSH
27965: DOUBLE
27966: LD_INT 1
27968: DEC
27969: ST_TO_ADDR
27970: LD_INT 16
27972: PUSH
27973: FOR_TO
27974: IFFALSE 28173
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27976: LD_ADDR_VAR 0 3
27980: PUSH
27981: LD_INT 10
27983: PUSH
27984: LD_INT 20
27986: PUSH
27987: LD_INT 30
27989: PUSH
27990: LD_INT 40
27992: PUSH
27993: LD_INT 50
27995: PUSH
27996: LD_INT 60
27998: PUSH
27999: LD_INT 70
28001: PUSH
28002: LD_INT 80
28004: PUSH
28005: LD_INT 90
28007: PUSH
28008: LD_INT 100
28010: PUSH
28011: LD_INT 110
28013: PUSH
28014: LD_INT 120
28016: PUSH
28017: LD_INT 130
28019: PUSH
28020: LD_INT 140
28022: PUSH
28023: LD_INT 150
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: PPUSH
28046: LD_INT 15
28048: PPUSH
28049: CALL_OW 12
28053: ARRAY
28054: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28055: LD_ADDR_VAR 0 4
28059: PUSH
28060: LD_INT 10
28062: PUSH
28063: LD_INT 20
28065: PUSH
28066: LD_INT 30
28068: PUSH
28069: LD_INT 40
28071: PUSH
28072: LD_INT 50
28074: PUSH
28075: LD_INT 60
28077: PUSH
28078: LD_INT 70
28080: PUSH
28081: LD_INT 80
28083: PUSH
28084: LD_INT 90
28086: PUSH
28087: LD_INT 100
28089: PUSH
28090: LD_INT 110
28092: PUSH
28093: LD_INT 120
28095: PUSH
28096: LD_INT 130
28098: PUSH
28099: LD_INT 140
28101: PUSH
28102: LD_INT 150
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: PPUSH
28125: LD_INT 15
28127: PPUSH
28128: CALL_OW 12
28132: ARRAY
28133: ST_TO_ADDR
// if ValidHex ( x , y ) then
28134: LD_VAR 0 3
28138: PPUSH
28139: LD_VAR 0 4
28143: PPUSH
28144: CALL_OW 488
28148: IFFALSE 28171
// begin result := [ x , y ] ;
28150: LD_ADDR_VAR 0 1
28154: PUSH
28155: LD_VAR 0 3
28159: PUSH
28160: LD_VAR 0 4
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: ST_TO_ADDR
// break ;
28169: GO 28173
// end ; end ;
28171: GO 27973
28173: POP
28174: POP
// if result then
28175: LD_VAR 0 1
28179: IFFALSE 28239
// begin ToLua ( playSibBomb() ) ;
28181: LD_STRING playSibBomb()
28183: PPUSH
28184: CALL_OW 559
// wait ( 0 0$14 ) ;
28188: LD_INT 490
28190: PPUSH
28191: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28195: LD_VAR 0 1
28199: PUSH
28200: LD_INT 1
28202: ARRAY
28203: PPUSH
28204: LD_VAR 0 1
28208: PUSH
28209: LD_INT 2
28211: ARRAY
28212: PPUSH
28213: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28217: LD_VAR 0 1
28221: PUSH
28222: LD_INT 1
28224: ARRAY
28225: PPUSH
28226: LD_VAR 0 1
28230: PUSH
28231: LD_INT 2
28233: ARRAY
28234: PPUSH
28235: CALL_OW 429
// end ; end ;
28239: LD_VAR 0 1
28243: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28244: LD_EXP 52
28248: PUSH
28249: LD_EXP 74
28253: AND
28254: IFFALSE 28266
28256: GO 28258
28258: DISABLE
// YouLost (  ) ;
28259: LD_STRING 
28261: PPUSH
28262: CALL_OW 104
28266: END
// every 0 0$1 trigger StreamModeActive and sFog do
28267: LD_EXP 52
28271: PUSH
28272: LD_EXP 73
28276: AND
28277: IFFALSE 28291
28279: GO 28281
28281: DISABLE
// FogOff ( your_side ) ;
28282: LD_OWVAR 2
28286: PPUSH
28287: CALL_OW 344
28291: END
// every 0 0$1 trigger StreamModeActive and sSun do
28292: LD_EXP 52
28296: PUSH
28297: LD_EXP 75
28301: AND
28302: IFFALSE 28330
28304: GO 28306
28306: DISABLE
// begin solar_recharge_percent := 0 ;
28307: LD_ADDR_OWVAR 79
28311: PUSH
28312: LD_INT 0
28314: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28315: LD_INT 10500
28317: PPUSH
28318: CALL_OW 67
// solar_recharge_percent := 100 ;
28322: LD_ADDR_OWVAR 79
28326: PUSH
28327: LD_INT 100
28329: ST_TO_ADDR
// end ;
28330: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28331: LD_EXP 52
28335: PUSH
28336: LD_EXP 76
28340: AND
28341: IFFALSE 28580
28343: GO 28345
28345: DISABLE
28346: LD_INT 0
28348: PPUSH
28349: PPUSH
28350: PPUSH
// begin tmp := [ ] ;
28351: LD_ADDR_VAR 0 3
28355: PUSH
28356: EMPTY
28357: ST_TO_ADDR
// for i := 1 to 6 do
28358: LD_ADDR_VAR 0 1
28362: PUSH
28363: DOUBLE
28364: LD_INT 1
28366: DEC
28367: ST_TO_ADDR
28368: LD_INT 6
28370: PUSH
28371: FOR_TO
28372: IFFALSE 28477
// begin uc_nation := nation_nature ;
28374: LD_ADDR_OWVAR 21
28378: PUSH
28379: LD_INT 0
28381: ST_TO_ADDR
// uc_side := 0 ;
28382: LD_ADDR_OWVAR 20
28386: PUSH
28387: LD_INT 0
28389: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28390: LD_ADDR_OWVAR 29
28394: PUSH
28395: LD_INT 12
28397: PUSH
28398: LD_INT 12
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: ST_TO_ADDR
// hc_agressivity := 20 ;
28405: LD_ADDR_OWVAR 35
28409: PUSH
28410: LD_INT 20
28412: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28413: LD_ADDR_OWVAR 28
28417: PUSH
28418: LD_INT 17
28420: ST_TO_ADDR
// hc_gallery :=  ;
28421: LD_ADDR_OWVAR 33
28425: PUSH
28426: LD_STRING 
28428: ST_TO_ADDR
// hc_name :=  ;
28429: LD_ADDR_OWVAR 26
28433: PUSH
28434: LD_STRING 
28436: ST_TO_ADDR
// un := CreateHuman ;
28437: LD_ADDR_VAR 0 2
28441: PUSH
28442: CALL_OW 44
28446: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28447: LD_VAR 0 2
28451: PPUSH
28452: LD_INT 1
28454: PPUSH
28455: CALL_OW 51
// tmp := tmp ^ un ;
28459: LD_ADDR_VAR 0 3
28463: PUSH
28464: LD_VAR 0 3
28468: PUSH
28469: LD_VAR 0 2
28473: ADD
28474: ST_TO_ADDR
// end ;
28475: GO 28371
28477: POP
28478: POP
// repeat wait ( 0 0$1 ) ;
28479: LD_INT 35
28481: PPUSH
28482: CALL_OW 67
// for un in tmp do
28486: LD_ADDR_VAR 0 2
28490: PUSH
28491: LD_VAR 0 3
28495: PUSH
28496: FOR_IN
28497: IFFALSE 28571
// begin if IsDead ( un ) then
28499: LD_VAR 0 2
28503: PPUSH
28504: CALL_OW 301
28508: IFFALSE 28528
// begin tmp := tmp diff un ;
28510: LD_ADDR_VAR 0 3
28514: PUSH
28515: LD_VAR 0 3
28519: PUSH
28520: LD_VAR 0 2
28524: DIFF
28525: ST_TO_ADDR
// continue ;
28526: GO 28496
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28528: LD_VAR 0 2
28532: PPUSH
28533: LD_INT 3
28535: PUSH
28536: LD_INT 22
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PPUSH
28550: CALL_OW 69
28554: PPUSH
28555: LD_VAR 0 2
28559: PPUSH
28560: CALL_OW 74
28564: PPUSH
28565: CALL_OW 115
// end ;
28569: GO 28496
28571: POP
28572: POP
// until not tmp ;
28573: LD_VAR 0 3
28577: NOT
28578: IFFALSE 28479
// end ;
28580: PPOPN 3
28582: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28583: LD_EXP 52
28587: PUSH
28588: LD_EXP 77
28592: AND
28593: IFFALSE 28647
28595: GO 28597
28597: DISABLE
// begin ToLua ( displayTroll(); ) ;
28598: LD_STRING displayTroll();
28600: PPUSH
28601: CALL_OW 559
// wait ( 3 3$00 ) ;
28605: LD_INT 6300
28607: PPUSH
28608: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28612: LD_STRING hideTroll();
28614: PPUSH
28615: CALL_OW 559
// wait ( 1 1$00 ) ;
28619: LD_INT 2100
28621: PPUSH
28622: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28626: LD_STRING displayTroll();
28628: PPUSH
28629: CALL_OW 559
// wait ( 1 1$00 ) ;
28633: LD_INT 2100
28635: PPUSH
28636: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28640: LD_STRING hideTroll();
28642: PPUSH
28643: CALL_OW 559
// end ;
28647: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28648: LD_EXP 52
28652: PUSH
28653: LD_EXP 78
28657: AND
28658: IFFALSE 28721
28660: GO 28662
28662: DISABLE
28663: LD_INT 0
28665: PPUSH
// begin p := 0 ;
28666: LD_ADDR_VAR 0 1
28670: PUSH
28671: LD_INT 0
28673: ST_TO_ADDR
// repeat game_speed := 1 ;
28674: LD_ADDR_OWVAR 65
28678: PUSH
28679: LD_INT 1
28681: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28682: LD_INT 35
28684: PPUSH
28685: CALL_OW 67
// p := p + 1 ;
28689: LD_ADDR_VAR 0 1
28693: PUSH
28694: LD_VAR 0 1
28698: PUSH
28699: LD_INT 1
28701: PLUS
28702: ST_TO_ADDR
// until p >= 60 ;
28703: LD_VAR 0 1
28707: PUSH
28708: LD_INT 60
28710: GREATEREQUAL
28711: IFFALSE 28674
// game_speed := 4 ;
28713: LD_ADDR_OWVAR 65
28717: PUSH
28718: LD_INT 4
28720: ST_TO_ADDR
// end ;
28721: PPOPN 1
28723: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28724: LD_EXP 52
28728: PUSH
28729: LD_EXP 79
28733: AND
28734: IFFALSE 28880
28736: GO 28738
28738: DISABLE
28739: LD_INT 0
28741: PPUSH
28742: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28743: LD_ADDR_VAR 0 1
28747: PUSH
28748: LD_INT 22
28750: PUSH
28751: LD_OWVAR 2
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: LD_INT 30
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 30
28775: PUSH
28776: LD_INT 1
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PPUSH
28792: CALL_OW 69
28796: ST_TO_ADDR
// if not depot then
28797: LD_VAR 0 1
28801: NOT
28802: IFFALSE 28806
// exit ;
28804: GO 28880
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28806: LD_ADDR_VAR 0 2
28810: PUSH
28811: LD_VAR 0 1
28815: PUSH
28816: LD_INT 1
28818: PPUSH
28819: LD_VAR 0 1
28823: PPUSH
28824: CALL_OW 12
28828: ARRAY
28829: PPUSH
28830: CALL_OW 274
28834: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28835: LD_VAR 0 2
28839: PPUSH
28840: LD_INT 1
28842: PPUSH
28843: LD_INT 0
28845: PPUSH
28846: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28850: LD_VAR 0 2
28854: PPUSH
28855: LD_INT 2
28857: PPUSH
28858: LD_INT 0
28860: PPUSH
28861: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28865: LD_VAR 0 2
28869: PPUSH
28870: LD_INT 3
28872: PPUSH
28873: LD_INT 0
28875: PPUSH
28876: CALL_OW 277
// end ;
28880: PPOPN 2
28882: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28883: LD_EXP 52
28887: PUSH
28888: LD_EXP 80
28892: AND
28893: IFFALSE 28990
28895: GO 28897
28897: DISABLE
28898: LD_INT 0
28900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28901: LD_ADDR_VAR 0 1
28905: PUSH
28906: LD_INT 22
28908: PUSH
28909: LD_OWVAR 2
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 21
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 3
28930: PUSH
28931: LD_INT 23
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: LIST
28949: PPUSH
28950: CALL_OW 69
28954: ST_TO_ADDR
// if not tmp then
28955: LD_VAR 0 1
28959: NOT
28960: IFFALSE 28964
// exit ;
28962: GO 28990
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28964: LD_VAR 0 1
28968: PUSH
28969: LD_INT 1
28971: PPUSH
28972: LD_VAR 0 1
28976: PPUSH
28977: CALL_OW 12
28981: ARRAY
28982: PPUSH
28983: LD_INT 200
28985: PPUSH
28986: CALL_OW 234
// end ;
28990: PPOPN 1
28992: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28993: LD_EXP 52
28997: PUSH
28998: LD_EXP 81
29002: AND
29003: IFFALSE 29082
29005: GO 29007
29007: DISABLE
29008: LD_INT 0
29010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29011: LD_ADDR_VAR 0 1
29015: PUSH
29016: LD_INT 22
29018: PUSH
29019: LD_OWVAR 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 21
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PPUSH
29042: CALL_OW 69
29046: ST_TO_ADDR
// if not tmp then
29047: LD_VAR 0 1
29051: NOT
29052: IFFALSE 29056
// exit ;
29054: GO 29082
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29056: LD_VAR 0 1
29060: PUSH
29061: LD_INT 1
29063: PPUSH
29064: LD_VAR 0 1
29068: PPUSH
29069: CALL_OW 12
29073: ARRAY
29074: PPUSH
29075: LD_INT 60
29077: PPUSH
29078: CALL_OW 234
// end ;
29082: PPOPN 1
29084: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29085: LD_EXP 52
29089: PUSH
29090: LD_EXP 82
29094: AND
29095: IFFALSE 29194
29097: GO 29099
29099: DISABLE
29100: LD_INT 0
29102: PPUSH
29103: PPUSH
// begin enable ;
29104: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29105: LD_ADDR_VAR 0 1
29109: PUSH
29110: LD_INT 22
29112: PUSH
29113: LD_OWVAR 2
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 61
29124: PUSH
29125: EMPTY
29126: LIST
29127: PUSH
29128: LD_INT 33
29130: PUSH
29131: LD_INT 2
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: LIST
29142: PPUSH
29143: CALL_OW 69
29147: ST_TO_ADDR
// if not tmp then
29148: LD_VAR 0 1
29152: NOT
29153: IFFALSE 29157
// exit ;
29155: GO 29194
// for i in tmp do
29157: LD_ADDR_VAR 0 2
29161: PUSH
29162: LD_VAR 0 1
29166: PUSH
29167: FOR_IN
29168: IFFALSE 29192
// if IsControledBy ( i ) then
29170: LD_VAR 0 2
29174: PPUSH
29175: CALL_OW 312
29179: IFFALSE 29190
// ComUnlink ( i ) ;
29181: LD_VAR 0 2
29185: PPUSH
29186: CALL_OW 136
29190: GO 29167
29192: POP
29193: POP
// end ;
29194: PPOPN 2
29196: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29197: LD_EXP 52
29201: PUSH
29202: LD_EXP 83
29206: AND
29207: IFFALSE 29347
29209: GO 29211
29211: DISABLE
29212: LD_INT 0
29214: PPUSH
29215: PPUSH
// begin ToLua ( displayPowell(); ) ;
29216: LD_STRING displayPowell();
29218: PPUSH
29219: CALL_OW 559
// uc_side := 0 ;
29223: LD_ADDR_OWVAR 20
29227: PUSH
29228: LD_INT 0
29230: ST_TO_ADDR
// uc_nation := 2 ;
29231: LD_ADDR_OWVAR 21
29235: PUSH
29236: LD_INT 2
29238: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29239: LD_ADDR_OWVAR 37
29243: PUSH
29244: LD_INT 14
29246: ST_TO_ADDR
// vc_engine := engine_siberite ;
29247: LD_ADDR_OWVAR 39
29251: PUSH
29252: LD_INT 3
29254: ST_TO_ADDR
// vc_control := control_apeman ;
29255: LD_ADDR_OWVAR 38
29259: PUSH
29260: LD_INT 5
29262: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29263: LD_ADDR_OWVAR 40
29267: PUSH
29268: LD_INT 29
29270: ST_TO_ADDR
// un := CreateVehicle ;
29271: LD_ADDR_VAR 0 2
29275: PUSH
29276: CALL_OW 45
29280: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29281: LD_VAR 0 2
29285: PPUSH
29286: LD_INT 1
29288: PPUSH
29289: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29293: LD_INT 35
29295: PPUSH
29296: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29300: LD_VAR 0 2
29304: PPUSH
29305: LD_INT 22
29307: PUSH
29308: LD_OWVAR 2
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PPUSH
29317: CALL_OW 69
29321: PPUSH
29322: LD_VAR 0 2
29326: PPUSH
29327: CALL_OW 74
29331: PPUSH
29332: CALL_OW 115
// until IsDead ( un ) ;
29336: LD_VAR 0 2
29340: PPUSH
29341: CALL_OW 301
29345: IFFALSE 29293
// end ;
29347: PPOPN 2
29349: END
// every 0 0$1 trigger StreamModeActive and sStu do
29350: LD_EXP 52
29354: PUSH
29355: LD_EXP 91
29359: AND
29360: IFFALSE 29376
29362: GO 29364
29364: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29365: LD_STRING displayStucuk();
29367: PPUSH
29368: CALL_OW 559
// ResetFog ;
29372: CALL_OW 335
// end ;
29376: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29377: LD_EXP 52
29381: PUSH
29382: LD_EXP 84
29386: AND
29387: IFFALSE 29528
29389: GO 29391
29391: DISABLE
29392: LD_INT 0
29394: PPUSH
29395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29396: LD_ADDR_VAR 0 2
29400: PUSH
29401: LD_INT 22
29403: PUSH
29404: LD_OWVAR 2
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 21
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PPUSH
29427: CALL_OW 69
29431: ST_TO_ADDR
// if not tmp then
29432: LD_VAR 0 2
29436: NOT
29437: IFFALSE 29441
// exit ;
29439: GO 29528
// un := tmp [ rand ( 1 , tmp ) ] ;
29441: LD_ADDR_VAR 0 1
29445: PUSH
29446: LD_VAR 0 2
29450: PUSH
29451: LD_INT 1
29453: PPUSH
29454: LD_VAR 0 2
29458: PPUSH
29459: CALL_OW 12
29463: ARRAY
29464: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29465: LD_VAR 0 1
29469: PPUSH
29470: LD_INT 0
29472: PPUSH
29473: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29477: LD_VAR 0 1
29481: PPUSH
29482: LD_OWVAR 3
29486: PUSH
29487: LD_VAR 0 1
29491: DIFF
29492: PPUSH
29493: LD_VAR 0 1
29497: PPUSH
29498: CALL_OW 74
29502: PPUSH
29503: CALL_OW 115
// wait ( 0 0$20 ) ;
29507: LD_INT 700
29509: PPUSH
29510: CALL_OW 67
// SetSide ( un , your_side ) ;
29514: LD_VAR 0 1
29518: PPUSH
29519: LD_OWVAR 2
29523: PPUSH
29524: CALL_OW 235
// end ;
29528: PPOPN 2
29530: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29531: LD_EXP 52
29535: PUSH
29536: LD_EXP 85
29540: AND
29541: IFFALSE 29647
29543: GO 29545
29545: DISABLE
29546: LD_INT 0
29548: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29549: LD_ADDR_VAR 0 1
29553: PUSH
29554: LD_INT 22
29556: PUSH
29557: LD_OWVAR 2
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 2
29568: PUSH
29569: LD_INT 30
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 30
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PPUSH
29598: CALL_OW 69
29602: ST_TO_ADDR
// if not depot then
29603: LD_VAR 0 1
29607: NOT
29608: IFFALSE 29612
// exit ;
29610: GO 29647
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29612: LD_VAR 0 1
29616: PUSH
29617: LD_INT 1
29619: ARRAY
29620: PPUSH
29621: CALL_OW 250
29625: PPUSH
29626: LD_VAR 0 1
29630: PUSH
29631: LD_INT 1
29633: ARRAY
29634: PPUSH
29635: CALL_OW 251
29639: PPUSH
29640: LD_INT 70
29642: PPUSH
29643: CALL_OW 495
// end ;
29647: PPOPN 1
29649: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29650: LD_EXP 52
29654: PUSH
29655: LD_EXP 86
29659: AND
29660: IFFALSE 29871
29662: GO 29664
29664: DISABLE
29665: LD_INT 0
29667: PPUSH
29668: PPUSH
29669: PPUSH
29670: PPUSH
29671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29672: LD_ADDR_VAR 0 5
29676: PUSH
29677: LD_INT 22
29679: PUSH
29680: LD_OWVAR 2
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 21
29691: PUSH
29692: LD_INT 1
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PPUSH
29703: CALL_OW 69
29707: ST_TO_ADDR
// if not tmp then
29708: LD_VAR 0 5
29712: NOT
29713: IFFALSE 29717
// exit ;
29715: GO 29871
// for i in tmp do
29717: LD_ADDR_VAR 0 1
29721: PUSH
29722: LD_VAR 0 5
29726: PUSH
29727: FOR_IN
29728: IFFALSE 29869
// begin d := rand ( 0 , 5 ) ;
29730: LD_ADDR_VAR 0 4
29734: PUSH
29735: LD_INT 0
29737: PPUSH
29738: LD_INT 5
29740: PPUSH
29741: CALL_OW 12
29745: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29746: LD_ADDR_VAR 0 2
29750: PUSH
29751: LD_VAR 0 1
29755: PPUSH
29756: CALL_OW 250
29760: PPUSH
29761: LD_VAR 0 4
29765: PPUSH
29766: LD_INT 3
29768: PPUSH
29769: LD_INT 12
29771: PPUSH
29772: CALL_OW 12
29776: PPUSH
29777: CALL_OW 272
29781: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29782: LD_ADDR_VAR 0 3
29786: PUSH
29787: LD_VAR 0 1
29791: PPUSH
29792: CALL_OW 251
29796: PPUSH
29797: LD_VAR 0 4
29801: PPUSH
29802: LD_INT 3
29804: PPUSH
29805: LD_INT 12
29807: PPUSH
29808: CALL_OW 12
29812: PPUSH
29813: CALL_OW 273
29817: ST_TO_ADDR
// if ValidHex ( x , y ) then
29818: LD_VAR 0 2
29822: PPUSH
29823: LD_VAR 0 3
29827: PPUSH
29828: CALL_OW 488
29832: IFFALSE 29867
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29834: LD_VAR 0 1
29838: PPUSH
29839: LD_VAR 0 2
29843: PPUSH
29844: LD_VAR 0 3
29848: PPUSH
29849: LD_INT 3
29851: PPUSH
29852: LD_INT 6
29854: PPUSH
29855: CALL_OW 12
29859: PPUSH
29860: LD_INT 1
29862: PPUSH
29863: CALL_OW 483
// end ;
29867: GO 29727
29869: POP
29870: POP
// end ;
29871: PPOPN 5
29873: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29874: LD_EXP 52
29878: PUSH
29879: LD_EXP 87
29883: AND
29884: IFFALSE 29978
29886: GO 29888
29888: DISABLE
29889: LD_INT 0
29891: PPUSH
29892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29893: LD_ADDR_VAR 0 2
29897: PUSH
29898: LD_INT 22
29900: PUSH
29901: LD_OWVAR 2
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 32
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 21
29922: PUSH
29923: LD_INT 2
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: PPUSH
29935: CALL_OW 69
29939: ST_TO_ADDR
// if not tmp then
29940: LD_VAR 0 2
29944: NOT
29945: IFFALSE 29949
// exit ;
29947: GO 29978
// for i in tmp do
29949: LD_ADDR_VAR 0 1
29953: PUSH
29954: LD_VAR 0 2
29958: PUSH
29959: FOR_IN
29960: IFFALSE 29976
// SetFuel ( i , 0 ) ;
29962: LD_VAR 0 1
29966: PPUSH
29967: LD_INT 0
29969: PPUSH
29970: CALL_OW 240
29974: GO 29959
29976: POP
29977: POP
// end ;
29978: PPOPN 2
29980: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29981: LD_EXP 52
29985: PUSH
29986: LD_EXP 88
29990: AND
29991: IFFALSE 30057
29993: GO 29995
29995: DISABLE
29996: LD_INT 0
29998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29999: LD_ADDR_VAR 0 1
30003: PUSH
30004: LD_INT 22
30006: PUSH
30007: LD_OWVAR 2
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 30
30018: PUSH
30019: LD_INT 29
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PPUSH
30030: CALL_OW 69
30034: ST_TO_ADDR
// if not tmp then
30035: LD_VAR 0 1
30039: NOT
30040: IFFALSE 30044
// exit ;
30042: GO 30057
// DestroyUnit ( tmp [ 1 ] ) ;
30044: LD_VAR 0 1
30048: PUSH
30049: LD_INT 1
30051: ARRAY
30052: PPUSH
30053: CALL_OW 65
// end ;
30057: PPOPN 1
30059: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30060: LD_EXP 52
30064: PUSH
30065: LD_EXP 90
30069: AND
30070: IFFALSE 30199
30072: GO 30074
30074: DISABLE
30075: LD_INT 0
30077: PPUSH
// begin uc_side := 0 ;
30078: LD_ADDR_OWVAR 20
30082: PUSH
30083: LD_INT 0
30085: ST_TO_ADDR
// uc_nation := nation_arabian ;
30086: LD_ADDR_OWVAR 21
30090: PUSH
30091: LD_INT 2
30093: ST_TO_ADDR
// hc_gallery :=  ;
30094: LD_ADDR_OWVAR 33
30098: PUSH
30099: LD_STRING 
30101: ST_TO_ADDR
// hc_name :=  ;
30102: LD_ADDR_OWVAR 26
30106: PUSH
30107: LD_STRING 
30109: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30110: LD_INT 1
30112: PPUSH
30113: LD_INT 11
30115: PPUSH
30116: LD_INT 10
30118: PPUSH
30119: CALL_OW 380
// un := CreateHuman ;
30123: LD_ADDR_VAR 0 1
30127: PUSH
30128: CALL_OW 44
30132: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30133: LD_VAR 0 1
30137: PPUSH
30138: LD_INT 1
30140: PPUSH
30141: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30145: LD_INT 35
30147: PPUSH
30148: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30152: LD_VAR 0 1
30156: PPUSH
30157: LD_INT 22
30159: PUSH
30160: LD_OWVAR 2
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PPUSH
30169: CALL_OW 69
30173: PPUSH
30174: LD_VAR 0 1
30178: PPUSH
30179: CALL_OW 74
30183: PPUSH
30184: CALL_OW 115
// until IsDead ( un ) ;
30188: LD_VAR 0 1
30192: PPUSH
30193: CALL_OW 301
30197: IFFALSE 30145
// end ;
30199: PPOPN 1
30201: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30202: LD_EXP 52
30206: PUSH
30207: LD_EXP 92
30211: AND
30212: IFFALSE 30224
30214: GO 30216
30216: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30217: LD_STRING earthquake(getX(game), 0, 32)
30219: PPUSH
30220: CALL_OW 559
30224: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30225: LD_EXP 52
30229: PUSH
30230: LD_EXP 93
30234: AND
30235: IFFALSE 30326
30237: GO 30239
30239: DISABLE
30240: LD_INT 0
30242: PPUSH
// begin enable ;
30243: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30244: LD_ADDR_VAR 0 1
30248: PUSH
30249: LD_INT 22
30251: PUSH
30252: LD_OWVAR 2
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 21
30263: PUSH
30264: LD_INT 2
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 33
30273: PUSH
30274: LD_INT 3
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: PPUSH
30286: CALL_OW 69
30290: ST_TO_ADDR
// if not tmp then
30291: LD_VAR 0 1
30295: NOT
30296: IFFALSE 30300
// exit ;
30298: GO 30326
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30300: LD_VAR 0 1
30304: PUSH
30305: LD_INT 1
30307: PPUSH
30308: LD_VAR 0 1
30312: PPUSH
30313: CALL_OW 12
30317: ARRAY
30318: PPUSH
30319: LD_INT 1
30321: PPUSH
30322: CALL_OW 234
// end ;
30326: PPOPN 1
30328: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30329: LD_EXP 52
30333: PUSH
30334: LD_EXP 94
30338: AND
30339: IFFALSE 30480
30341: GO 30343
30343: DISABLE
30344: LD_INT 0
30346: PPUSH
30347: PPUSH
30348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30349: LD_ADDR_VAR 0 3
30353: PUSH
30354: LD_INT 22
30356: PUSH
30357: LD_OWVAR 2
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 25
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PPUSH
30380: CALL_OW 69
30384: ST_TO_ADDR
// if not tmp then
30385: LD_VAR 0 3
30389: NOT
30390: IFFALSE 30394
// exit ;
30392: GO 30480
// un := tmp [ rand ( 1 , tmp ) ] ;
30394: LD_ADDR_VAR 0 2
30398: PUSH
30399: LD_VAR 0 3
30403: PUSH
30404: LD_INT 1
30406: PPUSH
30407: LD_VAR 0 3
30411: PPUSH
30412: CALL_OW 12
30416: ARRAY
30417: ST_TO_ADDR
// if Crawls ( un ) then
30418: LD_VAR 0 2
30422: PPUSH
30423: CALL_OW 318
30427: IFFALSE 30438
// ComWalk ( un ) ;
30429: LD_VAR 0 2
30433: PPUSH
30434: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30438: LD_VAR 0 2
30442: PPUSH
30443: LD_INT 9
30445: PPUSH
30446: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30450: LD_INT 28
30452: PPUSH
30453: LD_OWVAR 2
30457: PPUSH
30458: LD_INT 2
30460: PPUSH
30461: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30465: LD_INT 29
30467: PPUSH
30468: LD_OWVAR 2
30472: PPUSH
30473: LD_INT 2
30475: PPUSH
30476: CALL_OW 322
// end ;
30480: PPOPN 3
30482: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30483: LD_EXP 52
30487: PUSH
30488: LD_EXP 95
30492: AND
30493: IFFALSE 30604
30495: GO 30497
30497: DISABLE
30498: LD_INT 0
30500: PPUSH
30501: PPUSH
30502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30503: LD_ADDR_VAR 0 3
30507: PUSH
30508: LD_INT 22
30510: PUSH
30511: LD_OWVAR 2
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 25
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PPUSH
30534: CALL_OW 69
30538: ST_TO_ADDR
// if not tmp then
30539: LD_VAR 0 3
30543: NOT
30544: IFFALSE 30548
// exit ;
30546: GO 30604
// un := tmp [ rand ( 1 , tmp ) ] ;
30548: LD_ADDR_VAR 0 2
30552: PUSH
30553: LD_VAR 0 3
30557: PUSH
30558: LD_INT 1
30560: PPUSH
30561: LD_VAR 0 3
30565: PPUSH
30566: CALL_OW 12
30570: ARRAY
30571: ST_TO_ADDR
// if Crawls ( un ) then
30572: LD_VAR 0 2
30576: PPUSH
30577: CALL_OW 318
30581: IFFALSE 30592
// ComWalk ( un ) ;
30583: LD_VAR 0 2
30587: PPUSH
30588: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30592: LD_VAR 0 2
30596: PPUSH
30597: LD_INT 8
30599: PPUSH
30600: CALL_OW 336
// end ;
30604: PPOPN 3
30606: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30607: LD_EXP 52
30611: PUSH
30612: LD_EXP 96
30616: AND
30617: IFFALSE 30761
30619: GO 30621
30621: DISABLE
30622: LD_INT 0
30624: PPUSH
30625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30626: LD_ADDR_VAR 0 2
30630: PUSH
30631: LD_INT 22
30633: PUSH
30634: LD_OWVAR 2
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 21
30645: PUSH
30646: LD_INT 2
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 2
30655: PUSH
30656: LD_INT 34
30658: PUSH
30659: LD_INT 12
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 34
30668: PUSH
30669: LD_INT 51
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 34
30678: PUSH
30679: LD_INT 32
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: LIST
30696: PPUSH
30697: CALL_OW 69
30701: ST_TO_ADDR
// if not tmp then
30702: LD_VAR 0 2
30706: NOT
30707: IFFALSE 30711
// exit ;
30709: GO 30761
// for i in tmp do
30711: LD_ADDR_VAR 0 1
30715: PUSH
30716: LD_VAR 0 2
30720: PUSH
30721: FOR_IN
30722: IFFALSE 30759
// if GetCargo ( i , mat_artifact ) = 0 then
30724: LD_VAR 0 1
30728: PPUSH
30729: LD_INT 4
30731: PPUSH
30732: CALL_OW 289
30736: PUSH
30737: LD_INT 0
30739: EQUAL
30740: IFFALSE 30757
// SetCargo ( i , mat_siberit , 100 ) ;
30742: LD_VAR 0 1
30746: PPUSH
30747: LD_INT 3
30749: PPUSH
30750: LD_INT 100
30752: PPUSH
30753: CALL_OW 290
30757: GO 30721
30759: POP
30760: POP
// end ;
30761: PPOPN 2
30763: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30764: LD_EXP 52
30768: PUSH
30769: LD_EXP 97
30773: AND
30774: IFFALSE 30957
30776: GO 30778
30778: DISABLE
30779: LD_INT 0
30781: PPUSH
30782: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30783: LD_ADDR_VAR 0 2
30787: PUSH
30788: LD_INT 22
30790: PUSH
30791: LD_OWVAR 2
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PPUSH
30800: CALL_OW 69
30804: ST_TO_ADDR
// if not tmp then
30805: LD_VAR 0 2
30809: NOT
30810: IFFALSE 30814
// exit ;
30812: GO 30957
// for i := 1 to 2 do
30814: LD_ADDR_VAR 0 1
30818: PUSH
30819: DOUBLE
30820: LD_INT 1
30822: DEC
30823: ST_TO_ADDR
30824: LD_INT 2
30826: PUSH
30827: FOR_TO
30828: IFFALSE 30955
// begin uc_side := your_side ;
30830: LD_ADDR_OWVAR 20
30834: PUSH
30835: LD_OWVAR 2
30839: ST_TO_ADDR
// uc_nation := nation_american ;
30840: LD_ADDR_OWVAR 21
30844: PUSH
30845: LD_INT 1
30847: ST_TO_ADDR
// vc_chassis := us_morphling ;
30848: LD_ADDR_OWVAR 37
30852: PUSH
30853: LD_INT 5
30855: ST_TO_ADDR
// vc_engine := engine_siberite ;
30856: LD_ADDR_OWVAR 39
30860: PUSH
30861: LD_INT 3
30863: ST_TO_ADDR
// vc_control := control_computer ;
30864: LD_ADDR_OWVAR 38
30868: PUSH
30869: LD_INT 3
30871: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30872: LD_ADDR_OWVAR 40
30876: PUSH
30877: LD_INT 10
30879: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30880: LD_VAR 0 2
30884: PUSH
30885: LD_INT 1
30887: ARRAY
30888: PPUSH
30889: CALL_OW 310
30893: NOT
30894: IFFALSE 30941
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30896: CALL_OW 45
30900: PPUSH
30901: LD_VAR 0 2
30905: PUSH
30906: LD_INT 1
30908: ARRAY
30909: PPUSH
30910: CALL_OW 250
30914: PPUSH
30915: LD_VAR 0 2
30919: PUSH
30920: LD_INT 1
30922: ARRAY
30923: PPUSH
30924: CALL_OW 251
30928: PPUSH
30929: LD_INT 12
30931: PPUSH
30932: LD_INT 1
30934: PPUSH
30935: CALL_OW 50
30939: GO 30953
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30941: CALL_OW 45
30945: PPUSH
30946: LD_INT 1
30948: PPUSH
30949: CALL_OW 51
// end ;
30953: GO 30827
30955: POP
30956: POP
// end ;
30957: PPOPN 2
30959: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30960: LD_EXP 52
30964: PUSH
30965: LD_EXP 98
30969: AND
30970: IFFALSE 31192
30972: GO 30974
30974: DISABLE
30975: LD_INT 0
30977: PPUSH
30978: PPUSH
30979: PPUSH
30980: PPUSH
30981: PPUSH
30982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30983: LD_ADDR_VAR 0 6
30987: PUSH
30988: LD_INT 22
30990: PUSH
30991: LD_OWVAR 2
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 21
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 3
31012: PUSH
31013: LD_INT 23
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: LIST
31031: PPUSH
31032: CALL_OW 69
31036: ST_TO_ADDR
// if not tmp then
31037: LD_VAR 0 6
31041: NOT
31042: IFFALSE 31046
// exit ;
31044: GO 31192
// s1 := rand ( 1 , 4 ) ;
31046: LD_ADDR_VAR 0 2
31050: PUSH
31051: LD_INT 1
31053: PPUSH
31054: LD_INT 4
31056: PPUSH
31057: CALL_OW 12
31061: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31062: LD_ADDR_VAR 0 4
31066: PUSH
31067: LD_VAR 0 6
31071: PUSH
31072: LD_INT 1
31074: ARRAY
31075: PPUSH
31076: LD_VAR 0 2
31080: PPUSH
31081: CALL_OW 259
31085: ST_TO_ADDR
// if s1 = 1 then
31086: LD_VAR 0 2
31090: PUSH
31091: LD_INT 1
31093: EQUAL
31094: IFFALSE 31114
// s2 := rand ( 2 , 4 ) else
31096: LD_ADDR_VAR 0 3
31100: PUSH
31101: LD_INT 2
31103: PPUSH
31104: LD_INT 4
31106: PPUSH
31107: CALL_OW 12
31111: ST_TO_ADDR
31112: GO 31122
// s2 := 1 ;
31114: LD_ADDR_VAR 0 3
31118: PUSH
31119: LD_INT 1
31121: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31122: LD_ADDR_VAR 0 5
31126: PUSH
31127: LD_VAR 0 6
31131: PUSH
31132: LD_INT 1
31134: ARRAY
31135: PPUSH
31136: LD_VAR 0 3
31140: PPUSH
31141: CALL_OW 259
31145: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31146: LD_VAR 0 6
31150: PUSH
31151: LD_INT 1
31153: ARRAY
31154: PPUSH
31155: LD_VAR 0 2
31159: PPUSH
31160: LD_VAR 0 5
31164: PPUSH
31165: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31169: LD_VAR 0 6
31173: PUSH
31174: LD_INT 1
31176: ARRAY
31177: PPUSH
31178: LD_VAR 0 3
31182: PPUSH
31183: LD_VAR 0 4
31187: PPUSH
31188: CALL_OW 237
// end ;
31192: PPOPN 6
31194: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31195: LD_EXP 52
31199: PUSH
31200: LD_EXP 99
31204: AND
31205: IFFALSE 31284
31207: GO 31209
31209: DISABLE
31210: LD_INT 0
31212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31213: LD_ADDR_VAR 0 1
31217: PUSH
31218: LD_INT 22
31220: PUSH
31221: LD_OWVAR 2
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 30
31232: PUSH
31233: LD_INT 3
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PPUSH
31244: CALL_OW 69
31248: ST_TO_ADDR
// if not tmp then
31249: LD_VAR 0 1
31253: NOT
31254: IFFALSE 31258
// exit ;
31256: GO 31284
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31258: LD_VAR 0 1
31262: PUSH
31263: LD_INT 1
31265: PPUSH
31266: LD_VAR 0 1
31270: PPUSH
31271: CALL_OW 12
31275: ARRAY
31276: PPUSH
31277: LD_INT 1
31279: PPUSH
31280: CALL_OW 234
// end ;
31284: PPOPN 1
31286: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31287: LD_EXP 52
31291: PUSH
31292: LD_EXP 100
31296: AND
31297: IFFALSE 31409
31299: GO 31301
31301: DISABLE
31302: LD_INT 0
31304: PPUSH
31305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31306: LD_ADDR_VAR 0 2
31310: PUSH
31311: LD_INT 22
31313: PUSH
31314: LD_OWVAR 2
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 2
31325: PUSH
31326: LD_INT 30
31328: PUSH
31329: LD_INT 27
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 30
31338: PUSH
31339: LD_INT 26
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 30
31348: PUSH
31349: LD_INT 28
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PPUSH
31366: CALL_OW 69
31370: ST_TO_ADDR
// if not tmp then
31371: LD_VAR 0 2
31375: NOT
31376: IFFALSE 31380
// exit ;
31378: GO 31409
// for i in tmp do
31380: LD_ADDR_VAR 0 1
31384: PUSH
31385: LD_VAR 0 2
31389: PUSH
31390: FOR_IN
31391: IFFALSE 31407
// SetLives ( i , 1 ) ;
31393: LD_VAR 0 1
31397: PPUSH
31398: LD_INT 1
31400: PPUSH
31401: CALL_OW 234
31405: GO 31390
31407: POP
31408: POP
// end ;
31409: PPOPN 2
31411: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31412: LD_EXP 52
31416: PUSH
31417: LD_EXP 101
31421: AND
31422: IFFALSE 31709
31424: GO 31426
31426: DISABLE
31427: LD_INT 0
31429: PPUSH
31430: PPUSH
31431: PPUSH
// begin i := rand ( 1 , 7 ) ;
31432: LD_ADDR_VAR 0 1
31436: PUSH
31437: LD_INT 1
31439: PPUSH
31440: LD_INT 7
31442: PPUSH
31443: CALL_OW 12
31447: ST_TO_ADDR
// case i of 1 :
31448: LD_VAR 0 1
31452: PUSH
31453: LD_INT 1
31455: DOUBLE
31456: EQUAL
31457: IFTRUE 31461
31459: GO 31471
31461: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31462: LD_STRING earthquake(getX(game), 0, 32)
31464: PPUSH
31465: CALL_OW 559
31469: GO 31709
31471: LD_INT 2
31473: DOUBLE
31474: EQUAL
31475: IFTRUE 31479
31477: GO 31493
31479: POP
// begin ToLua ( displayStucuk(); ) ;
31480: LD_STRING displayStucuk();
31482: PPUSH
31483: CALL_OW 559
// ResetFog ;
31487: CALL_OW 335
// end ; 3 :
31491: GO 31709
31493: LD_INT 3
31495: DOUBLE
31496: EQUAL
31497: IFTRUE 31501
31499: GO 31605
31501: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31502: LD_ADDR_VAR 0 2
31506: PUSH
31507: LD_INT 22
31509: PUSH
31510: LD_OWVAR 2
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 25
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PPUSH
31533: CALL_OW 69
31537: ST_TO_ADDR
// if not tmp then
31538: LD_VAR 0 2
31542: NOT
31543: IFFALSE 31547
// exit ;
31545: GO 31709
// un := tmp [ rand ( 1 , tmp ) ] ;
31547: LD_ADDR_VAR 0 3
31551: PUSH
31552: LD_VAR 0 2
31556: PUSH
31557: LD_INT 1
31559: PPUSH
31560: LD_VAR 0 2
31564: PPUSH
31565: CALL_OW 12
31569: ARRAY
31570: ST_TO_ADDR
// if Crawls ( un ) then
31571: LD_VAR 0 3
31575: PPUSH
31576: CALL_OW 318
31580: IFFALSE 31591
// ComWalk ( un ) ;
31582: LD_VAR 0 3
31586: PPUSH
31587: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31591: LD_VAR 0 3
31595: PPUSH
31596: LD_INT 8
31598: PPUSH
31599: CALL_OW 336
// end ; 4 :
31603: GO 31709
31605: LD_INT 4
31607: DOUBLE
31608: EQUAL
31609: IFTRUE 31613
31611: GO 31687
31613: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31614: LD_ADDR_VAR 0 2
31618: PUSH
31619: LD_INT 22
31621: PUSH
31622: LD_OWVAR 2
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 30
31633: PUSH
31634: LD_INT 29
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PPUSH
31645: CALL_OW 69
31649: ST_TO_ADDR
// if not tmp then
31650: LD_VAR 0 2
31654: NOT
31655: IFFALSE 31659
// exit ;
31657: GO 31709
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31659: LD_VAR 0 2
31663: PUSH
31664: LD_INT 1
31666: ARRAY
31667: PPUSH
31668: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31672: LD_VAR 0 2
31676: PUSH
31677: LD_INT 1
31679: ARRAY
31680: PPUSH
31681: CALL_OW 65
// end ; 5 .. 7 :
31685: GO 31709
31687: LD_INT 5
31689: DOUBLE
31690: GREATEREQUAL
31691: IFFALSE 31699
31693: LD_INT 7
31695: DOUBLE
31696: LESSEQUAL
31697: IFTRUE 31701
31699: GO 31708
31701: POP
// StreamSibBomb ; end ;
31702: CALL 27946 0 0
31706: GO 31709
31708: POP
// end ;
31709: PPOPN 3
31711: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31712: LD_EXP 52
31716: PUSH
31717: LD_EXP 102
31721: AND
31722: IFFALSE 31878
31724: GO 31726
31726: DISABLE
31727: LD_INT 0
31729: PPUSH
31730: PPUSH
31731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31732: LD_ADDR_VAR 0 2
31736: PUSH
31737: LD_INT 81
31739: PUSH
31740: LD_OWVAR 2
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 2
31751: PUSH
31752: LD_INT 21
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 21
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PPUSH
31781: CALL_OW 69
31785: ST_TO_ADDR
// if not tmp then
31786: LD_VAR 0 2
31790: NOT
31791: IFFALSE 31795
// exit ;
31793: GO 31878
// p := 0 ;
31795: LD_ADDR_VAR 0 3
31799: PUSH
31800: LD_INT 0
31802: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31803: LD_INT 35
31805: PPUSH
31806: CALL_OW 67
// p := p + 1 ;
31810: LD_ADDR_VAR 0 3
31814: PUSH
31815: LD_VAR 0 3
31819: PUSH
31820: LD_INT 1
31822: PLUS
31823: ST_TO_ADDR
// for i in tmp do
31824: LD_ADDR_VAR 0 1
31828: PUSH
31829: LD_VAR 0 2
31833: PUSH
31834: FOR_IN
31835: IFFALSE 31866
// if GetLives ( i ) < 1000 then
31837: LD_VAR 0 1
31841: PPUSH
31842: CALL_OW 256
31846: PUSH
31847: LD_INT 1000
31849: LESS
31850: IFFALSE 31864
// SetLives ( i , 1000 ) ;
31852: LD_VAR 0 1
31856: PPUSH
31857: LD_INT 1000
31859: PPUSH
31860: CALL_OW 234
31864: GO 31834
31866: POP
31867: POP
// until p > 20 ;
31868: LD_VAR 0 3
31872: PUSH
31873: LD_INT 20
31875: GREATER
31876: IFFALSE 31803
// end ;
31878: PPOPN 3
31880: END
// every 0 0$1 trigger StreamModeActive and sTime do
31881: LD_EXP 52
31885: PUSH
31886: LD_EXP 103
31890: AND
31891: IFFALSE 31926
31893: GO 31895
31895: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31896: LD_INT 28
31898: PPUSH
31899: LD_OWVAR 2
31903: PPUSH
31904: LD_INT 2
31906: PPUSH
31907: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31911: LD_INT 30
31913: PPUSH
31914: LD_OWVAR 2
31918: PPUSH
31919: LD_INT 2
31921: PPUSH
31922: CALL_OW 322
// end ;
31926: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31927: LD_EXP 52
31931: PUSH
31932: LD_EXP 104
31936: AND
31937: IFFALSE 32058
31939: GO 31941
31941: DISABLE
31942: LD_INT 0
31944: PPUSH
31945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31946: LD_ADDR_VAR 0 2
31950: PUSH
31951: LD_INT 22
31953: PUSH
31954: LD_OWVAR 2
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 21
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 3
31975: PUSH
31976: LD_INT 23
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: PPUSH
31995: CALL_OW 69
31999: ST_TO_ADDR
// if not tmp then
32000: LD_VAR 0 2
32004: NOT
32005: IFFALSE 32009
// exit ;
32007: GO 32058
// for i in tmp do
32009: LD_ADDR_VAR 0 1
32013: PUSH
32014: LD_VAR 0 2
32018: PUSH
32019: FOR_IN
32020: IFFALSE 32056
// begin if Crawls ( i ) then
32022: LD_VAR 0 1
32026: PPUSH
32027: CALL_OW 318
32031: IFFALSE 32042
// ComWalk ( i ) ;
32033: LD_VAR 0 1
32037: PPUSH
32038: CALL_OW 138
// SetClass ( i , 2 ) ;
32042: LD_VAR 0 1
32046: PPUSH
32047: LD_INT 2
32049: PPUSH
32050: CALL_OW 336
// end ;
32054: GO 32019
32056: POP
32057: POP
// end ;
32058: PPOPN 2
32060: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32061: LD_EXP 52
32065: PUSH
32066: LD_EXP 105
32070: AND
32071: IFFALSE 32359
32073: GO 32075
32075: DISABLE
32076: LD_INT 0
32078: PPUSH
32079: PPUSH
32080: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32081: LD_OWVAR 2
32085: PPUSH
32086: LD_INT 9
32088: PPUSH
32089: LD_INT 1
32091: PPUSH
32092: LD_INT 1
32094: PPUSH
32095: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32099: LD_INT 9
32101: PPUSH
32102: LD_OWVAR 2
32106: PPUSH
32107: CALL_OW 343
// uc_side := 9 ;
32111: LD_ADDR_OWVAR 20
32115: PUSH
32116: LD_INT 9
32118: ST_TO_ADDR
// uc_nation := 2 ;
32119: LD_ADDR_OWVAR 21
32123: PUSH
32124: LD_INT 2
32126: ST_TO_ADDR
// hc_name := Dark Warrior ;
32127: LD_ADDR_OWVAR 26
32131: PUSH
32132: LD_STRING Dark Warrior
32134: ST_TO_ADDR
// hc_gallery :=  ;
32135: LD_ADDR_OWVAR 33
32139: PUSH
32140: LD_STRING 
32142: ST_TO_ADDR
// hc_noskilllimit := true ;
32143: LD_ADDR_OWVAR 76
32147: PUSH
32148: LD_INT 1
32150: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32151: LD_ADDR_OWVAR 31
32155: PUSH
32156: LD_INT 30
32158: PUSH
32159: LD_INT 30
32161: PUSH
32162: LD_INT 30
32164: PUSH
32165: LD_INT 30
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: ST_TO_ADDR
// un := CreateHuman ;
32174: LD_ADDR_VAR 0 3
32178: PUSH
32179: CALL_OW 44
32183: ST_TO_ADDR
// hc_noskilllimit := false ;
32184: LD_ADDR_OWVAR 76
32188: PUSH
32189: LD_INT 0
32191: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32192: LD_VAR 0 3
32196: PPUSH
32197: LD_INT 1
32199: PPUSH
32200: CALL_OW 51
// ToLua ( playRanger() ) ;
32204: LD_STRING playRanger()
32206: PPUSH
32207: CALL_OW 559
// p := 0 ;
32211: LD_ADDR_VAR 0 2
32215: PUSH
32216: LD_INT 0
32218: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32219: LD_INT 35
32221: PPUSH
32222: CALL_OW 67
// p := p + 1 ;
32226: LD_ADDR_VAR 0 2
32230: PUSH
32231: LD_VAR 0 2
32235: PUSH
32236: LD_INT 1
32238: PLUS
32239: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32240: LD_VAR 0 3
32244: PPUSH
32245: CALL_OW 256
32249: PUSH
32250: LD_INT 1000
32252: LESS
32253: IFFALSE 32267
// SetLives ( un , 1000 ) ;
32255: LD_VAR 0 3
32259: PPUSH
32260: LD_INT 1000
32262: PPUSH
32263: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32267: LD_VAR 0 3
32271: PPUSH
32272: LD_INT 81
32274: PUSH
32275: LD_OWVAR 2
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 91
32286: PUSH
32287: LD_VAR 0 3
32291: PUSH
32292: LD_INT 30
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: LIST
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PPUSH
32304: CALL_OW 69
32308: PPUSH
32309: LD_VAR 0 3
32313: PPUSH
32314: CALL_OW 74
32318: PPUSH
32319: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32323: LD_VAR 0 2
32327: PUSH
32328: LD_INT 80
32330: GREATER
32331: PUSH
32332: LD_VAR 0 3
32336: PPUSH
32337: CALL_OW 301
32341: OR
32342: IFFALSE 32219
// if un then
32344: LD_VAR 0 3
32348: IFFALSE 32359
// RemoveUnit ( un ) ;
32350: LD_VAR 0 3
32354: PPUSH
32355: CALL_OW 64
// end ;
32359: PPOPN 3
32361: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32362: LD_EXP 106
32366: IFFALSE 32482
32368: GO 32370
32370: DISABLE
32371: LD_INT 0
32373: PPUSH
32374: PPUSH
32375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32376: LD_ADDR_VAR 0 2
32380: PUSH
32381: LD_INT 81
32383: PUSH
32384: LD_OWVAR 2
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 21
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PPUSH
32407: CALL_OW 69
32411: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32412: LD_STRING playComputer()
32414: PPUSH
32415: CALL_OW 559
// if not tmp then
32419: LD_VAR 0 2
32423: NOT
32424: IFFALSE 32428
// exit ;
32426: GO 32482
// for i in tmp do
32428: LD_ADDR_VAR 0 1
32432: PUSH
32433: LD_VAR 0 2
32437: PUSH
32438: FOR_IN
32439: IFFALSE 32480
// for j := 1 to 4 do
32441: LD_ADDR_VAR 0 3
32445: PUSH
32446: DOUBLE
32447: LD_INT 1
32449: DEC
32450: ST_TO_ADDR
32451: LD_INT 4
32453: PUSH
32454: FOR_TO
32455: IFFALSE 32476
// SetSkill ( i , j , 10 ) ;
32457: LD_VAR 0 1
32461: PPUSH
32462: LD_VAR 0 3
32466: PPUSH
32467: LD_INT 10
32469: PPUSH
32470: CALL_OW 237
32474: GO 32454
32476: POP
32477: POP
32478: GO 32438
32480: POP
32481: POP
// end ;
32482: PPOPN 3
32484: END
// every 0 0$1 trigger s30 do var i , tmp ;
32485: LD_EXP 107
32489: IFFALSE 32558
32491: GO 32493
32493: DISABLE
32494: LD_INT 0
32496: PPUSH
32497: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32498: LD_ADDR_VAR 0 2
32502: PUSH
32503: LD_INT 22
32505: PUSH
32506: LD_OWVAR 2
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PPUSH
32515: CALL_OW 69
32519: ST_TO_ADDR
// if not tmp then
32520: LD_VAR 0 2
32524: NOT
32525: IFFALSE 32529
// exit ;
32527: GO 32558
// for i in tmp do
32529: LD_ADDR_VAR 0 1
32533: PUSH
32534: LD_VAR 0 2
32538: PUSH
32539: FOR_IN
32540: IFFALSE 32556
// SetLives ( i , 300 ) ;
32542: LD_VAR 0 1
32546: PPUSH
32547: LD_INT 300
32549: PPUSH
32550: CALL_OW 234
32554: GO 32539
32556: POP
32557: POP
// end ;
32558: PPOPN 2
32560: END
// every 0 0$1 trigger s60 do var i , tmp ;
32561: LD_EXP 108
32565: IFFALSE 32634
32567: GO 32569
32569: DISABLE
32570: LD_INT 0
32572: PPUSH
32573: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32574: LD_ADDR_VAR 0 2
32578: PUSH
32579: LD_INT 22
32581: PUSH
32582: LD_OWVAR 2
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PPUSH
32591: CALL_OW 69
32595: ST_TO_ADDR
// if not tmp then
32596: LD_VAR 0 2
32600: NOT
32601: IFFALSE 32605
// exit ;
32603: GO 32634
// for i in tmp do
32605: LD_ADDR_VAR 0 1
32609: PUSH
32610: LD_VAR 0 2
32614: PUSH
32615: FOR_IN
32616: IFFALSE 32632
// SetLives ( i , 600 ) ;
32618: LD_VAR 0 1
32622: PPUSH
32623: LD_INT 600
32625: PPUSH
32626: CALL_OW 234
32630: GO 32615
32632: POP
32633: POP
// end ;
32634: PPOPN 2
32636: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32637: LD_INT 0
32639: PPUSH
// case cmd of 301 :
32640: LD_VAR 0 1
32644: PUSH
32645: LD_INT 301
32647: DOUBLE
32648: EQUAL
32649: IFTRUE 32653
32651: GO 32685
32653: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32654: LD_VAR 0 6
32658: PPUSH
32659: LD_VAR 0 7
32663: PPUSH
32664: LD_VAR 0 8
32668: PPUSH
32669: LD_VAR 0 4
32673: PPUSH
32674: LD_VAR 0 5
32678: PPUSH
32679: CALL 33894 0 5
32683: GO 32806
32685: LD_INT 302
32687: DOUBLE
32688: EQUAL
32689: IFTRUE 32693
32691: GO 32730
32693: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32694: LD_VAR 0 6
32698: PPUSH
32699: LD_VAR 0 7
32703: PPUSH
32704: LD_VAR 0 8
32708: PPUSH
32709: LD_VAR 0 9
32713: PPUSH
32714: LD_VAR 0 4
32718: PPUSH
32719: LD_VAR 0 5
32723: PPUSH
32724: CALL 33985 0 6
32728: GO 32806
32730: LD_INT 303
32732: DOUBLE
32733: EQUAL
32734: IFTRUE 32738
32736: GO 32775
32738: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32739: LD_VAR 0 6
32743: PPUSH
32744: LD_VAR 0 7
32748: PPUSH
32749: LD_VAR 0 8
32753: PPUSH
32754: LD_VAR 0 9
32758: PPUSH
32759: LD_VAR 0 4
32763: PPUSH
32764: LD_VAR 0 5
32768: PPUSH
32769: CALL 32811 0 6
32773: GO 32806
32775: LD_INT 304
32777: DOUBLE
32778: EQUAL
32779: IFTRUE 32783
32781: GO 32805
32783: POP
// hHackTeleport ( unit , x , y ) ; end ;
32784: LD_VAR 0 2
32788: PPUSH
32789: LD_VAR 0 4
32793: PPUSH
32794: LD_VAR 0 5
32798: PPUSH
32799: CALL 34578 0 3
32803: GO 32806
32805: POP
// end ;
32806: LD_VAR 0 12
32810: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32811: LD_INT 0
32813: PPUSH
32814: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32815: LD_VAR 0 1
32819: PUSH
32820: LD_INT 1
32822: LESS
32823: PUSH
32824: LD_VAR 0 1
32828: PUSH
32829: LD_INT 3
32831: GREATER
32832: OR
32833: PUSH
32834: LD_VAR 0 5
32838: PPUSH
32839: LD_VAR 0 6
32843: PPUSH
32844: CALL_OW 428
32848: OR
32849: IFFALSE 32853
// exit ;
32851: GO 33581
// uc_side := your_side ;
32853: LD_ADDR_OWVAR 20
32857: PUSH
32858: LD_OWVAR 2
32862: ST_TO_ADDR
// uc_nation := nation ;
32863: LD_ADDR_OWVAR 21
32867: PUSH
32868: LD_VAR 0 1
32872: ST_TO_ADDR
// bc_level = 1 ;
32873: LD_ADDR_OWVAR 43
32877: PUSH
32878: LD_INT 1
32880: ST_TO_ADDR
// case btype of 1 :
32881: LD_VAR 0 2
32885: PUSH
32886: LD_INT 1
32888: DOUBLE
32889: EQUAL
32890: IFTRUE 32894
32892: GO 32905
32894: POP
// bc_type := b_depot ; 2 :
32895: LD_ADDR_OWVAR 42
32899: PUSH
32900: LD_INT 0
32902: ST_TO_ADDR
32903: GO 33525
32905: LD_INT 2
32907: DOUBLE
32908: EQUAL
32909: IFTRUE 32913
32911: GO 32924
32913: POP
// bc_type := b_warehouse ; 3 :
32914: LD_ADDR_OWVAR 42
32918: PUSH
32919: LD_INT 1
32921: ST_TO_ADDR
32922: GO 33525
32924: LD_INT 3
32926: DOUBLE
32927: EQUAL
32928: IFTRUE 32932
32930: GO 32943
32932: POP
// bc_type := b_lab ; 4 .. 9 :
32933: LD_ADDR_OWVAR 42
32937: PUSH
32938: LD_INT 6
32940: ST_TO_ADDR
32941: GO 33525
32943: LD_INT 4
32945: DOUBLE
32946: GREATEREQUAL
32947: IFFALSE 32955
32949: LD_INT 9
32951: DOUBLE
32952: LESSEQUAL
32953: IFTRUE 32957
32955: GO 33017
32957: POP
// begin bc_type := b_lab_half ;
32958: LD_ADDR_OWVAR 42
32962: PUSH
32963: LD_INT 7
32965: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32966: LD_ADDR_OWVAR 44
32970: PUSH
32971: LD_INT 10
32973: PUSH
32974: LD_INT 11
32976: PUSH
32977: LD_INT 12
32979: PUSH
32980: LD_INT 15
32982: PUSH
32983: LD_INT 14
32985: PUSH
32986: LD_INT 13
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: PUSH
32997: LD_VAR 0 2
33001: PUSH
33002: LD_INT 3
33004: MINUS
33005: ARRAY
33006: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33007: LD_ADDR_OWVAR 45
33011: PUSH
33012: LD_INT 9
33014: ST_TO_ADDR
// end ; 10 .. 13 :
33015: GO 33525
33017: LD_INT 10
33019: DOUBLE
33020: GREATEREQUAL
33021: IFFALSE 33029
33023: LD_INT 13
33025: DOUBLE
33026: LESSEQUAL
33027: IFTRUE 33031
33029: GO 33108
33031: POP
// begin bc_type := b_lab_full ;
33032: LD_ADDR_OWVAR 42
33036: PUSH
33037: LD_INT 8
33039: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33040: LD_ADDR_OWVAR 44
33044: PUSH
33045: LD_INT 10
33047: PUSH
33048: LD_INT 12
33050: PUSH
33051: LD_INT 14
33053: PUSH
33054: LD_INT 13
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: PUSH
33063: LD_VAR 0 2
33067: PUSH
33068: LD_INT 9
33070: MINUS
33071: ARRAY
33072: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33073: LD_ADDR_OWVAR 45
33077: PUSH
33078: LD_INT 11
33080: PUSH
33081: LD_INT 15
33083: PUSH
33084: LD_INT 12
33086: PUSH
33087: LD_INT 15
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: PUSH
33096: LD_VAR 0 2
33100: PUSH
33101: LD_INT 9
33103: MINUS
33104: ARRAY
33105: ST_TO_ADDR
// end ; 14 :
33106: GO 33525
33108: LD_INT 14
33110: DOUBLE
33111: EQUAL
33112: IFTRUE 33116
33114: GO 33127
33116: POP
// bc_type := b_workshop ; 15 :
33117: LD_ADDR_OWVAR 42
33121: PUSH
33122: LD_INT 2
33124: ST_TO_ADDR
33125: GO 33525
33127: LD_INT 15
33129: DOUBLE
33130: EQUAL
33131: IFTRUE 33135
33133: GO 33146
33135: POP
// bc_type := b_factory ; 16 :
33136: LD_ADDR_OWVAR 42
33140: PUSH
33141: LD_INT 3
33143: ST_TO_ADDR
33144: GO 33525
33146: LD_INT 16
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33165
33154: POP
// bc_type := b_ext_gun ; 17 :
33155: LD_ADDR_OWVAR 42
33159: PUSH
33160: LD_INT 17
33162: ST_TO_ADDR
33163: GO 33525
33165: LD_INT 17
33167: DOUBLE
33168: EQUAL
33169: IFTRUE 33173
33171: GO 33201
33173: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33174: LD_ADDR_OWVAR 42
33178: PUSH
33179: LD_INT 19
33181: PUSH
33182: LD_INT 23
33184: PUSH
33185: LD_INT 19
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: LIST
33192: PUSH
33193: LD_VAR 0 1
33197: ARRAY
33198: ST_TO_ADDR
33199: GO 33525
33201: LD_INT 18
33203: DOUBLE
33204: EQUAL
33205: IFTRUE 33209
33207: GO 33220
33209: POP
// bc_type := b_ext_radar ; 19 :
33210: LD_ADDR_OWVAR 42
33214: PUSH
33215: LD_INT 20
33217: ST_TO_ADDR
33218: GO 33525
33220: LD_INT 19
33222: DOUBLE
33223: EQUAL
33224: IFTRUE 33228
33226: GO 33239
33228: POP
// bc_type := b_ext_radio ; 20 :
33229: LD_ADDR_OWVAR 42
33233: PUSH
33234: LD_INT 22
33236: ST_TO_ADDR
33237: GO 33525
33239: LD_INT 20
33241: DOUBLE
33242: EQUAL
33243: IFTRUE 33247
33245: GO 33258
33247: POP
// bc_type := b_ext_siberium ; 21 :
33248: LD_ADDR_OWVAR 42
33252: PUSH
33253: LD_INT 21
33255: ST_TO_ADDR
33256: GO 33525
33258: LD_INT 21
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33266
33264: GO 33277
33266: POP
// bc_type := b_ext_computer ; 22 :
33267: LD_ADDR_OWVAR 42
33271: PUSH
33272: LD_INT 24
33274: ST_TO_ADDR
33275: GO 33525
33277: LD_INT 22
33279: DOUBLE
33280: EQUAL
33281: IFTRUE 33285
33283: GO 33296
33285: POP
// bc_type := b_ext_track ; 23 :
33286: LD_ADDR_OWVAR 42
33290: PUSH
33291: LD_INT 16
33293: ST_TO_ADDR
33294: GO 33525
33296: LD_INT 23
33298: DOUBLE
33299: EQUAL
33300: IFTRUE 33304
33302: GO 33315
33304: POP
// bc_type := b_ext_laser ; 24 :
33305: LD_ADDR_OWVAR 42
33309: PUSH
33310: LD_INT 25
33312: ST_TO_ADDR
33313: GO 33525
33315: LD_INT 24
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33323
33321: GO 33334
33323: POP
// bc_type := b_control_tower ; 25 :
33324: LD_ADDR_OWVAR 42
33328: PUSH
33329: LD_INT 36
33331: ST_TO_ADDR
33332: GO 33525
33334: LD_INT 25
33336: DOUBLE
33337: EQUAL
33338: IFTRUE 33342
33340: GO 33353
33342: POP
// bc_type := b_breastwork ; 26 :
33343: LD_ADDR_OWVAR 42
33347: PUSH
33348: LD_INT 31
33350: ST_TO_ADDR
33351: GO 33525
33353: LD_INT 26
33355: DOUBLE
33356: EQUAL
33357: IFTRUE 33361
33359: GO 33372
33361: POP
// bc_type := b_bunker ; 27 :
33362: LD_ADDR_OWVAR 42
33366: PUSH
33367: LD_INT 32
33369: ST_TO_ADDR
33370: GO 33525
33372: LD_INT 27
33374: DOUBLE
33375: EQUAL
33376: IFTRUE 33380
33378: GO 33391
33380: POP
// bc_type := b_turret ; 28 :
33381: LD_ADDR_OWVAR 42
33385: PUSH
33386: LD_INT 33
33388: ST_TO_ADDR
33389: GO 33525
33391: LD_INT 28
33393: DOUBLE
33394: EQUAL
33395: IFTRUE 33399
33397: GO 33410
33399: POP
// bc_type := b_armoury ; 29 :
33400: LD_ADDR_OWVAR 42
33404: PUSH
33405: LD_INT 4
33407: ST_TO_ADDR
33408: GO 33525
33410: LD_INT 29
33412: DOUBLE
33413: EQUAL
33414: IFTRUE 33418
33416: GO 33429
33418: POP
// bc_type := b_barracks ; 30 :
33419: LD_ADDR_OWVAR 42
33423: PUSH
33424: LD_INT 5
33426: ST_TO_ADDR
33427: GO 33525
33429: LD_INT 30
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33437
33435: GO 33448
33437: POP
// bc_type := b_solar_power ; 31 :
33438: LD_ADDR_OWVAR 42
33442: PUSH
33443: LD_INT 27
33445: ST_TO_ADDR
33446: GO 33525
33448: LD_INT 31
33450: DOUBLE
33451: EQUAL
33452: IFTRUE 33456
33454: GO 33467
33456: POP
// bc_type := b_oil_power ; 32 :
33457: LD_ADDR_OWVAR 42
33461: PUSH
33462: LD_INT 26
33464: ST_TO_ADDR
33465: GO 33525
33467: LD_INT 32
33469: DOUBLE
33470: EQUAL
33471: IFTRUE 33475
33473: GO 33486
33475: POP
// bc_type := b_siberite_power ; 33 :
33476: LD_ADDR_OWVAR 42
33480: PUSH
33481: LD_INT 28
33483: ST_TO_ADDR
33484: GO 33525
33486: LD_INT 33
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33505
33494: POP
// bc_type := b_oil_mine ; 34 :
33495: LD_ADDR_OWVAR 42
33499: PUSH
33500: LD_INT 29
33502: ST_TO_ADDR
33503: GO 33525
33505: LD_INT 34
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33513
33511: GO 33524
33513: POP
// bc_type := b_siberite_mine ; end ;
33514: LD_ADDR_OWVAR 42
33518: PUSH
33519: LD_INT 30
33521: ST_TO_ADDR
33522: GO 33525
33524: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33525: LD_ADDR_VAR 0 8
33529: PUSH
33530: LD_VAR 0 5
33534: PPUSH
33535: LD_VAR 0 6
33539: PPUSH
33540: LD_VAR 0 3
33544: PPUSH
33545: CALL_OW 47
33549: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33550: LD_OWVAR 42
33554: PUSH
33555: LD_INT 32
33557: PUSH
33558: LD_INT 33
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: IN
33565: IFFALSE 33581
// PlaceWeaponTurret ( b , weapon ) ;
33567: LD_VAR 0 8
33571: PPUSH
33572: LD_VAR 0 4
33576: PPUSH
33577: CALL_OW 431
// end ;
33581: LD_VAR 0 7
33585: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33586: LD_INT 0
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33592: LD_ADDR_VAR 0 4
33596: PUSH
33597: LD_INT 22
33599: PUSH
33600: LD_OWVAR 2
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: LD_INT 30
33614: PUSH
33615: LD_INT 0
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 30
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PPUSH
33641: CALL_OW 69
33645: ST_TO_ADDR
// if not tmp then
33646: LD_VAR 0 4
33650: NOT
33651: IFFALSE 33655
// exit ;
33653: GO 33714
// for i in tmp do
33655: LD_ADDR_VAR 0 2
33659: PUSH
33660: LD_VAR 0 4
33664: PUSH
33665: FOR_IN
33666: IFFALSE 33712
// for j = 1 to 3 do
33668: LD_ADDR_VAR 0 3
33672: PUSH
33673: DOUBLE
33674: LD_INT 1
33676: DEC
33677: ST_TO_ADDR
33678: LD_INT 3
33680: PUSH
33681: FOR_TO
33682: IFFALSE 33708
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33684: LD_VAR 0 2
33688: PPUSH
33689: CALL_OW 274
33693: PPUSH
33694: LD_VAR 0 3
33698: PPUSH
33699: LD_INT 99999
33701: PPUSH
33702: CALL_OW 277
33706: GO 33681
33708: POP
33709: POP
33710: GO 33665
33712: POP
33713: POP
// end ;
33714: LD_VAR 0 1
33718: RET
// export function hHackSetLevel10 ; var i , j ; begin
33719: LD_INT 0
33721: PPUSH
33722: PPUSH
33723: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33724: LD_ADDR_VAR 0 2
33728: PUSH
33729: LD_INT 21
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PPUSH
33739: CALL_OW 69
33743: PUSH
33744: FOR_IN
33745: IFFALSE 33797
// if IsSelected ( i ) then
33747: LD_VAR 0 2
33751: PPUSH
33752: CALL_OW 306
33756: IFFALSE 33795
// begin for j := 1 to 4 do
33758: LD_ADDR_VAR 0 3
33762: PUSH
33763: DOUBLE
33764: LD_INT 1
33766: DEC
33767: ST_TO_ADDR
33768: LD_INT 4
33770: PUSH
33771: FOR_TO
33772: IFFALSE 33793
// SetSkill ( i , j , 10 ) ;
33774: LD_VAR 0 2
33778: PPUSH
33779: LD_VAR 0 3
33783: PPUSH
33784: LD_INT 10
33786: PPUSH
33787: CALL_OW 237
33791: GO 33771
33793: POP
33794: POP
// end ;
33795: GO 33744
33797: POP
33798: POP
// end ;
33799: LD_VAR 0 1
33803: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33804: LD_INT 0
33806: PPUSH
33807: PPUSH
33808: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33809: LD_ADDR_VAR 0 2
33813: PUSH
33814: LD_INT 22
33816: PUSH
33817: LD_OWVAR 2
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 21
33828: PUSH
33829: LD_INT 1
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PPUSH
33840: CALL_OW 69
33844: PUSH
33845: FOR_IN
33846: IFFALSE 33887
// begin for j := 1 to 4 do
33848: LD_ADDR_VAR 0 3
33852: PUSH
33853: DOUBLE
33854: LD_INT 1
33856: DEC
33857: ST_TO_ADDR
33858: LD_INT 4
33860: PUSH
33861: FOR_TO
33862: IFFALSE 33883
// SetSkill ( i , j , 10 ) ;
33864: LD_VAR 0 2
33868: PPUSH
33869: LD_VAR 0 3
33873: PPUSH
33874: LD_INT 10
33876: PPUSH
33877: CALL_OW 237
33881: GO 33861
33883: POP
33884: POP
// end ;
33885: GO 33845
33887: POP
33888: POP
// end ;
33889: LD_VAR 0 1
33893: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33894: LD_INT 0
33896: PPUSH
// uc_side := your_side ;
33897: LD_ADDR_OWVAR 20
33901: PUSH
33902: LD_OWVAR 2
33906: ST_TO_ADDR
// uc_nation := nation ;
33907: LD_ADDR_OWVAR 21
33911: PUSH
33912: LD_VAR 0 1
33916: ST_TO_ADDR
// InitHc ;
33917: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33921: LD_INT 0
33923: PPUSH
33924: LD_VAR 0 2
33928: PPUSH
33929: LD_VAR 0 3
33933: PPUSH
33934: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33938: LD_VAR 0 4
33942: PPUSH
33943: LD_VAR 0 5
33947: PPUSH
33948: CALL_OW 428
33952: PUSH
33953: LD_INT 0
33955: EQUAL
33956: IFFALSE 33980
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33958: CALL_OW 44
33962: PPUSH
33963: LD_VAR 0 4
33967: PPUSH
33968: LD_VAR 0 5
33972: PPUSH
33973: LD_INT 1
33975: PPUSH
33976: CALL_OW 48
// end ;
33980: LD_VAR 0 6
33984: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33985: LD_INT 0
33987: PPUSH
33988: PPUSH
// uc_side := your_side ;
33989: LD_ADDR_OWVAR 20
33993: PUSH
33994: LD_OWVAR 2
33998: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33999: LD_VAR 0 1
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: LD_INT 2
34009: PUSH
34010: LD_INT 3
34012: PUSH
34013: LD_INT 4
34015: PUSH
34016: LD_INT 5
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: IN
34026: IFFALSE 34038
// uc_nation := nation_american else
34028: LD_ADDR_OWVAR 21
34032: PUSH
34033: LD_INT 1
34035: ST_TO_ADDR
34036: GO 34081
// if chassis in [ 11 , 12 , 13 , 14 ] then
34038: LD_VAR 0 1
34042: PUSH
34043: LD_INT 11
34045: PUSH
34046: LD_INT 12
34048: PUSH
34049: LD_INT 13
34051: PUSH
34052: LD_INT 14
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: IN
34061: IFFALSE 34073
// uc_nation := nation_arabian else
34063: LD_ADDR_OWVAR 21
34067: PUSH
34068: LD_INT 2
34070: ST_TO_ADDR
34071: GO 34081
// uc_nation := nation_russian ;
34073: LD_ADDR_OWVAR 21
34077: PUSH
34078: LD_INT 3
34080: ST_TO_ADDR
// vc_chassis := chassis ;
34081: LD_ADDR_OWVAR 37
34085: PUSH
34086: LD_VAR 0 1
34090: ST_TO_ADDR
// vc_engine := engine ;
34091: LD_ADDR_OWVAR 39
34095: PUSH
34096: LD_VAR 0 2
34100: ST_TO_ADDR
// vc_control := control ;
34101: LD_ADDR_OWVAR 38
34105: PUSH
34106: LD_VAR 0 3
34110: ST_TO_ADDR
// vc_weapon := weapon ;
34111: LD_ADDR_OWVAR 40
34115: PUSH
34116: LD_VAR 0 4
34120: ST_TO_ADDR
// un := CreateVehicle ;
34121: LD_ADDR_VAR 0 8
34125: PUSH
34126: CALL_OW 45
34130: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34131: LD_VAR 0 8
34135: PPUSH
34136: LD_INT 0
34138: PPUSH
34139: LD_INT 5
34141: PPUSH
34142: CALL_OW 12
34146: PPUSH
34147: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34151: LD_VAR 0 8
34155: PPUSH
34156: LD_VAR 0 5
34160: PPUSH
34161: LD_VAR 0 6
34165: PPUSH
34166: LD_INT 1
34168: PPUSH
34169: CALL_OW 48
// end ;
34173: LD_VAR 0 7
34177: RET
// export hInvincible ; every 1 do
34178: GO 34180
34180: DISABLE
// hInvincible := [ ] ;
34181: LD_ADDR_EXP 109
34185: PUSH
34186: EMPTY
34187: ST_TO_ADDR
34188: END
// every 10 do var i ;
34189: GO 34191
34191: DISABLE
34192: LD_INT 0
34194: PPUSH
// begin enable ;
34195: ENABLE
// if not hInvincible then
34196: LD_EXP 109
34200: NOT
34201: IFFALSE 34205
// exit ;
34203: GO 34249
// for i in hInvincible do
34205: LD_ADDR_VAR 0 1
34209: PUSH
34210: LD_EXP 109
34214: PUSH
34215: FOR_IN
34216: IFFALSE 34247
// if GetLives ( i ) < 1000 then
34218: LD_VAR 0 1
34222: PPUSH
34223: CALL_OW 256
34227: PUSH
34228: LD_INT 1000
34230: LESS
34231: IFFALSE 34245
// SetLives ( i , 1000 ) ;
34233: LD_VAR 0 1
34237: PPUSH
34238: LD_INT 1000
34240: PPUSH
34241: CALL_OW 234
34245: GO 34215
34247: POP
34248: POP
// end ;
34249: PPOPN 1
34251: END
// export function hHackInvincible ; var i ; begin
34252: LD_INT 0
34254: PPUSH
34255: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34256: LD_ADDR_VAR 0 2
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: LD_INT 21
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 21
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: LIST
34288: PPUSH
34289: CALL_OW 69
34293: PUSH
34294: FOR_IN
34295: IFFALSE 34356
// if IsSelected ( i ) then
34297: LD_VAR 0 2
34301: PPUSH
34302: CALL_OW 306
34306: IFFALSE 34354
// begin if i in hInvincible then
34308: LD_VAR 0 2
34312: PUSH
34313: LD_EXP 109
34317: IN
34318: IFFALSE 34338
// hInvincible := hInvincible diff i else
34320: LD_ADDR_EXP 109
34324: PUSH
34325: LD_EXP 109
34329: PUSH
34330: LD_VAR 0 2
34334: DIFF
34335: ST_TO_ADDR
34336: GO 34354
// hInvincible := hInvincible union i ;
34338: LD_ADDR_EXP 109
34342: PUSH
34343: LD_EXP 109
34347: PUSH
34348: LD_VAR 0 2
34352: UNION
34353: ST_TO_ADDR
// end ;
34354: GO 34294
34356: POP
34357: POP
// end ;
34358: LD_VAR 0 1
34362: RET
// export function hHackInvisible ; var i , j ; begin
34363: LD_INT 0
34365: PPUSH
34366: PPUSH
34367: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34368: LD_ADDR_VAR 0 2
34372: PUSH
34373: LD_INT 21
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PPUSH
34383: CALL_OW 69
34387: PUSH
34388: FOR_IN
34389: IFFALSE 34413
// if IsSelected ( i ) then
34391: LD_VAR 0 2
34395: PPUSH
34396: CALL_OW 306
34400: IFFALSE 34411
// ComForceInvisible ( i ) ;
34402: LD_VAR 0 2
34406: PPUSH
34407: CALL_OW 496
34411: GO 34388
34413: POP
34414: POP
// end ;
34415: LD_VAR 0 1
34419: RET
// export function hHackChangeYourSide ; begin
34420: LD_INT 0
34422: PPUSH
// if your_side = 8 then
34423: LD_OWVAR 2
34427: PUSH
34428: LD_INT 8
34430: EQUAL
34431: IFFALSE 34443
// your_side := 0 else
34433: LD_ADDR_OWVAR 2
34437: PUSH
34438: LD_INT 0
34440: ST_TO_ADDR
34441: GO 34457
// your_side := your_side + 1 ;
34443: LD_ADDR_OWVAR 2
34447: PUSH
34448: LD_OWVAR 2
34452: PUSH
34453: LD_INT 1
34455: PLUS
34456: ST_TO_ADDR
// end ;
34457: LD_VAR 0 1
34461: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34462: LD_INT 0
34464: PPUSH
34465: PPUSH
34466: PPUSH
// for i in all_units do
34467: LD_ADDR_VAR 0 2
34471: PUSH
34472: LD_OWVAR 3
34476: PUSH
34477: FOR_IN
34478: IFFALSE 34556
// if IsSelected ( i ) then
34480: LD_VAR 0 2
34484: PPUSH
34485: CALL_OW 306
34489: IFFALSE 34554
// begin j := GetSide ( i ) ;
34491: LD_ADDR_VAR 0 3
34495: PUSH
34496: LD_VAR 0 2
34500: PPUSH
34501: CALL_OW 255
34505: ST_TO_ADDR
// if j = 8 then
34506: LD_VAR 0 3
34510: PUSH
34511: LD_INT 8
34513: EQUAL
34514: IFFALSE 34526
// j := 0 else
34516: LD_ADDR_VAR 0 3
34520: PUSH
34521: LD_INT 0
34523: ST_TO_ADDR
34524: GO 34540
// j := j + 1 ;
34526: LD_ADDR_VAR 0 3
34530: PUSH
34531: LD_VAR 0 3
34535: PUSH
34536: LD_INT 1
34538: PLUS
34539: ST_TO_ADDR
// SetSide ( i , j ) ;
34540: LD_VAR 0 2
34544: PPUSH
34545: LD_VAR 0 3
34549: PPUSH
34550: CALL_OW 235
// end ;
34554: GO 34477
34556: POP
34557: POP
// end ;
34558: LD_VAR 0 1
34562: RET
// export function hHackFog ; begin
34563: LD_INT 0
34565: PPUSH
// FogOff ( true ) ;
34566: LD_INT 1
34568: PPUSH
34569: CALL_OW 344
// end ;
34573: LD_VAR 0 1
34577: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34578: LD_INT 0
34580: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34581: LD_VAR 0 1
34585: PPUSH
34586: LD_VAR 0 2
34590: PPUSH
34591: LD_VAR 0 3
34595: PPUSH
34596: LD_INT 1
34598: PPUSH
34599: LD_INT 1
34601: PPUSH
34602: CALL_OW 483
// CenterOnXY ( x , y ) ;
34606: LD_VAR 0 2
34610: PPUSH
34611: LD_VAR 0 3
34615: PPUSH
34616: CALL_OW 84
// end ;
34620: LD_VAR 0 4
34624: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34625: LD_INT 0
34627: PPUSH
34628: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34629: LD_VAR 0 1
34633: NOT
34634: PUSH
34635: LD_VAR 0 2
34639: PPUSH
34640: LD_VAR 0 3
34644: PPUSH
34645: CALL_OW 488
34649: NOT
34650: OR
34651: PUSH
34652: LD_VAR 0 1
34656: PPUSH
34657: CALL_OW 266
34661: PUSH
34662: LD_INT 3
34664: NONEQUAL
34665: PUSH
34666: LD_VAR 0 1
34670: PPUSH
34671: CALL_OW 247
34675: PUSH
34676: LD_INT 1
34678: EQUAL
34679: NOT
34680: AND
34681: OR
34682: IFFALSE 34686
// exit ;
34684: GO 34968
// if GetType ( factory ) = unit_human then
34686: LD_VAR 0 1
34690: PPUSH
34691: CALL_OW 247
34695: PUSH
34696: LD_INT 1
34698: EQUAL
34699: IFFALSE 34716
// factory := IsInUnit ( factory ) ;
34701: LD_ADDR_VAR 0 1
34705: PUSH
34706: LD_VAR 0 1
34710: PPUSH
34711: CALL_OW 310
34715: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34716: LD_VAR 0 1
34720: PPUSH
34721: CALL_OW 266
34725: PUSH
34726: LD_INT 3
34728: NONEQUAL
34729: IFFALSE 34733
// exit ;
34731: GO 34968
// for i := 1 to Count ( factoryWaypoints ) do
34733: LD_ADDR_VAR 0 5
34737: PUSH
34738: DOUBLE
34739: LD_INT 1
34741: DEC
34742: ST_TO_ADDR
34743: LD_EXP 110
34747: PPUSH
34748: CALL 43471 0 1
34752: PUSH
34753: FOR_TO
34754: IFFALSE 34916
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34756: LD_VAR 0 2
34760: PPUSH
34761: LD_VAR 0 3
34765: PPUSH
34766: CALL_OW 428
34770: PUSH
34771: LD_EXP 110
34775: PUSH
34776: LD_VAR 0 5
34780: ARRAY
34781: PUSH
34782: LD_INT 2
34784: ARRAY
34785: EQUAL
34786: IFFALSE 34818
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34788: LD_ADDR_EXP 110
34792: PUSH
34793: LD_EXP 110
34797: PPUSH
34798: LD_VAR 0 5
34802: PPUSH
34803: CALL_OW 3
34807: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34808: CALL 34973 0 0
// exit ;
34812: POP
34813: POP
34814: GO 34968
// end else
34816: GO 34914
// if factory = factoryWaypoints [ i ] [ 2 ] then
34818: LD_VAR 0 1
34822: PUSH
34823: LD_EXP 110
34827: PUSH
34828: LD_VAR 0 5
34832: ARRAY
34833: PUSH
34834: LD_INT 2
34836: ARRAY
34837: EQUAL
34838: IFFALSE 34914
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34840: LD_ADDR_EXP 110
34844: PUSH
34845: LD_EXP 110
34849: PPUSH
34850: LD_VAR 0 5
34854: PPUSH
34855: CALL_OW 3
34859: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34860: LD_ADDR_EXP 110
34864: PUSH
34865: LD_EXP 110
34869: PPUSH
34870: LD_VAR 0 1
34874: PPUSH
34875: CALL_OW 255
34879: PUSH
34880: LD_VAR 0 1
34884: PUSH
34885: LD_VAR 0 2
34889: PUSH
34890: LD_VAR 0 3
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: PPUSH
34901: CALL 79080 0 2
34905: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34906: CALL 34973 0 0
// exit ;
34910: POP
34911: POP
34912: GO 34968
// end ; end ;
34914: GO 34753
34916: POP
34917: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34918: LD_ADDR_EXP 110
34922: PUSH
34923: LD_EXP 110
34927: PPUSH
34928: LD_VAR 0 1
34932: PPUSH
34933: CALL_OW 255
34937: PUSH
34938: LD_VAR 0 1
34942: PUSH
34943: LD_VAR 0 2
34947: PUSH
34948: LD_VAR 0 3
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: PPUSH
34959: CALL 79080 0 2
34963: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34964: CALL 34973 0 0
// end ;
34968: LD_VAR 0 4
34972: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34973: LD_INT 0
34975: PPUSH
34976: PPUSH
34977: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34978: LD_STRING resetFactoryWaypoint();
34980: PPUSH
34981: CALL_OW 559
// if factoryWaypoints then
34985: LD_EXP 110
34989: IFFALSE 35110
// begin list := factoryWaypoints ;
34991: LD_ADDR_VAR 0 3
34995: PUSH
34996: LD_EXP 110
35000: ST_TO_ADDR
// for i := 1 to list do
35001: LD_ADDR_VAR 0 2
35005: PUSH
35006: DOUBLE
35007: LD_INT 1
35009: DEC
35010: ST_TO_ADDR
35011: LD_VAR 0 3
35015: PUSH
35016: FOR_TO
35017: IFFALSE 35108
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35019: LD_STRING setFactoryWaypointXY(
35021: PUSH
35022: LD_VAR 0 3
35026: PUSH
35027: LD_VAR 0 2
35031: ARRAY
35032: PUSH
35033: LD_INT 1
35035: ARRAY
35036: STR
35037: PUSH
35038: LD_STRING ,
35040: STR
35041: PUSH
35042: LD_VAR 0 3
35046: PUSH
35047: LD_VAR 0 2
35051: ARRAY
35052: PUSH
35053: LD_INT 2
35055: ARRAY
35056: STR
35057: PUSH
35058: LD_STRING ,
35060: STR
35061: PUSH
35062: LD_VAR 0 3
35066: PUSH
35067: LD_VAR 0 2
35071: ARRAY
35072: PUSH
35073: LD_INT 3
35075: ARRAY
35076: STR
35077: PUSH
35078: LD_STRING ,
35080: STR
35081: PUSH
35082: LD_VAR 0 3
35086: PUSH
35087: LD_VAR 0 2
35091: ARRAY
35092: PUSH
35093: LD_INT 4
35095: ARRAY
35096: STR
35097: PUSH
35098: LD_STRING )
35100: STR
35101: PPUSH
35102: CALL_OW 559
35106: GO 35016
35108: POP
35109: POP
// end ; end ;
35110: LD_VAR 0 1
35114: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35115: LD_INT 0
35117: PPUSH
// if HexInfo ( x , y ) = warehouse then
35118: LD_VAR 0 2
35122: PPUSH
35123: LD_VAR 0 3
35127: PPUSH
35128: CALL_OW 428
35132: PUSH
35133: LD_VAR 0 1
35137: EQUAL
35138: IFFALSE 35165
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35140: LD_ADDR_EXP 111
35144: PUSH
35145: LD_EXP 111
35149: PPUSH
35150: LD_VAR 0 1
35154: PPUSH
35155: LD_INT 0
35157: PPUSH
35158: CALL_OW 1
35162: ST_TO_ADDR
35163: GO 35216
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35165: LD_ADDR_EXP 111
35169: PUSH
35170: LD_EXP 111
35174: PPUSH
35175: LD_VAR 0 1
35179: PPUSH
35180: LD_VAR 0 1
35184: PPUSH
35185: CALL_OW 255
35189: PUSH
35190: LD_VAR 0 1
35194: PUSH
35195: LD_VAR 0 2
35199: PUSH
35200: LD_VAR 0 3
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: PPUSH
35211: CALL_OW 1
35215: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35216: CALL 35225 0 0
// end ;
35220: LD_VAR 0 4
35224: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35225: LD_INT 0
35227: PPUSH
35228: PPUSH
35229: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35230: LD_STRING resetWarehouseGatheringPoints();
35232: PPUSH
35233: CALL_OW 559
// if warehouseGatheringPoints then
35237: LD_EXP 111
35241: IFFALSE 35367
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35243: LD_ADDR_VAR 0 3
35247: PUSH
35248: LD_EXP 111
35252: PPUSH
35253: CALL 82842 0 1
35257: ST_TO_ADDR
// for i := 1 to list do
35258: LD_ADDR_VAR 0 2
35262: PUSH
35263: DOUBLE
35264: LD_INT 1
35266: DEC
35267: ST_TO_ADDR
35268: LD_VAR 0 3
35272: PUSH
35273: FOR_TO
35274: IFFALSE 35365
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35276: LD_STRING setWarehouseGatheringPointXY(
35278: PUSH
35279: LD_VAR 0 3
35283: PUSH
35284: LD_VAR 0 2
35288: ARRAY
35289: PUSH
35290: LD_INT 1
35292: ARRAY
35293: STR
35294: PUSH
35295: LD_STRING ,
35297: STR
35298: PUSH
35299: LD_VAR 0 3
35303: PUSH
35304: LD_VAR 0 2
35308: ARRAY
35309: PUSH
35310: LD_INT 2
35312: ARRAY
35313: STR
35314: PUSH
35315: LD_STRING ,
35317: STR
35318: PUSH
35319: LD_VAR 0 3
35323: PUSH
35324: LD_VAR 0 2
35328: ARRAY
35329: PUSH
35330: LD_INT 3
35332: ARRAY
35333: STR
35334: PUSH
35335: LD_STRING ,
35337: STR
35338: PUSH
35339: LD_VAR 0 3
35343: PUSH
35344: LD_VAR 0 2
35348: ARRAY
35349: PUSH
35350: LD_INT 4
35352: ARRAY
35353: STR
35354: PUSH
35355: LD_STRING )
35357: STR
35358: PPUSH
35359: CALL_OW 559
35363: GO 35273
35365: POP
35366: POP
// end ; end ;
35367: LD_VAR 0 1
35371: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35372: LD_EXP 111
35376: IFFALSE 36061
35378: GO 35380
35380: DISABLE
35381: LD_INT 0
35383: PPUSH
35384: PPUSH
35385: PPUSH
35386: PPUSH
35387: PPUSH
35388: PPUSH
35389: PPUSH
35390: PPUSH
35391: PPUSH
// begin enable ;
35392: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35393: LD_ADDR_VAR 0 3
35397: PUSH
35398: LD_EXP 111
35402: PPUSH
35403: CALL 82842 0 1
35407: ST_TO_ADDR
// if not list then
35408: LD_VAR 0 3
35412: NOT
35413: IFFALSE 35417
// exit ;
35415: GO 36061
// for i := 1 to list do
35417: LD_ADDR_VAR 0 1
35421: PUSH
35422: DOUBLE
35423: LD_INT 1
35425: DEC
35426: ST_TO_ADDR
35427: LD_VAR 0 3
35431: PUSH
35432: FOR_TO
35433: IFFALSE 36059
// begin depot := list [ i ] [ 2 ] ;
35435: LD_ADDR_VAR 0 8
35439: PUSH
35440: LD_VAR 0 3
35444: PUSH
35445: LD_VAR 0 1
35449: ARRAY
35450: PUSH
35451: LD_INT 2
35453: ARRAY
35454: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35455: LD_ADDR_VAR 0 5
35459: PUSH
35460: LD_VAR 0 3
35464: PUSH
35465: LD_VAR 0 1
35469: ARRAY
35470: PUSH
35471: LD_INT 1
35473: ARRAY
35474: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35475: LD_VAR 0 8
35479: PPUSH
35480: CALL_OW 301
35484: PUSH
35485: LD_VAR 0 5
35489: PUSH
35490: LD_VAR 0 8
35494: PPUSH
35495: CALL_OW 255
35499: NONEQUAL
35500: OR
35501: IFFALSE 35530
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35503: LD_ADDR_EXP 111
35507: PUSH
35508: LD_EXP 111
35512: PPUSH
35513: LD_VAR 0 8
35517: PPUSH
35518: LD_INT 0
35520: PPUSH
35521: CALL_OW 1
35525: ST_TO_ADDR
// exit ;
35526: POP
35527: POP
35528: GO 36061
// end ; x := list [ i ] [ 3 ] ;
35530: LD_ADDR_VAR 0 6
35534: PUSH
35535: LD_VAR 0 3
35539: PUSH
35540: LD_VAR 0 1
35544: ARRAY
35545: PUSH
35546: LD_INT 3
35548: ARRAY
35549: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35550: LD_ADDR_VAR 0 7
35554: PUSH
35555: LD_VAR 0 3
35559: PUSH
35560: LD_VAR 0 1
35564: ARRAY
35565: PUSH
35566: LD_INT 4
35568: ARRAY
35569: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35570: LD_ADDR_VAR 0 9
35574: PUSH
35575: LD_VAR 0 6
35579: PPUSH
35580: LD_VAR 0 7
35584: PPUSH
35585: LD_INT 16
35587: PPUSH
35588: CALL 81426 0 3
35592: ST_TO_ADDR
// if not cratesNearbyPoint then
35593: LD_VAR 0 9
35597: NOT
35598: IFFALSE 35604
// exit ;
35600: POP
35601: POP
35602: GO 36061
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35604: LD_ADDR_VAR 0 4
35608: PUSH
35609: LD_INT 22
35611: PUSH
35612: LD_VAR 0 5
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 3
35623: PUSH
35624: LD_INT 60
35626: PUSH
35627: EMPTY
35628: LIST
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 91
35636: PUSH
35637: LD_VAR 0 8
35641: PUSH
35642: LD_INT 6
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: LD_INT 25
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 25
35665: PUSH
35666: LD_INT 16
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: LIST
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: PPUSH
35684: CALL_OW 69
35688: PUSH
35689: LD_VAR 0 8
35693: PPUSH
35694: CALL_OW 313
35698: PPUSH
35699: LD_INT 3
35701: PUSH
35702: LD_INT 60
35704: PUSH
35705: EMPTY
35706: LIST
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 2
35714: PUSH
35715: LD_INT 25
35717: PUSH
35718: LD_INT 2
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 25
35727: PUSH
35728: LD_INT 16
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: LIST
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PPUSH
35744: CALL_OW 72
35748: UNION
35749: ST_TO_ADDR
// if tmp then
35750: LD_VAR 0 4
35754: IFFALSE 35834
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35756: LD_ADDR_VAR 0 4
35760: PUSH
35761: LD_VAR 0 4
35765: PPUSH
35766: LD_INT 3
35768: PPUSH
35769: CALL 79395 0 2
35773: ST_TO_ADDR
// for j in tmp do
35774: LD_ADDR_VAR 0 2
35778: PUSH
35779: LD_VAR 0 4
35783: PUSH
35784: FOR_IN
35785: IFFALSE 35828
// begin if IsInUnit ( j ) then
35787: LD_VAR 0 2
35791: PPUSH
35792: CALL_OW 310
35796: IFFALSE 35807
// ComExit ( j ) ;
35798: LD_VAR 0 2
35802: PPUSH
35803: CALL 79478 0 1
// AddComCollect ( j , x , y ) ;
35807: LD_VAR 0 2
35811: PPUSH
35812: LD_VAR 0 6
35816: PPUSH
35817: LD_VAR 0 7
35821: PPUSH
35822: CALL_OW 177
// end ;
35826: GO 35784
35828: POP
35829: POP
// exit ;
35830: POP
35831: POP
35832: GO 36061
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35834: LD_ADDR_VAR 0 4
35838: PUSH
35839: LD_INT 22
35841: PUSH
35842: LD_VAR 0 5
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 91
35853: PUSH
35854: LD_VAR 0 8
35858: PUSH
35859: LD_INT 8
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: LD_INT 34
35872: PUSH
35873: LD_INT 12
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 34
35882: PUSH
35883: LD_INT 51
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 34
35892: PUSH
35893: LD_INT 32
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 34
35902: PUSH
35903: LD_INT 89
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: PPUSH
35922: CALL_OW 69
35926: ST_TO_ADDR
// if tmp then
35927: LD_VAR 0 4
35931: IFFALSE 36057
// begin for j in tmp do
35933: LD_ADDR_VAR 0 2
35937: PUSH
35938: LD_VAR 0 4
35942: PUSH
35943: FOR_IN
35944: IFFALSE 36055
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35946: LD_VAR 0 2
35950: PPUSH
35951: CALL_OW 262
35955: PUSH
35956: LD_INT 3
35958: EQUAL
35959: PUSH
35960: LD_VAR 0 2
35964: PPUSH
35965: CALL_OW 261
35969: PUSH
35970: LD_INT 20
35972: GREATER
35973: OR
35974: PUSH
35975: LD_VAR 0 2
35979: PPUSH
35980: CALL_OW 314
35984: NOT
35985: AND
35986: PUSH
35987: LD_VAR 0 2
35991: PPUSH
35992: CALL_OW 263
35996: PUSH
35997: LD_INT 1
35999: NONEQUAL
36000: PUSH
36001: LD_VAR 0 2
36005: PPUSH
36006: CALL_OW 311
36010: OR
36011: AND
36012: IFFALSE 36053
// begin ComCollect ( j , x , y ) ;
36014: LD_VAR 0 2
36018: PPUSH
36019: LD_VAR 0 6
36023: PPUSH
36024: LD_VAR 0 7
36028: PPUSH
36029: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36033: LD_VAR 0 2
36037: PPUSH
36038: LD_VAR 0 8
36042: PPUSH
36043: CALL_OW 172
// exit ;
36047: POP
36048: POP
36049: POP
36050: POP
36051: GO 36061
// end ;
36053: GO 35943
36055: POP
36056: POP
// end ; end ;
36057: GO 35432
36059: POP
36060: POP
// end ; end_of_file
36061: PPOPN 9
36063: END
// export function SOS_UnitDestroyed ( un ) ; begin
36064: LD_INT 0
36066: PPUSH
// ComRadiation ( un ) ;
36067: LD_VAR 0 1
36071: PPUSH
36072: CALL 37053 0 1
// end ;
36076: LD_VAR 0 2
36080: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36081: LD_INT 0
36083: PPUSH
// ComRadiation ( un ) ;
36084: LD_VAR 0 1
36088: PPUSH
36089: CALL 37053 0 1
// end ;
36093: LD_VAR 0 2
36097: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36098: LD_INT 0
36100: PPUSH
// end ;
36101: LD_VAR 0 4
36105: RET
// export function SOS_Command ( cmd ) ; begin
36106: LD_INT 0
36108: PPUSH
// end ;
36109: LD_VAR 0 2
36113: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36114: LD_INT 0
36116: PPUSH
// end ;
36117: LD_VAR 0 6
36121: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
36122: LD_INT 0
36124: PPUSH
36125: PPUSH
36126: PPUSH
36127: PPUSH
36128: PPUSH
// if not vehicle or not factory then
36129: LD_VAR 0 1
36133: NOT
36134: PUSH
36135: LD_VAR 0 2
36139: NOT
36140: OR
36141: IFFALSE 36145
// exit ;
36143: GO 36644
// if not factoryWaypoints then
36145: LD_EXP 110
36149: NOT
36150: IFFALSE 36154
// exit ;
36152: GO 36644
// for i := 1 to Count ( factoryWaypoints ) do
36154: LD_ADDR_VAR 0 4
36158: PUSH
36159: DOUBLE
36160: LD_INT 1
36162: DEC
36163: ST_TO_ADDR
36164: LD_EXP 110
36168: PPUSH
36169: CALL 43471 0 1
36173: PUSH
36174: FOR_TO
36175: IFFALSE 36642
// if factoryWaypoints [ i ] [ 2 ] = factory then
36177: LD_EXP 110
36181: PUSH
36182: LD_VAR 0 4
36186: ARRAY
36187: PUSH
36188: LD_INT 2
36190: ARRAY
36191: PUSH
36192: LD_VAR 0 2
36196: EQUAL
36197: IFFALSE 36640
// begin if GetControl ( vehicle ) = control_manual then
36199: LD_VAR 0 1
36203: PPUSH
36204: CALL_OW 263
36208: PUSH
36209: LD_INT 1
36211: EQUAL
36212: IFFALSE 36523
// begin driver := IsDrivenBy ( vehicle ) ;
36214: LD_ADDR_VAR 0 6
36218: PUSH
36219: LD_VAR 0 1
36223: PPUSH
36224: CALL_OW 311
36228: ST_TO_ADDR
// tag := GetTag ( driver ) ;
36229: LD_ADDR_VAR 0 5
36233: PUSH
36234: LD_VAR 0 6
36238: PPUSH
36239: CALL_OW 110
36243: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
36244: LD_VAR 0 5
36248: PUSH
36249: LD_INT 501
36251: EQUAL
36252: PUSH
36253: LD_VAR 0 1
36257: PPUSH
36258: CALL_OW 110
36262: PUSH
36263: LD_INT 501
36265: EQUAL
36266: OR
36267: IFFALSE 36273
// exit ;
36269: POP
36270: POP
36271: GO 36644
// if not HasTask ( driver ) then
36273: LD_VAR 0 6
36277: PPUSH
36278: CALL_OW 314
36282: NOT
36283: IFFALSE 36521
// begin SetTag ( driver , tDriver ) ;
36285: LD_VAR 0 6
36289: PPUSH
36290: LD_INT 501
36292: PPUSH
36293: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
36297: LD_VAR 0 1
36301: PPUSH
36302: LD_INT 501
36304: PPUSH
36305: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36309: LD_ADDR_VAR 0 7
36313: PUSH
36314: LD_EXP 110
36318: PUSH
36319: LD_VAR 0 4
36323: ARRAY
36324: PUSH
36325: LD_INT 3
36327: ARRAY
36328: PPUSH
36329: LD_EXP 110
36333: PUSH
36334: LD_VAR 0 4
36338: ARRAY
36339: PUSH
36340: LD_INT 4
36342: ARRAY
36343: PPUSH
36344: CALL_OW 428
36348: ST_TO_ADDR
// if hex then
36349: LD_VAR 0 7
36353: IFFALSE 36371
// ComMoveUnit ( driver , hex ) else
36355: LD_VAR 0 6
36359: PPUSH
36360: LD_VAR 0 7
36364: PPUSH
36365: CALL_OW 112
36369: GO 36410
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36371: LD_VAR 0 6
36375: PPUSH
36376: LD_EXP 110
36380: PUSH
36381: LD_VAR 0 4
36385: ARRAY
36386: PUSH
36387: LD_INT 3
36389: ARRAY
36390: PPUSH
36391: LD_EXP 110
36395: PUSH
36396: LD_VAR 0 4
36400: ARRAY
36401: PUSH
36402: LD_INT 4
36404: ARRAY
36405: PPUSH
36406: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36410: LD_VAR 0 6
36414: PPUSH
36415: CALL_OW 181
// if Multiplayer then
36419: LD_OWVAR 4
36423: IFFALSE 36472
// begin repeat wait ( 10 ) ;
36425: LD_INT 10
36427: PPUSH
36428: CALL_OW 67
// until not IsInUnit ( driver ) ;
36432: LD_VAR 0 6
36436: PPUSH
36437: CALL_OW 310
36441: NOT
36442: IFFALSE 36425
// if not HasTask ( driver ) then
36444: LD_VAR 0 6
36448: PPUSH
36449: CALL_OW 314
36453: NOT
36454: IFFALSE 36470
// ComEnterUnit ( driver , factory ) ;
36456: LD_VAR 0 6
36460: PPUSH
36461: LD_VAR 0 2
36465: PPUSH
36466: CALL_OW 120
// end else
36470: GO 36486
// AddComEnterUnit ( driver , factory ) ;
36472: LD_VAR 0 6
36476: PPUSH
36477: LD_VAR 0 2
36481: PPUSH
36482: CALL_OW 180
// wait ( 0 0$1 ) ;
36486: LD_INT 35
36488: PPUSH
36489: CALL_OW 67
// SetTag ( driver , tag ) ;
36493: LD_VAR 0 6
36497: PPUSH
36498: LD_VAR 0 5
36502: PPUSH
36503: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
36507: LD_VAR 0 1
36511: PPUSH
36512: LD_INT 0
36514: PPUSH
36515: CALL_OW 109
// break ;
36519: GO 36642
// end ; end else
36521: GO 36640
// if GetControl ( vehicle ) = control_remote then
36523: LD_VAR 0 1
36527: PPUSH
36528: CALL_OW 263
36532: PUSH
36533: LD_INT 2
36535: EQUAL
36536: IFFALSE 36599
// begin wait ( 0 0$2 ) ;
36538: LD_INT 70
36540: PPUSH
36541: CALL_OW 67
// if Connect ( vehicle ) then
36545: LD_VAR 0 1
36549: PPUSH
36550: CALL 49677 0 1
36554: IFFALSE 36595
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36556: LD_VAR 0 1
36560: PPUSH
36561: LD_EXP 110
36565: PUSH
36566: LD_VAR 0 4
36570: ARRAY
36571: PUSH
36572: LD_INT 3
36574: ARRAY
36575: PPUSH
36576: LD_EXP 110
36580: PUSH
36581: LD_VAR 0 4
36585: ARRAY
36586: PUSH
36587: LD_INT 4
36589: ARRAY
36590: PPUSH
36591: CALL_OW 171
// break ;
36595: GO 36642
// end else
36597: GO 36640
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36599: LD_VAR 0 1
36603: PPUSH
36604: LD_EXP 110
36608: PUSH
36609: LD_VAR 0 4
36613: ARRAY
36614: PUSH
36615: LD_INT 3
36617: ARRAY
36618: PPUSH
36619: LD_EXP 110
36623: PUSH
36624: LD_VAR 0 4
36628: ARRAY
36629: PUSH
36630: LD_INT 4
36632: ARRAY
36633: PPUSH
36634: CALL_OW 171
// break ;
36638: GO 36642
// end ; end ;
36640: GO 36174
36642: POP
36643: POP
// end ;
36644: LD_VAR 0 3
36648: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36649: LD_INT 0
36651: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36652: LD_VAR 0 1
36656: PUSH
36657: LD_INT 250
36659: EQUAL
36660: PUSH
36661: LD_VAR 0 2
36665: PPUSH
36666: CALL_OW 264
36670: PUSH
36671: LD_INT 81
36673: EQUAL
36674: AND
36675: IFFALSE 36696
// MinerPlaceMine ( unit , x , y ) ;
36677: LD_VAR 0 2
36681: PPUSH
36682: LD_VAR 0 4
36686: PPUSH
36687: LD_VAR 0 5
36691: PPUSH
36692: CALL 39788 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36696: LD_VAR 0 1
36700: PUSH
36701: LD_INT 251
36703: EQUAL
36704: PUSH
36705: LD_VAR 0 2
36709: PPUSH
36710: CALL_OW 264
36714: PUSH
36715: LD_INT 81
36717: EQUAL
36718: AND
36719: IFFALSE 36740
// MinerDetonateMine ( unit , x , y ) ;
36721: LD_VAR 0 2
36725: PPUSH
36726: LD_VAR 0 4
36730: PPUSH
36731: LD_VAR 0 5
36735: PPUSH
36736: CALL 40063 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36740: LD_VAR 0 1
36744: PUSH
36745: LD_INT 252
36747: EQUAL
36748: PUSH
36749: LD_VAR 0 2
36753: PPUSH
36754: CALL_OW 264
36758: PUSH
36759: LD_INT 81
36761: EQUAL
36762: AND
36763: IFFALSE 36784
// MinerCreateMinefield ( unit , x , y ) ;
36765: LD_VAR 0 2
36769: PPUSH
36770: LD_VAR 0 4
36774: PPUSH
36775: LD_VAR 0 5
36779: PPUSH
36780: CALL 40480 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36784: LD_VAR 0 1
36788: PUSH
36789: LD_INT 253
36791: EQUAL
36792: PUSH
36793: LD_VAR 0 2
36797: PPUSH
36798: CALL_OW 257
36802: PUSH
36803: LD_INT 5
36805: EQUAL
36806: AND
36807: IFFALSE 36828
// ComBinocular ( unit , x , y ) ;
36809: LD_VAR 0 2
36813: PPUSH
36814: LD_VAR 0 4
36818: PPUSH
36819: LD_VAR 0 5
36823: PPUSH
36824: CALL 40849 0 3
// if selectedUnit then
36828: LD_VAR 0 3
36832: IFFALSE 36888
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36834: LD_VAR 0 1
36838: PUSH
36839: LD_INT 254
36841: EQUAL
36842: PUSH
36843: LD_VAR 0 2
36847: PPUSH
36848: CALL_OW 264
36852: PUSH
36853: LD_INT 99
36855: EQUAL
36856: AND
36857: PUSH
36858: LD_VAR 0 3
36862: PPUSH
36863: CALL_OW 263
36867: PUSH
36868: LD_INT 3
36870: EQUAL
36871: AND
36872: IFFALSE 36888
// HackDestroyVehicle ( unit , selectedUnit ) ;
36874: LD_VAR 0 2
36878: PPUSH
36879: LD_VAR 0 3
36883: PPUSH
36884: CALL 39152 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36888: LD_VAR 0 1
36892: PUSH
36893: LD_INT 255
36895: EQUAL
36896: PUSH
36897: LD_VAR 0 2
36901: PPUSH
36902: CALL_OW 264
36906: PUSH
36907: LD_INT 14
36909: PUSH
36910: LD_INT 53
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: IN
36917: AND
36918: PUSH
36919: LD_VAR 0 4
36923: PPUSH
36924: LD_VAR 0 5
36928: PPUSH
36929: CALL_OW 488
36933: AND
36934: IFFALSE 36958
// CutTreeXYR ( unit , x , y , 12 ) ;
36936: LD_VAR 0 2
36940: PPUSH
36941: LD_VAR 0 4
36945: PPUSH
36946: LD_VAR 0 5
36950: PPUSH
36951: LD_INT 12
36953: PPUSH
36954: CALL 37149 0 4
// if cmd = 256 then
36958: LD_VAR 0 1
36962: PUSH
36963: LD_INT 256
36965: EQUAL
36966: IFFALSE 36987
// SetFactoryWaypoint ( unit , x , y ) ;
36968: LD_VAR 0 2
36972: PPUSH
36973: LD_VAR 0 4
36977: PPUSH
36978: LD_VAR 0 5
36982: PPUSH
36983: CALL 34625 0 3
// if cmd = 257 then
36987: LD_VAR 0 1
36991: PUSH
36992: LD_INT 257
36994: EQUAL
36995: IFFALSE 37016
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36997: LD_VAR 0 2
37001: PPUSH
37002: LD_VAR 0 4
37006: PPUSH
37007: LD_VAR 0 5
37011: PPUSH
37012: CALL 35115 0 3
// if cmd = 258 then
37016: LD_VAR 0 1
37020: PUSH
37021: LD_INT 258
37023: EQUAL
37024: IFFALSE 37048
// BurnTreeXYR ( unit , x , y , 8 ) ;
37026: LD_VAR 0 2
37030: PPUSH
37031: LD_VAR 0 4
37035: PPUSH
37036: LD_VAR 0 5
37040: PPUSH
37041: LD_INT 8
37043: PPUSH
37044: CALL 37543 0 4
// end ;
37048: LD_VAR 0 6
37052: RET
// export function ComRadiation ( un ) ; var eff ; begin
37053: LD_INT 0
37055: PPUSH
37056: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37057: LD_VAR 0 1
37061: PPUSH
37062: CALL_OW 264
37066: PUSH
37067: LD_INT 91
37069: NONEQUAL
37070: IFFALSE 37074
// exit ;
37072: GO 37144
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37074: LD_INT 68
37076: PPUSH
37077: LD_VAR 0 1
37081: PPUSH
37082: CALL_OW 255
37086: PPUSH
37087: CALL_OW 321
37091: PUSH
37092: LD_INT 2
37094: EQUAL
37095: IFFALSE 37107
// eff := 70 else
37097: LD_ADDR_VAR 0 3
37101: PUSH
37102: LD_INT 70
37104: ST_TO_ADDR
37105: GO 37115
// eff := 30 ;
37107: LD_ADDR_VAR 0 3
37111: PUSH
37112: LD_INT 30
37114: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37115: LD_VAR 0 1
37119: PPUSH
37120: CALL_OW 250
37124: PPUSH
37125: LD_VAR 0 1
37129: PPUSH
37130: CALL_OW 251
37134: PPUSH
37135: LD_VAR 0 3
37139: PPUSH
37140: CALL_OW 495
// end ;
37144: LD_VAR 0 2
37148: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37149: LD_INT 0
37151: PPUSH
37152: PPUSH
37153: PPUSH
37154: PPUSH
37155: PPUSH
37156: PPUSH
37157: PPUSH
37158: PPUSH
37159: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37160: LD_VAR 0 1
37164: PPUSH
37165: CALL_OW 302
37169: NOT
37170: PUSH
37171: LD_VAR 0 2
37175: PPUSH
37176: LD_VAR 0 3
37180: PPUSH
37181: CALL_OW 488
37185: NOT
37186: OR
37187: PUSH
37188: LD_VAR 0 4
37192: NOT
37193: OR
37194: IFFALSE 37198
// exit ;
37196: GO 37538
// list := [ ] ;
37198: LD_ADDR_VAR 0 13
37202: PUSH
37203: EMPTY
37204: ST_TO_ADDR
// if x - r < 0 then
37205: LD_VAR 0 2
37209: PUSH
37210: LD_VAR 0 4
37214: MINUS
37215: PUSH
37216: LD_INT 0
37218: LESS
37219: IFFALSE 37231
// min_x := 0 else
37221: LD_ADDR_VAR 0 7
37225: PUSH
37226: LD_INT 0
37228: ST_TO_ADDR
37229: GO 37247
// min_x := x - r ;
37231: LD_ADDR_VAR 0 7
37235: PUSH
37236: LD_VAR 0 2
37240: PUSH
37241: LD_VAR 0 4
37245: MINUS
37246: ST_TO_ADDR
// if y - r < 0 then
37247: LD_VAR 0 3
37251: PUSH
37252: LD_VAR 0 4
37256: MINUS
37257: PUSH
37258: LD_INT 0
37260: LESS
37261: IFFALSE 37273
// min_y := 0 else
37263: LD_ADDR_VAR 0 8
37267: PUSH
37268: LD_INT 0
37270: ST_TO_ADDR
37271: GO 37289
// min_y := y - r ;
37273: LD_ADDR_VAR 0 8
37277: PUSH
37278: LD_VAR 0 3
37282: PUSH
37283: LD_VAR 0 4
37287: MINUS
37288: ST_TO_ADDR
// max_x := x + r ;
37289: LD_ADDR_VAR 0 9
37293: PUSH
37294: LD_VAR 0 2
37298: PUSH
37299: LD_VAR 0 4
37303: PLUS
37304: ST_TO_ADDR
// max_y := y + r ;
37305: LD_ADDR_VAR 0 10
37309: PUSH
37310: LD_VAR 0 3
37314: PUSH
37315: LD_VAR 0 4
37319: PLUS
37320: ST_TO_ADDR
// for _x = min_x to max_x do
37321: LD_ADDR_VAR 0 11
37325: PUSH
37326: DOUBLE
37327: LD_VAR 0 7
37331: DEC
37332: ST_TO_ADDR
37333: LD_VAR 0 9
37337: PUSH
37338: FOR_TO
37339: IFFALSE 37456
// for _y = min_y to max_y do
37341: LD_ADDR_VAR 0 12
37345: PUSH
37346: DOUBLE
37347: LD_VAR 0 8
37351: DEC
37352: ST_TO_ADDR
37353: LD_VAR 0 10
37357: PUSH
37358: FOR_TO
37359: IFFALSE 37452
// begin if not ValidHex ( _x , _y ) then
37361: LD_VAR 0 11
37365: PPUSH
37366: LD_VAR 0 12
37370: PPUSH
37371: CALL_OW 488
37375: NOT
37376: IFFALSE 37380
// continue ;
37378: GO 37358
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37380: LD_VAR 0 11
37384: PPUSH
37385: LD_VAR 0 12
37389: PPUSH
37390: CALL_OW 351
37394: PUSH
37395: LD_VAR 0 11
37399: PPUSH
37400: LD_VAR 0 12
37404: PPUSH
37405: CALL_OW 554
37409: AND
37410: IFFALSE 37450
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37412: LD_ADDR_VAR 0 13
37416: PUSH
37417: LD_VAR 0 13
37421: PPUSH
37422: LD_VAR 0 13
37426: PUSH
37427: LD_INT 1
37429: PLUS
37430: PPUSH
37431: LD_VAR 0 11
37435: PUSH
37436: LD_VAR 0 12
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PPUSH
37445: CALL_OW 2
37449: ST_TO_ADDR
// end ;
37450: GO 37358
37452: POP
37453: POP
37454: GO 37338
37456: POP
37457: POP
// if not list then
37458: LD_VAR 0 13
37462: NOT
37463: IFFALSE 37467
// exit ;
37465: GO 37538
// for i in list do
37467: LD_ADDR_VAR 0 6
37471: PUSH
37472: LD_VAR 0 13
37476: PUSH
37477: FOR_IN
37478: IFFALSE 37536
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37480: LD_VAR 0 1
37484: PPUSH
37485: LD_STRING M
37487: PUSH
37488: LD_VAR 0 6
37492: PUSH
37493: LD_INT 1
37495: ARRAY
37496: PUSH
37497: LD_VAR 0 6
37501: PUSH
37502: LD_INT 2
37504: ARRAY
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: PUSH
37527: EMPTY
37528: LIST
37529: PPUSH
37530: CALL_OW 447
37534: GO 37477
37536: POP
37537: POP
// end ;
37538: LD_VAR 0 5
37542: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37543: LD_INT 0
37545: PPUSH
37546: PPUSH
37547: PPUSH
37548: PPUSH
37549: PPUSH
37550: PPUSH
37551: PPUSH
37552: PPUSH
37553: PPUSH
37554: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37555: LD_VAR 0 1
37559: PPUSH
37560: CALL_OW 302
37564: NOT
37565: PUSH
37566: LD_VAR 0 2
37570: PPUSH
37571: LD_VAR 0 3
37575: PPUSH
37576: CALL_OW 488
37580: NOT
37581: OR
37582: PUSH
37583: LD_VAR 0 4
37587: NOT
37588: OR
37589: IFFALSE 37593
// exit ;
37591: GO 38106
// list := [ ] ;
37593: LD_ADDR_VAR 0 13
37597: PUSH
37598: EMPTY
37599: ST_TO_ADDR
// if x - r < 0 then
37600: LD_VAR 0 2
37604: PUSH
37605: LD_VAR 0 4
37609: MINUS
37610: PUSH
37611: LD_INT 0
37613: LESS
37614: IFFALSE 37626
// min_x := 0 else
37616: LD_ADDR_VAR 0 7
37620: PUSH
37621: LD_INT 0
37623: ST_TO_ADDR
37624: GO 37642
// min_x := x - r ;
37626: LD_ADDR_VAR 0 7
37630: PUSH
37631: LD_VAR 0 2
37635: PUSH
37636: LD_VAR 0 4
37640: MINUS
37641: ST_TO_ADDR
// if y - r < 0 then
37642: LD_VAR 0 3
37646: PUSH
37647: LD_VAR 0 4
37651: MINUS
37652: PUSH
37653: LD_INT 0
37655: LESS
37656: IFFALSE 37668
// min_y := 0 else
37658: LD_ADDR_VAR 0 8
37662: PUSH
37663: LD_INT 0
37665: ST_TO_ADDR
37666: GO 37684
// min_y := y - r ;
37668: LD_ADDR_VAR 0 8
37672: PUSH
37673: LD_VAR 0 3
37677: PUSH
37678: LD_VAR 0 4
37682: MINUS
37683: ST_TO_ADDR
// max_x := x + r ;
37684: LD_ADDR_VAR 0 9
37688: PUSH
37689: LD_VAR 0 2
37693: PUSH
37694: LD_VAR 0 4
37698: PLUS
37699: ST_TO_ADDR
// max_y := y + r ;
37700: LD_ADDR_VAR 0 10
37704: PUSH
37705: LD_VAR 0 3
37709: PUSH
37710: LD_VAR 0 4
37714: PLUS
37715: ST_TO_ADDR
// for _x = min_x to max_x do
37716: LD_ADDR_VAR 0 11
37720: PUSH
37721: DOUBLE
37722: LD_VAR 0 7
37726: DEC
37727: ST_TO_ADDR
37728: LD_VAR 0 9
37732: PUSH
37733: FOR_TO
37734: IFFALSE 37851
// for _y = min_y to max_y do
37736: LD_ADDR_VAR 0 12
37740: PUSH
37741: DOUBLE
37742: LD_VAR 0 8
37746: DEC
37747: ST_TO_ADDR
37748: LD_VAR 0 10
37752: PUSH
37753: FOR_TO
37754: IFFALSE 37847
// begin if not ValidHex ( _x , _y ) then
37756: LD_VAR 0 11
37760: PPUSH
37761: LD_VAR 0 12
37765: PPUSH
37766: CALL_OW 488
37770: NOT
37771: IFFALSE 37775
// continue ;
37773: GO 37753
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37775: LD_VAR 0 11
37779: PPUSH
37780: LD_VAR 0 12
37784: PPUSH
37785: CALL_OW 351
37789: PUSH
37790: LD_VAR 0 11
37794: PPUSH
37795: LD_VAR 0 12
37799: PPUSH
37800: CALL_OW 554
37804: AND
37805: IFFALSE 37845
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37807: LD_ADDR_VAR 0 13
37811: PUSH
37812: LD_VAR 0 13
37816: PPUSH
37817: LD_VAR 0 13
37821: PUSH
37822: LD_INT 1
37824: PLUS
37825: PPUSH
37826: LD_VAR 0 11
37830: PUSH
37831: LD_VAR 0 12
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PPUSH
37840: CALL_OW 2
37844: ST_TO_ADDR
// end ;
37845: GO 37753
37847: POP
37848: POP
37849: GO 37733
37851: POP
37852: POP
// if not list then
37853: LD_VAR 0 13
37857: NOT
37858: IFFALSE 37862
// exit ;
37860: GO 38106
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37862: LD_ADDR_VAR 0 13
37866: PUSH
37867: LD_VAR 0 1
37871: PPUSH
37872: LD_VAR 0 13
37876: PPUSH
37877: LD_INT 1
37879: PPUSH
37880: LD_INT 1
37882: PPUSH
37883: CALL 46819 0 4
37887: ST_TO_ADDR
// ComStop ( flame ) ;
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL_OW 141
// for i in list do
37897: LD_ADDR_VAR 0 6
37901: PUSH
37902: LD_VAR 0 13
37906: PUSH
37907: FOR_IN
37908: IFFALSE 37939
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37910: LD_VAR 0 1
37914: PPUSH
37915: LD_VAR 0 6
37919: PUSH
37920: LD_INT 1
37922: ARRAY
37923: PPUSH
37924: LD_VAR 0 6
37928: PUSH
37929: LD_INT 2
37931: ARRAY
37932: PPUSH
37933: CALL_OW 176
37937: GO 37907
37939: POP
37940: POP
// repeat wait ( 0 0$1 ) ;
37941: LD_INT 35
37943: PPUSH
37944: CALL_OW 67
// task := GetTaskList ( flame ) ;
37948: LD_ADDR_VAR 0 14
37952: PUSH
37953: LD_VAR 0 1
37957: PPUSH
37958: CALL_OW 437
37962: ST_TO_ADDR
// if not task then
37963: LD_VAR 0 14
37967: NOT
37968: IFFALSE 37972
// exit ;
37970: GO 38106
// if task [ 1 ] [ 1 ] <> | then
37972: LD_VAR 0 14
37976: PUSH
37977: LD_INT 1
37979: ARRAY
37980: PUSH
37981: LD_INT 1
37983: ARRAY
37984: PUSH
37985: LD_STRING |
37987: NONEQUAL
37988: IFFALSE 37992
// exit ;
37990: GO 38106
// _x := task [ 1 ] [ 2 ] ;
37992: LD_ADDR_VAR 0 11
37996: PUSH
37997: LD_VAR 0 14
38001: PUSH
38002: LD_INT 1
38004: ARRAY
38005: PUSH
38006: LD_INT 2
38008: ARRAY
38009: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38010: LD_ADDR_VAR 0 12
38014: PUSH
38015: LD_VAR 0 14
38019: PUSH
38020: LD_INT 1
38022: ARRAY
38023: PUSH
38024: LD_INT 3
38026: ARRAY
38027: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38028: LD_VAR 0 11
38032: PPUSH
38033: LD_VAR 0 12
38037: PPUSH
38038: CALL_OW 351
38042: NOT
38043: PUSH
38044: LD_VAR 0 11
38048: PPUSH
38049: LD_VAR 0 12
38053: PPUSH
38054: CALL_OW 554
38058: NOT
38059: OR
38060: IFFALSE 38094
// begin task := Delete ( task , 1 ) ;
38062: LD_ADDR_VAR 0 14
38066: PUSH
38067: LD_VAR 0 14
38071: PPUSH
38072: LD_INT 1
38074: PPUSH
38075: CALL_OW 3
38079: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38080: LD_VAR 0 1
38084: PPUSH
38085: LD_VAR 0 14
38089: PPUSH
38090: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38094: LD_VAR 0 1
38098: PPUSH
38099: CALL_OW 314
38103: NOT
38104: IFFALSE 37941
// end ;
38106: LD_VAR 0 5
38110: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38111: LD_EXP 113
38115: NOT
38116: IFFALSE 38166
38118: GO 38120
38120: DISABLE
// begin initHack := true ;
38121: LD_ADDR_EXP 113
38125: PUSH
38126: LD_INT 1
38128: ST_TO_ADDR
// hackTanks := [ ] ;
38129: LD_ADDR_EXP 114
38133: PUSH
38134: EMPTY
38135: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38136: LD_ADDR_EXP 115
38140: PUSH
38141: EMPTY
38142: ST_TO_ADDR
// hackLimit := 3 ;
38143: LD_ADDR_EXP 116
38147: PUSH
38148: LD_INT 3
38150: ST_TO_ADDR
// hackDist := 12 ;
38151: LD_ADDR_EXP 117
38155: PUSH
38156: LD_INT 12
38158: ST_TO_ADDR
// hackCounter := [ ] ;
38159: LD_ADDR_EXP 118
38163: PUSH
38164: EMPTY
38165: ST_TO_ADDR
// end ;
38166: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38167: LD_EXP 113
38171: PUSH
38172: LD_INT 34
38174: PUSH
38175: LD_INT 99
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PPUSH
38182: CALL_OW 69
38186: AND
38187: IFFALSE 38440
38189: GO 38191
38191: DISABLE
38192: LD_INT 0
38194: PPUSH
38195: PPUSH
// begin enable ;
38196: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38197: LD_ADDR_VAR 0 1
38201: PUSH
38202: LD_INT 34
38204: PUSH
38205: LD_INT 99
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PPUSH
38212: CALL_OW 69
38216: PUSH
38217: FOR_IN
38218: IFFALSE 38438
// begin if not i in hackTanks then
38220: LD_VAR 0 1
38224: PUSH
38225: LD_EXP 114
38229: IN
38230: NOT
38231: IFFALSE 38314
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38233: LD_ADDR_EXP 114
38237: PUSH
38238: LD_EXP 114
38242: PPUSH
38243: LD_EXP 114
38247: PUSH
38248: LD_INT 1
38250: PLUS
38251: PPUSH
38252: LD_VAR 0 1
38256: PPUSH
38257: CALL_OW 1
38261: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38262: LD_ADDR_EXP 115
38266: PUSH
38267: LD_EXP 115
38271: PPUSH
38272: LD_EXP 115
38276: PUSH
38277: LD_INT 1
38279: PLUS
38280: PPUSH
38281: EMPTY
38282: PPUSH
38283: CALL_OW 1
38287: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38288: LD_ADDR_EXP 118
38292: PUSH
38293: LD_EXP 118
38297: PPUSH
38298: LD_EXP 118
38302: PUSH
38303: LD_INT 1
38305: PLUS
38306: PPUSH
38307: EMPTY
38308: PPUSH
38309: CALL_OW 1
38313: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38314: LD_VAR 0 1
38318: PPUSH
38319: CALL_OW 302
38323: NOT
38324: IFFALSE 38337
// begin HackUnlinkAll ( i ) ;
38326: LD_VAR 0 1
38330: PPUSH
38331: CALL 38443 0 1
// continue ;
38335: GO 38217
// end ; HackCheckCapturedStatus ( i ) ;
38337: LD_VAR 0 1
38341: PPUSH
38342: CALL 38886 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38346: LD_ADDR_VAR 0 2
38350: PUSH
38351: LD_INT 81
38353: PUSH
38354: LD_VAR 0 1
38358: PPUSH
38359: CALL_OW 255
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 33
38370: PUSH
38371: LD_INT 3
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 91
38380: PUSH
38381: LD_VAR 0 1
38385: PUSH
38386: LD_EXP 117
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 50
38398: PUSH
38399: EMPTY
38400: LIST
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: PPUSH
38408: CALL_OW 69
38412: ST_TO_ADDR
// if not tmp then
38413: LD_VAR 0 2
38417: NOT
38418: IFFALSE 38422
// continue ;
38420: GO 38217
// HackLink ( i , tmp ) ;
38422: LD_VAR 0 1
38426: PPUSH
38427: LD_VAR 0 2
38431: PPUSH
38432: CALL 38579 0 2
// end ;
38436: GO 38217
38438: POP
38439: POP
// end ;
38440: PPOPN 2
38442: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38443: LD_INT 0
38445: PPUSH
38446: PPUSH
38447: PPUSH
// if not hack in hackTanks then
38448: LD_VAR 0 1
38452: PUSH
38453: LD_EXP 114
38457: IN
38458: NOT
38459: IFFALSE 38463
// exit ;
38461: GO 38574
// index := GetElementIndex ( hackTanks , hack ) ;
38463: LD_ADDR_VAR 0 4
38467: PUSH
38468: LD_EXP 114
38472: PPUSH
38473: LD_VAR 0 1
38477: PPUSH
38478: CALL 46116 0 2
38482: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38483: LD_EXP 115
38487: PUSH
38488: LD_VAR 0 4
38492: ARRAY
38493: IFFALSE 38574
// begin for i in hackTanksCaptured [ index ] do
38495: LD_ADDR_VAR 0 3
38499: PUSH
38500: LD_EXP 115
38504: PUSH
38505: LD_VAR 0 4
38509: ARRAY
38510: PUSH
38511: FOR_IN
38512: IFFALSE 38538
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38514: LD_VAR 0 3
38518: PUSH
38519: LD_INT 1
38521: ARRAY
38522: PPUSH
38523: LD_VAR 0 3
38527: PUSH
38528: LD_INT 2
38530: ARRAY
38531: PPUSH
38532: CALL_OW 235
38536: GO 38511
38538: POP
38539: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38540: LD_ADDR_EXP 115
38544: PUSH
38545: LD_EXP 115
38549: PPUSH
38550: LD_VAR 0 4
38554: PPUSH
38555: EMPTY
38556: PPUSH
38557: CALL_OW 1
38561: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38562: LD_VAR 0 1
38566: PPUSH
38567: LD_INT 0
38569: PPUSH
38570: CALL_OW 505
// end ; end ;
38574: LD_VAR 0 2
38578: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38579: LD_INT 0
38581: PPUSH
38582: PPUSH
38583: PPUSH
// if not hack in hackTanks or not vehicles then
38584: LD_VAR 0 1
38588: PUSH
38589: LD_EXP 114
38593: IN
38594: NOT
38595: PUSH
38596: LD_VAR 0 2
38600: NOT
38601: OR
38602: IFFALSE 38606
// exit ;
38604: GO 38881
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38606: LD_ADDR_VAR 0 2
38610: PUSH
38611: LD_VAR 0 1
38615: PPUSH
38616: LD_VAR 0 2
38620: PPUSH
38621: LD_INT 1
38623: PPUSH
38624: LD_INT 1
38626: PPUSH
38627: CALL 46766 0 4
38631: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38632: LD_ADDR_VAR 0 5
38636: PUSH
38637: LD_EXP 114
38641: PPUSH
38642: LD_VAR 0 1
38646: PPUSH
38647: CALL 46116 0 2
38651: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38652: LD_EXP 115
38656: PUSH
38657: LD_VAR 0 5
38661: ARRAY
38662: PUSH
38663: LD_EXP 116
38667: LESS
38668: IFFALSE 38857
// begin for i := 1 to vehicles do
38670: LD_ADDR_VAR 0 4
38674: PUSH
38675: DOUBLE
38676: LD_INT 1
38678: DEC
38679: ST_TO_ADDR
38680: LD_VAR 0 2
38684: PUSH
38685: FOR_TO
38686: IFFALSE 38855
// begin if hackTanksCaptured [ index ] = hackLimit then
38688: LD_EXP 115
38692: PUSH
38693: LD_VAR 0 5
38697: ARRAY
38698: PUSH
38699: LD_EXP 116
38703: EQUAL
38704: IFFALSE 38708
// break ;
38706: GO 38855
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38708: LD_ADDR_EXP 118
38712: PUSH
38713: LD_EXP 118
38717: PPUSH
38718: LD_VAR 0 5
38722: PPUSH
38723: LD_EXP 118
38727: PUSH
38728: LD_VAR 0 5
38732: ARRAY
38733: PUSH
38734: LD_INT 1
38736: PLUS
38737: PPUSH
38738: CALL_OW 1
38742: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38743: LD_ADDR_EXP 115
38747: PUSH
38748: LD_EXP 115
38752: PPUSH
38753: LD_VAR 0 5
38757: PUSH
38758: LD_EXP 115
38762: PUSH
38763: LD_VAR 0 5
38767: ARRAY
38768: PUSH
38769: LD_INT 1
38771: PLUS
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PPUSH
38777: LD_VAR 0 2
38781: PUSH
38782: LD_VAR 0 4
38786: ARRAY
38787: PUSH
38788: LD_VAR 0 2
38792: PUSH
38793: LD_VAR 0 4
38797: ARRAY
38798: PPUSH
38799: CALL_OW 255
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PPUSH
38808: CALL 46331 0 3
38812: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38813: LD_VAR 0 2
38817: PUSH
38818: LD_VAR 0 4
38822: ARRAY
38823: PPUSH
38824: LD_VAR 0 1
38828: PPUSH
38829: CALL_OW 255
38833: PPUSH
38834: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38838: LD_VAR 0 2
38842: PUSH
38843: LD_VAR 0 4
38847: ARRAY
38848: PPUSH
38849: CALL_OW 141
// end ;
38853: GO 38685
38855: POP
38856: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38857: LD_VAR 0 1
38861: PPUSH
38862: LD_EXP 115
38866: PUSH
38867: LD_VAR 0 5
38871: ARRAY
38872: PUSH
38873: LD_INT 0
38875: PLUS
38876: PPUSH
38877: CALL_OW 505
// end ;
38881: LD_VAR 0 3
38885: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38886: LD_INT 0
38888: PPUSH
38889: PPUSH
38890: PPUSH
38891: PPUSH
// if not hack in hackTanks then
38892: LD_VAR 0 1
38896: PUSH
38897: LD_EXP 114
38901: IN
38902: NOT
38903: IFFALSE 38907
// exit ;
38905: GO 39147
// index := GetElementIndex ( hackTanks , hack ) ;
38907: LD_ADDR_VAR 0 4
38911: PUSH
38912: LD_EXP 114
38916: PPUSH
38917: LD_VAR 0 1
38921: PPUSH
38922: CALL 46116 0 2
38926: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38927: LD_ADDR_VAR 0 3
38931: PUSH
38932: DOUBLE
38933: LD_EXP 115
38937: PUSH
38938: LD_VAR 0 4
38942: ARRAY
38943: INC
38944: ST_TO_ADDR
38945: LD_INT 1
38947: PUSH
38948: FOR_DOWNTO
38949: IFFALSE 39121
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38951: LD_ADDR_VAR 0 5
38955: PUSH
38956: LD_EXP 115
38960: PUSH
38961: LD_VAR 0 4
38965: ARRAY
38966: PUSH
38967: LD_VAR 0 3
38971: ARRAY
38972: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38973: LD_VAR 0 5
38977: PUSH
38978: LD_INT 1
38980: ARRAY
38981: PPUSH
38982: CALL_OW 302
38986: NOT
38987: PUSH
38988: LD_VAR 0 5
38992: PUSH
38993: LD_INT 1
38995: ARRAY
38996: PPUSH
38997: CALL_OW 255
39001: PUSH
39002: LD_VAR 0 1
39006: PPUSH
39007: CALL_OW 255
39011: NONEQUAL
39012: OR
39013: IFFALSE 39119
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39015: LD_VAR 0 5
39019: PUSH
39020: LD_INT 1
39022: ARRAY
39023: PPUSH
39024: CALL_OW 305
39028: PUSH
39029: LD_VAR 0 5
39033: PUSH
39034: LD_INT 1
39036: ARRAY
39037: PPUSH
39038: CALL_OW 255
39042: PUSH
39043: LD_VAR 0 1
39047: PPUSH
39048: CALL_OW 255
39052: EQUAL
39053: AND
39054: IFFALSE 39078
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39056: LD_VAR 0 5
39060: PUSH
39061: LD_INT 1
39063: ARRAY
39064: PPUSH
39065: LD_VAR 0 5
39069: PUSH
39070: LD_INT 2
39072: ARRAY
39073: PPUSH
39074: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39078: LD_ADDR_EXP 115
39082: PUSH
39083: LD_EXP 115
39087: PPUSH
39088: LD_VAR 0 4
39092: PPUSH
39093: LD_EXP 115
39097: PUSH
39098: LD_VAR 0 4
39102: ARRAY
39103: PPUSH
39104: LD_VAR 0 3
39108: PPUSH
39109: CALL_OW 3
39113: PPUSH
39114: CALL_OW 1
39118: ST_TO_ADDR
// end ; end ;
39119: GO 38948
39121: POP
39122: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39123: LD_VAR 0 1
39127: PPUSH
39128: LD_EXP 115
39132: PUSH
39133: LD_VAR 0 4
39137: ARRAY
39138: PUSH
39139: LD_INT 0
39141: PLUS
39142: PPUSH
39143: CALL_OW 505
// end ;
39147: LD_VAR 0 2
39151: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39152: LD_INT 0
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
// if not hack in hackTanks then
39158: LD_VAR 0 1
39162: PUSH
39163: LD_EXP 114
39167: IN
39168: NOT
39169: IFFALSE 39173
// exit ;
39171: GO 39258
// index := GetElementIndex ( hackTanks , hack ) ;
39173: LD_ADDR_VAR 0 5
39177: PUSH
39178: LD_EXP 114
39182: PPUSH
39183: LD_VAR 0 1
39187: PPUSH
39188: CALL 46116 0 2
39192: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39193: LD_ADDR_VAR 0 4
39197: PUSH
39198: DOUBLE
39199: LD_INT 1
39201: DEC
39202: ST_TO_ADDR
39203: LD_EXP 115
39207: PUSH
39208: LD_VAR 0 5
39212: ARRAY
39213: PUSH
39214: FOR_TO
39215: IFFALSE 39256
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39217: LD_EXP 115
39221: PUSH
39222: LD_VAR 0 5
39226: ARRAY
39227: PUSH
39228: LD_VAR 0 4
39232: ARRAY
39233: PUSH
39234: LD_INT 1
39236: ARRAY
39237: PUSH
39238: LD_VAR 0 2
39242: EQUAL
39243: IFFALSE 39254
// KillUnit ( vehicle ) ;
39245: LD_VAR 0 2
39249: PPUSH
39250: CALL_OW 66
39254: GO 39214
39256: POP
39257: POP
// end ;
39258: LD_VAR 0 3
39262: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39263: LD_EXP 119
39267: NOT
39268: IFFALSE 39303
39270: GO 39272
39272: DISABLE
// begin initMiner := true ;
39273: LD_ADDR_EXP 119
39277: PUSH
39278: LD_INT 1
39280: ST_TO_ADDR
// minersList := [ ] ;
39281: LD_ADDR_EXP 120
39285: PUSH
39286: EMPTY
39287: ST_TO_ADDR
// minerMinesList := [ ] ;
39288: LD_ADDR_EXP 121
39292: PUSH
39293: EMPTY
39294: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39295: LD_ADDR_EXP 122
39299: PUSH
39300: LD_INT 5
39302: ST_TO_ADDR
// end ;
39303: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39304: LD_EXP 119
39308: PUSH
39309: LD_INT 34
39311: PUSH
39312: LD_INT 81
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PPUSH
39319: CALL_OW 69
39323: AND
39324: IFFALSE 39785
39326: GO 39328
39328: DISABLE
39329: LD_INT 0
39331: PPUSH
39332: PPUSH
39333: PPUSH
39334: PPUSH
// begin enable ;
39335: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39336: LD_ADDR_VAR 0 1
39340: PUSH
39341: LD_INT 34
39343: PUSH
39344: LD_INT 81
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PPUSH
39351: CALL_OW 69
39355: PUSH
39356: FOR_IN
39357: IFFALSE 39429
// begin if not i in minersList then
39359: LD_VAR 0 1
39363: PUSH
39364: LD_EXP 120
39368: IN
39369: NOT
39370: IFFALSE 39427
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39372: LD_ADDR_EXP 120
39376: PUSH
39377: LD_EXP 120
39381: PPUSH
39382: LD_EXP 120
39386: PUSH
39387: LD_INT 1
39389: PLUS
39390: PPUSH
39391: LD_VAR 0 1
39395: PPUSH
39396: CALL_OW 1
39400: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39401: LD_ADDR_EXP 121
39405: PUSH
39406: LD_EXP 121
39410: PPUSH
39411: LD_EXP 121
39415: PUSH
39416: LD_INT 1
39418: PLUS
39419: PPUSH
39420: EMPTY
39421: PPUSH
39422: CALL_OW 1
39426: ST_TO_ADDR
// end end ;
39427: GO 39356
39429: POP
39430: POP
// for i := minerMinesList downto 1 do
39431: LD_ADDR_VAR 0 1
39435: PUSH
39436: DOUBLE
39437: LD_EXP 121
39441: INC
39442: ST_TO_ADDR
39443: LD_INT 1
39445: PUSH
39446: FOR_DOWNTO
39447: IFFALSE 39783
// begin if IsLive ( minersList [ i ] ) then
39449: LD_EXP 120
39453: PUSH
39454: LD_VAR 0 1
39458: ARRAY
39459: PPUSH
39460: CALL_OW 300
39464: IFFALSE 39492
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39466: LD_EXP 120
39470: PUSH
39471: LD_VAR 0 1
39475: ARRAY
39476: PPUSH
39477: LD_EXP 121
39481: PUSH
39482: LD_VAR 0 1
39486: ARRAY
39487: PPUSH
39488: CALL_OW 505
// if not minerMinesList [ i ] then
39492: LD_EXP 121
39496: PUSH
39497: LD_VAR 0 1
39501: ARRAY
39502: NOT
39503: IFFALSE 39507
// continue ;
39505: GO 39446
// for j := minerMinesList [ i ] downto 1 do
39507: LD_ADDR_VAR 0 2
39511: PUSH
39512: DOUBLE
39513: LD_EXP 121
39517: PUSH
39518: LD_VAR 0 1
39522: ARRAY
39523: INC
39524: ST_TO_ADDR
39525: LD_INT 1
39527: PUSH
39528: FOR_DOWNTO
39529: IFFALSE 39779
// begin side := GetSide ( minersList [ i ] ) ;
39531: LD_ADDR_VAR 0 3
39535: PUSH
39536: LD_EXP 120
39540: PUSH
39541: LD_VAR 0 1
39545: ARRAY
39546: PPUSH
39547: CALL_OW 255
39551: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39552: LD_ADDR_VAR 0 4
39556: PUSH
39557: LD_EXP 121
39561: PUSH
39562: LD_VAR 0 1
39566: ARRAY
39567: PUSH
39568: LD_VAR 0 2
39572: ARRAY
39573: PUSH
39574: LD_INT 1
39576: ARRAY
39577: PPUSH
39578: LD_EXP 121
39582: PUSH
39583: LD_VAR 0 1
39587: ARRAY
39588: PUSH
39589: LD_VAR 0 2
39593: ARRAY
39594: PUSH
39595: LD_INT 2
39597: ARRAY
39598: PPUSH
39599: CALL_OW 428
39603: ST_TO_ADDR
// if not tmp then
39604: LD_VAR 0 4
39608: NOT
39609: IFFALSE 39613
// continue ;
39611: GO 39528
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39613: LD_VAR 0 4
39617: PUSH
39618: LD_INT 81
39620: PUSH
39621: LD_VAR 0 3
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PPUSH
39630: CALL_OW 69
39634: IN
39635: PUSH
39636: LD_EXP 121
39640: PUSH
39641: LD_VAR 0 1
39645: ARRAY
39646: PUSH
39647: LD_VAR 0 2
39651: ARRAY
39652: PUSH
39653: LD_INT 1
39655: ARRAY
39656: PPUSH
39657: LD_EXP 121
39661: PUSH
39662: LD_VAR 0 1
39666: ARRAY
39667: PUSH
39668: LD_VAR 0 2
39672: ARRAY
39673: PUSH
39674: LD_INT 2
39676: ARRAY
39677: PPUSH
39678: CALL_OW 458
39682: AND
39683: IFFALSE 39777
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39685: LD_EXP 121
39689: PUSH
39690: LD_VAR 0 1
39694: ARRAY
39695: PUSH
39696: LD_VAR 0 2
39700: ARRAY
39701: PUSH
39702: LD_INT 1
39704: ARRAY
39705: PPUSH
39706: LD_EXP 121
39710: PUSH
39711: LD_VAR 0 1
39715: ARRAY
39716: PUSH
39717: LD_VAR 0 2
39721: ARRAY
39722: PUSH
39723: LD_INT 2
39725: ARRAY
39726: PPUSH
39727: LD_VAR 0 3
39731: PPUSH
39732: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39736: LD_ADDR_EXP 121
39740: PUSH
39741: LD_EXP 121
39745: PPUSH
39746: LD_VAR 0 1
39750: PPUSH
39751: LD_EXP 121
39755: PUSH
39756: LD_VAR 0 1
39760: ARRAY
39761: PPUSH
39762: LD_VAR 0 2
39766: PPUSH
39767: CALL_OW 3
39771: PPUSH
39772: CALL_OW 1
39776: ST_TO_ADDR
// end ; end ;
39777: GO 39528
39779: POP
39780: POP
// end ;
39781: GO 39446
39783: POP
39784: POP
// end ;
39785: PPOPN 4
39787: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39788: LD_INT 0
39790: PPUSH
39791: PPUSH
// result := false ;
39792: LD_ADDR_VAR 0 4
39796: PUSH
39797: LD_INT 0
39799: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39800: LD_VAR 0 1
39804: PPUSH
39805: CALL_OW 264
39809: PUSH
39810: LD_INT 81
39812: EQUAL
39813: NOT
39814: IFFALSE 39818
// exit ;
39816: GO 40058
// index := GetElementIndex ( minersList , unit ) ;
39818: LD_ADDR_VAR 0 5
39822: PUSH
39823: LD_EXP 120
39827: PPUSH
39828: LD_VAR 0 1
39832: PPUSH
39833: CALL 46116 0 2
39837: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39838: LD_EXP 121
39842: PUSH
39843: LD_VAR 0 5
39847: ARRAY
39848: PUSH
39849: LD_EXP 122
39853: GREATEREQUAL
39854: IFFALSE 39858
// exit ;
39856: GO 40058
// ComMoveXY ( unit , x , y ) ;
39858: LD_VAR 0 1
39862: PPUSH
39863: LD_VAR 0 2
39867: PPUSH
39868: LD_VAR 0 3
39872: PPUSH
39873: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39877: LD_INT 35
39879: PPUSH
39880: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39884: LD_VAR 0 1
39888: PPUSH
39889: LD_VAR 0 2
39893: PPUSH
39894: LD_VAR 0 3
39898: PPUSH
39899: CALL 77877 0 3
39903: NOT
39904: PUSH
39905: LD_VAR 0 1
39909: PPUSH
39910: CALL_OW 314
39914: AND
39915: IFFALSE 39919
// exit ;
39917: GO 40058
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39919: LD_VAR 0 2
39923: PPUSH
39924: LD_VAR 0 3
39928: PPUSH
39929: CALL_OW 428
39933: PUSH
39934: LD_VAR 0 1
39938: EQUAL
39939: PUSH
39940: LD_VAR 0 1
39944: PPUSH
39945: CALL_OW 314
39949: NOT
39950: AND
39951: IFFALSE 39877
// PlaySoundXY ( x , y , PlantMine ) ;
39953: LD_VAR 0 2
39957: PPUSH
39958: LD_VAR 0 3
39962: PPUSH
39963: LD_STRING PlantMine
39965: PPUSH
39966: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39970: LD_VAR 0 2
39974: PPUSH
39975: LD_VAR 0 3
39979: PPUSH
39980: LD_VAR 0 1
39984: PPUSH
39985: CALL_OW 255
39989: PPUSH
39990: LD_INT 0
39992: PPUSH
39993: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39997: LD_ADDR_EXP 121
40001: PUSH
40002: LD_EXP 121
40006: PPUSH
40007: LD_VAR 0 5
40011: PUSH
40012: LD_EXP 121
40016: PUSH
40017: LD_VAR 0 5
40021: ARRAY
40022: PUSH
40023: LD_INT 1
40025: PLUS
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PPUSH
40031: LD_VAR 0 2
40035: PUSH
40036: LD_VAR 0 3
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PPUSH
40045: CALL 46331 0 3
40049: ST_TO_ADDR
// result := true ;
40050: LD_ADDR_VAR 0 4
40054: PUSH
40055: LD_INT 1
40057: ST_TO_ADDR
// end ;
40058: LD_VAR 0 4
40062: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40063: LD_INT 0
40065: PPUSH
40066: PPUSH
40067: PPUSH
// if not unit in minersList then
40068: LD_VAR 0 1
40072: PUSH
40073: LD_EXP 120
40077: IN
40078: NOT
40079: IFFALSE 40083
// exit ;
40081: GO 40475
// index := GetElementIndex ( minersList , unit ) ;
40083: LD_ADDR_VAR 0 6
40087: PUSH
40088: LD_EXP 120
40092: PPUSH
40093: LD_VAR 0 1
40097: PPUSH
40098: CALL 46116 0 2
40102: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40103: LD_ADDR_VAR 0 5
40107: PUSH
40108: DOUBLE
40109: LD_EXP 121
40113: PUSH
40114: LD_VAR 0 6
40118: ARRAY
40119: INC
40120: ST_TO_ADDR
40121: LD_INT 1
40123: PUSH
40124: FOR_DOWNTO
40125: IFFALSE 40286
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40127: LD_EXP 121
40131: PUSH
40132: LD_VAR 0 6
40136: ARRAY
40137: PUSH
40138: LD_VAR 0 5
40142: ARRAY
40143: PUSH
40144: LD_INT 1
40146: ARRAY
40147: PUSH
40148: LD_VAR 0 2
40152: EQUAL
40153: PUSH
40154: LD_EXP 121
40158: PUSH
40159: LD_VAR 0 6
40163: ARRAY
40164: PUSH
40165: LD_VAR 0 5
40169: ARRAY
40170: PUSH
40171: LD_INT 2
40173: ARRAY
40174: PUSH
40175: LD_VAR 0 3
40179: EQUAL
40180: AND
40181: IFFALSE 40284
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40183: LD_EXP 121
40187: PUSH
40188: LD_VAR 0 6
40192: ARRAY
40193: PUSH
40194: LD_VAR 0 5
40198: ARRAY
40199: PUSH
40200: LD_INT 1
40202: ARRAY
40203: PPUSH
40204: LD_EXP 121
40208: PUSH
40209: LD_VAR 0 6
40213: ARRAY
40214: PUSH
40215: LD_VAR 0 5
40219: ARRAY
40220: PUSH
40221: LD_INT 2
40223: ARRAY
40224: PPUSH
40225: LD_VAR 0 1
40229: PPUSH
40230: CALL_OW 255
40234: PPUSH
40235: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40239: LD_ADDR_EXP 121
40243: PUSH
40244: LD_EXP 121
40248: PPUSH
40249: LD_VAR 0 6
40253: PPUSH
40254: LD_EXP 121
40258: PUSH
40259: LD_VAR 0 6
40263: ARRAY
40264: PPUSH
40265: LD_VAR 0 5
40269: PPUSH
40270: CALL_OW 3
40274: PPUSH
40275: CALL_OW 1
40279: ST_TO_ADDR
// exit ;
40280: POP
40281: POP
40282: GO 40475
// end ; end ;
40284: GO 40124
40286: POP
40287: POP
// for i := minerMinesList [ index ] downto 1 do
40288: LD_ADDR_VAR 0 5
40292: PUSH
40293: DOUBLE
40294: LD_EXP 121
40298: PUSH
40299: LD_VAR 0 6
40303: ARRAY
40304: INC
40305: ST_TO_ADDR
40306: LD_INT 1
40308: PUSH
40309: FOR_DOWNTO
40310: IFFALSE 40473
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40312: LD_EXP 121
40316: PUSH
40317: LD_VAR 0 6
40321: ARRAY
40322: PUSH
40323: LD_VAR 0 5
40327: ARRAY
40328: PUSH
40329: LD_INT 1
40331: ARRAY
40332: PPUSH
40333: LD_EXP 121
40337: PUSH
40338: LD_VAR 0 6
40342: ARRAY
40343: PUSH
40344: LD_VAR 0 5
40348: ARRAY
40349: PUSH
40350: LD_INT 2
40352: ARRAY
40353: PPUSH
40354: LD_VAR 0 2
40358: PPUSH
40359: LD_VAR 0 3
40363: PPUSH
40364: CALL_OW 298
40368: PUSH
40369: LD_INT 6
40371: LESS
40372: IFFALSE 40471
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40374: LD_EXP 121
40378: PUSH
40379: LD_VAR 0 6
40383: ARRAY
40384: PUSH
40385: LD_VAR 0 5
40389: ARRAY
40390: PUSH
40391: LD_INT 1
40393: ARRAY
40394: PPUSH
40395: LD_EXP 121
40399: PUSH
40400: LD_VAR 0 6
40404: ARRAY
40405: PUSH
40406: LD_VAR 0 5
40410: ARRAY
40411: PUSH
40412: LD_INT 2
40414: ARRAY
40415: PPUSH
40416: LD_VAR 0 1
40420: PPUSH
40421: CALL_OW 255
40425: PPUSH
40426: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40430: LD_ADDR_EXP 121
40434: PUSH
40435: LD_EXP 121
40439: PPUSH
40440: LD_VAR 0 6
40444: PPUSH
40445: LD_EXP 121
40449: PUSH
40450: LD_VAR 0 6
40454: ARRAY
40455: PPUSH
40456: LD_VAR 0 5
40460: PPUSH
40461: CALL_OW 3
40465: PPUSH
40466: CALL_OW 1
40470: ST_TO_ADDR
// end ; end ;
40471: GO 40309
40473: POP
40474: POP
// end ;
40475: LD_VAR 0 4
40479: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40480: LD_INT 0
40482: PPUSH
40483: PPUSH
40484: PPUSH
40485: PPUSH
40486: PPUSH
40487: PPUSH
40488: PPUSH
40489: PPUSH
40490: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40491: LD_VAR 0 1
40495: PPUSH
40496: CALL_OW 264
40500: PUSH
40501: LD_INT 81
40503: EQUAL
40504: NOT
40505: PUSH
40506: LD_VAR 0 1
40510: PUSH
40511: LD_EXP 120
40515: IN
40516: NOT
40517: OR
40518: IFFALSE 40522
// exit ;
40520: GO 40844
// index := GetElementIndex ( minersList , unit ) ;
40522: LD_ADDR_VAR 0 6
40526: PUSH
40527: LD_EXP 120
40531: PPUSH
40532: LD_VAR 0 1
40536: PPUSH
40537: CALL 46116 0 2
40541: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40542: LD_ADDR_VAR 0 8
40546: PUSH
40547: LD_EXP 122
40551: PUSH
40552: LD_EXP 121
40556: PUSH
40557: LD_VAR 0 6
40561: ARRAY
40562: MINUS
40563: ST_TO_ADDR
// if not minesFreeAmount then
40564: LD_VAR 0 8
40568: NOT
40569: IFFALSE 40573
// exit ;
40571: GO 40844
// tmp := [ ] ;
40573: LD_ADDR_VAR 0 7
40577: PUSH
40578: EMPTY
40579: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40580: LD_ADDR_VAR 0 5
40584: PUSH
40585: DOUBLE
40586: LD_INT 1
40588: DEC
40589: ST_TO_ADDR
40590: LD_VAR 0 8
40594: PUSH
40595: FOR_TO
40596: IFFALSE 40791
// begin _d := rand ( 0 , 5 ) ;
40598: LD_ADDR_VAR 0 11
40602: PUSH
40603: LD_INT 0
40605: PPUSH
40606: LD_INT 5
40608: PPUSH
40609: CALL_OW 12
40613: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40614: LD_ADDR_VAR 0 12
40618: PUSH
40619: LD_INT 2
40621: PPUSH
40622: LD_INT 6
40624: PPUSH
40625: CALL_OW 12
40629: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40630: LD_ADDR_VAR 0 9
40634: PUSH
40635: LD_VAR 0 2
40639: PPUSH
40640: LD_VAR 0 11
40644: PPUSH
40645: LD_VAR 0 12
40649: PPUSH
40650: CALL_OW 272
40654: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40655: LD_ADDR_VAR 0 10
40659: PUSH
40660: LD_VAR 0 3
40664: PPUSH
40665: LD_VAR 0 11
40669: PPUSH
40670: LD_VAR 0 12
40674: PPUSH
40675: CALL_OW 273
40679: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40680: LD_VAR 0 9
40684: PPUSH
40685: LD_VAR 0 10
40689: PPUSH
40690: CALL_OW 488
40694: PUSH
40695: LD_VAR 0 9
40699: PUSH
40700: LD_VAR 0 10
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_VAR 0 7
40713: IN
40714: NOT
40715: AND
40716: PUSH
40717: LD_VAR 0 9
40721: PPUSH
40722: LD_VAR 0 10
40726: PPUSH
40727: CALL_OW 458
40731: NOT
40732: AND
40733: IFFALSE 40775
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40735: LD_ADDR_VAR 0 7
40739: PUSH
40740: LD_VAR 0 7
40744: PPUSH
40745: LD_VAR 0 7
40749: PUSH
40750: LD_INT 1
40752: PLUS
40753: PPUSH
40754: LD_VAR 0 9
40758: PUSH
40759: LD_VAR 0 10
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PPUSH
40768: CALL_OW 1
40772: ST_TO_ADDR
40773: GO 40789
// i := i - 1 ;
40775: LD_ADDR_VAR 0 5
40779: PUSH
40780: LD_VAR 0 5
40784: PUSH
40785: LD_INT 1
40787: MINUS
40788: ST_TO_ADDR
// end ;
40789: GO 40595
40791: POP
40792: POP
// for i in tmp do
40793: LD_ADDR_VAR 0 5
40797: PUSH
40798: LD_VAR 0 7
40802: PUSH
40803: FOR_IN
40804: IFFALSE 40842
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40806: LD_VAR 0 1
40810: PPUSH
40811: LD_VAR 0 5
40815: PUSH
40816: LD_INT 1
40818: ARRAY
40819: PPUSH
40820: LD_VAR 0 5
40824: PUSH
40825: LD_INT 2
40827: ARRAY
40828: PPUSH
40829: CALL 39788 0 3
40833: NOT
40834: IFFALSE 40840
// exit ;
40836: POP
40837: POP
40838: GO 40844
40840: GO 40803
40842: POP
40843: POP
// end ;
40844: LD_VAR 0 4
40848: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40849: LD_INT 0
40851: PPUSH
40852: PPUSH
40853: PPUSH
40854: PPUSH
40855: PPUSH
40856: PPUSH
40857: PPUSH
40858: PPUSH
40859: PPUSH
// if GetClass ( unit ) <> class_sniper then
40860: LD_VAR 0 1
40864: PPUSH
40865: CALL_OW 257
40869: PUSH
40870: LD_INT 5
40872: NONEQUAL
40873: IFFALSE 40877
// exit ;
40875: GO 41343
// dist := 8 ;
40877: LD_ADDR_VAR 0 5
40881: PUSH
40882: LD_INT 8
40884: ST_TO_ADDR
// viewRange := 12 ;
40885: LD_ADDR_VAR 0 8
40889: PUSH
40890: LD_INT 12
40892: ST_TO_ADDR
// side := GetSide ( unit ) ;
40893: LD_ADDR_VAR 0 6
40897: PUSH
40898: LD_VAR 0 1
40902: PPUSH
40903: CALL_OW 255
40907: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40908: LD_INT 61
40910: PPUSH
40911: LD_VAR 0 6
40915: PPUSH
40916: CALL_OW 321
40920: PUSH
40921: LD_INT 2
40923: EQUAL
40924: IFFALSE 40934
// viewRange := 16 ;
40926: LD_ADDR_VAR 0 8
40930: PUSH
40931: LD_INT 16
40933: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40934: LD_VAR 0 1
40938: PPUSH
40939: LD_VAR 0 2
40943: PPUSH
40944: LD_VAR 0 3
40948: PPUSH
40949: CALL_OW 297
40953: PUSH
40954: LD_VAR 0 5
40958: GREATER
40959: IFFALSE 41038
// begin ComMoveXY ( unit , x , y ) ;
40961: LD_VAR 0 1
40965: PPUSH
40966: LD_VAR 0 2
40970: PPUSH
40971: LD_VAR 0 3
40975: PPUSH
40976: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40980: LD_INT 35
40982: PPUSH
40983: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40987: LD_VAR 0 1
40991: PPUSH
40992: LD_VAR 0 2
40996: PPUSH
40997: LD_VAR 0 3
41001: PPUSH
41002: CALL 77877 0 3
41006: NOT
41007: IFFALSE 41011
// exit ;
41009: GO 41343
// until GetDistUnitXY ( unit , x , y ) < dist ;
41011: LD_VAR 0 1
41015: PPUSH
41016: LD_VAR 0 2
41020: PPUSH
41021: LD_VAR 0 3
41025: PPUSH
41026: CALL_OW 297
41030: PUSH
41031: LD_VAR 0 5
41035: LESS
41036: IFFALSE 40980
// end ; ComTurnXY ( unit , x , y ) ;
41038: LD_VAR 0 1
41042: PPUSH
41043: LD_VAR 0 2
41047: PPUSH
41048: LD_VAR 0 3
41052: PPUSH
41053: CALL_OW 118
// repeat if Multiplayer then
41057: LD_OWVAR 4
41061: IFFALSE 41072
// wait ( 35 ) else
41063: LD_INT 35
41065: PPUSH
41066: CALL_OW 67
41070: GO 41079
// wait ( 5 ) ;
41072: LD_INT 5
41074: PPUSH
41075: CALL_OW 67
// _d := GetDir ( unit ) ;
41079: LD_ADDR_VAR 0 11
41083: PUSH
41084: LD_VAR 0 1
41088: PPUSH
41089: CALL_OW 254
41093: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41094: LD_ADDR_VAR 0 7
41098: PUSH
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 250
41108: PPUSH
41109: LD_VAR 0 1
41113: PPUSH
41114: CALL_OW 251
41118: PPUSH
41119: LD_VAR 0 2
41123: PPUSH
41124: LD_VAR 0 3
41128: PPUSH
41129: CALL 80485 0 4
41133: ST_TO_ADDR
// until dir = _d ;
41134: LD_VAR 0 7
41138: PUSH
41139: LD_VAR 0 11
41143: EQUAL
41144: IFFALSE 41057
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41146: LD_ADDR_VAR 0 9
41150: PUSH
41151: LD_VAR 0 1
41155: PPUSH
41156: CALL_OW 250
41160: PPUSH
41161: LD_VAR 0 7
41165: PPUSH
41166: LD_VAR 0 5
41170: PPUSH
41171: CALL_OW 272
41175: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41176: LD_ADDR_VAR 0 10
41180: PUSH
41181: LD_VAR 0 1
41185: PPUSH
41186: CALL_OW 251
41190: PPUSH
41191: LD_VAR 0 7
41195: PPUSH
41196: LD_VAR 0 5
41200: PPUSH
41201: CALL_OW 273
41205: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41206: LD_VAR 0 9
41210: PPUSH
41211: LD_VAR 0 10
41215: PPUSH
41216: CALL_OW 488
41220: NOT
41221: IFFALSE 41225
// exit ;
41223: GO 41343
// ComAnimCustom ( unit , 1 ) ;
41225: LD_VAR 0 1
41229: PPUSH
41230: LD_INT 1
41232: PPUSH
41233: CALL_OW 592
// p := 0 ;
41237: LD_ADDR_VAR 0 12
41241: PUSH
41242: LD_INT 0
41244: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41245: LD_VAR 0 9
41249: PPUSH
41250: LD_VAR 0 10
41254: PPUSH
41255: LD_VAR 0 6
41259: PPUSH
41260: LD_VAR 0 8
41264: PPUSH
41265: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41269: LD_INT 35
41271: PPUSH
41272: CALL_OW 67
// p := Inc ( p ) ;
41276: LD_ADDR_VAR 0 12
41280: PUSH
41281: LD_VAR 0 12
41285: PPUSH
41286: CALL 80441 0 1
41290: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41291: LD_VAR 0 12
41295: PUSH
41296: LD_INT 3
41298: EQUAL
41299: PUSH
41300: LD_VAR 0 1
41304: PPUSH
41305: CALL_OW 302
41309: NOT
41310: OR
41311: PUSH
41312: LD_VAR 0 1
41316: PPUSH
41317: CALL_OW 301
41321: OR
41322: IFFALSE 41269
// RemoveSeeing ( _x , _y , side ) ;
41324: LD_VAR 0 9
41328: PPUSH
41329: LD_VAR 0 10
41333: PPUSH
41334: LD_VAR 0 6
41338: PPUSH
41339: CALL_OW 331
// end ; end_of_file
41343: LD_VAR 0 4
41347: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41348: LD_INT 0
41350: PPUSH
41351: PPUSH
// if exist_mode then
41352: LD_VAR 0 2
41356: IFFALSE 41402
// begin unit := CreateCharacter ( prefix & ident ) ;
41358: LD_ADDR_VAR 0 5
41362: PUSH
41363: LD_VAR 0 3
41367: PUSH
41368: LD_VAR 0 1
41372: STR
41373: PPUSH
41374: CALL_OW 34
41378: ST_TO_ADDR
// if unit then
41379: LD_VAR 0 5
41383: IFFALSE 41400
// DeleteCharacters ( prefix & ident ) ;
41385: LD_VAR 0 3
41389: PUSH
41390: LD_VAR 0 1
41394: STR
41395: PPUSH
41396: CALL_OW 40
// end else
41400: GO 41417
// unit := NewCharacter ( ident ) ;
41402: LD_ADDR_VAR 0 5
41406: PUSH
41407: LD_VAR 0 1
41411: PPUSH
41412: CALL_OW 25
41416: ST_TO_ADDR
// result := unit ;
41417: LD_ADDR_VAR 0 4
41421: PUSH
41422: LD_VAR 0 5
41426: ST_TO_ADDR
// end ;
41427: LD_VAR 0 4
41431: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41432: LD_INT 0
41434: PPUSH
41435: PPUSH
// if not side or not nation then
41436: LD_VAR 0 1
41440: NOT
41441: PUSH
41442: LD_VAR 0 2
41446: NOT
41447: OR
41448: IFFALSE 41452
// exit ;
41450: GO 42220
// case nation of nation_american :
41452: LD_VAR 0 2
41456: PUSH
41457: LD_INT 1
41459: DOUBLE
41460: EQUAL
41461: IFTRUE 41465
41463: GO 41679
41465: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41466: LD_ADDR_VAR 0 4
41470: PUSH
41471: LD_INT 35
41473: PUSH
41474: LD_INT 45
41476: PUSH
41477: LD_INT 46
41479: PUSH
41480: LD_INT 47
41482: PUSH
41483: LD_INT 82
41485: PUSH
41486: LD_INT 83
41488: PUSH
41489: LD_INT 84
41491: PUSH
41492: LD_INT 85
41494: PUSH
41495: LD_INT 86
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: LD_INT 2
41503: PUSH
41504: LD_INT 6
41506: PUSH
41507: LD_INT 15
41509: PUSH
41510: LD_INT 16
41512: PUSH
41513: LD_INT 7
41515: PUSH
41516: LD_INT 12
41518: PUSH
41519: LD_INT 13
41521: PUSH
41522: LD_INT 10
41524: PUSH
41525: LD_INT 14
41527: PUSH
41528: LD_INT 20
41530: PUSH
41531: LD_INT 21
41533: PUSH
41534: LD_INT 22
41536: PUSH
41537: LD_INT 25
41539: PUSH
41540: LD_INT 32
41542: PUSH
41543: LD_INT 27
41545: PUSH
41546: LD_INT 36
41548: PUSH
41549: LD_INT 69
41551: PUSH
41552: LD_INT 39
41554: PUSH
41555: LD_INT 34
41557: PUSH
41558: LD_INT 40
41560: PUSH
41561: LD_INT 48
41563: PUSH
41564: LD_INT 49
41566: PUSH
41567: LD_INT 50
41569: PUSH
41570: LD_INT 51
41572: PUSH
41573: LD_INT 52
41575: PUSH
41576: LD_INT 53
41578: PUSH
41579: LD_INT 54
41581: PUSH
41582: LD_INT 55
41584: PUSH
41585: LD_INT 56
41587: PUSH
41588: LD_INT 57
41590: PUSH
41591: LD_INT 58
41593: PUSH
41594: LD_INT 59
41596: PUSH
41597: LD_INT 60
41599: PUSH
41600: LD_INT 61
41602: PUSH
41603: LD_INT 62
41605: PUSH
41606: LD_INT 80
41608: PUSH
41609: LD_INT 82
41611: PUSH
41612: LD_INT 83
41614: PUSH
41615: LD_INT 84
41617: PUSH
41618: LD_INT 85
41620: PUSH
41621: LD_INT 86
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: ST_TO_ADDR
41677: GO 42144
41679: LD_INT 2
41681: DOUBLE
41682: EQUAL
41683: IFTRUE 41687
41685: GO 41913
41687: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41688: LD_ADDR_VAR 0 4
41692: PUSH
41693: LD_INT 35
41695: PUSH
41696: LD_INT 45
41698: PUSH
41699: LD_INT 46
41701: PUSH
41702: LD_INT 47
41704: PUSH
41705: LD_INT 82
41707: PUSH
41708: LD_INT 83
41710: PUSH
41711: LD_INT 84
41713: PUSH
41714: LD_INT 85
41716: PUSH
41717: LD_INT 87
41719: PUSH
41720: LD_INT 70
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: LD_INT 11
41728: PUSH
41729: LD_INT 3
41731: PUSH
41732: LD_INT 4
41734: PUSH
41735: LD_INT 5
41737: PUSH
41738: LD_INT 6
41740: PUSH
41741: LD_INT 15
41743: PUSH
41744: LD_INT 18
41746: PUSH
41747: LD_INT 7
41749: PUSH
41750: LD_INT 17
41752: PUSH
41753: LD_INT 8
41755: PUSH
41756: LD_INT 20
41758: PUSH
41759: LD_INT 21
41761: PUSH
41762: LD_INT 22
41764: PUSH
41765: LD_INT 72
41767: PUSH
41768: LD_INT 26
41770: PUSH
41771: LD_INT 69
41773: PUSH
41774: LD_INT 39
41776: PUSH
41777: LD_INT 40
41779: PUSH
41780: LD_INT 41
41782: PUSH
41783: LD_INT 42
41785: PUSH
41786: LD_INT 43
41788: PUSH
41789: LD_INT 48
41791: PUSH
41792: LD_INT 49
41794: PUSH
41795: LD_INT 50
41797: PUSH
41798: LD_INT 51
41800: PUSH
41801: LD_INT 52
41803: PUSH
41804: LD_INT 53
41806: PUSH
41807: LD_INT 54
41809: PUSH
41810: LD_INT 55
41812: PUSH
41813: LD_INT 56
41815: PUSH
41816: LD_INT 60
41818: PUSH
41819: LD_INT 61
41821: PUSH
41822: LD_INT 62
41824: PUSH
41825: LD_INT 66
41827: PUSH
41828: LD_INT 67
41830: PUSH
41831: LD_INT 68
41833: PUSH
41834: LD_INT 81
41836: PUSH
41837: LD_INT 82
41839: PUSH
41840: LD_INT 83
41842: PUSH
41843: LD_INT 84
41845: PUSH
41846: LD_INT 85
41848: PUSH
41849: LD_INT 87
41851: PUSH
41852: LD_INT 88
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: ST_TO_ADDR
41911: GO 42144
41913: LD_INT 3
41915: DOUBLE
41916: EQUAL
41917: IFTRUE 41921
41919: GO 42143
41921: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41922: LD_ADDR_VAR 0 4
41926: PUSH
41927: LD_INT 46
41929: PUSH
41930: LD_INT 47
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: LD_INT 82
41941: PUSH
41942: LD_INT 83
41944: PUSH
41945: LD_INT 84
41947: PUSH
41948: LD_INT 85
41950: PUSH
41951: LD_INT 86
41953: PUSH
41954: LD_INT 11
41956: PUSH
41957: LD_INT 9
41959: PUSH
41960: LD_INT 20
41962: PUSH
41963: LD_INT 19
41965: PUSH
41966: LD_INT 21
41968: PUSH
41969: LD_INT 24
41971: PUSH
41972: LD_INT 22
41974: PUSH
41975: LD_INT 25
41977: PUSH
41978: LD_INT 28
41980: PUSH
41981: LD_INT 29
41983: PUSH
41984: LD_INT 30
41986: PUSH
41987: LD_INT 31
41989: PUSH
41990: LD_INT 37
41992: PUSH
41993: LD_INT 38
41995: PUSH
41996: LD_INT 32
41998: PUSH
41999: LD_INT 27
42001: PUSH
42002: LD_INT 33
42004: PUSH
42005: LD_INT 69
42007: PUSH
42008: LD_INT 39
42010: PUSH
42011: LD_INT 34
42013: PUSH
42014: LD_INT 40
42016: PUSH
42017: LD_INT 71
42019: PUSH
42020: LD_INT 23
42022: PUSH
42023: LD_INT 44
42025: PUSH
42026: LD_INT 48
42028: PUSH
42029: LD_INT 49
42031: PUSH
42032: LD_INT 50
42034: PUSH
42035: LD_INT 51
42037: PUSH
42038: LD_INT 52
42040: PUSH
42041: LD_INT 53
42043: PUSH
42044: LD_INT 54
42046: PUSH
42047: LD_INT 55
42049: PUSH
42050: LD_INT 56
42052: PUSH
42053: LD_INT 57
42055: PUSH
42056: LD_INT 58
42058: PUSH
42059: LD_INT 59
42061: PUSH
42062: LD_INT 63
42064: PUSH
42065: LD_INT 64
42067: PUSH
42068: LD_INT 65
42070: PUSH
42071: LD_INT 82
42073: PUSH
42074: LD_INT 83
42076: PUSH
42077: LD_INT 84
42079: PUSH
42080: LD_INT 85
42082: PUSH
42083: LD_INT 86
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: ST_TO_ADDR
42141: GO 42144
42143: POP
// if state > - 1 and state < 3 then
42144: LD_VAR 0 3
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: GREATER
42153: PUSH
42154: LD_VAR 0 3
42158: PUSH
42159: LD_INT 3
42161: LESS
42162: AND
42163: IFFALSE 42220
// for i in result do
42165: LD_ADDR_VAR 0 5
42169: PUSH
42170: LD_VAR 0 4
42174: PUSH
42175: FOR_IN
42176: IFFALSE 42218
// if GetTech ( i , side ) <> state then
42178: LD_VAR 0 5
42182: PPUSH
42183: LD_VAR 0 1
42187: PPUSH
42188: CALL_OW 321
42192: PUSH
42193: LD_VAR 0 3
42197: NONEQUAL
42198: IFFALSE 42216
// result := result diff i ;
42200: LD_ADDR_VAR 0 4
42204: PUSH
42205: LD_VAR 0 4
42209: PUSH
42210: LD_VAR 0 5
42214: DIFF
42215: ST_TO_ADDR
42216: GO 42175
42218: POP
42219: POP
// end ;
42220: LD_VAR 0 4
42224: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42225: LD_INT 0
42227: PPUSH
42228: PPUSH
42229: PPUSH
// result := true ;
42230: LD_ADDR_VAR 0 3
42234: PUSH
42235: LD_INT 1
42237: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42238: LD_ADDR_VAR 0 5
42242: PUSH
42243: LD_VAR 0 2
42247: PPUSH
42248: CALL_OW 480
42252: ST_TO_ADDR
// if not tmp then
42253: LD_VAR 0 5
42257: NOT
42258: IFFALSE 42262
// exit ;
42260: GO 42311
// for i in tmp do
42262: LD_ADDR_VAR 0 4
42266: PUSH
42267: LD_VAR 0 5
42271: PUSH
42272: FOR_IN
42273: IFFALSE 42309
// if GetTech ( i , side ) <> state_researched then
42275: LD_VAR 0 4
42279: PPUSH
42280: LD_VAR 0 1
42284: PPUSH
42285: CALL_OW 321
42289: PUSH
42290: LD_INT 2
42292: NONEQUAL
42293: IFFALSE 42307
// begin result := false ;
42295: LD_ADDR_VAR 0 3
42299: PUSH
42300: LD_INT 0
42302: ST_TO_ADDR
// exit ;
42303: POP
42304: POP
42305: GO 42311
// end ;
42307: GO 42272
42309: POP
42310: POP
// end ;
42311: LD_VAR 0 3
42315: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42316: LD_INT 0
42318: PPUSH
42319: PPUSH
42320: PPUSH
42321: PPUSH
42322: PPUSH
42323: PPUSH
42324: PPUSH
42325: PPUSH
42326: PPUSH
42327: PPUSH
42328: PPUSH
42329: PPUSH
42330: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42331: LD_VAR 0 1
42335: NOT
42336: PUSH
42337: LD_VAR 0 1
42341: PPUSH
42342: CALL_OW 257
42346: PUSH
42347: LD_INT 9
42349: NONEQUAL
42350: OR
42351: IFFALSE 42355
// exit ;
42353: GO 42928
// side := GetSide ( unit ) ;
42355: LD_ADDR_VAR 0 9
42359: PUSH
42360: LD_VAR 0 1
42364: PPUSH
42365: CALL_OW 255
42369: ST_TO_ADDR
// tech_space := tech_spacanom ;
42370: LD_ADDR_VAR 0 12
42374: PUSH
42375: LD_INT 29
42377: ST_TO_ADDR
// tech_time := tech_taurad ;
42378: LD_ADDR_VAR 0 13
42382: PUSH
42383: LD_INT 28
42385: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42386: LD_ADDR_VAR 0 11
42390: PUSH
42391: LD_VAR 0 1
42395: PPUSH
42396: CALL_OW 310
42400: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42401: LD_VAR 0 11
42405: PPUSH
42406: CALL_OW 247
42410: PUSH
42411: LD_INT 2
42413: EQUAL
42414: IFFALSE 42418
// exit ;
42416: GO 42928
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42418: LD_ADDR_VAR 0 8
42422: PUSH
42423: LD_INT 81
42425: PUSH
42426: LD_VAR 0 9
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 3
42437: PUSH
42438: LD_INT 21
42440: PUSH
42441: LD_INT 3
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PPUSH
42456: CALL_OW 69
42460: ST_TO_ADDR
// if not tmp then
42461: LD_VAR 0 8
42465: NOT
42466: IFFALSE 42470
// exit ;
42468: GO 42928
// if in_unit then
42470: LD_VAR 0 11
42474: IFFALSE 42498
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42476: LD_ADDR_VAR 0 10
42480: PUSH
42481: LD_VAR 0 8
42485: PPUSH
42486: LD_VAR 0 11
42490: PPUSH
42491: CALL_OW 74
42495: ST_TO_ADDR
42496: GO 42518
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42498: LD_ADDR_VAR 0 10
42502: PUSH
42503: LD_VAR 0 8
42507: PPUSH
42508: LD_VAR 0 1
42512: PPUSH
42513: CALL_OW 74
42517: ST_TO_ADDR
// if not enemy then
42518: LD_VAR 0 10
42522: NOT
42523: IFFALSE 42527
// exit ;
42525: GO 42928
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42527: LD_VAR 0 11
42531: PUSH
42532: LD_VAR 0 11
42536: PPUSH
42537: LD_VAR 0 10
42541: PPUSH
42542: CALL_OW 296
42546: PUSH
42547: LD_INT 13
42549: GREATER
42550: AND
42551: PUSH
42552: LD_VAR 0 1
42556: PPUSH
42557: LD_VAR 0 10
42561: PPUSH
42562: CALL_OW 296
42566: PUSH
42567: LD_INT 12
42569: GREATER
42570: OR
42571: IFFALSE 42575
// exit ;
42573: GO 42928
// missile := [ 1 ] ;
42575: LD_ADDR_VAR 0 14
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: EMPTY
42584: LIST
42585: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42586: LD_VAR 0 9
42590: PPUSH
42591: LD_VAR 0 12
42595: PPUSH
42596: CALL_OW 325
42600: IFFALSE 42629
// missile := Replace ( missile , missile + 1 , 2 ) ;
42602: LD_ADDR_VAR 0 14
42606: PUSH
42607: LD_VAR 0 14
42611: PPUSH
42612: LD_VAR 0 14
42616: PUSH
42617: LD_INT 1
42619: PLUS
42620: PPUSH
42621: LD_INT 2
42623: PPUSH
42624: CALL_OW 1
42628: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42629: LD_VAR 0 9
42633: PPUSH
42634: LD_VAR 0 13
42638: PPUSH
42639: CALL_OW 325
42643: PUSH
42644: LD_VAR 0 10
42648: PPUSH
42649: CALL_OW 255
42653: PPUSH
42654: LD_VAR 0 13
42658: PPUSH
42659: CALL_OW 325
42663: NOT
42664: AND
42665: IFFALSE 42694
// missile := Replace ( missile , missile + 1 , 3 ) ;
42667: LD_ADDR_VAR 0 14
42671: PUSH
42672: LD_VAR 0 14
42676: PPUSH
42677: LD_VAR 0 14
42681: PUSH
42682: LD_INT 1
42684: PLUS
42685: PPUSH
42686: LD_INT 3
42688: PPUSH
42689: CALL_OW 1
42693: ST_TO_ADDR
// if missile < 2 then
42694: LD_VAR 0 14
42698: PUSH
42699: LD_INT 2
42701: LESS
42702: IFFALSE 42706
// exit ;
42704: GO 42928
// x := GetX ( enemy ) ;
42706: LD_ADDR_VAR 0 4
42710: PUSH
42711: LD_VAR 0 10
42715: PPUSH
42716: CALL_OW 250
42720: ST_TO_ADDR
// y := GetY ( enemy ) ;
42721: LD_ADDR_VAR 0 5
42725: PUSH
42726: LD_VAR 0 10
42730: PPUSH
42731: CALL_OW 251
42735: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42736: LD_ADDR_VAR 0 6
42740: PUSH
42741: LD_VAR 0 4
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PPUSH
42750: LD_INT 1
42752: PPUSH
42753: CALL_OW 12
42757: PLUS
42758: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42759: LD_ADDR_VAR 0 7
42763: PUSH
42764: LD_VAR 0 5
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PPUSH
42773: LD_INT 1
42775: PPUSH
42776: CALL_OW 12
42780: PLUS
42781: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42782: LD_VAR 0 6
42786: PPUSH
42787: LD_VAR 0 7
42791: PPUSH
42792: CALL_OW 488
42796: NOT
42797: IFFALSE 42819
// begin _x := x ;
42799: LD_ADDR_VAR 0 6
42803: PUSH
42804: LD_VAR 0 4
42808: ST_TO_ADDR
// _y := y ;
42809: LD_ADDR_VAR 0 7
42813: PUSH
42814: LD_VAR 0 5
42818: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42819: LD_ADDR_VAR 0 3
42823: PUSH
42824: LD_INT 1
42826: PPUSH
42827: LD_VAR 0 14
42831: PPUSH
42832: CALL_OW 12
42836: ST_TO_ADDR
// case i of 1 :
42837: LD_VAR 0 3
42841: PUSH
42842: LD_INT 1
42844: DOUBLE
42845: EQUAL
42846: IFTRUE 42850
42848: GO 42867
42850: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42851: LD_VAR 0 1
42855: PPUSH
42856: LD_VAR 0 10
42860: PPUSH
42861: CALL_OW 115
42865: GO 42928
42867: LD_INT 2
42869: DOUBLE
42870: EQUAL
42871: IFTRUE 42875
42873: GO 42897
42875: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42876: LD_VAR 0 1
42880: PPUSH
42881: LD_VAR 0 6
42885: PPUSH
42886: LD_VAR 0 7
42890: PPUSH
42891: CALL_OW 153
42895: GO 42928
42897: LD_INT 3
42899: DOUBLE
42900: EQUAL
42901: IFTRUE 42905
42903: GO 42927
42905: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42906: LD_VAR 0 1
42910: PPUSH
42911: LD_VAR 0 6
42915: PPUSH
42916: LD_VAR 0 7
42920: PPUSH
42921: CALL_OW 154
42925: GO 42928
42927: POP
// end ;
42928: LD_VAR 0 2
42932: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42933: LD_INT 0
42935: PPUSH
42936: PPUSH
42937: PPUSH
42938: PPUSH
42939: PPUSH
42940: PPUSH
// if not unit or not building then
42941: LD_VAR 0 1
42945: NOT
42946: PUSH
42947: LD_VAR 0 2
42951: NOT
42952: OR
42953: IFFALSE 42957
// exit ;
42955: GO 43115
// x := GetX ( building ) ;
42957: LD_ADDR_VAR 0 5
42961: PUSH
42962: LD_VAR 0 2
42966: PPUSH
42967: CALL_OW 250
42971: ST_TO_ADDR
// y := GetY ( building ) ;
42972: LD_ADDR_VAR 0 6
42976: PUSH
42977: LD_VAR 0 2
42981: PPUSH
42982: CALL_OW 251
42986: ST_TO_ADDR
// for i = 0 to 5 do
42987: LD_ADDR_VAR 0 4
42991: PUSH
42992: DOUBLE
42993: LD_INT 0
42995: DEC
42996: ST_TO_ADDR
42997: LD_INT 5
42999: PUSH
43000: FOR_TO
43001: IFFALSE 43113
// begin _x := ShiftX ( x , i , 3 ) ;
43003: LD_ADDR_VAR 0 7
43007: PUSH
43008: LD_VAR 0 5
43012: PPUSH
43013: LD_VAR 0 4
43017: PPUSH
43018: LD_INT 3
43020: PPUSH
43021: CALL_OW 272
43025: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43026: LD_ADDR_VAR 0 8
43030: PUSH
43031: LD_VAR 0 6
43035: PPUSH
43036: LD_VAR 0 4
43040: PPUSH
43041: LD_INT 3
43043: PPUSH
43044: CALL_OW 273
43048: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43049: LD_VAR 0 7
43053: PPUSH
43054: LD_VAR 0 8
43058: PPUSH
43059: CALL_OW 488
43063: NOT
43064: IFFALSE 43068
// continue ;
43066: GO 43000
// if HexInfo ( _x , _y ) = 0 then
43068: LD_VAR 0 7
43072: PPUSH
43073: LD_VAR 0 8
43077: PPUSH
43078: CALL_OW 428
43082: PUSH
43083: LD_INT 0
43085: EQUAL
43086: IFFALSE 43111
// begin ComMoveXY ( unit , _x , _y ) ;
43088: LD_VAR 0 1
43092: PPUSH
43093: LD_VAR 0 7
43097: PPUSH
43098: LD_VAR 0 8
43102: PPUSH
43103: CALL_OW 111
// exit ;
43107: POP
43108: POP
43109: GO 43115
// end ; end ;
43111: GO 43000
43113: POP
43114: POP
// end ;
43115: LD_VAR 0 3
43119: RET
// export function ScanBase ( side , base_area ) ; begin
43120: LD_INT 0
43122: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43123: LD_ADDR_VAR 0 3
43127: PUSH
43128: LD_VAR 0 2
43132: PPUSH
43133: LD_INT 81
43135: PUSH
43136: LD_VAR 0 1
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PPUSH
43145: CALL_OW 70
43149: ST_TO_ADDR
// end ;
43150: LD_VAR 0 3
43154: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43155: LD_INT 0
43157: PPUSH
43158: PPUSH
43159: PPUSH
43160: PPUSH
// result := false ;
43161: LD_ADDR_VAR 0 2
43165: PUSH
43166: LD_INT 0
43168: ST_TO_ADDR
// side := GetSide ( unit ) ;
43169: LD_ADDR_VAR 0 3
43173: PUSH
43174: LD_VAR 0 1
43178: PPUSH
43179: CALL_OW 255
43183: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43184: LD_ADDR_VAR 0 4
43188: PUSH
43189: LD_VAR 0 1
43193: PPUSH
43194: CALL_OW 248
43198: ST_TO_ADDR
// case nat of 1 :
43199: LD_VAR 0 4
43203: PUSH
43204: LD_INT 1
43206: DOUBLE
43207: EQUAL
43208: IFTRUE 43212
43210: GO 43223
43212: POP
// tech := tech_lassight ; 2 :
43213: LD_ADDR_VAR 0 5
43217: PUSH
43218: LD_INT 12
43220: ST_TO_ADDR
43221: GO 43262
43223: LD_INT 2
43225: DOUBLE
43226: EQUAL
43227: IFTRUE 43231
43229: GO 43242
43231: POP
// tech := tech_mortar ; 3 :
43232: LD_ADDR_VAR 0 5
43236: PUSH
43237: LD_INT 41
43239: ST_TO_ADDR
43240: GO 43262
43242: LD_INT 3
43244: DOUBLE
43245: EQUAL
43246: IFTRUE 43250
43248: GO 43261
43250: POP
// tech := tech_bazooka ; end ;
43251: LD_ADDR_VAR 0 5
43255: PUSH
43256: LD_INT 44
43258: ST_TO_ADDR
43259: GO 43262
43261: POP
// if Researched ( side , tech ) then
43262: LD_VAR 0 3
43266: PPUSH
43267: LD_VAR 0 5
43271: PPUSH
43272: CALL_OW 325
43276: IFFALSE 43303
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43278: LD_ADDR_VAR 0 2
43282: PUSH
43283: LD_INT 5
43285: PUSH
43286: LD_INT 8
43288: PUSH
43289: LD_INT 9
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: LIST
43296: PUSH
43297: LD_VAR 0 4
43301: ARRAY
43302: ST_TO_ADDR
// end ;
43303: LD_VAR 0 2
43307: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43308: LD_INT 0
43310: PPUSH
43311: PPUSH
43312: PPUSH
// if not mines then
43313: LD_VAR 0 2
43317: NOT
43318: IFFALSE 43322
// exit ;
43320: GO 43466
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43322: LD_ADDR_VAR 0 5
43326: PUSH
43327: LD_INT 81
43329: PUSH
43330: LD_VAR 0 1
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: PUSH
43342: LD_INT 21
43344: PUSH
43345: LD_INT 3
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PPUSH
43360: CALL_OW 69
43364: ST_TO_ADDR
// for i in mines do
43365: LD_ADDR_VAR 0 4
43369: PUSH
43370: LD_VAR 0 2
43374: PUSH
43375: FOR_IN
43376: IFFALSE 43464
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43378: LD_VAR 0 4
43382: PUSH
43383: LD_INT 1
43385: ARRAY
43386: PPUSH
43387: LD_VAR 0 4
43391: PUSH
43392: LD_INT 2
43394: ARRAY
43395: PPUSH
43396: CALL_OW 458
43400: NOT
43401: IFFALSE 43405
// continue ;
43403: GO 43375
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43405: LD_VAR 0 4
43409: PUSH
43410: LD_INT 1
43412: ARRAY
43413: PPUSH
43414: LD_VAR 0 4
43418: PUSH
43419: LD_INT 2
43421: ARRAY
43422: PPUSH
43423: CALL_OW 428
43427: PUSH
43428: LD_VAR 0 5
43432: IN
43433: IFFALSE 43462
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43435: LD_VAR 0 4
43439: PUSH
43440: LD_INT 1
43442: ARRAY
43443: PPUSH
43444: LD_VAR 0 4
43448: PUSH
43449: LD_INT 2
43451: ARRAY
43452: PPUSH
43453: LD_VAR 0 1
43457: PPUSH
43458: CALL_OW 456
// end ;
43462: GO 43375
43464: POP
43465: POP
// end ;
43466: LD_VAR 0 3
43470: RET
// export function Count ( array ) ; begin
43471: LD_INT 0
43473: PPUSH
// result := array + 0 ;
43474: LD_ADDR_VAR 0 2
43478: PUSH
43479: LD_VAR 0 1
43483: PUSH
43484: LD_INT 0
43486: PLUS
43487: ST_TO_ADDR
// end ;
43488: LD_VAR 0 2
43492: RET
// export function IsEmpty ( building ) ; begin
43493: LD_INT 0
43495: PPUSH
// if not building then
43496: LD_VAR 0 1
43500: NOT
43501: IFFALSE 43505
// exit ;
43503: GO 43548
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43505: LD_ADDR_VAR 0 2
43509: PUSH
43510: LD_VAR 0 1
43514: PUSH
43515: LD_INT 22
43517: PUSH
43518: LD_VAR 0 1
43522: PPUSH
43523: CALL_OW 255
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 58
43534: PUSH
43535: EMPTY
43536: LIST
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PPUSH
43542: CALL_OW 69
43546: IN
43547: ST_TO_ADDR
// end ;
43548: LD_VAR 0 2
43552: RET
// export function IsNotFull ( building ) ; var places ; begin
43553: LD_INT 0
43555: PPUSH
43556: PPUSH
// if not building then
43557: LD_VAR 0 1
43561: NOT
43562: IFFALSE 43566
// exit ;
43564: GO 43594
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43566: LD_ADDR_VAR 0 2
43570: PUSH
43571: LD_VAR 0 1
43575: PPUSH
43576: LD_INT 3
43578: PUSH
43579: LD_INT 62
43581: PUSH
43582: EMPTY
43583: LIST
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PPUSH
43589: CALL_OW 72
43593: ST_TO_ADDR
// end ;
43594: LD_VAR 0 2
43598: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43599: LD_INT 0
43601: PPUSH
43602: PPUSH
43603: PPUSH
43604: PPUSH
// tmp := [ ] ;
43605: LD_ADDR_VAR 0 3
43609: PUSH
43610: EMPTY
43611: ST_TO_ADDR
// list := [ ] ;
43612: LD_ADDR_VAR 0 5
43616: PUSH
43617: EMPTY
43618: ST_TO_ADDR
// for i = 16 to 25 do
43619: LD_ADDR_VAR 0 4
43623: PUSH
43624: DOUBLE
43625: LD_INT 16
43627: DEC
43628: ST_TO_ADDR
43629: LD_INT 25
43631: PUSH
43632: FOR_TO
43633: IFFALSE 43706
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43635: LD_ADDR_VAR 0 3
43639: PUSH
43640: LD_VAR 0 3
43644: PUSH
43645: LD_INT 22
43647: PUSH
43648: LD_VAR 0 1
43652: PPUSH
43653: CALL_OW 255
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 91
43664: PUSH
43665: LD_VAR 0 1
43669: PUSH
43670: LD_INT 6
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 30
43680: PUSH
43681: LD_VAR 0 4
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: PUSH
43695: EMPTY
43696: LIST
43697: PPUSH
43698: CALL_OW 69
43702: ADD
43703: ST_TO_ADDR
43704: GO 43632
43706: POP
43707: POP
// for i = 1 to tmp do
43708: LD_ADDR_VAR 0 4
43712: PUSH
43713: DOUBLE
43714: LD_INT 1
43716: DEC
43717: ST_TO_ADDR
43718: LD_VAR 0 3
43722: PUSH
43723: FOR_TO
43724: IFFALSE 43812
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43726: LD_ADDR_VAR 0 5
43730: PUSH
43731: LD_VAR 0 5
43735: PUSH
43736: LD_VAR 0 3
43740: PUSH
43741: LD_VAR 0 4
43745: ARRAY
43746: PPUSH
43747: CALL_OW 266
43751: PUSH
43752: LD_VAR 0 3
43756: PUSH
43757: LD_VAR 0 4
43761: ARRAY
43762: PPUSH
43763: CALL_OW 250
43767: PUSH
43768: LD_VAR 0 3
43772: PUSH
43773: LD_VAR 0 4
43777: ARRAY
43778: PPUSH
43779: CALL_OW 251
43783: PUSH
43784: LD_VAR 0 3
43788: PUSH
43789: LD_VAR 0 4
43793: ARRAY
43794: PPUSH
43795: CALL_OW 254
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: PUSH
43806: EMPTY
43807: LIST
43808: ADD
43809: ST_TO_ADDR
43810: GO 43723
43812: POP
43813: POP
// result := list ;
43814: LD_ADDR_VAR 0 2
43818: PUSH
43819: LD_VAR 0 5
43823: ST_TO_ADDR
// end ;
43824: LD_VAR 0 2
43828: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43829: LD_INT 0
43831: PPUSH
43832: PPUSH
43833: PPUSH
43834: PPUSH
43835: PPUSH
43836: PPUSH
43837: PPUSH
// if not factory then
43838: LD_VAR 0 1
43842: NOT
43843: IFFALSE 43847
// exit ;
43845: GO 44440
// if control = control_apeman then
43847: LD_VAR 0 4
43851: PUSH
43852: LD_INT 5
43854: EQUAL
43855: IFFALSE 43964
// begin tmp := UnitsInside ( factory ) ;
43857: LD_ADDR_VAR 0 8
43861: PUSH
43862: LD_VAR 0 1
43866: PPUSH
43867: CALL_OW 313
43871: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43872: LD_VAR 0 8
43876: PPUSH
43877: LD_INT 25
43879: PUSH
43880: LD_INT 12
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PPUSH
43887: CALL_OW 72
43891: NOT
43892: IFFALSE 43902
// control := control_manual ;
43894: LD_ADDR_VAR 0 4
43898: PUSH
43899: LD_INT 1
43901: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43902: LD_ADDR_VAR 0 8
43906: PUSH
43907: LD_VAR 0 1
43911: PPUSH
43912: CALL 43599 0 1
43916: ST_TO_ADDR
// if tmp then
43917: LD_VAR 0 8
43921: IFFALSE 43964
// begin for i in tmp do
43923: LD_ADDR_VAR 0 7
43927: PUSH
43928: LD_VAR 0 8
43932: PUSH
43933: FOR_IN
43934: IFFALSE 43962
// if i [ 1 ] = b_ext_radio then
43936: LD_VAR 0 7
43940: PUSH
43941: LD_INT 1
43943: ARRAY
43944: PUSH
43945: LD_INT 22
43947: EQUAL
43948: IFFALSE 43960
// begin control := control_remote ;
43950: LD_ADDR_VAR 0 4
43954: PUSH
43955: LD_INT 2
43957: ST_TO_ADDR
// break ;
43958: GO 43962
// end ;
43960: GO 43933
43962: POP
43963: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43964: LD_VAR 0 1
43968: PPUSH
43969: LD_VAR 0 2
43973: PPUSH
43974: LD_VAR 0 3
43978: PPUSH
43979: LD_VAR 0 4
43983: PPUSH
43984: LD_VAR 0 5
43988: PPUSH
43989: CALL_OW 448
43993: IFFALSE 44028
// begin result := [ chassis , engine , control , weapon ] ;
43995: LD_ADDR_VAR 0 6
43999: PUSH
44000: LD_VAR 0 2
44004: PUSH
44005: LD_VAR 0 3
44009: PUSH
44010: LD_VAR 0 4
44014: PUSH
44015: LD_VAR 0 5
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: ST_TO_ADDR
// exit ;
44026: GO 44440
// end ; _chassis := AvailableChassisList ( factory ) ;
44028: LD_ADDR_VAR 0 9
44032: PUSH
44033: LD_VAR 0 1
44037: PPUSH
44038: CALL_OW 475
44042: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44043: LD_ADDR_VAR 0 11
44047: PUSH
44048: LD_VAR 0 1
44052: PPUSH
44053: CALL_OW 476
44057: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44058: LD_ADDR_VAR 0 12
44062: PUSH
44063: LD_VAR 0 1
44067: PPUSH
44068: CALL_OW 477
44072: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44073: LD_ADDR_VAR 0 10
44077: PUSH
44078: LD_VAR 0 1
44082: PPUSH
44083: CALL_OW 478
44087: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44088: LD_VAR 0 9
44092: NOT
44093: PUSH
44094: LD_VAR 0 11
44098: NOT
44099: OR
44100: PUSH
44101: LD_VAR 0 12
44105: NOT
44106: OR
44107: PUSH
44108: LD_VAR 0 10
44112: NOT
44113: OR
44114: IFFALSE 44149
// begin result := [ chassis , engine , control , weapon ] ;
44116: LD_ADDR_VAR 0 6
44120: PUSH
44121: LD_VAR 0 2
44125: PUSH
44126: LD_VAR 0 3
44130: PUSH
44131: LD_VAR 0 4
44135: PUSH
44136: LD_VAR 0 5
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: ST_TO_ADDR
// exit ;
44147: GO 44440
// end ; if not chassis in _chassis then
44149: LD_VAR 0 2
44153: PUSH
44154: LD_VAR 0 9
44158: IN
44159: NOT
44160: IFFALSE 44186
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44162: LD_ADDR_VAR 0 2
44166: PUSH
44167: LD_VAR 0 9
44171: PUSH
44172: LD_INT 1
44174: PPUSH
44175: LD_VAR 0 9
44179: PPUSH
44180: CALL_OW 12
44184: ARRAY
44185: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44186: LD_VAR 0 2
44190: PPUSH
44191: LD_VAR 0 3
44195: PPUSH
44196: CALL 44445 0 2
44200: NOT
44201: IFFALSE 44260
// repeat engine := _engine [ 1 ] ;
44203: LD_ADDR_VAR 0 3
44207: PUSH
44208: LD_VAR 0 11
44212: PUSH
44213: LD_INT 1
44215: ARRAY
44216: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44217: LD_ADDR_VAR 0 11
44221: PUSH
44222: LD_VAR 0 11
44226: PPUSH
44227: LD_INT 1
44229: PPUSH
44230: CALL_OW 3
44234: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44235: LD_VAR 0 2
44239: PPUSH
44240: LD_VAR 0 3
44244: PPUSH
44245: CALL 44445 0 2
44249: PUSH
44250: LD_VAR 0 11
44254: PUSH
44255: EMPTY
44256: EQUAL
44257: OR
44258: IFFALSE 44203
// if not control in _control then
44260: LD_VAR 0 4
44264: PUSH
44265: LD_VAR 0 12
44269: IN
44270: NOT
44271: IFFALSE 44297
// control := _control [ rand ( 1 , _control ) ] ;
44273: LD_ADDR_VAR 0 4
44277: PUSH
44278: LD_VAR 0 12
44282: PUSH
44283: LD_INT 1
44285: PPUSH
44286: LD_VAR 0 12
44290: PPUSH
44291: CALL_OW 12
44295: ARRAY
44296: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44297: LD_VAR 0 2
44301: PPUSH
44302: LD_VAR 0 5
44306: PPUSH
44307: CALL 44665 0 2
44311: NOT
44312: IFFALSE 44371
// repeat weapon := _weapon [ 1 ] ;
44314: LD_ADDR_VAR 0 5
44318: PUSH
44319: LD_VAR 0 10
44323: PUSH
44324: LD_INT 1
44326: ARRAY
44327: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44328: LD_ADDR_VAR 0 10
44332: PUSH
44333: LD_VAR 0 10
44337: PPUSH
44338: LD_INT 1
44340: PPUSH
44341: CALL_OW 3
44345: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44346: LD_VAR 0 2
44350: PPUSH
44351: LD_VAR 0 5
44355: PPUSH
44356: CALL 44665 0 2
44360: PUSH
44361: LD_VAR 0 10
44365: PUSH
44366: EMPTY
44367: EQUAL
44368: OR
44369: IFFALSE 44314
// result := [ ] ;
44371: LD_ADDR_VAR 0 6
44375: PUSH
44376: EMPTY
44377: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44378: LD_VAR 0 1
44382: PPUSH
44383: LD_VAR 0 2
44387: PPUSH
44388: LD_VAR 0 3
44392: PPUSH
44393: LD_VAR 0 4
44397: PPUSH
44398: LD_VAR 0 5
44402: PPUSH
44403: CALL_OW 448
44407: IFFALSE 44440
// result := [ chassis , engine , control , weapon ] ;
44409: LD_ADDR_VAR 0 6
44413: PUSH
44414: LD_VAR 0 2
44418: PUSH
44419: LD_VAR 0 3
44423: PUSH
44424: LD_VAR 0 4
44428: PUSH
44429: LD_VAR 0 5
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: ST_TO_ADDR
// end ;
44440: LD_VAR 0 6
44444: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44445: LD_INT 0
44447: PPUSH
// if not chassis or not engine then
44448: LD_VAR 0 1
44452: NOT
44453: PUSH
44454: LD_VAR 0 2
44458: NOT
44459: OR
44460: IFFALSE 44464
// exit ;
44462: GO 44660
// case engine of engine_solar :
44464: LD_VAR 0 2
44468: PUSH
44469: LD_INT 2
44471: DOUBLE
44472: EQUAL
44473: IFTRUE 44477
44475: GO 44515
44477: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44478: LD_ADDR_VAR 0 3
44482: PUSH
44483: LD_INT 11
44485: PUSH
44486: LD_INT 12
44488: PUSH
44489: LD_INT 13
44491: PUSH
44492: LD_INT 14
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: LD_INT 2
44500: PUSH
44501: LD_INT 3
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: ST_TO_ADDR
44513: GO 44644
44515: LD_INT 1
44517: DOUBLE
44518: EQUAL
44519: IFTRUE 44523
44521: GO 44585
44523: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44524: LD_ADDR_VAR 0 3
44528: PUSH
44529: LD_INT 11
44531: PUSH
44532: LD_INT 12
44534: PUSH
44535: LD_INT 13
44537: PUSH
44538: LD_INT 14
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 3
44549: PUSH
44550: LD_INT 4
44552: PUSH
44553: LD_INT 5
44555: PUSH
44556: LD_INT 21
44558: PUSH
44559: LD_INT 23
44561: PUSH
44562: LD_INT 22
44564: PUSH
44565: LD_INT 24
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: ST_TO_ADDR
44583: GO 44644
44585: LD_INT 3
44587: DOUBLE
44588: EQUAL
44589: IFTRUE 44593
44591: GO 44643
44593: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44594: LD_ADDR_VAR 0 3
44598: PUSH
44599: LD_INT 13
44601: PUSH
44602: LD_INT 14
44604: PUSH
44605: LD_INT 2
44607: PUSH
44608: LD_INT 3
44610: PUSH
44611: LD_INT 4
44613: PUSH
44614: LD_INT 5
44616: PUSH
44617: LD_INT 21
44619: PUSH
44620: LD_INT 22
44622: PUSH
44623: LD_INT 23
44625: PUSH
44626: LD_INT 24
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: ST_TO_ADDR
44641: GO 44644
44643: POP
// result := ( chassis in result ) ;
44644: LD_ADDR_VAR 0 3
44648: PUSH
44649: LD_VAR 0 1
44653: PUSH
44654: LD_VAR 0 3
44658: IN
44659: ST_TO_ADDR
// end ;
44660: LD_VAR 0 3
44664: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44665: LD_INT 0
44667: PPUSH
// if not chassis or not weapon then
44668: LD_VAR 0 1
44672: NOT
44673: PUSH
44674: LD_VAR 0 2
44678: NOT
44679: OR
44680: IFFALSE 44684
// exit ;
44682: GO 45744
// case weapon of us_machine_gun :
44684: LD_VAR 0 2
44688: PUSH
44689: LD_INT 2
44691: DOUBLE
44692: EQUAL
44693: IFTRUE 44697
44695: GO 44727
44697: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44698: LD_ADDR_VAR 0 3
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 3
44711: PUSH
44712: LD_INT 4
44714: PUSH
44715: LD_INT 5
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: ST_TO_ADDR
44725: GO 45728
44727: LD_INT 3
44729: DOUBLE
44730: EQUAL
44731: IFTRUE 44735
44733: GO 44765
44735: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44736: LD_ADDR_VAR 0 3
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: LD_INT 3
44749: PUSH
44750: LD_INT 4
44752: PUSH
44753: LD_INT 5
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: ST_TO_ADDR
44763: GO 45728
44765: LD_INT 11
44767: DOUBLE
44768: EQUAL
44769: IFTRUE 44773
44771: GO 44803
44773: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44774: LD_ADDR_VAR 0 3
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: LD_INT 2
44784: PUSH
44785: LD_INT 3
44787: PUSH
44788: LD_INT 4
44790: PUSH
44791: LD_INT 5
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: ST_TO_ADDR
44801: GO 45728
44803: LD_INT 4
44805: DOUBLE
44806: EQUAL
44807: IFTRUE 44811
44809: GO 44837
44811: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44812: LD_ADDR_VAR 0 3
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: LD_INT 3
44822: PUSH
44823: LD_INT 4
44825: PUSH
44826: LD_INT 5
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: ST_TO_ADDR
44835: GO 45728
44837: LD_INT 5
44839: DOUBLE
44840: EQUAL
44841: IFTRUE 44845
44843: GO 44871
44845: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44846: LD_ADDR_VAR 0 3
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: LD_INT 3
44856: PUSH
44857: LD_INT 4
44859: PUSH
44860: LD_INT 5
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: ST_TO_ADDR
44869: GO 45728
44871: LD_INT 9
44873: DOUBLE
44874: EQUAL
44875: IFTRUE 44879
44877: GO 44905
44879: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44880: LD_ADDR_VAR 0 3
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 3
44890: PUSH
44891: LD_INT 4
44893: PUSH
44894: LD_INT 5
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: ST_TO_ADDR
44903: GO 45728
44905: LD_INT 7
44907: DOUBLE
44908: EQUAL
44909: IFTRUE 44913
44911: GO 44939
44913: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44914: LD_ADDR_VAR 0 3
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: LD_INT 3
44924: PUSH
44925: LD_INT 4
44927: PUSH
44928: LD_INT 5
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
44937: GO 45728
44939: LD_INT 12
44941: DOUBLE
44942: EQUAL
44943: IFTRUE 44947
44945: GO 44973
44947: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44948: LD_ADDR_VAR 0 3
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 3
44958: PUSH
44959: LD_INT 4
44961: PUSH
44962: LD_INT 5
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: ST_TO_ADDR
44971: GO 45728
44973: LD_INT 13
44975: DOUBLE
44976: EQUAL
44977: IFTRUE 44981
44979: GO 45007
44981: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44982: LD_ADDR_VAR 0 3
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: LD_INT 3
44992: PUSH
44993: LD_INT 4
44995: PUSH
44996: LD_INT 5
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: ST_TO_ADDR
45005: GO 45728
45007: LD_INT 14
45009: DOUBLE
45010: EQUAL
45011: IFTRUE 45015
45013: GO 45033
45015: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45016: LD_ADDR_VAR 0 3
45020: PUSH
45021: LD_INT 4
45023: PUSH
45024: LD_INT 5
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: ST_TO_ADDR
45031: GO 45728
45033: LD_INT 6
45035: DOUBLE
45036: EQUAL
45037: IFTRUE 45041
45039: GO 45059
45041: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45042: LD_ADDR_VAR 0 3
45046: PUSH
45047: LD_INT 4
45049: PUSH
45050: LD_INT 5
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: ST_TO_ADDR
45057: GO 45728
45059: LD_INT 10
45061: DOUBLE
45062: EQUAL
45063: IFTRUE 45067
45065: GO 45085
45067: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45068: LD_ADDR_VAR 0 3
45072: PUSH
45073: LD_INT 4
45075: PUSH
45076: LD_INT 5
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: ST_TO_ADDR
45083: GO 45728
45085: LD_INT 22
45087: DOUBLE
45088: EQUAL
45089: IFTRUE 45093
45091: GO 45119
45093: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45094: LD_ADDR_VAR 0 3
45098: PUSH
45099: LD_INT 11
45101: PUSH
45102: LD_INT 12
45104: PUSH
45105: LD_INT 13
45107: PUSH
45108: LD_INT 14
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: ST_TO_ADDR
45117: GO 45728
45119: LD_INT 23
45121: DOUBLE
45122: EQUAL
45123: IFTRUE 45127
45125: GO 45153
45127: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45128: LD_ADDR_VAR 0 3
45132: PUSH
45133: LD_INT 11
45135: PUSH
45136: LD_INT 12
45138: PUSH
45139: LD_INT 13
45141: PUSH
45142: LD_INT 14
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: ST_TO_ADDR
45151: GO 45728
45153: LD_INT 24
45155: DOUBLE
45156: EQUAL
45157: IFTRUE 45161
45159: GO 45187
45161: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45162: LD_ADDR_VAR 0 3
45166: PUSH
45167: LD_INT 11
45169: PUSH
45170: LD_INT 12
45172: PUSH
45173: LD_INT 13
45175: PUSH
45176: LD_INT 14
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: ST_TO_ADDR
45185: GO 45728
45187: LD_INT 30
45189: DOUBLE
45190: EQUAL
45191: IFTRUE 45195
45193: GO 45221
45195: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45196: LD_ADDR_VAR 0 3
45200: PUSH
45201: LD_INT 11
45203: PUSH
45204: LD_INT 12
45206: PUSH
45207: LD_INT 13
45209: PUSH
45210: LD_INT 14
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: ST_TO_ADDR
45219: GO 45728
45221: LD_INT 25
45223: DOUBLE
45224: EQUAL
45225: IFTRUE 45229
45227: GO 45247
45229: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45230: LD_ADDR_VAR 0 3
45234: PUSH
45235: LD_INT 13
45237: PUSH
45238: LD_INT 14
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: ST_TO_ADDR
45245: GO 45728
45247: LD_INT 27
45249: DOUBLE
45250: EQUAL
45251: IFTRUE 45255
45253: GO 45273
45255: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45256: LD_ADDR_VAR 0 3
45260: PUSH
45261: LD_INT 13
45263: PUSH
45264: LD_INT 14
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: ST_TO_ADDR
45271: GO 45728
45273: LD_INT 92
45275: DOUBLE
45276: EQUAL
45277: IFTRUE 45281
45279: GO 45307
45281: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45282: LD_ADDR_VAR 0 3
45286: PUSH
45287: LD_INT 11
45289: PUSH
45290: LD_INT 12
45292: PUSH
45293: LD_INT 13
45295: PUSH
45296: LD_INT 14
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: ST_TO_ADDR
45305: GO 45728
45307: LD_INT 28
45309: DOUBLE
45310: EQUAL
45311: IFTRUE 45315
45313: GO 45333
45315: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45316: LD_ADDR_VAR 0 3
45320: PUSH
45321: LD_INT 13
45323: PUSH
45324: LD_INT 14
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: ST_TO_ADDR
45331: GO 45728
45333: LD_INT 29
45335: DOUBLE
45336: EQUAL
45337: IFTRUE 45341
45339: GO 45359
45341: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45342: LD_ADDR_VAR 0 3
45346: PUSH
45347: LD_INT 13
45349: PUSH
45350: LD_INT 14
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: ST_TO_ADDR
45357: GO 45728
45359: LD_INT 31
45361: DOUBLE
45362: EQUAL
45363: IFTRUE 45367
45365: GO 45385
45367: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45368: LD_ADDR_VAR 0 3
45372: PUSH
45373: LD_INT 13
45375: PUSH
45376: LD_INT 14
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: ST_TO_ADDR
45383: GO 45728
45385: LD_INT 26
45387: DOUBLE
45388: EQUAL
45389: IFTRUE 45393
45391: GO 45411
45393: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45394: LD_ADDR_VAR 0 3
45398: PUSH
45399: LD_INT 13
45401: PUSH
45402: LD_INT 14
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: ST_TO_ADDR
45409: GO 45728
45411: LD_INT 42
45413: DOUBLE
45414: EQUAL
45415: IFTRUE 45419
45417: GO 45445
45419: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45420: LD_ADDR_VAR 0 3
45424: PUSH
45425: LD_INT 21
45427: PUSH
45428: LD_INT 22
45430: PUSH
45431: LD_INT 23
45433: PUSH
45434: LD_INT 24
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: ST_TO_ADDR
45443: GO 45728
45445: LD_INT 43
45447: DOUBLE
45448: EQUAL
45449: IFTRUE 45453
45451: GO 45479
45453: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45454: LD_ADDR_VAR 0 3
45458: PUSH
45459: LD_INT 21
45461: PUSH
45462: LD_INT 22
45464: PUSH
45465: LD_INT 23
45467: PUSH
45468: LD_INT 24
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: ST_TO_ADDR
45477: GO 45728
45479: LD_INT 44
45481: DOUBLE
45482: EQUAL
45483: IFTRUE 45487
45485: GO 45513
45487: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45488: LD_ADDR_VAR 0 3
45492: PUSH
45493: LD_INT 21
45495: PUSH
45496: LD_INT 22
45498: PUSH
45499: LD_INT 23
45501: PUSH
45502: LD_INT 24
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: ST_TO_ADDR
45511: GO 45728
45513: LD_INT 45
45515: DOUBLE
45516: EQUAL
45517: IFTRUE 45521
45519: GO 45547
45521: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45522: LD_ADDR_VAR 0 3
45526: PUSH
45527: LD_INT 21
45529: PUSH
45530: LD_INT 22
45532: PUSH
45533: LD_INT 23
45535: PUSH
45536: LD_INT 24
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: ST_TO_ADDR
45545: GO 45728
45547: LD_INT 49
45549: DOUBLE
45550: EQUAL
45551: IFTRUE 45555
45553: GO 45581
45555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45556: LD_ADDR_VAR 0 3
45560: PUSH
45561: LD_INT 21
45563: PUSH
45564: LD_INT 22
45566: PUSH
45567: LD_INT 23
45569: PUSH
45570: LD_INT 24
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: ST_TO_ADDR
45579: GO 45728
45581: LD_INT 51
45583: DOUBLE
45584: EQUAL
45585: IFTRUE 45589
45587: GO 45615
45589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45590: LD_ADDR_VAR 0 3
45594: PUSH
45595: LD_INT 21
45597: PUSH
45598: LD_INT 22
45600: PUSH
45601: LD_INT 23
45603: PUSH
45604: LD_INT 24
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: ST_TO_ADDR
45613: GO 45728
45615: LD_INT 52
45617: DOUBLE
45618: EQUAL
45619: IFTRUE 45623
45621: GO 45649
45623: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45624: LD_ADDR_VAR 0 3
45628: PUSH
45629: LD_INT 21
45631: PUSH
45632: LD_INT 22
45634: PUSH
45635: LD_INT 23
45637: PUSH
45638: LD_INT 24
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: ST_TO_ADDR
45647: GO 45728
45649: LD_INT 53
45651: DOUBLE
45652: EQUAL
45653: IFTRUE 45657
45655: GO 45675
45657: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45658: LD_ADDR_VAR 0 3
45662: PUSH
45663: LD_INT 23
45665: PUSH
45666: LD_INT 24
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: ST_TO_ADDR
45673: GO 45728
45675: LD_INT 46
45677: DOUBLE
45678: EQUAL
45679: IFTRUE 45683
45681: GO 45701
45683: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45684: LD_ADDR_VAR 0 3
45688: PUSH
45689: LD_INT 23
45691: PUSH
45692: LD_INT 24
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: ST_TO_ADDR
45699: GO 45728
45701: LD_INT 47
45703: DOUBLE
45704: EQUAL
45705: IFTRUE 45709
45707: GO 45727
45709: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45710: LD_ADDR_VAR 0 3
45714: PUSH
45715: LD_INT 23
45717: PUSH
45718: LD_INT 24
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: ST_TO_ADDR
45725: GO 45728
45727: POP
// result := ( chassis in result ) ;
45728: LD_ADDR_VAR 0 3
45732: PUSH
45733: LD_VAR 0 1
45737: PUSH
45738: LD_VAR 0 3
45742: IN
45743: ST_TO_ADDR
// end ;
45744: LD_VAR 0 3
45748: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45749: LD_INT 0
45751: PPUSH
45752: PPUSH
45753: PPUSH
45754: PPUSH
45755: PPUSH
45756: PPUSH
45757: PPUSH
// result := array ;
45758: LD_ADDR_VAR 0 5
45762: PUSH
45763: LD_VAR 0 1
45767: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45768: LD_VAR 0 1
45772: NOT
45773: PUSH
45774: LD_VAR 0 2
45778: NOT
45779: OR
45780: PUSH
45781: LD_VAR 0 3
45785: NOT
45786: OR
45787: PUSH
45788: LD_VAR 0 2
45792: PUSH
45793: LD_VAR 0 1
45797: GREATER
45798: OR
45799: PUSH
45800: LD_VAR 0 3
45804: PUSH
45805: LD_VAR 0 1
45809: GREATER
45810: OR
45811: IFFALSE 45815
// exit ;
45813: GO 46111
// if direction then
45815: LD_VAR 0 4
45819: IFFALSE 45883
// begin d := 1 ;
45821: LD_ADDR_VAR 0 9
45825: PUSH
45826: LD_INT 1
45828: ST_TO_ADDR
// if i_from > i_to then
45829: LD_VAR 0 2
45833: PUSH
45834: LD_VAR 0 3
45838: GREATER
45839: IFFALSE 45865
// length := ( array - i_from ) + i_to else
45841: LD_ADDR_VAR 0 11
45845: PUSH
45846: LD_VAR 0 1
45850: PUSH
45851: LD_VAR 0 2
45855: MINUS
45856: PUSH
45857: LD_VAR 0 3
45861: PLUS
45862: ST_TO_ADDR
45863: GO 45881
// length := i_to - i_from ;
45865: LD_ADDR_VAR 0 11
45869: PUSH
45870: LD_VAR 0 3
45874: PUSH
45875: LD_VAR 0 2
45879: MINUS
45880: ST_TO_ADDR
// end else
45881: GO 45944
// begin d := - 1 ;
45883: LD_ADDR_VAR 0 9
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: ST_TO_ADDR
// if i_from > i_to then
45892: LD_VAR 0 2
45896: PUSH
45897: LD_VAR 0 3
45901: GREATER
45902: IFFALSE 45922
// length := i_from - i_to else
45904: LD_ADDR_VAR 0 11
45908: PUSH
45909: LD_VAR 0 2
45913: PUSH
45914: LD_VAR 0 3
45918: MINUS
45919: ST_TO_ADDR
45920: GO 45944
// length := ( array - i_to ) + i_from ;
45922: LD_ADDR_VAR 0 11
45926: PUSH
45927: LD_VAR 0 1
45931: PUSH
45932: LD_VAR 0 3
45936: MINUS
45937: PUSH
45938: LD_VAR 0 2
45942: PLUS
45943: ST_TO_ADDR
// end ; if not length then
45944: LD_VAR 0 11
45948: NOT
45949: IFFALSE 45953
// exit ;
45951: GO 46111
// tmp := array ;
45953: LD_ADDR_VAR 0 10
45957: PUSH
45958: LD_VAR 0 1
45962: ST_TO_ADDR
// for i = 1 to length do
45963: LD_ADDR_VAR 0 6
45967: PUSH
45968: DOUBLE
45969: LD_INT 1
45971: DEC
45972: ST_TO_ADDR
45973: LD_VAR 0 11
45977: PUSH
45978: FOR_TO
45979: IFFALSE 46099
// begin for j = 1 to array do
45981: LD_ADDR_VAR 0 7
45985: PUSH
45986: DOUBLE
45987: LD_INT 1
45989: DEC
45990: ST_TO_ADDR
45991: LD_VAR 0 1
45995: PUSH
45996: FOR_TO
45997: IFFALSE 46085
// begin k := j + d ;
45999: LD_ADDR_VAR 0 8
46003: PUSH
46004: LD_VAR 0 7
46008: PUSH
46009: LD_VAR 0 9
46013: PLUS
46014: ST_TO_ADDR
// if k > array then
46015: LD_VAR 0 8
46019: PUSH
46020: LD_VAR 0 1
46024: GREATER
46025: IFFALSE 46035
// k := 1 ;
46027: LD_ADDR_VAR 0 8
46031: PUSH
46032: LD_INT 1
46034: ST_TO_ADDR
// if not k then
46035: LD_VAR 0 8
46039: NOT
46040: IFFALSE 46052
// k := array ;
46042: LD_ADDR_VAR 0 8
46046: PUSH
46047: LD_VAR 0 1
46051: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46052: LD_ADDR_VAR 0 10
46056: PUSH
46057: LD_VAR 0 10
46061: PPUSH
46062: LD_VAR 0 8
46066: PPUSH
46067: LD_VAR 0 1
46071: PUSH
46072: LD_VAR 0 7
46076: ARRAY
46077: PPUSH
46078: CALL_OW 1
46082: ST_TO_ADDR
// end ;
46083: GO 45996
46085: POP
46086: POP
// array := tmp ;
46087: LD_ADDR_VAR 0 1
46091: PUSH
46092: LD_VAR 0 10
46096: ST_TO_ADDR
// end ;
46097: GO 45978
46099: POP
46100: POP
// result := array ;
46101: LD_ADDR_VAR 0 5
46105: PUSH
46106: LD_VAR 0 1
46110: ST_TO_ADDR
// end ;
46111: LD_VAR 0 5
46115: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46116: LD_INT 0
46118: PPUSH
46119: PPUSH
// result := 0 ;
46120: LD_ADDR_VAR 0 3
46124: PUSH
46125: LD_INT 0
46127: ST_TO_ADDR
// if not array or not value in array then
46128: LD_VAR 0 1
46132: NOT
46133: PUSH
46134: LD_VAR 0 2
46138: PUSH
46139: LD_VAR 0 1
46143: IN
46144: NOT
46145: OR
46146: IFFALSE 46150
// exit ;
46148: GO 46204
// for i = 1 to array do
46150: LD_ADDR_VAR 0 4
46154: PUSH
46155: DOUBLE
46156: LD_INT 1
46158: DEC
46159: ST_TO_ADDR
46160: LD_VAR 0 1
46164: PUSH
46165: FOR_TO
46166: IFFALSE 46202
// if value = array [ i ] then
46168: LD_VAR 0 2
46172: PUSH
46173: LD_VAR 0 1
46177: PUSH
46178: LD_VAR 0 4
46182: ARRAY
46183: EQUAL
46184: IFFALSE 46200
// begin result := i ;
46186: LD_ADDR_VAR 0 3
46190: PUSH
46191: LD_VAR 0 4
46195: ST_TO_ADDR
// exit ;
46196: POP
46197: POP
46198: GO 46204
// end ;
46200: GO 46165
46202: POP
46203: POP
// end ;
46204: LD_VAR 0 3
46208: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46209: LD_INT 0
46211: PPUSH
// vc_chassis := chassis ;
46212: LD_ADDR_OWVAR 37
46216: PUSH
46217: LD_VAR 0 1
46221: ST_TO_ADDR
// vc_engine := engine ;
46222: LD_ADDR_OWVAR 39
46226: PUSH
46227: LD_VAR 0 2
46231: ST_TO_ADDR
// vc_control := control ;
46232: LD_ADDR_OWVAR 38
46236: PUSH
46237: LD_VAR 0 3
46241: ST_TO_ADDR
// vc_weapon := weapon ;
46242: LD_ADDR_OWVAR 40
46246: PUSH
46247: LD_VAR 0 4
46251: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46252: LD_ADDR_OWVAR 41
46256: PUSH
46257: LD_VAR 0 5
46261: ST_TO_ADDR
// end ;
46262: LD_VAR 0 6
46266: RET
// export function WantPlant ( unit ) ; var task ; begin
46267: LD_INT 0
46269: PPUSH
46270: PPUSH
// result := false ;
46271: LD_ADDR_VAR 0 2
46275: PUSH
46276: LD_INT 0
46278: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46279: LD_ADDR_VAR 0 3
46283: PUSH
46284: LD_VAR 0 1
46288: PPUSH
46289: CALL_OW 437
46293: ST_TO_ADDR
// if task then
46294: LD_VAR 0 3
46298: IFFALSE 46326
// if task [ 1 ] [ 1 ] = p then
46300: LD_VAR 0 3
46304: PUSH
46305: LD_INT 1
46307: ARRAY
46308: PUSH
46309: LD_INT 1
46311: ARRAY
46312: PUSH
46313: LD_STRING p
46315: EQUAL
46316: IFFALSE 46326
// result := true ;
46318: LD_ADDR_VAR 0 2
46322: PUSH
46323: LD_INT 1
46325: ST_TO_ADDR
// end ;
46326: LD_VAR 0 2
46330: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46331: LD_INT 0
46333: PPUSH
46334: PPUSH
46335: PPUSH
46336: PPUSH
// if pos < 1 then
46337: LD_VAR 0 2
46341: PUSH
46342: LD_INT 1
46344: LESS
46345: IFFALSE 46349
// exit ;
46347: GO 46652
// if pos = 1 then
46349: LD_VAR 0 2
46353: PUSH
46354: LD_INT 1
46356: EQUAL
46357: IFFALSE 46390
// result := Replace ( arr , pos [ 1 ] , value ) else
46359: LD_ADDR_VAR 0 4
46363: PUSH
46364: LD_VAR 0 1
46368: PPUSH
46369: LD_VAR 0 2
46373: PUSH
46374: LD_INT 1
46376: ARRAY
46377: PPUSH
46378: LD_VAR 0 3
46382: PPUSH
46383: CALL_OW 1
46387: ST_TO_ADDR
46388: GO 46652
// begin tmp := arr ;
46390: LD_ADDR_VAR 0 6
46394: PUSH
46395: LD_VAR 0 1
46399: ST_TO_ADDR
// s_arr := [ tmp ] ;
46400: LD_ADDR_VAR 0 7
46404: PUSH
46405: LD_VAR 0 6
46409: PUSH
46410: EMPTY
46411: LIST
46412: ST_TO_ADDR
// for i = 1 to pos - 1 do
46413: LD_ADDR_VAR 0 5
46417: PUSH
46418: DOUBLE
46419: LD_INT 1
46421: DEC
46422: ST_TO_ADDR
46423: LD_VAR 0 2
46427: PUSH
46428: LD_INT 1
46430: MINUS
46431: PUSH
46432: FOR_TO
46433: IFFALSE 46478
// begin tmp := tmp [ pos [ i ] ] ;
46435: LD_ADDR_VAR 0 6
46439: PUSH
46440: LD_VAR 0 6
46444: PUSH
46445: LD_VAR 0 2
46449: PUSH
46450: LD_VAR 0 5
46454: ARRAY
46455: ARRAY
46456: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46457: LD_ADDR_VAR 0 7
46461: PUSH
46462: LD_VAR 0 7
46466: PUSH
46467: LD_VAR 0 6
46471: PUSH
46472: EMPTY
46473: LIST
46474: ADD
46475: ST_TO_ADDR
// end ;
46476: GO 46432
46478: POP
46479: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46480: LD_ADDR_VAR 0 6
46484: PUSH
46485: LD_VAR 0 6
46489: PPUSH
46490: LD_VAR 0 2
46494: PUSH
46495: LD_VAR 0 2
46499: ARRAY
46500: PPUSH
46501: LD_VAR 0 3
46505: PPUSH
46506: CALL_OW 1
46510: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46511: LD_ADDR_VAR 0 7
46515: PUSH
46516: LD_VAR 0 7
46520: PPUSH
46521: LD_VAR 0 7
46525: PPUSH
46526: LD_VAR 0 6
46530: PPUSH
46531: CALL_OW 1
46535: ST_TO_ADDR
// for i = s_arr downto 2 do
46536: LD_ADDR_VAR 0 5
46540: PUSH
46541: DOUBLE
46542: LD_VAR 0 7
46546: INC
46547: ST_TO_ADDR
46548: LD_INT 2
46550: PUSH
46551: FOR_DOWNTO
46552: IFFALSE 46636
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46554: LD_ADDR_VAR 0 6
46558: PUSH
46559: LD_VAR 0 7
46563: PUSH
46564: LD_VAR 0 5
46568: PUSH
46569: LD_INT 1
46571: MINUS
46572: ARRAY
46573: PPUSH
46574: LD_VAR 0 2
46578: PUSH
46579: LD_VAR 0 5
46583: PUSH
46584: LD_INT 1
46586: MINUS
46587: ARRAY
46588: PPUSH
46589: LD_VAR 0 7
46593: PUSH
46594: LD_VAR 0 5
46598: ARRAY
46599: PPUSH
46600: CALL_OW 1
46604: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46605: LD_ADDR_VAR 0 7
46609: PUSH
46610: LD_VAR 0 7
46614: PPUSH
46615: LD_VAR 0 5
46619: PUSH
46620: LD_INT 1
46622: MINUS
46623: PPUSH
46624: LD_VAR 0 6
46628: PPUSH
46629: CALL_OW 1
46633: ST_TO_ADDR
// end ;
46634: GO 46551
46636: POP
46637: POP
// result := s_arr [ 1 ] ;
46638: LD_ADDR_VAR 0 4
46642: PUSH
46643: LD_VAR 0 7
46647: PUSH
46648: LD_INT 1
46650: ARRAY
46651: ST_TO_ADDR
// end ; end ;
46652: LD_VAR 0 4
46656: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46657: LD_INT 0
46659: PPUSH
46660: PPUSH
// if not list then
46661: LD_VAR 0 1
46665: NOT
46666: IFFALSE 46670
// exit ;
46668: GO 46761
// i := list [ pos1 ] ;
46670: LD_ADDR_VAR 0 5
46674: PUSH
46675: LD_VAR 0 1
46679: PUSH
46680: LD_VAR 0 2
46684: ARRAY
46685: ST_TO_ADDR
// if not i then
46686: LD_VAR 0 5
46690: NOT
46691: IFFALSE 46695
// exit ;
46693: GO 46761
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46695: LD_ADDR_VAR 0 1
46699: PUSH
46700: LD_VAR 0 1
46704: PPUSH
46705: LD_VAR 0 2
46709: PPUSH
46710: LD_VAR 0 1
46714: PUSH
46715: LD_VAR 0 3
46719: ARRAY
46720: PPUSH
46721: CALL_OW 1
46725: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46726: LD_ADDR_VAR 0 1
46730: PUSH
46731: LD_VAR 0 1
46735: PPUSH
46736: LD_VAR 0 3
46740: PPUSH
46741: LD_VAR 0 5
46745: PPUSH
46746: CALL_OW 1
46750: ST_TO_ADDR
// result := list ;
46751: LD_ADDR_VAR 0 4
46755: PUSH
46756: LD_VAR 0 1
46760: ST_TO_ADDR
// end ;
46761: LD_VAR 0 4
46765: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46766: LD_INT 0
46768: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46769: LD_ADDR_VAR 0 5
46773: PUSH
46774: LD_VAR 0 1
46778: PPUSH
46779: CALL_OW 250
46783: PPUSH
46784: LD_VAR 0 1
46788: PPUSH
46789: CALL_OW 251
46793: PPUSH
46794: LD_VAR 0 2
46798: PPUSH
46799: LD_VAR 0 3
46803: PPUSH
46804: LD_VAR 0 4
46808: PPUSH
46809: CALL 47187 0 5
46813: ST_TO_ADDR
// end ;
46814: LD_VAR 0 5
46818: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46819: LD_INT 0
46821: PPUSH
46822: PPUSH
46823: PPUSH
46824: PPUSH
// if not list or not unit then
46825: LD_VAR 0 2
46829: NOT
46830: PUSH
46831: LD_VAR 0 1
46835: NOT
46836: OR
46837: IFFALSE 46841
// exit ;
46839: GO 47182
// result := [ ] ;
46841: LD_ADDR_VAR 0 5
46845: PUSH
46846: EMPTY
46847: ST_TO_ADDR
// for i in list do
46848: LD_ADDR_VAR 0 6
46852: PUSH
46853: LD_VAR 0 2
46857: PUSH
46858: FOR_IN
46859: IFFALSE 47077
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46861: LD_ADDR_VAR 0 8
46865: PUSH
46866: LD_VAR 0 1
46870: PPUSH
46871: LD_VAR 0 6
46875: PUSH
46876: LD_INT 1
46878: ARRAY
46879: PPUSH
46880: LD_VAR 0 6
46884: PUSH
46885: LD_INT 2
46887: ARRAY
46888: PPUSH
46889: CALL_OW 297
46893: ST_TO_ADDR
// if not Count ( result ) then
46894: LD_VAR 0 5
46898: PPUSH
46899: CALL 43471 0 1
46903: NOT
46904: IFFALSE 46937
// begin result := Join ( result , [ i , tmp ] ) ;
46906: LD_ADDR_VAR 0 5
46910: PUSH
46911: LD_VAR 0 5
46915: PPUSH
46916: LD_VAR 0 6
46920: PUSH
46921: LD_VAR 0 8
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PPUSH
46930: CALL 79080 0 2
46934: ST_TO_ADDR
// continue ;
46935: GO 46858
// end ; if result [ result ] [ 2 ] <= tmp then
46937: LD_VAR 0 5
46941: PUSH
46942: LD_VAR 0 5
46946: ARRAY
46947: PUSH
46948: LD_INT 2
46950: ARRAY
46951: PUSH
46952: LD_VAR 0 8
46956: LESSEQUAL
46957: IFFALSE 46990
// result := Join ( result , [ i , tmp ] ) else
46959: LD_ADDR_VAR 0 5
46963: PUSH
46964: LD_VAR 0 5
46968: PPUSH
46969: LD_VAR 0 6
46973: PUSH
46974: LD_VAR 0 8
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PPUSH
46983: CALL 79080 0 2
46987: ST_TO_ADDR
46988: GO 47075
// begin for j := 1 to Count ( result ) do
46990: LD_ADDR_VAR 0 7
46994: PUSH
46995: DOUBLE
46996: LD_INT 1
46998: DEC
46999: ST_TO_ADDR
47000: LD_VAR 0 5
47004: PPUSH
47005: CALL 43471 0 1
47009: PUSH
47010: FOR_TO
47011: IFFALSE 47073
// begin if tmp < result [ j ] [ 2 ] then
47013: LD_VAR 0 8
47017: PUSH
47018: LD_VAR 0 5
47022: PUSH
47023: LD_VAR 0 7
47027: ARRAY
47028: PUSH
47029: LD_INT 2
47031: ARRAY
47032: LESS
47033: IFFALSE 47071
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47035: LD_ADDR_VAR 0 5
47039: PUSH
47040: LD_VAR 0 5
47044: PPUSH
47045: LD_VAR 0 7
47049: PPUSH
47050: LD_VAR 0 6
47054: PUSH
47055: LD_VAR 0 8
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PPUSH
47064: CALL_OW 2
47068: ST_TO_ADDR
// break ;
47069: GO 47073
// end ; end ;
47071: GO 47010
47073: POP
47074: POP
// end ; end ;
47075: GO 46858
47077: POP
47078: POP
// if result and not asc then
47079: LD_VAR 0 5
47083: PUSH
47084: LD_VAR 0 3
47088: NOT
47089: AND
47090: IFFALSE 47107
// result := ReverseArray ( result ) ;
47092: LD_ADDR_VAR 0 5
47096: PUSH
47097: LD_VAR 0 5
47101: PPUSH
47102: CALL 74347 0 1
47106: ST_TO_ADDR
// tmp := [ ] ;
47107: LD_ADDR_VAR 0 8
47111: PUSH
47112: EMPTY
47113: ST_TO_ADDR
// if mode then
47114: LD_VAR 0 4
47118: IFFALSE 47182
// begin for i := 1 to result do
47120: LD_ADDR_VAR 0 6
47124: PUSH
47125: DOUBLE
47126: LD_INT 1
47128: DEC
47129: ST_TO_ADDR
47130: LD_VAR 0 5
47134: PUSH
47135: FOR_TO
47136: IFFALSE 47170
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47138: LD_ADDR_VAR 0 8
47142: PUSH
47143: LD_VAR 0 8
47147: PPUSH
47148: LD_VAR 0 5
47152: PUSH
47153: LD_VAR 0 6
47157: ARRAY
47158: PUSH
47159: LD_INT 1
47161: ARRAY
47162: PPUSH
47163: CALL 79080 0 2
47167: ST_TO_ADDR
47168: GO 47135
47170: POP
47171: POP
// result := tmp ;
47172: LD_ADDR_VAR 0 5
47176: PUSH
47177: LD_VAR 0 8
47181: ST_TO_ADDR
// end ; end ;
47182: LD_VAR 0 5
47186: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47187: LD_INT 0
47189: PPUSH
47190: PPUSH
47191: PPUSH
47192: PPUSH
// if not list then
47193: LD_VAR 0 3
47197: NOT
47198: IFFALSE 47202
// exit ;
47200: GO 47590
// result := [ ] ;
47202: LD_ADDR_VAR 0 6
47206: PUSH
47207: EMPTY
47208: ST_TO_ADDR
// for i in list do
47209: LD_ADDR_VAR 0 7
47213: PUSH
47214: LD_VAR 0 3
47218: PUSH
47219: FOR_IN
47220: IFFALSE 47422
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47222: LD_ADDR_VAR 0 9
47226: PUSH
47227: LD_VAR 0 7
47231: PPUSH
47232: LD_VAR 0 1
47236: PPUSH
47237: LD_VAR 0 2
47241: PPUSH
47242: CALL_OW 297
47246: ST_TO_ADDR
// if not result then
47247: LD_VAR 0 6
47251: NOT
47252: IFFALSE 47278
// result := [ [ i , tmp ] ] else
47254: LD_ADDR_VAR 0 6
47258: PUSH
47259: LD_VAR 0 7
47263: PUSH
47264: LD_VAR 0 9
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: EMPTY
47274: LIST
47275: ST_TO_ADDR
47276: GO 47420
// begin if result [ result ] [ 2 ] <= tmp then
47278: LD_VAR 0 6
47282: PUSH
47283: LD_VAR 0 6
47287: ARRAY
47288: PUSH
47289: LD_INT 2
47291: ARRAY
47292: PUSH
47293: LD_VAR 0 9
47297: LESSEQUAL
47298: IFFALSE 47340
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47300: LD_ADDR_VAR 0 6
47304: PUSH
47305: LD_VAR 0 6
47309: PPUSH
47310: LD_VAR 0 6
47314: PUSH
47315: LD_INT 1
47317: PLUS
47318: PPUSH
47319: LD_VAR 0 7
47323: PUSH
47324: LD_VAR 0 9
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PPUSH
47333: CALL_OW 2
47337: ST_TO_ADDR
47338: GO 47420
// for j := 1 to result do
47340: LD_ADDR_VAR 0 8
47344: PUSH
47345: DOUBLE
47346: LD_INT 1
47348: DEC
47349: ST_TO_ADDR
47350: LD_VAR 0 6
47354: PUSH
47355: FOR_TO
47356: IFFALSE 47418
// begin if tmp < result [ j ] [ 2 ] then
47358: LD_VAR 0 9
47362: PUSH
47363: LD_VAR 0 6
47367: PUSH
47368: LD_VAR 0 8
47372: ARRAY
47373: PUSH
47374: LD_INT 2
47376: ARRAY
47377: LESS
47378: IFFALSE 47416
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47380: LD_ADDR_VAR 0 6
47384: PUSH
47385: LD_VAR 0 6
47389: PPUSH
47390: LD_VAR 0 8
47394: PPUSH
47395: LD_VAR 0 7
47399: PUSH
47400: LD_VAR 0 9
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PPUSH
47409: CALL_OW 2
47413: ST_TO_ADDR
// break ;
47414: GO 47418
// end ; end ;
47416: GO 47355
47418: POP
47419: POP
// end ; end ;
47420: GO 47219
47422: POP
47423: POP
// if result and not asc then
47424: LD_VAR 0 6
47428: PUSH
47429: LD_VAR 0 4
47433: NOT
47434: AND
47435: IFFALSE 47510
// begin tmp := result ;
47437: LD_ADDR_VAR 0 9
47441: PUSH
47442: LD_VAR 0 6
47446: ST_TO_ADDR
// for i = tmp downto 1 do
47447: LD_ADDR_VAR 0 7
47451: PUSH
47452: DOUBLE
47453: LD_VAR 0 9
47457: INC
47458: ST_TO_ADDR
47459: LD_INT 1
47461: PUSH
47462: FOR_DOWNTO
47463: IFFALSE 47508
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47465: LD_ADDR_VAR 0 6
47469: PUSH
47470: LD_VAR 0 6
47474: PPUSH
47475: LD_VAR 0 9
47479: PUSH
47480: LD_VAR 0 7
47484: MINUS
47485: PUSH
47486: LD_INT 1
47488: PLUS
47489: PPUSH
47490: LD_VAR 0 9
47494: PUSH
47495: LD_VAR 0 7
47499: ARRAY
47500: PPUSH
47501: CALL_OW 1
47505: ST_TO_ADDR
47506: GO 47462
47508: POP
47509: POP
// end ; tmp := [ ] ;
47510: LD_ADDR_VAR 0 9
47514: PUSH
47515: EMPTY
47516: ST_TO_ADDR
// if mode then
47517: LD_VAR 0 5
47521: IFFALSE 47590
// begin for i = 1 to result do
47523: LD_ADDR_VAR 0 7
47527: PUSH
47528: DOUBLE
47529: LD_INT 1
47531: DEC
47532: ST_TO_ADDR
47533: LD_VAR 0 6
47537: PUSH
47538: FOR_TO
47539: IFFALSE 47578
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47541: LD_ADDR_VAR 0 9
47545: PUSH
47546: LD_VAR 0 9
47550: PPUSH
47551: LD_VAR 0 7
47555: PPUSH
47556: LD_VAR 0 6
47560: PUSH
47561: LD_VAR 0 7
47565: ARRAY
47566: PUSH
47567: LD_INT 1
47569: ARRAY
47570: PPUSH
47571: CALL_OW 1
47575: ST_TO_ADDR
47576: GO 47538
47578: POP
47579: POP
// result := tmp ;
47580: LD_ADDR_VAR 0 6
47584: PUSH
47585: LD_VAR 0 9
47589: ST_TO_ADDR
// end ; end ;
47590: LD_VAR 0 6
47594: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47595: LD_INT 0
47597: PPUSH
47598: PPUSH
47599: PPUSH
47600: PPUSH
47601: PPUSH
47602: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47603: LD_ADDR_VAR 0 5
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: EMPTY
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: ST_TO_ADDR
// if not x or not y then
47625: LD_VAR 0 2
47629: NOT
47630: PUSH
47631: LD_VAR 0 3
47635: NOT
47636: OR
47637: IFFALSE 47641
// exit ;
47639: GO 49291
// if not range then
47641: LD_VAR 0 4
47645: NOT
47646: IFFALSE 47656
// range := 10 ;
47648: LD_ADDR_VAR 0 4
47652: PUSH
47653: LD_INT 10
47655: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47656: LD_ADDR_VAR 0 8
47660: PUSH
47661: LD_INT 81
47663: PUSH
47664: LD_VAR 0 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 92
47675: PUSH
47676: LD_VAR 0 2
47680: PUSH
47681: LD_VAR 0 3
47685: PUSH
47686: LD_VAR 0 4
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: LD_INT 21
47702: PUSH
47703: LD_INT 3
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: PPUSH
47719: CALL_OW 69
47723: ST_TO_ADDR
// if not tmp then
47724: LD_VAR 0 8
47728: NOT
47729: IFFALSE 47733
// exit ;
47731: GO 49291
// for i in tmp do
47733: LD_ADDR_VAR 0 6
47737: PUSH
47738: LD_VAR 0 8
47742: PUSH
47743: FOR_IN
47744: IFFALSE 49266
// begin points := [ 0 , 0 , 0 ] ;
47746: LD_ADDR_VAR 0 9
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: LIST
47764: ST_TO_ADDR
// bpoints := 1 ;
47765: LD_ADDR_VAR 0 10
47769: PUSH
47770: LD_INT 1
47772: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47773: LD_VAR 0 6
47777: PPUSH
47778: CALL_OW 247
47782: PUSH
47783: LD_INT 1
47785: DOUBLE
47786: EQUAL
47787: IFTRUE 47791
47789: GO 48369
47791: POP
// begin if GetClass ( i ) = 1 then
47792: LD_VAR 0 6
47796: PPUSH
47797: CALL_OW 257
47801: PUSH
47802: LD_INT 1
47804: EQUAL
47805: IFFALSE 47826
// points := [ 10 , 5 , 3 ] ;
47807: LD_ADDR_VAR 0 9
47811: PUSH
47812: LD_INT 10
47814: PUSH
47815: LD_INT 5
47817: PUSH
47818: LD_INT 3
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: LIST
47825: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47826: LD_VAR 0 6
47830: PPUSH
47831: CALL_OW 257
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: LD_INT 4
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: LIST
47849: IN
47850: IFFALSE 47871
// points := [ 3 , 2 , 1 ] ;
47852: LD_ADDR_VAR 0 9
47856: PUSH
47857: LD_INT 3
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47871: LD_VAR 0 6
47875: PPUSH
47876: CALL_OW 257
47880: PUSH
47881: LD_INT 5
47883: EQUAL
47884: IFFALSE 47905
// points := [ 130 , 5 , 2 ] ;
47886: LD_ADDR_VAR 0 9
47890: PUSH
47891: LD_INT 130
47893: PUSH
47894: LD_INT 5
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47905: LD_VAR 0 6
47909: PPUSH
47910: CALL_OW 257
47914: PUSH
47915: LD_INT 8
47917: EQUAL
47918: IFFALSE 47939
// points := [ 35 , 35 , 30 ] ;
47920: LD_ADDR_VAR 0 9
47924: PUSH
47925: LD_INT 35
47927: PUSH
47928: LD_INT 35
47930: PUSH
47931: LD_INT 30
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: LIST
47938: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47939: LD_VAR 0 6
47943: PPUSH
47944: CALL_OW 257
47948: PUSH
47949: LD_INT 9
47951: EQUAL
47952: IFFALSE 47973
// points := [ 20 , 55 , 40 ] ;
47954: LD_ADDR_VAR 0 9
47958: PUSH
47959: LD_INT 20
47961: PUSH
47962: LD_INT 55
47964: PUSH
47965: LD_INT 40
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47973: LD_VAR 0 6
47977: PPUSH
47978: CALL_OW 257
47982: PUSH
47983: LD_INT 12
47985: PUSH
47986: LD_INT 16
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: IN
47993: IFFALSE 48014
// points := [ 5 , 3 , 2 ] ;
47995: LD_ADDR_VAR 0 9
47999: PUSH
48000: LD_INT 5
48002: PUSH
48003: LD_INT 3
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: LIST
48013: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48014: LD_VAR 0 6
48018: PPUSH
48019: CALL_OW 257
48023: PUSH
48024: LD_INT 17
48026: EQUAL
48027: IFFALSE 48048
// points := [ 100 , 50 , 75 ] ;
48029: LD_ADDR_VAR 0 9
48033: PUSH
48034: LD_INT 100
48036: PUSH
48037: LD_INT 50
48039: PUSH
48040: LD_INT 75
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: LIST
48047: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48048: LD_VAR 0 6
48052: PPUSH
48053: CALL_OW 257
48057: PUSH
48058: LD_INT 15
48060: EQUAL
48061: IFFALSE 48082
// points := [ 10 , 5 , 3 ] ;
48063: LD_ADDR_VAR 0 9
48067: PUSH
48068: LD_INT 10
48070: PUSH
48071: LD_INT 5
48073: PUSH
48074: LD_INT 3
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: LIST
48081: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48082: LD_VAR 0 6
48086: PPUSH
48087: CALL_OW 257
48091: PUSH
48092: LD_INT 14
48094: EQUAL
48095: IFFALSE 48116
// points := [ 10 , 0 , 0 ] ;
48097: LD_ADDR_VAR 0 9
48101: PUSH
48102: LD_INT 10
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: LIST
48115: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48116: LD_VAR 0 6
48120: PPUSH
48121: CALL_OW 257
48125: PUSH
48126: LD_INT 11
48128: EQUAL
48129: IFFALSE 48150
// points := [ 30 , 10 , 5 ] ;
48131: LD_ADDR_VAR 0 9
48135: PUSH
48136: LD_INT 30
48138: PUSH
48139: LD_INT 10
48141: PUSH
48142: LD_INT 5
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: LIST
48149: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48150: LD_VAR 0 1
48154: PPUSH
48155: LD_INT 5
48157: PPUSH
48158: CALL_OW 321
48162: PUSH
48163: LD_INT 2
48165: EQUAL
48166: IFFALSE 48183
// bpoints := bpoints * 1.8 ;
48168: LD_ADDR_VAR 0 10
48172: PUSH
48173: LD_VAR 0 10
48177: PUSH
48178: LD_REAL  1.80000000000000E+0000
48181: MUL
48182: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48183: LD_VAR 0 6
48187: PPUSH
48188: CALL_OW 257
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: LD_INT 2
48198: PUSH
48199: LD_INT 3
48201: PUSH
48202: LD_INT 4
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: IN
48211: PUSH
48212: LD_VAR 0 1
48216: PPUSH
48217: LD_INT 51
48219: PPUSH
48220: CALL_OW 321
48224: PUSH
48225: LD_INT 2
48227: EQUAL
48228: AND
48229: IFFALSE 48246
// bpoints := bpoints * 1.2 ;
48231: LD_ADDR_VAR 0 10
48235: PUSH
48236: LD_VAR 0 10
48240: PUSH
48241: LD_REAL  1.20000000000000E+0000
48244: MUL
48245: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48246: LD_VAR 0 6
48250: PPUSH
48251: CALL_OW 257
48255: PUSH
48256: LD_INT 5
48258: PUSH
48259: LD_INT 7
48261: PUSH
48262: LD_INT 9
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: LIST
48269: IN
48270: PUSH
48271: LD_VAR 0 1
48275: PPUSH
48276: LD_INT 52
48278: PPUSH
48279: CALL_OW 321
48283: PUSH
48284: LD_INT 2
48286: EQUAL
48287: AND
48288: IFFALSE 48305
// bpoints := bpoints * 1.5 ;
48290: LD_ADDR_VAR 0 10
48294: PUSH
48295: LD_VAR 0 10
48299: PUSH
48300: LD_REAL  1.50000000000000E+0000
48303: MUL
48304: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48305: LD_VAR 0 1
48309: PPUSH
48310: LD_INT 66
48312: PPUSH
48313: CALL_OW 321
48317: PUSH
48318: LD_INT 2
48320: EQUAL
48321: IFFALSE 48338
// bpoints := bpoints * 1.1 ;
48323: LD_ADDR_VAR 0 10
48327: PUSH
48328: LD_VAR 0 10
48332: PUSH
48333: LD_REAL  1.10000000000000E+0000
48336: MUL
48337: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48338: LD_ADDR_VAR 0 10
48342: PUSH
48343: LD_VAR 0 10
48347: PUSH
48348: LD_VAR 0 6
48352: PPUSH
48353: LD_INT 1
48355: PPUSH
48356: CALL_OW 259
48360: PUSH
48361: LD_REAL  1.15000000000000E+0000
48364: MUL
48365: MUL
48366: ST_TO_ADDR
// end ; unit_vehicle :
48367: GO 49195
48369: LD_INT 2
48371: DOUBLE
48372: EQUAL
48373: IFTRUE 48377
48375: GO 49183
48377: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48378: LD_VAR 0 6
48382: PPUSH
48383: CALL_OW 264
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 42
48393: PUSH
48394: LD_INT 24
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: LIST
48401: IN
48402: IFFALSE 48423
// points := [ 25 , 5 , 3 ] ;
48404: LD_ADDR_VAR 0 9
48408: PUSH
48409: LD_INT 25
48411: PUSH
48412: LD_INT 5
48414: PUSH
48415: LD_INT 3
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: LIST
48422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48423: LD_VAR 0 6
48427: PPUSH
48428: CALL_OW 264
48432: PUSH
48433: LD_INT 4
48435: PUSH
48436: LD_INT 43
48438: PUSH
48439: LD_INT 25
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: LIST
48446: IN
48447: IFFALSE 48468
// points := [ 40 , 15 , 5 ] ;
48449: LD_ADDR_VAR 0 9
48453: PUSH
48454: LD_INT 40
48456: PUSH
48457: LD_INT 15
48459: PUSH
48460: LD_INT 5
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48468: LD_VAR 0 6
48472: PPUSH
48473: CALL_OW 264
48477: PUSH
48478: LD_INT 3
48480: PUSH
48481: LD_INT 23
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: IN
48488: IFFALSE 48509
// points := [ 7 , 25 , 8 ] ;
48490: LD_ADDR_VAR 0 9
48494: PUSH
48495: LD_INT 7
48497: PUSH
48498: LD_INT 25
48500: PUSH
48501: LD_INT 8
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: LIST
48508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48509: LD_VAR 0 6
48513: PPUSH
48514: CALL_OW 264
48518: PUSH
48519: LD_INT 5
48521: PUSH
48522: LD_INT 27
48524: PUSH
48525: LD_INT 44
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: LIST
48532: IN
48533: IFFALSE 48554
// points := [ 14 , 50 , 16 ] ;
48535: LD_ADDR_VAR 0 9
48539: PUSH
48540: LD_INT 14
48542: PUSH
48543: LD_INT 50
48545: PUSH
48546: LD_INT 16
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: LIST
48553: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48554: LD_VAR 0 6
48558: PPUSH
48559: CALL_OW 264
48563: PUSH
48564: LD_INT 6
48566: PUSH
48567: LD_INT 46
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: IN
48574: IFFALSE 48595
// points := [ 32 , 120 , 70 ] ;
48576: LD_ADDR_VAR 0 9
48580: PUSH
48581: LD_INT 32
48583: PUSH
48584: LD_INT 120
48586: PUSH
48587: LD_INT 70
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: LIST
48594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48595: LD_VAR 0 6
48599: PPUSH
48600: CALL_OW 264
48604: PUSH
48605: LD_INT 7
48607: PUSH
48608: LD_INT 28
48610: PUSH
48611: LD_INT 45
48613: PUSH
48614: LD_INT 92
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: IN
48623: IFFALSE 48644
// points := [ 35 , 20 , 45 ] ;
48625: LD_ADDR_VAR 0 9
48629: PUSH
48630: LD_INT 35
48632: PUSH
48633: LD_INT 20
48635: PUSH
48636: LD_INT 45
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48644: LD_VAR 0 6
48648: PPUSH
48649: CALL_OW 264
48653: PUSH
48654: LD_INT 47
48656: PUSH
48657: EMPTY
48658: LIST
48659: IN
48660: IFFALSE 48681
// points := [ 67 , 45 , 75 ] ;
48662: LD_ADDR_VAR 0 9
48666: PUSH
48667: LD_INT 67
48669: PUSH
48670: LD_INT 45
48672: PUSH
48673: LD_INT 75
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: LIST
48680: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48681: LD_VAR 0 6
48685: PPUSH
48686: CALL_OW 264
48690: PUSH
48691: LD_INT 26
48693: PUSH
48694: EMPTY
48695: LIST
48696: IN
48697: IFFALSE 48718
// points := [ 120 , 30 , 80 ] ;
48699: LD_ADDR_VAR 0 9
48703: PUSH
48704: LD_INT 120
48706: PUSH
48707: LD_INT 30
48709: PUSH
48710: LD_INT 80
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: LIST
48717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48718: LD_VAR 0 6
48722: PPUSH
48723: CALL_OW 264
48727: PUSH
48728: LD_INT 22
48730: PUSH
48731: EMPTY
48732: LIST
48733: IN
48734: IFFALSE 48755
// points := [ 40 , 1 , 1 ] ;
48736: LD_ADDR_VAR 0 9
48740: PUSH
48741: LD_INT 40
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: LIST
48754: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48755: LD_VAR 0 6
48759: PPUSH
48760: CALL_OW 264
48764: PUSH
48765: LD_INT 29
48767: PUSH
48768: EMPTY
48769: LIST
48770: IN
48771: IFFALSE 48792
// points := [ 70 , 200 , 400 ] ;
48773: LD_ADDR_VAR 0 9
48777: PUSH
48778: LD_INT 70
48780: PUSH
48781: LD_INT 200
48783: PUSH
48784: LD_INT 400
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: LIST
48791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48792: LD_VAR 0 6
48796: PPUSH
48797: CALL_OW 264
48801: PUSH
48802: LD_INT 14
48804: PUSH
48805: LD_INT 53
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: IN
48812: IFFALSE 48833
// points := [ 40 , 10 , 20 ] ;
48814: LD_ADDR_VAR 0 9
48818: PUSH
48819: LD_INT 40
48821: PUSH
48822: LD_INT 10
48824: PUSH
48825: LD_INT 20
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: LIST
48832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48833: LD_VAR 0 6
48837: PPUSH
48838: CALL_OW 264
48842: PUSH
48843: LD_INT 9
48845: PUSH
48846: EMPTY
48847: LIST
48848: IN
48849: IFFALSE 48870
// points := [ 5 , 70 , 20 ] ;
48851: LD_ADDR_VAR 0 9
48855: PUSH
48856: LD_INT 5
48858: PUSH
48859: LD_INT 70
48861: PUSH
48862: LD_INT 20
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: LIST
48869: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48870: LD_VAR 0 6
48874: PPUSH
48875: CALL_OW 264
48879: PUSH
48880: LD_INT 10
48882: PUSH
48883: EMPTY
48884: LIST
48885: IN
48886: IFFALSE 48907
// points := [ 35 , 110 , 70 ] ;
48888: LD_ADDR_VAR 0 9
48892: PUSH
48893: LD_INT 35
48895: PUSH
48896: LD_INT 110
48898: PUSH
48899: LD_INT 70
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: LIST
48906: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48907: LD_VAR 0 6
48911: PPUSH
48912: CALL_OW 265
48916: PUSH
48917: LD_INT 25
48919: EQUAL
48920: IFFALSE 48941
// points := [ 80 , 65 , 100 ] ;
48922: LD_ADDR_VAR 0 9
48926: PUSH
48927: LD_INT 80
48929: PUSH
48930: LD_INT 65
48932: PUSH
48933: LD_INT 100
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: LIST
48940: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48941: LD_VAR 0 6
48945: PPUSH
48946: CALL_OW 263
48950: PUSH
48951: LD_INT 1
48953: EQUAL
48954: IFFALSE 48989
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48956: LD_ADDR_VAR 0 10
48960: PUSH
48961: LD_VAR 0 10
48965: PUSH
48966: LD_VAR 0 6
48970: PPUSH
48971: CALL_OW 311
48975: PPUSH
48976: LD_INT 3
48978: PPUSH
48979: CALL_OW 259
48983: PUSH
48984: LD_INT 4
48986: MUL
48987: MUL
48988: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48989: LD_VAR 0 6
48993: PPUSH
48994: CALL_OW 263
48998: PUSH
48999: LD_INT 2
49001: EQUAL
49002: IFFALSE 49053
// begin j := IsControledBy ( i ) ;
49004: LD_ADDR_VAR 0 7
49008: PUSH
49009: LD_VAR 0 6
49013: PPUSH
49014: CALL_OW 312
49018: ST_TO_ADDR
// if j then
49019: LD_VAR 0 7
49023: IFFALSE 49053
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49025: LD_ADDR_VAR 0 10
49029: PUSH
49030: LD_VAR 0 10
49034: PUSH
49035: LD_VAR 0 7
49039: PPUSH
49040: LD_INT 3
49042: PPUSH
49043: CALL_OW 259
49047: PUSH
49048: LD_INT 3
49050: MUL
49051: MUL
49052: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49053: LD_VAR 0 6
49057: PPUSH
49058: CALL_OW 264
49062: PUSH
49063: LD_INT 5
49065: PUSH
49066: LD_INT 6
49068: PUSH
49069: LD_INT 46
49071: PUSH
49072: LD_INT 44
49074: PUSH
49075: LD_INT 47
49077: PUSH
49078: LD_INT 45
49080: PUSH
49081: LD_INT 28
49083: PUSH
49084: LD_INT 7
49086: PUSH
49087: LD_INT 27
49089: PUSH
49090: LD_INT 29
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: IN
49105: PUSH
49106: LD_VAR 0 1
49110: PPUSH
49111: LD_INT 52
49113: PPUSH
49114: CALL_OW 321
49118: PUSH
49119: LD_INT 2
49121: EQUAL
49122: AND
49123: IFFALSE 49140
// bpoints := bpoints * 1.2 ;
49125: LD_ADDR_VAR 0 10
49129: PUSH
49130: LD_VAR 0 10
49134: PUSH
49135: LD_REAL  1.20000000000000E+0000
49138: MUL
49139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49140: LD_VAR 0 6
49144: PPUSH
49145: CALL_OW 264
49149: PUSH
49150: LD_INT 6
49152: PUSH
49153: LD_INT 46
49155: PUSH
49156: LD_INT 47
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: LIST
49163: IN
49164: IFFALSE 49181
// bpoints := bpoints * 1.2 ;
49166: LD_ADDR_VAR 0 10
49170: PUSH
49171: LD_VAR 0 10
49175: PUSH
49176: LD_REAL  1.20000000000000E+0000
49179: MUL
49180: ST_TO_ADDR
// end ; unit_building :
49181: GO 49195
49183: LD_INT 3
49185: DOUBLE
49186: EQUAL
49187: IFTRUE 49191
49189: GO 49194
49191: POP
// ; end ;
49192: GO 49195
49194: POP
// for j = 1 to 3 do
49195: LD_ADDR_VAR 0 7
49199: PUSH
49200: DOUBLE
49201: LD_INT 1
49203: DEC
49204: ST_TO_ADDR
49205: LD_INT 3
49207: PUSH
49208: FOR_TO
49209: IFFALSE 49262
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49211: LD_ADDR_VAR 0 5
49215: PUSH
49216: LD_VAR 0 5
49220: PPUSH
49221: LD_VAR 0 7
49225: PPUSH
49226: LD_VAR 0 5
49230: PUSH
49231: LD_VAR 0 7
49235: ARRAY
49236: PUSH
49237: LD_VAR 0 9
49241: PUSH
49242: LD_VAR 0 7
49246: ARRAY
49247: PUSH
49248: LD_VAR 0 10
49252: MUL
49253: PLUS
49254: PPUSH
49255: CALL_OW 1
49259: ST_TO_ADDR
49260: GO 49208
49262: POP
49263: POP
// end ;
49264: GO 47743
49266: POP
49267: POP
// result := Replace ( result , 4 , tmp ) ;
49268: LD_ADDR_VAR 0 5
49272: PUSH
49273: LD_VAR 0 5
49277: PPUSH
49278: LD_INT 4
49280: PPUSH
49281: LD_VAR 0 8
49285: PPUSH
49286: CALL_OW 1
49290: ST_TO_ADDR
// end ;
49291: LD_VAR 0 5
49295: RET
// export function DangerAtRange ( unit , range ) ; begin
49296: LD_INT 0
49298: PPUSH
// if not unit then
49299: LD_VAR 0 1
49303: NOT
49304: IFFALSE 49308
// exit ;
49306: GO 49353
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49308: LD_ADDR_VAR 0 3
49312: PUSH
49313: LD_VAR 0 1
49317: PPUSH
49318: CALL_OW 255
49322: PPUSH
49323: LD_VAR 0 1
49327: PPUSH
49328: CALL_OW 250
49332: PPUSH
49333: LD_VAR 0 1
49337: PPUSH
49338: CALL_OW 251
49342: PPUSH
49343: LD_VAR 0 2
49347: PPUSH
49348: CALL 47595 0 4
49352: ST_TO_ADDR
// end ;
49353: LD_VAR 0 3
49357: RET
// export function DangerInArea ( side , area ) ; begin
49358: LD_INT 0
49360: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49361: LD_ADDR_VAR 0 3
49365: PUSH
49366: LD_VAR 0 2
49370: PPUSH
49371: LD_INT 81
49373: PUSH
49374: LD_VAR 0 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PPUSH
49383: CALL_OW 70
49387: ST_TO_ADDR
// end ;
49388: LD_VAR 0 3
49392: RET
// export function IsExtension ( b ) ; begin
49393: LD_INT 0
49395: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49396: LD_ADDR_VAR 0 2
49400: PUSH
49401: LD_VAR 0 1
49405: PUSH
49406: LD_INT 23
49408: PUSH
49409: LD_INT 20
49411: PUSH
49412: LD_INT 22
49414: PUSH
49415: LD_INT 17
49417: PUSH
49418: LD_INT 24
49420: PUSH
49421: LD_INT 21
49423: PUSH
49424: LD_INT 19
49426: PUSH
49427: LD_INT 16
49429: PUSH
49430: LD_INT 25
49432: PUSH
49433: LD_INT 18
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: IN
49448: ST_TO_ADDR
// end ;
49449: LD_VAR 0 2
49453: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49454: LD_INT 0
49456: PPUSH
49457: PPUSH
49458: PPUSH
// result := [ ] ;
49459: LD_ADDR_VAR 0 4
49463: PUSH
49464: EMPTY
49465: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49466: LD_ADDR_VAR 0 5
49470: PUSH
49471: LD_VAR 0 2
49475: PPUSH
49476: LD_INT 21
49478: PUSH
49479: LD_INT 3
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PPUSH
49486: CALL_OW 70
49490: ST_TO_ADDR
// if not tmp then
49491: LD_VAR 0 5
49495: NOT
49496: IFFALSE 49500
// exit ;
49498: GO 49564
// if checkLink then
49500: LD_VAR 0 3
49504: IFFALSE 49554
// begin for i in tmp do
49506: LD_ADDR_VAR 0 6
49510: PUSH
49511: LD_VAR 0 5
49515: PUSH
49516: FOR_IN
49517: IFFALSE 49552
// if GetBase ( i ) <> base then
49519: LD_VAR 0 6
49523: PPUSH
49524: CALL_OW 274
49528: PUSH
49529: LD_VAR 0 1
49533: NONEQUAL
49534: IFFALSE 49550
// ComLinkToBase ( base , i ) ;
49536: LD_VAR 0 1
49540: PPUSH
49541: LD_VAR 0 6
49545: PPUSH
49546: CALL_OW 169
49550: GO 49516
49552: POP
49553: POP
// end ; result := tmp ;
49554: LD_ADDR_VAR 0 4
49558: PUSH
49559: LD_VAR 0 5
49563: ST_TO_ADDR
// end ;
49564: LD_VAR 0 4
49568: RET
// export function ComComplete ( units , b ) ; var i ; begin
49569: LD_INT 0
49571: PPUSH
49572: PPUSH
// if not units then
49573: LD_VAR 0 1
49577: NOT
49578: IFFALSE 49582
// exit ;
49580: GO 49672
// for i in units do
49582: LD_ADDR_VAR 0 4
49586: PUSH
49587: LD_VAR 0 1
49591: PUSH
49592: FOR_IN
49593: IFFALSE 49670
// if BuildingStatus ( b ) = bs_build then
49595: LD_VAR 0 2
49599: PPUSH
49600: CALL_OW 461
49604: PUSH
49605: LD_INT 1
49607: EQUAL
49608: IFFALSE 49668
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49610: LD_VAR 0 4
49614: PPUSH
49615: LD_STRING h
49617: PUSH
49618: LD_VAR 0 2
49622: PPUSH
49623: CALL_OW 250
49627: PUSH
49628: LD_VAR 0 2
49632: PPUSH
49633: CALL_OW 251
49637: PUSH
49638: LD_VAR 0 2
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: PUSH
49661: EMPTY
49662: LIST
49663: PPUSH
49664: CALL_OW 446
49668: GO 49592
49670: POP
49671: POP
// end ;
49672: LD_VAR 0 3
49676: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49677: LD_INT 0
49679: PPUSH
49680: PPUSH
49681: PPUSH
49682: PPUSH
49683: PPUSH
49684: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49685: LD_VAR 0 1
49689: NOT
49690: PUSH
49691: LD_VAR 0 1
49695: PPUSH
49696: CALL_OW 263
49700: PUSH
49701: LD_INT 2
49703: NONEQUAL
49704: OR
49705: IFFALSE 49709
// exit ;
49707: GO 50025
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49709: LD_ADDR_VAR 0 6
49713: PUSH
49714: LD_INT 22
49716: PUSH
49717: LD_VAR 0 1
49721: PPUSH
49722: CALL_OW 255
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: LD_INT 30
49736: PUSH
49737: LD_INT 36
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 34
49746: PUSH
49747: LD_INT 31
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: LIST
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PPUSH
49763: CALL_OW 69
49767: ST_TO_ADDR
// if not tmp then
49768: LD_VAR 0 6
49772: NOT
49773: IFFALSE 49777
// exit ;
49775: GO 50025
// result := [ ] ;
49777: LD_ADDR_VAR 0 2
49781: PUSH
49782: EMPTY
49783: ST_TO_ADDR
// for i in tmp do
49784: LD_ADDR_VAR 0 3
49788: PUSH
49789: LD_VAR 0 6
49793: PUSH
49794: FOR_IN
49795: IFFALSE 49866
// begin t := UnitsInside ( i ) ;
49797: LD_ADDR_VAR 0 4
49801: PUSH
49802: LD_VAR 0 3
49806: PPUSH
49807: CALL_OW 313
49811: ST_TO_ADDR
// if t then
49812: LD_VAR 0 4
49816: IFFALSE 49864
// for j in t do
49818: LD_ADDR_VAR 0 7
49822: PUSH
49823: LD_VAR 0 4
49827: PUSH
49828: FOR_IN
49829: IFFALSE 49862
// result := Replace ( result , result + 1 , j ) ;
49831: LD_ADDR_VAR 0 2
49835: PUSH
49836: LD_VAR 0 2
49840: PPUSH
49841: LD_VAR 0 2
49845: PUSH
49846: LD_INT 1
49848: PLUS
49849: PPUSH
49850: LD_VAR 0 7
49854: PPUSH
49855: CALL_OW 1
49859: ST_TO_ADDR
49860: GO 49828
49862: POP
49863: POP
// end ;
49864: GO 49794
49866: POP
49867: POP
// if not result then
49868: LD_VAR 0 2
49872: NOT
49873: IFFALSE 49877
// exit ;
49875: GO 50025
// mech := result [ 1 ] ;
49877: LD_ADDR_VAR 0 5
49881: PUSH
49882: LD_VAR 0 2
49886: PUSH
49887: LD_INT 1
49889: ARRAY
49890: ST_TO_ADDR
// if result > 1 then
49891: LD_VAR 0 2
49895: PUSH
49896: LD_INT 1
49898: GREATER
49899: IFFALSE 50011
// begin for i = 2 to result do
49901: LD_ADDR_VAR 0 3
49905: PUSH
49906: DOUBLE
49907: LD_INT 2
49909: DEC
49910: ST_TO_ADDR
49911: LD_VAR 0 2
49915: PUSH
49916: FOR_TO
49917: IFFALSE 50009
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49919: LD_ADDR_VAR 0 4
49923: PUSH
49924: LD_VAR 0 2
49928: PUSH
49929: LD_VAR 0 3
49933: ARRAY
49934: PPUSH
49935: LD_INT 3
49937: PPUSH
49938: CALL_OW 259
49942: PUSH
49943: LD_VAR 0 2
49947: PUSH
49948: LD_VAR 0 3
49952: ARRAY
49953: PPUSH
49954: CALL_OW 432
49958: MINUS
49959: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49960: LD_VAR 0 4
49964: PUSH
49965: LD_VAR 0 5
49969: PPUSH
49970: LD_INT 3
49972: PPUSH
49973: CALL_OW 259
49977: PUSH
49978: LD_VAR 0 5
49982: PPUSH
49983: CALL_OW 432
49987: MINUS
49988: GREATEREQUAL
49989: IFFALSE 50007
// mech := result [ i ] ;
49991: LD_ADDR_VAR 0 5
49995: PUSH
49996: LD_VAR 0 2
50000: PUSH
50001: LD_VAR 0 3
50005: ARRAY
50006: ST_TO_ADDR
// end ;
50007: GO 49916
50009: POP
50010: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50011: LD_VAR 0 1
50015: PPUSH
50016: LD_VAR 0 5
50020: PPUSH
50021: CALL_OW 135
// end ;
50025: LD_VAR 0 2
50029: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50030: LD_INT 0
50032: PPUSH
50033: PPUSH
50034: PPUSH
50035: PPUSH
50036: PPUSH
50037: PPUSH
50038: PPUSH
50039: PPUSH
50040: PPUSH
50041: PPUSH
50042: PPUSH
50043: PPUSH
50044: PPUSH
// result := [ ] ;
50045: LD_ADDR_VAR 0 7
50049: PUSH
50050: EMPTY
50051: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50052: LD_VAR 0 1
50056: PPUSH
50057: CALL_OW 266
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: IN
50072: NOT
50073: IFFALSE 50077
// exit ;
50075: GO 51711
// if name then
50077: LD_VAR 0 3
50081: IFFALSE 50097
// SetBName ( base_dep , name ) ;
50083: LD_VAR 0 1
50087: PPUSH
50088: LD_VAR 0 3
50092: PPUSH
50093: CALL_OW 500
// base := GetBase ( base_dep ) ;
50097: LD_ADDR_VAR 0 15
50101: PUSH
50102: LD_VAR 0 1
50106: PPUSH
50107: CALL_OW 274
50111: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50112: LD_ADDR_VAR 0 16
50116: PUSH
50117: LD_VAR 0 1
50121: PPUSH
50122: CALL_OW 255
50126: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50127: LD_ADDR_VAR 0 17
50131: PUSH
50132: LD_VAR 0 1
50136: PPUSH
50137: CALL_OW 248
50141: ST_TO_ADDR
// if sources then
50142: LD_VAR 0 5
50146: IFFALSE 50193
// for i = 1 to 3 do
50148: LD_ADDR_VAR 0 8
50152: PUSH
50153: DOUBLE
50154: LD_INT 1
50156: DEC
50157: ST_TO_ADDR
50158: LD_INT 3
50160: PUSH
50161: FOR_TO
50162: IFFALSE 50191
// AddResourceType ( base , i , sources [ i ] ) ;
50164: LD_VAR 0 15
50168: PPUSH
50169: LD_VAR 0 8
50173: PPUSH
50174: LD_VAR 0 5
50178: PUSH
50179: LD_VAR 0 8
50183: ARRAY
50184: PPUSH
50185: CALL_OW 276
50189: GO 50161
50191: POP
50192: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50193: LD_ADDR_VAR 0 18
50197: PUSH
50198: LD_VAR 0 15
50202: PPUSH
50203: LD_VAR 0 2
50207: PPUSH
50208: LD_INT 1
50210: PPUSH
50211: CALL 49454 0 3
50215: ST_TO_ADDR
// InitHc ;
50216: CALL_OW 19
// InitUc ;
50220: CALL_OW 18
// uc_side := side ;
50224: LD_ADDR_OWVAR 20
50228: PUSH
50229: LD_VAR 0 16
50233: ST_TO_ADDR
// uc_nation := nation ;
50234: LD_ADDR_OWVAR 21
50238: PUSH
50239: LD_VAR 0 17
50243: ST_TO_ADDR
// if buildings then
50244: LD_VAR 0 18
50248: IFFALSE 51570
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50250: LD_ADDR_VAR 0 19
50254: PUSH
50255: LD_VAR 0 18
50259: PPUSH
50260: LD_INT 2
50262: PUSH
50263: LD_INT 30
50265: PUSH
50266: LD_INT 29
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 30
50275: PUSH
50276: LD_INT 30
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: LIST
50287: PPUSH
50288: CALL_OW 72
50292: ST_TO_ADDR
// if tmp then
50293: LD_VAR 0 19
50297: IFFALSE 50345
// for i in tmp do
50299: LD_ADDR_VAR 0 8
50303: PUSH
50304: LD_VAR 0 19
50308: PUSH
50309: FOR_IN
50310: IFFALSE 50343
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50312: LD_VAR 0 8
50316: PPUSH
50317: CALL_OW 250
50321: PPUSH
50322: LD_VAR 0 8
50326: PPUSH
50327: CALL_OW 251
50331: PPUSH
50332: LD_VAR 0 16
50336: PPUSH
50337: CALL_OW 441
50341: GO 50309
50343: POP
50344: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50345: LD_VAR 0 18
50349: PPUSH
50350: LD_INT 2
50352: PUSH
50353: LD_INT 30
50355: PUSH
50356: LD_INT 32
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 30
50365: PUSH
50366: LD_INT 33
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: PPUSH
50378: CALL_OW 72
50382: IFFALSE 50470
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50384: LD_ADDR_VAR 0 8
50388: PUSH
50389: LD_VAR 0 18
50393: PPUSH
50394: LD_INT 2
50396: PUSH
50397: LD_INT 30
50399: PUSH
50400: LD_INT 32
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 30
50409: PUSH
50410: LD_INT 33
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: LIST
50421: PPUSH
50422: CALL_OW 72
50426: PUSH
50427: FOR_IN
50428: IFFALSE 50468
// begin if not GetBWeapon ( i ) then
50430: LD_VAR 0 8
50434: PPUSH
50435: CALL_OW 269
50439: NOT
50440: IFFALSE 50466
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50442: LD_VAR 0 8
50446: PPUSH
50447: LD_VAR 0 8
50451: PPUSH
50452: LD_VAR 0 2
50456: PPUSH
50457: CALL 51716 0 2
50461: PPUSH
50462: CALL_OW 431
// end ;
50466: GO 50427
50468: POP
50469: POP
// end ; for i = 1 to personel do
50470: LD_ADDR_VAR 0 8
50474: PUSH
50475: DOUBLE
50476: LD_INT 1
50478: DEC
50479: ST_TO_ADDR
50480: LD_VAR 0 6
50484: PUSH
50485: FOR_TO
50486: IFFALSE 51550
// begin if i > 4 then
50488: LD_VAR 0 8
50492: PUSH
50493: LD_INT 4
50495: GREATER
50496: IFFALSE 50500
// break ;
50498: GO 51550
// case i of 1 :
50500: LD_VAR 0 8
50504: PUSH
50505: LD_INT 1
50507: DOUBLE
50508: EQUAL
50509: IFTRUE 50513
50511: GO 50593
50513: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50514: LD_ADDR_VAR 0 12
50518: PUSH
50519: LD_VAR 0 18
50523: PPUSH
50524: LD_INT 22
50526: PUSH
50527: LD_VAR 0 16
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 58
50538: PUSH
50539: EMPTY
50540: LIST
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: LD_INT 30
50547: PUSH
50548: LD_INT 32
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 30
50557: PUSH
50558: LD_INT 4
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 30
50567: PUSH
50568: LD_INT 5
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: PPUSH
50586: CALL_OW 72
50590: ST_TO_ADDR
50591: GO 50815
50593: LD_INT 2
50595: DOUBLE
50596: EQUAL
50597: IFTRUE 50601
50599: GO 50663
50601: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50602: LD_ADDR_VAR 0 12
50606: PUSH
50607: LD_VAR 0 18
50611: PPUSH
50612: LD_INT 22
50614: PUSH
50615: LD_VAR 0 16
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: LD_INT 30
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 30
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PPUSH
50656: CALL_OW 72
50660: ST_TO_ADDR
50661: GO 50815
50663: LD_INT 3
50665: DOUBLE
50666: EQUAL
50667: IFTRUE 50671
50669: GO 50733
50671: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50672: LD_ADDR_VAR 0 12
50676: PUSH
50677: LD_VAR 0 18
50681: PPUSH
50682: LD_INT 22
50684: PUSH
50685: LD_VAR 0 16
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: LD_INT 30
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 30
50709: PUSH
50710: LD_INT 3
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PPUSH
50726: CALL_OW 72
50730: ST_TO_ADDR
50731: GO 50815
50733: LD_INT 4
50735: DOUBLE
50736: EQUAL
50737: IFTRUE 50741
50739: GO 50814
50741: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50742: LD_ADDR_VAR 0 12
50746: PUSH
50747: LD_VAR 0 18
50751: PPUSH
50752: LD_INT 22
50754: PUSH
50755: LD_VAR 0 16
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: LD_INT 30
50769: PUSH
50770: LD_INT 6
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 30
50779: PUSH
50780: LD_INT 7
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 30
50789: PUSH
50790: LD_INT 8
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PPUSH
50807: CALL_OW 72
50811: ST_TO_ADDR
50812: GO 50815
50814: POP
// if i = 1 then
50815: LD_VAR 0 8
50819: PUSH
50820: LD_INT 1
50822: EQUAL
50823: IFFALSE 50934
// begin tmp := [ ] ;
50825: LD_ADDR_VAR 0 19
50829: PUSH
50830: EMPTY
50831: ST_TO_ADDR
// for j in f do
50832: LD_ADDR_VAR 0 9
50836: PUSH
50837: LD_VAR 0 12
50841: PUSH
50842: FOR_IN
50843: IFFALSE 50916
// if GetBType ( j ) = b_bunker then
50845: LD_VAR 0 9
50849: PPUSH
50850: CALL_OW 266
50854: PUSH
50855: LD_INT 32
50857: EQUAL
50858: IFFALSE 50885
// tmp := Insert ( tmp , 1 , j ) else
50860: LD_ADDR_VAR 0 19
50864: PUSH
50865: LD_VAR 0 19
50869: PPUSH
50870: LD_INT 1
50872: PPUSH
50873: LD_VAR 0 9
50877: PPUSH
50878: CALL_OW 2
50882: ST_TO_ADDR
50883: GO 50914
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50885: LD_ADDR_VAR 0 19
50889: PUSH
50890: LD_VAR 0 19
50894: PPUSH
50895: LD_VAR 0 19
50899: PUSH
50900: LD_INT 1
50902: PLUS
50903: PPUSH
50904: LD_VAR 0 9
50908: PPUSH
50909: CALL_OW 2
50913: ST_TO_ADDR
50914: GO 50842
50916: POP
50917: POP
// if tmp then
50918: LD_VAR 0 19
50922: IFFALSE 50934
// f := tmp ;
50924: LD_ADDR_VAR 0 12
50928: PUSH
50929: LD_VAR 0 19
50933: ST_TO_ADDR
// end ; x := personel [ i ] ;
50934: LD_ADDR_VAR 0 13
50938: PUSH
50939: LD_VAR 0 6
50943: PUSH
50944: LD_VAR 0 8
50948: ARRAY
50949: ST_TO_ADDR
// if x = - 1 then
50950: LD_VAR 0 13
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: EQUAL
50959: IFFALSE 51168
// begin for j in f do
50961: LD_ADDR_VAR 0 9
50965: PUSH
50966: LD_VAR 0 12
50970: PUSH
50971: FOR_IN
50972: IFFALSE 51164
// repeat InitHc ;
50974: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50978: LD_VAR 0 9
50982: PPUSH
50983: CALL_OW 266
50987: PUSH
50988: LD_INT 5
50990: EQUAL
50991: IFFALSE 51061
// begin if UnitsInside ( j ) < 3 then
50993: LD_VAR 0 9
50997: PPUSH
50998: CALL_OW 313
51002: PUSH
51003: LD_INT 3
51005: LESS
51006: IFFALSE 51042
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51008: LD_INT 0
51010: PPUSH
51011: LD_INT 5
51013: PUSH
51014: LD_INT 8
51016: PUSH
51017: LD_INT 9
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: LIST
51024: PUSH
51025: LD_VAR 0 17
51029: ARRAY
51030: PPUSH
51031: LD_VAR 0 4
51035: PPUSH
51036: CALL_OW 380
51040: GO 51059
// PrepareHuman ( false , i , skill ) ;
51042: LD_INT 0
51044: PPUSH
51045: LD_VAR 0 8
51049: PPUSH
51050: LD_VAR 0 4
51054: PPUSH
51055: CALL_OW 380
// end else
51059: GO 51078
// PrepareHuman ( false , i , skill ) ;
51061: LD_INT 0
51063: PPUSH
51064: LD_VAR 0 8
51068: PPUSH
51069: LD_VAR 0 4
51073: PPUSH
51074: CALL_OW 380
// un := CreateHuman ;
51078: LD_ADDR_VAR 0 14
51082: PUSH
51083: CALL_OW 44
51087: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51088: LD_ADDR_VAR 0 7
51092: PUSH
51093: LD_VAR 0 7
51097: PPUSH
51098: LD_INT 1
51100: PPUSH
51101: LD_VAR 0 14
51105: PPUSH
51106: CALL_OW 2
51110: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51111: LD_VAR 0 14
51115: PPUSH
51116: LD_VAR 0 9
51120: PPUSH
51121: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51125: LD_VAR 0 9
51129: PPUSH
51130: CALL_OW 313
51134: PUSH
51135: LD_INT 6
51137: EQUAL
51138: PUSH
51139: LD_VAR 0 9
51143: PPUSH
51144: CALL_OW 266
51148: PUSH
51149: LD_INT 32
51151: PUSH
51152: LD_INT 31
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: IN
51159: OR
51160: IFFALSE 50974
51162: GO 50971
51164: POP
51165: POP
// end else
51166: GO 51548
// for j = 1 to x do
51168: LD_ADDR_VAR 0 9
51172: PUSH
51173: DOUBLE
51174: LD_INT 1
51176: DEC
51177: ST_TO_ADDR
51178: LD_VAR 0 13
51182: PUSH
51183: FOR_TO
51184: IFFALSE 51546
// begin InitHc ;
51186: CALL_OW 19
// if not f then
51190: LD_VAR 0 12
51194: NOT
51195: IFFALSE 51284
// begin PrepareHuman ( false , i , skill ) ;
51197: LD_INT 0
51199: PPUSH
51200: LD_VAR 0 8
51204: PPUSH
51205: LD_VAR 0 4
51209: PPUSH
51210: CALL_OW 380
// un := CreateHuman ;
51214: LD_ADDR_VAR 0 14
51218: PUSH
51219: CALL_OW 44
51223: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51224: LD_ADDR_VAR 0 7
51228: PUSH
51229: LD_VAR 0 7
51233: PPUSH
51234: LD_INT 1
51236: PPUSH
51237: LD_VAR 0 14
51241: PPUSH
51242: CALL_OW 2
51246: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51247: LD_VAR 0 14
51251: PPUSH
51252: LD_VAR 0 1
51256: PPUSH
51257: CALL_OW 250
51261: PPUSH
51262: LD_VAR 0 1
51266: PPUSH
51267: CALL_OW 251
51271: PPUSH
51272: LD_INT 10
51274: PPUSH
51275: LD_INT 0
51277: PPUSH
51278: CALL_OW 50
// continue ;
51282: GO 51183
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51284: LD_VAR 0 12
51288: PUSH
51289: LD_INT 1
51291: ARRAY
51292: PPUSH
51293: CALL_OW 313
51297: PUSH
51298: LD_VAR 0 12
51302: PUSH
51303: LD_INT 1
51305: ARRAY
51306: PPUSH
51307: CALL_OW 266
51311: PUSH
51312: LD_INT 32
51314: PUSH
51315: LD_INT 31
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: IN
51322: AND
51323: PUSH
51324: LD_VAR 0 12
51328: PUSH
51329: LD_INT 1
51331: ARRAY
51332: PPUSH
51333: CALL_OW 313
51337: PUSH
51338: LD_INT 6
51340: EQUAL
51341: OR
51342: IFFALSE 51362
// f := Delete ( f , 1 ) ;
51344: LD_ADDR_VAR 0 12
51348: PUSH
51349: LD_VAR 0 12
51353: PPUSH
51354: LD_INT 1
51356: PPUSH
51357: CALL_OW 3
51361: ST_TO_ADDR
// if not f then
51362: LD_VAR 0 12
51366: NOT
51367: IFFALSE 51385
// begin x := x + 2 ;
51369: LD_ADDR_VAR 0 13
51373: PUSH
51374: LD_VAR 0 13
51378: PUSH
51379: LD_INT 2
51381: PLUS
51382: ST_TO_ADDR
// continue ;
51383: GO 51183
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51385: LD_VAR 0 12
51389: PUSH
51390: LD_INT 1
51392: ARRAY
51393: PPUSH
51394: CALL_OW 266
51398: PUSH
51399: LD_INT 5
51401: EQUAL
51402: IFFALSE 51476
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51404: LD_VAR 0 12
51408: PUSH
51409: LD_INT 1
51411: ARRAY
51412: PPUSH
51413: CALL_OW 313
51417: PUSH
51418: LD_INT 3
51420: LESS
51421: IFFALSE 51457
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51423: LD_INT 0
51425: PPUSH
51426: LD_INT 5
51428: PUSH
51429: LD_INT 8
51431: PUSH
51432: LD_INT 9
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: LIST
51439: PUSH
51440: LD_VAR 0 17
51444: ARRAY
51445: PPUSH
51446: LD_VAR 0 4
51450: PPUSH
51451: CALL_OW 380
51455: GO 51474
// PrepareHuman ( false , i , skill ) ;
51457: LD_INT 0
51459: PPUSH
51460: LD_VAR 0 8
51464: PPUSH
51465: LD_VAR 0 4
51469: PPUSH
51470: CALL_OW 380
// end else
51474: GO 51493
// PrepareHuman ( false , i , skill ) ;
51476: LD_INT 0
51478: PPUSH
51479: LD_VAR 0 8
51483: PPUSH
51484: LD_VAR 0 4
51488: PPUSH
51489: CALL_OW 380
// un := CreateHuman ;
51493: LD_ADDR_VAR 0 14
51497: PUSH
51498: CALL_OW 44
51502: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51503: LD_ADDR_VAR 0 7
51507: PUSH
51508: LD_VAR 0 7
51512: PPUSH
51513: LD_INT 1
51515: PPUSH
51516: LD_VAR 0 14
51520: PPUSH
51521: CALL_OW 2
51525: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51526: LD_VAR 0 14
51530: PPUSH
51531: LD_VAR 0 12
51535: PUSH
51536: LD_INT 1
51538: ARRAY
51539: PPUSH
51540: CALL_OW 52
// end ;
51544: GO 51183
51546: POP
51547: POP
// end ;
51548: GO 50485
51550: POP
51551: POP
// result := result ^ buildings ;
51552: LD_ADDR_VAR 0 7
51556: PUSH
51557: LD_VAR 0 7
51561: PUSH
51562: LD_VAR 0 18
51566: ADD
51567: ST_TO_ADDR
// end else
51568: GO 51711
// begin for i = 1 to personel do
51570: LD_ADDR_VAR 0 8
51574: PUSH
51575: DOUBLE
51576: LD_INT 1
51578: DEC
51579: ST_TO_ADDR
51580: LD_VAR 0 6
51584: PUSH
51585: FOR_TO
51586: IFFALSE 51709
// begin if i > 4 then
51588: LD_VAR 0 8
51592: PUSH
51593: LD_INT 4
51595: GREATER
51596: IFFALSE 51600
// break ;
51598: GO 51709
// x := personel [ i ] ;
51600: LD_ADDR_VAR 0 13
51604: PUSH
51605: LD_VAR 0 6
51609: PUSH
51610: LD_VAR 0 8
51614: ARRAY
51615: ST_TO_ADDR
// if x = - 1 then
51616: LD_VAR 0 13
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: EQUAL
51625: IFFALSE 51629
// continue ;
51627: GO 51585
// PrepareHuman ( false , i , skill ) ;
51629: LD_INT 0
51631: PPUSH
51632: LD_VAR 0 8
51636: PPUSH
51637: LD_VAR 0 4
51641: PPUSH
51642: CALL_OW 380
// un := CreateHuman ;
51646: LD_ADDR_VAR 0 14
51650: PUSH
51651: CALL_OW 44
51655: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51656: LD_VAR 0 14
51660: PPUSH
51661: LD_VAR 0 1
51665: PPUSH
51666: CALL_OW 250
51670: PPUSH
51671: LD_VAR 0 1
51675: PPUSH
51676: CALL_OW 251
51680: PPUSH
51681: LD_INT 10
51683: PPUSH
51684: LD_INT 0
51686: PPUSH
51687: CALL_OW 50
// result := result ^ un ;
51691: LD_ADDR_VAR 0 7
51695: PUSH
51696: LD_VAR 0 7
51700: PUSH
51701: LD_VAR 0 14
51705: ADD
51706: ST_TO_ADDR
// end ;
51707: GO 51585
51709: POP
51710: POP
// end ; end ;
51711: LD_VAR 0 7
51715: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51716: LD_INT 0
51718: PPUSH
51719: PPUSH
51720: PPUSH
51721: PPUSH
51722: PPUSH
51723: PPUSH
51724: PPUSH
51725: PPUSH
51726: PPUSH
51727: PPUSH
51728: PPUSH
51729: PPUSH
51730: PPUSH
51731: PPUSH
51732: PPUSH
51733: PPUSH
// result := false ;
51734: LD_ADDR_VAR 0 3
51738: PUSH
51739: LD_INT 0
51741: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51742: LD_VAR 0 1
51746: NOT
51747: PUSH
51748: LD_VAR 0 1
51752: PPUSH
51753: CALL_OW 266
51757: PUSH
51758: LD_INT 32
51760: PUSH
51761: LD_INT 33
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: IN
51768: NOT
51769: OR
51770: IFFALSE 51774
// exit ;
51772: GO 52883
// nat := GetNation ( tower ) ;
51774: LD_ADDR_VAR 0 12
51778: PUSH
51779: LD_VAR 0 1
51783: PPUSH
51784: CALL_OW 248
51788: ST_TO_ADDR
// side := GetSide ( tower ) ;
51789: LD_ADDR_VAR 0 16
51793: PUSH
51794: LD_VAR 0 1
51798: PPUSH
51799: CALL_OW 255
51803: ST_TO_ADDR
// x := GetX ( tower ) ;
51804: LD_ADDR_VAR 0 10
51808: PUSH
51809: LD_VAR 0 1
51813: PPUSH
51814: CALL_OW 250
51818: ST_TO_ADDR
// y := GetY ( tower ) ;
51819: LD_ADDR_VAR 0 11
51823: PUSH
51824: LD_VAR 0 1
51828: PPUSH
51829: CALL_OW 251
51833: ST_TO_ADDR
// if not x or not y then
51834: LD_VAR 0 10
51838: NOT
51839: PUSH
51840: LD_VAR 0 11
51844: NOT
51845: OR
51846: IFFALSE 51850
// exit ;
51848: GO 52883
// weapon := 0 ;
51850: LD_ADDR_VAR 0 18
51854: PUSH
51855: LD_INT 0
51857: ST_TO_ADDR
// fac_list := [ ] ;
51858: LD_ADDR_VAR 0 17
51862: PUSH
51863: EMPTY
51864: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51865: LD_ADDR_VAR 0 6
51869: PUSH
51870: LD_VAR 0 1
51874: PPUSH
51875: CALL_OW 274
51879: PPUSH
51880: LD_VAR 0 2
51884: PPUSH
51885: LD_INT 0
51887: PPUSH
51888: CALL 49454 0 3
51892: PPUSH
51893: LD_INT 30
51895: PUSH
51896: LD_INT 3
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PPUSH
51903: CALL_OW 72
51907: ST_TO_ADDR
// if not factories then
51908: LD_VAR 0 6
51912: NOT
51913: IFFALSE 51917
// exit ;
51915: GO 52883
// for i in factories do
51917: LD_ADDR_VAR 0 8
51921: PUSH
51922: LD_VAR 0 6
51926: PUSH
51927: FOR_IN
51928: IFFALSE 51953
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51930: LD_ADDR_VAR 0 17
51934: PUSH
51935: LD_VAR 0 17
51939: PUSH
51940: LD_VAR 0 8
51944: PPUSH
51945: CALL_OW 478
51949: UNION
51950: ST_TO_ADDR
51951: GO 51927
51953: POP
51954: POP
// if not fac_list then
51955: LD_VAR 0 17
51959: NOT
51960: IFFALSE 51964
// exit ;
51962: GO 52883
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51964: LD_ADDR_VAR 0 5
51968: PUSH
51969: LD_INT 4
51971: PUSH
51972: LD_INT 5
51974: PUSH
51975: LD_INT 9
51977: PUSH
51978: LD_INT 10
51980: PUSH
51981: LD_INT 6
51983: PUSH
51984: LD_INT 7
51986: PUSH
51987: LD_INT 11
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 27
52001: PUSH
52002: LD_INT 28
52004: PUSH
52005: LD_INT 26
52007: PUSH
52008: LD_INT 30
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 43
52019: PUSH
52020: LD_INT 44
52022: PUSH
52023: LD_INT 46
52025: PUSH
52026: LD_INT 45
52028: PUSH
52029: LD_INT 47
52031: PUSH
52032: LD_INT 49
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: LIST
52047: PUSH
52048: LD_VAR 0 12
52052: ARRAY
52053: ST_TO_ADDR
// list := list isect fac_list ;
52054: LD_ADDR_VAR 0 5
52058: PUSH
52059: LD_VAR 0 5
52063: PUSH
52064: LD_VAR 0 17
52068: ISECT
52069: ST_TO_ADDR
// if not list then
52070: LD_VAR 0 5
52074: NOT
52075: IFFALSE 52079
// exit ;
52077: GO 52883
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52079: LD_VAR 0 12
52083: PUSH
52084: LD_INT 3
52086: EQUAL
52087: PUSH
52088: LD_INT 49
52090: PUSH
52091: LD_VAR 0 5
52095: IN
52096: AND
52097: PUSH
52098: LD_INT 31
52100: PPUSH
52101: LD_VAR 0 16
52105: PPUSH
52106: CALL_OW 321
52110: PUSH
52111: LD_INT 2
52113: EQUAL
52114: AND
52115: IFFALSE 52175
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52117: LD_INT 22
52119: PUSH
52120: LD_VAR 0 16
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 35
52131: PUSH
52132: LD_INT 49
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 91
52141: PUSH
52142: LD_VAR 0 1
52146: PUSH
52147: LD_INT 10
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: LIST
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: LIST
52159: PPUSH
52160: CALL_OW 69
52164: NOT
52165: IFFALSE 52175
// weapon := ru_time_lapser ;
52167: LD_ADDR_VAR 0 18
52171: PUSH
52172: LD_INT 49
52174: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52175: LD_VAR 0 12
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: IN
52190: PUSH
52191: LD_INT 11
52193: PUSH
52194: LD_VAR 0 5
52198: IN
52199: PUSH
52200: LD_INT 30
52202: PUSH
52203: LD_VAR 0 5
52207: IN
52208: OR
52209: AND
52210: PUSH
52211: LD_INT 6
52213: PPUSH
52214: LD_VAR 0 16
52218: PPUSH
52219: CALL_OW 321
52223: PUSH
52224: LD_INT 2
52226: EQUAL
52227: AND
52228: IFFALSE 52393
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52230: LD_INT 22
52232: PUSH
52233: LD_VAR 0 16
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: LD_INT 35
52247: PUSH
52248: LD_INT 11
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 35
52257: PUSH
52258: LD_INT 30
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 91
52272: PUSH
52273: LD_VAR 0 1
52277: PUSH
52278: LD_INT 18
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: LIST
52290: PPUSH
52291: CALL_OW 69
52295: NOT
52296: PUSH
52297: LD_INT 22
52299: PUSH
52300: LD_VAR 0 16
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 30
52314: PUSH
52315: LD_INT 32
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 30
52324: PUSH
52325: LD_INT 33
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 91
52339: PUSH
52340: LD_VAR 0 1
52344: PUSH
52345: LD_INT 12
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: LIST
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: PUSH
52358: EMPTY
52359: LIST
52360: PPUSH
52361: CALL_OW 69
52365: PUSH
52366: LD_INT 2
52368: GREATER
52369: AND
52370: IFFALSE 52393
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52372: LD_ADDR_VAR 0 18
52376: PUSH
52377: LD_INT 11
52379: PUSH
52380: LD_INT 30
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_VAR 0 12
52391: ARRAY
52392: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52393: LD_VAR 0 18
52397: NOT
52398: PUSH
52399: LD_INT 40
52401: PPUSH
52402: LD_VAR 0 16
52406: PPUSH
52407: CALL_OW 321
52411: PUSH
52412: LD_INT 2
52414: EQUAL
52415: AND
52416: PUSH
52417: LD_INT 7
52419: PUSH
52420: LD_VAR 0 5
52424: IN
52425: PUSH
52426: LD_INT 28
52428: PUSH
52429: LD_VAR 0 5
52433: IN
52434: OR
52435: PUSH
52436: LD_INT 45
52438: PUSH
52439: LD_VAR 0 5
52443: IN
52444: OR
52445: AND
52446: IFFALSE 52700
// begin hex := GetHexInfo ( x , y ) ;
52448: LD_ADDR_VAR 0 4
52452: PUSH
52453: LD_VAR 0 10
52457: PPUSH
52458: LD_VAR 0 11
52462: PPUSH
52463: CALL_OW 546
52467: ST_TO_ADDR
// if hex [ 1 ] then
52468: LD_VAR 0 4
52472: PUSH
52473: LD_INT 1
52475: ARRAY
52476: IFFALSE 52480
// exit ;
52478: GO 52883
// height := hex [ 2 ] ;
52480: LD_ADDR_VAR 0 15
52484: PUSH
52485: LD_VAR 0 4
52489: PUSH
52490: LD_INT 2
52492: ARRAY
52493: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52494: LD_ADDR_VAR 0 14
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: LD_INT 5
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: ST_TO_ADDR
// for i in tmp do
52517: LD_ADDR_VAR 0 8
52521: PUSH
52522: LD_VAR 0 14
52526: PUSH
52527: FOR_IN
52528: IFFALSE 52698
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52530: LD_ADDR_VAR 0 9
52534: PUSH
52535: LD_VAR 0 10
52539: PPUSH
52540: LD_VAR 0 8
52544: PPUSH
52545: LD_INT 5
52547: PPUSH
52548: CALL_OW 272
52552: PUSH
52553: LD_VAR 0 11
52557: PPUSH
52558: LD_VAR 0 8
52562: PPUSH
52563: LD_INT 5
52565: PPUSH
52566: CALL_OW 273
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52575: LD_VAR 0 9
52579: PUSH
52580: LD_INT 1
52582: ARRAY
52583: PPUSH
52584: LD_VAR 0 9
52588: PUSH
52589: LD_INT 2
52591: ARRAY
52592: PPUSH
52593: CALL_OW 488
52597: IFFALSE 52696
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52599: LD_ADDR_VAR 0 4
52603: PUSH
52604: LD_VAR 0 9
52608: PUSH
52609: LD_INT 1
52611: ARRAY
52612: PPUSH
52613: LD_VAR 0 9
52617: PUSH
52618: LD_INT 2
52620: ARRAY
52621: PPUSH
52622: CALL_OW 546
52626: ST_TO_ADDR
// if hex [ 1 ] then
52627: LD_VAR 0 4
52631: PUSH
52632: LD_INT 1
52634: ARRAY
52635: IFFALSE 52639
// continue ;
52637: GO 52527
// h := hex [ 2 ] ;
52639: LD_ADDR_VAR 0 13
52643: PUSH
52644: LD_VAR 0 4
52648: PUSH
52649: LD_INT 2
52651: ARRAY
52652: ST_TO_ADDR
// if h + 7 < height then
52653: LD_VAR 0 13
52657: PUSH
52658: LD_INT 7
52660: PLUS
52661: PUSH
52662: LD_VAR 0 15
52666: LESS
52667: IFFALSE 52696
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52669: LD_ADDR_VAR 0 18
52673: PUSH
52674: LD_INT 7
52676: PUSH
52677: LD_INT 28
52679: PUSH
52680: LD_INT 45
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: LIST
52687: PUSH
52688: LD_VAR 0 12
52692: ARRAY
52693: ST_TO_ADDR
// break ;
52694: GO 52698
// end ; end ; end ;
52696: GO 52527
52698: POP
52699: POP
// end ; if not weapon then
52700: LD_VAR 0 18
52704: NOT
52705: IFFALSE 52765
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52707: LD_ADDR_VAR 0 5
52711: PUSH
52712: LD_VAR 0 5
52716: PUSH
52717: LD_INT 11
52719: PUSH
52720: LD_INT 30
52722: PUSH
52723: LD_INT 49
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: LIST
52730: DIFF
52731: ST_TO_ADDR
// if not list then
52732: LD_VAR 0 5
52736: NOT
52737: IFFALSE 52741
// exit ;
52739: GO 52883
// weapon := list [ rand ( 1 , list ) ] ;
52741: LD_ADDR_VAR 0 18
52745: PUSH
52746: LD_VAR 0 5
52750: PUSH
52751: LD_INT 1
52753: PPUSH
52754: LD_VAR 0 5
52758: PPUSH
52759: CALL_OW 12
52763: ARRAY
52764: ST_TO_ADDR
// end ; if weapon then
52765: LD_VAR 0 18
52769: IFFALSE 52883
// begin tmp := CostOfWeapon ( weapon ) ;
52771: LD_ADDR_VAR 0 14
52775: PUSH
52776: LD_VAR 0 18
52780: PPUSH
52781: CALL_OW 451
52785: ST_TO_ADDR
// j := GetBase ( tower ) ;
52786: LD_ADDR_VAR 0 9
52790: PUSH
52791: LD_VAR 0 1
52795: PPUSH
52796: CALL_OW 274
52800: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52801: LD_VAR 0 9
52805: PPUSH
52806: LD_INT 1
52808: PPUSH
52809: CALL_OW 275
52813: PUSH
52814: LD_VAR 0 14
52818: PUSH
52819: LD_INT 1
52821: ARRAY
52822: GREATEREQUAL
52823: PUSH
52824: LD_VAR 0 9
52828: PPUSH
52829: LD_INT 2
52831: PPUSH
52832: CALL_OW 275
52836: PUSH
52837: LD_VAR 0 14
52841: PUSH
52842: LD_INT 2
52844: ARRAY
52845: GREATEREQUAL
52846: AND
52847: PUSH
52848: LD_VAR 0 9
52852: PPUSH
52853: LD_INT 3
52855: PPUSH
52856: CALL_OW 275
52860: PUSH
52861: LD_VAR 0 14
52865: PUSH
52866: LD_INT 3
52868: ARRAY
52869: GREATEREQUAL
52870: AND
52871: IFFALSE 52883
// result := weapon ;
52873: LD_ADDR_VAR 0 3
52877: PUSH
52878: LD_VAR 0 18
52882: ST_TO_ADDR
// end ; end ;
52883: LD_VAR 0 3
52887: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52888: LD_INT 0
52890: PPUSH
52891: PPUSH
// result := true ;
52892: LD_ADDR_VAR 0 3
52896: PUSH
52897: LD_INT 1
52899: ST_TO_ADDR
// if array1 = array2 then
52900: LD_VAR 0 1
52904: PUSH
52905: LD_VAR 0 2
52909: EQUAL
52910: IFFALSE 52970
// begin for i = 1 to array1 do
52912: LD_ADDR_VAR 0 4
52916: PUSH
52917: DOUBLE
52918: LD_INT 1
52920: DEC
52921: ST_TO_ADDR
52922: LD_VAR 0 1
52926: PUSH
52927: FOR_TO
52928: IFFALSE 52966
// if array1 [ i ] <> array2 [ i ] then
52930: LD_VAR 0 1
52934: PUSH
52935: LD_VAR 0 4
52939: ARRAY
52940: PUSH
52941: LD_VAR 0 2
52945: PUSH
52946: LD_VAR 0 4
52950: ARRAY
52951: NONEQUAL
52952: IFFALSE 52964
// begin result := false ;
52954: LD_ADDR_VAR 0 3
52958: PUSH
52959: LD_INT 0
52961: ST_TO_ADDR
// break ;
52962: GO 52966
// end ;
52964: GO 52927
52966: POP
52967: POP
// end else
52968: GO 52978
// result := false ;
52970: LD_ADDR_VAR 0 3
52974: PUSH
52975: LD_INT 0
52977: ST_TO_ADDR
// end ;
52978: LD_VAR 0 3
52982: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52983: LD_INT 0
52985: PPUSH
52986: PPUSH
// if not array1 or not array2 then
52987: LD_VAR 0 1
52991: NOT
52992: PUSH
52993: LD_VAR 0 2
52997: NOT
52998: OR
52999: IFFALSE 53003
// exit ;
53001: GO 53067
// result := true ;
53003: LD_ADDR_VAR 0 3
53007: PUSH
53008: LD_INT 1
53010: ST_TO_ADDR
// for i = 1 to array1 do
53011: LD_ADDR_VAR 0 4
53015: PUSH
53016: DOUBLE
53017: LD_INT 1
53019: DEC
53020: ST_TO_ADDR
53021: LD_VAR 0 1
53025: PUSH
53026: FOR_TO
53027: IFFALSE 53065
// if array1 [ i ] <> array2 [ i ] then
53029: LD_VAR 0 1
53033: PUSH
53034: LD_VAR 0 4
53038: ARRAY
53039: PUSH
53040: LD_VAR 0 2
53044: PUSH
53045: LD_VAR 0 4
53049: ARRAY
53050: NONEQUAL
53051: IFFALSE 53063
// begin result := false ;
53053: LD_ADDR_VAR 0 3
53057: PUSH
53058: LD_INT 0
53060: ST_TO_ADDR
// break ;
53061: GO 53065
// end ;
53063: GO 53026
53065: POP
53066: POP
// end ;
53067: LD_VAR 0 3
53071: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53072: LD_INT 0
53074: PPUSH
53075: PPUSH
53076: PPUSH
// pom := GetBase ( fac ) ;
53077: LD_ADDR_VAR 0 5
53081: PUSH
53082: LD_VAR 0 1
53086: PPUSH
53087: CALL_OW 274
53091: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53092: LD_ADDR_VAR 0 4
53096: PUSH
53097: LD_VAR 0 2
53101: PUSH
53102: LD_INT 1
53104: ARRAY
53105: PPUSH
53106: LD_VAR 0 2
53110: PUSH
53111: LD_INT 2
53113: ARRAY
53114: PPUSH
53115: LD_VAR 0 2
53119: PUSH
53120: LD_INT 3
53122: ARRAY
53123: PPUSH
53124: LD_VAR 0 2
53128: PUSH
53129: LD_INT 4
53131: ARRAY
53132: PPUSH
53133: CALL_OW 449
53137: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53138: LD_ADDR_VAR 0 3
53142: PUSH
53143: LD_VAR 0 5
53147: PPUSH
53148: LD_INT 1
53150: PPUSH
53151: CALL_OW 275
53155: PUSH
53156: LD_VAR 0 4
53160: PUSH
53161: LD_INT 1
53163: ARRAY
53164: GREATEREQUAL
53165: PUSH
53166: LD_VAR 0 5
53170: PPUSH
53171: LD_INT 2
53173: PPUSH
53174: CALL_OW 275
53178: PUSH
53179: LD_VAR 0 4
53183: PUSH
53184: LD_INT 2
53186: ARRAY
53187: GREATEREQUAL
53188: AND
53189: PUSH
53190: LD_VAR 0 5
53194: PPUSH
53195: LD_INT 3
53197: PPUSH
53198: CALL_OW 275
53202: PUSH
53203: LD_VAR 0 4
53207: PUSH
53208: LD_INT 3
53210: ARRAY
53211: GREATEREQUAL
53212: AND
53213: ST_TO_ADDR
// end ;
53214: LD_VAR 0 3
53218: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53219: LD_INT 0
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
// pom := GetBase ( building ) ;
53225: LD_ADDR_VAR 0 3
53229: PUSH
53230: LD_VAR 0 1
53234: PPUSH
53235: CALL_OW 274
53239: ST_TO_ADDR
// if not pom then
53240: LD_VAR 0 3
53244: NOT
53245: IFFALSE 53249
// exit ;
53247: GO 53419
// btype := GetBType ( building ) ;
53249: LD_ADDR_VAR 0 5
53253: PUSH
53254: LD_VAR 0 1
53258: PPUSH
53259: CALL_OW 266
53263: ST_TO_ADDR
// if btype = b_armoury then
53264: LD_VAR 0 5
53268: PUSH
53269: LD_INT 4
53271: EQUAL
53272: IFFALSE 53282
// btype := b_barracks ;
53274: LD_ADDR_VAR 0 5
53278: PUSH
53279: LD_INT 5
53281: ST_TO_ADDR
// if btype = b_depot then
53282: LD_VAR 0 5
53286: PUSH
53287: LD_INT 0
53289: EQUAL
53290: IFFALSE 53300
// btype := b_warehouse ;
53292: LD_ADDR_VAR 0 5
53296: PUSH
53297: LD_INT 1
53299: ST_TO_ADDR
// if btype = b_workshop then
53300: LD_VAR 0 5
53304: PUSH
53305: LD_INT 2
53307: EQUAL
53308: IFFALSE 53318
// btype := b_factory ;
53310: LD_ADDR_VAR 0 5
53314: PUSH
53315: LD_INT 3
53317: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53318: LD_ADDR_VAR 0 4
53322: PUSH
53323: LD_VAR 0 5
53327: PPUSH
53328: LD_VAR 0 1
53332: PPUSH
53333: CALL_OW 248
53337: PPUSH
53338: CALL_OW 450
53342: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53343: LD_ADDR_VAR 0 2
53347: PUSH
53348: LD_VAR 0 3
53352: PPUSH
53353: LD_INT 1
53355: PPUSH
53356: CALL_OW 275
53360: PUSH
53361: LD_VAR 0 4
53365: PUSH
53366: LD_INT 1
53368: ARRAY
53369: GREATEREQUAL
53370: PUSH
53371: LD_VAR 0 3
53375: PPUSH
53376: LD_INT 2
53378: PPUSH
53379: CALL_OW 275
53383: PUSH
53384: LD_VAR 0 4
53388: PUSH
53389: LD_INT 2
53391: ARRAY
53392: GREATEREQUAL
53393: AND
53394: PUSH
53395: LD_VAR 0 3
53399: PPUSH
53400: LD_INT 3
53402: PPUSH
53403: CALL_OW 275
53407: PUSH
53408: LD_VAR 0 4
53412: PUSH
53413: LD_INT 3
53415: ARRAY
53416: GREATEREQUAL
53417: AND
53418: ST_TO_ADDR
// end ;
53419: LD_VAR 0 2
53423: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53424: LD_INT 0
53426: PPUSH
53427: PPUSH
53428: PPUSH
// pom := GetBase ( building ) ;
53429: LD_ADDR_VAR 0 4
53433: PUSH
53434: LD_VAR 0 1
53438: PPUSH
53439: CALL_OW 274
53443: ST_TO_ADDR
// if not pom then
53444: LD_VAR 0 4
53448: NOT
53449: IFFALSE 53453
// exit ;
53451: GO 53554
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53453: LD_ADDR_VAR 0 5
53457: PUSH
53458: LD_VAR 0 2
53462: PPUSH
53463: LD_VAR 0 1
53467: PPUSH
53468: CALL_OW 248
53472: PPUSH
53473: CALL_OW 450
53477: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53478: LD_ADDR_VAR 0 3
53482: PUSH
53483: LD_VAR 0 4
53487: PPUSH
53488: LD_INT 1
53490: PPUSH
53491: CALL_OW 275
53495: PUSH
53496: LD_VAR 0 5
53500: PUSH
53501: LD_INT 1
53503: ARRAY
53504: GREATEREQUAL
53505: PUSH
53506: LD_VAR 0 4
53510: PPUSH
53511: LD_INT 2
53513: PPUSH
53514: CALL_OW 275
53518: PUSH
53519: LD_VAR 0 5
53523: PUSH
53524: LD_INT 2
53526: ARRAY
53527: GREATEREQUAL
53528: AND
53529: PUSH
53530: LD_VAR 0 4
53534: PPUSH
53535: LD_INT 3
53537: PPUSH
53538: CALL_OW 275
53542: PUSH
53543: LD_VAR 0 5
53547: PUSH
53548: LD_INT 3
53550: ARRAY
53551: GREATEREQUAL
53552: AND
53553: ST_TO_ADDR
// end ;
53554: LD_VAR 0 3
53558: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53559: LD_INT 0
53561: PPUSH
53562: PPUSH
53563: PPUSH
53564: PPUSH
53565: PPUSH
53566: PPUSH
53567: PPUSH
53568: PPUSH
53569: PPUSH
53570: PPUSH
53571: PPUSH
// result := false ;
53572: LD_ADDR_VAR 0 8
53576: PUSH
53577: LD_INT 0
53579: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53580: LD_VAR 0 5
53584: NOT
53585: PUSH
53586: LD_VAR 0 1
53590: NOT
53591: OR
53592: PUSH
53593: LD_VAR 0 2
53597: NOT
53598: OR
53599: PUSH
53600: LD_VAR 0 3
53604: NOT
53605: OR
53606: IFFALSE 53610
// exit ;
53608: GO 54424
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53610: LD_ADDR_VAR 0 14
53614: PUSH
53615: LD_VAR 0 1
53619: PPUSH
53620: LD_VAR 0 2
53624: PPUSH
53625: LD_VAR 0 3
53629: PPUSH
53630: LD_VAR 0 4
53634: PPUSH
53635: LD_VAR 0 5
53639: PUSH
53640: LD_INT 1
53642: ARRAY
53643: PPUSH
53644: CALL_OW 248
53648: PPUSH
53649: LD_INT 0
53651: PPUSH
53652: CALL 55677 0 6
53656: ST_TO_ADDR
// if not hexes then
53657: LD_VAR 0 14
53661: NOT
53662: IFFALSE 53666
// exit ;
53664: GO 54424
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53666: LD_ADDR_VAR 0 17
53670: PUSH
53671: LD_VAR 0 5
53675: PPUSH
53676: LD_INT 22
53678: PUSH
53679: LD_VAR 0 13
53683: PPUSH
53684: CALL_OW 255
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: LD_INT 30
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 30
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: LIST
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PPUSH
53725: CALL_OW 72
53729: ST_TO_ADDR
// for i = 1 to hexes do
53730: LD_ADDR_VAR 0 9
53734: PUSH
53735: DOUBLE
53736: LD_INT 1
53738: DEC
53739: ST_TO_ADDR
53740: LD_VAR 0 14
53744: PUSH
53745: FOR_TO
53746: IFFALSE 54422
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53748: LD_ADDR_VAR 0 13
53752: PUSH
53753: LD_VAR 0 14
53757: PUSH
53758: LD_VAR 0 9
53762: ARRAY
53763: PUSH
53764: LD_INT 1
53766: ARRAY
53767: PPUSH
53768: LD_VAR 0 14
53772: PUSH
53773: LD_VAR 0 9
53777: ARRAY
53778: PUSH
53779: LD_INT 2
53781: ARRAY
53782: PPUSH
53783: CALL_OW 428
53787: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53788: LD_VAR 0 14
53792: PUSH
53793: LD_VAR 0 9
53797: ARRAY
53798: PUSH
53799: LD_INT 1
53801: ARRAY
53802: PPUSH
53803: LD_VAR 0 14
53807: PUSH
53808: LD_VAR 0 9
53812: ARRAY
53813: PUSH
53814: LD_INT 2
53816: ARRAY
53817: PPUSH
53818: CALL_OW 351
53822: PUSH
53823: LD_VAR 0 14
53827: PUSH
53828: LD_VAR 0 9
53832: ARRAY
53833: PUSH
53834: LD_INT 1
53836: ARRAY
53837: PPUSH
53838: LD_VAR 0 14
53842: PUSH
53843: LD_VAR 0 9
53847: ARRAY
53848: PUSH
53849: LD_INT 2
53851: ARRAY
53852: PPUSH
53853: CALL_OW 488
53857: NOT
53858: OR
53859: PUSH
53860: LD_VAR 0 13
53864: PPUSH
53865: CALL_OW 247
53869: PUSH
53870: LD_INT 3
53872: EQUAL
53873: OR
53874: IFFALSE 53880
// exit ;
53876: POP
53877: POP
53878: GO 54424
// if not tmp then
53880: LD_VAR 0 13
53884: NOT
53885: IFFALSE 53889
// continue ;
53887: GO 53745
// result := true ;
53889: LD_ADDR_VAR 0 8
53893: PUSH
53894: LD_INT 1
53896: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53897: LD_VAR 0 6
53901: PUSH
53902: LD_VAR 0 13
53906: PPUSH
53907: CALL_OW 247
53911: PUSH
53912: LD_INT 2
53914: EQUAL
53915: AND
53916: PUSH
53917: LD_VAR 0 13
53921: PPUSH
53922: CALL_OW 263
53926: PUSH
53927: LD_INT 1
53929: EQUAL
53930: AND
53931: IFFALSE 54095
// begin if IsDrivenBy ( tmp ) then
53933: LD_VAR 0 13
53937: PPUSH
53938: CALL_OW 311
53942: IFFALSE 53946
// continue ;
53944: GO 53745
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53946: LD_VAR 0 6
53950: PPUSH
53951: LD_INT 3
53953: PUSH
53954: LD_INT 60
53956: PUSH
53957: EMPTY
53958: LIST
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 3
53966: PUSH
53967: LD_INT 55
53969: PUSH
53970: EMPTY
53971: LIST
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PPUSH
53981: CALL_OW 72
53985: IFFALSE 54093
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53987: LD_ADDR_VAR 0 18
53991: PUSH
53992: LD_VAR 0 6
53996: PPUSH
53997: LD_INT 3
53999: PUSH
54000: LD_INT 60
54002: PUSH
54003: EMPTY
54004: LIST
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: LD_INT 55
54015: PUSH
54016: EMPTY
54017: LIST
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PPUSH
54027: CALL_OW 72
54031: PUSH
54032: LD_INT 1
54034: ARRAY
54035: ST_TO_ADDR
// if IsInUnit ( driver ) then
54036: LD_VAR 0 18
54040: PPUSH
54041: CALL_OW 310
54045: IFFALSE 54056
// ComExit ( driver ) ;
54047: LD_VAR 0 18
54051: PPUSH
54052: CALL 79478 0 1
// AddComEnterUnit ( driver , tmp ) ;
54056: LD_VAR 0 18
54060: PPUSH
54061: LD_VAR 0 13
54065: PPUSH
54066: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54070: LD_VAR 0 18
54074: PPUSH
54075: LD_VAR 0 7
54079: PPUSH
54080: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54084: LD_VAR 0 18
54088: PPUSH
54089: CALL_OW 181
// end ; continue ;
54093: GO 53745
// end ; if not cleaners or not tmp in cleaners then
54095: LD_VAR 0 6
54099: NOT
54100: PUSH
54101: LD_VAR 0 13
54105: PUSH
54106: LD_VAR 0 6
54110: IN
54111: NOT
54112: OR
54113: IFFALSE 54420
// begin if dep then
54115: LD_VAR 0 17
54119: IFFALSE 54255
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54121: LD_ADDR_VAR 0 16
54125: PUSH
54126: LD_VAR 0 17
54130: PUSH
54131: LD_INT 1
54133: ARRAY
54134: PPUSH
54135: CALL_OW 250
54139: PPUSH
54140: LD_VAR 0 17
54144: PUSH
54145: LD_INT 1
54147: ARRAY
54148: PPUSH
54149: CALL_OW 254
54153: PPUSH
54154: LD_INT 5
54156: PPUSH
54157: CALL_OW 272
54161: PUSH
54162: LD_VAR 0 17
54166: PUSH
54167: LD_INT 1
54169: ARRAY
54170: PPUSH
54171: CALL_OW 251
54175: PPUSH
54176: LD_VAR 0 17
54180: PUSH
54181: LD_INT 1
54183: ARRAY
54184: PPUSH
54185: CALL_OW 254
54189: PPUSH
54190: LD_INT 5
54192: PPUSH
54193: CALL_OW 273
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54202: LD_VAR 0 16
54206: PUSH
54207: LD_INT 1
54209: ARRAY
54210: PPUSH
54211: LD_VAR 0 16
54215: PUSH
54216: LD_INT 2
54218: ARRAY
54219: PPUSH
54220: CALL_OW 488
54224: IFFALSE 54255
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54226: LD_VAR 0 13
54230: PPUSH
54231: LD_VAR 0 16
54235: PUSH
54236: LD_INT 1
54238: ARRAY
54239: PPUSH
54240: LD_VAR 0 16
54244: PUSH
54245: LD_INT 2
54247: ARRAY
54248: PPUSH
54249: CALL_OW 111
// continue ;
54253: GO 53745
// end ; end ; r := GetDir ( tmp ) ;
54255: LD_ADDR_VAR 0 15
54259: PUSH
54260: LD_VAR 0 13
54264: PPUSH
54265: CALL_OW 254
54269: ST_TO_ADDR
// if r = 5 then
54270: LD_VAR 0 15
54274: PUSH
54275: LD_INT 5
54277: EQUAL
54278: IFFALSE 54288
// r := 0 ;
54280: LD_ADDR_VAR 0 15
54284: PUSH
54285: LD_INT 0
54287: ST_TO_ADDR
// for j = r to 5 do
54288: LD_ADDR_VAR 0 10
54292: PUSH
54293: DOUBLE
54294: LD_VAR 0 15
54298: DEC
54299: ST_TO_ADDR
54300: LD_INT 5
54302: PUSH
54303: FOR_TO
54304: IFFALSE 54418
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54306: LD_ADDR_VAR 0 11
54310: PUSH
54311: LD_VAR 0 13
54315: PPUSH
54316: CALL_OW 250
54320: PPUSH
54321: LD_VAR 0 10
54325: PPUSH
54326: LD_INT 2
54328: PPUSH
54329: CALL_OW 272
54333: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54334: LD_ADDR_VAR 0 12
54338: PUSH
54339: LD_VAR 0 13
54343: PPUSH
54344: CALL_OW 251
54348: PPUSH
54349: LD_VAR 0 10
54353: PPUSH
54354: LD_INT 2
54356: PPUSH
54357: CALL_OW 273
54361: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54362: LD_VAR 0 11
54366: PPUSH
54367: LD_VAR 0 12
54371: PPUSH
54372: CALL_OW 488
54376: PUSH
54377: LD_VAR 0 11
54381: PPUSH
54382: LD_VAR 0 12
54386: PPUSH
54387: CALL_OW 428
54391: NOT
54392: AND
54393: IFFALSE 54416
// begin ComMoveXY ( tmp , _x , _y ) ;
54395: LD_VAR 0 13
54399: PPUSH
54400: LD_VAR 0 11
54404: PPUSH
54405: LD_VAR 0 12
54409: PPUSH
54410: CALL_OW 111
// break ;
54414: GO 54418
// end ; end ;
54416: GO 54303
54418: POP
54419: POP
// end ; end ;
54420: GO 53745
54422: POP
54423: POP
// end ;
54424: LD_VAR 0 8
54428: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54429: LD_INT 0
54431: PPUSH
// result := true ;
54432: LD_ADDR_VAR 0 3
54436: PUSH
54437: LD_INT 1
54439: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54440: LD_VAR 0 2
54444: PUSH
54445: LD_INT 24
54447: DOUBLE
54448: EQUAL
54449: IFTRUE 54459
54451: LD_INT 33
54453: DOUBLE
54454: EQUAL
54455: IFTRUE 54459
54457: GO 54484
54459: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54460: LD_ADDR_VAR 0 3
54464: PUSH
54465: LD_INT 32
54467: PPUSH
54468: LD_VAR 0 1
54472: PPUSH
54473: CALL_OW 321
54477: PUSH
54478: LD_INT 2
54480: EQUAL
54481: ST_TO_ADDR
54482: GO 54800
54484: LD_INT 20
54486: DOUBLE
54487: EQUAL
54488: IFTRUE 54492
54490: GO 54517
54492: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54493: LD_ADDR_VAR 0 3
54497: PUSH
54498: LD_INT 6
54500: PPUSH
54501: LD_VAR 0 1
54505: PPUSH
54506: CALL_OW 321
54510: PUSH
54511: LD_INT 2
54513: EQUAL
54514: ST_TO_ADDR
54515: GO 54800
54517: LD_INT 22
54519: DOUBLE
54520: EQUAL
54521: IFTRUE 54531
54523: LD_INT 36
54525: DOUBLE
54526: EQUAL
54527: IFTRUE 54531
54529: GO 54556
54531: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54532: LD_ADDR_VAR 0 3
54536: PUSH
54537: LD_INT 15
54539: PPUSH
54540: LD_VAR 0 1
54544: PPUSH
54545: CALL_OW 321
54549: PUSH
54550: LD_INT 2
54552: EQUAL
54553: ST_TO_ADDR
54554: GO 54800
54556: LD_INT 30
54558: DOUBLE
54559: EQUAL
54560: IFTRUE 54564
54562: GO 54589
54564: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54565: LD_ADDR_VAR 0 3
54569: PUSH
54570: LD_INT 20
54572: PPUSH
54573: LD_VAR 0 1
54577: PPUSH
54578: CALL_OW 321
54582: PUSH
54583: LD_INT 2
54585: EQUAL
54586: ST_TO_ADDR
54587: GO 54800
54589: LD_INT 28
54591: DOUBLE
54592: EQUAL
54593: IFTRUE 54603
54595: LD_INT 21
54597: DOUBLE
54598: EQUAL
54599: IFTRUE 54603
54601: GO 54628
54603: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54604: LD_ADDR_VAR 0 3
54608: PUSH
54609: LD_INT 21
54611: PPUSH
54612: LD_VAR 0 1
54616: PPUSH
54617: CALL_OW 321
54621: PUSH
54622: LD_INT 2
54624: EQUAL
54625: ST_TO_ADDR
54626: GO 54800
54628: LD_INT 16
54630: DOUBLE
54631: EQUAL
54632: IFTRUE 54636
54634: GO 54661
54636: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54637: LD_ADDR_VAR 0 3
54641: PUSH
54642: LD_INT 84
54644: PPUSH
54645: LD_VAR 0 1
54649: PPUSH
54650: CALL_OW 321
54654: PUSH
54655: LD_INT 2
54657: EQUAL
54658: ST_TO_ADDR
54659: GO 54800
54661: LD_INT 19
54663: DOUBLE
54664: EQUAL
54665: IFTRUE 54675
54667: LD_INT 23
54669: DOUBLE
54670: EQUAL
54671: IFTRUE 54675
54673: GO 54700
54675: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54676: LD_ADDR_VAR 0 3
54680: PUSH
54681: LD_INT 83
54683: PPUSH
54684: LD_VAR 0 1
54688: PPUSH
54689: CALL_OW 321
54693: PUSH
54694: LD_INT 2
54696: EQUAL
54697: ST_TO_ADDR
54698: GO 54800
54700: LD_INT 17
54702: DOUBLE
54703: EQUAL
54704: IFTRUE 54708
54706: GO 54733
54708: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54709: LD_ADDR_VAR 0 3
54713: PUSH
54714: LD_INT 39
54716: PPUSH
54717: LD_VAR 0 1
54721: PPUSH
54722: CALL_OW 321
54726: PUSH
54727: LD_INT 2
54729: EQUAL
54730: ST_TO_ADDR
54731: GO 54800
54733: LD_INT 18
54735: DOUBLE
54736: EQUAL
54737: IFTRUE 54741
54739: GO 54766
54741: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54742: LD_ADDR_VAR 0 3
54746: PUSH
54747: LD_INT 40
54749: PPUSH
54750: LD_VAR 0 1
54754: PPUSH
54755: CALL_OW 321
54759: PUSH
54760: LD_INT 2
54762: EQUAL
54763: ST_TO_ADDR
54764: GO 54800
54766: LD_INT 27
54768: DOUBLE
54769: EQUAL
54770: IFTRUE 54774
54772: GO 54799
54774: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54775: LD_ADDR_VAR 0 3
54779: PUSH
54780: LD_INT 35
54782: PPUSH
54783: LD_VAR 0 1
54787: PPUSH
54788: CALL_OW 321
54792: PUSH
54793: LD_INT 2
54795: EQUAL
54796: ST_TO_ADDR
54797: GO 54800
54799: POP
// end ;
54800: LD_VAR 0 3
54804: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54805: LD_INT 0
54807: PPUSH
54808: PPUSH
54809: PPUSH
54810: PPUSH
54811: PPUSH
54812: PPUSH
54813: PPUSH
54814: PPUSH
54815: PPUSH
54816: PPUSH
54817: PPUSH
// result := false ;
54818: LD_ADDR_VAR 0 6
54822: PUSH
54823: LD_INT 0
54825: ST_TO_ADDR
// if btype = b_depot then
54826: LD_VAR 0 2
54830: PUSH
54831: LD_INT 0
54833: EQUAL
54834: IFFALSE 54846
// begin result := true ;
54836: LD_ADDR_VAR 0 6
54840: PUSH
54841: LD_INT 1
54843: ST_TO_ADDR
// exit ;
54844: GO 55672
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54846: LD_VAR 0 1
54850: NOT
54851: PUSH
54852: LD_VAR 0 1
54856: PPUSH
54857: CALL_OW 266
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: IN
54872: NOT
54873: OR
54874: PUSH
54875: LD_VAR 0 2
54879: NOT
54880: OR
54881: PUSH
54882: LD_VAR 0 5
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: LD_INT 4
54901: PUSH
54902: LD_INT 5
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: IN
54913: NOT
54914: OR
54915: PUSH
54916: LD_VAR 0 3
54920: PPUSH
54921: LD_VAR 0 4
54925: PPUSH
54926: CALL_OW 488
54930: NOT
54931: OR
54932: IFFALSE 54936
// exit ;
54934: GO 55672
// side := GetSide ( depot ) ;
54936: LD_ADDR_VAR 0 9
54940: PUSH
54941: LD_VAR 0 1
54945: PPUSH
54946: CALL_OW 255
54950: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54951: LD_VAR 0 9
54955: PPUSH
54956: LD_VAR 0 2
54960: PPUSH
54961: CALL 54429 0 2
54965: NOT
54966: IFFALSE 54970
// exit ;
54968: GO 55672
// pom := GetBase ( depot ) ;
54970: LD_ADDR_VAR 0 10
54974: PUSH
54975: LD_VAR 0 1
54979: PPUSH
54980: CALL_OW 274
54984: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54985: LD_ADDR_VAR 0 11
54989: PUSH
54990: LD_VAR 0 2
54994: PPUSH
54995: LD_VAR 0 1
54999: PPUSH
55000: CALL_OW 248
55004: PPUSH
55005: CALL_OW 450
55009: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55010: LD_VAR 0 10
55014: PPUSH
55015: LD_INT 1
55017: PPUSH
55018: CALL_OW 275
55022: PUSH
55023: LD_VAR 0 11
55027: PUSH
55028: LD_INT 1
55030: ARRAY
55031: GREATEREQUAL
55032: PUSH
55033: LD_VAR 0 10
55037: PPUSH
55038: LD_INT 2
55040: PPUSH
55041: CALL_OW 275
55045: PUSH
55046: LD_VAR 0 11
55050: PUSH
55051: LD_INT 2
55053: ARRAY
55054: GREATEREQUAL
55055: AND
55056: PUSH
55057: LD_VAR 0 10
55061: PPUSH
55062: LD_INT 3
55064: PPUSH
55065: CALL_OW 275
55069: PUSH
55070: LD_VAR 0 11
55074: PUSH
55075: LD_INT 3
55077: ARRAY
55078: GREATEREQUAL
55079: AND
55080: NOT
55081: IFFALSE 55085
// exit ;
55083: GO 55672
// if GetBType ( depot ) = b_depot then
55085: LD_VAR 0 1
55089: PPUSH
55090: CALL_OW 266
55094: PUSH
55095: LD_INT 0
55097: EQUAL
55098: IFFALSE 55110
// dist := 28 else
55100: LD_ADDR_VAR 0 14
55104: PUSH
55105: LD_INT 28
55107: ST_TO_ADDR
55108: GO 55118
// dist := 36 ;
55110: LD_ADDR_VAR 0 14
55114: PUSH
55115: LD_INT 36
55117: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55118: LD_VAR 0 1
55122: PPUSH
55123: LD_VAR 0 3
55127: PPUSH
55128: LD_VAR 0 4
55132: PPUSH
55133: CALL_OW 297
55137: PUSH
55138: LD_VAR 0 14
55142: GREATER
55143: IFFALSE 55147
// exit ;
55145: GO 55672
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55147: LD_ADDR_VAR 0 12
55151: PUSH
55152: LD_VAR 0 2
55156: PPUSH
55157: LD_VAR 0 3
55161: PPUSH
55162: LD_VAR 0 4
55166: PPUSH
55167: LD_VAR 0 5
55171: PPUSH
55172: LD_VAR 0 1
55176: PPUSH
55177: CALL_OW 248
55181: PPUSH
55182: LD_INT 0
55184: PPUSH
55185: CALL 55677 0 6
55189: ST_TO_ADDR
// if not hexes then
55190: LD_VAR 0 12
55194: NOT
55195: IFFALSE 55199
// exit ;
55197: GO 55672
// hex := GetHexInfo ( x , y ) ;
55199: LD_ADDR_VAR 0 15
55203: PUSH
55204: LD_VAR 0 3
55208: PPUSH
55209: LD_VAR 0 4
55213: PPUSH
55214: CALL_OW 546
55218: ST_TO_ADDR
// if hex [ 1 ] then
55219: LD_VAR 0 15
55223: PUSH
55224: LD_INT 1
55226: ARRAY
55227: IFFALSE 55231
// exit ;
55229: GO 55672
// height := hex [ 2 ] ;
55231: LD_ADDR_VAR 0 13
55235: PUSH
55236: LD_VAR 0 15
55240: PUSH
55241: LD_INT 2
55243: ARRAY
55244: ST_TO_ADDR
// for i = 1 to hexes do
55245: LD_ADDR_VAR 0 7
55249: PUSH
55250: DOUBLE
55251: LD_INT 1
55253: DEC
55254: ST_TO_ADDR
55255: LD_VAR 0 12
55259: PUSH
55260: FOR_TO
55261: IFFALSE 55591
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55263: LD_VAR 0 12
55267: PUSH
55268: LD_VAR 0 7
55272: ARRAY
55273: PUSH
55274: LD_INT 1
55276: ARRAY
55277: PPUSH
55278: LD_VAR 0 12
55282: PUSH
55283: LD_VAR 0 7
55287: ARRAY
55288: PUSH
55289: LD_INT 2
55291: ARRAY
55292: PPUSH
55293: CALL_OW 488
55297: NOT
55298: PUSH
55299: LD_VAR 0 12
55303: PUSH
55304: LD_VAR 0 7
55308: ARRAY
55309: PUSH
55310: LD_INT 1
55312: ARRAY
55313: PPUSH
55314: LD_VAR 0 12
55318: PUSH
55319: LD_VAR 0 7
55323: ARRAY
55324: PUSH
55325: LD_INT 2
55327: ARRAY
55328: PPUSH
55329: CALL_OW 428
55333: PUSH
55334: LD_INT 0
55336: GREATER
55337: OR
55338: PUSH
55339: LD_VAR 0 12
55343: PUSH
55344: LD_VAR 0 7
55348: ARRAY
55349: PUSH
55350: LD_INT 1
55352: ARRAY
55353: PPUSH
55354: LD_VAR 0 12
55358: PUSH
55359: LD_VAR 0 7
55363: ARRAY
55364: PUSH
55365: LD_INT 2
55367: ARRAY
55368: PPUSH
55369: CALL_OW 351
55373: OR
55374: IFFALSE 55380
// exit ;
55376: POP
55377: POP
55378: GO 55672
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55380: LD_ADDR_VAR 0 8
55384: PUSH
55385: LD_VAR 0 12
55389: PUSH
55390: LD_VAR 0 7
55394: ARRAY
55395: PUSH
55396: LD_INT 1
55398: ARRAY
55399: PPUSH
55400: LD_VAR 0 12
55404: PUSH
55405: LD_VAR 0 7
55409: ARRAY
55410: PUSH
55411: LD_INT 2
55413: ARRAY
55414: PPUSH
55415: CALL_OW 546
55419: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55420: LD_VAR 0 8
55424: PUSH
55425: LD_INT 1
55427: ARRAY
55428: PUSH
55429: LD_VAR 0 8
55433: PUSH
55434: LD_INT 2
55436: ARRAY
55437: PUSH
55438: LD_VAR 0 13
55442: PUSH
55443: LD_INT 2
55445: PLUS
55446: GREATER
55447: OR
55448: PUSH
55449: LD_VAR 0 8
55453: PUSH
55454: LD_INT 2
55456: ARRAY
55457: PUSH
55458: LD_VAR 0 13
55462: PUSH
55463: LD_INT 2
55465: MINUS
55466: LESS
55467: OR
55468: PUSH
55469: LD_VAR 0 8
55473: PUSH
55474: LD_INT 3
55476: ARRAY
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 8
55483: PUSH
55484: LD_INT 9
55486: PUSH
55487: LD_INT 10
55489: PUSH
55490: LD_INT 11
55492: PUSH
55493: LD_INT 12
55495: PUSH
55496: LD_INT 13
55498: PUSH
55499: LD_INT 16
55501: PUSH
55502: LD_INT 17
55504: PUSH
55505: LD_INT 18
55507: PUSH
55508: LD_INT 19
55510: PUSH
55511: LD_INT 20
55513: PUSH
55514: LD_INT 21
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: IN
55532: NOT
55533: OR
55534: PUSH
55535: LD_VAR 0 8
55539: PUSH
55540: LD_INT 5
55542: ARRAY
55543: NOT
55544: OR
55545: PUSH
55546: LD_VAR 0 8
55550: PUSH
55551: LD_INT 6
55553: ARRAY
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: LD_INT 7
55563: PUSH
55564: LD_INT 9
55566: PUSH
55567: LD_INT 10
55569: PUSH
55570: LD_INT 11
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: IN
55581: NOT
55582: OR
55583: IFFALSE 55589
// exit ;
55585: POP
55586: POP
55587: GO 55672
// end ;
55589: GO 55260
55591: POP
55592: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55593: LD_VAR 0 9
55597: PPUSH
55598: LD_VAR 0 3
55602: PPUSH
55603: LD_VAR 0 4
55607: PPUSH
55608: LD_INT 20
55610: PPUSH
55611: CALL 47595 0 4
55615: PUSH
55616: LD_INT 4
55618: ARRAY
55619: IFFALSE 55623
// exit ;
55621: GO 55672
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55623: LD_VAR 0 2
55627: PUSH
55628: LD_INT 29
55630: PUSH
55631: LD_INT 30
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: IN
55638: PUSH
55639: LD_VAR 0 3
55643: PPUSH
55644: LD_VAR 0 4
55648: PPUSH
55649: LD_VAR 0 9
55653: PPUSH
55654: CALL_OW 440
55658: NOT
55659: AND
55660: IFFALSE 55664
// exit ;
55662: GO 55672
// result := true ;
55664: LD_ADDR_VAR 0 6
55668: PUSH
55669: LD_INT 1
55671: ST_TO_ADDR
// end ;
55672: LD_VAR 0 6
55676: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55677: LD_INT 0
55679: PPUSH
55680: PPUSH
55681: PPUSH
55682: PPUSH
55683: PPUSH
55684: PPUSH
55685: PPUSH
55686: PPUSH
55687: PPUSH
55688: PPUSH
55689: PPUSH
55690: PPUSH
55691: PPUSH
55692: PPUSH
55693: PPUSH
55694: PPUSH
55695: PPUSH
55696: PPUSH
55697: PPUSH
55698: PPUSH
55699: PPUSH
55700: PPUSH
55701: PPUSH
55702: PPUSH
55703: PPUSH
55704: PPUSH
55705: PPUSH
55706: PPUSH
55707: PPUSH
55708: PPUSH
55709: PPUSH
55710: PPUSH
55711: PPUSH
55712: PPUSH
55713: PPUSH
55714: PPUSH
55715: PPUSH
55716: PPUSH
55717: PPUSH
55718: PPUSH
55719: PPUSH
55720: PPUSH
55721: PPUSH
55722: PPUSH
55723: PPUSH
55724: PPUSH
55725: PPUSH
55726: PPUSH
55727: PPUSH
55728: PPUSH
55729: PPUSH
55730: PPUSH
55731: PPUSH
55732: PPUSH
55733: PPUSH
55734: PPUSH
55735: PPUSH
55736: PPUSH
// result = [ ] ;
55737: LD_ADDR_VAR 0 7
55741: PUSH
55742: EMPTY
55743: ST_TO_ADDR
// temp_list = [ ] ;
55744: LD_ADDR_VAR 0 9
55748: PUSH
55749: EMPTY
55750: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55751: LD_VAR 0 4
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 2
55764: PUSH
55765: LD_INT 3
55767: PUSH
55768: LD_INT 4
55770: PUSH
55771: LD_INT 5
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: IN
55782: NOT
55783: PUSH
55784: LD_VAR 0 1
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: IN
55799: PUSH
55800: LD_VAR 0 5
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: LD_INT 3
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: LIST
55818: IN
55819: NOT
55820: AND
55821: OR
55822: IFFALSE 55826
// exit ;
55824: GO 74217
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55826: LD_VAR 0 1
55830: PUSH
55831: LD_INT 6
55833: PUSH
55834: LD_INT 7
55836: PUSH
55837: LD_INT 8
55839: PUSH
55840: LD_INT 13
55842: PUSH
55843: LD_INT 12
55845: PUSH
55846: LD_INT 15
55848: PUSH
55849: LD_INT 11
55851: PUSH
55852: LD_INT 14
55854: PUSH
55855: LD_INT 10
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: IN
55869: IFFALSE 55879
// btype = b_lab ;
55871: LD_ADDR_VAR 0 1
55875: PUSH
55876: LD_INT 6
55878: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55879: LD_VAR 0 6
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: LIST
55897: IN
55898: NOT
55899: PUSH
55900: LD_VAR 0 1
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: LD_INT 6
55919: PUSH
55920: LD_INT 36
55922: PUSH
55923: LD_INT 4
55925: PUSH
55926: LD_INT 5
55928: PUSH
55929: LD_INT 31
55931: PUSH
55932: LD_INT 32
55934: PUSH
55935: LD_INT 33
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: IN
55951: NOT
55952: PUSH
55953: LD_VAR 0 6
55957: PUSH
55958: LD_INT 1
55960: EQUAL
55961: AND
55962: OR
55963: PUSH
55964: LD_VAR 0 1
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: LD_INT 3
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: IN
55979: NOT
55980: PUSH
55981: LD_VAR 0 6
55985: PUSH
55986: LD_INT 2
55988: EQUAL
55989: AND
55990: OR
55991: IFFALSE 56001
// mode = 0 ;
55993: LD_ADDR_VAR 0 6
55997: PUSH
55998: LD_INT 0
56000: ST_TO_ADDR
// case mode of 0 :
56001: LD_VAR 0 6
56005: PUSH
56006: LD_INT 0
56008: DOUBLE
56009: EQUAL
56010: IFTRUE 56014
56012: GO 67467
56014: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56015: LD_ADDR_VAR 0 11
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: LD_INT 2
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 2
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 3
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56208: LD_ADDR_VAR 0 12
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 2
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: NEG
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 2
56354: NEG
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 3
56365: NEG
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 3
56376: NEG
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56404: LD_ADDR_VAR 0 13
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 3
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 3
56563: NEG
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 3
56575: NEG
56576: PUSH
56577: LD_INT 3
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56603: LD_ADDR_VAR 0 14
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 2
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 3
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 3
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56799: LD_ADDR_VAR 0 15
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 3
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56992: LD_ADDR_VAR 0 16
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 3
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 3
57149: PUSH
57150: LD_INT 3
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: LD_INT 3
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57185: LD_ADDR_VAR 0 17
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 2
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 2
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 2
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57415: LD_ADDR_VAR 0 18
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: LD_INT 2
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 2
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 2
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: NEG
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57645: LD_ADDR_VAR 0 19
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 2
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: NEG
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: NEG
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57875: LD_ADDR_VAR 0 20
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 2
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: LD_INT 2
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: LD_INT 2
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58105: LD_ADDR_VAR 0 21
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 2
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 2
58220: PUSH
58221: LD_INT 0
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: LD_INT 2
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: LD_INT 2
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 2
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 2
58292: NEG
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: LD_INT 2
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58335: LD_ADDR_VAR 0 22
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: LD_INT 2
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: LD_INT 2
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: LD_INT 2
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: LD_INT 2
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58565: LD_ADDR_VAR 0 23
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 2
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: LD_INT 2
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 2
58752: NEG
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: LD_INT 3
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: LD_INT 3
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58845: LD_ADDR_VAR 0 24
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 2
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: NEG
59045: PUSH
59046: LD_INT 2
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 2
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 3
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 3
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59121: LD_ADDR_VAR 0 25
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 2
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: NEG
59321: PUSH
59322: LD_INT 2
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 3
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: LD_INT 3
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: LD_INT 3
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59395: LD_ADDR_VAR 0 26
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: LD_INT 2
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: LD_INT 1
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: LD_INT 1
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 2
59530: PUSH
59531: LD_INT 2
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 2
59606: PUSH
59607: LD_INT 3
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 3
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59671: LD_ADDR_VAR 0 27
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 2
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: LD_INT 2
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 1
59836: NEG
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 2
59870: NEG
59871: PUSH
59872: LD_INT 2
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 2
59893: NEG
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 3
59904: NEG
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 3
59916: NEG
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59951: LD_ADDR_VAR 0 28
59955: PUSH
59956: LD_INT 0
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: PUSH
60087: LD_INT 2
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: LD_INT 2
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: LD_INT 2
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: LD_INT 1
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 3
60186: NEG
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 3
60198: NEG
60199: PUSH
60200: LD_INT 2
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60233: LD_ADDR_VAR 0 29
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 1
60291: NEG
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 2
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 2
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: LD_INT 2
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: LD_INT 3
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 2
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 3
60477: NEG
60478: PUSH
60479: LD_INT 2
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60512: LD_ADDR_VAR 0 30
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: LD_INT 2
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 2
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 2
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: LD_INT 1
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: LD_INT 3
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: LD_INT 2
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 3
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 2
60734: PUSH
60735: LD_INT 3
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 2
60744: NEG
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 3
60755: NEG
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60790: LD_ADDR_VAR 0 31
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: LD_INT 2
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 2
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 2
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 2
60914: PUSH
60915: LD_INT 2
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: NEG
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 2
60955: NEG
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: LD_INT 2
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 2
60979: NEG
60980: PUSH
60981: LD_INT 3
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: LD_INT 3
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61068: LD_ADDR_VAR 0 32
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: LD_INT 2
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: NEG
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: LD_INT 3
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 3
61280: PUSH
61281: LD_INT 2
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: LD_INT 3
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 3
61311: NEG
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61346: LD_ADDR_VAR 0 33
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 1
61404: NEG
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: LD_INT 2
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 2
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 2
61460: PUSH
61461: LD_INT 1
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: LD_INT 2
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: LD_INT 2
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 1
61490: NEG
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: LD_INT 2
61528: NEG
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 2
61536: NEG
61537: PUSH
61538: LD_INT 3
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 2
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: LD_INT 3
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 3
61590: NEG
61591: PUSH
61592: LD_INT 2
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61625: LD_ADDR_VAR 0 34
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: LD_INT 2
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 2
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: LD_INT 2
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: LD_INT 2
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 2
61781: NEG
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 2
61792: NEG
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: LD_INT 2
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: PUSH
61818: LD_INT 3
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 3
61839: PUSH
61840: LD_INT 2
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 2
61849: PUSH
61850: LD_INT 3
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 2
61859: NEG
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 3
61870: NEG
61871: PUSH
61872: LD_INT 1
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61905: LD_ADDR_VAR 0 35
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: LD_INT 1
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 1
61943: PUSH
61944: LD_INT 1
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: NEG
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 2
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62017: LD_ADDR_VAR 0 36
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 2
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: LD_INT 2
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62129: LD_ADDR_VAR 0 37
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62241: LD_ADDR_VAR 0 38
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: LD_INT 1
62261: NEG
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: LD_INT 1
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 2
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 2
62332: NEG
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62353: LD_ADDR_VAR 0 39
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: NEG
62435: PUSH
62436: LD_INT 2
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: LD_INT 2
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62465: LD_ADDR_VAR 0 40
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 0
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: LD_INT 1
62485: NEG
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: NEG
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62577: LD_ADDR_VAR 0 41
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: LD_INT 1
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 0
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 1
62635: NEG
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: LD_INT 1
62650: NEG
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: LD_INT 2
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 2
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: LD_INT 2
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: LD_INT 2
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: NEG
62733: PUSH
62734: LD_INT 0
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 2
62743: NEG
62744: PUSH
62745: LD_INT 1
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 2
62755: NEG
62756: PUSH
62757: LD_INT 2
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 2
62767: NEG
62768: PUSH
62769: LD_INT 3
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 2
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 3
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 3
62800: PUSH
62801: LD_INT 1
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 3
62810: PUSH
62811: LD_INT 2
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 3
62820: PUSH
62821: LD_INT 3
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 2
62830: PUSH
62831: LD_INT 3
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 2
62840: NEG
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 3
62851: NEG
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 3
62862: NEG
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 3
62874: NEG
62875: PUSH
62876: LD_INT 2
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 3
62886: NEG
62887: PUSH
62888: LD_INT 3
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62927: LD_ADDR_VAR 0 42
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 1
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: LD_INT 1
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 1
62996: NEG
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: LD_INT 2
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 2
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: LD_INT 1
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: LD_INT 1
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 2
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: LD_INT 2
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 2
63093: NEG
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 2
63105: NEG
63106: PUSH
63107: LD_INT 2
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: LD_INT 3
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: LD_INT 3
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: LD_INT 3
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: PUSH
63153: LD_INT 2
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 3
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 3
63173: PUSH
63174: LD_INT 3
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 3
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: LD_INT 3
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: NEG
63214: PUSH
63215: LD_INT 2
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 3
63224: NEG
63225: PUSH
63226: LD_INT 2
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 3
63236: NEG
63237: PUSH
63238: LD_INT 3
63240: NEG
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63277: LD_ADDR_VAR 0 43
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: LD_INT 0
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: NEG
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: LD_INT 2
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: LD_INT 2
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 1
63381: PUSH
63382: LD_INT 1
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 2
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: LD_INT 2
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: NEG
63433: PUSH
63434: LD_INT 1
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 2
63443: NEG
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: NEG
63455: PUSH
63456: LD_INT 1
63458: NEG
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: LD_INT 3
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: LD_INT 3
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: LD_INT 2
63492: NEG
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 2
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 3
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 1
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: LD_INT 3
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 1
63551: NEG
63552: PUSH
63553: LD_INT 2
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 2
63562: NEG
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 3
63573: NEG
63574: PUSH
63575: LD_INT 0
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 3
63584: NEG
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63625: LD_ADDR_VAR 0 44
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: LD_INT 1
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: NEG
63707: PUSH
63708: LD_INT 2
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: LD_INT 0
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: LD_INT 2
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: LD_INT 2
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 2
63780: NEG
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 2
63791: NEG
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 2
63803: NEG
63804: PUSH
63805: LD_INT 2
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: LD_INT 3
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 2
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 3
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 3
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 3
63858: PUSH
63859: LD_INT 2
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 3
63868: PUSH
63869: LD_INT 3
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: PUSH
63879: LD_INT 3
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 2
63888: NEG
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 3
63899: NEG
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 3
63910: NEG
63911: PUSH
63912: LD_INT 1
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 3
63922: NEG
63923: PUSH
63924: LD_INT 2
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 3
63934: NEG
63935: PUSH
63936: LD_INT 3
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63975: LD_ADDR_VAR 0 45
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 0
64023: PUSH
64024: LD_INT 1
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: NEG
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: LD_INT 2
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: LD_INT 2
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: LD_INT 1
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 2
64090: PUSH
64091: LD_INT 1
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: LD_INT 2
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: PUSH
64111: LD_INT 2
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 2
64141: NEG
64142: PUSH
64143: LD_INT 1
64145: NEG
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 2
64153: NEG
64154: PUSH
64155: LD_INT 2
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 2
64165: NEG
64166: PUSH
64167: LD_INT 3
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: LD_INT 3
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: LD_INT 3
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: PUSH
64201: LD_INT 2
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 3
64211: PUSH
64212: LD_INT 2
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 3
64221: PUSH
64222: LD_INT 3
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 2
64231: PUSH
64232: LD_INT 3
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 1
64241: PUSH
64242: LD_INT 3
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: LD_INT 3
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: PUSH
64263: LD_INT 2
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 3
64272: NEG
64273: PUSH
64274: LD_INT 2
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 3
64284: NEG
64285: PUSH
64286: LD_INT 3
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64325: LD_ADDR_VAR 0 46
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 1
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: NEG
64407: PUSH
64408: LD_INT 2
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: LD_INT 2
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 2
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 2
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: LD_INT 2
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: LD_INT 2
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 1
64480: NEG
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 2
64491: NEG
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 2
64502: NEG
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 1
64514: NEG
64515: PUSH
64516: LD_INT 3
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: LD_INT 3
64529: NEG
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: LD_INT 2
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 2
64548: PUSH
64549: LD_INT 1
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 3
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 3
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: LD_INT 3
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: LD_INT 3
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 1
64599: NEG
64600: PUSH
64601: LD_INT 2
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 2
64610: NEG
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 3
64621: NEG
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 3
64632: NEG
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64673: LD_ADDR_VAR 0 47
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: LD_INT 1
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 1
64742: NEG
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: LD_INT 2
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: LD_INT 2
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 2
64788: NEG
64789: PUSH
64790: LD_INT 1
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 2
64800: NEG
64801: PUSH
64802: LD_INT 2
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64824: LD_ADDR_VAR 0 48
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 1
64862: PUSH
64863: LD_INT 1
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 1
64882: NEG
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: PUSH
64907: LD_INT 2
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: LD_INT 2
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 2
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 2
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64971: LD_ADDR_VAR 0 49
64975: PUSH
64976: LD_INT 0
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: LD_INT 1
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 1
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: LD_INT 1
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: LD_INT 1
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 1
65029: NEG
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: PUSH
65042: LD_INT 1
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 1
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 2
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 2
65073: PUSH
65074: LD_INT 1
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 2
65083: PUSH
65084: LD_INT 2
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: LD_INT 2
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65115: LD_ADDR_VAR 0 50
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: LD_INT 1
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: LD_INT 1
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 2
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 2
65206: PUSH
65207: LD_INT 2
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: LD_INT 2
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65259: LD_ADDR_VAR 0 51
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 1
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 1
65297: PUSH
65298: LD_INT 1
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 1
65317: NEG
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 1
65328: NEG
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 1
65340: PUSH
65341: LD_INT 2
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: LD_INT 2
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: NEG
65361: PUSH
65362: LD_INT 1
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 2
65371: NEG
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 2
65382: NEG
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65406: LD_ADDR_VAR 0 52
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: LD_INT 0
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: LD_INT 1
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 1
65444: PUSH
65445: LD_INT 1
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: LD_INT 1
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 1
65464: NEG
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 1
65475: NEG
65476: PUSH
65477: LD_INT 1
65479: NEG
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 1
65487: NEG
65488: PUSH
65489: LD_INT 2
65491: NEG
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: LD_INT 1
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 2
65510: NEG
65511: PUSH
65512: LD_INT 0
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 2
65521: NEG
65522: PUSH
65523: LD_INT 1
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 2
65533: NEG
65534: PUSH
65535: LD_INT 2
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65557: LD_ADDR_VAR 0 53
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: LD_INT 0
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 1
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 1
65595: PUSH
65596: LD_INT 1
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: NEG
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: NEG
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: LD_INT 2
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: LD_INT 2
65653: NEG
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: LD_INT 1
65664: NEG
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 2
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 2
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 2
65692: PUSH
65693: LD_INT 2
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 1
65702: PUSH
65703: LD_INT 2
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: LD_INT 2
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 1
65722: NEG
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 2
65733: NEG
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 2
65744: NEG
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 2
65756: NEG
65757: PUSH
65758: LD_INT 2
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65787: LD_ADDR_VAR 0 54
65791: PUSH
65792: LD_INT 0
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 0
65804: PUSH
65805: LD_INT 1
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 1
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 1
65825: PUSH
65826: LD_INT 1
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 1
65845: NEG
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 1
65856: NEG
65857: PUSH
65858: LD_INT 1
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: LD_INT 2
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 0
65880: PUSH
65881: LD_INT 2
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 1
65891: PUSH
65892: LD_INT 1
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 2
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 2
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 2
65922: PUSH
65923: LD_INT 2
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: LD_INT 2
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: LD_INT 2
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: LD_INT 1
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 2
65963: NEG
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 2
65974: NEG
65975: PUSH
65976: LD_INT 1
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 2
65986: NEG
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66017: LD_ADDR_VAR 0 55
66021: PUSH
66022: LD_INT 0
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: LD_INT 1
66037: NEG
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 1
66045: PUSH
66046: LD_INT 0
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 1
66055: PUSH
66056: LD_INT 1
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: LD_INT 1
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 1
66086: NEG
66087: PUSH
66088: LD_INT 1
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 1
66098: NEG
66099: PUSH
66100: LD_INT 2
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 0
66110: PUSH
66111: LD_INT 2
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 1
66121: PUSH
66122: LD_INT 1
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 2
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 2
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 2
66152: PUSH
66153: LD_INT 2
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: LD_INT 2
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_INT 2
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 1
66182: NEG
66183: PUSH
66184: LD_INT 1
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 2
66193: NEG
66194: PUSH
66195: LD_INT 0
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 2
66204: NEG
66205: PUSH
66206: LD_INT 1
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 2
66216: NEG
66217: PUSH
66218: LD_INT 2
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66247: LD_ADDR_VAR 0 56
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: LD_INT 0
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 1
66285: PUSH
66286: LD_INT 1
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: LD_INT 1
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 1
66305: NEG
66306: PUSH
66307: LD_INT 0
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 1
66316: NEG
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: LD_INT 2
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 1
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 2
66362: PUSH
66363: LD_INT 0
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 2
66372: PUSH
66373: LD_INT 1
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 2
66382: PUSH
66383: LD_INT 2
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: LD_INT 2
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 1
66412: NEG
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 2
66423: NEG
66424: PUSH
66425: LD_INT 0
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 2
66434: NEG
66435: PUSH
66436: LD_INT 1
66438: NEG
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 2
66446: NEG
66447: PUSH
66448: LD_INT 2
66450: NEG
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66477: LD_ADDR_VAR 0 57
66481: PUSH
66482: LD_INT 0
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 0
66494: PUSH
66495: LD_INT 1
66497: NEG
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 1
66505: PUSH
66506: LD_INT 0
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 1
66515: PUSH
66516: LD_INT 1
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: LD_INT 1
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 1
66535: NEG
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 1
66546: NEG
66547: PUSH
66548: LD_INT 1
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: LD_INT 2
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: LD_INT 2
66573: NEG
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 1
66581: PUSH
66582: LD_INT 1
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 2
66592: PUSH
66593: LD_INT 0
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 2
66602: PUSH
66603: LD_INT 1
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 2
66612: PUSH
66613: LD_INT 2
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: LD_INT 2
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: LD_INT 2
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 1
66642: NEG
66643: PUSH
66644: LD_INT 1
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 2
66653: NEG
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 2
66664: NEG
66665: PUSH
66666: LD_INT 1
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 2
66676: NEG
66677: PUSH
66678: LD_INT 2
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66707: LD_ADDR_VAR 0 58
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 0
66724: PUSH
66725: LD_INT 1
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 1
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 1
66745: PUSH
66746: LD_INT 1
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 0
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 1
66765: NEG
66766: PUSH
66767: LD_INT 0
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 1
66776: NEG
66777: PUSH
66778: LD_INT 1
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 1
66788: NEG
66789: PUSH
66790: LD_INT 2
66792: NEG
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: LD_INT 2
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: LD_INT 1
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 2
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 2
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 2
66842: PUSH
66843: LD_INT 2
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: LD_INT 2
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 0
66862: PUSH
66863: LD_INT 2
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 1
66872: NEG
66873: PUSH
66874: LD_INT 1
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 2
66883: NEG
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 2
66894: NEG
66895: PUSH
66896: LD_INT 1
66898: NEG
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 2
66906: NEG
66907: PUSH
66908: LD_INT 2
66910: NEG
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66937: LD_ADDR_VAR 0 59
66941: PUSH
66942: LD_INT 0
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 0
66954: PUSH
66955: LD_INT 1
66957: NEG
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 1
66965: PUSH
66966: LD_INT 0
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 1
66975: PUSH
66976: LD_INT 1
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 0
66985: PUSH
66986: LD_INT 1
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 1
66995: NEG
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 1
67006: NEG
67007: PUSH
67008: LD_INT 1
67010: NEG
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67025: LD_ADDR_VAR 0 60
67029: PUSH
67030: LD_INT 0
67032: PUSH
67033: LD_INT 0
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 0
67042: PUSH
67043: LD_INT 1
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 1
67053: PUSH
67054: LD_INT 0
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 1
67063: PUSH
67064: LD_INT 1
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 0
67073: PUSH
67074: LD_INT 1
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 1
67083: NEG
67084: PUSH
67085: LD_INT 0
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 1
67094: NEG
67095: PUSH
67096: LD_INT 1
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67113: LD_ADDR_VAR 0 61
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: LD_INT 0
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: LD_INT 1
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: LD_INT 0
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 1
67151: PUSH
67152: LD_INT 1
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 0
67161: PUSH
67162: LD_INT 1
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 1
67171: NEG
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: LD_INT 1
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67201: LD_ADDR_VAR 0 62
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: LD_INT 0
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 0
67218: PUSH
67219: LD_INT 1
67221: NEG
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 1
67229: PUSH
67230: LD_INT 0
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 1
67239: PUSH
67240: LD_INT 1
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 0
67249: PUSH
67250: LD_INT 1
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 1
67259: NEG
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: LD_INT 1
67274: NEG
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67289: LD_ADDR_VAR 0 63
67293: PUSH
67294: LD_INT 0
67296: PUSH
67297: LD_INT 0
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: LD_INT 1
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 1
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 1
67327: PUSH
67328: LD_INT 1
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: LD_INT 1
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 1
67347: NEG
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 1
67358: NEG
67359: PUSH
67360: LD_INT 1
67362: NEG
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67377: LD_ADDR_VAR 0 64
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: LD_INT 0
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 0
67394: PUSH
67395: LD_INT 1
67397: NEG
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 1
67405: PUSH
67406: LD_INT 0
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 1
67415: PUSH
67416: LD_INT 1
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 0
67425: PUSH
67426: LD_INT 1
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 1
67435: NEG
67436: PUSH
67437: LD_INT 0
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 1
67446: NEG
67447: PUSH
67448: LD_INT 1
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: ST_TO_ADDR
// end ; 1 :
67465: GO 73362
67467: LD_INT 1
67469: DOUBLE
67470: EQUAL
67471: IFTRUE 67475
67473: GO 70098
67475: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67476: LD_ADDR_VAR 0 11
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: LD_INT 3
67487: NEG
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 0
67495: PUSH
67496: LD_INT 3
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 1
67506: PUSH
67507: LD_INT 2
67509: NEG
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: LIST
67519: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67520: LD_ADDR_VAR 0 12
67524: PUSH
67525: LD_INT 2
67527: PUSH
67528: LD_INT 1
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 3
67538: PUSH
67539: LD_INT 0
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 3
67548: PUSH
67549: LD_INT 1
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: LIST
67560: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67561: LD_ADDR_VAR 0 13
67565: PUSH
67566: LD_INT 3
67568: PUSH
67569: LD_INT 2
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 3
67578: PUSH
67579: LD_INT 3
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 2
67588: PUSH
67589: LD_INT 3
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: LIST
67600: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67601: LD_ADDR_VAR 0 14
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: LD_INT 3
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: LD_INT 3
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: LD_INT 2
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: LIST
67641: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67642: LD_ADDR_VAR 0 15
67646: PUSH
67647: LD_INT 2
67649: NEG
67650: PUSH
67651: LD_INT 1
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 3
67660: NEG
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 3
67671: NEG
67672: PUSH
67673: LD_INT 1
67675: NEG
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: LIST
67685: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67686: LD_ADDR_VAR 0 16
67690: PUSH
67691: LD_INT 2
67693: NEG
67694: PUSH
67695: LD_INT 3
67697: NEG
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 3
67705: NEG
67706: PUSH
67707: LD_INT 2
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 3
67717: NEG
67718: PUSH
67719: LD_INT 3
67721: NEG
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: LIST
67731: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67732: LD_ADDR_VAR 0 17
67736: PUSH
67737: LD_INT 1
67739: NEG
67740: PUSH
67741: LD_INT 3
67743: NEG
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 0
67751: PUSH
67752: LD_INT 3
67754: NEG
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 1
67762: PUSH
67763: LD_INT 2
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: LIST
67775: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67776: LD_ADDR_VAR 0 18
67780: PUSH
67781: LD_INT 2
67783: PUSH
67784: LD_INT 1
67786: NEG
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 3
67794: PUSH
67795: LD_INT 0
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 3
67804: PUSH
67805: LD_INT 1
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: LIST
67816: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67817: LD_ADDR_VAR 0 19
67821: PUSH
67822: LD_INT 3
67824: PUSH
67825: LD_INT 2
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 3
67834: PUSH
67835: LD_INT 3
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 2
67844: PUSH
67845: LD_INT 3
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: LIST
67856: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67857: LD_ADDR_VAR 0 20
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: LD_INT 3
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: LD_INT 3
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 1
67884: NEG
67885: PUSH
67886: LD_INT 2
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: LIST
67897: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67898: LD_ADDR_VAR 0 21
67902: PUSH
67903: LD_INT 2
67905: NEG
67906: PUSH
67907: LD_INT 1
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 3
67916: NEG
67917: PUSH
67918: LD_INT 0
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 3
67927: NEG
67928: PUSH
67929: LD_INT 1
67931: NEG
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: LIST
67941: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67942: LD_ADDR_VAR 0 22
67946: PUSH
67947: LD_INT 2
67949: NEG
67950: PUSH
67951: LD_INT 3
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 3
67961: NEG
67962: PUSH
67963: LD_INT 2
67965: NEG
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 3
67973: NEG
67974: PUSH
67975: LD_INT 3
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: LIST
67987: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67988: LD_ADDR_VAR 0 23
67992: PUSH
67993: LD_INT 0
67995: PUSH
67996: LD_INT 3
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 1
68006: NEG
68007: PUSH
68008: LD_INT 4
68010: NEG
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 1
68018: PUSH
68019: LD_INT 3
68021: NEG
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: LIST
68031: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68032: LD_ADDR_VAR 0 24
68036: PUSH
68037: LD_INT 3
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 3
68049: PUSH
68050: LD_INT 1
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 4
68060: PUSH
68061: LD_INT 1
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: LIST
68072: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68073: LD_ADDR_VAR 0 25
68077: PUSH
68078: LD_INT 3
68080: PUSH
68081: LD_INT 3
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 4
68090: PUSH
68091: LD_INT 3
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 3
68100: PUSH
68101: LD_INT 4
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: LIST
68112: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68113: LD_ADDR_VAR 0 26
68117: PUSH
68118: LD_INT 0
68120: PUSH
68121: LD_INT 3
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 1
68130: PUSH
68131: LD_INT 4
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 1
68140: NEG
68141: PUSH
68142: LD_INT 3
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: LIST
68153: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68154: LD_ADDR_VAR 0 27
68158: PUSH
68159: LD_INT 3
68161: NEG
68162: PUSH
68163: LD_INT 0
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 3
68172: NEG
68173: PUSH
68174: LD_INT 1
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 4
68183: NEG
68184: PUSH
68185: LD_INT 1
68187: NEG
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: LIST
68197: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68198: LD_ADDR_VAR 0 28
68202: PUSH
68203: LD_INT 3
68205: NEG
68206: PUSH
68207: LD_INT 3
68209: NEG
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 3
68217: NEG
68218: PUSH
68219: LD_INT 4
68221: NEG
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 4
68229: NEG
68230: PUSH
68231: LD_INT 3
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: LIST
68243: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68244: LD_ADDR_VAR 0 29
68248: PUSH
68249: LD_INT 1
68251: NEG
68252: PUSH
68253: LD_INT 3
68255: NEG
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 0
68263: PUSH
68264: LD_INT 3
68266: NEG
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 1
68274: PUSH
68275: LD_INT 2
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 1
68285: NEG
68286: PUSH
68287: LD_INT 4
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: LD_INT 4
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 1
68308: PUSH
68309: LD_INT 3
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 1
68319: NEG
68320: PUSH
68321: LD_INT 5
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: LD_INT 5
68334: NEG
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 1
68342: PUSH
68343: LD_INT 4
68345: NEG
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 1
68353: NEG
68354: PUSH
68355: LD_INT 6
68357: NEG
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 0
68365: PUSH
68366: LD_INT 6
68368: NEG
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 1
68376: PUSH
68377: LD_INT 5
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68399: LD_ADDR_VAR 0 30
68403: PUSH
68404: LD_INT 2
68406: PUSH
68407: LD_INT 1
68409: NEG
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 3
68417: PUSH
68418: LD_INT 0
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 3
68427: PUSH
68428: LD_INT 1
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 3
68437: PUSH
68438: LD_INT 1
68440: NEG
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 4
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 4
68458: PUSH
68459: LD_INT 1
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 4
68468: PUSH
68469: LD_INT 1
68471: NEG
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 5
68479: PUSH
68480: LD_INT 0
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 5
68489: PUSH
68490: LD_INT 1
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 5
68499: PUSH
68500: LD_INT 1
68502: NEG
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 6
68510: PUSH
68511: LD_INT 0
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 6
68520: PUSH
68521: LD_INT 1
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68542: LD_ADDR_VAR 0 31
68546: PUSH
68547: LD_INT 3
68549: PUSH
68550: LD_INT 2
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 3
68559: PUSH
68560: LD_INT 3
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 2
68569: PUSH
68570: LD_INT 3
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 4
68579: PUSH
68580: LD_INT 3
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 4
68589: PUSH
68590: LD_INT 4
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 3
68599: PUSH
68600: LD_INT 4
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 5
68609: PUSH
68610: LD_INT 4
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 5
68619: PUSH
68620: LD_INT 5
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 4
68629: PUSH
68630: LD_INT 5
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 6
68639: PUSH
68640: LD_INT 5
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 6
68649: PUSH
68650: LD_INT 6
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 5
68659: PUSH
68660: LD_INT 6
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68681: LD_ADDR_VAR 0 32
68685: PUSH
68686: LD_INT 1
68688: PUSH
68689: LD_INT 3
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 0
68698: PUSH
68699: LD_INT 3
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 1
68708: NEG
68709: PUSH
68710: LD_INT 2
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 1
68719: PUSH
68720: LD_INT 4
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 0
68729: PUSH
68730: LD_INT 4
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 1
68739: NEG
68740: PUSH
68741: LD_INT 3
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 1
68750: PUSH
68751: LD_INT 5
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 0
68760: PUSH
68761: LD_INT 5
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 1
68770: NEG
68771: PUSH
68772: LD_INT 4
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 1
68781: PUSH
68782: LD_INT 6
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 0
68791: PUSH
68792: LD_INT 6
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 1
68801: NEG
68802: PUSH
68803: LD_INT 5
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68824: LD_ADDR_VAR 0 33
68828: PUSH
68829: LD_INT 2
68831: NEG
68832: PUSH
68833: LD_INT 1
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 3
68842: NEG
68843: PUSH
68844: LD_INT 0
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 3
68853: NEG
68854: PUSH
68855: LD_INT 1
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 3
68865: NEG
68866: PUSH
68867: LD_INT 1
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 4
68876: NEG
68877: PUSH
68878: LD_INT 0
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 4
68887: NEG
68888: PUSH
68889: LD_INT 1
68891: NEG
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 4
68899: NEG
68900: PUSH
68901: LD_INT 1
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 5
68910: NEG
68911: PUSH
68912: LD_INT 0
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 5
68921: NEG
68922: PUSH
68923: LD_INT 1
68925: NEG
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 5
68933: NEG
68934: PUSH
68935: LD_INT 1
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 6
68944: NEG
68945: PUSH
68946: LD_INT 0
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 6
68955: NEG
68956: PUSH
68957: LD_INT 1
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68979: LD_ADDR_VAR 0 34
68983: PUSH
68984: LD_INT 2
68986: NEG
68987: PUSH
68988: LD_INT 3
68990: NEG
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 3
68998: NEG
68999: PUSH
69000: LD_INT 2
69002: NEG
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 3
69010: NEG
69011: PUSH
69012: LD_INT 3
69014: NEG
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 3
69022: NEG
69023: PUSH
69024: LD_INT 4
69026: NEG
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 4
69034: NEG
69035: PUSH
69036: LD_INT 3
69038: NEG
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 4
69046: NEG
69047: PUSH
69048: LD_INT 4
69050: NEG
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 4
69058: NEG
69059: PUSH
69060: LD_INT 5
69062: NEG
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 5
69070: NEG
69071: PUSH
69072: LD_INT 4
69074: NEG
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 5
69082: NEG
69083: PUSH
69084: LD_INT 5
69086: NEG
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 5
69094: NEG
69095: PUSH
69096: LD_INT 6
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 6
69106: NEG
69107: PUSH
69108: LD_INT 5
69110: NEG
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 6
69118: NEG
69119: PUSH
69120: LD_INT 6
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69142: LD_ADDR_VAR 0 41
69146: PUSH
69147: LD_INT 0
69149: PUSH
69150: LD_INT 2
69152: NEG
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 1
69160: NEG
69161: PUSH
69162: LD_INT 3
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 1
69172: PUSH
69173: LD_INT 2
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: LIST
69185: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69186: LD_ADDR_VAR 0 42
69190: PUSH
69191: LD_INT 2
69193: PUSH
69194: LD_INT 0
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 2
69203: PUSH
69204: LD_INT 1
69206: NEG
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 3
69214: PUSH
69215: LD_INT 1
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: LIST
69226: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69227: LD_ADDR_VAR 0 43
69231: PUSH
69232: LD_INT 2
69234: PUSH
69235: LD_INT 2
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 3
69244: PUSH
69245: LD_INT 2
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 2
69254: PUSH
69255: LD_INT 3
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: LIST
69266: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69267: LD_ADDR_VAR 0 44
69271: PUSH
69272: LD_INT 0
69274: PUSH
69275: LD_INT 2
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 1
69284: PUSH
69285: LD_INT 3
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 1
69294: NEG
69295: PUSH
69296: LD_INT 2
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: LIST
69307: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69308: LD_ADDR_VAR 0 45
69312: PUSH
69313: LD_INT 2
69315: NEG
69316: PUSH
69317: LD_INT 0
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 2
69326: NEG
69327: PUSH
69328: LD_INT 1
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 3
69337: NEG
69338: PUSH
69339: LD_INT 1
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: LIST
69351: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69352: LD_ADDR_VAR 0 46
69356: PUSH
69357: LD_INT 2
69359: NEG
69360: PUSH
69361: LD_INT 2
69363: NEG
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 2
69371: NEG
69372: PUSH
69373: LD_INT 3
69375: NEG
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 3
69383: NEG
69384: PUSH
69385: LD_INT 2
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: LIST
69397: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69398: LD_ADDR_VAR 0 47
69402: PUSH
69403: LD_INT 2
69405: NEG
69406: PUSH
69407: LD_INT 3
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 1
69417: NEG
69418: PUSH
69419: LD_INT 3
69421: NEG
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69431: LD_ADDR_VAR 0 48
69435: PUSH
69436: LD_INT 1
69438: PUSH
69439: LD_INT 2
69441: NEG
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 2
69449: PUSH
69450: LD_INT 1
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69462: LD_ADDR_VAR 0 49
69466: PUSH
69467: LD_INT 3
69469: PUSH
69470: LD_INT 1
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 3
69479: PUSH
69480: LD_INT 2
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69491: LD_ADDR_VAR 0 50
69495: PUSH
69496: LD_INT 2
69498: PUSH
69499: LD_INT 3
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 1
69508: PUSH
69509: LD_INT 3
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69520: LD_ADDR_VAR 0 51
69524: PUSH
69525: LD_INT 1
69527: NEG
69528: PUSH
69529: LD_INT 2
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 2
69538: NEG
69539: PUSH
69540: LD_INT 1
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69551: LD_ADDR_VAR 0 52
69555: PUSH
69556: LD_INT 3
69558: NEG
69559: PUSH
69560: LD_INT 1
69562: NEG
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 3
69570: NEG
69571: PUSH
69572: LD_INT 2
69574: NEG
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69584: LD_ADDR_VAR 0 53
69588: PUSH
69589: LD_INT 1
69591: NEG
69592: PUSH
69593: LD_INT 3
69595: NEG
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 0
69603: PUSH
69604: LD_INT 3
69606: NEG
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 1
69614: PUSH
69615: LD_INT 2
69617: NEG
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: LIST
69627: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69628: LD_ADDR_VAR 0 54
69632: PUSH
69633: LD_INT 2
69635: PUSH
69636: LD_INT 1
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 3
69646: PUSH
69647: LD_INT 0
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 3
69656: PUSH
69657: LD_INT 1
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: LIST
69668: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69669: LD_ADDR_VAR 0 55
69673: PUSH
69674: LD_INT 3
69676: PUSH
69677: LD_INT 2
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 3
69686: PUSH
69687: LD_INT 3
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 2
69696: PUSH
69697: LD_INT 3
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: LIST
69708: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69709: LD_ADDR_VAR 0 56
69713: PUSH
69714: LD_INT 1
69716: PUSH
69717: LD_INT 3
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 0
69726: PUSH
69727: LD_INT 3
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 1
69736: NEG
69737: PUSH
69738: LD_INT 2
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: LIST
69749: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69750: LD_ADDR_VAR 0 57
69754: PUSH
69755: LD_INT 2
69757: NEG
69758: PUSH
69759: LD_INT 1
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 3
69768: NEG
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 3
69779: NEG
69780: PUSH
69781: LD_INT 1
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: LIST
69793: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69794: LD_ADDR_VAR 0 58
69798: PUSH
69799: LD_INT 2
69801: NEG
69802: PUSH
69803: LD_INT 3
69805: NEG
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 3
69813: NEG
69814: PUSH
69815: LD_INT 2
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 3
69825: NEG
69826: PUSH
69827: LD_INT 3
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: LIST
69839: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69840: LD_ADDR_VAR 0 59
69844: PUSH
69845: LD_INT 1
69847: NEG
69848: PUSH
69849: LD_INT 2
69851: NEG
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 0
69859: PUSH
69860: LD_INT 2
69862: NEG
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 1
69870: PUSH
69871: LD_INT 1
69873: NEG
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: LIST
69883: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69884: LD_ADDR_VAR 0 60
69888: PUSH
69889: LD_INT 1
69891: PUSH
69892: LD_INT 1
69894: NEG
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 2
69902: PUSH
69903: LD_INT 0
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 2
69912: PUSH
69913: LD_INT 1
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: LIST
69924: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69925: LD_ADDR_VAR 0 61
69929: PUSH
69930: LD_INT 2
69932: PUSH
69933: LD_INT 1
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 2
69942: PUSH
69943: LD_INT 2
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 1
69952: PUSH
69953: LD_INT 2
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: LIST
69964: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69965: LD_ADDR_VAR 0 62
69969: PUSH
69970: LD_INT 1
69972: PUSH
69973: LD_INT 2
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 0
69982: PUSH
69983: LD_INT 2
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 1
69992: NEG
69993: PUSH
69994: LD_INT 1
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: LIST
70005: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70006: LD_ADDR_VAR 0 63
70010: PUSH
70011: LD_INT 1
70013: NEG
70014: PUSH
70015: LD_INT 1
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 2
70024: NEG
70025: PUSH
70026: LD_INT 0
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 2
70035: NEG
70036: PUSH
70037: LD_INT 1
70039: NEG
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: LIST
70049: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70050: LD_ADDR_VAR 0 64
70054: PUSH
70055: LD_INT 1
70057: NEG
70058: PUSH
70059: LD_INT 2
70061: NEG
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 2
70069: NEG
70070: PUSH
70071: LD_INT 1
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 2
70081: NEG
70082: PUSH
70083: LD_INT 2
70085: NEG
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: LIST
70095: ST_TO_ADDR
// end ; 2 :
70096: GO 73362
70098: LD_INT 2
70100: DOUBLE
70101: EQUAL
70102: IFTRUE 70106
70104: GO 73361
70106: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70107: LD_ADDR_VAR 0 29
70111: PUSH
70112: LD_INT 4
70114: PUSH
70115: LD_INT 0
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 4
70124: PUSH
70125: LD_INT 1
70127: NEG
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 5
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 5
70145: PUSH
70146: LD_INT 1
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 4
70155: PUSH
70156: LD_INT 1
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 3
70165: PUSH
70166: LD_INT 0
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 3
70175: PUSH
70176: LD_INT 1
70178: NEG
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: LD_INT 3
70186: PUSH
70187: LD_INT 2
70189: NEG
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 5
70197: PUSH
70198: LD_INT 2
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 3
70207: PUSH
70208: LD_INT 3
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 3
70217: PUSH
70218: LD_INT 2
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 4
70227: PUSH
70228: LD_INT 3
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 4
70237: PUSH
70238: LD_INT 4
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 3
70247: PUSH
70248: LD_INT 4
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 2
70257: PUSH
70258: LD_INT 3
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 2
70267: PUSH
70268: LD_INT 2
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 4
70277: PUSH
70278: LD_INT 2
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 2
70287: PUSH
70288: LD_INT 4
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 0
70297: PUSH
70298: LD_INT 4
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 0
70307: PUSH
70308: LD_INT 3
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 1
70317: PUSH
70318: LD_INT 4
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 1
70327: PUSH
70328: LD_INT 5
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 0
70337: PUSH
70338: LD_INT 5
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 1
70347: NEG
70348: PUSH
70349: LD_INT 4
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 1
70358: NEG
70359: PUSH
70360: LD_INT 3
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 2
70369: PUSH
70370: LD_INT 5
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 2
70379: NEG
70380: PUSH
70381: LD_INT 3
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 3
70390: NEG
70391: PUSH
70392: LD_INT 0
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 3
70401: NEG
70402: PUSH
70403: LD_INT 1
70405: NEG
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 2
70413: NEG
70414: PUSH
70415: LD_INT 0
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 2
70424: NEG
70425: PUSH
70426: LD_INT 1
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 3
70435: NEG
70436: PUSH
70437: LD_INT 1
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 4
70446: NEG
70447: PUSH
70448: LD_INT 0
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 4
70457: NEG
70458: PUSH
70459: LD_INT 1
70461: NEG
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 4
70469: NEG
70470: PUSH
70471: LD_INT 2
70473: NEG
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 2
70481: NEG
70482: PUSH
70483: LD_INT 2
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 4
70492: NEG
70493: PUSH
70494: LD_INT 4
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 4
70504: NEG
70505: PUSH
70506: LD_INT 5
70508: NEG
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 3
70516: NEG
70517: PUSH
70518: LD_INT 4
70520: NEG
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 3
70528: NEG
70529: PUSH
70530: LD_INT 3
70532: NEG
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 4
70540: NEG
70541: PUSH
70542: LD_INT 3
70544: NEG
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 5
70552: NEG
70553: PUSH
70554: LD_INT 4
70556: NEG
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 5
70564: NEG
70565: PUSH
70566: LD_INT 5
70568: NEG
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 3
70576: NEG
70577: PUSH
70578: LD_INT 5
70580: NEG
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 5
70588: NEG
70589: PUSH
70590: LD_INT 3
70592: NEG
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70645: LD_ADDR_VAR 0 30
70649: PUSH
70650: LD_INT 4
70652: PUSH
70653: LD_INT 4
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 4
70662: PUSH
70663: LD_INT 3
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 5
70672: PUSH
70673: LD_INT 4
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 5
70682: PUSH
70683: LD_INT 5
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 4
70692: PUSH
70693: LD_INT 5
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 3
70702: PUSH
70703: LD_INT 4
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 3
70712: PUSH
70713: LD_INT 3
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 5
70722: PUSH
70723: LD_INT 3
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 3
70732: PUSH
70733: LD_INT 5
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 0
70742: PUSH
70743: LD_INT 3
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 0
70752: PUSH
70753: LD_INT 2
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 1
70762: PUSH
70763: LD_INT 3
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 1
70772: PUSH
70773: LD_INT 4
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 0
70782: PUSH
70783: LD_INT 4
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 1
70792: NEG
70793: PUSH
70794: LD_INT 3
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 1
70803: NEG
70804: PUSH
70805: LD_INT 2
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 2
70814: PUSH
70815: LD_INT 4
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 2
70824: NEG
70825: PUSH
70826: LD_INT 2
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 4
70835: NEG
70836: PUSH
70837: LD_INT 0
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 4
70846: NEG
70847: PUSH
70848: LD_INT 1
70850: NEG
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 3
70858: NEG
70859: PUSH
70860: LD_INT 0
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 3
70869: NEG
70870: PUSH
70871: LD_INT 1
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 4
70880: NEG
70881: PUSH
70882: LD_INT 1
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 5
70891: NEG
70892: PUSH
70893: LD_INT 0
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: LD_INT 5
70902: NEG
70903: PUSH
70904: LD_INT 1
70906: NEG
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 5
70914: NEG
70915: PUSH
70916: LD_INT 2
70918: NEG
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: LD_INT 3
70926: NEG
70927: PUSH
70928: LD_INT 2
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: PUSH
70935: LD_INT 3
70937: NEG
70938: PUSH
70939: LD_INT 3
70941: NEG
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 3
70949: NEG
70950: PUSH
70951: LD_INT 4
70953: NEG
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: PUSH
70959: LD_INT 2
70961: NEG
70962: PUSH
70963: LD_INT 3
70965: NEG
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PUSH
70971: LD_INT 2
70973: NEG
70974: PUSH
70975: LD_INT 2
70977: NEG
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 3
70985: NEG
70986: PUSH
70987: LD_INT 2
70989: NEG
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 4
70997: NEG
70998: PUSH
70999: LD_INT 3
71001: NEG
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 4
71009: NEG
71010: PUSH
71011: LD_INT 4
71013: NEG
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 2
71021: NEG
71022: PUSH
71023: LD_INT 4
71025: NEG
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 4
71033: NEG
71034: PUSH
71035: LD_INT 2
71037: NEG
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 0
71045: PUSH
71046: LD_INT 4
71048: NEG
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 0
71056: PUSH
71057: LD_INT 5
71059: NEG
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 1
71067: PUSH
71068: LD_INT 4
71070: NEG
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 1
71078: PUSH
71079: LD_INT 3
71081: NEG
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 0
71089: PUSH
71090: LD_INT 3
71092: NEG
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 1
71100: NEG
71101: PUSH
71102: LD_INT 4
71104: NEG
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: LD_INT 1
71112: NEG
71113: PUSH
71114: LD_INT 5
71116: NEG
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 2
71124: PUSH
71125: LD_INT 3
71127: NEG
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 2
71135: NEG
71136: PUSH
71137: LD_INT 5
71139: NEG
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71192: LD_ADDR_VAR 0 31
71196: PUSH
71197: LD_INT 0
71199: PUSH
71200: LD_INT 4
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 0
71209: PUSH
71210: LD_INT 3
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 1
71219: PUSH
71220: LD_INT 4
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 1
71229: PUSH
71230: LD_INT 5
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 0
71239: PUSH
71240: LD_INT 5
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 1
71249: NEG
71250: PUSH
71251: LD_INT 4
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 1
71260: NEG
71261: PUSH
71262: LD_INT 3
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 2
71271: PUSH
71272: LD_INT 5
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: LD_INT 2
71281: NEG
71282: PUSH
71283: LD_INT 3
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 3
71292: NEG
71293: PUSH
71294: LD_INT 0
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 3
71303: NEG
71304: PUSH
71305: LD_INT 1
71307: NEG
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 2
71315: NEG
71316: PUSH
71317: LD_INT 0
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 2
71326: NEG
71327: PUSH
71328: LD_INT 1
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 3
71337: NEG
71338: PUSH
71339: LD_INT 1
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 4
71348: NEG
71349: PUSH
71350: LD_INT 0
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: PUSH
71357: LD_INT 4
71359: NEG
71360: PUSH
71361: LD_INT 1
71363: NEG
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 4
71371: NEG
71372: PUSH
71373: LD_INT 2
71375: NEG
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: LD_INT 2
71383: NEG
71384: PUSH
71385: LD_INT 2
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 4
71394: NEG
71395: PUSH
71396: LD_INT 4
71398: NEG
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: PUSH
71404: LD_INT 4
71406: NEG
71407: PUSH
71408: LD_INT 5
71410: NEG
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: LD_INT 3
71418: NEG
71419: PUSH
71420: LD_INT 4
71422: NEG
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 3
71430: NEG
71431: PUSH
71432: LD_INT 3
71434: NEG
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 4
71442: NEG
71443: PUSH
71444: LD_INT 3
71446: NEG
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 5
71454: NEG
71455: PUSH
71456: LD_INT 4
71458: NEG
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 5
71466: NEG
71467: PUSH
71468: LD_INT 5
71470: NEG
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 3
71478: NEG
71479: PUSH
71480: LD_INT 5
71482: NEG
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 5
71490: NEG
71491: PUSH
71492: LD_INT 3
71494: NEG
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 0
71502: PUSH
71503: LD_INT 3
71505: NEG
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 0
71513: PUSH
71514: LD_INT 4
71516: NEG
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 1
71524: PUSH
71525: LD_INT 3
71527: NEG
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 1
71535: PUSH
71536: LD_INT 2
71538: NEG
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: LD_INT 0
71546: PUSH
71547: LD_INT 2
71549: NEG
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 1
71557: NEG
71558: PUSH
71559: LD_INT 3
71561: NEG
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 1
71569: NEG
71570: PUSH
71571: LD_INT 4
71573: NEG
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 2
71581: PUSH
71582: LD_INT 2
71584: NEG
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: PUSH
71590: LD_INT 2
71592: NEG
71593: PUSH
71594: LD_INT 4
71596: NEG
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PUSH
71602: LD_INT 4
71604: PUSH
71605: LD_INT 0
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PUSH
71612: LD_INT 4
71614: PUSH
71615: LD_INT 1
71617: NEG
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 5
71625: PUSH
71626: LD_INT 0
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 5
71635: PUSH
71636: LD_INT 1
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 4
71645: PUSH
71646: LD_INT 1
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 3
71655: PUSH
71656: LD_INT 0
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: PUSH
71663: LD_INT 3
71665: PUSH
71666: LD_INT 1
71668: NEG
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 3
71676: PUSH
71677: LD_INT 2
71679: NEG
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 5
71687: PUSH
71688: LD_INT 2
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71742: LD_ADDR_VAR 0 32
71746: PUSH
71747: LD_INT 4
71749: NEG
71750: PUSH
71751: LD_INT 0
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 4
71760: NEG
71761: PUSH
71762: LD_INT 1
71764: NEG
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 3
71772: NEG
71773: PUSH
71774: LD_INT 0
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 3
71783: NEG
71784: PUSH
71785: LD_INT 1
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: LD_INT 4
71794: NEG
71795: PUSH
71796: LD_INT 1
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 5
71805: NEG
71806: PUSH
71807: LD_INT 0
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: PUSH
71814: LD_INT 5
71816: NEG
71817: PUSH
71818: LD_INT 1
71820: NEG
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 5
71828: NEG
71829: PUSH
71830: LD_INT 2
71832: NEG
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 3
71840: NEG
71841: PUSH
71842: LD_INT 2
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 3
71851: NEG
71852: PUSH
71853: LD_INT 3
71855: NEG
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: PUSH
71861: LD_INT 3
71863: NEG
71864: PUSH
71865: LD_INT 4
71867: NEG
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: LD_INT 2
71875: NEG
71876: PUSH
71877: LD_INT 3
71879: NEG
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: LD_INT 2
71887: NEG
71888: PUSH
71889: LD_INT 2
71891: NEG
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 3
71899: NEG
71900: PUSH
71901: LD_INT 2
71903: NEG
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 4
71911: NEG
71912: PUSH
71913: LD_INT 3
71915: NEG
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 4
71923: NEG
71924: PUSH
71925: LD_INT 4
71927: NEG
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 2
71935: NEG
71936: PUSH
71937: LD_INT 4
71939: NEG
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: LD_INT 4
71947: NEG
71948: PUSH
71949: LD_INT 2
71951: NEG
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 0
71959: PUSH
71960: LD_INT 4
71962: NEG
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 0
71970: PUSH
71971: LD_INT 5
71973: NEG
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 1
71981: PUSH
71982: LD_INT 4
71984: NEG
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 1
71992: PUSH
71993: LD_INT 3
71995: NEG
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 0
72003: PUSH
72004: LD_INT 3
72006: NEG
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: LD_INT 1
72014: NEG
72015: PUSH
72016: LD_INT 4
72018: NEG
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: PUSH
72024: LD_INT 1
72026: NEG
72027: PUSH
72028: LD_INT 5
72030: NEG
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: PUSH
72036: LD_INT 2
72038: PUSH
72039: LD_INT 3
72041: NEG
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: LD_INT 2
72049: NEG
72050: PUSH
72051: LD_INT 5
72053: NEG
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 3
72061: PUSH
72062: LD_INT 0
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 3
72071: PUSH
72072: LD_INT 1
72074: NEG
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: LD_INT 4
72082: PUSH
72083: LD_INT 0
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 4
72092: PUSH
72093: LD_INT 1
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_INT 3
72102: PUSH
72103: LD_INT 1
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: LD_INT 2
72112: PUSH
72113: LD_INT 0
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 2
72122: PUSH
72123: LD_INT 1
72125: NEG
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 2
72133: PUSH
72134: LD_INT 2
72136: NEG
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 4
72144: PUSH
72145: LD_INT 2
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 4
72154: PUSH
72155: LD_INT 4
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 4
72164: PUSH
72165: LD_INT 3
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 5
72174: PUSH
72175: LD_INT 4
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 5
72184: PUSH
72185: LD_INT 5
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 4
72194: PUSH
72195: LD_INT 5
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_INT 3
72204: PUSH
72205: LD_INT 4
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: PUSH
72212: LD_INT 3
72214: PUSH
72215: LD_INT 3
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 5
72224: PUSH
72225: LD_INT 3
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 3
72234: PUSH
72235: LD_INT 5
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72289: LD_ADDR_VAR 0 33
72293: PUSH
72294: LD_INT 4
72296: NEG
72297: PUSH
72298: LD_INT 4
72300: NEG
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: PUSH
72306: LD_INT 4
72308: NEG
72309: PUSH
72310: LD_INT 5
72312: NEG
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: PUSH
72318: LD_INT 3
72320: NEG
72321: PUSH
72322: LD_INT 4
72324: NEG
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: PUSH
72330: LD_INT 3
72332: NEG
72333: PUSH
72334: LD_INT 3
72336: NEG
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: PUSH
72342: LD_INT 4
72344: NEG
72345: PUSH
72346: LD_INT 3
72348: NEG
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 5
72356: NEG
72357: PUSH
72358: LD_INT 4
72360: NEG
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: LD_INT 5
72368: NEG
72369: PUSH
72370: LD_INT 5
72372: NEG
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 3
72380: NEG
72381: PUSH
72382: LD_INT 5
72384: NEG
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 5
72392: NEG
72393: PUSH
72394: LD_INT 3
72396: NEG
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: PUSH
72402: LD_INT 0
72404: PUSH
72405: LD_INT 3
72407: NEG
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 0
72415: PUSH
72416: LD_INT 4
72418: NEG
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: LD_INT 1
72426: PUSH
72427: LD_INT 3
72429: NEG
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 1
72437: PUSH
72438: LD_INT 2
72440: NEG
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: LD_INT 0
72448: PUSH
72449: LD_INT 2
72451: NEG
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 1
72459: NEG
72460: PUSH
72461: LD_INT 3
72463: NEG
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: PUSH
72469: LD_INT 1
72471: NEG
72472: PUSH
72473: LD_INT 4
72475: NEG
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 2
72483: PUSH
72484: LD_INT 2
72486: NEG
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: PUSH
72492: LD_INT 2
72494: NEG
72495: PUSH
72496: LD_INT 4
72498: NEG
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 4
72506: PUSH
72507: LD_INT 0
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 4
72516: PUSH
72517: LD_INT 1
72519: NEG
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 5
72527: PUSH
72528: LD_INT 0
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: PUSH
72535: LD_INT 5
72537: PUSH
72538: LD_INT 1
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: LD_INT 4
72547: PUSH
72548: LD_INT 1
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: PUSH
72555: LD_INT 3
72557: PUSH
72558: LD_INT 0
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: LD_INT 3
72567: PUSH
72568: LD_INT 1
72570: NEG
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 3
72578: PUSH
72579: LD_INT 2
72581: NEG
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 5
72589: PUSH
72590: LD_INT 2
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 3
72599: PUSH
72600: LD_INT 3
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: PUSH
72607: LD_INT 3
72609: PUSH
72610: LD_INT 2
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 4
72619: PUSH
72620: LD_INT 3
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 4
72629: PUSH
72630: LD_INT 4
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: PUSH
72637: LD_INT 3
72639: PUSH
72640: LD_INT 4
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: PUSH
72647: LD_INT 2
72649: PUSH
72650: LD_INT 3
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 2
72659: PUSH
72660: LD_INT 2
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: PUSH
72667: LD_INT 4
72669: PUSH
72670: LD_INT 2
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PUSH
72677: LD_INT 2
72679: PUSH
72680: LD_INT 4
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 0
72689: PUSH
72690: LD_INT 4
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 0
72699: PUSH
72700: LD_INT 3
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_INT 1
72709: PUSH
72710: LD_INT 4
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 1
72719: PUSH
72720: LD_INT 5
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: PUSH
72727: LD_INT 0
72729: PUSH
72730: LD_INT 5
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 1
72739: NEG
72740: PUSH
72741: LD_INT 4
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 1
72750: NEG
72751: PUSH
72752: LD_INT 3
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 2
72761: PUSH
72762: LD_INT 5
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 2
72771: NEG
72772: PUSH
72773: LD_INT 3
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: LIST
72812: LIST
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72827: LD_ADDR_VAR 0 34
72831: PUSH
72832: LD_INT 0
72834: PUSH
72835: LD_INT 4
72837: NEG
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: PUSH
72843: LD_INT 0
72845: PUSH
72846: LD_INT 5
72848: NEG
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 1
72856: PUSH
72857: LD_INT 4
72859: NEG
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 1
72867: PUSH
72868: LD_INT 3
72870: NEG
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 0
72878: PUSH
72879: LD_INT 3
72881: NEG
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 1
72889: NEG
72890: PUSH
72891: LD_INT 4
72893: NEG
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 1
72901: NEG
72902: PUSH
72903: LD_INT 5
72905: NEG
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 2
72913: PUSH
72914: LD_INT 3
72916: NEG
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: PUSH
72922: LD_INT 2
72924: NEG
72925: PUSH
72926: LD_INT 5
72928: NEG
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: LD_INT 3
72936: PUSH
72937: LD_INT 0
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: PUSH
72944: LD_INT 3
72946: PUSH
72947: LD_INT 1
72949: NEG
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 4
72957: PUSH
72958: LD_INT 0
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 4
72967: PUSH
72968: LD_INT 1
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: LD_INT 3
72977: PUSH
72978: LD_INT 1
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: LD_INT 2
72987: PUSH
72988: LD_INT 0
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 2
72997: PUSH
72998: LD_INT 1
73000: NEG
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 2
73008: PUSH
73009: LD_INT 2
73011: NEG
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: LD_INT 4
73019: PUSH
73020: LD_INT 2
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: PUSH
73027: LD_INT 4
73029: PUSH
73030: LD_INT 4
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: PUSH
73037: LD_INT 4
73039: PUSH
73040: LD_INT 3
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PUSH
73047: LD_INT 5
73049: PUSH
73050: LD_INT 4
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: LD_INT 5
73059: PUSH
73060: LD_INT 5
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: PUSH
73067: LD_INT 4
73069: PUSH
73070: LD_INT 5
73072: PUSH
73073: EMPTY
73074: LIST
73075: LIST
73076: PUSH
73077: LD_INT 3
73079: PUSH
73080: LD_INT 4
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: PUSH
73087: LD_INT 3
73089: PUSH
73090: LD_INT 3
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 5
73099: PUSH
73100: LD_INT 3
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: PUSH
73107: LD_INT 3
73109: PUSH
73110: LD_INT 5
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 0
73119: PUSH
73120: LD_INT 3
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: PUSH
73127: LD_INT 0
73129: PUSH
73130: LD_INT 2
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: PUSH
73137: LD_INT 1
73139: PUSH
73140: LD_INT 3
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PUSH
73147: LD_INT 1
73149: PUSH
73150: LD_INT 4
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: PUSH
73157: LD_INT 0
73159: PUSH
73160: LD_INT 4
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: PUSH
73167: LD_INT 1
73169: NEG
73170: PUSH
73171: LD_INT 3
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 1
73180: NEG
73181: PUSH
73182: LD_INT 2
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: PUSH
73189: LD_INT 2
73191: PUSH
73192: LD_INT 4
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: PUSH
73199: LD_INT 2
73201: NEG
73202: PUSH
73203: LD_INT 2
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 4
73212: NEG
73213: PUSH
73214: LD_INT 0
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 4
73223: NEG
73224: PUSH
73225: LD_INT 1
73227: NEG
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: PUSH
73233: LD_INT 3
73235: NEG
73236: PUSH
73237: LD_INT 0
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: PUSH
73244: LD_INT 3
73246: NEG
73247: PUSH
73248: LD_INT 1
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PUSH
73255: LD_INT 4
73257: NEG
73258: PUSH
73259: LD_INT 1
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: PUSH
73266: LD_INT 5
73268: NEG
73269: PUSH
73270: LD_INT 0
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: PUSH
73277: LD_INT 5
73279: NEG
73280: PUSH
73281: LD_INT 1
73283: NEG
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PUSH
73289: LD_INT 5
73291: NEG
73292: PUSH
73293: LD_INT 2
73295: NEG
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 3
73303: NEG
73304: PUSH
73305: LD_INT 2
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: LIST
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: ST_TO_ADDR
// end ; end ;
73359: GO 73362
73361: POP
// case btype of b_depot , b_warehouse :
73362: LD_VAR 0 1
73366: PUSH
73367: LD_INT 0
73369: DOUBLE
73370: EQUAL
73371: IFTRUE 73381
73373: LD_INT 1
73375: DOUBLE
73376: EQUAL
73377: IFTRUE 73381
73379: GO 73582
73381: POP
// case nation of nation_american :
73382: LD_VAR 0 5
73386: PUSH
73387: LD_INT 1
73389: DOUBLE
73390: EQUAL
73391: IFTRUE 73395
73393: GO 73451
73395: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73396: LD_ADDR_VAR 0 9
73400: PUSH
73401: LD_VAR 0 11
73405: PUSH
73406: LD_VAR 0 12
73410: PUSH
73411: LD_VAR 0 13
73415: PUSH
73416: LD_VAR 0 14
73420: PUSH
73421: LD_VAR 0 15
73425: PUSH
73426: LD_VAR 0 16
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: LIST
73435: LIST
73436: LIST
73437: LIST
73438: PUSH
73439: LD_VAR 0 4
73443: PUSH
73444: LD_INT 1
73446: PLUS
73447: ARRAY
73448: ST_TO_ADDR
73449: GO 73580
73451: LD_INT 2
73453: DOUBLE
73454: EQUAL
73455: IFTRUE 73459
73457: GO 73515
73459: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73460: LD_ADDR_VAR 0 9
73464: PUSH
73465: LD_VAR 0 17
73469: PUSH
73470: LD_VAR 0 18
73474: PUSH
73475: LD_VAR 0 19
73479: PUSH
73480: LD_VAR 0 20
73484: PUSH
73485: LD_VAR 0 21
73489: PUSH
73490: LD_VAR 0 22
73494: PUSH
73495: EMPTY
73496: LIST
73497: LIST
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: PUSH
73503: LD_VAR 0 4
73507: PUSH
73508: LD_INT 1
73510: PLUS
73511: ARRAY
73512: ST_TO_ADDR
73513: GO 73580
73515: LD_INT 3
73517: DOUBLE
73518: EQUAL
73519: IFTRUE 73523
73521: GO 73579
73523: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73524: LD_ADDR_VAR 0 9
73528: PUSH
73529: LD_VAR 0 23
73533: PUSH
73534: LD_VAR 0 24
73538: PUSH
73539: LD_VAR 0 25
73543: PUSH
73544: LD_VAR 0 26
73548: PUSH
73549: LD_VAR 0 27
73553: PUSH
73554: LD_VAR 0 28
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: PUSH
73567: LD_VAR 0 4
73571: PUSH
73572: LD_INT 1
73574: PLUS
73575: ARRAY
73576: ST_TO_ADDR
73577: GO 73580
73579: POP
73580: GO 74135
73582: LD_INT 2
73584: DOUBLE
73585: EQUAL
73586: IFTRUE 73596
73588: LD_INT 3
73590: DOUBLE
73591: EQUAL
73592: IFTRUE 73596
73594: GO 73652
73596: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73597: LD_ADDR_VAR 0 9
73601: PUSH
73602: LD_VAR 0 29
73606: PUSH
73607: LD_VAR 0 30
73611: PUSH
73612: LD_VAR 0 31
73616: PUSH
73617: LD_VAR 0 32
73621: PUSH
73622: LD_VAR 0 33
73626: PUSH
73627: LD_VAR 0 34
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: PUSH
73640: LD_VAR 0 4
73644: PUSH
73645: LD_INT 1
73647: PLUS
73648: ARRAY
73649: ST_TO_ADDR
73650: GO 74135
73652: LD_INT 16
73654: DOUBLE
73655: EQUAL
73656: IFTRUE 73714
73658: LD_INT 17
73660: DOUBLE
73661: EQUAL
73662: IFTRUE 73714
73664: LD_INT 18
73666: DOUBLE
73667: EQUAL
73668: IFTRUE 73714
73670: LD_INT 19
73672: DOUBLE
73673: EQUAL
73674: IFTRUE 73714
73676: LD_INT 22
73678: DOUBLE
73679: EQUAL
73680: IFTRUE 73714
73682: LD_INT 20
73684: DOUBLE
73685: EQUAL
73686: IFTRUE 73714
73688: LD_INT 21
73690: DOUBLE
73691: EQUAL
73692: IFTRUE 73714
73694: LD_INT 23
73696: DOUBLE
73697: EQUAL
73698: IFTRUE 73714
73700: LD_INT 24
73702: DOUBLE
73703: EQUAL
73704: IFTRUE 73714
73706: LD_INT 25
73708: DOUBLE
73709: EQUAL
73710: IFTRUE 73714
73712: GO 73770
73714: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73715: LD_ADDR_VAR 0 9
73719: PUSH
73720: LD_VAR 0 35
73724: PUSH
73725: LD_VAR 0 36
73729: PUSH
73730: LD_VAR 0 37
73734: PUSH
73735: LD_VAR 0 38
73739: PUSH
73740: LD_VAR 0 39
73744: PUSH
73745: LD_VAR 0 40
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: PUSH
73758: LD_VAR 0 4
73762: PUSH
73763: LD_INT 1
73765: PLUS
73766: ARRAY
73767: ST_TO_ADDR
73768: GO 74135
73770: LD_INT 6
73772: DOUBLE
73773: EQUAL
73774: IFTRUE 73826
73776: LD_INT 7
73778: DOUBLE
73779: EQUAL
73780: IFTRUE 73826
73782: LD_INT 8
73784: DOUBLE
73785: EQUAL
73786: IFTRUE 73826
73788: LD_INT 13
73790: DOUBLE
73791: EQUAL
73792: IFTRUE 73826
73794: LD_INT 12
73796: DOUBLE
73797: EQUAL
73798: IFTRUE 73826
73800: LD_INT 15
73802: DOUBLE
73803: EQUAL
73804: IFTRUE 73826
73806: LD_INT 11
73808: DOUBLE
73809: EQUAL
73810: IFTRUE 73826
73812: LD_INT 14
73814: DOUBLE
73815: EQUAL
73816: IFTRUE 73826
73818: LD_INT 10
73820: DOUBLE
73821: EQUAL
73822: IFTRUE 73826
73824: GO 73882
73826: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73827: LD_ADDR_VAR 0 9
73831: PUSH
73832: LD_VAR 0 41
73836: PUSH
73837: LD_VAR 0 42
73841: PUSH
73842: LD_VAR 0 43
73846: PUSH
73847: LD_VAR 0 44
73851: PUSH
73852: LD_VAR 0 45
73856: PUSH
73857: LD_VAR 0 46
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: PUSH
73870: LD_VAR 0 4
73874: PUSH
73875: LD_INT 1
73877: PLUS
73878: ARRAY
73879: ST_TO_ADDR
73880: GO 74135
73882: LD_INT 36
73884: DOUBLE
73885: EQUAL
73886: IFTRUE 73890
73888: GO 73946
73890: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73891: LD_ADDR_VAR 0 9
73895: PUSH
73896: LD_VAR 0 47
73900: PUSH
73901: LD_VAR 0 48
73905: PUSH
73906: LD_VAR 0 49
73910: PUSH
73911: LD_VAR 0 50
73915: PUSH
73916: LD_VAR 0 51
73920: PUSH
73921: LD_VAR 0 52
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: PUSH
73934: LD_VAR 0 4
73938: PUSH
73939: LD_INT 1
73941: PLUS
73942: ARRAY
73943: ST_TO_ADDR
73944: GO 74135
73946: LD_INT 4
73948: DOUBLE
73949: EQUAL
73950: IFTRUE 73972
73952: LD_INT 5
73954: DOUBLE
73955: EQUAL
73956: IFTRUE 73972
73958: LD_INT 34
73960: DOUBLE
73961: EQUAL
73962: IFTRUE 73972
73964: LD_INT 37
73966: DOUBLE
73967: EQUAL
73968: IFTRUE 73972
73970: GO 74028
73972: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73973: LD_ADDR_VAR 0 9
73977: PUSH
73978: LD_VAR 0 53
73982: PUSH
73983: LD_VAR 0 54
73987: PUSH
73988: LD_VAR 0 55
73992: PUSH
73993: LD_VAR 0 56
73997: PUSH
73998: LD_VAR 0 57
74002: PUSH
74003: LD_VAR 0 58
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: PUSH
74016: LD_VAR 0 4
74020: PUSH
74021: LD_INT 1
74023: PLUS
74024: ARRAY
74025: ST_TO_ADDR
74026: GO 74135
74028: LD_INT 31
74030: DOUBLE
74031: EQUAL
74032: IFTRUE 74078
74034: LD_INT 32
74036: DOUBLE
74037: EQUAL
74038: IFTRUE 74078
74040: LD_INT 33
74042: DOUBLE
74043: EQUAL
74044: IFTRUE 74078
74046: LD_INT 27
74048: DOUBLE
74049: EQUAL
74050: IFTRUE 74078
74052: LD_INT 26
74054: DOUBLE
74055: EQUAL
74056: IFTRUE 74078
74058: LD_INT 28
74060: DOUBLE
74061: EQUAL
74062: IFTRUE 74078
74064: LD_INT 29
74066: DOUBLE
74067: EQUAL
74068: IFTRUE 74078
74070: LD_INT 30
74072: DOUBLE
74073: EQUAL
74074: IFTRUE 74078
74076: GO 74134
74078: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74079: LD_ADDR_VAR 0 9
74083: PUSH
74084: LD_VAR 0 59
74088: PUSH
74089: LD_VAR 0 60
74093: PUSH
74094: LD_VAR 0 61
74098: PUSH
74099: LD_VAR 0 62
74103: PUSH
74104: LD_VAR 0 63
74108: PUSH
74109: LD_VAR 0 64
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: PUSH
74122: LD_VAR 0 4
74126: PUSH
74127: LD_INT 1
74129: PLUS
74130: ARRAY
74131: ST_TO_ADDR
74132: GO 74135
74134: POP
// temp_list2 = [ ] ;
74135: LD_ADDR_VAR 0 10
74139: PUSH
74140: EMPTY
74141: ST_TO_ADDR
// for i in temp_list do
74142: LD_ADDR_VAR 0 8
74146: PUSH
74147: LD_VAR 0 9
74151: PUSH
74152: FOR_IN
74153: IFFALSE 74205
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74155: LD_ADDR_VAR 0 10
74159: PUSH
74160: LD_VAR 0 10
74164: PUSH
74165: LD_VAR 0 8
74169: PUSH
74170: LD_INT 1
74172: ARRAY
74173: PUSH
74174: LD_VAR 0 2
74178: PLUS
74179: PUSH
74180: LD_VAR 0 8
74184: PUSH
74185: LD_INT 2
74187: ARRAY
74188: PUSH
74189: LD_VAR 0 3
74193: PLUS
74194: PUSH
74195: EMPTY
74196: LIST
74197: LIST
74198: PUSH
74199: EMPTY
74200: LIST
74201: ADD
74202: ST_TO_ADDR
74203: GO 74152
74205: POP
74206: POP
// result = temp_list2 ;
74207: LD_ADDR_VAR 0 7
74211: PUSH
74212: LD_VAR 0 10
74216: ST_TO_ADDR
// end ;
74217: LD_VAR 0 7
74221: RET
// export function EnemyInRange ( unit , dist ) ; begin
74222: LD_INT 0
74224: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74225: LD_ADDR_VAR 0 3
74229: PUSH
74230: LD_VAR 0 1
74234: PPUSH
74235: CALL_OW 255
74239: PPUSH
74240: LD_VAR 0 1
74244: PPUSH
74245: CALL_OW 250
74249: PPUSH
74250: LD_VAR 0 1
74254: PPUSH
74255: CALL_OW 251
74259: PPUSH
74260: LD_VAR 0 2
74264: PPUSH
74265: CALL 47595 0 4
74269: PUSH
74270: LD_INT 4
74272: ARRAY
74273: ST_TO_ADDR
// end ;
74274: LD_VAR 0 3
74278: RET
// export function PlayerSeeMe ( unit ) ; begin
74279: LD_INT 0
74281: PPUSH
// result := See ( your_side , unit ) ;
74282: LD_ADDR_VAR 0 2
74286: PUSH
74287: LD_OWVAR 2
74291: PPUSH
74292: LD_VAR 0 1
74296: PPUSH
74297: CALL_OW 292
74301: ST_TO_ADDR
// end ;
74302: LD_VAR 0 2
74306: RET
// export function ReverseDir ( unit ) ; begin
74307: LD_INT 0
74309: PPUSH
// if not unit then
74310: LD_VAR 0 1
74314: NOT
74315: IFFALSE 74319
// exit ;
74317: GO 74342
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74319: LD_ADDR_VAR 0 2
74323: PUSH
74324: LD_VAR 0 1
74328: PPUSH
74329: CALL_OW 254
74333: PUSH
74334: LD_INT 3
74336: PLUS
74337: PUSH
74338: LD_INT 6
74340: MOD
74341: ST_TO_ADDR
// end ;
74342: LD_VAR 0 2
74346: RET
// export function ReverseArray ( array ) ; var i ; begin
74347: LD_INT 0
74349: PPUSH
74350: PPUSH
// if not array then
74351: LD_VAR 0 1
74355: NOT
74356: IFFALSE 74360
// exit ;
74358: GO 74415
// result := [ ] ;
74360: LD_ADDR_VAR 0 2
74364: PUSH
74365: EMPTY
74366: ST_TO_ADDR
// for i := array downto 1 do
74367: LD_ADDR_VAR 0 3
74371: PUSH
74372: DOUBLE
74373: LD_VAR 0 1
74377: INC
74378: ST_TO_ADDR
74379: LD_INT 1
74381: PUSH
74382: FOR_DOWNTO
74383: IFFALSE 74413
// result := Join ( result , array [ i ] ) ;
74385: LD_ADDR_VAR 0 2
74389: PUSH
74390: LD_VAR 0 2
74394: PPUSH
74395: LD_VAR 0 1
74399: PUSH
74400: LD_VAR 0 3
74404: ARRAY
74405: PPUSH
74406: CALL 79080 0 2
74410: ST_TO_ADDR
74411: GO 74382
74413: POP
74414: POP
// end ;
74415: LD_VAR 0 2
74419: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74420: LD_INT 0
74422: PPUSH
74423: PPUSH
74424: PPUSH
74425: PPUSH
74426: PPUSH
74427: PPUSH
// if not unit or not hexes then
74428: LD_VAR 0 1
74432: NOT
74433: PUSH
74434: LD_VAR 0 2
74438: NOT
74439: OR
74440: IFFALSE 74444
// exit ;
74442: GO 74567
// dist := 9999 ;
74444: LD_ADDR_VAR 0 5
74448: PUSH
74449: LD_INT 9999
74451: ST_TO_ADDR
// for i = 1 to hexes do
74452: LD_ADDR_VAR 0 4
74456: PUSH
74457: DOUBLE
74458: LD_INT 1
74460: DEC
74461: ST_TO_ADDR
74462: LD_VAR 0 2
74466: PUSH
74467: FOR_TO
74468: IFFALSE 74555
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74470: LD_ADDR_VAR 0 6
74474: PUSH
74475: LD_VAR 0 1
74479: PPUSH
74480: LD_VAR 0 2
74484: PUSH
74485: LD_VAR 0 4
74489: ARRAY
74490: PUSH
74491: LD_INT 1
74493: ARRAY
74494: PPUSH
74495: LD_VAR 0 2
74499: PUSH
74500: LD_VAR 0 4
74504: ARRAY
74505: PUSH
74506: LD_INT 2
74508: ARRAY
74509: PPUSH
74510: CALL_OW 297
74514: ST_TO_ADDR
// if tdist < dist then
74515: LD_VAR 0 6
74519: PUSH
74520: LD_VAR 0 5
74524: LESS
74525: IFFALSE 74553
// begin hex := hexes [ i ] ;
74527: LD_ADDR_VAR 0 8
74531: PUSH
74532: LD_VAR 0 2
74536: PUSH
74537: LD_VAR 0 4
74541: ARRAY
74542: ST_TO_ADDR
// dist := tdist ;
74543: LD_ADDR_VAR 0 5
74547: PUSH
74548: LD_VAR 0 6
74552: ST_TO_ADDR
// end ; end ;
74553: GO 74467
74555: POP
74556: POP
// result := hex ;
74557: LD_ADDR_VAR 0 3
74561: PUSH
74562: LD_VAR 0 8
74566: ST_TO_ADDR
// end ;
74567: LD_VAR 0 3
74571: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74572: LD_INT 0
74574: PPUSH
74575: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74576: LD_VAR 0 1
74580: NOT
74581: PUSH
74582: LD_VAR 0 1
74586: PUSH
74587: LD_INT 21
74589: PUSH
74590: LD_INT 2
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_INT 23
74599: PUSH
74600: LD_INT 2
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PPUSH
74611: CALL_OW 69
74615: IN
74616: NOT
74617: OR
74618: IFFALSE 74622
// exit ;
74620: GO 74669
// for i = 1 to 3 do
74622: LD_ADDR_VAR 0 3
74626: PUSH
74627: DOUBLE
74628: LD_INT 1
74630: DEC
74631: ST_TO_ADDR
74632: LD_INT 3
74634: PUSH
74635: FOR_TO
74636: IFFALSE 74667
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74638: LD_VAR 0 1
74642: PPUSH
74643: CALL_OW 250
74647: PPUSH
74648: LD_VAR 0 1
74652: PPUSH
74653: CALL_OW 251
74657: PPUSH
74658: LD_INT 1
74660: PPUSH
74661: CALL_OW 453
74665: GO 74635
74667: POP
74668: POP
// end ;
74669: LD_VAR 0 2
74673: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74674: LD_INT 0
74676: PPUSH
74677: PPUSH
74678: PPUSH
74679: PPUSH
74680: PPUSH
74681: PPUSH
// if not unit or not enemy_unit then
74682: LD_VAR 0 1
74686: NOT
74687: PUSH
74688: LD_VAR 0 2
74692: NOT
74693: OR
74694: IFFALSE 74698
// exit ;
74696: GO 75165
// if GetLives ( i ) < 250 then
74698: LD_VAR 0 4
74702: PPUSH
74703: CALL_OW 256
74707: PUSH
74708: LD_INT 250
74710: LESS
74711: IFFALSE 74724
// begin ComAutodestruct ( i ) ;
74713: LD_VAR 0 4
74717: PPUSH
74718: CALL 74572 0 1
// exit ;
74722: GO 75165
// end ; x := GetX ( enemy_unit ) ;
74724: LD_ADDR_VAR 0 7
74728: PUSH
74729: LD_VAR 0 2
74733: PPUSH
74734: CALL_OW 250
74738: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74739: LD_ADDR_VAR 0 8
74743: PUSH
74744: LD_VAR 0 2
74748: PPUSH
74749: CALL_OW 251
74753: ST_TO_ADDR
// if not x or not y then
74754: LD_VAR 0 7
74758: NOT
74759: PUSH
74760: LD_VAR 0 8
74764: NOT
74765: OR
74766: IFFALSE 74770
// exit ;
74768: GO 75165
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74770: LD_ADDR_VAR 0 6
74774: PUSH
74775: LD_VAR 0 7
74779: PPUSH
74780: LD_INT 0
74782: PPUSH
74783: LD_INT 4
74785: PPUSH
74786: CALL_OW 272
74790: PUSH
74791: LD_VAR 0 8
74795: PPUSH
74796: LD_INT 0
74798: PPUSH
74799: LD_INT 4
74801: PPUSH
74802: CALL_OW 273
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: PUSH
74811: LD_VAR 0 7
74815: PPUSH
74816: LD_INT 1
74818: PPUSH
74819: LD_INT 4
74821: PPUSH
74822: CALL_OW 272
74826: PUSH
74827: LD_VAR 0 8
74831: PPUSH
74832: LD_INT 1
74834: PPUSH
74835: LD_INT 4
74837: PPUSH
74838: CALL_OW 273
74842: PUSH
74843: EMPTY
74844: LIST
74845: LIST
74846: PUSH
74847: LD_VAR 0 7
74851: PPUSH
74852: LD_INT 2
74854: PPUSH
74855: LD_INT 4
74857: PPUSH
74858: CALL_OW 272
74862: PUSH
74863: LD_VAR 0 8
74867: PPUSH
74868: LD_INT 2
74870: PPUSH
74871: LD_INT 4
74873: PPUSH
74874: CALL_OW 273
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: PUSH
74883: LD_VAR 0 7
74887: PPUSH
74888: LD_INT 3
74890: PPUSH
74891: LD_INT 4
74893: PPUSH
74894: CALL_OW 272
74898: PUSH
74899: LD_VAR 0 8
74903: PPUSH
74904: LD_INT 3
74906: PPUSH
74907: LD_INT 4
74909: PPUSH
74910: CALL_OW 273
74914: PUSH
74915: EMPTY
74916: LIST
74917: LIST
74918: PUSH
74919: LD_VAR 0 7
74923: PPUSH
74924: LD_INT 4
74926: PPUSH
74927: LD_INT 4
74929: PPUSH
74930: CALL_OW 272
74934: PUSH
74935: LD_VAR 0 8
74939: PPUSH
74940: LD_INT 4
74942: PPUSH
74943: LD_INT 4
74945: PPUSH
74946: CALL_OW 273
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: PUSH
74955: LD_VAR 0 7
74959: PPUSH
74960: LD_INT 5
74962: PPUSH
74963: LD_INT 4
74965: PPUSH
74966: CALL_OW 272
74970: PUSH
74971: LD_VAR 0 8
74975: PPUSH
74976: LD_INT 5
74978: PPUSH
74979: LD_INT 4
74981: PPUSH
74982: CALL_OW 273
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: ST_TO_ADDR
// for i = tmp downto 1 do
74999: LD_ADDR_VAR 0 4
75003: PUSH
75004: DOUBLE
75005: LD_VAR 0 6
75009: INC
75010: ST_TO_ADDR
75011: LD_INT 1
75013: PUSH
75014: FOR_DOWNTO
75015: IFFALSE 75116
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75017: LD_VAR 0 6
75021: PUSH
75022: LD_VAR 0 4
75026: ARRAY
75027: PUSH
75028: LD_INT 1
75030: ARRAY
75031: PPUSH
75032: LD_VAR 0 6
75036: PUSH
75037: LD_VAR 0 4
75041: ARRAY
75042: PUSH
75043: LD_INT 2
75045: ARRAY
75046: PPUSH
75047: CALL_OW 488
75051: NOT
75052: PUSH
75053: LD_VAR 0 6
75057: PUSH
75058: LD_VAR 0 4
75062: ARRAY
75063: PUSH
75064: LD_INT 1
75066: ARRAY
75067: PPUSH
75068: LD_VAR 0 6
75072: PUSH
75073: LD_VAR 0 4
75077: ARRAY
75078: PUSH
75079: LD_INT 2
75081: ARRAY
75082: PPUSH
75083: CALL_OW 428
75087: PUSH
75088: LD_INT 0
75090: NONEQUAL
75091: OR
75092: IFFALSE 75114
// tmp := Delete ( tmp , i ) ;
75094: LD_ADDR_VAR 0 6
75098: PUSH
75099: LD_VAR 0 6
75103: PPUSH
75104: LD_VAR 0 4
75108: PPUSH
75109: CALL_OW 3
75113: ST_TO_ADDR
75114: GO 75014
75116: POP
75117: POP
// j := GetClosestHex ( unit , tmp ) ;
75118: LD_ADDR_VAR 0 5
75122: PUSH
75123: LD_VAR 0 1
75127: PPUSH
75128: LD_VAR 0 6
75132: PPUSH
75133: CALL 74420 0 2
75137: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75138: LD_VAR 0 1
75142: PPUSH
75143: LD_VAR 0 5
75147: PUSH
75148: LD_INT 1
75150: ARRAY
75151: PPUSH
75152: LD_VAR 0 5
75156: PUSH
75157: LD_INT 2
75159: ARRAY
75160: PPUSH
75161: CALL_OW 111
// end ;
75165: LD_VAR 0 3
75169: RET
// export function PrepareApemanSoldier ( ) ; begin
75170: LD_INT 0
75172: PPUSH
// uc_nation := 0 ;
75173: LD_ADDR_OWVAR 21
75177: PUSH
75178: LD_INT 0
75180: ST_TO_ADDR
// hc_sex := sex_male ;
75181: LD_ADDR_OWVAR 27
75185: PUSH
75186: LD_INT 1
75188: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75189: LD_ADDR_OWVAR 28
75193: PUSH
75194: LD_INT 15
75196: ST_TO_ADDR
// hc_gallery :=  ;
75197: LD_ADDR_OWVAR 33
75201: PUSH
75202: LD_STRING 
75204: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75205: LD_ADDR_OWVAR 31
75209: PUSH
75210: LD_INT 0
75212: PPUSH
75213: LD_INT 3
75215: PPUSH
75216: CALL_OW 12
75220: PUSH
75221: LD_INT 0
75223: PPUSH
75224: LD_INT 3
75226: PPUSH
75227: CALL_OW 12
75231: PUSH
75232: LD_INT 0
75234: PUSH
75235: LD_INT 0
75237: PUSH
75238: EMPTY
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: ST_TO_ADDR
// end ;
75244: LD_VAR 0 1
75248: RET
// export function PrepareApemanEngineer ( ) ; begin
75249: LD_INT 0
75251: PPUSH
// uc_nation := 0 ;
75252: LD_ADDR_OWVAR 21
75256: PUSH
75257: LD_INT 0
75259: ST_TO_ADDR
// hc_sex := sex_male ;
75260: LD_ADDR_OWVAR 27
75264: PUSH
75265: LD_INT 1
75267: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75268: LD_ADDR_OWVAR 28
75272: PUSH
75273: LD_INT 16
75275: ST_TO_ADDR
// hc_gallery :=  ;
75276: LD_ADDR_OWVAR 33
75280: PUSH
75281: LD_STRING 
75283: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75284: LD_ADDR_OWVAR 31
75288: PUSH
75289: LD_INT 0
75291: PPUSH
75292: LD_INT 3
75294: PPUSH
75295: CALL_OW 12
75299: PUSH
75300: LD_INT 0
75302: PPUSH
75303: LD_INT 3
75305: PPUSH
75306: CALL_OW 12
75310: PUSH
75311: LD_INT 0
75313: PUSH
75314: LD_INT 0
75316: PUSH
75317: EMPTY
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: ST_TO_ADDR
// end ;
75323: LD_VAR 0 1
75327: RET
// export function PrepareApeman ( agressivity ) ; begin
75328: LD_INT 0
75330: PPUSH
// uc_side := 0 ;
75331: LD_ADDR_OWVAR 20
75335: PUSH
75336: LD_INT 0
75338: ST_TO_ADDR
// uc_nation := 0 ;
75339: LD_ADDR_OWVAR 21
75343: PUSH
75344: LD_INT 0
75346: ST_TO_ADDR
// hc_sex := sex_male ;
75347: LD_ADDR_OWVAR 27
75351: PUSH
75352: LD_INT 1
75354: ST_TO_ADDR
// hc_class := class_apeman ;
75355: LD_ADDR_OWVAR 28
75359: PUSH
75360: LD_INT 12
75362: ST_TO_ADDR
// hc_gallery :=  ;
75363: LD_ADDR_OWVAR 33
75367: PUSH
75368: LD_STRING 
75370: ST_TO_ADDR
// if agressivity = 0 then
75371: LD_VAR 0 1
75375: PUSH
75376: LD_INT 0
75378: EQUAL
75379: IFFALSE 75391
// hc_agressivity := 0 else
75381: LD_ADDR_OWVAR 35
75385: PUSH
75386: LD_INT 0
75388: ST_TO_ADDR
75389: GO 75412
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75391: LD_ADDR_OWVAR 35
75395: PUSH
75396: LD_VAR 0 1
75400: NEG
75401: PPUSH
75402: LD_VAR 0 1
75406: PPUSH
75407: CALL_OW 12
75411: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75412: LD_ADDR_OWVAR 31
75416: PUSH
75417: LD_INT 0
75419: PPUSH
75420: LD_INT 3
75422: PPUSH
75423: CALL_OW 12
75427: PUSH
75428: LD_INT 0
75430: PPUSH
75431: LD_INT 3
75433: PPUSH
75434: CALL_OW 12
75438: PUSH
75439: LD_INT 0
75441: PUSH
75442: LD_INT 0
75444: PUSH
75445: EMPTY
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: ST_TO_ADDR
// end ;
75451: LD_VAR 0 2
75455: RET
// export function PrepareTiger ( agressivity ) ; begin
75456: LD_INT 0
75458: PPUSH
// uc_side := 0 ;
75459: LD_ADDR_OWVAR 20
75463: PUSH
75464: LD_INT 0
75466: ST_TO_ADDR
// uc_nation := 0 ;
75467: LD_ADDR_OWVAR 21
75471: PUSH
75472: LD_INT 0
75474: ST_TO_ADDR
// hc_class := class_tiger ;
75475: LD_ADDR_OWVAR 28
75479: PUSH
75480: LD_INT 14
75482: ST_TO_ADDR
// hc_gallery :=  ;
75483: LD_ADDR_OWVAR 33
75487: PUSH
75488: LD_STRING 
75490: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75491: LD_ADDR_OWVAR 35
75495: PUSH
75496: LD_VAR 0 1
75500: NEG
75501: PPUSH
75502: LD_VAR 0 1
75506: PPUSH
75507: CALL_OW 12
75511: ST_TO_ADDR
// end ;
75512: LD_VAR 0 2
75516: RET
// export function PrepareEnchidna ( ) ; begin
75517: LD_INT 0
75519: PPUSH
// uc_side := 0 ;
75520: LD_ADDR_OWVAR 20
75524: PUSH
75525: LD_INT 0
75527: ST_TO_ADDR
// uc_nation := 0 ;
75528: LD_ADDR_OWVAR 21
75532: PUSH
75533: LD_INT 0
75535: ST_TO_ADDR
// hc_class := class_baggie ;
75536: LD_ADDR_OWVAR 28
75540: PUSH
75541: LD_INT 13
75543: ST_TO_ADDR
// hc_gallery :=  ;
75544: LD_ADDR_OWVAR 33
75548: PUSH
75549: LD_STRING 
75551: ST_TO_ADDR
// end ;
75552: LD_VAR 0 1
75556: RET
// export function PrepareFrog ( ) ; begin
75557: LD_INT 0
75559: PPUSH
// uc_side := 0 ;
75560: LD_ADDR_OWVAR 20
75564: PUSH
75565: LD_INT 0
75567: ST_TO_ADDR
// uc_nation := 0 ;
75568: LD_ADDR_OWVAR 21
75572: PUSH
75573: LD_INT 0
75575: ST_TO_ADDR
// hc_class := class_frog ;
75576: LD_ADDR_OWVAR 28
75580: PUSH
75581: LD_INT 19
75583: ST_TO_ADDR
// hc_gallery :=  ;
75584: LD_ADDR_OWVAR 33
75588: PUSH
75589: LD_STRING 
75591: ST_TO_ADDR
// end ;
75592: LD_VAR 0 1
75596: RET
// export function PrepareFish ( ) ; begin
75597: LD_INT 0
75599: PPUSH
// uc_side := 0 ;
75600: LD_ADDR_OWVAR 20
75604: PUSH
75605: LD_INT 0
75607: ST_TO_ADDR
// uc_nation := 0 ;
75608: LD_ADDR_OWVAR 21
75612: PUSH
75613: LD_INT 0
75615: ST_TO_ADDR
// hc_class := class_fish ;
75616: LD_ADDR_OWVAR 28
75620: PUSH
75621: LD_INT 20
75623: ST_TO_ADDR
// hc_gallery :=  ;
75624: LD_ADDR_OWVAR 33
75628: PUSH
75629: LD_STRING 
75631: ST_TO_ADDR
// end ;
75632: LD_VAR 0 1
75636: RET
// export function PrepareBird ( ) ; begin
75637: LD_INT 0
75639: PPUSH
// uc_side := 0 ;
75640: LD_ADDR_OWVAR 20
75644: PUSH
75645: LD_INT 0
75647: ST_TO_ADDR
// uc_nation := 0 ;
75648: LD_ADDR_OWVAR 21
75652: PUSH
75653: LD_INT 0
75655: ST_TO_ADDR
// hc_class := class_phororhacos ;
75656: LD_ADDR_OWVAR 28
75660: PUSH
75661: LD_INT 18
75663: ST_TO_ADDR
// hc_gallery :=  ;
75664: LD_ADDR_OWVAR 33
75668: PUSH
75669: LD_STRING 
75671: ST_TO_ADDR
// end ;
75672: LD_VAR 0 1
75676: RET
// export function PrepareHorse ( ) ; begin
75677: LD_INT 0
75679: PPUSH
// uc_side := 0 ;
75680: LD_ADDR_OWVAR 20
75684: PUSH
75685: LD_INT 0
75687: ST_TO_ADDR
// uc_nation := 0 ;
75688: LD_ADDR_OWVAR 21
75692: PUSH
75693: LD_INT 0
75695: ST_TO_ADDR
// hc_class := class_horse ;
75696: LD_ADDR_OWVAR 28
75700: PUSH
75701: LD_INT 21
75703: ST_TO_ADDR
// hc_gallery :=  ;
75704: LD_ADDR_OWVAR 33
75708: PUSH
75709: LD_STRING 
75711: ST_TO_ADDR
// end ;
75712: LD_VAR 0 1
75716: RET
// export function PrepareMastodont ( ) ; begin
75717: LD_INT 0
75719: PPUSH
// uc_side := 0 ;
75720: LD_ADDR_OWVAR 20
75724: PUSH
75725: LD_INT 0
75727: ST_TO_ADDR
// uc_nation := 0 ;
75728: LD_ADDR_OWVAR 21
75732: PUSH
75733: LD_INT 0
75735: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75736: LD_ADDR_OWVAR 37
75740: PUSH
75741: LD_INT 31
75743: ST_TO_ADDR
// vc_control := control_rider ;
75744: LD_ADDR_OWVAR 38
75748: PUSH
75749: LD_INT 4
75751: ST_TO_ADDR
// end ;
75752: LD_VAR 0 1
75756: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75757: LD_INT 0
75759: PPUSH
75760: PPUSH
75761: PPUSH
// uc_side = 0 ;
75762: LD_ADDR_OWVAR 20
75766: PUSH
75767: LD_INT 0
75769: ST_TO_ADDR
// uc_nation = 0 ;
75770: LD_ADDR_OWVAR 21
75774: PUSH
75775: LD_INT 0
75777: ST_TO_ADDR
// InitHc_All ( ) ;
75778: CALL_OW 584
// InitVc ;
75782: CALL_OW 20
// if mastodonts then
75786: LD_VAR 0 6
75790: IFFALSE 75857
// for i = 1 to mastodonts do
75792: LD_ADDR_VAR 0 11
75796: PUSH
75797: DOUBLE
75798: LD_INT 1
75800: DEC
75801: ST_TO_ADDR
75802: LD_VAR 0 6
75806: PUSH
75807: FOR_TO
75808: IFFALSE 75855
// begin vc_chassis := 31 ;
75810: LD_ADDR_OWVAR 37
75814: PUSH
75815: LD_INT 31
75817: ST_TO_ADDR
// vc_control := control_rider ;
75818: LD_ADDR_OWVAR 38
75822: PUSH
75823: LD_INT 4
75825: ST_TO_ADDR
// animal := CreateVehicle ;
75826: LD_ADDR_VAR 0 12
75830: PUSH
75831: CALL_OW 45
75835: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75836: LD_VAR 0 12
75840: PPUSH
75841: LD_VAR 0 8
75845: PPUSH
75846: LD_INT 0
75848: PPUSH
75849: CALL 77985 0 3
// end ;
75853: GO 75807
75855: POP
75856: POP
// if horses then
75857: LD_VAR 0 5
75861: IFFALSE 75928
// for i = 1 to horses do
75863: LD_ADDR_VAR 0 11
75867: PUSH
75868: DOUBLE
75869: LD_INT 1
75871: DEC
75872: ST_TO_ADDR
75873: LD_VAR 0 5
75877: PUSH
75878: FOR_TO
75879: IFFALSE 75926
// begin hc_class := 21 ;
75881: LD_ADDR_OWVAR 28
75885: PUSH
75886: LD_INT 21
75888: ST_TO_ADDR
// hc_gallery :=  ;
75889: LD_ADDR_OWVAR 33
75893: PUSH
75894: LD_STRING 
75896: ST_TO_ADDR
// animal := CreateHuman ;
75897: LD_ADDR_VAR 0 12
75901: PUSH
75902: CALL_OW 44
75906: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75907: LD_VAR 0 12
75911: PPUSH
75912: LD_VAR 0 8
75916: PPUSH
75917: LD_INT 0
75919: PPUSH
75920: CALL 77985 0 3
// end ;
75924: GO 75878
75926: POP
75927: POP
// if birds then
75928: LD_VAR 0 1
75932: IFFALSE 75999
// for i = 1 to birds do
75934: LD_ADDR_VAR 0 11
75938: PUSH
75939: DOUBLE
75940: LD_INT 1
75942: DEC
75943: ST_TO_ADDR
75944: LD_VAR 0 1
75948: PUSH
75949: FOR_TO
75950: IFFALSE 75997
// begin hc_class := 18 ;
75952: LD_ADDR_OWVAR 28
75956: PUSH
75957: LD_INT 18
75959: ST_TO_ADDR
// hc_gallery =  ;
75960: LD_ADDR_OWVAR 33
75964: PUSH
75965: LD_STRING 
75967: ST_TO_ADDR
// animal := CreateHuman ;
75968: LD_ADDR_VAR 0 12
75972: PUSH
75973: CALL_OW 44
75977: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75978: LD_VAR 0 12
75982: PPUSH
75983: LD_VAR 0 8
75987: PPUSH
75988: LD_INT 0
75990: PPUSH
75991: CALL 77985 0 3
// end ;
75995: GO 75949
75997: POP
75998: POP
// if tigers then
75999: LD_VAR 0 2
76003: IFFALSE 76087
// for i = 1 to tigers do
76005: LD_ADDR_VAR 0 11
76009: PUSH
76010: DOUBLE
76011: LD_INT 1
76013: DEC
76014: ST_TO_ADDR
76015: LD_VAR 0 2
76019: PUSH
76020: FOR_TO
76021: IFFALSE 76085
// begin hc_class = class_tiger ;
76023: LD_ADDR_OWVAR 28
76027: PUSH
76028: LD_INT 14
76030: ST_TO_ADDR
// hc_gallery =  ;
76031: LD_ADDR_OWVAR 33
76035: PUSH
76036: LD_STRING 
76038: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76039: LD_ADDR_OWVAR 35
76043: PUSH
76044: LD_INT 7
76046: NEG
76047: PPUSH
76048: LD_INT 7
76050: PPUSH
76051: CALL_OW 12
76055: ST_TO_ADDR
// animal := CreateHuman ;
76056: LD_ADDR_VAR 0 12
76060: PUSH
76061: CALL_OW 44
76065: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76066: LD_VAR 0 12
76070: PPUSH
76071: LD_VAR 0 8
76075: PPUSH
76076: LD_INT 0
76078: PPUSH
76079: CALL 77985 0 3
// end ;
76083: GO 76020
76085: POP
76086: POP
// if apemans then
76087: LD_VAR 0 3
76091: IFFALSE 76214
// for i = 1 to apemans do
76093: LD_ADDR_VAR 0 11
76097: PUSH
76098: DOUBLE
76099: LD_INT 1
76101: DEC
76102: ST_TO_ADDR
76103: LD_VAR 0 3
76107: PUSH
76108: FOR_TO
76109: IFFALSE 76212
// begin hc_class = class_apeman ;
76111: LD_ADDR_OWVAR 28
76115: PUSH
76116: LD_INT 12
76118: ST_TO_ADDR
// hc_gallery =  ;
76119: LD_ADDR_OWVAR 33
76123: PUSH
76124: LD_STRING 
76126: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76127: LD_ADDR_OWVAR 35
76131: PUSH
76132: LD_INT 2
76134: NEG
76135: PPUSH
76136: LD_INT 2
76138: PPUSH
76139: CALL_OW 12
76143: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76144: LD_ADDR_OWVAR 31
76148: PUSH
76149: LD_INT 1
76151: PPUSH
76152: LD_INT 3
76154: PPUSH
76155: CALL_OW 12
76159: PUSH
76160: LD_INT 1
76162: PPUSH
76163: LD_INT 3
76165: PPUSH
76166: CALL_OW 12
76170: PUSH
76171: LD_INT 0
76173: PUSH
76174: LD_INT 0
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: LIST
76181: LIST
76182: ST_TO_ADDR
// animal := CreateHuman ;
76183: LD_ADDR_VAR 0 12
76187: PUSH
76188: CALL_OW 44
76192: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76193: LD_VAR 0 12
76197: PPUSH
76198: LD_VAR 0 8
76202: PPUSH
76203: LD_INT 0
76205: PPUSH
76206: CALL 77985 0 3
// end ;
76210: GO 76108
76212: POP
76213: POP
// if enchidnas then
76214: LD_VAR 0 4
76218: IFFALSE 76285
// for i = 1 to enchidnas do
76220: LD_ADDR_VAR 0 11
76224: PUSH
76225: DOUBLE
76226: LD_INT 1
76228: DEC
76229: ST_TO_ADDR
76230: LD_VAR 0 4
76234: PUSH
76235: FOR_TO
76236: IFFALSE 76283
// begin hc_class = 13 ;
76238: LD_ADDR_OWVAR 28
76242: PUSH
76243: LD_INT 13
76245: ST_TO_ADDR
// hc_gallery =  ;
76246: LD_ADDR_OWVAR 33
76250: PUSH
76251: LD_STRING 
76253: ST_TO_ADDR
// animal := CreateHuman ;
76254: LD_ADDR_VAR 0 12
76258: PUSH
76259: CALL_OW 44
76263: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76264: LD_VAR 0 12
76268: PPUSH
76269: LD_VAR 0 8
76273: PPUSH
76274: LD_INT 0
76276: PPUSH
76277: CALL 77985 0 3
// end ;
76281: GO 76235
76283: POP
76284: POP
// if fishes then
76285: LD_VAR 0 7
76289: IFFALSE 76356
// for i = 1 to fishes do
76291: LD_ADDR_VAR 0 11
76295: PUSH
76296: DOUBLE
76297: LD_INT 1
76299: DEC
76300: ST_TO_ADDR
76301: LD_VAR 0 7
76305: PUSH
76306: FOR_TO
76307: IFFALSE 76354
// begin hc_class = 20 ;
76309: LD_ADDR_OWVAR 28
76313: PUSH
76314: LD_INT 20
76316: ST_TO_ADDR
// hc_gallery =  ;
76317: LD_ADDR_OWVAR 33
76321: PUSH
76322: LD_STRING 
76324: ST_TO_ADDR
// animal := CreateHuman ;
76325: LD_ADDR_VAR 0 12
76329: PUSH
76330: CALL_OW 44
76334: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76335: LD_VAR 0 12
76339: PPUSH
76340: LD_VAR 0 9
76344: PPUSH
76345: LD_INT 0
76347: PPUSH
76348: CALL 77985 0 3
// end ;
76352: GO 76306
76354: POP
76355: POP
// end ;
76356: LD_VAR 0 10
76360: RET
// export function WantHeal ( sci , unit ) ; begin
76361: LD_INT 0
76363: PPUSH
// if GetTaskList ( sci ) > 0 then
76364: LD_VAR 0 1
76368: PPUSH
76369: CALL_OW 437
76373: PUSH
76374: LD_INT 0
76376: GREATER
76377: IFFALSE 76447
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76379: LD_VAR 0 1
76383: PPUSH
76384: CALL_OW 437
76388: PUSH
76389: LD_INT 1
76391: ARRAY
76392: PUSH
76393: LD_INT 1
76395: ARRAY
76396: PUSH
76397: LD_STRING l
76399: EQUAL
76400: PUSH
76401: LD_VAR 0 1
76405: PPUSH
76406: CALL_OW 437
76410: PUSH
76411: LD_INT 1
76413: ARRAY
76414: PUSH
76415: LD_INT 4
76417: ARRAY
76418: PUSH
76419: LD_VAR 0 2
76423: EQUAL
76424: AND
76425: IFFALSE 76437
// result := true else
76427: LD_ADDR_VAR 0 3
76431: PUSH
76432: LD_INT 1
76434: ST_TO_ADDR
76435: GO 76445
// result := false ;
76437: LD_ADDR_VAR 0 3
76441: PUSH
76442: LD_INT 0
76444: ST_TO_ADDR
// end else
76445: GO 76455
// result := false ;
76447: LD_ADDR_VAR 0 3
76451: PUSH
76452: LD_INT 0
76454: ST_TO_ADDR
// end ;
76455: LD_VAR 0 3
76459: RET
// export function HealTarget ( sci ) ; begin
76460: LD_INT 0
76462: PPUSH
// if not sci then
76463: LD_VAR 0 1
76467: NOT
76468: IFFALSE 76472
// exit ;
76470: GO 76537
// result := 0 ;
76472: LD_ADDR_VAR 0 2
76476: PUSH
76477: LD_INT 0
76479: ST_TO_ADDR
// if GetTaskList ( sci ) then
76480: LD_VAR 0 1
76484: PPUSH
76485: CALL_OW 437
76489: IFFALSE 76537
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76491: LD_VAR 0 1
76495: PPUSH
76496: CALL_OW 437
76500: PUSH
76501: LD_INT 1
76503: ARRAY
76504: PUSH
76505: LD_INT 1
76507: ARRAY
76508: PUSH
76509: LD_STRING l
76511: EQUAL
76512: IFFALSE 76537
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76514: LD_ADDR_VAR 0 2
76518: PUSH
76519: LD_VAR 0 1
76523: PPUSH
76524: CALL_OW 437
76528: PUSH
76529: LD_INT 1
76531: ARRAY
76532: PUSH
76533: LD_INT 4
76535: ARRAY
76536: ST_TO_ADDR
// end ;
76537: LD_VAR 0 2
76541: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76542: LD_INT 0
76544: PPUSH
76545: PPUSH
76546: PPUSH
76547: PPUSH
// if not base_units then
76548: LD_VAR 0 1
76552: NOT
76553: IFFALSE 76557
// exit ;
76555: GO 76644
// result := false ;
76557: LD_ADDR_VAR 0 2
76561: PUSH
76562: LD_INT 0
76564: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76565: LD_ADDR_VAR 0 5
76569: PUSH
76570: LD_VAR 0 1
76574: PPUSH
76575: LD_INT 21
76577: PUSH
76578: LD_INT 3
76580: PUSH
76581: EMPTY
76582: LIST
76583: LIST
76584: PPUSH
76585: CALL_OW 72
76589: ST_TO_ADDR
// if not tmp then
76590: LD_VAR 0 5
76594: NOT
76595: IFFALSE 76599
// exit ;
76597: GO 76644
// for i in tmp do
76599: LD_ADDR_VAR 0 3
76603: PUSH
76604: LD_VAR 0 5
76608: PUSH
76609: FOR_IN
76610: IFFALSE 76642
// begin result := EnemyInRange ( i , 22 ) ;
76612: LD_ADDR_VAR 0 2
76616: PUSH
76617: LD_VAR 0 3
76621: PPUSH
76622: LD_INT 22
76624: PPUSH
76625: CALL 74222 0 2
76629: ST_TO_ADDR
// if result then
76630: LD_VAR 0 2
76634: IFFALSE 76640
// exit ;
76636: POP
76637: POP
76638: GO 76644
// end ;
76640: GO 76609
76642: POP
76643: POP
// end ;
76644: LD_VAR 0 2
76648: RET
// export function FilterByTag ( units , tag ) ; begin
76649: LD_INT 0
76651: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76652: LD_ADDR_VAR 0 3
76656: PUSH
76657: LD_VAR 0 1
76661: PPUSH
76662: LD_INT 120
76664: PUSH
76665: LD_VAR 0 2
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: PPUSH
76674: CALL_OW 72
76678: ST_TO_ADDR
// end ;
76679: LD_VAR 0 3
76683: RET
// export function IsDriver ( un ) ; begin
76684: LD_INT 0
76686: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76687: LD_ADDR_VAR 0 2
76691: PUSH
76692: LD_VAR 0 1
76696: PUSH
76697: LD_INT 55
76699: PUSH
76700: EMPTY
76701: LIST
76702: PPUSH
76703: CALL_OW 69
76707: IN
76708: ST_TO_ADDR
// end ;
76709: LD_VAR 0 2
76713: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76714: LD_INT 0
76716: PPUSH
76717: PPUSH
// list := [ ] ;
76718: LD_ADDR_VAR 0 5
76722: PUSH
76723: EMPTY
76724: ST_TO_ADDR
// case d of 0 :
76725: LD_VAR 0 3
76729: PUSH
76730: LD_INT 0
76732: DOUBLE
76733: EQUAL
76734: IFTRUE 76738
76736: GO 76871
76738: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76739: LD_ADDR_VAR 0 5
76743: PUSH
76744: LD_VAR 0 1
76748: PUSH
76749: LD_INT 4
76751: MINUS
76752: PUSH
76753: LD_VAR 0 2
76757: PUSH
76758: LD_INT 4
76760: MINUS
76761: PUSH
76762: LD_INT 2
76764: PUSH
76765: EMPTY
76766: LIST
76767: LIST
76768: LIST
76769: PUSH
76770: LD_VAR 0 1
76774: PUSH
76775: LD_INT 3
76777: MINUS
76778: PUSH
76779: LD_VAR 0 2
76783: PUSH
76784: LD_INT 1
76786: PUSH
76787: EMPTY
76788: LIST
76789: LIST
76790: LIST
76791: PUSH
76792: LD_VAR 0 1
76796: PUSH
76797: LD_INT 4
76799: PLUS
76800: PUSH
76801: LD_VAR 0 2
76805: PUSH
76806: LD_INT 4
76808: PUSH
76809: EMPTY
76810: LIST
76811: LIST
76812: LIST
76813: PUSH
76814: LD_VAR 0 1
76818: PUSH
76819: LD_INT 3
76821: PLUS
76822: PUSH
76823: LD_VAR 0 2
76827: PUSH
76828: LD_INT 3
76830: PLUS
76831: PUSH
76832: LD_INT 5
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: LIST
76839: PUSH
76840: LD_VAR 0 1
76844: PUSH
76845: LD_VAR 0 2
76849: PUSH
76850: LD_INT 4
76852: PLUS
76853: PUSH
76854: LD_INT 0
76856: PUSH
76857: EMPTY
76858: LIST
76859: LIST
76860: LIST
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: LIST
76866: LIST
76867: LIST
76868: ST_TO_ADDR
// end ; 1 :
76869: GO 77569
76871: LD_INT 1
76873: DOUBLE
76874: EQUAL
76875: IFTRUE 76879
76877: GO 77012
76879: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76880: LD_ADDR_VAR 0 5
76884: PUSH
76885: LD_VAR 0 1
76889: PUSH
76890: LD_VAR 0 2
76894: PUSH
76895: LD_INT 4
76897: MINUS
76898: PUSH
76899: LD_INT 3
76901: PUSH
76902: EMPTY
76903: LIST
76904: LIST
76905: LIST
76906: PUSH
76907: LD_VAR 0 1
76911: PUSH
76912: LD_INT 3
76914: MINUS
76915: PUSH
76916: LD_VAR 0 2
76920: PUSH
76921: LD_INT 3
76923: MINUS
76924: PUSH
76925: LD_INT 2
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: LIST
76932: PUSH
76933: LD_VAR 0 1
76937: PUSH
76938: LD_INT 4
76940: MINUS
76941: PUSH
76942: LD_VAR 0 2
76946: PUSH
76947: LD_INT 1
76949: PUSH
76950: EMPTY
76951: LIST
76952: LIST
76953: LIST
76954: PUSH
76955: LD_VAR 0 1
76959: PUSH
76960: LD_VAR 0 2
76964: PUSH
76965: LD_INT 3
76967: PLUS
76968: PUSH
76969: LD_INT 0
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: LIST
76976: PUSH
76977: LD_VAR 0 1
76981: PUSH
76982: LD_INT 4
76984: PLUS
76985: PUSH
76986: LD_VAR 0 2
76990: PUSH
76991: LD_INT 4
76993: PLUS
76994: PUSH
76995: LD_INT 5
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: LIST
77002: PUSH
77003: EMPTY
77004: LIST
77005: LIST
77006: LIST
77007: LIST
77008: LIST
77009: ST_TO_ADDR
// end ; 2 :
77010: GO 77569
77012: LD_INT 2
77014: DOUBLE
77015: EQUAL
77016: IFTRUE 77020
77018: GO 77149
77020: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77021: LD_ADDR_VAR 0 5
77025: PUSH
77026: LD_VAR 0 1
77030: PUSH
77031: LD_VAR 0 2
77035: PUSH
77036: LD_INT 3
77038: MINUS
77039: PUSH
77040: LD_INT 3
77042: PUSH
77043: EMPTY
77044: LIST
77045: LIST
77046: LIST
77047: PUSH
77048: LD_VAR 0 1
77052: PUSH
77053: LD_INT 4
77055: PLUS
77056: PUSH
77057: LD_VAR 0 2
77061: PUSH
77062: LD_INT 4
77064: PUSH
77065: EMPTY
77066: LIST
77067: LIST
77068: LIST
77069: PUSH
77070: LD_VAR 0 1
77074: PUSH
77075: LD_VAR 0 2
77079: PUSH
77080: LD_INT 4
77082: PLUS
77083: PUSH
77084: LD_INT 0
77086: PUSH
77087: EMPTY
77088: LIST
77089: LIST
77090: LIST
77091: PUSH
77092: LD_VAR 0 1
77096: PUSH
77097: LD_INT 3
77099: MINUS
77100: PUSH
77101: LD_VAR 0 2
77105: PUSH
77106: LD_INT 1
77108: PUSH
77109: EMPTY
77110: LIST
77111: LIST
77112: LIST
77113: PUSH
77114: LD_VAR 0 1
77118: PUSH
77119: LD_INT 4
77121: MINUS
77122: PUSH
77123: LD_VAR 0 2
77127: PUSH
77128: LD_INT 4
77130: MINUS
77131: PUSH
77132: LD_INT 2
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: LIST
77139: PUSH
77140: EMPTY
77141: LIST
77142: LIST
77143: LIST
77144: LIST
77145: LIST
77146: ST_TO_ADDR
// end ; 3 :
77147: GO 77569
77149: LD_INT 3
77151: DOUBLE
77152: EQUAL
77153: IFTRUE 77157
77155: GO 77290
77157: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77158: LD_ADDR_VAR 0 5
77162: PUSH
77163: LD_VAR 0 1
77167: PUSH
77168: LD_INT 3
77170: PLUS
77171: PUSH
77172: LD_VAR 0 2
77176: PUSH
77177: LD_INT 4
77179: PUSH
77180: EMPTY
77181: LIST
77182: LIST
77183: LIST
77184: PUSH
77185: LD_VAR 0 1
77189: PUSH
77190: LD_INT 4
77192: PLUS
77193: PUSH
77194: LD_VAR 0 2
77198: PUSH
77199: LD_INT 4
77201: PLUS
77202: PUSH
77203: LD_INT 5
77205: PUSH
77206: EMPTY
77207: LIST
77208: LIST
77209: LIST
77210: PUSH
77211: LD_VAR 0 1
77215: PUSH
77216: LD_INT 4
77218: MINUS
77219: PUSH
77220: LD_VAR 0 2
77224: PUSH
77225: LD_INT 1
77227: PUSH
77228: EMPTY
77229: LIST
77230: LIST
77231: LIST
77232: PUSH
77233: LD_VAR 0 1
77237: PUSH
77238: LD_VAR 0 2
77242: PUSH
77243: LD_INT 4
77245: MINUS
77246: PUSH
77247: LD_INT 3
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: LIST
77254: PUSH
77255: LD_VAR 0 1
77259: PUSH
77260: LD_INT 3
77262: MINUS
77263: PUSH
77264: LD_VAR 0 2
77268: PUSH
77269: LD_INT 3
77271: MINUS
77272: PUSH
77273: LD_INT 2
77275: PUSH
77276: EMPTY
77277: LIST
77278: LIST
77279: LIST
77280: PUSH
77281: EMPTY
77282: LIST
77283: LIST
77284: LIST
77285: LIST
77286: LIST
77287: ST_TO_ADDR
// end ; 4 :
77288: GO 77569
77290: LD_INT 4
77292: DOUBLE
77293: EQUAL
77294: IFTRUE 77298
77296: GO 77431
77298: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77299: LD_ADDR_VAR 0 5
77303: PUSH
77304: LD_VAR 0 1
77308: PUSH
77309: LD_VAR 0 2
77313: PUSH
77314: LD_INT 4
77316: PLUS
77317: PUSH
77318: LD_INT 0
77320: PUSH
77321: EMPTY
77322: LIST
77323: LIST
77324: LIST
77325: PUSH
77326: LD_VAR 0 1
77330: PUSH
77331: LD_INT 3
77333: PLUS
77334: PUSH
77335: LD_VAR 0 2
77339: PUSH
77340: LD_INT 3
77342: PLUS
77343: PUSH
77344: LD_INT 5
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: LIST
77351: PUSH
77352: LD_VAR 0 1
77356: PUSH
77357: LD_INT 4
77359: PLUS
77360: PUSH
77361: LD_VAR 0 2
77365: PUSH
77366: LD_INT 4
77368: PUSH
77369: EMPTY
77370: LIST
77371: LIST
77372: LIST
77373: PUSH
77374: LD_VAR 0 1
77378: PUSH
77379: LD_VAR 0 2
77383: PUSH
77384: LD_INT 3
77386: MINUS
77387: PUSH
77388: LD_INT 3
77390: PUSH
77391: EMPTY
77392: LIST
77393: LIST
77394: LIST
77395: PUSH
77396: LD_VAR 0 1
77400: PUSH
77401: LD_INT 4
77403: MINUS
77404: PUSH
77405: LD_VAR 0 2
77409: PUSH
77410: LD_INT 4
77412: MINUS
77413: PUSH
77414: LD_INT 2
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: LIST
77421: PUSH
77422: EMPTY
77423: LIST
77424: LIST
77425: LIST
77426: LIST
77427: LIST
77428: ST_TO_ADDR
// end ; 5 :
77429: GO 77569
77431: LD_INT 5
77433: DOUBLE
77434: EQUAL
77435: IFTRUE 77439
77437: GO 77568
77439: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77440: LD_ADDR_VAR 0 5
77444: PUSH
77445: LD_VAR 0 1
77449: PUSH
77450: LD_INT 4
77452: MINUS
77453: PUSH
77454: LD_VAR 0 2
77458: PUSH
77459: LD_INT 1
77461: PUSH
77462: EMPTY
77463: LIST
77464: LIST
77465: LIST
77466: PUSH
77467: LD_VAR 0 1
77471: PUSH
77472: LD_VAR 0 2
77476: PUSH
77477: LD_INT 4
77479: MINUS
77480: PUSH
77481: LD_INT 3
77483: PUSH
77484: EMPTY
77485: LIST
77486: LIST
77487: LIST
77488: PUSH
77489: LD_VAR 0 1
77493: PUSH
77494: LD_INT 4
77496: PLUS
77497: PUSH
77498: LD_VAR 0 2
77502: PUSH
77503: LD_INT 4
77505: PLUS
77506: PUSH
77507: LD_INT 5
77509: PUSH
77510: EMPTY
77511: LIST
77512: LIST
77513: LIST
77514: PUSH
77515: LD_VAR 0 1
77519: PUSH
77520: LD_INT 3
77522: PLUS
77523: PUSH
77524: LD_VAR 0 2
77528: PUSH
77529: LD_INT 4
77531: PUSH
77532: EMPTY
77533: LIST
77534: LIST
77535: LIST
77536: PUSH
77537: LD_VAR 0 1
77541: PUSH
77542: LD_VAR 0 2
77546: PUSH
77547: LD_INT 3
77549: PLUS
77550: PUSH
77551: LD_INT 0
77553: PUSH
77554: EMPTY
77555: LIST
77556: LIST
77557: LIST
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: LIST
77563: LIST
77564: LIST
77565: ST_TO_ADDR
// end ; end ;
77566: GO 77569
77568: POP
// result := list ;
77569: LD_ADDR_VAR 0 4
77573: PUSH
77574: LD_VAR 0 5
77578: ST_TO_ADDR
// end ;
77579: LD_VAR 0 4
77583: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77584: LD_INT 0
77586: PPUSH
77587: PPUSH
77588: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77589: LD_VAR 0 1
77593: NOT
77594: PUSH
77595: LD_VAR 0 2
77599: PUSH
77600: LD_INT 1
77602: PUSH
77603: LD_INT 2
77605: PUSH
77606: LD_INT 3
77608: PUSH
77609: LD_INT 4
77611: PUSH
77612: EMPTY
77613: LIST
77614: LIST
77615: LIST
77616: LIST
77617: IN
77618: NOT
77619: OR
77620: IFFALSE 77624
// exit ;
77622: GO 77707
// tmp := [ ] ;
77624: LD_ADDR_VAR 0 5
77628: PUSH
77629: EMPTY
77630: ST_TO_ADDR
// for i in units do
77631: LD_ADDR_VAR 0 4
77635: PUSH
77636: LD_VAR 0 1
77640: PUSH
77641: FOR_IN
77642: IFFALSE 77676
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77644: LD_ADDR_VAR 0 5
77648: PUSH
77649: LD_VAR 0 5
77653: PPUSH
77654: LD_VAR 0 4
77658: PPUSH
77659: LD_VAR 0 2
77663: PPUSH
77664: CALL_OW 259
77668: PPUSH
77669: CALL 79080 0 2
77673: ST_TO_ADDR
77674: GO 77641
77676: POP
77677: POP
// if not tmp then
77678: LD_VAR 0 5
77682: NOT
77683: IFFALSE 77687
// exit ;
77685: GO 77707
// result := SortListByListDesc ( units , tmp ) ;
77687: LD_ADDR_VAR 0 3
77691: PUSH
77692: LD_VAR 0 1
77696: PPUSH
77697: LD_VAR 0 5
77701: PPUSH
77702: CALL_OW 77
77706: ST_TO_ADDR
// end ;
77707: LD_VAR 0 3
77711: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77712: LD_INT 0
77714: PPUSH
77715: PPUSH
77716: PPUSH
// result := false ;
77717: LD_ADDR_VAR 0 3
77721: PUSH
77722: LD_INT 0
77724: ST_TO_ADDR
// if not building then
77725: LD_VAR 0 2
77729: NOT
77730: IFFALSE 77734
// exit ;
77732: GO 77872
// x := GetX ( building ) ;
77734: LD_ADDR_VAR 0 4
77738: PUSH
77739: LD_VAR 0 2
77743: PPUSH
77744: CALL_OW 250
77748: ST_TO_ADDR
// y := GetY ( building ) ;
77749: LD_ADDR_VAR 0 5
77753: PUSH
77754: LD_VAR 0 2
77758: PPUSH
77759: CALL_OW 251
77763: ST_TO_ADDR
// if not x or not y then
77764: LD_VAR 0 4
77768: NOT
77769: PUSH
77770: LD_VAR 0 5
77774: NOT
77775: OR
77776: IFFALSE 77780
// exit ;
77778: GO 77872
// if GetTaskList ( unit ) then
77780: LD_VAR 0 1
77784: PPUSH
77785: CALL_OW 437
77789: IFFALSE 77872
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77791: LD_STRING e
77793: PUSH
77794: LD_VAR 0 1
77798: PPUSH
77799: CALL_OW 437
77803: PUSH
77804: LD_INT 1
77806: ARRAY
77807: PUSH
77808: LD_INT 1
77810: ARRAY
77811: EQUAL
77812: PUSH
77813: LD_VAR 0 4
77817: PUSH
77818: LD_VAR 0 1
77822: PPUSH
77823: CALL_OW 437
77827: PUSH
77828: LD_INT 1
77830: ARRAY
77831: PUSH
77832: LD_INT 2
77834: ARRAY
77835: EQUAL
77836: AND
77837: PUSH
77838: LD_VAR 0 5
77842: PUSH
77843: LD_VAR 0 1
77847: PPUSH
77848: CALL_OW 437
77852: PUSH
77853: LD_INT 1
77855: ARRAY
77856: PUSH
77857: LD_INT 3
77859: ARRAY
77860: EQUAL
77861: AND
77862: IFFALSE 77872
// result := true end ;
77864: LD_ADDR_VAR 0 3
77868: PUSH
77869: LD_INT 1
77871: ST_TO_ADDR
// end ;
77872: LD_VAR 0 3
77876: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77877: LD_INT 0
77879: PPUSH
// result := false ;
77880: LD_ADDR_VAR 0 4
77884: PUSH
77885: LD_INT 0
77887: ST_TO_ADDR
// if GetTaskList ( unit ) then
77888: LD_VAR 0 1
77892: PPUSH
77893: CALL_OW 437
77897: IFFALSE 77980
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77899: LD_STRING M
77901: PUSH
77902: LD_VAR 0 1
77906: PPUSH
77907: CALL_OW 437
77911: PUSH
77912: LD_INT 1
77914: ARRAY
77915: PUSH
77916: LD_INT 1
77918: ARRAY
77919: EQUAL
77920: PUSH
77921: LD_VAR 0 2
77925: PUSH
77926: LD_VAR 0 1
77930: PPUSH
77931: CALL_OW 437
77935: PUSH
77936: LD_INT 1
77938: ARRAY
77939: PUSH
77940: LD_INT 2
77942: ARRAY
77943: EQUAL
77944: AND
77945: PUSH
77946: LD_VAR 0 3
77950: PUSH
77951: LD_VAR 0 1
77955: PPUSH
77956: CALL_OW 437
77960: PUSH
77961: LD_INT 1
77963: ARRAY
77964: PUSH
77965: LD_INT 3
77967: ARRAY
77968: EQUAL
77969: AND
77970: IFFALSE 77980
// result := true ;
77972: LD_ADDR_VAR 0 4
77976: PUSH
77977: LD_INT 1
77979: ST_TO_ADDR
// end ; end ;
77980: LD_VAR 0 4
77984: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77985: LD_INT 0
77987: PPUSH
77988: PPUSH
77989: PPUSH
77990: PPUSH
// if not unit or not area then
77991: LD_VAR 0 1
77995: NOT
77996: PUSH
77997: LD_VAR 0 2
78001: NOT
78002: OR
78003: IFFALSE 78007
// exit ;
78005: GO 78183
// tmp := AreaToList ( area , i ) ;
78007: LD_ADDR_VAR 0 6
78011: PUSH
78012: LD_VAR 0 2
78016: PPUSH
78017: LD_VAR 0 5
78021: PPUSH
78022: CALL_OW 517
78026: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78027: LD_ADDR_VAR 0 5
78031: PUSH
78032: DOUBLE
78033: LD_INT 1
78035: DEC
78036: ST_TO_ADDR
78037: LD_VAR 0 6
78041: PUSH
78042: LD_INT 1
78044: ARRAY
78045: PUSH
78046: FOR_TO
78047: IFFALSE 78181
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78049: LD_ADDR_VAR 0 7
78053: PUSH
78054: LD_VAR 0 6
78058: PUSH
78059: LD_INT 1
78061: ARRAY
78062: PUSH
78063: LD_VAR 0 5
78067: ARRAY
78068: PUSH
78069: LD_VAR 0 6
78073: PUSH
78074: LD_INT 2
78076: ARRAY
78077: PUSH
78078: LD_VAR 0 5
78082: ARRAY
78083: PUSH
78084: EMPTY
78085: LIST
78086: LIST
78087: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78088: LD_INT 92
78090: PUSH
78091: LD_VAR 0 7
78095: PUSH
78096: LD_INT 1
78098: ARRAY
78099: PUSH
78100: LD_VAR 0 7
78104: PUSH
78105: LD_INT 2
78107: ARRAY
78108: PUSH
78109: LD_INT 2
78111: PUSH
78112: EMPTY
78113: LIST
78114: LIST
78115: LIST
78116: LIST
78117: PPUSH
78118: CALL_OW 69
78122: PUSH
78123: LD_INT 0
78125: EQUAL
78126: IFFALSE 78179
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78128: LD_VAR 0 1
78132: PPUSH
78133: LD_VAR 0 7
78137: PUSH
78138: LD_INT 1
78140: ARRAY
78141: PPUSH
78142: LD_VAR 0 7
78146: PUSH
78147: LD_INT 2
78149: ARRAY
78150: PPUSH
78151: LD_VAR 0 3
78155: PPUSH
78156: CALL_OW 48
// result := IsPlaced ( unit ) ;
78160: LD_ADDR_VAR 0 4
78164: PUSH
78165: LD_VAR 0 1
78169: PPUSH
78170: CALL_OW 305
78174: ST_TO_ADDR
// exit ;
78175: POP
78176: POP
78177: GO 78183
// end ; end ;
78179: GO 78046
78181: POP
78182: POP
// end ;
78183: LD_VAR 0 4
78187: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78188: LD_INT 0
78190: PPUSH
78191: PPUSH
78192: PPUSH
// if not side or side > 8 then
78193: LD_VAR 0 1
78197: NOT
78198: PUSH
78199: LD_VAR 0 1
78203: PUSH
78204: LD_INT 8
78206: GREATER
78207: OR
78208: IFFALSE 78212
// exit ;
78210: GO 78399
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78212: LD_ADDR_VAR 0 4
78216: PUSH
78217: LD_INT 22
78219: PUSH
78220: LD_VAR 0 1
78224: PUSH
78225: EMPTY
78226: LIST
78227: LIST
78228: PUSH
78229: LD_INT 21
78231: PUSH
78232: LD_INT 3
78234: PUSH
78235: EMPTY
78236: LIST
78237: LIST
78238: PUSH
78239: EMPTY
78240: LIST
78241: LIST
78242: PPUSH
78243: CALL_OW 69
78247: ST_TO_ADDR
// if not tmp then
78248: LD_VAR 0 4
78252: NOT
78253: IFFALSE 78257
// exit ;
78255: GO 78399
// enable_addtolog := true ;
78257: LD_ADDR_OWVAR 81
78261: PUSH
78262: LD_INT 1
78264: ST_TO_ADDR
// AddToLog ( [ ) ;
78265: LD_STRING [
78267: PPUSH
78268: CALL_OW 561
// for i in tmp do
78272: LD_ADDR_VAR 0 3
78276: PUSH
78277: LD_VAR 0 4
78281: PUSH
78282: FOR_IN
78283: IFFALSE 78390
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78285: LD_STRING [
78287: PUSH
78288: LD_VAR 0 3
78292: PPUSH
78293: CALL_OW 266
78297: STR
78298: PUSH
78299: LD_STRING , 
78301: STR
78302: PUSH
78303: LD_VAR 0 3
78307: PPUSH
78308: CALL_OW 250
78312: STR
78313: PUSH
78314: LD_STRING , 
78316: STR
78317: PUSH
78318: LD_VAR 0 3
78322: PPUSH
78323: CALL_OW 251
78327: STR
78328: PUSH
78329: LD_STRING , 
78331: STR
78332: PUSH
78333: LD_VAR 0 3
78337: PPUSH
78338: CALL_OW 254
78342: STR
78343: PUSH
78344: LD_STRING , 
78346: STR
78347: PUSH
78348: LD_VAR 0 3
78352: PPUSH
78353: LD_INT 1
78355: PPUSH
78356: CALL_OW 268
78360: STR
78361: PUSH
78362: LD_STRING , 
78364: STR
78365: PUSH
78366: LD_VAR 0 3
78370: PPUSH
78371: LD_INT 2
78373: PPUSH
78374: CALL_OW 268
78378: STR
78379: PUSH
78380: LD_STRING ],
78382: STR
78383: PPUSH
78384: CALL_OW 561
// end ;
78388: GO 78282
78390: POP
78391: POP
// AddToLog ( ]; ) ;
78392: LD_STRING ];
78394: PPUSH
78395: CALL_OW 561
// end ;
78399: LD_VAR 0 2
78403: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78404: LD_INT 0
78406: PPUSH
78407: PPUSH
78408: PPUSH
78409: PPUSH
78410: PPUSH
// if not area or not rate or not max then
78411: LD_VAR 0 1
78415: NOT
78416: PUSH
78417: LD_VAR 0 2
78421: NOT
78422: OR
78423: PUSH
78424: LD_VAR 0 4
78428: NOT
78429: OR
78430: IFFALSE 78434
// exit ;
78432: GO 78623
// while 1 do
78434: LD_INT 1
78436: IFFALSE 78623
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78438: LD_ADDR_VAR 0 9
78442: PUSH
78443: LD_VAR 0 1
78447: PPUSH
78448: LD_INT 1
78450: PPUSH
78451: CALL_OW 287
78455: PUSH
78456: LD_INT 10
78458: MUL
78459: ST_TO_ADDR
// r := rate / 10 ;
78460: LD_ADDR_VAR 0 7
78464: PUSH
78465: LD_VAR 0 2
78469: PUSH
78470: LD_INT 10
78472: DIVREAL
78473: ST_TO_ADDR
// time := 1 1$00 ;
78474: LD_ADDR_VAR 0 8
78478: PUSH
78479: LD_INT 2100
78481: ST_TO_ADDR
// if amount < min then
78482: LD_VAR 0 9
78486: PUSH
78487: LD_VAR 0 3
78491: LESS
78492: IFFALSE 78510
// r := r * 2 else
78494: LD_ADDR_VAR 0 7
78498: PUSH
78499: LD_VAR 0 7
78503: PUSH
78504: LD_INT 2
78506: MUL
78507: ST_TO_ADDR
78508: GO 78536
// if amount > max then
78510: LD_VAR 0 9
78514: PUSH
78515: LD_VAR 0 4
78519: GREATER
78520: IFFALSE 78536
// r := r / 2 ;
78522: LD_ADDR_VAR 0 7
78526: PUSH
78527: LD_VAR 0 7
78531: PUSH
78532: LD_INT 2
78534: DIVREAL
78535: ST_TO_ADDR
// time := time / r ;
78536: LD_ADDR_VAR 0 8
78540: PUSH
78541: LD_VAR 0 8
78545: PUSH
78546: LD_VAR 0 7
78550: DIVREAL
78551: ST_TO_ADDR
// if time < 0 then
78552: LD_VAR 0 8
78556: PUSH
78557: LD_INT 0
78559: LESS
78560: IFFALSE 78577
// time := time * - 1 ;
78562: LD_ADDR_VAR 0 8
78566: PUSH
78567: LD_VAR 0 8
78571: PUSH
78572: LD_INT 1
78574: NEG
78575: MUL
78576: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78577: LD_VAR 0 8
78581: PUSH
78582: LD_INT 35
78584: PPUSH
78585: LD_INT 875
78587: PPUSH
78588: CALL_OW 12
78592: PLUS
78593: PPUSH
78594: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78598: LD_INT 1
78600: PPUSH
78601: LD_INT 5
78603: PPUSH
78604: CALL_OW 12
78608: PPUSH
78609: LD_VAR 0 1
78613: PPUSH
78614: LD_INT 1
78616: PPUSH
78617: CALL_OW 55
// end ;
78621: GO 78434
// end ;
78623: LD_VAR 0 5
78627: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78628: LD_INT 0
78630: PPUSH
78631: PPUSH
78632: PPUSH
78633: PPUSH
78634: PPUSH
78635: PPUSH
78636: PPUSH
78637: PPUSH
// if not turrets or not factories then
78638: LD_VAR 0 1
78642: NOT
78643: PUSH
78644: LD_VAR 0 2
78648: NOT
78649: OR
78650: IFFALSE 78654
// exit ;
78652: GO 78961
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78654: LD_ADDR_VAR 0 10
78658: PUSH
78659: LD_INT 5
78661: PUSH
78662: LD_INT 6
78664: PUSH
78665: EMPTY
78666: LIST
78667: LIST
78668: PUSH
78669: LD_INT 2
78671: PUSH
78672: LD_INT 4
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: PUSH
78679: LD_INT 3
78681: PUSH
78682: LD_INT 5
78684: PUSH
78685: EMPTY
78686: LIST
78687: LIST
78688: PUSH
78689: EMPTY
78690: LIST
78691: LIST
78692: LIST
78693: PUSH
78694: LD_INT 24
78696: PUSH
78697: LD_INT 25
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: PUSH
78704: LD_INT 23
78706: PUSH
78707: LD_INT 27
78709: PUSH
78710: EMPTY
78711: LIST
78712: LIST
78713: PUSH
78714: EMPTY
78715: LIST
78716: LIST
78717: PUSH
78718: LD_INT 42
78720: PUSH
78721: LD_INT 43
78723: PUSH
78724: EMPTY
78725: LIST
78726: LIST
78727: PUSH
78728: LD_INT 44
78730: PUSH
78731: LD_INT 46
78733: PUSH
78734: EMPTY
78735: LIST
78736: LIST
78737: PUSH
78738: LD_INT 45
78740: PUSH
78741: LD_INT 47
78743: PUSH
78744: EMPTY
78745: LIST
78746: LIST
78747: PUSH
78748: EMPTY
78749: LIST
78750: LIST
78751: LIST
78752: PUSH
78753: EMPTY
78754: LIST
78755: LIST
78756: LIST
78757: ST_TO_ADDR
// result := [ ] ;
78758: LD_ADDR_VAR 0 3
78762: PUSH
78763: EMPTY
78764: ST_TO_ADDR
// for i in turrets do
78765: LD_ADDR_VAR 0 4
78769: PUSH
78770: LD_VAR 0 1
78774: PUSH
78775: FOR_IN
78776: IFFALSE 78959
// begin nat := GetNation ( i ) ;
78778: LD_ADDR_VAR 0 7
78782: PUSH
78783: LD_VAR 0 4
78787: PPUSH
78788: CALL_OW 248
78792: ST_TO_ADDR
// weapon := 0 ;
78793: LD_ADDR_VAR 0 8
78797: PUSH
78798: LD_INT 0
78800: ST_TO_ADDR
// if not nat then
78801: LD_VAR 0 7
78805: NOT
78806: IFFALSE 78810
// continue ;
78808: GO 78775
// for j in list [ nat ] do
78810: LD_ADDR_VAR 0 5
78814: PUSH
78815: LD_VAR 0 10
78819: PUSH
78820: LD_VAR 0 7
78824: ARRAY
78825: PUSH
78826: FOR_IN
78827: IFFALSE 78868
// if GetBWeapon ( i ) = j [ 1 ] then
78829: LD_VAR 0 4
78833: PPUSH
78834: CALL_OW 269
78838: PUSH
78839: LD_VAR 0 5
78843: PUSH
78844: LD_INT 1
78846: ARRAY
78847: EQUAL
78848: IFFALSE 78866
// begin weapon := j [ 2 ] ;
78850: LD_ADDR_VAR 0 8
78854: PUSH
78855: LD_VAR 0 5
78859: PUSH
78860: LD_INT 2
78862: ARRAY
78863: ST_TO_ADDR
// break ;
78864: GO 78868
// end ;
78866: GO 78826
78868: POP
78869: POP
// if not weapon then
78870: LD_VAR 0 8
78874: NOT
78875: IFFALSE 78879
// continue ;
78877: GO 78775
// for k in factories do
78879: LD_ADDR_VAR 0 6
78883: PUSH
78884: LD_VAR 0 2
78888: PUSH
78889: FOR_IN
78890: IFFALSE 78955
// begin weapons := AvailableWeaponList ( k ) ;
78892: LD_ADDR_VAR 0 9
78896: PUSH
78897: LD_VAR 0 6
78901: PPUSH
78902: CALL_OW 478
78906: ST_TO_ADDR
// if not weapons then
78907: LD_VAR 0 9
78911: NOT
78912: IFFALSE 78916
// continue ;
78914: GO 78889
// if weapon in weapons then
78916: LD_VAR 0 8
78920: PUSH
78921: LD_VAR 0 9
78925: IN
78926: IFFALSE 78953
// begin result := [ i , weapon ] ;
78928: LD_ADDR_VAR 0 3
78932: PUSH
78933: LD_VAR 0 4
78937: PUSH
78938: LD_VAR 0 8
78942: PUSH
78943: EMPTY
78944: LIST
78945: LIST
78946: ST_TO_ADDR
// exit ;
78947: POP
78948: POP
78949: POP
78950: POP
78951: GO 78961
// end ; end ;
78953: GO 78889
78955: POP
78956: POP
// end ;
78957: GO 78775
78959: POP
78960: POP
// end ;
78961: LD_VAR 0 3
78965: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78966: LD_INT 0
78968: PPUSH
// if not side or side > 8 then
78969: LD_VAR 0 3
78973: NOT
78974: PUSH
78975: LD_VAR 0 3
78979: PUSH
78980: LD_INT 8
78982: GREATER
78983: OR
78984: IFFALSE 78988
// exit ;
78986: GO 79047
// if not range then
78988: LD_VAR 0 4
78992: NOT
78993: IFFALSE 79004
// range := - 12 ;
78995: LD_ADDR_VAR 0 4
78999: PUSH
79000: LD_INT 12
79002: NEG
79003: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79004: LD_VAR 0 1
79008: PPUSH
79009: LD_VAR 0 2
79013: PPUSH
79014: LD_VAR 0 3
79018: PPUSH
79019: LD_VAR 0 4
79023: PPUSH
79024: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79028: LD_VAR 0 1
79032: PPUSH
79033: LD_VAR 0 2
79037: PPUSH
79038: LD_VAR 0 3
79042: PPUSH
79043: CALL_OW 331
// end ;
79047: LD_VAR 0 5
79051: RET
// export function Video ( mode ) ; begin
79052: LD_INT 0
79054: PPUSH
// ingame_video = mode ;
79055: LD_ADDR_OWVAR 52
79059: PUSH
79060: LD_VAR 0 1
79064: ST_TO_ADDR
// interface_hidden = mode ;
79065: LD_ADDR_OWVAR 54
79069: PUSH
79070: LD_VAR 0 1
79074: ST_TO_ADDR
// end ;
79075: LD_VAR 0 2
79079: RET
// export function Join ( array , element ) ; begin
79080: LD_INT 0
79082: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79083: LD_ADDR_VAR 0 3
79087: PUSH
79088: LD_VAR 0 1
79092: PPUSH
79093: LD_VAR 0 1
79097: PUSH
79098: LD_INT 1
79100: PLUS
79101: PPUSH
79102: LD_VAR 0 2
79106: PPUSH
79107: CALL_OW 1
79111: ST_TO_ADDR
// end ;
79112: LD_VAR 0 3
79116: RET
// export function JoinUnion ( array , element ) ; begin
79117: LD_INT 0
79119: PPUSH
// result := array union element ;
79120: LD_ADDR_VAR 0 3
79124: PUSH
79125: LD_VAR 0 1
79129: PUSH
79130: LD_VAR 0 2
79134: UNION
79135: ST_TO_ADDR
// end ;
79136: LD_VAR 0 3
79140: RET
// export function GetBehemoths ( side ) ; begin
79141: LD_INT 0
79143: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79144: LD_ADDR_VAR 0 2
79148: PUSH
79149: LD_INT 22
79151: PUSH
79152: LD_VAR 0 1
79156: PUSH
79157: EMPTY
79158: LIST
79159: LIST
79160: PUSH
79161: LD_INT 31
79163: PUSH
79164: LD_INT 25
79166: PUSH
79167: EMPTY
79168: LIST
79169: LIST
79170: PUSH
79171: EMPTY
79172: LIST
79173: LIST
79174: PPUSH
79175: CALL_OW 69
79179: ST_TO_ADDR
// end ;
79180: LD_VAR 0 2
79184: RET
// export function Shuffle ( array ) ; var i , index ; begin
79185: LD_INT 0
79187: PPUSH
79188: PPUSH
79189: PPUSH
// result := [ ] ;
79190: LD_ADDR_VAR 0 2
79194: PUSH
79195: EMPTY
79196: ST_TO_ADDR
// if not array then
79197: LD_VAR 0 1
79201: NOT
79202: IFFALSE 79206
// exit ;
79204: GO 79305
// Randomize ;
79206: CALL_OW 10
// for i = array downto 1 do
79210: LD_ADDR_VAR 0 3
79214: PUSH
79215: DOUBLE
79216: LD_VAR 0 1
79220: INC
79221: ST_TO_ADDR
79222: LD_INT 1
79224: PUSH
79225: FOR_DOWNTO
79226: IFFALSE 79303
// begin index := rand ( 1 , array ) ;
79228: LD_ADDR_VAR 0 4
79232: PUSH
79233: LD_INT 1
79235: PPUSH
79236: LD_VAR 0 1
79240: PPUSH
79241: CALL_OW 12
79245: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79246: LD_ADDR_VAR 0 2
79250: PUSH
79251: LD_VAR 0 2
79255: PPUSH
79256: LD_VAR 0 2
79260: PUSH
79261: LD_INT 1
79263: PLUS
79264: PPUSH
79265: LD_VAR 0 1
79269: PUSH
79270: LD_VAR 0 4
79274: ARRAY
79275: PPUSH
79276: CALL_OW 2
79280: ST_TO_ADDR
// array := Delete ( array , index ) ;
79281: LD_ADDR_VAR 0 1
79285: PUSH
79286: LD_VAR 0 1
79290: PPUSH
79291: LD_VAR 0 4
79295: PPUSH
79296: CALL_OW 3
79300: ST_TO_ADDR
// end ;
79301: GO 79225
79303: POP
79304: POP
// end ;
79305: LD_VAR 0 2
79309: RET
// export function GetBaseMaterials ( base ) ; begin
79310: LD_INT 0
79312: PPUSH
// result := [ 0 , 0 , 0 ] ;
79313: LD_ADDR_VAR 0 2
79317: PUSH
79318: LD_INT 0
79320: PUSH
79321: LD_INT 0
79323: PUSH
79324: LD_INT 0
79326: PUSH
79327: EMPTY
79328: LIST
79329: LIST
79330: LIST
79331: ST_TO_ADDR
// if not base then
79332: LD_VAR 0 1
79336: NOT
79337: IFFALSE 79341
// exit ;
79339: GO 79390
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79341: LD_ADDR_VAR 0 2
79345: PUSH
79346: LD_VAR 0 1
79350: PPUSH
79351: LD_INT 1
79353: PPUSH
79354: CALL_OW 275
79358: PUSH
79359: LD_VAR 0 1
79363: PPUSH
79364: LD_INT 2
79366: PPUSH
79367: CALL_OW 275
79371: PUSH
79372: LD_VAR 0 1
79376: PPUSH
79377: LD_INT 3
79379: PPUSH
79380: CALL_OW 275
79384: PUSH
79385: EMPTY
79386: LIST
79387: LIST
79388: LIST
79389: ST_TO_ADDR
// end ;
79390: LD_VAR 0 2
79394: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79395: LD_INT 0
79397: PPUSH
79398: PPUSH
// result := array ;
79399: LD_ADDR_VAR 0 3
79403: PUSH
79404: LD_VAR 0 1
79408: ST_TO_ADDR
// if size >= result then
79409: LD_VAR 0 2
79413: PUSH
79414: LD_VAR 0 3
79418: GREATEREQUAL
79419: IFFALSE 79423
// exit ;
79421: GO 79473
// if size then
79423: LD_VAR 0 2
79427: IFFALSE 79473
// for i := array downto size do
79429: LD_ADDR_VAR 0 4
79433: PUSH
79434: DOUBLE
79435: LD_VAR 0 1
79439: INC
79440: ST_TO_ADDR
79441: LD_VAR 0 2
79445: PUSH
79446: FOR_DOWNTO
79447: IFFALSE 79471
// result := Delete ( result , result ) ;
79449: LD_ADDR_VAR 0 3
79453: PUSH
79454: LD_VAR 0 3
79458: PPUSH
79459: LD_VAR 0 3
79463: PPUSH
79464: CALL_OW 3
79468: ST_TO_ADDR
79469: GO 79446
79471: POP
79472: POP
// end ;
79473: LD_VAR 0 3
79477: RET
// export function ComExit ( unit ) ; var tmp ; begin
79478: LD_INT 0
79480: PPUSH
79481: PPUSH
// if not IsInUnit ( unit ) then
79482: LD_VAR 0 1
79486: PPUSH
79487: CALL_OW 310
79491: NOT
79492: IFFALSE 79496
// exit ;
79494: GO 79556
// tmp := IsInUnit ( unit ) ;
79496: LD_ADDR_VAR 0 3
79500: PUSH
79501: LD_VAR 0 1
79505: PPUSH
79506: CALL_OW 310
79510: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79511: LD_VAR 0 3
79515: PPUSH
79516: CALL_OW 247
79520: PUSH
79521: LD_INT 2
79523: EQUAL
79524: IFFALSE 79537
// ComExitVehicle ( unit ) else
79526: LD_VAR 0 1
79530: PPUSH
79531: CALL_OW 121
79535: GO 79546
// ComExitBuilding ( unit ) ;
79537: LD_VAR 0 1
79541: PPUSH
79542: CALL_OW 122
// result := tmp ;
79546: LD_ADDR_VAR 0 2
79550: PUSH
79551: LD_VAR 0 3
79555: ST_TO_ADDR
// end ;
79556: LD_VAR 0 2
79560: RET
// export function ComExitAll ( units ) ; var i ; begin
79561: LD_INT 0
79563: PPUSH
79564: PPUSH
// if not units then
79565: LD_VAR 0 1
79569: NOT
79570: IFFALSE 79574
// exit ;
79572: GO 79600
// for i in units do
79574: LD_ADDR_VAR 0 3
79578: PUSH
79579: LD_VAR 0 1
79583: PUSH
79584: FOR_IN
79585: IFFALSE 79598
// ComExit ( i ) ;
79587: LD_VAR 0 3
79591: PPUSH
79592: CALL 79478 0 1
79596: GO 79584
79598: POP
79599: POP
// end ;
79600: LD_VAR 0 2
79604: RET
// export function ResetHc ; begin
79605: LD_INT 0
79607: PPUSH
// InitHc ;
79608: CALL_OW 19
// hc_importance := 0 ;
79612: LD_ADDR_OWVAR 32
79616: PUSH
79617: LD_INT 0
79619: ST_TO_ADDR
// end ;
79620: LD_VAR 0 1
79624: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79625: LD_INT 0
79627: PPUSH
79628: PPUSH
79629: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79630: LD_ADDR_VAR 0 6
79634: PUSH
79635: LD_VAR 0 1
79639: PUSH
79640: LD_VAR 0 3
79644: PLUS
79645: PUSH
79646: LD_INT 2
79648: DIV
79649: ST_TO_ADDR
// if _x < 0 then
79650: LD_VAR 0 6
79654: PUSH
79655: LD_INT 0
79657: LESS
79658: IFFALSE 79675
// _x := _x * - 1 ;
79660: LD_ADDR_VAR 0 6
79664: PUSH
79665: LD_VAR 0 6
79669: PUSH
79670: LD_INT 1
79672: NEG
79673: MUL
79674: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79675: LD_ADDR_VAR 0 7
79679: PUSH
79680: LD_VAR 0 2
79684: PUSH
79685: LD_VAR 0 4
79689: PLUS
79690: PUSH
79691: LD_INT 2
79693: DIV
79694: ST_TO_ADDR
// if _y < 0 then
79695: LD_VAR 0 7
79699: PUSH
79700: LD_INT 0
79702: LESS
79703: IFFALSE 79720
// _y := _y * - 1 ;
79705: LD_ADDR_VAR 0 7
79709: PUSH
79710: LD_VAR 0 7
79714: PUSH
79715: LD_INT 1
79717: NEG
79718: MUL
79719: ST_TO_ADDR
// result := [ _x , _y ] ;
79720: LD_ADDR_VAR 0 5
79724: PUSH
79725: LD_VAR 0 6
79729: PUSH
79730: LD_VAR 0 7
79734: PUSH
79735: EMPTY
79736: LIST
79737: LIST
79738: ST_TO_ADDR
// end ;
79739: LD_VAR 0 5
79743: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79744: LD_INT 0
79746: PPUSH
79747: PPUSH
79748: PPUSH
79749: PPUSH
// task := GetTaskList ( unit ) ;
79750: LD_ADDR_VAR 0 7
79754: PUSH
79755: LD_VAR 0 1
79759: PPUSH
79760: CALL_OW 437
79764: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79765: LD_VAR 0 7
79769: NOT
79770: PUSH
79771: LD_VAR 0 1
79775: PPUSH
79776: LD_VAR 0 2
79780: PPUSH
79781: CALL_OW 308
79785: NOT
79786: AND
79787: IFFALSE 79791
// exit ;
79789: GO 79909
// if IsInArea ( unit , area ) then
79791: LD_VAR 0 1
79795: PPUSH
79796: LD_VAR 0 2
79800: PPUSH
79801: CALL_OW 308
79805: IFFALSE 79823
// begin ComMoveToArea ( unit , goAway ) ;
79807: LD_VAR 0 1
79811: PPUSH
79812: LD_VAR 0 3
79816: PPUSH
79817: CALL_OW 113
// exit ;
79821: GO 79909
// end ; if task [ 1 ] [ 1 ] <> M then
79823: LD_VAR 0 7
79827: PUSH
79828: LD_INT 1
79830: ARRAY
79831: PUSH
79832: LD_INT 1
79834: ARRAY
79835: PUSH
79836: LD_STRING M
79838: NONEQUAL
79839: IFFALSE 79843
// exit ;
79841: GO 79909
// x := task [ 1 ] [ 2 ] ;
79843: LD_ADDR_VAR 0 5
79847: PUSH
79848: LD_VAR 0 7
79852: PUSH
79853: LD_INT 1
79855: ARRAY
79856: PUSH
79857: LD_INT 2
79859: ARRAY
79860: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79861: LD_ADDR_VAR 0 6
79865: PUSH
79866: LD_VAR 0 7
79870: PUSH
79871: LD_INT 1
79873: ARRAY
79874: PUSH
79875: LD_INT 3
79877: ARRAY
79878: ST_TO_ADDR
// if InArea ( x , y , area ) then
79879: LD_VAR 0 5
79883: PPUSH
79884: LD_VAR 0 6
79888: PPUSH
79889: LD_VAR 0 2
79893: PPUSH
79894: CALL_OW 309
79898: IFFALSE 79909
// ComStop ( unit ) ;
79900: LD_VAR 0 1
79904: PPUSH
79905: CALL_OW 141
// end ;
79909: LD_VAR 0 4
79913: RET
// export function Abs ( value ) ; begin
79914: LD_INT 0
79916: PPUSH
// result := value ;
79917: LD_ADDR_VAR 0 2
79921: PUSH
79922: LD_VAR 0 1
79926: ST_TO_ADDR
// if value < 0 then
79927: LD_VAR 0 1
79931: PUSH
79932: LD_INT 0
79934: LESS
79935: IFFALSE 79952
// result := value * - 1 ;
79937: LD_ADDR_VAR 0 2
79941: PUSH
79942: LD_VAR 0 1
79946: PUSH
79947: LD_INT 1
79949: NEG
79950: MUL
79951: ST_TO_ADDR
// end ;
79952: LD_VAR 0 2
79956: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79957: LD_INT 0
79959: PPUSH
79960: PPUSH
79961: PPUSH
79962: PPUSH
79963: PPUSH
79964: PPUSH
79965: PPUSH
79966: PPUSH
// if not unit or not building then
79967: LD_VAR 0 1
79971: NOT
79972: PUSH
79973: LD_VAR 0 2
79977: NOT
79978: OR
79979: IFFALSE 79983
// exit ;
79981: GO 80209
// x := GetX ( building ) ;
79983: LD_ADDR_VAR 0 4
79987: PUSH
79988: LD_VAR 0 2
79992: PPUSH
79993: CALL_OW 250
79997: ST_TO_ADDR
// y := GetY ( building ) ;
79998: LD_ADDR_VAR 0 6
80002: PUSH
80003: LD_VAR 0 2
80007: PPUSH
80008: CALL_OW 251
80012: ST_TO_ADDR
// d := GetDir ( building ) ;
80013: LD_ADDR_VAR 0 8
80017: PUSH
80018: LD_VAR 0 2
80022: PPUSH
80023: CALL_OW 254
80027: ST_TO_ADDR
// r := 4 ;
80028: LD_ADDR_VAR 0 9
80032: PUSH
80033: LD_INT 4
80035: ST_TO_ADDR
// for i := 1 to 5 do
80036: LD_ADDR_VAR 0 10
80040: PUSH
80041: DOUBLE
80042: LD_INT 1
80044: DEC
80045: ST_TO_ADDR
80046: LD_INT 5
80048: PUSH
80049: FOR_TO
80050: IFFALSE 80207
// begin _x := ShiftX ( x , d , r + i ) ;
80052: LD_ADDR_VAR 0 5
80056: PUSH
80057: LD_VAR 0 4
80061: PPUSH
80062: LD_VAR 0 8
80066: PPUSH
80067: LD_VAR 0 9
80071: PUSH
80072: LD_VAR 0 10
80076: PLUS
80077: PPUSH
80078: CALL_OW 272
80082: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80083: LD_ADDR_VAR 0 7
80087: PUSH
80088: LD_VAR 0 6
80092: PPUSH
80093: LD_VAR 0 8
80097: PPUSH
80098: LD_VAR 0 9
80102: PUSH
80103: LD_VAR 0 10
80107: PLUS
80108: PPUSH
80109: CALL_OW 273
80113: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80114: LD_VAR 0 5
80118: PPUSH
80119: LD_VAR 0 7
80123: PPUSH
80124: CALL_OW 488
80128: PUSH
80129: LD_VAR 0 5
80133: PPUSH
80134: LD_VAR 0 7
80138: PPUSH
80139: CALL_OW 428
80143: PPUSH
80144: CALL_OW 247
80148: PUSH
80149: LD_INT 3
80151: PUSH
80152: LD_INT 2
80154: PUSH
80155: EMPTY
80156: LIST
80157: LIST
80158: IN
80159: NOT
80160: AND
80161: IFFALSE 80205
// begin ComMoveXY ( unit , _x , _y ) ;
80163: LD_VAR 0 1
80167: PPUSH
80168: LD_VAR 0 5
80172: PPUSH
80173: LD_VAR 0 7
80177: PPUSH
80178: CALL_OW 111
// result := [ _x , _y ] ;
80182: LD_ADDR_VAR 0 3
80186: PUSH
80187: LD_VAR 0 5
80191: PUSH
80192: LD_VAR 0 7
80196: PUSH
80197: EMPTY
80198: LIST
80199: LIST
80200: ST_TO_ADDR
// exit ;
80201: POP
80202: POP
80203: GO 80209
// end ; end ;
80205: GO 80049
80207: POP
80208: POP
// end ;
80209: LD_VAR 0 3
80213: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80214: LD_INT 0
80216: PPUSH
80217: PPUSH
80218: PPUSH
// result := 0 ;
80219: LD_ADDR_VAR 0 3
80223: PUSH
80224: LD_INT 0
80226: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80227: LD_VAR 0 1
80231: PUSH
80232: LD_INT 0
80234: LESS
80235: PUSH
80236: LD_VAR 0 1
80240: PUSH
80241: LD_INT 8
80243: GREATER
80244: OR
80245: PUSH
80246: LD_VAR 0 2
80250: PUSH
80251: LD_INT 0
80253: LESS
80254: OR
80255: PUSH
80256: LD_VAR 0 2
80260: PUSH
80261: LD_INT 8
80263: GREATER
80264: OR
80265: IFFALSE 80269
// exit ;
80267: GO 80344
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80269: LD_ADDR_VAR 0 4
80273: PUSH
80274: LD_INT 22
80276: PUSH
80277: LD_VAR 0 2
80281: PUSH
80282: EMPTY
80283: LIST
80284: LIST
80285: PPUSH
80286: CALL_OW 69
80290: PUSH
80291: FOR_IN
80292: IFFALSE 80342
// begin un := UnitShoot ( i ) ;
80294: LD_ADDR_VAR 0 5
80298: PUSH
80299: LD_VAR 0 4
80303: PPUSH
80304: CALL_OW 504
80308: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80309: LD_VAR 0 5
80313: PPUSH
80314: CALL_OW 255
80318: PUSH
80319: LD_VAR 0 1
80323: EQUAL
80324: IFFALSE 80340
// begin result := un ;
80326: LD_ADDR_VAR 0 3
80330: PUSH
80331: LD_VAR 0 5
80335: ST_TO_ADDR
// exit ;
80336: POP
80337: POP
80338: GO 80344
// end ; end ;
80340: GO 80291
80342: POP
80343: POP
// end ;
80344: LD_VAR 0 3
80348: RET
// export function GetCargoBay ( units ) ; begin
80349: LD_INT 0
80351: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80352: LD_ADDR_VAR 0 2
80356: PUSH
80357: LD_VAR 0 1
80361: PPUSH
80362: LD_INT 2
80364: PUSH
80365: LD_INT 34
80367: PUSH
80368: LD_INT 12
80370: PUSH
80371: EMPTY
80372: LIST
80373: LIST
80374: PUSH
80375: LD_INT 34
80377: PUSH
80378: LD_INT 51
80380: PUSH
80381: EMPTY
80382: LIST
80383: LIST
80384: PUSH
80385: LD_INT 34
80387: PUSH
80388: LD_INT 32
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: PUSH
80395: LD_INT 34
80397: PUSH
80398: LD_INT 89
80400: PUSH
80401: EMPTY
80402: LIST
80403: LIST
80404: PUSH
80405: EMPTY
80406: LIST
80407: LIST
80408: LIST
80409: LIST
80410: LIST
80411: PPUSH
80412: CALL_OW 72
80416: ST_TO_ADDR
// end ;
80417: LD_VAR 0 2
80421: RET
// export function Negate ( value ) ; begin
80422: LD_INT 0
80424: PPUSH
// result := not value ;
80425: LD_ADDR_VAR 0 2
80429: PUSH
80430: LD_VAR 0 1
80434: NOT
80435: ST_TO_ADDR
// end ;
80436: LD_VAR 0 2
80440: RET
// export function Inc ( value ) ; begin
80441: LD_INT 0
80443: PPUSH
// result := value + 1 ;
80444: LD_ADDR_VAR 0 2
80448: PUSH
80449: LD_VAR 0 1
80453: PUSH
80454: LD_INT 1
80456: PLUS
80457: ST_TO_ADDR
// end ;
80458: LD_VAR 0 2
80462: RET
// export function Dec ( value ) ; begin
80463: LD_INT 0
80465: PPUSH
// result := value - 1 ;
80466: LD_ADDR_VAR 0 2
80470: PUSH
80471: LD_VAR 0 1
80475: PUSH
80476: LD_INT 1
80478: MINUS
80479: ST_TO_ADDR
// end ;
80480: LD_VAR 0 2
80484: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80485: LD_INT 0
80487: PPUSH
80488: PPUSH
80489: PPUSH
80490: PPUSH
80491: PPUSH
80492: PPUSH
80493: PPUSH
80494: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80495: LD_VAR 0 1
80499: PPUSH
80500: LD_VAR 0 2
80504: PPUSH
80505: CALL_OW 488
80509: NOT
80510: PUSH
80511: LD_VAR 0 3
80515: PPUSH
80516: LD_VAR 0 4
80520: PPUSH
80521: CALL_OW 488
80525: NOT
80526: OR
80527: IFFALSE 80540
// begin result := - 1 ;
80529: LD_ADDR_VAR 0 5
80533: PUSH
80534: LD_INT 1
80536: NEG
80537: ST_TO_ADDR
// exit ;
80538: GO 80775
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80540: LD_ADDR_VAR 0 12
80544: PUSH
80545: LD_VAR 0 1
80549: PPUSH
80550: LD_VAR 0 2
80554: PPUSH
80555: LD_VAR 0 3
80559: PPUSH
80560: LD_VAR 0 4
80564: PPUSH
80565: CALL 79625 0 4
80569: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80570: LD_ADDR_VAR 0 11
80574: PUSH
80575: LD_VAR 0 1
80579: PPUSH
80580: LD_VAR 0 2
80584: PPUSH
80585: LD_VAR 0 12
80589: PUSH
80590: LD_INT 1
80592: ARRAY
80593: PPUSH
80594: LD_VAR 0 12
80598: PUSH
80599: LD_INT 2
80601: ARRAY
80602: PPUSH
80603: CALL_OW 298
80607: ST_TO_ADDR
// distance := 9999 ;
80608: LD_ADDR_VAR 0 10
80612: PUSH
80613: LD_INT 9999
80615: ST_TO_ADDR
// for i := 0 to 5 do
80616: LD_ADDR_VAR 0 6
80620: PUSH
80621: DOUBLE
80622: LD_INT 0
80624: DEC
80625: ST_TO_ADDR
80626: LD_INT 5
80628: PUSH
80629: FOR_TO
80630: IFFALSE 80773
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80632: LD_ADDR_VAR 0 7
80636: PUSH
80637: LD_VAR 0 1
80641: PPUSH
80642: LD_VAR 0 6
80646: PPUSH
80647: LD_VAR 0 11
80651: PPUSH
80652: CALL_OW 272
80656: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80657: LD_ADDR_VAR 0 8
80661: PUSH
80662: LD_VAR 0 2
80666: PPUSH
80667: LD_VAR 0 6
80671: PPUSH
80672: LD_VAR 0 11
80676: PPUSH
80677: CALL_OW 273
80681: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80682: LD_VAR 0 7
80686: PPUSH
80687: LD_VAR 0 8
80691: PPUSH
80692: CALL_OW 488
80696: NOT
80697: IFFALSE 80701
// continue ;
80699: GO 80629
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80701: LD_ADDR_VAR 0 9
80705: PUSH
80706: LD_VAR 0 12
80710: PUSH
80711: LD_INT 1
80713: ARRAY
80714: PPUSH
80715: LD_VAR 0 12
80719: PUSH
80720: LD_INT 2
80722: ARRAY
80723: PPUSH
80724: LD_VAR 0 7
80728: PPUSH
80729: LD_VAR 0 8
80733: PPUSH
80734: CALL_OW 298
80738: ST_TO_ADDR
// if tmp < distance then
80739: LD_VAR 0 9
80743: PUSH
80744: LD_VAR 0 10
80748: LESS
80749: IFFALSE 80771
// begin result := i ;
80751: LD_ADDR_VAR 0 5
80755: PUSH
80756: LD_VAR 0 6
80760: ST_TO_ADDR
// distance := tmp ;
80761: LD_ADDR_VAR 0 10
80765: PUSH
80766: LD_VAR 0 9
80770: ST_TO_ADDR
// end ; end ;
80771: GO 80629
80773: POP
80774: POP
// end ;
80775: LD_VAR 0 5
80779: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80780: LD_INT 0
80782: PPUSH
80783: PPUSH
// if not driver or not IsInUnit ( driver ) then
80784: LD_VAR 0 1
80788: NOT
80789: PUSH
80790: LD_VAR 0 1
80794: PPUSH
80795: CALL_OW 310
80799: NOT
80800: OR
80801: IFFALSE 80805
// exit ;
80803: GO 80895
// vehicle := IsInUnit ( driver ) ;
80805: LD_ADDR_VAR 0 3
80809: PUSH
80810: LD_VAR 0 1
80814: PPUSH
80815: CALL_OW 310
80819: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80820: LD_VAR 0 1
80824: PPUSH
80825: LD_STRING \
80827: PUSH
80828: LD_INT 0
80830: PUSH
80831: LD_INT 0
80833: PUSH
80834: LD_INT 0
80836: PUSH
80837: LD_INT 0
80839: PUSH
80840: LD_INT 0
80842: PUSH
80843: LD_INT 0
80845: PUSH
80846: EMPTY
80847: LIST
80848: LIST
80849: LIST
80850: LIST
80851: LIST
80852: LIST
80853: LIST
80854: PUSH
80855: LD_STRING E
80857: PUSH
80858: LD_INT 0
80860: PUSH
80861: LD_INT 0
80863: PUSH
80864: LD_VAR 0 3
80868: PUSH
80869: LD_INT 0
80871: PUSH
80872: LD_INT 0
80874: PUSH
80875: LD_INT 0
80877: PUSH
80878: EMPTY
80879: LIST
80880: LIST
80881: LIST
80882: LIST
80883: LIST
80884: LIST
80885: LIST
80886: PUSH
80887: EMPTY
80888: LIST
80889: LIST
80890: PPUSH
80891: CALL_OW 446
// end ;
80895: LD_VAR 0 2
80899: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80900: LD_INT 0
80902: PPUSH
80903: PPUSH
// if not driver or not IsInUnit ( driver ) then
80904: LD_VAR 0 1
80908: NOT
80909: PUSH
80910: LD_VAR 0 1
80914: PPUSH
80915: CALL_OW 310
80919: NOT
80920: OR
80921: IFFALSE 80925
// exit ;
80923: GO 81015
// vehicle := IsInUnit ( driver ) ;
80925: LD_ADDR_VAR 0 3
80929: PUSH
80930: LD_VAR 0 1
80934: PPUSH
80935: CALL_OW 310
80939: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80940: LD_VAR 0 1
80944: PPUSH
80945: LD_STRING \
80947: PUSH
80948: LD_INT 0
80950: PUSH
80951: LD_INT 0
80953: PUSH
80954: LD_INT 0
80956: PUSH
80957: LD_INT 0
80959: PUSH
80960: LD_INT 0
80962: PUSH
80963: LD_INT 0
80965: PUSH
80966: EMPTY
80967: LIST
80968: LIST
80969: LIST
80970: LIST
80971: LIST
80972: LIST
80973: LIST
80974: PUSH
80975: LD_STRING E
80977: PUSH
80978: LD_INT 0
80980: PUSH
80981: LD_INT 0
80983: PUSH
80984: LD_VAR 0 3
80988: PUSH
80989: LD_INT 0
80991: PUSH
80992: LD_INT 0
80994: PUSH
80995: LD_INT 0
80997: PUSH
80998: EMPTY
80999: LIST
81000: LIST
81001: LIST
81002: LIST
81003: LIST
81004: LIST
81005: LIST
81006: PUSH
81007: EMPTY
81008: LIST
81009: LIST
81010: PPUSH
81011: CALL_OW 447
// end ;
81015: LD_VAR 0 2
81019: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81020: LD_INT 0
81022: PPUSH
81023: PPUSH
81024: PPUSH
// tmp := [ ] ;
81025: LD_ADDR_VAR 0 5
81029: PUSH
81030: EMPTY
81031: ST_TO_ADDR
// for i in units do
81032: LD_ADDR_VAR 0 4
81036: PUSH
81037: LD_VAR 0 1
81041: PUSH
81042: FOR_IN
81043: IFFALSE 81081
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81045: LD_ADDR_VAR 0 5
81049: PUSH
81050: LD_VAR 0 5
81054: PPUSH
81055: LD_VAR 0 5
81059: PUSH
81060: LD_INT 1
81062: PLUS
81063: PPUSH
81064: LD_VAR 0 4
81068: PPUSH
81069: CALL_OW 256
81073: PPUSH
81074: CALL_OW 2
81078: ST_TO_ADDR
81079: GO 81042
81081: POP
81082: POP
// if not tmp then
81083: LD_VAR 0 5
81087: NOT
81088: IFFALSE 81092
// exit ;
81090: GO 81140
// if asc then
81092: LD_VAR 0 2
81096: IFFALSE 81120
// result := SortListByListAsc ( units , tmp ) else
81098: LD_ADDR_VAR 0 3
81102: PUSH
81103: LD_VAR 0 1
81107: PPUSH
81108: LD_VAR 0 5
81112: PPUSH
81113: CALL_OW 76
81117: ST_TO_ADDR
81118: GO 81140
// result := SortListByListDesc ( units , tmp ) ;
81120: LD_ADDR_VAR 0 3
81124: PUSH
81125: LD_VAR 0 1
81129: PPUSH
81130: LD_VAR 0 5
81134: PPUSH
81135: CALL_OW 77
81139: ST_TO_ADDR
// end ;
81140: LD_VAR 0 3
81144: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81145: LD_INT 0
81147: PPUSH
81148: PPUSH
// task := GetTaskList ( mech ) ;
81149: LD_ADDR_VAR 0 4
81153: PUSH
81154: LD_VAR 0 1
81158: PPUSH
81159: CALL_OW 437
81163: ST_TO_ADDR
// if not task then
81164: LD_VAR 0 4
81168: NOT
81169: IFFALSE 81173
// exit ;
81171: GO 81215
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81173: LD_ADDR_VAR 0 3
81177: PUSH
81178: LD_VAR 0 4
81182: PUSH
81183: LD_INT 1
81185: ARRAY
81186: PUSH
81187: LD_INT 1
81189: ARRAY
81190: PUSH
81191: LD_STRING r
81193: EQUAL
81194: PUSH
81195: LD_VAR 0 4
81199: PUSH
81200: LD_INT 1
81202: ARRAY
81203: PUSH
81204: LD_INT 4
81206: ARRAY
81207: PUSH
81208: LD_VAR 0 2
81212: EQUAL
81213: AND
81214: ST_TO_ADDR
// end ;
81215: LD_VAR 0 3
81219: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81220: LD_INT 0
81222: PPUSH
// SetDir ( unit , d ) ;
81223: LD_VAR 0 1
81227: PPUSH
81228: LD_VAR 0 4
81232: PPUSH
81233: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
81237: LD_VAR 0 1
81241: PPUSH
81242: LD_VAR 0 2
81246: PPUSH
81247: LD_VAR 0 3
81251: PPUSH
81252: LD_VAR 0 5
81256: PPUSH
81257: CALL_OW 48
// end ;
81261: LD_VAR 0 6
81265: RET
// export function ToNaturalNumber ( number ) ; begin
81266: LD_INT 0
81268: PPUSH
// result := number div 1 ;
81269: LD_ADDR_VAR 0 2
81273: PUSH
81274: LD_VAR 0 1
81278: PUSH
81279: LD_INT 1
81281: DIV
81282: ST_TO_ADDR
// if number < 0 then
81283: LD_VAR 0 1
81287: PUSH
81288: LD_INT 0
81290: LESS
81291: IFFALSE 81301
// result := 0 ;
81293: LD_ADDR_VAR 0 2
81297: PUSH
81298: LD_INT 0
81300: ST_TO_ADDR
// end ;
81301: LD_VAR 0 2
81305: RET
// export function SortByClass ( units , class ) ; var un ; begin
81306: LD_INT 0
81308: PPUSH
81309: PPUSH
// if not units or not class then
81310: LD_VAR 0 1
81314: NOT
81315: PUSH
81316: LD_VAR 0 2
81320: NOT
81321: OR
81322: IFFALSE 81326
// exit ;
81324: GO 81421
// result := [ ] ;
81326: LD_ADDR_VAR 0 3
81330: PUSH
81331: EMPTY
81332: ST_TO_ADDR
// for un in units do
81333: LD_ADDR_VAR 0 4
81337: PUSH
81338: LD_VAR 0 1
81342: PUSH
81343: FOR_IN
81344: IFFALSE 81419
// if GetClass ( un ) = class then
81346: LD_VAR 0 4
81350: PPUSH
81351: CALL_OW 257
81355: PUSH
81356: LD_VAR 0 2
81360: EQUAL
81361: IFFALSE 81388
// result := Insert ( result , 1 , un ) else
81363: LD_ADDR_VAR 0 3
81367: PUSH
81368: LD_VAR 0 3
81372: PPUSH
81373: LD_INT 1
81375: PPUSH
81376: LD_VAR 0 4
81380: PPUSH
81381: CALL_OW 2
81385: ST_TO_ADDR
81386: GO 81417
// result := Replace ( result , result + 1 , un ) ;
81388: LD_ADDR_VAR 0 3
81392: PUSH
81393: LD_VAR 0 3
81397: PPUSH
81398: LD_VAR 0 3
81402: PUSH
81403: LD_INT 1
81405: PLUS
81406: PPUSH
81407: LD_VAR 0 4
81411: PPUSH
81412: CALL_OW 1
81416: ST_TO_ADDR
81417: GO 81343
81419: POP
81420: POP
// end ;
81421: LD_VAR 0 3
81425: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81426: LD_INT 0
81428: PPUSH
81429: PPUSH
81430: PPUSH
81431: PPUSH
81432: PPUSH
81433: PPUSH
81434: PPUSH
// result := [ ] ;
81435: LD_ADDR_VAR 0 4
81439: PUSH
81440: EMPTY
81441: ST_TO_ADDR
// if x - r < 0 then
81442: LD_VAR 0 1
81446: PUSH
81447: LD_VAR 0 3
81451: MINUS
81452: PUSH
81453: LD_INT 0
81455: LESS
81456: IFFALSE 81468
// min_x := 0 else
81458: LD_ADDR_VAR 0 8
81462: PUSH
81463: LD_INT 0
81465: ST_TO_ADDR
81466: GO 81484
// min_x := x - r ;
81468: LD_ADDR_VAR 0 8
81472: PUSH
81473: LD_VAR 0 1
81477: PUSH
81478: LD_VAR 0 3
81482: MINUS
81483: ST_TO_ADDR
// if y - r < 0 then
81484: LD_VAR 0 2
81488: PUSH
81489: LD_VAR 0 3
81493: MINUS
81494: PUSH
81495: LD_INT 0
81497: LESS
81498: IFFALSE 81510
// min_y := 0 else
81500: LD_ADDR_VAR 0 7
81504: PUSH
81505: LD_INT 0
81507: ST_TO_ADDR
81508: GO 81526
// min_y := y - r ;
81510: LD_ADDR_VAR 0 7
81514: PUSH
81515: LD_VAR 0 2
81519: PUSH
81520: LD_VAR 0 3
81524: MINUS
81525: ST_TO_ADDR
// max_x := x + r ;
81526: LD_ADDR_VAR 0 9
81530: PUSH
81531: LD_VAR 0 1
81535: PUSH
81536: LD_VAR 0 3
81540: PLUS
81541: ST_TO_ADDR
// max_y := y + r ;
81542: LD_ADDR_VAR 0 10
81546: PUSH
81547: LD_VAR 0 2
81551: PUSH
81552: LD_VAR 0 3
81556: PLUS
81557: ST_TO_ADDR
// for _x = min_x to max_x do
81558: LD_ADDR_VAR 0 5
81562: PUSH
81563: DOUBLE
81564: LD_VAR 0 8
81568: DEC
81569: ST_TO_ADDR
81570: LD_VAR 0 9
81574: PUSH
81575: FOR_TO
81576: IFFALSE 81677
// for _y = min_y to max_y do
81578: LD_ADDR_VAR 0 6
81582: PUSH
81583: DOUBLE
81584: LD_VAR 0 7
81588: DEC
81589: ST_TO_ADDR
81590: LD_VAR 0 10
81594: PUSH
81595: FOR_TO
81596: IFFALSE 81673
// begin if not ValidHex ( _x , _y ) then
81598: LD_VAR 0 5
81602: PPUSH
81603: LD_VAR 0 6
81607: PPUSH
81608: CALL_OW 488
81612: NOT
81613: IFFALSE 81617
// continue ;
81615: GO 81595
// if GetResourceTypeXY ( _x , _y ) then
81617: LD_VAR 0 5
81621: PPUSH
81622: LD_VAR 0 6
81626: PPUSH
81627: CALL_OW 283
81631: IFFALSE 81671
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81633: LD_ADDR_VAR 0 4
81637: PUSH
81638: LD_VAR 0 4
81642: PPUSH
81643: LD_VAR 0 4
81647: PUSH
81648: LD_INT 1
81650: PLUS
81651: PPUSH
81652: LD_VAR 0 5
81656: PUSH
81657: LD_VAR 0 6
81661: PUSH
81662: EMPTY
81663: LIST
81664: LIST
81665: PPUSH
81666: CALL_OW 1
81670: ST_TO_ADDR
// end ;
81671: GO 81595
81673: POP
81674: POP
81675: GO 81575
81677: POP
81678: POP
// end ;
81679: LD_VAR 0 4
81683: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81684: LD_INT 0
81686: PPUSH
81687: PPUSH
81688: PPUSH
81689: PPUSH
81690: PPUSH
81691: PPUSH
81692: PPUSH
81693: PPUSH
// if not units then
81694: LD_VAR 0 1
81698: NOT
81699: IFFALSE 81703
// exit ;
81701: GO 82231
// result := UnitFilter ( units , [ f_ok ] ) ;
81703: LD_ADDR_VAR 0 3
81707: PUSH
81708: LD_VAR 0 1
81712: PPUSH
81713: LD_INT 50
81715: PUSH
81716: EMPTY
81717: LIST
81718: PPUSH
81719: CALL_OW 72
81723: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81724: LD_ADDR_VAR 0 8
81728: PUSH
81729: LD_VAR 0 1
81733: PUSH
81734: LD_INT 1
81736: ARRAY
81737: PPUSH
81738: CALL_OW 255
81742: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81743: LD_ADDR_VAR 0 10
81747: PUSH
81748: LD_INT 29
81750: PUSH
81751: LD_INT 91
81753: PUSH
81754: LD_INT 49
81756: PUSH
81757: EMPTY
81758: LIST
81759: LIST
81760: LIST
81761: ST_TO_ADDR
// if not result then
81762: LD_VAR 0 3
81766: NOT
81767: IFFALSE 81771
// exit ;
81769: GO 82231
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81771: LD_ADDR_VAR 0 5
81775: PUSH
81776: LD_INT 81
81778: PUSH
81779: LD_VAR 0 8
81783: PUSH
81784: EMPTY
81785: LIST
81786: LIST
81787: PPUSH
81788: CALL_OW 69
81792: ST_TO_ADDR
// for i in result do
81793: LD_ADDR_VAR 0 4
81797: PUSH
81798: LD_VAR 0 3
81802: PUSH
81803: FOR_IN
81804: IFFALSE 82229
// begin tag := GetTag ( i ) + 1 ;
81806: LD_ADDR_VAR 0 9
81810: PUSH
81811: LD_VAR 0 4
81815: PPUSH
81816: CALL_OW 110
81820: PUSH
81821: LD_INT 1
81823: PLUS
81824: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
81825: LD_ADDR_VAR 0 7
81829: PUSH
81830: LD_VAR 0 4
81834: PPUSH
81835: CALL_OW 250
81839: PPUSH
81840: LD_VAR 0 4
81844: PPUSH
81845: CALL_OW 251
81849: PPUSH
81850: LD_INT 4
81852: PPUSH
81853: CALL 81426 0 3
81857: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81858: LD_VAR 0 4
81862: PPUSH
81863: CALL_OW 247
81867: PUSH
81868: LD_INT 2
81870: EQUAL
81871: PUSH
81872: LD_VAR 0 7
81876: PUSH
81877: LD_INT 2
81879: GREATER
81880: AND
81881: PUSH
81882: LD_VAR 0 4
81886: PPUSH
81887: CALL_OW 264
81891: PUSH
81892: LD_VAR 0 10
81896: IN
81897: NOT
81898: AND
81899: IFFALSE 81938
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81901: LD_VAR 0 4
81905: PPUSH
81906: LD_VAR 0 7
81910: PUSH
81911: LD_INT 1
81913: ARRAY
81914: PUSH
81915: LD_INT 1
81917: ARRAY
81918: PPUSH
81919: LD_VAR 0 7
81923: PUSH
81924: LD_INT 1
81926: ARRAY
81927: PUSH
81928: LD_INT 2
81930: ARRAY
81931: PPUSH
81932: CALL_OW 116
81936: GO 82227
// if path > tag then
81938: LD_VAR 0 2
81942: PUSH
81943: LD_VAR 0 9
81947: GREATER
81948: IFFALSE 82156
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81950: LD_ADDR_VAR 0 6
81954: PUSH
81955: LD_VAR 0 5
81959: PPUSH
81960: LD_INT 91
81962: PUSH
81963: LD_VAR 0 4
81967: PUSH
81968: LD_INT 8
81970: PUSH
81971: EMPTY
81972: LIST
81973: LIST
81974: LIST
81975: PPUSH
81976: CALL_OW 72
81980: ST_TO_ADDR
// if nearEnemy then
81981: LD_VAR 0 6
81985: IFFALSE 82054
// begin if GetWeapon ( i ) = ru_time_lapser then
81987: LD_VAR 0 4
81991: PPUSH
81992: CALL_OW 264
81996: PUSH
81997: LD_INT 49
81999: EQUAL
82000: IFFALSE 82028
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82002: LD_VAR 0 4
82006: PPUSH
82007: LD_VAR 0 6
82011: PPUSH
82012: LD_VAR 0 4
82016: PPUSH
82017: CALL_OW 74
82021: PPUSH
82022: CALL_OW 112
82026: GO 82052
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82028: LD_VAR 0 4
82032: PPUSH
82033: LD_VAR 0 6
82037: PPUSH
82038: LD_VAR 0 4
82042: PPUSH
82043: CALL_OW 74
82047: PPUSH
82048: CALL 83302 0 2
// end else
82052: GO 82154
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82054: LD_VAR 0 4
82058: PPUSH
82059: LD_VAR 0 2
82063: PUSH
82064: LD_VAR 0 9
82068: ARRAY
82069: PUSH
82070: LD_INT 1
82072: ARRAY
82073: PPUSH
82074: LD_VAR 0 2
82078: PUSH
82079: LD_VAR 0 9
82083: ARRAY
82084: PUSH
82085: LD_INT 2
82087: ARRAY
82088: PPUSH
82089: CALL_OW 297
82093: PUSH
82094: LD_INT 6
82096: GREATER
82097: IFFALSE 82140
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82099: LD_VAR 0 4
82103: PPUSH
82104: LD_VAR 0 2
82108: PUSH
82109: LD_VAR 0 9
82113: ARRAY
82114: PUSH
82115: LD_INT 1
82117: ARRAY
82118: PPUSH
82119: LD_VAR 0 2
82123: PUSH
82124: LD_VAR 0 9
82128: ARRAY
82129: PUSH
82130: LD_INT 2
82132: ARRAY
82133: PPUSH
82134: CALL_OW 114
82138: GO 82154
// SetTag ( i , tag ) ;
82140: LD_VAR 0 4
82144: PPUSH
82145: LD_VAR 0 9
82149: PPUSH
82150: CALL_OW 109
// end else
82154: GO 82227
// if enemy then
82156: LD_VAR 0 5
82160: IFFALSE 82227
// begin if GetWeapon ( i ) = ru_time_lapser then
82162: LD_VAR 0 4
82166: PPUSH
82167: CALL_OW 264
82171: PUSH
82172: LD_INT 49
82174: EQUAL
82175: IFFALSE 82203
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82177: LD_VAR 0 4
82181: PPUSH
82182: LD_VAR 0 5
82186: PPUSH
82187: LD_VAR 0 4
82191: PPUSH
82192: CALL_OW 74
82196: PPUSH
82197: CALL_OW 112
82201: GO 82227
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82203: LD_VAR 0 4
82207: PPUSH
82208: LD_VAR 0 5
82212: PPUSH
82213: LD_VAR 0 4
82217: PPUSH
82218: CALL_OW 74
82222: PPUSH
82223: CALL 83302 0 2
// end ; end ;
82227: GO 81803
82229: POP
82230: POP
// end ;
82231: LD_VAR 0 3
82235: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82236: LD_INT 0
82238: PPUSH
82239: PPUSH
82240: PPUSH
// if not unit or IsInUnit ( unit ) then
82241: LD_VAR 0 1
82245: NOT
82246: PUSH
82247: LD_VAR 0 1
82251: PPUSH
82252: CALL_OW 310
82256: OR
82257: IFFALSE 82261
// exit ;
82259: GO 82352
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82261: LD_ADDR_VAR 0 4
82265: PUSH
82266: LD_VAR 0 1
82270: PPUSH
82271: CALL_OW 250
82275: PPUSH
82276: LD_VAR 0 2
82280: PPUSH
82281: LD_INT 1
82283: PPUSH
82284: CALL_OW 272
82288: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82289: LD_ADDR_VAR 0 5
82293: PUSH
82294: LD_VAR 0 1
82298: PPUSH
82299: CALL_OW 251
82303: PPUSH
82304: LD_VAR 0 2
82308: PPUSH
82309: LD_INT 1
82311: PPUSH
82312: CALL_OW 273
82316: ST_TO_ADDR
// if ValidHex ( x , y ) then
82317: LD_VAR 0 4
82321: PPUSH
82322: LD_VAR 0 5
82326: PPUSH
82327: CALL_OW 488
82331: IFFALSE 82352
// ComTurnXY ( unit , x , y ) ;
82333: LD_VAR 0 1
82337: PPUSH
82338: LD_VAR 0 4
82342: PPUSH
82343: LD_VAR 0 5
82347: PPUSH
82348: CALL_OW 118
// end ;
82352: LD_VAR 0 3
82356: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82357: LD_INT 0
82359: PPUSH
82360: PPUSH
// result := false ;
82361: LD_ADDR_VAR 0 3
82365: PUSH
82366: LD_INT 0
82368: ST_TO_ADDR
// if not units then
82369: LD_VAR 0 2
82373: NOT
82374: IFFALSE 82378
// exit ;
82376: GO 82423
// for i in units do
82378: LD_ADDR_VAR 0 4
82382: PUSH
82383: LD_VAR 0 2
82387: PUSH
82388: FOR_IN
82389: IFFALSE 82421
// if See ( side , i ) then
82391: LD_VAR 0 1
82395: PPUSH
82396: LD_VAR 0 4
82400: PPUSH
82401: CALL_OW 292
82405: IFFALSE 82419
// begin result := true ;
82407: LD_ADDR_VAR 0 3
82411: PUSH
82412: LD_INT 1
82414: ST_TO_ADDR
// exit ;
82415: POP
82416: POP
82417: GO 82423
// end ;
82419: GO 82388
82421: POP
82422: POP
// end ;
82423: LD_VAR 0 3
82427: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82428: LD_INT 0
82430: PPUSH
82431: PPUSH
82432: PPUSH
82433: PPUSH
// if not unit or not points then
82434: LD_VAR 0 1
82438: NOT
82439: PUSH
82440: LD_VAR 0 2
82444: NOT
82445: OR
82446: IFFALSE 82450
// exit ;
82448: GO 82540
// dist := 99999 ;
82450: LD_ADDR_VAR 0 5
82454: PUSH
82455: LD_INT 99999
82457: ST_TO_ADDR
// for i in points do
82458: LD_ADDR_VAR 0 4
82462: PUSH
82463: LD_VAR 0 2
82467: PUSH
82468: FOR_IN
82469: IFFALSE 82538
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82471: LD_ADDR_VAR 0 6
82475: PUSH
82476: LD_VAR 0 1
82480: PPUSH
82481: LD_VAR 0 4
82485: PUSH
82486: LD_INT 1
82488: ARRAY
82489: PPUSH
82490: LD_VAR 0 4
82494: PUSH
82495: LD_INT 2
82497: ARRAY
82498: PPUSH
82499: CALL_OW 297
82503: ST_TO_ADDR
// if tmpDist < dist then
82504: LD_VAR 0 6
82508: PUSH
82509: LD_VAR 0 5
82513: LESS
82514: IFFALSE 82536
// begin result := i ;
82516: LD_ADDR_VAR 0 3
82520: PUSH
82521: LD_VAR 0 4
82525: ST_TO_ADDR
// dist := tmpDist ;
82526: LD_ADDR_VAR 0 5
82530: PUSH
82531: LD_VAR 0 6
82535: ST_TO_ADDR
// end ; end ;
82536: GO 82468
82538: POP
82539: POP
// end ;
82540: LD_VAR 0 3
82544: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82545: LD_INT 0
82547: PPUSH
// uc_side := side ;
82548: LD_ADDR_OWVAR 20
82552: PUSH
82553: LD_VAR 0 1
82557: ST_TO_ADDR
// uc_nation := 3 ;
82558: LD_ADDR_OWVAR 21
82562: PUSH
82563: LD_INT 3
82565: ST_TO_ADDR
// vc_chassis := 25 ;
82566: LD_ADDR_OWVAR 37
82570: PUSH
82571: LD_INT 25
82573: ST_TO_ADDR
// vc_engine := engine_siberite ;
82574: LD_ADDR_OWVAR 39
82578: PUSH
82579: LD_INT 3
82581: ST_TO_ADDR
// vc_control := control_computer ;
82582: LD_ADDR_OWVAR 38
82586: PUSH
82587: LD_INT 3
82589: ST_TO_ADDR
// vc_weapon := 59 ;
82590: LD_ADDR_OWVAR 40
82594: PUSH
82595: LD_INT 59
82597: ST_TO_ADDR
// result := CreateVehicle ;
82598: LD_ADDR_VAR 0 5
82602: PUSH
82603: CALL_OW 45
82607: ST_TO_ADDR
// SetDir ( result , d ) ;
82608: LD_VAR 0 5
82612: PPUSH
82613: LD_VAR 0 4
82617: PPUSH
82618: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82622: LD_VAR 0 5
82626: PPUSH
82627: LD_VAR 0 2
82631: PPUSH
82632: LD_VAR 0 3
82636: PPUSH
82637: LD_INT 0
82639: PPUSH
82640: CALL_OW 48
// end ;
82644: LD_VAR 0 5
82648: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82649: LD_INT 0
82651: PPUSH
82652: PPUSH
82653: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82654: LD_ADDR_VAR 0 2
82658: PUSH
82659: LD_INT 0
82661: PUSH
82662: LD_INT 0
82664: PUSH
82665: LD_INT 0
82667: PUSH
82668: LD_INT 0
82670: PUSH
82671: EMPTY
82672: LIST
82673: LIST
82674: LIST
82675: LIST
82676: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82677: LD_VAR 0 1
82681: NOT
82682: PUSH
82683: LD_VAR 0 1
82687: PPUSH
82688: CALL_OW 264
82692: PUSH
82693: LD_INT 12
82695: PUSH
82696: LD_INT 51
82698: PUSH
82699: LD_INT 32
82701: PUSH
82702: LD_INT 89
82704: PUSH
82705: EMPTY
82706: LIST
82707: LIST
82708: LIST
82709: LIST
82710: IN
82711: NOT
82712: OR
82713: IFFALSE 82717
// exit ;
82715: GO 82815
// for i := 1 to 3 do
82717: LD_ADDR_VAR 0 3
82721: PUSH
82722: DOUBLE
82723: LD_INT 1
82725: DEC
82726: ST_TO_ADDR
82727: LD_INT 3
82729: PUSH
82730: FOR_TO
82731: IFFALSE 82813
// begin tmp := GetCargo ( cargo , i ) ;
82733: LD_ADDR_VAR 0 4
82737: PUSH
82738: LD_VAR 0 1
82742: PPUSH
82743: LD_VAR 0 3
82747: PPUSH
82748: CALL_OW 289
82752: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82753: LD_ADDR_VAR 0 2
82757: PUSH
82758: LD_VAR 0 2
82762: PPUSH
82763: LD_VAR 0 3
82767: PPUSH
82768: LD_VAR 0 4
82772: PPUSH
82773: CALL_OW 1
82777: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82778: LD_ADDR_VAR 0 2
82782: PUSH
82783: LD_VAR 0 2
82787: PPUSH
82788: LD_INT 4
82790: PPUSH
82791: LD_VAR 0 2
82795: PUSH
82796: LD_INT 4
82798: ARRAY
82799: PUSH
82800: LD_VAR 0 4
82804: PLUS
82805: PPUSH
82806: CALL_OW 1
82810: ST_TO_ADDR
// end ;
82811: GO 82730
82813: POP
82814: POP
// end ;
82815: LD_VAR 0 2
82819: RET
// export function Length ( array ) ; begin
82820: LD_INT 0
82822: PPUSH
// result := array + 0 ;
82823: LD_ADDR_VAR 0 2
82827: PUSH
82828: LD_VAR 0 1
82832: PUSH
82833: LD_INT 0
82835: PLUS
82836: ST_TO_ADDR
// end ;
82837: LD_VAR 0 2
82841: RET
// export function PrepareArray ( array ) ; begin
82842: LD_INT 0
82844: PPUSH
// result := array diff 0 ;
82845: LD_ADDR_VAR 0 2
82849: PUSH
82850: LD_VAR 0 1
82854: PUSH
82855: LD_INT 0
82857: DIFF
82858: ST_TO_ADDR
// if not result [ 1 ] then
82859: LD_VAR 0 2
82863: PUSH
82864: LD_INT 1
82866: ARRAY
82867: NOT
82868: IFFALSE 82888
// result := Delete ( result , 1 ) ;
82870: LD_ADDR_VAR 0 2
82874: PUSH
82875: LD_VAR 0 2
82879: PPUSH
82880: LD_INT 1
82882: PPUSH
82883: CALL_OW 3
82887: ST_TO_ADDR
// end ;
82888: LD_VAR 0 2
82892: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82893: LD_INT 0
82895: PPUSH
82896: PPUSH
82897: PPUSH
82898: PPUSH
// sibRocketRange := 25 ;
82899: LD_ADDR_VAR 0 6
82903: PUSH
82904: LD_INT 25
82906: ST_TO_ADDR
// result := false ;
82907: LD_ADDR_VAR 0 4
82911: PUSH
82912: LD_INT 0
82914: ST_TO_ADDR
// for i := 0 to 5 do
82915: LD_ADDR_VAR 0 5
82919: PUSH
82920: DOUBLE
82921: LD_INT 0
82923: DEC
82924: ST_TO_ADDR
82925: LD_INT 5
82927: PUSH
82928: FOR_TO
82929: IFFALSE 82996
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82931: LD_VAR 0 1
82935: PPUSH
82936: LD_VAR 0 5
82940: PPUSH
82941: LD_VAR 0 6
82945: PPUSH
82946: CALL_OW 272
82950: PPUSH
82951: LD_VAR 0 2
82955: PPUSH
82956: LD_VAR 0 5
82960: PPUSH
82961: LD_VAR 0 6
82965: PPUSH
82966: CALL_OW 273
82970: PPUSH
82971: LD_VAR 0 3
82975: PPUSH
82976: CALL_OW 309
82980: IFFALSE 82994
// begin result := true ;
82982: LD_ADDR_VAR 0 4
82986: PUSH
82987: LD_INT 1
82989: ST_TO_ADDR
// exit ;
82990: POP
82991: POP
82992: GO 82998
// end ;
82994: GO 82928
82996: POP
82997: POP
// end ;
82998: LD_VAR 0 4
83002: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83003: LD_INT 0
83005: PPUSH
83006: PPUSH
83007: PPUSH
// if btype = b_depot then
83008: LD_VAR 0 2
83012: PUSH
83013: LD_INT 0
83015: EQUAL
83016: IFFALSE 83028
// begin result := true ;
83018: LD_ADDR_VAR 0 3
83022: PUSH
83023: LD_INT 1
83025: ST_TO_ADDR
// exit ;
83026: GO 83144
// end ; pom := GetBase ( depot ) ;
83028: LD_ADDR_VAR 0 4
83032: PUSH
83033: LD_VAR 0 1
83037: PPUSH
83038: CALL_OW 274
83042: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83043: LD_ADDR_VAR 0 5
83047: PUSH
83048: LD_VAR 0 2
83052: PPUSH
83053: LD_VAR 0 1
83057: PPUSH
83058: CALL_OW 248
83062: PPUSH
83063: CALL_OW 450
83067: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83068: LD_ADDR_VAR 0 3
83072: PUSH
83073: LD_VAR 0 4
83077: PPUSH
83078: LD_INT 1
83080: PPUSH
83081: CALL_OW 275
83085: PUSH
83086: LD_VAR 0 5
83090: PUSH
83091: LD_INT 1
83093: ARRAY
83094: GREATEREQUAL
83095: PUSH
83096: LD_VAR 0 4
83100: PPUSH
83101: LD_INT 2
83103: PPUSH
83104: CALL_OW 275
83108: PUSH
83109: LD_VAR 0 5
83113: PUSH
83114: LD_INT 2
83116: ARRAY
83117: GREATEREQUAL
83118: AND
83119: PUSH
83120: LD_VAR 0 4
83124: PPUSH
83125: LD_INT 3
83127: PPUSH
83128: CALL_OW 275
83132: PUSH
83133: LD_VAR 0 5
83137: PUSH
83138: LD_INT 3
83140: ARRAY
83141: GREATEREQUAL
83142: AND
83143: ST_TO_ADDR
// end ;
83144: LD_VAR 0 3
83148: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83149: LD_INT 0
83151: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83152: LD_VAR 0 1
83156: PPUSH
83157: LD_VAR 0 2
83161: PPUSH
83162: LD_INT 0
83164: PPUSH
83165: LD_INT 0
83167: PPUSH
83168: LD_INT 1
83170: PPUSH
83171: LD_INT 0
83173: PPUSH
83174: CALL_OW 587
// end ;
83178: LD_VAR 0 3
83182: RET
// export function CenterOnNow ( unit ) ; begin
83183: LD_INT 0
83185: PPUSH
// result := IsInUnit ( unit ) ;
83186: LD_ADDR_VAR 0 2
83190: PUSH
83191: LD_VAR 0 1
83195: PPUSH
83196: CALL_OW 310
83200: ST_TO_ADDR
// if not result then
83201: LD_VAR 0 2
83205: NOT
83206: IFFALSE 83218
// result := unit ;
83208: LD_ADDR_VAR 0 2
83212: PUSH
83213: LD_VAR 0 1
83217: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83218: LD_VAR 0 1
83222: PPUSH
83223: CALL_OW 87
// end ;
83227: LD_VAR 0 2
83231: RET
// export function ComMoveHex ( unit , hex ) ; begin
83232: LD_INT 0
83234: PPUSH
// if not hex then
83235: LD_VAR 0 2
83239: NOT
83240: IFFALSE 83244
// exit ;
83242: GO 83297
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83244: LD_VAR 0 2
83248: PUSH
83249: LD_INT 1
83251: ARRAY
83252: PPUSH
83253: LD_VAR 0 2
83257: PUSH
83258: LD_INT 2
83260: ARRAY
83261: PPUSH
83262: CALL_OW 428
83266: IFFALSE 83270
// exit ;
83268: GO 83297
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83270: LD_VAR 0 1
83274: PPUSH
83275: LD_VAR 0 2
83279: PUSH
83280: LD_INT 1
83282: ARRAY
83283: PPUSH
83284: LD_VAR 0 2
83288: PUSH
83289: LD_INT 2
83291: ARRAY
83292: PPUSH
83293: CALL_OW 111
// end ;
83297: LD_VAR 0 3
83301: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83302: LD_INT 0
83304: PPUSH
83305: PPUSH
83306: PPUSH
// if not unit or not enemy then
83307: LD_VAR 0 1
83311: NOT
83312: PUSH
83313: LD_VAR 0 2
83317: NOT
83318: OR
83319: IFFALSE 83323
// exit ;
83321: GO 83447
// x := GetX ( enemy ) ;
83323: LD_ADDR_VAR 0 4
83327: PUSH
83328: LD_VAR 0 2
83332: PPUSH
83333: CALL_OW 250
83337: ST_TO_ADDR
// y := GetY ( enemy ) ;
83338: LD_ADDR_VAR 0 5
83342: PUSH
83343: LD_VAR 0 2
83347: PPUSH
83348: CALL_OW 251
83352: ST_TO_ADDR
// if ValidHex ( x , y ) then
83353: LD_VAR 0 4
83357: PPUSH
83358: LD_VAR 0 5
83362: PPUSH
83363: CALL_OW 488
83367: IFFALSE 83447
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83369: LD_VAR 0 2
83373: PPUSH
83374: CALL_OW 247
83378: PUSH
83379: LD_INT 3
83381: PUSH
83382: LD_INT 2
83384: PUSH
83385: EMPTY
83386: LIST
83387: LIST
83388: IN
83389: PUSH
83390: LD_VAR 0 1
83394: PPUSH
83395: CALL_OW 255
83399: PPUSH
83400: LD_VAR 0 2
83404: PPUSH
83405: CALL_OW 292
83409: OR
83410: IFFALSE 83428
// ComAttackUnit ( unit , enemy ) else
83412: LD_VAR 0 1
83416: PPUSH
83417: LD_VAR 0 2
83421: PPUSH
83422: CALL_OW 115
83426: GO 83447
// ComAgressiveMove ( unit , x , y ) ;
83428: LD_VAR 0 1
83432: PPUSH
83433: LD_VAR 0 4
83437: PPUSH
83438: LD_VAR 0 5
83442: PPUSH
83443: CALL_OW 114
// end ;
83447: LD_VAR 0 3
83451: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83452: LD_INT 0
83454: PPUSH
83455: PPUSH
83456: PPUSH
// list := AreaToList ( area , 0 ) ;
83457: LD_ADDR_VAR 0 5
83461: PUSH
83462: LD_VAR 0 1
83466: PPUSH
83467: LD_INT 0
83469: PPUSH
83470: CALL_OW 517
83474: ST_TO_ADDR
// if not list then
83475: LD_VAR 0 5
83479: NOT
83480: IFFALSE 83484
// exit ;
83482: GO 83614
// if all then
83484: LD_VAR 0 2
83488: IFFALSE 83576
// begin for i := 1 to list [ 1 ] do
83490: LD_ADDR_VAR 0 4
83494: PUSH
83495: DOUBLE
83496: LD_INT 1
83498: DEC
83499: ST_TO_ADDR
83500: LD_VAR 0 5
83504: PUSH
83505: LD_INT 1
83507: ARRAY
83508: PUSH
83509: FOR_TO
83510: IFFALSE 83572
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83512: LD_ADDR_VAR 0 3
83516: PUSH
83517: LD_VAR 0 3
83521: PPUSH
83522: LD_VAR 0 3
83526: PUSH
83527: LD_INT 1
83529: PLUS
83530: PPUSH
83531: LD_VAR 0 5
83535: PUSH
83536: LD_INT 1
83538: ARRAY
83539: PUSH
83540: LD_VAR 0 4
83544: ARRAY
83545: PUSH
83546: LD_VAR 0 5
83550: PUSH
83551: LD_INT 2
83553: ARRAY
83554: PUSH
83555: LD_VAR 0 4
83559: ARRAY
83560: PUSH
83561: EMPTY
83562: LIST
83563: LIST
83564: PPUSH
83565: CALL_OW 1
83569: ST_TO_ADDR
83570: GO 83509
83572: POP
83573: POP
// exit ;
83574: GO 83614
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83576: LD_ADDR_VAR 0 3
83580: PUSH
83581: LD_VAR 0 5
83585: PUSH
83586: LD_INT 1
83588: ARRAY
83589: PUSH
83590: LD_INT 1
83592: ARRAY
83593: PUSH
83594: LD_VAR 0 5
83598: PUSH
83599: LD_INT 2
83601: ARRAY
83602: PUSH
83603: LD_INT 1
83605: ARRAY
83606: PUSH
83607: EMPTY
83608: LIST
83609: LIST
83610: PUSH
83611: EMPTY
83612: LIST
83613: ST_TO_ADDR
// end ;
83614: LD_VAR 0 3
83618: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83619: LD_INT 0
83621: PPUSH
83622: PPUSH
// list := AreaToList ( area , 0 ) ;
83623: LD_ADDR_VAR 0 4
83627: PUSH
83628: LD_VAR 0 1
83632: PPUSH
83633: LD_INT 0
83635: PPUSH
83636: CALL_OW 517
83640: ST_TO_ADDR
// if not list then
83641: LD_VAR 0 4
83645: NOT
83646: IFFALSE 83650
// exit ;
83648: GO 83691
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83650: LD_ADDR_VAR 0 3
83654: PUSH
83655: LD_VAR 0 4
83659: PUSH
83660: LD_INT 1
83662: ARRAY
83663: PUSH
83664: LD_INT 1
83666: ARRAY
83667: PUSH
83668: LD_VAR 0 4
83672: PUSH
83673: LD_INT 2
83675: ARRAY
83676: PUSH
83677: LD_INT 1
83679: ARRAY
83680: PUSH
83681: LD_VAR 0 2
83685: PUSH
83686: EMPTY
83687: LIST
83688: LIST
83689: LIST
83690: ST_TO_ADDR
// end ;
83691: LD_VAR 0 3
83695: RET
// export function First ( array ) ; begin
83696: LD_INT 0
83698: PPUSH
// if not array then
83699: LD_VAR 0 1
83703: NOT
83704: IFFALSE 83708
// exit ;
83706: GO 83722
// result := array [ 1 ] ;
83708: LD_ADDR_VAR 0 2
83712: PUSH
83713: LD_VAR 0 1
83717: PUSH
83718: LD_INT 1
83720: ARRAY
83721: ST_TO_ADDR
// end ;
83722: LD_VAR 0 2
83726: RET
// export function Last ( array ) ; begin
83727: LD_INT 0
83729: PPUSH
// if not array then
83730: LD_VAR 0 1
83734: NOT
83735: IFFALSE 83739
// exit ;
83737: GO 83755
// result := array [ array ] ;
83739: LD_ADDR_VAR 0 2
83743: PUSH
83744: LD_VAR 0 1
83748: PUSH
83749: LD_VAR 0 1
83753: ARRAY
83754: ST_TO_ADDR
// end ;
83755: LD_VAR 0 2
83759: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83760: LD_INT 0
83762: PPUSH
83763: PPUSH
// result := [ ] ;
83764: LD_ADDR_VAR 0 5
83768: PUSH
83769: EMPTY
83770: ST_TO_ADDR
// if not array then
83771: LD_VAR 0 1
83775: NOT
83776: IFFALSE 83780
// exit ;
83778: GO 83892
// for i := 1 to array do
83780: LD_ADDR_VAR 0 6
83784: PUSH
83785: DOUBLE
83786: LD_INT 1
83788: DEC
83789: ST_TO_ADDR
83790: LD_VAR 0 1
83794: PUSH
83795: FOR_TO
83796: IFFALSE 83890
// if array [ i ] [ index ] = value then
83798: LD_VAR 0 1
83802: PUSH
83803: LD_VAR 0 6
83807: ARRAY
83808: PUSH
83809: LD_VAR 0 2
83813: ARRAY
83814: PUSH
83815: LD_VAR 0 3
83819: EQUAL
83820: IFFALSE 83888
// begin if indexColumn then
83822: LD_VAR 0 4
83826: IFFALSE 83862
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83828: LD_ADDR_VAR 0 5
83832: PUSH
83833: LD_VAR 0 5
83837: PPUSH
83838: LD_VAR 0 1
83842: PUSH
83843: LD_VAR 0 6
83847: ARRAY
83848: PUSH
83849: LD_VAR 0 4
83853: ARRAY
83854: PPUSH
83855: CALL 79080 0 2
83859: ST_TO_ADDR
83860: GO 83888
// result := Join ( result , array [ i ] ) ;
83862: LD_ADDR_VAR 0 5
83866: PUSH
83867: LD_VAR 0 5
83871: PPUSH
83872: LD_VAR 0 1
83876: PUSH
83877: LD_VAR 0 6
83881: ARRAY
83882: PPUSH
83883: CALL 79080 0 2
83887: ST_TO_ADDR
// end ;
83888: GO 83795
83890: POP
83891: POP
// end ;
83892: LD_VAR 0 5
83896: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83897: LD_INT 0
83899: PPUSH
// if not vehicles or not parkingPoint then
83900: LD_VAR 0 1
83904: NOT
83905: PUSH
83906: LD_VAR 0 2
83910: NOT
83911: OR
83912: IFFALSE 83916
// exit ;
83914: GO 84014
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83916: LD_ADDR_VAR 0 1
83920: PUSH
83921: LD_VAR 0 1
83925: PPUSH
83926: LD_INT 50
83928: PUSH
83929: EMPTY
83930: LIST
83931: PUSH
83932: LD_INT 3
83934: PUSH
83935: LD_INT 92
83937: PUSH
83938: LD_VAR 0 2
83942: PUSH
83943: LD_INT 1
83945: ARRAY
83946: PUSH
83947: LD_VAR 0 2
83951: PUSH
83952: LD_INT 2
83954: ARRAY
83955: PUSH
83956: LD_INT 8
83958: PUSH
83959: EMPTY
83960: LIST
83961: LIST
83962: LIST
83963: LIST
83964: PUSH
83965: EMPTY
83966: LIST
83967: LIST
83968: PUSH
83969: EMPTY
83970: LIST
83971: LIST
83972: PPUSH
83973: CALL_OW 72
83977: ST_TO_ADDR
// if not vehicles then
83978: LD_VAR 0 1
83982: NOT
83983: IFFALSE 83987
// exit ;
83985: GO 84014
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83987: LD_VAR 0 1
83991: PPUSH
83992: LD_VAR 0 2
83996: PUSH
83997: LD_INT 1
83999: ARRAY
84000: PPUSH
84001: LD_VAR 0 2
84005: PUSH
84006: LD_INT 2
84008: ARRAY
84009: PPUSH
84010: CALL_OW 111
// end ;
84014: LD_VAR 0 3
84018: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84019: LD_INT 0
84021: PPUSH
84022: PPUSH
84023: PPUSH
// if not side or not area then
84024: LD_VAR 0 1
84028: NOT
84029: PUSH
84030: LD_VAR 0 2
84034: NOT
84035: OR
84036: IFFALSE 84040
// exit ;
84038: GO 84159
// tmp := AreaToList ( area , 0 ) ;
84040: LD_ADDR_VAR 0 5
84044: PUSH
84045: LD_VAR 0 2
84049: PPUSH
84050: LD_INT 0
84052: PPUSH
84053: CALL_OW 517
84057: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84058: LD_ADDR_VAR 0 4
84062: PUSH
84063: DOUBLE
84064: LD_INT 1
84066: DEC
84067: ST_TO_ADDR
84068: LD_VAR 0 5
84072: PUSH
84073: LD_INT 1
84075: ARRAY
84076: PUSH
84077: FOR_TO
84078: IFFALSE 84157
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84080: LD_VAR 0 5
84084: PUSH
84085: LD_INT 1
84087: ARRAY
84088: PUSH
84089: LD_VAR 0 4
84093: ARRAY
84094: PPUSH
84095: LD_VAR 0 5
84099: PUSH
84100: LD_INT 2
84102: ARRAY
84103: PUSH
84104: LD_VAR 0 4
84108: ARRAY
84109: PPUSH
84110: CALL_OW 351
84114: IFFALSE 84155
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84116: LD_VAR 0 5
84120: PUSH
84121: LD_INT 1
84123: ARRAY
84124: PUSH
84125: LD_VAR 0 4
84129: ARRAY
84130: PPUSH
84131: LD_VAR 0 5
84135: PUSH
84136: LD_INT 2
84138: ARRAY
84139: PUSH
84140: LD_VAR 0 4
84144: ARRAY
84145: PPUSH
84146: LD_VAR 0 1
84150: PPUSH
84151: CALL_OW 244
// end ;
84155: GO 84077
84157: POP
84158: POP
// end ; end_of_file
84159: LD_VAR 0 3
84163: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84164: LD_VAR 0 1
84168: PUSH
84169: LD_INT 200
84171: DOUBLE
84172: GREATEREQUAL
84173: IFFALSE 84181
84175: LD_INT 299
84177: DOUBLE
84178: LESSEQUAL
84179: IFTRUE 84183
84181: GO 84215
84183: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84184: LD_VAR 0 1
84188: PPUSH
84189: LD_VAR 0 2
84193: PPUSH
84194: LD_VAR 0 3
84198: PPUSH
84199: LD_VAR 0 4
84203: PPUSH
84204: LD_VAR 0 5
84208: PPUSH
84209: CALL 36649 0 5
84213: GO 84292
84215: LD_INT 300
84217: DOUBLE
84218: GREATEREQUAL
84219: IFFALSE 84227
84221: LD_INT 399
84223: DOUBLE
84224: LESSEQUAL
84225: IFTRUE 84229
84227: GO 84291
84229: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84230: LD_VAR 0 1
84234: PPUSH
84235: LD_VAR 0 2
84239: PPUSH
84240: LD_VAR 0 3
84244: PPUSH
84245: LD_VAR 0 4
84249: PPUSH
84250: LD_VAR 0 5
84254: PPUSH
84255: LD_VAR 0 6
84259: PPUSH
84260: LD_VAR 0 7
84264: PPUSH
84265: LD_VAR 0 8
84269: PPUSH
84270: LD_VAR 0 9
84274: PPUSH
84275: LD_VAR 0 10
84279: PPUSH
84280: LD_VAR 0 11
84284: PPUSH
84285: CALL 32637 0 11
84289: GO 84292
84291: POP
// end ;
84292: PPOPN 11
84294: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84295: LD_VAR 0 1
84299: PPUSH
84300: LD_VAR 0 2
84304: PPUSH
84305: LD_VAR 0 3
84309: PPUSH
84310: LD_VAR 0 4
84314: PPUSH
84315: LD_VAR 0 5
84319: PPUSH
84320: CALL 36114 0 5
// end ; end_of_file
84324: PPOPN 5
84326: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84327: LD_VAR 0 1
84331: PPUSH
84332: LD_VAR 0 2
84336: PPUSH
84337: LD_VAR 0 3
84341: PPUSH
84342: LD_VAR 0 4
84346: PPUSH
84347: LD_VAR 0 5
84351: PPUSH
84352: LD_VAR 0 6
84356: PPUSH
84357: CALL 20289 0 6
// end ;
84361: PPOPN 6
84363: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84364: LD_INT 0
84366: PPUSH
// begin if not units then
84367: LD_VAR 0 1
84371: NOT
84372: IFFALSE 84376
// exit ;
84374: GO 84376
// end ;
84376: PPOPN 7
84378: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84379: CALL 20176 0 0
// end ;
84383: PPOPN 1
84385: END
