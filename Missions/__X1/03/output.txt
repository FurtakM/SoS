// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 645 0 0
// PrepareArabian ;
  12: CALL 1004 0 0
// PrepareAmerican ;
  16: CALL 4065 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9184 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack , cargoRecycled ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// cargoRecycled := false ;
 336: LD_ADDR_EXP 30
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 349: LD_INT 0
 351: PPUSH
// uc_side := side ;
 352: LD_ADDR_OWVAR 20
 356: PUSH
 357: LD_VAR 0 1
 361: ST_TO_ADDR
// uc_nation := nation ;
 362: LD_ADDR_OWVAR 21
 366: PUSH
 367: LD_VAR 0 2
 371: ST_TO_ADDR
// vc_chassis := chassis ;
 372: LD_ADDR_OWVAR 37
 376: PUSH
 377: LD_VAR 0 3
 381: ST_TO_ADDR
// vc_engine := engine ;
 382: LD_ADDR_OWVAR 39
 386: PUSH
 387: LD_VAR 0 4
 391: ST_TO_ADDR
// vc_control := control ;
 392: LD_ADDR_OWVAR 38
 396: PUSH
 397: LD_VAR 0 5
 401: ST_TO_ADDR
// vc_weapon := weapon ;
 402: LD_ADDR_OWVAR 40
 406: PUSH
 407: LD_VAR 0 6
 411: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 412: LD_ADDR_OWVAR 41
 416: PUSH
 417: LD_VAR 0 7
 421: ST_TO_ADDR
// result := CreateVehicle ;
 422: LD_ADDR_VAR 0 8
 426: PUSH
 427: CALL_OW 45
 431: ST_TO_ADDR
// end ;
 432: LD_VAR 0 8
 436: RET
// export function SayX ( units , ident ) ; var i ; begin
 437: LD_INT 0
 439: PPUSH
 440: PPUSH
// result := false ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// if not units then
 449: LD_VAR 0 1
 453: NOT
 454: IFFALSE 458
// exit ;
 456: GO 512
// for i in units do
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 1
 467: PUSH
 468: FOR_IN
 469: IFFALSE 510
// if IsOk ( i ) then
 471: LD_VAR 0 4
 475: PPUSH
 476: CALL_OW 302
 480: IFFALSE 508
// begin Say ( i , ident ) ;
 482: LD_VAR 0 4
 486: PPUSH
 487: LD_VAR 0 2
 491: PPUSH
 492: CALL_OW 88
// result := i ;
 496: LD_ADDR_VAR 0 3
 500: PUSH
 501: LD_VAR 0 4
 505: ST_TO_ADDR
// break ;
 506: GO 510
// end ;
 508: GO 468
 510: POP
 511: POP
// end ;
 512: LD_VAR 0 3
 516: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// InitUc ;
 521: CALL_OW 18
// InitHc ;
 525: CALL_OW 19
// uc_side := 0 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// uc_nation := 0 ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_INT 0
 544: ST_TO_ADDR
// for i = 1 to amount do
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: DOUBLE
 551: LD_INT 1
 553: DEC
 554: ST_TO_ADDR
 555: LD_VAR 0 2
 559: PUSH
 560: FOR_TO
 561: IFFALSE 634
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 563: LD_ADDR_OWVAR 29
 567: PUSH
 568: LD_INT 9
 570: PPUSH
 571: LD_INT 12
 573: PPUSH
 574: CALL_OW 12
 578: PUSH
 579: LD_INT 9
 581: PPUSH
 582: LD_INT 12
 584: PPUSH
 585: CALL_OW 12
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: ST_TO_ADDR
// hc_agressivity := 0 ;
 594: LD_ADDR_OWVAR 35
 598: PUSH
 599: LD_INT 0
 601: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 602: LD_INT 0
 604: PPUSH
 605: LD_INT 12
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 615: CALL_OW 44
 619: PPUSH
 620: LD_VAR 0 1
 624: PPUSH
 625: LD_INT 0
 627: PPUSH
 628: CALL_OW 49
// end ;
 632: GO 560
 634: POP
 635: POP
// InitHc ;
 636: CALL_OW 19
// end ;
 640: LD_VAR 0 3
 644: RET
// export function CreateNature ; var i ; begin
 645: LD_INT 0
 647: PPUSH
 648: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 649: LD_INT 2
 651: PPUSH
 652: LD_INT 5
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: LD_INT 4
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_OWVAR 67
 674: ARRAY
 675: PPUSH
 676: CALL 517 0 2
// for i := 1 to 2 do
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: DOUBLE
 686: LD_INT 1
 688: DEC
 689: ST_TO_ADDR
 690: LD_INT 2
 692: PUSH
 693: FOR_TO
 694: IFFALSE 729
// begin hc_class := 21 ;
 696: LD_ADDR_OWVAR 28
 700: PUSH
 701: LD_INT 21
 703: ST_TO_ADDR
// hc_gallery :=  ;
 704: LD_ADDR_OWVAR 33
 708: PUSH
 709: LD_STRING 
 711: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 712: CALL_OW 44
 716: PPUSH
 717: LD_INT 2
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 693
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 2
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 780
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_INT 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 49
// end ;
 778: GO 744
 780: POP
 781: POP
// for i := 1 to 2 do
 782: LD_ADDR_VAR 0 2
 786: PUSH
 787: DOUBLE
 788: LD_INT 1
 790: DEC
 791: ST_TO_ADDR
 792: LD_INT 2
 794: PUSH
 795: FOR_TO
 796: IFFALSE 831
// begin hc_class := 13 ;
 798: LD_ADDR_OWVAR 28
 802: PUSH
 803: LD_INT 13
 805: ST_TO_ADDR
// hc_gallery :=  ;
 806: LD_ADDR_OWVAR 33
 810: PUSH
 811: LD_STRING 
 813: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 814: CALL_OW 44
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 795
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 1
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ; end_of_file
 999: LD_VAR 0 4
1003: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1004: LD_INT 0
1006: PPUSH
1007: PPUSH
1008: PPUSH
1009: PPUSH
// uc_side := 5 ;
1010: LD_ADDR_OWVAR 20
1014: PUSH
1015: LD_INT 5
1017: ST_TO_ADDR
// uc_nation := 2 ;
1018: LD_ADDR_OWVAR 21
1022: PUSH
1023: LD_INT 2
1025: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1026: LD_INT 5
1028: PPUSH
1029: CALL_OW 274
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 65
1039: PPUSH
1040: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1044: LD_ADDR_EXP 39
1048: PUSH
1049: LD_STRING Farmer
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: LD_STRING 
1057: PPUSH
1058: CALL 40609 0 3
1062: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1063: LD_ADDR_EXP 40
1067: PUSH
1068: LD_STRING Omar
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: LD_STRING 
1076: PPUSH
1077: CALL 40609 0 3
1081: ST_TO_ADDR
// omarSquad := [ ] ;
1082: LD_ADDR_EXP 43
1086: PUSH
1087: EMPTY
1088: ST_TO_ADDR
// heikeSquad := [ ] ;
1089: LD_ADDR_EXP 44
1093: PUSH
1094: EMPTY
1095: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1096: LD_ADDR_EXP 45
1100: PUSH
1101: EMPTY
1102: ST_TO_ADDR
// omarCargo := [ ] ;
1103: LD_ADDR_EXP 46
1107: PUSH
1108: EMPTY
1109: ST_TO_ADDR
// for i := 1 to 5 do
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_INT 5
1122: PUSH
1123: FOR_TO
1124: IFFALSE 1282
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1126: LD_INT 0
1128: PPUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 2
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_VAR 0 2
1155: ARRAY
1156: PPUSH
1157: LD_INT 3
1159: PPUSH
1160: CALL_OW 380
// un := CreateHuman ;
1164: LD_ADDR_VAR 0 3
1168: PUSH
1169: CALL_OW 44
1173: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1174: LD_ADDR_EXP 43
1178: PUSH
1179: LD_EXP 43
1183: PUSH
1184: LD_VAR 0 3
1188: UNION
1189: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1190: LD_VAR 0 3
1194: PPUSH
1195: LD_INT 87
1197: PUSH
1198: LD_INT 30
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 91
1207: PUSH
1208: LD_INT 32
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 82
1217: PUSH
1218: LD_INT 15
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 79
1227: PUSH
1228: LD_INT 14
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: LD_INT 82
1237: PUSH
1238: LD_INT 13
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_VAR 0 2
1256: ARRAY
1257: PPUSH
1258: LD_INT 0
1260: PPUSH
1261: CALL 912 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1265: LD_VAR 0 3
1269: PPUSH
1270: LD_INT 93
1272: PPUSH
1273: LD_INT 21
1275: PPUSH
1276: CALL_OW 118
// end ;
1280: GO 1123
1282: POP
1283: POP
// uc_side := 2 ;
1284: LD_ADDR_OWVAR 20
1288: PUSH
1289: LD_INT 2
1291: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1292: LD_ADDR_EXP 31
1296: PUSH
1297: LD_STRING Heike
1299: PPUSH
1300: LD_EXP 1
1304: NOT
1305: PPUSH
1306: LD_EXP 2
1310: PPUSH
1311: CALL 40609 0 3
1315: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1316: LD_ADDR_EXP 35
1320: PUSH
1321: LD_STRING Aviradze
1323: PPUSH
1324: LD_EXP 1
1328: NOT
1329: PPUSH
1330: LD_EXP 2
1334: PPUSH
1335: CALL 40609 0 3
1339: ST_TO_ADDR
// tmp := [ ] ;
1340: LD_ADDR_VAR 0 4
1344: PUSH
1345: EMPTY
1346: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1347: LD_ADDR_EXP 32
1351: PUSH
1352: LD_STRING Givi
1354: PPUSH
1355: LD_EXP 1
1359: NOT
1360: PPUSH
1361: LD_EXP 2
1365: PPUSH
1366: CALL 40609 0 3
1370: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1371: LD_ADDR_EXP 33
1375: PUSH
1376: LD_STRING Mike
1378: PPUSH
1379: LD_EXP 1
1383: NOT
1384: PPUSH
1385: LD_EXP 2
1389: PPUSH
1390: CALL 40609 0 3
1394: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1395: LD_ADDR_EXP 34
1399: PUSH
1400: LD_STRING Kamil
1402: PPUSH
1403: LD_EXP 1
1407: NOT
1408: PPUSH
1409: LD_EXP 2
1413: PPUSH
1414: CALL 40609 0 3
1418: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1419: LD_ADDR_EXP 36
1423: PUSH
1424: LD_STRING Kaia
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_EXP 2
1437: PPUSH
1438: CALL 40609 0 3
1442: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1443: LD_ADDR_EXP 37
1447: PUSH
1448: LD_STRING Sophia
1450: PPUSH
1451: LD_EXP 1
1455: NOT
1456: PPUSH
1457: LD_EXP 2
1461: PPUSH
1462: CALL 40609 0 3
1466: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1467: LD_ADDR_EXP 38
1471: PUSH
1472: LD_STRING Markov
1474: PPUSH
1475: LD_EXP 1
1479: NOT
1480: PPUSH
1481: LD_EXP 2
1485: PPUSH
1486: CALL 40609 0 3
1490: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1491: LD_ADDR_EXP 45
1495: PUSH
1496: LD_STRING 02_others
1498: PPUSH
1499: CALL_OW 31
1503: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1504: LD_ADDR_VAR 0 4
1508: PUSH
1509: LD_EXP 33
1513: PUSH
1514: LD_EXP 34
1518: PUSH
1519: LD_EXP 36
1523: PUSH
1524: LD_EXP 37
1528: PUSH
1529: LD_EXP 38
1533: PUSH
1534: LD_EXP 32
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_EXP 45
1551: ADD
1552: PUSH
1553: LD_INT 0
1555: DIFF
1556: ST_TO_ADDR
// heikeSquad := tmp ;
1557: LD_ADDR_EXP 44
1561: PUSH
1562: LD_VAR 0 4
1566: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1567: LD_EXP 44
1571: PPUSH
1572: LD_INT 25
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 72
1586: PUSH
1587: LD_INT 3
1589: LESS
1590: IFFALSE 1640
// begin SetClass ( Kaia , 1 ) ;
1592: LD_EXP 36
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1604: LD_EXP 33
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1616: LD_EXP 32
1620: PPUSH
1621: LD_INT 1
1623: PPUSH
1624: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1628: LD_EXP 31
1632: PPUSH
1633: LD_INT 1
1635: PPUSH
1636: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1640: LD_ADDR_VAR 0 4
1644: PUSH
1645: LD_VAR 0 4
1649: PUSH
1650: LD_STRING 02_ape
1652: PPUSH
1653: CALL_OW 31
1657: UNION
1658: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1659: LD_EXP 31
1663: PPUSH
1664: LD_INT 92
1666: PPUSH
1667: LD_INT 17
1669: PPUSH
1670: LD_INT 0
1672: PPUSH
1673: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1677: LD_EXP 39
1681: PPUSH
1682: LD_INT 95
1684: PPUSH
1685: LD_INT 19
1687: PPUSH
1688: LD_INT 0
1690: PPUSH
1691: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1695: LD_EXP 40
1699: PPUSH
1700: LD_INT 89
1702: PPUSH
1703: LD_INT 25
1705: PPUSH
1706: LD_INT 0
1708: PPUSH
1709: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1713: LD_EXP 35
1717: PPUSH
1718: LD_INT 92
1720: PPUSH
1721: LD_INT 27
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1731: LD_EXP 40
1735: PPUSH
1736: LD_EXP 35
1740: PPUSH
1741: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1745: LD_EXP 35
1749: PPUSH
1750: LD_EXP 40
1754: PPUSH
1755: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1759: LD_EXP 31
1763: PUSH
1764: LD_EXP 39
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PPUSH
1773: LD_EXP 40
1777: PPUSH
1778: CALL_OW 119
// if tmp then
1782: LD_VAR 0 4
1786: IFFALSE 1840
// for i in tmp do
1788: LD_ADDR_VAR 0 2
1792: PUSH
1793: LD_VAR 0 4
1797: PUSH
1798: FOR_IN
1799: IFFALSE 1838
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1801: LD_VAR 0 2
1805: PPUSH
1806: LD_INT 94
1808: PPUSH
1809: LD_INT 14
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1822: LD_VAR 0 2
1826: PPUSH
1827: LD_EXP 31
1831: PPUSH
1832: CALL_OW 119
// end ;
1836: GO 1798
1838: POP
1839: POP
// farmerSquad := [ ] ;
1840: LD_ADDR_EXP 42
1844: PUSH
1845: EMPTY
1846: ST_TO_ADDR
// uc_side := 5 ;
1847: LD_ADDR_OWVAR 20
1851: PUSH
1852: LD_INT 5
1854: ST_TO_ADDR
// uc_nation := 2 ;
1855: LD_ADDR_OWVAR 21
1859: PUSH
1860: LD_INT 2
1862: ST_TO_ADDR
// for i := 1 to 4 do
1863: LD_ADDR_VAR 0 2
1867: PUSH
1868: DOUBLE
1869: LD_INT 1
1871: DEC
1872: ST_TO_ADDR
1873: LD_INT 4
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1955
// begin PrepareHuman ( false , 1 , 2 ) ;
1879: LD_INT 0
1881: PPUSH
1882: LD_INT 1
1884: PPUSH
1885: LD_INT 2
1887: PPUSH
1888: CALL_OW 380
// un := CreateHuman ;
1892: LD_ADDR_VAR 0 3
1896: PUSH
1897: CALL_OW 44
1901: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1902: LD_VAR 0 3
1906: PPUSH
1907: LD_INT 102
1909: PPUSH
1910: LD_INT 27
1912: PPUSH
1913: LD_INT 4
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1923: LD_ADDR_EXP 42
1927: PUSH
1928: LD_EXP 42
1932: PUSH
1933: LD_VAR 0 3
1937: UNION
1938: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1939: LD_VAR 0 3
1943: PPUSH
1944: LD_EXP 40
1948: PPUSH
1949: CALL_OW 119
// end ;
1953: GO 1876
1955: POP
1956: POP
// for i := 1 to 2 do
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_INT 2
1969: PUSH
1970: FOR_TO
1971: IFFALSE 2049
// begin PrepareHuman ( false , 2 , 2 ) ;
1973: LD_INT 0
1975: PPUSH
1976: LD_INT 2
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: CALL_OW 380
// un := CreateHuman ;
1986: LD_ADDR_VAR 0 3
1990: PUSH
1991: CALL_OW 44
1995: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
1996: LD_VAR 0 3
2000: PPUSH
2001: LD_INT 108
2003: PPUSH
2004: LD_INT 62
2006: PPUSH
2007: LD_INT 2
2009: PPUSH
2010: LD_INT 0
2012: PPUSH
2013: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2017: LD_ADDR_EXP 42
2021: PUSH
2022: LD_EXP 42
2026: PUSH
2027: LD_VAR 0 3
2031: UNION
2032: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2033: LD_VAR 0 3
2037: PPUSH
2038: LD_EXP 40
2042: PPUSH
2043: CALL_OW 119
// end ;
2047: GO 1970
2049: POP
2050: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2051: LD_INT 109
2053: PPUSH
2054: LD_INT 63
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: LD_INT 15
2062: NEG
2063: PPUSH
2064: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2068: LD_INT 109
2070: PPUSH
2071: LD_INT 63
2073: PPUSH
2074: LD_INT 2
2076: PPUSH
2077: CALL_OW 331
// end ;
2081: LD_VAR 0 1
2085: RET
// export function PrepareIbrahim ( x , y ) ; begin
2086: LD_INT 0
2088: PPUSH
// uc_side := 6 ;
2089: LD_ADDR_OWVAR 20
2093: PUSH
2094: LD_INT 6
2096: ST_TO_ADDR
// uc_nation := 3 ;
2097: LD_ADDR_OWVAR 21
2101: PUSH
2102: LD_INT 3
2104: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2105: LD_ADDR_EXP 41
2109: PUSH
2110: LD_STRING IbrahimRu
2112: PPUSH
2113: LD_INT 0
2115: PPUSH
2116: LD_STRING 
2118: PPUSH
2119: CALL 40609 0 3
2123: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2124: LD_EXP 41
2128: PPUSH
2129: LD_VAR 0 1
2133: PPUSH
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 8
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: CALL_OW 50
// end ;
2149: LD_VAR 0 3
2153: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2154: LD_EXP 40
2158: PUSH
2159: LD_EXP 43
2163: ADD
2164: PPUSH
2165: LD_INT 95
2167: PUSH
2168: LD_INT 3
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 72
2179: IFFALSE 2235
2181: GO 2183
2183: DISABLE
2184: LD_INT 0
2186: PPUSH
// begin enable ;
2187: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2188: LD_ADDR_VAR 0 1
2192: PUSH
2193: LD_EXP 40
2197: PUSH
2198: LD_EXP 43
2202: ADD
2203: PPUSH
2204: LD_INT 95
2206: PUSH
2207: LD_INT 3
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PPUSH
2214: CALL_OW 72
2218: PUSH
2219: FOR_IN
2220: IFFALSE 2233
// RemoveUnit ( i ) ;
2222: LD_VAR 0 1
2226: PPUSH
2227: CALL_OW 64
2231: GO 2219
2233: POP
2234: POP
// end ;
2235: PPOPN 1
2237: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2238: LD_EXP 3
2242: PUSH
2243: LD_EXP 39
2247: PPUSH
2248: LD_INT 4
2250: PPUSH
2251: CALL_OW 308
2255: AND
2256: IFFALSE 3060
2258: GO 2260
2260: DISABLE
2261: LD_INT 0
2263: PPUSH
2264: PPUSH
2265: PPUSH
2266: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2267: LD_EXP 39
2271: PPUSH
2272: LD_INT 110
2274: PPUSH
2275: LD_INT 60
2277: PPUSH
2278: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2282: LD_EXP 39
2286: PPUSH
2287: LD_INT 110
2289: PPUSH
2290: LD_INT 61
2292: PPUSH
2293: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_EXP 42
2306: PPUSH
2307: LD_INT 25
2309: PUSH
2310: LD_INT 1
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PPUSH
2317: CALL_OW 72
2321: ST_TO_ADDR
// if tmp then
2322: LD_VAR 0 2
2326: IFFALSE 2420
// begin for i := 1 to 2 do
2328: LD_ADDR_VAR 0 1
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_INT 2
2340: PUSH
2341: FOR_TO
2342: IFFALSE 2418
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2344: LD_VAR 0 2
2348: PUSH
2349: LD_VAR 0 1
2353: ARRAY
2354: PPUSH
2355: LD_INT 5
2357: PPUSH
2358: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2362: LD_VAR 0 2
2366: PUSH
2367: LD_VAR 0 1
2371: ARRAY
2372: PPUSH
2373: LD_INT 2
2375: PPUSH
2376: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2380: LD_VAR 0 2
2384: PUSH
2385: LD_VAR 0 1
2389: ARRAY
2390: PPUSH
2391: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2395: LD_VAR 0 2
2399: PUSH
2400: LD_VAR 0 1
2404: ARRAY
2405: PPUSH
2406: LD_INT 107
2408: PPUSH
2409: LD_INT 66
2411: PPUSH
2412: CALL_OW 171
// end ;
2416: GO 2341
2418: POP
2419: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2420: LD_ADDR_VAR 0 2
2424: PUSH
2425: LD_EXP 42
2429: PPUSH
2430: LD_INT 25
2432: PUSH
2433: LD_INT 2
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PPUSH
2440: CALL_OW 72
2444: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2445: LD_INT 35
2447: PPUSH
2448: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2452: LD_ADDR_VAR 0 2
2456: PUSH
2457: LD_EXP 42
2461: PPUSH
2462: LD_INT 25
2464: PUSH
2465: LD_INT 2
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 72
2476: ST_TO_ADDR
// until tmp ;
2477: LD_VAR 0 2
2481: IFFALSE 2445
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2483: LD_VAR 0 2
2487: PPUSH
2488: LD_INT 31
2490: PPUSH
2491: LD_INT 102
2493: PPUSH
2494: LD_INT 69
2496: PPUSH
2497: LD_INT 2
2499: PPUSH
2500: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2504: LD_INT 35
2506: PPUSH
2507: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2511: LD_EXP 42
2515: PPUSH
2516: LD_INT 3
2518: PUSH
2519: LD_INT 60
2521: PUSH
2522: EMPTY
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: LD_INT 25
2531: PUSH
2532: LD_INT 2
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PPUSH
2543: CALL_OW 72
2547: IFFALSE 2504
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: LD_EXP 42
2558: PPUSH
2559: LD_INT 25
2561: PUSH
2562: LD_INT 2
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PPUSH
2569: CALL_OW 72
2573: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2574: LD_VAR 0 2
2578: PPUSH
2579: LD_INT 6
2581: PPUSH
2582: LD_INT 116
2584: PPUSH
2585: LD_INT 55
2587: PPUSH
2588: LD_INT 4
2590: PPUSH
2591: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2595: LD_VAR 0 2
2599: PPUSH
2600: LD_INT 4
2602: PPUSH
2603: LD_INT 116
2605: PPUSH
2606: LD_INT 70
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 31
2623: PPUSH
2624: LD_INT 109
2626: PPUSH
2627: LD_INT 50
2629: PPUSH
2630: LD_INT 2
2632: PPUSH
2633: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2637: LD_INT 35
2639: PPUSH
2640: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2644: LD_INT 22
2646: PUSH
2647: LD_INT 5
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PUSH
2654: LD_INT 30
2656: PUSH
2657: LD_INT 4
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: PUSH
2664: LD_INT 3
2666: PUSH
2667: LD_INT 57
2669: PUSH
2670: EMPTY
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: LIST
2681: PPUSH
2682: CALL_OW 69
2686: IFFALSE 2637
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2688: LD_ADDR_VAR 0 3
2692: PUSH
2693: LD_INT 22
2695: PUSH
2696: LD_INT 5
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 30
2705: PUSH
2706: LD_INT 4
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 57
2718: PUSH
2719: EMPTY
2720: LIST
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 69
2735: PUSH
2736: LD_INT 1
2738: ARRAY
2739: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2740: LD_ADDR_VAR 0 2
2744: PUSH
2745: LD_EXP 42
2749: PPUSH
2750: LD_INT 25
2752: PUSH
2753: LD_INT 1
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PPUSH
2760: CALL_OW 72
2764: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_VAR 0 3
2774: PPUSH
2775: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2779: LD_INT 35
2781: PPUSH
2782: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 30
2798: PUSH
2799: LD_INT 31
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: LD_INT 3
2808: PUSH
2809: LD_INT 57
2811: PUSH
2812: EMPTY
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 69
2828: PUSH
2829: LD_INT 2
2831: GREATEREQUAL
2832: IFFALSE 2779
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2834: LD_ADDR_VAR 0 2
2838: PUSH
2839: LD_EXP 42
2843: PPUSH
2844: LD_INT 25
2846: PUSH
2847: LD_INT 2
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 72
2858: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2859: LD_VAR 0 2
2863: PUSH
2864: LD_INT 1
2866: ARRAY
2867: PPUSH
2868: LD_INT 5
2870: PPUSH
2871: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2875: LD_VAR 0 2
2879: PUSH
2880: LD_INT 2
2882: ARRAY
2883: PUSH
2884: LD_VAR 0 2
2888: PUSH
2889: LD_INT 3
2891: ARRAY
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PPUSH
2897: LD_VAR 0 3
2901: PPUSH
2902: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2906: LD_VAR 0 2
2910: PUSH
2911: LD_INT 2
2913: ARRAY
2914: PUSH
2915: LD_VAR 0 2
2919: PUSH
2920: LD_INT 3
2922: ARRAY
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2935: LD_VAR 0 2
2939: PUSH
2940: LD_INT 2
2942: ARRAY
2943: PUSH
2944: LD_VAR 0 2
2948: PUSH
2949: LD_INT 3
2951: ARRAY
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: PPUSH
2957: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2961: LD_ADDR_VAR 0 4
2965: PUSH
2966: LD_INT 22
2968: PUSH
2969: LD_INT 5
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 31
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PPUSH
2990: CALL_OW 69
2994: ST_TO_ADDR
// for i := 1 to 2 do
2995: LD_ADDR_VAR 0 1
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 2
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3043
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3011: LD_VAR 0 2
3015: PUSH
3016: LD_VAR 0 1
3020: PUSH
3021: LD_INT 1
3023: PLUS
3024: ARRAY
3025: PPUSH
3026: LD_VAR 0 4
3030: PUSH
3031: LD_VAR 0 1
3035: ARRAY
3036: PPUSH
3037: CALL_OW 180
3041: GO 3008
3043: POP
3044: POP
// wait ( 1 1$00 ) ;
3045: LD_INT 2100
3047: PPUSH
3048: CALL_OW 67
// farmerBaseReady := true ;
3052: LD_ADDR_EXP 4
3056: PUSH
3057: LD_INT 1
3059: ST_TO_ADDR
// end ;
3060: PPOPN 4
3062: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3063: LD_EXP 4
3067: PUSH
3068: LD_EXP 12
3072: NOT
3073: AND
3074: IFFALSE 3596
3076: GO 3078
3078: DISABLE
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
3085: PPUSH
// begin enable ;
3086: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: LD_EXP 42
3096: PPUSH
3097: LD_INT 25
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PPUSH
3107: CALL_OW 72
3111: PUSH
3112: LD_EXP 39
3116: ADD
3117: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_EXP 42
3127: PPUSH
3128: LD_INT 25
3130: PUSH
3131: LD_INT 2
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PPUSH
3138: CALL_OW 72
3142: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3143: LD_ADDR_VAR 0 5
3147: PUSH
3148: LD_INT 22
3150: PUSH
3151: LD_INT 5
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: LD_INT 21
3160: PUSH
3161: LD_INT 3
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: LD_INT 24
3173: PUSH
3174: LD_INT 1000
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: PPUSH
3190: CALL_OW 69
3194: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3195: LD_ADDR_VAR 0 4
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 5
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_INT 30
3212: PUSH
3213: LD_INT 4
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PPUSH
3224: CALL_OW 69
3228: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3229: LD_VAR 0 4
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: CALL_OW 302
3242: IFFALSE 3306
// for i in sol do
3244: LD_ADDR_VAR 0 1
3248: PUSH
3249: LD_VAR 0 3
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3304
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3257: LD_VAR 0 1
3261: PPUSH
3262: CALL_OW 256
3266: PUSH
3267: LD_INT 999
3269: LESS
3270: PUSH
3271: LD_VAR 0 1
3275: PPUSH
3276: CALL_OW 310
3280: NOT
3281: AND
3282: IFFALSE 3302
// ComEnterUnit ( i , arm [ 1 ] ) ;
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_VAR 0 4
3293: PUSH
3294: LD_INT 1
3296: ARRAY
3297: PPUSH
3298: CALL_OW 120
3302: GO 3254
3304: POP
3305: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3306: LD_VAR 0 2
3310: NOT
3311: PUSH
3312: LD_INT 22
3314: PUSH
3315: LD_INT 1
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 21
3324: PUSH
3325: LD_INT 1
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PPUSH
3336: CALL_OW 69
3340: NOT
3341: AND
3342: IFFALSE 3434
// begin uc_side := 5 ;
3344: LD_ADDR_OWVAR 20
3348: PUSH
3349: LD_INT 5
3351: ST_TO_ADDR
// uc_nation := 2 ;
3352: LD_ADDR_OWVAR 21
3356: PUSH
3357: LD_INT 2
3359: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3360: LD_INT 0
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_INT 2
3368: PPUSH
3369: CALL_OW 380
// eng := CreateHuman ;
3373: LD_ADDR_VAR 0 2
3377: PUSH
3378: CALL_OW 44
3382: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3383: LD_VAR 0 2
3387: PPUSH
3388: LD_INT 102
3390: PPUSH
3391: LD_INT 8
3393: PPUSH
3394: LD_INT 0
3396: PPUSH
3397: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3401: LD_VAR 0 2
3405: PPUSH
3406: LD_INT 110
3408: PPUSH
3409: LD_INT 60
3411: PPUSH
3412: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3416: LD_ADDR_EXP 42
3420: PUSH
3421: LD_EXP 42
3425: PUSH
3426: LD_VAR 0 2
3430: UNION
3431: ST_TO_ADDR
// end else
3432: GO 3596
// begin for i in eng do
3434: LD_ADDR_VAR 0 1
3438: PUSH
3439: LD_VAR 0 2
3443: PUSH
3444: FOR_IN
3445: IFFALSE 3594
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3447: LD_INT 10
3449: PPUSH
3450: LD_INT 1
3452: PPUSH
3453: CALL_OW 287
3457: IFFALSE 3508
// begin if IsInUnit ( i ) then
3459: LD_VAR 0 1
3463: PPUSH
3464: CALL_OW 310
3468: IFFALSE 3479
// ComExitBuilding ( i ) ;
3470: LD_VAR 0 1
3474: PPUSH
3475: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3479: LD_VAR 0 1
3483: PPUSH
3484: LD_INT 10
3486: PPUSH
3487: CALL_OW 308
3491: NOT
3492: IFFALSE 3506
// AddComMoveToArea ( i , collectFarmerArea ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: LD_INT 10
3501: PPUSH
3502: CALL_OW 173
// end else
3506: GO 3592
// begin if damagedBuilding then
3508: LD_VAR 0 5
3512: IFFALSE 3556
// begin if IsInUnit ( i ) then
3514: LD_VAR 0 1
3518: PPUSH
3519: CALL_OW 310
3523: IFFALSE 3536
// ComExitBuilding ( i ) else
3525: LD_VAR 0 1
3529: PPUSH
3530: CALL_OW 122
3534: GO 3554
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3536: LD_VAR 0 1
3540: PPUSH
3541: LD_VAR 0 5
3545: PUSH
3546: LD_INT 1
3548: ARRAY
3549: PPUSH
3550: CALL_OW 130
// end else
3554: GO 3592
// if not IsInUnit ( i ) and not HasTask ( i ) then
3556: LD_VAR 0 1
3560: PPUSH
3561: CALL_OW 310
3565: NOT
3566: PUSH
3567: LD_VAR 0 1
3571: PPUSH
3572: CALL_OW 314
3576: NOT
3577: AND
3578: IFFALSE 3592
// ComEnterUnit ( i , arDepot ) ;
3580: LD_VAR 0 1
3584: PPUSH
3585: LD_INT 5
3587: PPUSH
3588: CALL_OW 120
// end ; end ;
3592: GO 3444
3594: POP
3595: POP
// end ; end ;
3596: PPOPN 5
3598: END
// export function CargoEvacuation ; begin
3599: LD_INT 0
3601: PPUSH
// wait ( 0 0$3 ) ;
3602: LD_INT 105
3604: PPUSH
3605: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3609: LD_ADDR_EXP 22
3613: PUSH
3614: LD_EXP 22
3618: PUSH
3619: LD_INT 1
3621: MINUS
3622: ST_TO_ADDR
// if omarCargoCounter = 0 then
3623: LD_EXP 22
3627: PUSH
3628: LD_INT 0
3630: EQUAL
3631: IFFALSE 3635
// exit ;
3633: GO 3942
// if omarCargo then
3635: LD_EXP 46
3639: IFFALSE 3650
// RemoveUnit ( omarCargo ) ;
3641: LD_EXP 46
3645: PPUSH
3646: CALL_OW 64
// omarCargo := PrepareCargo ;
3650: LD_ADDR_EXP 46
3654: PUSH
3655: CALL 3947 0 0
3659: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3660: LD_EXP 46
3664: PPUSH
3665: LD_INT 0
3667: PPUSH
3668: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3672: LD_EXP 46
3676: PPUSH
3677: LD_INT 107
3679: PPUSH
3680: LD_INT 59
3682: PPUSH
3683: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3687: LD_INT 35
3689: PPUSH
3690: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3694: LD_EXP 46
3698: PPUSH
3699: LD_INT 107
3701: PPUSH
3702: LD_INT 59
3704: PPUSH
3705: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3709: LD_EXP 46
3713: PPUSH
3714: CALL_OW 302
3718: NOT
3719: PUSH
3720: LD_EXP 46
3724: PPUSH
3725: CALL_OW 301
3729: OR
3730: IFFALSE 3734
// exit ;
3732: GO 3942
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3734: LD_EXP 46
3738: PPUSH
3739: LD_INT 107
3741: PPUSH
3742: LD_INT 59
3744: PPUSH
3745: CALL_OW 307
3749: PUSH
3750: LD_EXP 46
3754: PPUSH
3755: LD_INT 5
3757: PPUSH
3758: CALL_OW 296
3762: PUSH
3763: LD_INT 6
3765: LESS
3766: OR
3767: IFFALSE 3687
// SetTag ( omarCargo , 1 ) ;
3769: LD_EXP 46
3773: PPUSH
3774: LD_INT 1
3776: PPUSH
3777: CALL_OW 109
// wait ( 0 0$03 ) ;
3781: LD_INT 105
3783: PPUSH
3784: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3788: LD_EXP 46
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3803: LD_EXP 46
3807: PPUSH
3808: LD_INT 103
3810: PPUSH
3811: LD_INT 9
3813: PPUSH
3814: CALL_OW 171
// wait ( 0 0$1 ) ;
3818: LD_INT 35
3820: PPUSH
3821: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3825: LD_EXP 46
3829: PPUSH
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 100
3835: PPUSH
3836: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3847: LD_EXP 46
3851: PPUSH
3852: LD_INT 103
3854: PPUSH
3855: LD_INT 9
3857: PPUSH
3858: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3862: LD_EXP 46
3866: PPUSH
3867: CALL_OW 302
3871: NOT
3872: PUSH
3873: LD_EXP 46
3877: PPUSH
3878: CALL_OW 301
3882: OR
3883: IFFALSE 3887
// exit ;
3885: GO 3942
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3887: LD_EXP 46
3891: PPUSH
3892: LD_INT 103
3894: PPUSH
3895: LD_INT 9
3897: PPUSH
3898: CALL_OW 307
3902: PUSH
3903: LD_EXP 46
3907: PPUSH
3908: LD_INT 3
3910: PPUSH
3911: CALL_OW 308
3915: OR
3916: PUSH
3917: LD_EXP 46
3921: PPUSH
3922: CALL_OW 110
3926: PUSH
3927: LD_INT 0
3929: GREATER
3930: AND
3931: IFFALSE 3840
// RemoveUnit ( omarCargo ) ;
3933: LD_EXP 46
3937: PPUSH
3938: CALL_OW 64
// end ;
3942: LD_VAR 0 1
3946: RET
// export function PrepareCargo ; var un , veh ; begin
3947: LD_INT 0
3949: PPUSH
3950: PPUSH
3951: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3952: LD_ADDR_VAR 0 3
3956: PUSH
3957: LD_INT 5
3959: PPUSH
3960: LD_INT 2
3962: PPUSH
3963: LD_INT 14
3965: PPUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 32
3974: PPUSH
3975: LD_INT 80
3977: PPUSH
3978: CALL 349 0 7
3982: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3983: LD_VAR 0 3
3987: PPUSH
3988: LD_INT 4
3990: PPUSH
3991: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 101
4002: PPUSH
4003: LD_INT 8
4005: PPUSH
4006: LD_INT 0
4008: PPUSH
4009: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4013: LD_INT 0
4015: PPUSH
4016: LD_INT 3
4018: PPUSH
4019: LD_INT 4
4021: PPUSH
4022: CALL_OW 380
// un := CreateHuman ;
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: CALL_OW 44
4035: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4036: LD_VAR 0 2
4040: PPUSH
4041: LD_VAR 0 3
4045: PPUSH
4046: CALL_OW 52
// result := veh ;
4050: LD_ADDR_VAR 0 1
4054: PUSH
4055: LD_VAR 0 3
4059: ST_TO_ADDR
// end ; end_of_file
4060: LD_VAR 0 1
4064: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4065: LD_INT 0
4067: PPUSH
4068: PPUSH
4069: PPUSH
// usForces := [ ] ;
4070: LD_ADDR_EXP 47
4074: PUSH
4075: EMPTY
4076: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4077: LD_ADDR_EXP 49
4081: PUSH
4082: LD_INT 6
4084: PUSH
4085: LD_INT 32
4087: PUSH
4088: LD_INT 27
4090: PUSH
4091: LD_INT 1
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: PUSH
4100: LD_INT 4
4102: PUSH
4103: LD_INT 43
4105: PUSH
4106: LD_INT 24
4108: PUSH
4109: LD_INT 5
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 27
4120: PUSH
4121: LD_INT 29
4123: PUSH
4124: LD_INT 21
4126: PUSH
4127: LD_INT 0
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4141: LD_INT 11
4143: PPUSH
4144: CALL_OW 274
4148: PPUSH
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 150
4154: PUSH
4155: LD_INT 120
4157: PUSH
4158: LD_INT 100
4160: PUSH
4161: LD_INT 80
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: LD_OWVAR 67
4174: ARRAY
4175: PPUSH
4176: CALL_OW 277
// if Difficulty = 1 then
4180: LD_OWVAR 67
4184: PUSH
4185: LD_INT 1
4187: EQUAL
4188: IFFALSE 4197
// RemoveUnit ( hillBun ) ;
4190: LD_INT 14
4192: PPUSH
4193: CALL_OW 64
// uc_side := 1 ;
4197: LD_ADDR_OWVAR 20
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// uc_nation := 1 ;
4205: LD_ADDR_OWVAR 21
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// hc_gallery :=  ;
4213: LD_ADDR_OWVAR 33
4217: PUSH
4218: LD_STRING 
4220: ST_TO_ADDR
// hc_name :=  ;
4221: LD_ADDR_OWVAR 26
4225: PUSH
4226: LD_STRING 
4228: ST_TO_ADDR
// hc_importance := 0 ;
4229: LD_ADDR_OWVAR 32
4233: PUSH
4234: LD_INT 0
4236: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4237: LD_INT 1
4239: PPUSH
4240: LD_INT 1
4242: PPUSH
4243: LD_INT 3
4245: PPUSH
4246: CALL_OW 380
// usCommander := CreateHuman ;
4250: LD_ADDR_EXP 48
4254: PUSH
4255: CALL_OW 44
4259: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4260: LD_EXP 48
4264: PPUSH
4265: LD_INT 11
4267: PPUSH
4268: CALL_OW 52
// if Difficulty > 1 then
4272: LD_OWVAR 67
4276: PUSH
4277: LD_INT 1
4279: GREATER
4280: IFFALSE 4362
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4282: LD_INT 0
4284: PPUSH
4285: LD_INT 1
4287: PPUSH
4288: LD_INT 1
4290: PUSH
4291: LD_INT 2
4293: PUSH
4294: LD_INT 3
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: LIST
4301: PUSH
4302: LD_OWVAR 67
4306: ARRAY
4307: PPUSH
4308: CALL_OW 380
// un := CreateHuman ;
4312: LD_ADDR_VAR 0 3
4316: PUSH
4317: CALL_OW 44
4321: ST_TO_ADDR
// usForces := usForces union un ;
4322: LD_ADDR_EXP 47
4326: PUSH
4327: LD_EXP 47
4331: PUSH
4332: LD_VAR 0 3
4336: UNION
4337: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4338: LD_VAR 0 3
4342: PPUSH
4343: LD_INT 1
4345: PPUSH
4346: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4350: LD_VAR 0 3
4354: PPUSH
4355: LD_INT 14
4357: PPUSH
4358: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: DOUBLE
4368: LD_INT 1
4370: DEC
4371: ST_TO_ADDR
4372: LD_INT 2
4374: PUSH
4375: LD_INT 3
4377: PUSH
4378: LD_INT 4
4380: PUSH
4381: LD_INT 4
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: PUSH
4390: LD_OWVAR 67
4394: ARRAY
4395: PUSH
4396: FOR_TO
4397: IFFALSE 4543
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4399: LD_INT 0
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: LD_INT 1
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: LD_INT 3
4413: PUSH
4414: LD_INT 3
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: PUSH
4423: LD_OWVAR 67
4427: ARRAY
4428: PPUSH
4429: CALL_OW 380
// un := CreateHuman ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: CALL_OW 44
4442: ST_TO_ADDR
// usForces := usForces union un ;
4443: LD_ADDR_EXP 47
4447: PUSH
4448: LD_EXP 47
4452: PUSH
4453: LD_VAR 0 3
4457: UNION
4458: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4459: LD_VAR 0 3
4463: PPUSH
4464: LD_INT 39
4466: PPUSH
4467: LD_INT 24
4469: PPUSH
4470: LD_INT 4
4472: PPUSH
4473: LD_INT 0
4475: PPUSH
4476: CALL_OW 50
// if i < 3 then
4480: LD_VAR 0 2
4484: PUSH
4485: LD_INT 3
4487: LESS
4488: IFFALSE 4541
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4490: LD_VAR 0 3
4494: PPUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 1
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 58
4507: PUSH
4508: EMPTY
4509: LIST
4510: PUSH
4511: LD_INT 30
4513: PUSH
4514: LD_INT 31
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: LIST
4525: PPUSH
4526: CALL_OW 69
4530: PUSH
4531: LD_VAR 0 2
4535: ARRAY
4536: PPUSH
4537: CALL_OW 120
// end ;
4541: GO 4396
4543: POP
4544: POP
// for i := 1 to 2 do
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: DOUBLE
4551: LD_INT 1
4553: DEC
4554: ST_TO_ADDR
4555: LD_INT 2
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4623
// begin PrepareHuman ( false , 2 , 2 ) ;
4561: LD_INT 0
4563: PPUSH
4564: LD_INT 2
4566: PPUSH
4567: LD_INT 2
4569: PPUSH
4570: CALL_OW 380
// un := CreateHuman ;
4574: LD_ADDR_VAR 0 3
4578: PUSH
4579: CALL_OW 44
4583: ST_TO_ADDR
// usForces := usForces union un ;
4584: LD_ADDR_EXP 47
4588: PUSH
4589: LD_EXP 47
4593: PUSH
4594: LD_VAR 0 3
4598: UNION
4599: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4600: LD_VAR 0 3
4604: PPUSH
4605: LD_INT 39
4607: PPUSH
4608: LD_INT 24
4610: PPUSH
4611: LD_INT 4
4613: PPUSH
4614: LD_INT 0
4616: PPUSH
4617: CALL_OW 50
// end ;
4621: GO 4558
4623: POP
4624: POP
// PrepareHuman ( false , 4 , 1 ) ;
4625: LD_INT 0
4627: PPUSH
4628: LD_INT 4
4630: PPUSH
4631: LD_INT 1
4633: PPUSH
4634: CALL_OW 380
// un := CreateHuman ;
4638: LD_ADDR_VAR 0 3
4642: PUSH
4643: CALL_OW 44
4647: ST_TO_ADDR
// usForces := usForces union un ;
4648: LD_ADDR_EXP 47
4652: PUSH
4653: LD_EXP 47
4657: PUSH
4658: LD_VAR 0 3
4662: UNION
4663: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4664: LD_VAR 0 3
4668: PPUSH
4669: LD_INT 39
4671: PPUSH
4672: LD_INT 24
4674: PPUSH
4675: LD_INT 4
4677: PPUSH
4678: LD_INT 0
4680: PPUSH
4681: CALL_OW 50
// end ;
4685: LD_VAR 0 1
4689: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4690: LD_EXP 47
4694: PUSH
4695: LD_EXP 7
4699: NOT
4700: AND
4701: PUSH
4702: LD_EXP 15
4706: NOT
4707: AND
4708: IFFALSE 5139
4710: GO 4712
4712: DISABLE
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
// begin enable ;
4720: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4721: LD_ADDR_VAR 0 3
4725: PUSH
4726: LD_EXP 47
4730: PPUSH
4731: LD_INT 25
4733: PUSH
4734: LD_INT 2
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PPUSH
4741: CALL_OW 72
4745: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4746: LD_ADDR_VAR 0 4
4750: PUSH
4751: LD_EXP 47
4755: PPUSH
4756: LD_INT 25
4758: PUSH
4759: LD_INT 1
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PPUSH
4766: CALL_OW 72
4770: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4771: LD_ADDR_VAR 0 5
4775: PUSH
4776: LD_EXP 47
4780: PPUSH
4781: LD_INT 25
4783: PUSH
4784: LD_INT 4
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PPUSH
4791: CALL_OW 72
4795: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4796: LD_INT 7
4798: PPUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 2
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PPUSH
4809: CALL_OW 70
4813: PUSH
4814: LD_INT 1
4816: EQUAL
4817: IFFALSE 4893
// for i in sol do
4819: LD_ADDR_VAR 0 1
4823: PUSH
4824: LD_VAR 0 4
4828: PUSH
4829: FOR_IN
4830: IFFALSE 4891
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4832: LD_VAR 0 1
4836: PPUSH
4837: CALL_OW 310
4841: NOT
4842: PUSH
4843: LD_VAR 0 1
4847: PPUSH
4848: CALL_OW 310
4852: PPUSH
4853: CALL_OW 266
4857: PUSH
4858: LD_INT 4
4860: EQUAL
4861: NOT
4862: OR
4863: IFFALSE 4889
// begin ComExitBuilding ( i ) ;
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4874: LD_VAR 0 1
4878: PPUSH
4879: LD_INT 37
4881: PPUSH
4882: LD_INT 23
4884: PPUSH
4885: CALL_OW 174
// end ;
4889: GO 4829
4891: POP
4892: POP
// if eng then
4893: LD_VAR 0 3
4897: IFFALSE 5139
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4899: LD_ADDR_VAR 0 2
4903: PUSH
4904: LD_INT 22
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: LD_INT 95
4916: PUSH
4917: LD_INT 7
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 21
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 3
4936: PUSH
4937: LD_INT 24
4939: PUSH
4940: LD_INT 1000
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: ST_TO_ADDR
// if b then
4962: LD_VAR 0 2
4966: IFFALSE 4997
// begin ComExitBuilding ( eng ) ;
4968: LD_VAR 0 3
4972: PPUSH
4973: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
4977: LD_VAR 0 3
4981: PPUSH
4982: LD_VAR 0 2
4986: PUSH
4987: LD_INT 1
4989: ARRAY
4990: PPUSH
4991: CALL_OW 190
// end else
4995: GO 5139
// begin for i in eng do
4997: LD_ADDR_VAR 0 1
5001: PUSH
5002: LD_VAR 0 3
5006: PUSH
5007: FOR_IN
5008: IFFALSE 5137
// if not HasTask ( i ) then
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 314
5019: NOT
5020: IFFALSE 5135
// begin if americanBuildList then
5022: LD_EXP 49
5026: IFFALSE 5111
// begin if IsInUnit ( i ) then
5028: LD_VAR 0 1
5032: PPUSH
5033: CALL_OW 310
5037: IFFALSE 5048
// ComExitBuilding ( i ) ;
5039: LD_VAR 0 1
5043: PPUSH
5044: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5048: LD_VAR 0 1
5052: PPUSH
5053: LD_EXP 49
5057: PUSH
5058: LD_INT 1
5060: ARRAY
5061: PUSH
5062: LD_INT 1
5064: ARRAY
5065: PPUSH
5066: LD_EXP 49
5070: PUSH
5071: LD_INT 1
5073: ARRAY
5074: PUSH
5075: LD_INT 2
5077: ARRAY
5078: PPUSH
5079: LD_EXP 49
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PUSH
5088: LD_INT 3
5090: ARRAY
5091: PPUSH
5092: LD_EXP 49
5096: PUSH
5097: LD_INT 1
5099: ARRAY
5100: PUSH
5101: LD_INT 4
5103: ARRAY
5104: PPUSH
5105: CALL_OW 205
// end else
5109: GO 5135
// if not IsInUnit ( i ) then
5111: LD_VAR 0 1
5115: PPUSH
5116: CALL_OW 310
5120: NOT
5121: IFFALSE 5135
// ComEnterUnit ( i , usDepot ) ;
5123: LD_VAR 0 1
5127: PPUSH
5128: LD_INT 11
5130: PPUSH
5131: CALL_OW 120
// end ;
5135: GO 5007
5137: POP
5138: POP
// end ; end ; end ;
5139: PPOPN 5
5141: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5142: LD_INT 0
5144: PPUSH
5145: PPUSH
5146: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5147: LD_ADDR_VAR 0 3
5151: PUSH
5152: LD_INT 35
5154: PUSH
5155: LD_INT 45
5157: PUSH
5158: LD_INT 48
5160: PUSH
5161: LD_INT 82
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: ST_TO_ADDR
// for i in tech do
5170: LD_ADDR_VAR 0 4
5174: PUSH
5175: LD_VAR 0 3
5179: PUSH
5180: FOR_IN
5181: IFFALSE 5199
// AddComResearch ( lab , i ) ;
5183: LD_VAR 0 1
5187: PPUSH
5188: LD_VAR 0 4
5192: PPUSH
5193: CALL_OW 184
5197: GO 5180
5199: POP
5200: POP
// end ;
5201: LD_VAR 0 2
5205: RET
// every 4 4$00 + 3 3$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5206: LD_EXP 13
5210: PUSH
5211: LD_EXP 24
5215: PUSH
5216: LD_EXP 28
5220: LESSEQUAL
5221: AND
5222: IFFALSE 5247
5224: GO 5226
5226: DISABLE
// begin enable ;
5227: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5228: LD_INT 35
5230: PPUSH
5231: LD_INT 2065
5233: PPUSH
5234: CALL_OW 12
5238: PPUSH
5239: CALL_OW 67
// SendConvoy ;
5243: CALL 5353 0 0
// end ;
5247: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5248: LD_EXP 7
5252: PUSH
5253: LD_EXP 19
5257: AND
5258: IFFALSE 5352
5260: GO 5262
5262: DISABLE
// begin if americanHasEscaped then
5263: LD_EXP 9
5267: IFFALSE 5278
// wait ( 3 3$20 ) else
5269: LD_INT 7000
5271: PPUSH
5272: CALL_OW 67
5276: GO 5285
// wait ( 6 6$40 ) ;
5278: LD_INT 14000
5280: PPUSH
5281: CALL_OW 67
// SendAttack ;
5285: CALL 6126 0 0
// repeat wait ( [ 7 7$40 , 6 6$40 , 6 6$20 , 5 5$50 ] [ Difficulty ] ) ;
5289: LD_INT 16100
5291: PUSH
5292: LD_INT 14000
5294: PUSH
5295: LD_INT 13300
5297: PUSH
5298: LD_INT 12250
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: PPUSH
5313: CALL_OW 67
// SendAttack ;
5317: CALL 6126 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5321: LD_EXP 20
5325: PUSH
5326: LD_INT 5
5328: PUSH
5329: LD_INT 6
5331: PUSH
5332: LD_INT 7
5334: PUSH
5335: LD_INT 8
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: PUSH
5344: LD_OWVAR 67
5348: ARRAY
5349: LESS
5350: IFFALSE 5289
// end ;
5352: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5353: LD_INT 0
5355: PPUSH
5356: PPUSH
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
5361: PPUSH
5362: PPUSH
// road := rand ( 1 , 2 ) ;
5363: LD_ADDR_VAR 0 4
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 2
5373: PPUSH
5374: CALL_OW 12
5378: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5379: LD_ADDR_VAR 0 8
5383: PUSH
5384: LD_INT 3
5386: PUSH
5387: LD_INT 8
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: PUSH
5394: LD_VAR 0 4
5398: ARRAY
5399: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5400: LD_ADDR_VAR 0 5
5404: PUSH
5405: LD_INT 35
5407: PUSH
5408: LD_INT 66
5410: PUSH
5411: LD_INT 1
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 101
5421: PUSH
5422: LD_INT 8
5424: PUSH
5425: LD_INT 4
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5437: LD_ADDR_VAR 0 6
5441: PUSH
5442: LD_INT 34
5444: PUSH
5445: LD_INT 67
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PUSH
5452: LD_INT 38
5454: PUSH
5455: LD_INT 62
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 43
5464: PUSH
5465: LD_INT 54
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: LD_INT 57
5474: PUSH
5475: LD_INT 57
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 77
5484: PUSH
5485: LD_INT 71
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 86
5494: PUSH
5495: LD_INT 60
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 89
5504: PUSH
5505: LD_INT 35
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 93
5514: PUSH
5515: LD_INT 17
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 97
5524: PUSH
5525: LD_INT 10
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: LD_INT 103
5534: PUSH
5535: LD_INT 9
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: ST_TO_ADDR
// if road = 2 then
5554: LD_VAR 0 4
5558: PUSH
5559: LD_INT 2
5561: EQUAL
5562: IFFALSE 5579
// points := ReverseArray ( points ) ;
5564: LD_ADDR_VAR 0 6
5568: PUSH
5569: LD_VAR 0 6
5573: PPUSH
5574: CALL 73587 0 1
5578: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5579: LD_INT 4
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: LD_INT 2
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 12
5596: PPUSH
5597: LD_INT 80
5599: PPUSH
5600: CALL 349 0 7
// veh := CreateVehicle ;
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: CALL_OW 45
5613: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5614: LD_VAR 0 3
5618: PPUSH
5619: LD_VAR 0 5
5623: PUSH
5624: LD_VAR 0 4
5628: ARRAY
5629: PUSH
5630: LD_INT 3
5632: ARRAY
5633: PPUSH
5634: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_VAR 0 5
5647: PUSH
5648: LD_VAR 0 4
5652: ARRAY
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PPUSH
5658: LD_VAR 0 5
5662: PUSH
5663: LD_VAR 0 4
5667: ARRAY
5668: PUSH
5669: LD_INT 2
5671: ARRAY
5672: PPUSH
5673: LD_INT 0
5675: PPUSH
5676: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5680: LD_INT 0
5682: PPUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PPUSH
5691: CALL_OW 380
// un := CreateHuman ;
5695: LD_ADDR_VAR 0 2
5699: PUSH
5700: CALL_OW 44
5704: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5705: LD_VAR 0 2
5709: PPUSH
5710: LD_VAR 0 3
5714: PPUSH
5715: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5719: LD_INT 70
5721: PUSH
5722: LD_INT 66
5724: PUSH
5725: LD_INT 62
5727: PUSH
5728: LD_INT 58
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: LD_OWVAR 67
5741: ARRAY
5742: PPUSH
5743: CALL_OW 13
5747: PUSH
5748: LD_OWVAR 1
5752: PUSH
5753: LD_INT 30
5755: MOD
5756: PLUS
5757: PUSH
5758: LD_EXP 24
5762: PUSH
5763: LD_INT 4
5765: LESS
5766: OR
5767: IFFALSE 5784
// SetCargo ( veh , mat_cans , 100 ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: LD_INT 1
5776: PPUSH
5777: LD_INT 100
5779: PPUSH
5780: CALL_OW 290
// for i := 2 to points do
5784: LD_ADDR_VAR 0 7
5788: PUSH
5789: DOUBLE
5790: LD_INT 2
5792: DEC
5793: ST_TO_ADDR
5794: LD_VAR 0 6
5798: PUSH
5799: FOR_TO
5800: IFFALSE 5843
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5802: LD_VAR 0 3
5806: PPUSH
5807: LD_VAR 0 6
5811: PUSH
5812: LD_VAR 0 7
5816: ARRAY
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PPUSH
5822: LD_VAR 0 6
5826: PUSH
5827: LD_VAR 0 7
5831: ARRAY
5832: PUSH
5833: LD_INT 2
5835: ARRAY
5836: PPUSH
5837: CALL_OW 171
5841: GO 5799
5843: POP
5844: POP
// convoyCounter := convoyCounter + 1 ;
5845: LD_ADDR_EXP 24
5849: PUSH
5850: LD_EXP 24
5854: PUSH
5855: LD_INT 1
5857: PLUS
5858: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5859: LD_INT 35
5861: PPUSH
5862: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5866: LD_VAR 0 3
5870: PPUSH
5871: CALL_OW 255
5875: PUSH
5876: LD_INT 4
5878: NONEQUAL
5879: IFFALSE 5892
// begin ComStop ( veh ) ;
5881: LD_VAR 0 3
5885: PPUSH
5886: CALL_OW 141
// exit ;
5890: GO 6121
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5892: LD_VAR 0 3
5896: PPUSH
5897: CALL_OW 314
5901: NOT
5902: PUSH
5903: LD_VAR 0 3
5907: PPUSH
5908: CALL_OW 302
5912: AND
5913: IFFALSE 5954
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5915: LD_VAR 0 3
5919: PPUSH
5920: LD_VAR 0 6
5924: PUSH
5925: LD_VAR 0 6
5929: ARRAY
5930: PUSH
5931: LD_INT 1
5933: ARRAY
5934: PPUSH
5935: LD_VAR 0 6
5939: PUSH
5940: LD_VAR 0 6
5944: ARRAY
5945: PUSH
5946: LD_INT 2
5948: ARRAY
5949: PPUSH
5950: CALL_OW 111
// if not IsInUnit ( un ) then
5954: LD_VAR 0 2
5958: PPUSH
5959: CALL_OW 310
5963: NOT
5964: IFFALSE 6005
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_VAR 0 6
5975: PUSH
5976: LD_VAR 0 6
5980: ARRAY
5981: PUSH
5982: LD_INT 1
5984: ARRAY
5985: PPUSH
5986: LD_VAR 0 6
5990: PUSH
5991: LD_VAR 0 6
5995: ARRAY
5996: PUSH
5997: LD_INT 2
5999: ARRAY
6000: PPUSH
6001: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6005: LD_VAR 0 3
6009: PPUSH
6010: LD_VAR 0 8
6014: PPUSH
6015: CALL_OW 308
6019: PUSH
6020: LD_VAR 0 2
6024: PPUSH
6025: LD_VAR 0 8
6029: PPUSH
6030: CALL_OW 308
6034: OR
6035: IFFALSE 5859
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6037: LD_VAR 0 2
6041: PPUSH
6042: CALL_OW 302
6046: PUSH
6047: LD_VAR 0 3
6051: PPUSH
6052: CALL_OW 302
6056: NOT
6057: AND
6058: PUSH
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_VAR 0 8
6068: PPUSH
6069: CALL_OW 308
6073: AND
6074: IFFALSE 6085
// RemoveUnit ( un ) ;
6076: LD_VAR 0 2
6080: PPUSH
6081: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6085: LD_VAR 0 3
6089: PPUSH
6090: LD_VAR 0 8
6094: PPUSH
6095: CALL_OW 308
6099: PUSH
6100: LD_VAR 0 3
6104: PPUSH
6105: CALL_OW 302
6109: AND
6110: IFFALSE 6121
// RemoveUnit ( veh ) ;
6112: LD_VAR 0 3
6116: PPUSH
6117: CALL_OW 64
// end ;
6121: LD_VAR 0 1
6125: RET
// export function SendAttack ; var un , veh , i ; begin
6126: LD_INT 0
6128: PPUSH
6129: PPUSH
6130: PPUSH
6131: PPUSH
// if blockAttack then
6132: LD_EXP 29
6136: IFFALSE 6159
// begin repeat wait ( 0 0$1 ) ;
6138: LD_INT 35
6140: PPUSH
6141: CALL_OW 67
// until not blockAttack ;
6145: LD_EXP 29
6149: NOT
6150: IFFALSE 6138
// wait ( 0 0$5 ) ;
6152: LD_INT 175
6154: PPUSH
6155: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 21
6171: PUSH
6172: LD_INT 1
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: PUSH
6188: LD_INT 10
6190: GREATER
6191: IFFALSE 6234
// begin repeat wait ( 0 0$1 ) ;
6193: LD_INT 35
6195: PPUSH
6196: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6200: LD_INT 22
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 21
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PPUSH
6224: CALL_OW 69
6228: PUSH
6229: LD_INT 10
6231: LESSEQUAL
6232: IFFALSE 6193
// end ; IncomingAttack ;
6234: CALL 15548 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6238: LD_INT 2100
6240: PPUSH
6241: LD_INT 3500
6243: PPUSH
6244: CALL_OW 12
6248: PPUSH
6249: CALL_OW 67
// if blockAttack then
6253: LD_EXP 29
6257: IFFALSE 6280
// begin repeat wait ( 0 0$1 ) ;
6259: LD_INT 35
6261: PPUSH
6262: CALL_OW 67
// until not blockAttack ;
6266: LD_EXP 29
6270: NOT
6271: IFFALSE 6259
// wait ( 0 0$5 ) ;
6273: LD_INT 175
6275: PPUSH
6276: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6280: LD_ADDR_VAR 0 4
6284: PUSH
6285: DOUBLE
6286: LD_INT 1
6288: DEC
6289: ST_TO_ADDR
6290: LD_INT 3
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 5
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_OWVAR 67
6312: ARRAY
6313: PUSH
6314: LD_EXP 20
6318: PUSH
6319: LD_INT 3
6321: DIV
6322: PLUS
6323: PUSH
6324: FOR_TO
6325: IFFALSE 6441
// begin uc_side := 1 ;
6327: LD_ADDR_OWVAR 20
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// uc_nation := 1 ;
6335: LD_ADDR_OWVAR 21
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6343: LD_INT 0
6345: PPUSH
6346: LD_INT 1
6348: PPUSH
6349: LD_INT 2
6351: PUSH
6352: LD_INT 3
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: PPUSH
6373: CALL_OW 380
// un := CreateHuman ;
6377: LD_ADDR_VAR 0 2
6381: PUSH
6382: CALL_OW 44
6386: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6387: LD_VAR 0 2
6391: PPUSH
6392: LD_INT 37
6394: PPUSH
6395: LD_INT 70
6397: PPUSH
6398: LD_INT 3
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: CALL_OW 50
// usAttackers := usAttackers union un ;
6408: LD_ADDR_EXP 50
6412: PUSH
6413: LD_EXP 50
6417: PUSH
6418: LD_VAR 0 2
6422: UNION
6423: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6424: LD_VAR 0 2
6428: PPUSH
6429: LD_INT 40
6431: PPUSH
6432: LD_INT 65
6434: PPUSH
6435: CALL_OW 111
// end ;
6439: GO 6324
6441: POP
6442: POP
// uc_side := 1 ;
6443: LD_ADDR_OWVAR 20
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// uc_nation := 1 ;
6451: LD_ADDR_OWVAR 21
6455: PUSH
6456: LD_INT 1
6458: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6459: LD_INT 0
6461: PPUSH
6462: LD_INT 4
6464: PPUSH
6465: LD_INT 2
6467: PPUSH
6468: CALL_OW 380
// un := CreateHuman ;
6472: LD_ADDR_VAR 0 2
6476: PUSH
6477: CALL_OW 44
6481: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6482: LD_VAR 0 2
6486: PPUSH
6487: LD_INT 37
6489: PPUSH
6490: LD_INT 70
6492: PPUSH
6493: LD_INT 3
6495: PPUSH
6496: LD_INT 0
6498: PPUSH
6499: CALL_OW 50
// usAttackers := usAttackers union un ;
6503: LD_ADDR_EXP 50
6507: PUSH
6508: LD_EXP 50
6512: PUSH
6513: LD_VAR 0 2
6517: UNION
6518: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6519: LD_VAR 0 2
6523: PPUSH
6524: LD_INT 40
6526: PPUSH
6527: LD_INT 65
6529: PPUSH
6530: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6534: LD_ADDR_VAR 0 4
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_OWVAR 67
6548: PUSH
6549: LD_EXP 20
6553: PUSH
6554: LD_INT 4
6556: DIV
6557: PLUS
6558: PUSH
6559: FOR_TO
6560: IFFALSE 6756
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_INT 1
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: LD_INT 2
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 3
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 1
6589: PPUSH
6590: LD_INT 3
6592: PPUSH
6593: CALL_OW 12
6597: ARRAY
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 4
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 2
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_INT 3
6624: PPUSH
6625: CALL_OW 12
6629: ARRAY
6630: PPUSH
6631: LD_INT 90
6633: PPUSH
6634: CALL 349 0 7
6638: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6639: LD_VAR 0 3
6643: PPUSH
6644: LD_INT 35
6646: PPUSH
6647: LD_INT 65
6649: PPUSH
6650: LD_INT 0
6652: PPUSH
6653: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6657: LD_INT 0
6659: PPUSH
6660: LD_INT 3
6662: PPUSH
6663: LD_OWVAR 67
6667: PUSH
6668: LD_INT 1
6670: PLUS
6671: PPUSH
6672: CALL_OW 380
// un := CreateHuman ;
6676: LD_ADDR_VAR 0 2
6680: PUSH
6681: CALL_OW 44
6685: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_VAR 0 3
6695: PPUSH
6696: CALL_OW 52
// usAttackers := usAttackers union un ;
6700: LD_ADDR_EXP 50
6704: PUSH
6705: LD_EXP 50
6709: PUSH
6710: LD_VAR 0 2
6714: UNION
6715: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6716: LD_VAR 0 3
6720: PPUSH
6721: LD_INT 39
6723: PPUSH
6724: LD_INT 60
6726: PPUSH
6727: CALL_OW 111
// wait ( 0 0$3 ) ;
6731: LD_INT 105
6733: PPUSH
6734: CALL_OW 67
// usAttackers := usAttackers union veh ;
6738: LD_ADDR_EXP 50
6742: PUSH
6743: LD_EXP 50
6747: PUSH
6748: LD_VAR 0 3
6752: UNION
6753: ST_TO_ADDR
// end ;
6754: GO 6559
6756: POP
6757: POP
// attackWave := attackWave + 1 ;
6758: LD_ADDR_EXP 20
6762: PUSH
6763: LD_EXP 20
6767: PUSH
6768: LD_INT 1
6770: PLUS
6771: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6772: LD_EXP 25
6776: PPUSH
6777: CALL_OW 427
// end ;
6781: LD_VAR 0 1
6785: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6786: LD_INT 0
6788: PPUSH
6789: PPUSH
6790: PPUSH
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
// if retreatAllowed then
6799: LD_EXP 12
6803: IFFALSE 6815
// strategy := 2 else
6805: LD_ADDR_VAR 0 5
6809: PUSH
6810: LD_INT 2
6812: ST_TO_ADDR
6813: GO 6831
// strategy := rand ( 0 , 2 ) ;
6815: LD_ADDR_VAR 0 5
6819: PUSH
6820: LD_INT 0
6822: PPUSH
6823: LD_INT 2
6825: PPUSH
6826: CALL_OW 12
6830: ST_TO_ADDR
// attackFormula := [ ] ;
6831: LD_ADDR_VAR 0 6
6835: PUSH
6836: EMPTY
6837: ST_TO_ADDR
// case strategy of 0 :
6838: LD_VAR 0 5
6842: PUSH
6843: LD_INT 0
6845: DOUBLE
6846: EQUAL
6847: IFTRUE 6851
6849: GO 7181
6851: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6852: LD_INT 11
6854: PPUSH
6855: LD_INT 22
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 30
6867: PUSH
6868: LD_INT 4
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PPUSH
6879: CALL_OW 70
6883: NOT
6884: IFFALSE 6956
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6886: LD_ADDR_VAR 0 6
6890: PUSH
6891: LD_INT 41
6893: PUSH
6894: LD_INT 34
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: PUSH
6904: LD_INT 53
6906: PUSH
6907: LD_INT 62
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 37
6916: PUSH
6917: LD_INT 63
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 44
6926: PUSH
6927: LD_INT 45
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 37
6936: PUSH
6937: LD_INT 28
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: ST_TO_ADDR
6954: GO 7179
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6956: LD_INT 12
6958: PPUSH
6959: LD_INT 22
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 30
6974: PUSH
6975: LD_INT 4
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 30
6984: PUSH
6985: LD_INT 31
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 30
6994: PUSH
6995: LD_INT 32
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PPUSH
7012: CALL_OW 70
7016: NOT
7017: IFFALSE 7100
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7019: LD_ADDR_VAR 0 6
7023: PUSH
7024: LD_INT 27
7026: PUSH
7027: LD_INT 42
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 27
7036: PUSH
7037: LD_INT 32
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 53
7050: PUSH
7051: LD_INT 62
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 37
7060: PUSH
7061: LD_INT 63
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 44
7070: PUSH
7071: LD_INT 45
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 37
7080: PUSH
7081: LD_INT 28
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: ST_TO_ADDR
7098: GO 7179
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7100: LD_ADDR_VAR 0 6
7104: PUSH
7105: LD_INT 71
7107: PUSH
7108: LD_INT 67
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 54
7117: PUSH
7118: LD_INT 35
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 63
7131: PUSH
7132: LD_INT 40
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 37
7141: PUSH
7142: LD_INT 63
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 44
7151: PUSH
7152: LD_INT 45
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 37
7161: PUSH
7162: LD_INT 28
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: ST_TO_ADDR
// end ; 1 :
7179: GO 7384
7181: LD_INT 1
7183: DOUBLE
7184: EQUAL
7185: IFTRUE 7189
7187: GO 7293
7189: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7190: LD_ADDR_VAR 0 6
7194: PUSH
7195: LD_INT 71
7197: PUSH
7198: LD_INT 67
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 82
7207: PUSH
7208: LD_INT 23
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 53
7217: PUSH
7218: LD_INT 7
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 43
7227: PUSH
7228: LD_INT 10
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 53
7243: PUSH
7244: LD_INT 62
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 37
7253: PUSH
7254: LD_INT 63
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 44
7263: PUSH
7264: LD_INT 45
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 37
7273: PUSH
7274: LD_INT 28
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: ST_TO_ADDR
7291: GO 7384
7293: LD_INT 2
7295: DOUBLE
7296: EQUAL
7297: IFTRUE 7301
7299: GO 7383
7301: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7302: LD_ADDR_VAR 0 6
7306: PUSH
7307: LD_INT 90
7309: PUSH
7310: LD_INT 59
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 108
7319: PUSH
7320: LD_INT 64
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 82
7333: PUSH
7334: LD_INT 75
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 73
7343: PUSH
7344: LD_INT 67
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 101
7353: PUSH
7354: LD_INT 65
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 108
7363: PUSH
7364: LD_INT 62
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: ST_TO_ADDR
7381: GO 7384
7383: POP
// if not attackFormula then
7384: LD_VAR 0 6
7388: NOT
7389: IFFALSE 7393
// exit ;
7391: GO 9071
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7393: LD_ADDR_VAR 0 7
7397: PUSH
7398: LD_EXP 50
7402: PPUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 1
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PPUSH
7413: CALL_OW 72
7417: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7418: LD_ADDR_VAR 0 8
7422: PUSH
7423: LD_EXP 50
7427: PPUSH
7428: LD_INT 25
7430: PUSH
7431: LD_INT 4
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PPUSH
7438: CALL_OW 72
7442: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7443: LD_ADDR_VAR 0 9
7447: PUSH
7448: LD_EXP 50
7452: PPUSH
7453: LD_INT 25
7455: PUSH
7456: LD_INT 3
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PPUSH
7463: CALL_OW 72
7467: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7468: LD_ADDR_VAR 0 10
7472: PUSH
7473: LD_EXP 50
7477: PPUSH
7478: LD_INT 21
7480: PUSH
7481: LD_INT 2
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PPUSH
7488: CALL_OW 72
7492: ST_TO_ADDR
// if sci then
7493: LD_VAR 0 8
7497: IFFALSE 7534
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7499: LD_VAR 0 8
7503: PPUSH
7504: LD_VAR 0 6
7508: PUSH
7509: LD_INT 2
7511: ARRAY
7512: PUSH
7513: LD_INT 1
7515: ARRAY
7516: PPUSH
7517: LD_VAR 0 6
7521: PUSH
7522: LD_INT 2
7524: ARRAY
7525: PUSH
7526: LD_INT 2
7528: ARRAY
7529: PPUSH
7530: CALL_OW 111
// repeat wait ( 10 ) ;
7534: LD_INT 10
7536: PPUSH
7537: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7541: LD_ADDR_VAR 0 7
7545: PUSH
7546: LD_EXP 50
7550: PPUSH
7551: LD_INT 25
7553: PUSH
7554: LD_INT 1
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 72
7565: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7566: LD_ADDR_VAR 0 8
7570: PUSH
7571: LD_EXP 50
7575: PPUSH
7576: LD_INT 25
7578: PUSH
7579: LD_INT 4
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 72
7590: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7591: LD_ADDR_VAR 0 9
7595: PUSH
7596: LD_EXP 50
7600: PPUSH
7601: LD_INT 25
7603: PUSH
7604: LD_INT 3
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PPUSH
7611: CALL_OW 72
7615: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7616: LD_ADDR_VAR 0 10
7620: PUSH
7621: LD_EXP 50
7625: PPUSH
7626: LD_INT 21
7628: PUSH
7629: LD_INT 2
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 72
7640: ST_TO_ADDR
// if sol then
7641: LD_VAR 0 7
7645: IFFALSE 8066
// begin for i in sol do
7647: LD_ADDR_VAR 0 2
7651: PUSH
7652: LD_VAR 0 7
7656: PUSH
7657: FOR_IN
7658: IFFALSE 8064
// begin tag := GetTag ( i ) ;
7660: LD_ADDR_VAR 0 4
7664: PUSH
7665: LD_VAR 0 2
7669: PPUSH
7670: CALL_OW 110
7674: ST_TO_ADDR
// if not tag then
7675: LD_VAR 0 4
7679: NOT
7680: IFFALSE 7789
// begin if GetLives ( i ) = 1000 then
7682: LD_VAR 0 2
7686: PPUSH
7687: CALL_OW 256
7691: PUSH
7692: LD_INT 1000
7694: EQUAL
7695: IFFALSE 7711
// SetTag ( i , 1 ) else
7697: LD_VAR 0 2
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 109
7709: GO 7787
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7711: LD_VAR 0 2
7715: PPUSH
7716: LD_VAR 0 6
7720: PUSH
7721: LD_INT 2
7723: ARRAY
7724: PUSH
7725: LD_INT 1
7727: ARRAY
7728: PPUSH
7729: LD_VAR 0 6
7733: PUSH
7734: LD_INT 2
7736: ARRAY
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: PPUSH
7742: CALL_OW 297
7746: PUSH
7747: LD_INT 10
7749: GREATER
7750: IFFALSE 7787
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7752: LD_VAR 0 2
7756: PPUSH
7757: LD_VAR 0 6
7761: PUSH
7762: LD_INT 2
7764: ARRAY
7765: PUSH
7766: LD_INT 1
7768: ARRAY
7769: PPUSH
7770: LD_VAR 0 6
7774: PUSH
7775: LD_INT 2
7777: ARRAY
7778: PUSH
7779: LD_INT 2
7781: ARRAY
7782: PPUSH
7783: CALL_OW 111
// end else
7787: GO 8062
// begin if GetLives ( i ) < 760 then
7789: LD_VAR 0 2
7793: PPUSH
7794: CALL_OW 256
7798: PUSH
7799: LD_INT 760
7801: LESS
7802: IFFALSE 7853
// begin SetTag ( i , 0 ) ;
7804: LD_VAR 0 2
7808: PPUSH
7809: LD_INT 0
7811: PPUSH
7812: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7816: LD_VAR 0 2
7820: PPUSH
7821: LD_VAR 0 6
7825: PUSH
7826: LD_INT 2
7828: ARRAY
7829: PUSH
7830: LD_INT 1
7832: ARRAY
7833: PPUSH
7834: LD_VAR 0 6
7838: PUSH
7839: LD_INT 2
7841: ARRAY
7842: PUSH
7843: LD_INT 2
7845: ARRAY
7846: PPUSH
7847: CALL_OW 111
// end else
7851: GO 8062
// if tag <= attackFormula [ 1 ] then
7853: LD_VAR 0 4
7857: PUSH
7858: LD_VAR 0 6
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: LESSEQUAL
7867: IFFALSE 8028
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7869: LD_VAR 0 2
7873: PPUSH
7874: LD_VAR 0 6
7878: PUSH
7879: LD_INT 1
7881: ARRAY
7882: PUSH
7883: LD_VAR 0 4
7887: ARRAY
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PPUSH
7893: LD_VAR 0 6
7897: PUSH
7898: LD_INT 1
7900: ARRAY
7901: PUSH
7902: LD_VAR 0 4
7906: ARRAY
7907: PUSH
7908: LD_INT 2
7910: ARRAY
7911: PPUSH
7912: CALL_OW 297
7916: PUSH
7917: LD_INT 6
7919: GREATER
7920: IFFALSE 7971
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7922: LD_VAR 0 2
7926: PPUSH
7927: LD_VAR 0 6
7931: PUSH
7932: LD_INT 1
7934: ARRAY
7935: PUSH
7936: LD_VAR 0 4
7940: ARRAY
7941: PUSH
7942: LD_INT 1
7944: ARRAY
7945: PPUSH
7946: LD_VAR 0 6
7950: PUSH
7951: LD_INT 1
7953: ARRAY
7954: PUSH
7955: LD_VAR 0 4
7959: ARRAY
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 114
7969: GO 8026
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7971: LD_INT 81
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 91
7983: PUSH
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 10
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PPUSH
8001: CALL_OW 69
8005: NOT
8006: IFFALSE 8026
// SetTag ( i , tag + 1 ) ;
8008: LD_VAR 0 2
8012: PPUSH
8013: LD_VAR 0 4
8017: PUSH
8018: LD_INT 1
8020: PLUS
8021: PPUSH
8022: CALL_OW 109
// end else
8026: GO 8062
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8028: LD_VAR 0 2
8032: PPUSH
8033: LD_INT 81
8035: PUSH
8036: LD_INT 1
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PPUSH
8043: CALL_OW 69
8047: PPUSH
8048: LD_VAR 0 2
8052: PPUSH
8053: CALL_OW 74
8057: PPUSH
8058: CALL_OW 115
// end ; end ;
8062: GO 7657
8064: POP
8065: POP
// end ; if sci then
8066: LD_VAR 0 8
8070: IFFALSE 8339
// begin if not sol and not mech then
8072: LD_VAR 0 7
8076: NOT
8077: PUSH
8078: LD_VAR 0 9
8082: NOT
8083: AND
8084: IFFALSE 8136
// begin for i in sci do
8086: LD_ADDR_VAR 0 2
8090: PUSH
8091: LD_VAR 0 8
8095: PUSH
8096: FOR_IN
8097: IFFALSE 8132
// begin usForces := usForces union i ;
8099: LD_ADDR_EXP 47
8103: PUSH
8104: LD_EXP 47
8108: PUSH
8109: LD_VAR 0 2
8113: UNION
8114: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_INT 34
8122: PPUSH
8123: LD_INT 68
8125: PPUSH
8126: CALL_OW 111
// end ;
8130: GO 8096
8132: POP
8133: POP
// end else
8134: GO 8339
// for i in sci do
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_VAR 0 8
8145: PUSH
8146: FOR_IN
8147: IFFALSE 8337
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8149: LD_VAR 0 2
8153: PPUSH
8154: LD_VAR 0 6
8158: PUSH
8159: LD_INT 2
8161: ARRAY
8162: PUSH
8163: LD_INT 1
8165: ARRAY
8166: PPUSH
8167: LD_VAR 0 6
8171: PUSH
8172: LD_INT 2
8174: ARRAY
8175: PUSH
8176: LD_INT 2
8178: ARRAY
8179: PPUSH
8180: CALL_OW 297
8184: PUSH
8185: LD_INT 10
8187: GREATER
8188: IFFALSE 8227
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8190: LD_VAR 0 2
8194: PPUSH
8195: LD_VAR 0 6
8199: PUSH
8200: LD_INT 2
8202: ARRAY
8203: PUSH
8204: LD_INT 1
8206: ARRAY
8207: PPUSH
8208: LD_VAR 0 6
8212: PUSH
8213: LD_INT 2
8215: ARRAY
8216: PUSH
8217: LD_INT 2
8219: ARRAY
8220: PPUSH
8221: CALL_OW 111
8225: GO 8335
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8227: LD_VAR 0 7
8231: PPUSH
8232: LD_INT 3
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 1000
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 91
8251: PUSH
8252: LD_VAR 0 2
8256: PUSH
8257: LD_INT 10
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PPUSH
8269: CALL_OW 72
8273: IFFALSE 8335
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8275: LD_VAR 0 2
8279: PPUSH
8280: LD_VAR 0 7
8284: PPUSH
8285: LD_INT 3
8287: PUSH
8288: LD_INT 24
8290: PUSH
8291: LD_INT 1000
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 91
8304: PUSH
8305: LD_VAR 0 2
8309: PUSH
8310: LD_INT 10
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PPUSH
8322: CALL_OW 72
8326: PUSH
8327: LD_INT 1
8329: ARRAY
8330: PPUSH
8331: CALL_OW 128
8335: GO 8146
8337: POP
8338: POP
// end ; if mech then
8339: LD_VAR 0 9
8343: IFFALSE 9053
// begin for i in mech do
8345: LD_ADDR_VAR 0 2
8349: PUSH
8350: LD_VAR 0 9
8354: PUSH
8355: FOR_IN
8356: IFFALSE 9051
// begin tag := GetTag ( i ) ;
8358: LD_ADDR_VAR 0 4
8362: PUSH
8363: LD_VAR 0 2
8367: PPUSH
8368: CALL_OW 110
8372: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8373: LD_ADDR_VAR 0 11
8377: PUSH
8378: LD_VAR 0 2
8382: PPUSH
8383: CALL_OW 310
8387: ST_TO_ADDR
// if not tag then
8388: LD_VAR 0 4
8392: NOT
8393: IFFALSE 8764
// begin if veh then
8395: LD_VAR 0 11
8399: IFFALSE 8570
// begin if GetLives ( veh ) = 1000 then
8401: LD_VAR 0 11
8405: PPUSH
8406: CALL_OW 256
8410: PUSH
8411: LD_INT 1000
8413: EQUAL
8414: IFFALSE 8430
// SetTag ( i , 1 ) else
8416: LD_VAR 0 2
8420: PPUSH
8421: LD_INT 1
8423: PPUSH
8424: CALL_OW 109
8428: GO 8568
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8430: LD_VAR 0 11
8434: PPUSH
8435: LD_VAR 0 6
8439: PUSH
8440: LD_INT 3
8442: ARRAY
8443: PUSH
8444: LD_INT 1
8446: ARRAY
8447: PPUSH
8448: LD_VAR 0 6
8452: PUSH
8453: LD_INT 3
8455: ARRAY
8456: PUSH
8457: LD_INT 2
8459: ARRAY
8460: PPUSH
8461: CALL_OW 297
8465: PUSH
8466: LD_INT 8
8468: GREATER
8469: IFFALSE 8508
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8471: LD_VAR 0 11
8475: PPUSH
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 3
8483: ARRAY
8484: PUSH
8485: LD_INT 1
8487: ARRAY
8488: PPUSH
8489: LD_VAR 0 6
8493: PUSH
8494: LD_INT 3
8496: ARRAY
8497: PUSH
8498: LD_INT 2
8500: ARRAY
8501: PPUSH
8502: CALL_OW 111
8506: GO 8568
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8508: LD_INT 81
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 91
8520: PUSH
8521: LD_VAR 0 2
8525: PUSH
8526: LD_INT 12
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PPUSH
8538: CALL_OW 69
8542: NOT
8543: IFFALSE 8568
// begin ComExitVehicle ( i ) ;
8545: LD_VAR 0 2
8549: PPUSH
8550: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8554: LD_VAR 0 2
8558: PPUSH
8559: LD_VAR 0 11
8563: PPUSH
8564: CALL_OW 189
// end ; end else
8568: GO 8762
// if GetLives ( i ) < 400 then
8570: LD_VAR 0 2
8574: PPUSH
8575: CALL_OW 256
8579: PUSH
8580: LD_INT 400
8582: LESS
8583: IFFALSE 8634
// begin usAttackers := usAttackers diff i ;
8585: LD_ADDR_EXP 50
8589: PUSH
8590: LD_EXP 50
8594: PUSH
8595: LD_VAR 0 2
8599: DIFF
8600: ST_TO_ADDR
// usForces := usForces union i ;
8601: LD_ADDR_EXP 47
8605: PUSH
8606: LD_EXP 47
8610: PUSH
8611: LD_VAR 0 2
8615: UNION
8616: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8617: LD_VAR 0 2
8621: PPUSH
8622: LD_INT 34
8624: PPUSH
8625: LD_INT 68
8627: PPUSH
8628: CALL_OW 111
// end else
8632: GO 8762
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8634: LD_VAR 0 10
8638: PPUSH
8639: LD_INT 58
8641: PUSH
8642: EMPTY
8643: LIST
8644: PUSH
8645: LD_INT 24
8647: PUSH
8648: LD_INT 1000
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PPUSH
8659: CALL_OW 72
8663: PUSH
8664: LD_VAR 0 2
8668: PPUSH
8669: CALL_OW 314
8673: NOT
8674: AND
8675: PUSH
8676: LD_INT 81
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 91
8688: PUSH
8689: LD_VAR 0 2
8693: PUSH
8694: LD_INT 9
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 69
8710: OR
8711: IFFALSE 8762
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8713: LD_VAR 0 2
8717: PPUSH
8718: LD_VAR 0 10
8722: PPUSH
8723: LD_INT 58
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: LD_INT 24
8731: PUSH
8732: LD_INT 250
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PPUSH
8743: CALL_OW 72
8747: PPUSH
8748: LD_VAR 0 2
8752: PPUSH
8753: CALL_OW 74
8757: PPUSH
8758: CALL_OW 120
// end else
8762: GO 9049
// begin if veh and GetLives ( veh ) < 760 then
8764: LD_VAR 0 11
8768: PUSH
8769: LD_VAR 0 11
8773: PPUSH
8774: CALL_OW 256
8778: PUSH
8779: LD_INT 760
8781: LESS
8782: AND
8783: IFFALSE 8834
// begin SetTag ( i , 0 ) ;
8785: LD_VAR 0 2
8789: PPUSH
8790: LD_INT 0
8792: PPUSH
8793: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8797: LD_VAR 0 11
8801: PPUSH
8802: LD_VAR 0 6
8806: PUSH
8807: LD_INT 3
8809: ARRAY
8810: PUSH
8811: LD_INT 1
8813: ARRAY
8814: PPUSH
8815: LD_VAR 0 6
8819: PUSH
8820: LD_INT 3
8822: ARRAY
8823: PUSH
8824: LD_INT 2
8826: ARRAY
8827: PPUSH
8828: CALL_OW 111
// end else
8832: GO 9049
// if veh then
8834: LD_VAR 0 11
8838: IFFALSE 9049
// if tag <= attackFormula [ 4 ] then
8840: LD_VAR 0 4
8844: PUSH
8845: LD_VAR 0 6
8849: PUSH
8850: LD_INT 4
8852: ARRAY
8853: LESSEQUAL
8854: IFFALSE 9015
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8856: LD_VAR 0 11
8860: PPUSH
8861: LD_VAR 0 6
8865: PUSH
8866: LD_INT 4
8868: ARRAY
8869: PUSH
8870: LD_VAR 0 4
8874: ARRAY
8875: PUSH
8876: LD_INT 1
8878: ARRAY
8879: PPUSH
8880: LD_VAR 0 6
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PUSH
8889: LD_VAR 0 4
8893: ARRAY
8894: PUSH
8895: LD_INT 2
8897: ARRAY
8898: PPUSH
8899: CALL_OW 297
8903: PUSH
8904: LD_INT 6
8906: GREATER
8907: IFFALSE 8958
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8909: LD_VAR 0 11
8913: PPUSH
8914: LD_VAR 0 6
8918: PUSH
8919: LD_INT 4
8921: ARRAY
8922: PUSH
8923: LD_VAR 0 4
8927: ARRAY
8928: PUSH
8929: LD_INT 1
8931: ARRAY
8932: PPUSH
8933: LD_VAR 0 6
8937: PUSH
8938: LD_INT 4
8940: ARRAY
8941: PUSH
8942: LD_VAR 0 4
8946: ARRAY
8947: PUSH
8948: LD_INT 2
8950: ARRAY
8951: PPUSH
8952: CALL_OW 114
8956: GO 9013
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8958: LD_INT 81
8960: PUSH
8961: LD_INT 1
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 91
8970: PUSH
8971: LD_VAR 0 11
8975: PUSH
8976: LD_INT 10
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: NOT
8993: IFFALSE 9013
// SetTag ( i , tag + 1 ) ;
8995: LD_VAR 0 2
8999: PPUSH
9000: LD_VAR 0 4
9004: PUSH
9005: LD_INT 1
9007: PLUS
9008: PPUSH
9009: CALL_OW 109
// end else
9013: GO 9049
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9015: LD_VAR 0 11
9019: PPUSH
9020: LD_INT 81
9022: PUSH
9023: LD_INT 1
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PPUSH
9035: LD_VAR 0 2
9039: PPUSH
9040: CALL_OW 74
9044: PPUSH
9045: CALL_OW 115
// end ; end ;
9049: GO 8355
9051: POP
9052: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9053: LD_EXP 50
9057: PPUSH
9058: LD_INT 52
9060: PUSH
9061: EMPTY
9062: LIST
9063: PPUSH
9064: CALL_OW 72
9068: NOT
9069: IFFALSE 7534
// end ;
9071: LD_VAR 0 1
9075: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9076: LD_INT 22
9078: PUSH
9079: LD_INT 1
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 32
9088: PUSH
9089: LD_INT 1
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 69
9104: IFFALSE 9181
9106: GO 9108
9108: DISABLE
9109: LD_INT 0
9111: PPUSH
// begin enable ;
9112: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_INT 22
9120: PUSH
9121: LD_INT 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 32
9130: PUSH
9131: LD_INT 1
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 69
9146: PUSH
9147: FOR_IN
9148: IFFALSE 9179
// if GetFuel ( i ) < 10 then
9150: LD_VAR 0 1
9154: PPUSH
9155: CALL_OW 261
9159: PUSH
9160: LD_INT 10
9162: LESS
9163: IFFALSE 9177
// SetFuel ( i , 10 ) ;
9165: LD_VAR 0 1
9169: PPUSH
9170: LD_INT 10
9172: PPUSH
9173: CALL_OW 240
9177: GO 9147
9179: POP
9180: POP
// end ; end_of_file
9181: PPOPN 1
9183: END
// export function Action ; var hasAll , i , tmp ; begin
9184: LD_INT 0
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_INT 22
9197: PUSH
9198: LD_INT 2
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: LD_INT 21
9207: PUSH
9208: LD_INT 1
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PUSH
9215: LD_INT 23
9217: PUSH
9218: LD_INT 2
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: PPUSH
9230: CALL_OW 69
9234: PUSH
9235: LD_INT 7
9237: GREATEREQUAL
9238: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9239: LD_VAR 0 2
9243: PPUSH
9244: LD_STRING 03_HasAll
9246: PPUSH
9247: CALL_OW 39
// Video ( true ) ;
9251: LD_INT 1
9253: PPUSH
9254: CALL 78283 0 1
// CenterNowOnUnits ( Heike ) ;
9258: LD_EXP 31
9262: PPUSH
9263: CALL_OW 87
// wait ( 0 0$2 ) ;
9267: LD_INT 70
9269: PPUSH
9270: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9274: LD_EXP 39
9278: PPUSH
9279: LD_STRING DF-1-start
9281: PPUSH
9282: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9286: LD_EXP 31
9290: PPUSH
9291: LD_EXP 39
9295: PPUSH
9296: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9300: LD_EXP 31
9304: PPUSH
9305: LD_STRING DH-1-start
9307: PPUSH
9308: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9312: LD_EXP 40
9316: PPUSH
9317: LD_INT 92
9319: PPUSH
9320: LD_INT 21
9322: PPUSH
9323: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9327: LD_EXP 35
9331: PPUSH
9332: LD_INT 94
9334: PPUSH
9335: LD_INT 23
9337: PPUSH
9338: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9342: LD_EXP 43
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PPUSH
9351: LD_INT 90
9353: PPUSH
9354: LD_INT 23
9356: PPUSH
9357: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9361: LD_EXP 43
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PPUSH
9370: LD_INT 93
9372: PPUSH
9373: LD_INT 25
9375: PPUSH
9376: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9380: LD_EXP 43
9384: PPUSH
9385: LD_EXP 40
9389: PPUSH
9390: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9394: LD_EXP 40
9398: PUSH
9399: LD_EXP 35
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PPUSH
9408: LD_EXP 31
9412: PPUSH
9413: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9417: LD_EXP 31
9421: PPUSH
9422: LD_EXP 40
9426: PPUSH
9427: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9431: LD_INT 35
9433: PPUSH
9434: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9438: LD_EXP 40
9442: PPUSH
9443: LD_INT 92
9445: PPUSH
9446: LD_INT 21
9448: PPUSH
9449: CALL_OW 307
9453: IFFALSE 9431
// Say ( Omar , DO-1-start ) ;
9455: LD_EXP 40
9459: PPUSH
9460: LD_STRING DO-1-start
9462: PPUSH
9463: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9467: LD_EXP 31
9471: PPUSH
9472: LD_STRING DH-2-start
9474: PPUSH
9475: CALL_OW 88
// if hasAll then
9479: LD_VAR 0 2
9483: IFFALSE 9611
// begin Say ( Omar , DO-2-start ) ;
9485: LD_EXP 40
9489: PPUSH
9490: LD_STRING DO-2-start
9492: PPUSH
9493: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9497: LD_EXP 40
9501: PPUSH
9502: LD_STRING DO-3-start
9504: PPUSH
9505: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9509: LD_EXP 31
9513: PPUSH
9514: LD_STRING DH-3-start
9516: PPUSH
9517: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9521: LD_EXP 39
9525: PPUSH
9526: LD_STRING DF-2-start
9528: PPUSH
9529: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9533: LD_EXP 40
9537: PPUSH
9538: LD_EXP 39
9542: PPUSH
9543: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9547: LD_EXP 40
9551: PPUSH
9552: LD_STRING DO-4-start
9554: PPUSH
9555: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9559: LD_EXP 39
9563: PPUSH
9564: LD_STRING DF-3-start
9566: PPUSH
9567: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9571: LD_EXP 40
9575: PPUSH
9576: LD_STRING DO-5-start
9578: PPUSH
9579: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9583: LD_EXP 39
9587: PPUSH
9588: LD_STRING DF-4-start
9590: PPUSH
9591: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9595: LD_EXP 40
9599: PPUSH
9600: LD_EXP 31
9604: PPUSH
9605: CALL_OW 119
// end else
9609: GO 9711
// begin Say ( Omar , DO-2-start-a ) ;
9611: LD_EXP 40
9615: PPUSH
9616: LD_STRING DO-2-start-a
9618: PPUSH
9619: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9623: LD_EXP 40
9627: PPUSH
9628: LD_STRING DO-3-start-a
9630: PPUSH
9631: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9635: LD_EXP 31
9639: PPUSH
9640: LD_STRING DH-3-start-a
9642: PPUSH
9643: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9647: LD_EXP 39
9651: PPUSH
9652: LD_STRING DF-2-start-a
9654: PPUSH
9655: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9659: LD_EXP 40
9663: PPUSH
9664: LD_EXP 39
9668: PPUSH
9669: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9673: LD_EXP 40
9677: PPUSH
9678: LD_STRING DO-4-start-a
9680: PPUSH
9681: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9685: LD_EXP 39
9689: PPUSH
9690: LD_STRING DF-3-start-a
9692: PPUSH
9693: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9697: LD_EXP 40
9701: PPUSH
9702: LD_EXP 31
9706: PPUSH
9707: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9711: LD_INT 10
9713: PPUSH
9714: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9718: LD_EXP 40
9722: PPUSH
9723: LD_STRING DO-1-mission
9725: PPUSH
9726: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9730: LD_EXP 40
9734: PPUSH
9735: LD_STRING DO-2-mission
9737: PPUSH
9738: CALL_OW 88
// if not hasAll then
9742: LD_VAR 0 2
9746: NOT
9747: IFFALSE 9761
// Say ( Omar , DO-3-mission ) ;
9749: LD_EXP 40
9753: PPUSH
9754: LD_STRING DO-3-mission
9756: PPUSH
9757: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9761: LD_EXP 40
9765: PPUSH
9766: LD_STRING DO-4-mission
9768: PPUSH
9769: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9773: LD_EXP 31
9777: PPUSH
9778: LD_STRING DH-1-mission
9780: PPUSH
9781: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9785: LD_EXP 39
9789: PPUSH
9790: LD_STRING DF-1-mission
9792: PPUSH
9793: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9797: LD_EXP 40
9801: PPUSH
9802: LD_STRING DO-5-mission
9804: PPUSH
9805: CALL_OW 88
// if not hasAll then
9809: LD_VAR 0 2
9813: NOT
9814: IFFALSE 9949
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9816: LD_ADDR_VAR 0 4
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 21
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 23
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: LIST
9855: PPUSH
9856: CALL_OW 69
9860: ST_TO_ADDR
// for i := 7 downto tmp do
9861: LD_ADDR_VAR 0 3
9865: PUSH
9866: DOUBLE
9867: LD_INT 7
9869: INC
9870: ST_TO_ADDR
9871: LD_VAR 0 4
9875: PUSH
9876: FOR_DOWNTO
9877: IFFALSE 9947
// begin if omarSquad < 3 then
9879: LD_EXP 43
9883: PUSH
9884: LD_INT 3
9886: LESS
9887: IFFALSE 9891
// break ;
9889: GO 9947
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9891: LD_EXP 43
9895: PUSH
9896: LD_INT 3
9898: ARRAY
9899: PPUSH
9900: LD_INT 2
9902: PPUSH
9903: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9907: LD_ADDR_EXP 45
9911: PUSH
9912: LD_EXP 45
9916: PUSH
9917: LD_EXP 43
9921: PUSH
9922: LD_INT 3
9924: ARRAY
9925: UNION
9926: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9927: LD_ADDR_EXP 43
9931: PUSH
9932: LD_EXP 43
9936: PPUSH
9937: LD_INT 3
9939: PPUSH
9940: CALL_OW 3
9944: ST_TO_ADDR
// end ;
9945: GO 9876
9947: POP
9948: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9949: LD_EXP 40
9953: PUSH
9954: LD_EXP 43
9958: ADD
9959: PPUSH
9960: LD_INT 103
9962: PPUSH
9963: LD_INT 9
9965: PPUSH
9966: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9970: LD_VAR 0 2
9974: PUSH
9975: LD_EXP 36
9979: PPUSH
9980: CALL_OW 302
9984: AND
9985: IFFALSE 10046
// begin wait ( 0 0$3 ) ;
9987: LD_INT 105
9989: PPUSH
9990: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9994: LD_EXP 36
9998: PPUSH
9999: LD_EXP 39
10003: PPUSH
10004: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10008: LD_EXP 36
10012: PPUSH
10013: LD_STRING DK-1-side
10015: PPUSH
10016: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10020: LD_EXP 39
10024: PPUSH
10025: LD_EXP 36
10029: PPUSH
10030: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10034: LD_EXP 39
10038: PPUSH
10039: LD_STRING DF-1-side
10041: PPUSH
10042: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10046: LD_INT 22
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PPUSH
10056: CALL_OW 69
10060: PPUSH
10061: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10065: LD_EXP 39
10069: PUSH
10070: LD_EXP 42
10074: ADD
10075: PPUSH
10076: LD_INT 108
10078: PPUSH
10079: LD_INT 62
10081: PPUSH
10082: CALL_OW 111
// gameStarted := true ;
10086: LD_ADDR_EXP 3
10090: PUSH
10091: LD_INT 1
10093: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10094: LD_INT 105
10096: PPUSH
10097: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10101: LD_EXP 31
10105: PPUSH
10106: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10110: LD_EXP 31
10114: PPUSH
10115: LD_EXP 35
10119: PPUSH
10120: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10124: LD_INT 22
10126: PUSH
10127: LD_INT 2
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PPUSH
10134: CALL_OW 69
10138: PUSH
10139: LD_EXP 31
10143: DIFF
10144: PPUSH
10145: LD_EXP 31
10149: PPUSH
10150: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10154: LD_EXP 31
10158: PPUSH
10159: LD_STRING DH-1-explore
10161: PPUSH
10162: CALL_OW 88
// if Givi then
10166: LD_EXP 32
10170: IFFALSE 10186
// Say ( Givi , DG-1-explore ) else
10172: LD_EXP 32
10176: PPUSH
10177: LD_STRING DG-1-explore
10179: PPUSH
10180: CALL_OW 88
10184: GO 10223
// if heikeSecondSquad then
10186: LD_EXP 45
10190: IFFALSE 10223
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10192: LD_EXP 45
10196: PPUSH
10197: LD_INT 26
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PPUSH
10207: CALL_OW 72
10211: PUSH
10212: LD_INT 1
10214: ARRAY
10215: PPUSH
10216: LD_STRING DArm-1-explore
10218: PPUSH
10219: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10223: LD_EXP 35
10227: PPUSH
10228: LD_STRING DA-1-explore
10230: PPUSH
10231: CALL_OW 88
// if Sophia then
10235: LD_EXP 37
10239: IFFALSE 10317
// begin Say ( Sophia , DS-2-explore ) ;
10241: LD_EXP 37
10245: PPUSH
10246: LD_STRING DS-2-explore
10248: PPUSH
10249: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10253: LD_EXP 35
10257: PPUSH
10258: LD_STRING DA-2-explore
10260: PPUSH
10261: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10265: LD_EXP 37
10269: PPUSH
10270: LD_EXP 35
10274: PPUSH
10275: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10279: LD_EXP 35
10283: PPUSH
10284: LD_EXP 37
10288: PPUSH
10289: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10293: LD_EXP 37
10297: PPUSH
10298: LD_STRING DS-3-explore
10300: PPUSH
10301: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10305: LD_EXP 35
10309: PPUSH
10310: LD_STRING DA-3-explore
10312: PPUSH
10313: CALL_OW 88
// end ; if Mike then
10317: LD_EXP 33
10321: IFFALSE 10377
// begin Say ( Mike , DM-1-explore ) ;
10323: LD_EXP 33
10327: PPUSH
10328: LD_STRING DM-1-explore
10330: PPUSH
10331: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10335: LD_EXP 31
10339: PPUSH
10340: LD_STRING DH-2-explore
10342: PPUSH
10343: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10347: LD_EXP 33
10351: PPUSH
10352: LD_STRING DM-2-explore
10354: PPUSH
10355: CALL_OW 88
// if Kaia then
10359: LD_EXP 36
10363: IFFALSE 10377
// Say ( Kaia , DK-1-explore ) ;
10365: LD_EXP 36
10369: PPUSH
10370: LD_STRING DK-1-explore
10372: PPUSH
10373: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10377: LD_INT 22
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: PPUSH
10392: CALL_OW 139
// Video ( false ) ;
10396: LD_INT 0
10398: PPUSH
10399: CALL 78283 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10403: LD_STRING BuildBase
10405: PPUSH
10406: CALL_OW 337
// SaveForQuickRestart ;
10410: CALL_OW 22
// end ;
10414: LD_VAR 0 1
10418: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10419: LD_EXP 5
10423: PUSH
10424: LD_EXP 7
10428: NOT
10429: AND
10430: IFFALSE 10617
10432: GO 10434
10434: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10435: LD_EXP 48
10439: PPUSH
10440: LD_STRING DUsm-4-assault
10442: PPUSH
10443: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10447: LD_INT 35
10449: PPUSH
10450: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10454: LD_INT 22
10456: PUSH
10457: LD_INT 2
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 21
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 50
10476: PUSH
10477: EMPTY
10478: LIST
10479: PUSH
10480: LD_INT 95
10482: PUSH
10483: LD_INT 7
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 69
10500: IFFALSE 10447
// if not IsOk ( usCommander ) or americanBaseCaptured then
10502: LD_EXP 48
10506: PPUSH
10507: CALL_OW 302
10511: NOT
10512: PUSH
10513: LD_EXP 7
10517: OR
10518: IFFALSE 10522
// exit ;
10520: GO 10617
// repeat wait ( 0 0$1 ) ;
10522: LD_INT 35
10524: PPUSH
10525: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10529: LD_INT 22
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 21
10541: PUSH
10542: LD_INT 1
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 50
10551: PUSH
10552: EMPTY
10553: LIST
10554: PUSH
10555: LD_INT 95
10557: PUSH
10558: LD_INT 7
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 69
10575: NOT
10576: IFFALSE 10522
// wait ( 0 0$3 ) ;
10578: LD_INT 105
10580: PPUSH
10581: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10585: LD_EXP 48
10589: PPUSH
10590: CALL_OW 302
10594: NOT
10595: PUSH
10596: LD_EXP 7
10600: OR
10601: IFFALSE 10605
// exit ;
10603: GO 10617
// Say ( usCommander , DUsm-3-assault ) ;
10605: LD_EXP 48
10609: PPUSH
10610: LD_STRING DUsm-3-assault
10612: PPUSH
10613: CALL_OW 88
// end ;
10617: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10618: LD_EXP 6
10622: NOT
10623: PUSH
10624: LD_EXP 7
10628: NOT
10629: AND
10630: PUSH
10631: LD_INT 5
10633: PPUSH
10634: LD_INT 22
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PPUSH
10644: CALL_OW 70
10648: AND
10649: PUSH
10650: LD_EXP 7
10654: NOT
10655: AND
10656: IFFALSE 10741
10658: GO 10660
10660: DISABLE
// begin if Mike then
10661: LD_EXP 33
10665: IFFALSE 10681
// Say ( Mike , DM-1-scout ) else
10667: LD_EXP 33
10671: PPUSH
10672: LD_STRING DM-1-scout
10674: PPUSH
10675: CALL_OW 88
10679: GO 10712
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10681: LD_EXP 45
10685: PPUSH
10686: LD_INT 26
10688: PUSH
10689: LD_INT 1
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 72
10700: PUSH
10701: LD_INT 1
10703: ARRAY
10704: PPUSH
10705: LD_STRING DArm-1-explore
10707: PPUSH
10708: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10712: LD_INT 54
10714: PPUSH
10715: LD_INT 35
10717: PPUSH
10718: LD_INT 2
10720: PPUSH
10721: LD_INT 1
10723: PPUSH
10724: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10728: LD_INT 54
10730: PPUSH
10731: LD_INT 35
10733: PPUSH
10734: LD_INT 2
10736: PPUSH
10737: CALL_OW 331
// end ;
10741: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10742: LD_INT 6
10744: PPUSH
10745: LD_INT 22
10747: PUSH
10748: LD_INT 2
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: PPUSH
10755: CALL_OW 70
10759: PUSH
10760: LD_EXP 7
10764: NOT
10765: AND
10766: IFFALSE 11020
10768: GO 10770
10770: DISABLE
10771: LD_INT 0
10773: PPUSH
10774: PPUSH
10775: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10776: LD_ADDR_VAR 0 1
10780: PUSH
10781: LD_EXP 45
10785: PPUSH
10786: LD_INT 26
10788: PUSH
10789: LD_INT 1
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 72
10800: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10801: LD_ADDR_VAR 0 2
10805: PUSH
10806: LD_EXP 45
10810: PPUSH
10811: LD_INT 26
10813: PUSH
10814: LD_INT 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 72
10825: ST_TO_ADDR
// DialogueOn ;
10826: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10830: LD_INT 36
10832: PPUSH
10833: LD_INT 22
10835: PPUSH
10836: LD_INT 2
10838: PPUSH
10839: LD_INT 8
10841: PPUSH
10842: CALL_OW 330
// dwait ( 0 0$1 ) ;
10846: LD_INT 35
10848: PPUSH
10849: CALL_OW 68
// speakerOk := false ;
10853: LD_ADDR_VAR 0 3
10857: PUSH
10858: LD_INT 0
10860: ST_TO_ADDR
// if Mike then
10861: LD_EXP 33
10865: IFFALSE 10887
// speakerOk := Say ( Mike , DM-1-spot ) else
10867: LD_ADDR_VAR 0 3
10871: PUSH
10872: LD_EXP 33
10876: PPUSH
10877: LD_STRING DM-1-spot
10879: PPUSH
10880: CALL_OW 88
10884: ST_TO_ADDR
10885: GO 10915
// if randomMen then
10887: LD_VAR 0 1
10891: IFFALSE 10915
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10893: LD_ADDR_VAR 0 3
10897: PUSH
10898: LD_VAR 0 1
10902: PUSH
10903: LD_INT 1
10905: ARRAY
10906: PPUSH
10907: LD_STRING DArm-1-spot-a
10909: PPUSH
10910: CALL_OW 88
10914: ST_TO_ADDR
// if speakerOk then
10915: LD_VAR 0 3
10919: IFFALSE 10963
// begin if Givi then
10921: LD_EXP 32
10925: IFFALSE 10941
// Say ( Givi , DG-1-spot ) else
10927: LD_EXP 32
10931: PPUSH
10932: LD_STRING DG-1-spot
10934: PPUSH
10935: CALL_OW 88
10939: GO 10963
// if randomWomen then
10941: LD_VAR 0 2
10945: IFFALSE 10963
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10947: LD_VAR 0 2
10951: PUSH
10952: LD_INT 1
10954: ARRAY
10955: PPUSH
10956: LD_STRING DArf-1-spot-a
10958: PPUSH
10959: CALL_OW 88
// end ; if Mike then
10963: LD_EXP 33
10967: IFFALSE 10983
// Say ( Heike , DH-1-spot ) else
10969: LD_EXP 31
10973: PPUSH
10974: LD_STRING DH-1-spot
10976: PPUSH
10977: CALL_OW 88
10981: GO 10995
// Say ( Heike , DH-1-spot-a ) ;
10983: LD_EXP 31
10987: PPUSH
10988: LD_STRING DH-1-spot-a
10990: PPUSH
10991: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10995: LD_INT 36
10997: PPUSH
10998: LD_INT 22
11000: PPUSH
11001: LD_INT 2
11003: PPUSH
11004: CALL_OW 331
// DialogueOff ;
11008: CALL_OW 7
// americanBaseSpoted := true ;
11012: LD_ADDR_EXP 6
11016: PUSH
11017: LD_INT 1
11019: ST_TO_ADDR
// end ;
11020: PPOPN 3
11022: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11023: LD_EXP 6
11027: NOT
11028: PUSH
11029: LD_INT 22
11031: PUSH
11032: LD_INT 2
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 101
11041: PUSH
11042: LD_INT 1
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: AND
11058: PUSH
11059: LD_EXP 7
11063: NOT
11064: AND
11065: IFFALSE 11151
11067: GO 11069
11069: DISABLE
11070: LD_INT 0
11072: PPUSH
// begin americanBaseSpoted := true ;
11073: LD_ADDR_EXP 6
11077: PUSH
11078: LD_INT 1
11080: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11081: LD_ADDR_VAR 0 1
11085: PUSH
11086: LD_EXP 45
11090: PPUSH
11091: LD_INT 26
11093: PUSH
11094: LD_INT 1
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PPUSH
11101: CALL_OW 72
11105: ST_TO_ADDR
// if not randomMen then
11106: LD_VAR 0 1
11110: NOT
11111: IFFALSE 11115
// exit ;
11113: GO 11151
// DialogueOn ;
11115: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11119: LD_VAR 0 1
11123: PUSH
11124: LD_INT 1
11126: ARRAY
11127: PPUSH
11128: LD_STRING DArm-1-spot-a
11130: PPUSH
11131: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11135: LD_EXP 31
11139: PPUSH
11140: LD_STRING DH-1-spot-a
11142: PPUSH
11143: CALL_OW 88
// DialogueOff ;
11147: CALL_OW 7
// end ;
11151: PPOPN 1
11153: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11154: LD_INT 11
11156: PPUSH
11157: CALL_OW 255
11161: PUSH
11162: LD_INT 2
11164: EQUAL
11165: PUSH
11166: LD_INT 7
11168: PPUSH
11169: LD_INT 22
11171: PUSH
11172: LD_INT 1
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 3
11181: PUSH
11182: LD_INT 50
11184: PUSH
11185: EMPTY
11186: LIST
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 30
11194: PUSH
11195: LD_INT 31
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: PPUSH
11207: CALL_OW 70
11211: OR
11212: PUSH
11213: LD_INT 7
11215: PPUSH
11216: LD_INT 22
11218: PUSH
11219: LD_INT 2
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PPUSH
11226: CALL_OW 70
11230: PUSH
11231: LD_INT 2
11233: GREATER
11234: OR
11235: PUSH
11236: LD_EXP 47
11240: PUSH
11241: LD_INT 4
11243: LESSEQUAL
11244: OR
11245: IFFALSE 11836
11247: GO 11249
11249: DISABLE
11250: LD_INT 0
11252: PPUSH
11253: PPUSH
// begin wait ( 0 0$3 ) ;
11254: LD_INT 105
11256: PPUSH
11257: CALL_OW 67
// americanStartRun := true ;
11261: LD_ADDR_EXP 15
11265: PUSH
11266: LD_INT 1
11268: ST_TO_ADDR
// if IsOk ( usCommander ) then
11269: LD_EXP 48
11273: PPUSH
11274: CALL_OW 302
11278: IFFALSE 11308
// begin usForces := usForces union usCommander ;
11280: LD_ADDR_EXP 47
11284: PUSH
11285: LD_EXP 47
11289: PUSH
11290: LD_EXP 48
11294: UNION
11295: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11296: LD_EXP 48
11300: PPUSH
11301: LD_STRING DUsm-1-assault
11303: PPUSH
11304: CALL_OW 88
// end ; for i in usForces do
11308: LD_ADDR_VAR 0 1
11312: PUSH
11313: LD_EXP 47
11317: PUSH
11318: FOR_IN
11319: IFFALSE 11365
// begin if IsInUnit ( i ) then
11321: LD_VAR 0 1
11325: PPUSH
11326: CALL_OW 310
11330: IFFALSE 11341
// ComExitBuilding ( i ) ;
11332: LD_VAR 0 1
11336: PPUSH
11337: CALL_OW 122
// wait ( 3 ) ;
11341: LD_INT 3
11343: PPUSH
11344: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11348: LD_VAR 0 1
11352: PPUSH
11353: LD_INT 34
11355: PPUSH
11356: LD_INT 67
11358: PPUSH
11359: CALL_OW 111
// end ;
11363: GO 11318
11365: POP
11366: POP
// Say ( Heike , DH-1-assault ) ;
11367: LD_EXP 31
11371: PPUSH
11372: LD_STRING DH-1-assault
11374: PPUSH
11375: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11379: LD_INT 35
11381: PPUSH
11382: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11386: LD_VAR 0 1
11390: PPUSH
11391: LD_INT 34
11393: PPUSH
11394: LD_INT 67
11396: PPUSH
11397: CALL_OW 111
// until not usForces ;
11401: LD_EXP 47
11405: NOT
11406: IFFALSE 11379
// music_nat := 2 ;
11408: LD_ADDR_OWVAR 71
11412: PUSH
11413: LD_INT 2
11415: ST_TO_ADDR
// music_class := music_victory ;
11416: LD_ADDR_OWVAR 72
11420: PUSH
11421: LD_INT 4
11423: ST_TO_ADDR
// if not americanHasEscaped then
11424: LD_EXP 9
11428: NOT
11429: IFFALSE 11450
// begin Say ( Heike , DH-2-assault ) ;
11431: LD_EXP 31
11435: PPUSH
11436: LD_STRING DH-2-assault
11438: PPUSH
11439: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11443: LD_STRING ACH_CLEAN
11445: PPUSH
11446: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11450: LD_INT 70
11452: PPUSH
11453: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11457: LD_INT 35
11459: PPUSH
11460: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11464: LD_INT 22
11466: PUSH
11467: LD_INT 2
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 21
11476: PUSH
11477: LD_INT 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 3
11486: PUSH
11487: LD_INT 50
11489: PUSH
11490: EMPTY
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 69
11506: NOT
11507: IFFALSE 11457
// InGameOn ;
11509: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11513: LD_INT 11
11515: PPUSH
11516: CALL_OW 255
11520: PUSH
11521: LD_INT 2
11523: EQUAL
11524: NOT
11525: IFFALSE 11537
// SetSide ( usDepot , 2 ) ;
11527: LD_INT 11
11529: PPUSH
11530: LD_INT 2
11532: PPUSH
11533: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11537: LD_INT 35
11539: PPUSH
11540: LD_INT 22
11542: PPUSH
11543: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11547: LD_EXP 31
11551: PPUSH
11552: LD_INT 35
11554: PPUSH
11555: LD_INT 22
11557: PPUSH
11558: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11562: LD_EXP 31
11566: PPUSH
11567: LD_INT 38
11569: PPUSH
11570: LD_INT 25
11572: PPUSH
11573: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11577: LD_EXP 35
11581: PUSH
11582: LD_EXP 44
11586: UNION
11587: PUSH
11588: LD_EXP 45
11592: UNION
11593: PPUSH
11594: LD_INT 39
11596: PPUSH
11597: LD_INT 26
11599: PPUSH
11600: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11604: LD_EXP 35
11608: PUSH
11609: LD_EXP 44
11613: UNION
11614: PUSH
11615: LD_EXP 45
11619: UNION
11620: PPUSH
11621: LD_EXP 31
11625: PPUSH
11626: CALL_OW 179
// p := 0 ;
11630: LD_ADDR_VAR 0 2
11634: PUSH
11635: LD_INT 0
11637: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11638: LD_INT 35
11640: PPUSH
11641: CALL_OW 67
// p := p + 1 ;
11645: LD_ADDR_VAR 0 2
11649: PUSH
11650: LD_VAR 0 2
11654: PUSH
11655: LD_INT 1
11657: PLUS
11658: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11659: LD_EXP 31
11663: PPUSH
11664: CALL_OW 314
11668: NOT
11669: PUSH
11670: LD_VAR 0 2
11674: PUSH
11675: LD_INT 10
11677: GREATER
11678: OR
11679: IFFALSE 11638
// Say ( Heike , DH-1-capture ) ;
11681: LD_EXP 31
11685: PPUSH
11686: LD_STRING DH-1-capture
11688: PPUSH
11689: CALL_OW 88
// if Markov then
11693: LD_EXP 38
11697: IFFALSE 11711
// Say ( Markov , DMar-1-capture ) ;
11699: LD_EXP 38
11703: PPUSH
11704: LD_STRING DMar-1-capture
11706: PPUSH
11707: CALL_OW 88
// if Sophia then
11711: LD_EXP 37
11715: IFFALSE 11741
// begin Say ( Heike , DH-2-capture ) ;
11717: LD_EXP 31
11721: PPUSH
11722: LD_STRING DH-2-capture
11724: PPUSH
11725: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11729: LD_EXP 37
11733: PPUSH
11734: LD_STRING DS-1-capture
11736: PPUSH
11737: CALL_OW 88
// end ; InGameOff ;
11741: CALL_OW 9
// music_nat := music_auto ;
11745: LD_ADDR_OWVAR 71
11749: PUSH
11750: LD_INT 0
11752: ST_TO_ADDR
// music_class := music_auto ;
11753: LD_ADDR_OWVAR 72
11757: PUSH
11758: LD_INT 0
11760: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11761: LD_STRING ConstructBase
11763: PPUSH
11764: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11768: LD_ADDR_VAR 0 1
11772: PUSH
11773: LD_INT 22
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 21
11785: PUSH
11786: LD_INT 3
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PPUSH
11797: CALL_OW 69
11801: PUSH
11802: FOR_IN
11803: IFFALSE 11819
// SetSide ( i , 2 ) ;
11805: LD_VAR 0 1
11809: PPUSH
11810: LD_INT 2
11812: PPUSH
11813: CALL_OW 235
11817: GO 11802
11819: POP
11820: POP
// wait ( 0 0$3 ) ;
11821: LD_INT 105
11823: PPUSH
11824: CALL_OW 67
// americanBaseCaptured := true ;
11828: LD_ADDR_EXP 7
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// end ;
11836: PPOPN 2
11838: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11839: LD_EXP 14
11843: PUSH
11844: LD_INT 3
11846: GREATEREQUAL
11847: IFFALSE 11859
11849: GO 11851
11851: DISABLE
// SetAchievement ( ACH_ENG ) ;
11852: LD_STRING ACH_ENG
11854: PPUSH
11855: CALL_OW 543
11859: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11860: LD_INT 22
11862: PUSH
11863: LD_INT 2
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: LD_INT 25
11872: PUSH
11873: LD_INT 15
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PPUSH
11884: CALL_OW 69
11888: PUSH
11889: LD_INT 4
11891: GREATEREQUAL
11892: IFFALSE 11904
11894: GO 11896
11896: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11897: LD_STRING ACH_APEGEN
11899: PPUSH
11900: CALL_OW 543
11904: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11905: LD_INT 22
11907: PUSH
11908: LD_INT 2
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 30
11917: PUSH
11918: LD_INT 2
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 3
11927: PUSH
11928: LD_INT 57
11930: PUSH
11931: EMPTY
11932: LIST
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 69
11947: IFFALSE 12212
11949: GO 11951
11951: DISABLE
// begin workshopBuilded := true ;
11952: LD_ADDR_EXP 11
11956: PUSH
11957: LD_INT 1
11959: ST_TO_ADDR
// if IsOk ( Markov ) then
11960: LD_EXP 38
11964: PPUSH
11965: CALL_OW 302
11969: IFFALSE 12028
// begin Say ( Heike , DH-1-shop-a ) ;
11971: LD_EXP 31
11975: PPUSH
11976: LD_STRING DH-1-shop-a
11978: PPUSH
11979: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11983: LD_INT 47
11985: PPUSH
11986: LD_INT 2
11988: PPUSH
11989: CALL_OW 321
11993: PUSH
11994: LD_INT 2
11996: EQUAL
11997: PUSH
11998: LD_INT 45
12000: PPUSH
12001: LD_INT 2
12003: PPUSH
12004: CALL_OW 321
12008: PUSH
12009: LD_INT 2
12011: EQUAL
12012: AND
12013: NOT
12014: IFFALSE 12028
// Say ( Markov , DMar-1-shop-a ) ;
12016: LD_EXP 38
12020: PPUSH
12021: LD_STRING DMar-1-shop-a
12023: PPUSH
12024: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12028: LD_INT 35
12030: PPUSH
12031: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12035: LD_INT 47
12037: PPUSH
12038: LD_INT 2
12040: PPUSH
12041: CALL_OW 321
12045: PUSH
12046: LD_INT 2
12048: EQUAL
12049: PUSH
12050: LD_INT 45
12052: PPUSH
12053: LD_INT 2
12055: PPUSH
12056: CALL_OW 321
12060: PUSH
12061: LD_INT 2
12063: EQUAL
12064: OR
12065: IFFALSE 12028
// if IsOk ( Markov ) and IsOk ( Heike ) then
12067: LD_EXP 38
12071: PPUSH
12072: CALL_OW 302
12076: PUSH
12077: LD_EXP 31
12081: PPUSH
12082: CALL_OW 302
12086: AND
12087: IFFALSE 12205
// begin DialogueOn ;
12089: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12093: LD_EXP 38
12097: PPUSH
12098: LD_STRING DMar-1-shop
12100: PPUSH
12101: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12105: LD_EXP 31
12109: PPUSH
12110: LD_STRING DH-1-shop
12112: PPUSH
12113: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12117: LD_EXP 38
12121: PPUSH
12122: LD_STRING DMar-2-shop
12124: PPUSH
12125: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12129: LD_EXP 38
12133: PPUSH
12134: LD_STRING DMar-3-shop
12136: PPUSH
12137: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12141: LD_EXP 31
12145: PPUSH
12146: LD_STRING DH-2-shop
12148: PPUSH
12149: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12153: LD_EXP 38
12157: PPUSH
12158: LD_STRING DMar-4-shop
12160: PPUSH
12161: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12165: LD_EXP 31
12169: PPUSH
12170: LD_STRING DH-3-shop
12172: PPUSH
12173: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12177: LD_EXP 38
12181: PPUSH
12182: LD_STRING DMar-5-shop
12184: PPUSH
12185: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12189: LD_EXP 31
12193: PPUSH
12194: LD_STRING DH-4-shop
12196: PPUSH
12197: CALL_OW 88
// DialogueOff ;
12201: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12205: LD_STRING ConstructVeh
12207: PPUSH
12208: CALL_OW 337
// end ;
12212: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12213: LD_INT 2
12215: PPUSH
12216: LD_INT 2
12218: PPUSH
12219: LD_INT 1
12221: PPUSH
12222: CALL 40672 0 3
12226: PUSH
12227: LD_INT 0
12229: EQUAL
12230: IFFALSE 12242
12232: GO 12234
12234: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12235: LD_STRING Techs
12237: PPUSH
12238: CALL_OW 337
12242: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12243: LD_EXP 38
12247: PPUSH
12248: CALL_OW 302
12252: PUSH
12253: LD_INT 22
12255: PUSH
12256: LD_INT 2
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 2
12265: PUSH
12266: LD_INT 34
12268: PUSH
12269: LD_INT 22
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 35
12278: PUSH
12279: LD_INT 22
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 69
12299: AND
12300: IFFALSE 12407
12302: GO 12304
12304: DISABLE
// begin DialogueOn ;
12305: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12309: LD_INT 22
12311: PUSH
12312: LD_INT 2
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 2
12321: PUSH
12322: LD_INT 34
12324: PUSH
12325: LD_INT 22
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 35
12334: PUSH
12335: LD_INT 22
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 69
12355: PPUSH
12356: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12360: LD_INT 10
12362: PPUSH
12363: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12367: LD_EXP 31
12371: PPUSH
12372: LD_STRING DH-1-bal
12374: PPUSH
12375: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12379: LD_EXP 38
12383: PPUSH
12384: LD_STRING DMar-1-bal
12386: PPUSH
12387: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12391: LD_EXP 31
12395: PPUSH
12396: LD_STRING DH-2-bal
12398: PPUSH
12399: CALL_OW 88
// DialogueOff ;
12403: CALL_OW 7
// end ;
12407: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12408: LD_EXP 35
12412: PPUSH
12413: CALL_OW 302
12417: PUSH
12418: LD_INT 22
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 30
12430: PUSH
12431: LD_INT 6
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PPUSH
12442: CALL_OW 69
12446: AND
12447: IFFALSE 12508
12449: GO 12451
12451: DISABLE
// begin DialogueOn ;
12452: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12456: LD_EXP 35
12460: PPUSH
12461: LD_STRING DA-1-lab
12463: PPUSH
12464: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12468: LD_EXP 31
12472: PPUSH
12473: LD_STRING DH-1-lab
12475: PPUSH
12476: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12480: LD_EXP 35
12484: PPUSH
12485: LD_STRING DA-2-lab
12487: PPUSH
12488: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12492: LD_EXP 31
12496: PPUSH
12497: LD_STRING DH-2-lab
12499: PPUSH
12500: CALL_OW 88
// DialogueOff ;
12504: CALL_OW 7
// end ;
12508: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12509: LD_EXP 36
12513: PPUSH
12514: CALL_OW 302
12518: PUSH
12519: LD_INT 22
12521: PUSH
12522: LD_INT 2
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 25
12531: PUSH
12532: LD_INT 15
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PPUSH
12543: CALL_OW 69
12547: AND
12548: PUSH
12549: LD_INT 81
12551: PUSH
12552: LD_INT 2
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PPUSH
12559: CALL_OW 69
12563: NOT
12564: AND
12565: IFFALSE 12754
12567: GO 12569
12569: DISABLE
12570: LD_INT 0
12572: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12573: LD_ADDR_VAR 0 1
12577: PUSH
12578: LD_INT 22
12580: PUSH
12581: LD_INT 2
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 25
12590: PUSH
12591: LD_INT 15
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PPUSH
12602: CALL_OW 69
12606: ST_TO_ADDR
// InGameOn ;
12607: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12611: LD_VAR 0 1
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: PPUSH
12620: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12624: LD_VAR 0 1
12628: PUSH
12629: LD_INT 1
12631: ARRAY
12632: PPUSH
12633: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12637: LD_EXP 36
12641: PPUSH
12642: LD_STRING DK-1-apesol
12644: PPUSH
12645: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12649: LD_VAR 0 1
12653: PUSH
12654: LD_INT 1
12656: ARRAY
12657: PPUSH
12658: LD_INT 35
12660: PPUSH
12661: LD_INT 28
12663: PPUSH
12664: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12668: LD_VAR 0 1
12672: PUSH
12673: LD_INT 1
12675: ARRAY
12676: PPUSH
12677: LD_INT 36
12679: PPUSH
12680: LD_INT 17
12682: PPUSH
12683: CALL_OW 171
// wait ( 0 0$2 ) ;
12687: LD_INT 70
12689: PPUSH
12690: CALL_OW 67
// DialogueOn ;
12694: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12698: LD_EXP 35
12702: PPUSH
12703: LD_STRING DA-1-apesol
12705: PPUSH
12706: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12710: LD_EXP 36
12714: PPUSH
12715: LD_STRING DK-2-apesol
12717: PPUSH
12718: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12722: LD_EXP 35
12726: PPUSH
12727: LD_STRING DA-2-apesol
12729: PPUSH
12730: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12734: LD_EXP 36
12738: PPUSH
12739: LD_STRING DK-3-apesol
12741: PPUSH
12742: CALL_OW 88
// DialogueOff ;
12746: CALL_OW 7
// InGameOff ;
12750: CALL_OW 9
// end ;
12754: PPOPN 1
12756: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12757: LD_EXP 37
12761: PPUSH
12762: CALL_OW 302
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_INT 2
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 25
12779: PUSH
12780: LD_INT 16
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 69
12795: AND
12796: PUSH
12797: LD_INT 81
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PPUSH
12807: CALL_OW 69
12811: NOT
12812: AND
12813: IFFALSE 13127
12815: GO 12817
12817: DISABLE
12818: LD_INT 0
12820: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12821: LD_ADDR_VAR 0 1
12825: PUSH
12826: LD_INT 22
12828: PUSH
12829: LD_INT 2
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 25
12838: PUSH
12839: LD_INT 16
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 69
12854: ST_TO_ADDR
// blockAttack := true ;
12855: LD_ADDR_EXP 29
12859: PUSH
12860: LD_INT 1
12862: ST_TO_ADDR
// InGameOn ;
12863: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12867: LD_INT 35
12869: PPUSH
12870: LD_INT 22
12872: PPUSH
12873: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12877: LD_INT 5
12879: PPUSH
12880: LD_INT 35
12882: PPUSH
12883: LD_INT 22
12885: PPUSH
12886: LD_INT 1
12888: PPUSH
12889: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12893: LD_EXP 37
12897: PPUSH
12898: LD_VAR 0 1
12902: PUSH
12903: LD_INT 1
12905: ARRAY
12906: PPUSH
12907: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12911: LD_VAR 0 1
12915: PUSH
12916: LD_INT 1
12918: ARRAY
12919: PPUSH
12920: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12924: LD_VAR 0 1
12928: PUSH
12929: LD_INT 1
12931: ARRAY
12932: PPUSH
12933: CALL_OW 122
// wait ( 0 0$2 ) ;
12937: LD_INT 70
12939: PPUSH
12940: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12944: LD_EXP 37
12948: PPUSH
12949: LD_STRING DS-1-apeeng
12951: PPUSH
12952: CALL_OW 88
// if IsOk ( Kamil ) then
12956: LD_EXP 34
12960: PPUSH
12961: CALL_OW 302
12965: IFFALSE 13115
// begin Say ( Kamil , DKam-1-apeeng ) ;
12967: LD_EXP 34
12971: PPUSH
12972: LD_STRING DKam-1-apeeng
12974: PPUSH
12975: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12979: LD_EXP 37
12983: PPUSH
12984: LD_STRING DS-2-apeeng
12986: PPUSH
12987: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12991: LD_EXP 34
12995: PPUSH
12996: LD_STRING DKam-2-apeeng
12998: PPUSH
12999: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
13003: LD_EXP 37
13007: PPUSH
13008: LD_STRING DS-3-apeeng
13010: PPUSH
13011: CALL_OW 88
// if not IsOK ( Kaia ) then
13015: LD_EXP 36
13019: PPUSH
13020: CALL_OW 302
13024: NOT
13025: IFFALSE 13041
// begin InGameOff ;
13027: CALL_OW 9
// blockAttack := false ;
13031: LD_ADDR_EXP 29
13035: PUSH
13036: LD_INT 0
13038: ST_TO_ADDR
// exit ;
13039: GO 13127
// end ; Say ( Kaia , DK-1-apeeng ) ;
13041: LD_EXP 36
13045: PPUSH
13046: LD_STRING DK-1-apeeng
13048: PPUSH
13049: CALL_OW 88
// if not IsOk ( Givi ) then
13053: LD_EXP 32
13057: PPUSH
13058: CALL_OW 302
13062: NOT
13063: IFFALSE 13079
// begin InGameOff ;
13065: CALL_OW 9
// blockAttack := false ;
13069: LD_ADDR_EXP 29
13073: PUSH
13074: LD_INT 0
13076: ST_TO_ADDR
// exit ;
13077: GO 13127
// end ; Say ( Givi , DG-1-apeeng ) ;
13079: LD_EXP 32
13083: PPUSH
13084: LD_STRING DG-1-apeeng
13086: PPUSH
13087: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13091: LD_EXP 36
13095: PPUSH
13096: LD_STRING DK-2-apeeng
13098: PPUSH
13099: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13103: LD_EXP 36
13107: PPUSH
13108: LD_STRING DK-3-apeeng
13110: PPUSH
13111: CALL_OW 88
// end ; InGameOff ;
13115: CALL_OW 9
// blockAttack := false ;
13119: LD_ADDR_EXP 29
13123: PUSH
13124: LD_INT 0
13126: ST_TO_ADDR
// end ;
13127: PPOPN 1
13129: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13130: LD_EXP 4
13134: PUSH
13135: LD_INT 22
13137: PUSH
13138: LD_INT 2
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: LD_INT 30
13147: PUSH
13148: LD_INT 0
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PPUSH
13159: CALL_OW 69
13163: AND
13164: IFFALSE 13345
13166: GO 13168
13168: DISABLE
// begin blockAttack := true ;
13169: LD_ADDR_EXP 29
13173: PUSH
13174: LD_INT 1
13176: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13177: LD_INT 350
13179: PPUSH
13180: CALL_OW 67
// DialogueOn ;
13184: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13188: LD_EXP 39
13192: PPUSH
13193: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13197: LD_EXP 39
13201: PPUSH
13202: LD_STRING DF-1-distribution
13204: PPUSH
13205: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13209: LD_EXP 31
13213: PPUSH
13214: LD_STRING DH-2-distribution
13216: PPUSH
13217: CALL_OW 88
// if IsOk ( Kaia ) then
13221: LD_EXP 36
13225: PPUSH
13226: CALL_OW 302
13230: IFFALSE 13291
// begin Say ( Kaia , DK-1-distribution ) ;
13232: LD_EXP 36
13236: PPUSH
13237: LD_STRING DK-1-distribution
13239: PPUSH
13240: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13244: LD_EXP 31
13248: PPUSH
13249: LD_STRING DH-1-distribution
13251: PPUSH
13252: CALL_OW 88
// if IsOk ( Givi ) then
13256: LD_EXP 32
13260: PPUSH
13261: CALL_OW 302
13265: IFFALSE 13291
// begin Say ( Givi , DG-1-distribution ) ;
13267: LD_EXP 32
13271: PPUSH
13272: LD_STRING DG-1-distribution
13274: PPUSH
13275: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13279: LD_EXP 31
13283: PPUSH
13284: LD_STRING DH-3-distribution
13286: PPUSH
13287: CALL_OW 88
// end ; end ; DialogueOff ;
13291: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13295: LD_STRING Crates1
13297: PPUSH
13298: CALL_OW 337
// farmerRequestedCrates := 300 ;
13302: LD_ADDR_EXP 17
13306: PUSH
13307: LD_INT 300
13309: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13310: LD_STRING FarmerCrates
13312: PPUSH
13313: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13317: LD_INT 10
13319: PPUSH
13320: LD_INT 1
13322: PPUSH
13323: CALL_OW 424
// blockAttack := false ;
13327: LD_ADDR_EXP 29
13331: PUSH
13332: LD_INT 0
13334: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13335: LD_INT 108
13337: PPUSH
13338: LD_INT 61
13340: PPUSH
13341: CALL_OW 86
// end ;
13345: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13346: LD_EXP 7
13350: PUSH
13351: LD_INT 22
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 3
13363: PUSH
13364: LD_INT 57
13366: PUSH
13367: EMPTY
13368: LIST
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: LD_INT 30
13379: PUSH
13380: LD_INT 6
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 30
13389: PUSH
13390: LD_INT 7
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: PPUSH
13407: CALL_OW 69
13411: AND
13412: PUSH
13413: LD_INT 22
13415: PUSH
13416: LD_INT 2
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 3
13425: PUSH
13426: LD_INT 57
13428: PUSH
13429: EMPTY
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PUSH
13436: LD_INT 30
13438: PUSH
13439: LD_INT 4
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: AND
13456: IFFALSE 13620
13458: GO 13460
13460: DISABLE
13461: LD_INT 0
13463: PPUSH
// begin wait ( 0 0$10 ) ;
13464: LD_INT 350
13466: PPUSH
13467: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13471: LD_ADDR_VAR 0 1
13475: PUSH
13476: LD_EXP 45
13480: PPUSH
13481: LD_INT 26
13483: PUSH
13484: LD_INT 1
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 25
13493: PUSH
13494: LD_INT 2
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 72
13509: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13510: LD_EXP 31
13514: PPUSH
13515: LD_STRING DH-1-task
13517: PPUSH
13518: CALL_OW 88
// if IsOk ( Sophia ) then
13522: LD_EXP 37
13526: PPUSH
13527: CALL_OW 302
13531: IFFALSE 13571
// begin Say ( Sophia , DS-1-task ) ;
13533: LD_EXP 37
13537: PPUSH
13538: LD_STRING DS-1-task
13540: PPUSH
13541: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13545: LD_EXP 37
13549: PPUSH
13550: LD_STRING DS-2-task
13552: PPUSH
13553: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13557: LD_EXP 31
13561: PPUSH
13562: LD_STRING DH-2-task
13564: PPUSH
13565: CALL_OW 88
// end else
13569: GO 13605
// if eng then
13571: LD_VAR 0 1
13575: IFFALSE 13605
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13577: LD_VAR 0 1
13581: PUSH
13582: LD_INT 1
13584: ARRAY
13585: PPUSH
13586: LD_STRING DArm-1-task
13588: PPUSH
13589: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13593: LD_EXP 31
13597: PPUSH
13598: LD_STRING DH-2-task
13600: PPUSH
13601: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13605: LD_STRING BaseConstructed
13607: PPUSH
13608: CALL_OW 337
// allowConvoys := true ;
13612: LD_ADDR_EXP 13
13616: PUSH
13617: LD_INT 1
13619: ST_TO_ADDR
// end ;
13620: PPOPN 1
13622: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13623: LD_INT 22
13625: PUSH
13626: LD_INT 4
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 34
13635: PUSH
13636: LD_INT 12
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PPUSH
13647: CALL_OW 69
13651: IFFALSE 13819
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
13659: PPUSH
13660: PPUSH
// begin wait ( 0 0$2 ) ;
13661: LD_INT 70
13663: PPUSH
13664: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13668: LD_ADDR_VAR 0 1
13672: PUSH
13673: LD_INT 22
13675: PUSH
13676: LD_INT 4
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 34
13685: PUSH
13686: LD_INT 12
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PPUSH
13697: CALL_OW 69
13701: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13702: LD_ADDR_VAR 0 2
13706: PUSH
13707: LD_VAR 0 1
13711: PUSH
13712: LD_INT 1
13714: ARRAY
13715: PPUSH
13716: CALL_OW 250
13720: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13721: LD_ADDR_VAR 0 3
13725: PUSH
13726: LD_VAR 0 1
13730: PUSH
13731: LD_INT 1
13733: ARRAY
13734: PPUSH
13735: CALL_OW 251
13739: ST_TO_ADDR
// DialogueOn ;
13740: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13744: LD_VAR 0 2
13748: PPUSH
13749: LD_VAR 0 3
13753: PPUSH
13754: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13758: LD_VAR 0 2
13762: PPUSH
13763: LD_VAR 0 3
13767: PPUSH
13768: LD_INT 2
13770: PPUSH
13771: LD_INT 6
13773: NEG
13774: PPUSH
13775: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13779: LD_INT 10
13781: PPUSH
13782: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13786: LD_EXP 31
13790: PPUSH
13791: LD_STRING DH-1-seecargo
13793: PPUSH
13794: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13798: LD_VAR 0 2
13802: PPUSH
13803: LD_VAR 0 3
13807: PPUSH
13808: LD_INT 2
13810: PPUSH
13811: CALL_OW 331
// DialogueOff ;
13815: CALL_OW 7
// end ;
13819: PPOPN 3
13821: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13822: LD_EXP 4
13826: PUSH
13827: LD_EXP 16
13831: PUSH
13832: LD_INT 300
13834: GREATEREQUAL
13835: AND
13836: IFFALSE 13908
13838: GO 13840
13840: DISABLE
// begin DialogueOn ;
13841: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13845: LD_EXP 39
13849: PPUSH
13850: LD_STRING DF-1-delivery-2
13852: PPUSH
13853: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13857: LD_EXP 31
13861: PPUSH
13862: LD_STRING DH-1-delivery-2
13864: PPUSH
13865: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13869: LD_EXP 39
13873: PPUSH
13874: LD_STRING DF-2-delivery-2
13876: PPUSH
13877: CALL_OW 94
// DialogueOff ;
13881: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13885: LD_STRING Crates2
13887: PPUSH
13888: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13892: LD_ADDR_EXP 18
13896: PUSH
13897: LD_INT 63000
13899: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13900: LD_ADDR_EXP 17
13904: PUSH
13905: LD_INT 600
13907: ST_TO_ADDR
// end ;
13908: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13909: LD_EXP 4
13913: PUSH
13914: LD_EXP 16
13918: PUSH
13919: LD_INT 600
13921: GREATEREQUAL
13922: AND
13923: PUSH
13924: LD_OWVAR 67
13928: PUSH
13929: LD_INT 1
13931: GREATER
13932: AND
13933: IFFALSE 14133
13935: GO 13937
13937: DISABLE
// begin DialogueOn ;
13938: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13942: LD_EXP 39
13946: PPUSH
13947: LD_STRING DF-1-delivery-3
13949: PPUSH
13950: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13954: LD_EXP 31
13958: PPUSH
13959: LD_STRING DH-1-delivery-3
13961: PPUSH
13962: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13966: LD_EXP 39
13970: PPUSH
13971: LD_STRING DF-2-delivery-3
13973: PPUSH
13974: CALL_OW 94
// if IsOk ( Kaia ) then
13978: LD_EXP 36
13982: PPUSH
13983: CALL_OW 302
13987: IFFALSE 14037
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13989: LD_EXP 36
13993: PPUSH
13994: LD_STRING DK-1-delivery-3
13996: PPUSH
13997: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
14001: LD_EXP 31
14005: PPUSH
14006: LD_STRING DH-2-delivery-3
14008: PPUSH
14009: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14013: LD_EXP 32
14017: PPUSH
14018: LD_STRING DG-1-delivery-3
14020: PPUSH
14021: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14025: LD_EXP 33
14029: PPUSH
14030: LD_STRING DM-1-delivery-3
14032: PPUSH
14033: CALL_OW 88
// end ; DialogueOff ;
14037: CALL_OW 7
// case Difficulty of 2 :
14041: LD_OWVAR 67
14045: PUSH
14046: LD_INT 2
14048: DOUBLE
14049: EQUAL
14050: IFTRUE 14054
14052: GO 14072
14054: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14055: LD_STRING Crates3
14057: PPUSH
14058: CALL_OW 337
// farmerRequestedCrates := 900 ;
14062: LD_ADDR_EXP 17
14066: PUSH
14067: LD_INT 900
14069: ST_TO_ADDR
// end ; 3 :
14070: GO 14125
14072: LD_INT 3
14074: DOUBLE
14075: EQUAL
14076: IFTRUE 14080
14078: GO 14098
14080: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14081: LD_STRING Crates4
14083: PPUSH
14084: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14088: LD_ADDR_EXP 17
14092: PUSH
14093: LD_INT 1200
14095: ST_TO_ADDR
// end ; 4 :
14096: GO 14125
14098: LD_INT 4
14100: DOUBLE
14101: EQUAL
14102: IFTRUE 14106
14104: GO 14124
14106: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14107: LD_STRING Crates5
14109: PPUSH
14110: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14114: LD_ADDR_EXP 17
14118: PUSH
14119: LD_INT 1400
14121: ST_TO_ADDR
// end ; end ;
14122: GO 14125
14124: POP
// farmerCratesCounter := 30 30$00 ;
14125: LD_ADDR_EXP 18
14129: PUSH
14130: LD_INT 63000
14132: ST_TO_ADDR
// end ;
14133: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14134: LD_EXP 4
14138: PUSH
14139: LD_EXP 16
14143: PUSH
14144: LD_INT 600
14146: PUSH
14147: LD_INT 900
14149: PUSH
14150: LD_INT 1200
14152: PUSH
14153: LD_INT 1400
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: PUSH
14162: LD_OWVAR 67
14166: ARRAY
14167: GREATEREQUAL
14168: AND
14169: IFFALSE 14255
14171: GO 14173
14173: DISABLE
// begin retreatAllowed := true ;
14174: LD_ADDR_EXP 12
14178: PUSH
14179: LD_INT 1
14181: ST_TO_ADDR
// display_strings := [ ] ;
14182: LD_ADDR_OWVAR 47
14186: PUSH
14187: EMPTY
14188: ST_TO_ADDR
// DialogueOn ;
14189: CALL_OW 6
// InGameOn ;
14193: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14197: LD_EXP 40
14201: PPUSH
14202: LD_STRING DO-radio-end
14204: PPUSH
14205: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14209: LD_EXP 31
14213: PPUSH
14214: LD_STRING DH-1-radio-end
14216: PPUSH
14217: CALL_OW 88
// InGameOff ;
14221: CALL_OW 9
// DialogueOff ;
14225: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14229: LD_STRING Retreat
14231: PPUSH
14232: CALL_OW 337
// wait ( 0 0$2 ) ;
14236: LD_INT 70
14238: PPUSH
14239: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14243: LD_EXP 31
14247: PPUSH
14248: LD_STRING DH-2-radio-end
14250: PPUSH
14251: CALL_OW 88
// end ;
14255: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14256: LD_EXP 12
14260: IFFALSE 14391
14262: GO 14264
14264: DISABLE
14265: LD_INT 0
14267: PPUSH
14268: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14269: LD_INT 10
14271: PPUSH
14272: LD_INT 0
14274: PPUSH
14275: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14279: LD_ADDR_VAR 0 1
14283: PUSH
14284: LD_EXP 42
14288: PPUSH
14289: LD_INT 25
14291: PUSH
14292: LD_INT 2
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PPUSH
14299: CALL_OW 72
14303: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14304: LD_VAR 0 1
14308: PUSH
14309: LD_INT 102
14311: PPUSH
14312: LD_INT 69
14314: PPUSH
14315: CALL_OW 428
14319: PUSH
14320: LD_INT 0
14322: EQUAL
14323: AND
14324: IFFALSE 14391
// begin for i in tmp do
14326: LD_ADDR_VAR 0 2
14330: PUSH
14331: LD_VAR 0 1
14335: PUSH
14336: FOR_IN
14337: IFFALSE 14361
// if IsInUnit ( i ) then
14339: LD_VAR 0 2
14343: PPUSH
14344: CALL_OW 310
14348: IFFALSE 14359
// ComExitBuilding ( i ) ;
14350: LD_VAR 0 2
14354: PPUSH
14355: CALL_OW 122
14359: GO 14336
14361: POP
14362: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14363: LD_VAR 0 1
14367: PPUSH
14368: LD_INT 31
14370: PPUSH
14371: LD_INT 102
14373: PPUSH
14374: LD_INT 69
14376: PPUSH
14377: LD_INT 2
14379: PPUSH
14380: CALL_OW 205
// wait ( 0 0$3 ) ;
14384: LD_INT 105
14386: PPUSH
14387: CALL_OW 67
// end ; end ;
14391: PPOPN 2
14393: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14394: LD_EXP 12
14398: NOT
14399: PUSH
14400: LD_INT 5
14402: PPUSH
14403: CALL_OW 301
14407: AND
14408: IFFALSE 14440
14410: GO 14412
14412: DISABLE
// begin DialogueOn ;
14413: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14417: LD_EXP 39
14421: PPUSH
14422: LD_STRING DF-1-failure
14424: PPUSH
14425: CALL_OW 94
// DialogueOff ;
14429: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14433: LD_STRING FarmerDepot
14435: PPUSH
14436: CALL_OW 104
// end ;
14440: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14441: LD_EXP 12
14445: PUSH
14446: LD_EXP 31
14450: PPUSH
14451: LD_EXP 39
14455: PPUSH
14456: CALL_OW 296
14460: PUSH
14461: LD_INT 12
14463: LESS
14464: AND
14465: PUSH
14466: LD_INT 81
14468: PUSH
14469: LD_INT 2
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: LD_INT 21
14478: PUSH
14479: LD_INT 1
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PPUSH
14490: CALL_OW 69
14494: NOT
14495: AND
14496: IFFALSE 15180
14498: GO 14500
14500: DISABLE
14501: LD_INT 0
14503: PPUSH
14504: PPUSH
14505: PPUSH
// begin allowConvoys := false ;
14506: LD_ADDR_EXP 13
14510: PUSH
14511: LD_INT 0
14513: ST_TO_ADDR
// InGameOn ;
14514: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14518: LD_EXP 31
14522: PPUSH
14523: LD_EXP 39
14527: PPUSH
14528: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14532: LD_EXP 39
14536: PPUSH
14537: LD_EXP 31
14541: PPUSH
14542: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14546: LD_EXP 39
14550: PPUSH
14551: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14555: LD_EXP 31
14559: PPUSH
14560: LD_STRING DH-1-end
14562: PPUSH
14563: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14567: LD_EXP 39
14571: PPUSH
14572: LD_STRING DF-1-end
14574: PPUSH
14575: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14579: LD_EXP 39
14583: PPUSH
14584: LD_STRING DF-2-end
14586: PPUSH
14587: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14591: LD_EXP 31
14595: PPUSH
14596: LD_STRING DH-2-end
14598: PPUSH
14599: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14603: LD_EXP 39
14607: PPUSH
14608: LD_STRING DF-3-end
14610: PPUSH
14611: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14615: LD_EXP 31
14619: PPUSH
14620: LD_STRING DH-3-end
14622: PPUSH
14623: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14627: LD_EXP 32
14631: PPUSH
14632: LD_STRING DG-1-end
14634: PPUSH
14635: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14639: LD_EXP 31
14643: PPUSH
14644: LD_STRING DH-4-end
14646: PPUSH
14647: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14651: LD_EXP 39
14655: PPUSH
14656: LD_STRING DF-4-end
14658: PPUSH
14659: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14663: LD_EXP 31
14667: PPUSH
14668: LD_STRING DH-5-end
14670: PPUSH
14671: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14675: LD_EXP 39
14679: PPUSH
14680: LD_STRING DF-5-end
14682: PPUSH
14683: CALL_OW 88
// InGameOff ;
14687: CALL_OW 9
// allowCargoEvacuation := true ;
14691: LD_ADDR_EXP 8
14695: PUSH
14696: LD_INT 1
14698: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14699: LD_ADDR_VAR 0 2
14703: PUSH
14704: LD_INT 4
14706: PUSH
14707: LD_INT 3
14709: PUSH
14710: LD_INT 2
14712: PUSH
14713: LD_INT 1
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: PUSH
14722: LD_OWVAR 67
14726: ARRAY
14727: ST_TO_ADDR
// if farmerSquad < max then
14728: LD_EXP 42
14732: PUSH
14733: LD_VAR 0 2
14737: LESS
14738: IFFALSE 14750
// max := farmerSquad ;
14740: LD_ADDR_VAR 0 2
14744: PUSH
14745: LD_EXP 42
14749: ST_TO_ADDR
// for i := 1 to max do
14750: LD_ADDR_VAR 0 1
14754: PUSH
14755: DOUBLE
14756: LD_INT 1
14758: DEC
14759: ST_TO_ADDR
14760: LD_VAR 0 2
14764: PUSH
14765: FOR_TO
14766: IFFALSE 14804
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14768: LD_EXP 42
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: PPUSH
14777: LD_INT 2
14779: PPUSH
14780: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14784: LD_ADDR_EXP 42
14788: PUSH
14789: LD_EXP 42
14793: PPUSH
14794: LD_INT 1
14796: PPUSH
14797: CALL_OW 3
14801: ST_TO_ADDR
// end ;
14802: GO 14765
14804: POP
14805: POP
// for i in Farmer ^ farmerSquad do
14806: LD_ADDR_VAR 0 1
14810: PUSH
14811: LD_EXP 39
14815: PUSH
14816: LD_EXP 42
14820: ADD
14821: PUSH
14822: FOR_IN
14823: IFFALSE 14862
// begin if IsInUnit ( i ) then
14825: LD_VAR 0 1
14829: PPUSH
14830: CALL_OW 310
14834: IFFALSE 14845
// ComExitBuilding ( i ) ;
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14845: LD_VAR 0 1
14849: PPUSH
14850: LD_INT 102
14852: PPUSH
14853: LD_INT 7
14855: PPUSH
14856: CALL_OW 171
// end ;
14860: GO 14822
14862: POP
14863: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14864: LD_ADDR_VAR 0 1
14868: PUSH
14869: LD_INT 22
14871: PUSH
14872: LD_INT 5
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 21
14881: PUSH
14882: LD_INT 3
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 69
14897: PUSH
14898: LD_INT 5
14900: DIFF
14901: PUSH
14902: FOR_IN
14903: IFFALSE 14919
// SetSide ( i , 2 ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_INT 2
14912: PPUSH
14913: CALL_OW 235
14917: GO 14902
14919: POP
14920: POP
// wait ( 0 0$2 ) ;
14921: LD_INT 70
14923: PPUSH
14924: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14928: LD_EXP 31
14932: PPUSH
14933: LD_STRING DH-6-end
14935: PPUSH
14936: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14940: LD_INT 35
14942: PPUSH
14943: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14947: LD_ADDR_VAR 0 3
14951: PUSH
14952: LD_EXP 39
14956: PUSH
14957: LD_EXP 42
14961: ADD
14962: PPUSH
14963: LD_INT 95
14965: PUSH
14966: LD_INT 3
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PPUSH
14973: CALL_OW 72
14977: ST_TO_ADDR
// if tmp then
14978: LD_VAR 0 3
14982: IFFALSE 15026
// for i in tmp do
14984: LD_ADDR_VAR 0 1
14988: PUSH
14989: LD_VAR 0 3
14993: PUSH
14994: FOR_IN
14995: IFFALSE 15024
// begin farmerSquad := farmerSquad diff i ;
14997: LD_ADDR_EXP 42
15001: PUSH
15002: LD_EXP 42
15006: PUSH
15007: LD_VAR 0 1
15011: DIFF
15012: ST_TO_ADDR
// RemoveUnit ( i ) ;
15013: LD_VAR 0 1
15017: PPUSH
15018: CALL_OW 64
// end ;
15022: GO 14994
15024: POP
15025: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15026: LD_EXP 42
15030: PUSH
15031: EMPTY
15032: EQUAL
15033: PUSH
15034: LD_EXP 39
15038: PPUSH
15039: CALL_OW 305
15043: NOT
15044: AND
15045: IFFALSE 14940
// if farmerHumanLoseCounter = 0 then
15047: LD_EXP 21
15051: PUSH
15052: LD_INT 0
15054: EQUAL
15055: IFFALSE 15064
// SetAchievement ( ACH_BABY ) ;
15057: LD_STRING ACH_BABY
15059: PPUSH
15060: CALL_OW 543
// wait ( 1 1$00 ) ;
15064: LD_INT 2100
15066: PPUSH
15067: CALL_OW 67
// SendAttack ;
15071: CALL 6126 0 0
// Say ( Heike , DH-7-end ) ;
15075: LD_EXP 31
15079: PPUSH
15080: LD_STRING DH-7-end
15082: PPUSH
15083: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15087: LD_ADDR_VAR 0 1
15091: PUSH
15092: DOUBLE
15093: LD_INT 1
15095: DEC
15096: ST_TO_ADDR
15097: LD_INT 2
15099: PUSH
15100: LD_INT 3
15102: PUSH
15103: LD_INT 3
15105: PUSH
15106: LD_INT 4
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: PUSH
15115: LD_OWVAR 67
15119: ARRAY
15120: PUSH
15121: FOR_TO
15122: IFFALSE 15178
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15124: LD_INT 4200
15126: PUSH
15127: LD_INT 3500
15129: PUSH
15130: LD_INT 3150
15132: PUSH
15133: LD_INT 2800
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: PUSH
15142: LD_OWVAR 67
15146: ARRAY
15147: PPUSH
15148: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15152: LD_EXP 12
15156: PUSH
15157: LD_EXP 22
15161: PUSH
15162: LD_INT 1
15164: LESS
15165: AND
15166: IFFALSE 15172
// exit ;
15168: POP
15169: POP
15170: GO 15180
// SendAttack ;
15172: CALL 6126 0 0
// end ;
15176: GO 15121
15178: POP
15179: POP
// end ;
15180: PPOPN 3
15182: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15183: LD_EXP 8
15187: PUSH
15188: LD_EXP 22
15192: PUSH
15193: LD_INT 0
15195: GREATER
15196: AND
15197: IFFALSE 15207
15199: GO 15201
15201: DISABLE
// begin enable ;
15202: ENABLE
// CargoEvacuation ;
15203: CALL 3599 0 0
// end ;
15207: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15208: LD_EXP 18
15212: PUSH
15213: LD_INT 18900
15215: LESSEQUAL
15216: IFFALSE 15265
15218: GO 15220
15220: DISABLE
// begin DialogueOn ;
15221: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15225: LD_EXP 39
15229: PPUSH
15230: LD_STRING DF-1-distribution-a
15232: PPUSH
15233: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15237: LD_EXP 31
15241: PPUSH
15242: LD_STRING DH-1-distribution-a
15244: PPUSH
15245: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15249: LD_EXP 39
15253: PPUSH
15254: LD_STRING DF-2-distribution-a
15256: PPUSH
15257: CALL_OW 94
// DialogueOff ;
15261: CALL_OW 7
// end ;
15265: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15266: LD_EXP 18
15270: PUSH
15271: LD_INT 0
15273: LESSEQUAL
15274: IFFALSE 15306
15276: GO 15278
15278: DISABLE
// begin DialogueOn ;
15279: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15283: LD_EXP 39
15287: PPUSH
15288: LD_STRING DF-3-distribution-a
15290: PPUSH
15291: CALL_OW 94
// YouLost ( Distribution ) ;
15295: LD_STRING Distribution
15297: PPUSH
15298: CALL_OW 104
// DialogueOff ;
15302: CALL_OW 7
// end ;
15306: END
// every 0 0$1 trigger vehCounter >= 2 do
15307: LD_EXP 23
15311: PUSH
15312: LD_INT 2
15314: GREATEREQUAL
15315: IFFALSE 15327
15317: GO 15319
15319: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15320: LD_STRING VehConstructed
15322: PPUSH
15323: CALL_OW 337
15327: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15328: LD_INT 22
15330: PUSH
15331: LD_INT 2
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 34
15340: PUSH
15341: LD_INT 12
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PPUSH
15352: CALL_OW 69
15356: IFFALSE 15416
15358: GO 15360
15360: DISABLE
// begin DialogueOn ;
15361: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15365: LD_EXP 31
15369: PPUSH
15370: LD_STRING DH-1-truck
15372: PPUSH
15373: CALL_OW 88
// if IsOk ( Markov ) then
15377: LD_EXP 38
15381: PPUSH
15382: CALL_OW 302
15386: IFFALSE 15412
// begin Say ( Markov , DMar-1-truck ) ;
15388: LD_EXP 38
15392: PPUSH
15393: LD_STRING DMar-1-truck
15395: PPUSH
15396: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15400: LD_EXP 31
15404: PPUSH
15405: LD_STRING DH-2-truck
15407: PPUSH
15408: CALL_OW 88
// end ; DialogueOff ;
15412: CALL_OW 7
// end ;
15416: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15417: LD_INT 0
15419: PPUSH
15420: PPUSH
15421: PPUSH
// if IsOk ( Givi ) then
15422: LD_EXP 32
15426: PPUSH
15427: CALL_OW 302
15431: IFFALSE 15447
// begin Say ( Givi , DG-1-nocargo ) ;
15433: LD_EXP 32
15437: PPUSH
15438: LD_STRING DG-1-nocargo
15440: PPUSH
15441: CALL_OW 88
// exit ;
15445: GO 15543
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15447: LD_ADDR_VAR 0 2
15451: PUSH
15452: LD_EXP 45
15456: PPUSH
15457: LD_INT 26
15459: PUSH
15460: LD_INT 1
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PPUSH
15467: CALL_OW 72
15471: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15472: LD_ADDR_VAR 0 3
15476: PUSH
15477: LD_EXP 45
15481: PPUSH
15482: LD_INT 26
15484: PUSH
15485: LD_INT 2
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PPUSH
15492: CALL_OW 72
15496: ST_TO_ADDR
// if randomMen then
15497: LD_VAR 0 2
15501: IFFALSE 15521
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15503: LD_VAR 0 2
15507: PUSH
15508: LD_INT 1
15510: ARRAY
15511: PPUSH
15512: LD_STRING DArm-1-nocargo
15514: PPUSH
15515: CALL_OW 88
15519: GO 15543
// if randomWomen then
15521: LD_VAR 0 3
15525: IFFALSE 15543
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15527: LD_VAR 0 3
15531: PUSH
15532: LD_INT 1
15534: ARRAY
15535: PPUSH
15536: LD_STRING DArf-1-nocargo
15538: PPUSH
15539: CALL_OW 88
// end ;
15543: LD_VAR 0 1
15547: RET
// export function IncomingAttack ; begin
15548: LD_INT 0
15550: PPUSH
// if attackWave = 1 then
15551: LD_EXP 20
15555: PUSH
15556: LD_INT 1
15558: EQUAL
15559: IFFALSE 15630
// begin DialogueOn ;
15561: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15565: LD_EXP 40
15569: PPUSH
15570: LD_STRING DO-1-radio-1
15572: PPUSH
15573: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15577: LD_EXP 31
15581: PPUSH
15582: LD_STRING DH-1-radio-1-
15584: PPUSH
15585: CALL_OW 88
// if IsOk ( Markov ) then
15589: LD_EXP 38
15593: PPUSH
15594: CALL_OW 302
15598: IFFALSE 15624
// begin Say ( Markov , DMar-1-radio-1 ) ;
15600: LD_EXP 38
15604: PPUSH
15605: LD_STRING DMar-1-radio-1
15607: PPUSH
15608: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15612: LD_EXP 31
15616: PPUSH
15617: LD_STRING DH-2-radio-1
15619: PPUSH
15620: CALL_OW 88
// end ; DialogueOff ;
15624: CALL_OW 7
// end else
15628: GO 15654
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15630: LD_EXP 40
15634: PPUSH
15635: LD_STRING DO-1-radio-u
15637: PPUSH
15638: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15642: LD_EXP 31
15646: PPUSH
15647: LD_STRING DH-1-radio-u
15649: PPUSH
15650: CALL_OW 88
// end ; end ;
15654: LD_VAR 0 1
15658: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15659: LD_EXP 47
15663: PPUSH
15664: LD_INT 95
15666: PUSH
15667: LD_INT 8
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PPUSH
15674: CALL_OW 72
15678: IFFALSE 15781
15680: GO 15682
15682: DISABLE
15683: LD_INT 0
15685: PPUSH
// begin enable ;
15686: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15687: LD_ADDR_VAR 0 1
15691: PUSH
15692: LD_EXP 47
15696: PPUSH
15697: LD_INT 95
15699: PUSH
15700: LD_INT 8
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PPUSH
15707: CALL_OW 72
15711: PUSH
15712: FOR_IN
15713: IFFALSE 15742
// begin usForces := usForces diff i ;
15715: LD_ADDR_EXP 47
15719: PUSH
15720: LD_EXP 47
15724: PUSH
15725: LD_VAR 0 1
15729: DIFF
15730: ST_TO_ADDR
// RemoveUnit ( i ) ;
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 64
// end ;
15740: GO 15712
15742: POP
15743: POP
// if not americanHasEscaped and attackWave = 1 then
15744: LD_EXP 9
15748: NOT
15749: PUSH
15750: LD_EXP 20
15754: PUSH
15755: LD_INT 1
15757: EQUAL
15758: AND
15759: IFFALSE 15781
// begin americanHasEscaped := true ;
15761: LD_ADDR_EXP 9
15765: PUSH
15766: LD_INT 1
15768: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15769: LD_EXP 31
15773: PPUSH
15774: LD_STRING DH-2-assault-a
15776: PPUSH
15777: CALL_OW 88
// end ; end ;
15781: PPOPN 1
15783: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15784: LD_INT 4
15786: PPUSH
15787: LD_INT 22
15789: PUSH
15790: LD_INT 1
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PPUSH
15797: CALL_OW 70
15801: PUSH
15802: LD_EXP 12
15806: NOT
15807: AND
15808: IFFALSE 15825
15810: GO 15812
15812: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15813: LD_EXP 39
15817: PPUSH
15818: LD_STRING DF-1-attack
15820: PPUSH
15821: CALL_OW 94
15825: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15826: LD_INT 5
15828: PPUSH
15829: CALL_OW 255
15833: PUSH
15834: LD_INT 2
15836: EQUAL
15837: IFFALSE 15853
15839: GO 15841
15841: DISABLE
// begin enable ;
15842: ENABLE
// SetSide ( arDepot , 5 ) ;
15843: LD_INT 5
15845: PPUSH
15846: LD_INT 5
15848: PPUSH
15849: CALL_OW 235
// end ;
15853: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15854: LD_INT 22
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 21
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PPUSH
15878: CALL_OW 69
15882: NOT
15883: PUSH
15884: LD_INT 22
15886: PUSH
15887: LD_INT 4
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PPUSH
15894: CALL_OW 69
15898: NOT
15899: AND
15900: PUSH
15901: LD_EXP 12
15905: NOT
15906: AND
15907: PUSH
15908: LD_EXP 16
15912: PUSH
15913: LD_INT 90
15915: GREATER
15916: AND
15917: PUSH
15918: LD_INT 7
15920: PPUSH
15921: LD_INT 22
15923: PUSH
15924: LD_INT 2
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 21
15933: PUSH
15934: LD_INT 1
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PPUSH
15945: CALL_OW 70
15949: AND
15950: PUSH
15951: LD_INT 22
15953: PUSH
15954: LD_INT 2
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 50
15963: PUSH
15964: EMPTY
15965: LIST
15966: PUSH
15967: LD_INT 30
15969: PUSH
15970: LD_INT 0
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: PPUSH
15982: CALL_OW 69
15986: AND
15987: IFFALSE 16796
15989: GO 15991
15991: DISABLE
15992: LD_INT 0
15994: PPUSH
15995: PPUSH
15996: PPUSH
15997: PPUSH
15998: PPUSH
// begin depot := usDepot ;
15999: LD_ADDR_VAR 0 5
16003: PUSH
16004: LD_INT 11
16006: ST_TO_ADDR
// if not depot then
16007: LD_VAR 0 5
16011: NOT
16012: IFFALSE 16052
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16014: LD_ADDR_VAR 0 5
16018: PUSH
16019: LD_INT 22
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 30
16031: PUSH
16032: LD_INT 0
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PPUSH
16043: CALL_OW 69
16047: PUSH
16048: LD_INT 1
16050: ARRAY
16051: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16052: LD_ADDR_VAR 0 1
16056: PUSH
16057: LD_EXP 45
16061: PPUSH
16062: LD_INT 26
16064: PUSH
16065: LD_INT 1
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PPUSH
16072: CALL_OW 72
16076: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16077: LD_ADDR_VAR 0 2
16081: PUSH
16082: LD_EXP 45
16086: PPUSH
16087: LD_INT 26
16089: PUSH
16090: LD_INT 2
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 72
16101: ST_TO_ADDR
// if IsOk ( Kaia ) then
16102: LD_EXP 36
16106: PPUSH
16107: CALL_OW 302
16111: IFFALSE 16132
// speaker := [ Kaia , DK ] else
16113: LD_ADDR_VAR 0 3
16117: PUSH
16118: LD_EXP 36
16122: PUSH
16123: LD_STRING DK
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: ST_TO_ADDR
16130: GO 16212
// if randomMen then
16132: LD_VAR 0 1
16136: IFFALSE 16171
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_VAR 0 1
16147: PUSH
16148: LD_INT 1
16150: PPUSH
16151: LD_VAR 0 1
16155: PPUSH
16156: CALL_OW 12
16160: ARRAY
16161: PUSH
16162: LD_STRING DArm
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: ST_TO_ADDR
16169: GO 16212
// if randomWomen then
16171: LD_VAR 0 2
16175: IFFALSE 16210
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16177: LD_ADDR_VAR 0 3
16181: PUSH
16182: LD_VAR 0 2
16186: PUSH
16187: LD_INT 1
16189: PPUSH
16190: LD_VAR 0 2
16194: PPUSH
16195: CALL_OW 12
16199: ARRAY
16200: PUSH
16201: LD_STRING DArf
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: ST_TO_ADDR
16208: GO 16212
// exit ;
16210: GO 16796
// if IsInUnit ( speaker [ 1 ] ) then
16212: LD_VAR 0 3
16216: PUSH
16217: LD_INT 1
16219: ARRAY
16220: PPUSH
16221: CALL_OW 310
16225: IFFALSE 16248
// place := IsInUnit ( speaker [ 1 ] ) else
16227: LD_ADDR_VAR 0 4
16231: PUSH
16232: LD_VAR 0 3
16236: PUSH
16237: LD_INT 1
16239: ARRAY
16240: PPUSH
16241: CALL_OW 310
16245: ST_TO_ADDR
16246: GO 16262
// place := speaker [ 1 ] ;
16248: LD_ADDR_VAR 0 4
16252: PUSH
16253: LD_VAR 0 3
16257: PUSH
16258: LD_INT 1
16260: ARRAY
16261: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16262: LD_VAR 0 4
16266: PPUSH
16267: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16271: LD_VAR 0 4
16275: PPUSH
16276: CALL_OW 250
16280: PPUSH
16281: LD_VAR 0 4
16285: PPUSH
16286: CALL_OW 251
16290: PPUSH
16291: CALL 2086 0 2
// wait ( 0 0$2 ) ;
16295: LD_INT 70
16297: PPUSH
16298: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16302: LD_EXP 41
16306: PPUSH
16307: CALL_OW 305
16311: NOT
16312: IFFALSE 16316
// exit ;
16314: GO 16796
// allowConvoys := false ;
16316: LD_ADDR_EXP 13
16320: PUSH
16321: LD_INT 0
16323: ST_TO_ADDR
// blockAttack := true ;
16324: LD_ADDR_EXP 29
16328: PUSH
16329: LD_INT 1
16331: ST_TO_ADDR
// InGameOn ;
16332: CALL_OW 8
// wait ( 0 0$1 ) ;
16336: LD_INT 35
16338: PPUSH
16339: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16343: LD_EXP 41
16347: PPUSH
16348: LD_STRING DI-1-land
16350: PPUSH
16351: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16355: LD_VAR 0 3
16359: PUSH
16360: LD_INT 1
16362: ARRAY
16363: PPUSH
16364: CALL_OW 310
16368: IFFALSE 16383
// ComExit ( speaker [ 1 ] ) ;
16370: LD_VAR 0 3
16374: PUSH
16375: LD_INT 1
16377: ARRAY
16378: PPUSH
16379: CALL 78709 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16383: LD_VAR 0 3
16387: PUSH
16388: LD_INT 1
16390: ARRAY
16391: PPUSH
16392: LD_EXP 41
16396: PPUSH
16397: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16401: LD_VAR 0 3
16405: PUSH
16406: LD_INT 1
16408: ARRAY
16409: PPUSH
16410: LD_EXP 41
16414: PPUSH
16415: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16419: LD_EXP 41
16423: PPUSH
16424: LD_VAR 0 3
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: CALL_OW 119
// wait ( 0 0$1 ) ;
16437: LD_INT 35
16439: PPUSH
16440: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16444: LD_VAR 0 3
16448: PUSH
16449: LD_INT 1
16451: ARRAY
16452: PPUSH
16453: LD_VAR 0 3
16457: PUSH
16458: LD_INT 2
16460: ARRAY
16461: PUSH
16462: LD_STRING -1-land
16464: STR
16465: PPUSH
16466: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16470: LD_EXP 41
16474: PPUSH
16475: LD_STRING DI-2-land
16477: PPUSH
16478: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16482: LD_VAR 0 3
16486: PUSH
16487: LD_INT 1
16489: ARRAY
16490: PPUSH
16491: LD_VAR 0 3
16495: PUSH
16496: LD_INT 2
16498: ARRAY
16499: PUSH
16500: LD_STRING -2-land
16502: STR
16503: PPUSH
16504: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16508: LD_VAR 0 3
16512: PUSH
16513: LD_INT 1
16515: ARRAY
16516: PPUSH
16517: LD_VAR 0 3
16521: PUSH
16522: LD_INT 2
16524: ARRAY
16525: PUSH
16526: LD_STRING -3-land
16528: STR
16529: PPUSH
16530: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16534: LD_EXP 31
16538: PPUSH
16539: LD_STRING DH-1-land
16541: PPUSH
16542: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16546: LD_VAR 0 5
16550: PPUSH
16551: CALL_OW 313
16555: PUSH
16556: LD_INT 6
16558: EQUAL
16559: IFFALSE 16579
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16561: LD_VAR 0 5
16565: PPUSH
16566: CALL_OW 313
16570: PUSH
16571: LD_INT 1
16573: ARRAY
16574: PPUSH
16575: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16579: LD_EXP 41
16583: PPUSH
16584: LD_INT 2
16586: PPUSH
16587: CALL_OW 235
// CenterOnUnits ( depot ) ;
16591: LD_VAR 0 5
16595: PPUSH
16596: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16600: LD_EXP 41
16604: PPUSH
16605: LD_VAR 0 5
16609: PPUSH
16610: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16614: LD_VAR 0 3
16618: PUSH
16619: LD_INT 1
16621: ARRAY
16622: PPUSH
16623: LD_VAR 0 5
16627: PPUSH
16628: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16632: LD_INT 35
16634: PPUSH
16635: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16639: LD_EXP 41
16643: PPUSH
16644: CALL_OW 310
16648: PUSH
16649: LD_EXP 41
16653: PPUSH
16654: CALL_OW 302
16658: NOT
16659: OR
16660: PUSH
16661: LD_VAR 0 5
16665: PPUSH
16666: CALL_OW 302
16670: NOT
16671: OR
16672: IFFALSE 16632
// InGameOff ;
16674: CALL_OW 9
// blockAttack := false ;
16678: LD_ADDR_EXP 29
16682: PUSH
16683: LD_INT 0
16685: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16686: LD_EXP 41
16690: PPUSH
16691: CALL_OW 302
16695: NOT
16696: IFFALSE 16700
// exit ;
16698: GO 16796
// if not IsOk ( depot ) then
16700: LD_VAR 0 5
16704: PPUSH
16705: CALL_OW 302
16709: NOT
16710: IFFALSE 16773
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16712: LD_EXP 41
16716: PPUSH
16717: LD_INT 30
16719: PPUSH
16720: LD_INT 1
16722: PPUSH
16723: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16727: LD_INT 35
16729: PPUSH
16730: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16734: LD_EXP 41
16738: PPUSH
16739: LD_INT 30
16741: PPUSH
16742: LD_INT 1
16744: PPUSH
16745: CALL_OW 307
16749: PUSH
16750: LD_EXP 41
16754: PPUSH
16755: CALL_OW 301
16759: OR
16760: IFFALSE 16727
// RemoveUnit ( Ibrahim ) ;
16762: LD_EXP 41
16766: PPUSH
16767: CALL_OW 64
// exit ;
16771: GO 16796
// end ; ibrahimInDepot := true ;
16773: LD_ADDR_EXP 26
16777: PUSH
16778: LD_INT 1
16780: ST_TO_ADDR
// allowConvoys := true ;
16781: LD_ADDR_EXP 13
16785: PUSH
16786: LD_INT 1
16788: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16789: LD_STRING IbrahimInDepot
16791: PPUSH
16792: CALL_OW 97
// end ;
16796: PPOPN 5
16798: END
// export function IbrahimQuery ; begin
16799: LD_INT 0
16801: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16802: LD_STRING IbrahimQuery
16804: PPUSH
16805: CALL_OW 97
16809: PUSH
16810: LD_INT 1
16812: DOUBLE
16813: EQUAL
16814: IFTRUE 16818
16816: GO 17188
16818: POP
// begin allowConvoys := false ;
16819: LD_ADDR_EXP 13
16823: PUSH
16824: LD_INT 0
16826: ST_TO_ADDR
// ibrahimInDepot := false ;
16827: LD_ADDR_EXP 26
16831: PUSH
16832: LD_INT 0
16834: ST_TO_ADDR
// InGameOn ;
16835: CALL_OW 8
// DialogueOn ;
16839: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
16843: LD_EXP 31
16847: PPUSH
16848: CALL_OW 87
// wait ( 0 0$1 ) ;
16852: LD_INT 35
16854: PPUSH
16855: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16859: LD_EXP 31
16863: PPUSH
16864: LD_STRING DH-1-interrogation
16866: PPUSH
16867: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16871: LD_EXP 41
16875: PPUSH
16876: LD_STRING DI-1-interrogation
16878: PPUSH
16879: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16883: LD_EXP 31
16887: PPUSH
16888: LD_STRING DH-2-interrogation
16890: PPUSH
16891: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16895: LD_EXP 41
16899: PPUSH
16900: LD_STRING DI-2-interrogation
16902: PPUSH
16903: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16907: LD_EXP 31
16911: PPUSH
16912: LD_STRING DH-3-interrogation
16914: PPUSH
16915: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16919: LD_EXP 41
16923: PPUSH
16924: LD_STRING DI-3-interrogation
16926: PPUSH
16927: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16931: LD_EXP 31
16935: PPUSH
16936: LD_STRING DH-4-interrogation
16938: PPUSH
16939: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16943: LD_EXP 41
16947: PPUSH
16948: LD_STRING DI-4-interrogation
16950: PPUSH
16951: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16955: LD_EXP 31
16959: PPUSH
16960: LD_STRING DH-5-interrogation
16962: PPUSH
16963: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16967: LD_EXP 41
16971: PPUSH
16972: LD_STRING DI-5-interrogation
16974: PPUSH
16975: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16979: LD_INT 10
16981: PPUSH
16982: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
16986: LD_EXP 31
16990: PPUSH
16991: LD_STRING DH-6-interrogation
16993: PPUSH
16994: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
16998: LD_EXP 41
17002: PPUSH
17003: LD_STRING DI-6-interrogation
17005: PPUSH
17006: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
17010: LD_EXP 41
17014: PPUSH
17015: LD_STRING DI-7-interrogation
17017: PPUSH
17018: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17022: LD_EXP 31
17026: PPUSH
17027: LD_STRING DH-7-interrogation
17029: PPUSH
17030: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17034: LD_INT 10
17036: PPUSH
17037: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17041: LD_EXP 31
17045: PPUSH
17046: LD_STRING DH-8-interrogation
17048: PPUSH
17049: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17053: LD_EXP 41
17057: PPUSH
17058: LD_STRING DI-8-interrogation
17060: PPUSH
17061: CALL_OW 88
// wait ( 0 0$1 ) ;
17065: LD_INT 35
17067: PPUSH
17068: CALL_OW 67
// DialogueOff ;
17072: CALL_OW 7
// case Query ( IbrahimDecisionQuery ) of 1 :
17076: LD_STRING IbrahimDecisionQuery
17078: PPUSH
17079: CALL_OW 97
17083: PUSH
17084: LD_INT 1
17086: DOUBLE
17087: EQUAL
17088: IFTRUE 17092
17090: GO 17116
17092: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17093: LD_EXP 41
17097: PPUSH
17098: LD_STRING DI-1-kill
17100: PPUSH
17101: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17105: LD_EXP 41
17109: PPUSH
17110: CALL_OW 66
// end ; 2 :
17114: GO 17182
17116: LD_INT 2
17118: DOUBLE
17119: EQUAL
17120: IFTRUE 17124
17122: GO 17181
17124: POP
// begin SetSide ( Ibrahim , 6 ) ;
17125: LD_EXP 41
17129: PPUSH
17130: LD_INT 6
17132: PPUSH
17133: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17137: LD_EXP 41
17141: PPUSH
17142: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17146: LD_EXP 41
17150: PPUSH
17151: LD_INT 66
17153: PPUSH
17154: LD_INT 2
17156: PPUSH
17157: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17161: LD_EXP 41
17165: PPUSH
17166: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17170: LD_EXP 31
17174: PPUSH
17175: CALL_OW 122
// end ; end ;
17179: GO 17182
17181: POP
// InGameOff ;
17182: CALL_OW 9
// end ; 2 :
17186: GO 17202
17188: LD_INT 2
17190: DOUBLE
17191: EQUAL
17192: IFTRUE 17196
17194: GO 17201
17196: POP
// exit ; end ;
17197: GO 17286
17199: GO 17202
17201: POP
// allowConvoys := true ;
17202: LD_ADDR_EXP 13
17206: PUSH
17207: LD_INT 1
17209: ST_TO_ADDR
// blockAttack := false ;
17210: LD_ADDR_EXP 29
17214: PUSH
17215: LD_INT 0
17217: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17218: LD_INT 5250
17220: PPUSH
17221: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17225: LD_INT 35
17227: PPUSH
17228: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17232: LD_INT 81
17234: PUSH
17235: LD_INT 2
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 21
17244: PUSH
17245: LD_INT 1
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 69
17260: NOT
17261: IFFALSE 17225
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17263: LD_EXP 41
17267: PPUSH
17268: LD_INT 34
17270: PPUSH
17271: LD_INT 21
17273: PPUSH
17274: CALL_OW 111
// ibrahimIsFree := true ;
17278: LD_ADDR_EXP 27
17282: PUSH
17283: LD_INT 1
17285: ST_TO_ADDR
// end ;
17286: LD_VAR 0 1
17290: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17291: LD_EXP 27
17295: PUSH
17296: LD_EXP 41
17300: PPUSH
17301: CALL_OW 302
17305: AND
17306: PUSH
17307: LD_INT 2
17309: PPUSH
17310: LD_EXP 41
17314: PPUSH
17315: CALL_OW 292
17319: AND
17320: IFFALSE 18132
17322: GO 17324
17324: DISABLE
17325: LD_INT 0
17327: PPUSH
17328: PPUSH
17329: PPUSH
17330: PPUSH
17331: PPUSH
17332: PPUSH
// begin wait ( 0 0$10 ) ;
17333: LD_INT 350
17335: PPUSH
17336: CALL_OW 67
// allowConvoys := false ;
17340: LD_ADDR_EXP 13
17344: PUSH
17345: LD_INT 0
17347: ST_TO_ADDR
// blockAttack := true ;
17348: LD_ADDR_EXP 29
17352: PUSH
17353: LD_INT 1
17355: ST_TO_ADDR
// depot := usDepot ;
17356: LD_ADDR_VAR 0 4
17360: PUSH
17361: LD_INT 11
17363: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17364: LD_INT 11
17366: NOT
17367: PUSH
17368: LD_INT 22
17370: PUSH
17371: LD_INT 2
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 50
17380: PUSH
17381: EMPTY
17382: LIST
17383: PUSH
17384: LD_INT 30
17386: PUSH
17387: LD_INT 0
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: PPUSH
17399: CALL_OW 69
17403: AND
17404: IFFALSE 17451
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17406: LD_ADDR_VAR 0 4
17410: PUSH
17411: LD_INT 22
17413: PUSH
17414: LD_INT 2
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 50
17423: PUSH
17424: EMPTY
17425: LIST
17426: PUSH
17427: LD_INT 30
17429: PUSH
17430: LD_INT 0
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: PPUSH
17442: CALL_OW 69
17446: PUSH
17447: LD_INT 1
17449: ARRAY
17450: ST_TO_ADDR
// InGameOn ;
17451: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17455: LD_EXP 41
17459: PPUSH
17460: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17464: LD_EXP 31
17468: PPUSH
17469: LD_EXP 41
17473: PPUSH
17474: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17478: LD_EXP 41
17482: PPUSH
17483: LD_EXP 31
17487: PPUSH
17488: CALL_OW 119
// DialogueOn ;
17492: CALL_OW 6
// Say ( Ibrahim , DI-1-free ) ;
17496: LD_EXP 41
17500: PPUSH
17501: LD_STRING DI-1-free
17503: PPUSH
17504: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17508: LD_EXP 31
17512: PPUSH
17513: LD_STRING DH-1-free
17515: PPUSH
17516: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17520: LD_EXP 41
17524: PPUSH
17525: LD_STRING DI-2-free
17527: PPUSH
17528: CALL_OW 88
// changeClass := 0 ;
17532: LD_ADDR_VAR 0 1
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17540: LD_STRING IbrahimJoinQuery
17542: PPUSH
17543: CALL_OW 97
17547: PUSH
17548: LD_INT 1
17550: DOUBLE
17551: EQUAL
17552: IFTRUE 17556
17554: GO 17567
17556: POP
// begin changeClass := 1 ;
17557: LD_ADDR_VAR 0 1
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// end ; 2 :
17565: GO 17819
17567: LD_INT 2
17569: DOUBLE
17570: EQUAL
17571: IFTRUE 17575
17573: GO 17739
17575: POP
// begin Say ( Heike , DH-1-decline ) ;
17576: LD_EXP 31
17580: PPUSH
17581: LD_STRING DH-1-decline
17583: PPUSH
17584: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17588: LD_EXP 41
17592: PPUSH
17593: LD_STRING DI-1-decline
17595: PPUSH
17596: CALL_OW 88
// DialogueOff ;
17600: CALL_OW 7
// InGameOff ;
17604: CALL_OW 9
// blockAttack := false ;
17608: LD_ADDR_EXP 29
17612: PUSH
17613: LD_INT 0
17615: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17616: LD_EXP 41
17620: PPUSH
17621: LD_INT 30
17623: PPUSH
17624: LD_INT 1
17626: PPUSH
17627: CALL_OW 111
// p := 0 ;
17631: LD_ADDR_VAR 0 3
17635: PUSH
17636: LD_INT 0
17638: ST_TO_ADDR
// repeat p := p + 1 ;
17639: LD_ADDR_VAR 0 3
17643: PUSH
17644: LD_VAR 0 3
17648: PUSH
17649: LD_INT 1
17651: PLUS
17652: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17653: LD_INT 35
17655: PPUSH
17656: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17660: LD_EXP 41
17664: PPUSH
17665: LD_INT 30
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL_OW 307
17675: PUSH
17676: LD_INT 22
17678: PUSH
17679: LD_INT 2
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 101
17688: PUSH
17689: LD_INT 6
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: NOT
17705: OR
17706: PUSH
17707: LD_VAR 0 3
17711: PUSH
17712: LD_INT 10
17714: GREATER
17715: OR
17716: IFFALSE 17639
// RemoveUnit ( Ibrahim ) ;
17718: LD_EXP 41
17722: PPUSH
17723: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17727: LD_INT 1
17729: PPUSH
17730: LD_STRING 03_IbrahimHasEscaped
17732: PPUSH
17733: CALL_OW 39
// end ; 3 :
17737: GO 17819
17739: LD_INT 3
17741: DOUBLE
17742: EQUAL
17743: IFTRUE 17747
17745: GO 17818
17747: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17748: LD_EXP 31
17752: PPUSH
17753: LD_STRING DH-1-radio-hq
17755: PPUSH
17756: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17760: LD_EXP 40
17764: PPUSH
17765: LD_STRING DO-1-radio-hq
17767: PPUSH
17768: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17772: LD_EXP 31
17776: PPUSH
17777: LD_STRING DH-2-radio-hq
17779: PPUSH
17780: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17784: LD_EXP 40
17788: PPUSH
17789: LD_STRING DO-2-radio-hq
17791: PPUSH
17792: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17796: LD_EXP 31
17800: PPUSH
17801: LD_STRING DH-3-radio-hq
17803: PPUSH
17804: CALL_OW 88
// changeClass := 1 ;
17808: LD_ADDR_VAR 0 1
17812: PUSH
17813: LD_INT 1
17815: ST_TO_ADDR
// end ; end ;
17816: GO 17819
17818: POP
// if changeClass then
17819: LD_VAR 0 1
17823: IFFALSE 18132
// begin Say ( Heike , DH-1-agree ) ;
17825: LD_EXP 31
17829: PPUSH
17830: LD_STRING DH-1-agree
17832: PPUSH
17833: CALL_OW 88
// if IsOk ( Givi ) then
17837: LD_EXP 32
17841: PPUSH
17842: CALL_OW 302
17846: IFFALSE 17884
// begin Say ( Givi , DG-1-agree ) ;
17848: LD_EXP 32
17852: PPUSH
17853: LD_STRING DG-1-agree
17855: PPUSH
17856: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17860: LD_EXP 31
17864: PPUSH
17865: LD_STRING DH-2-agree
17867: PPUSH
17868: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17872: LD_EXP 32
17876: PPUSH
17877: LD_STRING DG-2-agree
17879: PPUSH
17880: CALL_OW 88
// end ; CenterNowOnUnits ( Ibrahim ) ;
17884: LD_EXP 41
17888: PPUSH
17889: CALL_OW 87
// DialogueOff ;
17893: CALL_OW 7
// if UnitsInside ( depot ) = 6 then
17897: LD_VAR 0 4
17901: PPUSH
17902: CALL_OW 313
17906: PUSH
17907: LD_INT 6
17909: EQUAL
17910: IFFALSE 17930
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17912: LD_VAR 0 4
17916: PPUSH
17917: CALL_OW 313
17921: PUSH
17922: LD_INT 1
17924: ARRAY
17925: PPUSH
17926: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17930: LD_EXP 41
17934: PPUSH
17935: LD_INT 2
17937: PPUSH
17938: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17942: LD_ADDR_VAR 0 5
17946: PUSH
17947: LD_EXP 41
17951: PPUSH
17952: CALL_OW 250
17956: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17957: LD_ADDR_VAR 0 6
17961: PUSH
17962: LD_EXP 41
17966: PPUSH
17967: CALL_OW 251
17971: ST_TO_ADDR
// if depot then
17972: LD_VAR 0 4
17976: IFFALSE 18025
// begin ComEnterUnit ( Ibrahim , depot ) ;
17978: LD_EXP 41
17982: PPUSH
17983: LD_VAR 0 4
17987: PPUSH
17988: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17992: LD_INT 35
17994: PPUSH
17995: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17999: LD_EXP 41
18003: PPUSH
18004: CALL_OW 310
18008: IFFALSE 17992
// b := IsInUnit ( Ibrahim ) ;
18010: LD_ADDR_VAR 0 2
18014: PUSH
18015: LD_EXP 41
18019: PPUSH
18020: CALL_OW 310
18024: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
18025: LD_EXP 41
18029: PPUSH
18030: CALL_OW 64
// uc_side := 2 ;
18034: LD_ADDR_OWVAR 20
18038: PUSH
18039: LD_INT 2
18041: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18042: LD_ADDR_EXP 41
18046: PUSH
18047: LD_STRING Ibrahim
18049: PPUSH
18050: LD_INT 0
18052: PPUSH
18053: LD_STRING 
18055: PPUSH
18056: CALL 40609 0 3
18060: ST_TO_ADDR
// if depot then
18061: LD_VAR 0 4
18065: IFFALSE 18083
// PlaceHumanInUnit ( Ibrahim , b ) else
18067: LD_EXP 41
18071: PPUSH
18072: LD_VAR 0 2
18076: PPUSH
18077: CALL_OW 52
18081: GO 18105
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18083: LD_EXP 41
18087: PPUSH
18088: LD_VAR 0 5
18092: PPUSH
18093: LD_VAR 0 6
18097: PPUSH
18098: LD_INT 0
18100: PPUSH
18101: CALL_OW 48
// InGameOff ;
18105: CALL_OW 9
// allowConvoys := true ;
18109: LD_ADDR_EXP 13
18113: PUSH
18114: LD_INT 1
18116: ST_TO_ADDR
// blockAttack := false ;
18117: LD_ADDR_EXP 29
18121: PUSH
18122: LD_INT 0
18124: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18125: LD_STRING ACH_IBRAHIM
18127: PPUSH
18128: CALL_OW 543
// end ; end ;
18132: PPOPN 6
18134: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18135: LD_EXP 36
18139: PPUSH
18140: CALL_OW 256
18144: PUSH
18145: LD_INT 3
18147: LESS
18148: IFFALSE 18215
18150: GO 18152
18152: DISABLE
// begin DialogueOn ;
18153: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18157: LD_EXP 36
18161: PPUSH
18162: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18166: LD_EXP 36
18170: PPUSH
18171: LD_STRING DK-keydeath-1
18173: PPUSH
18174: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18178: LD_EXP 31
18182: PPUSH
18183: LD_STRING DH-keydeath-2
18185: PPUSH
18186: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18190: LD_EXP 31
18194: PPUSH
18195: LD_STRING DH-keydeath-3
18197: PPUSH
18198: CALL_OW 88
// DialogueOff ;
18202: CALL_OW 7
// KillUnit ( Kaia ) ;
18206: LD_EXP 36
18210: PPUSH
18211: CALL_OW 66
// end ;
18215: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18216: LD_EXP 12
18220: PUSH
18221: LD_EXP 22
18225: PUSH
18226: LD_INT 1
18228: LESS
18229: AND
18230: IFFALSE 18799
18232: GO 18234
18234: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18235: LD_INT 22
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 2
18247: PUSH
18248: LD_INT 25
18250: PUSH
18251: LD_INT 1
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 25
18260: PUSH
18261: LD_INT 3
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: LIST
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PPUSH
18277: CALL_OW 69
18281: IFFALSE 18359
// begin ChangeSideFog ( 1 , 2 ) ;
18283: LD_INT 1
18285: PPUSH
18286: LD_INT 2
18288: PPUSH
18289: CALL_OW 343
// Query ( DestroyEnemy ) ;
18293: LD_STRING DestroyEnemy
18295: PPUSH
18296: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18300: LD_INT 35
18302: PPUSH
18303: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18307: LD_INT 22
18309: PUSH
18310: LD_INT 1
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 2
18319: PUSH
18320: LD_INT 25
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 25
18332: PUSH
18333: LD_INT 3
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: LIST
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PPUSH
18349: CALL_OW 69
18353: PUSH
18354: LD_INT 0
18356: EQUAL
18357: IFFALSE 18300
// end ; if tick <= 45 45$00 then
18359: LD_OWVAR 1
18363: PUSH
18364: LD_INT 94500
18366: LESSEQUAL
18367: IFFALSE 18376
// SetAchievement ( ACH_HSPEED_3 ) ;
18369: LD_STRING ACH_HSPEED_3
18371: PPUSH
18372: CALL_OW 543
// DialogueOn ;
18376: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18380: LD_EXP 31
18384: PPUSH
18385: LD_STRING DH-1-final
18387: PPUSH
18388: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18392: LD_OWVAR 1
18396: PUSH
18397: LD_INT 138600
18399: PUSH
18400: LD_INT 134400
18402: PUSH
18403: LD_INT 130200
18405: PUSH
18406: LD_INT 126000
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: PUSH
18415: LD_OWVAR 67
18419: ARRAY
18420: LESSEQUAL
18421: IFFALSE 18435
// AddMedal ( med1 , 1 ) else
18423: LD_STRING med1
18425: PPUSH
18426: LD_INT 1
18428: PPUSH
18429: CALL_OW 101
18433: GO 18446
// AddMedal ( med1 , - 1 ) ;
18435: LD_STRING med1
18437: PPUSH
18438: LD_INT 1
18440: NEG
18441: PPUSH
18442: CALL_OW 101
// if vehCounter >= 2 then
18446: LD_EXP 23
18450: PUSH
18451: LD_INT 2
18453: GREATEREQUAL
18454: IFFALSE 18468
// AddMedal ( med2 , 1 ) else
18456: LD_STRING med2
18458: PPUSH
18459: LD_INT 1
18461: PPUSH
18462: CALL_OW 101
18466: GO 18479
// AddMedal ( med2 , - 1 ) ;
18468: LD_STRING med2
18470: PPUSH
18471: LD_INT 1
18473: NEG
18474: PPUSH
18475: CALL_OW 101
// if deadCounter = 0 then
18479: LD_EXP 10
18483: PUSH
18484: LD_INT 0
18486: EQUAL
18487: IFFALSE 18501
// AddMedal ( med3 , 1 ) else
18489: LD_STRING med3
18491: PPUSH
18492: LD_INT 1
18494: PPUSH
18495: CALL_OW 101
18499: GO 18512
// AddMedal ( med3 , - 1 ) ;
18501: LD_STRING med3
18503: PPUSH
18504: LD_INT 1
18506: NEG
18507: PPUSH
18508: CALL_OW 101
// GiveMedals ( MAIN ) ;
18512: LD_STRING MAIN
18514: PPUSH
18515: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18519: LD_INT 22
18521: PUSH
18522: LD_INT 2
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 23
18531: PUSH
18532: LD_INT 2
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 21
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: LIST
18553: PPUSH
18554: CALL_OW 69
18558: PPUSH
18559: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18563: LD_EXP 31
18567: PPUSH
18568: LD_STRING 03_Heike
18570: PPUSH
18571: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18575: LD_EXP 35
18579: PPUSH
18580: LD_STRING 03_Aviradze
18582: PPUSH
18583: CALL_OW 38
// if Givi then
18587: LD_EXP 32
18591: IFFALSE 18605
// SaveCharacters ( Givi , 03_Givi ) ;
18593: LD_EXP 32
18597: PPUSH
18598: LD_STRING 03_Givi
18600: PPUSH
18601: CALL_OW 38
// if Mike then
18605: LD_EXP 33
18609: IFFALSE 18623
// SaveCharacters ( Mike , 03_Mike ) ;
18611: LD_EXP 33
18615: PPUSH
18616: LD_STRING 03_Mike
18618: PPUSH
18619: CALL_OW 38
// if Kamil then
18623: LD_EXP 34
18627: IFFALSE 18641
// SaveCharacters ( Kamil , 03_Kamil ) ;
18629: LD_EXP 34
18633: PPUSH
18634: LD_STRING 03_Kamil
18636: PPUSH
18637: CALL_OW 38
// if Kaia then
18641: LD_EXP 36
18645: IFFALSE 18659
// SaveCharacters ( Kaia , 03_Kaia ) ;
18647: LD_EXP 36
18651: PPUSH
18652: LD_STRING 03_Kaia
18654: PPUSH
18655: CALL_OW 38
// if Sophia then
18659: LD_EXP 37
18663: IFFALSE 18677
// SaveCharacters ( Sophia , 03_Sophia ) ;
18665: LD_EXP 37
18669: PPUSH
18670: LD_STRING 03_Sophia
18672: PPUSH
18673: CALL_OW 38
// if Markov then
18677: LD_EXP 38
18681: IFFALSE 18695
// SaveCharacters ( Markov , 03_Markov ) ;
18683: LD_EXP 38
18687: PPUSH
18688: LD_STRING 03_Markov
18690: PPUSH
18691: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18695: LD_EXP 41
18699: PUSH
18700: LD_EXP 41
18704: PPUSH
18705: CALL_OW 255
18709: PUSH
18710: LD_INT 2
18712: EQUAL
18713: AND
18714: IFFALSE 18735
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18716: LD_STRING enableBioCharacter(BIO_IBRA)
18718: PPUSH
18719: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18723: LD_EXP 41
18727: PPUSH
18728: LD_STRING 03_Ibrahim
18730: PPUSH
18731: CALL_OW 38
// end ; if heikeSecondSquad then
18735: LD_EXP 45
18739: IFFALSE 18753
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18741: LD_EXP 45
18745: PPUSH
18746: LD_STRING 03_others
18748: PPUSH
18749: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18753: LD_EXP 10
18757: PPUSH
18758: LD_STRING 03_DeadCounter
18760: PPUSH
18761: CALL_OW 39
// SaveVariable ( cargoRecycled , 03_CargoRecycled ) ;
18765: LD_EXP 30
18769: PPUSH
18770: LD_STRING 03_CargoRecycled
18772: PPUSH
18773: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18777: LD_STRING enableBioCharacter(BIO_OMAR)
18779: PPUSH
18780: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18784: LD_STRING enableBioCharacter(BIO_FARM)
18786: PPUSH
18787: CALL_OW 559
// YouWin ;
18791: CALL_OW 103
// DialogueOff ;
18795: CALL_OW 7
// end ; end_of_file
18799: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18800: LD_VAR 0 1
18804: PPUSH
18805: CALL 35881 0 1
// if un = Heike then
18809: LD_VAR 0 1
18813: PUSH
18814: LD_EXP 31
18818: EQUAL
18819: IFFALSE 18828
// YouLost ( Heike ) ;
18821: LD_STRING Heike
18823: PPUSH
18824: CALL_OW 104
// if un = Aviradze then
18828: LD_VAR 0 1
18832: PUSH
18833: LD_EXP 35
18837: EQUAL
18838: IFFALSE 18847
// YouLost ( Aviradze ) ;
18840: LD_STRING Aviradze
18842: PPUSH
18843: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18847: LD_VAR 0 1
18851: PUSH
18852: LD_INT 11
18854: EQUAL
18855: PUSH
18856: LD_EXP 12
18860: NOT
18861: AND
18862: IFFALSE 18871
// YouLost ( Depot ) ;
18864: LD_STRING Depot
18866: PPUSH
18867: CALL_OW 104
// if un = arDepot then
18871: LD_VAR 0 1
18875: PUSH
18876: LD_INT 5
18878: EQUAL
18879: IFFALSE 18888
// YouLost ( FarmerDepot ) ;
18881: LD_STRING FarmerDepot
18883: PPUSH
18884: CALL_OW 104
// if un = Farmer then
18888: LD_VAR 0 1
18892: PUSH
18893: LD_EXP 39
18897: EQUAL
18898: IFFALSE 18907
// YouLost ( Farmer ) ;
18900: LD_STRING Farmer
18902: PPUSH
18903: CALL_OW 104
// if un in usForces then
18907: LD_VAR 0 1
18911: PUSH
18912: LD_EXP 47
18916: IN
18917: IFFALSE 18935
// usForces := usForces diff un ;
18919: LD_ADDR_EXP 47
18923: PUSH
18924: LD_EXP 47
18928: PUSH
18929: LD_VAR 0 1
18933: DIFF
18934: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18935: LD_VAR 0 1
18939: PUSH
18940: LD_INT 22
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 23
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 21
18962: PUSH
18963: LD_INT 1
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: LIST
18974: PPUSH
18975: CALL_OW 69
18979: IN
18980: IFFALSE 18996
// deadCounter := deadCounter + 1 ;
18982: LD_ADDR_EXP 10
18986: PUSH
18987: LD_EXP 10
18991: PUSH
18992: LD_INT 1
18994: PLUS
18995: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18996: LD_VAR 0 1
19000: PUSH
19001: LD_INT 22
19003: PUSH
19004: LD_INT 4
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 34
19013: PUSH
19014: LD_INT 12
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PPUSH
19025: CALL_OW 69
19029: IN
19030: PUSH
19031: LD_EXP 19
19035: NOT
19036: AND
19037: IFFALSE 19047
// firstConvoyDestroyed := true ;
19039: LD_ADDR_EXP 19
19043: PUSH
19044: LD_INT 1
19046: ST_TO_ADDR
// if un in usAttackers then
19047: LD_VAR 0 1
19051: PUSH
19052: LD_EXP 50
19056: IN
19057: IFFALSE 19075
// usAttackers := usAttackers diff un ;
19059: LD_ADDR_EXP 50
19063: PUSH
19064: LD_EXP 50
19068: PUSH
19069: LD_VAR 0 1
19073: DIFF
19074: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19075: LD_VAR 0 1
19079: PUSH
19080: LD_INT 22
19082: PUSH
19083: LD_INT 5
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 21
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 69
19108: IN
19109: IFFALSE 19125
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19111: LD_ADDR_EXP 21
19115: PUSH
19116: LD_EXP 21
19120: PUSH
19121: LD_INT 1
19123: PLUS
19124: ST_TO_ADDR
// end ;
19125: PPOPN 1
19127: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19128: LD_VAR 0 2
19132: PUSH
19133: LD_EXP 41
19137: EQUAL
19138: PUSH
19139: LD_EXP 26
19143: AND
19144: IFFALSE 19329
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19146: LD_INT 22
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 30
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 50
19168: PUSH
19169: EMPTY
19170: LIST
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: LIST
19176: PPUSH
19177: CALL_OW 69
19181: IFFALSE 19235
// begin InGameOn ;
19183: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19187: LD_EXP 41
19191: PPUSH
19192: LD_INT 11
19194: PPUSH
19195: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19199: LD_INT 35
19201: PPUSH
19202: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19206: LD_EXP 41
19210: PPUSH
19211: LD_INT 11
19213: PPUSH
19214: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19218: LD_EXP 41
19222: PPUSH
19223: CALL_OW 310
19227: IFFALSE 19199
// InGameOff ;
19229: CALL_OW 9
// end else
19233: GO 19329
// begin SetSide ( Ibrahim , 6 ) ;
19235: LD_EXP 41
19239: PPUSH
19240: LD_INT 6
19242: PPUSH
19243: CALL_OW 235
// ibrahimInDepot := false ;
19247: LD_ADDR_EXP 26
19251: PUSH
19252: LD_INT 0
19254: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19255: LD_EXP 41
19259: PPUSH
19260: LD_INT 30
19262: PPUSH
19263: LD_INT 1
19265: PPUSH
19266: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19270: LD_INT 35
19272: PPUSH
19273: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19277: LD_EXP 41
19281: PPUSH
19282: LD_INT 30
19284: PPUSH
19285: LD_INT 1
19287: PPUSH
19288: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19292: LD_EXP 41
19296: PPUSH
19297: LD_INT 30
19299: PPUSH
19300: LD_INT 1
19302: PPUSH
19303: CALL_OW 307
19307: PUSH
19308: LD_EXP 41
19312: PPUSH
19313: CALL_OW 301
19317: OR
19318: IFFALSE 19270
// RemoveUnit ( Ibrahim ) ;
19320: LD_EXP 41
19324: PPUSH
19325: CALL_OW 64
// end ; end ; end ;
19329: PPOPN 2
19331: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19332: LD_VAR 0 2
19336: PUSH
19337: LD_EXP 31
19341: EQUAL
19342: PUSH
19343: LD_VAR 0 1
19347: PUSH
19348: LD_INT 11
19350: EQUAL
19351: AND
19352: PUSH
19353: LD_EXP 26
19357: AND
19358: IFFALSE 19364
// IbrahimQuery ;
19360: CALL 16799 0 0
// end ;
19364: PPOPN 2
19366: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19367: LD_VAR 0 1
19371: PPUSH
19372: CALL_OW 141
// if oldId in usAttackers then
19376: LD_VAR 0 2
19380: PUSH
19381: LD_EXP 50
19385: IN
19386: IFFALSE 19404
// usAttackers := usAttackers diff oldId ;
19388: LD_ADDR_EXP 50
19392: PUSH
19393: LD_EXP 50
19397: PUSH
19398: LD_VAR 0 2
19402: DIFF
19403: ST_TO_ADDR
// if newId in usAttackers then
19404: LD_VAR 0 1
19408: PUSH
19409: LD_EXP 50
19413: IN
19414: IFFALSE 19432
// usAttackers := usAttackers diff newId ;
19416: LD_ADDR_EXP 50
19420: PUSH
19421: LD_EXP 50
19425: PUSH
19426: LD_VAR 0 1
19430: DIFF
19431: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19432: LD_VAR 0 3
19436: PUSH
19437: LD_INT 4
19439: EQUAL
19440: PUSH
19441: LD_EXP 19
19445: NOT
19446: AND
19447: IFFALSE 19457
// firstConvoyDestroyed := true ;
19449: LD_ADDR_EXP 19
19453: PUSH
19454: LD_INT 1
19456: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19457: LD_VAR 0 1
19461: PPUSH
19462: CALL_OW 264
19466: PUSH
19467: LD_INT 12
19469: EQUAL
19470: IFFALSE 19508
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19472: LD_ADDR_EXP 14
19476: PUSH
19477: LD_EXP 14
19481: PUSH
19482: LD_INT 1
19484: PLUS
19485: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19486: LD_VAR 0 1
19490: PPUSH
19491: LD_INT 1
19493: PPUSH
19494: CALL_OW 289
19498: PUSH
19499: LD_INT 0
19501: EQUAL
19502: IFFALSE 19508
// EmptyCargoDialog ;
19504: CALL 15417 0 0
// end ; end ;
19508: PPOPN 4
19510: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19511: LD_VAR 0 1
19515: PUSH
19516: LD_INT 2
19518: EQUAL
19519: PUSH
19520: LD_VAR 0 2
19524: PUSH
19525: LD_INT 5
19527: EQUAL
19528: AND
19529: IFFALSE 19538
// YouLost ( Attack ) ;
19531: LD_STRING Attack
19533: PPUSH
19534: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19538: LD_VAR 0 1
19542: PUSH
19543: LD_INT 2
19545: EQUAL
19546: PUSH
19547: LD_VAR 0 2
19551: PUSH
19552: LD_INT 1
19554: EQUAL
19555: AND
19556: IFFALSE 19566
// americanContact := true ;
19558: LD_ADDR_EXP 5
19562: PUSH
19563: LD_INT 1
19565: ST_TO_ADDR
// end ;
19566: PPOPN 2
19568: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19569: LD_VAR 0 1
19573: PPUSH
19574: CALL_OW 255
19578: PUSH
19579: LD_INT 1
19581: EQUAL
19582: PUSH
19583: LD_EXP 7
19587: NOT
19588: AND
19589: IFFALSE 19723
// begin if GetBType ( b ) = b_lab then
19591: LD_VAR 0 1
19595: PPUSH
19596: CALL_OW 266
19600: PUSH
19601: LD_INT 6
19603: EQUAL
19604: IFFALSE 19644
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19606: LD_EXP 47
19610: PPUSH
19611: LD_INT 25
19613: PUSH
19614: LD_INT 4
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PPUSH
19621: CALL_OW 72
19625: PPUSH
19626: LD_VAR 0 1
19630: PPUSH
19631: CALL_OW 120
// AmLabResearch ( b ) ;
19635: LD_VAR 0 1
19639: PPUSH
19640: CALL 5142 0 1
// end ; if GetBType ( b ) = b_armoury then
19644: LD_VAR 0 1
19648: PPUSH
19649: CALL_OW 266
19653: PUSH
19654: LD_INT 4
19656: EQUAL
19657: IFFALSE 19705
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19659: LD_EXP 47
19663: PPUSH
19664: LD_INT 25
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 3
19676: PUSH
19677: LD_INT 54
19679: PUSH
19680: EMPTY
19681: LIST
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PPUSH
19691: CALL_OW 72
19695: PPUSH
19696: LD_VAR 0 1
19700: PPUSH
19701: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19705: LD_ADDR_EXP 49
19709: PUSH
19710: LD_EXP 49
19714: PPUSH
19715: LD_INT 1
19717: PPUSH
19718: CALL_OW 3
19722: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19723: LD_VAR 0 1
19727: PPUSH
19728: CALL_OW 255
19732: PUSH
19733: LD_INT 5
19735: EQUAL
19736: IFFALSE 19750
// SetBLevel ( b , 5 ) ;
19738: LD_VAR 0 1
19742: PPUSH
19743: LD_INT 5
19745: PPUSH
19746: CALL_OW 241
// end ;
19750: PPOPN 1
19752: END
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin if weapon = us_cargo_bay then
19753: LD_VAR 0 11
19757: PUSH
19758: LD_INT 12
19760: EQUAL
19761: IFFALSE 19771
// cargoRecycled := true ;
19763: LD_ADDR_EXP 30
19767: PUSH
19768: LD_INT 1
19770: ST_TO_ADDR
// end ;
19771: PPOPN 11
19773: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19774: LD_VAR 0 1
19778: PPUSH
19779: CALL_OW 255
19783: PUSH
19784: LD_INT 2
19786: EQUAL
19787: IFFALSE 19803
// vehCounter := vehCounter + 1 ;
19789: LD_ADDR_EXP 23
19793: PUSH
19794: LD_EXP 23
19798: PUSH
19799: LD_INT 1
19801: PLUS
19802: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
19803: LD_VAR 0 1
19807: PPUSH
19808: LD_VAR 0 2
19812: PPUSH
19813: CALL 36001 0 2
// end ;
19817: PPOPN 2
19819: END
// on SailEvent ( event ) do begin if event = eventAttack then
19820: LD_VAR 0 1
19824: PUSH
19825: LD_EXP 25
19829: EQUAL
19830: IFFALSE 19836
// AmericanAttack ;
19832: CALL 6786 0 0
// end ; end_of_file
19836: PPOPN 1
19838: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19839: LD_OWVAR 1
19843: PUSH
19844: LD_INT 10500
19846: PUSH
19847: LD_INT 9800
19849: PUSH
19850: LD_INT 9450
19852: PUSH
19853: LD_INT 9100
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: PUSH
19862: LD_OWVAR 67
19866: ARRAY
19867: LESSEQUAL
19868: IFFALSE 19895
19870: GO 19872
19872: DISABLE
// begin enable ;
19873: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19874: LD_INT 1
19876: PPUSH
19877: LD_INT 5
19879: PPUSH
19880: CALL_OW 12
19884: PPUSH
19885: LD_INT 9
19887: PPUSH
19888: LD_INT 1
19890: PPUSH
19891: CALL_OW 55
// end ;
19895: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
19896: LD_EXP 7
19900: PUSH
19901: LD_OWVAR 1
19905: PUSH
19906: LD_INT 94500
19908: LESSEQUAL
19909: AND
19910: IFFALSE 19937
19912: GO 19914
19914: DISABLE
// begin enable ;
19915: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19916: LD_INT 3
19918: PPUSH
19919: LD_INT 5
19921: PPUSH
19922: CALL_OW 12
19926: PPUSH
19927: LD_INT 9
19929: PPUSH
19930: LD_INT 1
19932: PPUSH
19933: CALL_OW 55
// end ; end_of_file
19937: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19938: LD_EXP 12
19942: NOT
19943: PUSH
19944: LD_EXP 17
19948: AND
19949: PUSH
19950: LD_EXP 4
19954: AND
19955: PUSH
19956: LD_EXP 16
19960: PUSH
19961: LD_EXP 17
19965: LESSEQUAL
19966: AND
19967: IFFALSE 20078
19969: GO 19971
19971: DISABLE
// begin enable ;
19972: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19973: LD_ADDR_OWVAR 47
19977: PUSH
19978: LD_STRING #X103-1
19980: PUSH
19981: LD_EXP 17
19985: PUSH
19986: LD_EXP 16
19990: MINUS
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19996: LD_ADDR_EXP 16
20000: PUSH
20001: LD_INT 5
20003: PPUSH
20004: CALL_OW 274
20008: PPUSH
20009: LD_INT 1
20011: PPUSH
20012: CALL_OW 275
20016: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
20017: LD_INT 10
20019: PPUSH
20020: LD_INT 1
20022: PPUSH
20023: CALL_OW 287
20027: PUSH
20028: LD_INT 0
20030: EQUAL
20031: IFFALSE 20049
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
20033: LD_ADDR_EXP 18
20037: PUSH
20038: LD_EXP 18
20042: PUSH
20043: LD_INT 35
20045: MINUS
20046: ST_TO_ADDR
20047: GO 20078
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
20049: LD_ADDR_EXP 18
20053: PUSH
20054: LD_INT 42000
20056: PUSH
20057: LD_INT 31500
20059: PUSH
20060: LD_INT 25200
20062: PUSH
20063: LD_INT 21000
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: PUSH
20072: LD_OWVAR 67
20076: ARRAY
20077: ST_TO_ADDR
// end ; end_of_file
20078: END
// export globalGameSaveCounter ; every 0 0$1 do
20079: GO 20081
20081: DISABLE
// begin enable ;
20082: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20083: LD_STRING updateTimer(
20085: PUSH
20086: LD_OWVAR 1
20090: STR
20091: PUSH
20092: LD_STRING );
20094: STR
20095: PPUSH
20096: CALL_OW 559
// end ;
20100: END
// every 0 0$1 do
20101: GO 20103
20103: DISABLE
// begin globalGameSaveCounter := 0 ;
20104: LD_ADDR_EXP 51
20108: PUSH
20109: LD_INT 0
20111: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20112: LD_STRING setGameSaveCounter(0)
20114: PPUSH
20115: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20119: LD_STRING initStreamRollete();
20121: PPUSH
20122: CALL_OW 559
// InitStreamMode ;
20126: CALL 21452 0 0
// DefineStreamItems ( false ) ;
20130: LD_INT 0
20132: PPUSH
20133: CALL 21916 0 1
// end ;
20137: END
// export function SOS_MapStart ( ) ; begin
20138: LD_INT 0
20140: PPUSH
// if streamModeActive then
20141: LD_EXP 52
20145: IFFALSE 20154
// DefineStreamItems ( true ) ;
20147: LD_INT 1
20149: PPUSH
20150: CALL 21916 0 1
// UpdateLuaVariables ( ) ;
20154: CALL 20171 0 0
// UpdateFactoryWaypoints ( ) ;
20158: CALL 34785 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20162: CALL 35042 0 0
// end ;
20166: LD_VAR 0 1
20170: RET
// function UpdateLuaVariables ( ) ; begin
20171: LD_INT 0
20173: PPUSH
// if globalGameSaveCounter then
20174: LD_EXP 51
20178: IFFALSE 20212
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20180: LD_ADDR_EXP 51
20184: PUSH
20185: LD_EXP 51
20189: PPUSH
20190: CALL 79672 0 1
20194: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20195: LD_STRING setGameSaveCounter(
20197: PUSH
20198: LD_EXP 51
20202: STR
20203: PUSH
20204: LD_STRING )
20206: STR
20207: PPUSH
20208: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20212: LD_STRING setGameDifficulty(
20214: PUSH
20215: LD_OWVAR 67
20219: STR
20220: PUSH
20221: LD_STRING )
20223: STR
20224: PPUSH
20225: CALL_OW 559
// end ;
20229: LD_VAR 0 1
20233: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20234: LD_INT 0
20236: PPUSH
// if p2 = stream_mode then
20237: LD_VAR 0 2
20241: PUSH
20242: LD_INT 100
20244: EQUAL
20245: IFFALSE 21248
// begin if not StreamModeActive then
20247: LD_EXP 52
20251: NOT
20252: IFFALSE 20262
// StreamModeActive := true ;
20254: LD_ADDR_EXP 52
20258: PUSH
20259: LD_INT 1
20261: ST_TO_ADDR
// if p3 = 0 then
20262: LD_VAR 0 3
20266: PUSH
20267: LD_INT 0
20269: EQUAL
20270: IFFALSE 20276
// InitStreamMode ;
20272: CALL 21452 0 0
// if p3 = 1 then
20276: LD_VAR 0 3
20280: PUSH
20281: LD_INT 1
20283: EQUAL
20284: IFFALSE 20294
// sRocket := true ;
20286: LD_ADDR_EXP 57
20290: PUSH
20291: LD_INT 1
20293: ST_TO_ADDR
// if p3 = 2 then
20294: LD_VAR 0 3
20298: PUSH
20299: LD_INT 2
20301: EQUAL
20302: IFFALSE 20312
// sSpeed := true ;
20304: LD_ADDR_EXP 56
20308: PUSH
20309: LD_INT 1
20311: ST_TO_ADDR
// if p3 = 3 then
20312: LD_VAR 0 3
20316: PUSH
20317: LD_INT 3
20319: EQUAL
20320: IFFALSE 20330
// sEngine := true ;
20322: LD_ADDR_EXP 58
20326: PUSH
20327: LD_INT 1
20329: ST_TO_ADDR
// if p3 = 4 then
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 4
20337: EQUAL
20338: IFFALSE 20348
// sSpec := true ;
20340: LD_ADDR_EXP 55
20344: PUSH
20345: LD_INT 1
20347: ST_TO_ADDR
// if p3 = 5 then
20348: LD_VAR 0 3
20352: PUSH
20353: LD_INT 5
20355: EQUAL
20356: IFFALSE 20366
// sLevel := true ;
20358: LD_ADDR_EXP 59
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
// if p3 = 6 then
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 6
20373: EQUAL
20374: IFFALSE 20384
// sArmoury := true ;
20376: LD_ADDR_EXP 60
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// if p3 = 7 then
20384: LD_VAR 0 3
20388: PUSH
20389: LD_INT 7
20391: EQUAL
20392: IFFALSE 20402
// sRadar := true ;
20394: LD_ADDR_EXP 61
20398: PUSH
20399: LD_INT 1
20401: ST_TO_ADDR
// if p3 = 8 then
20402: LD_VAR 0 3
20406: PUSH
20407: LD_INT 8
20409: EQUAL
20410: IFFALSE 20420
// sBunker := true ;
20412: LD_ADDR_EXP 62
20416: PUSH
20417: LD_INT 1
20419: ST_TO_ADDR
// if p3 = 9 then
20420: LD_VAR 0 3
20424: PUSH
20425: LD_INT 9
20427: EQUAL
20428: IFFALSE 20438
// sHack := true ;
20430: LD_ADDR_EXP 63
20434: PUSH
20435: LD_INT 1
20437: ST_TO_ADDR
// if p3 = 10 then
20438: LD_VAR 0 3
20442: PUSH
20443: LD_INT 10
20445: EQUAL
20446: IFFALSE 20456
// sFire := true ;
20448: LD_ADDR_EXP 64
20452: PUSH
20453: LD_INT 1
20455: ST_TO_ADDR
// if p3 = 11 then
20456: LD_VAR 0 3
20460: PUSH
20461: LD_INT 11
20463: EQUAL
20464: IFFALSE 20474
// sRefresh := true ;
20466: LD_ADDR_EXP 65
20470: PUSH
20471: LD_INT 1
20473: ST_TO_ADDR
// if p3 = 12 then
20474: LD_VAR 0 3
20478: PUSH
20479: LD_INT 12
20481: EQUAL
20482: IFFALSE 20492
// sExp := true ;
20484: LD_ADDR_EXP 66
20488: PUSH
20489: LD_INT 1
20491: ST_TO_ADDR
// if p3 = 13 then
20492: LD_VAR 0 3
20496: PUSH
20497: LD_INT 13
20499: EQUAL
20500: IFFALSE 20510
// sDepot := true ;
20502: LD_ADDR_EXP 67
20506: PUSH
20507: LD_INT 1
20509: ST_TO_ADDR
// if p3 = 14 then
20510: LD_VAR 0 3
20514: PUSH
20515: LD_INT 14
20517: EQUAL
20518: IFFALSE 20528
// sFlag := true ;
20520: LD_ADDR_EXP 68
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
// if p3 = 15 then
20528: LD_VAR 0 3
20532: PUSH
20533: LD_INT 15
20535: EQUAL
20536: IFFALSE 20546
// sKamikadze := true ;
20538: LD_ADDR_EXP 76
20542: PUSH
20543: LD_INT 1
20545: ST_TO_ADDR
// if p3 = 16 then
20546: LD_VAR 0 3
20550: PUSH
20551: LD_INT 16
20553: EQUAL
20554: IFFALSE 20564
// sTroll := true ;
20556: LD_ADDR_EXP 77
20560: PUSH
20561: LD_INT 1
20563: ST_TO_ADDR
// if p3 = 17 then
20564: LD_VAR 0 3
20568: PUSH
20569: LD_INT 17
20571: EQUAL
20572: IFFALSE 20582
// sSlow := true ;
20574: LD_ADDR_EXP 78
20578: PUSH
20579: LD_INT 1
20581: ST_TO_ADDR
// if p3 = 18 then
20582: LD_VAR 0 3
20586: PUSH
20587: LD_INT 18
20589: EQUAL
20590: IFFALSE 20600
// sLack := true ;
20592: LD_ADDR_EXP 79
20596: PUSH
20597: LD_INT 1
20599: ST_TO_ADDR
// if p3 = 19 then
20600: LD_VAR 0 3
20604: PUSH
20605: LD_INT 19
20607: EQUAL
20608: IFFALSE 20618
// sTank := true ;
20610: LD_ADDR_EXP 81
20614: PUSH
20615: LD_INT 1
20617: ST_TO_ADDR
// if p3 = 20 then
20618: LD_VAR 0 3
20622: PUSH
20623: LD_INT 20
20625: EQUAL
20626: IFFALSE 20636
// sRemote := true ;
20628: LD_ADDR_EXP 82
20632: PUSH
20633: LD_INT 1
20635: ST_TO_ADDR
// if p3 = 21 then
20636: LD_VAR 0 3
20640: PUSH
20641: LD_INT 21
20643: EQUAL
20644: IFFALSE 20654
// sPowell := true ;
20646: LD_ADDR_EXP 83
20650: PUSH
20651: LD_INT 1
20653: ST_TO_ADDR
// if p3 = 22 then
20654: LD_VAR 0 3
20658: PUSH
20659: LD_INT 22
20661: EQUAL
20662: IFFALSE 20672
// sTeleport := true ;
20664: LD_ADDR_EXP 86
20668: PUSH
20669: LD_INT 1
20671: ST_TO_ADDR
// if p3 = 23 then
20672: LD_VAR 0 3
20676: PUSH
20677: LD_INT 23
20679: EQUAL
20680: IFFALSE 20690
// sOilTower := true ;
20682: LD_ADDR_EXP 88
20686: PUSH
20687: LD_INT 1
20689: ST_TO_ADDR
// if p3 = 24 then
20690: LD_VAR 0 3
20694: PUSH
20695: LD_INT 24
20697: EQUAL
20698: IFFALSE 20708
// sShovel := true ;
20700: LD_ADDR_EXP 89
20704: PUSH
20705: LD_INT 1
20707: ST_TO_ADDR
// if p3 = 25 then
20708: LD_VAR 0 3
20712: PUSH
20713: LD_INT 25
20715: EQUAL
20716: IFFALSE 20726
// sSheik := true ;
20718: LD_ADDR_EXP 90
20722: PUSH
20723: LD_INT 1
20725: ST_TO_ADDR
// if p3 = 26 then
20726: LD_VAR 0 3
20730: PUSH
20731: LD_INT 26
20733: EQUAL
20734: IFFALSE 20744
// sEarthquake := true ;
20736: LD_ADDR_EXP 92
20740: PUSH
20741: LD_INT 1
20743: ST_TO_ADDR
// if p3 = 27 then
20744: LD_VAR 0 3
20748: PUSH
20749: LD_INT 27
20751: EQUAL
20752: IFFALSE 20762
// sAI := true ;
20754: LD_ADDR_EXP 93
20758: PUSH
20759: LD_INT 1
20761: ST_TO_ADDR
// if p3 = 28 then
20762: LD_VAR 0 3
20766: PUSH
20767: LD_INT 28
20769: EQUAL
20770: IFFALSE 20780
// sCargo := true ;
20772: LD_ADDR_EXP 96
20776: PUSH
20777: LD_INT 1
20779: ST_TO_ADDR
// if p3 = 29 then
20780: LD_VAR 0 3
20784: PUSH
20785: LD_INT 29
20787: EQUAL
20788: IFFALSE 20798
// sDLaser := true ;
20790: LD_ADDR_EXP 97
20794: PUSH
20795: LD_INT 1
20797: ST_TO_ADDR
// if p3 = 30 then
20798: LD_VAR 0 3
20802: PUSH
20803: LD_INT 30
20805: EQUAL
20806: IFFALSE 20816
// sExchange := true ;
20808: LD_ADDR_EXP 98
20812: PUSH
20813: LD_INT 1
20815: ST_TO_ADDR
// if p3 = 31 then
20816: LD_VAR 0 3
20820: PUSH
20821: LD_INT 31
20823: EQUAL
20824: IFFALSE 20834
// sFac := true ;
20826: LD_ADDR_EXP 99
20830: PUSH
20831: LD_INT 1
20833: ST_TO_ADDR
// if p3 = 32 then
20834: LD_VAR 0 3
20838: PUSH
20839: LD_INT 32
20841: EQUAL
20842: IFFALSE 20852
// sPower := true ;
20844: LD_ADDR_EXP 100
20848: PUSH
20849: LD_INT 1
20851: ST_TO_ADDR
// if p3 = 33 then
20852: LD_VAR 0 3
20856: PUSH
20857: LD_INT 33
20859: EQUAL
20860: IFFALSE 20870
// sRandom := true ;
20862: LD_ADDR_EXP 101
20866: PUSH
20867: LD_INT 1
20869: ST_TO_ADDR
// if p3 = 34 then
20870: LD_VAR 0 3
20874: PUSH
20875: LD_INT 34
20877: EQUAL
20878: IFFALSE 20888
// sShield := true ;
20880: LD_ADDR_EXP 102
20884: PUSH
20885: LD_INT 1
20887: ST_TO_ADDR
// if p3 = 35 then
20888: LD_VAR 0 3
20892: PUSH
20893: LD_INT 35
20895: EQUAL
20896: IFFALSE 20906
// sTime := true ;
20898: LD_ADDR_EXP 103
20902: PUSH
20903: LD_INT 1
20905: ST_TO_ADDR
// if p3 = 36 then
20906: LD_VAR 0 3
20910: PUSH
20911: LD_INT 36
20913: EQUAL
20914: IFFALSE 20924
// sTools := true ;
20916: LD_ADDR_EXP 104
20920: PUSH
20921: LD_INT 1
20923: ST_TO_ADDR
// if p3 = 101 then
20924: LD_VAR 0 3
20928: PUSH
20929: LD_INT 101
20931: EQUAL
20932: IFFALSE 20942
// sSold := true ;
20934: LD_ADDR_EXP 69
20938: PUSH
20939: LD_INT 1
20941: ST_TO_ADDR
// if p3 = 102 then
20942: LD_VAR 0 3
20946: PUSH
20947: LD_INT 102
20949: EQUAL
20950: IFFALSE 20960
// sDiff := true ;
20952: LD_ADDR_EXP 70
20956: PUSH
20957: LD_INT 1
20959: ST_TO_ADDR
// if p3 = 103 then
20960: LD_VAR 0 3
20964: PUSH
20965: LD_INT 103
20967: EQUAL
20968: IFFALSE 20978
// sFog := true ;
20970: LD_ADDR_EXP 73
20974: PUSH
20975: LD_INT 1
20977: ST_TO_ADDR
// if p3 = 104 then
20978: LD_VAR 0 3
20982: PUSH
20983: LD_INT 104
20985: EQUAL
20986: IFFALSE 20996
// sReset := true ;
20988: LD_ADDR_EXP 74
20992: PUSH
20993: LD_INT 1
20995: ST_TO_ADDR
// if p3 = 105 then
20996: LD_VAR 0 3
21000: PUSH
21001: LD_INT 105
21003: EQUAL
21004: IFFALSE 21014
// sSun := true ;
21006: LD_ADDR_EXP 75
21010: PUSH
21011: LD_INT 1
21013: ST_TO_ADDR
// if p3 = 106 then
21014: LD_VAR 0 3
21018: PUSH
21019: LD_INT 106
21021: EQUAL
21022: IFFALSE 21032
// sTiger := true ;
21024: LD_ADDR_EXP 71
21028: PUSH
21029: LD_INT 1
21031: ST_TO_ADDR
// if p3 = 107 then
21032: LD_VAR 0 3
21036: PUSH
21037: LD_INT 107
21039: EQUAL
21040: IFFALSE 21050
// sBomb := true ;
21042: LD_ADDR_EXP 72
21046: PUSH
21047: LD_INT 1
21049: ST_TO_ADDR
// if p3 = 108 then
21050: LD_VAR 0 3
21054: PUSH
21055: LD_INT 108
21057: EQUAL
21058: IFFALSE 21068
// sWound := true ;
21060: LD_ADDR_EXP 80
21064: PUSH
21065: LD_INT 1
21067: ST_TO_ADDR
// if p3 = 109 then
21068: LD_VAR 0 3
21072: PUSH
21073: LD_INT 109
21075: EQUAL
21076: IFFALSE 21086
// sBetray := true ;
21078: LD_ADDR_EXP 84
21082: PUSH
21083: LD_INT 1
21085: ST_TO_ADDR
// if p3 = 110 then
21086: LD_VAR 0 3
21090: PUSH
21091: LD_INT 110
21093: EQUAL
21094: IFFALSE 21104
// sContamin := true ;
21096: LD_ADDR_EXP 85
21100: PUSH
21101: LD_INT 1
21103: ST_TO_ADDR
// if p3 = 111 then
21104: LD_VAR 0 3
21108: PUSH
21109: LD_INT 111
21111: EQUAL
21112: IFFALSE 21122
// sOil := true ;
21114: LD_ADDR_EXP 87
21118: PUSH
21119: LD_INT 1
21121: ST_TO_ADDR
// if p3 = 112 then
21122: LD_VAR 0 3
21126: PUSH
21127: LD_INT 112
21129: EQUAL
21130: IFFALSE 21140
// sStu := true ;
21132: LD_ADDR_EXP 91
21136: PUSH
21137: LD_INT 1
21139: ST_TO_ADDR
// if p3 = 113 then
21140: LD_VAR 0 3
21144: PUSH
21145: LD_INT 113
21147: EQUAL
21148: IFFALSE 21158
// sBazooka := true ;
21150: LD_ADDR_EXP 94
21154: PUSH
21155: LD_INT 1
21157: ST_TO_ADDR
// if p3 = 114 then
21158: LD_VAR 0 3
21162: PUSH
21163: LD_INT 114
21165: EQUAL
21166: IFFALSE 21176
// sMortar := true ;
21168: LD_ADDR_EXP 95
21172: PUSH
21173: LD_INT 1
21175: ST_TO_ADDR
// if p3 = 115 then
21176: LD_VAR 0 3
21180: PUSH
21181: LD_INT 115
21183: EQUAL
21184: IFFALSE 21194
// sRanger := true ;
21186: LD_ADDR_EXP 105
21190: PUSH
21191: LD_INT 1
21193: ST_TO_ADDR
// if p3 = 116 then
21194: LD_VAR 0 3
21198: PUSH
21199: LD_INT 116
21201: EQUAL
21202: IFFALSE 21212
// sComputer := true ;
21204: LD_ADDR_EXP 106
21208: PUSH
21209: LD_INT 1
21211: ST_TO_ADDR
// if p3 = 117 then
21212: LD_VAR 0 3
21216: PUSH
21217: LD_INT 117
21219: EQUAL
21220: IFFALSE 21230
// s30 := true ;
21222: LD_ADDR_EXP 107
21226: PUSH
21227: LD_INT 1
21229: ST_TO_ADDR
// if p3 = 118 then
21230: LD_VAR 0 3
21234: PUSH
21235: LD_INT 118
21237: EQUAL
21238: IFFALSE 21248
// s60 := true ;
21240: LD_ADDR_EXP 108
21244: PUSH
21245: LD_INT 1
21247: ST_TO_ADDR
// end ; if p2 = hack_mode then
21248: LD_VAR 0 2
21252: PUSH
21253: LD_INT 101
21255: EQUAL
21256: IFFALSE 21384
// begin case p3 of 1 :
21258: LD_VAR 0 3
21262: PUSH
21263: LD_INT 1
21265: DOUBLE
21266: EQUAL
21267: IFTRUE 21271
21269: GO 21278
21271: POP
// hHackUnlimitedResources ; 2 :
21272: CALL 33531 0 0
21276: GO 21384
21278: LD_INT 2
21280: DOUBLE
21281: EQUAL
21282: IFTRUE 21286
21284: GO 21293
21286: POP
// hHackSetLevel10 ; 3 :
21287: CALL 33664 0 0
21291: GO 21384
21293: LD_INT 3
21295: DOUBLE
21296: EQUAL
21297: IFTRUE 21301
21299: GO 21308
21301: POP
// hHackSetLevel10YourUnits ; 4 :
21302: CALL 33749 0 0
21306: GO 21384
21308: LD_INT 4
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21323
21316: POP
// hHackInvincible ; 5 :
21317: CALL 34197 0 0
21321: GO 21384
21323: LD_INT 5
21325: DOUBLE
21326: EQUAL
21327: IFTRUE 21331
21329: GO 21338
21331: POP
// hHackInvisible ; 6 :
21332: CALL 34308 0 0
21336: GO 21384
21338: LD_INT 6
21340: DOUBLE
21341: EQUAL
21342: IFTRUE 21346
21344: GO 21353
21346: POP
// hHackChangeYourSide ; 7 :
21347: CALL 34365 0 0
21351: GO 21384
21353: LD_INT 7
21355: DOUBLE
21356: EQUAL
21357: IFTRUE 21361
21359: GO 21368
21361: POP
// hHackChangeUnitSide ; 8 :
21362: CALL 34407 0 0
21366: GO 21384
21368: LD_INT 8
21370: DOUBLE
21371: EQUAL
21372: IFTRUE 21376
21374: GO 21383
21376: POP
// hHackFog ; end ;
21377: CALL 34508 0 0
21381: GO 21384
21383: POP
// end ; if p2 = game_save_mode then
21384: LD_VAR 0 2
21388: PUSH
21389: LD_INT 102
21391: EQUAL
21392: IFFALSE 21447
// begin if p3 = 1 then
21394: LD_VAR 0 3
21398: PUSH
21399: LD_INT 1
21401: EQUAL
21402: IFFALSE 21414
// globalGameSaveCounter := p4 ;
21404: LD_ADDR_EXP 51
21408: PUSH
21409: LD_VAR 0 4
21413: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21414: LD_VAR 0 3
21418: PUSH
21419: LD_INT 2
21421: EQUAL
21422: PUSH
21423: LD_EXP 51
21427: AND
21428: IFFALSE 21447
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21430: LD_STRING setGameSaveCounter(
21432: PUSH
21433: LD_EXP 51
21437: STR
21438: PUSH
21439: LD_STRING )
21441: STR
21442: PPUSH
21443: CALL_OW 559
// end ; end ;
21447: LD_VAR 0 7
21451: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21452: LD_INT 0
21454: PPUSH
// streamModeActive := false ;
21455: LD_ADDR_EXP 52
21459: PUSH
21460: LD_INT 0
21462: ST_TO_ADDR
// normalCounter := 36 ;
21463: LD_ADDR_EXP 53
21467: PUSH
21468: LD_INT 36
21470: ST_TO_ADDR
// hardcoreCounter := 18 ;
21471: LD_ADDR_EXP 54
21475: PUSH
21476: LD_INT 18
21478: ST_TO_ADDR
// sRocket := false ;
21479: LD_ADDR_EXP 57
21483: PUSH
21484: LD_INT 0
21486: ST_TO_ADDR
// sSpeed := false ;
21487: LD_ADDR_EXP 56
21491: PUSH
21492: LD_INT 0
21494: ST_TO_ADDR
// sEngine := false ;
21495: LD_ADDR_EXP 58
21499: PUSH
21500: LD_INT 0
21502: ST_TO_ADDR
// sSpec := false ;
21503: LD_ADDR_EXP 55
21507: PUSH
21508: LD_INT 0
21510: ST_TO_ADDR
// sLevel := false ;
21511: LD_ADDR_EXP 59
21515: PUSH
21516: LD_INT 0
21518: ST_TO_ADDR
// sArmoury := false ;
21519: LD_ADDR_EXP 60
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// sRadar := false ;
21527: LD_ADDR_EXP 61
21531: PUSH
21532: LD_INT 0
21534: ST_TO_ADDR
// sBunker := false ;
21535: LD_ADDR_EXP 62
21539: PUSH
21540: LD_INT 0
21542: ST_TO_ADDR
// sHack := false ;
21543: LD_ADDR_EXP 63
21547: PUSH
21548: LD_INT 0
21550: ST_TO_ADDR
// sFire := false ;
21551: LD_ADDR_EXP 64
21555: PUSH
21556: LD_INT 0
21558: ST_TO_ADDR
// sRefresh := false ;
21559: LD_ADDR_EXP 65
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// sExp := false ;
21567: LD_ADDR_EXP 66
21571: PUSH
21572: LD_INT 0
21574: ST_TO_ADDR
// sDepot := false ;
21575: LD_ADDR_EXP 67
21579: PUSH
21580: LD_INT 0
21582: ST_TO_ADDR
// sFlag := false ;
21583: LD_ADDR_EXP 68
21587: PUSH
21588: LD_INT 0
21590: ST_TO_ADDR
// sKamikadze := false ;
21591: LD_ADDR_EXP 76
21595: PUSH
21596: LD_INT 0
21598: ST_TO_ADDR
// sTroll := false ;
21599: LD_ADDR_EXP 77
21603: PUSH
21604: LD_INT 0
21606: ST_TO_ADDR
// sSlow := false ;
21607: LD_ADDR_EXP 78
21611: PUSH
21612: LD_INT 0
21614: ST_TO_ADDR
// sLack := false ;
21615: LD_ADDR_EXP 79
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// sTank := false ;
21623: LD_ADDR_EXP 81
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// sRemote := false ;
21631: LD_ADDR_EXP 82
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
// sPowell := false ;
21639: LD_ADDR_EXP 83
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
// sTeleport := false ;
21647: LD_ADDR_EXP 86
21651: PUSH
21652: LD_INT 0
21654: ST_TO_ADDR
// sOilTower := false ;
21655: LD_ADDR_EXP 88
21659: PUSH
21660: LD_INT 0
21662: ST_TO_ADDR
// sShovel := false ;
21663: LD_ADDR_EXP 89
21667: PUSH
21668: LD_INT 0
21670: ST_TO_ADDR
// sSheik := false ;
21671: LD_ADDR_EXP 90
21675: PUSH
21676: LD_INT 0
21678: ST_TO_ADDR
// sEarthquake := false ;
21679: LD_ADDR_EXP 92
21683: PUSH
21684: LD_INT 0
21686: ST_TO_ADDR
// sAI := false ;
21687: LD_ADDR_EXP 93
21691: PUSH
21692: LD_INT 0
21694: ST_TO_ADDR
// sCargo := false ;
21695: LD_ADDR_EXP 96
21699: PUSH
21700: LD_INT 0
21702: ST_TO_ADDR
// sDLaser := false ;
21703: LD_ADDR_EXP 97
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// sExchange := false ;
21711: LD_ADDR_EXP 98
21715: PUSH
21716: LD_INT 0
21718: ST_TO_ADDR
// sFac := false ;
21719: LD_ADDR_EXP 99
21723: PUSH
21724: LD_INT 0
21726: ST_TO_ADDR
// sPower := false ;
21727: LD_ADDR_EXP 100
21731: PUSH
21732: LD_INT 0
21734: ST_TO_ADDR
// sRandom := false ;
21735: LD_ADDR_EXP 101
21739: PUSH
21740: LD_INT 0
21742: ST_TO_ADDR
// sShield := false ;
21743: LD_ADDR_EXP 102
21747: PUSH
21748: LD_INT 0
21750: ST_TO_ADDR
// sTime := false ;
21751: LD_ADDR_EXP 103
21755: PUSH
21756: LD_INT 0
21758: ST_TO_ADDR
// sTools := false ;
21759: LD_ADDR_EXP 104
21763: PUSH
21764: LD_INT 0
21766: ST_TO_ADDR
// sSold := false ;
21767: LD_ADDR_EXP 69
21771: PUSH
21772: LD_INT 0
21774: ST_TO_ADDR
// sDiff := false ;
21775: LD_ADDR_EXP 70
21779: PUSH
21780: LD_INT 0
21782: ST_TO_ADDR
// sFog := false ;
21783: LD_ADDR_EXP 73
21787: PUSH
21788: LD_INT 0
21790: ST_TO_ADDR
// sReset := false ;
21791: LD_ADDR_EXP 74
21795: PUSH
21796: LD_INT 0
21798: ST_TO_ADDR
// sSun := false ;
21799: LD_ADDR_EXP 75
21803: PUSH
21804: LD_INT 0
21806: ST_TO_ADDR
// sTiger := false ;
21807: LD_ADDR_EXP 71
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
// sBomb := false ;
21815: LD_ADDR_EXP 72
21819: PUSH
21820: LD_INT 0
21822: ST_TO_ADDR
// sWound := false ;
21823: LD_ADDR_EXP 80
21827: PUSH
21828: LD_INT 0
21830: ST_TO_ADDR
// sBetray := false ;
21831: LD_ADDR_EXP 84
21835: PUSH
21836: LD_INT 0
21838: ST_TO_ADDR
// sContamin := false ;
21839: LD_ADDR_EXP 85
21843: PUSH
21844: LD_INT 0
21846: ST_TO_ADDR
// sOil := false ;
21847: LD_ADDR_EXP 87
21851: PUSH
21852: LD_INT 0
21854: ST_TO_ADDR
// sStu := false ;
21855: LD_ADDR_EXP 91
21859: PUSH
21860: LD_INT 0
21862: ST_TO_ADDR
// sBazooka := false ;
21863: LD_ADDR_EXP 94
21867: PUSH
21868: LD_INT 0
21870: ST_TO_ADDR
// sMortar := false ;
21871: LD_ADDR_EXP 95
21875: PUSH
21876: LD_INT 0
21878: ST_TO_ADDR
// sRanger := false ;
21879: LD_ADDR_EXP 105
21883: PUSH
21884: LD_INT 0
21886: ST_TO_ADDR
// sComputer := false ;
21887: LD_ADDR_EXP 106
21891: PUSH
21892: LD_INT 0
21894: ST_TO_ADDR
// s30 := false ;
21895: LD_ADDR_EXP 107
21899: PUSH
21900: LD_INT 0
21902: ST_TO_ADDR
// s60 := false ;
21903: LD_ADDR_EXP 108
21907: PUSH
21908: LD_INT 0
21910: ST_TO_ADDR
// end ;
21911: LD_VAR 0 1
21915: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21916: LD_INT 0
21918: PPUSH
21919: PPUSH
21920: PPUSH
21921: PPUSH
21922: PPUSH
21923: PPUSH
21924: PPUSH
// result := [ ] ;
21925: LD_ADDR_VAR 0 2
21929: PUSH
21930: EMPTY
21931: ST_TO_ADDR
// if campaign_id = 1 then
21932: LD_OWVAR 69
21936: PUSH
21937: LD_INT 1
21939: EQUAL
21940: IFFALSE 25106
// begin case mission_number of 1 :
21942: LD_OWVAR 70
21946: PUSH
21947: LD_INT 1
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 22031
21955: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21956: LD_ADDR_VAR 0 2
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: LD_INT 4
21966: PUSH
21967: LD_INT 11
21969: PUSH
21970: LD_INT 12
21972: PUSH
21973: LD_INT 15
21975: PUSH
21976: LD_INT 16
21978: PUSH
21979: LD_INT 22
21981: PUSH
21982: LD_INT 23
21984: PUSH
21985: LD_INT 26
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 101
22001: PUSH
22002: LD_INT 102
22004: PUSH
22005: LD_INT 106
22007: PUSH
22008: LD_INT 116
22010: PUSH
22011: LD_INT 117
22013: PUSH
22014: LD_INT 118
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: ST_TO_ADDR
22029: GO 25104
22031: LD_INT 2
22033: DOUBLE
22034: EQUAL
22035: IFTRUE 22039
22037: GO 22123
22039: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22040: LD_ADDR_VAR 0 2
22044: PUSH
22045: LD_INT 2
22047: PUSH
22048: LD_INT 4
22050: PUSH
22051: LD_INT 11
22053: PUSH
22054: LD_INT 12
22056: PUSH
22057: LD_INT 15
22059: PUSH
22060: LD_INT 16
22062: PUSH
22063: LD_INT 22
22065: PUSH
22066: LD_INT 23
22068: PUSH
22069: LD_INT 26
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 101
22085: PUSH
22086: LD_INT 102
22088: PUSH
22089: LD_INT 105
22091: PUSH
22092: LD_INT 106
22094: PUSH
22095: LD_INT 108
22097: PUSH
22098: LD_INT 116
22100: PUSH
22101: LD_INT 117
22103: PUSH
22104: LD_INT 118
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: ST_TO_ADDR
22121: GO 25104
22123: LD_INT 3
22125: DOUBLE
22126: EQUAL
22127: IFTRUE 22131
22129: GO 22219
22131: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22132: LD_ADDR_VAR 0 2
22136: PUSH
22137: LD_INT 2
22139: PUSH
22140: LD_INT 4
22142: PUSH
22143: LD_INT 5
22145: PUSH
22146: LD_INT 11
22148: PUSH
22149: LD_INT 12
22151: PUSH
22152: LD_INT 15
22154: PUSH
22155: LD_INT 16
22157: PUSH
22158: LD_INT 22
22160: PUSH
22161: LD_INT 26
22163: PUSH
22164: LD_INT 36
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 101
22181: PUSH
22182: LD_INT 102
22184: PUSH
22185: LD_INT 105
22187: PUSH
22188: LD_INT 106
22190: PUSH
22191: LD_INT 108
22193: PUSH
22194: LD_INT 116
22196: PUSH
22197: LD_INT 117
22199: PUSH
22200: LD_INT 118
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: ST_TO_ADDR
22217: GO 25104
22219: LD_INT 4
22221: DOUBLE
22222: EQUAL
22223: IFTRUE 22227
22225: GO 22323
22227: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22228: LD_ADDR_VAR 0 2
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: LD_INT 4
22238: PUSH
22239: LD_INT 5
22241: PUSH
22242: LD_INT 8
22244: PUSH
22245: LD_INT 11
22247: PUSH
22248: LD_INT 12
22250: PUSH
22251: LD_INT 15
22253: PUSH
22254: LD_INT 16
22256: PUSH
22257: LD_INT 22
22259: PUSH
22260: LD_INT 23
22262: PUSH
22263: LD_INT 26
22265: PUSH
22266: LD_INT 36
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 101
22285: PUSH
22286: LD_INT 102
22288: PUSH
22289: LD_INT 105
22291: PUSH
22292: LD_INT 106
22294: PUSH
22295: LD_INT 108
22297: PUSH
22298: LD_INT 116
22300: PUSH
22301: LD_INT 117
22303: PUSH
22304: LD_INT 118
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: ST_TO_ADDR
22321: GO 25104
22323: LD_INT 5
22325: DOUBLE
22326: EQUAL
22327: IFTRUE 22331
22329: GO 22443
22331: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22332: LD_ADDR_VAR 0 2
22336: PUSH
22337: LD_INT 2
22339: PUSH
22340: LD_INT 4
22342: PUSH
22343: LD_INT 5
22345: PUSH
22346: LD_INT 6
22348: PUSH
22349: LD_INT 8
22351: PUSH
22352: LD_INT 11
22354: PUSH
22355: LD_INT 12
22357: PUSH
22358: LD_INT 15
22360: PUSH
22361: LD_INT 16
22363: PUSH
22364: LD_INT 22
22366: PUSH
22367: LD_INT 23
22369: PUSH
22370: LD_INT 25
22372: PUSH
22373: LD_INT 26
22375: PUSH
22376: LD_INT 36
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 101
22397: PUSH
22398: LD_INT 102
22400: PUSH
22401: LD_INT 105
22403: PUSH
22404: LD_INT 106
22406: PUSH
22407: LD_INT 108
22409: PUSH
22410: LD_INT 109
22412: PUSH
22413: LD_INT 112
22415: PUSH
22416: LD_INT 116
22418: PUSH
22419: LD_INT 117
22421: PUSH
22422: LD_INT 118
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: ST_TO_ADDR
22441: GO 25104
22443: LD_INT 6
22445: DOUBLE
22446: EQUAL
22447: IFTRUE 22451
22449: GO 22583
22451: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22452: LD_ADDR_VAR 0 2
22456: PUSH
22457: LD_INT 2
22459: PUSH
22460: LD_INT 4
22462: PUSH
22463: LD_INT 5
22465: PUSH
22466: LD_INT 6
22468: PUSH
22469: LD_INT 8
22471: PUSH
22472: LD_INT 11
22474: PUSH
22475: LD_INT 12
22477: PUSH
22478: LD_INT 15
22480: PUSH
22481: LD_INT 16
22483: PUSH
22484: LD_INT 20
22486: PUSH
22487: LD_INT 21
22489: PUSH
22490: LD_INT 22
22492: PUSH
22493: LD_INT 23
22495: PUSH
22496: LD_INT 25
22498: PUSH
22499: LD_INT 26
22501: PUSH
22502: LD_INT 30
22504: PUSH
22505: LD_INT 31
22507: PUSH
22508: LD_INT 32
22510: PUSH
22511: LD_INT 36
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 101
22537: PUSH
22538: LD_INT 102
22540: PUSH
22541: LD_INT 105
22543: PUSH
22544: LD_INT 106
22546: PUSH
22547: LD_INT 108
22549: PUSH
22550: LD_INT 109
22552: PUSH
22553: LD_INT 112
22555: PUSH
22556: LD_INT 116
22558: PUSH
22559: LD_INT 117
22561: PUSH
22562: LD_INT 118
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: ST_TO_ADDR
22581: GO 25104
22583: LD_INT 7
22585: DOUBLE
22586: EQUAL
22587: IFTRUE 22591
22589: GO 22703
22591: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22592: LD_ADDR_VAR 0 2
22596: PUSH
22597: LD_INT 2
22599: PUSH
22600: LD_INT 4
22602: PUSH
22603: LD_INT 5
22605: PUSH
22606: LD_INT 7
22608: PUSH
22609: LD_INT 11
22611: PUSH
22612: LD_INT 12
22614: PUSH
22615: LD_INT 15
22617: PUSH
22618: LD_INT 16
22620: PUSH
22621: LD_INT 20
22623: PUSH
22624: LD_INT 21
22626: PUSH
22627: LD_INT 22
22629: PUSH
22630: LD_INT 23
22632: PUSH
22633: LD_INT 25
22635: PUSH
22636: LD_INT 26
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 101
22657: PUSH
22658: LD_INT 102
22660: PUSH
22661: LD_INT 103
22663: PUSH
22664: LD_INT 105
22666: PUSH
22667: LD_INT 106
22669: PUSH
22670: LD_INT 108
22672: PUSH
22673: LD_INT 112
22675: PUSH
22676: LD_INT 116
22678: PUSH
22679: LD_INT 117
22681: PUSH
22682: LD_INT 118
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: ST_TO_ADDR
22701: GO 25104
22703: LD_INT 8
22705: DOUBLE
22706: EQUAL
22707: IFTRUE 22711
22709: GO 22851
22711: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22712: LD_ADDR_VAR 0 2
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: LD_INT 4
22722: PUSH
22723: LD_INT 5
22725: PUSH
22726: LD_INT 6
22728: PUSH
22729: LD_INT 7
22731: PUSH
22732: LD_INT 8
22734: PUSH
22735: LD_INT 11
22737: PUSH
22738: LD_INT 12
22740: PUSH
22741: LD_INT 15
22743: PUSH
22744: LD_INT 16
22746: PUSH
22747: LD_INT 20
22749: PUSH
22750: LD_INT 21
22752: PUSH
22753: LD_INT 22
22755: PUSH
22756: LD_INT 23
22758: PUSH
22759: LD_INT 25
22761: PUSH
22762: LD_INT 26
22764: PUSH
22765: LD_INT 30
22767: PUSH
22768: LD_INT 31
22770: PUSH
22771: LD_INT 32
22773: PUSH
22774: LD_INT 36
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 101
22801: PUSH
22802: LD_INT 102
22804: PUSH
22805: LD_INT 103
22807: PUSH
22808: LD_INT 105
22810: PUSH
22811: LD_INT 106
22813: PUSH
22814: LD_INT 108
22816: PUSH
22817: LD_INT 109
22819: PUSH
22820: LD_INT 112
22822: PUSH
22823: LD_INT 116
22825: PUSH
22826: LD_INT 117
22828: PUSH
22829: LD_INT 118
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: ST_TO_ADDR
22849: GO 25104
22851: LD_INT 9
22853: DOUBLE
22854: EQUAL
22855: IFTRUE 22859
22857: GO 23007
22859: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22860: LD_ADDR_VAR 0 2
22864: PUSH
22865: LD_INT 2
22867: PUSH
22868: LD_INT 4
22870: PUSH
22871: LD_INT 5
22873: PUSH
22874: LD_INT 6
22876: PUSH
22877: LD_INT 7
22879: PUSH
22880: LD_INT 8
22882: PUSH
22883: LD_INT 11
22885: PUSH
22886: LD_INT 12
22888: PUSH
22889: LD_INT 15
22891: PUSH
22892: LD_INT 16
22894: PUSH
22895: LD_INT 20
22897: PUSH
22898: LD_INT 21
22900: PUSH
22901: LD_INT 22
22903: PUSH
22904: LD_INT 23
22906: PUSH
22907: LD_INT 25
22909: PUSH
22910: LD_INT 26
22912: PUSH
22913: LD_INT 28
22915: PUSH
22916: LD_INT 30
22918: PUSH
22919: LD_INT 31
22921: PUSH
22922: LD_INT 32
22924: PUSH
22925: LD_INT 36
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 101
22953: PUSH
22954: LD_INT 102
22956: PUSH
22957: LD_INT 103
22959: PUSH
22960: LD_INT 105
22962: PUSH
22963: LD_INT 106
22965: PUSH
22966: LD_INT 108
22968: PUSH
22969: LD_INT 109
22971: PUSH
22972: LD_INT 112
22974: PUSH
22975: LD_INT 114
22977: PUSH
22978: LD_INT 116
22980: PUSH
22981: LD_INT 117
22983: PUSH
22984: LD_INT 118
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: ST_TO_ADDR
23005: GO 25104
23007: LD_INT 10
23009: DOUBLE
23010: EQUAL
23011: IFTRUE 23015
23013: GO 23211
23015: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23016: LD_ADDR_VAR 0 2
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: LD_INT 4
23026: PUSH
23027: LD_INT 5
23029: PUSH
23030: LD_INT 6
23032: PUSH
23033: LD_INT 7
23035: PUSH
23036: LD_INT 8
23038: PUSH
23039: LD_INT 9
23041: PUSH
23042: LD_INT 10
23044: PUSH
23045: LD_INT 11
23047: PUSH
23048: LD_INT 12
23050: PUSH
23051: LD_INT 13
23053: PUSH
23054: LD_INT 14
23056: PUSH
23057: LD_INT 15
23059: PUSH
23060: LD_INT 16
23062: PUSH
23063: LD_INT 17
23065: PUSH
23066: LD_INT 18
23068: PUSH
23069: LD_INT 19
23071: PUSH
23072: LD_INT 20
23074: PUSH
23075: LD_INT 21
23077: PUSH
23078: LD_INT 22
23080: PUSH
23081: LD_INT 23
23083: PUSH
23084: LD_INT 24
23086: PUSH
23087: LD_INT 25
23089: PUSH
23090: LD_INT 26
23092: PUSH
23093: LD_INT 28
23095: PUSH
23096: LD_INT 30
23098: PUSH
23099: LD_INT 31
23101: PUSH
23102: LD_INT 32
23104: PUSH
23105: LD_INT 36
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 101
23141: PUSH
23142: LD_INT 102
23144: PUSH
23145: LD_INT 103
23147: PUSH
23148: LD_INT 104
23150: PUSH
23151: LD_INT 105
23153: PUSH
23154: LD_INT 106
23156: PUSH
23157: LD_INT 107
23159: PUSH
23160: LD_INT 108
23162: PUSH
23163: LD_INT 109
23165: PUSH
23166: LD_INT 110
23168: PUSH
23169: LD_INT 111
23171: PUSH
23172: LD_INT 112
23174: PUSH
23175: LD_INT 114
23177: PUSH
23178: LD_INT 116
23180: PUSH
23181: LD_INT 117
23183: PUSH
23184: LD_INT 118
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: ST_TO_ADDR
23209: GO 25104
23211: LD_INT 11
23213: DOUBLE
23214: EQUAL
23215: IFTRUE 23219
23217: GO 23423
23219: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23220: LD_ADDR_VAR 0 2
23224: PUSH
23225: LD_INT 2
23227: PUSH
23228: LD_INT 3
23230: PUSH
23231: LD_INT 4
23233: PUSH
23234: LD_INT 5
23236: PUSH
23237: LD_INT 6
23239: PUSH
23240: LD_INT 7
23242: PUSH
23243: LD_INT 8
23245: PUSH
23246: LD_INT 9
23248: PUSH
23249: LD_INT 10
23251: PUSH
23252: LD_INT 11
23254: PUSH
23255: LD_INT 12
23257: PUSH
23258: LD_INT 13
23260: PUSH
23261: LD_INT 14
23263: PUSH
23264: LD_INT 15
23266: PUSH
23267: LD_INT 16
23269: PUSH
23270: LD_INT 17
23272: PUSH
23273: LD_INT 18
23275: PUSH
23276: LD_INT 19
23278: PUSH
23279: LD_INT 20
23281: PUSH
23282: LD_INT 21
23284: PUSH
23285: LD_INT 22
23287: PUSH
23288: LD_INT 23
23290: PUSH
23291: LD_INT 24
23293: PUSH
23294: LD_INT 25
23296: PUSH
23297: LD_INT 26
23299: PUSH
23300: LD_INT 28
23302: PUSH
23303: LD_INT 30
23305: PUSH
23306: LD_INT 31
23308: PUSH
23309: LD_INT 32
23311: PUSH
23312: LD_INT 34
23314: PUSH
23315: LD_INT 36
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 101
23353: PUSH
23354: LD_INT 102
23356: PUSH
23357: LD_INT 103
23359: PUSH
23360: LD_INT 104
23362: PUSH
23363: LD_INT 105
23365: PUSH
23366: LD_INT 106
23368: PUSH
23369: LD_INT 107
23371: PUSH
23372: LD_INT 108
23374: PUSH
23375: LD_INT 109
23377: PUSH
23378: LD_INT 110
23380: PUSH
23381: LD_INT 111
23383: PUSH
23384: LD_INT 112
23386: PUSH
23387: LD_INT 114
23389: PUSH
23390: LD_INT 116
23392: PUSH
23393: LD_INT 117
23395: PUSH
23396: LD_INT 118
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: ST_TO_ADDR
23421: GO 25104
23423: LD_INT 12
23425: DOUBLE
23426: EQUAL
23427: IFTRUE 23431
23429: GO 23651
23431: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23432: LD_ADDR_VAR 0 2
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: LD_INT 2
23442: PUSH
23443: LD_INT 3
23445: PUSH
23446: LD_INT 4
23448: PUSH
23449: LD_INT 5
23451: PUSH
23452: LD_INT 6
23454: PUSH
23455: LD_INT 7
23457: PUSH
23458: LD_INT 8
23460: PUSH
23461: LD_INT 9
23463: PUSH
23464: LD_INT 10
23466: PUSH
23467: LD_INT 11
23469: PUSH
23470: LD_INT 12
23472: PUSH
23473: LD_INT 13
23475: PUSH
23476: LD_INT 14
23478: PUSH
23479: LD_INT 15
23481: PUSH
23482: LD_INT 16
23484: PUSH
23485: LD_INT 17
23487: PUSH
23488: LD_INT 18
23490: PUSH
23491: LD_INT 19
23493: PUSH
23494: LD_INT 20
23496: PUSH
23497: LD_INT 21
23499: PUSH
23500: LD_INT 22
23502: PUSH
23503: LD_INT 23
23505: PUSH
23506: LD_INT 24
23508: PUSH
23509: LD_INT 25
23511: PUSH
23512: LD_INT 26
23514: PUSH
23515: LD_INT 27
23517: PUSH
23518: LD_INT 28
23520: PUSH
23521: LD_INT 30
23523: PUSH
23524: LD_INT 31
23526: PUSH
23527: LD_INT 32
23529: PUSH
23530: LD_INT 33
23532: PUSH
23533: LD_INT 34
23535: PUSH
23536: LD_INT 36
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 101
23577: PUSH
23578: LD_INT 102
23580: PUSH
23581: LD_INT 103
23583: PUSH
23584: LD_INT 104
23586: PUSH
23587: LD_INT 105
23589: PUSH
23590: LD_INT 106
23592: PUSH
23593: LD_INT 107
23595: PUSH
23596: LD_INT 108
23598: PUSH
23599: LD_INT 109
23601: PUSH
23602: LD_INT 110
23604: PUSH
23605: LD_INT 111
23607: PUSH
23608: LD_INT 112
23610: PUSH
23611: LD_INT 113
23613: PUSH
23614: LD_INT 114
23616: PUSH
23617: LD_INT 116
23619: PUSH
23620: LD_INT 117
23622: PUSH
23623: LD_INT 118
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: ST_TO_ADDR
23649: GO 25104
23651: LD_INT 13
23653: DOUBLE
23654: EQUAL
23655: IFTRUE 23659
23657: GO 23867
23659: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23660: LD_ADDR_VAR 0 2
23664: PUSH
23665: LD_INT 1
23667: PUSH
23668: LD_INT 2
23670: PUSH
23671: LD_INT 3
23673: PUSH
23674: LD_INT 4
23676: PUSH
23677: LD_INT 5
23679: PUSH
23680: LD_INT 8
23682: PUSH
23683: LD_INT 9
23685: PUSH
23686: LD_INT 10
23688: PUSH
23689: LD_INT 11
23691: PUSH
23692: LD_INT 12
23694: PUSH
23695: LD_INT 14
23697: PUSH
23698: LD_INT 15
23700: PUSH
23701: LD_INT 16
23703: PUSH
23704: LD_INT 17
23706: PUSH
23707: LD_INT 18
23709: PUSH
23710: LD_INT 19
23712: PUSH
23713: LD_INT 20
23715: PUSH
23716: LD_INT 21
23718: PUSH
23719: LD_INT 22
23721: PUSH
23722: LD_INT 23
23724: PUSH
23725: LD_INT 24
23727: PUSH
23728: LD_INT 25
23730: PUSH
23731: LD_INT 26
23733: PUSH
23734: LD_INT 27
23736: PUSH
23737: LD_INT 28
23739: PUSH
23740: LD_INT 30
23742: PUSH
23743: LD_INT 31
23745: PUSH
23746: LD_INT 32
23748: PUSH
23749: LD_INT 33
23751: PUSH
23752: LD_INT 34
23754: PUSH
23755: LD_INT 36
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 101
23793: PUSH
23794: LD_INT 102
23796: PUSH
23797: LD_INT 103
23799: PUSH
23800: LD_INT 104
23802: PUSH
23803: LD_INT 105
23805: PUSH
23806: LD_INT 106
23808: PUSH
23809: LD_INT 107
23811: PUSH
23812: LD_INT 108
23814: PUSH
23815: LD_INT 109
23817: PUSH
23818: LD_INT 110
23820: PUSH
23821: LD_INT 111
23823: PUSH
23824: LD_INT 112
23826: PUSH
23827: LD_INT 113
23829: PUSH
23830: LD_INT 114
23832: PUSH
23833: LD_INT 116
23835: PUSH
23836: LD_INT 117
23838: PUSH
23839: LD_INT 118
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: ST_TO_ADDR
23865: GO 25104
23867: LD_INT 14
23869: DOUBLE
23870: EQUAL
23871: IFTRUE 23875
23873: GO 24099
23875: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23876: LD_ADDR_VAR 0 2
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: LD_INT 3
23889: PUSH
23890: LD_INT 4
23892: PUSH
23893: LD_INT 5
23895: PUSH
23896: LD_INT 6
23898: PUSH
23899: LD_INT 7
23901: PUSH
23902: LD_INT 8
23904: PUSH
23905: LD_INT 9
23907: PUSH
23908: LD_INT 10
23910: PUSH
23911: LD_INT 11
23913: PUSH
23914: LD_INT 12
23916: PUSH
23917: LD_INT 13
23919: PUSH
23920: LD_INT 14
23922: PUSH
23923: LD_INT 15
23925: PUSH
23926: LD_INT 16
23928: PUSH
23929: LD_INT 17
23931: PUSH
23932: LD_INT 18
23934: PUSH
23935: LD_INT 19
23937: PUSH
23938: LD_INT 20
23940: PUSH
23941: LD_INT 21
23943: PUSH
23944: LD_INT 22
23946: PUSH
23947: LD_INT 23
23949: PUSH
23950: LD_INT 24
23952: PUSH
23953: LD_INT 25
23955: PUSH
23956: LD_INT 26
23958: PUSH
23959: LD_INT 27
23961: PUSH
23962: LD_INT 28
23964: PUSH
23965: LD_INT 29
23967: PUSH
23968: LD_INT 30
23970: PUSH
23971: LD_INT 31
23973: PUSH
23974: LD_INT 32
23976: PUSH
23977: LD_INT 33
23979: PUSH
23980: LD_INT 34
23982: PUSH
23983: LD_INT 36
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 101
24025: PUSH
24026: LD_INT 102
24028: PUSH
24029: LD_INT 103
24031: PUSH
24032: LD_INT 104
24034: PUSH
24035: LD_INT 105
24037: PUSH
24038: LD_INT 106
24040: PUSH
24041: LD_INT 107
24043: PUSH
24044: LD_INT 108
24046: PUSH
24047: LD_INT 109
24049: PUSH
24050: LD_INT 110
24052: PUSH
24053: LD_INT 111
24055: PUSH
24056: LD_INT 112
24058: PUSH
24059: LD_INT 113
24061: PUSH
24062: LD_INT 114
24064: PUSH
24065: LD_INT 116
24067: PUSH
24068: LD_INT 117
24070: PUSH
24071: LD_INT 118
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: ST_TO_ADDR
24097: GO 25104
24099: LD_INT 15
24101: DOUBLE
24102: EQUAL
24103: IFTRUE 24107
24105: GO 24331
24107: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24108: LD_ADDR_VAR 0 2
24112: PUSH
24113: LD_INT 1
24115: PUSH
24116: LD_INT 2
24118: PUSH
24119: LD_INT 3
24121: PUSH
24122: LD_INT 4
24124: PUSH
24125: LD_INT 5
24127: PUSH
24128: LD_INT 6
24130: PUSH
24131: LD_INT 7
24133: PUSH
24134: LD_INT 8
24136: PUSH
24137: LD_INT 9
24139: PUSH
24140: LD_INT 10
24142: PUSH
24143: LD_INT 11
24145: PUSH
24146: LD_INT 12
24148: PUSH
24149: LD_INT 13
24151: PUSH
24152: LD_INT 14
24154: PUSH
24155: LD_INT 15
24157: PUSH
24158: LD_INT 16
24160: PUSH
24161: LD_INT 17
24163: PUSH
24164: LD_INT 18
24166: PUSH
24167: LD_INT 19
24169: PUSH
24170: LD_INT 20
24172: PUSH
24173: LD_INT 21
24175: PUSH
24176: LD_INT 22
24178: PUSH
24179: LD_INT 23
24181: PUSH
24182: LD_INT 24
24184: PUSH
24185: LD_INT 25
24187: PUSH
24188: LD_INT 26
24190: PUSH
24191: LD_INT 27
24193: PUSH
24194: LD_INT 28
24196: PUSH
24197: LD_INT 29
24199: PUSH
24200: LD_INT 30
24202: PUSH
24203: LD_INT 31
24205: PUSH
24206: LD_INT 32
24208: PUSH
24209: LD_INT 33
24211: PUSH
24212: LD_INT 34
24214: PUSH
24215: LD_INT 36
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 101
24257: PUSH
24258: LD_INT 102
24260: PUSH
24261: LD_INT 103
24263: PUSH
24264: LD_INT 104
24266: PUSH
24267: LD_INT 105
24269: PUSH
24270: LD_INT 106
24272: PUSH
24273: LD_INT 107
24275: PUSH
24276: LD_INT 108
24278: PUSH
24279: LD_INT 109
24281: PUSH
24282: LD_INT 110
24284: PUSH
24285: LD_INT 111
24287: PUSH
24288: LD_INT 112
24290: PUSH
24291: LD_INT 113
24293: PUSH
24294: LD_INT 114
24296: PUSH
24297: LD_INT 116
24299: PUSH
24300: LD_INT 117
24302: PUSH
24303: LD_INT 118
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: ST_TO_ADDR
24329: GO 25104
24331: LD_INT 16
24333: DOUBLE
24334: EQUAL
24335: IFTRUE 24339
24337: GO 24475
24339: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24340: LD_ADDR_VAR 0 2
24344: PUSH
24345: LD_INT 2
24347: PUSH
24348: LD_INT 4
24350: PUSH
24351: LD_INT 5
24353: PUSH
24354: LD_INT 7
24356: PUSH
24357: LD_INT 11
24359: PUSH
24360: LD_INT 12
24362: PUSH
24363: LD_INT 15
24365: PUSH
24366: LD_INT 16
24368: PUSH
24369: LD_INT 20
24371: PUSH
24372: LD_INT 21
24374: PUSH
24375: LD_INT 22
24377: PUSH
24378: LD_INT 23
24380: PUSH
24381: LD_INT 25
24383: PUSH
24384: LD_INT 26
24386: PUSH
24387: LD_INT 30
24389: PUSH
24390: LD_INT 31
24392: PUSH
24393: LD_INT 32
24395: PUSH
24396: LD_INT 33
24398: PUSH
24399: LD_INT 34
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 101
24425: PUSH
24426: LD_INT 102
24428: PUSH
24429: LD_INT 103
24431: PUSH
24432: LD_INT 106
24434: PUSH
24435: LD_INT 108
24437: PUSH
24438: LD_INT 112
24440: PUSH
24441: LD_INT 113
24443: PUSH
24444: LD_INT 114
24446: PUSH
24447: LD_INT 116
24449: PUSH
24450: LD_INT 117
24452: PUSH
24453: LD_INT 118
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: ST_TO_ADDR
24473: GO 25104
24475: LD_INT 17
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24707
24483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24484: LD_ADDR_VAR 0 2
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: LD_INT 3
24497: PUSH
24498: LD_INT 4
24500: PUSH
24501: LD_INT 5
24503: PUSH
24504: LD_INT 6
24506: PUSH
24507: LD_INT 7
24509: PUSH
24510: LD_INT 8
24512: PUSH
24513: LD_INT 9
24515: PUSH
24516: LD_INT 10
24518: PUSH
24519: LD_INT 11
24521: PUSH
24522: LD_INT 12
24524: PUSH
24525: LD_INT 13
24527: PUSH
24528: LD_INT 14
24530: PUSH
24531: LD_INT 15
24533: PUSH
24534: LD_INT 16
24536: PUSH
24537: LD_INT 17
24539: PUSH
24540: LD_INT 18
24542: PUSH
24543: LD_INT 19
24545: PUSH
24546: LD_INT 20
24548: PUSH
24549: LD_INT 21
24551: PUSH
24552: LD_INT 22
24554: PUSH
24555: LD_INT 23
24557: PUSH
24558: LD_INT 24
24560: PUSH
24561: LD_INT 25
24563: PUSH
24564: LD_INT 26
24566: PUSH
24567: LD_INT 27
24569: PUSH
24570: LD_INT 28
24572: PUSH
24573: LD_INT 29
24575: PUSH
24576: LD_INT 30
24578: PUSH
24579: LD_INT 31
24581: PUSH
24582: LD_INT 32
24584: PUSH
24585: LD_INT 33
24587: PUSH
24588: LD_INT 34
24590: PUSH
24591: LD_INT 36
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 101
24633: PUSH
24634: LD_INT 102
24636: PUSH
24637: LD_INT 103
24639: PUSH
24640: LD_INT 104
24642: PUSH
24643: LD_INT 105
24645: PUSH
24646: LD_INT 106
24648: PUSH
24649: LD_INT 107
24651: PUSH
24652: LD_INT 108
24654: PUSH
24655: LD_INT 109
24657: PUSH
24658: LD_INT 110
24660: PUSH
24661: LD_INT 111
24663: PUSH
24664: LD_INT 112
24666: PUSH
24667: LD_INT 113
24669: PUSH
24670: LD_INT 114
24672: PUSH
24673: LD_INT 116
24675: PUSH
24676: LD_INT 117
24678: PUSH
24679: LD_INT 118
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: ST_TO_ADDR
24705: GO 25104
24707: LD_INT 18
24709: DOUBLE
24710: EQUAL
24711: IFTRUE 24715
24713: GO 24863
24715: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24716: LD_ADDR_VAR 0 2
24720: PUSH
24721: LD_INT 2
24723: PUSH
24724: LD_INT 4
24726: PUSH
24727: LD_INT 5
24729: PUSH
24730: LD_INT 7
24732: PUSH
24733: LD_INT 11
24735: PUSH
24736: LD_INT 12
24738: PUSH
24739: LD_INT 15
24741: PUSH
24742: LD_INT 16
24744: PUSH
24745: LD_INT 20
24747: PUSH
24748: LD_INT 21
24750: PUSH
24751: LD_INT 22
24753: PUSH
24754: LD_INT 23
24756: PUSH
24757: LD_INT 25
24759: PUSH
24760: LD_INT 26
24762: PUSH
24763: LD_INT 30
24765: PUSH
24766: LD_INT 31
24768: PUSH
24769: LD_INT 32
24771: PUSH
24772: LD_INT 33
24774: PUSH
24775: LD_INT 34
24777: PUSH
24778: LD_INT 35
24780: PUSH
24781: LD_INT 36
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 101
24809: PUSH
24810: LD_INT 102
24812: PUSH
24813: LD_INT 103
24815: PUSH
24816: LD_INT 106
24818: PUSH
24819: LD_INT 108
24821: PUSH
24822: LD_INT 112
24824: PUSH
24825: LD_INT 113
24827: PUSH
24828: LD_INT 114
24830: PUSH
24831: LD_INT 115
24833: PUSH
24834: LD_INT 116
24836: PUSH
24837: LD_INT 117
24839: PUSH
24840: LD_INT 118
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: ST_TO_ADDR
24861: GO 25104
24863: LD_INT 19
24865: DOUBLE
24866: EQUAL
24867: IFTRUE 24871
24869: GO 25103
24871: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24872: LD_ADDR_VAR 0 2
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: LD_INT 3
24885: PUSH
24886: LD_INT 4
24888: PUSH
24889: LD_INT 5
24891: PUSH
24892: LD_INT 6
24894: PUSH
24895: LD_INT 7
24897: PUSH
24898: LD_INT 8
24900: PUSH
24901: LD_INT 9
24903: PUSH
24904: LD_INT 10
24906: PUSH
24907: LD_INT 11
24909: PUSH
24910: LD_INT 12
24912: PUSH
24913: LD_INT 13
24915: PUSH
24916: LD_INT 14
24918: PUSH
24919: LD_INT 15
24921: PUSH
24922: LD_INT 16
24924: PUSH
24925: LD_INT 17
24927: PUSH
24928: LD_INT 18
24930: PUSH
24931: LD_INT 19
24933: PUSH
24934: LD_INT 20
24936: PUSH
24937: LD_INT 21
24939: PUSH
24940: LD_INT 22
24942: PUSH
24943: LD_INT 23
24945: PUSH
24946: LD_INT 24
24948: PUSH
24949: LD_INT 25
24951: PUSH
24952: LD_INT 26
24954: PUSH
24955: LD_INT 27
24957: PUSH
24958: LD_INT 28
24960: PUSH
24961: LD_INT 29
24963: PUSH
24964: LD_INT 30
24966: PUSH
24967: LD_INT 31
24969: PUSH
24970: LD_INT 32
24972: PUSH
24973: LD_INT 33
24975: PUSH
24976: LD_INT 34
24978: PUSH
24979: LD_INT 35
24981: PUSH
24982: LD_INT 36
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 101
25025: PUSH
25026: LD_INT 102
25028: PUSH
25029: LD_INT 103
25031: PUSH
25032: LD_INT 104
25034: PUSH
25035: LD_INT 105
25037: PUSH
25038: LD_INT 106
25040: PUSH
25041: LD_INT 107
25043: PUSH
25044: LD_INT 108
25046: PUSH
25047: LD_INT 109
25049: PUSH
25050: LD_INT 110
25052: PUSH
25053: LD_INT 111
25055: PUSH
25056: LD_INT 112
25058: PUSH
25059: LD_INT 113
25061: PUSH
25062: LD_INT 114
25064: PUSH
25065: LD_INT 115
25067: PUSH
25068: LD_INT 116
25070: PUSH
25071: LD_INT 117
25073: PUSH
25074: LD_INT 118
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: ST_TO_ADDR
25101: GO 25104
25103: POP
// end else
25104: GO 25335
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25106: LD_ADDR_VAR 0 2
25110: PUSH
25111: LD_INT 1
25113: PUSH
25114: LD_INT 2
25116: PUSH
25117: LD_INT 3
25119: PUSH
25120: LD_INT 4
25122: PUSH
25123: LD_INT 5
25125: PUSH
25126: LD_INT 6
25128: PUSH
25129: LD_INT 7
25131: PUSH
25132: LD_INT 8
25134: PUSH
25135: LD_INT 9
25137: PUSH
25138: LD_INT 10
25140: PUSH
25141: LD_INT 11
25143: PUSH
25144: LD_INT 12
25146: PUSH
25147: LD_INT 13
25149: PUSH
25150: LD_INT 14
25152: PUSH
25153: LD_INT 15
25155: PUSH
25156: LD_INT 16
25158: PUSH
25159: LD_INT 17
25161: PUSH
25162: LD_INT 18
25164: PUSH
25165: LD_INT 19
25167: PUSH
25168: LD_INT 20
25170: PUSH
25171: LD_INT 21
25173: PUSH
25174: LD_INT 22
25176: PUSH
25177: LD_INT 23
25179: PUSH
25180: LD_INT 24
25182: PUSH
25183: LD_INT 25
25185: PUSH
25186: LD_INT 26
25188: PUSH
25189: LD_INT 27
25191: PUSH
25192: LD_INT 28
25194: PUSH
25195: LD_INT 29
25197: PUSH
25198: LD_INT 30
25200: PUSH
25201: LD_INT 31
25203: PUSH
25204: LD_INT 32
25206: PUSH
25207: LD_INT 33
25209: PUSH
25210: LD_INT 34
25212: PUSH
25213: LD_INT 35
25215: PUSH
25216: LD_INT 36
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 101
25259: PUSH
25260: LD_INT 102
25262: PUSH
25263: LD_INT 103
25265: PUSH
25266: LD_INT 104
25268: PUSH
25269: LD_INT 105
25271: PUSH
25272: LD_INT 106
25274: PUSH
25275: LD_INT 107
25277: PUSH
25278: LD_INT 108
25280: PUSH
25281: LD_INT 109
25283: PUSH
25284: LD_INT 110
25286: PUSH
25287: LD_INT 111
25289: PUSH
25290: LD_INT 112
25292: PUSH
25293: LD_INT 113
25295: PUSH
25296: LD_INT 114
25298: PUSH
25299: LD_INT 115
25301: PUSH
25302: LD_INT 116
25304: PUSH
25305: LD_INT 117
25307: PUSH
25308: LD_INT 118
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: ST_TO_ADDR
// if result then
25335: LD_VAR 0 2
25339: IFFALSE 26125
// begin normal :=  ;
25341: LD_ADDR_VAR 0 5
25345: PUSH
25346: LD_STRING 
25348: ST_TO_ADDR
// hardcore :=  ;
25349: LD_ADDR_VAR 0 6
25353: PUSH
25354: LD_STRING 
25356: ST_TO_ADDR
// active :=  ;
25357: LD_ADDR_VAR 0 7
25361: PUSH
25362: LD_STRING 
25364: ST_TO_ADDR
// for i = 1 to normalCounter do
25365: LD_ADDR_VAR 0 8
25369: PUSH
25370: DOUBLE
25371: LD_INT 1
25373: DEC
25374: ST_TO_ADDR
25375: LD_EXP 53
25379: PUSH
25380: FOR_TO
25381: IFFALSE 25482
// begin tmp := 0 ;
25383: LD_ADDR_VAR 0 3
25387: PUSH
25388: LD_STRING 0
25390: ST_TO_ADDR
// if result [ 1 ] then
25391: LD_VAR 0 2
25395: PUSH
25396: LD_INT 1
25398: ARRAY
25399: IFFALSE 25464
// if result [ 1 ] [ 1 ] = i then
25401: LD_VAR 0 2
25405: PUSH
25406: LD_INT 1
25408: ARRAY
25409: PUSH
25410: LD_INT 1
25412: ARRAY
25413: PUSH
25414: LD_VAR 0 8
25418: EQUAL
25419: IFFALSE 25464
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25421: LD_ADDR_VAR 0 2
25425: PUSH
25426: LD_VAR 0 2
25430: PPUSH
25431: LD_INT 1
25433: PPUSH
25434: LD_VAR 0 2
25438: PUSH
25439: LD_INT 1
25441: ARRAY
25442: PPUSH
25443: LD_INT 1
25445: PPUSH
25446: CALL_OW 3
25450: PPUSH
25451: CALL_OW 1
25455: ST_TO_ADDR
// tmp := 1 ;
25456: LD_ADDR_VAR 0 3
25460: PUSH
25461: LD_STRING 1
25463: ST_TO_ADDR
// end ; normal := normal & tmp ;
25464: LD_ADDR_VAR 0 5
25468: PUSH
25469: LD_VAR 0 5
25473: PUSH
25474: LD_VAR 0 3
25478: STR
25479: ST_TO_ADDR
// end ;
25480: GO 25380
25482: POP
25483: POP
// for i = 1 to hardcoreCounter do
25484: LD_ADDR_VAR 0 8
25488: PUSH
25489: DOUBLE
25490: LD_INT 1
25492: DEC
25493: ST_TO_ADDR
25494: LD_EXP 54
25498: PUSH
25499: FOR_TO
25500: IFFALSE 25605
// begin tmp := 0 ;
25502: LD_ADDR_VAR 0 3
25506: PUSH
25507: LD_STRING 0
25509: ST_TO_ADDR
// if result [ 2 ] then
25510: LD_VAR 0 2
25514: PUSH
25515: LD_INT 2
25517: ARRAY
25518: IFFALSE 25587
// if result [ 2 ] [ 1 ] = 100 + i then
25520: LD_VAR 0 2
25524: PUSH
25525: LD_INT 2
25527: ARRAY
25528: PUSH
25529: LD_INT 1
25531: ARRAY
25532: PUSH
25533: LD_INT 100
25535: PUSH
25536: LD_VAR 0 8
25540: PLUS
25541: EQUAL
25542: IFFALSE 25587
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25544: LD_ADDR_VAR 0 2
25548: PUSH
25549: LD_VAR 0 2
25553: PPUSH
25554: LD_INT 2
25556: PPUSH
25557: LD_VAR 0 2
25561: PUSH
25562: LD_INT 2
25564: ARRAY
25565: PPUSH
25566: LD_INT 1
25568: PPUSH
25569: CALL_OW 3
25573: PPUSH
25574: CALL_OW 1
25578: ST_TO_ADDR
// tmp := 1 ;
25579: LD_ADDR_VAR 0 3
25583: PUSH
25584: LD_STRING 1
25586: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25587: LD_ADDR_VAR 0 6
25591: PUSH
25592: LD_VAR 0 6
25596: PUSH
25597: LD_VAR 0 3
25601: STR
25602: ST_TO_ADDR
// end ;
25603: GO 25499
25605: POP
25606: POP
// if isGameLoad then
25607: LD_VAR 0 1
25611: IFFALSE 26086
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25613: LD_ADDR_VAR 0 4
25617: PUSH
25618: LD_EXP 57
25622: PUSH
25623: LD_EXP 56
25627: PUSH
25628: LD_EXP 58
25632: PUSH
25633: LD_EXP 55
25637: PUSH
25638: LD_EXP 59
25642: PUSH
25643: LD_EXP 60
25647: PUSH
25648: LD_EXP 61
25652: PUSH
25653: LD_EXP 62
25657: PUSH
25658: LD_EXP 63
25662: PUSH
25663: LD_EXP 64
25667: PUSH
25668: LD_EXP 65
25672: PUSH
25673: LD_EXP 66
25677: PUSH
25678: LD_EXP 67
25682: PUSH
25683: LD_EXP 68
25687: PUSH
25688: LD_EXP 76
25692: PUSH
25693: LD_EXP 77
25697: PUSH
25698: LD_EXP 78
25702: PUSH
25703: LD_EXP 79
25707: PUSH
25708: LD_EXP 81
25712: PUSH
25713: LD_EXP 82
25717: PUSH
25718: LD_EXP 83
25722: PUSH
25723: LD_EXP 86
25727: PUSH
25728: LD_EXP 88
25732: PUSH
25733: LD_EXP 89
25737: PUSH
25738: LD_EXP 90
25742: PUSH
25743: LD_EXP 92
25747: PUSH
25748: LD_EXP 93
25752: PUSH
25753: LD_EXP 96
25757: PUSH
25758: LD_EXP 97
25762: PUSH
25763: LD_EXP 98
25767: PUSH
25768: LD_EXP 99
25772: PUSH
25773: LD_EXP 100
25777: PUSH
25778: LD_EXP 101
25782: PUSH
25783: LD_EXP 102
25787: PUSH
25788: LD_EXP 103
25792: PUSH
25793: LD_EXP 104
25797: PUSH
25798: LD_EXP 69
25802: PUSH
25803: LD_EXP 70
25807: PUSH
25808: LD_EXP 73
25812: PUSH
25813: LD_EXP 74
25817: PUSH
25818: LD_EXP 75
25822: PUSH
25823: LD_EXP 71
25827: PUSH
25828: LD_EXP 72
25832: PUSH
25833: LD_EXP 80
25837: PUSH
25838: LD_EXP 84
25842: PUSH
25843: LD_EXP 85
25847: PUSH
25848: LD_EXP 87
25852: PUSH
25853: LD_EXP 91
25857: PUSH
25858: LD_EXP 94
25862: PUSH
25863: LD_EXP 95
25867: PUSH
25868: LD_EXP 105
25872: PUSH
25873: LD_EXP 106
25877: PUSH
25878: LD_EXP 107
25882: PUSH
25883: LD_EXP 108
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: ST_TO_ADDR
// tmp :=  ;
25944: LD_ADDR_VAR 0 3
25948: PUSH
25949: LD_STRING 
25951: ST_TO_ADDR
// for i = 1 to normalCounter do
25952: LD_ADDR_VAR 0 8
25956: PUSH
25957: DOUBLE
25958: LD_INT 1
25960: DEC
25961: ST_TO_ADDR
25962: LD_EXP 53
25966: PUSH
25967: FOR_TO
25968: IFFALSE 26004
// begin if flags [ i ] then
25970: LD_VAR 0 4
25974: PUSH
25975: LD_VAR 0 8
25979: ARRAY
25980: IFFALSE 26002
// tmp := tmp & i & ; ;
25982: LD_ADDR_VAR 0 3
25986: PUSH
25987: LD_VAR 0 3
25991: PUSH
25992: LD_VAR 0 8
25996: STR
25997: PUSH
25998: LD_STRING ;
26000: STR
26001: ST_TO_ADDR
// end ;
26002: GO 25967
26004: POP
26005: POP
// for i = 1 to hardcoreCounter do
26006: LD_ADDR_VAR 0 8
26010: PUSH
26011: DOUBLE
26012: LD_INT 1
26014: DEC
26015: ST_TO_ADDR
26016: LD_EXP 54
26020: PUSH
26021: FOR_TO
26022: IFFALSE 26068
// begin if flags [ normalCounter + i ] then
26024: LD_VAR 0 4
26028: PUSH
26029: LD_EXP 53
26033: PUSH
26034: LD_VAR 0 8
26038: PLUS
26039: ARRAY
26040: IFFALSE 26066
// tmp := tmp & ( 100 + i ) & ; ;
26042: LD_ADDR_VAR 0 3
26046: PUSH
26047: LD_VAR 0 3
26051: PUSH
26052: LD_INT 100
26054: PUSH
26055: LD_VAR 0 8
26059: PLUS
26060: STR
26061: PUSH
26062: LD_STRING ;
26064: STR
26065: ST_TO_ADDR
// end ;
26066: GO 26021
26068: POP
26069: POP
// if tmp then
26070: LD_VAR 0 3
26074: IFFALSE 26086
// active := tmp ;
26076: LD_ADDR_VAR 0 7
26080: PUSH
26081: LD_VAR 0 3
26085: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26086: LD_STRING getStreamItemsFromMission("
26088: PUSH
26089: LD_VAR 0 5
26093: STR
26094: PUSH
26095: LD_STRING ","
26097: STR
26098: PUSH
26099: LD_VAR 0 6
26103: STR
26104: PUSH
26105: LD_STRING ","
26107: STR
26108: PUSH
26109: LD_VAR 0 7
26113: STR
26114: PUSH
26115: LD_STRING ")
26117: STR
26118: PPUSH
26119: CALL_OW 559
// end else
26123: GO 26132
// ToLua ( getStreamItemsFromMission("","","") ) ;
26125: LD_STRING getStreamItemsFromMission("","","")
26127: PPUSH
26128: CALL_OW 559
// end ;
26132: LD_VAR 0 2
26136: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26137: LD_EXP 52
26141: PUSH
26142: LD_EXP 57
26146: AND
26147: IFFALSE 26271
26149: GO 26151
26151: DISABLE
26152: LD_INT 0
26154: PPUSH
26155: PPUSH
// begin enable ;
26156: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26157: LD_ADDR_VAR 0 2
26161: PUSH
26162: LD_INT 22
26164: PUSH
26165: LD_OWVAR 2
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 2
26176: PUSH
26177: LD_INT 34
26179: PUSH
26180: LD_INT 7
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 34
26189: PUSH
26190: LD_INT 45
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 34
26199: PUSH
26200: LD_INT 28
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 34
26209: PUSH
26210: LD_INT 47
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PPUSH
26228: CALL_OW 69
26232: ST_TO_ADDR
// if not tmp then
26233: LD_VAR 0 2
26237: NOT
26238: IFFALSE 26242
// exit ;
26240: GO 26271
// for i in tmp do
26242: LD_ADDR_VAR 0 1
26246: PUSH
26247: LD_VAR 0 2
26251: PUSH
26252: FOR_IN
26253: IFFALSE 26269
// begin SetLives ( i , 0 ) ;
26255: LD_VAR 0 1
26259: PPUSH
26260: LD_INT 0
26262: PPUSH
26263: CALL_OW 234
// end ;
26267: GO 26252
26269: POP
26270: POP
// end ;
26271: PPOPN 2
26273: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26274: LD_EXP 52
26278: PUSH
26279: LD_EXP 58
26283: AND
26284: IFFALSE 26368
26286: GO 26288
26288: DISABLE
26289: LD_INT 0
26291: PPUSH
26292: PPUSH
// begin enable ;
26293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26294: LD_ADDR_VAR 0 2
26298: PUSH
26299: LD_INT 22
26301: PUSH
26302: LD_OWVAR 2
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 32
26313: PUSH
26314: LD_INT 3
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PPUSH
26325: CALL_OW 69
26329: ST_TO_ADDR
// if not tmp then
26330: LD_VAR 0 2
26334: NOT
26335: IFFALSE 26339
// exit ;
26337: GO 26368
// for i in tmp do
26339: LD_ADDR_VAR 0 1
26343: PUSH
26344: LD_VAR 0 2
26348: PUSH
26349: FOR_IN
26350: IFFALSE 26366
// begin SetLives ( i , 0 ) ;
26352: LD_VAR 0 1
26356: PPUSH
26357: LD_INT 0
26359: PPUSH
26360: CALL_OW 234
// end ;
26364: GO 26349
26366: POP
26367: POP
// end ;
26368: PPOPN 2
26370: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26371: LD_EXP 52
26375: PUSH
26376: LD_EXP 55
26380: AND
26381: IFFALSE 26474
26383: GO 26385
26385: DISABLE
26386: LD_INT 0
26388: PPUSH
// begin enable ;
26389: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26390: LD_ADDR_VAR 0 1
26394: PUSH
26395: LD_INT 22
26397: PUSH
26398: LD_OWVAR 2
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: LD_INT 25
26412: PUSH
26413: LD_INT 5
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 25
26422: PUSH
26423: LD_INT 9
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 25
26432: PUSH
26433: LD_INT 8
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PPUSH
26450: CALL_OW 69
26454: PUSH
26455: FOR_IN
26456: IFFALSE 26472
// begin SetClass ( i , 1 ) ;
26458: LD_VAR 0 1
26462: PPUSH
26463: LD_INT 1
26465: PPUSH
26466: CALL_OW 336
// end ;
26470: GO 26455
26472: POP
26473: POP
// end ;
26474: PPOPN 1
26476: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26477: LD_EXP 52
26481: PUSH
26482: LD_EXP 56
26486: AND
26487: PUSH
26488: LD_OWVAR 65
26492: PUSH
26493: LD_INT 7
26495: LESS
26496: AND
26497: IFFALSE 26511
26499: GO 26501
26501: DISABLE
// begin enable ;
26502: ENABLE
// game_speed := 7 ;
26503: LD_ADDR_OWVAR 65
26507: PUSH
26508: LD_INT 7
26510: ST_TO_ADDR
// end ;
26511: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26512: LD_EXP 52
26516: PUSH
26517: LD_EXP 59
26521: AND
26522: IFFALSE 26724
26524: GO 26526
26526: DISABLE
26527: LD_INT 0
26529: PPUSH
26530: PPUSH
26531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26532: LD_ADDR_VAR 0 3
26536: PUSH
26537: LD_INT 81
26539: PUSH
26540: LD_OWVAR 2
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 21
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PPUSH
26563: CALL_OW 69
26567: ST_TO_ADDR
// if not tmp then
26568: LD_VAR 0 3
26572: NOT
26573: IFFALSE 26577
// exit ;
26575: GO 26724
// if tmp > 5 then
26577: LD_VAR 0 3
26581: PUSH
26582: LD_INT 5
26584: GREATER
26585: IFFALSE 26597
// k := 5 else
26587: LD_ADDR_VAR 0 2
26591: PUSH
26592: LD_INT 5
26594: ST_TO_ADDR
26595: GO 26607
// k := tmp ;
26597: LD_ADDR_VAR 0 2
26601: PUSH
26602: LD_VAR 0 3
26606: ST_TO_ADDR
// for i := 1 to k do
26607: LD_ADDR_VAR 0 1
26611: PUSH
26612: DOUBLE
26613: LD_INT 1
26615: DEC
26616: ST_TO_ADDR
26617: LD_VAR 0 2
26621: PUSH
26622: FOR_TO
26623: IFFALSE 26722
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26625: LD_VAR 0 3
26629: PUSH
26630: LD_VAR 0 1
26634: ARRAY
26635: PPUSH
26636: LD_VAR 0 1
26640: PUSH
26641: LD_INT 4
26643: MOD
26644: PUSH
26645: LD_INT 1
26647: PLUS
26648: PPUSH
26649: CALL_OW 259
26653: PUSH
26654: LD_INT 10
26656: LESS
26657: IFFALSE 26720
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26659: LD_VAR 0 3
26663: PUSH
26664: LD_VAR 0 1
26668: ARRAY
26669: PPUSH
26670: LD_VAR 0 1
26674: PUSH
26675: LD_INT 4
26677: MOD
26678: PUSH
26679: LD_INT 1
26681: PLUS
26682: PPUSH
26683: LD_VAR 0 3
26687: PUSH
26688: LD_VAR 0 1
26692: ARRAY
26693: PPUSH
26694: LD_VAR 0 1
26698: PUSH
26699: LD_INT 4
26701: MOD
26702: PUSH
26703: LD_INT 1
26705: PLUS
26706: PPUSH
26707: CALL_OW 259
26711: PUSH
26712: LD_INT 1
26714: PLUS
26715: PPUSH
26716: CALL_OW 237
26720: GO 26622
26722: POP
26723: POP
// end ;
26724: PPOPN 3
26726: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26727: LD_EXP 52
26731: PUSH
26732: LD_EXP 60
26736: AND
26737: IFFALSE 26757
26739: GO 26741
26741: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26742: LD_INT 4
26744: PPUSH
26745: LD_OWVAR 2
26749: PPUSH
26750: LD_INT 0
26752: PPUSH
26753: CALL_OW 324
26757: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26758: LD_EXP 52
26762: PUSH
26763: LD_EXP 89
26767: AND
26768: IFFALSE 26788
26770: GO 26772
26772: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26773: LD_INT 19
26775: PPUSH
26776: LD_OWVAR 2
26780: PPUSH
26781: LD_INT 0
26783: PPUSH
26784: CALL_OW 324
26788: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26789: LD_EXP 52
26793: PUSH
26794: LD_EXP 61
26798: AND
26799: IFFALSE 26901
26801: GO 26803
26803: DISABLE
26804: LD_INT 0
26806: PPUSH
26807: PPUSH
// begin enable ;
26808: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26809: LD_ADDR_VAR 0 2
26813: PUSH
26814: LD_INT 22
26816: PUSH
26817: LD_OWVAR 2
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: LD_INT 34
26831: PUSH
26832: LD_INT 11
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 34
26841: PUSH
26842: LD_INT 30
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: LIST
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PPUSH
26858: CALL_OW 69
26862: ST_TO_ADDR
// if not tmp then
26863: LD_VAR 0 2
26867: NOT
26868: IFFALSE 26872
// exit ;
26870: GO 26901
// for i in tmp do
26872: LD_ADDR_VAR 0 1
26876: PUSH
26877: LD_VAR 0 2
26881: PUSH
26882: FOR_IN
26883: IFFALSE 26899
// begin SetLives ( i , 0 ) ;
26885: LD_VAR 0 1
26889: PPUSH
26890: LD_INT 0
26892: PPUSH
26893: CALL_OW 234
// end ;
26897: GO 26882
26899: POP
26900: POP
// end ;
26901: PPOPN 2
26903: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26904: LD_EXP 52
26908: PUSH
26909: LD_EXP 62
26913: AND
26914: IFFALSE 26934
26916: GO 26918
26918: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26919: LD_INT 32
26921: PPUSH
26922: LD_OWVAR 2
26926: PPUSH
26927: LD_INT 0
26929: PPUSH
26930: CALL_OW 324
26934: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26935: LD_EXP 52
26939: PUSH
26940: LD_EXP 63
26944: AND
26945: IFFALSE 27126
26947: GO 26949
26949: DISABLE
26950: LD_INT 0
26952: PPUSH
26953: PPUSH
26954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26955: LD_ADDR_VAR 0 2
26959: PUSH
26960: LD_INT 22
26962: PUSH
26963: LD_OWVAR 2
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 33
26974: PUSH
26975: LD_INT 3
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PPUSH
26986: CALL_OW 69
26990: ST_TO_ADDR
// if not tmp then
26991: LD_VAR 0 2
26995: NOT
26996: IFFALSE 27000
// exit ;
26998: GO 27126
// side := 0 ;
27000: LD_ADDR_VAR 0 3
27004: PUSH
27005: LD_INT 0
27007: ST_TO_ADDR
// for i := 1 to 8 do
27008: LD_ADDR_VAR 0 1
27012: PUSH
27013: DOUBLE
27014: LD_INT 1
27016: DEC
27017: ST_TO_ADDR
27018: LD_INT 8
27020: PUSH
27021: FOR_TO
27022: IFFALSE 27070
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27024: LD_OWVAR 2
27028: PUSH
27029: LD_VAR 0 1
27033: NONEQUAL
27034: PUSH
27035: LD_OWVAR 2
27039: PPUSH
27040: LD_VAR 0 1
27044: PPUSH
27045: CALL_OW 81
27049: PUSH
27050: LD_INT 2
27052: EQUAL
27053: AND
27054: IFFALSE 27068
// begin side := i ;
27056: LD_ADDR_VAR 0 3
27060: PUSH
27061: LD_VAR 0 1
27065: ST_TO_ADDR
// break ;
27066: GO 27070
// end ;
27068: GO 27021
27070: POP
27071: POP
// if not side then
27072: LD_VAR 0 3
27076: NOT
27077: IFFALSE 27081
// exit ;
27079: GO 27126
// for i := 1 to tmp do
27081: LD_ADDR_VAR 0 1
27085: PUSH
27086: DOUBLE
27087: LD_INT 1
27089: DEC
27090: ST_TO_ADDR
27091: LD_VAR 0 2
27095: PUSH
27096: FOR_TO
27097: IFFALSE 27124
// if Prob ( 60 ) then
27099: LD_INT 60
27101: PPUSH
27102: CALL_OW 13
27106: IFFALSE 27122
// SetSide ( i , side ) ;
27108: LD_VAR 0 1
27112: PPUSH
27113: LD_VAR 0 3
27117: PPUSH
27118: CALL_OW 235
27122: GO 27096
27124: POP
27125: POP
// end ;
27126: PPOPN 3
27128: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27129: LD_EXP 52
27133: PUSH
27134: LD_EXP 65
27138: AND
27139: IFFALSE 27258
27141: GO 27143
27143: DISABLE
27144: LD_INT 0
27146: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27147: LD_ADDR_VAR 0 1
27151: PUSH
27152: LD_INT 22
27154: PUSH
27155: LD_OWVAR 2
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 21
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 3
27176: PUSH
27177: LD_INT 23
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: LIST
27195: PPUSH
27196: CALL_OW 69
27200: PUSH
27201: FOR_IN
27202: IFFALSE 27256
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27204: LD_VAR 0 1
27208: PPUSH
27209: CALL_OW 257
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: LD_INT 2
27219: PUSH
27220: LD_INT 3
27222: PUSH
27223: LD_INT 4
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: IN
27232: IFFALSE 27254
// SetClass ( un , rand ( 1 , 4 ) ) ;
27234: LD_VAR 0 1
27238: PPUSH
27239: LD_INT 1
27241: PPUSH
27242: LD_INT 4
27244: PPUSH
27245: CALL_OW 12
27249: PPUSH
27250: CALL_OW 336
27254: GO 27201
27256: POP
27257: POP
// end ;
27258: PPOPN 1
27260: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27261: LD_EXP 52
27265: PUSH
27266: LD_EXP 64
27270: AND
27271: IFFALSE 27350
27273: GO 27275
27275: DISABLE
27276: LD_INT 0
27278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27279: LD_ADDR_VAR 0 1
27283: PUSH
27284: LD_INT 22
27286: PUSH
27287: LD_OWVAR 2
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 21
27298: PUSH
27299: LD_INT 3
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PPUSH
27310: CALL_OW 69
27314: ST_TO_ADDR
// if not tmp then
27315: LD_VAR 0 1
27319: NOT
27320: IFFALSE 27324
// exit ;
27322: GO 27350
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27324: LD_VAR 0 1
27328: PUSH
27329: LD_INT 1
27331: PPUSH
27332: LD_VAR 0 1
27336: PPUSH
27337: CALL_OW 12
27341: ARRAY
27342: PPUSH
27343: LD_INT 100
27345: PPUSH
27346: CALL_OW 234
// end ;
27350: PPOPN 1
27352: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27353: LD_EXP 52
27357: PUSH
27358: LD_EXP 66
27362: AND
27363: IFFALSE 27461
27365: GO 27367
27367: DISABLE
27368: LD_INT 0
27370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27371: LD_ADDR_VAR 0 1
27375: PUSH
27376: LD_INT 22
27378: PUSH
27379: LD_OWVAR 2
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 21
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PPUSH
27402: CALL_OW 69
27406: ST_TO_ADDR
// if not tmp then
27407: LD_VAR 0 1
27411: NOT
27412: IFFALSE 27416
// exit ;
27414: GO 27461
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27416: LD_VAR 0 1
27420: PUSH
27421: LD_INT 1
27423: PPUSH
27424: LD_VAR 0 1
27428: PPUSH
27429: CALL_OW 12
27433: ARRAY
27434: PPUSH
27435: LD_INT 1
27437: PPUSH
27438: LD_INT 4
27440: PPUSH
27441: CALL_OW 12
27445: PPUSH
27446: LD_INT 3000
27448: PPUSH
27449: LD_INT 9000
27451: PPUSH
27452: CALL_OW 12
27456: PPUSH
27457: CALL_OW 492
// end ;
27461: PPOPN 1
27463: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27464: LD_EXP 52
27468: PUSH
27469: LD_EXP 67
27473: AND
27474: IFFALSE 27494
27476: GO 27478
27478: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27479: LD_INT 1
27481: PPUSH
27482: LD_OWVAR 2
27486: PPUSH
27487: LD_INT 0
27489: PPUSH
27490: CALL_OW 324
27494: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27495: LD_EXP 52
27499: PUSH
27500: LD_EXP 68
27504: AND
27505: IFFALSE 27588
27507: GO 27509
27509: DISABLE
27510: LD_INT 0
27512: PPUSH
27513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27514: LD_ADDR_VAR 0 2
27518: PUSH
27519: LD_INT 22
27521: PUSH
27522: LD_OWVAR 2
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 21
27533: PUSH
27534: LD_INT 3
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PPUSH
27545: CALL_OW 69
27549: ST_TO_ADDR
// if not tmp then
27550: LD_VAR 0 2
27554: NOT
27555: IFFALSE 27559
// exit ;
27557: GO 27588
// for i in tmp do
27559: LD_ADDR_VAR 0 1
27563: PUSH
27564: LD_VAR 0 2
27568: PUSH
27569: FOR_IN
27570: IFFALSE 27586
// SetBLevel ( i , 10 ) ;
27572: LD_VAR 0 1
27576: PPUSH
27577: LD_INT 10
27579: PPUSH
27580: CALL_OW 241
27584: GO 27569
27586: POP
27587: POP
// end ;
27588: PPOPN 2
27590: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27591: LD_EXP 52
27595: PUSH
27596: LD_EXP 69
27600: AND
27601: IFFALSE 27712
27603: GO 27605
27605: DISABLE
27606: LD_INT 0
27608: PPUSH
27609: PPUSH
27610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27611: LD_ADDR_VAR 0 3
27615: PUSH
27616: LD_INT 22
27618: PUSH
27619: LD_OWVAR 2
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 25
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PPUSH
27642: CALL_OW 69
27646: ST_TO_ADDR
// if not tmp then
27647: LD_VAR 0 3
27651: NOT
27652: IFFALSE 27656
// exit ;
27654: GO 27712
// un := tmp [ rand ( 1 , tmp ) ] ;
27656: LD_ADDR_VAR 0 2
27660: PUSH
27661: LD_VAR 0 3
27665: PUSH
27666: LD_INT 1
27668: PPUSH
27669: LD_VAR 0 3
27673: PPUSH
27674: CALL_OW 12
27678: ARRAY
27679: ST_TO_ADDR
// if Crawls ( un ) then
27680: LD_VAR 0 2
27684: PPUSH
27685: CALL_OW 318
27689: IFFALSE 27700
// ComWalk ( un ) ;
27691: LD_VAR 0 2
27695: PPUSH
27696: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27700: LD_VAR 0 2
27704: PPUSH
27705: LD_INT 5
27707: PPUSH
27708: CALL_OW 336
// end ;
27712: PPOPN 3
27714: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27715: LD_EXP 52
27719: PUSH
27720: LD_EXP 70
27724: AND
27725: PUSH
27726: LD_OWVAR 67
27730: PUSH
27731: LD_INT 4
27733: LESS
27734: AND
27735: IFFALSE 27754
27737: GO 27739
27739: DISABLE
// begin Difficulty := Difficulty + 1 ;
27740: LD_ADDR_OWVAR 67
27744: PUSH
27745: LD_OWVAR 67
27749: PUSH
27750: LD_INT 1
27752: PLUS
27753: ST_TO_ADDR
// end ;
27754: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27755: LD_EXP 52
27759: PUSH
27760: LD_EXP 71
27764: AND
27765: IFFALSE 27868
27767: GO 27769
27769: DISABLE
27770: LD_INT 0
27772: PPUSH
// begin for i := 1 to 5 do
27773: LD_ADDR_VAR 0 1
27777: PUSH
27778: DOUBLE
27779: LD_INT 1
27781: DEC
27782: ST_TO_ADDR
27783: LD_INT 5
27785: PUSH
27786: FOR_TO
27787: IFFALSE 27866
// begin uc_nation := nation_nature ;
27789: LD_ADDR_OWVAR 21
27793: PUSH
27794: LD_INT 0
27796: ST_TO_ADDR
// uc_side := 0 ;
27797: LD_ADDR_OWVAR 20
27801: PUSH
27802: LD_INT 0
27804: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27805: LD_ADDR_OWVAR 29
27809: PUSH
27810: LD_INT 12
27812: PUSH
27813: LD_INT 12
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// hc_agressivity := 20 ;
27820: LD_ADDR_OWVAR 35
27824: PUSH
27825: LD_INT 20
27827: ST_TO_ADDR
// hc_class := class_tiger ;
27828: LD_ADDR_OWVAR 28
27832: PUSH
27833: LD_INT 14
27835: ST_TO_ADDR
// hc_gallery :=  ;
27836: LD_ADDR_OWVAR 33
27840: PUSH
27841: LD_STRING 
27843: ST_TO_ADDR
// hc_name :=  ;
27844: LD_ADDR_OWVAR 26
27848: PUSH
27849: LD_STRING 
27851: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27852: CALL_OW 44
27856: PPUSH
27857: LD_INT 0
27859: PPUSH
27860: CALL_OW 51
// end ;
27864: GO 27786
27866: POP
27867: POP
// end ;
27868: PPOPN 1
27870: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27871: LD_EXP 52
27875: PUSH
27876: LD_EXP 72
27880: AND
27881: IFFALSE 27890
27883: GO 27885
27885: DISABLE
// StreamSibBomb ;
27886: CALL 27891 0 0
27890: END
// export function StreamSibBomb ; var i , x , y ; begin
27891: LD_INT 0
27893: PPUSH
27894: PPUSH
27895: PPUSH
27896: PPUSH
// result := false ;
27897: LD_ADDR_VAR 0 1
27901: PUSH
27902: LD_INT 0
27904: ST_TO_ADDR
// for i := 1 to 16 do
27905: LD_ADDR_VAR 0 2
27909: PUSH
27910: DOUBLE
27911: LD_INT 1
27913: DEC
27914: ST_TO_ADDR
27915: LD_INT 16
27917: PUSH
27918: FOR_TO
27919: IFFALSE 28118
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27921: LD_ADDR_VAR 0 3
27925: PUSH
27926: LD_INT 10
27928: PUSH
27929: LD_INT 20
27931: PUSH
27932: LD_INT 30
27934: PUSH
27935: LD_INT 40
27937: PUSH
27938: LD_INT 50
27940: PUSH
27941: LD_INT 60
27943: PUSH
27944: LD_INT 70
27946: PUSH
27947: LD_INT 80
27949: PUSH
27950: LD_INT 90
27952: PUSH
27953: LD_INT 100
27955: PUSH
27956: LD_INT 110
27958: PUSH
27959: LD_INT 120
27961: PUSH
27962: LD_INT 130
27964: PUSH
27965: LD_INT 140
27967: PUSH
27968: LD_INT 150
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: PPUSH
27991: LD_INT 15
27993: PPUSH
27994: CALL_OW 12
27998: ARRAY
27999: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28000: LD_ADDR_VAR 0 4
28004: PUSH
28005: LD_INT 10
28007: PUSH
28008: LD_INT 20
28010: PUSH
28011: LD_INT 30
28013: PUSH
28014: LD_INT 40
28016: PUSH
28017: LD_INT 50
28019: PUSH
28020: LD_INT 60
28022: PUSH
28023: LD_INT 70
28025: PUSH
28026: LD_INT 80
28028: PUSH
28029: LD_INT 90
28031: PUSH
28032: LD_INT 100
28034: PUSH
28035: LD_INT 110
28037: PUSH
28038: LD_INT 120
28040: PUSH
28041: LD_INT 130
28043: PUSH
28044: LD_INT 140
28046: PUSH
28047: LD_INT 150
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: PPUSH
28070: LD_INT 15
28072: PPUSH
28073: CALL_OW 12
28077: ARRAY
28078: ST_TO_ADDR
// if ValidHex ( x , y ) then
28079: LD_VAR 0 3
28083: PPUSH
28084: LD_VAR 0 4
28088: PPUSH
28089: CALL_OW 488
28093: IFFALSE 28116
// begin result := [ x , y ] ;
28095: LD_ADDR_VAR 0 1
28099: PUSH
28100: LD_VAR 0 3
28104: PUSH
28105: LD_VAR 0 4
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: ST_TO_ADDR
// break ;
28114: GO 28118
// end ; end ;
28116: GO 27918
28118: POP
28119: POP
// if result then
28120: LD_VAR 0 1
28124: IFFALSE 28184
// begin ToLua ( playSibBomb() ) ;
28126: LD_STRING playSibBomb()
28128: PPUSH
28129: CALL_OW 559
// wait ( 0 0$14 ) ;
28133: LD_INT 490
28135: PPUSH
28136: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28140: LD_VAR 0 1
28144: PUSH
28145: LD_INT 1
28147: ARRAY
28148: PPUSH
28149: LD_VAR 0 1
28153: PUSH
28154: LD_INT 2
28156: ARRAY
28157: PPUSH
28158: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28162: LD_VAR 0 1
28166: PUSH
28167: LD_INT 1
28169: ARRAY
28170: PPUSH
28171: LD_VAR 0 1
28175: PUSH
28176: LD_INT 2
28178: ARRAY
28179: PPUSH
28180: CALL_OW 429
// end ; end ;
28184: LD_VAR 0 1
28188: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28189: LD_EXP 52
28193: PUSH
28194: LD_EXP 74
28198: AND
28199: IFFALSE 28211
28201: GO 28203
28203: DISABLE
// YouLost (  ) ;
28204: LD_STRING 
28206: PPUSH
28207: CALL_OW 104
28211: END
// every 0 0$1 trigger StreamModeActive and sFog do
28212: LD_EXP 52
28216: PUSH
28217: LD_EXP 73
28221: AND
28222: IFFALSE 28236
28224: GO 28226
28226: DISABLE
// FogOff ( your_side ) ;
28227: LD_OWVAR 2
28231: PPUSH
28232: CALL_OW 344
28236: END
// every 0 0$1 trigger StreamModeActive and sSun do
28237: LD_EXP 52
28241: PUSH
28242: LD_EXP 75
28246: AND
28247: IFFALSE 28275
28249: GO 28251
28251: DISABLE
// begin solar_recharge_percent := 0 ;
28252: LD_ADDR_OWVAR 79
28256: PUSH
28257: LD_INT 0
28259: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28260: LD_INT 10500
28262: PPUSH
28263: CALL_OW 67
// solar_recharge_percent := 100 ;
28267: LD_ADDR_OWVAR 79
28271: PUSH
28272: LD_INT 100
28274: ST_TO_ADDR
// end ;
28275: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28276: LD_EXP 52
28280: PUSH
28281: LD_EXP 76
28285: AND
28286: IFFALSE 28525
28288: GO 28290
28290: DISABLE
28291: LD_INT 0
28293: PPUSH
28294: PPUSH
28295: PPUSH
// begin tmp := [ ] ;
28296: LD_ADDR_VAR 0 3
28300: PUSH
28301: EMPTY
28302: ST_TO_ADDR
// for i := 1 to 6 do
28303: LD_ADDR_VAR 0 1
28307: PUSH
28308: DOUBLE
28309: LD_INT 1
28311: DEC
28312: ST_TO_ADDR
28313: LD_INT 6
28315: PUSH
28316: FOR_TO
28317: IFFALSE 28422
// begin uc_nation := nation_nature ;
28319: LD_ADDR_OWVAR 21
28323: PUSH
28324: LD_INT 0
28326: ST_TO_ADDR
// uc_side := 0 ;
28327: LD_ADDR_OWVAR 20
28331: PUSH
28332: LD_INT 0
28334: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28335: LD_ADDR_OWVAR 29
28339: PUSH
28340: LD_INT 12
28342: PUSH
28343: LD_INT 12
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: ST_TO_ADDR
// hc_agressivity := 20 ;
28350: LD_ADDR_OWVAR 35
28354: PUSH
28355: LD_INT 20
28357: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28358: LD_ADDR_OWVAR 28
28362: PUSH
28363: LD_INT 17
28365: ST_TO_ADDR
// hc_gallery :=  ;
28366: LD_ADDR_OWVAR 33
28370: PUSH
28371: LD_STRING 
28373: ST_TO_ADDR
// hc_name :=  ;
28374: LD_ADDR_OWVAR 26
28378: PUSH
28379: LD_STRING 
28381: ST_TO_ADDR
// un := CreateHuman ;
28382: LD_ADDR_VAR 0 2
28386: PUSH
28387: CALL_OW 44
28391: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28392: LD_VAR 0 2
28396: PPUSH
28397: LD_INT 1
28399: PPUSH
28400: CALL_OW 51
// tmp := tmp ^ un ;
28404: LD_ADDR_VAR 0 3
28408: PUSH
28409: LD_VAR 0 3
28413: PUSH
28414: LD_VAR 0 2
28418: ADD
28419: ST_TO_ADDR
// end ;
28420: GO 28316
28422: POP
28423: POP
// repeat wait ( 0 0$1 ) ;
28424: LD_INT 35
28426: PPUSH
28427: CALL_OW 67
// for un in tmp do
28431: LD_ADDR_VAR 0 2
28435: PUSH
28436: LD_VAR 0 3
28440: PUSH
28441: FOR_IN
28442: IFFALSE 28516
// begin if IsDead ( un ) then
28444: LD_VAR 0 2
28448: PPUSH
28449: CALL_OW 301
28453: IFFALSE 28473
// begin tmp := tmp diff un ;
28455: LD_ADDR_VAR 0 3
28459: PUSH
28460: LD_VAR 0 3
28464: PUSH
28465: LD_VAR 0 2
28469: DIFF
28470: ST_TO_ADDR
// continue ;
28471: GO 28441
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28473: LD_VAR 0 2
28477: PPUSH
28478: LD_INT 3
28480: PUSH
28481: LD_INT 22
28483: PUSH
28484: LD_INT 0
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PPUSH
28495: CALL_OW 69
28499: PPUSH
28500: LD_VAR 0 2
28504: PPUSH
28505: CALL_OW 74
28509: PPUSH
28510: CALL_OW 115
// end ;
28514: GO 28441
28516: POP
28517: POP
// until not tmp ;
28518: LD_VAR 0 3
28522: NOT
28523: IFFALSE 28424
// end ;
28525: PPOPN 3
28527: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28528: LD_EXP 52
28532: PUSH
28533: LD_EXP 77
28537: AND
28538: IFFALSE 28592
28540: GO 28542
28542: DISABLE
// begin ToLua ( displayTroll(); ) ;
28543: LD_STRING displayTroll();
28545: PPUSH
28546: CALL_OW 559
// wait ( 3 3$00 ) ;
28550: LD_INT 6300
28552: PPUSH
28553: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28557: LD_STRING hideTroll();
28559: PPUSH
28560: CALL_OW 559
// wait ( 1 1$00 ) ;
28564: LD_INT 2100
28566: PPUSH
28567: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28571: LD_STRING displayTroll();
28573: PPUSH
28574: CALL_OW 559
// wait ( 1 1$00 ) ;
28578: LD_INT 2100
28580: PPUSH
28581: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28585: LD_STRING hideTroll();
28587: PPUSH
28588: CALL_OW 559
// end ;
28592: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28593: LD_EXP 52
28597: PUSH
28598: LD_EXP 78
28602: AND
28603: IFFALSE 28666
28605: GO 28607
28607: DISABLE
28608: LD_INT 0
28610: PPUSH
// begin p := 0 ;
28611: LD_ADDR_VAR 0 1
28615: PUSH
28616: LD_INT 0
28618: ST_TO_ADDR
// repeat game_speed := 1 ;
28619: LD_ADDR_OWVAR 65
28623: PUSH
28624: LD_INT 1
28626: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28627: LD_INT 35
28629: PPUSH
28630: CALL_OW 67
// p := p + 1 ;
28634: LD_ADDR_VAR 0 1
28638: PUSH
28639: LD_VAR 0 1
28643: PUSH
28644: LD_INT 1
28646: PLUS
28647: ST_TO_ADDR
// until p >= 60 ;
28648: LD_VAR 0 1
28652: PUSH
28653: LD_INT 60
28655: GREATEREQUAL
28656: IFFALSE 28619
// game_speed := 4 ;
28658: LD_ADDR_OWVAR 65
28662: PUSH
28663: LD_INT 4
28665: ST_TO_ADDR
// end ;
28666: PPOPN 1
28668: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28669: LD_EXP 52
28673: PUSH
28674: LD_EXP 79
28678: AND
28679: IFFALSE 28825
28681: GO 28683
28683: DISABLE
28684: LD_INT 0
28686: PPUSH
28687: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28688: LD_ADDR_VAR 0 1
28692: PUSH
28693: LD_INT 22
28695: PUSH
28696: LD_OWVAR 2
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: LD_INT 30
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 30
28720: PUSH
28721: LD_INT 1
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PPUSH
28737: CALL_OW 69
28741: ST_TO_ADDR
// if not depot then
28742: LD_VAR 0 1
28746: NOT
28747: IFFALSE 28751
// exit ;
28749: GO 28825
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28751: LD_ADDR_VAR 0 2
28755: PUSH
28756: LD_VAR 0 1
28760: PUSH
28761: LD_INT 1
28763: PPUSH
28764: LD_VAR 0 1
28768: PPUSH
28769: CALL_OW 12
28773: ARRAY
28774: PPUSH
28775: CALL_OW 274
28779: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28780: LD_VAR 0 2
28784: PPUSH
28785: LD_INT 1
28787: PPUSH
28788: LD_INT 0
28790: PPUSH
28791: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28795: LD_VAR 0 2
28799: PPUSH
28800: LD_INT 2
28802: PPUSH
28803: LD_INT 0
28805: PPUSH
28806: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28810: LD_VAR 0 2
28814: PPUSH
28815: LD_INT 3
28817: PPUSH
28818: LD_INT 0
28820: PPUSH
28821: CALL_OW 277
// end ;
28825: PPOPN 2
28827: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28828: LD_EXP 52
28832: PUSH
28833: LD_EXP 80
28837: AND
28838: IFFALSE 28935
28840: GO 28842
28842: DISABLE
28843: LD_INT 0
28845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28846: LD_ADDR_VAR 0 1
28850: PUSH
28851: LD_INT 22
28853: PUSH
28854: LD_OWVAR 2
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 21
28865: PUSH
28866: LD_INT 1
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 3
28875: PUSH
28876: LD_INT 23
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: PPUSH
28895: CALL_OW 69
28899: ST_TO_ADDR
// if not tmp then
28900: LD_VAR 0 1
28904: NOT
28905: IFFALSE 28909
// exit ;
28907: GO 28935
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28909: LD_VAR 0 1
28913: PUSH
28914: LD_INT 1
28916: PPUSH
28917: LD_VAR 0 1
28921: PPUSH
28922: CALL_OW 12
28926: ARRAY
28927: PPUSH
28928: LD_INT 200
28930: PPUSH
28931: CALL_OW 234
// end ;
28935: PPOPN 1
28937: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28938: LD_EXP 52
28942: PUSH
28943: LD_EXP 81
28947: AND
28948: IFFALSE 29027
28950: GO 28952
28952: DISABLE
28953: LD_INT 0
28955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28956: LD_ADDR_VAR 0 1
28960: PUSH
28961: LD_INT 22
28963: PUSH
28964: LD_OWVAR 2
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 21
28975: PUSH
28976: LD_INT 2
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PPUSH
28987: CALL_OW 69
28991: ST_TO_ADDR
// if not tmp then
28992: LD_VAR 0 1
28996: NOT
28997: IFFALSE 29001
// exit ;
28999: GO 29027
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29001: LD_VAR 0 1
29005: PUSH
29006: LD_INT 1
29008: PPUSH
29009: LD_VAR 0 1
29013: PPUSH
29014: CALL_OW 12
29018: ARRAY
29019: PPUSH
29020: LD_INT 60
29022: PPUSH
29023: CALL_OW 234
// end ;
29027: PPOPN 1
29029: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29030: LD_EXP 52
29034: PUSH
29035: LD_EXP 82
29039: AND
29040: IFFALSE 29139
29042: GO 29044
29044: DISABLE
29045: LD_INT 0
29047: PPUSH
29048: PPUSH
// begin enable ;
29049: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29050: LD_ADDR_VAR 0 1
29054: PUSH
29055: LD_INT 22
29057: PUSH
29058: LD_OWVAR 2
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 61
29069: PUSH
29070: EMPTY
29071: LIST
29072: PUSH
29073: LD_INT 33
29075: PUSH
29076: LD_INT 2
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: LIST
29087: PPUSH
29088: CALL_OW 69
29092: ST_TO_ADDR
// if not tmp then
29093: LD_VAR 0 1
29097: NOT
29098: IFFALSE 29102
// exit ;
29100: GO 29139
// for i in tmp do
29102: LD_ADDR_VAR 0 2
29106: PUSH
29107: LD_VAR 0 1
29111: PUSH
29112: FOR_IN
29113: IFFALSE 29137
// if IsControledBy ( i ) then
29115: LD_VAR 0 2
29119: PPUSH
29120: CALL_OW 312
29124: IFFALSE 29135
// ComUnlink ( i ) ;
29126: LD_VAR 0 2
29130: PPUSH
29131: CALL_OW 136
29135: GO 29112
29137: POP
29138: POP
// end ;
29139: PPOPN 2
29141: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29142: LD_EXP 52
29146: PUSH
29147: LD_EXP 83
29151: AND
29152: IFFALSE 29292
29154: GO 29156
29156: DISABLE
29157: LD_INT 0
29159: PPUSH
29160: PPUSH
// begin ToLua ( displayPowell(); ) ;
29161: LD_STRING displayPowell();
29163: PPUSH
29164: CALL_OW 559
// uc_side := 0 ;
29168: LD_ADDR_OWVAR 20
29172: PUSH
29173: LD_INT 0
29175: ST_TO_ADDR
// uc_nation := 2 ;
29176: LD_ADDR_OWVAR 21
29180: PUSH
29181: LD_INT 2
29183: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29184: LD_ADDR_OWVAR 37
29188: PUSH
29189: LD_INT 14
29191: ST_TO_ADDR
// vc_engine := engine_siberite ;
29192: LD_ADDR_OWVAR 39
29196: PUSH
29197: LD_INT 3
29199: ST_TO_ADDR
// vc_control := control_apeman ;
29200: LD_ADDR_OWVAR 38
29204: PUSH
29205: LD_INT 5
29207: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29208: LD_ADDR_OWVAR 40
29212: PUSH
29213: LD_INT 29
29215: ST_TO_ADDR
// un := CreateVehicle ;
29216: LD_ADDR_VAR 0 2
29220: PUSH
29221: CALL_OW 45
29225: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29226: LD_VAR 0 2
29230: PPUSH
29231: LD_INT 1
29233: PPUSH
29234: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29238: LD_INT 35
29240: PPUSH
29241: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29245: LD_VAR 0 2
29249: PPUSH
29250: LD_INT 22
29252: PUSH
29253: LD_OWVAR 2
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PPUSH
29262: CALL_OW 69
29266: PPUSH
29267: LD_VAR 0 2
29271: PPUSH
29272: CALL_OW 74
29276: PPUSH
29277: CALL_OW 115
// until IsDead ( un ) ;
29281: LD_VAR 0 2
29285: PPUSH
29286: CALL_OW 301
29290: IFFALSE 29238
// end ;
29292: PPOPN 2
29294: END
// every 0 0$1 trigger StreamModeActive and sStu do
29295: LD_EXP 52
29299: PUSH
29300: LD_EXP 91
29304: AND
29305: IFFALSE 29321
29307: GO 29309
29309: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29310: LD_STRING displayStucuk();
29312: PPUSH
29313: CALL_OW 559
// ResetFog ;
29317: CALL_OW 335
// end ;
29321: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29322: LD_EXP 52
29326: PUSH
29327: LD_EXP 84
29331: AND
29332: IFFALSE 29473
29334: GO 29336
29336: DISABLE
29337: LD_INT 0
29339: PPUSH
29340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29341: LD_ADDR_VAR 0 2
29345: PUSH
29346: LD_INT 22
29348: PUSH
29349: LD_OWVAR 2
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 21
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PPUSH
29372: CALL_OW 69
29376: ST_TO_ADDR
// if not tmp then
29377: LD_VAR 0 2
29381: NOT
29382: IFFALSE 29386
// exit ;
29384: GO 29473
// un := tmp [ rand ( 1 , tmp ) ] ;
29386: LD_ADDR_VAR 0 1
29390: PUSH
29391: LD_VAR 0 2
29395: PUSH
29396: LD_INT 1
29398: PPUSH
29399: LD_VAR 0 2
29403: PPUSH
29404: CALL_OW 12
29408: ARRAY
29409: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29410: LD_VAR 0 1
29414: PPUSH
29415: LD_INT 0
29417: PPUSH
29418: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29422: LD_VAR 0 1
29426: PPUSH
29427: LD_OWVAR 3
29431: PUSH
29432: LD_VAR 0 1
29436: DIFF
29437: PPUSH
29438: LD_VAR 0 1
29442: PPUSH
29443: CALL_OW 74
29447: PPUSH
29448: CALL_OW 115
// wait ( 0 0$20 ) ;
29452: LD_INT 700
29454: PPUSH
29455: CALL_OW 67
// SetSide ( un , your_side ) ;
29459: LD_VAR 0 1
29463: PPUSH
29464: LD_OWVAR 2
29468: PPUSH
29469: CALL_OW 235
// end ;
29473: PPOPN 2
29475: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29476: LD_EXP 52
29480: PUSH
29481: LD_EXP 85
29485: AND
29486: IFFALSE 29592
29488: GO 29490
29490: DISABLE
29491: LD_INT 0
29493: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29494: LD_ADDR_VAR 0 1
29498: PUSH
29499: LD_INT 22
29501: PUSH
29502: LD_OWVAR 2
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 2
29513: PUSH
29514: LD_INT 30
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 30
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: LIST
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PPUSH
29543: CALL_OW 69
29547: ST_TO_ADDR
// if not depot then
29548: LD_VAR 0 1
29552: NOT
29553: IFFALSE 29557
// exit ;
29555: GO 29592
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29557: LD_VAR 0 1
29561: PUSH
29562: LD_INT 1
29564: ARRAY
29565: PPUSH
29566: CALL_OW 250
29570: PPUSH
29571: LD_VAR 0 1
29575: PUSH
29576: LD_INT 1
29578: ARRAY
29579: PPUSH
29580: CALL_OW 251
29584: PPUSH
29585: LD_INT 70
29587: PPUSH
29588: CALL_OW 495
// end ;
29592: PPOPN 1
29594: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29595: LD_EXP 52
29599: PUSH
29600: LD_EXP 86
29604: AND
29605: IFFALSE 29816
29607: GO 29609
29609: DISABLE
29610: LD_INT 0
29612: PPUSH
29613: PPUSH
29614: PPUSH
29615: PPUSH
29616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29617: LD_ADDR_VAR 0 5
29621: PUSH
29622: LD_INT 22
29624: PUSH
29625: LD_OWVAR 2
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 21
29636: PUSH
29637: LD_INT 1
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PPUSH
29648: CALL_OW 69
29652: ST_TO_ADDR
// if not tmp then
29653: LD_VAR 0 5
29657: NOT
29658: IFFALSE 29662
// exit ;
29660: GO 29816
// for i in tmp do
29662: LD_ADDR_VAR 0 1
29666: PUSH
29667: LD_VAR 0 5
29671: PUSH
29672: FOR_IN
29673: IFFALSE 29814
// begin d := rand ( 0 , 5 ) ;
29675: LD_ADDR_VAR 0 4
29679: PUSH
29680: LD_INT 0
29682: PPUSH
29683: LD_INT 5
29685: PPUSH
29686: CALL_OW 12
29690: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29691: LD_ADDR_VAR 0 2
29695: PUSH
29696: LD_VAR 0 1
29700: PPUSH
29701: CALL_OW 250
29705: PPUSH
29706: LD_VAR 0 4
29710: PPUSH
29711: LD_INT 3
29713: PPUSH
29714: LD_INT 12
29716: PPUSH
29717: CALL_OW 12
29721: PPUSH
29722: CALL_OW 272
29726: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29727: LD_ADDR_VAR 0 3
29731: PUSH
29732: LD_VAR 0 1
29736: PPUSH
29737: CALL_OW 251
29741: PPUSH
29742: LD_VAR 0 4
29746: PPUSH
29747: LD_INT 3
29749: PPUSH
29750: LD_INT 12
29752: PPUSH
29753: CALL_OW 12
29757: PPUSH
29758: CALL_OW 273
29762: ST_TO_ADDR
// if ValidHex ( x , y ) then
29763: LD_VAR 0 2
29767: PPUSH
29768: LD_VAR 0 3
29772: PPUSH
29773: CALL_OW 488
29777: IFFALSE 29812
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29779: LD_VAR 0 1
29783: PPUSH
29784: LD_VAR 0 2
29788: PPUSH
29789: LD_VAR 0 3
29793: PPUSH
29794: LD_INT 3
29796: PPUSH
29797: LD_INT 6
29799: PPUSH
29800: CALL_OW 12
29804: PPUSH
29805: LD_INT 1
29807: PPUSH
29808: CALL_OW 483
// end ;
29812: GO 29672
29814: POP
29815: POP
// end ;
29816: PPOPN 5
29818: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29819: LD_EXP 52
29823: PUSH
29824: LD_EXP 87
29828: AND
29829: IFFALSE 29923
29831: GO 29833
29833: DISABLE
29834: LD_INT 0
29836: PPUSH
29837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29838: LD_ADDR_VAR 0 2
29842: PUSH
29843: LD_INT 22
29845: PUSH
29846: LD_OWVAR 2
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 32
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 21
29867: PUSH
29868: LD_INT 2
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: PPUSH
29880: CALL_OW 69
29884: ST_TO_ADDR
// if not tmp then
29885: LD_VAR 0 2
29889: NOT
29890: IFFALSE 29894
// exit ;
29892: GO 29923
// for i in tmp do
29894: LD_ADDR_VAR 0 1
29898: PUSH
29899: LD_VAR 0 2
29903: PUSH
29904: FOR_IN
29905: IFFALSE 29921
// SetFuel ( i , 0 ) ;
29907: LD_VAR 0 1
29911: PPUSH
29912: LD_INT 0
29914: PPUSH
29915: CALL_OW 240
29919: GO 29904
29921: POP
29922: POP
// end ;
29923: PPOPN 2
29925: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29926: LD_EXP 52
29930: PUSH
29931: LD_EXP 88
29935: AND
29936: IFFALSE 30002
29938: GO 29940
29940: DISABLE
29941: LD_INT 0
29943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29944: LD_ADDR_VAR 0 1
29948: PUSH
29949: LD_INT 22
29951: PUSH
29952: LD_OWVAR 2
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 30
29963: PUSH
29964: LD_INT 29
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PPUSH
29975: CALL_OW 69
29979: ST_TO_ADDR
// if not tmp then
29980: LD_VAR 0 1
29984: NOT
29985: IFFALSE 29989
// exit ;
29987: GO 30002
// DestroyUnit ( tmp [ 1 ] ) ;
29989: LD_VAR 0 1
29993: PUSH
29994: LD_INT 1
29996: ARRAY
29997: PPUSH
29998: CALL_OW 65
// end ;
30002: PPOPN 1
30004: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30005: LD_EXP 52
30009: PUSH
30010: LD_EXP 90
30014: AND
30015: IFFALSE 30144
30017: GO 30019
30019: DISABLE
30020: LD_INT 0
30022: PPUSH
// begin uc_side := 0 ;
30023: LD_ADDR_OWVAR 20
30027: PUSH
30028: LD_INT 0
30030: ST_TO_ADDR
// uc_nation := nation_arabian ;
30031: LD_ADDR_OWVAR 21
30035: PUSH
30036: LD_INT 2
30038: ST_TO_ADDR
// hc_gallery :=  ;
30039: LD_ADDR_OWVAR 33
30043: PUSH
30044: LD_STRING 
30046: ST_TO_ADDR
// hc_name :=  ;
30047: LD_ADDR_OWVAR 26
30051: PUSH
30052: LD_STRING 
30054: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30055: LD_INT 1
30057: PPUSH
30058: LD_INT 11
30060: PPUSH
30061: LD_INT 10
30063: PPUSH
30064: CALL_OW 380
// un := CreateHuman ;
30068: LD_ADDR_VAR 0 1
30072: PUSH
30073: CALL_OW 44
30077: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30078: LD_VAR 0 1
30082: PPUSH
30083: LD_INT 1
30085: PPUSH
30086: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30090: LD_INT 35
30092: PPUSH
30093: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30097: LD_VAR 0 1
30101: PPUSH
30102: LD_INT 22
30104: PUSH
30105: LD_OWVAR 2
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PPUSH
30114: CALL_OW 69
30118: PPUSH
30119: LD_VAR 0 1
30123: PPUSH
30124: CALL_OW 74
30128: PPUSH
30129: CALL_OW 115
// until IsDead ( un ) ;
30133: LD_VAR 0 1
30137: PPUSH
30138: CALL_OW 301
30142: IFFALSE 30090
// end ;
30144: PPOPN 1
30146: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30147: LD_EXP 52
30151: PUSH
30152: LD_EXP 92
30156: AND
30157: IFFALSE 30169
30159: GO 30161
30161: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30162: LD_STRING earthquake(getX(game), 0, 32)
30164: PPUSH
30165: CALL_OW 559
30169: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30170: LD_EXP 52
30174: PUSH
30175: LD_EXP 93
30179: AND
30180: IFFALSE 30271
30182: GO 30184
30184: DISABLE
30185: LD_INT 0
30187: PPUSH
// begin enable ;
30188: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30189: LD_ADDR_VAR 0 1
30193: PUSH
30194: LD_INT 22
30196: PUSH
30197: LD_OWVAR 2
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 21
30208: PUSH
30209: LD_INT 2
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 33
30218: PUSH
30219: LD_INT 3
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: PPUSH
30231: CALL_OW 69
30235: ST_TO_ADDR
// if not tmp then
30236: LD_VAR 0 1
30240: NOT
30241: IFFALSE 30245
// exit ;
30243: GO 30271
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30245: LD_VAR 0 1
30249: PUSH
30250: LD_INT 1
30252: PPUSH
30253: LD_VAR 0 1
30257: PPUSH
30258: CALL_OW 12
30262: ARRAY
30263: PPUSH
30264: LD_INT 1
30266: PPUSH
30267: CALL_OW 234
// end ;
30271: PPOPN 1
30273: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30274: LD_EXP 52
30278: PUSH
30279: LD_EXP 94
30283: AND
30284: IFFALSE 30425
30286: GO 30288
30288: DISABLE
30289: LD_INT 0
30291: PPUSH
30292: PPUSH
30293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30294: LD_ADDR_VAR 0 3
30298: PUSH
30299: LD_INT 22
30301: PUSH
30302: LD_OWVAR 2
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 25
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PPUSH
30325: CALL_OW 69
30329: ST_TO_ADDR
// if not tmp then
30330: LD_VAR 0 3
30334: NOT
30335: IFFALSE 30339
// exit ;
30337: GO 30425
// un := tmp [ rand ( 1 , tmp ) ] ;
30339: LD_ADDR_VAR 0 2
30343: PUSH
30344: LD_VAR 0 3
30348: PUSH
30349: LD_INT 1
30351: PPUSH
30352: LD_VAR 0 3
30356: PPUSH
30357: CALL_OW 12
30361: ARRAY
30362: ST_TO_ADDR
// if Crawls ( un ) then
30363: LD_VAR 0 2
30367: PPUSH
30368: CALL_OW 318
30372: IFFALSE 30383
// ComWalk ( un ) ;
30374: LD_VAR 0 2
30378: PPUSH
30379: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30383: LD_VAR 0 2
30387: PPUSH
30388: LD_INT 9
30390: PPUSH
30391: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30395: LD_INT 28
30397: PPUSH
30398: LD_OWVAR 2
30402: PPUSH
30403: LD_INT 2
30405: PPUSH
30406: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30410: LD_INT 29
30412: PPUSH
30413: LD_OWVAR 2
30417: PPUSH
30418: LD_INT 2
30420: PPUSH
30421: CALL_OW 322
// end ;
30425: PPOPN 3
30427: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30428: LD_EXP 52
30432: PUSH
30433: LD_EXP 95
30437: AND
30438: IFFALSE 30549
30440: GO 30442
30442: DISABLE
30443: LD_INT 0
30445: PPUSH
30446: PPUSH
30447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30448: LD_ADDR_VAR 0 3
30452: PUSH
30453: LD_INT 22
30455: PUSH
30456: LD_OWVAR 2
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 25
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PPUSH
30479: CALL_OW 69
30483: ST_TO_ADDR
// if not tmp then
30484: LD_VAR 0 3
30488: NOT
30489: IFFALSE 30493
// exit ;
30491: GO 30549
// un := tmp [ rand ( 1 , tmp ) ] ;
30493: LD_ADDR_VAR 0 2
30497: PUSH
30498: LD_VAR 0 3
30502: PUSH
30503: LD_INT 1
30505: PPUSH
30506: LD_VAR 0 3
30510: PPUSH
30511: CALL_OW 12
30515: ARRAY
30516: ST_TO_ADDR
// if Crawls ( un ) then
30517: LD_VAR 0 2
30521: PPUSH
30522: CALL_OW 318
30526: IFFALSE 30537
// ComWalk ( un ) ;
30528: LD_VAR 0 2
30532: PPUSH
30533: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30537: LD_VAR 0 2
30541: PPUSH
30542: LD_INT 8
30544: PPUSH
30545: CALL_OW 336
// end ;
30549: PPOPN 3
30551: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30552: LD_EXP 52
30556: PUSH
30557: LD_EXP 96
30561: AND
30562: IFFALSE 30706
30564: GO 30566
30566: DISABLE
30567: LD_INT 0
30569: PPUSH
30570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30571: LD_ADDR_VAR 0 2
30575: PUSH
30576: LD_INT 22
30578: PUSH
30579: LD_OWVAR 2
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 21
30590: PUSH
30591: LD_INT 2
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: LD_INT 34
30603: PUSH
30604: LD_INT 12
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 34
30613: PUSH
30614: LD_INT 51
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 34
30623: PUSH
30624: LD_INT 32
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: LIST
30641: PPUSH
30642: CALL_OW 69
30646: ST_TO_ADDR
// if not tmp then
30647: LD_VAR 0 2
30651: NOT
30652: IFFALSE 30656
// exit ;
30654: GO 30706
// for i in tmp do
30656: LD_ADDR_VAR 0 1
30660: PUSH
30661: LD_VAR 0 2
30665: PUSH
30666: FOR_IN
30667: IFFALSE 30704
// if GetCargo ( i , mat_artifact ) = 0 then
30669: LD_VAR 0 1
30673: PPUSH
30674: LD_INT 4
30676: PPUSH
30677: CALL_OW 289
30681: PUSH
30682: LD_INT 0
30684: EQUAL
30685: IFFALSE 30702
// SetCargo ( i , mat_siberit , 100 ) ;
30687: LD_VAR 0 1
30691: PPUSH
30692: LD_INT 3
30694: PPUSH
30695: LD_INT 100
30697: PPUSH
30698: CALL_OW 290
30702: GO 30666
30704: POP
30705: POP
// end ;
30706: PPOPN 2
30708: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30709: LD_EXP 52
30713: PUSH
30714: LD_EXP 97
30718: AND
30719: IFFALSE 30902
30721: GO 30723
30723: DISABLE
30724: LD_INT 0
30726: PPUSH
30727: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30728: LD_ADDR_VAR 0 2
30732: PUSH
30733: LD_INT 22
30735: PUSH
30736: LD_OWVAR 2
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PPUSH
30745: CALL_OW 69
30749: ST_TO_ADDR
// if not tmp then
30750: LD_VAR 0 2
30754: NOT
30755: IFFALSE 30759
// exit ;
30757: GO 30902
// for i := 1 to 2 do
30759: LD_ADDR_VAR 0 1
30763: PUSH
30764: DOUBLE
30765: LD_INT 1
30767: DEC
30768: ST_TO_ADDR
30769: LD_INT 2
30771: PUSH
30772: FOR_TO
30773: IFFALSE 30900
// begin uc_side := your_side ;
30775: LD_ADDR_OWVAR 20
30779: PUSH
30780: LD_OWVAR 2
30784: ST_TO_ADDR
// uc_nation := nation_american ;
30785: LD_ADDR_OWVAR 21
30789: PUSH
30790: LD_INT 1
30792: ST_TO_ADDR
// vc_chassis := us_morphling ;
30793: LD_ADDR_OWVAR 37
30797: PUSH
30798: LD_INT 5
30800: ST_TO_ADDR
// vc_engine := engine_siberite ;
30801: LD_ADDR_OWVAR 39
30805: PUSH
30806: LD_INT 3
30808: ST_TO_ADDR
// vc_control := control_computer ;
30809: LD_ADDR_OWVAR 38
30813: PUSH
30814: LD_INT 3
30816: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30817: LD_ADDR_OWVAR 40
30821: PUSH
30822: LD_INT 10
30824: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30825: LD_VAR 0 2
30829: PUSH
30830: LD_INT 1
30832: ARRAY
30833: PPUSH
30834: CALL_OW 310
30838: NOT
30839: IFFALSE 30886
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30841: CALL_OW 45
30845: PPUSH
30846: LD_VAR 0 2
30850: PUSH
30851: LD_INT 1
30853: ARRAY
30854: PPUSH
30855: CALL_OW 250
30859: PPUSH
30860: LD_VAR 0 2
30864: PUSH
30865: LD_INT 1
30867: ARRAY
30868: PPUSH
30869: CALL_OW 251
30873: PPUSH
30874: LD_INT 12
30876: PPUSH
30877: LD_INT 1
30879: PPUSH
30880: CALL_OW 50
30884: GO 30898
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30886: CALL_OW 45
30890: PPUSH
30891: LD_INT 1
30893: PPUSH
30894: CALL_OW 51
// end ;
30898: GO 30772
30900: POP
30901: POP
// end ;
30902: PPOPN 2
30904: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30905: LD_EXP 52
30909: PUSH
30910: LD_EXP 98
30914: AND
30915: IFFALSE 31137
30917: GO 30919
30919: DISABLE
30920: LD_INT 0
30922: PPUSH
30923: PPUSH
30924: PPUSH
30925: PPUSH
30926: PPUSH
30927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30928: LD_ADDR_VAR 0 6
30932: PUSH
30933: LD_INT 22
30935: PUSH
30936: LD_OWVAR 2
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 21
30947: PUSH
30948: LD_INT 1
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 3
30957: PUSH
30958: LD_INT 23
30960: PUSH
30961: LD_INT 0
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: LIST
30976: PPUSH
30977: CALL_OW 69
30981: ST_TO_ADDR
// if not tmp then
30982: LD_VAR 0 6
30986: NOT
30987: IFFALSE 30991
// exit ;
30989: GO 31137
// s1 := rand ( 1 , 4 ) ;
30991: LD_ADDR_VAR 0 2
30995: PUSH
30996: LD_INT 1
30998: PPUSH
30999: LD_INT 4
31001: PPUSH
31002: CALL_OW 12
31006: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31007: LD_ADDR_VAR 0 4
31011: PUSH
31012: LD_VAR 0 6
31016: PUSH
31017: LD_INT 1
31019: ARRAY
31020: PPUSH
31021: LD_VAR 0 2
31025: PPUSH
31026: CALL_OW 259
31030: ST_TO_ADDR
// if s1 = 1 then
31031: LD_VAR 0 2
31035: PUSH
31036: LD_INT 1
31038: EQUAL
31039: IFFALSE 31059
// s2 := rand ( 2 , 4 ) else
31041: LD_ADDR_VAR 0 3
31045: PUSH
31046: LD_INT 2
31048: PPUSH
31049: LD_INT 4
31051: PPUSH
31052: CALL_OW 12
31056: ST_TO_ADDR
31057: GO 31067
// s2 := 1 ;
31059: LD_ADDR_VAR 0 3
31063: PUSH
31064: LD_INT 1
31066: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31067: LD_ADDR_VAR 0 5
31071: PUSH
31072: LD_VAR 0 6
31076: PUSH
31077: LD_INT 1
31079: ARRAY
31080: PPUSH
31081: LD_VAR 0 3
31085: PPUSH
31086: CALL_OW 259
31090: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31091: LD_VAR 0 6
31095: PUSH
31096: LD_INT 1
31098: ARRAY
31099: PPUSH
31100: LD_VAR 0 2
31104: PPUSH
31105: LD_VAR 0 5
31109: PPUSH
31110: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31114: LD_VAR 0 6
31118: PUSH
31119: LD_INT 1
31121: ARRAY
31122: PPUSH
31123: LD_VAR 0 3
31127: PPUSH
31128: LD_VAR 0 4
31132: PPUSH
31133: CALL_OW 237
// end ;
31137: PPOPN 6
31139: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31140: LD_EXP 52
31144: PUSH
31145: LD_EXP 99
31149: AND
31150: IFFALSE 31229
31152: GO 31154
31154: DISABLE
31155: LD_INT 0
31157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31158: LD_ADDR_VAR 0 1
31162: PUSH
31163: LD_INT 22
31165: PUSH
31166: LD_OWVAR 2
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 30
31177: PUSH
31178: LD_INT 3
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PPUSH
31189: CALL_OW 69
31193: ST_TO_ADDR
// if not tmp then
31194: LD_VAR 0 1
31198: NOT
31199: IFFALSE 31203
// exit ;
31201: GO 31229
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31203: LD_VAR 0 1
31207: PUSH
31208: LD_INT 1
31210: PPUSH
31211: LD_VAR 0 1
31215: PPUSH
31216: CALL_OW 12
31220: ARRAY
31221: PPUSH
31222: LD_INT 1
31224: PPUSH
31225: CALL_OW 234
// end ;
31229: PPOPN 1
31231: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31232: LD_EXP 52
31236: PUSH
31237: LD_EXP 100
31241: AND
31242: IFFALSE 31354
31244: GO 31246
31246: DISABLE
31247: LD_INT 0
31249: PPUSH
31250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31251: LD_ADDR_VAR 0 2
31255: PUSH
31256: LD_INT 22
31258: PUSH
31259: LD_OWVAR 2
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: LD_INT 30
31273: PUSH
31274: LD_INT 27
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 30
31283: PUSH
31284: LD_INT 26
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 30
31293: PUSH
31294: LD_INT 28
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PPUSH
31311: CALL_OW 69
31315: ST_TO_ADDR
// if not tmp then
31316: LD_VAR 0 2
31320: NOT
31321: IFFALSE 31325
// exit ;
31323: GO 31354
// for i in tmp do
31325: LD_ADDR_VAR 0 1
31329: PUSH
31330: LD_VAR 0 2
31334: PUSH
31335: FOR_IN
31336: IFFALSE 31352
// SetLives ( i , 1 ) ;
31338: LD_VAR 0 1
31342: PPUSH
31343: LD_INT 1
31345: PPUSH
31346: CALL_OW 234
31350: GO 31335
31352: POP
31353: POP
// end ;
31354: PPOPN 2
31356: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31357: LD_EXP 52
31361: PUSH
31362: LD_EXP 101
31366: AND
31367: IFFALSE 31654
31369: GO 31371
31371: DISABLE
31372: LD_INT 0
31374: PPUSH
31375: PPUSH
31376: PPUSH
// begin i := rand ( 1 , 7 ) ;
31377: LD_ADDR_VAR 0 1
31381: PUSH
31382: LD_INT 1
31384: PPUSH
31385: LD_INT 7
31387: PPUSH
31388: CALL_OW 12
31392: ST_TO_ADDR
// case i of 1 :
31393: LD_VAR 0 1
31397: PUSH
31398: LD_INT 1
31400: DOUBLE
31401: EQUAL
31402: IFTRUE 31406
31404: GO 31416
31406: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31407: LD_STRING earthquake(getX(game), 0, 32)
31409: PPUSH
31410: CALL_OW 559
31414: GO 31654
31416: LD_INT 2
31418: DOUBLE
31419: EQUAL
31420: IFTRUE 31424
31422: GO 31438
31424: POP
// begin ToLua ( displayStucuk(); ) ;
31425: LD_STRING displayStucuk();
31427: PPUSH
31428: CALL_OW 559
// ResetFog ;
31432: CALL_OW 335
// end ; 3 :
31436: GO 31654
31438: LD_INT 3
31440: DOUBLE
31441: EQUAL
31442: IFTRUE 31446
31444: GO 31550
31446: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31447: LD_ADDR_VAR 0 2
31451: PUSH
31452: LD_INT 22
31454: PUSH
31455: LD_OWVAR 2
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 25
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PPUSH
31478: CALL_OW 69
31482: ST_TO_ADDR
// if not tmp then
31483: LD_VAR 0 2
31487: NOT
31488: IFFALSE 31492
// exit ;
31490: GO 31654
// un := tmp [ rand ( 1 , tmp ) ] ;
31492: LD_ADDR_VAR 0 3
31496: PUSH
31497: LD_VAR 0 2
31501: PUSH
31502: LD_INT 1
31504: PPUSH
31505: LD_VAR 0 2
31509: PPUSH
31510: CALL_OW 12
31514: ARRAY
31515: ST_TO_ADDR
// if Crawls ( un ) then
31516: LD_VAR 0 3
31520: PPUSH
31521: CALL_OW 318
31525: IFFALSE 31536
// ComWalk ( un ) ;
31527: LD_VAR 0 3
31531: PPUSH
31532: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31536: LD_VAR 0 3
31540: PPUSH
31541: LD_INT 8
31543: PPUSH
31544: CALL_OW 336
// end ; 4 :
31548: GO 31654
31550: LD_INT 4
31552: DOUBLE
31553: EQUAL
31554: IFTRUE 31558
31556: GO 31632
31558: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31559: LD_ADDR_VAR 0 2
31563: PUSH
31564: LD_INT 22
31566: PUSH
31567: LD_OWVAR 2
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 30
31578: PUSH
31579: LD_INT 29
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PPUSH
31590: CALL_OW 69
31594: ST_TO_ADDR
// if not tmp then
31595: LD_VAR 0 2
31599: NOT
31600: IFFALSE 31604
// exit ;
31602: GO 31654
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31604: LD_VAR 0 2
31608: PUSH
31609: LD_INT 1
31611: ARRAY
31612: PPUSH
31613: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31617: LD_VAR 0 2
31621: PUSH
31622: LD_INT 1
31624: ARRAY
31625: PPUSH
31626: CALL_OW 65
// end ; 5 .. 7 :
31630: GO 31654
31632: LD_INT 5
31634: DOUBLE
31635: GREATEREQUAL
31636: IFFALSE 31644
31638: LD_INT 7
31640: DOUBLE
31641: LESSEQUAL
31642: IFTRUE 31646
31644: GO 31653
31646: POP
// StreamSibBomb ; end ;
31647: CALL 27891 0 0
31651: GO 31654
31653: POP
// end ;
31654: PPOPN 3
31656: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31657: LD_EXP 52
31661: PUSH
31662: LD_EXP 102
31666: AND
31667: IFFALSE 31823
31669: GO 31671
31671: DISABLE
31672: LD_INT 0
31674: PPUSH
31675: PPUSH
31676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31677: LD_ADDR_VAR 0 2
31681: PUSH
31682: LD_INT 81
31684: PUSH
31685: LD_OWVAR 2
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: LD_INT 21
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 21
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PPUSH
31726: CALL_OW 69
31730: ST_TO_ADDR
// if not tmp then
31731: LD_VAR 0 2
31735: NOT
31736: IFFALSE 31740
// exit ;
31738: GO 31823
// p := 0 ;
31740: LD_ADDR_VAR 0 3
31744: PUSH
31745: LD_INT 0
31747: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31748: LD_INT 35
31750: PPUSH
31751: CALL_OW 67
// p := p + 1 ;
31755: LD_ADDR_VAR 0 3
31759: PUSH
31760: LD_VAR 0 3
31764: PUSH
31765: LD_INT 1
31767: PLUS
31768: ST_TO_ADDR
// for i in tmp do
31769: LD_ADDR_VAR 0 1
31773: PUSH
31774: LD_VAR 0 2
31778: PUSH
31779: FOR_IN
31780: IFFALSE 31811
// if GetLives ( i ) < 1000 then
31782: LD_VAR 0 1
31786: PPUSH
31787: CALL_OW 256
31791: PUSH
31792: LD_INT 1000
31794: LESS
31795: IFFALSE 31809
// SetLives ( i , 1000 ) ;
31797: LD_VAR 0 1
31801: PPUSH
31802: LD_INT 1000
31804: PPUSH
31805: CALL_OW 234
31809: GO 31779
31811: POP
31812: POP
// until p > 20 ;
31813: LD_VAR 0 3
31817: PUSH
31818: LD_INT 20
31820: GREATER
31821: IFFALSE 31748
// end ;
31823: PPOPN 3
31825: END
// every 0 0$1 trigger StreamModeActive and sTime do
31826: LD_EXP 52
31830: PUSH
31831: LD_EXP 103
31835: AND
31836: IFFALSE 31871
31838: GO 31840
31840: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31841: LD_INT 28
31843: PPUSH
31844: LD_OWVAR 2
31848: PPUSH
31849: LD_INT 2
31851: PPUSH
31852: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31856: LD_INT 30
31858: PPUSH
31859: LD_OWVAR 2
31863: PPUSH
31864: LD_INT 2
31866: PPUSH
31867: CALL_OW 322
// end ;
31871: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31872: LD_EXP 52
31876: PUSH
31877: LD_EXP 104
31881: AND
31882: IFFALSE 32003
31884: GO 31886
31886: DISABLE
31887: LD_INT 0
31889: PPUSH
31890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31891: LD_ADDR_VAR 0 2
31895: PUSH
31896: LD_INT 22
31898: PUSH
31899: LD_OWVAR 2
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 21
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 3
31920: PUSH
31921: LD_INT 23
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: LIST
31939: PPUSH
31940: CALL_OW 69
31944: ST_TO_ADDR
// if not tmp then
31945: LD_VAR 0 2
31949: NOT
31950: IFFALSE 31954
// exit ;
31952: GO 32003
// for i in tmp do
31954: LD_ADDR_VAR 0 1
31958: PUSH
31959: LD_VAR 0 2
31963: PUSH
31964: FOR_IN
31965: IFFALSE 32001
// begin if Crawls ( i ) then
31967: LD_VAR 0 1
31971: PPUSH
31972: CALL_OW 318
31976: IFFALSE 31987
// ComWalk ( i ) ;
31978: LD_VAR 0 1
31982: PPUSH
31983: CALL_OW 138
// SetClass ( i , 2 ) ;
31987: LD_VAR 0 1
31991: PPUSH
31992: LD_INT 2
31994: PPUSH
31995: CALL_OW 336
// end ;
31999: GO 31964
32001: POP
32002: POP
// end ;
32003: PPOPN 2
32005: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32006: LD_EXP 52
32010: PUSH
32011: LD_EXP 105
32015: AND
32016: IFFALSE 32304
32018: GO 32020
32020: DISABLE
32021: LD_INT 0
32023: PPUSH
32024: PPUSH
32025: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32026: LD_OWVAR 2
32030: PPUSH
32031: LD_INT 9
32033: PPUSH
32034: LD_INT 1
32036: PPUSH
32037: LD_INT 1
32039: PPUSH
32040: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32044: LD_INT 9
32046: PPUSH
32047: LD_OWVAR 2
32051: PPUSH
32052: CALL_OW 343
// uc_side := 9 ;
32056: LD_ADDR_OWVAR 20
32060: PUSH
32061: LD_INT 9
32063: ST_TO_ADDR
// uc_nation := 2 ;
32064: LD_ADDR_OWVAR 21
32068: PUSH
32069: LD_INT 2
32071: ST_TO_ADDR
// hc_name := Dark Warrior ;
32072: LD_ADDR_OWVAR 26
32076: PUSH
32077: LD_STRING Dark Warrior
32079: ST_TO_ADDR
// hc_gallery :=  ;
32080: LD_ADDR_OWVAR 33
32084: PUSH
32085: LD_STRING 
32087: ST_TO_ADDR
// hc_noskilllimit := true ;
32088: LD_ADDR_OWVAR 76
32092: PUSH
32093: LD_INT 1
32095: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32096: LD_ADDR_OWVAR 31
32100: PUSH
32101: LD_INT 30
32103: PUSH
32104: LD_INT 30
32106: PUSH
32107: LD_INT 30
32109: PUSH
32110: LD_INT 30
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: ST_TO_ADDR
// un := CreateHuman ;
32119: LD_ADDR_VAR 0 3
32123: PUSH
32124: CALL_OW 44
32128: ST_TO_ADDR
// hc_noskilllimit := false ;
32129: LD_ADDR_OWVAR 76
32133: PUSH
32134: LD_INT 0
32136: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32137: LD_VAR 0 3
32141: PPUSH
32142: LD_INT 1
32144: PPUSH
32145: CALL_OW 51
// ToLua ( playRanger() ) ;
32149: LD_STRING playRanger()
32151: PPUSH
32152: CALL_OW 559
// p := 0 ;
32156: LD_ADDR_VAR 0 2
32160: PUSH
32161: LD_INT 0
32163: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32164: LD_INT 35
32166: PPUSH
32167: CALL_OW 67
// p := p + 1 ;
32171: LD_ADDR_VAR 0 2
32175: PUSH
32176: LD_VAR 0 2
32180: PUSH
32181: LD_INT 1
32183: PLUS
32184: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32185: LD_VAR 0 3
32189: PPUSH
32190: CALL_OW 256
32194: PUSH
32195: LD_INT 1000
32197: LESS
32198: IFFALSE 32212
// SetLives ( un , 1000 ) ;
32200: LD_VAR 0 3
32204: PPUSH
32205: LD_INT 1000
32207: PPUSH
32208: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32212: LD_VAR 0 3
32216: PPUSH
32217: LD_INT 81
32219: PUSH
32220: LD_OWVAR 2
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 91
32231: PUSH
32232: LD_VAR 0 3
32236: PUSH
32237: LD_INT 30
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: LIST
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PPUSH
32249: CALL_OW 69
32253: PPUSH
32254: LD_VAR 0 3
32258: PPUSH
32259: CALL_OW 74
32263: PPUSH
32264: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32268: LD_VAR 0 2
32272: PUSH
32273: LD_INT 80
32275: GREATER
32276: PUSH
32277: LD_VAR 0 3
32281: PPUSH
32282: CALL_OW 301
32286: OR
32287: IFFALSE 32164
// if un then
32289: LD_VAR 0 3
32293: IFFALSE 32304
// RemoveUnit ( un ) ;
32295: LD_VAR 0 3
32299: PPUSH
32300: CALL_OW 64
// end ;
32304: PPOPN 3
32306: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32307: LD_EXP 106
32311: IFFALSE 32427
32313: GO 32315
32315: DISABLE
32316: LD_INT 0
32318: PPUSH
32319: PPUSH
32320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32321: LD_ADDR_VAR 0 2
32325: PUSH
32326: LD_INT 81
32328: PUSH
32329: LD_OWVAR 2
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 21
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PPUSH
32352: CALL_OW 69
32356: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32357: LD_STRING playComputer()
32359: PPUSH
32360: CALL_OW 559
// if not tmp then
32364: LD_VAR 0 2
32368: NOT
32369: IFFALSE 32373
// exit ;
32371: GO 32427
// for i in tmp do
32373: LD_ADDR_VAR 0 1
32377: PUSH
32378: LD_VAR 0 2
32382: PUSH
32383: FOR_IN
32384: IFFALSE 32425
// for j := 1 to 4 do
32386: LD_ADDR_VAR 0 3
32390: PUSH
32391: DOUBLE
32392: LD_INT 1
32394: DEC
32395: ST_TO_ADDR
32396: LD_INT 4
32398: PUSH
32399: FOR_TO
32400: IFFALSE 32421
// SetSkill ( i , j , 10 ) ;
32402: LD_VAR 0 1
32406: PPUSH
32407: LD_VAR 0 3
32411: PPUSH
32412: LD_INT 10
32414: PPUSH
32415: CALL_OW 237
32419: GO 32399
32421: POP
32422: POP
32423: GO 32383
32425: POP
32426: POP
// end ;
32427: PPOPN 3
32429: END
// every 0 0$1 trigger s30 do var i , tmp ;
32430: LD_EXP 107
32434: IFFALSE 32503
32436: GO 32438
32438: DISABLE
32439: LD_INT 0
32441: PPUSH
32442: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32443: LD_ADDR_VAR 0 2
32447: PUSH
32448: LD_INT 22
32450: PUSH
32451: LD_OWVAR 2
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PPUSH
32460: CALL_OW 69
32464: ST_TO_ADDR
// if not tmp then
32465: LD_VAR 0 2
32469: NOT
32470: IFFALSE 32474
// exit ;
32472: GO 32503
// for i in tmp do
32474: LD_ADDR_VAR 0 1
32478: PUSH
32479: LD_VAR 0 2
32483: PUSH
32484: FOR_IN
32485: IFFALSE 32501
// SetLives ( i , 300 ) ;
32487: LD_VAR 0 1
32491: PPUSH
32492: LD_INT 300
32494: PPUSH
32495: CALL_OW 234
32499: GO 32484
32501: POP
32502: POP
// end ;
32503: PPOPN 2
32505: END
// every 0 0$1 trigger s60 do var i , tmp ;
32506: LD_EXP 108
32510: IFFALSE 32579
32512: GO 32514
32514: DISABLE
32515: LD_INT 0
32517: PPUSH
32518: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32519: LD_ADDR_VAR 0 2
32523: PUSH
32524: LD_INT 22
32526: PUSH
32527: LD_OWVAR 2
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PPUSH
32536: CALL_OW 69
32540: ST_TO_ADDR
// if not tmp then
32541: LD_VAR 0 2
32545: NOT
32546: IFFALSE 32550
// exit ;
32548: GO 32579
// for i in tmp do
32550: LD_ADDR_VAR 0 1
32554: PUSH
32555: LD_VAR 0 2
32559: PUSH
32560: FOR_IN
32561: IFFALSE 32577
// SetLives ( i , 600 ) ;
32563: LD_VAR 0 1
32567: PPUSH
32568: LD_INT 600
32570: PPUSH
32571: CALL_OW 234
32575: GO 32560
32577: POP
32578: POP
// end ;
32579: PPOPN 2
32581: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32582: LD_INT 0
32584: PPUSH
// case cmd of 301 :
32585: LD_VAR 0 1
32589: PUSH
32590: LD_INT 301
32592: DOUBLE
32593: EQUAL
32594: IFTRUE 32598
32596: GO 32630
32598: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32599: LD_VAR 0 6
32603: PPUSH
32604: LD_VAR 0 7
32608: PPUSH
32609: LD_VAR 0 8
32613: PPUSH
32614: LD_VAR 0 4
32618: PPUSH
32619: LD_VAR 0 5
32623: PPUSH
32624: CALL 33839 0 5
32628: GO 32751
32630: LD_INT 302
32632: DOUBLE
32633: EQUAL
32634: IFTRUE 32638
32636: GO 32675
32638: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32639: LD_VAR 0 6
32643: PPUSH
32644: LD_VAR 0 7
32648: PPUSH
32649: LD_VAR 0 8
32653: PPUSH
32654: LD_VAR 0 9
32658: PPUSH
32659: LD_VAR 0 4
32663: PPUSH
32664: LD_VAR 0 5
32668: PPUSH
32669: CALL 33930 0 6
32673: GO 32751
32675: LD_INT 303
32677: DOUBLE
32678: EQUAL
32679: IFTRUE 32683
32681: GO 32720
32683: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32684: LD_VAR 0 6
32688: PPUSH
32689: LD_VAR 0 7
32693: PPUSH
32694: LD_VAR 0 8
32698: PPUSH
32699: LD_VAR 0 9
32703: PPUSH
32704: LD_VAR 0 4
32708: PPUSH
32709: LD_VAR 0 5
32713: PPUSH
32714: CALL 32756 0 6
32718: GO 32751
32720: LD_INT 304
32722: DOUBLE
32723: EQUAL
32724: IFTRUE 32728
32726: GO 32750
32728: POP
// hHackTeleport ( unit , x , y ) ; end ;
32729: LD_VAR 0 2
32733: PPUSH
32734: LD_VAR 0 4
32738: PPUSH
32739: LD_VAR 0 5
32743: PPUSH
32744: CALL 34523 0 3
32748: GO 32751
32750: POP
// end ;
32751: LD_VAR 0 12
32755: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32756: LD_INT 0
32758: PPUSH
32759: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32760: LD_VAR 0 1
32764: PUSH
32765: LD_INT 1
32767: LESS
32768: PUSH
32769: LD_VAR 0 1
32773: PUSH
32774: LD_INT 3
32776: GREATER
32777: OR
32778: PUSH
32779: LD_VAR 0 5
32783: PPUSH
32784: LD_VAR 0 6
32788: PPUSH
32789: CALL_OW 428
32793: OR
32794: IFFALSE 32798
// exit ;
32796: GO 33526
// uc_side := your_side ;
32798: LD_ADDR_OWVAR 20
32802: PUSH
32803: LD_OWVAR 2
32807: ST_TO_ADDR
// uc_nation := nation ;
32808: LD_ADDR_OWVAR 21
32812: PUSH
32813: LD_VAR 0 1
32817: ST_TO_ADDR
// bc_level = 1 ;
32818: LD_ADDR_OWVAR 43
32822: PUSH
32823: LD_INT 1
32825: ST_TO_ADDR
// case btype of 1 :
32826: LD_VAR 0 2
32830: PUSH
32831: LD_INT 1
32833: DOUBLE
32834: EQUAL
32835: IFTRUE 32839
32837: GO 32850
32839: POP
// bc_type := b_depot ; 2 :
32840: LD_ADDR_OWVAR 42
32844: PUSH
32845: LD_INT 0
32847: ST_TO_ADDR
32848: GO 33470
32850: LD_INT 2
32852: DOUBLE
32853: EQUAL
32854: IFTRUE 32858
32856: GO 32869
32858: POP
// bc_type := b_warehouse ; 3 :
32859: LD_ADDR_OWVAR 42
32863: PUSH
32864: LD_INT 1
32866: ST_TO_ADDR
32867: GO 33470
32869: LD_INT 3
32871: DOUBLE
32872: EQUAL
32873: IFTRUE 32877
32875: GO 32888
32877: POP
// bc_type := b_lab ; 4 .. 9 :
32878: LD_ADDR_OWVAR 42
32882: PUSH
32883: LD_INT 6
32885: ST_TO_ADDR
32886: GO 33470
32888: LD_INT 4
32890: DOUBLE
32891: GREATEREQUAL
32892: IFFALSE 32900
32894: LD_INT 9
32896: DOUBLE
32897: LESSEQUAL
32898: IFTRUE 32902
32900: GO 32962
32902: POP
// begin bc_type := b_lab_half ;
32903: LD_ADDR_OWVAR 42
32907: PUSH
32908: LD_INT 7
32910: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32911: LD_ADDR_OWVAR 44
32915: PUSH
32916: LD_INT 10
32918: PUSH
32919: LD_INT 11
32921: PUSH
32922: LD_INT 12
32924: PUSH
32925: LD_INT 15
32927: PUSH
32928: LD_INT 14
32930: PUSH
32931: LD_INT 13
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: PUSH
32942: LD_VAR 0 2
32946: PUSH
32947: LD_INT 3
32949: MINUS
32950: ARRAY
32951: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32952: LD_ADDR_OWVAR 45
32956: PUSH
32957: LD_INT 9
32959: ST_TO_ADDR
// end ; 10 .. 13 :
32960: GO 33470
32962: LD_INT 10
32964: DOUBLE
32965: GREATEREQUAL
32966: IFFALSE 32974
32968: LD_INT 13
32970: DOUBLE
32971: LESSEQUAL
32972: IFTRUE 32976
32974: GO 33053
32976: POP
// begin bc_type := b_lab_full ;
32977: LD_ADDR_OWVAR 42
32981: PUSH
32982: LD_INT 8
32984: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32985: LD_ADDR_OWVAR 44
32989: PUSH
32990: LD_INT 10
32992: PUSH
32993: LD_INT 12
32995: PUSH
32996: LD_INT 14
32998: PUSH
32999: LD_INT 13
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: PUSH
33008: LD_VAR 0 2
33012: PUSH
33013: LD_INT 9
33015: MINUS
33016: ARRAY
33017: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33018: LD_ADDR_OWVAR 45
33022: PUSH
33023: LD_INT 11
33025: PUSH
33026: LD_INT 15
33028: PUSH
33029: LD_INT 12
33031: PUSH
33032: LD_INT 15
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: PUSH
33041: LD_VAR 0 2
33045: PUSH
33046: LD_INT 9
33048: MINUS
33049: ARRAY
33050: ST_TO_ADDR
// end ; 14 :
33051: GO 33470
33053: LD_INT 14
33055: DOUBLE
33056: EQUAL
33057: IFTRUE 33061
33059: GO 33072
33061: POP
// bc_type := b_workshop ; 15 :
33062: LD_ADDR_OWVAR 42
33066: PUSH
33067: LD_INT 2
33069: ST_TO_ADDR
33070: GO 33470
33072: LD_INT 15
33074: DOUBLE
33075: EQUAL
33076: IFTRUE 33080
33078: GO 33091
33080: POP
// bc_type := b_factory ; 16 :
33081: LD_ADDR_OWVAR 42
33085: PUSH
33086: LD_INT 3
33088: ST_TO_ADDR
33089: GO 33470
33091: LD_INT 16
33093: DOUBLE
33094: EQUAL
33095: IFTRUE 33099
33097: GO 33110
33099: POP
// bc_type := b_ext_gun ; 17 :
33100: LD_ADDR_OWVAR 42
33104: PUSH
33105: LD_INT 17
33107: ST_TO_ADDR
33108: GO 33470
33110: LD_INT 17
33112: DOUBLE
33113: EQUAL
33114: IFTRUE 33118
33116: GO 33146
33118: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33119: LD_ADDR_OWVAR 42
33123: PUSH
33124: LD_INT 19
33126: PUSH
33127: LD_INT 23
33129: PUSH
33130: LD_INT 19
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: LIST
33137: PUSH
33138: LD_VAR 0 1
33142: ARRAY
33143: ST_TO_ADDR
33144: GO 33470
33146: LD_INT 18
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33165
33154: POP
// bc_type := b_ext_radar ; 19 :
33155: LD_ADDR_OWVAR 42
33159: PUSH
33160: LD_INT 20
33162: ST_TO_ADDR
33163: GO 33470
33165: LD_INT 19
33167: DOUBLE
33168: EQUAL
33169: IFTRUE 33173
33171: GO 33184
33173: POP
// bc_type := b_ext_radio ; 20 :
33174: LD_ADDR_OWVAR 42
33178: PUSH
33179: LD_INT 22
33181: ST_TO_ADDR
33182: GO 33470
33184: LD_INT 20
33186: DOUBLE
33187: EQUAL
33188: IFTRUE 33192
33190: GO 33203
33192: POP
// bc_type := b_ext_siberium ; 21 :
33193: LD_ADDR_OWVAR 42
33197: PUSH
33198: LD_INT 21
33200: ST_TO_ADDR
33201: GO 33470
33203: LD_INT 21
33205: DOUBLE
33206: EQUAL
33207: IFTRUE 33211
33209: GO 33222
33211: POP
// bc_type := b_ext_computer ; 22 :
33212: LD_ADDR_OWVAR 42
33216: PUSH
33217: LD_INT 24
33219: ST_TO_ADDR
33220: GO 33470
33222: LD_INT 22
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33241
33230: POP
// bc_type := b_ext_track ; 23 :
33231: LD_ADDR_OWVAR 42
33235: PUSH
33236: LD_INT 16
33238: ST_TO_ADDR
33239: GO 33470
33241: LD_INT 23
33243: DOUBLE
33244: EQUAL
33245: IFTRUE 33249
33247: GO 33260
33249: POP
// bc_type := b_ext_laser ; 24 :
33250: LD_ADDR_OWVAR 42
33254: PUSH
33255: LD_INT 25
33257: ST_TO_ADDR
33258: GO 33470
33260: LD_INT 24
33262: DOUBLE
33263: EQUAL
33264: IFTRUE 33268
33266: GO 33279
33268: POP
// bc_type := b_control_tower ; 25 :
33269: LD_ADDR_OWVAR 42
33273: PUSH
33274: LD_INT 36
33276: ST_TO_ADDR
33277: GO 33470
33279: LD_INT 25
33281: DOUBLE
33282: EQUAL
33283: IFTRUE 33287
33285: GO 33298
33287: POP
// bc_type := b_breastwork ; 26 :
33288: LD_ADDR_OWVAR 42
33292: PUSH
33293: LD_INT 31
33295: ST_TO_ADDR
33296: GO 33470
33298: LD_INT 26
33300: DOUBLE
33301: EQUAL
33302: IFTRUE 33306
33304: GO 33317
33306: POP
// bc_type := b_bunker ; 27 :
33307: LD_ADDR_OWVAR 42
33311: PUSH
33312: LD_INT 32
33314: ST_TO_ADDR
33315: GO 33470
33317: LD_INT 27
33319: DOUBLE
33320: EQUAL
33321: IFTRUE 33325
33323: GO 33336
33325: POP
// bc_type := b_turret ; 28 :
33326: LD_ADDR_OWVAR 42
33330: PUSH
33331: LD_INT 33
33333: ST_TO_ADDR
33334: GO 33470
33336: LD_INT 28
33338: DOUBLE
33339: EQUAL
33340: IFTRUE 33344
33342: GO 33355
33344: POP
// bc_type := b_armoury ; 29 :
33345: LD_ADDR_OWVAR 42
33349: PUSH
33350: LD_INT 4
33352: ST_TO_ADDR
33353: GO 33470
33355: LD_INT 29
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33363
33361: GO 33374
33363: POP
// bc_type := b_barracks ; 30 :
33364: LD_ADDR_OWVAR 42
33368: PUSH
33369: LD_INT 5
33371: ST_TO_ADDR
33372: GO 33470
33374: LD_INT 30
33376: DOUBLE
33377: EQUAL
33378: IFTRUE 33382
33380: GO 33393
33382: POP
// bc_type := b_solar_power ; 31 :
33383: LD_ADDR_OWVAR 42
33387: PUSH
33388: LD_INT 27
33390: ST_TO_ADDR
33391: GO 33470
33393: LD_INT 31
33395: DOUBLE
33396: EQUAL
33397: IFTRUE 33401
33399: GO 33412
33401: POP
// bc_type := b_oil_power ; 32 :
33402: LD_ADDR_OWVAR 42
33406: PUSH
33407: LD_INT 26
33409: ST_TO_ADDR
33410: GO 33470
33412: LD_INT 32
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33420
33418: GO 33431
33420: POP
// bc_type := b_siberite_power ; 33 :
33421: LD_ADDR_OWVAR 42
33425: PUSH
33426: LD_INT 28
33428: ST_TO_ADDR
33429: GO 33470
33431: LD_INT 33
33433: DOUBLE
33434: EQUAL
33435: IFTRUE 33439
33437: GO 33450
33439: POP
// bc_type := b_oil_mine ; 34 :
33440: LD_ADDR_OWVAR 42
33444: PUSH
33445: LD_INT 29
33447: ST_TO_ADDR
33448: GO 33470
33450: LD_INT 34
33452: DOUBLE
33453: EQUAL
33454: IFTRUE 33458
33456: GO 33469
33458: POP
// bc_type := b_siberite_mine ; end ;
33459: LD_ADDR_OWVAR 42
33463: PUSH
33464: LD_INT 30
33466: ST_TO_ADDR
33467: GO 33470
33469: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33470: LD_ADDR_VAR 0 8
33474: PUSH
33475: LD_VAR 0 5
33479: PPUSH
33480: LD_VAR 0 6
33484: PPUSH
33485: LD_VAR 0 3
33489: PPUSH
33490: CALL_OW 47
33494: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33495: LD_OWVAR 42
33499: PUSH
33500: LD_INT 32
33502: PUSH
33503: LD_INT 33
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: IN
33510: IFFALSE 33526
// PlaceWeaponTurret ( b , weapon ) ;
33512: LD_VAR 0 8
33516: PPUSH
33517: LD_VAR 0 4
33521: PPUSH
33522: CALL_OW 431
// end ;
33526: LD_VAR 0 7
33530: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33531: LD_INT 0
33533: PPUSH
33534: PPUSH
33535: PPUSH
33536: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33537: LD_ADDR_VAR 0 4
33541: PUSH
33542: LD_INT 22
33544: PUSH
33545: LD_OWVAR 2
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: LD_INT 30
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 30
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: LIST
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PPUSH
33586: CALL_OW 69
33590: ST_TO_ADDR
// if not tmp then
33591: LD_VAR 0 4
33595: NOT
33596: IFFALSE 33600
// exit ;
33598: GO 33659
// for i in tmp do
33600: LD_ADDR_VAR 0 2
33604: PUSH
33605: LD_VAR 0 4
33609: PUSH
33610: FOR_IN
33611: IFFALSE 33657
// for j = 1 to 3 do
33613: LD_ADDR_VAR 0 3
33617: PUSH
33618: DOUBLE
33619: LD_INT 1
33621: DEC
33622: ST_TO_ADDR
33623: LD_INT 3
33625: PUSH
33626: FOR_TO
33627: IFFALSE 33653
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33629: LD_VAR 0 2
33633: PPUSH
33634: CALL_OW 274
33638: PPUSH
33639: LD_VAR 0 3
33643: PPUSH
33644: LD_INT 99999
33646: PPUSH
33647: CALL_OW 277
33651: GO 33626
33653: POP
33654: POP
33655: GO 33610
33657: POP
33658: POP
// end ;
33659: LD_VAR 0 1
33663: RET
// export function hHackSetLevel10 ; var i , j ; begin
33664: LD_INT 0
33666: PPUSH
33667: PPUSH
33668: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33669: LD_ADDR_VAR 0 2
33673: PUSH
33674: LD_INT 21
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PPUSH
33684: CALL_OW 69
33688: PUSH
33689: FOR_IN
33690: IFFALSE 33742
// if IsSelected ( i ) then
33692: LD_VAR 0 2
33696: PPUSH
33697: CALL_OW 306
33701: IFFALSE 33740
// begin for j := 1 to 4 do
33703: LD_ADDR_VAR 0 3
33707: PUSH
33708: DOUBLE
33709: LD_INT 1
33711: DEC
33712: ST_TO_ADDR
33713: LD_INT 4
33715: PUSH
33716: FOR_TO
33717: IFFALSE 33738
// SetSkill ( i , j , 10 ) ;
33719: LD_VAR 0 2
33723: PPUSH
33724: LD_VAR 0 3
33728: PPUSH
33729: LD_INT 10
33731: PPUSH
33732: CALL_OW 237
33736: GO 33716
33738: POP
33739: POP
// end ;
33740: GO 33689
33742: POP
33743: POP
// end ;
33744: LD_VAR 0 1
33748: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33749: LD_INT 0
33751: PPUSH
33752: PPUSH
33753: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33754: LD_ADDR_VAR 0 2
33758: PUSH
33759: LD_INT 22
33761: PUSH
33762: LD_OWVAR 2
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 21
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PPUSH
33785: CALL_OW 69
33789: PUSH
33790: FOR_IN
33791: IFFALSE 33832
// begin for j := 1 to 4 do
33793: LD_ADDR_VAR 0 3
33797: PUSH
33798: DOUBLE
33799: LD_INT 1
33801: DEC
33802: ST_TO_ADDR
33803: LD_INT 4
33805: PUSH
33806: FOR_TO
33807: IFFALSE 33828
// SetSkill ( i , j , 10 ) ;
33809: LD_VAR 0 2
33813: PPUSH
33814: LD_VAR 0 3
33818: PPUSH
33819: LD_INT 10
33821: PPUSH
33822: CALL_OW 237
33826: GO 33806
33828: POP
33829: POP
// end ;
33830: GO 33790
33832: POP
33833: POP
// end ;
33834: LD_VAR 0 1
33838: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33839: LD_INT 0
33841: PPUSH
// uc_side := your_side ;
33842: LD_ADDR_OWVAR 20
33846: PUSH
33847: LD_OWVAR 2
33851: ST_TO_ADDR
// uc_nation := nation ;
33852: LD_ADDR_OWVAR 21
33856: PUSH
33857: LD_VAR 0 1
33861: ST_TO_ADDR
// InitHc ;
33862: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33866: LD_INT 0
33868: PPUSH
33869: LD_VAR 0 2
33873: PPUSH
33874: LD_VAR 0 3
33878: PPUSH
33879: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33883: LD_VAR 0 4
33887: PPUSH
33888: LD_VAR 0 5
33892: PPUSH
33893: CALL_OW 428
33897: PUSH
33898: LD_INT 0
33900: EQUAL
33901: IFFALSE 33925
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33903: CALL_OW 44
33907: PPUSH
33908: LD_VAR 0 4
33912: PPUSH
33913: LD_VAR 0 5
33917: PPUSH
33918: LD_INT 1
33920: PPUSH
33921: CALL_OW 48
// end ;
33925: LD_VAR 0 6
33929: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33930: LD_INT 0
33932: PPUSH
33933: PPUSH
// uc_side := your_side ;
33934: LD_ADDR_OWVAR 20
33938: PUSH
33939: LD_OWVAR 2
33943: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33944: LD_VAR 0 1
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: LD_INT 3
33957: PUSH
33958: LD_INT 4
33960: PUSH
33961: LD_INT 5
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: IN
33971: IFFALSE 33983
// uc_nation := nation_american else
33973: LD_ADDR_OWVAR 21
33977: PUSH
33978: LD_INT 1
33980: ST_TO_ADDR
33981: GO 34026
// if chassis in [ 11 , 12 , 13 , 14 ] then
33983: LD_VAR 0 1
33987: PUSH
33988: LD_INT 11
33990: PUSH
33991: LD_INT 12
33993: PUSH
33994: LD_INT 13
33996: PUSH
33997: LD_INT 14
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: IN
34006: IFFALSE 34018
// uc_nation := nation_arabian else
34008: LD_ADDR_OWVAR 21
34012: PUSH
34013: LD_INT 2
34015: ST_TO_ADDR
34016: GO 34026
// uc_nation := nation_russian ;
34018: LD_ADDR_OWVAR 21
34022: PUSH
34023: LD_INT 3
34025: ST_TO_ADDR
// vc_chassis := chassis ;
34026: LD_ADDR_OWVAR 37
34030: PUSH
34031: LD_VAR 0 1
34035: ST_TO_ADDR
// vc_engine := engine ;
34036: LD_ADDR_OWVAR 39
34040: PUSH
34041: LD_VAR 0 2
34045: ST_TO_ADDR
// vc_control := control ;
34046: LD_ADDR_OWVAR 38
34050: PUSH
34051: LD_VAR 0 3
34055: ST_TO_ADDR
// vc_weapon := weapon ;
34056: LD_ADDR_OWVAR 40
34060: PUSH
34061: LD_VAR 0 4
34065: ST_TO_ADDR
// un := CreateVehicle ;
34066: LD_ADDR_VAR 0 8
34070: PUSH
34071: CALL_OW 45
34075: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34076: LD_VAR 0 8
34080: PPUSH
34081: LD_INT 0
34083: PPUSH
34084: LD_INT 5
34086: PPUSH
34087: CALL_OW 12
34091: PPUSH
34092: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34096: LD_VAR 0 8
34100: PPUSH
34101: LD_VAR 0 5
34105: PPUSH
34106: LD_VAR 0 6
34110: PPUSH
34111: LD_INT 1
34113: PPUSH
34114: CALL_OW 48
// end ;
34118: LD_VAR 0 7
34122: RET
// export hInvincible ; every 1 do
34123: GO 34125
34125: DISABLE
// hInvincible := [ ] ;
34126: LD_ADDR_EXP 109
34130: PUSH
34131: EMPTY
34132: ST_TO_ADDR
34133: END
// every 10 do var i ;
34134: GO 34136
34136: DISABLE
34137: LD_INT 0
34139: PPUSH
// begin enable ;
34140: ENABLE
// if not hInvincible then
34141: LD_EXP 109
34145: NOT
34146: IFFALSE 34150
// exit ;
34148: GO 34194
// for i in hInvincible do
34150: LD_ADDR_VAR 0 1
34154: PUSH
34155: LD_EXP 109
34159: PUSH
34160: FOR_IN
34161: IFFALSE 34192
// if GetLives ( i ) < 1000 then
34163: LD_VAR 0 1
34167: PPUSH
34168: CALL_OW 256
34172: PUSH
34173: LD_INT 1000
34175: LESS
34176: IFFALSE 34190
// SetLives ( i , 1000 ) ;
34178: LD_VAR 0 1
34182: PPUSH
34183: LD_INT 1000
34185: PPUSH
34186: CALL_OW 234
34190: GO 34160
34192: POP
34193: POP
// end ;
34194: PPOPN 1
34196: END
// export function hHackInvincible ; var i ; begin
34197: LD_INT 0
34199: PPUSH
34200: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34201: LD_ADDR_VAR 0 2
34205: PUSH
34206: LD_INT 2
34208: PUSH
34209: LD_INT 21
34211: PUSH
34212: LD_INT 1
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 21
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: LIST
34233: PPUSH
34234: CALL_OW 69
34238: PUSH
34239: FOR_IN
34240: IFFALSE 34301
// if IsSelected ( i ) then
34242: LD_VAR 0 2
34246: PPUSH
34247: CALL_OW 306
34251: IFFALSE 34299
// begin if i in hInvincible then
34253: LD_VAR 0 2
34257: PUSH
34258: LD_EXP 109
34262: IN
34263: IFFALSE 34283
// hInvincible := hInvincible diff i else
34265: LD_ADDR_EXP 109
34269: PUSH
34270: LD_EXP 109
34274: PUSH
34275: LD_VAR 0 2
34279: DIFF
34280: ST_TO_ADDR
34281: GO 34299
// hInvincible := hInvincible union i ;
34283: LD_ADDR_EXP 109
34287: PUSH
34288: LD_EXP 109
34292: PUSH
34293: LD_VAR 0 2
34297: UNION
34298: ST_TO_ADDR
// end ;
34299: GO 34239
34301: POP
34302: POP
// end ;
34303: LD_VAR 0 1
34307: RET
// export function hHackInvisible ; var i , j ; begin
34308: LD_INT 0
34310: PPUSH
34311: PPUSH
34312: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34313: LD_ADDR_VAR 0 2
34317: PUSH
34318: LD_INT 21
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PPUSH
34328: CALL_OW 69
34332: PUSH
34333: FOR_IN
34334: IFFALSE 34358
// if IsSelected ( i ) then
34336: LD_VAR 0 2
34340: PPUSH
34341: CALL_OW 306
34345: IFFALSE 34356
// ComForceInvisible ( i ) ;
34347: LD_VAR 0 2
34351: PPUSH
34352: CALL_OW 496
34356: GO 34333
34358: POP
34359: POP
// end ;
34360: LD_VAR 0 1
34364: RET
// export function hHackChangeYourSide ; begin
34365: LD_INT 0
34367: PPUSH
// if your_side = 8 then
34368: LD_OWVAR 2
34372: PUSH
34373: LD_INT 8
34375: EQUAL
34376: IFFALSE 34388
// your_side := 0 else
34378: LD_ADDR_OWVAR 2
34382: PUSH
34383: LD_INT 0
34385: ST_TO_ADDR
34386: GO 34402
// your_side := your_side + 1 ;
34388: LD_ADDR_OWVAR 2
34392: PUSH
34393: LD_OWVAR 2
34397: PUSH
34398: LD_INT 1
34400: PLUS
34401: ST_TO_ADDR
// end ;
34402: LD_VAR 0 1
34406: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34407: LD_INT 0
34409: PPUSH
34410: PPUSH
34411: PPUSH
// for i in all_units do
34412: LD_ADDR_VAR 0 2
34416: PUSH
34417: LD_OWVAR 3
34421: PUSH
34422: FOR_IN
34423: IFFALSE 34501
// if IsSelected ( i ) then
34425: LD_VAR 0 2
34429: PPUSH
34430: CALL_OW 306
34434: IFFALSE 34499
// begin j := GetSide ( i ) ;
34436: LD_ADDR_VAR 0 3
34440: PUSH
34441: LD_VAR 0 2
34445: PPUSH
34446: CALL_OW 255
34450: ST_TO_ADDR
// if j = 8 then
34451: LD_VAR 0 3
34455: PUSH
34456: LD_INT 8
34458: EQUAL
34459: IFFALSE 34471
// j := 0 else
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_INT 0
34468: ST_TO_ADDR
34469: GO 34485
// j := j + 1 ;
34471: LD_ADDR_VAR 0 3
34475: PUSH
34476: LD_VAR 0 3
34480: PUSH
34481: LD_INT 1
34483: PLUS
34484: ST_TO_ADDR
// SetSide ( i , j ) ;
34485: LD_VAR 0 2
34489: PPUSH
34490: LD_VAR 0 3
34494: PPUSH
34495: CALL_OW 235
// end ;
34499: GO 34422
34501: POP
34502: POP
// end ;
34503: LD_VAR 0 1
34507: RET
// export function hHackFog ; begin
34508: LD_INT 0
34510: PPUSH
// FogOff ( true ) ;
34511: LD_INT 1
34513: PPUSH
34514: CALL_OW 344
// end ;
34518: LD_VAR 0 1
34522: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34523: LD_INT 0
34525: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34526: LD_VAR 0 1
34530: PPUSH
34531: LD_VAR 0 2
34535: PPUSH
34536: LD_VAR 0 3
34540: PPUSH
34541: LD_INT 1
34543: PPUSH
34544: LD_INT 1
34546: PPUSH
34547: CALL_OW 483
// CenterOnXY ( x , y ) ;
34551: LD_VAR 0 2
34555: PPUSH
34556: LD_VAR 0 3
34560: PPUSH
34561: CALL_OW 84
// end ;
34565: LD_VAR 0 4
34569: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34570: LD_INT 0
34572: PPUSH
34573: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34574: LD_VAR 0 1
34578: NOT
34579: PUSH
34580: LD_VAR 0 2
34584: PPUSH
34585: LD_VAR 0 3
34589: PPUSH
34590: CALL_OW 488
34594: NOT
34595: OR
34596: PUSH
34597: LD_VAR 0 1
34601: PPUSH
34602: CALL_OW 266
34606: PUSH
34607: LD_INT 3
34609: NONEQUAL
34610: PUSH
34611: LD_VAR 0 1
34615: PPUSH
34616: CALL_OW 247
34620: PUSH
34621: LD_INT 1
34623: EQUAL
34624: NOT
34625: AND
34626: OR
34627: IFFALSE 34631
// exit ;
34629: GO 34780
// if GetType ( factory ) = unit_human then
34631: LD_VAR 0 1
34635: PPUSH
34636: CALL_OW 247
34640: PUSH
34641: LD_INT 1
34643: EQUAL
34644: IFFALSE 34661
// factory := IsInUnit ( factory ) ;
34646: LD_ADDR_VAR 0 1
34650: PUSH
34651: LD_VAR 0 1
34655: PPUSH
34656: CALL_OW 310
34660: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34661: LD_VAR 0 1
34665: PPUSH
34666: CALL_OW 266
34670: PUSH
34671: LD_INT 3
34673: NONEQUAL
34674: IFFALSE 34678
// exit ;
34676: GO 34780
// if HexInfo ( x , y ) = factory then
34678: LD_VAR 0 2
34682: PPUSH
34683: LD_VAR 0 3
34687: PPUSH
34688: CALL_OW 428
34692: PUSH
34693: LD_VAR 0 1
34697: EQUAL
34698: IFFALSE 34725
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34700: LD_ADDR_EXP 110
34704: PUSH
34705: LD_EXP 110
34709: PPUSH
34710: LD_VAR 0 1
34714: PPUSH
34715: LD_INT 0
34717: PPUSH
34718: CALL_OW 1
34722: ST_TO_ADDR
34723: GO 34776
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34725: LD_ADDR_EXP 110
34729: PUSH
34730: LD_EXP 110
34734: PPUSH
34735: LD_VAR 0 1
34739: PPUSH
34740: LD_VAR 0 1
34744: PPUSH
34745: CALL_OW 255
34749: PUSH
34750: LD_VAR 0 1
34754: PUSH
34755: LD_VAR 0 2
34759: PUSH
34760: LD_VAR 0 3
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: PPUSH
34771: CALL_OW 1
34775: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34776: CALL 34785 0 0
// end ;
34780: LD_VAR 0 4
34784: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34785: LD_INT 0
34787: PPUSH
34788: PPUSH
34789: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34790: LD_STRING resetFactoryWaypoint();
34792: PPUSH
34793: CALL_OW 559
// if factoryWaypoints then
34797: LD_EXP 110
34801: IFFALSE 34927
// begin list := PrepareArray ( factoryWaypoints ) ;
34803: LD_ADDR_VAR 0 3
34807: PUSH
34808: LD_EXP 110
34812: PPUSH
34813: CALL 82069 0 1
34817: ST_TO_ADDR
// for i := 1 to list do
34818: LD_ADDR_VAR 0 2
34822: PUSH
34823: DOUBLE
34824: LD_INT 1
34826: DEC
34827: ST_TO_ADDR
34828: LD_VAR 0 3
34832: PUSH
34833: FOR_TO
34834: IFFALSE 34925
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34836: LD_STRING setFactoryWaypointXY(
34838: PUSH
34839: LD_VAR 0 3
34843: PUSH
34844: LD_VAR 0 2
34848: ARRAY
34849: PUSH
34850: LD_INT 1
34852: ARRAY
34853: STR
34854: PUSH
34855: LD_STRING ,
34857: STR
34858: PUSH
34859: LD_VAR 0 3
34863: PUSH
34864: LD_VAR 0 2
34868: ARRAY
34869: PUSH
34870: LD_INT 2
34872: ARRAY
34873: STR
34874: PUSH
34875: LD_STRING ,
34877: STR
34878: PUSH
34879: LD_VAR 0 3
34883: PUSH
34884: LD_VAR 0 2
34888: ARRAY
34889: PUSH
34890: LD_INT 3
34892: ARRAY
34893: STR
34894: PUSH
34895: LD_STRING ,
34897: STR
34898: PUSH
34899: LD_VAR 0 3
34903: PUSH
34904: LD_VAR 0 2
34908: ARRAY
34909: PUSH
34910: LD_INT 4
34912: ARRAY
34913: STR
34914: PUSH
34915: LD_STRING )
34917: STR
34918: PPUSH
34919: CALL_OW 559
34923: GO 34833
34925: POP
34926: POP
// end ; end ;
34927: LD_VAR 0 1
34931: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34932: LD_INT 0
34934: PPUSH
// if HexInfo ( x , y ) = warehouse then
34935: LD_VAR 0 2
34939: PPUSH
34940: LD_VAR 0 3
34944: PPUSH
34945: CALL_OW 428
34949: PUSH
34950: LD_VAR 0 1
34954: EQUAL
34955: IFFALSE 34982
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34957: LD_ADDR_EXP 111
34961: PUSH
34962: LD_EXP 111
34966: PPUSH
34967: LD_VAR 0 1
34971: PPUSH
34972: LD_INT 0
34974: PPUSH
34975: CALL_OW 1
34979: ST_TO_ADDR
34980: GO 35033
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34982: LD_ADDR_EXP 111
34986: PUSH
34987: LD_EXP 111
34991: PPUSH
34992: LD_VAR 0 1
34996: PPUSH
34997: LD_VAR 0 1
35001: PPUSH
35002: CALL_OW 255
35006: PUSH
35007: LD_VAR 0 1
35011: PUSH
35012: LD_VAR 0 2
35016: PUSH
35017: LD_VAR 0 3
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: PPUSH
35028: CALL_OW 1
35032: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35033: CALL 35042 0 0
// end ;
35037: LD_VAR 0 4
35041: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35042: LD_INT 0
35044: PPUSH
35045: PPUSH
35046: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35047: LD_STRING resetWarehouseGatheringPoints();
35049: PPUSH
35050: CALL_OW 559
// if warehouseGatheringPoints then
35054: LD_EXP 111
35058: IFFALSE 35184
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35060: LD_ADDR_VAR 0 3
35064: PUSH
35065: LD_EXP 111
35069: PPUSH
35070: CALL 82069 0 1
35074: ST_TO_ADDR
// for i := 1 to list do
35075: LD_ADDR_VAR 0 2
35079: PUSH
35080: DOUBLE
35081: LD_INT 1
35083: DEC
35084: ST_TO_ADDR
35085: LD_VAR 0 3
35089: PUSH
35090: FOR_TO
35091: IFFALSE 35182
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35093: LD_STRING setWarehouseGatheringPointXY(
35095: PUSH
35096: LD_VAR 0 3
35100: PUSH
35101: LD_VAR 0 2
35105: ARRAY
35106: PUSH
35107: LD_INT 1
35109: ARRAY
35110: STR
35111: PUSH
35112: LD_STRING ,
35114: STR
35115: PUSH
35116: LD_VAR 0 3
35120: PUSH
35121: LD_VAR 0 2
35125: ARRAY
35126: PUSH
35127: LD_INT 2
35129: ARRAY
35130: STR
35131: PUSH
35132: LD_STRING ,
35134: STR
35135: PUSH
35136: LD_VAR 0 3
35140: PUSH
35141: LD_VAR 0 2
35145: ARRAY
35146: PUSH
35147: LD_INT 3
35149: ARRAY
35150: STR
35151: PUSH
35152: LD_STRING ,
35154: STR
35155: PUSH
35156: LD_VAR 0 3
35160: PUSH
35161: LD_VAR 0 2
35165: ARRAY
35166: PUSH
35167: LD_INT 4
35169: ARRAY
35170: STR
35171: PUSH
35172: LD_STRING )
35174: STR
35175: PPUSH
35176: CALL_OW 559
35180: GO 35090
35182: POP
35183: POP
// end ; end ;
35184: LD_VAR 0 1
35188: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35189: LD_EXP 111
35193: IFFALSE 35878
35195: GO 35197
35197: DISABLE
35198: LD_INT 0
35200: PPUSH
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
// begin enable ;
35209: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35210: LD_ADDR_VAR 0 3
35214: PUSH
35215: LD_EXP 111
35219: PPUSH
35220: CALL 82069 0 1
35224: ST_TO_ADDR
// if not list then
35225: LD_VAR 0 3
35229: NOT
35230: IFFALSE 35234
// exit ;
35232: GO 35878
// for i := 1 to list do
35234: LD_ADDR_VAR 0 1
35238: PUSH
35239: DOUBLE
35240: LD_INT 1
35242: DEC
35243: ST_TO_ADDR
35244: LD_VAR 0 3
35248: PUSH
35249: FOR_TO
35250: IFFALSE 35876
// begin depot := list [ i ] [ 2 ] ;
35252: LD_ADDR_VAR 0 8
35256: PUSH
35257: LD_VAR 0 3
35261: PUSH
35262: LD_VAR 0 1
35266: ARRAY
35267: PUSH
35268: LD_INT 2
35270: ARRAY
35271: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35272: LD_ADDR_VAR 0 5
35276: PUSH
35277: LD_VAR 0 3
35281: PUSH
35282: LD_VAR 0 1
35286: ARRAY
35287: PUSH
35288: LD_INT 1
35290: ARRAY
35291: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35292: LD_VAR 0 8
35296: PPUSH
35297: CALL_OW 301
35301: PUSH
35302: LD_VAR 0 5
35306: PUSH
35307: LD_VAR 0 8
35311: PPUSH
35312: CALL_OW 255
35316: NONEQUAL
35317: OR
35318: IFFALSE 35347
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35320: LD_ADDR_EXP 111
35324: PUSH
35325: LD_EXP 111
35329: PPUSH
35330: LD_VAR 0 8
35334: PPUSH
35335: LD_INT 0
35337: PPUSH
35338: CALL_OW 1
35342: ST_TO_ADDR
// exit ;
35343: POP
35344: POP
35345: GO 35878
// end ; x := list [ i ] [ 3 ] ;
35347: LD_ADDR_VAR 0 6
35351: PUSH
35352: LD_VAR 0 3
35356: PUSH
35357: LD_VAR 0 1
35361: ARRAY
35362: PUSH
35363: LD_INT 3
35365: ARRAY
35366: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35367: LD_ADDR_VAR 0 7
35371: PUSH
35372: LD_VAR 0 3
35376: PUSH
35377: LD_VAR 0 1
35381: ARRAY
35382: PUSH
35383: LD_INT 4
35385: ARRAY
35386: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35387: LD_ADDR_VAR 0 9
35391: PUSH
35392: LD_VAR 0 6
35396: PPUSH
35397: LD_VAR 0 7
35401: PPUSH
35402: LD_INT 16
35404: PPUSH
35405: CALL 80657 0 3
35409: ST_TO_ADDR
// if not cratesNearbyPoint then
35410: LD_VAR 0 9
35414: NOT
35415: IFFALSE 35421
// exit ;
35417: POP
35418: POP
35419: GO 35878
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35421: LD_ADDR_VAR 0 4
35425: PUSH
35426: LD_INT 22
35428: PUSH
35429: LD_VAR 0 5
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 3
35440: PUSH
35441: LD_INT 60
35443: PUSH
35444: EMPTY
35445: LIST
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 91
35453: PUSH
35454: LD_VAR 0 8
35458: PUSH
35459: LD_INT 6
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: LD_INT 25
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 25
35482: PUSH
35483: LD_INT 16
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: PPUSH
35501: CALL_OW 69
35505: PUSH
35506: LD_VAR 0 8
35510: PPUSH
35511: CALL_OW 313
35515: PPUSH
35516: LD_INT 3
35518: PUSH
35519: LD_INT 60
35521: PUSH
35522: EMPTY
35523: LIST
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 2
35531: PUSH
35532: LD_INT 25
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 25
35544: PUSH
35545: LD_INT 16
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: LIST
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PPUSH
35561: CALL_OW 72
35565: UNION
35566: ST_TO_ADDR
// if tmp then
35567: LD_VAR 0 4
35571: IFFALSE 35651
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35573: LD_ADDR_VAR 0 4
35577: PUSH
35578: LD_VAR 0 4
35582: PPUSH
35583: LD_INT 3
35585: PPUSH
35586: CALL 78626 0 2
35590: ST_TO_ADDR
// for j in tmp do
35591: LD_ADDR_VAR 0 2
35595: PUSH
35596: LD_VAR 0 4
35600: PUSH
35601: FOR_IN
35602: IFFALSE 35645
// begin if IsInUnit ( j ) then
35604: LD_VAR 0 2
35608: PPUSH
35609: CALL_OW 310
35613: IFFALSE 35624
// ComExit ( j ) ;
35615: LD_VAR 0 2
35619: PPUSH
35620: CALL 78709 0 1
// AddComCollect ( j , x , y ) ;
35624: LD_VAR 0 2
35628: PPUSH
35629: LD_VAR 0 6
35633: PPUSH
35634: LD_VAR 0 7
35638: PPUSH
35639: CALL_OW 177
// end ;
35643: GO 35601
35645: POP
35646: POP
// exit ;
35647: POP
35648: POP
35649: GO 35878
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35651: LD_ADDR_VAR 0 4
35655: PUSH
35656: LD_INT 22
35658: PUSH
35659: LD_VAR 0 5
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 91
35670: PUSH
35671: LD_VAR 0 8
35675: PUSH
35676: LD_INT 8
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: LD_INT 34
35689: PUSH
35690: LD_INT 12
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 34
35699: PUSH
35700: LD_INT 51
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 34
35709: PUSH
35710: LD_INT 32
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 34
35719: PUSH
35720: LD_INT 89
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: PPUSH
35739: CALL_OW 69
35743: ST_TO_ADDR
// if tmp then
35744: LD_VAR 0 4
35748: IFFALSE 35874
// begin for j in tmp do
35750: LD_ADDR_VAR 0 2
35754: PUSH
35755: LD_VAR 0 4
35759: PUSH
35760: FOR_IN
35761: IFFALSE 35872
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35763: LD_VAR 0 2
35767: PPUSH
35768: CALL_OW 262
35772: PUSH
35773: LD_INT 3
35775: EQUAL
35776: PUSH
35777: LD_VAR 0 2
35781: PPUSH
35782: CALL_OW 261
35786: PUSH
35787: LD_INT 20
35789: GREATER
35790: OR
35791: PUSH
35792: LD_VAR 0 2
35796: PPUSH
35797: CALL_OW 314
35801: NOT
35802: AND
35803: PUSH
35804: LD_VAR 0 2
35808: PPUSH
35809: CALL_OW 263
35813: PUSH
35814: LD_INT 1
35816: NONEQUAL
35817: PUSH
35818: LD_VAR 0 2
35822: PPUSH
35823: CALL_OW 311
35827: OR
35828: AND
35829: IFFALSE 35870
// begin ComCollect ( j , x , y ) ;
35831: LD_VAR 0 2
35835: PPUSH
35836: LD_VAR 0 6
35840: PPUSH
35841: LD_VAR 0 7
35845: PPUSH
35846: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35850: LD_VAR 0 2
35854: PPUSH
35855: LD_VAR 0 8
35859: PPUSH
35860: CALL_OW 172
// exit ;
35864: POP
35865: POP
35866: POP
35867: POP
35868: GO 35878
// end ;
35870: GO 35760
35872: POP
35873: POP
// end ; end ;
35874: GO 35249
35876: POP
35877: POP
// end ; end_of_file
35878: PPOPN 9
35880: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35881: LD_INT 0
35883: PPUSH
35884: PPUSH
35885: PPUSH
35886: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35887: LD_VAR 0 1
35891: PPUSH
35892: CALL_OW 264
35896: PUSH
35897: LD_INT 91
35899: EQUAL
35900: IFFALSE 35972
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35902: LD_INT 68
35904: PPUSH
35905: LD_VAR 0 1
35909: PPUSH
35910: CALL_OW 255
35914: PPUSH
35915: CALL_OW 321
35919: PUSH
35920: LD_INT 2
35922: EQUAL
35923: IFFALSE 35935
// eff := 70 else
35925: LD_ADDR_VAR 0 4
35929: PUSH
35930: LD_INT 70
35932: ST_TO_ADDR
35933: GO 35943
// eff := 30 ;
35935: LD_ADDR_VAR 0 4
35939: PUSH
35940: LD_INT 30
35942: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35943: LD_VAR 0 1
35947: PPUSH
35948: CALL_OW 250
35952: PPUSH
35953: LD_VAR 0 1
35957: PPUSH
35958: CALL_OW 251
35962: PPUSH
35963: LD_VAR 0 4
35967: PPUSH
35968: CALL_OW 495
// end ; end ;
35972: LD_VAR 0 2
35976: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35977: LD_INT 0
35979: PPUSH
// end ;
35980: LD_VAR 0 4
35984: RET
// export function SOS_Command ( cmd ) ; begin
35985: LD_INT 0
35987: PPUSH
// end ;
35988: LD_VAR 0 2
35992: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35993: LD_INT 0
35995: PPUSH
// end ;
35996: LD_VAR 0 6
36000: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36001: LD_INT 0
36003: PPUSH
36004: PPUSH
// if not vehicle or not factory then
36005: LD_VAR 0 1
36009: NOT
36010: PUSH
36011: LD_VAR 0 2
36015: NOT
36016: OR
36017: IFFALSE 36021
// exit ;
36019: GO 36252
// if factoryWaypoints >= factory then
36021: LD_EXP 110
36025: PUSH
36026: LD_VAR 0 2
36030: GREATEREQUAL
36031: IFFALSE 36252
// if factoryWaypoints [ factory ] then
36033: LD_EXP 110
36037: PUSH
36038: LD_VAR 0 2
36042: ARRAY
36043: IFFALSE 36252
// begin if GetControl ( vehicle ) = control_manual then
36045: LD_VAR 0 1
36049: PPUSH
36050: CALL_OW 263
36054: PUSH
36055: LD_INT 1
36057: EQUAL
36058: IFFALSE 36139
// begin driver := IsDrivenBy ( vehicle ) ;
36060: LD_ADDR_VAR 0 4
36064: PUSH
36065: LD_VAR 0 1
36069: PPUSH
36070: CALL_OW 311
36074: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36075: LD_VAR 0 4
36079: PPUSH
36080: LD_EXP 110
36084: PUSH
36085: LD_VAR 0 2
36089: ARRAY
36090: PUSH
36091: LD_INT 3
36093: ARRAY
36094: PPUSH
36095: LD_EXP 110
36099: PUSH
36100: LD_VAR 0 2
36104: ARRAY
36105: PUSH
36106: LD_INT 4
36108: ARRAY
36109: PPUSH
36110: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36114: LD_VAR 0 4
36118: PPUSH
36119: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36123: LD_VAR 0 4
36127: PPUSH
36128: LD_VAR 0 2
36132: PPUSH
36133: CALL_OW 180
// end else
36137: GO 36252
// if GetControl ( vehicle ) = control_remote then
36139: LD_VAR 0 1
36143: PPUSH
36144: CALL_OW 263
36148: PUSH
36149: LD_INT 2
36151: EQUAL
36152: IFFALSE 36213
// begin wait ( 0 0$2 ) ;
36154: LD_INT 70
36156: PPUSH
36157: CALL_OW 67
// if Connect ( vehicle ) then
36161: LD_VAR 0 1
36165: PPUSH
36166: CALL 48917 0 1
36170: IFFALSE 36211
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36172: LD_VAR 0 1
36176: PPUSH
36177: LD_EXP 110
36181: PUSH
36182: LD_VAR 0 2
36186: ARRAY
36187: PUSH
36188: LD_INT 3
36190: ARRAY
36191: PPUSH
36192: LD_EXP 110
36196: PUSH
36197: LD_VAR 0 2
36201: ARRAY
36202: PUSH
36203: LD_INT 4
36205: ARRAY
36206: PPUSH
36207: CALL_OW 171
// end else
36211: GO 36252
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36213: LD_VAR 0 1
36217: PPUSH
36218: LD_EXP 110
36222: PUSH
36223: LD_VAR 0 2
36227: ARRAY
36228: PUSH
36229: LD_INT 3
36231: ARRAY
36232: PPUSH
36233: LD_EXP 110
36237: PUSH
36238: LD_VAR 0 2
36242: ARRAY
36243: PUSH
36244: LD_INT 4
36246: ARRAY
36247: PPUSH
36248: CALL_OW 171
// end ; end ;
36252: LD_VAR 0 3
36256: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36257: LD_INT 0
36259: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36260: LD_VAR 0 1
36264: PUSH
36265: LD_INT 250
36267: EQUAL
36268: PUSH
36269: LD_VAR 0 2
36273: PPUSH
36274: CALL_OW 264
36278: PUSH
36279: LD_INT 81
36281: EQUAL
36282: AND
36283: IFFALSE 36304
// MinerPlaceMine ( unit , x , y ) ;
36285: LD_VAR 0 2
36289: PPUSH
36290: LD_VAR 0 4
36294: PPUSH
36295: LD_VAR 0 5
36299: PPUSH
36300: CALL 39128 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36304: LD_VAR 0 1
36308: PUSH
36309: LD_INT 251
36311: EQUAL
36312: PUSH
36313: LD_VAR 0 2
36317: PPUSH
36318: CALL_OW 264
36322: PUSH
36323: LD_INT 81
36325: EQUAL
36326: AND
36327: IFFALSE 36348
// MinerDetonateMine ( unit , x , y ) ;
36329: LD_VAR 0 2
36333: PPUSH
36334: LD_VAR 0 4
36338: PPUSH
36339: LD_VAR 0 5
36343: PPUSH
36344: CALL 39403 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36348: LD_VAR 0 1
36352: PUSH
36353: LD_INT 252
36355: EQUAL
36356: PUSH
36357: LD_VAR 0 2
36361: PPUSH
36362: CALL_OW 264
36366: PUSH
36367: LD_INT 81
36369: EQUAL
36370: AND
36371: IFFALSE 36392
// MinerCreateMinefield ( unit , x , y ) ;
36373: LD_VAR 0 2
36377: PPUSH
36378: LD_VAR 0 4
36382: PPUSH
36383: LD_VAR 0 5
36387: PPUSH
36388: CALL 39820 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36392: LD_VAR 0 1
36396: PUSH
36397: LD_INT 253
36399: EQUAL
36400: PUSH
36401: LD_VAR 0 2
36405: PPUSH
36406: CALL_OW 257
36410: PUSH
36411: LD_INT 5
36413: EQUAL
36414: AND
36415: IFFALSE 36436
// ComBinocular ( unit , x , y ) ;
36417: LD_VAR 0 2
36421: PPUSH
36422: LD_VAR 0 4
36426: PPUSH
36427: LD_VAR 0 5
36431: PPUSH
36432: CALL 40189 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36436: LD_VAR 0 1
36440: PUSH
36441: LD_INT 254
36443: EQUAL
36444: PUSH
36445: LD_VAR 0 2
36449: PPUSH
36450: CALL_OW 264
36454: PUSH
36455: LD_INT 99
36457: EQUAL
36458: AND
36459: PUSH
36460: LD_VAR 0 3
36464: PPUSH
36465: CALL_OW 263
36469: PUSH
36470: LD_INT 3
36472: EQUAL
36473: AND
36474: IFFALSE 36490
// HackDestroyVehicle ( unit , selectedUnit ) ;
36476: LD_VAR 0 2
36480: PPUSH
36481: LD_VAR 0 3
36485: PPUSH
36486: CALL 38492 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36490: LD_VAR 0 1
36494: PUSH
36495: LD_INT 255
36497: EQUAL
36498: PUSH
36499: LD_VAR 0 2
36503: PPUSH
36504: CALL_OW 264
36508: PUSH
36509: LD_INT 14
36511: PUSH
36512: LD_INT 53
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: IN
36519: AND
36520: PUSH
36521: LD_VAR 0 4
36525: PPUSH
36526: LD_VAR 0 5
36530: PPUSH
36531: CALL_OW 488
36535: AND
36536: IFFALSE 36560
// CutTreeXYR ( unit , x , y , 12 ) ;
36538: LD_VAR 0 2
36542: PPUSH
36543: LD_VAR 0 4
36547: PPUSH
36548: LD_VAR 0 5
36552: PPUSH
36553: LD_INT 12
36555: PPUSH
36556: CALL 36655 0 4
// if cmd = 256 then
36560: LD_VAR 0 1
36564: PUSH
36565: LD_INT 256
36567: EQUAL
36568: IFFALSE 36589
// SetFactoryWaypoint ( unit , x , y ) ;
36570: LD_VAR 0 2
36574: PPUSH
36575: LD_VAR 0 4
36579: PPUSH
36580: LD_VAR 0 5
36584: PPUSH
36585: CALL 34570 0 3
// if cmd = 257 then
36589: LD_VAR 0 1
36593: PUSH
36594: LD_INT 257
36596: EQUAL
36597: IFFALSE 36618
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36599: LD_VAR 0 2
36603: PPUSH
36604: LD_VAR 0 4
36608: PPUSH
36609: LD_VAR 0 5
36613: PPUSH
36614: CALL 34932 0 3
// if cmd = 258 then
36618: LD_VAR 0 1
36622: PUSH
36623: LD_INT 258
36625: EQUAL
36626: IFFALSE 36650
// BurnTreeXYR ( unit , x , y , 8 ) ;
36628: LD_VAR 0 2
36632: PPUSH
36633: LD_VAR 0 4
36637: PPUSH
36638: LD_VAR 0 5
36642: PPUSH
36643: LD_INT 8
36645: PPUSH
36646: CALL 37049 0 4
// end ;
36650: LD_VAR 0 6
36654: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36655: LD_INT 0
36657: PPUSH
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36666: LD_VAR 0 1
36670: PPUSH
36671: CALL_OW 302
36675: NOT
36676: PUSH
36677: LD_VAR 0 2
36681: PPUSH
36682: LD_VAR 0 3
36686: PPUSH
36687: CALL_OW 488
36691: NOT
36692: OR
36693: PUSH
36694: LD_VAR 0 4
36698: NOT
36699: OR
36700: IFFALSE 36704
// exit ;
36702: GO 37044
// list := [ ] ;
36704: LD_ADDR_VAR 0 13
36708: PUSH
36709: EMPTY
36710: ST_TO_ADDR
// if x - r < 0 then
36711: LD_VAR 0 2
36715: PUSH
36716: LD_VAR 0 4
36720: MINUS
36721: PUSH
36722: LD_INT 0
36724: LESS
36725: IFFALSE 36737
// min_x := 0 else
36727: LD_ADDR_VAR 0 7
36731: PUSH
36732: LD_INT 0
36734: ST_TO_ADDR
36735: GO 36753
// min_x := x - r ;
36737: LD_ADDR_VAR 0 7
36741: PUSH
36742: LD_VAR 0 2
36746: PUSH
36747: LD_VAR 0 4
36751: MINUS
36752: ST_TO_ADDR
// if y - r < 0 then
36753: LD_VAR 0 3
36757: PUSH
36758: LD_VAR 0 4
36762: MINUS
36763: PUSH
36764: LD_INT 0
36766: LESS
36767: IFFALSE 36779
// min_y := 0 else
36769: LD_ADDR_VAR 0 8
36773: PUSH
36774: LD_INT 0
36776: ST_TO_ADDR
36777: GO 36795
// min_y := y - r ;
36779: LD_ADDR_VAR 0 8
36783: PUSH
36784: LD_VAR 0 3
36788: PUSH
36789: LD_VAR 0 4
36793: MINUS
36794: ST_TO_ADDR
// max_x := x + r ;
36795: LD_ADDR_VAR 0 9
36799: PUSH
36800: LD_VAR 0 2
36804: PUSH
36805: LD_VAR 0 4
36809: PLUS
36810: ST_TO_ADDR
// max_y := y + r ;
36811: LD_ADDR_VAR 0 10
36815: PUSH
36816: LD_VAR 0 3
36820: PUSH
36821: LD_VAR 0 4
36825: PLUS
36826: ST_TO_ADDR
// for _x = min_x to max_x do
36827: LD_ADDR_VAR 0 11
36831: PUSH
36832: DOUBLE
36833: LD_VAR 0 7
36837: DEC
36838: ST_TO_ADDR
36839: LD_VAR 0 9
36843: PUSH
36844: FOR_TO
36845: IFFALSE 36962
// for _y = min_y to max_y do
36847: LD_ADDR_VAR 0 12
36851: PUSH
36852: DOUBLE
36853: LD_VAR 0 8
36857: DEC
36858: ST_TO_ADDR
36859: LD_VAR 0 10
36863: PUSH
36864: FOR_TO
36865: IFFALSE 36958
// begin if not ValidHex ( _x , _y ) then
36867: LD_VAR 0 11
36871: PPUSH
36872: LD_VAR 0 12
36876: PPUSH
36877: CALL_OW 488
36881: NOT
36882: IFFALSE 36886
// continue ;
36884: GO 36864
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36886: LD_VAR 0 11
36890: PPUSH
36891: LD_VAR 0 12
36895: PPUSH
36896: CALL_OW 351
36900: PUSH
36901: LD_VAR 0 11
36905: PPUSH
36906: LD_VAR 0 12
36910: PPUSH
36911: CALL_OW 554
36915: AND
36916: IFFALSE 36956
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36918: LD_ADDR_VAR 0 13
36922: PUSH
36923: LD_VAR 0 13
36927: PPUSH
36928: LD_VAR 0 13
36932: PUSH
36933: LD_INT 1
36935: PLUS
36936: PPUSH
36937: LD_VAR 0 11
36941: PUSH
36942: LD_VAR 0 12
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PPUSH
36951: CALL_OW 2
36955: ST_TO_ADDR
// end ;
36956: GO 36864
36958: POP
36959: POP
36960: GO 36844
36962: POP
36963: POP
// if not list then
36964: LD_VAR 0 13
36968: NOT
36969: IFFALSE 36973
// exit ;
36971: GO 37044
// for i in list do
36973: LD_ADDR_VAR 0 6
36977: PUSH
36978: LD_VAR 0 13
36982: PUSH
36983: FOR_IN
36984: IFFALSE 37042
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36986: LD_VAR 0 1
36990: PPUSH
36991: LD_STRING M
36993: PUSH
36994: LD_VAR 0 6
36998: PUSH
36999: LD_INT 1
37001: ARRAY
37002: PUSH
37003: LD_VAR 0 6
37007: PUSH
37008: LD_INT 2
37010: ARRAY
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: PUSH
37033: EMPTY
37034: LIST
37035: PPUSH
37036: CALL_OW 447
37040: GO 36983
37042: POP
37043: POP
// end ;
37044: LD_VAR 0 5
37048: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37049: LD_INT 0
37051: PPUSH
37052: PPUSH
37053: PPUSH
37054: PPUSH
37055: PPUSH
37056: PPUSH
37057: PPUSH
37058: PPUSH
37059: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37060: LD_VAR 0 1
37064: PPUSH
37065: CALL_OW 302
37069: NOT
37070: PUSH
37071: LD_VAR 0 2
37075: PPUSH
37076: LD_VAR 0 3
37080: PPUSH
37081: CALL_OW 488
37085: NOT
37086: OR
37087: PUSH
37088: LD_VAR 0 4
37092: NOT
37093: OR
37094: IFFALSE 37098
// exit ;
37096: GO 37446
// list := [ ] ;
37098: LD_ADDR_VAR 0 13
37102: PUSH
37103: EMPTY
37104: ST_TO_ADDR
// if x - r < 0 then
37105: LD_VAR 0 2
37109: PUSH
37110: LD_VAR 0 4
37114: MINUS
37115: PUSH
37116: LD_INT 0
37118: LESS
37119: IFFALSE 37131
// min_x := 0 else
37121: LD_ADDR_VAR 0 7
37125: PUSH
37126: LD_INT 0
37128: ST_TO_ADDR
37129: GO 37147
// min_x := x - r ;
37131: LD_ADDR_VAR 0 7
37135: PUSH
37136: LD_VAR 0 2
37140: PUSH
37141: LD_VAR 0 4
37145: MINUS
37146: ST_TO_ADDR
// if y - r < 0 then
37147: LD_VAR 0 3
37151: PUSH
37152: LD_VAR 0 4
37156: MINUS
37157: PUSH
37158: LD_INT 0
37160: LESS
37161: IFFALSE 37173
// min_y := 0 else
37163: LD_ADDR_VAR 0 8
37167: PUSH
37168: LD_INT 0
37170: ST_TO_ADDR
37171: GO 37189
// min_y := y - r ;
37173: LD_ADDR_VAR 0 8
37177: PUSH
37178: LD_VAR 0 3
37182: PUSH
37183: LD_VAR 0 4
37187: MINUS
37188: ST_TO_ADDR
// max_x := x + r ;
37189: LD_ADDR_VAR 0 9
37193: PUSH
37194: LD_VAR 0 2
37198: PUSH
37199: LD_VAR 0 4
37203: PLUS
37204: ST_TO_ADDR
// max_y := y + r ;
37205: LD_ADDR_VAR 0 10
37209: PUSH
37210: LD_VAR 0 3
37214: PUSH
37215: LD_VAR 0 4
37219: PLUS
37220: ST_TO_ADDR
// for _x = min_x to max_x do
37221: LD_ADDR_VAR 0 11
37225: PUSH
37226: DOUBLE
37227: LD_VAR 0 7
37231: DEC
37232: ST_TO_ADDR
37233: LD_VAR 0 9
37237: PUSH
37238: FOR_TO
37239: IFFALSE 37356
// for _y = min_y to max_y do
37241: LD_ADDR_VAR 0 12
37245: PUSH
37246: DOUBLE
37247: LD_VAR 0 8
37251: DEC
37252: ST_TO_ADDR
37253: LD_VAR 0 10
37257: PUSH
37258: FOR_TO
37259: IFFALSE 37352
// begin if not ValidHex ( _x , _y ) then
37261: LD_VAR 0 11
37265: PPUSH
37266: LD_VAR 0 12
37270: PPUSH
37271: CALL_OW 488
37275: NOT
37276: IFFALSE 37280
// continue ;
37278: GO 37258
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37280: LD_VAR 0 11
37284: PPUSH
37285: LD_VAR 0 12
37289: PPUSH
37290: CALL_OW 351
37294: PUSH
37295: LD_VAR 0 11
37299: PPUSH
37300: LD_VAR 0 12
37304: PPUSH
37305: CALL_OW 554
37309: AND
37310: IFFALSE 37350
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37312: LD_ADDR_VAR 0 13
37316: PUSH
37317: LD_VAR 0 13
37321: PPUSH
37322: LD_VAR 0 13
37326: PUSH
37327: LD_INT 1
37329: PLUS
37330: PPUSH
37331: LD_VAR 0 11
37335: PUSH
37336: LD_VAR 0 12
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PPUSH
37345: CALL_OW 2
37349: ST_TO_ADDR
// end ;
37350: GO 37258
37352: POP
37353: POP
37354: GO 37238
37356: POP
37357: POP
// if not list then
37358: LD_VAR 0 13
37362: NOT
37363: IFFALSE 37367
// exit ;
37365: GO 37446
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37367: LD_ADDR_VAR 0 13
37371: PUSH
37372: LD_VAR 0 1
37376: PPUSH
37377: LD_VAR 0 13
37381: PPUSH
37382: LD_INT 1
37384: PPUSH
37385: LD_INT 1
37387: PPUSH
37388: CALL 46059 0 4
37392: ST_TO_ADDR
// ComStop ( flame ) ;
37393: LD_VAR 0 1
37397: PPUSH
37398: CALL_OW 141
// for i in list do
37402: LD_ADDR_VAR 0 6
37406: PUSH
37407: LD_VAR 0 13
37411: PUSH
37412: FOR_IN
37413: IFFALSE 37444
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37415: LD_VAR 0 1
37419: PPUSH
37420: LD_VAR 0 6
37424: PUSH
37425: LD_INT 1
37427: ARRAY
37428: PPUSH
37429: LD_VAR 0 6
37433: PUSH
37434: LD_INT 2
37436: ARRAY
37437: PPUSH
37438: CALL_OW 176
37442: GO 37412
37444: POP
37445: POP
// end ;
37446: LD_VAR 0 5
37450: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37451: LD_EXP 113
37455: NOT
37456: IFFALSE 37506
37458: GO 37460
37460: DISABLE
// begin initHack := true ;
37461: LD_ADDR_EXP 113
37465: PUSH
37466: LD_INT 1
37468: ST_TO_ADDR
// hackTanks := [ ] ;
37469: LD_ADDR_EXP 114
37473: PUSH
37474: EMPTY
37475: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37476: LD_ADDR_EXP 115
37480: PUSH
37481: EMPTY
37482: ST_TO_ADDR
// hackLimit := 3 ;
37483: LD_ADDR_EXP 116
37487: PUSH
37488: LD_INT 3
37490: ST_TO_ADDR
// hackDist := 12 ;
37491: LD_ADDR_EXP 117
37495: PUSH
37496: LD_INT 12
37498: ST_TO_ADDR
// hackCounter := [ ] ;
37499: LD_ADDR_EXP 118
37503: PUSH
37504: EMPTY
37505: ST_TO_ADDR
// end ;
37506: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37507: LD_EXP 113
37511: PUSH
37512: LD_INT 34
37514: PUSH
37515: LD_INT 99
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PPUSH
37522: CALL_OW 69
37526: AND
37527: IFFALSE 37780
37529: GO 37531
37531: DISABLE
37532: LD_INT 0
37534: PPUSH
37535: PPUSH
// begin enable ;
37536: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37537: LD_ADDR_VAR 0 1
37541: PUSH
37542: LD_INT 34
37544: PUSH
37545: LD_INT 99
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PPUSH
37552: CALL_OW 69
37556: PUSH
37557: FOR_IN
37558: IFFALSE 37778
// begin if not i in hackTanks then
37560: LD_VAR 0 1
37564: PUSH
37565: LD_EXP 114
37569: IN
37570: NOT
37571: IFFALSE 37654
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37573: LD_ADDR_EXP 114
37577: PUSH
37578: LD_EXP 114
37582: PPUSH
37583: LD_EXP 114
37587: PUSH
37588: LD_INT 1
37590: PLUS
37591: PPUSH
37592: LD_VAR 0 1
37596: PPUSH
37597: CALL_OW 1
37601: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37602: LD_ADDR_EXP 115
37606: PUSH
37607: LD_EXP 115
37611: PPUSH
37612: LD_EXP 115
37616: PUSH
37617: LD_INT 1
37619: PLUS
37620: PPUSH
37621: EMPTY
37622: PPUSH
37623: CALL_OW 1
37627: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37628: LD_ADDR_EXP 118
37632: PUSH
37633: LD_EXP 118
37637: PPUSH
37638: LD_EXP 118
37642: PUSH
37643: LD_INT 1
37645: PLUS
37646: PPUSH
37647: EMPTY
37648: PPUSH
37649: CALL_OW 1
37653: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37654: LD_VAR 0 1
37658: PPUSH
37659: CALL_OW 302
37663: NOT
37664: IFFALSE 37677
// begin HackUnlinkAll ( i ) ;
37666: LD_VAR 0 1
37670: PPUSH
37671: CALL 37783 0 1
// continue ;
37675: GO 37557
// end ; HackCheckCapturedStatus ( i ) ;
37677: LD_VAR 0 1
37681: PPUSH
37682: CALL 38226 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37686: LD_ADDR_VAR 0 2
37690: PUSH
37691: LD_INT 81
37693: PUSH
37694: LD_VAR 0 1
37698: PPUSH
37699: CALL_OW 255
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 33
37710: PUSH
37711: LD_INT 3
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 91
37720: PUSH
37721: LD_VAR 0 1
37725: PUSH
37726: LD_EXP 117
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 50
37738: PUSH
37739: EMPTY
37740: LIST
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: PPUSH
37748: CALL_OW 69
37752: ST_TO_ADDR
// if not tmp then
37753: LD_VAR 0 2
37757: NOT
37758: IFFALSE 37762
// continue ;
37760: GO 37557
// HackLink ( i , tmp ) ;
37762: LD_VAR 0 1
37766: PPUSH
37767: LD_VAR 0 2
37771: PPUSH
37772: CALL 37919 0 2
// end ;
37776: GO 37557
37778: POP
37779: POP
// end ;
37780: PPOPN 2
37782: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37783: LD_INT 0
37785: PPUSH
37786: PPUSH
37787: PPUSH
// if not hack in hackTanks then
37788: LD_VAR 0 1
37792: PUSH
37793: LD_EXP 114
37797: IN
37798: NOT
37799: IFFALSE 37803
// exit ;
37801: GO 37914
// index := GetElementIndex ( hackTanks , hack ) ;
37803: LD_ADDR_VAR 0 4
37807: PUSH
37808: LD_EXP 114
37812: PPUSH
37813: LD_VAR 0 1
37817: PPUSH
37818: CALL 45356 0 2
37822: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37823: LD_EXP 115
37827: PUSH
37828: LD_VAR 0 4
37832: ARRAY
37833: IFFALSE 37914
// begin for i in hackTanksCaptured [ index ] do
37835: LD_ADDR_VAR 0 3
37839: PUSH
37840: LD_EXP 115
37844: PUSH
37845: LD_VAR 0 4
37849: ARRAY
37850: PUSH
37851: FOR_IN
37852: IFFALSE 37878
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37854: LD_VAR 0 3
37858: PUSH
37859: LD_INT 1
37861: ARRAY
37862: PPUSH
37863: LD_VAR 0 3
37867: PUSH
37868: LD_INT 2
37870: ARRAY
37871: PPUSH
37872: CALL_OW 235
37876: GO 37851
37878: POP
37879: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37880: LD_ADDR_EXP 115
37884: PUSH
37885: LD_EXP 115
37889: PPUSH
37890: LD_VAR 0 4
37894: PPUSH
37895: EMPTY
37896: PPUSH
37897: CALL_OW 1
37901: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37902: LD_VAR 0 1
37906: PPUSH
37907: LD_INT 0
37909: PPUSH
37910: CALL_OW 505
// end ; end ;
37914: LD_VAR 0 2
37918: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37919: LD_INT 0
37921: PPUSH
37922: PPUSH
37923: PPUSH
// if not hack in hackTanks or not vehicles then
37924: LD_VAR 0 1
37928: PUSH
37929: LD_EXP 114
37933: IN
37934: NOT
37935: PUSH
37936: LD_VAR 0 2
37940: NOT
37941: OR
37942: IFFALSE 37946
// exit ;
37944: GO 38221
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37946: LD_ADDR_VAR 0 2
37950: PUSH
37951: LD_VAR 0 1
37955: PPUSH
37956: LD_VAR 0 2
37960: PPUSH
37961: LD_INT 1
37963: PPUSH
37964: LD_INT 1
37966: PPUSH
37967: CALL 46006 0 4
37971: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37972: LD_ADDR_VAR 0 5
37976: PUSH
37977: LD_EXP 114
37981: PPUSH
37982: LD_VAR 0 1
37986: PPUSH
37987: CALL 45356 0 2
37991: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37992: LD_EXP 115
37996: PUSH
37997: LD_VAR 0 5
38001: ARRAY
38002: PUSH
38003: LD_EXP 116
38007: LESS
38008: IFFALSE 38197
// begin for i := 1 to vehicles do
38010: LD_ADDR_VAR 0 4
38014: PUSH
38015: DOUBLE
38016: LD_INT 1
38018: DEC
38019: ST_TO_ADDR
38020: LD_VAR 0 2
38024: PUSH
38025: FOR_TO
38026: IFFALSE 38195
// begin if hackTanksCaptured [ index ] = hackLimit then
38028: LD_EXP 115
38032: PUSH
38033: LD_VAR 0 5
38037: ARRAY
38038: PUSH
38039: LD_EXP 116
38043: EQUAL
38044: IFFALSE 38048
// break ;
38046: GO 38195
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38048: LD_ADDR_EXP 118
38052: PUSH
38053: LD_EXP 118
38057: PPUSH
38058: LD_VAR 0 5
38062: PPUSH
38063: LD_EXP 118
38067: PUSH
38068: LD_VAR 0 5
38072: ARRAY
38073: PUSH
38074: LD_INT 1
38076: PLUS
38077: PPUSH
38078: CALL_OW 1
38082: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38083: LD_ADDR_EXP 115
38087: PUSH
38088: LD_EXP 115
38092: PPUSH
38093: LD_VAR 0 5
38097: PUSH
38098: LD_EXP 115
38102: PUSH
38103: LD_VAR 0 5
38107: ARRAY
38108: PUSH
38109: LD_INT 1
38111: PLUS
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PPUSH
38117: LD_VAR 0 2
38121: PUSH
38122: LD_VAR 0 4
38126: ARRAY
38127: PUSH
38128: LD_VAR 0 2
38132: PUSH
38133: LD_VAR 0 4
38137: ARRAY
38138: PPUSH
38139: CALL_OW 255
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PPUSH
38148: CALL 45571 0 3
38152: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38153: LD_VAR 0 2
38157: PUSH
38158: LD_VAR 0 4
38162: ARRAY
38163: PPUSH
38164: LD_VAR 0 1
38168: PPUSH
38169: CALL_OW 255
38173: PPUSH
38174: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38178: LD_VAR 0 2
38182: PUSH
38183: LD_VAR 0 4
38187: ARRAY
38188: PPUSH
38189: CALL_OW 141
// end ;
38193: GO 38025
38195: POP
38196: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38197: LD_VAR 0 1
38201: PPUSH
38202: LD_EXP 115
38206: PUSH
38207: LD_VAR 0 5
38211: ARRAY
38212: PUSH
38213: LD_INT 0
38215: PLUS
38216: PPUSH
38217: CALL_OW 505
// end ;
38221: LD_VAR 0 3
38225: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38226: LD_INT 0
38228: PPUSH
38229: PPUSH
38230: PPUSH
38231: PPUSH
// if not hack in hackTanks then
38232: LD_VAR 0 1
38236: PUSH
38237: LD_EXP 114
38241: IN
38242: NOT
38243: IFFALSE 38247
// exit ;
38245: GO 38487
// index := GetElementIndex ( hackTanks , hack ) ;
38247: LD_ADDR_VAR 0 4
38251: PUSH
38252: LD_EXP 114
38256: PPUSH
38257: LD_VAR 0 1
38261: PPUSH
38262: CALL 45356 0 2
38266: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38267: LD_ADDR_VAR 0 3
38271: PUSH
38272: DOUBLE
38273: LD_EXP 115
38277: PUSH
38278: LD_VAR 0 4
38282: ARRAY
38283: INC
38284: ST_TO_ADDR
38285: LD_INT 1
38287: PUSH
38288: FOR_DOWNTO
38289: IFFALSE 38461
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38291: LD_ADDR_VAR 0 5
38295: PUSH
38296: LD_EXP 115
38300: PUSH
38301: LD_VAR 0 4
38305: ARRAY
38306: PUSH
38307: LD_VAR 0 3
38311: ARRAY
38312: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38313: LD_VAR 0 5
38317: PUSH
38318: LD_INT 1
38320: ARRAY
38321: PPUSH
38322: CALL_OW 302
38326: NOT
38327: PUSH
38328: LD_VAR 0 5
38332: PUSH
38333: LD_INT 1
38335: ARRAY
38336: PPUSH
38337: CALL_OW 255
38341: PUSH
38342: LD_VAR 0 1
38346: PPUSH
38347: CALL_OW 255
38351: NONEQUAL
38352: OR
38353: IFFALSE 38459
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38355: LD_VAR 0 5
38359: PUSH
38360: LD_INT 1
38362: ARRAY
38363: PPUSH
38364: CALL_OW 305
38368: PUSH
38369: LD_VAR 0 5
38373: PUSH
38374: LD_INT 1
38376: ARRAY
38377: PPUSH
38378: CALL_OW 255
38382: PUSH
38383: LD_VAR 0 1
38387: PPUSH
38388: CALL_OW 255
38392: EQUAL
38393: AND
38394: IFFALSE 38418
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38396: LD_VAR 0 5
38400: PUSH
38401: LD_INT 1
38403: ARRAY
38404: PPUSH
38405: LD_VAR 0 5
38409: PUSH
38410: LD_INT 2
38412: ARRAY
38413: PPUSH
38414: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38418: LD_ADDR_EXP 115
38422: PUSH
38423: LD_EXP 115
38427: PPUSH
38428: LD_VAR 0 4
38432: PPUSH
38433: LD_EXP 115
38437: PUSH
38438: LD_VAR 0 4
38442: ARRAY
38443: PPUSH
38444: LD_VAR 0 3
38448: PPUSH
38449: CALL_OW 3
38453: PPUSH
38454: CALL_OW 1
38458: ST_TO_ADDR
// end ; end ;
38459: GO 38288
38461: POP
38462: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38463: LD_VAR 0 1
38467: PPUSH
38468: LD_EXP 115
38472: PUSH
38473: LD_VAR 0 4
38477: ARRAY
38478: PUSH
38479: LD_INT 0
38481: PLUS
38482: PPUSH
38483: CALL_OW 505
// end ;
38487: LD_VAR 0 2
38491: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38492: LD_INT 0
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
// if not hack in hackTanks then
38498: LD_VAR 0 1
38502: PUSH
38503: LD_EXP 114
38507: IN
38508: NOT
38509: IFFALSE 38513
// exit ;
38511: GO 38598
// index := GetElementIndex ( hackTanks , hack ) ;
38513: LD_ADDR_VAR 0 5
38517: PUSH
38518: LD_EXP 114
38522: PPUSH
38523: LD_VAR 0 1
38527: PPUSH
38528: CALL 45356 0 2
38532: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38533: LD_ADDR_VAR 0 4
38537: PUSH
38538: DOUBLE
38539: LD_INT 1
38541: DEC
38542: ST_TO_ADDR
38543: LD_EXP 115
38547: PUSH
38548: LD_VAR 0 5
38552: ARRAY
38553: PUSH
38554: FOR_TO
38555: IFFALSE 38596
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38557: LD_EXP 115
38561: PUSH
38562: LD_VAR 0 5
38566: ARRAY
38567: PUSH
38568: LD_VAR 0 4
38572: ARRAY
38573: PUSH
38574: LD_INT 1
38576: ARRAY
38577: PUSH
38578: LD_VAR 0 2
38582: EQUAL
38583: IFFALSE 38594
// KillUnit ( vehicle ) ;
38585: LD_VAR 0 2
38589: PPUSH
38590: CALL_OW 66
38594: GO 38554
38596: POP
38597: POP
// end ;
38598: LD_VAR 0 3
38602: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38603: LD_EXP 119
38607: NOT
38608: IFFALSE 38643
38610: GO 38612
38612: DISABLE
// begin initMiner := true ;
38613: LD_ADDR_EXP 119
38617: PUSH
38618: LD_INT 1
38620: ST_TO_ADDR
// minersList := [ ] ;
38621: LD_ADDR_EXP 120
38625: PUSH
38626: EMPTY
38627: ST_TO_ADDR
// minerMinesList := [ ] ;
38628: LD_ADDR_EXP 121
38632: PUSH
38633: EMPTY
38634: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38635: LD_ADDR_EXP 122
38639: PUSH
38640: LD_INT 5
38642: ST_TO_ADDR
// end ;
38643: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38644: LD_EXP 119
38648: PUSH
38649: LD_INT 34
38651: PUSH
38652: LD_INT 81
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PPUSH
38659: CALL_OW 69
38663: AND
38664: IFFALSE 39125
38666: GO 38668
38668: DISABLE
38669: LD_INT 0
38671: PPUSH
38672: PPUSH
38673: PPUSH
38674: PPUSH
// begin enable ;
38675: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38676: LD_ADDR_VAR 0 1
38680: PUSH
38681: LD_INT 34
38683: PUSH
38684: LD_INT 81
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PPUSH
38691: CALL_OW 69
38695: PUSH
38696: FOR_IN
38697: IFFALSE 38769
// begin if not i in minersList then
38699: LD_VAR 0 1
38703: PUSH
38704: LD_EXP 120
38708: IN
38709: NOT
38710: IFFALSE 38767
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38712: LD_ADDR_EXP 120
38716: PUSH
38717: LD_EXP 120
38721: PPUSH
38722: LD_EXP 120
38726: PUSH
38727: LD_INT 1
38729: PLUS
38730: PPUSH
38731: LD_VAR 0 1
38735: PPUSH
38736: CALL_OW 1
38740: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38741: LD_ADDR_EXP 121
38745: PUSH
38746: LD_EXP 121
38750: PPUSH
38751: LD_EXP 121
38755: PUSH
38756: LD_INT 1
38758: PLUS
38759: PPUSH
38760: EMPTY
38761: PPUSH
38762: CALL_OW 1
38766: ST_TO_ADDR
// end end ;
38767: GO 38696
38769: POP
38770: POP
// for i := minerMinesList downto 1 do
38771: LD_ADDR_VAR 0 1
38775: PUSH
38776: DOUBLE
38777: LD_EXP 121
38781: INC
38782: ST_TO_ADDR
38783: LD_INT 1
38785: PUSH
38786: FOR_DOWNTO
38787: IFFALSE 39123
// begin if IsLive ( minersList [ i ] ) then
38789: LD_EXP 120
38793: PUSH
38794: LD_VAR 0 1
38798: ARRAY
38799: PPUSH
38800: CALL_OW 300
38804: IFFALSE 38832
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38806: LD_EXP 120
38810: PUSH
38811: LD_VAR 0 1
38815: ARRAY
38816: PPUSH
38817: LD_EXP 121
38821: PUSH
38822: LD_VAR 0 1
38826: ARRAY
38827: PPUSH
38828: CALL_OW 505
// if not minerMinesList [ i ] then
38832: LD_EXP 121
38836: PUSH
38837: LD_VAR 0 1
38841: ARRAY
38842: NOT
38843: IFFALSE 38847
// continue ;
38845: GO 38786
// for j := minerMinesList [ i ] downto 1 do
38847: LD_ADDR_VAR 0 2
38851: PUSH
38852: DOUBLE
38853: LD_EXP 121
38857: PUSH
38858: LD_VAR 0 1
38862: ARRAY
38863: INC
38864: ST_TO_ADDR
38865: LD_INT 1
38867: PUSH
38868: FOR_DOWNTO
38869: IFFALSE 39119
// begin side := GetSide ( minersList [ i ] ) ;
38871: LD_ADDR_VAR 0 3
38875: PUSH
38876: LD_EXP 120
38880: PUSH
38881: LD_VAR 0 1
38885: ARRAY
38886: PPUSH
38887: CALL_OW 255
38891: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38892: LD_ADDR_VAR 0 4
38896: PUSH
38897: LD_EXP 121
38901: PUSH
38902: LD_VAR 0 1
38906: ARRAY
38907: PUSH
38908: LD_VAR 0 2
38912: ARRAY
38913: PUSH
38914: LD_INT 1
38916: ARRAY
38917: PPUSH
38918: LD_EXP 121
38922: PUSH
38923: LD_VAR 0 1
38927: ARRAY
38928: PUSH
38929: LD_VAR 0 2
38933: ARRAY
38934: PUSH
38935: LD_INT 2
38937: ARRAY
38938: PPUSH
38939: CALL_OW 428
38943: ST_TO_ADDR
// if not tmp then
38944: LD_VAR 0 4
38948: NOT
38949: IFFALSE 38953
// continue ;
38951: GO 38868
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38953: LD_VAR 0 4
38957: PUSH
38958: LD_INT 81
38960: PUSH
38961: LD_VAR 0 3
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PPUSH
38970: CALL_OW 69
38974: IN
38975: PUSH
38976: LD_EXP 121
38980: PUSH
38981: LD_VAR 0 1
38985: ARRAY
38986: PUSH
38987: LD_VAR 0 2
38991: ARRAY
38992: PUSH
38993: LD_INT 1
38995: ARRAY
38996: PPUSH
38997: LD_EXP 121
39001: PUSH
39002: LD_VAR 0 1
39006: ARRAY
39007: PUSH
39008: LD_VAR 0 2
39012: ARRAY
39013: PUSH
39014: LD_INT 2
39016: ARRAY
39017: PPUSH
39018: CALL_OW 458
39022: AND
39023: IFFALSE 39117
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39025: LD_EXP 121
39029: PUSH
39030: LD_VAR 0 1
39034: ARRAY
39035: PUSH
39036: LD_VAR 0 2
39040: ARRAY
39041: PUSH
39042: LD_INT 1
39044: ARRAY
39045: PPUSH
39046: LD_EXP 121
39050: PUSH
39051: LD_VAR 0 1
39055: ARRAY
39056: PUSH
39057: LD_VAR 0 2
39061: ARRAY
39062: PUSH
39063: LD_INT 2
39065: ARRAY
39066: PPUSH
39067: LD_VAR 0 3
39071: PPUSH
39072: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39076: LD_ADDR_EXP 121
39080: PUSH
39081: LD_EXP 121
39085: PPUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: LD_EXP 121
39095: PUSH
39096: LD_VAR 0 1
39100: ARRAY
39101: PPUSH
39102: LD_VAR 0 2
39106: PPUSH
39107: CALL_OW 3
39111: PPUSH
39112: CALL_OW 1
39116: ST_TO_ADDR
// end ; end ;
39117: GO 38868
39119: POP
39120: POP
// end ;
39121: GO 38786
39123: POP
39124: POP
// end ;
39125: PPOPN 4
39127: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39128: LD_INT 0
39130: PPUSH
39131: PPUSH
// result := false ;
39132: LD_ADDR_VAR 0 4
39136: PUSH
39137: LD_INT 0
39139: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39140: LD_VAR 0 1
39144: PPUSH
39145: CALL_OW 264
39149: PUSH
39150: LD_INT 81
39152: EQUAL
39153: NOT
39154: IFFALSE 39158
// exit ;
39156: GO 39398
// index := GetElementIndex ( minersList , unit ) ;
39158: LD_ADDR_VAR 0 5
39162: PUSH
39163: LD_EXP 120
39167: PPUSH
39168: LD_VAR 0 1
39172: PPUSH
39173: CALL 45356 0 2
39177: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39178: LD_EXP 121
39182: PUSH
39183: LD_VAR 0 5
39187: ARRAY
39188: PUSH
39189: LD_EXP 122
39193: GREATEREQUAL
39194: IFFALSE 39198
// exit ;
39196: GO 39398
// ComMoveXY ( unit , x , y ) ;
39198: LD_VAR 0 1
39202: PPUSH
39203: LD_VAR 0 2
39207: PPUSH
39208: LD_VAR 0 3
39212: PPUSH
39213: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39217: LD_INT 35
39219: PPUSH
39220: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39224: LD_VAR 0 1
39228: PPUSH
39229: LD_VAR 0 2
39233: PPUSH
39234: LD_VAR 0 3
39238: PPUSH
39239: CALL 77108 0 3
39243: NOT
39244: PUSH
39245: LD_VAR 0 1
39249: PPUSH
39250: CALL_OW 314
39254: AND
39255: IFFALSE 39259
// exit ;
39257: GO 39398
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39259: LD_VAR 0 2
39263: PPUSH
39264: LD_VAR 0 3
39268: PPUSH
39269: CALL_OW 428
39273: PUSH
39274: LD_VAR 0 1
39278: EQUAL
39279: PUSH
39280: LD_VAR 0 1
39284: PPUSH
39285: CALL_OW 314
39289: NOT
39290: AND
39291: IFFALSE 39217
// PlaySoundXY ( x , y , PlantMine ) ;
39293: LD_VAR 0 2
39297: PPUSH
39298: LD_VAR 0 3
39302: PPUSH
39303: LD_STRING PlantMine
39305: PPUSH
39306: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39310: LD_VAR 0 2
39314: PPUSH
39315: LD_VAR 0 3
39319: PPUSH
39320: LD_VAR 0 1
39324: PPUSH
39325: CALL_OW 255
39329: PPUSH
39330: LD_INT 0
39332: PPUSH
39333: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39337: LD_ADDR_EXP 121
39341: PUSH
39342: LD_EXP 121
39346: PPUSH
39347: LD_VAR 0 5
39351: PUSH
39352: LD_EXP 121
39356: PUSH
39357: LD_VAR 0 5
39361: ARRAY
39362: PUSH
39363: LD_INT 1
39365: PLUS
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PPUSH
39371: LD_VAR 0 2
39375: PUSH
39376: LD_VAR 0 3
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PPUSH
39385: CALL 45571 0 3
39389: ST_TO_ADDR
// result := true ;
39390: LD_ADDR_VAR 0 4
39394: PUSH
39395: LD_INT 1
39397: ST_TO_ADDR
// end ;
39398: LD_VAR 0 4
39402: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39403: LD_INT 0
39405: PPUSH
39406: PPUSH
39407: PPUSH
// if not unit in minersList then
39408: LD_VAR 0 1
39412: PUSH
39413: LD_EXP 120
39417: IN
39418: NOT
39419: IFFALSE 39423
// exit ;
39421: GO 39815
// index := GetElementIndex ( minersList , unit ) ;
39423: LD_ADDR_VAR 0 6
39427: PUSH
39428: LD_EXP 120
39432: PPUSH
39433: LD_VAR 0 1
39437: PPUSH
39438: CALL 45356 0 2
39442: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39443: LD_ADDR_VAR 0 5
39447: PUSH
39448: DOUBLE
39449: LD_EXP 121
39453: PUSH
39454: LD_VAR 0 6
39458: ARRAY
39459: INC
39460: ST_TO_ADDR
39461: LD_INT 1
39463: PUSH
39464: FOR_DOWNTO
39465: IFFALSE 39626
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39467: LD_EXP 121
39471: PUSH
39472: LD_VAR 0 6
39476: ARRAY
39477: PUSH
39478: LD_VAR 0 5
39482: ARRAY
39483: PUSH
39484: LD_INT 1
39486: ARRAY
39487: PUSH
39488: LD_VAR 0 2
39492: EQUAL
39493: PUSH
39494: LD_EXP 121
39498: PUSH
39499: LD_VAR 0 6
39503: ARRAY
39504: PUSH
39505: LD_VAR 0 5
39509: ARRAY
39510: PUSH
39511: LD_INT 2
39513: ARRAY
39514: PUSH
39515: LD_VAR 0 3
39519: EQUAL
39520: AND
39521: IFFALSE 39624
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39523: LD_EXP 121
39527: PUSH
39528: LD_VAR 0 6
39532: ARRAY
39533: PUSH
39534: LD_VAR 0 5
39538: ARRAY
39539: PUSH
39540: LD_INT 1
39542: ARRAY
39543: PPUSH
39544: LD_EXP 121
39548: PUSH
39549: LD_VAR 0 6
39553: ARRAY
39554: PUSH
39555: LD_VAR 0 5
39559: ARRAY
39560: PUSH
39561: LD_INT 2
39563: ARRAY
39564: PPUSH
39565: LD_VAR 0 1
39569: PPUSH
39570: CALL_OW 255
39574: PPUSH
39575: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39579: LD_ADDR_EXP 121
39583: PUSH
39584: LD_EXP 121
39588: PPUSH
39589: LD_VAR 0 6
39593: PPUSH
39594: LD_EXP 121
39598: PUSH
39599: LD_VAR 0 6
39603: ARRAY
39604: PPUSH
39605: LD_VAR 0 5
39609: PPUSH
39610: CALL_OW 3
39614: PPUSH
39615: CALL_OW 1
39619: ST_TO_ADDR
// exit ;
39620: POP
39621: POP
39622: GO 39815
// end ; end ;
39624: GO 39464
39626: POP
39627: POP
// for i := minerMinesList [ index ] downto 1 do
39628: LD_ADDR_VAR 0 5
39632: PUSH
39633: DOUBLE
39634: LD_EXP 121
39638: PUSH
39639: LD_VAR 0 6
39643: ARRAY
39644: INC
39645: ST_TO_ADDR
39646: LD_INT 1
39648: PUSH
39649: FOR_DOWNTO
39650: IFFALSE 39813
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39652: LD_EXP 121
39656: PUSH
39657: LD_VAR 0 6
39661: ARRAY
39662: PUSH
39663: LD_VAR 0 5
39667: ARRAY
39668: PUSH
39669: LD_INT 1
39671: ARRAY
39672: PPUSH
39673: LD_EXP 121
39677: PUSH
39678: LD_VAR 0 6
39682: ARRAY
39683: PUSH
39684: LD_VAR 0 5
39688: ARRAY
39689: PUSH
39690: LD_INT 2
39692: ARRAY
39693: PPUSH
39694: LD_VAR 0 2
39698: PPUSH
39699: LD_VAR 0 3
39703: PPUSH
39704: CALL_OW 298
39708: PUSH
39709: LD_INT 6
39711: LESS
39712: IFFALSE 39811
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39714: LD_EXP 121
39718: PUSH
39719: LD_VAR 0 6
39723: ARRAY
39724: PUSH
39725: LD_VAR 0 5
39729: ARRAY
39730: PUSH
39731: LD_INT 1
39733: ARRAY
39734: PPUSH
39735: LD_EXP 121
39739: PUSH
39740: LD_VAR 0 6
39744: ARRAY
39745: PUSH
39746: LD_VAR 0 5
39750: ARRAY
39751: PUSH
39752: LD_INT 2
39754: ARRAY
39755: PPUSH
39756: LD_VAR 0 1
39760: PPUSH
39761: CALL_OW 255
39765: PPUSH
39766: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39770: LD_ADDR_EXP 121
39774: PUSH
39775: LD_EXP 121
39779: PPUSH
39780: LD_VAR 0 6
39784: PPUSH
39785: LD_EXP 121
39789: PUSH
39790: LD_VAR 0 6
39794: ARRAY
39795: PPUSH
39796: LD_VAR 0 5
39800: PPUSH
39801: CALL_OW 3
39805: PPUSH
39806: CALL_OW 1
39810: ST_TO_ADDR
// end ; end ;
39811: GO 39649
39813: POP
39814: POP
// end ;
39815: LD_VAR 0 4
39819: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39820: LD_INT 0
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
39828: PPUSH
39829: PPUSH
39830: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39831: LD_VAR 0 1
39835: PPUSH
39836: CALL_OW 264
39840: PUSH
39841: LD_INT 81
39843: EQUAL
39844: NOT
39845: PUSH
39846: LD_VAR 0 1
39850: PUSH
39851: LD_EXP 120
39855: IN
39856: NOT
39857: OR
39858: IFFALSE 39862
// exit ;
39860: GO 40184
// index := GetElementIndex ( minersList , unit ) ;
39862: LD_ADDR_VAR 0 6
39866: PUSH
39867: LD_EXP 120
39871: PPUSH
39872: LD_VAR 0 1
39876: PPUSH
39877: CALL 45356 0 2
39881: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39882: LD_ADDR_VAR 0 8
39886: PUSH
39887: LD_EXP 122
39891: PUSH
39892: LD_EXP 121
39896: PUSH
39897: LD_VAR 0 6
39901: ARRAY
39902: MINUS
39903: ST_TO_ADDR
// if not minesFreeAmount then
39904: LD_VAR 0 8
39908: NOT
39909: IFFALSE 39913
// exit ;
39911: GO 40184
// tmp := [ ] ;
39913: LD_ADDR_VAR 0 7
39917: PUSH
39918: EMPTY
39919: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39920: LD_ADDR_VAR 0 5
39924: PUSH
39925: DOUBLE
39926: LD_INT 1
39928: DEC
39929: ST_TO_ADDR
39930: LD_VAR 0 8
39934: PUSH
39935: FOR_TO
39936: IFFALSE 40131
// begin _d := rand ( 0 , 5 ) ;
39938: LD_ADDR_VAR 0 11
39942: PUSH
39943: LD_INT 0
39945: PPUSH
39946: LD_INT 5
39948: PPUSH
39949: CALL_OW 12
39953: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39954: LD_ADDR_VAR 0 12
39958: PUSH
39959: LD_INT 2
39961: PPUSH
39962: LD_INT 6
39964: PPUSH
39965: CALL_OW 12
39969: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39970: LD_ADDR_VAR 0 9
39974: PUSH
39975: LD_VAR 0 2
39979: PPUSH
39980: LD_VAR 0 11
39984: PPUSH
39985: LD_VAR 0 12
39989: PPUSH
39990: CALL_OW 272
39994: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39995: LD_ADDR_VAR 0 10
39999: PUSH
40000: LD_VAR 0 3
40004: PPUSH
40005: LD_VAR 0 11
40009: PPUSH
40010: LD_VAR 0 12
40014: PPUSH
40015: CALL_OW 273
40019: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40020: LD_VAR 0 9
40024: PPUSH
40025: LD_VAR 0 10
40029: PPUSH
40030: CALL_OW 488
40034: PUSH
40035: LD_VAR 0 9
40039: PUSH
40040: LD_VAR 0 10
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_VAR 0 7
40053: IN
40054: NOT
40055: AND
40056: PUSH
40057: LD_VAR 0 9
40061: PPUSH
40062: LD_VAR 0 10
40066: PPUSH
40067: CALL_OW 458
40071: NOT
40072: AND
40073: IFFALSE 40115
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40075: LD_ADDR_VAR 0 7
40079: PUSH
40080: LD_VAR 0 7
40084: PPUSH
40085: LD_VAR 0 7
40089: PUSH
40090: LD_INT 1
40092: PLUS
40093: PPUSH
40094: LD_VAR 0 9
40098: PUSH
40099: LD_VAR 0 10
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PPUSH
40108: CALL_OW 1
40112: ST_TO_ADDR
40113: GO 40129
// i := i - 1 ;
40115: LD_ADDR_VAR 0 5
40119: PUSH
40120: LD_VAR 0 5
40124: PUSH
40125: LD_INT 1
40127: MINUS
40128: ST_TO_ADDR
// end ;
40129: GO 39935
40131: POP
40132: POP
// for i in tmp do
40133: LD_ADDR_VAR 0 5
40137: PUSH
40138: LD_VAR 0 7
40142: PUSH
40143: FOR_IN
40144: IFFALSE 40182
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40146: LD_VAR 0 1
40150: PPUSH
40151: LD_VAR 0 5
40155: PUSH
40156: LD_INT 1
40158: ARRAY
40159: PPUSH
40160: LD_VAR 0 5
40164: PUSH
40165: LD_INT 2
40167: ARRAY
40168: PPUSH
40169: CALL 39128 0 3
40173: NOT
40174: IFFALSE 40180
// exit ;
40176: POP
40177: POP
40178: GO 40184
40180: GO 40143
40182: POP
40183: POP
// end ;
40184: LD_VAR 0 4
40188: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40189: LD_INT 0
40191: PPUSH
40192: PPUSH
40193: PPUSH
40194: PPUSH
40195: PPUSH
40196: PPUSH
40197: PPUSH
// if not GetClass ( unit ) = class_sniper then
40198: LD_VAR 0 1
40202: PPUSH
40203: CALL_OW 257
40207: PUSH
40208: LD_INT 5
40210: EQUAL
40211: NOT
40212: IFFALSE 40216
// exit ;
40214: GO 40604
// dist := 8 ;
40216: LD_ADDR_VAR 0 5
40220: PUSH
40221: LD_INT 8
40223: ST_TO_ADDR
// viewRange := 12 ;
40224: LD_ADDR_VAR 0 7
40228: PUSH
40229: LD_INT 12
40231: ST_TO_ADDR
// side := GetSide ( unit ) ;
40232: LD_ADDR_VAR 0 6
40236: PUSH
40237: LD_VAR 0 1
40241: PPUSH
40242: CALL_OW 255
40246: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40247: LD_INT 61
40249: PPUSH
40250: LD_VAR 0 6
40254: PPUSH
40255: CALL_OW 321
40259: PUSH
40260: LD_INT 2
40262: EQUAL
40263: IFFALSE 40273
// viewRange := 16 ;
40265: LD_ADDR_VAR 0 7
40269: PUSH
40270: LD_INT 16
40272: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40273: LD_VAR 0 1
40277: PPUSH
40278: LD_VAR 0 2
40282: PPUSH
40283: LD_VAR 0 3
40287: PPUSH
40288: CALL_OW 297
40292: PUSH
40293: LD_VAR 0 5
40297: GREATER
40298: IFFALSE 40377
// begin ComMoveXY ( unit , x , y ) ;
40300: LD_VAR 0 1
40304: PPUSH
40305: LD_VAR 0 2
40309: PPUSH
40310: LD_VAR 0 3
40314: PPUSH
40315: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40319: LD_INT 35
40321: PPUSH
40322: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40326: LD_VAR 0 1
40330: PPUSH
40331: LD_VAR 0 2
40335: PPUSH
40336: LD_VAR 0 3
40340: PPUSH
40341: CALL 77108 0 3
40345: NOT
40346: IFFALSE 40350
// exit ;
40348: GO 40604
// until GetDistUnitXY ( unit , x , y ) < dist ;
40350: LD_VAR 0 1
40354: PPUSH
40355: LD_VAR 0 2
40359: PPUSH
40360: LD_VAR 0 3
40364: PPUSH
40365: CALL_OW 297
40369: PUSH
40370: LD_VAR 0 5
40374: LESS
40375: IFFALSE 40319
// end ; ComTurnXY ( unit , x , y ) ;
40377: LD_VAR 0 1
40381: PPUSH
40382: LD_VAR 0 2
40386: PPUSH
40387: LD_VAR 0 3
40391: PPUSH
40392: CALL_OW 118
// wait ( 5 ) ;
40396: LD_INT 5
40398: PPUSH
40399: CALL_OW 67
// _d := GetDir ( unit ) ;
40403: LD_ADDR_VAR 0 10
40407: PUSH
40408: LD_VAR 0 1
40412: PPUSH
40413: CALL_OW 254
40417: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40418: LD_ADDR_VAR 0 8
40422: PUSH
40423: LD_VAR 0 1
40427: PPUSH
40428: CALL_OW 250
40432: PPUSH
40433: LD_VAR 0 10
40437: PPUSH
40438: LD_VAR 0 5
40442: PPUSH
40443: CALL_OW 272
40447: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40448: LD_ADDR_VAR 0 9
40452: PUSH
40453: LD_VAR 0 1
40457: PPUSH
40458: CALL_OW 251
40462: PPUSH
40463: LD_VAR 0 10
40467: PPUSH
40468: LD_VAR 0 5
40472: PPUSH
40473: CALL_OW 273
40477: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40478: LD_VAR 0 8
40482: PPUSH
40483: LD_VAR 0 9
40487: PPUSH
40488: CALL_OW 488
40492: NOT
40493: IFFALSE 40497
// exit ;
40495: GO 40604
// ComAnimCustom ( unit , 1 ) ;
40497: LD_VAR 0 1
40501: PPUSH
40502: LD_INT 1
40504: PPUSH
40505: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40509: LD_VAR 0 8
40513: PPUSH
40514: LD_VAR 0 9
40518: PPUSH
40519: LD_VAR 0 6
40523: PPUSH
40524: LD_VAR 0 7
40528: PPUSH
40529: CALL_OW 330
// repeat wait ( 1 ) ;
40533: LD_INT 1
40535: PPUSH
40536: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40540: LD_VAR 0 1
40544: PPUSH
40545: CALL_OW 316
40549: PUSH
40550: LD_VAR 0 1
40554: PPUSH
40555: CALL_OW 314
40559: OR
40560: PUSH
40561: LD_VAR 0 1
40565: PPUSH
40566: CALL_OW 302
40570: NOT
40571: OR
40572: PUSH
40573: LD_VAR 0 1
40577: PPUSH
40578: CALL_OW 301
40582: OR
40583: IFFALSE 40533
// RemoveSeeing ( _x , _y , side ) ;
40585: LD_VAR 0 8
40589: PPUSH
40590: LD_VAR 0 9
40594: PPUSH
40595: LD_VAR 0 6
40599: PPUSH
40600: CALL_OW 331
// end ; end_of_file
40604: LD_VAR 0 4
40608: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40609: LD_INT 0
40611: PPUSH
40612: PPUSH
// if exist_mode then
40613: LD_VAR 0 2
40617: IFFALSE 40642
// unit := CreateCharacter ( prefix & ident ) else
40619: LD_ADDR_VAR 0 5
40623: PUSH
40624: LD_VAR 0 3
40628: PUSH
40629: LD_VAR 0 1
40633: STR
40634: PPUSH
40635: CALL_OW 34
40639: ST_TO_ADDR
40640: GO 40657
// unit := NewCharacter ( ident ) ;
40642: LD_ADDR_VAR 0 5
40646: PUSH
40647: LD_VAR 0 1
40651: PPUSH
40652: CALL_OW 25
40656: ST_TO_ADDR
// result := unit ;
40657: LD_ADDR_VAR 0 4
40661: PUSH
40662: LD_VAR 0 5
40666: ST_TO_ADDR
// end ;
40667: LD_VAR 0 4
40671: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40672: LD_INT 0
40674: PPUSH
40675: PPUSH
// if not side or not nation then
40676: LD_VAR 0 1
40680: NOT
40681: PUSH
40682: LD_VAR 0 2
40686: NOT
40687: OR
40688: IFFALSE 40692
// exit ;
40690: GO 41460
// case nation of nation_american :
40692: LD_VAR 0 2
40696: PUSH
40697: LD_INT 1
40699: DOUBLE
40700: EQUAL
40701: IFTRUE 40705
40703: GO 40919
40705: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40706: LD_ADDR_VAR 0 4
40710: PUSH
40711: LD_INT 35
40713: PUSH
40714: LD_INT 45
40716: PUSH
40717: LD_INT 46
40719: PUSH
40720: LD_INT 47
40722: PUSH
40723: LD_INT 82
40725: PUSH
40726: LD_INT 83
40728: PUSH
40729: LD_INT 84
40731: PUSH
40732: LD_INT 85
40734: PUSH
40735: LD_INT 86
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: LD_INT 6
40746: PUSH
40747: LD_INT 15
40749: PUSH
40750: LD_INT 16
40752: PUSH
40753: LD_INT 7
40755: PUSH
40756: LD_INT 12
40758: PUSH
40759: LD_INT 13
40761: PUSH
40762: LD_INT 10
40764: PUSH
40765: LD_INT 14
40767: PUSH
40768: LD_INT 20
40770: PUSH
40771: LD_INT 21
40773: PUSH
40774: LD_INT 22
40776: PUSH
40777: LD_INT 25
40779: PUSH
40780: LD_INT 32
40782: PUSH
40783: LD_INT 27
40785: PUSH
40786: LD_INT 36
40788: PUSH
40789: LD_INT 69
40791: PUSH
40792: LD_INT 39
40794: PUSH
40795: LD_INT 34
40797: PUSH
40798: LD_INT 40
40800: PUSH
40801: LD_INT 48
40803: PUSH
40804: LD_INT 49
40806: PUSH
40807: LD_INT 50
40809: PUSH
40810: LD_INT 51
40812: PUSH
40813: LD_INT 52
40815: PUSH
40816: LD_INT 53
40818: PUSH
40819: LD_INT 54
40821: PUSH
40822: LD_INT 55
40824: PUSH
40825: LD_INT 56
40827: PUSH
40828: LD_INT 57
40830: PUSH
40831: LD_INT 58
40833: PUSH
40834: LD_INT 59
40836: PUSH
40837: LD_INT 60
40839: PUSH
40840: LD_INT 61
40842: PUSH
40843: LD_INT 62
40845: PUSH
40846: LD_INT 80
40848: PUSH
40849: LD_INT 82
40851: PUSH
40852: LD_INT 83
40854: PUSH
40855: LD_INT 84
40857: PUSH
40858: LD_INT 85
40860: PUSH
40861: LD_INT 86
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: ST_TO_ADDR
40917: GO 41384
40919: LD_INT 2
40921: DOUBLE
40922: EQUAL
40923: IFTRUE 40927
40925: GO 41153
40927: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40928: LD_ADDR_VAR 0 4
40932: PUSH
40933: LD_INT 35
40935: PUSH
40936: LD_INT 45
40938: PUSH
40939: LD_INT 46
40941: PUSH
40942: LD_INT 47
40944: PUSH
40945: LD_INT 82
40947: PUSH
40948: LD_INT 83
40950: PUSH
40951: LD_INT 84
40953: PUSH
40954: LD_INT 85
40956: PUSH
40957: LD_INT 87
40959: PUSH
40960: LD_INT 70
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: LD_INT 11
40968: PUSH
40969: LD_INT 3
40971: PUSH
40972: LD_INT 4
40974: PUSH
40975: LD_INT 5
40977: PUSH
40978: LD_INT 6
40980: PUSH
40981: LD_INT 15
40983: PUSH
40984: LD_INT 18
40986: PUSH
40987: LD_INT 7
40989: PUSH
40990: LD_INT 17
40992: PUSH
40993: LD_INT 8
40995: PUSH
40996: LD_INT 20
40998: PUSH
40999: LD_INT 21
41001: PUSH
41002: LD_INT 22
41004: PUSH
41005: LD_INT 72
41007: PUSH
41008: LD_INT 26
41010: PUSH
41011: LD_INT 69
41013: PUSH
41014: LD_INT 39
41016: PUSH
41017: LD_INT 40
41019: PUSH
41020: LD_INT 41
41022: PUSH
41023: LD_INT 42
41025: PUSH
41026: LD_INT 43
41028: PUSH
41029: LD_INT 48
41031: PUSH
41032: LD_INT 49
41034: PUSH
41035: LD_INT 50
41037: PUSH
41038: LD_INT 51
41040: PUSH
41041: LD_INT 52
41043: PUSH
41044: LD_INT 53
41046: PUSH
41047: LD_INT 54
41049: PUSH
41050: LD_INT 55
41052: PUSH
41053: LD_INT 56
41055: PUSH
41056: LD_INT 60
41058: PUSH
41059: LD_INT 61
41061: PUSH
41062: LD_INT 62
41064: PUSH
41065: LD_INT 66
41067: PUSH
41068: LD_INT 67
41070: PUSH
41071: LD_INT 68
41073: PUSH
41074: LD_INT 81
41076: PUSH
41077: LD_INT 82
41079: PUSH
41080: LD_INT 83
41082: PUSH
41083: LD_INT 84
41085: PUSH
41086: LD_INT 85
41088: PUSH
41089: LD_INT 87
41091: PUSH
41092: LD_INT 88
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: ST_TO_ADDR
41151: GO 41384
41153: LD_INT 3
41155: DOUBLE
41156: EQUAL
41157: IFTRUE 41161
41159: GO 41383
41161: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41162: LD_ADDR_VAR 0 4
41166: PUSH
41167: LD_INT 46
41169: PUSH
41170: LD_INT 47
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: LD_INT 82
41181: PUSH
41182: LD_INT 83
41184: PUSH
41185: LD_INT 84
41187: PUSH
41188: LD_INT 85
41190: PUSH
41191: LD_INT 86
41193: PUSH
41194: LD_INT 11
41196: PUSH
41197: LD_INT 9
41199: PUSH
41200: LD_INT 20
41202: PUSH
41203: LD_INT 19
41205: PUSH
41206: LD_INT 21
41208: PUSH
41209: LD_INT 24
41211: PUSH
41212: LD_INT 22
41214: PUSH
41215: LD_INT 25
41217: PUSH
41218: LD_INT 28
41220: PUSH
41221: LD_INT 29
41223: PUSH
41224: LD_INT 30
41226: PUSH
41227: LD_INT 31
41229: PUSH
41230: LD_INT 37
41232: PUSH
41233: LD_INT 38
41235: PUSH
41236: LD_INT 32
41238: PUSH
41239: LD_INT 27
41241: PUSH
41242: LD_INT 33
41244: PUSH
41245: LD_INT 69
41247: PUSH
41248: LD_INT 39
41250: PUSH
41251: LD_INT 34
41253: PUSH
41254: LD_INT 40
41256: PUSH
41257: LD_INT 71
41259: PUSH
41260: LD_INT 23
41262: PUSH
41263: LD_INT 44
41265: PUSH
41266: LD_INT 48
41268: PUSH
41269: LD_INT 49
41271: PUSH
41272: LD_INT 50
41274: PUSH
41275: LD_INT 51
41277: PUSH
41278: LD_INT 52
41280: PUSH
41281: LD_INT 53
41283: PUSH
41284: LD_INT 54
41286: PUSH
41287: LD_INT 55
41289: PUSH
41290: LD_INT 56
41292: PUSH
41293: LD_INT 57
41295: PUSH
41296: LD_INT 58
41298: PUSH
41299: LD_INT 59
41301: PUSH
41302: LD_INT 63
41304: PUSH
41305: LD_INT 64
41307: PUSH
41308: LD_INT 65
41310: PUSH
41311: LD_INT 82
41313: PUSH
41314: LD_INT 83
41316: PUSH
41317: LD_INT 84
41319: PUSH
41320: LD_INT 85
41322: PUSH
41323: LD_INT 86
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: ST_TO_ADDR
41381: GO 41384
41383: POP
// if state > - 1 and state < 3 then
41384: LD_VAR 0 3
41388: PUSH
41389: LD_INT 1
41391: NEG
41392: GREATER
41393: PUSH
41394: LD_VAR 0 3
41398: PUSH
41399: LD_INT 3
41401: LESS
41402: AND
41403: IFFALSE 41460
// for i in result do
41405: LD_ADDR_VAR 0 5
41409: PUSH
41410: LD_VAR 0 4
41414: PUSH
41415: FOR_IN
41416: IFFALSE 41458
// if GetTech ( i , side ) <> state then
41418: LD_VAR 0 5
41422: PPUSH
41423: LD_VAR 0 1
41427: PPUSH
41428: CALL_OW 321
41432: PUSH
41433: LD_VAR 0 3
41437: NONEQUAL
41438: IFFALSE 41456
// result := result diff i ;
41440: LD_ADDR_VAR 0 4
41444: PUSH
41445: LD_VAR 0 4
41449: PUSH
41450: LD_VAR 0 5
41454: DIFF
41455: ST_TO_ADDR
41456: GO 41415
41458: POP
41459: POP
// end ;
41460: LD_VAR 0 4
41464: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41465: LD_INT 0
41467: PPUSH
41468: PPUSH
41469: PPUSH
// result := true ;
41470: LD_ADDR_VAR 0 3
41474: PUSH
41475: LD_INT 1
41477: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41478: LD_ADDR_VAR 0 5
41482: PUSH
41483: LD_VAR 0 2
41487: PPUSH
41488: CALL_OW 480
41492: ST_TO_ADDR
// if not tmp then
41493: LD_VAR 0 5
41497: NOT
41498: IFFALSE 41502
// exit ;
41500: GO 41551
// for i in tmp do
41502: LD_ADDR_VAR 0 4
41506: PUSH
41507: LD_VAR 0 5
41511: PUSH
41512: FOR_IN
41513: IFFALSE 41549
// if GetTech ( i , side ) <> state_researched then
41515: LD_VAR 0 4
41519: PPUSH
41520: LD_VAR 0 1
41524: PPUSH
41525: CALL_OW 321
41529: PUSH
41530: LD_INT 2
41532: NONEQUAL
41533: IFFALSE 41547
// begin result := false ;
41535: LD_ADDR_VAR 0 3
41539: PUSH
41540: LD_INT 0
41542: ST_TO_ADDR
// exit ;
41543: POP
41544: POP
41545: GO 41551
// end ;
41547: GO 41512
41549: POP
41550: POP
// end ;
41551: LD_VAR 0 3
41555: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41556: LD_INT 0
41558: PPUSH
41559: PPUSH
41560: PPUSH
41561: PPUSH
41562: PPUSH
41563: PPUSH
41564: PPUSH
41565: PPUSH
41566: PPUSH
41567: PPUSH
41568: PPUSH
41569: PPUSH
41570: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41571: LD_VAR 0 1
41575: NOT
41576: PUSH
41577: LD_VAR 0 1
41581: PPUSH
41582: CALL_OW 257
41586: PUSH
41587: LD_INT 9
41589: NONEQUAL
41590: OR
41591: IFFALSE 41595
// exit ;
41593: GO 42168
// side := GetSide ( unit ) ;
41595: LD_ADDR_VAR 0 9
41599: PUSH
41600: LD_VAR 0 1
41604: PPUSH
41605: CALL_OW 255
41609: ST_TO_ADDR
// tech_space := tech_spacanom ;
41610: LD_ADDR_VAR 0 12
41614: PUSH
41615: LD_INT 29
41617: ST_TO_ADDR
// tech_time := tech_taurad ;
41618: LD_ADDR_VAR 0 13
41622: PUSH
41623: LD_INT 28
41625: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41626: LD_ADDR_VAR 0 11
41630: PUSH
41631: LD_VAR 0 1
41635: PPUSH
41636: CALL_OW 310
41640: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41641: LD_VAR 0 11
41645: PPUSH
41646: CALL_OW 247
41650: PUSH
41651: LD_INT 2
41653: EQUAL
41654: IFFALSE 41658
// exit ;
41656: GO 42168
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41658: LD_ADDR_VAR 0 8
41662: PUSH
41663: LD_INT 81
41665: PUSH
41666: LD_VAR 0 9
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 3
41677: PUSH
41678: LD_INT 21
41680: PUSH
41681: LD_INT 3
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PPUSH
41696: CALL_OW 69
41700: ST_TO_ADDR
// if not tmp then
41701: LD_VAR 0 8
41705: NOT
41706: IFFALSE 41710
// exit ;
41708: GO 42168
// if in_unit then
41710: LD_VAR 0 11
41714: IFFALSE 41738
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41716: LD_ADDR_VAR 0 10
41720: PUSH
41721: LD_VAR 0 8
41725: PPUSH
41726: LD_VAR 0 11
41730: PPUSH
41731: CALL_OW 74
41735: ST_TO_ADDR
41736: GO 41758
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41738: LD_ADDR_VAR 0 10
41742: PUSH
41743: LD_VAR 0 8
41747: PPUSH
41748: LD_VAR 0 1
41752: PPUSH
41753: CALL_OW 74
41757: ST_TO_ADDR
// if not enemy then
41758: LD_VAR 0 10
41762: NOT
41763: IFFALSE 41767
// exit ;
41765: GO 42168
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41767: LD_VAR 0 11
41771: PUSH
41772: LD_VAR 0 11
41776: PPUSH
41777: LD_VAR 0 10
41781: PPUSH
41782: CALL_OW 296
41786: PUSH
41787: LD_INT 13
41789: GREATER
41790: AND
41791: PUSH
41792: LD_VAR 0 1
41796: PPUSH
41797: LD_VAR 0 10
41801: PPUSH
41802: CALL_OW 296
41806: PUSH
41807: LD_INT 12
41809: GREATER
41810: OR
41811: IFFALSE 41815
// exit ;
41813: GO 42168
// missile := [ 1 ] ;
41815: LD_ADDR_VAR 0 14
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: EMPTY
41824: LIST
41825: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41826: LD_VAR 0 9
41830: PPUSH
41831: LD_VAR 0 12
41835: PPUSH
41836: CALL_OW 325
41840: IFFALSE 41869
// missile := Replace ( missile , missile + 1 , 2 ) ;
41842: LD_ADDR_VAR 0 14
41846: PUSH
41847: LD_VAR 0 14
41851: PPUSH
41852: LD_VAR 0 14
41856: PUSH
41857: LD_INT 1
41859: PLUS
41860: PPUSH
41861: LD_INT 2
41863: PPUSH
41864: CALL_OW 1
41868: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41869: LD_VAR 0 9
41873: PPUSH
41874: LD_VAR 0 13
41878: PPUSH
41879: CALL_OW 325
41883: PUSH
41884: LD_VAR 0 10
41888: PPUSH
41889: CALL_OW 255
41893: PPUSH
41894: LD_VAR 0 13
41898: PPUSH
41899: CALL_OW 325
41903: NOT
41904: AND
41905: IFFALSE 41934
// missile := Replace ( missile , missile + 1 , 3 ) ;
41907: LD_ADDR_VAR 0 14
41911: PUSH
41912: LD_VAR 0 14
41916: PPUSH
41917: LD_VAR 0 14
41921: PUSH
41922: LD_INT 1
41924: PLUS
41925: PPUSH
41926: LD_INT 3
41928: PPUSH
41929: CALL_OW 1
41933: ST_TO_ADDR
// if missile < 2 then
41934: LD_VAR 0 14
41938: PUSH
41939: LD_INT 2
41941: LESS
41942: IFFALSE 41946
// exit ;
41944: GO 42168
// x := GetX ( enemy ) ;
41946: LD_ADDR_VAR 0 4
41950: PUSH
41951: LD_VAR 0 10
41955: PPUSH
41956: CALL_OW 250
41960: ST_TO_ADDR
// y := GetY ( enemy ) ;
41961: LD_ADDR_VAR 0 5
41965: PUSH
41966: LD_VAR 0 10
41970: PPUSH
41971: CALL_OW 251
41975: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41976: LD_ADDR_VAR 0 6
41980: PUSH
41981: LD_VAR 0 4
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PPUSH
41990: LD_INT 1
41992: PPUSH
41993: CALL_OW 12
41997: PLUS
41998: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41999: LD_ADDR_VAR 0 7
42003: PUSH
42004: LD_VAR 0 5
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PPUSH
42013: LD_INT 1
42015: PPUSH
42016: CALL_OW 12
42020: PLUS
42021: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42022: LD_VAR 0 6
42026: PPUSH
42027: LD_VAR 0 7
42031: PPUSH
42032: CALL_OW 488
42036: NOT
42037: IFFALSE 42059
// begin _x := x ;
42039: LD_ADDR_VAR 0 6
42043: PUSH
42044: LD_VAR 0 4
42048: ST_TO_ADDR
// _y := y ;
42049: LD_ADDR_VAR 0 7
42053: PUSH
42054: LD_VAR 0 5
42058: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42059: LD_ADDR_VAR 0 3
42063: PUSH
42064: LD_INT 1
42066: PPUSH
42067: LD_VAR 0 14
42071: PPUSH
42072: CALL_OW 12
42076: ST_TO_ADDR
// case i of 1 :
42077: LD_VAR 0 3
42081: PUSH
42082: LD_INT 1
42084: DOUBLE
42085: EQUAL
42086: IFTRUE 42090
42088: GO 42107
42090: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42091: LD_VAR 0 1
42095: PPUSH
42096: LD_VAR 0 10
42100: PPUSH
42101: CALL_OW 115
42105: GO 42168
42107: LD_INT 2
42109: DOUBLE
42110: EQUAL
42111: IFTRUE 42115
42113: GO 42137
42115: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42116: LD_VAR 0 1
42120: PPUSH
42121: LD_VAR 0 6
42125: PPUSH
42126: LD_VAR 0 7
42130: PPUSH
42131: CALL_OW 153
42135: GO 42168
42137: LD_INT 3
42139: DOUBLE
42140: EQUAL
42141: IFTRUE 42145
42143: GO 42167
42145: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42146: LD_VAR 0 1
42150: PPUSH
42151: LD_VAR 0 6
42155: PPUSH
42156: LD_VAR 0 7
42160: PPUSH
42161: CALL_OW 154
42165: GO 42168
42167: POP
// end ;
42168: LD_VAR 0 2
42172: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42173: LD_INT 0
42175: PPUSH
42176: PPUSH
42177: PPUSH
42178: PPUSH
42179: PPUSH
42180: PPUSH
// if not unit or not building then
42181: LD_VAR 0 1
42185: NOT
42186: PUSH
42187: LD_VAR 0 2
42191: NOT
42192: OR
42193: IFFALSE 42197
// exit ;
42195: GO 42355
// x := GetX ( building ) ;
42197: LD_ADDR_VAR 0 5
42201: PUSH
42202: LD_VAR 0 2
42206: PPUSH
42207: CALL_OW 250
42211: ST_TO_ADDR
// y := GetY ( building ) ;
42212: LD_ADDR_VAR 0 6
42216: PUSH
42217: LD_VAR 0 2
42221: PPUSH
42222: CALL_OW 251
42226: ST_TO_ADDR
// for i = 0 to 5 do
42227: LD_ADDR_VAR 0 4
42231: PUSH
42232: DOUBLE
42233: LD_INT 0
42235: DEC
42236: ST_TO_ADDR
42237: LD_INT 5
42239: PUSH
42240: FOR_TO
42241: IFFALSE 42353
// begin _x := ShiftX ( x , i , 3 ) ;
42243: LD_ADDR_VAR 0 7
42247: PUSH
42248: LD_VAR 0 5
42252: PPUSH
42253: LD_VAR 0 4
42257: PPUSH
42258: LD_INT 3
42260: PPUSH
42261: CALL_OW 272
42265: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42266: LD_ADDR_VAR 0 8
42270: PUSH
42271: LD_VAR 0 6
42275: PPUSH
42276: LD_VAR 0 4
42280: PPUSH
42281: LD_INT 3
42283: PPUSH
42284: CALL_OW 273
42288: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42289: LD_VAR 0 7
42293: PPUSH
42294: LD_VAR 0 8
42298: PPUSH
42299: CALL_OW 488
42303: NOT
42304: IFFALSE 42308
// continue ;
42306: GO 42240
// if HexInfo ( _x , _y ) = 0 then
42308: LD_VAR 0 7
42312: PPUSH
42313: LD_VAR 0 8
42317: PPUSH
42318: CALL_OW 428
42322: PUSH
42323: LD_INT 0
42325: EQUAL
42326: IFFALSE 42351
// begin ComMoveXY ( unit , _x , _y ) ;
42328: LD_VAR 0 1
42332: PPUSH
42333: LD_VAR 0 7
42337: PPUSH
42338: LD_VAR 0 8
42342: PPUSH
42343: CALL_OW 111
// exit ;
42347: POP
42348: POP
42349: GO 42355
// end ; end ;
42351: GO 42240
42353: POP
42354: POP
// end ;
42355: LD_VAR 0 3
42359: RET
// export function ScanBase ( side , base_area ) ; begin
42360: LD_INT 0
42362: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42363: LD_ADDR_VAR 0 3
42367: PUSH
42368: LD_VAR 0 2
42372: PPUSH
42373: LD_INT 81
42375: PUSH
42376: LD_VAR 0 1
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PPUSH
42385: CALL_OW 70
42389: ST_TO_ADDR
// end ;
42390: LD_VAR 0 3
42394: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42395: LD_INT 0
42397: PPUSH
42398: PPUSH
42399: PPUSH
42400: PPUSH
// result := false ;
42401: LD_ADDR_VAR 0 2
42405: PUSH
42406: LD_INT 0
42408: ST_TO_ADDR
// side := GetSide ( unit ) ;
42409: LD_ADDR_VAR 0 3
42413: PUSH
42414: LD_VAR 0 1
42418: PPUSH
42419: CALL_OW 255
42423: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42424: LD_ADDR_VAR 0 4
42428: PUSH
42429: LD_VAR 0 1
42433: PPUSH
42434: CALL_OW 248
42438: ST_TO_ADDR
// case nat of 1 :
42439: LD_VAR 0 4
42443: PUSH
42444: LD_INT 1
42446: DOUBLE
42447: EQUAL
42448: IFTRUE 42452
42450: GO 42463
42452: POP
// tech := tech_lassight ; 2 :
42453: LD_ADDR_VAR 0 5
42457: PUSH
42458: LD_INT 12
42460: ST_TO_ADDR
42461: GO 42502
42463: LD_INT 2
42465: DOUBLE
42466: EQUAL
42467: IFTRUE 42471
42469: GO 42482
42471: POP
// tech := tech_mortar ; 3 :
42472: LD_ADDR_VAR 0 5
42476: PUSH
42477: LD_INT 41
42479: ST_TO_ADDR
42480: GO 42502
42482: LD_INT 3
42484: DOUBLE
42485: EQUAL
42486: IFTRUE 42490
42488: GO 42501
42490: POP
// tech := tech_bazooka ; end ;
42491: LD_ADDR_VAR 0 5
42495: PUSH
42496: LD_INT 44
42498: ST_TO_ADDR
42499: GO 42502
42501: POP
// if Researched ( side , tech ) then
42502: LD_VAR 0 3
42506: PPUSH
42507: LD_VAR 0 5
42511: PPUSH
42512: CALL_OW 325
42516: IFFALSE 42543
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42518: LD_ADDR_VAR 0 2
42522: PUSH
42523: LD_INT 5
42525: PUSH
42526: LD_INT 8
42528: PUSH
42529: LD_INT 9
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: LIST
42536: PUSH
42537: LD_VAR 0 4
42541: ARRAY
42542: ST_TO_ADDR
// end ;
42543: LD_VAR 0 2
42547: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42548: LD_INT 0
42550: PPUSH
42551: PPUSH
42552: PPUSH
// if not mines then
42553: LD_VAR 0 2
42557: NOT
42558: IFFALSE 42562
// exit ;
42560: GO 42706
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42562: LD_ADDR_VAR 0 5
42566: PUSH
42567: LD_INT 81
42569: PUSH
42570: LD_VAR 0 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 3
42581: PUSH
42582: LD_INT 21
42584: PUSH
42585: LD_INT 3
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PPUSH
42600: CALL_OW 69
42604: ST_TO_ADDR
// for i in mines do
42605: LD_ADDR_VAR 0 4
42609: PUSH
42610: LD_VAR 0 2
42614: PUSH
42615: FOR_IN
42616: IFFALSE 42704
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42618: LD_VAR 0 4
42622: PUSH
42623: LD_INT 1
42625: ARRAY
42626: PPUSH
42627: LD_VAR 0 4
42631: PUSH
42632: LD_INT 2
42634: ARRAY
42635: PPUSH
42636: CALL_OW 458
42640: NOT
42641: IFFALSE 42645
// continue ;
42643: GO 42615
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42645: LD_VAR 0 4
42649: PUSH
42650: LD_INT 1
42652: ARRAY
42653: PPUSH
42654: LD_VAR 0 4
42658: PUSH
42659: LD_INT 2
42661: ARRAY
42662: PPUSH
42663: CALL_OW 428
42667: PUSH
42668: LD_VAR 0 5
42672: IN
42673: IFFALSE 42702
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42675: LD_VAR 0 4
42679: PUSH
42680: LD_INT 1
42682: ARRAY
42683: PPUSH
42684: LD_VAR 0 4
42688: PUSH
42689: LD_INT 2
42691: ARRAY
42692: PPUSH
42693: LD_VAR 0 1
42697: PPUSH
42698: CALL_OW 456
// end ;
42702: GO 42615
42704: POP
42705: POP
// end ;
42706: LD_VAR 0 3
42710: RET
// export function Count ( array ) ; begin
42711: LD_INT 0
42713: PPUSH
// result := array + 0 ;
42714: LD_ADDR_VAR 0 2
42718: PUSH
42719: LD_VAR 0 1
42723: PUSH
42724: LD_INT 0
42726: PLUS
42727: ST_TO_ADDR
// end ;
42728: LD_VAR 0 2
42732: RET
// export function IsEmpty ( building ) ; begin
42733: LD_INT 0
42735: PPUSH
// if not building then
42736: LD_VAR 0 1
42740: NOT
42741: IFFALSE 42745
// exit ;
42743: GO 42788
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42745: LD_ADDR_VAR 0 2
42749: PUSH
42750: LD_VAR 0 1
42754: PUSH
42755: LD_INT 22
42757: PUSH
42758: LD_VAR 0 1
42762: PPUSH
42763: CALL_OW 255
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 58
42774: PUSH
42775: EMPTY
42776: LIST
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PPUSH
42782: CALL_OW 69
42786: IN
42787: ST_TO_ADDR
// end ;
42788: LD_VAR 0 2
42792: RET
// export function IsNotFull ( building ) ; var places ; begin
42793: LD_INT 0
42795: PPUSH
42796: PPUSH
// if not building then
42797: LD_VAR 0 1
42801: NOT
42802: IFFALSE 42806
// exit ;
42804: GO 42834
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42806: LD_ADDR_VAR 0 2
42810: PUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: LD_INT 3
42818: PUSH
42819: LD_INT 62
42821: PUSH
42822: EMPTY
42823: LIST
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PPUSH
42829: CALL_OW 72
42833: ST_TO_ADDR
// end ;
42834: LD_VAR 0 2
42838: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42839: LD_INT 0
42841: PPUSH
42842: PPUSH
42843: PPUSH
42844: PPUSH
// tmp := [ ] ;
42845: LD_ADDR_VAR 0 3
42849: PUSH
42850: EMPTY
42851: ST_TO_ADDR
// list := [ ] ;
42852: LD_ADDR_VAR 0 5
42856: PUSH
42857: EMPTY
42858: ST_TO_ADDR
// for i = 16 to 25 do
42859: LD_ADDR_VAR 0 4
42863: PUSH
42864: DOUBLE
42865: LD_INT 16
42867: DEC
42868: ST_TO_ADDR
42869: LD_INT 25
42871: PUSH
42872: FOR_TO
42873: IFFALSE 42946
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42875: LD_ADDR_VAR 0 3
42879: PUSH
42880: LD_VAR 0 3
42884: PUSH
42885: LD_INT 22
42887: PUSH
42888: LD_VAR 0 1
42892: PPUSH
42893: CALL_OW 255
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 91
42904: PUSH
42905: LD_VAR 0 1
42909: PUSH
42910: LD_INT 6
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 30
42920: PUSH
42921: LD_VAR 0 4
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: LIST
42934: PUSH
42935: EMPTY
42936: LIST
42937: PPUSH
42938: CALL_OW 69
42942: ADD
42943: ST_TO_ADDR
42944: GO 42872
42946: POP
42947: POP
// for i = 1 to tmp do
42948: LD_ADDR_VAR 0 4
42952: PUSH
42953: DOUBLE
42954: LD_INT 1
42956: DEC
42957: ST_TO_ADDR
42958: LD_VAR 0 3
42962: PUSH
42963: FOR_TO
42964: IFFALSE 43052
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42966: LD_ADDR_VAR 0 5
42970: PUSH
42971: LD_VAR 0 5
42975: PUSH
42976: LD_VAR 0 3
42980: PUSH
42981: LD_VAR 0 4
42985: ARRAY
42986: PPUSH
42987: CALL_OW 266
42991: PUSH
42992: LD_VAR 0 3
42996: PUSH
42997: LD_VAR 0 4
43001: ARRAY
43002: PPUSH
43003: CALL_OW 250
43007: PUSH
43008: LD_VAR 0 3
43012: PUSH
43013: LD_VAR 0 4
43017: ARRAY
43018: PPUSH
43019: CALL_OW 251
43023: PUSH
43024: LD_VAR 0 3
43028: PUSH
43029: LD_VAR 0 4
43033: ARRAY
43034: PPUSH
43035: CALL_OW 254
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: PUSH
43046: EMPTY
43047: LIST
43048: ADD
43049: ST_TO_ADDR
43050: GO 42963
43052: POP
43053: POP
// result := list ;
43054: LD_ADDR_VAR 0 2
43058: PUSH
43059: LD_VAR 0 5
43063: ST_TO_ADDR
// end ;
43064: LD_VAR 0 2
43068: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43069: LD_INT 0
43071: PPUSH
43072: PPUSH
43073: PPUSH
43074: PPUSH
43075: PPUSH
43076: PPUSH
43077: PPUSH
// if not factory then
43078: LD_VAR 0 1
43082: NOT
43083: IFFALSE 43087
// exit ;
43085: GO 43680
// if control = control_apeman then
43087: LD_VAR 0 4
43091: PUSH
43092: LD_INT 5
43094: EQUAL
43095: IFFALSE 43204
// begin tmp := UnitsInside ( factory ) ;
43097: LD_ADDR_VAR 0 8
43101: PUSH
43102: LD_VAR 0 1
43106: PPUSH
43107: CALL_OW 313
43111: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43112: LD_VAR 0 8
43116: PPUSH
43117: LD_INT 25
43119: PUSH
43120: LD_INT 12
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PPUSH
43127: CALL_OW 72
43131: NOT
43132: IFFALSE 43142
// control := control_manual ;
43134: LD_ADDR_VAR 0 4
43138: PUSH
43139: LD_INT 1
43141: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43142: LD_ADDR_VAR 0 8
43146: PUSH
43147: LD_VAR 0 1
43151: PPUSH
43152: CALL 42839 0 1
43156: ST_TO_ADDR
// if tmp then
43157: LD_VAR 0 8
43161: IFFALSE 43204
// begin for i in tmp do
43163: LD_ADDR_VAR 0 7
43167: PUSH
43168: LD_VAR 0 8
43172: PUSH
43173: FOR_IN
43174: IFFALSE 43202
// if i [ 1 ] = b_ext_radio then
43176: LD_VAR 0 7
43180: PUSH
43181: LD_INT 1
43183: ARRAY
43184: PUSH
43185: LD_INT 22
43187: EQUAL
43188: IFFALSE 43200
// begin control := control_remote ;
43190: LD_ADDR_VAR 0 4
43194: PUSH
43195: LD_INT 2
43197: ST_TO_ADDR
// break ;
43198: GO 43202
// end ;
43200: GO 43173
43202: POP
43203: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43204: LD_VAR 0 1
43208: PPUSH
43209: LD_VAR 0 2
43213: PPUSH
43214: LD_VAR 0 3
43218: PPUSH
43219: LD_VAR 0 4
43223: PPUSH
43224: LD_VAR 0 5
43228: PPUSH
43229: CALL_OW 448
43233: IFFALSE 43268
// begin result := [ chassis , engine , control , weapon ] ;
43235: LD_ADDR_VAR 0 6
43239: PUSH
43240: LD_VAR 0 2
43244: PUSH
43245: LD_VAR 0 3
43249: PUSH
43250: LD_VAR 0 4
43254: PUSH
43255: LD_VAR 0 5
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: ST_TO_ADDR
// exit ;
43266: GO 43680
// end ; _chassis := AvailableChassisList ( factory ) ;
43268: LD_ADDR_VAR 0 9
43272: PUSH
43273: LD_VAR 0 1
43277: PPUSH
43278: CALL_OW 475
43282: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43283: LD_ADDR_VAR 0 11
43287: PUSH
43288: LD_VAR 0 1
43292: PPUSH
43293: CALL_OW 476
43297: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43298: LD_ADDR_VAR 0 12
43302: PUSH
43303: LD_VAR 0 1
43307: PPUSH
43308: CALL_OW 477
43312: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43313: LD_ADDR_VAR 0 10
43317: PUSH
43318: LD_VAR 0 1
43322: PPUSH
43323: CALL_OW 478
43327: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43328: LD_VAR 0 9
43332: NOT
43333: PUSH
43334: LD_VAR 0 11
43338: NOT
43339: OR
43340: PUSH
43341: LD_VAR 0 12
43345: NOT
43346: OR
43347: PUSH
43348: LD_VAR 0 10
43352: NOT
43353: OR
43354: IFFALSE 43389
// begin result := [ chassis , engine , control , weapon ] ;
43356: LD_ADDR_VAR 0 6
43360: PUSH
43361: LD_VAR 0 2
43365: PUSH
43366: LD_VAR 0 3
43370: PUSH
43371: LD_VAR 0 4
43375: PUSH
43376: LD_VAR 0 5
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: ST_TO_ADDR
// exit ;
43387: GO 43680
// end ; if not chassis in _chassis then
43389: LD_VAR 0 2
43393: PUSH
43394: LD_VAR 0 9
43398: IN
43399: NOT
43400: IFFALSE 43426
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43402: LD_ADDR_VAR 0 2
43406: PUSH
43407: LD_VAR 0 9
43411: PUSH
43412: LD_INT 1
43414: PPUSH
43415: LD_VAR 0 9
43419: PPUSH
43420: CALL_OW 12
43424: ARRAY
43425: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43426: LD_VAR 0 2
43430: PPUSH
43431: LD_VAR 0 3
43435: PPUSH
43436: CALL 43685 0 2
43440: NOT
43441: IFFALSE 43500
// repeat engine := _engine [ 1 ] ;
43443: LD_ADDR_VAR 0 3
43447: PUSH
43448: LD_VAR 0 11
43452: PUSH
43453: LD_INT 1
43455: ARRAY
43456: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43457: LD_ADDR_VAR 0 11
43461: PUSH
43462: LD_VAR 0 11
43466: PPUSH
43467: LD_INT 1
43469: PPUSH
43470: CALL_OW 3
43474: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43475: LD_VAR 0 2
43479: PPUSH
43480: LD_VAR 0 3
43484: PPUSH
43485: CALL 43685 0 2
43489: PUSH
43490: LD_VAR 0 11
43494: PUSH
43495: EMPTY
43496: EQUAL
43497: OR
43498: IFFALSE 43443
// if not control in _control then
43500: LD_VAR 0 4
43504: PUSH
43505: LD_VAR 0 12
43509: IN
43510: NOT
43511: IFFALSE 43537
// control := _control [ rand ( 1 , _control ) ] ;
43513: LD_ADDR_VAR 0 4
43517: PUSH
43518: LD_VAR 0 12
43522: PUSH
43523: LD_INT 1
43525: PPUSH
43526: LD_VAR 0 12
43530: PPUSH
43531: CALL_OW 12
43535: ARRAY
43536: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43537: LD_VAR 0 2
43541: PPUSH
43542: LD_VAR 0 5
43546: PPUSH
43547: CALL 43905 0 2
43551: NOT
43552: IFFALSE 43611
// repeat weapon := _weapon [ 1 ] ;
43554: LD_ADDR_VAR 0 5
43558: PUSH
43559: LD_VAR 0 10
43563: PUSH
43564: LD_INT 1
43566: ARRAY
43567: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43568: LD_ADDR_VAR 0 10
43572: PUSH
43573: LD_VAR 0 10
43577: PPUSH
43578: LD_INT 1
43580: PPUSH
43581: CALL_OW 3
43585: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43586: LD_VAR 0 2
43590: PPUSH
43591: LD_VAR 0 5
43595: PPUSH
43596: CALL 43905 0 2
43600: PUSH
43601: LD_VAR 0 10
43605: PUSH
43606: EMPTY
43607: EQUAL
43608: OR
43609: IFFALSE 43554
// result := [ ] ;
43611: LD_ADDR_VAR 0 6
43615: PUSH
43616: EMPTY
43617: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43618: LD_VAR 0 1
43622: PPUSH
43623: LD_VAR 0 2
43627: PPUSH
43628: LD_VAR 0 3
43632: PPUSH
43633: LD_VAR 0 4
43637: PPUSH
43638: LD_VAR 0 5
43642: PPUSH
43643: CALL_OW 448
43647: IFFALSE 43680
// result := [ chassis , engine , control , weapon ] ;
43649: LD_ADDR_VAR 0 6
43653: PUSH
43654: LD_VAR 0 2
43658: PUSH
43659: LD_VAR 0 3
43663: PUSH
43664: LD_VAR 0 4
43668: PUSH
43669: LD_VAR 0 5
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: ST_TO_ADDR
// end ;
43680: LD_VAR 0 6
43684: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43685: LD_INT 0
43687: PPUSH
// if not chassis or not engine then
43688: LD_VAR 0 1
43692: NOT
43693: PUSH
43694: LD_VAR 0 2
43698: NOT
43699: OR
43700: IFFALSE 43704
// exit ;
43702: GO 43900
// case engine of engine_solar :
43704: LD_VAR 0 2
43708: PUSH
43709: LD_INT 2
43711: DOUBLE
43712: EQUAL
43713: IFTRUE 43717
43715: GO 43755
43717: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43718: LD_ADDR_VAR 0 3
43722: PUSH
43723: LD_INT 11
43725: PUSH
43726: LD_INT 12
43728: PUSH
43729: LD_INT 13
43731: PUSH
43732: LD_INT 14
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: ST_TO_ADDR
43753: GO 43884
43755: LD_INT 1
43757: DOUBLE
43758: EQUAL
43759: IFTRUE 43763
43761: GO 43825
43763: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43764: LD_ADDR_VAR 0 3
43768: PUSH
43769: LD_INT 11
43771: PUSH
43772: LD_INT 12
43774: PUSH
43775: LD_INT 13
43777: PUSH
43778: LD_INT 14
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: LD_INT 3
43789: PUSH
43790: LD_INT 4
43792: PUSH
43793: LD_INT 5
43795: PUSH
43796: LD_INT 21
43798: PUSH
43799: LD_INT 23
43801: PUSH
43802: LD_INT 22
43804: PUSH
43805: LD_INT 24
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: ST_TO_ADDR
43823: GO 43884
43825: LD_INT 3
43827: DOUBLE
43828: EQUAL
43829: IFTRUE 43833
43831: GO 43883
43833: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43834: LD_ADDR_VAR 0 3
43838: PUSH
43839: LD_INT 13
43841: PUSH
43842: LD_INT 14
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: LD_INT 3
43850: PUSH
43851: LD_INT 4
43853: PUSH
43854: LD_INT 5
43856: PUSH
43857: LD_INT 21
43859: PUSH
43860: LD_INT 22
43862: PUSH
43863: LD_INT 23
43865: PUSH
43866: LD_INT 24
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: ST_TO_ADDR
43881: GO 43884
43883: POP
// result := ( chassis in result ) ;
43884: LD_ADDR_VAR 0 3
43888: PUSH
43889: LD_VAR 0 1
43893: PUSH
43894: LD_VAR 0 3
43898: IN
43899: ST_TO_ADDR
// end ;
43900: LD_VAR 0 3
43904: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43905: LD_INT 0
43907: PPUSH
// if not chassis or not weapon then
43908: LD_VAR 0 1
43912: NOT
43913: PUSH
43914: LD_VAR 0 2
43918: NOT
43919: OR
43920: IFFALSE 43924
// exit ;
43922: GO 44984
// case weapon of us_machine_gun :
43924: LD_VAR 0 2
43928: PUSH
43929: LD_INT 2
43931: DOUBLE
43932: EQUAL
43933: IFTRUE 43937
43935: GO 43967
43937: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43938: LD_ADDR_VAR 0 3
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: LD_INT 2
43948: PUSH
43949: LD_INT 3
43951: PUSH
43952: LD_INT 4
43954: PUSH
43955: LD_INT 5
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: ST_TO_ADDR
43965: GO 44968
43967: LD_INT 3
43969: DOUBLE
43970: EQUAL
43971: IFTRUE 43975
43973: GO 44005
43975: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43976: LD_ADDR_VAR 0 3
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: LD_INT 3
43989: PUSH
43990: LD_INT 4
43992: PUSH
43993: LD_INT 5
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: ST_TO_ADDR
44003: GO 44968
44005: LD_INT 11
44007: DOUBLE
44008: EQUAL
44009: IFTRUE 44013
44011: GO 44043
44013: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44014: LD_ADDR_VAR 0 3
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: LD_INT 2
44024: PUSH
44025: LD_INT 3
44027: PUSH
44028: LD_INT 4
44030: PUSH
44031: LD_INT 5
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
44041: GO 44968
44043: LD_INT 4
44045: DOUBLE
44046: EQUAL
44047: IFTRUE 44051
44049: GO 44077
44051: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44052: LD_ADDR_VAR 0 3
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: LD_INT 3
44062: PUSH
44063: LD_INT 4
44065: PUSH
44066: LD_INT 5
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: ST_TO_ADDR
44075: GO 44968
44077: LD_INT 5
44079: DOUBLE
44080: EQUAL
44081: IFTRUE 44085
44083: GO 44111
44085: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44086: LD_ADDR_VAR 0 3
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: LD_INT 3
44096: PUSH
44097: LD_INT 4
44099: PUSH
44100: LD_INT 5
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: ST_TO_ADDR
44109: GO 44968
44111: LD_INT 9
44113: DOUBLE
44114: EQUAL
44115: IFTRUE 44119
44117: GO 44145
44119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44120: LD_ADDR_VAR 0 3
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: LD_INT 3
44130: PUSH
44131: LD_INT 4
44133: PUSH
44134: LD_INT 5
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: ST_TO_ADDR
44143: GO 44968
44145: LD_INT 7
44147: DOUBLE
44148: EQUAL
44149: IFTRUE 44153
44151: GO 44179
44153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44154: LD_ADDR_VAR 0 3
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: LD_INT 3
44164: PUSH
44165: LD_INT 4
44167: PUSH
44168: LD_INT 5
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: ST_TO_ADDR
44177: GO 44968
44179: LD_INT 12
44181: DOUBLE
44182: EQUAL
44183: IFTRUE 44187
44185: GO 44213
44187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44188: LD_ADDR_VAR 0 3
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 3
44198: PUSH
44199: LD_INT 4
44201: PUSH
44202: LD_INT 5
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: ST_TO_ADDR
44211: GO 44968
44213: LD_INT 13
44215: DOUBLE
44216: EQUAL
44217: IFTRUE 44221
44219: GO 44247
44221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44222: LD_ADDR_VAR 0 3
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: LD_INT 3
44232: PUSH
44233: LD_INT 4
44235: PUSH
44236: LD_INT 5
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: ST_TO_ADDR
44245: GO 44968
44247: LD_INT 14
44249: DOUBLE
44250: EQUAL
44251: IFTRUE 44255
44253: GO 44273
44255: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44256: LD_ADDR_VAR 0 3
44260: PUSH
44261: LD_INT 4
44263: PUSH
44264: LD_INT 5
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: ST_TO_ADDR
44271: GO 44968
44273: LD_INT 6
44275: DOUBLE
44276: EQUAL
44277: IFTRUE 44281
44279: GO 44299
44281: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44282: LD_ADDR_VAR 0 3
44286: PUSH
44287: LD_INT 4
44289: PUSH
44290: LD_INT 5
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: ST_TO_ADDR
44297: GO 44968
44299: LD_INT 10
44301: DOUBLE
44302: EQUAL
44303: IFTRUE 44307
44305: GO 44325
44307: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44308: LD_ADDR_VAR 0 3
44312: PUSH
44313: LD_INT 4
44315: PUSH
44316: LD_INT 5
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: ST_TO_ADDR
44323: GO 44968
44325: LD_INT 22
44327: DOUBLE
44328: EQUAL
44329: IFTRUE 44333
44331: GO 44359
44333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44334: LD_ADDR_VAR 0 3
44338: PUSH
44339: LD_INT 11
44341: PUSH
44342: LD_INT 12
44344: PUSH
44345: LD_INT 13
44347: PUSH
44348: LD_INT 14
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: ST_TO_ADDR
44357: GO 44968
44359: LD_INT 23
44361: DOUBLE
44362: EQUAL
44363: IFTRUE 44367
44365: GO 44393
44367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44368: LD_ADDR_VAR 0 3
44372: PUSH
44373: LD_INT 11
44375: PUSH
44376: LD_INT 12
44378: PUSH
44379: LD_INT 13
44381: PUSH
44382: LD_INT 14
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: ST_TO_ADDR
44391: GO 44968
44393: LD_INT 24
44395: DOUBLE
44396: EQUAL
44397: IFTRUE 44401
44399: GO 44427
44401: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44402: LD_ADDR_VAR 0 3
44406: PUSH
44407: LD_INT 11
44409: PUSH
44410: LD_INT 12
44412: PUSH
44413: LD_INT 13
44415: PUSH
44416: LD_INT 14
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
44425: GO 44968
44427: LD_INT 30
44429: DOUBLE
44430: EQUAL
44431: IFTRUE 44435
44433: GO 44461
44435: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44436: LD_ADDR_VAR 0 3
44440: PUSH
44441: LD_INT 11
44443: PUSH
44444: LD_INT 12
44446: PUSH
44447: LD_INT 13
44449: PUSH
44450: LD_INT 14
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: ST_TO_ADDR
44459: GO 44968
44461: LD_INT 25
44463: DOUBLE
44464: EQUAL
44465: IFTRUE 44469
44467: GO 44487
44469: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44470: LD_ADDR_VAR 0 3
44474: PUSH
44475: LD_INT 13
44477: PUSH
44478: LD_INT 14
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: ST_TO_ADDR
44485: GO 44968
44487: LD_INT 27
44489: DOUBLE
44490: EQUAL
44491: IFTRUE 44495
44493: GO 44513
44495: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44496: LD_ADDR_VAR 0 3
44500: PUSH
44501: LD_INT 13
44503: PUSH
44504: LD_INT 14
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: ST_TO_ADDR
44511: GO 44968
44513: LD_INT 92
44515: DOUBLE
44516: EQUAL
44517: IFTRUE 44521
44519: GO 44547
44521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44522: LD_ADDR_VAR 0 3
44526: PUSH
44527: LD_INT 11
44529: PUSH
44530: LD_INT 12
44532: PUSH
44533: LD_INT 13
44535: PUSH
44536: LD_INT 14
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: ST_TO_ADDR
44545: GO 44968
44547: LD_INT 28
44549: DOUBLE
44550: EQUAL
44551: IFTRUE 44555
44553: GO 44573
44555: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44556: LD_ADDR_VAR 0 3
44560: PUSH
44561: LD_INT 13
44563: PUSH
44564: LD_INT 14
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: ST_TO_ADDR
44571: GO 44968
44573: LD_INT 29
44575: DOUBLE
44576: EQUAL
44577: IFTRUE 44581
44579: GO 44599
44581: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44582: LD_ADDR_VAR 0 3
44586: PUSH
44587: LD_INT 13
44589: PUSH
44590: LD_INT 14
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: ST_TO_ADDR
44597: GO 44968
44599: LD_INT 31
44601: DOUBLE
44602: EQUAL
44603: IFTRUE 44607
44605: GO 44625
44607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44608: LD_ADDR_VAR 0 3
44612: PUSH
44613: LD_INT 13
44615: PUSH
44616: LD_INT 14
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: ST_TO_ADDR
44623: GO 44968
44625: LD_INT 26
44627: DOUBLE
44628: EQUAL
44629: IFTRUE 44633
44631: GO 44651
44633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44634: LD_ADDR_VAR 0 3
44638: PUSH
44639: LD_INT 13
44641: PUSH
44642: LD_INT 14
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: ST_TO_ADDR
44649: GO 44968
44651: LD_INT 42
44653: DOUBLE
44654: EQUAL
44655: IFTRUE 44659
44657: GO 44685
44659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44660: LD_ADDR_VAR 0 3
44664: PUSH
44665: LD_INT 21
44667: PUSH
44668: LD_INT 22
44670: PUSH
44671: LD_INT 23
44673: PUSH
44674: LD_INT 24
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: ST_TO_ADDR
44683: GO 44968
44685: LD_INT 43
44687: DOUBLE
44688: EQUAL
44689: IFTRUE 44693
44691: GO 44719
44693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44694: LD_ADDR_VAR 0 3
44698: PUSH
44699: LD_INT 21
44701: PUSH
44702: LD_INT 22
44704: PUSH
44705: LD_INT 23
44707: PUSH
44708: LD_INT 24
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: ST_TO_ADDR
44717: GO 44968
44719: LD_INT 44
44721: DOUBLE
44722: EQUAL
44723: IFTRUE 44727
44725: GO 44753
44727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44728: LD_ADDR_VAR 0 3
44732: PUSH
44733: LD_INT 21
44735: PUSH
44736: LD_INT 22
44738: PUSH
44739: LD_INT 23
44741: PUSH
44742: LD_INT 24
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: ST_TO_ADDR
44751: GO 44968
44753: LD_INT 45
44755: DOUBLE
44756: EQUAL
44757: IFTRUE 44761
44759: GO 44787
44761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44762: LD_ADDR_VAR 0 3
44766: PUSH
44767: LD_INT 21
44769: PUSH
44770: LD_INT 22
44772: PUSH
44773: LD_INT 23
44775: PUSH
44776: LD_INT 24
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: ST_TO_ADDR
44785: GO 44968
44787: LD_INT 49
44789: DOUBLE
44790: EQUAL
44791: IFTRUE 44795
44793: GO 44821
44795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44796: LD_ADDR_VAR 0 3
44800: PUSH
44801: LD_INT 21
44803: PUSH
44804: LD_INT 22
44806: PUSH
44807: LD_INT 23
44809: PUSH
44810: LD_INT 24
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: ST_TO_ADDR
44819: GO 44968
44821: LD_INT 51
44823: DOUBLE
44824: EQUAL
44825: IFTRUE 44829
44827: GO 44855
44829: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44830: LD_ADDR_VAR 0 3
44834: PUSH
44835: LD_INT 21
44837: PUSH
44838: LD_INT 22
44840: PUSH
44841: LD_INT 23
44843: PUSH
44844: LD_INT 24
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: ST_TO_ADDR
44853: GO 44968
44855: LD_INT 52
44857: DOUBLE
44858: EQUAL
44859: IFTRUE 44863
44861: GO 44889
44863: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44864: LD_ADDR_VAR 0 3
44868: PUSH
44869: LD_INT 21
44871: PUSH
44872: LD_INT 22
44874: PUSH
44875: LD_INT 23
44877: PUSH
44878: LD_INT 24
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: ST_TO_ADDR
44887: GO 44968
44889: LD_INT 53
44891: DOUBLE
44892: EQUAL
44893: IFTRUE 44897
44895: GO 44915
44897: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44898: LD_ADDR_VAR 0 3
44902: PUSH
44903: LD_INT 23
44905: PUSH
44906: LD_INT 24
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: ST_TO_ADDR
44913: GO 44968
44915: LD_INT 46
44917: DOUBLE
44918: EQUAL
44919: IFTRUE 44923
44921: GO 44941
44923: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44924: LD_ADDR_VAR 0 3
44928: PUSH
44929: LD_INT 23
44931: PUSH
44932: LD_INT 24
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: ST_TO_ADDR
44939: GO 44968
44941: LD_INT 47
44943: DOUBLE
44944: EQUAL
44945: IFTRUE 44949
44947: GO 44967
44949: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44950: LD_ADDR_VAR 0 3
44954: PUSH
44955: LD_INT 23
44957: PUSH
44958: LD_INT 24
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: ST_TO_ADDR
44965: GO 44968
44967: POP
// result := ( chassis in result ) ;
44968: LD_ADDR_VAR 0 3
44972: PUSH
44973: LD_VAR 0 1
44977: PUSH
44978: LD_VAR 0 3
44982: IN
44983: ST_TO_ADDR
// end ;
44984: LD_VAR 0 3
44988: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44989: LD_INT 0
44991: PPUSH
44992: PPUSH
44993: PPUSH
44994: PPUSH
44995: PPUSH
44996: PPUSH
44997: PPUSH
// result := array ;
44998: LD_ADDR_VAR 0 5
45002: PUSH
45003: LD_VAR 0 1
45007: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45008: LD_VAR 0 1
45012: NOT
45013: PUSH
45014: LD_VAR 0 2
45018: NOT
45019: OR
45020: PUSH
45021: LD_VAR 0 3
45025: NOT
45026: OR
45027: PUSH
45028: LD_VAR 0 2
45032: PUSH
45033: LD_VAR 0 1
45037: GREATER
45038: OR
45039: PUSH
45040: LD_VAR 0 3
45044: PUSH
45045: LD_VAR 0 1
45049: GREATER
45050: OR
45051: IFFALSE 45055
// exit ;
45053: GO 45351
// if direction then
45055: LD_VAR 0 4
45059: IFFALSE 45123
// begin d := 1 ;
45061: LD_ADDR_VAR 0 9
45065: PUSH
45066: LD_INT 1
45068: ST_TO_ADDR
// if i_from > i_to then
45069: LD_VAR 0 2
45073: PUSH
45074: LD_VAR 0 3
45078: GREATER
45079: IFFALSE 45105
// length := ( array - i_from ) + i_to else
45081: LD_ADDR_VAR 0 11
45085: PUSH
45086: LD_VAR 0 1
45090: PUSH
45091: LD_VAR 0 2
45095: MINUS
45096: PUSH
45097: LD_VAR 0 3
45101: PLUS
45102: ST_TO_ADDR
45103: GO 45121
// length := i_to - i_from ;
45105: LD_ADDR_VAR 0 11
45109: PUSH
45110: LD_VAR 0 3
45114: PUSH
45115: LD_VAR 0 2
45119: MINUS
45120: ST_TO_ADDR
// end else
45121: GO 45184
// begin d := - 1 ;
45123: LD_ADDR_VAR 0 9
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: ST_TO_ADDR
// if i_from > i_to then
45132: LD_VAR 0 2
45136: PUSH
45137: LD_VAR 0 3
45141: GREATER
45142: IFFALSE 45162
// length := i_from - i_to else
45144: LD_ADDR_VAR 0 11
45148: PUSH
45149: LD_VAR 0 2
45153: PUSH
45154: LD_VAR 0 3
45158: MINUS
45159: ST_TO_ADDR
45160: GO 45184
// length := ( array - i_to ) + i_from ;
45162: LD_ADDR_VAR 0 11
45166: PUSH
45167: LD_VAR 0 1
45171: PUSH
45172: LD_VAR 0 3
45176: MINUS
45177: PUSH
45178: LD_VAR 0 2
45182: PLUS
45183: ST_TO_ADDR
// end ; if not length then
45184: LD_VAR 0 11
45188: NOT
45189: IFFALSE 45193
// exit ;
45191: GO 45351
// tmp := array ;
45193: LD_ADDR_VAR 0 10
45197: PUSH
45198: LD_VAR 0 1
45202: ST_TO_ADDR
// for i = 1 to length do
45203: LD_ADDR_VAR 0 6
45207: PUSH
45208: DOUBLE
45209: LD_INT 1
45211: DEC
45212: ST_TO_ADDR
45213: LD_VAR 0 11
45217: PUSH
45218: FOR_TO
45219: IFFALSE 45339
// begin for j = 1 to array do
45221: LD_ADDR_VAR 0 7
45225: PUSH
45226: DOUBLE
45227: LD_INT 1
45229: DEC
45230: ST_TO_ADDR
45231: LD_VAR 0 1
45235: PUSH
45236: FOR_TO
45237: IFFALSE 45325
// begin k := j + d ;
45239: LD_ADDR_VAR 0 8
45243: PUSH
45244: LD_VAR 0 7
45248: PUSH
45249: LD_VAR 0 9
45253: PLUS
45254: ST_TO_ADDR
// if k > array then
45255: LD_VAR 0 8
45259: PUSH
45260: LD_VAR 0 1
45264: GREATER
45265: IFFALSE 45275
// k := 1 ;
45267: LD_ADDR_VAR 0 8
45271: PUSH
45272: LD_INT 1
45274: ST_TO_ADDR
// if not k then
45275: LD_VAR 0 8
45279: NOT
45280: IFFALSE 45292
// k := array ;
45282: LD_ADDR_VAR 0 8
45286: PUSH
45287: LD_VAR 0 1
45291: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45292: LD_ADDR_VAR 0 10
45296: PUSH
45297: LD_VAR 0 10
45301: PPUSH
45302: LD_VAR 0 8
45306: PPUSH
45307: LD_VAR 0 1
45311: PUSH
45312: LD_VAR 0 7
45316: ARRAY
45317: PPUSH
45318: CALL_OW 1
45322: ST_TO_ADDR
// end ;
45323: GO 45236
45325: POP
45326: POP
// array := tmp ;
45327: LD_ADDR_VAR 0 1
45331: PUSH
45332: LD_VAR 0 10
45336: ST_TO_ADDR
// end ;
45337: GO 45218
45339: POP
45340: POP
// result := array ;
45341: LD_ADDR_VAR 0 5
45345: PUSH
45346: LD_VAR 0 1
45350: ST_TO_ADDR
// end ;
45351: LD_VAR 0 5
45355: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45356: LD_INT 0
45358: PPUSH
45359: PPUSH
// result := 0 ;
45360: LD_ADDR_VAR 0 3
45364: PUSH
45365: LD_INT 0
45367: ST_TO_ADDR
// if not array or not value in array then
45368: LD_VAR 0 1
45372: NOT
45373: PUSH
45374: LD_VAR 0 2
45378: PUSH
45379: LD_VAR 0 1
45383: IN
45384: NOT
45385: OR
45386: IFFALSE 45390
// exit ;
45388: GO 45444
// for i = 1 to array do
45390: LD_ADDR_VAR 0 4
45394: PUSH
45395: DOUBLE
45396: LD_INT 1
45398: DEC
45399: ST_TO_ADDR
45400: LD_VAR 0 1
45404: PUSH
45405: FOR_TO
45406: IFFALSE 45442
// if value = array [ i ] then
45408: LD_VAR 0 2
45412: PUSH
45413: LD_VAR 0 1
45417: PUSH
45418: LD_VAR 0 4
45422: ARRAY
45423: EQUAL
45424: IFFALSE 45440
// begin result := i ;
45426: LD_ADDR_VAR 0 3
45430: PUSH
45431: LD_VAR 0 4
45435: ST_TO_ADDR
// exit ;
45436: POP
45437: POP
45438: GO 45444
// end ;
45440: GO 45405
45442: POP
45443: POP
// end ;
45444: LD_VAR 0 3
45448: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45449: LD_INT 0
45451: PPUSH
// vc_chassis := chassis ;
45452: LD_ADDR_OWVAR 37
45456: PUSH
45457: LD_VAR 0 1
45461: ST_TO_ADDR
// vc_engine := engine ;
45462: LD_ADDR_OWVAR 39
45466: PUSH
45467: LD_VAR 0 2
45471: ST_TO_ADDR
// vc_control := control ;
45472: LD_ADDR_OWVAR 38
45476: PUSH
45477: LD_VAR 0 3
45481: ST_TO_ADDR
// vc_weapon := weapon ;
45482: LD_ADDR_OWVAR 40
45486: PUSH
45487: LD_VAR 0 4
45491: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45492: LD_ADDR_OWVAR 41
45496: PUSH
45497: LD_VAR 0 5
45501: ST_TO_ADDR
// end ;
45502: LD_VAR 0 6
45506: RET
// export function WantPlant ( unit ) ; var task ; begin
45507: LD_INT 0
45509: PPUSH
45510: PPUSH
// result := false ;
45511: LD_ADDR_VAR 0 2
45515: PUSH
45516: LD_INT 0
45518: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45519: LD_ADDR_VAR 0 3
45523: PUSH
45524: LD_VAR 0 1
45528: PPUSH
45529: CALL_OW 437
45533: ST_TO_ADDR
// if task then
45534: LD_VAR 0 3
45538: IFFALSE 45566
// if task [ 1 ] [ 1 ] = p then
45540: LD_VAR 0 3
45544: PUSH
45545: LD_INT 1
45547: ARRAY
45548: PUSH
45549: LD_INT 1
45551: ARRAY
45552: PUSH
45553: LD_STRING p
45555: EQUAL
45556: IFFALSE 45566
// result := true ;
45558: LD_ADDR_VAR 0 2
45562: PUSH
45563: LD_INT 1
45565: ST_TO_ADDR
// end ;
45566: LD_VAR 0 2
45570: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45571: LD_INT 0
45573: PPUSH
45574: PPUSH
45575: PPUSH
45576: PPUSH
// if pos < 1 then
45577: LD_VAR 0 2
45581: PUSH
45582: LD_INT 1
45584: LESS
45585: IFFALSE 45589
// exit ;
45587: GO 45892
// if pos = 1 then
45589: LD_VAR 0 2
45593: PUSH
45594: LD_INT 1
45596: EQUAL
45597: IFFALSE 45630
// result := Replace ( arr , pos [ 1 ] , value ) else
45599: LD_ADDR_VAR 0 4
45603: PUSH
45604: LD_VAR 0 1
45608: PPUSH
45609: LD_VAR 0 2
45613: PUSH
45614: LD_INT 1
45616: ARRAY
45617: PPUSH
45618: LD_VAR 0 3
45622: PPUSH
45623: CALL_OW 1
45627: ST_TO_ADDR
45628: GO 45892
// begin tmp := arr ;
45630: LD_ADDR_VAR 0 6
45634: PUSH
45635: LD_VAR 0 1
45639: ST_TO_ADDR
// s_arr := [ tmp ] ;
45640: LD_ADDR_VAR 0 7
45644: PUSH
45645: LD_VAR 0 6
45649: PUSH
45650: EMPTY
45651: LIST
45652: ST_TO_ADDR
// for i = 1 to pos - 1 do
45653: LD_ADDR_VAR 0 5
45657: PUSH
45658: DOUBLE
45659: LD_INT 1
45661: DEC
45662: ST_TO_ADDR
45663: LD_VAR 0 2
45667: PUSH
45668: LD_INT 1
45670: MINUS
45671: PUSH
45672: FOR_TO
45673: IFFALSE 45718
// begin tmp := tmp [ pos [ i ] ] ;
45675: LD_ADDR_VAR 0 6
45679: PUSH
45680: LD_VAR 0 6
45684: PUSH
45685: LD_VAR 0 2
45689: PUSH
45690: LD_VAR 0 5
45694: ARRAY
45695: ARRAY
45696: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45697: LD_ADDR_VAR 0 7
45701: PUSH
45702: LD_VAR 0 7
45706: PUSH
45707: LD_VAR 0 6
45711: PUSH
45712: EMPTY
45713: LIST
45714: ADD
45715: ST_TO_ADDR
// end ;
45716: GO 45672
45718: POP
45719: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45720: LD_ADDR_VAR 0 6
45724: PUSH
45725: LD_VAR 0 6
45729: PPUSH
45730: LD_VAR 0 2
45734: PUSH
45735: LD_VAR 0 2
45739: ARRAY
45740: PPUSH
45741: LD_VAR 0 3
45745: PPUSH
45746: CALL_OW 1
45750: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45751: LD_ADDR_VAR 0 7
45755: PUSH
45756: LD_VAR 0 7
45760: PPUSH
45761: LD_VAR 0 7
45765: PPUSH
45766: LD_VAR 0 6
45770: PPUSH
45771: CALL_OW 1
45775: ST_TO_ADDR
// for i = s_arr downto 2 do
45776: LD_ADDR_VAR 0 5
45780: PUSH
45781: DOUBLE
45782: LD_VAR 0 7
45786: INC
45787: ST_TO_ADDR
45788: LD_INT 2
45790: PUSH
45791: FOR_DOWNTO
45792: IFFALSE 45876
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45794: LD_ADDR_VAR 0 6
45798: PUSH
45799: LD_VAR 0 7
45803: PUSH
45804: LD_VAR 0 5
45808: PUSH
45809: LD_INT 1
45811: MINUS
45812: ARRAY
45813: PPUSH
45814: LD_VAR 0 2
45818: PUSH
45819: LD_VAR 0 5
45823: PUSH
45824: LD_INT 1
45826: MINUS
45827: ARRAY
45828: PPUSH
45829: LD_VAR 0 7
45833: PUSH
45834: LD_VAR 0 5
45838: ARRAY
45839: PPUSH
45840: CALL_OW 1
45844: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45845: LD_ADDR_VAR 0 7
45849: PUSH
45850: LD_VAR 0 7
45854: PPUSH
45855: LD_VAR 0 5
45859: PUSH
45860: LD_INT 1
45862: MINUS
45863: PPUSH
45864: LD_VAR 0 6
45868: PPUSH
45869: CALL_OW 1
45873: ST_TO_ADDR
// end ;
45874: GO 45791
45876: POP
45877: POP
// result := s_arr [ 1 ] ;
45878: LD_ADDR_VAR 0 4
45882: PUSH
45883: LD_VAR 0 7
45887: PUSH
45888: LD_INT 1
45890: ARRAY
45891: ST_TO_ADDR
// end ; end ;
45892: LD_VAR 0 4
45896: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45897: LD_INT 0
45899: PPUSH
45900: PPUSH
// if not list then
45901: LD_VAR 0 1
45905: NOT
45906: IFFALSE 45910
// exit ;
45908: GO 46001
// i := list [ pos1 ] ;
45910: LD_ADDR_VAR 0 5
45914: PUSH
45915: LD_VAR 0 1
45919: PUSH
45920: LD_VAR 0 2
45924: ARRAY
45925: ST_TO_ADDR
// if not i then
45926: LD_VAR 0 5
45930: NOT
45931: IFFALSE 45935
// exit ;
45933: GO 46001
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45935: LD_ADDR_VAR 0 1
45939: PUSH
45940: LD_VAR 0 1
45944: PPUSH
45945: LD_VAR 0 2
45949: PPUSH
45950: LD_VAR 0 1
45954: PUSH
45955: LD_VAR 0 3
45959: ARRAY
45960: PPUSH
45961: CALL_OW 1
45965: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45966: LD_ADDR_VAR 0 1
45970: PUSH
45971: LD_VAR 0 1
45975: PPUSH
45976: LD_VAR 0 3
45980: PPUSH
45981: LD_VAR 0 5
45985: PPUSH
45986: CALL_OW 1
45990: ST_TO_ADDR
// result := list ;
45991: LD_ADDR_VAR 0 4
45995: PUSH
45996: LD_VAR 0 1
46000: ST_TO_ADDR
// end ;
46001: LD_VAR 0 4
46005: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46006: LD_INT 0
46008: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46009: LD_ADDR_VAR 0 5
46013: PUSH
46014: LD_VAR 0 1
46018: PPUSH
46019: CALL_OW 250
46023: PPUSH
46024: LD_VAR 0 1
46028: PPUSH
46029: CALL_OW 251
46033: PPUSH
46034: LD_VAR 0 2
46038: PPUSH
46039: LD_VAR 0 3
46043: PPUSH
46044: LD_VAR 0 4
46048: PPUSH
46049: CALL 46427 0 5
46053: ST_TO_ADDR
// end ;
46054: LD_VAR 0 5
46058: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46059: LD_INT 0
46061: PPUSH
46062: PPUSH
46063: PPUSH
46064: PPUSH
// if not list or not unit then
46065: LD_VAR 0 2
46069: NOT
46070: PUSH
46071: LD_VAR 0 1
46075: NOT
46076: OR
46077: IFFALSE 46081
// exit ;
46079: GO 46422
// result := [ ] ;
46081: LD_ADDR_VAR 0 5
46085: PUSH
46086: EMPTY
46087: ST_TO_ADDR
// for i in list do
46088: LD_ADDR_VAR 0 6
46092: PUSH
46093: LD_VAR 0 2
46097: PUSH
46098: FOR_IN
46099: IFFALSE 46317
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46101: LD_ADDR_VAR 0 8
46105: PUSH
46106: LD_VAR 0 1
46110: PPUSH
46111: LD_VAR 0 6
46115: PUSH
46116: LD_INT 1
46118: ARRAY
46119: PPUSH
46120: LD_VAR 0 6
46124: PUSH
46125: LD_INT 2
46127: ARRAY
46128: PPUSH
46129: CALL_OW 297
46133: ST_TO_ADDR
// if not Count ( result ) then
46134: LD_VAR 0 5
46138: PPUSH
46139: CALL 42711 0 1
46143: NOT
46144: IFFALSE 46177
// begin result := Join ( result , [ i , tmp ] ) ;
46146: LD_ADDR_VAR 0 5
46150: PUSH
46151: LD_VAR 0 5
46155: PPUSH
46156: LD_VAR 0 6
46160: PUSH
46161: LD_VAR 0 8
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PPUSH
46170: CALL 78311 0 2
46174: ST_TO_ADDR
// continue ;
46175: GO 46098
// end ; if result [ result ] [ 2 ] <= tmp then
46177: LD_VAR 0 5
46181: PUSH
46182: LD_VAR 0 5
46186: ARRAY
46187: PUSH
46188: LD_INT 2
46190: ARRAY
46191: PUSH
46192: LD_VAR 0 8
46196: LESSEQUAL
46197: IFFALSE 46230
// result := Join ( result , [ i , tmp ] ) else
46199: LD_ADDR_VAR 0 5
46203: PUSH
46204: LD_VAR 0 5
46208: PPUSH
46209: LD_VAR 0 6
46213: PUSH
46214: LD_VAR 0 8
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PPUSH
46223: CALL 78311 0 2
46227: ST_TO_ADDR
46228: GO 46315
// begin for j := 1 to Count ( result ) do
46230: LD_ADDR_VAR 0 7
46234: PUSH
46235: DOUBLE
46236: LD_INT 1
46238: DEC
46239: ST_TO_ADDR
46240: LD_VAR 0 5
46244: PPUSH
46245: CALL 42711 0 1
46249: PUSH
46250: FOR_TO
46251: IFFALSE 46313
// begin if tmp < result [ j ] [ 2 ] then
46253: LD_VAR 0 8
46257: PUSH
46258: LD_VAR 0 5
46262: PUSH
46263: LD_VAR 0 7
46267: ARRAY
46268: PUSH
46269: LD_INT 2
46271: ARRAY
46272: LESS
46273: IFFALSE 46311
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46275: LD_ADDR_VAR 0 5
46279: PUSH
46280: LD_VAR 0 5
46284: PPUSH
46285: LD_VAR 0 7
46289: PPUSH
46290: LD_VAR 0 6
46294: PUSH
46295: LD_VAR 0 8
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PPUSH
46304: CALL_OW 2
46308: ST_TO_ADDR
// break ;
46309: GO 46313
// end ; end ;
46311: GO 46250
46313: POP
46314: POP
// end ; end ;
46315: GO 46098
46317: POP
46318: POP
// if result and not asc then
46319: LD_VAR 0 5
46323: PUSH
46324: LD_VAR 0 3
46328: NOT
46329: AND
46330: IFFALSE 46347
// result := ReverseArray ( result ) ;
46332: LD_ADDR_VAR 0 5
46336: PUSH
46337: LD_VAR 0 5
46341: PPUSH
46342: CALL 73587 0 1
46346: ST_TO_ADDR
// tmp := [ ] ;
46347: LD_ADDR_VAR 0 8
46351: PUSH
46352: EMPTY
46353: ST_TO_ADDR
// if mode then
46354: LD_VAR 0 4
46358: IFFALSE 46422
// begin for i := 1 to result do
46360: LD_ADDR_VAR 0 6
46364: PUSH
46365: DOUBLE
46366: LD_INT 1
46368: DEC
46369: ST_TO_ADDR
46370: LD_VAR 0 5
46374: PUSH
46375: FOR_TO
46376: IFFALSE 46410
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46378: LD_ADDR_VAR 0 8
46382: PUSH
46383: LD_VAR 0 8
46387: PPUSH
46388: LD_VAR 0 5
46392: PUSH
46393: LD_VAR 0 6
46397: ARRAY
46398: PUSH
46399: LD_INT 1
46401: ARRAY
46402: PPUSH
46403: CALL 78311 0 2
46407: ST_TO_ADDR
46408: GO 46375
46410: POP
46411: POP
// result := tmp ;
46412: LD_ADDR_VAR 0 5
46416: PUSH
46417: LD_VAR 0 8
46421: ST_TO_ADDR
// end ; end ;
46422: LD_VAR 0 5
46426: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46427: LD_INT 0
46429: PPUSH
46430: PPUSH
46431: PPUSH
46432: PPUSH
// if not list then
46433: LD_VAR 0 3
46437: NOT
46438: IFFALSE 46442
// exit ;
46440: GO 46830
// result := [ ] ;
46442: LD_ADDR_VAR 0 6
46446: PUSH
46447: EMPTY
46448: ST_TO_ADDR
// for i in list do
46449: LD_ADDR_VAR 0 7
46453: PUSH
46454: LD_VAR 0 3
46458: PUSH
46459: FOR_IN
46460: IFFALSE 46662
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46462: LD_ADDR_VAR 0 9
46466: PUSH
46467: LD_VAR 0 7
46471: PPUSH
46472: LD_VAR 0 1
46476: PPUSH
46477: LD_VAR 0 2
46481: PPUSH
46482: CALL_OW 297
46486: ST_TO_ADDR
// if not result then
46487: LD_VAR 0 6
46491: NOT
46492: IFFALSE 46518
// result := [ [ i , tmp ] ] else
46494: LD_ADDR_VAR 0 6
46498: PUSH
46499: LD_VAR 0 7
46503: PUSH
46504: LD_VAR 0 9
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: EMPTY
46514: LIST
46515: ST_TO_ADDR
46516: GO 46660
// begin if result [ result ] [ 2 ] < tmp then
46518: LD_VAR 0 6
46522: PUSH
46523: LD_VAR 0 6
46527: ARRAY
46528: PUSH
46529: LD_INT 2
46531: ARRAY
46532: PUSH
46533: LD_VAR 0 9
46537: LESS
46538: IFFALSE 46580
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46540: LD_ADDR_VAR 0 6
46544: PUSH
46545: LD_VAR 0 6
46549: PPUSH
46550: LD_VAR 0 6
46554: PUSH
46555: LD_INT 1
46557: PLUS
46558: PPUSH
46559: LD_VAR 0 7
46563: PUSH
46564: LD_VAR 0 9
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PPUSH
46573: CALL_OW 2
46577: ST_TO_ADDR
46578: GO 46660
// for j = 1 to result do
46580: LD_ADDR_VAR 0 8
46584: PUSH
46585: DOUBLE
46586: LD_INT 1
46588: DEC
46589: ST_TO_ADDR
46590: LD_VAR 0 6
46594: PUSH
46595: FOR_TO
46596: IFFALSE 46658
// begin if tmp < result [ j ] [ 2 ] then
46598: LD_VAR 0 9
46602: PUSH
46603: LD_VAR 0 6
46607: PUSH
46608: LD_VAR 0 8
46612: ARRAY
46613: PUSH
46614: LD_INT 2
46616: ARRAY
46617: LESS
46618: IFFALSE 46656
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46620: LD_ADDR_VAR 0 6
46624: PUSH
46625: LD_VAR 0 6
46629: PPUSH
46630: LD_VAR 0 8
46634: PPUSH
46635: LD_VAR 0 7
46639: PUSH
46640: LD_VAR 0 9
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PPUSH
46649: CALL_OW 2
46653: ST_TO_ADDR
// break ;
46654: GO 46658
// end ; end ;
46656: GO 46595
46658: POP
46659: POP
// end ; end ;
46660: GO 46459
46662: POP
46663: POP
// if result and not asc then
46664: LD_VAR 0 6
46668: PUSH
46669: LD_VAR 0 4
46673: NOT
46674: AND
46675: IFFALSE 46750
// begin tmp := result ;
46677: LD_ADDR_VAR 0 9
46681: PUSH
46682: LD_VAR 0 6
46686: ST_TO_ADDR
// for i = tmp downto 1 do
46687: LD_ADDR_VAR 0 7
46691: PUSH
46692: DOUBLE
46693: LD_VAR 0 9
46697: INC
46698: ST_TO_ADDR
46699: LD_INT 1
46701: PUSH
46702: FOR_DOWNTO
46703: IFFALSE 46748
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46705: LD_ADDR_VAR 0 6
46709: PUSH
46710: LD_VAR 0 6
46714: PPUSH
46715: LD_VAR 0 9
46719: PUSH
46720: LD_VAR 0 7
46724: MINUS
46725: PUSH
46726: LD_INT 1
46728: PLUS
46729: PPUSH
46730: LD_VAR 0 9
46734: PUSH
46735: LD_VAR 0 7
46739: ARRAY
46740: PPUSH
46741: CALL_OW 1
46745: ST_TO_ADDR
46746: GO 46702
46748: POP
46749: POP
// end ; tmp := [ ] ;
46750: LD_ADDR_VAR 0 9
46754: PUSH
46755: EMPTY
46756: ST_TO_ADDR
// if mode then
46757: LD_VAR 0 5
46761: IFFALSE 46830
// begin for i = 1 to result do
46763: LD_ADDR_VAR 0 7
46767: PUSH
46768: DOUBLE
46769: LD_INT 1
46771: DEC
46772: ST_TO_ADDR
46773: LD_VAR 0 6
46777: PUSH
46778: FOR_TO
46779: IFFALSE 46818
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46781: LD_ADDR_VAR 0 9
46785: PUSH
46786: LD_VAR 0 9
46790: PPUSH
46791: LD_VAR 0 7
46795: PPUSH
46796: LD_VAR 0 6
46800: PUSH
46801: LD_VAR 0 7
46805: ARRAY
46806: PUSH
46807: LD_INT 1
46809: ARRAY
46810: PPUSH
46811: CALL_OW 1
46815: ST_TO_ADDR
46816: GO 46778
46818: POP
46819: POP
// result := tmp ;
46820: LD_ADDR_VAR 0 6
46824: PUSH
46825: LD_VAR 0 9
46829: ST_TO_ADDR
// end ; end ;
46830: LD_VAR 0 6
46834: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46835: LD_INT 0
46837: PPUSH
46838: PPUSH
46839: PPUSH
46840: PPUSH
46841: PPUSH
46842: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46843: LD_ADDR_VAR 0 5
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: ST_TO_ADDR
// if not x or not y then
46865: LD_VAR 0 2
46869: NOT
46870: PUSH
46871: LD_VAR 0 3
46875: NOT
46876: OR
46877: IFFALSE 46881
// exit ;
46879: GO 48531
// if not range then
46881: LD_VAR 0 4
46885: NOT
46886: IFFALSE 46896
// range := 10 ;
46888: LD_ADDR_VAR 0 4
46892: PUSH
46893: LD_INT 10
46895: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46896: LD_ADDR_VAR 0 8
46900: PUSH
46901: LD_INT 81
46903: PUSH
46904: LD_VAR 0 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 92
46915: PUSH
46916: LD_VAR 0 2
46920: PUSH
46921: LD_VAR 0 3
46925: PUSH
46926: LD_VAR 0 4
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 3
46939: PUSH
46940: LD_INT 21
46942: PUSH
46943: LD_INT 3
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: LIST
46958: PPUSH
46959: CALL_OW 69
46963: ST_TO_ADDR
// if not tmp then
46964: LD_VAR 0 8
46968: NOT
46969: IFFALSE 46973
// exit ;
46971: GO 48531
// for i in tmp do
46973: LD_ADDR_VAR 0 6
46977: PUSH
46978: LD_VAR 0 8
46982: PUSH
46983: FOR_IN
46984: IFFALSE 48506
// begin points := [ 0 , 0 , 0 ] ;
46986: LD_ADDR_VAR 0 9
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: LIST
47004: ST_TO_ADDR
// bpoints := 1 ;
47005: LD_ADDR_VAR 0 10
47009: PUSH
47010: LD_INT 1
47012: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47013: LD_VAR 0 6
47017: PPUSH
47018: CALL_OW 247
47022: PUSH
47023: LD_INT 1
47025: DOUBLE
47026: EQUAL
47027: IFTRUE 47031
47029: GO 47609
47031: POP
// begin if GetClass ( i ) = 1 then
47032: LD_VAR 0 6
47036: PPUSH
47037: CALL_OW 257
47041: PUSH
47042: LD_INT 1
47044: EQUAL
47045: IFFALSE 47066
// points := [ 10 , 5 , 3 ] ;
47047: LD_ADDR_VAR 0 9
47051: PUSH
47052: LD_INT 10
47054: PUSH
47055: LD_INT 5
47057: PUSH
47058: LD_INT 3
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: LIST
47065: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47066: LD_VAR 0 6
47070: PPUSH
47071: CALL_OW 257
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: LD_INT 4
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: LIST
47089: IN
47090: IFFALSE 47111
// points := [ 3 , 2 , 1 ] ;
47092: LD_ADDR_VAR 0 9
47096: PUSH
47097: LD_INT 3
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: LIST
47110: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47111: LD_VAR 0 6
47115: PPUSH
47116: CALL_OW 257
47120: PUSH
47121: LD_INT 5
47123: EQUAL
47124: IFFALSE 47145
// points := [ 130 , 5 , 2 ] ;
47126: LD_ADDR_VAR 0 9
47130: PUSH
47131: LD_INT 130
47133: PUSH
47134: LD_INT 5
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: LIST
47144: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47145: LD_VAR 0 6
47149: PPUSH
47150: CALL_OW 257
47154: PUSH
47155: LD_INT 8
47157: EQUAL
47158: IFFALSE 47179
// points := [ 35 , 35 , 30 ] ;
47160: LD_ADDR_VAR 0 9
47164: PUSH
47165: LD_INT 35
47167: PUSH
47168: LD_INT 35
47170: PUSH
47171: LD_INT 30
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47179: LD_VAR 0 6
47183: PPUSH
47184: CALL_OW 257
47188: PUSH
47189: LD_INT 9
47191: EQUAL
47192: IFFALSE 47213
// points := [ 20 , 55 , 40 ] ;
47194: LD_ADDR_VAR 0 9
47198: PUSH
47199: LD_INT 20
47201: PUSH
47202: LD_INT 55
47204: PUSH
47205: LD_INT 40
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: LIST
47212: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47213: LD_VAR 0 6
47217: PPUSH
47218: CALL_OW 257
47222: PUSH
47223: LD_INT 12
47225: PUSH
47226: LD_INT 16
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: IN
47233: IFFALSE 47254
// points := [ 5 , 3 , 2 ] ;
47235: LD_ADDR_VAR 0 9
47239: PUSH
47240: LD_INT 5
47242: PUSH
47243: LD_INT 3
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: LIST
47253: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47254: LD_VAR 0 6
47258: PPUSH
47259: CALL_OW 257
47263: PUSH
47264: LD_INT 17
47266: EQUAL
47267: IFFALSE 47288
// points := [ 100 , 50 , 75 ] ;
47269: LD_ADDR_VAR 0 9
47273: PUSH
47274: LD_INT 100
47276: PUSH
47277: LD_INT 50
47279: PUSH
47280: LD_INT 75
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: LIST
47287: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47288: LD_VAR 0 6
47292: PPUSH
47293: CALL_OW 257
47297: PUSH
47298: LD_INT 15
47300: EQUAL
47301: IFFALSE 47322
// points := [ 10 , 5 , 3 ] ;
47303: LD_ADDR_VAR 0 9
47307: PUSH
47308: LD_INT 10
47310: PUSH
47311: LD_INT 5
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47322: LD_VAR 0 6
47326: PPUSH
47327: CALL_OW 257
47331: PUSH
47332: LD_INT 14
47334: EQUAL
47335: IFFALSE 47356
// points := [ 10 , 0 , 0 ] ;
47337: LD_ADDR_VAR 0 9
47341: PUSH
47342: LD_INT 10
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47356: LD_VAR 0 6
47360: PPUSH
47361: CALL_OW 257
47365: PUSH
47366: LD_INT 11
47368: EQUAL
47369: IFFALSE 47390
// points := [ 30 , 10 , 5 ] ;
47371: LD_ADDR_VAR 0 9
47375: PUSH
47376: LD_INT 30
47378: PUSH
47379: LD_INT 10
47381: PUSH
47382: LD_INT 5
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: LIST
47389: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47390: LD_VAR 0 1
47394: PPUSH
47395: LD_INT 5
47397: PPUSH
47398: CALL_OW 321
47402: PUSH
47403: LD_INT 2
47405: EQUAL
47406: IFFALSE 47423
// bpoints := bpoints * 1.8 ;
47408: LD_ADDR_VAR 0 10
47412: PUSH
47413: LD_VAR 0 10
47417: PUSH
47418: LD_REAL  1.80000000000000E+0000
47421: MUL
47422: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47423: LD_VAR 0 6
47427: PPUSH
47428: CALL_OW 257
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: LD_INT 3
47441: PUSH
47442: LD_INT 4
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: IN
47451: PUSH
47452: LD_VAR 0 1
47456: PPUSH
47457: LD_INT 51
47459: PPUSH
47460: CALL_OW 321
47464: PUSH
47465: LD_INT 2
47467: EQUAL
47468: AND
47469: IFFALSE 47486
// bpoints := bpoints * 1.2 ;
47471: LD_ADDR_VAR 0 10
47475: PUSH
47476: LD_VAR 0 10
47480: PUSH
47481: LD_REAL  1.20000000000000E+0000
47484: MUL
47485: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47486: LD_VAR 0 6
47490: PPUSH
47491: CALL_OW 257
47495: PUSH
47496: LD_INT 5
47498: PUSH
47499: LD_INT 7
47501: PUSH
47502: LD_INT 9
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: IN
47510: PUSH
47511: LD_VAR 0 1
47515: PPUSH
47516: LD_INT 52
47518: PPUSH
47519: CALL_OW 321
47523: PUSH
47524: LD_INT 2
47526: EQUAL
47527: AND
47528: IFFALSE 47545
// bpoints := bpoints * 1.5 ;
47530: LD_ADDR_VAR 0 10
47534: PUSH
47535: LD_VAR 0 10
47539: PUSH
47540: LD_REAL  1.50000000000000E+0000
47543: MUL
47544: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47545: LD_VAR 0 1
47549: PPUSH
47550: LD_INT 66
47552: PPUSH
47553: CALL_OW 321
47557: PUSH
47558: LD_INT 2
47560: EQUAL
47561: IFFALSE 47578
// bpoints := bpoints * 1.1 ;
47563: LD_ADDR_VAR 0 10
47567: PUSH
47568: LD_VAR 0 10
47572: PUSH
47573: LD_REAL  1.10000000000000E+0000
47576: MUL
47577: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47578: LD_ADDR_VAR 0 10
47582: PUSH
47583: LD_VAR 0 10
47587: PUSH
47588: LD_VAR 0 6
47592: PPUSH
47593: LD_INT 1
47595: PPUSH
47596: CALL_OW 259
47600: PUSH
47601: LD_REAL  1.15000000000000E+0000
47604: MUL
47605: MUL
47606: ST_TO_ADDR
// end ; unit_vehicle :
47607: GO 48435
47609: LD_INT 2
47611: DOUBLE
47612: EQUAL
47613: IFTRUE 47617
47615: GO 48423
47617: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47618: LD_VAR 0 6
47622: PPUSH
47623: CALL_OW 264
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: LD_INT 42
47633: PUSH
47634: LD_INT 24
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: LIST
47641: IN
47642: IFFALSE 47663
// points := [ 25 , 5 , 3 ] ;
47644: LD_ADDR_VAR 0 9
47648: PUSH
47649: LD_INT 25
47651: PUSH
47652: LD_INT 5
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47663: LD_VAR 0 6
47667: PPUSH
47668: CALL_OW 264
47672: PUSH
47673: LD_INT 4
47675: PUSH
47676: LD_INT 43
47678: PUSH
47679: LD_INT 25
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: LIST
47686: IN
47687: IFFALSE 47708
// points := [ 40 , 15 , 5 ] ;
47689: LD_ADDR_VAR 0 9
47693: PUSH
47694: LD_INT 40
47696: PUSH
47697: LD_INT 15
47699: PUSH
47700: LD_INT 5
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47708: LD_VAR 0 6
47712: PPUSH
47713: CALL_OW 264
47717: PUSH
47718: LD_INT 3
47720: PUSH
47721: LD_INT 23
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: IN
47728: IFFALSE 47749
// points := [ 7 , 25 , 8 ] ;
47730: LD_ADDR_VAR 0 9
47734: PUSH
47735: LD_INT 7
47737: PUSH
47738: LD_INT 25
47740: PUSH
47741: LD_INT 8
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47749: LD_VAR 0 6
47753: PPUSH
47754: CALL_OW 264
47758: PUSH
47759: LD_INT 5
47761: PUSH
47762: LD_INT 27
47764: PUSH
47765: LD_INT 44
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: IN
47773: IFFALSE 47794
// points := [ 14 , 50 , 16 ] ;
47775: LD_ADDR_VAR 0 9
47779: PUSH
47780: LD_INT 14
47782: PUSH
47783: LD_INT 50
47785: PUSH
47786: LD_INT 16
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47794: LD_VAR 0 6
47798: PPUSH
47799: CALL_OW 264
47803: PUSH
47804: LD_INT 6
47806: PUSH
47807: LD_INT 46
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: IN
47814: IFFALSE 47835
// points := [ 32 , 120 , 70 ] ;
47816: LD_ADDR_VAR 0 9
47820: PUSH
47821: LD_INT 32
47823: PUSH
47824: LD_INT 120
47826: PUSH
47827: LD_INT 70
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: LIST
47834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47835: LD_VAR 0 6
47839: PPUSH
47840: CALL_OW 264
47844: PUSH
47845: LD_INT 7
47847: PUSH
47848: LD_INT 28
47850: PUSH
47851: LD_INT 45
47853: PUSH
47854: LD_INT 92
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: IN
47863: IFFALSE 47884
// points := [ 35 , 20 , 45 ] ;
47865: LD_ADDR_VAR 0 9
47869: PUSH
47870: LD_INT 35
47872: PUSH
47873: LD_INT 20
47875: PUSH
47876: LD_INT 45
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: LIST
47883: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47884: LD_VAR 0 6
47888: PPUSH
47889: CALL_OW 264
47893: PUSH
47894: LD_INT 47
47896: PUSH
47897: EMPTY
47898: LIST
47899: IN
47900: IFFALSE 47921
// points := [ 67 , 45 , 75 ] ;
47902: LD_ADDR_VAR 0 9
47906: PUSH
47907: LD_INT 67
47909: PUSH
47910: LD_INT 45
47912: PUSH
47913: LD_INT 75
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47921: LD_VAR 0 6
47925: PPUSH
47926: CALL_OW 264
47930: PUSH
47931: LD_INT 26
47933: PUSH
47934: EMPTY
47935: LIST
47936: IN
47937: IFFALSE 47958
// points := [ 120 , 30 , 80 ] ;
47939: LD_ADDR_VAR 0 9
47943: PUSH
47944: LD_INT 120
47946: PUSH
47947: LD_INT 30
47949: PUSH
47950: LD_INT 80
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: LIST
47957: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47958: LD_VAR 0 6
47962: PPUSH
47963: CALL_OW 264
47967: PUSH
47968: LD_INT 22
47970: PUSH
47971: EMPTY
47972: LIST
47973: IN
47974: IFFALSE 47995
// points := [ 40 , 1 , 1 ] ;
47976: LD_ADDR_VAR 0 9
47980: PUSH
47981: LD_INT 40
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: LIST
47994: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47995: LD_VAR 0 6
47999: PPUSH
48000: CALL_OW 264
48004: PUSH
48005: LD_INT 29
48007: PUSH
48008: EMPTY
48009: LIST
48010: IN
48011: IFFALSE 48032
// points := [ 70 , 200 , 400 ] ;
48013: LD_ADDR_VAR 0 9
48017: PUSH
48018: LD_INT 70
48020: PUSH
48021: LD_INT 200
48023: PUSH
48024: LD_INT 400
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: LIST
48031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48032: LD_VAR 0 6
48036: PPUSH
48037: CALL_OW 264
48041: PUSH
48042: LD_INT 14
48044: PUSH
48045: LD_INT 53
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: IN
48052: IFFALSE 48073
// points := [ 40 , 10 , 20 ] ;
48054: LD_ADDR_VAR 0 9
48058: PUSH
48059: LD_INT 40
48061: PUSH
48062: LD_INT 10
48064: PUSH
48065: LD_INT 20
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: LIST
48072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48073: LD_VAR 0 6
48077: PPUSH
48078: CALL_OW 264
48082: PUSH
48083: LD_INT 9
48085: PUSH
48086: EMPTY
48087: LIST
48088: IN
48089: IFFALSE 48110
// points := [ 5 , 70 , 20 ] ;
48091: LD_ADDR_VAR 0 9
48095: PUSH
48096: LD_INT 5
48098: PUSH
48099: LD_INT 70
48101: PUSH
48102: LD_INT 20
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: LIST
48109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48110: LD_VAR 0 6
48114: PPUSH
48115: CALL_OW 264
48119: PUSH
48120: LD_INT 10
48122: PUSH
48123: EMPTY
48124: LIST
48125: IN
48126: IFFALSE 48147
// points := [ 35 , 110 , 70 ] ;
48128: LD_ADDR_VAR 0 9
48132: PUSH
48133: LD_INT 35
48135: PUSH
48136: LD_INT 110
48138: PUSH
48139: LD_INT 70
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: LIST
48146: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48147: LD_VAR 0 6
48151: PPUSH
48152: CALL_OW 265
48156: PUSH
48157: LD_INT 25
48159: EQUAL
48160: IFFALSE 48181
// points := [ 80 , 65 , 100 ] ;
48162: LD_ADDR_VAR 0 9
48166: PUSH
48167: LD_INT 80
48169: PUSH
48170: LD_INT 65
48172: PUSH
48173: LD_INT 100
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: LIST
48180: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48181: LD_VAR 0 6
48185: PPUSH
48186: CALL_OW 263
48190: PUSH
48191: LD_INT 1
48193: EQUAL
48194: IFFALSE 48229
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48196: LD_ADDR_VAR 0 10
48200: PUSH
48201: LD_VAR 0 10
48205: PUSH
48206: LD_VAR 0 6
48210: PPUSH
48211: CALL_OW 311
48215: PPUSH
48216: LD_INT 3
48218: PPUSH
48219: CALL_OW 259
48223: PUSH
48224: LD_INT 4
48226: MUL
48227: MUL
48228: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48229: LD_VAR 0 6
48233: PPUSH
48234: CALL_OW 263
48238: PUSH
48239: LD_INT 2
48241: EQUAL
48242: IFFALSE 48293
// begin j := IsControledBy ( i ) ;
48244: LD_ADDR_VAR 0 7
48248: PUSH
48249: LD_VAR 0 6
48253: PPUSH
48254: CALL_OW 312
48258: ST_TO_ADDR
// if j then
48259: LD_VAR 0 7
48263: IFFALSE 48293
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48265: LD_ADDR_VAR 0 10
48269: PUSH
48270: LD_VAR 0 10
48274: PUSH
48275: LD_VAR 0 7
48279: PPUSH
48280: LD_INT 3
48282: PPUSH
48283: CALL_OW 259
48287: PUSH
48288: LD_INT 3
48290: MUL
48291: MUL
48292: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48293: LD_VAR 0 6
48297: PPUSH
48298: CALL_OW 264
48302: PUSH
48303: LD_INT 5
48305: PUSH
48306: LD_INT 6
48308: PUSH
48309: LD_INT 46
48311: PUSH
48312: LD_INT 44
48314: PUSH
48315: LD_INT 47
48317: PUSH
48318: LD_INT 45
48320: PUSH
48321: LD_INT 28
48323: PUSH
48324: LD_INT 7
48326: PUSH
48327: LD_INT 27
48329: PUSH
48330: LD_INT 29
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: IN
48345: PUSH
48346: LD_VAR 0 1
48350: PPUSH
48351: LD_INT 52
48353: PPUSH
48354: CALL_OW 321
48358: PUSH
48359: LD_INT 2
48361: EQUAL
48362: AND
48363: IFFALSE 48380
// bpoints := bpoints * 1.2 ;
48365: LD_ADDR_VAR 0 10
48369: PUSH
48370: LD_VAR 0 10
48374: PUSH
48375: LD_REAL  1.20000000000000E+0000
48378: MUL
48379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48380: LD_VAR 0 6
48384: PPUSH
48385: CALL_OW 264
48389: PUSH
48390: LD_INT 6
48392: PUSH
48393: LD_INT 46
48395: PUSH
48396: LD_INT 47
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: LIST
48403: IN
48404: IFFALSE 48421
// bpoints := bpoints * 1.2 ;
48406: LD_ADDR_VAR 0 10
48410: PUSH
48411: LD_VAR 0 10
48415: PUSH
48416: LD_REAL  1.20000000000000E+0000
48419: MUL
48420: ST_TO_ADDR
// end ; unit_building :
48421: GO 48435
48423: LD_INT 3
48425: DOUBLE
48426: EQUAL
48427: IFTRUE 48431
48429: GO 48434
48431: POP
// ; end ;
48432: GO 48435
48434: POP
// for j = 1 to 3 do
48435: LD_ADDR_VAR 0 7
48439: PUSH
48440: DOUBLE
48441: LD_INT 1
48443: DEC
48444: ST_TO_ADDR
48445: LD_INT 3
48447: PUSH
48448: FOR_TO
48449: IFFALSE 48502
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48451: LD_ADDR_VAR 0 5
48455: PUSH
48456: LD_VAR 0 5
48460: PPUSH
48461: LD_VAR 0 7
48465: PPUSH
48466: LD_VAR 0 5
48470: PUSH
48471: LD_VAR 0 7
48475: ARRAY
48476: PUSH
48477: LD_VAR 0 9
48481: PUSH
48482: LD_VAR 0 7
48486: ARRAY
48487: PUSH
48488: LD_VAR 0 10
48492: MUL
48493: PLUS
48494: PPUSH
48495: CALL_OW 1
48499: ST_TO_ADDR
48500: GO 48448
48502: POP
48503: POP
// end ;
48504: GO 46983
48506: POP
48507: POP
// result := Replace ( result , 4 , tmp ) ;
48508: LD_ADDR_VAR 0 5
48512: PUSH
48513: LD_VAR 0 5
48517: PPUSH
48518: LD_INT 4
48520: PPUSH
48521: LD_VAR 0 8
48525: PPUSH
48526: CALL_OW 1
48530: ST_TO_ADDR
// end ;
48531: LD_VAR 0 5
48535: RET
// export function DangerAtRange ( unit , range ) ; begin
48536: LD_INT 0
48538: PPUSH
// if not unit then
48539: LD_VAR 0 1
48543: NOT
48544: IFFALSE 48548
// exit ;
48546: GO 48593
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48548: LD_ADDR_VAR 0 3
48552: PUSH
48553: LD_VAR 0 1
48557: PPUSH
48558: CALL_OW 255
48562: PPUSH
48563: LD_VAR 0 1
48567: PPUSH
48568: CALL_OW 250
48572: PPUSH
48573: LD_VAR 0 1
48577: PPUSH
48578: CALL_OW 251
48582: PPUSH
48583: LD_VAR 0 2
48587: PPUSH
48588: CALL 46835 0 4
48592: ST_TO_ADDR
// end ;
48593: LD_VAR 0 3
48597: RET
// export function DangerInArea ( side , area ) ; begin
48598: LD_INT 0
48600: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48601: LD_ADDR_VAR 0 3
48605: PUSH
48606: LD_VAR 0 2
48610: PPUSH
48611: LD_INT 81
48613: PUSH
48614: LD_VAR 0 1
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PPUSH
48623: CALL_OW 70
48627: ST_TO_ADDR
// end ;
48628: LD_VAR 0 3
48632: RET
// export function IsExtension ( b ) ; begin
48633: LD_INT 0
48635: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48636: LD_ADDR_VAR 0 2
48640: PUSH
48641: LD_VAR 0 1
48645: PUSH
48646: LD_INT 23
48648: PUSH
48649: LD_INT 20
48651: PUSH
48652: LD_INT 22
48654: PUSH
48655: LD_INT 17
48657: PUSH
48658: LD_INT 24
48660: PUSH
48661: LD_INT 21
48663: PUSH
48664: LD_INT 19
48666: PUSH
48667: LD_INT 16
48669: PUSH
48670: LD_INT 25
48672: PUSH
48673: LD_INT 18
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: IN
48688: ST_TO_ADDR
// end ;
48689: LD_VAR 0 2
48693: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48694: LD_INT 0
48696: PPUSH
48697: PPUSH
48698: PPUSH
// result := [ ] ;
48699: LD_ADDR_VAR 0 4
48703: PUSH
48704: EMPTY
48705: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48706: LD_ADDR_VAR 0 5
48710: PUSH
48711: LD_VAR 0 2
48715: PPUSH
48716: LD_INT 21
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PPUSH
48726: CALL_OW 70
48730: ST_TO_ADDR
// if not tmp then
48731: LD_VAR 0 5
48735: NOT
48736: IFFALSE 48740
// exit ;
48738: GO 48804
// if checkLink then
48740: LD_VAR 0 3
48744: IFFALSE 48794
// begin for i in tmp do
48746: LD_ADDR_VAR 0 6
48750: PUSH
48751: LD_VAR 0 5
48755: PUSH
48756: FOR_IN
48757: IFFALSE 48792
// if GetBase ( i ) <> base then
48759: LD_VAR 0 6
48763: PPUSH
48764: CALL_OW 274
48768: PUSH
48769: LD_VAR 0 1
48773: NONEQUAL
48774: IFFALSE 48790
// ComLinkToBase ( base , i ) ;
48776: LD_VAR 0 1
48780: PPUSH
48781: LD_VAR 0 6
48785: PPUSH
48786: CALL_OW 169
48790: GO 48756
48792: POP
48793: POP
// end ; result := tmp ;
48794: LD_ADDR_VAR 0 4
48798: PUSH
48799: LD_VAR 0 5
48803: ST_TO_ADDR
// end ;
48804: LD_VAR 0 4
48808: RET
// export function ComComplete ( units , b ) ; var i ; begin
48809: LD_INT 0
48811: PPUSH
48812: PPUSH
// if not units then
48813: LD_VAR 0 1
48817: NOT
48818: IFFALSE 48822
// exit ;
48820: GO 48912
// for i in units do
48822: LD_ADDR_VAR 0 4
48826: PUSH
48827: LD_VAR 0 1
48831: PUSH
48832: FOR_IN
48833: IFFALSE 48910
// if BuildingStatus ( b ) = bs_build then
48835: LD_VAR 0 2
48839: PPUSH
48840: CALL_OW 461
48844: PUSH
48845: LD_INT 1
48847: EQUAL
48848: IFFALSE 48908
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48850: LD_VAR 0 4
48854: PPUSH
48855: LD_STRING h
48857: PUSH
48858: LD_VAR 0 2
48862: PPUSH
48863: CALL_OW 250
48867: PUSH
48868: LD_VAR 0 2
48872: PPUSH
48873: CALL_OW 251
48877: PUSH
48878: LD_VAR 0 2
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: PUSH
48901: EMPTY
48902: LIST
48903: PPUSH
48904: CALL_OW 446
48908: GO 48832
48910: POP
48911: POP
// end ;
48912: LD_VAR 0 3
48916: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48917: LD_INT 0
48919: PPUSH
48920: PPUSH
48921: PPUSH
48922: PPUSH
48923: PPUSH
48924: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48925: LD_VAR 0 1
48929: NOT
48930: PUSH
48931: LD_VAR 0 1
48935: PPUSH
48936: CALL_OW 263
48940: PUSH
48941: LD_INT 2
48943: NONEQUAL
48944: OR
48945: IFFALSE 48949
// exit ;
48947: GO 49265
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48949: LD_ADDR_VAR 0 6
48953: PUSH
48954: LD_INT 22
48956: PUSH
48957: LD_VAR 0 1
48961: PPUSH
48962: CALL_OW 255
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: LD_INT 30
48976: PUSH
48977: LD_INT 36
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 34
48986: PUSH
48987: LD_INT 31
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: LIST
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PPUSH
49003: CALL_OW 69
49007: ST_TO_ADDR
// if not tmp then
49008: LD_VAR 0 6
49012: NOT
49013: IFFALSE 49017
// exit ;
49015: GO 49265
// result := [ ] ;
49017: LD_ADDR_VAR 0 2
49021: PUSH
49022: EMPTY
49023: ST_TO_ADDR
// for i in tmp do
49024: LD_ADDR_VAR 0 3
49028: PUSH
49029: LD_VAR 0 6
49033: PUSH
49034: FOR_IN
49035: IFFALSE 49106
// begin t := UnitsInside ( i ) ;
49037: LD_ADDR_VAR 0 4
49041: PUSH
49042: LD_VAR 0 3
49046: PPUSH
49047: CALL_OW 313
49051: ST_TO_ADDR
// if t then
49052: LD_VAR 0 4
49056: IFFALSE 49104
// for j in t do
49058: LD_ADDR_VAR 0 7
49062: PUSH
49063: LD_VAR 0 4
49067: PUSH
49068: FOR_IN
49069: IFFALSE 49102
// result := Replace ( result , result + 1 , j ) ;
49071: LD_ADDR_VAR 0 2
49075: PUSH
49076: LD_VAR 0 2
49080: PPUSH
49081: LD_VAR 0 2
49085: PUSH
49086: LD_INT 1
49088: PLUS
49089: PPUSH
49090: LD_VAR 0 7
49094: PPUSH
49095: CALL_OW 1
49099: ST_TO_ADDR
49100: GO 49068
49102: POP
49103: POP
// end ;
49104: GO 49034
49106: POP
49107: POP
// if not result then
49108: LD_VAR 0 2
49112: NOT
49113: IFFALSE 49117
// exit ;
49115: GO 49265
// mech := result [ 1 ] ;
49117: LD_ADDR_VAR 0 5
49121: PUSH
49122: LD_VAR 0 2
49126: PUSH
49127: LD_INT 1
49129: ARRAY
49130: ST_TO_ADDR
// if result > 1 then
49131: LD_VAR 0 2
49135: PUSH
49136: LD_INT 1
49138: GREATER
49139: IFFALSE 49251
// begin for i = 2 to result do
49141: LD_ADDR_VAR 0 3
49145: PUSH
49146: DOUBLE
49147: LD_INT 2
49149: DEC
49150: ST_TO_ADDR
49151: LD_VAR 0 2
49155: PUSH
49156: FOR_TO
49157: IFFALSE 49249
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49159: LD_ADDR_VAR 0 4
49163: PUSH
49164: LD_VAR 0 2
49168: PUSH
49169: LD_VAR 0 3
49173: ARRAY
49174: PPUSH
49175: LD_INT 3
49177: PPUSH
49178: CALL_OW 259
49182: PUSH
49183: LD_VAR 0 2
49187: PUSH
49188: LD_VAR 0 3
49192: ARRAY
49193: PPUSH
49194: CALL_OW 432
49198: MINUS
49199: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49200: LD_VAR 0 4
49204: PUSH
49205: LD_VAR 0 5
49209: PPUSH
49210: LD_INT 3
49212: PPUSH
49213: CALL_OW 259
49217: PUSH
49218: LD_VAR 0 5
49222: PPUSH
49223: CALL_OW 432
49227: MINUS
49228: GREATEREQUAL
49229: IFFALSE 49247
// mech := result [ i ] ;
49231: LD_ADDR_VAR 0 5
49235: PUSH
49236: LD_VAR 0 2
49240: PUSH
49241: LD_VAR 0 3
49245: ARRAY
49246: ST_TO_ADDR
// end ;
49247: GO 49156
49249: POP
49250: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49251: LD_VAR 0 1
49255: PPUSH
49256: LD_VAR 0 5
49260: PPUSH
49261: CALL_OW 135
// end ;
49265: LD_VAR 0 2
49269: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49270: LD_INT 0
49272: PPUSH
49273: PPUSH
49274: PPUSH
49275: PPUSH
49276: PPUSH
49277: PPUSH
49278: PPUSH
49279: PPUSH
49280: PPUSH
49281: PPUSH
49282: PPUSH
49283: PPUSH
49284: PPUSH
// result := [ ] ;
49285: LD_ADDR_VAR 0 7
49289: PUSH
49290: EMPTY
49291: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49292: LD_VAR 0 1
49296: PPUSH
49297: CALL_OW 266
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: IN
49312: NOT
49313: IFFALSE 49317
// exit ;
49315: GO 50951
// if name then
49317: LD_VAR 0 3
49321: IFFALSE 49337
// SetBName ( base_dep , name ) ;
49323: LD_VAR 0 1
49327: PPUSH
49328: LD_VAR 0 3
49332: PPUSH
49333: CALL_OW 500
// base := GetBase ( base_dep ) ;
49337: LD_ADDR_VAR 0 15
49341: PUSH
49342: LD_VAR 0 1
49346: PPUSH
49347: CALL_OW 274
49351: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49352: LD_ADDR_VAR 0 16
49356: PUSH
49357: LD_VAR 0 1
49361: PPUSH
49362: CALL_OW 255
49366: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49367: LD_ADDR_VAR 0 17
49371: PUSH
49372: LD_VAR 0 1
49376: PPUSH
49377: CALL_OW 248
49381: ST_TO_ADDR
// if sources then
49382: LD_VAR 0 5
49386: IFFALSE 49433
// for i = 1 to 3 do
49388: LD_ADDR_VAR 0 8
49392: PUSH
49393: DOUBLE
49394: LD_INT 1
49396: DEC
49397: ST_TO_ADDR
49398: LD_INT 3
49400: PUSH
49401: FOR_TO
49402: IFFALSE 49431
// AddResourceType ( base , i , sources [ i ] ) ;
49404: LD_VAR 0 15
49408: PPUSH
49409: LD_VAR 0 8
49413: PPUSH
49414: LD_VAR 0 5
49418: PUSH
49419: LD_VAR 0 8
49423: ARRAY
49424: PPUSH
49425: CALL_OW 276
49429: GO 49401
49431: POP
49432: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49433: LD_ADDR_VAR 0 18
49437: PUSH
49438: LD_VAR 0 15
49442: PPUSH
49443: LD_VAR 0 2
49447: PPUSH
49448: LD_INT 1
49450: PPUSH
49451: CALL 48694 0 3
49455: ST_TO_ADDR
// InitHc ;
49456: CALL_OW 19
// InitUc ;
49460: CALL_OW 18
// uc_side := side ;
49464: LD_ADDR_OWVAR 20
49468: PUSH
49469: LD_VAR 0 16
49473: ST_TO_ADDR
// uc_nation := nation ;
49474: LD_ADDR_OWVAR 21
49478: PUSH
49479: LD_VAR 0 17
49483: ST_TO_ADDR
// if buildings then
49484: LD_VAR 0 18
49488: IFFALSE 50810
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49490: LD_ADDR_VAR 0 19
49494: PUSH
49495: LD_VAR 0 18
49499: PPUSH
49500: LD_INT 2
49502: PUSH
49503: LD_INT 30
49505: PUSH
49506: LD_INT 29
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 30
49515: PUSH
49516: LD_INT 30
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: LIST
49527: PPUSH
49528: CALL_OW 72
49532: ST_TO_ADDR
// if tmp then
49533: LD_VAR 0 19
49537: IFFALSE 49585
// for i in tmp do
49539: LD_ADDR_VAR 0 8
49543: PUSH
49544: LD_VAR 0 19
49548: PUSH
49549: FOR_IN
49550: IFFALSE 49583
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49552: LD_VAR 0 8
49556: PPUSH
49557: CALL_OW 250
49561: PPUSH
49562: LD_VAR 0 8
49566: PPUSH
49567: CALL_OW 251
49571: PPUSH
49572: LD_VAR 0 16
49576: PPUSH
49577: CALL_OW 441
49581: GO 49549
49583: POP
49584: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49585: LD_VAR 0 18
49589: PPUSH
49590: LD_INT 2
49592: PUSH
49593: LD_INT 30
49595: PUSH
49596: LD_INT 32
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 30
49605: PUSH
49606: LD_INT 33
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: LIST
49617: PPUSH
49618: CALL_OW 72
49622: IFFALSE 49710
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49624: LD_ADDR_VAR 0 8
49628: PUSH
49629: LD_VAR 0 18
49633: PPUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 30
49639: PUSH
49640: LD_INT 32
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 30
49649: PUSH
49650: LD_INT 33
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: LIST
49661: PPUSH
49662: CALL_OW 72
49666: PUSH
49667: FOR_IN
49668: IFFALSE 49708
// begin if not GetBWeapon ( i ) then
49670: LD_VAR 0 8
49674: PPUSH
49675: CALL_OW 269
49679: NOT
49680: IFFALSE 49706
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49682: LD_VAR 0 8
49686: PPUSH
49687: LD_VAR 0 8
49691: PPUSH
49692: LD_VAR 0 2
49696: PPUSH
49697: CALL 50956 0 2
49701: PPUSH
49702: CALL_OW 431
// end ;
49706: GO 49667
49708: POP
49709: POP
// end ; for i = 1 to personel do
49710: LD_ADDR_VAR 0 8
49714: PUSH
49715: DOUBLE
49716: LD_INT 1
49718: DEC
49719: ST_TO_ADDR
49720: LD_VAR 0 6
49724: PUSH
49725: FOR_TO
49726: IFFALSE 50790
// begin if i > 4 then
49728: LD_VAR 0 8
49732: PUSH
49733: LD_INT 4
49735: GREATER
49736: IFFALSE 49740
// break ;
49738: GO 50790
// case i of 1 :
49740: LD_VAR 0 8
49744: PUSH
49745: LD_INT 1
49747: DOUBLE
49748: EQUAL
49749: IFTRUE 49753
49751: GO 49833
49753: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49754: LD_ADDR_VAR 0 12
49758: PUSH
49759: LD_VAR 0 18
49763: PPUSH
49764: LD_INT 22
49766: PUSH
49767: LD_VAR 0 16
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 58
49778: PUSH
49779: EMPTY
49780: LIST
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: LD_INT 30
49787: PUSH
49788: LD_INT 32
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 30
49797: PUSH
49798: LD_INT 4
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 30
49807: PUSH
49808: LD_INT 5
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: LIST
49825: PPUSH
49826: CALL_OW 72
49830: ST_TO_ADDR
49831: GO 50055
49833: LD_INT 2
49835: DOUBLE
49836: EQUAL
49837: IFTRUE 49841
49839: GO 49903
49841: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49842: LD_ADDR_VAR 0 12
49846: PUSH
49847: LD_VAR 0 18
49851: PPUSH
49852: LD_INT 22
49854: PUSH
49855: LD_VAR 0 16
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: LD_INT 30
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 30
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PPUSH
49896: CALL_OW 72
49900: ST_TO_ADDR
49901: GO 50055
49903: LD_INT 3
49905: DOUBLE
49906: EQUAL
49907: IFTRUE 49911
49909: GO 49973
49911: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49912: LD_ADDR_VAR 0 12
49916: PUSH
49917: LD_VAR 0 18
49921: PPUSH
49922: LD_INT 22
49924: PUSH
49925: LD_VAR 0 16
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: LD_INT 30
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 30
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: LIST
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PPUSH
49966: CALL_OW 72
49970: ST_TO_ADDR
49971: GO 50055
49973: LD_INT 4
49975: DOUBLE
49976: EQUAL
49977: IFTRUE 49981
49979: GO 50054
49981: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49982: LD_ADDR_VAR 0 12
49986: PUSH
49987: LD_VAR 0 18
49991: PPUSH
49992: LD_INT 22
49994: PUSH
49995: LD_VAR 0 16
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: LD_INT 30
50009: PUSH
50010: LD_INT 6
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 30
50019: PUSH
50020: LD_INT 7
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 30
50029: PUSH
50030: LD_INT 8
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PPUSH
50047: CALL_OW 72
50051: ST_TO_ADDR
50052: GO 50055
50054: POP
// if i = 1 then
50055: LD_VAR 0 8
50059: PUSH
50060: LD_INT 1
50062: EQUAL
50063: IFFALSE 50174
// begin tmp := [ ] ;
50065: LD_ADDR_VAR 0 19
50069: PUSH
50070: EMPTY
50071: ST_TO_ADDR
// for j in f do
50072: LD_ADDR_VAR 0 9
50076: PUSH
50077: LD_VAR 0 12
50081: PUSH
50082: FOR_IN
50083: IFFALSE 50156
// if GetBType ( j ) = b_bunker then
50085: LD_VAR 0 9
50089: PPUSH
50090: CALL_OW 266
50094: PUSH
50095: LD_INT 32
50097: EQUAL
50098: IFFALSE 50125
// tmp := Insert ( tmp , 1 , j ) else
50100: LD_ADDR_VAR 0 19
50104: PUSH
50105: LD_VAR 0 19
50109: PPUSH
50110: LD_INT 1
50112: PPUSH
50113: LD_VAR 0 9
50117: PPUSH
50118: CALL_OW 2
50122: ST_TO_ADDR
50123: GO 50154
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50125: LD_ADDR_VAR 0 19
50129: PUSH
50130: LD_VAR 0 19
50134: PPUSH
50135: LD_VAR 0 19
50139: PUSH
50140: LD_INT 1
50142: PLUS
50143: PPUSH
50144: LD_VAR 0 9
50148: PPUSH
50149: CALL_OW 2
50153: ST_TO_ADDR
50154: GO 50082
50156: POP
50157: POP
// if tmp then
50158: LD_VAR 0 19
50162: IFFALSE 50174
// f := tmp ;
50164: LD_ADDR_VAR 0 12
50168: PUSH
50169: LD_VAR 0 19
50173: ST_TO_ADDR
// end ; x := personel [ i ] ;
50174: LD_ADDR_VAR 0 13
50178: PUSH
50179: LD_VAR 0 6
50183: PUSH
50184: LD_VAR 0 8
50188: ARRAY
50189: ST_TO_ADDR
// if x = - 1 then
50190: LD_VAR 0 13
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: EQUAL
50199: IFFALSE 50408
// begin for j in f do
50201: LD_ADDR_VAR 0 9
50205: PUSH
50206: LD_VAR 0 12
50210: PUSH
50211: FOR_IN
50212: IFFALSE 50404
// repeat InitHc ;
50214: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50218: LD_VAR 0 9
50222: PPUSH
50223: CALL_OW 266
50227: PUSH
50228: LD_INT 5
50230: EQUAL
50231: IFFALSE 50301
// begin if UnitsInside ( j ) < 3 then
50233: LD_VAR 0 9
50237: PPUSH
50238: CALL_OW 313
50242: PUSH
50243: LD_INT 3
50245: LESS
50246: IFFALSE 50282
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50248: LD_INT 0
50250: PPUSH
50251: LD_INT 5
50253: PUSH
50254: LD_INT 8
50256: PUSH
50257: LD_INT 9
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: LIST
50264: PUSH
50265: LD_VAR 0 17
50269: ARRAY
50270: PPUSH
50271: LD_VAR 0 4
50275: PPUSH
50276: CALL_OW 380
50280: GO 50299
// PrepareHuman ( false , i , skill ) ;
50282: LD_INT 0
50284: PPUSH
50285: LD_VAR 0 8
50289: PPUSH
50290: LD_VAR 0 4
50294: PPUSH
50295: CALL_OW 380
// end else
50299: GO 50318
// PrepareHuman ( false , i , skill ) ;
50301: LD_INT 0
50303: PPUSH
50304: LD_VAR 0 8
50308: PPUSH
50309: LD_VAR 0 4
50313: PPUSH
50314: CALL_OW 380
// un := CreateHuman ;
50318: LD_ADDR_VAR 0 14
50322: PUSH
50323: CALL_OW 44
50327: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50328: LD_ADDR_VAR 0 7
50332: PUSH
50333: LD_VAR 0 7
50337: PPUSH
50338: LD_INT 1
50340: PPUSH
50341: LD_VAR 0 14
50345: PPUSH
50346: CALL_OW 2
50350: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50351: LD_VAR 0 14
50355: PPUSH
50356: LD_VAR 0 9
50360: PPUSH
50361: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50365: LD_VAR 0 9
50369: PPUSH
50370: CALL_OW 313
50374: PUSH
50375: LD_INT 6
50377: EQUAL
50378: PUSH
50379: LD_VAR 0 9
50383: PPUSH
50384: CALL_OW 266
50388: PUSH
50389: LD_INT 32
50391: PUSH
50392: LD_INT 31
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: IN
50399: OR
50400: IFFALSE 50214
50402: GO 50211
50404: POP
50405: POP
// end else
50406: GO 50788
// for j = 1 to x do
50408: LD_ADDR_VAR 0 9
50412: PUSH
50413: DOUBLE
50414: LD_INT 1
50416: DEC
50417: ST_TO_ADDR
50418: LD_VAR 0 13
50422: PUSH
50423: FOR_TO
50424: IFFALSE 50786
// begin InitHc ;
50426: CALL_OW 19
// if not f then
50430: LD_VAR 0 12
50434: NOT
50435: IFFALSE 50524
// begin PrepareHuman ( false , i , skill ) ;
50437: LD_INT 0
50439: PPUSH
50440: LD_VAR 0 8
50444: PPUSH
50445: LD_VAR 0 4
50449: PPUSH
50450: CALL_OW 380
// un := CreateHuman ;
50454: LD_ADDR_VAR 0 14
50458: PUSH
50459: CALL_OW 44
50463: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50464: LD_ADDR_VAR 0 7
50468: PUSH
50469: LD_VAR 0 7
50473: PPUSH
50474: LD_INT 1
50476: PPUSH
50477: LD_VAR 0 14
50481: PPUSH
50482: CALL_OW 2
50486: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50487: LD_VAR 0 14
50491: PPUSH
50492: LD_VAR 0 1
50496: PPUSH
50497: CALL_OW 250
50501: PPUSH
50502: LD_VAR 0 1
50506: PPUSH
50507: CALL_OW 251
50511: PPUSH
50512: LD_INT 10
50514: PPUSH
50515: LD_INT 0
50517: PPUSH
50518: CALL_OW 50
// continue ;
50522: GO 50423
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50524: LD_VAR 0 12
50528: PUSH
50529: LD_INT 1
50531: ARRAY
50532: PPUSH
50533: CALL_OW 313
50537: PUSH
50538: LD_VAR 0 12
50542: PUSH
50543: LD_INT 1
50545: ARRAY
50546: PPUSH
50547: CALL_OW 266
50551: PUSH
50552: LD_INT 32
50554: PUSH
50555: LD_INT 31
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: IN
50562: AND
50563: PUSH
50564: LD_VAR 0 12
50568: PUSH
50569: LD_INT 1
50571: ARRAY
50572: PPUSH
50573: CALL_OW 313
50577: PUSH
50578: LD_INT 6
50580: EQUAL
50581: OR
50582: IFFALSE 50602
// f := Delete ( f , 1 ) ;
50584: LD_ADDR_VAR 0 12
50588: PUSH
50589: LD_VAR 0 12
50593: PPUSH
50594: LD_INT 1
50596: PPUSH
50597: CALL_OW 3
50601: ST_TO_ADDR
// if not f then
50602: LD_VAR 0 12
50606: NOT
50607: IFFALSE 50625
// begin x := x + 2 ;
50609: LD_ADDR_VAR 0 13
50613: PUSH
50614: LD_VAR 0 13
50618: PUSH
50619: LD_INT 2
50621: PLUS
50622: ST_TO_ADDR
// continue ;
50623: GO 50423
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50625: LD_VAR 0 12
50629: PUSH
50630: LD_INT 1
50632: ARRAY
50633: PPUSH
50634: CALL_OW 266
50638: PUSH
50639: LD_INT 5
50641: EQUAL
50642: IFFALSE 50716
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50644: LD_VAR 0 12
50648: PUSH
50649: LD_INT 1
50651: ARRAY
50652: PPUSH
50653: CALL_OW 313
50657: PUSH
50658: LD_INT 3
50660: LESS
50661: IFFALSE 50697
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50663: LD_INT 0
50665: PPUSH
50666: LD_INT 5
50668: PUSH
50669: LD_INT 8
50671: PUSH
50672: LD_INT 9
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: LIST
50679: PUSH
50680: LD_VAR 0 17
50684: ARRAY
50685: PPUSH
50686: LD_VAR 0 4
50690: PPUSH
50691: CALL_OW 380
50695: GO 50714
// PrepareHuman ( false , i , skill ) ;
50697: LD_INT 0
50699: PPUSH
50700: LD_VAR 0 8
50704: PPUSH
50705: LD_VAR 0 4
50709: PPUSH
50710: CALL_OW 380
// end else
50714: GO 50733
// PrepareHuman ( false , i , skill ) ;
50716: LD_INT 0
50718: PPUSH
50719: LD_VAR 0 8
50723: PPUSH
50724: LD_VAR 0 4
50728: PPUSH
50729: CALL_OW 380
// un := CreateHuman ;
50733: LD_ADDR_VAR 0 14
50737: PUSH
50738: CALL_OW 44
50742: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50743: LD_ADDR_VAR 0 7
50747: PUSH
50748: LD_VAR 0 7
50752: PPUSH
50753: LD_INT 1
50755: PPUSH
50756: LD_VAR 0 14
50760: PPUSH
50761: CALL_OW 2
50765: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50766: LD_VAR 0 14
50770: PPUSH
50771: LD_VAR 0 12
50775: PUSH
50776: LD_INT 1
50778: ARRAY
50779: PPUSH
50780: CALL_OW 52
// end ;
50784: GO 50423
50786: POP
50787: POP
// end ;
50788: GO 49725
50790: POP
50791: POP
// result := result ^ buildings ;
50792: LD_ADDR_VAR 0 7
50796: PUSH
50797: LD_VAR 0 7
50801: PUSH
50802: LD_VAR 0 18
50806: ADD
50807: ST_TO_ADDR
// end else
50808: GO 50951
// begin for i = 1 to personel do
50810: LD_ADDR_VAR 0 8
50814: PUSH
50815: DOUBLE
50816: LD_INT 1
50818: DEC
50819: ST_TO_ADDR
50820: LD_VAR 0 6
50824: PUSH
50825: FOR_TO
50826: IFFALSE 50949
// begin if i > 4 then
50828: LD_VAR 0 8
50832: PUSH
50833: LD_INT 4
50835: GREATER
50836: IFFALSE 50840
// break ;
50838: GO 50949
// x := personel [ i ] ;
50840: LD_ADDR_VAR 0 13
50844: PUSH
50845: LD_VAR 0 6
50849: PUSH
50850: LD_VAR 0 8
50854: ARRAY
50855: ST_TO_ADDR
// if x = - 1 then
50856: LD_VAR 0 13
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: EQUAL
50865: IFFALSE 50869
// continue ;
50867: GO 50825
// PrepareHuman ( false , i , skill ) ;
50869: LD_INT 0
50871: PPUSH
50872: LD_VAR 0 8
50876: PPUSH
50877: LD_VAR 0 4
50881: PPUSH
50882: CALL_OW 380
// un := CreateHuman ;
50886: LD_ADDR_VAR 0 14
50890: PUSH
50891: CALL_OW 44
50895: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50896: LD_VAR 0 14
50900: PPUSH
50901: LD_VAR 0 1
50905: PPUSH
50906: CALL_OW 250
50910: PPUSH
50911: LD_VAR 0 1
50915: PPUSH
50916: CALL_OW 251
50920: PPUSH
50921: LD_INT 10
50923: PPUSH
50924: LD_INT 0
50926: PPUSH
50927: CALL_OW 50
// result := result ^ un ;
50931: LD_ADDR_VAR 0 7
50935: PUSH
50936: LD_VAR 0 7
50940: PUSH
50941: LD_VAR 0 14
50945: ADD
50946: ST_TO_ADDR
// end ;
50947: GO 50825
50949: POP
50950: POP
// end ; end ;
50951: LD_VAR 0 7
50955: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50956: LD_INT 0
50958: PPUSH
50959: PPUSH
50960: PPUSH
50961: PPUSH
50962: PPUSH
50963: PPUSH
50964: PPUSH
50965: PPUSH
50966: PPUSH
50967: PPUSH
50968: PPUSH
50969: PPUSH
50970: PPUSH
50971: PPUSH
50972: PPUSH
50973: PPUSH
// result := false ;
50974: LD_ADDR_VAR 0 3
50978: PUSH
50979: LD_INT 0
50981: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50982: LD_VAR 0 1
50986: NOT
50987: PUSH
50988: LD_VAR 0 1
50992: PPUSH
50993: CALL_OW 266
50997: PUSH
50998: LD_INT 32
51000: PUSH
51001: LD_INT 33
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: IN
51008: NOT
51009: OR
51010: IFFALSE 51014
// exit ;
51012: GO 52123
// nat := GetNation ( tower ) ;
51014: LD_ADDR_VAR 0 12
51018: PUSH
51019: LD_VAR 0 1
51023: PPUSH
51024: CALL_OW 248
51028: ST_TO_ADDR
// side := GetSide ( tower ) ;
51029: LD_ADDR_VAR 0 16
51033: PUSH
51034: LD_VAR 0 1
51038: PPUSH
51039: CALL_OW 255
51043: ST_TO_ADDR
// x := GetX ( tower ) ;
51044: LD_ADDR_VAR 0 10
51048: PUSH
51049: LD_VAR 0 1
51053: PPUSH
51054: CALL_OW 250
51058: ST_TO_ADDR
// y := GetY ( tower ) ;
51059: LD_ADDR_VAR 0 11
51063: PUSH
51064: LD_VAR 0 1
51068: PPUSH
51069: CALL_OW 251
51073: ST_TO_ADDR
// if not x or not y then
51074: LD_VAR 0 10
51078: NOT
51079: PUSH
51080: LD_VAR 0 11
51084: NOT
51085: OR
51086: IFFALSE 51090
// exit ;
51088: GO 52123
// weapon := 0 ;
51090: LD_ADDR_VAR 0 18
51094: PUSH
51095: LD_INT 0
51097: ST_TO_ADDR
// fac_list := [ ] ;
51098: LD_ADDR_VAR 0 17
51102: PUSH
51103: EMPTY
51104: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51105: LD_ADDR_VAR 0 6
51109: PUSH
51110: LD_VAR 0 1
51114: PPUSH
51115: CALL_OW 274
51119: PPUSH
51120: LD_VAR 0 2
51124: PPUSH
51125: LD_INT 0
51127: PPUSH
51128: CALL 48694 0 3
51132: PPUSH
51133: LD_INT 30
51135: PUSH
51136: LD_INT 3
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PPUSH
51143: CALL_OW 72
51147: ST_TO_ADDR
// if not factories then
51148: LD_VAR 0 6
51152: NOT
51153: IFFALSE 51157
// exit ;
51155: GO 52123
// for i in factories do
51157: LD_ADDR_VAR 0 8
51161: PUSH
51162: LD_VAR 0 6
51166: PUSH
51167: FOR_IN
51168: IFFALSE 51193
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51170: LD_ADDR_VAR 0 17
51174: PUSH
51175: LD_VAR 0 17
51179: PUSH
51180: LD_VAR 0 8
51184: PPUSH
51185: CALL_OW 478
51189: UNION
51190: ST_TO_ADDR
51191: GO 51167
51193: POP
51194: POP
// if not fac_list then
51195: LD_VAR 0 17
51199: NOT
51200: IFFALSE 51204
// exit ;
51202: GO 52123
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51204: LD_ADDR_VAR 0 5
51208: PUSH
51209: LD_INT 4
51211: PUSH
51212: LD_INT 5
51214: PUSH
51215: LD_INT 9
51217: PUSH
51218: LD_INT 10
51220: PUSH
51221: LD_INT 6
51223: PUSH
51224: LD_INT 7
51226: PUSH
51227: LD_INT 11
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 27
51241: PUSH
51242: LD_INT 28
51244: PUSH
51245: LD_INT 26
51247: PUSH
51248: LD_INT 30
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 43
51259: PUSH
51260: LD_INT 44
51262: PUSH
51263: LD_INT 46
51265: PUSH
51266: LD_INT 45
51268: PUSH
51269: LD_INT 47
51271: PUSH
51272: LD_INT 49
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: LIST
51287: PUSH
51288: LD_VAR 0 12
51292: ARRAY
51293: ST_TO_ADDR
// list := list isect fac_list ;
51294: LD_ADDR_VAR 0 5
51298: PUSH
51299: LD_VAR 0 5
51303: PUSH
51304: LD_VAR 0 17
51308: ISECT
51309: ST_TO_ADDR
// if not list then
51310: LD_VAR 0 5
51314: NOT
51315: IFFALSE 51319
// exit ;
51317: GO 52123
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51319: LD_VAR 0 12
51323: PUSH
51324: LD_INT 3
51326: EQUAL
51327: PUSH
51328: LD_INT 49
51330: PUSH
51331: LD_VAR 0 5
51335: IN
51336: AND
51337: PUSH
51338: LD_INT 31
51340: PPUSH
51341: LD_VAR 0 16
51345: PPUSH
51346: CALL_OW 321
51350: PUSH
51351: LD_INT 2
51353: EQUAL
51354: AND
51355: IFFALSE 51415
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51357: LD_INT 22
51359: PUSH
51360: LD_VAR 0 16
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 35
51371: PUSH
51372: LD_INT 49
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 91
51381: PUSH
51382: LD_VAR 0 1
51386: PUSH
51387: LD_INT 10
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: LIST
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: LIST
51399: PPUSH
51400: CALL_OW 69
51404: NOT
51405: IFFALSE 51415
// weapon := ru_time_lapser ;
51407: LD_ADDR_VAR 0 18
51411: PUSH
51412: LD_INT 49
51414: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51415: LD_VAR 0 12
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: IN
51430: PUSH
51431: LD_INT 11
51433: PUSH
51434: LD_VAR 0 5
51438: IN
51439: PUSH
51440: LD_INT 30
51442: PUSH
51443: LD_VAR 0 5
51447: IN
51448: OR
51449: AND
51450: PUSH
51451: LD_INT 6
51453: PPUSH
51454: LD_VAR 0 16
51458: PPUSH
51459: CALL_OW 321
51463: PUSH
51464: LD_INT 2
51466: EQUAL
51467: AND
51468: IFFALSE 51633
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51470: LD_INT 22
51472: PUSH
51473: LD_VAR 0 16
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 35
51487: PUSH
51488: LD_INT 11
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 35
51497: PUSH
51498: LD_INT 30
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 91
51512: PUSH
51513: LD_VAR 0 1
51517: PUSH
51518: LD_INT 18
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: LIST
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: LIST
51530: PPUSH
51531: CALL_OW 69
51535: NOT
51536: PUSH
51537: LD_INT 22
51539: PUSH
51540: LD_VAR 0 16
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: LD_INT 30
51554: PUSH
51555: LD_INT 32
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 30
51564: PUSH
51565: LD_INT 33
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 91
51579: PUSH
51580: LD_VAR 0 1
51584: PUSH
51585: LD_INT 12
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: LIST
51597: PUSH
51598: EMPTY
51599: LIST
51600: PPUSH
51601: CALL_OW 69
51605: PUSH
51606: LD_INT 2
51608: GREATER
51609: AND
51610: IFFALSE 51633
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51612: LD_ADDR_VAR 0 18
51616: PUSH
51617: LD_INT 11
51619: PUSH
51620: LD_INT 30
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_VAR 0 12
51631: ARRAY
51632: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51633: LD_VAR 0 18
51637: NOT
51638: PUSH
51639: LD_INT 40
51641: PPUSH
51642: LD_VAR 0 16
51646: PPUSH
51647: CALL_OW 321
51651: PUSH
51652: LD_INT 2
51654: EQUAL
51655: AND
51656: PUSH
51657: LD_INT 7
51659: PUSH
51660: LD_VAR 0 5
51664: IN
51665: PUSH
51666: LD_INT 28
51668: PUSH
51669: LD_VAR 0 5
51673: IN
51674: OR
51675: PUSH
51676: LD_INT 45
51678: PUSH
51679: LD_VAR 0 5
51683: IN
51684: OR
51685: AND
51686: IFFALSE 51940
// begin hex := GetHexInfo ( x , y ) ;
51688: LD_ADDR_VAR 0 4
51692: PUSH
51693: LD_VAR 0 10
51697: PPUSH
51698: LD_VAR 0 11
51702: PPUSH
51703: CALL_OW 546
51707: ST_TO_ADDR
// if hex [ 1 ] then
51708: LD_VAR 0 4
51712: PUSH
51713: LD_INT 1
51715: ARRAY
51716: IFFALSE 51720
// exit ;
51718: GO 52123
// height := hex [ 2 ] ;
51720: LD_ADDR_VAR 0 15
51724: PUSH
51725: LD_VAR 0 4
51729: PUSH
51730: LD_INT 2
51732: ARRAY
51733: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51734: LD_ADDR_VAR 0 14
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: LD_INT 5
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: ST_TO_ADDR
// for i in tmp do
51757: LD_ADDR_VAR 0 8
51761: PUSH
51762: LD_VAR 0 14
51766: PUSH
51767: FOR_IN
51768: IFFALSE 51938
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51770: LD_ADDR_VAR 0 9
51774: PUSH
51775: LD_VAR 0 10
51779: PPUSH
51780: LD_VAR 0 8
51784: PPUSH
51785: LD_INT 5
51787: PPUSH
51788: CALL_OW 272
51792: PUSH
51793: LD_VAR 0 11
51797: PPUSH
51798: LD_VAR 0 8
51802: PPUSH
51803: LD_INT 5
51805: PPUSH
51806: CALL_OW 273
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51815: LD_VAR 0 9
51819: PUSH
51820: LD_INT 1
51822: ARRAY
51823: PPUSH
51824: LD_VAR 0 9
51828: PUSH
51829: LD_INT 2
51831: ARRAY
51832: PPUSH
51833: CALL_OW 488
51837: IFFALSE 51936
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51839: LD_ADDR_VAR 0 4
51843: PUSH
51844: LD_VAR 0 9
51848: PUSH
51849: LD_INT 1
51851: ARRAY
51852: PPUSH
51853: LD_VAR 0 9
51857: PUSH
51858: LD_INT 2
51860: ARRAY
51861: PPUSH
51862: CALL_OW 546
51866: ST_TO_ADDR
// if hex [ 1 ] then
51867: LD_VAR 0 4
51871: PUSH
51872: LD_INT 1
51874: ARRAY
51875: IFFALSE 51879
// continue ;
51877: GO 51767
// h := hex [ 2 ] ;
51879: LD_ADDR_VAR 0 13
51883: PUSH
51884: LD_VAR 0 4
51888: PUSH
51889: LD_INT 2
51891: ARRAY
51892: ST_TO_ADDR
// if h + 7 < height then
51893: LD_VAR 0 13
51897: PUSH
51898: LD_INT 7
51900: PLUS
51901: PUSH
51902: LD_VAR 0 15
51906: LESS
51907: IFFALSE 51936
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51909: LD_ADDR_VAR 0 18
51913: PUSH
51914: LD_INT 7
51916: PUSH
51917: LD_INT 28
51919: PUSH
51920: LD_INT 45
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: PUSH
51928: LD_VAR 0 12
51932: ARRAY
51933: ST_TO_ADDR
// break ;
51934: GO 51938
// end ; end ; end ;
51936: GO 51767
51938: POP
51939: POP
// end ; if not weapon then
51940: LD_VAR 0 18
51944: NOT
51945: IFFALSE 52005
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51947: LD_ADDR_VAR 0 5
51951: PUSH
51952: LD_VAR 0 5
51956: PUSH
51957: LD_INT 11
51959: PUSH
51960: LD_INT 30
51962: PUSH
51963: LD_INT 49
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: DIFF
51971: ST_TO_ADDR
// if not list then
51972: LD_VAR 0 5
51976: NOT
51977: IFFALSE 51981
// exit ;
51979: GO 52123
// weapon := list [ rand ( 1 , list ) ] ;
51981: LD_ADDR_VAR 0 18
51985: PUSH
51986: LD_VAR 0 5
51990: PUSH
51991: LD_INT 1
51993: PPUSH
51994: LD_VAR 0 5
51998: PPUSH
51999: CALL_OW 12
52003: ARRAY
52004: ST_TO_ADDR
// end ; if weapon then
52005: LD_VAR 0 18
52009: IFFALSE 52123
// begin tmp := CostOfWeapon ( weapon ) ;
52011: LD_ADDR_VAR 0 14
52015: PUSH
52016: LD_VAR 0 18
52020: PPUSH
52021: CALL_OW 451
52025: ST_TO_ADDR
// j := GetBase ( tower ) ;
52026: LD_ADDR_VAR 0 9
52030: PUSH
52031: LD_VAR 0 1
52035: PPUSH
52036: CALL_OW 274
52040: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52041: LD_VAR 0 9
52045: PPUSH
52046: LD_INT 1
52048: PPUSH
52049: CALL_OW 275
52053: PUSH
52054: LD_VAR 0 14
52058: PUSH
52059: LD_INT 1
52061: ARRAY
52062: GREATEREQUAL
52063: PUSH
52064: LD_VAR 0 9
52068: PPUSH
52069: LD_INT 2
52071: PPUSH
52072: CALL_OW 275
52076: PUSH
52077: LD_VAR 0 14
52081: PUSH
52082: LD_INT 2
52084: ARRAY
52085: GREATEREQUAL
52086: AND
52087: PUSH
52088: LD_VAR 0 9
52092: PPUSH
52093: LD_INT 3
52095: PPUSH
52096: CALL_OW 275
52100: PUSH
52101: LD_VAR 0 14
52105: PUSH
52106: LD_INT 3
52108: ARRAY
52109: GREATEREQUAL
52110: AND
52111: IFFALSE 52123
// result := weapon ;
52113: LD_ADDR_VAR 0 3
52117: PUSH
52118: LD_VAR 0 18
52122: ST_TO_ADDR
// end ; end ;
52123: LD_VAR 0 3
52127: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52128: LD_INT 0
52130: PPUSH
52131: PPUSH
// result := true ;
52132: LD_ADDR_VAR 0 3
52136: PUSH
52137: LD_INT 1
52139: ST_TO_ADDR
// if array1 = array2 then
52140: LD_VAR 0 1
52144: PUSH
52145: LD_VAR 0 2
52149: EQUAL
52150: IFFALSE 52210
// begin for i = 1 to array1 do
52152: LD_ADDR_VAR 0 4
52156: PUSH
52157: DOUBLE
52158: LD_INT 1
52160: DEC
52161: ST_TO_ADDR
52162: LD_VAR 0 1
52166: PUSH
52167: FOR_TO
52168: IFFALSE 52206
// if array1 [ i ] <> array2 [ i ] then
52170: LD_VAR 0 1
52174: PUSH
52175: LD_VAR 0 4
52179: ARRAY
52180: PUSH
52181: LD_VAR 0 2
52185: PUSH
52186: LD_VAR 0 4
52190: ARRAY
52191: NONEQUAL
52192: IFFALSE 52204
// begin result := false ;
52194: LD_ADDR_VAR 0 3
52198: PUSH
52199: LD_INT 0
52201: ST_TO_ADDR
// break ;
52202: GO 52206
// end ;
52204: GO 52167
52206: POP
52207: POP
// end else
52208: GO 52218
// result := false ;
52210: LD_ADDR_VAR 0 3
52214: PUSH
52215: LD_INT 0
52217: ST_TO_ADDR
// end ;
52218: LD_VAR 0 3
52222: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52223: LD_INT 0
52225: PPUSH
52226: PPUSH
// if not array1 or not array2 then
52227: LD_VAR 0 1
52231: NOT
52232: PUSH
52233: LD_VAR 0 2
52237: NOT
52238: OR
52239: IFFALSE 52243
// exit ;
52241: GO 52307
// result := true ;
52243: LD_ADDR_VAR 0 3
52247: PUSH
52248: LD_INT 1
52250: ST_TO_ADDR
// for i = 1 to array1 do
52251: LD_ADDR_VAR 0 4
52255: PUSH
52256: DOUBLE
52257: LD_INT 1
52259: DEC
52260: ST_TO_ADDR
52261: LD_VAR 0 1
52265: PUSH
52266: FOR_TO
52267: IFFALSE 52305
// if array1 [ i ] <> array2 [ i ] then
52269: LD_VAR 0 1
52273: PUSH
52274: LD_VAR 0 4
52278: ARRAY
52279: PUSH
52280: LD_VAR 0 2
52284: PUSH
52285: LD_VAR 0 4
52289: ARRAY
52290: NONEQUAL
52291: IFFALSE 52303
// begin result := false ;
52293: LD_ADDR_VAR 0 3
52297: PUSH
52298: LD_INT 0
52300: ST_TO_ADDR
// break ;
52301: GO 52305
// end ;
52303: GO 52266
52305: POP
52306: POP
// end ;
52307: LD_VAR 0 3
52311: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52312: LD_INT 0
52314: PPUSH
52315: PPUSH
52316: PPUSH
// pom := GetBase ( fac ) ;
52317: LD_ADDR_VAR 0 5
52321: PUSH
52322: LD_VAR 0 1
52326: PPUSH
52327: CALL_OW 274
52331: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52332: LD_ADDR_VAR 0 4
52336: PUSH
52337: LD_VAR 0 2
52341: PUSH
52342: LD_INT 1
52344: ARRAY
52345: PPUSH
52346: LD_VAR 0 2
52350: PUSH
52351: LD_INT 2
52353: ARRAY
52354: PPUSH
52355: LD_VAR 0 2
52359: PUSH
52360: LD_INT 3
52362: ARRAY
52363: PPUSH
52364: LD_VAR 0 2
52368: PUSH
52369: LD_INT 4
52371: ARRAY
52372: PPUSH
52373: CALL_OW 449
52377: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52378: LD_ADDR_VAR 0 3
52382: PUSH
52383: LD_VAR 0 5
52387: PPUSH
52388: LD_INT 1
52390: PPUSH
52391: CALL_OW 275
52395: PUSH
52396: LD_VAR 0 4
52400: PUSH
52401: LD_INT 1
52403: ARRAY
52404: GREATEREQUAL
52405: PUSH
52406: LD_VAR 0 5
52410: PPUSH
52411: LD_INT 2
52413: PPUSH
52414: CALL_OW 275
52418: PUSH
52419: LD_VAR 0 4
52423: PUSH
52424: LD_INT 2
52426: ARRAY
52427: GREATEREQUAL
52428: AND
52429: PUSH
52430: LD_VAR 0 5
52434: PPUSH
52435: LD_INT 3
52437: PPUSH
52438: CALL_OW 275
52442: PUSH
52443: LD_VAR 0 4
52447: PUSH
52448: LD_INT 3
52450: ARRAY
52451: GREATEREQUAL
52452: AND
52453: ST_TO_ADDR
// end ;
52454: LD_VAR 0 3
52458: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52459: LD_INT 0
52461: PPUSH
52462: PPUSH
52463: PPUSH
52464: PPUSH
// pom := GetBase ( building ) ;
52465: LD_ADDR_VAR 0 3
52469: PUSH
52470: LD_VAR 0 1
52474: PPUSH
52475: CALL_OW 274
52479: ST_TO_ADDR
// if not pom then
52480: LD_VAR 0 3
52484: NOT
52485: IFFALSE 52489
// exit ;
52487: GO 52659
// btype := GetBType ( building ) ;
52489: LD_ADDR_VAR 0 5
52493: PUSH
52494: LD_VAR 0 1
52498: PPUSH
52499: CALL_OW 266
52503: ST_TO_ADDR
// if btype = b_armoury then
52504: LD_VAR 0 5
52508: PUSH
52509: LD_INT 4
52511: EQUAL
52512: IFFALSE 52522
// btype := b_barracks ;
52514: LD_ADDR_VAR 0 5
52518: PUSH
52519: LD_INT 5
52521: ST_TO_ADDR
// if btype = b_depot then
52522: LD_VAR 0 5
52526: PUSH
52527: LD_INT 0
52529: EQUAL
52530: IFFALSE 52540
// btype := b_warehouse ;
52532: LD_ADDR_VAR 0 5
52536: PUSH
52537: LD_INT 1
52539: ST_TO_ADDR
// if btype = b_workshop then
52540: LD_VAR 0 5
52544: PUSH
52545: LD_INT 2
52547: EQUAL
52548: IFFALSE 52558
// btype := b_factory ;
52550: LD_ADDR_VAR 0 5
52554: PUSH
52555: LD_INT 3
52557: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52558: LD_ADDR_VAR 0 4
52562: PUSH
52563: LD_VAR 0 5
52567: PPUSH
52568: LD_VAR 0 1
52572: PPUSH
52573: CALL_OW 248
52577: PPUSH
52578: CALL_OW 450
52582: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52583: LD_ADDR_VAR 0 2
52587: PUSH
52588: LD_VAR 0 3
52592: PPUSH
52593: LD_INT 1
52595: PPUSH
52596: CALL_OW 275
52600: PUSH
52601: LD_VAR 0 4
52605: PUSH
52606: LD_INT 1
52608: ARRAY
52609: GREATEREQUAL
52610: PUSH
52611: LD_VAR 0 3
52615: PPUSH
52616: LD_INT 2
52618: PPUSH
52619: CALL_OW 275
52623: PUSH
52624: LD_VAR 0 4
52628: PUSH
52629: LD_INT 2
52631: ARRAY
52632: GREATEREQUAL
52633: AND
52634: PUSH
52635: LD_VAR 0 3
52639: PPUSH
52640: LD_INT 3
52642: PPUSH
52643: CALL_OW 275
52647: PUSH
52648: LD_VAR 0 4
52652: PUSH
52653: LD_INT 3
52655: ARRAY
52656: GREATEREQUAL
52657: AND
52658: ST_TO_ADDR
// end ;
52659: LD_VAR 0 2
52663: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52664: LD_INT 0
52666: PPUSH
52667: PPUSH
52668: PPUSH
// pom := GetBase ( building ) ;
52669: LD_ADDR_VAR 0 4
52673: PUSH
52674: LD_VAR 0 1
52678: PPUSH
52679: CALL_OW 274
52683: ST_TO_ADDR
// if not pom then
52684: LD_VAR 0 4
52688: NOT
52689: IFFALSE 52693
// exit ;
52691: GO 52794
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52693: LD_ADDR_VAR 0 5
52697: PUSH
52698: LD_VAR 0 2
52702: PPUSH
52703: LD_VAR 0 1
52707: PPUSH
52708: CALL_OW 248
52712: PPUSH
52713: CALL_OW 450
52717: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52718: LD_ADDR_VAR 0 3
52722: PUSH
52723: LD_VAR 0 4
52727: PPUSH
52728: LD_INT 1
52730: PPUSH
52731: CALL_OW 275
52735: PUSH
52736: LD_VAR 0 5
52740: PUSH
52741: LD_INT 1
52743: ARRAY
52744: GREATEREQUAL
52745: PUSH
52746: LD_VAR 0 4
52750: PPUSH
52751: LD_INT 2
52753: PPUSH
52754: CALL_OW 275
52758: PUSH
52759: LD_VAR 0 5
52763: PUSH
52764: LD_INT 2
52766: ARRAY
52767: GREATEREQUAL
52768: AND
52769: PUSH
52770: LD_VAR 0 4
52774: PPUSH
52775: LD_INT 3
52777: PPUSH
52778: CALL_OW 275
52782: PUSH
52783: LD_VAR 0 5
52787: PUSH
52788: LD_INT 3
52790: ARRAY
52791: GREATEREQUAL
52792: AND
52793: ST_TO_ADDR
// end ;
52794: LD_VAR 0 3
52798: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52799: LD_INT 0
52801: PPUSH
52802: PPUSH
52803: PPUSH
52804: PPUSH
52805: PPUSH
52806: PPUSH
52807: PPUSH
52808: PPUSH
52809: PPUSH
52810: PPUSH
52811: PPUSH
// result := false ;
52812: LD_ADDR_VAR 0 8
52816: PUSH
52817: LD_INT 0
52819: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52820: LD_VAR 0 5
52824: NOT
52825: PUSH
52826: LD_VAR 0 1
52830: NOT
52831: OR
52832: PUSH
52833: LD_VAR 0 2
52837: NOT
52838: OR
52839: PUSH
52840: LD_VAR 0 3
52844: NOT
52845: OR
52846: IFFALSE 52850
// exit ;
52848: GO 53664
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52850: LD_ADDR_VAR 0 14
52854: PUSH
52855: LD_VAR 0 1
52859: PPUSH
52860: LD_VAR 0 2
52864: PPUSH
52865: LD_VAR 0 3
52869: PPUSH
52870: LD_VAR 0 4
52874: PPUSH
52875: LD_VAR 0 5
52879: PUSH
52880: LD_INT 1
52882: ARRAY
52883: PPUSH
52884: CALL_OW 248
52888: PPUSH
52889: LD_INT 0
52891: PPUSH
52892: CALL 54917 0 6
52896: ST_TO_ADDR
// if not hexes then
52897: LD_VAR 0 14
52901: NOT
52902: IFFALSE 52906
// exit ;
52904: GO 53664
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52906: LD_ADDR_VAR 0 17
52910: PUSH
52911: LD_VAR 0 5
52915: PPUSH
52916: LD_INT 22
52918: PUSH
52919: LD_VAR 0 13
52923: PPUSH
52924: CALL_OW 255
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 30
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 30
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PPUSH
52965: CALL_OW 72
52969: ST_TO_ADDR
// for i = 1 to hexes do
52970: LD_ADDR_VAR 0 9
52974: PUSH
52975: DOUBLE
52976: LD_INT 1
52978: DEC
52979: ST_TO_ADDR
52980: LD_VAR 0 14
52984: PUSH
52985: FOR_TO
52986: IFFALSE 53662
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52988: LD_ADDR_VAR 0 13
52992: PUSH
52993: LD_VAR 0 14
52997: PUSH
52998: LD_VAR 0 9
53002: ARRAY
53003: PUSH
53004: LD_INT 1
53006: ARRAY
53007: PPUSH
53008: LD_VAR 0 14
53012: PUSH
53013: LD_VAR 0 9
53017: ARRAY
53018: PUSH
53019: LD_INT 2
53021: ARRAY
53022: PPUSH
53023: CALL_OW 428
53027: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53028: LD_VAR 0 14
53032: PUSH
53033: LD_VAR 0 9
53037: ARRAY
53038: PUSH
53039: LD_INT 1
53041: ARRAY
53042: PPUSH
53043: LD_VAR 0 14
53047: PUSH
53048: LD_VAR 0 9
53052: ARRAY
53053: PUSH
53054: LD_INT 2
53056: ARRAY
53057: PPUSH
53058: CALL_OW 351
53062: PUSH
53063: LD_VAR 0 14
53067: PUSH
53068: LD_VAR 0 9
53072: ARRAY
53073: PUSH
53074: LD_INT 1
53076: ARRAY
53077: PPUSH
53078: LD_VAR 0 14
53082: PUSH
53083: LD_VAR 0 9
53087: ARRAY
53088: PUSH
53089: LD_INT 2
53091: ARRAY
53092: PPUSH
53093: CALL_OW 488
53097: NOT
53098: OR
53099: PUSH
53100: LD_VAR 0 13
53104: PPUSH
53105: CALL_OW 247
53109: PUSH
53110: LD_INT 3
53112: EQUAL
53113: OR
53114: IFFALSE 53120
// exit ;
53116: POP
53117: POP
53118: GO 53664
// if not tmp then
53120: LD_VAR 0 13
53124: NOT
53125: IFFALSE 53129
// continue ;
53127: GO 52985
// result := true ;
53129: LD_ADDR_VAR 0 8
53133: PUSH
53134: LD_INT 1
53136: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53137: LD_VAR 0 6
53141: PUSH
53142: LD_VAR 0 13
53146: PPUSH
53147: CALL_OW 247
53151: PUSH
53152: LD_INT 2
53154: EQUAL
53155: AND
53156: PUSH
53157: LD_VAR 0 13
53161: PPUSH
53162: CALL_OW 263
53166: PUSH
53167: LD_INT 1
53169: EQUAL
53170: AND
53171: IFFALSE 53335
// begin if IsDrivenBy ( tmp ) then
53173: LD_VAR 0 13
53177: PPUSH
53178: CALL_OW 311
53182: IFFALSE 53186
// continue ;
53184: GO 52985
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53186: LD_VAR 0 6
53190: PPUSH
53191: LD_INT 3
53193: PUSH
53194: LD_INT 60
53196: PUSH
53197: EMPTY
53198: LIST
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 3
53206: PUSH
53207: LD_INT 55
53209: PUSH
53210: EMPTY
53211: LIST
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PPUSH
53221: CALL_OW 72
53225: IFFALSE 53333
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53227: LD_ADDR_VAR 0 18
53231: PUSH
53232: LD_VAR 0 6
53236: PPUSH
53237: LD_INT 3
53239: PUSH
53240: LD_INT 60
53242: PUSH
53243: EMPTY
53244: LIST
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 3
53252: PUSH
53253: LD_INT 55
53255: PUSH
53256: EMPTY
53257: LIST
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PPUSH
53267: CALL_OW 72
53271: PUSH
53272: LD_INT 1
53274: ARRAY
53275: ST_TO_ADDR
// if IsInUnit ( driver ) then
53276: LD_VAR 0 18
53280: PPUSH
53281: CALL_OW 310
53285: IFFALSE 53296
// ComExit ( driver ) ;
53287: LD_VAR 0 18
53291: PPUSH
53292: CALL 78709 0 1
// AddComEnterUnit ( driver , tmp ) ;
53296: LD_VAR 0 18
53300: PPUSH
53301: LD_VAR 0 13
53305: PPUSH
53306: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53310: LD_VAR 0 18
53314: PPUSH
53315: LD_VAR 0 7
53319: PPUSH
53320: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53324: LD_VAR 0 18
53328: PPUSH
53329: CALL_OW 181
// end ; continue ;
53333: GO 52985
// end ; if not cleaners or not tmp in cleaners then
53335: LD_VAR 0 6
53339: NOT
53340: PUSH
53341: LD_VAR 0 13
53345: PUSH
53346: LD_VAR 0 6
53350: IN
53351: NOT
53352: OR
53353: IFFALSE 53660
// begin if dep then
53355: LD_VAR 0 17
53359: IFFALSE 53495
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53361: LD_ADDR_VAR 0 16
53365: PUSH
53366: LD_VAR 0 17
53370: PUSH
53371: LD_INT 1
53373: ARRAY
53374: PPUSH
53375: CALL_OW 250
53379: PPUSH
53380: LD_VAR 0 17
53384: PUSH
53385: LD_INT 1
53387: ARRAY
53388: PPUSH
53389: CALL_OW 254
53393: PPUSH
53394: LD_INT 5
53396: PPUSH
53397: CALL_OW 272
53401: PUSH
53402: LD_VAR 0 17
53406: PUSH
53407: LD_INT 1
53409: ARRAY
53410: PPUSH
53411: CALL_OW 251
53415: PPUSH
53416: LD_VAR 0 17
53420: PUSH
53421: LD_INT 1
53423: ARRAY
53424: PPUSH
53425: CALL_OW 254
53429: PPUSH
53430: LD_INT 5
53432: PPUSH
53433: CALL_OW 273
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53442: LD_VAR 0 16
53446: PUSH
53447: LD_INT 1
53449: ARRAY
53450: PPUSH
53451: LD_VAR 0 16
53455: PUSH
53456: LD_INT 2
53458: ARRAY
53459: PPUSH
53460: CALL_OW 488
53464: IFFALSE 53495
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53466: LD_VAR 0 13
53470: PPUSH
53471: LD_VAR 0 16
53475: PUSH
53476: LD_INT 1
53478: ARRAY
53479: PPUSH
53480: LD_VAR 0 16
53484: PUSH
53485: LD_INT 2
53487: ARRAY
53488: PPUSH
53489: CALL_OW 111
// continue ;
53493: GO 52985
// end ; end ; r := GetDir ( tmp ) ;
53495: LD_ADDR_VAR 0 15
53499: PUSH
53500: LD_VAR 0 13
53504: PPUSH
53505: CALL_OW 254
53509: ST_TO_ADDR
// if r = 5 then
53510: LD_VAR 0 15
53514: PUSH
53515: LD_INT 5
53517: EQUAL
53518: IFFALSE 53528
// r := 0 ;
53520: LD_ADDR_VAR 0 15
53524: PUSH
53525: LD_INT 0
53527: ST_TO_ADDR
// for j = r to 5 do
53528: LD_ADDR_VAR 0 10
53532: PUSH
53533: DOUBLE
53534: LD_VAR 0 15
53538: DEC
53539: ST_TO_ADDR
53540: LD_INT 5
53542: PUSH
53543: FOR_TO
53544: IFFALSE 53658
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53546: LD_ADDR_VAR 0 11
53550: PUSH
53551: LD_VAR 0 13
53555: PPUSH
53556: CALL_OW 250
53560: PPUSH
53561: LD_VAR 0 10
53565: PPUSH
53566: LD_INT 2
53568: PPUSH
53569: CALL_OW 272
53573: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53574: LD_ADDR_VAR 0 12
53578: PUSH
53579: LD_VAR 0 13
53583: PPUSH
53584: CALL_OW 251
53588: PPUSH
53589: LD_VAR 0 10
53593: PPUSH
53594: LD_INT 2
53596: PPUSH
53597: CALL_OW 273
53601: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53602: LD_VAR 0 11
53606: PPUSH
53607: LD_VAR 0 12
53611: PPUSH
53612: CALL_OW 488
53616: PUSH
53617: LD_VAR 0 11
53621: PPUSH
53622: LD_VAR 0 12
53626: PPUSH
53627: CALL_OW 428
53631: NOT
53632: AND
53633: IFFALSE 53656
// begin ComMoveXY ( tmp , _x , _y ) ;
53635: LD_VAR 0 13
53639: PPUSH
53640: LD_VAR 0 11
53644: PPUSH
53645: LD_VAR 0 12
53649: PPUSH
53650: CALL_OW 111
// break ;
53654: GO 53658
// end ; end ;
53656: GO 53543
53658: POP
53659: POP
// end ; end ;
53660: GO 52985
53662: POP
53663: POP
// end ;
53664: LD_VAR 0 8
53668: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53669: LD_INT 0
53671: PPUSH
// result := true ;
53672: LD_ADDR_VAR 0 3
53676: PUSH
53677: LD_INT 1
53679: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53680: LD_VAR 0 2
53684: PUSH
53685: LD_INT 24
53687: DOUBLE
53688: EQUAL
53689: IFTRUE 53699
53691: LD_INT 33
53693: DOUBLE
53694: EQUAL
53695: IFTRUE 53699
53697: GO 53724
53699: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53700: LD_ADDR_VAR 0 3
53704: PUSH
53705: LD_INT 32
53707: PPUSH
53708: LD_VAR 0 1
53712: PPUSH
53713: CALL_OW 321
53717: PUSH
53718: LD_INT 2
53720: EQUAL
53721: ST_TO_ADDR
53722: GO 54040
53724: LD_INT 20
53726: DOUBLE
53727: EQUAL
53728: IFTRUE 53732
53730: GO 53757
53732: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53733: LD_ADDR_VAR 0 3
53737: PUSH
53738: LD_INT 6
53740: PPUSH
53741: LD_VAR 0 1
53745: PPUSH
53746: CALL_OW 321
53750: PUSH
53751: LD_INT 2
53753: EQUAL
53754: ST_TO_ADDR
53755: GO 54040
53757: LD_INT 22
53759: DOUBLE
53760: EQUAL
53761: IFTRUE 53771
53763: LD_INT 36
53765: DOUBLE
53766: EQUAL
53767: IFTRUE 53771
53769: GO 53796
53771: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53772: LD_ADDR_VAR 0 3
53776: PUSH
53777: LD_INT 15
53779: PPUSH
53780: LD_VAR 0 1
53784: PPUSH
53785: CALL_OW 321
53789: PUSH
53790: LD_INT 2
53792: EQUAL
53793: ST_TO_ADDR
53794: GO 54040
53796: LD_INT 30
53798: DOUBLE
53799: EQUAL
53800: IFTRUE 53804
53802: GO 53829
53804: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53805: LD_ADDR_VAR 0 3
53809: PUSH
53810: LD_INT 20
53812: PPUSH
53813: LD_VAR 0 1
53817: PPUSH
53818: CALL_OW 321
53822: PUSH
53823: LD_INT 2
53825: EQUAL
53826: ST_TO_ADDR
53827: GO 54040
53829: LD_INT 28
53831: DOUBLE
53832: EQUAL
53833: IFTRUE 53843
53835: LD_INT 21
53837: DOUBLE
53838: EQUAL
53839: IFTRUE 53843
53841: GO 53868
53843: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53844: LD_ADDR_VAR 0 3
53848: PUSH
53849: LD_INT 21
53851: PPUSH
53852: LD_VAR 0 1
53856: PPUSH
53857: CALL_OW 321
53861: PUSH
53862: LD_INT 2
53864: EQUAL
53865: ST_TO_ADDR
53866: GO 54040
53868: LD_INT 16
53870: DOUBLE
53871: EQUAL
53872: IFTRUE 53876
53874: GO 53901
53876: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53877: LD_ADDR_VAR 0 3
53881: PUSH
53882: LD_INT 84
53884: PPUSH
53885: LD_VAR 0 1
53889: PPUSH
53890: CALL_OW 321
53894: PUSH
53895: LD_INT 2
53897: EQUAL
53898: ST_TO_ADDR
53899: GO 54040
53901: LD_INT 19
53903: DOUBLE
53904: EQUAL
53905: IFTRUE 53915
53907: LD_INT 23
53909: DOUBLE
53910: EQUAL
53911: IFTRUE 53915
53913: GO 53940
53915: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53916: LD_ADDR_VAR 0 3
53920: PUSH
53921: LD_INT 83
53923: PPUSH
53924: LD_VAR 0 1
53928: PPUSH
53929: CALL_OW 321
53933: PUSH
53934: LD_INT 2
53936: EQUAL
53937: ST_TO_ADDR
53938: GO 54040
53940: LD_INT 17
53942: DOUBLE
53943: EQUAL
53944: IFTRUE 53948
53946: GO 53973
53948: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53949: LD_ADDR_VAR 0 3
53953: PUSH
53954: LD_INT 39
53956: PPUSH
53957: LD_VAR 0 1
53961: PPUSH
53962: CALL_OW 321
53966: PUSH
53967: LD_INT 2
53969: EQUAL
53970: ST_TO_ADDR
53971: GO 54040
53973: LD_INT 18
53975: DOUBLE
53976: EQUAL
53977: IFTRUE 53981
53979: GO 54006
53981: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53982: LD_ADDR_VAR 0 3
53986: PUSH
53987: LD_INT 40
53989: PPUSH
53990: LD_VAR 0 1
53994: PPUSH
53995: CALL_OW 321
53999: PUSH
54000: LD_INT 2
54002: EQUAL
54003: ST_TO_ADDR
54004: GO 54040
54006: LD_INT 27
54008: DOUBLE
54009: EQUAL
54010: IFTRUE 54014
54012: GO 54039
54014: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54015: LD_ADDR_VAR 0 3
54019: PUSH
54020: LD_INT 35
54022: PPUSH
54023: LD_VAR 0 1
54027: PPUSH
54028: CALL_OW 321
54032: PUSH
54033: LD_INT 2
54035: EQUAL
54036: ST_TO_ADDR
54037: GO 54040
54039: POP
// end ;
54040: LD_VAR 0 3
54044: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54045: LD_INT 0
54047: PPUSH
54048: PPUSH
54049: PPUSH
54050: PPUSH
54051: PPUSH
54052: PPUSH
54053: PPUSH
54054: PPUSH
54055: PPUSH
54056: PPUSH
54057: PPUSH
// result := false ;
54058: LD_ADDR_VAR 0 6
54062: PUSH
54063: LD_INT 0
54065: ST_TO_ADDR
// if btype = b_depot then
54066: LD_VAR 0 2
54070: PUSH
54071: LD_INT 0
54073: EQUAL
54074: IFFALSE 54086
// begin result := true ;
54076: LD_ADDR_VAR 0 6
54080: PUSH
54081: LD_INT 1
54083: ST_TO_ADDR
// exit ;
54084: GO 54912
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54086: LD_VAR 0 1
54090: NOT
54091: PUSH
54092: LD_VAR 0 1
54096: PPUSH
54097: CALL_OW 266
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: IN
54112: NOT
54113: OR
54114: PUSH
54115: LD_VAR 0 2
54119: NOT
54120: OR
54121: PUSH
54122: LD_VAR 0 5
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: LD_INT 3
54138: PUSH
54139: LD_INT 4
54141: PUSH
54142: LD_INT 5
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: IN
54153: NOT
54154: OR
54155: PUSH
54156: LD_VAR 0 3
54160: PPUSH
54161: LD_VAR 0 4
54165: PPUSH
54166: CALL_OW 488
54170: NOT
54171: OR
54172: IFFALSE 54176
// exit ;
54174: GO 54912
// side := GetSide ( depot ) ;
54176: LD_ADDR_VAR 0 9
54180: PUSH
54181: LD_VAR 0 1
54185: PPUSH
54186: CALL_OW 255
54190: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54191: LD_VAR 0 9
54195: PPUSH
54196: LD_VAR 0 2
54200: PPUSH
54201: CALL 53669 0 2
54205: NOT
54206: IFFALSE 54210
// exit ;
54208: GO 54912
// pom := GetBase ( depot ) ;
54210: LD_ADDR_VAR 0 10
54214: PUSH
54215: LD_VAR 0 1
54219: PPUSH
54220: CALL_OW 274
54224: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54225: LD_ADDR_VAR 0 11
54229: PUSH
54230: LD_VAR 0 2
54234: PPUSH
54235: LD_VAR 0 1
54239: PPUSH
54240: CALL_OW 248
54244: PPUSH
54245: CALL_OW 450
54249: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54250: LD_VAR 0 10
54254: PPUSH
54255: LD_INT 1
54257: PPUSH
54258: CALL_OW 275
54262: PUSH
54263: LD_VAR 0 11
54267: PUSH
54268: LD_INT 1
54270: ARRAY
54271: GREATEREQUAL
54272: PUSH
54273: LD_VAR 0 10
54277: PPUSH
54278: LD_INT 2
54280: PPUSH
54281: CALL_OW 275
54285: PUSH
54286: LD_VAR 0 11
54290: PUSH
54291: LD_INT 2
54293: ARRAY
54294: GREATEREQUAL
54295: AND
54296: PUSH
54297: LD_VAR 0 10
54301: PPUSH
54302: LD_INT 3
54304: PPUSH
54305: CALL_OW 275
54309: PUSH
54310: LD_VAR 0 11
54314: PUSH
54315: LD_INT 3
54317: ARRAY
54318: GREATEREQUAL
54319: AND
54320: NOT
54321: IFFALSE 54325
// exit ;
54323: GO 54912
// if GetBType ( depot ) = b_depot then
54325: LD_VAR 0 1
54329: PPUSH
54330: CALL_OW 266
54334: PUSH
54335: LD_INT 0
54337: EQUAL
54338: IFFALSE 54350
// dist := 28 else
54340: LD_ADDR_VAR 0 14
54344: PUSH
54345: LD_INT 28
54347: ST_TO_ADDR
54348: GO 54358
// dist := 36 ;
54350: LD_ADDR_VAR 0 14
54354: PUSH
54355: LD_INT 36
54357: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54358: LD_VAR 0 1
54362: PPUSH
54363: LD_VAR 0 3
54367: PPUSH
54368: LD_VAR 0 4
54372: PPUSH
54373: CALL_OW 297
54377: PUSH
54378: LD_VAR 0 14
54382: GREATER
54383: IFFALSE 54387
// exit ;
54385: GO 54912
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54387: LD_ADDR_VAR 0 12
54391: PUSH
54392: LD_VAR 0 2
54396: PPUSH
54397: LD_VAR 0 3
54401: PPUSH
54402: LD_VAR 0 4
54406: PPUSH
54407: LD_VAR 0 5
54411: PPUSH
54412: LD_VAR 0 1
54416: PPUSH
54417: CALL_OW 248
54421: PPUSH
54422: LD_INT 0
54424: PPUSH
54425: CALL 54917 0 6
54429: ST_TO_ADDR
// if not hexes then
54430: LD_VAR 0 12
54434: NOT
54435: IFFALSE 54439
// exit ;
54437: GO 54912
// hex := GetHexInfo ( x , y ) ;
54439: LD_ADDR_VAR 0 15
54443: PUSH
54444: LD_VAR 0 3
54448: PPUSH
54449: LD_VAR 0 4
54453: PPUSH
54454: CALL_OW 546
54458: ST_TO_ADDR
// if hex [ 1 ] then
54459: LD_VAR 0 15
54463: PUSH
54464: LD_INT 1
54466: ARRAY
54467: IFFALSE 54471
// exit ;
54469: GO 54912
// height := hex [ 2 ] ;
54471: LD_ADDR_VAR 0 13
54475: PUSH
54476: LD_VAR 0 15
54480: PUSH
54481: LD_INT 2
54483: ARRAY
54484: ST_TO_ADDR
// for i = 1 to hexes do
54485: LD_ADDR_VAR 0 7
54489: PUSH
54490: DOUBLE
54491: LD_INT 1
54493: DEC
54494: ST_TO_ADDR
54495: LD_VAR 0 12
54499: PUSH
54500: FOR_TO
54501: IFFALSE 54831
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54503: LD_VAR 0 12
54507: PUSH
54508: LD_VAR 0 7
54512: ARRAY
54513: PUSH
54514: LD_INT 1
54516: ARRAY
54517: PPUSH
54518: LD_VAR 0 12
54522: PUSH
54523: LD_VAR 0 7
54527: ARRAY
54528: PUSH
54529: LD_INT 2
54531: ARRAY
54532: PPUSH
54533: CALL_OW 488
54537: NOT
54538: PUSH
54539: LD_VAR 0 12
54543: PUSH
54544: LD_VAR 0 7
54548: ARRAY
54549: PUSH
54550: LD_INT 1
54552: ARRAY
54553: PPUSH
54554: LD_VAR 0 12
54558: PUSH
54559: LD_VAR 0 7
54563: ARRAY
54564: PUSH
54565: LD_INT 2
54567: ARRAY
54568: PPUSH
54569: CALL_OW 428
54573: PUSH
54574: LD_INT 0
54576: GREATER
54577: OR
54578: PUSH
54579: LD_VAR 0 12
54583: PUSH
54584: LD_VAR 0 7
54588: ARRAY
54589: PUSH
54590: LD_INT 1
54592: ARRAY
54593: PPUSH
54594: LD_VAR 0 12
54598: PUSH
54599: LD_VAR 0 7
54603: ARRAY
54604: PUSH
54605: LD_INT 2
54607: ARRAY
54608: PPUSH
54609: CALL_OW 351
54613: OR
54614: IFFALSE 54620
// exit ;
54616: POP
54617: POP
54618: GO 54912
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54620: LD_ADDR_VAR 0 8
54624: PUSH
54625: LD_VAR 0 12
54629: PUSH
54630: LD_VAR 0 7
54634: ARRAY
54635: PUSH
54636: LD_INT 1
54638: ARRAY
54639: PPUSH
54640: LD_VAR 0 12
54644: PUSH
54645: LD_VAR 0 7
54649: ARRAY
54650: PUSH
54651: LD_INT 2
54653: ARRAY
54654: PPUSH
54655: CALL_OW 546
54659: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54660: LD_VAR 0 8
54664: PUSH
54665: LD_INT 1
54667: ARRAY
54668: PUSH
54669: LD_VAR 0 8
54673: PUSH
54674: LD_INT 2
54676: ARRAY
54677: PUSH
54678: LD_VAR 0 13
54682: PUSH
54683: LD_INT 2
54685: PLUS
54686: GREATER
54687: OR
54688: PUSH
54689: LD_VAR 0 8
54693: PUSH
54694: LD_INT 2
54696: ARRAY
54697: PUSH
54698: LD_VAR 0 13
54702: PUSH
54703: LD_INT 2
54705: MINUS
54706: LESS
54707: OR
54708: PUSH
54709: LD_VAR 0 8
54713: PUSH
54714: LD_INT 3
54716: ARRAY
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 8
54723: PUSH
54724: LD_INT 9
54726: PUSH
54727: LD_INT 10
54729: PUSH
54730: LD_INT 11
54732: PUSH
54733: LD_INT 12
54735: PUSH
54736: LD_INT 13
54738: PUSH
54739: LD_INT 16
54741: PUSH
54742: LD_INT 17
54744: PUSH
54745: LD_INT 18
54747: PUSH
54748: LD_INT 19
54750: PUSH
54751: LD_INT 20
54753: PUSH
54754: LD_INT 21
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: IN
54772: NOT
54773: OR
54774: PUSH
54775: LD_VAR 0 8
54779: PUSH
54780: LD_INT 5
54782: ARRAY
54783: NOT
54784: OR
54785: PUSH
54786: LD_VAR 0 8
54790: PUSH
54791: LD_INT 6
54793: ARRAY
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: LD_INT 7
54803: PUSH
54804: LD_INT 9
54806: PUSH
54807: LD_INT 10
54809: PUSH
54810: LD_INT 11
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: IN
54821: NOT
54822: OR
54823: IFFALSE 54829
// exit ;
54825: POP
54826: POP
54827: GO 54912
// end ;
54829: GO 54500
54831: POP
54832: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54833: LD_VAR 0 9
54837: PPUSH
54838: LD_VAR 0 3
54842: PPUSH
54843: LD_VAR 0 4
54847: PPUSH
54848: LD_INT 20
54850: PPUSH
54851: CALL 46835 0 4
54855: PUSH
54856: LD_INT 4
54858: ARRAY
54859: IFFALSE 54863
// exit ;
54861: GO 54912
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54863: LD_VAR 0 2
54867: PUSH
54868: LD_INT 29
54870: PUSH
54871: LD_INT 30
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: IN
54878: PUSH
54879: LD_VAR 0 3
54883: PPUSH
54884: LD_VAR 0 4
54888: PPUSH
54889: LD_VAR 0 9
54893: PPUSH
54894: CALL_OW 440
54898: NOT
54899: AND
54900: IFFALSE 54904
// exit ;
54902: GO 54912
// result := true ;
54904: LD_ADDR_VAR 0 6
54908: PUSH
54909: LD_INT 1
54911: ST_TO_ADDR
// end ;
54912: LD_VAR 0 6
54916: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54917: LD_INT 0
54919: PPUSH
54920: PPUSH
54921: PPUSH
54922: PPUSH
54923: PPUSH
54924: PPUSH
54925: PPUSH
54926: PPUSH
54927: PPUSH
54928: PPUSH
54929: PPUSH
54930: PPUSH
54931: PPUSH
54932: PPUSH
54933: PPUSH
54934: PPUSH
54935: PPUSH
54936: PPUSH
54937: PPUSH
54938: PPUSH
54939: PPUSH
54940: PPUSH
54941: PPUSH
54942: PPUSH
54943: PPUSH
54944: PPUSH
54945: PPUSH
54946: PPUSH
54947: PPUSH
54948: PPUSH
54949: PPUSH
54950: PPUSH
54951: PPUSH
54952: PPUSH
54953: PPUSH
54954: PPUSH
54955: PPUSH
54956: PPUSH
54957: PPUSH
54958: PPUSH
54959: PPUSH
54960: PPUSH
54961: PPUSH
54962: PPUSH
54963: PPUSH
54964: PPUSH
54965: PPUSH
54966: PPUSH
54967: PPUSH
54968: PPUSH
54969: PPUSH
54970: PPUSH
54971: PPUSH
54972: PPUSH
54973: PPUSH
54974: PPUSH
54975: PPUSH
54976: PPUSH
// result = [ ] ;
54977: LD_ADDR_VAR 0 7
54981: PUSH
54982: EMPTY
54983: ST_TO_ADDR
// temp_list = [ ] ;
54984: LD_ADDR_VAR 0 9
54988: PUSH
54989: EMPTY
54990: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54991: LD_VAR 0 4
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: LD_INT 3
55007: PUSH
55008: LD_INT 4
55010: PUSH
55011: LD_INT 5
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: IN
55022: NOT
55023: PUSH
55024: LD_VAR 0 1
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: IN
55039: PUSH
55040: LD_VAR 0 5
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: LIST
55058: IN
55059: NOT
55060: AND
55061: OR
55062: IFFALSE 55066
// exit ;
55064: GO 73457
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55066: LD_VAR 0 1
55070: PUSH
55071: LD_INT 6
55073: PUSH
55074: LD_INT 7
55076: PUSH
55077: LD_INT 8
55079: PUSH
55080: LD_INT 13
55082: PUSH
55083: LD_INT 12
55085: PUSH
55086: LD_INT 15
55088: PUSH
55089: LD_INT 11
55091: PUSH
55092: LD_INT 14
55094: PUSH
55095: LD_INT 10
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: IN
55109: IFFALSE 55119
// btype = b_lab ;
55111: LD_ADDR_VAR 0 1
55115: PUSH
55116: LD_INT 6
55118: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55119: LD_VAR 0 6
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: LIST
55137: IN
55138: NOT
55139: PUSH
55140: LD_VAR 0 1
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: LD_INT 3
55156: PUSH
55157: LD_INT 6
55159: PUSH
55160: LD_INT 36
55162: PUSH
55163: LD_INT 4
55165: PUSH
55166: LD_INT 5
55168: PUSH
55169: LD_INT 31
55171: PUSH
55172: LD_INT 32
55174: PUSH
55175: LD_INT 33
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: IN
55191: NOT
55192: PUSH
55193: LD_VAR 0 6
55197: PUSH
55198: LD_INT 1
55200: EQUAL
55201: AND
55202: OR
55203: PUSH
55204: LD_VAR 0 1
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: LD_INT 3
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: IN
55219: NOT
55220: PUSH
55221: LD_VAR 0 6
55225: PUSH
55226: LD_INT 2
55228: EQUAL
55229: AND
55230: OR
55231: IFFALSE 55241
// mode = 0 ;
55233: LD_ADDR_VAR 0 6
55237: PUSH
55238: LD_INT 0
55240: ST_TO_ADDR
// case mode of 0 :
55241: LD_VAR 0 6
55245: PUSH
55246: LD_INT 0
55248: DOUBLE
55249: EQUAL
55250: IFTRUE 55254
55252: GO 66707
55254: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55255: LD_ADDR_VAR 0 11
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 3
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 3
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55448: LD_ADDR_VAR 0 12
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: NEG
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 3
55605: NEG
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 3
55616: NEG
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55644: LD_ADDR_VAR 0 13
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: LD_INT 3
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 3
55803: NEG
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 3
55815: NEG
55816: PUSH
55817: LD_INT 3
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55843: LD_ADDR_VAR 0 14
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 2
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: LD_INT 2
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 3
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: LD_INT 3
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56039: LD_ADDR_VAR 0 15
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 3
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56232: LD_ADDR_VAR 0 16
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 3
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56425: LD_ADDR_VAR 0 17
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56655: LD_ADDR_VAR 0 18
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 2
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: LD_INT 2
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: LD_INT 2
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56885: LD_ADDR_VAR 0 19
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: LD_INT 2
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: LD_INT 2
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 2
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: LD_INT 2
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57115: LD_ADDR_VAR 0 20
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 2
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: LD_INT 2
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 2
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 2
57314: NEG
57315: PUSH
57316: LD_INT 2
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57345: LD_ADDR_VAR 0 21
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: LD_INT 2
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 2
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: LD_INT 2
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57575: LD_ADDR_VAR 0 22
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 2
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 2
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57805: LD_ADDR_VAR 0 23
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 2
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 2
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 2
57981: NEG
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: NEG
58017: PUSH
58018: LD_INT 3
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 3
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58085: LD_ADDR_VAR 0 24
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 2
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 2
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: LD_INT 2
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 2
58261: NEG
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: LD_INT 2
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 2
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 3
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58361: LD_ADDR_VAR 0 25
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: LD_INT 2
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: LD_INT 2
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: LD_INT 2
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58635: LD_ADDR_VAR 0 26
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: NEG
58835: PUSH
58836: LD_INT 2
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 2
58846: PUSH
58847: LD_INT 3
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58911: LD_ADDR_VAR 0 27
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: LD_INT 2
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 2
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 2
59110: NEG
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 2
59133: NEG
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 3
59144: NEG
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 3
59156: NEG
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59191: LD_ADDR_VAR 0 28
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: LD_INT 2
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 2
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 2
59367: NEG
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: LD_INT 3
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 3
59426: NEG
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: LD_INT 2
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59473: LD_ADDR_VAR 0 29
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: LD_INT 2
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 2
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 2
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: NEG
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 2
59663: NEG
59664: PUSH
59665: LD_INT 3
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 3
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: LD_INT 3
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 3
59717: NEG
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59752: LD_ADDR_VAR 0 30
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 1
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: LD_INT 2
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: NEG
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: LD_INT 2
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 3
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: LD_INT 3
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: NEG
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 3
59995: NEG
59996: PUSH
59997: LD_INT 1
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60030: LD_ADDR_VAR 0 31
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 2
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: NEG
60208: PUSH
60209: LD_INT 2
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: LD_INT 3
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 2
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 3
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: LD_INT 3
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60308: LD_ADDR_VAR 0 32
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 2
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: LD_INT 2
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 2
60474: NEG
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 2
60485: NEG
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: LD_INT 3
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: LD_INT 2
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 3
60520: PUSH
60521: LD_INT 2
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 2
60530: PUSH
60531: LD_INT 3
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 2
60540: NEG
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60586: LD_ADDR_VAR 0 33
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: LD_INT 1
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: LD_INT 2
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 2
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: NEG
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 2
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: LD_INT 3
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 3
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: LD_INT 3
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 2
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: NEG
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60865: LD_ADDR_VAR 0 34
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: LD_INT 0
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: LD_INT 2
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: LD_INT 2
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: LD_INT 2
61048: NEG
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: LD_INT 3
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 3
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: PUSH
61090: LD_INT 3
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: NEG
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61145: LD_ADDR_VAR 0 35
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: LD_INT 1
61218: NEG
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 2
61236: NEG
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61257: LD_ADDR_VAR 0 36
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: LD_INT 1
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: LD_INT 2
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61369: LD_ADDR_VAR 0 37
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61481: LD_ADDR_VAR 0 38
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: LD_INT 1
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: LD_INT 1
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61593: LD_ADDR_VAR 0 39
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: LD_INT 0
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: LD_INT 1
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: LD_INT 2
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61705: LD_ADDR_VAR 0 40
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: NEG
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61817: LD_ADDR_VAR 0 41
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: LD_INT 2
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 2
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 2
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 2
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 2
61972: NEG
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 2
61983: NEG
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 2
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 2
62007: NEG
62008: PUSH
62009: LD_INT 3
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 2
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 3
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 3
62050: PUSH
62051: LD_INT 2
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 3
62060: PUSH
62061: LD_INT 3
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 2
62070: PUSH
62071: LD_INT 3
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 2
62080: NEG
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 3
62091: NEG
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 3
62102: NEG
62103: PUSH
62104: LD_INT 1
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: LD_INT 2
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 3
62126: NEG
62127: PUSH
62128: LD_INT 3
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62167: LD_ADDR_VAR 0 42
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: LD_INT 1
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: LD_INT 2
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: LD_INT 2
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 2
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 2
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 1
62322: NEG
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 2
62333: NEG
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 2
62345: NEG
62346: PUSH
62347: LD_INT 2
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 2
62357: NEG
62358: PUSH
62359: LD_INT 3
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: LD_INT 3
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: LD_INT 3
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: LD_INT 2
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 3
62403: PUSH
62404: LD_INT 2
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 3
62413: PUSH
62414: LD_INT 3
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 2
62423: PUSH
62424: LD_INT 3
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: LD_INT 3
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: LD_INT 3
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: LD_INT 2
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 3
62464: NEG
62465: PUSH
62466: LD_INT 2
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 3
62476: NEG
62477: PUSH
62478: LD_INT 3
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62517: LD_ADDR_VAR 0 43
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 1
62555: PUSH
62556: LD_INT 1
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 2
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 2
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 2
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: LD_INT 2
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: LD_INT 2
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 2
62694: NEG
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: LD_INT 3
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: LD_INT 3
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: LD_INT 2
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 3
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 3
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: LD_INT 3
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: LD_INT 3
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 2
62802: NEG
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 3
62813: NEG
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 3
62824: NEG
62825: PUSH
62826: LD_INT 1
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62865: LD_ADDR_VAR 0 44
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: LD_INT 1
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: LD_INT 2
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 2
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: LD_INT 2
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: NEG
63010: PUSH
63011: LD_INT 1
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 2
63020: NEG
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: LD_INT 1
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: LD_INT 2
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: NEG
63056: PUSH
63057: LD_INT 3
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 2
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 3
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 3
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 3
63098: PUSH
63099: LD_INT 2
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 3
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: LD_INT 3
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: NEG
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 3
63139: NEG
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: LD_INT 1
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: LD_INT 2
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 3
63174: NEG
63175: PUSH
63176: LD_INT 3
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63215: LD_ADDR_VAR 0 45
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 1
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: LD_INT 1
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: LD_INT 1
63288: NEG
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: PUSH
63298: LD_INT 2
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: LD_INT 2
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 2
63330: PUSH
63331: LD_INT 1
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 2
63340: PUSH
63341: LD_INT 2
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: LD_INT 2
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: LD_INT 2
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 2
63381: NEG
63382: PUSH
63383: LD_INT 1
63385: NEG
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 2
63393: NEG
63394: PUSH
63395: LD_INT 2
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 2
63405: NEG
63406: PUSH
63407: LD_INT 3
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: LD_INT 3
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: LD_INT 3
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: LD_INT 2
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 3
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 3
63461: PUSH
63462: LD_INT 3
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 2
63471: PUSH
63472: LD_INT 3
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: LD_INT 3
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: LD_INT 3
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: LD_INT 2
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 3
63512: NEG
63513: PUSH
63514: LD_INT 2
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 3
63524: NEG
63525: PUSH
63526: LD_INT 3
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63565: LD_ADDR_VAR 0 46
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: NEG
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: LD_INT 2
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: PUSH
63670: LD_INT 1
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 2
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 2
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: LD_INT 2
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: NEG
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: LD_INT 3
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 3
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: LD_INT 2
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 2
63788: PUSH
63789: LD_INT 1
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 3
63799: PUSH
63800: LD_INT 0
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 3
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: LD_INT 3
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: LD_INT 3
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: LD_INT 2
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 2
63850: NEG
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 3
63861: NEG
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 3
63872: NEG
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63913: LD_ADDR_VAR 0 47
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: LD_INT 1
63933: NEG
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 1
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: LD_INT 1
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: NEG
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 1
63982: NEG
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: LD_INT 2
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 2
64028: NEG
64029: PUSH
64030: LD_INT 1
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 2
64040: NEG
64041: PUSH
64042: LD_INT 2
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64064: LD_ADDR_VAR 0 48
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 0
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 1
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 0
64112: PUSH
64113: LD_INT 1
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 1
64122: NEG
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: LD_INT 1
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: NEG
64146: PUSH
64147: LD_INT 2
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 0
64157: PUSH
64158: LD_INT 2
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 1
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 2
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 2
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64211: LD_ADDR_VAR 0 49
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 1
64280: NEG
64281: PUSH
64282: LD_INT 1
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: LD_INT 1
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 2
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 2
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64355: LD_ADDR_VAR 0 50
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: LD_INT 1
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 1
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 0
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 1
64413: NEG
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 2
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 2
64446: PUSH
64447: LD_INT 2
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: LD_INT 2
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64499: LD_ADDR_VAR 0 51
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 1
64568: NEG
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 1
64580: PUSH
64581: LD_INT 2
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: LD_INT 2
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 2
64611: NEG
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 2
64622: NEG
64623: PUSH
64624: LD_INT 1
64626: NEG
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64646: LD_ADDR_VAR 0 52
64650: PUSH
64651: LD_INT 0
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 1
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 1
64684: PUSH
64685: LD_INT 1
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 0
64694: PUSH
64695: LD_INT 1
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 1
64704: NEG
64705: PUSH
64706: LD_INT 0
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: LD_INT 1
64719: NEG
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: LD_INT 2
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 1
64739: NEG
64740: PUSH
64741: LD_INT 1
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 2
64761: NEG
64762: PUSH
64763: LD_INT 1
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 2
64773: NEG
64774: PUSH
64775: LD_INT 2
64777: NEG
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64797: LD_ADDR_VAR 0 53
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: LD_INT 0
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: LD_INT 1
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: LD_INT 0
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: LD_INT 1
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 0
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 1
64855: NEG
64856: PUSH
64857: LD_INT 0
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 1
64866: NEG
64867: PUSH
64868: LD_INT 1
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 1
64878: NEG
64879: PUSH
64880: LD_INT 2
64882: NEG
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: LD_INT 2
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: LD_INT 1
64904: NEG
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: LD_INT 0
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 2
64922: PUSH
64923: LD_INT 1
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 2
64932: PUSH
64933: LD_INT 2
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 1
64942: PUSH
64943: LD_INT 2
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 0
64952: PUSH
64953: LD_INT 2
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 1
64962: NEG
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 2
64973: NEG
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 2
64984: NEG
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 2
64996: NEG
64997: PUSH
64998: LD_INT 2
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65027: LD_ADDR_VAR 0 54
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: LD_INT 1
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 0
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 1
65085: NEG
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: LD_INT 1
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 1
65108: NEG
65109: PUSH
65110: LD_INT 2
65112: NEG
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: LD_INT 2
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 2
65142: PUSH
65143: LD_INT 0
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 2
65152: PUSH
65153: LD_INT 1
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 2
65162: PUSH
65163: LD_INT 2
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 1
65172: PUSH
65173: LD_INT 2
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: LD_INT 2
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: LD_INT 1
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 2
65203: NEG
65204: PUSH
65205: LD_INT 0
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 2
65214: NEG
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 2
65226: NEG
65227: PUSH
65228: LD_INT 2
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65257: LD_ADDR_VAR 0 55
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: LD_INT 0
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: LD_INT 1
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: LD_INT 1
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: LD_INT 1
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: NEG
65316: PUSH
65317: LD_INT 0
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 1
65338: NEG
65339: PUSH
65340: LD_INT 2
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: LD_INT 2
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 2
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 2
65382: PUSH
65383: LD_INT 1
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 2
65392: PUSH
65393: LD_INT 2
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 1
65422: NEG
65423: PUSH
65424: LD_INT 1
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 2
65433: NEG
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 2
65444: NEG
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 2
65456: NEG
65457: PUSH
65458: LD_INT 2
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65487: LD_ADDR_VAR 0 56
65491: PUSH
65492: LD_INT 0
65494: PUSH
65495: LD_INT 0
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 0
65504: PUSH
65505: LD_INT 1
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: LD_INT 0
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 1
65525: PUSH
65526: LD_INT 1
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 0
65535: PUSH
65536: LD_INT 1
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 1
65545: NEG
65546: PUSH
65547: LD_INT 0
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 1
65556: NEG
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 1
65568: NEG
65569: PUSH
65570: LD_INT 2
65572: NEG
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: LD_INT 2
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 1
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 2
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 2
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 2
65622: PUSH
65623: LD_INT 2
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 1
65632: PUSH
65633: LD_INT 2
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 0
65642: PUSH
65643: LD_INT 2
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 1
65652: NEG
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 2
65663: NEG
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 2
65674: NEG
65675: PUSH
65676: LD_INT 1
65678: NEG
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 2
65686: NEG
65687: PUSH
65688: LD_INT 2
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65717: LD_ADDR_VAR 0 57
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: LD_INT 0
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: LD_INT 1
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: LD_INT 0
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 1
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 1
65775: NEG
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 1
65786: NEG
65787: PUSH
65788: LD_INT 1
65790: NEG
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 1
65798: NEG
65799: PUSH
65800: LD_INT 2
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: LD_INT 2
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 1
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 2
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 2
65842: PUSH
65843: LD_INT 1
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 2
65852: PUSH
65853: LD_INT 2
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: LD_INT 2
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 1
65882: NEG
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 2
65893: NEG
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 2
65904: NEG
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 2
65916: NEG
65917: PUSH
65918: LD_INT 2
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65947: LD_ADDR_VAR 0 58
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: LD_INT 0
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 0
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 1
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: LD_INT 1
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 0
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 1
66005: NEG
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 1
66028: NEG
66029: PUSH
66030: LD_INT 2
66032: NEG
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: LD_INT 2
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 1
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 2
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 2
66072: PUSH
66073: LD_INT 1
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 2
66082: PUSH
66083: LD_INT 2
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 1
66092: PUSH
66093: LD_INT 2
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: LD_INT 2
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 1
66112: NEG
66113: PUSH
66114: LD_INT 1
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 2
66123: NEG
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 2
66134: NEG
66135: PUSH
66136: LD_INT 1
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 2
66146: NEG
66147: PUSH
66148: LD_INT 2
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66177: LD_ADDR_VAR 0 59
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: LD_INT 1
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 1
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 1
66215: PUSH
66216: LD_INT 1
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 0
66225: PUSH
66226: LD_INT 1
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 1
66235: NEG
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: LD_INT 1
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66265: LD_ADDR_VAR 0 60
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: LD_INT 1
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 1
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 1
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: LD_INT 1
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 1
66323: NEG
66324: PUSH
66325: LD_INT 0
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 1
66334: NEG
66335: PUSH
66336: LD_INT 1
66338: NEG
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66353: LD_ADDR_VAR 0 61
66357: PUSH
66358: LD_INT 0
66360: PUSH
66361: LD_INT 0
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: LD_INT 1
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 1
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 1
66391: PUSH
66392: LD_INT 1
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 0
66401: PUSH
66402: LD_INT 1
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 1
66411: NEG
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 1
66422: NEG
66423: PUSH
66424: LD_INT 1
66426: NEG
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66441: LD_ADDR_VAR 0 62
66445: PUSH
66446: LD_INT 0
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 0
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: LD_INT 0
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: LD_INT 1
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 1
66499: NEG
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 1
66510: NEG
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66529: LD_ADDR_VAR 0 63
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: LD_INT 1
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 1
66557: PUSH
66558: LD_INT 0
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 1
66567: PUSH
66568: LD_INT 1
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: LD_INT 1
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 1
66587: NEG
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 1
66598: NEG
66599: PUSH
66600: LD_INT 1
66602: NEG
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66617: LD_ADDR_VAR 0 64
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: LD_INT 1
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 1
66645: PUSH
66646: LD_INT 0
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 1
66655: PUSH
66656: LD_INT 1
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 0
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 1
66675: NEG
66676: PUSH
66677: LD_INT 0
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 1
66686: NEG
66687: PUSH
66688: LD_INT 1
66690: NEG
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: ST_TO_ADDR
// end ; 1 :
66705: GO 72602
66707: LD_INT 1
66709: DOUBLE
66710: EQUAL
66711: IFTRUE 66715
66713: GO 69338
66715: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66716: LD_ADDR_VAR 0 11
66720: PUSH
66721: LD_INT 1
66723: NEG
66724: PUSH
66725: LD_INT 3
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 3
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 1
66746: PUSH
66747: LD_INT 2
66749: NEG
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: LIST
66759: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66760: LD_ADDR_VAR 0 12
66764: PUSH
66765: LD_INT 2
66767: PUSH
66768: LD_INT 1
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 3
66778: PUSH
66779: LD_INT 0
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 3
66788: PUSH
66789: LD_INT 1
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: LIST
66800: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66801: LD_ADDR_VAR 0 13
66805: PUSH
66806: LD_INT 3
66808: PUSH
66809: LD_INT 2
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 3
66818: PUSH
66819: LD_INT 3
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 2
66828: PUSH
66829: LD_INT 3
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: LIST
66840: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66841: LD_ADDR_VAR 0 14
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: LD_INT 3
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: LD_INT 3
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 1
66868: NEG
66869: PUSH
66870: LD_INT 2
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: LIST
66881: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66882: LD_ADDR_VAR 0 15
66886: PUSH
66887: LD_INT 2
66889: NEG
66890: PUSH
66891: LD_INT 1
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 3
66900: NEG
66901: PUSH
66902: LD_INT 0
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 3
66911: NEG
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: LIST
66925: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66926: LD_ADDR_VAR 0 16
66930: PUSH
66931: LD_INT 2
66933: NEG
66934: PUSH
66935: LD_INT 3
66937: NEG
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 3
66945: NEG
66946: PUSH
66947: LD_INT 2
66949: NEG
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 3
66957: NEG
66958: PUSH
66959: LD_INT 3
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: LIST
66971: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66972: LD_ADDR_VAR 0 17
66976: PUSH
66977: LD_INT 1
66979: NEG
66980: PUSH
66981: LD_INT 3
66983: NEG
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: LD_INT 3
66994: NEG
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 1
67002: PUSH
67003: LD_INT 2
67005: NEG
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: LIST
67015: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67016: LD_ADDR_VAR 0 18
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: LD_INT 1
67026: NEG
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 3
67034: PUSH
67035: LD_INT 0
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 3
67044: PUSH
67045: LD_INT 1
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: LIST
67056: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67057: LD_ADDR_VAR 0 19
67061: PUSH
67062: LD_INT 3
67064: PUSH
67065: LD_INT 2
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 3
67074: PUSH
67075: LD_INT 3
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 2
67084: PUSH
67085: LD_INT 3
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: LIST
67096: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67097: LD_ADDR_VAR 0 20
67101: PUSH
67102: LD_INT 1
67104: PUSH
67105: LD_INT 3
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 0
67114: PUSH
67115: LD_INT 3
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 1
67124: NEG
67125: PUSH
67126: LD_INT 2
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: LIST
67137: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67138: LD_ADDR_VAR 0 21
67142: PUSH
67143: LD_INT 2
67145: NEG
67146: PUSH
67147: LD_INT 1
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 3
67156: NEG
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 3
67167: NEG
67168: PUSH
67169: LD_INT 1
67171: NEG
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: LIST
67181: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67182: LD_ADDR_VAR 0 22
67186: PUSH
67187: LD_INT 2
67189: NEG
67190: PUSH
67191: LD_INT 3
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 3
67201: NEG
67202: PUSH
67203: LD_INT 2
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 3
67213: NEG
67214: PUSH
67215: LD_INT 3
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: LIST
67227: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67228: LD_ADDR_VAR 0 23
67232: PUSH
67233: LD_INT 0
67235: PUSH
67236: LD_INT 3
67238: NEG
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 1
67246: NEG
67247: PUSH
67248: LD_INT 4
67250: NEG
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 1
67258: PUSH
67259: LD_INT 3
67261: NEG
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67272: LD_ADDR_VAR 0 24
67276: PUSH
67277: LD_INT 3
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 3
67289: PUSH
67290: LD_INT 1
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 4
67300: PUSH
67301: LD_INT 1
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: LIST
67312: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67313: LD_ADDR_VAR 0 25
67317: PUSH
67318: LD_INT 3
67320: PUSH
67321: LD_INT 3
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 4
67330: PUSH
67331: LD_INT 3
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 3
67340: PUSH
67341: LD_INT 4
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: LIST
67352: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67353: LD_ADDR_VAR 0 26
67357: PUSH
67358: LD_INT 0
67360: PUSH
67361: LD_INT 3
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 1
67370: PUSH
67371: LD_INT 4
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 1
67380: NEG
67381: PUSH
67382: LD_INT 3
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: LIST
67393: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67394: LD_ADDR_VAR 0 27
67398: PUSH
67399: LD_INT 3
67401: NEG
67402: PUSH
67403: LD_INT 0
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 3
67412: NEG
67413: PUSH
67414: LD_INT 1
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 4
67423: NEG
67424: PUSH
67425: LD_INT 1
67427: NEG
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: LIST
67437: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67438: LD_ADDR_VAR 0 28
67442: PUSH
67443: LD_INT 3
67445: NEG
67446: PUSH
67447: LD_INT 3
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 3
67457: NEG
67458: PUSH
67459: LD_INT 4
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 4
67469: NEG
67470: PUSH
67471: LD_INT 3
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67484: LD_ADDR_VAR 0 29
67488: PUSH
67489: LD_INT 1
67491: NEG
67492: PUSH
67493: LD_INT 3
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 0
67503: PUSH
67504: LD_INT 3
67506: NEG
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: LD_INT 2
67517: NEG
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 1
67525: NEG
67526: PUSH
67527: LD_INT 4
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: LD_INT 4
67540: NEG
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 1
67548: PUSH
67549: LD_INT 3
67551: NEG
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 1
67559: NEG
67560: PUSH
67561: LD_INT 5
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 0
67571: PUSH
67572: LD_INT 5
67574: NEG
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 1
67582: PUSH
67583: LD_INT 4
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: NEG
67594: PUSH
67595: LD_INT 6
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: LD_INT 6
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 1
67616: PUSH
67617: LD_INT 5
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67639: LD_ADDR_VAR 0 30
67643: PUSH
67644: LD_INT 2
67646: PUSH
67647: LD_INT 1
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 3
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 3
67667: PUSH
67668: LD_INT 1
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 3
67677: PUSH
67678: LD_INT 1
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 4
67688: PUSH
67689: LD_INT 0
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 4
67698: PUSH
67699: LD_INT 1
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 4
67708: PUSH
67709: LD_INT 1
67711: NEG
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 5
67719: PUSH
67720: LD_INT 0
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 5
67729: PUSH
67730: LD_INT 1
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 5
67739: PUSH
67740: LD_INT 1
67742: NEG
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 6
67750: PUSH
67751: LD_INT 0
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 6
67760: PUSH
67761: LD_INT 1
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67782: LD_ADDR_VAR 0 31
67786: PUSH
67787: LD_INT 3
67789: PUSH
67790: LD_INT 2
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 3
67799: PUSH
67800: LD_INT 3
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 2
67809: PUSH
67810: LD_INT 3
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 4
67819: PUSH
67820: LD_INT 3
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 4
67829: PUSH
67830: LD_INT 4
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 3
67839: PUSH
67840: LD_INT 4
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 5
67849: PUSH
67850: LD_INT 4
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 5
67859: PUSH
67860: LD_INT 5
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 4
67869: PUSH
67870: LD_INT 5
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 6
67879: PUSH
67880: LD_INT 5
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 6
67889: PUSH
67890: LD_INT 6
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 5
67899: PUSH
67900: LD_INT 6
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67921: LD_ADDR_VAR 0 32
67925: PUSH
67926: LD_INT 1
67928: PUSH
67929: LD_INT 3
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: LD_INT 3
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 1
67948: NEG
67949: PUSH
67950: LD_INT 2
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 1
67959: PUSH
67960: LD_INT 4
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 0
67969: PUSH
67970: LD_INT 4
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 1
67979: NEG
67980: PUSH
67981: LD_INT 3
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 1
67990: PUSH
67991: LD_INT 5
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 0
68000: PUSH
68001: LD_INT 5
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 1
68010: NEG
68011: PUSH
68012: LD_INT 4
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: LD_INT 6
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 0
68031: PUSH
68032: LD_INT 6
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: LD_INT 5
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68064: LD_ADDR_VAR 0 33
68068: PUSH
68069: LD_INT 2
68071: NEG
68072: PUSH
68073: LD_INT 1
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 3
68082: NEG
68083: PUSH
68084: LD_INT 0
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 3
68093: NEG
68094: PUSH
68095: LD_INT 1
68097: NEG
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 3
68105: NEG
68106: PUSH
68107: LD_INT 1
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 4
68116: NEG
68117: PUSH
68118: LD_INT 0
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 4
68127: NEG
68128: PUSH
68129: LD_INT 1
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 4
68139: NEG
68140: PUSH
68141: LD_INT 1
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 5
68150: NEG
68151: PUSH
68152: LD_INT 0
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 5
68161: NEG
68162: PUSH
68163: LD_INT 1
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 5
68173: NEG
68174: PUSH
68175: LD_INT 1
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 6
68184: NEG
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 6
68195: NEG
68196: PUSH
68197: LD_INT 1
68199: NEG
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68219: LD_ADDR_VAR 0 34
68223: PUSH
68224: LD_INT 2
68226: NEG
68227: PUSH
68228: LD_INT 3
68230: NEG
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 3
68238: NEG
68239: PUSH
68240: LD_INT 2
68242: NEG
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 3
68250: NEG
68251: PUSH
68252: LD_INT 3
68254: NEG
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 3
68262: NEG
68263: PUSH
68264: LD_INT 4
68266: NEG
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 4
68274: NEG
68275: PUSH
68276: LD_INT 3
68278: NEG
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 4
68286: NEG
68287: PUSH
68288: LD_INT 4
68290: NEG
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 4
68298: NEG
68299: PUSH
68300: LD_INT 5
68302: NEG
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 5
68310: NEG
68311: PUSH
68312: LD_INT 4
68314: NEG
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 5
68322: NEG
68323: PUSH
68324: LD_INT 5
68326: NEG
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 5
68334: NEG
68335: PUSH
68336: LD_INT 6
68338: NEG
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 6
68346: NEG
68347: PUSH
68348: LD_INT 5
68350: NEG
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 6
68358: NEG
68359: PUSH
68360: LD_INT 6
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68382: LD_ADDR_VAR 0 41
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: LD_INT 2
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 1
68400: NEG
68401: PUSH
68402: LD_INT 3
68404: NEG
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 1
68412: PUSH
68413: LD_INT 2
68415: NEG
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: LIST
68425: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68426: LD_ADDR_VAR 0 42
68430: PUSH
68431: LD_INT 2
68433: PUSH
68434: LD_INT 0
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 2
68443: PUSH
68444: LD_INT 1
68446: NEG
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 3
68454: PUSH
68455: LD_INT 1
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: LIST
68466: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68467: LD_ADDR_VAR 0 43
68471: PUSH
68472: LD_INT 2
68474: PUSH
68475: LD_INT 2
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 3
68484: PUSH
68485: LD_INT 2
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 2
68494: PUSH
68495: LD_INT 3
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: LIST
68506: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68507: LD_ADDR_VAR 0 44
68511: PUSH
68512: LD_INT 0
68514: PUSH
68515: LD_INT 2
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 1
68524: PUSH
68525: LD_INT 3
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 1
68534: NEG
68535: PUSH
68536: LD_INT 2
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: LIST
68547: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68548: LD_ADDR_VAR 0 45
68552: PUSH
68553: LD_INT 2
68555: NEG
68556: PUSH
68557: LD_INT 0
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 2
68566: NEG
68567: PUSH
68568: LD_INT 1
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 3
68577: NEG
68578: PUSH
68579: LD_INT 1
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: LIST
68591: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68592: LD_ADDR_VAR 0 46
68596: PUSH
68597: LD_INT 2
68599: NEG
68600: PUSH
68601: LD_INT 2
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 2
68611: NEG
68612: PUSH
68613: LD_INT 3
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 3
68623: NEG
68624: PUSH
68625: LD_INT 2
68627: NEG
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: LIST
68637: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68638: LD_ADDR_VAR 0 47
68642: PUSH
68643: LD_INT 2
68645: NEG
68646: PUSH
68647: LD_INT 3
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 1
68657: NEG
68658: PUSH
68659: LD_INT 3
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68671: LD_ADDR_VAR 0 48
68675: PUSH
68676: LD_INT 1
68678: PUSH
68679: LD_INT 2
68681: NEG
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 2
68689: PUSH
68690: LD_INT 1
68692: NEG
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68702: LD_ADDR_VAR 0 49
68706: PUSH
68707: LD_INT 3
68709: PUSH
68710: LD_INT 1
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 3
68719: PUSH
68720: LD_INT 2
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68731: LD_ADDR_VAR 0 50
68735: PUSH
68736: LD_INT 2
68738: PUSH
68739: LD_INT 3
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 1
68748: PUSH
68749: LD_INT 3
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68760: LD_ADDR_VAR 0 51
68764: PUSH
68765: LD_INT 1
68767: NEG
68768: PUSH
68769: LD_INT 2
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 2
68778: NEG
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68791: LD_ADDR_VAR 0 52
68795: PUSH
68796: LD_INT 3
68798: NEG
68799: PUSH
68800: LD_INT 1
68802: NEG
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 3
68810: NEG
68811: PUSH
68812: LD_INT 2
68814: NEG
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68824: LD_ADDR_VAR 0 53
68828: PUSH
68829: LD_INT 1
68831: NEG
68832: PUSH
68833: LD_INT 3
68835: NEG
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 0
68843: PUSH
68844: LD_INT 3
68846: NEG
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 1
68854: PUSH
68855: LD_INT 2
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: LIST
68867: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68868: LD_ADDR_VAR 0 54
68872: PUSH
68873: LD_INT 2
68875: PUSH
68876: LD_INT 1
68878: NEG
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 3
68886: PUSH
68887: LD_INT 0
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 3
68896: PUSH
68897: LD_INT 1
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: LIST
68908: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68909: LD_ADDR_VAR 0 55
68913: PUSH
68914: LD_INT 3
68916: PUSH
68917: LD_INT 2
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 3
68926: PUSH
68927: LD_INT 3
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 2
68936: PUSH
68937: LD_INT 3
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: LIST
68948: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68949: LD_ADDR_VAR 0 56
68953: PUSH
68954: LD_INT 1
68956: PUSH
68957: LD_INT 3
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 0
68966: PUSH
68967: LD_INT 3
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 1
68976: NEG
68977: PUSH
68978: LD_INT 2
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: LIST
68989: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68990: LD_ADDR_VAR 0 57
68994: PUSH
68995: LD_INT 2
68997: NEG
68998: PUSH
68999: LD_INT 1
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 3
69008: NEG
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 3
69019: NEG
69020: PUSH
69021: LD_INT 1
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: LIST
69033: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69034: LD_ADDR_VAR 0 58
69038: PUSH
69039: LD_INT 2
69041: NEG
69042: PUSH
69043: LD_INT 3
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 3
69053: NEG
69054: PUSH
69055: LD_INT 2
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 3
69065: NEG
69066: PUSH
69067: LD_INT 3
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: LIST
69079: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69080: LD_ADDR_VAR 0 59
69084: PUSH
69085: LD_INT 1
69087: NEG
69088: PUSH
69089: LD_INT 2
69091: NEG
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 0
69099: PUSH
69100: LD_INT 2
69102: NEG
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 1
69110: PUSH
69111: LD_INT 1
69113: NEG
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: LIST
69123: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69124: LD_ADDR_VAR 0 60
69128: PUSH
69129: LD_INT 1
69131: PUSH
69132: LD_INT 1
69134: NEG
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 2
69142: PUSH
69143: LD_INT 0
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 2
69152: PUSH
69153: LD_INT 1
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: LIST
69164: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69165: LD_ADDR_VAR 0 61
69169: PUSH
69170: LD_INT 2
69172: PUSH
69173: LD_INT 1
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 2
69182: PUSH
69183: LD_INT 2
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 1
69192: PUSH
69193: LD_INT 2
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: LIST
69204: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69205: LD_ADDR_VAR 0 62
69209: PUSH
69210: LD_INT 1
69212: PUSH
69213: LD_INT 2
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 0
69222: PUSH
69223: LD_INT 2
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 1
69232: NEG
69233: PUSH
69234: LD_INT 1
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: LIST
69245: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69246: LD_ADDR_VAR 0 63
69250: PUSH
69251: LD_INT 1
69253: NEG
69254: PUSH
69255: LD_INT 1
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 2
69264: NEG
69265: PUSH
69266: LD_INT 0
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 2
69275: NEG
69276: PUSH
69277: LD_INT 1
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: LIST
69289: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69290: LD_ADDR_VAR 0 64
69294: PUSH
69295: LD_INT 1
69297: NEG
69298: PUSH
69299: LD_INT 2
69301: NEG
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 2
69309: NEG
69310: PUSH
69311: LD_INT 1
69313: NEG
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 2
69321: NEG
69322: PUSH
69323: LD_INT 2
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: LIST
69335: ST_TO_ADDR
// end ; 2 :
69336: GO 72602
69338: LD_INT 2
69340: DOUBLE
69341: EQUAL
69342: IFTRUE 69346
69344: GO 72601
69346: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69347: LD_ADDR_VAR 0 29
69351: PUSH
69352: LD_INT 4
69354: PUSH
69355: LD_INT 0
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 4
69364: PUSH
69365: LD_INT 1
69367: NEG
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 5
69375: PUSH
69376: LD_INT 0
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 5
69385: PUSH
69386: LD_INT 1
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 4
69395: PUSH
69396: LD_INT 1
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 3
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 3
69415: PUSH
69416: LD_INT 1
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 3
69426: PUSH
69427: LD_INT 2
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 5
69437: PUSH
69438: LD_INT 2
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 3
69447: PUSH
69448: LD_INT 3
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 3
69457: PUSH
69458: LD_INT 2
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 4
69467: PUSH
69468: LD_INT 3
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 4
69477: PUSH
69478: LD_INT 4
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 3
69487: PUSH
69488: LD_INT 4
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 2
69497: PUSH
69498: LD_INT 3
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 2
69507: PUSH
69508: LD_INT 2
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 4
69517: PUSH
69518: LD_INT 2
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 2
69527: PUSH
69528: LD_INT 4
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 0
69537: PUSH
69538: LD_INT 4
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 0
69547: PUSH
69548: LD_INT 3
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 1
69557: PUSH
69558: LD_INT 4
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: LD_INT 5
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 0
69577: PUSH
69578: LD_INT 5
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 1
69587: NEG
69588: PUSH
69589: LD_INT 4
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 1
69598: NEG
69599: PUSH
69600: LD_INT 3
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 2
69609: PUSH
69610: LD_INT 5
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 2
69619: NEG
69620: PUSH
69621: LD_INT 3
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 3
69630: NEG
69631: PUSH
69632: LD_INT 0
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 3
69641: NEG
69642: PUSH
69643: LD_INT 1
69645: NEG
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 2
69653: NEG
69654: PUSH
69655: LD_INT 0
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 2
69664: NEG
69665: PUSH
69666: LD_INT 1
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 3
69675: NEG
69676: PUSH
69677: LD_INT 1
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 4
69686: NEG
69687: PUSH
69688: LD_INT 0
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 4
69697: NEG
69698: PUSH
69699: LD_INT 1
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 4
69709: NEG
69710: PUSH
69711: LD_INT 2
69713: NEG
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 2
69721: NEG
69722: PUSH
69723: LD_INT 2
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 4
69732: NEG
69733: PUSH
69734: LD_INT 4
69736: NEG
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 4
69744: NEG
69745: PUSH
69746: LD_INT 5
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 3
69756: NEG
69757: PUSH
69758: LD_INT 4
69760: NEG
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 3
69768: NEG
69769: PUSH
69770: LD_INT 3
69772: NEG
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 4
69780: NEG
69781: PUSH
69782: LD_INT 3
69784: NEG
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 5
69792: NEG
69793: PUSH
69794: LD_INT 4
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 5
69804: NEG
69805: PUSH
69806: LD_INT 5
69808: NEG
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 3
69816: NEG
69817: PUSH
69818: LD_INT 5
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 5
69828: NEG
69829: PUSH
69830: LD_INT 3
69832: NEG
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69885: LD_ADDR_VAR 0 30
69889: PUSH
69890: LD_INT 4
69892: PUSH
69893: LD_INT 4
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 4
69902: PUSH
69903: LD_INT 3
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 5
69912: PUSH
69913: LD_INT 4
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 5
69922: PUSH
69923: LD_INT 5
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 4
69932: PUSH
69933: LD_INT 5
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 3
69942: PUSH
69943: LD_INT 4
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 3
69952: PUSH
69953: LD_INT 3
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 5
69962: PUSH
69963: LD_INT 3
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 3
69972: PUSH
69973: LD_INT 5
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 0
69982: PUSH
69983: LD_INT 3
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 0
69992: PUSH
69993: LD_INT 2
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 1
70002: PUSH
70003: LD_INT 3
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 1
70012: PUSH
70013: LD_INT 4
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 0
70022: PUSH
70023: LD_INT 4
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 1
70032: NEG
70033: PUSH
70034: LD_INT 3
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 1
70043: NEG
70044: PUSH
70045: LD_INT 2
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 2
70054: PUSH
70055: LD_INT 4
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 2
70064: NEG
70065: PUSH
70066: LD_INT 2
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 4
70075: NEG
70076: PUSH
70077: LD_INT 0
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 4
70086: NEG
70087: PUSH
70088: LD_INT 1
70090: NEG
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 3
70098: NEG
70099: PUSH
70100: LD_INT 0
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 3
70109: NEG
70110: PUSH
70111: LD_INT 1
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 4
70120: NEG
70121: PUSH
70122: LD_INT 1
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 5
70131: NEG
70132: PUSH
70133: LD_INT 0
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 5
70142: NEG
70143: PUSH
70144: LD_INT 1
70146: NEG
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 5
70154: NEG
70155: PUSH
70156: LD_INT 2
70158: NEG
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 3
70166: NEG
70167: PUSH
70168: LD_INT 2
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 3
70177: NEG
70178: PUSH
70179: LD_INT 3
70181: NEG
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 3
70189: NEG
70190: PUSH
70191: LD_INT 4
70193: NEG
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 2
70201: NEG
70202: PUSH
70203: LD_INT 3
70205: NEG
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 2
70213: NEG
70214: PUSH
70215: LD_INT 2
70217: NEG
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 3
70225: NEG
70226: PUSH
70227: LD_INT 2
70229: NEG
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 4
70237: NEG
70238: PUSH
70239: LD_INT 3
70241: NEG
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 4
70249: NEG
70250: PUSH
70251: LD_INT 4
70253: NEG
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 2
70261: NEG
70262: PUSH
70263: LD_INT 4
70265: NEG
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 4
70273: NEG
70274: PUSH
70275: LD_INT 2
70277: NEG
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 0
70285: PUSH
70286: LD_INT 4
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 0
70296: PUSH
70297: LD_INT 5
70299: NEG
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 1
70307: PUSH
70308: LD_INT 4
70310: NEG
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 1
70318: PUSH
70319: LD_INT 3
70321: NEG
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 0
70329: PUSH
70330: LD_INT 3
70332: NEG
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 1
70340: NEG
70341: PUSH
70342: LD_INT 4
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 1
70352: NEG
70353: PUSH
70354: LD_INT 5
70356: NEG
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 2
70364: PUSH
70365: LD_INT 3
70367: NEG
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 2
70375: NEG
70376: PUSH
70377: LD_INT 5
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70432: LD_ADDR_VAR 0 31
70436: PUSH
70437: LD_INT 0
70439: PUSH
70440: LD_INT 4
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 0
70449: PUSH
70450: LD_INT 3
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 1
70459: PUSH
70460: LD_INT 4
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 1
70469: PUSH
70470: LD_INT 5
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: LD_INT 5
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 1
70489: NEG
70490: PUSH
70491: LD_INT 4
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 1
70500: NEG
70501: PUSH
70502: LD_INT 3
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 2
70511: PUSH
70512: LD_INT 5
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 2
70521: NEG
70522: PUSH
70523: LD_INT 3
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 3
70532: NEG
70533: PUSH
70534: LD_INT 0
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 3
70543: NEG
70544: PUSH
70545: LD_INT 1
70547: NEG
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 2
70555: NEG
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 2
70566: NEG
70567: PUSH
70568: LD_INT 1
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 3
70577: NEG
70578: PUSH
70579: LD_INT 1
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 4
70588: NEG
70589: PUSH
70590: LD_INT 0
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 4
70599: NEG
70600: PUSH
70601: LD_INT 1
70603: NEG
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 4
70611: NEG
70612: PUSH
70613: LD_INT 2
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 2
70623: NEG
70624: PUSH
70625: LD_INT 2
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 4
70634: NEG
70635: PUSH
70636: LD_INT 4
70638: NEG
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 4
70646: NEG
70647: PUSH
70648: LD_INT 5
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 3
70658: NEG
70659: PUSH
70660: LD_INT 4
70662: NEG
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 3
70670: NEG
70671: PUSH
70672: LD_INT 3
70674: NEG
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 4
70682: NEG
70683: PUSH
70684: LD_INT 3
70686: NEG
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 5
70694: NEG
70695: PUSH
70696: LD_INT 4
70698: NEG
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 5
70706: NEG
70707: PUSH
70708: LD_INT 5
70710: NEG
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 3
70718: NEG
70719: PUSH
70720: LD_INT 5
70722: NEG
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 5
70730: NEG
70731: PUSH
70732: LD_INT 3
70734: NEG
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 0
70742: PUSH
70743: LD_INT 3
70745: NEG
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 0
70753: PUSH
70754: LD_INT 4
70756: NEG
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 1
70764: PUSH
70765: LD_INT 3
70767: NEG
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 1
70775: PUSH
70776: LD_INT 2
70778: NEG
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 0
70786: PUSH
70787: LD_INT 2
70789: NEG
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 1
70797: NEG
70798: PUSH
70799: LD_INT 3
70801: NEG
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 1
70809: NEG
70810: PUSH
70811: LD_INT 4
70813: NEG
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 2
70821: PUSH
70822: LD_INT 2
70824: NEG
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 2
70832: NEG
70833: PUSH
70834: LD_INT 4
70836: NEG
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 4
70844: PUSH
70845: LD_INT 0
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 4
70854: PUSH
70855: LD_INT 1
70857: NEG
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 5
70865: PUSH
70866: LD_INT 0
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 5
70875: PUSH
70876: LD_INT 1
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 4
70885: PUSH
70886: LD_INT 1
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: LD_INT 3
70895: PUSH
70896: LD_INT 0
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 3
70905: PUSH
70906: LD_INT 1
70908: NEG
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PUSH
70914: LD_INT 3
70916: PUSH
70917: LD_INT 2
70919: NEG
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: LD_INT 5
70927: PUSH
70928: LD_INT 2
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70982: LD_ADDR_VAR 0 32
70986: PUSH
70987: LD_INT 4
70989: NEG
70990: PUSH
70991: LD_INT 0
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 4
71000: NEG
71001: PUSH
71002: LD_INT 1
71004: NEG
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 3
71012: NEG
71013: PUSH
71014: LD_INT 0
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 3
71023: NEG
71024: PUSH
71025: LD_INT 1
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 4
71034: NEG
71035: PUSH
71036: LD_INT 1
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 5
71045: NEG
71046: PUSH
71047: LD_INT 0
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 5
71056: NEG
71057: PUSH
71058: LD_INT 1
71060: NEG
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 5
71068: NEG
71069: PUSH
71070: LD_INT 2
71072: NEG
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 3
71080: NEG
71081: PUSH
71082: LD_INT 2
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 3
71091: NEG
71092: PUSH
71093: LD_INT 3
71095: NEG
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 3
71103: NEG
71104: PUSH
71105: LD_INT 4
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 2
71115: NEG
71116: PUSH
71117: LD_INT 3
71119: NEG
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 2
71127: NEG
71128: PUSH
71129: LD_INT 2
71131: NEG
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 3
71139: NEG
71140: PUSH
71141: LD_INT 2
71143: NEG
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 4
71151: NEG
71152: PUSH
71153: LD_INT 3
71155: NEG
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 4
71163: NEG
71164: PUSH
71165: LD_INT 4
71167: NEG
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 2
71175: NEG
71176: PUSH
71177: LD_INT 4
71179: NEG
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 4
71187: NEG
71188: PUSH
71189: LD_INT 2
71191: NEG
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 0
71199: PUSH
71200: LD_INT 4
71202: NEG
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 0
71210: PUSH
71211: LD_INT 5
71213: NEG
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: LD_INT 1
71221: PUSH
71222: LD_INT 4
71224: NEG
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 1
71232: PUSH
71233: LD_INT 3
71235: NEG
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 0
71243: PUSH
71244: LD_INT 3
71246: NEG
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 1
71254: NEG
71255: PUSH
71256: LD_INT 4
71258: NEG
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 1
71266: NEG
71267: PUSH
71268: LD_INT 5
71270: NEG
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 2
71278: PUSH
71279: LD_INT 3
71281: NEG
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 2
71289: NEG
71290: PUSH
71291: LD_INT 5
71293: NEG
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 3
71301: PUSH
71302: LD_INT 0
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 3
71311: PUSH
71312: LD_INT 1
71314: NEG
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 4
71322: PUSH
71323: LD_INT 0
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 4
71332: PUSH
71333: LD_INT 1
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 3
71342: PUSH
71343: LD_INT 1
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 2
71352: PUSH
71353: LD_INT 0
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 2
71362: PUSH
71363: LD_INT 1
71365: NEG
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 2
71373: PUSH
71374: LD_INT 2
71376: NEG
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 4
71384: PUSH
71385: LD_INT 2
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 4
71394: PUSH
71395: LD_INT 4
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 4
71404: PUSH
71405: LD_INT 3
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 5
71414: PUSH
71415: LD_INT 4
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 5
71424: PUSH
71425: LD_INT 5
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 4
71434: PUSH
71435: LD_INT 5
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 3
71444: PUSH
71445: LD_INT 4
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 3
71454: PUSH
71455: LD_INT 3
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PUSH
71462: LD_INT 5
71464: PUSH
71465: LD_INT 3
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 3
71474: PUSH
71475: LD_INT 5
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71529: LD_ADDR_VAR 0 33
71533: PUSH
71534: LD_INT 4
71536: NEG
71537: PUSH
71538: LD_INT 4
71540: NEG
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 4
71548: NEG
71549: PUSH
71550: LD_INT 5
71552: NEG
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 3
71560: NEG
71561: PUSH
71562: LD_INT 4
71564: NEG
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 3
71572: NEG
71573: PUSH
71574: LD_INT 3
71576: NEG
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 4
71584: NEG
71585: PUSH
71586: LD_INT 3
71588: NEG
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 5
71596: NEG
71597: PUSH
71598: LD_INT 4
71600: NEG
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 5
71608: NEG
71609: PUSH
71610: LD_INT 5
71612: NEG
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 3
71620: NEG
71621: PUSH
71622: LD_INT 5
71624: NEG
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 5
71632: NEG
71633: PUSH
71634: LD_INT 3
71636: NEG
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_INT 0
71644: PUSH
71645: LD_INT 3
71647: NEG
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 0
71655: PUSH
71656: LD_INT 4
71658: NEG
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 1
71666: PUSH
71667: LD_INT 3
71669: NEG
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 1
71677: PUSH
71678: LD_INT 2
71680: NEG
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 0
71688: PUSH
71689: LD_INT 2
71691: NEG
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PUSH
71697: LD_INT 1
71699: NEG
71700: PUSH
71701: LD_INT 3
71703: NEG
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 1
71711: NEG
71712: PUSH
71713: LD_INT 4
71715: NEG
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 2
71723: PUSH
71724: LD_INT 2
71726: NEG
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 2
71734: NEG
71735: PUSH
71736: LD_INT 4
71738: NEG
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 4
71746: PUSH
71747: LD_INT 0
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 4
71756: PUSH
71757: LD_INT 1
71759: NEG
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 5
71767: PUSH
71768: LD_INT 0
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 5
71777: PUSH
71778: LD_INT 1
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 4
71787: PUSH
71788: LD_INT 1
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 3
71797: PUSH
71798: LD_INT 0
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 3
71807: PUSH
71808: LD_INT 1
71810: NEG
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: LD_INT 3
71818: PUSH
71819: LD_INT 2
71821: NEG
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 5
71829: PUSH
71830: LD_INT 2
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 3
71839: PUSH
71840: LD_INT 3
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 3
71849: PUSH
71850: LD_INT 2
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 4
71859: PUSH
71860: LD_INT 3
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 4
71869: PUSH
71870: LD_INT 4
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 3
71879: PUSH
71880: LD_INT 4
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_INT 2
71889: PUSH
71890: LD_INT 3
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 2
71899: PUSH
71900: LD_INT 2
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: PUSH
71907: LD_INT 4
71909: PUSH
71910: LD_INT 2
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: LD_INT 2
71919: PUSH
71920: LD_INT 4
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 0
71929: PUSH
71930: LD_INT 4
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 0
71939: PUSH
71940: LD_INT 3
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 1
71949: PUSH
71950: LD_INT 4
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 1
71959: PUSH
71960: LD_INT 5
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 0
71969: PUSH
71970: LD_INT 5
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 1
71979: NEG
71980: PUSH
71981: LD_INT 4
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: PUSH
71988: LD_INT 1
71990: NEG
71991: PUSH
71992: LD_INT 3
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 2
72001: PUSH
72002: LD_INT 5
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 2
72011: NEG
72012: PUSH
72013: LD_INT 3
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72067: LD_ADDR_VAR 0 34
72071: PUSH
72072: LD_INT 0
72074: PUSH
72075: LD_INT 4
72077: NEG
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 0
72085: PUSH
72086: LD_INT 5
72088: NEG
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 1
72096: PUSH
72097: LD_INT 4
72099: NEG
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 1
72107: PUSH
72108: LD_INT 3
72110: NEG
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 0
72118: PUSH
72119: LD_INT 3
72121: NEG
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PUSH
72127: LD_INT 1
72129: NEG
72130: PUSH
72131: LD_INT 4
72133: NEG
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: PUSH
72139: LD_INT 1
72141: NEG
72142: PUSH
72143: LD_INT 5
72145: NEG
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 2
72153: PUSH
72154: LD_INT 3
72156: NEG
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 2
72164: NEG
72165: PUSH
72166: LD_INT 5
72168: NEG
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 3
72176: PUSH
72177: LD_INT 0
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: LD_INT 3
72186: PUSH
72187: LD_INT 1
72189: NEG
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 4
72197: PUSH
72198: LD_INT 0
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 4
72207: PUSH
72208: LD_INT 1
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 3
72217: PUSH
72218: LD_INT 1
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 2
72227: PUSH
72228: LD_INT 0
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 2
72237: PUSH
72238: LD_INT 1
72240: NEG
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: PUSH
72246: LD_INT 2
72248: PUSH
72249: LD_INT 2
72251: NEG
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 4
72259: PUSH
72260: LD_INT 2
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 4
72269: PUSH
72270: LD_INT 4
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 4
72279: PUSH
72280: LD_INT 3
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 5
72289: PUSH
72290: LD_INT 4
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 5
72299: PUSH
72300: LD_INT 5
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_INT 4
72309: PUSH
72310: LD_INT 5
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 3
72319: PUSH
72320: LD_INT 4
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 3
72329: PUSH
72330: LD_INT 3
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: LD_INT 5
72339: PUSH
72340: LD_INT 3
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: PUSH
72347: LD_INT 3
72349: PUSH
72350: LD_INT 5
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 0
72359: PUSH
72360: LD_INT 3
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 0
72369: PUSH
72370: LD_INT 2
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: PUSH
72377: LD_INT 1
72379: PUSH
72380: LD_INT 3
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 1
72389: PUSH
72390: LD_INT 4
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 0
72399: PUSH
72400: LD_INT 4
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 1
72409: NEG
72410: PUSH
72411: LD_INT 3
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 1
72420: NEG
72421: PUSH
72422: LD_INT 2
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 2
72431: PUSH
72432: LD_INT 4
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 2
72441: NEG
72442: PUSH
72443: LD_INT 2
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 4
72452: NEG
72453: PUSH
72454: LD_INT 0
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 4
72463: NEG
72464: PUSH
72465: LD_INT 1
72467: NEG
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 3
72475: NEG
72476: PUSH
72477: LD_INT 0
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 3
72486: NEG
72487: PUSH
72488: LD_INT 1
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 4
72497: NEG
72498: PUSH
72499: LD_INT 1
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PUSH
72506: LD_INT 5
72508: NEG
72509: PUSH
72510: LD_INT 0
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 5
72519: NEG
72520: PUSH
72521: LD_INT 1
72523: NEG
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 5
72531: NEG
72532: PUSH
72533: LD_INT 2
72535: NEG
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: PUSH
72541: LD_INT 3
72543: NEG
72544: PUSH
72545: LD_INT 2
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: ST_TO_ADDR
// end ; end ;
72599: GO 72602
72601: POP
// case btype of b_depot , b_warehouse :
72602: LD_VAR 0 1
72606: PUSH
72607: LD_INT 0
72609: DOUBLE
72610: EQUAL
72611: IFTRUE 72621
72613: LD_INT 1
72615: DOUBLE
72616: EQUAL
72617: IFTRUE 72621
72619: GO 72822
72621: POP
// case nation of nation_american :
72622: LD_VAR 0 5
72626: PUSH
72627: LD_INT 1
72629: DOUBLE
72630: EQUAL
72631: IFTRUE 72635
72633: GO 72691
72635: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72636: LD_ADDR_VAR 0 9
72640: PUSH
72641: LD_VAR 0 11
72645: PUSH
72646: LD_VAR 0 12
72650: PUSH
72651: LD_VAR 0 13
72655: PUSH
72656: LD_VAR 0 14
72660: PUSH
72661: LD_VAR 0 15
72665: PUSH
72666: LD_VAR 0 16
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: PUSH
72679: LD_VAR 0 4
72683: PUSH
72684: LD_INT 1
72686: PLUS
72687: ARRAY
72688: ST_TO_ADDR
72689: GO 72820
72691: LD_INT 2
72693: DOUBLE
72694: EQUAL
72695: IFTRUE 72699
72697: GO 72755
72699: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72700: LD_ADDR_VAR 0 9
72704: PUSH
72705: LD_VAR 0 17
72709: PUSH
72710: LD_VAR 0 18
72714: PUSH
72715: LD_VAR 0 19
72719: PUSH
72720: LD_VAR 0 20
72724: PUSH
72725: LD_VAR 0 21
72729: PUSH
72730: LD_VAR 0 22
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: PUSH
72743: LD_VAR 0 4
72747: PUSH
72748: LD_INT 1
72750: PLUS
72751: ARRAY
72752: ST_TO_ADDR
72753: GO 72820
72755: LD_INT 3
72757: DOUBLE
72758: EQUAL
72759: IFTRUE 72763
72761: GO 72819
72763: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72764: LD_ADDR_VAR 0 9
72768: PUSH
72769: LD_VAR 0 23
72773: PUSH
72774: LD_VAR 0 24
72778: PUSH
72779: LD_VAR 0 25
72783: PUSH
72784: LD_VAR 0 26
72788: PUSH
72789: LD_VAR 0 27
72793: PUSH
72794: LD_VAR 0 28
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: PUSH
72807: LD_VAR 0 4
72811: PUSH
72812: LD_INT 1
72814: PLUS
72815: ARRAY
72816: ST_TO_ADDR
72817: GO 72820
72819: POP
72820: GO 73375
72822: LD_INT 2
72824: DOUBLE
72825: EQUAL
72826: IFTRUE 72836
72828: LD_INT 3
72830: DOUBLE
72831: EQUAL
72832: IFTRUE 72836
72834: GO 72892
72836: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72837: LD_ADDR_VAR 0 9
72841: PUSH
72842: LD_VAR 0 29
72846: PUSH
72847: LD_VAR 0 30
72851: PUSH
72852: LD_VAR 0 31
72856: PUSH
72857: LD_VAR 0 32
72861: PUSH
72862: LD_VAR 0 33
72866: PUSH
72867: LD_VAR 0 34
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: PUSH
72880: LD_VAR 0 4
72884: PUSH
72885: LD_INT 1
72887: PLUS
72888: ARRAY
72889: ST_TO_ADDR
72890: GO 73375
72892: LD_INT 16
72894: DOUBLE
72895: EQUAL
72896: IFTRUE 72954
72898: LD_INT 17
72900: DOUBLE
72901: EQUAL
72902: IFTRUE 72954
72904: LD_INT 18
72906: DOUBLE
72907: EQUAL
72908: IFTRUE 72954
72910: LD_INT 19
72912: DOUBLE
72913: EQUAL
72914: IFTRUE 72954
72916: LD_INT 22
72918: DOUBLE
72919: EQUAL
72920: IFTRUE 72954
72922: LD_INT 20
72924: DOUBLE
72925: EQUAL
72926: IFTRUE 72954
72928: LD_INT 21
72930: DOUBLE
72931: EQUAL
72932: IFTRUE 72954
72934: LD_INT 23
72936: DOUBLE
72937: EQUAL
72938: IFTRUE 72954
72940: LD_INT 24
72942: DOUBLE
72943: EQUAL
72944: IFTRUE 72954
72946: LD_INT 25
72948: DOUBLE
72949: EQUAL
72950: IFTRUE 72954
72952: GO 73010
72954: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72955: LD_ADDR_VAR 0 9
72959: PUSH
72960: LD_VAR 0 35
72964: PUSH
72965: LD_VAR 0 36
72969: PUSH
72970: LD_VAR 0 37
72974: PUSH
72975: LD_VAR 0 38
72979: PUSH
72980: LD_VAR 0 39
72984: PUSH
72985: LD_VAR 0 40
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: LIST
72997: PUSH
72998: LD_VAR 0 4
73002: PUSH
73003: LD_INT 1
73005: PLUS
73006: ARRAY
73007: ST_TO_ADDR
73008: GO 73375
73010: LD_INT 6
73012: DOUBLE
73013: EQUAL
73014: IFTRUE 73066
73016: LD_INT 7
73018: DOUBLE
73019: EQUAL
73020: IFTRUE 73066
73022: LD_INT 8
73024: DOUBLE
73025: EQUAL
73026: IFTRUE 73066
73028: LD_INT 13
73030: DOUBLE
73031: EQUAL
73032: IFTRUE 73066
73034: LD_INT 12
73036: DOUBLE
73037: EQUAL
73038: IFTRUE 73066
73040: LD_INT 15
73042: DOUBLE
73043: EQUAL
73044: IFTRUE 73066
73046: LD_INT 11
73048: DOUBLE
73049: EQUAL
73050: IFTRUE 73066
73052: LD_INT 14
73054: DOUBLE
73055: EQUAL
73056: IFTRUE 73066
73058: LD_INT 10
73060: DOUBLE
73061: EQUAL
73062: IFTRUE 73066
73064: GO 73122
73066: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73067: LD_ADDR_VAR 0 9
73071: PUSH
73072: LD_VAR 0 41
73076: PUSH
73077: LD_VAR 0 42
73081: PUSH
73082: LD_VAR 0 43
73086: PUSH
73087: LD_VAR 0 44
73091: PUSH
73092: LD_VAR 0 45
73096: PUSH
73097: LD_VAR 0 46
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: PUSH
73110: LD_VAR 0 4
73114: PUSH
73115: LD_INT 1
73117: PLUS
73118: ARRAY
73119: ST_TO_ADDR
73120: GO 73375
73122: LD_INT 36
73124: DOUBLE
73125: EQUAL
73126: IFTRUE 73130
73128: GO 73186
73130: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73131: LD_ADDR_VAR 0 9
73135: PUSH
73136: LD_VAR 0 47
73140: PUSH
73141: LD_VAR 0 48
73145: PUSH
73146: LD_VAR 0 49
73150: PUSH
73151: LD_VAR 0 50
73155: PUSH
73156: LD_VAR 0 51
73160: PUSH
73161: LD_VAR 0 52
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: PUSH
73174: LD_VAR 0 4
73178: PUSH
73179: LD_INT 1
73181: PLUS
73182: ARRAY
73183: ST_TO_ADDR
73184: GO 73375
73186: LD_INT 4
73188: DOUBLE
73189: EQUAL
73190: IFTRUE 73212
73192: LD_INT 5
73194: DOUBLE
73195: EQUAL
73196: IFTRUE 73212
73198: LD_INT 34
73200: DOUBLE
73201: EQUAL
73202: IFTRUE 73212
73204: LD_INT 37
73206: DOUBLE
73207: EQUAL
73208: IFTRUE 73212
73210: GO 73268
73212: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73213: LD_ADDR_VAR 0 9
73217: PUSH
73218: LD_VAR 0 53
73222: PUSH
73223: LD_VAR 0 54
73227: PUSH
73228: LD_VAR 0 55
73232: PUSH
73233: LD_VAR 0 56
73237: PUSH
73238: LD_VAR 0 57
73242: PUSH
73243: LD_VAR 0 58
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: PUSH
73256: LD_VAR 0 4
73260: PUSH
73261: LD_INT 1
73263: PLUS
73264: ARRAY
73265: ST_TO_ADDR
73266: GO 73375
73268: LD_INT 31
73270: DOUBLE
73271: EQUAL
73272: IFTRUE 73318
73274: LD_INT 32
73276: DOUBLE
73277: EQUAL
73278: IFTRUE 73318
73280: LD_INT 33
73282: DOUBLE
73283: EQUAL
73284: IFTRUE 73318
73286: LD_INT 27
73288: DOUBLE
73289: EQUAL
73290: IFTRUE 73318
73292: LD_INT 26
73294: DOUBLE
73295: EQUAL
73296: IFTRUE 73318
73298: LD_INT 28
73300: DOUBLE
73301: EQUAL
73302: IFTRUE 73318
73304: LD_INT 29
73306: DOUBLE
73307: EQUAL
73308: IFTRUE 73318
73310: LD_INT 30
73312: DOUBLE
73313: EQUAL
73314: IFTRUE 73318
73316: GO 73374
73318: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73319: LD_ADDR_VAR 0 9
73323: PUSH
73324: LD_VAR 0 59
73328: PUSH
73329: LD_VAR 0 60
73333: PUSH
73334: LD_VAR 0 61
73338: PUSH
73339: LD_VAR 0 62
73343: PUSH
73344: LD_VAR 0 63
73348: PUSH
73349: LD_VAR 0 64
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: PUSH
73362: LD_VAR 0 4
73366: PUSH
73367: LD_INT 1
73369: PLUS
73370: ARRAY
73371: ST_TO_ADDR
73372: GO 73375
73374: POP
// temp_list2 = [ ] ;
73375: LD_ADDR_VAR 0 10
73379: PUSH
73380: EMPTY
73381: ST_TO_ADDR
// for i in temp_list do
73382: LD_ADDR_VAR 0 8
73386: PUSH
73387: LD_VAR 0 9
73391: PUSH
73392: FOR_IN
73393: IFFALSE 73445
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73395: LD_ADDR_VAR 0 10
73399: PUSH
73400: LD_VAR 0 10
73404: PUSH
73405: LD_VAR 0 8
73409: PUSH
73410: LD_INT 1
73412: ARRAY
73413: PUSH
73414: LD_VAR 0 2
73418: PLUS
73419: PUSH
73420: LD_VAR 0 8
73424: PUSH
73425: LD_INT 2
73427: ARRAY
73428: PUSH
73429: LD_VAR 0 3
73433: PLUS
73434: PUSH
73435: EMPTY
73436: LIST
73437: LIST
73438: PUSH
73439: EMPTY
73440: LIST
73441: ADD
73442: ST_TO_ADDR
73443: GO 73392
73445: POP
73446: POP
// result = temp_list2 ;
73447: LD_ADDR_VAR 0 7
73451: PUSH
73452: LD_VAR 0 10
73456: ST_TO_ADDR
// end ;
73457: LD_VAR 0 7
73461: RET
// export function EnemyInRange ( unit , dist ) ; begin
73462: LD_INT 0
73464: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73465: LD_ADDR_VAR 0 3
73469: PUSH
73470: LD_VAR 0 1
73474: PPUSH
73475: CALL_OW 255
73479: PPUSH
73480: LD_VAR 0 1
73484: PPUSH
73485: CALL_OW 250
73489: PPUSH
73490: LD_VAR 0 1
73494: PPUSH
73495: CALL_OW 251
73499: PPUSH
73500: LD_VAR 0 2
73504: PPUSH
73505: CALL 46835 0 4
73509: PUSH
73510: LD_INT 4
73512: ARRAY
73513: ST_TO_ADDR
// end ;
73514: LD_VAR 0 3
73518: RET
// export function PlayerSeeMe ( unit ) ; begin
73519: LD_INT 0
73521: PPUSH
// result := See ( your_side , unit ) ;
73522: LD_ADDR_VAR 0 2
73526: PUSH
73527: LD_OWVAR 2
73531: PPUSH
73532: LD_VAR 0 1
73536: PPUSH
73537: CALL_OW 292
73541: ST_TO_ADDR
// end ;
73542: LD_VAR 0 2
73546: RET
// export function ReverseDir ( unit ) ; begin
73547: LD_INT 0
73549: PPUSH
// if not unit then
73550: LD_VAR 0 1
73554: NOT
73555: IFFALSE 73559
// exit ;
73557: GO 73582
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73559: LD_ADDR_VAR 0 2
73563: PUSH
73564: LD_VAR 0 1
73568: PPUSH
73569: CALL_OW 254
73573: PUSH
73574: LD_INT 3
73576: PLUS
73577: PUSH
73578: LD_INT 6
73580: MOD
73581: ST_TO_ADDR
// end ;
73582: LD_VAR 0 2
73586: RET
// export function ReverseArray ( array ) ; var i ; begin
73587: LD_INT 0
73589: PPUSH
73590: PPUSH
// if not array then
73591: LD_VAR 0 1
73595: NOT
73596: IFFALSE 73600
// exit ;
73598: GO 73655
// result := [ ] ;
73600: LD_ADDR_VAR 0 2
73604: PUSH
73605: EMPTY
73606: ST_TO_ADDR
// for i := array downto 1 do
73607: LD_ADDR_VAR 0 3
73611: PUSH
73612: DOUBLE
73613: LD_VAR 0 1
73617: INC
73618: ST_TO_ADDR
73619: LD_INT 1
73621: PUSH
73622: FOR_DOWNTO
73623: IFFALSE 73653
// result := Join ( result , array [ i ] ) ;
73625: LD_ADDR_VAR 0 2
73629: PUSH
73630: LD_VAR 0 2
73634: PPUSH
73635: LD_VAR 0 1
73639: PUSH
73640: LD_VAR 0 3
73644: ARRAY
73645: PPUSH
73646: CALL 78311 0 2
73650: ST_TO_ADDR
73651: GO 73622
73653: POP
73654: POP
// end ;
73655: LD_VAR 0 2
73659: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73660: LD_INT 0
73662: PPUSH
73663: PPUSH
73664: PPUSH
73665: PPUSH
73666: PPUSH
73667: PPUSH
// if not unit or not hexes then
73668: LD_VAR 0 1
73672: NOT
73673: PUSH
73674: LD_VAR 0 2
73678: NOT
73679: OR
73680: IFFALSE 73684
// exit ;
73682: GO 73807
// dist := 9999 ;
73684: LD_ADDR_VAR 0 5
73688: PUSH
73689: LD_INT 9999
73691: ST_TO_ADDR
// for i = 1 to hexes do
73692: LD_ADDR_VAR 0 4
73696: PUSH
73697: DOUBLE
73698: LD_INT 1
73700: DEC
73701: ST_TO_ADDR
73702: LD_VAR 0 2
73706: PUSH
73707: FOR_TO
73708: IFFALSE 73795
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73710: LD_ADDR_VAR 0 6
73714: PUSH
73715: LD_VAR 0 1
73719: PPUSH
73720: LD_VAR 0 2
73724: PUSH
73725: LD_VAR 0 4
73729: ARRAY
73730: PUSH
73731: LD_INT 1
73733: ARRAY
73734: PPUSH
73735: LD_VAR 0 2
73739: PUSH
73740: LD_VAR 0 4
73744: ARRAY
73745: PUSH
73746: LD_INT 2
73748: ARRAY
73749: PPUSH
73750: CALL_OW 297
73754: ST_TO_ADDR
// if tdist < dist then
73755: LD_VAR 0 6
73759: PUSH
73760: LD_VAR 0 5
73764: LESS
73765: IFFALSE 73793
// begin hex := hexes [ i ] ;
73767: LD_ADDR_VAR 0 8
73771: PUSH
73772: LD_VAR 0 2
73776: PUSH
73777: LD_VAR 0 4
73781: ARRAY
73782: ST_TO_ADDR
// dist := tdist ;
73783: LD_ADDR_VAR 0 5
73787: PUSH
73788: LD_VAR 0 6
73792: ST_TO_ADDR
// end ; end ;
73793: GO 73707
73795: POP
73796: POP
// result := hex ;
73797: LD_ADDR_VAR 0 3
73801: PUSH
73802: LD_VAR 0 8
73806: ST_TO_ADDR
// end ;
73807: LD_VAR 0 3
73811: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73812: LD_INT 0
73814: PPUSH
73815: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73816: LD_VAR 0 1
73820: NOT
73821: PUSH
73822: LD_VAR 0 1
73826: PUSH
73827: LD_INT 21
73829: PUSH
73830: LD_INT 2
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: LD_INT 23
73839: PUSH
73840: LD_INT 2
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: PPUSH
73851: CALL_OW 69
73855: IN
73856: NOT
73857: OR
73858: IFFALSE 73862
// exit ;
73860: GO 73909
// for i = 1 to 3 do
73862: LD_ADDR_VAR 0 3
73866: PUSH
73867: DOUBLE
73868: LD_INT 1
73870: DEC
73871: ST_TO_ADDR
73872: LD_INT 3
73874: PUSH
73875: FOR_TO
73876: IFFALSE 73907
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73878: LD_VAR 0 1
73882: PPUSH
73883: CALL_OW 250
73887: PPUSH
73888: LD_VAR 0 1
73892: PPUSH
73893: CALL_OW 251
73897: PPUSH
73898: LD_INT 1
73900: PPUSH
73901: CALL_OW 453
73905: GO 73875
73907: POP
73908: POP
// end ;
73909: LD_VAR 0 2
73913: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73914: LD_INT 0
73916: PPUSH
73917: PPUSH
73918: PPUSH
73919: PPUSH
73920: PPUSH
73921: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73922: LD_VAR 0 1
73926: NOT
73927: PUSH
73928: LD_VAR 0 2
73932: NOT
73933: OR
73934: PUSH
73935: LD_VAR 0 1
73939: PPUSH
73940: CALL_OW 314
73944: OR
73945: IFFALSE 73949
// exit ;
73947: GO 74416
// if GetLives ( i ) < 250 then
73949: LD_VAR 0 4
73953: PPUSH
73954: CALL_OW 256
73958: PUSH
73959: LD_INT 250
73961: LESS
73962: IFFALSE 73975
// begin ComAutodestruct ( i ) ;
73964: LD_VAR 0 4
73968: PPUSH
73969: CALL 73812 0 1
// exit ;
73973: GO 74416
// end ; x := GetX ( enemy_unit ) ;
73975: LD_ADDR_VAR 0 7
73979: PUSH
73980: LD_VAR 0 2
73984: PPUSH
73985: CALL_OW 250
73989: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73990: LD_ADDR_VAR 0 8
73994: PUSH
73995: LD_VAR 0 2
73999: PPUSH
74000: CALL_OW 251
74004: ST_TO_ADDR
// if not x or not y then
74005: LD_VAR 0 7
74009: NOT
74010: PUSH
74011: LD_VAR 0 8
74015: NOT
74016: OR
74017: IFFALSE 74021
// exit ;
74019: GO 74416
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74021: LD_ADDR_VAR 0 6
74025: PUSH
74026: LD_VAR 0 7
74030: PPUSH
74031: LD_INT 0
74033: PPUSH
74034: LD_INT 4
74036: PPUSH
74037: CALL_OW 272
74041: PUSH
74042: LD_VAR 0 8
74046: PPUSH
74047: LD_INT 0
74049: PPUSH
74050: LD_INT 4
74052: PPUSH
74053: CALL_OW 273
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PUSH
74062: LD_VAR 0 7
74066: PPUSH
74067: LD_INT 1
74069: PPUSH
74070: LD_INT 4
74072: PPUSH
74073: CALL_OW 272
74077: PUSH
74078: LD_VAR 0 8
74082: PPUSH
74083: LD_INT 1
74085: PPUSH
74086: LD_INT 4
74088: PPUSH
74089: CALL_OW 273
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: PUSH
74098: LD_VAR 0 7
74102: PPUSH
74103: LD_INT 2
74105: PPUSH
74106: LD_INT 4
74108: PPUSH
74109: CALL_OW 272
74113: PUSH
74114: LD_VAR 0 8
74118: PPUSH
74119: LD_INT 2
74121: PPUSH
74122: LD_INT 4
74124: PPUSH
74125: CALL_OW 273
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: LD_VAR 0 7
74138: PPUSH
74139: LD_INT 3
74141: PPUSH
74142: LD_INT 4
74144: PPUSH
74145: CALL_OW 272
74149: PUSH
74150: LD_VAR 0 8
74154: PPUSH
74155: LD_INT 3
74157: PPUSH
74158: LD_INT 4
74160: PPUSH
74161: CALL_OW 273
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PUSH
74170: LD_VAR 0 7
74174: PPUSH
74175: LD_INT 4
74177: PPUSH
74178: LD_INT 4
74180: PPUSH
74181: CALL_OW 272
74185: PUSH
74186: LD_VAR 0 8
74190: PPUSH
74191: LD_INT 4
74193: PPUSH
74194: LD_INT 4
74196: PPUSH
74197: CALL_OW 273
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_VAR 0 7
74210: PPUSH
74211: LD_INT 5
74213: PPUSH
74214: LD_INT 4
74216: PPUSH
74217: CALL_OW 272
74221: PUSH
74222: LD_VAR 0 8
74226: PPUSH
74227: LD_INT 5
74229: PPUSH
74230: LD_INT 4
74232: PPUSH
74233: CALL_OW 273
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: ST_TO_ADDR
// for i = tmp downto 1 do
74250: LD_ADDR_VAR 0 4
74254: PUSH
74255: DOUBLE
74256: LD_VAR 0 6
74260: INC
74261: ST_TO_ADDR
74262: LD_INT 1
74264: PUSH
74265: FOR_DOWNTO
74266: IFFALSE 74367
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74268: LD_VAR 0 6
74272: PUSH
74273: LD_VAR 0 4
74277: ARRAY
74278: PUSH
74279: LD_INT 1
74281: ARRAY
74282: PPUSH
74283: LD_VAR 0 6
74287: PUSH
74288: LD_VAR 0 4
74292: ARRAY
74293: PUSH
74294: LD_INT 2
74296: ARRAY
74297: PPUSH
74298: CALL_OW 488
74302: NOT
74303: PUSH
74304: LD_VAR 0 6
74308: PUSH
74309: LD_VAR 0 4
74313: ARRAY
74314: PUSH
74315: LD_INT 1
74317: ARRAY
74318: PPUSH
74319: LD_VAR 0 6
74323: PUSH
74324: LD_VAR 0 4
74328: ARRAY
74329: PUSH
74330: LD_INT 2
74332: ARRAY
74333: PPUSH
74334: CALL_OW 428
74338: PUSH
74339: LD_INT 0
74341: NONEQUAL
74342: OR
74343: IFFALSE 74365
// tmp := Delete ( tmp , i ) ;
74345: LD_ADDR_VAR 0 6
74349: PUSH
74350: LD_VAR 0 6
74354: PPUSH
74355: LD_VAR 0 4
74359: PPUSH
74360: CALL_OW 3
74364: ST_TO_ADDR
74365: GO 74265
74367: POP
74368: POP
// j := GetClosestHex ( unit , tmp ) ;
74369: LD_ADDR_VAR 0 5
74373: PUSH
74374: LD_VAR 0 1
74378: PPUSH
74379: LD_VAR 0 6
74383: PPUSH
74384: CALL 73660 0 2
74388: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74389: LD_VAR 0 1
74393: PPUSH
74394: LD_VAR 0 5
74398: PUSH
74399: LD_INT 1
74401: ARRAY
74402: PPUSH
74403: LD_VAR 0 5
74407: PUSH
74408: LD_INT 2
74410: ARRAY
74411: PPUSH
74412: CALL_OW 111
// end ;
74416: LD_VAR 0 3
74420: RET
// export function PrepareApemanSoldier ( ) ; begin
74421: LD_INT 0
74423: PPUSH
// uc_nation := 0 ;
74424: LD_ADDR_OWVAR 21
74428: PUSH
74429: LD_INT 0
74431: ST_TO_ADDR
// hc_sex := sex_male ;
74432: LD_ADDR_OWVAR 27
74436: PUSH
74437: LD_INT 1
74439: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74440: LD_ADDR_OWVAR 28
74444: PUSH
74445: LD_INT 15
74447: ST_TO_ADDR
// hc_gallery :=  ;
74448: LD_ADDR_OWVAR 33
74452: PUSH
74453: LD_STRING 
74455: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74456: LD_ADDR_OWVAR 31
74460: PUSH
74461: LD_INT 0
74463: PPUSH
74464: LD_INT 3
74466: PPUSH
74467: CALL_OW 12
74471: PUSH
74472: LD_INT 0
74474: PPUSH
74475: LD_INT 3
74477: PPUSH
74478: CALL_OW 12
74482: PUSH
74483: LD_INT 0
74485: PUSH
74486: LD_INT 0
74488: PUSH
74489: EMPTY
74490: LIST
74491: LIST
74492: LIST
74493: LIST
74494: ST_TO_ADDR
// end ;
74495: LD_VAR 0 1
74499: RET
// export function PrepareApemanEngineer ( ) ; begin
74500: LD_INT 0
74502: PPUSH
// uc_nation := 0 ;
74503: LD_ADDR_OWVAR 21
74507: PUSH
74508: LD_INT 0
74510: ST_TO_ADDR
// hc_sex := sex_male ;
74511: LD_ADDR_OWVAR 27
74515: PUSH
74516: LD_INT 1
74518: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74519: LD_ADDR_OWVAR 28
74523: PUSH
74524: LD_INT 16
74526: ST_TO_ADDR
// hc_gallery :=  ;
74527: LD_ADDR_OWVAR 33
74531: PUSH
74532: LD_STRING 
74534: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74535: LD_ADDR_OWVAR 31
74539: PUSH
74540: LD_INT 0
74542: PPUSH
74543: LD_INT 3
74545: PPUSH
74546: CALL_OW 12
74550: PUSH
74551: LD_INT 0
74553: PPUSH
74554: LD_INT 3
74556: PPUSH
74557: CALL_OW 12
74561: PUSH
74562: LD_INT 0
74564: PUSH
74565: LD_INT 0
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: ST_TO_ADDR
// end ;
74574: LD_VAR 0 1
74578: RET
// export function PrepareApeman ( agressivity ) ; begin
74579: LD_INT 0
74581: PPUSH
// uc_side := 0 ;
74582: LD_ADDR_OWVAR 20
74586: PUSH
74587: LD_INT 0
74589: ST_TO_ADDR
// uc_nation := 0 ;
74590: LD_ADDR_OWVAR 21
74594: PUSH
74595: LD_INT 0
74597: ST_TO_ADDR
// hc_sex := sex_male ;
74598: LD_ADDR_OWVAR 27
74602: PUSH
74603: LD_INT 1
74605: ST_TO_ADDR
// hc_class := class_apeman ;
74606: LD_ADDR_OWVAR 28
74610: PUSH
74611: LD_INT 12
74613: ST_TO_ADDR
// hc_gallery :=  ;
74614: LD_ADDR_OWVAR 33
74618: PUSH
74619: LD_STRING 
74621: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74622: LD_ADDR_OWVAR 35
74626: PUSH
74627: LD_VAR 0 1
74631: NEG
74632: PPUSH
74633: LD_VAR 0 1
74637: PPUSH
74638: CALL_OW 12
74642: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74643: LD_ADDR_OWVAR 31
74647: PUSH
74648: LD_INT 0
74650: PPUSH
74651: LD_INT 3
74653: PPUSH
74654: CALL_OW 12
74658: PUSH
74659: LD_INT 0
74661: PPUSH
74662: LD_INT 3
74664: PPUSH
74665: CALL_OW 12
74669: PUSH
74670: LD_INT 0
74672: PUSH
74673: LD_INT 0
74675: PUSH
74676: EMPTY
74677: LIST
74678: LIST
74679: LIST
74680: LIST
74681: ST_TO_ADDR
// end ;
74682: LD_VAR 0 2
74686: RET
// export function PrepareTiger ( agressivity ) ; begin
74687: LD_INT 0
74689: PPUSH
// uc_side := 0 ;
74690: LD_ADDR_OWVAR 20
74694: PUSH
74695: LD_INT 0
74697: ST_TO_ADDR
// uc_nation := 0 ;
74698: LD_ADDR_OWVAR 21
74702: PUSH
74703: LD_INT 0
74705: ST_TO_ADDR
// hc_class := class_tiger ;
74706: LD_ADDR_OWVAR 28
74710: PUSH
74711: LD_INT 14
74713: ST_TO_ADDR
// hc_gallery :=  ;
74714: LD_ADDR_OWVAR 33
74718: PUSH
74719: LD_STRING 
74721: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74722: LD_ADDR_OWVAR 35
74726: PUSH
74727: LD_VAR 0 1
74731: NEG
74732: PPUSH
74733: LD_VAR 0 1
74737: PPUSH
74738: CALL_OW 12
74742: ST_TO_ADDR
// end ;
74743: LD_VAR 0 2
74747: RET
// export function PrepareEnchidna ( ) ; begin
74748: LD_INT 0
74750: PPUSH
// uc_side := 0 ;
74751: LD_ADDR_OWVAR 20
74755: PUSH
74756: LD_INT 0
74758: ST_TO_ADDR
// uc_nation := 0 ;
74759: LD_ADDR_OWVAR 21
74763: PUSH
74764: LD_INT 0
74766: ST_TO_ADDR
// hc_class := class_baggie ;
74767: LD_ADDR_OWVAR 28
74771: PUSH
74772: LD_INT 13
74774: ST_TO_ADDR
// hc_gallery :=  ;
74775: LD_ADDR_OWVAR 33
74779: PUSH
74780: LD_STRING 
74782: ST_TO_ADDR
// end ;
74783: LD_VAR 0 1
74787: RET
// export function PrepareFrog ( ) ; begin
74788: LD_INT 0
74790: PPUSH
// uc_side := 0 ;
74791: LD_ADDR_OWVAR 20
74795: PUSH
74796: LD_INT 0
74798: ST_TO_ADDR
// uc_nation := 0 ;
74799: LD_ADDR_OWVAR 21
74803: PUSH
74804: LD_INT 0
74806: ST_TO_ADDR
// hc_class := class_frog ;
74807: LD_ADDR_OWVAR 28
74811: PUSH
74812: LD_INT 19
74814: ST_TO_ADDR
// hc_gallery :=  ;
74815: LD_ADDR_OWVAR 33
74819: PUSH
74820: LD_STRING 
74822: ST_TO_ADDR
// end ;
74823: LD_VAR 0 1
74827: RET
// export function PrepareFish ( ) ; begin
74828: LD_INT 0
74830: PPUSH
// uc_side := 0 ;
74831: LD_ADDR_OWVAR 20
74835: PUSH
74836: LD_INT 0
74838: ST_TO_ADDR
// uc_nation := 0 ;
74839: LD_ADDR_OWVAR 21
74843: PUSH
74844: LD_INT 0
74846: ST_TO_ADDR
// hc_class := class_fish ;
74847: LD_ADDR_OWVAR 28
74851: PUSH
74852: LD_INT 20
74854: ST_TO_ADDR
// hc_gallery :=  ;
74855: LD_ADDR_OWVAR 33
74859: PUSH
74860: LD_STRING 
74862: ST_TO_ADDR
// end ;
74863: LD_VAR 0 1
74867: RET
// export function PrepareBird ( ) ; begin
74868: LD_INT 0
74870: PPUSH
// uc_side := 0 ;
74871: LD_ADDR_OWVAR 20
74875: PUSH
74876: LD_INT 0
74878: ST_TO_ADDR
// uc_nation := 0 ;
74879: LD_ADDR_OWVAR 21
74883: PUSH
74884: LD_INT 0
74886: ST_TO_ADDR
// hc_class := class_phororhacos ;
74887: LD_ADDR_OWVAR 28
74891: PUSH
74892: LD_INT 18
74894: ST_TO_ADDR
// hc_gallery :=  ;
74895: LD_ADDR_OWVAR 33
74899: PUSH
74900: LD_STRING 
74902: ST_TO_ADDR
// end ;
74903: LD_VAR 0 1
74907: RET
// export function PrepareHorse ( ) ; begin
74908: LD_INT 0
74910: PPUSH
// uc_side := 0 ;
74911: LD_ADDR_OWVAR 20
74915: PUSH
74916: LD_INT 0
74918: ST_TO_ADDR
// uc_nation := 0 ;
74919: LD_ADDR_OWVAR 21
74923: PUSH
74924: LD_INT 0
74926: ST_TO_ADDR
// hc_class := class_horse ;
74927: LD_ADDR_OWVAR 28
74931: PUSH
74932: LD_INT 21
74934: ST_TO_ADDR
// hc_gallery :=  ;
74935: LD_ADDR_OWVAR 33
74939: PUSH
74940: LD_STRING 
74942: ST_TO_ADDR
// end ;
74943: LD_VAR 0 1
74947: RET
// export function PrepareMastodont ( ) ; begin
74948: LD_INT 0
74950: PPUSH
// uc_side := 0 ;
74951: LD_ADDR_OWVAR 20
74955: PUSH
74956: LD_INT 0
74958: ST_TO_ADDR
// uc_nation := 0 ;
74959: LD_ADDR_OWVAR 21
74963: PUSH
74964: LD_INT 0
74966: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74967: LD_ADDR_OWVAR 37
74971: PUSH
74972: LD_INT 31
74974: ST_TO_ADDR
// vc_control := control_rider ;
74975: LD_ADDR_OWVAR 38
74979: PUSH
74980: LD_INT 4
74982: ST_TO_ADDR
// end ;
74983: LD_VAR 0 1
74987: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74988: LD_INT 0
74990: PPUSH
74991: PPUSH
74992: PPUSH
// uc_side = 0 ;
74993: LD_ADDR_OWVAR 20
74997: PUSH
74998: LD_INT 0
75000: ST_TO_ADDR
// uc_nation = 0 ;
75001: LD_ADDR_OWVAR 21
75005: PUSH
75006: LD_INT 0
75008: ST_TO_ADDR
// InitHc_All ( ) ;
75009: CALL_OW 584
// InitVc ;
75013: CALL_OW 20
// if mastodonts then
75017: LD_VAR 0 6
75021: IFFALSE 75088
// for i = 1 to mastodonts do
75023: LD_ADDR_VAR 0 11
75027: PUSH
75028: DOUBLE
75029: LD_INT 1
75031: DEC
75032: ST_TO_ADDR
75033: LD_VAR 0 6
75037: PUSH
75038: FOR_TO
75039: IFFALSE 75086
// begin vc_chassis := 31 ;
75041: LD_ADDR_OWVAR 37
75045: PUSH
75046: LD_INT 31
75048: ST_TO_ADDR
// vc_control := control_rider ;
75049: LD_ADDR_OWVAR 38
75053: PUSH
75054: LD_INT 4
75056: ST_TO_ADDR
// animal := CreateVehicle ;
75057: LD_ADDR_VAR 0 12
75061: PUSH
75062: CALL_OW 45
75066: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75067: LD_VAR 0 12
75071: PPUSH
75072: LD_VAR 0 8
75076: PPUSH
75077: LD_INT 0
75079: PPUSH
75080: CALL 77216 0 3
// end ;
75084: GO 75038
75086: POP
75087: POP
// if horses then
75088: LD_VAR 0 5
75092: IFFALSE 75159
// for i = 1 to horses do
75094: LD_ADDR_VAR 0 11
75098: PUSH
75099: DOUBLE
75100: LD_INT 1
75102: DEC
75103: ST_TO_ADDR
75104: LD_VAR 0 5
75108: PUSH
75109: FOR_TO
75110: IFFALSE 75157
// begin hc_class := 21 ;
75112: LD_ADDR_OWVAR 28
75116: PUSH
75117: LD_INT 21
75119: ST_TO_ADDR
// hc_gallery :=  ;
75120: LD_ADDR_OWVAR 33
75124: PUSH
75125: LD_STRING 
75127: ST_TO_ADDR
// animal := CreateHuman ;
75128: LD_ADDR_VAR 0 12
75132: PUSH
75133: CALL_OW 44
75137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75138: LD_VAR 0 12
75142: PPUSH
75143: LD_VAR 0 8
75147: PPUSH
75148: LD_INT 0
75150: PPUSH
75151: CALL 77216 0 3
// end ;
75155: GO 75109
75157: POP
75158: POP
// if birds then
75159: LD_VAR 0 1
75163: IFFALSE 75230
// for i = 1 to birds do
75165: LD_ADDR_VAR 0 11
75169: PUSH
75170: DOUBLE
75171: LD_INT 1
75173: DEC
75174: ST_TO_ADDR
75175: LD_VAR 0 1
75179: PUSH
75180: FOR_TO
75181: IFFALSE 75228
// begin hc_class := 18 ;
75183: LD_ADDR_OWVAR 28
75187: PUSH
75188: LD_INT 18
75190: ST_TO_ADDR
// hc_gallery =  ;
75191: LD_ADDR_OWVAR 33
75195: PUSH
75196: LD_STRING 
75198: ST_TO_ADDR
// animal := CreateHuman ;
75199: LD_ADDR_VAR 0 12
75203: PUSH
75204: CALL_OW 44
75208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75209: LD_VAR 0 12
75213: PPUSH
75214: LD_VAR 0 8
75218: PPUSH
75219: LD_INT 0
75221: PPUSH
75222: CALL 77216 0 3
// end ;
75226: GO 75180
75228: POP
75229: POP
// if tigers then
75230: LD_VAR 0 2
75234: IFFALSE 75318
// for i = 1 to tigers do
75236: LD_ADDR_VAR 0 11
75240: PUSH
75241: DOUBLE
75242: LD_INT 1
75244: DEC
75245: ST_TO_ADDR
75246: LD_VAR 0 2
75250: PUSH
75251: FOR_TO
75252: IFFALSE 75316
// begin hc_class = class_tiger ;
75254: LD_ADDR_OWVAR 28
75258: PUSH
75259: LD_INT 14
75261: ST_TO_ADDR
// hc_gallery =  ;
75262: LD_ADDR_OWVAR 33
75266: PUSH
75267: LD_STRING 
75269: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75270: LD_ADDR_OWVAR 35
75274: PUSH
75275: LD_INT 7
75277: NEG
75278: PPUSH
75279: LD_INT 7
75281: PPUSH
75282: CALL_OW 12
75286: ST_TO_ADDR
// animal := CreateHuman ;
75287: LD_ADDR_VAR 0 12
75291: PUSH
75292: CALL_OW 44
75296: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75297: LD_VAR 0 12
75301: PPUSH
75302: LD_VAR 0 8
75306: PPUSH
75307: LD_INT 0
75309: PPUSH
75310: CALL 77216 0 3
// end ;
75314: GO 75251
75316: POP
75317: POP
// if apemans then
75318: LD_VAR 0 3
75322: IFFALSE 75445
// for i = 1 to apemans do
75324: LD_ADDR_VAR 0 11
75328: PUSH
75329: DOUBLE
75330: LD_INT 1
75332: DEC
75333: ST_TO_ADDR
75334: LD_VAR 0 3
75338: PUSH
75339: FOR_TO
75340: IFFALSE 75443
// begin hc_class = class_apeman ;
75342: LD_ADDR_OWVAR 28
75346: PUSH
75347: LD_INT 12
75349: ST_TO_ADDR
// hc_gallery =  ;
75350: LD_ADDR_OWVAR 33
75354: PUSH
75355: LD_STRING 
75357: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75358: LD_ADDR_OWVAR 35
75362: PUSH
75363: LD_INT 2
75365: NEG
75366: PPUSH
75367: LD_INT 2
75369: PPUSH
75370: CALL_OW 12
75374: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75375: LD_ADDR_OWVAR 31
75379: PUSH
75380: LD_INT 1
75382: PPUSH
75383: LD_INT 3
75385: PPUSH
75386: CALL_OW 12
75390: PUSH
75391: LD_INT 1
75393: PPUSH
75394: LD_INT 3
75396: PPUSH
75397: CALL_OW 12
75401: PUSH
75402: LD_INT 0
75404: PUSH
75405: LD_INT 0
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: LIST
75412: LIST
75413: ST_TO_ADDR
// animal := CreateHuman ;
75414: LD_ADDR_VAR 0 12
75418: PUSH
75419: CALL_OW 44
75423: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75424: LD_VAR 0 12
75428: PPUSH
75429: LD_VAR 0 8
75433: PPUSH
75434: LD_INT 0
75436: PPUSH
75437: CALL 77216 0 3
// end ;
75441: GO 75339
75443: POP
75444: POP
// if enchidnas then
75445: LD_VAR 0 4
75449: IFFALSE 75516
// for i = 1 to enchidnas do
75451: LD_ADDR_VAR 0 11
75455: PUSH
75456: DOUBLE
75457: LD_INT 1
75459: DEC
75460: ST_TO_ADDR
75461: LD_VAR 0 4
75465: PUSH
75466: FOR_TO
75467: IFFALSE 75514
// begin hc_class = 13 ;
75469: LD_ADDR_OWVAR 28
75473: PUSH
75474: LD_INT 13
75476: ST_TO_ADDR
// hc_gallery =  ;
75477: LD_ADDR_OWVAR 33
75481: PUSH
75482: LD_STRING 
75484: ST_TO_ADDR
// animal := CreateHuman ;
75485: LD_ADDR_VAR 0 12
75489: PUSH
75490: CALL_OW 44
75494: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75495: LD_VAR 0 12
75499: PPUSH
75500: LD_VAR 0 8
75504: PPUSH
75505: LD_INT 0
75507: PPUSH
75508: CALL 77216 0 3
// end ;
75512: GO 75466
75514: POP
75515: POP
// if fishes then
75516: LD_VAR 0 7
75520: IFFALSE 75587
// for i = 1 to fishes do
75522: LD_ADDR_VAR 0 11
75526: PUSH
75527: DOUBLE
75528: LD_INT 1
75530: DEC
75531: ST_TO_ADDR
75532: LD_VAR 0 7
75536: PUSH
75537: FOR_TO
75538: IFFALSE 75585
// begin hc_class = 20 ;
75540: LD_ADDR_OWVAR 28
75544: PUSH
75545: LD_INT 20
75547: ST_TO_ADDR
// hc_gallery =  ;
75548: LD_ADDR_OWVAR 33
75552: PUSH
75553: LD_STRING 
75555: ST_TO_ADDR
// animal := CreateHuman ;
75556: LD_ADDR_VAR 0 12
75560: PUSH
75561: CALL_OW 44
75565: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75566: LD_VAR 0 12
75570: PPUSH
75571: LD_VAR 0 9
75575: PPUSH
75576: LD_INT 0
75578: PPUSH
75579: CALL 77216 0 3
// end ;
75583: GO 75537
75585: POP
75586: POP
// end ;
75587: LD_VAR 0 10
75591: RET
// export function WantHeal ( sci , unit ) ; begin
75592: LD_INT 0
75594: PPUSH
// if GetTaskList ( sci ) > 0 then
75595: LD_VAR 0 1
75599: PPUSH
75600: CALL_OW 437
75604: PUSH
75605: LD_INT 0
75607: GREATER
75608: IFFALSE 75678
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75610: LD_VAR 0 1
75614: PPUSH
75615: CALL_OW 437
75619: PUSH
75620: LD_INT 1
75622: ARRAY
75623: PUSH
75624: LD_INT 1
75626: ARRAY
75627: PUSH
75628: LD_STRING l
75630: EQUAL
75631: PUSH
75632: LD_VAR 0 1
75636: PPUSH
75637: CALL_OW 437
75641: PUSH
75642: LD_INT 1
75644: ARRAY
75645: PUSH
75646: LD_INT 4
75648: ARRAY
75649: PUSH
75650: LD_VAR 0 2
75654: EQUAL
75655: AND
75656: IFFALSE 75668
// result := true else
75658: LD_ADDR_VAR 0 3
75662: PUSH
75663: LD_INT 1
75665: ST_TO_ADDR
75666: GO 75676
// result := false ;
75668: LD_ADDR_VAR 0 3
75672: PUSH
75673: LD_INT 0
75675: ST_TO_ADDR
// end else
75676: GO 75686
// result := false ;
75678: LD_ADDR_VAR 0 3
75682: PUSH
75683: LD_INT 0
75685: ST_TO_ADDR
// end ;
75686: LD_VAR 0 3
75690: RET
// export function HealTarget ( sci ) ; begin
75691: LD_INT 0
75693: PPUSH
// if not sci then
75694: LD_VAR 0 1
75698: NOT
75699: IFFALSE 75703
// exit ;
75701: GO 75768
// result := 0 ;
75703: LD_ADDR_VAR 0 2
75707: PUSH
75708: LD_INT 0
75710: ST_TO_ADDR
// if GetTaskList ( sci ) then
75711: LD_VAR 0 1
75715: PPUSH
75716: CALL_OW 437
75720: IFFALSE 75768
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75722: LD_VAR 0 1
75726: PPUSH
75727: CALL_OW 437
75731: PUSH
75732: LD_INT 1
75734: ARRAY
75735: PUSH
75736: LD_INT 1
75738: ARRAY
75739: PUSH
75740: LD_STRING l
75742: EQUAL
75743: IFFALSE 75768
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75745: LD_ADDR_VAR 0 2
75749: PUSH
75750: LD_VAR 0 1
75754: PPUSH
75755: CALL_OW 437
75759: PUSH
75760: LD_INT 1
75762: ARRAY
75763: PUSH
75764: LD_INT 4
75766: ARRAY
75767: ST_TO_ADDR
// end ;
75768: LD_VAR 0 2
75772: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75773: LD_INT 0
75775: PPUSH
75776: PPUSH
75777: PPUSH
75778: PPUSH
// if not base_units then
75779: LD_VAR 0 1
75783: NOT
75784: IFFALSE 75788
// exit ;
75786: GO 75875
// result := false ;
75788: LD_ADDR_VAR 0 2
75792: PUSH
75793: LD_INT 0
75795: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75796: LD_ADDR_VAR 0 5
75800: PUSH
75801: LD_VAR 0 1
75805: PPUSH
75806: LD_INT 21
75808: PUSH
75809: LD_INT 3
75811: PUSH
75812: EMPTY
75813: LIST
75814: LIST
75815: PPUSH
75816: CALL_OW 72
75820: ST_TO_ADDR
// if not tmp then
75821: LD_VAR 0 5
75825: NOT
75826: IFFALSE 75830
// exit ;
75828: GO 75875
// for i in tmp do
75830: LD_ADDR_VAR 0 3
75834: PUSH
75835: LD_VAR 0 5
75839: PUSH
75840: FOR_IN
75841: IFFALSE 75873
// begin result := EnemyInRange ( i , 22 ) ;
75843: LD_ADDR_VAR 0 2
75847: PUSH
75848: LD_VAR 0 3
75852: PPUSH
75853: LD_INT 22
75855: PPUSH
75856: CALL 73462 0 2
75860: ST_TO_ADDR
// if result then
75861: LD_VAR 0 2
75865: IFFALSE 75871
// exit ;
75867: POP
75868: POP
75869: GO 75875
// end ;
75871: GO 75840
75873: POP
75874: POP
// end ;
75875: LD_VAR 0 2
75879: RET
// export function FilterByTag ( units , tag ) ; begin
75880: LD_INT 0
75882: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75883: LD_ADDR_VAR 0 3
75887: PUSH
75888: LD_VAR 0 1
75892: PPUSH
75893: LD_INT 120
75895: PUSH
75896: LD_VAR 0 2
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: PPUSH
75905: CALL_OW 72
75909: ST_TO_ADDR
// end ;
75910: LD_VAR 0 3
75914: RET
// export function IsDriver ( un ) ; begin
75915: LD_INT 0
75917: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75918: LD_ADDR_VAR 0 2
75922: PUSH
75923: LD_VAR 0 1
75927: PUSH
75928: LD_INT 55
75930: PUSH
75931: EMPTY
75932: LIST
75933: PPUSH
75934: CALL_OW 69
75938: IN
75939: ST_TO_ADDR
// end ;
75940: LD_VAR 0 2
75944: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75945: LD_INT 0
75947: PPUSH
75948: PPUSH
// list := [ ] ;
75949: LD_ADDR_VAR 0 5
75953: PUSH
75954: EMPTY
75955: ST_TO_ADDR
// case d of 0 :
75956: LD_VAR 0 3
75960: PUSH
75961: LD_INT 0
75963: DOUBLE
75964: EQUAL
75965: IFTRUE 75969
75967: GO 76102
75969: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75970: LD_ADDR_VAR 0 5
75974: PUSH
75975: LD_VAR 0 1
75979: PUSH
75980: LD_INT 4
75982: MINUS
75983: PUSH
75984: LD_VAR 0 2
75988: PUSH
75989: LD_INT 4
75991: MINUS
75992: PUSH
75993: LD_INT 2
75995: PUSH
75996: EMPTY
75997: LIST
75998: LIST
75999: LIST
76000: PUSH
76001: LD_VAR 0 1
76005: PUSH
76006: LD_INT 3
76008: MINUS
76009: PUSH
76010: LD_VAR 0 2
76014: PUSH
76015: LD_INT 1
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: LIST
76022: PUSH
76023: LD_VAR 0 1
76027: PUSH
76028: LD_INT 4
76030: PLUS
76031: PUSH
76032: LD_VAR 0 2
76036: PUSH
76037: LD_INT 4
76039: PUSH
76040: EMPTY
76041: LIST
76042: LIST
76043: LIST
76044: PUSH
76045: LD_VAR 0 1
76049: PUSH
76050: LD_INT 3
76052: PLUS
76053: PUSH
76054: LD_VAR 0 2
76058: PUSH
76059: LD_INT 3
76061: PLUS
76062: PUSH
76063: LD_INT 5
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: LIST
76070: PUSH
76071: LD_VAR 0 1
76075: PUSH
76076: LD_VAR 0 2
76080: PUSH
76081: LD_INT 4
76083: PLUS
76084: PUSH
76085: LD_INT 0
76087: PUSH
76088: EMPTY
76089: LIST
76090: LIST
76091: LIST
76092: PUSH
76093: EMPTY
76094: LIST
76095: LIST
76096: LIST
76097: LIST
76098: LIST
76099: ST_TO_ADDR
// end ; 1 :
76100: GO 76800
76102: LD_INT 1
76104: DOUBLE
76105: EQUAL
76106: IFTRUE 76110
76108: GO 76243
76110: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76111: LD_ADDR_VAR 0 5
76115: PUSH
76116: LD_VAR 0 1
76120: PUSH
76121: LD_VAR 0 2
76125: PUSH
76126: LD_INT 4
76128: MINUS
76129: PUSH
76130: LD_INT 3
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: LIST
76137: PUSH
76138: LD_VAR 0 1
76142: PUSH
76143: LD_INT 3
76145: MINUS
76146: PUSH
76147: LD_VAR 0 2
76151: PUSH
76152: LD_INT 3
76154: MINUS
76155: PUSH
76156: LD_INT 2
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: LIST
76163: PUSH
76164: LD_VAR 0 1
76168: PUSH
76169: LD_INT 4
76171: MINUS
76172: PUSH
76173: LD_VAR 0 2
76177: PUSH
76178: LD_INT 1
76180: PUSH
76181: EMPTY
76182: LIST
76183: LIST
76184: LIST
76185: PUSH
76186: LD_VAR 0 1
76190: PUSH
76191: LD_VAR 0 2
76195: PUSH
76196: LD_INT 3
76198: PLUS
76199: PUSH
76200: LD_INT 0
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: LIST
76207: PUSH
76208: LD_VAR 0 1
76212: PUSH
76213: LD_INT 4
76215: PLUS
76216: PUSH
76217: LD_VAR 0 2
76221: PUSH
76222: LD_INT 4
76224: PLUS
76225: PUSH
76226: LD_INT 5
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: LIST
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: ST_TO_ADDR
// end ; 2 :
76241: GO 76800
76243: LD_INT 2
76245: DOUBLE
76246: EQUAL
76247: IFTRUE 76251
76249: GO 76380
76251: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76252: LD_ADDR_VAR 0 5
76256: PUSH
76257: LD_VAR 0 1
76261: PUSH
76262: LD_VAR 0 2
76266: PUSH
76267: LD_INT 3
76269: MINUS
76270: PUSH
76271: LD_INT 3
76273: PUSH
76274: EMPTY
76275: LIST
76276: LIST
76277: LIST
76278: PUSH
76279: LD_VAR 0 1
76283: PUSH
76284: LD_INT 4
76286: PLUS
76287: PUSH
76288: LD_VAR 0 2
76292: PUSH
76293: LD_INT 4
76295: PUSH
76296: EMPTY
76297: LIST
76298: LIST
76299: LIST
76300: PUSH
76301: LD_VAR 0 1
76305: PUSH
76306: LD_VAR 0 2
76310: PUSH
76311: LD_INT 4
76313: PLUS
76314: PUSH
76315: LD_INT 0
76317: PUSH
76318: EMPTY
76319: LIST
76320: LIST
76321: LIST
76322: PUSH
76323: LD_VAR 0 1
76327: PUSH
76328: LD_INT 3
76330: MINUS
76331: PUSH
76332: LD_VAR 0 2
76336: PUSH
76337: LD_INT 1
76339: PUSH
76340: EMPTY
76341: LIST
76342: LIST
76343: LIST
76344: PUSH
76345: LD_VAR 0 1
76349: PUSH
76350: LD_INT 4
76352: MINUS
76353: PUSH
76354: LD_VAR 0 2
76358: PUSH
76359: LD_INT 4
76361: MINUS
76362: PUSH
76363: LD_INT 2
76365: PUSH
76366: EMPTY
76367: LIST
76368: LIST
76369: LIST
76370: PUSH
76371: EMPTY
76372: LIST
76373: LIST
76374: LIST
76375: LIST
76376: LIST
76377: ST_TO_ADDR
// end ; 3 :
76378: GO 76800
76380: LD_INT 3
76382: DOUBLE
76383: EQUAL
76384: IFTRUE 76388
76386: GO 76521
76388: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76389: LD_ADDR_VAR 0 5
76393: PUSH
76394: LD_VAR 0 1
76398: PUSH
76399: LD_INT 3
76401: PLUS
76402: PUSH
76403: LD_VAR 0 2
76407: PUSH
76408: LD_INT 4
76410: PUSH
76411: EMPTY
76412: LIST
76413: LIST
76414: LIST
76415: PUSH
76416: LD_VAR 0 1
76420: PUSH
76421: LD_INT 4
76423: PLUS
76424: PUSH
76425: LD_VAR 0 2
76429: PUSH
76430: LD_INT 4
76432: PLUS
76433: PUSH
76434: LD_INT 5
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: LIST
76441: PUSH
76442: LD_VAR 0 1
76446: PUSH
76447: LD_INT 4
76449: MINUS
76450: PUSH
76451: LD_VAR 0 2
76455: PUSH
76456: LD_INT 1
76458: PUSH
76459: EMPTY
76460: LIST
76461: LIST
76462: LIST
76463: PUSH
76464: LD_VAR 0 1
76468: PUSH
76469: LD_VAR 0 2
76473: PUSH
76474: LD_INT 4
76476: MINUS
76477: PUSH
76478: LD_INT 3
76480: PUSH
76481: EMPTY
76482: LIST
76483: LIST
76484: LIST
76485: PUSH
76486: LD_VAR 0 1
76490: PUSH
76491: LD_INT 3
76493: MINUS
76494: PUSH
76495: LD_VAR 0 2
76499: PUSH
76500: LD_INT 3
76502: MINUS
76503: PUSH
76504: LD_INT 2
76506: PUSH
76507: EMPTY
76508: LIST
76509: LIST
76510: LIST
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: ST_TO_ADDR
// end ; 4 :
76519: GO 76800
76521: LD_INT 4
76523: DOUBLE
76524: EQUAL
76525: IFTRUE 76529
76527: GO 76662
76529: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76530: LD_ADDR_VAR 0 5
76534: PUSH
76535: LD_VAR 0 1
76539: PUSH
76540: LD_VAR 0 2
76544: PUSH
76545: LD_INT 4
76547: PLUS
76548: PUSH
76549: LD_INT 0
76551: PUSH
76552: EMPTY
76553: LIST
76554: LIST
76555: LIST
76556: PUSH
76557: LD_VAR 0 1
76561: PUSH
76562: LD_INT 3
76564: PLUS
76565: PUSH
76566: LD_VAR 0 2
76570: PUSH
76571: LD_INT 3
76573: PLUS
76574: PUSH
76575: LD_INT 5
76577: PUSH
76578: EMPTY
76579: LIST
76580: LIST
76581: LIST
76582: PUSH
76583: LD_VAR 0 1
76587: PUSH
76588: LD_INT 4
76590: PLUS
76591: PUSH
76592: LD_VAR 0 2
76596: PUSH
76597: LD_INT 4
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: LIST
76604: PUSH
76605: LD_VAR 0 1
76609: PUSH
76610: LD_VAR 0 2
76614: PUSH
76615: LD_INT 3
76617: MINUS
76618: PUSH
76619: LD_INT 3
76621: PUSH
76622: EMPTY
76623: LIST
76624: LIST
76625: LIST
76626: PUSH
76627: LD_VAR 0 1
76631: PUSH
76632: LD_INT 4
76634: MINUS
76635: PUSH
76636: LD_VAR 0 2
76640: PUSH
76641: LD_INT 4
76643: MINUS
76644: PUSH
76645: LD_INT 2
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: LIST
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: ST_TO_ADDR
// end ; 5 :
76660: GO 76800
76662: LD_INT 5
76664: DOUBLE
76665: EQUAL
76666: IFTRUE 76670
76668: GO 76799
76670: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76671: LD_ADDR_VAR 0 5
76675: PUSH
76676: LD_VAR 0 1
76680: PUSH
76681: LD_INT 4
76683: MINUS
76684: PUSH
76685: LD_VAR 0 2
76689: PUSH
76690: LD_INT 1
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: LIST
76697: PUSH
76698: LD_VAR 0 1
76702: PUSH
76703: LD_VAR 0 2
76707: PUSH
76708: LD_INT 4
76710: MINUS
76711: PUSH
76712: LD_INT 3
76714: PUSH
76715: EMPTY
76716: LIST
76717: LIST
76718: LIST
76719: PUSH
76720: LD_VAR 0 1
76724: PUSH
76725: LD_INT 4
76727: PLUS
76728: PUSH
76729: LD_VAR 0 2
76733: PUSH
76734: LD_INT 4
76736: PLUS
76737: PUSH
76738: LD_INT 5
76740: PUSH
76741: EMPTY
76742: LIST
76743: LIST
76744: LIST
76745: PUSH
76746: LD_VAR 0 1
76750: PUSH
76751: LD_INT 3
76753: PLUS
76754: PUSH
76755: LD_VAR 0 2
76759: PUSH
76760: LD_INT 4
76762: PUSH
76763: EMPTY
76764: LIST
76765: LIST
76766: LIST
76767: PUSH
76768: LD_VAR 0 1
76772: PUSH
76773: LD_VAR 0 2
76777: PUSH
76778: LD_INT 3
76780: PLUS
76781: PUSH
76782: LD_INT 0
76784: PUSH
76785: EMPTY
76786: LIST
76787: LIST
76788: LIST
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: LIST
76794: LIST
76795: LIST
76796: ST_TO_ADDR
// end ; end ;
76797: GO 76800
76799: POP
// result := list ;
76800: LD_ADDR_VAR 0 4
76804: PUSH
76805: LD_VAR 0 5
76809: ST_TO_ADDR
// end ;
76810: LD_VAR 0 4
76814: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76815: LD_INT 0
76817: PPUSH
76818: PPUSH
76819: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76820: LD_VAR 0 1
76824: NOT
76825: PUSH
76826: LD_VAR 0 2
76830: PUSH
76831: LD_INT 1
76833: PUSH
76834: LD_INT 2
76836: PUSH
76837: LD_INT 3
76839: PUSH
76840: LD_INT 4
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: LIST
76847: LIST
76848: IN
76849: NOT
76850: OR
76851: IFFALSE 76855
// exit ;
76853: GO 76938
// tmp := [ ] ;
76855: LD_ADDR_VAR 0 5
76859: PUSH
76860: EMPTY
76861: ST_TO_ADDR
// for i in units do
76862: LD_ADDR_VAR 0 4
76866: PUSH
76867: LD_VAR 0 1
76871: PUSH
76872: FOR_IN
76873: IFFALSE 76907
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76875: LD_ADDR_VAR 0 5
76879: PUSH
76880: LD_VAR 0 5
76884: PPUSH
76885: LD_VAR 0 4
76889: PPUSH
76890: LD_VAR 0 2
76894: PPUSH
76895: CALL_OW 259
76899: PPUSH
76900: CALL 78311 0 2
76904: ST_TO_ADDR
76905: GO 76872
76907: POP
76908: POP
// if not tmp then
76909: LD_VAR 0 5
76913: NOT
76914: IFFALSE 76918
// exit ;
76916: GO 76938
// result := SortListByListDesc ( units , tmp ) ;
76918: LD_ADDR_VAR 0 3
76922: PUSH
76923: LD_VAR 0 1
76927: PPUSH
76928: LD_VAR 0 5
76932: PPUSH
76933: CALL_OW 77
76937: ST_TO_ADDR
// end ;
76938: LD_VAR 0 3
76942: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76943: LD_INT 0
76945: PPUSH
76946: PPUSH
76947: PPUSH
// result := false ;
76948: LD_ADDR_VAR 0 3
76952: PUSH
76953: LD_INT 0
76955: ST_TO_ADDR
// if not building then
76956: LD_VAR 0 2
76960: NOT
76961: IFFALSE 76965
// exit ;
76963: GO 77103
// x := GetX ( building ) ;
76965: LD_ADDR_VAR 0 4
76969: PUSH
76970: LD_VAR 0 2
76974: PPUSH
76975: CALL_OW 250
76979: ST_TO_ADDR
// y := GetY ( building ) ;
76980: LD_ADDR_VAR 0 5
76984: PUSH
76985: LD_VAR 0 2
76989: PPUSH
76990: CALL_OW 251
76994: ST_TO_ADDR
// if not x or not y then
76995: LD_VAR 0 4
76999: NOT
77000: PUSH
77001: LD_VAR 0 5
77005: NOT
77006: OR
77007: IFFALSE 77011
// exit ;
77009: GO 77103
// if GetTaskList ( unit ) then
77011: LD_VAR 0 1
77015: PPUSH
77016: CALL_OW 437
77020: IFFALSE 77103
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77022: LD_STRING e
77024: PUSH
77025: LD_VAR 0 1
77029: PPUSH
77030: CALL_OW 437
77034: PUSH
77035: LD_INT 1
77037: ARRAY
77038: PUSH
77039: LD_INT 1
77041: ARRAY
77042: EQUAL
77043: PUSH
77044: LD_VAR 0 4
77048: PUSH
77049: LD_VAR 0 1
77053: PPUSH
77054: CALL_OW 437
77058: PUSH
77059: LD_INT 1
77061: ARRAY
77062: PUSH
77063: LD_INT 2
77065: ARRAY
77066: EQUAL
77067: AND
77068: PUSH
77069: LD_VAR 0 5
77073: PUSH
77074: LD_VAR 0 1
77078: PPUSH
77079: CALL_OW 437
77083: PUSH
77084: LD_INT 1
77086: ARRAY
77087: PUSH
77088: LD_INT 3
77090: ARRAY
77091: EQUAL
77092: AND
77093: IFFALSE 77103
// result := true end ;
77095: LD_ADDR_VAR 0 3
77099: PUSH
77100: LD_INT 1
77102: ST_TO_ADDR
// end ;
77103: LD_VAR 0 3
77107: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77108: LD_INT 0
77110: PPUSH
// result := false ;
77111: LD_ADDR_VAR 0 4
77115: PUSH
77116: LD_INT 0
77118: ST_TO_ADDR
// if GetTaskList ( unit ) then
77119: LD_VAR 0 1
77123: PPUSH
77124: CALL_OW 437
77128: IFFALSE 77211
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77130: LD_STRING M
77132: PUSH
77133: LD_VAR 0 1
77137: PPUSH
77138: CALL_OW 437
77142: PUSH
77143: LD_INT 1
77145: ARRAY
77146: PUSH
77147: LD_INT 1
77149: ARRAY
77150: EQUAL
77151: PUSH
77152: LD_VAR 0 2
77156: PUSH
77157: LD_VAR 0 1
77161: PPUSH
77162: CALL_OW 437
77166: PUSH
77167: LD_INT 1
77169: ARRAY
77170: PUSH
77171: LD_INT 2
77173: ARRAY
77174: EQUAL
77175: AND
77176: PUSH
77177: LD_VAR 0 3
77181: PUSH
77182: LD_VAR 0 1
77186: PPUSH
77187: CALL_OW 437
77191: PUSH
77192: LD_INT 1
77194: ARRAY
77195: PUSH
77196: LD_INT 3
77198: ARRAY
77199: EQUAL
77200: AND
77201: IFFALSE 77211
// result := true ;
77203: LD_ADDR_VAR 0 4
77207: PUSH
77208: LD_INT 1
77210: ST_TO_ADDR
// end ; end ;
77211: LD_VAR 0 4
77215: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77216: LD_INT 0
77218: PPUSH
77219: PPUSH
77220: PPUSH
77221: PPUSH
// if not unit or not area then
77222: LD_VAR 0 1
77226: NOT
77227: PUSH
77228: LD_VAR 0 2
77232: NOT
77233: OR
77234: IFFALSE 77238
// exit ;
77236: GO 77414
// tmp := AreaToList ( area , i ) ;
77238: LD_ADDR_VAR 0 6
77242: PUSH
77243: LD_VAR 0 2
77247: PPUSH
77248: LD_VAR 0 5
77252: PPUSH
77253: CALL_OW 517
77257: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77258: LD_ADDR_VAR 0 5
77262: PUSH
77263: DOUBLE
77264: LD_INT 1
77266: DEC
77267: ST_TO_ADDR
77268: LD_VAR 0 6
77272: PUSH
77273: LD_INT 1
77275: ARRAY
77276: PUSH
77277: FOR_TO
77278: IFFALSE 77412
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77280: LD_ADDR_VAR 0 7
77284: PUSH
77285: LD_VAR 0 6
77289: PUSH
77290: LD_INT 1
77292: ARRAY
77293: PUSH
77294: LD_VAR 0 5
77298: ARRAY
77299: PUSH
77300: LD_VAR 0 6
77304: PUSH
77305: LD_INT 2
77307: ARRAY
77308: PUSH
77309: LD_VAR 0 5
77313: ARRAY
77314: PUSH
77315: EMPTY
77316: LIST
77317: LIST
77318: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77319: LD_INT 92
77321: PUSH
77322: LD_VAR 0 7
77326: PUSH
77327: LD_INT 1
77329: ARRAY
77330: PUSH
77331: LD_VAR 0 7
77335: PUSH
77336: LD_INT 2
77338: ARRAY
77339: PUSH
77340: LD_INT 2
77342: PUSH
77343: EMPTY
77344: LIST
77345: LIST
77346: LIST
77347: LIST
77348: PPUSH
77349: CALL_OW 69
77353: PUSH
77354: LD_INT 0
77356: EQUAL
77357: IFFALSE 77410
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77359: LD_VAR 0 1
77363: PPUSH
77364: LD_VAR 0 7
77368: PUSH
77369: LD_INT 1
77371: ARRAY
77372: PPUSH
77373: LD_VAR 0 7
77377: PUSH
77378: LD_INT 2
77380: ARRAY
77381: PPUSH
77382: LD_VAR 0 3
77386: PPUSH
77387: CALL_OW 48
// result := IsPlaced ( unit ) ;
77391: LD_ADDR_VAR 0 4
77395: PUSH
77396: LD_VAR 0 1
77400: PPUSH
77401: CALL_OW 305
77405: ST_TO_ADDR
// exit ;
77406: POP
77407: POP
77408: GO 77414
// end ; end ;
77410: GO 77277
77412: POP
77413: POP
// end ;
77414: LD_VAR 0 4
77418: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77419: LD_INT 0
77421: PPUSH
77422: PPUSH
77423: PPUSH
// if not side or side > 8 then
77424: LD_VAR 0 1
77428: NOT
77429: PUSH
77430: LD_VAR 0 1
77434: PUSH
77435: LD_INT 8
77437: GREATER
77438: OR
77439: IFFALSE 77443
// exit ;
77441: GO 77630
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77443: LD_ADDR_VAR 0 4
77447: PUSH
77448: LD_INT 22
77450: PUSH
77451: LD_VAR 0 1
77455: PUSH
77456: EMPTY
77457: LIST
77458: LIST
77459: PUSH
77460: LD_INT 21
77462: PUSH
77463: LD_INT 3
77465: PUSH
77466: EMPTY
77467: LIST
77468: LIST
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: PPUSH
77474: CALL_OW 69
77478: ST_TO_ADDR
// if not tmp then
77479: LD_VAR 0 4
77483: NOT
77484: IFFALSE 77488
// exit ;
77486: GO 77630
// enable_addtolog := true ;
77488: LD_ADDR_OWVAR 81
77492: PUSH
77493: LD_INT 1
77495: ST_TO_ADDR
// AddToLog ( [ ) ;
77496: LD_STRING [
77498: PPUSH
77499: CALL_OW 561
// for i in tmp do
77503: LD_ADDR_VAR 0 3
77507: PUSH
77508: LD_VAR 0 4
77512: PUSH
77513: FOR_IN
77514: IFFALSE 77621
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77516: LD_STRING [
77518: PUSH
77519: LD_VAR 0 3
77523: PPUSH
77524: CALL_OW 266
77528: STR
77529: PUSH
77530: LD_STRING , 
77532: STR
77533: PUSH
77534: LD_VAR 0 3
77538: PPUSH
77539: CALL_OW 250
77543: STR
77544: PUSH
77545: LD_STRING , 
77547: STR
77548: PUSH
77549: LD_VAR 0 3
77553: PPUSH
77554: CALL_OW 251
77558: STR
77559: PUSH
77560: LD_STRING , 
77562: STR
77563: PUSH
77564: LD_VAR 0 3
77568: PPUSH
77569: CALL_OW 254
77573: STR
77574: PUSH
77575: LD_STRING , 
77577: STR
77578: PUSH
77579: LD_VAR 0 3
77583: PPUSH
77584: LD_INT 1
77586: PPUSH
77587: CALL_OW 268
77591: STR
77592: PUSH
77593: LD_STRING , 
77595: STR
77596: PUSH
77597: LD_VAR 0 3
77601: PPUSH
77602: LD_INT 2
77604: PPUSH
77605: CALL_OW 268
77609: STR
77610: PUSH
77611: LD_STRING ],
77613: STR
77614: PPUSH
77615: CALL_OW 561
// end ;
77619: GO 77513
77621: POP
77622: POP
// AddToLog ( ]; ) ;
77623: LD_STRING ];
77625: PPUSH
77626: CALL_OW 561
// end ;
77630: LD_VAR 0 2
77634: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77635: LD_INT 0
77637: PPUSH
77638: PPUSH
77639: PPUSH
77640: PPUSH
77641: PPUSH
// if not area or not rate or not max then
77642: LD_VAR 0 1
77646: NOT
77647: PUSH
77648: LD_VAR 0 2
77652: NOT
77653: OR
77654: PUSH
77655: LD_VAR 0 4
77659: NOT
77660: OR
77661: IFFALSE 77665
// exit ;
77663: GO 77854
// while 1 do
77665: LD_INT 1
77667: IFFALSE 77854
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77669: LD_ADDR_VAR 0 9
77673: PUSH
77674: LD_VAR 0 1
77678: PPUSH
77679: LD_INT 1
77681: PPUSH
77682: CALL_OW 287
77686: PUSH
77687: LD_INT 10
77689: MUL
77690: ST_TO_ADDR
// r := rate / 10 ;
77691: LD_ADDR_VAR 0 7
77695: PUSH
77696: LD_VAR 0 2
77700: PUSH
77701: LD_INT 10
77703: DIVREAL
77704: ST_TO_ADDR
// time := 1 1$00 ;
77705: LD_ADDR_VAR 0 8
77709: PUSH
77710: LD_INT 2100
77712: ST_TO_ADDR
// if amount < min then
77713: LD_VAR 0 9
77717: PUSH
77718: LD_VAR 0 3
77722: LESS
77723: IFFALSE 77741
// r := r * 2 else
77725: LD_ADDR_VAR 0 7
77729: PUSH
77730: LD_VAR 0 7
77734: PUSH
77735: LD_INT 2
77737: MUL
77738: ST_TO_ADDR
77739: GO 77767
// if amount > max then
77741: LD_VAR 0 9
77745: PUSH
77746: LD_VAR 0 4
77750: GREATER
77751: IFFALSE 77767
// r := r / 2 ;
77753: LD_ADDR_VAR 0 7
77757: PUSH
77758: LD_VAR 0 7
77762: PUSH
77763: LD_INT 2
77765: DIVREAL
77766: ST_TO_ADDR
// time := time / r ;
77767: LD_ADDR_VAR 0 8
77771: PUSH
77772: LD_VAR 0 8
77776: PUSH
77777: LD_VAR 0 7
77781: DIVREAL
77782: ST_TO_ADDR
// if time < 0 then
77783: LD_VAR 0 8
77787: PUSH
77788: LD_INT 0
77790: LESS
77791: IFFALSE 77808
// time := time * - 1 ;
77793: LD_ADDR_VAR 0 8
77797: PUSH
77798: LD_VAR 0 8
77802: PUSH
77803: LD_INT 1
77805: NEG
77806: MUL
77807: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77808: LD_VAR 0 8
77812: PUSH
77813: LD_INT 35
77815: PPUSH
77816: LD_INT 875
77818: PPUSH
77819: CALL_OW 12
77823: PLUS
77824: PPUSH
77825: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77829: LD_INT 1
77831: PPUSH
77832: LD_INT 5
77834: PPUSH
77835: CALL_OW 12
77839: PPUSH
77840: LD_VAR 0 1
77844: PPUSH
77845: LD_INT 1
77847: PPUSH
77848: CALL_OW 55
// end ;
77852: GO 77665
// end ;
77854: LD_VAR 0 5
77858: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77859: LD_INT 0
77861: PPUSH
77862: PPUSH
77863: PPUSH
77864: PPUSH
77865: PPUSH
77866: PPUSH
77867: PPUSH
77868: PPUSH
// if not turrets or not factories then
77869: LD_VAR 0 1
77873: NOT
77874: PUSH
77875: LD_VAR 0 2
77879: NOT
77880: OR
77881: IFFALSE 77885
// exit ;
77883: GO 78192
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77885: LD_ADDR_VAR 0 10
77889: PUSH
77890: LD_INT 5
77892: PUSH
77893: LD_INT 6
77895: PUSH
77896: EMPTY
77897: LIST
77898: LIST
77899: PUSH
77900: LD_INT 2
77902: PUSH
77903: LD_INT 4
77905: PUSH
77906: EMPTY
77907: LIST
77908: LIST
77909: PUSH
77910: LD_INT 3
77912: PUSH
77913: LD_INT 5
77915: PUSH
77916: EMPTY
77917: LIST
77918: LIST
77919: PUSH
77920: EMPTY
77921: LIST
77922: LIST
77923: LIST
77924: PUSH
77925: LD_INT 24
77927: PUSH
77928: LD_INT 25
77930: PUSH
77931: EMPTY
77932: LIST
77933: LIST
77934: PUSH
77935: LD_INT 23
77937: PUSH
77938: LD_INT 27
77940: PUSH
77941: EMPTY
77942: LIST
77943: LIST
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: PUSH
77949: LD_INT 42
77951: PUSH
77952: LD_INT 43
77954: PUSH
77955: EMPTY
77956: LIST
77957: LIST
77958: PUSH
77959: LD_INT 44
77961: PUSH
77962: LD_INT 46
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: PUSH
77969: LD_INT 45
77971: PUSH
77972: LD_INT 47
77974: PUSH
77975: EMPTY
77976: LIST
77977: LIST
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: LIST
77983: PUSH
77984: EMPTY
77985: LIST
77986: LIST
77987: LIST
77988: ST_TO_ADDR
// result := [ ] ;
77989: LD_ADDR_VAR 0 3
77993: PUSH
77994: EMPTY
77995: ST_TO_ADDR
// for i in turrets do
77996: LD_ADDR_VAR 0 4
78000: PUSH
78001: LD_VAR 0 1
78005: PUSH
78006: FOR_IN
78007: IFFALSE 78190
// begin nat := GetNation ( i ) ;
78009: LD_ADDR_VAR 0 7
78013: PUSH
78014: LD_VAR 0 4
78018: PPUSH
78019: CALL_OW 248
78023: ST_TO_ADDR
// weapon := 0 ;
78024: LD_ADDR_VAR 0 8
78028: PUSH
78029: LD_INT 0
78031: ST_TO_ADDR
// if not nat then
78032: LD_VAR 0 7
78036: NOT
78037: IFFALSE 78041
// continue ;
78039: GO 78006
// for j in list [ nat ] do
78041: LD_ADDR_VAR 0 5
78045: PUSH
78046: LD_VAR 0 10
78050: PUSH
78051: LD_VAR 0 7
78055: ARRAY
78056: PUSH
78057: FOR_IN
78058: IFFALSE 78099
// if GetBWeapon ( i ) = j [ 1 ] then
78060: LD_VAR 0 4
78064: PPUSH
78065: CALL_OW 269
78069: PUSH
78070: LD_VAR 0 5
78074: PUSH
78075: LD_INT 1
78077: ARRAY
78078: EQUAL
78079: IFFALSE 78097
// begin weapon := j [ 2 ] ;
78081: LD_ADDR_VAR 0 8
78085: PUSH
78086: LD_VAR 0 5
78090: PUSH
78091: LD_INT 2
78093: ARRAY
78094: ST_TO_ADDR
// break ;
78095: GO 78099
// end ;
78097: GO 78057
78099: POP
78100: POP
// if not weapon then
78101: LD_VAR 0 8
78105: NOT
78106: IFFALSE 78110
// continue ;
78108: GO 78006
// for k in factories do
78110: LD_ADDR_VAR 0 6
78114: PUSH
78115: LD_VAR 0 2
78119: PUSH
78120: FOR_IN
78121: IFFALSE 78186
// begin weapons := AvailableWeaponList ( k ) ;
78123: LD_ADDR_VAR 0 9
78127: PUSH
78128: LD_VAR 0 6
78132: PPUSH
78133: CALL_OW 478
78137: ST_TO_ADDR
// if not weapons then
78138: LD_VAR 0 9
78142: NOT
78143: IFFALSE 78147
// continue ;
78145: GO 78120
// if weapon in weapons then
78147: LD_VAR 0 8
78151: PUSH
78152: LD_VAR 0 9
78156: IN
78157: IFFALSE 78184
// begin result := [ i , weapon ] ;
78159: LD_ADDR_VAR 0 3
78163: PUSH
78164: LD_VAR 0 4
78168: PUSH
78169: LD_VAR 0 8
78173: PUSH
78174: EMPTY
78175: LIST
78176: LIST
78177: ST_TO_ADDR
// exit ;
78178: POP
78179: POP
78180: POP
78181: POP
78182: GO 78192
// end ; end ;
78184: GO 78120
78186: POP
78187: POP
// end ;
78188: GO 78006
78190: POP
78191: POP
// end ;
78192: LD_VAR 0 3
78196: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78197: LD_INT 0
78199: PPUSH
// if not side or side > 8 then
78200: LD_VAR 0 3
78204: NOT
78205: PUSH
78206: LD_VAR 0 3
78210: PUSH
78211: LD_INT 8
78213: GREATER
78214: OR
78215: IFFALSE 78219
// exit ;
78217: GO 78278
// if not range then
78219: LD_VAR 0 4
78223: NOT
78224: IFFALSE 78235
// range := - 12 ;
78226: LD_ADDR_VAR 0 4
78230: PUSH
78231: LD_INT 12
78233: NEG
78234: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78235: LD_VAR 0 1
78239: PPUSH
78240: LD_VAR 0 2
78244: PPUSH
78245: LD_VAR 0 3
78249: PPUSH
78250: LD_VAR 0 4
78254: PPUSH
78255: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78259: LD_VAR 0 1
78263: PPUSH
78264: LD_VAR 0 2
78268: PPUSH
78269: LD_VAR 0 3
78273: PPUSH
78274: CALL_OW 331
// end ;
78278: LD_VAR 0 5
78282: RET
// export function Video ( mode ) ; begin
78283: LD_INT 0
78285: PPUSH
// ingame_video = mode ;
78286: LD_ADDR_OWVAR 52
78290: PUSH
78291: LD_VAR 0 1
78295: ST_TO_ADDR
// interface_hidden = mode ;
78296: LD_ADDR_OWVAR 54
78300: PUSH
78301: LD_VAR 0 1
78305: ST_TO_ADDR
// end ;
78306: LD_VAR 0 2
78310: RET
// export function Join ( array , element ) ; begin
78311: LD_INT 0
78313: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78314: LD_ADDR_VAR 0 3
78318: PUSH
78319: LD_VAR 0 1
78323: PPUSH
78324: LD_VAR 0 1
78328: PUSH
78329: LD_INT 1
78331: PLUS
78332: PPUSH
78333: LD_VAR 0 2
78337: PPUSH
78338: CALL_OW 1
78342: ST_TO_ADDR
// end ;
78343: LD_VAR 0 3
78347: RET
// export function JoinUnion ( array , element ) ; begin
78348: LD_INT 0
78350: PPUSH
// result := array union element ;
78351: LD_ADDR_VAR 0 3
78355: PUSH
78356: LD_VAR 0 1
78360: PUSH
78361: LD_VAR 0 2
78365: UNION
78366: ST_TO_ADDR
// end ;
78367: LD_VAR 0 3
78371: RET
// export function GetBehemoths ( side ) ; begin
78372: LD_INT 0
78374: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78375: LD_ADDR_VAR 0 2
78379: PUSH
78380: LD_INT 22
78382: PUSH
78383: LD_VAR 0 1
78387: PUSH
78388: EMPTY
78389: LIST
78390: LIST
78391: PUSH
78392: LD_INT 31
78394: PUSH
78395: LD_INT 25
78397: PUSH
78398: EMPTY
78399: LIST
78400: LIST
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: PPUSH
78406: CALL_OW 69
78410: ST_TO_ADDR
// end ;
78411: LD_VAR 0 2
78415: RET
// export function Shuffle ( array ) ; var i , index ; begin
78416: LD_INT 0
78418: PPUSH
78419: PPUSH
78420: PPUSH
// result := [ ] ;
78421: LD_ADDR_VAR 0 2
78425: PUSH
78426: EMPTY
78427: ST_TO_ADDR
// if not array then
78428: LD_VAR 0 1
78432: NOT
78433: IFFALSE 78437
// exit ;
78435: GO 78536
// Randomize ;
78437: CALL_OW 10
// for i = array downto 1 do
78441: LD_ADDR_VAR 0 3
78445: PUSH
78446: DOUBLE
78447: LD_VAR 0 1
78451: INC
78452: ST_TO_ADDR
78453: LD_INT 1
78455: PUSH
78456: FOR_DOWNTO
78457: IFFALSE 78534
// begin index := rand ( 1 , array ) ;
78459: LD_ADDR_VAR 0 4
78463: PUSH
78464: LD_INT 1
78466: PPUSH
78467: LD_VAR 0 1
78471: PPUSH
78472: CALL_OW 12
78476: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78477: LD_ADDR_VAR 0 2
78481: PUSH
78482: LD_VAR 0 2
78486: PPUSH
78487: LD_VAR 0 2
78491: PUSH
78492: LD_INT 1
78494: PLUS
78495: PPUSH
78496: LD_VAR 0 1
78500: PUSH
78501: LD_VAR 0 4
78505: ARRAY
78506: PPUSH
78507: CALL_OW 2
78511: ST_TO_ADDR
// array := Delete ( array , index ) ;
78512: LD_ADDR_VAR 0 1
78516: PUSH
78517: LD_VAR 0 1
78521: PPUSH
78522: LD_VAR 0 4
78526: PPUSH
78527: CALL_OW 3
78531: ST_TO_ADDR
// end ;
78532: GO 78456
78534: POP
78535: POP
// end ;
78536: LD_VAR 0 2
78540: RET
// export function GetBaseMaterials ( base ) ; begin
78541: LD_INT 0
78543: PPUSH
// result := [ 0 , 0 , 0 ] ;
78544: LD_ADDR_VAR 0 2
78548: PUSH
78549: LD_INT 0
78551: PUSH
78552: LD_INT 0
78554: PUSH
78555: LD_INT 0
78557: PUSH
78558: EMPTY
78559: LIST
78560: LIST
78561: LIST
78562: ST_TO_ADDR
// if not base then
78563: LD_VAR 0 1
78567: NOT
78568: IFFALSE 78572
// exit ;
78570: GO 78621
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78572: LD_ADDR_VAR 0 2
78576: PUSH
78577: LD_VAR 0 1
78581: PPUSH
78582: LD_INT 1
78584: PPUSH
78585: CALL_OW 275
78589: PUSH
78590: LD_VAR 0 1
78594: PPUSH
78595: LD_INT 2
78597: PPUSH
78598: CALL_OW 275
78602: PUSH
78603: LD_VAR 0 1
78607: PPUSH
78608: LD_INT 3
78610: PPUSH
78611: CALL_OW 275
78615: PUSH
78616: EMPTY
78617: LIST
78618: LIST
78619: LIST
78620: ST_TO_ADDR
// end ;
78621: LD_VAR 0 2
78625: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78626: LD_INT 0
78628: PPUSH
78629: PPUSH
// result := array ;
78630: LD_ADDR_VAR 0 3
78634: PUSH
78635: LD_VAR 0 1
78639: ST_TO_ADDR
// if size >= result then
78640: LD_VAR 0 2
78644: PUSH
78645: LD_VAR 0 3
78649: GREATEREQUAL
78650: IFFALSE 78654
// exit ;
78652: GO 78704
// if size then
78654: LD_VAR 0 2
78658: IFFALSE 78704
// for i := array downto size do
78660: LD_ADDR_VAR 0 4
78664: PUSH
78665: DOUBLE
78666: LD_VAR 0 1
78670: INC
78671: ST_TO_ADDR
78672: LD_VAR 0 2
78676: PUSH
78677: FOR_DOWNTO
78678: IFFALSE 78702
// result := Delete ( result , result ) ;
78680: LD_ADDR_VAR 0 3
78684: PUSH
78685: LD_VAR 0 3
78689: PPUSH
78690: LD_VAR 0 3
78694: PPUSH
78695: CALL_OW 3
78699: ST_TO_ADDR
78700: GO 78677
78702: POP
78703: POP
// end ;
78704: LD_VAR 0 3
78708: RET
// export function ComExit ( unit ) ; var tmp ; begin
78709: LD_INT 0
78711: PPUSH
78712: PPUSH
// if not IsInUnit ( unit ) then
78713: LD_VAR 0 1
78717: PPUSH
78718: CALL_OW 310
78722: NOT
78723: IFFALSE 78727
// exit ;
78725: GO 78787
// tmp := IsInUnit ( unit ) ;
78727: LD_ADDR_VAR 0 3
78731: PUSH
78732: LD_VAR 0 1
78736: PPUSH
78737: CALL_OW 310
78741: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78742: LD_VAR 0 3
78746: PPUSH
78747: CALL_OW 247
78751: PUSH
78752: LD_INT 2
78754: EQUAL
78755: IFFALSE 78768
// ComExitVehicle ( unit ) else
78757: LD_VAR 0 1
78761: PPUSH
78762: CALL_OW 121
78766: GO 78777
// ComExitBuilding ( unit ) ;
78768: LD_VAR 0 1
78772: PPUSH
78773: CALL_OW 122
// result := tmp ;
78777: LD_ADDR_VAR 0 2
78781: PUSH
78782: LD_VAR 0 3
78786: ST_TO_ADDR
// end ;
78787: LD_VAR 0 2
78791: RET
// export function ComExitAll ( units ) ; var i ; begin
78792: LD_INT 0
78794: PPUSH
78795: PPUSH
// if not units then
78796: LD_VAR 0 1
78800: NOT
78801: IFFALSE 78805
// exit ;
78803: GO 78831
// for i in units do
78805: LD_ADDR_VAR 0 3
78809: PUSH
78810: LD_VAR 0 1
78814: PUSH
78815: FOR_IN
78816: IFFALSE 78829
// ComExit ( i ) ;
78818: LD_VAR 0 3
78822: PPUSH
78823: CALL 78709 0 1
78827: GO 78815
78829: POP
78830: POP
// end ;
78831: LD_VAR 0 2
78835: RET
// export function ResetHc ; begin
78836: LD_INT 0
78838: PPUSH
// InitHc ;
78839: CALL_OW 19
// hc_importance := 0 ;
78843: LD_ADDR_OWVAR 32
78847: PUSH
78848: LD_INT 0
78850: ST_TO_ADDR
// end ;
78851: LD_VAR 0 1
78855: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78856: LD_INT 0
78858: PPUSH
78859: PPUSH
78860: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78861: LD_ADDR_VAR 0 6
78865: PUSH
78866: LD_VAR 0 1
78870: PUSH
78871: LD_VAR 0 3
78875: PLUS
78876: PUSH
78877: LD_INT 2
78879: DIV
78880: ST_TO_ADDR
// if _x < 0 then
78881: LD_VAR 0 6
78885: PUSH
78886: LD_INT 0
78888: LESS
78889: IFFALSE 78906
// _x := _x * - 1 ;
78891: LD_ADDR_VAR 0 6
78895: PUSH
78896: LD_VAR 0 6
78900: PUSH
78901: LD_INT 1
78903: NEG
78904: MUL
78905: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78906: LD_ADDR_VAR 0 7
78910: PUSH
78911: LD_VAR 0 2
78915: PUSH
78916: LD_VAR 0 4
78920: PLUS
78921: PUSH
78922: LD_INT 2
78924: DIV
78925: ST_TO_ADDR
// if _y < 0 then
78926: LD_VAR 0 7
78930: PUSH
78931: LD_INT 0
78933: LESS
78934: IFFALSE 78951
// _y := _y * - 1 ;
78936: LD_ADDR_VAR 0 7
78940: PUSH
78941: LD_VAR 0 7
78945: PUSH
78946: LD_INT 1
78948: NEG
78949: MUL
78950: ST_TO_ADDR
// result := [ _x , _y ] ;
78951: LD_ADDR_VAR 0 5
78955: PUSH
78956: LD_VAR 0 6
78960: PUSH
78961: LD_VAR 0 7
78965: PUSH
78966: EMPTY
78967: LIST
78968: LIST
78969: ST_TO_ADDR
// end ;
78970: LD_VAR 0 5
78974: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78975: LD_INT 0
78977: PPUSH
78978: PPUSH
78979: PPUSH
78980: PPUSH
// task := GetTaskList ( unit ) ;
78981: LD_ADDR_VAR 0 7
78985: PUSH
78986: LD_VAR 0 1
78990: PPUSH
78991: CALL_OW 437
78995: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78996: LD_VAR 0 7
79000: NOT
79001: PUSH
79002: LD_VAR 0 1
79006: PPUSH
79007: LD_VAR 0 2
79011: PPUSH
79012: CALL_OW 308
79016: NOT
79017: AND
79018: IFFALSE 79022
// exit ;
79020: GO 79140
// if IsInArea ( unit , area ) then
79022: LD_VAR 0 1
79026: PPUSH
79027: LD_VAR 0 2
79031: PPUSH
79032: CALL_OW 308
79036: IFFALSE 79054
// begin ComMoveToArea ( unit , goAway ) ;
79038: LD_VAR 0 1
79042: PPUSH
79043: LD_VAR 0 3
79047: PPUSH
79048: CALL_OW 113
// exit ;
79052: GO 79140
// end ; if task [ 1 ] [ 1 ] <> M then
79054: LD_VAR 0 7
79058: PUSH
79059: LD_INT 1
79061: ARRAY
79062: PUSH
79063: LD_INT 1
79065: ARRAY
79066: PUSH
79067: LD_STRING M
79069: NONEQUAL
79070: IFFALSE 79074
// exit ;
79072: GO 79140
// x := task [ 1 ] [ 2 ] ;
79074: LD_ADDR_VAR 0 5
79078: PUSH
79079: LD_VAR 0 7
79083: PUSH
79084: LD_INT 1
79086: ARRAY
79087: PUSH
79088: LD_INT 2
79090: ARRAY
79091: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79092: LD_ADDR_VAR 0 6
79096: PUSH
79097: LD_VAR 0 7
79101: PUSH
79102: LD_INT 1
79104: ARRAY
79105: PUSH
79106: LD_INT 3
79108: ARRAY
79109: ST_TO_ADDR
// if InArea ( x , y , area ) then
79110: LD_VAR 0 5
79114: PPUSH
79115: LD_VAR 0 6
79119: PPUSH
79120: LD_VAR 0 2
79124: PPUSH
79125: CALL_OW 309
79129: IFFALSE 79140
// ComStop ( unit ) ;
79131: LD_VAR 0 1
79135: PPUSH
79136: CALL_OW 141
// end ;
79140: LD_VAR 0 4
79144: RET
// export function Abs ( value ) ; begin
79145: LD_INT 0
79147: PPUSH
// result := value ;
79148: LD_ADDR_VAR 0 2
79152: PUSH
79153: LD_VAR 0 1
79157: ST_TO_ADDR
// if value < 0 then
79158: LD_VAR 0 1
79162: PUSH
79163: LD_INT 0
79165: LESS
79166: IFFALSE 79183
// result := value * - 1 ;
79168: LD_ADDR_VAR 0 2
79172: PUSH
79173: LD_VAR 0 1
79177: PUSH
79178: LD_INT 1
79180: NEG
79181: MUL
79182: ST_TO_ADDR
// end ;
79183: LD_VAR 0 2
79187: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79188: LD_INT 0
79190: PPUSH
79191: PPUSH
79192: PPUSH
79193: PPUSH
79194: PPUSH
79195: PPUSH
79196: PPUSH
79197: PPUSH
// if not unit or not building then
79198: LD_VAR 0 1
79202: NOT
79203: PUSH
79204: LD_VAR 0 2
79208: NOT
79209: OR
79210: IFFALSE 79214
// exit ;
79212: GO 79440
// x := GetX ( building ) ;
79214: LD_ADDR_VAR 0 4
79218: PUSH
79219: LD_VAR 0 2
79223: PPUSH
79224: CALL_OW 250
79228: ST_TO_ADDR
// y := GetY ( building ) ;
79229: LD_ADDR_VAR 0 6
79233: PUSH
79234: LD_VAR 0 2
79238: PPUSH
79239: CALL_OW 251
79243: ST_TO_ADDR
// d := GetDir ( building ) ;
79244: LD_ADDR_VAR 0 8
79248: PUSH
79249: LD_VAR 0 2
79253: PPUSH
79254: CALL_OW 254
79258: ST_TO_ADDR
// r := 4 ;
79259: LD_ADDR_VAR 0 9
79263: PUSH
79264: LD_INT 4
79266: ST_TO_ADDR
// for i := 1 to 5 do
79267: LD_ADDR_VAR 0 10
79271: PUSH
79272: DOUBLE
79273: LD_INT 1
79275: DEC
79276: ST_TO_ADDR
79277: LD_INT 5
79279: PUSH
79280: FOR_TO
79281: IFFALSE 79438
// begin _x := ShiftX ( x , d , r + i ) ;
79283: LD_ADDR_VAR 0 5
79287: PUSH
79288: LD_VAR 0 4
79292: PPUSH
79293: LD_VAR 0 8
79297: PPUSH
79298: LD_VAR 0 9
79302: PUSH
79303: LD_VAR 0 10
79307: PLUS
79308: PPUSH
79309: CALL_OW 272
79313: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79314: LD_ADDR_VAR 0 7
79318: PUSH
79319: LD_VAR 0 6
79323: PPUSH
79324: LD_VAR 0 8
79328: PPUSH
79329: LD_VAR 0 9
79333: PUSH
79334: LD_VAR 0 10
79338: PLUS
79339: PPUSH
79340: CALL_OW 273
79344: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79345: LD_VAR 0 5
79349: PPUSH
79350: LD_VAR 0 7
79354: PPUSH
79355: CALL_OW 488
79359: PUSH
79360: LD_VAR 0 5
79364: PPUSH
79365: LD_VAR 0 7
79369: PPUSH
79370: CALL_OW 428
79374: PPUSH
79375: CALL_OW 247
79379: PUSH
79380: LD_INT 3
79382: PUSH
79383: LD_INT 2
79385: PUSH
79386: EMPTY
79387: LIST
79388: LIST
79389: IN
79390: NOT
79391: AND
79392: IFFALSE 79436
// begin ComMoveXY ( unit , _x , _y ) ;
79394: LD_VAR 0 1
79398: PPUSH
79399: LD_VAR 0 5
79403: PPUSH
79404: LD_VAR 0 7
79408: PPUSH
79409: CALL_OW 111
// result := [ _x , _y ] ;
79413: LD_ADDR_VAR 0 3
79417: PUSH
79418: LD_VAR 0 5
79422: PUSH
79423: LD_VAR 0 7
79427: PUSH
79428: EMPTY
79429: LIST
79430: LIST
79431: ST_TO_ADDR
// exit ;
79432: POP
79433: POP
79434: GO 79440
// end ; end ;
79436: GO 79280
79438: POP
79439: POP
// end ;
79440: LD_VAR 0 3
79444: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79445: LD_INT 0
79447: PPUSH
79448: PPUSH
79449: PPUSH
// result := 0 ;
79450: LD_ADDR_VAR 0 3
79454: PUSH
79455: LD_INT 0
79457: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79458: LD_VAR 0 1
79462: PUSH
79463: LD_INT 0
79465: LESS
79466: PUSH
79467: LD_VAR 0 1
79471: PUSH
79472: LD_INT 8
79474: GREATER
79475: OR
79476: PUSH
79477: LD_VAR 0 2
79481: PUSH
79482: LD_INT 0
79484: LESS
79485: OR
79486: PUSH
79487: LD_VAR 0 2
79491: PUSH
79492: LD_INT 8
79494: GREATER
79495: OR
79496: IFFALSE 79500
// exit ;
79498: GO 79575
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79500: LD_ADDR_VAR 0 4
79504: PUSH
79505: LD_INT 22
79507: PUSH
79508: LD_VAR 0 2
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: PPUSH
79517: CALL_OW 69
79521: PUSH
79522: FOR_IN
79523: IFFALSE 79573
// begin un := UnitShoot ( i ) ;
79525: LD_ADDR_VAR 0 5
79529: PUSH
79530: LD_VAR 0 4
79534: PPUSH
79535: CALL_OW 504
79539: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79540: LD_VAR 0 5
79544: PPUSH
79545: CALL_OW 255
79549: PUSH
79550: LD_VAR 0 1
79554: EQUAL
79555: IFFALSE 79571
// begin result := un ;
79557: LD_ADDR_VAR 0 3
79561: PUSH
79562: LD_VAR 0 5
79566: ST_TO_ADDR
// exit ;
79567: POP
79568: POP
79569: GO 79575
// end ; end ;
79571: GO 79522
79573: POP
79574: POP
// end ;
79575: LD_VAR 0 3
79579: RET
// export function GetCargoBay ( units ) ; begin
79580: LD_INT 0
79582: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79583: LD_ADDR_VAR 0 2
79587: PUSH
79588: LD_VAR 0 1
79592: PPUSH
79593: LD_INT 2
79595: PUSH
79596: LD_INT 34
79598: PUSH
79599: LD_INT 12
79601: PUSH
79602: EMPTY
79603: LIST
79604: LIST
79605: PUSH
79606: LD_INT 34
79608: PUSH
79609: LD_INT 51
79611: PUSH
79612: EMPTY
79613: LIST
79614: LIST
79615: PUSH
79616: LD_INT 34
79618: PUSH
79619: LD_INT 32
79621: PUSH
79622: EMPTY
79623: LIST
79624: LIST
79625: PUSH
79626: LD_INT 34
79628: PUSH
79629: LD_INT 89
79631: PUSH
79632: EMPTY
79633: LIST
79634: LIST
79635: PUSH
79636: EMPTY
79637: LIST
79638: LIST
79639: LIST
79640: LIST
79641: LIST
79642: PPUSH
79643: CALL_OW 72
79647: ST_TO_ADDR
// end ;
79648: LD_VAR 0 2
79652: RET
// export function Negate ( value ) ; begin
79653: LD_INT 0
79655: PPUSH
// result := not value ;
79656: LD_ADDR_VAR 0 2
79660: PUSH
79661: LD_VAR 0 1
79665: NOT
79666: ST_TO_ADDR
// end ;
79667: LD_VAR 0 2
79671: RET
// export function Inc ( value ) ; begin
79672: LD_INT 0
79674: PPUSH
// result := value + 1 ;
79675: LD_ADDR_VAR 0 2
79679: PUSH
79680: LD_VAR 0 1
79684: PUSH
79685: LD_INT 1
79687: PLUS
79688: ST_TO_ADDR
// end ;
79689: LD_VAR 0 2
79693: RET
// export function Dec ( value ) ; begin
79694: LD_INT 0
79696: PPUSH
// result := value - 1 ;
79697: LD_ADDR_VAR 0 2
79701: PUSH
79702: LD_VAR 0 1
79706: PUSH
79707: LD_INT 1
79709: MINUS
79710: ST_TO_ADDR
// end ;
79711: LD_VAR 0 2
79715: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79716: LD_INT 0
79718: PPUSH
79719: PPUSH
79720: PPUSH
79721: PPUSH
79722: PPUSH
79723: PPUSH
79724: PPUSH
79725: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79726: LD_VAR 0 1
79730: PPUSH
79731: LD_VAR 0 2
79735: PPUSH
79736: CALL_OW 488
79740: NOT
79741: PUSH
79742: LD_VAR 0 3
79746: PPUSH
79747: LD_VAR 0 4
79751: PPUSH
79752: CALL_OW 488
79756: NOT
79757: OR
79758: IFFALSE 79771
// begin result := - 1 ;
79760: LD_ADDR_VAR 0 5
79764: PUSH
79765: LD_INT 1
79767: NEG
79768: ST_TO_ADDR
// exit ;
79769: GO 80006
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79771: LD_ADDR_VAR 0 12
79775: PUSH
79776: LD_VAR 0 1
79780: PPUSH
79781: LD_VAR 0 2
79785: PPUSH
79786: LD_VAR 0 3
79790: PPUSH
79791: LD_VAR 0 4
79795: PPUSH
79796: CALL 78856 0 4
79800: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79801: LD_ADDR_VAR 0 11
79805: PUSH
79806: LD_VAR 0 1
79810: PPUSH
79811: LD_VAR 0 2
79815: PPUSH
79816: LD_VAR 0 12
79820: PUSH
79821: LD_INT 1
79823: ARRAY
79824: PPUSH
79825: LD_VAR 0 12
79829: PUSH
79830: LD_INT 2
79832: ARRAY
79833: PPUSH
79834: CALL_OW 298
79838: ST_TO_ADDR
// distance := 9999 ;
79839: LD_ADDR_VAR 0 10
79843: PUSH
79844: LD_INT 9999
79846: ST_TO_ADDR
// for i := 0 to 5 do
79847: LD_ADDR_VAR 0 6
79851: PUSH
79852: DOUBLE
79853: LD_INT 0
79855: DEC
79856: ST_TO_ADDR
79857: LD_INT 5
79859: PUSH
79860: FOR_TO
79861: IFFALSE 80004
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79863: LD_ADDR_VAR 0 7
79867: PUSH
79868: LD_VAR 0 1
79872: PPUSH
79873: LD_VAR 0 6
79877: PPUSH
79878: LD_VAR 0 11
79882: PPUSH
79883: CALL_OW 272
79887: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79888: LD_ADDR_VAR 0 8
79892: PUSH
79893: LD_VAR 0 2
79897: PPUSH
79898: LD_VAR 0 6
79902: PPUSH
79903: LD_VAR 0 11
79907: PPUSH
79908: CALL_OW 273
79912: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79913: LD_VAR 0 7
79917: PPUSH
79918: LD_VAR 0 8
79922: PPUSH
79923: CALL_OW 488
79927: NOT
79928: IFFALSE 79932
// continue ;
79930: GO 79860
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79932: LD_ADDR_VAR 0 9
79936: PUSH
79937: LD_VAR 0 12
79941: PUSH
79942: LD_INT 1
79944: ARRAY
79945: PPUSH
79946: LD_VAR 0 12
79950: PUSH
79951: LD_INT 2
79953: ARRAY
79954: PPUSH
79955: LD_VAR 0 7
79959: PPUSH
79960: LD_VAR 0 8
79964: PPUSH
79965: CALL_OW 298
79969: ST_TO_ADDR
// if tmp < distance then
79970: LD_VAR 0 9
79974: PUSH
79975: LD_VAR 0 10
79979: LESS
79980: IFFALSE 80002
// begin result := i ;
79982: LD_ADDR_VAR 0 5
79986: PUSH
79987: LD_VAR 0 6
79991: ST_TO_ADDR
// distance := tmp ;
79992: LD_ADDR_VAR 0 10
79996: PUSH
79997: LD_VAR 0 9
80001: ST_TO_ADDR
// end ; end ;
80002: GO 79860
80004: POP
80005: POP
// end ;
80006: LD_VAR 0 5
80010: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80011: LD_INT 0
80013: PPUSH
80014: PPUSH
// if not driver or not IsInUnit ( driver ) then
80015: LD_VAR 0 1
80019: NOT
80020: PUSH
80021: LD_VAR 0 1
80025: PPUSH
80026: CALL_OW 310
80030: NOT
80031: OR
80032: IFFALSE 80036
// exit ;
80034: GO 80126
// vehicle := IsInUnit ( driver ) ;
80036: LD_ADDR_VAR 0 3
80040: PUSH
80041: LD_VAR 0 1
80045: PPUSH
80046: CALL_OW 310
80050: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80051: LD_VAR 0 1
80055: PPUSH
80056: LD_STRING \
80058: PUSH
80059: LD_INT 0
80061: PUSH
80062: LD_INT 0
80064: PUSH
80065: LD_INT 0
80067: PUSH
80068: LD_INT 0
80070: PUSH
80071: LD_INT 0
80073: PUSH
80074: LD_INT 0
80076: PUSH
80077: EMPTY
80078: LIST
80079: LIST
80080: LIST
80081: LIST
80082: LIST
80083: LIST
80084: LIST
80085: PUSH
80086: LD_STRING E
80088: PUSH
80089: LD_INT 0
80091: PUSH
80092: LD_INT 0
80094: PUSH
80095: LD_VAR 0 3
80099: PUSH
80100: LD_INT 0
80102: PUSH
80103: LD_INT 0
80105: PUSH
80106: LD_INT 0
80108: PUSH
80109: EMPTY
80110: LIST
80111: LIST
80112: LIST
80113: LIST
80114: LIST
80115: LIST
80116: LIST
80117: PUSH
80118: EMPTY
80119: LIST
80120: LIST
80121: PPUSH
80122: CALL_OW 446
// end ;
80126: LD_VAR 0 2
80130: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80131: LD_INT 0
80133: PPUSH
80134: PPUSH
// if not driver or not IsInUnit ( driver ) then
80135: LD_VAR 0 1
80139: NOT
80140: PUSH
80141: LD_VAR 0 1
80145: PPUSH
80146: CALL_OW 310
80150: NOT
80151: OR
80152: IFFALSE 80156
// exit ;
80154: GO 80246
// vehicle := IsInUnit ( driver ) ;
80156: LD_ADDR_VAR 0 3
80160: PUSH
80161: LD_VAR 0 1
80165: PPUSH
80166: CALL_OW 310
80170: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80171: LD_VAR 0 1
80175: PPUSH
80176: LD_STRING \
80178: PUSH
80179: LD_INT 0
80181: PUSH
80182: LD_INT 0
80184: PUSH
80185: LD_INT 0
80187: PUSH
80188: LD_INT 0
80190: PUSH
80191: LD_INT 0
80193: PUSH
80194: LD_INT 0
80196: PUSH
80197: EMPTY
80198: LIST
80199: LIST
80200: LIST
80201: LIST
80202: LIST
80203: LIST
80204: LIST
80205: PUSH
80206: LD_STRING E
80208: PUSH
80209: LD_INT 0
80211: PUSH
80212: LD_INT 0
80214: PUSH
80215: LD_VAR 0 3
80219: PUSH
80220: LD_INT 0
80222: PUSH
80223: LD_INT 0
80225: PUSH
80226: LD_INT 0
80228: PUSH
80229: EMPTY
80230: LIST
80231: LIST
80232: LIST
80233: LIST
80234: LIST
80235: LIST
80236: LIST
80237: PUSH
80238: EMPTY
80239: LIST
80240: LIST
80241: PPUSH
80242: CALL_OW 447
// end ;
80246: LD_VAR 0 2
80250: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80251: LD_INT 0
80253: PPUSH
80254: PPUSH
80255: PPUSH
// tmp := [ ] ;
80256: LD_ADDR_VAR 0 5
80260: PUSH
80261: EMPTY
80262: ST_TO_ADDR
// for i in units do
80263: LD_ADDR_VAR 0 4
80267: PUSH
80268: LD_VAR 0 1
80272: PUSH
80273: FOR_IN
80274: IFFALSE 80312
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80276: LD_ADDR_VAR 0 5
80280: PUSH
80281: LD_VAR 0 5
80285: PPUSH
80286: LD_VAR 0 5
80290: PUSH
80291: LD_INT 1
80293: PLUS
80294: PPUSH
80295: LD_VAR 0 4
80299: PPUSH
80300: CALL_OW 256
80304: PPUSH
80305: CALL_OW 2
80309: ST_TO_ADDR
80310: GO 80273
80312: POP
80313: POP
// if not tmp then
80314: LD_VAR 0 5
80318: NOT
80319: IFFALSE 80323
// exit ;
80321: GO 80371
// if asc then
80323: LD_VAR 0 2
80327: IFFALSE 80351
// result := SortListByListAsc ( units , tmp ) else
80329: LD_ADDR_VAR 0 3
80333: PUSH
80334: LD_VAR 0 1
80338: PPUSH
80339: LD_VAR 0 5
80343: PPUSH
80344: CALL_OW 76
80348: ST_TO_ADDR
80349: GO 80371
// result := SortListByListDesc ( units , tmp ) ;
80351: LD_ADDR_VAR 0 3
80355: PUSH
80356: LD_VAR 0 1
80360: PPUSH
80361: LD_VAR 0 5
80365: PPUSH
80366: CALL_OW 77
80370: ST_TO_ADDR
// end ;
80371: LD_VAR 0 3
80375: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80376: LD_INT 0
80378: PPUSH
80379: PPUSH
// task := GetTaskList ( mech ) ;
80380: LD_ADDR_VAR 0 4
80384: PUSH
80385: LD_VAR 0 1
80389: PPUSH
80390: CALL_OW 437
80394: ST_TO_ADDR
// if not task then
80395: LD_VAR 0 4
80399: NOT
80400: IFFALSE 80404
// exit ;
80402: GO 80446
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80404: LD_ADDR_VAR 0 3
80408: PUSH
80409: LD_VAR 0 4
80413: PUSH
80414: LD_INT 1
80416: ARRAY
80417: PUSH
80418: LD_INT 1
80420: ARRAY
80421: PUSH
80422: LD_STRING r
80424: EQUAL
80425: PUSH
80426: LD_VAR 0 4
80430: PUSH
80431: LD_INT 1
80433: ARRAY
80434: PUSH
80435: LD_INT 4
80437: ARRAY
80438: PUSH
80439: LD_VAR 0 2
80443: EQUAL
80444: AND
80445: ST_TO_ADDR
// end ;
80446: LD_VAR 0 3
80450: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80451: LD_INT 0
80453: PPUSH
// SetDir ( unit , d ) ;
80454: LD_VAR 0 1
80458: PPUSH
80459: LD_VAR 0 4
80463: PPUSH
80464: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80468: LD_VAR 0 1
80472: PPUSH
80473: LD_VAR 0 2
80477: PPUSH
80478: LD_VAR 0 3
80482: PPUSH
80483: LD_VAR 0 5
80487: PPUSH
80488: CALL_OW 48
// end ;
80492: LD_VAR 0 6
80496: RET
// export function ToNaturalNumber ( number ) ; begin
80497: LD_INT 0
80499: PPUSH
// result := number div 1 ;
80500: LD_ADDR_VAR 0 2
80504: PUSH
80505: LD_VAR 0 1
80509: PUSH
80510: LD_INT 1
80512: DIV
80513: ST_TO_ADDR
// if number < 0 then
80514: LD_VAR 0 1
80518: PUSH
80519: LD_INT 0
80521: LESS
80522: IFFALSE 80532
// result := 0 ;
80524: LD_ADDR_VAR 0 2
80528: PUSH
80529: LD_INT 0
80531: ST_TO_ADDR
// end ;
80532: LD_VAR 0 2
80536: RET
// export function SortByClass ( units , class ) ; var un ; begin
80537: LD_INT 0
80539: PPUSH
80540: PPUSH
// if not units or not class then
80541: LD_VAR 0 1
80545: NOT
80546: PUSH
80547: LD_VAR 0 2
80551: NOT
80552: OR
80553: IFFALSE 80557
// exit ;
80555: GO 80652
// result := [ ] ;
80557: LD_ADDR_VAR 0 3
80561: PUSH
80562: EMPTY
80563: ST_TO_ADDR
// for un in units do
80564: LD_ADDR_VAR 0 4
80568: PUSH
80569: LD_VAR 0 1
80573: PUSH
80574: FOR_IN
80575: IFFALSE 80650
// if GetClass ( un ) = class then
80577: LD_VAR 0 4
80581: PPUSH
80582: CALL_OW 257
80586: PUSH
80587: LD_VAR 0 2
80591: EQUAL
80592: IFFALSE 80619
// result := Insert ( result , 1 , un ) else
80594: LD_ADDR_VAR 0 3
80598: PUSH
80599: LD_VAR 0 3
80603: PPUSH
80604: LD_INT 1
80606: PPUSH
80607: LD_VAR 0 4
80611: PPUSH
80612: CALL_OW 2
80616: ST_TO_ADDR
80617: GO 80648
// result := Replace ( result , result + 1 , un ) ;
80619: LD_ADDR_VAR 0 3
80623: PUSH
80624: LD_VAR 0 3
80628: PPUSH
80629: LD_VAR 0 3
80633: PUSH
80634: LD_INT 1
80636: PLUS
80637: PPUSH
80638: LD_VAR 0 4
80642: PPUSH
80643: CALL_OW 1
80647: ST_TO_ADDR
80648: GO 80574
80650: POP
80651: POP
// end ;
80652: LD_VAR 0 3
80656: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80657: LD_INT 0
80659: PPUSH
80660: PPUSH
80661: PPUSH
80662: PPUSH
80663: PPUSH
80664: PPUSH
80665: PPUSH
// result := [ ] ;
80666: LD_ADDR_VAR 0 4
80670: PUSH
80671: EMPTY
80672: ST_TO_ADDR
// if x - r < 0 then
80673: LD_VAR 0 1
80677: PUSH
80678: LD_VAR 0 3
80682: MINUS
80683: PUSH
80684: LD_INT 0
80686: LESS
80687: IFFALSE 80699
// min_x := 0 else
80689: LD_ADDR_VAR 0 8
80693: PUSH
80694: LD_INT 0
80696: ST_TO_ADDR
80697: GO 80715
// min_x := x - r ;
80699: LD_ADDR_VAR 0 8
80703: PUSH
80704: LD_VAR 0 1
80708: PUSH
80709: LD_VAR 0 3
80713: MINUS
80714: ST_TO_ADDR
// if y - r < 0 then
80715: LD_VAR 0 2
80719: PUSH
80720: LD_VAR 0 3
80724: MINUS
80725: PUSH
80726: LD_INT 0
80728: LESS
80729: IFFALSE 80741
// min_y := 0 else
80731: LD_ADDR_VAR 0 7
80735: PUSH
80736: LD_INT 0
80738: ST_TO_ADDR
80739: GO 80757
// min_y := y - r ;
80741: LD_ADDR_VAR 0 7
80745: PUSH
80746: LD_VAR 0 2
80750: PUSH
80751: LD_VAR 0 3
80755: MINUS
80756: ST_TO_ADDR
// max_x := x + r ;
80757: LD_ADDR_VAR 0 9
80761: PUSH
80762: LD_VAR 0 1
80766: PUSH
80767: LD_VAR 0 3
80771: PLUS
80772: ST_TO_ADDR
// max_y := y + r ;
80773: LD_ADDR_VAR 0 10
80777: PUSH
80778: LD_VAR 0 2
80782: PUSH
80783: LD_VAR 0 3
80787: PLUS
80788: ST_TO_ADDR
// for _x = min_x to max_x do
80789: LD_ADDR_VAR 0 5
80793: PUSH
80794: DOUBLE
80795: LD_VAR 0 8
80799: DEC
80800: ST_TO_ADDR
80801: LD_VAR 0 9
80805: PUSH
80806: FOR_TO
80807: IFFALSE 80908
// for _y = min_y to max_y do
80809: LD_ADDR_VAR 0 6
80813: PUSH
80814: DOUBLE
80815: LD_VAR 0 7
80819: DEC
80820: ST_TO_ADDR
80821: LD_VAR 0 10
80825: PUSH
80826: FOR_TO
80827: IFFALSE 80904
// begin if not ValidHex ( _x , _y ) then
80829: LD_VAR 0 5
80833: PPUSH
80834: LD_VAR 0 6
80838: PPUSH
80839: CALL_OW 488
80843: NOT
80844: IFFALSE 80848
// continue ;
80846: GO 80826
// if GetResourceTypeXY ( _x , _y ) then
80848: LD_VAR 0 5
80852: PPUSH
80853: LD_VAR 0 6
80857: PPUSH
80858: CALL_OW 283
80862: IFFALSE 80902
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80864: LD_ADDR_VAR 0 4
80868: PUSH
80869: LD_VAR 0 4
80873: PPUSH
80874: LD_VAR 0 4
80878: PUSH
80879: LD_INT 1
80881: PLUS
80882: PPUSH
80883: LD_VAR 0 5
80887: PUSH
80888: LD_VAR 0 6
80892: PUSH
80893: EMPTY
80894: LIST
80895: LIST
80896: PPUSH
80897: CALL_OW 1
80901: ST_TO_ADDR
// end ;
80902: GO 80826
80904: POP
80905: POP
80906: GO 80806
80908: POP
80909: POP
// end ;
80910: LD_VAR 0 4
80914: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80915: LD_INT 0
80917: PPUSH
80918: PPUSH
80919: PPUSH
80920: PPUSH
80921: PPUSH
80922: PPUSH
80923: PPUSH
80924: PPUSH
// if not units then
80925: LD_VAR 0 1
80929: NOT
80930: IFFALSE 80934
// exit ;
80932: GO 81458
// result := UnitFilter ( units , [ f_ok ] ) ;
80934: LD_ADDR_VAR 0 3
80938: PUSH
80939: LD_VAR 0 1
80943: PPUSH
80944: LD_INT 50
80946: PUSH
80947: EMPTY
80948: LIST
80949: PPUSH
80950: CALL_OW 72
80954: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80955: LD_ADDR_VAR 0 8
80959: PUSH
80960: LD_VAR 0 1
80964: PUSH
80965: LD_INT 1
80967: ARRAY
80968: PPUSH
80969: CALL_OW 255
80973: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80974: LD_ADDR_VAR 0 10
80978: PUSH
80979: LD_INT 29
80981: PUSH
80982: LD_INT 91
80984: PUSH
80985: LD_INT 49
80987: PUSH
80988: EMPTY
80989: LIST
80990: LIST
80991: LIST
80992: ST_TO_ADDR
// if not result then
80993: LD_VAR 0 3
80997: NOT
80998: IFFALSE 81002
// exit ;
81000: GO 81458
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81002: LD_ADDR_VAR 0 5
81006: PUSH
81007: LD_INT 81
81009: PUSH
81010: LD_VAR 0 8
81014: PUSH
81015: EMPTY
81016: LIST
81017: LIST
81018: PPUSH
81019: CALL_OW 69
81023: ST_TO_ADDR
// for i in result do
81024: LD_ADDR_VAR 0 4
81028: PUSH
81029: LD_VAR 0 3
81033: PUSH
81034: FOR_IN
81035: IFFALSE 81456
// begin tag := GetTag ( i ) + 1 ;
81037: LD_ADDR_VAR 0 9
81041: PUSH
81042: LD_VAR 0 4
81046: PPUSH
81047: CALL_OW 110
81051: PUSH
81052: LD_INT 1
81054: PLUS
81055: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81056: LD_ADDR_VAR 0 7
81060: PUSH
81061: LD_VAR 0 4
81065: PPUSH
81066: CALL_OW 250
81070: PPUSH
81071: LD_VAR 0 4
81075: PPUSH
81076: CALL_OW 251
81080: PPUSH
81081: LD_INT 6
81083: PPUSH
81084: CALL 80657 0 3
81088: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81089: LD_VAR 0 4
81093: PPUSH
81094: CALL_OW 247
81098: PUSH
81099: LD_INT 2
81101: EQUAL
81102: PUSH
81103: LD_VAR 0 7
81107: AND
81108: PUSH
81109: LD_VAR 0 4
81113: PPUSH
81114: CALL_OW 264
81118: PUSH
81119: LD_VAR 0 10
81123: IN
81124: NOT
81125: AND
81126: IFFALSE 81165
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81128: LD_VAR 0 4
81132: PPUSH
81133: LD_VAR 0 7
81137: PUSH
81138: LD_INT 1
81140: ARRAY
81141: PUSH
81142: LD_INT 1
81144: ARRAY
81145: PPUSH
81146: LD_VAR 0 7
81150: PUSH
81151: LD_INT 1
81153: ARRAY
81154: PUSH
81155: LD_INT 2
81157: ARRAY
81158: PPUSH
81159: CALL_OW 116
81163: GO 81454
// if path > tag then
81165: LD_VAR 0 2
81169: PUSH
81170: LD_VAR 0 9
81174: GREATER
81175: IFFALSE 81383
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81177: LD_ADDR_VAR 0 6
81181: PUSH
81182: LD_VAR 0 5
81186: PPUSH
81187: LD_INT 91
81189: PUSH
81190: LD_VAR 0 4
81194: PUSH
81195: LD_INT 8
81197: PUSH
81198: EMPTY
81199: LIST
81200: LIST
81201: LIST
81202: PPUSH
81203: CALL_OW 72
81207: ST_TO_ADDR
// if nearEnemy then
81208: LD_VAR 0 6
81212: IFFALSE 81281
// begin if GetWeapon ( i ) = ru_time_lapser then
81214: LD_VAR 0 4
81218: PPUSH
81219: CALL_OW 264
81223: PUSH
81224: LD_INT 49
81226: EQUAL
81227: IFFALSE 81255
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81229: LD_VAR 0 4
81233: PPUSH
81234: LD_VAR 0 6
81238: PPUSH
81239: LD_VAR 0 4
81243: PPUSH
81244: CALL_OW 74
81248: PPUSH
81249: CALL_OW 112
81253: GO 81279
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81255: LD_VAR 0 4
81259: PPUSH
81260: LD_VAR 0 6
81264: PPUSH
81265: LD_VAR 0 4
81269: PPUSH
81270: CALL_OW 74
81274: PPUSH
81275: CALL 82383 0 2
// end else
81279: GO 81381
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81281: LD_VAR 0 4
81285: PPUSH
81286: LD_VAR 0 2
81290: PUSH
81291: LD_VAR 0 9
81295: ARRAY
81296: PUSH
81297: LD_INT 1
81299: ARRAY
81300: PPUSH
81301: LD_VAR 0 2
81305: PUSH
81306: LD_VAR 0 9
81310: ARRAY
81311: PUSH
81312: LD_INT 2
81314: ARRAY
81315: PPUSH
81316: CALL_OW 297
81320: PUSH
81321: LD_INT 6
81323: GREATER
81324: IFFALSE 81367
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81326: LD_VAR 0 4
81330: PPUSH
81331: LD_VAR 0 2
81335: PUSH
81336: LD_VAR 0 9
81340: ARRAY
81341: PUSH
81342: LD_INT 1
81344: ARRAY
81345: PPUSH
81346: LD_VAR 0 2
81350: PUSH
81351: LD_VAR 0 9
81355: ARRAY
81356: PUSH
81357: LD_INT 2
81359: ARRAY
81360: PPUSH
81361: CALL_OW 114
81365: GO 81381
// SetTag ( i , tag ) ;
81367: LD_VAR 0 4
81371: PPUSH
81372: LD_VAR 0 9
81376: PPUSH
81377: CALL_OW 109
// end else
81381: GO 81454
// if enemy then
81383: LD_VAR 0 5
81387: IFFALSE 81454
// begin if GetWeapon ( i ) = ru_time_lapser then
81389: LD_VAR 0 4
81393: PPUSH
81394: CALL_OW 264
81398: PUSH
81399: LD_INT 49
81401: EQUAL
81402: IFFALSE 81430
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81404: LD_VAR 0 4
81408: PPUSH
81409: LD_VAR 0 5
81413: PPUSH
81414: LD_VAR 0 4
81418: PPUSH
81419: CALL_OW 74
81423: PPUSH
81424: CALL_OW 112
81428: GO 81454
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81430: LD_VAR 0 4
81434: PPUSH
81435: LD_VAR 0 5
81439: PPUSH
81440: LD_VAR 0 4
81444: PPUSH
81445: CALL_OW 74
81449: PPUSH
81450: CALL 82383 0 2
// end ; end ;
81454: GO 81034
81456: POP
81457: POP
// end ;
81458: LD_VAR 0 3
81462: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81463: LD_INT 0
81465: PPUSH
81466: PPUSH
81467: PPUSH
// if not unit or IsInUnit ( unit ) then
81468: LD_VAR 0 1
81472: NOT
81473: PUSH
81474: LD_VAR 0 1
81478: PPUSH
81479: CALL_OW 310
81483: OR
81484: IFFALSE 81488
// exit ;
81486: GO 81579
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81488: LD_ADDR_VAR 0 4
81492: PUSH
81493: LD_VAR 0 1
81497: PPUSH
81498: CALL_OW 250
81502: PPUSH
81503: LD_VAR 0 2
81507: PPUSH
81508: LD_INT 1
81510: PPUSH
81511: CALL_OW 272
81515: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81516: LD_ADDR_VAR 0 5
81520: PUSH
81521: LD_VAR 0 1
81525: PPUSH
81526: CALL_OW 251
81530: PPUSH
81531: LD_VAR 0 2
81535: PPUSH
81536: LD_INT 1
81538: PPUSH
81539: CALL_OW 273
81543: ST_TO_ADDR
// if ValidHex ( x , y ) then
81544: LD_VAR 0 4
81548: PPUSH
81549: LD_VAR 0 5
81553: PPUSH
81554: CALL_OW 488
81558: IFFALSE 81579
// ComTurnXY ( unit , x , y ) ;
81560: LD_VAR 0 1
81564: PPUSH
81565: LD_VAR 0 4
81569: PPUSH
81570: LD_VAR 0 5
81574: PPUSH
81575: CALL_OW 118
// end ;
81579: LD_VAR 0 3
81583: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81584: LD_INT 0
81586: PPUSH
81587: PPUSH
// result := false ;
81588: LD_ADDR_VAR 0 3
81592: PUSH
81593: LD_INT 0
81595: ST_TO_ADDR
// if not units then
81596: LD_VAR 0 2
81600: NOT
81601: IFFALSE 81605
// exit ;
81603: GO 81650
// for i in units do
81605: LD_ADDR_VAR 0 4
81609: PUSH
81610: LD_VAR 0 2
81614: PUSH
81615: FOR_IN
81616: IFFALSE 81648
// if See ( side , i ) then
81618: LD_VAR 0 1
81622: PPUSH
81623: LD_VAR 0 4
81627: PPUSH
81628: CALL_OW 292
81632: IFFALSE 81646
// begin result := true ;
81634: LD_ADDR_VAR 0 3
81638: PUSH
81639: LD_INT 1
81641: ST_TO_ADDR
// exit ;
81642: POP
81643: POP
81644: GO 81650
// end ;
81646: GO 81615
81648: POP
81649: POP
// end ;
81650: LD_VAR 0 3
81654: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81655: LD_INT 0
81657: PPUSH
81658: PPUSH
81659: PPUSH
81660: PPUSH
// if not unit or not points then
81661: LD_VAR 0 1
81665: NOT
81666: PUSH
81667: LD_VAR 0 2
81671: NOT
81672: OR
81673: IFFALSE 81677
// exit ;
81675: GO 81767
// dist := 99999 ;
81677: LD_ADDR_VAR 0 5
81681: PUSH
81682: LD_INT 99999
81684: ST_TO_ADDR
// for i in points do
81685: LD_ADDR_VAR 0 4
81689: PUSH
81690: LD_VAR 0 2
81694: PUSH
81695: FOR_IN
81696: IFFALSE 81765
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81698: LD_ADDR_VAR 0 6
81702: PUSH
81703: LD_VAR 0 1
81707: PPUSH
81708: LD_VAR 0 4
81712: PUSH
81713: LD_INT 1
81715: ARRAY
81716: PPUSH
81717: LD_VAR 0 4
81721: PUSH
81722: LD_INT 2
81724: ARRAY
81725: PPUSH
81726: CALL_OW 297
81730: ST_TO_ADDR
// if tmpDist < dist then
81731: LD_VAR 0 6
81735: PUSH
81736: LD_VAR 0 5
81740: LESS
81741: IFFALSE 81763
// begin result := i ;
81743: LD_ADDR_VAR 0 3
81747: PUSH
81748: LD_VAR 0 4
81752: ST_TO_ADDR
// dist := tmpDist ;
81753: LD_ADDR_VAR 0 5
81757: PUSH
81758: LD_VAR 0 6
81762: ST_TO_ADDR
// end ; end ;
81763: GO 81695
81765: POP
81766: POP
// end ;
81767: LD_VAR 0 3
81771: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81772: LD_INT 0
81774: PPUSH
// uc_side := side ;
81775: LD_ADDR_OWVAR 20
81779: PUSH
81780: LD_VAR 0 1
81784: ST_TO_ADDR
// uc_nation := 3 ;
81785: LD_ADDR_OWVAR 21
81789: PUSH
81790: LD_INT 3
81792: ST_TO_ADDR
// vc_chassis := 25 ;
81793: LD_ADDR_OWVAR 37
81797: PUSH
81798: LD_INT 25
81800: ST_TO_ADDR
// vc_engine := engine_siberite ;
81801: LD_ADDR_OWVAR 39
81805: PUSH
81806: LD_INT 3
81808: ST_TO_ADDR
// vc_control := control_computer ;
81809: LD_ADDR_OWVAR 38
81813: PUSH
81814: LD_INT 3
81816: ST_TO_ADDR
// vc_weapon := 59 ;
81817: LD_ADDR_OWVAR 40
81821: PUSH
81822: LD_INT 59
81824: ST_TO_ADDR
// result := CreateVehicle ;
81825: LD_ADDR_VAR 0 5
81829: PUSH
81830: CALL_OW 45
81834: ST_TO_ADDR
// SetDir ( result , d ) ;
81835: LD_VAR 0 5
81839: PPUSH
81840: LD_VAR 0 4
81844: PPUSH
81845: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81849: LD_VAR 0 5
81853: PPUSH
81854: LD_VAR 0 2
81858: PPUSH
81859: LD_VAR 0 3
81863: PPUSH
81864: LD_INT 0
81866: PPUSH
81867: CALL_OW 48
// end ;
81871: LD_VAR 0 5
81875: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81876: LD_INT 0
81878: PPUSH
81879: PPUSH
81880: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81881: LD_ADDR_VAR 0 2
81885: PUSH
81886: LD_INT 0
81888: PUSH
81889: LD_INT 0
81891: PUSH
81892: LD_INT 0
81894: PUSH
81895: LD_INT 0
81897: PUSH
81898: EMPTY
81899: LIST
81900: LIST
81901: LIST
81902: LIST
81903: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81904: LD_VAR 0 1
81908: NOT
81909: PUSH
81910: LD_VAR 0 1
81914: PPUSH
81915: CALL_OW 264
81919: PUSH
81920: LD_INT 12
81922: PUSH
81923: LD_INT 51
81925: PUSH
81926: LD_INT 32
81928: PUSH
81929: LD_INT 89
81931: PUSH
81932: EMPTY
81933: LIST
81934: LIST
81935: LIST
81936: LIST
81937: IN
81938: NOT
81939: OR
81940: IFFALSE 81944
// exit ;
81942: GO 82042
// for i := 1 to 3 do
81944: LD_ADDR_VAR 0 3
81948: PUSH
81949: DOUBLE
81950: LD_INT 1
81952: DEC
81953: ST_TO_ADDR
81954: LD_INT 3
81956: PUSH
81957: FOR_TO
81958: IFFALSE 82040
// begin tmp := GetCargo ( cargo , i ) ;
81960: LD_ADDR_VAR 0 4
81964: PUSH
81965: LD_VAR 0 1
81969: PPUSH
81970: LD_VAR 0 3
81974: PPUSH
81975: CALL_OW 289
81979: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81980: LD_ADDR_VAR 0 2
81984: PUSH
81985: LD_VAR 0 2
81989: PPUSH
81990: LD_VAR 0 3
81994: PPUSH
81995: LD_VAR 0 4
81999: PPUSH
82000: CALL_OW 1
82004: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82005: LD_ADDR_VAR 0 2
82009: PUSH
82010: LD_VAR 0 2
82014: PPUSH
82015: LD_INT 4
82017: PPUSH
82018: LD_VAR 0 2
82022: PUSH
82023: LD_INT 4
82025: ARRAY
82026: PUSH
82027: LD_VAR 0 4
82031: PLUS
82032: PPUSH
82033: CALL_OW 1
82037: ST_TO_ADDR
// end ;
82038: GO 81957
82040: POP
82041: POP
// end ;
82042: LD_VAR 0 2
82046: RET
// export function Length ( array ) ; begin
82047: LD_INT 0
82049: PPUSH
// result := array + 0 ;
82050: LD_ADDR_VAR 0 2
82054: PUSH
82055: LD_VAR 0 1
82059: PUSH
82060: LD_INT 0
82062: PLUS
82063: ST_TO_ADDR
// end ;
82064: LD_VAR 0 2
82068: RET
// export function PrepareArray ( array ) ; begin
82069: LD_INT 0
82071: PPUSH
// result := array diff 0 ;
82072: LD_ADDR_VAR 0 2
82076: PUSH
82077: LD_VAR 0 1
82081: PUSH
82082: LD_INT 0
82084: DIFF
82085: ST_TO_ADDR
// if not result [ 1 ] then
82086: LD_VAR 0 2
82090: PUSH
82091: LD_INT 1
82093: ARRAY
82094: NOT
82095: IFFALSE 82115
// result := Delete ( result , 1 ) ;
82097: LD_ADDR_VAR 0 2
82101: PUSH
82102: LD_VAR 0 2
82106: PPUSH
82107: LD_INT 1
82109: PPUSH
82110: CALL_OW 3
82114: ST_TO_ADDR
// end ;
82115: LD_VAR 0 2
82119: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82120: LD_INT 0
82122: PPUSH
82123: PPUSH
82124: PPUSH
82125: PPUSH
// sibRocketRange := 25 ;
82126: LD_ADDR_VAR 0 6
82130: PUSH
82131: LD_INT 25
82133: ST_TO_ADDR
// result := false ;
82134: LD_ADDR_VAR 0 4
82138: PUSH
82139: LD_INT 0
82141: ST_TO_ADDR
// for i := 0 to 5 do
82142: LD_ADDR_VAR 0 5
82146: PUSH
82147: DOUBLE
82148: LD_INT 0
82150: DEC
82151: ST_TO_ADDR
82152: LD_INT 5
82154: PUSH
82155: FOR_TO
82156: IFFALSE 82223
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82158: LD_VAR 0 1
82162: PPUSH
82163: LD_VAR 0 5
82167: PPUSH
82168: LD_VAR 0 6
82172: PPUSH
82173: CALL_OW 272
82177: PPUSH
82178: LD_VAR 0 2
82182: PPUSH
82183: LD_VAR 0 5
82187: PPUSH
82188: LD_VAR 0 6
82192: PPUSH
82193: CALL_OW 273
82197: PPUSH
82198: LD_VAR 0 3
82202: PPUSH
82203: CALL_OW 309
82207: IFFALSE 82221
// begin result := true ;
82209: LD_ADDR_VAR 0 4
82213: PUSH
82214: LD_INT 1
82216: ST_TO_ADDR
// exit ;
82217: POP
82218: POP
82219: GO 82225
// end ;
82221: GO 82155
82223: POP
82224: POP
// end ;
82225: LD_VAR 0 4
82229: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82230: LD_INT 0
82232: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82233: LD_VAR 0 1
82237: PPUSH
82238: LD_VAR 0 2
82242: PPUSH
82243: LD_INT 0
82245: PPUSH
82246: LD_INT 0
82248: PPUSH
82249: LD_INT 1
82251: PPUSH
82252: LD_INT 0
82254: PPUSH
82255: CALL_OW 587
// end ;
82259: LD_VAR 0 3
82263: RET
// export function CenterOnNow ( unit ) ; begin
82264: LD_INT 0
82266: PPUSH
// result := IsInUnit ( unit ) ;
82267: LD_ADDR_VAR 0 2
82271: PUSH
82272: LD_VAR 0 1
82276: PPUSH
82277: CALL_OW 310
82281: ST_TO_ADDR
// if not result then
82282: LD_VAR 0 2
82286: NOT
82287: IFFALSE 82299
// result := unit ;
82289: LD_ADDR_VAR 0 2
82293: PUSH
82294: LD_VAR 0 1
82298: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82299: LD_VAR 0 1
82303: PPUSH
82304: CALL_OW 87
// end ;
82308: LD_VAR 0 2
82312: RET
// export function ComMoveHex ( unit , hex ) ; begin
82313: LD_INT 0
82315: PPUSH
// if not hex then
82316: LD_VAR 0 2
82320: NOT
82321: IFFALSE 82325
// exit ;
82323: GO 82378
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82325: LD_VAR 0 2
82329: PUSH
82330: LD_INT 1
82332: ARRAY
82333: PPUSH
82334: LD_VAR 0 2
82338: PUSH
82339: LD_INT 2
82341: ARRAY
82342: PPUSH
82343: CALL_OW 428
82347: IFFALSE 82351
// exit ;
82349: GO 82378
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82351: LD_VAR 0 1
82355: PPUSH
82356: LD_VAR 0 2
82360: PUSH
82361: LD_INT 1
82363: ARRAY
82364: PPUSH
82365: LD_VAR 0 2
82369: PUSH
82370: LD_INT 2
82372: ARRAY
82373: PPUSH
82374: CALL_OW 111
// end ;
82378: LD_VAR 0 3
82382: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82383: LD_INT 0
82385: PPUSH
82386: PPUSH
82387: PPUSH
// if not unit or not enemy then
82388: LD_VAR 0 1
82392: NOT
82393: PUSH
82394: LD_VAR 0 2
82398: NOT
82399: OR
82400: IFFALSE 82404
// exit ;
82402: GO 82528
// x := GetX ( enemy ) ;
82404: LD_ADDR_VAR 0 4
82408: PUSH
82409: LD_VAR 0 2
82413: PPUSH
82414: CALL_OW 250
82418: ST_TO_ADDR
// y := GetY ( enemy ) ;
82419: LD_ADDR_VAR 0 5
82423: PUSH
82424: LD_VAR 0 2
82428: PPUSH
82429: CALL_OW 251
82433: ST_TO_ADDR
// if ValidHex ( x , y ) then
82434: LD_VAR 0 4
82438: PPUSH
82439: LD_VAR 0 5
82443: PPUSH
82444: CALL_OW 488
82448: IFFALSE 82528
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
82450: LD_VAR 0 2
82454: PPUSH
82455: CALL_OW 247
82459: PUSH
82460: LD_INT 3
82462: PUSH
82463: LD_INT 2
82465: PUSH
82466: EMPTY
82467: LIST
82468: LIST
82469: IN
82470: PUSH
82471: LD_VAR 0 1
82475: PPUSH
82476: CALL_OW 255
82480: PPUSH
82481: LD_VAR 0 2
82485: PPUSH
82486: CALL_OW 292
82490: AND
82491: IFFALSE 82509
// ComAttackUnit ( unit , enemy ) else
82493: LD_VAR 0 1
82497: PPUSH
82498: LD_VAR 0 2
82502: PPUSH
82503: CALL_OW 115
82507: GO 82528
// ComAgressiveMove ( unit , x , y ) ;
82509: LD_VAR 0 1
82513: PPUSH
82514: LD_VAR 0 4
82518: PPUSH
82519: LD_VAR 0 5
82523: PPUSH
82524: CALL_OW 114
// end ; end_of_file
82528: LD_VAR 0 3
82532: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82533: LD_VAR 0 1
82537: PUSH
82538: LD_INT 200
82540: DOUBLE
82541: GREATEREQUAL
82542: IFFALSE 82550
82544: LD_INT 299
82546: DOUBLE
82547: LESSEQUAL
82548: IFTRUE 82552
82550: GO 82584
82552: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82553: LD_VAR 0 1
82557: PPUSH
82558: LD_VAR 0 2
82562: PPUSH
82563: LD_VAR 0 3
82567: PPUSH
82568: LD_VAR 0 4
82572: PPUSH
82573: LD_VAR 0 5
82577: PPUSH
82578: CALL 36257 0 5
82582: GO 82661
82584: LD_INT 300
82586: DOUBLE
82587: GREATEREQUAL
82588: IFFALSE 82596
82590: LD_INT 399
82592: DOUBLE
82593: LESSEQUAL
82594: IFTRUE 82598
82596: GO 82660
82598: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82599: LD_VAR 0 1
82603: PPUSH
82604: LD_VAR 0 2
82608: PPUSH
82609: LD_VAR 0 3
82613: PPUSH
82614: LD_VAR 0 4
82618: PPUSH
82619: LD_VAR 0 5
82623: PPUSH
82624: LD_VAR 0 6
82628: PPUSH
82629: LD_VAR 0 7
82633: PPUSH
82634: LD_VAR 0 8
82638: PPUSH
82639: LD_VAR 0 9
82643: PPUSH
82644: LD_VAR 0 10
82648: PPUSH
82649: LD_VAR 0 11
82653: PPUSH
82654: CALL 32582 0 11
82658: GO 82661
82660: POP
// end ;
82661: PPOPN 11
82663: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82664: LD_VAR 0 1
82668: PPUSH
82669: LD_VAR 0 2
82673: PPUSH
82674: LD_VAR 0 3
82678: PPUSH
82679: LD_VAR 0 4
82683: PPUSH
82684: LD_VAR 0 5
82688: PPUSH
82689: CALL 35993 0 5
// end ; end_of_file
82693: PPOPN 5
82695: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82696: LD_VAR 0 1
82700: PPUSH
82701: LD_VAR 0 2
82705: PPUSH
82706: LD_VAR 0 3
82710: PPUSH
82711: LD_VAR 0 4
82715: PPUSH
82716: LD_VAR 0 5
82720: PPUSH
82721: LD_VAR 0 6
82725: PPUSH
82726: CALL 20234 0 6
// end ;
82730: PPOPN 6
82732: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82733: LD_INT 0
82735: PPUSH
// begin if not units then
82736: LD_VAR 0 1
82740: NOT
82741: IFFALSE 82745
// exit ;
82743: GO 82745
// end ;
82745: PPOPN 7
82747: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82748: CALL 20138 0 0
// end ;
82752: PPOPN 1
82754: END
