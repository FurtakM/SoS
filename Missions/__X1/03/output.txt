// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 645 0 0
// PrepareArabian ;
  12: CALL 1008 0 0
// PrepareAmerican ;
  16: CALL 4089 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9238 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanContact , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys , blockAttack , cargoRecycled ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 25
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 10
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanContact := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseSpoted := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanBaseCaptured := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// americanHasEscaped := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// workshopBuilded := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// retreatAllowed := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// allowConvoys := false ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 161: LD_ADDR_EXP 18
 165: PUSH
 166: LD_INT 63000
 168: PUSH
 169: LD_INT 52500
 171: PUSH
 172: LD_INT 42000
 174: PUSH
 175: LD_INT 31500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_OWVAR 67
 188: ARRAY
 189: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 190: LD_ADDR_EXP 21
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// attackWave := 1 ;
 206: LD_ADDR_EXP 20
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// omarCargoCounter := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 214: LD_ADDR_EXP 22
 218: PUSH
 219: LD_INT 5
 221: PUSH
 222: LD_INT 6
 224: PUSH
 225: LD_INT 7
 227: PUSH
 228: LD_INT 8
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: PUSH
 237: LD_OWVAR 67
 241: ARRAY
 242: ST_TO_ADDR
// vehCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// convoyCounter := 0 ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimInDepot := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// ibrahimIsFree := false ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 28
 279: PUSH
 280: LD_INT 16
 282: PUSH
 283: LD_INT 16
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 14
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: LIST
 296: LIST
 297: PUSH
 298: LD_OWVAR 67
 302: ARRAY
 303: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 304: LD_ADDR_EXP 14
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// allowCargoEvacuation := false ;
 312: LD_ADDR_EXP 8
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// americanStartRun := false ;
 320: LD_ADDR_EXP 15
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// blockAttack := false ;
 328: LD_ADDR_EXP 29
 332: PUSH
 333: LD_INT 0
 335: ST_TO_ADDR
// cargoRecycled := false ;
 336: LD_ADDR_EXP 30
 340: PUSH
 341: LD_INT 0
 343: ST_TO_ADDR
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 349: LD_INT 0
 351: PPUSH
// uc_side := side ;
 352: LD_ADDR_OWVAR 20
 356: PUSH
 357: LD_VAR 0 1
 361: ST_TO_ADDR
// uc_nation := nation ;
 362: LD_ADDR_OWVAR 21
 366: PUSH
 367: LD_VAR 0 2
 371: ST_TO_ADDR
// vc_chassis := chassis ;
 372: LD_ADDR_OWVAR 37
 376: PUSH
 377: LD_VAR 0 3
 381: ST_TO_ADDR
// vc_engine := engine ;
 382: LD_ADDR_OWVAR 39
 386: PUSH
 387: LD_VAR 0 4
 391: ST_TO_ADDR
// vc_control := control ;
 392: LD_ADDR_OWVAR 38
 396: PUSH
 397: LD_VAR 0 5
 401: ST_TO_ADDR
// vc_weapon := weapon ;
 402: LD_ADDR_OWVAR 40
 406: PUSH
 407: LD_VAR 0 6
 411: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 412: LD_ADDR_OWVAR 41
 416: PUSH
 417: LD_VAR 0 7
 421: ST_TO_ADDR
// result := CreateVehicle ;
 422: LD_ADDR_VAR 0 8
 426: PUSH
 427: CALL_OW 45
 431: ST_TO_ADDR
// end ;
 432: LD_VAR 0 8
 436: RET
// export function SayX ( units , ident ) ; var i ; begin
 437: LD_INT 0
 439: PPUSH
 440: PPUSH
// result := false ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: LD_INT 0
 448: ST_TO_ADDR
// if not units then
 449: LD_VAR 0 1
 453: NOT
 454: IFFALSE 458
// exit ;
 456: GO 512
// for i in units do
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 1
 467: PUSH
 468: FOR_IN
 469: IFFALSE 510
// if IsOk ( i ) then
 471: LD_VAR 0 4
 475: PPUSH
 476: CALL_OW 302
 480: IFFALSE 508
// begin Say ( i , ident ) ;
 482: LD_VAR 0 4
 486: PPUSH
 487: LD_VAR 0 2
 491: PPUSH
 492: CALL_OW 88
// result := i ;
 496: LD_ADDR_VAR 0 3
 500: PUSH
 501: LD_VAR 0 4
 505: ST_TO_ADDR
// break ;
 506: GO 510
// end ;
 508: GO 468
 510: POP
 511: POP
// end ;
 512: LD_VAR 0 3
 516: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// InitUc ;
 521: CALL_OW 18
// InitHc ;
 525: CALL_OW 19
// uc_side := 0 ;
 529: LD_ADDR_OWVAR 20
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// uc_nation := 0 ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_INT 0
 544: ST_TO_ADDR
// for i = 1 to amount do
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: DOUBLE
 551: LD_INT 1
 553: DEC
 554: ST_TO_ADDR
 555: LD_VAR 0 2
 559: PUSH
 560: FOR_TO
 561: IFFALSE 634
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 563: LD_ADDR_OWVAR 29
 567: PUSH
 568: LD_INT 9
 570: PPUSH
 571: LD_INT 12
 573: PPUSH
 574: CALL_OW 12
 578: PUSH
 579: LD_INT 9
 581: PPUSH
 582: LD_INT 12
 584: PPUSH
 585: CALL_OW 12
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: ST_TO_ADDR
// hc_agressivity := 0 ;
 594: LD_ADDR_OWVAR 35
 598: PUSH
 599: LD_INT 0
 601: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 602: LD_INT 0
 604: PPUSH
 605: LD_INT 12
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 615: CALL_OW 44
 619: PPUSH
 620: LD_VAR 0 1
 624: PPUSH
 625: LD_INT 0
 627: PPUSH
 628: CALL_OW 49
// end ;
 632: GO 560
 634: POP
 635: POP
// InitHc ;
 636: CALL_OW 19
// end ;
 640: LD_VAR 0 3
 644: RET
// export function CreateNature ; var i ; begin
 645: LD_INT 0
 647: PPUSH
 648: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 649: LD_INT 2
 651: PPUSH
 652: LD_INT 5
 654: PUSH
 655: LD_INT 4
 657: PUSH
 658: LD_INT 4
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_OWVAR 67
 674: ARRAY
 675: PPUSH
 676: CALL 517 0 2
// for i := 1 to 2 do
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: DOUBLE
 686: LD_INT 1
 688: DEC
 689: ST_TO_ADDR
 690: LD_INT 2
 692: PUSH
 693: FOR_TO
 694: IFFALSE 729
// begin hc_class := 21 ;
 696: LD_ADDR_OWVAR 28
 700: PUSH
 701: LD_INT 21
 703: ST_TO_ADDR
// hc_gallery :=  ;
 704: LD_ADDR_OWVAR 33
 708: PUSH
 709: LD_STRING 
 711: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 712: CALL_OW 44
 716: PPUSH
 717: LD_INT 2
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 693
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 2
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 780
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_INT 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 49
// end ;
 778: GO 744
 780: POP
 781: POP
// for i := 1 to 2 do
 782: LD_ADDR_VAR 0 2
 786: PUSH
 787: DOUBLE
 788: LD_INT 1
 790: DEC
 791: ST_TO_ADDR
 792: LD_INT 2
 794: PUSH
 795: FOR_TO
 796: IFFALSE 831
// begin hc_class := 13 ;
 798: LD_ADDR_OWVAR 28
 802: PUSH
 803: LD_INT 13
 805: ST_TO_ADDR
// hc_gallery :=  ;
 806: LD_ADDR_OWVAR 33
 810: PUSH
 811: LD_STRING 
 813: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 814: CALL_OW 44
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 795
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 1
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: IFTRUE 857
 850: PUSH
 851: LD_VAR 0 2
 855: NOT
 856: OR
 857: IFFALSE 861
// exit ;
 859: GO 909
// if not See ( GetSide ( observer ) , unit ) then
 861: LD_VAR 0 1
 865: PPUSH
 866: CALL_OW 255
 870: PPUSH
 871: LD_VAR 0 2
 875: PPUSH
 876: CALL_OW 292
 880: NOT
 881: IFFALSE 885
// exit ;
 883: GO 909
// result := GetDistUnits ( observer , unit ) < 12 ;
 885: LD_ADDR_VAR 0 3
 889: PUSH
 890: LD_VAR 0 1
 894: PPUSH
 895: LD_VAR 0 2
 899: PPUSH
 900: CALL_OW 296
 904: PUSH
 905: LD_INT 12
 907: LESS
 908: ST_TO_ADDR
// end ;
 909: LD_VAR 0 3
 913: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 914: LD_INT 0
 916: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 917: LD_VAR 0 2
 921: PUSH
 922: LD_INT 1
 924: ARRAY
 925: PPUSH
 926: LD_VAR 0 2
 930: PUSH
 931: LD_INT 2
 933: ARRAY
 934: PPUSH
 935: CALL_OW 488
 939: IFFALSE 969
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ; end_of_file
1003: LD_VAR 0 4
1007: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
// uc_side := 5 ;
1014: LD_ADDR_OWVAR 20
1018: PUSH
1019: LD_INT 5
1021: ST_TO_ADDR
// uc_nation := 2 ;
1022: LD_ADDR_OWVAR 21
1026: PUSH
1027: LD_INT 2
1029: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1030: LD_INT 5
1032: PPUSH
1033: CALL_OW 274
1037: PPUSH
1038: LD_INT 1
1040: PPUSH
1041: LD_INT 65
1043: PPUSH
1044: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1048: LD_ADDR_EXP 39
1052: PUSH
1053: LD_STRING Farmer
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: LD_STRING 
1061: PPUSH
1062: CALL 41814 0 3
1066: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1067: LD_ADDR_EXP 40
1071: PUSH
1072: LD_STRING Omar
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: LD_STRING 
1080: PPUSH
1081: CALL 41814 0 3
1085: ST_TO_ADDR
// omarSquad := [ ] ;
1086: LD_ADDR_EXP 43
1090: PUSH
1091: EMPTY
1092: ST_TO_ADDR
// heikeSquad := [ ] ;
1093: LD_ADDR_EXP 44
1097: PUSH
1098: EMPTY
1099: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1100: LD_ADDR_EXP 45
1104: PUSH
1105: EMPTY
1106: ST_TO_ADDR
// omarCargo := [ ] ;
1107: LD_ADDR_EXP 46
1111: PUSH
1112: EMPTY
1113: ST_TO_ADDR
// for i := 1 to 5 do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 5
1126: PUSH
1127: FOR_TO
1128: IFFALSE 1286
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1130: LD_INT 0
1132: PPUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 2
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_VAR 0 2
1159: ARRAY
1160: PPUSH
1161: LD_INT 3
1163: PPUSH
1164: CALL_OW 380
// un := CreateHuman ;
1168: LD_ADDR_VAR 0 3
1172: PUSH
1173: CALL_OW 44
1177: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1178: LD_ADDR_EXP 43
1182: PUSH
1183: LD_EXP 43
1187: PUSH
1188: LD_VAR 0 3
1192: UNION
1193: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1194: LD_VAR 0 3
1198: PPUSH
1199: LD_INT 87
1201: PUSH
1202: LD_INT 30
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: PUSH
1209: LD_INT 91
1211: PUSH
1212: LD_INT 32
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 82
1221: PUSH
1222: LD_INT 15
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: PUSH
1229: LD_INT 79
1231: PUSH
1232: LD_INT 14
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 82
1241: PUSH
1242: LD_INT 13
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: PUSH
1256: LD_VAR 0 2
1260: ARRAY
1261: PPUSH
1262: LD_INT 0
1264: PPUSH
1265: CALL 914 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1269: LD_VAR 0 3
1273: PPUSH
1274: LD_INT 93
1276: PPUSH
1277: LD_INT 21
1279: PPUSH
1280: CALL_OW 118
// end ;
1284: GO 1127
1286: POP
1287: POP
// uc_side := 2 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 2
1295: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1296: LD_ADDR_EXP 31
1300: PUSH
1301: LD_STRING Heike
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 41814 0 3
1319: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1320: LD_ADDR_EXP 35
1324: PUSH
1325: LD_STRING Aviradze
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 41814 0 3
1343: ST_TO_ADDR
// tmp := [ ] ;
1344: LD_ADDR_VAR 0 4
1348: PUSH
1349: EMPTY
1350: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1351: LD_ADDR_EXP 32
1355: PUSH
1356: LD_STRING Givi
1358: PPUSH
1359: LD_EXP 1
1363: NOT
1364: PPUSH
1365: LD_EXP 2
1369: PPUSH
1370: CALL 41814 0 3
1374: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1375: LD_ADDR_EXP 33
1379: PUSH
1380: LD_STRING Mike
1382: PPUSH
1383: LD_EXP 1
1387: NOT
1388: PPUSH
1389: LD_EXP 2
1393: PPUSH
1394: CALL 41814 0 3
1398: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1399: LD_ADDR_EXP 34
1403: PUSH
1404: LD_STRING Kamil
1406: PPUSH
1407: LD_EXP 1
1411: NOT
1412: PPUSH
1413: LD_EXP 2
1417: PPUSH
1418: CALL 41814 0 3
1422: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1423: LD_ADDR_EXP 36
1427: PUSH
1428: LD_STRING Kaia
1430: PPUSH
1431: LD_EXP 1
1435: NOT
1436: PPUSH
1437: LD_EXP 2
1441: PPUSH
1442: CALL 41814 0 3
1446: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1447: LD_ADDR_EXP 37
1451: PUSH
1452: LD_STRING Sophia
1454: PPUSH
1455: LD_EXP 1
1459: NOT
1460: PPUSH
1461: LD_EXP 2
1465: PPUSH
1466: CALL 41814 0 3
1470: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1471: LD_ADDR_EXP 38
1475: PUSH
1476: LD_STRING Markov
1478: PPUSH
1479: LD_EXP 1
1483: NOT
1484: PPUSH
1485: LD_EXP 2
1489: PPUSH
1490: CALL 41814 0 3
1494: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1495: LD_ADDR_EXP 45
1499: PUSH
1500: LD_STRING 02_others
1502: PPUSH
1503: CALL_OW 31
1507: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1508: LD_ADDR_VAR 0 4
1512: PUSH
1513: LD_EXP 33
1517: PUSH
1518: LD_EXP 34
1522: PUSH
1523: LD_EXP 36
1527: PUSH
1528: LD_EXP 37
1532: PUSH
1533: LD_EXP 38
1537: PUSH
1538: LD_EXP 32
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: PUSH
1551: LD_EXP 45
1555: ADD
1556: PUSH
1557: LD_INT 0
1559: DIFF
1560: ST_TO_ADDR
// heikeSquad := tmp ;
1561: LD_ADDR_EXP 44
1565: PUSH
1566: LD_VAR 0 4
1570: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1571: LD_EXP 44
1575: PPUSH
1576: LD_INT 25
1578: PUSH
1579: LD_INT 1
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: PPUSH
1586: CALL_OW 72
1590: PUSH
1591: LD_INT 3
1593: LESS
1594: IFFALSE 1644
// begin SetClass ( Kaia , 1 ) ;
1596: LD_EXP 36
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1608: LD_EXP 33
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1620: LD_EXP 32
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1632: LD_EXP 31
1636: PPUSH
1637: LD_INT 1
1639: PPUSH
1640: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: LD_VAR 0 4
1653: PUSH
1654: LD_STRING 02_ape
1656: PPUSH
1657: CALL_OW 31
1661: UNION
1662: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1663: LD_EXP 31
1667: PPUSH
1668: LD_INT 92
1670: PPUSH
1671: LD_INT 17
1673: PPUSH
1674: LD_INT 0
1676: PPUSH
1677: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1681: LD_EXP 39
1685: PPUSH
1686: LD_INT 95
1688: PPUSH
1689: LD_INT 19
1691: PPUSH
1692: LD_INT 0
1694: PPUSH
1695: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1699: LD_EXP 40
1703: PPUSH
1704: LD_INT 89
1706: PPUSH
1707: LD_INT 25
1709: PPUSH
1710: LD_INT 0
1712: PPUSH
1713: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1717: LD_EXP 35
1721: PPUSH
1722: LD_INT 92
1724: PPUSH
1725: LD_INT 27
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1735: LD_EXP 40
1739: PPUSH
1740: LD_EXP 35
1744: PPUSH
1745: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1749: LD_EXP 35
1753: PPUSH
1754: LD_EXP 40
1758: PPUSH
1759: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1763: LD_EXP 31
1767: PUSH
1768: LD_EXP 39
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PPUSH
1777: LD_EXP 40
1781: PPUSH
1782: CALL_OW 119
// if tmp then
1786: LD_VAR 0 4
1790: IFFALSE 1844
// for i in tmp do
1792: LD_ADDR_VAR 0 2
1796: PUSH
1797: LD_VAR 0 4
1801: PUSH
1802: FOR_IN
1803: IFFALSE 1842
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1805: LD_VAR 0 2
1809: PPUSH
1810: LD_INT 94
1812: PPUSH
1813: LD_INT 14
1815: PPUSH
1816: LD_INT 4
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1826: LD_VAR 0 2
1830: PPUSH
1831: LD_EXP 31
1835: PPUSH
1836: CALL_OW 119
// end ;
1840: GO 1802
1842: POP
1843: POP
// farmerSquad := [ ] ;
1844: LD_ADDR_EXP 42
1848: PUSH
1849: EMPTY
1850: ST_TO_ADDR
// uc_side := 5 ;
1851: LD_ADDR_OWVAR 20
1855: PUSH
1856: LD_INT 5
1858: ST_TO_ADDR
// uc_nation := 2 ;
1859: LD_ADDR_OWVAR 21
1863: PUSH
1864: LD_INT 2
1866: ST_TO_ADDR
// for i := 1 to 4 do
1867: LD_ADDR_VAR 0 2
1871: PUSH
1872: DOUBLE
1873: LD_INT 1
1875: DEC
1876: ST_TO_ADDR
1877: LD_INT 4
1879: PUSH
1880: FOR_TO
1881: IFFALSE 1959
// begin PrepareHuman ( false , 1 , 2 ) ;
1883: LD_INT 0
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: LD_INT 2
1891: PPUSH
1892: CALL_OW 380
// un := CreateHuman ;
1896: LD_ADDR_VAR 0 3
1900: PUSH
1901: CALL_OW 44
1905: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1906: LD_VAR 0 3
1910: PPUSH
1911: LD_INT 102
1913: PPUSH
1914: LD_INT 27
1916: PPUSH
1917: LD_INT 4
1919: PPUSH
1920: LD_INT 0
1922: PPUSH
1923: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1927: LD_ADDR_EXP 42
1931: PUSH
1932: LD_EXP 42
1936: PUSH
1937: LD_VAR 0 3
1941: UNION
1942: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
1943: LD_VAR 0 3
1947: PPUSH
1948: LD_EXP 40
1952: PPUSH
1953: CALL_OW 119
// end ;
1957: GO 1880
1959: POP
1960: POP
// for i := 1 to 2 do
1961: LD_ADDR_VAR 0 2
1965: PUSH
1966: DOUBLE
1967: LD_INT 1
1969: DEC
1970: ST_TO_ADDR
1971: LD_INT 2
1973: PUSH
1974: FOR_TO
1975: IFFALSE 2053
// begin PrepareHuman ( false , 2 , 2 ) ;
1977: LD_INT 0
1979: PPUSH
1980: LD_INT 2
1982: PPUSH
1983: LD_INT 2
1985: PPUSH
1986: CALL_OW 380
// un := CreateHuman ;
1990: LD_ADDR_VAR 0 3
1994: PUSH
1995: CALL_OW 44
1999: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2000: LD_VAR 0 3
2004: PPUSH
2005: LD_INT 108
2007: PPUSH
2008: LD_INT 62
2010: PPUSH
2011: LD_INT 2
2013: PPUSH
2014: LD_INT 0
2016: PPUSH
2017: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2021: LD_ADDR_EXP 42
2025: PUSH
2026: LD_EXP 42
2030: PUSH
2031: LD_VAR 0 3
2035: UNION
2036: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2037: LD_VAR 0 3
2041: PPUSH
2042: LD_EXP 40
2046: PPUSH
2047: CALL_OW 119
// end ;
2051: GO 1974
2053: POP
2054: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2055: LD_INT 109
2057: PPUSH
2058: LD_INT 63
2060: PPUSH
2061: LD_INT 2
2063: PPUSH
2064: LD_INT 15
2066: NEG
2067: PPUSH
2068: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2072: LD_INT 109
2074: PPUSH
2075: LD_INT 63
2077: PPUSH
2078: LD_INT 2
2080: PPUSH
2081: CALL_OW 331
// end ;
2085: LD_VAR 0 1
2089: RET
// export function PrepareIbrahim ( x , y ) ; begin
2090: LD_INT 0
2092: PPUSH
// uc_side := 6 ;
2093: LD_ADDR_OWVAR 20
2097: PUSH
2098: LD_INT 6
2100: ST_TO_ADDR
// uc_nation := 3 ;
2101: LD_ADDR_OWVAR 21
2105: PUSH
2106: LD_INT 3
2108: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2109: LD_ADDR_EXP 41
2113: PUSH
2114: LD_STRING IbrahimRu
2116: PPUSH
2117: LD_INT 0
2119: PPUSH
2120: LD_STRING 
2122: PPUSH
2123: CALL 41814 0 3
2127: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2128: LD_EXP 41
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: LD_VAR 0 2
2142: PPUSH
2143: LD_INT 8
2145: PPUSH
2146: LD_INT 1
2148: PPUSH
2149: CALL_OW 50
// end ;
2153: LD_VAR 0 3
2157: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2158: LD_EXP 40
2162: PUSH
2163: LD_EXP 43
2167: ADD
2168: PPUSH
2169: LD_INT 95
2171: PUSH
2172: LD_INT 3
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PPUSH
2179: CALL_OW 72
2183: IFFALSE 2239
2185: GO 2187
2187: DISABLE
2188: LD_INT 0
2190: PPUSH
// begin enable ;
2191: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2192: LD_ADDR_VAR 0 1
2196: PUSH
2197: LD_EXP 40
2201: PUSH
2202: LD_EXP 43
2206: ADD
2207: PPUSH
2208: LD_INT 95
2210: PUSH
2211: LD_INT 3
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL_OW 72
2222: PUSH
2223: FOR_IN
2224: IFFALSE 2237
// RemoveUnit ( i ) ;
2226: LD_VAR 0 1
2230: PPUSH
2231: CALL_OW 64
2235: GO 2223
2237: POP
2238: POP
// end ;
2239: PPOPN 1
2241: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2242: LD_EXP 3
2246: IFFALSE 2262
2248: PUSH
2249: LD_EXP 39
2253: PPUSH
2254: LD_INT 4
2256: PPUSH
2257: CALL_OW 308
2261: AND
2262: IFFALSE 3066
2264: GO 2266
2266: DISABLE
2267: LD_INT 0
2269: PPUSH
2270: PPUSH
2271: PPUSH
2272: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2273: LD_EXP 39
2277: PPUSH
2278: LD_INT 110
2280: PPUSH
2281: LD_INT 60
2283: PPUSH
2284: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2288: LD_EXP 39
2292: PPUSH
2293: LD_INT 110
2295: PPUSH
2296: LD_INT 61
2298: PPUSH
2299: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2303: LD_ADDR_VAR 0 2
2307: PUSH
2308: LD_EXP 42
2312: PPUSH
2313: LD_INT 25
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL_OW 72
2327: ST_TO_ADDR
// if tmp then
2328: LD_VAR 0 2
2332: IFFALSE 2426
// begin for i := 1 to 2 do
2334: LD_ADDR_VAR 0 1
2338: PUSH
2339: DOUBLE
2340: LD_INT 1
2342: DEC
2343: ST_TO_ADDR
2344: LD_INT 2
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2424
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2350: LD_VAR 0 2
2354: PUSH
2355: LD_VAR 0 1
2359: ARRAY
2360: PPUSH
2361: LD_INT 5
2363: PPUSH
2364: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2368: LD_VAR 0 2
2372: PUSH
2373: LD_VAR 0 1
2377: ARRAY
2378: PPUSH
2379: LD_INT 2
2381: PPUSH
2382: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2386: LD_VAR 0 2
2390: PUSH
2391: LD_VAR 0 1
2395: ARRAY
2396: PPUSH
2397: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2401: LD_VAR 0 2
2405: PUSH
2406: LD_VAR 0 1
2410: ARRAY
2411: PPUSH
2412: LD_INT 107
2414: PPUSH
2415: LD_INT 66
2417: PPUSH
2418: CALL_OW 171
// end ;
2422: GO 2347
2424: POP
2425: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2426: LD_ADDR_VAR 0 2
2430: PUSH
2431: LD_EXP 42
2435: PPUSH
2436: LD_INT 25
2438: PUSH
2439: LD_INT 2
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PPUSH
2446: CALL_OW 72
2450: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2451: LD_INT 35
2453: PPUSH
2454: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2458: LD_ADDR_VAR 0 2
2462: PUSH
2463: LD_EXP 42
2467: PPUSH
2468: LD_INT 25
2470: PUSH
2471: LD_INT 2
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PPUSH
2478: CALL_OW 72
2482: ST_TO_ADDR
// until tmp ;
2483: LD_VAR 0 2
2487: IFFALSE 2451
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2489: LD_VAR 0 2
2493: PPUSH
2494: LD_INT 31
2496: PPUSH
2497: LD_INT 102
2499: PPUSH
2500: LD_INT 69
2502: PPUSH
2503: LD_INT 2
2505: PPUSH
2506: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2510: LD_INT 35
2512: PPUSH
2513: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2517: LD_EXP 42
2521: PPUSH
2522: LD_INT 3
2524: PUSH
2525: LD_INT 60
2527: PUSH
2528: EMPTY
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 25
2537: PUSH
2538: LD_INT 2
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PPUSH
2549: CALL_OW 72
2553: IFFALSE 2510
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2555: LD_ADDR_VAR 0 2
2559: PUSH
2560: LD_EXP 42
2564: PPUSH
2565: LD_INT 25
2567: PUSH
2568: LD_INT 2
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PPUSH
2575: CALL_OW 72
2579: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2580: LD_VAR 0 2
2584: PPUSH
2585: LD_INT 6
2587: PPUSH
2588: LD_INT 116
2590: PPUSH
2591: LD_INT 55
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2601: LD_VAR 0 2
2605: PPUSH
2606: LD_INT 4
2608: PPUSH
2609: LD_INT 116
2611: PPUSH
2612: LD_INT 70
2614: PPUSH
2615: LD_INT 5
2617: PPUSH
2618: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2622: LD_VAR 0 2
2626: PPUSH
2627: LD_INT 31
2629: PPUSH
2630: LD_INT 109
2632: PPUSH
2633: LD_INT 50
2635: PPUSH
2636: LD_INT 2
2638: PPUSH
2639: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2643: LD_INT 35
2645: PPUSH
2646: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2650: LD_INT 22
2652: PUSH
2653: LD_INT 5
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PUSH
2660: LD_INT 30
2662: PUSH
2663: LD_INT 4
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: LD_INT 3
2672: PUSH
2673: LD_INT 57
2675: PUSH
2676: EMPTY
2677: LIST
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 69
2692: IFFALSE 2643
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2694: LD_ADDR_VAR 0 3
2698: PUSH
2699: LD_INT 22
2701: PUSH
2702: LD_INT 5
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 30
2711: PUSH
2712: LD_INT 4
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 3
2721: PUSH
2722: LD_INT 57
2724: PUSH
2725: EMPTY
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: LIST
2736: PPUSH
2737: CALL_OW 69
2741: PUSH
2742: LD_INT 1
2744: ARRAY
2745: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2746: LD_ADDR_VAR 0 2
2750: PUSH
2751: LD_EXP 42
2755: PPUSH
2756: LD_INT 25
2758: PUSH
2759: LD_INT 1
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: PPUSH
2766: CALL_OW 72
2770: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2771: LD_VAR 0 2
2775: PPUSH
2776: LD_VAR 0 3
2780: PPUSH
2781: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2785: LD_INT 35
2787: PPUSH
2788: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2792: LD_INT 22
2794: PUSH
2795: LD_INT 5
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 30
2804: PUSH
2805: LD_INT 31
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 3
2814: PUSH
2815: LD_INT 57
2817: PUSH
2818: EMPTY
2819: LIST
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL_OW 69
2834: PUSH
2835: LD_INT 2
2837: GREATEREQUAL
2838: IFFALSE 2785
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2840: LD_ADDR_VAR 0 2
2844: PUSH
2845: LD_EXP 42
2849: PPUSH
2850: LD_INT 25
2852: PUSH
2853: LD_INT 2
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 72
2864: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2865: LD_VAR 0 2
2869: PUSH
2870: LD_INT 1
2872: ARRAY
2873: PPUSH
2874: LD_INT 5
2876: PPUSH
2877: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2881: LD_VAR 0 2
2885: PUSH
2886: LD_INT 2
2888: ARRAY
2889: PUSH
2890: LD_VAR 0 2
2894: PUSH
2895: LD_INT 3
2897: ARRAY
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: PPUSH
2903: LD_VAR 0 3
2907: PPUSH
2908: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2912: LD_VAR 0 2
2916: PUSH
2917: LD_INT 2
2919: ARRAY
2920: PUSH
2921: LD_VAR 0 2
2925: PUSH
2926: LD_INT 3
2928: ARRAY
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PPUSH
2934: LD_INT 1
2936: PPUSH
2937: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2941: LD_VAR 0 2
2945: PUSH
2946: LD_INT 2
2948: ARRAY
2949: PUSH
2950: LD_VAR 0 2
2954: PUSH
2955: LD_INT 3
2957: ARRAY
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PPUSH
2963: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
2967: LD_ADDR_VAR 0 4
2971: PUSH
2972: LD_INT 22
2974: PUSH
2975: LD_INT 5
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: LD_INT 30
2984: PUSH
2985: LD_INT 31
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PPUSH
2996: CALL_OW 69
3000: ST_TO_ADDR
// for i := 1 to 2 do
3001: LD_ADDR_VAR 0 1
3005: PUSH
3006: DOUBLE
3007: LD_INT 1
3009: DEC
3010: ST_TO_ADDR
3011: LD_INT 2
3013: PUSH
3014: FOR_TO
3015: IFFALSE 3049
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3017: LD_VAR 0 2
3021: PUSH
3022: LD_VAR 0 1
3026: PUSH
3027: LD_INT 1
3029: PLUS
3030: ARRAY
3031: PPUSH
3032: LD_VAR 0 4
3036: PUSH
3037: LD_VAR 0 1
3041: ARRAY
3042: PPUSH
3043: CALL_OW 180
3047: GO 3014
3049: POP
3050: POP
// wait ( 1 1$00 ) ;
3051: LD_INT 2100
3053: PPUSH
3054: CALL_OW 67
// farmerBaseReady := true ;
3058: LD_ADDR_EXP 4
3062: PUSH
3063: LD_INT 1
3065: ST_TO_ADDR
// end ;
3066: PPOPN 4
3068: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3069: LD_EXP 4
3073: IFFALSE 3082
3075: PUSH
3076: LD_EXP 12
3080: NOT
3081: AND
3082: IFFALSE 3610
3084: GO 3086
3086: DISABLE
3087: LD_INT 0
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
// begin enable ;
3094: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3095: LD_ADDR_VAR 0 3
3099: PUSH
3100: LD_EXP 42
3104: PPUSH
3105: LD_INT 25
3107: PUSH
3108: LD_INT 1
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 72
3119: PUSH
3120: LD_EXP 39
3124: ADD
3125: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3126: LD_ADDR_VAR 0 2
3130: PUSH
3131: LD_EXP 42
3135: PPUSH
3136: LD_INT 25
3138: PUSH
3139: LD_INT 2
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PPUSH
3146: CALL_OW 72
3150: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3151: LD_ADDR_VAR 0 5
3155: PUSH
3156: LD_INT 22
3158: PUSH
3159: LD_INT 5
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: LD_INT 21
3168: PUSH
3169: LD_INT 3
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PUSH
3176: LD_INT 3
3178: PUSH
3179: LD_INT 24
3181: PUSH
3182: LD_INT 1000
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: LIST
3197: PPUSH
3198: CALL_OW 69
3202: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3203: LD_ADDR_VAR 0 4
3207: PUSH
3208: LD_INT 22
3210: PUSH
3211: LD_INT 5
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 30
3220: PUSH
3221: LD_INT 4
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PPUSH
3232: CALL_OW 69
3236: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3237: LD_VAR 0 4
3241: PUSH
3242: LD_INT 1
3244: ARRAY
3245: PPUSH
3246: CALL_OW 302
3250: IFFALSE 3316
// for i in sol do
3252: LD_ADDR_VAR 0 1
3256: PUSH
3257: LD_VAR 0 3
3261: PUSH
3262: FOR_IN
3263: IFFALSE 3314
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3265: LD_VAR 0 1
3269: PPUSH
3270: CALL_OW 256
3274: PUSH
3275: LD_INT 999
3277: LESS
3278: IFFALSE 3292
3280: PUSH
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 310
3290: NOT
3291: AND
3292: IFFALSE 3312
// ComEnterUnit ( i , arm [ 1 ] ) ;
3294: LD_VAR 0 1
3298: PPUSH
3299: LD_VAR 0 4
3303: PUSH
3304: LD_INT 1
3306: ARRAY
3307: PPUSH
3308: CALL_OW 120
3312: GO 3262
3314: POP
3315: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3316: LD_VAR 0 2
3320: NOT
3321: IFFALSE 3354
3323: PUSH
3324: LD_INT 22
3326: PUSH
3327: LD_INT 1
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 21
3336: PUSH
3337: LD_INT 1
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PPUSH
3348: CALL_OW 69
3352: NOT
3353: AND
3354: IFFALSE 3446
// begin uc_side := 5 ;
3356: LD_ADDR_OWVAR 20
3360: PUSH
3361: LD_INT 5
3363: ST_TO_ADDR
// uc_nation := 2 ;
3364: LD_ADDR_OWVAR 21
3368: PUSH
3369: LD_INT 2
3371: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3372: LD_INT 0
3374: PPUSH
3375: LD_INT 2
3377: PPUSH
3378: LD_INT 2
3380: PPUSH
3381: CALL_OW 380
// eng := CreateHuman ;
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: CALL_OW 44
3394: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3395: LD_VAR 0 2
3399: PPUSH
3400: LD_INT 102
3402: PPUSH
3403: LD_INT 8
3405: PPUSH
3406: LD_INT 0
3408: PPUSH
3409: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3413: LD_VAR 0 2
3417: PPUSH
3418: LD_INT 110
3420: PPUSH
3421: LD_INT 60
3423: PPUSH
3424: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3428: LD_ADDR_EXP 42
3432: PUSH
3433: LD_EXP 42
3437: PUSH
3438: LD_VAR 0 2
3442: UNION
3443: ST_TO_ADDR
// end else
3444: GO 3610
// begin for i in eng do
3446: LD_ADDR_VAR 0 1
3450: PUSH
3451: LD_VAR 0 2
3455: PUSH
3456: FOR_IN
3457: IFFALSE 3608
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3459: LD_INT 10
3461: PPUSH
3462: LD_INT 1
3464: PPUSH
3465: CALL_OW 287
3469: IFFALSE 3520
// begin if IsInUnit ( i ) then
3471: LD_VAR 0 1
3475: PPUSH
3476: CALL_OW 310
3480: IFFALSE 3491
// ComExitBuilding ( i ) ;
3482: LD_VAR 0 1
3486: PPUSH
3487: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_INT 10
3498: PPUSH
3499: CALL_OW 308
3503: NOT
3504: IFFALSE 3518
// AddComMoveToArea ( i , collectFarmerArea ) ;
3506: LD_VAR 0 1
3510: PPUSH
3511: LD_INT 10
3513: PPUSH
3514: CALL_OW 173
// end else
3518: GO 3606
// begin if damagedBuilding then
3520: LD_VAR 0 5
3524: IFFALSE 3568
// begin if IsInUnit ( i ) then
3526: LD_VAR 0 1
3530: PPUSH
3531: CALL_OW 310
3535: IFFALSE 3548
// ComExitBuilding ( i ) else
3537: LD_VAR 0 1
3541: PPUSH
3542: CALL_OW 122
3546: GO 3566
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3548: LD_VAR 0 1
3552: PPUSH
3553: LD_VAR 0 5
3557: PUSH
3558: LD_INT 1
3560: ARRAY
3561: PPUSH
3562: CALL_OW 130
// end else
3566: GO 3606
// if not IsInUnit ( i ) and not HasTask ( i ) then
3568: LD_VAR 0 1
3572: PPUSH
3573: CALL_OW 310
3577: NOT
3578: IFFALSE 3592
3580: PUSH
3581: LD_VAR 0 1
3585: PPUSH
3586: CALL_OW 314
3590: NOT
3591: AND
3592: IFFALSE 3606
// ComEnterUnit ( i , arDepot ) ;
3594: LD_VAR 0 1
3598: PPUSH
3599: LD_INT 5
3601: PPUSH
3602: CALL_OW 120
// end ; end ;
3606: GO 3456
3608: POP
3609: POP
// end ; end ;
3610: PPOPN 5
3612: END
// export function CargoEvacuation ; begin
3613: LD_INT 0
3615: PPUSH
// wait ( 0 0$3 ) ;
3616: LD_INT 105
3618: PPUSH
3619: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3623: LD_ADDR_EXP 22
3627: PUSH
3628: LD_EXP 22
3632: PUSH
3633: LD_INT 1
3635: MINUS
3636: ST_TO_ADDR
// if omarCargoCounter = 0 then
3637: LD_EXP 22
3641: PUSH
3642: LD_INT 0
3644: EQUAL
3645: IFFALSE 3649
// exit ;
3647: GO 3966
// if omarCargo then
3649: LD_EXP 46
3653: IFFALSE 3664
// RemoveUnit ( omarCargo ) ;
3655: LD_EXP 46
3659: PPUSH
3660: CALL_OW 64
// omarCargo := PrepareCargo ;
3664: LD_ADDR_EXP 46
3668: PUSH
3669: CALL 3971 0 0
3673: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3674: LD_EXP 46
3678: PPUSH
3679: LD_INT 0
3681: PPUSH
3682: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3686: LD_EXP 46
3690: PPUSH
3691: LD_INT 107
3693: PPUSH
3694: LD_INT 59
3696: PPUSH
3697: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3701: LD_INT 35
3703: PPUSH
3704: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3708: LD_EXP 46
3712: PPUSH
3713: LD_INT 107
3715: PPUSH
3716: LD_INT 59
3718: PPUSH
3719: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3723: LD_EXP 46
3727: PPUSH
3728: CALL_OW 302
3732: NOT
3733: IFTRUE 3746
3735: PUSH
3736: LD_EXP 46
3740: PPUSH
3741: CALL_OW 301
3745: OR
3746: IFFALSE 3750
// exit ;
3748: GO 3966
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3750: LD_EXP 46
3754: PPUSH
3755: LD_INT 107
3757: PPUSH
3758: LD_INT 59
3760: PPUSH
3761: CALL_OW 307
3765: IFTRUE 3785
3767: PUSH
3768: LD_EXP 46
3772: PPUSH
3773: LD_INT 5
3775: PPUSH
3776: CALL_OW 296
3780: PUSH
3781: LD_INT 6
3783: LESS
3784: OR
3785: IFFALSE 3701
// SetTag ( omarCargo , 1 ) ;
3787: LD_EXP 46
3791: PPUSH
3792: LD_INT 1
3794: PPUSH
3795: CALL_OW 109
// wait ( 0 0$03 ) ;
3799: LD_INT 105
3801: PPUSH
3802: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3806: LD_EXP 46
3810: PPUSH
3811: LD_INT 5
3813: PPUSH
3814: LD_INT 1
3816: PPUSH
3817: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3821: LD_EXP 46
3825: PPUSH
3826: LD_INT 103
3828: PPUSH
3829: LD_INT 9
3831: PPUSH
3832: CALL_OW 171
// wait ( 0 0$1 ) ;
3836: LD_INT 35
3838: PPUSH
3839: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3843: LD_EXP 46
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: LD_INT 100
3853: PPUSH
3854: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3858: LD_INT 35
3860: PPUSH
3861: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3865: LD_EXP 46
3869: PPUSH
3870: LD_INT 103
3872: PPUSH
3873: LD_INT 9
3875: PPUSH
3876: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3880: LD_EXP 46
3884: PPUSH
3885: CALL_OW 302
3889: NOT
3890: IFTRUE 3903
3892: PUSH
3893: LD_EXP 46
3897: PPUSH
3898: CALL_OW 301
3902: OR
3903: IFFALSE 3907
// exit ;
3905: GO 3966
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3907: LD_EXP 46
3911: PPUSH
3912: LD_INT 103
3914: PPUSH
3915: LD_INT 9
3917: PPUSH
3918: CALL_OW 307
3922: IFTRUE 3938
3924: PUSH
3925: LD_EXP 46
3929: PPUSH
3930: LD_INT 3
3932: PPUSH
3933: CALL_OW 308
3937: OR
3938: IFFALSE 3955
3940: PUSH
3941: LD_EXP 46
3945: PPUSH
3946: CALL_OW 110
3950: PUSH
3951: LD_INT 0
3953: GREATER
3954: AND
3955: IFFALSE 3858
// RemoveUnit ( omarCargo ) ;
3957: LD_EXP 46
3961: PPUSH
3962: CALL_OW 64
// end ;
3966: LD_VAR 0 1
3970: RET
// export function PrepareCargo ; var un , veh ; begin
3971: LD_INT 0
3973: PPUSH
3974: PPUSH
3975: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
3976: LD_ADDR_VAR 0 3
3980: PUSH
3981: LD_INT 5
3983: PPUSH
3984: LD_INT 2
3986: PPUSH
3987: LD_INT 14
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_INT 32
3998: PPUSH
3999: LD_INT 80
4001: PPUSH
4002: CALL 349 0 7
4006: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4007: LD_VAR 0 3
4011: PPUSH
4012: LD_INT 4
4014: PPUSH
4015: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_INT 101
4026: PPUSH
4027: LD_INT 8
4029: PPUSH
4030: LD_INT 0
4032: PPUSH
4033: CALL_OW 48
// PrepareHuman ( false , 3 , 4 ) ;
4037: LD_INT 0
4039: PPUSH
4040: LD_INT 3
4042: PPUSH
4043: LD_INT 4
4045: PPUSH
4046: CALL_OW 380
// un := CreateHuman ;
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: CALL_OW 44
4059: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4060: LD_VAR 0 2
4064: PPUSH
4065: LD_VAR 0 3
4069: PPUSH
4070: CALL_OW 52
// result := veh ;
4074: LD_ADDR_VAR 0 1
4078: PUSH
4079: LD_VAR 0 3
4083: ST_TO_ADDR
// end ; end_of_file
4084: LD_VAR 0 1
4088: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4089: LD_INT 0
4091: PPUSH
4092: PPUSH
4093: PPUSH
// usForces := [ ] ;
4094: LD_ADDR_EXP 47
4098: PUSH
4099: EMPTY
4100: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4101: LD_ADDR_EXP 49
4105: PUSH
4106: LD_INT 6
4108: PUSH
4109: LD_INT 32
4111: PUSH
4112: LD_INT 27
4114: PUSH
4115: LD_INT 1
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 4
4126: PUSH
4127: LD_INT 43
4129: PUSH
4130: LD_INT 24
4132: PUSH
4133: LD_INT 5
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 27
4144: PUSH
4145: LD_INT 29
4147: PUSH
4148: LD_INT 21
4150: PUSH
4151: LD_INT 0
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4165: LD_INT 11
4167: PPUSH
4168: CALL_OW 274
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 150
4178: PUSH
4179: LD_INT 120
4181: PUSH
4182: LD_INT 100
4184: PUSH
4185: LD_INT 80
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: PUSH
4194: LD_OWVAR 67
4198: ARRAY
4199: PPUSH
4200: CALL_OW 277
// if Difficulty = 1 then
4204: LD_OWVAR 67
4208: PUSH
4209: LD_INT 1
4211: EQUAL
4212: IFFALSE 4221
// RemoveUnit ( hillBun ) ;
4214: LD_INT 14
4216: PPUSH
4217: CALL_OW 64
// uc_side := 1 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 1
4228: ST_TO_ADDR
// uc_nation := 1 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 1
4236: ST_TO_ADDR
// hc_gallery :=  ;
4237: LD_ADDR_OWVAR 33
4241: PUSH
4242: LD_STRING 
4244: ST_TO_ADDR
// hc_name :=  ;
4245: LD_ADDR_OWVAR 26
4249: PUSH
4250: LD_STRING 
4252: ST_TO_ADDR
// hc_importance := 0 ;
4253: LD_ADDR_OWVAR 32
4257: PUSH
4258: LD_INT 0
4260: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 3
4269: PPUSH
4270: CALL_OW 380
// usCommander := CreateHuman ;
4274: LD_ADDR_EXP 48
4278: PUSH
4279: CALL_OW 44
4283: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4284: LD_EXP 48
4288: PPUSH
4289: LD_INT 11
4291: PPUSH
4292: CALL_OW 52
// if Difficulty > 1 then
4296: LD_OWVAR 67
4300: PUSH
4301: LD_INT 1
4303: GREATER
4304: IFFALSE 4386
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4306: LD_INT 0
4308: PPUSH
4309: LD_INT 1
4311: PPUSH
4312: LD_INT 1
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: LD_INT 3
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: LD_OWVAR 67
4330: ARRAY
4331: PPUSH
4332: CALL_OW 380
// un := CreateHuman ;
4336: LD_ADDR_VAR 0 3
4340: PUSH
4341: CALL_OW 44
4345: ST_TO_ADDR
// usForces := usForces union un ;
4346: LD_ADDR_EXP 47
4350: PUSH
4351: LD_EXP 47
4355: PUSH
4356: LD_VAR 0 3
4360: UNION
4361: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4362: LD_VAR 0 3
4366: PPUSH
4367: LD_INT 1
4369: PPUSH
4370: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4374: LD_VAR 0 3
4378: PPUSH
4379: LD_INT 14
4381: PPUSH
4382: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4386: LD_ADDR_VAR 0 2
4390: PUSH
4391: DOUBLE
4392: LD_INT 1
4394: DEC
4395: ST_TO_ADDR
4396: LD_INT 2
4398: PUSH
4399: LD_INT 3
4401: PUSH
4402: LD_INT 4
4404: PUSH
4405: LD_INT 4
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: PUSH
4414: LD_OWVAR 67
4418: ARRAY
4419: PUSH
4420: FOR_TO
4421: IFFALSE 4567
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4423: LD_INT 0
4425: PPUSH
4426: LD_INT 1
4428: PPUSH
4429: LD_INT 1
4431: PUSH
4432: LD_INT 2
4434: PUSH
4435: LD_INT 3
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: PUSH
4447: LD_OWVAR 67
4451: ARRAY
4452: PPUSH
4453: CALL_OW 380
// un := CreateHuman ;
4457: LD_ADDR_VAR 0 3
4461: PUSH
4462: CALL_OW 44
4466: ST_TO_ADDR
// usForces := usForces union un ;
4467: LD_ADDR_EXP 47
4471: PUSH
4472: LD_EXP 47
4476: PUSH
4477: LD_VAR 0 3
4481: UNION
4482: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4483: LD_VAR 0 3
4487: PPUSH
4488: LD_INT 39
4490: PPUSH
4491: LD_INT 24
4493: PPUSH
4494: LD_INT 4
4496: PPUSH
4497: LD_INT 0
4499: PPUSH
4500: CALL_OW 50
// if i < 3 then
4504: LD_VAR 0 2
4508: PUSH
4509: LD_INT 3
4511: LESS
4512: IFFALSE 4565
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4514: LD_VAR 0 3
4518: PPUSH
4519: LD_INT 22
4521: PUSH
4522: LD_INT 1
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 58
4531: PUSH
4532: EMPTY
4533: LIST
4534: PUSH
4535: LD_INT 30
4537: PUSH
4538: LD_INT 31
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: PPUSH
4550: CALL_OW 69
4554: PUSH
4555: LD_VAR 0 2
4559: ARRAY
4560: PPUSH
4561: CALL_OW 120
// end ;
4565: GO 4420
4567: POP
4568: POP
// for i := 1 to 2 do
4569: LD_ADDR_VAR 0 2
4573: PUSH
4574: DOUBLE
4575: LD_INT 1
4577: DEC
4578: ST_TO_ADDR
4579: LD_INT 2
4581: PUSH
4582: FOR_TO
4583: IFFALSE 4647
// begin PrepareHuman ( false , 2 , 2 ) ;
4585: LD_INT 0
4587: PPUSH
4588: LD_INT 2
4590: PPUSH
4591: LD_INT 2
4593: PPUSH
4594: CALL_OW 380
// un := CreateHuman ;
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: CALL_OW 44
4607: ST_TO_ADDR
// usForces := usForces union un ;
4608: LD_ADDR_EXP 47
4612: PUSH
4613: LD_EXP 47
4617: PUSH
4618: LD_VAR 0 3
4622: UNION
4623: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4624: LD_VAR 0 3
4628: PPUSH
4629: LD_INT 39
4631: PPUSH
4632: LD_INT 24
4634: PPUSH
4635: LD_INT 4
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 50
// end ;
4645: GO 4582
4647: POP
4648: POP
// PrepareHuman ( false , 4 , 1 ) ;
4649: LD_INT 0
4651: PPUSH
4652: LD_INT 4
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: CALL_OW 380
// un := CreateHuman ;
4662: LD_ADDR_VAR 0 3
4666: PUSH
4667: CALL_OW 44
4671: ST_TO_ADDR
// usForces := usForces union un ;
4672: LD_ADDR_EXP 47
4676: PUSH
4677: LD_EXP 47
4681: PUSH
4682: LD_VAR 0 3
4686: UNION
4687: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4688: LD_VAR 0 3
4692: PPUSH
4693: LD_INT 39
4695: PPUSH
4696: LD_INT 24
4698: PPUSH
4699: LD_INT 4
4701: PPUSH
4702: LD_INT 0
4704: PPUSH
4705: CALL_OW 50
// end ;
4709: LD_VAR 0 1
4713: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4714: LD_EXP 47
4718: IFFALSE 4727
4720: PUSH
4721: LD_EXP 7
4725: NOT
4726: AND
4727: IFFALSE 4736
4729: PUSH
4730: LD_EXP 15
4734: NOT
4735: AND
4736: IFFALSE 5169
4738: GO 4740
4740: DISABLE
4741: LD_INT 0
4743: PPUSH
4744: PPUSH
4745: PPUSH
4746: PPUSH
4747: PPUSH
// begin enable ;
4748: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4749: LD_ADDR_VAR 0 3
4753: PUSH
4754: LD_EXP 47
4758: PPUSH
4759: LD_INT 25
4761: PUSH
4762: LD_INT 2
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PPUSH
4769: CALL_OW 72
4773: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4774: LD_ADDR_VAR 0 4
4778: PUSH
4779: LD_EXP 47
4783: PPUSH
4784: LD_INT 25
4786: PUSH
4787: LD_INT 1
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PPUSH
4794: CALL_OW 72
4798: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4799: LD_ADDR_VAR 0 5
4803: PUSH
4804: LD_EXP 47
4808: PPUSH
4809: LD_INT 25
4811: PUSH
4812: LD_INT 4
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PPUSH
4819: CALL_OW 72
4823: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4824: LD_INT 7
4826: PPUSH
4827: LD_INT 22
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PPUSH
4837: CALL_OW 70
4841: PUSH
4842: LD_INT 1
4844: EQUAL
4845: IFFALSE 4923
// for i in sol do
4847: LD_ADDR_VAR 0 1
4851: PUSH
4852: LD_VAR 0 4
4856: PUSH
4857: FOR_IN
4858: IFFALSE 4921
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4860: LD_VAR 0 1
4864: PPUSH
4865: CALL_OW 310
4869: NOT
4870: IFTRUE 4893
4872: PUSH
4873: LD_VAR 0 1
4877: PPUSH
4878: CALL_OW 310
4882: PPUSH
4883: CALL_OW 266
4887: PUSH
4888: LD_INT 4
4890: EQUAL
4891: NOT
4892: OR
4893: IFFALSE 4919
// begin ComExitBuilding ( i ) ;
4895: LD_VAR 0 1
4899: PPUSH
4900: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4904: LD_VAR 0 1
4908: PPUSH
4909: LD_INT 37
4911: PPUSH
4912: LD_INT 23
4914: PPUSH
4915: CALL_OW 174
// end ;
4919: GO 4857
4921: POP
4922: POP
// if eng then
4923: LD_VAR 0 3
4927: IFFALSE 5169
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4929: LD_ADDR_VAR 0 2
4933: PUSH
4934: LD_INT 22
4936: PUSH
4937: LD_INT 1
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 95
4946: PUSH
4947: LD_INT 7
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 21
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 3
4966: PUSH
4967: LD_INT 24
4969: PUSH
4970: LD_INT 1000
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: PPUSH
4987: CALL_OW 69
4991: ST_TO_ADDR
// if b then
4992: LD_VAR 0 2
4996: IFFALSE 5027
// begin ComExitBuilding ( eng ) ;
4998: LD_VAR 0 3
5002: PPUSH
5003: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5007: LD_VAR 0 3
5011: PPUSH
5012: LD_VAR 0 2
5016: PUSH
5017: LD_INT 1
5019: ARRAY
5020: PPUSH
5021: CALL_OW 190
// end else
5025: GO 5169
// begin for i in eng do
5027: LD_ADDR_VAR 0 1
5031: PUSH
5032: LD_VAR 0 3
5036: PUSH
5037: FOR_IN
5038: IFFALSE 5167
// if not HasTask ( i ) then
5040: LD_VAR 0 1
5044: PPUSH
5045: CALL_OW 314
5049: NOT
5050: IFFALSE 5165
// begin if americanBuildList then
5052: LD_EXP 49
5056: IFFALSE 5141
// begin if IsInUnit ( i ) then
5058: LD_VAR 0 1
5062: PPUSH
5063: CALL_OW 310
5067: IFFALSE 5078
// ComExitBuilding ( i ) ;
5069: LD_VAR 0 1
5073: PPUSH
5074: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5078: LD_VAR 0 1
5082: PPUSH
5083: LD_EXP 49
5087: PUSH
5088: LD_INT 1
5090: ARRAY
5091: PUSH
5092: LD_INT 1
5094: ARRAY
5095: PPUSH
5096: LD_EXP 49
5100: PUSH
5101: LD_INT 1
5103: ARRAY
5104: PUSH
5105: LD_INT 2
5107: ARRAY
5108: PPUSH
5109: LD_EXP 49
5113: PUSH
5114: LD_INT 1
5116: ARRAY
5117: PUSH
5118: LD_INT 3
5120: ARRAY
5121: PPUSH
5122: LD_EXP 49
5126: PUSH
5127: LD_INT 1
5129: ARRAY
5130: PUSH
5131: LD_INT 4
5133: ARRAY
5134: PPUSH
5135: CALL_OW 205
// end else
5139: GO 5165
// if not IsInUnit ( i ) then
5141: LD_VAR 0 1
5145: PPUSH
5146: CALL_OW 310
5150: NOT
5151: IFFALSE 5165
// ComEnterUnit ( i , usDepot ) ;
5153: LD_VAR 0 1
5157: PPUSH
5158: LD_INT 11
5160: PPUSH
5161: CALL_OW 120
// end ;
5165: GO 5037
5167: POP
5168: POP
// end ; end ; end ;
5169: PPOPN 5
5171: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5172: LD_INT 0
5174: PPUSH
5175: PPUSH
5176: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5177: LD_ADDR_VAR 0 3
5181: PUSH
5182: LD_INT 35
5184: PUSH
5185: LD_INT 45
5187: PUSH
5188: LD_INT 48
5190: PUSH
5191: LD_INT 82
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: ST_TO_ADDR
// for i in tech do
5200: LD_ADDR_VAR 0 4
5204: PUSH
5205: LD_VAR 0 3
5209: PUSH
5210: FOR_IN
5211: IFFALSE 5229
// AddComResearch ( lab , i ) ;
5213: LD_VAR 0 1
5217: PPUSH
5218: LD_VAR 0 4
5222: PPUSH
5223: CALL_OW 184
5227: GO 5210
5229: POP
5230: POP
// end ;
5231: LD_VAR 0 2
5235: RET
// every 4 4$00 + 3 3$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5236: LD_EXP 13
5240: IFFALSE 5254
5242: PUSH
5243: LD_EXP 24
5247: PUSH
5248: LD_EXP 28
5252: LESSEQUAL
5253: AND
5254: IFFALSE 5279
5256: GO 5258
5258: DISABLE
// begin enable ;
5259: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5260: LD_INT 35
5262: PPUSH
5263: LD_INT 2065
5265: PPUSH
5266: CALL_OW 12
5270: PPUSH
5271: CALL_OW 67
// SendConvoy ;
5275: CALL 5387 0 0
// end ;
5279: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5280: LD_EXP 7
5284: IFFALSE 5292
5286: PUSH
5287: LD_EXP 19
5291: AND
5292: IFFALSE 5386
5294: GO 5296
5296: DISABLE
// begin if americanHasEscaped then
5297: LD_EXP 9
5301: IFFALSE 5312
// wait ( 3 3$20 ) else
5303: LD_INT 7000
5305: PPUSH
5306: CALL_OW 67
5310: GO 5319
// wait ( 6 6$40 ) ;
5312: LD_INT 14000
5314: PPUSH
5315: CALL_OW 67
// SendAttack ;
5319: CALL 6172 0 0
// repeat wait ( [ 7 7$40 , 6 6$40 , 6 6$20 , 5 5$50 ] [ Difficulty ] ) ;
5323: LD_INT 16100
5325: PUSH
5326: LD_INT 14000
5328: PUSH
5329: LD_INT 13300
5331: PUSH
5332: LD_INT 12250
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: LD_OWVAR 67
5345: ARRAY
5346: PPUSH
5347: CALL_OW 67
// SendAttack ;
5351: CALL 6172 0 0
// until attackWave < [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5355: LD_EXP 20
5359: PUSH
5360: LD_INT 5
5362: PUSH
5363: LD_INT 6
5365: PUSH
5366: LD_INT 7
5368: PUSH
5369: LD_INT 8
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: PUSH
5378: LD_OWVAR 67
5382: ARRAY
5383: LESS
5384: IFFALSE 5323
// end ;
5386: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5387: LD_INT 0
5389: PPUSH
5390: PPUSH
5391: PPUSH
5392: PPUSH
5393: PPUSH
5394: PPUSH
5395: PPUSH
5396: PPUSH
// road := rand ( 1 , 2 ) ;
5397: LD_ADDR_VAR 0 4
5401: PUSH
5402: LD_INT 1
5404: PPUSH
5405: LD_INT 2
5407: PPUSH
5408: CALL_OW 12
5412: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5413: LD_ADDR_VAR 0 8
5417: PUSH
5418: LD_INT 3
5420: PUSH
5421: LD_INT 8
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_VAR 0 4
5432: ARRAY
5433: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5434: LD_ADDR_VAR 0 5
5438: PUSH
5439: LD_INT 35
5441: PUSH
5442: LD_INT 66
5444: PUSH
5445: LD_INT 1
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 101
5455: PUSH
5456: LD_INT 8
5458: PUSH
5459: LD_INT 4
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: LIST
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5471: LD_ADDR_VAR 0 6
5475: PUSH
5476: LD_INT 34
5478: PUSH
5479: LD_INT 67
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 38
5488: PUSH
5489: LD_INT 62
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: LD_INT 43
5498: PUSH
5499: LD_INT 54
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PUSH
5506: LD_INT 57
5508: PUSH
5509: LD_INT 57
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 77
5518: PUSH
5519: LD_INT 71
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: LD_INT 86
5528: PUSH
5529: LD_INT 60
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 89
5538: PUSH
5539: LD_INT 35
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 93
5548: PUSH
5549: LD_INT 17
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 97
5558: PUSH
5559: LD_INT 10
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: PUSH
5566: LD_INT 103
5568: PUSH
5569: LD_INT 9
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: ST_TO_ADDR
// if road = 2 then
5588: LD_VAR 0 4
5592: PUSH
5593: LD_INT 2
5595: EQUAL
5596: IFFALSE 5613
// points := ReverseArray ( points ) ;
5598: LD_ADDR_VAR 0 6
5602: PUSH
5603: LD_VAR 0 6
5607: PPUSH
5608: CALL 75036 0 1
5612: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5613: LD_INT 4
5615: PPUSH
5616: LD_INT 1
5618: PPUSH
5619: LD_INT 2
5621: PPUSH
5622: LD_INT 1
5624: PPUSH
5625: LD_INT 1
5627: PPUSH
5628: LD_INT 12
5630: PPUSH
5631: LD_INT 80
5633: PPUSH
5634: CALL 349 0 7
// veh := CreateVehicle ;
5638: LD_ADDR_VAR 0 3
5642: PUSH
5643: CALL_OW 45
5647: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5648: LD_VAR 0 3
5652: PPUSH
5653: LD_VAR 0 5
5657: PUSH
5658: LD_VAR 0 4
5662: ARRAY
5663: PUSH
5664: LD_INT 3
5666: ARRAY
5667: PPUSH
5668: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5672: LD_VAR 0 3
5676: PPUSH
5677: LD_VAR 0 5
5681: PUSH
5682: LD_VAR 0 4
5686: ARRAY
5687: PUSH
5688: LD_INT 1
5690: ARRAY
5691: PPUSH
5692: LD_VAR 0 5
5696: PUSH
5697: LD_VAR 0 4
5701: ARRAY
5702: PUSH
5703: LD_INT 2
5705: ARRAY
5706: PPUSH
5707: LD_INT 0
5709: PPUSH
5710: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5714: LD_INT 0
5716: PPUSH
5717: LD_INT 1
5719: PPUSH
5720: LD_OWVAR 67
5724: PPUSH
5725: CALL_OW 380
// un := CreateHuman ;
5729: LD_ADDR_VAR 0 2
5733: PUSH
5734: CALL_OW 44
5738: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5739: LD_VAR 0 2
5743: PPUSH
5744: LD_VAR 0 3
5748: PPUSH
5749: CALL_OW 52
// if ( Prob ( [ 70 , 66 , 62 , 58 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5753: LD_INT 70
5755: PUSH
5756: LD_INT 66
5758: PUSH
5759: LD_INT 62
5761: PUSH
5762: LD_INT 58
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: PUSH
5771: LD_OWVAR 67
5775: ARRAY
5776: PPUSH
5777: CALL_OW 13
5781: PUSH
5782: LD_OWVAR 1
5786: PUSH
5787: LD_INT 30
5789: MOD
5790: PLUS
5791: IFTRUE 5803
5793: PUSH
5794: LD_EXP 24
5798: PUSH
5799: LD_INT 4
5801: LESS
5802: OR
5803: IFFALSE 5820
// SetCargo ( veh , mat_cans , 100 ) ;
5805: LD_VAR 0 3
5809: PPUSH
5810: LD_INT 1
5812: PPUSH
5813: LD_INT 100
5815: PPUSH
5816: CALL_OW 290
// for i := 2 to points do
5820: LD_ADDR_VAR 0 7
5824: PUSH
5825: DOUBLE
5826: LD_INT 2
5828: DEC
5829: ST_TO_ADDR
5830: LD_VAR 0 6
5834: PUSH
5835: FOR_TO
5836: IFFALSE 5879
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5838: LD_VAR 0 3
5842: PPUSH
5843: LD_VAR 0 6
5847: PUSH
5848: LD_VAR 0 7
5852: ARRAY
5853: PUSH
5854: LD_INT 1
5856: ARRAY
5857: PPUSH
5858: LD_VAR 0 6
5862: PUSH
5863: LD_VAR 0 7
5867: ARRAY
5868: PUSH
5869: LD_INT 2
5871: ARRAY
5872: PPUSH
5873: CALL_OW 171
5877: GO 5835
5879: POP
5880: POP
// convoyCounter := convoyCounter + 1 ;
5881: LD_ADDR_EXP 24
5885: PUSH
5886: LD_EXP 24
5890: PUSH
5891: LD_INT 1
5893: PLUS
5894: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5895: LD_INT 35
5897: PPUSH
5898: CALL_OW 67
// if GetSide ( veh ) <> 4 then
5902: LD_VAR 0 3
5906: PPUSH
5907: CALL_OW 255
5911: PUSH
5912: LD_INT 4
5914: NONEQUAL
5915: IFFALSE 5928
// begin ComStop ( veh ) ;
5917: LD_VAR 0 3
5921: PPUSH
5922: CALL_OW 141
// exit ;
5926: GO 6167
// end ; if not HasTask ( veh ) and IsOk ( veh ) then
5928: LD_VAR 0 3
5932: PPUSH
5933: CALL_OW 314
5937: NOT
5938: IFFALSE 5951
5940: PUSH
5941: LD_VAR 0 3
5945: PPUSH
5946: CALL_OW 302
5950: AND
5951: IFFALSE 5992
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5953: LD_VAR 0 3
5957: PPUSH
5958: LD_VAR 0 6
5962: PUSH
5963: LD_VAR 0 6
5967: ARRAY
5968: PUSH
5969: LD_INT 1
5971: ARRAY
5972: PPUSH
5973: LD_VAR 0 6
5977: PUSH
5978: LD_VAR 0 6
5982: ARRAY
5983: PUSH
5984: LD_INT 2
5986: ARRAY
5987: PPUSH
5988: CALL_OW 111
// if not IsInUnit ( un ) then
5992: LD_VAR 0 2
5996: PPUSH
5997: CALL_OW 310
6001: NOT
6002: IFFALSE 6043
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6004: LD_VAR 0 2
6008: PPUSH
6009: LD_VAR 0 6
6013: PUSH
6014: LD_VAR 0 6
6018: ARRAY
6019: PUSH
6020: LD_INT 1
6022: ARRAY
6023: PPUSH
6024: LD_VAR 0 6
6028: PUSH
6029: LD_VAR 0 6
6033: ARRAY
6034: PUSH
6035: LD_INT 2
6037: ARRAY
6038: PPUSH
6039: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6043: LD_VAR 0 3
6047: PPUSH
6048: LD_VAR 0 8
6052: PPUSH
6053: CALL_OW 308
6057: IFTRUE 6075
6059: PUSH
6060: LD_VAR 0 2
6064: PPUSH
6065: LD_VAR 0 8
6069: PPUSH
6070: CALL_OW 308
6074: OR
6075: IFFALSE 5895
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6077: LD_VAR 0 2
6081: PPUSH
6082: CALL_OW 302
6086: IFFALSE 6100
6088: PUSH
6089: LD_VAR 0 3
6093: PPUSH
6094: CALL_OW 302
6098: NOT
6099: AND
6100: IFFALSE 6118
6102: PUSH
6103: LD_VAR 0 2
6107: PPUSH
6108: LD_VAR 0 8
6112: PPUSH
6113: CALL_OW 308
6117: AND
6118: IFFALSE 6129
// RemoveUnit ( un ) ;
6120: LD_VAR 0 2
6124: PPUSH
6125: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6129: LD_VAR 0 3
6133: PPUSH
6134: LD_VAR 0 8
6138: PPUSH
6139: CALL_OW 308
6143: IFFALSE 6156
6145: PUSH
6146: LD_VAR 0 3
6150: PPUSH
6151: CALL_OW 302
6155: AND
6156: IFFALSE 6167
// RemoveUnit ( veh ) ;
6158: LD_VAR 0 3
6162: PPUSH
6163: CALL_OW 64
// end ;
6167: LD_VAR 0 1
6171: RET
// export function SendAttack ; var un , veh , i ; begin
6172: LD_INT 0
6174: PPUSH
6175: PPUSH
6176: PPUSH
6177: PPUSH
// if blockAttack then
6178: LD_EXP 29
6182: IFFALSE 6205
// begin repeat wait ( 0 0$1 ) ;
6184: LD_INT 35
6186: PPUSH
6187: CALL_OW 67
// until not blockAttack ;
6191: LD_EXP 29
6195: NOT
6196: IFFALSE 6184
// wait ( 0 0$5 ) ;
6198: LD_INT 175
6200: PPUSH
6201: CALL_OW 67
// end ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 10 then
6205: LD_INT 22
6207: PUSH
6208: LD_INT 1
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 21
6217: PUSH
6218: LD_INT 1
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PPUSH
6229: CALL_OW 69
6233: PUSH
6234: LD_INT 10
6236: GREATER
6237: IFFALSE 6280
// begin repeat wait ( 0 0$1 ) ;
6239: LD_INT 35
6241: PPUSH
6242: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 10 ;
6246: LD_INT 22
6248: PUSH
6249: LD_INT 1
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 21
6258: PUSH
6259: LD_INT 1
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 69
6274: PUSH
6275: LD_INT 10
6277: LESSEQUAL
6278: IFFALSE 6239
// end ; IncomingAttack ;
6280: CALL 15716 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6284: LD_INT 2100
6286: PPUSH
6287: LD_INT 3500
6289: PPUSH
6290: CALL_OW 12
6294: PPUSH
6295: CALL_OW 67
// if blockAttack then
6299: LD_EXP 29
6303: IFFALSE 6326
// begin repeat wait ( 0 0$1 ) ;
6305: LD_INT 35
6307: PPUSH
6308: CALL_OW 67
// until not blockAttack ;
6312: LD_EXP 29
6316: NOT
6317: IFFALSE 6305
// wait ( 0 0$5 ) ;
6319: LD_INT 175
6321: PPUSH
6322: CALL_OW 67
// end ; for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6326: LD_ADDR_VAR 0 4
6330: PUSH
6331: DOUBLE
6332: LD_INT 1
6334: DEC
6335: ST_TO_ADDR
6336: LD_INT 3
6338: PUSH
6339: LD_INT 4
6341: PUSH
6342: LD_INT 4
6344: PUSH
6345: LD_INT 5
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: PUSH
6354: LD_OWVAR 67
6358: ARRAY
6359: PUSH
6360: LD_EXP 20
6364: PUSH
6365: LD_INT 3
6367: DIV
6368: PLUS
6369: PUSH
6370: FOR_TO
6371: IFFALSE 6487
// begin uc_side := 1 ;
6373: LD_ADDR_OWVAR 20
6377: PUSH
6378: LD_INT 1
6380: ST_TO_ADDR
// uc_nation := 1 ;
6381: LD_ADDR_OWVAR 21
6385: PUSH
6386: LD_INT 1
6388: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6389: LD_INT 0
6391: PPUSH
6392: LD_INT 1
6394: PPUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 3
6400: PUSH
6401: LD_INT 4
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: PUSH
6413: LD_OWVAR 67
6417: ARRAY
6418: PPUSH
6419: CALL_OW 380
// un := CreateHuman ;
6423: LD_ADDR_VAR 0 2
6427: PUSH
6428: CALL_OW 44
6432: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6433: LD_VAR 0 2
6437: PPUSH
6438: LD_INT 37
6440: PPUSH
6441: LD_INT 70
6443: PPUSH
6444: LD_INT 3
6446: PPUSH
6447: LD_INT 0
6449: PPUSH
6450: CALL_OW 50
// usAttackers := usAttackers union un ;
6454: LD_ADDR_EXP 50
6458: PUSH
6459: LD_EXP 50
6463: PUSH
6464: LD_VAR 0 2
6468: UNION
6469: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6470: LD_VAR 0 2
6474: PPUSH
6475: LD_INT 40
6477: PPUSH
6478: LD_INT 65
6480: PPUSH
6481: CALL_OW 111
// end ;
6485: GO 6370
6487: POP
6488: POP
// uc_side := 1 ;
6489: LD_ADDR_OWVAR 20
6493: PUSH
6494: LD_INT 1
6496: ST_TO_ADDR
// uc_nation := 1 ;
6497: LD_ADDR_OWVAR 21
6501: PUSH
6502: LD_INT 1
6504: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6505: LD_INT 0
6507: PPUSH
6508: LD_INT 4
6510: PPUSH
6511: LD_INT 2
6513: PPUSH
6514: CALL_OW 380
// un := CreateHuman ;
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: CALL_OW 44
6527: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6528: LD_VAR 0 2
6532: PPUSH
6533: LD_INT 37
6535: PPUSH
6536: LD_INT 70
6538: PPUSH
6539: LD_INT 3
6541: PPUSH
6542: LD_INT 0
6544: PPUSH
6545: CALL_OW 50
// usAttackers := usAttackers union un ;
6549: LD_ADDR_EXP 50
6553: PUSH
6554: LD_EXP 50
6558: PUSH
6559: LD_VAR 0 2
6563: UNION
6564: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6565: LD_VAR 0 2
6569: PPUSH
6570: LD_INT 40
6572: PPUSH
6573: LD_INT 65
6575: PPUSH
6576: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6580: LD_ADDR_VAR 0 4
6584: PUSH
6585: DOUBLE
6586: LD_INT 1
6588: DEC
6589: ST_TO_ADDR
6590: LD_OWVAR 67
6594: PUSH
6595: LD_EXP 20
6599: PUSH
6600: LD_INT 4
6602: DIV
6603: PLUS
6604: PUSH
6605: FOR_TO
6606: IFFALSE 6802
// begin veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 3 ) ] , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6608: LD_ADDR_VAR 0 3
6612: PUSH
6613: LD_INT 1
6615: PPUSH
6616: LD_INT 1
6618: PPUSH
6619: LD_INT 2
6621: PUSH
6622: LD_INT 2
6624: PUSH
6625: LD_INT 3
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 1
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 12
6643: ARRAY
6644: PPUSH
6645: LD_INT 1
6647: PPUSH
6648: LD_INT 1
6650: PPUSH
6651: LD_INT 4
6653: PUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 2
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: PUSH
6665: LD_INT 1
6667: PPUSH
6668: LD_INT 3
6670: PPUSH
6671: CALL_OW 12
6675: ARRAY
6676: PPUSH
6677: LD_INT 90
6679: PPUSH
6680: CALL 349 0 7
6684: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6685: LD_VAR 0 3
6689: PPUSH
6690: LD_INT 35
6692: PPUSH
6693: LD_INT 65
6695: PPUSH
6696: LD_INT 0
6698: PPUSH
6699: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6703: LD_INT 0
6705: PPUSH
6706: LD_INT 3
6708: PPUSH
6709: LD_OWVAR 67
6713: PUSH
6714: LD_INT 1
6716: PLUS
6717: PPUSH
6718: CALL_OW 380
// un := CreateHuman ;
6722: LD_ADDR_VAR 0 2
6726: PUSH
6727: CALL_OW 44
6731: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6732: LD_VAR 0 2
6736: PPUSH
6737: LD_VAR 0 3
6741: PPUSH
6742: CALL_OW 52
// usAttackers := usAttackers union un ;
6746: LD_ADDR_EXP 50
6750: PUSH
6751: LD_EXP 50
6755: PUSH
6756: LD_VAR 0 2
6760: UNION
6761: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6762: LD_VAR 0 3
6766: PPUSH
6767: LD_INT 39
6769: PPUSH
6770: LD_INT 60
6772: PPUSH
6773: CALL_OW 111
// wait ( 0 0$3 ) ;
6777: LD_INT 105
6779: PPUSH
6780: CALL_OW 67
// usAttackers := usAttackers union veh ;
6784: LD_ADDR_EXP 50
6788: PUSH
6789: LD_EXP 50
6793: PUSH
6794: LD_VAR 0 3
6798: UNION
6799: ST_TO_ADDR
// end ;
6800: GO 6605
6802: POP
6803: POP
// attackWave := attackWave + 1 ;
6804: LD_ADDR_EXP 20
6808: PUSH
6809: LD_EXP 20
6813: PUSH
6814: LD_INT 1
6816: PLUS
6817: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6818: LD_EXP 25
6822: PPUSH
6823: CALL_OW 427
// end ;
6827: LD_VAR 0 1
6831: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6832: LD_INT 0
6834: PPUSH
6835: PPUSH
6836: PPUSH
6837: PPUSH
6838: PPUSH
6839: PPUSH
6840: PPUSH
6841: PPUSH
6842: PPUSH
6843: PPUSH
6844: PPUSH
// if retreatAllowed then
6845: LD_EXP 12
6849: IFFALSE 6861
// strategy := 2 else
6851: LD_ADDR_VAR 0 5
6855: PUSH
6856: LD_INT 2
6858: ST_TO_ADDR
6859: GO 6877
// strategy := rand ( 0 , 2 ) ;
6861: LD_ADDR_VAR 0 5
6865: PUSH
6866: LD_INT 0
6868: PPUSH
6869: LD_INT 2
6871: PPUSH
6872: CALL_OW 12
6876: ST_TO_ADDR
// attackFormula := [ ] ;
6877: LD_ADDR_VAR 0 6
6881: PUSH
6882: EMPTY
6883: ST_TO_ADDR
// case strategy of 0 :
6884: LD_VAR 0 5
6888: PUSH
6889: LD_INT 0
6891: DOUBLE
6892: EQUAL
6893: IFTRUE 6897
6895: GO 7227
6897: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6898: LD_INT 11
6900: PPUSH
6901: LD_INT 22
6903: PUSH
6904: LD_INT 2
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: LD_INT 30
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PPUSH
6925: CALL_OW 70
6929: NOT
6930: IFFALSE 7002
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6932: LD_ADDR_VAR 0 6
6936: PUSH
6937: LD_INT 41
6939: PUSH
6940: LD_INT 34
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PUSH
6947: EMPTY
6948: LIST
6949: PUSH
6950: LD_INT 53
6952: PUSH
6953: LD_INT 62
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 37
6962: PUSH
6963: LD_INT 63
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 44
6972: PUSH
6973: LD_INT 45
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 37
6982: PUSH
6983: LD_INT 28
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: ST_TO_ADDR
7000: GO 7225
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
7002: LD_INT 12
7004: PPUSH
7005: LD_INT 22
7007: PUSH
7008: LD_INT 2
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 2
7017: PUSH
7018: LD_INT 30
7020: PUSH
7021: LD_INT 4
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 30
7030: PUSH
7031: LD_INT 31
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 30
7040: PUSH
7041: LD_INT 32
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 70
7062: NOT
7063: IFFALSE 7146
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7065: LD_ADDR_VAR 0 6
7069: PUSH
7070: LD_INT 27
7072: PUSH
7073: LD_INT 42
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 27
7082: PUSH
7083: LD_INT 32
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 53
7096: PUSH
7097: LD_INT 62
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: LD_INT 37
7106: PUSH
7107: LD_INT 63
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 44
7116: PUSH
7117: LD_INT 45
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 37
7126: PUSH
7127: LD_INT 28
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: ST_TO_ADDR
7144: GO 7225
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7146: LD_ADDR_VAR 0 6
7150: PUSH
7151: LD_INT 71
7153: PUSH
7154: LD_INT 67
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 54
7163: PUSH
7164: LD_INT 35
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 63
7177: PUSH
7178: LD_INT 40
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 37
7187: PUSH
7188: LD_INT 63
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 44
7197: PUSH
7198: LD_INT 45
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 37
7207: PUSH
7208: LD_INT 28
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: ST_TO_ADDR
// end ; 1 :
7225: GO 7430
7227: LD_INT 1
7229: DOUBLE
7230: EQUAL
7231: IFTRUE 7235
7233: GO 7339
7235: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7236: LD_ADDR_VAR 0 6
7240: PUSH
7241: LD_INT 71
7243: PUSH
7244: LD_INT 67
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 82
7253: PUSH
7254: LD_INT 23
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 53
7263: PUSH
7264: LD_INT 7
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 43
7273: PUSH
7274: LD_INT 10
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 53
7289: PUSH
7290: LD_INT 62
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 37
7299: PUSH
7300: LD_INT 63
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 44
7309: PUSH
7310: LD_INT 45
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 37
7319: PUSH
7320: LD_INT 28
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: ST_TO_ADDR
7337: GO 7430
7339: LD_INT 2
7341: DOUBLE
7342: EQUAL
7343: IFTRUE 7347
7345: GO 7429
7347: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7348: LD_ADDR_VAR 0 6
7352: PUSH
7353: LD_INT 90
7355: PUSH
7356: LD_INT 59
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 108
7365: PUSH
7366: LD_INT 64
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: LD_INT 82
7379: PUSH
7380: LD_INT 75
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PUSH
7387: LD_INT 73
7389: PUSH
7390: LD_INT 67
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 101
7399: PUSH
7400: LD_INT 65
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 108
7409: PUSH
7410: LD_INT 62
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: ST_TO_ADDR
7427: GO 7430
7429: POP
// if not attackFormula then
7430: LD_VAR 0 6
7434: NOT
7435: IFFALSE 7439
// exit ;
7437: GO 9125
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7439: LD_ADDR_VAR 0 7
7443: PUSH
7444: LD_EXP 50
7448: PPUSH
7449: LD_INT 25
7451: PUSH
7452: LD_INT 1
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PPUSH
7459: CALL_OW 72
7463: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7464: LD_ADDR_VAR 0 8
7468: PUSH
7469: LD_EXP 50
7473: PPUSH
7474: LD_INT 25
7476: PUSH
7477: LD_INT 4
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PPUSH
7484: CALL_OW 72
7488: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7489: LD_ADDR_VAR 0 9
7493: PUSH
7494: LD_EXP 50
7498: PPUSH
7499: LD_INT 25
7501: PUSH
7502: LD_INT 3
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PPUSH
7509: CALL_OW 72
7513: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7514: LD_ADDR_VAR 0 10
7518: PUSH
7519: LD_EXP 50
7523: PPUSH
7524: LD_INT 21
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PPUSH
7534: CALL_OW 72
7538: ST_TO_ADDR
// if sci then
7539: LD_VAR 0 8
7543: IFFALSE 7580
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7545: LD_VAR 0 8
7549: PPUSH
7550: LD_VAR 0 6
7554: PUSH
7555: LD_INT 2
7557: ARRAY
7558: PUSH
7559: LD_INT 1
7561: ARRAY
7562: PPUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 2
7570: ARRAY
7571: PUSH
7572: LD_INT 2
7574: ARRAY
7575: PPUSH
7576: CALL_OW 111
// repeat wait ( 10 ) ;
7580: LD_INT 10
7582: PPUSH
7583: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7587: LD_ADDR_VAR 0 7
7591: PUSH
7592: LD_EXP 50
7596: PPUSH
7597: LD_INT 25
7599: PUSH
7600: LD_INT 1
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PPUSH
7607: CALL_OW 72
7611: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7612: LD_ADDR_VAR 0 8
7616: PUSH
7617: LD_EXP 50
7621: PPUSH
7622: LD_INT 25
7624: PUSH
7625: LD_INT 4
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PPUSH
7632: CALL_OW 72
7636: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7637: LD_ADDR_VAR 0 9
7641: PUSH
7642: LD_EXP 50
7646: PPUSH
7647: LD_INT 25
7649: PUSH
7650: LD_INT 3
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PPUSH
7657: CALL_OW 72
7661: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7662: LD_ADDR_VAR 0 10
7666: PUSH
7667: LD_EXP 50
7671: PPUSH
7672: LD_INT 21
7674: PUSH
7675: LD_INT 2
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PPUSH
7682: CALL_OW 72
7686: ST_TO_ADDR
// if sol then
7687: LD_VAR 0 7
7691: IFFALSE 8112
// begin for i in sol do
7693: LD_ADDR_VAR 0 2
7697: PUSH
7698: LD_VAR 0 7
7702: PUSH
7703: FOR_IN
7704: IFFALSE 8110
// begin tag := GetTag ( i ) ;
7706: LD_ADDR_VAR 0 4
7710: PUSH
7711: LD_VAR 0 2
7715: PPUSH
7716: CALL_OW 110
7720: ST_TO_ADDR
// if not tag then
7721: LD_VAR 0 4
7725: NOT
7726: IFFALSE 7835
// begin if GetLives ( i ) = 1000 then
7728: LD_VAR 0 2
7732: PPUSH
7733: CALL_OW 256
7737: PUSH
7738: LD_INT 1000
7740: EQUAL
7741: IFFALSE 7757
// SetTag ( i , 1 ) else
7743: LD_VAR 0 2
7747: PPUSH
7748: LD_INT 1
7750: PPUSH
7751: CALL_OW 109
7755: GO 7833
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7757: LD_VAR 0 2
7761: PPUSH
7762: LD_VAR 0 6
7766: PUSH
7767: LD_INT 2
7769: ARRAY
7770: PUSH
7771: LD_INT 1
7773: ARRAY
7774: PPUSH
7775: LD_VAR 0 6
7779: PUSH
7780: LD_INT 2
7782: ARRAY
7783: PUSH
7784: LD_INT 2
7786: ARRAY
7787: PPUSH
7788: CALL_OW 297
7792: PUSH
7793: LD_INT 10
7795: GREATER
7796: IFFALSE 7833
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7798: LD_VAR 0 2
7802: PPUSH
7803: LD_VAR 0 6
7807: PUSH
7808: LD_INT 2
7810: ARRAY
7811: PUSH
7812: LD_INT 1
7814: ARRAY
7815: PPUSH
7816: LD_VAR 0 6
7820: PUSH
7821: LD_INT 2
7823: ARRAY
7824: PUSH
7825: LD_INT 2
7827: ARRAY
7828: PPUSH
7829: CALL_OW 111
// end else
7833: GO 8108
// begin if GetLives ( i ) < 760 then
7835: LD_VAR 0 2
7839: PPUSH
7840: CALL_OW 256
7844: PUSH
7845: LD_INT 760
7847: LESS
7848: IFFALSE 7899
// begin SetTag ( i , 0 ) ;
7850: LD_VAR 0 2
7854: PPUSH
7855: LD_INT 0
7857: PPUSH
7858: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7862: LD_VAR 0 2
7866: PPUSH
7867: LD_VAR 0 6
7871: PUSH
7872: LD_INT 2
7874: ARRAY
7875: PUSH
7876: LD_INT 1
7878: ARRAY
7879: PPUSH
7880: LD_VAR 0 6
7884: PUSH
7885: LD_INT 2
7887: ARRAY
7888: PUSH
7889: LD_INT 2
7891: ARRAY
7892: PPUSH
7893: CALL_OW 111
// end else
7897: GO 8108
// if tag <= attackFormula [ 1 ] then
7899: LD_VAR 0 4
7903: PUSH
7904: LD_VAR 0 6
7908: PUSH
7909: LD_INT 1
7911: ARRAY
7912: LESSEQUAL
7913: IFFALSE 8074
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7915: LD_VAR 0 2
7919: PPUSH
7920: LD_VAR 0 6
7924: PUSH
7925: LD_INT 1
7927: ARRAY
7928: PUSH
7929: LD_VAR 0 4
7933: ARRAY
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PPUSH
7939: LD_VAR 0 6
7943: PUSH
7944: LD_INT 1
7946: ARRAY
7947: PUSH
7948: LD_VAR 0 4
7952: ARRAY
7953: PUSH
7954: LD_INT 2
7956: ARRAY
7957: PPUSH
7958: CALL_OW 297
7962: PUSH
7963: LD_INT 6
7965: GREATER
7966: IFFALSE 8017
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7968: LD_VAR 0 2
7972: PPUSH
7973: LD_VAR 0 6
7977: PUSH
7978: LD_INT 1
7980: ARRAY
7981: PUSH
7982: LD_VAR 0 4
7986: ARRAY
7987: PUSH
7988: LD_INT 1
7990: ARRAY
7991: PPUSH
7992: LD_VAR 0 6
7996: PUSH
7997: LD_INT 1
7999: ARRAY
8000: PUSH
8001: LD_VAR 0 4
8005: ARRAY
8006: PUSH
8007: LD_INT 2
8009: ARRAY
8010: PPUSH
8011: CALL_OW 114
8015: GO 8072
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8017: LD_INT 81
8019: PUSH
8020: LD_INT 1
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 91
8029: PUSH
8030: LD_VAR 0 2
8034: PUSH
8035: LD_INT 10
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PPUSH
8047: CALL_OW 69
8051: NOT
8052: IFFALSE 8072
// SetTag ( i , tag + 1 ) ;
8054: LD_VAR 0 2
8058: PPUSH
8059: LD_VAR 0 4
8063: PUSH
8064: LD_INT 1
8066: PLUS
8067: PPUSH
8068: CALL_OW 109
// end else
8072: GO 8108
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8074: LD_VAR 0 2
8078: PPUSH
8079: LD_INT 81
8081: PUSH
8082: LD_INT 1
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: PPUSH
8089: CALL_OW 69
8093: PPUSH
8094: LD_VAR 0 2
8098: PPUSH
8099: CALL_OW 74
8103: PPUSH
8104: CALL_OW 115
// end ; end ;
8108: GO 7703
8110: POP
8111: POP
// end ; if sci then
8112: LD_VAR 0 8
8116: IFFALSE 8387
// begin if not sol and not mech then
8118: LD_VAR 0 7
8122: NOT
8123: IFFALSE 8132
8125: PUSH
8126: LD_VAR 0 9
8130: NOT
8131: AND
8132: IFFALSE 8184
// begin for i in sci do
8134: LD_ADDR_VAR 0 2
8138: PUSH
8139: LD_VAR 0 8
8143: PUSH
8144: FOR_IN
8145: IFFALSE 8180
// begin usForces := usForces union i ;
8147: LD_ADDR_EXP 47
8151: PUSH
8152: LD_EXP 47
8156: PUSH
8157: LD_VAR 0 2
8161: UNION
8162: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8163: LD_VAR 0 2
8167: PPUSH
8168: LD_INT 34
8170: PPUSH
8171: LD_INT 68
8173: PPUSH
8174: CALL_OW 111
// end ;
8178: GO 8144
8180: POP
8181: POP
// end else
8182: GO 8387
// for i in sci do
8184: LD_ADDR_VAR 0 2
8188: PUSH
8189: LD_VAR 0 8
8193: PUSH
8194: FOR_IN
8195: IFFALSE 8385
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8197: LD_VAR 0 2
8201: PPUSH
8202: LD_VAR 0 6
8206: PUSH
8207: LD_INT 2
8209: ARRAY
8210: PUSH
8211: LD_INT 1
8213: ARRAY
8214: PPUSH
8215: LD_VAR 0 6
8219: PUSH
8220: LD_INT 2
8222: ARRAY
8223: PUSH
8224: LD_INT 2
8226: ARRAY
8227: PPUSH
8228: CALL_OW 297
8232: PUSH
8233: LD_INT 10
8235: GREATER
8236: IFFALSE 8275
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8238: LD_VAR 0 2
8242: PPUSH
8243: LD_VAR 0 6
8247: PUSH
8248: LD_INT 2
8250: ARRAY
8251: PUSH
8252: LD_INT 1
8254: ARRAY
8255: PPUSH
8256: LD_VAR 0 6
8260: PUSH
8261: LD_INT 2
8263: ARRAY
8264: PUSH
8265: LD_INT 2
8267: ARRAY
8268: PPUSH
8269: CALL_OW 111
8273: GO 8383
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8275: LD_VAR 0 7
8279: PPUSH
8280: LD_INT 3
8282: PUSH
8283: LD_INT 24
8285: PUSH
8286: LD_INT 1000
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: LD_INT 91
8299: PUSH
8300: LD_VAR 0 2
8304: PUSH
8305: LD_INT 10
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: LIST
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PPUSH
8317: CALL_OW 72
8321: IFFALSE 8383
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8323: LD_VAR 0 2
8327: PPUSH
8328: LD_VAR 0 7
8332: PPUSH
8333: LD_INT 3
8335: PUSH
8336: LD_INT 24
8338: PUSH
8339: LD_INT 1000
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: LD_INT 91
8352: PUSH
8353: LD_VAR 0 2
8357: PUSH
8358: LD_INT 10
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: LIST
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PPUSH
8370: CALL_OW 72
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PPUSH
8379: CALL_OW 128
8383: GO 8194
8385: POP
8386: POP
// end ; if mech then
8387: LD_VAR 0 9
8391: IFFALSE 9107
// begin for i in mech do
8393: LD_ADDR_VAR 0 2
8397: PUSH
8398: LD_VAR 0 9
8402: PUSH
8403: FOR_IN
8404: IFFALSE 9105
// begin tag := GetTag ( i ) ;
8406: LD_ADDR_VAR 0 4
8410: PUSH
8411: LD_VAR 0 2
8415: PPUSH
8416: CALL_OW 110
8420: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8421: LD_ADDR_VAR 0 11
8425: PUSH
8426: LD_VAR 0 2
8430: PPUSH
8431: CALL_OW 310
8435: ST_TO_ADDR
// if not tag then
8436: LD_VAR 0 4
8440: NOT
8441: IFFALSE 8816
// begin if veh then
8443: LD_VAR 0 11
8447: IFFALSE 8618
// begin if GetLives ( veh ) = 1000 then
8449: LD_VAR 0 11
8453: PPUSH
8454: CALL_OW 256
8458: PUSH
8459: LD_INT 1000
8461: EQUAL
8462: IFFALSE 8478
// SetTag ( i , 1 ) else
8464: LD_VAR 0 2
8468: PPUSH
8469: LD_INT 1
8471: PPUSH
8472: CALL_OW 109
8476: GO 8616
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8478: LD_VAR 0 11
8482: PPUSH
8483: LD_VAR 0 6
8487: PUSH
8488: LD_INT 3
8490: ARRAY
8491: PUSH
8492: LD_INT 1
8494: ARRAY
8495: PPUSH
8496: LD_VAR 0 6
8500: PUSH
8501: LD_INT 3
8503: ARRAY
8504: PUSH
8505: LD_INT 2
8507: ARRAY
8508: PPUSH
8509: CALL_OW 297
8513: PUSH
8514: LD_INT 8
8516: GREATER
8517: IFFALSE 8556
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8519: LD_VAR 0 11
8523: PPUSH
8524: LD_VAR 0 6
8528: PUSH
8529: LD_INT 3
8531: ARRAY
8532: PUSH
8533: LD_INT 1
8535: ARRAY
8536: PPUSH
8537: LD_VAR 0 6
8541: PUSH
8542: LD_INT 3
8544: ARRAY
8545: PUSH
8546: LD_INT 2
8548: ARRAY
8549: PPUSH
8550: CALL_OW 111
8554: GO 8616
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 12 ] ] ) then
8556: LD_INT 81
8558: PUSH
8559: LD_INT 1
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 91
8568: PUSH
8569: LD_VAR 0 2
8573: PUSH
8574: LD_INT 12
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PPUSH
8586: CALL_OW 69
8590: NOT
8591: IFFALSE 8616
// begin ComExitVehicle ( i ) ;
8593: LD_VAR 0 2
8597: PPUSH
8598: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8602: LD_VAR 0 2
8606: PPUSH
8607: LD_VAR 0 11
8611: PPUSH
8612: CALL_OW 189
// end ; end else
8616: GO 8814
// if GetLives ( i ) < 400 then
8618: LD_VAR 0 2
8622: PPUSH
8623: CALL_OW 256
8627: PUSH
8628: LD_INT 400
8630: LESS
8631: IFFALSE 8682
// begin usAttackers := usAttackers diff i ;
8633: LD_ADDR_EXP 50
8637: PUSH
8638: LD_EXP 50
8642: PUSH
8643: LD_VAR 0 2
8647: DIFF
8648: ST_TO_ADDR
// usForces := usForces union i ;
8649: LD_ADDR_EXP 47
8653: PUSH
8654: LD_EXP 47
8658: PUSH
8659: LD_VAR 0 2
8663: UNION
8664: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: LD_INT 34
8672: PPUSH
8673: LD_INT 68
8675: PPUSH
8676: CALL_OW 111
// end else
8680: GO 8814
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8682: LD_VAR 0 10
8686: PPUSH
8687: LD_INT 58
8689: PUSH
8690: EMPTY
8691: LIST
8692: PUSH
8693: LD_INT 24
8695: PUSH
8696: LD_INT 1000
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 72
8711: IFFALSE 8725
8713: PUSH
8714: LD_VAR 0 2
8718: PPUSH
8719: CALL_OW 314
8723: NOT
8724: AND
8725: IFTRUE 8763
8727: PUSH
8728: LD_INT 81
8730: PUSH
8731: LD_INT 1
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: LD_INT 91
8740: PUSH
8741: LD_VAR 0 2
8745: PUSH
8746: LD_INT 9
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PPUSH
8758: CALL_OW 69
8762: OR
8763: IFFALSE 8814
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8765: LD_VAR 0 2
8769: PPUSH
8770: LD_VAR 0 10
8774: PPUSH
8775: LD_INT 58
8777: PUSH
8778: EMPTY
8779: LIST
8780: PUSH
8781: LD_INT 24
8783: PUSH
8784: LD_INT 250
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PPUSH
8795: CALL_OW 72
8799: PPUSH
8800: LD_VAR 0 2
8804: PPUSH
8805: CALL_OW 74
8809: PPUSH
8810: CALL_OW 120
// end else
8814: GO 9103
// begin if veh and GetLives ( veh ) < 760 then
8816: LD_VAR 0 11
8820: IFFALSE 8837
8822: PUSH
8823: LD_VAR 0 11
8827: PPUSH
8828: CALL_OW 256
8832: PUSH
8833: LD_INT 760
8835: LESS
8836: AND
8837: IFFALSE 8888
// begin SetTag ( i , 0 ) ;
8839: LD_VAR 0 2
8843: PPUSH
8844: LD_INT 0
8846: PPUSH
8847: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8851: LD_VAR 0 11
8855: PPUSH
8856: LD_VAR 0 6
8860: PUSH
8861: LD_INT 3
8863: ARRAY
8864: PUSH
8865: LD_INT 1
8867: ARRAY
8868: PPUSH
8869: LD_VAR 0 6
8873: PUSH
8874: LD_INT 3
8876: ARRAY
8877: PUSH
8878: LD_INT 2
8880: ARRAY
8881: PPUSH
8882: CALL_OW 111
// end else
8886: GO 9103
// if veh then
8888: LD_VAR 0 11
8892: IFFALSE 9103
// if tag <= attackFormula [ 4 ] then
8894: LD_VAR 0 4
8898: PUSH
8899: LD_VAR 0 6
8903: PUSH
8904: LD_INT 4
8906: ARRAY
8907: LESSEQUAL
8908: IFFALSE 9069
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8910: LD_VAR 0 11
8914: PPUSH
8915: LD_VAR 0 6
8919: PUSH
8920: LD_INT 4
8922: ARRAY
8923: PUSH
8924: LD_VAR 0 4
8928: ARRAY
8929: PUSH
8930: LD_INT 1
8932: ARRAY
8933: PPUSH
8934: LD_VAR 0 6
8938: PUSH
8939: LD_INT 4
8941: ARRAY
8942: PUSH
8943: LD_VAR 0 4
8947: ARRAY
8948: PUSH
8949: LD_INT 2
8951: ARRAY
8952: PPUSH
8953: CALL_OW 297
8957: PUSH
8958: LD_INT 6
8960: GREATER
8961: IFFALSE 9012
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8963: LD_VAR 0 11
8967: PPUSH
8968: LD_VAR 0 6
8972: PUSH
8973: LD_INT 4
8975: ARRAY
8976: PUSH
8977: LD_VAR 0 4
8981: ARRAY
8982: PUSH
8983: LD_INT 1
8985: ARRAY
8986: PPUSH
8987: LD_VAR 0 6
8991: PUSH
8992: LD_INT 4
8994: ARRAY
8995: PUSH
8996: LD_VAR 0 4
9000: ARRAY
9001: PUSH
9002: LD_INT 2
9004: ARRAY
9005: PPUSH
9006: CALL_OW 114
9010: GO 9067
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
9012: LD_INT 81
9014: PUSH
9015: LD_INT 1
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 91
9024: PUSH
9025: LD_VAR 0 11
9029: PUSH
9030: LD_INT 10
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: LIST
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PPUSH
9042: CALL_OW 69
9046: NOT
9047: IFFALSE 9067
// SetTag ( i , tag + 1 ) ;
9049: LD_VAR 0 2
9053: PPUSH
9054: LD_VAR 0 4
9058: PUSH
9059: LD_INT 1
9061: PLUS
9062: PPUSH
9063: CALL_OW 109
// end else
9067: GO 9103
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9069: LD_VAR 0 11
9073: PPUSH
9074: LD_INT 81
9076: PUSH
9077: LD_INT 1
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PPUSH
9084: CALL_OW 69
9088: PPUSH
9089: LD_VAR 0 2
9093: PPUSH
9094: CALL_OW 74
9098: PPUSH
9099: CALL_OW 115
// end ; end ;
9103: GO 8403
9105: POP
9106: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
9107: LD_EXP 50
9111: PPUSH
9112: LD_INT 52
9114: PUSH
9115: EMPTY
9116: LIST
9117: PPUSH
9118: CALL_OW 72
9122: NOT
9123: IFFALSE 7580
// end ;
9125: LD_VAR 0 1
9129: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9130: LD_INT 22
9132: PUSH
9133: LD_INT 1
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: LD_INT 32
9142: PUSH
9143: LD_INT 1
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 69
9158: IFFALSE 9235
9160: GO 9162
9162: DISABLE
9163: LD_INT 0
9165: PPUSH
// begin enable ;
9166: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9167: LD_ADDR_VAR 0 1
9171: PUSH
9172: LD_INT 22
9174: PUSH
9175: LD_INT 1
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: LD_INT 32
9184: PUSH
9185: LD_INT 1
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PPUSH
9196: CALL_OW 69
9200: PUSH
9201: FOR_IN
9202: IFFALSE 9233
// if GetFuel ( i ) < 10 then
9204: LD_VAR 0 1
9208: PPUSH
9209: CALL_OW 261
9213: PUSH
9214: LD_INT 10
9216: LESS
9217: IFFALSE 9231
// SetFuel ( i , 10 ) ;
9219: LD_VAR 0 1
9223: PPUSH
9224: LD_INT 10
9226: PPUSH
9227: CALL_OW 240
9231: GO 9201
9233: POP
9234: POP
// end ; end_of_file
9235: PPOPN 1
9237: END
// export function Action ; var hasAll , i , tmp ; begin
9238: LD_INT 0
9240: PPUSH
9241: PPUSH
9242: PPUSH
9243: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9244: LD_ADDR_VAR 0 2
9248: PUSH
9249: LD_INT 22
9251: PUSH
9252: LD_INT 2
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 21
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 23
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: LIST
9283: PPUSH
9284: CALL_OW 69
9288: PUSH
9289: LD_INT 7
9291: GREATEREQUAL
9292: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9293: LD_VAR 0 2
9297: PPUSH
9298: LD_STRING 03_HasAll
9300: PPUSH
9301: CALL_OW 39
// Video ( true ) ;
9305: LD_INT 1
9307: PPUSH
9308: CALL 79918 0 1
// CenterNowOnUnits ( Heike ) ;
9312: LD_EXP 31
9316: PPUSH
9317: CALL_OW 87
// wait ( 0 0$2 ) ;
9321: LD_INT 70
9323: PPUSH
9324: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9328: LD_EXP 39
9332: PPUSH
9333: LD_STRING DF-1-start
9335: PPUSH
9336: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9340: LD_EXP 31
9344: PPUSH
9345: LD_EXP 39
9349: PPUSH
9350: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9354: LD_EXP 31
9358: PPUSH
9359: LD_STRING DH-1-start
9361: PPUSH
9362: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9366: LD_EXP 40
9370: PPUSH
9371: LD_INT 92
9373: PPUSH
9374: LD_INT 21
9376: PPUSH
9377: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9381: LD_EXP 35
9385: PPUSH
9386: LD_INT 94
9388: PPUSH
9389: LD_INT 23
9391: PPUSH
9392: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9396: LD_EXP 43
9400: PUSH
9401: LD_INT 1
9403: ARRAY
9404: PPUSH
9405: LD_INT 90
9407: PPUSH
9408: LD_INT 23
9410: PPUSH
9411: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9415: LD_EXP 43
9419: PUSH
9420: LD_INT 2
9422: ARRAY
9423: PPUSH
9424: LD_INT 93
9426: PPUSH
9427: LD_INT 25
9429: PPUSH
9430: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9434: LD_EXP 43
9438: PPUSH
9439: LD_EXP 40
9443: PPUSH
9444: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9448: LD_EXP 40
9452: PUSH
9453: LD_EXP 35
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PPUSH
9462: LD_EXP 31
9466: PPUSH
9467: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9471: LD_EXP 31
9475: PPUSH
9476: LD_EXP 40
9480: PPUSH
9481: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9485: LD_INT 35
9487: PPUSH
9488: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9492: LD_EXP 40
9496: PPUSH
9497: LD_INT 92
9499: PPUSH
9500: LD_INT 21
9502: PPUSH
9503: CALL_OW 307
9507: IFFALSE 9485
// Say ( Omar , DO-1-start ) ;
9509: LD_EXP 40
9513: PPUSH
9514: LD_STRING DO-1-start
9516: PPUSH
9517: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9521: LD_EXP 31
9525: PPUSH
9526: LD_STRING DH-2-start
9528: PPUSH
9529: CALL_OW 88
// if hasAll then
9533: LD_VAR 0 2
9537: IFFALSE 9665
// begin Say ( Omar , DO-2-start ) ;
9539: LD_EXP 40
9543: PPUSH
9544: LD_STRING DO-2-start
9546: PPUSH
9547: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9551: LD_EXP 40
9555: PPUSH
9556: LD_STRING DO-3-start
9558: PPUSH
9559: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9563: LD_EXP 31
9567: PPUSH
9568: LD_STRING DH-3-start
9570: PPUSH
9571: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9575: LD_EXP 39
9579: PPUSH
9580: LD_STRING DF-2-start
9582: PPUSH
9583: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9587: LD_EXP 40
9591: PPUSH
9592: LD_EXP 39
9596: PPUSH
9597: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9601: LD_EXP 40
9605: PPUSH
9606: LD_STRING DO-4-start
9608: PPUSH
9609: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9613: LD_EXP 39
9617: PPUSH
9618: LD_STRING DF-3-start
9620: PPUSH
9621: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9625: LD_EXP 40
9629: PPUSH
9630: LD_STRING DO-5-start
9632: PPUSH
9633: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9637: LD_EXP 39
9641: PPUSH
9642: LD_STRING DF-4-start
9644: PPUSH
9645: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9649: LD_EXP 40
9653: PPUSH
9654: LD_EXP 31
9658: PPUSH
9659: CALL_OW 119
// end else
9663: GO 9765
// begin Say ( Omar , DO-2-start-a ) ;
9665: LD_EXP 40
9669: PPUSH
9670: LD_STRING DO-2-start-a
9672: PPUSH
9673: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9677: LD_EXP 40
9681: PPUSH
9682: LD_STRING DO-3-start-a
9684: PPUSH
9685: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9689: LD_EXP 31
9693: PPUSH
9694: LD_STRING DH-3-start-a
9696: PPUSH
9697: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9701: LD_EXP 39
9705: PPUSH
9706: LD_STRING DF-2-start-a
9708: PPUSH
9709: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9713: LD_EXP 40
9717: PPUSH
9718: LD_EXP 39
9722: PPUSH
9723: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9727: LD_EXP 40
9731: PPUSH
9732: LD_STRING DO-4-start-a
9734: PPUSH
9735: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9739: LD_EXP 39
9743: PPUSH
9744: LD_STRING DF-3-start-a
9746: PPUSH
9747: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9751: LD_EXP 40
9755: PPUSH
9756: LD_EXP 31
9760: PPUSH
9761: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9765: LD_INT 10
9767: PPUSH
9768: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9772: LD_EXP 40
9776: PPUSH
9777: LD_STRING DO-1-mission
9779: PPUSH
9780: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9784: LD_EXP 40
9788: PPUSH
9789: LD_STRING DO-2-mission
9791: PPUSH
9792: CALL_OW 88
// if not hasAll then
9796: LD_VAR 0 2
9800: NOT
9801: IFFALSE 9815
// Say ( Omar , DO-3-mission ) ;
9803: LD_EXP 40
9807: PPUSH
9808: LD_STRING DO-3-mission
9810: PPUSH
9811: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9815: LD_EXP 40
9819: PPUSH
9820: LD_STRING DO-4-mission
9822: PPUSH
9823: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9827: LD_EXP 31
9831: PPUSH
9832: LD_STRING DH-1-mission
9834: PPUSH
9835: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9839: LD_EXP 39
9843: PPUSH
9844: LD_STRING DF-1-mission
9846: PPUSH
9847: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9851: LD_EXP 40
9855: PPUSH
9856: LD_STRING DO-5-mission
9858: PPUSH
9859: CALL_OW 88
// if not hasAll then
9863: LD_VAR 0 2
9867: NOT
9868: IFFALSE 10003
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9870: LD_ADDR_VAR 0 4
9874: PUSH
9875: LD_INT 22
9877: PUSH
9878: LD_INT 2
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: LD_INT 21
9887: PUSH
9888: LD_INT 1
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 23
9897: PUSH
9898: LD_INT 2
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: PPUSH
9910: CALL_OW 69
9914: ST_TO_ADDR
// for i := 7 downto tmp do
9915: LD_ADDR_VAR 0 3
9919: PUSH
9920: DOUBLE
9921: LD_INT 7
9923: INC
9924: ST_TO_ADDR
9925: LD_VAR 0 4
9929: PUSH
9930: FOR_DOWNTO
9931: IFFALSE 10001
// begin if omarSquad < 3 then
9933: LD_EXP 43
9937: PUSH
9938: LD_INT 3
9940: LESS
9941: IFFALSE 9945
// break ;
9943: GO 10001
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9945: LD_EXP 43
9949: PUSH
9950: LD_INT 3
9952: ARRAY
9953: PPUSH
9954: LD_INT 2
9956: PPUSH
9957: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9961: LD_ADDR_EXP 45
9965: PUSH
9966: LD_EXP 45
9970: PUSH
9971: LD_EXP 43
9975: PUSH
9976: LD_INT 3
9978: ARRAY
9979: UNION
9980: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9981: LD_ADDR_EXP 43
9985: PUSH
9986: LD_EXP 43
9990: PPUSH
9991: LD_INT 3
9993: PPUSH
9994: CALL_OW 3
9998: ST_TO_ADDR
// end ;
9999: GO 9930
10001: POP
10002: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
10003: LD_EXP 40
10007: PUSH
10008: LD_EXP 43
10012: ADD
10013: PPUSH
10014: LD_INT 103
10016: PPUSH
10017: LD_INT 9
10019: PPUSH
10020: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
10024: LD_VAR 0 2
10028: IFFALSE 10041
10030: PUSH
10031: LD_EXP 36
10035: PPUSH
10036: CALL_OW 302
10040: AND
10041: IFFALSE 10102
// begin wait ( 0 0$3 ) ;
10043: LD_INT 105
10045: PPUSH
10046: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
10050: LD_EXP 36
10054: PPUSH
10055: LD_EXP 39
10059: PPUSH
10060: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10064: LD_EXP 36
10068: PPUSH
10069: LD_STRING DK-1-side
10071: PPUSH
10072: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10076: LD_EXP 39
10080: PPUSH
10081: LD_EXP 36
10085: PPUSH
10086: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10090: LD_EXP 39
10094: PPUSH
10095: LD_STRING DF-1-side
10097: PPUSH
10098: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10102: LD_INT 22
10104: PUSH
10105: LD_INT 2
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PPUSH
10112: CALL_OW 69
10116: PPUSH
10117: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10121: LD_EXP 39
10125: PUSH
10126: LD_EXP 42
10130: ADD
10131: PPUSH
10132: LD_INT 108
10134: PPUSH
10135: LD_INT 62
10137: PPUSH
10138: CALL_OW 111
// gameStarted := true ;
10142: LD_ADDR_EXP 3
10146: PUSH
10147: LD_INT 1
10149: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10150: LD_INT 105
10152: PPUSH
10153: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10157: LD_EXP 31
10161: PPUSH
10162: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10166: LD_EXP 31
10170: PPUSH
10171: LD_EXP 35
10175: PPUSH
10176: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10180: LD_INT 22
10182: PUSH
10183: LD_INT 2
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PPUSH
10190: CALL_OW 69
10194: PUSH
10195: LD_EXP 31
10199: DIFF
10200: PPUSH
10201: LD_EXP 31
10205: PPUSH
10206: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10210: LD_EXP 31
10214: PPUSH
10215: LD_STRING DH-1-explore
10217: PPUSH
10218: CALL_OW 88
// if Givi then
10222: LD_EXP 32
10226: IFFALSE 10242
// Say ( Givi , DG-1-explore ) else
10228: LD_EXP 32
10232: PPUSH
10233: LD_STRING DG-1-explore
10235: PPUSH
10236: CALL_OW 88
10240: GO 10279
// if heikeSecondSquad then
10242: LD_EXP 45
10246: IFFALSE 10279
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10248: LD_EXP 45
10252: PPUSH
10253: LD_INT 26
10255: PUSH
10256: LD_INT 1
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PPUSH
10263: CALL_OW 72
10267: PUSH
10268: LD_INT 1
10270: ARRAY
10271: PPUSH
10272: LD_STRING DArm-1-explore
10274: PPUSH
10275: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10279: LD_EXP 35
10283: PPUSH
10284: LD_STRING DA-1-explore
10286: PPUSH
10287: CALL_OW 88
// if Sophia then
10291: LD_EXP 37
10295: IFFALSE 10373
// begin Say ( Sophia , DS-2-explore ) ;
10297: LD_EXP 37
10301: PPUSH
10302: LD_STRING DS-2-explore
10304: PPUSH
10305: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10309: LD_EXP 35
10313: PPUSH
10314: LD_STRING DA-2-explore
10316: PPUSH
10317: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10321: LD_EXP 37
10325: PPUSH
10326: LD_EXP 35
10330: PPUSH
10331: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10335: LD_EXP 35
10339: PPUSH
10340: LD_EXP 37
10344: PPUSH
10345: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10349: LD_EXP 37
10353: PPUSH
10354: LD_STRING DS-3-explore
10356: PPUSH
10357: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10361: LD_EXP 35
10365: PPUSH
10366: LD_STRING DA-3-explore
10368: PPUSH
10369: CALL_OW 88
// end ; if Mike then
10373: LD_EXP 33
10377: IFFALSE 10433
// begin Say ( Mike , DM-1-explore ) ;
10379: LD_EXP 33
10383: PPUSH
10384: LD_STRING DM-1-explore
10386: PPUSH
10387: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10391: LD_EXP 31
10395: PPUSH
10396: LD_STRING DH-2-explore
10398: PPUSH
10399: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10403: LD_EXP 33
10407: PPUSH
10408: LD_STRING DM-2-explore
10410: PPUSH
10411: CALL_OW 88
// if Kaia then
10415: LD_EXP 36
10419: IFFALSE 10433
// Say ( Kaia , DK-1-explore ) ;
10421: LD_EXP 36
10425: PPUSH
10426: LD_STRING DK-1-explore
10428: PPUSH
10429: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10433: LD_INT 22
10435: PUSH
10436: LD_INT 2
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PPUSH
10443: CALL_OW 69
10447: PPUSH
10448: CALL_OW 139
// Video ( false ) ;
10452: LD_INT 0
10454: PPUSH
10455: CALL 79918 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10459: LD_STRING BuildBase
10461: PPUSH
10462: CALL_OW 337
// SaveForQuickRestart ;
10466: CALL_OW 22
// end ;
10470: LD_VAR 0 1
10474: RET
// every 0 0$3 + 0 0$2 trigger americanContact and not americanBaseCaptured do
10475: LD_EXP 5
10479: IFFALSE 10488
10481: PUSH
10482: LD_EXP 7
10486: NOT
10487: AND
10488: IFFALSE 10679
10490: GO 10492
10492: DISABLE
// begin Say ( usCommander , DUsm-4-assault ) ;
10493: LD_EXP 48
10497: PPUSH
10498: LD_STRING DUsm-4-assault
10500: PPUSH
10501: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10505: LD_INT 35
10507: PPUSH
10508: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10512: LD_INT 22
10514: PUSH
10515: LD_INT 2
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 21
10524: PUSH
10525: LD_INT 1
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 50
10534: PUSH
10535: EMPTY
10536: LIST
10537: PUSH
10538: LD_INT 95
10540: PUSH
10541: LD_INT 7
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: PPUSH
10554: CALL_OW 69
10558: IFFALSE 10505
// if not IsOk ( usCommander ) or americanBaseCaptured then
10560: LD_EXP 48
10564: PPUSH
10565: CALL_OW 302
10569: NOT
10570: IFTRUE 10578
10572: PUSH
10573: LD_EXP 7
10577: OR
10578: IFFALSE 10582
// exit ;
10580: GO 10679
// repeat wait ( 0 0$1 ) ;
10582: LD_INT 35
10584: PPUSH
10585: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , americanBaseArea ] ] ) ;
10589: LD_INT 22
10591: PUSH
10592: LD_INT 2
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 21
10601: PUSH
10602: LD_INT 1
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 50
10611: PUSH
10612: EMPTY
10613: LIST
10614: PUSH
10615: LD_INT 95
10617: PUSH
10618: LD_INT 7
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 69
10635: NOT
10636: IFFALSE 10582
// wait ( 0 0$3 ) ;
10638: LD_INT 105
10640: PPUSH
10641: CALL_OW 67
// if not IsOk ( usCommander ) or americanBaseCaptured then
10645: LD_EXP 48
10649: PPUSH
10650: CALL_OW 302
10654: NOT
10655: IFTRUE 10663
10657: PUSH
10658: LD_EXP 7
10662: OR
10663: IFFALSE 10667
// exit ;
10665: GO 10679
// Say ( usCommander , DUsm-3-assault ) ;
10667: LD_EXP 48
10671: PPUSH
10672: LD_STRING DUsm-3-assault
10674: PPUSH
10675: CALL_OW 88
// end ;
10679: END
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseCaptured do
10680: LD_EXP 6
10684: NOT
10685: IFFALSE 10694
10687: PUSH
10688: LD_EXP 7
10692: NOT
10693: AND
10694: IFFALSE 10729
10696: PUSH
10697: LD_INT 5
10699: PPUSH
10700: LD_INT 22
10702: PUSH
10703: LD_INT 2
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 1
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PPUSH
10724: CALL_OW 70
10728: AND
10729: IFFALSE 10738
10731: PUSH
10732: LD_EXP 7
10736: NOT
10737: AND
10738: IFFALSE 10823
10740: GO 10742
10742: DISABLE
// begin if Mike then
10743: LD_EXP 33
10747: IFFALSE 10763
// Say ( Mike , DM-1-scout ) else
10749: LD_EXP 33
10753: PPUSH
10754: LD_STRING DM-1-scout
10756: PPUSH
10757: CALL_OW 88
10761: GO 10794
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10763: LD_EXP 45
10767: PPUSH
10768: LD_INT 26
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PPUSH
10778: CALL_OW 72
10782: PUSH
10783: LD_INT 1
10785: ARRAY
10786: PPUSH
10787: LD_STRING DArm-1-explore
10789: PPUSH
10790: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10794: LD_INT 54
10796: PPUSH
10797: LD_INT 35
10799: PPUSH
10800: LD_INT 2
10802: PPUSH
10803: LD_INT 1
10805: PPUSH
10806: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10810: LD_INT 54
10812: PPUSH
10813: LD_INT 35
10815: PPUSH
10816: LD_INT 2
10818: PPUSH
10819: CALL_OW 331
// end ;
10823: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and not americanBaseSpoted and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10824: LD_INT 6
10826: PPUSH
10827: LD_INT 22
10829: PUSH
10830: LD_INT 2
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 21
10839: PUSH
10840: LD_INT 1
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PPUSH
10851: CALL_OW 70
10855: IFFALSE 10864
10857: PUSH
10858: LD_EXP 6
10862: NOT
10863: AND
10864: IFFALSE 10873
10866: PUSH
10867: LD_EXP 7
10871: NOT
10872: AND
10873: IFFALSE 11127
10875: GO 10877
10877: DISABLE
10878: LD_INT 0
10880: PPUSH
10881: PPUSH
10882: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10883: LD_ADDR_VAR 0 1
10887: PUSH
10888: LD_EXP 45
10892: PPUSH
10893: LD_INT 26
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 72
10907: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_EXP 45
10917: PPUSH
10918: LD_INT 26
10920: PUSH
10921: LD_INT 2
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PPUSH
10928: CALL_OW 72
10932: ST_TO_ADDR
// DialogueOn ;
10933: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10937: LD_INT 36
10939: PPUSH
10940: LD_INT 22
10942: PPUSH
10943: LD_INT 2
10945: PPUSH
10946: LD_INT 8
10948: PPUSH
10949: CALL_OW 330
// dwait ( 0 0$1 ) ;
10953: LD_INT 35
10955: PPUSH
10956: CALL_OW 68
// speakerOk := false ;
10960: LD_ADDR_VAR 0 3
10964: PUSH
10965: LD_INT 0
10967: ST_TO_ADDR
// if Mike then
10968: LD_EXP 33
10972: IFFALSE 10994
// speakerOk := Say ( Mike , DM-1-spot ) else
10974: LD_ADDR_VAR 0 3
10978: PUSH
10979: LD_EXP 33
10983: PPUSH
10984: LD_STRING DM-1-spot
10986: PPUSH
10987: CALL_OW 88
10991: ST_TO_ADDR
10992: GO 11022
// if randomMen then
10994: LD_VAR 0 1
10998: IFFALSE 11022
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11000: LD_ADDR_VAR 0 3
11004: PUSH
11005: LD_VAR 0 1
11009: PUSH
11010: LD_INT 1
11012: ARRAY
11013: PPUSH
11014: LD_STRING DArm-1-spot-a
11016: PPUSH
11017: CALL_OW 88
11021: ST_TO_ADDR
// if speakerOk then
11022: LD_VAR 0 3
11026: IFFALSE 11070
// begin if Givi then
11028: LD_EXP 32
11032: IFFALSE 11048
// Say ( Givi , DG-1-spot ) else
11034: LD_EXP 32
11038: PPUSH
11039: LD_STRING DG-1-spot
11041: PPUSH
11042: CALL_OW 88
11046: GO 11070
// if randomWomen then
11048: LD_VAR 0 2
11052: IFFALSE 11070
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
11054: LD_VAR 0 2
11058: PUSH
11059: LD_INT 1
11061: ARRAY
11062: PPUSH
11063: LD_STRING DArf-1-spot-a
11065: PPUSH
11066: CALL_OW 88
// end ; if Mike then
11070: LD_EXP 33
11074: IFFALSE 11090
// Say ( Heike , DH-1-spot ) else
11076: LD_EXP 31
11080: PPUSH
11081: LD_STRING DH-1-spot
11083: PPUSH
11084: CALL_OW 88
11088: GO 11102
// Say ( Heike , DH-1-spot-a ) ;
11090: LD_EXP 31
11094: PPUSH
11095: LD_STRING DH-1-spot-a
11097: PPUSH
11098: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
11102: LD_INT 36
11104: PPUSH
11105: LD_INT 22
11107: PPUSH
11108: LD_INT 2
11110: PPUSH
11111: CALL_OW 331
// DialogueOff ;
11115: CALL_OW 7
// americanBaseSpoted := true ;
11119: LD_ADDR_EXP 6
11123: PUSH
11124: LD_INT 1
11126: ST_TO_ADDR
// end ;
11127: PPOPN 3
11129: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11130: LD_EXP 6
11134: NOT
11135: IFFALSE 11167
11137: PUSH
11138: LD_INT 22
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 101
11150: PUSH
11151: LD_INT 1
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PPUSH
11162: CALL_OW 69
11166: AND
11167: IFFALSE 11176
11169: PUSH
11170: LD_EXP 7
11174: NOT
11175: AND
11176: IFFALSE 11262
11178: GO 11180
11180: DISABLE
11181: LD_INT 0
11183: PPUSH
// begin americanBaseSpoted := true ;
11184: LD_ADDR_EXP 6
11188: PUSH
11189: LD_INT 1
11191: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11192: LD_ADDR_VAR 0 1
11196: PUSH
11197: LD_EXP 45
11201: PPUSH
11202: LD_INT 26
11204: PUSH
11205: LD_INT 1
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PPUSH
11212: CALL_OW 72
11216: ST_TO_ADDR
// if not randomMen then
11217: LD_VAR 0 1
11221: NOT
11222: IFFALSE 11226
// exit ;
11224: GO 11262
// DialogueOn ;
11226: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11230: LD_VAR 0 1
11234: PUSH
11235: LD_INT 1
11237: ARRAY
11238: PPUSH
11239: LD_STRING DArm-1-spot-a
11241: PPUSH
11242: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11246: LD_EXP 31
11250: PPUSH
11251: LD_STRING DH-1-spot-a
11253: PPUSH
11254: CALL_OW 88
// DialogueOff ;
11258: CALL_OW 7
// end ;
11262: PPOPN 1
11264: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 2 or usForces <= 4 do var i , p ;
11265: LD_INT 11
11267: PPUSH
11268: CALL_OW 255
11272: PUSH
11273: LD_INT 2
11275: EQUAL
11276: IFTRUE 11325
11278: PUSH
11279: LD_INT 7
11281: PPUSH
11282: LD_INT 22
11284: PUSH
11285: LD_INT 1
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: LD_INT 3
11294: PUSH
11295: LD_INT 50
11297: PUSH
11298: EMPTY
11299: LIST
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 30
11307: PUSH
11308: LD_INT 31
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: PPUSH
11320: CALL_OW 70
11324: OR
11325: IFTRUE 11350
11327: PUSH
11328: LD_INT 7
11330: PPUSH
11331: LD_INT 22
11333: PUSH
11334: LD_INT 2
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PPUSH
11341: CALL_OW 70
11345: PUSH
11346: LD_INT 2
11348: GREATER
11349: OR
11350: IFTRUE 11362
11352: PUSH
11353: LD_EXP 47
11357: PUSH
11358: LD_INT 4
11360: LESSEQUAL
11361: OR
11362: IFFALSE 11958
11364: GO 11366
11366: DISABLE
11367: LD_INT 0
11369: PPUSH
11370: PPUSH
// begin wait ( 0 0$3 ) ;
11371: LD_INT 105
11373: PPUSH
11374: CALL_OW 67
// americanStartRun := true ;
11378: LD_ADDR_EXP 15
11382: PUSH
11383: LD_INT 1
11385: ST_TO_ADDR
// if IsOk ( usCommander ) then
11386: LD_EXP 48
11390: PPUSH
11391: CALL_OW 302
11395: IFFALSE 11425
// begin usForces := usForces union usCommander ;
11397: LD_ADDR_EXP 47
11401: PUSH
11402: LD_EXP 47
11406: PUSH
11407: LD_EXP 48
11411: UNION
11412: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11413: LD_EXP 48
11417: PPUSH
11418: LD_STRING DUsm-1-assault
11420: PPUSH
11421: CALL_OW 88
// end ; for i in usForces do
11425: LD_ADDR_VAR 0 1
11429: PUSH
11430: LD_EXP 47
11434: PUSH
11435: FOR_IN
11436: IFFALSE 11482
// begin if IsInUnit ( i ) then
11438: LD_VAR 0 1
11442: PPUSH
11443: CALL_OW 310
11447: IFFALSE 11458
// ComExitBuilding ( i ) ;
11449: LD_VAR 0 1
11453: PPUSH
11454: CALL_OW 122
// wait ( 3 ) ;
11458: LD_INT 3
11460: PPUSH
11461: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11465: LD_VAR 0 1
11469: PPUSH
11470: LD_INT 34
11472: PPUSH
11473: LD_INT 67
11475: PPUSH
11476: CALL_OW 111
// end ;
11480: GO 11435
11482: POP
11483: POP
// Say ( Heike , DH-1-assault ) ;
11484: LD_EXP 31
11488: PPUSH
11489: LD_STRING DH-1-assault
11491: PPUSH
11492: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11496: LD_INT 35
11498: PPUSH
11499: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11503: LD_VAR 0 1
11507: PPUSH
11508: LD_INT 34
11510: PPUSH
11511: LD_INT 67
11513: PPUSH
11514: CALL_OW 111
// until not usForces ;
11518: LD_EXP 47
11522: NOT
11523: IFFALSE 11496
// music_nat := 2 ;
11525: LD_ADDR_OWVAR 71
11529: PUSH
11530: LD_INT 2
11532: ST_TO_ADDR
// music_class := music_victory ;
11533: LD_ADDR_OWVAR 72
11537: PUSH
11538: LD_INT 4
11540: ST_TO_ADDR
// if not americanHasEscaped then
11541: LD_EXP 9
11545: NOT
11546: IFFALSE 11567
// begin Say ( Heike , DH-2-assault ) ;
11548: LD_EXP 31
11552: PPUSH
11553: LD_STRING DH-2-assault
11555: PPUSH
11556: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11560: LD_STRING ACH_CLEAN
11562: PPUSH
11563: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11567: LD_INT 70
11569: PPUSH
11570: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11574: LD_INT 35
11576: PPUSH
11577: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11581: LD_INT 22
11583: PUSH
11584: LD_INT 2
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 21
11593: PUSH
11594: LD_INT 1
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 3
11603: PUSH
11604: LD_INT 50
11606: PUSH
11607: EMPTY
11608: LIST
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: PPUSH
11619: CALL_OW 69
11623: NOT
11624: IFFALSE 11574
// InGameOn ;
11626: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11630: LD_INT 11
11632: PPUSH
11633: CALL_OW 255
11637: PUSH
11638: LD_INT 2
11640: EQUAL
11641: NOT
11642: IFFALSE 11654
// SetSide ( usDepot , 2 ) ;
11644: LD_INT 11
11646: PPUSH
11647: LD_INT 2
11649: PPUSH
11650: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11654: LD_INT 35
11656: PPUSH
11657: LD_INT 22
11659: PPUSH
11660: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11664: LD_EXP 31
11668: PPUSH
11669: LD_INT 35
11671: PPUSH
11672: LD_INT 22
11674: PPUSH
11675: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11679: LD_EXP 31
11683: PPUSH
11684: LD_INT 38
11686: PPUSH
11687: LD_INT 25
11689: PPUSH
11690: CALL_OW 178
// ComMoveXY ( Aviradze union heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11694: LD_EXP 35
11698: PUSH
11699: LD_EXP 44
11703: UNION
11704: PUSH
11705: LD_EXP 45
11709: UNION
11710: PPUSH
11711: LD_INT 39
11713: PPUSH
11714: LD_INT 26
11716: PPUSH
11717: CALL_OW 111
// AddComTurnUnit ( Aviradze union heikeSquad union heikeSecondSquad , Heike ) ;
11721: LD_EXP 35
11725: PUSH
11726: LD_EXP 44
11730: UNION
11731: PUSH
11732: LD_EXP 45
11736: UNION
11737: PPUSH
11738: LD_EXP 31
11742: PPUSH
11743: CALL_OW 179
// p := 0 ;
11747: LD_ADDR_VAR 0 2
11751: PUSH
11752: LD_INT 0
11754: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11755: LD_INT 35
11757: PPUSH
11758: CALL_OW 67
// p := p + 1 ;
11762: LD_ADDR_VAR 0 2
11766: PUSH
11767: LD_VAR 0 2
11771: PUSH
11772: LD_INT 1
11774: PLUS
11775: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11776: LD_EXP 31
11780: PPUSH
11781: CALL_OW 314
11785: NOT
11786: IFTRUE 11798
11788: PUSH
11789: LD_VAR 0 2
11793: PUSH
11794: LD_INT 10
11796: GREATER
11797: OR
11798: IFFALSE 11755
// Say ( Heike , DH-1-capture ) ;
11800: LD_EXP 31
11804: PPUSH
11805: LD_STRING DH-1-capture
11807: PPUSH
11808: CALL_OW 88
// if IsOk ( Markov ) then
11812: LD_EXP 38
11816: PPUSH
11817: CALL_OW 302
11821: IFFALSE 11835
// Say ( Markov , DMar-1-capture ) ;
11823: LD_EXP 38
11827: PPUSH
11828: LD_STRING DMar-1-capture
11830: PPUSH
11831: CALL_OW 88
// if IsOk ( Sophia ) then
11835: LD_EXP 37
11839: PPUSH
11840: CALL_OW 302
11844: IFFALSE 11870
// begin Say ( Heike , DH-2-capture ) ;
11846: LD_EXP 31
11850: PPUSH
11851: LD_STRING DH-2-capture
11853: PPUSH
11854: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11858: LD_EXP 37
11862: PPUSH
11863: LD_STRING DS-1-capture
11865: PPUSH
11866: CALL_OW 88
// end ; americanBaseCaptured := true ;
11870: LD_ADDR_EXP 7
11874: PUSH
11875: LD_INT 1
11877: ST_TO_ADDR
// InGameOff ;
11878: CALL_OW 9
// music_nat := music_auto ;
11882: LD_ADDR_OWVAR 71
11886: PUSH
11887: LD_INT 0
11889: ST_TO_ADDR
// music_class := music_auto ;
11890: LD_ADDR_OWVAR 72
11894: PUSH
11895: LD_INT 0
11897: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11898: LD_STRING ConstructBase
11900: PPUSH
11901: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11905: LD_ADDR_VAR 0 1
11909: PUSH
11910: LD_INT 22
11912: PUSH
11913: LD_INT 1
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 21
11922: PUSH
11923: LD_INT 3
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PPUSH
11934: CALL_OW 69
11938: PUSH
11939: FOR_IN
11940: IFFALSE 11956
// SetSide ( i , 2 ) ;
11942: LD_VAR 0 1
11946: PPUSH
11947: LD_INT 2
11949: PPUSH
11950: CALL_OW 235
11954: GO 11939
11956: POP
11957: POP
// end ;
11958: PPOPN 2
11960: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11961: LD_EXP 14
11965: PUSH
11966: LD_INT 3
11968: GREATEREQUAL
11969: IFFALSE 11981
11971: GO 11973
11973: DISABLE
// SetAchievement ( ACH_ENG ) ;
11974: LD_STRING ACH_ENG
11976: PPUSH
11977: CALL_OW 543
11981: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11982: LD_INT 22
11984: PUSH
11985: LD_INT 2
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 25
11994: PUSH
11995: LD_INT 15
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PPUSH
12006: CALL_OW 69
12010: PUSH
12011: LD_INT 4
12013: GREATEREQUAL
12014: IFFALSE 12026
12016: GO 12018
12018: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
12019: LD_STRING ACH_APEGEN
12021: PPUSH
12022: CALL_OW 543
12026: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
12027: LD_INT 22
12029: PUSH
12030: LD_INT 2
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 30
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: LD_INT 3
12049: PUSH
12050: LD_INT 57
12052: PUSH
12053: EMPTY
12054: LIST
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: PPUSH
12065: CALL_OW 69
12069: IFFALSE 12340
12071: GO 12073
12073: DISABLE
// begin workshopBuilded := true ;
12074: LD_ADDR_EXP 11
12078: PUSH
12079: LD_INT 1
12081: ST_TO_ADDR
// if IsOk ( Markov ) then
12082: LD_EXP 38
12086: PPUSH
12087: CALL_OW 302
12091: IFFALSE 12152
// begin Say ( Heike , DH-1-shop-a ) ;
12093: LD_EXP 31
12097: PPUSH
12098: LD_STRING DH-1-shop-a
12100: PPUSH
12101: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
12105: LD_INT 47
12107: PPUSH
12108: LD_INT 2
12110: PPUSH
12111: CALL_OW 321
12115: PUSH
12116: LD_INT 2
12118: EQUAL
12119: IFFALSE 12137
12121: PUSH
12122: LD_INT 45
12124: PPUSH
12125: LD_INT 2
12127: PPUSH
12128: CALL_OW 321
12132: PUSH
12133: LD_INT 2
12135: EQUAL
12136: AND
12137: NOT
12138: IFFALSE 12152
// Say ( Markov , DMar-1-shop-a ) ;
12140: LD_EXP 38
12144: PPUSH
12145: LD_STRING DMar-1-shop-a
12147: PPUSH
12148: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12152: LD_INT 35
12154: PPUSH
12155: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12159: LD_INT 47
12161: PPUSH
12162: LD_INT 2
12164: PPUSH
12165: CALL_OW 321
12169: PUSH
12170: LD_INT 2
12172: EQUAL
12173: IFTRUE 12191
12175: PUSH
12176: LD_INT 45
12178: PPUSH
12179: LD_INT 2
12181: PPUSH
12182: CALL_OW 321
12186: PUSH
12187: LD_INT 2
12189: EQUAL
12190: OR
12191: IFFALSE 12152
// if IsOk ( Markov ) and IsOk ( Heike ) then
12193: LD_EXP 38
12197: PPUSH
12198: CALL_OW 302
12202: IFFALSE 12215
12204: PUSH
12205: LD_EXP 31
12209: PPUSH
12210: CALL_OW 302
12214: AND
12215: IFFALSE 12333
// begin DialogueOn ;
12217: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12221: LD_EXP 38
12225: PPUSH
12226: LD_STRING DMar-1-shop
12228: PPUSH
12229: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12233: LD_EXP 31
12237: PPUSH
12238: LD_STRING DH-1-shop
12240: PPUSH
12241: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12245: LD_EXP 38
12249: PPUSH
12250: LD_STRING DMar-2-shop
12252: PPUSH
12253: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12257: LD_EXP 38
12261: PPUSH
12262: LD_STRING DMar-3-shop
12264: PPUSH
12265: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12269: LD_EXP 31
12273: PPUSH
12274: LD_STRING DH-2-shop
12276: PPUSH
12277: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12281: LD_EXP 38
12285: PPUSH
12286: LD_STRING DMar-4-shop
12288: PPUSH
12289: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12293: LD_EXP 31
12297: PPUSH
12298: LD_STRING DH-3-shop
12300: PPUSH
12301: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12305: LD_EXP 38
12309: PPUSH
12310: LD_STRING DMar-5-shop
12312: PPUSH
12313: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12317: LD_EXP 31
12321: PPUSH
12322: LD_STRING DH-4-shop
12324: PPUSH
12325: CALL_OW 88
// DialogueOff ;
12329: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
12333: LD_STRING ConstructVeh
12335: PPUSH
12336: CALL_OW 337
// end ;
12340: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12341: LD_INT 2
12343: PPUSH
12344: LD_INT 2
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL 41961 0 3
12354: PUSH
12355: LD_INT 0
12357: EQUAL
12358: IFFALSE 12370
12360: GO 12362
12362: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12363: LD_STRING Techs
12365: PPUSH
12366: CALL_OW 337
12370: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12371: LD_EXP 38
12375: PPUSH
12376: CALL_OW 302
12380: IFFALSE 12430
12382: PUSH
12383: LD_INT 22
12385: PUSH
12386: LD_INT 2
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 2
12395: PUSH
12396: LD_INT 34
12398: PUSH
12399: LD_INT 22
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: LD_INT 35
12408: PUSH
12409: LD_INT 22
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 69
12429: AND
12430: IFFALSE 12537
12432: GO 12434
12434: DISABLE
// begin DialogueOn ;
12435: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12439: LD_INT 22
12441: PUSH
12442: LD_INT 2
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 2
12451: PUSH
12452: LD_INT 34
12454: PUSH
12455: LD_INT 22
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 35
12464: PUSH
12465: LD_INT 22
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: LIST
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PPUSH
12481: CALL_OW 69
12485: PPUSH
12486: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12490: LD_INT 10
12492: PPUSH
12493: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12497: LD_EXP 31
12501: PPUSH
12502: LD_STRING DH-1-bal
12504: PPUSH
12505: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12509: LD_EXP 38
12513: PPUSH
12514: LD_STRING DMar-1-bal
12516: PPUSH
12517: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12521: LD_EXP 31
12525: PPUSH
12526: LD_STRING DH-2-bal
12528: PPUSH
12529: CALL_OW 88
// DialogueOff ;
12533: CALL_OW 7
// end ;
12537: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12538: LD_EXP 35
12542: PPUSH
12543: CALL_OW 302
12547: IFFALSE 12579
12549: PUSH
12550: LD_INT 22
12552: PUSH
12553: LD_INT 2
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 30
12562: PUSH
12563: LD_INT 6
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PPUSH
12574: CALL_OW 69
12578: AND
12579: IFFALSE 12640
12581: GO 12583
12583: DISABLE
// begin DialogueOn ;
12584: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12588: LD_EXP 35
12592: PPUSH
12593: LD_STRING DA-1-lab
12595: PPUSH
12596: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12600: LD_EXP 31
12604: PPUSH
12605: LD_STRING DH-1-lab
12607: PPUSH
12608: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12612: LD_EXP 35
12616: PPUSH
12617: LD_STRING DA-2-lab
12619: PPUSH
12620: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12624: LD_EXP 31
12628: PPUSH
12629: LD_STRING DH-2-lab
12631: PPUSH
12632: CALL_OW 88
// DialogueOff ;
12636: CALL_OW 7
// end ;
12640: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12641: LD_EXP 36
12645: PPUSH
12646: CALL_OW 302
12650: IFFALSE 12682
12652: PUSH
12653: LD_INT 22
12655: PUSH
12656: LD_INT 2
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PUSH
12663: LD_INT 25
12665: PUSH
12666: LD_INT 15
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PPUSH
12677: CALL_OW 69
12681: AND
12682: IFFALSE 12701
12684: PUSH
12685: LD_INT 81
12687: PUSH
12688: LD_INT 2
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PPUSH
12695: CALL_OW 69
12699: NOT
12700: AND
12701: IFFALSE 12890
12703: GO 12705
12705: DISABLE
12706: LD_INT 0
12708: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12709: LD_ADDR_VAR 0 1
12713: PUSH
12714: LD_INT 22
12716: PUSH
12717: LD_INT 2
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 25
12726: PUSH
12727: LD_INT 15
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PPUSH
12738: CALL_OW 69
12742: ST_TO_ADDR
// InGameOn ;
12743: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12747: LD_VAR 0 1
12751: PUSH
12752: LD_INT 1
12754: ARRAY
12755: PPUSH
12756: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12760: LD_VAR 0 1
12764: PUSH
12765: LD_INT 1
12767: ARRAY
12768: PPUSH
12769: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12773: LD_EXP 36
12777: PPUSH
12778: LD_STRING DK-1-apesol
12780: PPUSH
12781: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12785: LD_VAR 0 1
12789: PUSH
12790: LD_INT 1
12792: ARRAY
12793: PPUSH
12794: LD_INT 35
12796: PPUSH
12797: LD_INT 28
12799: PPUSH
12800: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12804: LD_VAR 0 1
12808: PUSH
12809: LD_INT 1
12811: ARRAY
12812: PPUSH
12813: LD_INT 36
12815: PPUSH
12816: LD_INT 17
12818: PPUSH
12819: CALL_OW 171
// wait ( 0 0$2 ) ;
12823: LD_INT 70
12825: PPUSH
12826: CALL_OW 67
// DialogueOn ;
12830: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12834: LD_EXP 35
12838: PPUSH
12839: LD_STRING DA-1-apesol
12841: PPUSH
12842: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12846: LD_EXP 36
12850: PPUSH
12851: LD_STRING DK-2-apesol
12853: PPUSH
12854: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12858: LD_EXP 35
12862: PPUSH
12863: LD_STRING DA-2-apesol
12865: PPUSH
12866: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12870: LD_EXP 36
12874: PPUSH
12875: LD_STRING DK-3-apesol
12877: PPUSH
12878: CALL_OW 88
// DialogueOff ;
12882: CALL_OW 7
// InGameOff ;
12886: CALL_OW 9
// end ;
12890: PPOPN 1
12892: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12893: LD_EXP 37
12897: PPUSH
12898: CALL_OW 302
12902: IFFALSE 12934
12904: PUSH
12905: LD_INT 22
12907: PUSH
12908: LD_INT 2
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 25
12917: PUSH
12918: LD_INT 16
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PPUSH
12929: CALL_OW 69
12933: AND
12934: IFFALSE 12953
12936: PUSH
12937: LD_INT 81
12939: PUSH
12940: LD_INT 2
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 69
12951: NOT
12952: AND
12953: IFFALSE 13267
12955: GO 12957
12957: DISABLE
12958: LD_INT 0
12960: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12961: LD_ADDR_VAR 0 1
12965: PUSH
12966: LD_INT 22
12968: PUSH
12969: LD_INT 2
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 25
12978: PUSH
12979: LD_INT 16
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 69
12994: ST_TO_ADDR
// blockAttack := true ;
12995: LD_ADDR_EXP 29
12999: PUSH
13000: LD_INT 1
13002: ST_TO_ADDR
// InGameOn ;
13003: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
13007: LD_INT 35
13009: PPUSH
13010: LD_INT 22
13012: PPUSH
13013: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
13017: LD_INT 5
13019: PPUSH
13020: LD_INT 35
13022: PPUSH
13023: LD_INT 22
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
13033: LD_EXP 37
13037: PPUSH
13038: LD_VAR 0 1
13042: PUSH
13043: LD_INT 1
13045: ARRAY
13046: PPUSH
13047: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
13051: LD_VAR 0 1
13055: PUSH
13056: LD_INT 1
13058: ARRAY
13059: PPUSH
13060: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
13064: LD_VAR 0 1
13068: PUSH
13069: LD_INT 1
13071: ARRAY
13072: PPUSH
13073: CALL_OW 122
// wait ( 0 0$2 ) ;
13077: LD_INT 70
13079: PPUSH
13080: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
13084: LD_EXP 37
13088: PPUSH
13089: LD_STRING DS-1-apeeng
13091: PPUSH
13092: CALL_OW 88
// if IsOk ( Kamil ) then
13096: LD_EXP 34
13100: PPUSH
13101: CALL_OW 302
13105: IFFALSE 13255
// begin Say ( Kamil , DKam-1-apeeng ) ;
13107: LD_EXP 34
13111: PPUSH
13112: LD_STRING DKam-1-apeeng
13114: PPUSH
13115: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
13119: LD_EXP 37
13123: PPUSH
13124: LD_STRING DS-2-apeeng
13126: PPUSH
13127: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
13131: LD_EXP 34
13135: PPUSH
13136: LD_STRING DKam-2-apeeng
13138: PPUSH
13139: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
13143: LD_EXP 37
13147: PPUSH
13148: LD_STRING DS-3-apeeng
13150: PPUSH
13151: CALL_OW 88
// if not IsOK ( Kaia ) then
13155: LD_EXP 36
13159: PPUSH
13160: CALL_OW 302
13164: NOT
13165: IFFALSE 13181
// begin InGameOff ;
13167: CALL_OW 9
// blockAttack := false ;
13171: LD_ADDR_EXP 29
13175: PUSH
13176: LD_INT 0
13178: ST_TO_ADDR
// exit ;
13179: GO 13267
// end ; Say ( Kaia , DK-1-apeeng ) ;
13181: LD_EXP 36
13185: PPUSH
13186: LD_STRING DK-1-apeeng
13188: PPUSH
13189: CALL_OW 88
// if not IsOk ( Givi ) then
13193: LD_EXP 32
13197: PPUSH
13198: CALL_OW 302
13202: NOT
13203: IFFALSE 13219
// begin InGameOff ;
13205: CALL_OW 9
// blockAttack := false ;
13209: LD_ADDR_EXP 29
13213: PUSH
13214: LD_INT 0
13216: ST_TO_ADDR
// exit ;
13217: GO 13267
// end ; Say ( Givi , DG-1-apeeng ) ;
13219: LD_EXP 32
13223: PPUSH
13224: LD_STRING DG-1-apeeng
13226: PPUSH
13227: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13231: LD_EXP 36
13235: PPUSH
13236: LD_STRING DK-2-apeeng
13238: PPUSH
13239: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
13243: LD_EXP 36
13247: PPUSH
13248: LD_STRING DK-3-apeeng
13250: PPUSH
13251: CALL_OW 88
// end ; InGameOff ;
13255: CALL_OW 9
// blockAttack := false ;
13259: LD_ADDR_EXP 29
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// end ;
13267: PPOPN 1
13269: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13270: LD_EXP 4
13274: IFFALSE 13306
13276: PUSH
13277: LD_INT 22
13279: PUSH
13280: LD_INT 2
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 30
13289: PUSH
13290: LD_INT 0
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 69
13305: AND
13306: IFFALSE 13487
13308: GO 13310
13310: DISABLE
// begin blockAttack := true ;
13311: LD_ADDR_EXP 29
13315: PUSH
13316: LD_INT 1
13318: ST_TO_ADDR
// wait ( 0 0$10 ) ;
13319: LD_INT 350
13321: PPUSH
13322: CALL_OW 67
// DialogueOn ;
13326: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13330: LD_EXP 39
13334: PPUSH
13335: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13339: LD_EXP 39
13343: PPUSH
13344: LD_STRING DF-1-distribution
13346: PPUSH
13347: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13351: LD_EXP 31
13355: PPUSH
13356: LD_STRING DH-2-distribution
13358: PPUSH
13359: CALL_OW 88
// if IsOk ( Kaia ) then
13363: LD_EXP 36
13367: PPUSH
13368: CALL_OW 302
13372: IFFALSE 13433
// begin Say ( Kaia , DK-1-distribution ) ;
13374: LD_EXP 36
13378: PPUSH
13379: LD_STRING DK-1-distribution
13381: PPUSH
13382: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13386: LD_EXP 31
13390: PPUSH
13391: LD_STRING DH-1-distribution
13393: PPUSH
13394: CALL_OW 88
// if IsOk ( Givi ) then
13398: LD_EXP 32
13402: PPUSH
13403: CALL_OW 302
13407: IFFALSE 13433
// begin Say ( Givi , DG-1-distribution ) ;
13409: LD_EXP 32
13413: PPUSH
13414: LD_STRING DG-1-distribution
13416: PPUSH
13417: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13421: LD_EXP 31
13425: PPUSH
13426: LD_STRING DH-3-distribution
13428: PPUSH
13429: CALL_OW 88
// end ; end ; DialogueOff ;
13433: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13437: LD_STRING Crates1
13439: PPUSH
13440: CALL_OW 337
// farmerRequestedCrates := 300 ;
13444: LD_ADDR_EXP 17
13448: PUSH
13449: LD_INT 300
13451: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13452: LD_STRING FarmerCrates
13454: PPUSH
13455: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13459: LD_INT 10
13461: PPUSH
13462: LD_INT 1
13464: PPUSH
13465: CALL_OW 424
// blockAttack := false ;
13469: LD_ADDR_EXP 29
13473: PUSH
13474: LD_INT 0
13476: ST_TO_ADDR
// CenterNowOnXY ( 108 , 61 ) ;
13477: LD_INT 108
13479: PPUSH
13480: LD_INT 61
13482: PPUSH
13483: CALL_OW 86
// end ;
13487: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13488: LD_EXP 7
13492: IFFALSE 13556
13494: PUSH
13495: LD_INT 22
13497: PUSH
13498: LD_INT 2
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 3
13507: PUSH
13508: LD_INT 57
13510: PUSH
13511: EMPTY
13512: LIST
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 2
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: LD_INT 6
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 30
13533: PUSH
13534: LD_INT 7
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: PPUSH
13551: CALL_OW 69
13555: AND
13556: IFFALSE 13602
13558: PUSH
13559: LD_INT 22
13561: PUSH
13562: LD_INT 2
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 3
13571: PUSH
13572: LD_INT 57
13574: PUSH
13575: EMPTY
13576: LIST
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 30
13584: PUSH
13585: LD_INT 4
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: PPUSH
13597: CALL_OW 69
13601: AND
13602: IFFALSE 13766
13604: GO 13606
13606: DISABLE
13607: LD_INT 0
13609: PPUSH
// begin wait ( 0 0$10 ) ;
13610: LD_INT 350
13612: PPUSH
13613: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13617: LD_ADDR_VAR 0 1
13621: PUSH
13622: LD_EXP 45
13626: PPUSH
13627: LD_INT 26
13629: PUSH
13630: LD_INT 1
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: LD_INT 25
13639: PUSH
13640: LD_INT 2
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PPUSH
13651: CALL_OW 72
13655: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13656: LD_EXP 31
13660: PPUSH
13661: LD_STRING DH-1-task
13663: PPUSH
13664: CALL_OW 88
// if IsOk ( Sophia ) then
13668: LD_EXP 37
13672: PPUSH
13673: CALL_OW 302
13677: IFFALSE 13717
// begin Say ( Sophia , DS-1-task ) ;
13679: LD_EXP 37
13683: PPUSH
13684: LD_STRING DS-1-task
13686: PPUSH
13687: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13691: LD_EXP 37
13695: PPUSH
13696: LD_STRING DS-2-task
13698: PPUSH
13699: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13703: LD_EXP 31
13707: PPUSH
13708: LD_STRING DH-2-task
13710: PPUSH
13711: CALL_OW 88
// end else
13715: GO 13751
// if eng then
13717: LD_VAR 0 1
13721: IFFALSE 13751
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13723: LD_VAR 0 1
13727: PUSH
13728: LD_INT 1
13730: ARRAY
13731: PPUSH
13732: LD_STRING DArm-1-task
13734: PPUSH
13735: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13739: LD_EXP 31
13743: PPUSH
13744: LD_STRING DH-2-task
13746: PPUSH
13747: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13751: LD_STRING BaseConstructed
13753: PPUSH
13754: CALL_OW 337
// allowConvoys := true ;
13758: LD_ADDR_EXP 13
13762: PUSH
13763: LD_INT 1
13765: ST_TO_ADDR
// end ;
13766: PPOPN 1
13768: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13769: LD_INT 22
13771: PUSH
13772: LD_INT 4
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: LD_INT 34
13781: PUSH
13782: LD_INT 12
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PPUSH
13793: CALL_OW 69
13797: IFFALSE 13965
13799: GO 13801
13801: DISABLE
13802: LD_INT 0
13804: PPUSH
13805: PPUSH
13806: PPUSH
// begin wait ( 0 0$2 ) ;
13807: LD_INT 70
13809: PPUSH
13810: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13814: LD_ADDR_VAR 0 1
13818: PUSH
13819: LD_INT 22
13821: PUSH
13822: LD_INT 4
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 34
13831: PUSH
13832: LD_INT 12
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PPUSH
13843: CALL_OW 69
13847: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13848: LD_ADDR_VAR 0 2
13852: PUSH
13853: LD_VAR 0 1
13857: PUSH
13858: LD_INT 1
13860: ARRAY
13861: PPUSH
13862: CALL_OW 250
13866: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13867: LD_ADDR_VAR 0 3
13871: PUSH
13872: LD_VAR 0 1
13876: PUSH
13877: LD_INT 1
13879: ARRAY
13880: PPUSH
13881: CALL_OW 251
13885: ST_TO_ADDR
// DialogueOn ;
13886: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13890: LD_VAR 0 2
13894: PPUSH
13895: LD_VAR 0 3
13899: PPUSH
13900: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13904: LD_VAR 0 2
13908: PPUSH
13909: LD_VAR 0 3
13913: PPUSH
13914: LD_INT 2
13916: PPUSH
13917: LD_INT 6
13919: NEG
13920: PPUSH
13921: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13925: LD_INT 10
13927: PPUSH
13928: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13932: LD_EXP 31
13936: PPUSH
13937: LD_STRING DH-1-seecargo
13939: PPUSH
13940: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13944: LD_VAR 0 2
13948: PPUSH
13949: LD_VAR 0 3
13953: PPUSH
13954: LD_INT 2
13956: PPUSH
13957: CALL_OW 331
// DialogueOff ;
13961: CALL_OW 7
// end ;
13965: PPOPN 3
13967: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13968: LD_EXP 4
13972: IFFALSE 13984
13974: PUSH
13975: LD_EXP 16
13979: PUSH
13980: LD_INT 300
13982: GREATEREQUAL
13983: AND
13984: IFFALSE 14056
13986: GO 13988
13988: DISABLE
// begin DialogueOn ;
13989: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13993: LD_EXP 39
13997: PPUSH
13998: LD_STRING DF-1-delivery-2
14000: PPUSH
14001: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
14005: LD_EXP 31
14009: PPUSH
14010: LD_STRING DH-1-delivery-2
14012: PPUSH
14013: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
14017: LD_EXP 39
14021: PPUSH
14022: LD_STRING DF-2-delivery-2
14024: PPUSH
14025: CALL_OW 94
// DialogueOff ;
14029: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
14033: LD_STRING Crates2
14035: PPUSH
14036: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
14040: LD_ADDR_EXP 18
14044: PUSH
14045: LD_INT 63000
14047: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
14048: LD_ADDR_EXP 17
14052: PUSH
14053: LD_INT 600
14055: ST_TO_ADDR
// end ;
14056: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
14057: LD_EXP 4
14061: IFFALSE 14073
14063: PUSH
14064: LD_EXP 16
14068: PUSH
14069: LD_INT 600
14071: GREATEREQUAL
14072: AND
14073: IFFALSE 14085
14075: PUSH
14076: LD_OWVAR 67
14080: PUSH
14081: LD_INT 1
14083: GREATER
14084: AND
14085: IFFALSE 14285
14087: GO 14089
14089: DISABLE
// begin DialogueOn ;
14090: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
14094: LD_EXP 39
14098: PPUSH
14099: LD_STRING DF-1-delivery-3
14101: PPUSH
14102: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
14106: LD_EXP 31
14110: PPUSH
14111: LD_STRING DH-1-delivery-3
14113: PPUSH
14114: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
14118: LD_EXP 39
14122: PPUSH
14123: LD_STRING DF-2-delivery-3
14125: PPUSH
14126: CALL_OW 94
// if IsOk ( Kaia ) then
14130: LD_EXP 36
14134: PPUSH
14135: CALL_OW 302
14139: IFFALSE 14189
// begin Say ( Kaia , DK-1-delivery-3 ) ;
14141: LD_EXP 36
14145: PPUSH
14146: LD_STRING DK-1-delivery-3
14148: PPUSH
14149: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
14153: LD_EXP 31
14157: PPUSH
14158: LD_STRING DH-2-delivery-3
14160: PPUSH
14161: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14165: LD_EXP 32
14169: PPUSH
14170: LD_STRING DG-1-delivery-3
14172: PPUSH
14173: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14177: LD_EXP 33
14181: PPUSH
14182: LD_STRING DM-1-delivery-3
14184: PPUSH
14185: CALL_OW 88
// end ; DialogueOff ;
14189: CALL_OW 7
// case Difficulty of 2 :
14193: LD_OWVAR 67
14197: PUSH
14198: LD_INT 2
14200: DOUBLE
14201: EQUAL
14202: IFTRUE 14206
14204: GO 14224
14206: POP
// begin ChangeMissionObjectives ( Crates3 ) ;
14207: LD_STRING Crates3
14209: PPUSH
14210: CALL_OW 337
// farmerRequestedCrates := 900 ;
14214: LD_ADDR_EXP 17
14218: PUSH
14219: LD_INT 900
14221: ST_TO_ADDR
// end ; 3 :
14222: GO 14277
14224: LD_INT 3
14226: DOUBLE
14227: EQUAL
14228: IFTRUE 14232
14230: GO 14250
14232: POP
// begin ChangeMissionObjectives ( Crates4 ) ;
14233: LD_STRING Crates4
14235: PPUSH
14236: CALL_OW 337
// farmerRequestedCrates := 1200 ;
14240: LD_ADDR_EXP 17
14244: PUSH
14245: LD_INT 1200
14247: ST_TO_ADDR
// end ; 4 :
14248: GO 14277
14250: LD_INT 4
14252: DOUBLE
14253: EQUAL
14254: IFTRUE 14258
14256: GO 14276
14258: POP
// begin ChangeMissionObjectives ( Crates5 ) ;
14259: LD_STRING Crates5
14261: PPUSH
14262: CALL_OW 337
// farmerRequestedCrates := 1400 ;
14266: LD_ADDR_EXP 17
14270: PUSH
14271: LD_INT 1400
14273: ST_TO_ADDR
// end ; end ;
14274: GO 14277
14276: POP
// farmerCratesCounter := 30 30$00 ;
14277: LD_ADDR_EXP 18
14281: PUSH
14282: LD_INT 63000
14284: ST_TO_ADDR
// end ;
14285: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] do
14286: LD_EXP 4
14290: IFFALSE 14323
14292: PUSH
14293: LD_EXP 16
14297: PUSH
14298: LD_INT 600
14300: PUSH
14301: LD_INT 900
14303: PUSH
14304: LD_INT 1200
14306: PUSH
14307: LD_INT 1400
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: PUSH
14316: LD_OWVAR 67
14320: ARRAY
14321: GREATEREQUAL
14322: AND
14323: IFFALSE 14409
14325: GO 14327
14327: DISABLE
// begin retreatAllowed := true ;
14328: LD_ADDR_EXP 12
14332: PUSH
14333: LD_INT 1
14335: ST_TO_ADDR
// display_strings := [ ] ;
14336: LD_ADDR_OWVAR 47
14340: PUSH
14341: EMPTY
14342: ST_TO_ADDR
// DialogueOn ;
14343: CALL_OW 6
// InGameOn ;
14347: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
14351: LD_EXP 40
14355: PPUSH
14356: LD_STRING DO-radio-end
14358: PPUSH
14359: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14363: LD_EXP 31
14367: PPUSH
14368: LD_STRING DH-1-radio-end
14370: PPUSH
14371: CALL_OW 88
// InGameOff ;
14375: CALL_OW 9
// DialogueOff ;
14379: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14383: LD_STRING Retreat
14385: PPUSH
14386: CALL_OW 337
// wait ( 0 0$2 ) ;
14390: LD_INT 70
14392: PPUSH
14393: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
14397: LD_EXP 31
14401: PPUSH
14402: LD_STRING DH-2-radio-end
14404: PPUSH
14405: CALL_OW 88
// end ;
14409: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14410: LD_EXP 12
14414: IFFALSE 14547
14416: GO 14418
14418: DISABLE
14419: LD_INT 0
14421: PPUSH
14422: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14423: LD_INT 10
14425: PPUSH
14426: LD_INT 0
14428: PPUSH
14429: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14433: LD_ADDR_VAR 0 1
14437: PUSH
14438: LD_EXP 42
14442: PPUSH
14443: LD_INT 25
14445: PUSH
14446: LD_INT 2
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: PPUSH
14453: CALL_OW 72
14457: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14458: LD_VAR 0 1
14462: IFFALSE 14480
14464: PUSH
14465: LD_INT 102
14467: PPUSH
14468: LD_INT 69
14470: PPUSH
14471: CALL_OW 428
14475: PUSH
14476: LD_INT 0
14478: EQUAL
14479: AND
14480: IFFALSE 14547
// begin for i in tmp do
14482: LD_ADDR_VAR 0 2
14486: PUSH
14487: LD_VAR 0 1
14491: PUSH
14492: FOR_IN
14493: IFFALSE 14517
// if IsInUnit ( i ) then
14495: LD_VAR 0 2
14499: PPUSH
14500: CALL_OW 310
14504: IFFALSE 14515
// ComExitBuilding ( i ) ;
14506: LD_VAR 0 2
14510: PPUSH
14511: CALL_OW 122
14515: GO 14492
14517: POP
14518: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14519: LD_VAR 0 1
14523: PPUSH
14524: LD_INT 31
14526: PPUSH
14527: LD_INT 102
14529: PPUSH
14530: LD_INT 69
14532: PPUSH
14533: LD_INT 2
14535: PPUSH
14536: CALL_OW 205
// wait ( 0 0$3 ) ;
14540: LD_INT 105
14542: PPUSH
14543: CALL_OW 67
// end ; end ;
14547: PPOPN 2
14549: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14550: LD_EXP 12
14554: NOT
14555: IFFALSE 14566
14557: PUSH
14558: LD_INT 5
14560: PPUSH
14561: CALL_OW 301
14565: AND
14566: IFFALSE 14598
14568: GO 14570
14570: DISABLE
// begin DialogueOn ;
14571: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14575: LD_EXP 39
14579: PPUSH
14580: LD_STRING DF-1-failure
14582: PPUSH
14583: CALL_OW 94
// DialogueOff ;
14587: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14591: LD_STRING FarmerDepot
14593: PPUSH
14594: CALL_OW 104
// end ;
14598: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14599: LD_EXP 12
14603: IFFALSE 14625
14605: PUSH
14606: LD_EXP 31
14610: PPUSH
14611: LD_EXP 39
14615: PPUSH
14616: CALL_OW 296
14620: PUSH
14621: LD_INT 12
14623: LESS
14624: AND
14625: IFFALSE 14658
14627: PUSH
14628: LD_INT 81
14630: PUSH
14631: LD_INT 2
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: LD_INT 21
14640: PUSH
14641: LD_INT 1
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PPUSH
14652: CALL_OW 69
14656: NOT
14657: AND
14658: IFFALSE 15346
14660: GO 14662
14662: DISABLE
14663: LD_INT 0
14665: PPUSH
14666: PPUSH
14667: PPUSH
// begin allowConvoys := false ;
14668: LD_ADDR_EXP 13
14672: PUSH
14673: LD_INT 0
14675: ST_TO_ADDR
// InGameOn ;
14676: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14680: LD_EXP 31
14684: PPUSH
14685: LD_EXP 39
14689: PPUSH
14690: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14694: LD_EXP 39
14698: PPUSH
14699: LD_EXP 31
14703: PPUSH
14704: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14708: LD_EXP 39
14712: PPUSH
14713: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14717: LD_EXP 31
14721: PPUSH
14722: LD_STRING DH-1-end
14724: PPUSH
14725: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14729: LD_EXP 39
14733: PPUSH
14734: LD_STRING DF-1-end
14736: PPUSH
14737: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14741: LD_EXP 39
14745: PPUSH
14746: LD_STRING DF-2-end
14748: PPUSH
14749: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14753: LD_EXP 31
14757: PPUSH
14758: LD_STRING DH-2-end
14760: PPUSH
14761: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14765: LD_EXP 39
14769: PPUSH
14770: LD_STRING DF-3-end
14772: PPUSH
14773: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14777: LD_EXP 31
14781: PPUSH
14782: LD_STRING DH-3-end
14784: PPUSH
14785: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14789: LD_EXP 32
14793: PPUSH
14794: LD_STRING DG-1-end
14796: PPUSH
14797: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14801: LD_EXP 31
14805: PPUSH
14806: LD_STRING DH-4-end
14808: PPUSH
14809: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14813: LD_EXP 39
14817: PPUSH
14818: LD_STRING DF-4-end
14820: PPUSH
14821: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14825: LD_EXP 31
14829: PPUSH
14830: LD_STRING DH-5-end
14832: PPUSH
14833: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14837: LD_EXP 39
14841: PPUSH
14842: LD_STRING DF-5-end
14844: PPUSH
14845: CALL_OW 88
// InGameOff ;
14849: CALL_OW 9
// allowCargoEvacuation := true ;
14853: LD_ADDR_EXP 8
14857: PUSH
14858: LD_INT 1
14860: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14861: LD_ADDR_VAR 0 2
14865: PUSH
14866: LD_INT 4
14868: PUSH
14869: LD_INT 3
14871: PUSH
14872: LD_INT 2
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: LD_OWVAR 67
14888: ARRAY
14889: ST_TO_ADDR
// if farmerSquad < max then
14890: LD_EXP 42
14894: PUSH
14895: LD_VAR 0 2
14899: LESS
14900: IFFALSE 14912
// max := farmerSquad ;
14902: LD_ADDR_VAR 0 2
14906: PUSH
14907: LD_EXP 42
14911: ST_TO_ADDR
// for i := 1 to max do
14912: LD_ADDR_VAR 0 1
14916: PUSH
14917: DOUBLE
14918: LD_INT 1
14920: DEC
14921: ST_TO_ADDR
14922: LD_VAR 0 2
14926: PUSH
14927: FOR_TO
14928: IFFALSE 14966
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14930: LD_EXP 42
14934: PUSH
14935: LD_INT 1
14937: ARRAY
14938: PPUSH
14939: LD_INT 2
14941: PPUSH
14942: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14946: LD_ADDR_EXP 42
14950: PUSH
14951: LD_EXP 42
14955: PPUSH
14956: LD_INT 1
14958: PPUSH
14959: CALL_OW 3
14963: ST_TO_ADDR
// end ;
14964: GO 14927
14966: POP
14967: POP
// for i in Farmer ^ farmerSquad do
14968: LD_ADDR_VAR 0 1
14972: PUSH
14973: LD_EXP 39
14977: PUSH
14978: LD_EXP 42
14982: ADD
14983: PUSH
14984: FOR_IN
14985: IFFALSE 15024
// begin if IsInUnit ( i ) then
14987: LD_VAR 0 1
14991: PPUSH
14992: CALL_OW 310
14996: IFFALSE 15007
// ComExitBuilding ( i ) ;
14998: LD_VAR 0 1
15002: PPUSH
15003: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
15007: LD_VAR 0 1
15011: PPUSH
15012: LD_INT 102
15014: PPUSH
15015: LD_INT 7
15017: PPUSH
15018: CALL_OW 171
// end ;
15022: GO 14984
15024: POP
15025: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
15026: LD_ADDR_VAR 0 1
15030: PUSH
15031: LD_INT 22
15033: PUSH
15034: LD_INT 5
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 21
15043: PUSH
15044: LD_INT 3
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PPUSH
15055: CALL_OW 69
15059: PUSH
15060: LD_INT 5
15062: DIFF
15063: PUSH
15064: FOR_IN
15065: IFFALSE 15081
// SetSide ( i , 2 ) ;
15067: LD_VAR 0 1
15071: PPUSH
15072: LD_INT 2
15074: PPUSH
15075: CALL_OW 235
15079: GO 15064
15081: POP
15082: POP
// wait ( 0 0$2 ) ;
15083: LD_INT 70
15085: PPUSH
15086: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
15090: LD_EXP 31
15094: PPUSH
15095: LD_STRING DH-6-end
15097: PPUSH
15098: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
15102: LD_INT 35
15104: PPUSH
15105: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
15109: LD_ADDR_VAR 0 3
15113: PUSH
15114: LD_EXP 39
15118: PUSH
15119: LD_EXP 42
15123: ADD
15124: PPUSH
15125: LD_INT 95
15127: PUSH
15128: LD_INT 3
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL_OW 72
15139: ST_TO_ADDR
// if tmp then
15140: LD_VAR 0 3
15144: IFFALSE 15188
// for i in tmp do
15146: LD_ADDR_VAR 0 1
15150: PUSH
15151: LD_VAR 0 3
15155: PUSH
15156: FOR_IN
15157: IFFALSE 15186
// begin farmerSquad := farmerSquad diff i ;
15159: LD_ADDR_EXP 42
15163: PUSH
15164: LD_EXP 42
15168: PUSH
15169: LD_VAR 0 1
15173: DIFF
15174: ST_TO_ADDR
// RemoveUnit ( i ) ;
15175: LD_VAR 0 1
15179: PPUSH
15180: CALL_OW 64
// end ;
15184: GO 15156
15186: POP
15187: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15188: LD_EXP 42
15192: PUSH
15193: EMPTY
15194: EQUAL
15195: IFFALSE 15209
15197: PUSH
15198: LD_EXP 39
15202: PPUSH
15203: CALL_OW 305
15207: NOT
15208: AND
15209: IFFALSE 15102
// if farmerHumanLoseCounter = 0 then
15211: LD_EXP 21
15215: PUSH
15216: LD_INT 0
15218: EQUAL
15219: IFFALSE 15228
// SetAchievement ( ACH_BABY ) ;
15221: LD_STRING ACH_BABY
15223: PPUSH
15224: CALL_OW 543
// wait ( 1 1$00 ) ;
15228: LD_INT 2100
15230: PPUSH
15231: CALL_OW 67
// SendAttack ;
15235: CALL 6172 0 0
// Say ( Heike , DH-7-end ) ;
15239: LD_EXP 31
15243: PPUSH
15244: LD_STRING DH-7-end
15246: PPUSH
15247: CALL_OW 88
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
15251: LD_ADDR_VAR 0 1
15255: PUSH
15256: DOUBLE
15257: LD_INT 1
15259: DEC
15260: ST_TO_ADDR
15261: LD_INT 2
15263: PUSH
15264: LD_INT 3
15266: PUSH
15267: LD_INT 3
15269: PUSH
15270: LD_INT 4
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: PUSH
15279: LD_OWVAR 67
15283: ARRAY
15284: PUSH
15285: FOR_TO
15286: IFFALSE 15344
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
15288: LD_INT 4200
15290: PUSH
15291: LD_INT 3500
15293: PUSH
15294: LD_INT 3150
15296: PUSH
15297: LD_INT 2800
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: PUSH
15306: LD_OWVAR 67
15310: ARRAY
15311: PPUSH
15312: CALL_OW 67
// if retreatAllowed and omarCargoCounter < 1 then
15316: LD_EXP 12
15320: IFFALSE 15332
15322: PUSH
15323: LD_EXP 22
15327: PUSH
15328: LD_INT 1
15330: LESS
15331: AND
15332: IFFALSE 15338
// exit ;
15334: POP
15335: POP
15336: GO 15346
// SendAttack ;
15338: CALL 6172 0 0
// end ;
15342: GO 15285
15344: POP
15345: POP
// end ;
15346: PPOPN 3
15348: END
// every 0 0$45 trigger allowCargoEvacuation and omarCargoCounter > 0 do
15349: LD_EXP 8
15353: IFFALSE 15365
15355: PUSH
15356: LD_EXP 22
15360: PUSH
15361: LD_INT 0
15363: GREATER
15364: AND
15365: IFFALSE 15375
15367: GO 15369
15369: DISABLE
// begin enable ;
15370: ENABLE
// CargoEvacuation ;
15371: CALL 3613 0 0
// end ;
15375: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15376: LD_EXP 18
15380: PUSH
15381: LD_INT 18900
15383: LESSEQUAL
15384: IFFALSE 15433
15386: GO 15388
15388: DISABLE
// begin DialogueOn ;
15389: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15393: LD_EXP 39
15397: PPUSH
15398: LD_STRING DF-1-distribution-a
15400: PPUSH
15401: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15405: LD_EXP 31
15409: PPUSH
15410: LD_STRING DH-1-distribution-a
15412: PPUSH
15413: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15417: LD_EXP 39
15421: PPUSH
15422: LD_STRING DF-2-distribution-a
15424: PPUSH
15425: CALL_OW 94
// DialogueOff ;
15429: CALL_OW 7
// end ;
15433: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15434: LD_EXP 18
15438: PUSH
15439: LD_INT 0
15441: LESSEQUAL
15442: IFFALSE 15474
15444: GO 15446
15446: DISABLE
// begin DialogueOn ;
15447: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15451: LD_EXP 39
15455: PPUSH
15456: LD_STRING DF-3-distribution-a
15458: PPUSH
15459: CALL_OW 94
// YouLost ( Distribution ) ;
15463: LD_STRING Distribution
15465: PPUSH
15466: CALL_OW 104
// DialogueOff ;
15470: CALL_OW 7
// end ;
15474: END
// every 0 0$1 trigger vehCounter >= 2 do
15475: LD_EXP 23
15479: PUSH
15480: LD_INT 2
15482: GREATEREQUAL
15483: IFFALSE 15495
15485: GO 15487
15487: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15488: LD_STRING VehConstructed
15490: PPUSH
15491: CALL_OW 337
15495: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15496: LD_INT 22
15498: PUSH
15499: LD_INT 2
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 34
15508: PUSH
15509: LD_INT 12
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PPUSH
15520: CALL_OW 69
15524: IFFALSE 15584
15526: GO 15528
15528: DISABLE
// begin DialogueOn ;
15529: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15533: LD_EXP 31
15537: PPUSH
15538: LD_STRING DH-1-truck
15540: PPUSH
15541: CALL_OW 88
// if IsOk ( Markov ) then
15545: LD_EXP 38
15549: PPUSH
15550: CALL_OW 302
15554: IFFALSE 15580
// begin Say ( Markov , DMar-1-truck ) ;
15556: LD_EXP 38
15560: PPUSH
15561: LD_STRING DMar-1-truck
15563: PPUSH
15564: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15568: LD_EXP 31
15572: PPUSH
15573: LD_STRING DH-2-truck
15575: PPUSH
15576: CALL_OW 88
// end ; DialogueOff ;
15580: CALL_OW 7
// end ;
15584: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15585: LD_INT 0
15587: PPUSH
15588: PPUSH
15589: PPUSH
// if IsOk ( Givi ) then
15590: LD_EXP 32
15594: PPUSH
15595: CALL_OW 302
15599: IFFALSE 15615
// begin Say ( Givi , DG-1-nocargo ) ;
15601: LD_EXP 32
15605: PPUSH
15606: LD_STRING DG-1-nocargo
15608: PPUSH
15609: CALL_OW 88
// exit ;
15613: GO 15711
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15615: LD_ADDR_VAR 0 2
15619: PUSH
15620: LD_EXP 45
15624: PPUSH
15625: LD_INT 26
15627: PUSH
15628: LD_INT 1
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PPUSH
15635: CALL_OW 72
15639: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15640: LD_ADDR_VAR 0 3
15644: PUSH
15645: LD_EXP 45
15649: PPUSH
15650: LD_INT 26
15652: PUSH
15653: LD_INT 2
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PPUSH
15660: CALL_OW 72
15664: ST_TO_ADDR
// if randomMen then
15665: LD_VAR 0 2
15669: IFFALSE 15689
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15671: LD_VAR 0 2
15675: PUSH
15676: LD_INT 1
15678: ARRAY
15679: PPUSH
15680: LD_STRING DArm-1-nocargo
15682: PPUSH
15683: CALL_OW 88
15687: GO 15711
// if randomWomen then
15689: LD_VAR 0 3
15693: IFFALSE 15711
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15695: LD_VAR 0 3
15699: PUSH
15700: LD_INT 1
15702: ARRAY
15703: PPUSH
15704: LD_STRING DArf-1-nocargo
15706: PPUSH
15707: CALL_OW 88
// end ;
15711: LD_VAR 0 1
15715: RET
// export function IncomingAttack ; begin
15716: LD_INT 0
15718: PPUSH
// if attackWave = 1 then
15719: LD_EXP 20
15723: PUSH
15724: LD_INT 1
15726: EQUAL
15727: IFFALSE 15798
// begin DialogueOn ;
15729: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15733: LD_EXP 40
15737: PPUSH
15738: LD_STRING DO-1-radio-1
15740: PPUSH
15741: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15745: LD_EXP 31
15749: PPUSH
15750: LD_STRING DH-1-radio-1-
15752: PPUSH
15753: CALL_OW 88
// if IsOk ( Markov ) then
15757: LD_EXP 38
15761: PPUSH
15762: CALL_OW 302
15766: IFFALSE 15792
// begin Say ( Markov , DMar-1-radio-1 ) ;
15768: LD_EXP 38
15772: PPUSH
15773: LD_STRING DMar-1-radio-1
15775: PPUSH
15776: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15780: LD_EXP 31
15784: PPUSH
15785: LD_STRING DH-2-radio-1
15787: PPUSH
15788: CALL_OW 88
// end ; DialogueOff ;
15792: CALL_OW 7
// end else
15796: GO 15822
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15798: LD_EXP 40
15802: PPUSH
15803: LD_STRING DO-1-radio-u
15805: PPUSH
15806: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15810: LD_EXP 31
15814: PPUSH
15815: LD_STRING DH-1-radio-u
15817: PPUSH
15818: CALL_OW 88
// end ; end ;
15822: LD_VAR 0 1
15826: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15827: LD_EXP 47
15831: PPUSH
15832: LD_INT 95
15834: PUSH
15835: LD_INT 8
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PPUSH
15842: CALL_OW 72
15846: IFFALSE 15951
15848: GO 15850
15850: DISABLE
15851: LD_INT 0
15853: PPUSH
// begin enable ;
15854: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15855: LD_ADDR_VAR 0 1
15859: PUSH
15860: LD_EXP 47
15864: PPUSH
15865: LD_INT 95
15867: PUSH
15868: LD_INT 8
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PPUSH
15875: CALL_OW 72
15879: PUSH
15880: FOR_IN
15881: IFFALSE 15910
// begin usForces := usForces diff i ;
15883: LD_ADDR_EXP 47
15887: PUSH
15888: LD_EXP 47
15892: PUSH
15893: LD_VAR 0 1
15897: DIFF
15898: ST_TO_ADDR
// RemoveUnit ( i ) ;
15899: LD_VAR 0 1
15903: PPUSH
15904: CALL_OW 64
// end ;
15908: GO 15880
15910: POP
15911: POP
// if not americanHasEscaped and attackWave = 1 then
15912: LD_EXP 9
15916: NOT
15917: IFFALSE 15929
15919: PUSH
15920: LD_EXP 20
15924: PUSH
15925: LD_INT 1
15927: EQUAL
15928: AND
15929: IFFALSE 15951
// begin americanHasEscaped := true ;
15931: LD_ADDR_EXP 9
15935: PUSH
15936: LD_INT 1
15938: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15939: LD_EXP 31
15943: PPUSH
15944: LD_STRING DH-2-assault-a
15946: PPUSH
15947: CALL_OW 88
// end ; end ;
15951: PPOPN 1
15953: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15954: LD_INT 4
15956: PPUSH
15957: LD_INT 22
15959: PUSH
15960: LD_INT 1
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PPUSH
15967: CALL_OW 70
15971: IFFALSE 15980
15973: PUSH
15974: LD_EXP 12
15978: NOT
15979: AND
15980: IFFALSE 15997
15982: GO 15984
15984: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15985: LD_EXP 39
15989: PPUSH
15990: LD_STRING DF-1-attack
15992: PPUSH
15993: CALL_OW 94
15997: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15998: LD_INT 5
16000: PPUSH
16001: CALL_OW 255
16005: PUSH
16006: LD_INT 2
16008: EQUAL
16009: IFFALSE 16025
16011: GO 16013
16013: DISABLE
// begin enable ;
16014: ENABLE
// SetSide ( arDepot , 5 ) ;
16015: LD_INT 5
16017: PPUSH
16018: LD_INT 5
16020: PPUSH
16021: CALL_OW 235
// end ;
16025: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
16026: LD_INT 22
16028: PUSH
16029: LD_INT 1
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 21
16038: PUSH
16039: LD_INT 1
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PPUSH
16050: CALL_OW 69
16054: NOT
16055: IFFALSE 16074
16057: PUSH
16058: LD_INT 22
16060: PUSH
16061: LD_INT 4
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PPUSH
16068: CALL_OW 69
16072: NOT
16073: AND
16074: IFFALSE 16083
16076: PUSH
16077: LD_EXP 12
16081: NOT
16082: AND
16083: IFFALSE 16095
16085: PUSH
16086: LD_EXP 16
16090: PUSH
16091: LD_INT 90
16093: GREATER
16094: AND
16095: IFFALSE 16130
16097: PUSH
16098: LD_INT 7
16100: PPUSH
16101: LD_INT 22
16103: PUSH
16104: LD_INT 2
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 21
16113: PUSH
16114: LD_INT 1
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PPUSH
16125: CALL_OW 70
16129: AND
16130: IFFALSE 16169
16132: PUSH
16133: LD_INT 22
16135: PUSH
16136: LD_INT 2
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 50
16145: PUSH
16146: EMPTY
16147: LIST
16148: PUSH
16149: LD_INT 30
16151: PUSH
16152: LD_INT 0
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: LIST
16163: PPUSH
16164: CALL_OW 69
16168: AND
16169: IFFALSE 16984
16171: GO 16173
16173: DISABLE
16174: LD_INT 0
16176: PPUSH
16177: PPUSH
16178: PPUSH
16179: PPUSH
16180: PPUSH
// begin depot := usDepot ;
16181: LD_ADDR_VAR 0 5
16185: PUSH
16186: LD_INT 11
16188: ST_TO_ADDR
// if not depot then
16189: LD_VAR 0 5
16193: NOT
16194: IFFALSE 16234
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16196: LD_ADDR_VAR 0 5
16200: PUSH
16201: LD_INT 22
16203: PUSH
16204: LD_INT 2
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 30
16213: PUSH
16214: LD_INT 0
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PPUSH
16225: CALL_OW 69
16229: PUSH
16230: LD_INT 1
16232: ARRAY
16233: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
16234: LD_ADDR_VAR 0 1
16238: PUSH
16239: LD_EXP 45
16243: PPUSH
16244: LD_INT 26
16246: PUSH
16247: LD_INT 1
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PPUSH
16254: CALL_OW 72
16258: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
16259: LD_ADDR_VAR 0 2
16263: PUSH
16264: LD_EXP 45
16268: PPUSH
16269: LD_INT 26
16271: PUSH
16272: LD_INT 2
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PPUSH
16279: CALL_OW 72
16283: ST_TO_ADDR
// if IsOk ( Kaia ) then
16284: LD_EXP 36
16288: PPUSH
16289: CALL_OW 302
16293: IFFALSE 16314
// speaker := [ Kaia , DK ] else
16295: LD_ADDR_VAR 0 3
16299: PUSH
16300: LD_EXP 36
16304: PUSH
16305: LD_STRING DK
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: ST_TO_ADDR
16312: GO 16394
// if randomMen then
16314: LD_VAR 0 1
16318: IFFALSE 16353
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16320: LD_ADDR_VAR 0 3
16324: PUSH
16325: LD_VAR 0 1
16329: PUSH
16330: LD_INT 1
16332: PPUSH
16333: LD_VAR 0 1
16337: PPUSH
16338: CALL_OW 12
16342: ARRAY
16343: PUSH
16344: LD_STRING DArm
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: ST_TO_ADDR
16351: GO 16394
// if randomWomen then
16353: LD_VAR 0 2
16357: IFFALSE 16392
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16359: LD_ADDR_VAR 0 3
16363: PUSH
16364: LD_VAR 0 2
16368: PUSH
16369: LD_INT 1
16371: PPUSH
16372: LD_VAR 0 2
16376: PPUSH
16377: CALL_OW 12
16381: ARRAY
16382: PUSH
16383: LD_STRING DArf
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: ST_TO_ADDR
16390: GO 16394
// exit ;
16392: GO 16984
// if IsInUnit ( speaker [ 1 ] ) then
16394: LD_VAR 0 3
16398: PUSH
16399: LD_INT 1
16401: ARRAY
16402: PPUSH
16403: CALL_OW 310
16407: IFFALSE 16430
// place := IsInUnit ( speaker [ 1 ] ) else
16409: LD_ADDR_VAR 0 4
16413: PUSH
16414: LD_VAR 0 3
16418: PUSH
16419: LD_INT 1
16421: ARRAY
16422: PPUSH
16423: CALL_OW 310
16427: ST_TO_ADDR
16428: GO 16444
// place := speaker [ 1 ] ;
16430: LD_ADDR_VAR 0 4
16434: PUSH
16435: LD_VAR 0 3
16439: PUSH
16440: LD_INT 1
16442: ARRAY
16443: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16444: LD_VAR 0 4
16448: PPUSH
16449: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16453: LD_VAR 0 4
16457: PPUSH
16458: CALL_OW 250
16462: PPUSH
16463: LD_VAR 0 4
16467: PPUSH
16468: CALL_OW 251
16472: PPUSH
16473: CALL 2090 0 2
// wait ( 0 0$2 ) ;
16477: LD_INT 70
16479: PPUSH
16480: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16484: LD_EXP 41
16488: PPUSH
16489: CALL_OW 305
16493: NOT
16494: IFFALSE 16498
// exit ;
16496: GO 16984
// allowConvoys := false ;
16498: LD_ADDR_EXP 13
16502: PUSH
16503: LD_INT 0
16505: ST_TO_ADDR
// blockAttack := true ;
16506: LD_ADDR_EXP 29
16510: PUSH
16511: LD_INT 1
16513: ST_TO_ADDR
// InGameOn ;
16514: CALL_OW 8
// wait ( 0 0$1 ) ;
16518: LD_INT 35
16520: PPUSH
16521: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16525: LD_EXP 41
16529: PPUSH
16530: LD_STRING DI-1-land
16532: PPUSH
16533: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16537: LD_VAR 0 3
16541: PUSH
16542: LD_INT 1
16544: ARRAY
16545: PPUSH
16546: CALL_OW 310
16550: IFFALSE 16565
// ComExit ( speaker [ 1 ] ) ;
16552: LD_VAR 0 3
16556: PUSH
16557: LD_INT 1
16559: ARRAY
16560: PPUSH
16561: CALL 80344 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16565: LD_VAR 0 3
16569: PUSH
16570: LD_INT 1
16572: ARRAY
16573: PPUSH
16574: LD_EXP 41
16578: PPUSH
16579: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16583: LD_VAR 0 3
16587: PUSH
16588: LD_INT 1
16590: ARRAY
16591: PPUSH
16592: LD_EXP 41
16596: PPUSH
16597: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16601: LD_EXP 41
16605: PPUSH
16606: LD_VAR 0 3
16610: PUSH
16611: LD_INT 1
16613: ARRAY
16614: PPUSH
16615: CALL_OW 119
// wait ( 0 0$1 ) ;
16619: LD_INT 35
16621: PPUSH
16622: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16626: LD_VAR 0 3
16630: PUSH
16631: LD_INT 1
16633: ARRAY
16634: PPUSH
16635: LD_VAR 0 3
16639: PUSH
16640: LD_INT 2
16642: ARRAY
16643: PUSH
16644: LD_STRING -1-land
16646: STR
16647: PPUSH
16648: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16652: LD_EXP 41
16656: PPUSH
16657: LD_STRING DI-2-land
16659: PPUSH
16660: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16664: LD_VAR 0 3
16668: PUSH
16669: LD_INT 1
16671: ARRAY
16672: PPUSH
16673: LD_VAR 0 3
16677: PUSH
16678: LD_INT 2
16680: ARRAY
16681: PUSH
16682: LD_STRING -2-land
16684: STR
16685: PPUSH
16686: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16690: LD_VAR 0 3
16694: PUSH
16695: LD_INT 1
16697: ARRAY
16698: PPUSH
16699: LD_VAR 0 3
16703: PUSH
16704: LD_INT 2
16706: ARRAY
16707: PUSH
16708: LD_STRING -3-land
16710: STR
16711: PPUSH
16712: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16716: LD_EXP 31
16720: PPUSH
16721: LD_STRING DH-1-land
16723: PPUSH
16724: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16728: LD_VAR 0 5
16732: PPUSH
16733: CALL_OW 313
16737: PUSH
16738: LD_INT 6
16740: EQUAL
16741: IFFALSE 16761
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16743: LD_VAR 0 5
16747: PPUSH
16748: CALL_OW 313
16752: PUSH
16753: LD_INT 1
16755: ARRAY
16756: PPUSH
16757: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16761: LD_EXP 41
16765: PPUSH
16766: LD_INT 2
16768: PPUSH
16769: CALL_OW 235
// CenterOnUnits ( depot ) ;
16773: LD_VAR 0 5
16777: PPUSH
16778: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16782: LD_EXP 41
16786: PPUSH
16787: LD_VAR 0 5
16791: PPUSH
16792: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16796: LD_VAR 0 3
16800: PUSH
16801: LD_INT 1
16803: ARRAY
16804: PPUSH
16805: LD_VAR 0 5
16809: PPUSH
16810: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16814: LD_INT 35
16816: PPUSH
16817: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16821: LD_EXP 41
16825: PPUSH
16826: CALL_OW 310
16830: IFTRUE 16844
16832: PUSH
16833: LD_EXP 41
16837: PPUSH
16838: CALL_OW 302
16842: NOT
16843: OR
16844: IFTRUE 16858
16846: PUSH
16847: LD_VAR 0 5
16851: PPUSH
16852: CALL_OW 302
16856: NOT
16857: OR
16858: IFFALSE 16814
// InGameOff ;
16860: CALL_OW 9
// blockAttack := false ;
16864: LD_ADDR_EXP 29
16868: PUSH
16869: LD_INT 0
16871: ST_TO_ADDR
// if not IsOk ( Ibrahim ) then
16872: LD_EXP 41
16876: PPUSH
16877: CALL_OW 302
16881: NOT
16882: IFFALSE 16886
// exit ;
16884: GO 16984
// if not IsOk ( depot ) then
16886: LD_VAR 0 5
16890: PPUSH
16891: CALL_OW 302
16895: NOT
16896: IFFALSE 16961
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16898: LD_EXP 41
16902: PPUSH
16903: LD_INT 30
16905: PPUSH
16906: LD_INT 1
16908: PPUSH
16909: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16913: LD_INT 35
16915: PPUSH
16916: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16920: LD_EXP 41
16924: PPUSH
16925: LD_INT 30
16927: PPUSH
16928: LD_INT 1
16930: PPUSH
16931: CALL_OW 307
16935: IFTRUE 16948
16937: PUSH
16938: LD_EXP 41
16942: PPUSH
16943: CALL_OW 301
16947: OR
16948: IFFALSE 16913
// RemoveUnit ( Ibrahim ) ;
16950: LD_EXP 41
16954: PPUSH
16955: CALL_OW 64
// exit ;
16959: GO 16984
// end ; ibrahimInDepot := true ;
16961: LD_ADDR_EXP 26
16965: PUSH
16966: LD_INT 1
16968: ST_TO_ADDR
// allowConvoys := true ;
16969: LD_ADDR_EXP 13
16973: PUSH
16974: LD_INT 1
16976: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16977: LD_STRING IbrahimInDepot
16979: PPUSH
16980: CALL_OW 97
// end ;
16984: PPOPN 5
16986: END
// export function IbrahimQuery ; begin
16987: LD_INT 0
16989: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16990: LD_STRING IbrahimQuery
16992: PPUSH
16993: CALL_OW 97
16997: PUSH
16998: LD_INT 1
17000: DOUBLE
17001: EQUAL
17002: IFTRUE 17006
17004: GO 17376
17006: POP
// begin allowConvoys := false ;
17007: LD_ADDR_EXP 13
17011: PUSH
17012: LD_INT 0
17014: ST_TO_ADDR
// ibrahimInDepot := false ;
17015: LD_ADDR_EXP 26
17019: PUSH
17020: LD_INT 0
17022: ST_TO_ADDR
// InGameOn ;
17023: CALL_OW 8
// DialogueOn ;
17027: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
17031: LD_EXP 31
17035: PPUSH
17036: CALL_OW 87
// wait ( 0 0$1 ) ;
17040: LD_INT 35
17042: PPUSH
17043: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
17047: LD_EXP 31
17051: PPUSH
17052: LD_STRING DH-1-interrogation
17054: PPUSH
17055: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
17059: LD_EXP 41
17063: PPUSH
17064: LD_STRING DI-1-interrogation
17066: PPUSH
17067: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
17071: LD_EXP 31
17075: PPUSH
17076: LD_STRING DH-2-interrogation
17078: PPUSH
17079: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
17083: LD_EXP 41
17087: PPUSH
17088: LD_STRING DI-2-interrogation
17090: PPUSH
17091: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
17095: LD_EXP 31
17099: PPUSH
17100: LD_STRING DH-3-interrogation
17102: PPUSH
17103: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
17107: LD_EXP 41
17111: PPUSH
17112: LD_STRING DI-3-interrogation
17114: PPUSH
17115: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
17119: LD_EXP 31
17123: PPUSH
17124: LD_STRING DH-4-interrogation
17126: PPUSH
17127: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
17131: LD_EXP 41
17135: PPUSH
17136: LD_STRING DI-4-interrogation
17138: PPUSH
17139: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
17143: LD_EXP 31
17147: PPUSH
17148: LD_STRING DH-5-interrogation
17150: PPUSH
17151: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
17155: LD_EXP 41
17159: PPUSH
17160: LD_STRING DI-5-interrogation
17162: PPUSH
17163: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17167: LD_INT 10
17169: PPUSH
17170: CALL_OW 67
// Say ( Heike , DH-6-interrogation ) ;
17174: LD_EXP 31
17178: PPUSH
17179: LD_STRING DH-6-interrogation
17181: PPUSH
17182: CALL_OW 88
// Say ( Ibrahim , DI-6-interrogation ) ;
17186: LD_EXP 41
17190: PPUSH
17191: LD_STRING DI-6-interrogation
17193: PPUSH
17194: CALL_OW 88
// Say ( Ibrahim , DI-7-interrogation ) ;
17198: LD_EXP 41
17202: PPUSH
17203: LD_STRING DI-7-interrogation
17205: PPUSH
17206: CALL_OW 88
// Say ( Heike , DH-7-interrogation ) ;
17210: LD_EXP 31
17214: PPUSH
17215: LD_STRING DH-7-interrogation
17217: PPUSH
17218: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17222: LD_INT 10
17224: PPUSH
17225: CALL_OW 67
// Say ( Heike , DH-8-interrogation ) ;
17229: LD_EXP 31
17233: PPUSH
17234: LD_STRING DH-8-interrogation
17236: PPUSH
17237: CALL_OW 88
// Say ( Ibrahim , DI-8-interrogation ) ;
17241: LD_EXP 41
17245: PPUSH
17246: LD_STRING DI-8-interrogation
17248: PPUSH
17249: CALL_OW 88
// wait ( 0 0$1 ) ;
17253: LD_INT 35
17255: PPUSH
17256: CALL_OW 67
// DialogueOff ;
17260: CALL_OW 7
// case Query ( IbrahimDecisionQuery ) of 1 :
17264: LD_STRING IbrahimDecisionQuery
17266: PPUSH
17267: CALL_OW 97
17271: PUSH
17272: LD_INT 1
17274: DOUBLE
17275: EQUAL
17276: IFTRUE 17280
17278: GO 17304
17280: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
17281: LD_EXP 41
17285: PPUSH
17286: LD_STRING DI-1-kill
17288: PPUSH
17289: CALL_OW 88
// KillUnit ( Ibrahim ) ;
17293: LD_EXP 41
17297: PPUSH
17298: CALL_OW 66
// end ; 2 :
17302: GO 17370
17304: LD_INT 2
17306: DOUBLE
17307: EQUAL
17308: IFTRUE 17312
17310: GO 17369
17312: POP
// begin SetSide ( Ibrahim , 6 ) ;
17313: LD_EXP 41
17317: PPUSH
17318: LD_INT 6
17320: PPUSH
17321: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
17325: LD_EXP 41
17329: PPUSH
17330: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
17334: LD_EXP 41
17338: PPUSH
17339: LD_INT 66
17341: PPUSH
17342: LD_INT 2
17344: PPUSH
17345: CALL_OW 171
// AddComHold ( Ibrahim ) ;
17349: LD_EXP 41
17353: PPUSH
17354: CALL_OW 200
// ComExitBuilding ( Heike ) ;
17358: LD_EXP 31
17362: PPUSH
17363: CALL_OW 122
// end ; end ;
17367: GO 17370
17369: POP
// InGameOff ;
17370: CALL_OW 9
// end ; 2 :
17374: GO 17390
17376: LD_INT 2
17378: DOUBLE
17379: EQUAL
17380: IFTRUE 17384
17382: GO 17389
17384: POP
// exit ; end ;
17385: GO 17474
17387: GO 17390
17389: POP
// allowConvoys := true ;
17390: LD_ADDR_EXP 13
17394: PUSH
17395: LD_INT 1
17397: ST_TO_ADDR
// blockAttack := false ;
17398: LD_ADDR_EXP 29
17402: PUSH
17403: LD_INT 0
17405: ST_TO_ADDR
// wait ( 2 2$30 ) ;
17406: LD_INT 5250
17408: PPUSH
17409: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17413: LD_INT 35
17415: PPUSH
17416: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
17420: LD_INT 81
17422: PUSH
17423: LD_INT 2
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 21
17432: PUSH
17433: LD_INT 1
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PPUSH
17444: CALL_OW 69
17448: NOT
17449: IFFALSE 17413
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
17451: LD_EXP 41
17455: PPUSH
17456: LD_INT 34
17458: PPUSH
17459: LD_INT 21
17461: PPUSH
17462: CALL_OW 111
// ibrahimIsFree := true ;
17466: LD_ADDR_EXP 27
17470: PUSH
17471: LD_INT 1
17473: ST_TO_ADDR
// end ;
17474: LD_VAR 0 1
17478: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
17479: LD_EXP 27
17483: IFFALSE 17496
17485: PUSH
17486: LD_EXP 41
17490: PPUSH
17491: CALL_OW 302
17495: AND
17496: IFFALSE 17512
17498: PUSH
17499: LD_INT 2
17501: PPUSH
17502: LD_EXP 41
17506: PPUSH
17507: CALL_OW 292
17511: AND
17512: IFFALSE 18330
17514: GO 17516
17516: DISABLE
17517: LD_INT 0
17519: PPUSH
17520: PPUSH
17521: PPUSH
17522: PPUSH
17523: PPUSH
17524: PPUSH
// begin wait ( 0 0$10 ) ;
17525: LD_INT 350
17527: PPUSH
17528: CALL_OW 67
// allowConvoys := false ;
17532: LD_ADDR_EXP 13
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// blockAttack := true ;
17540: LD_ADDR_EXP 29
17544: PUSH
17545: LD_INT 1
17547: ST_TO_ADDR
// depot := usDepot ;
17548: LD_ADDR_VAR 0 4
17552: PUSH
17553: LD_INT 11
17555: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
17556: LD_INT 11
17558: NOT
17559: IFFALSE 17598
17561: PUSH
17562: LD_INT 22
17564: PUSH
17565: LD_INT 2
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 50
17574: PUSH
17575: EMPTY
17576: LIST
17577: PUSH
17578: LD_INT 30
17580: PUSH
17581: LD_INT 0
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: LIST
17592: PPUSH
17593: CALL_OW 69
17597: AND
17598: IFFALSE 17645
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17600: LD_ADDR_VAR 0 4
17604: PUSH
17605: LD_INT 22
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 50
17617: PUSH
17618: EMPTY
17619: LIST
17620: PUSH
17621: LD_INT 30
17623: PUSH
17624: LD_INT 0
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: LIST
17635: PPUSH
17636: CALL_OW 69
17640: PUSH
17641: LD_INT 1
17643: ARRAY
17644: ST_TO_ADDR
// InGameOn ;
17645: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17649: LD_EXP 41
17653: PPUSH
17654: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17658: LD_EXP 31
17662: PPUSH
17663: LD_EXP 41
17667: PPUSH
17668: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17672: LD_EXP 41
17676: PPUSH
17677: LD_EXP 31
17681: PPUSH
17682: CALL_OW 119
// DialogueOn ;
17686: CALL_OW 6
// Say ( Ibrahim , DI-1-free ) ;
17690: LD_EXP 41
17694: PPUSH
17695: LD_STRING DI-1-free
17697: PPUSH
17698: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17702: LD_EXP 31
17706: PPUSH
17707: LD_STRING DH-1-free
17709: PPUSH
17710: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17714: LD_EXP 41
17718: PPUSH
17719: LD_STRING DI-2-free
17721: PPUSH
17722: CALL_OW 88
// changeClass := 0 ;
17726: LD_ADDR_VAR 0 1
17730: PUSH
17731: LD_INT 0
17733: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17734: LD_STRING IbrahimJoinQuery
17736: PPUSH
17737: CALL_OW 97
17741: PUSH
17742: LD_INT 1
17744: DOUBLE
17745: EQUAL
17746: IFTRUE 17750
17748: GO 17761
17750: POP
// begin changeClass := 1 ;
17751: LD_ADDR_VAR 0 1
17755: PUSH
17756: LD_INT 1
17758: ST_TO_ADDR
// end ; 2 :
17759: GO 18017
17761: LD_INT 2
17763: DOUBLE
17764: EQUAL
17765: IFTRUE 17769
17767: GO 17937
17769: POP
// begin Say ( Heike , DH-1-decline ) ;
17770: LD_EXP 31
17774: PPUSH
17775: LD_STRING DH-1-decline
17777: PPUSH
17778: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17782: LD_EXP 41
17786: PPUSH
17787: LD_STRING DI-1-decline
17789: PPUSH
17790: CALL_OW 88
// DialogueOff ;
17794: CALL_OW 7
// InGameOff ;
17798: CALL_OW 9
// blockAttack := false ;
17802: LD_ADDR_EXP 29
17806: PUSH
17807: LD_INT 0
17809: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17810: LD_EXP 41
17814: PPUSH
17815: LD_INT 30
17817: PPUSH
17818: LD_INT 1
17820: PPUSH
17821: CALL_OW 111
// p := 0 ;
17825: LD_ADDR_VAR 0 3
17829: PUSH
17830: LD_INT 0
17832: ST_TO_ADDR
// repeat p := p + 1 ;
17833: LD_ADDR_VAR 0 3
17837: PUSH
17838: LD_VAR 0 3
17842: PUSH
17843: LD_INT 1
17845: PLUS
17846: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17847: LD_INT 35
17849: PPUSH
17850: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17854: LD_EXP 41
17858: PPUSH
17859: LD_INT 30
17861: PPUSH
17862: LD_INT 1
17864: PPUSH
17865: CALL_OW 307
17869: IFTRUE 17902
17871: PUSH
17872: LD_INT 22
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 101
17884: PUSH
17885: LD_INT 6
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PPUSH
17896: CALL_OW 69
17900: NOT
17901: OR
17902: IFTRUE 17914
17904: PUSH
17905: LD_VAR 0 3
17909: PUSH
17910: LD_INT 10
17912: GREATER
17913: OR
17914: IFFALSE 17833
// RemoveUnit ( Ibrahim ) ;
17916: LD_EXP 41
17920: PPUSH
17921: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17925: LD_INT 1
17927: PPUSH
17928: LD_STRING 03_IbrahimHasEscaped
17930: PPUSH
17931: CALL_OW 39
// end ; 3 :
17935: GO 18017
17937: LD_INT 3
17939: DOUBLE
17940: EQUAL
17941: IFTRUE 17945
17943: GO 18016
17945: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17946: LD_EXP 31
17950: PPUSH
17951: LD_STRING DH-1-radio-hq
17953: PPUSH
17954: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17958: LD_EXP 40
17962: PPUSH
17963: LD_STRING DO-1-radio-hq
17965: PPUSH
17966: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17970: LD_EXP 31
17974: PPUSH
17975: LD_STRING DH-2-radio-hq
17977: PPUSH
17978: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17982: LD_EXP 40
17986: PPUSH
17987: LD_STRING DO-2-radio-hq
17989: PPUSH
17990: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17994: LD_EXP 31
17998: PPUSH
17999: LD_STRING DH-3-radio-hq
18001: PPUSH
18002: CALL_OW 88
// changeClass := 1 ;
18006: LD_ADDR_VAR 0 1
18010: PUSH
18011: LD_INT 1
18013: ST_TO_ADDR
// end ; end ;
18014: GO 18017
18016: POP
// if changeClass then
18017: LD_VAR 0 1
18021: IFFALSE 18330
// begin Say ( Heike , DH-1-agree ) ;
18023: LD_EXP 31
18027: PPUSH
18028: LD_STRING DH-1-agree
18030: PPUSH
18031: CALL_OW 88
// if IsOk ( Givi ) then
18035: LD_EXP 32
18039: PPUSH
18040: CALL_OW 302
18044: IFFALSE 18082
// begin Say ( Givi , DG-1-agree ) ;
18046: LD_EXP 32
18050: PPUSH
18051: LD_STRING DG-1-agree
18053: PPUSH
18054: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
18058: LD_EXP 31
18062: PPUSH
18063: LD_STRING DH-2-agree
18065: PPUSH
18066: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
18070: LD_EXP 32
18074: PPUSH
18075: LD_STRING DG-2-agree
18077: PPUSH
18078: CALL_OW 88
// end ; CenterNowOnUnits ( Ibrahim ) ;
18082: LD_EXP 41
18086: PPUSH
18087: CALL_OW 87
// DialogueOff ;
18091: CALL_OW 7
// if UnitsInside ( depot ) = 6 then
18095: LD_VAR 0 4
18099: PPUSH
18100: CALL_OW 313
18104: PUSH
18105: LD_INT 6
18107: EQUAL
18108: IFFALSE 18128
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
18110: LD_VAR 0 4
18114: PPUSH
18115: CALL_OW 313
18119: PUSH
18120: LD_INT 1
18122: ARRAY
18123: PPUSH
18124: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
18128: LD_EXP 41
18132: PPUSH
18133: LD_INT 2
18135: PPUSH
18136: CALL_OW 235
// x := GetX ( Ibrahim ) ;
18140: LD_ADDR_VAR 0 5
18144: PUSH
18145: LD_EXP 41
18149: PPUSH
18150: CALL_OW 250
18154: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
18155: LD_ADDR_VAR 0 6
18159: PUSH
18160: LD_EXP 41
18164: PPUSH
18165: CALL_OW 251
18169: ST_TO_ADDR
// if depot then
18170: LD_VAR 0 4
18174: IFFALSE 18223
// begin ComEnterUnit ( Ibrahim , depot ) ;
18176: LD_EXP 41
18180: PPUSH
18181: LD_VAR 0 4
18185: PPUSH
18186: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18190: LD_INT 35
18192: PPUSH
18193: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18197: LD_EXP 41
18201: PPUSH
18202: CALL_OW 310
18206: IFFALSE 18190
// b := IsInUnit ( Ibrahim ) ;
18208: LD_ADDR_VAR 0 2
18212: PUSH
18213: LD_EXP 41
18217: PPUSH
18218: CALL_OW 310
18222: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
18223: LD_EXP 41
18227: PPUSH
18228: CALL_OW 64
// uc_side := 2 ;
18232: LD_ADDR_OWVAR 20
18236: PUSH
18237: LD_INT 2
18239: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
18240: LD_ADDR_EXP 41
18244: PUSH
18245: LD_STRING Ibrahim
18247: PPUSH
18248: LD_INT 0
18250: PPUSH
18251: LD_STRING 
18253: PPUSH
18254: CALL 41814 0 3
18258: ST_TO_ADDR
// if depot then
18259: LD_VAR 0 4
18263: IFFALSE 18281
// PlaceHumanInUnit ( Ibrahim , b ) else
18265: LD_EXP 41
18269: PPUSH
18270: LD_VAR 0 2
18274: PPUSH
18275: CALL_OW 52
18279: GO 18303
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
18281: LD_EXP 41
18285: PPUSH
18286: LD_VAR 0 5
18290: PPUSH
18291: LD_VAR 0 6
18295: PPUSH
18296: LD_INT 0
18298: PPUSH
18299: CALL_OW 48
// InGameOff ;
18303: CALL_OW 9
// allowConvoys := true ;
18307: LD_ADDR_EXP 13
18311: PUSH
18312: LD_INT 1
18314: ST_TO_ADDR
// blockAttack := false ;
18315: LD_ADDR_EXP 29
18319: PUSH
18320: LD_INT 0
18322: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
18323: LD_STRING ACH_IBRAHIM
18325: PPUSH
18326: CALL_OW 543
// end ; end ;
18330: PPOPN 6
18332: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
18333: LD_EXP 36
18337: PPUSH
18338: CALL_OW 256
18342: PUSH
18343: LD_INT 3
18345: LESS
18346: IFFALSE 18413
18348: GO 18350
18350: DISABLE
// begin DialogueOn ;
18351: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
18355: LD_EXP 36
18359: PPUSH
18360: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
18364: LD_EXP 36
18368: PPUSH
18369: LD_STRING DK-keydeath-1
18371: PPUSH
18372: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
18376: LD_EXP 31
18380: PPUSH
18381: LD_STRING DH-keydeath-2
18383: PPUSH
18384: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
18388: LD_EXP 31
18392: PPUSH
18393: LD_STRING DH-keydeath-3
18395: PPUSH
18396: CALL_OW 88
// DialogueOff ;
18400: CALL_OW 7
// KillUnit ( Kaia ) ;
18404: LD_EXP 36
18408: PPUSH
18409: CALL_OW 66
// end ;
18413: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
18414: LD_EXP 12
18418: IFFALSE 18430
18420: PUSH
18421: LD_EXP 22
18425: PUSH
18426: LD_INT 1
18428: LESS
18429: AND
18430: IFFALSE 19001
18432: GO 18434
18434: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
18435: LD_INT 22
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: LD_INT 25
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 25
18460: PUSH
18461: LD_INT 3
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PPUSH
18477: CALL_OW 69
18481: IFFALSE 18559
// begin ChangeSideFog ( 1 , 2 ) ;
18483: LD_INT 1
18485: PPUSH
18486: LD_INT 2
18488: PPUSH
18489: CALL_OW 343
// Query ( DestroyEnemy ) ;
18493: LD_STRING DestroyEnemy
18495: PPUSH
18496: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
18500: LD_INT 35
18502: PPUSH
18503: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
18507: LD_INT 22
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: PUSH
18520: LD_INT 25
18522: PUSH
18523: LD_INT 1
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 25
18532: PUSH
18533: LD_INT 3
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: LIST
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 69
18553: PUSH
18554: LD_INT 0
18556: EQUAL
18557: IFFALSE 18500
// end ; if tick <= 45 45$00 then
18559: LD_OWVAR 1
18563: PUSH
18564: LD_INT 94500
18566: LESSEQUAL
18567: IFFALSE 18576
// SetAchievement ( ACH_HSPEED_3 ) ;
18569: LD_STRING ACH_HSPEED_3
18571: PPUSH
18572: CALL_OW 543
// DialogueOn ;
18576: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
18580: LD_EXP 31
18584: PPUSH
18585: LD_STRING DH-1-final
18587: PPUSH
18588: CALL_OW 88
// if tick <= [ 66 66$00 , 64 64$00 , 62 62$00 , 60 60$00 ] [ Difficulty ] then
18592: LD_OWVAR 1
18596: PUSH
18597: LD_INT 138600
18599: PUSH
18600: LD_INT 134400
18602: PUSH
18603: LD_INT 130200
18605: PUSH
18606: LD_INT 126000
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: PUSH
18615: LD_OWVAR 67
18619: ARRAY
18620: LESSEQUAL
18621: IFFALSE 18635
// AddMedal ( med1 , 1 ) else
18623: LD_STRING med1
18625: PPUSH
18626: LD_INT 1
18628: PPUSH
18629: CALL_OW 101
18633: GO 18646
// AddMedal ( med1 , - 1 ) ;
18635: LD_STRING med1
18637: PPUSH
18638: LD_INT 1
18640: NEG
18641: PPUSH
18642: CALL_OW 101
// if vehCounter >= 2 then
18646: LD_EXP 23
18650: PUSH
18651: LD_INT 2
18653: GREATEREQUAL
18654: IFFALSE 18668
// AddMedal ( med2 , 1 ) else
18656: LD_STRING med2
18658: PPUSH
18659: LD_INT 1
18661: PPUSH
18662: CALL_OW 101
18666: GO 18679
// AddMedal ( med2 , - 1 ) ;
18668: LD_STRING med2
18670: PPUSH
18671: LD_INT 1
18673: NEG
18674: PPUSH
18675: CALL_OW 101
// if deadCounter = 0 then
18679: LD_EXP 10
18683: PUSH
18684: LD_INT 0
18686: EQUAL
18687: IFFALSE 18701
// AddMedal ( med3 , 1 ) else
18689: LD_STRING med3
18691: PPUSH
18692: LD_INT 1
18694: PPUSH
18695: CALL_OW 101
18699: GO 18712
// AddMedal ( med3 , - 1 ) ;
18701: LD_STRING med3
18703: PPUSH
18704: LD_INT 1
18706: NEG
18707: PPUSH
18708: CALL_OW 101
// GiveMedals ( MAIN ) ;
18712: LD_STRING MAIN
18714: PPUSH
18715: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
18719: LD_INT 22
18721: PUSH
18722: LD_INT 2
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 23
18731: PUSH
18732: LD_INT 2
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 21
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: PPUSH
18754: CALL_OW 69
18758: PPUSH
18759: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
18763: LD_EXP 31
18767: PPUSH
18768: LD_STRING 03_Heike
18770: PPUSH
18771: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18775: LD_EXP 35
18779: PPUSH
18780: LD_STRING 03_Aviradze
18782: PPUSH
18783: CALL_OW 38
// if Givi then
18787: LD_EXP 32
18791: IFFALSE 18805
// SaveCharacters ( Givi , 03_Givi ) ;
18793: LD_EXP 32
18797: PPUSH
18798: LD_STRING 03_Givi
18800: PPUSH
18801: CALL_OW 38
// if Mike then
18805: LD_EXP 33
18809: IFFALSE 18823
// SaveCharacters ( Mike , 03_Mike ) ;
18811: LD_EXP 33
18815: PPUSH
18816: LD_STRING 03_Mike
18818: PPUSH
18819: CALL_OW 38
// if Kamil then
18823: LD_EXP 34
18827: IFFALSE 18841
// SaveCharacters ( Kamil , 03_Kamil ) ;
18829: LD_EXP 34
18833: PPUSH
18834: LD_STRING 03_Kamil
18836: PPUSH
18837: CALL_OW 38
// if Kaia then
18841: LD_EXP 36
18845: IFFALSE 18859
// SaveCharacters ( Kaia , 03_Kaia ) ;
18847: LD_EXP 36
18851: PPUSH
18852: LD_STRING 03_Kaia
18854: PPUSH
18855: CALL_OW 38
// if Sophia then
18859: LD_EXP 37
18863: IFFALSE 18877
// SaveCharacters ( Sophia , 03_Sophia ) ;
18865: LD_EXP 37
18869: PPUSH
18870: LD_STRING 03_Sophia
18872: PPUSH
18873: CALL_OW 38
// if Markov then
18877: LD_EXP 38
18881: IFFALSE 18895
// SaveCharacters ( Markov , 03_Markov ) ;
18883: LD_EXP 38
18887: PPUSH
18888: LD_STRING 03_Markov
18890: PPUSH
18891: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18895: LD_EXP 41
18899: IFFALSE 18916
18901: PUSH
18902: LD_EXP 41
18906: PPUSH
18907: CALL_OW 255
18911: PUSH
18912: LD_INT 2
18914: EQUAL
18915: AND
18916: IFFALSE 18937
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18918: LD_STRING enableBioCharacter(BIO_IBRA)
18920: PPUSH
18921: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18925: LD_EXP 41
18929: PPUSH
18930: LD_STRING 03_Ibrahim
18932: PPUSH
18933: CALL_OW 38
// end ; if heikeSecondSquad then
18937: LD_EXP 45
18941: IFFALSE 18955
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18943: LD_EXP 45
18947: PPUSH
18948: LD_STRING 03_others
18950: PPUSH
18951: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18955: LD_EXP 10
18959: PPUSH
18960: LD_STRING 03_DeadCounter
18962: PPUSH
18963: CALL_OW 39
// SaveVariable ( cargoRecycled , 03_CargoRecycled ) ;
18967: LD_EXP 30
18971: PPUSH
18972: LD_STRING 03_CargoRecycled
18974: PPUSH
18975: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18979: LD_STRING enableBioCharacter(BIO_OMAR)
18981: PPUSH
18982: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18986: LD_STRING enableBioCharacter(BIO_FARM)
18988: PPUSH
18989: CALL_OW 559
// YouWin ;
18993: CALL_OW 103
// DialogueOff ;
18997: CALL_OW 7
// end ; end_of_file
19001: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
19002: LD_VAR 0 1
19006: PPUSH
19007: CALL 36388 0 1
// if un = Heike then
19011: LD_VAR 0 1
19015: PUSH
19016: LD_EXP 31
19020: EQUAL
19021: IFFALSE 19030
// YouLost ( Heike ) ;
19023: LD_STRING Heike
19025: PPUSH
19026: CALL_OW 104
// if un = Aviradze then
19030: LD_VAR 0 1
19034: PUSH
19035: LD_EXP 35
19039: EQUAL
19040: IFFALSE 19049
// YouLost ( Aviradze ) ;
19042: LD_STRING Aviradze
19044: PPUSH
19045: CALL_OW 104
// if un = usDepot and not retreatAllowed then
19049: LD_VAR 0 1
19053: PUSH
19054: LD_INT 11
19056: EQUAL
19057: IFFALSE 19066
19059: PUSH
19060: LD_EXP 12
19064: NOT
19065: AND
19066: IFFALSE 19075
// YouLost ( Depot ) ;
19068: LD_STRING Depot
19070: PPUSH
19071: CALL_OW 104
// if un = arDepot then
19075: LD_VAR 0 1
19079: PUSH
19080: LD_INT 5
19082: EQUAL
19083: IFFALSE 19092
// YouLost ( FarmerDepot ) ;
19085: LD_STRING FarmerDepot
19087: PPUSH
19088: CALL_OW 104
// if un = Farmer then
19092: LD_VAR 0 1
19096: PUSH
19097: LD_EXP 39
19101: EQUAL
19102: IFFALSE 19111
// YouLost ( Farmer ) ;
19104: LD_STRING Farmer
19106: PPUSH
19107: CALL_OW 104
// if un in usForces then
19111: LD_VAR 0 1
19115: PUSH
19116: LD_EXP 47
19120: IN
19121: IFFALSE 19139
// usForces := usForces diff un ;
19123: LD_ADDR_EXP 47
19127: PUSH
19128: LD_EXP 47
19132: PUSH
19133: LD_VAR 0 1
19137: DIFF
19138: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
19139: LD_VAR 0 1
19143: PUSH
19144: LD_INT 22
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 23
19156: PUSH
19157: LD_INT 2
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 21
19166: PUSH
19167: LD_INT 1
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: PPUSH
19179: CALL_OW 69
19183: IN
19184: IFFALSE 19200
// deadCounter := deadCounter + 1 ;
19186: LD_ADDR_EXP 10
19190: PUSH
19191: LD_EXP 10
19195: PUSH
19196: LD_INT 1
19198: PLUS
19199: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
19200: LD_VAR 0 1
19204: PUSH
19205: LD_INT 22
19207: PUSH
19208: LD_INT 4
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 34
19217: PUSH
19218: LD_INT 12
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PPUSH
19229: CALL_OW 69
19233: IN
19234: IFFALSE 19243
19236: PUSH
19237: LD_EXP 19
19241: NOT
19242: AND
19243: IFFALSE 19253
// firstConvoyDestroyed := true ;
19245: LD_ADDR_EXP 19
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// if un in usAttackers then
19253: LD_VAR 0 1
19257: PUSH
19258: LD_EXP 50
19262: IN
19263: IFFALSE 19281
// usAttackers := usAttackers diff un ;
19265: LD_ADDR_EXP 50
19269: PUSH
19270: LD_EXP 50
19274: PUSH
19275: LD_VAR 0 1
19279: DIFF
19280: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
19281: LD_VAR 0 1
19285: PUSH
19286: LD_INT 22
19288: PUSH
19289: LD_INT 5
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 21
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PPUSH
19310: CALL_OW 69
19314: IN
19315: IFFALSE 19331
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
19317: LD_ADDR_EXP 21
19321: PUSH
19322: LD_EXP 21
19326: PUSH
19327: LD_INT 1
19329: PLUS
19330: ST_TO_ADDR
// end ;
19331: PPOPN 1
19333: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
19334: LD_VAR 0 2
19338: PUSH
19339: LD_EXP 41
19343: EQUAL
19344: IFFALSE 19352
19346: PUSH
19347: LD_EXP 26
19351: AND
19352: IFFALSE 19539
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
19354: LD_INT 22
19356: PUSH
19357: LD_INT 2
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 30
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 50
19376: PUSH
19377: EMPTY
19378: LIST
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: PPUSH
19385: CALL_OW 69
19389: IFFALSE 19443
// begin InGameOn ;
19391: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
19395: LD_EXP 41
19399: PPUSH
19400: LD_INT 11
19402: PPUSH
19403: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19407: LD_INT 35
19409: PPUSH
19410: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
19414: LD_EXP 41
19418: PPUSH
19419: LD_INT 11
19421: PPUSH
19422: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
19426: LD_EXP 41
19430: PPUSH
19431: CALL_OW 310
19435: IFFALSE 19407
// InGameOff ;
19437: CALL_OW 9
// end else
19441: GO 19539
// begin SetSide ( Ibrahim , 6 ) ;
19443: LD_EXP 41
19447: PPUSH
19448: LD_INT 6
19450: PPUSH
19451: CALL_OW 235
// ibrahimInDepot := false ;
19455: LD_ADDR_EXP 26
19459: PUSH
19460: LD_INT 0
19462: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19463: LD_EXP 41
19467: PPUSH
19468: LD_INT 30
19470: PPUSH
19471: LD_INT 1
19473: PPUSH
19474: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19478: LD_INT 35
19480: PPUSH
19481: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
19485: LD_EXP 41
19489: PPUSH
19490: LD_INT 30
19492: PPUSH
19493: LD_INT 1
19495: PPUSH
19496: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
19500: LD_EXP 41
19504: PPUSH
19505: LD_INT 30
19507: PPUSH
19508: LD_INT 1
19510: PPUSH
19511: CALL_OW 307
19515: IFTRUE 19528
19517: PUSH
19518: LD_EXP 41
19522: PPUSH
19523: CALL_OW 301
19527: OR
19528: IFFALSE 19478
// RemoveUnit ( Ibrahim ) ;
19530: LD_EXP 41
19534: PPUSH
19535: CALL_OW 64
// end ; end ; end ;
19539: PPOPN 2
19541: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
19542: LD_VAR 0 2
19546: PUSH
19547: LD_EXP 31
19551: EQUAL
19552: IFFALSE 19564
19554: PUSH
19555: LD_VAR 0 1
19559: PUSH
19560: LD_INT 11
19562: EQUAL
19563: AND
19564: IFFALSE 19572
19566: PUSH
19567: LD_EXP 26
19571: AND
19572: IFFALSE 19578
// IbrahimQuery ;
19574: CALL 16987 0 0
// end ;
19578: PPOPN 2
19580: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
19581: LD_VAR 0 1
19585: PPUSH
19586: CALL_OW 141
// if oldId in usAttackers then
19590: LD_VAR 0 2
19594: PUSH
19595: LD_EXP 50
19599: IN
19600: IFFALSE 19618
// usAttackers := usAttackers diff oldId ;
19602: LD_ADDR_EXP 50
19606: PUSH
19607: LD_EXP 50
19611: PUSH
19612: LD_VAR 0 2
19616: DIFF
19617: ST_TO_ADDR
// if newId in usAttackers then
19618: LD_VAR 0 1
19622: PUSH
19623: LD_EXP 50
19627: IN
19628: IFFALSE 19646
// usAttackers := usAttackers diff newId ;
19630: LD_ADDR_EXP 50
19634: PUSH
19635: LD_EXP 50
19639: PUSH
19640: LD_VAR 0 1
19644: DIFF
19645: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
19646: LD_VAR 0 3
19650: PUSH
19651: LD_INT 4
19653: EQUAL
19654: IFFALSE 19663
19656: PUSH
19657: LD_EXP 19
19661: NOT
19662: AND
19663: IFFALSE 19673
// firstConvoyDestroyed := true ;
19665: LD_ADDR_EXP 19
19669: PUSH
19670: LD_INT 1
19672: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL_OW 264
19682: PUSH
19683: LD_INT 12
19685: EQUAL
19686: IFFALSE 19724
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
19688: LD_ADDR_EXP 14
19692: PUSH
19693: LD_EXP 14
19697: PUSH
19698: LD_INT 1
19700: PLUS
19701: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
19702: LD_VAR 0 1
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: CALL_OW 289
19714: PUSH
19715: LD_INT 0
19717: EQUAL
19718: IFFALSE 19724
// EmptyCargoDialog ;
19720: CALL 15585 0 0
// end ; end ;
19724: PPOPN 4
19726: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
19727: LD_VAR 0 1
19731: PUSH
19732: LD_INT 2
19734: EQUAL
19735: IFFALSE 19747
19737: PUSH
19738: LD_VAR 0 2
19742: PUSH
19743: LD_INT 5
19745: EQUAL
19746: AND
19747: IFFALSE 19756
// YouLost ( Attack ) ;
19749: LD_STRING Attack
19751: PPUSH
19752: CALL_OW 104
// if s1 = 2 and s2 = 1 then
19756: LD_VAR 0 1
19760: PUSH
19761: LD_INT 2
19763: EQUAL
19764: IFFALSE 19776
19766: PUSH
19767: LD_VAR 0 2
19771: PUSH
19772: LD_INT 1
19774: EQUAL
19775: AND
19776: IFFALSE 19786
// americanContact := true ;
19778: LD_ADDR_EXP 5
19782: PUSH
19783: LD_INT 1
19785: ST_TO_ADDR
// end ;
19786: PPOPN 2
19788: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
19789: LD_VAR 0 1
19793: PPUSH
19794: CALL_OW 255
19798: PUSH
19799: LD_INT 1
19801: EQUAL
19802: IFFALSE 19811
19804: PUSH
19805: LD_EXP 7
19809: NOT
19810: AND
19811: IFFALSE 19945
// begin if GetBType ( b ) = b_lab then
19813: LD_VAR 0 1
19817: PPUSH
19818: CALL_OW 266
19822: PUSH
19823: LD_INT 6
19825: EQUAL
19826: IFFALSE 19866
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
19828: LD_EXP 47
19832: PPUSH
19833: LD_INT 25
19835: PUSH
19836: LD_INT 4
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PPUSH
19843: CALL_OW 72
19847: PPUSH
19848: LD_VAR 0 1
19852: PPUSH
19853: CALL_OW 120
// AmLabResearch ( b ) ;
19857: LD_VAR 0 1
19861: PPUSH
19862: CALL 5172 0 1
// end ; if GetBType ( b ) = b_armoury then
19866: LD_VAR 0 1
19870: PPUSH
19871: CALL_OW 266
19875: PUSH
19876: LD_INT 4
19878: EQUAL
19879: IFFALSE 19927
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19881: LD_EXP 47
19885: PPUSH
19886: LD_INT 25
19888: PUSH
19889: LD_INT 1
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 3
19898: PUSH
19899: LD_INT 54
19901: PUSH
19902: EMPTY
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PPUSH
19913: CALL_OW 72
19917: PPUSH
19918: LD_VAR 0 1
19922: PPUSH
19923: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19927: LD_ADDR_EXP 49
19931: PUSH
19932: LD_EXP 49
19936: PPUSH
19937: LD_INT 1
19939: PPUSH
19940: CALL_OW 3
19944: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19945: LD_VAR 0 1
19949: PPUSH
19950: CALL_OW 255
19954: PUSH
19955: LD_INT 5
19957: EQUAL
19958: IFFALSE 19972
// SetBLevel ( b , 5 ) ;
19960: LD_VAR 0 1
19964: PPUSH
19965: LD_INT 5
19967: PPUSH
19968: CALL_OW 241
// end ;
19972: PPOPN 1
19974: END
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin if weapon = us_cargo_bay then
19975: LD_VAR 0 11
19979: PUSH
19980: LD_INT 12
19982: EQUAL
19983: IFFALSE 19993
// cargoRecycled := true ;
19985: LD_ADDR_EXP 30
19989: PUSH
19990: LD_INT 1
19992: ST_TO_ADDR
// end ;
19993: PPOPN 11
19995: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19996: LD_VAR 0 1
20000: PPUSH
20001: CALL_OW 255
20005: PUSH
20006: LD_INT 2
20008: EQUAL
20009: IFFALSE 20025
// vehCounter := vehCounter + 1 ;
20011: LD_ADDR_EXP 23
20015: PUSH
20016: LD_EXP 23
20020: PUSH
20021: LD_INT 1
20023: PLUS
20024: ST_TO_ADDR
// SOS_VehicleConstructed ( veh , fac ) ;
20025: LD_VAR 0 1
20029: PPUSH
20030: LD_VAR 0 2
20034: PPUSH
20035: CALL 36446 0 2
// end ;
20039: PPOPN 2
20041: END
// on SailEvent ( event ) do begin if event = eventAttack then
20042: LD_VAR 0 1
20046: PUSH
20047: LD_EXP 25
20051: EQUAL
20052: IFFALSE 20058
// AmericanAttack ;
20054: CALL 6832 0 0
// end ; end_of_file
20058: PPOPN 1
20060: END
// every 0 0$45 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
20061: LD_OWVAR 1
20065: PUSH
20066: LD_INT 10500
20068: PUSH
20069: LD_INT 9800
20071: PUSH
20072: LD_INT 9450
20074: PUSH
20075: LD_INT 9100
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: PUSH
20084: LD_OWVAR 67
20088: ARRAY
20089: LESSEQUAL
20090: IFFALSE 20117
20092: GO 20094
20094: DISABLE
// begin enable ;
20095: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
20096: LD_INT 1
20098: PPUSH
20099: LD_INT 5
20101: PPUSH
20102: CALL_OW 12
20106: PPUSH
20107: LD_INT 9
20109: PPUSH
20110: LD_INT 1
20112: PPUSH
20113: CALL_OW 55
// end ;
20117: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= 45 45$00 do
20118: LD_EXP 7
20122: IFFALSE 20134
20124: PUSH
20125: LD_OWVAR 1
20129: PUSH
20130: LD_INT 94500
20132: LESSEQUAL
20133: AND
20134: IFFALSE 20161
20136: GO 20138
20138: DISABLE
// begin enable ;
20139: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
20140: LD_INT 3
20142: PPUSH
20143: LD_INT 5
20145: PPUSH
20146: CALL_OW 12
20150: PPUSH
20151: LD_INT 9
20153: PPUSH
20154: LD_INT 1
20156: PPUSH
20157: CALL_OW 55
// end ; end_of_file
20161: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
20162: LD_EXP 12
20166: NOT
20167: IFFALSE 20175
20169: PUSH
20170: LD_EXP 17
20174: AND
20175: IFFALSE 20183
20177: PUSH
20178: LD_EXP 4
20182: AND
20183: IFFALSE 20197
20185: PUSH
20186: LD_EXP 16
20190: PUSH
20191: LD_EXP 17
20195: LESSEQUAL
20196: AND
20197: IFFALSE 20308
20199: GO 20201
20201: DISABLE
// begin enable ;
20202: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
20203: LD_ADDR_OWVAR 47
20207: PUSH
20208: LD_STRING #X103-1
20210: PUSH
20211: LD_EXP 17
20215: PUSH
20216: LD_EXP 16
20220: MINUS
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
20226: LD_ADDR_EXP 16
20230: PUSH
20231: LD_INT 5
20233: PPUSH
20234: CALL_OW 274
20238: PPUSH
20239: LD_INT 1
20241: PPUSH
20242: CALL_OW 275
20246: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
20247: LD_INT 10
20249: PPUSH
20250: LD_INT 1
20252: PPUSH
20253: CALL_OW 287
20257: PUSH
20258: LD_INT 0
20260: EQUAL
20261: IFFALSE 20279
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
20263: LD_ADDR_EXP 18
20267: PUSH
20268: LD_EXP 18
20272: PUSH
20273: LD_INT 35
20275: MINUS
20276: ST_TO_ADDR
20277: GO 20308
// farmerCratesCounter := [ 20 20$00 , 15 15$00 , 12 12$00 , 10 10$00 ] [ Difficulty ] ;
20279: LD_ADDR_EXP 18
20283: PUSH
20284: LD_INT 42000
20286: PUSH
20287: LD_INT 31500
20289: PUSH
20290: LD_INT 25200
20292: PUSH
20293: LD_INT 21000
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: PUSH
20302: LD_OWVAR 67
20306: ARRAY
20307: ST_TO_ADDR
// end ; end_of_file
20308: END
// export globalGameSaveCounter ; every 0 0$1 do
20309: GO 20311
20311: DISABLE
// begin enable ;
20312: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20313: LD_STRING updateTimer(
20315: PUSH
20316: LD_OWVAR 1
20320: STR
20321: PUSH
20322: LD_STRING );
20324: STR
20325: PPUSH
20326: CALL_OW 559
// end ;
20330: END
// every 0 0$1 do
20331: GO 20333
20333: DISABLE
// begin globalGameSaveCounter := 0 ;
20334: LD_ADDR_EXP 51
20338: PUSH
20339: LD_INT 0
20341: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20342: LD_STRING setGameSaveCounter(0)
20344: PPUSH
20345: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20349: LD_STRING initStreamRollete();
20351: PPUSH
20352: CALL_OW 559
// InitStreamMode ;
20356: CALL 21701 0 0
// DefineStreamItems ( false ) ;
20360: LD_INT 0
20362: PPUSH
20363: CALL 22165 0 1
// end ;
20367: END
// export function SOS_MapStart ( ) ; begin
20368: LD_INT 0
20370: PPUSH
// if streamModeActive then
20371: LD_EXP 52
20375: IFFALSE 20384
// DefineStreamItems ( true ) ;
20377: LD_INT 1
20379: PPUSH
20380: CALL 22165 0 1
// UpdateLuaVariables ( ) ;
20384: CALL 20401 0 0
// UpdateFactoryWaypoints ( ) ;
20388: CALL 35287 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20392: CALL 35539 0 0
// end ;
20396: LD_VAR 0 1
20400: RET
// function UpdateLuaVariables ( ) ; begin
20401: LD_INT 0
20403: PPUSH
// if globalGameSaveCounter then
20404: LD_EXP 51
20408: IFFALSE 20442
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20410: LD_ADDR_EXP 51
20414: PUSH
20415: LD_EXP 51
20419: PPUSH
20420: CALL 81319 0 1
20424: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20425: LD_STRING setGameSaveCounter(
20427: PUSH
20428: LD_EXP 51
20432: STR
20433: PUSH
20434: LD_STRING )
20436: STR
20437: PPUSH
20438: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20442: LD_STRING setGameDifficulty(
20444: PUSH
20445: LD_OWVAR 67
20449: STR
20450: PUSH
20451: LD_STRING )
20453: STR
20454: PPUSH
20455: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20459: LD_STRING displayDifficulty(
20461: PUSH
20462: LD_OWVAR 67
20466: STR
20467: PUSH
20468: LD_STRING )
20470: STR
20471: PPUSH
20472: CALL_OW 559
// end ;
20476: LD_VAR 0 1
20480: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20481: LD_INT 0
20483: PPUSH
// if p2 = stream_mode then
20484: LD_VAR 0 2
20488: PUSH
20489: LD_INT 100
20491: EQUAL
20492: IFFALSE 21495
// begin if not StreamModeActive then
20494: LD_EXP 52
20498: NOT
20499: IFFALSE 20509
// StreamModeActive := true ;
20501: LD_ADDR_EXP 52
20505: PUSH
20506: LD_INT 1
20508: ST_TO_ADDR
// if p3 = 0 then
20509: LD_VAR 0 3
20513: PUSH
20514: LD_INT 0
20516: EQUAL
20517: IFFALSE 20523
// InitStreamMode ;
20519: CALL 21701 0 0
// if p3 = 1 then
20523: LD_VAR 0 3
20527: PUSH
20528: LD_INT 1
20530: EQUAL
20531: IFFALSE 20541
// sRocket := true ;
20533: LD_ADDR_EXP 57
20537: PUSH
20538: LD_INT 1
20540: ST_TO_ADDR
// if p3 = 2 then
20541: LD_VAR 0 3
20545: PUSH
20546: LD_INT 2
20548: EQUAL
20549: IFFALSE 20559
// sSpeed := true ;
20551: LD_ADDR_EXP 56
20555: PUSH
20556: LD_INT 1
20558: ST_TO_ADDR
// if p3 = 3 then
20559: LD_VAR 0 3
20563: PUSH
20564: LD_INT 3
20566: EQUAL
20567: IFFALSE 20577
// sEngine := true ;
20569: LD_ADDR_EXP 58
20573: PUSH
20574: LD_INT 1
20576: ST_TO_ADDR
// if p3 = 4 then
20577: LD_VAR 0 3
20581: PUSH
20582: LD_INT 4
20584: EQUAL
20585: IFFALSE 20595
// sSpec := true ;
20587: LD_ADDR_EXP 55
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// if p3 = 5 then
20595: LD_VAR 0 3
20599: PUSH
20600: LD_INT 5
20602: EQUAL
20603: IFFALSE 20613
// sLevel := true ;
20605: LD_ADDR_EXP 59
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// if p3 = 6 then
20613: LD_VAR 0 3
20617: PUSH
20618: LD_INT 6
20620: EQUAL
20621: IFFALSE 20631
// sArmoury := true ;
20623: LD_ADDR_EXP 60
20627: PUSH
20628: LD_INT 1
20630: ST_TO_ADDR
// if p3 = 7 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_INT 7
20638: EQUAL
20639: IFFALSE 20649
// sRadar := true ;
20641: LD_ADDR_EXP 61
20645: PUSH
20646: LD_INT 1
20648: ST_TO_ADDR
// if p3 = 8 then
20649: LD_VAR 0 3
20653: PUSH
20654: LD_INT 8
20656: EQUAL
20657: IFFALSE 20667
// sBunker := true ;
20659: LD_ADDR_EXP 62
20663: PUSH
20664: LD_INT 1
20666: ST_TO_ADDR
// if p3 = 9 then
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 9
20674: EQUAL
20675: IFFALSE 20685
// sHack := true ;
20677: LD_ADDR_EXP 63
20681: PUSH
20682: LD_INT 1
20684: ST_TO_ADDR
// if p3 = 10 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 10
20692: EQUAL
20693: IFFALSE 20703
// sFire := true ;
20695: LD_ADDR_EXP 64
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 11 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 11
20710: EQUAL
20711: IFFALSE 20721
// sRefresh := true ;
20713: LD_ADDR_EXP 65
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 12 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 12
20728: EQUAL
20729: IFFALSE 20739
// sExp := true ;
20731: LD_ADDR_EXP 66
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 13 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 13
20746: EQUAL
20747: IFFALSE 20757
// sDepot := true ;
20749: LD_ADDR_EXP 67
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 14 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 14
20764: EQUAL
20765: IFFALSE 20775
// sFlag := true ;
20767: LD_ADDR_EXP 68
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 15 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 15
20782: EQUAL
20783: IFFALSE 20793
// sKamikadze := true ;
20785: LD_ADDR_EXP 76
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 16 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 16
20800: EQUAL
20801: IFFALSE 20811
// sTroll := true ;
20803: LD_ADDR_EXP 77
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 17 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 17
20818: EQUAL
20819: IFFALSE 20829
// sSlow := true ;
20821: LD_ADDR_EXP 78
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// if p3 = 18 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 18
20836: EQUAL
20837: IFFALSE 20847
// sLack := true ;
20839: LD_ADDR_EXP 79
20843: PUSH
20844: LD_INT 1
20846: ST_TO_ADDR
// if p3 = 19 then
20847: LD_VAR 0 3
20851: PUSH
20852: LD_INT 19
20854: EQUAL
20855: IFFALSE 20865
// sTank := true ;
20857: LD_ADDR_EXP 81
20861: PUSH
20862: LD_INT 1
20864: ST_TO_ADDR
// if p3 = 20 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 20
20872: EQUAL
20873: IFFALSE 20883
// sRemote := true ;
20875: LD_ADDR_EXP 82
20879: PUSH
20880: LD_INT 1
20882: ST_TO_ADDR
// if p3 = 21 then
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 21
20890: EQUAL
20891: IFFALSE 20901
// sPowell := true ;
20893: LD_ADDR_EXP 83
20897: PUSH
20898: LD_INT 1
20900: ST_TO_ADDR
// if p3 = 22 then
20901: LD_VAR 0 3
20905: PUSH
20906: LD_INT 22
20908: EQUAL
20909: IFFALSE 20919
// sTeleport := true ;
20911: LD_ADDR_EXP 86
20915: PUSH
20916: LD_INT 1
20918: ST_TO_ADDR
// if p3 = 23 then
20919: LD_VAR 0 3
20923: PUSH
20924: LD_INT 23
20926: EQUAL
20927: IFFALSE 20937
// sOilTower := true ;
20929: LD_ADDR_EXP 88
20933: PUSH
20934: LD_INT 1
20936: ST_TO_ADDR
// if p3 = 24 then
20937: LD_VAR 0 3
20941: PUSH
20942: LD_INT 24
20944: EQUAL
20945: IFFALSE 20955
// sShovel := true ;
20947: LD_ADDR_EXP 89
20951: PUSH
20952: LD_INT 1
20954: ST_TO_ADDR
// if p3 = 25 then
20955: LD_VAR 0 3
20959: PUSH
20960: LD_INT 25
20962: EQUAL
20963: IFFALSE 20973
// sSheik := true ;
20965: LD_ADDR_EXP 90
20969: PUSH
20970: LD_INT 1
20972: ST_TO_ADDR
// if p3 = 26 then
20973: LD_VAR 0 3
20977: PUSH
20978: LD_INT 26
20980: EQUAL
20981: IFFALSE 20991
// sEarthquake := true ;
20983: LD_ADDR_EXP 92
20987: PUSH
20988: LD_INT 1
20990: ST_TO_ADDR
// if p3 = 27 then
20991: LD_VAR 0 3
20995: PUSH
20996: LD_INT 27
20998: EQUAL
20999: IFFALSE 21009
// sAI := true ;
21001: LD_ADDR_EXP 93
21005: PUSH
21006: LD_INT 1
21008: ST_TO_ADDR
// if p3 = 28 then
21009: LD_VAR 0 3
21013: PUSH
21014: LD_INT 28
21016: EQUAL
21017: IFFALSE 21027
// sCargo := true ;
21019: LD_ADDR_EXP 96
21023: PUSH
21024: LD_INT 1
21026: ST_TO_ADDR
// if p3 = 29 then
21027: LD_VAR 0 3
21031: PUSH
21032: LD_INT 29
21034: EQUAL
21035: IFFALSE 21045
// sDLaser := true ;
21037: LD_ADDR_EXP 97
21041: PUSH
21042: LD_INT 1
21044: ST_TO_ADDR
// if p3 = 30 then
21045: LD_VAR 0 3
21049: PUSH
21050: LD_INT 30
21052: EQUAL
21053: IFFALSE 21063
// sExchange := true ;
21055: LD_ADDR_EXP 98
21059: PUSH
21060: LD_INT 1
21062: ST_TO_ADDR
// if p3 = 31 then
21063: LD_VAR 0 3
21067: PUSH
21068: LD_INT 31
21070: EQUAL
21071: IFFALSE 21081
// sFac := true ;
21073: LD_ADDR_EXP 99
21077: PUSH
21078: LD_INT 1
21080: ST_TO_ADDR
// if p3 = 32 then
21081: LD_VAR 0 3
21085: PUSH
21086: LD_INT 32
21088: EQUAL
21089: IFFALSE 21099
// sPower := true ;
21091: LD_ADDR_EXP 100
21095: PUSH
21096: LD_INT 1
21098: ST_TO_ADDR
// if p3 = 33 then
21099: LD_VAR 0 3
21103: PUSH
21104: LD_INT 33
21106: EQUAL
21107: IFFALSE 21117
// sRandom := true ;
21109: LD_ADDR_EXP 101
21113: PUSH
21114: LD_INT 1
21116: ST_TO_ADDR
// if p3 = 34 then
21117: LD_VAR 0 3
21121: PUSH
21122: LD_INT 34
21124: EQUAL
21125: IFFALSE 21135
// sShield := true ;
21127: LD_ADDR_EXP 102
21131: PUSH
21132: LD_INT 1
21134: ST_TO_ADDR
// if p3 = 35 then
21135: LD_VAR 0 3
21139: PUSH
21140: LD_INT 35
21142: EQUAL
21143: IFFALSE 21153
// sTime := true ;
21145: LD_ADDR_EXP 103
21149: PUSH
21150: LD_INT 1
21152: ST_TO_ADDR
// if p3 = 36 then
21153: LD_VAR 0 3
21157: PUSH
21158: LD_INT 36
21160: EQUAL
21161: IFFALSE 21171
// sTools := true ;
21163: LD_ADDR_EXP 104
21167: PUSH
21168: LD_INT 1
21170: ST_TO_ADDR
// if p3 = 101 then
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 101
21178: EQUAL
21179: IFFALSE 21189
// sSold := true ;
21181: LD_ADDR_EXP 69
21185: PUSH
21186: LD_INT 1
21188: ST_TO_ADDR
// if p3 = 102 then
21189: LD_VAR 0 3
21193: PUSH
21194: LD_INT 102
21196: EQUAL
21197: IFFALSE 21207
// sDiff := true ;
21199: LD_ADDR_EXP 70
21203: PUSH
21204: LD_INT 1
21206: ST_TO_ADDR
// if p3 = 103 then
21207: LD_VAR 0 3
21211: PUSH
21212: LD_INT 103
21214: EQUAL
21215: IFFALSE 21225
// sFog := true ;
21217: LD_ADDR_EXP 73
21221: PUSH
21222: LD_INT 1
21224: ST_TO_ADDR
// if p3 = 104 then
21225: LD_VAR 0 3
21229: PUSH
21230: LD_INT 104
21232: EQUAL
21233: IFFALSE 21243
// sReset := true ;
21235: LD_ADDR_EXP 74
21239: PUSH
21240: LD_INT 1
21242: ST_TO_ADDR
// if p3 = 105 then
21243: LD_VAR 0 3
21247: PUSH
21248: LD_INT 105
21250: EQUAL
21251: IFFALSE 21261
// sSun := true ;
21253: LD_ADDR_EXP 75
21257: PUSH
21258: LD_INT 1
21260: ST_TO_ADDR
// if p3 = 106 then
21261: LD_VAR 0 3
21265: PUSH
21266: LD_INT 106
21268: EQUAL
21269: IFFALSE 21279
// sTiger := true ;
21271: LD_ADDR_EXP 71
21275: PUSH
21276: LD_INT 1
21278: ST_TO_ADDR
// if p3 = 107 then
21279: LD_VAR 0 3
21283: PUSH
21284: LD_INT 107
21286: EQUAL
21287: IFFALSE 21297
// sBomb := true ;
21289: LD_ADDR_EXP 72
21293: PUSH
21294: LD_INT 1
21296: ST_TO_ADDR
// if p3 = 108 then
21297: LD_VAR 0 3
21301: PUSH
21302: LD_INT 108
21304: EQUAL
21305: IFFALSE 21315
// sWound := true ;
21307: LD_ADDR_EXP 80
21311: PUSH
21312: LD_INT 1
21314: ST_TO_ADDR
// if p3 = 109 then
21315: LD_VAR 0 3
21319: PUSH
21320: LD_INT 109
21322: EQUAL
21323: IFFALSE 21333
// sBetray := true ;
21325: LD_ADDR_EXP 84
21329: PUSH
21330: LD_INT 1
21332: ST_TO_ADDR
// if p3 = 110 then
21333: LD_VAR 0 3
21337: PUSH
21338: LD_INT 110
21340: EQUAL
21341: IFFALSE 21351
// sContamin := true ;
21343: LD_ADDR_EXP 85
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// if p3 = 111 then
21351: LD_VAR 0 3
21355: PUSH
21356: LD_INT 111
21358: EQUAL
21359: IFFALSE 21369
// sOil := true ;
21361: LD_ADDR_EXP 87
21365: PUSH
21366: LD_INT 1
21368: ST_TO_ADDR
// if p3 = 112 then
21369: LD_VAR 0 3
21373: PUSH
21374: LD_INT 112
21376: EQUAL
21377: IFFALSE 21387
// sStu := true ;
21379: LD_ADDR_EXP 91
21383: PUSH
21384: LD_INT 1
21386: ST_TO_ADDR
// if p3 = 113 then
21387: LD_VAR 0 3
21391: PUSH
21392: LD_INT 113
21394: EQUAL
21395: IFFALSE 21405
// sBazooka := true ;
21397: LD_ADDR_EXP 94
21401: PUSH
21402: LD_INT 1
21404: ST_TO_ADDR
// if p3 = 114 then
21405: LD_VAR 0 3
21409: PUSH
21410: LD_INT 114
21412: EQUAL
21413: IFFALSE 21423
// sMortar := true ;
21415: LD_ADDR_EXP 95
21419: PUSH
21420: LD_INT 1
21422: ST_TO_ADDR
// if p3 = 115 then
21423: LD_VAR 0 3
21427: PUSH
21428: LD_INT 115
21430: EQUAL
21431: IFFALSE 21441
// sRanger := true ;
21433: LD_ADDR_EXP 105
21437: PUSH
21438: LD_INT 1
21440: ST_TO_ADDR
// if p3 = 116 then
21441: LD_VAR 0 3
21445: PUSH
21446: LD_INT 116
21448: EQUAL
21449: IFFALSE 21459
// sComputer := true ;
21451: LD_ADDR_EXP 106
21455: PUSH
21456: LD_INT 1
21458: ST_TO_ADDR
// if p3 = 117 then
21459: LD_VAR 0 3
21463: PUSH
21464: LD_INT 117
21466: EQUAL
21467: IFFALSE 21477
// s30 := true ;
21469: LD_ADDR_EXP 107
21473: PUSH
21474: LD_INT 1
21476: ST_TO_ADDR
// if p3 = 118 then
21477: LD_VAR 0 3
21481: PUSH
21482: LD_INT 118
21484: EQUAL
21485: IFFALSE 21495
// s60 := true ;
21487: LD_ADDR_EXP 108
21491: PUSH
21492: LD_INT 1
21494: ST_TO_ADDR
// end ; if p2 = hack_mode then
21495: LD_VAR 0 2
21499: PUSH
21500: LD_INT 101
21502: EQUAL
21503: IFFALSE 21631
// begin case p3 of 1 :
21505: LD_VAR 0 3
21509: PUSH
21510: LD_INT 1
21512: DOUBLE
21513: EQUAL
21514: IFTRUE 21518
21516: GO 21525
21518: POP
// hHackUnlimitedResources ; 2 :
21519: CALL 33894 0 0
21523: GO 21631
21525: LD_INT 2
21527: DOUBLE
21528: EQUAL
21529: IFTRUE 21533
21531: GO 21540
21533: POP
// hHackSetLevel10 ; 3 :
21534: CALL 34027 0 0
21538: GO 21631
21540: LD_INT 3
21542: DOUBLE
21543: EQUAL
21544: IFTRUE 21548
21546: GO 21555
21548: POP
// hHackSetLevel10YourUnits ; 4 :
21549: CALL 34112 0 0
21553: GO 21631
21555: LD_INT 4
21557: DOUBLE
21558: EQUAL
21559: IFTRUE 21563
21561: GO 21570
21563: POP
// hHackInvincible ; 5 :
21564: CALL 34560 0 0
21568: GO 21631
21570: LD_INT 5
21572: DOUBLE
21573: EQUAL
21574: IFTRUE 21578
21576: GO 21585
21578: POP
// hHackInvisible ; 6 :
21579: CALL 34671 0 0
21583: GO 21631
21585: LD_INT 6
21587: DOUBLE
21588: EQUAL
21589: IFTRUE 21593
21591: GO 21600
21593: POP
// hHackChangeYourSide ; 7 :
21594: CALL 34728 0 0
21598: GO 21631
21600: LD_INT 7
21602: DOUBLE
21603: EQUAL
21604: IFTRUE 21608
21606: GO 21615
21608: POP
// hHackChangeUnitSide ; 8 :
21609: CALL 34770 0 0
21613: GO 21631
21615: LD_INT 8
21617: DOUBLE
21618: EQUAL
21619: IFTRUE 21623
21621: GO 21630
21623: POP
// hHackFog ; end ;
21624: CALL 34871 0 0
21628: GO 21631
21630: POP
// end ; if p2 = game_save_mode then
21631: LD_VAR 0 2
21635: PUSH
21636: LD_INT 102
21638: EQUAL
21639: IFFALSE 21696
// begin if p3 = 1 then
21641: LD_VAR 0 3
21645: PUSH
21646: LD_INT 1
21648: EQUAL
21649: IFFALSE 21661
// globalGameSaveCounter := p4 ;
21651: LD_ADDR_EXP 51
21655: PUSH
21656: LD_VAR 0 4
21660: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21661: LD_VAR 0 3
21665: PUSH
21666: LD_INT 2
21668: EQUAL
21669: IFFALSE 21677
21671: PUSH
21672: LD_EXP 51
21676: AND
21677: IFFALSE 21696
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21679: LD_STRING setGameSaveCounter(
21681: PUSH
21682: LD_EXP 51
21686: STR
21687: PUSH
21688: LD_STRING )
21690: STR
21691: PPUSH
21692: CALL_OW 559
// end ; end ;
21696: LD_VAR 0 7
21700: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21701: LD_INT 0
21703: PPUSH
// streamModeActive := false ;
21704: LD_ADDR_EXP 52
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// normalCounter := 36 ;
21712: LD_ADDR_EXP 53
21716: PUSH
21717: LD_INT 36
21719: ST_TO_ADDR
// hardcoreCounter := 18 ;
21720: LD_ADDR_EXP 54
21724: PUSH
21725: LD_INT 18
21727: ST_TO_ADDR
// sRocket := false ;
21728: LD_ADDR_EXP 57
21732: PUSH
21733: LD_INT 0
21735: ST_TO_ADDR
// sSpeed := false ;
21736: LD_ADDR_EXP 56
21740: PUSH
21741: LD_INT 0
21743: ST_TO_ADDR
// sEngine := false ;
21744: LD_ADDR_EXP 58
21748: PUSH
21749: LD_INT 0
21751: ST_TO_ADDR
// sSpec := false ;
21752: LD_ADDR_EXP 55
21756: PUSH
21757: LD_INT 0
21759: ST_TO_ADDR
// sLevel := false ;
21760: LD_ADDR_EXP 59
21764: PUSH
21765: LD_INT 0
21767: ST_TO_ADDR
// sArmoury := false ;
21768: LD_ADDR_EXP 60
21772: PUSH
21773: LD_INT 0
21775: ST_TO_ADDR
// sRadar := false ;
21776: LD_ADDR_EXP 61
21780: PUSH
21781: LD_INT 0
21783: ST_TO_ADDR
// sBunker := false ;
21784: LD_ADDR_EXP 62
21788: PUSH
21789: LD_INT 0
21791: ST_TO_ADDR
// sHack := false ;
21792: LD_ADDR_EXP 63
21796: PUSH
21797: LD_INT 0
21799: ST_TO_ADDR
// sFire := false ;
21800: LD_ADDR_EXP 64
21804: PUSH
21805: LD_INT 0
21807: ST_TO_ADDR
// sRefresh := false ;
21808: LD_ADDR_EXP 65
21812: PUSH
21813: LD_INT 0
21815: ST_TO_ADDR
// sExp := false ;
21816: LD_ADDR_EXP 66
21820: PUSH
21821: LD_INT 0
21823: ST_TO_ADDR
// sDepot := false ;
21824: LD_ADDR_EXP 67
21828: PUSH
21829: LD_INT 0
21831: ST_TO_ADDR
// sFlag := false ;
21832: LD_ADDR_EXP 68
21836: PUSH
21837: LD_INT 0
21839: ST_TO_ADDR
// sKamikadze := false ;
21840: LD_ADDR_EXP 76
21844: PUSH
21845: LD_INT 0
21847: ST_TO_ADDR
// sTroll := false ;
21848: LD_ADDR_EXP 77
21852: PUSH
21853: LD_INT 0
21855: ST_TO_ADDR
// sSlow := false ;
21856: LD_ADDR_EXP 78
21860: PUSH
21861: LD_INT 0
21863: ST_TO_ADDR
// sLack := false ;
21864: LD_ADDR_EXP 79
21868: PUSH
21869: LD_INT 0
21871: ST_TO_ADDR
// sTank := false ;
21872: LD_ADDR_EXP 81
21876: PUSH
21877: LD_INT 0
21879: ST_TO_ADDR
// sRemote := false ;
21880: LD_ADDR_EXP 82
21884: PUSH
21885: LD_INT 0
21887: ST_TO_ADDR
// sPowell := false ;
21888: LD_ADDR_EXP 83
21892: PUSH
21893: LD_INT 0
21895: ST_TO_ADDR
// sTeleport := false ;
21896: LD_ADDR_EXP 86
21900: PUSH
21901: LD_INT 0
21903: ST_TO_ADDR
// sOilTower := false ;
21904: LD_ADDR_EXP 88
21908: PUSH
21909: LD_INT 0
21911: ST_TO_ADDR
// sShovel := false ;
21912: LD_ADDR_EXP 89
21916: PUSH
21917: LD_INT 0
21919: ST_TO_ADDR
// sSheik := false ;
21920: LD_ADDR_EXP 90
21924: PUSH
21925: LD_INT 0
21927: ST_TO_ADDR
// sEarthquake := false ;
21928: LD_ADDR_EXP 92
21932: PUSH
21933: LD_INT 0
21935: ST_TO_ADDR
// sAI := false ;
21936: LD_ADDR_EXP 93
21940: PUSH
21941: LD_INT 0
21943: ST_TO_ADDR
// sCargo := false ;
21944: LD_ADDR_EXP 96
21948: PUSH
21949: LD_INT 0
21951: ST_TO_ADDR
// sDLaser := false ;
21952: LD_ADDR_EXP 97
21956: PUSH
21957: LD_INT 0
21959: ST_TO_ADDR
// sExchange := false ;
21960: LD_ADDR_EXP 98
21964: PUSH
21965: LD_INT 0
21967: ST_TO_ADDR
// sFac := false ;
21968: LD_ADDR_EXP 99
21972: PUSH
21973: LD_INT 0
21975: ST_TO_ADDR
// sPower := false ;
21976: LD_ADDR_EXP 100
21980: PUSH
21981: LD_INT 0
21983: ST_TO_ADDR
// sRandom := false ;
21984: LD_ADDR_EXP 101
21988: PUSH
21989: LD_INT 0
21991: ST_TO_ADDR
// sShield := false ;
21992: LD_ADDR_EXP 102
21996: PUSH
21997: LD_INT 0
21999: ST_TO_ADDR
// sTime := false ;
22000: LD_ADDR_EXP 103
22004: PUSH
22005: LD_INT 0
22007: ST_TO_ADDR
// sTools := false ;
22008: LD_ADDR_EXP 104
22012: PUSH
22013: LD_INT 0
22015: ST_TO_ADDR
// sSold := false ;
22016: LD_ADDR_EXP 69
22020: PUSH
22021: LD_INT 0
22023: ST_TO_ADDR
// sDiff := false ;
22024: LD_ADDR_EXP 70
22028: PUSH
22029: LD_INT 0
22031: ST_TO_ADDR
// sFog := false ;
22032: LD_ADDR_EXP 73
22036: PUSH
22037: LD_INT 0
22039: ST_TO_ADDR
// sReset := false ;
22040: LD_ADDR_EXP 74
22044: PUSH
22045: LD_INT 0
22047: ST_TO_ADDR
// sSun := false ;
22048: LD_ADDR_EXP 75
22052: PUSH
22053: LD_INT 0
22055: ST_TO_ADDR
// sTiger := false ;
22056: LD_ADDR_EXP 71
22060: PUSH
22061: LD_INT 0
22063: ST_TO_ADDR
// sBomb := false ;
22064: LD_ADDR_EXP 72
22068: PUSH
22069: LD_INT 0
22071: ST_TO_ADDR
// sWound := false ;
22072: LD_ADDR_EXP 80
22076: PUSH
22077: LD_INT 0
22079: ST_TO_ADDR
// sBetray := false ;
22080: LD_ADDR_EXP 84
22084: PUSH
22085: LD_INT 0
22087: ST_TO_ADDR
// sContamin := false ;
22088: LD_ADDR_EXP 85
22092: PUSH
22093: LD_INT 0
22095: ST_TO_ADDR
// sOil := false ;
22096: LD_ADDR_EXP 87
22100: PUSH
22101: LD_INT 0
22103: ST_TO_ADDR
// sStu := false ;
22104: LD_ADDR_EXP 91
22108: PUSH
22109: LD_INT 0
22111: ST_TO_ADDR
// sBazooka := false ;
22112: LD_ADDR_EXP 94
22116: PUSH
22117: LD_INT 0
22119: ST_TO_ADDR
// sMortar := false ;
22120: LD_ADDR_EXP 95
22124: PUSH
22125: LD_INT 0
22127: ST_TO_ADDR
// sRanger := false ;
22128: LD_ADDR_EXP 105
22132: PUSH
22133: LD_INT 0
22135: ST_TO_ADDR
// sComputer := false ;
22136: LD_ADDR_EXP 106
22140: PUSH
22141: LD_INT 0
22143: ST_TO_ADDR
// s30 := false ;
22144: LD_ADDR_EXP 107
22148: PUSH
22149: LD_INT 0
22151: ST_TO_ADDR
// s60 := false ;
22152: LD_ADDR_EXP 108
22156: PUSH
22157: LD_INT 0
22159: ST_TO_ADDR
// end ;
22160: LD_VAR 0 1
22164: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22165: LD_INT 0
22167: PPUSH
22168: PPUSH
22169: PPUSH
22170: PPUSH
22171: PPUSH
22172: PPUSH
22173: PPUSH
// result := [ ] ;
22174: LD_ADDR_VAR 0 2
22178: PUSH
22179: EMPTY
22180: ST_TO_ADDR
// if campaign_id = 1 then
22181: LD_OWVAR 69
22185: PUSH
22186: LD_INT 1
22188: EQUAL
22189: IFFALSE 25355
// begin case mission_number of 1 :
22191: LD_OWVAR 70
22195: PUSH
22196: LD_INT 1
22198: DOUBLE
22199: EQUAL
22200: IFTRUE 22204
22202: GO 22280
22204: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22205: LD_ADDR_VAR 0 2
22209: PUSH
22210: LD_INT 2
22212: PUSH
22213: LD_INT 4
22215: PUSH
22216: LD_INT 11
22218: PUSH
22219: LD_INT 12
22221: PUSH
22222: LD_INT 15
22224: PUSH
22225: LD_INT 16
22227: PUSH
22228: LD_INT 22
22230: PUSH
22231: LD_INT 23
22233: PUSH
22234: LD_INT 26
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 101
22250: PUSH
22251: LD_INT 102
22253: PUSH
22254: LD_INT 106
22256: PUSH
22257: LD_INT 116
22259: PUSH
22260: LD_INT 117
22262: PUSH
22263: LD_INT 118
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: ST_TO_ADDR
22278: GO 25353
22280: LD_INT 2
22282: DOUBLE
22283: EQUAL
22284: IFTRUE 22288
22286: GO 22372
22288: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22289: LD_ADDR_VAR 0 2
22293: PUSH
22294: LD_INT 2
22296: PUSH
22297: LD_INT 4
22299: PUSH
22300: LD_INT 11
22302: PUSH
22303: LD_INT 12
22305: PUSH
22306: LD_INT 15
22308: PUSH
22309: LD_INT 16
22311: PUSH
22312: LD_INT 22
22314: PUSH
22315: LD_INT 23
22317: PUSH
22318: LD_INT 26
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 101
22334: PUSH
22335: LD_INT 102
22337: PUSH
22338: LD_INT 105
22340: PUSH
22341: LD_INT 106
22343: PUSH
22344: LD_INT 108
22346: PUSH
22347: LD_INT 116
22349: PUSH
22350: LD_INT 117
22352: PUSH
22353: LD_INT 118
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: ST_TO_ADDR
22370: GO 25353
22372: LD_INT 3
22374: DOUBLE
22375: EQUAL
22376: IFTRUE 22380
22378: GO 22468
22380: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22381: LD_ADDR_VAR 0 2
22385: PUSH
22386: LD_INT 2
22388: PUSH
22389: LD_INT 4
22391: PUSH
22392: LD_INT 5
22394: PUSH
22395: LD_INT 11
22397: PUSH
22398: LD_INT 12
22400: PUSH
22401: LD_INT 15
22403: PUSH
22404: LD_INT 16
22406: PUSH
22407: LD_INT 22
22409: PUSH
22410: LD_INT 26
22412: PUSH
22413: LD_INT 36
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 101
22430: PUSH
22431: LD_INT 102
22433: PUSH
22434: LD_INT 105
22436: PUSH
22437: LD_INT 106
22439: PUSH
22440: LD_INT 108
22442: PUSH
22443: LD_INT 116
22445: PUSH
22446: LD_INT 117
22448: PUSH
22449: LD_INT 118
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: ST_TO_ADDR
22466: GO 25353
22468: LD_INT 4
22470: DOUBLE
22471: EQUAL
22472: IFTRUE 22476
22474: GO 22572
22476: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22477: LD_ADDR_VAR 0 2
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: LD_INT 4
22487: PUSH
22488: LD_INT 5
22490: PUSH
22491: LD_INT 8
22493: PUSH
22494: LD_INT 11
22496: PUSH
22497: LD_INT 12
22499: PUSH
22500: LD_INT 15
22502: PUSH
22503: LD_INT 16
22505: PUSH
22506: LD_INT 22
22508: PUSH
22509: LD_INT 23
22511: PUSH
22512: LD_INT 26
22514: PUSH
22515: LD_INT 36
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 101
22534: PUSH
22535: LD_INT 102
22537: PUSH
22538: LD_INT 105
22540: PUSH
22541: LD_INT 106
22543: PUSH
22544: LD_INT 108
22546: PUSH
22547: LD_INT 116
22549: PUSH
22550: LD_INT 117
22552: PUSH
22553: LD_INT 118
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: ST_TO_ADDR
22570: GO 25353
22572: LD_INT 5
22574: DOUBLE
22575: EQUAL
22576: IFTRUE 22580
22578: GO 22692
22580: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22581: LD_ADDR_VAR 0 2
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: LD_INT 4
22591: PUSH
22592: LD_INT 5
22594: PUSH
22595: LD_INT 6
22597: PUSH
22598: LD_INT 8
22600: PUSH
22601: LD_INT 11
22603: PUSH
22604: LD_INT 12
22606: PUSH
22607: LD_INT 15
22609: PUSH
22610: LD_INT 16
22612: PUSH
22613: LD_INT 22
22615: PUSH
22616: LD_INT 23
22618: PUSH
22619: LD_INT 25
22621: PUSH
22622: LD_INT 26
22624: PUSH
22625: LD_INT 36
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 101
22646: PUSH
22647: LD_INT 102
22649: PUSH
22650: LD_INT 105
22652: PUSH
22653: LD_INT 106
22655: PUSH
22656: LD_INT 108
22658: PUSH
22659: LD_INT 109
22661: PUSH
22662: LD_INT 112
22664: PUSH
22665: LD_INT 116
22667: PUSH
22668: LD_INT 117
22670: PUSH
22671: LD_INT 118
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: ST_TO_ADDR
22690: GO 25353
22692: LD_INT 6
22694: DOUBLE
22695: EQUAL
22696: IFTRUE 22700
22698: GO 22832
22700: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22701: LD_ADDR_VAR 0 2
22705: PUSH
22706: LD_INT 2
22708: PUSH
22709: LD_INT 4
22711: PUSH
22712: LD_INT 5
22714: PUSH
22715: LD_INT 6
22717: PUSH
22718: LD_INT 8
22720: PUSH
22721: LD_INT 11
22723: PUSH
22724: LD_INT 12
22726: PUSH
22727: LD_INT 15
22729: PUSH
22730: LD_INT 16
22732: PUSH
22733: LD_INT 20
22735: PUSH
22736: LD_INT 21
22738: PUSH
22739: LD_INT 22
22741: PUSH
22742: LD_INT 23
22744: PUSH
22745: LD_INT 25
22747: PUSH
22748: LD_INT 26
22750: PUSH
22751: LD_INT 30
22753: PUSH
22754: LD_INT 31
22756: PUSH
22757: LD_INT 32
22759: PUSH
22760: LD_INT 36
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 101
22786: PUSH
22787: LD_INT 102
22789: PUSH
22790: LD_INT 105
22792: PUSH
22793: LD_INT 106
22795: PUSH
22796: LD_INT 108
22798: PUSH
22799: LD_INT 109
22801: PUSH
22802: LD_INT 112
22804: PUSH
22805: LD_INT 116
22807: PUSH
22808: LD_INT 117
22810: PUSH
22811: LD_INT 118
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: ST_TO_ADDR
22830: GO 25353
22832: LD_INT 7
22834: DOUBLE
22835: EQUAL
22836: IFTRUE 22840
22838: GO 22952
22840: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22841: LD_ADDR_VAR 0 2
22845: PUSH
22846: LD_INT 2
22848: PUSH
22849: LD_INT 4
22851: PUSH
22852: LD_INT 5
22854: PUSH
22855: LD_INT 7
22857: PUSH
22858: LD_INT 11
22860: PUSH
22861: LD_INT 12
22863: PUSH
22864: LD_INT 15
22866: PUSH
22867: LD_INT 16
22869: PUSH
22870: LD_INT 20
22872: PUSH
22873: LD_INT 21
22875: PUSH
22876: LD_INT 22
22878: PUSH
22879: LD_INT 23
22881: PUSH
22882: LD_INT 25
22884: PUSH
22885: LD_INT 26
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 101
22906: PUSH
22907: LD_INT 102
22909: PUSH
22910: LD_INT 103
22912: PUSH
22913: LD_INT 105
22915: PUSH
22916: LD_INT 106
22918: PUSH
22919: LD_INT 108
22921: PUSH
22922: LD_INT 112
22924: PUSH
22925: LD_INT 116
22927: PUSH
22928: LD_INT 117
22930: PUSH
22931: LD_INT 118
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: ST_TO_ADDR
22950: GO 25353
22952: LD_INT 8
22954: DOUBLE
22955: EQUAL
22956: IFTRUE 22960
22958: GO 23100
22960: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22961: LD_ADDR_VAR 0 2
22965: PUSH
22966: LD_INT 2
22968: PUSH
22969: LD_INT 4
22971: PUSH
22972: LD_INT 5
22974: PUSH
22975: LD_INT 6
22977: PUSH
22978: LD_INT 7
22980: PUSH
22981: LD_INT 8
22983: PUSH
22984: LD_INT 11
22986: PUSH
22987: LD_INT 12
22989: PUSH
22990: LD_INT 15
22992: PUSH
22993: LD_INT 16
22995: PUSH
22996: LD_INT 20
22998: PUSH
22999: LD_INT 21
23001: PUSH
23002: LD_INT 22
23004: PUSH
23005: LD_INT 23
23007: PUSH
23008: LD_INT 25
23010: PUSH
23011: LD_INT 26
23013: PUSH
23014: LD_INT 30
23016: PUSH
23017: LD_INT 31
23019: PUSH
23020: LD_INT 32
23022: PUSH
23023: LD_INT 36
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 101
23050: PUSH
23051: LD_INT 102
23053: PUSH
23054: LD_INT 103
23056: PUSH
23057: LD_INT 105
23059: PUSH
23060: LD_INT 106
23062: PUSH
23063: LD_INT 108
23065: PUSH
23066: LD_INT 109
23068: PUSH
23069: LD_INT 112
23071: PUSH
23072: LD_INT 116
23074: PUSH
23075: LD_INT 117
23077: PUSH
23078: LD_INT 118
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: ST_TO_ADDR
23098: GO 25353
23100: LD_INT 9
23102: DOUBLE
23103: EQUAL
23104: IFTRUE 23108
23106: GO 23256
23108: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23109: LD_ADDR_VAR 0 2
23113: PUSH
23114: LD_INT 2
23116: PUSH
23117: LD_INT 4
23119: PUSH
23120: LD_INT 5
23122: PUSH
23123: LD_INT 6
23125: PUSH
23126: LD_INT 7
23128: PUSH
23129: LD_INT 8
23131: PUSH
23132: LD_INT 11
23134: PUSH
23135: LD_INT 12
23137: PUSH
23138: LD_INT 15
23140: PUSH
23141: LD_INT 16
23143: PUSH
23144: LD_INT 20
23146: PUSH
23147: LD_INT 21
23149: PUSH
23150: LD_INT 22
23152: PUSH
23153: LD_INT 23
23155: PUSH
23156: LD_INT 25
23158: PUSH
23159: LD_INT 26
23161: PUSH
23162: LD_INT 28
23164: PUSH
23165: LD_INT 30
23167: PUSH
23168: LD_INT 31
23170: PUSH
23171: LD_INT 32
23173: PUSH
23174: LD_INT 36
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 101
23202: PUSH
23203: LD_INT 102
23205: PUSH
23206: LD_INT 103
23208: PUSH
23209: LD_INT 105
23211: PUSH
23212: LD_INT 106
23214: PUSH
23215: LD_INT 108
23217: PUSH
23218: LD_INT 109
23220: PUSH
23221: LD_INT 112
23223: PUSH
23224: LD_INT 114
23226: PUSH
23227: LD_INT 116
23229: PUSH
23230: LD_INT 117
23232: PUSH
23233: LD_INT 118
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: ST_TO_ADDR
23254: GO 25353
23256: LD_INT 10
23258: DOUBLE
23259: EQUAL
23260: IFTRUE 23264
23262: GO 23460
23264: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23265: LD_ADDR_VAR 0 2
23269: PUSH
23270: LD_INT 2
23272: PUSH
23273: LD_INT 4
23275: PUSH
23276: LD_INT 5
23278: PUSH
23279: LD_INT 6
23281: PUSH
23282: LD_INT 7
23284: PUSH
23285: LD_INT 8
23287: PUSH
23288: LD_INT 9
23290: PUSH
23291: LD_INT 10
23293: PUSH
23294: LD_INT 11
23296: PUSH
23297: LD_INT 12
23299: PUSH
23300: LD_INT 13
23302: PUSH
23303: LD_INT 14
23305: PUSH
23306: LD_INT 15
23308: PUSH
23309: LD_INT 16
23311: PUSH
23312: LD_INT 17
23314: PUSH
23315: LD_INT 18
23317: PUSH
23318: LD_INT 19
23320: PUSH
23321: LD_INT 20
23323: PUSH
23324: LD_INT 21
23326: PUSH
23327: LD_INT 22
23329: PUSH
23330: LD_INT 23
23332: PUSH
23333: LD_INT 24
23335: PUSH
23336: LD_INT 25
23338: PUSH
23339: LD_INT 26
23341: PUSH
23342: LD_INT 28
23344: PUSH
23345: LD_INT 30
23347: PUSH
23348: LD_INT 31
23350: PUSH
23351: LD_INT 32
23353: PUSH
23354: LD_INT 36
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 101
23390: PUSH
23391: LD_INT 102
23393: PUSH
23394: LD_INT 103
23396: PUSH
23397: LD_INT 104
23399: PUSH
23400: LD_INT 105
23402: PUSH
23403: LD_INT 106
23405: PUSH
23406: LD_INT 107
23408: PUSH
23409: LD_INT 108
23411: PUSH
23412: LD_INT 109
23414: PUSH
23415: LD_INT 110
23417: PUSH
23418: LD_INT 111
23420: PUSH
23421: LD_INT 112
23423: PUSH
23424: LD_INT 114
23426: PUSH
23427: LD_INT 116
23429: PUSH
23430: LD_INT 117
23432: PUSH
23433: LD_INT 118
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: ST_TO_ADDR
23458: GO 25353
23460: LD_INT 11
23462: DOUBLE
23463: EQUAL
23464: IFTRUE 23468
23466: GO 23672
23468: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23469: LD_ADDR_VAR 0 2
23473: PUSH
23474: LD_INT 2
23476: PUSH
23477: LD_INT 3
23479: PUSH
23480: LD_INT 4
23482: PUSH
23483: LD_INT 5
23485: PUSH
23486: LD_INT 6
23488: PUSH
23489: LD_INT 7
23491: PUSH
23492: LD_INT 8
23494: PUSH
23495: LD_INT 9
23497: PUSH
23498: LD_INT 10
23500: PUSH
23501: LD_INT 11
23503: PUSH
23504: LD_INT 12
23506: PUSH
23507: LD_INT 13
23509: PUSH
23510: LD_INT 14
23512: PUSH
23513: LD_INT 15
23515: PUSH
23516: LD_INT 16
23518: PUSH
23519: LD_INT 17
23521: PUSH
23522: LD_INT 18
23524: PUSH
23525: LD_INT 19
23527: PUSH
23528: LD_INT 20
23530: PUSH
23531: LD_INT 21
23533: PUSH
23534: LD_INT 22
23536: PUSH
23537: LD_INT 23
23539: PUSH
23540: LD_INT 24
23542: PUSH
23543: LD_INT 25
23545: PUSH
23546: LD_INT 26
23548: PUSH
23549: LD_INT 28
23551: PUSH
23552: LD_INT 30
23554: PUSH
23555: LD_INT 31
23557: PUSH
23558: LD_INT 32
23560: PUSH
23561: LD_INT 34
23563: PUSH
23564: LD_INT 36
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 101
23602: PUSH
23603: LD_INT 102
23605: PUSH
23606: LD_INT 103
23608: PUSH
23609: LD_INT 104
23611: PUSH
23612: LD_INT 105
23614: PUSH
23615: LD_INT 106
23617: PUSH
23618: LD_INT 107
23620: PUSH
23621: LD_INT 108
23623: PUSH
23624: LD_INT 109
23626: PUSH
23627: LD_INT 110
23629: PUSH
23630: LD_INT 111
23632: PUSH
23633: LD_INT 112
23635: PUSH
23636: LD_INT 114
23638: PUSH
23639: LD_INT 116
23641: PUSH
23642: LD_INT 117
23644: PUSH
23645: LD_INT 118
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: ST_TO_ADDR
23670: GO 25353
23672: LD_INT 12
23674: DOUBLE
23675: EQUAL
23676: IFTRUE 23680
23678: GO 23900
23680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23681: LD_ADDR_VAR 0 2
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: LD_INT 2
23691: PUSH
23692: LD_INT 3
23694: PUSH
23695: LD_INT 4
23697: PUSH
23698: LD_INT 5
23700: PUSH
23701: LD_INT 6
23703: PUSH
23704: LD_INT 7
23706: PUSH
23707: LD_INT 8
23709: PUSH
23710: LD_INT 9
23712: PUSH
23713: LD_INT 10
23715: PUSH
23716: LD_INT 11
23718: PUSH
23719: LD_INT 12
23721: PUSH
23722: LD_INT 13
23724: PUSH
23725: LD_INT 14
23727: PUSH
23728: LD_INT 15
23730: PUSH
23731: LD_INT 16
23733: PUSH
23734: LD_INT 17
23736: PUSH
23737: LD_INT 18
23739: PUSH
23740: LD_INT 19
23742: PUSH
23743: LD_INT 20
23745: PUSH
23746: LD_INT 21
23748: PUSH
23749: LD_INT 22
23751: PUSH
23752: LD_INT 23
23754: PUSH
23755: LD_INT 24
23757: PUSH
23758: LD_INT 25
23760: PUSH
23761: LD_INT 26
23763: PUSH
23764: LD_INT 27
23766: PUSH
23767: LD_INT 28
23769: PUSH
23770: LD_INT 30
23772: PUSH
23773: LD_INT 31
23775: PUSH
23776: LD_INT 32
23778: PUSH
23779: LD_INT 33
23781: PUSH
23782: LD_INT 34
23784: PUSH
23785: LD_INT 36
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 101
23826: PUSH
23827: LD_INT 102
23829: PUSH
23830: LD_INT 103
23832: PUSH
23833: LD_INT 104
23835: PUSH
23836: LD_INT 105
23838: PUSH
23839: LD_INT 106
23841: PUSH
23842: LD_INT 107
23844: PUSH
23845: LD_INT 108
23847: PUSH
23848: LD_INT 109
23850: PUSH
23851: LD_INT 110
23853: PUSH
23854: LD_INT 111
23856: PUSH
23857: LD_INT 112
23859: PUSH
23860: LD_INT 113
23862: PUSH
23863: LD_INT 114
23865: PUSH
23866: LD_INT 116
23868: PUSH
23869: LD_INT 117
23871: PUSH
23872: LD_INT 118
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: ST_TO_ADDR
23898: GO 25353
23900: LD_INT 13
23902: DOUBLE
23903: EQUAL
23904: IFTRUE 23908
23906: GO 24116
23908: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23909: LD_ADDR_VAR 0 2
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: LD_INT 2
23919: PUSH
23920: LD_INT 3
23922: PUSH
23923: LD_INT 4
23925: PUSH
23926: LD_INT 5
23928: PUSH
23929: LD_INT 8
23931: PUSH
23932: LD_INT 9
23934: PUSH
23935: LD_INT 10
23937: PUSH
23938: LD_INT 11
23940: PUSH
23941: LD_INT 12
23943: PUSH
23944: LD_INT 14
23946: PUSH
23947: LD_INT 15
23949: PUSH
23950: LD_INT 16
23952: PUSH
23953: LD_INT 17
23955: PUSH
23956: LD_INT 18
23958: PUSH
23959: LD_INT 19
23961: PUSH
23962: LD_INT 20
23964: PUSH
23965: LD_INT 21
23967: PUSH
23968: LD_INT 22
23970: PUSH
23971: LD_INT 23
23973: PUSH
23974: LD_INT 24
23976: PUSH
23977: LD_INT 25
23979: PUSH
23980: LD_INT 26
23982: PUSH
23983: LD_INT 27
23985: PUSH
23986: LD_INT 28
23988: PUSH
23989: LD_INT 30
23991: PUSH
23992: LD_INT 31
23994: PUSH
23995: LD_INT 32
23997: PUSH
23998: LD_INT 33
24000: PUSH
24001: LD_INT 34
24003: PUSH
24004: LD_INT 36
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 101
24042: PUSH
24043: LD_INT 102
24045: PUSH
24046: LD_INT 103
24048: PUSH
24049: LD_INT 104
24051: PUSH
24052: LD_INT 105
24054: PUSH
24055: LD_INT 106
24057: PUSH
24058: LD_INT 107
24060: PUSH
24061: LD_INT 108
24063: PUSH
24064: LD_INT 109
24066: PUSH
24067: LD_INT 110
24069: PUSH
24070: LD_INT 111
24072: PUSH
24073: LD_INT 112
24075: PUSH
24076: LD_INT 113
24078: PUSH
24079: LD_INT 114
24081: PUSH
24082: LD_INT 116
24084: PUSH
24085: LD_INT 117
24087: PUSH
24088: LD_INT 118
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: ST_TO_ADDR
24114: GO 25353
24116: LD_INT 14
24118: DOUBLE
24119: EQUAL
24120: IFTRUE 24124
24122: GO 24348
24124: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24125: LD_ADDR_VAR 0 2
24129: PUSH
24130: LD_INT 1
24132: PUSH
24133: LD_INT 2
24135: PUSH
24136: LD_INT 3
24138: PUSH
24139: LD_INT 4
24141: PUSH
24142: LD_INT 5
24144: PUSH
24145: LD_INT 6
24147: PUSH
24148: LD_INT 7
24150: PUSH
24151: LD_INT 8
24153: PUSH
24154: LD_INT 9
24156: PUSH
24157: LD_INT 10
24159: PUSH
24160: LD_INT 11
24162: PUSH
24163: LD_INT 12
24165: PUSH
24166: LD_INT 13
24168: PUSH
24169: LD_INT 14
24171: PUSH
24172: LD_INT 15
24174: PUSH
24175: LD_INT 16
24177: PUSH
24178: LD_INT 17
24180: PUSH
24181: LD_INT 18
24183: PUSH
24184: LD_INT 19
24186: PUSH
24187: LD_INT 20
24189: PUSH
24190: LD_INT 21
24192: PUSH
24193: LD_INT 22
24195: PUSH
24196: LD_INT 23
24198: PUSH
24199: LD_INT 24
24201: PUSH
24202: LD_INT 25
24204: PUSH
24205: LD_INT 26
24207: PUSH
24208: LD_INT 27
24210: PUSH
24211: LD_INT 28
24213: PUSH
24214: LD_INT 29
24216: PUSH
24217: LD_INT 30
24219: PUSH
24220: LD_INT 31
24222: PUSH
24223: LD_INT 32
24225: PUSH
24226: LD_INT 33
24228: PUSH
24229: LD_INT 34
24231: PUSH
24232: LD_INT 36
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 101
24274: PUSH
24275: LD_INT 102
24277: PUSH
24278: LD_INT 103
24280: PUSH
24281: LD_INT 104
24283: PUSH
24284: LD_INT 105
24286: PUSH
24287: LD_INT 106
24289: PUSH
24290: LD_INT 107
24292: PUSH
24293: LD_INT 108
24295: PUSH
24296: LD_INT 109
24298: PUSH
24299: LD_INT 110
24301: PUSH
24302: LD_INT 111
24304: PUSH
24305: LD_INT 112
24307: PUSH
24308: LD_INT 113
24310: PUSH
24311: LD_INT 114
24313: PUSH
24314: LD_INT 116
24316: PUSH
24317: LD_INT 117
24319: PUSH
24320: LD_INT 118
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: ST_TO_ADDR
24346: GO 25353
24348: LD_INT 15
24350: DOUBLE
24351: EQUAL
24352: IFTRUE 24356
24354: GO 24580
24356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24357: LD_ADDR_VAR 0 2
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: LD_INT 3
24370: PUSH
24371: LD_INT 4
24373: PUSH
24374: LD_INT 5
24376: PUSH
24377: LD_INT 6
24379: PUSH
24380: LD_INT 7
24382: PUSH
24383: LD_INT 8
24385: PUSH
24386: LD_INT 9
24388: PUSH
24389: LD_INT 10
24391: PUSH
24392: LD_INT 11
24394: PUSH
24395: LD_INT 12
24397: PUSH
24398: LD_INT 13
24400: PUSH
24401: LD_INT 14
24403: PUSH
24404: LD_INT 15
24406: PUSH
24407: LD_INT 16
24409: PUSH
24410: LD_INT 17
24412: PUSH
24413: LD_INT 18
24415: PUSH
24416: LD_INT 19
24418: PUSH
24419: LD_INT 20
24421: PUSH
24422: LD_INT 21
24424: PUSH
24425: LD_INT 22
24427: PUSH
24428: LD_INT 23
24430: PUSH
24431: LD_INT 24
24433: PUSH
24434: LD_INT 25
24436: PUSH
24437: LD_INT 26
24439: PUSH
24440: LD_INT 27
24442: PUSH
24443: LD_INT 28
24445: PUSH
24446: LD_INT 29
24448: PUSH
24449: LD_INT 30
24451: PUSH
24452: LD_INT 31
24454: PUSH
24455: LD_INT 32
24457: PUSH
24458: LD_INT 33
24460: PUSH
24461: LD_INT 34
24463: PUSH
24464: LD_INT 36
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 101
24506: PUSH
24507: LD_INT 102
24509: PUSH
24510: LD_INT 103
24512: PUSH
24513: LD_INT 104
24515: PUSH
24516: LD_INT 105
24518: PUSH
24519: LD_INT 106
24521: PUSH
24522: LD_INT 107
24524: PUSH
24525: LD_INT 108
24527: PUSH
24528: LD_INT 109
24530: PUSH
24531: LD_INT 110
24533: PUSH
24534: LD_INT 111
24536: PUSH
24537: LD_INT 112
24539: PUSH
24540: LD_INT 113
24542: PUSH
24543: LD_INT 114
24545: PUSH
24546: LD_INT 116
24548: PUSH
24549: LD_INT 117
24551: PUSH
24552: LD_INT 118
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: ST_TO_ADDR
24578: GO 25353
24580: LD_INT 16
24582: DOUBLE
24583: EQUAL
24584: IFTRUE 24588
24586: GO 24724
24588: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24589: LD_ADDR_VAR 0 2
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: LD_INT 4
24599: PUSH
24600: LD_INT 5
24602: PUSH
24603: LD_INT 7
24605: PUSH
24606: LD_INT 11
24608: PUSH
24609: LD_INT 12
24611: PUSH
24612: LD_INT 15
24614: PUSH
24615: LD_INT 16
24617: PUSH
24618: LD_INT 20
24620: PUSH
24621: LD_INT 21
24623: PUSH
24624: LD_INT 22
24626: PUSH
24627: LD_INT 23
24629: PUSH
24630: LD_INT 25
24632: PUSH
24633: LD_INT 26
24635: PUSH
24636: LD_INT 30
24638: PUSH
24639: LD_INT 31
24641: PUSH
24642: LD_INT 32
24644: PUSH
24645: LD_INT 33
24647: PUSH
24648: LD_INT 34
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 101
24674: PUSH
24675: LD_INT 102
24677: PUSH
24678: LD_INT 103
24680: PUSH
24681: LD_INT 106
24683: PUSH
24684: LD_INT 108
24686: PUSH
24687: LD_INT 112
24689: PUSH
24690: LD_INT 113
24692: PUSH
24693: LD_INT 114
24695: PUSH
24696: LD_INT 116
24698: PUSH
24699: LD_INT 117
24701: PUSH
24702: LD_INT 118
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: ST_TO_ADDR
24722: GO 25353
24724: LD_INT 17
24726: DOUBLE
24727: EQUAL
24728: IFTRUE 24732
24730: GO 24956
24732: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24733: LD_ADDR_VAR 0 2
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: LD_INT 2
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: LD_INT 4
24749: PUSH
24750: LD_INT 5
24752: PUSH
24753: LD_INT 6
24755: PUSH
24756: LD_INT 7
24758: PUSH
24759: LD_INT 8
24761: PUSH
24762: LD_INT 9
24764: PUSH
24765: LD_INT 10
24767: PUSH
24768: LD_INT 11
24770: PUSH
24771: LD_INT 12
24773: PUSH
24774: LD_INT 13
24776: PUSH
24777: LD_INT 14
24779: PUSH
24780: LD_INT 15
24782: PUSH
24783: LD_INT 16
24785: PUSH
24786: LD_INT 17
24788: PUSH
24789: LD_INT 18
24791: PUSH
24792: LD_INT 19
24794: PUSH
24795: LD_INT 20
24797: PUSH
24798: LD_INT 21
24800: PUSH
24801: LD_INT 22
24803: PUSH
24804: LD_INT 23
24806: PUSH
24807: LD_INT 24
24809: PUSH
24810: LD_INT 25
24812: PUSH
24813: LD_INT 26
24815: PUSH
24816: LD_INT 27
24818: PUSH
24819: LD_INT 28
24821: PUSH
24822: LD_INT 29
24824: PUSH
24825: LD_INT 30
24827: PUSH
24828: LD_INT 31
24830: PUSH
24831: LD_INT 32
24833: PUSH
24834: LD_INT 33
24836: PUSH
24837: LD_INT 34
24839: PUSH
24840: LD_INT 36
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 101
24882: PUSH
24883: LD_INT 102
24885: PUSH
24886: LD_INT 103
24888: PUSH
24889: LD_INT 104
24891: PUSH
24892: LD_INT 105
24894: PUSH
24895: LD_INT 106
24897: PUSH
24898: LD_INT 107
24900: PUSH
24901: LD_INT 108
24903: PUSH
24904: LD_INT 109
24906: PUSH
24907: LD_INT 110
24909: PUSH
24910: LD_INT 111
24912: PUSH
24913: LD_INT 112
24915: PUSH
24916: LD_INT 113
24918: PUSH
24919: LD_INT 114
24921: PUSH
24922: LD_INT 116
24924: PUSH
24925: LD_INT 117
24927: PUSH
24928: LD_INT 118
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: ST_TO_ADDR
24954: GO 25353
24956: LD_INT 18
24958: DOUBLE
24959: EQUAL
24960: IFTRUE 24964
24962: GO 25112
24964: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24965: LD_ADDR_VAR 0 2
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: LD_INT 4
24975: PUSH
24976: LD_INT 5
24978: PUSH
24979: LD_INT 7
24981: PUSH
24982: LD_INT 11
24984: PUSH
24985: LD_INT 12
24987: PUSH
24988: LD_INT 15
24990: PUSH
24991: LD_INT 16
24993: PUSH
24994: LD_INT 20
24996: PUSH
24997: LD_INT 21
24999: PUSH
25000: LD_INT 22
25002: PUSH
25003: LD_INT 23
25005: PUSH
25006: LD_INT 25
25008: PUSH
25009: LD_INT 26
25011: PUSH
25012: LD_INT 30
25014: PUSH
25015: LD_INT 31
25017: PUSH
25018: LD_INT 32
25020: PUSH
25021: LD_INT 33
25023: PUSH
25024: LD_INT 34
25026: PUSH
25027: LD_INT 35
25029: PUSH
25030: LD_INT 36
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 101
25058: PUSH
25059: LD_INT 102
25061: PUSH
25062: LD_INT 103
25064: PUSH
25065: LD_INT 106
25067: PUSH
25068: LD_INT 108
25070: PUSH
25071: LD_INT 112
25073: PUSH
25074: LD_INT 113
25076: PUSH
25077: LD_INT 114
25079: PUSH
25080: LD_INT 115
25082: PUSH
25083: LD_INT 116
25085: PUSH
25086: LD_INT 117
25088: PUSH
25089: LD_INT 118
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: ST_TO_ADDR
25110: GO 25353
25112: LD_INT 19
25114: DOUBLE
25115: EQUAL
25116: IFTRUE 25120
25118: GO 25352
25120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25121: LD_ADDR_VAR 0 2
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: LD_INT 2
25131: PUSH
25132: LD_INT 3
25134: PUSH
25135: LD_INT 4
25137: PUSH
25138: LD_INT 5
25140: PUSH
25141: LD_INT 6
25143: PUSH
25144: LD_INT 7
25146: PUSH
25147: LD_INT 8
25149: PUSH
25150: LD_INT 9
25152: PUSH
25153: LD_INT 10
25155: PUSH
25156: LD_INT 11
25158: PUSH
25159: LD_INT 12
25161: PUSH
25162: LD_INT 13
25164: PUSH
25165: LD_INT 14
25167: PUSH
25168: LD_INT 15
25170: PUSH
25171: LD_INT 16
25173: PUSH
25174: LD_INT 17
25176: PUSH
25177: LD_INT 18
25179: PUSH
25180: LD_INT 19
25182: PUSH
25183: LD_INT 20
25185: PUSH
25186: LD_INT 21
25188: PUSH
25189: LD_INT 22
25191: PUSH
25192: LD_INT 23
25194: PUSH
25195: LD_INT 24
25197: PUSH
25198: LD_INT 25
25200: PUSH
25201: LD_INT 26
25203: PUSH
25204: LD_INT 27
25206: PUSH
25207: LD_INT 28
25209: PUSH
25210: LD_INT 29
25212: PUSH
25213: LD_INT 30
25215: PUSH
25216: LD_INT 31
25218: PUSH
25219: LD_INT 32
25221: PUSH
25222: LD_INT 33
25224: PUSH
25225: LD_INT 34
25227: PUSH
25228: LD_INT 35
25230: PUSH
25231: LD_INT 36
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 101
25274: PUSH
25275: LD_INT 102
25277: PUSH
25278: LD_INT 103
25280: PUSH
25281: LD_INT 104
25283: PUSH
25284: LD_INT 105
25286: PUSH
25287: LD_INT 106
25289: PUSH
25290: LD_INT 107
25292: PUSH
25293: LD_INT 108
25295: PUSH
25296: LD_INT 109
25298: PUSH
25299: LD_INT 110
25301: PUSH
25302: LD_INT 111
25304: PUSH
25305: LD_INT 112
25307: PUSH
25308: LD_INT 113
25310: PUSH
25311: LD_INT 114
25313: PUSH
25314: LD_INT 115
25316: PUSH
25317: LD_INT 116
25319: PUSH
25320: LD_INT 117
25322: PUSH
25323: LD_INT 118
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: ST_TO_ADDR
25350: GO 25353
25352: POP
// end else
25353: GO 25584
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25355: LD_ADDR_VAR 0 2
25359: PUSH
25360: LD_INT 1
25362: PUSH
25363: LD_INT 2
25365: PUSH
25366: LD_INT 3
25368: PUSH
25369: LD_INT 4
25371: PUSH
25372: LD_INT 5
25374: PUSH
25375: LD_INT 6
25377: PUSH
25378: LD_INT 7
25380: PUSH
25381: LD_INT 8
25383: PUSH
25384: LD_INT 9
25386: PUSH
25387: LD_INT 10
25389: PUSH
25390: LD_INT 11
25392: PUSH
25393: LD_INT 12
25395: PUSH
25396: LD_INT 13
25398: PUSH
25399: LD_INT 14
25401: PUSH
25402: LD_INT 15
25404: PUSH
25405: LD_INT 16
25407: PUSH
25408: LD_INT 17
25410: PUSH
25411: LD_INT 18
25413: PUSH
25414: LD_INT 19
25416: PUSH
25417: LD_INT 20
25419: PUSH
25420: LD_INT 21
25422: PUSH
25423: LD_INT 22
25425: PUSH
25426: LD_INT 23
25428: PUSH
25429: LD_INT 24
25431: PUSH
25432: LD_INT 25
25434: PUSH
25435: LD_INT 26
25437: PUSH
25438: LD_INT 27
25440: PUSH
25441: LD_INT 28
25443: PUSH
25444: LD_INT 29
25446: PUSH
25447: LD_INT 30
25449: PUSH
25450: LD_INT 31
25452: PUSH
25453: LD_INT 32
25455: PUSH
25456: LD_INT 33
25458: PUSH
25459: LD_INT 34
25461: PUSH
25462: LD_INT 35
25464: PUSH
25465: LD_INT 36
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 101
25508: PUSH
25509: LD_INT 102
25511: PUSH
25512: LD_INT 103
25514: PUSH
25515: LD_INT 104
25517: PUSH
25518: LD_INT 105
25520: PUSH
25521: LD_INT 106
25523: PUSH
25524: LD_INT 107
25526: PUSH
25527: LD_INT 108
25529: PUSH
25530: LD_INT 109
25532: PUSH
25533: LD_INT 110
25535: PUSH
25536: LD_INT 111
25538: PUSH
25539: LD_INT 112
25541: PUSH
25542: LD_INT 113
25544: PUSH
25545: LD_INT 114
25547: PUSH
25548: LD_INT 115
25550: PUSH
25551: LD_INT 116
25553: PUSH
25554: LD_INT 117
25556: PUSH
25557: LD_INT 118
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: ST_TO_ADDR
// if result then
25584: LD_VAR 0 2
25588: IFFALSE 26374
// begin normal :=  ;
25590: LD_ADDR_VAR 0 5
25594: PUSH
25595: LD_STRING 
25597: ST_TO_ADDR
// hardcore :=  ;
25598: LD_ADDR_VAR 0 6
25602: PUSH
25603: LD_STRING 
25605: ST_TO_ADDR
// active :=  ;
25606: LD_ADDR_VAR 0 7
25610: PUSH
25611: LD_STRING 
25613: ST_TO_ADDR
// for i = 1 to normalCounter do
25614: LD_ADDR_VAR 0 8
25618: PUSH
25619: DOUBLE
25620: LD_INT 1
25622: DEC
25623: ST_TO_ADDR
25624: LD_EXP 53
25628: PUSH
25629: FOR_TO
25630: IFFALSE 25731
// begin tmp := 0 ;
25632: LD_ADDR_VAR 0 3
25636: PUSH
25637: LD_STRING 0
25639: ST_TO_ADDR
// if result [ 1 ] then
25640: LD_VAR 0 2
25644: PUSH
25645: LD_INT 1
25647: ARRAY
25648: IFFALSE 25713
// if result [ 1 ] [ 1 ] = i then
25650: LD_VAR 0 2
25654: PUSH
25655: LD_INT 1
25657: ARRAY
25658: PUSH
25659: LD_INT 1
25661: ARRAY
25662: PUSH
25663: LD_VAR 0 8
25667: EQUAL
25668: IFFALSE 25713
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25670: LD_ADDR_VAR 0 2
25674: PUSH
25675: LD_VAR 0 2
25679: PPUSH
25680: LD_INT 1
25682: PPUSH
25683: LD_VAR 0 2
25687: PUSH
25688: LD_INT 1
25690: ARRAY
25691: PPUSH
25692: LD_INT 1
25694: PPUSH
25695: CALL_OW 3
25699: PPUSH
25700: CALL_OW 1
25704: ST_TO_ADDR
// tmp := 1 ;
25705: LD_ADDR_VAR 0 3
25709: PUSH
25710: LD_STRING 1
25712: ST_TO_ADDR
// end ; normal := normal & tmp ;
25713: LD_ADDR_VAR 0 5
25717: PUSH
25718: LD_VAR 0 5
25722: PUSH
25723: LD_VAR 0 3
25727: STR
25728: ST_TO_ADDR
// end ;
25729: GO 25629
25731: POP
25732: POP
// for i = 1 to hardcoreCounter do
25733: LD_ADDR_VAR 0 8
25737: PUSH
25738: DOUBLE
25739: LD_INT 1
25741: DEC
25742: ST_TO_ADDR
25743: LD_EXP 54
25747: PUSH
25748: FOR_TO
25749: IFFALSE 25854
// begin tmp := 0 ;
25751: LD_ADDR_VAR 0 3
25755: PUSH
25756: LD_STRING 0
25758: ST_TO_ADDR
// if result [ 2 ] then
25759: LD_VAR 0 2
25763: PUSH
25764: LD_INT 2
25766: ARRAY
25767: IFFALSE 25836
// if result [ 2 ] [ 1 ] = 100 + i then
25769: LD_VAR 0 2
25773: PUSH
25774: LD_INT 2
25776: ARRAY
25777: PUSH
25778: LD_INT 1
25780: ARRAY
25781: PUSH
25782: LD_INT 100
25784: PUSH
25785: LD_VAR 0 8
25789: PLUS
25790: EQUAL
25791: IFFALSE 25836
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25793: LD_ADDR_VAR 0 2
25797: PUSH
25798: LD_VAR 0 2
25802: PPUSH
25803: LD_INT 2
25805: PPUSH
25806: LD_VAR 0 2
25810: PUSH
25811: LD_INT 2
25813: ARRAY
25814: PPUSH
25815: LD_INT 1
25817: PPUSH
25818: CALL_OW 3
25822: PPUSH
25823: CALL_OW 1
25827: ST_TO_ADDR
// tmp := 1 ;
25828: LD_ADDR_VAR 0 3
25832: PUSH
25833: LD_STRING 1
25835: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25836: LD_ADDR_VAR 0 6
25840: PUSH
25841: LD_VAR 0 6
25845: PUSH
25846: LD_VAR 0 3
25850: STR
25851: ST_TO_ADDR
// end ;
25852: GO 25748
25854: POP
25855: POP
// if isGameLoad then
25856: LD_VAR 0 1
25860: IFFALSE 26335
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25862: LD_ADDR_VAR 0 4
25866: PUSH
25867: LD_EXP 57
25871: PUSH
25872: LD_EXP 56
25876: PUSH
25877: LD_EXP 58
25881: PUSH
25882: LD_EXP 55
25886: PUSH
25887: LD_EXP 59
25891: PUSH
25892: LD_EXP 60
25896: PUSH
25897: LD_EXP 61
25901: PUSH
25902: LD_EXP 62
25906: PUSH
25907: LD_EXP 63
25911: PUSH
25912: LD_EXP 64
25916: PUSH
25917: LD_EXP 65
25921: PUSH
25922: LD_EXP 66
25926: PUSH
25927: LD_EXP 67
25931: PUSH
25932: LD_EXP 68
25936: PUSH
25937: LD_EXP 76
25941: PUSH
25942: LD_EXP 77
25946: PUSH
25947: LD_EXP 78
25951: PUSH
25952: LD_EXP 79
25956: PUSH
25957: LD_EXP 81
25961: PUSH
25962: LD_EXP 82
25966: PUSH
25967: LD_EXP 83
25971: PUSH
25972: LD_EXP 86
25976: PUSH
25977: LD_EXP 88
25981: PUSH
25982: LD_EXP 89
25986: PUSH
25987: LD_EXP 90
25991: PUSH
25992: LD_EXP 92
25996: PUSH
25997: LD_EXP 93
26001: PUSH
26002: LD_EXP 96
26006: PUSH
26007: LD_EXP 97
26011: PUSH
26012: LD_EXP 98
26016: PUSH
26017: LD_EXP 99
26021: PUSH
26022: LD_EXP 100
26026: PUSH
26027: LD_EXP 101
26031: PUSH
26032: LD_EXP 102
26036: PUSH
26037: LD_EXP 103
26041: PUSH
26042: LD_EXP 104
26046: PUSH
26047: LD_EXP 69
26051: PUSH
26052: LD_EXP 70
26056: PUSH
26057: LD_EXP 73
26061: PUSH
26062: LD_EXP 74
26066: PUSH
26067: LD_EXP 75
26071: PUSH
26072: LD_EXP 71
26076: PUSH
26077: LD_EXP 72
26081: PUSH
26082: LD_EXP 80
26086: PUSH
26087: LD_EXP 84
26091: PUSH
26092: LD_EXP 85
26096: PUSH
26097: LD_EXP 87
26101: PUSH
26102: LD_EXP 91
26106: PUSH
26107: LD_EXP 94
26111: PUSH
26112: LD_EXP 95
26116: PUSH
26117: LD_EXP 105
26121: PUSH
26122: LD_EXP 106
26126: PUSH
26127: LD_EXP 107
26131: PUSH
26132: LD_EXP 108
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: ST_TO_ADDR
// tmp :=  ;
26193: LD_ADDR_VAR 0 3
26197: PUSH
26198: LD_STRING 
26200: ST_TO_ADDR
// for i = 1 to normalCounter do
26201: LD_ADDR_VAR 0 8
26205: PUSH
26206: DOUBLE
26207: LD_INT 1
26209: DEC
26210: ST_TO_ADDR
26211: LD_EXP 53
26215: PUSH
26216: FOR_TO
26217: IFFALSE 26253
// begin if flags [ i ] then
26219: LD_VAR 0 4
26223: PUSH
26224: LD_VAR 0 8
26228: ARRAY
26229: IFFALSE 26251
// tmp := tmp & i & ; ;
26231: LD_ADDR_VAR 0 3
26235: PUSH
26236: LD_VAR 0 3
26240: PUSH
26241: LD_VAR 0 8
26245: STR
26246: PUSH
26247: LD_STRING ;
26249: STR
26250: ST_TO_ADDR
// end ;
26251: GO 26216
26253: POP
26254: POP
// for i = 1 to hardcoreCounter do
26255: LD_ADDR_VAR 0 8
26259: PUSH
26260: DOUBLE
26261: LD_INT 1
26263: DEC
26264: ST_TO_ADDR
26265: LD_EXP 54
26269: PUSH
26270: FOR_TO
26271: IFFALSE 26317
// begin if flags [ normalCounter + i ] then
26273: LD_VAR 0 4
26277: PUSH
26278: LD_EXP 53
26282: PUSH
26283: LD_VAR 0 8
26287: PLUS
26288: ARRAY
26289: IFFALSE 26315
// tmp := tmp & ( 100 + i ) & ; ;
26291: LD_ADDR_VAR 0 3
26295: PUSH
26296: LD_VAR 0 3
26300: PUSH
26301: LD_INT 100
26303: PUSH
26304: LD_VAR 0 8
26308: PLUS
26309: STR
26310: PUSH
26311: LD_STRING ;
26313: STR
26314: ST_TO_ADDR
// end ;
26315: GO 26270
26317: POP
26318: POP
// if tmp then
26319: LD_VAR 0 3
26323: IFFALSE 26335
// active := tmp ;
26325: LD_ADDR_VAR 0 7
26329: PUSH
26330: LD_VAR 0 3
26334: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26335: LD_STRING getStreamItemsFromMission("
26337: PUSH
26338: LD_VAR 0 5
26342: STR
26343: PUSH
26344: LD_STRING ","
26346: STR
26347: PUSH
26348: LD_VAR 0 6
26352: STR
26353: PUSH
26354: LD_STRING ","
26356: STR
26357: PUSH
26358: LD_VAR 0 7
26362: STR
26363: PUSH
26364: LD_STRING ")
26366: STR
26367: PPUSH
26368: CALL_OW 559
// end else
26372: GO 26381
// ToLua ( getStreamItemsFromMission("","","") ) ;
26374: LD_STRING getStreamItemsFromMission("","","")
26376: PPUSH
26377: CALL_OW 559
// end ;
26381: LD_VAR 0 2
26385: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26386: LD_EXP 52
26390: IFFALSE 26398
26392: PUSH
26393: LD_EXP 57
26397: AND
26398: IFFALSE 26522
26400: GO 26402
26402: DISABLE
26403: LD_INT 0
26405: PPUSH
26406: PPUSH
// begin enable ;
26407: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26408: LD_ADDR_VAR 0 2
26412: PUSH
26413: LD_INT 22
26415: PUSH
26416: LD_OWVAR 2
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: LD_INT 34
26430: PUSH
26431: LD_INT 7
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 34
26440: PUSH
26441: LD_INT 45
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 34
26450: PUSH
26451: LD_INT 28
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 34
26460: PUSH
26461: LD_INT 47
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PPUSH
26479: CALL_OW 69
26483: ST_TO_ADDR
// if not tmp then
26484: LD_VAR 0 2
26488: NOT
26489: IFFALSE 26493
// exit ;
26491: GO 26522
// for i in tmp do
26493: LD_ADDR_VAR 0 1
26497: PUSH
26498: LD_VAR 0 2
26502: PUSH
26503: FOR_IN
26504: IFFALSE 26520
// begin SetLives ( i , 0 ) ;
26506: LD_VAR 0 1
26510: PPUSH
26511: LD_INT 0
26513: PPUSH
26514: CALL_OW 234
// end ;
26518: GO 26503
26520: POP
26521: POP
// end ;
26522: PPOPN 2
26524: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26525: LD_EXP 52
26529: IFFALSE 26537
26531: PUSH
26532: LD_EXP 58
26536: AND
26537: IFFALSE 26621
26539: GO 26541
26541: DISABLE
26542: LD_INT 0
26544: PPUSH
26545: PPUSH
// begin enable ;
26546: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26547: LD_ADDR_VAR 0 2
26551: PUSH
26552: LD_INT 22
26554: PUSH
26555: LD_OWVAR 2
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 32
26566: PUSH
26567: LD_INT 3
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PPUSH
26578: CALL_OW 69
26582: ST_TO_ADDR
// if not tmp then
26583: LD_VAR 0 2
26587: NOT
26588: IFFALSE 26592
// exit ;
26590: GO 26621
// for i in tmp do
26592: LD_ADDR_VAR 0 1
26596: PUSH
26597: LD_VAR 0 2
26601: PUSH
26602: FOR_IN
26603: IFFALSE 26619
// begin SetLives ( i , 0 ) ;
26605: LD_VAR 0 1
26609: PPUSH
26610: LD_INT 0
26612: PPUSH
26613: CALL_OW 234
// end ;
26617: GO 26602
26619: POP
26620: POP
// end ;
26621: PPOPN 2
26623: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26624: LD_EXP 52
26628: IFFALSE 26636
26630: PUSH
26631: LD_EXP 55
26635: AND
26636: IFFALSE 26729
26638: GO 26640
26640: DISABLE
26641: LD_INT 0
26643: PPUSH
// begin enable ;
26644: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26645: LD_ADDR_VAR 0 1
26649: PUSH
26650: LD_INT 22
26652: PUSH
26653: LD_OWVAR 2
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 2
26664: PUSH
26665: LD_INT 25
26667: PUSH
26668: LD_INT 5
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 25
26677: PUSH
26678: LD_INT 9
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 25
26687: PUSH
26688: LD_INT 8
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PPUSH
26705: CALL_OW 69
26709: PUSH
26710: FOR_IN
26711: IFFALSE 26727
// begin SetClass ( i , 1 ) ;
26713: LD_VAR 0 1
26717: PPUSH
26718: LD_INT 1
26720: PPUSH
26721: CALL_OW 336
// end ;
26725: GO 26710
26727: POP
26728: POP
// end ;
26729: PPOPN 1
26731: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26732: LD_EXP 52
26736: IFFALSE 26744
26738: PUSH
26739: LD_EXP 56
26743: AND
26744: IFFALSE 26756
26746: PUSH
26747: LD_OWVAR 65
26751: PUSH
26752: LD_INT 7
26754: LESS
26755: AND
26756: IFFALSE 26770
26758: GO 26760
26760: DISABLE
// begin enable ;
26761: ENABLE
// game_speed := 7 ;
26762: LD_ADDR_OWVAR 65
26766: PUSH
26767: LD_INT 7
26769: ST_TO_ADDR
// end ;
26770: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26771: LD_EXP 52
26775: IFFALSE 26783
26777: PUSH
26778: LD_EXP 59
26782: AND
26783: IFFALSE 26985
26785: GO 26787
26787: DISABLE
26788: LD_INT 0
26790: PPUSH
26791: PPUSH
26792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26793: LD_ADDR_VAR 0 3
26797: PUSH
26798: LD_INT 81
26800: PUSH
26801: LD_OWVAR 2
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 21
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PPUSH
26824: CALL_OW 69
26828: ST_TO_ADDR
// if not tmp then
26829: LD_VAR 0 3
26833: NOT
26834: IFFALSE 26838
// exit ;
26836: GO 26985
// if tmp > 5 then
26838: LD_VAR 0 3
26842: PUSH
26843: LD_INT 5
26845: GREATER
26846: IFFALSE 26858
// k := 5 else
26848: LD_ADDR_VAR 0 2
26852: PUSH
26853: LD_INT 5
26855: ST_TO_ADDR
26856: GO 26868
// k := tmp ;
26858: LD_ADDR_VAR 0 2
26862: PUSH
26863: LD_VAR 0 3
26867: ST_TO_ADDR
// for i := 1 to k do
26868: LD_ADDR_VAR 0 1
26872: PUSH
26873: DOUBLE
26874: LD_INT 1
26876: DEC
26877: ST_TO_ADDR
26878: LD_VAR 0 2
26882: PUSH
26883: FOR_TO
26884: IFFALSE 26983
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26886: LD_VAR 0 3
26890: PUSH
26891: LD_VAR 0 1
26895: ARRAY
26896: PPUSH
26897: LD_VAR 0 1
26901: PUSH
26902: LD_INT 4
26904: MOD
26905: PUSH
26906: LD_INT 1
26908: PLUS
26909: PPUSH
26910: CALL_OW 259
26914: PUSH
26915: LD_INT 10
26917: LESS
26918: IFFALSE 26981
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26920: LD_VAR 0 3
26924: PUSH
26925: LD_VAR 0 1
26929: ARRAY
26930: PPUSH
26931: LD_VAR 0 1
26935: PUSH
26936: LD_INT 4
26938: MOD
26939: PUSH
26940: LD_INT 1
26942: PLUS
26943: PPUSH
26944: LD_VAR 0 3
26948: PUSH
26949: LD_VAR 0 1
26953: ARRAY
26954: PPUSH
26955: LD_VAR 0 1
26959: PUSH
26960: LD_INT 4
26962: MOD
26963: PUSH
26964: LD_INT 1
26966: PLUS
26967: PPUSH
26968: CALL_OW 259
26972: PUSH
26973: LD_INT 1
26975: PLUS
26976: PPUSH
26977: CALL_OW 237
26981: GO 26883
26983: POP
26984: POP
// end ;
26985: PPOPN 3
26987: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26988: LD_EXP 52
26992: IFFALSE 27000
26994: PUSH
26995: LD_EXP 60
26999: AND
27000: IFFALSE 27020
27002: GO 27004
27004: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27005: LD_INT 4
27007: PPUSH
27008: LD_OWVAR 2
27012: PPUSH
27013: LD_INT 0
27015: PPUSH
27016: CALL_OW 324
27020: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27021: LD_EXP 52
27025: IFFALSE 27033
27027: PUSH
27028: LD_EXP 89
27032: AND
27033: IFFALSE 27053
27035: GO 27037
27037: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27038: LD_INT 19
27040: PPUSH
27041: LD_OWVAR 2
27045: PPUSH
27046: LD_INT 0
27048: PPUSH
27049: CALL_OW 324
27053: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27054: LD_EXP 52
27058: IFFALSE 27066
27060: PUSH
27061: LD_EXP 61
27065: AND
27066: IFFALSE 27168
27068: GO 27070
27070: DISABLE
27071: LD_INT 0
27073: PPUSH
27074: PPUSH
// begin enable ;
27075: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27076: LD_ADDR_VAR 0 2
27080: PUSH
27081: LD_INT 22
27083: PUSH
27084: LD_OWVAR 2
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: LD_INT 34
27098: PUSH
27099: LD_INT 11
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 34
27108: PUSH
27109: LD_INT 30
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PPUSH
27125: CALL_OW 69
27129: ST_TO_ADDR
// if not tmp then
27130: LD_VAR 0 2
27134: NOT
27135: IFFALSE 27139
// exit ;
27137: GO 27168
// for i in tmp do
27139: LD_ADDR_VAR 0 1
27143: PUSH
27144: LD_VAR 0 2
27148: PUSH
27149: FOR_IN
27150: IFFALSE 27166
// begin SetLives ( i , 0 ) ;
27152: LD_VAR 0 1
27156: PPUSH
27157: LD_INT 0
27159: PPUSH
27160: CALL_OW 234
// end ;
27164: GO 27149
27166: POP
27167: POP
// end ;
27168: PPOPN 2
27170: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27171: LD_EXP 52
27175: IFFALSE 27183
27177: PUSH
27178: LD_EXP 62
27182: AND
27183: IFFALSE 27203
27185: GO 27187
27187: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27188: LD_INT 32
27190: PPUSH
27191: LD_OWVAR 2
27195: PPUSH
27196: LD_INT 0
27198: PPUSH
27199: CALL_OW 324
27203: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27204: LD_EXP 52
27208: IFFALSE 27216
27210: PUSH
27211: LD_EXP 63
27215: AND
27216: IFFALSE 27399
27218: GO 27220
27220: DISABLE
27221: LD_INT 0
27223: PPUSH
27224: PPUSH
27225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27226: LD_ADDR_VAR 0 2
27230: PUSH
27231: LD_INT 22
27233: PUSH
27234: LD_OWVAR 2
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 33
27245: PUSH
27246: LD_INT 3
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PPUSH
27257: CALL_OW 69
27261: ST_TO_ADDR
// if not tmp then
27262: LD_VAR 0 2
27266: NOT
27267: IFFALSE 27271
// exit ;
27269: GO 27399
// side := 0 ;
27271: LD_ADDR_VAR 0 3
27275: PUSH
27276: LD_INT 0
27278: ST_TO_ADDR
// for i := 1 to 8 do
27279: LD_ADDR_VAR 0 1
27283: PUSH
27284: DOUBLE
27285: LD_INT 1
27287: DEC
27288: ST_TO_ADDR
27289: LD_INT 8
27291: PUSH
27292: FOR_TO
27293: IFFALSE 27343
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27295: LD_OWVAR 2
27299: PUSH
27300: LD_VAR 0 1
27304: NONEQUAL
27305: IFFALSE 27327
27307: PUSH
27308: LD_OWVAR 2
27312: PPUSH
27313: LD_VAR 0 1
27317: PPUSH
27318: CALL_OW 81
27322: PUSH
27323: LD_INT 2
27325: EQUAL
27326: AND
27327: IFFALSE 27341
// begin side := i ;
27329: LD_ADDR_VAR 0 3
27333: PUSH
27334: LD_VAR 0 1
27338: ST_TO_ADDR
// break ;
27339: GO 27343
// end ;
27341: GO 27292
27343: POP
27344: POP
// if not side then
27345: LD_VAR 0 3
27349: NOT
27350: IFFALSE 27354
// exit ;
27352: GO 27399
// for i := 1 to tmp do
27354: LD_ADDR_VAR 0 1
27358: PUSH
27359: DOUBLE
27360: LD_INT 1
27362: DEC
27363: ST_TO_ADDR
27364: LD_VAR 0 2
27368: PUSH
27369: FOR_TO
27370: IFFALSE 27397
// if Prob ( 60 ) then
27372: LD_INT 60
27374: PPUSH
27375: CALL_OW 13
27379: IFFALSE 27395
// SetSide ( i , side ) ;
27381: LD_VAR 0 1
27385: PPUSH
27386: LD_VAR 0 3
27390: PPUSH
27391: CALL_OW 235
27395: GO 27369
27397: POP
27398: POP
// end ;
27399: PPOPN 3
27401: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27402: LD_EXP 52
27406: IFFALSE 27414
27408: PUSH
27409: LD_EXP 65
27413: AND
27414: IFFALSE 27533
27416: GO 27418
27418: DISABLE
27419: LD_INT 0
27421: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27422: LD_ADDR_VAR 0 1
27426: PUSH
27427: LD_INT 22
27429: PUSH
27430: LD_OWVAR 2
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 21
27441: PUSH
27442: LD_INT 1
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 3
27451: PUSH
27452: LD_INT 23
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: LIST
27470: PPUSH
27471: CALL_OW 69
27475: PUSH
27476: FOR_IN
27477: IFFALSE 27531
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 257
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 2
27494: PUSH
27495: LD_INT 3
27497: PUSH
27498: LD_INT 4
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: IN
27507: IFFALSE 27529
// SetClass ( un , rand ( 1 , 4 ) ) ;
27509: LD_VAR 0 1
27513: PPUSH
27514: LD_INT 1
27516: PPUSH
27517: LD_INT 4
27519: PPUSH
27520: CALL_OW 12
27524: PPUSH
27525: CALL_OW 336
27529: GO 27476
27531: POP
27532: POP
// end ;
27533: PPOPN 1
27535: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27536: LD_EXP 52
27540: IFFALSE 27548
27542: PUSH
27543: LD_EXP 64
27547: AND
27548: IFFALSE 27627
27550: GO 27552
27552: DISABLE
27553: LD_INT 0
27555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27556: LD_ADDR_VAR 0 1
27560: PUSH
27561: LD_INT 22
27563: PUSH
27564: LD_OWVAR 2
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 21
27575: PUSH
27576: LD_INT 3
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PPUSH
27587: CALL_OW 69
27591: ST_TO_ADDR
// if not tmp then
27592: LD_VAR 0 1
27596: NOT
27597: IFFALSE 27601
// exit ;
27599: GO 27627
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27601: LD_VAR 0 1
27605: PUSH
27606: LD_INT 1
27608: PPUSH
27609: LD_VAR 0 1
27613: PPUSH
27614: CALL_OW 12
27618: ARRAY
27619: PPUSH
27620: LD_INT 100
27622: PPUSH
27623: CALL_OW 234
// end ;
27627: PPOPN 1
27629: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27630: LD_EXP 52
27634: IFFALSE 27642
27636: PUSH
27637: LD_EXP 66
27641: AND
27642: IFFALSE 27740
27644: GO 27646
27646: DISABLE
27647: LD_INT 0
27649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27650: LD_ADDR_VAR 0 1
27654: PUSH
27655: LD_INT 22
27657: PUSH
27658: LD_OWVAR 2
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 21
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PPUSH
27681: CALL_OW 69
27685: ST_TO_ADDR
// if not tmp then
27686: LD_VAR 0 1
27690: NOT
27691: IFFALSE 27695
// exit ;
27693: GO 27740
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27695: LD_VAR 0 1
27699: PUSH
27700: LD_INT 1
27702: PPUSH
27703: LD_VAR 0 1
27707: PPUSH
27708: CALL_OW 12
27712: ARRAY
27713: PPUSH
27714: LD_INT 1
27716: PPUSH
27717: LD_INT 4
27719: PPUSH
27720: CALL_OW 12
27724: PPUSH
27725: LD_INT 3000
27727: PPUSH
27728: LD_INT 9000
27730: PPUSH
27731: CALL_OW 12
27735: PPUSH
27736: CALL_OW 492
// end ;
27740: PPOPN 1
27742: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27743: LD_EXP 52
27747: IFFALSE 27755
27749: PUSH
27750: LD_EXP 67
27754: AND
27755: IFFALSE 27775
27757: GO 27759
27759: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27760: LD_INT 1
27762: PPUSH
27763: LD_OWVAR 2
27767: PPUSH
27768: LD_INT 0
27770: PPUSH
27771: CALL_OW 324
27775: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27776: LD_EXP 52
27780: IFFALSE 27788
27782: PUSH
27783: LD_EXP 68
27787: AND
27788: IFFALSE 27871
27790: GO 27792
27792: DISABLE
27793: LD_INT 0
27795: PPUSH
27796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27797: LD_ADDR_VAR 0 2
27801: PUSH
27802: LD_INT 22
27804: PUSH
27805: LD_OWVAR 2
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 21
27816: PUSH
27817: LD_INT 3
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PPUSH
27828: CALL_OW 69
27832: ST_TO_ADDR
// if not tmp then
27833: LD_VAR 0 2
27837: NOT
27838: IFFALSE 27842
// exit ;
27840: GO 27871
// for i in tmp do
27842: LD_ADDR_VAR 0 1
27846: PUSH
27847: LD_VAR 0 2
27851: PUSH
27852: FOR_IN
27853: IFFALSE 27869
// SetBLevel ( i , 10 ) ;
27855: LD_VAR 0 1
27859: PPUSH
27860: LD_INT 10
27862: PPUSH
27863: CALL_OW 241
27867: GO 27852
27869: POP
27870: POP
// end ;
27871: PPOPN 2
27873: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27874: LD_EXP 52
27878: IFFALSE 27886
27880: PUSH
27881: LD_EXP 69
27885: AND
27886: IFFALSE 27997
27888: GO 27890
27890: DISABLE
27891: LD_INT 0
27893: PPUSH
27894: PPUSH
27895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27896: LD_ADDR_VAR 0 3
27900: PUSH
27901: LD_INT 22
27903: PUSH
27904: LD_OWVAR 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 25
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PPUSH
27927: CALL_OW 69
27931: ST_TO_ADDR
// if not tmp then
27932: LD_VAR 0 3
27936: NOT
27937: IFFALSE 27941
// exit ;
27939: GO 27997
// un := tmp [ rand ( 1 , tmp ) ] ;
27941: LD_ADDR_VAR 0 2
27945: PUSH
27946: LD_VAR 0 3
27950: PUSH
27951: LD_INT 1
27953: PPUSH
27954: LD_VAR 0 3
27958: PPUSH
27959: CALL_OW 12
27963: ARRAY
27964: ST_TO_ADDR
// if Crawls ( un ) then
27965: LD_VAR 0 2
27969: PPUSH
27970: CALL_OW 318
27974: IFFALSE 27985
// ComWalk ( un ) ;
27976: LD_VAR 0 2
27980: PPUSH
27981: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27985: LD_VAR 0 2
27989: PPUSH
27990: LD_INT 5
27992: PPUSH
27993: CALL_OW 336
// end ;
27997: PPOPN 3
27999: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28000: LD_EXP 52
28004: IFFALSE 28012
28006: PUSH
28007: LD_EXP 70
28011: AND
28012: IFFALSE 28024
28014: PUSH
28015: LD_OWVAR 67
28019: PUSH
28020: LD_INT 4
28022: LESS
28023: AND
28024: IFFALSE 28043
28026: GO 28028
28028: DISABLE
// begin Difficulty := Difficulty + 1 ;
28029: LD_ADDR_OWVAR 67
28033: PUSH
28034: LD_OWVAR 67
28038: PUSH
28039: LD_INT 1
28041: PLUS
28042: ST_TO_ADDR
// end ;
28043: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28044: LD_EXP 52
28048: IFFALSE 28056
28050: PUSH
28051: LD_EXP 71
28055: AND
28056: IFFALSE 28159
28058: GO 28060
28060: DISABLE
28061: LD_INT 0
28063: PPUSH
// begin for i := 1 to 5 do
28064: LD_ADDR_VAR 0 1
28068: PUSH
28069: DOUBLE
28070: LD_INT 1
28072: DEC
28073: ST_TO_ADDR
28074: LD_INT 5
28076: PUSH
28077: FOR_TO
28078: IFFALSE 28157
// begin uc_nation := nation_nature ;
28080: LD_ADDR_OWVAR 21
28084: PUSH
28085: LD_INT 0
28087: ST_TO_ADDR
// uc_side := 0 ;
28088: LD_ADDR_OWVAR 20
28092: PUSH
28093: LD_INT 0
28095: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28096: LD_ADDR_OWVAR 29
28100: PUSH
28101: LD_INT 12
28103: PUSH
28104: LD_INT 12
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: ST_TO_ADDR
// hc_agressivity := 20 ;
28111: LD_ADDR_OWVAR 35
28115: PUSH
28116: LD_INT 20
28118: ST_TO_ADDR
// hc_class := class_tiger ;
28119: LD_ADDR_OWVAR 28
28123: PUSH
28124: LD_INT 14
28126: ST_TO_ADDR
// hc_gallery :=  ;
28127: LD_ADDR_OWVAR 33
28131: PUSH
28132: LD_STRING 
28134: ST_TO_ADDR
// hc_name :=  ;
28135: LD_ADDR_OWVAR 26
28139: PUSH
28140: LD_STRING 
28142: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28143: CALL_OW 44
28147: PPUSH
28148: LD_INT 0
28150: PPUSH
28151: CALL_OW 51
// end ;
28155: GO 28077
28157: POP
28158: POP
// end ;
28159: PPOPN 1
28161: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28162: LD_EXP 52
28166: IFFALSE 28174
28168: PUSH
28169: LD_EXP 72
28173: AND
28174: IFFALSE 28183
28176: GO 28178
28178: DISABLE
// StreamSibBomb ;
28179: CALL 28184 0 0
28183: END
// export function StreamSibBomb ; var i , x , y ; begin
28184: LD_INT 0
28186: PPUSH
28187: PPUSH
28188: PPUSH
28189: PPUSH
// result := false ;
28190: LD_ADDR_VAR 0 1
28194: PUSH
28195: LD_INT 0
28197: ST_TO_ADDR
// for i := 1 to 16 do
28198: LD_ADDR_VAR 0 2
28202: PUSH
28203: DOUBLE
28204: LD_INT 1
28206: DEC
28207: ST_TO_ADDR
28208: LD_INT 16
28210: PUSH
28211: FOR_TO
28212: IFFALSE 28411
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28214: LD_ADDR_VAR 0 3
28218: PUSH
28219: LD_INT 10
28221: PUSH
28222: LD_INT 20
28224: PUSH
28225: LD_INT 30
28227: PUSH
28228: LD_INT 40
28230: PUSH
28231: LD_INT 50
28233: PUSH
28234: LD_INT 60
28236: PUSH
28237: LD_INT 70
28239: PUSH
28240: LD_INT 80
28242: PUSH
28243: LD_INT 90
28245: PUSH
28246: LD_INT 100
28248: PUSH
28249: LD_INT 110
28251: PUSH
28252: LD_INT 120
28254: PUSH
28255: LD_INT 130
28257: PUSH
28258: LD_INT 140
28260: PUSH
28261: LD_INT 150
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 1
28283: PPUSH
28284: LD_INT 15
28286: PPUSH
28287: CALL_OW 12
28291: ARRAY
28292: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28293: LD_ADDR_VAR 0 4
28297: PUSH
28298: LD_INT 10
28300: PUSH
28301: LD_INT 20
28303: PUSH
28304: LD_INT 30
28306: PUSH
28307: LD_INT 40
28309: PUSH
28310: LD_INT 50
28312: PUSH
28313: LD_INT 60
28315: PUSH
28316: LD_INT 70
28318: PUSH
28319: LD_INT 80
28321: PUSH
28322: LD_INT 90
28324: PUSH
28325: LD_INT 100
28327: PUSH
28328: LD_INT 110
28330: PUSH
28331: LD_INT 120
28333: PUSH
28334: LD_INT 130
28336: PUSH
28337: LD_INT 140
28339: PUSH
28340: LD_INT 150
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 1
28362: PPUSH
28363: LD_INT 15
28365: PPUSH
28366: CALL_OW 12
28370: ARRAY
28371: ST_TO_ADDR
// if ValidHex ( x , y ) then
28372: LD_VAR 0 3
28376: PPUSH
28377: LD_VAR 0 4
28381: PPUSH
28382: CALL_OW 488
28386: IFFALSE 28409
// begin result := [ x , y ] ;
28388: LD_ADDR_VAR 0 1
28392: PUSH
28393: LD_VAR 0 3
28397: PUSH
28398: LD_VAR 0 4
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: ST_TO_ADDR
// break ;
28407: GO 28411
// end ; end ;
28409: GO 28211
28411: POP
28412: POP
// if result then
28413: LD_VAR 0 1
28417: IFFALSE 28477
// begin ToLua ( playSibBomb() ) ;
28419: LD_STRING playSibBomb()
28421: PPUSH
28422: CALL_OW 559
// wait ( 0 0$14 ) ;
28426: LD_INT 490
28428: PPUSH
28429: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28433: LD_VAR 0 1
28437: PUSH
28438: LD_INT 1
28440: ARRAY
28441: PPUSH
28442: LD_VAR 0 1
28446: PUSH
28447: LD_INT 2
28449: ARRAY
28450: PPUSH
28451: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28455: LD_VAR 0 1
28459: PUSH
28460: LD_INT 1
28462: ARRAY
28463: PPUSH
28464: LD_VAR 0 1
28468: PUSH
28469: LD_INT 2
28471: ARRAY
28472: PPUSH
28473: CALL_OW 429
// end ; end ;
28477: LD_VAR 0 1
28481: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28482: LD_EXP 52
28486: IFFALSE 28494
28488: PUSH
28489: LD_EXP 74
28493: AND
28494: IFFALSE 28506
28496: GO 28498
28498: DISABLE
// YouLost (  ) ;
28499: LD_STRING 
28501: PPUSH
28502: CALL_OW 104
28506: END
// every 0 0$1 trigger StreamModeActive and sFog do
28507: LD_EXP 52
28511: IFFALSE 28519
28513: PUSH
28514: LD_EXP 73
28518: AND
28519: IFFALSE 28533
28521: GO 28523
28523: DISABLE
// FogOff ( your_side ) ;
28524: LD_OWVAR 2
28528: PPUSH
28529: CALL_OW 344
28533: END
// every 0 0$1 trigger StreamModeActive and sSun do
28534: LD_EXP 52
28538: IFFALSE 28546
28540: PUSH
28541: LD_EXP 75
28545: AND
28546: IFFALSE 28574
28548: GO 28550
28550: DISABLE
// begin solar_recharge_percent := 0 ;
28551: LD_ADDR_OWVAR 79
28555: PUSH
28556: LD_INT 0
28558: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28559: LD_INT 10500
28561: PPUSH
28562: CALL_OW 67
// solar_recharge_percent := 100 ;
28566: LD_ADDR_OWVAR 79
28570: PUSH
28571: LD_INT 100
28573: ST_TO_ADDR
// end ;
28574: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28575: LD_EXP 52
28579: IFFALSE 28587
28581: PUSH
28582: LD_EXP 76
28586: AND
28587: IFFALSE 28826
28589: GO 28591
28591: DISABLE
28592: LD_INT 0
28594: PPUSH
28595: PPUSH
28596: PPUSH
// begin tmp := [ ] ;
28597: LD_ADDR_VAR 0 3
28601: PUSH
28602: EMPTY
28603: ST_TO_ADDR
// for i := 1 to 6 do
28604: LD_ADDR_VAR 0 1
28608: PUSH
28609: DOUBLE
28610: LD_INT 1
28612: DEC
28613: ST_TO_ADDR
28614: LD_INT 6
28616: PUSH
28617: FOR_TO
28618: IFFALSE 28723
// begin uc_nation := nation_nature ;
28620: LD_ADDR_OWVAR 21
28624: PUSH
28625: LD_INT 0
28627: ST_TO_ADDR
// uc_side := 0 ;
28628: LD_ADDR_OWVAR 20
28632: PUSH
28633: LD_INT 0
28635: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28636: LD_ADDR_OWVAR 29
28640: PUSH
28641: LD_INT 12
28643: PUSH
28644: LD_INT 12
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: ST_TO_ADDR
// hc_agressivity := 20 ;
28651: LD_ADDR_OWVAR 35
28655: PUSH
28656: LD_INT 20
28658: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28659: LD_ADDR_OWVAR 28
28663: PUSH
28664: LD_INT 17
28666: ST_TO_ADDR
// hc_gallery :=  ;
28667: LD_ADDR_OWVAR 33
28671: PUSH
28672: LD_STRING 
28674: ST_TO_ADDR
// hc_name :=  ;
28675: LD_ADDR_OWVAR 26
28679: PUSH
28680: LD_STRING 
28682: ST_TO_ADDR
// un := CreateHuman ;
28683: LD_ADDR_VAR 0 2
28687: PUSH
28688: CALL_OW 44
28692: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28693: LD_VAR 0 2
28697: PPUSH
28698: LD_INT 1
28700: PPUSH
28701: CALL_OW 51
// tmp := tmp ^ un ;
28705: LD_ADDR_VAR 0 3
28709: PUSH
28710: LD_VAR 0 3
28714: PUSH
28715: LD_VAR 0 2
28719: ADD
28720: ST_TO_ADDR
// end ;
28721: GO 28617
28723: POP
28724: POP
// repeat wait ( 0 0$1 ) ;
28725: LD_INT 35
28727: PPUSH
28728: CALL_OW 67
// for un in tmp do
28732: LD_ADDR_VAR 0 2
28736: PUSH
28737: LD_VAR 0 3
28741: PUSH
28742: FOR_IN
28743: IFFALSE 28817
// begin if IsDead ( un ) then
28745: LD_VAR 0 2
28749: PPUSH
28750: CALL_OW 301
28754: IFFALSE 28774
// begin tmp := tmp diff un ;
28756: LD_ADDR_VAR 0 3
28760: PUSH
28761: LD_VAR 0 3
28765: PUSH
28766: LD_VAR 0 2
28770: DIFF
28771: ST_TO_ADDR
// continue ;
28772: GO 28742
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28774: LD_VAR 0 2
28778: PPUSH
28779: LD_INT 3
28781: PUSH
28782: LD_INT 22
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PPUSH
28796: CALL_OW 69
28800: PPUSH
28801: LD_VAR 0 2
28805: PPUSH
28806: CALL_OW 74
28810: PPUSH
28811: CALL_OW 115
// end ;
28815: GO 28742
28817: POP
28818: POP
// until not tmp ;
28819: LD_VAR 0 3
28823: NOT
28824: IFFALSE 28725
// end ;
28826: PPOPN 3
28828: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28829: LD_EXP 52
28833: IFFALSE 28841
28835: PUSH
28836: LD_EXP 77
28840: AND
28841: IFFALSE 28895
28843: GO 28845
28845: DISABLE
// begin ToLua ( displayTroll(); ) ;
28846: LD_STRING displayTroll();
28848: PPUSH
28849: CALL_OW 559
// wait ( 3 3$00 ) ;
28853: LD_INT 6300
28855: PPUSH
28856: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28860: LD_STRING hideTroll();
28862: PPUSH
28863: CALL_OW 559
// wait ( 1 1$00 ) ;
28867: LD_INT 2100
28869: PPUSH
28870: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28874: LD_STRING displayTroll();
28876: PPUSH
28877: CALL_OW 559
// wait ( 1 1$00 ) ;
28881: LD_INT 2100
28883: PPUSH
28884: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28888: LD_STRING hideTroll();
28890: PPUSH
28891: CALL_OW 559
// end ;
28895: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28896: LD_EXP 52
28900: IFFALSE 28908
28902: PUSH
28903: LD_EXP 78
28907: AND
28908: IFFALSE 28971
28910: GO 28912
28912: DISABLE
28913: LD_INT 0
28915: PPUSH
// begin p := 0 ;
28916: LD_ADDR_VAR 0 1
28920: PUSH
28921: LD_INT 0
28923: ST_TO_ADDR
// repeat game_speed := 1 ;
28924: LD_ADDR_OWVAR 65
28928: PUSH
28929: LD_INT 1
28931: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28932: LD_INT 35
28934: PPUSH
28935: CALL_OW 67
// p := p + 1 ;
28939: LD_ADDR_VAR 0 1
28943: PUSH
28944: LD_VAR 0 1
28948: PUSH
28949: LD_INT 1
28951: PLUS
28952: ST_TO_ADDR
// until p >= 60 ;
28953: LD_VAR 0 1
28957: PUSH
28958: LD_INT 60
28960: GREATEREQUAL
28961: IFFALSE 28924
// game_speed := 4 ;
28963: LD_ADDR_OWVAR 65
28967: PUSH
28968: LD_INT 4
28970: ST_TO_ADDR
// end ;
28971: PPOPN 1
28973: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28974: LD_EXP 52
28978: IFFALSE 28986
28980: PUSH
28981: LD_EXP 79
28985: AND
28986: IFFALSE 29132
28988: GO 28990
28990: DISABLE
28991: LD_INT 0
28993: PPUSH
28994: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28995: LD_ADDR_VAR 0 1
28999: PUSH
29000: LD_INT 22
29002: PUSH
29003: LD_OWVAR 2
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 2
29014: PUSH
29015: LD_INT 30
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 30
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PPUSH
29044: CALL_OW 69
29048: ST_TO_ADDR
// if not depot then
29049: LD_VAR 0 1
29053: NOT
29054: IFFALSE 29058
// exit ;
29056: GO 29132
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29058: LD_ADDR_VAR 0 2
29062: PUSH
29063: LD_VAR 0 1
29067: PUSH
29068: LD_INT 1
29070: PPUSH
29071: LD_VAR 0 1
29075: PPUSH
29076: CALL_OW 12
29080: ARRAY
29081: PPUSH
29082: CALL_OW 274
29086: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29087: LD_VAR 0 2
29091: PPUSH
29092: LD_INT 1
29094: PPUSH
29095: LD_INT 0
29097: PPUSH
29098: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29102: LD_VAR 0 2
29106: PPUSH
29107: LD_INT 2
29109: PPUSH
29110: LD_INT 0
29112: PPUSH
29113: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29117: LD_VAR 0 2
29121: PPUSH
29122: LD_INT 3
29124: PPUSH
29125: LD_INT 0
29127: PPUSH
29128: CALL_OW 277
// end ;
29132: PPOPN 2
29134: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29135: LD_EXP 52
29139: IFFALSE 29147
29141: PUSH
29142: LD_EXP 80
29146: AND
29147: IFFALSE 29244
29149: GO 29151
29151: DISABLE
29152: LD_INT 0
29154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29155: LD_ADDR_VAR 0 1
29159: PUSH
29160: LD_INT 22
29162: PUSH
29163: LD_OWVAR 2
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 21
29174: PUSH
29175: LD_INT 1
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 3
29184: PUSH
29185: LD_INT 23
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: PPUSH
29204: CALL_OW 69
29208: ST_TO_ADDR
// if not tmp then
29209: LD_VAR 0 1
29213: NOT
29214: IFFALSE 29218
// exit ;
29216: GO 29244
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29218: LD_VAR 0 1
29222: PUSH
29223: LD_INT 1
29225: PPUSH
29226: LD_VAR 0 1
29230: PPUSH
29231: CALL_OW 12
29235: ARRAY
29236: PPUSH
29237: LD_INT 200
29239: PPUSH
29240: CALL_OW 234
// end ;
29244: PPOPN 1
29246: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29247: LD_EXP 52
29251: IFFALSE 29259
29253: PUSH
29254: LD_EXP 81
29258: AND
29259: IFFALSE 29338
29261: GO 29263
29263: DISABLE
29264: LD_INT 0
29266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29267: LD_ADDR_VAR 0 1
29271: PUSH
29272: LD_INT 22
29274: PUSH
29275: LD_OWVAR 2
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 21
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PPUSH
29298: CALL_OW 69
29302: ST_TO_ADDR
// if not tmp then
29303: LD_VAR 0 1
29307: NOT
29308: IFFALSE 29312
// exit ;
29310: GO 29338
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29312: LD_VAR 0 1
29316: PUSH
29317: LD_INT 1
29319: PPUSH
29320: LD_VAR 0 1
29324: PPUSH
29325: CALL_OW 12
29329: ARRAY
29330: PPUSH
29331: LD_INT 60
29333: PPUSH
29334: CALL_OW 234
// end ;
29338: PPOPN 1
29340: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29341: LD_EXP 52
29345: IFFALSE 29353
29347: PUSH
29348: LD_EXP 82
29352: AND
29353: IFFALSE 29452
29355: GO 29357
29357: DISABLE
29358: LD_INT 0
29360: PPUSH
29361: PPUSH
// begin enable ;
29362: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29363: LD_ADDR_VAR 0 1
29367: PUSH
29368: LD_INT 22
29370: PUSH
29371: LD_OWVAR 2
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 61
29382: PUSH
29383: EMPTY
29384: LIST
29385: PUSH
29386: LD_INT 33
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: PPUSH
29401: CALL_OW 69
29405: ST_TO_ADDR
// if not tmp then
29406: LD_VAR 0 1
29410: NOT
29411: IFFALSE 29415
// exit ;
29413: GO 29452
// for i in tmp do
29415: LD_ADDR_VAR 0 2
29419: PUSH
29420: LD_VAR 0 1
29424: PUSH
29425: FOR_IN
29426: IFFALSE 29450
// if IsControledBy ( i ) then
29428: LD_VAR 0 2
29432: PPUSH
29433: CALL_OW 312
29437: IFFALSE 29448
// ComUnlink ( i ) ;
29439: LD_VAR 0 2
29443: PPUSH
29444: CALL_OW 136
29448: GO 29425
29450: POP
29451: POP
// end ;
29452: PPOPN 2
29454: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29455: LD_EXP 52
29459: IFFALSE 29467
29461: PUSH
29462: LD_EXP 83
29466: AND
29467: IFFALSE 29607
29469: GO 29471
29471: DISABLE
29472: LD_INT 0
29474: PPUSH
29475: PPUSH
// begin ToLua ( displayPowell(); ) ;
29476: LD_STRING displayPowell();
29478: PPUSH
29479: CALL_OW 559
// uc_side := 0 ;
29483: LD_ADDR_OWVAR 20
29487: PUSH
29488: LD_INT 0
29490: ST_TO_ADDR
// uc_nation := 2 ;
29491: LD_ADDR_OWVAR 21
29495: PUSH
29496: LD_INT 2
29498: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29499: LD_ADDR_OWVAR 37
29503: PUSH
29504: LD_INT 14
29506: ST_TO_ADDR
// vc_engine := engine_siberite ;
29507: LD_ADDR_OWVAR 39
29511: PUSH
29512: LD_INT 3
29514: ST_TO_ADDR
// vc_control := control_apeman ;
29515: LD_ADDR_OWVAR 38
29519: PUSH
29520: LD_INT 5
29522: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29523: LD_ADDR_OWVAR 40
29527: PUSH
29528: LD_INT 29
29530: ST_TO_ADDR
// un := CreateVehicle ;
29531: LD_ADDR_VAR 0 2
29535: PUSH
29536: CALL_OW 45
29540: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29541: LD_VAR 0 2
29545: PPUSH
29546: LD_INT 1
29548: PPUSH
29549: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29553: LD_INT 35
29555: PPUSH
29556: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29560: LD_VAR 0 2
29564: PPUSH
29565: LD_INT 22
29567: PUSH
29568: LD_OWVAR 2
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PPUSH
29577: CALL_OW 69
29581: PPUSH
29582: LD_VAR 0 2
29586: PPUSH
29587: CALL_OW 74
29591: PPUSH
29592: CALL_OW 115
// until IsDead ( un ) ;
29596: LD_VAR 0 2
29600: PPUSH
29601: CALL_OW 301
29605: IFFALSE 29553
// end ;
29607: PPOPN 2
29609: END
// every 0 0$1 trigger StreamModeActive and sStu do
29610: LD_EXP 52
29614: IFFALSE 29622
29616: PUSH
29617: LD_EXP 91
29621: AND
29622: IFFALSE 29638
29624: GO 29626
29626: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29627: LD_STRING displayStucuk();
29629: PPUSH
29630: CALL_OW 559
// ResetFog ;
29634: CALL_OW 335
// end ;
29638: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29639: LD_EXP 52
29643: IFFALSE 29651
29645: PUSH
29646: LD_EXP 84
29650: AND
29651: IFFALSE 29792
29653: GO 29655
29655: DISABLE
29656: LD_INT 0
29658: PPUSH
29659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29660: LD_ADDR_VAR 0 2
29664: PUSH
29665: LD_INT 22
29667: PUSH
29668: LD_OWVAR 2
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 21
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PPUSH
29691: CALL_OW 69
29695: ST_TO_ADDR
// if not tmp then
29696: LD_VAR 0 2
29700: NOT
29701: IFFALSE 29705
// exit ;
29703: GO 29792
// un := tmp [ rand ( 1 , tmp ) ] ;
29705: LD_ADDR_VAR 0 1
29709: PUSH
29710: LD_VAR 0 2
29714: PUSH
29715: LD_INT 1
29717: PPUSH
29718: LD_VAR 0 2
29722: PPUSH
29723: CALL_OW 12
29727: ARRAY
29728: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29729: LD_VAR 0 1
29733: PPUSH
29734: LD_INT 0
29736: PPUSH
29737: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29741: LD_VAR 0 1
29745: PPUSH
29746: LD_OWVAR 3
29750: PUSH
29751: LD_VAR 0 1
29755: DIFF
29756: PPUSH
29757: LD_VAR 0 1
29761: PPUSH
29762: CALL_OW 74
29766: PPUSH
29767: CALL_OW 115
// wait ( 0 0$20 ) ;
29771: LD_INT 700
29773: PPUSH
29774: CALL_OW 67
// SetSide ( un , your_side ) ;
29778: LD_VAR 0 1
29782: PPUSH
29783: LD_OWVAR 2
29787: PPUSH
29788: CALL_OW 235
// end ;
29792: PPOPN 2
29794: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29795: LD_EXP 52
29799: IFFALSE 29807
29801: PUSH
29802: LD_EXP 85
29806: AND
29807: IFFALSE 29913
29809: GO 29811
29811: DISABLE
29812: LD_INT 0
29814: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29815: LD_ADDR_VAR 0 1
29819: PUSH
29820: LD_INT 22
29822: PUSH
29823: LD_OWVAR 2
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: LD_INT 30
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 30
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PPUSH
29864: CALL_OW 69
29868: ST_TO_ADDR
// if not depot then
29869: LD_VAR 0 1
29873: NOT
29874: IFFALSE 29878
// exit ;
29876: GO 29913
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29878: LD_VAR 0 1
29882: PUSH
29883: LD_INT 1
29885: ARRAY
29886: PPUSH
29887: CALL_OW 250
29891: PPUSH
29892: LD_VAR 0 1
29896: PUSH
29897: LD_INT 1
29899: ARRAY
29900: PPUSH
29901: CALL_OW 251
29905: PPUSH
29906: LD_INT 70
29908: PPUSH
29909: CALL_OW 495
// end ;
29913: PPOPN 1
29915: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29916: LD_EXP 52
29920: IFFALSE 29928
29922: PUSH
29923: LD_EXP 86
29927: AND
29928: IFFALSE 30139
29930: GO 29932
29932: DISABLE
29933: LD_INT 0
29935: PPUSH
29936: PPUSH
29937: PPUSH
29938: PPUSH
29939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29940: LD_ADDR_VAR 0 5
29944: PUSH
29945: LD_INT 22
29947: PUSH
29948: LD_OWVAR 2
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 21
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PPUSH
29971: CALL_OW 69
29975: ST_TO_ADDR
// if not tmp then
29976: LD_VAR 0 5
29980: NOT
29981: IFFALSE 29985
// exit ;
29983: GO 30139
// for i in tmp do
29985: LD_ADDR_VAR 0 1
29989: PUSH
29990: LD_VAR 0 5
29994: PUSH
29995: FOR_IN
29996: IFFALSE 30137
// begin d := rand ( 0 , 5 ) ;
29998: LD_ADDR_VAR 0 4
30002: PUSH
30003: LD_INT 0
30005: PPUSH
30006: LD_INT 5
30008: PPUSH
30009: CALL_OW 12
30013: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30014: LD_ADDR_VAR 0 2
30018: PUSH
30019: LD_VAR 0 1
30023: PPUSH
30024: CALL_OW 250
30028: PPUSH
30029: LD_VAR 0 4
30033: PPUSH
30034: LD_INT 3
30036: PPUSH
30037: LD_INT 12
30039: PPUSH
30040: CALL_OW 12
30044: PPUSH
30045: CALL_OW 272
30049: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30050: LD_ADDR_VAR 0 3
30054: PUSH
30055: LD_VAR 0 1
30059: PPUSH
30060: CALL_OW 251
30064: PPUSH
30065: LD_VAR 0 4
30069: PPUSH
30070: LD_INT 3
30072: PPUSH
30073: LD_INT 12
30075: PPUSH
30076: CALL_OW 12
30080: PPUSH
30081: CALL_OW 273
30085: ST_TO_ADDR
// if ValidHex ( x , y ) then
30086: LD_VAR 0 2
30090: PPUSH
30091: LD_VAR 0 3
30095: PPUSH
30096: CALL_OW 488
30100: IFFALSE 30135
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30102: LD_VAR 0 1
30106: PPUSH
30107: LD_VAR 0 2
30111: PPUSH
30112: LD_VAR 0 3
30116: PPUSH
30117: LD_INT 3
30119: PPUSH
30120: LD_INT 6
30122: PPUSH
30123: CALL_OW 12
30127: PPUSH
30128: LD_INT 1
30130: PPUSH
30131: CALL_OW 483
// end ;
30135: GO 29995
30137: POP
30138: POP
// end ;
30139: PPOPN 5
30141: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30142: LD_EXP 52
30146: IFFALSE 30154
30148: PUSH
30149: LD_EXP 87
30153: AND
30154: IFFALSE 30248
30156: GO 30158
30158: DISABLE
30159: LD_INT 0
30161: PPUSH
30162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30163: LD_ADDR_VAR 0 2
30167: PUSH
30168: LD_INT 22
30170: PUSH
30171: LD_OWVAR 2
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 32
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 21
30192: PUSH
30193: LD_INT 2
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: LIST
30204: PPUSH
30205: CALL_OW 69
30209: ST_TO_ADDR
// if not tmp then
30210: LD_VAR 0 2
30214: NOT
30215: IFFALSE 30219
// exit ;
30217: GO 30248
// for i in tmp do
30219: LD_ADDR_VAR 0 1
30223: PUSH
30224: LD_VAR 0 2
30228: PUSH
30229: FOR_IN
30230: IFFALSE 30246
// SetFuel ( i , 0 ) ;
30232: LD_VAR 0 1
30236: PPUSH
30237: LD_INT 0
30239: PPUSH
30240: CALL_OW 240
30244: GO 30229
30246: POP
30247: POP
// end ;
30248: PPOPN 2
30250: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30251: LD_EXP 52
30255: IFFALSE 30263
30257: PUSH
30258: LD_EXP 88
30262: AND
30263: IFFALSE 30329
30265: GO 30267
30267: DISABLE
30268: LD_INT 0
30270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30271: LD_ADDR_VAR 0 1
30275: PUSH
30276: LD_INT 22
30278: PUSH
30279: LD_OWVAR 2
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 30
30290: PUSH
30291: LD_INT 29
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PPUSH
30302: CALL_OW 69
30306: ST_TO_ADDR
// if not tmp then
30307: LD_VAR 0 1
30311: NOT
30312: IFFALSE 30316
// exit ;
30314: GO 30329
// DestroyUnit ( tmp [ 1 ] ) ;
30316: LD_VAR 0 1
30320: PUSH
30321: LD_INT 1
30323: ARRAY
30324: PPUSH
30325: CALL_OW 65
// end ;
30329: PPOPN 1
30331: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30332: LD_EXP 52
30336: IFFALSE 30344
30338: PUSH
30339: LD_EXP 90
30343: AND
30344: IFFALSE 30473
30346: GO 30348
30348: DISABLE
30349: LD_INT 0
30351: PPUSH
// begin uc_side := 0 ;
30352: LD_ADDR_OWVAR 20
30356: PUSH
30357: LD_INT 0
30359: ST_TO_ADDR
// uc_nation := nation_arabian ;
30360: LD_ADDR_OWVAR 21
30364: PUSH
30365: LD_INT 2
30367: ST_TO_ADDR
// hc_gallery :=  ;
30368: LD_ADDR_OWVAR 33
30372: PUSH
30373: LD_STRING 
30375: ST_TO_ADDR
// hc_name :=  ;
30376: LD_ADDR_OWVAR 26
30380: PUSH
30381: LD_STRING 
30383: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30384: LD_INT 1
30386: PPUSH
30387: LD_INT 11
30389: PPUSH
30390: LD_INT 10
30392: PPUSH
30393: CALL_OW 380
// un := CreateHuman ;
30397: LD_ADDR_VAR 0 1
30401: PUSH
30402: CALL_OW 44
30406: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30407: LD_VAR 0 1
30411: PPUSH
30412: LD_INT 1
30414: PPUSH
30415: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30419: LD_INT 35
30421: PPUSH
30422: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30426: LD_VAR 0 1
30430: PPUSH
30431: LD_INT 22
30433: PUSH
30434: LD_OWVAR 2
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PPUSH
30443: CALL_OW 69
30447: PPUSH
30448: LD_VAR 0 1
30452: PPUSH
30453: CALL_OW 74
30457: PPUSH
30458: CALL_OW 115
// until IsDead ( un ) ;
30462: LD_VAR 0 1
30466: PPUSH
30467: CALL_OW 301
30471: IFFALSE 30419
// end ;
30473: PPOPN 1
30475: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30476: LD_EXP 52
30480: IFFALSE 30488
30482: PUSH
30483: LD_EXP 92
30487: AND
30488: IFFALSE 30500
30490: GO 30492
30492: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30493: LD_STRING earthquake(getX(game), 0, 32)
30495: PPUSH
30496: CALL_OW 559
30500: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30501: LD_EXP 52
30505: IFFALSE 30513
30507: PUSH
30508: LD_EXP 93
30512: AND
30513: IFFALSE 30604
30515: GO 30517
30517: DISABLE
30518: LD_INT 0
30520: PPUSH
// begin enable ;
30521: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30522: LD_ADDR_VAR 0 1
30526: PUSH
30527: LD_INT 22
30529: PUSH
30530: LD_OWVAR 2
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 21
30541: PUSH
30542: LD_INT 2
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 33
30551: PUSH
30552: LD_INT 3
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: LIST
30563: PPUSH
30564: CALL_OW 69
30568: ST_TO_ADDR
// if not tmp then
30569: LD_VAR 0 1
30573: NOT
30574: IFFALSE 30578
// exit ;
30576: GO 30604
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30578: LD_VAR 0 1
30582: PUSH
30583: LD_INT 1
30585: PPUSH
30586: LD_VAR 0 1
30590: PPUSH
30591: CALL_OW 12
30595: ARRAY
30596: PPUSH
30597: LD_INT 1
30599: PPUSH
30600: CALL_OW 234
// end ;
30604: PPOPN 1
30606: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30607: LD_EXP 52
30611: IFFALSE 30619
30613: PUSH
30614: LD_EXP 94
30618: AND
30619: IFFALSE 30760
30621: GO 30623
30623: DISABLE
30624: LD_INT 0
30626: PPUSH
30627: PPUSH
30628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30629: LD_ADDR_VAR 0 3
30633: PUSH
30634: LD_INT 22
30636: PUSH
30637: LD_OWVAR 2
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 25
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PPUSH
30660: CALL_OW 69
30664: ST_TO_ADDR
// if not tmp then
30665: LD_VAR 0 3
30669: NOT
30670: IFFALSE 30674
// exit ;
30672: GO 30760
// un := tmp [ rand ( 1 , tmp ) ] ;
30674: LD_ADDR_VAR 0 2
30678: PUSH
30679: LD_VAR 0 3
30683: PUSH
30684: LD_INT 1
30686: PPUSH
30687: LD_VAR 0 3
30691: PPUSH
30692: CALL_OW 12
30696: ARRAY
30697: ST_TO_ADDR
// if Crawls ( un ) then
30698: LD_VAR 0 2
30702: PPUSH
30703: CALL_OW 318
30707: IFFALSE 30718
// ComWalk ( un ) ;
30709: LD_VAR 0 2
30713: PPUSH
30714: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30718: LD_VAR 0 2
30722: PPUSH
30723: LD_INT 9
30725: PPUSH
30726: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30730: LD_INT 28
30732: PPUSH
30733: LD_OWVAR 2
30737: PPUSH
30738: LD_INT 2
30740: PPUSH
30741: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30745: LD_INT 29
30747: PPUSH
30748: LD_OWVAR 2
30752: PPUSH
30753: LD_INT 2
30755: PPUSH
30756: CALL_OW 322
// end ;
30760: PPOPN 3
30762: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30763: LD_EXP 52
30767: IFFALSE 30775
30769: PUSH
30770: LD_EXP 95
30774: AND
30775: IFFALSE 30886
30777: GO 30779
30779: DISABLE
30780: LD_INT 0
30782: PPUSH
30783: PPUSH
30784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30785: LD_ADDR_VAR 0 3
30789: PUSH
30790: LD_INT 22
30792: PUSH
30793: LD_OWVAR 2
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 25
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PPUSH
30816: CALL_OW 69
30820: ST_TO_ADDR
// if not tmp then
30821: LD_VAR 0 3
30825: NOT
30826: IFFALSE 30830
// exit ;
30828: GO 30886
// un := tmp [ rand ( 1 , tmp ) ] ;
30830: LD_ADDR_VAR 0 2
30834: PUSH
30835: LD_VAR 0 3
30839: PUSH
30840: LD_INT 1
30842: PPUSH
30843: LD_VAR 0 3
30847: PPUSH
30848: CALL_OW 12
30852: ARRAY
30853: ST_TO_ADDR
// if Crawls ( un ) then
30854: LD_VAR 0 2
30858: PPUSH
30859: CALL_OW 318
30863: IFFALSE 30874
// ComWalk ( un ) ;
30865: LD_VAR 0 2
30869: PPUSH
30870: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30874: LD_VAR 0 2
30878: PPUSH
30879: LD_INT 8
30881: PPUSH
30882: CALL_OW 336
// end ;
30886: PPOPN 3
30888: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30889: LD_EXP 52
30893: IFFALSE 30901
30895: PUSH
30896: LD_EXP 96
30900: AND
30901: IFFALSE 31045
30903: GO 30905
30905: DISABLE
30906: LD_INT 0
30908: PPUSH
30909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30910: LD_ADDR_VAR 0 2
30914: PUSH
30915: LD_INT 22
30917: PUSH
30918: LD_OWVAR 2
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 21
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: PUSH
30940: LD_INT 34
30942: PUSH
30943: LD_INT 12
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 34
30952: PUSH
30953: LD_INT 51
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 34
30962: PUSH
30963: LD_INT 32
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: LIST
30980: PPUSH
30981: CALL_OW 69
30985: ST_TO_ADDR
// if not tmp then
30986: LD_VAR 0 2
30990: NOT
30991: IFFALSE 30995
// exit ;
30993: GO 31045
// for i in tmp do
30995: LD_ADDR_VAR 0 1
30999: PUSH
31000: LD_VAR 0 2
31004: PUSH
31005: FOR_IN
31006: IFFALSE 31043
// if GetCargo ( i , mat_artifact ) = 0 then
31008: LD_VAR 0 1
31012: PPUSH
31013: LD_INT 4
31015: PPUSH
31016: CALL_OW 289
31020: PUSH
31021: LD_INT 0
31023: EQUAL
31024: IFFALSE 31041
// SetCargo ( i , mat_siberit , 100 ) ;
31026: LD_VAR 0 1
31030: PPUSH
31031: LD_INT 3
31033: PPUSH
31034: LD_INT 100
31036: PPUSH
31037: CALL_OW 290
31041: GO 31005
31043: POP
31044: POP
// end ;
31045: PPOPN 2
31047: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31048: LD_EXP 52
31052: IFFALSE 31060
31054: PUSH
31055: LD_EXP 97
31059: AND
31060: IFFALSE 31243
31062: GO 31064
31064: DISABLE
31065: LD_INT 0
31067: PPUSH
31068: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31069: LD_ADDR_VAR 0 2
31073: PUSH
31074: LD_INT 22
31076: PUSH
31077: LD_OWVAR 2
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PPUSH
31086: CALL_OW 69
31090: ST_TO_ADDR
// if not tmp then
31091: LD_VAR 0 2
31095: NOT
31096: IFFALSE 31100
// exit ;
31098: GO 31243
// for i := 1 to 2 do
31100: LD_ADDR_VAR 0 1
31104: PUSH
31105: DOUBLE
31106: LD_INT 1
31108: DEC
31109: ST_TO_ADDR
31110: LD_INT 2
31112: PUSH
31113: FOR_TO
31114: IFFALSE 31241
// begin uc_side := your_side ;
31116: LD_ADDR_OWVAR 20
31120: PUSH
31121: LD_OWVAR 2
31125: ST_TO_ADDR
// uc_nation := nation_american ;
31126: LD_ADDR_OWVAR 21
31130: PUSH
31131: LD_INT 1
31133: ST_TO_ADDR
// vc_chassis := us_morphling ;
31134: LD_ADDR_OWVAR 37
31138: PUSH
31139: LD_INT 5
31141: ST_TO_ADDR
// vc_engine := engine_siberite ;
31142: LD_ADDR_OWVAR 39
31146: PUSH
31147: LD_INT 3
31149: ST_TO_ADDR
// vc_control := control_computer ;
31150: LD_ADDR_OWVAR 38
31154: PUSH
31155: LD_INT 3
31157: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31158: LD_ADDR_OWVAR 40
31162: PUSH
31163: LD_INT 10
31165: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31166: LD_VAR 0 2
31170: PUSH
31171: LD_INT 1
31173: ARRAY
31174: PPUSH
31175: CALL_OW 310
31179: NOT
31180: IFFALSE 31227
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31182: CALL_OW 45
31186: PPUSH
31187: LD_VAR 0 2
31191: PUSH
31192: LD_INT 1
31194: ARRAY
31195: PPUSH
31196: CALL_OW 250
31200: PPUSH
31201: LD_VAR 0 2
31205: PUSH
31206: LD_INT 1
31208: ARRAY
31209: PPUSH
31210: CALL_OW 251
31214: PPUSH
31215: LD_INT 12
31217: PPUSH
31218: LD_INT 1
31220: PPUSH
31221: CALL_OW 50
31225: GO 31239
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31227: CALL_OW 45
31231: PPUSH
31232: LD_INT 1
31234: PPUSH
31235: CALL_OW 51
// end ;
31239: GO 31113
31241: POP
31242: POP
// end ;
31243: PPOPN 2
31245: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31246: LD_EXP 52
31250: IFFALSE 31258
31252: PUSH
31253: LD_EXP 98
31257: AND
31258: IFFALSE 31480
31260: GO 31262
31262: DISABLE
31263: LD_INT 0
31265: PPUSH
31266: PPUSH
31267: PPUSH
31268: PPUSH
31269: PPUSH
31270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31271: LD_ADDR_VAR 0 6
31275: PUSH
31276: LD_INT 22
31278: PUSH
31279: LD_OWVAR 2
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 21
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 3
31300: PUSH
31301: LD_INT 23
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: PPUSH
31320: CALL_OW 69
31324: ST_TO_ADDR
// if not tmp then
31325: LD_VAR 0 6
31329: NOT
31330: IFFALSE 31334
// exit ;
31332: GO 31480
// s1 := rand ( 1 , 4 ) ;
31334: LD_ADDR_VAR 0 2
31338: PUSH
31339: LD_INT 1
31341: PPUSH
31342: LD_INT 4
31344: PPUSH
31345: CALL_OW 12
31349: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31350: LD_ADDR_VAR 0 4
31354: PUSH
31355: LD_VAR 0 6
31359: PUSH
31360: LD_INT 1
31362: ARRAY
31363: PPUSH
31364: LD_VAR 0 2
31368: PPUSH
31369: CALL_OW 259
31373: ST_TO_ADDR
// if s1 = 1 then
31374: LD_VAR 0 2
31378: PUSH
31379: LD_INT 1
31381: EQUAL
31382: IFFALSE 31402
// s2 := rand ( 2 , 4 ) else
31384: LD_ADDR_VAR 0 3
31388: PUSH
31389: LD_INT 2
31391: PPUSH
31392: LD_INT 4
31394: PPUSH
31395: CALL_OW 12
31399: ST_TO_ADDR
31400: GO 31410
// s2 := 1 ;
31402: LD_ADDR_VAR 0 3
31406: PUSH
31407: LD_INT 1
31409: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31410: LD_ADDR_VAR 0 5
31414: PUSH
31415: LD_VAR 0 6
31419: PUSH
31420: LD_INT 1
31422: ARRAY
31423: PPUSH
31424: LD_VAR 0 3
31428: PPUSH
31429: CALL_OW 259
31433: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31434: LD_VAR 0 6
31438: PUSH
31439: LD_INT 1
31441: ARRAY
31442: PPUSH
31443: LD_VAR 0 2
31447: PPUSH
31448: LD_VAR 0 5
31452: PPUSH
31453: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31457: LD_VAR 0 6
31461: PUSH
31462: LD_INT 1
31464: ARRAY
31465: PPUSH
31466: LD_VAR 0 3
31470: PPUSH
31471: LD_VAR 0 4
31475: PPUSH
31476: CALL_OW 237
// end ;
31480: PPOPN 6
31482: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31483: LD_EXP 52
31487: IFFALSE 31495
31489: PUSH
31490: LD_EXP 99
31494: AND
31495: IFFALSE 31574
31497: GO 31499
31499: DISABLE
31500: LD_INT 0
31502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31503: LD_ADDR_VAR 0 1
31507: PUSH
31508: LD_INT 22
31510: PUSH
31511: LD_OWVAR 2
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 30
31522: PUSH
31523: LD_INT 3
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PPUSH
31534: CALL_OW 69
31538: ST_TO_ADDR
// if not tmp then
31539: LD_VAR 0 1
31543: NOT
31544: IFFALSE 31548
// exit ;
31546: GO 31574
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31548: LD_VAR 0 1
31552: PUSH
31553: LD_INT 1
31555: PPUSH
31556: LD_VAR 0 1
31560: PPUSH
31561: CALL_OW 12
31565: ARRAY
31566: PPUSH
31567: LD_INT 1
31569: PPUSH
31570: CALL_OW 234
// end ;
31574: PPOPN 1
31576: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31577: LD_EXP 52
31581: IFFALSE 31589
31583: PUSH
31584: LD_EXP 100
31588: AND
31589: IFFALSE 31701
31591: GO 31593
31593: DISABLE
31594: LD_INT 0
31596: PPUSH
31597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31598: LD_ADDR_VAR 0 2
31602: PUSH
31603: LD_INT 22
31605: PUSH
31606: LD_OWVAR 2
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: LD_INT 30
31620: PUSH
31621: LD_INT 27
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 30
31630: PUSH
31631: LD_INT 26
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 30
31640: PUSH
31641: LD_INT 28
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PPUSH
31658: CALL_OW 69
31662: ST_TO_ADDR
// if not tmp then
31663: LD_VAR 0 2
31667: NOT
31668: IFFALSE 31672
// exit ;
31670: GO 31701
// for i in tmp do
31672: LD_ADDR_VAR 0 1
31676: PUSH
31677: LD_VAR 0 2
31681: PUSH
31682: FOR_IN
31683: IFFALSE 31699
// SetLives ( i , 1 ) ;
31685: LD_VAR 0 1
31689: PPUSH
31690: LD_INT 1
31692: PPUSH
31693: CALL_OW 234
31697: GO 31682
31699: POP
31700: POP
// end ;
31701: PPOPN 2
31703: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31704: LD_EXP 52
31708: IFFALSE 31716
31710: PUSH
31711: LD_EXP 101
31715: AND
31716: IFFALSE 32003
31718: GO 31720
31720: DISABLE
31721: LD_INT 0
31723: PPUSH
31724: PPUSH
31725: PPUSH
// begin i := rand ( 1 , 7 ) ;
31726: LD_ADDR_VAR 0 1
31730: PUSH
31731: LD_INT 1
31733: PPUSH
31734: LD_INT 7
31736: PPUSH
31737: CALL_OW 12
31741: ST_TO_ADDR
// case i of 1 :
31742: LD_VAR 0 1
31746: PUSH
31747: LD_INT 1
31749: DOUBLE
31750: EQUAL
31751: IFTRUE 31755
31753: GO 31765
31755: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31756: LD_STRING earthquake(getX(game), 0, 32)
31758: PPUSH
31759: CALL_OW 559
31763: GO 32003
31765: LD_INT 2
31767: DOUBLE
31768: EQUAL
31769: IFTRUE 31773
31771: GO 31787
31773: POP
// begin ToLua ( displayStucuk(); ) ;
31774: LD_STRING displayStucuk();
31776: PPUSH
31777: CALL_OW 559
// ResetFog ;
31781: CALL_OW 335
// end ; 3 :
31785: GO 32003
31787: LD_INT 3
31789: DOUBLE
31790: EQUAL
31791: IFTRUE 31795
31793: GO 31899
31795: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31796: LD_ADDR_VAR 0 2
31800: PUSH
31801: LD_INT 22
31803: PUSH
31804: LD_OWVAR 2
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 25
31815: PUSH
31816: LD_INT 1
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PPUSH
31827: CALL_OW 69
31831: ST_TO_ADDR
// if not tmp then
31832: LD_VAR 0 2
31836: NOT
31837: IFFALSE 31841
// exit ;
31839: GO 32003
// un := tmp [ rand ( 1 , tmp ) ] ;
31841: LD_ADDR_VAR 0 3
31845: PUSH
31846: LD_VAR 0 2
31850: PUSH
31851: LD_INT 1
31853: PPUSH
31854: LD_VAR 0 2
31858: PPUSH
31859: CALL_OW 12
31863: ARRAY
31864: ST_TO_ADDR
// if Crawls ( un ) then
31865: LD_VAR 0 3
31869: PPUSH
31870: CALL_OW 318
31874: IFFALSE 31885
// ComWalk ( un ) ;
31876: LD_VAR 0 3
31880: PPUSH
31881: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31885: LD_VAR 0 3
31889: PPUSH
31890: LD_INT 8
31892: PPUSH
31893: CALL_OW 336
// end ; 4 :
31897: GO 32003
31899: LD_INT 4
31901: DOUBLE
31902: EQUAL
31903: IFTRUE 31907
31905: GO 31981
31907: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31908: LD_ADDR_VAR 0 2
31912: PUSH
31913: LD_INT 22
31915: PUSH
31916: LD_OWVAR 2
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 30
31927: PUSH
31928: LD_INT 29
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PPUSH
31939: CALL_OW 69
31943: ST_TO_ADDR
// if not tmp then
31944: LD_VAR 0 2
31948: NOT
31949: IFFALSE 31953
// exit ;
31951: GO 32003
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31953: LD_VAR 0 2
31957: PUSH
31958: LD_INT 1
31960: ARRAY
31961: PPUSH
31962: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31966: LD_VAR 0 2
31970: PUSH
31971: LD_INT 1
31973: ARRAY
31974: PPUSH
31975: CALL_OW 65
// end ; 5 .. 7 :
31979: GO 32003
31981: LD_INT 5
31983: DOUBLE
31984: GREATEREQUAL
31985: IFFALSE 31993
31987: LD_INT 7
31989: DOUBLE
31990: LESSEQUAL
31991: IFTRUE 31995
31993: GO 32002
31995: POP
// StreamSibBomb ; end ;
31996: CALL 28184 0 0
32000: GO 32003
32002: POP
// end ;
32003: PPOPN 3
32005: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32006: LD_EXP 52
32010: IFFALSE 32018
32012: PUSH
32013: LD_EXP 102
32017: AND
32018: IFFALSE 32174
32020: GO 32022
32022: DISABLE
32023: LD_INT 0
32025: PPUSH
32026: PPUSH
32027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32028: LD_ADDR_VAR 0 2
32032: PUSH
32033: LD_INT 81
32035: PUSH
32036: LD_OWVAR 2
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 2
32047: PUSH
32048: LD_INT 21
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 21
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: LIST
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PPUSH
32077: CALL_OW 69
32081: ST_TO_ADDR
// if not tmp then
32082: LD_VAR 0 2
32086: NOT
32087: IFFALSE 32091
// exit ;
32089: GO 32174
// p := 0 ;
32091: LD_ADDR_VAR 0 3
32095: PUSH
32096: LD_INT 0
32098: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32099: LD_INT 35
32101: PPUSH
32102: CALL_OW 67
// p := p + 1 ;
32106: LD_ADDR_VAR 0 3
32110: PUSH
32111: LD_VAR 0 3
32115: PUSH
32116: LD_INT 1
32118: PLUS
32119: ST_TO_ADDR
// for i in tmp do
32120: LD_ADDR_VAR 0 1
32124: PUSH
32125: LD_VAR 0 2
32129: PUSH
32130: FOR_IN
32131: IFFALSE 32162
// if GetLives ( i ) < 1000 then
32133: LD_VAR 0 1
32137: PPUSH
32138: CALL_OW 256
32142: PUSH
32143: LD_INT 1000
32145: LESS
32146: IFFALSE 32160
// SetLives ( i , 1000 ) ;
32148: LD_VAR 0 1
32152: PPUSH
32153: LD_INT 1000
32155: PPUSH
32156: CALL_OW 234
32160: GO 32130
32162: POP
32163: POP
// until p > 20 ;
32164: LD_VAR 0 3
32168: PUSH
32169: LD_INT 20
32171: GREATER
32172: IFFALSE 32099
// end ;
32174: PPOPN 3
32176: END
// every 0 0$1 trigger StreamModeActive and sTime do
32177: LD_EXP 52
32181: IFFALSE 32189
32183: PUSH
32184: LD_EXP 103
32188: AND
32189: IFFALSE 32224
32191: GO 32193
32193: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32194: LD_INT 28
32196: PPUSH
32197: LD_OWVAR 2
32201: PPUSH
32202: LD_INT 2
32204: PPUSH
32205: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32209: LD_INT 30
32211: PPUSH
32212: LD_OWVAR 2
32216: PPUSH
32217: LD_INT 2
32219: PPUSH
32220: CALL_OW 322
// end ;
32224: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32225: LD_EXP 52
32229: IFFALSE 32237
32231: PUSH
32232: LD_EXP 104
32236: AND
32237: IFFALSE 32358
32239: GO 32241
32241: DISABLE
32242: LD_INT 0
32244: PPUSH
32245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32246: LD_ADDR_VAR 0 2
32250: PUSH
32251: LD_INT 22
32253: PUSH
32254: LD_OWVAR 2
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 21
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 3
32275: PUSH
32276: LD_INT 23
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: LIST
32294: PPUSH
32295: CALL_OW 69
32299: ST_TO_ADDR
// if not tmp then
32300: LD_VAR 0 2
32304: NOT
32305: IFFALSE 32309
// exit ;
32307: GO 32358
// for i in tmp do
32309: LD_ADDR_VAR 0 1
32313: PUSH
32314: LD_VAR 0 2
32318: PUSH
32319: FOR_IN
32320: IFFALSE 32356
// begin if Crawls ( i ) then
32322: LD_VAR 0 1
32326: PPUSH
32327: CALL_OW 318
32331: IFFALSE 32342
// ComWalk ( i ) ;
32333: LD_VAR 0 1
32337: PPUSH
32338: CALL_OW 138
// SetClass ( i , 2 ) ;
32342: LD_VAR 0 1
32346: PPUSH
32347: LD_INT 2
32349: PPUSH
32350: CALL_OW 336
// end ;
32354: GO 32319
32356: POP
32357: POP
// end ;
32358: PPOPN 2
32360: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32361: LD_EXP 52
32365: IFFALSE 32373
32367: PUSH
32368: LD_EXP 105
32372: AND
32373: IFFALSE 32663
32375: GO 32377
32377: DISABLE
32378: LD_INT 0
32380: PPUSH
32381: PPUSH
32382: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32383: LD_OWVAR 2
32387: PPUSH
32388: LD_INT 9
32390: PPUSH
32391: LD_INT 1
32393: PPUSH
32394: LD_INT 1
32396: PPUSH
32397: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32401: LD_INT 9
32403: PPUSH
32404: LD_OWVAR 2
32408: PPUSH
32409: CALL_OW 343
// uc_side := 9 ;
32413: LD_ADDR_OWVAR 20
32417: PUSH
32418: LD_INT 9
32420: ST_TO_ADDR
// uc_nation := 2 ;
32421: LD_ADDR_OWVAR 21
32425: PUSH
32426: LD_INT 2
32428: ST_TO_ADDR
// hc_name := Dark Warrior ;
32429: LD_ADDR_OWVAR 26
32433: PUSH
32434: LD_STRING Dark Warrior
32436: ST_TO_ADDR
// hc_gallery :=  ;
32437: LD_ADDR_OWVAR 33
32441: PUSH
32442: LD_STRING 
32444: ST_TO_ADDR
// hc_noskilllimit := true ;
32445: LD_ADDR_OWVAR 76
32449: PUSH
32450: LD_INT 1
32452: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32453: LD_ADDR_OWVAR 31
32457: PUSH
32458: LD_INT 30
32460: PUSH
32461: LD_INT 30
32463: PUSH
32464: LD_INT 30
32466: PUSH
32467: LD_INT 30
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: ST_TO_ADDR
// un := CreateHuman ;
32476: LD_ADDR_VAR 0 3
32480: PUSH
32481: CALL_OW 44
32485: ST_TO_ADDR
// hc_noskilllimit := false ;
32486: LD_ADDR_OWVAR 76
32490: PUSH
32491: LD_INT 0
32493: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32494: LD_VAR 0 3
32498: PPUSH
32499: LD_INT 1
32501: PPUSH
32502: CALL_OW 51
// ToLua ( playRanger() ) ;
32506: LD_STRING playRanger()
32508: PPUSH
32509: CALL_OW 559
// p := 0 ;
32513: LD_ADDR_VAR 0 2
32517: PUSH
32518: LD_INT 0
32520: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32521: LD_INT 35
32523: PPUSH
32524: CALL_OW 67
// p := p + 1 ;
32528: LD_ADDR_VAR 0 2
32532: PUSH
32533: LD_VAR 0 2
32537: PUSH
32538: LD_INT 1
32540: PLUS
32541: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32542: LD_VAR 0 3
32546: PPUSH
32547: CALL_OW 256
32551: PUSH
32552: LD_INT 1000
32554: LESS
32555: IFFALSE 32569
// SetLives ( un , 1000 ) ;
32557: LD_VAR 0 3
32561: PPUSH
32562: LD_INT 1000
32564: PPUSH
32565: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32569: LD_VAR 0 3
32573: PPUSH
32574: LD_INT 81
32576: PUSH
32577: LD_OWVAR 2
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 91
32588: PUSH
32589: LD_VAR 0 3
32593: PUSH
32594: LD_INT 30
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: LIST
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PPUSH
32606: CALL_OW 69
32610: PPUSH
32611: LD_VAR 0 3
32615: PPUSH
32616: CALL_OW 74
32620: PPUSH
32621: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32625: LD_VAR 0 2
32629: PUSH
32630: LD_INT 80
32632: GREATER
32633: IFTRUE 32646
32635: PUSH
32636: LD_VAR 0 3
32640: PPUSH
32641: CALL_OW 301
32645: OR
32646: IFFALSE 32521
// if un then
32648: LD_VAR 0 3
32652: IFFALSE 32663
// RemoveUnit ( un ) ;
32654: LD_VAR 0 3
32658: PPUSH
32659: CALL_OW 64
// end ;
32663: PPOPN 3
32665: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32666: LD_EXP 106
32670: IFFALSE 32786
32672: GO 32674
32674: DISABLE
32675: LD_INT 0
32677: PPUSH
32678: PPUSH
32679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32680: LD_ADDR_VAR 0 2
32684: PUSH
32685: LD_INT 81
32687: PUSH
32688: LD_OWVAR 2
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 21
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PPUSH
32711: CALL_OW 69
32715: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32716: LD_STRING playComputer()
32718: PPUSH
32719: CALL_OW 559
// if not tmp then
32723: LD_VAR 0 2
32727: NOT
32728: IFFALSE 32732
// exit ;
32730: GO 32786
// for i in tmp do
32732: LD_ADDR_VAR 0 1
32736: PUSH
32737: LD_VAR 0 2
32741: PUSH
32742: FOR_IN
32743: IFFALSE 32784
// for j := 1 to 4 do
32745: LD_ADDR_VAR 0 3
32749: PUSH
32750: DOUBLE
32751: LD_INT 1
32753: DEC
32754: ST_TO_ADDR
32755: LD_INT 4
32757: PUSH
32758: FOR_TO
32759: IFFALSE 32780
// SetSkill ( i , j , 10 ) ;
32761: LD_VAR 0 1
32765: PPUSH
32766: LD_VAR 0 3
32770: PPUSH
32771: LD_INT 10
32773: PPUSH
32774: CALL_OW 237
32778: GO 32758
32780: POP
32781: POP
32782: GO 32742
32784: POP
32785: POP
// end ;
32786: PPOPN 3
32788: END
// every 0 0$1 trigger s30 do var i , tmp ;
32789: LD_EXP 107
32793: IFFALSE 32862
32795: GO 32797
32797: DISABLE
32798: LD_INT 0
32800: PPUSH
32801: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32802: LD_ADDR_VAR 0 2
32806: PUSH
32807: LD_INT 22
32809: PUSH
32810: LD_OWVAR 2
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PPUSH
32819: CALL_OW 69
32823: ST_TO_ADDR
// if not tmp then
32824: LD_VAR 0 2
32828: NOT
32829: IFFALSE 32833
// exit ;
32831: GO 32862
// for i in tmp do
32833: LD_ADDR_VAR 0 1
32837: PUSH
32838: LD_VAR 0 2
32842: PUSH
32843: FOR_IN
32844: IFFALSE 32860
// SetLives ( i , 300 ) ;
32846: LD_VAR 0 1
32850: PPUSH
32851: LD_INT 300
32853: PPUSH
32854: CALL_OW 234
32858: GO 32843
32860: POP
32861: POP
// end ;
32862: PPOPN 2
32864: END
// every 0 0$1 trigger s60 do var i , tmp ;
32865: LD_EXP 108
32869: IFFALSE 32938
32871: GO 32873
32873: DISABLE
32874: LD_INT 0
32876: PPUSH
32877: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32878: LD_ADDR_VAR 0 2
32882: PUSH
32883: LD_INT 22
32885: PUSH
32886: LD_OWVAR 2
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PPUSH
32895: CALL_OW 69
32899: ST_TO_ADDR
// if not tmp then
32900: LD_VAR 0 2
32904: NOT
32905: IFFALSE 32909
// exit ;
32907: GO 32938
// for i in tmp do
32909: LD_ADDR_VAR 0 1
32913: PUSH
32914: LD_VAR 0 2
32918: PUSH
32919: FOR_IN
32920: IFFALSE 32936
// SetLives ( i , 600 ) ;
32922: LD_VAR 0 1
32926: PPUSH
32927: LD_INT 600
32929: PPUSH
32930: CALL_OW 234
32934: GO 32919
32936: POP
32937: POP
// end ;
32938: PPOPN 2
32940: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32941: LD_INT 0
32943: PPUSH
// case cmd of 301 :
32944: LD_VAR 0 1
32948: PUSH
32949: LD_INT 301
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32957
32955: GO 32989
32957: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32958: LD_VAR 0 6
32962: PPUSH
32963: LD_VAR 0 7
32967: PPUSH
32968: LD_VAR 0 8
32972: PPUSH
32973: LD_VAR 0 4
32977: PPUSH
32978: LD_VAR 0 5
32982: PPUSH
32983: CALL 34202 0 5
32987: GO 33110
32989: LD_INT 302
32991: DOUBLE
32992: EQUAL
32993: IFTRUE 32997
32995: GO 33034
32997: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32998: LD_VAR 0 6
33002: PPUSH
33003: LD_VAR 0 7
33007: PPUSH
33008: LD_VAR 0 8
33012: PPUSH
33013: LD_VAR 0 9
33017: PPUSH
33018: LD_VAR 0 4
33022: PPUSH
33023: LD_VAR 0 5
33027: PPUSH
33028: CALL 34293 0 6
33032: GO 33110
33034: LD_INT 303
33036: DOUBLE
33037: EQUAL
33038: IFTRUE 33042
33040: GO 33079
33042: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33043: LD_VAR 0 6
33047: PPUSH
33048: LD_VAR 0 7
33052: PPUSH
33053: LD_VAR 0 8
33057: PPUSH
33058: LD_VAR 0 9
33062: PPUSH
33063: LD_VAR 0 4
33067: PPUSH
33068: LD_VAR 0 5
33072: PPUSH
33073: CALL 33115 0 6
33077: GO 33110
33079: LD_INT 304
33081: DOUBLE
33082: EQUAL
33083: IFTRUE 33087
33085: GO 33109
33087: POP
// hHackTeleport ( unit , x , y ) ; end ;
33088: LD_VAR 0 2
33092: PPUSH
33093: LD_VAR 0 4
33097: PPUSH
33098: LD_VAR 0 5
33102: PPUSH
33103: CALL 34886 0 3
33107: GO 33110
33109: POP
// end ;
33110: LD_VAR 0 12
33114: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33115: LD_INT 0
33117: PPUSH
33118: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33119: LD_VAR 0 1
33123: PUSH
33124: LD_INT 1
33126: LESS
33127: IFTRUE 33139
33129: PUSH
33130: LD_VAR 0 1
33134: PUSH
33135: LD_INT 3
33137: GREATER
33138: OR
33139: IFTRUE 33157
33141: PUSH
33142: LD_VAR 0 5
33146: PPUSH
33147: LD_VAR 0 6
33151: PPUSH
33152: CALL_OW 428
33156: OR
33157: IFFALSE 33161
// exit ;
33159: GO 33889
// uc_side := your_side ;
33161: LD_ADDR_OWVAR 20
33165: PUSH
33166: LD_OWVAR 2
33170: ST_TO_ADDR
// uc_nation := nation ;
33171: LD_ADDR_OWVAR 21
33175: PUSH
33176: LD_VAR 0 1
33180: ST_TO_ADDR
// bc_level = 1 ;
33181: LD_ADDR_OWVAR 43
33185: PUSH
33186: LD_INT 1
33188: ST_TO_ADDR
// case btype of 1 :
33189: LD_VAR 0 2
33193: PUSH
33194: LD_INT 1
33196: DOUBLE
33197: EQUAL
33198: IFTRUE 33202
33200: GO 33213
33202: POP
// bc_type := b_depot ; 2 :
33203: LD_ADDR_OWVAR 42
33207: PUSH
33208: LD_INT 0
33210: ST_TO_ADDR
33211: GO 33833
33213: LD_INT 2
33215: DOUBLE
33216: EQUAL
33217: IFTRUE 33221
33219: GO 33232
33221: POP
// bc_type := b_warehouse ; 3 :
33222: LD_ADDR_OWVAR 42
33226: PUSH
33227: LD_INT 1
33229: ST_TO_ADDR
33230: GO 33833
33232: LD_INT 3
33234: DOUBLE
33235: EQUAL
33236: IFTRUE 33240
33238: GO 33251
33240: POP
// bc_type := b_lab ; 4 .. 9 :
33241: LD_ADDR_OWVAR 42
33245: PUSH
33246: LD_INT 6
33248: ST_TO_ADDR
33249: GO 33833
33251: LD_INT 4
33253: DOUBLE
33254: GREATEREQUAL
33255: IFFALSE 33263
33257: LD_INT 9
33259: DOUBLE
33260: LESSEQUAL
33261: IFTRUE 33265
33263: GO 33325
33265: POP
// begin bc_type := b_lab_half ;
33266: LD_ADDR_OWVAR 42
33270: PUSH
33271: LD_INT 7
33273: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33274: LD_ADDR_OWVAR 44
33278: PUSH
33279: LD_INT 10
33281: PUSH
33282: LD_INT 11
33284: PUSH
33285: LD_INT 12
33287: PUSH
33288: LD_INT 15
33290: PUSH
33291: LD_INT 14
33293: PUSH
33294: LD_INT 13
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: PUSH
33305: LD_VAR 0 2
33309: PUSH
33310: LD_INT 3
33312: MINUS
33313: ARRAY
33314: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33315: LD_ADDR_OWVAR 45
33319: PUSH
33320: LD_INT 9
33322: ST_TO_ADDR
// end ; 10 .. 13 :
33323: GO 33833
33325: LD_INT 10
33327: DOUBLE
33328: GREATEREQUAL
33329: IFFALSE 33337
33331: LD_INT 13
33333: DOUBLE
33334: LESSEQUAL
33335: IFTRUE 33339
33337: GO 33416
33339: POP
// begin bc_type := b_lab_full ;
33340: LD_ADDR_OWVAR 42
33344: PUSH
33345: LD_INT 8
33347: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33348: LD_ADDR_OWVAR 44
33352: PUSH
33353: LD_INT 10
33355: PUSH
33356: LD_INT 12
33358: PUSH
33359: LD_INT 14
33361: PUSH
33362: LD_INT 13
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: PUSH
33371: LD_VAR 0 2
33375: PUSH
33376: LD_INT 9
33378: MINUS
33379: ARRAY
33380: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33381: LD_ADDR_OWVAR 45
33385: PUSH
33386: LD_INT 11
33388: PUSH
33389: LD_INT 15
33391: PUSH
33392: LD_INT 12
33394: PUSH
33395: LD_INT 15
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: PUSH
33404: LD_VAR 0 2
33408: PUSH
33409: LD_INT 9
33411: MINUS
33412: ARRAY
33413: ST_TO_ADDR
// end ; 14 :
33414: GO 33833
33416: LD_INT 14
33418: DOUBLE
33419: EQUAL
33420: IFTRUE 33424
33422: GO 33435
33424: POP
// bc_type := b_workshop ; 15 :
33425: LD_ADDR_OWVAR 42
33429: PUSH
33430: LD_INT 2
33432: ST_TO_ADDR
33433: GO 33833
33435: LD_INT 15
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33443
33441: GO 33454
33443: POP
// bc_type := b_factory ; 16 :
33444: LD_ADDR_OWVAR 42
33448: PUSH
33449: LD_INT 3
33451: ST_TO_ADDR
33452: GO 33833
33454: LD_INT 16
33456: DOUBLE
33457: EQUAL
33458: IFTRUE 33462
33460: GO 33473
33462: POP
// bc_type := b_ext_gun ; 17 :
33463: LD_ADDR_OWVAR 42
33467: PUSH
33468: LD_INT 17
33470: ST_TO_ADDR
33471: GO 33833
33473: LD_INT 17
33475: DOUBLE
33476: EQUAL
33477: IFTRUE 33481
33479: GO 33509
33481: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33482: LD_ADDR_OWVAR 42
33486: PUSH
33487: LD_INT 19
33489: PUSH
33490: LD_INT 23
33492: PUSH
33493: LD_INT 19
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: LIST
33500: PUSH
33501: LD_VAR 0 1
33505: ARRAY
33506: ST_TO_ADDR
33507: GO 33833
33509: LD_INT 18
33511: DOUBLE
33512: EQUAL
33513: IFTRUE 33517
33515: GO 33528
33517: POP
// bc_type := b_ext_radar ; 19 :
33518: LD_ADDR_OWVAR 42
33522: PUSH
33523: LD_INT 20
33525: ST_TO_ADDR
33526: GO 33833
33528: LD_INT 19
33530: DOUBLE
33531: EQUAL
33532: IFTRUE 33536
33534: GO 33547
33536: POP
// bc_type := b_ext_radio ; 20 :
33537: LD_ADDR_OWVAR 42
33541: PUSH
33542: LD_INT 22
33544: ST_TO_ADDR
33545: GO 33833
33547: LD_INT 20
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33555
33553: GO 33566
33555: POP
// bc_type := b_ext_siberium ; 21 :
33556: LD_ADDR_OWVAR 42
33560: PUSH
33561: LD_INT 21
33563: ST_TO_ADDR
33564: GO 33833
33566: LD_INT 21
33568: DOUBLE
33569: EQUAL
33570: IFTRUE 33574
33572: GO 33585
33574: POP
// bc_type := b_ext_computer ; 22 :
33575: LD_ADDR_OWVAR 42
33579: PUSH
33580: LD_INT 24
33582: ST_TO_ADDR
33583: GO 33833
33585: LD_INT 22
33587: DOUBLE
33588: EQUAL
33589: IFTRUE 33593
33591: GO 33604
33593: POP
// bc_type := b_ext_track ; 23 :
33594: LD_ADDR_OWVAR 42
33598: PUSH
33599: LD_INT 16
33601: ST_TO_ADDR
33602: GO 33833
33604: LD_INT 23
33606: DOUBLE
33607: EQUAL
33608: IFTRUE 33612
33610: GO 33623
33612: POP
// bc_type := b_ext_laser ; 24 :
33613: LD_ADDR_OWVAR 42
33617: PUSH
33618: LD_INT 25
33620: ST_TO_ADDR
33621: GO 33833
33623: LD_INT 24
33625: DOUBLE
33626: EQUAL
33627: IFTRUE 33631
33629: GO 33642
33631: POP
// bc_type := b_control_tower ; 25 :
33632: LD_ADDR_OWVAR 42
33636: PUSH
33637: LD_INT 36
33639: ST_TO_ADDR
33640: GO 33833
33642: LD_INT 25
33644: DOUBLE
33645: EQUAL
33646: IFTRUE 33650
33648: GO 33661
33650: POP
// bc_type := b_breastwork ; 26 :
33651: LD_ADDR_OWVAR 42
33655: PUSH
33656: LD_INT 31
33658: ST_TO_ADDR
33659: GO 33833
33661: LD_INT 26
33663: DOUBLE
33664: EQUAL
33665: IFTRUE 33669
33667: GO 33680
33669: POP
// bc_type := b_bunker ; 27 :
33670: LD_ADDR_OWVAR 42
33674: PUSH
33675: LD_INT 32
33677: ST_TO_ADDR
33678: GO 33833
33680: LD_INT 27
33682: DOUBLE
33683: EQUAL
33684: IFTRUE 33688
33686: GO 33699
33688: POP
// bc_type := b_turret ; 28 :
33689: LD_ADDR_OWVAR 42
33693: PUSH
33694: LD_INT 33
33696: ST_TO_ADDR
33697: GO 33833
33699: LD_INT 28
33701: DOUBLE
33702: EQUAL
33703: IFTRUE 33707
33705: GO 33718
33707: POP
// bc_type := b_armoury ; 29 :
33708: LD_ADDR_OWVAR 42
33712: PUSH
33713: LD_INT 4
33715: ST_TO_ADDR
33716: GO 33833
33718: LD_INT 29
33720: DOUBLE
33721: EQUAL
33722: IFTRUE 33726
33724: GO 33737
33726: POP
// bc_type := b_barracks ; 30 :
33727: LD_ADDR_OWVAR 42
33731: PUSH
33732: LD_INT 5
33734: ST_TO_ADDR
33735: GO 33833
33737: LD_INT 30
33739: DOUBLE
33740: EQUAL
33741: IFTRUE 33745
33743: GO 33756
33745: POP
// bc_type := b_solar_power ; 31 :
33746: LD_ADDR_OWVAR 42
33750: PUSH
33751: LD_INT 27
33753: ST_TO_ADDR
33754: GO 33833
33756: LD_INT 31
33758: DOUBLE
33759: EQUAL
33760: IFTRUE 33764
33762: GO 33775
33764: POP
// bc_type := b_oil_power ; 32 :
33765: LD_ADDR_OWVAR 42
33769: PUSH
33770: LD_INT 26
33772: ST_TO_ADDR
33773: GO 33833
33775: LD_INT 32
33777: DOUBLE
33778: EQUAL
33779: IFTRUE 33783
33781: GO 33794
33783: POP
// bc_type := b_siberite_power ; 33 :
33784: LD_ADDR_OWVAR 42
33788: PUSH
33789: LD_INT 28
33791: ST_TO_ADDR
33792: GO 33833
33794: LD_INT 33
33796: DOUBLE
33797: EQUAL
33798: IFTRUE 33802
33800: GO 33813
33802: POP
// bc_type := b_oil_mine ; 34 :
33803: LD_ADDR_OWVAR 42
33807: PUSH
33808: LD_INT 29
33810: ST_TO_ADDR
33811: GO 33833
33813: LD_INT 34
33815: DOUBLE
33816: EQUAL
33817: IFTRUE 33821
33819: GO 33832
33821: POP
// bc_type := b_siberite_mine ; end ;
33822: LD_ADDR_OWVAR 42
33826: PUSH
33827: LD_INT 30
33829: ST_TO_ADDR
33830: GO 33833
33832: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33833: LD_ADDR_VAR 0 8
33837: PUSH
33838: LD_VAR 0 5
33842: PPUSH
33843: LD_VAR 0 6
33847: PPUSH
33848: LD_VAR 0 3
33852: PPUSH
33853: CALL_OW 47
33857: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33858: LD_OWVAR 42
33862: PUSH
33863: LD_INT 32
33865: PUSH
33866: LD_INT 33
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: IN
33873: IFFALSE 33889
// PlaceWeaponTurret ( b , weapon ) ;
33875: LD_VAR 0 8
33879: PPUSH
33880: LD_VAR 0 4
33884: PPUSH
33885: CALL_OW 431
// end ;
33889: LD_VAR 0 7
33893: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33894: LD_INT 0
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33900: LD_ADDR_VAR 0 4
33904: PUSH
33905: LD_INT 22
33907: PUSH
33908: LD_OWVAR 2
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 2
33919: PUSH
33920: LD_INT 30
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 30
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: LIST
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PPUSH
33949: CALL_OW 69
33953: ST_TO_ADDR
// if not tmp then
33954: LD_VAR 0 4
33958: NOT
33959: IFFALSE 33963
// exit ;
33961: GO 34022
// for i in tmp do
33963: LD_ADDR_VAR 0 2
33967: PUSH
33968: LD_VAR 0 4
33972: PUSH
33973: FOR_IN
33974: IFFALSE 34020
// for j = 1 to 3 do
33976: LD_ADDR_VAR 0 3
33980: PUSH
33981: DOUBLE
33982: LD_INT 1
33984: DEC
33985: ST_TO_ADDR
33986: LD_INT 3
33988: PUSH
33989: FOR_TO
33990: IFFALSE 34016
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33992: LD_VAR 0 2
33996: PPUSH
33997: CALL_OW 274
34001: PPUSH
34002: LD_VAR 0 3
34006: PPUSH
34007: LD_INT 99999
34009: PPUSH
34010: CALL_OW 277
34014: GO 33989
34016: POP
34017: POP
34018: GO 33973
34020: POP
34021: POP
// end ;
34022: LD_VAR 0 1
34026: RET
// export function hHackSetLevel10 ; var i , j ; begin
34027: LD_INT 0
34029: PPUSH
34030: PPUSH
34031: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34032: LD_ADDR_VAR 0 2
34036: PUSH
34037: LD_INT 21
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PPUSH
34047: CALL_OW 69
34051: PUSH
34052: FOR_IN
34053: IFFALSE 34105
// if IsSelected ( i ) then
34055: LD_VAR 0 2
34059: PPUSH
34060: CALL_OW 306
34064: IFFALSE 34103
// begin for j := 1 to 4 do
34066: LD_ADDR_VAR 0 3
34070: PUSH
34071: DOUBLE
34072: LD_INT 1
34074: DEC
34075: ST_TO_ADDR
34076: LD_INT 4
34078: PUSH
34079: FOR_TO
34080: IFFALSE 34101
// SetSkill ( i , j , 10 ) ;
34082: LD_VAR 0 2
34086: PPUSH
34087: LD_VAR 0 3
34091: PPUSH
34092: LD_INT 10
34094: PPUSH
34095: CALL_OW 237
34099: GO 34079
34101: POP
34102: POP
// end ;
34103: GO 34052
34105: POP
34106: POP
// end ;
34107: LD_VAR 0 1
34111: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34112: LD_INT 0
34114: PPUSH
34115: PPUSH
34116: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34117: LD_ADDR_VAR 0 2
34121: PUSH
34122: LD_INT 22
34124: PUSH
34125: LD_OWVAR 2
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 21
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PPUSH
34148: CALL_OW 69
34152: PUSH
34153: FOR_IN
34154: IFFALSE 34195
// begin for j := 1 to 4 do
34156: LD_ADDR_VAR 0 3
34160: PUSH
34161: DOUBLE
34162: LD_INT 1
34164: DEC
34165: ST_TO_ADDR
34166: LD_INT 4
34168: PUSH
34169: FOR_TO
34170: IFFALSE 34191
// SetSkill ( i , j , 10 ) ;
34172: LD_VAR 0 2
34176: PPUSH
34177: LD_VAR 0 3
34181: PPUSH
34182: LD_INT 10
34184: PPUSH
34185: CALL_OW 237
34189: GO 34169
34191: POP
34192: POP
// end ;
34193: GO 34153
34195: POP
34196: POP
// end ;
34197: LD_VAR 0 1
34201: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34202: LD_INT 0
34204: PPUSH
// uc_side := your_side ;
34205: LD_ADDR_OWVAR 20
34209: PUSH
34210: LD_OWVAR 2
34214: ST_TO_ADDR
// uc_nation := nation ;
34215: LD_ADDR_OWVAR 21
34219: PUSH
34220: LD_VAR 0 1
34224: ST_TO_ADDR
// InitHc ;
34225: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34229: LD_INT 0
34231: PPUSH
34232: LD_VAR 0 2
34236: PPUSH
34237: LD_VAR 0 3
34241: PPUSH
34242: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34246: LD_VAR 0 4
34250: PPUSH
34251: LD_VAR 0 5
34255: PPUSH
34256: CALL_OW 428
34260: PUSH
34261: LD_INT 0
34263: EQUAL
34264: IFFALSE 34288
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34266: CALL_OW 44
34270: PPUSH
34271: LD_VAR 0 4
34275: PPUSH
34276: LD_VAR 0 5
34280: PPUSH
34281: LD_INT 1
34283: PPUSH
34284: CALL_OW 48
// end ;
34288: LD_VAR 0 6
34292: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34293: LD_INT 0
34295: PPUSH
34296: PPUSH
// uc_side := your_side ;
34297: LD_ADDR_OWVAR 20
34301: PUSH
34302: LD_OWVAR 2
34306: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34307: LD_VAR 0 1
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: LD_INT 2
34317: PUSH
34318: LD_INT 3
34320: PUSH
34321: LD_INT 4
34323: PUSH
34324: LD_INT 5
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: IN
34334: IFFALSE 34346
// uc_nation := nation_american else
34336: LD_ADDR_OWVAR 21
34340: PUSH
34341: LD_INT 1
34343: ST_TO_ADDR
34344: GO 34389
// if chassis in [ 11 , 12 , 13 , 14 ] then
34346: LD_VAR 0 1
34350: PUSH
34351: LD_INT 11
34353: PUSH
34354: LD_INT 12
34356: PUSH
34357: LD_INT 13
34359: PUSH
34360: LD_INT 14
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: IN
34369: IFFALSE 34381
// uc_nation := nation_arabian else
34371: LD_ADDR_OWVAR 21
34375: PUSH
34376: LD_INT 2
34378: ST_TO_ADDR
34379: GO 34389
// uc_nation := nation_russian ;
34381: LD_ADDR_OWVAR 21
34385: PUSH
34386: LD_INT 3
34388: ST_TO_ADDR
// vc_chassis := chassis ;
34389: LD_ADDR_OWVAR 37
34393: PUSH
34394: LD_VAR 0 1
34398: ST_TO_ADDR
// vc_engine := engine ;
34399: LD_ADDR_OWVAR 39
34403: PUSH
34404: LD_VAR 0 2
34408: ST_TO_ADDR
// vc_control := control ;
34409: LD_ADDR_OWVAR 38
34413: PUSH
34414: LD_VAR 0 3
34418: ST_TO_ADDR
// vc_weapon := weapon ;
34419: LD_ADDR_OWVAR 40
34423: PUSH
34424: LD_VAR 0 4
34428: ST_TO_ADDR
// un := CreateVehicle ;
34429: LD_ADDR_VAR 0 8
34433: PUSH
34434: CALL_OW 45
34438: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34439: LD_VAR 0 8
34443: PPUSH
34444: LD_INT 0
34446: PPUSH
34447: LD_INT 5
34449: PPUSH
34450: CALL_OW 12
34454: PPUSH
34455: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34459: LD_VAR 0 8
34463: PPUSH
34464: LD_VAR 0 5
34468: PPUSH
34469: LD_VAR 0 6
34473: PPUSH
34474: LD_INT 1
34476: PPUSH
34477: CALL_OW 48
// end ;
34481: LD_VAR 0 7
34485: RET
// export hInvincible ; every 1 do
34486: GO 34488
34488: DISABLE
// hInvincible := [ ] ;
34489: LD_ADDR_EXP 109
34493: PUSH
34494: EMPTY
34495: ST_TO_ADDR
34496: END
// every 10 do var i ;
34497: GO 34499
34499: DISABLE
34500: LD_INT 0
34502: PPUSH
// begin enable ;
34503: ENABLE
// if not hInvincible then
34504: LD_EXP 109
34508: NOT
34509: IFFALSE 34513
// exit ;
34511: GO 34557
// for i in hInvincible do
34513: LD_ADDR_VAR 0 1
34517: PUSH
34518: LD_EXP 109
34522: PUSH
34523: FOR_IN
34524: IFFALSE 34555
// if GetLives ( i ) < 1000 then
34526: LD_VAR 0 1
34530: PPUSH
34531: CALL_OW 256
34535: PUSH
34536: LD_INT 1000
34538: LESS
34539: IFFALSE 34553
// SetLives ( i , 1000 ) ;
34541: LD_VAR 0 1
34545: PPUSH
34546: LD_INT 1000
34548: PPUSH
34549: CALL_OW 234
34553: GO 34523
34555: POP
34556: POP
// end ;
34557: PPOPN 1
34559: END
// export function hHackInvincible ; var i ; begin
34560: LD_INT 0
34562: PPUSH
34563: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34564: LD_ADDR_VAR 0 2
34568: PUSH
34569: LD_INT 2
34571: PUSH
34572: LD_INT 21
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 21
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: PPUSH
34597: CALL_OW 69
34601: PUSH
34602: FOR_IN
34603: IFFALSE 34664
// if IsSelected ( i ) then
34605: LD_VAR 0 2
34609: PPUSH
34610: CALL_OW 306
34614: IFFALSE 34662
// begin if i in hInvincible then
34616: LD_VAR 0 2
34620: PUSH
34621: LD_EXP 109
34625: IN
34626: IFFALSE 34646
// hInvincible := hInvincible diff i else
34628: LD_ADDR_EXP 109
34632: PUSH
34633: LD_EXP 109
34637: PUSH
34638: LD_VAR 0 2
34642: DIFF
34643: ST_TO_ADDR
34644: GO 34662
// hInvincible := hInvincible union i ;
34646: LD_ADDR_EXP 109
34650: PUSH
34651: LD_EXP 109
34655: PUSH
34656: LD_VAR 0 2
34660: UNION
34661: ST_TO_ADDR
// end ;
34662: GO 34602
34664: POP
34665: POP
// end ;
34666: LD_VAR 0 1
34670: RET
// export function hHackInvisible ; var i , j ; begin
34671: LD_INT 0
34673: PPUSH
34674: PPUSH
34675: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34676: LD_ADDR_VAR 0 2
34680: PUSH
34681: LD_INT 21
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PPUSH
34691: CALL_OW 69
34695: PUSH
34696: FOR_IN
34697: IFFALSE 34721
// if IsSelected ( i ) then
34699: LD_VAR 0 2
34703: PPUSH
34704: CALL_OW 306
34708: IFFALSE 34719
// ComForceInvisible ( i ) ;
34710: LD_VAR 0 2
34714: PPUSH
34715: CALL_OW 496
34719: GO 34696
34721: POP
34722: POP
// end ;
34723: LD_VAR 0 1
34727: RET
// export function hHackChangeYourSide ; begin
34728: LD_INT 0
34730: PPUSH
// if your_side = 8 then
34731: LD_OWVAR 2
34735: PUSH
34736: LD_INT 8
34738: EQUAL
34739: IFFALSE 34751
// your_side := 0 else
34741: LD_ADDR_OWVAR 2
34745: PUSH
34746: LD_INT 0
34748: ST_TO_ADDR
34749: GO 34765
// your_side := your_side + 1 ;
34751: LD_ADDR_OWVAR 2
34755: PUSH
34756: LD_OWVAR 2
34760: PUSH
34761: LD_INT 1
34763: PLUS
34764: ST_TO_ADDR
// end ;
34765: LD_VAR 0 1
34769: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34770: LD_INT 0
34772: PPUSH
34773: PPUSH
34774: PPUSH
// for i in all_units do
34775: LD_ADDR_VAR 0 2
34779: PUSH
34780: LD_OWVAR 3
34784: PUSH
34785: FOR_IN
34786: IFFALSE 34864
// if IsSelected ( i ) then
34788: LD_VAR 0 2
34792: PPUSH
34793: CALL_OW 306
34797: IFFALSE 34862
// begin j := GetSide ( i ) ;
34799: LD_ADDR_VAR 0 3
34803: PUSH
34804: LD_VAR 0 2
34808: PPUSH
34809: CALL_OW 255
34813: ST_TO_ADDR
// if j = 8 then
34814: LD_VAR 0 3
34818: PUSH
34819: LD_INT 8
34821: EQUAL
34822: IFFALSE 34834
// j := 0 else
34824: LD_ADDR_VAR 0 3
34828: PUSH
34829: LD_INT 0
34831: ST_TO_ADDR
34832: GO 34848
// j := j + 1 ;
34834: LD_ADDR_VAR 0 3
34838: PUSH
34839: LD_VAR 0 3
34843: PUSH
34844: LD_INT 1
34846: PLUS
34847: ST_TO_ADDR
// SetSide ( i , j ) ;
34848: LD_VAR 0 2
34852: PPUSH
34853: LD_VAR 0 3
34857: PPUSH
34858: CALL_OW 235
// end ;
34862: GO 34785
34864: POP
34865: POP
// end ;
34866: LD_VAR 0 1
34870: RET
// export function hHackFog ; begin
34871: LD_INT 0
34873: PPUSH
// FogOff ( true ) ;
34874: LD_INT 1
34876: PPUSH
34877: CALL_OW 344
// end ;
34881: LD_VAR 0 1
34885: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34886: LD_INT 0
34888: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34889: LD_VAR 0 1
34893: PPUSH
34894: LD_VAR 0 2
34898: PPUSH
34899: LD_VAR 0 3
34903: PPUSH
34904: LD_INT 1
34906: PPUSH
34907: LD_INT 1
34909: PPUSH
34910: CALL_OW 483
// CenterOnXY ( x , y ) ;
34914: LD_VAR 0 2
34918: PPUSH
34919: LD_VAR 0 3
34923: PPUSH
34924: CALL_OW 84
// end ;
34928: LD_VAR 0 4
34932: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34933: LD_INT 0
34935: PPUSH
34936: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34937: LD_VAR 0 1
34941: NOT
34942: IFTRUE 34961
34944: PUSH
34945: LD_VAR 0 2
34949: PPUSH
34950: LD_VAR 0 3
34954: PPUSH
34955: CALL_OW 488
34959: NOT
34960: OR
34961: IFTRUE 34996
34963: PUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: CALL_OW 266
34973: PUSH
34974: LD_INT 3
34976: NONEQUAL
34977: IFFALSE 34995
34979: PUSH
34980: LD_VAR 0 1
34984: PPUSH
34985: CALL_OW 247
34989: PUSH
34990: LD_INT 1
34992: EQUAL
34993: NOT
34994: AND
34995: OR
34996: IFFALSE 35000
// exit ;
34998: GO 35282
// if GetType ( factory ) = unit_human then
35000: LD_VAR 0 1
35004: PPUSH
35005: CALL_OW 247
35009: PUSH
35010: LD_INT 1
35012: EQUAL
35013: IFFALSE 35030
// factory := IsInUnit ( factory ) ;
35015: LD_ADDR_VAR 0 1
35019: PUSH
35020: LD_VAR 0 1
35024: PPUSH
35025: CALL_OW 310
35029: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35030: LD_VAR 0 1
35034: PPUSH
35035: CALL_OW 266
35039: PUSH
35040: LD_INT 3
35042: NONEQUAL
35043: IFFALSE 35047
// exit ;
35045: GO 35282
// for i := 1 to Count ( factoryWaypoints ) do
35047: LD_ADDR_VAR 0 5
35051: PUSH
35052: DOUBLE
35053: LD_INT 1
35055: DEC
35056: ST_TO_ADDR
35057: LD_EXP 110
35061: PPUSH
35062: CALL 44014 0 1
35066: PUSH
35067: FOR_TO
35068: IFFALSE 35230
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
35070: LD_VAR 0 2
35074: PPUSH
35075: LD_VAR 0 3
35079: PPUSH
35080: CALL_OW 428
35084: PUSH
35085: LD_EXP 110
35089: PUSH
35090: LD_VAR 0 5
35094: ARRAY
35095: PUSH
35096: LD_INT 2
35098: ARRAY
35099: EQUAL
35100: IFFALSE 35132
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35102: LD_ADDR_EXP 110
35106: PUSH
35107: LD_EXP 110
35111: PPUSH
35112: LD_VAR 0 5
35116: PPUSH
35117: CALL_OW 3
35121: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35122: CALL 35287 0 0
// exit ;
35126: POP
35127: POP
35128: GO 35282
// end else
35130: GO 35228
// if factory = factoryWaypoints [ i ] [ 2 ] then
35132: LD_VAR 0 1
35136: PUSH
35137: LD_EXP 110
35141: PUSH
35142: LD_VAR 0 5
35146: ARRAY
35147: PUSH
35148: LD_INT 2
35150: ARRAY
35151: EQUAL
35152: IFFALSE 35228
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35154: LD_ADDR_EXP 110
35158: PUSH
35159: LD_EXP 110
35163: PPUSH
35164: LD_VAR 0 5
35168: PPUSH
35169: CALL_OW 3
35173: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35174: LD_ADDR_EXP 110
35178: PUSH
35179: LD_EXP 110
35183: PPUSH
35184: LD_VAR 0 1
35188: PPUSH
35189: CALL_OW 255
35193: PUSH
35194: LD_VAR 0 1
35198: PUSH
35199: LD_VAR 0 2
35203: PUSH
35204: LD_VAR 0 3
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: PPUSH
35215: CALL 79946 0 2
35219: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35220: CALL 35287 0 0
// exit ;
35224: POP
35225: POP
35226: GO 35282
// end ; end ;
35228: GO 35067
35230: POP
35231: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35232: LD_ADDR_EXP 110
35236: PUSH
35237: LD_EXP 110
35241: PPUSH
35242: LD_VAR 0 1
35246: PPUSH
35247: CALL_OW 255
35251: PUSH
35252: LD_VAR 0 1
35256: PUSH
35257: LD_VAR 0 2
35261: PUSH
35262: LD_VAR 0 3
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: PPUSH
35273: CALL 79946 0 2
35277: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35278: CALL 35287 0 0
// end ;
35282: LD_VAR 0 4
35286: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35287: LD_INT 0
35289: PPUSH
35290: PPUSH
35291: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35292: LD_STRING resetFactoryWaypoint();
35294: PPUSH
35295: CALL_OW 559
// if factoryWaypoints then
35299: LD_EXP 110
35303: IFFALSE 35424
// begin list := factoryWaypoints ;
35305: LD_ADDR_VAR 0 3
35309: PUSH
35310: LD_EXP 110
35314: ST_TO_ADDR
// for i := 1 to list do
35315: LD_ADDR_VAR 0 2
35319: PUSH
35320: DOUBLE
35321: LD_INT 1
35323: DEC
35324: ST_TO_ADDR
35325: LD_VAR 0 3
35329: PUSH
35330: FOR_TO
35331: IFFALSE 35422
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35333: LD_STRING setFactoryWaypointXY(
35335: PUSH
35336: LD_VAR 0 3
35340: PUSH
35341: LD_VAR 0 2
35345: ARRAY
35346: PUSH
35347: LD_INT 1
35349: ARRAY
35350: STR
35351: PUSH
35352: LD_STRING ,
35354: STR
35355: PUSH
35356: LD_VAR 0 3
35360: PUSH
35361: LD_VAR 0 2
35365: ARRAY
35366: PUSH
35367: LD_INT 2
35369: ARRAY
35370: STR
35371: PUSH
35372: LD_STRING ,
35374: STR
35375: PUSH
35376: LD_VAR 0 3
35380: PUSH
35381: LD_VAR 0 2
35385: ARRAY
35386: PUSH
35387: LD_INT 3
35389: ARRAY
35390: STR
35391: PUSH
35392: LD_STRING ,
35394: STR
35395: PUSH
35396: LD_VAR 0 3
35400: PUSH
35401: LD_VAR 0 2
35405: ARRAY
35406: PUSH
35407: LD_INT 4
35409: ARRAY
35410: STR
35411: PUSH
35412: LD_STRING )
35414: STR
35415: PPUSH
35416: CALL_OW 559
35420: GO 35330
35422: POP
35423: POP
// end ; end ;
35424: LD_VAR 0 1
35428: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35429: LD_INT 0
35431: PPUSH
// if HexInfo ( x , y ) = warehouse then
35432: LD_VAR 0 2
35436: PPUSH
35437: LD_VAR 0 3
35441: PPUSH
35442: CALL_OW 428
35446: PUSH
35447: LD_VAR 0 1
35451: EQUAL
35452: IFFALSE 35479
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35454: LD_ADDR_EXP 112
35458: PUSH
35459: LD_EXP 112
35463: PPUSH
35464: LD_VAR 0 1
35468: PPUSH
35469: LD_INT 0
35471: PPUSH
35472: CALL_OW 1
35476: ST_TO_ADDR
35477: GO 35530
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35479: LD_ADDR_EXP 112
35483: PUSH
35484: LD_EXP 112
35488: PPUSH
35489: LD_VAR 0 1
35493: PPUSH
35494: LD_VAR 0 1
35498: PPUSH
35499: CALL_OW 255
35503: PUSH
35504: LD_VAR 0 1
35508: PUSH
35509: LD_VAR 0 2
35513: PUSH
35514: LD_VAR 0 3
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: PPUSH
35525: CALL_OW 1
35529: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35530: CALL 35539 0 0
// end ;
35534: LD_VAR 0 4
35538: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35539: LD_INT 0
35541: PPUSH
35542: PPUSH
35543: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35544: LD_STRING resetWarehouseGatheringPoints();
35546: PPUSH
35547: CALL_OW 559
// if warehouseGatheringPoints then
35551: LD_EXP 112
35555: IFFALSE 35681
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35557: LD_ADDR_VAR 0 3
35561: PUSH
35562: LD_EXP 112
35566: PPUSH
35567: CALL 83880 0 1
35571: ST_TO_ADDR
// for i := 1 to list do
35572: LD_ADDR_VAR 0 2
35576: PUSH
35577: DOUBLE
35578: LD_INT 1
35580: DEC
35581: ST_TO_ADDR
35582: LD_VAR 0 3
35586: PUSH
35587: FOR_TO
35588: IFFALSE 35679
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35590: LD_STRING setWarehouseGatheringPointXY(
35592: PUSH
35593: LD_VAR 0 3
35597: PUSH
35598: LD_VAR 0 2
35602: ARRAY
35603: PUSH
35604: LD_INT 1
35606: ARRAY
35607: STR
35608: PUSH
35609: LD_STRING ,
35611: STR
35612: PUSH
35613: LD_VAR 0 3
35617: PUSH
35618: LD_VAR 0 2
35622: ARRAY
35623: PUSH
35624: LD_INT 2
35626: ARRAY
35627: STR
35628: PUSH
35629: LD_STRING ,
35631: STR
35632: PUSH
35633: LD_VAR 0 3
35637: PUSH
35638: LD_VAR 0 2
35642: ARRAY
35643: PUSH
35644: LD_INT 3
35646: ARRAY
35647: STR
35648: PUSH
35649: LD_STRING ,
35651: STR
35652: PUSH
35653: LD_VAR 0 3
35657: PUSH
35658: LD_VAR 0 2
35662: ARRAY
35663: PUSH
35664: LD_INT 4
35666: ARRAY
35667: STR
35668: PUSH
35669: LD_STRING )
35671: STR
35672: PPUSH
35673: CALL_OW 559
35677: GO 35587
35679: POP
35680: POP
// end ; end ;
35681: LD_VAR 0 1
35685: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35686: LD_EXP 112
35690: IFFALSE 36385
35692: GO 35694
35694: DISABLE
35695: LD_INT 0
35697: PPUSH
35698: PPUSH
35699: PPUSH
35700: PPUSH
35701: PPUSH
35702: PPUSH
35703: PPUSH
35704: PPUSH
35705: PPUSH
// begin enable ;
35706: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35707: LD_ADDR_VAR 0 3
35711: PUSH
35712: LD_EXP 112
35716: PPUSH
35717: CALL 83880 0 1
35721: ST_TO_ADDR
// if not list then
35722: LD_VAR 0 3
35726: NOT
35727: IFFALSE 35731
// exit ;
35729: GO 36385
// for i := 1 to list do
35731: LD_ADDR_VAR 0 1
35735: PUSH
35736: DOUBLE
35737: LD_INT 1
35739: DEC
35740: ST_TO_ADDR
35741: LD_VAR 0 3
35745: PUSH
35746: FOR_TO
35747: IFFALSE 36383
// begin depot := list [ i ] [ 2 ] ;
35749: LD_ADDR_VAR 0 8
35753: PUSH
35754: LD_VAR 0 3
35758: PUSH
35759: LD_VAR 0 1
35763: ARRAY
35764: PUSH
35765: LD_INT 2
35767: ARRAY
35768: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35769: LD_ADDR_VAR 0 5
35773: PUSH
35774: LD_VAR 0 3
35778: PUSH
35779: LD_VAR 0 1
35783: ARRAY
35784: PUSH
35785: LD_INT 1
35787: ARRAY
35788: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35789: LD_VAR 0 8
35793: PPUSH
35794: CALL_OW 301
35798: IFTRUE 35817
35800: PUSH
35801: LD_VAR 0 5
35805: PUSH
35806: LD_VAR 0 8
35810: PPUSH
35811: CALL_OW 255
35815: NONEQUAL
35816: OR
35817: IFFALSE 35846
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35819: LD_ADDR_EXP 112
35823: PUSH
35824: LD_EXP 112
35828: PPUSH
35829: LD_VAR 0 8
35833: PPUSH
35834: LD_INT 0
35836: PPUSH
35837: CALL_OW 1
35841: ST_TO_ADDR
// exit ;
35842: POP
35843: POP
35844: GO 36385
// end ; x := list [ i ] [ 3 ] ;
35846: LD_ADDR_VAR 0 6
35850: PUSH
35851: LD_VAR 0 3
35855: PUSH
35856: LD_VAR 0 1
35860: ARRAY
35861: PUSH
35862: LD_INT 3
35864: ARRAY
35865: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35866: LD_ADDR_VAR 0 7
35870: PUSH
35871: LD_VAR 0 3
35875: PUSH
35876: LD_VAR 0 1
35880: ARRAY
35881: PUSH
35882: LD_INT 4
35884: ARRAY
35885: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35886: LD_ADDR_VAR 0 9
35890: PUSH
35891: LD_VAR 0 6
35895: PPUSH
35896: LD_VAR 0 7
35900: PPUSH
35901: LD_INT 16
35903: PPUSH
35904: CALL 82454 0 3
35908: ST_TO_ADDR
// if not cratesNearbyPoint then
35909: LD_VAR 0 9
35913: NOT
35914: IFFALSE 35920
// exit ;
35916: POP
35917: POP
35918: GO 36385
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35920: LD_ADDR_VAR 0 4
35924: PUSH
35925: LD_INT 22
35927: PUSH
35928: LD_VAR 0 5
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 3
35939: PUSH
35940: LD_INT 60
35942: PUSH
35943: EMPTY
35944: LIST
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 91
35952: PUSH
35953: LD_VAR 0 8
35957: PUSH
35958: LD_INT 6
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: LD_INT 25
35971: PUSH
35972: LD_INT 2
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 25
35981: PUSH
35982: LD_INT 16
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: PPUSH
36000: CALL_OW 69
36004: PUSH
36005: LD_VAR 0 8
36009: PPUSH
36010: CALL_OW 313
36014: PPUSH
36015: LD_INT 3
36017: PUSH
36018: LD_INT 60
36020: PUSH
36021: EMPTY
36022: LIST
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 2
36030: PUSH
36031: LD_INT 25
36033: PUSH
36034: LD_INT 2
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 25
36043: PUSH
36044: LD_INT 16
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PPUSH
36060: CALL_OW 72
36064: UNION
36065: ST_TO_ADDR
// if tmp then
36066: LD_VAR 0 4
36070: IFFALSE 36150
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36072: LD_ADDR_VAR 0 4
36076: PUSH
36077: LD_VAR 0 4
36081: PPUSH
36082: LD_INT 3
36084: PPUSH
36085: CALL 80261 0 2
36089: ST_TO_ADDR
// for j in tmp do
36090: LD_ADDR_VAR 0 2
36094: PUSH
36095: LD_VAR 0 4
36099: PUSH
36100: FOR_IN
36101: IFFALSE 36144
// begin if IsInUnit ( j ) then
36103: LD_VAR 0 2
36107: PPUSH
36108: CALL_OW 310
36112: IFFALSE 36123
// ComExit ( j ) ;
36114: LD_VAR 0 2
36118: PPUSH
36119: CALL 80344 0 1
// AddComCollect ( j , x , y ) ;
36123: LD_VAR 0 2
36127: PPUSH
36128: LD_VAR 0 6
36132: PPUSH
36133: LD_VAR 0 7
36137: PPUSH
36138: CALL_OW 177
// end ;
36142: GO 36100
36144: POP
36145: POP
// exit ;
36146: POP
36147: POP
36148: GO 36385
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36150: LD_ADDR_VAR 0 4
36154: PUSH
36155: LD_INT 22
36157: PUSH
36158: LD_VAR 0 5
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 91
36169: PUSH
36170: LD_VAR 0 8
36174: PUSH
36175: LD_INT 8
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: LD_INT 34
36188: PUSH
36189: LD_INT 12
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 34
36198: PUSH
36199: LD_INT 51
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 34
36208: PUSH
36209: LD_INT 32
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 34
36218: PUSH
36219: LD_INT 89
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: LIST
36237: PPUSH
36238: CALL_OW 69
36242: ST_TO_ADDR
// if tmp then
36243: LD_VAR 0 4
36247: IFFALSE 36381
// begin for j in tmp do
36249: LD_ADDR_VAR 0 2
36253: PUSH
36254: LD_VAR 0 4
36258: PUSH
36259: FOR_IN
36260: IFFALSE 36379
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36262: LD_VAR 0 2
36266: PPUSH
36267: CALL_OW 262
36271: PUSH
36272: LD_INT 3
36274: EQUAL
36275: IFTRUE 36292
36277: PUSH
36278: LD_VAR 0 2
36282: PPUSH
36283: CALL_OW 261
36287: PUSH
36288: LD_INT 20
36290: GREATER
36291: OR
36292: IFFALSE 36306
36294: PUSH
36295: LD_VAR 0 2
36299: PPUSH
36300: CALL_OW 314
36304: NOT
36305: AND
36306: IFFALSE 36336
36308: PUSH
36309: LD_VAR 0 2
36313: PPUSH
36314: CALL_OW 263
36318: PUSH
36319: LD_INT 1
36321: NONEQUAL
36322: IFTRUE 36335
36324: PUSH
36325: LD_VAR 0 2
36329: PPUSH
36330: CALL_OW 311
36334: OR
36335: AND
36336: IFFALSE 36377
// begin ComCollect ( j , x , y ) ;
36338: LD_VAR 0 2
36342: PPUSH
36343: LD_VAR 0 6
36347: PPUSH
36348: LD_VAR 0 7
36352: PPUSH
36353: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36357: LD_VAR 0 2
36361: PPUSH
36362: LD_VAR 0 8
36366: PPUSH
36367: CALL_OW 172
// exit ;
36371: POP
36372: POP
36373: POP
36374: POP
36375: GO 36385
// end ;
36377: GO 36259
36379: POP
36380: POP
// end ; end ;
36381: GO 35746
36383: POP
36384: POP
// end ; end_of_file
36385: PPOPN 9
36387: END
// export function SOS_UnitDestroyed ( un ) ; begin
36388: LD_INT 0
36390: PPUSH
// ComRadiation ( un ) ;
36391: LD_VAR 0 1
36395: PPUSH
36396: CALL 37477 0 1
// end ;
36400: LD_VAR 0 2
36404: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36405: LD_INT 0
36407: PPUSH
// ComRadiation ( un ) ;
36408: LD_VAR 0 1
36412: PPUSH
36413: CALL 37477 0 1
// end ;
36417: LD_VAR 0 2
36421: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36422: LD_INT 0
36424: PPUSH
// end ;
36425: LD_VAR 0 4
36429: RET
// export function SOS_Command ( cmd ) ; begin
36430: LD_INT 0
36432: PPUSH
// end ;
36433: LD_VAR 0 2
36437: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36438: LD_INT 0
36440: PPUSH
// end ;
36441: LD_VAR 0 6
36445: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
36446: LD_INT 0
36448: PPUSH
36449: PPUSH
36450: PPUSH
36451: PPUSH
// if not vehicle or not factory then
36452: LD_VAR 0 1
36456: NOT
36457: IFTRUE 36466
36459: PUSH
36460: LD_VAR 0 2
36464: NOT
36465: OR
36466: IFFALSE 36470
// exit ;
36468: GO 37052
// if not factoryWaypoints then
36470: LD_EXP 110
36474: NOT
36475: IFFALSE 36479
// exit ;
36477: GO 37052
// for i := 1 to Count ( factoryWaypoints ) do
36479: LD_ADDR_VAR 0 4
36483: PUSH
36484: DOUBLE
36485: LD_INT 1
36487: DEC
36488: ST_TO_ADDR
36489: LD_EXP 110
36493: PPUSH
36494: CALL 44014 0 1
36498: PUSH
36499: FOR_TO
36500: IFFALSE 37050
// if factoryWaypoints [ i ] [ 2 ] = factory then
36502: LD_EXP 110
36506: PUSH
36507: LD_VAR 0 4
36511: ARRAY
36512: PUSH
36513: LD_INT 2
36515: ARRAY
36516: PUSH
36517: LD_VAR 0 2
36521: EQUAL
36522: IFFALSE 37048
// begin if GetControl ( vehicle ) = control_manual then
36524: LD_VAR 0 1
36528: PPUSH
36529: CALL_OW 263
36533: PUSH
36534: LD_INT 1
36536: EQUAL
36537: IFFALSE 36901
// begin driver := IsDrivenBy ( vehicle ) ;
36539: LD_ADDR_VAR 0 5
36543: PUSH
36544: LD_VAR 0 1
36548: PPUSH
36549: CALL_OW 311
36553: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36554: LD_VAR 0 5
36558: PUSH
36559: LD_EXP 111
36563: IN
36564: IFTRUE 36578
36566: PUSH
36567: LD_VAR 0 1
36571: PUSH
36572: LD_EXP 111
36576: IN
36577: OR
36578: IFFALSE 36584
// exit ;
36580: POP
36581: POP
36582: GO 37052
// if not HasTask ( driver ) then
36584: LD_VAR 0 5
36588: PPUSH
36589: CALL_OW 314
36593: NOT
36594: IFFALSE 36899
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36596: LD_ADDR_EXP 111
36600: PUSH
36601: LD_EXP 111
36605: PPUSH
36606: LD_VAR 0 5
36610: PPUSH
36611: CALL 79946 0 2
36615: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36616: LD_ADDR_EXP 111
36620: PUSH
36621: LD_EXP 111
36625: PPUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: CALL 79946 0 2
36635: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36636: LD_ADDR_VAR 0 6
36640: PUSH
36641: LD_EXP 110
36645: PUSH
36646: LD_VAR 0 4
36650: ARRAY
36651: PUSH
36652: LD_INT 3
36654: ARRAY
36655: PPUSH
36656: LD_EXP 110
36660: PUSH
36661: LD_VAR 0 4
36665: ARRAY
36666: PUSH
36667: LD_INT 4
36669: ARRAY
36670: PPUSH
36671: CALL_OW 428
36675: ST_TO_ADDR
// if hex then
36676: LD_VAR 0 6
36680: IFFALSE 36698
// ComMoveUnit ( driver , hex ) else
36682: LD_VAR 0 5
36686: PPUSH
36687: LD_VAR 0 6
36691: PPUSH
36692: CALL_OW 112
36696: GO 36782
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36698: LD_VAR 0 1
36702: PPUSH
36703: LD_EXP 110
36707: PUSH
36708: LD_VAR 0 4
36712: ARRAY
36713: PUSH
36714: LD_INT 3
36716: ARRAY
36717: PPUSH
36718: LD_EXP 110
36722: PUSH
36723: LD_VAR 0 4
36727: ARRAY
36728: PUSH
36729: LD_INT 4
36731: ARRAY
36732: PPUSH
36733: CALL_OW 297
36737: PUSH
36738: LD_INT 0
36740: GREATER
36741: IFFALSE 36782
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36743: LD_VAR 0 5
36747: PPUSH
36748: LD_EXP 110
36752: PUSH
36753: LD_VAR 0 4
36757: ARRAY
36758: PUSH
36759: LD_INT 3
36761: ARRAY
36762: PPUSH
36763: LD_EXP 110
36767: PUSH
36768: LD_VAR 0 4
36772: ARRAY
36773: PUSH
36774: LD_INT 4
36776: ARRAY
36777: PPUSH
36778: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36782: LD_VAR 0 5
36786: PPUSH
36787: CALL_OW 181
// if Multiplayer then
36791: LD_OWVAR 4
36795: IFFALSE 36844
// begin repeat wait ( 10 ) ;
36797: LD_INT 10
36799: PPUSH
36800: CALL_OW 67
// until not IsInUnit ( driver ) ;
36804: LD_VAR 0 5
36808: PPUSH
36809: CALL_OW 310
36813: NOT
36814: IFFALSE 36797
// if not HasTask ( driver ) then
36816: LD_VAR 0 5
36820: PPUSH
36821: CALL_OW 314
36825: NOT
36826: IFFALSE 36842
// ComEnterUnit ( driver , factory ) ;
36828: LD_VAR 0 5
36832: PPUSH
36833: LD_VAR 0 2
36837: PPUSH
36838: CALL_OW 120
// end else
36842: GO 36858
// AddComEnterUnit ( driver , factory ) ;
36844: LD_VAR 0 5
36848: PPUSH
36849: LD_VAR 0 2
36853: PPUSH
36854: CALL_OW 180
// wait ( 0 0$1 ) ;
36858: LD_INT 35
36860: PPUSH
36861: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36865: LD_ADDR_EXP 111
36869: PUSH
36870: LD_EXP 111
36874: PUSH
36875: LD_VAR 0 5
36879: DIFF
36880: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36881: LD_ADDR_EXP 111
36885: PUSH
36886: LD_EXP 111
36890: PUSH
36891: LD_VAR 0 1
36895: DIFF
36896: ST_TO_ADDR
// break ;
36897: GO 37050
// end ; end else
36899: GO 37048
// if GetControl ( vehicle ) = control_remote then
36901: LD_VAR 0 1
36905: PPUSH
36906: CALL_OW 263
36910: PUSH
36911: LD_INT 2
36913: EQUAL
36914: IFFALSE 37000
// begin wait ( 0 0$2 ) ;
36916: LD_INT 70
36918: PPUSH
36919: CALL_OW 67
// repeat wait ( 10 ) ;
36923: LD_INT 10
36925: PPUSH
36926: CALL_OW 67
// Connect ( vehicle ) ;
36930: LD_VAR 0 1
36934: PPUSH
36935: CALL 50258 0 1
// until IsControledBy ( vehicle ) ;
36939: LD_VAR 0 1
36943: PPUSH
36944: CALL_OW 312
36948: IFFALSE 36923
// wait ( 10 ) ;
36950: LD_INT 10
36952: PPUSH
36953: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36957: LD_VAR 0 1
36961: PPUSH
36962: LD_EXP 110
36966: PUSH
36967: LD_VAR 0 4
36971: ARRAY
36972: PUSH
36973: LD_INT 3
36975: ARRAY
36976: PPUSH
36977: LD_EXP 110
36981: PUSH
36982: LD_VAR 0 4
36986: ARRAY
36987: PUSH
36988: LD_INT 4
36990: ARRAY
36991: PPUSH
36992: CALL_OW 111
// break ;
36996: GO 37050
// end else
36998: GO 37048
// begin wait ( 0 0$3 ) ;
37000: LD_INT 105
37002: PPUSH
37003: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37007: LD_VAR 0 1
37011: PPUSH
37012: LD_EXP 110
37016: PUSH
37017: LD_VAR 0 4
37021: ARRAY
37022: PUSH
37023: LD_INT 3
37025: ARRAY
37026: PPUSH
37027: LD_EXP 110
37031: PUSH
37032: LD_VAR 0 4
37036: ARRAY
37037: PUSH
37038: LD_INT 4
37040: ARRAY
37041: PPUSH
37042: CALL_OW 111
// break ;
37046: GO 37050
// end ; end ;
37048: GO 36499
37050: POP
37051: POP
// end ;
37052: LD_VAR 0 3
37056: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37057: LD_INT 0
37059: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37060: LD_VAR 0 1
37064: PUSH
37065: LD_INT 250
37067: EQUAL
37068: IFFALSE 37085
37070: PUSH
37071: LD_VAR 0 2
37075: PPUSH
37076: CALL_OW 264
37080: PUSH
37081: LD_INT 81
37083: EQUAL
37084: AND
37085: IFFALSE 37106
// MinerPlaceMine ( unit , x , y ) ;
37087: LD_VAR 0 2
37091: PPUSH
37092: LD_VAR 0 4
37096: PPUSH
37097: LD_VAR 0 5
37101: PPUSH
37102: CALL 40238 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37106: LD_VAR 0 1
37110: PUSH
37111: LD_INT 251
37113: EQUAL
37114: IFFALSE 37131
37116: PUSH
37117: LD_VAR 0 2
37121: PPUSH
37122: CALL_OW 264
37126: PUSH
37127: LD_INT 81
37129: EQUAL
37130: AND
37131: IFFALSE 37152
// MinerDetonateMine ( unit , x , y ) ;
37133: LD_VAR 0 2
37137: PPUSH
37138: LD_VAR 0 4
37142: PPUSH
37143: LD_VAR 0 5
37147: PPUSH
37148: CALL 40517 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37152: LD_VAR 0 1
37156: PUSH
37157: LD_INT 252
37159: EQUAL
37160: IFFALSE 37177
37162: PUSH
37163: LD_VAR 0 2
37167: PPUSH
37168: CALL_OW 264
37172: PUSH
37173: LD_INT 81
37175: EQUAL
37176: AND
37177: IFFALSE 37198
// MinerCreateMinefield ( unit , x , y ) ;
37179: LD_VAR 0 2
37183: PPUSH
37184: LD_VAR 0 4
37188: PPUSH
37189: LD_VAR 0 5
37193: PPUSH
37194: CALL 40936 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37198: LD_VAR 0 1
37202: PUSH
37203: LD_INT 253
37205: EQUAL
37206: IFFALSE 37223
37208: PUSH
37209: LD_VAR 0 2
37213: PPUSH
37214: CALL_OW 257
37218: PUSH
37219: LD_INT 5
37221: EQUAL
37222: AND
37223: IFFALSE 37244
// ComBinocular ( unit , x , y ) ;
37225: LD_VAR 0 2
37229: PPUSH
37230: LD_VAR 0 4
37234: PPUSH
37235: LD_VAR 0 5
37239: PPUSH
37240: CALL 41311 0 3
// if selectedUnit then
37244: LD_VAR 0 3
37248: IFFALSE 37308
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37250: LD_VAR 0 1
37254: PUSH
37255: LD_INT 254
37257: EQUAL
37258: IFFALSE 37275
37260: PUSH
37261: LD_VAR 0 2
37265: PPUSH
37266: CALL_OW 264
37270: PUSH
37271: LD_INT 99
37273: EQUAL
37274: AND
37275: IFFALSE 37292
37277: PUSH
37278: LD_VAR 0 3
37282: PPUSH
37283: CALL_OW 263
37287: PUSH
37288: LD_INT 3
37290: EQUAL
37291: AND
37292: IFFALSE 37308
// HackDestroyVehicle ( unit , selectedUnit ) ;
37294: LD_VAR 0 2
37298: PPUSH
37299: LD_VAR 0 3
37303: PPUSH
37304: CALL 39598 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37308: LD_VAR 0 1
37312: PUSH
37313: LD_INT 255
37315: EQUAL
37316: IFFALSE 37340
37318: PUSH
37319: LD_VAR 0 2
37323: PPUSH
37324: CALL_OW 264
37328: PUSH
37329: LD_INT 14
37331: PUSH
37332: LD_INT 53
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: IN
37339: AND
37340: IFFALSE 37358
37342: PUSH
37343: LD_VAR 0 4
37347: PPUSH
37348: LD_VAR 0 5
37352: PPUSH
37353: CALL_OW 488
37357: AND
37358: IFFALSE 37382
// CutTreeXYR ( unit , x , y , 12 ) ;
37360: LD_VAR 0 2
37364: PPUSH
37365: LD_VAR 0 4
37369: PPUSH
37370: LD_VAR 0 5
37374: PPUSH
37375: LD_INT 12
37377: PPUSH
37378: CALL 37573 0 4
// if cmd = 256 then
37382: LD_VAR 0 1
37386: PUSH
37387: LD_INT 256
37389: EQUAL
37390: IFFALSE 37411
// SetFactoryWaypoint ( unit , x , y ) ;
37392: LD_VAR 0 2
37396: PPUSH
37397: LD_VAR 0 4
37401: PPUSH
37402: LD_VAR 0 5
37406: PPUSH
37407: CALL 34933 0 3
// if cmd = 257 then
37411: LD_VAR 0 1
37415: PUSH
37416: LD_INT 257
37418: EQUAL
37419: IFFALSE 37440
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37421: LD_VAR 0 2
37425: PPUSH
37426: LD_VAR 0 4
37430: PPUSH
37431: LD_VAR 0 5
37435: PPUSH
37436: CALL 35429 0 3
// if cmd = 258 then
37440: LD_VAR 0 1
37444: PUSH
37445: LD_INT 258
37447: EQUAL
37448: IFFALSE 37472
// BurnTreeXYR ( unit , x , y , 8 ) ;
37450: LD_VAR 0 2
37454: PPUSH
37455: LD_VAR 0 4
37459: PPUSH
37460: LD_VAR 0 5
37464: PPUSH
37465: LD_INT 8
37467: PPUSH
37468: CALL 37973 0 4
// end ;
37472: LD_VAR 0 6
37476: RET
// export function ComRadiation ( un ) ; var eff ; begin
37477: LD_INT 0
37479: PPUSH
37480: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37481: LD_VAR 0 1
37485: PPUSH
37486: CALL_OW 264
37490: PUSH
37491: LD_INT 91
37493: NONEQUAL
37494: IFFALSE 37498
// exit ;
37496: GO 37568
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37498: LD_INT 68
37500: PPUSH
37501: LD_VAR 0 1
37505: PPUSH
37506: CALL_OW 255
37510: PPUSH
37511: CALL_OW 321
37515: PUSH
37516: LD_INT 2
37518: EQUAL
37519: IFFALSE 37531
// eff := 50 else
37521: LD_ADDR_VAR 0 3
37525: PUSH
37526: LD_INT 50
37528: ST_TO_ADDR
37529: GO 37539
// eff := 25 ;
37531: LD_ADDR_VAR 0 3
37535: PUSH
37536: LD_INT 25
37538: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37539: LD_VAR 0 1
37543: PPUSH
37544: CALL_OW 250
37548: PPUSH
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 251
37558: PPUSH
37559: LD_VAR 0 3
37563: PPUSH
37564: CALL_OW 495
// end ;
37568: LD_VAR 0 2
37572: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37573: LD_INT 0
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
37579: PPUSH
37580: PPUSH
37581: PPUSH
37582: PPUSH
37583: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37584: LD_VAR 0 1
37588: PPUSH
37589: CALL_OW 302
37593: NOT
37594: IFTRUE 37613
37596: PUSH
37597: LD_VAR 0 2
37601: PPUSH
37602: LD_VAR 0 3
37606: PPUSH
37607: CALL_OW 488
37611: NOT
37612: OR
37613: IFTRUE 37622
37615: PUSH
37616: LD_VAR 0 4
37620: NOT
37621: OR
37622: IFFALSE 37626
// exit ;
37624: GO 37968
// list := [ ] ;
37626: LD_ADDR_VAR 0 13
37630: PUSH
37631: EMPTY
37632: ST_TO_ADDR
// if x - r < 0 then
37633: LD_VAR 0 2
37637: PUSH
37638: LD_VAR 0 4
37642: MINUS
37643: PUSH
37644: LD_INT 0
37646: LESS
37647: IFFALSE 37659
// min_x := 0 else
37649: LD_ADDR_VAR 0 7
37653: PUSH
37654: LD_INT 0
37656: ST_TO_ADDR
37657: GO 37675
// min_x := x - r ;
37659: LD_ADDR_VAR 0 7
37663: PUSH
37664: LD_VAR 0 2
37668: PUSH
37669: LD_VAR 0 4
37673: MINUS
37674: ST_TO_ADDR
// if y - r < 0 then
37675: LD_VAR 0 3
37679: PUSH
37680: LD_VAR 0 4
37684: MINUS
37685: PUSH
37686: LD_INT 0
37688: LESS
37689: IFFALSE 37701
// min_y := 0 else
37691: LD_ADDR_VAR 0 8
37695: PUSH
37696: LD_INT 0
37698: ST_TO_ADDR
37699: GO 37717
// min_y := y - r ;
37701: LD_ADDR_VAR 0 8
37705: PUSH
37706: LD_VAR 0 3
37710: PUSH
37711: LD_VAR 0 4
37715: MINUS
37716: ST_TO_ADDR
// max_x := x + r ;
37717: LD_ADDR_VAR 0 9
37721: PUSH
37722: LD_VAR 0 2
37726: PUSH
37727: LD_VAR 0 4
37731: PLUS
37732: ST_TO_ADDR
// max_y := y + r ;
37733: LD_ADDR_VAR 0 10
37737: PUSH
37738: LD_VAR 0 3
37742: PUSH
37743: LD_VAR 0 4
37747: PLUS
37748: ST_TO_ADDR
// for _x = min_x to max_x do
37749: LD_ADDR_VAR 0 11
37753: PUSH
37754: DOUBLE
37755: LD_VAR 0 7
37759: DEC
37760: ST_TO_ADDR
37761: LD_VAR 0 9
37765: PUSH
37766: FOR_TO
37767: IFFALSE 37886
// for _y = min_y to max_y do
37769: LD_ADDR_VAR 0 12
37773: PUSH
37774: DOUBLE
37775: LD_VAR 0 8
37779: DEC
37780: ST_TO_ADDR
37781: LD_VAR 0 10
37785: PUSH
37786: FOR_TO
37787: IFFALSE 37882
// begin if not ValidHex ( _x , _y ) then
37789: LD_VAR 0 11
37793: PPUSH
37794: LD_VAR 0 12
37798: PPUSH
37799: CALL_OW 488
37803: NOT
37804: IFFALSE 37808
// continue ;
37806: GO 37786
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37808: LD_VAR 0 11
37812: PPUSH
37813: LD_VAR 0 12
37817: PPUSH
37818: CALL_OW 351
37822: IFFALSE 37840
37824: PUSH
37825: LD_VAR 0 11
37829: PPUSH
37830: LD_VAR 0 12
37834: PPUSH
37835: CALL_OW 554
37839: AND
37840: IFFALSE 37880
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37842: LD_ADDR_VAR 0 13
37846: PUSH
37847: LD_VAR 0 13
37851: PPUSH
37852: LD_VAR 0 13
37856: PUSH
37857: LD_INT 1
37859: PLUS
37860: PPUSH
37861: LD_VAR 0 11
37865: PUSH
37866: LD_VAR 0 12
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PPUSH
37875: CALL_OW 2
37879: ST_TO_ADDR
// end ;
37880: GO 37786
37882: POP
37883: POP
37884: GO 37766
37886: POP
37887: POP
// if not list then
37888: LD_VAR 0 13
37892: NOT
37893: IFFALSE 37897
// exit ;
37895: GO 37968
// for i in list do
37897: LD_ADDR_VAR 0 6
37901: PUSH
37902: LD_VAR 0 13
37906: PUSH
37907: FOR_IN
37908: IFFALSE 37966
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37910: LD_VAR 0 1
37914: PPUSH
37915: LD_STRING M
37917: PUSH
37918: LD_VAR 0 6
37922: PUSH
37923: LD_INT 1
37925: ARRAY
37926: PUSH
37927: LD_VAR 0 6
37931: PUSH
37932: LD_INT 2
37934: ARRAY
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: PUSH
37957: EMPTY
37958: LIST
37959: PPUSH
37960: CALL_OW 447
37964: GO 37907
37966: POP
37967: POP
// end ;
37968: LD_VAR 0 5
37972: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37973: LD_INT 0
37975: PPUSH
37976: PPUSH
37977: PPUSH
37978: PPUSH
37979: PPUSH
37980: PPUSH
37981: PPUSH
37982: PPUSH
37983: PPUSH
37984: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL_OW 302
37994: NOT
37995: IFTRUE 38014
37997: PUSH
37998: LD_VAR 0 2
38002: PPUSH
38003: LD_VAR 0 3
38007: PPUSH
38008: CALL_OW 488
38012: NOT
38013: OR
38014: IFTRUE 38023
38016: PUSH
38017: LD_VAR 0 4
38021: NOT
38022: OR
38023: IFFALSE 38027
// exit ;
38025: GO 38544
// list := [ ] ;
38027: LD_ADDR_VAR 0 13
38031: PUSH
38032: EMPTY
38033: ST_TO_ADDR
// if x - r < 0 then
38034: LD_VAR 0 2
38038: PUSH
38039: LD_VAR 0 4
38043: MINUS
38044: PUSH
38045: LD_INT 0
38047: LESS
38048: IFFALSE 38060
// min_x := 0 else
38050: LD_ADDR_VAR 0 7
38054: PUSH
38055: LD_INT 0
38057: ST_TO_ADDR
38058: GO 38076
// min_x := x - r ;
38060: LD_ADDR_VAR 0 7
38064: PUSH
38065: LD_VAR 0 2
38069: PUSH
38070: LD_VAR 0 4
38074: MINUS
38075: ST_TO_ADDR
// if y - r < 0 then
38076: LD_VAR 0 3
38080: PUSH
38081: LD_VAR 0 4
38085: MINUS
38086: PUSH
38087: LD_INT 0
38089: LESS
38090: IFFALSE 38102
// min_y := 0 else
38092: LD_ADDR_VAR 0 8
38096: PUSH
38097: LD_INT 0
38099: ST_TO_ADDR
38100: GO 38118
// min_y := y - r ;
38102: LD_ADDR_VAR 0 8
38106: PUSH
38107: LD_VAR 0 3
38111: PUSH
38112: LD_VAR 0 4
38116: MINUS
38117: ST_TO_ADDR
// max_x := x + r ;
38118: LD_ADDR_VAR 0 9
38122: PUSH
38123: LD_VAR 0 2
38127: PUSH
38128: LD_VAR 0 4
38132: PLUS
38133: ST_TO_ADDR
// max_y := y + r ;
38134: LD_ADDR_VAR 0 10
38138: PUSH
38139: LD_VAR 0 3
38143: PUSH
38144: LD_VAR 0 4
38148: PLUS
38149: ST_TO_ADDR
// for _x = min_x to max_x do
38150: LD_ADDR_VAR 0 11
38154: PUSH
38155: DOUBLE
38156: LD_VAR 0 7
38160: DEC
38161: ST_TO_ADDR
38162: LD_VAR 0 9
38166: PUSH
38167: FOR_TO
38168: IFFALSE 38287
// for _y = min_y to max_y do
38170: LD_ADDR_VAR 0 12
38174: PUSH
38175: DOUBLE
38176: LD_VAR 0 8
38180: DEC
38181: ST_TO_ADDR
38182: LD_VAR 0 10
38186: PUSH
38187: FOR_TO
38188: IFFALSE 38283
// begin if not ValidHex ( _x , _y ) then
38190: LD_VAR 0 11
38194: PPUSH
38195: LD_VAR 0 12
38199: PPUSH
38200: CALL_OW 488
38204: NOT
38205: IFFALSE 38209
// continue ;
38207: GO 38187
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38209: LD_VAR 0 11
38213: PPUSH
38214: LD_VAR 0 12
38218: PPUSH
38219: CALL_OW 351
38223: IFFALSE 38241
38225: PUSH
38226: LD_VAR 0 11
38230: PPUSH
38231: LD_VAR 0 12
38235: PPUSH
38236: CALL_OW 554
38240: AND
38241: IFFALSE 38281
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38243: LD_ADDR_VAR 0 13
38247: PUSH
38248: LD_VAR 0 13
38252: PPUSH
38253: LD_VAR 0 13
38257: PUSH
38258: LD_INT 1
38260: PLUS
38261: PPUSH
38262: LD_VAR 0 11
38266: PUSH
38267: LD_VAR 0 12
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PPUSH
38276: CALL_OW 2
38280: ST_TO_ADDR
// end ;
38281: GO 38187
38283: POP
38284: POP
38285: GO 38167
38287: POP
38288: POP
// if not list then
38289: LD_VAR 0 13
38293: NOT
38294: IFFALSE 38298
// exit ;
38296: GO 38544
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38298: LD_ADDR_VAR 0 13
38302: PUSH
38303: LD_VAR 0 1
38307: PPUSH
38308: LD_VAR 0 13
38312: PPUSH
38313: LD_INT 1
38315: PPUSH
38316: LD_INT 1
38318: PPUSH
38319: CALL 47386 0 4
38323: ST_TO_ADDR
// ComStop ( flame ) ;
38324: LD_VAR 0 1
38328: PPUSH
38329: CALL_OW 141
// for i in list do
38333: LD_ADDR_VAR 0 6
38337: PUSH
38338: LD_VAR 0 13
38342: PUSH
38343: FOR_IN
38344: IFFALSE 38375
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38346: LD_VAR 0 1
38350: PPUSH
38351: LD_VAR 0 6
38355: PUSH
38356: LD_INT 1
38358: ARRAY
38359: PPUSH
38360: LD_VAR 0 6
38364: PUSH
38365: LD_INT 2
38367: ARRAY
38368: PPUSH
38369: CALL_OW 176
38373: GO 38343
38375: POP
38376: POP
// repeat wait ( 0 0$1 ) ;
38377: LD_INT 35
38379: PPUSH
38380: CALL_OW 67
// task := GetTaskList ( flame ) ;
38384: LD_ADDR_VAR 0 14
38388: PUSH
38389: LD_VAR 0 1
38393: PPUSH
38394: CALL_OW 437
38398: ST_TO_ADDR
// if not task then
38399: LD_VAR 0 14
38403: NOT
38404: IFFALSE 38408
// exit ;
38406: GO 38544
// if task [ 1 ] [ 1 ] <> | then
38408: LD_VAR 0 14
38412: PUSH
38413: LD_INT 1
38415: ARRAY
38416: PUSH
38417: LD_INT 1
38419: ARRAY
38420: PUSH
38421: LD_STRING |
38423: NONEQUAL
38424: IFFALSE 38428
// exit ;
38426: GO 38544
// _x := task [ 1 ] [ 2 ] ;
38428: LD_ADDR_VAR 0 11
38432: PUSH
38433: LD_VAR 0 14
38437: PUSH
38438: LD_INT 1
38440: ARRAY
38441: PUSH
38442: LD_INT 2
38444: ARRAY
38445: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38446: LD_ADDR_VAR 0 12
38450: PUSH
38451: LD_VAR 0 14
38455: PUSH
38456: LD_INT 1
38458: ARRAY
38459: PUSH
38460: LD_INT 3
38462: ARRAY
38463: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38464: LD_VAR 0 11
38468: PPUSH
38469: LD_VAR 0 12
38473: PPUSH
38474: CALL_OW 351
38478: NOT
38479: IFTRUE 38498
38481: PUSH
38482: LD_VAR 0 11
38486: PPUSH
38487: LD_VAR 0 12
38491: PPUSH
38492: CALL_OW 554
38496: NOT
38497: OR
38498: IFFALSE 38532
// begin task := Delete ( task , 1 ) ;
38500: LD_ADDR_VAR 0 14
38504: PUSH
38505: LD_VAR 0 14
38509: PPUSH
38510: LD_INT 1
38512: PPUSH
38513: CALL_OW 3
38517: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38518: LD_VAR 0 1
38522: PPUSH
38523: LD_VAR 0 14
38527: PPUSH
38528: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38532: LD_VAR 0 1
38536: PPUSH
38537: CALL_OW 314
38541: NOT
38542: IFFALSE 38377
// end ;
38544: LD_VAR 0 5
38548: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38549: LD_EXP 114
38553: NOT
38554: IFFALSE 38604
38556: GO 38558
38558: DISABLE
// begin initHack := true ;
38559: LD_ADDR_EXP 114
38563: PUSH
38564: LD_INT 1
38566: ST_TO_ADDR
// hackTanks := [ ] ;
38567: LD_ADDR_EXP 115
38571: PUSH
38572: EMPTY
38573: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38574: LD_ADDR_EXP 116
38578: PUSH
38579: EMPTY
38580: ST_TO_ADDR
// hackLimit := 3 ;
38581: LD_ADDR_EXP 117
38585: PUSH
38586: LD_INT 3
38588: ST_TO_ADDR
// hackDist := 12 ;
38589: LD_ADDR_EXP 118
38593: PUSH
38594: LD_INT 12
38596: ST_TO_ADDR
// hackCounter := [ ] ;
38597: LD_ADDR_EXP 119
38601: PUSH
38602: EMPTY
38603: ST_TO_ADDR
// end ;
38604: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38605: LD_EXP 114
38609: IFFALSE 38627
38611: PUSH
38612: LD_INT 34
38614: PUSH
38615: LD_INT 99
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PPUSH
38622: CALL_OW 69
38626: AND
38627: IFFALSE 38880
38629: GO 38631
38631: DISABLE
38632: LD_INT 0
38634: PPUSH
38635: PPUSH
// begin enable ;
38636: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38637: LD_ADDR_VAR 0 1
38641: PUSH
38642: LD_INT 34
38644: PUSH
38645: LD_INT 99
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PPUSH
38652: CALL_OW 69
38656: PUSH
38657: FOR_IN
38658: IFFALSE 38878
// begin if not i in hackTanks then
38660: LD_VAR 0 1
38664: PUSH
38665: LD_EXP 115
38669: IN
38670: NOT
38671: IFFALSE 38754
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38673: LD_ADDR_EXP 115
38677: PUSH
38678: LD_EXP 115
38682: PPUSH
38683: LD_EXP 115
38687: PUSH
38688: LD_INT 1
38690: PLUS
38691: PPUSH
38692: LD_VAR 0 1
38696: PPUSH
38697: CALL_OW 1
38701: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38702: LD_ADDR_EXP 116
38706: PUSH
38707: LD_EXP 116
38711: PPUSH
38712: LD_EXP 116
38716: PUSH
38717: LD_INT 1
38719: PLUS
38720: PPUSH
38721: EMPTY
38722: PPUSH
38723: CALL_OW 1
38727: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38728: LD_ADDR_EXP 119
38732: PUSH
38733: LD_EXP 119
38737: PPUSH
38738: LD_EXP 119
38742: PUSH
38743: LD_INT 1
38745: PLUS
38746: PPUSH
38747: EMPTY
38748: PPUSH
38749: CALL_OW 1
38753: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38754: LD_VAR 0 1
38758: PPUSH
38759: CALL_OW 302
38763: NOT
38764: IFFALSE 38777
// begin HackUnlinkAll ( i ) ;
38766: LD_VAR 0 1
38770: PPUSH
38771: CALL 38883 0 1
// continue ;
38775: GO 38657
// end ; HackCheckCapturedStatus ( i ) ;
38777: LD_VAR 0 1
38781: PPUSH
38782: CALL 39328 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38786: LD_ADDR_VAR 0 2
38790: PUSH
38791: LD_INT 81
38793: PUSH
38794: LD_VAR 0 1
38798: PPUSH
38799: CALL_OW 255
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 33
38810: PUSH
38811: LD_INT 3
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 91
38820: PUSH
38821: LD_VAR 0 1
38825: PUSH
38826: LD_EXP 118
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 50
38838: PUSH
38839: EMPTY
38840: LIST
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: PPUSH
38848: CALL_OW 69
38852: ST_TO_ADDR
// if not tmp then
38853: LD_VAR 0 2
38857: NOT
38858: IFFALSE 38862
// continue ;
38860: GO 38657
// HackLink ( i , tmp ) ;
38862: LD_VAR 0 1
38866: PPUSH
38867: LD_VAR 0 2
38871: PPUSH
38872: CALL 39019 0 2
// end ;
38876: GO 38657
38878: POP
38879: POP
// end ;
38880: PPOPN 2
38882: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38883: LD_INT 0
38885: PPUSH
38886: PPUSH
38887: PPUSH
// if not hack in hackTanks then
38888: LD_VAR 0 1
38892: PUSH
38893: LD_EXP 115
38897: IN
38898: NOT
38899: IFFALSE 38903
// exit ;
38901: GO 39014
// index := GetElementIndex ( hackTanks , hack ) ;
38903: LD_ADDR_VAR 0 4
38907: PUSH
38908: LD_EXP 115
38912: PPUSH
38913: LD_VAR 0 1
38917: PPUSH
38918: CALL 46681 0 2
38922: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38923: LD_EXP 116
38927: PUSH
38928: LD_VAR 0 4
38932: ARRAY
38933: IFFALSE 39014
// begin for i in hackTanksCaptured [ index ] do
38935: LD_ADDR_VAR 0 3
38939: PUSH
38940: LD_EXP 116
38944: PUSH
38945: LD_VAR 0 4
38949: ARRAY
38950: PUSH
38951: FOR_IN
38952: IFFALSE 38978
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38954: LD_VAR 0 3
38958: PUSH
38959: LD_INT 1
38961: ARRAY
38962: PPUSH
38963: LD_VAR 0 3
38967: PUSH
38968: LD_INT 2
38970: ARRAY
38971: PPUSH
38972: CALL_OW 235
38976: GO 38951
38978: POP
38979: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38980: LD_ADDR_EXP 116
38984: PUSH
38985: LD_EXP 116
38989: PPUSH
38990: LD_VAR 0 4
38994: PPUSH
38995: EMPTY
38996: PPUSH
38997: CALL_OW 1
39001: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39002: LD_VAR 0 1
39006: PPUSH
39007: LD_INT 0
39009: PPUSH
39010: CALL_OW 505
// end ; end ;
39014: LD_VAR 0 2
39018: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39019: LD_INT 0
39021: PPUSH
39022: PPUSH
39023: PPUSH
// if not hack in hackTanks or not vehicles then
39024: LD_VAR 0 1
39028: PUSH
39029: LD_EXP 115
39033: IN
39034: NOT
39035: IFTRUE 39044
39037: PUSH
39038: LD_VAR 0 2
39042: NOT
39043: OR
39044: IFFALSE 39048
// exit ;
39046: GO 39323
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39048: LD_ADDR_VAR 0 2
39052: PUSH
39053: LD_VAR 0 1
39057: PPUSH
39058: LD_VAR 0 2
39062: PPUSH
39063: LD_INT 1
39065: PPUSH
39066: LD_INT 1
39068: PPUSH
39069: CALL 47333 0 4
39073: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39074: LD_ADDR_VAR 0 5
39078: PUSH
39079: LD_EXP 115
39083: PPUSH
39084: LD_VAR 0 1
39088: PPUSH
39089: CALL 46681 0 2
39093: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39094: LD_EXP 116
39098: PUSH
39099: LD_VAR 0 5
39103: ARRAY
39104: PUSH
39105: LD_EXP 117
39109: LESS
39110: IFFALSE 39299
// begin for i := 1 to vehicles do
39112: LD_ADDR_VAR 0 4
39116: PUSH
39117: DOUBLE
39118: LD_INT 1
39120: DEC
39121: ST_TO_ADDR
39122: LD_VAR 0 2
39126: PUSH
39127: FOR_TO
39128: IFFALSE 39297
// begin if hackTanksCaptured [ index ] = hackLimit then
39130: LD_EXP 116
39134: PUSH
39135: LD_VAR 0 5
39139: ARRAY
39140: PUSH
39141: LD_EXP 117
39145: EQUAL
39146: IFFALSE 39150
// break ;
39148: GO 39297
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39150: LD_ADDR_EXP 119
39154: PUSH
39155: LD_EXP 119
39159: PPUSH
39160: LD_VAR 0 5
39164: PPUSH
39165: LD_EXP 119
39169: PUSH
39170: LD_VAR 0 5
39174: ARRAY
39175: PUSH
39176: LD_INT 1
39178: PLUS
39179: PPUSH
39180: CALL_OW 1
39184: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39185: LD_ADDR_EXP 116
39189: PUSH
39190: LD_EXP 116
39194: PPUSH
39195: LD_VAR 0 5
39199: PUSH
39200: LD_EXP 116
39204: PUSH
39205: LD_VAR 0 5
39209: ARRAY
39210: PUSH
39211: LD_INT 1
39213: PLUS
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PPUSH
39219: LD_VAR 0 2
39223: PUSH
39224: LD_VAR 0 4
39228: ARRAY
39229: PUSH
39230: LD_VAR 0 2
39234: PUSH
39235: LD_VAR 0 4
39239: ARRAY
39240: PPUSH
39241: CALL_OW 255
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PPUSH
39250: CALL 46898 0 3
39254: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39255: LD_VAR 0 2
39259: PUSH
39260: LD_VAR 0 4
39264: ARRAY
39265: PPUSH
39266: LD_VAR 0 1
39270: PPUSH
39271: CALL_OW 255
39275: PPUSH
39276: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39280: LD_VAR 0 2
39284: PUSH
39285: LD_VAR 0 4
39289: ARRAY
39290: PPUSH
39291: CALL_OW 141
// end ;
39295: GO 39127
39297: POP
39298: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39299: LD_VAR 0 1
39303: PPUSH
39304: LD_EXP 116
39308: PUSH
39309: LD_VAR 0 5
39313: ARRAY
39314: PUSH
39315: LD_INT 0
39317: PLUS
39318: PPUSH
39319: CALL_OW 505
// end ;
39323: LD_VAR 0 3
39327: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39328: LD_INT 0
39330: PPUSH
39331: PPUSH
39332: PPUSH
39333: PPUSH
// if not hack in hackTanks then
39334: LD_VAR 0 1
39338: PUSH
39339: LD_EXP 115
39343: IN
39344: NOT
39345: IFFALSE 39349
// exit ;
39347: GO 39593
// index := GetElementIndex ( hackTanks , hack ) ;
39349: LD_ADDR_VAR 0 4
39353: PUSH
39354: LD_EXP 115
39358: PPUSH
39359: LD_VAR 0 1
39363: PPUSH
39364: CALL 46681 0 2
39368: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39369: LD_ADDR_VAR 0 3
39373: PUSH
39374: DOUBLE
39375: LD_EXP 116
39379: PUSH
39380: LD_VAR 0 4
39384: ARRAY
39385: INC
39386: ST_TO_ADDR
39387: LD_INT 1
39389: PUSH
39390: FOR_DOWNTO
39391: IFFALSE 39567
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39393: LD_ADDR_VAR 0 5
39397: PUSH
39398: LD_EXP 116
39402: PUSH
39403: LD_VAR 0 4
39407: ARRAY
39408: PUSH
39409: LD_VAR 0 3
39413: ARRAY
39414: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39415: LD_VAR 0 5
39419: PUSH
39420: LD_INT 1
39422: ARRAY
39423: PPUSH
39424: CALL_OW 302
39428: NOT
39429: IFTRUE 39457
39431: PUSH
39432: LD_VAR 0 5
39436: PUSH
39437: LD_INT 1
39439: ARRAY
39440: PPUSH
39441: CALL_OW 255
39445: PUSH
39446: LD_VAR 0 1
39450: PPUSH
39451: CALL_OW 255
39455: NONEQUAL
39456: OR
39457: IFFALSE 39565
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39459: LD_VAR 0 5
39463: PUSH
39464: LD_INT 1
39466: ARRAY
39467: PPUSH
39468: CALL_OW 305
39472: IFFALSE 39500
39474: PUSH
39475: LD_VAR 0 5
39479: PUSH
39480: LD_INT 1
39482: ARRAY
39483: PPUSH
39484: CALL_OW 255
39488: PUSH
39489: LD_VAR 0 1
39493: PPUSH
39494: CALL_OW 255
39498: EQUAL
39499: AND
39500: IFFALSE 39524
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39502: LD_VAR 0 5
39506: PUSH
39507: LD_INT 1
39509: ARRAY
39510: PPUSH
39511: LD_VAR 0 5
39515: PUSH
39516: LD_INT 2
39518: ARRAY
39519: PPUSH
39520: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39524: LD_ADDR_EXP 116
39528: PUSH
39529: LD_EXP 116
39533: PPUSH
39534: LD_VAR 0 4
39538: PPUSH
39539: LD_EXP 116
39543: PUSH
39544: LD_VAR 0 4
39548: ARRAY
39549: PPUSH
39550: LD_VAR 0 3
39554: PPUSH
39555: CALL_OW 3
39559: PPUSH
39560: CALL_OW 1
39564: ST_TO_ADDR
// end ; end ;
39565: GO 39390
39567: POP
39568: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39569: LD_VAR 0 1
39573: PPUSH
39574: LD_EXP 116
39578: PUSH
39579: LD_VAR 0 4
39583: ARRAY
39584: PUSH
39585: LD_INT 0
39587: PLUS
39588: PPUSH
39589: CALL_OW 505
// end ;
39593: LD_VAR 0 2
39597: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39598: LD_INT 0
39600: PPUSH
39601: PPUSH
39602: PPUSH
39603: PPUSH
// if not hack in hackTanks then
39604: LD_VAR 0 1
39608: PUSH
39609: LD_EXP 115
39613: IN
39614: NOT
39615: IFFALSE 39619
// exit ;
39617: GO 39704
// index := GetElementIndex ( hackTanks , hack ) ;
39619: LD_ADDR_VAR 0 5
39623: PUSH
39624: LD_EXP 115
39628: PPUSH
39629: LD_VAR 0 1
39633: PPUSH
39634: CALL 46681 0 2
39638: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39639: LD_ADDR_VAR 0 4
39643: PUSH
39644: DOUBLE
39645: LD_INT 1
39647: DEC
39648: ST_TO_ADDR
39649: LD_EXP 116
39653: PUSH
39654: LD_VAR 0 5
39658: ARRAY
39659: PUSH
39660: FOR_TO
39661: IFFALSE 39702
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39663: LD_EXP 116
39667: PUSH
39668: LD_VAR 0 5
39672: ARRAY
39673: PUSH
39674: LD_VAR 0 4
39678: ARRAY
39679: PUSH
39680: LD_INT 1
39682: ARRAY
39683: PUSH
39684: LD_VAR 0 2
39688: EQUAL
39689: IFFALSE 39700
// KillUnit ( vehicle ) ;
39691: LD_VAR 0 2
39695: PPUSH
39696: CALL_OW 66
39700: GO 39660
39702: POP
39703: POP
// end ;
39704: LD_VAR 0 3
39708: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39709: LD_EXP 120
39713: NOT
39714: IFFALSE 39749
39716: GO 39718
39718: DISABLE
// begin initMiner := true ;
39719: LD_ADDR_EXP 120
39723: PUSH
39724: LD_INT 1
39726: ST_TO_ADDR
// minersList := [ ] ;
39727: LD_ADDR_EXP 121
39731: PUSH
39732: EMPTY
39733: ST_TO_ADDR
// minerMinesList := [ ] ;
39734: LD_ADDR_EXP 122
39738: PUSH
39739: EMPTY
39740: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39741: LD_ADDR_EXP 123
39745: PUSH
39746: LD_INT 5
39748: ST_TO_ADDR
// end ;
39749: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39750: LD_EXP 120
39754: IFFALSE 39772
39756: PUSH
39757: LD_INT 34
39759: PUSH
39760: LD_INT 81
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PPUSH
39767: CALL_OW 69
39771: AND
39772: IFFALSE 40235
39774: GO 39776
39776: DISABLE
39777: LD_INT 0
39779: PPUSH
39780: PPUSH
39781: PPUSH
39782: PPUSH
// begin enable ;
39783: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39784: LD_ADDR_VAR 0 1
39788: PUSH
39789: LD_INT 34
39791: PUSH
39792: LD_INT 81
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PPUSH
39799: CALL_OW 69
39803: PUSH
39804: FOR_IN
39805: IFFALSE 39877
// begin if not i in minersList then
39807: LD_VAR 0 1
39811: PUSH
39812: LD_EXP 121
39816: IN
39817: NOT
39818: IFFALSE 39875
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39820: LD_ADDR_EXP 121
39824: PUSH
39825: LD_EXP 121
39829: PPUSH
39830: LD_EXP 121
39834: PUSH
39835: LD_INT 1
39837: PLUS
39838: PPUSH
39839: LD_VAR 0 1
39843: PPUSH
39844: CALL_OW 1
39848: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39849: LD_ADDR_EXP 122
39853: PUSH
39854: LD_EXP 122
39858: PPUSH
39859: LD_EXP 122
39863: PUSH
39864: LD_INT 1
39866: PLUS
39867: PPUSH
39868: EMPTY
39869: PPUSH
39870: CALL_OW 1
39874: ST_TO_ADDR
// end end ;
39875: GO 39804
39877: POP
39878: POP
// for i := minerMinesList downto 1 do
39879: LD_ADDR_VAR 0 1
39883: PUSH
39884: DOUBLE
39885: LD_EXP 122
39889: INC
39890: ST_TO_ADDR
39891: LD_INT 1
39893: PUSH
39894: FOR_DOWNTO
39895: IFFALSE 40233
// begin if IsLive ( minersList [ i ] ) then
39897: LD_EXP 121
39901: PUSH
39902: LD_VAR 0 1
39906: ARRAY
39907: PPUSH
39908: CALL_OW 300
39912: IFFALSE 39940
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39914: LD_EXP 121
39918: PUSH
39919: LD_VAR 0 1
39923: ARRAY
39924: PPUSH
39925: LD_EXP 122
39929: PUSH
39930: LD_VAR 0 1
39934: ARRAY
39935: PPUSH
39936: CALL_OW 505
// if not minerMinesList [ i ] then
39940: LD_EXP 122
39944: PUSH
39945: LD_VAR 0 1
39949: ARRAY
39950: NOT
39951: IFFALSE 39955
// continue ;
39953: GO 39894
// for j := minerMinesList [ i ] downto 1 do
39955: LD_ADDR_VAR 0 2
39959: PUSH
39960: DOUBLE
39961: LD_EXP 122
39965: PUSH
39966: LD_VAR 0 1
39970: ARRAY
39971: INC
39972: ST_TO_ADDR
39973: LD_INT 1
39975: PUSH
39976: FOR_DOWNTO
39977: IFFALSE 40229
// begin side := GetSide ( minersList [ i ] ) ;
39979: LD_ADDR_VAR 0 3
39983: PUSH
39984: LD_EXP 121
39988: PUSH
39989: LD_VAR 0 1
39993: ARRAY
39994: PPUSH
39995: CALL_OW 255
39999: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40000: LD_ADDR_VAR 0 4
40004: PUSH
40005: LD_EXP 122
40009: PUSH
40010: LD_VAR 0 1
40014: ARRAY
40015: PUSH
40016: LD_VAR 0 2
40020: ARRAY
40021: PUSH
40022: LD_INT 1
40024: ARRAY
40025: PPUSH
40026: LD_EXP 122
40030: PUSH
40031: LD_VAR 0 1
40035: ARRAY
40036: PUSH
40037: LD_VAR 0 2
40041: ARRAY
40042: PUSH
40043: LD_INT 2
40045: ARRAY
40046: PPUSH
40047: CALL_OW 428
40051: ST_TO_ADDR
// if not tmp then
40052: LD_VAR 0 4
40056: NOT
40057: IFFALSE 40061
// continue ;
40059: GO 39976
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40061: LD_VAR 0 4
40065: PUSH
40066: LD_INT 81
40068: PUSH
40069: LD_VAR 0 3
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PPUSH
40078: CALL_OW 69
40082: IN
40083: IFFALSE 40133
40085: PUSH
40086: LD_EXP 122
40090: PUSH
40091: LD_VAR 0 1
40095: ARRAY
40096: PUSH
40097: LD_VAR 0 2
40101: ARRAY
40102: PUSH
40103: LD_INT 1
40105: ARRAY
40106: PPUSH
40107: LD_EXP 122
40111: PUSH
40112: LD_VAR 0 1
40116: ARRAY
40117: PUSH
40118: LD_VAR 0 2
40122: ARRAY
40123: PUSH
40124: LD_INT 2
40126: ARRAY
40127: PPUSH
40128: CALL_OW 458
40132: AND
40133: IFFALSE 40227
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40135: LD_EXP 122
40139: PUSH
40140: LD_VAR 0 1
40144: ARRAY
40145: PUSH
40146: LD_VAR 0 2
40150: ARRAY
40151: PUSH
40152: LD_INT 1
40154: ARRAY
40155: PPUSH
40156: LD_EXP 122
40160: PUSH
40161: LD_VAR 0 1
40165: ARRAY
40166: PUSH
40167: LD_VAR 0 2
40171: ARRAY
40172: PUSH
40173: LD_INT 2
40175: ARRAY
40176: PPUSH
40177: LD_VAR 0 3
40181: PPUSH
40182: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40186: LD_ADDR_EXP 122
40190: PUSH
40191: LD_EXP 122
40195: PPUSH
40196: LD_VAR 0 1
40200: PPUSH
40201: LD_EXP 122
40205: PUSH
40206: LD_VAR 0 1
40210: ARRAY
40211: PPUSH
40212: LD_VAR 0 2
40216: PPUSH
40217: CALL_OW 3
40221: PPUSH
40222: CALL_OW 1
40226: ST_TO_ADDR
// end ; end ;
40227: GO 39976
40229: POP
40230: POP
// end ;
40231: GO 39894
40233: POP
40234: POP
// end ;
40235: PPOPN 4
40237: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40238: LD_INT 0
40240: PPUSH
40241: PPUSH
// result := false ;
40242: LD_ADDR_VAR 0 4
40246: PUSH
40247: LD_INT 0
40249: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40250: LD_VAR 0 1
40254: PPUSH
40255: CALL_OW 264
40259: PUSH
40260: LD_INT 81
40262: EQUAL
40263: NOT
40264: IFFALSE 40268
// exit ;
40266: GO 40512
// index := GetElementIndex ( minersList , unit ) ;
40268: LD_ADDR_VAR 0 5
40272: PUSH
40273: LD_EXP 121
40277: PPUSH
40278: LD_VAR 0 1
40282: PPUSH
40283: CALL 46681 0 2
40287: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40288: LD_EXP 122
40292: PUSH
40293: LD_VAR 0 5
40297: ARRAY
40298: PUSH
40299: LD_EXP 123
40303: GREATEREQUAL
40304: IFFALSE 40308
// exit ;
40306: GO 40512
// ComMoveXY ( unit , x , y ) ;
40308: LD_VAR 0 1
40312: PPUSH
40313: LD_VAR 0 2
40317: PPUSH
40318: LD_VAR 0 3
40322: PPUSH
40323: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40327: LD_INT 35
40329: PPUSH
40330: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40334: LD_VAR 0 1
40338: PPUSH
40339: LD_VAR 0 2
40343: PPUSH
40344: LD_VAR 0 3
40348: PPUSH
40349: CALL 78727 0 3
40353: NOT
40354: IFFALSE 40367
40356: PUSH
40357: LD_VAR 0 1
40361: PPUSH
40362: CALL_OW 314
40366: AND
40367: IFFALSE 40371
// exit ;
40369: GO 40512
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40371: LD_VAR 0 2
40375: PPUSH
40376: LD_VAR 0 3
40380: PPUSH
40381: CALL_OW 428
40385: PUSH
40386: LD_VAR 0 1
40390: EQUAL
40391: IFFALSE 40405
40393: PUSH
40394: LD_VAR 0 1
40398: PPUSH
40399: CALL_OW 314
40403: NOT
40404: AND
40405: IFFALSE 40327
// PlaySoundXY ( x , y , PlantMine ) ;
40407: LD_VAR 0 2
40411: PPUSH
40412: LD_VAR 0 3
40416: PPUSH
40417: LD_STRING PlantMine
40419: PPUSH
40420: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40424: LD_VAR 0 2
40428: PPUSH
40429: LD_VAR 0 3
40433: PPUSH
40434: LD_VAR 0 1
40438: PPUSH
40439: CALL_OW 255
40443: PPUSH
40444: LD_INT 0
40446: PPUSH
40447: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40451: LD_ADDR_EXP 122
40455: PUSH
40456: LD_EXP 122
40460: PPUSH
40461: LD_VAR 0 5
40465: PUSH
40466: LD_EXP 122
40470: PUSH
40471: LD_VAR 0 5
40475: ARRAY
40476: PUSH
40477: LD_INT 1
40479: PLUS
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PPUSH
40485: LD_VAR 0 2
40489: PUSH
40490: LD_VAR 0 3
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PPUSH
40499: CALL 46898 0 3
40503: ST_TO_ADDR
// result := true ;
40504: LD_ADDR_VAR 0 4
40508: PUSH
40509: LD_INT 1
40511: ST_TO_ADDR
// end ;
40512: LD_VAR 0 4
40516: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40517: LD_INT 0
40519: PPUSH
40520: PPUSH
40521: PPUSH
// if not unit in minersList then
40522: LD_VAR 0 1
40526: PUSH
40527: LD_EXP 121
40531: IN
40532: NOT
40533: IFFALSE 40537
// exit ;
40535: GO 40931
// index := GetElementIndex ( minersList , unit ) ;
40537: LD_ADDR_VAR 0 6
40541: PUSH
40542: LD_EXP 121
40546: PPUSH
40547: LD_VAR 0 1
40551: PPUSH
40552: CALL 46681 0 2
40556: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40557: LD_ADDR_VAR 0 5
40561: PUSH
40562: DOUBLE
40563: LD_EXP 122
40567: PUSH
40568: LD_VAR 0 6
40572: ARRAY
40573: INC
40574: ST_TO_ADDR
40575: LD_INT 1
40577: PUSH
40578: FOR_DOWNTO
40579: IFFALSE 40742
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40581: LD_EXP 122
40585: PUSH
40586: LD_VAR 0 6
40590: ARRAY
40591: PUSH
40592: LD_VAR 0 5
40596: ARRAY
40597: PUSH
40598: LD_INT 1
40600: ARRAY
40601: PUSH
40602: LD_VAR 0 2
40606: EQUAL
40607: IFFALSE 40637
40609: PUSH
40610: LD_EXP 122
40614: PUSH
40615: LD_VAR 0 6
40619: ARRAY
40620: PUSH
40621: LD_VAR 0 5
40625: ARRAY
40626: PUSH
40627: LD_INT 2
40629: ARRAY
40630: PUSH
40631: LD_VAR 0 3
40635: EQUAL
40636: AND
40637: IFFALSE 40740
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40639: LD_EXP 122
40643: PUSH
40644: LD_VAR 0 6
40648: ARRAY
40649: PUSH
40650: LD_VAR 0 5
40654: ARRAY
40655: PUSH
40656: LD_INT 1
40658: ARRAY
40659: PPUSH
40660: LD_EXP 122
40664: PUSH
40665: LD_VAR 0 6
40669: ARRAY
40670: PUSH
40671: LD_VAR 0 5
40675: ARRAY
40676: PUSH
40677: LD_INT 2
40679: ARRAY
40680: PPUSH
40681: LD_VAR 0 1
40685: PPUSH
40686: CALL_OW 255
40690: PPUSH
40691: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40695: LD_ADDR_EXP 122
40699: PUSH
40700: LD_EXP 122
40704: PPUSH
40705: LD_VAR 0 6
40709: PPUSH
40710: LD_EXP 122
40714: PUSH
40715: LD_VAR 0 6
40719: ARRAY
40720: PPUSH
40721: LD_VAR 0 5
40725: PPUSH
40726: CALL_OW 3
40730: PPUSH
40731: CALL_OW 1
40735: ST_TO_ADDR
// exit ;
40736: POP
40737: POP
40738: GO 40931
// end ; end ;
40740: GO 40578
40742: POP
40743: POP
// for i := minerMinesList [ index ] downto 1 do
40744: LD_ADDR_VAR 0 5
40748: PUSH
40749: DOUBLE
40750: LD_EXP 122
40754: PUSH
40755: LD_VAR 0 6
40759: ARRAY
40760: INC
40761: ST_TO_ADDR
40762: LD_INT 1
40764: PUSH
40765: FOR_DOWNTO
40766: IFFALSE 40929
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40768: LD_EXP 122
40772: PUSH
40773: LD_VAR 0 6
40777: ARRAY
40778: PUSH
40779: LD_VAR 0 5
40783: ARRAY
40784: PUSH
40785: LD_INT 1
40787: ARRAY
40788: PPUSH
40789: LD_EXP 122
40793: PUSH
40794: LD_VAR 0 6
40798: ARRAY
40799: PUSH
40800: LD_VAR 0 5
40804: ARRAY
40805: PUSH
40806: LD_INT 2
40808: ARRAY
40809: PPUSH
40810: LD_VAR 0 2
40814: PPUSH
40815: LD_VAR 0 3
40819: PPUSH
40820: CALL_OW 298
40824: PUSH
40825: LD_INT 6
40827: LESS
40828: IFFALSE 40927
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40830: LD_EXP 122
40834: PUSH
40835: LD_VAR 0 6
40839: ARRAY
40840: PUSH
40841: LD_VAR 0 5
40845: ARRAY
40846: PUSH
40847: LD_INT 1
40849: ARRAY
40850: PPUSH
40851: LD_EXP 122
40855: PUSH
40856: LD_VAR 0 6
40860: ARRAY
40861: PUSH
40862: LD_VAR 0 5
40866: ARRAY
40867: PUSH
40868: LD_INT 2
40870: ARRAY
40871: PPUSH
40872: LD_VAR 0 1
40876: PPUSH
40877: CALL_OW 255
40881: PPUSH
40882: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40886: LD_ADDR_EXP 122
40890: PUSH
40891: LD_EXP 122
40895: PPUSH
40896: LD_VAR 0 6
40900: PPUSH
40901: LD_EXP 122
40905: PUSH
40906: LD_VAR 0 6
40910: ARRAY
40911: PPUSH
40912: LD_VAR 0 5
40916: PPUSH
40917: CALL_OW 3
40921: PPUSH
40922: CALL_OW 1
40926: ST_TO_ADDR
// end ; end ;
40927: GO 40765
40929: POP
40930: POP
// end ;
40931: LD_VAR 0 4
40935: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40936: LD_INT 0
40938: PPUSH
40939: PPUSH
40940: PPUSH
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40947: LD_VAR 0 1
40951: PPUSH
40952: CALL_OW 264
40956: PUSH
40957: LD_INT 81
40959: EQUAL
40960: NOT
40961: IFTRUE 40976
40963: PUSH
40964: LD_VAR 0 1
40968: PUSH
40969: LD_EXP 121
40973: IN
40974: NOT
40975: OR
40976: IFFALSE 40980
// exit ;
40978: GO 41306
// index := GetElementIndex ( minersList , unit ) ;
40980: LD_ADDR_VAR 0 6
40984: PUSH
40985: LD_EXP 121
40989: PPUSH
40990: LD_VAR 0 1
40994: PPUSH
40995: CALL 46681 0 2
40999: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41000: LD_ADDR_VAR 0 8
41004: PUSH
41005: LD_EXP 123
41009: PUSH
41010: LD_EXP 122
41014: PUSH
41015: LD_VAR 0 6
41019: ARRAY
41020: MINUS
41021: ST_TO_ADDR
// if not minesFreeAmount then
41022: LD_VAR 0 8
41026: NOT
41027: IFFALSE 41031
// exit ;
41029: GO 41306
// tmp := [ ] ;
41031: LD_ADDR_VAR 0 7
41035: PUSH
41036: EMPTY
41037: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41038: LD_ADDR_VAR 0 5
41042: PUSH
41043: DOUBLE
41044: LD_INT 1
41046: DEC
41047: ST_TO_ADDR
41048: LD_VAR 0 8
41052: PUSH
41053: FOR_TO
41054: IFFALSE 41253
// begin _d := rand ( 0 , 5 ) ;
41056: LD_ADDR_VAR 0 11
41060: PUSH
41061: LD_INT 0
41063: PPUSH
41064: LD_INT 5
41066: PPUSH
41067: CALL_OW 12
41071: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41072: LD_ADDR_VAR 0 12
41076: PUSH
41077: LD_INT 2
41079: PPUSH
41080: LD_INT 6
41082: PPUSH
41083: CALL_OW 12
41087: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41088: LD_ADDR_VAR 0 9
41092: PUSH
41093: LD_VAR 0 2
41097: PPUSH
41098: LD_VAR 0 11
41102: PPUSH
41103: LD_VAR 0 12
41107: PPUSH
41108: CALL_OW 272
41112: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41113: LD_ADDR_VAR 0 10
41117: PUSH
41118: LD_VAR 0 3
41122: PPUSH
41123: LD_VAR 0 11
41127: PPUSH
41128: LD_VAR 0 12
41132: PPUSH
41133: CALL_OW 273
41137: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41138: LD_VAR 0 9
41142: PPUSH
41143: LD_VAR 0 10
41147: PPUSH
41148: CALL_OW 488
41152: IFFALSE 41176
41154: PUSH
41155: LD_VAR 0 9
41159: PUSH
41160: LD_VAR 0 10
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_VAR 0 7
41173: IN
41174: NOT
41175: AND
41176: IFFALSE 41195
41178: PUSH
41179: LD_VAR 0 9
41183: PPUSH
41184: LD_VAR 0 10
41188: PPUSH
41189: CALL_OW 458
41193: NOT
41194: AND
41195: IFFALSE 41237
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41197: LD_ADDR_VAR 0 7
41201: PUSH
41202: LD_VAR 0 7
41206: PPUSH
41207: LD_VAR 0 7
41211: PUSH
41212: LD_INT 1
41214: PLUS
41215: PPUSH
41216: LD_VAR 0 9
41220: PUSH
41221: LD_VAR 0 10
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PPUSH
41230: CALL_OW 1
41234: ST_TO_ADDR
41235: GO 41251
// i := i - 1 ;
41237: LD_ADDR_VAR 0 5
41241: PUSH
41242: LD_VAR 0 5
41246: PUSH
41247: LD_INT 1
41249: MINUS
41250: ST_TO_ADDR
// end ;
41251: GO 41053
41253: POP
41254: POP
// for i in tmp do
41255: LD_ADDR_VAR 0 5
41259: PUSH
41260: LD_VAR 0 7
41264: PUSH
41265: FOR_IN
41266: IFFALSE 41304
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41268: LD_VAR 0 1
41272: PPUSH
41273: LD_VAR 0 5
41277: PUSH
41278: LD_INT 1
41280: ARRAY
41281: PPUSH
41282: LD_VAR 0 5
41286: PUSH
41287: LD_INT 2
41289: ARRAY
41290: PPUSH
41291: CALL 40238 0 3
41295: NOT
41296: IFFALSE 41302
// exit ;
41298: POP
41299: POP
41300: GO 41306
41302: GO 41265
41304: POP
41305: POP
// end ;
41306: LD_VAR 0 4
41310: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
41311: LD_INT 0
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
41318: PPUSH
41319: PPUSH
41320: PPUSH
41321: PPUSH
// if GetClass ( unit ) <> class_sniper then
41322: LD_VAR 0 1
41326: PPUSH
41327: CALL_OW 257
41331: PUSH
41332: LD_INT 5
41334: NONEQUAL
41335: IFFALSE 41339
// exit ;
41337: GO 41809
// dist := 8 ;
41339: LD_ADDR_VAR 0 5
41343: PUSH
41344: LD_INT 8
41346: ST_TO_ADDR
// viewRange := 12 ;
41347: LD_ADDR_VAR 0 8
41351: PUSH
41352: LD_INT 12
41354: ST_TO_ADDR
// side := GetSide ( unit ) ;
41355: LD_ADDR_VAR 0 6
41359: PUSH
41360: LD_VAR 0 1
41364: PPUSH
41365: CALL_OW 255
41369: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41370: LD_INT 61
41372: PPUSH
41373: LD_VAR 0 6
41377: PPUSH
41378: CALL_OW 321
41382: PUSH
41383: LD_INT 2
41385: EQUAL
41386: IFFALSE 41396
// viewRange := 16 ;
41388: LD_ADDR_VAR 0 8
41392: PUSH
41393: LD_INT 16
41395: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41396: LD_VAR 0 1
41400: PPUSH
41401: LD_VAR 0 2
41405: PPUSH
41406: LD_VAR 0 3
41410: PPUSH
41411: CALL_OW 297
41415: PUSH
41416: LD_VAR 0 5
41420: GREATER
41421: IFFALSE 41500
// begin ComMoveXY ( unit , x , y ) ;
41423: LD_VAR 0 1
41427: PPUSH
41428: LD_VAR 0 2
41432: PPUSH
41433: LD_VAR 0 3
41437: PPUSH
41438: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41442: LD_INT 35
41444: PPUSH
41445: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41449: LD_VAR 0 1
41453: PPUSH
41454: LD_VAR 0 2
41458: PPUSH
41459: LD_VAR 0 3
41463: PPUSH
41464: CALL 78727 0 3
41468: NOT
41469: IFFALSE 41473
// exit ;
41471: GO 41809
// until GetDistUnitXY ( unit , x , y ) < dist ;
41473: LD_VAR 0 1
41477: PPUSH
41478: LD_VAR 0 2
41482: PPUSH
41483: LD_VAR 0 3
41487: PPUSH
41488: CALL_OW 297
41492: PUSH
41493: LD_VAR 0 5
41497: LESS
41498: IFFALSE 41442
// end ; ComTurnXY ( unit , x , y ) ;
41500: LD_VAR 0 1
41504: PPUSH
41505: LD_VAR 0 2
41509: PPUSH
41510: LD_VAR 0 3
41514: PPUSH
41515: CALL_OW 118
// repeat if Multiplayer then
41519: LD_OWVAR 4
41523: IFFALSE 41534
// wait ( 35 ) else
41525: LD_INT 35
41527: PPUSH
41528: CALL_OW 67
41532: GO 41541
// wait ( 5 ) ;
41534: LD_INT 5
41536: PPUSH
41537: CALL_OW 67
// _d := GetDir ( unit ) ;
41541: LD_ADDR_VAR 0 11
41545: PUSH
41546: LD_VAR 0 1
41550: PPUSH
41551: CALL_OW 254
41555: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41556: LD_ADDR_VAR 0 7
41560: PUSH
41561: LD_VAR 0 1
41565: PPUSH
41566: CALL_OW 250
41570: PPUSH
41571: LD_VAR 0 1
41575: PPUSH
41576: CALL_OW 251
41580: PPUSH
41581: LD_VAR 0 2
41585: PPUSH
41586: LD_VAR 0 3
41590: PPUSH
41591: CALL 81363 0 4
41595: ST_TO_ADDR
// until dir = _d ;
41596: LD_VAR 0 7
41600: PUSH
41601: LD_VAR 0 11
41605: EQUAL
41606: IFFALSE 41519
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41608: LD_ADDR_VAR 0 9
41612: PUSH
41613: LD_VAR 0 1
41617: PPUSH
41618: CALL_OW 250
41622: PPUSH
41623: LD_VAR 0 7
41627: PPUSH
41628: LD_VAR 0 5
41632: PPUSH
41633: CALL_OW 272
41637: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41638: LD_ADDR_VAR 0 10
41642: PUSH
41643: LD_VAR 0 1
41647: PPUSH
41648: CALL_OW 251
41652: PPUSH
41653: LD_VAR 0 7
41657: PPUSH
41658: LD_VAR 0 5
41662: PPUSH
41663: CALL_OW 273
41667: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41668: LD_VAR 0 9
41672: PPUSH
41673: LD_VAR 0 10
41677: PPUSH
41678: CALL_OW 488
41682: NOT
41683: IFFALSE 41687
// exit ;
41685: GO 41809
// ComAnimCustom ( unit , 1 ) ;
41687: LD_VAR 0 1
41691: PPUSH
41692: LD_INT 1
41694: PPUSH
41695: CALL_OW 592
// p := 0 ;
41699: LD_ADDR_VAR 0 12
41703: PUSH
41704: LD_INT 0
41706: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41707: LD_VAR 0 9
41711: PPUSH
41712: LD_VAR 0 10
41716: PPUSH
41717: LD_VAR 0 6
41721: PPUSH
41722: LD_VAR 0 8
41726: PPUSH
41727: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41731: LD_INT 35
41733: PPUSH
41734: CALL_OW 67
// p := Inc ( p ) ;
41738: LD_ADDR_VAR 0 12
41742: PUSH
41743: LD_VAR 0 12
41747: PPUSH
41748: CALL 81319 0 1
41752: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41753: LD_VAR 0 12
41757: PUSH
41758: LD_INT 3
41760: EQUAL
41761: IFTRUE 41775
41763: PUSH
41764: LD_VAR 0 1
41768: PPUSH
41769: CALL_OW 302
41773: NOT
41774: OR
41775: IFTRUE 41788
41777: PUSH
41778: LD_VAR 0 1
41782: PPUSH
41783: CALL_OW 301
41787: OR
41788: IFFALSE 41731
// RemoveSeeing ( _x , _y , side ) ;
41790: LD_VAR 0 9
41794: PPUSH
41795: LD_VAR 0 10
41799: PPUSH
41800: LD_VAR 0 6
41804: PPUSH
41805: CALL_OW 331
// end ; end_of_file
41809: LD_VAR 0 4
41813: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41814: LD_INT 0
41816: PPUSH
41817: PPUSH
// if exist_mode then
41818: LD_VAR 0 2
41822: IFFALSE 41868
// begin unit := CreateCharacter ( prefix & ident ) ;
41824: LD_ADDR_VAR 0 5
41828: PUSH
41829: LD_VAR 0 3
41833: PUSH
41834: LD_VAR 0 1
41838: STR
41839: PPUSH
41840: CALL_OW 34
41844: ST_TO_ADDR
// if unit then
41845: LD_VAR 0 5
41849: IFFALSE 41866
// DeleteCharacters ( prefix & ident ) ;
41851: LD_VAR 0 3
41855: PUSH
41856: LD_VAR 0 1
41860: STR
41861: PPUSH
41862: CALL_OW 40
// end else
41866: GO 41883
// unit := NewCharacter ( ident ) ;
41868: LD_ADDR_VAR 0 5
41872: PUSH
41873: LD_VAR 0 1
41877: PPUSH
41878: CALL_OW 25
41882: ST_TO_ADDR
// result := unit ;
41883: LD_ADDR_VAR 0 4
41887: PUSH
41888: LD_VAR 0 5
41892: ST_TO_ADDR
// end ;
41893: LD_VAR 0 4
41897: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
41898: LD_INT 0
41900: PPUSH
41901: PPUSH
// if exist_mode then
41902: LD_VAR 0 2
41906: IFFALSE 41931
// unit := CreateCharacter ( prefix & ident ) else
41908: LD_ADDR_VAR 0 5
41912: PUSH
41913: LD_VAR 0 3
41917: PUSH
41918: LD_VAR 0 1
41922: STR
41923: PPUSH
41924: CALL_OW 34
41928: ST_TO_ADDR
41929: GO 41946
// unit := NewCharacter ( ident ) ;
41931: LD_ADDR_VAR 0 5
41935: PUSH
41936: LD_VAR 0 1
41940: PPUSH
41941: CALL_OW 25
41945: ST_TO_ADDR
// result := unit ;
41946: LD_ADDR_VAR 0 4
41950: PUSH
41951: LD_VAR 0 5
41955: ST_TO_ADDR
// end ;
41956: LD_VAR 0 4
41960: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41961: LD_INT 0
41963: PPUSH
41964: PPUSH
// if not side or not nation then
41965: LD_VAR 0 1
41969: NOT
41970: IFTRUE 41979
41972: PUSH
41973: LD_VAR 0 2
41977: NOT
41978: OR
41979: IFFALSE 41983
// exit ;
41981: GO 42753
// case nation of nation_american :
41983: LD_VAR 0 2
41987: PUSH
41988: LD_INT 1
41990: DOUBLE
41991: EQUAL
41992: IFTRUE 41996
41994: GO 42210
41996: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41997: LD_ADDR_VAR 0 4
42001: PUSH
42002: LD_INT 35
42004: PUSH
42005: LD_INT 45
42007: PUSH
42008: LD_INT 46
42010: PUSH
42011: LD_INT 47
42013: PUSH
42014: LD_INT 82
42016: PUSH
42017: LD_INT 83
42019: PUSH
42020: LD_INT 84
42022: PUSH
42023: LD_INT 85
42025: PUSH
42026: LD_INT 86
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: LD_INT 2
42034: PUSH
42035: LD_INT 6
42037: PUSH
42038: LD_INT 15
42040: PUSH
42041: LD_INT 16
42043: PUSH
42044: LD_INT 7
42046: PUSH
42047: LD_INT 12
42049: PUSH
42050: LD_INT 13
42052: PUSH
42053: LD_INT 10
42055: PUSH
42056: LD_INT 14
42058: PUSH
42059: LD_INT 20
42061: PUSH
42062: LD_INT 21
42064: PUSH
42065: LD_INT 22
42067: PUSH
42068: LD_INT 25
42070: PUSH
42071: LD_INT 32
42073: PUSH
42074: LD_INT 27
42076: PUSH
42077: LD_INT 36
42079: PUSH
42080: LD_INT 69
42082: PUSH
42083: LD_INT 39
42085: PUSH
42086: LD_INT 34
42088: PUSH
42089: LD_INT 40
42091: PUSH
42092: LD_INT 48
42094: PUSH
42095: LD_INT 49
42097: PUSH
42098: LD_INT 50
42100: PUSH
42101: LD_INT 51
42103: PUSH
42104: LD_INT 52
42106: PUSH
42107: LD_INT 53
42109: PUSH
42110: LD_INT 54
42112: PUSH
42113: LD_INT 55
42115: PUSH
42116: LD_INT 56
42118: PUSH
42119: LD_INT 57
42121: PUSH
42122: LD_INT 58
42124: PUSH
42125: LD_INT 59
42127: PUSH
42128: LD_INT 60
42130: PUSH
42131: LD_INT 61
42133: PUSH
42134: LD_INT 62
42136: PUSH
42137: LD_INT 80
42139: PUSH
42140: LD_INT 82
42142: PUSH
42143: LD_INT 83
42145: PUSH
42146: LD_INT 84
42148: PUSH
42149: LD_INT 85
42151: PUSH
42152: LD_INT 86
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: ST_TO_ADDR
42208: GO 42675
42210: LD_INT 2
42212: DOUBLE
42213: EQUAL
42214: IFTRUE 42218
42216: GO 42444
42218: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42219: LD_ADDR_VAR 0 4
42223: PUSH
42224: LD_INT 35
42226: PUSH
42227: LD_INT 45
42229: PUSH
42230: LD_INT 46
42232: PUSH
42233: LD_INT 47
42235: PUSH
42236: LD_INT 82
42238: PUSH
42239: LD_INT 83
42241: PUSH
42242: LD_INT 84
42244: PUSH
42245: LD_INT 85
42247: PUSH
42248: LD_INT 87
42250: PUSH
42251: LD_INT 70
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: LD_INT 11
42259: PUSH
42260: LD_INT 3
42262: PUSH
42263: LD_INT 4
42265: PUSH
42266: LD_INT 5
42268: PUSH
42269: LD_INT 6
42271: PUSH
42272: LD_INT 15
42274: PUSH
42275: LD_INT 18
42277: PUSH
42278: LD_INT 7
42280: PUSH
42281: LD_INT 17
42283: PUSH
42284: LD_INT 8
42286: PUSH
42287: LD_INT 20
42289: PUSH
42290: LD_INT 21
42292: PUSH
42293: LD_INT 22
42295: PUSH
42296: LD_INT 72
42298: PUSH
42299: LD_INT 26
42301: PUSH
42302: LD_INT 69
42304: PUSH
42305: LD_INT 39
42307: PUSH
42308: LD_INT 40
42310: PUSH
42311: LD_INT 41
42313: PUSH
42314: LD_INT 42
42316: PUSH
42317: LD_INT 43
42319: PUSH
42320: LD_INT 48
42322: PUSH
42323: LD_INT 49
42325: PUSH
42326: LD_INT 50
42328: PUSH
42329: LD_INT 51
42331: PUSH
42332: LD_INT 52
42334: PUSH
42335: LD_INT 53
42337: PUSH
42338: LD_INT 54
42340: PUSH
42341: LD_INT 55
42343: PUSH
42344: LD_INT 56
42346: PUSH
42347: LD_INT 60
42349: PUSH
42350: LD_INT 61
42352: PUSH
42353: LD_INT 62
42355: PUSH
42356: LD_INT 66
42358: PUSH
42359: LD_INT 67
42361: PUSH
42362: LD_INT 68
42364: PUSH
42365: LD_INT 81
42367: PUSH
42368: LD_INT 82
42370: PUSH
42371: LD_INT 83
42373: PUSH
42374: LD_INT 84
42376: PUSH
42377: LD_INT 85
42379: PUSH
42380: LD_INT 87
42382: PUSH
42383: LD_INT 88
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: ST_TO_ADDR
42442: GO 42675
42444: LD_INT 3
42446: DOUBLE
42447: EQUAL
42448: IFTRUE 42452
42450: GO 42674
42452: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42453: LD_ADDR_VAR 0 4
42457: PUSH
42458: LD_INT 46
42460: PUSH
42461: LD_INT 47
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: LD_INT 2
42469: PUSH
42470: LD_INT 82
42472: PUSH
42473: LD_INT 83
42475: PUSH
42476: LD_INT 84
42478: PUSH
42479: LD_INT 85
42481: PUSH
42482: LD_INT 86
42484: PUSH
42485: LD_INT 11
42487: PUSH
42488: LD_INT 9
42490: PUSH
42491: LD_INT 20
42493: PUSH
42494: LD_INT 19
42496: PUSH
42497: LD_INT 21
42499: PUSH
42500: LD_INT 24
42502: PUSH
42503: LD_INT 22
42505: PUSH
42506: LD_INT 25
42508: PUSH
42509: LD_INT 28
42511: PUSH
42512: LD_INT 29
42514: PUSH
42515: LD_INT 30
42517: PUSH
42518: LD_INT 31
42520: PUSH
42521: LD_INT 37
42523: PUSH
42524: LD_INT 38
42526: PUSH
42527: LD_INT 32
42529: PUSH
42530: LD_INT 27
42532: PUSH
42533: LD_INT 33
42535: PUSH
42536: LD_INT 69
42538: PUSH
42539: LD_INT 39
42541: PUSH
42542: LD_INT 34
42544: PUSH
42545: LD_INT 40
42547: PUSH
42548: LD_INT 71
42550: PUSH
42551: LD_INT 23
42553: PUSH
42554: LD_INT 44
42556: PUSH
42557: LD_INT 48
42559: PUSH
42560: LD_INT 49
42562: PUSH
42563: LD_INT 50
42565: PUSH
42566: LD_INT 51
42568: PUSH
42569: LD_INT 52
42571: PUSH
42572: LD_INT 53
42574: PUSH
42575: LD_INT 54
42577: PUSH
42578: LD_INT 55
42580: PUSH
42581: LD_INT 56
42583: PUSH
42584: LD_INT 57
42586: PUSH
42587: LD_INT 58
42589: PUSH
42590: LD_INT 59
42592: PUSH
42593: LD_INT 63
42595: PUSH
42596: LD_INT 64
42598: PUSH
42599: LD_INT 65
42601: PUSH
42602: LD_INT 82
42604: PUSH
42605: LD_INT 83
42607: PUSH
42608: LD_INT 84
42610: PUSH
42611: LD_INT 85
42613: PUSH
42614: LD_INT 86
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: ST_TO_ADDR
42672: GO 42675
42674: POP
// if state > - 1 and state < 3 then
42675: LD_VAR 0 3
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: GREATER
42684: IFFALSE 42696
42686: PUSH
42687: LD_VAR 0 3
42691: PUSH
42692: LD_INT 3
42694: LESS
42695: AND
42696: IFFALSE 42753
// for i in result do
42698: LD_ADDR_VAR 0 5
42702: PUSH
42703: LD_VAR 0 4
42707: PUSH
42708: FOR_IN
42709: IFFALSE 42751
// if GetTech ( i , side ) <> state then
42711: LD_VAR 0 5
42715: PPUSH
42716: LD_VAR 0 1
42720: PPUSH
42721: CALL_OW 321
42725: PUSH
42726: LD_VAR 0 3
42730: NONEQUAL
42731: IFFALSE 42749
// result := result diff i ;
42733: LD_ADDR_VAR 0 4
42737: PUSH
42738: LD_VAR 0 4
42742: PUSH
42743: LD_VAR 0 5
42747: DIFF
42748: ST_TO_ADDR
42749: GO 42708
42751: POP
42752: POP
// end ;
42753: LD_VAR 0 4
42757: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42758: LD_INT 0
42760: PPUSH
42761: PPUSH
42762: PPUSH
// result := true ;
42763: LD_ADDR_VAR 0 3
42767: PUSH
42768: LD_INT 1
42770: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42771: LD_ADDR_VAR 0 5
42775: PUSH
42776: LD_VAR 0 2
42780: PPUSH
42781: CALL_OW 480
42785: ST_TO_ADDR
// if not tmp then
42786: LD_VAR 0 5
42790: NOT
42791: IFFALSE 42795
// exit ;
42793: GO 42844
// for i in tmp do
42795: LD_ADDR_VAR 0 4
42799: PUSH
42800: LD_VAR 0 5
42804: PUSH
42805: FOR_IN
42806: IFFALSE 42842
// if GetTech ( i , side ) <> state_researched then
42808: LD_VAR 0 4
42812: PPUSH
42813: LD_VAR 0 1
42817: PPUSH
42818: CALL_OW 321
42822: PUSH
42823: LD_INT 2
42825: NONEQUAL
42826: IFFALSE 42840
// begin result := false ;
42828: LD_ADDR_VAR 0 3
42832: PUSH
42833: LD_INT 0
42835: ST_TO_ADDR
// exit ;
42836: POP
42837: POP
42838: GO 42844
// end ;
42840: GO 42805
42842: POP
42843: POP
// end ;
42844: LD_VAR 0 3
42848: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42849: LD_INT 0
42851: PPUSH
42852: PPUSH
42853: PPUSH
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
42860: PPUSH
42861: PPUSH
42862: PPUSH
42863: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42864: LD_VAR 0 1
42868: NOT
42869: IFTRUE 42886
42871: PUSH
42872: LD_VAR 0 1
42876: PPUSH
42877: CALL_OW 257
42881: PUSH
42882: LD_INT 9
42884: NONEQUAL
42885: OR
42886: IFFALSE 42890
// exit ;
42888: GO 43469
// side := GetSide ( unit ) ;
42890: LD_ADDR_VAR 0 9
42894: PUSH
42895: LD_VAR 0 1
42899: PPUSH
42900: CALL_OW 255
42904: ST_TO_ADDR
// tech_space := tech_spacanom ;
42905: LD_ADDR_VAR 0 12
42909: PUSH
42910: LD_INT 29
42912: ST_TO_ADDR
// tech_time := tech_taurad ;
42913: LD_ADDR_VAR 0 13
42917: PUSH
42918: LD_INT 28
42920: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42921: LD_ADDR_VAR 0 11
42925: PUSH
42926: LD_VAR 0 1
42930: PPUSH
42931: CALL_OW 310
42935: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42936: LD_VAR 0 11
42940: PPUSH
42941: CALL_OW 247
42945: PUSH
42946: LD_INT 2
42948: EQUAL
42949: IFFALSE 42953
// exit ;
42951: GO 43469
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42953: LD_ADDR_VAR 0 8
42957: PUSH
42958: LD_INT 81
42960: PUSH
42961: LD_VAR 0 9
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 3
42972: PUSH
42973: LD_INT 21
42975: PUSH
42976: LD_INT 3
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PPUSH
42991: CALL_OW 69
42995: ST_TO_ADDR
// if not tmp then
42996: LD_VAR 0 8
43000: NOT
43001: IFFALSE 43005
// exit ;
43003: GO 43469
// if in_unit then
43005: LD_VAR 0 11
43009: IFFALSE 43033
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43011: LD_ADDR_VAR 0 10
43015: PUSH
43016: LD_VAR 0 8
43020: PPUSH
43021: LD_VAR 0 11
43025: PPUSH
43026: CALL_OW 74
43030: ST_TO_ADDR
43031: GO 43053
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43033: LD_ADDR_VAR 0 10
43037: PUSH
43038: LD_VAR 0 8
43042: PPUSH
43043: LD_VAR 0 1
43047: PPUSH
43048: CALL_OW 74
43052: ST_TO_ADDR
// if not enemy then
43053: LD_VAR 0 10
43057: NOT
43058: IFFALSE 43062
// exit ;
43060: GO 43469
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43062: LD_VAR 0 11
43066: IFFALSE 43088
43068: PUSH
43069: LD_VAR 0 11
43073: PPUSH
43074: LD_VAR 0 10
43078: PPUSH
43079: CALL_OW 296
43083: PUSH
43084: LD_INT 13
43086: GREATER
43087: AND
43088: IFTRUE 43110
43090: PUSH
43091: LD_VAR 0 1
43095: PPUSH
43096: LD_VAR 0 10
43100: PPUSH
43101: CALL_OW 296
43105: PUSH
43106: LD_INT 12
43108: GREATER
43109: OR
43110: IFFALSE 43114
// exit ;
43112: GO 43469
// missile := [ 1 ] ;
43114: LD_ADDR_VAR 0 14
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: EMPTY
43123: LIST
43124: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43125: LD_VAR 0 9
43129: PPUSH
43130: LD_VAR 0 12
43134: PPUSH
43135: CALL_OW 325
43139: IFFALSE 43168
// missile := Replace ( missile , missile + 1 , 2 ) ;
43141: LD_ADDR_VAR 0 14
43145: PUSH
43146: LD_VAR 0 14
43150: PPUSH
43151: LD_VAR 0 14
43155: PUSH
43156: LD_INT 1
43158: PLUS
43159: PPUSH
43160: LD_INT 2
43162: PPUSH
43163: CALL_OW 1
43167: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43168: LD_VAR 0 9
43172: PPUSH
43173: LD_VAR 0 13
43177: PPUSH
43178: CALL_OW 325
43182: IFFALSE 43206
43184: PUSH
43185: LD_VAR 0 10
43189: PPUSH
43190: CALL_OW 255
43194: PPUSH
43195: LD_VAR 0 13
43199: PPUSH
43200: CALL_OW 325
43204: NOT
43205: AND
43206: IFFALSE 43235
// missile := Replace ( missile , missile + 1 , 3 ) ;
43208: LD_ADDR_VAR 0 14
43212: PUSH
43213: LD_VAR 0 14
43217: PPUSH
43218: LD_VAR 0 14
43222: PUSH
43223: LD_INT 1
43225: PLUS
43226: PPUSH
43227: LD_INT 3
43229: PPUSH
43230: CALL_OW 1
43234: ST_TO_ADDR
// if missile < 2 then
43235: LD_VAR 0 14
43239: PUSH
43240: LD_INT 2
43242: LESS
43243: IFFALSE 43247
// exit ;
43245: GO 43469
// x := GetX ( enemy ) ;
43247: LD_ADDR_VAR 0 4
43251: PUSH
43252: LD_VAR 0 10
43256: PPUSH
43257: CALL_OW 250
43261: ST_TO_ADDR
// y := GetY ( enemy ) ;
43262: LD_ADDR_VAR 0 5
43266: PUSH
43267: LD_VAR 0 10
43271: PPUSH
43272: CALL_OW 251
43276: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43277: LD_ADDR_VAR 0 6
43281: PUSH
43282: LD_VAR 0 4
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PPUSH
43291: LD_INT 1
43293: PPUSH
43294: CALL_OW 12
43298: PLUS
43299: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43300: LD_ADDR_VAR 0 7
43304: PUSH
43305: LD_VAR 0 5
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PPUSH
43314: LD_INT 1
43316: PPUSH
43317: CALL_OW 12
43321: PLUS
43322: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43323: LD_VAR 0 6
43327: PPUSH
43328: LD_VAR 0 7
43332: PPUSH
43333: CALL_OW 488
43337: NOT
43338: IFFALSE 43360
// begin _x := x ;
43340: LD_ADDR_VAR 0 6
43344: PUSH
43345: LD_VAR 0 4
43349: ST_TO_ADDR
// _y := y ;
43350: LD_ADDR_VAR 0 7
43354: PUSH
43355: LD_VAR 0 5
43359: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43360: LD_ADDR_VAR 0 3
43364: PUSH
43365: LD_INT 1
43367: PPUSH
43368: LD_VAR 0 14
43372: PPUSH
43373: CALL_OW 12
43377: ST_TO_ADDR
// case i of 1 :
43378: LD_VAR 0 3
43382: PUSH
43383: LD_INT 1
43385: DOUBLE
43386: EQUAL
43387: IFTRUE 43391
43389: GO 43408
43391: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43392: LD_VAR 0 1
43396: PPUSH
43397: LD_VAR 0 10
43401: PPUSH
43402: CALL_OW 115
43406: GO 43469
43408: LD_INT 2
43410: DOUBLE
43411: EQUAL
43412: IFTRUE 43416
43414: GO 43438
43416: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43417: LD_VAR 0 1
43421: PPUSH
43422: LD_VAR 0 6
43426: PPUSH
43427: LD_VAR 0 7
43431: PPUSH
43432: CALL_OW 153
43436: GO 43469
43438: LD_INT 3
43440: DOUBLE
43441: EQUAL
43442: IFTRUE 43446
43444: GO 43468
43446: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43447: LD_VAR 0 1
43451: PPUSH
43452: LD_VAR 0 6
43456: PPUSH
43457: LD_VAR 0 7
43461: PPUSH
43462: CALL_OW 154
43466: GO 43469
43468: POP
// end ;
43469: LD_VAR 0 2
43473: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43474: LD_INT 0
43476: PPUSH
43477: PPUSH
43478: PPUSH
43479: PPUSH
43480: PPUSH
43481: PPUSH
// if not unit or not building then
43482: LD_VAR 0 1
43486: NOT
43487: IFTRUE 43496
43489: PUSH
43490: LD_VAR 0 2
43494: NOT
43495: OR
43496: IFFALSE 43500
// exit ;
43498: GO 43658
// x := GetX ( building ) ;
43500: LD_ADDR_VAR 0 5
43504: PUSH
43505: LD_VAR 0 2
43509: PPUSH
43510: CALL_OW 250
43514: ST_TO_ADDR
// y := GetY ( building ) ;
43515: LD_ADDR_VAR 0 6
43519: PUSH
43520: LD_VAR 0 2
43524: PPUSH
43525: CALL_OW 251
43529: ST_TO_ADDR
// for i := 0 to 5 do
43530: LD_ADDR_VAR 0 4
43534: PUSH
43535: DOUBLE
43536: LD_INT 0
43538: DEC
43539: ST_TO_ADDR
43540: LD_INT 5
43542: PUSH
43543: FOR_TO
43544: IFFALSE 43656
// begin _x := ShiftX ( x , i , 3 ) ;
43546: LD_ADDR_VAR 0 7
43550: PUSH
43551: LD_VAR 0 5
43555: PPUSH
43556: LD_VAR 0 4
43560: PPUSH
43561: LD_INT 3
43563: PPUSH
43564: CALL_OW 272
43568: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43569: LD_ADDR_VAR 0 8
43573: PUSH
43574: LD_VAR 0 6
43578: PPUSH
43579: LD_VAR 0 4
43583: PPUSH
43584: LD_INT 3
43586: PPUSH
43587: CALL_OW 273
43591: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43592: LD_VAR 0 7
43596: PPUSH
43597: LD_VAR 0 8
43601: PPUSH
43602: CALL_OW 488
43606: NOT
43607: IFFALSE 43611
// continue ;
43609: GO 43543
// if HexInfo ( _x , _y ) = 0 then
43611: LD_VAR 0 7
43615: PPUSH
43616: LD_VAR 0 8
43620: PPUSH
43621: CALL_OW 428
43625: PUSH
43626: LD_INT 0
43628: EQUAL
43629: IFFALSE 43654
// begin ComMoveXY ( unit , _x , _y ) ;
43631: LD_VAR 0 1
43635: PPUSH
43636: LD_VAR 0 7
43640: PPUSH
43641: LD_VAR 0 8
43645: PPUSH
43646: CALL_OW 111
// exit ;
43650: POP
43651: POP
43652: GO 43658
// end ; end ;
43654: GO 43543
43656: POP
43657: POP
// end ;
43658: LD_VAR 0 3
43662: RET
// export function ScanBase ( side , base_area ) ; begin
43663: LD_INT 0
43665: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43666: LD_ADDR_VAR 0 3
43670: PUSH
43671: LD_VAR 0 2
43675: PPUSH
43676: LD_INT 81
43678: PUSH
43679: LD_VAR 0 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PPUSH
43688: CALL_OW 70
43692: ST_TO_ADDR
// end ;
43693: LD_VAR 0 3
43697: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43698: LD_INT 0
43700: PPUSH
43701: PPUSH
43702: PPUSH
43703: PPUSH
// result := false ;
43704: LD_ADDR_VAR 0 2
43708: PUSH
43709: LD_INT 0
43711: ST_TO_ADDR
// side := GetSide ( unit ) ;
43712: LD_ADDR_VAR 0 3
43716: PUSH
43717: LD_VAR 0 1
43721: PPUSH
43722: CALL_OW 255
43726: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43727: LD_ADDR_VAR 0 4
43731: PUSH
43732: LD_VAR 0 1
43736: PPUSH
43737: CALL_OW 248
43741: ST_TO_ADDR
// case nat of 1 :
43742: LD_VAR 0 4
43746: PUSH
43747: LD_INT 1
43749: DOUBLE
43750: EQUAL
43751: IFTRUE 43755
43753: GO 43766
43755: POP
// tech := tech_lassight ; 2 :
43756: LD_ADDR_VAR 0 5
43760: PUSH
43761: LD_INT 12
43763: ST_TO_ADDR
43764: GO 43805
43766: LD_INT 2
43768: DOUBLE
43769: EQUAL
43770: IFTRUE 43774
43772: GO 43785
43774: POP
// tech := tech_mortar ; 3 :
43775: LD_ADDR_VAR 0 5
43779: PUSH
43780: LD_INT 41
43782: ST_TO_ADDR
43783: GO 43805
43785: LD_INT 3
43787: DOUBLE
43788: EQUAL
43789: IFTRUE 43793
43791: GO 43804
43793: POP
// tech := tech_bazooka ; end ;
43794: LD_ADDR_VAR 0 5
43798: PUSH
43799: LD_INT 44
43801: ST_TO_ADDR
43802: GO 43805
43804: POP
// if Researched ( side , tech ) then
43805: LD_VAR 0 3
43809: PPUSH
43810: LD_VAR 0 5
43814: PPUSH
43815: CALL_OW 325
43819: IFFALSE 43846
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43821: LD_ADDR_VAR 0 2
43825: PUSH
43826: LD_INT 5
43828: PUSH
43829: LD_INT 8
43831: PUSH
43832: LD_INT 9
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: LIST
43839: PUSH
43840: LD_VAR 0 4
43844: ARRAY
43845: ST_TO_ADDR
// end ;
43846: LD_VAR 0 2
43850: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43851: LD_INT 0
43853: PPUSH
43854: PPUSH
43855: PPUSH
// if not mines then
43856: LD_VAR 0 2
43860: NOT
43861: IFFALSE 43865
// exit ;
43863: GO 44009
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43865: LD_ADDR_VAR 0 5
43869: PUSH
43870: LD_INT 81
43872: PUSH
43873: LD_VAR 0 1
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 3
43884: PUSH
43885: LD_INT 21
43887: PUSH
43888: LD_INT 3
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PPUSH
43903: CALL_OW 69
43907: ST_TO_ADDR
// for i in mines do
43908: LD_ADDR_VAR 0 4
43912: PUSH
43913: LD_VAR 0 2
43917: PUSH
43918: FOR_IN
43919: IFFALSE 44007
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43921: LD_VAR 0 4
43925: PUSH
43926: LD_INT 1
43928: ARRAY
43929: PPUSH
43930: LD_VAR 0 4
43934: PUSH
43935: LD_INT 2
43937: ARRAY
43938: PPUSH
43939: CALL_OW 458
43943: NOT
43944: IFFALSE 43948
// continue ;
43946: GO 43918
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43948: LD_VAR 0 4
43952: PUSH
43953: LD_INT 1
43955: ARRAY
43956: PPUSH
43957: LD_VAR 0 4
43961: PUSH
43962: LD_INT 2
43964: ARRAY
43965: PPUSH
43966: CALL_OW 428
43970: PUSH
43971: LD_VAR 0 5
43975: IN
43976: IFFALSE 44005
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43978: LD_VAR 0 4
43982: PUSH
43983: LD_INT 1
43985: ARRAY
43986: PPUSH
43987: LD_VAR 0 4
43991: PUSH
43992: LD_INT 2
43994: ARRAY
43995: PPUSH
43996: LD_VAR 0 1
44000: PPUSH
44001: CALL_OW 456
// end ;
44005: GO 43918
44007: POP
44008: POP
// end ;
44009: LD_VAR 0 3
44013: RET
// export function Count ( array ) ; begin
44014: LD_INT 0
44016: PPUSH
// result := array + 0 ;
44017: LD_ADDR_VAR 0 2
44021: PUSH
44022: LD_VAR 0 1
44026: PUSH
44027: LD_INT 0
44029: PLUS
44030: ST_TO_ADDR
// end ;
44031: LD_VAR 0 2
44035: RET
// export function IsEmpty ( building ) ; begin
44036: LD_INT 0
44038: PPUSH
// if not building then
44039: LD_VAR 0 1
44043: NOT
44044: IFFALSE 44048
// exit ;
44046: GO 44091
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44048: LD_ADDR_VAR 0 2
44052: PUSH
44053: LD_VAR 0 1
44057: PUSH
44058: LD_INT 22
44060: PUSH
44061: LD_VAR 0 1
44065: PPUSH
44066: CALL_OW 255
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 58
44077: PUSH
44078: EMPTY
44079: LIST
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PPUSH
44085: CALL_OW 69
44089: IN
44090: ST_TO_ADDR
// end ;
44091: LD_VAR 0 2
44095: RET
// export function IsNotFull ( building ) ; var places ; begin
44096: LD_INT 0
44098: PPUSH
44099: PPUSH
// if not building then
44100: LD_VAR 0 1
44104: NOT
44105: IFFALSE 44109
// exit ;
44107: GO 44137
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44109: LD_ADDR_VAR 0 2
44113: PUSH
44114: LD_VAR 0 1
44118: PPUSH
44119: LD_INT 3
44121: PUSH
44122: LD_INT 62
44124: PUSH
44125: EMPTY
44126: LIST
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PPUSH
44132: CALL_OW 72
44136: ST_TO_ADDR
// end ;
44137: LD_VAR 0 2
44141: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44142: LD_INT 0
44144: PPUSH
44145: PPUSH
44146: PPUSH
44147: PPUSH
// tmp := [ ] ;
44148: LD_ADDR_VAR 0 3
44152: PUSH
44153: EMPTY
44154: ST_TO_ADDR
// list := [ ] ;
44155: LD_ADDR_VAR 0 5
44159: PUSH
44160: EMPTY
44161: ST_TO_ADDR
// for i = 16 to 25 do
44162: LD_ADDR_VAR 0 4
44166: PUSH
44167: DOUBLE
44168: LD_INT 16
44170: DEC
44171: ST_TO_ADDR
44172: LD_INT 25
44174: PUSH
44175: FOR_TO
44176: IFFALSE 44249
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44178: LD_ADDR_VAR 0 3
44182: PUSH
44183: LD_VAR 0 3
44187: PUSH
44188: LD_INT 22
44190: PUSH
44191: LD_VAR 0 1
44195: PPUSH
44196: CALL_OW 255
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 91
44207: PUSH
44208: LD_VAR 0 1
44212: PUSH
44213: LD_INT 6
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 30
44223: PUSH
44224: LD_VAR 0 4
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: LIST
44237: PUSH
44238: EMPTY
44239: LIST
44240: PPUSH
44241: CALL_OW 69
44245: ADD
44246: ST_TO_ADDR
44247: GO 44175
44249: POP
44250: POP
// for i = 1 to tmp do
44251: LD_ADDR_VAR 0 4
44255: PUSH
44256: DOUBLE
44257: LD_INT 1
44259: DEC
44260: ST_TO_ADDR
44261: LD_VAR 0 3
44265: PUSH
44266: FOR_TO
44267: IFFALSE 44355
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44269: LD_ADDR_VAR 0 5
44273: PUSH
44274: LD_VAR 0 5
44278: PUSH
44279: LD_VAR 0 3
44283: PUSH
44284: LD_VAR 0 4
44288: ARRAY
44289: PPUSH
44290: CALL_OW 266
44294: PUSH
44295: LD_VAR 0 3
44299: PUSH
44300: LD_VAR 0 4
44304: ARRAY
44305: PPUSH
44306: CALL_OW 250
44310: PUSH
44311: LD_VAR 0 3
44315: PUSH
44316: LD_VAR 0 4
44320: ARRAY
44321: PPUSH
44322: CALL_OW 251
44326: PUSH
44327: LD_VAR 0 3
44331: PUSH
44332: LD_VAR 0 4
44336: ARRAY
44337: PPUSH
44338: CALL_OW 254
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: PUSH
44349: EMPTY
44350: LIST
44351: ADD
44352: ST_TO_ADDR
44353: GO 44266
44355: POP
44356: POP
// result := list ;
44357: LD_ADDR_VAR 0 2
44361: PUSH
44362: LD_VAR 0 5
44366: ST_TO_ADDR
// end ;
44367: LD_VAR 0 2
44371: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44372: LD_INT 0
44374: PPUSH
44375: PPUSH
44376: PPUSH
44377: PPUSH
44378: PPUSH
44379: PPUSH
44380: PPUSH
// if not factory then
44381: LD_VAR 0 1
44385: NOT
44386: IFFALSE 44390
// exit ;
44388: GO 44993
// if control = control_apeman then
44390: LD_VAR 0 4
44394: PUSH
44395: LD_INT 5
44397: EQUAL
44398: IFFALSE 44507
// begin tmp := UnitsInside ( factory ) ;
44400: LD_ADDR_VAR 0 8
44404: PUSH
44405: LD_VAR 0 1
44409: PPUSH
44410: CALL_OW 313
44414: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44415: LD_VAR 0 8
44419: PPUSH
44420: LD_INT 25
44422: PUSH
44423: LD_INT 12
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PPUSH
44430: CALL_OW 72
44434: NOT
44435: IFFALSE 44445
// control := control_manual ;
44437: LD_ADDR_VAR 0 4
44441: PUSH
44442: LD_INT 1
44444: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44445: LD_ADDR_VAR 0 8
44449: PUSH
44450: LD_VAR 0 1
44454: PPUSH
44455: CALL 44142 0 1
44459: ST_TO_ADDR
// if tmp then
44460: LD_VAR 0 8
44464: IFFALSE 44507
// begin for i in tmp do
44466: LD_ADDR_VAR 0 7
44470: PUSH
44471: LD_VAR 0 8
44475: PUSH
44476: FOR_IN
44477: IFFALSE 44505
// if i [ 1 ] = b_ext_radio then
44479: LD_VAR 0 7
44483: PUSH
44484: LD_INT 1
44486: ARRAY
44487: PUSH
44488: LD_INT 22
44490: EQUAL
44491: IFFALSE 44503
// begin control := control_remote ;
44493: LD_ADDR_VAR 0 4
44497: PUSH
44498: LD_INT 2
44500: ST_TO_ADDR
// break ;
44501: GO 44505
// end ;
44503: GO 44476
44505: POP
44506: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44507: LD_VAR 0 1
44511: PPUSH
44512: LD_VAR 0 2
44516: PPUSH
44517: LD_VAR 0 3
44521: PPUSH
44522: LD_VAR 0 4
44526: PPUSH
44527: LD_VAR 0 5
44531: PPUSH
44532: CALL_OW 448
44536: IFFALSE 44571
// begin result := [ chassis , engine , control , weapon ] ;
44538: LD_ADDR_VAR 0 6
44542: PUSH
44543: LD_VAR 0 2
44547: PUSH
44548: LD_VAR 0 3
44552: PUSH
44553: LD_VAR 0 4
44557: PUSH
44558: LD_VAR 0 5
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: ST_TO_ADDR
// exit ;
44569: GO 44993
// end ; _chassis := AvailableChassisList ( factory ) ;
44571: LD_ADDR_VAR 0 9
44575: PUSH
44576: LD_VAR 0 1
44580: PPUSH
44581: CALL_OW 475
44585: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44586: LD_ADDR_VAR 0 11
44590: PUSH
44591: LD_VAR 0 1
44595: PPUSH
44596: CALL_OW 476
44600: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44601: LD_ADDR_VAR 0 12
44605: PUSH
44606: LD_VAR 0 1
44610: PPUSH
44611: CALL_OW 477
44615: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44616: LD_ADDR_VAR 0 10
44620: PUSH
44621: LD_VAR 0 1
44625: PPUSH
44626: CALL_OW 478
44630: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44631: LD_VAR 0 9
44635: NOT
44636: IFTRUE 44645
44638: PUSH
44639: LD_VAR 0 11
44643: NOT
44644: OR
44645: IFTRUE 44654
44647: PUSH
44648: LD_VAR 0 12
44652: NOT
44653: OR
44654: IFTRUE 44663
44656: PUSH
44657: LD_VAR 0 10
44661: NOT
44662: OR
44663: IFFALSE 44698
// begin result := [ chassis , engine , control , weapon ] ;
44665: LD_ADDR_VAR 0 6
44669: PUSH
44670: LD_VAR 0 2
44674: PUSH
44675: LD_VAR 0 3
44679: PUSH
44680: LD_VAR 0 4
44684: PUSH
44685: LD_VAR 0 5
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: ST_TO_ADDR
// exit ;
44696: GO 44993
// end ; if not chassis in _chassis then
44698: LD_VAR 0 2
44702: PUSH
44703: LD_VAR 0 9
44707: IN
44708: NOT
44709: IFFALSE 44735
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44711: LD_ADDR_VAR 0 2
44715: PUSH
44716: LD_VAR 0 9
44720: PUSH
44721: LD_INT 1
44723: PPUSH
44724: LD_VAR 0 9
44728: PPUSH
44729: CALL_OW 12
44733: ARRAY
44734: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44735: LD_VAR 0 2
44739: PPUSH
44740: LD_VAR 0 3
44744: PPUSH
44745: CALL 44998 0 2
44749: NOT
44750: IFFALSE 44811
// repeat engine := _engine [ 1 ] ;
44752: LD_ADDR_VAR 0 3
44756: PUSH
44757: LD_VAR 0 11
44761: PUSH
44762: LD_INT 1
44764: ARRAY
44765: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44766: LD_ADDR_VAR 0 11
44770: PUSH
44771: LD_VAR 0 11
44775: PPUSH
44776: LD_INT 1
44778: PPUSH
44779: CALL_OW 3
44783: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44784: LD_VAR 0 2
44788: PPUSH
44789: LD_VAR 0 3
44793: PPUSH
44794: CALL 44998 0 2
44798: IFTRUE 44809
44800: PUSH
44801: LD_VAR 0 11
44805: PUSH
44806: EMPTY
44807: EQUAL
44808: OR
44809: IFFALSE 44752
// if not control in _control then
44811: LD_VAR 0 4
44815: PUSH
44816: LD_VAR 0 12
44820: IN
44821: NOT
44822: IFFALSE 44848
// control := _control [ rand ( 1 , _control ) ] ;
44824: LD_ADDR_VAR 0 4
44828: PUSH
44829: LD_VAR 0 12
44833: PUSH
44834: LD_INT 1
44836: PPUSH
44837: LD_VAR 0 12
44841: PPUSH
44842: CALL_OW 12
44846: ARRAY
44847: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44848: LD_VAR 0 2
44852: PPUSH
44853: LD_VAR 0 5
44857: PPUSH
44858: CALL 45220 0 2
44862: NOT
44863: IFFALSE 44924
// repeat weapon := _weapon [ 1 ] ;
44865: LD_ADDR_VAR 0 5
44869: PUSH
44870: LD_VAR 0 10
44874: PUSH
44875: LD_INT 1
44877: ARRAY
44878: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44879: LD_ADDR_VAR 0 10
44883: PUSH
44884: LD_VAR 0 10
44888: PPUSH
44889: LD_INT 1
44891: PPUSH
44892: CALL_OW 3
44896: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44897: LD_VAR 0 2
44901: PPUSH
44902: LD_VAR 0 5
44906: PPUSH
44907: CALL 45220 0 2
44911: IFTRUE 44922
44913: PUSH
44914: LD_VAR 0 10
44918: PUSH
44919: EMPTY
44920: EQUAL
44921: OR
44922: IFFALSE 44865
// result := [ ] ;
44924: LD_ADDR_VAR 0 6
44928: PUSH
44929: EMPTY
44930: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44931: LD_VAR 0 1
44935: PPUSH
44936: LD_VAR 0 2
44940: PPUSH
44941: LD_VAR 0 3
44945: PPUSH
44946: LD_VAR 0 4
44950: PPUSH
44951: LD_VAR 0 5
44955: PPUSH
44956: CALL_OW 448
44960: IFFALSE 44993
// result := [ chassis , engine , control , weapon ] ;
44962: LD_ADDR_VAR 0 6
44966: PUSH
44967: LD_VAR 0 2
44971: PUSH
44972: LD_VAR 0 3
44976: PUSH
44977: LD_VAR 0 4
44981: PUSH
44982: LD_VAR 0 5
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: ST_TO_ADDR
// end ;
44993: LD_VAR 0 6
44997: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44998: LD_INT 0
45000: PPUSH
// if not chassis or not engine then
45001: LD_VAR 0 1
45005: NOT
45006: IFTRUE 45015
45008: PUSH
45009: LD_VAR 0 2
45013: NOT
45014: OR
45015: IFFALSE 45019
// exit ;
45017: GO 45215
// case engine of engine_solar :
45019: LD_VAR 0 2
45023: PUSH
45024: LD_INT 2
45026: DOUBLE
45027: EQUAL
45028: IFTRUE 45032
45030: GO 45070
45032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45033: LD_ADDR_VAR 0 3
45037: PUSH
45038: LD_INT 11
45040: PUSH
45041: LD_INT 12
45043: PUSH
45044: LD_INT 13
45046: PUSH
45047: LD_INT 14
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: LD_INT 3
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: ST_TO_ADDR
45068: GO 45199
45070: LD_INT 1
45072: DOUBLE
45073: EQUAL
45074: IFTRUE 45078
45076: GO 45140
45078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45079: LD_ADDR_VAR 0 3
45083: PUSH
45084: LD_INT 11
45086: PUSH
45087: LD_INT 12
45089: PUSH
45090: LD_INT 13
45092: PUSH
45093: LD_INT 14
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: LD_INT 3
45104: PUSH
45105: LD_INT 4
45107: PUSH
45108: LD_INT 5
45110: PUSH
45111: LD_INT 21
45113: PUSH
45114: LD_INT 23
45116: PUSH
45117: LD_INT 22
45119: PUSH
45120: LD_INT 24
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
45138: GO 45199
45140: LD_INT 3
45142: DOUBLE
45143: EQUAL
45144: IFTRUE 45148
45146: GO 45198
45148: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45149: LD_ADDR_VAR 0 3
45153: PUSH
45154: LD_INT 13
45156: PUSH
45157: LD_INT 14
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: LD_INT 3
45165: PUSH
45166: LD_INT 4
45168: PUSH
45169: LD_INT 5
45171: PUSH
45172: LD_INT 21
45174: PUSH
45175: LD_INT 22
45177: PUSH
45178: LD_INT 23
45180: PUSH
45181: LD_INT 24
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: ST_TO_ADDR
45196: GO 45199
45198: POP
// result := ( chassis in result ) ;
45199: LD_ADDR_VAR 0 3
45203: PUSH
45204: LD_VAR 0 1
45208: PUSH
45209: LD_VAR 0 3
45213: IN
45214: ST_TO_ADDR
// end ;
45215: LD_VAR 0 3
45219: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45220: LD_INT 0
45222: PPUSH
// if not chassis or not weapon then
45223: LD_VAR 0 1
45227: NOT
45228: IFTRUE 45237
45230: PUSH
45231: LD_VAR 0 2
45235: NOT
45236: OR
45237: IFFALSE 45241
// exit ;
45239: GO 46301
// case weapon of us_machine_gun :
45241: LD_VAR 0 2
45245: PUSH
45246: LD_INT 2
45248: DOUBLE
45249: EQUAL
45250: IFTRUE 45254
45252: GO 45284
45254: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45255: LD_ADDR_VAR 0 3
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: LD_INT 3
45268: PUSH
45269: LD_INT 4
45271: PUSH
45272: LD_INT 5
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: ST_TO_ADDR
45282: GO 46285
45284: LD_INT 3
45286: DOUBLE
45287: EQUAL
45288: IFTRUE 45292
45290: GO 45322
45292: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45293: LD_ADDR_VAR 0 3
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: LD_INT 3
45306: PUSH
45307: LD_INT 4
45309: PUSH
45310: LD_INT 5
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: ST_TO_ADDR
45320: GO 46285
45322: LD_INT 11
45324: DOUBLE
45325: EQUAL
45326: IFTRUE 45330
45328: GO 45360
45330: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45331: LD_ADDR_VAR 0 3
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: LD_INT 3
45344: PUSH
45345: LD_INT 4
45347: PUSH
45348: LD_INT 5
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: ST_TO_ADDR
45358: GO 46285
45360: LD_INT 4
45362: DOUBLE
45363: EQUAL
45364: IFTRUE 45368
45366: GO 45394
45368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45369: LD_ADDR_VAR 0 3
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 3
45379: PUSH
45380: LD_INT 4
45382: PUSH
45383: LD_INT 5
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: ST_TO_ADDR
45392: GO 46285
45394: LD_INT 5
45396: DOUBLE
45397: EQUAL
45398: IFTRUE 45402
45400: GO 45428
45402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45403: LD_ADDR_VAR 0 3
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: LD_INT 3
45413: PUSH
45414: LD_INT 4
45416: PUSH
45417: LD_INT 5
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: ST_TO_ADDR
45426: GO 46285
45428: LD_INT 9
45430: DOUBLE
45431: EQUAL
45432: IFTRUE 45436
45434: GO 45462
45436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45437: LD_ADDR_VAR 0 3
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: LD_INT 4
45450: PUSH
45451: LD_INT 5
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: ST_TO_ADDR
45460: GO 46285
45462: LD_INT 7
45464: DOUBLE
45465: EQUAL
45466: IFTRUE 45470
45468: GO 45496
45470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45471: LD_ADDR_VAR 0 3
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 3
45481: PUSH
45482: LD_INT 4
45484: PUSH
45485: LD_INT 5
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: ST_TO_ADDR
45494: GO 46285
45496: LD_INT 12
45498: DOUBLE
45499: EQUAL
45500: IFTRUE 45504
45502: GO 45530
45504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45505: LD_ADDR_VAR 0 3
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: LD_INT 3
45515: PUSH
45516: LD_INT 4
45518: PUSH
45519: LD_INT 5
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
45528: GO 46285
45530: LD_INT 13
45532: DOUBLE
45533: EQUAL
45534: IFTRUE 45538
45536: GO 45564
45538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45539: LD_ADDR_VAR 0 3
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: LD_INT 3
45549: PUSH
45550: LD_INT 4
45552: PUSH
45553: LD_INT 5
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: ST_TO_ADDR
45562: GO 46285
45564: LD_INT 14
45566: DOUBLE
45567: EQUAL
45568: IFTRUE 45572
45570: GO 45590
45572: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45573: LD_ADDR_VAR 0 3
45577: PUSH
45578: LD_INT 4
45580: PUSH
45581: LD_INT 5
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: ST_TO_ADDR
45588: GO 46285
45590: LD_INT 6
45592: DOUBLE
45593: EQUAL
45594: IFTRUE 45598
45596: GO 45616
45598: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45599: LD_ADDR_VAR 0 3
45603: PUSH
45604: LD_INT 4
45606: PUSH
45607: LD_INT 5
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: ST_TO_ADDR
45614: GO 46285
45616: LD_INT 10
45618: DOUBLE
45619: EQUAL
45620: IFTRUE 45624
45622: GO 45642
45624: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45625: LD_ADDR_VAR 0 3
45629: PUSH
45630: LD_INT 4
45632: PUSH
45633: LD_INT 5
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: ST_TO_ADDR
45640: GO 46285
45642: LD_INT 22
45644: DOUBLE
45645: EQUAL
45646: IFTRUE 45650
45648: GO 45676
45650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45651: LD_ADDR_VAR 0 3
45655: PUSH
45656: LD_INT 11
45658: PUSH
45659: LD_INT 12
45661: PUSH
45662: LD_INT 13
45664: PUSH
45665: LD_INT 14
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: ST_TO_ADDR
45674: GO 46285
45676: LD_INT 23
45678: DOUBLE
45679: EQUAL
45680: IFTRUE 45684
45682: GO 45710
45684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45685: LD_ADDR_VAR 0 3
45689: PUSH
45690: LD_INT 11
45692: PUSH
45693: LD_INT 12
45695: PUSH
45696: LD_INT 13
45698: PUSH
45699: LD_INT 14
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: ST_TO_ADDR
45708: GO 46285
45710: LD_INT 24
45712: DOUBLE
45713: EQUAL
45714: IFTRUE 45718
45716: GO 45744
45718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45719: LD_ADDR_VAR 0 3
45723: PUSH
45724: LD_INT 11
45726: PUSH
45727: LD_INT 12
45729: PUSH
45730: LD_INT 13
45732: PUSH
45733: LD_INT 14
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: ST_TO_ADDR
45742: GO 46285
45744: LD_INT 30
45746: DOUBLE
45747: EQUAL
45748: IFTRUE 45752
45750: GO 45778
45752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45753: LD_ADDR_VAR 0 3
45757: PUSH
45758: LD_INT 11
45760: PUSH
45761: LD_INT 12
45763: PUSH
45764: LD_INT 13
45766: PUSH
45767: LD_INT 14
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: ST_TO_ADDR
45776: GO 46285
45778: LD_INT 25
45780: DOUBLE
45781: EQUAL
45782: IFTRUE 45786
45784: GO 45804
45786: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45787: LD_ADDR_VAR 0 3
45791: PUSH
45792: LD_INT 13
45794: PUSH
45795: LD_INT 14
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: ST_TO_ADDR
45802: GO 46285
45804: LD_INT 27
45806: DOUBLE
45807: EQUAL
45808: IFTRUE 45812
45810: GO 45830
45812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45813: LD_ADDR_VAR 0 3
45817: PUSH
45818: LD_INT 13
45820: PUSH
45821: LD_INT 14
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: ST_TO_ADDR
45828: GO 46285
45830: LD_INT 92
45832: DOUBLE
45833: EQUAL
45834: IFTRUE 45838
45836: GO 45864
45838: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45839: LD_ADDR_VAR 0 3
45843: PUSH
45844: LD_INT 11
45846: PUSH
45847: LD_INT 12
45849: PUSH
45850: LD_INT 13
45852: PUSH
45853: LD_INT 14
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: ST_TO_ADDR
45862: GO 46285
45864: LD_INT 28
45866: DOUBLE
45867: EQUAL
45868: IFTRUE 45872
45870: GO 45890
45872: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45873: LD_ADDR_VAR 0 3
45877: PUSH
45878: LD_INT 13
45880: PUSH
45881: LD_INT 14
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: ST_TO_ADDR
45888: GO 46285
45890: LD_INT 29
45892: DOUBLE
45893: EQUAL
45894: IFTRUE 45898
45896: GO 45916
45898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45899: LD_ADDR_VAR 0 3
45903: PUSH
45904: LD_INT 13
45906: PUSH
45907: LD_INT 14
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: ST_TO_ADDR
45914: GO 46285
45916: LD_INT 31
45918: DOUBLE
45919: EQUAL
45920: IFTRUE 45924
45922: GO 45942
45924: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45925: LD_ADDR_VAR 0 3
45929: PUSH
45930: LD_INT 13
45932: PUSH
45933: LD_INT 14
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: ST_TO_ADDR
45940: GO 46285
45942: LD_INT 26
45944: DOUBLE
45945: EQUAL
45946: IFTRUE 45950
45948: GO 45968
45950: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45951: LD_ADDR_VAR 0 3
45955: PUSH
45956: LD_INT 13
45958: PUSH
45959: LD_INT 14
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: ST_TO_ADDR
45966: GO 46285
45968: LD_INT 42
45970: DOUBLE
45971: EQUAL
45972: IFTRUE 45976
45974: GO 46002
45976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45977: LD_ADDR_VAR 0 3
45981: PUSH
45982: LD_INT 21
45984: PUSH
45985: LD_INT 22
45987: PUSH
45988: LD_INT 23
45990: PUSH
45991: LD_INT 24
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: ST_TO_ADDR
46000: GO 46285
46002: LD_INT 43
46004: DOUBLE
46005: EQUAL
46006: IFTRUE 46010
46008: GO 46036
46010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46011: LD_ADDR_VAR 0 3
46015: PUSH
46016: LD_INT 21
46018: PUSH
46019: LD_INT 22
46021: PUSH
46022: LD_INT 23
46024: PUSH
46025: LD_INT 24
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: ST_TO_ADDR
46034: GO 46285
46036: LD_INT 44
46038: DOUBLE
46039: EQUAL
46040: IFTRUE 46044
46042: GO 46070
46044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46045: LD_ADDR_VAR 0 3
46049: PUSH
46050: LD_INT 21
46052: PUSH
46053: LD_INT 22
46055: PUSH
46056: LD_INT 23
46058: PUSH
46059: LD_INT 24
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: ST_TO_ADDR
46068: GO 46285
46070: LD_INT 45
46072: DOUBLE
46073: EQUAL
46074: IFTRUE 46078
46076: GO 46104
46078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46079: LD_ADDR_VAR 0 3
46083: PUSH
46084: LD_INT 21
46086: PUSH
46087: LD_INT 22
46089: PUSH
46090: LD_INT 23
46092: PUSH
46093: LD_INT 24
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: ST_TO_ADDR
46102: GO 46285
46104: LD_INT 49
46106: DOUBLE
46107: EQUAL
46108: IFTRUE 46112
46110: GO 46138
46112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46113: LD_ADDR_VAR 0 3
46117: PUSH
46118: LD_INT 21
46120: PUSH
46121: LD_INT 22
46123: PUSH
46124: LD_INT 23
46126: PUSH
46127: LD_INT 24
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: ST_TO_ADDR
46136: GO 46285
46138: LD_INT 51
46140: DOUBLE
46141: EQUAL
46142: IFTRUE 46146
46144: GO 46172
46146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46147: LD_ADDR_VAR 0 3
46151: PUSH
46152: LD_INT 21
46154: PUSH
46155: LD_INT 22
46157: PUSH
46158: LD_INT 23
46160: PUSH
46161: LD_INT 24
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: ST_TO_ADDR
46170: GO 46285
46172: LD_INT 52
46174: DOUBLE
46175: EQUAL
46176: IFTRUE 46180
46178: GO 46206
46180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46181: LD_ADDR_VAR 0 3
46185: PUSH
46186: LD_INT 21
46188: PUSH
46189: LD_INT 22
46191: PUSH
46192: LD_INT 23
46194: PUSH
46195: LD_INT 24
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: ST_TO_ADDR
46204: GO 46285
46206: LD_INT 53
46208: DOUBLE
46209: EQUAL
46210: IFTRUE 46214
46212: GO 46232
46214: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46215: LD_ADDR_VAR 0 3
46219: PUSH
46220: LD_INT 23
46222: PUSH
46223: LD_INT 24
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: ST_TO_ADDR
46230: GO 46285
46232: LD_INT 46
46234: DOUBLE
46235: EQUAL
46236: IFTRUE 46240
46238: GO 46258
46240: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46241: LD_ADDR_VAR 0 3
46245: PUSH
46246: LD_INT 23
46248: PUSH
46249: LD_INT 24
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: ST_TO_ADDR
46256: GO 46285
46258: LD_INT 47
46260: DOUBLE
46261: EQUAL
46262: IFTRUE 46266
46264: GO 46284
46266: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46267: LD_ADDR_VAR 0 3
46271: PUSH
46272: LD_INT 23
46274: PUSH
46275: LD_INT 24
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: ST_TO_ADDR
46282: GO 46285
46284: POP
// result := ( chassis in result ) ;
46285: LD_ADDR_VAR 0 3
46289: PUSH
46290: LD_VAR 0 1
46294: PUSH
46295: LD_VAR 0 3
46299: IN
46300: ST_TO_ADDR
// end ;
46301: LD_VAR 0 3
46305: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46306: LD_INT 0
46308: PPUSH
46309: PPUSH
46310: PPUSH
46311: PPUSH
46312: PPUSH
46313: PPUSH
46314: PPUSH
// result := array ;
46315: LD_ADDR_VAR 0 5
46319: PUSH
46320: LD_VAR 0 1
46324: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46325: LD_VAR 0 1
46329: NOT
46330: IFTRUE 46339
46332: PUSH
46333: LD_VAR 0 2
46337: NOT
46338: OR
46339: IFTRUE 46348
46341: PUSH
46342: LD_VAR 0 3
46346: NOT
46347: OR
46348: IFTRUE 46362
46350: PUSH
46351: LD_VAR 0 2
46355: PUSH
46356: LD_VAR 0 1
46360: GREATER
46361: OR
46362: IFTRUE 46376
46364: PUSH
46365: LD_VAR 0 3
46369: PUSH
46370: LD_VAR 0 1
46374: GREATER
46375: OR
46376: IFFALSE 46380
// exit ;
46378: GO 46676
// if direction then
46380: LD_VAR 0 4
46384: IFFALSE 46448
// begin d := 1 ;
46386: LD_ADDR_VAR 0 9
46390: PUSH
46391: LD_INT 1
46393: ST_TO_ADDR
// if i_from > i_to then
46394: LD_VAR 0 2
46398: PUSH
46399: LD_VAR 0 3
46403: GREATER
46404: IFFALSE 46430
// length := ( array - i_from ) + i_to else
46406: LD_ADDR_VAR 0 11
46410: PUSH
46411: LD_VAR 0 1
46415: PUSH
46416: LD_VAR 0 2
46420: MINUS
46421: PUSH
46422: LD_VAR 0 3
46426: PLUS
46427: ST_TO_ADDR
46428: GO 46446
// length := i_to - i_from ;
46430: LD_ADDR_VAR 0 11
46434: PUSH
46435: LD_VAR 0 3
46439: PUSH
46440: LD_VAR 0 2
46444: MINUS
46445: ST_TO_ADDR
// end else
46446: GO 46509
// begin d := - 1 ;
46448: LD_ADDR_VAR 0 9
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: ST_TO_ADDR
// if i_from > i_to then
46457: LD_VAR 0 2
46461: PUSH
46462: LD_VAR 0 3
46466: GREATER
46467: IFFALSE 46487
// length := i_from - i_to else
46469: LD_ADDR_VAR 0 11
46473: PUSH
46474: LD_VAR 0 2
46478: PUSH
46479: LD_VAR 0 3
46483: MINUS
46484: ST_TO_ADDR
46485: GO 46509
// length := ( array - i_to ) + i_from ;
46487: LD_ADDR_VAR 0 11
46491: PUSH
46492: LD_VAR 0 1
46496: PUSH
46497: LD_VAR 0 3
46501: MINUS
46502: PUSH
46503: LD_VAR 0 2
46507: PLUS
46508: ST_TO_ADDR
// end ; if not length then
46509: LD_VAR 0 11
46513: NOT
46514: IFFALSE 46518
// exit ;
46516: GO 46676
// tmp := array ;
46518: LD_ADDR_VAR 0 10
46522: PUSH
46523: LD_VAR 0 1
46527: ST_TO_ADDR
// for i = 1 to length do
46528: LD_ADDR_VAR 0 6
46532: PUSH
46533: DOUBLE
46534: LD_INT 1
46536: DEC
46537: ST_TO_ADDR
46538: LD_VAR 0 11
46542: PUSH
46543: FOR_TO
46544: IFFALSE 46664
// begin for j = 1 to array do
46546: LD_ADDR_VAR 0 7
46550: PUSH
46551: DOUBLE
46552: LD_INT 1
46554: DEC
46555: ST_TO_ADDR
46556: LD_VAR 0 1
46560: PUSH
46561: FOR_TO
46562: IFFALSE 46650
// begin k := j + d ;
46564: LD_ADDR_VAR 0 8
46568: PUSH
46569: LD_VAR 0 7
46573: PUSH
46574: LD_VAR 0 9
46578: PLUS
46579: ST_TO_ADDR
// if k > array then
46580: LD_VAR 0 8
46584: PUSH
46585: LD_VAR 0 1
46589: GREATER
46590: IFFALSE 46600
// k := 1 ;
46592: LD_ADDR_VAR 0 8
46596: PUSH
46597: LD_INT 1
46599: ST_TO_ADDR
// if not k then
46600: LD_VAR 0 8
46604: NOT
46605: IFFALSE 46617
// k := array ;
46607: LD_ADDR_VAR 0 8
46611: PUSH
46612: LD_VAR 0 1
46616: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46617: LD_ADDR_VAR 0 10
46621: PUSH
46622: LD_VAR 0 10
46626: PPUSH
46627: LD_VAR 0 8
46631: PPUSH
46632: LD_VAR 0 1
46636: PUSH
46637: LD_VAR 0 7
46641: ARRAY
46642: PPUSH
46643: CALL_OW 1
46647: ST_TO_ADDR
// end ;
46648: GO 46561
46650: POP
46651: POP
// array := tmp ;
46652: LD_ADDR_VAR 0 1
46656: PUSH
46657: LD_VAR 0 10
46661: ST_TO_ADDR
// end ;
46662: GO 46543
46664: POP
46665: POP
// result := array ;
46666: LD_ADDR_VAR 0 5
46670: PUSH
46671: LD_VAR 0 1
46675: ST_TO_ADDR
// end ;
46676: LD_VAR 0 5
46680: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46681: LD_INT 0
46683: PPUSH
46684: PPUSH
// result := 0 ;
46685: LD_ADDR_VAR 0 3
46689: PUSH
46690: LD_INT 0
46692: ST_TO_ADDR
// if not array or not value in array then
46693: LD_VAR 0 1
46697: NOT
46698: IFTRUE 46713
46700: PUSH
46701: LD_VAR 0 2
46705: PUSH
46706: LD_VAR 0 1
46710: IN
46711: NOT
46712: OR
46713: IFFALSE 46717
// exit ;
46715: GO 46771
// for i = 1 to array do
46717: LD_ADDR_VAR 0 4
46721: PUSH
46722: DOUBLE
46723: LD_INT 1
46725: DEC
46726: ST_TO_ADDR
46727: LD_VAR 0 1
46731: PUSH
46732: FOR_TO
46733: IFFALSE 46769
// if value = array [ i ] then
46735: LD_VAR 0 2
46739: PUSH
46740: LD_VAR 0 1
46744: PUSH
46745: LD_VAR 0 4
46749: ARRAY
46750: EQUAL
46751: IFFALSE 46767
// begin result := i ;
46753: LD_ADDR_VAR 0 3
46757: PUSH
46758: LD_VAR 0 4
46762: ST_TO_ADDR
// exit ;
46763: POP
46764: POP
46765: GO 46771
// end ;
46767: GO 46732
46769: POP
46770: POP
// end ;
46771: LD_VAR 0 3
46775: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46776: LD_INT 0
46778: PPUSH
// vc_chassis := chassis ;
46779: LD_ADDR_OWVAR 37
46783: PUSH
46784: LD_VAR 0 1
46788: ST_TO_ADDR
// vc_engine := engine ;
46789: LD_ADDR_OWVAR 39
46793: PUSH
46794: LD_VAR 0 2
46798: ST_TO_ADDR
// vc_control := control ;
46799: LD_ADDR_OWVAR 38
46803: PUSH
46804: LD_VAR 0 3
46808: ST_TO_ADDR
// vc_weapon := weapon ;
46809: LD_ADDR_OWVAR 40
46813: PUSH
46814: LD_VAR 0 4
46818: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46819: LD_ADDR_OWVAR 41
46823: PUSH
46824: LD_VAR 0 5
46828: ST_TO_ADDR
// end ;
46829: LD_VAR 0 6
46833: RET
// export function WantPlant ( unit ) ; var task ; begin
46834: LD_INT 0
46836: PPUSH
46837: PPUSH
// result := false ;
46838: LD_ADDR_VAR 0 2
46842: PUSH
46843: LD_INT 0
46845: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46846: LD_ADDR_VAR 0 3
46850: PUSH
46851: LD_VAR 0 1
46855: PPUSH
46856: CALL_OW 437
46860: ST_TO_ADDR
// if task then
46861: LD_VAR 0 3
46865: IFFALSE 46893
// if task [ 1 ] [ 1 ] = p then
46867: LD_VAR 0 3
46871: PUSH
46872: LD_INT 1
46874: ARRAY
46875: PUSH
46876: LD_INT 1
46878: ARRAY
46879: PUSH
46880: LD_STRING p
46882: EQUAL
46883: IFFALSE 46893
// result := true ;
46885: LD_ADDR_VAR 0 2
46889: PUSH
46890: LD_INT 1
46892: ST_TO_ADDR
// end ;
46893: LD_VAR 0 2
46897: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46898: LD_INT 0
46900: PPUSH
46901: PPUSH
46902: PPUSH
46903: PPUSH
// if pos < 1 then
46904: LD_VAR 0 2
46908: PUSH
46909: LD_INT 1
46911: LESS
46912: IFFALSE 46916
// exit ;
46914: GO 47219
// if pos = 1 then
46916: LD_VAR 0 2
46920: PUSH
46921: LD_INT 1
46923: EQUAL
46924: IFFALSE 46957
// result := Replace ( arr , pos [ 1 ] , value ) else
46926: LD_ADDR_VAR 0 4
46930: PUSH
46931: LD_VAR 0 1
46935: PPUSH
46936: LD_VAR 0 2
46940: PUSH
46941: LD_INT 1
46943: ARRAY
46944: PPUSH
46945: LD_VAR 0 3
46949: PPUSH
46950: CALL_OW 1
46954: ST_TO_ADDR
46955: GO 47219
// begin tmp := arr ;
46957: LD_ADDR_VAR 0 6
46961: PUSH
46962: LD_VAR 0 1
46966: ST_TO_ADDR
// s_arr := [ tmp ] ;
46967: LD_ADDR_VAR 0 7
46971: PUSH
46972: LD_VAR 0 6
46976: PUSH
46977: EMPTY
46978: LIST
46979: ST_TO_ADDR
// for i = 1 to pos - 1 do
46980: LD_ADDR_VAR 0 5
46984: PUSH
46985: DOUBLE
46986: LD_INT 1
46988: DEC
46989: ST_TO_ADDR
46990: LD_VAR 0 2
46994: PUSH
46995: LD_INT 1
46997: MINUS
46998: PUSH
46999: FOR_TO
47000: IFFALSE 47045
// begin tmp := tmp [ pos [ i ] ] ;
47002: LD_ADDR_VAR 0 6
47006: PUSH
47007: LD_VAR 0 6
47011: PUSH
47012: LD_VAR 0 2
47016: PUSH
47017: LD_VAR 0 5
47021: ARRAY
47022: ARRAY
47023: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47024: LD_ADDR_VAR 0 7
47028: PUSH
47029: LD_VAR 0 7
47033: PUSH
47034: LD_VAR 0 6
47038: PUSH
47039: EMPTY
47040: LIST
47041: ADD
47042: ST_TO_ADDR
// end ;
47043: GO 46999
47045: POP
47046: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47047: LD_ADDR_VAR 0 6
47051: PUSH
47052: LD_VAR 0 6
47056: PPUSH
47057: LD_VAR 0 2
47061: PUSH
47062: LD_VAR 0 2
47066: ARRAY
47067: PPUSH
47068: LD_VAR 0 3
47072: PPUSH
47073: CALL_OW 1
47077: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47078: LD_ADDR_VAR 0 7
47082: PUSH
47083: LD_VAR 0 7
47087: PPUSH
47088: LD_VAR 0 7
47092: PPUSH
47093: LD_VAR 0 6
47097: PPUSH
47098: CALL_OW 1
47102: ST_TO_ADDR
// for i = s_arr downto 2 do
47103: LD_ADDR_VAR 0 5
47107: PUSH
47108: DOUBLE
47109: LD_VAR 0 7
47113: INC
47114: ST_TO_ADDR
47115: LD_INT 2
47117: PUSH
47118: FOR_DOWNTO
47119: IFFALSE 47203
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47121: LD_ADDR_VAR 0 6
47125: PUSH
47126: LD_VAR 0 7
47130: PUSH
47131: LD_VAR 0 5
47135: PUSH
47136: LD_INT 1
47138: MINUS
47139: ARRAY
47140: PPUSH
47141: LD_VAR 0 2
47145: PUSH
47146: LD_VAR 0 5
47150: PUSH
47151: LD_INT 1
47153: MINUS
47154: ARRAY
47155: PPUSH
47156: LD_VAR 0 7
47160: PUSH
47161: LD_VAR 0 5
47165: ARRAY
47166: PPUSH
47167: CALL_OW 1
47171: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47172: LD_ADDR_VAR 0 7
47176: PUSH
47177: LD_VAR 0 7
47181: PPUSH
47182: LD_VAR 0 5
47186: PUSH
47187: LD_INT 1
47189: MINUS
47190: PPUSH
47191: LD_VAR 0 6
47195: PPUSH
47196: CALL_OW 1
47200: ST_TO_ADDR
// end ;
47201: GO 47118
47203: POP
47204: POP
// result := s_arr [ 1 ] ;
47205: LD_ADDR_VAR 0 4
47209: PUSH
47210: LD_VAR 0 7
47214: PUSH
47215: LD_INT 1
47217: ARRAY
47218: ST_TO_ADDR
// end ; end ;
47219: LD_VAR 0 4
47223: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47224: LD_INT 0
47226: PPUSH
47227: PPUSH
// if not list then
47228: LD_VAR 0 1
47232: NOT
47233: IFFALSE 47237
// exit ;
47235: GO 47328
// i := list [ pos1 ] ;
47237: LD_ADDR_VAR 0 5
47241: PUSH
47242: LD_VAR 0 1
47246: PUSH
47247: LD_VAR 0 2
47251: ARRAY
47252: ST_TO_ADDR
// if not i then
47253: LD_VAR 0 5
47257: NOT
47258: IFFALSE 47262
// exit ;
47260: GO 47328
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47262: LD_ADDR_VAR 0 1
47266: PUSH
47267: LD_VAR 0 1
47271: PPUSH
47272: LD_VAR 0 2
47276: PPUSH
47277: LD_VAR 0 1
47281: PUSH
47282: LD_VAR 0 3
47286: ARRAY
47287: PPUSH
47288: CALL_OW 1
47292: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47293: LD_ADDR_VAR 0 1
47297: PUSH
47298: LD_VAR 0 1
47302: PPUSH
47303: LD_VAR 0 3
47307: PPUSH
47308: LD_VAR 0 5
47312: PPUSH
47313: CALL_OW 1
47317: ST_TO_ADDR
// result := list ;
47318: LD_ADDR_VAR 0 4
47322: PUSH
47323: LD_VAR 0 1
47327: ST_TO_ADDR
// end ;
47328: LD_VAR 0 4
47332: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47333: LD_INT 0
47335: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47336: LD_ADDR_VAR 0 5
47340: PUSH
47341: LD_VAR 0 1
47345: PPUSH
47346: CALL_OW 250
47350: PPUSH
47351: LD_VAR 0 1
47355: PPUSH
47356: CALL_OW 251
47360: PPUSH
47361: LD_VAR 0 2
47365: PPUSH
47366: LD_VAR 0 3
47370: PPUSH
47371: LD_VAR 0 4
47375: PPUSH
47376: CALL 47758 0 5
47380: ST_TO_ADDR
// end ;
47381: LD_VAR 0 5
47385: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47386: LD_INT 0
47388: PPUSH
47389: PPUSH
47390: PPUSH
47391: PPUSH
// if not list or not unit then
47392: LD_VAR 0 2
47396: NOT
47397: IFTRUE 47406
47399: PUSH
47400: LD_VAR 0 1
47404: NOT
47405: OR
47406: IFFALSE 47410
// exit ;
47408: GO 47753
// result := [ ] ;
47410: LD_ADDR_VAR 0 5
47414: PUSH
47415: EMPTY
47416: ST_TO_ADDR
// for i in list do
47417: LD_ADDR_VAR 0 6
47421: PUSH
47422: LD_VAR 0 2
47426: PUSH
47427: FOR_IN
47428: IFFALSE 47646
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47430: LD_ADDR_VAR 0 8
47434: PUSH
47435: LD_VAR 0 1
47439: PPUSH
47440: LD_VAR 0 6
47444: PUSH
47445: LD_INT 1
47447: ARRAY
47448: PPUSH
47449: LD_VAR 0 6
47453: PUSH
47454: LD_INT 2
47456: ARRAY
47457: PPUSH
47458: CALL_OW 297
47462: ST_TO_ADDR
// if not Count ( result ) then
47463: LD_VAR 0 5
47467: PPUSH
47468: CALL 44014 0 1
47472: NOT
47473: IFFALSE 47506
// begin result := Join ( result , [ i , tmp ] ) ;
47475: LD_ADDR_VAR 0 5
47479: PUSH
47480: LD_VAR 0 5
47484: PPUSH
47485: LD_VAR 0 6
47489: PUSH
47490: LD_VAR 0 8
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PPUSH
47499: CALL 79946 0 2
47503: ST_TO_ADDR
// continue ;
47504: GO 47427
// end ; if result [ result ] [ 2 ] <= tmp then
47506: LD_VAR 0 5
47510: PUSH
47511: LD_VAR 0 5
47515: ARRAY
47516: PUSH
47517: LD_INT 2
47519: ARRAY
47520: PUSH
47521: LD_VAR 0 8
47525: LESSEQUAL
47526: IFFALSE 47559
// result := Join ( result , [ i , tmp ] ) else
47528: LD_ADDR_VAR 0 5
47532: PUSH
47533: LD_VAR 0 5
47537: PPUSH
47538: LD_VAR 0 6
47542: PUSH
47543: LD_VAR 0 8
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PPUSH
47552: CALL 79946 0 2
47556: ST_TO_ADDR
47557: GO 47644
// begin for j := 1 to Count ( result ) do
47559: LD_ADDR_VAR 0 7
47563: PUSH
47564: DOUBLE
47565: LD_INT 1
47567: DEC
47568: ST_TO_ADDR
47569: LD_VAR 0 5
47573: PPUSH
47574: CALL 44014 0 1
47578: PUSH
47579: FOR_TO
47580: IFFALSE 47642
// begin if tmp < result [ j ] [ 2 ] then
47582: LD_VAR 0 8
47586: PUSH
47587: LD_VAR 0 5
47591: PUSH
47592: LD_VAR 0 7
47596: ARRAY
47597: PUSH
47598: LD_INT 2
47600: ARRAY
47601: LESS
47602: IFFALSE 47640
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47604: LD_ADDR_VAR 0 5
47608: PUSH
47609: LD_VAR 0 5
47613: PPUSH
47614: LD_VAR 0 7
47618: PPUSH
47619: LD_VAR 0 6
47623: PUSH
47624: LD_VAR 0 8
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PPUSH
47633: CALL_OW 2
47637: ST_TO_ADDR
// break ;
47638: GO 47642
// end ; end ;
47640: GO 47579
47642: POP
47643: POP
// end ; end ;
47644: GO 47427
47646: POP
47647: POP
// if result and not asc then
47648: LD_VAR 0 5
47652: IFFALSE 47661
47654: PUSH
47655: LD_VAR 0 3
47659: NOT
47660: AND
47661: IFFALSE 47678
// result := ReverseArray ( result ) ;
47663: LD_ADDR_VAR 0 5
47667: PUSH
47668: LD_VAR 0 5
47672: PPUSH
47673: CALL 75036 0 1
47677: ST_TO_ADDR
// tmp := [ ] ;
47678: LD_ADDR_VAR 0 8
47682: PUSH
47683: EMPTY
47684: ST_TO_ADDR
// if mode then
47685: LD_VAR 0 4
47689: IFFALSE 47753
// begin for i := 1 to result do
47691: LD_ADDR_VAR 0 6
47695: PUSH
47696: DOUBLE
47697: LD_INT 1
47699: DEC
47700: ST_TO_ADDR
47701: LD_VAR 0 5
47705: PUSH
47706: FOR_TO
47707: IFFALSE 47741
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47709: LD_ADDR_VAR 0 8
47713: PUSH
47714: LD_VAR 0 8
47718: PPUSH
47719: LD_VAR 0 5
47723: PUSH
47724: LD_VAR 0 6
47728: ARRAY
47729: PUSH
47730: LD_INT 1
47732: ARRAY
47733: PPUSH
47734: CALL 79946 0 2
47738: ST_TO_ADDR
47739: GO 47706
47741: POP
47742: POP
// result := tmp ;
47743: LD_ADDR_VAR 0 5
47747: PUSH
47748: LD_VAR 0 8
47752: ST_TO_ADDR
// end ; end ;
47753: LD_VAR 0 5
47757: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47758: LD_INT 0
47760: PPUSH
47761: PPUSH
47762: PPUSH
47763: PPUSH
// if not list then
47764: LD_VAR 0 3
47768: NOT
47769: IFFALSE 47773
// exit ;
47771: GO 48163
// result := [ ] ;
47773: LD_ADDR_VAR 0 6
47777: PUSH
47778: EMPTY
47779: ST_TO_ADDR
// for i in list do
47780: LD_ADDR_VAR 0 7
47784: PUSH
47785: LD_VAR 0 3
47789: PUSH
47790: FOR_IN
47791: IFFALSE 47993
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47793: LD_ADDR_VAR 0 9
47797: PUSH
47798: LD_VAR 0 7
47802: PPUSH
47803: LD_VAR 0 1
47807: PPUSH
47808: LD_VAR 0 2
47812: PPUSH
47813: CALL_OW 297
47817: ST_TO_ADDR
// if not result then
47818: LD_VAR 0 6
47822: NOT
47823: IFFALSE 47849
// result := [ [ i , tmp ] ] else
47825: LD_ADDR_VAR 0 6
47829: PUSH
47830: LD_VAR 0 7
47834: PUSH
47835: LD_VAR 0 9
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: EMPTY
47845: LIST
47846: ST_TO_ADDR
47847: GO 47991
// begin if result [ result ] [ 2 ] <= tmp then
47849: LD_VAR 0 6
47853: PUSH
47854: LD_VAR 0 6
47858: ARRAY
47859: PUSH
47860: LD_INT 2
47862: ARRAY
47863: PUSH
47864: LD_VAR 0 9
47868: LESSEQUAL
47869: IFFALSE 47911
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47871: LD_ADDR_VAR 0 6
47875: PUSH
47876: LD_VAR 0 6
47880: PPUSH
47881: LD_VAR 0 6
47885: PUSH
47886: LD_INT 1
47888: PLUS
47889: PPUSH
47890: LD_VAR 0 7
47894: PUSH
47895: LD_VAR 0 9
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PPUSH
47904: CALL_OW 2
47908: ST_TO_ADDR
47909: GO 47991
// for j := 1 to result do
47911: LD_ADDR_VAR 0 8
47915: PUSH
47916: DOUBLE
47917: LD_INT 1
47919: DEC
47920: ST_TO_ADDR
47921: LD_VAR 0 6
47925: PUSH
47926: FOR_TO
47927: IFFALSE 47989
// begin if tmp < result [ j ] [ 2 ] then
47929: LD_VAR 0 9
47933: PUSH
47934: LD_VAR 0 6
47938: PUSH
47939: LD_VAR 0 8
47943: ARRAY
47944: PUSH
47945: LD_INT 2
47947: ARRAY
47948: LESS
47949: IFFALSE 47987
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47951: LD_ADDR_VAR 0 6
47955: PUSH
47956: LD_VAR 0 6
47960: PPUSH
47961: LD_VAR 0 8
47965: PPUSH
47966: LD_VAR 0 7
47970: PUSH
47971: LD_VAR 0 9
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PPUSH
47980: CALL_OW 2
47984: ST_TO_ADDR
// break ;
47985: GO 47989
// end ; end ;
47987: GO 47926
47989: POP
47990: POP
// end ; end ;
47991: GO 47790
47993: POP
47994: POP
// if result and not asc then
47995: LD_VAR 0 6
47999: IFFALSE 48008
48001: PUSH
48002: LD_VAR 0 4
48006: NOT
48007: AND
48008: IFFALSE 48083
// begin tmp := result ;
48010: LD_ADDR_VAR 0 9
48014: PUSH
48015: LD_VAR 0 6
48019: ST_TO_ADDR
// for i = tmp downto 1 do
48020: LD_ADDR_VAR 0 7
48024: PUSH
48025: DOUBLE
48026: LD_VAR 0 9
48030: INC
48031: ST_TO_ADDR
48032: LD_INT 1
48034: PUSH
48035: FOR_DOWNTO
48036: IFFALSE 48081
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48038: LD_ADDR_VAR 0 6
48042: PUSH
48043: LD_VAR 0 6
48047: PPUSH
48048: LD_VAR 0 9
48052: PUSH
48053: LD_VAR 0 7
48057: MINUS
48058: PUSH
48059: LD_INT 1
48061: PLUS
48062: PPUSH
48063: LD_VAR 0 9
48067: PUSH
48068: LD_VAR 0 7
48072: ARRAY
48073: PPUSH
48074: CALL_OW 1
48078: ST_TO_ADDR
48079: GO 48035
48081: POP
48082: POP
// end ; tmp := [ ] ;
48083: LD_ADDR_VAR 0 9
48087: PUSH
48088: EMPTY
48089: ST_TO_ADDR
// if mode then
48090: LD_VAR 0 5
48094: IFFALSE 48163
// begin for i = 1 to result do
48096: LD_ADDR_VAR 0 7
48100: PUSH
48101: DOUBLE
48102: LD_INT 1
48104: DEC
48105: ST_TO_ADDR
48106: LD_VAR 0 6
48110: PUSH
48111: FOR_TO
48112: IFFALSE 48151
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48114: LD_ADDR_VAR 0 9
48118: PUSH
48119: LD_VAR 0 9
48123: PPUSH
48124: LD_VAR 0 7
48128: PPUSH
48129: LD_VAR 0 6
48133: PUSH
48134: LD_VAR 0 7
48138: ARRAY
48139: PUSH
48140: LD_INT 1
48142: ARRAY
48143: PPUSH
48144: CALL_OW 1
48148: ST_TO_ADDR
48149: GO 48111
48151: POP
48152: POP
// result := tmp ;
48153: LD_ADDR_VAR 0 6
48157: PUSH
48158: LD_VAR 0 9
48162: ST_TO_ADDR
// end ; end ;
48163: LD_VAR 0 6
48167: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48168: LD_INT 0
48170: PPUSH
48171: PPUSH
48172: PPUSH
48173: PPUSH
48174: PPUSH
48175: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48176: LD_ADDR_VAR 0 5
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: ST_TO_ADDR
// if not x or not y then
48198: LD_VAR 0 2
48202: NOT
48203: IFTRUE 48212
48205: PUSH
48206: LD_VAR 0 3
48210: NOT
48211: OR
48212: IFFALSE 48216
// exit ;
48214: GO 49872
// if not range then
48216: LD_VAR 0 4
48220: NOT
48221: IFFALSE 48231
// range := 10 ;
48223: LD_ADDR_VAR 0 4
48227: PUSH
48228: LD_INT 10
48230: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48231: LD_ADDR_VAR 0 8
48235: PUSH
48236: LD_INT 81
48238: PUSH
48239: LD_VAR 0 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 92
48250: PUSH
48251: LD_VAR 0 2
48255: PUSH
48256: LD_VAR 0 3
48260: PUSH
48261: LD_VAR 0 4
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: PUSH
48275: LD_INT 21
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: LIST
48293: PPUSH
48294: CALL_OW 69
48298: ST_TO_ADDR
// if not tmp then
48299: LD_VAR 0 8
48303: NOT
48304: IFFALSE 48308
// exit ;
48306: GO 49872
// for i in tmp do
48308: LD_ADDR_VAR 0 6
48312: PUSH
48313: LD_VAR 0 8
48317: PUSH
48318: FOR_IN
48319: IFFALSE 49847
// begin points := [ 0 , 0 , 0 ] ;
48321: LD_ADDR_VAR 0 9
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: LIST
48339: ST_TO_ADDR
// bpoints := 1 ;
48340: LD_ADDR_VAR 0 10
48344: PUSH
48345: LD_INT 1
48347: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48348: LD_VAR 0 6
48352: PPUSH
48353: CALL_OW 247
48357: PUSH
48358: LD_INT 1
48360: DOUBLE
48361: EQUAL
48362: IFTRUE 48366
48364: GO 48948
48366: POP
// begin if GetClass ( i ) = 1 then
48367: LD_VAR 0 6
48371: PPUSH
48372: CALL_OW 257
48376: PUSH
48377: LD_INT 1
48379: EQUAL
48380: IFFALSE 48401
// points := [ 10 , 5 , 3 ] ;
48382: LD_ADDR_VAR 0 9
48386: PUSH
48387: LD_INT 10
48389: PUSH
48390: LD_INT 5
48392: PUSH
48393: LD_INT 3
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: LIST
48400: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48401: LD_VAR 0 6
48405: PPUSH
48406: CALL_OW 257
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: LD_INT 4
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: LIST
48424: IN
48425: IFFALSE 48446
// points := [ 3 , 2 , 1 ] ;
48427: LD_ADDR_VAR 0 9
48431: PUSH
48432: LD_INT 3
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: LIST
48445: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48446: LD_VAR 0 6
48450: PPUSH
48451: CALL_OW 257
48455: PUSH
48456: LD_INT 5
48458: EQUAL
48459: IFFALSE 48480
// points := [ 130 , 5 , 2 ] ;
48461: LD_ADDR_VAR 0 9
48465: PUSH
48466: LD_INT 130
48468: PUSH
48469: LD_INT 5
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48480: LD_VAR 0 6
48484: PPUSH
48485: CALL_OW 257
48489: PUSH
48490: LD_INT 8
48492: EQUAL
48493: IFFALSE 48514
// points := [ 35 , 35 , 30 ] ;
48495: LD_ADDR_VAR 0 9
48499: PUSH
48500: LD_INT 35
48502: PUSH
48503: LD_INT 35
48505: PUSH
48506: LD_INT 30
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: LIST
48513: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48514: LD_VAR 0 6
48518: PPUSH
48519: CALL_OW 257
48523: PUSH
48524: LD_INT 9
48526: EQUAL
48527: IFFALSE 48548
// points := [ 20 , 55 , 40 ] ;
48529: LD_ADDR_VAR 0 9
48533: PUSH
48534: LD_INT 20
48536: PUSH
48537: LD_INT 55
48539: PUSH
48540: LD_INT 40
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48548: LD_VAR 0 6
48552: PPUSH
48553: CALL_OW 257
48557: PUSH
48558: LD_INT 12
48560: PUSH
48561: LD_INT 16
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: IN
48568: IFFALSE 48589
// points := [ 5 , 3 , 2 ] ;
48570: LD_ADDR_VAR 0 9
48574: PUSH
48575: LD_INT 5
48577: PUSH
48578: LD_INT 3
48580: PUSH
48581: LD_INT 2
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: LIST
48588: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48589: LD_VAR 0 6
48593: PPUSH
48594: CALL_OW 257
48598: PUSH
48599: LD_INT 17
48601: EQUAL
48602: IFFALSE 48623
// points := [ 100 , 50 , 75 ] ;
48604: LD_ADDR_VAR 0 9
48608: PUSH
48609: LD_INT 100
48611: PUSH
48612: LD_INT 50
48614: PUSH
48615: LD_INT 75
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: LIST
48622: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48623: LD_VAR 0 6
48627: PPUSH
48628: CALL_OW 257
48632: PUSH
48633: LD_INT 15
48635: EQUAL
48636: IFFALSE 48657
// points := [ 10 , 5 , 3 ] ;
48638: LD_ADDR_VAR 0 9
48642: PUSH
48643: LD_INT 10
48645: PUSH
48646: LD_INT 5
48648: PUSH
48649: LD_INT 3
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: LIST
48656: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48657: LD_VAR 0 6
48661: PPUSH
48662: CALL_OW 257
48666: PUSH
48667: LD_INT 14
48669: EQUAL
48670: IFFALSE 48691
// points := [ 10 , 0 , 0 ] ;
48672: LD_ADDR_VAR 0 9
48676: PUSH
48677: LD_INT 10
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48691: LD_VAR 0 6
48695: PPUSH
48696: CALL_OW 257
48700: PUSH
48701: LD_INT 11
48703: EQUAL
48704: IFFALSE 48725
// points := [ 30 , 10 , 5 ] ;
48706: LD_ADDR_VAR 0 9
48710: PUSH
48711: LD_INT 30
48713: PUSH
48714: LD_INT 10
48716: PUSH
48717: LD_INT 5
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: LIST
48724: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48725: LD_VAR 0 1
48729: PPUSH
48730: LD_INT 5
48732: PPUSH
48733: CALL_OW 321
48737: PUSH
48738: LD_INT 2
48740: EQUAL
48741: IFFALSE 48758
// bpoints := bpoints * 1.8 ;
48743: LD_ADDR_VAR 0 10
48747: PUSH
48748: LD_VAR 0 10
48752: PUSH
48753: LD_REAL  1.80000000000000E+0000
48756: MUL
48757: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48758: LD_VAR 0 6
48762: PPUSH
48763: CALL_OW 257
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 3
48776: PUSH
48777: LD_INT 4
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: IN
48786: IFFALSE 48806
48788: PUSH
48789: LD_VAR 0 1
48793: PPUSH
48794: LD_INT 51
48796: PPUSH
48797: CALL_OW 321
48801: PUSH
48802: LD_INT 2
48804: EQUAL
48805: AND
48806: IFFALSE 48823
// bpoints := bpoints * 1.2 ;
48808: LD_ADDR_VAR 0 10
48812: PUSH
48813: LD_VAR 0 10
48817: PUSH
48818: LD_REAL  1.20000000000000E+0000
48821: MUL
48822: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48823: LD_VAR 0 6
48827: PPUSH
48828: CALL_OW 257
48832: PUSH
48833: LD_INT 5
48835: PUSH
48836: LD_INT 7
48838: PUSH
48839: LD_INT 9
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: LIST
48846: IN
48847: IFFALSE 48867
48849: PUSH
48850: LD_VAR 0 1
48854: PPUSH
48855: LD_INT 52
48857: PPUSH
48858: CALL_OW 321
48862: PUSH
48863: LD_INT 2
48865: EQUAL
48866: AND
48867: IFFALSE 48884
// bpoints := bpoints * 1.5 ;
48869: LD_ADDR_VAR 0 10
48873: PUSH
48874: LD_VAR 0 10
48878: PUSH
48879: LD_REAL  1.50000000000000E+0000
48882: MUL
48883: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48884: LD_VAR 0 1
48888: PPUSH
48889: LD_INT 66
48891: PPUSH
48892: CALL_OW 321
48896: PUSH
48897: LD_INT 2
48899: EQUAL
48900: IFFALSE 48917
// bpoints := bpoints * 1.1 ;
48902: LD_ADDR_VAR 0 10
48906: PUSH
48907: LD_VAR 0 10
48911: PUSH
48912: LD_REAL  1.10000000000000E+0000
48915: MUL
48916: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48917: LD_ADDR_VAR 0 10
48921: PUSH
48922: LD_VAR 0 10
48926: PUSH
48927: LD_VAR 0 6
48931: PPUSH
48932: LD_INT 1
48934: PPUSH
48935: CALL_OW 259
48939: PUSH
48940: LD_REAL  1.15000000000000E+0000
48943: MUL
48944: MUL
48945: ST_TO_ADDR
// end ; unit_vehicle :
48946: GO 49776
48948: LD_INT 2
48950: DOUBLE
48951: EQUAL
48952: IFTRUE 48956
48954: GO 49764
48956: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48957: LD_VAR 0 6
48961: PPUSH
48962: CALL_OW 264
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: LD_INT 42
48972: PUSH
48973: LD_INT 24
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: IN
48981: IFFALSE 49002
// points := [ 25 , 5 , 3 ] ;
48983: LD_ADDR_VAR 0 9
48987: PUSH
48988: LD_INT 25
48990: PUSH
48991: LD_INT 5
48993: PUSH
48994: LD_INT 3
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49002: LD_VAR 0 6
49006: PPUSH
49007: CALL_OW 264
49011: PUSH
49012: LD_INT 4
49014: PUSH
49015: LD_INT 43
49017: PUSH
49018: LD_INT 25
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: LIST
49025: IN
49026: IFFALSE 49047
// points := [ 40 , 15 , 5 ] ;
49028: LD_ADDR_VAR 0 9
49032: PUSH
49033: LD_INT 40
49035: PUSH
49036: LD_INT 15
49038: PUSH
49039: LD_INT 5
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: LIST
49046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49047: LD_VAR 0 6
49051: PPUSH
49052: CALL_OW 264
49056: PUSH
49057: LD_INT 3
49059: PUSH
49060: LD_INT 23
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: IN
49067: IFFALSE 49088
// points := [ 7 , 25 , 8 ] ;
49069: LD_ADDR_VAR 0 9
49073: PUSH
49074: LD_INT 7
49076: PUSH
49077: LD_INT 25
49079: PUSH
49080: LD_INT 8
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: LIST
49087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49088: LD_VAR 0 6
49092: PPUSH
49093: CALL_OW 264
49097: PUSH
49098: LD_INT 5
49100: PUSH
49101: LD_INT 27
49103: PUSH
49104: LD_INT 44
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: LIST
49111: IN
49112: IFFALSE 49133
// points := [ 14 , 50 , 16 ] ;
49114: LD_ADDR_VAR 0 9
49118: PUSH
49119: LD_INT 14
49121: PUSH
49122: LD_INT 50
49124: PUSH
49125: LD_INT 16
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: LIST
49132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49133: LD_VAR 0 6
49137: PPUSH
49138: CALL_OW 264
49142: PUSH
49143: LD_INT 6
49145: PUSH
49146: LD_INT 46
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: IN
49153: IFFALSE 49174
// points := [ 32 , 120 , 70 ] ;
49155: LD_ADDR_VAR 0 9
49159: PUSH
49160: LD_INT 32
49162: PUSH
49163: LD_INT 120
49165: PUSH
49166: LD_INT 70
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: LIST
49173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49174: LD_VAR 0 6
49178: PPUSH
49179: CALL_OW 264
49183: PUSH
49184: LD_INT 7
49186: PUSH
49187: LD_INT 28
49189: PUSH
49190: LD_INT 45
49192: PUSH
49193: LD_INT 92
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: IN
49202: IFFALSE 49223
// points := [ 35 , 20 , 45 ] ;
49204: LD_ADDR_VAR 0 9
49208: PUSH
49209: LD_INT 35
49211: PUSH
49212: LD_INT 20
49214: PUSH
49215: LD_INT 45
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: LIST
49222: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49223: LD_VAR 0 6
49227: PPUSH
49228: CALL_OW 264
49232: PUSH
49233: LD_INT 47
49235: PUSH
49236: EMPTY
49237: LIST
49238: IN
49239: IFFALSE 49260
// points := [ 67 , 45 , 75 ] ;
49241: LD_ADDR_VAR 0 9
49245: PUSH
49246: LD_INT 67
49248: PUSH
49249: LD_INT 45
49251: PUSH
49252: LD_INT 75
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: LIST
49259: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49260: LD_VAR 0 6
49264: PPUSH
49265: CALL_OW 264
49269: PUSH
49270: LD_INT 26
49272: PUSH
49273: EMPTY
49274: LIST
49275: IN
49276: IFFALSE 49297
// points := [ 120 , 30 , 80 ] ;
49278: LD_ADDR_VAR 0 9
49282: PUSH
49283: LD_INT 120
49285: PUSH
49286: LD_INT 30
49288: PUSH
49289: LD_INT 80
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: LIST
49296: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49297: LD_VAR 0 6
49301: PPUSH
49302: CALL_OW 264
49306: PUSH
49307: LD_INT 22
49309: PUSH
49310: EMPTY
49311: LIST
49312: IN
49313: IFFALSE 49334
// points := [ 40 , 1 , 1 ] ;
49315: LD_ADDR_VAR 0 9
49319: PUSH
49320: LD_INT 40
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: LIST
49333: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49334: LD_VAR 0 6
49338: PPUSH
49339: CALL_OW 264
49343: PUSH
49344: LD_INT 29
49346: PUSH
49347: EMPTY
49348: LIST
49349: IN
49350: IFFALSE 49371
// points := [ 70 , 200 , 400 ] ;
49352: LD_ADDR_VAR 0 9
49356: PUSH
49357: LD_INT 70
49359: PUSH
49360: LD_INT 200
49362: PUSH
49363: LD_INT 400
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: LIST
49370: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49371: LD_VAR 0 6
49375: PPUSH
49376: CALL_OW 264
49380: PUSH
49381: LD_INT 14
49383: PUSH
49384: LD_INT 53
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: IN
49391: IFFALSE 49412
// points := [ 40 , 10 , 20 ] ;
49393: LD_ADDR_VAR 0 9
49397: PUSH
49398: LD_INT 40
49400: PUSH
49401: LD_INT 10
49403: PUSH
49404: LD_INT 20
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: LIST
49411: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49412: LD_VAR 0 6
49416: PPUSH
49417: CALL_OW 264
49421: PUSH
49422: LD_INT 9
49424: PUSH
49425: EMPTY
49426: LIST
49427: IN
49428: IFFALSE 49449
// points := [ 5 , 70 , 20 ] ;
49430: LD_ADDR_VAR 0 9
49434: PUSH
49435: LD_INT 5
49437: PUSH
49438: LD_INT 70
49440: PUSH
49441: LD_INT 20
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: LIST
49448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49449: LD_VAR 0 6
49453: PPUSH
49454: CALL_OW 264
49458: PUSH
49459: LD_INT 10
49461: PUSH
49462: EMPTY
49463: LIST
49464: IN
49465: IFFALSE 49486
// points := [ 35 , 110 , 70 ] ;
49467: LD_ADDR_VAR 0 9
49471: PUSH
49472: LD_INT 35
49474: PUSH
49475: LD_INT 110
49477: PUSH
49478: LD_INT 70
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: LIST
49485: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49486: LD_VAR 0 6
49490: PPUSH
49491: CALL_OW 265
49495: PUSH
49496: LD_INT 25
49498: EQUAL
49499: IFFALSE 49520
// points := [ 80 , 65 , 100 ] ;
49501: LD_ADDR_VAR 0 9
49505: PUSH
49506: LD_INT 80
49508: PUSH
49509: LD_INT 65
49511: PUSH
49512: LD_INT 100
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: LIST
49519: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49520: LD_VAR 0 6
49524: PPUSH
49525: CALL_OW 263
49529: PUSH
49530: LD_INT 1
49532: EQUAL
49533: IFFALSE 49568
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49535: LD_ADDR_VAR 0 10
49539: PUSH
49540: LD_VAR 0 10
49544: PUSH
49545: LD_VAR 0 6
49549: PPUSH
49550: CALL_OW 311
49554: PPUSH
49555: LD_INT 3
49557: PPUSH
49558: CALL_OW 259
49562: PUSH
49563: LD_INT 4
49565: MUL
49566: MUL
49567: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49568: LD_VAR 0 6
49572: PPUSH
49573: CALL_OW 263
49577: PUSH
49578: LD_INT 2
49580: EQUAL
49581: IFFALSE 49632
// begin j := IsControledBy ( i ) ;
49583: LD_ADDR_VAR 0 7
49587: PUSH
49588: LD_VAR 0 6
49592: PPUSH
49593: CALL_OW 312
49597: ST_TO_ADDR
// if j then
49598: LD_VAR 0 7
49602: IFFALSE 49632
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49604: LD_ADDR_VAR 0 10
49608: PUSH
49609: LD_VAR 0 10
49613: PUSH
49614: LD_VAR 0 7
49618: PPUSH
49619: LD_INT 3
49621: PPUSH
49622: CALL_OW 259
49626: PUSH
49627: LD_INT 3
49629: MUL
49630: MUL
49631: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49632: LD_VAR 0 6
49636: PPUSH
49637: CALL_OW 264
49641: PUSH
49642: LD_INT 5
49644: PUSH
49645: LD_INT 6
49647: PUSH
49648: LD_INT 46
49650: PUSH
49651: LD_INT 44
49653: PUSH
49654: LD_INT 47
49656: PUSH
49657: LD_INT 45
49659: PUSH
49660: LD_INT 28
49662: PUSH
49663: LD_INT 7
49665: PUSH
49666: LD_INT 27
49668: PUSH
49669: LD_INT 29
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: IN
49684: IFFALSE 49704
49686: PUSH
49687: LD_VAR 0 1
49691: PPUSH
49692: LD_INT 52
49694: PPUSH
49695: CALL_OW 321
49699: PUSH
49700: LD_INT 2
49702: EQUAL
49703: AND
49704: IFFALSE 49721
// bpoints := bpoints * 1.2 ;
49706: LD_ADDR_VAR 0 10
49710: PUSH
49711: LD_VAR 0 10
49715: PUSH
49716: LD_REAL  1.20000000000000E+0000
49719: MUL
49720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49721: LD_VAR 0 6
49725: PPUSH
49726: CALL_OW 264
49730: PUSH
49731: LD_INT 6
49733: PUSH
49734: LD_INT 46
49736: PUSH
49737: LD_INT 47
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: LIST
49744: IN
49745: IFFALSE 49762
// bpoints := bpoints * 1.2 ;
49747: LD_ADDR_VAR 0 10
49751: PUSH
49752: LD_VAR 0 10
49756: PUSH
49757: LD_REAL  1.20000000000000E+0000
49760: MUL
49761: ST_TO_ADDR
// end ; unit_building :
49762: GO 49776
49764: LD_INT 3
49766: DOUBLE
49767: EQUAL
49768: IFTRUE 49772
49770: GO 49775
49772: POP
// ; end ;
49773: GO 49776
49775: POP
// for j = 1 to 3 do
49776: LD_ADDR_VAR 0 7
49780: PUSH
49781: DOUBLE
49782: LD_INT 1
49784: DEC
49785: ST_TO_ADDR
49786: LD_INT 3
49788: PUSH
49789: FOR_TO
49790: IFFALSE 49843
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49792: LD_ADDR_VAR 0 5
49796: PUSH
49797: LD_VAR 0 5
49801: PPUSH
49802: LD_VAR 0 7
49806: PPUSH
49807: LD_VAR 0 5
49811: PUSH
49812: LD_VAR 0 7
49816: ARRAY
49817: PUSH
49818: LD_VAR 0 9
49822: PUSH
49823: LD_VAR 0 7
49827: ARRAY
49828: PUSH
49829: LD_VAR 0 10
49833: MUL
49834: PLUS
49835: PPUSH
49836: CALL_OW 1
49840: ST_TO_ADDR
49841: GO 49789
49843: POP
49844: POP
// end ;
49845: GO 48318
49847: POP
49848: POP
// result := Replace ( result , 4 , tmp ) ;
49849: LD_ADDR_VAR 0 5
49853: PUSH
49854: LD_VAR 0 5
49858: PPUSH
49859: LD_INT 4
49861: PPUSH
49862: LD_VAR 0 8
49866: PPUSH
49867: CALL_OW 1
49871: ST_TO_ADDR
// end ;
49872: LD_VAR 0 5
49876: RET
// export function DangerAtRange ( unit , range ) ; begin
49877: LD_INT 0
49879: PPUSH
// if not unit then
49880: LD_VAR 0 1
49884: NOT
49885: IFFALSE 49889
// exit ;
49887: GO 49934
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49889: LD_ADDR_VAR 0 3
49893: PUSH
49894: LD_VAR 0 1
49898: PPUSH
49899: CALL_OW 255
49903: PPUSH
49904: LD_VAR 0 1
49908: PPUSH
49909: CALL_OW 250
49913: PPUSH
49914: LD_VAR 0 1
49918: PPUSH
49919: CALL_OW 251
49923: PPUSH
49924: LD_VAR 0 2
49928: PPUSH
49929: CALL 48168 0 4
49933: ST_TO_ADDR
// end ;
49934: LD_VAR 0 3
49938: RET
// export function DangerInArea ( side , area ) ; begin
49939: LD_INT 0
49941: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49942: LD_ADDR_VAR 0 3
49946: PUSH
49947: LD_VAR 0 2
49951: PPUSH
49952: LD_INT 81
49954: PUSH
49955: LD_VAR 0 1
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PPUSH
49964: CALL_OW 70
49968: ST_TO_ADDR
// end ;
49969: LD_VAR 0 3
49973: RET
// export function IsExtension ( b ) ; begin
49974: LD_INT 0
49976: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49977: LD_ADDR_VAR 0 2
49981: PUSH
49982: LD_VAR 0 1
49986: PUSH
49987: LD_INT 23
49989: PUSH
49990: LD_INT 20
49992: PUSH
49993: LD_INT 22
49995: PUSH
49996: LD_INT 17
49998: PUSH
49999: LD_INT 24
50001: PUSH
50002: LD_INT 21
50004: PUSH
50005: LD_INT 19
50007: PUSH
50008: LD_INT 16
50010: PUSH
50011: LD_INT 25
50013: PUSH
50014: LD_INT 18
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: IN
50029: ST_TO_ADDR
// end ;
50030: LD_VAR 0 2
50034: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50035: LD_INT 0
50037: PPUSH
50038: PPUSH
50039: PPUSH
// result := [ ] ;
50040: LD_ADDR_VAR 0 4
50044: PUSH
50045: EMPTY
50046: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50047: LD_ADDR_VAR 0 5
50051: PUSH
50052: LD_VAR 0 2
50056: PPUSH
50057: LD_INT 21
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PPUSH
50067: CALL_OW 70
50071: ST_TO_ADDR
// if not tmp then
50072: LD_VAR 0 5
50076: NOT
50077: IFFALSE 50081
// exit ;
50079: GO 50145
// if checkLink then
50081: LD_VAR 0 3
50085: IFFALSE 50135
// begin for i in tmp do
50087: LD_ADDR_VAR 0 6
50091: PUSH
50092: LD_VAR 0 5
50096: PUSH
50097: FOR_IN
50098: IFFALSE 50133
// if GetBase ( i ) <> base then
50100: LD_VAR 0 6
50104: PPUSH
50105: CALL_OW 274
50109: PUSH
50110: LD_VAR 0 1
50114: NONEQUAL
50115: IFFALSE 50131
// ComLinkToBase ( base , i ) ;
50117: LD_VAR 0 1
50121: PPUSH
50122: LD_VAR 0 6
50126: PPUSH
50127: CALL_OW 169
50131: GO 50097
50133: POP
50134: POP
// end ; result := tmp ;
50135: LD_ADDR_VAR 0 4
50139: PUSH
50140: LD_VAR 0 5
50144: ST_TO_ADDR
// end ;
50145: LD_VAR 0 4
50149: RET
// export function ComComplete ( units , b ) ; var i ; begin
50150: LD_INT 0
50152: PPUSH
50153: PPUSH
// if not units then
50154: LD_VAR 0 1
50158: NOT
50159: IFFALSE 50163
// exit ;
50161: GO 50253
// for i in units do
50163: LD_ADDR_VAR 0 4
50167: PUSH
50168: LD_VAR 0 1
50172: PUSH
50173: FOR_IN
50174: IFFALSE 50251
// if BuildingStatus ( b ) = bs_build then
50176: LD_VAR 0 2
50180: PPUSH
50181: CALL_OW 461
50185: PUSH
50186: LD_INT 1
50188: EQUAL
50189: IFFALSE 50249
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50191: LD_VAR 0 4
50195: PPUSH
50196: LD_STRING h
50198: PUSH
50199: LD_VAR 0 2
50203: PPUSH
50204: CALL_OW 250
50208: PUSH
50209: LD_VAR 0 2
50213: PPUSH
50214: CALL_OW 251
50218: PUSH
50219: LD_VAR 0 2
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: PUSH
50242: EMPTY
50243: LIST
50244: PPUSH
50245: CALL_OW 446
50249: GO 50173
50251: POP
50252: POP
// end ;
50253: LD_VAR 0 3
50257: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50258: LD_INT 0
50260: PPUSH
50261: PPUSH
50262: PPUSH
50263: PPUSH
50264: PPUSH
50265: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50266: LD_VAR 0 1
50270: NOT
50271: IFTRUE 50288
50273: PUSH
50274: LD_VAR 0 1
50278: PPUSH
50279: CALL_OW 263
50283: PUSH
50284: LD_INT 2
50286: NONEQUAL
50287: OR
50288: IFFALSE 50292
// exit ;
50290: GO 50608
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50292: LD_ADDR_VAR 0 6
50296: PUSH
50297: LD_INT 22
50299: PUSH
50300: LD_VAR 0 1
50304: PPUSH
50305: CALL_OW 255
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: LD_INT 30
50319: PUSH
50320: LD_INT 36
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 34
50329: PUSH
50330: LD_INT 31
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: LIST
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PPUSH
50346: CALL_OW 69
50350: ST_TO_ADDR
// if not tmp then
50351: LD_VAR 0 6
50355: NOT
50356: IFFALSE 50360
// exit ;
50358: GO 50608
// result := [ ] ;
50360: LD_ADDR_VAR 0 2
50364: PUSH
50365: EMPTY
50366: ST_TO_ADDR
// for i in tmp do
50367: LD_ADDR_VAR 0 3
50371: PUSH
50372: LD_VAR 0 6
50376: PUSH
50377: FOR_IN
50378: IFFALSE 50449
// begin t := UnitsInside ( i ) ;
50380: LD_ADDR_VAR 0 4
50384: PUSH
50385: LD_VAR 0 3
50389: PPUSH
50390: CALL_OW 313
50394: ST_TO_ADDR
// if t then
50395: LD_VAR 0 4
50399: IFFALSE 50447
// for j in t do
50401: LD_ADDR_VAR 0 7
50405: PUSH
50406: LD_VAR 0 4
50410: PUSH
50411: FOR_IN
50412: IFFALSE 50445
// result := Replace ( result , result + 1 , j ) ;
50414: LD_ADDR_VAR 0 2
50418: PUSH
50419: LD_VAR 0 2
50423: PPUSH
50424: LD_VAR 0 2
50428: PUSH
50429: LD_INT 1
50431: PLUS
50432: PPUSH
50433: LD_VAR 0 7
50437: PPUSH
50438: CALL_OW 1
50442: ST_TO_ADDR
50443: GO 50411
50445: POP
50446: POP
// end ;
50447: GO 50377
50449: POP
50450: POP
// if not result then
50451: LD_VAR 0 2
50455: NOT
50456: IFFALSE 50460
// exit ;
50458: GO 50608
// mech := result [ 1 ] ;
50460: LD_ADDR_VAR 0 5
50464: PUSH
50465: LD_VAR 0 2
50469: PUSH
50470: LD_INT 1
50472: ARRAY
50473: ST_TO_ADDR
// if result > 1 then
50474: LD_VAR 0 2
50478: PUSH
50479: LD_INT 1
50481: GREATER
50482: IFFALSE 50594
// begin for i = 2 to result do
50484: LD_ADDR_VAR 0 3
50488: PUSH
50489: DOUBLE
50490: LD_INT 2
50492: DEC
50493: ST_TO_ADDR
50494: LD_VAR 0 2
50498: PUSH
50499: FOR_TO
50500: IFFALSE 50592
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50502: LD_ADDR_VAR 0 4
50506: PUSH
50507: LD_VAR 0 2
50511: PUSH
50512: LD_VAR 0 3
50516: ARRAY
50517: PPUSH
50518: LD_INT 3
50520: PPUSH
50521: CALL_OW 259
50525: PUSH
50526: LD_VAR 0 2
50530: PUSH
50531: LD_VAR 0 3
50535: ARRAY
50536: PPUSH
50537: CALL_OW 432
50541: MINUS
50542: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50543: LD_VAR 0 4
50547: PUSH
50548: LD_VAR 0 5
50552: PPUSH
50553: LD_INT 3
50555: PPUSH
50556: CALL_OW 259
50560: PUSH
50561: LD_VAR 0 5
50565: PPUSH
50566: CALL_OW 432
50570: MINUS
50571: GREATEREQUAL
50572: IFFALSE 50590
// mech := result [ i ] ;
50574: LD_ADDR_VAR 0 5
50578: PUSH
50579: LD_VAR 0 2
50583: PUSH
50584: LD_VAR 0 3
50588: ARRAY
50589: ST_TO_ADDR
// end ;
50590: GO 50499
50592: POP
50593: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50594: LD_VAR 0 1
50598: PPUSH
50599: LD_VAR 0 5
50603: PPUSH
50604: CALL_OW 135
// end ;
50608: LD_VAR 0 2
50612: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50613: LD_INT 0
50615: PPUSH
50616: PPUSH
50617: PPUSH
50618: PPUSH
50619: PPUSH
50620: PPUSH
50621: PPUSH
50622: PPUSH
50623: PPUSH
50624: PPUSH
50625: PPUSH
50626: PPUSH
50627: PPUSH
// result := [ ] ;
50628: LD_ADDR_VAR 0 7
50632: PUSH
50633: EMPTY
50634: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50635: LD_VAR 0 1
50639: PPUSH
50640: CALL_OW 266
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: IN
50655: NOT
50656: IFFALSE 50660
// exit ;
50658: GO 52300
// if name then
50660: LD_VAR 0 3
50664: IFFALSE 50680
// SetBName ( base_dep , name ) ;
50666: LD_VAR 0 1
50670: PPUSH
50671: LD_VAR 0 3
50675: PPUSH
50676: CALL_OW 500
// base := GetBase ( base_dep ) ;
50680: LD_ADDR_VAR 0 15
50684: PUSH
50685: LD_VAR 0 1
50689: PPUSH
50690: CALL_OW 274
50694: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50695: LD_ADDR_VAR 0 16
50699: PUSH
50700: LD_VAR 0 1
50704: PPUSH
50705: CALL_OW 255
50709: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50710: LD_ADDR_VAR 0 17
50714: PUSH
50715: LD_VAR 0 1
50719: PPUSH
50720: CALL_OW 248
50724: ST_TO_ADDR
// if sources then
50725: LD_VAR 0 5
50729: IFFALSE 50776
// for i = 1 to 3 do
50731: LD_ADDR_VAR 0 8
50735: PUSH
50736: DOUBLE
50737: LD_INT 1
50739: DEC
50740: ST_TO_ADDR
50741: LD_INT 3
50743: PUSH
50744: FOR_TO
50745: IFFALSE 50774
// AddResourceType ( base , i , sources [ i ] ) ;
50747: LD_VAR 0 15
50751: PPUSH
50752: LD_VAR 0 8
50756: PPUSH
50757: LD_VAR 0 5
50761: PUSH
50762: LD_VAR 0 8
50766: ARRAY
50767: PPUSH
50768: CALL_OW 276
50772: GO 50744
50774: POP
50775: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50776: LD_ADDR_VAR 0 18
50780: PUSH
50781: LD_VAR 0 15
50785: PPUSH
50786: LD_VAR 0 2
50790: PPUSH
50791: LD_INT 1
50793: PPUSH
50794: CALL 50035 0 3
50798: ST_TO_ADDR
// InitHc ;
50799: CALL_OW 19
// InitUc ;
50803: CALL_OW 18
// uc_side := side ;
50807: LD_ADDR_OWVAR 20
50811: PUSH
50812: LD_VAR 0 16
50816: ST_TO_ADDR
// uc_nation := nation ;
50817: LD_ADDR_OWVAR 21
50821: PUSH
50822: LD_VAR 0 17
50826: ST_TO_ADDR
// if buildings then
50827: LD_VAR 0 18
50831: IFFALSE 52159
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50833: LD_ADDR_VAR 0 19
50837: PUSH
50838: LD_VAR 0 18
50842: PPUSH
50843: LD_INT 2
50845: PUSH
50846: LD_INT 30
50848: PUSH
50849: LD_INT 29
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 30
50858: PUSH
50859: LD_INT 30
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: PPUSH
50871: CALL_OW 72
50875: ST_TO_ADDR
// if tmp then
50876: LD_VAR 0 19
50880: IFFALSE 50928
// for i in tmp do
50882: LD_ADDR_VAR 0 8
50886: PUSH
50887: LD_VAR 0 19
50891: PUSH
50892: FOR_IN
50893: IFFALSE 50926
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50895: LD_VAR 0 8
50899: PPUSH
50900: CALL_OW 250
50904: PPUSH
50905: LD_VAR 0 8
50909: PPUSH
50910: CALL_OW 251
50914: PPUSH
50915: LD_VAR 0 16
50919: PPUSH
50920: CALL_OW 441
50924: GO 50892
50926: POP
50927: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50928: LD_VAR 0 18
50932: PPUSH
50933: LD_INT 2
50935: PUSH
50936: LD_INT 30
50938: PUSH
50939: LD_INT 32
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 30
50948: PUSH
50949: LD_INT 33
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: LIST
50960: PPUSH
50961: CALL_OW 72
50965: IFFALSE 51053
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50967: LD_ADDR_VAR 0 8
50971: PUSH
50972: LD_VAR 0 18
50976: PPUSH
50977: LD_INT 2
50979: PUSH
50980: LD_INT 30
50982: PUSH
50983: LD_INT 32
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 30
50992: PUSH
50993: LD_INT 33
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: LIST
51004: PPUSH
51005: CALL_OW 72
51009: PUSH
51010: FOR_IN
51011: IFFALSE 51051
// begin if not GetBWeapon ( i ) then
51013: LD_VAR 0 8
51017: PPUSH
51018: CALL_OW 269
51022: NOT
51023: IFFALSE 51049
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51025: LD_VAR 0 8
51029: PPUSH
51030: LD_VAR 0 8
51034: PPUSH
51035: LD_VAR 0 2
51039: PPUSH
51040: CALL 52305 0 2
51044: PPUSH
51045: CALL_OW 431
// end ;
51049: GO 51010
51051: POP
51052: POP
// end ; for i = 1 to personel do
51053: LD_ADDR_VAR 0 8
51057: PUSH
51058: DOUBLE
51059: LD_INT 1
51061: DEC
51062: ST_TO_ADDR
51063: LD_VAR 0 6
51067: PUSH
51068: FOR_TO
51069: IFFALSE 52139
// begin if i > 4 then
51071: LD_VAR 0 8
51075: PUSH
51076: LD_INT 4
51078: GREATER
51079: IFFALSE 51083
// break ;
51081: GO 52139
// case i of 1 :
51083: LD_VAR 0 8
51087: PUSH
51088: LD_INT 1
51090: DOUBLE
51091: EQUAL
51092: IFTRUE 51096
51094: GO 51176
51096: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51097: LD_ADDR_VAR 0 12
51101: PUSH
51102: LD_VAR 0 18
51106: PPUSH
51107: LD_INT 22
51109: PUSH
51110: LD_VAR 0 16
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 58
51121: PUSH
51122: EMPTY
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: LD_INT 30
51130: PUSH
51131: LD_INT 32
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 30
51140: PUSH
51141: LD_INT 4
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 30
51150: PUSH
51151: LD_INT 5
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: LIST
51168: PPUSH
51169: CALL_OW 72
51173: ST_TO_ADDR
51174: GO 51398
51176: LD_INT 2
51178: DOUBLE
51179: EQUAL
51180: IFTRUE 51184
51182: GO 51246
51184: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51185: LD_ADDR_VAR 0 12
51189: PUSH
51190: LD_VAR 0 18
51194: PPUSH
51195: LD_INT 22
51197: PUSH
51198: LD_VAR 0 16
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: LD_INT 30
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 30
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PPUSH
51239: CALL_OW 72
51243: ST_TO_ADDR
51244: GO 51398
51246: LD_INT 3
51248: DOUBLE
51249: EQUAL
51250: IFTRUE 51254
51252: GO 51316
51254: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51255: LD_ADDR_VAR 0 12
51259: PUSH
51260: LD_VAR 0 18
51264: PPUSH
51265: LD_INT 22
51267: PUSH
51268: LD_VAR 0 16
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: LD_INT 30
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 30
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: LIST
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PPUSH
51309: CALL_OW 72
51313: ST_TO_ADDR
51314: GO 51398
51316: LD_INT 4
51318: DOUBLE
51319: EQUAL
51320: IFTRUE 51324
51322: GO 51397
51324: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51325: LD_ADDR_VAR 0 12
51329: PUSH
51330: LD_VAR 0 18
51334: PPUSH
51335: LD_INT 22
51337: PUSH
51338: LD_VAR 0 16
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 30
51352: PUSH
51353: LD_INT 6
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 30
51362: PUSH
51363: LD_INT 7
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 30
51372: PUSH
51373: LD_INT 8
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PPUSH
51390: CALL_OW 72
51394: ST_TO_ADDR
51395: GO 51398
51397: POP
// if i = 1 then
51398: LD_VAR 0 8
51402: PUSH
51403: LD_INT 1
51405: EQUAL
51406: IFFALSE 51517
// begin tmp := [ ] ;
51408: LD_ADDR_VAR 0 19
51412: PUSH
51413: EMPTY
51414: ST_TO_ADDR
// for j in f do
51415: LD_ADDR_VAR 0 9
51419: PUSH
51420: LD_VAR 0 12
51424: PUSH
51425: FOR_IN
51426: IFFALSE 51499
// if GetBType ( j ) = b_bunker then
51428: LD_VAR 0 9
51432: PPUSH
51433: CALL_OW 266
51437: PUSH
51438: LD_INT 32
51440: EQUAL
51441: IFFALSE 51468
// tmp := Insert ( tmp , 1 , j ) else
51443: LD_ADDR_VAR 0 19
51447: PUSH
51448: LD_VAR 0 19
51452: PPUSH
51453: LD_INT 1
51455: PPUSH
51456: LD_VAR 0 9
51460: PPUSH
51461: CALL_OW 2
51465: ST_TO_ADDR
51466: GO 51497
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51468: LD_ADDR_VAR 0 19
51472: PUSH
51473: LD_VAR 0 19
51477: PPUSH
51478: LD_VAR 0 19
51482: PUSH
51483: LD_INT 1
51485: PLUS
51486: PPUSH
51487: LD_VAR 0 9
51491: PPUSH
51492: CALL_OW 2
51496: ST_TO_ADDR
51497: GO 51425
51499: POP
51500: POP
// if tmp then
51501: LD_VAR 0 19
51505: IFFALSE 51517
// f := tmp ;
51507: LD_ADDR_VAR 0 12
51511: PUSH
51512: LD_VAR 0 19
51516: ST_TO_ADDR
// end ; x := personel [ i ] ;
51517: LD_ADDR_VAR 0 13
51521: PUSH
51522: LD_VAR 0 6
51526: PUSH
51527: LD_VAR 0 8
51531: ARRAY
51532: ST_TO_ADDR
// if x = - 1 then
51533: LD_VAR 0 13
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: EQUAL
51542: IFFALSE 51753
// begin for j in f do
51544: LD_ADDR_VAR 0 9
51548: PUSH
51549: LD_VAR 0 12
51553: PUSH
51554: FOR_IN
51555: IFFALSE 51749
// repeat InitHc ;
51557: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51561: LD_VAR 0 9
51565: PPUSH
51566: CALL_OW 266
51570: PUSH
51571: LD_INT 5
51573: EQUAL
51574: IFFALSE 51644
// begin if UnitsInside ( j ) < 3 then
51576: LD_VAR 0 9
51580: PPUSH
51581: CALL_OW 313
51585: PUSH
51586: LD_INT 3
51588: LESS
51589: IFFALSE 51625
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51591: LD_INT 0
51593: PPUSH
51594: LD_INT 5
51596: PUSH
51597: LD_INT 8
51599: PUSH
51600: LD_INT 9
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: LIST
51607: PUSH
51608: LD_VAR 0 17
51612: ARRAY
51613: PPUSH
51614: LD_VAR 0 4
51618: PPUSH
51619: CALL_OW 380
51623: GO 51642
// PrepareHuman ( false , i , skill ) ;
51625: LD_INT 0
51627: PPUSH
51628: LD_VAR 0 8
51632: PPUSH
51633: LD_VAR 0 4
51637: PPUSH
51638: CALL_OW 380
// end else
51642: GO 51661
// PrepareHuman ( false , i , skill ) ;
51644: LD_INT 0
51646: PPUSH
51647: LD_VAR 0 8
51651: PPUSH
51652: LD_VAR 0 4
51656: PPUSH
51657: CALL_OW 380
// un := CreateHuman ;
51661: LD_ADDR_VAR 0 14
51665: PUSH
51666: CALL_OW 44
51670: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51671: LD_ADDR_VAR 0 7
51675: PUSH
51676: LD_VAR 0 7
51680: PPUSH
51681: LD_INT 1
51683: PPUSH
51684: LD_VAR 0 14
51688: PPUSH
51689: CALL_OW 2
51693: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51694: LD_VAR 0 14
51698: PPUSH
51699: LD_VAR 0 9
51703: PPUSH
51704: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51708: LD_VAR 0 9
51712: PPUSH
51713: CALL_OW 313
51717: PUSH
51718: LD_INT 6
51720: EQUAL
51721: IFTRUE 51745
51723: PUSH
51724: LD_VAR 0 9
51728: PPUSH
51729: CALL_OW 266
51733: PUSH
51734: LD_INT 32
51736: PUSH
51737: LD_INT 31
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: IN
51744: OR
51745: IFFALSE 51557
51747: GO 51554
51749: POP
51750: POP
// end else
51751: GO 52137
// for j = 1 to x do
51753: LD_ADDR_VAR 0 9
51757: PUSH
51758: DOUBLE
51759: LD_INT 1
51761: DEC
51762: ST_TO_ADDR
51763: LD_VAR 0 13
51767: PUSH
51768: FOR_TO
51769: IFFALSE 52135
// begin InitHc ;
51771: CALL_OW 19
// if not f then
51775: LD_VAR 0 12
51779: NOT
51780: IFFALSE 51869
// begin PrepareHuman ( false , i , skill ) ;
51782: LD_INT 0
51784: PPUSH
51785: LD_VAR 0 8
51789: PPUSH
51790: LD_VAR 0 4
51794: PPUSH
51795: CALL_OW 380
// un := CreateHuman ;
51799: LD_ADDR_VAR 0 14
51803: PUSH
51804: CALL_OW 44
51808: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51809: LD_ADDR_VAR 0 7
51813: PUSH
51814: LD_VAR 0 7
51818: PPUSH
51819: LD_INT 1
51821: PPUSH
51822: LD_VAR 0 14
51826: PPUSH
51827: CALL_OW 2
51831: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51832: LD_VAR 0 14
51836: PPUSH
51837: LD_VAR 0 1
51841: PPUSH
51842: CALL_OW 250
51846: PPUSH
51847: LD_VAR 0 1
51851: PPUSH
51852: CALL_OW 251
51856: PPUSH
51857: LD_INT 10
51859: PPUSH
51860: LD_INT 0
51862: PPUSH
51863: CALL_OW 50
// continue ;
51867: GO 51768
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51869: LD_VAR 0 12
51873: PUSH
51874: LD_INT 1
51876: ARRAY
51877: PPUSH
51878: CALL_OW 313
51882: IFFALSE 51910
51884: PUSH
51885: LD_VAR 0 12
51889: PUSH
51890: LD_INT 1
51892: ARRAY
51893: PPUSH
51894: CALL_OW 266
51898: PUSH
51899: LD_INT 32
51901: PUSH
51902: LD_INT 31
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: IN
51909: AND
51910: IFTRUE 51931
51912: PUSH
51913: LD_VAR 0 12
51917: PUSH
51918: LD_INT 1
51920: ARRAY
51921: PPUSH
51922: CALL_OW 313
51926: PUSH
51927: LD_INT 6
51929: EQUAL
51930: OR
51931: IFFALSE 51951
// f := Delete ( f , 1 ) ;
51933: LD_ADDR_VAR 0 12
51937: PUSH
51938: LD_VAR 0 12
51942: PPUSH
51943: LD_INT 1
51945: PPUSH
51946: CALL_OW 3
51950: ST_TO_ADDR
// if not f then
51951: LD_VAR 0 12
51955: NOT
51956: IFFALSE 51974
// begin x := x + 2 ;
51958: LD_ADDR_VAR 0 13
51962: PUSH
51963: LD_VAR 0 13
51967: PUSH
51968: LD_INT 2
51970: PLUS
51971: ST_TO_ADDR
// continue ;
51972: GO 51768
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51974: LD_VAR 0 12
51978: PUSH
51979: LD_INT 1
51981: ARRAY
51982: PPUSH
51983: CALL_OW 266
51987: PUSH
51988: LD_INT 5
51990: EQUAL
51991: IFFALSE 52065
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51993: LD_VAR 0 12
51997: PUSH
51998: LD_INT 1
52000: ARRAY
52001: PPUSH
52002: CALL_OW 313
52006: PUSH
52007: LD_INT 3
52009: LESS
52010: IFFALSE 52046
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52012: LD_INT 0
52014: PPUSH
52015: LD_INT 5
52017: PUSH
52018: LD_INT 8
52020: PUSH
52021: LD_INT 9
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: LIST
52028: PUSH
52029: LD_VAR 0 17
52033: ARRAY
52034: PPUSH
52035: LD_VAR 0 4
52039: PPUSH
52040: CALL_OW 380
52044: GO 52063
// PrepareHuman ( false , i , skill ) ;
52046: LD_INT 0
52048: PPUSH
52049: LD_VAR 0 8
52053: PPUSH
52054: LD_VAR 0 4
52058: PPUSH
52059: CALL_OW 380
// end else
52063: GO 52082
// PrepareHuman ( false , i , skill ) ;
52065: LD_INT 0
52067: PPUSH
52068: LD_VAR 0 8
52072: PPUSH
52073: LD_VAR 0 4
52077: PPUSH
52078: CALL_OW 380
// un := CreateHuman ;
52082: LD_ADDR_VAR 0 14
52086: PUSH
52087: CALL_OW 44
52091: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52092: LD_ADDR_VAR 0 7
52096: PUSH
52097: LD_VAR 0 7
52101: PPUSH
52102: LD_INT 1
52104: PPUSH
52105: LD_VAR 0 14
52109: PPUSH
52110: CALL_OW 2
52114: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52115: LD_VAR 0 14
52119: PPUSH
52120: LD_VAR 0 12
52124: PUSH
52125: LD_INT 1
52127: ARRAY
52128: PPUSH
52129: CALL_OW 52
// end ;
52133: GO 51768
52135: POP
52136: POP
// end ;
52137: GO 51068
52139: POP
52140: POP
// result := result ^ buildings ;
52141: LD_ADDR_VAR 0 7
52145: PUSH
52146: LD_VAR 0 7
52150: PUSH
52151: LD_VAR 0 18
52155: ADD
52156: ST_TO_ADDR
// end else
52157: GO 52300
// begin for i = 1 to personel do
52159: LD_ADDR_VAR 0 8
52163: PUSH
52164: DOUBLE
52165: LD_INT 1
52167: DEC
52168: ST_TO_ADDR
52169: LD_VAR 0 6
52173: PUSH
52174: FOR_TO
52175: IFFALSE 52298
// begin if i > 4 then
52177: LD_VAR 0 8
52181: PUSH
52182: LD_INT 4
52184: GREATER
52185: IFFALSE 52189
// break ;
52187: GO 52298
// x := personel [ i ] ;
52189: LD_ADDR_VAR 0 13
52193: PUSH
52194: LD_VAR 0 6
52198: PUSH
52199: LD_VAR 0 8
52203: ARRAY
52204: ST_TO_ADDR
// if x = - 1 then
52205: LD_VAR 0 13
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: EQUAL
52214: IFFALSE 52218
// continue ;
52216: GO 52174
// PrepareHuman ( false , i , skill ) ;
52218: LD_INT 0
52220: PPUSH
52221: LD_VAR 0 8
52225: PPUSH
52226: LD_VAR 0 4
52230: PPUSH
52231: CALL_OW 380
// un := CreateHuman ;
52235: LD_ADDR_VAR 0 14
52239: PUSH
52240: CALL_OW 44
52244: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52245: LD_VAR 0 14
52249: PPUSH
52250: LD_VAR 0 1
52254: PPUSH
52255: CALL_OW 250
52259: PPUSH
52260: LD_VAR 0 1
52264: PPUSH
52265: CALL_OW 251
52269: PPUSH
52270: LD_INT 10
52272: PPUSH
52273: LD_INT 0
52275: PPUSH
52276: CALL_OW 50
// result := result ^ un ;
52280: LD_ADDR_VAR 0 7
52284: PUSH
52285: LD_VAR 0 7
52289: PUSH
52290: LD_VAR 0 14
52294: ADD
52295: ST_TO_ADDR
// end ;
52296: GO 52174
52298: POP
52299: POP
// end ; end ;
52300: LD_VAR 0 7
52304: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52305: LD_INT 0
52307: PPUSH
52308: PPUSH
52309: PPUSH
52310: PPUSH
52311: PPUSH
52312: PPUSH
52313: PPUSH
52314: PPUSH
52315: PPUSH
52316: PPUSH
52317: PPUSH
52318: PPUSH
52319: PPUSH
52320: PPUSH
52321: PPUSH
52322: PPUSH
// result := false ;
52323: LD_ADDR_VAR 0 3
52327: PUSH
52328: LD_INT 0
52330: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52331: LD_VAR 0 1
52335: NOT
52336: IFTRUE 52361
52338: PUSH
52339: LD_VAR 0 1
52343: PPUSH
52344: CALL_OW 266
52348: PUSH
52349: LD_INT 32
52351: PUSH
52352: LD_INT 33
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: IN
52359: NOT
52360: OR
52361: IFFALSE 52365
// exit ;
52363: GO 53500
// nat := GetNation ( tower ) ;
52365: LD_ADDR_VAR 0 12
52369: PUSH
52370: LD_VAR 0 1
52374: PPUSH
52375: CALL_OW 248
52379: ST_TO_ADDR
// side := GetSide ( tower ) ;
52380: LD_ADDR_VAR 0 16
52384: PUSH
52385: LD_VAR 0 1
52389: PPUSH
52390: CALL_OW 255
52394: ST_TO_ADDR
// x := GetX ( tower ) ;
52395: LD_ADDR_VAR 0 10
52399: PUSH
52400: LD_VAR 0 1
52404: PPUSH
52405: CALL_OW 250
52409: ST_TO_ADDR
// y := GetY ( tower ) ;
52410: LD_ADDR_VAR 0 11
52414: PUSH
52415: LD_VAR 0 1
52419: PPUSH
52420: CALL_OW 251
52424: ST_TO_ADDR
// if not x or not y then
52425: LD_VAR 0 10
52429: NOT
52430: IFTRUE 52439
52432: PUSH
52433: LD_VAR 0 11
52437: NOT
52438: OR
52439: IFFALSE 52443
// exit ;
52441: GO 53500
// weapon := 0 ;
52443: LD_ADDR_VAR 0 18
52447: PUSH
52448: LD_INT 0
52450: ST_TO_ADDR
// fac_list := [ ] ;
52451: LD_ADDR_VAR 0 17
52455: PUSH
52456: EMPTY
52457: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52458: LD_ADDR_VAR 0 6
52462: PUSH
52463: LD_VAR 0 1
52467: PPUSH
52468: CALL_OW 274
52472: PPUSH
52473: LD_VAR 0 2
52477: PPUSH
52478: LD_INT 0
52480: PPUSH
52481: CALL 50035 0 3
52485: PPUSH
52486: LD_INT 30
52488: PUSH
52489: LD_INT 3
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PPUSH
52496: CALL_OW 72
52500: ST_TO_ADDR
// if not factories then
52501: LD_VAR 0 6
52505: NOT
52506: IFFALSE 52510
// exit ;
52508: GO 53500
// for i in factories do
52510: LD_ADDR_VAR 0 8
52514: PUSH
52515: LD_VAR 0 6
52519: PUSH
52520: FOR_IN
52521: IFFALSE 52546
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52523: LD_ADDR_VAR 0 17
52527: PUSH
52528: LD_VAR 0 17
52532: PUSH
52533: LD_VAR 0 8
52537: PPUSH
52538: CALL_OW 478
52542: UNION
52543: ST_TO_ADDR
52544: GO 52520
52546: POP
52547: POP
// if not fac_list then
52548: LD_VAR 0 17
52552: NOT
52553: IFFALSE 52557
// exit ;
52555: GO 53500
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52557: LD_ADDR_VAR 0 5
52561: PUSH
52562: LD_INT 4
52564: PUSH
52565: LD_INT 5
52567: PUSH
52568: LD_INT 9
52570: PUSH
52571: LD_INT 10
52573: PUSH
52574: LD_INT 6
52576: PUSH
52577: LD_INT 7
52579: PUSH
52580: LD_INT 11
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 27
52594: PUSH
52595: LD_INT 28
52597: PUSH
52598: LD_INT 26
52600: PUSH
52601: LD_INT 30
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 43
52612: PUSH
52613: LD_INT 44
52615: PUSH
52616: LD_INT 46
52618: PUSH
52619: LD_INT 45
52621: PUSH
52622: LD_INT 47
52624: PUSH
52625: LD_INT 49
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: LIST
52640: PUSH
52641: LD_VAR 0 12
52645: ARRAY
52646: ST_TO_ADDR
// list := list isect fac_list ;
52647: LD_ADDR_VAR 0 5
52651: PUSH
52652: LD_VAR 0 5
52656: PUSH
52657: LD_VAR 0 17
52661: ISECT
52662: ST_TO_ADDR
// if not list then
52663: LD_VAR 0 5
52667: NOT
52668: IFFALSE 52672
// exit ;
52670: GO 53500
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52672: LD_VAR 0 12
52676: PUSH
52677: LD_INT 3
52679: EQUAL
52680: IFFALSE 52692
52682: PUSH
52683: LD_INT 49
52685: PUSH
52686: LD_VAR 0 5
52690: IN
52691: AND
52692: IFFALSE 52712
52694: PUSH
52695: LD_INT 31
52697: PPUSH
52698: LD_VAR 0 16
52702: PPUSH
52703: CALL_OW 321
52707: PUSH
52708: LD_INT 2
52710: EQUAL
52711: AND
52712: IFFALSE 52772
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52714: LD_INT 22
52716: PUSH
52717: LD_VAR 0 16
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 35
52728: PUSH
52729: LD_INT 49
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 91
52738: PUSH
52739: LD_VAR 0 1
52743: PUSH
52744: LD_INT 10
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: LIST
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: LIST
52756: PPUSH
52757: CALL_OW 69
52761: NOT
52762: IFFALSE 52772
// weapon := ru_time_lapser ;
52764: LD_ADDR_VAR 0 18
52768: PUSH
52769: LD_INT 49
52771: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52772: LD_VAR 0 12
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: IN
52787: IFFALSE 52811
52789: PUSH
52790: LD_INT 11
52792: PUSH
52793: LD_VAR 0 5
52797: IN
52798: IFTRUE 52810
52800: PUSH
52801: LD_INT 30
52803: PUSH
52804: LD_VAR 0 5
52808: IN
52809: OR
52810: AND
52811: IFFALSE 52831
52813: PUSH
52814: LD_INT 6
52816: PPUSH
52817: LD_VAR 0 16
52821: PPUSH
52822: CALL_OW 321
52826: PUSH
52827: LD_INT 2
52829: EQUAL
52830: AND
52831: IFFALSE 52998
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52833: LD_INT 22
52835: PUSH
52836: LD_VAR 0 16
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: LD_INT 35
52850: PUSH
52851: LD_INT 11
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 35
52860: PUSH
52861: LD_INT 30
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 91
52875: PUSH
52876: LD_VAR 0 1
52880: PUSH
52881: LD_INT 18
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: LIST
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: LIST
52893: PPUSH
52894: CALL_OW 69
52898: NOT
52899: IFFALSE 52975
52901: PUSH
52902: LD_INT 22
52904: PUSH
52905: LD_VAR 0 16
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: PUSH
52917: LD_INT 30
52919: PUSH
52920: LD_INT 32
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 30
52929: PUSH
52930: LD_INT 33
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 91
52944: PUSH
52945: LD_VAR 0 1
52949: PUSH
52950: LD_INT 12
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: PUSH
52963: EMPTY
52964: LIST
52965: PPUSH
52966: CALL_OW 69
52970: PUSH
52971: LD_INT 2
52973: GREATER
52974: AND
52975: IFFALSE 52998
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52977: LD_ADDR_VAR 0 18
52981: PUSH
52982: LD_INT 11
52984: PUSH
52985: LD_INT 30
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_VAR 0 12
52996: ARRAY
52997: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52998: LD_VAR 0 18
53002: NOT
53003: IFFALSE 53023
53005: PUSH
53006: LD_INT 40
53008: PPUSH
53009: LD_VAR 0 16
53013: PPUSH
53014: CALL_OW 321
53018: PUSH
53019: LD_INT 2
53021: EQUAL
53022: AND
53023: IFFALSE 53059
53025: PUSH
53026: LD_INT 7
53028: PUSH
53029: LD_VAR 0 5
53033: IN
53034: IFTRUE 53046
53036: PUSH
53037: LD_INT 28
53039: PUSH
53040: LD_VAR 0 5
53044: IN
53045: OR
53046: IFTRUE 53058
53048: PUSH
53049: LD_INT 45
53051: PUSH
53052: LD_VAR 0 5
53056: IN
53057: OR
53058: AND
53059: IFFALSE 53313
// begin hex := GetHexInfo ( x , y ) ;
53061: LD_ADDR_VAR 0 4
53065: PUSH
53066: LD_VAR 0 10
53070: PPUSH
53071: LD_VAR 0 11
53075: PPUSH
53076: CALL_OW 546
53080: ST_TO_ADDR
// if hex [ 1 ] then
53081: LD_VAR 0 4
53085: PUSH
53086: LD_INT 1
53088: ARRAY
53089: IFFALSE 53093
// exit ;
53091: GO 53500
// height := hex [ 2 ] ;
53093: LD_ADDR_VAR 0 15
53097: PUSH
53098: LD_VAR 0 4
53102: PUSH
53103: LD_INT 2
53105: ARRAY
53106: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53107: LD_ADDR_VAR 0 14
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: LD_INT 5
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: ST_TO_ADDR
// for i in tmp do
53130: LD_ADDR_VAR 0 8
53134: PUSH
53135: LD_VAR 0 14
53139: PUSH
53140: FOR_IN
53141: IFFALSE 53311
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53143: LD_ADDR_VAR 0 9
53147: PUSH
53148: LD_VAR 0 10
53152: PPUSH
53153: LD_VAR 0 8
53157: PPUSH
53158: LD_INT 5
53160: PPUSH
53161: CALL_OW 272
53165: PUSH
53166: LD_VAR 0 11
53170: PPUSH
53171: LD_VAR 0 8
53175: PPUSH
53176: LD_INT 5
53178: PPUSH
53179: CALL_OW 273
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53188: LD_VAR 0 9
53192: PUSH
53193: LD_INT 1
53195: ARRAY
53196: PPUSH
53197: LD_VAR 0 9
53201: PUSH
53202: LD_INT 2
53204: ARRAY
53205: PPUSH
53206: CALL_OW 488
53210: IFFALSE 53309
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53212: LD_ADDR_VAR 0 4
53216: PUSH
53217: LD_VAR 0 9
53221: PUSH
53222: LD_INT 1
53224: ARRAY
53225: PPUSH
53226: LD_VAR 0 9
53230: PUSH
53231: LD_INT 2
53233: ARRAY
53234: PPUSH
53235: CALL_OW 546
53239: ST_TO_ADDR
// if hex [ 1 ] then
53240: LD_VAR 0 4
53244: PUSH
53245: LD_INT 1
53247: ARRAY
53248: IFFALSE 53252
// continue ;
53250: GO 53140
// h := hex [ 2 ] ;
53252: LD_ADDR_VAR 0 13
53256: PUSH
53257: LD_VAR 0 4
53261: PUSH
53262: LD_INT 2
53264: ARRAY
53265: ST_TO_ADDR
// if h + 7 < height then
53266: LD_VAR 0 13
53270: PUSH
53271: LD_INT 7
53273: PLUS
53274: PUSH
53275: LD_VAR 0 15
53279: LESS
53280: IFFALSE 53309
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53282: LD_ADDR_VAR 0 18
53286: PUSH
53287: LD_INT 7
53289: PUSH
53290: LD_INT 28
53292: PUSH
53293: LD_INT 45
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: LIST
53300: PUSH
53301: LD_VAR 0 12
53305: ARRAY
53306: ST_TO_ADDR
// break ;
53307: GO 53311
// end ; end ; end ;
53309: GO 53140
53311: POP
53312: POP
// end ; if not weapon then
53313: LD_VAR 0 18
53317: NOT
53318: IFFALSE 53378
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53320: LD_ADDR_VAR 0 5
53324: PUSH
53325: LD_VAR 0 5
53329: PUSH
53330: LD_INT 11
53332: PUSH
53333: LD_INT 30
53335: PUSH
53336: LD_INT 49
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: LIST
53343: DIFF
53344: ST_TO_ADDR
// if not list then
53345: LD_VAR 0 5
53349: NOT
53350: IFFALSE 53354
// exit ;
53352: GO 53500
// weapon := list [ rand ( 1 , list ) ] ;
53354: LD_ADDR_VAR 0 18
53358: PUSH
53359: LD_VAR 0 5
53363: PUSH
53364: LD_INT 1
53366: PPUSH
53367: LD_VAR 0 5
53371: PPUSH
53372: CALL_OW 12
53376: ARRAY
53377: ST_TO_ADDR
// end ; if weapon then
53378: LD_VAR 0 18
53382: IFFALSE 53500
// begin tmp := CostOfWeapon ( weapon ) ;
53384: LD_ADDR_VAR 0 14
53388: PUSH
53389: LD_VAR 0 18
53393: PPUSH
53394: CALL_OW 451
53398: ST_TO_ADDR
// j := GetBase ( tower ) ;
53399: LD_ADDR_VAR 0 9
53403: PUSH
53404: LD_VAR 0 1
53408: PPUSH
53409: CALL_OW 274
53413: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53414: LD_VAR 0 9
53418: PPUSH
53419: LD_INT 1
53421: PPUSH
53422: CALL_OW 275
53426: PUSH
53427: LD_VAR 0 14
53431: PUSH
53432: LD_INT 1
53434: ARRAY
53435: GREATEREQUAL
53436: IFFALSE 53462
53438: PUSH
53439: LD_VAR 0 9
53443: PPUSH
53444: LD_INT 2
53446: PPUSH
53447: CALL_OW 275
53451: PUSH
53452: LD_VAR 0 14
53456: PUSH
53457: LD_INT 2
53459: ARRAY
53460: GREATEREQUAL
53461: AND
53462: IFFALSE 53488
53464: PUSH
53465: LD_VAR 0 9
53469: PPUSH
53470: LD_INT 3
53472: PPUSH
53473: CALL_OW 275
53477: PUSH
53478: LD_VAR 0 14
53482: PUSH
53483: LD_INT 3
53485: ARRAY
53486: GREATEREQUAL
53487: AND
53488: IFFALSE 53500
// result := weapon ;
53490: LD_ADDR_VAR 0 3
53494: PUSH
53495: LD_VAR 0 18
53499: ST_TO_ADDR
// end ; end ;
53500: LD_VAR 0 3
53504: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53505: LD_INT 0
53507: PPUSH
53508: PPUSH
// result := true ;
53509: LD_ADDR_VAR 0 3
53513: PUSH
53514: LD_INT 1
53516: ST_TO_ADDR
// if array1 = array2 then
53517: LD_VAR 0 1
53521: PUSH
53522: LD_VAR 0 2
53526: EQUAL
53527: IFFALSE 53587
// begin for i = 1 to array1 do
53529: LD_ADDR_VAR 0 4
53533: PUSH
53534: DOUBLE
53535: LD_INT 1
53537: DEC
53538: ST_TO_ADDR
53539: LD_VAR 0 1
53543: PUSH
53544: FOR_TO
53545: IFFALSE 53583
// if array1 [ i ] <> array2 [ i ] then
53547: LD_VAR 0 1
53551: PUSH
53552: LD_VAR 0 4
53556: ARRAY
53557: PUSH
53558: LD_VAR 0 2
53562: PUSH
53563: LD_VAR 0 4
53567: ARRAY
53568: NONEQUAL
53569: IFFALSE 53581
// begin result := false ;
53571: LD_ADDR_VAR 0 3
53575: PUSH
53576: LD_INT 0
53578: ST_TO_ADDR
// break ;
53579: GO 53583
// end ;
53581: GO 53544
53583: POP
53584: POP
// end else
53585: GO 53595
// result := false ;
53587: LD_ADDR_VAR 0 3
53591: PUSH
53592: LD_INT 0
53594: ST_TO_ADDR
// end ;
53595: LD_VAR 0 3
53599: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53600: LD_INT 0
53602: PPUSH
53603: PPUSH
// if not array1 or not array2 then
53604: LD_VAR 0 1
53608: NOT
53609: IFTRUE 53618
53611: PUSH
53612: LD_VAR 0 2
53616: NOT
53617: OR
53618: IFFALSE 53622
// exit ;
53620: GO 53686
// result := true ;
53622: LD_ADDR_VAR 0 3
53626: PUSH
53627: LD_INT 1
53629: ST_TO_ADDR
// for i = 1 to array1 do
53630: LD_ADDR_VAR 0 4
53634: PUSH
53635: DOUBLE
53636: LD_INT 1
53638: DEC
53639: ST_TO_ADDR
53640: LD_VAR 0 1
53644: PUSH
53645: FOR_TO
53646: IFFALSE 53684
// if array1 [ i ] <> array2 [ i ] then
53648: LD_VAR 0 1
53652: PUSH
53653: LD_VAR 0 4
53657: ARRAY
53658: PUSH
53659: LD_VAR 0 2
53663: PUSH
53664: LD_VAR 0 4
53668: ARRAY
53669: NONEQUAL
53670: IFFALSE 53682
// begin result := false ;
53672: LD_ADDR_VAR 0 3
53676: PUSH
53677: LD_INT 0
53679: ST_TO_ADDR
// break ;
53680: GO 53684
// end ;
53682: GO 53645
53684: POP
53685: POP
// end ;
53686: LD_VAR 0 3
53690: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53691: LD_INT 0
53693: PPUSH
53694: PPUSH
53695: PPUSH
// pom := GetBase ( fac ) ;
53696: LD_ADDR_VAR 0 5
53700: PUSH
53701: LD_VAR 0 1
53705: PPUSH
53706: CALL_OW 274
53710: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53711: LD_ADDR_VAR 0 4
53715: PUSH
53716: LD_VAR 0 2
53720: PUSH
53721: LD_INT 1
53723: ARRAY
53724: PPUSH
53725: LD_VAR 0 2
53729: PUSH
53730: LD_INT 2
53732: ARRAY
53733: PPUSH
53734: LD_VAR 0 2
53738: PUSH
53739: LD_INT 3
53741: ARRAY
53742: PPUSH
53743: LD_VAR 0 2
53747: PUSH
53748: LD_INT 4
53750: ARRAY
53751: PPUSH
53752: CALL_OW 449
53756: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53757: LD_ADDR_VAR 0 3
53761: PUSH
53762: LD_VAR 0 5
53766: PPUSH
53767: LD_INT 1
53769: PPUSH
53770: CALL_OW 275
53774: PUSH
53775: LD_VAR 0 4
53779: PUSH
53780: LD_INT 1
53782: ARRAY
53783: GREATEREQUAL
53784: IFFALSE 53810
53786: PUSH
53787: LD_VAR 0 5
53791: PPUSH
53792: LD_INT 2
53794: PPUSH
53795: CALL_OW 275
53799: PUSH
53800: LD_VAR 0 4
53804: PUSH
53805: LD_INT 2
53807: ARRAY
53808: GREATEREQUAL
53809: AND
53810: IFFALSE 53836
53812: PUSH
53813: LD_VAR 0 5
53817: PPUSH
53818: LD_INT 3
53820: PPUSH
53821: CALL_OW 275
53825: PUSH
53826: LD_VAR 0 4
53830: PUSH
53831: LD_INT 3
53833: ARRAY
53834: GREATEREQUAL
53835: AND
53836: ST_TO_ADDR
// end ;
53837: LD_VAR 0 3
53841: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53842: LD_INT 0
53844: PPUSH
53845: PPUSH
53846: PPUSH
53847: PPUSH
// pom := GetBase ( building ) ;
53848: LD_ADDR_VAR 0 3
53852: PUSH
53853: LD_VAR 0 1
53857: PPUSH
53858: CALL_OW 274
53862: ST_TO_ADDR
// if not pom then
53863: LD_VAR 0 3
53867: NOT
53868: IFFALSE 53872
// exit ;
53870: GO 54046
// btype := GetBType ( building ) ;
53872: LD_ADDR_VAR 0 5
53876: PUSH
53877: LD_VAR 0 1
53881: PPUSH
53882: CALL_OW 266
53886: ST_TO_ADDR
// if btype = b_armoury then
53887: LD_VAR 0 5
53891: PUSH
53892: LD_INT 4
53894: EQUAL
53895: IFFALSE 53905
// btype := b_barracks ;
53897: LD_ADDR_VAR 0 5
53901: PUSH
53902: LD_INT 5
53904: ST_TO_ADDR
// if btype = b_depot then
53905: LD_VAR 0 5
53909: PUSH
53910: LD_INT 0
53912: EQUAL
53913: IFFALSE 53923
// btype := b_warehouse ;
53915: LD_ADDR_VAR 0 5
53919: PUSH
53920: LD_INT 1
53922: ST_TO_ADDR
// if btype = b_workshop then
53923: LD_VAR 0 5
53927: PUSH
53928: LD_INT 2
53930: EQUAL
53931: IFFALSE 53941
// btype := b_factory ;
53933: LD_ADDR_VAR 0 5
53937: PUSH
53938: LD_INT 3
53940: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53941: LD_ADDR_VAR 0 4
53945: PUSH
53946: LD_VAR 0 5
53950: PPUSH
53951: LD_VAR 0 1
53955: PPUSH
53956: CALL_OW 248
53960: PPUSH
53961: CALL_OW 450
53965: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53966: LD_ADDR_VAR 0 2
53970: PUSH
53971: LD_VAR 0 3
53975: PPUSH
53976: LD_INT 1
53978: PPUSH
53979: CALL_OW 275
53983: PUSH
53984: LD_VAR 0 4
53988: PUSH
53989: LD_INT 1
53991: ARRAY
53992: GREATEREQUAL
53993: IFFALSE 54019
53995: PUSH
53996: LD_VAR 0 3
54000: PPUSH
54001: LD_INT 2
54003: PPUSH
54004: CALL_OW 275
54008: PUSH
54009: LD_VAR 0 4
54013: PUSH
54014: LD_INT 2
54016: ARRAY
54017: GREATEREQUAL
54018: AND
54019: IFFALSE 54045
54021: PUSH
54022: LD_VAR 0 3
54026: PPUSH
54027: LD_INT 3
54029: PPUSH
54030: CALL_OW 275
54034: PUSH
54035: LD_VAR 0 4
54039: PUSH
54040: LD_INT 3
54042: ARRAY
54043: GREATEREQUAL
54044: AND
54045: ST_TO_ADDR
// end ;
54046: LD_VAR 0 2
54050: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54051: LD_INT 0
54053: PPUSH
54054: PPUSH
54055: PPUSH
// pom := GetBase ( building ) ;
54056: LD_ADDR_VAR 0 4
54060: PUSH
54061: LD_VAR 0 1
54065: PPUSH
54066: CALL_OW 274
54070: ST_TO_ADDR
// if not pom then
54071: LD_VAR 0 4
54075: NOT
54076: IFFALSE 54080
// exit ;
54078: GO 54185
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54080: LD_ADDR_VAR 0 5
54084: PUSH
54085: LD_VAR 0 2
54089: PPUSH
54090: LD_VAR 0 1
54094: PPUSH
54095: CALL_OW 248
54099: PPUSH
54100: CALL_OW 450
54104: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54105: LD_ADDR_VAR 0 3
54109: PUSH
54110: LD_VAR 0 4
54114: PPUSH
54115: LD_INT 1
54117: PPUSH
54118: CALL_OW 275
54122: PUSH
54123: LD_VAR 0 5
54127: PUSH
54128: LD_INT 1
54130: ARRAY
54131: GREATEREQUAL
54132: IFFALSE 54158
54134: PUSH
54135: LD_VAR 0 4
54139: PPUSH
54140: LD_INT 2
54142: PPUSH
54143: CALL_OW 275
54147: PUSH
54148: LD_VAR 0 5
54152: PUSH
54153: LD_INT 2
54155: ARRAY
54156: GREATEREQUAL
54157: AND
54158: IFFALSE 54184
54160: PUSH
54161: LD_VAR 0 4
54165: PPUSH
54166: LD_INT 3
54168: PPUSH
54169: CALL_OW 275
54173: PUSH
54174: LD_VAR 0 5
54178: PUSH
54179: LD_INT 3
54181: ARRAY
54182: GREATEREQUAL
54183: AND
54184: ST_TO_ADDR
// end ;
54185: LD_VAR 0 3
54189: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54190: LD_INT 0
54192: PPUSH
54193: PPUSH
54194: PPUSH
54195: PPUSH
54196: PPUSH
54197: PPUSH
54198: PPUSH
54199: PPUSH
54200: PPUSH
54201: PPUSH
54202: PPUSH
// result := false ;
54203: LD_ADDR_VAR 0 8
54207: PUSH
54208: LD_INT 0
54210: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54211: LD_VAR 0 5
54215: NOT
54216: IFTRUE 54225
54218: PUSH
54219: LD_VAR 0 1
54223: NOT
54224: OR
54225: IFTRUE 54234
54227: PUSH
54228: LD_VAR 0 2
54232: NOT
54233: OR
54234: IFTRUE 54243
54236: PUSH
54237: LD_VAR 0 3
54241: NOT
54242: OR
54243: IFFALSE 54247
// exit ;
54245: GO 55073
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54247: LD_ADDR_VAR 0 14
54251: PUSH
54252: LD_VAR 0 1
54256: PPUSH
54257: LD_VAR 0 2
54261: PPUSH
54262: LD_VAR 0 3
54266: PPUSH
54267: LD_VAR 0 4
54271: PPUSH
54272: LD_VAR 0 5
54276: PUSH
54277: LD_INT 1
54279: ARRAY
54280: PPUSH
54281: CALL_OW 248
54285: PPUSH
54286: LD_INT 0
54288: PPUSH
54289: CALL 56354 0 6
54293: ST_TO_ADDR
// if not hexes then
54294: LD_VAR 0 14
54298: NOT
54299: IFFALSE 54303
// exit ;
54301: GO 55073
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54303: LD_ADDR_VAR 0 17
54307: PUSH
54308: LD_VAR 0 5
54312: PPUSH
54313: LD_INT 22
54315: PUSH
54316: LD_VAR 0 13
54320: PPUSH
54321: CALL_OW 255
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: LD_INT 30
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 30
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PPUSH
54362: CALL_OW 72
54366: ST_TO_ADDR
// for i = 1 to hexes do
54367: LD_ADDR_VAR 0 9
54371: PUSH
54372: DOUBLE
54373: LD_INT 1
54375: DEC
54376: ST_TO_ADDR
54377: LD_VAR 0 14
54381: PUSH
54382: FOR_TO
54383: IFFALSE 55071
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54385: LD_ADDR_VAR 0 13
54389: PUSH
54390: LD_VAR 0 14
54394: PUSH
54395: LD_VAR 0 9
54399: ARRAY
54400: PUSH
54401: LD_INT 1
54403: ARRAY
54404: PPUSH
54405: LD_VAR 0 14
54409: PUSH
54410: LD_VAR 0 9
54414: ARRAY
54415: PUSH
54416: LD_INT 2
54418: ARRAY
54419: PPUSH
54420: CALL_OW 428
54424: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54425: LD_VAR 0 14
54429: PUSH
54430: LD_VAR 0 9
54434: ARRAY
54435: PUSH
54436: LD_INT 1
54438: ARRAY
54439: PPUSH
54440: LD_VAR 0 14
54444: PUSH
54445: LD_VAR 0 9
54449: ARRAY
54450: PUSH
54451: LD_INT 2
54453: ARRAY
54454: PPUSH
54455: CALL_OW 351
54459: IFTRUE 54498
54461: PUSH
54462: LD_VAR 0 14
54466: PUSH
54467: LD_VAR 0 9
54471: ARRAY
54472: PUSH
54473: LD_INT 1
54475: ARRAY
54476: PPUSH
54477: LD_VAR 0 14
54481: PUSH
54482: LD_VAR 0 9
54486: ARRAY
54487: PUSH
54488: LD_INT 2
54490: ARRAY
54491: PPUSH
54492: CALL_OW 488
54496: NOT
54497: OR
54498: IFTRUE 54515
54500: PUSH
54501: LD_VAR 0 13
54505: PPUSH
54506: CALL_OW 247
54510: PUSH
54511: LD_INT 3
54513: EQUAL
54514: OR
54515: IFFALSE 54521
// exit ;
54517: POP
54518: POP
54519: GO 55073
// if not tmp then
54521: LD_VAR 0 13
54525: NOT
54526: IFFALSE 54530
// continue ;
54528: GO 54382
// result := true ;
54530: LD_ADDR_VAR 0 8
54534: PUSH
54535: LD_INT 1
54537: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54538: LD_VAR 0 6
54542: IFFALSE 54559
54544: PUSH
54545: LD_VAR 0 13
54549: PPUSH
54550: CALL_OW 247
54554: PUSH
54555: LD_INT 2
54557: EQUAL
54558: AND
54559: IFFALSE 54576
54561: PUSH
54562: LD_VAR 0 13
54566: PPUSH
54567: CALL_OW 263
54571: PUSH
54572: LD_INT 1
54574: EQUAL
54575: AND
54576: IFFALSE 54740
// begin if IsDrivenBy ( tmp ) then
54578: LD_VAR 0 13
54582: PPUSH
54583: CALL_OW 311
54587: IFFALSE 54591
// continue ;
54589: GO 54382
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54591: LD_VAR 0 6
54595: PPUSH
54596: LD_INT 3
54598: PUSH
54599: LD_INT 60
54601: PUSH
54602: EMPTY
54603: LIST
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 3
54611: PUSH
54612: LD_INT 55
54614: PUSH
54615: EMPTY
54616: LIST
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PPUSH
54626: CALL_OW 72
54630: IFFALSE 54738
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54632: LD_ADDR_VAR 0 18
54636: PUSH
54637: LD_VAR 0 6
54641: PPUSH
54642: LD_INT 3
54644: PUSH
54645: LD_INT 60
54647: PUSH
54648: EMPTY
54649: LIST
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 3
54657: PUSH
54658: LD_INT 55
54660: PUSH
54661: EMPTY
54662: LIST
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PPUSH
54672: CALL_OW 72
54676: PUSH
54677: LD_INT 1
54679: ARRAY
54680: ST_TO_ADDR
// if IsInUnit ( driver ) then
54681: LD_VAR 0 18
54685: PPUSH
54686: CALL_OW 310
54690: IFFALSE 54701
// ComExit ( driver ) ;
54692: LD_VAR 0 18
54696: PPUSH
54697: CALL 80344 0 1
// AddComEnterUnit ( driver , tmp ) ;
54701: LD_VAR 0 18
54705: PPUSH
54706: LD_VAR 0 13
54710: PPUSH
54711: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54715: LD_VAR 0 18
54719: PPUSH
54720: LD_VAR 0 7
54724: PPUSH
54725: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54729: LD_VAR 0 18
54733: PPUSH
54734: CALL_OW 181
// end ; continue ;
54738: GO 54382
// end ; if not cleaners or not tmp in cleaners then
54740: LD_VAR 0 6
54744: NOT
54745: IFTRUE 54760
54747: PUSH
54748: LD_VAR 0 13
54752: PUSH
54753: LD_VAR 0 6
54757: IN
54758: NOT
54759: OR
54760: IFFALSE 55069
// begin if dep then
54762: LD_VAR 0 17
54766: IFFALSE 54902
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54768: LD_ADDR_VAR 0 16
54772: PUSH
54773: LD_VAR 0 17
54777: PUSH
54778: LD_INT 1
54780: ARRAY
54781: PPUSH
54782: CALL_OW 250
54786: PPUSH
54787: LD_VAR 0 17
54791: PUSH
54792: LD_INT 1
54794: ARRAY
54795: PPUSH
54796: CALL_OW 254
54800: PPUSH
54801: LD_INT 5
54803: PPUSH
54804: CALL_OW 272
54808: PUSH
54809: LD_VAR 0 17
54813: PUSH
54814: LD_INT 1
54816: ARRAY
54817: PPUSH
54818: CALL_OW 251
54822: PPUSH
54823: LD_VAR 0 17
54827: PUSH
54828: LD_INT 1
54830: ARRAY
54831: PPUSH
54832: CALL_OW 254
54836: PPUSH
54837: LD_INT 5
54839: PPUSH
54840: CALL_OW 273
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54849: LD_VAR 0 16
54853: PUSH
54854: LD_INT 1
54856: ARRAY
54857: PPUSH
54858: LD_VAR 0 16
54862: PUSH
54863: LD_INT 2
54865: ARRAY
54866: PPUSH
54867: CALL_OW 488
54871: IFFALSE 54902
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54873: LD_VAR 0 13
54877: PPUSH
54878: LD_VAR 0 16
54882: PUSH
54883: LD_INT 1
54885: ARRAY
54886: PPUSH
54887: LD_VAR 0 16
54891: PUSH
54892: LD_INT 2
54894: ARRAY
54895: PPUSH
54896: CALL_OW 111
// continue ;
54900: GO 54382
// end ; end ; r := GetDir ( tmp ) ;
54902: LD_ADDR_VAR 0 15
54906: PUSH
54907: LD_VAR 0 13
54911: PPUSH
54912: CALL_OW 254
54916: ST_TO_ADDR
// if r = 5 then
54917: LD_VAR 0 15
54921: PUSH
54922: LD_INT 5
54924: EQUAL
54925: IFFALSE 54935
// r := 0 ;
54927: LD_ADDR_VAR 0 15
54931: PUSH
54932: LD_INT 0
54934: ST_TO_ADDR
// for j = r to 5 do
54935: LD_ADDR_VAR 0 10
54939: PUSH
54940: DOUBLE
54941: LD_VAR 0 15
54945: DEC
54946: ST_TO_ADDR
54947: LD_INT 5
54949: PUSH
54950: FOR_TO
54951: IFFALSE 55067
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54953: LD_ADDR_VAR 0 11
54957: PUSH
54958: LD_VAR 0 13
54962: PPUSH
54963: CALL_OW 250
54967: PPUSH
54968: LD_VAR 0 10
54972: PPUSH
54973: LD_INT 2
54975: PPUSH
54976: CALL_OW 272
54980: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54981: LD_ADDR_VAR 0 12
54985: PUSH
54986: LD_VAR 0 13
54990: PPUSH
54991: CALL_OW 251
54995: PPUSH
54996: LD_VAR 0 10
55000: PPUSH
55001: LD_INT 2
55003: PPUSH
55004: CALL_OW 273
55008: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55009: LD_VAR 0 11
55013: PPUSH
55014: LD_VAR 0 12
55018: PPUSH
55019: CALL_OW 488
55023: IFFALSE 55042
55025: PUSH
55026: LD_VAR 0 11
55030: PPUSH
55031: LD_VAR 0 12
55035: PPUSH
55036: CALL_OW 428
55040: NOT
55041: AND
55042: IFFALSE 55065
// begin ComMoveXY ( tmp , _x , _y ) ;
55044: LD_VAR 0 13
55048: PPUSH
55049: LD_VAR 0 11
55053: PPUSH
55054: LD_VAR 0 12
55058: PPUSH
55059: CALL_OW 111
// break ;
55063: GO 55067
// end ; end ;
55065: GO 54950
55067: POP
55068: POP
// end ; end ;
55069: GO 54382
55071: POP
55072: POP
// end ;
55073: LD_VAR 0 8
55077: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55078: LD_INT 0
55080: PPUSH
// result := true ;
55081: LD_ADDR_VAR 0 3
55085: PUSH
55086: LD_INT 1
55088: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55089: LD_VAR 0 2
55093: PUSH
55094: LD_INT 24
55096: DOUBLE
55097: EQUAL
55098: IFTRUE 55108
55100: LD_INT 33
55102: DOUBLE
55103: EQUAL
55104: IFTRUE 55108
55106: GO 55133
55108: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55109: LD_ADDR_VAR 0 3
55113: PUSH
55114: LD_INT 32
55116: PPUSH
55117: LD_VAR 0 1
55121: PPUSH
55122: CALL_OW 321
55126: PUSH
55127: LD_INT 2
55129: EQUAL
55130: ST_TO_ADDR
55131: GO 55449
55133: LD_INT 20
55135: DOUBLE
55136: EQUAL
55137: IFTRUE 55141
55139: GO 55166
55141: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55142: LD_ADDR_VAR 0 3
55146: PUSH
55147: LD_INT 6
55149: PPUSH
55150: LD_VAR 0 1
55154: PPUSH
55155: CALL_OW 321
55159: PUSH
55160: LD_INT 2
55162: EQUAL
55163: ST_TO_ADDR
55164: GO 55449
55166: LD_INT 22
55168: DOUBLE
55169: EQUAL
55170: IFTRUE 55180
55172: LD_INT 36
55174: DOUBLE
55175: EQUAL
55176: IFTRUE 55180
55178: GO 55205
55180: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55181: LD_ADDR_VAR 0 3
55185: PUSH
55186: LD_INT 15
55188: PPUSH
55189: LD_VAR 0 1
55193: PPUSH
55194: CALL_OW 321
55198: PUSH
55199: LD_INT 2
55201: EQUAL
55202: ST_TO_ADDR
55203: GO 55449
55205: LD_INT 30
55207: DOUBLE
55208: EQUAL
55209: IFTRUE 55213
55211: GO 55238
55213: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55214: LD_ADDR_VAR 0 3
55218: PUSH
55219: LD_INT 20
55221: PPUSH
55222: LD_VAR 0 1
55226: PPUSH
55227: CALL_OW 321
55231: PUSH
55232: LD_INT 2
55234: EQUAL
55235: ST_TO_ADDR
55236: GO 55449
55238: LD_INT 28
55240: DOUBLE
55241: EQUAL
55242: IFTRUE 55252
55244: LD_INT 21
55246: DOUBLE
55247: EQUAL
55248: IFTRUE 55252
55250: GO 55277
55252: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55253: LD_ADDR_VAR 0 3
55257: PUSH
55258: LD_INT 21
55260: PPUSH
55261: LD_VAR 0 1
55265: PPUSH
55266: CALL_OW 321
55270: PUSH
55271: LD_INT 2
55273: EQUAL
55274: ST_TO_ADDR
55275: GO 55449
55277: LD_INT 16
55279: DOUBLE
55280: EQUAL
55281: IFTRUE 55285
55283: GO 55310
55285: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55286: LD_ADDR_VAR 0 3
55290: PUSH
55291: LD_INT 84
55293: PPUSH
55294: LD_VAR 0 1
55298: PPUSH
55299: CALL_OW 321
55303: PUSH
55304: LD_INT 2
55306: EQUAL
55307: ST_TO_ADDR
55308: GO 55449
55310: LD_INT 19
55312: DOUBLE
55313: EQUAL
55314: IFTRUE 55324
55316: LD_INT 23
55318: DOUBLE
55319: EQUAL
55320: IFTRUE 55324
55322: GO 55349
55324: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55325: LD_ADDR_VAR 0 3
55329: PUSH
55330: LD_INT 83
55332: PPUSH
55333: LD_VAR 0 1
55337: PPUSH
55338: CALL_OW 321
55342: PUSH
55343: LD_INT 2
55345: EQUAL
55346: ST_TO_ADDR
55347: GO 55449
55349: LD_INT 17
55351: DOUBLE
55352: EQUAL
55353: IFTRUE 55357
55355: GO 55382
55357: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55358: LD_ADDR_VAR 0 3
55362: PUSH
55363: LD_INT 39
55365: PPUSH
55366: LD_VAR 0 1
55370: PPUSH
55371: CALL_OW 321
55375: PUSH
55376: LD_INT 2
55378: EQUAL
55379: ST_TO_ADDR
55380: GO 55449
55382: LD_INT 18
55384: DOUBLE
55385: EQUAL
55386: IFTRUE 55390
55388: GO 55415
55390: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55391: LD_ADDR_VAR 0 3
55395: PUSH
55396: LD_INT 40
55398: PPUSH
55399: LD_VAR 0 1
55403: PPUSH
55404: CALL_OW 321
55408: PUSH
55409: LD_INT 2
55411: EQUAL
55412: ST_TO_ADDR
55413: GO 55449
55415: LD_INT 27
55417: DOUBLE
55418: EQUAL
55419: IFTRUE 55423
55421: GO 55448
55423: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55424: LD_ADDR_VAR 0 3
55428: PUSH
55429: LD_INT 35
55431: PPUSH
55432: LD_VAR 0 1
55436: PPUSH
55437: CALL_OW 321
55441: PUSH
55442: LD_INT 2
55444: EQUAL
55445: ST_TO_ADDR
55446: GO 55449
55448: POP
// end ;
55449: LD_VAR 0 3
55453: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55454: LD_INT 0
55456: PPUSH
55457: PPUSH
55458: PPUSH
55459: PPUSH
55460: PPUSH
55461: PPUSH
55462: PPUSH
55463: PPUSH
55464: PPUSH
55465: PPUSH
55466: PPUSH
// result := false ;
55467: LD_ADDR_VAR 0 6
55471: PUSH
55472: LD_INT 0
55474: ST_TO_ADDR
// if btype = b_depot then
55475: LD_VAR 0 2
55479: PUSH
55480: LD_INT 0
55482: EQUAL
55483: IFFALSE 55495
// begin result := true ;
55485: LD_ADDR_VAR 0 6
55489: PUSH
55490: LD_INT 1
55492: ST_TO_ADDR
// exit ;
55493: GO 56349
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55495: LD_VAR 0 1
55499: NOT
55500: IFTRUE 55525
55502: PUSH
55503: LD_VAR 0 1
55507: PPUSH
55508: CALL_OW 266
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: IN
55523: NOT
55524: OR
55525: IFTRUE 55534
55527: PUSH
55528: LD_VAR 0 2
55532: NOT
55533: OR
55534: IFTRUE 55570
55536: PUSH
55537: LD_VAR 0 5
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: LD_INT 3
55553: PUSH
55554: LD_INT 4
55556: PUSH
55557: LD_INT 5
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: IN
55568: NOT
55569: OR
55570: IFTRUE 55589
55572: PUSH
55573: LD_VAR 0 3
55577: PPUSH
55578: LD_VAR 0 4
55582: PPUSH
55583: CALL_OW 488
55587: NOT
55588: OR
55589: IFFALSE 55593
// exit ;
55591: GO 56349
// side := GetSide ( depot ) ;
55593: LD_ADDR_VAR 0 9
55597: PUSH
55598: LD_VAR 0 1
55602: PPUSH
55603: CALL_OW 255
55607: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55608: LD_VAR 0 9
55612: PPUSH
55613: LD_VAR 0 2
55617: PPUSH
55618: CALL 55078 0 2
55622: NOT
55623: IFFALSE 55627
// exit ;
55625: GO 56349
// pom := GetBase ( depot ) ;
55627: LD_ADDR_VAR 0 10
55631: PUSH
55632: LD_VAR 0 1
55636: PPUSH
55637: CALL_OW 274
55641: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55642: LD_ADDR_VAR 0 11
55646: PUSH
55647: LD_VAR 0 2
55651: PPUSH
55652: LD_VAR 0 1
55656: PPUSH
55657: CALL_OW 248
55661: PPUSH
55662: CALL_OW 450
55666: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55667: LD_VAR 0 10
55671: PPUSH
55672: LD_INT 1
55674: PPUSH
55675: CALL_OW 275
55679: PUSH
55680: LD_VAR 0 11
55684: PUSH
55685: LD_INT 1
55687: ARRAY
55688: GREATEREQUAL
55689: IFFALSE 55715
55691: PUSH
55692: LD_VAR 0 10
55696: PPUSH
55697: LD_INT 2
55699: PPUSH
55700: CALL_OW 275
55704: PUSH
55705: LD_VAR 0 11
55709: PUSH
55710: LD_INT 2
55712: ARRAY
55713: GREATEREQUAL
55714: AND
55715: IFFALSE 55741
55717: PUSH
55718: LD_VAR 0 10
55722: PPUSH
55723: LD_INT 3
55725: PPUSH
55726: CALL_OW 275
55730: PUSH
55731: LD_VAR 0 11
55735: PUSH
55736: LD_INT 3
55738: ARRAY
55739: GREATEREQUAL
55740: AND
55741: NOT
55742: IFFALSE 55746
// exit ;
55744: GO 56349
// if GetBType ( depot ) = b_depot then
55746: LD_VAR 0 1
55750: PPUSH
55751: CALL_OW 266
55755: PUSH
55756: LD_INT 0
55758: EQUAL
55759: IFFALSE 55771
// dist := 28 else
55761: LD_ADDR_VAR 0 14
55765: PUSH
55766: LD_INT 28
55768: ST_TO_ADDR
55769: GO 55779
// dist := 36 ;
55771: LD_ADDR_VAR 0 14
55775: PUSH
55776: LD_INT 36
55778: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55779: LD_VAR 0 1
55783: PPUSH
55784: LD_VAR 0 3
55788: PPUSH
55789: LD_VAR 0 4
55793: PPUSH
55794: CALL_OW 297
55798: PUSH
55799: LD_VAR 0 14
55803: GREATER
55804: IFFALSE 55808
// exit ;
55806: GO 56349
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55808: LD_ADDR_VAR 0 12
55812: PUSH
55813: LD_VAR 0 2
55817: PPUSH
55818: LD_VAR 0 3
55822: PPUSH
55823: LD_VAR 0 4
55827: PPUSH
55828: LD_VAR 0 5
55832: PPUSH
55833: LD_VAR 0 1
55837: PPUSH
55838: CALL_OW 248
55842: PPUSH
55843: LD_INT 0
55845: PPUSH
55846: CALL 56354 0 6
55850: ST_TO_ADDR
// if not hexes then
55851: LD_VAR 0 12
55855: NOT
55856: IFFALSE 55860
// exit ;
55858: GO 56349
// hex := GetHexInfo ( x , y ) ;
55860: LD_ADDR_VAR 0 15
55864: PUSH
55865: LD_VAR 0 3
55869: PPUSH
55870: LD_VAR 0 4
55874: PPUSH
55875: CALL_OW 546
55879: ST_TO_ADDR
// if hex [ 1 ] then
55880: LD_VAR 0 15
55884: PUSH
55885: LD_INT 1
55887: ARRAY
55888: IFFALSE 55892
// exit ;
55890: GO 56349
// height := hex [ 2 ] ;
55892: LD_ADDR_VAR 0 13
55896: PUSH
55897: LD_VAR 0 15
55901: PUSH
55902: LD_INT 2
55904: ARRAY
55905: ST_TO_ADDR
// for i = 1 to hexes do
55906: LD_ADDR_VAR 0 7
55910: PUSH
55911: DOUBLE
55912: LD_INT 1
55914: DEC
55915: ST_TO_ADDR
55916: LD_VAR 0 12
55920: PUSH
55921: FOR_TO
55922: IFFALSE 56266
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55924: LD_VAR 0 12
55928: PUSH
55929: LD_VAR 0 7
55933: ARRAY
55934: PUSH
55935: LD_INT 1
55937: ARRAY
55938: PPUSH
55939: LD_VAR 0 12
55943: PUSH
55944: LD_VAR 0 7
55948: ARRAY
55949: PUSH
55950: LD_INT 2
55952: ARRAY
55953: PPUSH
55954: CALL_OW 488
55958: NOT
55959: IFTRUE 56001
55961: PUSH
55962: LD_VAR 0 12
55966: PUSH
55967: LD_VAR 0 7
55971: ARRAY
55972: PUSH
55973: LD_INT 1
55975: ARRAY
55976: PPUSH
55977: LD_VAR 0 12
55981: PUSH
55982: LD_VAR 0 7
55986: ARRAY
55987: PUSH
55988: LD_INT 2
55990: ARRAY
55991: PPUSH
55992: CALL_OW 428
55996: PUSH
55997: LD_INT 0
55999: GREATER
56000: OR
56001: IFTRUE 56039
56003: PUSH
56004: LD_VAR 0 12
56008: PUSH
56009: LD_VAR 0 7
56013: ARRAY
56014: PUSH
56015: LD_INT 1
56017: ARRAY
56018: PPUSH
56019: LD_VAR 0 12
56023: PUSH
56024: LD_VAR 0 7
56028: ARRAY
56029: PUSH
56030: LD_INT 2
56032: ARRAY
56033: PPUSH
56034: CALL_OW 351
56038: OR
56039: IFFALSE 56045
// exit ;
56041: POP
56042: POP
56043: GO 56349
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56045: LD_ADDR_VAR 0 8
56049: PUSH
56050: LD_VAR 0 12
56054: PUSH
56055: LD_VAR 0 7
56059: ARRAY
56060: PUSH
56061: LD_INT 1
56063: ARRAY
56064: PPUSH
56065: LD_VAR 0 12
56069: PUSH
56070: LD_VAR 0 7
56074: ARRAY
56075: PUSH
56076: LD_INT 2
56078: ARRAY
56079: PPUSH
56080: CALL_OW 546
56084: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56085: LD_VAR 0 8
56089: PUSH
56090: LD_INT 1
56092: ARRAY
56093: IFTRUE 56115
56095: PUSH
56096: LD_VAR 0 8
56100: PUSH
56101: LD_INT 2
56103: ARRAY
56104: PUSH
56105: LD_VAR 0 13
56109: PUSH
56110: LD_INT 2
56112: PLUS
56113: GREATER
56114: OR
56115: IFTRUE 56137
56117: PUSH
56118: LD_VAR 0 8
56122: PUSH
56123: LD_INT 2
56125: ARRAY
56126: PUSH
56127: LD_VAR 0 13
56131: PUSH
56132: LD_INT 2
56134: MINUS
56135: LESS
56136: OR
56137: IFTRUE 56205
56139: PUSH
56140: LD_VAR 0 8
56144: PUSH
56145: LD_INT 3
56147: ARRAY
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: LD_INT 8
56154: PUSH
56155: LD_INT 9
56157: PUSH
56158: LD_INT 10
56160: PUSH
56161: LD_INT 11
56163: PUSH
56164: LD_INT 12
56166: PUSH
56167: LD_INT 13
56169: PUSH
56170: LD_INT 16
56172: PUSH
56173: LD_INT 17
56175: PUSH
56176: LD_INT 18
56178: PUSH
56179: LD_INT 19
56181: PUSH
56182: LD_INT 20
56184: PUSH
56185: LD_INT 21
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: IN
56203: NOT
56204: OR
56205: IFTRUE 56218
56207: PUSH
56208: LD_VAR 0 8
56212: PUSH
56213: LD_INT 5
56215: ARRAY
56216: NOT
56217: OR
56218: IFTRUE 56258
56220: PUSH
56221: LD_VAR 0 8
56225: PUSH
56226: LD_INT 6
56228: ARRAY
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: LD_INT 7
56238: PUSH
56239: LD_INT 9
56241: PUSH
56242: LD_INT 10
56244: PUSH
56245: LD_INT 11
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: IN
56256: NOT
56257: OR
56258: IFFALSE 56264
// exit ;
56260: POP
56261: POP
56262: GO 56349
// end ;
56264: GO 55921
56266: POP
56267: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56268: LD_VAR 0 9
56272: PPUSH
56273: LD_VAR 0 3
56277: PPUSH
56278: LD_VAR 0 4
56282: PPUSH
56283: LD_INT 20
56285: PPUSH
56286: CALL 48168 0 4
56290: PUSH
56291: LD_INT 4
56293: ARRAY
56294: IFFALSE 56298
// exit ;
56296: GO 56349
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56298: LD_VAR 0 2
56302: PUSH
56303: LD_INT 29
56305: PUSH
56306: LD_INT 30
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: IN
56313: IFFALSE 56337
56315: PUSH
56316: LD_VAR 0 3
56320: PPUSH
56321: LD_VAR 0 4
56325: PPUSH
56326: LD_VAR 0 9
56330: PPUSH
56331: CALL_OW 440
56335: NOT
56336: AND
56337: IFFALSE 56341
// exit ;
56339: GO 56349
// result := true ;
56341: LD_ADDR_VAR 0 6
56345: PUSH
56346: LD_INT 1
56348: ST_TO_ADDR
// end ;
56349: LD_VAR 0 6
56353: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56354: LD_INT 0
56356: PPUSH
56357: PPUSH
56358: PPUSH
56359: PPUSH
56360: PPUSH
56361: PPUSH
56362: PPUSH
56363: PPUSH
56364: PPUSH
56365: PPUSH
56366: PPUSH
56367: PPUSH
56368: PPUSH
56369: PPUSH
56370: PPUSH
56371: PPUSH
56372: PPUSH
56373: PPUSH
56374: PPUSH
56375: PPUSH
56376: PPUSH
56377: PPUSH
56378: PPUSH
56379: PPUSH
56380: PPUSH
56381: PPUSH
56382: PPUSH
56383: PPUSH
56384: PPUSH
56385: PPUSH
56386: PPUSH
56387: PPUSH
56388: PPUSH
56389: PPUSH
56390: PPUSH
56391: PPUSH
56392: PPUSH
56393: PPUSH
56394: PPUSH
56395: PPUSH
56396: PPUSH
56397: PPUSH
56398: PPUSH
56399: PPUSH
56400: PPUSH
56401: PPUSH
56402: PPUSH
56403: PPUSH
56404: PPUSH
56405: PPUSH
56406: PPUSH
56407: PPUSH
56408: PPUSH
56409: PPUSH
56410: PPUSH
56411: PPUSH
56412: PPUSH
56413: PPUSH
// result = [ ] ;
56414: LD_ADDR_VAR 0 7
56418: PUSH
56419: EMPTY
56420: ST_TO_ADDR
// temp_list = [ ] ;
56421: LD_ADDR_VAR 0 9
56425: PUSH
56426: EMPTY
56427: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56428: LD_VAR 0 4
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: LD_INT 3
56444: PUSH
56445: LD_INT 4
56447: PUSH
56448: LD_INT 5
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: IN
56459: NOT
56460: IFTRUE 56503
56462: PUSH
56463: LD_VAR 0 1
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: IN
56478: IFFALSE 56502
56480: PUSH
56481: LD_VAR 0 5
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: LD_INT 3
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: LIST
56499: IN
56500: NOT
56501: AND
56502: OR
56503: IFFALSE 56507
// exit ;
56505: GO 74906
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56507: LD_VAR 0 1
56511: PUSH
56512: LD_INT 6
56514: PUSH
56515: LD_INT 7
56517: PUSH
56518: LD_INT 8
56520: PUSH
56521: LD_INT 13
56523: PUSH
56524: LD_INT 12
56526: PUSH
56527: LD_INT 15
56529: PUSH
56530: LD_INT 11
56532: PUSH
56533: LD_INT 14
56535: PUSH
56536: LD_INT 10
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: IN
56550: IFFALSE 56560
// btype = b_lab ;
56552: LD_ADDR_VAR 0 1
56556: PUSH
56557: LD_INT 6
56559: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56560: LD_VAR 0 6
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: LIST
56578: IN
56579: NOT
56580: IFTRUE 56648
56582: PUSH
56583: LD_VAR 0 1
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: LD_INT 6
56602: PUSH
56603: LD_INT 36
56605: PUSH
56606: LD_INT 4
56608: PUSH
56609: LD_INT 5
56611: PUSH
56612: LD_INT 31
56614: PUSH
56615: LD_INT 32
56617: PUSH
56618: LD_INT 33
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: IN
56634: NOT
56635: IFFALSE 56647
56637: PUSH
56638: LD_VAR 0 6
56642: PUSH
56643: LD_INT 1
56645: EQUAL
56646: AND
56647: OR
56648: IFTRUE 56680
56650: PUSH
56651: LD_VAR 0 1
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: IN
56666: NOT
56667: IFFALSE 56679
56669: PUSH
56670: LD_VAR 0 6
56674: PUSH
56675: LD_INT 2
56677: EQUAL
56678: AND
56679: OR
56680: IFFALSE 56690
// mode = 0 ;
56682: LD_ADDR_VAR 0 6
56686: PUSH
56687: LD_INT 0
56689: ST_TO_ADDR
// case mode of 0 :
56690: LD_VAR 0 6
56694: PUSH
56695: LD_INT 0
56697: DOUBLE
56698: EQUAL
56699: IFTRUE 56703
56701: GO 68156
56703: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56704: LD_ADDR_VAR 0 11
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 2
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: LD_INT 3
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 3
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56897: LD_ADDR_VAR 0 12
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 3
57054: NEG
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 3
57065: NEG
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57093: LD_ADDR_VAR 0 13
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 2
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 2
57240: NEG
57241: PUSH
57242: LD_INT 3
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 3
57252: NEG
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 3
57264: NEG
57265: PUSH
57266: LD_INT 3
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57292: LD_ADDR_VAR 0 14
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 2
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: NEG
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 3
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 2
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57488: LD_ADDR_VAR 0 15
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 2
57611: NEG
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 3
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 3
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57681: LD_ADDR_VAR 0 16
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: LD_INT 2
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: NEG
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 3
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: LD_INT 3
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 2
57848: PUSH
57849: LD_INT 3
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57874: LD_ADDR_VAR 0 17
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: LD_INT 2
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: LD_INT 2
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: NEG
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: LD_INT 1
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: LD_INT 2
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58104: LD_ADDR_VAR 0 18
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 2
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58334: LD_ADDR_VAR 0 19
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 2
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: LD_INT 2
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 2
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: LD_INT 2
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 2
58510: NEG
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58564: LD_ADDR_VAR 0 20
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 2
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: LD_INT 2
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: NEG
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58794: LD_ADDR_VAR 0 21
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: NEG
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 2
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: NEG
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59024: LD_ADDR_VAR 0 22
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 2
59200: NEG
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: NEG
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: LD_INT 2
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59254: LD_ADDR_VAR 0 23
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: LD_INT 2
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 2
59430: NEG
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: NEG
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: LD_INT 2
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: LD_INT 3
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: NEG
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59534: LD_ADDR_VAR 0 24
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 2
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: LD_INT 2
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 2
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 2
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 1
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: NEG
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: LD_INT 2
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 3
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59810: LD_ADDR_VAR 0 25
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 2
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 2
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: LD_INT 2
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 2
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: NEG
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 3
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 3
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: LD_INT 3
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: LD_INT 3
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60084: LD_ADDR_VAR 0 26
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: LD_INT 2
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 2
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 2
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 2
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: LD_INT 2
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: LD_INT 2
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 2
60260: NEG
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 2
60271: NEG
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 2
60283: NEG
60284: PUSH
60285: LD_INT 2
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 2
60295: PUSH
60296: LD_INT 3
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: LD_INT 3
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 2
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 2
60326: NEG
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60360: LD_ADDR_VAR 0 27
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: LD_INT 1
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: LD_INT 1
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: NEG
60430: PUSH
60431: LD_INT 1
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: LD_INT 2
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: LD_INT 2
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 2
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 2
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 2
60536: NEG
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: NEG
60548: PUSH
60549: LD_INT 1
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 2
60559: NEG
60560: PUSH
60561: LD_INT 2
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: LD_INT 2
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 3
60593: NEG
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 3
60605: NEG
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60640: LD_ADDR_VAR 0 28
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: LD_INT 1
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: LD_INT 1
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: PUSH
60723: LD_INT 2
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: LD_INT 2
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 2
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 2
60827: NEG
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 2
60839: NEG
60840: PUSH
60841: LD_INT 2
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: NEG
60852: PUSH
60853: LD_INT 3
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: LD_INT 3
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: NEG
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 3
60887: NEG
60888: PUSH
60889: LD_INT 2
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60922: LD_ADDR_VAR 0 29
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 2
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: LD_INT 2
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 2
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: LD_INT 2
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 2
61112: NEG
61113: PUSH
61114: LD_INT 3
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 2
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 3
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: LD_INT 3
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: LD_INT 2
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 3
61166: NEG
61167: PUSH
61168: LD_INT 2
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61201: LD_ADDR_VAR 0 30
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: LD_INT 2
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: LD_INT 1
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: LD_INT 2
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 3
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 2
61423: PUSH
61424: LD_INT 3
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 2
61433: NEG
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 3
61444: NEG
61445: PUSH
61446: LD_INT 1
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61479: LD_ADDR_VAR 0 31
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: LD_INT 2
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 2
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 2
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: LD_INT 2
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 2
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 2
61644: NEG
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: NEG
61657: PUSH
61658: LD_INT 2
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 2
61668: NEG
61669: PUSH
61670: LD_INT 3
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 3
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: PUSH
61702: LD_INT 3
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 1
61711: NEG
61712: PUSH
61713: LD_INT 2
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 3
61722: NEG
61723: PUSH
61724: LD_INT 2
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61757: LD_ADDR_VAR 0 32
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 0
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: LD_INT 2
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: LD_INT 2
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 2
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 2
61882: PUSH
61883: LD_INT 2
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: LD_INT 2
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: LD_INT 2
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 1
61912: NEG
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: NEG
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: LD_INT 3
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: LD_INT 2
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 3
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 2
61979: PUSH
61980: LD_INT 3
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: NEG
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 3
62000: NEG
62001: PUSH
62002: LD_INT 1
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62035: LD_ADDR_VAR 0 33
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 1
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: LD_INT 2
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 0
62169: PUSH
62170: LD_INT 2
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 2
62190: NEG
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: NEG
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: NEG
62214: PUSH
62215: LD_INT 2
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 2
62225: NEG
62226: PUSH
62227: LD_INT 3
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: LD_INT 1
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 3
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: LD_INT 3
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: LD_INT 2
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 3
62279: NEG
62280: PUSH
62281: LD_INT 2
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62314: LD_ADDR_VAR 0 34
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: LD_INT 1
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: LD_INT 2
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: LD_INT 2
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: LD_INT 1
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: LD_INT 2
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: LD_INT 2
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 2
62470: NEG
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: NEG
62482: PUSH
62483: LD_INT 1
62485: NEG
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 2
62493: NEG
62494: PUSH
62495: LD_INT 2
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: LD_INT 3
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: LD_INT 2
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 3
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 2
62538: PUSH
62539: LD_INT 3
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 2
62548: NEG
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 3
62559: NEG
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62594: LD_ADDR_VAR 0 35
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: LD_INT 0
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 1
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: NEG
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 2
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62706: LD_ADDR_VAR 0 36
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 1
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: PUSH
62745: LD_INT 1
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 1
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: LD_INT 2
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62818: LD_ADDR_VAR 0 37
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: LD_INT 1
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: LD_INT 1
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: NEG
62911: PUSH
62912: LD_INT 1
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62930: LD_ADDR_VAR 0 38
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: LD_INT 1
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 1
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: NEG
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 2
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 2
63021: NEG
63022: PUSH
63023: LD_INT 1
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63042: LD_ADDR_VAR 0 39
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 1
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: LD_INT 2
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 1
63135: PUSH
63136: LD_INT 2
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63154: LD_ADDR_VAR 0 40
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 1
63212: NEG
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: LD_INT 1
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: LD_INT 1
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63266: LD_ADDR_VAR 0 41
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: NEG
63336: PUSH
63337: LD_INT 1
63339: NEG
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: LD_INT 2
63351: NEG
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 1
63359: PUSH
63360: LD_INT 1
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 2
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 2
63380: PUSH
63381: LD_INT 1
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 2
63390: PUSH
63391: LD_INT 2
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: PUSH
63401: LD_INT 2
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 1
63410: NEG
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 2
63421: NEG
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 2
63432: NEG
63433: PUSH
63434: LD_INT 1
63436: NEG
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 2
63444: NEG
63445: PUSH
63446: LD_INT 2
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 2
63456: NEG
63457: PUSH
63458: LD_INT 3
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 3
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 3
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 3
63499: PUSH
63500: LD_INT 2
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 3
63509: PUSH
63510: LD_INT 3
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 2
63519: PUSH
63520: LD_INT 3
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 2
63529: NEG
63530: PUSH
63531: LD_INT 1
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 3
63540: NEG
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 3
63551: NEG
63552: PUSH
63553: LD_INT 1
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 3
63563: NEG
63564: PUSH
63565: LD_INT 2
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 3
63575: NEG
63576: PUSH
63577: LD_INT 3
63579: NEG
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63616: LD_ADDR_VAR 0 42
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 1
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 1
63685: NEG
63686: PUSH
63687: LD_INT 1
63689: NEG
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 1
63697: NEG
63698: PUSH
63699: LD_INT 2
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: LD_INT 2
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 2
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 2
63741: PUSH
63742: LD_INT 2
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 1
63751: PUSH
63752: LD_INT 2
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 2
63782: NEG
63783: PUSH
63784: LD_INT 1
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 2
63794: NEG
63795: PUSH
63796: LD_INT 2
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 2
63806: NEG
63807: PUSH
63808: LD_INT 3
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: LD_INT 3
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: LD_INT 3
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 1
63841: PUSH
63842: LD_INT 2
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 3
63852: PUSH
63853: LD_INT 2
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 3
63862: PUSH
63863: LD_INT 3
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: LD_INT 3
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 1
63882: PUSH
63883: LD_INT 3
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 3
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 1
63902: NEG
63903: PUSH
63904: LD_INT 2
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 3
63913: NEG
63914: PUSH
63915: LD_INT 2
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 3
63925: NEG
63926: PUSH
63927: LD_INT 3
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63966: LD_ADDR_VAR 0 43
63970: PUSH
63971: LD_INT 0
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 1
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 1
64004: PUSH
64005: LD_INT 1
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: NEG
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: PUSH
64049: LD_INT 2
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: LD_INT 2
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: LD_INT 1
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 2
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: LD_INT 2
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: LD_INT 2
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 1
64121: NEG
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: NEG
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: LD_INT 1
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: NEG
64156: PUSH
64157: LD_INT 3
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: LD_INT 3
64170: NEG
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 1
64178: PUSH
64179: LD_INT 2
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 2
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 3
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 3
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: LD_INT 3
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: LD_INT 3
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: LD_INT 2
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 2
64251: NEG
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 3
64262: NEG
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 3
64273: NEG
64274: PUSH
64275: LD_INT 1
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64314: LD_ADDR_VAR 0 44
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: LD_INT 0
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: PUSH
64353: LD_INT 1
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: NEG
64396: PUSH
64397: LD_INT 2
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: LD_INT 1
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 2
64418: PUSH
64419: LD_INT 0
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 2
64428: PUSH
64429: LD_INT 1
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 2
64438: PUSH
64439: LD_INT 2
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: LD_INT 2
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: LD_INT 1
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 2
64469: NEG
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 2
64480: NEG
64481: PUSH
64482: LD_INT 1
64484: NEG
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 2
64492: NEG
64493: PUSH
64494: LD_INT 2
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 2
64504: NEG
64505: PUSH
64506: LD_INT 3
64508: NEG
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 2
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 3
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 3
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: LD_INT 2
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 3
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: LD_INT 3
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 2
64577: NEG
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 3
64588: NEG
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 3
64599: NEG
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 3
64611: NEG
64612: PUSH
64613: LD_INT 2
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 3
64623: NEG
64624: PUSH
64625: LD_INT 3
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64664: LD_ADDR_VAR 0 45
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: LD_INT 1
64684: NEG
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: LD_INT 0
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 1
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 1
64722: NEG
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 1
64733: NEG
64734: PUSH
64735: LD_INT 1
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: LD_INT 2
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: LD_INT 2
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 1
64768: PUSH
64769: LD_INT 1
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 2
64779: PUSH
64780: LD_INT 1
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 2
64789: PUSH
64790: LD_INT 2
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 1
64799: PUSH
64800: LD_INT 2
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 0
64809: PUSH
64810: LD_INT 2
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 2
64830: NEG
64831: PUSH
64832: LD_INT 1
64834: NEG
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 2
64842: NEG
64843: PUSH
64844: LD_INT 2
64846: NEG
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 2
64854: NEG
64855: PUSH
64856: LD_INT 3
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 1
64866: NEG
64867: PUSH
64868: LD_INT 3
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 3
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: LD_INT 2
64892: NEG
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 3
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 3
64910: PUSH
64911: LD_INT 3
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 2
64920: PUSH
64921: LD_INT 3
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 1
64930: PUSH
64931: LD_INT 3
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: LD_INT 3
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 1
64950: NEG
64951: PUSH
64952: LD_INT 2
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 3
64961: NEG
64962: PUSH
64963: LD_INT 2
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 3
64973: NEG
64974: PUSH
64975: LD_INT 3
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65014: LD_ADDR_VAR 0 46
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 1
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 1
65095: NEG
65096: PUSH
65097: LD_INT 2
65099: NEG
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 0
65107: PUSH
65108: LD_INT 2
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 2
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 2
65139: PUSH
65140: LD_INT 1
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: LD_INT 2
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: LD_INT 2
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 2
65180: NEG
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 2
65191: NEG
65192: PUSH
65193: LD_INT 1
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: NEG
65204: PUSH
65205: LD_INT 3
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: LD_INT 3
65218: NEG
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 1
65226: PUSH
65227: LD_INT 2
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 2
65237: PUSH
65238: LD_INT 1
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 3
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 3
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: LD_INT 3
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: LD_INT 3
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: LD_INT 2
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 2
65299: NEG
65300: PUSH
65301: LD_INT 1
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 3
65310: NEG
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 3
65321: NEG
65322: PUSH
65323: LD_INT 1
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65362: LD_ADDR_VAR 0 47
65366: PUSH
65367: LD_INT 0
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: PUSH
65401: LD_INT 1
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 1
65431: NEG
65432: PUSH
65433: LD_INT 1
65435: NEG
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 1
65443: NEG
65444: PUSH
65445: LD_INT 2
65447: NEG
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: LD_INT 2
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 1
65466: PUSH
65467: LD_INT 1
65469: NEG
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 2
65477: NEG
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 2
65489: NEG
65490: PUSH
65491: LD_INT 2
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65513: LD_ADDR_VAR 0 48
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: LD_INT 0
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 0
65530: PUSH
65531: LD_INT 1
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 1
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: LD_INT 1
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: LD_INT 1
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 1
65571: NEG
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: LD_INT 1
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: LD_INT 2
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: LD_INT 2
65609: NEG
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: LD_INT 1
65620: NEG
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 2
65628: PUSH
65629: LD_INT 0
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 2
65638: PUSH
65639: LD_INT 1
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65660: LD_ADDR_VAR 0 49
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: LD_INT 1
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: LD_INT 1
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 1
65729: NEG
65730: PUSH
65731: LD_INT 1
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 1
65741: PUSH
65742: LD_INT 1
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 2
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 2
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 2
65772: PUSH
65773: LD_INT 2
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 1
65782: PUSH
65783: LD_INT 2
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65804: LD_ADDR_VAR 0 50
65808: PUSH
65809: LD_INT 0
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 0
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 1
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: LD_INT 1
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: LD_INT 1
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: LD_INT 0
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 1
65873: NEG
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 2
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 2
65895: PUSH
65896: LD_INT 2
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 1
65905: PUSH
65906: LD_INT 2
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 0
65915: PUSH
65916: LD_INT 2
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 1
65925: NEG
65926: PUSH
65927: LD_INT 1
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65948: LD_ADDR_VAR 0 51
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 0
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: LD_INT 1
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 1
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: LD_INT 1
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 0
65996: PUSH
65997: LD_INT 1
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 1
66006: NEG
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 1
66017: NEG
66018: PUSH
66019: LD_INT 1
66021: NEG
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 1
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 0
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 1
66049: NEG
66050: PUSH
66051: LD_INT 1
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 2
66060: NEG
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 2
66071: NEG
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66095: LD_ADDR_VAR 0 52
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: LD_INT 0
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 0
66112: PUSH
66113: LD_INT 1
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 1
66123: PUSH
66124: LD_INT 0
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: LD_INT 1
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: LD_INT 1
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: NEG
66177: PUSH
66178: LD_INT 2
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 1
66188: NEG
66189: PUSH
66190: LD_INT 1
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 2
66199: NEG
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 2
66210: NEG
66211: PUSH
66212: LD_INT 1
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 2
66222: NEG
66223: PUSH
66224: LD_INT 2
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66246: LD_ADDR_VAR 0 53
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: LD_INT 0
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: LD_INT 1
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 1
66284: PUSH
66285: LD_INT 1
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: LD_INT 1
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 1
66304: NEG
66305: PUSH
66306: LD_INT 0
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: NEG
66316: PUSH
66317: LD_INT 1
66319: NEG
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 1
66327: NEG
66328: PUSH
66329: LD_INT 2
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 0
66339: PUSH
66340: LD_INT 2
66342: NEG
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 1
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 2
66361: PUSH
66362: LD_INT 0
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 2
66371: PUSH
66372: LD_INT 1
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 2
66381: PUSH
66382: LD_INT 2
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 1
66391: PUSH
66392: LD_INT 2
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 0
66401: PUSH
66402: LD_INT 2
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 1
66411: NEG
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 2
66422: NEG
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 2
66433: NEG
66434: PUSH
66435: LD_INT 1
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 2
66445: NEG
66446: PUSH
66447: LD_INT 2
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66476: LD_ADDR_VAR 0 54
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: LD_INT 0
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: LD_INT 1
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 1
66504: PUSH
66505: LD_INT 0
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 1
66514: PUSH
66515: LD_INT 1
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 0
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: LD_INT 0
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: LD_INT 1
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 1
66557: NEG
66558: PUSH
66559: LD_INT 2
66561: NEG
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: LD_INT 2
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 1
66580: PUSH
66581: LD_INT 1
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 2
66591: PUSH
66592: LD_INT 0
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 2
66601: PUSH
66602: LD_INT 1
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 2
66611: PUSH
66612: LD_INT 2
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 1
66621: PUSH
66622: LD_INT 2
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 0
66631: PUSH
66632: LD_INT 2
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 1
66641: NEG
66642: PUSH
66643: LD_INT 1
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 2
66652: NEG
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 2
66663: NEG
66664: PUSH
66665: LD_INT 1
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 2
66675: NEG
66676: PUSH
66677: LD_INT 2
66679: NEG
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66706: LD_ADDR_VAR 0 55
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 0
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 1
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 1
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 0
66754: PUSH
66755: LD_INT 1
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 1
66764: NEG
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 1
66775: NEG
66776: PUSH
66777: LD_INT 1
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 1
66787: NEG
66788: PUSH
66789: LD_INT 2
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 0
66799: PUSH
66800: LD_INT 2
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 1
66810: PUSH
66811: LD_INT 1
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 2
66821: PUSH
66822: LD_INT 0
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 2
66831: PUSH
66832: LD_INT 1
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 2
66841: PUSH
66842: LD_INT 2
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 1
66851: PUSH
66852: LD_INT 2
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 0
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 1
66871: NEG
66872: PUSH
66873: LD_INT 1
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 2
66882: NEG
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 2
66893: NEG
66894: PUSH
66895: LD_INT 1
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 2
66905: NEG
66906: PUSH
66907: LD_INT 2
66909: NEG
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66936: LD_ADDR_VAR 0 56
66940: PUSH
66941: LD_INT 0
66943: PUSH
66944: LD_INT 0
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 0
66953: PUSH
66954: LD_INT 1
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 1
66974: PUSH
66975: LD_INT 1
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: LD_INT 1
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 1
66994: NEG
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 1
67005: NEG
67006: PUSH
67007: LD_INT 1
67009: NEG
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: LD_INT 2
67021: NEG
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: LD_INT 2
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: PUSH
67041: LD_INT 1
67043: NEG
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 2
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 2
67061: PUSH
67062: LD_INT 1
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 2
67071: PUSH
67072: LD_INT 2
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 1
67081: PUSH
67082: LD_INT 2
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 0
67091: PUSH
67092: LD_INT 2
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 1
67101: NEG
67102: PUSH
67103: LD_INT 1
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 2
67112: NEG
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 2
67123: NEG
67124: PUSH
67125: LD_INT 1
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 2
67135: NEG
67136: PUSH
67137: LD_INT 2
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67166: LD_ADDR_VAR 0 57
67170: PUSH
67171: LD_INT 0
67173: PUSH
67174: LD_INT 0
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: LD_INT 1
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 1
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 1
67204: PUSH
67205: LD_INT 1
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 0
67214: PUSH
67215: LD_INT 1
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 1
67224: NEG
67225: PUSH
67226: LD_INT 0
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 1
67235: NEG
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 1
67247: NEG
67248: PUSH
67249: LD_INT 2
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: LD_INT 2
67262: NEG
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 1
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 2
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 2
67291: PUSH
67292: LD_INT 1
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 2
67301: PUSH
67302: LD_INT 2
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 1
67311: PUSH
67312: LD_INT 2
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 0
67321: PUSH
67322: LD_INT 2
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 1
67331: NEG
67332: PUSH
67333: LD_INT 1
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 2
67342: NEG
67343: PUSH
67344: LD_INT 0
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 2
67353: NEG
67354: PUSH
67355: LD_INT 1
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 2
67365: NEG
67366: PUSH
67367: LD_INT 2
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67396: LD_ADDR_VAR 0 58
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: LD_INT 0
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 0
67413: PUSH
67414: LD_INT 1
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 1
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: LD_INT 1
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 1
67454: NEG
67455: PUSH
67456: LD_INT 0
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 1
67465: NEG
67466: PUSH
67467: LD_INT 1
67469: NEG
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 1
67477: NEG
67478: PUSH
67479: LD_INT 2
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: LD_INT 2
67492: NEG
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 2
67511: PUSH
67512: LD_INT 0
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 2
67521: PUSH
67522: LD_INT 1
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 2
67531: PUSH
67532: LD_INT 2
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 1
67541: PUSH
67542: LD_INT 2
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 0
67551: PUSH
67552: LD_INT 2
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 1
67561: NEG
67562: PUSH
67563: LD_INT 1
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 2
67572: NEG
67573: PUSH
67574: LD_INT 0
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 2
67583: NEG
67584: PUSH
67585: LD_INT 1
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 2
67595: NEG
67596: PUSH
67597: LD_INT 2
67599: NEG
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67626: LD_ADDR_VAR 0 59
67630: PUSH
67631: LD_INT 0
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 0
67643: PUSH
67644: LD_INT 1
67646: NEG
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 1
67654: PUSH
67655: LD_INT 0
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 1
67664: PUSH
67665: LD_INT 1
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 0
67674: PUSH
67675: LD_INT 1
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 1
67684: NEG
67685: PUSH
67686: LD_INT 0
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 1
67695: NEG
67696: PUSH
67697: LD_INT 1
67699: NEG
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67714: LD_ADDR_VAR 0 60
67718: PUSH
67719: LD_INT 0
67721: PUSH
67722: LD_INT 0
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 0
67731: PUSH
67732: LD_INT 1
67734: NEG
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 1
67742: PUSH
67743: LD_INT 0
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 1
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 0
67762: PUSH
67763: LD_INT 1
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 1
67772: NEG
67773: PUSH
67774: LD_INT 0
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 1
67783: NEG
67784: PUSH
67785: LD_INT 1
67787: NEG
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67802: LD_ADDR_VAR 0 61
67806: PUSH
67807: LD_INT 0
67809: PUSH
67810: LD_INT 0
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: LD_INT 1
67822: NEG
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 1
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 1
67840: PUSH
67841: LD_INT 1
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 0
67850: PUSH
67851: LD_INT 1
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: PUSH
67862: LD_INT 0
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 1
67871: NEG
67872: PUSH
67873: LD_INT 1
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67890: LD_ADDR_VAR 0 62
67894: PUSH
67895: LD_INT 0
67897: PUSH
67898: LD_INT 0
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 0
67907: PUSH
67908: LD_INT 1
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 1
67918: PUSH
67919: LD_INT 0
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 1
67928: PUSH
67929: LD_INT 1
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 1
67948: NEG
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 1
67959: NEG
67960: PUSH
67961: LD_INT 1
67963: NEG
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67978: LD_ADDR_VAR 0 63
67982: PUSH
67983: LD_INT 0
67985: PUSH
67986: LD_INT 0
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 0
67995: PUSH
67996: LD_INT 1
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 1
68006: PUSH
68007: LD_INT 0
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 1
68016: PUSH
68017: LD_INT 1
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: LD_INT 1
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 1
68036: NEG
68037: PUSH
68038: LD_INT 0
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 1
68047: NEG
68048: PUSH
68049: LD_INT 1
68051: NEG
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68066: LD_ADDR_VAR 0 64
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: LD_INT 0
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 0
68083: PUSH
68084: LD_INT 1
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 1
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 1
68104: PUSH
68105: LD_INT 1
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 0
68114: PUSH
68115: LD_INT 1
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 1
68124: NEG
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 1
68135: NEG
68136: PUSH
68137: LD_INT 1
68139: NEG
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: ST_TO_ADDR
// end ; 1 :
68154: GO 74051
68156: LD_INT 1
68158: DOUBLE
68159: EQUAL
68160: IFTRUE 68164
68162: GO 70787
68164: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68165: LD_ADDR_VAR 0 11
68169: PUSH
68170: LD_INT 1
68172: NEG
68173: PUSH
68174: LD_INT 3
68176: NEG
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: LD_INT 3
68187: NEG
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 1
68195: PUSH
68196: LD_INT 2
68198: NEG
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: LIST
68208: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68209: LD_ADDR_VAR 0 12
68213: PUSH
68214: LD_INT 2
68216: PUSH
68217: LD_INT 1
68219: NEG
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 3
68227: PUSH
68228: LD_INT 0
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 3
68237: PUSH
68238: LD_INT 1
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: LIST
68249: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68250: LD_ADDR_VAR 0 13
68254: PUSH
68255: LD_INT 3
68257: PUSH
68258: LD_INT 2
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 3
68267: PUSH
68268: LD_INT 3
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 2
68277: PUSH
68278: LD_INT 3
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: LIST
68289: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68290: LD_ADDR_VAR 0 14
68294: PUSH
68295: LD_INT 1
68297: PUSH
68298: LD_INT 3
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 0
68307: PUSH
68308: LD_INT 3
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 1
68317: NEG
68318: PUSH
68319: LD_INT 2
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: LIST
68330: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68331: LD_ADDR_VAR 0 15
68335: PUSH
68336: LD_INT 2
68338: NEG
68339: PUSH
68340: LD_INT 1
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 3
68349: NEG
68350: PUSH
68351: LD_INT 0
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 3
68360: NEG
68361: PUSH
68362: LD_INT 1
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: LIST
68374: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68375: LD_ADDR_VAR 0 16
68379: PUSH
68380: LD_INT 2
68382: NEG
68383: PUSH
68384: LD_INT 3
68386: NEG
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 3
68394: NEG
68395: PUSH
68396: LD_INT 2
68398: NEG
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 3
68406: NEG
68407: PUSH
68408: LD_INT 3
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: LIST
68420: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68421: LD_ADDR_VAR 0 17
68425: PUSH
68426: LD_INT 1
68428: NEG
68429: PUSH
68430: LD_INT 3
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 0
68440: PUSH
68441: LD_INT 3
68443: NEG
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 1
68451: PUSH
68452: LD_INT 2
68454: NEG
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: LIST
68464: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68465: LD_ADDR_VAR 0 18
68469: PUSH
68470: LD_INT 2
68472: PUSH
68473: LD_INT 1
68475: NEG
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 3
68483: PUSH
68484: LD_INT 0
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 3
68493: PUSH
68494: LD_INT 1
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: LIST
68505: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68506: LD_ADDR_VAR 0 19
68510: PUSH
68511: LD_INT 3
68513: PUSH
68514: LD_INT 2
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 3
68523: PUSH
68524: LD_INT 3
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 2
68533: PUSH
68534: LD_INT 3
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: LIST
68545: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68546: LD_ADDR_VAR 0 20
68550: PUSH
68551: LD_INT 1
68553: PUSH
68554: LD_INT 3
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: LD_INT 3
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: LD_INT 2
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: LIST
68586: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68587: LD_ADDR_VAR 0 21
68591: PUSH
68592: LD_INT 2
68594: NEG
68595: PUSH
68596: LD_INT 1
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 3
68605: NEG
68606: PUSH
68607: LD_INT 0
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 3
68616: NEG
68617: PUSH
68618: LD_INT 1
68620: NEG
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: LIST
68630: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68631: LD_ADDR_VAR 0 22
68635: PUSH
68636: LD_INT 2
68638: NEG
68639: PUSH
68640: LD_INT 3
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 3
68650: NEG
68651: PUSH
68652: LD_INT 2
68654: NEG
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 3
68662: NEG
68663: PUSH
68664: LD_INT 3
68666: NEG
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: LIST
68676: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68677: LD_ADDR_VAR 0 23
68681: PUSH
68682: LD_INT 0
68684: PUSH
68685: LD_INT 3
68687: NEG
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 1
68695: NEG
68696: PUSH
68697: LD_INT 4
68699: NEG
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 1
68707: PUSH
68708: LD_INT 3
68710: NEG
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: LIST
68720: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68721: LD_ADDR_VAR 0 24
68725: PUSH
68726: LD_INT 3
68728: PUSH
68729: LD_INT 0
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 3
68738: PUSH
68739: LD_INT 1
68741: NEG
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 4
68749: PUSH
68750: LD_INT 1
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: LIST
68761: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68762: LD_ADDR_VAR 0 25
68766: PUSH
68767: LD_INT 3
68769: PUSH
68770: LD_INT 3
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 4
68779: PUSH
68780: LD_INT 3
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 3
68789: PUSH
68790: LD_INT 4
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: LIST
68801: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68802: LD_ADDR_VAR 0 26
68806: PUSH
68807: LD_INT 0
68809: PUSH
68810: LD_INT 3
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 1
68819: PUSH
68820: LD_INT 4
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 1
68829: NEG
68830: PUSH
68831: LD_INT 3
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: LIST
68842: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68843: LD_ADDR_VAR 0 27
68847: PUSH
68848: LD_INT 3
68850: NEG
68851: PUSH
68852: LD_INT 0
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 3
68861: NEG
68862: PUSH
68863: LD_INT 1
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 4
68872: NEG
68873: PUSH
68874: LD_INT 1
68876: NEG
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: LIST
68886: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68887: LD_ADDR_VAR 0 28
68891: PUSH
68892: LD_INT 3
68894: NEG
68895: PUSH
68896: LD_INT 3
68898: NEG
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 3
68906: NEG
68907: PUSH
68908: LD_INT 4
68910: NEG
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 4
68918: NEG
68919: PUSH
68920: LD_INT 3
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: LIST
68932: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68933: LD_ADDR_VAR 0 29
68937: PUSH
68938: LD_INT 1
68940: NEG
68941: PUSH
68942: LD_INT 3
68944: NEG
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 0
68952: PUSH
68953: LD_INT 3
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 1
68963: PUSH
68964: LD_INT 2
68966: NEG
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 1
68974: NEG
68975: PUSH
68976: LD_INT 4
68978: NEG
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: LD_INT 4
68989: NEG
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 1
68997: PUSH
68998: LD_INT 3
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 1
69008: NEG
69009: PUSH
69010: LD_INT 5
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 0
69020: PUSH
69021: LD_INT 5
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 1
69031: PUSH
69032: LD_INT 4
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: LD_INT 6
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: LD_INT 6
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 1
69065: PUSH
69066: LD_INT 5
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69088: LD_ADDR_VAR 0 30
69092: PUSH
69093: LD_INT 2
69095: PUSH
69096: LD_INT 1
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 3
69106: PUSH
69107: LD_INT 0
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 3
69116: PUSH
69117: LD_INT 1
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 3
69126: PUSH
69127: LD_INT 1
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 4
69137: PUSH
69138: LD_INT 0
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 4
69147: PUSH
69148: LD_INT 1
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 4
69157: PUSH
69158: LD_INT 1
69160: NEG
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 5
69168: PUSH
69169: LD_INT 0
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 5
69178: PUSH
69179: LD_INT 1
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 5
69188: PUSH
69189: LD_INT 1
69191: NEG
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 6
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 6
69209: PUSH
69210: LD_INT 1
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69231: LD_ADDR_VAR 0 31
69235: PUSH
69236: LD_INT 3
69238: PUSH
69239: LD_INT 2
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 3
69248: PUSH
69249: LD_INT 3
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 2
69258: PUSH
69259: LD_INT 3
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 4
69268: PUSH
69269: LD_INT 3
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 4
69278: PUSH
69279: LD_INT 4
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 3
69288: PUSH
69289: LD_INT 4
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 5
69298: PUSH
69299: LD_INT 4
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 5
69308: PUSH
69309: LD_INT 5
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 4
69318: PUSH
69319: LD_INT 5
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 6
69328: PUSH
69329: LD_INT 5
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 6
69338: PUSH
69339: LD_INT 6
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 5
69348: PUSH
69349: LD_INT 6
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69370: LD_ADDR_VAR 0 32
69374: PUSH
69375: LD_INT 1
69377: PUSH
69378: LD_INT 3
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 0
69387: PUSH
69388: LD_INT 3
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 1
69397: NEG
69398: PUSH
69399: LD_INT 2
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 1
69408: PUSH
69409: LD_INT 4
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 0
69418: PUSH
69419: LD_INT 4
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 1
69428: NEG
69429: PUSH
69430: LD_INT 3
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 1
69439: PUSH
69440: LD_INT 5
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 0
69449: PUSH
69450: LD_INT 5
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 1
69459: NEG
69460: PUSH
69461: LD_INT 4
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 1
69470: PUSH
69471: LD_INT 6
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 0
69480: PUSH
69481: LD_INT 6
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: LD_INT 5
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69513: LD_ADDR_VAR 0 33
69517: PUSH
69518: LD_INT 2
69520: NEG
69521: PUSH
69522: LD_INT 1
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 3
69531: NEG
69532: PUSH
69533: LD_INT 0
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 3
69542: NEG
69543: PUSH
69544: LD_INT 1
69546: NEG
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: LD_INT 3
69554: NEG
69555: PUSH
69556: LD_INT 1
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 4
69565: NEG
69566: PUSH
69567: LD_INT 0
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 4
69576: NEG
69577: PUSH
69578: LD_INT 1
69580: NEG
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 4
69588: NEG
69589: PUSH
69590: LD_INT 1
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 5
69599: NEG
69600: PUSH
69601: LD_INT 0
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 5
69610: NEG
69611: PUSH
69612: LD_INT 1
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 5
69622: NEG
69623: PUSH
69624: LD_INT 1
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 6
69633: NEG
69634: PUSH
69635: LD_INT 0
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 6
69644: NEG
69645: PUSH
69646: LD_INT 1
69648: NEG
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69668: LD_ADDR_VAR 0 34
69672: PUSH
69673: LD_INT 2
69675: NEG
69676: PUSH
69677: LD_INT 3
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 3
69687: NEG
69688: PUSH
69689: LD_INT 2
69691: NEG
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 3
69699: NEG
69700: PUSH
69701: LD_INT 3
69703: NEG
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 3
69711: NEG
69712: PUSH
69713: LD_INT 4
69715: NEG
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 4
69723: NEG
69724: PUSH
69725: LD_INT 3
69727: NEG
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 4
69735: NEG
69736: PUSH
69737: LD_INT 4
69739: NEG
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 4
69747: NEG
69748: PUSH
69749: LD_INT 5
69751: NEG
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 5
69759: NEG
69760: PUSH
69761: LD_INT 4
69763: NEG
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 5
69771: NEG
69772: PUSH
69773: LD_INT 5
69775: NEG
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 5
69783: NEG
69784: PUSH
69785: LD_INT 6
69787: NEG
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 6
69795: NEG
69796: PUSH
69797: LD_INT 5
69799: NEG
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 6
69807: NEG
69808: PUSH
69809: LD_INT 6
69811: NEG
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69831: LD_ADDR_VAR 0 41
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: LD_INT 2
69841: NEG
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 1
69849: NEG
69850: PUSH
69851: LD_INT 3
69853: NEG
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 1
69861: PUSH
69862: LD_INT 2
69864: NEG
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: LIST
69874: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69875: LD_ADDR_VAR 0 42
69879: PUSH
69880: LD_INT 2
69882: PUSH
69883: LD_INT 0
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 2
69892: PUSH
69893: LD_INT 1
69895: NEG
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 3
69903: PUSH
69904: LD_INT 1
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: LIST
69915: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69916: LD_ADDR_VAR 0 43
69920: PUSH
69921: LD_INT 2
69923: PUSH
69924: LD_INT 2
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 3
69933: PUSH
69934: LD_INT 2
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 2
69943: PUSH
69944: LD_INT 3
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: LIST
69955: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69956: LD_ADDR_VAR 0 44
69960: PUSH
69961: LD_INT 0
69963: PUSH
69964: LD_INT 2
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 1
69973: PUSH
69974: LD_INT 3
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 1
69983: NEG
69984: PUSH
69985: LD_INT 2
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: LIST
69996: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69997: LD_ADDR_VAR 0 45
70001: PUSH
70002: LD_INT 2
70004: NEG
70005: PUSH
70006: LD_INT 0
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 2
70015: NEG
70016: PUSH
70017: LD_INT 1
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 3
70026: NEG
70027: PUSH
70028: LD_INT 1
70030: NEG
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: LIST
70040: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70041: LD_ADDR_VAR 0 46
70045: PUSH
70046: LD_INT 2
70048: NEG
70049: PUSH
70050: LD_INT 2
70052: NEG
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 2
70060: NEG
70061: PUSH
70062: LD_INT 3
70064: NEG
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 3
70072: NEG
70073: PUSH
70074: LD_INT 2
70076: NEG
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: LIST
70086: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70087: LD_ADDR_VAR 0 47
70091: PUSH
70092: LD_INT 2
70094: NEG
70095: PUSH
70096: LD_INT 3
70098: NEG
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 1
70106: NEG
70107: PUSH
70108: LD_INT 3
70110: NEG
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70120: LD_ADDR_VAR 0 48
70124: PUSH
70125: LD_INT 1
70127: PUSH
70128: LD_INT 2
70130: NEG
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 2
70138: PUSH
70139: LD_INT 1
70141: NEG
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70151: LD_ADDR_VAR 0 49
70155: PUSH
70156: LD_INT 3
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 3
70168: PUSH
70169: LD_INT 2
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70180: LD_ADDR_VAR 0 50
70184: PUSH
70185: LD_INT 2
70187: PUSH
70188: LD_INT 3
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 1
70197: PUSH
70198: LD_INT 3
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70209: LD_ADDR_VAR 0 51
70213: PUSH
70214: LD_INT 1
70216: NEG
70217: PUSH
70218: LD_INT 2
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 2
70227: NEG
70228: PUSH
70229: LD_INT 1
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70240: LD_ADDR_VAR 0 52
70244: PUSH
70245: LD_INT 3
70247: NEG
70248: PUSH
70249: LD_INT 1
70251: NEG
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 3
70259: NEG
70260: PUSH
70261: LD_INT 2
70263: NEG
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70273: LD_ADDR_VAR 0 53
70277: PUSH
70278: LD_INT 1
70280: NEG
70281: PUSH
70282: LD_INT 3
70284: NEG
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 0
70292: PUSH
70293: LD_INT 3
70295: NEG
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 1
70303: PUSH
70304: LD_INT 2
70306: NEG
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: LIST
70316: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70317: LD_ADDR_VAR 0 54
70321: PUSH
70322: LD_INT 2
70324: PUSH
70325: LD_INT 1
70327: NEG
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 3
70335: PUSH
70336: LD_INT 0
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 3
70345: PUSH
70346: LD_INT 1
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: LIST
70357: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70358: LD_ADDR_VAR 0 55
70362: PUSH
70363: LD_INT 3
70365: PUSH
70366: LD_INT 2
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 3
70375: PUSH
70376: LD_INT 3
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 2
70385: PUSH
70386: LD_INT 3
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: LIST
70397: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70398: LD_ADDR_VAR 0 56
70402: PUSH
70403: LD_INT 1
70405: PUSH
70406: LD_INT 3
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 0
70415: PUSH
70416: LD_INT 3
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 1
70425: NEG
70426: PUSH
70427: LD_INT 2
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: LIST
70438: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70439: LD_ADDR_VAR 0 57
70443: PUSH
70444: LD_INT 2
70446: NEG
70447: PUSH
70448: LD_INT 1
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 3
70457: NEG
70458: PUSH
70459: LD_INT 0
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 3
70468: NEG
70469: PUSH
70470: LD_INT 1
70472: NEG
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: LIST
70482: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70483: LD_ADDR_VAR 0 58
70487: PUSH
70488: LD_INT 2
70490: NEG
70491: PUSH
70492: LD_INT 3
70494: NEG
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 3
70502: NEG
70503: PUSH
70504: LD_INT 2
70506: NEG
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 3
70514: NEG
70515: PUSH
70516: LD_INT 3
70518: NEG
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: LIST
70528: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70529: LD_ADDR_VAR 0 59
70533: PUSH
70534: LD_INT 1
70536: NEG
70537: PUSH
70538: LD_INT 2
70540: NEG
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: LD_INT 2
70551: NEG
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 1
70559: PUSH
70560: LD_INT 1
70562: NEG
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: LIST
70572: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70573: LD_ADDR_VAR 0 60
70577: PUSH
70578: LD_INT 1
70580: PUSH
70581: LD_INT 1
70583: NEG
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 2
70591: PUSH
70592: LD_INT 0
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 2
70601: PUSH
70602: LD_INT 1
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: LIST
70613: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70614: LD_ADDR_VAR 0 61
70618: PUSH
70619: LD_INT 2
70621: PUSH
70622: LD_INT 1
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: LD_INT 2
70631: PUSH
70632: LD_INT 2
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 1
70641: PUSH
70642: LD_INT 2
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: LIST
70653: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70654: LD_ADDR_VAR 0 62
70658: PUSH
70659: LD_INT 1
70661: PUSH
70662: LD_INT 2
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 0
70671: PUSH
70672: LD_INT 2
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 1
70681: NEG
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: LIST
70694: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70695: LD_ADDR_VAR 0 63
70699: PUSH
70700: LD_INT 1
70702: NEG
70703: PUSH
70704: LD_INT 1
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 2
70713: NEG
70714: PUSH
70715: LD_INT 0
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 2
70724: NEG
70725: PUSH
70726: LD_INT 1
70728: NEG
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: LIST
70738: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70739: LD_ADDR_VAR 0 64
70743: PUSH
70744: LD_INT 1
70746: NEG
70747: PUSH
70748: LD_INT 2
70750: NEG
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 2
70758: NEG
70759: PUSH
70760: LD_INT 1
70762: NEG
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 2
70770: NEG
70771: PUSH
70772: LD_INT 2
70774: NEG
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: LIST
70784: ST_TO_ADDR
// end ; 2 :
70785: GO 74051
70787: LD_INT 2
70789: DOUBLE
70790: EQUAL
70791: IFTRUE 70795
70793: GO 74050
70795: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70796: LD_ADDR_VAR 0 29
70800: PUSH
70801: LD_INT 4
70803: PUSH
70804: LD_INT 0
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 4
70813: PUSH
70814: LD_INT 1
70816: NEG
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 5
70824: PUSH
70825: LD_INT 0
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 5
70834: PUSH
70835: LD_INT 1
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 4
70844: PUSH
70845: LD_INT 1
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 3
70854: PUSH
70855: LD_INT 0
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 3
70864: PUSH
70865: LD_INT 1
70867: NEG
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 3
70875: PUSH
70876: LD_INT 2
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 5
70886: PUSH
70887: LD_INT 2
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 3
70896: PUSH
70897: LD_INT 3
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 3
70906: PUSH
70907: LD_INT 2
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PUSH
70914: LD_INT 4
70916: PUSH
70917: LD_INT 3
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: LD_INT 4
70926: PUSH
70927: LD_INT 4
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 3
70936: PUSH
70937: LD_INT 4
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 2
70946: PUSH
70947: LD_INT 3
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 2
70956: PUSH
70957: LD_INT 2
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 4
70966: PUSH
70967: LD_INT 2
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 2
70976: PUSH
70977: LD_INT 4
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 0
70986: PUSH
70987: LD_INT 4
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 0
70996: PUSH
70997: LD_INT 3
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 1
71006: PUSH
71007: LD_INT 4
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 1
71016: PUSH
71017: LD_INT 5
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 0
71026: PUSH
71027: LD_INT 5
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 1
71036: NEG
71037: PUSH
71038: LD_INT 4
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 1
71047: NEG
71048: PUSH
71049: LD_INT 3
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 2
71058: PUSH
71059: LD_INT 5
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 2
71068: NEG
71069: PUSH
71070: LD_INT 3
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 3
71079: NEG
71080: PUSH
71081: LD_INT 0
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 3
71090: NEG
71091: PUSH
71092: LD_INT 1
71094: NEG
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 2
71102: NEG
71103: PUSH
71104: LD_INT 0
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 2
71113: NEG
71114: PUSH
71115: LD_INT 1
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 3
71124: NEG
71125: PUSH
71126: LD_INT 1
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 4
71135: NEG
71136: PUSH
71137: LD_INT 0
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 4
71146: NEG
71147: PUSH
71148: LD_INT 1
71150: NEG
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 4
71158: NEG
71159: PUSH
71160: LD_INT 2
71162: NEG
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: LD_INT 2
71170: NEG
71171: PUSH
71172: LD_INT 2
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PUSH
71179: LD_INT 4
71181: NEG
71182: PUSH
71183: LD_INT 4
71185: NEG
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 4
71193: NEG
71194: PUSH
71195: LD_INT 5
71197: NEG
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: LD_INT 3
71205: NEG
71206: PUSH
71207: LD_INT 4
71209: NEG
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 3
71217: NEG
71218: PUSH
71219: LD_INT 3
71221: NEG
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 4
71229: NEG
71230: PUSH
71231: LD_INT 3
71233: NEG
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 5
71241: NEG
71242: PUSH
71243: LD_INT 4
71245: NEG
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 5
71253: NEG
71254: PUSH
71255: LD_INT 5
71257: NEG
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 3
71265: NEG
71266: PUSH
71267: LD_INT 5
71269: NEG
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 5
71277: NEG
71278: PUSH
71279: LD_INT 3
71281: NEG
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71334: LD_ADDR_VAR 0 30
71338: PUSH
71339: LD_INT 4
71341: PUSH
71342: LD_INT 4
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 4
71351: PUSH
71352: LD_INT 3
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 5
71361: PUSH
71362: LD_INT 4
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 5
71371: PUSH
71372: LD_INT 5
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 4
71381: PUSH
71382: LD_INT 5
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 3
71391: PUSH
71392: LD_INT 4
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 3
71401: PUSH
71402: LD_INT 3
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 5
71411: PUSH
71412: LD_INT 3
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 3
71421: PUSH
71422: LD_INT 5
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 0
71431: PUSH
71432: LD_INT 3
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 0
71441: PUSH
71442: LD_INT 2
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 1
71451: PUSH
71452: LD_INT 3
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 1
71461: PUSH
71462: LD_INT 4
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 0
71471: PUSH
71472: LD_INT 4
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 1
71481: NEG
71482: PUSH
71483: LD_INT 3
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 1
71492: NEG
71493: PUSH
71494: LD_INT 2
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: LD_INT 2
71503: PUSH
71504: LD_INT 4
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 2
71513: NEG
71514: PUSH
71515: LD_INT 2
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 4
71524: NEG
71525: PUSH
71526: LD_INT 0
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 4
71535: NEG
71536: PUSH
71537: LD_INT 1
71539: NEG
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 3
71547: NEG
71548: PUSH
71549: LD_INT 0
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: LD_INT 3
71558: NEG
71559: PUSH
71560: LD_INT 1
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 4
71569: NEG
71570: PUSH
71571: LD_INT 1
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: PUSH
71578: LD_INT 5
71580: NEG
71581: PUSH
71582: LD_INT 0
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 5
71591: NEG
71592: PUSH
71593: LD_INT 1
71595: NEG
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 5
71603: NEG
71604: PUSH
71605: LD_INT 2
71607: NEG
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 3
71615: NEG
71616: PUSH
71617: LD_INT 2
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 3
71626: NEG
71627: PUSH
71628: LD_INT 3
71630: NEG
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: LD_INT 3
71638: NEG
71639: PUSH
71640: LD_INT 4
71642: NEG
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 2
71650: NEG
71651: PUSH
71652: LD_INT 3
71654: NEG
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 2
71662: NEG
71663: PUSH
71664: LD_INT 2
71666: NEG
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 3
71674: NEG
71675: PUSH
71676: LD_INT 2
71678: NEG
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 4
71686: NEG
71687: PUSH
71688: LD_INT 3
71690: NEG
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 4
71698: NEG
71699: PUSH
71700: LD_INT 4
71702: NEG
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 2
71710: NEG
71711: PUSH
71712: LD_INT 4
71714: NEG
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: LD_INT 4
71722: NEG
71723: PUSH
71724: LD_INT 2
71726: NEG
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 0
71734: PUSH
71735: LD_INT 4
71737: NEG
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: PUSH
71743: LD_INT 0
71745: PUSH
71746: LD_INT 5
71748: NEG
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 1
71756: PUSH
71757: LD_INT 4
71759: NEG
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 1
71767: PUSH
71768: LD_INT 3
71770: NEG
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 0
71778: PUSH
71779: LD_INT 3
71781: NEG
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 1
71789: NEG
71790: PUSH
71791: LD_INT 4
71793: NEG
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 1
71801: NEG
71802: PUSH
71803: LD_INT 5
71805: NEG
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 2
71813: PUSH
71814: LD_INT 3
71816: NEG
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 2
71824: NEG
71825: PUSH
71826: LD_INT 5
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71881: LD_ADDR_VAR 0 31
71885: PUSH
71886: LD_INT 0
71888: PUSH
71889: LD_INT 4
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 0
71898: PUSH
71899: LD_INT 3
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 1
71908: PUSH
71909: LD_INT 4
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 1
71918: PUSH
71919: LD_INT 5
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 0
71928: PUSH
71929: LD_INT 5
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 1
71938: NEG
71939: PUSH
71940: LD_INT 4
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 1
71949: NEG
71950: PUSH
71951: LD_INT 3
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: PUSH
71958: LD_INT 2
71960: PUSH
71961: LD_INT 5
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 2
71970: NEG
71971: PUSH
71972: LD_INT 3
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 3
71981: NEG
71982: PUSH
71983: LD_INT 0
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 3
71992: NEG
71993: PUSH
71994: LD_INT 1
71996: NEG
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: LD_INT 2
72004: NEG
72005: PUSH
72006: LD_INT 0
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 2
72015: NEG
72016: PUSH
72017: LD_INT 1
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: PUSH
72024: LD_INT 3
72026: NEG
72027: PUSH
72028: LD_INT 1
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 4
72037: NEG
72038: PUSH
72039: LD_INT 0
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: LD_INT 4
72048: NEG
72049: PUSH
72050: LD_INT 1
72052: NEG
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: PUSH
72058: LD_INT 4
72060: NEG
72061: PUSH
72062: LD_INT 2
72064: NEG
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: LD_INT 2
72072: NEG
72073: PUSH
72074: LD_INT 2
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PUSH
72081: LD_INT 4
72083: NEG
72084: PUSH
72085: LD_INT 4
72087: NEG
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 4
72095: NEG
72096: PUSH
72097: LD_INT 5
72099: NEG
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 3
72107: NEG
72108: PUSH
72109: LD_INT 4
72111: NEG
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 3
72119: NEG
72120: PUSH
72121: LD_INT 3
72123: NEG
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: LD_INT 4
72131: NEG
72132: PUSH
72133: LD_INT 3
72135: NEG
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 5
72143: NEG
72144: PUSH
72145: LD_INT 4
72147: NEG
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 5
72155: NEG
72156: PUSH
72157: LD_INT 5
72159: NEG
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: PUSH
72165: LD_INT 3
72167: NEG
72168: PUSH
72169: LD_INT 5
72171: NEG
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: PUSH
72177: LD_INT 5
72179: NEG
72180: PUSH
72181: LD_INT 3
72183: NEG
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: PUSH
72189: LD_INT 0
72191: PUSH
72192: LD_INT 3
72194: NEG
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 0
72202: PUSH
72203: LD_INT 4
72205: NEG
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 1
72213: PUSH
72214: LD_INT 3
72216: NEG
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 1
72224: PUSH
72225: LD_INT 2
72227: NEG
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 0
72235: PUSH
72236: LD_INT 2
72238: NEG
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 1
72246: NEG
72247: PUSH
72248: LD_INT 3
72250: NEG
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 1
72258: NEG
72259: PUSH
72260: LD_INT 4
72262: NEG
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_INT 2
72270: PUSH
72271: LD_INT 2
72273: NEG
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 2
72281: NEG
72282: PUSH
72283: LD_INT 4
72285: NEG
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 4
72293: PUSH
72294: LD_INT 0
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: PUSH
72301: LD_INT 4
72303: PUSH
72304: LD_INT 1
72306: NEG
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: PUSH
72312: LD_INT 5
72314: PUSH
72315: LD_INT 0
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 5
72324: PUSH
72325: LD_INT 1
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 4
72334: PUSH
72335: LD_INT 1
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: PUSH
72342: LD_INT 3
72344: PUSH
72345: LD_INT 0
72347: PUSH
72348: EMPTY
72349: LIST
72350: LIST
72351: PUSH
72352: LD_INT 3
72354: PUSH
72355: LD_INT 1
72357: NEG
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 3
72365: PUSH
72366: LD_INT 2
72368: NEG
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 5
72376: PUSH
72377: LD_INT 2
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72431: LD_ADDR_VAR 0 32
72435: PUSH
72436: LD_INT 4
72438: NEG
72439: PUSH
72440: LD_INT 0
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 4
72449: NEG
72450: PUSH
72451: LD_INT 1
72453: NEG
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: PUSH
72459: LD_INT 3
72461: NEG
72462: PUSH
72463: LD_INT 0
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 3
72472: NEG
72473: PUSH
72474: LD_INT 1
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 4
72483: NEG
72484: PUSH
72485: LD_INT 1
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: PUSH
72492: LD_INT 5
72494: NEG
72495: PUSH
72496: LD_INT 0
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 5
72505: NEG
72506: PUSH
72507: LD_INT 1
72509: NEG
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 5
72517: NEG
72518: PUSH
72519: LD_INT 2
72521: NEG
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 3
72529: NEG
72530: PUSH
72531: LD_INT 2
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 3
72540: NEG
72541: PUSH
72542: LD_INT 3
72544: NEG
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 3
72552: NEG
72553: PUSH
72554: LD_INT 4
72556: NEG
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: LD_INT 2
72564: NEG
72565: PUSH
72566: LD_INT 3
72568: NEG
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: LD_INT 2
72576: NEG
72577: PUSH
72578: LD_INT 2
72580: NEG
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 3
72588: NEG
72589: PUSH
72590: LD_INT 2
72592: NEG
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 4
72600: NEG
72601: PUSH
72602: LD_INT 3
72604: NEG
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 4
72612: NEG
72613: PUSH
72614: LD_INT 4
72616: NEG
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 2
72624: NEG
72625: PUSH
72626: LD_INT 4
72628: NEG
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: PUSH
72634: LD_INT 4
72636: NEG
72637: PUSH
72638: LD_INT 2
72640: NEG
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: LD_INT 0
72648: PUSH
72649: LD_INT 4
72651: NEG
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 0
72659: PUSH
72660: LD_INT 5
72662: NEG
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_INT 1
72670: PUSH
72671: LD_INT 4
72673: NEG
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: PUSH
72679: LD_INT 1
72681: PUSH
72682: LD_INT 3
72684: NEG
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 0
72692: PUSH
72693: LD_INT 3
72695: NEG
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 1
72703: NEG
72704: PUSH
72705: LD_INT 4
72707: NEG
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 1
72715: NEG
72716: PUSH
72717: LD_INT 5
72719: NEG
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 2
72727: PUSH
72728: LD_INT 3
72730: NEG
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 2
72738: NEG
72739: PUSH
72740: LD_INT 5
72742: NEG
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 3
72750: PUSH
72751: LD_INT 0
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 3
72760: PUSH
72761: LD_INT 1
72763: NEG
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 4
72771: PUSH
72772: LD_INT 0
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_INT 4
72781: PUSH
72782: LD_INT 1
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: LD_INT 3
72791: PUSH
72792: LD_INT 1
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 2
72801: PUSH
72802: LD_INT 0
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: PUSH
72809: LD_INT 2
72811: PUSH
72812: LD_INT 1
72814: NEG
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: LD_INT 2
72822: PUSH
72823: LD_INT 2
72825: NEG
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: LD_INT 4
72833: PUSH
72834: LD_INT 2
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: LD_INT 4
72843: PUSH
72844: LD_INT 4
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: LD_INT 4
72853: PUSH
72854: LD_INT 3
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: PUSH
72861: LD_INT 5
72863: PUSH
72864: LD_INT 4
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: LD_INT 5
72873: PUSH
72874: LD_INT 5
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 4
72883: PUSH
72884: LD_INT 5
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 3
72893: PUSH
72894: LD_INT 4
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 3
72903: PUSH
72904: LD_INT 3
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 5
72913: PUSH
72914: LD_INT 3
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 3
72923: PUSH
72924: LD_INT 5
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: LIST
72935: LIST
72936: LIST
72937: LIST
72938: LIST
72939: LIST
72940: LIST
72941: LIST
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: LIST
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: LIST
72964: LIST
72965: LIST
72966: LIST
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72978: LD_ADDR_VAR 0 33
72982: PUSH
72983: LD_INT 4
72985: NEG
72986: PUSH
72987: LD_INT 4
72989: NEG
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 4
72997: NEG
72998: PUSH
72999: LD_INT 5
73001: NEG
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 3
73009: NEG
73010: PUSH
73011: LD_INT 4
73013: NEG
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: LD_INT 3
73021: NEG
73022: PUSH
73023: LD_INT 3
73025: NEG
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 4
73033: NEG
73034: PUSH
73035: LD_INT 3
73037: NEG
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: LD_INT 5
73045: NEG
73046: PUSH
73047: LD_INT 4
73049: NEG
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: PUSH
73055: LD_INT 5
73057: NEG
73058: PUSH
73059: LD_INT 5
73061: NEG
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: PUSH
73067: LD_INT 3
73069: NEG
73070: PUSH
73071: LD_INT 5
73073: NEG
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: LD_INT 5
73081: NEG
73082: PUSH
73083: LD_INT 3
73085: NEG
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: LD_INT 0
73093: PUSH
73094: LD_INT 3
73096: NEG
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 0
73104: PUSH
73105: LD_INT 4
73107: NEG
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: PUSH
73113: LD_INT 1
73115: PUSH
73116: LD_INT 3
73118: NEG
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 1
73126: PUSH
73127: LD_INT 2
73129: NEG
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_INT 0
73137: PUSH
73138: LD_INT 2
73140: NEG
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: LD_INT 1
73148: NEG
73149: PUSH
73150: LD_INT 3
73152: NEG
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: LD_INT 1
73160: NEG
73161: PUSH
73162: LD_INT 4
73164: NEG
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: LD_INT 2
73172: PUSH
73173: LD_INT 2
73175: NEG
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 2
73183: NEG
73184: PUSH
73185: LD_INT 4
73187: NEG
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: LD_INT 4
73195: PUSH
73196: LD_INT 0
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: PUSH
73203: LD_INT 4
73205: PUSH
73206: LD_INT 1
73208: NEG
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: PUSH
73214: LD_INT 5
73216: PUSH
73217: LD_INT 0
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: LD_INT 5
73226: PUSH
73227: LD_INT 1
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: LD_INT 4
73236: PUSH
73237: LD_INT 1
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: PUSH
73244: LD_INT 3
73246: PUSH
73247: LD_INT 0
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: PUSH
73254: LD_INT 3
73256: PUSH
73257: LD_INT 1
73259: NEG
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: LD_INT 3
73267: PUSH
73268: LD_INT 2
73270: NEG
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 5
73278: PUSH
73279: LD_INT 2
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_INT 3
73288: PUSH
73289: LD_INT 3
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: PUSH
73296: LD_INT 3
73298: PUSH
73299: LD_INT 2
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PUSH
73306: LD_INT 4
73308: PUSH
73309: LD_INT 3
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 4
73318: PUSH
73319: LD_INT 4
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: PUSH
73326: LD_INT 3
73328: PUSH
73329: LD_INT 4
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: PUSH
73336: LD_INT 2
73338: PUSH
73339: LD_INT 3
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: LD_INT 2
73348: PUSH
73349: LD_INT 2
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: PUSH
73356: LD_INT 4
73358: PUSH
73359: LD_INT 2
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 2
73368: PUSH
73369: LD_INT 4
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PUSH
73376: LD_INT 0
73378: PUSH
73379: LD_INT 4
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 0
73388: PUSH
73389: LD_INT 3
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 1
73398: PUSH
73399: LD_INT 4
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: LD_INT 1
73408: PUSH
73409: LD_INT 5
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 0
73418: PUSH
73419: LD_INT 5
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: PUSH
73426: LD_INT 1
73428: NEG
73429: PUSH
73430: LD_INT 4
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PUSH
73437: LD_INT 1
73439: NEG
73440: PUSH
73441: LD_INT 3
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PUSH
73448: LD_INT 2
73450: PUSH
73451: LD_INT 5
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: PUSH
73458: LD_INT 2
73460: NEG
73461: PUSH
73462: LD_INT 3
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: LIST
73479: LIST
73480: LIST
73481: LIST
73482: LIST
73483: LIST
73484: LIST
73485: LIST
73486: LIST
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: LIST
73493: LIST
73494: LIST
73495: LIST
73496: LIST
73497: LIST
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: LIST
73503: LIST
73504: LIST
73505: LIST
73506: LIST
73507: LIST
73508: LIST
73509: LIST
73510: LIST
73511: LIST
73512: LIST
73513: LIST
73514: LIST
73515: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73516: LD_ADDR_VAR 0 34
73520: PUSH
73521: LD_INT 0
73523: PUSH
73524: LD_INT 4
73526: NEG
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: LD_INT 0
73534: PUSH
73535: LD_INT 5
73537: NEG
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: PUSH
73543: LD_INT 1
73545: PUSH
73546: LD_INT 4
73548: NEG
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 1
73556: PUSH
73557: LD_INT 3
73559: NEG
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: PUSH
73565: LD_INT 0
73567: PUSH
73568: LD_INT 3
73570: NEG
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PUSH
73576: LD_INT 1
73578: NEG
73579: PUSH
73580: LD_INT 4
73582: NEG
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: PUSH
73588: LD_INT 1
73590: NEG
73591: PUSH
73592: LD_INT 5
73594: NEG
73595: PUSH
73596: EMPTY
73597: LIST
73598: LIST
73599: PUSH
73600: LD_INT 2
73602: PUSH
73603: LD_INT 3
73605: NEG
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: PUSH
73611: LD_INT 2
73613: NEG
73614: PUSH
73615: LD_INT 5
73617: NEG
73618: PUSH
73619: EMPTY
73620: LIST
73621: LIST
73622: PUSH
73623: LD_INT 3
73625: PUSH
73626: LD_INT 0
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: PUSH
73633: LD_INT 3
73635: PUSH
73636: LD_INT 1
73638: NEG
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 4
73646: PUSH
73647: LD_INT 0
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PUSH
73654: LD_INT 4
73656: PUSH
73657: LD_INT 1
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 3
73666: PUSH
73667: LD_INT 1
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 2
73676: PUSH
73677: LD_INT 0
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: PUSH
73684: LD_INT 2
73686: PUSH
73687: LD_INT 1
73689: NEG
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: LD_INT 2
73697: PUSH
73698: LD_INT 2
73700: NEG
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 4
73708: PUSH
73709: LD_INT 2
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 4
73718: PUSH
73719: LD_INT 4
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: LD_INT 4
73728: PUSH
73729: LD_INT 3
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: PUSH
73736: LD_INT 5
73738: PUSH
73739: LD_INT 4
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: PUSH
73746: LD_INT 5
73748: PUSH
73749: LD_INT 5
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: LD_INT 4
73758: PUSH
73759: LD_INT 5
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: LD_INT 3
73768: PUSH
73769: LD_INT 4
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: LD_INT 3
73778: PUSH
73779: LD_INT 3
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 5
73788: PUSH
73789: LD_INT 3
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 3
73798: PUSH
73799: LD_INT 5
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 0
73808: PUSH
73809: LD_INT 3
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PUSH
73816: LD_INT 0
73818: PUSH
73819: LD_INT 2
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 1
73828: PUSH
73829: LD_INT 3
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: PUSH
73836: LD_INT 1
73838: PUSH
73839: LD_INT 4
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: PUSH
73846: LD_INT 0
73848: PUSH
73849: LD_INT 4
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PUSH
73856: LD_INT 1
73858: NEG
73859: PUSH
73860: LD_INT 3
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PUSH
73867: LD_INT 1
73869: NEG
73870: PUSH
73871: LD_INT 2
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: PUSH
73878: LD_INT 2
73880: PUSH
73881: LD_INT 4
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: PUSH
73888: LD_INT 2
73890: NEG
73891: PUSH
73892: LD_INT 2
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: PUSH
73899: LD_INT 4
73901: NEG
73902: PUSH
73903: LD_INT 0
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: PUSH
73910: LD_INT 4
73912: NEG
73913: PUSH
73914: LD_INT 1
73916: NEG
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: PUSH
73922: LD_INT 3
73924: NEG
73925: PUSH
73926: LD_INT 0
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: PUSH
73933: LD_INT 3
73935: NEG
73936: PUSH
73937: LD_INT 1
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PUSH
73944: LD_INT 4
73946: NEG
73947: PUSH
73948: LD_INT 1
73950: PUSH
73951: EMPTY
73952: LIST
73953: LIST
73954: PUSH
73955: LD_INT 5
73957: NEG
73958: PUSH
73959: LD_INT 0
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 5
73968: NEG
73969: PUSH
73970: LD_INT 1
73972: NEG
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: LD_INT 5
73980: NEG
73981: PUSH
73982: LD_INT 2
73984: NEG
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: PUSH
73990: LD_INT 3
73992: NEG
73993: PUSH
73994: LD_INT 2
73996: PUSH
73997: EMPTY
73998: LIST
73999: LIST
74000: PUSH
74001: EMPTY
74002: LIST
74003: LIST
74004: LIST
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: LIST
74036: LIST
74037: LIST
74038: LIST
74039: LIST
74040: LIST
74041: LIST
74042: LIST
74043: LIST
74044: LIST
74045: LIST
74046: LIST
74047: ST_TO_ADDR
// end ; end ;
74048: GO 74051
74050: POP
// case btype of b_depot , b_warehouse :
74051: LD_VAR 0 1
74055: PUSH
74056: LD_INT 0
74058: DOUBLE
74059: EQUAL
74060: IFTRUE 74070
74062: LD_INT 1
74064: DOUBLE
74065: EQUAL
74066: IFTRUE 74070
74068: GO 74271
74070: POP
// case nation of nation_american :
74071: LD_VAR 0 5
74075: PUSH
74076: LD_INT 1
74078: DOUBLE
74079: EQUAL
74080: IFTRUE 74084
74082: GO 74140
74084: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74085: LD_ADDR_VAR 0 9
74089: PUSH
74090: LD_VAR 0 11
74094: PUSH
74095: LD_VAR 0 12
74099: PUSH
74100: LD_VAR 0 13
74104: PUSH
74105: LD_VAR 0 14
74109: PUSH
74110: LD_VAR 0 15
74114: PUSH
74115: LD_VAR 0 16
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: PUSH
74128: LD_VAR 0 4
74132: PUSH
74133: LD_INT 1
74135: PLUS
74136: ARRAY
74137: ST_TO_ADDR
74138: GO 74269
74140: LD_INT 2
74142: DOUBLE
74143: EQUAL
74144: IFTRUE 74148
74146: GO 74204
74148: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74149: LD_ADDR_VAR 0 9
74153: PUSH
74154: LD_VAR 0 17
74158: PUSH
74159: LD_VAR 0 18
74163: PUSH
74164: LD_VAR 0 19
74168: PUSH
74169: LD_VAR 0 20
74173: PUSH
74174: LD_VAR 0 21
74178: PUSH
74179: LD_VAR 0 22
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: LIST
74188: LIST
74189: LIST
74190: LIST
74191: PUSH
74192: LD_VAR 0 4
74196: PUSH
74197: LD_INT 1
74199: PLUS
74200: ARRAY
74201: ST_TO_ADDR
74202: GO 74269
74204: LD_INT 3
74206: DOUBLE
74207: EQUAL
74208: IFTRUE 74212
74210: GO 74268
74212: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74213: LD_ADDR_VAR 0 9
74217: PUSH
74218: LD_VAR 0 23
74222: PUSH
74223: LD_VAR 0 24
74227: PUSH
74228: LD_VAR 0 25
74232: PUSH
74233: LD_VAR 0 26
74237: PUSH
74238: LD_VAR 0 27
74242: PUSH
74243: LD_VAR 0 28
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: PUSH
74256: LD_VAR 0 4
74260: PUSH
74261: LD_INT 1
74263: PLUS
74264: ARRAY
74265: ST_TO_ADDR
74266: GO 74269
74268: POP
74269: GO 74824
74271: LD_INT 2
74273: DOUBLE
74274: EQUAL
74275: IFTRUE 74285
74277: LD_INT 3
74279: DOUBLE
74280: EQUAL
74281: IFTRUE 74285
74283: GO 74341
74285: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74286: LD_ADDR_VAR 0 9
74290: PUSH
74291: LD_VAR 0 29
74295: PUSH
74296: LD_VAR 0 30
74300: PUSH
74301: LD_VAR 0 31
74305: PUSH
74306: LD_VAR 0 32
74310: PUSH
74311: LD_VAR 0 33
74315: PUSH
74316: LD_VAR 0 34
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: PUSH
74329: LD_VAR 0 4
74333: PUSH
74334: LD_INT 1
74336: PLUS
74337: ARRAY
74338: ST_TO_ADDR
74339: GO 74824
74341: LD_INT 16
74343: DOUBLE
74344: EQUAL
74345: IFTRUE 74403
74347: LD_INT 17
74349: DOUBLE
74350: EQUAL
74351: IFTRUE 74403
74353: LD_INT 18
74355: DOUBLE
74356: EQUAL
74357: IFTRUE 74403
74359: LD_INT 19
74361: DOUBLE
74362: EQUAL
74363: IFTRUE 74403
74365: LD_INT 22
74367: DOUBLE
74368: EQUAL
74369: IFTRUE 74403
74371: LD_INT 20
74373: DOUBLE
74374: EQUAL
74375: IFTRUE 74403
74377: LD_INT 21
74379: DOUBLE
74380: EQUAL
74381: IFTRUE 74403
74383: LD_INT 23
74385: DOUBLE
74386: EQUAL
74387: IFTRUE 74403
74389: LD_INT 24
74391: DOUBLE
74392: EQUAL
74393: IFTRUE 74403
74395: LD_INT 25
74397: DOUBLE
74398: EQUAL
74399: IFTRUE 74403
74401: GO 74459
74403: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74404: LD_ADDR_VAR 0 9
74408: PUSH
74409: LD_VAR 0 35
74413: PUSH
74414: LD_VAR 0 36
74418: PUSH
74419: LD_VAR 0 37
74423: PUSH
74424: LD_VAR 0 38
74428: PUSH
74429: LD_VAR 0 39
74433: PUSH
74434: LD_VAR 0 40
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: PUSH
74447: LD_VAR 0 4
74451: PUSH
74452: LD_INT 1
74454: PLUS
74455: ARRAY
74456: ST_TO_ADDR
74457: GO 74824
74459: LD_INT 6
74461: DOUBLE
74462: EQUAL
74463: IFTRUE 74515
74465: LD_INT 7
74467: DOUBLE
74468: EQUAL
74469: IFTRUE 74515
74471: LD_INT 8
74473: DOUBLE
74474: EQUAL
74475: IFTRUE 74515
74477: LD_INT 13
74479: DOUBLE
74480: EQUAL
74481: IFTRUE 74515
74483: LD_INT 12
74485: DOUBLE
74486: EQUAL
74487: IFTRUE 74515
74489: LD_INT 15
74491: DOUBLE
74492: EQUAL
74493: IFTRUE 74515
74495: LD_INT 11
74497: DOUBLE
74498: EQUAL
74499: IFTRUE 74515
74501: LD_INT 14
74503: DOUBLE
74504: EQUAL
74505: IFTRUE 74515
74507: LD_INT 10
74509: DOUBLE
74510: EQUAL
74511: IFTRUE 74515
74513: GO 74571
74515: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74516: LD_ADDR_VAR 0 9
74520: PUSH
74521: LD_VAR 0 41
74525: PUSH
74526: LD_VAR 0 42
74530: PUSH
74531: LD_VAR 0 43
74535: PUSH
74536: LD_VAR 0 44
74540: PUSH
74541: LD_VAR 0 45
74545: PUSH
74546: LD_VAR 0 46
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: LIST
74555: LIST
74556: LIST
74557: LIST
74558: PUSH
74559: LD_VAR 0 4
74563: PUSH
74564: LD_INT 1
74566: PLUS
74567: ARRAY
74568: ST_TO_ADDR
74569: GO 74824
74571: LD_INT 36
74573: DOUBLE
74574: EQUAL
74575: IFTRUE 74579
74577: GO 74635
74579: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74580: LD_ADDR_VAR 0 9
74584: PUSH
74585: LD_VAR 0 47
74589: PUSH
74590: LD_VAR 0 48
74594: PUSH
74595: LD_VAR 0 49
74599: PUSH
74600: LD_VAR 0 50
74604: PUSH
74605: LD_VAR 0 51
74609: PUSH
74610: LD_VAR 0 52
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: LIST
74621: LIST
74622: PUSH
74623: LD_VAR 0 4
74627: PUSH
74628: LD_INT 1
74630: PLUS
74631: ARRAY
74632: ST_TO_ADDR
74633: GO 74824
74635: LD_INT 4
74637: DOUBLE
74638: EQUAL
74639: IFTRUE 74661
74641: LD_INT 5
74643: DOUBLE
74644: EQUAL
74645: IFTRUE 74661
74647: LD_INT 34
74649: DOUBLE
74650: EQUAL
74651: IFTRUE 74661
74653: LD_INT 37
74655: DOUBLE
74656: EQUAL
74657: IFTRUE 74661
74659: GO 74717
74661: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74662: LD_ADDR_VAR 0 9
74666: PUSH
74667: LD_VAR 0 53
74671: PUSH
74672: LD_VAR 0 54
74676: PUSH
74677: LD_VAR 0 55
74681: PUSH
74682: LD_VAR 0 56
74686: PUSH
74687: LD_VAR 0 57
74691: PUSH
74692: LD_VAR 0 58
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: LIST
74704: PUSH
74705: LD_VAR 0 4
74709: PUSH
74710: LD_INT 1
74712: PLUS
74713: ARRAY
74714: ST_TO_ADDR
74715: GO 74824
74717: LD_INT 31
74719: DOUBLE
74720: EQUAL
74721: IFTRUE 74767
74723: LD_INT 32
74725: DOUBLE
74726: EQUAL
74727: IFTRUE 74767
74729: LD_INT 33
74731: DOUBLE
74732: EQUAL
74733: IFTRUE 74767
74735: LD_INT 27
74737: DOUBLE
74738: EQUAL
74739: IFTRUE 74767
74741: LD_INT 26
74743: DOUBLE
74744: EQUAL
74745: IFTRUE 74767
74747: LD_INT 28
74749: DOUBLE
74750: EQUAL
74751: IFTRUE 74767
74753: LD_INT 29
74755: DOUBLE
74756: EQUAL
74757: IFTRUE 74767
74759: LD_INT 30
74761: DOUBLE
74762: EQUAL
74763: IFTRUE 74767
74765: GO 74823
74767: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74768: LD_ADDR_VAR 0 9
74772: PUSH
74773: LD_VAR 0 59
74777: PUSH
74778: LD_VAR 0 60
74782: PUSH
74783: LD_VAR 0 61
74787: PUSH
74788: LD_VAR 0 62
74792: PUSH
74793: LD_VAR 0 63
74797: PUSH
74798: LD_VAR 0 64
74802: PUSH
74803: EMPTY
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: PUSH
74811: LD_VAR 0 4
74815: PUSH
74816: LD_INT 1
74818: PLUS
74819: ARRAY
74820: ST_TO_ADDR
74821: GO 74824
74823: POP
// temp_list2 = [ ] ;
74824: LD_ADDR_VAR 0 10
74828: PUSH
74829: EMPTY
74830: ST_TO_ADDR
// for i in temp_list do
74831: LD_ADDR_VAR 0 8
74835: PUSH
74836: LD_VAR 0 9
74840: PUSH
74841: FOR_IN
74842: IFFALSE 74894
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74844: LD_ADDR_VAR 0 10
74848: PUSH
74849: LD_VAR 0 10
74853: PUSH
74854: LD_VAR 0 8
74858: PUSH
74859: LD_INT 1
74861: ARRAY
74862: PUSH
74863: LD_VAR 0 2
74867: PLUS
74868: PUSH
74869: LD_VAR 0 8
74873: PUSH
74874: LD_INT 2
74876: ARRAY
74877: PUSH
74878: LD_VAR 0 3
74882: PLUS
74883: PUSH
74884: EMPTY
74885: LIST
74886: LIST
74887: PUSH
74888: EMPTY
74889: LIST
74890: ADD
74891: ST_TO_ADDR
74892: GO 74841
74894: POP
74895: POP
// result = temp_list2 ;
74896: LD_ADDR_VAR 0 7
74900: PUSH
74901: LD_VAR 0 10
74905: ST_TO_ADDR
// end ;
74906: LD_VAR 0 7
74910: RET
// export function EnemyInRange ( unit , dist ) ; begin
74911: LD_INT 0
74913: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74914: LD_ADDR_VAR 0 3
74918: PUSH
74919: LD_VAR 0 1
74923: PPUSH
74924: CALL_OW 255
74928: PPUSH
74929: LD_VAR 0 1
74933: PPUSH
74934: CALL_OW 250
74938: PPUSH
74939: LD_VAR 0 1
74943: PPUSH
74944: CALL_OW 251
74948: PPUSH
74949: LD_VAR 0 2
74953: PPUSH
74954: CALL 48168 0 4
74958: PUSH
74959: LD_INT 4
74961: ARRAY
74962: ST_TO_ADDR
// end ;
74963: LD_VAR 0 3
74967: RET
// export function PlayerSeeMe ( unit ) ; begin
74968: LD_INT 0
74970: PPUSH
// result := See ( your_side , unit ) ;
74971: LD_ADDR_VAR 0 2
74975: PUSH
74976: LD_OWVAR 2
74980: PPUSH
74981: LD_VAR 0 1
74985: PPUSH
74986: CALL_OW 292
74990: ST_TO_ADDR
// end ;
74991: LD_VAR 0 2
74995: RET
// export function ReverseDir ( unit ) ; begin
74996: LD_INT 0
74998: PPUSH
// if not unit then
74999: LD_VAR 0 1
75003: NOT
75004: IFFALSE 75008
// exit ;
75006: GO 75031
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75008: LD_ADDR_VAR 0 2
75012: PUSH
75013: LD_VAR 0 1
75017: PPUSH
75018: CALL_OW 254
75022: PUSH
75023: LD_INT 3
75025: PLUS
75026: PUSH
75027: LD_INT 6
75029: MOD
75030: ST_TO_ADDR
// end ;
75031: LD_VAR 0 2
75035: RET
// export function ReverseArray ( array ) ; var i ; begin
75036: LD_INT 0
75038: PPUSH
75039: PPUSH
// if not array then
75040: LD_VAR 0 1
75044: NOT
75045: IFFALSE 75049
// exit ;
75047: GO 75104
// result := [ ] ;
75049: LD_ADDR_VAR 0 2
75053: PUSH
75054: EMPTY
75055: ST_TO_ADDR
// for i := array downto 1 do
75056: LD_ADDR_VAR 0 3
75060: PUSH
75061: DOUBLE
75062: LD_VAR 0 1
75066: INC
75067: ST_TO_ADDR
75068: LD_INT 1
75070: PUSH
75071: FOR_DOWNTO
75072: IFFALSE 75102
// result := Join ( result , array [ i ] ) ;
75074: LD_ADDR_VAR 0 2
75078: PUSH
75079: LD_VAR 0 2
75083: PPUSH
75084: LD_VAR 0 1
75088: PUSH
75089: LD_VAR 0 3
75093: ARRAY
75094: PPUSH
75095: CALL 79946 0 2
75099: ST_TO_ADDR
75100: GO 75071
75102: POP
75103: POP
// end ;
75104: LD_VAR 0 2
75108: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75109: LD_INT 0
75111: PPUSH
75112: PPUSH
75113: PPUSH
75114: PPUSH
75115: PPUSH
75116: PPUSH
// if not unit or not hexes then
75117: LD_VAR 0 1
75121: NOT
75122: IFTRUE 75131
75124: PUSH
75125: LD_VAR 0 2
75129: NOT
75130: OR
75131: IFFALSE 75135
// exit ;
75133: GO 75258
// dist := 9999 ;
75135: LD_ADDR_VAR 0 5
75139: PUSH
75140: LD_INT 9999
75142: ST_TO_ADDR
// for i = 1 to hexes do
75143: LD_ADDR_VAR 0 4
75147: PUSH
75148: DOUBLE
75149: LD_INT 1
75151: DEC
75152: ST_TO_ADDR
75153: LD_VAR 0 2
75157: PUSH
75158: FOR_TO
75159: IFFALSE 75246
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75161: LD_ADDR_VAR 0 6
75165: PUSH
75166: LD_VAR 0 1
75170: PPUSH
75171: LD_VAR 0 2
75175: PUSH
75176: LD_VAR 0 4
75180: ARRAY
75181: PUSH
75182: LD_INT 1
75184: ARRAY
75185: PPUSH
75186: LD_VAR 0 2
75190: PUSH
75191: LD_VAR 0 4
75195: ARRAY
75196: PUSH
75197: LD_INT 2
75199: ARRAY
75200: PPUSH
75201: CALL_OW 297
75205: ST_TO_ADDR
// if tdist < dist then
75206: LD_VAR 0 6
75210: PUSH
75211: LD_VAR 0 5
75215: LESS
75216: IFFALSE 75244
// begin hex := hexes [ i ] ;
75218: LD_ADDR_VAR 0 8
75222: PUSH
75223: LD_VAR 0 2
75227: PUSH
75228: LD_VAR 0 4
75232: ARRAY
75233: ST_TO_ADDR
// dist := tdist ;
75234: LD_ADDR_VAR 0 5
75238: PUSH
75239: LD_VAR 0 6
75243: ST_TO_ADDR
// end ; end ;
75244: GO 75158
75246: POP
75247: POP
// result := hex ;
75248: LD_ADDR_VAR 0 3
75252: PUSH
75253: LD_VAR 0 8
75257: ST_TO_ADDR
// end ;
75258: LD_VAR 0 3
75262: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75263: LD_INT 0
75265: PPUSH
75266: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75267: LD_VAR 0 1
75271: NOT
75272: IFTRUE 75311
75274: PUSH
75275: LD_VAR 0 1
75279: PUSH
75280: LD_INT 21
75282: PUSH
75283: LD_INT 2
75285: PUSH
75286: EMPTY
75287: LIST
75288: LIST
75289: PUSH
75290: LD_INT 23
75292: PUSH
75293: LD_INT 2
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: PPUSH
75304: CALL_OW 69
75308: IN
75309: NOT
75310: OR
75311: IFFALSE 75315
// exit ;
75313: GO 75362
// for i = 1 to 3 do
75315: LD_ADDR_VAR 0 3
75319: PUSH
75320: DOUBLE
75321: LD_INT 1
75323: DEC
75324: ST_TO_ADDR
75325: LD_INT 3
75327: PUSH
75328: FOR_TO
75329: IFFALSE 75360
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75331: LD_VAR 0 1
75335: PPUSH
75336: CALL_OW 250
75340: PPUSH
75341: LD_VAR 0 1
75345: PPUSH
75346: CALL_OW 251
75350: PPUSH
75351: LD_INT 1
75353: PPUSH
75354: CALL_OW 453
75358: GO 75328
75360: POP
75361: POP
// end ;
75362: LD_VAR 0 2
75366: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75367: LD_INT 0
75369: PPUSH
75370: PPUSH
75371: PPUSH
75372: PPUSH
75373: PPUSH
75374: PPUSH
// if not unit or not enemy_unit then
75375: LD_VAR 0 1
75379: NOT
75380: IFTRUE 75389
75382: PUSH
75383: LD_VAR 0 2
75387: NOT
75388: OR
75389: IFFALSE 75393
// exit ;
75391: GO 75864
// if GetLives ( i ) < 250 then
75393: LD_VAR 0 4
75397: PPUSH
75398: CALL_OW 256
75402: PUSH
75403: LD_INT 250
75405: LESS
75406: IFFALSE 75419
// begin ComAutodestruct ( i ) ;
75408: LD_VAR 0 4
75412: PPUSH
75413: CALL 75263 0 1
// exit ;
75417: GO 75864
// end ; x := GetX ( enemy_unit ) ;
75419: LD_ADDR_VAR 0 7
75423: PUSH
75424: LD_VAR 0 2
75428: PPUSH
75429: CALL_OW 250
75433: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75434: LD_ADDR_VAR 0 8
75438: PUSH
75439: LD_VAR 0 2
75443: PPUSH
75444: CALL_OW 251
75448: ST_TO_ADDR
// if not x or not y then
75449: LD_VAR 0 7
75453: NOT
75454: IFTRUE 75463
75456: PUSH
75457: LD_VAR 0 8
75461: NOT
75462: OR
75463: IFFALSE 75467
// exit ;
75465: GO 75864
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75467: LD_ADDR_VAR 0 6
75471: PUSH
75472: LD_VAR 0 7
75476: PPUSH
75477: LD_INT 0
75479: PPUSH
75480: LD_INT 4
75482: PPUSH
75483: CALL_OW 272
75487: PUSH
75488: LD_VAR 0 8
75492: PPUSH
75493: LD_INT 0
75495: PPUSH
75496: LD_INT 4
75498: PPUSH
75499: CALL_OW 273
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: PUSH
75508: LD_VAR 0 7
75512: PPUSH
75513: LD_INT 1
75515: PPUSH
75516: LD_INT 4
75518: PPUSH
75519: CALL_OW 272
75523: PUSH
75524: LD_VAR 0 8
75528: PPUSH
75529: LD_INT 1
75531: PPUSH
75532: LD_INT 4
75534: PPUSH
75535: CALL_OW 273
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: PUSH
75544: LD_VAR 0 7
75548: PPUSH
75549: LD_INT 2
75551: PPUSH
75552: LD_INT 4
75554: PPUSH
75555: CALL_OW 272
75559: PUSH
75560: LD_VAR 0 8
75564: PPUSH
75565: LD_INT 2
75567: PPUSH
75568: LD_INT 4
75570: PPUSH
75571: CALL_OW 273
75575: PUSH
75576: EMPTY
75577: LIST
75578: LIST
75579: PUSH
75580: LD_VAR 0 7
75584: PPUSH
75585: LD_INT 3
75587: PPUSH
75588: LD_INT 4
75590: PPUSH
75591: CALL_OW 272
75595: PUSH
75596: LD_VAR 0 8
75600: PPUSH
75601: LD_INT 3
75603: PPUSH
75604: LD_INT 4
75606: PPUSH
75607: CALL_OW 273
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: PUSH
75616: LD_VAR 0 7
75620: PPUSH
75621: LD_INT 4
75623: PPUSH
75624: LD_INT 4
75626: PPUSH
75627: CALL_OW 272
75631: PUSH
75632: LD_VAR 0 8
75636: PPUSH
75637: LD_INT 4
75639: PPUSH
75640: LD_INT 4
75642: PPUSH
75643: CALL_OW 273
75647: PUSH
75648: EMPTY
75649: LIST
75650: LIST
75651: PUSH
75652: LD_VAR 0 7
75656: PPUSH
75657: LD_INT 5
75659: PPUSH
75660: LD_INT 4
75662: PPUSH
75663: CALL_OW 272
75667: PUSH
75668: LD_VAR 0 8
75672: PPUSH
75673: LD_INT 5
75675: PPUSH
75676: LD_INT 4
75678: PPUSH
75679: CALL_OW 273
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PUSH
75688: EMPTY
75689: LIST
75690: LIST
75691: LIST
75692: LIST
75693: LIST
75694: LIST
75695: ST_TO_ADDR
// for i = tmp downto 1 do
75696: LD_ADDR_VAR 0 4
75700: PUSH
75701: DOUBLE
75702: LD_VAR 0 6
75706: INC
75707: ST_TO_ADDR
75708: LD_INT 1
75710: PUSH
75711: FOR_DOWNTO
75712: IFFALSE 75815
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75714: LD_VAR 0 6
75718: PUSH
75719: LD_VAR 0 4
75723: ARRAY
75724: PUSH
75725: LD_INT 1
75727: ARRAY
75728: PPUSH
75729: LD_VAR 0 6
75733: PUSH
75734: LD_VAR 0 4
75738: ARRAY
75739: PUSH
75740: LD_INT 2
75742: ARRAY
75743: PPUSH
75744: CALL_OW 488
75748: NOT
75749: IFTRUE 75791
75751: PUSH
75752: LD_VAR 0 6
75756: PUSH
75757: LD_VAR 0 4
75761: ARRAY
75762: PUSH
75763: LD_INT 1
75765: ARRAY
75766: PPUSH
75767: LD_VAR 0 6
75771: PUSH
75772: LD_VAR 0 4
75776: ARRAY
75777: PUSH
75778: LD_INT 2
75780: ARRAY
75781: PPUSH
75782: CALL_OW 428
75786: PUSH
75787: LD_INT 0
75789: NONEQUAL
75790: OR
75791: IFFALSE 75813
// tmp := Delete ( tmp , i ) ;
75793: LD_ADDR_VAR 0 6
75797: PUSH
75798: LD_VAR 0 6
75802: PPUSH
75803: LD_VAR 0 4
75807: PPUSH
75808: CALL_OW 3
75812: ST_TO_ADDR
75813: GO 75711
75815: POP
75816: POP
// j := GetClosestHex ( unit , tmp ) ;
75817: LD_ADDR_VAR 0 5
75821: PUSH
75822: LD_VAR 0 1
75826: PPUSH
75827: LD_VAR 0 6
75831: PPUSH
75832: CALL 75109 0 2
75836: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75837: LD_VAR 0 1
75841: PPUSH
75842: LD_VAR 0 5
75846: PUSH
75847: LD_INT 1
75849: ARRAY
75850: PPUSH
75851: LD_VAR 0 5
75855: PUSH
75856: LD_INT 2
75858: ARRAY
75859: PPUSH
75860: CALL_OW 111
// end ;
75864: LD_VAR 0 3
75868: RET
// export function PrepareApemanSoldier ( ) ; begin
75869: LD_INT 0
75871: PPUSH
// uc_nation := 0 ;
75872: LD_ADDR_OWVAR 21
75876: PUSH
75877: LD_INT 0
75879: ST_TO_ADDR
// hc_sex := sex_male ;
75880: LD_ADDR_OWVAR 27
75884: PUSH
75885: LD_INT 1
75887: ST_TO_ADDR
// hc_name :=  ;
75888: LD_ADDR_OWVAR 26
75892: PUSH
75893: LD_STRING 
75895: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75896: LD_ADDR_OWVAR 28
75900: PUSH
75901: LD_INT 15
75903: ST_TO_ADDR
// hc_gallery :=  ;
75904: LD_ADDR_OWVAR 33
75908: PUSH
75909: LD_STRING 
75911: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75912: LD_ADDR_OWVAR 31
75916: PUSH
75917: LD_INT 0
75919: PPUSH
75920: LD_INT 3
75922: PPUSH
75923: CALL_OW 12
75927: PUSH
75928: LD_INT 0
75930: PPUSH
75931: LD_INT 3
75933: PPUSH
75934: CALL_OW 12
75938: PUSH
75939: LD_INT 0
75941: PUSH
75942: LD_INT 0
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: LIST
75949: LIST
75950: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75951: LD_ADDR_OWVAR 29
75955: PUSH
75956: LD_INT 12
75958: PUSH
75959: LD_INT 12
75961: PUSH
75962: EMPTY
75963: LIST
75964: LIST
75965: ST_TO_ADDR
// end ;
75966: LD_VAR 0 1
75970: RET
// export function PrepareApemanEngineer ( ) ; begin
75971: LD_INT 0
75973: PPUSH
// uc_nation := 0 ;
75974: LD_ADDR_OWVAR 21
75978: PUSH
75979: LD_INT 0
75981: ST_TO_ADDR
// hc_sex := sex_male ;
75982: LD_ADDR_OWVAR 27
75986: PUSH
75987: LD_INT 1
75989: ST_TO_ADDR
// hc_name :=  ;
75990: LD_ADDR_OWVAR 26
75994: PUSH
75995: LD_STRING 
75997: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75998: LD_ADDR_OWVAR 28
76002: PUSH
76003: LD_INT 16
76005: ST_TO_ADDR
// hc_gallery :=  ;
76006: LD_ADDR_OWVAR 33
76010: PUSH
76011: LD_STRING 
76013: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76014: LD_ADDR_OWVAR 31
76018: PUSH
76019: LD_INT 0
76021: PPUSH
76022: LD_INT 3
76024: PPUSH
76025: CALL_OW 12
76029: PUSH
76030: LD_INT 0
76032: PPUSH
76033: LD_INT 3
76035: PPUSH
76036: CALL_OW 12
76040: PUSH
76041: LD_INT 0
76043: PUSH
76044: LD_INT 0
76046: PUSH
76047: EMPTY
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76053: LD_ADDR_OWVAR 29
76057: PUSH
76058: LD_INT 12
76060: PUSH
76061: LD_INT 12
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: ST_TO_ADDR
// end ;
76068: LD_VAR 0 1
76072: RET
// export function PrepareApeman ( agressivity ) ; begin
76073: LD_INT 0
76075: PPUSH
// uc_side := 0 ;
76076: LD_ADDR_OWVAR 20
76080: PUSH
76081: LD_INT 0
76083: ST_TO_ADDR
// uc_nation := 0 ;
76084: LD_ADDR_OWVAR 21
76088: PUSH
76089: LD_INT 0
76091: ST_TO_ADDR
// hc_sex := sex_male ;
76092: LD_ADDR_OWVAR 27
76096: PUSH
76097: LD_INT 1
76099: ST_TO_ADDR
// hc_class := class_apeman ;
76100: LD_ADDR_OWVAR 28
76104: PUSH
76105: LD_INT 12
76107: ST_TO_ADDR
// hc_gallery :=  ;
76108: LD_ADDR_OWVAR 33
76112: PUSH
76113: LD_STRING 
76115: ST_TO_ADDR
// hc_name :=  ;
76116: LD_ADDR_OWVAR 26
76120: PUSH
76121: LD_STRING 
76123: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76124: LD_ADDR_OWVAR 29
76128: PUSH
76129: LD_INT 12
76131: PUSH
76132: LD_INT 12
76134: PUSH
76135: EMPTY
76136: LIST
76137: LIST
76138: ST_TO_ADDR
// if agressivity = 0 then
76139: LD_VAR 0 1
76143: PUSH
76144: LD_INT 0
76146: EQUAL
76147: IFFALSE 76159
// hc_agressivity := 0 else
76149: LD_ADDR_OWVAR 35
76153: PUSH
76154: LD_INT 0
76156: ST_TO_ADDR
76157: GO 76180
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76159: LD_ADDR_OWVAR 35
76163: PUSH
76164: LD_VAR 0 1
76168: NEG
76169: PPUSH
76170: LD_VAR 0 1
76174: PPUSH
76175: CALL_OW 12
76179: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76180: LD_ADDR_OWVAR 31
76184: PUSH
76185: LD_INT 0
76187: PPUSH
76188: LD_INT 3
76190: PPUSH
76191: CALL_OW 12
76195: PUSH
76196: LD_INT 0
76198: PPUSH
76199: LD_INT 3
76201: PPUSH
76202: CALL_OW 12
76206: PUSH
76207: LD_INT 0
76209: PUSH
76210: LD_INT 0
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: ST_TO_ADDR
// end ;
76219: LD_VAR 0 2
76223: RET
// export function PrepareTiger ( agressivity ) ; begin
76224: LD_INT 0
76226: PPUSH
// uc_side := 0 ;
76227: LD_ADDR_OWVAR 20
76231: PUSH
76232: LD_INT 0
76234: ST_TO_ADDR
// uc_nation := 0 ;
76235: LD_ADDR_OWVAR 21
76239: PUSH
76240: LD_INT 0
76242: ST_TO_ADDR
// InitHc ;
76243: CALL_OW 19
// hc_class := class_tiger ;
76247: LD_ADDR_OWVAR 28
76251: PUSH
76252: LD_INT 14
76254: ST_TO_ADDR
// hc_gallery :=  ;
76255: LD_ADDR_OWVAR 33
76259: PUSH
76260: LD_STRING 
76262: ST_TO_ADDR
// hc_name :=  ;
76263: LD_ADDR_OWVAR 26
76267: PUSH
76268: LD_STRING 
76270: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76271: LD_ADDR_OWVAR 35
76275: PUSH
76276: LD_VAR 0 1
76280: NEG
76281: PPUSH
76282: LD_VAR 0 1
76286: PPUSH
76287: CALL_OW 12
76291: ST_TO_ADDR
// end ;
76292: LD_VAR 0 2
76296: RET
// export function PrepareEnchidna ( ) ; begin
76297: LD_INT 0
76299: PPUSH
// uc_side := 0 ;
76300: LD_ADDR_OWVAR 20
76304: PUSH
76305: LD_INT 0
76307: ST_TO_ADDR
// uc_nation := 0 ;
76308: LD_ADDR_OWVAR 21
76312: PUSH
76313: LD_INT 0
76315: ST_TO_ADDR
// InitHc ;
76316: CALL_OW 19
// hc_class := class_baggie ;
76320: LD_ADDR_OWVAR 28
76324: PUSH
76325: LD_INT 13
76327: ST_TO_ADDR
// hc_gallery :=  ;
76328: LD_ADDR_OWVAR 33
76332: PUSH
76333: LD_STRING 
76335: ST_TO_ADDR
// hc_name :=  ;
76336: LD_ADDR_OWVAR 26
76340: PUSH
76341: LD_STRING 
76343: ST_TO_ADDR
// end ;
76344: LD_VAR 0 1
76348: RET
// export function PrepareFrog ( ) ; begin
76349: LD_INT 0
76351: PPUSH
// uc_side := 0 ;
76352: LD_ADDR_OWVAR 20
76356: PUSH
76357: LD_INT 0
76359: ST_TO_ADDR
// uc_nation := 0 ;
76360: LD_ADDR_OWVAR 21
76364: PUSH
76365: LD_INT 0
76367: ST_TO_ADDR
// InitHc ;
76368: CALL_OW 19
// hc_class := class_frog ;
76372: LD_ADDR_OWVAR 28
76376: PUSH
76377: LD_INT 19
76379: ST_TO_ADDR
// hc_gallery :=  ;
76380: LD_ADDR_OWVAR 33
76384: PUSH
76385: LD_STRING 
76387: ST_TO_ADDR
// hc_name :=  ;
76388: LD_ADDR_OWVAR 26
76392: PUSH
76393: LD_STRING 
76395: ST_TO_ADDR
// end ;
76396: LD_VAR 0 1
76400: RET
// export function PrepareFish ( ) ; begin
76401: LD_INT 0
76403: PPUSH
// uc_side := 0 ;
76404: LD_ADDR_OWVAR 20
76408: PUSH
76409: LD_INT 0
76411: ST_TO_ADDR
// uc_nation := 0 ;
76412: LD_ADDR_OWVAR 21
76416: PUSH
76417: LD_INT 0
76419: ST_TO_ADDR
// InitHc ;
76420: CALL_OW 19
// hc_class := class_fish ;
76424: LD_ADDR_OWVAR 28
76428: PUSH
76429: LD_INT 20
76431: ST_TO_ADDR
// hc_gallery :=  ;
76432: LD_ADDR_OWVAR 33
76436: PUSH
76437: LD_STRING 
76439: ST_TO_ADDR
// hc_name :=  ;
76440: LD_ADDR_OWVAR 26
76444: PUSH
76445: LD_STRING 
76447: ST_TO_ADDR
// end ;
76448: LD_VAR 0 1
76452: RET
// export function PrepareBird ( ) ; begin
76453: LD_INT 0
76455: PPUSH
// uc_side := 0 ;
76456: LD_ADDR_OWVAR 20
76460: PUSH
76461: LD_INT 0
76463: ST_TO_ADDR
// uc_nation := 0 ;
76464: LD_ADDR_OWVAR 21
76468: PUSH
76469: LD_INT 0
76471: ST_TO_ADDR
// InitHc ;
76472: CALL_OW 19
// hc_class := class_phororhacos ;
76476: LD_ADDR_OWVAR 28
76480: PUSH
76481: LD_INT 18
76483: ST_TO_ADDR
// hc_gallery :=  ;
76484: LD_ADDR_OWVAR 33
76488: PUSH
76489: LD_STRING 
76491: ST_TO_ADDR
// hc_name :=  ;
76492: LD_ADDR_OWVAR 26
76496: PUSH
76497: LD_STRING 
76499: ST_TO_ADDR
// end ;
76500: LD_VAR 0 1
76504: RET
// export function PrepareHorse ( ) ; begin
76505: LD_INT 0
76507: PPUSH
// uc_side := 0 ;
76508: LD_ADDR_OWVAR 20
76512: PUSH
76513: LD_INT 0
76515: ST_TO_ADDR
// uc_nation := 0 ;
76516: LD_ADDR_OWVAR 21
76520: PUSH
76521: LD_INT 0
76523: ST_TO_ADDR
// InitHc ;
76524: CALL_OW 19
// hc_class := class_horse ;
76528: LD_ADDR_OWVAR 28
76532: PUSH
76533: LD_INT 21
76535: ST_TO_ADDR
// hc_gallery :=  ;
76536: LD_ADDR_OWVAR 33
76540: PUSH
76541: LD_STRING 
76543: ST_TO_ADDR
// hc_name :=  ;
76544: LD_ADDR_OWVAR 26
76548: PUSH
76549: LD_STRING 
76551: ST_TO_ADDR
// end ;
76552: LD_VAR 0 1
76556: RET
// export function PrepareMastodont ( ) ; begin
76557: LD_INT 0
76559: PPUSH
// uc_side := 0 ;
76560: LD_ADDR_OWVAR 20
76564: PUSH
76565: LD_INT 0
76567: ST_TO_ADDR
// uc_nation := 0 ;
76568: LD_ADDR_OWVAR 21
76572: PUSH
76573: LD_INT 0
76575: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76576: LD_ADDR_OWVAR 37
76580: PUSH
76581: LD_INT 31
76583: ST_TO_ADDR
// vc_control := control_rider ;
76584: LD_ADDR_OWVAR 38
76588: PUSH
76589: LD_INT 4
76591: ST_TO_ADDR
// end ;
76592: LD_VAR 0 1
76596: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76597: LD_INT 0
76599: PPUSH
76600: PPUSH
76601: PPUSH
// uc_side = 0 ;
76602: LD_ADDR_OWVAR 20
76606: PUSH
76607: LD_INT 0
76609: ST_TO_ADDR
// uc_nation = 0 ;
76610: LD_ADDR_OWVAR 21
76614: PUSH
76615: LD_INT 0
76617: ST_TO_ADDR
// InitHc_All ( ) ;
76618: CALL_OW 584
// InitVc ;
76622: CALL_OW 20
// if mastodonts then
76626: LD_VAR 0 6
76630: IFFALSE 76697
// for i = 1 to mastodonts do
76632: LD_ADDR_VAR 0 11
76636: PUSH
76637: DOUBLE
76638: LD_INT 1
76640: DEC
76641: ST_TO_ADDR
76642: LD_VAR 0 6
76646: PUSH
76647: FOR_TO
76648: IFFALSE 76695
// begin vc_chassis := 31 ;
76650: LD_ADDR_OWVAR 37
76654: PUSH
76655: LD_INT 31
76657: ST_TO_ADDR
// vc_control := control_rider ;
76658: LD_ADDR_OWVAR 38
76662: PUSH
76663: LD_INT 4
76665: ST_TO_ADDR
// animal := CreateVehicle ;
76666: LD_ADDR_VAR 0 12
76670: PUSH
76671: CALL_OW 45
76675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76676: LD_VAR 0 12
76680: PPUSH
76681: LD_VAR 0 8
76685: PPUSH
76686: LD_INT 0
76688: PPUSH
76689: CALL 78839 0 3
// end ;
76693: GO 76647
76695: POP
76696: POP
// if horses then
76697: LD_VAR 0 5
76701: IFFALSE 76768
// for i = 1 to horses do
76703: LD_ADDR_VAR 0 11
76707: PUSH
76708: DOUBLE
76709: LD_INT 1
76711: DEC
76712: ST_TO_ADDR
76713: LD_VAR 0 5
76717: PUSH
76718: FOR_TO
76719: IFFALSE 76766
// begin hc_class := 21 ;
76721: LD_ADDR_OWVAR 28
76725: PUSH
76726: LD_INT 21
76728: ST_TO_ADDR
// hc_gallery :=  ;
76729: LD_ADDR_OWVAR 33
76733: PUSH
76734: LD_STRING 
76736: ST_TO_ADDR
// animal := CreateHuman ;
76737: LD_ADDR_VAR 0 12
76741: PUSH
76742: CALL_OW 44
76746: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76747: LD_VAR 0 12
76751: PPUSH
76752: LD_VAR 0 8
76756: PPUSH
76757: LD_INT 0
76759: PPUSH
76760: CALL 78839 0 3
// end ;
76764: GO 76718
76766: POP
76767: POP
// if birds then
76768: LD_VAR 0 1
76772: IFFALSE 76839
// for i = 1 to birds do
76774: LD_ADDR_VAR 0 11
76778: PUSH
76779: DOUBLE
76780: LD_INT 1
76782: DEC
76783: ST_TO_ADDR
76784: LD_VAR 0 1
76788: PUSH
76789: FOR_TO
76790: IFFALSE 76837
// begin hc_class := 18 ;
76792: LD_ADDR_OWVAR 28
76796: PUSH
76797: LD_INT 18
76799: ST_TO_ADDR
// hc_gallery =  ;
76800: LD_ADDR_OWVAR 33
76804: PUSH
76805: LD_STRING 
76807: ST_TO_ADDR
// animal := CreateHuman ;
76808: LD_ADDR_VAR 0 12
76812: PUSH
76813: CALL_OW 44
76817: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76818: LD_VAR 0 12
76822: PPUSH
76823: LD_VAR 0 8
76827: PPUSH
76828: LD_INT 0
76830: PPUSH
76831: CALL 78839 0 3
// end ;
76835: GO 76789
76837: POP
76838: POP
// if tigers then
76839: LD_VAR 0 2
76843: IFFALSE 76927
// for i = 1 to tigers do
76845: LD_ADDR_VAR 0 11
76849: PUSH
76850: DOUBLE
76851: LD_INT 1
76853: DEC
76854: ST_TO_ADDR
76855: LD_VAR 0 2
76859: PUSH
76860: FOR_TO
76861: IFFALSE 76925
// begin hc_class = class_tiger ;
76863: LD_ADDR_OWVAR 28
76867: PUSH
76868: LD_INT 14
76870: ST_TO_ADDR
// hc_gallery =  ;
76871: LD_ADDR_OWVAR 33
76875: PUSH
76876: LD_STRING 
76878: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76879: LD_ADDR_OWVAR 35
76883: PUSH
76884: LD_INT 7
76886: NEG
76887: PPUSH
76888: LD_INT 7
76890: PPUSH
76891: CALL_OW 12
76895: ST_TO_ADDR
// animal := CreateHuman ;
76896: LD_ADDR_VAR 0 12
76900: PUSH
76901: CALL_OW 44
76905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76906: LD_VAR 0 12
76910: PPUSH
76911: LD_VAR 0 8
76915: PPUSH
76916: LD_INT 0
76918: PPUSH
76919: CALL 78839 0 3
// end ;
76923: GO 76860
76925: POP
76926: POP
// if apemans then
76927: LD_VAR 0 3
76931: IFFALSE 77054
// for i = 1 to apemans do
76933: LD_ADDR_VAR 0 11
76937: PUSH
76938: DOUBLE
76939: LD_INT 1
76941: DEC
76942: ST_TO_ADDR
76943: LD_VAR 0 3
76947: PUSH
76948: FOR_TO
76949: IFFALSE 77052
// begin hc_class = class_apeman ;
76951: LD_ADDR_OWVAR 28
76955: PUSH
76956: LD_INT 12
76958: ST_TO_ADDR
// hc_gallery =  ;
76959: LD_ADDR_OWVAR 33
76963: PUSH
76964: LD_STRING 
76966: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76967: LD_ADDR_OWVAR 35
76971: PUSH
76972: LD_INT 2
76974: NEG
76975: PPUSH
76976: LD_INT 2
76978: PPUSH
76979: CALL_OW 12
76983: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76984: LD_ADDR_OWVAR 31
76988: PUSH
76989: LD_INT 1
76991: PPUSH
76992: LD_INT 3
76994: PPUSH
76995: CALL_OW 12
76999: PUSH
77000: LD_INT 1
77002: PPUSH
77003: LD_INT 3
77005: PPUSH
77006: CALL_OW 12
77010: PUSH
77011: LD_INT 0
77013: PUSH
77014: LD_INT 0
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: ST_TO_ADDR
// animal := CreateHuman ;
77023: LD_ADDR_VAR 0 12
77027: PUSH
77028: CALL_OW 44
77032: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77033: LD_VAR 0 12
77037: PPUSH
77038: LD_VAR 0 8
77042: PPUSH
77043: LD_INT 0
77045: PPUSH
77046: CALL 78839 0 3
// end ;
77050: GO 76948
77052: POP
77053: POP
// if enchidnas then
77054: LD_VAR 0 4
77058: IFFALSE 77125
// for i = 1 to enchidnas do
77060: LD_ADDR_VAR 0 11
77064: PUSH
77065: DOUBLE
77066: LD_INT 1
77068: DEC
77069: ST_TO_ADDR
77070: LD_VAR 0 4
77074: PUSH
77075: FOR_TO
77076: IFFALSE 77123
// begin hc_class = 13 ;
77078: LD_ADDR_OWVAR 28
77082: PUSH
77083: LD_INT 13
77085: ST_TO_ADDR
// hc_gallery =  ;
77086: LD_ADDR_OWVAR 33
77090: PUSH
77091: LD_STRING 
77093: ST_TO_ADDR
// animal := CreateHuman ;
77094: LD_ADDR_VAR 0 12
77098: PUSH
77099: CALL_OW 44
77103: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77104: LD_VAR 0 12
77108: PPUSH
77109: LD_VAR 0 8
77113: PPUSH
77114: LD_INT 0
77116: PPUSH
77117: CALL 78839 0 3
// end ;
77121: GO 77075
77123: POP
77124: POP
// if fishes then
77125: LD_VAR 0 7
77129: IFFALSE 77196
// for i = 1 to fishes do
77131: LD_ADDR_VAR 0 11
77135: PUSH
77136: DOUBLE
77137: LD_INT 1
77139: DEC
77140: ST_TO_ADDR
77141: LD_VAR 0 7
77145: PUSH
77146: FOR_TO
77147: IFFALSE 77194
// begin hc_class = 20 ;
77149: LD_ADDR_OWVAR 28
77153: PUSH
77154: LD_INT 20
77156: ST_TO_ADDR
// hc_gallery =  ;
77157: LD_ADDR_OWVAR 33
77161: PUSH
77162: LD_STRING 
77164: ST_TO_ADDR
// animal := CreateHuman ;
77165: LD_ADDR_VAR 0 12
77169: PUSH
77170: CALL_OW 44
77174: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77175: LD_VAR 0 12
77179: PPUSH
77180: LD_VAR 0 9
77184: PPUSH
77185: LD_INT 0
77187: PPUSH
77188: CALL 78839 0 3
// end ;
77192: GO 77146
77194: POP
77195: POP
// end ;
77196: LD_VAR 0 10
77200: RET
// export function WantHeal ( sci , unit ) ; begin
77201: LD_INT 0
77203: PPUSH
// if GetTaskList ( sci ) > 0 then
77204: LD_VAR 0 1
77208: PPUSH
77209: CALL_OW 437
77213: PUSH
77214: LD_INT 0
77216: GREATER
77217: IFFALSE 77289
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77219: LD_VAR 0 1
77223: PPUSH
77224: CALL_OW 437
77228: PUSH
77229: LD_INT 1
77231: ARRAY
77232: PUSH
77233: LD_INT 1
77235: ARRAY
77236: PUSH
77237: LD_STRING l
77239: EQUAL
77240: IFFALSE 77267
77242: PUSH
77243: LD_VAR 0 1
77247: PPUSH
77248: CALL_OW 437
77252: PUSH
77253: LD_INT 1
77255: ARRAY
77256: PUSH
77257: LD_INT 4
77259: ARRAY
77260: PUSH
77261: LD_VAR 0 2
77265: EQUAL
77266: AND
77267: IFFALSE 77279
// result := true else
77269: LD_ADDR_VAR 0 3
77273: PUSH
77274: LD_INT 1
77276: ST_TO_ADDR
77277: GO 77287
// result := false ;
77279: LD_ADDR_VAR 0 3
77283: PUSH
77284: LD_INT 0
77286: ST_TO_ADDR
// end else
77287: GO 77297
// result := false ;
77289: LD_ADDR_VAR 0 3
77293: PUSH
77294: LD_INT 0
77296: ST_TO_ADDR
// end ;
77297: LD_VAR 0 3
77301: RET
// export function HealTarget ( sci ) ; begin
77302: LD_INT 0
77304: PPUSH
// if not sci then
77305: LD_VAR 0 1
77309: NOT
77310: IFFALSE 77314
// exit ;
77312: GO 77379
// result := 0 ;
77314: LD_ADDR_VAR 0 2
77318: PUSH
77319: LD_INT 0
77321: ST_TO_ADDR
// if GetTaskList ( sci ) then
77322: LD_VAR 0 1
77326: PPUSH
77327: CALL_OW 437
77331: IFFALSE 77379
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77333: LD_VAR 0 1
77337: PPUSH
77338: CALL_OW 437
77342: PUSH
77343: LD_INT 1
77345: ARRAY
77346: PUSH
77347: LD_INT 1
77349: ARRAY
77350: PUSH
77351: LD_STRING l
77353: EQUAL
77354: IFFALSE 77379
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77356: LD_ADDR_VAR 0 2
77360: PUSH
77361: LD_VAR 0 1
77365: PPUSH
77366: CALL_OW 437
77370: PUSH
77371: LD_INT 1
77373: ARRAY
77374: PUSH
77375: LD_INT 4
77377: ARRAY
77378: ST_TO_ADDR
// end ;
77379: LD_VAR 0 2
77383: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77384: LD_INT 0
77386: PPUSH
77387: PPUSH
77388: PPUSH
77389: PPUSH
// if not base_units then
77390: LD_VAR 0 1
77394: NOT
77395: IFFALSE 77399
// exit ;
77397: GO 77486
// result := false ;
77399: LD_ADDR_VAR 0 2
77403: PUSH
77404: LD_INT 0
77406: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77407: LD_ADDR_VAR 0 5
77411: PUSH
77412: LD_VAR 0 1
77416: PPUSH
77417: LD_INT 21
77419: PUSH
77420: LD_INT 3
77422: PUSH
77423: EMPTY
77424: LIST
77425: LIST
77426: PPUSH
77427: CALL_OW 72
77431: ST_TO_ADDR
// if not tmp then
77432: LD_VAR 0 5
77436: NOT
77437: IFFALSE 77441
// exit ;
77439: GO 77486
// for i in tmp do
77441: LD_ADDR_VAR 0 3
77445: PUSH
77446: LD_VAR 0 5
77450: PUSH
77451: FOR_IN
77452: IFFALSE 77484
// begin result := EnemyInRange ( i , 22 ) ;
77454: LD_ADDR_VAR 0 2
77458: PUSH
77459: LD_VAR 0 3
77463: PPUSH
77464: LD_INT 22
77466: PPUSH
77467: CALL 74911 0 2
77471: ST_TO_ADDR
// if result then
77472: LD_VAR 0 2
77476: IFFALSE 77482
// exit ;
77478: POP
77479: POP
77480: GO 77486
// end ;
77482: GO 77451
77484: POP
77485: POP
// end ;
77486: LD_VAR 0 2
77490: RET
// export function FilterByTag ( units , tag ) ; begin
77491: LD_INT 0
77493: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77494: LD_ADDR_VAR 0 3
77498: PUSH
77499: LD_VAR 0 1
77503: PPUSH
77504: LD_INT 120
77506: PUSH
77507: LD_VAR 0 2
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: PPUSH
77516: CALL_OW 72
77520: ST_TO_ADDR
// end ;
77521: LD_VAR 0 3
77525: RET
// export function IsDriver ( un ) ; begin
77526: LD_INT 0
77528: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77529: LD_ADDR_VAR 0 2
77533: PUSH
77534: LD_VAR 0 1
77538: PUSH
77539: LD_INT 55
77541: PUSH
77542: EMPTY
77543: LIST
77544: PPUSH
77545: CALL_OW 69
77549: IN
77550: ST_TO_ADDR
// end ;
77551: LD_VAR 0 2
77555: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77556: LD_INT 0
77558: PPUSH
77559: PPUSH
// list := [ ] ;
77560: LD_ADDR_VAR 0 5
77564: PUSH
77565: EMPTY
77566: ST_TO_ADDR
// case d of 0 :
77567: LD_VAR 0 3
77571: PUSH
77572: LD_INT 0
77574: DOUBLE
77575: EQUAL
77576: IFTRUE 77580
77578: GO 77713
77580: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77581: LD_ADDR_VAR 0 5
77585: PUSH
77586: LD_VAR 0 1
77590: PUSH
77591: LD_INT 4
77593: MINUS
77594: PUSH
77595: LD_VAR 0 2
77599: PUSH
77600: LD_INT 4
77602: MINUS
77603: PUSH
77604: LD_INT 2
77606: PUSH
77607: EMPTY
77608: LIST
77609: LIST
77610: LIST
77611: PUSH
77612: LD_VAR 0 1
77616: PUSH
77617: LD_INT 3
77619: MINUS
77620: PUSH
77621: LD_VAR 0 2
77625: PUSH
77626: LD_INT 1
77628: PUSH
77629: EMPTY
77630: LIST
77631: LIST
77632: LIST
77633: PUSH
77634: LD_VAR 0 1
77638: PUSH
77639: LD_INT 4
77641: PLUS
77642: PUSH
77643: LD_VAR 0 2
77647: PUSH
77648: LD_INT 4
77650: PUSH
77651: EMPTY
77652: LIST
77653: LIST
77654: LIST
77655: PUSH
77656: LD_VAR 0 1
77660: PUSH
77661: LD_INT 3
77663: PLUS
77664: PUSH
77665: LD_VAR 0 2
77669: PUSH
77670: LD_INT 3
77672: PLUS
77673: PUSH
77674: LD_INT 5
77676: PUSH
77677: EMPTY
77678: LIST
77679: LIST
77680: LIST
77681: PUSH
77682: LD_VAR 0 1
77686: PUSH
77687: LD_VAR 0 2
77691: PUSH
77692: LD_INT 4
77694: PLUS
77695: PUSH
77696: LD_INT 0
77698: PUSH
77699: EMPTY
77700: LIST
77701: LIST
77702: LIST
77703: PUSH
77704: EMPTY
77705: LIST
77706: LIST
77707: LIST
77708: LIST
77709: LIST
77710: ST_TO_ADDR
// end ; 1 :
77711: GO 78411
77713: LD_INT 1
77715: DOUBLE
77716: EQUAL
77717: IFTRUE 77721
77719: GO 77854
77721: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77722: LD_ADDR_VAR 0 5
77726: PUSH
77727: LD_VAR 0 1
77731: PUSH
77732: LD_VAR 0 2
77736: PUSH
77737: LD_INT 4
77739: MINUS
77740: PUSH
77741: LD_INT 3
77743: PUSH
77744: EMPTY
77745: LIST
77746: LIST
77747: LIST
77748: PUSH
77749: LD_VAR 0 1
77753: PUSH
77754: LD_INT 3
77756: MINUS
77757: PUSH
77758: LD_VAR 0 2
77762: PUSH
77763: LD_INT 3
77765: MINUS
77766: PUSH
77767: LD_INT 2
77769: PUSH
77770: EMPTY
77771: LIST
77772: LIST
77773: LIST
77774: PUSH
77775: LD_VAR 0 1
77779: PUSH
77780: LD_INT 4
77782: MINUS
77783: PUSH
77784: LD_VAR 0 2
77788: PUSH
77789: LD_INT 1
77791: PUSH
77792: EMPTY
77793: LIST
77794: LIST
77795: LIST
77796: PUSH
77797: LD_VAR 0 1
77801: PUSH
77802: LD_VAR 0 2
77806: PUSH
77807: LD_INT 3
77809: PLUS
77810: PUSH
77811: LD_INT 0
77813: PUSH
77814: EMPTY
77815: LIST
77816: LIST
77817: LIST
77818: PUSH
77819: LD_VAR 0 1
77823: PUSH
77824: LD_INT 4
77826: PLUS
77827: PUSH
77828: LD_VAR 0 2
77832: PUSH
77833: LD_INT 4
77835: PLUS
77836: PUSH
77837: LD_INT 5
77839: PUSH
77840: EMPTY
77841: LIST
77842: LIST
77843: LIST
77844: PUSH
77845: EMPTY
77846: LIST
77847: LIST
77848: LIST
77849: LIST
77850: LIST
77851: ST_TO_ADDR
// end ; 2 :
77852: GO 78411
77854: LD_INT 2
77856: DOUBLE
77857: EQUAL
77858: IFTRUE 77862
77860: GO 77991
77862: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77863: LD_ADDR_VAR 0 5
77867: PUSH
77868: LD_VAR 0 1
77872: PUSH
77873: LD_VAR 0 2
77877: PUSH
77878: LD_INT 3
77880: MINUS
77881: PUSH
77882: LD_INT 3
77884: PUSH
77885: EMPTY
77886: LIST
77887: LIST
77888: LIST
77889: PUSH
77890: LD_VAR 0 1
77894: PUSH
77895: LD_INT 4
77897: PLUS
77898: PUSH
77899: LD_VAR 0 2
77903: PUSH
77904: LD_INT 4
77906: PUSH
77907: EMPTY
77908: LIST
77909: LIST
77910: LIST
77911: PUSH
77912: LD_VAR 0 1
77916: PUSH
77917: LD_VAR 0 2
77921: PUSH
77922: LD_INT 4
77924: PLUS
77925: PUSH
77926: LD_INT 0
77928: PUSH
77929: EMPTY
77930: LIST
77931: LIST
77932: LIST
77933: PUSH
77934: LD_VAR 0 1
77938: PUSH
77939: LD_INT 3
77941: MINUS
77942: PUSH
77943: LD_VAR 0 2
77947: PUSH
77948: LD_INT 1
77950: PUSH
77951: EMPTY
77952: LIST
77953: LIST
77954: LIST
77955: PUSH
77956: LD_VAR 0 1
77960: PUSH
77961: LD_INT 4
77963: MINUS
77964: PUSH
77965: LD_VAR 0 2
77969: PUSH
77970: LD_INT 4
77972: MINUS
77973: PUSH
77974: LD_INT 2
77976: PUSH
77977: EMPTY
77978: LIST
77979: LIST
77980: LIST
77981: PUSH
77982: EMPTY
77983: LIST
77984: LIST
77985: LIST
77986: LIST
77987: LIST
77988: ST_TO_ADDR
// end ; 3 :
77989: GO 78411
77991: LD_INT 3
77993: DOUBLE
77994: EQUAL
77995: IFTRUE 77999
77997: GO 78132
77999: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78000: LD_ADDR_VAR 0 5
78004: PUSH
78005: LD_VAR 0 1
78009: PUSH
78010: LD_INT 3
78012: PLUS
78013: PUSH
78014: LD_VAR 0 2
78018: PUSH
78019: LD_INT 4
78021: PUSH
78022: EMPTY
78023: LIST
78024: LIST
78025: LIST
78026: PUSH
78027: LD_VAR 0 1
78031: PUSH
78032: LD_INT 4
78034: PLUS
78035: PUSH
78036: LD_VAR 0 2
78040: PUSH
78041: LD_INT 4
78043: PLUS
78044: PUSH
78045: LD_INT 5
78047: PUSH
78048: EMPTY
78049: LIST
78050: LIST
78051: LIST
78052: PUSH
78053: LD_VAR 0 1
78057: PUSH
78058: LD_INT 4
78060: MINUS
78061: PUSH
78062: LD_VAR 0 2
78066: PUSH
78067: LD_INT 1
78069: PUSH
78070: EMPTY
78071: LIST
78072: LIST
78073: LIST
78074: PUSH
78075: LD_VAR 0 1
78079: PUSH
78080: LD_VAR 0 2
78084: PUSH
78085: LD_INT 4
78087: MINUS
78088: PUSH
78089: LD_INT 3
78091: PUSH
78092: EMPTY
78093: LIST
78094: LIST
78095: LIST
78096: PUSH
78097: LD_VAR 0 1
78101: PUSH
78102: LD_INT 3
78104: MINUS
78105: PUSH
78106: LD_VAR 0 2
78110: PUSH
78111: LD_INT 3
78113: MINUS
78114: PUSH
78115: LD_INT 2
78117: PUSH
78118: EMPTY
78119: LIST
78120: LIST
78121: LIST
78122: PUSH
78123: EMPTY
78124: LIST
78125: LIST
78126: LIST
78127: LIST
78128: LIST
78129: ST_TO_ADDR
// end ; 4 :
78130: GO 78411
78132: LD_INT 4
78134: DOUBLE
78135: EQUAL
78136: IFTRUE 78140
78138: GO 78273
78140: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78141: LD_ADDR_VAR 0 5
78145: PUSH
78146: LD_VAR 0 1
78150: PUSH
78151: LD_VAR 0 2
78155: PUSH
78156: LD_INT 4
78158: PLUS
78159: PUSH
78160: LD_INT 0
78162: PUSH
78163: EMPTY
78164: LIST
78165: LIST
78166: LIST
78167: PUSH
78168: LD_VAR 0 1
78172: PUSH
78173: LD_INT 3
78175: PLUS
78176: PUSH
78177: LD_VAR 0 2
78181: PUSH
78182: LD_INT 3
78184: PLUS
78185: PUSH
78186: LD_INT 5
78188: PUSH
78189: EMPTY
78190: LIST
78191: LIST
78192: LIST
78193: PUSH
78194: LD_VAR 0 1
78198: PUSH
78199: LD_INT 4
78201: PLUS
78202: PUSH
78203: LD_VAR 0 2
78207: PUSH
78208: LD_INT 4
78210: PUSH
78211: EMPTY
78212: LIST
78213: LIST
78214: LIST
78215: PUSH
78216: LD_VAR 0 1
78220: PUSH
78221: LD_VAR 0 2
78225: PUSH
78226: LD_INT 3
78228: MINUS
78229: PUSH
78230: LD_INT 3
78232: PUSH
78233: EMPTY
78234: LIST
78235: LIST
78236: LIST
78237: PUSH
78238: LD_VAR 0 1
78242: PUSH
78243: LD_INT 4
78245: MINUS
78246: PUSH
78247: LD_VAR 0 2
78251: PUSH
78252: LD_INT 4
78254: MINUS
78255: PUSH
78256: LD_INT 2
78258: PUSH
78259: EMPTY
78260: LIST
78261: LIST
78262: LIST
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: LIST
78268: LIST
78269: LIST
78270: ST_TO_ADDR
// end ; 5 :
78271: GO 78411
78273: LD_INT 5
78275: DOUBLE
78276: EQUAL
78277: IFTRUE 78281
78279: GO 78410
78281: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78282: LD_ADDR_VAR 0 5
78286: PUSH
78287: LD_VAR 0 1
78291: PUSH
78292: LD_INT 4
78294: MINUS
78295: PUSH
78296: LD_VAR 0 2
78300: PUSH
78301: LD_INT 1
78303: PUSH
78304: EMPTY
78305: LIST
78306: LIST
78307: LIST
78308: PUSH
78309: LD_VAR 0 1
78313: PUSH
78314: LD_VAR 0 2
78318: PUSH
78319: LD_INT 4
78321: MINUS
78322: PUSH
78323: LD_INT 3
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: LIST
78330: PUSH
78331: LD_VAR 0 1
78335: PUSH
78336: LD_INT 4
78338: PLUS
78339: PUSH
78340: LD_VAR 0 2
78344: PUSH
78345: LD_INT 4
78347: PLUS
78348: PUSH
78349: LD_INT 5
78351: PUSH
78352: EMPTY
78353: LIST
78354: LIST
78355: LIST
78356: PUSH
78357: LD_VAR 0 1
78361: PUSH
78362: LD_INT 3
78364: PLUS
78365: PUSH
78366: LD_VAR 0 2
78370: PUSH
78371: LD_INT 4
78373: PUSH
78374: EMPTY
78375: LIST
78376: LIST
78377: LIST
78378: PUSH
78379: LD_VAR 0 1
78383: PUSH
78384: LD_VAR 0 2
78388: PUSH
78389: LD_INT 3
78391: PLUS
78392: PUSH
78393: LD_INT 0
78395: PUSH
78396: EMPTY
78397: LIST
78398: LIST
78399: LIST
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: LIST
78405: LIST
78406: LIST
78407: ST_TO_ADDR
// end ; end ;
78408: GO 78411
78410: POP
// result := list ;
78411: LD_ADDR_VAR 0 4
78415: PUSH
78416: LD_VAR 0 5
78420: ST_TO_ADDR
// end ;
78421: LD_VAR 0 4
78425: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78426: LD_INT 0
78428: PPUSH
78429: PPUSH
78430: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78431: LD_VAR 0 1
78435: NOT
78436: IFTRUE 78464
78438: PUSH
78439: LD_VAR 0 2
78443: PUSH
78444: LD_INT 1
78446: PUSH
78447: LD_INT 2
78449: PUSH
78450: LD_INT 3
78452: PUSH
78453: LD_INT 4
78455: PUSH
78456: EMPTY
78457: LIST
78458: LIST
78459: LIST
78460: LIST
78461: IN
78462: NOT
78463: OR
78464: IFFALSE 78468
// exit ;
78466: GO 78551
// tmp := [ ] ;
78468: LD_ADDR_VAR 0 5
78472: PUSH
78473: EMPTY
78474: ST_TO_ADDR
// for i in units do
78475: LD_ADDR_VAR 0 4
78479: PUSH
78480: LD_VAR 0 1
78484: PUSH
78485: FOR_IN
78486: IFFALSE 78520
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78488: LD_ADDR_VAR 0 5
78492: PUSH
78493: LD_VAR 0 5
78497: PPUSH
78498: LD_VAR 0 4
78502: PPUSH
78503: LD_VAR 0 2
78507: PPUSH
78508: CALL_OW 259
78512: PPUSH
78513: CALL 79946 0 2
78517: ST_TO_ADDR
78518: GO 78485
78520: POP
78521: POP
// if not tmp then
78522: LD_VAR 0 5
78526: NOT
78527: IFFALSE 78531
// exit ;
78529: GO 78551
// result := SortListByListDesc ( units , tmp ) ;
78531: LD_ADDR_VAR 0 3
78535: PUSH
78536: LD_VAR 0 1
78540: PPUSH
78541: LD_VAR 0 5
78545: PPUSH
78546: CALL_OW 77
78550: ST_TO_ADDR
// end ;
78551: LD_VAR 0 3
78555: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78556: LD_INT 0
78558: PPUSH
78559: PPUSH
78560: PPUSH
// result := false ;
78561: LD_ADDR_VAR 0 3
78565: PUSH
78566: LD_INT 0
78568: ST_TO_ADDR
// if not building then
78569: LD_VAR 0 2
78573: NOT
78574: IFFALSE 78578
// exit ;
78576: GO 78722
// x := GetX ( building ) ;
78578: LD_ADDR_VAR 0 4
78582: PUSH
78583: LD_VAR 0 2
78587: PPUSH
78588: CALL_OW 250
78592: ST_TO_ADDR
// y := GetY ( building ) ;
78593: LD_ADDR_VAR 0 5
78597: PUSH
78598: LD_VAR 0 2
78602: PPUSH
78603: CALL_OW 251
78607: ST_TO_ADDR
// if not x or not y then
78608: LD_VAR 0 4
78612: NOT
78613: IFTRUE 78622
78615: PUSH
78616: LD_VAR 0 5
78620: NOT
78621: OR
78622: IFFALSE 78626
// exit ;
78624: GO 78722
// if GetTaskList ( unit ) then
78626: LD_VAR 0 1
78630: PPUSH
78631: CALL_OW 437
78635: IFFALSE 78722
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78637: LD_STRING e
78639: PUSH
78640: LD_VAR 0 1
78644: PPUSH
78645: CALL_OW 437
78649: PUSH
78650: LD_INT 1
78652: ARRAY
78653: PUSH
78654: LD_INT 1
78656: ARRAY
78657: EQUAL
78658: IFFALSE 78685
78660: PUSH
78661: LD_VAR 0 4
78665: PUSH
78666: LD_VAR 0 1
78670: PPUSH
78671: CALL_OW 437
78675: PUSH
78676: LD_INT 1
78678: ARRAY
78679: PUSH
78680: LD_INT 2
78682: ARRAY
78683: EQUAL
78684: AND
78685: IFFALSE 78712
78687: PUSH
78688: LD_VAR 0 5
78692: PUSH
78693: LD_VAR 0 1
78697: PPUSH
78698: CALL_OW 437
78702: PUSH
78703: LD_INT 1
78705: ARRAY
78706: PUSH
78707: LD_INT 3
78709: ARRAY
78710: EQUAL
78711: AND
78712: IFFALSE 78722
// result := true end ;
78714: LD_ADDR_VAR 0 3
78718: PUSH
78719: LD_INT 1
78721: ST_TO_ADDR
// end ;
78722: LD_VAR 0 3
78726: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78727: LD_INT 0
78729: PPUSH
// result := false ;
78730: LD_ADDR_VAR 0 4
78734: PUSH
78735: LD_INT 0
78737: ST_TO_ADDR
// if GetTaskList ( unit ) then
78738: LD_VAR 0 1
78742: PPUSH
78743: CALL_OW 437
78747: IFFALSE 78834
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78749: LD_STRING M
78751: PUSH
78752: LD_VAR 0 1
78756: PPUSH
78757: CALL_OW 437
78761: PUSH
78762: LD_INT 1
78764: ARRAY
78765: PUSH
78766: LD_INT 1
78768: ARRAY
78769: EQUAL
78770: IFFALSE 78797
78772: PUSH
78773: LD_VAR 0 2
78777: PUSH
78778: LD_VAR 0 1
78782: PPUSH
78783: CALL_OW 437
78787: PUSH
78788: LD_INT 1
78790: ARRAY
78791: PUSH
78792: LD_INT 2
78794: ARRAY
78795: EQUAL
78796: AND
78797: IFFALSE 78824
78799: PUSH
78800: LD_VAR 0 3
78804: PUSH
78805: LD_VAR 0 1
78809: PPUSH
78810: CALL_OW 437
78814: PUSH
78815: LD_INT 1
78817: ARRAY
78818: PUSH
78819: LD_INT 3
78821: ARRAY
78822: EQUAL
78823: AND
78824: IFFALSE 78834
// result := true ;
78826: LD_ADDR_VAR 0 4
78830: PUSH
78831: LD_INT 1
78833: ST_TO_ADDR
// end ; end ;
78834: LD_VAR 0 4
78838: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78839: LD_INT 0
78841: PPUSH
78842: PPUSH
78843: PPUSH
78844: PPUSH
// if not unit or not area then
78845: LD_VAR 0 1
78849: NOT
78850: IFTRUE 78859
78852: PUSH
78853: LD_VAR 0 2
78857: NOT
78858: OR
78859: IFFALSE 78863
// exit ;
78861: GO 79039
// tmp := AreaToList ( area , i ) ;
78863: LD_ADDR_VAR 0 6
78867: PUSH
78868: LD_VAR 0 2
78872: PPUSH
78873: LD_VAR 0 5
78877: PPUSH
78878: CALL_OW 517
78882: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78883: LD_ADDR_VAR 0 5
78887: PUSH
78888: DOUBLE
78889: LD_INT 1
78891: DEC
78892: ST_TO_ADDR
78893: LD_VAR 0 6
78897: PUSH
78898: LD_INT 1
78900: ARRAY
78901: PUSH
78902: FOR_TO
78903: IFFALSE 79037
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78905: LD_ADDR_VAR 0 7
78909: PUSH
78910: LD_VAR 0 6
78914: PUSH
78915: LD_INT 1
78917: ARRAY
78918: PUSH
78919: LD_VAR 0 5
78923: ARRAY
78924: PUSH
78925: LD_VAR 0 6
78929: PUSH
78930: LD_INT 2
78932: ARRAY
78933: PUSH
78934: LD_VAR 0 5
78938: ARRAY
78939: PUSH
78940: EMPTY
78941: LIST
78942: LIST
78943: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78944: LD_INT 92
78946: PUSH
78947: LD_VAR 0 7
78951: PUSH
78952: LD_INT 1
78954: ARRAY
78955: PUSH
78956: LD_VAR 0 7
78960: PUSH
78961: LD_INT 2
78963: ARRAY
78964: PUSH
78965: LD_INT 2
78967: PUSH
78968: EMPTY
78969: LIST
78970: LIST
78971: LIST
78972: LIST
78973: PPUSH
78974: CALL_OW 69
78978: PUSH
78979: LD_INT 0
78981: EQUAL
78982: IFFALSE 79035
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78984: LD_VAR 0 1
78988: PPUSH
78989: LD_VAR 0 7
78993: PUSH
78994: LD_INT 1
78996: ARRAY
78997: PPUSH
78998: LD_VAR 0 7
79002: PUSH
79003: LD_INT 2
79005: ARRAY
79006: PPUSH
79007: LD_VAR 0 3
79011: PPUSH
79012: CALL_OW 48
// result := IsPlaced ( unit ) ;
79016: LD_ADDR_VAR 0 4
79020: PUSH
79021: LD_VAR 0 1
79025: PPUSH
79026: CALL_OW 305
79030: ST_TO_ADDR
// exit ;
79031: POP
79032: POP
79033: GO 79039
// end ; end ;
79035: GO 78902
79037: POP
79038: POP
// end ;
79039: LD_VAR 0 4
79043: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79044: LD_INT 0
79046: PPUSH
79047: PPUSH
79048: PPUSH
// if not side or side > 8 then
79049: LD_VAR 0 1
79053: NOT
79054: IFTRUE 79066
79056: PUSH
79057: LD_VAR 0 1
79061: PUSH
79062: LD_INT 8
79064: GREATER
79065: OR
79066: IFFALSE 79070
// exit ;
79068: GO 79257
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79070: LD_ADDR_VAR 0 4
79074: PUSH
79075: LD_INT 22
79077: PUSH
79078: LD_VAR 0 1
79082: PUSH
79083: EMPTY
79084: LIST
79085: LIST
79086: PUSH
79087: LD_INT 21
79089: PUSH
79090: LD_INT 3
79092: PUSH
79093: EMPTY
79094: LIST
79095: LIST
79096: PUSH
79097: EMPTY
79098: LIST
79099: LIST
79100: PPUSH
79101: CALL_OW 69
79105: ST_TO_ADDR
// if not tmp then
79106: LD_VAR 0 4
79110: NOT
79111: IFFALSE 79115
// exit ;
79113: GO 79257
// enable_addtolog := true ;
79115: LD_ADDR_OWVAR 81
79119: PUSH
79120: LD_INT 1
79122: ST_TO_ADDR
// AddToLog ( [ ) ;
79123: LD_STRING [
79125: PPUSH
79126: CALL_OW 561
// for i in tmp do
79130: LD_ADDR_VAR 0 3
79134: PUSH
79135: LD_VAR 0 4
79139: PUSH
79140: FOR_IN
79141: IFFALSE 79248
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79143: LD_STRING [
79145: PUSH
79146: LD_VAR 0 3
79150: PPUSH
79151: CALL_OW 266
79155: STR
79156: PUSH
79157: LD_STRING , 
79159: STR
79160: PUSH
79161: LD_VAR 0 3
79165: PPUSH
79166: CALL_OW 250
79170: STR
79171: PUSH
79172: LD_STRING , 
79174: STR
79175: PUSH
79176: LD_VAR 0 3
79180: PPUSH
79181: CALL_OW 251
79185: STR
79186: PUSH
79187: LD_STRING , 
79189: STR
79190: PUSH
79191: LD_VAR 0 3
79195: PPUSH
79196: CALL_OW 254
79200: STR
79201: PUSH
79202: LD_STRING , 
79204: STR
79205: PUSH
79206: LD_VAR 0 3
79210: PPUSH
79211: LD_INT 1
79213: PPUSH
79214: CALL_OW 268
79218: STR
79219: PUSH
79220: LD_STRING , 
79222: STR
79223: PUSH
79224: LD_VAR 0 3
79228: PPUSH
79229: LD_INT 2
79231: PPUSH
79232: CALL_OW 268
79236: STR
79237: PUSH
79238: LD_STRING ],
79240: STR
79241: PPUSH
79242: CALL_OW 561
// end ;
79246: GO 79140
79248: POP
79249: POP
// AddToLog ( ]; ) ;
79250: LD_STRING ];
79252: PPUSH
79253: CALL_OW 561
// end ;
79257: LD_VAR 0 2
79261: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79262: LD_INT 0
79264: PPUSH
79265: PPUSH
79266: PPUSH
79267: PPUSH
79268: PPUSH
// if not area or not rate or not max then
79269: LD_VAR 0 1
79273: NOT
79274: IFTRUE 79283
79276: PUSH
79277: LD_VAR 0 2
79281: NOT
79282: OR
79283: IFTRUE 79292
79285: PUSH
79286: LD_VAR 0 4
79290: NOT
79291: OR
79292: IFFALSE 79296
// exit ;
79294: GO 79485
// while 1 do
79296: LD_INT 1
79298: IFFALSE 79485
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79300: LD_ADDR_VAR 0 9
79304: PUSH
79305: LD_VAR 0 1
79309: PPUSH
79310: LD_INT 1
79312: PPUSH
79313: CALL_OW 287
79317: PUSH
79318: LD_INT 10
79320: MUL
79321: ST_TO_ADDR
// r := rate / 10 ;
79322: LD_ADDR_VAR 0 7
79326: PUSH
79327: LD_VAR 0 2
79331: PUSH
79332: LD_INT 10
79334: DIVREAL
79335: ST_TO_ADDR
// time := 1 1$00 ;
79336: LD_ADDR_VAR 0 8
79340: PUSH
79341: LD_INT 2100
79343: ST_TO_ADDR
// if amount < min then
79344: LD_VAR 0 9
79348: PUSH
79349: LD_VAR 0 3
79353: LESS
79354: IFFALSE 79372
// r := r * 2 else
79356: LD_ADDR_VAR 0 7
79360: PUSH
79361: LD_VAR 0 7
79365: PUSH
79366: LD_INT 2
79368: MUL
79369: ST_TO_ADDR
79370: GO 79398
// if amount > max then
79372: LD_VAR 0 9
79376: PUSH
79377: LD_VAR 0 4
79381: GREATER
79382: IFFALSE 79398
// r := r / 2 ;
79384: LD_ADDR_VAR 0 7
79388: PUSH
79389: LD_VAR 0 7
79393: PUSH
79394: LD_INT 2
79396: DIVREAL
79397: ST_TO_ADDR
// time := time / r ;
79398: LD_ADDR_VAR 0 8
79402: PUSH
79403: LD_VAR 0 8
79407: PUSH
79408: LD_VAR 0 7
79412: DIVREAL
79413: ST_TO_ADDR
// if time < 0 then
79414: LD_VAR 0 8
79418: PUSH
79419: LD_INT 0
79421: LESS
79422: IFFALSE 79439
// time := time * - 1 ;
79424: LD_ADDR_VAR 0 8
79428: PUSH
79429: LD_VAR 0 8
79433: PUSH
79434: LD_INT 1
79436: NEG
79437: MUL
79438: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79439: LD_VAR 0 8
79443: PUSH
79444: LD_INT 35
79446: PPUSH
79447: LD_INT 875
79449: PPUSH
79450: CALL_OW 12
79454: PLUS
79455: PPUSH
79456: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79460: LD_INT 1
79462: PPUSH
79463: LD_INT 5
79465: PPUSH
79466: CALL_OW 12
79470: PPUSH
79471: LD_VAR 0 1
79475: PPUSH
79476: LD_INT 1
79478: PPUSH
79479: CALL_OW 55
// end ;
79483: GO 79296
// end ;
79485: LD_VAR 0 5
79489: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79490: LD_INT 0
79492: PPUSH
79493: PPUSH
79494: PPUSH
79495: PPUSH
79496: PPUSH
79497: PPUSH
79498: PPUSH
79499: PPUSH
// if not turrets or not factories then
79500: LD_VAR 0 1
79504: NOT
79505: IFTRUE 79514
79507: PUSH
79508: LD_VAR 0 2
79512: NOT
79513: OR
79514: IFFALSE 79518
// exit ;
79516: GO 79825
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79518: LD_ADDR_VAR 0 10
79522: PUSH
79523: LD_INT 5
79525: PUSH
79526: LD_INT 6
79528: PUSH
79529: EMPTY
79530: LIST
79531: LIST
79532: PUSH
79533: LD_INT 2
79535: PUSH
79536: LD_INT 4
79538: PUSH
79539: EMPTY
79540: LIST
79541: LIST
79542: PUSH
79543: LD_INT 3
79545: PUSH
79546: LD_INT 5
79548: PUSH
79549: EMPTY
79550: LIST
79551: LIST
79552: PUSH
79553: EMPTY
79554: LIST
79555: LIST
79556: LIST
79557: PUSH
79558: LD_INT 24
79560: PUSH
79561: LD_INT 25
79563: PUSH
79564: EMPTY
79565: LIST
79566: LIST
79567: PUSH
79568: LD_INT 23
79570: PUSH
79571: LD_INT 27
79573: PUSH
79574: EMPTY
79575: LIST
79576: LIST
79577: PUSH
79578: EMPTY
79579: LIST
79580: LIST
79581: PUSH
79582: LD_INT 42
79584: PUSH
79585: LD_INT 43
79587: PUSH
79588: EMPTY
79589: LIST
79590: LIST
79591: PUSH
79592: LD_INT 44
79594: PUSH
79595: LD_INT 46
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PUSH
79602: LD_INT 45
79604: PUSH
79605: LD_INT 47
79607: PUSH
79608: EMPTY
79609: LIST
79610: LIST
79611: PUSH
79612: EMPTY
79613: LIST
79614: LIST
79615: LIST
79616: PUSH
79617: EMPTY
79618: LIST
79619: LIST
79620: LIST
79621: ST_TO_ADDR
// result := [ ] ;
79622: LD_ADDR_VAR 0 3
79626: PUSH
79627: EMPTY
79628: ST_TO_ADDR
// for i in turrets do
79629: LD_ADDR_VAR 0 4
79633: PUSH
79634: LD_VAR 0 1
79638: PUSH
79639: FOR_IN
79640: IFFALSE 79823
// begin nat := GetNation ( i ) ;
79642: LD_ADDR_VAR 0 7
79646: PUSH
79647: LD_VAR 0 4
79651: PPUSH
79652: CALL_OW 248
79656: ST_TO_ADDR
// weapon := 0 ;
79657: LD_ADDR_VAR 0 8
79661: PUSH
79662: LD_INT 0
79664: ST_TO_ADDR
// if not nat then
79665: LD_VAR 0 7
79669: NOT
79670: IFFALSE 79674
// continue ;
79672: GO 79639
// for j in list [ nat ] do
79674: LD_ADDR_VAR 0 5
79678: PUSH
79679: LD_VAR 0 10
79683: PUSH
79684: LD_VAR 0 7
79688: ARRAY
79689: PUSH
79690: FOR_IN
79691: IFFALSE 79732
// if GetBWeapon ( i ) = j [ 1 ] then
79693: LD_VAR 0 4
79697: PPUSH
79698: CALL_OW 269
79702: PUSH
79703: LD_VAR 0 5
79707: PUSH
79708: LD_INT 1
79710: ARRAY
79711: EQUAL
79712: IFFALSE 79730
// begin weapon := j [ 2 ] ;
79714: LD_ADDR_VAR 0 8
79718: PUSH
79719: LD_VAR 0 5
79723: PUSH
79724: LD_INT 2
79726: ARRAY
79727: ST_TO_ADDR
// break ;
79728: GO 79732
// end ;
79730: GO 79690
79732: POP
79733: POP
// if not weapon then
79734: LD_VAR 0 8
79738: NOT
79739: IFFALSE 79743
// continue ;
79741: GO 79639
// for k in factories do
79743: LD_ADDR_VAR 0 6
79747: PUSH
79748: LD_VAR 0 2
79752: PUSH
79753: FOR_IN
79754: IFFALSE 79819
// begin weapons := AvailableWeaponList ( k ) ;
79756: LD_ADDR_VAR 0 9
79760: PUSH
79761: LD_VAR 0 6
79765: PPUSH
79766: CALL_OW 478
79770: ST_TO_ADDR
// if not weapons then
79771: LD_VAR 0 9
79775: NOT
79776: IFFALSE 79780
// continue ;
79778: GO 79753
// if weapon in weapons then
79780: LD_VAR 0 8
79784: PUSH
79785: LD_VAR 0 9
79789: IN
79790: IFFALSE 79817
// begin result := [ i , weapon ] ;
79792: LD_ADDR_VAR 0 3
79796: PUSH
79797: LD_VAR 0 4
79801: PUSH
79802: LD_VAR 0 8
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: ST_TO_ADDR
// exit ;
79811: POP
79812: POP
79813: POP
79814: POP
79815: GO 79825
// end ; end ;
79817: GO 79753
79819: POP
79820: POP
// end ;
79821: GO 79639
79823: POP
79824: POP
// end ;
79825: LD_VAR 0 3
79829: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79830: LD_INT 0
79832: PPUSH
// if not side or side > 8 then
79833: LD_VAR 0 3
79837: NOT
79838: IFTRUE 79850
79840: PUSH
79841: LD_VAR 0 3
79845: PUSH
79846: LD_INT 8
79848: GREATER
79849: OR
79850: IFFALSE 79854
// exit ;
79852: GO 79913
// if not range then
79854: LD_VAR 0 4
79858: NOT
79859: IFFALSE 79870
// range := - 12 ;
79861: LD_ADDR_VAR 0 4
79865: PUSH
79866: LD_INT 12
79868: NEG
79869: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79870: LD_VAR 0 1
79874: PPUSH
79875: LD_VAR 0 2
79879: PPUSH
79880: LD_VAR 0 3
79884: PPUSH
79885: LD_VAR 0 4
79889: PPUSH
79890: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79894: LD_VAR 0 1
79898: PPUSH
79899: LD_VAR 0 2
79903: PPUSH
79904: LD_VAR 0 3
79908: PPUSH
79909: CALL_OW 331
// end ;
79913: LD_VAR 0 5
79917: RET
// export function Video ( mode ) ; begin
79918: LD_INT 0
79920: PPUSH
// ingame_video = mode ;
79921: LD_ADDR_OWVAR 52
79925: PUSH
79926: LD_VAR 0 1
79930: ST_TO_ADDR
// interface_hidden = mode ;
79931: LD_ADDR_OWVAR 54
79935: PUSH
79936: LD_VAR 0 1
79940: ST_TO_ADDR
// end ;
79941: LD_VAR 0 2
79945: RET
// export function Join ( array , element ) ; begin
79946: LD_INT 0
79948: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79949: LD_ADDR_VAR 0 3
79953: PUSH
79954: LD_VAR 0 1
79958: PPUSH
79959: LD_VAR 0 1
79963: PUSH
79964: LD_INT 1
79966: PLUS
79967: PPUSH
79968: LD_VAR 0 2
79972: PPUSH
79973: CALL_OW 1
79977: ST_TO_ADDR
// end ;
79978: LD_VAR 0 3
79982: RET
// export function JoinUnion ( array , element ) ; begin
79983: LD_INT 0
79985: PPUSH
// result := array union element ;
79986: LD_ADDR_VAR 0 3
79990: PUSH
79991: LD_VAR 0 1
79995: PUSH
79996: LD_VAR 0 2
80000: UNION
80001: ST_TO_ADDR
// end ;
80002: LD_VAR 0 3
80006: RET
// export function GetBehemoths ( side ) ; begin
80007: LD_INT 0
80009: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80010: LD_ADDR_VAR 0 2
80014: PUSH
80015: LD_INT 22
80017: PUSH
80018: LD_VAR 0 1
80022: PUSH
80023: EMPTY
80024: LIST
80025: LIST
80026: PUSH
80027: LD_INT 31
80029: PUSH
80030: LD_INT 25
80032: PUSH
80033: EMPTY
80034: LIST
80035: LIST
80036: PUSH
80037: EMPTY
80038: LIST
80039: LIST
80040: PPUSH
80041: CALL_OW 69
80045: ST_TO_ADDR
// end ;
80046: LD_VAR 0 2
80050: RET
// export function Shuffle ( array ) ; var i , index ; begin
80051: LD_INT 0
80053: PPUSH
80054: PPUSH
80055: PPUSH
// result := [ ] ;
80056: LD_ADDR_VAR 0 2
80060: PUSH
80061: EMPTY
80062: ST_TO_ADDR
// if not array then
80063: LD_VAR 0 1
80067: NOT
80068: IFFALSE 80072
// exit ;
80070: GO 80171
// Randomize ;
80072: CALL_OW 10
// for i = array downto 1 do
80076: LD_ADDR_VAR 0 3
80080: PUSH
80081: DOUBLE
80082: LD_VAR 0 1
80086: INC
80087: ST_TO_ADDR
80088: LD_INT 1
80090: PUSH
80091: FOR_DOWNTO
80092: IFFALSE 80169
// begin index := rand ( 1 , array ) ;
80094: LD_ADDR_VAR 0 4
80098: PUSH
80099: LD_INT 1
80101: PPUSH
80102: LD_VAR 0 1
80106: PPUSH
80107: CALL_OW 12
80111: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80112: LD_ADDR_VAR 0 2
80116: PUSH
80117: LD_VAR 0 2
80121: PPUSH
80122: LD_VAR 0 2
80126: PUSH
80127: LD_INT 1
80129: PLUS
80130: PPUSH
80131: LD_VAR 0 1
80135: PUSH
80136: LD_VAR 0 4
80140: ARRAY
80141: PPUSH
80142: CALL_OW 2
80146: ST_TO_ADDR
// array := Delete ( array , index ) ;
80147: LD_ADDR_VAR 0 1
80151: PUSH
80152: LD_VAR 0 1
80156: PPUSH
80157: LD_VAR 0 4
80161: PPUSH
80162: CALL_OW 3
80166: ST_TO_ADDR
// end ;
80167: GO 80091
80169: POP
80170: POP
// end ;
80171: LD_VAR 0 2
80175: RET
// export function GetBaseMaterials ( base ) ; begin
80176: LD_INT 0
80178: PPUSH
// result := [ 0 , 0 , 0 ] ;
80179: LD_ADDR_VAR 0 2
80183: PUSH
80184: LD_INT 0
80186: PUSH
80187: LD_INT 0
80189: PUSH
80190: LD_INT 0
80192: PUSH
80193: EMPTY
80194: LIST
80195: LIST
80196: LIST
80197: ST_TO_ADDR
// if not base then
80198: LD_VAR 0 1
80202: NOT
80203: IFFALSE 80207
// exit ;
80205: GO 80256
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80207: LD_ADDR_VAR 0 2
80211: PUSH
80212: LD_VAR 0 1
80216: PPUSH
80217: LD_INT 1
80219: PPUSH
80220: CALL_OW 275
80224: PUSH
80225: LD_VAR 0 1
80229: PPUSH
80230: LD_INT 2
80232: PPUSH
80233: CALL_OW 275
80237: PUSH
80238: LD_VAR 0 1
80242: PPUSH
80243: LD_INT 3
80245: PPUSH
80246: CALL_OW 275
80250: PUSH
80251: EMPTY
80252: LIST
80253: LIST
80254: LIST
80255: ST_TO_ADDR
// end ;
80256: LD_VAR 0 2
80260: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80261: LD_INT 0
80263: PPUSH
80264: PPUSH
// result := array ;
80265: LD_ADDR_VAR 0 3
80269: PUSH
80270: LD_VAR 0 1
80274: ST_TO_ADDR
// if size >= result then
80275: LD_VAR 0 2
80279: PUSH
80280: LD_VAR 0 3
80284: GREATEREQUAL
80285: IFFALSE 80289
// exit ;
80287: GO 80339
// if size then
80289: LD_VAR 0 2
80293: IFFALSE 80339
// for i := array downto size do
80295: LD_ADDR_VAR 0 4
80299: PUSH
80300: DOUBLE
80301: LD_VAR 0 1
80305: INC
80306: ST_TO_ADDR
80307: LD_VAR 0 2
80311: PUSH
80312: FOR_DOWNTO
80313: IFFALSE 80337
// result := Delete ( result , result ) ;
80315: LD_ADDR_VAR 0 3
80319: PUSH
80320: LD_VAR 0 3
80324: PPUSH
80325: LD_VAR 0 3
80329: PPUSH
80330: CALL_OW 3
80334: ST_TO_ADDR
80335: GO 80312
80337: POP
80338: POP
// end ;
80339: LD_VAR 0 3
80343: RET
// export function ComExit ( unit ) ; var tmp ; begin
80344: LD_INT 0
80346: PPUSH
80347: PPUSH
// if not IsInUnit ( unit ) then
80348: LD_VAR 0 1
80352: PPUSH
80353: CALL_OW 310
80357: NOT
80358: IFFALSE 80362
// exit ;
80360: GO 80422
// tmp := IsInUnit ( unit ) ;
80362: LD_ADDR_VAR 0 3
80366: PUSH
80367: LD_VAR 0 1
80371: PPUSH
80372: CALL_OW 310
80376: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80377: LD_VAR 0 3
80381: PPUSH
80382: CALL_OW 247
80386: PUSH
80387: LD_INT 2
80389: EQUAL
80390: IFFALSE 80403
// ComExitVehicle ( unit ) else
80392: LD_VAR 0 1
80396: PPUSH
80397: CALL_OW 121
80401: GO 80412
// ComExitBuilding ( unit ) ;
80403: LD_VAR 0 1
80407: PPUSH
80408: CALL_OW 122
// result := tmp ;
80412: LD_ADDR_VAR 0 2
80416: PUSH
80417: LD_VAR 0 3
80421: ST_TO_ADDR
// end ;
80422: LD_VAR 0 2
80426: RET
// export function ComExitAll ( units ) ; var i ; begin
80427: LD_INT 0
80429: PPUSH
80430: PPUSH
// if not units then
80431: LD_VAR 0 1
80435: NOT
80436: IFFALSE 80440
// exit ;
80438: GO 80466
// for i in units do
80440: LD_ADDR_VAR 0 3
80444: PUSH
80445: LD_VAR 0 1
80449: PUSH
80450: FOR_IN
80451: IFFALSE 80464
// ComExit ( i ) ;
80453: LD_VAR 0 3
80457: PPUSH
80458: CALL 80344 0 1
80462: GO 80450
80464: POP
80465: POP
// end ;
80466: LD_VAR 0 2
80470: RET
// export function ResetHc ; begin
80471: LD_INT 0
80473: PPUSH
// InitHc ;
80474: CALL_OW 19
// hc_importance := 0 ;
80478: LD_ADDR_OWVAR 32
80482: PUSH
80483: LD_INT 0
80485: ST_TO_ADDR
// end ;
80486: LD_VAR 0 1
80490: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80491: LD_INT 0
80493: PPUSH
80494: PPUSH
80495: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80496: LD_ADDR_VAR 0 6
80500: PUSH
80501: LD_VAR 0 1
80505: PUSH
80506: LD_VAR 0 3
80510: PLUS
80511: PUSH
80512: LD_INT 2
80514: DIV
80515: ST_TO_ADDR
// if _x < 0 then
80516: LD_VAR 0 6
80520: PUSH
80521: LD_INT 0
80523: LESS
80524: IFFALSE 80541
// _x := _x * - 1 ;
80526: LD_ADDR_VAR 0 6
80530: PUSH
80531: LD_VAR 0 6
80535: PUSH
80536: LD_INT 1
80538: NEG
80539: MUL
80540: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80541: LD_ADDR_VAR 0 7
80545: PUSH
80546: LD_VAR 0 2
80550: PUSH
80551: LD_VAR 0 4
80555: PLUS
80556: PUSH
80557: LD_INT 2
80559: DIV
80560: ST_TO_ADDR
// if _y < 0 then
80561: LD_VAR 0 7
80565: PUSH
80566: LD_INT 0
80568: LESS
80569: IFFALSE 80586
// _y := _y * - 1 ;
80571: LD_ADDR_VAR 0 7
80575: PUSH
80576: LD_VAR 0 7
80580: PUSH
80581: LD_INT 1
80583: NEG
80584: MUL
80585: ST_TO_ADDR
// result := [ _x , _y ] ;
80586: LD_ADDR_VAR 0 5
80590: PUSH
80591: LD_VAR 0 6
80595: PUSH
80596: LD_VAR 0 7
80600: PUSH
80601: EMPTY
80602: LIST
80603: LIST
80604: ST_TO_ADDR
// end ;
80605: LD_VAR 0 5
80609: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80610: LD_INT 0
80612: PPUSH
80613: PPUSH
80614: PPUSH
80615: PPUSH
// task := GetTaskList ( unit ) ;
80616: LD_ADDR_VAR 0 7
80620: PUSH
80621: LD_VAR 0 1
80625: PPUSH
80626: CALL_OW 437
80630: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80631: LD_VAR 0 7
80635: NOT
80636: IFFALSE 80655
80638: PUSH
80639: LD_VAR 0 1
80643: PPUSH
80644: LD_VAR 0 2
80648: PPUSH
80649: CALL_OW 308
80653: NOT
80654: AND
80655: IFFALSE 80659
// exit ;
80657: GO 80777
// if IsInArea ( unit , area ) then
80659: LD_VAR 0 1
80663: PPUSH
80664: LD_VAR 0 2
80668: PPUSH
80669: CALL_OW 308
80673: IFFALSE 80691
// begin ComMoveToArea ( unit , goAway ) ;
80675: LD_VAR 0 1
80679: PPUSH
80680: LD_VAR 0 3
80684: PPUSH
80685: CALL_OW 113
// exit ;
80689: GO 80777
// end ; if task [ 1 ] [ 1 ] <> M then
80691: LD_VAR 0 7
80695: PUSH
80696: LD_INT 1
80698: ARRAY
80699: PUSH
80700: LD_INT 1
80702: ARRAY
80703: PUSH
80704: LD_STRING M
80706: NONEQUAL
80707: IFFALSE 80711
// exit ;
80709: GO 80777
// x := task [ 1 ] [ 2 ] ;
80711: LD_ADDR_VAR 0 5
80715: PUSH
80716: LD_VAR 0 7
80720: PUSH
80721: LD_INT 1
80723: ARRAY
80724: PUSH
80725: LD_INT 2
80727: ARRAY
80728: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80729: LD_ADDR_VAR 0 6
80733: PUSH
80734: LD_VAR 0 7
80738: PUSH
80739: LD_INT 1
80741: ARRAY
80742: PUSH
80743: LD_INT 3
80745: ARRAY
80746: ST_TO_ADDR
// if InArea ( x , y , area ) then
80747: LD_VAR 0 5
80751: PPUSH
80752: LD_VAR 0 6
80756: PPUSH
80757: LD_VAR 0 2
80761: PPUSH
80762: CALL_OW 309
80766: IFFALSE 80777
// ComStop ( unit ) ;
80768: LD_VAR 0 1
80772: PPUSH
80773: CALL_OW 141
// end ;
80777: LD_VAR 0 4
80781: RET
// export function Abs ( value ) ; begin
80782: LD_INT 0
80784: PPUSH
// result := value ;
80785: LD_ADDR_VAR 0 2
80789: PUSH
80790: LD_VAR 0 1
80794: ST_TO_ADDR
// if value < 0 then
80795: LD_VAR 0 1
80799: PUSH
80800: LD_INT 0
80802: LESS
80803: IFFALSE 80820
// result := value * - 1 ;
80805: LD_ADDR_VAR 0 2
80809: PUSH
80810: LD_VAR 0 1
80814: PUSH
80815: LD_INT 1
80817: NEG
80818: MUL
80819: ST_TO_ADDR
// end ;
80820: LD_VAR 0 2
80824: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80825: LD_INT 0
80827: PPUSH
80828: PPUSH
80829: PPUSH
80830: PPUSH
80831: PPUSH
80832: PPUSH
80833: PPUSH
80834: PPUSH
// if not unit or not building then
80835: LD_VAR 0 1
80839: NOT
80840: IFTRUE 80849
80842: PUSH
80843: LD_VAR 0 2
80847: NOT
80848: OR
80849: IFFALSE 80853
// exit ;
80851: GO 81081
// x := GetX ( building ) ;
80853: LD_ADDR_VAR 0 4
80857: PUSH
80858: LD_VAR 0 2
80862: PPUSH
80863: CALL_OW 250
80867: ST_TO_ADDR
// y := GetY ( building ) ;
80868: LD_ADDR_VAR 0 6
80872: PUSH
80873: LD_VAR 0 2
80877: PPUSH
80878: CALL_OW 251
80882: ST_TO_ADDR
// d := GetDir ( building ) ;
80883: LD_ADDR_VAR 0 8
80887: PUSH
80888: LD_VAR 0 2
80892: PPUSH
80893: CALL_OW 254
80897: ST_TO_ADDR
// r := 4 ;
80898: LD_ADDR_VAR 0 9
80902: PUSH
80903: LD_INT 4
80905: ST_TO_ADDR
// for i := 1 to 5 do
80906: LD_ADDR_VAR 0 10
80910: PUSH
80911: DOUBLE
80912: LD_INT 1
80914: DEC
80915: ST_TO_ADDR
80916: LD_INT 5
80918: PUSH
80919: FOR_TO
80920: IFFALSE 81079
// begin _x := ShiftX ( x , d , r + i ) ;
80922: LD_ADDR_VAR 0 5
80926: PUSH
80927: LD_VAR 0 4
80931: PPUSH
80932: LD_VAR 0 8
80936: PPUSH
80937: LD_VAR 0 9
80941: PUSH
80942: LD_VAR 0 10
80946: PLUS
80947: PPUSH
80948: CALL_OW 272
80952: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80953: LD_ADDR_VAR 0 7
80957: PUSH
80958: LD_VAR 0 6
80962: PPUSH
80963: LD_VAR 0 8
80967: PPUSH
80968: LD_VAR 0 9
80972: PUSH
80973: LD_VAR 0 10
80977: PLUS
80978: PPUSH
80979: CALL_OW 273
80983: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80984: LD_VAR 0 5
80988: PPUSH
80989: LD_VAR 0 7
80993: PPUSH
80994: CALL_OW 488
80998: IFFALSE 81033
81000: PUSH
81001: LD_VAR 0 5
81005: PPUSH
81006: LD_VAR 0 7
81010: PPUSH
81011: CALL_OW 428
81015: PPUSH
81016: CALL_OW 247
81020: PUSH
81021: LD_INT 3
81023: PUSH
81024: LD_INT 2
81026: PUSH
81027: EMPTY
81028: LIST
81029: LIST
81030: IN
81031: NOT
81032: AND
81033: IFFALSE 81077
// begin ComMoveXY ( unit , _x , _y ) ;
81035: LD_VAR 0 1
81039: PPUSH
81040: LD_VAR 0 5
81044: PPUSH
81045: LD_VAR 0 7
81049: PPUSH
81050: CALL_OW 111
// result := [ _x , _y ] ;
81054: LD_ADDR_VAR 0 3
81058: PUSH
81059: LD_VAR 0 5
81063: PUSH
81064: LD_VAR 0 7
81068: PUSH
81069: EMPTY
81070: LIST
81071: LIST
81072: ST_TO_ADDR
// exit ;
81073: POP
81074: POP
81075: GO 81081
// end ; end ;
81077: GO 80919
81079: POP
81080: POP
// end ;
81081: LD_VAR 0 3
81085: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81086: LD_INT 0
81088: PPUSH
81089: PPUSH
81090: PPUSH
// result := 0 ;
81091: LD_ADDR_VAR 0 3
81095: PUSH
81096: LD_INT 0
81098: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81099: LD_VAR 0 1
81103: PUSH
81104: LD_INT 0
81106: LESS
81107: IFTRUE 81119
81109: PUSH
81110: LD_VAR 0 1
81114: PUSH
81115: LD_INT 8
81117: GREATER
81118: OR
81119: IFTRUE 81131
81121: PUSH
81122: LD_VAR 0 2
81126: PUSH
81127: LD_INT 0
81129: LESS
81130: OR
81131: IFTRUE 81143
81133: PUSH
81134: LD_VAR 0 2
81138: PUSH
81139: LD_INT 8
81141: GREATER
81142: OR
81143: IFFALSE 81147
// exit ;
81145: GO 81222
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81147: LD_ADDR_VAR 0 4
81151: PUSH
81152: LD_INT 22
81154: PUSH
81155: LD_VAR 0 2
81159: PUSH
81160: EMPTY
81161: LIST
81162: LIST
81163: PPUSH
81164: CALL_OW 69
81168: PUSH
81169: FOR_IN
81170: IFFALSE 81220
// begin un := UnitShoot ( i ) ;
81172: LD_ADDR_VAR 0 5
81176: PUSH
81177: LD_VAR 0 4
81181: PPUSH
81182: CALL_OW 504
81186: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81187: LD_VAR 0 5
81191: PPUSH
81192: CALL_OW 255
81196: PUSH
81197: LD_VAR 0 1
81201: EQUAL
81202: IFFALSE 81218
// begin result := un ;
81204: LD_ADDR_VAR 0 3
81208: PUSH
81209: LD_VAR 0 5
81213: ST_TO_ADDR
// exit ;
81214: POP
81215: POP
81216: GO 81222
// end ; end ;
81218: GO 81169
81220: POP
81221: POP
// end ;
81222: LD_VAR 0 3
81226: RET
// export function GetCargoBay ( units ) ; begin
81227: LD_INT 0
81229: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81230: LD_ADDR_VAR 0 2
81234: PUSH
81235: LD_VAR 0 1
81239: PPUSH
81240: LD_INT 2
81242: PUSH
81243: LD_INT 34
81245: PUSH
81246: LD_INT 12
81248: PUSH
81249: EMPTY
81250: LIST
81251: LIST
81252: PUSH
81253: LD_INT 34
81255: PUSH
81256: LD_INT 51
81258: PUSH
81259: EMPTY
81260: LIST
81261: LIST
81262: PUSH
81263: LD_INT 34
81265: PUSH
81266: LD_INT 32
81268: PUSH
81269: EMPTY
81270: LIST
81271: LIST
81272: PUSH
81273: LD_INT 34
81275: PUSH
81276: LD_INT 89
81278: PUSH
81279: EMPTY
81280: LIST
81281: LIST
81282: PUSH
81283: EMPTY
81284: LIST
81285: LIST
81286: LIST
81287: LIST
81288: LIST
81289: PPUSH
81290: CALL_OW 72
81294: ST_TO_ADDR
// end ;
81295: LD_VAR 0 2
81299: RET
// export function Negate ( value ) ; begin
81300: LD_INT 0
81302: PPUSH
// result := not value ;
81303: LD_ADDR_VAR 0 2
81307: PUSH
81308: LD_VAR 0 1
81312: NOT
81313: ST_TO_ADDR
// end ;
81314: LD_VAR 0 2
81318: RET
// export function Inc ( value ) ; begin
81319: LD_INT 0
81321: PPUSH
// result := value + 1 ;
81322: LD_ADDR_VAR 0 2
81326: PUSH
81327: LD_VAR 0 1
81331: PUSH
81332: LD_INT 1
81334: PLUS
81335: ST_TO_ADDR
// end ;
81336: LD_VAR 0 2
81340: RET
// export function Dec ( value ) ; begin
81341: LD_INT 0
81343: PPUSH
// result := value - 1 ;
81344: LD_ADDR_VAR 0 2
81348: PUSH
81349: LD_VAR 0 1
81353: PUSH
81354: LD_INT 1
81356: MINUS
81357: ST_TO_ADDR
// end ;
81358: LD_VAR 0 2
81362: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81363: LD_INT 0
81365: PPUSH
81366: PPUSH
81367: PPUSH
81368: PPUSH
81369: PPUSH
81370: PPUSH
81371: PPUSH
81372: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81373: LD_VAR 0 1
81377: PPUSH
81378: LD_VAR 0 2
81382: PPUSH
81383: CALL_OW 488
81387: NOT
81388: IFTRUE 81407
81390: PUSH
81391: LD_VAR 0 3
81395: PPUSH
81396: LD_VAR 0 4
81400: PPUSH
81401: CALL_OW 488
81405: NOT
81406: OR
81407: IFFALSE 81420
// begin result := - 1 ;
81409: LD_ADDR_VAR 0 5
81413: PUSH
81414: LD_INT 1
81416: NEG
81417: ST_TO_ADDR
// exit ;
81418: GO 81655
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81420: LD_ADDR_VAR 0 12
81424: PUSH
81425: LD_VAR 0 1
81429: PPUSH
81430: LD_VAR 0 2
81434: PPUSH
81435: LD_VAR 0 3
81439: PPUSH
81440: LD_VAR 0 4
81444: PPUSH
81445: CALL 80491 0 4
81449: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81450: LD_ADDR_VAR 0 11
81454: PUSH
81455: LD_VAR 0 1
81459: PPUSH
81460: LD_VAR 0 2
81464: PPUSH
81465: LD_VAR 0 12
81469: PUSH
81470: LD_INT 1
81472: ARRAY
81473: PPUSH
81474: LD_VAR 0 12
81478: PUSH
81479: LD_INT 2
81481: ARRAY
81482: PPUSH
81483: CALL_OW 298
81487: ST_TO_ADDR
// distance := 9999 ;
81488: LD_ADDR_VAR 0 10
81492: PUSH
81493: LD_INT 9999
81495: ST_TO_ADDR
// for i := 0 to 5 do
81496: LD_ADDR_VAR 0 6
81500: PUSH
81501: DOUBLE
81502: LD_INT 0
81504: DEC
81505: ST_TO_ADDR
81506: LD_INT 5
81508: PUSH
81509: FOR_TO
81510: IFFALSE 81653
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81512: LD_ADDR_VAR 0 7
81516: PUSH
81517: LD_VAR 0 1
81521: PPUSH
81522: LD_VAR 0 6
81526: PPUSH
81527: LD_VAR 0 11
81531: PPUSH
81532: CALL_OW 272
81536: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81537: LD_ADDR_VAR 0 8
81541: PUSH
81542: LD_VAR 0 2
81546: PPUSH
81547: LD_VAR 0 6
81551: PPUSH
81552: LD_VAR 0 11
81556: PPUSH
81557: CALL_OW 273
81561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81562: LD_VAR 0 7
81566: PPUSH
81567: LD_VAR 0 8
81571: PPUSH
81572: CALL_OW 488
81576: NOT
81577: IFFALSE 81581
// continue ;
81579: GO 81509
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81581: LD_ADDR_VAR 0 9
81585: PUSH
81586: LD_VAR 0 12
81590: PUSH
81591: LD_INT 1
81593: ARRAY
81594: PPUSH
81595: LD_VAR 0 12
81599: PUSH
81600: LD_INT 2
81602: ARRAY
81603: PPUSH
81604: LD_VAR 0 7
81608: PPUSH
81609: LD_VAR 0 8
81613: PPUSH
81614: CALL_OW 298
81618: ST_TO_ADDR
// if tmp < distance then
81619: LD_VAR 0 9
81623: PUSH
81624: LD_VAR 0 10
81628: LESS
81629: IFFALSE 81651
// begin result := i ;
81631: LD_ADDR_VAR 0 5
81635: PUSH
81636: LD_VAR 0 6
81640: ST_TO_ADDR
// distance := tmp ;
81641: LD_ADDR_VAR 0 10
81645: PUSH
81646: LD_VAR 0 9
81650: ST_TO_ADDR
// end ; end ;
81651: GO 81509
81653: POP
81654: POP
// end ;
81655: LD_VAR 0 5
81659: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81660: LD_INT 0
81662: PPUSH
81663: PPUSH
// if not driver or not IsInUnit ( driver ) then
81664: LD_VAR 0 1
81668: NOT
81669: IFTRUE 81683
81671: PUSH
81672: LD_VAR 0 1
81676: PPUSH
81677: CALL_OW 310
81681: NOT
81682: OR
81683: IFFALSE 81687
// exit ;
81685: GO 81777
// vehicle := IsInUnit ( driver ) ;
81687: LD_ADDR_VAR 0 3
81691: PUSH
81692: LD_VAR 0 1
81696: PPUSH
81697: CALL_OW 310
81701: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81702: LD_VAR 0 1
81706: PPUSH
81707: LD_STRING \
81709: PUSH
81710: LD_INT 0
81712: PUSH
81713: LD_INT 0
81715: PUSH
81716: LD_INT 0
81718: PUSH
81719: LD_INT 0
81721: PUSH
81722: LD_INT 0
81724: PUSH
81725: LD_INT 0
81727: PUSH
81728: EMPTY
81729: LIST
81730: LIST
81731: LIST
81732: LIST
81733: LIST
81734: LIST
81735: LIST
81736: PUSH
81737: LD_STRING E
81739: PUSH
81740: LD_INT 0
81742: PUSH
81743: LD_INT 0
81745: PUSH
81746: LD_VAR 0 3
81750: PUSH
81751: LD_INT 0
81753: PUSH
81754: LD_INT 0
81756: PUSH
81757: LD_INT 0
81759: PUSH
81760: EMPTY
81761: LIST
81762: LIST
81763: LIST
81764: LIST
81765: LIST
81766: LIST
81767: LIST
81768: PUSH
81769: EMPTY
81770: LIST
81771: LIST
81772: PPUSH
81773: CALL_OW 446
// end ;
81777: LD_VAR 0 2
81781: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81782: LD_INT 0
81784: PPUSH
81785: PPUSH
// if not driver or not IsInUnit ( driver ) then
81786: LD_VAR 0 1
81790: NOT
81791: IFTRUE 81805
81793: PUSH
81794: LD_VAR 0 1
81798: PPUSH
81799: CALL_OW 310
81803: NOT
81804: OR
81805: IFFALSE 81809
// exit ;
81807: GO 81899
// vehicle := IsInUnit ( driver ) ;
81809: LD_ADDR_VAR 0 3
81813: PUSH
81814: LD_VAR 0 1
81818: PPUSH
81819: CALL_OW 310
81823: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81824: LD_VAR 0 1
81828: PPUSH
81829: LD_STRING \
81831: PUSH
81832: LD_INT 0
81834: PUSH
81835: LD_INT 0
81837: PUSH
81838: LD_INT 0
81840: PUSH
81841: LD_INT 0
81843: PUSH
81844: LD_INT 0
81846: PUSH
81847: LD_INT 0
81849: PUSH
81850: EMPTY
81851: LIST
81852: LIST
81853: LIST
81854: LIST
81855: LIST
81856: LIST
81857: LIST
81858: PUSH
81859: LD_STRING E
81861: PUSH
81862: LD_INT 0
81864: PUSH
81865: LD_INT 0
81867: PUSH
81868: LD_VAR 0 3
81872: PUSH
81873: LD_INT 0
81875: PUSH
81876: LD_INT 0
81878: PUSH
81879: LD_INT 0
81881: PUSH
81882: EMPTY
81883: LIST
81884: LIST
81885: LIST
81886: LIST
81887: LIST
81888: LIST
81889: LIST
81890: PUSH
81891: EMPTY
81892: LIST
81893: LIST
81894: PPUSH
81895: CALL_OW 447
// end ;
81899: LD_VAR 0 2
81903: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81904: LD_INT 0
81906: PPUSH
81907: PPUSH
81908: PPUSH
// tmp := [ ] ;
81909: LD_ADDR_VAR 0 5
81913: PUSH
81914: EMPTY
81915: ST_TO_ADDR
// for i in units do
81916: LD_ADDR_VAR 0 4
81920: PUSH
81921: LD_VAR 0 1
81925: PUSH
81926: FOR_IN
81927: IFFALSE 81965
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81929: LD_ADDR_VAR 0 5
81933: PUSH
81934: LD_VAR 0 5
81938: PPUSH
81939: LD_VAR 0 5
81943: PUSH
81944: LD_INT 1
81946: PLUS
81947: PPUSH
81948: LD_VAR 0 4
81952: PPUSH
81953: CALL_OW 256
81957: PPUSH
81958: CALL_OW 2
81962: ST_TO_ADDR
81963: GO 81926
81965: POP
81966: POP
// if not tmp then
81967: LD_VAR 0 5
81971: NOT
81972: IFFALSE 81976
// exit ;
81974: GO 82024
// if asc then
81976: LD_VAR 0 2
81980: IFFALSE 82004
// result := SortListByListAsc ( units , tmp ) else
81982: LD_ADDR_VAR 0 3
81986: PUSH
81987: LD_VAR 0 1
81991: PPUSH
81992: LD_VAR 0 5
81996: PPUSH
81997: CALL_OW 76
82001: ST_TO_ADDR
82002: GO 82024
// result := SortListByListDesc ( units , tmp ) ;
82004: LD_ADDR_VAR 0 3
82008: PUSH
82009: LD_VAR 0 1
82013: PPUSH
82014: LD_VAR 0 5
82018: PPUSH
82019: CALL_OW 77
82023: ST_TO_ADDR
// end ;
82024: LD_VAR 0 3
82028: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82029: LD_INT 0
82031: PPUSH
82032: PPUSH
// task := GetTaskList ( mech ) ;
82033: LD_ADDR_VAR 0 4
82037: PUSH
82038: LD_VAR 0 1
82042: PPUSH
82043: CALL_OW 437
82047: ST_TO_ADDR
// if not task then
82048: LD_VAR 0 4
82052: NOT
82053: IFFALSE 82057
// exit ;
82055: GO 82101
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82057: LD_ADDR_VAR 0 3
82061: PUSH
82062: LD_VAR 0 4
82066: PUSH
82067: LD_INT 1
82069: ARRAY
82070: PUSH
82071: LD_INT 1
82073: ARRAY
82074: PUSH
82075: LD_STRING r
82077: EQUAL
82078: IFFALSE 82100
82080: PUSH
82081: LD_VAR 0 4
82085: PUSH
82086: LD_INT 1
82088: ARRAY
82089: PUSH
82090: LD_INT 4
82092: ARRAY
82093: PUSH
82094: LD_VAR 0 2
82098: EQUAL
82099: AND
82100: ST_TO_ADDR
// end ;
82101: LD_VAR 0 3
82105: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82106: LD_INT 0
82108: PPUSH
// SetDir ( unit , d ) ;
82109: LD_VAR 0 1
82113: PPUSH
82114: LD_VAR 0 4
82118: PPUSH
82119: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
82123: LD_ADDR_VAR 0 6
82127: PUSH
82128: LD_VAR 0 1
82132: PPUSH
82133: LD_VAR 0 2
82137: PPUSH
82138: LD_VAR 0 3
82142: PPUSH
82143: LD_VAR 0 5
82147: PPUSH
82148: CALL_OW 48
82152: ST_TO_ADDR
// end ;
82153: LD_VAR 0 6
82157: RET
// export function ToNaturalNumber ( number ) ; begin
82158: LD_INT 0
82160: PPUSH
// result := number div 1 ;
82161: LD_ADDR_VAR 0 2
82165: PUSH
82166: LD_VAR 0 1
82170: PUSH
82171: LD_INT 1
82173: DIV
82174: ST_TO_ADDR
// if number < 0 then
82175: LD_VAR 0 1
82179: PUSH
82180: LD_INT 0
82182: LESS
82183: IFFALSE 82193
// result := 0 ;
82185: LD_ADDR_VAR 0 2
82189: PUSH
82190: LD_INT 0
82192: ST_TO_ADDR
// end ;
82193: LD_VAR 0 2
82197: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
82198: LD_INT 0
82200: PPUSH
82201: PPUSH
82202: PPUSH
// if not buildings then
82203: LD_VAR 0 1
82207: NOT
82208: IFFALSE 82212
// exit ;
82210: GO 82327
// tmp := [ ] ;
82212: LD_ADDR_VAR 0 5
82216: PUSH
82217: EMPTY
82218: ST_TO_ADDR
// for b in buildings do
82219: LD_ADDR_VAR 0 4
82223: PUSH
82224: LD_VAR 0 1
82228: PUSH
82229: FOR_IN
82230: IFFALSE 82268
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
82232: LD_ADDR_VAR 0 5
82236: PUSH
82237: LD_VAR 0 5
82241: PPUSH
82242: LD_VAR 0 5
82246: PUSH
82247: LD_INT 1
82249: PLUS
82250: PPUSH
82251: LD_VAR 0 4
82255: PPUSH
82256: CALL_OW 266
82260: PPUSH
82261: CALL_OW 1
82265: ST_TO_ADDR
82266: GO 82229
82268: POP
82269: POP
// if not tmp then
82270: LD_VAR 0 5
82274: NOT
82275: IFFALSE 82279
// exit ;
82277: GO 82327
// if asc then
82279: LD_VAR 0 2
82283: IFFALSE 82307
// result := SortListByListAsc ( buildings , tmp ) else
82285: LD_ADDR_VAR 0 3
82289: PUSH
82290: LD_VAR 0 1
82294: PPUSH
82295: LD_VAR 0 5
82299: PPUSH
82300: CALL_OW 76
82304: ST_TO_ADDR
82305: GO 82327
// result := SortListByListDesc ( buildings , tmp ) ;
82307: LD_ADDR_VAR 0 3
82311: PUSH
82312: LD_VAR 0 1
82316: PPUSH
82317: LD_VAR 0 5
82321: PPUSH
82322: CALL_OW 77
82326: ST_TO_ADDR
// end ;
82327: LD_VAR 0 3
82331: RET
// export function SortByClass ( units , class ) ; var un ; begin
82332: LD_INT 0
82334: PPUSH
82335: PPUSH
// if not units or not class then
82336: LD_VAR 0 1
82340: NOT
82341: IFTRUE 82350
82343: PUSH
82344: LD_VAR 0 2
82348: NOT
82349: OR
82350: IFFALSE 82354
// exit ;
82352: GO 82449
// result := [ ] ;
82354: LD_ADDR_VAR 0 3
82358: PUSH
82359: EMPTY
82360: ST_TO_ADDR
// for un in units do
82361: LD_ADDR_VAR 0 4
82365: PUSH
82366: LD_VAR 0 1
82370: PUSH
82371: FOR_IN
82372: IFFALSE 82447
// if GetClass ( un ) = class then
82374: LD_VAR 0 4
82378: PPUSH
82379: CALL_OW 257
82383: PUSH
82384: LD_VAR 0 2
82388: EQUAL
82389: IFFALSE 82416
// result := Insert ( result , 1 , un ) else
82391: LD_ADDR_VAR 0 3
82395: PUSH
82396: LD_VAR 0 3
82400: PPUSH
82401: LD_INT 1
82403: PPUSH
82404: LD_VAR 0 4
82408: PPUSH
82409: CALL_OW 2
82413: ST_TO_ADDR
82414: GO 82445
// result := Replace ( result , result + 1 , un ) ;
82416: LD_ADDR_VAR 0 3
82420: PUSH
82421: LD_VAR 0 3
82425: PPUSH
82426: LD_VAR 0 3
82430: PUSH
82431: LD_INT 1
82433: PLUS
82434: PPUSH
82435: LD_VAR 0 4
82439: PPUSH
82440: CALL_OW 1
82444: ST_TO_ADDR
82445: GO 82371
82447: POP
82448: POP
// end ;
82449: LD_VAR 0 3
82453: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82454: LD_INT 0
82456: PPUSH
82457: PPUSH
82458: PPUSH
82459: PPUSH
82460: PPUSH
82461: PPUSH
82462: PPUSH
// result := [ ] ;
82463: LD_ADDR_VAR 0 4
82467: PUSH
82468: EMPTY
82469: ST_TO_ADDR
// if x - r < 0 then
82470: LD_VAR 0 1
82474: PUSH
82475: LD_VAR 0 3
82479: MINUS
82480: PUSH
82481: LD_INT 0
82483: LESS
82484: IFFALSE 82496
// min_x := 0 else
82486: LD_ADDR_VAR 0 8
82490: PUSH
82491: LD_INT 0
82493: ST_TO_ADDR
82494: GO 82512
// min_x := x - r ;
82496: LD_ADDR_VAR 0 8
82500: PUSH
82501: LD_VAR 0 1
82505: PUSH
82506: LD_VAR 0 3
82510: MINUS
82511: ST_TO_ADDR
// if y - r < 0 then
82512: LD_VAR 0 2
82516: PUSH
82517: LD_VAR 0 3
82521: MINUS
82522: PUSH
82523: LD_INT 0
82525: LESS
82526: IFFALSE 82538
// min_y := 0 else
82528: LD_ADDR_VAR 0 7
82532: PUSH
82533: LD_INT 0
82535: ST_TO_ADDR
82536: GO 82554
// min_y := y - r ;
82538: LD_ADDR_VAR 0 7
82542: PUSH
82543: LD_VAR 0 2
82547: PUSH
82548: LD_VAR 0 3
82552: MINUS
82553: ST_TO_ADDR
// max_x := x + r ;
82554: LD_ADDR_VAR 0 9
82558: PUSH
82559: LD_VAR 0 1
82563: PUSH
82564: LD_VAR 0 3
82568: PLUS
82569: ST_TO_ADDR
// max_y := y + r ;
82570: LD_ADDR_VAR 0 10
82574: PUSH
82575: LD_VAR 0 2
82579: PUSH
82580: LD_VAR 0 3
82584: PLUS
82585: ST_TO_ADDR
// for _x = min_x to max_x do
82586: LD_ADDR_VAR 0 5
82590: PUSH
82591: DOUBLE
82592: LD_VAR 0 8
82596: DEC
82597: ST_TO_ADDR
82598: LD_VAR 0 9
82602: PUSH
82603: FOR_TO
82604: IFFALSE 82705
// for _y = min_y to max_y do
82606: LD_ADDR_VAR 0 6
82610: PUSH
82611: DOUBLE
82612: LD_VAR 0 7
82616: DEC
82617: ST_TO_ADDR
82618: LD_VAR 0 10
82622: PUSH
82623: FOR_TO
82624: IFFALSE 82701
// begin if not ValidHex ( _x , _y ) then
82626: LD_VAR 0 5
82630: PPUSH
82631: LD_VAR 0 6
82635: PPUSH
82636: CALL_OW 488
82640: NOT
82641: IFFALSE 82645
// continue ;
82643: GO 82623
// if GetResourceTypeXY ( _x , _y ) then
82645: LD_VAR 0 5
82649: PPUSH
82650: LD_VAR 0 6
82654: PPUSH
82655: CALL_OW 283
82659: IFFALSE 82699
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82661: LD_ADDR_VAR 0 4
82665: PUSH
82666: LD_VAR 0 4
82670: PPUSH
82671: LD_VAR 0 4
82675: PUSH
82676: LD_INT 1
82678: PLUS
82679: PPUSH
82680: LD_VAR 0 5
82684: PUSH
82685: LD_VAR 0 6
82689: PUSH
82690: EMPTY
82691: LIST
82692: LIST
82693: PPUSH
82694: CALL_OW 1
82698: ST_TO_ADDR
// end ;
82699: GO 82623
82701: POP
82702: POP
82703: GO 82603
82705: POP
82706: POP
// end ;
82707: LD_VAR 0 4
82711: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82712: LD_INT 0
82714: PPUSH
82715: PPUSH
82716: PPUSH
82717: PPUSH
82718: PPUSH
82719: PPUSH
82720: PPUSH
82721: PPUSH
// if not units then
82722: LD_VAR 0 1
82726: NOT
82727: IFFALSE 82731
// exit ;
82729: GO 83263
// result := UnitFilter ( units , [ f_ok ] ) ;
82731: LD_ADDR_VAR 0 3
82735: PUSH
82736: LD_VAR 0 1
82740: PPUSH
82741: LD_INT 50
82743: PUSH
82744: EMPTY
82745: LIST
82746: PPUSH
82747: CALL_OW 72
82751: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82752: LD_ADDR_VAR 0 8
82756: PUSH
82757: LD_VAR 0 1
82761: PUSH
82762: LD_INT 1
82764: ARRAY
82765: PPUSH
82766: CALL_OW 255
82770: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82771: LD_ADDR_VAR 0 10
82775: PUSH
82776: LD_INT 29
82778: PUSH
82779: LD_INT 91
82781: PUSH
82782: LD_INT 49
82784: PUSH
82785: EMPTY
82786: LIST
82787: LIST
82788: LIST
82789: ST_TO_ADDR
// if not result then
82790: LD_VAR 0 3
82794: NOT
82795: IFFALSE 82799
// exit ;
82797: GO 83263
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82799: LD_ADDR_VAR 0 5
82803: PUSH
82804: LD_INT 81
82806: PUSH
82807: LD_VAR 0 8
82811: PUSH
82812: EMPTY
82813: LIST
82814: LIST
82815: PPUSH
82816: CALL_OW 69
82820: ST_TO_ADDR
// for i in result do
82821: LD_ADDR_VAR 0 4
82825: PUSH
82826: LD_VAR 0 3
82830: PUSH
82831: FOR_IN
82832: IFFALSE 83261
// begin tag := GetTag ( i ) + 1 ;
82834: LD_ADDR_VAR 0 9
82838: PUSH
82839: LD_VAR 0 4
82843: PPUSH
82844: CALL_OW 110
82848: PUSH
82849: LD_INT 1
82851: PLUS
82852: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82853: LD_ADDR_VAR 0 7
82857: PUSH
82858: LD_VAR 0 4
82862: PPUSH
82863: CALL_OW 250
82867: PPUSH
82868: LD_VAR 0 4
82872: PPUSH
82873: CALL_OW 251
82877: PPUSH
82878: LD_INT 4
82880: PPUSH
82881: CALL 82454 0 3
82885: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82886: LD_VAR 0 4
82890: PPUSH
82891: CALL_OW 247
82895: PUSH
82896: LD_INT 2
82898: EQUAL
82899: IFFALSE 82911
82901: PUSH
82902: LD_VAR 0 7
82906: PUSH
82907: LD_INT 2
82909: GREATER
82910: AND
82911: IFFALSE 82931
82913: PUSH
82914: LD_VAR 0 4
82918: PPUSH
82919: CALL_OW 264
82923: PUSH
82924: LD_VAR 0 10
82928: IN
82929: NOT
82930: AND
82931: IFFALSE 82970
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82933: LD_VAR 0 4
82937: PPUSH
82938: LD_VAR 0 7
82942: PUSH
82943: LD_INT 1
82945: ARRAY
82946: PUSH
82947: LD_INT 1
82949: ARRAY
82950: PPUSH
82951: LD_VAR 0 7
82955: PUSH
82956: LD_INT 1
82958: ARRAY
82959: PUSH
82960: LD_INT 2
82962: ARRAY
82963: PPUSH
82964: CALL_OW 116
82968: GO 83259
// if path > tag then
82970: LD_VAR 0 2
82974: PUSH
82975: LD_VAR 0 9
82979: GREATER
82980: IFFALSE 83188
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82982: LD_ADDR_VAR 0 6
82986: PUSH
82987: LD_VAR 0 5
82991: PPUSH
82992: LD_INT 91
82994: PUSH
82995: LD_VAR 0 4
82999: PUSH
83000: LD_INT 8
83002: PUSH
83003: EMPTY
83004: LIST
83005: LIST
83006: LIST
83007: PPUSH
83008: CALL_OW 72
83012: ST_TO_ADDR
// if nearEnemy then
83013: LD_VAR 0 6
83017: IFFALSE 83086
// begin if GetWeapon ( i ) = ru_time_lapser then
83019: LD_VAR 0 4
83023: PPUSH
83024: CALL_OW 264
83028: PUSH
83029: LD_INT 49
83031: EQUAL
83032: IFFALSE 83060
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83034: LD_VAR 0 4
83038: PPUSH
83039: LD_VAR 0 6
83043: PPUSH
83044: LD_VAR 0 4
83048: PPUSH
83049: CALL_OW 74
83053: PPUSH
83054: CALL_OW 112
83058: GO 83084
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83060: LD_VAR 0 4
83064: PPUSH
83065: LD_VAR 0 6
83069: PPUSH
83070: LD_VAR 0 4
83074: PPUSH
83075: CALL_OW 74
83079: PPUSH
83080: CALL 84344 0 2
// end else
83084: GO 83186
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83086: LD_VAR 0 4
83090: PPUSH
83091: LD_VAR 0 2
83095: PUSH
83096: LD_VAR 0 9
83100: ARRAY
83101: PUSH
83102: LD_INT 1
83104: ARRAY
83105: PPUSH
83106: LD_VAR 0 2
83110: PUSH
83111: LD_VAR 0 9
83115: ARRAY
83116: PUSH
83117: LD_INT 2
83119: ARRAY
83120: PPUSH
83121: CALL_OW 297
83125: PUSH
83126: LD_INT 6
83128: GREATER
83129: IFFALSE 83172
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83131: LD_VAR 0 4
83135: PPUSH
83136: LD_VAR 0 2
83140: PUSH
83141: LD_VAR 0 9
83145: ARRAY
83146: PUSH
83147: LD_INT 1
83149: ARRAY
83150: PPUSH
83151: LD_VAR 0 2
83155: PUSH
83156: LD_VAR 0 9
83160: ARRAY
83161: PUSH
83162: LD_INT 2
83164: ARRAY
83165: PPUSH
83166: CALL_OW 114
83170: GO 83186
// SetTag ( i , tag ) ;
83172: LD_VAR 0 4
83176: PPUSH
83177: LD_VAR 0 9
83181: PPUSH
83182: CALL_OW 109
// end else
83186: GO 83259
// if enemy then
83188: LD_VAR 0 5
83192: IFFALSE 83259
// begin if GetWeapon ( i ) = ru_time_lapser then
83194: LD_VAR 0 4
83198: PPUSH
83199: CALL_OW 264
83203: PUSH
83204: LD_INT 49
83206: EQUAL
83207: IFFALSE 83235
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83209: LD_VAR 0 4
83213: PPUSH
83214: LD_VAR 0 5
83218: PPUSH
83219: LD_VAR 0 4
83223: PPUSH
83224: CALL_OW 74
83228: PPUSH
83229: CALL_OW 112
83233: GO 83259
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83235: LD_VAR 0 4
83239: PPUSH
83240: LD_VAR 0 5
83244: PPUSH
83245: LD_VAR 0 4
83249: PPUSH
83250: CALL_OW 74
83254: PPUSH
83255: CALL 84344 0 2
// end ; end ;
83259: GO 82831
83261: POP
83262: POP
// end ;
83263: LD_VAR 0 3
83267: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83268: LD_INT 0
83270: PPUSH
83271: PPUSH
83272: PPUSH
// if not unit or IsInUnit ( unit ) then
83273: LD_VAR 0 1
83277: NOT
83278: IFTRUE 83291
83280: PUSH
83281: LD_VAR 0 1
83285: PPUSH
83286: CALL_OW 310
83290: OR
83291: IFFALSE 83295
// exit ;
83293: GO 83386
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83295: LD_ADDR_VAR 0 4
83299: PUSH
83300: LD_VAR 0 1
83304: PPUSH
83305: CALL_OW 250
83309: PPUSH
83310: LD_VAR 0 2
83314: PPUSH
83315: LD_INT 1
83317: PPUSH
83318: CALL_OW 272
83322: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83323: LD_ADDR_VAR 0 5
83327: PUSH
83328: LD_VAR 0 1
83332: PPUSH
83333: CALL_OW 251
83337: PPUSH
83338: LD_VAR 0 2
83342: PPUSH
83343: LD_INT 1
83345: PPUSH
83346: CALL_OW 273
83350: ST_TO_ADDR
// if ValidHex ( x , y ) then
83351: LD_VAR 0 4
83355: PPUSH
83356: LD_VAR 0 5
83360: PPUSH
83361: CALL_OW 488
83365: IFFALSE 83386
// ComTurnXY ( unit , x , y ) ;
83367: LD_VAR 0 1
83371: PPUSH
83372: LD_VAR 0 4
83376: PPUSH
83377: LD_VAR 0 5
83381: PPUSH
83382: CALL_OW 118
// end ;
83386: LD_VAR 0 3
83390: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83391: LD_INT 0
83393: PPUSH
83394: PPUSH
// result := false ;
83395: LD_ADDR_VAR 0 3
83399: PUSH
83400: LD_INT 0
83402: ST_TO_ADDR
// if not units then
83403: LD_VAR 0 2
83407: NOT
83408: IFFALSE 83412
// exit ;
83410: GO 83457
// for i in units do
83412: LD_ADDR_VAR 0 4
83416: PUSH
83417: LD_VAR 0 2
83421: PUSH
83422: FOR_IN
83423: IFFALSE 83455
// if See ( side , i ) then
83425: LD_VAR 0 1
83429: PPUSH
83430: LD_VAR 0 4
83434: PPUSH
83435: CALL_OW 292
83439: IFFALSE 83453
// begin result := true ;
83441: LD_ADDR_VAR 0 3
83445: PUSH
83446: LD_INT 1
83448: ST_TO_ADDR
// exit ;
83449: POP
83450: POP
83451: GO 83457
// end ;
83453: GO 83422
83455: POP
83456: POP
// end ;
83457: LD_VAR 0 3
83461: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83462: LD_INT 0
83464: PPUSH
83465: PPUSH
83466: PPUSH
83467: PPUSH
// if not unit or not points then
83468: LD_VAR 0 1
83472: NOT
83473: IFTRUE 83482
83475: PUSH
83476: LD_VAR 0 2
83480: NOT
83481: OR
83482: IFFALSE 83486
// exit ;
83484: GO 83576
// dist := 99999 ;
83486: LD_ADDR_VAR 0 5
83490: PUSH
83491: LD_INT 99999
83493: ST_TO_ADDR
// for i in points do
83494: LD_ADDR_VAR 0 4
83498: PUSH
83499: LD_VAR 0 2
83503: PUSH
83504: FOR_IN
83505: IFFALSE 83574
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83507: LD_ADDR_VAR 0 6
83511: PUSH
83512: LD_VAR 0 1
83516: PPUSH
83517: LD_VAR 0 4
83521: PUSH
83522: LD_INT 1
83524: ARRAY
83525: PPUSH
83526: LD_VAR 0 4
83530: PUSH
83531: LD_INT 2
83533: ARRAY
83534: PPUSH
83535: CALL_OW 297
83539: ST_TO_ADDR
// if tmpDist < dist then
83540: LD_VAR 0 6
83544: PUSH
83545: LD_VAR 0 5
83549: LESS
83550: IFFALSE 83572
// begin result := i ;
83552: LD_ADDR_VAR 0 3
83556: PUSH
83557: LD_VAR 0 4
83561: ST_TO_ADDR
// dist := tmpDist ;
83562: LD_ADDR_VAR 0 5
83566: PUSH
83567: LD_VAR 0 6
83571: ST_TO_ADDR
// end ; end ;
83572: GO 83504
83574: POP
83575: POP
// end ;
83576: LD_VAR 0 3
83580: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83581: LD_INT 0
83583: PPUSH
// uc_side := side ;
83584: LD_ADDR_OWVAR 20
83588: PUSH
83589: LD_VAR 0 1
83593: ST_TO_ADDR
// uc_nation := 3 ;
83594: LD_ADDR_OWVAR 21
83598: PUSH
83599: LD_INT 3
83601: ST_TO_ADDR
// vc_chassis := 25 ;
83602: LD_ADDR_OWVAR 37
83606: PUSH
83607: LD_INT 25
83609: ST_TO_ADDR
// vc_engine := engine_siberite ;
83610: LD_ADDR_OWVAR 39
83614: PUSH
83615: LD_INT 3
83617: ST_TO_ADDR
// vc_control := control_computer ;
83618: LD_ADDR_OWVAR 38
83622: PUSH
83623: LD_INT 3
83625: ST_TO_ADDR
// vc_weapon := 59 ;
83626: LD_ADDR_OWVAR 40
83630: PUSH
83631: LD_INT 59
83633: ST_TO_ADDR
// result := CreateVehicle ;
83634: LD_ADDR_VAR 0 5
83638: PUSH
83639: CALL_OW 45
83643: ST_TO_ADDR
// SetDir ( result , d ) ;
83644: LD_VAR 0 5
83648: PPUSH
83649: LD_VAR 0 4
83653: PPUSH
83654: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83658: LD_VAR 0 5
83662: PPUSH
83663: LD_VAR 0 2
83667: PPUSH
83668: LD_VAR 0 3
83672: PPUSH
83673: LD_INT 0
83675: PPUSH
83676: CALL_OW 48
// end ;
83680: LD_VAR 0 5
83684: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83685: LD_INT 0
83687: PPUSH
83688: PPUSH
83689: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83690: LD_ADDR_VAR 0 2
83694: PUSH
83695: LD_INT 0
83697: PUSH
83698: LD_INT 0
83700: PUSH
83701: LD_INT 0
83703: PUSH
83704: LD_INT 0
83706: PUSH
83707: EMPTY
83708: LIST
83709: LIST
83710: LIST
83711: LIST
83712: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83713: LD_VAR 0 1
83717: NOT
83718: IFTRUE 83751
83720: PUSH
83721: LD_VAR 0 1
83725: PPUSH
83726: CALL_OW 264
83730: PUSH
83731: LD_INT 12
83733: PUSH
83734: LD_INT 51
83736: PUSH
83737: LD_INT 32
83739: PUSH
83740: LD_INT 89
83742: PUSH
83743: EMPTY
83744: LIST
83745: LIST
83746: LIST
83747: LIST
83748: IN
83749: NOT
83750: OR
83751: IFFALSE 83755
// exit ;
83753: GO 83853
// for i := 1 to 3 do
83755: LD_ADDR_VAR 0 3
83759: PUSH
83760: DOUBLE
83761: LD_INT 1
83763: DEC
83764: ST_TO_ADDR
83765: LD_INT 3
83767: PUSH
83768: FOR_TO
83769: IFFALSE 83851
// begin tmp := GetCargo ( cargo , i ) ;
83771: LD_ADDR_VAR 0 4
83775: PUSH
83776: LD_VAR 0 1
83780: PPUSH
83781: LD_VAR 0 3
83785: PPUSH
83786: CALL_OW 289
83790: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83791: LD_ADDR_VAR 0 2
83795: PUSH
83796: LD_VAR 0 2
83800: PPUSH
83801: LD_VAR 0 3
83805: PPUSH
83806: LD_VAR 0 4
83810: PPUSH
83811: CALL_OW 1
83815: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83816: LD_ADDR_VAR 0 2
83820: PUSH
83821: LD_VAR 0 2
83825: PPUSH
83826: LD_INT 4
83828: PPUSH
83829: LD_VAR 0 2
83833: PUSH
83834: LD_INT 4
83836: ARRAY
83837: PUSH
83838: LD_VAR 0 4
83842: PLUS
83843: PPUSH
83844: CALL_OW 1
83848: ST_TO_ADDR
// end ;
83849: GO 83768
83851: POP
83852: POP
// end ;
83853: LD_VAR 0 2
83857: RET
// export function Length ( array ) ; begin
83858: LD_INT 0
83860: PPUSH
// result := array + 0 ;
83861: LD_ADDR_VAR 0 2
83865: PUSH
83866: LD_VAR 0 1
83870: PUSH
83871: LD_INT 0
83873: PLUS
83874: ST_TO_ADDR
// end ;
83875: LD_VAR 0 2
83879: RET
// export function PrepareArray ( array ) ; begin
83880: LD_INT 0
83882: PPUSH
// result := array diff 0 ;
83883: LD_ADDR_VAR 0 2
83887: PUSH
83888: LD_VAR 0 1
83892: PUSH
83893: LD_INT 0
83895: DIFF
83896: ST_TO_ADDR
// if not result [ 1 ] then
83897: LD_VAR 0 2
83901: PUSH
83902: LD_INT 1
83904: ARRAY
83905: NOT
83906: IFFALSE 83926
// result := Delete ( result , 1 ) ;
83908: LD_ADDR_VAR 0 2
83912: PUSH
83913: LD_VAR 0 2
83917: PPUSH
83918: LD_INT 1
83920: PPUSH
83921: CALL_OW 3
83925: ST_TO_ADDR
// end ;
83926: LD_VAR 0 2
83930: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83931: LD_INT 0
83933: PPUSH
83934: PPUSH
83935: PPUSH
83936: PPUSH
// sibRocketRange := 25 ;
83937: LD_ADDR_VAR 0 6
83941: PUSH
83942: LD_INT 25
83944: ST_TO_ADDR
// result := false ;
83945: LD_ADDR_VAR 0 4
83949: PUSH
83950: LD_INT 0
83952: ST_TO_ADDR
// for i := 0 to 5 do
83953: LD_ADDR_VAR 0 5
83957: PUSH
83958: DOUBLE
83959: LD_INT 0
83961: DEC
83962: ST_TO_ADDR
83963: LD_INT 5
83965: PUSH
83966: FOR_TO
83967: IFFALSE 84034
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83969: LD_VAR 0 1
83973: PPUSH
83974: LD_VAR 0 5
83978: PPUSH
83979: LD_VAR 0 6
83983: PPUSH
83984: CALL_OW 272
83988: PPUSH
83989: LD_VAR 0 2
83993: PPUSH
83994: LD_VAR 0 5
83998: PPUSH
83999: LD_VAR 0 6
84003: PPUSH
84004: CALL_OW 273
84008: PPUSH
84009: LD_VAR 0 3
84013: PPUSH
84014: CALL_OW 309
84018: IFFALSE 84032
// begin result := true ;
84020: LD_ADDR_VAR 0 4
84024: PUSH
84025: LD_INT 1
84027: ST_TO_ADDR
// exit ;
84028: POP
84029: POP
84030: GO 84036
// end ;
84032: GO 83966
84034: POP
84035: POP
// end ;
84036: LD_VAR 0 4
84040: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84041: LD_INT 0
84043: PPUSH
84044: PPUSH
84045: PPUSH
// if btype = b_depot then
84046: LD_VAR 0 2
84050: PUSH
84051: LD_INT 0
84053: EQUAL
84054: IFFALSE 84066
// begin result := true ;
84056: LD_ADDR_VAR 0 3
84060: PUSH
84061: LD_INT 1
84063: ST_TO_ADDR
// exit ;
84064: GO 84186
// end ; pom := GetBase ( depot ) ;
84066: LD_ADDR_VAR 0 4
84070: PUSH
84071: LD_VAR 0 1
84075: PPUSH
84076: CALL_OW 274
84080: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84081: LD_ADDR_VAR 0 5
84085: PUSH
84086: LD_VAR 0 2
84090: PPUSH
84091: LD_VAR 0 1
84095: PPUSH
84096: CALL_OW 248
84100: PPUSH
84101: CALL_OW 450
84105: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84106: LD_ADDR_VAR 0 3
84110: PUSH
84111: LD_VAR 0 4
84115: PPUSH
84116: LD_INT 1
84118: PPUSH
84119: CALL_OW 275
84123: PUSH
84124: LD_VAR 0 5
84128: PUSH
84129: LD_INT 1
84131: ARRAY
84132: GREATEREQUAL
84133: IFFALSE 84159
84135: PUSH
84136: LD_VAR 0 4
84140: PPUSH
84141: LD_INT 2
84143: PPUSH
84144: CALL_OW 275
84148: PUSH
84149: LD_VAR 0 5
84153: PUSH
84154: LD_INT 2
84156: ARRAY
84157: GREATEREQUAL
84158: AND
84159: IFFALSE 84185
84161: PUSH
84162: LD_VAR 0 4
84166: PPUSH
84167: LD_INT 3
84169: PPUSH
84170: CALL_OW 275
84174: PUSH
84175: LD_VAR 0 5
84179: PUSH
84180: LD_INT 3
84182: ARRAY
84183: GREATEREQUAL
84184: AND
84185: ST_TO_ADDR
// end ;
84186: LD_VAR 0 3
84190: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84191: LD_INT 0
84193: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84194: LD_VAR 0 1
84198: PPUSH
84199: LD_VAR 0 2
84203: PPUSH
84204: LD_INT 0
84206: PPUSH
84207: LD_INT 0
84209: PPUSH
84210: LD_INT 1
84212: PPUSH
84213: LD_INT 0
84215: PPUSH
84216: CALL_OW 587
// end ;
84220: LD_VAR 0 3
84224: RET
// export function CenterOnNow ( unit ) ; begin
84225: LD_INT 0
84227: PPUSH
// result := IsInUnit ( unit ) ;
84228: LD_ADDR_VAR 0 2
84232: PUSH
84233: LD_VAR 0 1
84237: PPUSH
84238: CALL_OW 310
84242: ST_TO_ADDR
// if not result then
84243: LD_VAR 0 2
84247: NOT
84248: IFFALSE 84260
// result := unit ;
84250: LD_ADDR_VAR 0 2
84254: PUSH
84255: LD_VAR 0 1
84259: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84260: LD_VAR 0 1
84264: PPUSH
84265: CALL_OW 87
// end ;
84269: LD_VAR 0 2
84273: RET
// export function ComMoveHex ( unit , hex ) ; begin
84274: LD_INT 0
84276: PPUSH
// if not hex then
84277: LD_VAR 0 2
84281: NOT
84282: IFFALSE 84286
// exit ;
84284: GO 84339
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84286: LD_VAR 0 2
84290: PUSH
84291: LD_INT 1
84293: ARRAY
84294: PPUSH
84295: LD_VAR 0 2
84299: PUSH
84300: LD_INT 2
84302: ARRAY
84303: PPUSH
84304: CALL_OW 428
84308: IFFALSE 84312
// exit ;
84310: GO 84339
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84312: LD_VAR 0 1
84316: PPUSH
84317: LD_VAR 0 2
84321: PUSH
84322: LD_INT 1
84324: ARRAY
84325: PPUSH
84326: LD_VAR 0 2
84330: PUSH
84331: LD_INT 2
84333: ARRAY
84334: PPUSH
84335: CALL_OW 111
// end ;
84339: LD_VAR 0 3
84343: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84344: LD_INT 0
84346: PPUSH
84347: PPUSH
84348: PPUSH
// if not unit or not enemy then
84349: LD_VAR 0 1
84353: NOT
84354: IFTRUE 84363
84356: PUSH
84357: LD_VAR 0 2
84361: NOT
84362: OR
84363: IFFALSE 84367
// exit ;
84365: GO 84493
// x := GetX ( enemy ) ;
84367: LD_ADDR_VAR 0 4
84371: PUSH
84372: LD_VAR 0 2
84376: PPUSH
84377: CALL_OW 250
84381: ST_TO_ADDR
// y := GetY ( enemy ) ;
84382: LD_ADDR_VAR 0 5
84386: PUSH
84387: LD_VAR 0 2
84391: PPUSH
84392: CALL_OW 251
84396: ST_TO_ADDR
// if ValidHex ( x , y ) then
84397: LD_VAR 0 4
84401: PPUSH
84402: LD_VAR 0 5
84406: PPUSH
84407: CALL_OW 488
84411: IFFALSE 84493
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84413: LD_VAR 0 2
84417: PPUSH
84418: CALL_OW 247
84422: PUSH
84423: LD_INT 3
84425: PUSH
84426: LD_INT 2
84428: PUSH
84429: EMPTY
84430: LIST
84431: LIST
84432: IN
84433: IFTRUE 84456
84435: PUSH
84436: LD_VAR 0 1
84440: PPUSH
84441: CALL_OW 255
84445: PPUSH
84446: LD_VAR 0 2
84450: PPUSH
84451: CALL_OW 292
84455: OR
84456: IFFALSE 84474
// ComAttackUnit ( unit , enemy ) else
84458: LD_VAR 0 1
84462: PPUSH
84463: LD_VAR 0 2
84467: PPUSH
84468: CALL_OW 115
84472: GO 84493
// ComAgressiveMove ( unit , x , y ) ;
84474: LD_VAR 0 1
84478: PPUSH
84479: LD_VAR 0 4
84483: PPUSH
84484: LD_VAR 0 5
84488: PPUSH
84489: CALL_OW 114
// end ;
84493: LD_VAR 0 3
84497: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84498: LD_INT 0
84500: PPUSH
84501: PPUSH
84502: PPUSH
// list := AreaToList ( area , 0 ) ;
84503: LD_ADDR_VAR 0 5
84507: PUSH
84508: LD_VAR 0 1
84512: PPUSH
84513: LD_INT 0
84515: PPUSH
84516: CALL_OW 517
84520: ST_TO_ADDR
// if not list then
84521: LD_VAR 0 5
84525: NOT
84526: IFFALSE 84530
// exit ;
84528: GO 84660
// if all then
84530: LD_VAR 0 2
84534: IFFALSE 84622
// begin for i := 1 to list [ 1 ] do
84536: LD_ADDR_VAR 0 4
84540: PUSH
84541: DOUBLE
84542: LD_INT 1
84544: DEC
84545: ST_TO_ADDR
84546: LD_VAR 0 5
84550: PUSH
84551: LD_INT 1
84553: ARRAY
84554: PUSH
84555: FOR_TO
84556: IFFALSE 84618
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84558: LD_ADDR_VAR 0 3
84562: PUSH
84563: LD_VAR 0 3
84567: PPUSH
84568: LD_VAR 0 3
84572: PUSH
84573: LD_INT 1
84575: PLUS
84576: PPUSH
84577: LD_VAR 0 5
84581: PUSH
84582: LD_INT 1
84584: ARRAY
84585: PUSH
84586: LD_VAR 0 4
84590: ARRAY
84591: PUSH
84592: LD_VAR 0 5
84596: PUSH
84597: LD_INT 2
84599: ARRAY
84600: PUSH
84601: LD_VAR 0 4
84605: ARRAY
84606: PUSH
84607: EMPTY
84608: LIST
84609: LIST
84610: PPUSH
84611: CALL_OW 1
84615: ST_TO_ADDR
84616: GO 84555
84618: POP
84619: POP
// exit ;
84620: GO 84660
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84622: LD_ADDR_VAR 0 3
84626: PUSH
84627: LD_VAR 0 5
84631: PUSH
84632: LD_INT 1
84634: ARRAY
84635: PUSH
84636: LD_INT 1
84638: ARRAY
84639: PUSH
84640: LD_VAR 0 5
84644: PUSH
84645: LD_INT 2
84647: ARRAY
84648: PUSH
84649: LD_INT 1
84651: ARRAY
84652: PUSH
84653: EMPTY
84654: LIST
84655: LIST
84656: PUSH
84657: EMPTY
84658: LIST
84659: ST_TO_ADDR
// end ;
84660: LD_VAR 0 3
84664: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84665: LD_INT 0
84667: PPUSH
84668: PPUSH
// list := AreaToList ( area , 0 ) ;
84669: LD_ADDR_VAR 0 4
84673: PUSH
84674: LD_VAR 0 1
84678: PPUSH
84679: LD_INT 0
84681: PPUSH
84682: CALL_OW 517
84686: ST_TO_ADDR
// if not list then
84687: LD_VAR 0 4
84691: NOT
84692: IFFALSE 84696
// exit ;
84694: GO 84737
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84696: LD_ADDR_VAR 0 3
84700: PUSH
84701: LD_VAR 0 4
84705: PUSH
84706: LD_INT 1
84708: ARRAY
84709: PUSH
84710: LD_INT 1
84712: ARRAY
84713: PUSH
84714: LD_VAR 0 4
84718: PUSH
84719: LD_INT 2
84721: ARRAY
84722: PUSH
84723: LD_INT 1
84725: ARRAY
84726: PUSH
84727: LD_VAR 0 2
84731: PUSH
84732: EMPTY
84733: LIST
84734: LIST
84735: LIST
84736: ST_TO_ADDR
// end ;
84737: LD_VAR 0 3
84741: RET
// export function First ( array ) ; begin
84742: LD_INT 0
84744: PPUSH
// if not array then
84745: LD_VAR 0 1
84749: NOT
84750: IFFALSE 84754
// exit ;
84752: GO 84768
// result := array [ 1 ] ;
84754: LD_ADDR_VAR 0 2
84758: PUSH
84759: LD_VAR 0 1
84763: PUSH
84764: LD_INT 1
84766: ARRAY
84767: ST_TO_ADDR
// end ;
84768: LD_VAR 0 2
84772: RET
// export function Last ( array ) ; begin
84773: LD_INT 0
84775: PPUSH
// if not array then
84776: LD_VAR 0 1
84780: NOT
84781: IFFALSE 84785
// exit ;
84783: GO 84801
// result := array [ array ] ;
84785: LD_ADDR_VAR 0 2
84789: PUSH
84790: LD_VAR 0 1
84794: PUSH
84795: LD_VAR 0 1
84799: ARRAY
84800: ST_TO_ADDR
// end ;
84801: LD_VAR 0 2
84805: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84806: LD_INT 0
84808: PPUSH
84809: PPUSH
// result := [ ] ;
84810: LD_ADDR_VAR 0 5
84814: PUSH
84815: EMPTY
84816: ST_TO_ADDR
// if not array then
84817: LD_VAR 0 1
84821: NOT
84822: IFFALSE 84826
// exit ;
84824: GO 84938
// for i := 1 to array do
84826: LD_ADDR_VAR 0 6
84830: PUSH
84831: DOUBLE
84832: LD_INT 1
84834: DEC
84835: ST_TO_ADDR
84836: LD_VAR 0 1
84840: PUSH
84841: FOR_TO
84842: IFFALSE 84936
// if array [ i ] [ index ] = value then
84844: LD_VAR 0 1
84848: PUSH
84849: LD_VAR 0 6
84853: ARRAY
84854: PUSH
84855: LD_VAR 0 2
84859: ARRAY
84860: PUSH
84861: LD_VAR 0 3
84865: EQUAL
84866: IFFALSE 84934
// begin if indexColumn then
84868: LD_VAR 0 4
84872: IFFALSE 84908
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84874: LD_ADDR_VAR 0 5
84878: PUSH
84879: LD_VAR 0 5
84883: PPUSH
84884: LD_VAR 0 1
84888: PUSH
84889: LD_VAR 0 6
84893: ARRAY
84894: PUSH
84895: LD_VAR 0 4
84899: ARRAY
84900: PPUSH
84901: CALL 79946 0 2
84905: ST_TO_ADDR
84906: GO 84934
// result := Join ( result , array [ i ] ) ;
84908: LD_ADDR_VAR 0 5
84912: PUSH
84913: LD_VAR 0 5
84917: PPUSH
84918: LD_VAR 0 1
84922: PUSH
84923: LD_VAR 0 6
84927: ARRAY
84928: PPUSH
84929: CALL 79946 0 2
84933: ST_TO_ADDR
// end ;
84934: GO 84841
84936: POP
84937: POP
// end ;
84938: LD_VAR 0 5
84942: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84943: LD_INT 0
84945: PPUSH
// if not vehicles or not parkingPoint then
84946: LD_VAR 0 1
84950: NOT
84951: IFTRUE 84960
84953: PUSH
84954: LD_VAR 0 2
84958: NOT
84959: OR
84960: IFFALSE 84964
// exit ;
84962: GO 85062
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84964: LD_ADDR_VAR 0 1
84968: PUSH
84969: LD_VAR 0 1
84973: PPUSH
84974: LD_INT 50
84976: PUSH
84977: EMPTY
84978: LIST
84979: PUSH
84980: LD_INT 3
84982: PUSH
84983: LD_INT 92
84985: PUSH
84986: LD_VAR 0 2
84990: PUSH
84991: LD_INT 1
84993: ARRAY
84994: PUSH
84995: LD_VAR 0 2
84999: PUSH
85000: LD_INT 2
85002: ARRAY
85003: PUSH
85004: LD_INT 8
85006: PUSH
85007: EMPTY
85008: LIST
85009: LIST
85010: LIST
85011: LIST
85012: PUSH
85013: EMPTY
85014: LIST
85015: LIST
85016: PUSH
85017: EMPTY
85018: LIST
85019: LIST
85020: PPUSH
85021: CALL_OW 72
85025: ST_TO_ADDR
// if not vehicles then
85026: LD_VAR 0 1
85030: NOT
85031: IFFALSE 85035
// exit ;
85033: GO 85062
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85035: LD_VAR 0 1
85039: PPUSH
85040: LD_VAR 0 2
85044: PUSH
85045: LD_INT 1
85047: ARRAY
85048: PPUSH
85049: LD_VAR 0 2
85053: PUSH
85054: LD_INT 2
85056: ARRAY
85057: PPUSH
85058: CALL_OW 111
// end ;
85062: LD_VAR 0 3
85066: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85067: LD_INT 0
85069: PPUSH
85070: PPUSH
85071: PPUSH
// if not side or not area then
85072: LD_VAR 0 1
85076: NOT
85077: IFTRUE 85086
85079: PUSH
85080: LD_VAR 0 2
85084: NOT
85085: OR
85086: IFFALSE 85090
// exit ;
85088: GO 85209
// tmp := AreaToList ( area , 0 ) ;
85090: LD_ADDR_VAR 0 5
85094: PUSH
85095: LD_VAR 0 2
85099: PPUSH
85100: LD_INT 0
85102: PPUSH
85103: CALL_OW 517
85107: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85108: LD_ADDR_VAR 0 4
85112: PUSH
85113: DOUBLE
85114: LD_INT 1
85116: DEC
85117: ST_TO_ADDR
85118: LD_VAR 0 5
85122: PUSH
85123: LD_INT 1
85125: ARRAY
85126: PUSH
85127: FOR_TO
85128: IFFALSE 85207
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85130: LD_VAR 0 5
85134: PUSH
85135: LD_INT 1
85137: ARRAY
85138: PUSH
85139: LD_VAR 0 4
85143: ARRAY
85144: PPUSH
85145: LD_VAR 0 5
85149: PUSH
85150: LD_INT 2
85152: ARRAY
85153: PUSH
85154: LD_VAR 0 4
85158: ARRAY
85159: PPUSH
85160: CALL_OW 351
85164: IFFALSE 85205
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85166: LD_VAR 0 5
85170: PUSH
85171: LD_INT 1
85173: ARRAY
85174: PUSH
85175: LD_VAR 0 4
85179: ARRAY
85180: PPUSH
85181: LD_VAR 0 5
85185: PUSH
85186: LD_INT 2
85188: ARRAY
85189: PUSH
85190: LD_VAR 0 4
85194: ARRAY
85195: PPUSH
85196: LD_VAR 0 1
85200: PPUSH
85201: CALL_OW 244
// end ;
85205: GO 85127
85207: POP
85208: POP
// end ;
85209: LD_VAR 0 3
85213: RET
// export function UniqueArray ( array ) ; var i ; begin
85214: LD_INT 0
85216: PPUSH
85217: PPUSH
// result := [ ] ;
85218: LD_ADDR_VAR 0 2
85222: PUSH
85223: EMPTY
85224: ST_TO_ADDR
// if not array then
85225: LD_VAR 0 1
85229: NOT
85230: IFFALSE 85234
// exit ;
85232: GO 85295
// for i := 1 to array do
85234: LD_ADDR_VAR 0 3
85238: PUSH
85239: DOUBLE
85240: LD_INT 1
85242: DEC
85243: ST_TO_ADDR
85244: LD_VAR 0 1
85248: PUSH
85249: FOR_TO
85250: IFFALSE 85293
// if not array [ i ] in result then
85252: LD_VAR 0 1
85256: PUSH
85257: LD_VAR 0 3
85261: ARRAY
85262: PUSH
85263: LD_VAR 0 2
85267: IN
85268: NOT
85269: IFFALSE 85291
// result := Join ( result , i ) ;
85271: LD_ADDR_VAR 0 2
85275: PUSH
85276: LD_VAR 0 2
85280: PPUSH
85281: LD_VAR 0 3
85285: PPUSH
85286: CALL 79946 0 2
85290: ST_TO_ADDR
85291: GO 85249
85293: POP
85294: POP
// end ; end_of_file
85295: LD_VAR 0 2
85299: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85300: LD_VAR 0 1
85304: PUSH
85305: LD_INT 200
85307: DOUBLE
85308: GREATEREQUAL
85309: IFFALSE 85317
85311: LD_INT 299
85313: DOUBLE
85314: LESSEQUAL
85315: IFTRUE 85319
85317: GO 85351
85319: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85320: LD_VAR 0 1
85324: PPUSH
85325: LD_VAR 0 2
85329: PPUSH
85330: LD_VAR 0 3
85334: PPUSH
85335: LD_VAR 0 4
85339: PPUSH
85340: LD_VAR 0 5
85344: PPUSH
85345: CALL 37057 0 5
85349: GO 85428
85351: LD_INT 300
85353: DOUBLE
85354: GREATEREQUAL
85355: IFFALSE 85363
85357: LD_INT 399
85359: DOUBLE
85360: LESSEQUAL
85361: IFTRUE 85365
85363: GO 85427
85365: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85366: LD_VAR 0 1
85370: PPUSH
85371: LD_VAR 0 2
85375: PPUSH
85376: LD_VAR 0 3
85380: PPUSH
85381: LD_VAR 0 4
85385: PPUSH
85386: LD_VAR 0 5
85390: PPUSH
85391: LD_VAR 0 6
85395: PPUSH
85396: LD_VAR 0 7
85400: PPUSH
85401: LD_VAR 0 8
85405: PPUSH
85406: LD_VAR 0 9
85410: PPUSH
85411: LD_VAR 0 10
85415: PPUSH
85416: LD_VAR 0 11
85420: PPUSH
85421: CALL 32941 0 11
85425: GO 85428
85427: POP
// end ;
85428: PPOPN 11
85430: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85431: LD_VAR 0 1
85435: PPUSH
85436: LD_VAR 0 2
85440: PPUSH
85441: LD_VAR 0 3
85445: PPUSH
85446: LD_VAR 0 4
85450: PPUSH
85451: LD_VAR 0 5
85455: PPUSH
85456: CALL 36438 0 5
// end ; end_of_file
85460: PPOPN 5
85462: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85463: LD_VAR 0 1
85467: PPUSH
85468: LD_VAR 0 2
85472: PPUSH
85473: LD_VAR 0 3
85477: PPUSH
85478: LD_VAR 0 4
85482: PPUSH
85483: LD_VAR 0 5
85487: PPUSH
85488: LD_VAR 0 6
85492: PPUSH
85493: CALL 20481 0 6
// end ;
85497: PPOPN 6
85499: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85500: LD_INT 0
85502: PPUSH
// begin if not units then
85503: LD_VAR 0 1
85507: NOT
85508: IFFALSE 85512
// exit ;
85510: GO 85512
// end ;
85512: PPOPN 7
85514: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85515: CALL 20368 0 0
// end ;
85519: PPOPN 1
85521: END
