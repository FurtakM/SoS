// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// PrepareNature ;
   8: CALL 665 0 0
// PrepareArabian ;
  12: CALL 1980 0 0
// PrepareAmerican ;
  16: CALL 4984 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9651 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 22
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 8
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 7
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 13
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 14
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 15
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_OWVAR 67
 176: ARRAY
 177: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 178: LD_ADDR_EXP 18
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 186: LD_ADDR_EXP 16
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// attackWave := 1 ;
 194: LD_ADDR_EXP 17
 198: PUSH
 199: LD_INT 1
 201: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
 202: LD_ADDR_EXP 19
 206: PUSH
 207: LD_INT 6
 209: PUSH
 210: LD_INT 8
 212: PUSH
 213: LD_INT 10
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: ST_TO_ADDR
// vehCounter := 0 ;
 227: LD_ADDR_EXP 20
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// convoyCounter := 0 ;
 235: LD_ADDR_EXP 21
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// ibrahimInDepot := false ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimIsFree := false ;
 251: LD_ADDR_EXP 24
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// maxConvoys := [ 16 , 15 , 14 ] [ Difficulty ] ;
 259: LD_ADDR_EXP 25
 263: PUSH
 264: LD_INT 16
 266: PUSH
 267: LD_INT 15
 269: PUSH
 270: LD_INT 14
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 284: LD_ADDR_EXP 12
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// end ; end_of_file
 292: LD_VAR 0 1
 296: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 297: LD_INT 0
 299: PPUSH
 300: PPUSH
// if exist_mode then
 301: LD_VAR 0 2
 305: IFFALSE 330
// unit := CreateCharacter ( prefix & ident ) else
 307: LD_ADDR_VAR 0 5
 311: PUSH
 312: LD_VAR 0 3
 316: PUSH
 317: LD_VAR 0 1
 321: STR
 322: PPUSH
 323: CALL_OW 34
 327: ST_TO_ADDR
 328: GO 345
// unit := NewCharacter ( ident ) ;
 330: LD_ADDR_VAR 0 5
 334: PUSH
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 25
 344: ST_TO_ADDR
// result := unit ;
 345: LD_ADDR_VAR 0 4
 349: PUSH
 350: LD_VAR 0 5
 354: ST_TO_ADDR
// end ;
 355: LD_VAR 0 4
 359: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 360: LD_INT 0
 362: PPUSH
// uc_side := side ;
 363: LD_ADDR_OWVAR 20
 367: PUSH
 368: LD_VAR 0 1
 372: ST_TO_ADDR
// uc_nation := nation ;
 373: LD_ADDR_OWVAR 21
 377: PUSH
 378: LD_VAR 0 2
 382: ST_TO_ADDR
// vc_chassis := chassis ;
 383: LD_ADDR_OWVAR 37
 387: PUSH
 388: LD_VAR 0 3
 392: ST_TO_ADDR
// vc_engine := engine ;
 393: LD_ADDR_OWVAR 39
 397: PUSH
 398: LD_VAR 0 4
 402: ST_TO_ADDR
// vc_control := control ;
 403: LD_ADDR_OWVAR 38
 407: PUSH
 408: LD_VAR 0 5
 412: ST_TO_ADDR
// vc_weapon := weapon ;
 413: LD_ADDR_OWVAR 40
 417: PUSH
 418: LD_VAR 0 6
 422: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 423: LD_ADDR_OWVAR 41
 427: PUSH
 428: LD_VAR 0 7
 432: ST_TO_ADDR
// result := CreateVehicle ;
 433: LD_ADDR_VAR 0 8
 437: PUSH
 438: CALL_OW 45
 442: ST_TO_ADDR
// end ;
 443: LD_VAR 0 8
 447: RET
// export function SayX ( units , ident ) ; var i ; begin
 448: LD_INT 0
 450: PPUSH
 451: PPUSH
// result := false ;
 452: LD_ADDR_VAR 0 3
 456: PUSH
 457: LD_INT 0
 459: ST_TO_ADDR
// if not units then
 460: LD_VAR 0 1
 464: NOT
 465: IFFALSE 469
// exit ;
 467: GO 523
// for i in units do
 469: LD_ADDR_VAR 0 4
 473: PUSH
 474: LD_VAR 0 1
 478: PUSH
 479: FOR_IN
 480: IFFALSE 521
// if IsOk ( i ) then
 482: LD_VAR 0 4
 486: PPUSH
 487: CALL_OW 302
 491: IFFALSE 519
// begin Say ( i , ident ) ;
 493: LD_VAR 0 4
 497: PPUSH
 498: LD_VAR 0 2
 502: PPUSH
 503: CALL_OW 88
// result := i ;
 507: LD_ADDR_VAR 0 3
 511: PUSH
 512: LD_VAR 0 4
 516: ST_TO_ADDR
// break ;
 517: GO 521
// end ;
 519: GO 479
 521: POP
 522: POP
// end ;
 523: LD_VAR 0 3
 527: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 528: LD_INT 0
 530: PPUSH
 531: PPUSH
// InitUc ;
 532: CALL_OW 18
// InitHc ;
 536: CALL_OW 19
// uc_side := 0 ;
 540: LD_ADDR_OWVAR 20
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// uc_nation := 0 ;
 548: LD_ADDR_OWVAR 21
 552: PUSH
 553: LD_INT 0
 555: ST_TO_ADDR
// for i = 1 to amount do
 556: LD_ADDR_VAR 0 4
 560: PUSH
 561: DOUBLE
 562: LD_INT 1
 564: DEC
 565: ST_TO_ADDR
 566: LD_VAR 0 2
 570: PUSH
 571: FOR_TO
 572: IFFALSE 654
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 574: LD_ADDR_OWVAR 29
 578: PUSH
 579: LD_INT 9
 581: PPUSH
 582: LD_INT 12
 584: PPUSH
 585: CALL_OW 12
 589: PUSH
 590: LD_INT 9
 592: PPUSH
 593: LD_INT 12
 595: PPUSH
 596: CALL_OW 12
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 605: LD_ADDR_OWVAR 35
 609: PUSH
 610: LD_INT 1
 612: NEG
 613: PPUSH
 614: LD_INT 1
 616: PPUSH
 617: CALL_OW 12
 621: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 622: LD_INT 0
 624: PPUSH
 625: LD_INT 12
 627: PPUSH
 628: LD_INT 1
 630: PPUSH
 631: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 635: CALL_OW 44
 639: PPUSH
 640: LD_VAR 0 1
 644: PPUSH
 645: LD_INT 0
 647: PPUSH
 648: CALL_OW 49
// end ;
 652: GO 571
 654: POP
 655: POP
// InitHc ;
 656: CALL_OW 19
// end ;
 660: LD_VAR 0 3
 664: RET
// export function PrepareNature ; var i ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 669: LD_INT 2
 671: PPUSH
 672: LD_INT 5
 674: PUSH
 675: LD_INT 4
 677: PUSH
 678: LD_INT 4
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: PUSH
 686: LD_OWVAR 67
 690: ARRAY
 691: PPUSH
 692: CALL 528 0 2
// for i := 1 to 2 do
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: DOUBLE
 702: LD_INT 1
 704: DEC
 705: ST_TO_ADDR
 706: LD_INT 2
 708: PUSH
 709: FOR_TO
 710: IFFALSE 745
// begin hc_class := 21 ;
 712: LD_ADDR_OWVAR 28
 716: PUSH
 717: LD_INT 21
 719: ST_TO_ADDR
// hc_gallery :=  ;
 720: LD_ADDR_OWVAR 33
 724: PUSH
 725: LD_STRING 
 727: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 728: CALL_OW 44
 732: PPUSH
 733: LD_INT 2
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL_OW 49
// end ;
 743: GO 709
 745: POP
 746: POP
// for i := 1 to 2 do
 747: LD_ADDR_VAR 0 2
 751: PUSH
 752: DOUBLE
 753: LD_INT 1
 755: DEC
 756: ST_TO_ADDR
 757: LD_INT 2
 759: PUSH
 760: FOR_TO
 761: IFFALSE 796
// begin hc_class := 18 ;
 763: LD_ADDR_OWVAR 28
 767: PUSH
 768: LD_INT 18
 770: ST_TO_ADDR
// hc_gallery :=  ;
 771: LD_ADDR_OWVAR 33
 775: PUSH
 776: LD_STRING 
 778: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 779: CALL_OW 44
 783: PPUSH
 784: LD_INT 2
 786: PPUSH
 787: LD_INT 0
 789: PPUSH
 790: CALL_OW 49
// end ;
 794: GO 760
 796: POP
 797: POP
// for i := 1 to 2 do
 798: LD_ADDR_VAR 0 2
 802: PUSH
 803: DOUBLE
 804: LD_INT 1
 806: DEC
 807: ST_TO_ADDR
 808: LD_INT 2
 810: PUSH
 811: FOR_TO
 812: IFFALSE 847
// begin hc_class := 13 ;
 814: LD_ADDR_OWVAR 28
 818: PUSH
 819: LD_INT 13
 821: ST_TO_ADDR
// hc_gallery :=  ;
 822: LD_ADDR_OWVAR 33
 826: PUSH
 827: LD_STRING 
 829: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 830: CALL_OW 44
 834: PPUSH
 835: LD_INT 2
 837: PPUSH
 838: LD_INT 0
 840: PPUSH
 841: CALL_OW 49
// end ;
 845: GO 811
 847: POP
 848: POP
// end ;
 849: LD_VAR 0 1
 853: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 854: LD_INT 0
 856: PPUSH
 857: PPUSH
 858: PPUSH
// if not observer or not unit then
 859: LD_VAR 0 1
 863: NOT
 864: PUSH
 865: LD_VAR 0 2
 869: NOT
 870: OR
 871: IFFALSE 875
// exit ;
 873: GO 923
// if not See ( GetSide ( observer ) , unit ) then
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 255
 884: PPUSH
 885: LD_VAR 0 2
 889: PPUSH
 890: CALL_OW 292
 894: NOT
 895: IFFALSE 899
// exit ;
 897: GO 923
// result := GetDistUnits ( observer , unit ) < 12 ;
 899: LD_ADDR_VAR 0 3
 903: PUSH
 904: LD_VAR 0 1
 908: PPUSH
 909: LD_VAR 0 2
 913: PPUSH
 914: CALL_OW 296
 918: PUSH
 919: LD_INT 12
 921: LESS
 922: ST_TO_ADDR
// end ;
 923: LD_VAR 0 3
 927: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 928: LD_INT 0
 930: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 931: LD_VAR 0 2
 935: PUSH
 936: LD_INT 1
 938: ARRAY
 939: PPUSH
 940: LD_VAR 0 2
 944: PUSH
 945: LD_INT 2
 947: ARRAY
 948: PPUSH
 949: CALL_OW 488
 953: PUSH
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: PPUSH
 963: LD_VAR 0 2
 967: PUSH
 968: LD_INT 2
 970: ARRAY
 971: PPUSH
 972: CALL_OW 428
 976: PUSH
 977: LD_INT 0
 979: EQUAL
 980: AND
 981: IFFALSE 1015
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 983: LD_VAR 0 1
 987: PPUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: LD_VAR 0 2
1001: PUSH
1002: LD_INT 2
1004: ARRAY
1005: PPUSH
1006: LD_VAR 0 3
1010: PPUSH
1011: CALL_OW 48
// end ;
1015: LD_VAR 0 4
1019: RET
// export function Video ( mode ) ; begin
1020: LD_INT 0
1022: PPUSH
// ingame_video = mode ;
1023: LD_ADDR_OWVAR 52
1027: PUSH
1028: LD_VAR 0 1
1032: ST_TO_ADDR
// interface_hidden = mode ;
1033: LD_ADDR_OWVAR 54
1037: PUSH
1038: LD_VAR 0 1
1042: ST_TO_ADDR
// end ;
1043: LD_VAR 0 2
1047: RET
// export function ReverseArray ( array ) ; var i ; begin
1048: LD_INT 0
1050: PPUSH
1051: PPUSH
// if not array then
1052: LD_VAR 0 1
1056: NOT
1057: IFFALSE 1061
// exit ;
1059: GO 1119
// result := [ ] ;
1061: LD_ADDR_VAR 0 2
1065: PUSH
1066: EMPTY
1067: ST_TO_ADDR
// for i := 1 to array do
1068: LD_ADDR_VAR 0 3
1072: PUSH
1073: DOUBLE
1074: LD_INT 1
1076: DEC
1077: ST_TO_ADDR
1078: LD_VAR 0 1
1082: PUSH
1083: FOR_TO
1084: IFFALSE 1117
// result := Insert ( result , 1 , array [ i ] ) ;
1086: LD_ADDR_VAR 0 2
1090: PUSH
1091: LD_VAR 0 2
1095: PPUSH
1096: LD_INT 1
1098: PPUSH
1099: LD_VAR 0 1
1103: PUSH
1104: LD_VAR 0 3
1108: ARRAY
1109: PPUSH
1110: CALL_OW 2
1114: ST_TO_ADDR
1115: GO 1083
1117: POP
1118: POP
// end ;
1119: LD_VAR 0 2
1123: RET
// export function ComExit ( unit ) ; begin
1124: LD_INT 0
1126: PPUSH
// result := IsInUnit ( unit ) ;
1127: LD_ADDR_VAR 0 2
1131: PUSH
1132: LD_VAR 0 1
1136: PPUSH
1137: CALL_OW 310
1141: ST_TO_ADDR
// if not result then
1142: LD_VAR 0 2
1146: NOT
1147: IFFALSE 1151
// exit ;
1149: GO 1186
// if GetType ( result ) = unit_vehicle then
1151: LD_VAR 0 2
1155: PPUSH
1156: CALL_OW 247
1160: PUSH
1161: LD_INT 2
1163: EQUAL
1164: IFFALSE 1177
// ComExitVehicle ( unit ) else
1166: LD_VAR 0 1
1170: PPUSH
1171: CALL_OW 121
1175: GO 1186
// ComExitBuilding ( unit ) ;
1177: LD_VAR 0 1
1181: PPUSH
1182: CALL_OW 122
// end ;
1186: LD_VAR 0 2
1190: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1191: LD_INT 0
1193: PPUSH
1194: PPUSH
// if not side or not nation then
1195: LD_VAR 0 1
1199: NOT
1200: PUSH
1201: LD_VAR 0 2
1205: NOT
1206: OR
1207: IFFALSE 1211
// exit ;
1209: GO 1975
// case nation of nation_american :
1211: LD_VAR 0 2
1215: PUSH
1216: LD_INT 1
1218: DOUBLE
1219: EQUAL
1220: IFTRUE 1224
1222: GO 1438
1224: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1225: LD_ADDR_VAR 0 4
1229: PUSH
1230: LD_INT 35
1232: PUSH
1233: LD_INT 45
1235: PUSH
1236: LD_INT 46
1238: PUSH
1239: LD_INT 47
1241: PUSH
1242: LD_INT 82
1244: PUSH
1245: LD_INT 83
1247: PUSH
1248: LD_INT 84
1250: PUSH
1251: LD_INT 85
1253: PUSH
1254: LD_INT 86
1256: PUSH
1257: LD_INT 1
1259: PUSH
1260: LD_INT 2
1262: PUSH
1263: LD_INT 6
1265: PUSH
1266: LD_INT 15
1268: PUSH
1269: LD_INT 16
1271: PUSH
1272: LD_INT 7
1274: PUSH
1275: LD_INT 12
1277: PUSH
1278: LD_INT 13
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: LD_INT 14
1286: PUSH
1287: LD_INT 20
1289: PUSH
1290: LD_INT 21
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 25
1298: PUSH
1299: LD_INT 32
1301: PUSH
1302: LD_INT 27
1304: PUSH
1305: LD_INT 36
1307: PUSH
1308: LD_INT 69
1310: PUSH
1311: LD_INT 39
1313: PUSH
1314: LD_INT 34
1316: PUSH
1317: LD_INT 40
1319: PUSH
1320: LD_INT 48
1322: PUSH
1323: LD_INT 49
1325: PUSH
1326: LD_INT 50
1328: PUSH
1329: LD_INT 51
1331: PUSH
1332: LD_INT 52
1334: PUSH
1335: LD_INT 53
1337: PUSH
1338: LD_INT 54
1340: PUSH
1341: LD_INT 55
1343: PUSH
1344: LD_INT 56
1346: PUSH
1347: LD_INT 57
1349: PUSH
1350: LD_INT 58
1352: PUSH
1353: LD_INT 59
1355: PUSH
1356: LD_INT 60
1358: PUSH
1359: LD_INT 61
1361: PUSH
1362: LD_INT 62
1364: PUSH
1365: LD_INT 80
1367: PUSH
1368: LD_INT 82
1370: PUSH
1371: LD_INT 83
1373: PUSH
1374: LD_INT 84
1376: PUSH
1377: LD_INT 85
1379: PUSH
1380: LD_INT 86
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: ST_TO_ADDR
1436: GO 1899
1438: LD_INT 2
1440: DOUBLE
1441: EQUAL
1442: IFTRUE 1446
1444: GO 1668
1446: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1447: LD_ADDR_VAR 0 4
1451: PUSH
1452: LD_INT 35
1454: PUSH
1455: LD_INT 45
1457: PUSH
1458: LD_INT 46
1460: PUSH
1461: LD_INT 47
1463: PUSH
1464: LD_INT 82
1466: PUSH
1467: LD_INT 83
1469: PUSH
1470: LD_INT 84
1472: PUSH
1473: LD_INT 85
1475: PUSH
1476: LD_INT 87
1478: PUSH
1479: LD_INT 70
1481: PUSH
1482: LD_INT 1
1484: PUSH
1485: LD_INT 11
1487: PUSH
1488: LD_INT 3
1490: PUSH
1491: LD_INT 4
1493: PUSH
1494: LD_INT 5
1496: PUSH
1497: LD_INT 6
1499: PUSH
1500: LD_INT 15
1502: PUSH
1503: LD_INT 18
1505: PUSH
1506: LD_INT 7
1508: PUSH
1509: LD_INT 17
1511: PUSH
1512: LD_INT 8
1514: PUSH
1515: LD_INT 20
1517: PUSH
1518: LD_INT 21
1520: PUSH
1521: LD_INT 22
1523: PUSH
1524: LD_INT 72
1526: PUSH
1527: LD_INT 26
1529: PUSH
1530: LD_INT 69
1532: PUSH
1533: LD_INT 39
1535: PUSH
1536: LD_INT 40
1538: PUSH
1539: LD_INT 41
1541: PUSH
1542: LD_INT 42
1544: PUSH
1545: LD_INT 43
1547: PUSH
1548: LD_INT 48
1550: PUSH
1551: LD_INT 49
1553: PUSH
1554: LD_INT 50
1556: PUSH
1557: LD_INT 51
1559: PUSH
1560: LD_INT 52
1562: PUSH
1563: LD_INT 53
1565: PUSH
1566: LD_INT 54
1568: PUSH
1569: LD_INT 55
1571: PUSH
1572: LD_INT 56
1574: PUSH
1575: LD_INT 60
1577: PUSH
1578: LD_INT 61
1580: PUSH
1581: LD_INT 62
1583: PUSH
1584: LD_INT 66
1586: PUSH
1587: LD_INT 67
1589: PUSH
1590: LD_INT 68
1592: PUSH
1593: LD_INT 81
1595: PUSH
1596: LD_INT 82
1598: PUSH
1599: LD_INT 83
1601: PUSH
1602: LD_INT 84
1604: PUSH
1605: LD_INT 85
1607: PUSH
1608: LD_INT 87
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: ST_TO_ADDR
1666: GO 1899
1668: LD_INT 3
1670: DOUBLE
1671: EQUAL
1672: IFTRUE 1676
1674: GO 1898
1676: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1677: LD_ADDR_VAR 0 4
1681: PUSH
1682: LD_INT 46
1684: PUSH
1685: LD_INT 47
1687: PUSH
1688: LD_INT 1
1690: PUSH
1691: LD_INT 2
1693: PUSH
1694: LD_INT 82
1696: PUSH
1697: LD_INT 83
1699: PUSH
1700: LD_INT 84
1702: PUSH
1703: LD_INT 85
1705: PUSH
1706: LD_INT 86
1708: PUSH
1709: LD_INT 11
1711: PUSH
1712: LD_INT 9
1714: PUSH
1715: LD_INT 20
1717: PUSH
1718: LD_INT 19
1720: PUSH
1721: LD_INT 21
1723: PUSH
1724: LD_INT 24
1726: PUSH
1727: LD_INT 22
1729: PUSH
1730: LD_INT 25
1732: PUSH
1733: LD_INT 28
1735: PUSH
1736: LD_INT 29
1738: PUSH
1739: LD_INT 30
1741: PUSH
1742: LD_INT 31
1744: PUSH
1745: LD_INT 37
1747: PUSH
1748: LD_INT 38
1750: PUSH
1751: LD_INT 32
1753: PUSH
1754: LD_INT 27
1756: PUSH
1757: LD_INT 33
1759: PUSH
1760: LD_INT 69
1762: PUSH
1763: LD_INT 39
1765: PUSH
1766: LD_INT 34
1768: PUSH
1769: LD_INT 40
1771: PUSH
1772: LD_INT 71
1774: PUSH
1775: LD_INT 23
1777: PUSH
1778: LD_INT 44
1780: PUSH
1781: LD_INT 48
1783: PUSH
1784: LD_INT 49
1786: PUSH
1787: LD_INT 50
1789: PUSH
1790: LD_INT 51
1792: PUSH
1793: LD_INT 52
1795: PUSH
1796: LD_INT 53
1798: PUSH
1799: LD_INT 54
1801: PUSH
1802: LD_INT 55
1804: PUSH
1805: LD_INT 56
1807: PUSH
1808: LD_INT 57
1810: PUSH
1811: LD_INT 58
1813: PUSH
1814: LD_INT 59
1816: PUSH
1817: LD_INT 63
1819: PUSH
1820: LD_INT 64
1822: PUSH
1823: LD_INT 65
1825: PUSH
1826: LD_INT 82
1828: PUSH
1829: LD_INT 83
1831: PUSH
1832: LD_INT 84
1834: PUSH
1835: LD_INT 85
1837: PUSH
1838: LD_INT 86
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: ST_TO_ADDR
1896: GO 1899
1898: POP
// if state > - 1 and state < 3 then
1899: LD_VAR 0 3
1903: PUSH
1904: LD_INT 1
1906: NEG
1907: GREATER
1908: PUSH
1909: LD_VAR 0 3
1913: PUSH
1914: LD_INT 3
1916: LESS
1917: AND
1918: IFFALSE 1975
// for i in result do
1920: LD_ADDR_VAR 0 5
1924: PUSH
1925: LD_VAR 0 4
1929: PUSH
1930: FOR_IN
1931: IFFALSE 1973
// if GetTech ( i , side ) <> state then
1933: LD_VAR 0 5
1937: PPUSH
1938: LD_VAR 0 1
1942: PPUSH
1943: CALL_OW 321
1947: PUSH
1948: LD_VAR 0 3
1952: NONEQUAL
1953: IFFALSE 1971
// result := result diff i ;
1955: LD_ADDR_VAR 0 4
1959: PUSH
1960: LD_VAR 0 4
1964: PUSH
1965: LD_VAR 0 5
1969: DIFF
1970: ST_TO_ADDR
1971: GO 1930
1973: POP
1974: POP
// end ; end_of_file
1975: LD_VAR 0 4
1979: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1980: LD_INT 0
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 5 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 5
1993: ST_TO_ADDR
// uc_nation := 2 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 2
2001: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 45 ) ;
2002: LD_INT 5
2004: PPUSH
2005: CALL_OW 274
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: LD_INT 45
2015: PPUSH
2016: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
2020: LD_ADDR_EXP 34
2024: PUSH
2025: LD_STRING Farmer
2027: PPUSH
2028: LD_INT 0
2030: PPUSH
2031: LD_STRING 
2033: PPUSH
2034: CALL 297 0 3
2038: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2039: LD_ADDR_EXP 35
2043: PUSH
2044: LD_STRING Omar
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: LD_STRING 
2052: PPUSH
2053: CALL 297 0 3
2057: ST_TO_ADDR
// omarSquad := [ ] ;
2058: LD_ADDR_EXP 38
2062: PUSH
2063: EMPTY
2064: ST_TO_ADDR
// heikeSquad := [ ] ;
2065: LD_ADDR_EXP 39
2069: PUSH
2070: EMPTY
2071: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
2072: LD_ADDR_EXP 40
2076: PUSH
2077: EMPTY
2078: ST_TO_ADDR
// omarCargo := [ ] ;
2079: LD_ADDR_EXP 41
2083: PUSH
2084: EMPTY
2085: ST_TO_ADDR
// for i := 1 to 5 do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: DOUBLE
2092: LD_INT 1
2094: DEC
2095: ST_TO_ADDR
2096: LD_INT 5
2098: PUSH
2099: FOR_TO
2100: IFFALSE 2258
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
2102: LD_INT 0
2104: PPUSH
2105: LD_INT 1
2107: PUSH
2108: LD_INT 1
2110: PUSH
2111: LD_INT 2
2113: PUSH
2114: LD_INT 1
2116: PUSH
2117: LD_INT 1
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: PUSH
2127: LD_VAR 0 2
2131: ARRAY
2132: PPUSH
2133: LD_INT 3
2135: PPUSH
2136: CALL_OW 380
// un := CreateHuman ;
2140: LD_ADDR_VAR 0 3
2144: PUSH
2145: CALL_OW 44
2149: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2150: LD_ADDR_EXP 38
2154: PUSH
2155: LD_EXP 38
2159: PUSH
2160: LD_VAR 0 3
2164: UNION
2165: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
2166: LD_VAR 0 3
2170: PPUSH
2171: LD_INT 87
2173: PUSH
2174: LD_INT 30
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 91
2183: PUSH
2184: LD_INT 32
2186: PUSH
2187: EMPTY
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 82
2193: PUSH
2194: LD_INT 15
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 79
2203: PUSH
2204: LD_INT 14
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: LD_INT 82
2213: PUSH
2214: LD_INT 13
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: PUSH
2228: LD_VAR 0 2
2232: ARRAY
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: CALL 928 0 3
// ComTurnXY ( un , 93 , 21 ) ;
2241: LD_VAR 0 3
2245: PPUSH
2246: LD_INT 93
2248: PPUSH
2249: LD_INT 21
2251: PPUSH
2252: CALL_OW 118
// end ;
2256: GO 2099
2258: POP
2259: POP
// uc_side := 2 ;
2260: LD_ADDR_OWVAR 20
2264: PUSH
2265: LD_INT 2
2267: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2268: LD_ADDR_EXP 26
2272: PUSH
2273: LD_STRING Heike
2275: PPUSH
2276: LD_EXP 1
2280: NOT
2281: PPUSH
2282: LD_EXP 2
2286: PPUSH
2287: CALL 297 0 3
2291: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2292: LD_ADDR_EXP 30
2296: PUSH
2297: LD_STRING Aviradze
2299: PPUSH
2300: LD_EXP 1
2304: NOT
2305: PPUSH
2306: LD_EXP 2
2310: PPUSH
2311: CALL 297 0 3
2315: ST_TO_ADDR
// tmp := [ ] ;
2316: LD_ADDR_VAR 0 4
2320: PUSH
2321: EMPTY
2322: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2323: LD_ADDR_EXP 27
2327: PUSH
2328: LD_STRING Givi
2330: PPUSH
2331: LD_EXP 1
2335: NOT
2336: PPUSH
2337: LD_EXP 2
2341: PPUSH
2342: CALL 297 0 3
2346: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2347: LD_ADDR_EXP 28
2351: PUSH
2352: LD_STRING Mike
2354: PPUSH
2355: LD_EXP 1
2359: NOT
2360: PPUSH
2361: LD_EXP 2
2365: PPUSH
2366: CALL 297 0 3
2370: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2371: LD_ADDR_EXP 29
2375: PUSH
2376: LD_STRING Kamil
2378: PPUSH
2379: LD_EXP 1
2383: NOT
2384: PPUSH
2385: LD_EXP 2
2389: PPUSH
2390: CALL 297 0 3
2394: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2395: LD_ADDR_EXP 31
2399: PUSH
2400: LD_STRING Kaia
2402: PPUSH
2403: LD_EXP 1
2407: NOT
2408: PPUSH
2409: LD_EXP 2
2413: PPUSH
2414: CALL 297 0 3
2418: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2419: LD_ADDR_EXP 32
2423: PUSH
2424: LD_STRING Sophia
2426: PPUSH
2427: LD_EXP 1
2431: NOT
2432: PPUSH
2433: LD_EXP 2
2437: PPUSH
2438: CALL 297 0 3
2442: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2443: LD_ADDR_EXP 33
2447: PUSH
2448: LD_STRING Markov
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_EXP 2
2461: PPUSH
2462: CALL 297 0 3
2466: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
2467: LD_ADDR_EXP 40
2471: PUSH
2472: LD_STRING 02_others
2474: PPUSH
2475: CALL_OW 31
2479: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
2480: LD_ADDR_VAR 0 4
2484: PUSH
2485: LD_EXP 28
2489: PUSH
2490: LD_EXP 29
2494: PUSH
2495: LD_EXP 31
2499: PUSH
2500: LD_EXP 32
2504: PUSH
2505: LD_EXP 33
2509: PUSH
2510: LD_EXP 27
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: PUSH
2523: LD_EXP 40
2527: ADD
2528: PUSH
2529: LD_INT 0
2531: DIFF
2532: ST_TO_ADDR
// heikeSquad := tmp ;
2533: LD_ADDR_EXP 39
2537: PUSH
2538: LD_VAR 0 4
2542: ST_TO_ADDR
// uc_nation := 0 ;
2543: LD_ADDR_OWVAR 21
2547: PUSH
2548: LD_INT 0
2550: ST_TO_ADDR
// hc_class := class_apeman ;
2551: LD_ADDR_OWVAR 28
2555: PUSH
2556: LD_INT 12
2558: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2559: LD_ADDR_OWVAR 31
2563: PUSH
2564: LD_INT 0
2566: PUSH
2567: LD_INT 0
2569: PUSH
2570: LD_INT 0
2572: PUSH
2573: LD_INT 0
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: ST_TO_ADDR
// hc_gallery :=  ;
2582: LD_ADDR_OWVAR 33
2586: PUSH
2587: LD_STRING 
2589: ST_TO_ADDR
// hc_name :=  ;
2590: LD_ADDR_OWVAR 26
2594: PUSH
2595: LD_STRING 
2597: ST_TO_ADDR
// tmp := tmp union CreateHuman ;
2598: LD_ADDR_VAR 0 4
2602: PUSH
2603: LD_VAR 0 4
2607: PUSH
2608: CALL_OW 44
2612: UNION
2613: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
2614: LD_EXP 26
2618: PPUSH
2619: LD_INT 92
2621: PPUSH
2622: LD_INT 17
2624: PPUSH
2625: LD_INT 0
2627: PPUSH
2628: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
2632: LD_EXP 34
2636: PPUSH
2637: LD_INT 95
2639: PPUSH
2640: LD_INT 19
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
2650: LD_EXP 35
2654: PPUSH
2655: LD_INT 89
2657: PPUSH
2658: LD_INT 25
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
2668: LD_EXP 30
2672: PPUSH
2673: LD_INT 92
2675: PPUSH
2676: LD_INT 27
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
2686: LD_EXP 35
2690: PPUSH
2691: LD_EXP 30
2695: PPUSH
2696: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
2700: LD_EXP 30
2704: PPUSH
2705: LD_EXP 35
2709: PPUSH
2710: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
2714: LD_EXP 26
2718: PUSH
2719: LD_EXP 34
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PPUSH
2728: LD_EXP 35
2732: PPUSH
2733: CALL_OW 119
// if tmp then
2737: LD_VAR 0 4
2741: IFFALSE 2795
// for i in tmp do
2743: LD_ADDR_VAR 0 2
2747: PUSH
2748: LD_VAR 0 4
2752: PUSH
2753: FOR_IN
2754: IFFALSE 2793
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
2756: LD_VAR 0 2
2760: PPUSH
2761: LD_INT 94
2763: PPUSH
2764: LD_INT 14
2766: PPUSH
2767: LD_INT 4
2769: PPUSH
2770: LD_INT 0
2772: PPUSH
2773: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
2777: LD_VAR 0 2
2781: PPUSH
2782: LD_EXP 26
2786: PPUSH
2787: CALL_OW 119
// end ;
2791: GO 2753
2793: POP
2794: POP
// farmerSquad := [ ] ;
2795: LD_ADDR_EXP 37
2799: PUSH
2800: EMPTY
2801: ST_TO_ADDR
// uc_side := 5 ;
2802: LD_ADDR_OWVAR 20
2806: PUSH
2807: LD_INT 5
2809: ST_TO_ADDR
// uc_nation := 2 ;
2810: LD_ADDR_OWVAR 21
2814: PUSH
2815: LD_INT 2
2817: ST_TO_ADDR
// for i := 1 to 4 do
2818: LD_ADDR_VAR 0 2
2822: PUSH
2823: DOUBLE
2824: LD_INT 1
2826: DEC
2827: ST_TO_ADDR
2828: LD_INT 4
2830: PUSH
2831: FOR_TO
2832: IFFALSE 2910
// begin PrepareHuman ( false , 1 , 2 ) ;
2834: LD_INT 0
2836: PPUSH
2837: LD_INT 1
2839: PPUSH
2840: LD_INT 2
2842: PPUSH
2843: CALL_OW 380
// un := CreateHuman ;
2847: LD_ADDR_VAR 0 3
2851: PUSH
2852: CALL_OW 44
2856: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_INT 102
2864: PPUSH
2865: LD_INT 27
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2878: LD_ADDR_EXP 37
2882: PUSH
2883: LD_EXP 37
2887: PUSH
2888: LD_VAR 0 3
2892: UNION
2893: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2894: LD_VAR 0 3
2898: PPUSH
2899: LD_EXP 35
2903: PPUSH
2904: CALL_OW 119
// end ;
2908: GO 2831
2910: POP
2911: POP
// for i := 1 to 2 do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: DOUBLE
2918: LD_INT 1
2920: DEC
2921: ST_TO_ADDR
2922: LD_INT 2
2924: PUSH
2925: FOR_TO
2926: IFFALSE 3004
// begin PrepareHuman ( false , 2 , 2 ) ;
2928: LD_INT 0
2930: PPUSH
2931: LD_INT 2
2933: PPUSH
2934: LD_INT 2
2936: PPUSH
2937: CALL_OW 380
// un := CreateHuman ;
2941: LD_ADDR_VAR 0 3
2945: PUSH
2946: CALL_OW 44
2950: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2951: LD_VAR 0 3
2955: PPUSH
2956: LD_INT 108
2958: PPUSH
2959: LD_INT 62
2961: PPUSH
2962: LD_INT 2
2964: PPUSH
2965: LD_INT 0
2967: PPUSH
2968: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2972: LD_ADDR_EXP 37
2976: PUSH
2977: LD_EXP 37
2981: PUSH
2982: LD_VAR 0 3
2986: UNION
2987: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_EXP 35
2997: PPUSH
2998: CALL_OW 119
// end ;
3002: GO 2925
3004: POP
3005: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
3006: LD_INT 109
3008: PPUSH
3009: LD_INT 63
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: LD_INT 15
3017: NEG
3018: PPUSH
3019: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
3023: LD_INT 109
3025: PPUSH
3026: LD_INT 63
3028: PPUSH
3029: LD_INT 2
3031: PPUSH
3032: CALL_OW 331
// end ;
3036: LD_VAR 0 1
3040: RET
// export function PrepareIbrahim ( x , y ) ; begin
3041: LD_INT 0
3043: PPUSH
// uc_side := 6 ;
3044: LD_ADDR_OWVAR 20
3048: PUSH
3049: LD_INT 6
3051: ST_TO_ADDR
// uc_nation := 3 ;
3052: LD_ADDR_OWVAR 21
3056: PUSH
3057: LD_INT 3
3059: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3060: LD_ADDR_EXP 36
3064: PUSH
3065: LD_STRING IbrahimRu
3067: PPUSH
3068: LD_INT 0
3070: PPUSH
3071: LD_STRING 
3073: PPUSH
3074: CALL 297 0 3
3078: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
3079: LD_EXP 36
3083: PPUSH
3084: LD_VAR 0 1
3088: PPUSH
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_INT 8
3096: PPUSH
3097: LD_INT 1
3099: PPUSH
3100: CALL_OW 50
// end ;
3104: LD_VAR 0 3
3108: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
3109: LD_EXP 35
3113: PUSH
3114: LD_EXP 38
3118: ADD
3119: PPUSH
3120: LD_INT 95
3122: PUSH
3123: LD_INT 3
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 72
3134: IFFALSE 3190
3136: GO 3138
3138: DISABLE
3139: LD_INT 0
3141: PPUSH
// begin enable ;
3142: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
3143: LD_ADDR_VAR 0 1
3147: PUSH
3148: LD_EXP 35
3152: PUSH
3153: LD_EXP 38
3157: ADD
3158: PPUSH
3159: LD_INT 95
3161: PUSH
3162: LD_INT 3
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PPUSH
3169: CALL_OW 72
3173: PUSH
3174: FOR_IN
3175: IFFALSE 3188
// RemoveUnit ( i ) ;
3177: LD_VAR 0 1
3181: PPUSH
3182: CALL_OW 64
3186: GO 3174
3188: POP
3189: POP
// end ;
3190: PPOPN 1
3192: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
3193: LD_EXP 3
3197: PUSH
3198: LD_EXP 34
3202: PPUSH
3203: LD_INT 4
3205: PPUSH
3206: CALL_OW 308
3210: AND
3211: IFFALSE 3994
3213: GO 3215
3215: DISABLE
3216: LD_INT 0
3218: PPUSH
3219: PPUSH
3220: PPUSH
3221: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
3222: LD_EXP 34
3226: PPUSH
3227: LD_INT 110
3229: PPUSH
3230: LD_INT 60
3232: PPUSH
3233: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
3237: LD_EXP 34
3241: PPUSH
3242: LD_INT 110
3244: PPUSH
3245: LD_INT 61
3247: PPUSH
3248: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3252: LD_ADDR_VAR 0 2
3256: PUSH
3257: LD_EXP 37
3261: PPUSH
3262: LD_INT 25
3264: PUSH
3265: LD_INT 1
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 72
3276: ST_TO_ADDR
// if tmp then
3277: LD_VAR 0 2
3281: IFFALSE 3375
// begin for i := 1 to 2 do
3283: LD_ADDR_VAR 0 1
3287: PUSH
3288: DOUBLE
3289: LD_INT 1
3291: DEC
3292: ST_TO_ADDR
3293: LD_INT 2
3295: PUSH
3296: FOR_TO
3297: IFFALSE 3373
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
3299: LD_VAR 0 2
3303: PUSH
3304: LD_VAR 0 1
3308: ARRAY
3309: PPUSH
3310: LD_INT 5
3312: PPUSH
3313: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
3317: LD_VAR 0 2
3321: PUSH
3322: LD_VAR 0 1
3326: ARRAY
3327: PPUSH
3328: LD_INT 2
3330: PPUSH
3331: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
3335: LD_VAR 0 2
3339: PUSH
3340: LD_VAR 0 1
3344: ARRAY
3345: PPUSH
3346: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
3350: LD_VAR 0 2
3354: PUSH
3355: LD_VAR 0 1
3359: ARRAY
3360: PPUSH
3361: LD_INT 107
3363: PPUSH
3364: LD_INT 66
3366: PPUSH
3367: CALL_OW 171
// end ;
3371: GO 3296
3373: POP
3374: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3375: LD_ADDR_VAR 0 2
3379: PUSH
3380: LD_EXP 37
3384: PPUSH
3385: LD_INT 25
3387: PUSH
3388: LD_INT 2
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PPUSH
3395: CALL_OW 72
3399: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3400: LD_INT 35
3402: PPUSH
3403: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3407: LD_ADDR_VAR 0 2
3411: PUSH
3412: LD_EXP 37
3416: PPUSH
3417: LD_INT 25
3419: PUSH
3420: LD_INT 2
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PPUSH
3427: CALL_OW 72
3431: ST_TO_ADDR
// until tmp ;
3432: LD_VAR 0 2
3436: IFFALSE 3400
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
3438: LD_VAR 0 2
3442: PPUSH
3443: LD_INT 31
3445: PPUSH
3446: LD_INT 102
3448: PPUSH
3449: LD_INT 69
3451: PPUSH
3452: LD_INT 2
3454: PPUSH
3455: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
3459: LD_INT 35
3461: PPUSH
3462: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3466: LD_EXP 37
3470: PPUSH
3471: LD_INT 3
3473: PUSH
3474: LD_INT 60
3476: PUSH
3477: EMPTY
3478: LIST
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 25
3486: PUSH
3487: LD_INT 2
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 72
3502: IFFALSE 3459
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3504: LD_ADDR_VAR 0 2
3508: PUSH
3509: LD_EXP 37
3513: PPUSH
3514: LD_INT 25
3516: PUSH
3517: LD_INT 2
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PPUSH
3524: CALL_OW 72
3528: ST_TO_ADDR
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
3529: LD_VAR 0 2
3533: PPUSH
3534: LD_INT 4
3536: PPUSH
3537: LD_INT 116
3539: PPUSH
3540: LD_INT 70
3542: PPUSH
3543: LD_INT 5
3545: PPUSH
3546: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 108 , 50 , 2 ) ;
3550: LD_VAR 0 2
3554: PPUSH
3555: LD_INT 31
3557: PPUSH
3558: LD_INT 108
3560: PPUSH
3561: LD_INT 50
3563: PPUSH
3564: LD_INT 2
3566: PPUSH
3567: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
3571: LD_INT 35
3573: PPUSH
3574: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
3578: LD_INT 22
3580: PUSH
3581: LD_INT 5
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 30
3590: PUSH
3591: LD_INT 4
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PUSH
3598: LD_INT 3
3600: PUSH
3601: LD_INT 57
3603: PUSH
3604: EMPTY
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: PPUSH
3616: CALL_OW 69
3620: IFFALSE 3571
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
3622: LD_ADDR_VAR 0 3
3626: PUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 5
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PUSH
3637: LD_INT 30
3639: PUSH
3640: LD_INT 4
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: LD_INT 57
3652: PUSH
3653: EMPTY
3654: LIST
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: LIST
3664: PPUSH
3665: CALL_OW 69
3669: PUSH
3670: LD_INT 1
3672: ARRAY
3673: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
3674: LD_ADDR_VAR 0 2
3678: PUSH
3679: LD_EXP 37
3683: PPUSH
3684: LD_INT 25
3686: PUSH
3687: LD_INT 1
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PPUSH
3694: CALL_OW 72
3698: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
3699: LD_VAR 0 2
3703: PPUSH
3704: LD_VAR 0 3
3708: PPUSH
3709: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3713: LD_INT 35
3715: PPUSH
3716: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
3720: LD_INT 22
3722: PUSH
3723: LD_INT 5
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: PUSH
3730: LD_INT 30
3732: PUSH
3733: LD_INT 31
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 3
3742: PUSH
3743: LD_INT 57
3745: PUSH
3746: EMPTY
3747: LIST
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: PPUSH
3758: CALL_OW 69
3762: PUSH
3763: LD_INT 2
3765: GREATEREQUAL
3766: IFFALSE 3713
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3768: LD_ADDR_VAR 0 2
3772: PUSH
3773: LD_EXP 37
3777: PPUSH
3778: LD_INT 25
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 72
3792: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
3793: LD_VAR 0 2
3797: PUSH
3798: LD_INT 1
3800: ARRAY
3801: PPUSH
3802: LD_INT 5
3804: PPUSH
3805: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
3809: LD_VAR 0 2
3813: PUSH
3814: LD_INT 2
3816: ARRAY
3817: PUSH
3818: LD_VAR 0 2
3822: PUSH
3823: LD_INT 3
3825: ARRAY
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PPUSH
3831: LD_VAR 0 3
3835: PPUSH
3836: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
3840: LD_VAR 0 2
3844: PUSH
3845: LD_INT 2
3847: ARRAY
3848: PUSH
3849: LD_VAR 0 2
3853: PUSH
3854: LD_INT 3
3856: ARRAY
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PPUSH
3862: LD_INT 1
3864: PPUSH
3865: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
3869: LD_VAR 0 2
3873: PUSH
3874: LD_INT 2
3876: ARRAY
3877: PUSH
3878: LD_VAR 0 2
3882: PUSH
3883: LD_INT 3
3885: ARRAY
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: PPUSH
3891: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3895: LD_ADDR_VAR 0 4
3899: PUSH
3900: LD_INT 22
3902: PUSH
3903: LD_INT 5
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 30
3912: PUSH
3913: LD_INT 31
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PPUSH
3924: CALL_OW 69
3928: ST_TO_ADDR
// for i := 1 to 2 do
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: DOUBLE
3935: LD_INT 1
3937: DEC
3938: ST_TO_ADDR
3939: LD_INT 2
3941: PUSH
3942: FOR_TO
3943: IFFALSE 3977
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3945: LD_VAR 0 2
3949: PUSH
3950: LD_VAR 0 1
3954: PUSH
3955: LD_INT 1
3957: PLUS
3958: ARRAY
3959: PPUSH
3960: LD_VAR 0 4
3964: PUSH
3965: LD_VAR 0 1
3969: ARRAY
3970: PPUSH
3971: CALL_OW 180
3975: GO 3942
3977: POP
3978: POP
// wait ( 1 1$00 ) ;
3979: LD_INT 2100
3981: PPUSH
3982: CALL_OW 67
// farmerBaseReady := true ;
3986: LD_ADDR_EXP 4
3990: PUSH
3991: LD_INT 1
3993: ST_TO_ADDR
// end ;
3994: PPOPN 4
3996: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3997: LD_EXP 4
4001: PUSH
4002: LD_EXP 10
4006: NOT
4007: AND
4008: IFFALSE 4530
4010: GO 4012
4012: DISABLE
4013: LD_INT 0
4015: PPUSH
4016: PPUSH
4017: PPUSH
4018: PPUSH
4019: PPUSH
// begin enable ;
4020: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_EXP 37
4030: PPUSH
4031: LD_INT 25
4033: PUSH
4034: LD_INT 1
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PPUSH
4041: CALL_OW 72
4045: PUSH
4046: LD_EXP 34
4050: ADD
4051: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: LD_EXP 37
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 2
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4077: LD_ADDR_VAR 0 5
4081: PUSH
4082: LD_INT 22
4084: PUSH
4085: LD_INT 5
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 3
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 3
4104: PUSH
4105: LD_INT 24
4107: PUSH
4108: LD_INT 1000
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: LIST
4123: PPUSH
4124: CALL_OW 69
4128: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
4129: LD_ADDR_VAR 0 4
4133: PUSH
4134: LD_INT 22
4136: PUSH
4137: LD_INT 5
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: LD_INT 30
4146: PUSH
4147: LD_INT 4
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: PPUSH
4158: CALL_OW 69
4162: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
4163: LD_VAR 0 4
4167: PUSH
4168: LD_INT 1
4170: ARRAY
4171: PPUSH
4172: CALL_OW 302
4176: IFFALSE 4240
// for i in sol do
4178: LD_ADDR_VAR 0 1
4182: PUSH
4183: LD_VAR 0 3
4187: PUSH
4188: FOR_IN
4189: IFFALSE 4238
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
4191: LD_VAR 0 1
4195: PPUSH
4196: CALL_OW 256
4200: PUSH
4201: LD_INT 999
4203: LESS
4204: PUSH
4205: LD_VAR 0 1
4209: PPUSH
4210: CALL_OW 310
4214: NOT
4215: AND
4216: IFFALSE 4236
// ComEnterUnit ( i , arm [ 1 ] ) ;
4218: LD_VAR 0 1
4222: PPUSH
4223: LD_VAR 0 4
4227: PUSH
4228: LD_INT 1
4230: ARRAY
4231: PPUSH
4232: CALL_OW 120
4236: GO 4188
4238: POP
4239: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
4240: LD_VAR 0 2
4244: NOT
4245: PUSH
4246: LD_INT 22
4248: PUSH
4249: LD_INT 1
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 21
4258: PUSH
4259: LD_INT 1
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: PPUSH
4270: CALL_OW 69
4274: NOT
4275: AND
4276: IFFALSE 4368
// begin uc_side := 5 ;
4278: LD_ADDR_OWVAR 20
4282: PUSH
4283: LD_INT 5
4285: ST_TO_ADDR
// uc_nation := 2 ;
4286: LD_ADDR_OWVAR 21
4290: PUSH
4291: LD_INT 2
4293: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
4294: LD_INT 0
4296: PPUSH
4297: LD_INT 2
4299: PPUSH
4300: LD_INT 2
4302: PPUSH
4303: CALL_OW 380
// eng := CreateHuman ;
4307: LD_ADDR_VAR 0 2
4311: PUSH
4312: CALL_OW 44
4316: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
4317: LD_VAR 0 2
4321: PPUSH
4322: LD_INT 102
4324: PPUSH
4325: LD_INT 8
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
4335: LD_VAR 0 2
4339: PPUSH
4340: LD_INT 110
4342: PPUSH
4343: LD_INT 60
4345: PPUSH
4346: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
4350: LD_ADDR_EXP 37
4354: PUSH
4355: LD_EXP 37
4359: PUSH
4360: LD_VAR 0 2
4364: UNION
4365: ST_TO_ADDR
// end else
4366: GO 4530
// begin for i in eng do
4368: LD_ADDR_VAR 0 1
4372: PUSH
4373: LD_VAR 0 2
4377: PUSH
4378: FOR_IN
4379: IFFALSE 4528
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
4381: LD_INT 10
4383: PPUSH
4384: LD_INT 1
4386: PPUSH
4387: CALL_OW 287
4391: IFFALSE 4442
// begin if IsInUnit ( i ) then
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 310
4402: IFFALSE 4413
// ComExitBuilding ( i ) ;
4404: LD_VAR 0 1
4408: PPUSH
4409: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_INT 10
4420: PPUSH
4421: CALL_OW 308
4425: NOT
4426: IFFALSE 4440
// AddComMoveToArea ( i , collectFarmerArea ) ;
4428: LD_VAR 0 1
4432: PPUSH
4433: LD_INT 10
4435: PPUSH
4436: CALL_OW 173
// end else
4440: GO 4526
// begin if damagedBuilding then
4442: LD_VAR 0 5
4446: IFFALSE 4490
// begin if IsInUnit ( i ) then
4448: LD_VAR 0 1
4452: PPUSH
4453: CALL_OW 310
4457: IFFALSE 4470
// ComExitBuilding ( i ) else
4459: LD_VAR 0 1
4463: PPUSH
4464: CALL_OW 122
4468: GO 4488
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
4470: LD_VAR 0 1
4474: PPUSH
4475: LD_VAR 0 5
4479: PUSH
4480: LD_INT 1
4482: ARRAY
4483: PPUSH
4484: CALL_OW 130
// end else
4488: GO 4526
// if not IsInUnit ( i ) and not HasTask ( i ) then
4490: LD_VAR 0 1
4494: PPUSH
4495: CALL_OW 310
4499: NOT
4500: PUSH
4501: LD_VAR 0 1
4505: PPUSH
4506: CALL_OW 314
4510: NOT
4511: AND
4512: IFFALSE 4526
// ComEnterUnit ( i , arDepot ) ;
4514: LD_VAR 0 1
4518: PPUSH
4519: LD_INT 5
4521: PPUSH
4522: CALL_OW 120
// end ; end ;
4526: GO 4378
4528: POP
4529: POP
// end ; end ;
4530: PPOPN 5
4532: END
// export function StartCargoEvacuation ; begin
4533: LD_INT 0
4535: PPUSH
// while omarCargoCounter > 0 do
4536: LD_EXP 19
4540: PUSH
4541: LD_INT 0
4543: GREATER
4544: IFFALSE 4861
// begin wait ( 0 0$40 ) ;
4546: LD_INT 1400
4548: PPUSH
4549: CALL_OW 67
// omarCargo := PrepareCargo ;
4553: LD_ADDR_EXP 41
4557: PUSH
4558: CALL 4866 0 0
4562: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
4563: LD_EXP 41
4567: PPUSH
4568: LD_INT 0
4570: PPUSH
4571: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4575: LD_EXP 41
4579: PPUSH
4580: LD_INT 107
4582: PPUSH
4583: LD_INT 59
4585: PPUSH
4586: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4590: LD_INT 35
4592: PPUSH
4593: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
4597: LD_EXP 41
4601: PPUSH
4602: LD_INT 107
4604: PPUSH
4605: LD_INT 59
4607: PPUSH
4608: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4612: LD_EXP 41
4616: PPUSH
4617: CALL_OW 302
4621: NOT
4622: PUSH
4623: LD_EXP 41
4627: PPUSH
4628: CALL_OW 301
4632: OR
4633: IFFALSE 4637
// continue ;
4635: GO 4590
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
4637: LD_EXP 41
4641: PPUSH
4642: LD_INT 107
4644: PPUSH
4645: LD_INT 59
4647: PPUSH
4648: CALL_OW 307
4652: PUSH
4653: LD_EXP 41
4657: PPUSH
4658: LD_INT 5
4660: PPUSH
4661: CALL_OW 296
4665: PUSH
4666: LD_INT 6
4668: LESS
4669: OR
4670: IFFALSE 4590
// SetTag ( omarCargo , 1 ) ;
4672: LD_EXP 41
4676: PPUSH
4677: LD_INT 1
4679: PPUSH
4680: CALL_OW 109
// wait ( 0 0$05 ) ;
4684: LD_INT 175
4686: PPUSH
4687: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
4691: LD_EXP 41
4695: PPUSH
4696: LD_INT 5
4698: PPUSH
4699: LD_INT 1
4701: PPUSH
4702: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
4706: LD_EXP 41
4710: PPUSH
4711: LD_INT 103
4713: PPUSH
4714: LD_INT 9
4716: PPUSH
4717: CALL_OW 171
// wait ( 0 0$1 ) ;
4721: LD_INT 35
4723: PPUSH
4724: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
4728: LD_EXP 41
4732: PPUSH
4733: LD_INT 1
4735: PPUSH
4736: LD_INT 100
4738: PPUSH
4739: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
4743: LD_INT 35
4745: PPUSH
4746: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
4750: LD_EXP 41
4754: PPUSH
4755: LD_INT 103
4757: PPUSH
4758: LD_INT 9
4760: PPUSH
4761: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
4765: LD_EXP 41
4769: PPUSH
4770: CALL_OW 302
4774: NOT
4775: PUSH
4776: LD_EXP 41
4780: PPUSH
4781: CALL_OW 301
4785: OR
4786: IFFALSE 4790
// continue ;
4788: GO 4743
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
4790: LD_EXP 41
4794: PPUSH
4795: LD_INT 103
4797: PPUSH
4798: LD_INT 9
4800: PPUSH
4801: CALL_OW 307
4805: PUSH
4806: LD_EXP 41
4810: PPUSH
4811: LD_INT 3
4813: PPUSH
4814: CALL_OW 308
4818: OR
4819: PUSH
4820: LD_EXP 41
4824: PPUSH
4825: CALL_OW 110
4829: PUSH
4830: LD_INT 0
4832: GREATER
4833: AND
4834: IFFALSE 4743
// RemoveUnit ( omarCargo ) ;
4836: LD_EXP 41
4840: PPUSH
4841: CALL_OW 64
// omarCargoCounter := omarCargoCounter - 1 ;
4845: LD_ADDR_EXP 19
4849: PUSH
4850: LD_EXP 19
4854: PUSH
4855: LD_INT 1
4857: MINUS
4858: ST_TO_ADDR
// end ;
4859: GO 4536
// end ;
4861: LD_VAR 0 1
4865: RET
// export function PrepareCargo ; var un , veh ; begin
4866: LD_INT 0
4868: PPUSH
4869: PPUSH
4870: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4871: LD_ADDR_VAR 0 3
4875: PUSH
4876: LD_INT 5
4878: PPUSH
4879: LD_INT 2
4881: PPUSH
4882: LD_INT 13
4884: PPUSH
4885: LD_INT 1
4887: PPUSH
4888: LD_INT 1
4890: PPUSH
4891: LD_INT 32
4893: PPUSH
4894: LD_INT 80
4896: PPUSH
4897: CALL 360 0 7
4901: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4902: LD_VAR 0 3
4906: PPUSH
4907: LD_INT 4
4909: PPUSH
4910: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4914: LD_VAR 0 3
4918: PPUSH
4919: LD_INT 101
4921: PPUSH
4922: LD_INT 8
4924: PPUSH
4925: LD_INT 0
4927: PPUSH
4928: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4932: LD_INT 0
4934: PPUSH
4935: LD_INT 3
4937: PPUSH
4938: LD_INT 2
4940: PPUSH
4941: CALL_OW 380
// un := CreateHuman ;
4945: LD_ADDR_VAR 0 2
4949: PUSH
4950: CALL_OW 44
4954: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4955: LD_VAR 0 2
4959: PPUSH
4960: LD_VAR 0 3
4964: PPUSH
4965: CALL_OW 52
// result := veh ;
4969: LD_ADDR_VAR 0 1
4973: PUSH
4974: LD_VAR 0 3
4978: ST_TO_ADDR
// end ; end_of_file
4979: LD_VAR 0 1
4983: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4984: LD_INT 0
4986: PPUSH
4987: PPUSH
4988: PPUSH
// usForces := [ ] ;
4989: LD_ADDR_EXP 42
4993: PUSH
4994: EMPTY
4995: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4996: LD_ADDR_EXP 44
5000: PUSH
5001: LD_INT 6
5003: PUSH
5004: LD_INT 32
5006: PUSH
5007: LD_INT 27
5009: PUSH
5010: LD_INT 1
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 4
5021: PUSH
5022: LD_INT 43
5024: PUSH
5025: LD_INT 24
5027: PUSH
5028: LD_INT 5
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PUSH
5037: LD_INT 27
5039: PUSH
5040: LD_INT 29
5042: PUSH
5043: LD_INT 21
5045: PUSH
5046: LD_INT 0
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: LIST
5059: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 ] [ Difficulty ] ) ;
5060: LD_INT 11
5062: PPUSH
5063: CALL_OW 274
5067: PPUSH
5068: LD_INT 1
5070: PPUSH
5071: LD_INT 150
5073: PUSH
5074: LD_INT 120
5076: PUSH
5077: LD_INT 100
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: PUSH
5085: LD_OWVAR 67
5089: ARRAY
5090: PPUSH
5091: CALL_OW 277
// if Difficulty = 1 then
5095: LD_OWVAR 67
5099: PUSH
5100: LD_INT 1
5102: EQUAL
5103: IFFALSE 5112
// RemoveUnit ( hillBun ) ;
5105: LD_INT 14
5107: PPUSH
5108: CALL_OW 64
// uc_side := 1 ;
5112: LD_ADDR_OWVAR 20
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// uc_nation := 1 ;
5120: LD_ADDR_OWVAR 21
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// hc_gallery :=  ;
5128: LD_ADDR_OWVAR 33
5132: PUSH
5133: LD_STRING 
5135: ST_TO_ADDR
// hc_name :=  ;
5136: LD_ADDR_OWVAR 26
5140: PUSH
5141: LD_STRING 
5143: ST_TO_ADDR
// hc_importance := 0 ;
5144: LD_ADDR_OWVAR 32
5148: PUSH
5149: LD_INT 0
5151: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
5152: LD_INT 1
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: LD_INT 3
5160: PPUSH
5161: CALL_OW 380
// usCommander := CreateHuman ;
5165: LD_ADDR_EXP 43
5169: PUSH
5170: CALL_OW 44
5174: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
5175: LD_EXP 43
5179: PPUSH
5180: LD_INT 11
5182: PPUSH
5183: CALL_OW 52
// if Difficulty > 1 then
5187: LD_OWVAR 67
5191: PUSH
5192: LD_INT 1
5194: GREATER
5195: IFFALSE 5277
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5197: LD_INT 0
5199: PPUSH
5200: LD_INT 1
5202: PPUSH
5203: LD_INT 1
5205: PUSH
5206: LD_INT 2
5208: PUSH
5209: LD_INT 3
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: LIST
5216: PUSH
5217: LD_OWVAR 67
5221: ARRAY
5222: PPUSH
5223: CALL_OW 380
// un := CreateHuman ;
5227: LD_ADDR_VAR 0 3
5231: PUSH
5232: CALL_OW 44
5236: ST_TO_ADDR
// usForces := usForces union un ;
5237: LD_ADDR_EXP 42
5241: PUSH
5242: LD_EXP 42
5246: PUSH
5247: LD_VAR 0 3
5251: UNION
5252: ST_TO_ADDR
// SetDir ( un , 1 ) ;
5253: LD_VAR 0 3
5257: PPUSH
5258: LD_INT 1
5260: PPUSH
5261: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
5265: LD_VAR 0 3
5269: PPUSH
5270: LD_INT 14
5272: PPUSH
5273: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5277: LD_ADDR_VAR 0 2
5281: PUSH
5282: DOUBLE
5283: LD_INT 1
5285: DEC
5286: ST_TO_ADDR
5287: LD_INT 2
5289: PUSH
5290: LD_INT 3
5292: PUSH
5293: LD_INT 4
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: LIST
5300: PUSH
5301: LD_OWVAR 67
5305: ARRAY
5306: PUSH
5307: FOR_TO
5308: IFFALSE 5450
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
5310: LD_INT 0
5312: PPUSH
5313: LD_INT 1
5315: PPUSH
5316: LD_INT 1
5318: PUSH
5319: LD_INT 2
5321: PUSH
5322: LD_INT 3
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: LIST
5329: PUSH
5330: LD_OWVAR 67
5334: ARRAY
5335: PPUSH
5336: CALL_OW 380
// un := CreateHuman ;
5340: LD_ADDR_VAR 0 3
5344: PUSH
5345: CALL_OW 44
5349: ST_TO_ADDR
// usForces := usForces union un ;
5350: LD_ADDR_EXP 42
5354: PUSH
5355: LD_EXP 42
5359: PUSH
5360: LD_VAR 0 3
5364: UNION
5365: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5366: LD_VAR 0 3
5370: PPUSH
5371: LD_INT 39
5373: PPUSH
5374: LD_INT 24
5376: PPUSH
5377: LD_INT 4
5379: PPUSH
5380: LD_INT 0
5382: PPUSH
5383: CALL_OW 50
// if i < 3 then
5387: LD_VAR 0 2
5391: PUSH
5392: LD_INT 3
5394: LESS
5395: IFFALSE 5448
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 22
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 58
5414: PUSH
5415: EMPTY
5416: LIST
5417: PUSH
5418: LD_INT 30
5420: PUSH
5421: LD_INT 31
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: PPUSH
5433: CALL_OW 69
5437: PUSH
5438: LD_VAR 0 2
5442: ARRAY
5443: PPUSH
5444: CALL_OW 120
// end ;
5448: GO 5307
5450: POP
5451: POP
// for i := 1 to 2 do
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: DOUBLE
5458: LD_INT 1
5460: DEC
5461: ST_TO_ADDR
5462: LD_INT 2
5464: PUSH
5465: FOR_TO
5466: IFFALSE 5530
// begin PrepareHuman ( false , 2 , 2 ) ;
5468: LD_INT 0
5470: PPUSH
5471: LD_INT 2
5473: PPUSH
5474: LD_INT 2
5476: PPUSH
5477: CALL_OW 380
// un := CreateHuman ;
5481: LD_ADDR_VAR 0 3
5485: PUSH
5486: CALL_OW 44
5490: ST_TO_ADDR
// usForces := usForces union un ;
5491: LD_ADDR_EXP 42
5495: PUSH
5496: LD_EXP 42
5500: PUSH
5501: LD_VAR 0 3
5505: UNION
5506: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5507: LD_VAR 0 3
5511: PPUSH
5512: LD_INT 39
5514: PPUSH
5515: LD_INT 24
5517: PPUSH
5518: LD_INT 4
5520: PPUSH
5521: LD_INT 0
5523: PPUSH
5524: CALL_OW 50
// end ;
5528: GO 5465
5530: POP
5531: POP
// PrepareHuman ( false , 4 , 1 ) ;
5532: LD_INT 0
5534: PPUSH
5535: LD_INT 4
5537: PPUSH
5538: LD_INT 1
5540: PPUSH
5541: CALL_OW 380
// un := CreateHuman ;
5545: LD_ADDR_VAR 0 3
5549: PUSH
5550: CALL_OW 44
5554: ST_TO_ADDR
// usForces := usForces union un ;
5555: LD_ADDR_EXP 42
5559: PUSH
5560: LD_EXP 42
5564: PUSH
5565: LD_VAR 0 3
5569: UNION
5570: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
5571: LD_VAR 0 3
5575: PPUSH
5576: LD_INT 39
5578: PPUSH
5579: LD_INT 24
5581: PPUSH
5582: LD_INT 4
5584: PPUSH
5585: LD_INT 0
5587: PPUSH
5588: CALL_OW 50
// end ;
5592: LD_VAR 0 1
5596: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured do var i , b , eng , sol , sci ;
5597: LD_EXP 42
5601: PUSH
5602: LD_EXP 6
5606: NOT
5607: AND
5608: IFFALSE 6039
5610: GO 5612
5612: DISABLE
5613: LD_INT 0
5615: PPUSH
5616: PPUSH
5617: PPUSH
5618: PPUSH
5619: PPUSH
// begin enable ;
5620: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
5621: LD_ADDR_VAR 0 3
5625: PUSH
5626: LD_EXP 42
5630: PPUSH
5631: LD_INT 25
5633: PUSH
5634: LD_INT 2
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PPUSH
5641: CALL_OW 72
5645: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
5646: LD_ADDR_VAR 0 4
5650: PUSH
5651: LD_EXP 42
5655: PPUSH
5656: LD_INT 25
5658: PUSH
5659: LD_INT 1
5661: PUSH
5662: EMPTY
5663: LIST
5664: LIST
5665: PPUSH
5666: CALL_OW 72
5670: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
5671: LD_ADDR_VAR 0 5
5675: PUSH
5676: LD_EXP 42
5680: PPUSH
5681: LD_INT 25
5683: PUSH
5684: LD_INT 4
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PPUSH
5691: CALL_OW 72
5695: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
5696: LD_INT 7
5698: PPUSH
5699: LD_INT 22
5701: PUSH
5702: LD_INT 2
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PPUSH
5709: CALL_OW 70
5713: PUSH
5714: LD_INT 1
5716: EQUAL
5717: IFFALSE 5793
// for i in sol do
5719: LD_ADDR_VAR 0 1
5723: PUSH
5724: LD_VAR 0 4
5728: PUSH
5729: FOR_IN
5730: IFFALSE 5791
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
5732: LD_VAR 0 1
5736: PPUSH
5737: CALL_OW 310
5741: NOT
5742: PUSH
5743: LD_VAR 0 1
5747: PPUSH
5748: CALL_OW 310
5752: PPUSH
5753: CALL_OW 266
5757: PUSH
5758: LD_INT 4
5760: EQUAL
5761: NOT
5762: OR
5763: IFFALSE 5789
// begin ComExitBuilding ( i ) ;
5765: LD_VAR 0 1
5769: PPUSH
5770: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
5774: LD_VAR 0 1
5778: PPUSH
5779: LD_INT 37
5781: PPUSH
5782: LD_INT 23
5784: PPUSH
5785: CALL_OW 174
// end ;
5789: GO 5729
5791: POP
5792: POP
// if eng then
5793: LD_VAR 0 3
5797: IFFALSE 6039
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5799: LD_ADDR_VAR 0 2
5803: PUSH
5804: LD_INT 22
5806: PUSH
5807: LD_INT 1
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 95
5816: PUSH
5817: LD_INT 7
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 21
5826: PUSH
5827: LD_INT 3
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: LD_INT 3
5836: PUSH
5837: LD_INT 24
5839: PUSH
5840: LD_INT 1000
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: PPUSH
5857: CALL_OW 69
5861: ST_TO_ADDR
// if b then
5862: LD_VAR 0 2
5866: IFFALSE 5897
// begin ComExitBuilding ( eng ) ;
5868: LD_VAR 0 3
5872: PPUSH
5873: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5877: LD_VAR 0 3
5881: PPUSH
5882: LD_VAR 0 2
5886: PUSH
5887: LD_INT 1
5889: ARRAY
5890: PPUSH
5891: CALL_OW 190
// end else
5895: GO 6039
// begin for i in eng do
5897: LD_ADDR_VAR 0 1
5901: PUSH
5902: LD_VAR 0 3
5906: PUSH
5907: FOR_IN
5908: IFFALSE 6037
// if not HasTask ( i ) then
5910: LD_VAR 0 1
5914: PPUSH
5915: CALL_OW 314
5919: NOT
5920: IFFALSE 6035
// begin if americanBuildList then
5922: LD_EXP 44
5926: IFFALSE 6011
// begin if IsInUnit ( i ) then
5928: LD_VAR 0 1
5932: PPUSH
5933: CALL_OW 310
5937: IFFALSE 5948
// ComExitBuilding ( i ) ;
5939: LD_VAR 0 1
5943: PPUSH
5944: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5948: LD_VAR 0 1
5952: PPUSH
5953: LD_EXP 44
5957: PUSH
5958: LD_INT 1
5960: ARRAY
5961: PUSH
5962: LD_INT 1
5964: ARRAY
5965: PPUSH
5966: LD_EXP 44
5970: PUSH
5971: LD_INT 1
5973: ARRAY
5974: PUSH
5975: LD_INT 2
5977: ARRAY
5978: PPUSH
5979: LD_EXP 44
5983: PUSH
5984: LD_INT 1
5986: ARRAY
5987: PUSH
5988: LD_INT 3
5990: ARRAY
5991: PPUSH
5992: LD_EXP 44
5996: PUSH
5997: LD_INT 1
5999: ARRAY
6000: PUSH
6001: LD_INT 4
6003: ARRAY
6004: PPUSH
6005: CALL_OW 205
// end else
6009: GO 6035
// if not IsInUnit ( i ) then
6011: LD_VAR 0 1
6015: PPUSH
6016: CALL_OW 310
6020: NOT
6021: IFFALSE 6035
// ComEnterUnit ( i , usDepot ) ;
6023: LD_VAR 0 1
6027: PPUSH
6028: LD_INT 11
6030: PPUSH
6031: CALL_OW 120
// end ;
6035: GO 5907
6037: POP
6038: POP
// end ; end ; end ;
6039: PPOPN 5
6041: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
6042: LD_INT 0
6044: PPUSH
6045: PPUSH
6046: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
6047: LD_ADDR_VAR 0 3
6051: PUSH
6052: LD_INT 35
6054: PUSH
6055: LD_INT 45
6057: PUSH
6058: LD_INT 48
6060: PUSH
6061: LD_EXP 53
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: ST_TO_ADDR
// for i in tech do
6072: LD_ADDR_VAR 0 4
6076: PUSH
6077: LD_VAR 0 3
6081: PUSH
6082: FOR_IN
6083: IFFALSE 6101
// AddComResearch ( lab , i ) ;
6085: LD_VAR 0 1
6089: PPUSH
6090: LD_VAR 0 4
6094: PPUSH
6095: CALL_OW 184
6099: GO 6082
6101: POP
6102: POP
// end ;
6103: LD_VAR 0 2
6107: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
6108: LD_EXP 11
6112: PUSH
6113: LD_EXP 21
6117: PUSH
6118: LD_EXP 25
6122: LESSEQUAL
6123: AND
6124: IFFALSE 6149
6126: GO 6128
6128: DISABLE
// begin enable ;
6129: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
6130: LD_INT 35
6132: PPUSH
6133: LD_INT 2065
6135: PPUSH
6136: CALL_OW 12
6140: PPUSH
6141: CALL_OW 67
// SendConvoy ;
6145: CALL 6247 0 0
// end ;
6149: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
6150: LD_EXP 6
6154: PUSH
6155: LD_EXP 16
6159: AND
6160: IFFALSE 6246
6162: GO 6164
6164: DISABLE
// begin if americanHasEscaped then
6165: LD_EXP 7
6169: IFFALSE 6180
// wait ( 3 3$20 ) else
6171: LD_INT 7000
6173: PPUSH
6174: CALL_OW 67
6178: GO 6187
// wait ( 6 6$40 ) ;
6180: LD_INT 14000
6182: PPUSH
6183: CALL_OW 67
// SendAttack ;
6187: CALL 6979 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 ] [ Difficulty ] ) ;
6191: LD_INT 14000
6193: PUSH
6194: LD_INT 11900
6196: PUSH
6197: LD_INT 9800
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: PUSH
6205: LD_OWVAR 67
6209: ARRAY
6210: PPUSH
6211: CALL_OW 67
// SendAttack ;
6215: CALL 6979 0 0
// until attackWave < [ 6 , 7 , 8 ] [ Difficulty ] ;
6219: LD_EXP 17
6223: PUSH
6224: LD_INT 6
6226: PUSH
6227: LD_INT 7
6229: PUSH
6230: LD_INT 8
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: LD_OWVAR 67
6242: ARRAY
6243: LESS
6244: IFFALSE 6191
// end ;
6246: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
6247: LD_INT 0
6249: PPUSH
6250: PPUSH
6251: PPUSH
6252: PPUSH
6253: PPUSH
6254: PPUSH
6255: PPUSH
6256: PPUSH
// road := rand ( 1 , 2 ) ;
6257: LD_ADDR_VAR 0 4
6261: PUSH
6262: LD_INT 1
6264: PPUSH
6265: LD_INT 2
6267: PPUSH
6268: CALL_OW 12
6272: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
6273: LD_ADDR_VAR 0 8
6277: PUSH
6278: LD_INT 3
6280: PUSH
6281: LD_INT 8
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_VAR 0 4
6292: ARRAY
6293: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
6294: LD_ADDR_VAR 0 5
6298: PUSH
6299: LD_INT 35
6301: PUSH
6302: LD_INT 66
6304: PUSH
6305: LD_INT 1
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 101
6315: PUSH
6316: LD_INT 8
6318: PUSH
6319: LD_INT 4
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: LIST
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
6331: LD_ADDR_VAR 0 6
6335: PUSH
6336: LD_INT 34
6338: PUSH
6339: LD_INT 67
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: LD_INT 38
6348: PUSH
6349: LD_INT 62
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 43
6358: PUSH
6359: LD_INT 54
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 57
6368: PUSH
6369: LD_INT 57
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 77
6378: PUSH
6379: LD_INT 71
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 86
6388: PUSH
6389: LD_INT 60
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 89
6398: PUSH
6399: LD_INT 35
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: PUSH
6406: LD_INT 93
6408: PUSH
6409: LD_INT 17
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 97
6418: PUSH
6419: LD_INT 10
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 103
6428: PUSH
6429: LD_INT 9
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: ST_TO_ADDR
// if road = 2 then
6448: LD_VAR 0 4
6452: PUSH
6453: LD_INT 2
6455: EQUAL
6456: IFFALSE 6473
// points := ReverseArray ( points ) ;
6458: LD_ADDR_VAR 0 6
6462: PUSH
6463: LD_VAR 0 6
6467: PPUSH
6468: CALL 1048 0 1
6472: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
6473: LD_INT 4
6475: PPUSH
6476: LD_INT 1
6478: PPUSH
6479: LD_INT 2
6481: PPUSH
6482: LD_INT 1
6484: PPUSH
6485: LD_INT 1
6487: PPUSH
6488: LD_INT 12
6490: PPUSH
6491: LD_INT 80
6493: PPUSH
6494: CALL 360 0 7
// veh := CreateVehicle ;
6498: LD_ADDR_VAR 0 3
6502: PUSH
6503: CALL_OW 45
6507: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
6508: LD_VAR 0 3
6512: PPUSH
6513: LD_VAR 0 5
6517: PUSH
6518: LD_VAR 0 4
6522: ARRAY
6523: PUSH
6524: LD_INT 3
6526: ARRAY
6527: PPUSH
6528: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
6532: LD_VAR 0 3
6536: PPUSH
6537: LD_VAR 0 5
6541: PUSH
6542: LD_VAR 0 4
6546: ARRAY
6547: PUSH
6548: LD_INT 1
6550: ARRAY
6551: PPUSH
6552: LD_VAR 0 5
6556: PUSH
6557: LD_VAR 0 4
6561: ARRAY
6562: PUSH
6563: LD_INT 2
6565: ARRAY
6566: PPUSH
6567: LD_INT 0
6569: PPUSH
6570: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
6574: LD_INT 0
6576: PPUSH
6577: LD_INT 1
6579: PPUSH
6580: LD_OWVAR 67
6584: PPUSH
6585: CALL_OW 380
// un := CreateHuman ;
6589: LD_ADDR_VAR 0 2
6593: PUSH
6594: CALL_OW 44
6598: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6599: LD_VAR 0 2
6603: PPUSH
6604: LD_VAR 0 3
6608: PPUSH
6609: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
6613: LD_INT 60
6615: PUSH
6616: LD_INT 56
6618: PUSH
6619: LD_INT 52
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: PUSH
6627: LD_OWVAR 67
6631: ARRAY
6632: PPUSH
6633: CALL_OW 13
6637: PUSH
6638: LD_OWVAR 1
6642: PUSH
6643: LD_INT 30
6645: MOD
6646: PLUS
6647: PUSH
6648: LD_EXP 21
6652: PUSH
6653: LD_INT 4
6655: LESS
6656: OR
6657: IFFALSE 6674
// SetCargo ( veh , mat_cans , 100 ) ;
6659: LD_VAR 0 3
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: LD_INT 100
6669: PPUSH
6670: CALL_OW 290
// for i := 2 to points do
6674: LD_ADDR_VAR 0 7
6678: PUSH
6679: DOUBLE
6680: LD_INT 2
6682: DEC
6683: ST_TO_ADDR
6684: LD_VAR 0 6
6688: PUSH
6689: FOR_TO
6690: IFFALSE 6733
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
6692: LD_VAR 0 3
6696: PPUSH
6697: LD_VAR 0 6
6701: PUSH
6702: LD_VAR 0 7
6706: ARRAY
6707: PUSH
6708: LD_INT 1
6710: ARRAY
6711: PPUSH
6712: LD_VAR 0 6
6716: PUSH
6717: LD_VAR 0 7
6721: ARRAY
6722: PUSH
6723: LD_INT 2
6725: ARRAY
6726: PPUSH
6727: CALL_OW 171
6731: GO 6689
6733: POP
6734: POP
// convoyCounter := convoyCounter + 1 ;
6735: LD_ADDR_EXP 21
6739: PUSH
6740: LD_EXP 21
6744: PUSH
6745: LD_INT 1
6747: PLUS
6748: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6749: LD_INT 35
6751: PPUSH
6752: CALL_OW 67
// if not HasTask ( veh ) then
6756: LD_VAR 0 3
6760: PPUSH
6761: CALL_OW 314
6765: NOT
6766: IFFALSE 6807
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6768: LD_VAR 0 3
6772: PPUSH
6773: LD_VAR 0 6
6777: PUSH
6778: LD_VAR 0 6
6782: ARRAY
6783: PUSH
6784: LD_INT 1
6786: ARRAY
6787: PPUSH
6788: LD_VAR 0 6
6792: PUSH
6793: LD_VAR 0 6
6797: ARRAY
6798: PUSH
6799: LD_INT 2
6801: ARRAY
6802: PPUSH
6803: CALL_OW 111
// if not IsOk ( veh ) then
6807: LD_VAR 0 3
6811: PPUSH
6812: CALL_OW 302
6816: NOT
6817: IFFALSE 6858
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6819: LD_VAR 0 2
6823: PPUSH
6824: LD_VAR 0 6
6828: PUSH
6829: LD_VAR 0 6
6833: ARRAY
6834: PUSH
6835: LD_INT 1
6837: ARRAY
6838: PPUSH
6839: LD_VAR 0 6
6843: PUSH
6844: LD_VAR 0 6
6848: ARRAY
6849: PUSH
6850: LD_INT 2
6852: ARRAY
6853: PPUSH
6854: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6858: LD_VAR 0 3
6862: PPUSH
6863: LD_VAR 0 8
6867: PPUSH
6868: CALL_OW 308
6872: PUSH
6873: LD_VAR 0 2
6877: PPUSH
6878: LD_VAR 0 8
6882: PPUSH
6883: CALL_OW 308
6887: OR
6888: IFFALSE 6749
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6890: LD_VAR 0 2
6894: PPUSH
6895: CALL_OW 302
6899: PUSH
6900: LD_VAR 0 3
6904: PPUSH
6905: CALL_OW 302
6909: NOT
6910: AND
6911: PUSH
6912: LD_VAR 0 2
6916: PPUSH
6917: LD_VAR 0 8
6921: PPUSH
6922: CALL_OW 308
6926: AND
6927: IFFALSE 6938
// RemoveUnit ( un ) ;
6929: LD_VAR 0 2
6933: PPUSH
6934: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6938: LD_VAR 0 3
6942: PPUSH
6943: LD_VAR 0 8
6947: PPUSH
6948: CALL_OW 308
6952: PUSH
6953: LD_VAR 0 3
6957: PPUSH
6958: CALL_OW 302
6962: AND
6963: IFFALSE 6974
// RemoveUnit ( veh ) ;
6965: LD_VAR 0 3
6969: PPUSH
6970: CALL_OW 64
// end ;
6974: LD_VAR 0 1
6978: RET
// export function SendAttack ; var un , veh , i ; begin
6979: LD_INT 0
6981: PPUSH
6982: PPUSH
6983: PPUSH
6984: PPUSH
// IncomingAttack ;
6985: CALL 15471 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6989: LD_INT 2100
6991: PPUSH
6992: LD_INT 3500
6994: PPUSH
6995: CALL_OW 12
6999: PPUSH
7000: CALL_OW 67
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] + attackWave div 3 do
7004: LD_ADDR_VAR 0 4
7008: PUSH
7009: DOUBLE
7010: LD_INT 1
7012: DEC
7013: ST_TO_ADDR
7014: LD_INT 3
7016: PUSH
7017: LD_INT 3
7019: PUSH
7020: LD_INT 4
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: LIST
7027: PUSH
7028: LD_OWVAR 67
7032: ARRAY
7033: PUSH
7034: LD_EXP 17
7038: PUSH
7039: LD_INT 3
7041: DIV
7042: PLUS
7043: PUSH
7044: FOR_TO
7045: IFFALSE 7157
// begin uc_side := 1 ;
7047: LD_ADDR_OWVAR 20
7051: PUSH
7052: LD_INT 1
7054: ST_TO_ADDR
// uc_nation := 1 ;
7055: LD_ADDR_OWVAR 21
7059: PUSH
7060: LD_INT 1
7062: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
7063: LD_INT 0
7065: PPUSH
7066: LD_INT 1
7068: PPUSH
7069: LD_INT 2
7071: PUSH
7072: LD_INT 3
7074: PUSH
7075: LD_INT 4
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: LD_OWVAR 67
7087: ARRAY
7088: PPUSH
7089: CALL_OW 380
// un := CreateHuman ;
7093: LD_ADDR_VAR 0 2
7097: PUSH
7098: CALL_OW 44
7102: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
7103: LD_VAR 0 2
7107: PPUSH
7108: LD_INT 37
7110: PPUSH
7111: LD_INT 70
7113: PPUSH
7114: LD_INT 3
7116: PPUSH
7117: LD_INT 0
7119: PPUSH
7120: CALL_OW 50
// usAttackers := usAttackers union un ;
7124: LD_ADDR_EXP 45
7128: PUSH
7129: LD_EXP 45
7133: PUSH
7134: LD_VAR 0 2
7138: UNION
7139: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
7140: LD_VAR 0 2
7144: PPUSH
7145: LD_INT 40
7147: PPUSH
7148: LD_INT 65
7150: PPUSH
7151: CALL_OW 111
// end ;
7155: GO 7044
7157: POP
7158: POP
// uc_side := 1 ;
7159: LD_ADDR_OWVAR 20
7163: PUSH
7164: LD_INT 1
7166: ST_TO_ADDR
// uc_nation := 1 ;
7167: LD_ADDR_OWVAR 21
7171: PUSH
7172: LD_INT 1
7174: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
7175: LD_INT 0
7177: PPUSH
7178: LD_INT 4
7180: PPUSH
7181: LD_INT 2
7183: PPUSH
7184: CALL_OW 380
// un := CreateHuman ;
7188: LD_ADDR_VAR 0 2
7192: PUSH
7193: CALL_OW 44
7197: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
7198: LD_VAR 0 2
7202: PPUSH
7203: LD_INT 37
7205: PPUSH
7206: LD_INT 70
7208: PPUSH
7209: LD_INT 3
7211: PPUSH
7212: LD_INT 0
7214: PPUSH
7215: CALL_OW 50
// usAttackers := usAttackers union un ;
7219: LD_ADDR_EXP 45
7223: PUSH
7224: LD_EXP 45
7228: PUSH
7229: LD_VAR 0 2
7233: UNION
7234: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
7235: LD_VAR 0 2
7239: PPUSH
7240: LD_INT 40
7242: PPUSH
7243: LD_INT 65
7245: PPUSH
7246: CALL_OW 111
// if attackWave > 1 or Difficulty > 1 then
7250: LD_EXP 17
7254: PUSH
7255: LD_INT 1
7257: GREATER
7258: PUSH
7259: LD_OWVAR 67
7263: PUSH
7264: LD_INT 1
7266: GREATER
7267: OR
7268: IFFALSE 7471
// begin for i := 1 to Difficulty + attackWave div 4 do
7270: LD_ADDR_VAR 0 4
7274: PUSH
7275: DOUBLE
7276: LD_INT 1
7278: DEC
7279: ST_TO_ADDR
7280: LD_OWVAR 67
7284: PUSH
7285: LD_EXP 17
7289: PUSH
7290: LD_INT 4
7292: DIV
7293: PLUS
7294: PUSH
7295: FOR_TO
7296: IFFALSE 7469
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_INT 1
7305: PPUSH
7306: LD_INT 1
7308: PPUSH
7309: LD_INT 2
7311: PPUSH
7312: LD_INT 1
7314: PPUSH
7315: LD_INT 1
7317: PPUSH
7318: LD_INT 4
7320: PUSH
7321: LD_INT 3
7323: PUSH
7324: LD_INT 2
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 3
7337: PPUSH
7338: CALL_OW 12
7342: ARRAY
7343: PPUSH
7344: LD_INT 90
7346: PPUSH
7347: CALL 360 0 7
7351: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
7352: LD_VAR 0 3
7356: PPUSH
7357: LD_INT 35
7359: PPUSH
7360: LD_INT 65
7362: PPUSH
7363: LD_INT 0
7365: PPUSH
7366: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
7370: LD_INT 0
7372: PPUSH
7373: LD_INT 3
7375: PPUSH
7376: LD_OWVAR 67
7380: PUSH
7381: LD_INT 1
7383: PLUS
7384: PPUSH
7385: CALL_OW 380
// un := CreateHuman ;
7389: LD_ADDR_VAR 0 2
7393: PUSH
7394: CALL_OW 44
7398: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7399: LD_VAR 0 2
7403: PPUSH
7404: LD_VAR 0 3
7408: PPUSH
7409: CALL_OW 52
// usAttackers := usAttackers union un ;
7413: LD_ADDR_EXP 45
7417: PUSH
7418: LD_EXP 45
7422: PUSH
7423: LD_VAR 0 2
7427: UNION
7428: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
7429: LD_VAR 0 3
7433: PPUSH
7434: LD_INT 39
7436: PPUSH
7437: LD_INT 60
7439: PPUSH
7440: CALL_OW 111
// wait ( 0 0$2 ) ;
7444: LD_INT 70
7446: PPUSH
7447: CALL_OW 67
// usAttackers := usAttackers union veh ;
7451: LD_ADDR_EXP 45
7455: PUSH
7456: LD_EXP 45
7460: PUSH
7461: LD_VAR 0 3
7465: UNION
7466: ST_TO_ADDR
// end ;
7467: GO 7295
7469: POP
7470: POP
// end ; attackWave := attackWave + 1 ;
7471: LD_ADDR_EXP 17
7475: PUSH
7476: LD_EXP 17
7480: PUSH
7481: LD_INT 1
7483: PLUS
7484: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
7485: LD_EXP 22
7489: PPUSH
7490: CALL_OW 427
// end ;
7494: LD_VAR 0 1
7498: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
7499: LD_INT 0
7501: PPUSH
7502: PPUSH
7503: PPUSH
7504: PPUSH
7505: PPUSH
7506: PPUSH
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
// if retreatAllowed then
7512: LD_EXP 10
7516: IFFALSE 7528
// strategy := 2 else
7518: LD_ADDR_VAR 0 5
7522: PUSH
7523: LD_INT 2
7525: ST_TO_ADDR
7526: GO 7544
// strategy := rand ( 0 , 2 ) ;
7528: LD_ADDR_VAR 0 5
7532: PUSH
7533: LD_INT 0
7535: PPUSH
7536: LD_INT 2
7538: PPUSH
7539: CALL_OW 12
7543: ST_TO_ADDR
// attackFormula := [ ] ;
7544: LD_ADDR_VAR 0 6
7548: PUSH
7549: EMPTY
7550: ST_TO_ADDR
// case strategy of 0 :
7551: LD_VAR 0 5
7555: PUSH
7556: LD_INT 0
7558: DOUBLE
7559: EQUAL
7560: IFTRUE 7564
7562: GO 7894
7564: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
7565: LD_INT 11
7567: PPUSH
7568: LD_INT 22
7570: PUSH
7571: LD_INT 2
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PUSH
7578: LD_INT 30
7580: PUSH
7581: LD_INT 4
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PPUSH
7592: CALL_OW 70
7596: NOT
7597: IFFALSE 7669
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7599: LD_ADDR_VAR 0 6
7603: PUSH
7604: LD_INT 41
7606: PUSH
7607: LD_INT 34
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: PUSH
7617: LD_INT 53
7619: PUSH
7620: LD_INT 62
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_INT 37
7629: PUSH
7630: LD_INT 63
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 44
7639: PUSH
7640: LD_INT 45
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 37
7649: PUSH
7650: LD_INT 28
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: ST_TO_ADDR
7667: GO 7892
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
7669: LD_INT 12
7671: PPUSH
7672: LD_INT 22
7674: PUSH
7675: LD_INT 2
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 2
7684: PUSH
7685: LD_INT 30
7687: PUSH
7688: LD_INT 4
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 30
7697: PUSH
7698: LD_INT 31
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: PUSH
7705: LD_INT 30
7707: PUSH
7708: LD_INT 32
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PPUSH
7725: CALL_OW 70
7729: NOT
7730: IFFALSE 7813
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
7732: LD_ADDR_VAR 0 6
7736: PUSH
7737: LD_INT 27
7739: PUSH
7740: LD_INT 42
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 27
7749: PUSH
7750: LD_INT 32
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 53
7763: PUSH
7764: LD_INT 62
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: LD_INT 37
7773: PUSH
7774: LD_INT 63
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 44
7783: PUSH
7784: LD_INT 45
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 37
7793: PUSH
7794: LD_INT 28
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: ST_TO_ADDR
7811: GO 7892
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7813: LD_ADDR_VAR 0 6
7817: PUSH
7818: LD_INT 71
7820: PUSH
7821: LD_INT 67
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 54
7830: PUSH
7831: LD_INT 35
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 63
7844: PUSH
7845: LD_INT 40
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 37
7854: PUSH
7855: LD_INT 63
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 44
7864: PUSH
7865: LD_INT 45
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 37
7874: PUSH
7875: LD_INT 28
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: ST_TO_ADDR
// end ; 1 :
7892: GO 8097
7894: LD_INT 1
7896: DOUBLE
7897: EQUAL
7898: IFTRUE 7902
7900: GO 8006
7902: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7903: LD_ADDR_VAR 0 6
7907: PUSH
7908: LD_INT 71
7910: PUSH
7911: LD_INT 67
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 82
7920: PUSH
7921: LD_INT 23
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 53
7930: PUSH
7931: LD_INT 7
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 43
7940: PUSH
7941: LD_INT 10
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 53
7956: PUSH
7957: LD_INT 62
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 37
7966: PUSH
7967: LD_INT 63
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 44
7976: PUSH
7977: LD_INT 45
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: LD_INT 37
7986: PUSH
7987: LD_INT 28
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: ST_TO_ADDR
8004: GO 8097
8006: LD_INT 2
8008: DOUBLE
8009: EQUAL
8010: IFTRUE 8014
8012: GO 8096
8014: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
8015: LD_ADDR_VAR 0 6
8019: PUSH
8020: LD_INT 90
8022: PUSH
8023: LD_INT 59
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 108
8032: PUSH
8033: LD_INT 64
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: LD_INT 82
8046: PUSH
8047: LD_INT 75
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 73
8056: PUSH
8057: LD_INT 67
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 101
8066: PUSH
8067: LD_INT 65
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: LD_INT 108
8076: PUSH
8077: LD_INT 62
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: ST_TO_ADDR
8094: GO 8097
8096: POP
// if not attackFormula then
8097: LD_VAR 0 6
8101: NOT
8102: IFFALSE 8106
// exit ;
8104: GO 9538
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
8106: LD_ADDR_VAR 0 7
8110: PUSH
8111: LD_EXP 45
8115: PPUSH
8116: LD_INT 25
8118: PUSH
8119: LD_INT 1
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PPUSH
8126: CALL_OW 72
8130: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
8131: LD_ADDR_VAR 0 8
8135: PUSH
8136: LD_EXP 45
8140: PPUSH
8141: LD_INT 25
8143: PUSH
8144: LD_INT 4
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PPUSH
8151: CALL_OW 72
8155: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
8156: LD_ADDR_VAR 0 9
8160: PUSH
8161: LD_EXP 45
8165: PPUSH
8166: LD_INT 25
8168: PUSH
8169: LD_INT 3
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PPUSH
8176: CALL_OW 72
8180: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
8181: LD_ADDR_VAR 0 10
8185: PUSH
8186: LD_EXP 45
8190: PPUSH
8191: LD_INT 21
8193: PUSH
8194: LD_INT 2
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 72
8205: ST_TO_ADDR
// if sci then
8206: LD_VAR 0 8
8210: IFFALSE 8247
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8212: LD_VAR 0 8
8216: PPUSH
8217: LD_VAR 0 6
8221: PUSH
8222: LD_INT 2
8224: ARRAY
8225: PUSH
8226: LD_INT 1
8228: ARRAY
8229: PPUSH
8230: LD_VAR 0 6
8234: PUSH
8235: LD_INT 2
8237: ARRAY
8238: PUSH
8239: LD_INT 2
8241: ARRAY
8242: PPUSH
8243: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8247: LD_INT 35
8249: PPUSH
8250: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
8254: LD_ADDR_VAR 0 7
8258: PUSH
8259: LD_EXP 45
8263: PPUSH
8264: LD_INT 25
8266: PUSH
8267: LD_INT 1
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 72
8278: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
8279: LD_ADDR_VAR 0 8
8283: PUSH
8284: LD_EXP 45
8288: PPUSH
8289: LD_INT 25
8291: PUSH
8292: LD_INT 4
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PPUSH
8299: CALL_OW 72
8303: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
8304: LD_ADDR_VAR 0 9
8308: PUSH
8309: LD_EXP 45
8313: PPUSH
8314: LD_INT 25
8316: PUSH
8317: LD_INT 3
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PPUSH
8324: CALL_OW 72
8328: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
8329: LD_ADDR_VAR 0 10
8333: PUSH
8334: LD_EXP 45
8338: PPUSH
8339: LD_INT 21
8341: PUSH
8342: LD_INT 2
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 72
8353: ST_TO_ADDR
// if sol then
8354: LD_VAR 0 7
8358: IFFALSE 8753
// begin for i in sol do
8360: LD_ADDR_VAR 0 2
8364: PUSH
8365: LD_VAR 0 7
8369: PUSH
8370: FOR_IN
8371: IFFALSE 8751
// begin tag := GetTag ( i ) ;
8373: LD_ADDR_VAR 0 4
8377: PUSH
8378: LD_VAR 0 2
8382: PPUSH
8383: CALL_OW 110
8387: ST_TO_ADDR
// if not tag then
8388: LD_VAR 0 4
8392: NOT
8393: IFFALSE 8511
// begin if GetLives ( i ) = 1000 then
8395: LD_VAR 0 2
8399: PPUSH
8400: CALL_OW 256
8404: PUSH
8405: LD_INT 1000
8407: EQUAL
8408: IFFALSE 8424
// SetTag ( i , 1 ) else
8410: LD_VAR 0 2
8414: PPUSH
8415: LD_INT 1
8417: PPUSH
8418: CALL_OW 109
8422: GO 8509
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 6 then
8424: LD_VAR 0 2
8428: PPUSH
8429: LD_VAR 0 6
8433: PUSH
8434: LD_INT 2
8436: ARRAY
8437: PUSH
8438: LD_INT 1
8440: ARRAY
8441: PPUSH
8442: LD_VAR 0 6
8446: PUSH
8447: LD_INT 2
8449: ARRAY
8450: PUSH
8451: LD_INT 2
8453: ARRAY
8454: PPUSH
8455: CALL_OW 297
8459: PUSH
8460: LD_INT 6
8462: GREATER
8463: IFFALSE 8509
// begin ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8465: LD_VAR 0 2
8469: PPUSH
8470: LD_VAR 0 6
8474: PUSH
8475: LD_INT 2
8477: ARRAY
8478: PUSH
8479: LD_INT 1
8481: ARRAY
8482: PPUSH
8483: LD_VAR 0 6
8487: PUSH
8488: LD_INT 2
8490: ARRAY
8491: PUSH
8492: LD_INT 2
8494: ARRAY
8495: PPUSH
8496: CALL_OW 111
// AddComHold ( i ) ;
8500: LD_VAR 0 2
8504: PPUSH
8505: CALL_OW 200
// end ; end else
8509: GO 8749
// begin if GetLives ( i ) < 720 then
8511: LD_VAR 0 2
8515: PPUSH
8516: CALL_OW 256
8520: PUSH
8521: LD_INT 720
8523: LESS
8524: IFFALSE 8540
// SetTag ( i , 0 ) else
8526: LD_VAR 0 2
8530: PPUSH
8531: LD_INT 0
8533: PPUSH
8534: CALL_OW 109
8538: GO 8749
// if tag <= attackFormula [ 1 ] then
8540: LD_VAR 0 4
8544: PUSH
8545: LD_VAR 0 6
8549: PUSH
8550: LD_INT 1
8552: ARRAY
8553: LESSEQUAL
8554: IFFALSE 8715
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
8556: LD_VAR 0 2
8560: PPUSH
8561: LD_VAR 0 6
8565: PUSH
8566: LD_INT 1
8568: ARRAY
8569: PUSH
8570: LD_VAR 0 4
8574: ARRAY
8575: PUSH
8576: LD_INT 1
8578: ARRAY
8579: PPUSH
8580: LD_VAR 0 6
8584: PUSH
8585: LD_INT 1
8587: ARRAY
8588: PUSH
8589: LD_VAR 0 4
8593: ARRAY
8594: PUSH
8595: LD_INT 2
8597: ARRAY
8598: PPUSH
8599: CALL_OW 297
8603: PUSH
8604: LD_INT 6
8606: GREATER
8607: IFFALSE 8658
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
8609: LD_VAR 0 2
8613: PPUSH
8614: LD_VAR 0 6
8618: PUSH
8619: LD_INT 1
8621: ARRAY
8622: PUSH
8623: LD_VAR 0 4
8627: ARRAY
8628: PUSH
8629: LD_INT 1
8631: ARRAY
8632: PPUSH
8633: LD_VAR 0 6
8637: PUSH
8638: LD_INT 1
8640: ARRAY
8641: PUSH
8642: LD_VAR 0 4
8646: ARRAY
8647: PUSH
8648: LD_INT 2
8650: ARRAY
8651: PPUSH
8652: CALL_OW 114
8656: GO 8713
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8658: LD_INT 81
8660: PUSH
8661: LD_INT 1
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 91
8670: PUSH
8671: LD_VAR 0 2
8675: PUSH
8676: LD_INT 10
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PPUSH
8688: CALL_OW 69
8692: NOT
8693: IFFALSE 8713
// SetTag ( i , tag + 1 ) ;
8695: LD_VAR 0 2
8699: PPUSH
8700: LD_VAR 0 4
8704: PUSH
8705: LD_INT 1
8707: PLUS
8708: PPUSH
8709: CALL_OW 109
// end else
8713: GO 8749
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8715: LD_VAR 0 2
8719: PPUSH
8720: LD_INT 81
8722: PUSH
8723: LD_INT 1
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PPUSH
8730: CALL_OW 69
8734: PPUSH
8735: LD_VAR 0 2
8739: PPUSH
8740: CALL_OW 74
8744: PPUSH
8745: CALL_OW 115
// end ; end ;
8749: GO 8370
8751: POP
8752: POP
// end ; if sci then
8753: LD_VAR 0 8
8757: IFFALSE 8916
// begin if not sol and not mech then
8759: LD_VAR 0 7
8763: NOT
8764: PUSH
8765: LD_VAR 0 9
8769: NOT
8770: AND
8771: IFFALSE 8823
// begin for i in sci do
8773: LD_ADDR_VAR 0 2
8777: PUSH
8778: LD_VAR 0 8
8782: PUSH
8783: FOR_IN
8784: IFFALSE 8819
// begin usForces := usForces union i ;
8786: LD_ADDR_EXP 42
8790: PUSH
8791: LD_EXP 42
8795: PUSH
8796: LD_VAR 0 2
8800: UNION
8801: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8802: LD_VAR 0 2
8806: PPUSH
8807: LD_INT 34
8809: PPUSH
8810: LD_INT 68
8812: PPUSH
8813: CALL_OW 111
// end ;
8817: GO 8783
8819: POP
8820: POP
// end else
8821: GO 8916
// for i in sci do
8823: LD_ADDR_VAR 0 2
8827: PUSH
8828: LD_VAR 0 8
8832: PUSH
8833: FOR_IN
8834: IFFALSE 8914
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 8 then
8836: LD_VAR 0 2
8840: PPUSH
8841: LD_VAR 0 6
8845: PUSH
8846: LD_INT 2
8848: ARRAY
8849: PUSH
8850: LD_INT 1
8852: ARRAY
8853: PPUSH
8854: LD_VAR 0 6
8858: PUSH
8859: LD_INT 2
8861: ARRAY
8862: PUSH
8863: LD_INT 2
8865: ARRAY
8866: PPUSH
8867: CALL_OW 297
8871: PUSH
8872: LD_INT 8
8874: GREATER
8875: IFFALSE 8912
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
8877: LD_VAR 0 2
8881: PPUSH
8882: LD_VAR 0 6
8886: PUSH
8887: LD_INT 2
8889: ARRAY
8890: PUSH
8891: LD_INT 1
8893: ARRAY
8894: PPUSH
8895: LD_VAR 0 6
8899: PUSH
8900: LD_INT 2
8902: ARRAY
8903: PUSH
8904: LD_INT 2
8906: ARRAY
8907: PPUSH
8908: CALL_OW 111
8912: GO 8833
8914: POP
8915: POP
// end ; if tanks and mech then
8916: LD_VAR 0 10
8920: PUSH
8921: LD_VAR 0 9
8925: AND
8926: IFFALSE 9531
// begin for i in mech do
8928: LD_ADDR_VAR 0 2
8932: PUSH
8933: LD_VAR 0 9
8937: PUSH
8938: FOR_IN
8939: IFFALSE 9529
// begin tag := GetTag ( i ) ;
8941: LD_ADDR_VAR 0 4
8945: PUSH
8946: LD_VAR 0 2
8950: PPUSH
8951: CALL_OW 110
8955: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8956: LD_ADDR_VAR 0 11
8960: PUSH
8961: LD_VAR 0 2
8965: PPUSH
8966: CALL_OW 310
8970: ST_TO_ADDR
// if not tag then
8971: LD_VAR 0 4
8975: NOT
8976: IFFALSE 9289
// begin if veh then
8978: LD_VAR 0 11
8982: IFFALSE 9131
// begin if GetLives ( veh ) = 1000 and GetFuel ( veh ) > 60 then
8984: LD_VAR 0 11
8988: PPUSH
8989: CALL_OW 256
8993: PUSH
8994: LD_INT 1000
8996: EQUAL
8997: PUSH
8998: LD_VAR 0 11
9002: PPUSH
9003: CALL_OW 261
9007: PUSH
9008: LD_INT 60
9010: GREATER
9011: AND
9012: IFFALSE 9028
// SetTag ( i , 1 ) else
9014: LD_VAR 0 2
9018: PPUSH
9019: LD_INT 1
9021: PPUSH
9022: CALL_OW 109
9026: GO 9129
// if GetDistUnitXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
9028: LD_VAR 0 2
9032: PPUSH
9033: LD_VAR 0 6
9037: PUSH
9038: LD_INT 3
9040: ARRAY
9041: PUSH
9042: LD_INT 1
9044: ARRAY
9045: PPUSH
9046: LD_VAR 0 6
9050: PUSH
9051: LD_INT 3
9053: ARRAY
9054: PUSH
9055: LD_INT 2
9057: ARRAY
9058: PPUSH
9059: CALL_OW 297
9063: PUSH
9064: LD_INT 7
9066: GREATER
9067: IFFALSE 9106
// ComMoveXY ( i , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
9069: LD_VAR 0 2
9073: PPUSH
9074: LD_VAR 0 6
9078: PUSH
9079: LD_INT 3
9081: ARRAY
9082: PUSH
9083: LD_INT 1
9085: ARRAY
9086: PPUSH
9087: LD_VAR 0 6
9091: PUSH
9092: LD_INT 3
9094: ARRAY
9095: PUSH
9096: LD_INT 2
9098: ARRAY
9099: PPUSH
9100: CALL_OW 111
9104: GO 9129
// begin ComExitVehicle ( i ) ;
9106: LD_VAR 0 2
9110: PPUSH
9111: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
9115: LD_VAR 0 2
9119: PPUSH
9120: LD_VAR 0 11
9124: PPUSH
9125: CALL_OW 189
// end ; end else
9129: GO 9287
// if GetLives ( i ) < 700 then
9131: LD_VAR 0 2
9135: PPUSH
9136: CALL_OW 256
9140: PUSH
9141: LD_INT 700
9143: LESS
9144: IFFALSE 9195
// begin usAttackers := usAttackers diff i ;
9146: LD_ADDR_EXP 45
9150: PUSH
9151: LD_EXP 45
9155: PUSH
9156: LD_VAR 0 2
9160: DIFF
9161: ST_TO_ADDR
// usForces := usForces union i ;
9162: LD_ADDR_EXP 42
9166: PUSH
9167: LD_EXP 42
9171: PUSH
9172: LD_VAR 0 2
9176: UNION
9177: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
9178: LD_VAR 0 2
9182: PPUSH
9183: LD_INT 34
9185: PPUSH
9186: LD_INT 68
9188: PPUSH
9189: CALL_OW 111
// end else
9193: GO 9287
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
9195: LD_VAR 0 10
9199: PPUSH
9200: LD_INT 58
9202: PUSH
9203: EMPTY
9204: LIST
9205: PUSH
9206: LD_INT 24
9208: PUSH
9209: LD_INT 1000
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PPUSH
9220: CALL_OW 72
9224: PUSH
9225: LD_VAR 0 2
9229: PPUSH
9230: CALL_OW 314
9234: NOT
9235: AND
9236: IFFALSE 9287
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) ;
9238: LD_VAR 0 2
9242: PPUSH
9243: LD_VAR 0 10
9247: PPUSH
9248: LD_INT 58
9250: PUSH
9251: EMPTY
9252: LIST
9253: PUSH
9254: LD_INT 24
9256: PUSH
9257: LD_INT 1000
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: PPUSH
9268: CALL_OW 72
9272: PPUSH
9273: LD_VAR 0 2
9277: PPUSH
9278: CALL_OW 74
9282: PPUSH
9283: CALL_OW 120
// end else
9287: GO 9527
// begin if GetLives ( veh ) < 620 then
9289: LD_VAR 0 11
9293: PPUSH
9294: CALL_OW 256
9298: PUSH
9299: LD_INT 620
9301: LESS
9302: IFFALSE 9318
// SetTag ( i , 0 ) else
9304: LD_VAR 0 2
9308: PPUSH
9309: LD_INT 0
9311: PPUSH
9312: CALL_OW 109
9316: GO 9527
// if tag <= attackFormula [ 4 ] then
9318: LD_VAR 0 4
9322: PUSH
9323: LD_VAR 0 6
9327: PUSH
9328: LD_INT 4
9330: ARRAY
9331: LESSEQUAL
9332: IFFALSE 9493
// begin if GetDistUnitXY ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
9334: LD_VAR 0 2
9338: PPUSH
9339: LD_VAR 0 6
9343: PUSH
9344: LD_INT 4
9346: ARRAY
9347: PUSH
9348: LD_VAR 0 4
9352: ARRAY
9353: PUSH
9354: LD_INT 1
9356: ARRAY
9357: PPUSH
9358: LD_VAR 0 6
9362: PUSH
9363: LD_INT 4
9365: ARRAY
9366: PUSH
9367: LD_VAR 0 4
9371: ARRAY
9372: PUSH
9373: LD_INT 2
9375: ARRAY
9376: PPUSH
9377: CALL_OW 297
9381: PUSH
9382: LD_INT 6
9384: GREATER
9385: IFFALSE 9436
// ComAgressiveMove ( i , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
9387: LD_VAR 0 2
9391: PPUSH
9392: LD_VAR 0 6
9396: PUSH
9397: LD_INT 4
9399: ARRAY
9400: PUSH
9401: LD_VAR 0 4
9405: ARRAY
9406: PUSH
9407: LD_INT 1
9409: ARRAY
9410: PPUSH
9411: LD_VAR 0 6
9415: PUSH
9416: LD_INT 4
9418: ARRAY
9419: PUSH
9420: LD_VAR 0 4
9424: ARRAY
9425: PUSH
9426: LD_INT 2
9428: ARRAY
9429: PPUSH
9430: CALL_OW 114
9434: GO 9491
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
9436: LD_INT 81
9438: PUSH
9439: LD_INT 1
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 91
9448: PUSH
9449: LD_VAR 0 2
9453: PUSH
9454: LD_INT 10
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PPUSH
9466: CALL_OW 69
9470: NOT
9471: IFFALSE 9491
// SetTag ( i , tag + 1 ) ;
9473: LD_VAR 0 2
9477: PPUSH
9478: LD_VAR 0 4
9482: PUSH
9483: LD_INT 1
9485: PLUS
9486: PPUSH
9487: CALL_OW 109
// end else
9491: GO 9527
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
9493: LD_VAR 0 2
9497: PPUSH
9498: LD_INT 81
9500: PUSH
9501: LD_INT 1
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PPUSH
9508: CALL_OW 69
9512: PPUSH
9513: LD_VAR 0 2
9517: PPUSH
9518: CALL_OW 74
9522: PPUSH
9523: CALL_OW 115
// end ; end ;
9527: GO 8938
9529: POP
9530: POP
// end ; until not usAttackers ;
9531: LD_EXP 45
9535: NOT
9536: IFFALSE 8247
// end ;
9538: LD_VAR 0 1
9542: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9543: LD_INT 22
9545: PUSH
9546: LD_INT 1
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PUSH
9553: LD_INT 32
9555: PUSH
9556: LD_INT 1
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PPUSH
9567: CALL_OW 69
9571: IFFALSE 9648
9573: GO 9575
9575: DISABLE
9576: LD_INT 0
9578: PPUSH
// begin enable ;
9579: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9580: LD_ADDR_VAR 0 1
9584: PUSH
9585: LD_INT 22
9587: PUSH
9588: LD_INT 1
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 32
9597: PUSH
9598: LD_INT 1
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PPUSH
9609: CALL_OW 69
9613: PUSH
9614: FOR_IN
9615: IFFALSE 9646
// if GetFuel ( i ) < 10 then
9617: LD_VAR 0 1
9621: PPUSH
9622: CALL_OW 261
9626: PUSH
9627: LD_INT 10
9629: LESS
9630: IFFALSE 9644
// SetFuel ( i , 10 ) ;
9632: LD_VAR 0 1
9636: PPUSH
9637: LD_INT 10
9639: PPUSH
9640: CALL_OW 240
9644: GO 9614
9646: POP
9647: POP
// end ; end_of_file
9648: PPOPN 1
9650: END
// export function Action ; var hasAll , i , tmp ; begin
9651: LD_INT 0
9653: PPUSH
9654: PPUSH
9655: PPUSH
9656: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9657: LD_ADDR_VAR 0 2
9661: PUSH
9662: LD_INT 22
9664: PUSH
9665: LD_INT 2
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: PUSH
9672: LD_INT 21
9674: PUSH
9675: LD_INT 1
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: LD_INT 23
9684: PUSH
9685: LD_INT 2
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: PPUSH
9697: CALL_OW 69
9701: PUSH
9702: LD_INT 7
9704: GREATEREQUAL
9705: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9706: LD_VAR 0 2
9710: PPUSH
9711: LD_STRING 03_HasAll
9713: PPUSH
9714: CALL_OW 39
// Video ( true ) ;
9718: LD_INT 1
9720: PPUSH
9721: CALL 1020 0 1
// CenterNowOnUnits ( Heike ) ;
9725: LD_EXP 26
9729: PPUSH
9730: CALL_OW 87
// wait ( 0 0$2 ) ;
9734: LD_INT 70
9736: PPUSH
9737: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9741: LD_EXP 34
9745: PPUSH
9746: LD_STRING DF-1-start
9748: PPUSH
9749: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9753: LD_EXP 26
9757: PPUSH
9758: LD_EXP 34
9762: PPUSH
9763: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9767: LD_EXP 26
9771: PPUSH
9772: LD_STRING DH-1-start
9774: PPUSH
9775: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9779: LD_EXP 35
9783: PPUSH
9784: LD_INT 92
9786: PPUSH
9787: LD_INT 21
9789: PPUSH
9790: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9794: LD_EXP 30
9798: PPUSH
9799: LD_INT 94
9801: PPUSH
9802: LD_INT 23
9804: PPUSH
9805: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9809: LD_EXP 38
9813: PUSH
9814: LD_INT 1
9816: ARRAY
9817: PPUSH
9818: LD_INT 90
9820: PPUSH
9821: LD_INT 23
9823: PPUSH
9824: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9828: LD_EXP 38
9832: PUSH
9833: LD_INT 2
9835: ARRAY
9836: PPUSH
9837: LD_INT 93
9839: PPUSH
9840: LD_INT 25
9842: PPUSH
9843: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9847: LD_EXP 38
9851: PPUSH
9852: LD_EXP 35
9856: PPUSH
9857: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9861: LD_EXP 35
9865: PUSH
9866: LD_EXP 30
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PPUSH
9875: LD_EXP 26
9879: PPUSH
9880: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9884: LD_EXP 26
9888: PPUSH
9889: LD_EXP 35
9893: PPUSH
9894: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9898: LD_INT 35
9900: PPUSH
9901: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9905: LD_EXP 35
9909: PPUSH
9910: LD_INT 92
9912: PPUSH
9913: LD_INT 21
9915: PPUSH
9916: CALL_OW 307
9920: IFFALSE 9898
// Say ( Omar , DO-1-start ) ;
9922: LD_EXP 35
9926: PPUSH
9927: LD_STRING DO-1-start
9929: PPUSH
9930: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9934: LD_EXP 26
9938: PPUSH
9939: LD_STRING DH-2-start
9941: PPUSH
9942: CALL_OW 88
// if hasAll then
9946: LD_VAR 0 2
9950: IFFALSE 10078
// begin Say ( Omar , DO-2-start ) ;
9952: LD_EXP 35
9956: PPUSH
9957: LD_STRING DO-2-start
9959: PPUSH
9960: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9964: LD_EXP 35
9968: PPUSH
9969: LD_STRING DO-3-start
9971: PPUSH
9972: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9976: LD_EXP 26
9980: PPUSH
9981: LD_STRING DH-3-start
9983: PPUSH
9984: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9988: LD_EXP 34
9992: PPUSH
9993: LD_STRING DF-2-start
9995: PPUSH
9996: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
10000: LD_EXP 35
10004: PPUSH
10005: LD_EXP 34
10009: PPUSH
10010: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
10014: LD_EXP 35
10018: PPUSH
10019: LD_STRING DO-4-start
10021: PPUSH
10022: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
10026: LD_EXP 34
10030: PPUSH
10031: LD_STRING DF-3-start
10033: PPUSH
10034: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
10038: LD_EXP 35
10042: PPUSH
10043: LD_STRING DO-5-start
10045: PPUSH
10046: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
10050: LD_EXP 34
10054: PPUSH
10055: LD_STRING DF-4-start
10057: PPUSH
10058: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
10062: LD_EXP 35
10066: PPUSH
10067: LD_EXP 26
10071: PPUSH
10072: CALL_OW 119
// end else
10076: GO 10178
// begin Say ( Omar , DO-2-start-a ) ;
10078: LD_EXP 35
10082: PPUSH
10083: LD_STRING DO-2-start-a
10085: PPUSH
10086: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
10090: LD_EXP 35
10094: PPUSH
10095: LD_STRING DO-3-start-a
10097: PPUSH
10098: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
10102: LD_EXP 26
10106: PPUSH
10107: LD_STRING DH-3-start-a
10109: PPUSH
10110: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
10114: LD_EXP 34
10118: PPUSH
10119: LD_STRING DF-2-start-a
10121: PPUSH
10122: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
10126: LD_EXP 35
10130: PPUSH
10131: LD_EXP 34
10135: PPUSH
10136: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
10140: LD_EXP 35
10144: PPUSH
10145: LD_STRING DO-4-start-a
10147: PPUSH
10148: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
10152: LD_EXP 34
10156: PPUSH
10157: LD_STRING DF-3-start-a
10159: PPUSH
10160: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
10164: LD_EXP 35
10168: PPUSH
10169: LD_EXP 26
10173: PPUSH
10174: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
10178: LD_INT 10
10180: PPUSH
10181: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
10185: LD_EXP 35
10189: PPUSH
10190: LD_STRING DO-1-mission
10192: PPUSH
10193: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
10197: LD_EXP 35
10201: PPUSH
10202: LD_STRING DO-2-mission
10204: PPUSH
10205: CALL_OW 88
// if not hasAll then
10209: LD_VAR 0 2
10213: NOT
10214: IFFALSE 10228
// Say ( Omar , DO-3-mission ) ;
10216: LD_EXP 35
10220: PPUSH
10221: LD_STRING DO-3-mission
10223: PPUSH
10224: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
10228: LD_EXP 35
10232: PPUSH
10233: LD_STRING DO-4-mission
10235: PPUSH
10236: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
10240: LD_EXP 26
10244: PPUSH
10245: LD_STRING DH-1-mission
10247: PPUSH
10248: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
10252: LD_EXP 34
10256: PPUSH
10257: LD_STRING DF-1-mission
10259: PPUSH
10260: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
10264: LD_EXP 35
10268: PPUSH
10269: LD_STRING DO-5-mission
10271: PPUSH
10272: CALL_OW 88
// if not hasAll then
10276: LD_VAR 0 2
10280: NOT
10281: IFFALSE 10416
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
10283: LD_ADDR_VAR 0 4
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_INT 2
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 21
10300: PUSH
10301: LD_INT 1
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 23
10310: PUSH
10311: LD_INT 2
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 69
10327: ST_TO_ADDR
// for i := 7 downto tmp do
10328: LD_ADDR_VAR 0 3
10332: PUSH
10333: DOUBLE
10334: LD_INT 7
10336: INC
10337: ST_TO_ADDR
10338: LD_VAR 0 4
10342: PUSH
10343: FOR_DOWNTO
10344: IFFALSE 10414
// begin if omarSquad < 3 then
10346: LD_EXP 38
10350: PUSH
10351: LD_INT 3
10353: LESS
10354: IFFALSE 10358
// break ;
10356: GO 10414
// SetSide ( omarSquad [ 3 ] , 2 ) ;
10358: LD_EXP 38
10362: PUSH
10363: LD_INT 3
10365: ARRAY
10366: PPUSH
10367: LD_INT 2
10369: PPUSH
10370: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
10374: LD_ADDR_EXP 40
10378: PUSH
10379: LD_EXP 40
10383: PUSH
10384: LD_EXP 38
10388: PUSH
10389: LD_INT 3
10391: ARRAY
10392: UNION
10393: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
10394: LD_ADDR_EXP 38
10398: PUSH
10399: LD_EXP 38
10403: PPUSH
10404: LD_INT 3
10406: PPUSH
10407: CALL_OW 3
10411: ST_TO_ADDR
// end ;
10412: GO 10343
10414: POP
10415: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
10416: LD_EXP 35
10420: PUSH
10421: LD_EXP 38
10425: ADD
10426: PPUSH
10427: LD_INT 103
10429: PPUSH
10430: LD_INT 9
10432: PPUSH
10433: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
10437: LD_VAR 0 2
10441: PUSH
10442: LD_EXP 31
10446: PPUSH
10447: CALL_OW 302
10451: AND
10452: IFFALSE 10513
// begin wait ( 0 0$3 ) ;
10454: LD_INT 105
10456: PPUSH
10457: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
10461: LD_EXP 31
10465: PPUSH
10466: LD_EXP 34
10470: PPUSH
10471: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
10475: LD_EXP 31
10479: PPUSH
10480: LD_STRING DK-1-side
10482: PPUSH
10483: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
10487: LD_EXP 34
10491: PPUSH
10492: LD_EXP 31
10496: PPUSH
10497: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
10501: LD_EXP 34
10505: PPUSH
10506: LD_STRING DF-1-side
10508: PPUSH
10509: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10513: LD_INT 22
10515: PUSH
10516: LD_INT 2
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PPUSH
10523: CALL_OW 69
10527: PPUSH
10528: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
10532: LD_EXP 34
10536: PUSH
10537: LD_EXP 37
10541: ADD
10542: PPUSH
10543: LD_INT 108
10545: PPUSH
10546: LD_INT 62
10548: PPUSH
10549: CALL_OW 111
// gameStarted := true ;
10553: LD_ADDR_EXP 3
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10561: LD_INT 105
10563: PPUSH
10564: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10568: LD_EXP 26
10572: PPUSH
10573: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10577: LD_EXP 26
10581: PPUSH
10582: LD_EXP 30
10586: PPUSH
10587: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10591: LD_INT 22
10593: PUSH
10594: LD_INT 2
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PPUSH
10601: CALL_OW 69
10605: PUSH
10606: LD_EXP 26
10610: DIFF
10611: PPUSH
10612: LD_EXP 26
10616: PPUSH
10617: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10621: LD_EXP 26
10625: PPUSH
10626: LD_STRING DH-1-explore
10628: PPUSH
10629: CALL_OW 88
// if Givi then
10633: LD_EXP 27
10637: IFFALSE 10653
// Say ( Givi , DG-1-explore ) else
10639: LD_EXP 27
10643: PPUSH
10644: LD_STRING DG-1-explore
10646: PPUSH
10647: CALL_OW 88
10651: GO 10690
// if heikeSecondSquad then
10653: LD_EXP 40
10657: IFFALSE 10690
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10659: LD_EXP 40
10663: PPUSH
10664: LD_INT 26
10666: PUSH
10667: LD_INT 1
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PPUSH
10674: CALL_OW 72
10678: PUSH
10679: LD_INT 1
10681: ARRAY
10682: PPUSH
10683: LD_STRING DArm-1-explore
10685: PPUSH
10686: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10690: LD_EXP 30
10694: PPUSH
10695: LD_STRING DA-1-explore
10697: PPUSH
10698: CALL_OW 88
// if Sophia then
10702: LD_EXP 32
10706: IFFALSE 10784
// begin Say ( Sophia , DS-2-explore ) ;
10708: LD_EXP 32
10712: PPUSH
10713: LD_STRING DS-2-explore
10715: PPUSH
10716: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10720: LD_EXP 30
10724: PPUSH
10725: LD_STRING DA-2-explore
10727: PPUSH
10728: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10732: LD_EXP 32
10736: PPUSH
10737: LD_EXP 30
10741: PPUSH
10742: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10746: LD_EXP 30
10750: PPUSH
10751: LD_EXP 32
10755: PPUSH
10756: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10760: LD_EXP 32
10764: PPUSH
10765: LD_STRING DS-3-explore
10767: PPUSH
10768: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10772: LD_EXP 30
10776: PPUSH
10777: LD_STRING DA-3-explore
10779: PPUSH
10780: CALL_OW 88
// end ; if Mike then
10784: LD_EXP 28
10788: IFFALSE 10844
// begin Say ( Mike , DM-1-explore ) ;
10790: LD_EXP 28
10794: PPUSH
10795: LD_STRING DM-1-explore
10797: PPUSH
10798: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10802: LD_EXP 26
10806: PPUSH
10807: LD_STRING DH-2-explore
10809: PPUSH
10810: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10814: LD_EXP 28
10818: PPUSH
10819: LD_STRING DM-2-explore
10821: PPUSH
10822: CALL_OW 88
// if Kaia then
10826: LD_EXP 31
10830: IFFALSE 10844
// Say ( Kaia , DK-1-explore ) ;
10832: LD_EXP 31
10836: PPUSH
10837: LD_STRING DK-1-explore
10839: PPUSH
10840: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10844: LD_INT 22
10846: PUSH
10847: LD_INT 2
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 69
10858: PPUSH
10859: CALL_OW 139
// Video ( false ) ;
10863: LD_INT 0
10865: PPUSH
10866: CALL 1020 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10870: LD_STRING BuildBase
10872: PPUSH
10873: CALL_OW 337
// SaveForQuickRestart ;
10877: CALL_OW 22
// end ;
10881: LD_VAR 0 1
10885: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10886: LD_EXP 5
10890: NOT
10891: PUSH
10892: LD_EXP 6
10896: NOT
10897: AND
10898: PUSH
10899: LD_INT 5
10901: PPUSH
10902: LD_INT 22
10904: PUSH
10905: LD_INT 2
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PPUSH
10912: CALL_OW 70
10916: AND
10917: PUSH
10918: LD_EXP 6
10922: NOT
10923: AND
10924: IFFALSE 11009
10926: GO 10928
10928: DISABLE
// begin if Mike then
10929: LD_EXP 28
10933: IFFALSE 10949
// Say ( Mike , DM-1-scout ) else
10935: LD_EXP 28
10939: PPUSH
10940: LD_STRING DM-1-scout
10942: PPUSH
10943: CALL_OW 88
10947: GO 10980
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10949: LD_EXP 40
10953: PPUSH
10954: LD_INT 26
10956: PUSH
10957: LD_INT 1
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PPUSH
10964: CALL_OW 72
10968: PUSH
10969: LD_INT 1
10971: ARRAY
10972: PPUSH
10973: LD_STRING DArm-1-explore
10975: PPUSH
10976: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10980: LD_INT 54
10982: PPUSH
10983: LD_INT 35
10985: PPUSH
10986: LD_INT 2
10988: PPUSH
10989: LD_INT 1
10991: PPUSH
10992: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10996: LD_INT 54
10998: PPUSH
10999: LD_INT 35
11001: PPUSH
11002: LD_INT 2
11004: PPUSH
11005: CALL_OW 331
// end ;
11009: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
11010: LD_INT 6
11012: PPUSH
11013: LD_INT 22
11015: PUSH
11016: LD_INT 2
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 70
11027: PUSH
11028: LD_EXP 6
11032: NOT
11033: AND
11034: IFFALSE 11288
11036: GO 11038
11038: DISABLE
11039: LD_INT 0
11041: PPUSH
11042: PPUSH
11043: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11044: LD_ADDR_VAR 0 1
11048: PUSH
11049: LD_EXP 40
11053: PPUSH
11054: LD_INT 26
11056: PUSH
11057: LD_INT 1
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PPUSH
11064: CALL_OW 72
11068: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
11069: LD_ADDR_VAR 0 2
11073: PUSH
11074: LD_EXP 40
11078: PPUSH
11079: LD_INT 26
11081: PUSH
11082: LD_INT 2
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PPUSH
11089: CALL_OW 72
11093: ST_TO_ADDR
// DialogueOn ;
11094: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
11098: LD_INT 36
11100: PPUSH
11101: LD_INT 22
11103: PPUSH
11104: LD_INT 2
11106: PPUSH
11107: LD_INT 8
11109: PPUSH
11110: CALL_OW 330
// dwait ( 0 0$1 ) ;
11114: LD_INT 35
11116: PPUSH
11117: CALL_OW 68
// speakerOk := false ;
11121: LD_ADDR_VAR 0 3
11125: PUSH
11126: LD_INT 0
11128: ST_TO_ADDR
// if Mike then
11129: LD_EXP 28
11133: IFFALSE 11155
// speakerOk := Say ( Mike , DM-1-spot ) else
11135: LD_ADDR_VAR 0 3
11139: PUSH
11140: LD_EXP 28
11144: PPUSH
11145: LD_STRING DM-1-spot
11147: PPUSH
11148: CALL_OW 88
11152: ST_TO_ADDR
11153: GO 11183
// if randomMen then
11155: LD_VAR 0 1
11159: IFFALSE 11183
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11161: LD_ADDR_VAR 0 3
11165: PUSH
11166: LD_VAR 0 1
11170: PUSH
11171: LD_INT 1
11173: ARRAY
11174: PPUSH
11175: LD_STRING DArm-1-spot-a
11177: PPUSH
11178: CALL_OW 88
11182: ST_TO_ADDR
// if speakerOk then
11183: LD_VAR 0 3
11187: IFFALSE 11231
// begin if Givi then
11189: LD_EXP 27
11193: IFFALSE 11209
// Say ( Givi , DG-1-spot ) else
11195: LD_EXP 27
11199: PPUSH
11200: LD_STRING DG-1-spot
11202: PPUSH
11203: CALL_OW 88
11207: GO 11231
// if randomWomen then
11209: LD_VAR 0 2
11213: IFFALSE 11231
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
11215: LD_VAR 0 2
11219: PUSH
11220: LD_INT 1
11222: ARRAY
11223: PPUSH
11224: LD_STRING DArf-1-spot-a
11226: PPUSH
11227: CALL_OW 88
// end ; if Mike then
11231: LD_EXP 28
11235: IFFALSE 11251
// Say ( Heike , DH-1-spot ) else
11237: LD_EXP 26
11241: PPUSH
11242: LD_STRING DH-1-spot
11244: PPUSH
11245: CALL_OW 88
11249: GO 11263
// Say ( Heike , DH-1-spot-a ) ;
11251: LD_EXP 26
11255: PPUSH
11256: LD_STRING DH-1-spot-a
11258: PPUSH
11259: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
11263: LD_INT 36
11265: PPUSH
11266: LD_INT 22
11268: PPUSH
11269: LD_INT 2
11271: PPUSH
11272: CALL_OW 331
// DialogueOff ;
11276: CALL_OW 7
// americanBaseSpoted := true ;
11280: LD_ADDR_EXP 5
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// end ;
11288: PPOPN 3
11290: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
11291: LD_EXP 5
11295: NOT
11296: PUSH
11297: LD_INT 22
11299: PUSH
11300: LD_INT 2
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 101
11309: PUSH
11310: LD_INT 1
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PPUSH
11321: CALL_OW 69
11325: AND
11326: PUSH
11327: LD_EXP 6
11331: NOT
11332: AND
11333: IFFALSE 11419
11335: GO 11337
11337: DISABLE
11338: LD_INT 0
11340: PPUSH
// begin americanBaseSpoted := true ;
11341: LD_ADDR_EXP 5
11345: PUSH
11346: LD_INT 1
11348: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
11349: LD_ADDR_VAR 0 1
11353: PUSH
11354: LD_EXP 40
11358: PPUSH
11359: LD_INT 26
11361: PUSH
11362: LD_INT 1
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PPUSH
11369: CALL_OW 72
11373: ST_TO_ADDR
// if not randomMen then
11374: LD_VAR 0 1
11378: NOT
11379: IFFALSE 11383
// exit ;
11381: GO 11419
// DialogueOn ;
11383: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
11387: LD_VAR 0 1
11391: PUSH
11392: LD_INT 1
11394: ARRAY
11395: PPUSH
11396: LD_STRING DArm-1-spot-a
11398: PPUSH
11399: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
11403: LD_EXP 26
11407: PPUSH
11408: LD_STRING DH-1-spot-a
11410: PPUSH
11411: CALL_OW 88
// DialogueOff ;
11415: CALL_OW 7
// end ;
11419: PPOPN 1
11421: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) do var i , p ;
11422: LD_INT 11
11424: PPUSH
11425: CALL_OW 255
11429: PUSH
11430: LD_INT 2
11432: EQUAL
11433: PUSH
11434: LD_INT 7
11436: PPUSH
11437: LD_INT 22
11439: PUSH
11440: LD_INT 1
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 3
11449: PUSH
11450: LD_INT 50
11452: PUSH
11453: EMPTY
11454: LIST
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: LD_INT 30
11462: PUSH
11463: LD_INT 31
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: PPUSH
11475: CALL_OW 70
11479: OR
11480: PUSH
11481: LD_INT 7
11483: PPUSH
11484: LD_INT 22
11486: PUSH
11487: LD_INT 2
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 70
11498: PUSH
11499: LD_INT 1
11501: GREATER
11502: OR
11503: PUSH
11504: LD_INT 6
11506: PPUSH
11507: LD_INT 22
11509: PUSH
11510: LD_INT 2
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PPUSH
11517: CALL_OW 70
11521: OR
11522: IFFALSE 12079
11524: GO 11526
11526: DISABLE
11527: LD_INT 0
11529: PPUSH
11530: PPUSH
// begin wait ( 0 0$3 ) ;
11531: LD_INT 105
11533: PPUSH
11534: CALL_OW 67
// if IsOk ( usCommander ) then
11538: LD_EXP 43
11542: PPUSH
11543: CALL_OW 302
11547: IFFALSE 11610
// begin usForces := usForces union usCommander ;
11549: LD_ADDR_EXP 42
11553: PUSH
11554: LD_EXP 42
11558: PUSH
11559: LD_EXP 43
11563: UNION
11564: ST_TO_ADDR
// if FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) then
11565: LD_INT 6
11567: PPUSH
11568: LD_INT 22
11570: PUSH
11571: LD_INT 2
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PPUSH
11578: CALL_OW 70
11582: IFFALSE 11598
// Say ( usCommander , DUsm-2-assault ) else
11584: LD_EXP 43
11588: PPUSH
11589: LD_STRING DUsm-2-assault
11591: PPUSH
11592: CALL_OW 88
11596: GO 11610
// Say ( usCommander , DUsm-1-assault ) ;
11598: LD_EXP 43
11602: PPUSH
11603: LD_STRING DUsm-1-assault
11605: PPUSH
11606: CALL_OW 88
// end ; for i in usForces do
11610: LD_ADDR_VAR 0 1
11614: PUSH
11615: LD_EXP 42
11619: PUSH
11620: FOR_IN
11621: IFFALSE 11667
// begin if IsInUnit ( i ) then
11623: LD_VAR 0 1
11627: PPUSH
11628: CALL_OW 310
11632: IFFALSE 11643
// ComExitBuilding ( i ) ;
11634: LD_VAR 0 1
11638: PPUSH
11639: CALL_OW 122
// wait ( 3 ) ;
11643: LD_INT 3
11645: PPUSH
11646: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11650: LD_VAR 0 1
11654: PPUSH
11655: LD_INT 34
11657: PPUSH
11658: LD_INT 67
11660: PPUSH
11661: CALL_OW 111
// end ;
11665: GO 11620
11667: POP
11668: POP
// Say ( Heike , DH-1-assault ) ;
11669: LD_EXP 26
11673: PPUSH
11674: LD_STRING DH-1-assault
11676: PPUSH
11677: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11681: LD_INT 35
11683: PPUSH
11684: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11688: LD_VAR 0 1
11692: PPUSH
11693: LD_INT 34
11695: PPUSH
11696: LD_INT 67
11698: PPUSH
11699: CALL_OW 111
// until not usForces ;
11703: LD_EXP 42
11707: NOT
11708: IFFALSE 11681
// music_nat := 2 ;
11710: LD_ADDR_OWVAR 71
11714: PUSH
11715: LD_INT 2
11717: ST_TO_ADDR
// music_class := music_victory ;
11718: LD_ADDR_OWVAR 72
11722: PUSH
11723: LD_INT 4
11725: ST_TO_ADDR
// if not americanHasEscaped then
11726: LD_EXP 7
11730: NOT
11731: IFFALSE 11752
// begin Say ( Heike , DH-2-assault ) ;
11733: LD_EXP 26
11737: PPUSH
11738: LD_STRING DH-2-assault
11740: PPUSH
11741: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11745: LD_STRING ACH_CLEAN
11747: PPUSH
11748: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11752: LD_INT 70
11754: PPUSH
11755: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11759: LD_INT 35
11761: PPUSH
11762: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11766: LD_INT 22
11768: PUSH
11769: LD_INT 2
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 21
11778: PUSH
11779: LD_INT 1
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: LD_INT 3
11788: PUSH
11789: LD_INT 50
11791: PUSH
11792: EMPTY
11793: LIST
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 69
11808: NOT
11809: IFFALSE 11759
// Video ( true ) ;
11811: LD_INT 1
11813: PPUSH
11814: CALL 1020 0 1
// if not GetSide ( usDepot ) = 2 then
11818: LD_INT 11
11820: PPUSH
11821: CALL_OW 255
11825: PUSH
11826: LD_INT 2
11828: EQUAL
11829: NOT
11830: IFFALSE 11842
// SetSide ( usDepot , 2 ) ;
11832: LD_INT 11
11834: PPUSH
11835: LD_INT 2
11837: PPUSH
11838: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11842: LD_INT 35
11844: PPUSH
11845: LD_INT 22
11847: PPUSH
11848: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11852: LD_EXP 26
11856: PPUSH
11857: LD_INT 35
11859: PPUSH
11860: LD_INT 22
11862: PPUSH
11863: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11867: LD_EXP 26
11871: PPUSH
11872: LD_INT 38
11874: PPUSH
11875: LD_INT 25
11877: PPUSH
11878: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11882: LD_EXP 39
11886: PUSH
11887: LD_EXP 40
11891: UNION
11892: PPUSH
11893: LD_INT 39
11895: PPUSH
11896: LD_INT 26
11898: PPUSH
11899: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11903: LD_EXP 39
11907: PUSH
11908: LD_EXP 40
11912: UNION
11913: PPUSH
11914: LD_EXP 26
11918: PPUSH
11919: CALL_OW 179
// p := 0 ;
11923: LD_ADDR_VAR 0 2
11927: PUSH
11928: LD_INT 0
11930: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11931: LD_INT 35
11933: PPUSH
11934: CALL_OW 67
// p := p + 1 ;
11938: LD_ADDR_VAR 0 2
11942: PUSH
11943: LD_VAR 0 2
11947: PUSH
11948: LD_INT 1
11950: PLUS
11951: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11952: LD_EXP 26
11956: PPUSH
11957: CALL_OW 314
11961: NOT
11962: PUSH
11963: LD_VAR 0 2
11967: PUSH
11968: LD_INT 10
11970: GREATER
11971: OR
11972: IFFALSE 11931
// Say ( Heike , DH-1-capture ) ;
11974: LD_EXP 26
11978: PPUSH
11979: LD_STRING DH-1-capture
11981: PPUSH
11982: CALL_OW 88
// if Markov then
11986: LD_EXP 33
11990: IFFALSE 12004
// Say ( Markov , DMar-1-capture ) ;
11992: LD_EXP 33
11996: PPUSH
11997: LD_STRING DMar-1-capture
11999: PPUSH
12000: CALL_OW 88
// if Sophia then
12004: LD_EXP 32
12008: IFFALSE 12034
// begin Say ( Heike , DH-2-capture ) ;
12010: LD_EXP 26
12014: PPUSH
12015: LD_STRING DH-2-capture
12017: PPUSH
12018: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
12022: LD_EXP 32
12026: PPUSH
12027: LD_STRING DS-1-capture
12029: PPUSH
12030: CALL_OW 88
// end ; Video ( false ) ;
12034: LD_INT 0
12036: PPUSH
12037: CALL 1020 0 1
// music_nat := music_auto ;
12041: LD_ADDR_OWVAR 71
12045: PUSH
12046: LD_INT 0
12048: ST_TO_ADDR
// music_class := music_auto ;
12049: LD_ADDR_OWVAR 72
12053: PUSH
12054: LD_INT 0
12056: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
12057: LD_STRING ConstructBase
12059: PPUSH
12060: CALL_OW 337
// wait ( 0 0$3 ) ;
12064: LD_INT 105
12066: PPUSH
12067: CALL_OW 67
// americanBaseCaptured := true ;
12071: LD_ADDR_EXP 6
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// end ;
12079: PPOPN 2
12081: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
12082: LD_EXP 12
12086: PUSH
12087: LD_INT 3
12089: GREATEREQUAL
12090: IFFALSE 12102
12092: GO 12094
12094: DISABLE
// SetAchievement ( ACH_ENG ) ;
12095: LD_STRING ACH_ENG
12097: PPUSH
12098: CALL_OW 543
12102: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
12103: LD_INT 22
12105: PUSH
12106: LD_INT 2
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 25
12115: PUSH
12116: LD_INT 15
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PPUSH
12127: CALL_OW 69
12131: PUSH
12132: LD_INT 4
12134: GREATEREQUAL
12135: IFFALSE 12147
12137: GO 12139
12139: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
12140: LD_STRING ACH_APEGEN
12142: PPUSH
12143: CALL_OW 543
12147: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
12148: LD_INT 22
12150: PUSH
12151: LD_INT 2
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 30
12160: PUSH
12161: LD_INT 2
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 3
12170: PUSH
12171: LD_INT 57
12173: PUSH
12174: EMPTY
12175: LIST
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: LIST
12185: PPUSH
12186: CALL_OW 69
12190: IFFALSE 12433
12192: GO 12194
12194: DISABLE
// begin workshopBuilded := true ;
12195: LD_ADDR_EXP 9
12199: PUSH
12200: LD_INT 1
12202: ST_TO_ADDR
// if IsOk ( Markov ) then
12203: LD_EXP 33
12207: PPUSH
12208: CALL_OW 302
12212: IFFALSE 12271
// begin Say ( Heike , DH-1-shop-a ) ;
12214: LD_EXP 26
12218: PPUSH
12219: LD_STRING DH-1-shop-a
12221: PPUSH
12222: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
12226: LD_INT 47
12228: PPUSH
12229: LD_INT 2
12231: PPUSH
12232: CALL_OW 321
12236: PUSH
12237: LD_INT 2
12239: EQUAL
12240: PUSH
12241: LD_INT 45
12243: PPUSH
12244: LD_INT 2
12246: PPUSH
12247: CALL_OW 321
12251: PUSH
12252: LD_INT 2
12254: EQUAL
12255: AND
12256: NOT
12257: IFFALSE 12271
// Say ( Markov , DMar-1-shop-a ) ;
12259: LD_EXP 33
12263: PPUSH
12264: LD_STRING DMar-1-shop-a
12266: PPUSH
12267: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12271: LD_INT 35
12273: PPUSH
12274: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
12278: LD_INT 47
12280: PPUSH
12281: LD_INT 2
12283: PPUSH
12284: CALL_OW 321
12288: PUSH
12289: LD_INT 2
12291: EQUAL
12292: PUSH
12293: LD_INT 45
12295: PPUSH
12296: LD_INT 2
12298: PPUSH
12299: CALL_OW 321
12303: PUSH
12304: LD_INT 2
12306: EQUAL
12307: OR
12308: IFFALSE 12271
// DialogueOn ;
12310: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
12314: LD_EXP 33
12318: PPUSH
12319: LD_STRING DMar-1-shop
12321: PPUSH
12322: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
12326: LD_EXP 26
12330: PPUSH
12331: LD_STRING DH-1-shop
12333: PPUSH
12334: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
12338: LD_EXP 33
12342: PPUSH
12343: LD_STRING DMar-2-shop
12345: PPUSH
12346: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
12350: LD_EXP 33
12354: PPUSH
12355: LD_STRING DMar-3-shop
12357: PPUSH
12358: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
12362: LD_EXP 26
12366: PPUSH
12367: LD_STRING DH-2-shop
12369: PPUSH
12370: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
12374: LD_EXP 33
12378: PPUSH
12379: LD_STRING DMar-4-shop
12381: PPUSH
12382: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
12386: LD_EXP 26
12390: PPUSH
12391: LD_STRING DH-3-shop
12393: PPUSH
12394: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
12398: LD_EXP 33
12402: PPUSH
12403: LD_STRING DMar-5-shop
12405: PPUSH
12406: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
12410: LD_EXP 26
12414: PPUSH
12415: LD_STRING DH-4-shop
12417: PPUSH
12418: CALL_OW 88
// DialogueOff ;
12422: CALL_OW 7
// ChangeMissionObjectives ( ConstructVeh ) ;
12426: LD_STRING ConstructVeh
12428: PPUSH
12429: CALL_OW 337
// end ;
12433: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
12434: LD_INT 2
12436: PPUSH
12437: LD_INT 2
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: CALL 1191 0 3
12447: PUSH
12448: LD_INT 0
12450: EQUAL
12451: IFFALSE 12463
12453: GO 12455
12455: DISABLE
// ChangeMissionObjectives ( Techs ) ;
12456: LD_STRING Techs
12458: PPUSH
12459: CALL_OW 337
12463: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
12464: LD_EXP 33
12468: PPUSH
12469: CALL_OW 302
12473: PUSH
12474: LD_INT 22
12476: PUSH
12477: LD_INT 2
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 2
12486: PUSH
12487: LD_INT 34
12489: PUSH
12490: LD_INT 22
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: LD_INT 35
12499: PUSH
12500: LD_INT 22
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PPUSH
12516: CALL_OW 69
12520: AND
12521: IFFALSE 12628
12523: GO 12525
12525: DISABLE
// begin DialogueOn ;
12526: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12530: LD_INT 22
12532: PUSH
12533: LD_INT 2
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 2
12542: PUSH
12543: LD_INT 34
12545: PUSH
12546: LD_INT 22
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: LD_INT 35
12555: PUSH
12556: LD_INT 22
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: LIST
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PPUSH
12572: CALL_OW 69
12576: PPUSH
12577: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12581: LD_INT 10
12583: PPUSH
12584: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12588: LD_EXP 26
12592: PPUSH
12593: LD_STRING DH-1-bal
12595: PPUSH
12596: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12600: LD_EXP 33
12604: PPUSH
12605: LD_STRING DMar-1-bal
12607: PPUSH
12608: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12612: LD_EXP 26
12616: PPUSH
12617: LD_STRING DH-2-bal
12619: PPUSH
12620: CALL_OW 88
// DialogueOff ;
12624: CALL_OW 7
// end ;
12628: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12629: LD_EXP 30
12633: PPUSH
12634: CALL_OW 302
12638: PUSH
12639: LD_INT 22
12641: PUSH
12642: LD_INT 2
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 30
12651: PUSH
12652: LD_INT 6
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PPUSH
12663: CALL_OW 69
12667: AND
12668: IFFALSE 12729
12670: GO 12672
12672: DISABLE
// begin DialogueOn ;
12673: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12677: LD_EXP 30
12681: PPUSH
12682: LD_STRING DA-1-lab
12684: PPUSH
12685: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12689: LD_EXP 26
12693: PPUSH
12694: LD_STRING DH-1-lab
12696: PPUSH
12697: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12701: LD_EXP 30
12705: PPUSH
12706: LD_STRING DA-2-lab
12708: PPUSH
12709: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12713: LD_EXP 26
12717: PPUSH
12718: LD_STRING DH-2-lab
12720: PPUSH
12721: CALL_OW 88
// DialogueOff ;
12725: CALL_OW 7
// end ;
12729: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) do var ape ;
12730: LD_EXP 31
12734: PPUSH
12735: CALL_OW 302
12739: PUSH
12740: LD_INT 22
12742: PUSH
12743: LD_INT 2
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 25
12752: PUSH
12753: LD_INT 15
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PPUSH
12764: CALL_OW 69
12768: AND
12769: IFFALSE 12949
12771: GO 12773
12773: DISABLE
12774: LD_INT 0
12776: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12777: LD_ADDR_VAR 0 1
12781: PUSH
12782: LD_INT 22
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 25
12794: PUSH
12795: LD_INT 15
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PPUSH
12806: CALL_OW 69
12810: ST_TO_ADDR
// Video ( true ) ;
12811: LD_INT 1
12813: PPUSH
12814: CALL 1020 0 1
// CenterNowOnUnits ( ape [ 1 ] ) ;
12818: LD_VAR 0 1
12822: PUSH
12823: LD_INT 1
12825: ARRAY
12826: PPUSH
12827: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12831: LD_VAR 0 1
12835: PUSH
12836: LD_INT 1
12838: ARRAY
12839: PPUSH
12840: CALL_OW 122
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12844: LD_VAR 0 1
12848: PUSH
12849: LD_INT 1
12851: ARRAY
12852: PPUSH
12853: LD_INT 35
12855: PPUSH
12856: LD_INT 28
12858: PPUSH
12859: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12863: LD_VAR 0 1
12867: PUSH
12868: LD_INT 1
12870: ARRAY
12871: PPUSH
12872: LD_INT 36
12874: PPUSH
12875: LD_INT 17
12877: PPUSH
12878: CALL_OW 171
// Say ( Kaia , DK-1-apesol ) ;
12882: LD_EXP 31
12886: PPUSH
12887: LD_STRING DK-1-apesol
12889: PPUSH
12890: CALL_OW 88
// Say ( Aviradze , DA-1-apesol ) ;
12894: LD_EXP 30
12898: PPUSH
12899: LD_STRING DA-1-apesol
12901: PPUSH
12902: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12906: LD_EXP 31
12910: PPUSH
12911: LD_STRING DK-2-apesol
12913: PPUSH
12914: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12918: LD_EXP 30
12922: PPUSH
12923: LD_STRING DA-2-apesol
12925: PPUSH
12926: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12930: LD_EXP 31
12934: PPUSH
12935: LD_STRING DK-3-apesol
12937: PPUSH
12938: CALL_OW 88
// Video ( false ) ;
12942: LD_INT 0
12944: PPUSH
12945: CALL 1020 0 1
// end ;
12949: PPOPN 1
12951: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) do var ape ;
12952: LD_EXP 32
12956: PPUSH
12957: CALL_OW 302
12961: PUSH
12962: LD_INT 22
12964: PUSH
12965: LD_INT 2
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 25
12974: PUSH
12975: LD_INT 16
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PPUSH
12986: CALL_OW 69
12990: AND
12991: IFFALSE 13263
12993: GO 12995
12995: DISABLE
12996: LD_INT 0
12998: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12999: LD_ADDR_VAR 0 1
13003: PUSH
13004: LD_INT 22
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: LD_INT 25
13016: PUSH
13017: LD_INT 16
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PPUSH
13028: CALL_OW 69
13032: ST_TO_ADDR
// Video ( true ) ;
13033: LD_INT 1
13035: PPUSH
13036: CALL 1020 0 1
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
13040: LD_INT 5
13042: PPUSH
13043: LD_INT 35
13045: PPUSH
13046: LD_INT 22
13048: PPUSH
13049: LD_INT 1
13051: PPUSH
13052: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
13056: LD_EXP 32
13060: PPUSH
13061: LD_VAR 0 1
13065: PUSH
13066: LD_INT 1
13068: ARRAY
13069: PPUSH
13070: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
13074: LD_VAR 0 1
13078: PUSH
13079: LD_INT 1
13081: ARRAY
13082: PPUSH
13083: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
13087: LD_VAR 0 1
13091: PUSH
13092: LD_INT 1
13094: ARRAY
13095: PPUSH
13096: CALL_OW 122
// wait ( 0 0$2 ) ;
13100: LD_INT 70
13102: PPUSH
13103: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
13107: LD_EXP 32
13111: PPUSH
13112: LD_STRING DS-1-apeeng
13114: PPUSH
13115: CALL_OW 88
// if IsOk ( Kamil ) then
13119: LD_EXP 29
13123: PPUSH
13124: CALL_OW 302
13128: IFFALSE 13256
// begin Say ( Kamil , DKam-1-apeeng ) ;
13130: LD_EXP 29
13134: PPUSH
13135: LD_STRING DKam-1-apeeng
13137: PPUSH
13138: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
13142: LD_EXP 32
13146: PPUSH
13147: LD_STRING DS-2-apeeng
13149: PPUSH
13150: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
13154: LD_EXP 29
13158: PPUSH
13159: LD_STRING DKam-2-apeeng
13161: PPUSH
13162: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
13166: LD_EXP 32
13170: PPUSH
13171: LD_STRING DS-3-apeeng
13173: PPUSH
13174: CALL_OW 88
// if not IsOK ( Kaia ) then
13178: LD_EXP 31
13182: PPUSH
13183: CALL_OW 302
13187: NOT
13188: IFFALSE 13199
// begin Video ( false ) ;
13190: LD_INT 0
13192: PPUSH
13193: CALL 1020 0 1
// exit ;
13197: GO 13263
// end ; Say ( Kaia , DK-1-apeeng ) ;
13199: LD_EXP 31
13203: PPUSH
13204: LD_STRING DK-1-apeeng
13206: PPUSH
13207: CALL_OW 88
// if not IsOk ( Givi ) then
13211: LD_EXP 27
13215: PPUSH
13216: CALL_OW 302
13220: NOT
13221: IFFALSE 13232
// begin Video ( false ) ;
13223: LD_INT 0
13225: PPUSH
13226: CALL 1020 0 1
// exit ;
13230: GO 13263
// end ; Say ( Givi , DG-1-apeeng ) ;
13232: LD_EXP 27
13236: PPUSH
13237: LD_STRING DG-1-apeeng
13239: PPUSH
13240: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
13244: LD_EXP 31
13248: PPUSH
13249: LD_STRING DK-2-apeeng
13251: PPUSH
13252: CALL_OW 88
// end ; Video ( false ) ;
13256: LD_INT 0
13258: PPUSH
13259: CALL 1020 0 1
// end ;
13263: PPOPN 1
13265: END
// every 0 0$1 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
13266: LD_EXP 4
13270: PUSH
13271: LD_INT 22
13273: PUSH
13274: LD_INT 2
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: LD_INT 30
13283: PUSH
13284: LD_INT 0
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PPUSH
13295: CALL_OW 69
13299: AND
13300: IFFALSE 13458
13302: GO 13304
13304: DISABLE
// begin DialogueOn ;
13305: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
13309: LD_EXP 34
13313: PPUSH
13314: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
13318: LD_EXP 34
13322: PPUSH
13323: LD_STRING DF-1-distribution
13325: PPUSH
13326: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
13330: LD_EXP 26
13334: PPUSH
13335: LD_STRING DH-2-distribution
13337: PPUSH
13338: CALL_OW 88
// if IsOk ( Kaia ) then
13342: LD_EXP 31
13346: PPUSH
13347: CALL_OW 302
13351: IFFALSE 13412
// begin Say ( Kaia , DK-1-distribution ) ;
13353: LD_EXP 31
13357: PPUSH
13358: LD_STRING DK-1-distribution
13360: PPUSH
13361: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
13365: LD_EXP 26
13369: PPUSH
13370: LD_STRING DH-1-distribution
13372: PPUSH
13373: CALL_OW 88
// if IsOk ( Givi ) then
13377: LD_EXP 27
13381: PPUSH
13382: CALL_OW 302
13386: IFFALSE 13412
// begin Say ( Givi , DG-1-distribution ) ;
13388: LD_EXP 27
13392: PPUSH
13393: LD_STRING DG-1-distribution
13395: PPUSH
13396: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
13400: LD_EXP 26
13404: PPUSH
13405: LD_STRING DH-3-distribution
13407: PPUSH
13408: CALL_OW 88
// end ; end ; DialogueOff ;
13412: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
13416: LD_STRING Crates1
13418: PPUSH
13419: CALL_OW 337
// farmerRequestedCrates := 300 ;
13423: LD_ADDR_EXP 14
13427: PUSH
13428: LD_INT 300
13430: ST_TO_ADDR
// Query ( FarmerCrates ) ;
13431: LD_STRING FarmerCrates
13433: PPUSH
13434: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
13438: LD_INT 10
13440: PPUSH
13441: LD_INT 1
13443: PPUSH
13444: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
13448: LD_INT 108
13450: PPUSH
13451: LD_INT 61
13453: PPUSH
13454: CALL_OW 86
// end ;
13458: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
13459: LD_EXP 6
13463: PUSH
13464: LD_INT 22
13466: PUSH
13467: LD_INT 2
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 3
13476: PUSH
13477: LD_INT 57
13479: PUSH
13480: EMPTY
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 2
13489: PUSH
13490: LD_INT 30
13492: PUSH
13493: LD_INT 6
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 30
13502: PUSH
13503: LD_INT 7
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: PPUSH
13520: CALL_OW 69
13524: AND
13525: PUSH
13526: LD_INT 22
13528: PUSH
13529: LD_INT 2
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 3
13538: PUSH
13539: LD_INT 57
13541: PUSH
13542: EMPTY
13543: LIST
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 30
13551: PUSH
13552: LD_INT 4
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: PPUSH
13564: CALL_OW 69
13568: AND
13569: IFFALSE 13733
13571: GO 13573
13573: DISABLE
13574: LD_INT 0
13576: PPUSH
// begin wait ( 0 0$10 ) ;
13577: LD_INT 350
13579: PPUSH
13580: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13584: LD_ADDR_VAR 0 1
13588: PUSH
13589: LD_EXP 40
13593: PPUSH
13594: LD_INT 26
13596: PUSH
13597: LD_INT 1
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 25
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PPUSH
13618: CALL_OW 72
13622: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13623: LD_EXP 26
13627: PPUSH
13628: LD_STRING DH-1-task
13630: PPUSH
13631: CALL_OW 88
// if IsOk ( Sophia ) then
13635: LD_EXP 32
13639: PPUSH
13640: CALL_OW 302
13644: IFFALSE 13684
// begin Say ( Sophia , DS-1-task ) ;
13646: LD_EXP 32
13650: PPUSH
13651: LD_STRING DS-1-task
13653: PPUSH
13654: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13658: LD_EXP 32
13662: PPUSH
13663: LD_STRING DS-2-task
13665: PPUSH
13666: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13670: LD_EXP 26
13674: PPUSH
13675: LD_STRING DH-2-task
13677: PPUSH
13678: CALL_OW 88
// end else
13682: GO 13718
// if eng then
13684: LD_VAR 0 1
13688: IFFALSE 13718
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13690: LD_VAR 0 1
13694: PUSH
13695: LD_INT 1
13697: ARRAY
13698: PPUSH
13699: LD_STRING DArm-1-task
13701: PPUSH
13702: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13706: LD_EXP 26
13710: PPUSH
13711: LD_STRING DH-2-task
13713: PPUSH
13714: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13718: LD_STRING BaseConstructed
13720: PPUSH
13721: CALL_OW 337
// allowConvoys := true ;
13725: LD_ADDR_EXP 11
13729: PUSH
13730: LD_INT 1
13732: ST_TO_ADDR
// end ;
13733: PPOPN 1
13735: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13736: LD_INT 22
13738: PUSH
13739: LD_INT 4
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 34
13748: PUSH
13749: LD_INT 12
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PPUSH
13760: CALL_OW 69
13764: IFFALSE 13932
13766: GO 13768
13768: DISABLE
13769: LD_INT 0
13771: PPUSH
13772: PPUSH
13773: PPUSH
// begin wait ( 0 0$2 ) ;
13774: LD_INT 70
13776: PPUSH
13777: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13781: LD_ADDR_VAR 0 1
13785: PUSH
13786: LD_INT 22
13788: PUSH
13789: LD_INT 4
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 34
13798: PUSH
13799: LD_INT 12
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PPUSH
13810: CALL_OW 69
13814: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13815: LD_ADDR_VAR 0 2
13819: PUSH
13820: LD_VAR 0 1
13824: PUSH
13825: LD_INT 1
13827: ARRAY
13828: PPUSH
13829: CALL_OW 250
13833: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13834: LD_ADDR_VAR 0 3
13838: PUSH
13839: LD_VAR 0 1
13843: PUSH
13844: LD_INT 1
13846: ARRAY
13847: PPUSH
13848: CALL_OW 251
13852: ST_TO_ADDR
// DialogueOn ;
13853: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13857: LD_VAR 0 2
13861: PPUSH
13862: LD_VAR 0 3
13866: PPUSH
13867: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13871: LD_VAR 0 2
13875: PPUSH
13876: LD_VAR 0 3
13880: PPUSH
13881: LD_INT 2
13883: PPUSH
13884: LD_INT 6
13886: NEG
13887: PPUSH
13888: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13892: LD_INT 10
13894: PPUSH
13895: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13899: LD_EXP 26
13903: PPUSH
13904: LD_STRING DH-1-seecargo
13906: PPUSH
13907: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13911: LD_VAR 0 2
13915: PPUSH
13916: LD_VAR 0 3
13920: PPUSH
13921: LD_INT 2
13923: PPUSH
13924: CALL_OW 331
// DialogueOff ;
13928: CALL_OW 7
// end ;
13932: PPOPN 3
13934: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13935: LD_EXP 4
13939: PUSH
13940: LD_EXP 13
13944: PUSH
13945: LD_INT 300
13947: GREATEREQUAL
13948: AND
13949: IFFALSE 14021
13951: GO 13953
13953: DISABLE
// begin DialogueOn ;
13954: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13958: LD_EXP 34
13962: PPUSH
13963: LD_STRING DF-1-delivery-2
13965: PPUSH
13966: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13970: LD_EXP 26
13974: PPUSH
13975: LD_STRING DH-1-delivery-2
13977: PPUSH
13978: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13982: LD_EXP 34
13986: PPUSH
13987: LD_STRING DF-2-delivery-2
13989: PPUSH
13990: CALL_OW 94
// DialogueOff ;
13994: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13998: LD_STRING Crates2
14000: PPUSH
14001: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
14005: LD_ADDR_EXP 15
14009: PUSH
14010: LD_INT 63000
14012: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
14013: LD_ADDR_EXP 14
14017: PUSH
14018: LD_INT 600
14020: ST_TO_ADDR
// end ;
14021: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 do
14022: LD_EXP 4
14026: PUSH
14027: LD_EXP 13
14031: PUSH
14032: LD_INT 600
14034: GREATEREQUAL
14035: AND
14036: IFFALSE 14202
14038: GO 14040
14040: DISABLE
// begin DialogueOn ;
14041: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
14045: LD_EXP 34
14049: PPUSH
14050: LD_STRING DF-1-delivery-3
14052: PPUSH
14053: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
14057: LD_EXP 26
14061: PPUSH
14062: LD_STRING DH-1-delivery-3
14064: PPUSH
14065: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
14069: LD_EXP 34
14073: PPUSH
14074: LD_STRING DF-2-delivery-3
14076: PPUSH
14077: CALL_OW 94
// if IsOk ( Kaia ) then
14081: LD_EXP 31
14085: PPUSH
14086: CALL_OW 302
14090: IFFALSE 14140
// begin Say ( Kaia , DK-1-delivery-3 ) ;
14092: LD_EXP 31
14096: PPUSH
14097: LD_STRING DK-1-delivery-3
14099: PPUSH
14100: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
14104: LD_EXP 26
14108: PPUSH
14109: LD_STRING DH-2-delivery-3
14111: PPUSH
14112: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
14116: LD_EXP 27
14120: PPUSH
14121: LD_STRING DG-1-delivery-3
14123: PPUSH
14124: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
14128: LD_EXP 28
14132: PPUSH
14133: LD_STRING DM-1-delivery-3
14135: PPUSH
14136: CALL_OW 88
// end ; DialogueOff ;
14140: CALL_OW 7
// if Difficulty = 2 then
14144: LD_OWVAR 67
14148: PUSH
14149: LD_INT 2
14151: EQUAL
14152: IFFALSE 14179
// begin ChangeMissionObjectives ( Crates3 ) ;
14154: LD_STRING Crates3
14156: PPUSH
14157: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
14161: LD_ADDR_EXP 15
14165: PUSH
14166: LD_INT 63000
14168: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
14169: LD_ADDR_EXP 14
14173: PUSH
14174: LD_INT 900
14176: ST_TO_ADDR
// end else
14177: GO 14202
// begin ChangeMissionObjectives ( Crates4 ) ;
14179: LD_STRING Crates4
14181: PPUSH
14182: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
14186: LD_ADDR_EXP 15
14190: PUSH
14191: LD_INT 63000
14193: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
14194: LD_ADDR_EXP 14
14198: PUSH
14199: LD_INT 1200
14201: ST_TO_ADDR
// end ; end ;
14202: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
14203: LD_EXP 4
14207: PUSH
14208: LD_EXP 13
14212: PUSH
14213: LD_INT 600
14215: PUSH
14216: LD_INT 900
14218: PUSH
14219: LD_INT 1200
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: LIST
14226: PUSH
14227: LD_OWVAR 67
14231: ARRAY
14232: GREATEREQUAL
14233: AND
14234: PUSH
14235: LD_EXP 14
14239: PUSH
14240: LD_EXP 15
14244: LESSEQUAL
14245: AND
14246: IFFALSE 14319
14248: GO 14250
14250: DISABLE
// begin retreatAllowed := true ;
14251: LD_ADDR_EXP 10
14255: PUSH
14256: LD_INT 1
14258: ST_TO_ADDR
// display_strings := [ ] ;
14259: LD_ADDR_OWVAR 47
14263: PUSH
14264: EMPTY
14265: ST_TO_ADDR
// DialogueOn ;
14266: CALL_OW 6
// Video ( true ) ;
14270: LD_INT 1
14272: PPUSH
14273: CALL 1020 0 1
// SayRadio ( Omar , DO-radio-end ) ;
14277: LD_EXP 35
14281: PPUSH
14282: LD_STRING DO-radio-end
14284: PPUSH
14285: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
14289: LD_EXP 26
14293: PPUSH
14294: LD_STRING DH-1-radio-end
14296: PPUSH
14297: CALL_OW 88
// Video ( false ) ;
14301: LD_INT 0
14303: PPUSH
14304: CALL 1020 0 1
// DialogueOff ;
14308: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
14312: LD_STRING Retreat
14314: PPUSH
14315: CALL_OW 337
// end ;
14319: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
14320: LD_EXP 10
14324: IFFALSE 14459
14326: GO 14328
14328: DISABLE
14329: LD_INT 0
14331: PPUSH
14332: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
14333: LD_INT 10
14335: PPUSH
14336: LD_INT 0
14338: PPUSH
14339: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
14343: LD_ADDR_VAR 0 1
14347: PUSH
14348: LD_EXP 37
14352: PPUSH
14353: LD_INT 25
14355: PUSH
14356: LD_INT 2
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PPUSH
14363: CALL_OW 72
14367: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
14368: LD_VAR 0 1
14372: PUSH
14373: LD_INT 102
14375: PPUSH
14376: LD_INT 69
14378: PPUSH
14379: CALL_OW 428
14383: PUSH
14384: LD_INT 0
14386: EQUAL
14387: AND
14388: IFFALSE 14455
// begin for i in tmp do
14390: LD_ADDR_VAR 0 2
14394: PUSH
14395: LD_VAR 0 1
14399: PUSH
14400: FOR_IN
14401: IFFALSE 14425
// if IsInUnit ( i ) then
14403: LD_VAR 0 2
14407: PPUSH
14408: CALL_OW 310
14412: IFFALSE 14423
// ComExitBuilding ( i ) ;
14414: LD_VAR 0 2
14418: PPUSH
14419: CALL_OW 122
14423: GO 14400
14425: POP
14426: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
14427: LD_VAR 0 1
14431: PPUSH
14432: LD_INT 31
14434: PPUSH
14435: LD_INT 102
14437: PPUSH
14438: LD_INT 69
14440: PPUSH
14441: LD_INT 2
14443: PPUSH
14444: CALL_OW 205
// wait ( 0 0$3 ) ;
14448: LD_INT 105
14450: PPUSH
14451: CALL_OW 67
// end ; StartCargoEvacuation ;
14455: CALL 4533 0 0
// end ;
14459: PPOPN 2
14461: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14462: LD_EXP 10
14466: NOT
14467: PUSH
14468: LD_INT 5
14470: PPUSH
14471: CALL_OW 301
14475: AND
14476: IFFALSE 14500
14478: GO 14480
14480: DISABLE
// begin SayRadio ( Farmer , DF-1-failure ) ;
14481: LD_EXP 34
14485: PPUSH
14486: LD_STRING DF-1-failure
14488: PPUSH
14489: CALL_OW 94
// YouLost ( FarmerDepot ) ;
14493: LD_STRING FarmerDepot
14495: PPUSH
14496: CALL_OW 104
// end ;
14500: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 6 do var i , max , tmp ;
14501: LD_EXP 10
14505: PUSH
14506: LD_EXP 26
14510: PPUSH
14511: LD_EXP 34
14515: PPUSH
14516: CALL_OW 296
14520: PUSH
14521: LD_INT 6
14523: LESS
14524: AND
14525: IFFALSE 15128
14527: GO 14529
14529: DISABLE
14530: LD_INT 0
14532: PPUSH
14533: PPUSH
14534: PPUSH
// begin allowConvoys := false ;
14535: LD_ADDR_EXP 11
14539: PUSH
14540: LD_INT 0
14542: ST_TO_ADDR
// Video ( true ) ;
14543: LD_INT 1
14545: PPUSH
14546: CALL 1020 0 1
// ComTurnUnit ( Heike , Farmer ) ;
14550: LD_EXP 26
14554: PPUSH
14555: LD_EXP 34
14559: PPUSH
14560: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14564: LD_EXP 34
14568: PPUSH
14569: LD_EXP 26
14573: PPUSH
14574: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14578: LD_EXP 34
14582: PPUSH
14583: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14587: LD_EXP 26
14591: PPUSH
14592: LD_STRING DH-1-end
14594: PPUSH
14595: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14599: LD_EXP 34
14603: PPUSH
14604: LD_STRING DF-1-end
14606: PPUSH
14607: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14611: LD_EXP 34
14615: PPUSH
14616: LD_STRING DF-2-end
14618: PPUSH
14619: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14623: LD_EXP 26
14627: PPUSH
14628: LD_STRING DH-2-end
14630: PPUSH
14631: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14635: LD_EXP 34
14639: PPUSH
14640: LD_STRING DF-3-end
14642: PPUSH
14643: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14647: LD_EXP 26
14651: PPUSH
14652: LD_STRING DH-3-end
14654: PPUSH
14655: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14659: LD_EXP 27
14663: PPUSH
14664: LD_STRING DG-1-end
14666: PPUSH
14667: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14671: LD_EXP 26
14675: PPUSH
14676: LD_STRING DH-4-end
14678: PPUSH
14679: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14683: LD_EXP 34
14687: PPUSH
14688: LD_STRING DF-4-end
14690: PPUSH
14691: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14695: LD_EXP 26
14699: PPUSH
14700: LD_STRING DH-5-end
14702: PPUSH
14703: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14707: LD_EXP 34
14711: PPUSH
14712: LD_STRING DF-5-end
14714: PPUSH
14715: CALL_OW 88
// Video ( false ) ;
14719: LD_INT 0
14721: PPUSH
14722: CALL 1020 0 1
// max := [ 4 , 3 , 2 ] [ Difficulty ] ;
14726: LD_ADDR_VAR 0 2
14730: PUSH
14731: LD_INT 4
14733: PUSH
14734: LD_INT 3
14736: PUSH
14737: LD_INT 2
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: PUSH
14745: LD_OWVAR 67
14749: ARRAY
14750: ST_TO_ADDR
// if farmerSquad < max then
14751: LD_EXP 37
14755: PUSH
14756: LD_VAR 0 2
14760: LESS
14761: IFFALSE 14773
// max := farmerSquad ;
14763: LD_ADDR_VAR 0 2
14767: PUSH
14768: LD_EXP 37
14772: ST_TO_ADDR
// for i := 1 to max do
14773: LD_ADDR_VAR 0 1
14777: PUSH
14778: DOUBLE
14779: LD_INT 1
14781: DEC
14782: ST_TO_ADDR
14783: LD_VAR 0 2
14787: PUSH
14788: FOR_TO
14789: IFFALSE 14827
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14791: LD_EXP 37
14795: PUSH
14796: LD_INT 1
14798: ARRAY
14799: PPUSH
14800: LD_INT 2
14802: PPUSH
14803: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14807: LD_ADDR_EXP 37
14811: PUSH
14812: LD_EXP 37
14816: PPUSH
14817: LD_INT 1
14819: PPUSH
14820: CALL_OW 3
14824: ST_TO_ADDR
// end ;
14825: GO 14788
14827: POP
14828: POP
// for i in Farmer ^ farmerSquad do
14829: LD_ADDR_VAR 0 1
14833: PUSH
14834: LD_EXP 34
14838: PUSH
14839: LD_EXP 37
14843: ADD
14844: PUSH
14845: FOR_IN
14846: IFFALSE 14885
// begin if IsInUnit ( i ) then
14848: LD_VAR 0 1
14852: PPUSH
14853: CALL_OW 310
14857: IFFALSE 14868
// ComExitBuilding ( i ) ;
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14868: LD_VAR 0 1
14872: PPUSH
14873: LD_INT 102
14875: PPUSH
14876: LD_INT 7
14878: PPUSH
14879: CALL_OW 171
// end ;
14883: GO 14845
14885: POP
14886: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14887: LD_ADDR_VAR 0 1
14891: PUSH
14892: LD_INT 22
14894: PUSH
14895: LD_INT 5
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: LD_INT 21
14904: PUSH
14905: LD_INT 3
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PPUSH
14916: CALL_OW 69
14920: PUSH
14921: LD_INT 5
14923: DIFF
14924: PUSH
14925: FOR_IN
14926: IFFALSE 14942
// SetSide ( i , 2 ) ;
14928: LD_VAR 0 1
14932: PPUSH
14933: LD_INT 2
14935: PPUSH
14936: CALL_OW 235
14940: GO 14925
14942: POP
14943: POP
// repeat wait ( 0 0$1 ) ;
14944: LD_INT 35
14946: PPUSH
14947: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14951: LD_ADDR_VAR 0 3
14955: PUSH
14956: LD_EXP 34
14960: PUSH
14961: LD_EXP 37
14965: ADD
14966: PPUSH
14967: LD_INT 95
14969: PUSH
14970: LD_INT 3
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 72
14981: ST_TO_ADDR
// if tmp then
14982: LD_VAR 0 3
14986: IFFALSE 15030
// for i in tmp do
14988: LD_ADDR_VAR 0 1
14992: PUSH
14993: LD_VAR 0 3
14997: PUSH
14998: FOR_IN
14999: IFFALSE 15028
// begin farmerSquad := farmerSquad diff i ;
15001: LD_ADDR_EXP 37
15005: PUSH
15006: LD_EXP 37
15010: PUSH
15011: LD_VAR 0 1
15015: DIFF
15016: ST_TO_ADDR
// RemoveUnit ( i ) ;
15017: LD_VAR 0 1
15021: PPUSH
15022: CALL_OW 64
// end ;
15026: GO 14998
15028: POP
15029: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
15030: LD_EXP 37
15034: PUSH
15035: EMPTY
15036: EQUAL
15037: PUSH
15038: LD_EXP 34
15042: PPUSH
15043: CALL_OW 305
15047: NOT
15048: AND
15049: IFFALSE 14944
// if farmerHumanLoseCounter = 0 then
15051: LD_EXP 18
15055: PUSH
15056: LD_INT 0
15058: EQUAL
15059: IFFALSE 15068
// SetAchievement ( ACH_BABY ) ;
15061: LD_STRING ACH_BABY
15063: PPUSH
15064: CALL_OW 543
// wait ( 1 1$00 ) ;
15068: LD_INT 2100
15070: PPUSH
15071: CALL_OW 67
// SendAttack ;
15075: CALL 6979 0 0
// wait ( [ 5 5$00 , 4 4$30 , 4 4$00 ] [ Difficulty ] ) ;
15079: LD_INT 10500
15081: PUSH
15082: LD_INT 9450
15084: PUSH
15085: LD_INT 8400
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: LIST
15092: PUSH
15093: LD_OWVAR 67
15097: ARRAY
15098: PPUSH
15099: CALL_OW 67
// SendAttack ;
15103: CALL 6979 0 0
// if Difficulty > 2 then
15107: LD_OWVAR 67
15111: PUSH
15112: LD_INT 2
15114: GREATER
15115: IFFALSE 15128
// begin wait ( 4 4$00 ) ;
15117: LD_INT 8400
15119: PPUSH
15120: CALL_OW 67
// SendAttack ;
15124: CALL 6979 0 0
// end ; end ;
15128: PPOPN 3
15130: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
15131: LD_EXP 15
15135: PUSH
15136: LD_INT 18900
15138: LESSEQUAL
15139: IFFALSE 15188
15141: GO 15143
15143: DISABLE
// begin DialogueOn ;
15144: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
15148: LD_EXP 34
15152: PPUSH
15153: LD_STRING DF-1-distribution-a
15155: PPUSH
15156: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
15160: LD_EXP 26
15164: PPUSH
15165: LD_STRING DH-1-distribution-a
15167: PPUSH
15168: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
15172: LD_EXP 34
15176: PPUSH
15177: LD_STRING DF-2-distribution-a
15179: PPUSH
15180: CALL_OW 94
// DialogueOff ;
15184: CALL_OW 7
// end ;
15188: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
15189: LD_EXP 15
15193: PUSH
15194: LD_INT 0
15196: LESSEQUAL
15197: IFFALSE 15229
15199: GO 15201
15201: DISABLE
// begin DialogueOn ;
15202: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
15206: LD_EXP 34
15210: PPUSH
15211: LD_STRING DF-3-distribution-a
15213: PPUSH
15214: CALL_OW 94
// YouLost ( Distribution ) ;
15218: LD_STRING Distribution
15220: PPUSH
15221: CALL_OW 104
// DialogueOff ;
15225: CALL_OW 7
// end ;
15229: END
// every 0 0$1 trigger vehCounter >= 2 do
15230: LD_EXP 20
15234: PUSH
15235: LD_INT 2
15237: GREATEREQUAL
15238: IFFALSE 15250
15240: GO 15242
15242: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
15243: LD_STRING VehConstructed
15245: PPUSH
15246: CALL_OW 337
15250: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
15251: LD_INT 22
15253: PUSH
15254: LD_INT 2
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 34
15263: PUSH
15264: LD_INT 12
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PPUSH
15275: CALL_OW 69
15279: IFFALSE 15339
15281: GO 15283
15283: DISABLE
// begin DialogueOn ;
15284: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
15288: LD_EXP 26
15292: PPUSH
15293: LD_STRING DH-1-truck
15295: PPUSH
15296: CALL_OW 88
// if IsOk ( Markov ) then
15300: LD_EXP 33
15304: PPUSH
15305: CALL_OW 302
15309: IFFALSE 15335
// begin Say ( Markov , DMar-1-truck ) ;
15311: LD_EXP 33
15315: PPUSH
15316: LD_STRING DMar-1-truck
15318: PPUSH
15319: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15323: LD_EXP 26
15327: PPUSH
15328: LD_STRING DH-2-truck
15330: PPUSH
15331: CALL_OW 88
// end ; DialogueOff ;
15335: CALL_OW 7
// end ;
15339: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15340: LD_INT 0
15342: PPUSH
15343: PPUSH
15344: PPUSH
// if IsOk ( Givi ) then
15345: LD_EXP 27
15349: PPUSH
15350: CALL_OW 302
15354: IFFALSE 15370
// begin Say ( Givi , DG-1-nocargo ) ;
15356: LD_EXP 27
15360: PPUSH
15361: LD_STRING DG-1-nocargo
15363: PPUSH
15364: CALL_OW 88
// exit ;
15368: GO 15466
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15370: LD_ADDR_VAR 0 2
15374: PUSH
15375: LD_EXP 40
15379: PPUSH
15380: LD_INT 26
15382: PUSH
15383: LD_INT 1
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PPUSH
15390: CALL_OW 72
15394: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15395: LD_ADDR_VAR 0 3
15399: PUSH
15400: LD_EXP 40
15404: PPUSH
15405: LD_INT 26
15407: PUSH
15408: LD_INT 2
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PPUSH
15415: CALL_OW 72
15419: ST_TO_ADDR
// if randomMen then
15420: LD_VAR 0 2
15424: IFFALSE 15444
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15426: LD_VAR 0 2
15430: PUSH
15431: LD_INT 1
15433: ARRAY
15434: PPUSH
15435: LD_STRING DArm-1-nocargo
15437: PPUSH
15438: CALL_OW 88
15442: GO 15466
// if randomWomen then
15444: LD_VAR 0 3
15448: IFFALSE 15466
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15450: LD_VAR 0 3
15454: PUSH
15455: LD_INT 1
15457: ARRAY
15458: PPUSH
15459: LD_STRING DArf-1-nocargo
15461: PPUSH
15462: CALL_OW 88
// end ;
15466: LD_VAR 0 1
15470: RET
// export function IncomingAttack ; begin
15471: LD_INT 0
15473: PPUSH
// if attackWave = 1 then
15474: LD_EXP 17
15478: PUSH
15479: LD_INT 1
15481: EQUAL
15482: IFFALSE 15553
// begin DialogueOn ;
15484: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15488: LD_EXP 35
15492: PPUSH
15493: LD_STRING DO-1-radio-1
15495: PPUSH
15496: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15500: LD_EXP 26
15504: PPUSH
15505: LD_STRING DH-1-radio-1-
15507: PPUSH
15508: CALL_OW 88
// if IsOk ( Markov ) then
15512: LD_EXP 33
15516: PPUSH
15517: CALL_OW 302
15521: IFFALSE 15547
// begin Say ( Markov , DMar-1-radio-1 ) ;
15523: LD_EXP 33
15527: PPUSH
15528: LD_STRING DMar-1-radio-1
15530: PPUSH
15531: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15535: LD_EXP 26
15539: PPUSH
15540: LD_STRING DH-2-radio-1
15542: PPUSH
15543: CALL_OW 88
// end ; DialogueOff ;
15547: CALL_OW 7
// end else
15551: GO 15577
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15553: LD_EXP 35
15557: PPUSH
15558: LD_STRING DO-1-radio-u
15560: PPUSH
15561: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15565: LD_EXP 26
15569: PPUSH
15570: LD_STRING DH-1-radio-u
15572: PPUSH
15573: CALL_OW 88
// end ; end ;
15577: LD_VAR 0 1
15581: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15582: LD_EXP 42
15586: PPUSH
15587: LD_INT 95
15589: PUSH
15590: LD_INT 8
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PPUSH
15597: CALL_OW 72
15601: IFFALSE 15704
15603: GO 15605
15605: DISABLE
15606: LD_INT 0
15608: PPUSH
// begin enable ;
15609: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15610: LD_ADDR_VAR 0 1
15614: PUSH
15615: LD_EXP 42
15619: PPUSH
15620: LD_INT 95
15622: PUSH
15623: LD_INT 8
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PPUSH
15630: CALL_OW 72
15634: PUSH
15635: FOR_IN
15636: IFFALSE 15665
// begin usForces := usForces diff i ;
15638: LD_ADDR_EXP 42
15642: PUSH
15643: LD_EXP 42
15647: PUSH
15648: LD_VAR 0 1
15652: DIFF
15653: ST_TO_ADDR
// RemoveUnit ( i ) ;
15654: LD_VAR 0 1
15658: PPUSH
15659: CALL_OW 64
// end ;
15663: GO 15635
15665: POP
15666: POP
// if not americanHasEscaped and attackWave = 1 then
15667: LD_EXP 7
15671: NOT
15672: PUSH
15673: LD_EXP 17
15677: PUSH
15678: LD_INT 1
15680: EQUAL
15681: AND
15682: IFFALSE 15704
// begin americanHasEscaped := true ;
15684: LD_ADDR_EXP 7
15688: PUSH
15689: LD_INT 1
15691: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15692: LD_EXP 26
15696: PPUSH
15697: LD_STRING DH-2-assault-a
15699: PPUSH
15700: CALL_OW 88
// end ; end ;
15704: PPOPN 1
15706: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) do
15707: LD_INT 4
15709: PPUSH
15710: LD_INT 22
15712: PUSH
15713: LD_INT 1
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PPUSH
15720: CALL_OW 70
15724: IFFALSE 15741
15726: GO 15728
15728: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15729: LD_EXP 34
15733: PPUSH
15734: LD_STRING DF-1-attack
15736: PPUSH
15737: CALL_OW 94
15741: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15742: LD_INT 5
15744: PPUSH
15745: CALL_OW 255
15749: PUSH
15750: LD_INT 2
15752: EQUAL
15753: IFFALSE 15765
15755: GO 15757
15757: DISABLE
// YouLost ( Attack ) ;
15758: LD_STRING Attack
15760: PPUSH
15761: CALL_OW 104
15765: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15766: LD_INT 22
15768: PUSH
15769: LD_INT 1
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 21
15778: PUSH
15779: LD_INT 1
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PPUSH
15790: CALL_OW 69
15794: NOT
15795: PUSH
15796: LD_INT 22
15798: PUSH
15799: LD_INT 4
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PPUSH
15806: CALL_OW 69
15810: NOT
15811: AND
15812: PUSH
15813: LD_EXP 10
15817: NOT
15818: AND
15819: PUSH
15820: LD_EXP 13
15824: PUSH
15825: LD_INT 90
15827: GREATER
15828: AND
15829: PUSH
15830: LD_INT 7
15832: PPUSH
15833: LD_INT 22
15835: PUSH
15836: LD_INT 2
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 21
15845: PUSH
15846: LD_INT 1
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PPUSH
15857: CALL_OW 70
15861: AND
15862: PUSH
15863: LD_INT 22
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 50
15875: PUSH
15876: EMPTY
15877: LIST
15878: PUSH
15879: LD_INT 30
15881: PUSH
15882: LD_INT 0
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: PPUSH
15894: CALL_OW 69
15898: AND
15899: IFFALSE 16556
15901: GO 15903
15903: DISABLE
15904: LD_INT 0
15906: PPUSH
15907: PPUSH
15908: PPUSH
15909: PPUSH
15910: PPUSH
// begin depot := usDepot ;
15911: LD_ADDR_VAR 0 5
15915: PUSH
15916: LD_INT 11
15918: ST_TO_ADDR
// if not depot then
15919: LD_VAR 0 5
15923: NOT
15924: IFFALSE 15964
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15926: LD_ADDR_VAR 0 5
15930: PUSH
15931: LD_INT 22
15933: PUSH
15934: LD_INT 2
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 30
15943: PUSH
15944: LD_INT 0
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PPUSH
15955: CALL_OW 69
15959: PUSH
15960: LD_INT 1
15962: ARRAY
15963: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15964: LD_ADDR_VAR 0 1
15968: PUSH
15969: LD_EXP 40
15973: PPUSH
15974: LD_INT 26
15976: PUSH
15977: LD_INT 1
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PPUSH
15984: CALL_OW 72
15988: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15989: LD_ADDR_VAR 0 2
15993: PUSH
15994: LD_EXP 40
15998: PPUSH
15999: LD_INT 26
16001: PUSH
16002: LD_INT 2
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PPUSH
16009: CALL_OW 72
16013: ST_TO_ADDR
// if IsOk ( Kaia ) then
16014: LD_EXP 31
16018: PPUSH
16019: CALL_OW 302
16023: IFFALSE 16044
// speaker := [ Kaia , DK ] else
16025: LD_ADDR_VAR 0 3
16029: PUSH
16030: LD_EXP 31
16034: PUSH
16035: LD_STRING DK
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: ST_TO_ADDR
16042: GO 16124
// if randomMen then
16044: LD_VAR 0 1
16048: IFFALSE 16083
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
16050: LD_ADDR_VAR 0 3
16054: PUSH
16055: LD_VAR 0 1
16059: PUSH
16060: LD_INT 1
16062: PPUSH
16063: LD_VAR 0 1
16067: PPUSH
16068: CALL_OW 12
16072: ARRAY
16073: PUSH
16074: LD_STRING DArm
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: ST_TO_ADDR
16081: GO 16124
// if randomWomen then
16083: LD_VAR 0 2
16087: IFFALSE 16122
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
16089: LD_ADDR_VAR 0 3
16093: PUSH
16094: LD_VAR 0 2
16098: PUSH
16099: LD_INT 1
16101: PPUSH
16102: LD_VAR 0 2
16106: PPUSH
16107: CALL_OW 12
16111: ARRAY
16112: PUSH
16113: LD_STRING DArf
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: ST_TO_ADDR
16120: GO 16124
// exit ;
16122: GO 16556
// if IsInUnit ( speaker [ 1 ] ) then
16124: LD_VAR 0 3
16128: PUSH
16129: LD_INT 1
16131: ARRAY
16132: PPUSH
16133: CALL_OW 310
16137: IFFALSE 16160
// place := IsInUnit ( speaker [ 1 ] ) else
16139: LD_ADDR_VAR 0 4
16143: PUSH
16144: LD_VAR 0 3
16148: PUSH
16149: LD_INT 1
16151: ARRAY
16152: PPUSH
16153: CALL_OW 310
16157: ST_TO_ADDR
16158: GO 16174
// place := speaker [ 1 ] ;
16160: LD_ADDR_VAR 0 4
16164: PUSH
16165: LD_VAR 0 3
16169: PUSH
16170: LD_INT 1
16172: ARRAY
16173: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
16174: LD_VAR 0 4
16178: PPUSH
16179: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
16183: LD_VAR 0 4
16187: PPUSH
16188: CALL_OW 250
16192: PPUSH
16193: LD_VAR 0 4
16197: PPUSH
16198: CALL_OW 251
16202: PPUSH
16203: CALL 3041 0 2
// wait ( 0 0$2 ) ;
16207: LD_INT 70
16209: PPUSH
16210: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
16214: LD_EXP 36
16218: PPUSH
16219: CALL_OW 305
16223: NOT
16224: IFFALSE 16228
// exit ;
16226: GO 16556
// allowConvoys := false ;
16228: LD_ADDR_EXP 11
16232: PUSH
16233: LD_INT 0
16235: ST_TO_ADDR
// InGameOn ;
16236: CALL_OW 8
// wait ( 0 0$1 ) ;
16240: LD_INT 35
16242: PPUSH
16243: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
16247: LD_EXP 36
16251: PPUSH
16252: LD_STRING DI-1-land
16254: PPUSH
16255: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
16259: LD_VAR 0 3
16263: PUSH
16264: LD_INT 1
16266: ARRAY
16267: PPUSH
16268: CALL_OW 310
16272: IFFALSE 16287
// ComExit ( speaker [ 1 ] ) ;
16274: LD_VAR 0 3
16278: PUSH
16279: LD_INT 1
16281: ARRAY
16282: PPUSH
16283: CALL 1124 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
16287: LD_VAR 0 3
16291: PUSH
16292: LD_INT 1
16294: ARRAY
16295: PPUSH
16296: LD_EXP 36
16300: PPUSH
16301: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16305: LD_VAR 0 3
16309: PUSH
16310: LD_INT 1
16312: ARRAY
16313: PPUSH
16314: LD_EXP 36
16318: PPUSH
16319: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16323: LD_EXP 36
16327: PPUSH
16328: LD_VAR 0 3
16332: PUSH
16333: LD_INT 1
16335: ARRAY
16336: PPUSH
16337: CALL_OW 119
// wait ( 0 0$1 ) ;
16341: LD_INT 35
16343: PPUSH
16344: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16348: LD_VAR 0 3
16352: PUSH
16353: LD_INT 1
16355: ARRAY
16356: PPUSH
16357: LD_VAR 0 3
16361: PUSH
16362: LD_INT 2
16364: ARRAY
16365: PUSH
16366: LD_STRING -1-land
16368: STR
16369: PPUSH
16370: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16374: LD_EXP 36
16378: PPUSH
16379: LD_STRING DI-2-land
16381: PPUSH
16382: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16386: LD_VAR 0 3
16390: PUSH
16391: LD_INT 1
16393: ARRAY
16394: PPUSH
16395: LD_VAR 0 3
16399: PUSH
16400: LD_INT 2
16402: ARRAY
16403: PUSH
16404: LD_STRING -2-land
16406: STR
16407: PPUSH
16408: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16412: LD_VAR 0 3
16416: PUSH
16417: LD_INT 1
16419: ARRAY
16420: PPUSH
16421: LD_VAR 0 3
16425: PUSH
16426: LD_INT 2
16428: ARRAY
16429: PUSH
16430: LD_STRING -3-land
16432: STR
16433: PPUSH
16434: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16438: LD_EXP 26
16442: PPUSH
16443: LD_STRING DH-1-land
16445: PPUSH
16446: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16450: LD_VAR 0 5
16454: PPUSH
16455: CALL_OW 313
16459: PUSH
16460: LD_INT 6
16462: EQUAL
16463: IFFALSE 16483
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16465: LD_VAR 0 5
16469: PPUSH
16470: CALL_OW 313
16474: PUSH
16475: LD_INT 1
16477: ARRAY
16478: PPUSH
16479: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16483: LD_EXP 36
16487: PPUSH
16488: LD_INT 2
16490: PPUSH
16491: CALL_OW 235
// CenterOnUnits ( depot ) ;
16495: LD_VAR 0 5
16499: PPUSH
16500: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16504: LD_EXP 36
16508: PPUSH
16509: LD_VAR 0 5
16513: PPUSH
16514: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16518: LD_INT 35
16520: PPUSH
16521: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
16525: LD_EXP 36
16529: PPUSH
16530: CALL_OW 310
16534: IFFALSE 16518
// InGameOff ;
16536: CALL_OW 9
// ibrahimInDepot := true ;
16540: LD_ADDR_EXP 23
16544: PUSH
16545: LD_INT 1
16547: ST_TO_ADDR
// allowConvoys := true ;
16548: LD_ADDR_EXP 11
16552: PUSH
16553: LD_INT 1
16555: ST_TO_ADDR
// end ;
16556: PPOPN 5
16558: END
// export function IbrahimQuery ; begin
16559: LD_INT 0
16561: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16562: LD_STRING IbrahimQuery
16564: PPUSH
16565: CALL_OW 97
16569: PUSH
16570: LD_INT 1
16572: DOUBLE
16573: EQUAL
16574: IFTRUE 16578
16576: GO 16887
16578: POP
// begin allowConvoys := false ;
16579: LD_ADDR_EXP 11
16583: PUSH
16584: LD_INT 0
16586: ST_TO_ADDR
// ibrahimInDepot := false ;
16587: LD_ADDR_EXP 23
16591: PUSH
16592: LD_INT 0
16594: ST_TO_ADDR
// InGameOn ;
16595: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16599: LD_EXP 26
16603: PPUSH
16604: CALL_OW 87
// wait ( 0 0$1 ) ;
16608: LD_INT 35
16610: PPUSH
16611: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16615: LD_EXP 26
16619: PPUSH
16620: LD_STRING DH-1-interrogation
16622: PPUSH
16623: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16627: LD_EXP 36
16631: PPUSH
16632: LD_STRING DI-1-interrogation
16634: PPUSH
16635: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16639: LD_EXP 26
16643: PPUSH
16644: LD_STRING DH-2-interrogation
16646: PPUSH
16647: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16651: LD_EXP 36
16655: PPUSH
16656: LD_STRING DI-2-interrogation
16658: PPUSH
16659: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16663: LD_EXP 26
16667: PPUSH
16668: LD_STRING DH-3-interrogation
16670: PPUSH
16671: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16675: LD_EXP 36
16679: PPUSH
16680: LD_STRING DI-3-interrogation
16682: PPUSH
16683: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16687: LD_EXP 26
16691: PPUSH
16692: LD_STRING DH-4-interrogation
16694: PPUSH
16695: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16699: LD_EXP 36
16703: PPUSH
16704: LD_STRING DI-4-interrogation
16706: PPUSH
16707: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16711: LD_EXP 26
16715: PPUSH
16716: LD_STRING DH-5-interrogation
16718: PPUSH
16719: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16723: LD_EXP 36
16727: PPUSH
16728: LD_STRING DI-5-interrogation
16730: PPUSH
16731: CALL_OW 88
// wait ( 0 0$1 ) ;
16735: LD_INT 35
16737: PPUSH
16738: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16742: LD_STRING IbrahimDecisionQuery
16744: PPUSH
16745: CALL_OW 97
16749: PUSH
16750: LD_INT 1
16752: DOUBLE
16753: EQUAL
16754: IFTRUE 16758
16756: GO 16782
16758: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16759: LD_EXP 36
16763: PPUSH
16764: LD_STRING DI-1-kill
16766: PPUSH
16767: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16771: LD_EXP 36
16775: PPUSH
16776: CALL_OW 66
// end ; 2 :
16780: GO 16881
16782: LD_INT 2
16784: DOUBLE
16785: EQUAL
16786: IFTRUE 16790
16788: GO 16880
16790: POP
// begin SetSide ( Ibrahim , 6 ) ;
16791: LD_EXP 36
16795: PPUSH
16796: LD_INT 6
16798: PPUSH
16799: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16803: LD_EXP 36
16807: PPUSH
16808: CALL_OW 122
// AddComMoveXY ( Ibrahim , 32 , 5 ) ;
16812: LD_EXP 36
16816: PPUSH
16817: LD_INT 32
16819: PPUSH
16820: LD_INT 5
16822: PPUSH
16823: CALL_OW 171
// ComExitBuilding ( Heike ) ;
16827: LD_EXP 26
16831: PPUSH
16832: CALL_OW 122
// AddComMoveXY ( Heike , 36 , 21 ) ;
16836: LD_EXP 26
16840: PPUSH
16841: LD_INT 36
16843: PPUSH
16844: LD_INT 21
16846: PPUSH
16847: CALL_OW 171
// AddComWait ( Ibrahim , 1 1$20 ) ;
16851: LD_EXP 36
16855: PPUSH
16856: LD_INT 2800
16858: PPUSH
16859: CALL_OW 202
// AddComMoveXY ( Ibrahim , 38 , 28 ) ;
16863: LD_EXP 36
16867: PPUSH
16868: LD_INT 38
16870: PPUSH
16871: LD_INT 28
16873: PPUSH
16874: CALL_OW 171
// end ; end ;
16878: GO 16881
16880: POP
// InGameOff ;
16881: CALL_OW 9
// end ; 2 :
16885: GO 16901
16887: LD_INT 2
16889: DOUBLE
16890: EQUAL
16891: IFTRUE 16895
16893: GO 16900
16895: POP
// exit ; end ;
16896: GO 16924
16898: GO 16901
16900: POP
// allowConvoys := true ;
16901: LD_ADDR_EXP 11
16905: PUSH
16906: LD_INT 1
16908: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16909: LD_INT 1400
16911: PPUSH
16912: CALL_OW 67
// ibrahimIsFree := true ;
16916: LD_ADDR_EXP 24
16920: PUSH
16921: LD_INT 1
16923: ST_TO_ADDR
// end ;
16924: LD_VAR 0 1
16928: RET
// every 0 0$10 trigger ibrahimIsFree and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) and IsInArea ( Ibrahim , americanBaseArea ) and See ( 6 , Heike ) and not FilterAllUnits ( [ f_side , 4 ] ) and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do var changeClass , b , p , depot ;
16929: LD_EXP 24
16933: PUSH
16934: LD_INT 22
16936: PUSH
16937: LD_INT 2
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 50
16946: PUSH
16947: EMPTY
16948: LIST
16949: PUSH
16950: LD_INT 30
16952: PUSH
16953: LD_INT 0
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: PPUSH
16965: CALL_OW 69
16969: AND
16970: PUSH
16971: LD_EXP 36
16975: PPUSH
16976: LD_INT 7
16978: PPUSH
16979: CALL_OW 308
16983: AND
16984: PUSH
16985: LD_INT 6
16987: PPUSH
16988: LD_EXP 26
16992: PPUSH
16993: CALL_OW 292
16997: AND
16998: PUSH
16999: LD_INT 22
17001: PUSH
17002: LD_INT 4
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PPUSH
17009: CALL_OW 69
17013: NOT
17014: AND
17015: PUSH
17016: LD_INT 22
17018: PUSH
17019: LD_INT 1
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 21
17028: PUSH
17029: LD_INT 1
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 69
17044: NOT
17045: AND
17046: IFFALSE 17701
17048: GO 17050
17050: DISABLE
17051: LD_INT 0
17053: PPUSH
17054: PPUSH
17055: PPUSH
17056: PPUSH
// begin allowConvoys := false ;
17057: LD_ADDR_EXP 11
17061: PUSH
17062: LD_INT 0
17064: ST_TO_ADDR
// depot := usDepot ;
17065: LD_ADDR_VAR 0 4
17069: PUSH
17070: LD_INT 11
17072: ST_TO_ADDR
// if not usDepot then
17073: LD_INT 11
17075: NOT
17076: IFFALSE 17123
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
17078: LD_ADDR_VAR 0 4
17082: PUSH
17083: LD_INT 22
17085: PUSH
17086: LD_INT 2
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 50
17095: PUSH
17096: EMPTY
17097: LIST
17098: PUSH
17099: LD_INT 30
17101: PUSH
17102: LD_INT 0
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: LIST
17113: PPUSH
17114: CALL_OW 69
17118: PUSH
17119: LD_INT 1
17121: ARRAY
17122: ST_TO_ADDR
// InGameOn ;
17123: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
17127: LD_EXP 36
17131: PPUSH
17132: CALL_OW 87
// ComTurnUnit ( Heike , Ibrahim ) ;
17136: LD_EXP 26
17140: PPUSH
17141: LD_EXP 36
17145: PPUSH
17146: CALL_OW 119
// ComTurnUnit ( Ibrahim , Heike ) ;
17150: LD_EXP 36
17154: PPUSH
17155: LD_EXP 26
17159: PPUSH
17160: CALL_OW 119
// Say ( Ibrahim , DI-1-free ) ;
17164: LD_EXP 36
17168: PPUSH
17169: LD_STRING DI-1-free
17171: PPUSH
17172: CALL_OW 88
// Say ( Heike , DH-1-free ) ;
17176: LD_EXP 26
17180: PPUSH
17181: LD_STRING DH-1-free
17183: PPUSH
17184: CALL_OW 88
// Say ( Ibrahim , DI-2-free ) ;
17188: LD_EXP 36
17192: PPUSH
17193: LD_STRING DI-2-free
17195: PPUSH
17196: CALL_OW 88
// changeClass := 0 ;
17200: LD_ADDR_VAR 0 1
17204: PUSH
17205: LD_INT 0
17207: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17208: LD_STRING IbrahimJoinQuery
17210: PPUSH
17211: CALL_OW 97
17215: PUSH
17216: LD_INT 1
17218: DOUBLE
17219: EQUAL
17220: IFTRUE 17224
17222: GO 17235
17224: POP
// begin changeClass := 1 ;
17225: LD_ADDR_VAR 0 1
17229: PUSH
17230: LD_INT 1
17232: ST_TO_ADDR
// end ; 2 :
17233: GO 17475
17235: LD_INT 2
17237: DOUBLE
17238: EQUAL
17239: IFTRUE 17243
17241: GO 17395
17243: POP
// begin Say ( Heike , DH-1-decline ) ;
17244: LD_EXP 26
17248: PPUSH
17249: LD_STRING DH-1-decline
17251: PPUSH
17252: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17256: LD_EXP 36
17260: PPUSH
17261: LD_STRING DI-1-decline
17263: PPUSH
17264: CALL_OW 88
// InGameOff ;
17268: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17272: LD_EXP 36
17276: PPUSH
17277: LD_INT 30
17279: PPUSH
17280: LD_INT 1
17282: PPUSH
17283: CALL_OW 111
// p := 0 ;
17287: LD_ADDR_VAR 0 3
17291: PUSH
17292: LD_INT 0
17294: ST_TO_ADDR
// repeat p := p + 1 ;
17295: LD_ADDR_VAR 0 3
17299: PUSH
17300: LD_VAR 0 3
17304: PUSH
17305: LD_INT 1
17307: PLUS
17308: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17309: LD_INT 35
17311: PPUSH
17312: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17316: LD_EXP 36
17320: PPUSH
17321: LD_INT 30
17323: PPUSH
17324: LD_INT 1
17326: PPUSH
17327: CALL_OW 307
17331: PUSH
17332: LD_INT 22
17334: PUSH
17335: LD_INT 2
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 101
17344: PUSH
17345: LD_INT 6
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PPUSH
17356: CALL_OW 69
17360: NOT
17361: OR
17362: PUSH
17363: LD_VAR 0 3
17367: PUSH
17368: LD_INT 10
17370: GREATER
17371: OR
17372: IFFALSE 17295
// RemoveUnit ( Ibrahim ) ;
17374: LD_EXP 36
17378: PPUSH
17379: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17383: LD_INT 1
17385: PPUSH
17386: LD_STRING 03_IbrahimHasEscaped
17388: PPUSH
17389: CALL_OW 39
// end ; 3 :
17393: GO 17475
17395: LD_INT 3
17397: DOUBLE
17398: EQUAL
17399: IFTRUE 17403
17401: GO 17474
17403: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17404: LD_EXP 26
17408: PPUSH
17409: LD_STRING DH-1-radio-hq
17411: PPUSH
17412: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17416: LD_EXP 35
17420: PPUSH
17421: LD_STRING DO-1-radio-hq
17423: PPUSH
17424: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17428: LD_EXP 26
17432: PPUSH
17433: LD_STRING DH-2-radio-hq
17435: PPUSH
17436: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17440: LD_EXP 35
17444: PPUSH
17445: LD_STRING DO-2-radio-hq
17447: PPUSH
17448: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17452: LD_EXP 26
17456: PPUSH
17457: LD_STRING DH-3-radio-hq
17459: PPUSH
17460: CALL_OW 88
// changeClass := 1 ;
17464: LD_ADDR_VAR 0 1
17468: PUSH
17469: LD_INT 1
17471: ST_TO_ADDR
// end ; end ;
17472: GO 17475
17474: POP
// if changeClass then
17475: LD_VAR 0 1
17479: IFFALSE 17701
// begin Say ( Heike , DH-1-agree ) ;
17481: LD_EXP 26
17485: PPUSH
17486: LD_STRING DH-1-agree
17488: PPUSH
17489: CALL_OW 88
// if IsOk ( Givi ) then
17493: LD_EXP 27
17497: PPUSH
17498: CALL_OW 302
17502: IFFALSE 17540
// begin Say ( Givi , DG-1-agree ) ;
17504: LD_EXP 27
17508: PPUSH
17509: LD_STRING DG-1-agree
17511: PPUSH
17512: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17516: LD_EXP 26
17520: PPUSH
17521: LD_STRING DH-2-agree
17523: PPUSH
17524: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17528: LD_EXP 27
17532: PPUSH
17533: LD_STRING DG-2-agree
17535: PPUSH
17536: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17540: LD_VAR 0 4
17544: PPUSH
17545: CALL_OW 313
17549: PUSH
17550: LD_INT 6
17552: EQUAL
17553: IFFALSE 17573
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17555: LD_VAR 0 4
17559: PPUSH
17560: CALL_OW 313
17564: PUSH
17565: LD_INT 1
17567: ARRAY
17568: PPUSH
17569: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17573: LD_EXP 36
17577: PPUSH
17578: LD_INT 2
17580: PPUSH
17581: CALL_OW 235
// ComEnterUnit ( Ibrahim , depot ) ;
17585: LD_EXP 36
17589: PPUSH
17590: LD_VAR 0 4
17594: PPUSH
17595: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17599: LD_INT 35
17601: PPUSH
17602: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17606: LD_EXP 36
17610: PPUSH
17611: CALL_OW 310
17615: IFFALSE 17599
// b := IsInUnit ( Ibrahim ) ;
17617: LD_ADDR_VAR 0 2
17621: PUSH
17622: LD_EXP 36
17626: PPUSH
17627: CALL_OW 310
17631: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
17632: LD_EXP 36
17636: PPUSH
17637: CALL_OW 64
// uc_side := 2 ;
17641: LD_ADDR_OWVAR 20
17645: PUSH
17646: LD_INT 2
17648: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17649: LD_ADDR_EXP 36
17653: PUSH
17654: LD_STRING Ibrahim
17656: PPUSH
17657: LD_INT 0
17659: PPUSH
17660: LD_STRING 
17662: PPUSH
17663: CALL 297 0 3
17667: ST_TO_ADDR
// PlaceHumanInUnit ( Ibrahim , b ) ;
17668: LD_EXP 36
17672: PPUSH
17673: LD_VAR 0 2
17677: PPUSH
17678: CALL_OW 52
// InGameOff ;
17682: CALL_OW 9
// allowConvoys := true ;
17686: LD_ADDR_EXP 11
17690: PUSH
17691: LD_INT 1
17693: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17694: LD_STRING ACH_IBRAHIM
17696: PPUSH
17697: CALL_OW 543
// end ; end ;
17701: PPOPN 4
17703: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17704: LD_EXP 10
17708: PUSH
17709: LD_EXP 19
17713: PUSH
17714: LD_INT 1
17716: LESS
17717: AND
17718: IFFALSE 18109
17720: GO 17722
17722: DISABLE
// begin DialogueOn ;
17723: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17727: LD_EXP 26
17731: PPUSH
17732: LD_STRING DH-1-final
17734: PPUSH
17735: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 ] [ Difficulty ] then
17739: LD_OWVAR 1
17743: PUSH
17744: LD_INT 126000
17746: PUSH
17747: LD_INT 115500
17749: PUSH
17750: LD_INT 105000
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: LIST
17757: PUSH
17758: LD_OWVAR 67
17762: ARRAY
17763: LESSEQUAL
17764: IFFALSE 17778
// AddMedal ( med1 , 1 ) else
17766: LD_STRING med1
17768: PPUSH
17769: LD_INT 1
17771: PPUSH
17772: CALL_OW 101
17776: GO 17789
// AddMedal ( med1 , - 1 ) ;
17778: LD_STRING med1
17780: PPUSH
17781: LD_INT 1
17783: NEG
17784: PPUSH
17785: CALL_OW 101
// if vehCounter >= 2 then
17789: LD_EXP 20
17793: PUSH
17794: LD_INT 2
17796: GREATEREQUAL
17797: IFFALSE 17811
// AddMedal ( med2 , 1 ) else
17799: LD_STRING med2
17801: PPUSH
17802: LD_INT 1
17804: PPUSH
17805: CALL_OW 101
17809: GO 17822
// AddMedal ( med2 , - 1 ) ;
17811: LD_STRING med2
17813: PPUSH
17814: LD_INT 1
17816: NEG
17817: PPUSH
17818: CALL_OW 101
// if deadCounter = 0 then
17822: LD_EXP 8
17826: PUSH
17827: LD_INT 0
17829: EQUAL
17830: IFFALSE 17844
// AddMedal ( med3 , 1 ) else
17832: LD_STRING med3
17834: PPUSH
17835: LD_INT 1
17837: PPUSH
17838: CALL_OW 101
17842: GO 17855
// AddMedal ( med3 , - 1 ) ;
17844: LD_STRING med3
17846: PPUSH
17847: LD_INT 1
17849: NEG
17850: PPUSH
17851: CALL_OW 101
// GiveMedals ( MAIN ) ;
17855: LD_STRING MAIN
17857: PPUSH
17858: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17862: LD_INT 22
17864: PUSH
17865: LD_INT 2
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 23
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 21
17884: PUSH
17885: LD_INT 1
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: LIST
17896: PPUSH
17897: CALL_OW 69
17901: PPUSH
17902: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17906: LD_EXP 26
17910: PPUSH
17911: LD_STRING 03_Heike
17913: PPUSH
17914: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
17918: LD_EXP 30
17922: PPUSH
17923: LD_STRING 03_Aviradze
17925: PPUSH
17926: CALL_OW 38
// if Givi then
17930: LD_EXP 27
17934: IFFALSE 17948
// SaveCharacters ( Givi , 03_Givi ) ;
17936: LD_EXP 27
17940: PPUSH
17941: LD_STRING 03_Givi
17943: PPUSH
17944: CALL_OW 38
// if Mike then
17948: LD_EXP 28
17952: IFFALSE 17966
// SaveCharacters ( Mike , 03_Mike ) ;
17954: LD_EXP 28
17958: PPUSH
17959: LD_STRING 03_Mike
17961: PPUSH
17962: CALL_OW 38
// if Kamil then
17966: LD_EXP 29
17970: IFFALSE 17984
// SaveCharacters ( Kamil , 03_Kamil ) ;
17972: LD_EXP 29
17976: PPUSH
17977: LD_STRING 03_Kamil
17979: PPUSH
17980: CALL_OW 38
// if Kaia then
17984: LD_EXP 31
17988: IFFALSE 18002
// SaveCharacters ( Kaia , 03_Kaia ) ;
17990: LD_EXP 31
17994: PPUSH
17995: LD_STRING 03_Kaia
17997: PPUSH
17998: CALL_OW 38
// if Sophia then
18002: LD_EXP 32
18006: IFFALSE 18020
// SaveCharacters ( Sophia , 03_Sophia ) ;
18008: LD_EXP 32
18012: PPUSH
18013: LD_STRING 03_Sophia
18015: PPUSH
18016: CALL_OW 38
// if Markov then
18020: LD_EXP 33
18024: IFFALSE 18038
// SaveCharacters ( Markov , 03_Markov ) ;
18026: LD_EXP 33
18030: PPUSH
18031: LD_STRING 03_Markov
18033: PPUSH
18034: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18038: LD_EXP 36
18042: PUSH
18043: LD_EXP 36
18047: PPUSH
18048: CALL_OW 255
18052: PUSH
18053: LD_INT 2
18055: EQUAL
18056: AND
18057: IFFALSE 18071
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18059: LD_EXP 36
18063: PPUSH
18064: LD_STRING 03_Ibrahim
18066: PPUSH
18067: CALL_OW 38
// if heikeSecondSquad then
18071: LD_EXP 40
18075: IFFALSE 18089
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18077: LD_EXP 40
18081: PPUSH
18082: LD_STRING 03_others
18084: PPUSH
18085: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18089: LD_EXP 8
18093: PPUSH
18094: LD_STRING 03_DeadCounter
18096: PPUSH
18097: CALL_OW 39
// YouWin ;
18101: CALL_OW 103
// DialogueOff ;
18105: CALL_OW 7
// end ; end_of_file
18109: END
// on UnitDestroyed ( un ) do begin if un = Heike then
18110: LD_VAR 0 1
18114: PUSH
18115: LD_EXP 26
18119: EQUAL
18120: IFFALSE 18129
// YouLost ( Heike ) ;
18122: LD_STRING Heike
18124: PPUSH
18125: CALL_OW 104
// if un = Aviradze then
18129: LD_VAR 0 1
18133: PUSH
18134: LD_EXP 30
18138: EQUAL
18139: IFFALSE 18148
// YouLost ( Aviradze ) ;
18141: LD_STRING Aviradze
18143: PPUSH
18144: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18148: LD_VAR 0 1
18152: PUSH
18153: LD_INT 11
18155: EQUAL
18156: PUSH
18157: LD_EXP 10
18161: NOT
18162: AND
18163: IFFALSE 18172
// YouLost ( Depot ) ;
18165: LD_STRING Depot
18167: PPUSH
18168: CALL_OW 104
// if un = arDepot then
18172: LD_VAR 0 1
18176: PUSH
18177: LD_INT 5
18179: EQUAL
18180: IFFALSE 18189
// YouLost ( FarmerDepot ) ;
18182: LD_STRING FarmerDepot
18184: PPUSH
18185: CALL_OW 104
// if un = Farmer then
18189: LD_VAR 0 1
18193: PUSH
18194: LD_EXP 34
18198: EQUAL
18199: IFFALSE 18208
// YouLost ( Farmer ) ;
18201: LD_STRING Farmer
18203: PPUSH
18204: CALL_OW 104
// if un in usForces then
18208: LD_VAR 0 1
18212: PUSH
18213: LD_EXP 42
18217: IN
18218: IFFALSE 18236
// usForces := usForces diff un ;
18220: LD_ADDR_EXP 42
18224: PUSH
18225: LD_EXP 42
18229: PUSH
18230: LD_VAR 0 1
18234: DIFF
18235: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18236: LD_VAR 0 1
18240: PUSH
18241: LD_INT 22
18243: PUSH
18244: LD_INT 2
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 23
18253: PUSH
18254: LD_INT 2
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 21
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: LIST
18275: PPUSH
18276: CALL_OW 69
18280: IN
18281: IFFALSE 18297
// deadCounter := deadCounter + 1 ;
18283: LD_ADDR_EXP 8
18287: PUSH
18288: LD_EXP 8
18292: PUSH
18293: LD_INT 1
18295: PLUS
18296: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18297: LD_VAR 0 1
18301: PUSH
18302: LD_INT 22
18304: PUSH
18305: LD_INT 4
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 34
18314: PUSH
18315: LD_INT 12
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PPUSH
18326: CALL_OW 69
18330: IN
18331: PUSH
18332: LD_EXP 16
18336: NOT
18337: AND
18338: IFFALSE 18348
// firstConvoyDestroyed := true ;
18340: LD_ADDR_EXP 16
18344: PUSH
18345: LD_INT 1
18347: ST_TO_ADDR
// if un in usAttackers then
18348: LD_VAR 0 1
18352: PUSH
18353: LD_EXP 45
18357: IN
18358: IFFALSE 18376
// usAttackers := usAttackers diff un ;
18360: LD_ADDR_EXP 45
18364: PUSH
18365: LD_EXP 45
18369: PUSH
18370: LD_VAR 0 1
18374: DIFF
18375: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18376: LD_VAR 0 1
18380: PUSH
18381: LD_INT 22
18383: PUSH
18384: LD_INT 5
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 21
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PPUSH
18405: CALL_OW 69
18409: IN
18410: IFFALSE 18426
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18412: LD_ADDR_EXP 18
18416: PUSH
18417: LD_EXP 18
18421: PUSH
18422: LD_INT 1
18424: PLUS
18425: ST_TO_ADDR
// end ;
18426: PPOPN 1
18428: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18429: LD_VAR 0 2
18433: PUSH
18434: LD_EXP 36
18438: EQUAL
18439: PUSH
18440: LD_EXP 23
18444: AND
18445: IFFALSE 18491
// begin Video ( true ) ;
18447: LD_INT 1
18449: PPUSH
18450: CALL 1020 0 1
// ComEnterUnit ( Ibrahim , usDepot ) ;
18454: LD_EXP 36
18458: PPUSH
18459: LD_INT 11
18461: PPUSH
18462: CALL_OW 120
// repeat wait ( 3 ) ;
18466: LD_INT 3
18468: PPUSH
18469: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
18473: LD_EXP 36
18477: PPUSH
18478: CALL_OW 310
18482: IFFALSE 18466
// Video ( false ) ;
18484: LD_INT 0
18486: PPUSH
18487: CALL 1020 0 1
// end ; end ;
18491: PPOPN 2
18493: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18494: LD_VAR 0 2
18498: PUSH
18499: LD_EXP 26
18503: EQUAL
18504: PUSH
18505: LD_VAR 0 1
18509: PUSH
18510: LD_INT 11
18512: EQUAL
18513: AND
18514: PUSH
18515: LD_EXP 23
18519: AND
18520: IFFALSE 18526
// IbrahimQuery ;
18522: CALL 16559 0 0
// end ;
18526: PPOPN 2
18528: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 141
// if oldId in usAttackers then
18538: LD_VAR 0 2
18542: PUSH
18543: LD_EXP 45
18547: IN
18548: IFFALSE 18566
// usAttackers := usAttackers diff oldId ;
18550: LD_ADDR_EXP 45
18554: PUSH
18555: LD_EXP 45
18559: PUSH
18560: LD_VAR 0 2
18564: DIFF
18565: ST_TO_ADDR
// if newId in usAttackers then
18566: LD_VAR 0 1
18570: PUSH
18571: LD_EXP 45
18575: IN
18576: IFFALSE 18594
// usAttackers := usAttackers diff newId ;
18578: LD_ADDR_EXP 45
18582: PUSH
18583: LD_EXP 45
18587: PUSH
18588: LD_VAR 0 1
18592: DIFF
18593: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18594: LD_VAR 0 3
18598: PUSH
18599: LD_INT 4
18601: EQUAL
18602: PUSH
18603: LD_EXP 16
18607: NOT
18608: AND
18609: IFFALSE 18619
// firstConvoyDestroyed := true ;
18611: LD_ADDR_EXP 16
18615: PUSH
18616: LD_INT 1
18618: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18619: LD_VAR 0 1
18623: PPUSH
18624: CALL_OW 264
18628: PUSH
18629: LD_INT 12
18631: EQUAL
18632: IFFALSE 18670
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18634: LD_ADDR_EXP 12
18638: PUSH
18639: LD_EXP 12
18643: PUSH
18644: LD_INT 1
18646: PLUS
18647: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18648: LD_VAR 0 1
18652: PPUSH
18653: LD_INT 1
18655: PPUSH
18656: CALL_OW 289
18660: PUSH
18661: LD_INT 0
18663: EQUAL
18664: IFFALSE 18670
// EmptyCargoDialog ;
18666: CALL 15340 0 0
// end ; end ;
18670: PPOPN 4
18672: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18673: LD_VAR 0 1
18677: PUSH
18678: LD_INT 2
18680: EQUAL
18681: PUSH
18682: LD_VAR 0 2
18686: PUSH
18687: LD_INT 5
18689: EQUAL
18690: AND
18691: IFFALSE 18700
// YouLost ( Attack ) ;
18693: LD_STRING Attack
18695: PPUSH
18696: CALL_OW 104
// end ;
18700: PPOPN 2
18702: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18703: LD_VAR 0 1
18707: PPUSH
18708: CALL_OW 255
18712: PUSH
18713: LD_INT 1
18715: EQUAL
18716: PUSH
18717: LD_EXP 6
18721: NOT
18722: AND
18723: IFFALSE 18857
// begin if GetBType ( b ) = b_lab then
18725: LD_VAR 0 1
18729: PPUSH
18730: CALL_OW 266
18734: PUSH
18735: LD_INT 6
18737: EQUAL
18738: IFFALSE 18778
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18740: LD_EXP 42
18744: PPUSH
18745: LD_INT 25
18747: PUSH
18748: LD_INT 4
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PPUSH
18755: CALL_OW 72
18759: PPUSH
18760: LD_VAR 0 1
18764: PPUSH
18765: CALL_OW 120
// AmLabResearch ( b ) ;
18769: LD_VAR 0 1
18773: PPUSH
18774: CALL 6042 0 1
// end ; if GetBType ( b ) = b_armoury then
18778: LD_VAR 0 1
18782: PPUSH
18783: CALL_OW 266
18787: PUSH
18788: LD_INT 4
18790: EQUAL
18791: IFFALSE 18839
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
18793: LD_EXP 42
18797: PPUSH
18798: LD_INT 25
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 3
18810: PUSH
18811: LD_INT 54
18813: PUSH
18814: EMPTY
18815: LIST
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 72
18829: PPUSH
18830: LD_VAR 0 1
18834: PPUSH
18835: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
18839: LD_ADDR_EXP 44
18843: PUSH
18844: LD_EXP 44
18848: PPUSH
18849: LD_INT 1
18851: PPUSH
18852: CALL_OW 3
18856: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
18857: LD_VAR 0 1
18861: PPUSH
18862: CALL_OW 255
18866: PUSH
18867: LD_INT 5
18869: EQUAL
18870: IFFALSE 18884
// SetBLevel ( b , 5 ) ;
18872: LD_VAR 0 1
18876: PPUSH
18877: LD_INT 5
18879: PPUSH
18880: CALL_OW 241
// end ;
18884: PPOPN 1
18886: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
18887: LD_VAR 0 1
18891: PPUSH
18892: CALL_OW 255
18896: PUSH
18897: LD_INT 2
18899: EQUAL
18900: IFFALSE 18916
// vehCounter := vehCounter + 1 ;
18902: LD_ADDR_EXP 20
18906: PUSH
18907: LD_EXP 20
18911: PUSH
18912: LD_INT 1
18914: PLUS
18915: ST_TO_ADDR
// end ;
18916: PPOPN 2
18918: END
// on SailEvent ( event ) do begin if event = eventAttack then
18919: LD_VAR 0 1
18923: PUSH
18924: LD_EXP 22
18928: EQUAL
18929: IFFALSE 18935
// AmericanAttack ;
18931: CALL 7499 0 0
// end ; end_of_file
18935: PPOPN 1
18937: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] do
18938: LD_OWVAR 1
18942: PUSH
18943: LD_INT 8400
18945: PUSH
18946: LD_INT 6300
18948: PUSH
18949: LD_INT 5250
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: LIST
18956: PUSH
18957: LD_OWVAR 67
18961: ARRAY
18962: LESSEQUAL
18963: IFFALSE 18990
18965: GO 18967
18967: DISABLE
// begin enable ;
18968: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18969: LD_INT 1
18971: PPUSH
18972: LD_INT 5
18974: PPUSH
18975: CALL_OW 12
18979: PPUSH
18980: LD_INT 9
18982: PPUSH
18983: LD_INT 1
18985: PPUSH
18986: CALL_OW 55
// end ;
18990: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 26 26$00 , 23 23$00 , 20 20$00 ] [ Difficulty ] do
18991: LD_EXP 6
18995: PUSH
18996: LD_OWVAR 1
19000: PUSH
19001: LD_INT 54600
19003: PUSH
19004: LD_INT 48300
19006: PUSH
19007: LD_INT 42000
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: LIST
19014: PUSH
19015: LD_OWVAR 67
19019: ARRAY
19020: LESSEQUAL
19021: AND
19022: IFFALSE 19049
19024: GO 19026
19026: DISABLE
// begin enable ;
19027: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19028: LD_INT 1
19030: PPUSH
19031: LD_INT 5
19033: PPUSH
19034: CALL_OW 12
19038: PPUSH
19039: LD_INT 9
19041: PPUSH
19042: LD_INT 1
19044: PPUSH
19045: CALL_OW 55
// end ; end_of_file
19049: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19050: LD_EXP 10
19054: NOT
19055: PUSH
19056: LD_EXP 14
19060: AND
19061: PUSH
19062: LD_EXP 4
19066: AND
19067: PUSH
19068: LD_EXP 13
19072: PUSH
19073: LD_EXP 14
19077: LESSEQUAL
19078: AND
19079: IFFALSE 19169
19081: GO 19083
19083: DISABLE
// begin enable ;
19084: ENABLE
// display_strings := [ #X103-1 , farmerCrates , farmerRequestedCrates ] ;
19085: LD_ADDR_OWVAR 47
19089: PUSH
19090: LD_STRING #X103-1
19092: PUSH
19093: LD_EXP 13
19097: PUSH
19098: LD_EXP 14
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19108: LD_ADDR_EXP 13
19112: PUSH
19113: LD_INT 5
19115: PPUSH
19116: CALL_OW 274
19120: PPUSH
19121: LD_INT 1
19123: PPUSH
19124: CALL_OW 275
19128: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19129: LD_INT 10
19131: PPUSH
19132: LD_INT 1
19134: PPUSH
19135: CALL_OW 287
19139: PUSH
19140: LD_INT 0
19142: EQUAL
19143: IFFALSE 19161
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19145: LD_ADDR_EXP 15
19149: PUSH
19150: LD_EXP 15
19154: PUSH
19155: LD_INT 35
19157: MINUS
19158: ST_TO_ADDR
19159: GO 19169
// farmerCratesCounter := 30 30$00 ;
19161: LD_ADDR_EXP 15
19165: PUSH
19166: LD_INT 63000
19168: ST_TO_ADDR
// end ; end_of_file
19169: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
19170: GO 19172
19172: DISABLE
// begin ru_radar := 98 ;
19173: LD_ADDR_EXP 46
19177: PUSH
19178: LD_INT 98
19180: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19181: LD_ADDR_EXP 47
19185: PUSH
19186: LD_INT 89
19188: ST_TO_ADDR
// us_hack := 99 ;
19189: LD_ADDR_EXP 48
19193: PUSH
19194: LD_INT 99
19196: ST_TO_ADDR
// us_artillery := 97 ;
19197: LD_ADDR_EXP 49
19201: PUSH
19202: LD_INT 97
19204: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19205: LD_ADDR_EXP 50
19209: PUSH
19210: LD_INT 91
19212: ST_TO_ADDR
// tech_Artillery := 80 ;
19213: LD_ADDR_EXP 51
19217: PUSH
19218: LD_INT 80
19220: ST_TO_ADDR
// tech_RadMat := 81 ;
19221: LD_ADDR_EXP 52
19225: PUSH
19226: LD_INT 81
19228: ST_TO_ADDR
// tech_BasicTools := 82 ;
19229: LD_ADDR_EXP 53
19233: PUSH
19234: LD_INT 82
19236: ST_TO_ADDR
// tech_Cargo := 83 ;
19237: LD_ADDR_EXP 54
19241: PUSH
19242: LD_INT 83
19244: ST_TO_ADDR
// tech_Track := 84 ;
19245: LD_ADDR_EXP 55
19249: PUSH
19250: LD_INT 84
19252: ST_TO_ADDR
// tech_Crane := 85 ;
19253: LD_ADDR_EXP 56
19257: PUSH
19258: LD_INT 85
19260: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19261: LD_ADDR_EXP 57
19265: PUSH
19266: LD_INT 86
19268: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19269: LD_ADDR_EXP 58
19273: PUSH
19274: LD_INT 87
19276: ST_TO_ADDR
// end ;
19277: END
