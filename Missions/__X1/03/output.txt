// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// CreateNature ;
   8: CALL 630 0 0
// PrepareArabian ;
  12: CALL 1065 0 0
// PrepareAmerican ;
  16: CALL 4126 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// Action ;
  33: CALL 9096 0 0
// end ;
  37: END
// export debug , prefix , gameStarted , farmerBaseReady , americanBaseSpoted , americanBaseCaptured , allowCargoEvacuation , americanHasEscaped , deadCounter , workshopBuilded , retreatAllowed , allowConvoys , capturedCargoCounter , americanStartRun , farmerCrates , farmerRequestedCrates , farmerCratesCounter , firstConvoyDestroyed , attackWave , farmerHumanLoseCounter , omarCargoCounter , vehCounter , convoyCounter , eventAttack , ibrahimInDepot , ibrahimIsFree , maxConvoys ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := false ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 0
  48: ST_TO_ADDR
// prefix := 02_ ;
  49: LD_ADDR_EXP 2
  53: PUSH
  54: LD_STRING 02_
  56: ST_TO_ADDR
// eventAttack := 1 ;
  57: LD_ADDR_EXP 24
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// deadCounter := 0 ;
  65: LD_ADDR_EXP 9
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// gameStarted := false ;
  73: LD_ADDR_EXP 3
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// farmerBaseReady := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// americanBaseSpoted := false ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// americanBaseCaptured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// americanHasEscaped := false ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// workshopBuilded := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// retreatAllowed := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// allowConvoys := false ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// farmerCrates := 0 ;
 137: LD_ADDR_EXP 15
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// farmerRequestedCrates := 0 ;
 145: LD_ADDR_EXP 16
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// farmerCratesCounter := [ 30 30$00 , 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] ;
 153: LD_ADDR_EXP 17
 157: PUSH
 158: LD_INT 63000
 160: PUSH
 161: LD_INT 52500
 163: PUSH
 164: LD_INT 46200
 166: PUSH
 167: LD_INT 42000
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// farmerHumanLoseCounter := 0 ;
 182: LD_ADDR_EXP 20
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// firstConvoyDestroyed := false ;
 190: LD_ADDR_EXP 18
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// attackWave := 1 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// omarCargoCounter := [ 6 , 8 , 9 , 10 ] [ Difficulty ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 6
 213: PUSH
 214: LD_INT 8
 216: PUSH
 217: LD_INT 9
 219: PUSH
 220: LD_INT 10
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: PUSH
 229: LD_OWVAR 67
 233: ARRAY
 234: ST_TO_ADDR
// vehCounter := 0 ;
 235: LD_ADDR_EXP 22
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// convoyCounter := 0 ;
 243: LD_ADDR_EXP 23
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// ibrahimInDepot := false ;
 251: LD_ADDR_EXP 25
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// ibrahimIsFree := false ;
 259: LD_ADDR_EXP 26
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// maxConvoys := [ 16 , 16 , 15 , 14 ] [ Difficulty ] ;
 267: LD_ADDR_EXP 27
 271: PUSH
 272: LD_INT 16
 274: PUSH
 275: LD_INT 16
 277: PUSH
 278: LD_INT 15
 280: PUSH
 281: LD_INT 14
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: LIST
 289: PUSH
 290: LD_OWVAR 67
 294: ARRAY
 295: ST_TO_ADDR
// capturedCargoCounter := 0 ;
 296: LD_ADDR_EXP 13
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// allowCargoEvacuation := false ;
 304: LD_ADDR_EXP 7
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// americanStartRun := false ;
 312: LD_ADDR_EXP 14
 316: PUSH
 317: LD_INT 0
 319: ST_TO_ADDR
// end ; end_of_file
 320: LD_VAR 0 1
 324: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 325: LD_INT 0
 327: PPUSH
// uc_side := side ;
 328: LD_ADDR_OWVAR 20
 332: PUSH
 333: LD_VAR 0 1
 337: ST_TO_ADDR
// uc_nation := nation ;
 338: LD_ADDR_OWVAR 21
 342: PUSH
 343: LD_VAR 0 2
 347: ST_TO_ADDR
// vc_chassis := chassis ;
 348: LD_ADDR_OWVAR 37
 352: PUSH
 353: LD_VAR 0 3
 357: ST_TO_ADDR
// vc_engine := engine ;
 358: LD_ADDR_OWVAR 39
 362: PUSH
 363: LD_VAR 0 4
 367: ST_TO_ADDR
// vc_control := control ;
 368: LD_ADDR_OWVAR 38
 372: PUSH
 373: LD_VAR 0 5
 377: ST_TO_ADDR
// vc_weapon := weapon ;
 378: LD_ADDR_OWVAR 40
 382: PUSH
 383: LD_VAR 0 6
 387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 388: LD_ADDR_OWVAR 41
 392: PUSH
 393: LD_VAR 0 7
 397: ST_TO_ADDR
// result := CreateVehicle ;
 398: LD_ADDR_VAR 0 8
 402: PUSH
 403: CALL_OW 45
 407: ST_TO_ADDR
// end ;
 408: LD_VAR 0 8
 412: RET
// export function SayX ( units , ident ) ; var i ; begin
 413: LD_INT 0
 415: PPUSH
 416: PPUSH
// result := false ;
 417: LD_ADDR_VAR 0 3
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// if not units then
 425: LD_VAR 0 1
 429: NOT
 430: IFFALSE 434
// exit ;
 432: GO 488
// for i in units do
 434: LD_ADDR_VAR 0 4
 438: PUSH
 439: LD_VAR 0 1
 443: PUSH
 444: FOR_IN
 445: IFFALSE 486
// if IsOk ( i ) then
 447: LD_VAR 0 4
 451: PPUSH
 452: CALL_OW 302
 456: IFFALSE 484
// begin Say ( i , ident ) ;
 458: LD_VAR 0 4
 462: PPUSH
 463: LD_VAR 0 2
 467: PPUSH
 468: CALL_OW 88
// result := i ;
 472: LD_ADDR_VAR 0 3
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// break ;
 482: GO 486
// end ;
 484: GO 444
 486: POP
 487: POP
// end ;
 488: LD_VAR 0 3
 492: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 493: LD_INT 0
 495: PPUSH
 496: PPUSH
// InitUc ;
 497: CALL_OW 18
// InitHc ;
 501: CALL_OW 19
// uc_side := 0 ;
 505: LD_ADDR_OWVAR 20
 509: PUSH
 510: LD_INT 0
 512: ST_TO_ADDR
// uc_nation := 0 ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_INT 0
 520: ST_TO_ADDR
// for i = 1 to amount do
 521: LD_ADDR_VAR 0 4
 525: PUSH
 526: DOUBLE
 527: LD_INT 1
 529: DEC
 530: ST_TO_ADDR
 531: LD_VAR 0 2
 535: PUSH
 536: FOR_TO
 537: IFFALSE 619
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 539: LD_ADDR_OWVAR 29
 543: PUSH
 544: LD_INT 9
 546: PPUSH
 547: LD_INT 12
 549: PPUSH
 550: CALL_OW 12
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 570: LD_ADDR_OWVAR 35
 574: PUSH
 575: LD_INT 1
 577: NEG
 578: PPUSH
 579: LD_INT 1
 581: PPUSH
 582: CALL_OW 12
 586: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 587: LD_INT 0
 589: PPUSH
 590: LD_INT 12
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 600: CALL_OW 44
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 49
// end ;
 617: GO 536
 619: POP
 620: POP
// InitHc ;
 621: CALL_OW 19
// end ;
 625: LD_VAR 0 3
 629: RET
// export function CreateNature ; var i ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 , 3 ] [ Difficulty ] ) ;
 634: LD_INT 2
 636: PPUSH
 637: LD_INT 5
 639: PUSH
 640: LD_INT 4
 642: PUSH
 643: LD_INT 4
 645: PUSH
 646: LD_INT 3
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: PUSH
 655: LD_OWVAR 67
 659: ARRAY
 660: PPUSH
 661: CALL 493 0 2
// for i := 1 to 2 do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_INT 2
 677: PUSH
 678: FOR_TO
 679: IFFALSE 714
// begin hc_class := 21 ;
 681: LD_ADDR_OWVAR 28
 685: PUSH
 686: LD_INT 21
 688: ST_TO_ADDR
// hc_gallery :=  ;
 689: LD_ADDR_OWVAR 33
 693: PUSH
 694: LD_STRING 
 696: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 697: CALL_OW 44
 701: PPUSH
 702: LD_INT 2
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// end ;
 712: GO 678
 714: POP
 715: POP
// for i := 1 to 2 do
 716: LD_ADDR_VAR 0 2
 720: PUSH
 721: DOUBLE
 722: LD_INT 1
 724: DEC
 725: ST_TO_ADDR
 726: LD_INT 2
 728: PUSH
 729: FOR_TO
 730: IFFALSE 765
// begin hc_class := 18 ;
 732: LD_ADDR_OWVAR 28
 736: PUSH
 737: LD_INT 18
 739: ST_TO_ADDR
// hc_gallery :=  ;
 740: LD_ADDR_OWVAR 33
 744: PUSH
 745: LD_STRING 
 747: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 748: CALL_OW 44
 752: PPUSH
 753: LD_INT 2
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 49
// end ;
 763: GO 729
 765: POP
 766: POP
// for i := 1 to 2 do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_INT 2
 779: PUSH
 780: FOR_TO
 781: IFFALSE 816
// begin hc_class := 13 ;
 783: LD_ADDR_OWVAR 28
 787: PUSH
 788: LD_INT 13
 790: ST_TO_ADDR
// hc_gallery :=  ;
 791: LD_ADDR_OWVAR 33
 795: PUSH
 796: LD_STRING 
 798: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 799: CALL_OW 44
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end ;
 814: GO 780
 816: POP
 817: POP
// end ;
 818: LD_VAR 0 1
 822: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 823: LD_INT 0
 825: PPUSH
 826: PPUSH
 827: PPUSH
// if not observer or not unit then
 828: LD_VAR 0 1
 832: NOT
 833: PUSH
 834: LD_VAR 0 2
 838: NOT
 839: OR
 840: IFFALSE 844
// exit ;
 842: GO 892
// if not See ( GetSide ( observer ) , unit ) then
 844: LD_VAR 0 1
 848: PPUSH
 849: CALL_OW 255
 853: PPUSH
 854: LD_VAR 0 2
 858: PPUSH
 859: CALL_OW 292
 863: NOT
 864: IFFALSE 868
// exit ;
 866: GO 892
// result := GetDistUnits ( observer , unit ) < 12 ;
 868: LD_ADDR_VAR 0 3
 872: PUSH
 873: LD_VAR 0 1
 877: PPUSH
 878: LD_VAR 0 2
 882: PPUSH
 883: CALL_OW 296
 887: PUSH
 888: LD_INT 12
 890: LESS
 891: ST_TO_ADDR
// end ;
 892: LD_VAR 0 3
 896: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 897: LD_INT 0
 899: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 900: LD_VAR 0 2
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: PPUSH
 909: LD_VAR 0 2
 913: PUSH
 914: LD_INT 2
 916: ARRAY
 917: PPUSH
 918: CALL_OW 488
 922: PUSH
 923: LD_VAR 0 2
 927: PUSH
 928: LD_INT 1
 930: ARRAY
 931: PPUSH
 932: LD_VAR 0 2
 936: PUSH
 937: LD_INT 2
 939: ARRAY
 940: PPUSH
 941: CALL_OW 428
 945: PUSH
 946: LD_INT 0
 948: EQUAL
 949: AND
 950: IFFALSE 984
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 952: LD_VAR 0 1
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PPUSH
 966: LD_VAR 0 2
 970: PUSH
 971: LD_INT 2
 973: ARRAY
 974: PPUSH
 975: LD_VAR 0 3
 979: PPUSH
 980: CALL_OW 48
// end ;
 984: LD_VAR 0 4
 988: RET
// export function ReverseArray ( array ) ; var i ; begin
 989: LD_INT 0
 991: PPUSH
 992: PPUSH
// if not array then
 993: LD_VAR 0 1
 997: NOT
 998: IFFALSE 1002
// exit ;
1000: GO 1060
// result := [ ] ;
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: EMPTY
1008: ST_TO_ADDR
// for i := 1 to array do
1009: LD_ADDR_VAR 0 3
1013: PUSH
1014: DOUBLE
1015: LD_INT 1
1017: DEC
1018: ST_TO_ADDR
1019: LD_VAR 0 1
1023: PUSH
1024: FOR_TO
1025: IFFALSE 1058
// result := Insert ( result , 1 , array [ i ] ) ;
1027: LD_ADDR_VAR 0 2
1031: PUSH
1032: LD_VAR 0 2
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_VAR 0 1
1044: PUSH
1045: LD_VAR 0 3
1049: ARRAY
1050: PPUSH
1051: CALL_OW 2
1055: ST_TO_ADDR
1056: GO 1024
1058: POP
1059: POP
// end ; end_of_file
1060: LD_VAR 0 2
1064: RET
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer , Omar , Ibrahim ; export farmerSquad , omarSquad , heikeSquad , heikeSecondSquad ; export omarCargo ; export function PrepareArabian ; var i , un , tmp ; begin
1065: LD_INT 0
1067: PPUSH
1068: PPUSH
1069: PPUSH
1070: PPUSH
// uc_side := 5 ;
1071: LD_ADDR_OWVAR 20
1075: PUSH
1076: LD_INT 5
1078: ST_TO_ADDR
// uc_nation := 2 ;
1079: LD_ADDR_OWVAR 21
1083: PUSH
1084: LD_INT 2
1086: ST_TO_ADDR
// SetResourceType ( GetBase ( arDepot ) , mat_cans , 65 ) ;
1087: LD_INT 5
1089: PPUSH
1090: CALL_OW 274
1094: PPUSH
1095: LD_INT 1
1097: PPUSH
1098: LD_INT 65
1100: PPUSH
1101: CALL_OW 277
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
1105: LD_ADDR_EXP 36
1109: PUSH
1110: LD_STRING Farmer
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 37402 0 3
1123: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
1124: LD_ADDR_EXP 37
1128: PUSH
1129: LD_STRING Omar
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: LD_STRING 
1137: PPUSH
1138: CALL 37402 0 3
1142: ST_TO_ADDR
// omarSquad := [ ] ;
1143: LD_ADDR_EXP 40
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// heikeSquad := [ ] ;
1150: LD_ADDR_EXP 41
1154: PUSH
1155: EMPTY
1156: ST_TO_ADDR
// heikeSecondSquad := [ ] ;
1157: LD_ADDR_EXP 42
1161: PUSH
1162: EMPTY
1163: ST_TO_ADDR
// omarCargo := [ ] ;
1164: LD_ADDR_EXP 43
1168: PUSH
1169: EMPTY
1170: ST_TO_ADDR
// for i := 1 to 5 do
1171: LD_ADDR_VAR 0 2
1175: PUSH
1176: DOUBLE
1177: LD_INT 1
1179: DEC
1180: ST_TO_ADDR
1181: LD_INT 5
1183: PUSH
1184: FOR_TO
1185: IFFALSE 1343
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 1 , 1 ] [ i ] , 3 ) ;
1187: LD_INT 0
1189: PPUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 2
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: LD_VAR 0 2
1216: ARRAY
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 380
// un := CreateHuman ;
1225: LD_ADDR_VAR 0 3
1229: PUSH
1230: CALL_OW 44
1234: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1235: LD_ADDR_EXP 40
1239: PUSH
1240: LD_EXP 40
1244: PUSH
1245: LD_VAR 0 3
1249: UNION
1250: ST_TO_ADDR
// PlaceUnitHex ( un , [ [ 87 , 30 ] , [ 91 , 32 ] , [ 82 , 15 ] , [ 79 , 14 ] , [ 82 , 13 ] ] [ i ] , false ) ;
1251: LD_VAR 0 3
1255: PPUSH
1256: LD_INT 87
1258: PUSH
1259: LD_INT 30
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 91
1268: PUSH
1269: LD_INT 32
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 82
1278: PUSH
1279: LD_INT 15
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: LD_INT 79
1288: PUSH
1289: LD_INT 14
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: PUSH
1296: LD_INT 82
1298: PUSH
1299: LD_INT 13
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_VAR 0 2
1317: ARRAY
1318: PPUSH
1319: LD_INT 0
1321: PPUSH
1322: CALL 897 0 3
// ComTurnXY ( un , 93 , 21 ) ;
1326: LD_VAR 0 3
1330: PPUSH
1331: LD_INT 93
1333: PPUSH
1334: LD_INT 21
1336: PPUSH
1337: CALL_OW 118
// end ;
1341: GO 1184
1343: POP
1344: POP
// uc_side := 2 ;
1345: LD_ADDR_OWVAR 20
1349: PUSH
1350: LD_INT 2
1352: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1353: LD_ADDR_EXP 28
1357: PUSH
1358: LD_STRING Heike
1360: PPUSH
1361: LD_EXP 1
1365: NOT
1366: PPUSH
1367: LD_EXP 2
1371: PPUSH
1372: CALL 37402 0 3
1376: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1377: LD_ADDR_EXP 32
1381: PUSH
1382: LD_STRING Aviradze
1384: PPUSH
1385: LD_EXP 1
1389: NOT
1390: PPUSH
1391: LD_EXP 2
1395: PPUSH
1396: CALL 37402 0 3
1400: ST_TO_ADDR
// tmp := [ ] ;
1401: LD_ADDR_VAR 0 4
1405: PUSH
1406: EMPTY
1407: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1408: LD_ADDR_EXP 29
1412: PUSH
1413: LD_STRING Givi
1415: PPUSH
1416: LD_EXP 1
1420: NOT
1421: PPUSH
1422: LD_EXP 2
1426: PPUSH
1427: CALL 37402 0 3
1431: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1432: LD_ADDR_EXP 30
1436: PUSH
1437: LD_STRING Mike
1439: PPUSH
1440: LD_EXP 1
1444: NOT
1445: PPUSH
1446: LD_EXP 2
1450: PPUSH
1451: CALL 37402 0 3
1455: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1456: LD_ADDR_EXP 31
1460: PUSH
1461: LD_STRING Kamil
1463: PPUSH
1464: LD_EXP 1
1468: NOT
1469: PPUSH
1470: LD_EXP 2
1474: PPUSH
1475: CALL 37402 0 3
1479: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1480: LD_ADDR_EXP 33
1484: PUSH
1485: LD_STRING Kaia
1487: PPUSH
1488: LD_EXP 1
1492: NOT
1493: PPUSH
1494: LD_EXP 2
1498: PPUSH
1499: CALL 37402 0 3
1503: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1504: LD_ADDR_EXP 34
1508: PUSH
1509: LD_STRING Sophia
1511: PPUSH
1512: LD_EXP 1
1516: NOT
1517: PPUSH
1518: LD_EXP 2
1522: PPUSH
1523: CALL 37402 0 3
1527: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1528: LD_ADDR_EXP 35
1532: PUSH
1533: LD_STRING Markov
1535: PPUSH
1536: LD_EXP 1
1540: NOT
1541: PPUSH
1542: LD_EXP 2
1546: PPUSH
1547: CALL 37402 0 3
1551: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 02_others ) ;
1552: LD_ADDR_EXP 42
1556: PUSH
1557: LD_STRING 02_others
1559: PPUSH
1560: CALL_OW 31
1564: ST_TO_ADDR
// tmp := [ Mike , Kamil , Kaia , Sophia , Markov , Givi ] ^ heikeSecondSquad diff 0 ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_EXP 30
1574: PUSH
1575: LD_EXP 31
1579: PUSH
1580: LD_EXP 33
1584: PUSH
1585: LD_EXP 34
1589: PUSH
1590: LD_EXP 35
1594: PUSH
1595: LD_EXP 29
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: PUSH
1608: LD_EXP 42
1612: ADD
1613: PUSH
1614: LD_INT 0
1616: DIFF
1617: ST_TO_ADDR
// heikeSquad := tmp ;
1618: LD_ADDR_EXP 41
1622: PUSH
1623: LD_VAR 0 4
1627: ST_TO_ADDR
// if UnitFilter ( heikeSquad , [ f_class , 1 ] ) < 3 then
1628: LD_EXP 41
1632: PPUSH
1633: LD_INT 25
1635: PUSH
1636: LD_INT 1
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 72
1647: PUSH
1648: LD_INT 3
1650: LESS
1651: IFFALSE 1701
// begin SetClass ( Kaia , 1 ) ;
1653: LD_EXP 33
1657: PPUSH
1658: LD_INT 1
1660: PPUSH
1661: CALL_OW 336
// SetClass ( Mike , 1 ) ;
1665: LD_EXP 30
1669: PPUSH
1670: LD_INT 1
1672: PPUSH
1673: CALL_OW 336
// SetClass ( Givi , 1 ) ;
1677: LD_EXP 29
1681: PPUSH
1682: LD_INT 1
1684: PPUSH
1685: CALL_OW 336
// SetClass ( Heike , 1 ) ;
1689: LD_EXP 28
1693: PPUSH
1694: LD_INT 1
1696: PPUSH
1697: CALL_OW 336
// end ; tmp := tmp union CreateCharacterSet ( 02_ape ) ;
1701: LD_ADDR_VAR 0 4
1705: PUSH
1706: LD_VAR 0 4
1710: PUSH
1711: LD_STRING 02_ape
1713: PPUSH
1714: CALL_OW 31
1718: UNION
1719: ST_TO_ADDR
// PlaceUnitXY ( Heike , 92 , 17 , false ) ;
1720: LD_EXP 28
1724: PPUSH
1725: LD_INT 92
1727: PPUSH
1728: LD_INT 17
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: CALL_OW 48
// PlaceUnitXY ( Farmer , 95 , 19 , false ) ;
1738: LD_EXP 36
1742: PPUSH
1743: LD_INT 95
1745: PPUSH
1746: LD_INT 19
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 48
// PlaceUnitXY ( Omar , 89 , 25 , false ) ;
1756: LD_EXP 37
1760: PPUSH
1761: LD_INT 89
1763: PPUSH
1764: LD_INT 25
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL_OW 48
// PlaceUnitXY ( Aviradze , 92 , 27 , false ) ;
1774: LD_EXP 32
1778: PPUSH
1779: LD_INT 92
1781: PPUSH
1782: LD_INT 27
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// ComTurnUnit ( Omar , Aviradze ) ;
1792: LD_EXP 37
1796: PPUSH
1797: LD_EXP 32
1801: PPUSH
1802: CALL_OW 119
// ComTurnUnit ( Aviradze , Omar ) ;
1806: LD_EXP 32
1810: PPUSH
1811: LD_EXP 37
1815: PPUSH
1816: CALL_OW 119
// ComTurnUnit ( [ Heike , Farmer ] , Omar ) ;
1820: LD_EXP 28
1824: PUSH
1825: LD_EXP 36
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PPUSH
1834: LD_EXP 37
1838: PPUSH
1839: CALL_OW 119
// if tmp then
1843: LD_VAR 0 4
1847: IFFALSE 1901
// for i in tmp do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: LD_VAR 0 4
1858: PUSH
1859: FOR_IN
1860: IFFALSE 1899
// begin PlaceUnitXYR ( i , 94 , 14 , 4 , false ) ;
1862: LD_VAR 0 2
1866: PPUSH
1867: LD_INT 94
1869: PPUSH
1870: LD_INT 14
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 50
// ComTurnUnit ( i , Heike ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_EXP 28
1892: PPUSH
1893: CALL_OW 119
// end ;
1897: GO 1859
1899: POP
1900: POP
// farmerSquad := [ ] ;
1901: LD_ADDR_EXP 39
1905: PUSH
1906: EMPTY
1907: ST_TO_ADDR
// uc_side := 5 ;
1908: LD_ADDR_OWVAR 20
1912: PUSH
1913: LD_INT 5
1915: ST_TO_ADDR
// uc_nation := 2 ;
1916: LD_ADDR_OWVAR 21
1920: PUSH
1921: LD_INT 2
1923: ST_TO_ADDR
// for i := 1 to 4 do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_INT 4
1936: PUSH
1937: FOR_TO
1938: IFFALSE 2016
// begin PrepareHuman ( false , 1 , 2 ) ;
1940: LD_INT 0
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_INT 2
1948: PPUSH
1949: CALL_OW 380
// un := CreateHuman ;
1953: LD_ADDR_VAR 0 3
1957: PUSH
1958: CALL_OW 44
1962: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 27 , 4 , false ) ;
1963: LD_VAR 0 3
1967: PPUSH
1968: LD_INT 102
1970: PPUSH
1971: LD_INT 27
1973: PPUSH
1974: LD_INT 4
1976: PPUSH
1977: LD_INT 0
1979: PPUSH
1980: CALL_OW 50
// farmerSquad := farmerSquad union un ;
1984: LD_ADDR_EXP 39
1988: PUSH
1989: LD_EXP 39
1993: PUSH
1994: LD_VAR 0 3
1998: UNION
1999: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2000: LD_VAR 0 3
2004: PPUSH
2005: LD_EXP 37
2009: PPUSH
2010: CALL_OW 119
// end ;
2014: GO 1937
2016: POP
2017: POP
// for i := 1 to 2 do
2018: LD_ADDR_VAR 0 2
2022: PUSH
2023: DOUBLE
2024: LD_INT 1
2026: DEC
2027: ST_TO_ADDR
2028: LD_INT 2
2030: PUSH
2031: FOR_TO
2032: IFFALSE 2110
// begin PrepareHuman ( false , 2 , 2 ) ;
2034: LD_INT 0
2036: PPUSH
2037: LD_INT 2
2039: PPUSH
2040: LD_INT 2
2042: PPUSH
2043: CALL_OW 380
// un := CreateHuman ;
2047: LD_ADDR_VAR 0 3
2051: PUSH
2052: CALL_OW 44
2056: ST_TO_ADDR
// PlaceUnitXYR ( un , 108 , 62 , 2 , false ) ;
2057: LD_VAR 0 3
2061: PPUSH
2062: LD_INT 108
2064: PPUSH
2065: LD_INT 62
2067: PPUSH
2068: LD_INT 2
2070: PPUSH
2071: LD_INT 0
2073: PPUSH
2074: CALL_OW 50
// farmerSquad := farmerSquad union un ;
2078: LD_ADDR_EXP 39
2082: PUSH
2083: LD_EXP 39
2087: PUSH
2088: LD_VAR 0 3
2092: UNION
2093: ST_TO_ADDR
// ComTurnUnit ( un , Omar ) ;
2094: LD_VAR 0 3
2098: PPUSH
2099: LD_EXP 37
2103: PPUSH
2104: CALL_OW 119
// end ;
2108: GO 2031
2110: POP
2111: POP
// PlaceSeeing ( 109 , 63 , 2 , - 15 ) ;
2112: LD_INT 109
2114: PPUSH
2115: LD_INT 63
2117: PPUSH
2118: LD_INT 2
2120: PPUSH
2121: LD_INT 15
2123: NEG
2124: PPUSH
2125: CALL_OW 330
// RemoveSeeing ( 109 , 63 , 2 ) ;
2129: LD_INT 109
2131: PPUSH
2132: LD_INT 63
2134: PPUSH
2135: LD_INT 2
2137: PPUSH
2138: CALL_OW 331
// end ;
2142: LD_VAR 0 1
2146: RET
// export function PrepareIbrahim ( x , y ) ; begin
2147: LD_INT 0
2149: PPUSH
// uc_side := 6 ;
2150: LD_ADDR_OWVAR 20
2154: PUSH
2155: LD_INT 6
2157: ST_TO_ADDR
// uc_nation := 3 ;
2158: LD_ADDR_OWVAR 21
2162: PUSH
2163: LD_INT 3
2165: ST_TO_ADDR
// Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
2166: LD_ADDR_EXP 38
2170: PUSH
2171: LD_STRING IbrahimRu
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: LD_STRING 
2179: PPUSH
2180: CALL 37402 0 3
2184: ST_TO_ADDR
// PlaceUnitXYR ( Ibrahim , x , y , 8 , true ) ;
2185: LD_EXP 38
2189: PPUSH
2190: LD_VAR 0 1
2194: PPUSH
2195: LD_VAR 0 2
2199: PPUSH
2200: LD_INT 8
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL_OW 50
// end ;
2210: LD_VAR 0 3
2214: RET
// every 0 0$1 trigger UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do var i ;
2215: LD_EXP 37
2219: PUSH
2220: LD_EXP 40
2224: ADD
2225: PPUSH
2226: LD_INT 95
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PPUSH
2236: CALL_OW 72
2240: IFFALSE 2296
2242: GO 2244
2244: DISABLE
2245: LD_INT 0
2247: PPUSH
// begin enable ;
2248: ENABLE
// for i in UnitFilter ( Omar ^ omarSquad , [ f_inarea , northRoad ] ) do
2249: LD_ADDR_VAR 0 1
2253: PUSH
2254: LD_EXP 37
2258: PUSH
2259: LD_EXP 40
2263: ADD
2264: PPUSH
2265: LD_INT 95
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 72
2279: PUSH
2280: FOR_IN
2281: IFFALSE 2294
// RemoveUnit ( i ) ;
2283: LD_VAR 0 1
2287: PPUSH
2288: CALL_OW 64
2292: GO 2280
2294: POP
2295: POP
// end ;
2296: PPOPN 1
2298: END
// every 0 0$3 trigger gameStarted and IsInArea ( Farmer , farmerBase ) do var i , tmp , arm , bun ;
2299: LD_EXP 3
2303: PUSH
2304: LD_EXP 36
2308: PPUSH
2309: LD_INT 4
2311: PPUSH
2312: CALL_OW 308
2316: AND
2317: IFFALSE 3121
2319: GO 2321
2321: DISABLE
2322: LD_INT 0
2324: PPUSH
2325: PPUSH
2326: PPUSH
2327: PPUSH
// begin ComMoveXY ( Farmer , 110 , 60 ) ;
2328: LD_EXP 36
2332: PPUSH
2333: LD_INT 110
2335: PPUSH
2336: LD_INT 60
2338: PPUSH
2339: CALL_OW 111
// AddComTurnXY ( Farmer , 110 , 61 ) ;
2343: LD_EXP 36
2347: PPUSH
2348: LD_INT 110
2350: PPUSH
2351: LD_INT 61
2353: PPUSH
2354: CALL_OW 178
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2358: LD_ADDR_VAR 0 2
2362: PUSH
2363: LD_EXP 39
2367: PPUSH
2368: LD_INT 25
2370: PUSH
2371: LD_INT 1
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PPUSH
2378: CALL_OW 72
2382: ST_TO_ADDR
// if tmp then
2383: LD_VAR 0 2
2387: IFFALSE 2481
// begin for i := 1 to 2 do
2389: LD_ADDR_VAR 0 1
2393: PUSH
2394: DOUBLE
2395: LD_INT 1
2397: DEC
2398: ST_TO_ADDR
2399: LD_INT 2
2401: PUSH
2402: FOR_TO
2403: IFFALSE 2479
// begin ComEnterUnit ( tmp [ i ] , arDepot ) ;
2405: LD_VAR 0 2
2409: PUSH
2410: LD_VAR 0 1
2414: ARRAY
2415: PPUSH
2416: LD_INT 5
2418: PPUSH
2419: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_engineer ) ;
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 1
2432: ARRAY
2433: PPUSH
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 183
// AddComExitBuilding ( tmp [ i ] ) ;
2441: LD_VAR 0 2
2445: PUSH
2446: LD_VAR 0 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 182
// AddComMoveXY ( tmp [ i ] , 107 , 66 ) ;
2456: LD_VAR 0 2
2460: PUSH
2461: LD_VAR 0 1
2465: ARRAY
2466: PPUSH
2467: LD_INT 107
2469: PPUSH
2470: LD_INT 66
2472: PPUSH
2473: CALL_OW 171
// end ;
2477: GO 2402
2479: POP
2480: POP
// end ; tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2481: LD_ADDR_VAR 0 2
2485: PUSH
2486: LD_EXP 39
2490: PPUSH
2491: LD_INT 25
2493: PUSH
2494: LD_INT 2
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 72
2505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2506: LD_INT 35
2508: PPUSH
2509: CALL_OW 67
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: LD_EXP 39
2522: PPUSH
2523: LD_INT 25
2525: PUSH
2526: LD_INT 2
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: ST_TO_ADDR
// until tmp ;
2538: LD_VAR 0 2
2542: IFFALSE 2506
// ComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
2544: LD_VAR 0 2
2548: PPUSH
2549: LD_INT 31
2551: PPUSH
2552: LD_INT 102
2554: PPUSH
2555: LD_INT 69
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: CALL_OW 145
// repeat wait ( 0 0$1 ) ;
2565: LD_INT 35
2567: PPUSH
2568: CALL_OW 67
// until UnitFilter ( farmerSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2572: LD_EXP 39
2576: PPUSH
2577: LD_INT 3
2579: PUSH
2580: LD_INT 60
2582: PUSH
2583: EMPTY
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 25
2592: PUSH
2593: LD_INT 2
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PPUSH
2604: CALL_OW 72
2608: IFFALSE 2565
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2610: LD_ADDR_VAR 0 2
2614: PUSH
2615: LD_EXP 39
2619: PPUSH
2620: LD_INT 25
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PPUSH
2630: CALL_OW 72
2634: ST_TO_ADDR
// AddComBuild ( tmp , b_lab , 116 , 55 , 4 ) ;
2635: LD_VAR 0 2
2639: PPUSH
2640: LD_INT 6
2642: PPUSH
2643: LD_INT 116
2645: PPUSH
2646: LD_INT 55
2648: PPUSH
2649: LD_INT 4
2651: PPUSH
2652: CALL_OW 205
// AddComBuild ( tmp , b_armoury , 116 , 70 , 5 ) ;
2656: LD_VAR 0 2
2660: PPUSH
2661: LD_INT 4
2663: PPUSH
2664: LD_INT 116
2666: PPUSH
2667: LD_INT 70
2669: PPUSH
2670: LD_INT 5
2672: PPUSH
2673: CALL_OW 205
// AddComBuild ( tmp , b_breastwork , 109 , 50 , 2 ) ;
2677: LD_VAR 0 2
2681: PPUSH
2682: LD_INT 31
2684: PPUSH
2685: LD_INT 109
2687: PPUSH
2688: LD_INT 50
2690: PPUSH
2691: LD_INT 2
2693: PPUSH
2694: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
2698: LD_INT 35
2700: PPUSH
2701: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) ;
2705: LD_INT 22
2707: PUSH
2708: LD_INT 5
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 30
2717: PUSH
2718: LD_INT 4
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 3
2727: PUSH
2728: LD_INT 57
2730: PUSH
2731: EMPTY
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: PPUSH
2743: CALL_OW 69
2747: IFFALSE 2698
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] , [ f_not , [ f_constructed ] ] ] ) [ 1 ] ;
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: LD_INT 22
2756: PUSH
2757: LD_INT 5
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 30
2766: PUSH
2767: LD_INT 4
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 3
2776: PUSH
2777: LD_INT 57
2779: PUSH
2780: EMPTY
2781: LIST
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL_OW 69
2796: PUSH
2797: LD_INT 1
2799: ARRAY
2800: ST_TO_ADDR
// tmp := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ;
2801: LD_ADDR_VAR 0 2
2805: PUSH
2806: LD_EXP 39
2810: PPUSH
2811: LD_INT 25
2813: PUSH
2814: LD_INT 1
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PPUSH
2821: CALL_OW 72
2825: ST_TO_ADDR
// ComEnterUnit ( tmp , arm ) ;
2826: LD_VAR 0 2
2830: PPUSH
2831: LD_VAR 0 3
2835: PPUSH
2836: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2840: LD_INT 35
2842: PPUSH
2843: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] , [ f_not , [ f_constructed ] ] ] ) >= 2 ;
2847: LD_INT 22
2849: PUSH
2850: LD_INT 5
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 30
2859: PUSH
2860: LD_INT 31
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 3
2869: PUSH
2870: LD_INT 57
2872: PUSH
2873: EMPTY
2874: LIST
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 69
2889: PUSH
2890: LD_INT 2
2892: GREATEREQUAL
2893: IFFALSE 2840
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: LD_EXP 39
2904: PPUSH
2905: LD_INT 25
2907: PUSH
2908: LD_INT 2
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: PPUSH
2915: CALL_OW 72
2919: ST_TO_ADDR
// ComEnterUnit ( tmp [ 1 ] , arDepot ) ;
2920: LD_VAR 0 2
2924: PUSH
2925: LD_INT 1
2927: ARRAY
2928: PPUSH
2929: LD_INT 5
2931: PPUSH
2932: CALL_OW 120
// ComEnterUnit ( [ tmp [ 2 ] , tmp [ 3 ] ] , arm ) ;
2936: LD_VAR 0 2
2940: PUSH
2941: LD_INT 2
2943: ARRAY
2944: PUSH
2945: LD_VAR 0 2
2949: PUSH
2950: LD_INT 3
2952: ARRAY
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: PPUSH
2958: LD_VAR 0 3
2962: PPUSH
2963: CALL_OW 120
// AddComChangeProfession ( [ tmp [ 2 ] , tmp [ 3 ] ] , class_soldier ) ;
2967: LD_VAR 0 2
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PUSH
2976: LD_VAR 0 2
2980: PUSH
2981: LD_INT 3
2983: ARRAY
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PPUSH
2989: LD_INT 1
2991: PPUSH
2992: CALL_OW 183
// AddComExitBuilding ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
2996: LD_VAR 0 2
3000: PUSH
3001: LD_INT 2
3003: ARRAY
3004: PUSH
3005: LD_VAR 0 2
3009: PUSH
3010: LD_INT 3
3012: ARRAY
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 182
// bun := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_breastwork ] ] ) ;
3022: LD_ADDR_VAR 0 4
3026: PUSH
3027: LD_INT 22
3029: PUSH
3030: LD_INT 5
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 30
3039: PUSH
3040: LD_INT 31
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// for i := 1 to 2 do
3056: LD_ADDR_VAR 0 1
3060: PUSH
3061: DOUBLE
3062: LD_INT 1
3064: DEC
3065: ST_TO_ADDR
3066: LD_INT 2
3068: PUSH
3069: FOR_TO
3070: IFFALSE 3104
// AddComEnterUnit ( tmp [ i + 1 ] , bun [ i ] ) ;
3072: LD_VAR 0 2
3076: PUSH
3077: LD_VAR 0 1
3081: PUSH
3082: LD_INT 1
3084: PLUS
3085: ARRAY
3086: PPUSH
3087: LD_VAR 0 4
3091: PUSH
3092: LD_VAR 0 1
3096: ARRAY
3097: PPUSH
3098: CALL_OW 180
3102: GO 3069
3104: POP
3105: POP
// wait ( 1 1$00 ) ;
3106: LD_INT 2100
3108: PPUSH
3109: CALL_OW 67
// farmerBaseReady := true ;
3113: LD_ADDR_EXP 4
3117: PUSH
3118: LD_INT 1
3120: ST_TO_ADDR
// end ;
3121: PPOPN 4
3123: END
// every 0 0$1 trigger farmerBaseReady and not retreatAllowed do var i , eng , sol , arm , damagedBuilding ;
3124: LD_EXP 4
3128: PUSH
3129: LD_EXP 11
3133: NOT
3134: AND
3135: IFFALSE 3657
3137: GO 3139
3139: DISABLE
3140: LD_INT 0
3142: PPUSH
3143: PPUSH
3144: PPUSH
3145: PPUSH
3146: PPUSH
// begin enable ;
3147: ENABLE
// sol := UnitFilter ( farmerSquad , [ f_class , 1 ] ) ^ Farmer ;
3148: LD_ADDR_VAR 0 3
3152: PUSH
3153: LD_EXP 39
3157: PPUSH
3158: LD_INT 25
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 72
3172: PUSH
3173: LD_EXP 36
3177: ADD
3178: ST_TO_ADDR
// eng := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: LD_EXP 39
3188: PPUSH
3189: LD_INT 25
3191: PUSH
3192: LD_INT 2
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 72
3203: ST_TO_ADDR
// damagedBuilding := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
3204: LD_ADDR_VAR 0 5
3208: PUSH
3209: LD_INT 22
3211: PUSH
3212: LD_INT 5
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 21
3221: PUSH
3222: LD_INT 3
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 3
3231: PUSH
3232: LD_INT 24
3234: PUSH
3235: LD_INT 1000
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PPUSH
3251: CALL_OW 69
3255: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_armoury ] ] ) ;
3256: LD_ADDR_VAR 0 4
3260: PUSH
3261: LD_INT 22
3263: PUSH
3264: LD_INT 5
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 30
3273: PUSH
3274: LD_INT 4
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: PPUSH
3285: CALL_OW 69
3289: ST_TO_ADDR
// if IsOk ( arm [ 1 ] ) then
3290: LD_VAR 0 4
3294: PUSH
3295: LD_INT 1
3297: ARRAY
3298: PPUSH
3299: CALL_OW 302
3303: IFFALSE 3367
// for i in sol do
3305: LD_ADDR_VAR 0 1
3309: PUSH
3310: LD_VAR 0 3
3314: PUSH
3315: FOR_IN
3316: IFFALSE 3365
// if GetLives ( i ) < 999 and not IsInUnit ( i ) then
3318: LD_VAR 0 1
3322: PPUSH
3323: CALL_OW 256
3327: PUSH
3328: LD_INT 999
3330: LESS
3331: PUSH
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL_OW 310
3341: NOT
3342: AND
3343: IFFALSE 3363
// ComEnterUnit ( i , arm [ 1 ] ) ;
3345: LD_VAR 0 1
3349: PPUSH
3350: LD_VAR 0 4
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PPUSH
3359: CALL_OW 120
3363: GO 3315
3365: POP
3366: POP
// if not eng and not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) then
3367: LD_VAR 0 2
3371: NOT
3372: PUSH
3373: LD_INT 22
3375: PUSH
3376: LD_INT 1
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: LD_INT 21
3385: PUSH
3386: LD_INT 1
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PPUSH
3397: CALL_OW 69
3401: NOT
3402: AND
3403: IFFALSE 3495
// begin uc_side := 5 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 5
3412: ST_TO_ADDR
// uc_nation := 2 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 2
3420: ST_TO_ADDR
// PrepareHuman ( false , 2 , 2 ) ;
3421: LD_INT 0
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: LD_INT 2
3429: PPUSH
3430: CALL_OW 380
// eng := CreateHuman ;
3434: LD_ADDR_VAR 0 2
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// PlaceUnitXY ( eng , 102 , 8 , false ) ;
3444: LD_VAR 0 2
3448: PPUSH
3449: LD_INT 102
3451: PPUSH
3452: LD_INT 8
3454: PPUSH
3455: LD_INT 0
3457: PPUSH
3458: CALL_OW 48
// ComMoveXY ( eng , 110 , 60 ) ;
3462: LD_VAR 0 2
3466: PPUSH
3467: LD_INT 110
3469: PPUSH
3470: LD_INT 60
3472: PPUSH
3473: CALL_OW 111
// farmerSquad := farmerSquad union eng ;
3477: LD_ADDR_EXP 39
3481: PUSH
3482: LD_EXP 39
3486: PUSH
3487: LD_VAR 0 2
3491: UNION
3492: ST_TO_ADDR
// end else
3493: GO 3657
// begin for i in eng do
3495: LD_ADDR_VAR 0 1
3499: PUSH
3500: LD_VAR 0 2
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3655
// begin if GetResourceArea ( collectFarmerArea , mat_cans ) then
3508: LD_INT 10
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: CALL_OW 287
3518: IFFALSE 3569
// begin if IsInUnit ( i ) then
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL_OW 310
3529: IFFALSE 3540
// ComExitBuilding ( i ) ;
3531: LD_VAR 0 1
3535: PPUSH
3536: CALL_OW 122
// if not IsInArea ( i , collectFarmerArea ) then
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 10
3547: PPUSH
3548: CALL_OW 308
3552: NOT
3553: IFFALSE 3567
// AddComMoveToArea ( i , collectFarmerArea ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 10
3562: PPUSH
3563: CALL_OW 173
// end else
3567: GO 3653
// begin if damagedBuilding then
3569: LD_VAR 0 5
3573: IFFALSE 3617
// begin if IsInUnit ( i ) then
3575: LD_VAR 0 1
3579: PPUSH
3580: CALL_OW 310
3584: IFFALSE 3597
// ComExitBuilding ( i ) else
3586: LD_VAR 0 1
3590: PPUSH
3591: CALL_OW 122
3595: GO 3615
// ComRepairBuilding ( i , damagedBuilding [ 1 ] ) ;
3597: LD_VAR 0 1
3601: PPUSH
3602: LD_VAR 0 5
3606: PUSH
3607: LD_INT 1
3609: ARRAY
3610: PPUSH
3611: CALL_OW 130
// end else
3615: GO 3653
// if not IsInUnit ( i ) and not HasTask ( i ) then
3617: LD_VAR 0 1
3621: PPUSH
3622: CALL_OW 310
3626: NOT
3627: PUSH
3628: LD_VAR 0 1
3632: PPUSH
3633: CALL_OW 314
3637: NOT
3638: AND
3639: IFFALSE 3653
// ComEnterUnit ( i , arDepot ) ;
3641: LD_VAR 0 1
3645: PPUSH
3646: LD_INT 5
3648: PPUSH
3649: CALL_OW 120
// end ; end ;
3653: GO 3505
3655: POP
3656: POP
// end ; end ;
3657: PPOPN 5
3659: END
// export function CargoEvacuation ; begin
3660: LD_INT 0
3662: PPUSH
// wait ( 0 0$20 ) ;
3663: LD_INT 700
3665: PPUSH
3666: CALL_OW 67
// omarCargoCounter := omarCargoCounter - 1 ;
3670: LD_ADDR_EXP 21
3674: PUSH
3675: LD_EXP 21
3679: PUSH
3680: LD_INT 1
3682: MINUS
3683: ST_TO_ADDR
// if omarCargoCounter = 0 then
3684: LD_EXP 21
3688: PUSH
3689: LD_INT 0
3691: EQUAL
3692: IFFALSE 3696
// exit ;
3694: GO 4003
// if omarCargo then
3696: LD_EXP 43
3700: IFFALSE 3711
// RemoveUnit ( omarCargo ) ;
3702: LD_EXP 43
3706: PPUSH
3707: CALL_OW 64
// omarCargo := PrepareCargo ;
3711: LD_ADDR_EXP 43
3715: PUSH
3716: CALL 4008 0 0
3720: ST_TO_ADDR
// SetTag ( omarCargo , 0 ) ;
3721: LD_EXP 43
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL_OW 109
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3733: LD_EXP 43
3737: PPUSH
3738: LD_INT 107
3740: PPUSH
3741: LD_INT 59
3743: PPUSH
3744: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3748: LD_INT 35
3750: PPUSH
3751: CALL_OW 67
// ComMoveXY ( omarCargo , 107 , 59 ) ;
3755: LD_EXP 43
3759: PPUSH
3760: LD_INT 107
3762: PPUSH
3763: LD_INT 59
3765: PPUSH
3766: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3770: LD_EXP 43
3774: PPUSH
3775: CALL_OW 302
3779: NOT
3780: PUSH
3781: LD_EXP 43
3785: PPUSH
3786: CALL_OW 301
3790: OR
3791: IFFALSE 3795
// exit ;
3793: GO 4003
// until IsAt ( omarCargo , 107 , 59 ) or GetDistUnits ( omarCargo , arDepot ) < 6 ;
3795: LD_EXP 43
3799: PPUSH
3800: LD_INT 107
3802: PPUSH
3803: LD_INT 59
3805: PPUSH
3806: CALL_OW 307
3810: PUSH
3811: LD_EXP 43
3815: PPUSH
3816: LD_INT 5
3818: PPUSH
3819: CALL_OW 296
3823: PUSH
3824: LD_INT 6
3826: LESS
3827: OR
3828: IFFALSE 3748
// SetTag ( omarCargo , 1 ) ;
3830: LD_EXP 43
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: CALL_OW 109
// wait ( 0 0$05 ) ;
3842: LD_INT 175
3844: PPUSH
3845: CALL_OW 67
// ComTransport ( omarCargo , arDepot , mat_cans ) ;
3849: LD_EXP 43
3853: PPUSH
3854: LD_INT 5
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL_OW 151
// AddComMoveXY ( omarCargo , 103 , 9 ) ;
3864: LD_EXP 43
3868: PPUSH
3869: LD_INT 103
3871: PPUSH
3872: LD_INT 9
3874: PPUSH
3875: CALL_OW 171
// wait ( 0 0$1 ) ;
3879: LD_INT 35
3881: PPUSH
3882: CALL_OW 67
// SetCargo ( omarCargo , mat_cans , 100 ) ;
3886: LD_EXP 43
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 100
3896: PPUSH
3897: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
3901: LD_INT 35
3903: PPUSH
3904: CALL_OW 67
// ComMoveXY ( omarCargo , 103 , 9 ) ;
3908: LD_EXP 43
3912: PPUSH
3913: LD_INT 103
3915: PPUSH
3916: LD_INT 9
3918: PPUSH
3919: CALL_OW 111
// if not IsOk ( omarCargo ) or IsDead ( omarCargo ) then
3923: LD_EXP 43
3927: PPUSH
3928: CALL_OW 302
3932: NOT
3933: PUSH
3934: LD_EXP 43
3938: PPUSH
3939: CALL_OW 301
3943: OR
3944: IFFALSE 3948
// exit ;
3946: GO 4003
// until ( IsAt ( omarCargo , 103 , 9 ) or IsInArea ( omarCargo , northRoad ) ) and GetTag ( omarCargo ) > 0 ;
3948: LD_EXP 43
3952: PPUSH
3953: LD_INT 103
3955: PPUSH
3956: LD_INT 9
3958: PPUSH
3959: CALL_OW 307
3963: PUSH
3964: LD_EXP 43
3968: PPUSH
3969: LD_INT 3
3971: PPUSH
3972: CALL_OW 308
3976: OR
3977: PUSH
3978: LD_EXP 43
3982: PPUSH
3983: CALL_OW 110
3987: PUSH
3988: LD_INT 0
3990: GREATER
3991: AND
3992: IFFALSE 3901
// RemoveUnit ( omarCargo ) ;
3994: LD_EXP 43
3998: PPUSH
3999: CALL_OW 64
// end ;
4003: LD_VAR 0 1
4007: RET
// export function PrepareCargo ; var un , veh ; begin
4008: LD_INT 0
4010: PPUSH
4011: PPUSH
4012: PPUSH
// veh := PrepareTank ( 5 , 2 , ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
4013: LD_ADDR_VAR 0 3
4017: PUSH
4018: LD_INT 5
4020: PPUSH
4021: LD_INT 2
4023: PPUSH
4024: LD_INT 14
4026: PPUSH
4027: LD_INT 1
4029: PPUSH
4030: LD_INT 1
4032: PPUSH
4033: LD_INT 32
4035: PPUSH
4036: LD_INT 80
4038: PPUSH
4039: CALL 325 0 7
4043: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4044: LD_VAR 0 3
4048: PPUSH
4049: LD_INT 4
4051: PPUSH
4052: CALL_OW 233
// PlaceUnitXY ( veh , 101 , 8 , false ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_INT 101
4063: PPUSH
4064: LD_INT 8
4066: PPUSH
4067: LD_INT 0
4069: PPUSH
4070: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
4074: LD_INT 0
4076: PPUSH
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 2
4082: PPUSH
4083: CALL_OW 380
// un := CreateHuman ;
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: CALL_OW 44
4096: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_VAR 0 3
4106: PPUSH
4107: CALL_OW 52
// result := veh ;
4111: LD_ADDR_VAR 0 1
4115: PUSH
4116: LD_VAR 0 3
4120: ST_TO_ADDR
// end ; end_of_file
4121: LD_VAR 0 1
4125: RET
// export usForces , usCommander , americanBuildList , usAttackers ; export function PrepareAmerican ; var i , un ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
// usForces := [ ] ;
4131: LD_ADDR_EXP 44
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// americanBuildList := [ [ b_lab , 32 , 27 , 1 ] , [ b_armoury , 43 , 24 , 5 ] , [ b_solar_power , 29 , 21 , 0 ] ] ;
4138: LD_ADDR_EXP 46
4142: PUSH
4143: LD_INT 6
4145: PUSH
4146: LD_INT 32
4148: PUSH
4149: LD_INT 27
4151: PUSH
4152: LD_INT 1
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 43
4166: PUSH
4167: LD_INT 24
4169: PUSH
4170: LD_INT 5
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 27
4181: PUSH
4182: LD_INT 29
4184: PUSH
4185: LD_INT 21
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: LIST
4201: ST_TO_ADDR
// SetResourceType ( GetBase ( usDepot ) , mat_cans , [ 150 , 120 , 100 , 80 ] [ Difficulty ] ) ;
4202: LD_INT 11
4204: PPUSH
4205: CALL_OW 274
4209: PPUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 150
4215: PUSH
4216: LD_INT 120
4218: PUSH
4219: LD_INT 100
4221: PUSH
4222: LD_INT 80
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: PUSH
4231: LD_OWVAR 67
4235: ARRAY
4236: PPUSH
4237: CALL_OW 277
// if Difficulty = 1 then
4241: LD_OWVAR 67
4245: PUSH
4246: LD_INT 1
4248: EQUAL
4249: IFFALSE 4258
// RemoveUnit ( hillBun ) ;
4251: LD_INT 14
4253: PPUSH
4254: CALL_OW 64
// uc_side := 1 ;
4258: LD_ADDR_OWVAR 20
4262: PUSH
4263: LD_INT 1
4265: ST_TO_ADDR
// uc_nation := 1 ;
4266: LD_ADDR_OWVAR 21
4270: PUSH
4271: LD_INT 1
4273: ST_TO_ADDR
// hc_gallery :=  ;
4274: LD_ADDR_OWVAR 33
4278: PUSH
4279: LD_STRING 
4281: ST_TO_ADDR
// hc_name :=  ;
4282: LD_ADDR_OWVAR 26
4286: PUSH
4287: LD_STRING 
4289: ST_TO_ADDR
// hc_importance := 0 ;
4290: LD_ADDR_OWVAR 32
4294: PUSH
4295: LD_INT 0
4297: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4298: LD_INT 1
4300: PPUSH
4301: LD_INT 1
4303: PPUSH
4304: LD_INT 3
4306: PPUSH
4307: CALL_OW 380
// usCommander := CreateHuman ;
4311: LD_ADDR_EXP 45
4315: PUSH
4316: CALL_OW 44
4320: ST_TO_ADDR
// PlaceHumanInUnit ( usCommander , usDepot ) ;
4321: LD_EXP 45
4325: PPUSH
4326: LD_INT 11
4328: PPUSH
4329: CALL_OW 52
// if Difficulty > 1 then
4333: LD_OWVAR 67
4337: PUSH
4338: LD_INT 1
4340: GREATER
4341: IFFALSE 4423
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4343: LD_INT 0
4345: PPUSH
4346: LD_INT 1
4348: PPUSH
4349: LD_INT 1
4351: PUSH
4352: LD_INT 2
4354: PUSH
4355: LD_INT 3
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: LIST
4362: PUSH
4363: LD_OWVAR 67
4367: ARRAY
4368: PPUSH
4369: CALL_OW 380
// un := CreateHuman ;
4373: LD_ADDR_VAR 0 3
4377: PUSH
4378: CALL_OW 44
4382: ST_TO_ADDR
// usForces := usForces union un ;
4383: LD_ADDR_EXP 44
4387: PUSH
4388: LD_EXP 44
4392: PUSH
4393: LD_VAR 0 3
4397: UNION
4398: ST_TO_ADDR
// SetDir ( un , 1 ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: LD_INT 1
4406: PPUSH
4407: CALL_OW 233
// PlaceHumanInUnit ( un , hillBun ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 14
4418: PPUSH
4419: CALL_OW 52
// end ; for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4423: LD_ADDR_VAR 0 2
4427: PUSH
4428: DOUBLE
4429: LD_INT 1
4431: DEC
4432: ST_TO_ADDR
4433: LD_INT 2
4435: PUSH
4436: LD_INT 3
4438: PUSH
4439: LD_INT 4
4441: PUSH
4442: LD_INT 4
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_OWVAR 67
4455: ARRAY
4456: PUSH
4457: FOR_TO
4458: IFFALSE 4604
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
4460: LD_INT 0
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: LD_INT 1
4468: PUSH
4469: LD_INT 2
4471: PUSH
4472: LD_INT 3
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: PUSH
4484: LD_OWVAR 67
4488: ARRAY
4489: PPUSH
4490: CALL_OW 380
// un := CreateHuman ;
4494: LD_ADDR_VAR 0 3
4498: PUSH
4499: CALL_OW 44
4503: ST_TO_ADDR
// usForces := usForces union un ;
4504: LD_ADDR_EXP 44
4508: PUSH
4509: LD_EXP 44
4513: PUSH
4514: LD_VAR 0 3
4518: UNION
4519: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4520: LD_VAR 0 3
4524: PPUSH
4525: LD_INT 39
4527: PPUSH
4528: LD_INT 24
4530: PPUSH
4531: LD_INT 4
4533: PPUSH
4534: LD_INT 0
4536: PPUSH
4537: CALL_OW 50
// if i < 3 then
4541: LD_VAR 0 2
4545: PUSH
4546: LD_INT 3
4548: LESS
4549: IFFALSE 4602
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4551: LD_VAR 0 3
4555: PPUSH
4556: LD_INT 22
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 58
4568: PUSH
4569: EMPTY
4570: LIST
4571: PUSH
4572: LD_INT 30
4574: PUSH
4575: LD_INT 31
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: PPUSH
4587: CALL_OW 69
4591: PUSH
4592: LD_VAR 0 2
4596: ARRAY
4597: PPUSH
4598: CALL_OW 120
// end ;
4602: GO 4457
4604: POP
4605: POP
// for i := 1 to 2 do
4606: LD_ADDR_VAR 0 2
4610: PUSH
4611: DOUBLE
4612: LD_INT 1
4614: DEC
4615: ST_TO_ADDR
4616: LD_INT 2
4618: PUSH
4619: FOR_TO
4620: IFFALSE 4684
// begin PrepareHuman ( false , 2 , 2 ) ;
4622: LD_INT 0
4624: PPUSH
4625: LD_INT 2
4627: PPUSH
4628: LD_INT 2
4630: PPUSH
4631: CALL_OW 380
// un := CreateHuman ;
4635: LD_ADDR_VAR 0 3
4639: PUSH
4640: CALL_OW 44
4644: ST_TO_ADDR
// usForces := usForces union un ;
4645: LD_ADDR_EXP 44
4649: PUSH
4650: LD_EXP 44
4654: PUSH
4655: LD_VAR 0 3
4659: UNION
4660: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4661: LD_VAR 0 3
4665: PPUSH
4666: LD_INT 39
4668: PPUSH
4669: LD_INT 24
4671: PPUSH
4672: LD_INT 4
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: CALL_OW 50
// end ;
4682: GO 4619
4684: POP
4685: POP
// PrepareHuman ( false , 4 , 1 ) ;
4686: LD_INT 0
4688: PPUSH
4689: LD_INT 4
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: CALL_OW 380
// un := CreateHuman ;
4699: LD_ADDR_VAR 0 3
4703: PUSH
4704: CALL_OW 44
4708: ST_TO_ADDR
// usForces := usForces union un ;
4709: LD_ADDR_EXP 44
4713: PUSH
4714: LD_EXP 44
4718: PUSH
4719: LD_VAR 0 3
4723: UNION
4724: ST_TO_ADDR
// PlaceUnitXYR ( un , 39 , 24 , 4 , false ) ;
4725: LD_VAR 0 3
4729: PPUSH
4730: LD_INT 39
4732: PPUSH
4733: LD_INT 24
4735: PPUSH
4736: LD_INT 4
4738: PPUSH
4739: LD_INT 0
4741: PPUSH
4742: CALL_OW 50
// end ;
4746: LD_VAR 0 1
4750: RET
// every 0 0$1 trigger usForces and not americanBaseCaptured and not americanStartRun do var i , b , eng , sol , sci ;
4751: LD_EXP 44
4755: PUSH
4756: LD_EXP 6
4760: NOT
4761: AND
4762: PUSH
4763: LD_EXP 14
4767: NOT
4768: AND
4769: IFFALSE 5200
4771: GO 4773
4773: DISABLE
4774: LD_INT 0
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// begin enable ;
4781: ENABLE
// eng := UnitFilter ( usForces , [ f_class , 2 ] ) ;
4782: LD_ADDR_VAR 0 3
4786: PUSH
4787: LD_EXP 44
4791: PPUSH
4792: LD_INT 25
4794: PUSH
4795: LD_INT 2
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PPUSH
4802: CALL_OW 72
4806: ST_TO_ADDR
// sol := UnitFilter ( usForces , [ f_class , 1 ] ) ;
4807: LD_ADDR_VAR 0 4
4811: PUSH
4812: LD_EXP 44
4816: PPUSH
4817: LD_INT 25
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: CALL_OW 72
4831: ST_TO_ADDR
// sci := UnitFilter ( usForces , [ f_class , 4 ] ) ;
4832: LD_ADDR_VAR 0 5
4836: PUSH
4837: LD_EXP 44
4841: PPUSH
4842: LD_INT 25
4844: PUSH
4845: LD_INT 4
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 72
4856: ST_TO_ADDR
// if FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) = 1 then
4857: LD_INT 7
4859: PPUSH
4860: LD_INT 22
4862: PUSH
4863: LD_INT 2
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PPUSH
4870: CALL_OW 70
4874: PUSH
4875: LD_INT 1
4877: EQUAL
4878: IFFALSE 4954
// for i in sol do
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_VAR 0 4
4889: PUSH
4890: FOR_IN
4891: IFFALSE 4952
// if not IsInUnit ( i ) or not GetBType ( IsInUnit ( i ) ) = b_armoury then
4893: LD_VAR 0 1
4897: PPUSH
4898: CALL_OW 310
4902: NOT
4903: PUSH
4904: LD_VAR 0 1
4908: PPUSH
4909: CALL_OW 310
4913: PPUSH
4914: CALL_OW 266
4918: PUSH
4919: LD_INT 4
4921: EQUAL
4922: NOT
4923: OR
4924: IFFALSE 4950
// begin ComExitBuilding ( i ) ;
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 122
// AddComAgressiveMove ( i , 37 , 23 ) ;
4935: LD_VAR 0 1
4939: PPUSH
4940: LD_INT 37
4942: PPUSH
4943: LD_INT 23
4945: PPUSH
4946: CALL_OW 174
// end ;
4950: GO 4890
4952: POP
4953: POP
// if eng then
4954: LD_VAR 0 3
4958: IFFALSE 5200
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , americanBaseArea ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: LD_INT 22
4967: PUSH
4968: LD_INT 1
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PUSH
4975: LD_INT 95
4977: PUSH
4978: LD_INT 7
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PUSH
4985: LD_INT 21
4987: PUSH
4988: LD_INT 3
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 3
4997: PUSH
4998: LD_INT 24
5000: PUSH
5001: LD_INT 1000
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: ST_TO_ADDR
// if b then
5023: LD_VAR 0 2
5027: IFFALSE 5058
// begin ComExitBuilding ( eng ) ;
5029: LD_VAR 0 3
5033: PPUSH
5034: CALL_OW 122
// AddComRepairBuilding ( eng , b [ 1 ] ) ;
5038: LD_VAR 0 3
5042: PPUSH
5043: LD_VAR 0 2
5047: PUSH
5048: LD_INT 1
5050: ARRAY
5051: PPUSH
5052: CALL_OW 190
// end else
5056: GO 5200
// begin for i in eng do
5058: LD_ADDR_VAR 0 1
5062: PUSH
5063: LD_VAR 0 3
5067: PUSH
5068: FOR_IN
5069: IFFALSE 5198
// if not HasTask ( i ) then
5071: LD_VAR 0 1
5075: PPUSH
5076: CALL_OW 314
5080: NOT
5081: IFFALSE 5196
// begin if americanBuildList then
5083: LD_EXP 46
5087: IFFALSE 5172
// begin if IsInUnit ( i ) then
5089: LD_VAR 0 1
5093: PPUSH
5094: CALL_OW 310
5098: IFFALSE 5109
// ComExitBuilding ( i ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: CALL_OW 122
// AddComBuild ( i , americanBuildList [ 1 ] [ 1 ] , americanBuildList [ 1 ] [ 2 ] , americanBuildList [ 1 ] [ 3 ] , americanBuildList [ 1 ] [ 4 ] ) ;
5109: LD_VAR 0 1
5113: PPUSH
5114: LD_EXP 46
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PPUSH
5127: LD_EXP 46
5131: PUSH
5132: LD_INT 1
5134: ARRAY
5135: PUSH
5136: LD_INT 2
5138: ARRAY
5139: PPUSH
5140: LD_EXP 46
5144: PUSH
5145: LD_INT 1
5147: ARRAY
5148: PUSH
5149: LD_INT 3
5151: ARRAY
5152: PPUSH
5153: LD_EXP 46
5157: PUSH
5158: LD_INT 1
5160: ARRAY
5161: PUSH
5162: LD_INT 4
5164: ARRAY
5165: PPUSH
5166: CALL_OW 205
// end else
5170: GO 5196
// if not IsInUnit ( i ) then
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 310
5181: NOT
5182: IFFALSE 5196
// ComEnterUnit ( i , usDepot ) ;
5184: LD_VAR 0 1
5188: PPUSH
5189: LD_INT 11
5191: PPUSH
5192: CALL_OW 120
// end ;
5196: GO 5068
5198: POP
5199: POP
// end ; end ; end ;
5200: PPOPN 5
5202: END
// export function AmLabResearch ( lab ) ; var tech , i ; begin
5203: LD_INT 0
5205: PPUSH
5206: PPUSH
5207: PPUSH
// tech := [ tech_SolPow , tech_SolEng , tech_Tech1 , tech_BasicTools ] ;
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_INT 35
5215: PUSH
5216: LD_INT 45
5218: PUSH
5219: LD_INT 48
5221: PUSH
5222: LD_EXP 58
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: ST_TO_ADDR
// for i in tech do
5233: LD_ADDR_VAR 0 4
5237: PUSH
5238: LD_VAR 0 3
5242: PUSH
5243: FOR_IN
5244: IFFALSE 5262
// AddComResearch ( lab , i ) ;
5246: LD_VAR 0 1
5250: PPUSH
5251: LD_VAR 0 4
5255: PPUSH
5256: CALL_OW 184
5260: GO 5243
5262: POP
5263: POP
// end ;
5264: LD_VAR 0 2
5268: RET
// every 6 6$00 + 2 2$00 trigger allowConvoys and convoyCounter <= maxConvoys do
5269: LD_EXP 12
5273: PUSH
5274: LD_EXP 23
5278: PUSH
5279: LD_EXP 27
5283: LESSEQUAL
5284: AND
5285: IFFALSE 5310
5287: GO 5289
5289: DISABLE
// begin enable ;
5290: ENABLE
// wait ( rand ( 0 0$1 , 0 0$59 ) ) ;
5291: LD_INT 35
5293: PPUSH
5294: LD_INT 2065
5296: PPUSH
5297: CALL_OW 12
5301: PPUSH
5302: CALL_OW 67
// SendConvoy ;
5306: CALL 5416 0 0
// end ;
5310: END
// every 0 0$1 trigger americanBaseCaptured and firstConvoyDestroyed do
5311: LD_EXP 6
5315: PUSH
5316: LD_EXP 18
5320: AND
5321: IFFALSE 5415
5323: GO 5325
5325: DISABLE
// begin if americanHasEscaped then
5326: LD_EXP 8
5330: IFFALSE 5341
// wait ( 3 3$20 ) else
5332: LD_INT 7000
5334: PPUSH
5335: CALL_OW 67
5339: GO 5348
// wait ( 6 6$40 ) ;
5341: LD_INT 14000
5343: PPUSH
5344: CALL_OW 67
// SendAttack ;
5348: CALL 6163 0 0
// repeat wait ( [ 6 6$40 , 5 5$40 , 4 4$40 , 4 4$00 ] [ Difficulty ] ) ;
5352: LD_INT 14000
5354: PUSH
5355: LD_INT 11900
5357: PUSH
5358: LD_INT 9800
5360: PUSH
5361: LD_INT 8400
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: LD_OWVAR 67
5374: ARRAY
5375: PPUSH
5376: CALL_OW 67
// SendAttack ;
5380: CALL 6163 0 0
// until attackWave < [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5384: LD_EXP 19
5388: PUSH
5389: LD_INT 6
5391: PUSH
5392: LD_INT 7
5394: PUSH
5395: LD_INT 8
5397: PUSH
5398: LD_INT 9
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_OWVAR 67
5411: ARRAY
5412: LESS
5413: IFFALSE 5352
// end ;
5415: END
// export function SendConvoy ; var un , veh , road , tmp , points , i , finalArea ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
5421: PPUSH
5422: PPUSH
5423: PPUSH
5424: PPUSH
5425: PPUSH
// road := rand ( 1 , 2 ) ;
5426: LD_ADDR_VAR 0 4
5430: PUSH
5431: LD_INT 1
5433: PPUSH
5434: LD_INT 2
5436: PPUSH
5437: CALL_OW 12
5441: ST_TO_ADDR
// finalArea := [ northRoad , westRoad ] [ road ] ;
5442: LD_ADDR_VAR 0 8
5446: PUSH
5447: LD_INT 3
5449: PUSH
5450: LD_INT 8
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PUSH
5457: LD_VAR 0 4
5461: ARRAY
5462: ST_TO_ADDR
// tmp := [ [ 35 , 66 , 1 ] , [ 101 , 8 , 4 ] ] ;
5463: LD_ADDR_VAR 0 5
5467: PUSH
5468: LD_INT 35
5470: PUSH
5471: LD_INT 66
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 101
5484: PUSH
5485: LD_INT 8
5487: PUSH
5488: LD_INT 4
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: ST_TO_ADDR
// points := [ [ 34 , 67 ] , [ 38 , 62 ] , [ 43 , 54 ] , [ 57 , 57 ] , [ 77 , 71 ] , [ 86 , 60 ] , [ 89 , 35 ] , [ 93 , 17 ] , [ 97 , 10 ] , [ 103 , 9 ] ] ;
5500: LD_ADDR_VAR 0 6
5504: PUSH
5505: LD_INT 34
5507: PUSH
5508: LD_INT 67
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PUSH
5515: LD_INT 38
5517: PUSH
5518: LD_INT 62
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: LD_INT 43
5527: PUSH
5528: LD_INT 54
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 57
5537: PUSH
5538: LD_INT 57
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 77
5547: PUSH
5548: LD_INT 71
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 86
5557: PUSH
5558: LD_INT 60
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 89
5567: PUSH
5568: LD_INT 35
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 93
5577: PUSH
5578: LD_INT 17
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: LD_INT 97
5587: PUSH
5588: LD_INT 10
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 103
5597: PUSH
5598: LD_INT 9
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: ST_TO_ADDR
// if road = 2 then
5617: LD_VAR 0 4
5621: PUSH
5622: LD_INT 2
5624: EQUAL
5625: IFFALSE 5642
// points := ReverseArray ( points ) ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_VAR 0 6
5636: PPUSH
5637: CALL 989 0 1
5641: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 80 ) ;
5642: LD_INT 4
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: LD_INT 2
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 12
5659: PPUSH
5660: LD_INT 80
5662: PPUSH
5663: CALL 325 0 7
// veh := CreateVehicle ;
5667: LD_ADDR_VAR 0 3
5671: PUSH
5672: CALL_OW 45
5676: ST_TO_ADDR
// SetDir ( veh , tmp [ road ] [ 3 ] ) ;
5677: LD_VAR 0 3
5681: PPUSH
5682: LD_VAR 0 5
5686: PUSH
5687: LD_VAR 0 4
5691: ARRAY
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PPUSH
5697: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ road ] [ 1 ] , tmp [ road ] [ 2 ] , false ) ;
5701: LD_VAR 0 3
5705: PPUSH
5706: LD_VAR 0 5
5710: PUSH
5711: LD_VAR 0 4
5715: ARRAY
5716: PUSH
5717: LD_INT 1
5719: ARRAY
5720: PPUSH
5721: LD_VAR 0 5
5725: PUSH
5726: LD_VAR 0 4
5730: ARRAY
5731: PUSH
5732: LD_INT 2
5734: ARRAY
5735: PPUSH
5736: LD_INT 0
5738: PPUSH
5739: CALL_OW 48
// PrepareHuman ( false , 1 , Difficulty ) ;
5743: LD_INT 0
5745: PPUSH
5746: LD_INT 1
5748: PPUSH
5749: LD_OWVAR 67
5753: PPUSH
5754: CALL_OW 380
// un := CreateHuman ;
5758: LD_ADDR_VAR 0 2
5762: PUSH
5763: CALL_OW 44
5767: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5768: LD_VAR 0 2
5772: PPUSH
5773: LD_VAR 0 3
5777: PPUSH
5778: CALL_OW 52
// if ( Prob ( [ 60 , 56 , 52 , 48 ] [ Difficulty ] ) + tick mod 30 ) or convoyCounter < 4 then
5782: LD_INT 60
5784: PUSH
5785: LD_INT 56
5787: PUSH
5788: LD_INT 52
5790: PUSH
5791: LD_INT 48
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: PUSH
5800: LD_OWVAR 67
5804: ARRAY
5805: PPUSH
5806: CALL_OW 13
5810: PUSH
5811: LD_OWVAR 1
5815: PUSH
5816: LD_INT 30
5818: MOD
5819: PLUS
5820: PUSH
5821: LD_EXP 23
5825: PUSH
5826: LD_INT 4
5828: LESS
5829: OR
5830: IFFALSE 5847
// SetCargo ( veh , mat_cans , 100 ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: LD_INT 100
5842: PPUSH
5843: CALL_OW 290
// for i := 2 to points do
5847: LD_ADDR_VAR 0 7
5851: PUSH
5852: DOUBLE
5853: LD_INT 2
5855: DEC
5856: ST_TO_ADDR
5857: LD_VAR 0 6
5861: PUSH
5862: FOR_TO
5863: IFFALSE 5906
// AddComMoveXY ( veh , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
5865: LD_VAR 0 3
5869: PPUSH
5870: LD_VAR 0 6
5874: PUSH
5875: LD_VAR 0 7
5879: ARRAY
5880: PUSH
5881: LD_INT 1
5883: ARRAY
5884: PPUSH
5885: LD_VAR 0 6
5889: PUSH
5890: LD_VAR 0 7
5894: ARRAY
5895: PUSH
5896: LD_INT 2
5898: ARRAY
5899: PPUSH
5900: CALL_OW 171
5904: GO 5862
5906: POP
5907: POP
// convoyCounter := convoyCounter + 1 ;
5908: LD_ADDR_EXP 23
5912: PUSH
5913: LD_EXP 23
5917: PUSH
5918: LD_INT 1
5920: PLUS
5921: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5922: LD_INT 35
5924: PPUSH
5925: CALL_OW 67
// if not HasTask ( veh ) and IsOk ( veh ) then
5929: LD_VAR 0 3
5933: PPUSH
5934: CALL_OW 314
5938: NOT
5939: PUSH
5940: LD_VAR 0 3
5944: PPUSH
5945: CALL_OW 302
5949: AND
5950: IFFALSE 5991
// ComMoveXY ( veh , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
5952: LD_VAR 0 3
5956: PPUSH
5957: LD_VAR 0 6
5961: PUSH
5962: LD_VAR 0 6
5966: ARRAY
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_VAR 0 6
5976: PUSH
5977: LD_VAR 0 6
5981: ARRAY
5982: PUSH
5983: LD_INT 2
5985: ARRAY
5986: PPUSH
5987: CALL_OW 111
// if not IsInUnit ( un ) then
5991: LD_VAR 0 2
5995: PPUSH
5996: CALL_OW 310
6000: NOT
6001: IFFALSE 6042
// ComMoveXY ( un , points [ points ] [ 1 ] , points [ points ] [ 2 ] ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_VAR 0 6
6012: PUSH
6013: LD_VAR 0 6
6017: ARRAY
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PPUSH
6023: LD_VAR 0 6
6027: PUSH
6028: LD_VAR 0 6
6032: ARRAY
6033: PUSH
6034: LD_INT 2
6036: ARRAY
6037: PPUSH
6038: CALL_OW 111
// until IsInArea ( veh , finalArea ) or IsInArea ( un , finalArea ) ;
6042: LD_VAR 0 3
6046: PPUSH
6047: LD_VAR 0 8
6051: PPUSH
6052: CALL_OW 308
6056: PUSH
6057: LD_VAR 0 2
6061: PPUSH
6062: LD_VAR 0 8
6066: PPUSH
6067: CALL_OW 308
6071: OR
6072: IFFALSE 5922
// if IsOk ( un ) and not IsOk ( veh ) and IsInArea ( un , finalArea ) then
6074: LD_VAR 0 2
6078: PPUSH
6079: CALL_OW 302
6083: PUSH
6084: LD_VAR 0 3
6088: PPUSH
6089: CALL_OW 302
6093: NOT
6094: AND
6095: PUSH
6096: LD_VAR 0 2
6100: PPUSH
6101: LD_VAR 0 8
6105: PPUSH
6106: CALL_OW 308
6110: AND
6111: IFFALSE 6122
// RemoveUnit ( un ) ;
6113: LD_VAR 0 2
6117: PPUSH
6118: CALL_OW 64
// if IsInArea ( veh , finalArea ) and IsOk ( veh ) then
6122: LD_VAR 0 3
6126: PPUSH
6127: LD_VAR 0 8
6131: PPUSH
6132: CALL_OW 308
6136: PUSH
6137: LD_VAR 0 3
6141: PPUSH
6142: CALL_OW 302
6146: AND
6147: IFFALSE 6158
// RemoveUnit ( veh ) ;
6149: LD_VAR 0 3
6153: PPUSH
6154: CALL_OW 64
// end ;
6158: LD_VAR 0 1
6162: RET
// export function SendAttack ; var un , veh , i ; begin
6163: LD_INT 0
6165: PPUSH
6166: PPUSH
6167: PPUSH
6168: PPUSH
// if ingame_video then
6169: LD_OWVAR 52
6173: IFFALSE 6196
// begin repeat wait ( 0 0$1 ) ;
6175: LD_INT 35
6177: PPUSH
6178: CALL_OW 67
// until not ingame_video ;
6182: LD_OWVAR 52
6186: NOT
6187: IFFALSE 6175
// wait ( 0 0$5 ) ;
6189: LD_INT 175
6191: PPUSH
6192: CALL_OW 67
// end ; IncomingAttack ;
6196: CALL 15155 0 0
// wait ( rand ( 1 1$0 , 1 1$40 ) ) ;
6200: LD_INT 2100
6202: PPUSH
6203: LD_INT 3500
6205: PPUSH
6206: CALL_OW 12
6210: PPUSH
6211: CALL_OW 67
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + attackWave div 3 do
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: DOUBLE
6221: LD_INT 1
6223: DEC
6224: ST_TO_ADDR
6225: LD_INT 3
6227: PUSH
6228: LD_INT 4
6230: PUSH
6231: LD_INT 4
6233: PUSH
6234: LD_INT 5
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: PUSH
6243: LD_OWVAR 67
6247: ARRAY
6248: PUSH
6249: LD_EXP 19
6253: PUSH
6254: LD_INT 3
6256: DIV
6257: PLUS
6258: PUSH
6259: FOR_TO
6260: IFFALSE 6376
// begin uc_side := 1 ;
6262: LD_ADDR_OWVAR 20
6266: PUSH
6267: LD_INT 1
6269: ST_TO_ADDR
// uc_nation := 1 ;
6270: LD_ADDR_OWVAR 21
6274: PUSH
6275: LD_INT 1
6277: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
6278: LD_INT 0
6280: PPUSH
6281: LD_INT 1
6283: PPUSH
6284: LD_INT 2
6286: PUSH
6287: LD_INT 3
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: PUSH
6302: LD_OWVAR 67
6306: ARRAY
6307: PPUSH
6308: CALL_OW 380
// un := CreateHuman ;
6312: LD_ADDR_VAR 0 2
6316: PUSH
6317: CALL_OW 44
6321: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6322: LD_VAR 0 2
6326: PPUSH
6327: LD_INT 37
6329: PPUSH
6330: LD_INT 70
6332: PPUSH
6333: LD_INT 3
6335: PPUSH
6336: LD_INT 0
6338: PPUSH
6339: CALL_OW 50
// usAttackers := usAttackers union un ;
6343: LD_ADDR_EXP 47
6347: PUSH
6348: LD_EXP 47
6352: PUSH
6353: LD_VAR 0 2
6357: UNION
6358: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6359: LD_VAR 0 2
6363: PPUSH
6364: LD_INT 40
6366: PPUSH
6367: LD_INT 65
6369: PPUSH
6370: CALL_OW 111
// end ;
6374: GO 6259
6376: POP
6377: POP
// uc_side := 1 ;
6378: LD_ADDR_OWVAR 20
6382: PUSH
6383: LD_INT 1
6385: ST_TO_ADDR
// uc_nation := 1 ;
6386: LD_ADDR_OWVAR 21
6390: PUSH
6391: LD_INT 1
6393: ST_TO_ADDR
// PrepareHuman ( false , 4 , 2 ) ;
6394: LD_INT 0
6396: PPUSH
6397: LD_INT 4
6399: PPUSH
6400: LD_INT 2
6402: PPUSH
6403: CALL_OW 380
// un := CreateHuman ;
6407: LD_ADDR_VAR 0 2
6411: PUSH
6412: CALL_OW 44
6416: ST_TO_ADDR
// PlaceUnitXYR ( un , 37 , 70 , 3 , false ) ;
6417: LD_VAR 0 2
6421: PPUSH
6422: LD_INT 37
6424: PPUSH
6425: LD_INT 70
6427: PPUSH
6428: LD_INT 3
6430: PPUSH
6431: LD_INT 0
6433: PPUSH
6434: CALL_OW 50
// usAttackers := usAttackers union un ;
6438: LD_ADDR_EXP 47
6442: PUSH
6443: LD_EXP 47
6447: PUSH
6448: LD_VAR 0 2
6452: UNION
6453: ST_TO_ADDR
// ComMoveXY ( un , 40 , 65 ) ;
6454: LD_VAR 0 2
6458: PPUSH
6459: LD_INT 40
6461: PPUSH
6462: LD_INT 65
6464: PPUSH
6465: CALL_OW 111
// for i := 1 to Difficulty + attackWave div 4 do
6469: LD_ADDR_VAR 0 4
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_OWVAR 67
6483: PUSH
6484: LD_EXP 19
6488: PUSH
6489: LD_INT 4
6491: DIV
6492: PLUS
6493: PUSH
6494: FOR_TO
6495: IFFALSE 6668
// begin veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , [ us_gatling_gun , us_light_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] , 90 ) ;
6497: LD_ADDR_VAR 0 3
6501: PUSH
6502: LD_INT 1
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: LD_INT 2
6510: PPUSH
6511: LD_INT 1
6513: PPUSH
6514: LD_INT 1
6516: PPUSH
6517: LD_INT 4
6519: PUSH
6520: LD_INT 3
6522: PUSH
6523: LD_INT 2
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_INT 3
6536: PPUSH
6537: CALL_OW 12
6541: ARRAY
6542: PPUSH
6543: LD_INT 90
6545: PPUSH
6546: CALL 325 0 7
6550: ST_TO_ADDR
// PlaceUnitXY ( veh , 35 , 65 , false ) ;
6551: LD_VAR 0 3
6555: PPUSH
6556: LD_INT 35
6558: PPUSH
6559: LD_INT 65
6561: PPUSH
6562: LD_INT 0
6564: PPUSH
6565: CALL_OW 48
// PrepareHuman ( false , 3 , Difficulty + 1 ) ;
6569: LD_INT 0
6571: PPUSH
6572: LD_INT 3
6574: PPUSH
6575: LD_OWVAR 67
6579: PUSH
6580: LD_INT 1
6582: PLUS
6583: PPUSH
6584: CALL_OW 380
// un := CreateHuman ;
6588: LD_ADDR_VAR 0 2
6592: PUSH
6593: CALL_OW 44
6597: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6598: LD_VAR 0 2
6602: PPUSH
6603: LD_VAR 0 3
6607: PPUSH
6608: CALL_OW 52
// usAttackers := usAttackers union un ;
6612: LD_ADDR_EXP 47
6616: PUSH
6617: LD_EXP 47
6621: PUSH
6622: LD_VAR 0 2
6626: UNION
6627: ST_TO_ADDR
// ComMoveXY ( veh , 39 , 60 ) ;
6628: LD_VAR 0 3
6632: PPUSH
6633: LD_INT 39
6635: PPUSH
6636: LD_INT 60
6638: PPUSH
6639: CALL_OW 111
// wait ( 0 0$3 ) ;
6643: LD_INT 105
6645: PPUSH
6646: CALL_OW 67
// usAttackers := usAttackers union veh ;
6650: LD_ADDR_EXP 47
6654: PUSH
6655: LD_EXP 47
6659: PUSH
6660: LD_VAR 0 3
6664: UNION
6665: ST_TO_ADDR
// end ;
6666: GO 6494
6668: POP
6669: POP
// attackWave := attackWave + 1 ;
6670: LD_ADDR_EXP 19
6674: PUSH
6675: LD_EXP 19
6679: PUSH
6680: LD_INT 1
6682: PLUS
6683: ST_TO_ADDR
// RaiseSailEvent ( eventAttack ) ;
6684: LD_EXP 24
6688: PPUSH
6689: CALL_OW 427
// end ;
6693: LD_VAR 0 1
6697: RET
// export function AmericanAttack ; var i , j , tag , strategy , attackFormula , sol , sci , mech , tanks , veh ; begin
6698: LD_INT 0
6700: PPUSH
6701: PPUSH
6702: PPUSH
6703: PPUSH
6704: PPUSH
6705: PPUSH
6706: PPUSH
6707: PPUSH
6708: PPUSH
6709: PPUSH
6710: PPUSH
// if retreatAllowed then
6711: LD_EXP 11
6715: IFFALSE 6727
// strategy := 2 else
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: LD_INT 2
6724: ST_TO_ADDR
6725: GO 6743
// strategy := rand ( 0 , 2 ) ;
6727: LD_ADDR_VAR 0 5
6731: PUSH
6732: LD_INT 0
6734: PPUSH
6735: LD_INT 2
6737: PPUSH
6738: CALL_OW 12
6742: ST_TO_ADDR
// attackFormula := [ ] ;
6743: LD_ADDR_VAR 0 6
6747: PUSH
6748: EMPTY
6749: ST_TO_ADDR
// case strategy of 0 :
6750: LD_VAR 0 5
6754: PUSH
6755: LD_INT 0
6757: DOUBLE
6758: EQUAL
6759: IFTRUE 6763
6761: GO 7093
6763: POP
// begin if not FilterUnitsInArea ( southZone , [ [ f_side , 2 ] , [ f_btype , b_armoury ] ] ) then
6764: LD_INT 11
6766: PPUSH
6767: LD_INT 22
6769: PUSH
6770: LD_INT 2
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 30
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 70
6795: NOT
6796: IFFALSE 6868
// attackFormula := [ [ [ 41 , 34 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6798: LD_ADDR_VAR 0 6
6802: PUSH
6803: LD_INT 41
6805: PUSH
6806: LD_INT 34
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: EMPTY
6814: LIST
6815: PUSH
6816: LD_INT 53
6818: PUSH
6819: LD_INT 62
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 37
6828: PUSH
6829: LD_INT 63
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 44
6838: PUSH
6839: LD_INT 45
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 37
6848: PUSH
6849: LD_INT 28
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: ST_TO_ADDR
6866: GO 7091
// if not FilterUnitsInArea ( southForestZone , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
6868: LD_INT 12
6870: PPUSH
6871: LD_INT 22
6873: PUSH
6874: LD_INT 2
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 2
6883: PUSH
6884: LD_INT 30
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 30
6896: PUSH
6897: LD_INT 31
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 30
6906: PUSH
6907: LD_INT 32
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 70
6928: NOT
6929: IFFALSE 7012
// attackFormula := [ [ [ 27 , 42 ] , [ 27 , 32 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] else
6931: LD_ADDR_VAR 0 6
6935: PUSH
6936: LD_INT 27
6938: PUSH
6939: LD_INT 42
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 27
6948: PUSH
6949: LD_INT 32
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 53
6962: PUSH
6963: LD_INT 62
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 37
6972: PUSH
6973: LD_INT 63
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 44
6982: PUSH
6983: LD_INT 45
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 37
6992: PUSH
6993: LD_INT 28
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: ST_TO_ADDR
7010: GO 7091
// attackFormula := [ [ [ 71 , 67 ] , [ 54 , 35 ] ] , [ 63 , 40 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ;
7012: LD_ADDR_VAR 0 6
7016: PUSH
7017: LD_INT 71
7019: PUSH
7020: LD_INT 67
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 54
7029: PUSH
7030: LD_INT 35
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 63
7043: PUSH
7044: LD_INT 40
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: LD_INT 37
7053: PUSH
7054: LD_INT 63
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 44
7063: PUSH
7064: LD_INT 45
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 37
7073: PUSH
7074: LD_INT 28
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: ST_TO_ADDR
// end ; 1 :
7091: GO 7296
7093: LD_INT 1
7095: DOUBLE
7096: EQUAL
7097: IFTRUE 7101
7099: GO 7205
7101: POP
// attackFormula := [ [ [ 71 , 67 ] , [ 82 , 23 ] , [ 53 , 7 ] , [ 43 , 10 ] ] , [ 53 , 62 ] , [ 37 , 63 ] , [ [ 44 , 45 ] , [ 37 , 28 ] ] ] ; 2 :
7102: LD_ADDR_VAR 0 6
7106: PUSH
7107: LD_INT 71
7109: PUSH
7110: LD_INT 67
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 82
7119: PUSH
7120: LD_INT 23
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: LD_INT 53
7129: PUSH
7130: LD_INT 7
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 43
7139: PUSH
7140: LD_INT 10
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: PUSH
7153: LD_INT 53
7155: PUSH
7156: LD_INT 62
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PUSH
7163: LD_INT 37
7165: PUSH
7166: LD_INT 63
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: LD_INT 44
7175: PUSH
7176: LD_INT 45
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 37
7185: PUSH
7186: LD_INT 28
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: ST_TO_ADDR
7203: GO 7296
7205: LD_INT 2
7207: DOUBLE
7208: EQUAL
7209: IFTRUE 7213
7211: GO 7295
7213: POP
// attackFormula := [ [ [ 90 , 59 ] , [ 108 , 64 ] ] , [ 82 , 75 ] , [ 73 , 67 ] , [ [ 101 , 65 ] , [ 108 , 62 ] ] ] ; end ;
7214: LD_ADDR_VAR 0 6
7218: PUSH
7219: LD_INT 90
7221: PUSH
7222: LD_INT 59
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 108
7231: PUSH
7232: LD_INT 64
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 82
7245: PUSH
7246: LD_INT 75
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 73
7255: PUSH
7256: LD_INT 67
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 101
7265: PUSH
7266: LD_INT 65
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: LD_INT 108
7275: PUSH
7276: LD_INT 62
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: ST_TO_ADDR
7293: GO 7296
7295: POP
// if not attackFormula then
7296: LD_VAR 0 6
7300: NOT
7301: IFFALSE 7305
// exit ;
7303: GO 8983
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7305: LD_ADDR_VAR 0 7
7309: PUSH
7310: LD_EXP 47
7314: PPUSH
7315: LD_INT 25
7317: PUSH
7318: LD_INT 1
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PPUSH
7325: CALL_OW 72
7329: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7330: LD_ADDR_VAR 0 8
7334: PUSH
7335: LD_EXP 47
7339: PPUSH
7340: LD_INT 25
7342: PUSH
7343: LD_INT 4
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PPUSH
7350: CALL_OW 72
7354: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7355: LD_ADDR_VAR 0 9
7359: PUSH
7360: LD_EXP 47
7364: PPUSH
7365: LD_INT 25
7367: PUSH
7368: LD_INT 3
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 72
7379: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7380: LD_ADDR_VAR 0 10
7384: PUSH
7385: LD_EXP 47
7389: PPUSH
7390: LD_INT 21
7392: PUSH
7393: LD_INT 2
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PPUSH
7400: CALL_OW 72
7404: ST_TO_ADDR
// if sci then
7405: LD_VAR 0 8
7409: IFFALSE 7446
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7411: LD_VAR 0 8
7415: PPUSH
7416: LD_VAR 0 6
7420: PUSH
7421: LD_INT 2
7423: ARRAY
7424: PUSH
7425: LD_INT 1
7427: ARRAY
7428: PPUSH
7429: LD_VAR 0 6
7433: PUSH
7434: LD_INT 2
7436: ARRAY
7437: PUSH
7438: LD_INT 2
7440: ARRAY
7441: PPUSH
7442: CALL_OW 111
// repeat wait ( 10 ) ;
7446: LD_INT 10
7448: PPUSH
7449: CALL_OW 67
// sol := UnitFilter ( usAttackers , [ f_class , 1 ] ) ;
7453: LD_ADDR_VAR 0 7
7457: PUSH
7458: LD_EXP 47
7462: PPUSH
7463: LD_INT 25
7465: PUSH
7466: LD_INT 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 72
7477: ST_TO_ADDR
// sci := UnitFilter ( usAttackers , [ f_class , 4 ] ) ;
7478: LD_ADDR_VAR 0 8
7482: PUSH
7483: LD_EXP 47
7487: PPUSH
7488: LD_INT 25
7490: PUSH
7491: LD_INT 4
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PPUSH
7498: CALL_OW 72
7502: ST_TO_ADDR
// mech := UnitFilter ( usAttackers , [ f_class , 3 ] ) ;
7503: LD_ADDR_VAR 0 9
7507: PUSH
7508: LD_EXP 47
7512: PPUSH
7513: LD_INT 25
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PPUSH
7523: CALL_OW 72
7527: ST_TO_ADDR
// tanks := UnitFilter ( usAttackers , [ f_type , unit_vehicle ] ) ;
7528: LD_ADDR_VAR 0 10
7532: PUSH
7533: LD_EXP 47
7537: PPUSH
7538: LD_INT 21
7540: PUSH
7541: LD_INT 2
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 72
7552: ST_TO_ADDR
// if sol then
7553: LD_VAR 0 7
7557: IFFALSE 7978
// begin for i in sol do
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: LD_VAR 0 7
7568: PUSH
7569: FOR_IN
7570: IFFALSE 7976
// begin tag := GetTag ( i ) ;
7572: LD_ADDR_VAR 0 4
7576: PUSH
7577: LD_VAR 0 2
7581: PPUSH
7582: CALL_OW 110
7586: ST_TO_ADDR
// if not tag then
7587: LD_VAR 0 4
7591: NOT
7592: IFFALSE 7701
// begin if GetLives ( i ) = 1000 then
7594: LD_VAR 0 2
7598: PPUSH
7599: CALL_OW 256
7603: PUSH
7604: LD_INT 1000
7606: EQUAL
7607: IFFALSE 7623
// SetTag ( i , 1 ) else
7609: LD_VAR 0 2
7613: PPUSH
7614: LD_INT 1
7616: PPUSH
7617: CALL_OW 109
7621: GO 7699
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
7623: LD_VAR 0 2
7627: PPUSH
7628: LD_VAR 0 6
7632: PUSH
7633: LD_INT 2
7635: ARRAY
7636: PUSH
7637: LD_INT 1
7639: ARRAY
7640: PPUSH
7641: LD_VAR 0 6
7645: PUSH
7646: LD_INT 2
7648: ARRAY
7649: PUSH
7650: LD_INT 2
7652: ARRAY
7653: PPUSH
7654: CALL_OW 297
7658: PUSH
7659: LD_INT 10
7661: GREATER
7662: IFFALSE 7699
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7664: LD_VAR 0 2
7668: PPUSH
7669: LD_VAR 0 6
7673: PUSH
7674: LD_INT 2
7676: ARRAY
7677: PUSH
7678: LD_INT 1
7680: ARRAY
7681: PPUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_INT 2
7689: ARRAY
7690: PUSH
7691: LD_INT 2
7693: ARRAY
7694: PPUSH
7695: CALL_OW 111
// end else
7699: GO 7974
// begin if GetLives ( i ) < 760 then
7701: LD_VAR 0 2
7705: PPUSH
7706: CALL_OW 256
7710: PUSH
7711: LD_INT 760
7713: LESS
7714: IFFALSE 7765
// begin SetTag ( i , 0 ) ;
7716: LD_VAR 0 2
7720: PPUSH
7721: LD_INT 0
7723: PPUSH
7724: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
7728: LD_VAR 0 2
7732: PPUSH
7733: LD_VAR 0 6
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: PUSH
7742: LD_INT 1
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 6
7750: PUSH
7751: LD_INT 2
7753: ARRAY
7754: PUSH
7755: LD_INT 2
7757: ARRAY
7758: PPUSH
7759: CALL_OW 111
// end else
7763: GO 7974
// if tag <= attackFormula [ 1 ] then
7765: LD_VAR 0 4
7769: PUSH
7770: LD_VAR 0 6
7774: PUSH
7775: LD_INT 1
7777: ARRAY
7778: LESSEQUAL
7779: IFFALSE 7940
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
7781: LD_VAR 0 2
7785: PPUSH
7786: LD_VAR 0 6
7790: PUSH
7791: LD_INT 1
7793: ARRAY
7794: PUSH
7795: LD_VAR 0 4
7799: ARRAY
7800: PUSH
7801: LD_INT 1
7803: ARRAY
7804: PPUSH
7805: LD_VAR 0 6
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PUSH
7814: LD_VAR 0 4
7818: ARRAY
7819: PUSH
7820: LD_INT 2
7822: ARRAY
7823: PPUSH
7824: CALL_OW 297
7828: PUSH
7829: LD_INT 6
7831: GREATER
7832: IFFALSE 7883
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
7834: LD_VAR 0 2
7838: PPUSH
7839: LD_VAR 0 6
7843: PUSH
7844: LD_INT 1
7846: ARRAY
7847: PUSH
7848: LD_VAR 0 4
7852: ARRAY
7853: PUSH
7854: LD_INT 1
7856: ARRAY
7857: PPUSH
7858: LD_VAR 0 6
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: PUSH
7867: LD_VAR 0 4
7871: ARRAY
7872: PUSH
7873: LD_INT 2
7875: ARRAY
7876: PPUSH
7877: CALL_OW 114
7881: GO 7938
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
7883: LD_INT 81
7885: PUSH
7886: LD_INT 1
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: LD_INT 91
7895: PUSH
7896: LD_VAR 0 2
7900: PUSH
7901: LD_INT 10
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PPUSH
7913: CALL_OW 69
7917: NOT
7918: IFFALSE 7938
// SetTag ( i , tag + 1 ) ;
7920: LD_VAR 0 2
7924: PPUSH
7925: LD_VAR 0 4
7929: PUSH
7930: LD_INT 1
7932: PLUS
7933: PPUSH
7934: CALL_OW 109
// end else
7938: GO 7974
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
7940: LD_VAR 0 2
7944: PPUSH
7945: LD_INT 81
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PPUSH
7955: CALL_OW 69
7959: PPUSH
7960: LD_VAR 0 2
7964: PPUSH
7965: CALL_OW 74
7969: PPUSH
7970: CALL_OW 115
// end ; end ;
7974: GO 7569
7976: POP
7977: POP
// end ; if sci then
7978: LD_VAR 0 8
7982: IFFALSE 8251
// begin if not sol and not mech then
7984: LD_VAR 0 7
7988: NOT
7989: PUSH
7990: LD_VAR 0 9
7994: NOT
7995: AND
7996: IFFALSE 8048
// begin for i in sci do
7998: LD_ADDR_VAR 0 2
8002: PUSH
8003: LD_VAR 0 8
8007: PUSH
8008: FOR_IN
8009: IFFALSE 8044
// begin usForces := usForces union i ;
8011: LD_ADDR_EXP 44
8015: PUSH
8016: LD_EXP 44
8020: PUSH
8021: LD_VAR 0 2
8025: UNION
8026: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8027: LD_VAR 0 2
8031: PPUSH
8032: LD_INT 34
8034: PPUSH
8035: LD_INT 68
8037: PPUSH
8038: CALL_OW 111
// end ;
8042: GO 8008
8044: POP
8045: POP
// end else
8046: GO 8251
// for i in sci do
8048: LD_ADDR_VAR 0 2
8052: PUSH
8053: LD_VAR 0 8
8057: PUSH
8058: FOR_IN
8059: IFFALSE 8249
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
8061: LD_VAR 0 2
8065: PPUSH
8066: LD_VAR 0 6
8070: PUSH
8071: LD_INT 2
8073: ARRAY
8074: PUSH
8075: LD_INT 1
8077: ARRAY
8078: PPUSH
8079: LD_VAR 0 6
8083: PUSH
8084: LD_INT 2
8086: ARRAY
8087: PUSH
8088: LD_INT 2
8090: ARRAY
8091: PPUSH
8092: CALL_OW 297
8096: PUSH
8097: LD_INT 10
8099: GREATER
8100: IFFALSE 8139
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
8102: LD_VAR 0 2
8106: PPUSH
8107: LD_VAR 0 6
8111: PUSH
8112: LD_INT 2
8114: ARRAY
8115: PUSH
8116: LD_INT 1
8118: ARRAY
8119: PPUSH
8120: LD_VAR 0 6
8124: PUSH
8125: LD_INT 2
8127: ARRAY
8128: PUSH
8129: LD_INT 2
8131: ARRAY
8132: PPUSH
8133: CALL_OW 111
8137: GO 8247
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
8139: LD_VAR 0 7
8143: PPUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 24
8149: PUSH
8150: LD_INT 1000
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 91
8163: PUSH
8164: LD_VAR 0 2
8168: PUSH
8169: LD_INT 10
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PPUSH
8181: CALL_OW 72
8185: IFFALSE 8247
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: LD_VAR 0 7
8196: PPUSH
8197: LD_INT 3
8199: PUSH
8200: LD_INT 24
8202: PUSH
8203: LD_INT 1000
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 91
8216: PUSH
8217: LD_VAR 0 2
8221: PUSH
8222: LD_INT 10
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: CALL_OW 72
8238: PUSH
8239: LD_INT 1
8241: ARRAY
8242: PPUSH
8243: CALL_OW 128
8247: GO 8058
8249: POP
8250: POP
// end ; if mech then
8251: LD_VAR 0 9
8255: IFFALSE 8965
// begin for i in mech do
8257: LD_ADDR_VAR 0 2
8261: PUSH
8262: LD_VAR 0 9
8266: PUSH
8267: FOR_IN
8268: IFFALSE 8963
// begin tag := GetTag ( i ) ;
8270: LD_ADDR_VAR 0 4
8274: PUSH
8275: LD_VAR 0 2
8279: PPUSH
8280: CALL_OW 110
8284: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
8285: LD_ADDR_VAR 0 11
8289: PUSH
8290: LD_VAR 0 2
8294: PPUSH
8295: CALL_OW 310
8299: ST_TO_ADDR
// if not tag then
8300: LD_VAR 0 4
8304: NOT
8305: IFFALSE 8676
// begin if veh then
8307: LD_VAR 0 11
8311: IFFALSE 8482
// begin if GetLives ( veh ) = 1000 then
8313: LD_VAR 0 11
8317: PPUSH
8318: CALL_OW 256
8322: PUSH
8323: LD_INT 1000
8325: EQUAL
8326: IFFALSE 8342
// SetTag ( i , 1 ) else
8328: LD_VAR 0 2
8332: PPUSH
8333: LD_INT 1
8335: PPUSH
8336: CALL_OW 109
8340: GO 8480
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 8 then
8342: LD_VAR 0 11
8346: PPUSH
8347: LD_VAR 0 6
8351: PUSH
8352: LD_INT 3
8354: ARRAY
8355: PUSH
8356: LD_INT 1
8358: ARRAY
8359: PPUSH
8360: LD_VAR 0 6
8364: PUSH
8365: LD_INT 3
8367: ARRAY
8368: PUSH
8369: LD_INT 2
8371: ARRAY
8372: PPUSH
8373: CALL_OW 297
8377: PUSH
8378: LD_INT 8
8380: GREATER
8381: IFFALSE 8420
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
8383: LD_VAR 0 11
8387: PPUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_INT 3
8395: ARRAY
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PPUSH
8401: LD_VAR 0 6
8405: PUSH
8406: LD_INT 3
8408: ARRAY
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PPUSH
8414: CALL_OW 111
8418: GO 8480
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 10 ] ] ) then
8420: LD_INT 81
8422: PUSH
8423: LD_INT 1
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 91
8432: PUSH
8433: LD_VAR 0 2
8437: PUSH
8438: LD_INT 10
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 69
8454: NOT
8455: IFFALSE 8480
// begin ComExitVehicle ( i ) ;
8457: LD_VAR 0 2
8461: PPUSH
8462: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
8466: LD_VAR 0 2
8470: PPUSH
8471: LD_VAR 0 11
8475: PPUSH
8476: CALL_OW 189
// end ; end else
8480: GO 8674
// if GetLives ( i ) < 400 then
8482: LD_VAR 0 2
8486: PPUSH
8487: CALL_OW 256
8491: PUSH
8492: LD_INT 400
8494: LESS
8495: IFFALSE 8546
// begin usAttackers := usAttackers diff i ;
8497: LD_ADDR_EXP 47
8501: PUSH
8502: LD_EXP 47
8506: PUSH
8507: LD_VAR 0 2
8511: DIFF
8512: ST_TO_ADDR
// usForces := usForces union i ;
8513: LD_ADDR_EXP 44
8517: PUSH
8518: LD_EXP 44
8522: PUSH
8523: LD_VAR 0 2
8527: UNION
8528: ST_TO_ADDR
// ComMoveXY ( i , 34 , 68 ) ;
8529: LD_VAR 0 2
8533: PPUSH
8534: LD_INT 34
8536: PPUSH
8537: LD_INT 68
8539: PPUSH
8540: CALL_OW 111
// end else
8544: GO 8674
// if ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) ) or FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , i , 9 ] ] ) then
8546: LD_VAR 0 10
8550: PPUSH
8551: LD_INT 58
8553: PUSH
8554: EMPTY
8555: LIST
8556: PUSH
8557: LD_INT 24
8559: PUSH
8560: LD_INT 1000
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 72
8575: PUSH
8576: LD_VAR 0 2
8580: PPUSH
8581: CALL_OW 314
8585: NOT
8586: AND
8587: PUSH
8588: LD_INT 81
8590: PUSH
8591: LD_INT 1
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 91
8600: PUSH
8601: LD_VAR 0 2
8605: PUSH
8606: LD_INT 9
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 69
8622: OR
8623: IFFALSE 8674
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
8625: LD_VAR 0 2
8629: PPUSH
8630: LD_VAR 0 10
8634: PPUSH
8635: LD_INT 58
8637: PUSH
8638: EMPTY
8639: LIST
8640: PUSH
8641: LD_INT 24
8643: PUSH
8644: LD_INT 250
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 72
8659: PPUSH
8660: LD_VAR 0 2
8664: PPUSH
8665: CALL_OW 74
8669: PPUSH
8670: CALL_OW 120
// end else
8674: GO 8961
// begin if veh and GetLives ( veh ) < 760 then
8676: LD_VAR 0 11
8680: PUSH
8681: LD_VAR 0 11
8685: PPUSH
8686: CALL_OW 256
8690: PUSH
8691: LD_INT 760
8693: LESS
8694: AND
8695: IFFALSE 8746
// begin SetTag ( i , 0 ) ;
8697: LD_VAR 0 2
8701: PPUSH
8702: LD_INT 0
8704: PPUSH
8705: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
8709: LD_VAR 0 11
8713: PPUSH
8714: LD_VAR 0 6
8718: PUSH
8719: LD_INT 3
8721: ARRAY
8722: PUSH
8723: LD_INT 1
8725: ARRAY
8726: PPUSH
8727: LD_VAR 0 6
8731: PUSH
8732: LD_INT 3
8734: ARRAY
8735: PUSH
8736: LD_INT 2
8738: ARRAY
8739: PPUSH
8740: CALL_OW 111
// end else
8744: GO 8961
// if veh then
8746: LD_VAR 0 11
8750: IFFALSE 8961
// if tag <= attackFormula [ 4 ] then
8752: LD_VAR 0 4
8756: PUSH
8757: LD_VAR 0 6
8761: PUSH
8762: LD_INT 4
8764: ARRAY
8765: LESSEQUAL
8766: IFFALSE 8927
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
8768: LD_VAR 0 11
8772: PPUSH
8773: LD_VAR 0 6
8777: PUSH
8778: LD_INT 4
8780: ARRAY
8781: PUSH
8782: LD_VAR 0 4
8786: ARRAY
8787: PUSH
8788: LD_INT 1
8790: ARRAY
8791: PPUSH
8792: LD_VAR 0 6
8796: PUSH
8797: LD_INT 4
8799: ARRAY
8800: PUSH
8801: LD_VAR 0 4
8805: ARRAY
8806: PUSH
8807: LD_INT 2
8809: ARRAY
8810: PPUSH
8811: CALL_OW 297
8815: PUSH
8816: LD_INT 6
8818: GREATER
8819: IFFALSE 8870
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
8821: LD_VAR 0 11
8825: PPUSH
8826: LD_VAR 0 6
8830: PUSH
8831: LD_INT 4
8833: ARRAY
8834: PUSH
8835: LD_VAR 0 4
8839: ARRAY
8840: PUSH
8841: LD_INT 1
8843: ARRAY
8844: PPUSH
8845: LD_VAR 0 6
8849: PUSH
8850: LD_INT 4
8852: ARRAY
8853: PUSH
8854: LD_VAR 0 4
8858: ARRAY
8859: PUSH
8860: LD_INT 2
8862: ARRAY
8863: PPUSH
8864: CALL_OW 114
8868: GO 8925
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
8870: LD_INT 81
8872: PUSH
8873: LD_INT 1
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 91
8882: PUSH
8883: LD_VAR 0 11
8887: PUSH
8888: LD_INT 10
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PPUSH
8900: CALL_OW 69
8904: NOT
8905: IFFALSE 8925
// SetTag ( i , tag + 1 ) ;
8907: LD_VAR 0 2
8911: PPUSH
8912: LD_VAR 0 4
8916: PUSH
8917: LD_INT 1
8919: PLUS
8920: PPUSH
8921: CALL_OW 109
// end else
8925: GO 8961
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
8927: LD_VAR 0 11
8931: PPUSH
8932: LD_INT 81
8934: PUSH
8935: LD_INT 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PPUSH
8942: CALL_OW 69
8946: PPUSH
8947: LD_VAR 0 2
8951: PPUSH
8952: CALL_OW 74
8956: PPUSH
8957: CALL_OW 115
// end ; end ;
8961: GO 8267
8963: POP
8964: POP
// end ; until not UnitFilter ( usAttackers , [ f_placed ] ) ;
8965: LD_EXP 47
8969: PPUSH
8970: LD_INT 52
8972: PUSH
8973: EMPTY
8974: LIST
8975: PPUSH
8976: CALL_OW 72
8980: NOT
8981: IFFALSE 7446
// end ;
8983: LD_VAR 0 1
8987: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
8988: LD_INT 22
8990: PUSH
8991: LD_INT 1
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 32
9000: PUSH
9001: LD_INT 1
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: IFFALSE 9093
9018: GO 9020
9020: DISABLE
9021: LD_INT 0
9023: PPUSH
// begin enable ;
9024: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9025: LD_ADDR_VAR 0 1
9029: PUSH
9030: LD_INT 22
9032: PUSH
9033: LD_INT 1
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 32
9042: PUSH
9043: LD_INT 1
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 69
9058: PUSH
9059: FOR_IN
9060: IFFALSE 9091
// if GetFuel ( i ) < 10 then
9062: LD_VAR 0 1
9066: PPUSH
9067: CALL_OW 261
9071: PUSH
9072: LD_INT 10
9074: LESS
9075: IFFALSE 9089
// SetFuel ( i , 10 ) ;
9077: LD_VAR 0 1
9081: PPUSH
9082: LD_INT 10
9084: PPUSH
9085: CALL_OW 240
9089: GO 9059
9091: POP
9092: POP
// end ; end_of_file
9093: PPOPN 1
9095: END
// export function Action ; var hasAll , i , tmp ; begin
9096: LD_INT 0
9098: PPUSH
9099: PPUSH
9100: PPUSH
9101: PPUSH
// hasAll := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) >= 7 ;
9102: LD_ADDR_VAR 0 2
9106: PUSH
9107: LD_INT 22
9109: PUSH
9110: LD_INT 2
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 21
9119: PUSH
9120: LD_INT 1
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 23
9129: PUSH
9130: LD_INT 2
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 69
9146: PUSH
9147: LD_INT 7
9149: GREATEREQUAL
9150: ST_TO_ADDR
// SaveVariable ( hasAll , 03_HasAll ) ;
9151: LD_VAR 0 2
9155: PPUSH
9156: LD_STRING 03_HasAll
9158: PPUSH
9159: CALL_OW 39
// Video ( true ) ;
9163: LD_INT 1
9165: PPUSH
9166: CALL 74111 0 1
// CenterNowOnUnits ( Heike ) ;
9170: LD_EXP 28
9174: PPUSH
9175: CALL_OW 87
// wait ( 0 0$2 ) ;
9179: LD_INT 70
9181: PPUSH
9182: CALL_OW 67
// Say ( Farmer , DF-1-start ) ;
9186: LD_EXP 36
9190: PPUSH
9191: LD_STRING DF-1-start
9193: PPUSH
9194: CALL_OW 88
// ComTurnUnit ( Heike , Farmer ) ;
9198: LD_EXP 28
9202: PPUSH
9203: LD_EXP 36
9207: PPUSH
9208: CALL_OW 119
// Say ( Heike , DH-1-start ) ;
9212: LD_EXP 28
9216: PPUSH
9217: LD_STRING DH-1-start
9219: PPUSH
9220: CALL_OW 88
// ComMoveXY ( Omar , 92 , 21 ) ;
9224: LD_EXP 37
9228: PPUSH
9229: LD_INT 92
9231: PPUSH
9232: LD_INT 21
9234: PPUSH
9235: CALL_OW 111
// ComMoveXY ( Aviradze , 94 , 23 ) ;
9239: LD_EXP 32
9243: PPUSH
9244: LD_INT 94
9246: PPUSH
9247: LD_INT 23
9249: PPUSH
9250: CALL_OW 111
// ComMoveXY ( omarSquad [ 1 ] , 90 , 23 ) ;
9254: LD_EXP 40
9258: PUSH
9259: LD_INT 1
9261: ARRAY
9262: PPUSH
9263: LD_INT 90
9265: PPUSH
9266: LD_INT 23
9268: PPUSH
9269: CALL_OW 111
// ComMoveXY ( omarSquad [ 2 ] , 93 , 25 ) ;
9273: LD_EXP 40
9277: PUSH
9278: LD_INT 2
9280: ARRAY
9281: PPUSH
9282: LD_INT 93
9284: PPUSH
9285: LD_INT 25
9287: PPUSH
9288: CALL_OW 111
// AddComTurnUnit ( omarSquad , Omar ) ;
9292: LD_EXP 40
9296: PPUSH
9297: LD_EXP 37
9301: PPUSH
9302: CALL_OW 179
// AddComTurnUnit ( [ Omar , Aviradze ] , Heike ) ;
9306: LD_EXP 37
9310: PUSH
9311: LD_EXP 32
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PPUSH
9320: LD_EXP 28
9324: PPUSH
9325: CALL_OW 179
// AddComTurnUnit ( Heike , Omar ) ;
9329: LD_EXP 28
9333: PPUSH
9334: LD_EXP 37
9338: PPUSH
9339: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
9343: LD_INT 35
9345: PPUSH
9346: CALL_OW 67
// until IsAt ( Omar , 92 , 21 ) ;
9350: LD_EXP 37
9354: PPUSH
9355: LD_INT 92
9357: PPUSH
9358: LD_INT 21
9360: PPUSH
9361: CALL_OW 307
9365: IFFALSE 9343
// Say ( Omar , DO-1-start ) ;
9367: LD_EXP 37
9371: PPUSH
9372: LD_STRING DO-1-start
9374: PPUSH
9375: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
9379: LD_EXP 28
9383: PPUSH
9384: LD_STRING DH-2-start
9386: PPUSH
9387: CALL_OW 88
// if hasAll then
9391: LD_VAR 0 2
9395: IFFALSE 9523
// begin Say ( Omar , DO-2-start ) ;
9397: LD_EXP 37
9401: PPUSH
9402: LD_STRING DO-2-start
9404: PPUSH
9405: CALL_OW 88
// Say ( Omar , DO-3-start ) ;
9409: LD_EXP 37
9413: PPUSH
9414: LD_STRING DO-3-start
9416: PPUSH
9417: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
9421: LD_EXP 28
9425: PPUSH
9426: LD_STRING DH-3-start
9428: PPUSH
9429: CALL_OW 88
// Say ( Farmer , DF-2-start ) ;
9433: LD_EXP 36
9437: PPUSH
9438: LD_STRING DF-2-start
9440: PPUSH
9441: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9445: LD_EXP 37
9449: PPUSH
9450: LD_EXP 36
9454: PPUSH
9455: CALL_OW 119
// Say ( Omar , DO-4-start ) ;
9459: LD_EXP 37
9463: PPUSH
9464: LD_STRING DO-4-start
9466: PPUSH
9467: CALL_OW 88
// Say ( Farmer , DF-3-start ) ;
9471: LD_EXP 36
9475: PPUSH
9476: LD_STRING DF-3-start
9478: PPUSH
9479: CALL_OW 88
// Say ( Omar , DO-5-start ) ;
9483: LD_EXP 37
9487: PPUSH
9488: LD_STRING DO-5-start
9490: PPUSH
9491: CALL_OW 88
// Say ( Farmer , DF-4-start ) ;
9495: LD_EXP 36
9499: PPUSH
9500: LD_STRING DF-4-start
9502: PPUSH
9503: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9507: LD_EXP 37
9511: PPUSH
9512: LD_EXP 28
9516: PPUSH
9517: CALL_OW 119
// end else
9521: GO 9623
// begin Say ( Omar , DO-2-start-a ) ;
9523: LD_EXP 37
9527: PPUSH
9528: LD_STRING DO-2-start-a
9530: PPUSH
9531: CALL_OW 88
// Say ( Omar , DO-3-start-a ) ;
9535: LD_EXP 37
9539: PPUSH
9540: LD_STRING DO-3-start-a
9542: PPUSH
9543: CALL_OW 88
// Say ( Heike , DH-3-start-a ) ;
9547: LD_EXP 28
9551: PPUSH
9552: LD_STRING DH-3-start-a
9554: PPUSH
9555: CALL_OW 88
// Say ( Farmer , DF-2-start-a ) ;
9559: LD_EXP 36
9563: PPUSH
9564: LD_STRING DF-2-start-a
9566: PPUSH
9567: CALL_OW 88
// ComTurnUnit ( Omar , Farmer ) ;
9571: LD_EXP 37
9575: PPUSH
9576: LD_EXP 36
9580: PPUSH
9581: CALL_OW 119
// Say ( Omar , DO-4-start-a ) ;
9585: LD_EXP 37
9589: PPUSH
9590: LD_STRING DO-4-start-a
9592: PPUSH
9593: CALL_OW 88
// Say ( Farmer , DF-3-start-a ) ;
9597: LD_EXP 36
9601: PPUSH
9602: LD_STRING DF-3-start-a
9604: PPUSH
9605: CALL_OW 88
// ComTurnUnit ( Omar , Heike ) ;
9609: LD_EXP 37
9613: PPUSH
9614: LD_EXP 28
9618: PPUSH
9619: CALL_OW 119
// end ; wait ( 0 0$0.3 ) ;
9623: LD_INT 10
9625: PPUSH
9626: CALL_OW 67
// Say ( Omar , DO-1-mission ) ;
9630: LD_EXP 37
9634: PPUSH
9635: LD_STRING DO-1-mission
9637: PPUSH
9638: CALL_OW 88
// Say ( Omar , DO-2-mission ) ;
9642: LD_EXP 37
9646: PPUSH
9647: LD_STRING DO-2-mission
9649: PPUSH
9650: CALL_OW 88
// if not hasAll then
9654: LD_VAR 0 2
9658: NOT
9659: IFFALSE 9673
// Say ( Omar , DO-3-mission ) ;
9661: LD_EXP 37
9665: PPUSH
9666: LD_STRING DO-3-mission
9668: PPUSH
9669: CALL_OW 88
// Say ( Omar , DO-4-mission ) ;
9673: LD_EXP 37
9677: PPUSH
9678: LD_STRING DO-4-mission
9680: PPUSH
9681: CALL_OW 88
// Say ( Heike , DH-1-mission ) ;
9685: LD_EXP 28
9689: PPUSH
9690: LD_STRING DH-1-mission
9692: PPUSH
9693: CALL_OW 88
// Say ( Farmer , DF-1-mission ) ;
9697: LD_EXP 36
9701: PPUSH
9702: LD_STRING DF-1-mission
9704: PPUSH
9705: CALL_OW 88
// Say ( Omar , DO-5-mission ) ;
9709: LD_EXP 37
9713: PPUSH
9714: LD_STRING DO-5-mission
9716: PPUSH
9717: CALL_OW 88
// if not hasAll then
9721: LD_VAR 0 2
9725: NOT
9726: IFFALSE 9861
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , nation_arabian ] ] ) ;
9728: LD_ADDR_VAR 0 4
9732: PUSH
9733: LD_INT 22
9735: PUSH
9736: LD_INT 2
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 21
9745: PUSH
9746: LD_INT 1
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 23
9755: PUSH
9756: LD_INT 2
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: PPUSH
9768: CALL_OW 69
9772: ST_TO_ADDR
// for i := 7 downto tmp do
9773: LD_ADDR_VAR 0 3
9777: PUSH
9778: DOUBLE
9779: LD_INT 7
9781: INC
9782: ST_TO_ADDR
9783: LD_VAR 0 4
9787: PUSH
9788: FOR_DOWNTO
9789: IFFALSE 9859
// begin if omarSquad < 3 then
9791: LD_EXP 40
9795: PUSH
9796: LD_INT 3
9798: LESS
9799: IFFALSE 9803
// break ;
9801: GO 9859
// SetSide ( omarSquad [ 3 ] , 2 ) ;
9803: LD_EXP 40
9807: PUSH
9808: LD_INT 3
9810: ARRAY
9811: PPUSH
9812: LD_INT 2
9814: PPUSH
9815: CALL_OW 235
// heikeSecondSquad := heikeSecondSquad union omarSquad [ 3 ] ;
9819: LD_ADDR_EXP 42
9823: PUSH
9824: LD_EXP 42
9828: PUSH
9829: LD_EXP 40
9833: PUSH
9834: LD_INT 3
9836: ARRAY
9837: UNION
9838: ST_TO_ADDR
// omarSquad := Delete ( omarSquad , 3 ) ;
9839: LD_ADDR_EXP 40
9843: PUSH
9844: LD_EXP 40
9848: PPUSH
9849: LD_INT 3
9851: PPUSH
9852: CALL_OW 3
9856: ST_TO_ADDR
// end ;
9857: GO 9788
9859: POP
9860: POP
// end ; ComMoveXY ( Omar ^ omarSquad , 103 , 9 ) ;
9861: LD_EXP 37
9865: PUSH
9866: LD_EXP 40
9870: ADD
9871: PPUSH
9872: LD_INT 103
9874: PPUSH
9875: LD_INT 9
9877: PPUSH
9878: CALL_OW 111
// if hasAll and IsOk ( Kaia ) then
9882: LD_VAR 0 2
9886: PUSH
9887: LD_EXP 33
9891: PPUSH
9892: CALL_OW 302
9896: AND
9897: IFFALSE 9958
// begin wait ( 0 0$3 ) ;
9899: LD_INT 105
9901: PPUSH
9902: CALL_OW 67
// ComTurnUnit ( Kaia , Farmer ) ;
9906: LD_EXP 33
9910: PPUSH
9911: LD_EXP 36
9915: PPUSH
9916: CALL_OW 119
// Say ( Kaia , DK-1-side ) ;
9920: LD_EXP 33
9924: PPUSH
9925: LD_STRING DK-1-side
9927: PPUSH
9928: CALL_OW 88
// ComTurnUnit ( Farmer , Kaia ) ;
9932: LD_EXP 36
9936: PPUSH
9937: LD_EXP 33
9941: PPUSH
9942: CALL_OW 119
// Say ( Farmer , DF-1-side ) ;
9946: LD_EXP 36
9950: PPUSH
9951: LD_STRING DF-1-side
9953: PPUSH
9954: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
9958: LD_INT 22
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: PPUSH
9973: CALL_OW 139
// ComMoveXY ( Farmer ^ farmerSquad , 108 , 62 ) ;
9977: LD_EXP 36
9981: PUSH
9982: LD_EXP 39
9986: ADD
9987: PPUSH
9988: LD_INT 108
9990: PPUSH
9991: LD_INT 62
9993: PPUSH
9994: CALL_OW 111
// gameStarted := true ;
9998: LD_ADDR_EXP 3
10002: PUSH
10003: LD_INT 1
10005: ST_TO_ADDR
// wait ( 0 0$3 ) ;
10006: LD_INT 105
10008: PPUSH
10009: CALL_OW 67
// CenterOnUnits ( Heike ) ;
10013: LD_EXP 28
10017: PPUSH
10018: CALL_OW 85
// ComTurnUnit ( Heike , Aviradze ) ;
10022: LD_EXP 28
10026: PPUSH
10027: LD_EXP 32
10031: PPUSH
10032: CALL_OW 119
// ComTurnUnit ( FilterAllUnits ( [ f_side , 2 ] ) diff Heike , Heike ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 2
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PPUSH
10046: CALL_OW 69
10050: PUSH
10051: LD_EXP 28
10055: DIFF
10056: PPUSH
10057: LD_EXP 28
10061: PPUSH
10062: CALL_OW 119
// Say ( Heike , DH-1-explore ) ;
10066: LD_EXP 28
10070: PPUSH
10071: LD_STRING DH-1-explore
10073: PPUSH
10074: CALL_OW 88
// if Givi then
10078: LD_EXP 29
10082: IFFALSE 10098
// Say ( Givi , DG-1-explore ) else
10084: LD_EXP 29
10088: PPUSH
10089: LD_STRING DG-1-explore
10091: PPUSH
10092: CALL_OW 88
10096: GO 10135
// if heikeSecondSquad then
10098: LD_EXP 42
10102: IFFALSE 10135
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10104: LD_EXP 42
10108: PPUSH
10109: LD_INT 26
10111: PUSH
10112: LD_INT 1
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PPUSH
10119: CALL_OW 72
10123: PUSH
10124: LD_INT 1
10126: ARRAY
10127: PPUSH
10128: LD_STRING DArm-1-explore
10130: PPUSH
10131: CALL_OW 88
// Say ( Aviradze , DA-1-explore ) ;
10135: LD_EXP 32
10139: PPUSH
10140: LD_STRING DA-1-explore
10142: PPUSH
10143: CALL_OW 88
// if Sophia then
10147: LD_EXP 34
10151: IFFALSE 10229
// begin Say ( Sophia , DS-2-explore ) ;
10153: LD_EXP 34
10157: PPUSH
10158: LD_STRING DS-2-explore
10160: PPUSH
10161: CALL_OW 88
// Say ( Aviradze , DA-2-explore ) ;
10165: LD_EXP 32
10169: PPUSH
10170: LD_STRING DA-2-explore
10172: PPUSH
10173: CALL_OW 88
// ComTurnUnit ( Sophia , Aviradze ) ;
10177: LD_EXP 34
10181: PPUSH
10182: LD_EXP 32
10186: PPUSH
10187: CALL_OW 119
// ComTurnUnit ( Aviradze , Sophia ) ;
10191: LD_EXP 32
10195: PPUSH
10196: LD_EXP 34
10200: PPUSH
10201: CALL_OW 119
// Say ( Sophia , DS-3-explore ) ;
10205: LD_EXP 34
10209: PPUSH
10210: LD_STRING DS-3-explore
10212: PPUSH
10213: CALL_OW 88
// Say ( Aviradze , DA-3-explore ) ;
10217: LD_EXP 32
10221: PPUSH
10222: LD_STRING DA-3-explore
10224: PPUSH
10225: CALL_OW 88
// end ; if Mike then
10229: LD_EXP 30
10233: IFFALSE 10289
// begin Say ( Mike , DM-1-explore ) ;
10235: LD_EXP 30
10239: PPUSH
10240: LD_STRING DM-1-explore
10242: PPUSH
10243: CALL_OW 88
// Say ( Heike , DH-2-explore ) ;
10247: LD_EXP 28
10251: PPUSH
10252: LD_STRING DH-2-explore
10254: PPUSH
10255: CALL_OW 88
// Say ( Mike , DM-2-explore ) ;
10259: LD_EXP 30
10263: PPUSH
10264: LD_STRING DM-2-explore
10266: PPUSH
10267: CALL_OW 88
// if Kaia then
10271: LD_EXP 33
10275: IFFALSE 10289
// Say ( Kaia , DK-1-explore ) ;
10277: LD_EXP 33
10281: PPUSH
10282: LD_STRING DK-1-explore
10284: PPUSH
10285: CALL_OW 88
// end ; ComFree ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
10289: LD_INT 22
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: PPUSH
10304: CALL_OW 139
// Video ( false ) ;
10308: LD_INT 0
10310: PPUSH
10311: CALL 74111 0 1
// ChangeMissionObjectives ( BuildBase ) ;
10315: LD_STRING BuildBase
10317: PPUSH
10318: CALL_OW 337
// SaveForQuickRestart ;
10322: CALL_OW 22
// end ;
10326: LD_VAR 0 1
10330: RET
// every 0 0$1 trigger not americanBaseSpoted and not americanBaseCaptured and FilterUnitsInArea ( hillArea , [ f_side , 2 ] ) and not americanBaseCaptured do
10331: LD_EXP 5
10335: NOT
10336: PUSH
10337: LD_EXP 6
10341: NOT
10342: AND
10343: PUSH
10344: LD_INT 5
10346: PPUSH
10347: LD_INT 22
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 70
10361: AND
10362: PUSH
10363: LD_EXP 6
10367: NOT
10368: AND
10369: IFFALSE 10454
10371: GO 10373
10373: DISABLE
// begin if Mike then
10374: LD_EXP 30
10378: IFFALSE 10394
// Say ( Mike , DM-1-scout ) else
10380: LD_EXP 30
10384: PPUSH
10385: LD_STRING DM-1-scout
10387: PPUSH
10388: CALL_OW 88
10392: GO 10425
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-1-explore ) ;
10394: LD_EXP 42
10398: PPUSH
10399: LD_INT 26
10401: PUSH
10402: LD_INT 1
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PPUSH
10409: CALL_OW 72
10413: PUSH
10414: LD_INT 1
10416: ARRAY
10417: PPUSH
10418: LD_STRING DArm-1-explore
10420: PPUSH
10421: CALL_OW 88
// PlaceSeeing ( 54 , 35 , 2 , 1 ) ;
10425: LD_INT 54
10427: PPUSH
10428: LD_INT 35
10430: PPUSH
10431: LD_INT 2
10433: PPUSH
10434: LD_INT 1
10436: PPUSH
10437: CALL_OW 330
// RemoveSeeing ( 54 , 35 , 2 ) ;
10441: LD_INT 54
10443: PPUSH
10444: LD_INT 35
10446: PPUSH
10447: LD_INT 2
10449: PPUSH
10450: CALL_OW 331
// end ;
10454: END
// every 0 0$1 trigger FilterUnitsInArea ( upHillArea , [ f_side , 2 ] ) and not americanBaseCaptured do var randomMen , randomWomen , speakerOk ;
10455: LD_INT 6
10457: PPUSH
10458: LD_INT 22
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 70
10472: PUSH
10473: LD_EXP 6
10477: NOT
10478: AND
10479: IFFALSE 10733
10481: GO 10483
10483: DISABLE
10484: LD_INT 0
10486: PPUSH
10487: PPUSH
10488: PPUSH
// begin randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10489: LD_ADDR_VAR 0 1
10493: PUSH
10494: LD_EXP 42
10498: PPUSH
10499: LD_INT 26
10501: PUSH
10502: LD_INT 1
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PPUSH
10509: CALL_OW 72
10513: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
10514: LD_ADDR_VAR 0 2
10518: PUSH
10519: LD_EXP 42
10523: PPUSH
10524: LD_INT 26
10526: PUSH
10527: LD_INT 2
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PPUSH
10534: CALL_OW 72
10538: ST_TO_ADDR
// DialogueOn ;
10539: CALL_OW 6
// PlaceSeeing ( 36 , 22 , 2 , 8 ) ;
10543: LD_INT 36
10545: PPUSH
10546: LD_INT 22
10548: PPUSH
10549: LD_INT 2
10551: PPUSH
10552: LD_INT 8
10554: PPUSH
10555: CALL_OW 330
// dwait ( 0 0$1 ) ;
10559: LD_INT 35
10561: PPUSH
10562: CALL_OW 68
// speakerOk := false ;
10566: LD_ADDR_VAR 0 3
10570: PUSH
10571: LD_INT 0
10573: ST_TO_ADDR
// if Mike then
10574: LD_EXP 30
10578: IFFALSE 10600
// speakerOk := Say ( Mike , DM-1-spot ) else
10580: LD_ADDR_VAR 0 3
10584: PUSH
10585: LD_EXP 30
10589: PPUSH
10590: LD_STRING DM-1-spot
10592: PPUSH
10593: CALL_OW 88
10597: ST_TO_ADDR
10598: GO 10628
// if randomMen then
10600: LD_VAR 0 1
10604: IFFALSE 10628
// speakerOk := Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10606: LD_ADDR_VAR 0 3
10610: PUSH
10611: LD_VAR 0 1
10615: PUSH
10616: LD_INT 1
10618: ARRAY
10619: PPUSH
10620: LD_STRING DArm-1-spot-a
10622: PPUSH
10623: CALL_OW 88
10627: ST_TO_ADDR
// if speakerOk then
10628: LD_VAR 0 3
10632: IFFALSE 10676
// begin if Givi then
10634: LD_EXP 29
10638: IFFALSE 10654
// Say ( Givi , DG-1-spot ) else
10640: LD_EXP 29
10644: PPUSH
10645: LD_STRING DG-1-spot
10647: PPUSH
10648: CALL_OW 88
10652: GO 10676
// if randomWomen then
10654: LD_VAR 0 2
10658: IFFALSE 10676
// Say ( randomWomen [ 1 ] , DArf-1-spot-a ) ;
10660: LD_VAR 0 2
10664: PUSH
10665: LD_INT 1
10667: ARRAY
10668: PPUSH
10669: LD_STRING DArf-1-spot-a
10671: PPUSH
10672: CALL_OW 88
// end ; if Mike then
10676: LD_EXP 30
10680: IFFALSE 10696
// Say ( Heike , DH-1-spot ) else
10682: LD_EXP 28
10686: PPUSH
10687: LD_STRING DH-1-spot
10689: PPUSH
10690: CALL_OW 88
10694: GO 10708
// Say ( Heike , DH-1-spot-a ) ;
10696: LD_EXP 28
10700: PPUSH
10701: LD_STRING DH-1-spot-a
10703: PPUSH
10704: CALL_OW 88
// RemoveSeeing ( 36 , 22 , 2 ) ;
10708: LD_INT 36
10710: PPUSH
10711: LD_INT 22
10713: PPUSH
10714: LD_INT 2
10716: PPUSH
10717: CALL_OW 331
// DialogueOff ;
10721: CALL_OW 7
// americanBaseSpoted := true ;
10725: LD_ADDR_EXP 5
10729: PUSH
10730: LD_INT 1
10732: ST_TO_ADDR
// end ;
10733: PPOPN 3
10735: END
// every 0 0$1 trigger not americanBaseSpoted and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 1 ] ] ) and not americanBaseCaptured do var randomMen ;
10736: LD_EXP 5
10740: NOT
10741: PUSH
10742: LD_INT 22
10744: PUSH
10745: LD_INT 2
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 101
10754: PUSH
10755: LD_INT 1
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 69
10770: AND
10771: PUSH
10772: LD_EXP 6
10776: NOT
10777: AND
10778: IFFALSE 10864
10780: GO 10782
10782: DISABLE
10783: LD_INT 0
10785: PPUSH
// begin americanBaseSpoted := true ;
10786: LD_ADDR_EXP 5
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
10794: LD_ADDR_VAR 0 1
10798: PUSH
10799: LD_EXP 42
10803: PPUSH
10804: LD_INT 26
10806: PUSH
10807: LD_INT 1
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 72
10818: ST_TO_ADDR
// if not randomMen then
10819: LD_VAR 0 1
10823: NOT
10824: IFFALSE 10828
// exit ;
10826: GO 10864
// DialogueOn ;
10828: CALL_OW 6
// Say ( randomMen [ 1 ] , DArm-1-spot-a ) ;
10832: LD_VAR 0 1
10836: PUSH
10837: LD_INT 1
10839: ARRAY
10840: PPUSH
10841: LD_STRING DArm-1-spot-a
10843: PPUSH
10844: CALL_OW 88
// Say ( Heike , DH-1-spot-a ) ;
10848: LD_EXP 28
10852: PPUSH
10853: LD_STRING DH-1-spot-a
10855: PPUSH
10856: CALL_OW 88
// DialogueOff ;
10860: CALL_OW 7
// end ;
10864: PPOPN 1
10866: END
// every 0 0$1 trigger GetSide ( usDepot ) = 2 or FilterUnitsInArea ( americanBaseArea , [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] , [ f_btype , b_breastwork ] ] ) or FilterUnitsInArea ( americanBaseArea , [ f_side , 2 ] ) > 1 or usForces <= 4 do var i , p ;
10867: LD_INT 11
10869: PPUSH
10870: CALL_OW 255
10874: PUSH
10875: LD_INT 2
10877: EQUAL
10878: PUSH
10879: LD_INT 7
10881: PPUSH
10882: LD_INT 22
10884: PUSH
10885: LD_INT 1
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: LD_INT 50
10897: PUSH
10898: EMPTY
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 30
10907: PUSH
10908: LD_INT 31
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: PPUSH
10920: CALL_OW 70
10924: OR
10925: PUSH
10926: LD_INT 7
10928: PPUSH
10929: LD_INT 22
10931: PUSH
10932: LD_INT 2
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PPUSH
10939: CALL_OW 70
10943: PUSH
10944: LD_INT 1
10946: GREATER
10947: OR
10948: PUSH
10949: LD_EXP 44
10953: PUSH
10954: LD_INT 4
10956: LESSEQUAL
10957: OR
10958: IFFALSE 11537
10960: GO 10962
10962: DISABLE
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
// begin wait ( 0 0$3 ) ;
10967: LD_INT 105
10969: PPUSH
10970: CALL_OW 67
// americanStartRun := true ;
10974: LD_ADDR_EXP 14
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// if IsOk ( usCommander ) then
10982: LD_EXP 45
10986: PPUSH
10987: CALL_OW 302
10991: IFFALSE 11021
// begin usForces := usForces union usCommander ;
10993: LD_ADDR_EXP 44
10997: PUSH
10998: LD_EXP 44
11002: PUSH
11003: LD_EXP 45
11007: UNION
11008: ST_TO_ADDR
// Say ( usCommander , DUsm-1-assault ) ;
11009: LD_EXP 45
11013: PPUSH
11014: LD_STRING DUsm-1-assault
11016: PPUSH
11017: CALL_OW 88
// end ; for i in usForces do
11021: LD_ADDR_VAR 0 1
11025: PUSH
11026: LD_EXP 44
11030: PUSH
11031: FOR_IN
11032: IFFALSE 11078
// begin if IsInUnit ( i ) then
11034: LD_VAR 0 1
11038: PPUSH
11039: CALL_OW 310
11043: IFFALSE 11054
// ComExitBuilding ( i ) ;
11045: LD_VAR 0 1
11049: PPUSH
11050: CALL_OW 122
// wait ( 3 ) ;
11054: LD_INT 3
11056: PPUSH
11057: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11061: LD_VAR 0 1
11065: PPUSH
11066: LD_INT 34
11068: PPUSH
11069: LD_INT 67
11071: PPUSH
11072: CALL_OW 111
// end ;
11076: GO 11031
11078: POP
11079: POP
// Say ( Heike , DH-1-assault ) ;
11080: LD_EXP 28
11084: PPUSH
11085: LD_STRING DH-1-assault
11087: PPUSH
11088: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11092: LD_INT 35
11094: PPUSH
11095: CALL_OW 67
// ComMoveXY ( i , 34 , 67 ) ;
11099: LD_VAR 0 1
11103: PPUSH
11104: LD_INT 34
11106: PPUSH
11107: LD_INT 67
11109: PPUSH
11110: CALL_OW 111
// until not usForces ;
11114: LD_EXP 44
11118: NOT
11119: IFFALSE 11092
// music_nat := 2 ;
11121: LD_ADDR_OWVAR 71
11125: PUSH
11126: LD_INT 2
11128: ST_TO_ADDR
// music_class := music_victory ;
11129: LD_ADDR_OWVAR 72
11133: PUSH
11134: LD_INT 4
11136: ST_TO_ADDR
// if not americanHasEscaped then
11137: LD_EXP 8
11141: NOT
11142: IFFALSE 11163
// begin Say ( Heike , DH-2-assault ) ;
11144: LD_EXP 28
11148: PPUSH
11149: LD_STRING DH-2-assault
11151: PPUSH
11152: CALL_OW 88
// SetAchievement ( ACH_CLEAN ) ;
11156: LD_STRING ACH_CLEAN
11158: PPUSH
11159: CALL_OW 543
// end ; wait ( 0 0$2 ) ;
11163: LD_INT 70
11165: PPUSH
11166: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11170: LD_INT 35
11172: PPUSH
11173: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ) ;
11177: LD_INT 22
11179: PUSH
11180: LD_INT 2
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 21
11189: PUSH
11190: LD_INT 1
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 3
11199: PUSH
11200: LD_INT 50
11202: PUSH
11203: EMPTY
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: PPUSH
11215: CALL_OW 69
11219: NOT
11220: IFFALSE 11170
// InGameOn ;
11222: CALL_OW 8
// if not GetSide ( usDepot ) = 2 then
11226: LD_INT 11
11228: PPUSH
11229: CALL_OW 255
11233: PUSH
11234: LD_INT 2
11236: EQUAL
11237: NOT
11238: IFFALSE 11250
// SetSide ( usDepot , 2 ) ;
11240: LD_INT 11
11242: PPUSH
11243: LD_INT 2
11245: PPUSH
11246: CALL_OW 235
// CenterOnXY ( 35 , 22 ) ;
11250: LD_INT 35
11252: PPUSH
11253: LD_INT 22
11255: PPUSH
11256: CALL_OW 84
// ComMoveXY ( Heike , 35 , 22 ) ;
11260: LD_EXP 28
11264: PPUSH
11265: LD_INT 35
11267: PPUSH
11268: LD_INT 22
11270: PPUSH
11271: CALL_OW 111
// AddComTurnXY ( Heike , 38 , 25 ) ;
11275: LD_EXP 28
11279: PPUSH
11280: LD_INT 38
11282: PPUSH
11283: LD_INT 25
11285: PPUSH
11286: CALL_OW 178
// ComMoveXY ( heikeSquad union heikeSecondSquad , 39 , 26 ) ;
11290: LD_EXP 41
11294: PUSH
11295: LD_EXP 42
11299: UNION
11300: PPUSH
11301: LD_INT 39
11303: PPUSH
11304: LD_INT 26
11306: PPUSH
11307: CALL_OW 111
// AddComTurnUnit ( heikeSquad union heikeSecondSquad , Heike ) ;
11311: LD_EXP 41
11315: PUSH
11316: LD_EXP 42
11320: UNION
11321: PPUSH
11322: LD_EXP 28
11326: PPUSH
11327: CALL_OW 179
// p := 0 ;
11331: LD_ADDR_VAR 0 2
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11339: LD_INT 35
11341: PPUSH
11342: CALL_OW 67
// p := p + 1 ;
11346: LD_ADDR_VAR 0 2
11350: PUSH
11351: LD_VAR 0 2
11355: PUSH
11356: LD_INT 1
11358: PLUS
11359: ST_TO_ADDR
// until not HasTask ( Heike ) or p > 10 ;
11360: LD_EXP 28
11364: PPUSH
11365: CALL_OW 314
11369: NOT
11370: PUSH
11371: LD_VAR 0 2
11375: PUSH
11376: LD_INT 10
11378: GREATER
11379: OR
11380: IFFALSE 11339
// Say ( Heike , DH-1-capture ) ;
11382: LD_EXP 28
11386: PPUSH
11387: LD_STRING DH-1-capture
11389: PPUSH
11390: CALL_OW 88
// if Markov then
11394: LD_EXP 35
11398: IFFALSE 11412
// Say ( Markov , DMar-1-capture ) ;
11400: LD_EXP 35
11404: PPUSH
11405: LD_STRING DMar-1-capture
11407: PPUSH
11408: CALL_OW 88
// if Sophia then
11412: LD_EXP 34
11416: IFFALSE 11442
// begin Say ( Heike , DH-2-capture ) ;
11418: LD_EXP 28
11422: PPUSH
11423: LD_STRING DH-2-capture
11425: PPUSH
11426: CALL_OW 88
// Say ( Sophia , DS-1-capture ) ;
11430: LD_EXP 34
11434: PPUSH
11435: LD_STRING DS-1-capture
11437: PPUSH
11438: CALL_OW 88
// end ; InGameOff ;
11442: CALL_OW 9
// music_nat := music_auto ;
11446: LD_ADDR_OWVAR 71
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// music_class := music_auto ;
11454: LD_ADDR_OWVAR 72
11458: PUSH
11459: LD_INT 0
11461: ST_TO_ADDR
// ChangeMissionObjectives ( ConstructBase ) ;
11462: LD_STRING ConstructBase
11464: PPUSH
11465: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
11469: LD_ADDR_VAR 0 1
11473: PUSH
11474: LD_INT 22
11476: PUSH
11477: LD_INT 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 21
11486: PUSH
11487: LD_INT 3
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PPUSH
11498: CALL_OW 69
11502: PUSH
11503: FOR_IN
11504: IFFALSE 11520
// SetSide ( i , 2 ) ;
11506: LD_VAR 0 1
11510: PPUSH
11511: LD_INT 2
11513: PPUSH
11514: CALL_OW 235
11518: GO 11503
11520: POP
11521: POP
// wait ( 0 0$3 ) ;
11522: LD_INT 105
11524: PPUSH
11525: CALL_OW 67
// americanBaseCaptured := true ;
11529: LD_ADDR_EXP 6
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// end ;
11537: PPOPN 2
11539: END
// every 0 0$1 trigger capturedCargoCounter >= 3 do
11540: LD_EXP 13
11544: PUSH
11545: LD_INT 3
11547: GREATEREQUAL
11548: IFFALSE 11560
11550: GO 11552
11552: DISABLE
// SetAchievement ( ACH_ENG ) ;
11553: LD_STRING ACH_ENG
11555: PPUSH
11556: CALL_OW 543
11560: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 4 do
11561: LD_INT 22
11563: PUSH
11564: LD_INT 2
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 25
11573: PUSH
11574: LD_INT 15
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PPUSH
11585: CALL_OW 69
11589: PUSH
11590: LD_INT 4
11592: GREATEREQUAL
11593: IFFALSE 11605
11595: GO 11597
11597: DISABLE
// SetAchievement ( ACH_APEGEN ) ;
11598: LD_STRING ACH_APEGEN
11600: PPUSH
11601: CALL_OW 543
11605: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_workshop ] , [ f_not , [ f_constructed ] ] ] ) do
11606: LD_INT 22
11608: PUSH
11609: LD_INT 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 30
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 3
11628: PUSH
11629: LD_INT 57
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: PPUSH
11644: CALL_OW 69
11648: IFFALSE 11913
11650: GO 11652
11652: DISABLE
// begin workshopBuilded := true ;
11653: LD_ADDR_EXP 10
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// if IsOk ( Markov ) then
11661: LD_EXP 35
11665: PPUSH
11666: CALL_OW 302
11670: IFFALSE 11729
// begin Say ( Heike , DH-1-shop-a ) ;
11672: LD_EXP 28
11676: PPUSH
11677: LD_STRING DH-1-shop-a
11679: PPUSH
11680: CALL_OW 88
// if not ( GetTech ( tech_OilEng , 2 ) = state_researched and GetTech ( tech_SolEng , 2 ) = state_researched ) then
11684: LD_INT 47
11686: PPUSH
11687: LD_INT 2
11689: PPUSH
11690: CALL_OW 321
11694: PUSH
11695: LD_INT 2
11697: EQUAL
11698: PUSH
11699: LD_INT 45
11701: PPUSH
11702: LD_INT 2
11704: PPUSH
11705: CALL_OW 321
11709: PUSH
11710: LD_INT 2
11712: EQUAL
11713: AND
11714: NOT
11715: IFFALSE 11729
// Say ( Markov , DMar-1-shop-a ) ;
11717: LD_EXP 35
11721: PPUSH
11722: LD_STRING DMar-1-shop-a
11724: PPUSH
11725: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
11729: LD_INT 35
11731: PPUSH
11732: CALL_OW 67
// until GetTech ( tech_OilEng , 2 ) = state_researched or GetTech ( tech_SolEng , 2 ) = state_researched ;
11736: LD_INT 47
11738: PPUSH
11739: LD_INT 2
11741: PPUSH
11742: CALL_OW 321
11746: PUSH
11747: LD_INT 2
11749: EQUAL
11750: PUSH
11751: LD_INT 45
11753: PPUSH
11754: LD_INT 2
11756: PPUSH
11757: CALL_OW 321
11761: PUSH
11762: LD_INT 2
11764: EQUAL
11765: OR
11766: IFFALSE 11729
// if IsOk ( Markov ) and IsOk ( Heike ) then
11768: LD_EXP 35
11772: PPUSH
11773: CALL_OW 302
11777: PUSH
11778: LD_EXP 28
11782: PPUSH
11783: CALL_OW 302
11787: AND
11788: IFFALSE 11906
// begin DialogueOn ;
11790: CALL_OW 6
// Say ( Markov , DMar-1-shop ) ;
11794: LD_EXP 35
11798: PPUSH
11799: LD_STRING DMar-1-shop
11801: PPUSH
11802: CALL_OW 88
// Say ( Heike , DH-1-shop ) ;
11806: LD_EXP 28
11810: PPUSH
11811: LD_STRING DH-1-shop
11813: PPUSH
11814: CALL_OW 88
// Say ( Markov , DMar-2-shop ) ;
11818: LD_EXP 35
11822: PPUSH
11823: LD_STRING DMar-2-shop
11825: PPUSH
11826: CALL_OW 88
// Say ( Markov , DMar-3-shop ) ;
11830: LD_EXP 35
11834: PPUSH
11835: LD_STRING DMar-3-shop
11837: PPUSH
11838: CALL_OW 88
// Say ( Heike , DH-2-shop ) ;
11842: LD_EXP 28
11846: PPUSH
11847: LD_STRING DH-2-shop
11849: PPUSH
11850: CALL_OW 88
// Say ( Markov , DMar-4-shop ) ;
11854: LD_EXP 35
11858: PPUSH
11859: LD_STRING DMar-4-shop
11861: PPUSH
11862: CALL_OW 88
// Say ( Heike , DH-3-shop ) ;
11866: LD_EXP 28
11870: PPUSH
11871: LD_STRING DH-3-shop
11873: PPUSH
11874: CALL_OW 88
// Say ( Markov , DMar-5-shop ) ;
11878: LD_EXP 35
11882: PPUSH
11883: LD_STRING DMar-5-shop
11885: PPUSH
11886: CALL_OW 88
// Say ( Heike , DH-4-shop ) ;
11890: LD_EXP 28
11894: PPUSH
11895: LD_STRING DH-4-shop
11897: PPUSH
11898: CALL_OW 88
// DialogueOff ;
11902: CALL_OW 7
// end ; ChangeMissionObjectives ( ConstructVeh ) ;
11906: LD_STRING ConstructVeh
11908: PPUSH
11909: CALL_OW 337
// end ;
11913: END
// every 0 0$1 trigger GetTechNation ( 2 , 2 , state_enabled ) = 0 do
11914: LD_INT 2
11916: PPUSH
11917: LD_INT 2
11919: PPUSH
11920: LD_INT 1
11922: PPUSH
11923: CALL 37465 0 3
11927: PUSH
11928: LD_INT 0
11930: EQUAL
11931: IFFALSE 11943
11933: GO 11935
11935: DISABLE
// ChangeMissionObjectives ( Techs ) ;
11936: LD_STRING Techs
11938: PPUSH
11939: CALL_OW 337
11943: END
// every 0 0$3 trigger IsOk ( Markov ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) do
11944: LD_EXP 35
11948: PPUSH
11949: CALL_OW 302
11953: PUSH
11954: LD_INT 22
11956: PUSH
11957: LD_INT 2
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 2
11966: PUSH
11967: LD_INT 34
11969: PUSH
11970: LD_INT 22
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 35
11979: PUSH
11980: LD_INT 22
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PPUSH
11996: CALL_OW 69
12000: AND
12001: IFFALSE 12108
12003: GO 12005
12005: DISABLE
// begin DialogueOn ;
12006: CALL_OW 6
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_multimissile_ballista ] , [ f_bweapon , ar_multimissile_ballista ] ] ] ) ) ;
12010: LD_INT 22
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 2
12022: PUSH
12023: LD_INT 34
12025: PUSH
12026: LD_INT 22
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 35
12035: PUSH
12036: LD_INT 22
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PPUSH
12052: CALL_OW 69
12056: PPUSH
12057: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12061: LD_INT 10
12063: PPUSH
12064: CALL_OW 68
// Say ( Heike , DH-1-bal ) ;
12068: LD_EXP 28
12072: PPUSH
12073: LD_STRING DH-1-bal
12075: PPUSH
12076: CALL_OW 88
// Say ( Markov , DMar-1-bal ) ;
12080: LD_EXP 35
12084: PPUSH
12085: LD_STRING DMar-1-bal
12087: PPUSH
12088: CALL_OW 88
// Say ( Heike , DH-2-bal ) ;
12092: LD_EXP 28
12096: PPUSH
12097: LD_STRING DH-2-bal
12099: PPUSH
12100: CALL_OW 88
// DialogueOff ;
12104: CALL_OW 7
// end ;
12108: END
// every 0 0$1 trigger IsOk ( Aviradze ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab ] ] ) do
12109: LD_EXP 32
12113: PPUSH
12114: CALL_OW 302
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_INT 2
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 30
12131: PUSH
12132: LD_INT 6
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: AND
12148: IFFALSE 12209
12150: GO 12152
12152: DISABLE
// begin DialogueOn ;
12153: CALL_OW 6
// Say ( Aviradze , DA-1-lab ) ;
12157: LD_EXP 32
12161: PPUSH
12162: LD_STRING DA-1-lab
12164: PPUSH
12165: CALL_OW 88
// Say ( Heike , DH-1-lab ) ;
12169: LD_EXP 28
12173: PPUSH
12174: LD_STRING DH-1-lab
12176: PPUSH
12177: CALL_OW 88
// Say ( Aviradze , DA-2-lab ) ;
12181: LD_EXP 32
12185: PPUSH
12186: LD_STRING DA-2-lab
12188: PPUSH
12189: CALL_OW 88
// Say ( Heike , DH-2-lab ) ;
12193: LD_EXP 28
12197: PPUSH
12198: LD_STRING DH-2-lab
12200: PPUSH
12201: CALL_OW 88
// DialogueOff ;
12205: CALL_OW 7
// end ;
12209: END
// every 0 0$1 trigger IsOk ( Kaia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12210: LD_EXP 33
12214: PPUSH
12215: CALL_OW 302
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 25
12232: PUSH
12233: LD_INT 15
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: AND
12249: PUSH
12250: LD_INT 81
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 69
12264: NOT
12265: AND
12266: IFFALSE 12448
12268: GO 12270
12270: DISABLE
12271: LD_INT 0
12273: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) ;
12274: LD_ADDR_VAR 0 1
12278: PUSH
12279: LD_INT 22
12281: PUSH
12282: LD_INT 2
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: LD_INT 25
12291: PUSH
12292: LD_INT 15
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PPUSH
12303: CALL_OW 69
12307: ST_TO_ADDR
// InGameOn ;
12308: CALL_OW 8
// CenterNowOnUnits ( ape [ 1 ] ) ;
12312: LD_VAR 0 1
12316: PUSH
12317: LD_INT 1
12319: ARRAY
12320: PPUSH
12321: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12325: LD_VAR 0 1
12329: PUSH
12330: LD_INT 1
12332: ARRAY
12333: PPUSH
12334: CALL_OW 122
// Say ( Kaia , DK-1-apesol ) ;
12338: LD_EXP 33
12342: PPUSH
12343: LD_STRING DK-1-apesol
12345: PPUSH
12346: CALL_OW 88
// AddComMoveXY ( ape [ 1 ] , 35 , 28 ) ;
12350: LD_VAR 0 1
12354: PUSH
12355: LD_INT 1
12357: ARRAY
12358: PPUSH
12359: LD_INT 35
12361: PPUSH
12362: LD_INT 28
12364: PPUSH
12365: CALL_OW 171
// AddComMoveXY ( ape [ 1 ] , 36 , 17 ) ;
12369: LD_VAR 0 1
12373: PUSH
12374: LD_INT 1
12376: ARRAY
12377: PPUSH
12378: LD_INT 36
12380: PPUSH
12381: LD_INT 17
12383: PPUSH
12384: CALL_OW 171
// DialogueOn ;
12388: CALL_OW 6
// Say ( Aviradze , DA-1-apesol ) ;
12392: LD_EXP 32
12396: PPUSH
12397: LD_STRING DA-1-apesol
12399: PPUSH
12400: CALL_OW 88
// Say ( Kaia , DK-2-apesol ) ;
12404: LD_EXP 33
12408: PPUSH
12409: LD_STRING DK-2-apesol
12411: PPUSH
12412: CALL_OW 88
// Say ( Aviradze , DA-2-apesol ) ;
12416: LD_EXP 32
12420: PPUSH
12421: LD_STRING DA-2-apesol
12423: PPUSH
12424: CALL_OW 88
// Say ( Kaia , DK-3-apesol ) ;
12428: LD_EXP 33
12432: PPUSH
12433: LD_STRING DK-3-apesol
12435: PPUSH
12436: CALL_OW 88
// DialogueOff ;
12440: CALL_OW 7
// InGameOff ;
12444: CALL_OW 9
// end ;
12448: PPOPN 1
12450: END
// every 0 0$1 trigger IsOk ( Sophia ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) and not FilterAllUnits ( [ f_enemy , 2 ] ) do var ape ;
12451: LD_EXP 34
12455: PPUSH
12456: CALL_OW 302
12460: PUSH
12461: LD_INT 22
12463: PUSH
12464: LD_INT 2
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 25
12473: PUSH
12474: LD_INT 16
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PPUSH
12485: CALL_OW 69
12489: AND
12490: PUSH
12491: LD_INT 81
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PPUSH
12501: CALL_OW 69
12505: NOT
12506: AND
12507: IFFALSE 12792
12509: GO 12511
12511: DISABLE
12512: LD_INT 0
12514: PPUSH
// begin ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) ;
12515: LD_ADDR_VAR 0 1
12519: PUSH
12520: LD_INT 22
12522: PUSH
12523: LD_INT 2
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 25
12532: PUSH
12533: LD_INT 16
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PPUSH
12544: CALL_OW 69
12548: ST_TO_ADDR
// InGameOn ;
12549: CALL_OW 8
// CenterNowOnXY ( 35 , 22 ) ;
12553: LD_INT 35
12555: PPUSH
12556: LD_INT 22
12558: PPUSH
12559: CALL_OW 86
// CreateCratesXY ( 5 , 35 , 22 , true ) ;
12563: LD_INT 5
12565: PPUSH
12566: LD_INT 35
12568: PPUSH
12569: LD_INT 22
12571: PPUSH
12572: LD_INT 1
12574: PPUSH
12575: CALL_OW 54
// ComTurnUnit ( Sophia , ape [ 1 ] ) ;
12579: LD_EXP 34
12583: PPUSH
12584: LD_VAR 0 1
12588: PUSH
12589: LD_INT 1
12591: ARRAY
12592: PPUSH
12593: CALL_OW 119
// CenterNowOnUnits ( ape [ 1 ] ) ;
12597: LD_VAR 0 1
12601: PUSH
12602: LD_INT 1
12604: ARRAY
12605: PPUSH
12606: CALL_OW 87
// ComExitBuilding ( ape [ 1 ] ) ;
12610: LD_VAR 0 1
12614: PUSH
12615: LD_INT 1
12617: ARRAY
12618: PPUSH
12619: CALL_OW 122
// wait ( 0 0$2 ) ;
12623: LD_INT 70
12625: PPUSH
12626: CALL_OW 67
// Say ( Sophia , DS-1-apeeng ) ;
12630: LD_EXP 34
12634: PPUSH
12635: LD_STRING DS-1-apeeng
12637: PPUSH
12638: CALL_OW 88
// if IsOk ( Kamil ) then
12642: LD_EXP 31
12646: PPUSH
12647: CALL_OW 302
12651: IFFALSE 12788
// begin Say ( Kamil , DKam-1-apeeng ) ;
12653: LD_EXP 31
12657: PPUSH
12658: LD_STRING DKam-1-apeeng
12660: PPUSH
12661: CALL_OW 88
// Say ( Sophia , DS-2-apeeng ) ;
12665: LD_EXP 34
12669: PPUSH
12670: LD_STRING DS-2-apeeng
12672: PPUSH
12673: CALL_OW 88
// Say ( Kamil , DKam-2-apeeng ) ;
12677: LD_EXP 31
12681: PPUSH
12682: LD_STRING DKam-2-apeeng
12684: PPUSH
12685: CALL_OW 88
// Say ( Sophia , DS-3-apeeng ) ;
12689: LD_EXP 34
12693: PPUSH
12694: LD_STRING DS-3-apeeng
12696: PPUSH
12697: CALL_OW 88
// if not IsOK ( Kaia ) then
12701: LD_EXP 33
12705: PPUSH
12706: CALL_OW 302
12710: NOT
12711: IFFALSE 12719
// begin InGameOff ;
12713: CALL_OW 9
// exit ;
12717: GO 12792
// end ; Say ( Kaia , DK-1-apeeng ) ;
12719: LD_EXP 33
12723: PPUSH
12724: LD_STRING DK-1-apeeng
12726: PPUSH
12727: CALL_OW 88
// if not IsOk ( Givi ) then
12731: LD_EXP 29
12735: PPUSH
12736: CALL_OW 302
12740: NOT
12741: IFFALSE 12752
// begin Video ( false ) ;
12743: LD_INT 0
12745: PPUSH
12746: CALL 74111 0 1
// exit ;
12750: GO 12792
// end ; Say ( Givi , DG-1-apeeng ) ;
12752: LD_EXP 29
12756: PPUSH
12757: LD_STRING DG-1-apeeng
12759: PPUSH
12760: CALL_OW 88
// Say ( Kaia , DK-2-apeeng ) ;
12764: LD_EXP 33
12768: PPUSH
12769: LD_STRING DK-2-apeeng
12771: PPUSH
12772: CALL_OW 88
// Say ( Kaia , DK-3-apeeng ) ;
12776: LD_EXP 33
12780: PPUSH
12781: LD_STRING DK-3-apeeng
12783: PPUSH
12784: CALL_OW 88
// end ; InGameOff ;
12788: CALL_OW 9
// end ;
12792: PPOPN 1
12794: END
// every 0 0$10 trigger farmerBaseReady and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) do
12795: LD_EXP 4
12799: PUSH
12800: LD_INT 22
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 30
12812: PUSH
12813: LD_INT 0
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PPUSH
12824: CALL_OW 69
12828: AND
12829: IFFALSE 12994
12831: GO 12833
12833: DISABLE
// begin wait ( 0 0$10 ) ;
12834: LD_INT 350
12836: PPUSH
12837: CALL_OW 67
// DialogueOn ;
12841: CALL_OW 6
// CenterNowOnUnits ( Farmer ) ;
12845: LD_EXP 36
12849: PPUSH
12850: CALL_OW 87
// SayRadio ( Farmer , DF-1-distribution ) ;
12854: LD_EXP 36
12858: PPUSH
12859: LD_STRING DF-1-distribution
12861: PPUSH
12862: CALL_OW 94
// Say ( Heike , DH-2-distribution ) ;
12866: LD_EXP 28
12870: PPUSH
12871: LD_STRING DH-2-distribution
12873: PPUSH
12874: CALL_OW 88
// if IsOk ( Kaia ) then
12878: LD_EXP 33
12882: PPUSH
12883: CALL_OW 302
12887: IFFALSE 12948
// begin Say ( Kaia , DK-1-distribution ) ;
12889: LD_EXP 33
12893: PPUSH
12894: LD_STRING DK-1-distribution
12896: PPUSH
12897: CALL_OW 88
// Say ( Heike , DH-1-distribution ) ;
12901: LD_EXP 28
12905: PPUSH
12906: LD_STRING DH-1-distribution
12908: PPUSH
12909: CALL_OW 88
// if IsOk ( Givi ) then
12913: LD_EXP 29
12917: PPUSH
12918: CALL_OW 302
12922: IFFALSE 12948
// begin Say ( Givi , DG-1-distribution ) ;
12924: LD_EXP 29
12928: PPUSH
12929: LD_STRING DG-1-distribution
12931: PPUSH
12932: CALL_OW 88
// Say ( Heike , DH-3-distribution ) ;
12936: LD_EXP 28
12940: PPUSH
12941: LD_STRING DH-3-distribution
12943: PPUSH
12944: CALL_OW 88
// end ; end ; DialogueOff ;
12948: CALL_OW 7
// ChangeMissionObjectives ( Crates1 ) ;
12952: LD_STRING Crates1
12954: PPUSH
12955: CALL_OW 337
// farmerRequestedCrates := 300 ;
12959: LD_ADDR_EXP 16
12963: PUSH
12964: LD_INT 300
12966: ST_TO_ADDR
// Query ( FarmerCrates ) ;
12967: LD_STRING FarmerCrates
12969: PPUSH
12970: CALL_OW 97
// SetAreaMapShow ( collectFarmerArea , 1 ) ;
12974: LD_INT 10
12976: PPUSH
12977: LD_INT 1
12979: PPUSH
12980: CALL_OW 424
// CenterNowOnXY ( 108 , 61 ) ;
12984: LD_INT 108
12986: PPUSH
12987: LD_INT 61
12989: PPUSH
12990: CALL_OW 86
// end ;
12994: END
// every 0 0$1 trigger americanBaseCaptured and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_armoury ] ] ) do var eng ;
12995: LD_EXP 6
12999: PUSH
13000: LD_INT 22
13002: PUSH
13003: LD_INT 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 3
13012: PUSH
13013: LD_INT 57
13015: PUSH
13016: EMPTY
13017: LIST
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: LD_INT 30
13028: PUSH
13029: LD_INT 6
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 30
13038: PUSH
13039: LD_INT 7
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: PPUSH
13056: CALL_OW 69
13060: AND
13061: PUSH
13062: LD_INT 22
13064: PUSH
13065: LD_INT 2
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 3
13074: PUSH
13075: LD_INT 57
13077: PUSH
13078: EMPTY
13079: LIST
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 30
13087: PUSH
13088: LD_INT 4
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: PPUSH
13100: CALL_OW 69
13104: AND
13105: IFFALSE 13269
13107: GO 13109
13109: DISABLE
13110: LD_INT 0
13112: PPUSH
// begin wait ( 0 0$10 ) ;
13113: LD_INT 350
13115: PPUSH
13116: CALL_OW 67
// eng := UnitFilter ( heikeSecondSquad , [ [ f_sex , sex_male ] , [ f_class , 2 ] ] ) ;
13120: LD_ADDR_VAR 0 1
13124: PUSH
13125: LD_EXP 42
13129: PPUSH
13130: LD_INT 26
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 25
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 72
13158: ST_TO_ADDR
// Say ( Heike , DH-1-task ) ;
13159: LD_EXP 28
13163: PPUSH
13164: LD_STRING DH-1-task
13166: PPUSH
13167: CALL_OW 88
// if IsOk ( Sophia ) then
13171: LD_EXP 34
13175: PPUSH
13176: CALL_OW 302
13180: IFFALSE 13220
// begin Say ( Sophia , DS-1-task ) ;
13182: LD_EXP 34
13186: PPUSH
13187: LD_STRING DS-1-task
13189: PPUSH
13190: CALL_OW 88
// Say ( Sophia , DS-2-task ) ;
13194: LD_EXP 34
13198: PPUSH
13199: LD_STRING DS-2-task
13201: PPUSH
13202: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13206: LD_EXP 28
13210: PPUSH
13211: LD_STRING DH-2-task
13213: PPUSH
13214: CALL_OW 88
// end else
13218: GO 13254
// if eng then
13220: LD_VAR 0 1
13224: IFFALSE 13254
// begin Say ( eng [ 1 ] , DArm-1-task ) ;
13226: LD_VAR 0 1
13230: PUSH
13231: LD_INT 1
13233: ARRAY
13234: PPUSH
13235: LD_STRING DArm-1-task
13237: PPUSH
13238: CALL_OW 88
// Say ( Heike , DH-2-task ) ;
13242: LD_EXP 28
13246: PPUSH
13247: LD_STRING DH-2-task
13249: PPUSH
13250: CALL_OW 88
// end ; ChangeMissionObjectives ( BaseConstructed ) ;
13254: LD_STRING BaseConstructed
13256: PPUSH
13257: CALL_OW 337
// allowConvoys := true ;
13261: LD_ADDR_EXP 12
13265: PUSH
13266: LD_INT 1
13268: ST_TO_ADDR
// end ;
13269: PPOPN 1
13271: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var cargo , x , y ;
13272: LD_INT 22
13274: PUSH
13275: LD_INT 4
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 34
13284: PUSH
13285: LD_INT 12
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PPUSH
13296: CALL_OW 69
13300: IFFALSE 13468
13302: GO 13304
13304: DISABLE
13305: LD_INT 0
13307: PPUSH
13308: PPUSH
13309: PPUSH
// begin wait ( 0 0$2 ) ;
13310: LD_INT 70
13312: PPUSH
13313: CALL_OW 67
// cargo := FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) ;
13317: LD_ADDR_VAR 0 1
13321: PUSH
13322: LD_INT 22
13324: PUSH
13325: LD_INT 4
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 34
13334: PUSH
13335: LD_INT 12
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: ST_TO_ADDR
// x := GetX ( cargo [ 1 ] ) ;
13351: LD_ADDR_VAR 0 2
13355: PUSH
13356: LD_VAR 0 1
13360: PUSH
13361: LD_INT 1
13363: ARRAY
13364: PPUSH
13365: CALL_OW 250
13369: ST_TO_ADDR
// y := GetY ( cargo [ 1 ] ) ;
13370: LD_ADDR_VAR 0 3
13374: PUSH
13375: LD_VAR 0 1
13379: PUSH
13380: LD_INT 1
13382: ARRAY
13383: PPUSH
13384: CALL_OW 251
13388: ST_TO_ADDR
// DialogueOn ;
13389: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
13393: LD_VAR 0 2
13397: PPUSH
13398: LD_VAR 0 3
13402: PPUSH
13403: CALL_OW 86
// PlaceSeeing ( x , y , 2 , - 6 ) ;
13407: LD_VAR 0 2
13411: PPUSH
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 2
13419: PPUSH
13420: LD_INT 6
13422: NEG
13423: PPUSH
13424: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
13428: LD_INT 10
13430: PPUSH
13431: CALL_OW 68
// Say ( Heike , DH-1-seecargo ) ;
13435: LD_EXP 28
13439: PPUSH
13440: LD_STRING DH-1-seecargo
13442: PPUSH
13443: CALL_OW 88
// RemoveSeeing ( x , y , 2 ) ;
13447: LD_VAR 0 2
13451: PPUSH
13452: LD_VAR 0 3
13456: PPUSH
13457: LD_INT 2
13459: PPUSH
13460: CALL_OW 331
// DialogueOff ;
13464: CALL_OW 7
// end ;
13468: PPOPN 3
13470: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 300 do
13471: LD_EXP 4
13475: PUSH
13476: LD_EXP 15
13480: PUSH
13481: LD_INT 300
13483: GREATEREQUAL
13484: AND
13485: IFFALSE 13557
13487: GO 13489
13489: DISABLE
// begin DialogueOn ;
13490: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-2 ) ;
13494: LD_EXP 36
13498: PPUSH
13499: LD_STRING DF-1-delivery-2
13501: PPUSH
13502: CALL_OW 94
// Say ( Heike , DH-1-delivery-2 ) ;
13506: LD_EXP 28
13510: PPUSH
13511: LD_STRING DH-1-delivery-2
13513: PPUSH
13514: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-2 ) ;
13518: LD_EXP 36
13522: PPUSH
13523: LD_STRING DF-2-delivery-2
13525: PPUSH
13526: CALL_OW 94
// DialogueOff ;
13530: CALL_OW 7
// ChangeMissionObjectives ( Crates2 ) ;
13534: LD_STRING Crates2
13536: PPUSH
13537: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13541: LD_ADDR_EXP 17
13545: PUSH
13546: LD_INT 63000
13548: ST_TO_ADDR
// farmerRequestedCrates := 600 ;
13549: LD_ADDR_EXP 16
13553: PUSH
13554: LD_INT 600
13556: ST_TO_ADDR
// end ;
13557: END
// every 0 0$1 trigger farmerBaseReady and farmerCrates >= 600 and Difficulty > 1 do
13558: LD_EXP 4
13562: PUSH
13563: LD_EXP 15
13567: PUSH
13568: LD_INT 600
13570: GREATEREQUAL
13571: AND
13572: PUSH
13573: LD_OWVAR 67
13577: PUSH
13578: LD_INT 1
13580: GREATER
13581: AND
13582: IFFALSE 13748
13584: GO 13586
13586: DISABLE
// begin DialogueOn ;
13587: CALL_OW 6
// SayRadio ( Farmer , DF-1-delivery-3 ) ;
13591: LD_EXP 36
13595: PPUSH
13596: LD_STRING DF-1-delivery-3
13598: PPUSH
13599: CALL_OW 94
// Say ( Heike , DH-1-delivery-3 ) ;
13603: LD_EXP 28
13607: PPUSH
13608: LD_STRING DH-1-delivery-3
13610: PPUSH
13611: CALL_OW 88
// SayRadio ( Farmer , DF-2-delivery-3 ) ;
13615: LD_EXP 36
13619: PPUSH
13620: LD_STRING DF-2-delivery-3
13622: PPUSH
13623: CALL_OW 94
// if IsOk ( Kaia ) then
13627: LD_EXP 33
13631: PPUSH
13632: CALL_OW 302
13636: IFFALSE 13686
// begin Say ( Kaia , DK-1-delivery-3 ) ;
13638: LD_EXP 33
13642: PPUSH
13643: LD_STRING DK-1-delivery-3
13645: PPUSH
13646: CALL_OW 88
// Say ( Heike , DH-2-delivery-3 ) ;
13650: LD_EXP 28
13654: PPUSH
13655: LD_STRING DH-2-delivery-3
13657: PPUSH
13658: CALL_OW 88
// Say ( Givi , DG-1-delivery-3 ) ;
13662: LD_EXP 29
13666: PPUSH
13667: LD_STRING DG-1-delivery-3
13669: PPUSH
13670: CALL_OW 88
// Say ( Mike , DM-1-delivery-3 ) ;
13674: LD_EXP 30
13678: PPUSH
13679: LD_STRING DM-1-delivery-3
13681: PPUSH
13682: CALL_OW 88
// end ; DialogueOff ;
13686: CALL_OW 7
// if Difficulty = 2 then
13690: LD_OWVAR 67
13694: PUSH
13695: LD_INT 2
13697: EQUAL
13698: IFFALSE 13725
// begin ChangeMissionObjectives ( Crates3 ) ;
13700: LD_STRING Crates3
13702: PPUSH
13703: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13707: LD_ADDR_EXP 17
13711: PUSH
13712: LD_INT 63000
13714: ST_TO_ADDR
// farmerRequestedCrates := 900 ;
13715: LD_ADDR_EXP 16
13719: PUSH
13720: LD_INT 900
13722: ST_TO_ADDR
// end else
13723: GO 13748
// begin ChangeMissionObjectives ( Crates4 ) ;
13725: LD_STRING Crates4
13727: PPUSH
13728: CALL_OW 337
// farmerCratesCounter := 30 30$00 ;
13732: LD_ADDR_EXP 17
13736: PUSH
13737: LD_INT 63000
13739: ST_TO_ADDR
// farmerRequestedCrates := 1200 ;
13740: LD_ADDR_EXP 16
13744: PUSH
13745: LD_INT 1200
13747: ST_TO_ADDR
// end ; end ;
13748: END
// every 0 0$2 trigger farmerBaseReady and farmerCrates >= [ 600 , 900 , 1200 , 1400 ] [ Difficulty ] and farmerRequestedCrates <= farmerCratesCounter do
13749: LD_EXP 4
13753: PUSH
13754: LD_EXP 15
13758: PUSH
13759: LD_INT 600
13761: PUSH
13762: LD_INT 900
13764: PUSH
13765: LD_INT 1200
13767: PUSH
13768: LD_INT 1400
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: PUSH
13777: LD_OWVAR 67
13781: ARRAY
13782: GREATEREQUAL
13783: AND
13784: PUSH
13785: LD_EXP 16
13789: PUSH
13790: LD_EXP 17
13794: LESSEQUAL
13795: AND
13796: IFFALSE 13882
13798: GO 13800
13800: DISABLE
// begin retreatAllowed := true ;
13801: LD_ADDR_EXP 11
13805: PUSH
13806: LD_INT 1
13808: ST_TO_ADDR
// display_strings := [ ] ;
13809: LD_ADDR_OWVAR 47
13813: PUSH
13814: EMPTY
13815: ST_TO_ADDR
// DialogueOn ;
13816: CALL_OW 6
// InGameOn ;
13820: CALL_OW 8
// SayRadio ( Omar , DO-radio-end ) ;
13824: LD_EXP 37
13828: PPUSH
13829: LD_STRING DO-radio-end
13831: PPUSH
13832: CALL_OW 94
// Say ( Heike , DH-1-radio-end ) ;
13836: LD_EXP 28
13840: PPUSH
13841: LD_STRING DH-1-radio-end
13843: PPUSH
13844: CALL_OW 88
// InGameOff ;
13848: CALL_OW 9
// DialogueOff ;
13852: CALL_OW 7
// ChangeMissionObjectives ( Retreat ) ;
13856: LD_STRING Retreat
13858: PPUSH
13859: CALL_OW 337
// wait ( 0 0$2 ) ;
13863: LD_INT 70
13865: PPUSH
13866: CALL_OW 67
// Say ( Heike , DH-2-radio-end ) ;
13870: LD_EXP 28
13874: PPUSH
13875: LD_STRING DH-2-radio-end
13877: PPUSH
13878: CALL_OW 88
// end ;
13882: END
// every 0 0$1 trigger retreatAllowed do var tmp , i ;
13883: LD_EXP 11
13887: IFFALSE 14018
13889: GO 13891
13891: DISABLE
13892: LD_INT 0
13894: PPUSH
13895: PPUSH
// begin SetAreaMapShow ( collectFarmerArea , 0 ) ;
13896: LD_INT 10
13898: PPUSH
13899: LD_INT 0
13901: PPUSH
13902: CALL_OW 424
// tmp := UnitFilter ( farmerSquad , [ f_class , 2 ] ) ;
13906: LD_ADDR_VAR 0 1
13910: PUSH
13911: LD_EXP 39
13915: PPUSH
13916: LD_INT 25
13918: PUSH
13919: LD_INT 2
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PPUSH
13926: CALL_OW 72
13930: ST_TO_ADDR
// if tmp and HexInfo ( 102 , 69 ) = 0 then
13931: LD_VAR 0 1
13935: PUSH
13936: LD_INT 102
13938: PPUSH
13939: LD_INT 69
13941: PPUSH
13942: CALL_OW 428
13946: PUSH
13947: LD_INT 0
13949: EQUAL
13950: AND
13951: IFFALSE 14018
// begin for i in tmp do
13953: LD_ADDR_VAR 0 2
13957: PUSH
13958: LD_VAR 0 1
13962: PUSH
13963: FOR_IN
13964: IFFALSE 13988
// if IsInUnit ( i ) then
13966: LD_VAR 0 2
13970: PPUSH
13971: CALL_OW 310
13975: IFFALSE 13986
// ComExitBuilding ( i ) ;
13977: LD_VAR 0 2
13981: PPUSH
13982: CALL_OW 122
13986: GO 13963
13988: POP
13989: POP
// AddComBuild ( tmp , b_breastwork , 102 , 69 , 2 ) ;
13990: LD_VAR 0 1
13994: PPUSH
13995: LD_INT 31
13997: PPUSH
13998: LD_INT 102
14000: PPUSH
14001: LD_INT 69
14003: PPUSH
14004: LD_INT 2
14006: PPUSH
14007: CALL_OW 205
// wait ( 0 0$3 ) ;
14011: LD_INT 105
14013: PPUSH
14014: CALL_OW 67
// end ; end ;
14018: PPOPN 2
14020: END
// every 0 0$1 trigger not retreatAllowed and IsDead ( arDepot ) do
14021: LD_EXP 11
14025: NOT
14026: PUSH
14027: LD_INT 5
14029: PPUSH
14030: CALL_OW 301
14034: AND
14035: IFFALSE 14067
14037: GO 14039
14039: DISABLE
// begin DialogueOn ;
14040: CALL_OW 6
// SayRadio ( Farmer , DF-1-failure ) ;
14044: LD_EXP 36
14048: PPUSH
14049: LD_STRING DF-1-failure
14051: PPUSH
14052: CALL_OW 94
// DialogueOff ;
14056: CALL_OW 7
// YouLost ( FarmerDepot ) ;
14060: LD_STRING FarmerDepot
14062: PPUSH
14063: CALL_OW 104
// end ;
14067: END
// every 0 0$1 trigger retreatAllowed and GetDistUnits ( Heike , Farmer ) < 12 and not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) do var i , max , tmp ;
14068: LD_EXP 11
14072: PUSH
14073: LD_EXP 28
14077: PPUSH
14078: LD_EXP 36
14082: PPUSH
14083: CALL_OW 296
14087: PUSH
14088: LD_INT 12
14090: LESS
14091: AND
14092: PUSH
14093: LD_INT 81
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 21
14105: PUSH
14106: LD_INT 1
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 69
14121: NOT
14122: AND
14123: IFFALSE 14787
14125: GO 14127
14127: DISABLE
14128: LD_INT 0
14130: PPUSH
14131: PPUSH
14132: PPUSH
// begin allowConvoys := false ;
14133: LD_ADDR_EXP 12
14137: PUSH
14138: LD_INT 0
14140: ST_TO_ADDR
// InGameOn ;
14141: CALL_OW 8
// ComTurnUnit ( Heike , Farmer ) ;
14145: LD_EXP 28
14149: PPUSH
14150: LD_EXP 36
14154: PPUSH
14155: CALL_OW 119
// ComTurnUnit ( Farmer , Heike ) ;
14159: LD_EXP 36
14163: PPUSH
14164: LD_EXP 28
14168: PPUSH
14169: CALL_OW 119
// CenterNowOnUnits ( Farmer ) ;
14173: LD_EXP 36
14177: PPUSH
14178: CALL_OW 87
// Say ( Heike , DH-1-end ) ;
14182: LD_EXP 28
14186: PPUSH
14187: LD_STRING DH-1-end
14189: PPUSH
14190: CALL_OW 88
// Say ( Farmer , DF-1-end ) ;
14194: LD_EXP 36
14198: PPUSH
14199: LD_STRING DF-1-end
14201: PPUSH
14202: CALL_OW 88
// Say ( Farmer , DF-2-end ) ;
14206: LD_EXP 36
14210: PPUSH
14211: LD_STRING DF-2-end
14213: PPUSH
14214: CALL_OW 88
// Say ( Heike , DH-2-end ) ;
14218: LD_EXP 28
14222: PPUSH
14223: LD_STRING DH-2-end
14225: PPUSH
14226: CALL_OW 88
// Say ( Farmer , DF-3-end ) ;
14230: LD_EXP 36
14234: PPUSH
14235: LD_STRING DF-3-end
14237: PPUSH
14238: CALL_OW 88
// Say ( Heike , DH-3-end ) ;
14242: LD_EXP 28
14246: PPUSH
14247: LD_STRING DH-3-end
14249: PPUSH
14250: CALL_OW 88
// Say ( Givi , DG-1-end ) ;
14254: LD_EXP 29
14258: PPUSH
14259: LD_STRING DG-1-end
14261: PPUSH
14262: CALL_OW 88
// Say ( Heike , DH-4-end ) ;
14266: LD_EXP 28
14270: PPUSH
14271: LD_STRING DH-4-end
14273: PPUSH
14274: CALL_OW 88
// Say ( Farmer , DF-4-end ) ;
14278: LD_EXP 36
14282: PPUSH
14283: LD_STRING DF-4-end
14285: PPUSH
14286: CALL_OW 88
// Say ( Heike , DH-5-end ) ;
14290: LD_EXP 28
14294: PPUSH
14295: LD_STRING DH-5-end
14297: PPUSH
14298: CALL_OW 88
// Say ( Farmer , DF-5-end ) ;
14302: LD_EXP 36
14306: PPUSH
14307: LD_STRING DF-5-end
14309: PPUSH
14310: CALL_OW 88
// InGameOff ;
14314: CALL_OW 9
// allowCargoEvacuation := true ;
14318: LD_ADDR_EXP 7
14322: PUSH
14323: LD_INT 1
14325: ST_TO_ADDR
// max := [ 4 , 3 , 2 , 1 ] [ Difficulty ] ;
14326: LD_ADDR_VAR 0 2
14330: PUSH
14331: LD_INT 4
14333: PUSH
14334: LD_INT 3
14336: PUSH
14337: LD_INT 2
14339: PUSH
14340: LD_INT 1
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: PUSH
14349: LD_OWVAR 67
14353: ARRAY
14354: ST_TO_ADDR
// if farmerSquad < max then
14355: LD_EXP 39
14359: PUSH
14360: LD_VAR 0 2
14364: LESS
14365: IFFALSE 14377
// max := farmerSquad ;
14367: LD_ADDR_VAR 0 2
14371: PUSH
14372: LD_EXP 39
14376: ST_TO_ADDR
// for i := 1 to max do
14377: LD_ADDR_VAR 0 1
14381: PUSH
14382: DOUBLE
14383: LD_INT 1
14385: DEC
14386: ST_TO_ADDR
14387: LD_VAR 0 2
14391: PUSH
14392: FOR_TO
14393: IFFALSE 14431
// begin SetSide ( farmerSquad [ 1 ] , 2 ) ;
14395: LD_EXP 39
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: LD_INT 2
14406: PPUSH
14407: CALL_OW 235
// farmerSquad := Delete ( farmerSquad , 1 ) ;
14411: LD_ADDR_EXP 39
14415: PUSH
14416: LD_EXP 39
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 3
14428: ST_TO_ADDR
// end ;
14429: GO 14392
14431: POP
14432: POP
// for i in Farmer ^ farmerSquad do
14433: LD_ADDR_VAR 0 1
14437: PUSH
14438: LD_EXP 36
14442: PUSH
14443: LD_EXP 39
14447: ADD
14448: PUSH
14449: FOR_IN
14450: IFFALSE 14489
// begin if IsInUnit ( i ) then
14452: LD_VAR 0 1
14456: PPUSH
14457: CALL_OW 310
14461: IFFALSE 14472
// ComExitBuilding ( i ) ;
14463: LD_VAR 0 1
14467: PPUSH
14468: CALL_OW 122
// AddComMoveXY ( i , 102 , 7 ) ;
14472: LD_VAR 0 1
14476: PPUSH
14477: LD_INT 102
14479: PPUSH
14480: LD_INT 7
14482: PPUSH
14483: CALL_OW 171
// end ;
14487: GO 14449
14489: POP
14490: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) diff arDepot do
14491: LD_ADDR_VAR 0 1
14495: PUSH
14496: LD_INT 22
14498: PUSH
14499: LD_INT 5
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 21
14508: PUSH
14509: LD_INT 3
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PPUSH
14520: CALL_OW 69
14524: PUSH
14525: LD_INT 5
14527: DIFF
14528: PUSH
14529: FOR_IN
14530: IFFALSE 14546
// SetSide ( i , 2 ) ;
14532: LD_VAR 0 1
14536: PPUSH
14537: LD_INT 2
14539: PPUSH
14540: CALL_OW 235
14544: GO 14529
14546: POP
14547: POP
// wait ( 0 0$2 ) ;
14548: LD_INT 70
14550: PPUSH
14551: CALL_OW 67
// Say ( Heike , DH-6-end ) ;
14555: LD_EXP 28
14559: PPUSH
14560: LD_STRING DH-6-end
14562: PPUSH
14563: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
14567: LD_INT 35
14569: PPUSH
14570: CALL_OW 67
// tmp := UnitFilter ( Farmer ^ farmerSquad , [ f_inarea , northRoad ] ) ;
14574: LD_ADDR_VAR 0 3
14578: PUSH
14579: LD_EXP 36
14583: PUSH
14584: LD_EXP 39
14588: ADD
14589: PPUSH
14590: LD_INT 95
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PPUSH
14600: CALL_OW 72
14604: ST_TO_ADDR
// if tmp then
14605: LD_VAR 0 3
14609: IFFALSE 14653
// for i in tmp do
14611: LD_ADDR_VAR 0 1
14615: PUSH
14616: LD_VAR 0 3
14620: PUSH
14621: FOR_IN
14622: IFFALSE 14651
// begin farmerSquad := farmerSquad diff i ;
14624: LD_ADDR_EXP 39
14628: PUSH
14629: LD_EXP 39
14633: PUSH
14634: LD_VAR 0 1
14638: DIFF
14639: ST_TO_ADDR
// RemoveUnit ( i ) ;
14640: LD_VAR 0 1
14644: PPUSH
14645: CALL_OW 64
// end ;
14649: GO 14621
14651: POP
14652: POP
// until farmerSquad = [ ] and not IsPlaced ( Farmer ) ;
14653: LD_EXP 39
14657: PUSH
14658: EMPTY
14659: EQUAL
14660: PUSH
14661: LD_EXP 36
14665: PPUSH
14666: CALL_OW 305
14670: NOT
14671: AND
14672: IFFALSE 14567
// if farmerHumanLoseCounter = 0 then
14674: LD_EXP 20
14678: PUSH
14679: LD_INT 0
14681: EQUAL
14682: IFFALSE 14691
// SetAchievement ( ACH_BABY ) ;
14684: LD_STRING ACH_BABY
14686: PPUSH
14687: CALL_OW 543
// wait ( 1 1$00 ) ;
14691: LD_INT 2100
14693: PPUSH
14694: CALL_OW 67
// SendAttack ;
14698: CALL 6163 0 0
// Say ( Heike , DH-7-end ) ;
14702: LD_EXP 28
14706: PPUSH
14707: LD_STRING DH-7-end
14709: PPUSH
14710: CALL_OW 88
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
14714: LD_ADDR_VAR 0 1
14718: PUSH
14719: DOUBLE
14720: LD_INT 1
14722: DEC
14723: ST_TO_ADDR
14724: LD_INT 2
14726: PUSH
14727: LD_INT 3
14729: PUSH
14730: LD_INT 4
14732: PUSH
14733: LD_INT 4
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: PUSH
14742: LD_OWVAR 67
14746: ARRAY
14747: PUSH
14748: FOR_TO
14749: IFFALSE 14785
// begin wait ( [ 2 2$00 , 1 1$40 , 1 1$30 , 1 1$20 ] [ Difficulty ] ) ;
14751: LD_INT 4200
14753: PUSH
14754: LD_INT 3500
14756: PUSH
14757: LD_INT 3150
14759: PUSH
14760: LD_INT 2800
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: PUSH
14769: LD_OWVAR 67
14773: ARRAY
14774: PPUSH
14775: CALL_OW 67
// SendAttack ;
14779: CALL 6163 0 0
// end ;
14783: GO 14748
14785: POP
14786: POP
// end ;
14787: PPOPN 3
14789: END
// every 2 2$00 trigger allowCargoEvacuation and omarCargoCounter > 0 do
14790: LD_EXP 7
14794: PUSH
14795: LD_EXP 21
14799: PUSH
14800: LD_INT 0
14802: GREATER
14803: AND
14804: IFFALSE 14814
14806: GO 14808
14808: DISABLE
// begin enable ;
14809: ENABLE
// CargoEvacuation ;
14810: CALL 3660 0 0
// end ;
14814: END
// every 0 0$2 trigger farmerCratesCounter <= 9 9$00 do
14815: LD_EXP 17
14819: PUSH
14820: LD_INT 18900
14822: LESSEQUAL
14823: IFFALSE 14872
14825: GO 14827
14827: DISABLE
// begin DialogueOn ;
14828: CALL_OW 6
// SayRadio ( Farmer , DF-1-distribution-a ) ;
14832: LD_EXP 36
14836: PPUSH
14837: LD_STRING DF-1-distribution-a
14839: PPUSH
14840: CALL_OW 94
// Say ( Heike , DH-1-distribution-a ) ;
14844: LD_EXP 28
14848: PPUSH
14849: LD_STRING DH-1-distribution-a
14851: PPUSH
14852: CALL_OW 88
// SayRadio ( Farmer , DF-2-distribution-a ) ;
14856: LD_EXP 36
14860: PPUSH
14861: LD_STRING DF-2-distribution-a
14863: PPUSH
14864: CALL_OW 94
// DialogueOff ;
14868: CALL_OW 7
// end ;
14872: END
// every 0 0$2 trigger farmerCratesCounter <= 0 0$00 do
14873: LD_EXP 17
14877: PUSH
14878: LD_INT 0
14880: LESSEQUAL
14881: IFFALSE 14913
14883: GO 14885
14885: DISABLE
// begin DialogueOn ;
14886: CALL_OW 6
// SayRadio ( Farmer , DF-3-distribution-a ) ;
14890: LD_EXP 36
14894: PPUSH
14895: LD_STRING DF-3-distribution-a
14897: PPUSH
14898: CALL_OW 94
// YouLost ( Distribution ) ;
14902: LD_STRING Distribution
14904: PPUSH
14905: CALL_OW 104
// DialogueOff ;
14909: CALL_OW 7
// end ;
14913: END
// every 0 0$1 trigger vehCounter >= 2 do
14914: LD_EXP 22
14918: PUSH
14919: LD_INT 2
14921: GREATEREQUAL
14922: IFFALSE 14934
14924: GO 14926
14926: DISABLE
// ChangeMissionObjectives ( VehConstructed ) ;
14927: LD_STRING VehConstructed
14929: PPUSH
14930: CALL_OW 337
14934: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_cargo_bay ] ] ) do
14935: LD_INT 22
14937: PUSH
14938: LD_INT 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 34
14947: PUSH
14948: LD_INT 12
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PPUSH
14959: CALL_OW 69
14963: IFFALSE 15023
14965: GO 14967
14967: DISABLE
// begin DialogueOn ;
14968: CALL_OW 6
// Say ( Heike , DH-1-truck ) ;
14972: LD_EXP 28
14976: PPUSH
14977: LD_STRING DH-1-truck
14979: PPUSH
14980: CALL_OW 88
// if IsOk ( Markov ) then
14984: LD_EXP 35
14988: PPUSH
14989: CALL_OW 302
14993: IFFALSE 15019
// begin Say ( Markov , DMar-1-truck ) ;
14995: LD_EXP 35
14999: PPUSH
15000: LD_STRING DMar-1-truck
15002: PPUSH
15003: CALL_OW 88
// Say ( Heike , DH-2-truck ) ;
15007: LD_EXP 28
15011: PPUSH
15012: LD_STRING DH-2-truck
15014: PPUSH
15015: CALL_OW 88
// end ; DialogueOff ;
15019: CALL_OW 7
// end ;
15023: END
// export function EmptyCargoDialog ; var randomMen , randomWomen ; begin
15024: LD_INT 0
15026: PPUSH
15027: PPUSH
15028: PPUSH
// if IsOk ( Givi ) then
15029: LD_EXP 29
15033: PPUSH
15034: CALL_OW 302
15038: IFFALSE 15054
// begin Say ( Givi , DG-1-nocargo ) ;
15040: LD_EXP 29
15044: PPUSH
15045: LD_STRING DG-1-nocargo
15047: PPUSH
15048: CALL_OW 88
// exit ;
15052: GO 15150
// end ; randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15054: LD_ADDR_VAR 0 2
15058: PUSH
15059: LD_EXP 42
15063: PPUSH
15064: LD_INT 26
15066: PUSH
15067: LD_INT 1
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 72
15078: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15079: LD_ADDR_VAR 0 3
15083: PUSH
15084: LD_EXP 42
15088: PPUSH
15089: LD_INT 26
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PPUSH
15099: CALL_OW 72
15103: ST_TO_ADDR
// if randomMen then
15104: LD_VAR 0 2
15108: IFFALSE 15128
// Say ( randomMen [ 1 ] , DArm-1-nocargo ) else
15110: LD_VAR 0 2
15114: PUSH
15115: LD_INT 1
15117: ARRAY
15118: PPUSH
15119: LD_STRING DArm-1-nocargo
15121: PPUSH
15122: CALL_OW 88
15126: GO 15150
// if randomWomen then
15128: LD_VAR 0 3
15132: IFFALSE 15150
// Say ( randomWomen [ 1 ] , DArf-1-nocargo ) ;
15134: LD_VAR 0 3
15138: PUSH
15139: LD_INT 1
15141: ARRAY
15142: PPUSH
15143: LD_STRING DArf-1-nocargo
15145: PPUSH
15146: CALL_OW 88
// end ;
15150: LD_VAR 0 1
15154: RET
// export function IncomingAttack ; begin
15155: LD_INT 0
15157: PPUSH
// if attackWave = 1 then
15158: LD_EXP 19
15162: PUSH
15163: LD_INT 1
15165: EQUAL
15166: IFFALSE 15237
// begin DialogueOn ;
15168: CALL_OW 6
// SayRadio ( Omar , DO-1-radio-1 ) ;
15172: LD_EXP 37
15176: PPUSH
15177: LD_STRING DO-1-radio-1
15179: PPUSH
15180: CALL_OW 94
// Say ( Heike , DH-1-radio-1- ) ;
15184: LD_EXP 28
15188: PPUSH
15189: LD_STRING DH-1-radio-1-
15191: PPUSH
15192: CALL_OW 88
// if IsOk ( Markov ) then
15196: LD_EXP 35
15200: PPUSH
15201: CALL_OW 302
15205: IFFALSE 15231
// begin Say ( Markov , DMar-1-radio-1 ) ;
15207: LD_EXP 35
15211: PPUSH
15212: LD_STRING DMar-1-radio-1
15214: PPUSH
15215: CALL_OW 88
// Say ( Heike , DH-2-radio-1 ) ;
15219: LD_EXP 28
15223: PPUSH
15224: LD_STRING DH-2-radio-1
15226: PPUSH
15227: CALL_OW 88
// end ; DialogueOff ;
15231: CALL_OW 7
// end else
15235: GO 15261
// begin SayRadio ( Omar , DO-1-radio-u ) ;
15237: LD_EXP 37
15241: PPUSH
15242: LD_STRING DO-1-radio-u
15244: PPUSH
15245: CALL_OW 94
// Say ( Heike , DH-1-radio-u ) ;
15249: LD_EXP 28
15253: PPUSH
15254: LD_STRING DH-1-radio-u
15256: PPUSH
15257: CALL_OW 88
// end ; end ;
15261: LD_VAR 0 1
15265: RET
// every 0 0$1 trigger UnitFilter ( usForces , [ f_inarea , westRoad ] ) do var i ;
15266: LD_EXP 44
15270: PPUSH
15271: LD_INT 95
15273: PUSH
15274: LD_INT 8
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PPUSH
15281: CALL_OW 72
15285: IFFALSE 15388
15287: GO 15289
15289: DISABLE
15290: LD_INT 0
15292: PPUSH
// begin enable ;
15293: ENABLE
// for i in UnitFilter ( usForces , [ f_inarea , westRoad ] ) do
15294: LD_ADDR_VAR 0 1
15298: PUSH
15299: LD_EXP 44
15303: PPUSH
15304: LD_INT 95
15306: PUSH
15307: LD_INT 8
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PPUSH
15314: CALL_OW 72
15318: PUSH
15319: FOR_IN
15320: IFFALSE 15349
// begin usForces := usForces diff i ;
15322: LD_ADDR_EXP 44
15326: PUSH
15327: LD_EXP 44
15331: PUSH
15332: LD_VAR 0 1
15336: DIFF
15337: ST_TO_ADDR
// RemoveUnit ( i ) ;
15338: LD_VAR 0 1
15342: PPUSH
15343: CALL_OW 64
// end ;
15347: GO 15319
15349: POP
15350: POP
// if not americanHasEscaped and attackWave = 1 then
15351: LD_EXP 8
15355: NOT
15356: PUSH
15357: LD_EXP 19
15361: PUSH
15362: LD_INT 1
15364: EQUAL
15365: AND
15366: IFFALSE 15388
// begin americanHasEscaped := true ;
15368: LD_ADDR_EXP 8
15372: PUSH
15373: LD_INT 1
15375: ST_TO_ADDR
// Say ( Heike , DH-2-assault-a ) ;
15376: LD_EXP 28
15380: PPUSH
15381: LD_STRING DH-2-assault-a
15383: PPUSH
15384: CALL_OW 88
// end ; end ;
15388: PPOPN 1
15390: END
// every 0 0$1 trigger FilterUnitsInArea ( farmerBase , [ f_side , 1 ] ) and not retreatAllowed do
15391: LD_INT 4
15393: PPUSH
15394: LD_INT 22
15396: PUSH
15397: LD_INT 1
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 70
15408: PUSH
15409: LD_EXP 11
15413: NOT
15414: AND
15415: IFFALSE 15432
15417: GO 15419
15419: DISABLE
// SayRadio ( Farmer , DF-1-attack ) ;
15420: LD_EXP 36
15424: PPUSH
15425: LD_STRING DF-1-attack
15427: PPUSH
15428: CALL_OW 94
15432: END
// every 0 0$1 trigger GetSide ( arDepot ) = 2 do
15433: LD_INT 5
15435: PPUSH
15436: CALL_OW 255
15440: PUSH
15441: LD_INT 2
15443: EQUAL
15444: IFFALSE 15460
15446: GO 15448
15448: DISABLE
// begin enable ;
15449: ENABLE
// SetSide ( arDepot , 5 ) ;
15450: LD_INT 5
15452: PPUSH
15453: LD_INT 5
15455: PPUSH
15456: CALL_OW 235
// end ;
15460: END
// every 0 0$30 trigger not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) and not FilterAllUnits ( [ f_side , 4 ] ) and not retreatAllowed and farmerCrates > 90 and FilterUnitsInArea ( americanBaseArea , [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) do var randomMen , randomWomen , speaker , place , depot ;
15461: LD_INT 22
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PPUSH
15485: CALL_OW 69
15489: NOT
15490: PUSH
15491: LD_INT 22
15493: PUSH
15494: LD_INT 4
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PPUSH
15501: CALL_OW 69
15505: NOT
15506: AND
15507: PUSH
15508: LD_EXP 11
15512: NOT
15513: AND
15514: PUSH
15515: LD_EXP 15
15519: PUSH
15520: LD_INT 90
15522: GREATER
15523: AND
15524: PUSH
15525: LD_INT 7
15527: PPUSH
15528: LD_INT 22
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 21
15540: PUSH
15541: LD_INT 1
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PPUSH
15552: CALL_OW 70
15556: AND
15557: PUSH
15558: LD_INT 22
15560: PUSH
15561: LD_INT 2
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 50
15570: PUSH
15571: EMPTY
15572: LIST
15573: PUSH
15574: LD_INT 30
15576: PUSH
15577: LD_INT 0
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 69
15593: AND
15594: IFFALSE 16387
15596: GO 15598
15598: DISABLE
15599: LD_INT 0
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
15605: PPUSH
// begin depot := usDepot ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_INT 11
15613: ST_TO_ADDR
// if not depot then
15614: LD_VAR 0 5
15618: NOT
15619: IFFALSE 15659
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
15621: LD_ADDR_VAR 0 5
15625: PUSH
15626: LD_INT 22
15628: PUSH
15629: LD_INT 2
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 30
15638: PUSH
15639: LD_INT 0
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PPUSH
15650: CALL_OW 69
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: ST_TO_ADDR
// randomMen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) ;
15659: LD_ADDR_VAR 0 1
15663: PUSH
15664: LD_EXP 42
15668: PPUSH
15669: LD_INT 26
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 72
15683: ST_TO_ADDR
// randomWomen := UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_EXP 42
15693: PPUSH
15694: LD_INT 26
15696: PUSH
15697: LD_INT 2
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PPUSH
15704: CALL_OW 72
15708: ST_TO_ADDR
// if IsOk ( Kaia ) then
15709: LD_EXP 33
15713: PPUSH
15714: CALL_OW 302
15718: IFFALSE 15739
// speaker := [ Kaia , DK ] else
15720: LD_ADDR_VAR 0 3
15724: PUSH
15725: LD_EXP 33
15729: PUSH
15730: LD_STRING DK
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: ST_TO_ADDR
15737: GO 15819
// if randomMen then
15739: LD_VAR 0 1
15743: IFFALSE 15778
// speaker := [ randomMen [ rand ( 1 , randomMen ) ] , DArm ] else
15745: LD_ADDR_VAR 0 3
15749: PUSH
15750: LD_VAR 0 1
15754: PUSH
15755: LD_INT 1
15757: PPUSH
15758: LD_VAR 0 1
15762: PPUSH
15763: CALL_OW 12
15767: ARRAY
15768: PUSH
15769: LD_STRING DArm
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
15776: GO 15819
// if randomWomen then
15778: LD_VAR 0 2
15782: IFFALSE 15817
// speaker := [ randomWomen [ rand ( 1 , randomWomen ) ] , DArf ] else
15784: LD_ADDR_VAR 0 3
15788: PUSH
15789: LD_VAR 0 2
15793: PUSH
15794: LD_INT 1
15796: PPUSH
15797: LD_VAR 0 2
15801: PPUSH
15802: CALL_OW 12
15806: ARRAY
15807: PUSH
15808: LD_STRING DArf
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: ST_TO_ADDR
15815: GO 15819
// exit ;
15817: GO 16387
// if IsInUnit ( speaker [ 1 ] ) then
15819: LD_VAR 0 3
15823: PUSH
15824: LD_INT 1
15826: ARRAY
15827: PPUSH
15828: CALL_OW 310
15832: IFFALSE 15855
// place := IsInUnit ( speaker [ 1 ] ) else
15834: LD_ADDR_VAR 0 4
15838: PUSH
15839: LD_VAR 0 3
15843: PUSH
15844: LD_INT 1
15846: ARRAY
15847: PPUSH
15848: CALL_OW 310
15852: ST_TO_ADDR
15853: GO 15869
// place := speaker [ 1 ] ;
15855: LD_ADDR_VAR 0 4
15859: PUSH
15860: LD_VAR 0 3
15864: PUSH
15865: LD_INT 1
15867: ARRAY
15868: ST_TO_ADDR
// CenterNowOnUnits ( place ) ;
15869: LD_VAR 0 4
15873: PPUSH
15874: CALL_OW 87
// PrepareIbrahim ( GetX ( place ) , GetY ( place ) ) ;
15878: LD_VAR 0 4
15882: PPUSH
15883: CALL_OW 250
15887: PPUSH
15888: LD_VAR 0 4
15892: PPUSH
15893: CALL_OW 251
15897: PPUSH
15898: CALL 2147 0 2
// wait ( 0 0$2 ) ;
15902: LD_INT 70
15904: PPUSH
15905: CALL_OW 67
// if not IsPlaced ( Ibrahim ) then
15909: LD_EXP 38
15913: PPUSH
15914: CALL_OW 305
15918: NOT
15919: IFFALSE 15923
// exit ;
15921: GO 16387
// allowConvoys := false ;
15923: LD_ADDR_EXP 12
15927: PUSH
15928: LD_INT 0
15930: ST_TO_ADDR
// InGameOn ;
15931: CALL_OW 8
// wait ( 0 0$1 ) ;
15935: LD_INT 35
15937: PPUSH
15938: CALL_OW 67
// Say ( Ibrahim , DI-1-land ) ;
15942: LD_EXP 38
15946: PPUSH
15947: LD_STRING DI-1-land
15949: PPUSH
15950: CALL_OW 88
// if IsInUnit ( speaker [ 1 ] ) then
15954: LD_VAR 0 3
15958: PUSH
15959: LD_INT 1
15961: ARRAY
15962: PPUSH
15963: CALL_OW 310
15967: IFFALSE 15982
// ComExit ( speaker [ 1 ] ) ;
15969: LD_VAR 0 3
15973: PUSH
15974: LD_INT 1
15976: ARRAY
15977: PPUSH
15978: CALL 74527 0 1
// AddComMoveUnit ( speaker [ 1 ] , Ibrahim ) ;
15982: LD_VAR 0 3
15986: PUSH
15987: LD_INT 1
15989: ARRAY
15990: PPUSH
15991: LD_EXP 38
15995: PPUSH
15996: CALL_OW 172
// AddComTurnUnit ( speaker [ 1 ] , Ibrahim ) ;
16000: LD_VAR 0 3
16004: PUSH
16005: LD_INT 1
16007: ARRAY
16008: PPUSH
16009: LD_EXP 38
16013: PPUSH
16014: CALL_OW 179
// ComTurnUnit ( Ibrahim , speaker [ 1 ] ) ;
16018: LD_EXP 38
16022: PPUSH
16023: LD_VAR 0 3
16027: PUSH
16028: LD_INT 1
16030: ARRAY
16031: PPUSH
16032: CALL_OW 119
// wait ( 0 0$1 ) ;
16036: LD_INT 35
16038: PPUSH
16039: CALL_OW 67
// Say ( speaker [ 1 ] , speaker [ 2 ] & -1-land ) ;
16043: LD_VAR 0 3
16047: PUSH
16048: LD_INT 1
16050: ARRAY
16051: PPUSH
16052: LD_VAR 0 3
16056: PUSH
16057: LD_INT 2
16059: ARRAY
16060: PUSH
16061: LD_STRING -1-land
16063: STR
16064: PPUSH
16065: CALL_OW 88
// Say ( Ibrahim , DI-2-land ) ;
16069: LD_EXP 38
16073: PPUSH
16074: LD_STRING DI-2-land
16076: PPUSH
16077: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -2-land ) ;
16081: LD_VAR 0 3
16085: PUSH
16086: LD_INT 1
16088: ARRAY
16089: PPUSH
16090: LD_VAR 0 3
16094: PUSH
16095: LD_INT 2
16097: ARRAY
16098: PUSH
16099: LD_STRING -2-land
16101: STR
16102: PPUSH
16103: CALL_OW 88
// Say ( speaker [ 1 ] , speaker [ 2 ] & -3-land ) ;
16107: LD_VAR 0 3
16111: PUSH
16112: LD_INT 1
16114: ARRAY
16115: PPUSH
16116: LD_VAR 0 3
16120: PUSH
16121: LD_INT 2
16123: ARRAY
16124: PUSH
16125: LD_STRING -3-land
16127: STR
16128: PPUSH
16129: CALL_OW 88
// Say ( Heike , DH-1-land ) ;
16133: LD_EXP 28
16137: PPUSH
16138: LD_STRING DH-1-land
16140: PPUSH
16141: CALL_OW 88
// if UnitsInside ( depot ) = 6 then
16145: LD_VAR 0 5
16149: PPUSH
16150: CALL_OW 313
16154: PUSH
16155: LD_INT 6
16157: EQUAL
16158: IFFALSE 16178
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
16160: LD_VAR 0 5
16164: PPUSH
16165: CALL_OW 313
16169: PUSH
16170: LD_INT 1
16172: ARRAY
16173: PPUSH
16174: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
16178: LD_EXP 38
16182: PPUSH
16183: LD_INT 2
16185: PPUSH
16186: CALL_OW 235
// CenterOnUnits ( depot ) ;
16190: LD_VAR 0 5
16194: PPUSH
16195: CALL_OW 85
// ComEnterUnit ( Ibrahim , depot ) ;
16199: LD_EXP 38
16203: PPUSH
16204: LD_VAR 0 5
16208: PPUSH
16209: CALL_OW 120
// ComEnterUnit ( speaker [ 1 ] , depot ) ;
16213: LD_VAR 0 3
16217: PUSH
16218: LD_INT 1
16220: ARRAY
16221: PPUSH
16222: LD_VAR 0 5
16226: PPUSH
16227: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16231: LD_INT 35
16233: PPUSH
16234: CALL_OW 67
// until IsInUnit ( Ibrahim ) or not IsOk ( Ibrahim ) or not IsOk ( depot ) ;
16238: LD_EXP 38
16242: PPUSH
16243: CALL_OW 310
16247: PUSH
16248: LD_EXP 38
16252: PPUSH
16253: CALL_OW 302
16257: NOT
16258: OR
16259: PUSH
16260: LD_VAR 0 5
16264: PPUSH
16265: CALL_OW 302
16269: NOT
16270: OR
16271: IFFALSE 16231
// InGameOff ;
16273: CALL_OW 9
// if not IsOk ( Ibrahim ) then
16277: LD_EXP 38
16281: PPUSH
16282: CALL_OW 302
16286: NOT
16287: IFFALSE 16291
// exit ;
16289: GO 16387
// if not IsOk ( depot ) then
16291: LD_VAR 0 5
16295: PPUSH
16296: CALL_OW 302
16300: NOT
16301: IFFALSE 16364
// begin ComMoveXY ( Ibrahim , 30 , 1 ) ;
16303: LD_EXP 38
16307: PPUSH
16308: LD_INT 30
16310: PPUSH
16311: LD_INT 1
16313: PPUSH
16314: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16318: LD_INT 35
16320: PPUSH
16321: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
16325: LD_EXP 38
16329: PPUSH
16330: LD_INT 30
16332: PPUSH
16333: LD_INT 1
16335: PPUSH
16336: CALL_OW 307
16340: PUSH
16341: LD_EXP 38
16345: PPUSH
16346: CALL_OW 301
16350: OR
16351: IFFALSE 16318
// RemoveUnit ( Ibrahim ) ;
16353: LD_EXP 38
16357: PPUSH
16358: CALL_OW 64
// exit ;
16362: GO 16387
// end ; ibrahimInDepot := true ;
16364: LD_ADDR_EXP 25
16368: PUSH
16369: LD_INT 1
16371: ST_TO_ADDR
// allowConvoys := true ;
16372: LD_ADDR_EXP 12
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// Query ( IbrahimInDepot ) ;
16380: LD_STRING IbrahimInDepot
16382: PPUSH
16383: CALL_OW 97
// end ;
16387: PPOPN 5
16389: END
// export function IbrahimQuery ; begin
16390: LD_INT 0
16392: PPUSH
// case Query ( IbrahimQuery ) of 1 :
16393: LD_STRING IbrahimQuery
16395: PPUSH
16396: CALL_OW 97
16400: PUSH
16401: LD_INT 1
16403: DOUBLE
16404: EQUAL
16405: IFTRUE 16409
16407: GO 16685
16409: POP
// begin allowConvoys := false ;
16410: LD_ADDR_EXP 12
16414: PUSH
16415: LD_INT 0
16417: ST_TO_ADDR
// ibrahimInDepot := false ;
16418: LD_ADDR_EXP 25
16422: PUSH
16423: LD_INT 0
16425: ST_TO_ADDR
// InGameOn ;
16426: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
16430: LD_EXP 28
16434: PPUSH
16435: CALL_OW 87
// wait ( 0 0$1 ) ;
16439: LD_INT 35
16441: PPUSH
16442: CALL_OW 67
// Say ( Heike , DH-1-interrogation ) ;
16446: LD_EXP 28
16450: PPUSH
16451: LD_STRING DH-1-interrogation
16453: PPUSH
16454: CALL_OW 88
// Say ( Ibrahim , DI-1-interrogation ) ;
16458: LD_EXP 38
16462: PPUSH
16463: LD_STRING DI-1-interrogation
16465: PPUSH
16466: CALL_OW 88
// Say ( Heike , DH-2-interrogation ) ;
16470: LD_EXP 28
16474: PPUSH
16475: LD_STRING DH-2-interrogation
16477: PPUSH
16478: CALL_OW 88
// Say ( Ibrahim , DI-2-interrogation ) ;
16482: LD_EXP 38
16486: PPUSH
16487: LD_STRING DI-2-interrogation
16489: PPUSH
16490: CALL_OW 88
// Say ( Heike , DH-3-interrogation ) ;
16494: LD_EXP 28
16498: PPUSH
16499: LD_STRING DH-3-interrogation
16501: PPUSH
16502: CALL_OW 88
// Say ( Ibrahim , DI-3-interrogation ) ;
16506: LD_EXP 38
16510: PPUSH
16511: LD_STRING DI-3-interrogation
16513: PPUSH
16514: CALL_OW 88
// Say ( Heike , DH-4-interrogation ) ;
16518: LD_EXP 28
16522: PPUSH
16523: LD_STRING DH-4-interrogation
16525: PPUSH
16526: CALL_OW 88
// Say ( Ibrahim , DI-4-interrogation ) ;
16530: LD_EXP 38
16534: PPUSH
16535: LD_STRING DI-4-interrogation
16537: PPUSH
16538: CALL_OW 88
// Say ( Heike , DH-5-interrogation ) ;
16542: LD_EXP 28
16546: PPUSH
16547: LD_STRING DH-5-interrogation
16549: PPUSH
16550: CALL_OW 88
// Say ( Ibrahim , DI-5-interrogation ) ;
16554: LD_EXP 38
16558: PPUSH
16559: LD_STRING DI-5-interrogation
16561: PPUSH
16562: CALL_OW 88
// wait ( 0 0$1 ) ;
16566: LD_INT 35
16568: PPUSH
16569: CALL_OW 67
// case Query ( IbrahimDecisionQuery ) of 1 :
16573: LD_STRING IbrahimDecisionQuery
16575: PPUSH
16576: CALL_OW 97
16580: PUSH
16581: LD_INT 1
16583: DOUBLE
16584: EQUAL
16585: IFTRUE 16589
16587: GO 16613
16589: POP
// begin Say ( Ibrahim , DI-1-kill ) ;
16590: LD_EXP 38
16594: PPUSH
16595: LD_STRING DI-1-kill
16597: PPUSH
16598: CALL_OW 88
// KillUnit ( Ibrahim ) ;
16602: LD_EXP 38
16606: PPUSH
16607: CALL_OW 66
// end ; 2 :
16611: GO 16679
16613: LD_INT 2
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16678
16621: POP
// begin SetSide ( Ibrahim , 6 ) ;
16622: LD_EXP 38
16626: PPUSH
16627: LD_INT 6
16629: PPUSH
16630: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
16634: LD_EXP 38
16638: PPUSH
16639: CALL_OW 122
// AddComMoveXY ( Ibrahim , 66 , 2 ) ;
16643: LD_EXP 38
16647: PPUSH
16648: LD_INT 66
16650: PPUSH
16651: LD_INT 2
16653: PPUSH
16654: CALL_OW 171
// AddComHold ( Ibrahim ) ;
16658: LD_EXP 38
16662: PPUSH
16663: CALL_OW 200
// ComExitBuilding ( Heike ) ;
16667: LD_EXP 28
16671: PPUSH
16672: CALL_OW 122
// end ; end ;
16676: GO 16679
16678: POP
// InGameOff ;
16679: CALL_OW 9
// end ; 2 :
16683: GO 16699
16685: LD_INT 2
16687: DOUBLE
16688: EQUAL
16689: IFTRUE 16693
16691: GO 16698
16693: POP
// exit ; end ;
16694: GO 16775
16696: GO 16699
16698: POP
// allowConvoys := true ;
16699: LD_ADDR_EXP 12
16703: PUSH
16704: LD_INT 1
16706: ST_TO_ADDR
// wait ( 2 2$30 ) ;
16707: LD_INT 5250
16709: PPUSH
16710: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16714: LD_INT 35
16716: PPUSH
16717: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 2 ] , [ f_type , unit_human ] ] ) ;
16721: LD_INT 81
16723: PUSH
16724: LD_INT 2
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 21
16733: PUSH
16734: LD_INT 1
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PPUSH
16745: CALL_OW 69
16749: NOT
16750: IFFALSE 16714
// ComMoveXY ( Ibrahim , 34 , 21 ) ;
16752: LD_EXP 38
16756: PPUSH
16757: LD_INT 34
16759: PPUSH
16760: LD_INT 21
16762: PPUSH
16763: CALL_OW 111
// ibrahimIsFree := true ;
16767: LD_ADDR_EXP 26
16771: PUSH
16772: LD_INT 1
16774: ST_TO_ADDR
// end ;
16775: LD_VAR 0 1
16779: RET
// every 0 0$3 trigger ibrahimIsFree and IsOk ( Ibrahim ) and See ( 2 , Ibrahim ) do var changeClass , b , p , depot , x , y ;
16780: LD_EXP 26
16784: PUSH
16785: LD_EXP 38
16789: PPUSH
16790: CALL_OW 302
16794: AND
16795: PUSH
16796: LD_INT 2
16798: PPUSH
16799: LD_EXP 38
16803: PPUSH
16804: CALL_OW 292
16808: AND
16809: IFFALSE 17576
16811: GO 16813
16813: DISABLE
16814: LD_INT 0
16816: PPUSH
16817: PPUSH
16818: PPUSH
16819: PPUSH
16820: PPUSH
16821: PPUSH
// begin wait ( 0 0$10 ) ;
16822: LD_INT 350
16824: PPUSH
16825: CALL_OW 67
// allowConvoys := false ;
16829: LD_ADDR_EXP 12
16833: PUSH
16834: LD_INT 0
16836: ST_TO_ADDR
// depot := usDepot ;
16837: LD_ADDR_VAR 0 4
16841: PUSH
16842: LD_INT 11
16844: ST_TO_ADDR
// if not usDepot and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) then
16845: LD_INT 11
16847: NOT
16848: PUSH
16849: LD_INT 22
16851: PUSH
16852: LD_INT 2
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 50
16861: PUSH
16862: EMPTY
16863: LIST
16864: PUSH
16865: LD_INT 30
16867: PUSH
16868: LD_INT 0
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: LIST
16879: PPUSH
16880: CALL_OW 69
16884: AND
16885: IFFALSE 16932
// depot := FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
16887: LD_ADDR_VAR 0 4
16891: PUSH
16892: LD_INT 22
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 50
16904: PUSH
16905: EMPTY
16906: LIST
16907: PUSH
16908: LD_INT 30
16910: PUSH
16911: LD_INT 0
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: PPUSH
16923: CALL_OW 69
16927: PUSH
16928: LD_INT 1
16930: ARRAY
16931: ST_TO_ADDR
// InGameOn ;
16932: CALL_OW 8
// CenterNowOnUnits ( Ibrahim ) ;
16936: LD_EXP 38
16940: PPUSH
16941: CALL_OW 87
// Say ( Ibrahim , DI-1-free ) ;
16945: LD_EXP 38
16949: PPUSH
16950: LD_STRING DI-1-free
16952: PPUSH
16953: CALL_OW 88
// ComTurnUnit ( Heike , Ibrahim ) ;
16957: LD_EXP 28
16961: PPUSH
16962: LD_EXP 38
16966: PPUSH
16967: CALL_OW 119
// Say ( Heike , DH-1-free ) ;
16971: LD_EXP 28
16975: PPUSH
16976: LD_STRING DH-1-free
16978: PPUSH
16979: CALL_OW 88
// ComTurnUnit ( Ibrahim , Heike ) ;
16983: LD_EXP 38
16987: PPUSH
16988: LD_EXP 28
16992: PPUSH
16993: CALL_OW 119
// Say ( Ibrahim , DI-2-free ) ;
16997: LD_EXP 38
17001: PPUSH
17002: LD_STRING DI-2-free
17004: PPUSH
17005: CALL_OW 88
// changeClass := 0 ;
17009: LD_ADDR_VAR 0 1
17013: PUSH
17014: LD_INT 0
17016: ST_TO_ADDR
// case Query ( IbrahimJoinQuery ) of 1 :
17017: LD_STRING IbrahimJoinQuery
17019: PPUSH
17020: CALL_OW 97
17024: PUSH
17025: LD_INT 1
17027: DOUBLE
17028: EQUAL
17029: IFTRUE 17033
17031: GO 17044
17033: POP
// begin changeClass := 1 ;
17034: LD_ADDR_VAR 0 1
17038: PUSH
17039: LD_INT 1
17041: ST_TO_ADDR
// end ; 2 :
17042: GO 17284
17044: LD_INT 2
17046: DOUBLE
17047: EQUAL
17048: IFTRUE 17052
17050: GO 17204
17052: POP
// begin Say ( Heike , DH-1-decline ) ;
17053: LD_EXP 28
17057: PPUSH
17058: LD_STRING DH-1-decline
17060: PPUSH
17061: CALL_OW 88
// Say ( Ibrahim , DI-1-decline ) ;
17065: LD_EXP 38
17069: PPUSH
17070: LD_STRING DI-1-decline
17072: PPUSH
17073: CALL_OW 88
// InGameOff ;
17077: CALL_OW 9
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
17081: LD_EXP 38
17085: PPUSH
17086: LD_INT 30
17088: PPUSH
17089: LD_INT 1
17091: PPUSH
17092: CALL_OW 111
// p := 0 ;
17096: LD_ADDR_VAR 0 3
17100: PUSH
17101: LD_INT 0
17103: ST_TO_ADDR
// repeat p := p + 1 ;
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: LD_VAR 0 3
17113: PUSH
17114: LD_INT 1
17116: PLUS
17117: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17118: LD_INT 35
17120: PPUSH
17121: CALL_OW 67
// until IsAt ( Ibrahim , 30 , 1 ) or not FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) or p > 10 ;
17125: LD_EXP 38
17129: PPUSH
17130: LD_INT 30
17132: PPUSH
17133: LD_INT 1
17135: PPUSH
17136: CALL_OW 307
17140: PUSH
17141: LD_INT 22
17143: PUSH
17144: LD_INT 2
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 101
17153: PUSH
17154: LD_INT 6
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PPUSH
17165: CALL_OW 69
17169: NOT
17170: OR
17171: PUSH
17172: LD_VAR 0 3
17176: PUSH
17177: LD_INT 10
17179: GREATER
17180: OR
17181: IFFALSE 17104
// RemoveUnit ( Ibrahim ) ;
17183: LD_EXP 38
17187: PPUSH
17188: CALL_OW 64
// SaveVariable ( 1 , 03_IbrahimHasEscaped ) ;
17192: LD_INT 1
17194: PPUSH
17195: LD_STRING 03_IbrahimHasEscaped
17197: PPUSH
17198: CALL_OW 39
// end ; 3 :
17202: GO 17284
17204: LD_INT 3
17206: DOUBLE
17207: EQUAL
17208: IFTRUE 17212
17210: GO 17283
17212: POP
// begin Say ( Heike , DH-1-radio-hq ) ;
17213: LD_EXP 28
17217: PPUSH
17218: LD_STRING DH-1-radio-hq
17220: PPUSH
17221: CALL_OW 88
// SayRadio ( Omar , DO-1-radio-hq ) ;
17225: LD_EXP 37
17229: PPUSH
17230: LD_STRING DO-1-radio-hq
17232: PPUSH
17233: CALL_OW 94
// Say ( Heike , DH-2-radio-hq ) ;
17237: LD_EXP 28
17241: PPUSH
17242: LD_STRING DH-2-radio-hq
17244: PPUSH
17245: CALL_OW 88
// SayRadio ( Omar , DO-2-radio-hq ) ;
17249: LD_EXP 37
17253: PPUSH
17254: LD_STRING DO-2-radio-hq
17256: PPUSH
17257: CALL_OW 94
// Say ( Heike , DH-3-radio-hq ) ;
17261: LD_EXP 28
17265: PPUSH
17266: LD_STRING DH-3-radio-hq
17268: PPUSH
17269: CALL_OW 88
// changeClass := 1 ;
17273: LD_ADDR_VAR 0 1
17277: PUSH
17278: LD_INT 1
17280: ST_TO_ADDR
// end ; end ;
17281: GO 17284
17283: POP
// if changeClass then
17284: LD_VAR 0 1
17288: IFFALSE 17576
// begin Say ( Heike , DH-1-agree ) ;
17290: LD_EXP 28
17294: PPUSH
17295: LD_STRING DH-1-agree
17297: PPUSH
17298: CALL_OW 88
// if IsOk ( Givi ) then
17302: LD_EXP 29
17306: PPUSH
17307: CALL_OW 302
17311: IFFALSE 17349
// begin Say ( Givi , DG-1-agree ) ;
17313: LD_EXP 29
17317: PPUSH
17318: LD_STRING DG-1-agree
17320: PPUSH
17321: CALL_OW 88
// Say ( Heike , DH-2-agree ) ;
17325: LD_EXP 28
17329: PPUSH
17330: LD_STRING DH-2-agree
17332: PPUSH
17333: CALL_OW 88
// Say ( Givi , DG-2-agree ) ;
17337: LD_EXP 29
17341: PPUSH
17342: LD_STRING DG-2-agree
17344: PPUSH
17345: CALL_OW 88
// end ; if UnitsInside ( depot ) = 6 then
17349: LD_VAR 0 4
17353: PPUSH
17354: CALL_OW 313
17358: PUSH
17359: LD_INT 6
17361: EQUAL
17362: IFFALSE 17382
// ComExitBuilding ( UnitsInside ( depot ) [ 1 ] ) ;
17364: LD_VAR 0 4
17368: PPUSH
17369: CALL_OW 313
17373: PUSH
17374: LD_INT 1
17376: ARRAY
17377: PPUSH
17378: CALL_OW 122
// SetSide ( Ibrahim , 2 ) ;
17382: LD_EXP 38
17386: PPUSH
17387: LD_INT 2
17389: PPUSH
17390: CALL_OW 235
// x := GetX ( Ibrahim ) ;
17394: LD_ADDR_VAR 0 5
17398: PUSH
17399: LD_EXP 38
17403: PPUSH
17404: CALL_OW 250
17408: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
17409: LD_ADDR_VAR 0 6
17413: PUSH
17414: LD_EXP 38
17418: PPUSH
17419: CALL_OW 251
17423: ST_TO_ADDR
// if depot then
17424: LD_VAR 0 4
17428: IFFALSE 17477
// begin ComEnterUnit ( Ibrahim , depot ) ;
17430: LD_EXP 38
17434: PPUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17444: LD_INT 35
17446: PPUSH
17447: CALL_OW 67
// until IsInUnit ( Ibrahim ) ;
17451: LD_EXP 38
17455: PPUSH
17456: CALL_OW 310
17460: IFFALSE 17444
// b := IsInUnit ( Ibrahim ) ;
17462: LD_ADDR_VAR 0 2
17466: PUSH
17467: LD_EXP 38
17471: PPUSH
17472: CALL_OW 310
17476: ST_TO_ADDR
// end ; RemoveUnit ( Ibrahim ) ;
17477: LD_EXP 38
17481: PPUSH
17482: CALL_OW 64
// uc_side := 2 ;
17486: LD_ADDR_OWVAR 20
17490: PUSH
17491: LD_INT 2
17493: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
17494: LD_ADDR_EXP 38
17498: PUSH
17499: LD_STRING Ibrahim
17501: PPUSH
17502: LD_INT 0
17504: PPUSH
17505: LD_STRING 
17507: PPUSH
17508: CALL 37402 0 3
17512: ST_TO_ADDR
// if depot then
17513: LD_VAR 0 4
17517: IFFALSE 17535
// PlaceHumanInUnit ( Ibrahim , b ) else
17519: LD_EXP 38
17523: PPUSH
17524: LD_VAR 0 2
17528: PPUSH
17529: CALL_OW 52
17533: GO 17557
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
17535: LD_EXP 38
17539: PPUSH
17540: LD_VAR 0 5
17544: PPUSH
17545: LD_VAR 0 6
17549: PPUSH
17550: LD_INT 0
17552: PPUSH
17553: CALL_OW 48
// InGameOff ;
17557: CALL_OW 9
// allowConvoys := true ;
17561: LD_ADDR_EXP 12
17565: PUSH
17566: LD_INT 1
17568: ST_TO_ADDR
// SetAchievement ( ACH_IBRAHIM ) ;
17569: LD_STRING ACH_IBRAHIM
17571: PPUSH
17572: CALL_OW 543
// end ; end ;
17576: PPOPN 6
17578: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
17579: LD_EXP 33
17583: PPUSH
17584: CALL_OW 256
17588: PUSH
17589: LD_INT 3
17591: LESS
17592: IFFALSE 17659
17594: GO 17596
17596: DISABLE
// begin DialogueOn ;
17597: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
17601: LD_EXP 33
17605: PPUSH
17606: CALL_OW 87
// ForceSay ( Kaia , DK-keydeath-1 ) ;
17610: LD_EXP 33
17614: PPUSH
17615: LD_STRING DK-keydeath-1
17617: PPUSH
17618: CALL_OW 91
// Say ( Heike , DH-keydeath-2 ) ;
17622: LD_EXP 28
17626: PPUSH
17627: LD_STRING DH-keydeath-2
17629: PPUSH
17630: CALL_OW 88
// Say ( Heike , DH-keydeath-3 ) ;
17634: LD_EXP 28
17638: PPUSH
17639: LD_STRING DH-keydeath-3
17641: PPUSH
17642: CALL_OW 88
// DialogueOff ;
17646: CALL_OW 7
// KillUnit ( Kaia ) ;
17650: LD_EXP 33
17654: PPUSH
17655: CALL_OW 66
// end ;
17659: END
// every 0 0$1 trigger retreatAllowed and omarCargoCounter < 1 do
17660: LD_EXP 11
17664: PUSH
17665: LD_EXP 21
17669: PUSH
17670: LD_INT 1
17672: LESS
17673: AND
17674: IFFALSE 18214
17676: GO 17678
17678: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) then
17679: LD_INT 22
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 2
17691: PUSH
17692: LD_INT 25
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 25
17704: PUSH
17705: LD_INT 3
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: IFFALSE 17803
// begin ChangeSideFog ( 1 , 2 ) ;
17727: LD_INT 1
17729: PPUSH
17730: LD_INT 2
17732: PPUSH
17733: CALL_OW 343
// Query ( DestroyEnemy ) ;
17737: LD_STRING DestroyEnemy
17739: PPUSH
17740: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
17744: LD_INT 35
17746: PPUSH
17747: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] ] ] ) = 0 ;
17751: LD_INT 22
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 2
17763: PUSH
17764: LD_INT 25
17766: PUSH
17767: LD_INT 1
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 25
17776: PUSH
17777: LD_INT 3
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PPUSH
17793: CALL_OW 69
17797: PUSH
17798: LD_INT 0
17800: EQUAL
17801: IFFALSE 17744
// end ; DialogueOn ;
17803: CALL_OW 6
// Say ( Heike , DH-1-final ) ;
17807: LD_EXP 28
17811: PPUSH
17812: LD_STRING DH-1-final
17814: PPUSH
17815: CALL_OW 88
// if tick <= [ 60 60$00 , 55 55$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
17819: LD_OWVAR 1
17823: PUSH
17824: LD_INT 126000
17826: PUSH
17827: LD_INT 115500
17829: PUSH
17830: LD_INT 105000
17832: PUSH
17833: LD_INT 94500
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: PUSH
17842: LD_OWVAR 67
17846: ARRAY
17847: LESSEQUAL
17848: IFFALSE 17862
// AddMedal ( med1 , 1 ) else
17850: LD_STRING med1
17852: PPUSH
17853: LD_INT 1
17855: PPUSH
17856: CALL_OW 101
17860: GO 17873
// AddMedal ( med1 , - 1 ) ;
17862: LD_STRING med1
17864: PPUSH
17865: LD_INT 1
17867: NEG
17868: PPUSH
17869: CALL_OW 101
// if vehCounter >= 2 then
17873: LD_EXP 22
17877: PUSH
17878: LD_INT 2
17880: GREATEREQUAL
17881: IFFALSE 17895
// AddMedal ( med2 , 1 ) else
17883: LD_STRING med2
17885: PPUSH
17886: LD_INT 1
17888: PPUSH
17889: CALL_OW 101
17893: GO 17906
// AddMedal ( med2 , - 1 ) ;
17895: LD_STRING med2
17897: PPUSH
17898: LD_INT 1
17900: NEG
17901: PPUSH
17902: CALL_OW 101
// if deadCounter = 0 then
17906: LD_EXP 9
17910: PUSH
17911: LD_INT 0
17913: EQUAL
17914: IFFALSE 17928
// AddMedal ( med3 , 1 ) else
17916: LD_STRING med3
17918: PPUSH
17919: LD_INT 1
17921: PPUSH
17922: CALL_OW 101
17926: GO 17939
// AddMedal ( med3 , - 1 ) ;
17928: LD_STRING med3
17930: PPUSH
17931: LD_INT 1
17933: NEG
17934: PPUSH
17935: CALL_OW 101
// GiveMedals ( MAIN ) ;
17939: LD_STRING MAIN
17941: PPUSH
17942: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
17946: LD_INT 22
17948: PUSH
17949: LD_INT 2
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 23
17958: PUSH
17959: LD_INT 2
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 21
17968: PUSH
17969: LD_INT 1
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: PPUSH
17981: CALL_OW 69
17985: PPUSH
17986: CALL_OW 43
// SaveCharacters ( Heike , 03_Heike ) ;
17990: LD_EXP 28
17994: PPUSH
17995: LD_STRING 03_Heike
17997: PPUSH
17998: CALL_OW 38
// SaveCharacters ( Aviradze , 03_Aviradze ) ;
18002: LD_EXP 32
18006: PPUSH
18007: LD_STRING 03_Aviradze
18009: PPUSH
18010: CALL_OW 38
// if Givi then
18014: LD_EXP 29
18018: IFFALSE 18032
// SaveCharacters ( Givi , 03_Givi ) ;
18020: LD_EXP 29
18024: PPUSH
18025: LD_STRING 03_Givi
18027: PPUSH
18028: CALL_OW 38
// if Mike then
18032: LD_EXP 30
18036: IFFALSE 18050
// SaveCharacters ( Mike , 03_Mike ) ;
18038: LD_EXP 30
18042: PPUSH
18043: LD_STRING 03_Mike
18045: PPUSH
18046: CALL_OW 38
// if Kamil then
18050: LD_EXP 31
18054: IFFALSE 18068
// SaveCharacters ( Kamil , 03_Kamil ) ;
18056: LD_EXP 31
18060: PPUSH
18061: LD_STRING 03_Kamil
18063: PPUSH
18064: CALL_OW 38
// if Kaia then
18068: LD_EXP 33
18072: IFFALSE 18086
// SaveCharacters ( Kaia , 03_Kaia ) ;
18074: LD_EXP 33
18078: PPUSH
18079: LD_STRING 03_Kaia
18081: PPUSH
18082: CALL_OW 38
// if Sophia then
18086: LD_EXP 34
18090: IFFALSE 18104
// SaveCharacters ( Sophia , 03_Sophia ) ;
18092: LD_EXP 34
18096: PPUSH
18097: LD_STRING 03_Sophia
18099: PPUSH
18100: CALL_OW 38
// if Markov then
18104: LD_EXP 35
18108: IFFALSE 18122
// SaveCharacters ( Markov , 03_Markov ) ;
18110: LD_EXP 35
18114: PPUSH
18115: LD_STRING 03_Markov
18117: PPUSH
18118: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
18122: LD_EXP 38
18126: PUSH
18127: LD_EXP 38
18131: PPUSH
18132: CALL_OW 255
18136: PUSH
18137: LD_INT 2
18139: EQUAL
18140: AND
18141: IFFALSE 18162
// begin ToLua ( enableBioCharacter(BIO_IBRA) ) ;
18143: LD_STRING enableBioCharacter(BIO_IBRA)
18145: PPUSH
18146: CALL_OW 559
// SaveCharacters ( Ibrahim , 03_Ibrahim ) ;
18150: LD_EXP 38
18154: PPUSH
18155: LD_STRING 03_Ibrahim
18157: PPUSH
18158: CALL_OW 38
// end ; if heikeSecondSquad then
18162: LD_EXP 42
18166: IFFALSE 18180
// SaveCharacters ( heikeSecondSquad , 03_others ) ;
18168: LD_EXP 42
18172: PPUSH
18173: LD_STRING 03_others
18175: PPUSH
18176: CALL_OW 38
// SaveVariable ( deadCounter , 03_DeadCounter ) ;
18180: LD_EXP 9
18184: PPUSH
18185: LD_STRING 03_DeadCounter
18187: PPUSH
18188: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_OMAR) ) ;
18192: LD_STRING enableBioCharacter(BIO_OMAR)
18194: PPUSH
18195: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_FARM) ) ;
18199: LD_STRING enableBioCharacter(BIO_FARM)
18201: PPUSH
18202: CALL_OW 559
// YouWin ;
18206: CALL_OW 103
// DialogueOff ;
18210: CALL_OW 7
// end ; end_of_file
18214: END
// on UnitDestroyed ( un ) do begin if un = Heike then
18215: LD_VAR 0 1
18219: PUSH
18220: LD_EXP 28
18224: EQUAL
18225: IFFALSE 18234
// YouLost ( Heike ) ;
18227: LD_STRING Heike
18229: PPUSH
18230: CALL_OW 104
// if un = Aviradze then
18234: LD_VAR 0 1
18238: PUSH
18239: LD_EXP 32
18243: EQUAL
18244: IFFALSE 18253
// YouLost ( Aviradze ) ;
18246: LD_STRING Aviradze
18248: PPUSH
18249: CALL_OW 104
// if un = usDepot and not retreatAllowed then
18253: LD_VAR 0 1
18257: PUSH
18258: LD_INT 11
18260: EQUAL
18261: PUSH
18262: LD_EXP 11
18266: NOT
18267: AND
18268: IFFALSE 18277
// YouLost ( Depot ) ;
18270: LD_STRING Depot
18272: PPUSH
18273: CALL_OW 104
// if un = arDepot then
18277: LD_VAR 0 1
18281: PUSH
18282: LD_INT 5
18284: EQUAL
18285: IFFALSE 18294
// YouLost ( FarmerDepot ) ;
18287: LD_STRING FarmerDepot
18289: PPUSH
18290: CALL_OW 104
// if un = Farmer then
18294: LD_VAR 0 1
18298: PUSH
18299: LD_EXP 36
18303: EQUAL
18304: IFFALSE 18313
// YouLost ( Farmer ) ;
18306: LD_STRING Farmer
18308: PPUSH
18309: CALL_OW 104
// if un in usForces then
18313: LD_VAR 0 1
18317: PUSH
18318: LD_EXP 44
18322: IN
18323: IFFALSE 18341
// usForces := usForces diff un ;
18325: LD_ADDR_EXP 44
18329: PUSH
18330: LD_EXP 44
18334: PUSH
18335: LD_VAR 0 1
18339: DIFF
18340: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
18341: LD_VAR 0 1
18345: PUSH
18346: LD_INT 22
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 23
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 21
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 69
18385: IN
18386: IFFALSE 18402
// deadCounter := deadCounter + 1 ;
18388: LD_ADDR_EXP 9
18392: PUSH
18393: LD_EXP 9
18397: PUSH
18398: LD_INT 1
18400: PLUS
18401: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) and not firstConvoyDestroyed then
18402: LD_VAR 0 1
18406: PUSH
18407: LD_INT 22
18409: PUSH
18410: LD_INT 4
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 34
18419: PUSH
18420: LD_INT 12
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PPUSH
18431: CALL_OW 69
18435: IN
18436: PUSH
18437: LD_EXP 18
18441: NOT
18442: AND
18443: IFFALSE 18453
// firstConvoyDestroyed := true ;
18445: LD_ADDR_EXP 18
18449: PUSH
18450: LD_INT 1
18452: ST_TO_ADDR
// if un in usAttackers then
18453: LD_VAR 0 1
18457: PUSH
18458: LD_EXP 47
18462: IN
18463: IFFALSE 18481
// usAttackers := usAttackers diff un ;
18465: LD_ADDR_EXP 47
18469: PUSH
18470: LD_EXP 47
18474: PUSH
18475: LD_VAR 0 1
18479: DIFF
18480: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) then
18481: LD_VAR 0 1
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_INT 5
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 21
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PPUSH
18510: CALL_OW 69
18514: IN
18515: IFFALSE 18531
// farmerHumanLoseCounter := farmerHumanLoseCounter + 1 ;
18517: LD_ADDR_EXP 20
18521: PUSH
18522: LD_EXP 20
18526: PUSH
18527: LD_INT 1
18529: PLUS
18530: ST_TO_ADDR
// end ;
18531: PPOPN 1
18533: END
// on LeaveBuilding ( building , unit ) do begin if unit = Ibrahim and ibrahimInDepot then
18534: LD_VAR 0 2
18538: PUSH
18539: LD_EXP 38
18543: EQUAL
18544: PUSH
18545: LD_EXP 25
18549: AND
18550: IFFALSE 18735
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_depot ] , [ f_ok ] ] ) then
18552: LD_INT 22
18554: PUSH
18555: LD_INT 2
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 30
18564: PUSH
18565: LD_INT 0
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 50
18574: PUSH
18575: EMPTY
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: PPUSH
18583: CALL_OW 69
18587: IFFALSE 18641
// begin InGameOn ;
18589: CALL_OW 8
// ComEnterUnit ( Ibrahim , usDepot ) ;
18593: LD_EXP 38
18597: PPUSH
18598: LD_INT 11
18600: PPUSH
18601: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18605: LD_INT 35
18607: PPUSH
18608: CALL_OW 67
// ComEnterUnit ( Ibrahim , usDepot ) ;
18612: LD_EXP 38
18616: PPUSH
18617: LD_INT 11
18619: PPUSH
18620: CALL_OW 120
// until IsInUnit ( Ibrahim ) ;
18624: LD_EXP 38
18628: PPUSH
18629: CALL_OW 310
18633: IFFALSE 18605
// InGameOff ;
18635: CALL_OW 9
// end else
18639: GO 18735
// begin SetSide ( Ibrahim , 6 ) ;
18641: LD_EXP 38
18645: PPUSH
18646: LD_INT 6
18648: PPUSH
18649: CALL_OW 235
// ibrahimInDepot := false ;
18653: LD_ADDR_EXP 25
18657: PUSH
18658: LD_INT 0
18660: ST_TO_ADDR
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18661: LD_EXP 38
18665: PPUSH
18666: LD_INT 30
18668: PPUSH
18669: LD_INT 1
18671: PPUSH
18672: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18676: LD_INT 35
18678: PPUSH
18679: CALL_OW 67
// ComMoveXY ( Ibrahim , 30 , 1 ) ;
18683: LD_EXP 38
18687: PPUSH
18688: LD_INT 30
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL_OW 111
// until IsAt ( Ibrahim , 30 , 1 ) or IsDead ( Ibrahim ) ;
18698: LD_EXP 38
18702: PPUSH
18703: LD_INT 30
18705: PPUSH
18706: LD_INT 1
18708: PPUSH
18709: CALL_OW 307
18713: PUSH
18714: LD_EXP 38
18718: PPUSH
18719: CALL_OW 301
18723: OR
18724: IFFALSE 18676
// RemoveUnit ( Ibrahim ) ;
18726: LD_EXP 38
18730: PPUSH
18731: CALL_OW 64
// end ; end ; end ;
18735: PPOPN 2
18737: END
// on EnterBuilding ( building , unit ) do begin if unit = Heike and building = usDepot and ibrahimInDepot then
18738: LD_VAR 0 2
18742: PUSH
18743: LD_EXP 28
18747: EQUAL
18748: PUSH
18749: LD_VAR 0 1
18753: PUSH
18754: LD_INT 11
18756: EQUAL
18757: AND
18758: PUSH
18759: LD_EXP 25
18763: AND
18764: IFFALSE 18770
// IbrahimQuery ;
18766: CALL 16390 0 0
// end ;
18770: PPOPN 2
18772: END
// on VehicleCaptured ( newId , oldId , oldSide , captureUnit ) do begin ComStop ( newId ) ;
18773: LD_VAR 0 1
18777: PPUSH
18778: CALL_OW 141
// if oldId in usAttackers then
18782: LD_VAR 0 2
18786: PUSH
18787: LD_EXP 47
18791: IN
18792: IFFALSE 18810
// usAttackers := usAttackers diff oldId ;
18794: LD_ADDR_EXP 47
18798: PUSH
18799: LD_EXP 47
18803: PUSH
18804: LD_VAR 0 2
18808: DIFF
18809: ST_TO_ADDR
// if newId in usAttackers then
18810: LD_VAR 0 1
18814: PUSH
18815: LD_EXP 47
18819: IN
18820: IFFALSE 18838
// usAttackers := usAttackers diff newId ;
18822: LD_ADDR_EXP 47
18826: PUSH
18827: LD_EXP 47
18831: PUSH
18832: LD_VAR 0 1
18836: DIFF
18837: ST_TO_ADDR
// if oldSide = 4 and not firstConvoyDestroyed then
18838: LD_VAR 0 3
18842: PUSH
18843: LD_INT 4
18845: EQUAL
18846: PUSH
18847: LD_EXP 18
18851: NOT
18852: AND
18853: IFFALSE 18863
// firstConvoyDestroyed := true ;
18855: LD_ADDR_EXP 18
18859: PUSH
18860: LD_INT 1
18862: ST_TO_ADDR
// if GetWeapon ( newId ) = us_cargo_bay then
18863: LD_VAR 0 1
18867: PPUSH
18868: CALL_OW 264
18872: PUSH
18873: LD_INT 12
18875: EQUAL
18876: IFFALSE 18914
// begin capturedCargoCounter := capturedCargoCounter + 1 ;
18878: LD_ADDR_EXP 13
18882: PUSH
18883: LD_EXP 13
18887: PUSH
18888: LD_INT 1
18890: PLUS
18891: ST_TO_ADDR
// if GetCargo ( newId , mat_cans ) = 0 then
18892: LD_VAR 0 1
18896: PPUSH
18897: LD_INT 1
18899: PPUSH
18900: CALL_OW 289
18904: PUSH
18905: LD_INT 0
18907: EQUAL
18908: IFFALSE 18914
// EmptyCargoDialog ;
18910: CALL 15024 0 0
// end ; end ;
18914: PPOPN 4
18916: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
18917: LD_VAR 0 1
18921: PUSH
18922: LD_INT 2
18924: EQUAL
18925: PUSH
18926: LD_VAR 0 2
18930: PUSH
18931: LD_INT 5
18933: EQUAL
18934: AND
18935: IFFALSE 18944
// YouLost ( Attack ) ;
18937: LD_STRING Attack
18939: PPUSH
18940: CALL_OW 104
// end ;
18944: PPOPN 2
18946: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 1 and not americanBaseCaptured then
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 255
18956: PUSH
18957: LD_INT 1
18959: EQUAL
18960: PUSH
18961: LD_EXP 6
18965: NOT
18966: AND
18967: IFFALSE 19101
// begin if GetBType ( b ) = b_lab then
18969: LD_VAR 0 1
18973: PPUSH
18974: CALL_OW 266
18978: PUSH
18979: LD_INT 6
18981: EQUAL
18982: IFFALSE 19022
// begin ComEnterUnit ( UnitFilter ( usForces , [ f_class , 4 ] ) , b ) ;
18984: LD_EXP 44
18988: PPUSH
18989: LD_INT 25
18991: PUSH
18992: LD_INT 4
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PPUSH
18999: CALL_OW 72
19003: PPUSH
19004: LD_VAR 0 1
19008: PPUSH
19009: CALL_OW 120
// AmLabResearch ( b ) ;
19013: LD_VAR 0 1
19017: PPUSH
19018: CALL 5203 0 1
// end ; if GetBType ( b ) = b_armoury then
19022: LD_VAR 0 1
19026: PPUSH
19027: CALL_OW 266
19031: PUSH
19032: LD_INT 4
19034: EQUAL
19035: IFFALSE 19083
// ComEnterUnit ( UnitFilter ( usForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , b ) ;
19037: LD_EXP 44
19041: PPUSH
19042: LD_INT 25
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 3
19054: PUSH
19055: LD_INT 54
19057: PUSH
19058: EMPTY
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PPUSH
19069: CALL_OW 72
19073: PPUSH
19074: LD_VAR 0 1
19078: PPUSH
19079: CALL_OW 120
// americanBuildList := Delete ( americanBuildList , 1 ) ;
19083: LD_ADDR_EXP 46
19087: PUSH
19088: LD_EXP 46
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: CALL_OW 3
19100: ST_TO_ADDR
// end ; if GetSide ( b ) = 5 then
19101: LD_VAR 0 1
19105: PPUSH
19106: CALL_OW 255
19110: PUSH
19111: LD_INT 5
19113: EQUAL
19114: IFFALSE 19128
// SetBLevel ( b , 5 ) ;
19116: LD_VAR 0 1
19120: PPUSH
19121: LD_INT 5
19123: PPUSH
19124: CALL_OW 241
// end ;
19128: PPOPN 1
19130: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) = 2 then
19131: LD_VAR 0 1
19135: PPUSH
19136: CALL_OW 255
19140: PUSH
19141: LD_INT 2
19143: EQUAL
19144: IFFALSE 19160
// vehCounter := vehCounter + 1 ;
19146: LD_ADDR_EXP 22
19150: PUSH
19151: LD_EXP 22
19155: PUSH
19156: LD_INT 1
19158: PLUS
19159: ST_TO_ADDR
// end ;
19160: PPOPN 2
19162: END
// on SailEvent ( event ) do begin if event = eventAttack then
19163: LD_VAR 0 1
19167: PUSH
19168: LD_EXP 24
19172: EQUAL
19173: IFFALSE 19179
// AmericanAttack ;
19175: CALL 6698 0 0
// end ; end_of_file
19179: PPOPN 1
19181: END
// every 0 0$50 + 0 0$10 trigger tick <= [ 5 5$00 , 4 4$40 , 4 4$30 , 4 4$20 ] [ Difficulty ] do
19182: LD_OWVAR 1
19186: PUSH
19187: LD_INT 10500
19189: PUSH
19190: LD_INT 9800
19192: PUSH
19193: LD_INT 9450
19195: PUSH
19196: LD_INT 9100
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: PUSH
19205: LD_OWVAR 67
19209: ARRAY
19210: LESSEQUAL
19211: IFFALSE 19238
19213: GO 19215
19215: DISABLE
// begin enable ;
19216: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
19217: LD_INT 1
19219: PPUSH
19220: LD_INT 5
19222: PPUSH
19223: CALL_OW 12
19227: PPUSH
19228: LD_INT 9
19230: PPUSH
19231: LD_INT 1
19233: PPUSH
19234: CALL_OW 55
// end ;
19238: END
// every 1 1$40 + 0 0$20 trigger americanBaseCaptured and tick <= [ 27 27$00 , 26 26$30 , 26 26$00 , 25 25$00 ] [ Difficulty ] do
19239: LD_EXP 6
19243: PUSH
19244: LD_OWVAR 1
19248: PUSH
19249: LD_INT 56700
19251: PUSH
19252: LD_INT 55650
19254: PUSH
19255: LD_INT 54600
19257: PUSH
19258: LD_INT 52500
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: PUSH
19267: LD_OWVAR 67
19271: ARRAY
19272: LESSEQUAL
19273: AND
19274: IFFALSE 19301
19276: GO 19278
19278: DISABLE
// begin enable ;
19279: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , cratesArea , true ) ;
19280: LD_INT 3
19282: PPUSH
19283: LD_INT 5
19285: PPUSH
19286: CALL_OW 12
19290: PPUSH
19291: LD_INT 9
19293: PPUSH
19294: LD_INT 1
19296: PPUSH
19297: CALL_OW 55
// end ; end_of_file
19301: END
// every 0 0$1 trigger not retreatAllowed and farmerRequestedCrates and farmerBaseReady and farmerCrates <= farmerRequestedCrates do
19302: LD_EXP 11
19306: NOT
19307: PUSH
19308: LD_EXP 16
19312: AND
19313: PUSH
19314: LD_EXP 4
19318: AND
19319: PUSH
19320: LD_EXP 15
19324: PUSH
19325: LD_EXP 16
19329: LESSEQUAL
19330: AND
19331: IFFALSE 19421
19333: GO 19335
19335: DISABLE
// begin enable ;
19336: ENABLE
// display_strings := [ #X103-1 , farmerRequestedCrates - farmerCrates ] ;
19337: LD_ADDR_OWVAR 47
19341: PUSH
19342: LD_STRING #X103-1
19344: PUSH
19345: LD_EXP 16
19349: PUSH
19350: LD_EXP 15
19354: MINUS
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: ST_TO_ADDR
// farmerCrates := GetResourceType ( GetBase ( arDepot ) , mat_cans ) ;
19360: LD_ADDR_EXP 15
19364: PUSH
19365: LD_INT 5
19367: PPUSH
19368: CALL_OW 274
19372: PPUSH
19373: LD_INT 1
19375: PPUSH
19376: CALL_OW 275
19380: ST_TO_ADDR
// if GetResourceArea ( collectFarmerArea , mat_cans ) = 0 then
19381: LD_INT 10
19383: PPUSH
19384: LD_INT 1
19386: PPUSH
19387: CALL_OW 287
19391: PUSH
19392: LD_INT 0
19394: EQUAL
19395: IFFALSE 19413
// farmerCratesCounter := farmerCratesCounter - 0 0$1 else
19397: LD_ADDR_EXP 17
19401: PUSH
19402: LD_EXP 17
19406: PUSH
19407: LD_INT 35
19409: MINUS
19410: ST_TO_ADDR
19411: GO 19421
// farmerCratesCounter := 30 30$00 ;
19413: LD_ADDR_EXP 17
19417: PUSH
19418: LD_INT 63000
19420: ST_TO_ADDR
// end ; end_of_file
19421: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19422: LD_INT 0
19424: PPUSH
// ar_miner := 81 ;
19425: LD_ADDR_EXP 55
19429: PUSH
19430: LD_INT 81
19432: ST_TO_ADDR
// ar_crane := 88 ;
19433: LD_ADDR_EXP 54
19437: PUSH
19438: LD_INT 88
19440: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19441: LD_ADDR_EXP 49
19445: PUSH
19446: LD_INT 89
19448: ST_TO_ADDR
// us_hack := 99 ;
19449: LD_ADDR_EXP 50
19453: PUSH
19454: LD_INT 99
19456: ST_TO_ADDR
// us_artillery := 97 ;
19457: LD_ADDR_EXP 51
19461: PUSH
19462: LD_INT 97
19464: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19465: LD_ADDR_EXP 52
19469: PUSH
19470: LD_INT 91
19472: ST_TO_ADDR
// ar_mortar := 92 ;
19473: LD_ADDR_EXP 53
19477: PUSH
19478: LD_INT 92
19480: ST_TO_ADDR
// ru_radar := 98 ;
19481: LD_ADDR_EXP 48
19485: PUSH
19486: LD_INT 98
19488: ST_TO_ADDR
// tech_Artillery := 80 ;
19489: LD_ADDR_EXP 56
19493: PUSH
19494: LD_INT 80
19496: ST_TO_ADDR
// tech_RadMat := 81 ;
19497: LD_ADDR_EXP 57
19501: PUSH
19502: LD_INT 81
19504: ST_TO_ADDR
// tech_BasicTools := 82 ;
19505: LD_ADDR_EXP 58
19509: PUSH
19510: LD_INT 82
19512: ST_TO_ADDR
// tech_Cargo := 83 ;
19513: LD_ADDR_EXP 59
19517: PUSH
19518: LD_INT 83
19520: ST_TO_ADDR
// tech_Track := 84 ;
19521: LD_ADDR_EXP 60
19525: PUSH
19526: LD_INT 84
19528: ST_TO_ADDR
// tech_Crane := 85 ;
19529: LD_ADDR_EXP 61
19533: PUSH
19534: LD_INT 85
19536: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19537: LD_ADDR_EXP 62
19541: PUSH
19542: LD_INT 86
19544: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19545: LD_ADDR_EXP 63
19549: PUSH
19550: LD_INT 87
19552: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19553: LD_ADDR_EXP 64
19557: PUSH
19558: LD_INT 88
19560: ST_TO_ADDR
// class_mastodont := 31 ;
19561: LD_ADDR_EXP 65
19565: PUSH
19566: LD_INT 31
19568: ST_TO_ADDR
// class_horse := 21 ;
19569: LD_ADDR_EXP 66
19573: PUSH
19574: LD_INT 21
19576: ST_TO_ADDR
// end ;
19577: LD_VAR 0 1
19581: RET
// every 1 do
19582: GO 19584
19584: DISABLE
// InitGlobalVariables ; end_of_file
19585: CALL 19422 0 0
19589: END
// every 0 0$1 do
19590: GO 19592
19592: DISABLE
// begin enable ;
19593: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19594: LD_STRING updateTimer(
19596: PUSH
19597: LD_OWVAR 1
19601: STR
19602: PUSH
19603: LD_STRING );
19605: STR
19606: PPUSH
19607: CALL_OW 559
// end ;
19611: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19612: LD_INT 0
19614: PPUSH
// if p2 = 100 then
19615: LD_VAR 0 2
19619: PUSH
19620: LD_INT 100
19622: EQUAL
19623: IFFALSE 20626
// begin if not StreamModeActive then
19625: LD_EXP 67
19629: NOT
19630: IFFALSE 19640
// StreamModeActive := true ;
19632: LD_ADDR_EXP 67
19636: PUSH
19637: LD_INT 1
19639: ST_TO_ADDR
// if p3 = 0 then
19640: LD_VAR 0 3
19644: PUSH
19645: LD_INT 0
19647: EQUAL
19648: IFFALSE 19654
// InitStreamMode ;
19650: CALL 20786 0 0
// if p3 = 1 then
19654: LD_VAR 0 3
19658: PUSH
19659: LD_INT 1
19661: EQUAL
19662: IFFALSE 19672
// sRocket := true ;
19664: LD_ADDR_EXP 72
19668: PUSH
19669: LD_INT 1
19671: ST_TO_ADDR
// if p3 = 2 then
19672: LD_VAR 0 3
19676: PUSH
19677: LD_INT 2
19679: EQUAL
19680: IFFALSE 19690
// sSpeed := true ;
19682: LD_ADDR_EXP 71
19686: PUSH
19687: LD_INT 1
19689: ST_TO_ADDR
// if p3 = 3 then
19690: LD_VAR 0 3
19694: PUSH
19695: LD_INT 3
19697: EQUAL
19698: IFFALSE 19708
// sEngine := true ;
19700: LD_ADDR_EXP 73
19704: PUSH
19705: LD_INT 1
19707: ST_TO_ADDR
// if p3 = 4 then
19708: LD_VAR 0 3
19712: PUSH
19713: LD_INT 4
19715: EQUAL
19716: IFFALSE 19726
// sSpec := true ;
19718: LD_ADDR_EXP 70
19722: PUSH
19723: LD_INT 1
19725: ST_TO_ADDR
// if p3 = 5 then
19726: LD_VAR 0 3
19730: PUSH
19731: LD_INT 5
19733: EQUAL
19734: IFFALSE 19744
// sLevel := true ;
19736: LD_ADDR_EXP 74
19740: PUSH
19741: LD_INT 1
19743: ST_TO_ADDR
// if p3 = 6 then
19744: LD_VAR 0 3
19748: PUSH
19749: LD_INT 6
19751: EQUAL
19752: IFFALSE 19762
// sArmoury := true ;
19754: LD_ADDR_EXP 75
19758: PUSH
19759: LD_INT 1
19761: ST_TO_ADDR
// if p3 = 7 then
19762: LD_VAR 0 3
19766: PUSH
19767: LD_INT 7
19769: EQUAL
19770: IFFALSE 19780
// sRadar := true ;
19772: LD_ADDR_EXP 76
19776: PUSH
19777: LD_INT 1
19779: ST_TO_ADDR
// if p3 = 8 then
19780: LD_VAR 0 3
19784: PUSH
19785: LD_INT 8
19787: EQUAL
19788: IFFALSE 19798
// sBunker := true ;
19790: LD_ADDR_EXP 77
19794: PUSH
19795: LD_INT 1
19797: ST_TO_ADDR
// if p3 = 9 then
19798: LD_VAR 0 3
19802: PUSH
19803: LD_INT 9
19805: EQUAL
19806: IFFALSE 19816
// sHack := true ;
19808: LD_ADDR_EXP 78
19812: PUSH
19813: LD_INT 1
19815: ST_TO_ADDR
// if p3 = 10 then
19816: LD_VAR 0 3
19820: PUSH
19821: LD_INT 10
19823: EQUAL
19824: IFFALSE 19834
// sFire := true ;
19826: LD_ADDR_EXP 79
19830: PUSH
19831: LD_INT 1
19833: ST_TO_ADDR
// if p3 = 11 then
19834: LD_VAR 0 3
19838: PUSH
19839: LD_INT 11
19841: EQUAL
19842: IFFALSE 19852
// sRefresh := true ;
19844: LD_ADDR_EXP 80
19848: PUSH
19849: LD_INT 1
19851: ST_TO_ADDR
// if p3 = 12 then
19852: LD_VAR 0 3
19856: PUSH
19857: LD_INT 12
19859: EQUAL
19860: IFFALSE 19870
// sExp := true ;
19862: LD_ADDR_EXP 81
19866: PUSH
19867: LD_INT 1
19869: ST_TO_ADDR
// if p3 = 13 then
19870: LD_VAR 0 3
19874: PUSH
19875: LD_INT 13
19877: EQUAL
19878: IFFALSE 19888
// sDepot := true ;
19880: LD_ADDR_EXP 82
19884: PUSH
19885: LD_INT 1
19887: ST_TO_ADDR
// if p3 = 14 then
19888: LD_VAR 0 3
19892: PUSH
19893: LD_INT 14
19895: EQUAL
19896: IFFALSE 19906
// sFlag := true ;
19898: LD_ADDR_EXP 83
19902: PUSH
19903: LD_INT 1
19905: ST_TO_ADDR
// if p3 = 15 then
19906: LD_VAR 0 3
19910: PUSH
19911: LD_INT 15
19913: EQUAL
19914: IFFALSE 19924
// sKamikadze := true ;
19916: LD_ADDR_EXP 91
19920: PUSH
19921: LD_INT 1
19923: ST_TO_ADDR
// if p3 = 16 then
19924: LD_VAR 0 3
19928: PUSH
19929: LD_INT 16
19931: EQUAL
19932: IFFALSE 19942
// sTroll := true ;
19934: LD_ADDR_EXP 92
19938: PUSH
19939: LD_INT 1
19941: ST_TO_ADDR
// if p3 = 17 then
19942: LD_VAR 0 3
19946: PUSH
19947: LD_INT 17
19949: EQUAL
19950: IFFALSE 19960
// sSlow := true ;
19952: LD_ADDR_EXP 93
19956: PUSH
19957: LD_INT 1
19959: ST_TO_ADDR
// if p3 = 18 then
19960: LD_VAR 0 3
19964: PUSH
19965: LD_INT 18
19967: EQUAL
19968: IFFALSE 19978
// sLack := true ;
19970: LD_ADDR_EXP 94
19974: PUSH
19975: LD_INT 1
19977: ST_TO_ADDR
// if p3 = 19 then
19978: LD_VAR 0 3
19982: PUSH
19983: LD_INT 19
19985: EQUAL
19986: IFFALSE 19996
// sTank := true ;
19988: LD_ADDR_EXP 96
19992: PUSH
19993: LD_INT 1
19995: ST_TO_ADDR
// if p3 = 20 then
19996: LD_VAR 0 3
20000: PUSH
20001: LD_INT 20
20003: EQUAL
20004: IFFALSE 20014
// sRemote := true ;
20006: LD_ADDR_EXP 97
20010: PUSH
20011: LD_INT 1
20013: ST_TO_ADDR
// if p3 = 21 then
20014: LD_VAR 0 3
20018: PUSH
20019: LD_INT 21
20021: EQUAL
20022: IFFALSE 20032
// sPowell := true ;
20024: LD_ADDR_EXP 98
20028: PUSH
20029: LD_INT 1
20031: ST_TO_ADDR
// if p3 = 22 then
20032: LD_VAR 0 3
20036: PUSH
20037: LD_INT 22
20039: EQUAL
20040: IFFALSE 20050
// sTeleport := true ;
20042: LD_ADDR_EXP 101
20046: PUSH
20047: LD_INT 1
20049: ST_TO_ADDR
// if p3 = 23 then
20050: LD_VAR 0 3
20054: PUSH
20055: LD_INT 23
20057: EQUAL
20058: IFFALSE 20068
// sOilTower := true ;
20060: LD_ADDR_EXP 103
20064: PUSH
20065: LD_INT 1
20067: ST_TO_ADDR
// if p3 = 24 then
20068: LD_VAR 0 3
20072: PUSH
20073: LD_INT 24
20075: EQUAL
20076: IFFALSE 20086
// sShovel := true ;
20078: LD_ADDR_EXP 104
20082: PUSH
20083: LD_INT 1
20085: ST_TO_ADDR
// if p3 = 25 then
20086: LD_VAR 0 3
20090: PUSH
20091: LD_INT 25
20093: EQUAL
20094: IFFALSE 20104
// sSheik := true ;
20096: LD_ADDR_EXP 105
20100: PUSH
20101: LD_INT 1
20103: ST_TO_ADDR
// if p3 = 26 then
20104: LD_VAR 0 3
20108: PUSH
20109: LD_INT 26
20111: EQUAL
20112: IFFALSE 20122
// sEarthquake := true ;
20114: LD_ADDR_EXP 107
20118: PUSH
20119: LD_INT 1
20121: ST_TO_ADDR
// if p3 = 27 then
20122: LD_VAR 0 3
20126: PUSH
20127: LD_INT 27
20129: EQUAL
20130: IFFALSE 20140
// sAI := true ;
20132: LD_ADDR_EXP 108
20136: PUSH
20137: LD_INT 1
20139: ST_TO_ADDR
// if p3 = 28 then
20140: LD_VAR 0 3
20144: PUSH
20145: LD_INT 28
20147: EQUAL
20148: IFFALSE 20158
// sCargo := true ;
20150: LD_ADDR_EXP 111
20154: PUSH
20155: LD_INT 1
20157: ST_TO_ADDR
// if p3 = 29 then
20158: LD_VAR 0 3
20162: PUSH
20163: LD_INT 29
20165: EQUAL
20166: IFFALSE 20176
// sDLaser := true ;
20168: LD_ADDR_EXP 112
20172: PUSH
20173: LD_INT 1
20175: ST_TO_ADDR
// if p3 = 30 then
20176: LD_VAR 0 3
20180: PUSH
20181: LD_INT 30
20183: EQUAL
20184: IFFALSE 20194
// sExchange := true ;
20186: LD_ADDR_EXP 113
20190: PUSH
20191: LD_INT 1
20193: ST_TO_ADDR
// if p3 = 31 then
20194: LD_VAR 0 3
20198: PUSH
20199: LD_INT 31
20201: EQUAL
20202: IFFALSE 20212
// sFac := true ;
20204: LD_ADDR_EXP 114
20208: PUSH
20209: LD_INT 1
20211: ST_TO_ADDR
// if p3 = 32 then
20212: LD_VAR 0 3
20216: PUSH
20217: LD_INT 32
20219: EQUAL
20220: IFFALSE 20230
// sPower := true ;
20222: LD_ADDR_EXP 115
20226: PUSH
20227: LD_INT 1
20229: ST_TO_ADDR
// if p3 = 33 then
20230: LD_VAR 0 3
20234: PUSH
20235: LD_INT 33
20237: EQUAL
20238: IFFALSE 20248
// sRandom := true ;
20240: LD_ADDR_EXP 116
20244: PUSH
20245: LD_INT 1
20247: ST_TO_ADDR
// if p3 = 34 then
20248: LD_VAR 0 3
20252: PUSH
20253: LD_INT 34
20255: EQUAL
20256: IFFALSE 20266
// sShield := true ;
20258: LD_ADDR_EXP 117
20262: PUSH
20263: LD_INT 1
20265: ST_TO_ADDR
// if p3 = 35 then
20266: LD_VAR 0 3
20270: PUSH
20271: LD_INT 35
20273: EQUAL
20274: IFFALSE 20284
// sTime := true ;
20276: LD_ADDR_EXP 118
20280: PUSH
20281: LD_INT 1
20283: ST_TO_ADDR
// if p3 = 36 then
20284: LD_VAR 0 3
20288: PUSH
20289: LD_INT 36
20291: EQUAL
20292: IFFALSE 20302
// sTools := true ;
20294: LD_ADDR_EXP 119
20298: PUSH
20299: LD_INT 1
20301: ST_TO_ADDR
// if p3 = 101 then
20302: LD_VAR 0 3
20306: PUSH
20307: LD_INT 101
20309: EQUAL
20310: IFFALSE 20320
// sSold := true ;
20312: LD_ADDR_EXP 84
20316: PUSH
20317: LD_INT 1
20319: ST_TO_ADDR
// if p3 = 102 then
20320: LD_VAR 0 3
20324: PUSH
20325: LD_INT 102
20327: EQUAL
20328: IFFALSE 20338
// sDiff := true ;
20330: LD_ADDR_EXP 85
20334: PUSH
20335: LD_INT 1
20337: ST_TO_ADDR
// if p3 = 103 then
20338: LD_VAR 0 3
20342: PUSH
20343: LD_INT 103
20345: EQUAL
20346: IFFALSE 20356
// sFog := true ;
20348: LD_ADDR_EXP 88
20352: PUSH
20353: LD_INT 1
20355: ST_TO_ADDR
// if p3 = 104 then
20356: LD_VAR 0 3
20360: PUSH
20361: LD_INT 104
20363: EQUAL
20364: IFFALSE 20374
// sReset := true ;
20366: LD_ADDR_EXP 89
20370: PUSH
20371: LD_INT 1
20373: ST_TO_ADDR
// if p3 = 105 then
20374: LD_VAR 0 3
20378: PUSH
20379: LD_INT 105
20381: EQUAL
20382: IFFALSE 20392
// sSun := true ;
20384: LD_ADDR_EXP 90
20388: PUSH
20389: LD_INT 1
20391: ST_TO_ADDR
// if p3 = 106 then
20392: LD_VAR 0 3
20396: PUSH
20397: LD_INT 106
20399: EQUAL
20400: IFFALSE 20410
// sTiger := true ;
20402: LD_ADDR_EXP 86
20406: PUSH
20407: LD_INT 1
20409: ST_TO_ADDR
// if p3 = 107 then
20410: LD_VAR 0 3
20414: PUSH
20415: LD_INT 107
20417: EQUAL
20418: IFFALSE 20428
// sBomb := true ;
20420: LD_ADDR_EXP 87
20424: PUSH
20425: LD_INT 1
20427: ST_TO_ADDR
// if p3 = 108 then
20428: LD_VAR 0 3
20432: PUSH
20433: LD_INT 108
20435: EQUAL
20436: IFFALSE 20446
// sWound := true ;
20438: LD_ADDR_EXP 95
20442: PUSH
20443: LD_INT 1
20445: ST_TO_ADDR
// if p3 = 109 then
20446: LD_VAR 0 3
20450: PUSH
20451: LD_INT 109
20453: EQUAL
20454: IFFALSE 20464
// sBetray := true ;
20456: LD_ADDR_EXP 99
20460: PUSH
20461: LD_INT 1
20463: ST_TO_ADDR
// if p3 = 110 then
20464: LD_VAR 0 3
20468: PUSH
20469: LD_INT 110
20471: EQUAL
20472: IFFALSE 20482
// sContamin := true ;
20474: LD_ADDR_EXP 100
20478: PUSH
20479: LD_INT 1
20481: ST_TO_ADDR
// if p3 = 111 then
20482: LD_VAR 0 3
20486: PUSH
20487: LD_INT 111
20489: EQUAL
20490: IFFALSE 20500
// sOil := true ;
20492: LD_ADDR_EXP 102
20496: PUSH
20497: LD_INT 1
20499: ST_TO_ADDR
// if p3 = 112 then
20500: LD_VAR 0 3
20504: PUSH
20505: LD_INT 112
20507: EQUAL
20508: IFFALSE 20518
// sStu := true ;
20510: LD_ADDR_EXP 106
20514: PUSH
20515: LD_INT 1
20517: ST_TO_ADDR
// if p3 = 113 then
20518: LD_VAR 0 3
20522: PUSH
20523: LD_INT 113
20525: EQUAL
20526: IFFALSE 20536
// sBazooka := true ;
20528: LD_ADDR_EXP 109
20532: PUSH
20533: LD_INT 1
20535: ST_TO_ADDR
// if p3 = 114 then
20536: LD_VAR 0 3
20540: PUSH
20541: LD_INT 114
20543: EQUAL
20544: IFFALSE 20554
// sMortar := true ;
20546: LD_ADDR_EXP 110
20550: PUSH
20551: LD_INT 1
20553: ST_TO_ADDR
// if p3 = 115 then
20554: LD_VAR 0 3
20558: PUSH
20559: LD_INT 115
20561: EQUAL
20562: IFFALSE 20572
// sRanger := true ;
20564: LD_ADDR_EXP 120
20568: PUSH
20569: LD_INT 1
20571: ST_TO_ADDR
// if p3 = 116 then
20572: LD_VAR 0 3
20576: PUSH
20577: LD_INT 116
20579: EQUAL
20580: IFFALSE 20590
// sComputer := true ;
20582: LD_ADDR_EXP 121
20586: PUSH
20587: LD_INT 1
20589: ST_TO_ADDR
// if p3 = 117 then
20590: LD_VAR 0 3
20594: PUSH
20595: LD_INT 117
20597: EQUAL
20598: IFFALSE 20608
// s30 := true ;
20600: LD_ADDR_EXP 122
20604: PUSH
20605: LD_INT 1
20607: ST_TO_ADDR
// if p3 = 118 then
20608: LD_VAR 0 3
20612: PUSH
20613: LD_INT 118
20615: EQUAL
20616: IFFALSE 20626
// s60 := true ;
20618: LD_ADDR_EXP 123
20622: PUSH
20623: LD_INT 1
20625: ST_TO_ADDR
// end ; if p2 = 101 then
20626: LD_VAR 0 2
20630: PUSH
20631: LD_INT 101
20633: EQUAL
20634: IFFALSE 20762
// begin case p3 of 1 :
20636: LD_VAR 0 3
20640: PUSH
20641: LD_INT 1
20643: DOUBLE
20644: EQUAL
20645: IFTRUE 20649
20647: GO 20656
20649: POP
// hHackUnlimitedResources ; 2 :
20650: CALL 32358 0 0
20654: GO 20762
20656: LD_INT 2
20658: DOUBLE
20659: EQUAL
20660: IFTRUE 20664
20662: GO 20671
20664: POP
// hHackSetLevel10 ; 3 :
20665: CALL 32491 0 0
20669: GO 20762
20671: LD_INT 3
20673: DOUBLE
20674: EQUAL
20675: IFTRUE 20679
20677: GO 20686
20679: POP
// hHackSetLevel10YourUnits ; 4 :
20680: CALL 32576 0 0
20684: GO 20762
20686: LD_INT 4
20688: DOUBLE
20689: EQUAL
20690: IFTRUE 20694
20692: GO 20701
20694: POP
// hHackInvincible ; 5 :
20695: CALL 33024 0 0
20699: GO 20762
20701: LD_INT 5
20703: DOUBLE
20704: EQUAL
20705: IFTRUE 20709
20707: GO 20716
20709: POP
// hHackInvisible ; 6 :
20710: CALL 33135 0 0
20714: GO 20762
20716: LD_INT 6
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20731
20724: POP
// hHackChangeYourSide ; 7 :
20725: CALL 33192 0 0
20729: GO 20762
20731: LD_INT 7
20733: DOUBLE
20734: EQUAL
20735: IFTRUE 20739
20737: GO 20746
20739: POP
// hHackChangeUnitSide ; 8 :
20740: CALL 33234 0 0
20744: GO 20762
20746: LD_INT 8
20748: DOUBLE
20749: EQUAL
20750: IFTRUE 20754
20752: GO 20761
20754: POP
// hHackFog ; end ;
20755: CALL 33335 0 0
20759: GO 20762
20761: POP
// end ; end ;
20762: LD_VAR 0 7
20766: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20767: GO 20769
20769: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20770: LD_STRING initStreamRollete();
20772: PPUSH
20773: CALL_OW 559
// InitStreamMode ;
20777: CALL 20786 0 0
// DefineStreamItems ( ) ;
20781: CALL 21250 0 0
// end ;
20785: END
// function InitStreamMode ; begin
20786: LD_INT 0
20788: PPUSH
// streamModeActive := false ;
20789: LD_ADDR_EXP 67
20793: PUSH
20794: LD_INT 0
20796: ST_TO_ADDR
// normalCounter := 36 ;
20797: LD_ADDR_EXP 68
20801: PUSH
20802: LD_INT 36
20804: ST_TO_ADDR
// hardcoreCounter := 16 ;
20805: LD_ADDR_EXP 69
20809: PUSH
20810: LD_INT 16
20812: ST_TO_ADDR
// sRocket := false ;
20813: LD_ADDR_EXP 72
20817: PUSH
20818: LD_INT 0
20820: ST_TO_ADDR
// sSpeed := false ;
20821: LD_ADDR_EXP 71
20825: PUSH
20826: LD_INT 0
20828: ST_TO_ADDR
// sEngine := false ;
20829: LD_ADDR_EXP 73
20833: PUSH
20834: LD_INT 0
20836: ST_TO_ADDR
// sSpec := false ;
20837: LD_ADDR_EXP 70
20841: PUSH
20842: LD_INT 0
20844: ST_TO_ADDR
// sLevel := false ;
20845: LD_ADDR_EXP 74
20849: PUSH
20850: LD_INT 0
20852: ST_TO_ADDR
// sArmoury := false ;
20853: LD_ADDR_EXP 75
20857: PUSH
20858: LD_INT 0
20860: ST_TO_ADDR
// sRadar := false ;
20861: LD_ADDR_EXP 76
20865: PUSH
20866: LD_INT 0
20868: ST_TO_ADDR
// sBunker := false ;
20869: LD_ADDR_EXP 77
20873: PUSH
20874: LD_INT 0
20876: ST_TO_ADDR
// sHack := false ;
20877: LD_ADDR_EXP 78
20881: PUSH
20882: LD_INT 0
20884: ST_TO_ADDR
// sFire := false ;
20885: LD_ADDR_EXP 79
20889: PUSH
20890: LD_INT 0
20892: ST_TO_ADDR
// sRefresh := false ;
20893: LD_ADDR_EXP 80
20897: PUSH
20898: LD_INT 0
20900: ST_TO_ADDR
// sExp := false ;
20901: LD_ADDR_EXP 81
20905: PUSH
20906: LD_INT 0
20908: ST_TO_ADDR
// sDepot := false ;
20909: LD_ADDR_EXP 82
20913: PUSH
20914: LD_INT 0
20916: ST_TO_ADDR
// sFlag := false ;
20917: LD_ADDR_EXP 83
20921: PUSH
20922: LD_INT 0
20924: ST_TO_ADDR
// sKamikadze := false ;
20925: LD_ADDR_EXP 91
20929: PUSH
20930: LD_INT 0
20932: ST_TO_ADDR
// sTroll := false ;
20933: LD_ADDR_EXP 92
20937: PUSH
20938: LD_INT 0
20940: ST_TO_ADDR
// sSlow := false ;
20941: LD_ADDR_EXP 93
20945: PUSH
20946: LD_INT 0
20948: ST_TO_ADDR
// sLack := false ;
20949: LD_ADDR_EXP 94
20953: PUSH
20954: LD_INT 0
20956: ST_TO_ADDR
// sTank := false ;
20957: LD_ADDR_EXP 96
20961: PUSH
20962: LD_INT 0
20964: ST_TO_ADDR
// sRemote := false ;
20965: LD_ADDR_EXP 97
20969: PUSH
20970: LD_INT 0
20972: ST_TO_ADDR
// sPowell := false ;
20973: LD_ADDR_EXP 98
20977: PUSH
20978: LD_INT 0
20980: ST_TO_ADDR
// sTeleport := false ;
20981: LD_ADDR_EXP 101
20985: PUSH
20986: LD_INT 0
20988: ST_TO_ADDR
// sOilTower := false ;
20989: LD_ADDR_EXP 103
20993: PUSH
20994: LD_INT 0
20996: ST_TO_ADDR
// sShovel := false ;
20997: LD_ADDR_EXP 104
21001: PUSH
21002: LD_INT 0
21004: ST_TO_ADDR
// sSheik := false ;
21005: LD_ADDR_EXP 105
21009: PUSH
21010: LD_INT 0
21012: ST_TO_ADDR
// sEarthquake := false ;
21013: LD_ADDR_EXP 107
21017: PUSH
21018: LD_INT 0
21020: ST_TO_ADDR
// sAI := false ;
21021: LD_ADDR_EXP 108
21025: PUSH
21026: LD_INT 0
21028: ST_TO_ADDR
// sCargo := false ;
21029: LD_ADDR_EXP 111
21033: PUSH
21034: LD_INT 0
21036: ST_TO_ADDR
// sDLaser := false ;
21037: LD_ADDR_EXP 112
21041: PUSH
21042: LD_INT 0
21044: ST_TO_ADDR
// sExchange := false ;
21045: LD_ADDR_EXP 113
21049: PUSH
21050: LD_INT 0
21052: ST_TO_ADDR
// sFac := false ;
21053: LD_ADDR_EXP 114
21057: PUSH
21058: LD_INT 0
21060: ST_TO_ADDR
// sPower := false ;
21061: LD_ADDR_EXP 115
21065: PUSH
21066: LD_INT 0
21068: ST_TO_ADDR
// sRandom := false ;
21069: LD_ADDR_EXP 116
21073: PUSH
21074: LD_INT 0
21076: ST_TO_ADDR
// sShield := false ;
21077: LD_ADDR_EXP 117
21081: PUSH
21082: LD_INT 0
21084: ST_TO_ADDR
// sTime := false ;
21085: LD_ADDR_EXP 118
21089: PUSH
21090: LD_INT 0
21092: ST_TO_ADDR
// sTools := false ;
21093: LD_ADDR_EXP 119
21097: PUSH
21098: LD_INT 0
21100: ST_TO_ADDR
// sSold := false ;
21101: LD_ADDR_EXP 84
21105: PUSH
21106: LD_INT 0
21108: ST_TO_ADDR
// sDiff := false ;
21109: LD_ADDR_EXP 85
21113: PUSH
21114: LD_INT 0
21116: ST_TO_ADDR
// sFog := false ;
21117: LD_ADDR_EXP 88
21121: PUSH
21122: LD_INT 0
21124: ST_TO_ADDR
// sReset := false ;
21125: LD_ADDR_EXP 89
21129: PUSH
21130: LD_INT 0
21132: ST_TO_ADDR
// sSun := false ;
21133: LD_ADDR_EXP 90
21137: PUSH
21138: LD_INT 0
21140: ST_TO_ADDR
// sTiger := false ;
21141: LD_ADDR_EXP 86
21145: PUSH
21146: LD_INT 0
21148: ST_TO_ADDR
// sBomb := false ;
21149: LD_ADDR_EXP 87
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// sWound := false ;
21157: LD_ADDR_EXP 95
21161: PUSH
21162: LD_INT 0
21164: ST_TO_ADDR
// sBetray := false ;
21165: LD_ADDR_EXP 99
21169: PUSH
21170: LD_INT 0
21172: ST_TO_ADDR
// sContamin := false ;
21173: LD_ADDR_EXP 100
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// sOil := false ;
21181: LD_ADDR_EXP 102
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// sStu := false ;
21189: LD_ADDR_EXP 106
21193: PUSH
21194: LD_INT 0
21196: ST_TO_ADDR
// sBazooka := false ;
21197: LD_ADDR_EXP 109
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// sMortar := false ;
21205: LD_ADDR_EXP 110
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// sRanger := false ;
21213: LD_ADDR_EXP 120
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// sComputer := false ;
21221: LD_ADDR_EXP 121
21225: PUSH
21226: LD_INT 0
21228: ST_TO_ADDR
// s30 := false ;
21229: LD_ADDR_EXP 122
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// s60 := false ;
21237: LD_ADDR_EXP 123
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// end ;
21245: LD_VAR 0 1
21249: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21250: LD_INT 0
21252: PPUSH
21253: PPUSH
21254: PPUSH
21255: PPUSH
21256: PPUSH
// result := [ ] ;
21257: LD_ADDR_VAR 0 1
21261: PUSH
21262: EMPTY
21263: ST_TO_ADDR
// if campaign_id = 1 then
21264: LD_OWVAR 69
21268: PUSH
21269: LD_INT 1
21271: EQUAL
21272: IFFALSE 24438
// begin case mission_number of 1 :
21274: LD_OWVAR 70
21278: PUSH
21279: LD_INT 1
21281: DOUBLE
21282: EQUAL
21283: IFTRUE 21287
21285: GO 21363
21287: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21288: LD_ADDR_VAR 0 1
21292: PUSH
21293: LD_INT 2
21295: PUSH
21296: LD_INT 4
21298: PUSH
21299: LD_INT 11
21301: PUSH
21302: LD_INT 12
21304: PUSH
21305: LD_INT 15
21307: PUSH
21308: LD_INT 16
21310: PUSH
21311: LD_INT 22
21313: PUSH
21314: LD_INT 23
21316: PUSH
21317: LD_INT 26
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 101
21333: PUSH
21334: LD_INT 102
21336: PUSH
21337: LD_INT 106
21339: PUSH
21340: LD_INT 116
21342: PUSH
21343: LD_INT 117
21345: PUSH
21346: LD_INT 118
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: ST_TO_ADDR
21361: GO 24436
21363: LD_INT 2
21365: DOUBLE
21366: EQUAL
21367: IFTRUE 21371
21369: GO 21455
21371: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21372: LD_ADDR_VAR 0 1
21376: PUSH
21377: LD_INT 2
21379: PUSH
21380: LD_INT 4
21382: PUSH
21383: LD_INT 11
21385: PUSH
21386: LD_INT 12
21388: PUSH
21389: LD_INT 15
21391: PUSH
21392: LD_INT 16
21394: PUSH
21395: LD_INT 22
21397: PUSH
21398: LD_INT 23
21400: PUSH
21401: LD_INT 26
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 101
21417: PUSH
21418: LD_INT 102
21420: PUSH
21421: LD_INT 105
21423: PUSH
21424: LD_INT 106
21426: PUSH
21427: LD_INT 108
21429: PUSH
21430: LD_INT 116
21432: PUSH
21433: LD_INT 117
21435: PUSH
21436: LD_INT 118
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: ST_TO_ADDR
21453: GO 24436
21455: LD_INT 3
21457: DOUBLE
21458: EQUAL
21459: IFTRUE 21463
21461: GO 21551
21463: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21464: LD_ADDR_VAR 0 1
21468: PUSH
21469: LD_INT 2
21471: PUSH
21472: LD_INT 4
21474: PUSH
21475: LD_INT 5
21477: PUSH
21478: LD_INT 11
21480: PUSH
21481: LD_INT 12
21483: PUSH
21484: LD_INT 15
21486: PUSH
21487: LD_INT 16
21489: PUSH
21490: LD_INT 22
21492: PUSH
21493: LD_INT 26
21495: PUSH
21496: LD_INT 36
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 101
21513: PUSH
21514: LD_INT 102
21516: PUSH
21517: LD_INT 105
21519: PUSH
21520: LD_INT 106
21522: PUSH
21523: LD_INT 108
21525: PUSH
21526: LD_INT 116
21528: PUSH
21529: LD_INT 117
21531: PUSH
21532: LD_INT 118
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: ST_TO_ADDR
21549: GO 24436
21551: LD_INT 4
21553: DOUBLE
21554: EQUAL
21555: IFTRUE 21559
21557: GO 21655
21559: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21560: LD_ADDR_VAR 0 1
21564: PUSH
21565: LD_INT 2
21567: PUSH
21568: LD_INT 4
21570: PUSH
21571: LD_INT 5
21573: PUSH
21574: LD_INT 8
21576: PUSH
21577: LD_INT 11
21579: PUSH
21580: LD_INT 12
21582: PUSH
21583: LD_INT 15
21585: PUSH
21586: LD_INT 16
21588: PUSH
21589: LD_INT 22
21591: PUSH
21592: LD_INT 23
21594: PUSH
21595: LD_INT 26
21597: PUSH
21598: LD_INT 36
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 101
21617: PUSH
21618: LD_INT 102
21620: PUSH
21621: LD_INT 105
21623: PUSH
21624: LD_INT 106
21626: PUSH
21627: LD_INT 108
21629: PUSH
21630: LD_INT 116
21632: PUSH
21633: LD_INT 117
21635: PUSH
21636: LD_INT 118
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: ST_TO_ADDR
21653: GO 24436
21655: LD_INT 5
21657: DOUBLE
21658: EQUAL
21659: IFTRUE 21663
21661: GO 21775
21663: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21664: LD_ADDR_VAR 0 1
21668: PUSH
21669: LD_INT 2
21671: PUSH
21672: LD_INT 4
21674: PUSH
21675: LD_INT 5
21677: PUSH
21678: LD_INT 6
21680: PUSH
21681: LD_INT 8
21683: PUSH
21684: LD_INT 11
21686: PUSH
21687: LD_INT 12
21689: PUSH
21690: LD_INT 15
21692: PUSH
21693: LD_INT 16
21695: PUSH
21696: LD_INT 22
21698: PUSH
21699: LD_INT 23
21701: PUSH
21702: LD_INT 25
21704: PUSH
21705: LD_INT 26
21707: PUSH
21708: LD_INT 36
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 101
21729: PUSH
21730: LD_INT 102
21732: PUSH
21733: LD_INT 105
21735: PUSH
21736: LD_INT 106
21738: PUSH
21739: LD_INT 108
21741: PUSH
21742: LD_INT 109
21744: PUSH
21745: LD_INT 112
21747: PUSH
21748: LD_INT 116
21750: PUSH
21751: LD_INT 117
21753: PUSH
21754: LD_INT 118
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: ST_TO_ADDR
21773: GO 24436
21775: LD_INT 6
21777: DOUBLE
21778: EQUAL
21779: IFTRUE 21783
21781: GO 21915
21783: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21784: LD_ADDR_VAR 0 1
21788: PUSH
21789: LD_INT 2
21791: PUSH
21792: LD_INT 4
21794: PUSH
21795: LD_INT 5
21797: PUSH
21798: LD_INT 6
21800: PUSH
21801: LD_INT 8
21803: PUSH
21804: LD_INT 11
21806: PUSH
21807: LD_INT 12
21809: PUSH
21810: LD_INT 15
21812: PUSH
21813: LD_INT 16
21815: PUSH
21816: LD_INT 20
21818: PUSH
21819: LD_INT 21
21821: PUSH
21822: LD_INT 22
21824: PUSH
21825: LD_INT 23
21827: PUSH
21828: LD_INT 25
21830: PUSH
21831: LD_INT 26
21833: PUSH
21834: LD_INT 30
21836: PUSH
21837: LD_INT 31
21839: PUSH
21840: LD_INT 32
21842: PUSH
21843: LD_INT 36
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 101
21869: PUSH
21870: LD_INT 102
21872: PUSH
21873: LD_INT 105
21875: PUSH
21876: LD_INT 106
21878: PUSH
21879: LD_INT 108
21881: PUSH
21882: LD_INT 109
21884: PUSH
21885: LD_INT 112
21887: PUSH
21888: LD_INT 116
21890: PUSH
21891: LD_INT 117
21893: PUSH
21894: LD_INT 118
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: ST_TO_ADDR
21913: GO 24436
21915: LD_INT 7
21917: DOUBLE
21918: EQUAL
21919: IFTRUE 21923
21921: GO 22035
21923: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21924: LD_ADDR_VAR 0 1
21928: PUSH
21929: LD_INT 2
21931: PUSH
21932: LD_INT 4
21934: PUSH
21935: LD_INT 5
21937: PUSH
21938: LD_INT 7
21940: PUSH
21941: LD_INT 11
21943: PUSH
21944: LD_INT 12
21946: PUSH
21947: LD_INT 15
21949: PUSH
21950: LD_INT 16
21952: PUSH
21953: LD_INT 20
21955: PUSH
21956: LD_INT 21
21958: PUSH
21959: LD_INT 22
21961: PUSH
21962: LD_INT 23
21964: PUSH
21965: LD_INT 25
21967: PUSH
21968: LD_INT 26
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 101
21989: PUSH
21990: LD_INT 102
21992: PUSH
21993: LD_INT 103
21995: PUSH
21996: LD_INT 105
21998: PUSH
21999: LD_INT 106
22001: PUSH
22002: LD_INT 108
22004: PUSH
22005: LD_INT 112
22007: PUSH
22008: LD_INT 116
22010: PUSH
22011: LD_INT 117
22013: PUSH
22014: LD_INT 118
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: ST_TO_ADDR
22033: GO 24436
22035: LD_INT 8
22037: DOUBLE
22038: EQUAL
22039: IFTRUE 22043
22041: GO 22183
22043: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22044: LD_ADDR_VAR 0 1
22048: PUSH
22049: LD_INT 2
22051: PUSH
22052: LD_INT 4
22054: PUSH
22055: LD_INT 5
22057: PUSH
22058: LD_INT 6
22060: PUSH
22061: LD_INT 7
22063: PUSH
22064: LD_INT 8
22066: PUSH
22067: LD_INT 11
22069: PUSH
22070: LD_INT 12
22072: PUSH
22073: LD_INT 15
22075: PUSH
22076: LD_INT 16
22078: PUSH
22079: LD_INT 20
22081: PUSH
22082: LD_INT 21
22084: PUSH
22085: LD_INT 22
22087: PUSH
22088: LD_INT 23
22090: PUSH
22091: LD_INT 25
22093: PUSH
22094: LD_INT 26
22096: PUSH
22097: LD_INT 30
22099: PUSH
22100: LD_INT 31
22102: PUSH
22103: LD_INT 32
22105: PUSH
22106: LD_INT 36
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 101
22133: PUSH
22134: LD_INT 102
22136: PUSH
22137: LD_INT 103
22139: PUSH
22140: LD_INT 105
22142: PUSH
22143: LD_INT 106
22145: PUSH
22146: LD_INT 108
22148: PUSH
22149: LD_INT 109
22151: PUSH
22152: LD_INT 112
22154: PUSH
22155: LD_INT 116
22157: PUSH
22158: LD_INT 117
22160: PUSH
22161: LD_INT 118
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: ST_TO_ADDR
22181: GO 24436
22183: LD_INT 9
22185: DOUBLE
22186: EQUAL
22187: IFTRUE 22191
22189: GO 22339
22191: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22192: LD_ADDR_VAR 0 1
22196: PUSH
22197: LD_INT 2
22199: PUSH
22200: LD_INT 4
22202: PUSH
22203: LD_INT 5
22205: PUSH
22206: LD_INT 6
22208: PUSH
22209: LD_INT 7
22211: PUSH
22212: LD_INT 8
22214: PUSH
22215: LD_INT 11
22217: PUSH
22218: LD_INT 12
22220: PUSH
22221: LD_INT 15
22223: PUSH
22224: LD_INT 16
22226: PUSH
22227: LD_INT 20
22229: PUSH
22230: LD_INT 21
22232: PUSH
22233: LD_INT 22
22235: PUSH
22236: LD_INT 23
22238: PUSH
22239: LD_INT 25
22241: PUSH
22242: LD_INT 26
22244: PUSH
22245: LD_INT 28
22247: PUSH
22248: LD_INT 30
22250: PUSH
22251: LD_INT 31
22253: PUSH
22254: LD_INT 32
22256: PUSH
22257: LD_INT 36
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 101
22285: PUSH
22286: LD_INT 102
22288: PUSH
22289: LD_INT 103
22291: PUSH
22292: LD_INT 105
22294: PUSH
22295: LD_INT 106
22297: PUSH
22298: LD_INT 108
22300: PUSH
22301: LD_INT 109
22303: PUSH
22304: LD_INT 112
22306: PUSH
22307: LD_INT 114
22309: PUSH
22310: LD_INT 116
22312: PUSH
22313: LD_INT 117
22315: PUSH
22316: LD_INT 118
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: ST_TO_ADDR
22337: GO 24436
22339: LD_INT 10
22341: DOUBLE
22342: EQUAL
22343: IFTRUE 22347
22345: GO 22543
22347: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22348: LD_ADDR_VAR 0 1
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: LD_INT 4
22358: PUSH
22359: LD_INT 5
22361: PUSH
22362: LD_INT 6
22364: PUSH
22365: LD_INT 7
22367: PUSH
22368: LD_INT 8
22370: PUSH
22371: LD_INT 9
22373: PUSH
22374: LD_INT 10
22376: PUSH
22377: LD_INT 11
22379: PUSH
22380: LD_INT 12
22382: PUSH
22383: LD_INT 13
22385: PUSH
22386: LD_INT 14
22388: PUSH
22389: LD_INT 15
22391: PUSH
22392: LD_INT 16
22394: PUSH
22395: LD_INT 17
22397: PUSH
22398: LD_INT 18
22400: PUSH
22401: LD_INT 19
22403: PUSH
22404: LD_INT 20
22406: PUSH
22407: LD_INT 21
22409: PUSH
22410: LD_INT 22
22412: PUSH
22413: LD_INT 23
22415: PUSH
22416: LD_INT 24
22418: PUSH
22419: LD_INT 25
22421: PUSH
22422: LD_INT 26
22424: PUSH
22425: LD_INT 28
22427: PUSH
22428: LD_INT 30
22430: PUSH
22431: LD_INT 31
22433: PUSH
22434: LD_INT 32
22436: PUSH
22437: LD_INT 36
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 101
22473: PUSH
22474: LD_INT 102
22476: PUSH
22477: LD_INT 103
22479: PUSH
22480: LD_INT 104
22482: PUSH
22483: LD_INT 105
22485: PUSH
22486: LD_INT 106
22488: PUSH
22489: LD_INT 107
22491: PUSH
22492: LD_INT 108
22494: PUSH
22495: LD_INT 109
22497: PUSH
22498: LD_INT 110
22500: PUSH
22501: LD_INT 111
22503: PUSH
22504: LD_INT 112
22506: PUSH
22507: LD_INT 114
22509: PUSH
22510: LD_INT 116
22512: PUSH
22513: LD_INT 117
22515: PUSH
22516: LD_INT 118
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: ST_TO_ADDR
22541: GO 24436
22543: LD_INT 11
22545: DOUBLE
22546: EQUAL
22547: IFTRUE 22551
22549: GO 22755
22551: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22552: LD_ADDR_VAR 0 1
22556: PUSH
22557: LD_INT 2
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: LD_INT 4
22565: PUSH
22566: LD_INT 5
22568: PUSH
22569: LD_INT 6
22571: PUSH
22572: LD_INT 7
22574: PUSH
22575: LD_INT 8
22577: PUSH
22578: LD_INT 9
22580: PUSH
22581: LD_INT 10
22583: PUSH
22584: LD_INT 11
22586: PUSH
22587: LD_INT 12
22589: PUSH
22590: LD_INT 13
22592: PUSH
22593: LD_INT 14
22595: PUSH
22596: LD_INT 15
22598: PUSH
22599: LD_INT 16
22601: PUSH
22602: LD_INT 17
22604: PUSH
22605: LD_INT 18
22607: PUSH
22608: LD_INT 19
22610: PUSH
22611: LD_INT 20
22613: PUSH
22614: LD_INT 21
22616: PUSH
22617: LD_INT 22
22619: PUSH
22620: LD_INT 23
22622: PUSH
22623: LD_INT 24
22625: PUSH
22626: LD_INT 25
22628: PUSH
22629: LD_INT 26
22631: PUSH
22632: LD_INT 28
22634: PUSH
22635: LD_INT 30
22637: PUSH
22638: LD_INT 31
22640: PUSH
22641: LD_INT 32
22643: PUSH
22644: LD_INT 34
22646: PUSH
22647: LD_INT 36
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 101
22685: PUSH
22686: LD_INT 102
22688: PUSH
22689: LD_INT 103
22691: PUSH
22692: LD_INT 104
22694: PUSH
22695: LD_INT 105
22697: PUSH
22698: LD_INT 106
22700: PUSH
22701: LD_INT 107
22703: PUSH
22704: LD_INT 108
22706: PUSH
22707: LD_INT 109
22709: PUSH
22710: LD_INT 110
22712: PUSH
22713: LD_INT 111
22715: PUSH
22716: LD_INT 112
22718: PUSH
22719: LD_INT 114
22721: PUSH
22722: LD_INT 116
22724: PUSH
22725: LD_INT 117
22727: PUSH
22728: LD_INT 118
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: ST_TO_ADDR
22753: GO 24436
22755: LD_INT 12
22757: DOUBLE
22758: EQUAL
22759: IFTRUE 22763
22761: GO 22983
22763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22764: LD_ADDR_VAR 0 1
22768: PUSH
22769: LD_INT 1
22771: PUSH
22772: LD_INT 2
22774: PUSH
22775: LD_INT 3
22777: PUSH
22778: LD_INT 4
22780: PUSH
22781: LD_INT 5
22783: PUSH
22784: LD_INT 6
22786: PUSH
22787: LD_INT 7
22789: PUSH
22790: LD_INT 8
22792: PUSH
22793: LD_INT 9
22795: PUSH
22796: LD_INT 10
22798: PUSH
22799: LD_INT 11
22801: PUSH
22802: LD_INT 12
22804: PUSH
22805: LD_INT 13
22807: PUSH
22808: LD_INT 14
22810: PUSH
22811: LD_INT 15
22813: PUSH
22814: LD_INT 16
22816: PUSH
22817: LD_INT 17
22819: PUSH
22820: LD_INT 18
22822: PUSH
22823: LD_INT 19
22825: PUSH
22826: LD_INT 20
22828: PUSH
22829: LD_INT 21
22831: PUSH
22832: LD_INT 22
22834: PUSH
22835: LD_INT 23
22837: PUSH
22838: LD_INT 24
22840: PUSH
22841: LD_INT 25
22843: PUSH
22844: LD_INT 26
22846: PUSH
22847: LD_INT 27
22849: PUSH
22850: LD_INT 28
22852: PUSH
22853: LD_INT 30
22855: PUSH
22856: LD_INT 31
22858: PUSH
22859: LD_INT 32
22861: PUSH
22862: LD_INT 33
22864: PUSH
22865: LD_INT 34
22867: PUSH
22868: LD_INT 36
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 101
22909: PUSH
22910: LD_INT 102
22912: PUSH
22913: LD_INT 103
22915: PUSH
22916: LD_INT 104
22918: PUSH
22919: LD_INT 105
22921: PUSH
22922: LD_INT 106
22924: PUSH
22925: LD_INT 107
22927: PUSH
22928: LD_INT 108
22930: PUSH
22931: LD_INT 109
22933: PUSH
22934: LD_INT 110
22936: PUSH
22937: LD_INT 111
22939: PUSH
22940: LD_INT 112
22942: PUSH
22943: LD_INT 113
22945: PUSH
22946: LD_INT 114
22948: PUSH
22949: LD_INT 116
22951: PUSH
22952: LD_INT 117
22954: PUSH
22955: LD_INT 118
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: ST_TO_ADDR
22981: GO 24436
22983: LD_INT 13
22985: DOUBLE
22986: EQUAL
22987: IFTRUE 22991
22989: GO 23199
22991: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22992: LD_ADDR_VAR 0 1
22996: PUSH
22997: LD_INT 1
22999: PUSH
23000: LD_INT 2
23002: PUSH
23003: LD_INT 3
23005: PUSH
23006: LD_INT 4
23008: PUSH
23009: LD_INT 5
23011: PUSH
23012: LD_INT 8
23014: PUSH
23015: LD_INT 9
23017: PUSH
23018: LD_INT 10
23020: PUSH
23021: LD_INT 11
23023: PUSH
23024: LD_INT 12
23026: PUSH
23027: LD_INT 14
23029: PUSH
23030: LD_INT 15
23032: PUSH
23033: LD_INT 16
23035: PUSH
23036: LD_INT 17
23038: PUSH
23039: LD_INT 18
23041: PUSH
23042: LD_INT 19
23044: PUSH
23045: LD_INT 20
23047: PUSH
23048: LD_INT 21
23050: PUSH
23051: LD_INT 22
23053: PUSH
23054: LD_INT 23
23056: PUSH
23057: LD_INT 24
23059: PUSH
23060: LD_INT 25
23062: PUSH
23063: LD_INT 26
23065: PUSH
23066: LD_INT 27
23068: PUSH
23069: LD_INT 28
23071: PUSH
23072: LD_INT 30
23074: PUSH
23075: LD_INT 31
23077: PUSH
23078: LD_INT 32
23080: PUSH
23081: LD_INT 33
23083: PUSH
23084: LD_INT 34
23086: PUSH
23087: LD_INT 36
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 101
23125: PUSH
23126: LD_INT 102
23128: PUSH
23129: LD_INT 103
23131: PUSH
23132: LD_INT 104
23134: PUSH
23135: LD_INT 105
23137: PUSH
23138: LD_INT 106
23140: PUSH
23141: LD_INT 107
23143: PUSH
23144: LD_INT 108
23146: PUSH
23147: LD_INT 109
23149: PUSH
23150: LD_INT 110
23152: PUSH
23153: LD_INT 111
23155: PUSH
23156: LD_INT 112
23158: PUSH
23159: LD_INT 113
23161: PUSH
23162: LD_INT 114
23164: PUSH
23165: LD_INT 116
23167: PUSH
23168: LD_INT 117
23170: PUSH
23171: LD_INT 118
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: ST_TO_ADDR
23197: GO 24436
23199: LD_INT 14
23201: DOUBLE
23202: EQUAL
23203: IFTRUE 23207
23205: GO 23431
23207: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23208: LD_ADDR_VAR 0 1
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: LD_INT 3
23221: PUSH
23222: LD_INT 4
23224: PUSH
23225: LD_INT 5
23227: PUSH
23228: LD_INT 6
23230: PUSH
23231: LD_INT 7
23233: PUSH
23234: LD_INT 8
23236: PUSH
23237: LD_INT 9
23239: PUSH
23240: LD_INT 10
23242: PUSH
23243: LD_INT 11
23245: PUSH
23246: LD_INT 12
23248: PUSH
23249: LD_INT 13
23251: PUSH
23252: LD_INT 14
23254: PUSH
23255: LD_INT 15
23257: PUSH
23258: LD_INT 16
23260: PUSH
23261: LD_INT 17
23263: PUSH
23264: LD_INT 18
23266: PUSH
23267: LD_INT 19
23269: PUSH
23270: LD_INT 20
23272: PUSH
23273: LD_INT 21
23275: PUSH
23276: LD_INT 22
23278: PUSH
23279: LD_INT 23
23281: PUSH
23282: LD_INT 24
23284: PUSH
23285: LD_INT 25
23287: PUSH
23288: LD_INT 26
23290: PUSH
23291: LD_INT 27
23293: PUSH
23294: LD_INT 28
23296: PUSH
23297: LD_INT 29
23299: PUSH
23300: LD_INT 30
23302: PUSH
23303: LD_INT 31
23305: PUSH
23306: LD_INT 32
23308: PUSH
23309: LD_INT 33
23311: PUSH
23312: LD_INT 34
23314: PUSH
23315: LD_INT 36
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 101
23357: PUSH
23358: LD_INT 102
23360: PUSH
23361: LD_INT 103
23363: PUSH
23364: LD_INT 104
23366: PUSH
23367: LD_INT 105
23369: PUSH
23370: LD_INT 106
23372: PUSH
23373: LD_INT 107
23375: PUSH
23376: LD_INT 108
23378: PUSH
23379: LD_INT 109
23381: PUSH
23382: LD_INT 110
23384: PUSH
23385: LD_INT 111
23387: PUSH
23388: LD_INT 112
23390: PUSH
23391: LD_INT 113
23393: PUSH
23394: LD_INT 114
23396: PUSH
23397: LD_INT 116
23399: PUSH
23400: LD_INT 117
23402: PUSH
23403: LD_INT 118
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: ST_TO_ADDR
23429: GO 24436
23431: LD_INT 15
23433: DOUBLE
23434: EQUAL
23435: IFTRUE 23439
23437: GO 23663
23439: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23440: LD_ADDR_VAR 0 1
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: LD_INT 2
23450: PUSH
23451: LD_INT 3
23453: PUSH
23454: LD_INT 4
23456: PUSH
23457: LD_INT 5
23459: PUSH
23460: LD_INT 6
23462: PUSH
23463: LD_INT 7
23465: PUSH
23466: LD_INT 8
23468: PUSH
23469: LD_INT 9
23471: PUSH
23472: LD_INT 10
23474: PUSH
23475: LD_INT 11
23477: PUSH
23478: LD_INT 12
23480: PUSH
23481: LD_INT 13
23483: PUSH
23484: LD_INT 14
23486: PUSH
23487: LD_INT 15
23489: PUSH
23490: LD_INT 16
23492: PUSH
23493: LD_INT 17
23495: PUSH
23496: LD_INT 18
23498: PUSH
23499: LD_INT 19
23501: PUSH
23502: LD_INT 20
23504: PUSH
23505: LD_INT 21
23507: PUSH
23508: LD_INT 22
23510: PUSH
23511: LD_INT 23
23513: PUSH
23514: LD_INT 24
23516: PUSH
23517: LD_INT 25
23519: PUSH
23520: LD_INT 26
23522: PUSH
23523: LD_INT 27
23525: PUSH
23526: LD_INT 28
23528: PUSH
23529: LD_INT 29
23531: PUSH
23532: LD_INT 30
23534: PUSH
23535: LD_INT 31
23537: PUSH
23538: LD_INT 32
23540: PUSH
23541: LD_INT 33
23543: PUSH
23544: LD_INT 34
23546: PUSH
23547: LD_INT 36
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 101
23589: PUSH
23590: LD_INT 102
23592: PUSH
23593: LD_INT 103
23595: PUSH
23596: LD_INT 104
23598: PUSH
23599: LD_INT 105
23601: PUSH
23602: LD_INT 106
23604: PUSH
23605: LD_INT 107
23607: PUSH
23608: LD_INT 108
23610: PUSH
23611: LD_INT 109
23613: PUSH
23614: LD_INT 110
23616: PUSH
23617: LD_INT 111
23619: PUSH
23620: LD_INT 112
23622: PUSH
23623: LD_INT 113
23625: PUSH
23626: LD_INT 114
23628: PUSH
23629: LD_INT 116
23631: PUSH
23632: LD_INT 117
23634: PUSH
23635: LD_INT 118
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: ST_TO_ADDR
23661: GO 24436
23663: LD_INT 16
23665: DOUBLE
23666: EQUAL
23667: IFTRUE 23671
23669: GO 23807
23671: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23672: LD_ADDR_VAR 0 1
23676: PUSH
23677: LD_INT 2
23679: PUSH
23680: LD_INT 4
23682: PUSH
23683: LD_INT 5
23685: PUSH
23686: LD_INT 7
23688: PUSH
23689: LD_INT 11
23691: PUSH
23692: LD_INT 12
23694: PUSH
23695: LD_INT 15
23697: PUSH
23698: LD_INT 16
23700: PUSH
23701: LD_INT 20
23703: PUSH
23704: LD_INT 21
23706: PUSH
23707: LD_INT 22
23709: PUSH
23710: LD_INT 23
23712: PUSH
23713: LD_INT 25
23715: PUSH
23716: LD_INT 26
23718: PUSH
23719: LD_INT 30
23721: PUSH
23722: LD_INT 31
23724: PUSH
23725: LD_INT 32
23727: PUSH
23728: LD_INT 33
23730: PUSH
23731: LD_INT 34
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 101
23757: PUSH
23758: LD_INT 102
23760: PUSH
23761: LD_INT 103
23763: PUSH
23764: LD_INT 106
23766: PUSH
23767: LD_INT 108
23769: PUSH
23770: LD_INT 112
23772: PUSH
23773: LD_INT 113
23775: PUSH
23776: LD_INT 114
23778: PUSH
23779: LD_INT 116
23781: PUSH
23782: LD_INT 117
23784: PUSH
23785: LD_INT 118
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: ST_TO_ADDR
23805: GO 24436
23807: LD_INT 17
23809: DOUBLE
23810: EQUAL
23811: IFTRUE 23815
23813: GO 24039
23815: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23816: LD_ADDR_VAR 0 1
23820: PUSH
23821: LD_INT 1
23823: PUSH
23824: LD_INT 2
23826: PUSH
23827: LD_INT 3
23829: PUSH
23830: LD_INT 4
23832: PUSH
23833: LD_INT 5
23835: PUSH
23836: LD_INT 6
23838: PUSH
23839: LD_INT 7
23841: PUSH
23842: LD_INT 8
23844: PUSH
23845: LD_INT 9
23847: PUSH
23848: LD_INT 10
23850: PUSH
23851: LD_INT 11
23853: PUSH
23854: LD_INT 12
23856: PUSH
23857: LD_INT 13
23859: PUSH
23860: LD_INT 14
23862: PUSH
23863: LD_INT 15
23865: PUSH
23866: LD_INT 16
23868: PUSH
23869: LD_INT 17
23871: PUSH
23872: LD_INT 18
23874: PUSH
23875: LD_INT 19
23877: PUSH
23878: LD_INT 20
23880: PUSH
23881: LD_INT 21
23883: PUSH
23884: LD_INT 22
23886: PUSH
23887: LD_INT 23
23889: PUSH
23890: LD_INT 24
23892: PUSH
23893: LD_INT 25
23895: PUSH
23896: LD_INT 26
23898: PUSH
23899: LD_INT 27
23901: PUSH
23902: LD_INT 28
23904: PUSH
23905: LD_INT 29
23907: PUSH
23908: LD_INT 30
23910: PUSH
23911: LD_INT 31
23913: PUSH
23914: LD_INT 32
23916: PUSH
23917: LD_INT 33
23919: PUSH
23920: LD_INT 34
23922: PUSH
23923: LD_INT 36
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 101
23965: PUSH
23966: LD_INT 102
23968: PUSH
23969: LD_INT 103
23971: PUSH
23972: LD_INT 104
23974: PUSH
23975: LD_INT 105
23977: PUSH
23978: LD_INT 106
23980: PUSH
23981: LD_INT 107
23983: PUSH
23984: LD_INT 108
23986: PUSH
23987: LD_INT 109
23989: PUSH
23990: LD_INT 110
23992: PUSH
23993: LD_INT 111
23995: PUSH
23996: LD_INT 112
23998: PUSH
23999: LD_INT 113
24001: PUSH
24002: LD_INT 114
24004: PUSH
24005: LD_INT 116
24007: PUSH
24008: LD_INT 117
24010: PUSH
24011: LD_INT 118
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: ST_TO_ADDR
24037: GO 24436
24039: LD_INT 18
24041: DOUBLE
24042: EQUAL
24043: IFTRUE 24047
24045: GO 24195
24047: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24048: LD_ADDR_VAR 0 1
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: LD_INT 4
24058: PUSH
24059: LD_INT 5
24061: PUSH
24062: LD_INT 7
24064: PUSH
24065: LD_INT 11
24067: PUSH
24068: LD_INT 12
24070: PUSH
24071: LD_INT 15
24073: PUSH
24074: LD_INT 16
24076: PUSH
24077: LD_INT 20
24079: PUSH
24080: LD_INT 21
24082: PUSH
24083: LD_INT 22
24085: PUSH
24086: LD_INT 23
24088: PUSH
24089: LD_INT 25
24091: PUSH
24092: LD_INT 26
24094: PUSH
24095: LD_INT 30
24097: PUSH
24098: LD_INT 31
24100: PUSH
24101: LD_INT 32
24103: PUSH
24104: LD_INT 33
24106: PUSH
24107: LD_INT 34
24109: PUSH
24110: LD_INT 35
24112: PUSH
24113: LD_INT 36
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 101
24141: PUSH
24142: LD_INT 102
24144: PUSH
24145: LD_INT 103
24147: PUSH
24148: LD_INT 106
24150: PUSH
24151: LD_INT 108
24153: PUSH
24154: LD_INT 112
24156: PUSH
24157: LD_INT 113
24159: PUSH
24160: LD_INT 114
24162: PUSH
24163: LD_INT 115
24165: PUSH
24166: LD_INT 116
24168: PUSH
24169: LD_INT 117
24171: PUSH
24172: LD_INT 118
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: ST_TO_ADDR
24193: GO 24436
24195: LD_INT 19
24197: DOUBLE
24198: EQUAL
24199: IFTRUE 24203
24201: GO 24435
24203: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24204: LD_ADDR_VAR 0 1
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: LD_INT 3
24217: PUSH
24218: LD_INT 4
24220: PUSH
24221: LD_INT 5
24223: PUSH
24224: LD_INT 6
24226: PUSH
24227: LD_INT 7
24229: PUSH
24230: LD_INT 8
24232: PUSH
24233: LD_INT 9
24235: PUSH
24236: LD_INT 10
24238: PUSH
24239: LD_INT 11
24241: PUSH
24242: LD_INT 12
24244: PUSH
24245: LD_INT 13
24247: PUSH
24248: LD_INT 14
24250: PUSH
24251: LD_INT 15
24253: PUSH
24254: LD_INT 16
24256: PUSH
24257: LD_INT 17
24259: PUSH
24260: LD_INT 18
24262: PUSH
24263: LD_INT 19
24265: PUSH
24266: LD_INT 20
24268: PUSH
24269: LD_INT 21
24271: PUSH
24272: LD_INT 22
24274: PUSH
24275: LD_INT 23
24277: PUSH
24278: LD_INT 24
24280: PUSH
24281: LD_INT 25
24283: PUSH
24284: LD_INT 26
24286: PUSH
24287: LD_INT 27
24289: PUSH
24290: LD_INT 28
24292: PUSH
24293: LD_INT 29
24295: PUSH
24296: LD_INT 30
24298: PUSH
24299: LD_INT 31
24301: PUSH
24302: LD_INT 32
24304: PUSH
24305: LD_INT 33
24307: PUSH
24308: LD_INT 34
24310: PUSH
24311: LD_INT 35
24313: PUSH
24314: LD_INT 36
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 101
24357: PUSH
24358: LD_INT 102
24360: PUSH
24361: LD_INT 103
24363: PUSH
24364: LD_INT 104
24366: PUSH
24367: LD_INT 105
24369: PUSH
24370: LD_INT 106
24372: PUSH
24373: LD_INT 107
24375: PUSH
24376: LD_INT 108
24378: PUSH
24379: LD_INT 109
24381: PUSH
24382: LD_INT 110
24384: PUSH
24385: LD_INT 111
24387: PUSH
24388: LD_INT 112
24390: PUSH
24391: LD_INT 113
24393: PUSH
24394: LD_INT 114
24396: PUSH
24397: LD_INT 115
24399: PUSH
24400: LD_INT 116
24402: PUSH
24403: LD_INT 117
24405: PUSH
24406: LD_INT 118
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: ST_TO_ADDR
24433: GO 24436
24435: POP
// end else
24436: GO 24667
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24438: LD_ADDR_VAR 0 1
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: LD_INT 3
24451: PUSH
24452: LD_INT 4
24454: PUSH
24455: LD_INT 5
24457: PUSH
24458: LD_INT 6
24460: PUSH
24461: LD_INT 7
24463: PUSH
24464: LD_INT 8
24466: PUSH
24467: LD_INT 9
24469: PUSH
24470: LD_INT 10
24472: PUSH
24473: LD_INT 11
24475: PUSH
24476: LD_INT 12
24478: PUSH
24479: LD_INT 13
24481: PUSH
24482: LD_INT 14
24484: PUSH
24485: LD_INT 15
24487: PUSH
24488: LD_INT 16
24490: PUSH
24491: LD_INT 17
24493: PUSH
24494: LD_INT 18
24496: PUSH
24497: LD_INT 19
24499: PUSH
24500: LD_INT 20
24502: PUSH
24503: LD_INT 21
24505: PUSH
24506: LD_INT 22
24508: PUSH
24509: LD_INT 23
24511: PUSH
24512: LD_INT 24
24514: PUSH
24515: LD_INT 25
24517: PUSH
24518: LD_INT 26
24520: PUSH
24521: LD_INT 27
24523: PUSH
24524: LD_INT 28
24526: PUSH
24527: LD_INT 29
24529: PUSH
24530: LD_INT 30
24532: PUSH
24533: LD_INT 31
24535: PUSH
24536: LD_INT 32
24538: PUSH
24539: LD_INT 33
24541: PUSH
24542: LD_INT 34
24544: PUSH
24545: LD_INT 35
24547: PUSH
24548: LD_INT 36
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 101
24591: PUSH
24592: LD_INT 102
24594: PUSH
24595: LD_INT 103
24597: PUSH
24598: LD_INT 104
24600: PUSH
24601: LD_INT 105
24603: PUSH
24604: LD_INT 106
24606: PUSH
24607: LD_INT 107
24609: PUSH
24610: LD_INT 108
24612: PUSH
24613: LD_INT 109
24615: PUSH
24616: LD_INT 110
24618: PUSH
24619: LD_INT 111
24621: PUSH
24622: LD_INT 112
24624: PUSH
24625: LD_INT 113
24627: PUSH
24628: LD_INT 114
24630: PUSH
24631: LD_INT 115
24633: PUSH
24634: LD_INT 116
24636: PUSH
24637: LD_INT 117
24639: PUSH
24640: LD_INT 118
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: ST_TO_ADDR
// if result then
24667: LD_VAR 0 1
24671: IFFALSE 24960
// begin normal :=  ;
24673: LD_ADDR_VAR 0 3
24677: PUSH
24678: LD_STRING 
24680: ST_TO_ADDR
// hardcore :=  ;
24681: LD_ADDR_VAR 0 4
24685: PUSH
24686: LD_STRING 
24688: ST_TO_ADDR
// for i = 1 to normalCounter do
24689: LD_ADDR_VAR 0 5
24693: PUSH
24694: DOUBLE
24695: LD_INT 1
24697: DEC
24698: ST_TO_ADDR
24699: LD_EXP 68
24703: PUSH
24704: FOR_TO
24705: IFFALSE 24806
// begin tmp := 0 ;
24707: LD_ADDR_VAR 0 2
24711: PUSH
24712: LD_STRING 0
24714: ST_TO_ADDR
// if result [ 1 ] then
24715: LD_VAR 0 1
24719: PUSH
24720: LD_INT 1
24722: ARRAY
24723: IFFALSE 24788
// if result [ 1 ] [ 1 ] = i then
24725: LD_VAR 0 1
24729: PUSH
24730: LD_INT 1
24732: ARRAY
24733: PUSH
24734: LD_INT 1
24736: ARRAY
24737: PUSH
24738: LD_VAR 0 5
24742: EQUAL
24743: IFFALSE 24788
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24745: LD_ADDR_VAR 0 1
24749: PUSH
24750: LD_VAR 0 1
24754: PPUSH
24755: LD_INT 1
24757: PPUSH
24758: LD_VAR 0 1
24762: PUSH
24763: LD_INT 1
24765: ARRAY
24766: PPUSH
24767: LD_INT 1
24769: PPUSH
24770: CALL_OW 3
24774: PPUSH
24775: CALL_OW 1
24779: ST_TO_ADDR
// tmp := 1 ;
24780: LD_ADDR_VAR 0 2
24784: PUSH
24785: LD_STRING 1
24787: ST_TO_ADDR
// end ; normal := normal & tmp ;
24788: LD_ADDR_VAR 0 3
24792: PUSH
24793: LD_VAR 0 3
24797: PUSH
24798: LD_VAR 0 2
24802: STR
24803: ST_TO_ADDR
// end ;
24804: GO 24704
24806: POP
24807: POP
// for i = 1 to hardcoreCounter do
24808: LD_ADDR_VAR 0 5
24812: PUSH
24813: DOUBLE
24814: LD_INT 1
24816: DEC
24817: ST_TO_ADDR
24818: LD_EXP 69
24822: PUSH
24823: FOR_TO
24824: IFFALSE 24929
// begin tmp := 0 ;
24826: LD_ADDR_VAR 0 2
24830: PUSH
24831: LD_STRING 0
24833: ST_TO_ADDR
// if result [ 2 ] then
24834: LD_VAR 0 1
24838: PUSH
24839: LD_INT 2
24841: ARRAY
24842: IFFALSE 24911
// if result [ 2 ] [ 1 ] = 100 + i then
24844: LD_VAR 0 1
24848: PUSH
24849: LD_INT 2
24851: ARRAY
24852: PUSH
24853: LD_INT 1
24855: ARRAY
24856: PUSH
24857: LD_INT 100
24859: PUSH
24860: LD_VAR 0 5
24864: PLUS
24865: EQUAL
24866: IFFALSE 24911
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24868: LD_ADDR_VAR 0 1
24872: PUSH
24873: LD_VAR 0 1
24877: PPUSH
24878: LD_INT 2
24880: PPUSH
24881: LD_VAR 0 1
24885: PUSH
24886: LD_INT 2
24888: ARRAY
24889: PPUSH
24890: LD_INT 1
24892: PPUSH
24893: CALL_OW 3
24897: PPUSH
24898: CALL_OW 1
24902: ST_TO_ADDR
// tmp := 1 ;
24903: LD_ADDR_VAR 0 2
24907: PUSH
24908: LD_STRING 1
24910: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24911: LD_ADDR_VAR 0 4
24915: PUSH
24916: LD_VAR 0 4
24920: PUSH
24921: LD_VAR 0 2
24925: STR
24926: ST_TO_ADDR
// end ;
24927: GO 24823
24929: POP
24930: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24931: LD_STRING getStreamItemsFromMission("
24933: PUSH
24934: LD_VAR 0 3
24938: STR
24939: PUSH
24940: LD_STRING ","
24942: STR
24943: PUSH
24944: LD_VAR 0 4
24948: STR
24949: PUSH
24950: LD_STRING ")
24952: STR
24953: PPUSH
24954: CALL_OW 559
// end else
24958: GO 24967
// ToLua ( getStreamItemsFromMission("","") ) ;
24960: LD_STRING getStreamItemsFromMission("","")
24962: PPUSH
24963: CALL_OW 559
// end ;
24967: LD_VAR 0 1
24971: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24972: LD_EXP 67
24976: PUSH
24977: LD_EXP 72
24981: AND
24982: IFFALSE 25106
24984: GO 24986
24986: DISABLE
24987: LD_INT 0
24989: PPUSH
24990: PPUSH
// begin enable ;
24991: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24992: LD_ADDR_VAR 0 2
24996: PUSH
24997: LD_INT 22
24999: PUSH
25000: LD_OWVAR 2
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 2
25011: PUSH
25012: LD_INT 34
25014: PUSH
25015: LD_INT 7
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 34
25024: PUSH
25025: LD_INT 45
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 34
25034: PUSH
25035: LD_INT 28
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 34
25044: PUSH
25045: LD_INT 47
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PPUSH
25063: CALL_OW 69
25067: ST_TO_ADDR
// if not tmp then
25068: LD_VAR 0 2
25072: NOT
25073: IFFALSE 25077
// exit ;
25075: GO 25106
// for i in tmp do
25077: LD_ADDR_VAR 0 1
25081: PUSH
25082: LD_VAR 0 2
25086: PUSH
25087: FOR_IN
25088: IFFALSE 25104
// begin SetLives ( i , 0 ) ;
25090: LD_VAR 0 1
25094: PPUSH
25095: LD_INT 0
25097: PPUSH
25098: CALL_OW 234
// end ;
25102: GO 25087
25104: POP
25105: POP
// end ;
25106: PPOPN 2
25108: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25109: LD_EXP 67
25113: PUSH
25114: LD_EXP 73
25118: AND
25119: IFFALSE 25203
25121: GO 25123
25123: DISABLE
25124: LD_INT 0
25126: PPUSH
25127: PPUSH
// begin enable ;
25128: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25129: LD_ADDR_VAR 0 2
25133: PUSH
25134: LD_INT 22
25136: PUSH
25137: LD_OWVAR 2
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 32
25148: PUSH
25149: LD_INT 3
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PPUSH
25160: CALL_OW 69
25164: ST_TO_ADDR
// if not tmp then
25165: LD_VAR 0 2
25169: NOT
25170: IFFALSE 25174
// exit ;
25172: GO 25203
// for i in tmp do
25174: LD_ADDR_VAR 0 1
25178: PUSH
25179: LD_VAR 0 2
25183: PUSH
25184: FOR_IN
25185: IFFALSE 25201
// begin SetLives ( i , 0 ) ;
25187: LD_VAR 0 1
25191: PPUSH
25192: LD_INT 0
25194: PPUSH
25195: CALL_OW 234
// end ;
25199: GO 25184
25201: POP
25202: POP
// end ;
25203: PPOPN 2
25205: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25206: LD_EXP 67
25210: PUSH
25211: LD_EXP 70
25215: AND
25216: IFFALSE 25309
25218: GO 25220
25220: DISABLE
25221: LD_INT 0
25223: PPUSH
// begin enable ;
25224: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25225: LD_ADDR_VAR 0 1
25229: PUSH
25230: LD_INT 22
25232: PUSH
25233: LD_OWVAR 2
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 2
25244: PUSH
25245: LD_INT 25
25247: PUSH
25248: LD_INT 5
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 25
25257: PUSH
25258: LD_INT 9
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 25
25267: PUSH
25268: LD_INT 8
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PPUSH
25285: CALL_OW 69
25289: PUSH
25290: FOR_IN
25291: IFFALSE 25307
// begin SetClass ( i , 1 ) ;
25293: LD_VAR 0 1
25297: PPUSH
25298: LD_INT 1
25300: PPUSH
25301: CALL_OW 336
// end ;
25305: GO 25290
25307: POP
25308: POP
// end ;
25309: PPOPN 1
25311: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25312: LD_EXP 67
25316: PUSH
25317: LD_EXP 71
25321: AND
25322: PUSH
25323: LD_OWVAR 65
25327: PUSH
25328: LD_INT 7
25330: LESS
25331: AND
25332: IFFALSE 25346
25334: GO 25336
25336: DISABLE
// begin enable ;
25337: ENABLE
// game_speed := 7 ;
25338: LD_ADDR_OWVAR 65
25342: PUSH
25343: LD_INT 7
25345: ST_TO_ADDR
// end ;
25346: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25347: LD_EXP 67
25351: PUSH
25352: LD_EXP 74
25356: AND
25357: IFFALSE 25559
25359: GO 25361
25361: DISABLE
25362: LD_INT 0
25364: PPUSH
25365: PPUSH
25366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25367: LD_ADDR_VAR 0 3
25371: PUSH
25372: LD_INT 81
25374: PUSH
25375: LD_OWVAR 2
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 21
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PPUSH
25398: CALL_OW 69
25402: ST_TO_ADDR
// if not tmp then
25403: LD_VAR 0 3
25407: NOT
25408: IFFALSE 25412
// exit ;
25410: GO 25559
// if tmp > 5 then
25412: LD_VAR 0 3
25416: PUSH
25417: LD_INT 5
25419: GREATER
25420: IFFALSE 25432
// k := 5 else
25422: LD_ADDR_VAR 0 2
25426: PUSH
25427: LD_INT 5
25429: ST_TO_ADDR
25430: GO 25442
// k := tmp ;
25432: LD_ADDR_VAR 0 2
25436: PUSH
25437: LD_VAR 0 3
25441: ST_TO_ADDR
// for i := 1 to k do
25442: LD_ADDR_VAR 0 1
25446: PUSH
25447: DOUBLE
25448: LD_INT 1
25450: DEC
25451: ST_TO_ADDR
25452: LD_VAR 0 2
25456: PUSH
25457: FOR_TO
25458: IFFALSE 25557
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25460: LD_VAR 0 3
25464: PUSH
25465: LD_VAR 0 1
25469: ARRAY
25470: PPUSH
25471: LD_VAR 0 1
25475: PUSH
25476: LD_INT 4
25478: MOD
25479: PUSH
25480: LD_INT 1
25482: PLUS
25483: PPUSH
25484: CALL_OW 259
25488: PUSH
25489: LD_INT 10
25491: LESS
25492: IFFALSE 25555
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25494: LD_VAR 0 3
25498: PUSH
25499: LD_VAR 0 1
25503: ARRAY
25504: PPUSH
25505: LD_VAR 0 1
25509: PUSH
25510: LD_INT 4
25512: MOD
25513: PUSH
25514: LD_INT 1
25516: PLUS
25517: PPUSH
25518: LD_VAR 0 3
25522: PUSH
25523: LD_VAR 0 1
25527: ARRAY
25528: PPUSH
25529: LD_VAR 0 1
25533: PUSH
25534: LD_INT 4
25536: MOD
25537: PUSH
25538: LD_INT 1
25540: PLUS
25541: PPUSH
25542: CALL_OW 259
25546: PUSH
25547: LD_INT 1
25549: PLUS
25550: PPUSH
25551: CALL_OW 237
25555: GO 25457
25557: POP
25558: POP
// end ;
25559: PPOPN 3
25561: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25562: LD_EXP 67
25566: PUSH
25567: LD_EXP 75
25571: AND
25572: IFFALSE 25592
25574: GO 25576
25576: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25577: LD_INT 4
25579: PPUSH
25580: LD_OWVAR 2
25584: PPUSH
25585: LD_INT 0
25587: PPUSH
25588: CALL_OW 324
25592: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25593: LD_EXP 67
25597: PUSH
25598: LD_EXP 104
25602: AND
25603: IFFALSE 25623
25605: GO 25607
25607: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25608: LD_INT 19
25610: PPUSH
25611: LD_OWVAR 2
25615: PPUSH
25616: LD_INT 0
25618: PPUSH
25619: CALL_OW 324
25623: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25624: LD_EXP 67
25628: PUSH
25629: LD_EXP 76
25633: AND
25634: IFFALSE 25736
25636: GO 25638
25638: DISABLE
25639: LD_INT 0
25641: PPUSH
25642: PPUSH
// begin enable ;
25643: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25644: LD_ADDR_VAR 0 2
25648: PUSH
25649: LD_INT 22
25651: PUSH
25652: LD_OWVAR 2
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: PUSH
25664: LD_INT 34
25666: PUSH
25667: LD_INT 11
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 34
25676: PUSH
25677: LD_INT 30
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: LIST
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PPUSH
25693: CALL_OW 69
25697: ST_TO_ADDR
// if not tmp then
25698: LD_VAR 0 2
25702: NOT
25703: IFFALSE 25707
// exit ;
25705: GO 25736
// for i in tmp do
25707: LD_ADDR_VAR 0 1
25711: PUSH
25712: LD_VAR 0 2
25716: PUSH
25717: FOR_IN
25718: IFFALSE 25734
// begin SetLives ( i , 0 ) ;
25720: LD_VAR 0 1
25724: PPUSH
25725: LD_INT 0
25727: PPUSH
25728: CALL_OW 234
// end ;
25732: GO 25717
25734: POP
25735: POP
// end ;
25736: PPOPN 2
25738: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25739: LD_EXP 67
25743: PUSH
25744: LD_EXP 77
25748: AND
25749: IFFALSE 25769
25751: GO 25753
25753: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25754: LD_INT 32
25756: PPUSH
25757: LD_OWVAR 2
25761: PPUSH
25762: LD_INT 0
25764: PPUSH
25765: CALL_OW 324
25769: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25770: LD_EXP 67
25774: PUSH
25775: LD_EXP 78
25779: AND
25780: IFFALSE 25961
25782: GO 25784
25784: DISABLE
25785: LD_INT 0
25787: PPUSH
25788: PPUSH
25789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25790: LD_ADDR_VAR 0 2
25794: PUSH
25795: LD_INT 22
25797: PUSH
25798: LD_OWVAR 2
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 33
25809: PUSH
25810: LD_INT 3
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PPUSH
25821: CALL_OW 69
25825: ST_TO_ADDR
// if not tmp then
25826: LD_VAR 0 2
25830: NOT
25831: IFFALSE 25835
// exit ;
25833: GO 25961
// side := 0 ;
25835: LD_ADDR_VAR 0 3
25839: PUSH
25840: LD_INT 0
25842: ST_TO_ADDR
// for i := 1 to 8 do
25843: LD_ADDR_VAR 0 1
25847: PUSH
25848: DOUBLE
25849: LD_INT 1
25851: DEC
25852: ST_TO_ADDR
25853: LD_INT 8
25855: PUSH
25856: FOR_TO
25857: IFFALSE 25905
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25859: LD_OWVAR 2
25863: PUSH
25864: LD_VAR 0 1
25868: NONEQUAL
25869: PUSH
25870: LD_OWVAR 2
25874: PPUSH
25875: LD_VAR 0 1
25879: PPUSH
25880: CALL_OW 81
25884: PUSH
25885: LD_INT 2
25887: EQUAL
25888: AND
25889: IFFALSE 25903
// begin side := i ;
25891: LD_ADDR_VAR 0 3
25895: PUSH
25896: LD_VAR 0 1
25900: ST_TO_ADDR
// break ;
25901: GO 25905
// end ;
25903: GO 25856
25905: POP
25906: POP
// if not side then
25907: LD_VAR 0 3
25911: NOT
25912: IFFALSE 25916
// exit ;
25914: GO 25961
// for i := 1 to tmp do
25916: LD_ADDR_VAR 0 1
25920: PUSH
25921: DOUBLE
25922: LD_INT 1
25924: DEC
25925: ST_TO_ADDR
25926: LD_VAR 0 2
25930: PUSH
25931: FOR_TO
25932: IFFALSE 25959
// if Prob ( 60 ) then
25934: LD_INT 60
25936: PPUSH
25937: CALL_OW 13
25941: IFFALSE 25957
// SetSide ( i , side ) ;
25943: LD_VAR 0 1
25947: PPUSH
25948: LD_VAR 0 3
25952: PPUSH
25953: CALL_OW 235
25957: GO 25931
25959: POP
25960: POP
// end ;
25961: PPOPN 3
25963: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25964: LD_EXP 67
25968: PUSH
25969: LD_EXP 80
25973: AND
25974: IFFALSE 26093
25976: GO 25978
25978: DISABLE
25979: LD_INT 0
25981: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25982: LD_ADDR_VAR 0 1
25986: PUSH
25987: LD_INT 22
25989: PUSH
25990: LD_OWVAR 2
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 21
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 3
26011: PUSH
26012: LD_INT 23
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: LIST
26030: PPUSH
26031: CALL_OW 69
26035: PUSH
26036: FOR_IN
26037: IFFALSE 26091
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26039: LD_VAR 0 1
26043: PPUSH
26044: CALL_OW 257
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: LD_INT 4
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: IN
26067: IFFALSE 26089
// SetClass ( un , rand ( 1 , 4 ) ) ;
26069: LD_VAR 0 1
26073: PPUSH
26074: LD_INT 1
26076: PPUSH
26077: LD_INT 4
26079: PPUSH
26080: CALL_OW 12
26084: PPUSH
26085: CALL_OW 336
26089: GO 26036
26091: POP
26092: POP
// end ;
26093: PPOPN 1
26095: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26096: LD_EXP 67
26100: PUSH
26101: LD_EXP 79
26105: AND
26106: IFFALSE 26185
26108: GO 26110
26110: DISABLE
26111: LD_INT 0
26113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26114: LD_ADDR_VAR 0 1
26118: PUSH
26119: LD_INT 22
26121: PUSH
26122: LD_OWVAR 2
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 21
26133: PUSH
26134: LD_INT 3
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PPUSH
26145: CALL_OW 69
26149: ST_TO_ADDR
// if not tmp then
26150: LD_VAR 0 1
26154: NOT
26155: IFFALSE 26159
// exit ;
26157: GO 26185
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26159: LD_VAR 0 1
26163: PUSH
26164: LD_INT 1
26166: PPUSH
26167: LD_VAR 0 1
26171: PPUSH
26172: CALL_OW 12
26176: ARRAY
26177: PPUSH
26178: LD_INT 100
26180: PPUSH
26181: CALL_OW 234
// end ;
26185: PPOPN 1
26187: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26188: LD_EXP 67
26192: PUSH
26193: LD_EXP 81
26197: AND
26198: IFFALSE 26296
26200: GO 26202
26202: DISABLE
26203: LD_INT 0
26205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26206: LD_ADDR_VAR 0 1
26210: PUSH
26211: LD_INT 22
26213: PUSH
26214: LD_OWVAR 2
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 21
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PPUSH
26237: CALL_OW 69
26241: ST_TO_ADDR
// if not tmp then
26242: LD_VAR 0 1
26246: NOT
26247: IFFALSE 26251
// exit ;
26249: GO 26296
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26251: LD_VAR 0 1
26255: PUSH
26256: LD_INT 1
26258: PPUSH
26259: LD_VAR 0 1
26263: PPUSH
26264: CALL_OW 12
26268: ARRAY
26269: PPUSH
26270: LD_INT 1
26272: PPUSH
26273: LD_INT 4
26275: PPUSH
26276: CALL_OW 12
26280: PPUSH
26281: LD_INT 3000
26283: PPUSH
26284: LD_INT 9000
26286: PPUSH
26287: CALL_OW 12
26291: PPUSH
26292: CALL_OW 492
// end ;
26296: PPOPN 1
26298: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26299: LD_EXP 67
26303: PUSH
26304: LD_EXP 82
26308: AND
26309: IFFALSE 26329
26311: GO 26313
26313: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26314: LD_INT 1
26316: PPUSH
26317: LD_OWVAR 2
26321: PPUSH
26322: LD_INT 0
26324: PPUSH
26325: CALL_OW 324
26329: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26330: LD_EXP 67
26334: PUSH
26335: LD_EXP 83
26339: AND
26340: IFFALSE 26423
26342: GO 26344
26344: DISABLE
26345: LD_INT 0
26347: PPUSH
26348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26349: LD_ADDR_VAR 0 2
26353: PUSH
26354: LD_INT 22
26356: PUSH
26357: LD_OWVAR 2
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 21
26368: PUSH
26369: LD_INT 3
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PPUSH
26380: CALL_OW 69
26384: ST_TO_ADDR
// if not tmp then
26385: LD_VAR 0 2
26389: NOT
26390: IFFALSE 26394
// exit ;
26392: GO 26423
// for i in tmp do
26394: LD_ADDR_VAR 0 1
26398: PUSH
26399: LD_VAR 0 2
26403: PUSH
26404: FOR_IN
26405: IFFALSE 26421
// SetBLevel ( i , 10 ) ;
26407: LD_VAR 0 1
26411: PPUSH
26412: LD_INT 10
26414: PPUSH
26415: CALL_OW 241
26419: GO 26404
26421: POP
26422: POP
// end ;
26423: PPOPN 2
26425: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26426: LD_EXP 67
26430: PUSH
26431: LD_EXP 84
26435: AND
26436: IFFALSE 26547
26438: GO 26440
26440: DISABLE
26441: LD_INT 0
26443: PPUSH
26444: PPUSH
26445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26446: LD_ADDR_VAR 0 3
26450: PUSH
26451: LD_INT 22
26453: PUSH
26454: LD_OWVAR 2
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 25
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PPUSH
26477: CALL_OW 69
26481: ST_TO_ADDR
// if not tmp then
26482: LD_VAR 0 3
26486: NOT
26487: IFFALSE 26491
// exit ;
26489: GO 26547
// un := tmp [ rand ( 1 , tmp ) ] ;
26491: LD_ADDR_VAR 0 2
26495: PUSH
26496: LD_VAR 0 3
26500: PUSH
26501: LD_INT 1
26503: PPUSH
26504: LD_VAR 0 3
26508: PPUSH
26509: CALL_OW 12
26513: ARRAY
26514: ST_TO_ADDR
// if Crawls ( un ) then
26515: LD_VAR 0 2
26519: PPUSH
26520: CALL_OW 318
26524: IFFALSE 26535
// ComWalk ( un ) ;
26526: LD_VAR 0 2
26530: PPUSH
26531: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26535: LD_VAR 0 2
26539: PPUSH
26540: LD_INT 5
26542: PPUSH
26543: CALL_OW 336
// end ;
26547: PPOPN 3
26549: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26550: LD_EXP 67
26554: PUSH
26555: LD_EXP 85
26559: AND
26560: PUSH
26561: LD_OWVAR 67
26565: PUSH
26566: LD_INT 4
26568: LESS
26569: AND
26570: IFFALSE 26589
26572: GO 26574
26574: DISABLE
// begin Difficulty := Difficulty + 1 ;
26575: LD_ADDR_OWVAR 67
26579: PUSH
26580: LD_OWVAR 67
26584: PUSH
26585: LD_INT 1
26587: PLUS
26588: ST_TO_ADDR
// end ;
26589: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26590: LD_EXP 67
26594: PUSH
26595: LD_EXP 86
26599: AND
26600: IFFALSE 26703
26602: GO 26604
26604: DISABLE
26605: LD_INT 0
26607: PPUSH
// begin for i := 1 to 5 do
26608: LD_ADDR_VAR 0 1
26612: PUSH
26613: DOUBLE
26614: LD_INT 1
26616: DEC
26617: ST_TO_ADDR
26618: LD_INT 5
26620: PUSH
26621: FOR_TO
26622: IFFALSE 26701
// begin uc_nation := nation_nature ;
26624: LD_ADDR_OWVAR 21
26628: PUSH
26629: LD_INT 0
26631: ST_TO_ADDR
// uc_side := 0 ;
26632: LD_ADDR_OWVAR 20
26636: PUSH
26637: LD_INT 0
26639: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26640: LD_ADDR_OWVAR 29
26644: PUSH
26645: LD_INT 12
26647: PUSH
26648: LD_INT 12
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: ST_TO_ADDR
// hc_agressivity := 20 ;
26655: LD_ADDR_OWVAR 35
26659: PUSH
26660: LD_INT 20
26662: ST_TO_ADDR
// hc_class := class_tiger ;
26663: LD_ADDR_OWVAR 28
26667: PUSH
26668: LD_INT 14
26670: ST_TO_ADDR
// hc_gallery :=  ;
26671: LD_ADDR_OWVAR 33
26675: PUSH
26676: LD_STRING 
26678: ST_TO_ADDR
// hc_name :=  ;
26679: LD_ADDR_OWVAR 26
26683: PUSH
26684: LD_STRING 
26686: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26687: CALL_OW 44
26691: PPUSH
26692: LD_INT 0
26694: PPUSH
26695: CALL_OW 51
// end ;
26699: GO 26621
26701: POP
26702: POP
// end ;
26703: PPOPN 1
26705: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26706: LD_EXP 67
26710: PUSH
26711: LD_EXP 87
26715: AND
26716: IFFALSE 26725
26718: GO 26720
26720: DISABLE
// StreamSibBomb ;
26721: CALL 26726 0 0
26725: END
// export function StreamSibBomb ; var i , x , y ; begin
26726: LD_INT 0
26728: PPUSH
26729: PPUSH
26730: PPUSH
26731: PPUSH
// result := false ;
26732: LD_ADDR_VAR 0 1
26736: PUSH
26737: LD_INT 0
26739: ST_TO_ADDR
// for i := 1 to 16 do
26740: LD_ADDR_VAR 0 2
26744: PUSH
26745: DOUBLE
26746: LD_INT 1
26748: DEC
26749: ST_TO_ADDR
26750: LD_INT 16
26752: PUSH
26753: FOR_TO
26754: IFFALSE 26953
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26756: LD_ADDR_VAR 0 3
26760: PUSH
26761: LD_INT 10
26763: PUSH
26764: LD_INT 20
26766: PUSH
26767: LD_INT 30
26769: PUSH
26770: LD_INT 40
26772: PUSH
26773: LD_INT 50
26775: PUSH
26776: LD_INT 60
26778: PUSH
26779: LD_INT 70
26781: PUSH
26782: LD_INT 80
26784: PUSH
26785: LD_INT 90
26787: PUSH
26788: LD_INT 100
26790: PUSH
26791: LD_INT 110
26793: PUSH
26794: LD_INT 120
26796: PUSH
26797: LD_INT 130
26799: PUSH
26800: LD_INT 140
26802: PUSH
26803: LD_INT 150
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: PPUSH
26826: LD_INT 15
26828: PPUSH
26829: CALL_OW 12
26833: ARRAY
26834: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26835: LD_ADDR_VAR 0 4
26839: PUSH
26840: LD_INT 10
26842: PUSH
26843: LD_INT 20
26845: PUSH
26846: LD_INT 30
26848: PUSH
26849: LD_INT 40
26851: PUSH
26852: LD_INT 50
26854: PUSH
26855: LD_INT 60
26857: PUSH
26858: LD_INT 70
26860: PUSH
26861: LD_INT 80
26863: PUSH
26864: LD_INT 90
26866: PUSH
26867: LD_INT 100
26869: PUSH
26870: LD_INT 110
26872: PUSH
26873: LD_INT 120
26875: PUSH
26876: LD_INT 130
26878: PUSH
26879: LD_INT 140
26881: PUSH
26882: LD_INT 150
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 1
26904: PPUSH
26905: LD_INT 15
26907: PPUSH
26908: CALL_OW 12
26912: ARRAY
26913: ST_TO_ADDR
// if ValidHex ( x , y ) then
26914: LD_VAR 0 3
26918: PPUSH
26919: LD_VAR 0 4
26923: PPUSH
26924: CALL_OW 488
26928: IFFALSE 26951
// begin result := [ x , y ] ;
26930: LD_ADDR_VAR 0 1
26934: PUSH
26935: LD_VAR 0 3
26939: PUSH
26940: LD_VAR 0 4
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: ST_TO_ADDR
// break ;
26949: GO 26953
// end ; end ;
26951: GO 26753
26953: POP
26954: POP
// if result then
26955: LD_VAR 0 1
26959: IFFALSE 27019
// begin ToLua ( playSibBomb() ) ;
26961: LD_STRING playSibBomb()
26963: PPUSH
26964: CALL_OW 559
// wait ( 0 0$14 ) ;
26968: LD_INT 490
26970: PPUSH
26971: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26975: LD_VAR 0 1
26979: PUSH
26980: LD_INT 1
26982: ARRAY
26983: PPUSH
26984: LD_VAR 0 1
26988: PUSH
26989: LD_INT 2
26991: ARRAY
26992: PPUSH
26993: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26997: LD_VAR 0 1
27001: PUSH
27002: LD_INT 1
27004: ARRAY
27005: PPUSH
27006: LD_VAR 0 1
27010: PUSH
27011: LD_INT 2
27013: ARRAY
27014: PPUSH
27015: CALL_OW 429
// end ; end ;
27019: LD_VAR 0 1
27023: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27024: LD_EXP 67
27028: PUSH
27029: LD_EXP 89
27033: AND
27034: IFFALSE 27046
27036: GO 27038
27038: DISABLE
// YouLost (  ) ;
27039: LD_STRING 
27041: PPUSH
27042: CALL_OW 104
27046: END
// every 0 0$1 trigger StreamModeActive and sFog do
27047: LD_EXP 67
27051: PUSH
27052: LD_EXP 88
27056: AND
27057: IFFALSE 27071
27059: GO 27061
27061: DISABLE
// FogOff ( your_side ) ;
27062: LD_OWVAR 2
27066: PPUSH
27067: CALL_OW 344
27071: END
// every 0 0$1 trigger StreamModeActive and sSun do
27072: LD_EXP 67
27076: PUSH
27077: LD_EXP 90
27081: AND
27082: IFFALSE 27110
27084: GO 27086
27086: DISABLE
// begin solar_recharge_percent := 0 ;
27087: LD_ADDR_OWVAR 79
27091: PUSH
27092: LD_INT 0
27094: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27095: LD_INT 10500
27097: PPUSH
27098: CALL_OW 67
// solar_recharge_percent := 100 ;
27102: LD_ADDR_OWVAR 79
27106: PUSH
27107: LD_INT 100
27109: ST_TO_ADDR
// end ;
27110: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27111: LD_EXP 67
27115: PUSH
27116: LD_EXP 91
27120: AND
27121: IFFALSE 27360
27123: GO 27125
27125: DISABLE
27126: LD_INT 0
27128: PPUSH
27129: PPUSH
27130: PPUSH
// begin tmp := [ ] ;
27131: LD_ADDR_VAR 0 3
27135: PUSH
27136: EMPTY
27137: ST_TO_ADDR
// for i := 1 to 6 do
27138: LD_ADDR_VAR 0 1
27142: PUSH
27143: DOUBLE
27144: LD_INT 1
27146: DEC
27147: ST_TO_ADDR
27148: LD_INT 6
27150: PUSH
27151: FOR_TO
27152: IFFALSE 27257
// begin uc_nation := nation_nature ;
27154: LD_ADDR_OWVAR 21
27158: PUSH
27159: LD_INT 0
27161: ST_TO_ADDR
// uc_side := 0 ;
27162: LD_ADDR_OWVAR 20
27166: PUSH
27167: LD_INT 0
27169: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27170: LD_ADDR_OWVAR 29
27174: PUSH
27175: LD_INT 12
27177: PUSH
27178: LD_INT 12
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: ST_TO_ADDR
// hc_agressivity := 20 ;
27185: LD_ADDR_OWVAR 35
27189: PUSH
27190: LD_INT 20
27192: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27193: LD_ADDR_OWVAR 28
27197: PUSH
27198: LD_INT 17
27200: ST_TO_ADDR
// hc_gallery :=  ;
27201: LD_ADDR_OWVAR 33
27205: PUSH
27206: LD_STRING 
27208: ST_TO_ADDR
// hc_name :=  ;
27209: LD_ADDR_OWVAR 26
27213: PUSH
27214: LD_STRING 
27216: ST_TO_ADDR
// un := CreateHuman ;
27217: LD_ADDR_VAR 0 2
27221: PUSH
27222: CALL_OW 44
27226: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27227: LD_VAR 0 2
27231: PPUSH
27232: LD_INT 1
27234: PPUSH
27235: CALL_OW 51
// tmp := tmp ^ un ;
27239: LD_ADDR_VAR 0 3
27243: PUSH
27244: LD_VAR 0 3
27248: PUSH
27249: LD_VAR 0 2
27253: ADD
27254: ST_TO_ADDR
// end ;
27255: GO 27151
27257: POP
27258: POP
// repeat wait ( 0 0$1 ) ;
27259: LD_INT 35
27261: PPUSH
27262: CALL_OW 67
// for un in tmp do
27266: LD_ADDR_VAR 0 2
27270: PUSH
27271: LD_VAR 0 3
27275: PUSH
27276: FOR_IN
27277: IFFALSE 27351
// begin if IsDead ( un ) then
27279: LD_VAR 0 2
27283: PPUSH
27284: CALL_OW 301
27288: IFFALSE 27308
// begin tmp := tmp diff un ;
27290: LD_ADDR_VAR 0 3
27294: PUSH
27295: LD_VAR 0 3
27299: PUSH
27300: LD_VAR 0 2
27304: DIFF
27305: ST_TO_ADDR
// continue ;
27306: GO 27276
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27308: LD_VAR 0 2
27312: PPUSH
27313: LD_INT 3
27315: PUSH
27316: LD_INT 22
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PPUSH
27330: CALL_OW 69
27334: PPUSH
27335: LD_VAR 0 2
27339: PPUSH
27340: CALL_OW 74
27344: PPUSH
27345: CALL_OW 115
// end ;
27349: GO 27276
27351: POP
27352: POP
// until not tmp ;
27353: LD_VAR 0 3
27357: NOT
27358: IFFALSE 27259
// end ;
27360: PPOPN 3
27362: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27363: LD_EXP 67
27367: PUSH
27368: LD_EXP 92
27372: AND
27373: IFFALSE 27427
27375: GO 27377
27377: DISABLE
// begin ToLua ( displayTroll(); ) ;
27378: LD_STRING displayTroll();
27380: PPUSH
27381: CALL_OW 559
// wait ( 3 3$00 ) ;
27385: LD_INT 6300
27387: PPUSH
27388: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27392: LD_STRING hideTroll();
27394: PPUSH
27395: CALL_OW 559
// wait ( 1 1$00 ) ;
27399: LD_INT 2100
27401: PPUSH
27402: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27406: LD_STRING displayTroll();
27408: PPUSH
27409: CALL_OW 559
// wait ( 1 1$00 ) ;
27413: LD_INT 2100
27415: PPUSH
27416: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27420: LD_STRING hideTroll();
27422: PPUSH
27423: CALL_OW 559
// end ;
27427: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27428: LD_EXP 67
27432: PUSH
27433: LD_EXP 93
27437: AND
27438: IFFALSE 27501
27440: GO 27442
27442: DISABLE
27443: LD_INT 0
27445: PPUSH
// begin p := 0 ;
27446: LD_ADDR_VAR 0 1
27450: PUSH
27451: LD_INT 0
27453: ST_TO_ADDR
// repeat game_speed := 1 ;
27454: LD_ADDR_OWVAR 65
27458: PUSH
27459: LD_INT 1
27461: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27462: LD_INT 35
27464: PPUSH
27465: CALL_OW 67
// p := p + 1 ;
27469: LD_ADDR_VAR 0 1
27473: PUSH
27474: LD_VAR 0 1
27478: PUSH
27479: LD_INT 1
27481: PLUS
27482: ST_TO_ADDR
// until p >= 60 ;
27483: LD_VAR 0 1
27487: PUSH
27488: LD_INT 60
27490: GREATEREQUAL
27491: IFFALSE 27454
// game_speed := 4 ;
27493: LD_ADDR_OWVAR 65
27497: PUSH
27498: LD_INT 4
27500: ST_TO_ADDR
// end ;
27501: PPOPN 1
27503: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27504: LD_EXP 67
27508: PUSH
27509: LD_EXP 94
27513: AND
27514: IFFALSE 27660
27516: GO 27518
27518: DISABLE
27519: LD_INT 0
27521: PPUSH
27522: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27523: LD_ADDR_VAR 0 1
27527: PUSH
27528: LD_INT 22
27530: PUSH
27531: LD_OWVAR 2
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 2
27542: PUSH
27543: LD_INT 30
27545: PUSH
27546: LD_INT 0
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 30
27555: PUSH
27556: LD_INT 1
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: LIST
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PPUSH
27572: CALL_OW 69
27576: ST_TO_ADDR
// if not depot then
27577: LD_VAR 0 1
27581: NOT
27582: IFFALSE 27586
// exit ;
27584: GO 27660
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27586: LD_ADDR_VAR 0 2
27590: PUSH
27591: LD_VAR 0 1
27595: PUSH
27596: LD_INT 1
27598: PPUSH
27599: LD_VAR 0 1
27603: PPUSH
27604: CALL_OW 12
27608: ARRAY
27609: PPUSH
27610: CALL_OW 274
27614: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27615: LD_VAR 0 2
27619: PPUSH
27620: LD_INT 1
27622: PPUSH
27623: LD_INT 0
27625: PPUSH
27626: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27630: LD_VAR 0 2
27634: PPUSH
27635: LD_INT 2
27637: PPUSH
27638: LD_INT 0
27640: PPUSH
27641: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27645: LD_VAR 0 2
27649: PPUSH
27650: LD_INT 3
27652: PPUSH
27653: LD_INT 0
27655: PPUSH
27656: CALL_OW 277
// end ;
27660: PPOPN 2
27662: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27663: LD_EXP 67
27667: PUSH
27668: LD_EXP 95
27672: AND
27673: IFFALSE 27770
27675: GO 27677
27677: DISABLE
27678: LD_INT 0
27680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27681: LD_ADDR_VAR 0 1
27685: PUSH
27686: LD_INT 22
27688: PUSH
27689: LD_OWVAR 2
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 21
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 3
27710: PUSH
27711: LD_INT 23
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: LIST
27729: PPUSH
27730: CALL_OW 69
27734: ST_TO_ADDR
// if not tmp then
27735: LD_VAR 0 1
27739: NOT
27740: IFFALSE 27744
// exit ;
27742: GO 27770
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27744: LD_VAR 0 1
27748: PUSH
27749: LD_INT 1
27751: PPUSH
27752: LD_VAR 0 1
27756: PPUSH
27757: CALL_OW 12
27761: ARRAY
27762: PPUSH
27763: LD_INT 200
27765: PPUSH
27766: CALL_OW 234
// end ;
27770: PPOPN 1
27772: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27773: LD_EXP 67
27777: PUSH
27778: LD_EXP 96
27782: AND
27783: IFFALSE 27862
27785: GO 27787
27787: DISABLE
27788: LD_INT 0
27790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27791: LD_ADDR_VAR 0 1
27795: PUSH
27796: LD_INT 22
27798: PUSH
27799: LD_OWVAR 2
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 21
27810: PUSH
27811: LD_INT 2
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PPUSH
27822: CALL_OW 69
27826: ST_TO_ADDR
// if not tmp then
27827: LD_VAR 0 1
27831: NOT
27832: IFFALSE 27836
// exit ;
27834: GO 27862
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27836: LD_VAR 0 1
27840: PUSH
27841: LD_INT 1
27843: PPUSH
27844: LD_VAR 0 1
27848: PPUSH
27849: CALL_OW 12
27853: ARRAY
27854: PPUSH
27855: LD_INT 60
27857: PPUSH
27858: CALL_OW 234
// end ;
27862: PPOPN 1
27864: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27865: LD_EXP 67
27869: PUSH
27870: LD_EXP 97
27874: AND
27875: IFFALSE 27974
27877: GO 27879
27879: DISABLE
27880: LD_INT 0
27882: PPUSH
27883: PPUSH
// begin enable ;
27884: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27885: LD_ADDR_VAR 0 1
27889: PUSH
27890: LD_INT 22
27892: PUSH
27893: LD_OWVAR 2
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 61
27904: PUSH
27905: EMPTY
27906: LIST
27907: PUSH
27908: LD_INT 33
27910: PUSH
27911: LD_INT 2
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: LIST
27922: PPUSH
27923: CALL_OW 69
27927: ST_TO_ADDR
// if not tmp then
27928: LD_VAR 0 1
27932: NOT
27933: IFFALSE 27937
// exit ;
27935: GO 27974
// for i in tmp do
27937: LD_ADDR_VAR 0 2
27941: PUSH
27942: LD_VAR 0 1
27946: PUSH
27947: FOR_IN
27948: IFFALSE 27972
// if IsControledBy ( i ) then
27950: LD_VAR 0 2
27954: PPUSH
27955: CALL_OW 312
27959: IFFALSE 27970
// ComUnlink ( i ) ;
27961: LD_VAR 0 2
27965: PPUSH
27966: CALL_OW 136
27970: GO 27947
27972: POP
27973: POP
// end ;
27974: PPOPN 2
27976: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27977: LD_EXP 67
27981: PUSH
27982: LD_EXP 98
27986: AND
27987: IFFALSE 28127
27989: GO 27991
27991: DISABLE
27992: LD_INT 0
27994: PPUSH
27995: PPUSH
// begin ToLua ( displayPowell(); ) ;
27996: LD_STRING displayPowell();
27998: PPUSH
27999: CALL_OW 559
// uc_side := 0 ;
28003: LD_ADDR_OWVAR 20
28007: PUSH
28008: LD_INT 0
28010: ST_TO_ADDR
// uc_nation := 2 ;
28011: LD_ADDR_OWVAR 21
28015: PUSH
28016: LD_INT 2
28018: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28019: LD_ADDR_OWVAR 37
28023: PUSH
28024: LD_INT 14
28026: ST_TO_ADDR
// vc_engine := engine_siberite ;
28027: LD_ADDR_OWVAR 39
28031: PUSH
28032: LD_INT 3
28034: ST_TO_ADDR
// vc_control := control_apeman ;
28035: LD_ADDR_OWVAR 38
28039: PUSH
28040: LD_INT 5
28042: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28043: LD_ADDR_OWVAR 40
28047: PUSH
28048: LD_INT 29
28050: ST_TO_ADDR
// un := CreateVehicle ;
28051: LD_ADDR_VAR 0 2
28055: PUSH
28056: CALL_OW 45
28060: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28061: LD_VAR 0 2
28065: PPUSH
28066: LD_INT 1
28068: PPUSH
28069: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28073: LD_INT 35
28075: PPUSH
28076: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28080: LD_VAR 0 2
28084: PPUSH
28085: LD_INT 22
28087: PUSH
28088: LD_OWVAR 2
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PPUSH
28097: CALL_OW 69
28101: PPUSH
28102: LD_VAR 0 2
28106: PPUSH
28107: CALL_OW 74
28111: PPUSH
28112: CALL_OW 115
// until IsDead ( un ) ;
28116: LD_VAR 0 2
28120: PPUSH
28121: CALL_OW 301
28125: IFFALSE 28073
// end ;
28127: PPOPN 2
28129: END
// every 0 0$1 trigger StreamModeActive and sStu do
28130: LD_EXP 67
28134: PUSH
28135: LD_EXP 106
28139: AND
28140: IFFALSE 28156
28142: GO 28144
28144: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28145: LD_STRING displayStucuk();
28147: PPUSH
28148: CALL_OW 559
// ResetFog ;
28152: CALL_OW 335
// end ;
28156: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28157: LD_EXP 67
28161: PUSH
28162: LD_EXP 99
28166: AND
28167: IFFALSE 28308
28169: GO 28171
28171: DISABLE
28172: LD_INT 0
28174: PPUSH
28175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28176: LD_ADDR_VAR 0 2
28180: PUSH
28181: LD_INT 22
28183: PUSH
28184: LD_OWVAR 2
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 21
28195: PUSH
28196: LD_INT 1
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PPUSH
28207: CALL_OW 69
28211: ST_TO_ADDR
// if not tmp then
28212: LD_VAR 0 2
28216: NOT
28217: IFFALSE 28221
// exit ;
28219: GO 28308
// un := tmp [ rand ( 1 , tmp ) ] ;
28221: LD_ADDR_VAR 0 1
28225: PUSH
28226: LD_VAR 0 2
28230: PUSH
28231: LD_INT 1
28233: PPUSH
28234: LD_VAR 0 2
28238: PPUSH
28239: CALL_OW 12
28243: ARRAY
28244: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28245: LD_VAR 0 1
28249: PPUSH
28250: LD_INT 0
28252: PPUSH
28253: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28257: LD_VAR 0 1
28261: PPUSH
28262: LD_OWVAR 3
28266: PUSH
28267: LD_VAR 0 1
28271: DIFF
28272: PPUSH
28273: LD_VAR 0 1
28277: PPUSH
28278: CALL_OW 74
28282: PPUSH
28283: CALL_OW 115
// wait ( 0 0$20 ) ;
28287: LD_INT 700
28289: PPUSH
28290: CALL_OW 67
// SetSide ( un , your_side ) ;
28294: LD_VAR 0 1
28298: PPUSH
28299: LD_OWVAR 2
28303: PPUSH
28304: CALL_OW 235
// end ;
28308: PPOPN 2
28310: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28311: LD_EXP 67
28315: PUSH
28316: LD_EXP 100
28320: AND
28321: IFFALSE 28427
28323: GO 28325
28325: DISABLE
28326: LD_INT 0
28328: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28329: LD_ADDR_VAR 0 1
28333: PUSH
28334: LD_INT 22
28336: PUSH
28337: LD_OWVAR 2
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: LD_INT 30
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 30
28361: PUSH
28362: LD_INT 1
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PPUSH
28378: CALL_OW 69
28382: ST_TO_ADDR
// if not depot then
28383: LD_VAR 0 1
28387: NOT
28388: IFFALSE 28392
// exit ;
28390: GO 28427
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28392: LD_VAR 0 1
28396: PUSH
28397: LD_INT 1
28399: ARRAY
28400: PPUSH
28401: CALL_OW 250
28405: PPUSH
28406: LD_VAR 0 1
28410: PUSH
28411: LD_INT 1
28413: ARRAY
28414: PPUSH
28415: CALL_OW 251
28419: PPUSH
28420: LD_INT 70
28422: PPUSH
28423: CALL_OW 495
// end ;
28427: PPOPN 1
28429: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28430: LD_EXP 67
28434: PUSH
28435: LD_EXP 101
28439: AND
28440: IFFALSE 28651
28442: GO 28444
28444: DISABLE
28445: LD_INT 0
28447: PPUSH
28448: PPUSH
28449: PPUSH
28450: PPUSH
28451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28452: LD_ADDR_VAR 0 5
28456: PUSH
28457: LD_INT 22
28459: PUSH
28460: LD_OWVAR 2
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 21
28471: PUSH
28472: LD_INT 1
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PPUSH
28483: CALL_OW 69
28487: ST_TO_ADDR
// if not tmp then
28488: LD_VAR 0 5
28492: NOT
28493: IFFALSE 28497
// exit ;
28495: GO 28651
// for i in tmp do
28497: LD_ADDR_VAR 0 1
28501: PUSH
28502: LD_VAR 0 5
28506: PUSH
28507: FOR_IN
28508: IFFALSE 28649
// begin d := rand ( 0 , 5 ) ;
28510: LD_ADDR_VAR 0 4
28514: PUSH
28515: LD_INT 0
28517: PPUSH
28518: LD_INT 5
28520: PPUSH
28521: CALL_OW 12
28525: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28526: LD_ADDR_VAR 0 2
28530: PUSH
28531: LD_VAR 0 1
28535: PPUSH
28536: CALL_OW 250
28540: PPUSH
28541: LD_VAR 0 4
28545: PPUSH
28546: LD_INT 3
28548: PPUSH
28549: LD_INT 12
28551: PPUSH
28552: CALL_OW 12
28556: PPUSH
28557: CALL_OW 272
28561: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28562: LD_ADDR_VAR 0 3
28566: PUSH
28567: LD_VAR 0 1
28571: PPUSH
28572: CALL_OW 251
28576: PPUSH
28577: LD_VAR 0 4
28581: PPUSH
28582: LD_INT 3
28584: PPUSH
28585: LD_INT 12
28587: PPUSH
28588: CALL_OW 12
28592: PPUSH
28593: CALL_OW 273
28597: ST_TO_ADDR
// if ValidHex ( x , y ) then
28598: LD_VAR 0 2
28602: PPUSH
28603: LD_VAR 0 3
28607: PPUSH
28608: CALL_OW 488
28612: IFFALSE 28647
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28614: LD_VAR 0 1
28618: PPUSH
28619: LD_VAR 0 2
28623: PPUSH
28624: LD_VAR 0 3
28628: PPUSH
28629: LD_INT 3
28631: PPUSH
28632: LD_INT 6
28634: PPUSH
28635: CALL_OW 12
28639: PPUSH
28640: LD_INT 1
28642: PPUSH
28643: CALL_OW 483
// end ;
28647: GO 28507
28649: POP
28650: POP
// end ;
28651: PPOPN 5
28653: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28654: LD_EXP 67
28658: PUSH
28659: LD_EXP 102
28663: AND
28664: IFFALSE 28758
28666: GO 28668
28668: DISABLE
28669: LD_INT 0
28671: PPUSH
28672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28673: LD_ADDR_VAR 0 2
28677: PUSH
28678: LD_INT 22
28680: PUSH
28681: LD_OWVAR 2
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 32
28692: PUSH
28693: LD_INT 1
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 21
28702: PUSH
28703: LD_INT 2
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: PPUSH
28715: CALL_OW 69
28719: ST_TO_ADDR
// if not tmp then
28720: LD_VAR 0 2
28724: NOT
28725: IFFALSE 28729
// exit ;
28727: GO 28758
// for i in tmp do
28729: LD_ADDR_VAR 0 1
28733: PUSH
28734: LD_VAR 0 2
28738: PUSH
28739: FOR_IN
28740: IFFALSE 28756
// SetFuel ( i , 0 ) ;
28742: LD_VAR 0 1
28746: PPUSH
28747: LD_INT 0
28749: PPUSH
28750: CALL_OW 240
28754: GO 28739
28756: POP
28757: POP
// end ;
28758: PPOPN 2
28760: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28761: LD_EXP 67
28765: PUSH
28766: LD_EXP 103
28770: AND
28771: IFFALSE 28837
28773: GO 28775
28775: DISABLE
28776: LD_INT 0
28778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28779: LD_ADDR_VAR 0 1
28783: PUSH
28784: LD_INT 22
28786: PUSH
28787: LD_OWVAR 2
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 30
28798: PUSH
28799: LD_INT 29
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PPUSH
28810: CALL_OW 69
28814: ST_TO_ADDR
// if not tmp then
28815: LD_VAR 0 1
28819: NOT
28820: IFFALSE 28824
// exit ;
28822: GO 28837
// DestroyUnit ( tmp [ 1 ] ) ;
28824: LD_VAR 0 1
28828: PUSH
28829: LD_INT 1
28831: ARRAY
28832: PPUSH
28833: CALL_OW 65
// end ;
28837: PPOPN 1
28839: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28840: LD_EXP 67
28844: PUSH
28845: LD_EXP 105
28849: AND
28850: IFFALSE 28979
28852: GO 28854
28854: DISABLE
28855: LD_INT 0
28857: PPUSH
// begin uc_side := 0 ;
28858: LD_ADDR_OWVAR 20
28862: PUSH
28863: LD_INT 0
28865: ST_TO_ADDR
// uc_nation := nation_arabian ;
28866: LD_ADDR_OWVAR 21
28870: PUSH
28871: LD_INT 2
28873: ST_TO_ADDR
// hc_gallery :=  ;
28874: LD_ADDR_OWVAR 33
28878: PUSH
28879: LD_STRING 
28881: ST_TO_ADDR
// hc_name :=  ;
28882: LD_ADDR_OWVAR 26
28886: PUSH
28887: LD_STRING 
28889: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28890: LD_INT 1
28892: PPUSH
28893: LD_INT 11
28895: PPUSH
28896: LD_INT 10
28898: PPUSH
28899: CALL_OW 380
// un := CreateHuman ;
28903: LD_ADDR_VAR 0 1
28907: PUSH
28908: CALL_OW 44
28912: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28913: LD_VAR 0 1
28917: PPUSH
28918: LD_INT 1
28920: PPUSH
28921: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28925: LD_INT 35
28927: PPUSH
28928: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28932: LD_VAR 0 1
28936: PPUSH
28937: LD_INT 22
28939: PUSH
28940: LD_OWVAR 2
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PPUSH
28949: CALL_OW 69
28953: PPUSH
28954: LD_VAR 0 1
28958: PPUSH
28959: CALL_OW 74
28963: PPUSH
28964: CALL_OW 115
// until IsDead ( un ) ;
28968: LD_VAR 0 1
28972: PPUSH
28973: CALL_OW 301
28977: IFFALSE 28925
// end ;
28979: PPOPN 1
28981: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28982: LD_EXP 67
28986: PUSH
28987: LD_EXP 107
28991: AND
28992: IFFALSE 29004
28994: GO 28996
28996: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28997: LD_STRING earthquake(getX(game), 0, 32)
28999: PPUSH
29000: CALL_OW 559
29004: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29005: LD_EXP 67
29009: PUSH
29010: LD_EXP 108
29014: AND
29015: IFFALSE 29106
29017: GO 29019
29019: DISABLE
29020: LD_INT 0
29022: PPUSH
// begin enable ;
29023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29024: LD_ADDR_VAR 0 1
29028: PUSH
29029: LD_INT 22
29031: PUSH
29032: LD_OWVAR 2
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 21
29043: PUSH
29044: LD_INT 2
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 33
29053: PUSH
29054: LD_INT 3
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: PPUSH
29066: CALL_OW 69
29070: ST_TO_ADDR
// if not tmp then
29071: LD_VAR 0 1
29075: NOT
29076: IFFALSE 29080
// exit ;
29078: GO 29106
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29080: LD_VAR 0 1
29084: PUSH
29085: LD_INT 1
29087: PPUSH
29088: LD_VAR 0 1
29092: PPUSH
29093: CALL_OW 12
29097: ARRAY
29098: PPUSH
29099: LD_INT 1
29101: PPUSH
29102: CALL_OW 234
// end ;
29106: PPOPN 1
29108: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29109: LD_EXP 67
29113: PUSH
29114: LD_EXP 109
29118: AND
29119: IFFALSE 29260
29121: GO 29123
29123: DISABLE
29124: LD_INT 0
29126: PPUSH
29127: PPUSH
29128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29129: LD_ADDR_VAR 0 3
29133: PUSH
29134: LD_INT 22
29136: PUSH
29137: LD_OWVAR 2
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 25
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PPUSH
29160: CALL_OW 69
29164: ST_TO_ADDR
// if not tmp then
29165: LD_VAR 0 3
29169: NOT
29170: IFFALSE 29174
// exit ;
29172: GO 29260
// un := tmp [ rand ( 1 , tmp ) ] ;
29174: LD_ADDR_VAR 0 2
29178: PUSH
29179: LD_VAR 0 3
29183: PUSH
29184: LD_INT 1
29186: PPUSH
29187: LD_VAR 0 3
29191: PPUSH
29192: CALL_OW 12
29196: ARRAY
29197: ST_TO_ADDR
// if Crawls ( un ) then
29198: LD_VAR 0 2
29202: PPUSH
29203: CALL_OW 318
29207: IFFALSE 29218
// ComWalk ( un ) ;
29209: LD_VAR 0 2
29213: PPUSH
29214: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29218: LD_VAR 0 2
29222: PPUSH
29223: LD_INT 9
29225: PPUSH
29226: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29230: LD_INT 28
29232: PPUSH
29233: LD_OWVAR 2
29237: PPUSH
29238: LD_INT 2
29240: PPUSH
29241: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29245: LD_INT 29
29247: PPUSH
29248: LD_OWVAR 2
29252: PPUSH
29253: LD_INT 2
29255: PPUSH
29256: CALL_OW 322
// end ;
29260: PPOPN 3
29262: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29263: LD_EXP 67
29267: PUSH
29268: LD_EXP 110
29272: AND
29273: IFFALSE 29384
29275: GO 29277
29277: DISABLE
29278: LD_INT 0
29280: PPUSH
29281: PPUSH
29282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29283: LD_ADDR_VAR 0 3
29287: PUSH
29288: LD_INT 22
29290: PUSH
29291: LD_OWVAR 2
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 25
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PPUSH
29314: CALL_OW 69
29318: ST_TO_ADDR
// if not tmp then
29319: LD_VAR 0 3
29323: NOT
29324: IFFALSE 29328
// exit ;
29326: GO 29384
// un := tmp [ rand ( 1 , tmp ) ] ;
29328: LD_ADDR_VAR 0 2
29332: PUSH
29333: LD_VAR 0 3
29337: PUSH
29338: LD_INT 1
29340: PPUSH
29341: LD_VAR 0 3
29345: PPUSH
29346: CALL_OW 12
29350: ARRAY
29351: ST_TO_ADDR
// if Crawls ( un ) then
29352: LD_VAR 0 2
29356: PPUSH
29357: CALL_OW 318
29361: IFFALSE 29372
// ComWalk ( un ) ;
29363: LD_VAR 0 2
29367: PPUSH
29368: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29372: LD_VAR 0 2
29376: PPUSH
29377: LD_INT 8
29379: PPUSH
29380: CALL_OW 336
// end ;
29384: PPOPN 3
29386: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29387: LD_EXP 67
29391: PUSH
29392: LD_EXP 111
29396: AND
29397: IFFALSE 29541
29399: GO 29401
29401: DISABLE
29402: LD_INT 0
29404: PPUSH
29405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29406: LD_ADDR_VAR 0 2
29410: PUSH
29411: LD_INT 22
29413: PUSH
29414: LD_OWVAR 2
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 21
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 2
29435: PUSH
29436: LD_INT 34
29438: PUSH
29439: LD_INT 12
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 34
29448: PUSH
29449: LD_INT 51
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 34
29458: PUSH
29459: LD_INT 32
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: LIST
29476: PPUSH
29477: CALL_OW 69
29481: ST_TO_ADDR
// if not tmp then
29482: LD_VAR 0 2
29486: NOT
29487: IFFALSE 29491
// exit ;
29489: GO 29541
// for i in tmp do
29491: LD_ADDR_VAR 0 1
29495: PUSH
29496: LD_VAR 0 2
29500: PUSH
29501: FOR_IN
29502: IFFALSE 29539
// if GetCargo ( i , mat_artifact ) = 0 then
29504: LD_VAR 0 1
29508: PPUSH
29509: LD_INT 4
29511: PPUSH
29512: CALL_OW 289
29516: PUSH
29517: LD_INT 0
29519: EQUAL
29520: IFFALSE 29537
// SetCargo ( i , mat_siberit , 100 ) ;
29522: LD_VAR 0 1
29526: PPUSH
29527: LD_INT 3
29529: PPUSH
29530: LD_INT 100
29532: PPUSH
29533: CALL_OW 290
29537: GO 29501
29539: POP
29540: POP
// end ;
29541: PPOPN 2
29543: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29544: LD_EXP 67
29548: PUSH
29549: LD_EXP 112
29553: AND
29554: IFFALSE 29737
29556: GO 29558
29558: DISABLE
29559: LD_INT 0
29561: PPUSH
29562: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29563: LD_ADDR_VAR 0 2
29567: PUSH
29568: LD_INT 22
29570: PUSH
29571: LD_OWVAR 2
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PPUSH
29580: CALL_OW 69
29584: ST_TO_ADDR
// if not tmp then
29585: LD_VAR 0 2
29589: NOT
29590: IFFALSE 29594
// exit ;
29592: GO 29737
// for i := 1 to 2 do
29594: LD_ADDR_VAR 0 1
29598: PUSH
29599: DOUBLE
29600: LD_INT 1
29602: DEC
29603: ST_TO_ADDR
29604: LD_INT 2
29606: PUSH
29607: FOR_TO
29608: IFFALSE 29735
// begin uc_side := your_side ;
29610: LD_ADDR_OWVAR 20
29614: PUSH
29615: LD_OWVAR 2
29619: ST_TO_ADDR
// uc_nation := nation_american ;
29620: LD_ADDR_OWVAR 21
29624: PUSH
29625: LD_INT 1
29627: ST_TO_ADDR
// vc_chassis := us_morphling ;
29628: LD_ADDR_OWVAR 37
29632: PUSH
29633: LD_INT 5
29635: ST_TO_ADDR
// vc_engine := engine_siberite ;
29636: LD_ADDR_OWVAR 39
29640: PUSH
29641: LD_INT 3
29643: ST_TO_ADDR
// vc_control := control_computer ;
29644: LD_ADDR_OWVAR 38
29648: PUSH
29649: LD_INT 3
29651: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29652: LD_ADDR_OWVAR 40
29656: PUSH
29657: LD_INT 10
29659: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29660: LD_VAR 0 2
29664: PUSH
29665: LD_INT 1
29667: ARRAY
29668: PPUSH
29669: CALL_OW 310
29673: NOT
29674: IFFALSE 29721
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29676: CALL_OW 45
29680: PPUSH
29681: LD_VAR 0 2
29685: PUSH
29686: LD_INT 1
29688: ARRAY
29689: PPUSH
29690: CALL_OW 250
29694: PPUSH
29695: LD_VAR 0 2
29699: PUSH
29700: LD_INT 1
29702: ARRAY
29703: PPUSH
29704: CALL_OW 251
29708: PPUSH
29709: LD_INT 12
29711: PPUSH
29712: LD_INT 1
29714: PPUSH
29715: CALL_OW 50
29719: GO 29733
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29721: CALL_OW 45
29725: PPUSH
29726: LD_INT 1
29728: PPUSH
29729: CALL_OW 51
// end ;
29733: GO 29607
29735: POP
29736: POP
// end ;
29737: PPOPN 2
29739: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29740: LD_EXP 67
29744: PUSH
29745: LD_EXP 113
29749: AND
29750: IFFALSE 29972
29752: GO 29754
29754: DISABLE
29755: LD_INT 0
29757: PPUSH
29758: PPUSH
29759: PPUSH
29760: PPUSH
29761: PPUSH
29762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29763: LD_ADDR_VAR 0 6
29767: PUSH
29768: LD_INT 22
29770: PUSH
29771: LD_OWVAR 2
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 21
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 3
29792: PUSH
29793: LD_INT 23
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: PPUSH
29812: CALL_OW 69
29816: ST_TO_ADDR
// if not tmp then
29817: LD_VAR 0 6
29821: NOT
29822: IFFALSE 29826
// exit ;
29824: GO 29972
// s1 := rand ( 1 , 4 ) ;
29826: LD_ADDR_VAR 0 2
29830: PUSH
29831: LD_INT 1
29833: PPUSH
29834: LD_INT 4
29836: PPUSH
29837: CALL_OW 12
29841: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29842: LD_ADDR_VAR 0 4
29846: PUSH
29847: LD_VAR 0 6
29851: PUSH
29852: LD_INT 1
29854: ARRAY
29855: PPUSH
29856: LD_VAR 0 2
29860: PPUSH
29861: CALL_OW 259
29865: ST_TO_ADDR
// if s1 = 1 then
29866: LD_VAR 0 2
29870: PUSH
29871: LD_INT 1
29873: EQUAL
29874: IFFALSE 29894
// s2 := rand ( 2 , 4 ) else
29876: LD_ADDR_VAR 0 3
29880: PUSH
29881: LD_INT 2
29883: PPUSH
29884: LD_INT 4
29886: PPUSH
29887: CALL_OW 12
29891: ST_TO_ADDR
29892: GO 29902
// s2 := 1 ;
29894: LD_ADDR_VAR 0 3
29898: PUSH
29899: LD_INT 1
29901: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29902: LD_ADDR_VAR 0 5
29906: PUSH
29907: LD_VAR 0 6
29911: PUSH
29912: LD_INT 1
29914: ARRAY
29915: PPUSH
29916: LD_VAR 0 3
29920: PPUSH
29921: CALL_OW 259
29925: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29926: LD_VAR 0 6
29930: PUSH
29931: LD_INT 1
29933: ARRAY
29934: PPUSH
29935: LD_VAR 0 2
29939: PPUSH
29940: LD_VAR 0 5
29944: PPUSH
29945: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29949: LD_VAR 0 6
29953: PUSH
29954: LD_INT 1
29956: ARRAY
29957: PPUSH
29958: LD_VAR 0 3
29962: PPUSH
29963: LD_VAR 0 4
29967: PPUSH
29968: CALL_OW 237
// end ;
29972: PPOPN 6
29974: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29975: LD_EXP 67
29979: PUSH
29980: LD_EXP 114
29984: AND
29985: IFFALSE 30064
29987: GO 29989
29989: DISABLE
29990: LD_INT 0
29992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29993: LD_ADDR_VAR 0 1
29997: PUSH
29998: LD_INT 22
30000: PUSH
30001: LD_OWVAR 2
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 30
30012: PUSH
30013: LD_INT 3
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PPUSH
30024: CALL_OW 69
30028: ST_TO_ADDR
// if not tmp then
30029: LD_VAR 0 1
30033: NOT
30034: IFFALSE 30038
// exit ;
30036: GO 30064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30038: LD_VAR 0 1
30042: PUSH
30043: LD_INT 1
30045: PPUSH
30046: LD_VAR 0 1
30050: PPUSH
30051: CALL_OW 12
30055: ARRAY
30056: PPUSH
30057: LD_INT 1
30059: PPUSH
30060: CALL_OW 234
// end ;
30064: PPOPN 1
30066: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30067: LD_EXP 67
30071: PUSH
30072: LD_EXP 115
30076: AND
30077: IFFALSE 30189
30079: GO 30081
30081: DISABLE
30082: LD_INT 0
30084: PPUSH
30085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30086: LD_ADDR_VAR 0 2
30090: PUSH
30091: LD_INT 22
30093: PUSH
30094: LD_OWVAR 2
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 2
30105: PUSH
30106: LD_INT 30
30108: PUSH
30109: LD_INT 27
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 30
30118: PUSH
30119: LD_INT 26
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 30
30128: PUSH
30129: LD_INT 28
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PPUSH
30146: CALL_OW 69
30150: ST_TO_ADDR
// if not tmp then
30151: LD_VAR 0 2
30155: NOT
30156: IFFALSE 30160
// exit ;
30158: GO 30189
// for i in tmp do
30160: LD_ADDR_VAR 0 1
30164: PUSH
30165: LD_VAR 0 2
30169: PUSH
30170: FOR_IN
30171: IFFALSE 30187
// SetLives ( i , 1 ) ;
30173: LD_VAR 0 1
30177: PPUSH
30178: LD_INT 1
30180: PPUSH
30181: CALL_OW 234
30185: GO 30170
30187: POP
30188: POP
// end ;
30189: PPOPN 2
30191: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30192: LD_EXP 67
30196: PUSH
30197: LD_EXP 116
30201: AND
30202: IFFALSE 30489
30204: GO 30206
30206: DISABLE
30207: LD_INT 0
30209: PPUSH
30210: PPUSH
30211: PPUSH
// begin i := rand ( 1 , 7 ) ;
30212: LD_ADDR_VAR 0 1
30216: PUSH
30217: LD_INT 1
30219: PPUSH
30220: LD_INT 7
30222: PPUSH
30223: CALL_OW 12
30227: ST_TO_ADDR
// case i of 1 :
30228: LD_VAR 0 1
30232: PUSH
30233: LD_INT 1
30235: DOUBLE
30236: EQUAL
30237: IFTRUE 30241
30239: GO 30251
30241: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30242: LD_STRING earthquake(getX(game), 0, 32)
30244: PPUSH
30245: CALL_OW 559
30249: GO 30489
30251: LD_INT 2
30253: DOUBLE
30254: EQUAL
30255: IFTRUE 30259
30257: GO 30273
30259: POP
// begin ToLua ( displayStucuk(); ) ;
30260: LD_STRING displayStucuk();
30262: PPUSH
30263: CALL_OW 559
// ResetFog ;
30267: CALL_OW 335
// end ; 3 :
30271: GO 30489
30273: LD_INT 3
30275: DOUBLE
30276: EQUAL
30277: IFTRUE 30281
30279: GO 30385
30281: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30282: LD_ADDR_VAR 0 2
30286: PUSH
30287: LD_INT 22
30289: PUSH
30290: LD_OWVAR 2
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 25
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PPUSH
30313: CALL_OW 69
30317: ST_TO_ADDR
// if not tmp then
30318: LD_VAR 0 2
30322: NOT
30323: IFFALSE 30327
// exit ;
30325: GO 30489
// un := tmp [ rand ( 1 , tmp ) ] ;
30327: LD_ADDR_VAR 0 3
30331: PUSH
30332: LD_VAR 0 2
30336: PUSH
30337: LD_INT 1
30339: PPUSH
30340: LD_VAR 0 2
30344: PPUSH
30345: CALL_OW 12
30349: ARRAY
30350: ST_TO_ADDR
// if Crawls ( un ) then
30351: LD_VAR 0 3
30355: PPUSH
30356: CALL_OW 318
30360: IFFALSE 30371
// ComWalk ( un ) ;
30362: LD_VAR 0 3
30366: PPUSH
30367: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30371: LD_VAR 0 3
30375: PPUSH
30376: LD_INT 8
30378: PPUSH
30379: CALL_OW 336
// end ; 4 :
30383: GO 30489
30385: LD_INT 4
30387: DOUBLE
30388: EQUAL
30389: IFTRUE 30393
30391: GO 30467
30393: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30394: LD_ADDR_VAR 0 2
30398: PUSH
30399: LD_INT 22
30401: PUSH
30402: LD_OWVAR 2
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 30
30413: PUSH
30414: LD_INT 29
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PPUSH
30425: CALL_OW 69
30429: ST_TO_ADDR
// if not tmp then
30430: LD_VAR 0 2
30434: NOT
30435: IFFALSE 30439
// exit ;
30437: GO 30489
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30439: LD_VAR 0 2
30443: PUSH
30444: LD_INT 1
30446: ARRAY
30447: PPUSH
30448: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30452: LD_VAR 0 2
30456: PUSH
30457: LD_INT 1
30459: ARRAY
30460: PPUSH
30461: CALL_OW 65
// end ; 5 .. 7 :
30465: GO 30489
30467: LD_INT 5
30469: DOUBLE
30470: GREATEREQUAL
30471: IFFALSE 30479
30473: LD_INT 7
30475: DOUBLE
30476: LESSEQUAL
30477: IFTRUE 30481
30479: GO 30488
30481: POP
// StreamSibBomb ; end ;
30482: CALL 26726 0 0
30486: GO 30489
30488: POP
// end ;
30489: PPOPN 3
30491: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30492: LD_EXP 67
30496: PUSH
30497: LD_EXP 117
30501: AND
30502: IFFALSE 30658
30504: GO 30506
30506: DISABLE
30507: LD_INT 0
30509: PPUSH
30510: PPUSH
30511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30512: LD_ADDR_VAR 0 2
30516: PUSH
30517: LD_INT 81
30519: PUSH
30520: LD_OWVAR 2
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 2
30531: PUSH
30532: LD_INT 21
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 21
30544: PUSH
30545: LD_INT 2
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: LIST
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PPUSH
30561: CALL_OW 69
30565: ST_TO_ADDR
// if not tmp then
30566: LD_VAR 0 2
30570: NOT
30571: IFFALSE 30575
// exit ;
30573: GO 30658
// p := 0 ;
30575: LD_ADDR_VAR 0 3
30579: PUSH
30580: LD_INT 0
30582: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30583: LD_INT 35
30585: PPUSH
30586: CALL_OW 67
// p := p + 1 ;
30590: LD_ADDR_VAR 0 3
30594: PUSH
30595: LD_VAR 0 3
30599: PUSH
30600: LD_INT 1
30602: PLUS
30603: ST_TO_ADDR
// for i in tmp do
30604: LD_ADDR_VAR 0 1
30608: PUSH
30609: LD_VAR 0 2
30613: PUSH
30614: FOR_IN
30615: IFFALSE 30646
// if GetLives ( i ) < 1000 then
30617: LD_VAR 0 1
30621: PPUSH
30622: CALL_OW 256
30626: PUSH
30627: LD_INT 1000
30629: LESS
30630: IFFALSE 30644
// SetLives ( i , 1000 ) ;
30632: LD_VAR 0 1
30636: PPUSH
30637: LD_INT 1000
30639: PPUSH
30640: CALL_OW 234
30644: GO 30614
30646: POP
30647: POP
// until p > 20 ;
30648: LD_VAR 0 3
30652: PUSH
30653: LD_INT 20
30655: GREATER
30656: IFFALSE 30583
// end ;
30658: PPOPN 3
30660: END
// every 0 0$1 trigger StreamModeActive and sTime do
30661: LD_EXP 67
30665: PUSH
30666: LD_EXP 118
30670: AND
30671: IFFALSE 30706
30673: GO 30675
30675: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30676: LD_INT 28
30678: PPUSH
30679: LD_OWVAR 2
30683: PPUSH
30684: LD_INT 2
30686: PPUSH
30687: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30691: LD_INT 30
30693: PPUSH
30694: LD_OWVAR 2
30698: PPUSH
30699: LD_INT 2
30701: PPUSH
30702: CALL_OW 322
// end ;
30706: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30707: LD_EXP 67
30711: PUSH
30712: LD_EXP 119
30716: AND
30717: IFFALSE 30838
30719: GO 30721
30721: DISABLE
30722: LD_INT 0
30724: PPUSH
30725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30726: LD_ADDR_VAR 0 2
30730: PUSH
30731: LD_INT 22
30733: PUSH
30734: LD_OWVAR 2
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 21
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 3
30755: PUSH
30756: LD_INT 23
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: PPUSH
30775: CALL_OW 69
30779: ST_TO_ADDR
// if not tmp then
30780: LD_VAR 0 2
30784: NOT
30785: IFFALSE 30789
// exit ;
30787: GO 30838
// for i in tmp do
30789: LD_ADDR_VAR 0 1
30793: PUSH
30794: LD_VAR 0 2
30798: PUSH
30799: FOR_IN
30800: IFFALSE 30836
// begin if Crawls ( i ) then
30802: LD_VAR 0 1
30806: PPUSH
30807: CALL_OW 318
30811: IFFALSE 30822
// ComWalk ( i ) ;
30813: LD_VAR 0 1
30817: PPUSH
30818: CALL_OW 138
// SetClass ( i , 2 ) ;
30822: LD_VAR 0 1
30826: PPUSH
30827: LD_INT 2
30829: PPUSH
30830: CALL_OW 336
// end ;
30834: GO 30799
30836: POP
30837: POP
// end ;
30838: PPOPN 2
30840: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30841: LD_EXP 67
30845: PUSH
30846: LD_EXP 120
30850: AND
30851: IFFALSE 31139
30853: GO 30855
30855: DISABLE
30856: LD_INT 0
30858: PPUSH
30859: PPUSH
30860: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30861: LD_OWVAR 2
30865: PPUSH
30866: LD_INT 9
30868: PPUSH
30869: LD_INT 1
30871: PPUSH
30872: LD_INT 1
30874: PPUSH
30875: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30879: LD_INT 9
30881: PPUSH
30882: LD_OWVAR 2
30886: PPUSH
30887: CALL_OW 343
// uc_side := 9 ;
30891: LD_ADDR_OWVAR 20
30895: PUSH
30896: LD_INT 9
30898: ST_TO_ADDR
// uc_nation := 2 ;
30899: LD_ADDR_OWVAR 21
30903: PUSH
30904: LD_INT 2
30906: ST_TO_ADDR
// hc_name := Dark Warrior ;
30907: LD_ADDR_OWVAR 26
30911: PUSH
30912: LD_STRING Dark Warrior
30914: ST_TO_ADDR
// hc_gallery :=  ;
30915: LD_ADDR_OWVAR 33
30919: PUSH
30920: LD_STRING 
30922: ST_TO_ADDR
// hc_noskilllimit := true ;
30923: LD_ADDR_OWVAR 76
30927: PUSH
30928: LD_INT 1
30930: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30931: LD_ADDR_OWVAR 31
30935: PUSH
30936: LD_INT 30
30938: PUSH
30939: LD_INT 30
30941: PUSH
30942: LD_INT 30
30944: PUSH
30945: LD_INT 30
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: ST_TO_ADDR
// un := CreateHuman ;
30954: LD_ADDR_VAR 0 3
30958: PUSH
30959: CALL_OW 44
30963: ST_TO_ADDR
// hc_noskilllimit := false ;
30964: LD_ADDR_OWVAR 76
30968: PUSH
30969: LD_INT 0
30971: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30972: LD_VAR 0 3
30976: PPUSH
30977: LD_INT 1
30979: PPUSH
30980: CALL_OW 51
// ToLua ( playRanger() ) ;
30984: LD_STRING playRanger()
30986: PPUSH
30987: CALL_OW 559
// p := 0 ;
30991: LD_ADDR_VAR 0 2
30995: PUSH
30996: LD_INT 0
30998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30999: LD_INT 35
31001: PPUSH
31002: CALL_OW 67
// p := p + 1 ;
31006: LD_ADDR_VAR 0 2
31010: PUSH
31011: LD_VAR 0 2
31015: PUSH
31016: LD_INT 1
31018: PLUS
31019: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31020: LD_VAR 0 3
31024: PPUSH
31025: CALL_OW 256
31029: PUSH
31030: LD_INT 1000
31032: LESS
31033: IFFALSE 31047
// SetLives ( un , 1000 ) ;
31035: LD_VAR 0 3
31039: PPUSH
31040: LD_INT 1000
31042: PPUSH
31043: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31047: LD_VAR 0 3
31051: PPUSH
31052: LD_INT 81
31054: PUSH
31055: LD_OWVAR 2
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 91
31066: PUSH
31067: LD_VAR 0 3
31071: PUSH
31072: LD_INT 30
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: LIST
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PPUSH
31084: CALL_OW 69
31088: PPUSH
31089: LD_VAR 0 3
31093: PPUSH
31094: CALL_OW 74
31098: PPUSH
31099: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31103: LD_VAR 0 2
31107: PUSH
31108: LD_INT 80
31110: GREATER
31111: PUSH
31112: LD_VAR 0 3
31116: PPUSH
31117: CALL_OW 301
31121: OR
31122: IFFALSE 30999
// if un then
31124: LD_VAR 0 3
31128: IFFALSE 31139
// RemoveUnit ( un ) ;
31130: LD_VAR 0 3
31134: PPUSH
31135: CALL_OW 64
// end ;
31139: PPOPN 3
31141: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31142: LD_EXP 121
31146: IFFALSE 31262
31148: GO 31150
31150: DISABLE
31151: LD_INT 0
31153: PPUSH
31154: PPUSH
31155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31156: LD_ADDR_VAR 0 2
31160: PUSH
31161: LD_INT 81
31163: PUSH
31164: LD_OWVAR 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 21
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PPUSH
31187: CALL_OW 69
31191: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31192: LD_STRING playComputer()
31194: PPUSH
31195: CALL_OW 559
// if not tmp then
31199: LD_VAR 0 2
31203: NOT
31204: IFFALSE 31208
// exit ;
31206: GO 31262
// for i in tmp do
31208: LD_ADDR_VAR 0 1
31212: PUSH
31213: LD_VAR 0 2
31217: PUSH
31218: FOR_IN
31219: IFFALSE 31260
// for j := 1 to 4 do
31221: LD_ADDR_VAR 0 3
31225: PUSH
31226: DOUBLE
31227: LD_INT 1
31229: DEC
31230: ST_TO_ADDR
31231: LD_INT 4
31233: PUSH
31234: FOR_TO
31235: IFFALSE 31256
// SetSkill ( i , j , 10 ) ;
31237: LD_VAR 0 1
31241: PPUSH
31242: LD_VAR 0 3
31246: PPUSH
31247: LD_INT 10
31249: PPUSH
31250: CALL_OW 237
31254: GO 31234
31256: POP
31257: POP
31258: GO 31218
31260: POP
31261: POP
// end ;
31262: PPOPN 3
31264: END
// every 0 0$1 trigger s30 do var i , tmp ;
31265: LD_EXP 122
31269: IFFALSE 31338
31271: GO 31273
31273: DISABLE
31274: LD_INT 0
31276: PPUSH
31277: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31278: LD_ADDR_VAR 0 2
31282: PUSH
31283: LD_INT 22
31285: PUSH
31286: LD_OWVAR 2
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PPUSH
31295: CALL_OW 69
31299: ST_TO_ADDR
// if not tmp then
31300: LD_VAR 0 2
31304: NOT
31305: IFFALSE 31309
// exit ;
31307: GO 31338
// for i in tmp do
31309: LD_ADDR_VAR 0 1
31313: PUSH
31314: LD_VAR 0 2
31318: PUSH
31319: FOR_IN
31320: IFFALSE 31336
// SetLives ( i , 300 ) ;
31322: LD_VAR 0 1
31326: PPUSH
31327: LD_INT 300
31329: PPUSH
31330: CALL_OW 234
31334: GO 31319
31336: POP
31337: POP
// end ;
31338: PPOPN 2
31340: END
// every 0 0$1 trigger s60 do var i , tmp ;
31341: LD_EXP 123
31345: IFFALSE 31414
31347: GO 31349
31349: DISABLE
31350: LD_INT 0
31352: PPUSH
31353: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31354: LD_ADDR_VAR 0 2
31358: PUSH
31359: LD_INT 22
31361: PUSH
31362: LD_OWVAR 2
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PPUSH
31371: CALL_OW 69
31375: ST_TO_ADDR
// if not tmp then
31376: LD_VAR 0 2
31380: NOT
31381: IFFALSE 31385
// exit ;
31383: GO 31414
// for i in tmp do
31385: LD_ADDR_VAR 0 1
31389: PUSH
31390: LD_VAR 0 2
31394: PUSH
31395: FOR_IN
31396: IFFALSE 31412
// SetLives ( i , 600 ) ;
31398: LD_VAR 0 1
31402: PPUSH
31403: LD_INT 600
31405: PPUSH
31406: CALL_OW 234
31410: GO 31395
31412: POP
31413: POP
// end ;
31414: PPOPN 2
31416: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31417: LD_INT 0
31419: PPUSH
// case cmd of 301 :
31420: LD_VAR 0 1
31424: PUSH
31425: LD_INT 301
31427: DOUBLE
31428: EQUAL
31429: IFTRUE 31433
31431: GO 31465
31433: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31434: LD_VAR 0 6
31438: PPUSH
31439: LD_VAR 0 7
31443: PPUSH
31444: LD_VAR 0 8
31448: PPUSH
31449: LD_VAR 0 4
31453: PPUSH
31454: LD_VAR 0 5
31458: PPUSH
31459: CALL 32666 0 5
31463: GO 31586
31465: LD_INT 302
31467: DOUBLE
31468: EQUAL
31469: IFTRUE 31473
31471: GO 31510
31473: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31474: LD_VAR 0 6
31478: PPUSH
31479: LD_VAR 0 7
31483: PPUSH
31484: LD_VAR 0 8
31488: PPUSH
31489: LD_VAR 0 9
31493: PPUSH
31494: LD_VAR 0 4
31498: PPUSH
31499: LD_VAR 0 5
31503: PPUSH
31504: CALL 32757 0 6
31508: GO 31586
31510: LD_INT 303
31512: DOUBLE
31513: EQUAL
31514: IFTRUE 31518
31516: GO 31555
31518: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31519: LD_VAR 0 6
31523: PPUSH
31524: LD_VAR 0 7
31528: PPUSH
31529: LD_VAR 0 8
31533: PPUSH
31534: LD_VAR 0 9
31538: PPUSH
31539: LD_VAR 0 4
31543: PPUSH
31544: LD_VAR 0 5
31548: PPUSH
31549: CALL 31591 0 6
31553: GO 31586
31555: LD_INT 304
31557: DOUBLE
31558: EQUAL
31559: IFTRUE 31563
31561: GO 31585
31563: POP
// hHackTeleport ( unit , x , y ) ; end ;
31564: LD_VAR 0 2
31568: PPUSH
31569: LD_VAR 0 4
31573: PPUSH
31574: LD_VAR 0 5
31578: PPUSH
31579: CALL 33350 0 3
31583: GO 31586
31585: POP
// end ;
31586: LD_VAR 0 12
31590: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31591: LD_INT 0
31593: PPUSH
31594: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31595: LD_VAR 0 1
31599: PUSH
31600: LD_INT 1
31602: LESS
31603: PUSH
31604: LD_VAR 0 1
31608: PUSH
31609: LD_INT 3
31611: GREATER
31612: OR
31613: PUSH
31614: LD_VAR 0 5
31618: PPUSH
31619: LD_VAR 0 6
31623: PPUSH
31624: CALL_OW 428
31628: OR
31629: IFFALSE 31633
// exit ;
31631: GO 32353
// uc_side := your_side ;
31633: LD_ADDR_OWVAR 20
31637: PUSH
31638: LD_OWVAR 2
31642: ST_TO_ADDR
// uc_nation := nation ;
31643: LD_ADDR_OWVAR 21
31647: PUSH
31648: LD_VAR 0 1
31652: ST_TO_ADDR
// bc_level = 1 ;
31653: LD_ADDR_OWVAR 43
31657: PUSH
31658: LD_INT 1
31660: ST_TO_ADDR
// case btype of 1 :
31661: LD_VAR 0 2
31665: PUSH
31666: LD_INT 1
31668: DOUBLE
31669: EQUAL
31670: IFTRUE 31674
31672: GO 31685
31674: POP
// bc_type := b_depot ; 2 :
31675: LD_ADDR_OWVAR 42
31679: PUSH
31680: LD_INT 0
31682: ST_TO_ADDR
31683: GO 32297
31685: LD_INT 2
31687: DOUBLE
31688: EQUAL
31689: IFTRUE 31693
31691: GO 31704
31693: POP
// bc_type := b_warehouse ; 3 :
31694: LD_ADDR_OWVAR 42
31698: PUSH
31699: LD_INT 1
31701: ST_TO_ADDR
31702: GO 32297
31704: LD_INT 3
31706: DOUBLE
31707: EQUAL
31708: IFTRUE 31712
31710: GO 31723
31712: POP
// bc_type := b_lab ; 4 .. 9 :
31713: LD_ADDR_OWVAR 42
31717: PUSH
31718: LD_INT 6
31720: ST_TO_ADDR
31721: GO 32297
31723: LD_INT 4
31725: DOUBLE
31726: GREATEREQUAL
31727: IFFALSE 31735
31729: LD_INT 9
31731: DOUBLE
31732: LESSEQUAL
31733: IFTRUE 31737
31735: GO 31789
31737: POP
// begin bc_type := b_lab_half ;
31738: LD_ADDR_OWVAR 42
31742: PUSH
31743: LD_INT 7
31745: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31746: LD_ADDR_OWVAR 44
31750: PUSH
31751: LD_INT 10
31753: PUSH
31754: LD_INT 11
31756: PUSH
31757: LD_INT 12
31759: PUSH
31760: LD_INT 15
31762: PUSH
31763: LD_INT 14
31765: PUSH
31766: LD_INT 13
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: PUSH
31777: LD_VAR 0 2
31781: PUSH
31782: LD_INT 3
31784: MINUS
31785: ARRAY
31786: ST_TO_ADDR
// end ; 10 .. 13 :
31787: GO 32297
31789: LD_INT 10
31791: DOUBLE
31792: GREATEREQUAL
31793: IFFALSE 31801
31795: LD_INT 13
31797: DOUBLE
31798: LESSEQUAL
31799: IFTRUE 31803
31801: GO 31880
31803: POP
// begin bc_type := b_lab_full ;
31804: LD_ADDR_OWVAR 42
31808: PUSH
31809: LD_INT 8
31811: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31812: LD_ADDR_OWVAR 44
31816: PUSH
31817: LD_INT 10
31819: PUSH
31820: LD_INT 12
31822: PUSH
31823: LD_INT 14
31825: PUSH
31826: LD_INT 13
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: PUSH
31835: LD_VAR 0 2
31839: PUSH
31840: LD_INT 9
31842: MINUS
31843: ARRAY
31844: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31845: LD_ADDR_OWVAR 45
31849: PUSH
31850: LD_INT 11
31852: PUSH
31853: LD_INT 15
31855: PUSH
31856: LD_INT 12
31858: PUSH
31859: LD_INT 15
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: PUSH
31868: LD_VAR 0 2
31872: PUSH
31873: LD_INT 9
31875: MINUS
31876: ARRAY
31877: ST_TO_ADDR
// end ; 14 :
31878: GO 32297
31880: LD_INT 14
31882: DOUBLE
31883: EQUAL
31884: IFTRUE 31888
31886: GO 31899
31888: POP
// bc_type := b_workshop ; 15 :
31889: LD_ADDR_OWVAR 42
31893: PUSH
31894: LD_INT 2
31896: ST_TO_ADDR
31897: GO 32297
31899: LD_INT 15
31901: DOUBLE
31902: EQUAL
31903: IFTRUE 31907
31905: GO 31918
31907: POP
// bc_type := b_factory ; 16 :
31908: LD_ADDR_OWVAR 42
31912: PUSH
31913: LD_INT 3
31915: ST_TO_ADDR
31916: GO 32297
31918: LD_INT 16
31920: DOUBLE
31921: EQUAL
31922: IFTRUE 31926
31924: GO 31937
31926: POP
// bc_type := b_ext_gun ; 17 :
31927: LD_ADDR_OWVAR 42
31931: PUSH
31932: LD_INT 17
31934: ST_TO_ADDR
31935: GO 32297
31937: LD_INT 17
31939: DOUBLE
31940: EQUAL
31941: IFTRUE 31945
31943: GO 31973
31945: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31946: LD_ADDR_OWVAR 42
31950: PUSH
31951: LD_INT 19
31953: PUSH
31954: LD_INT 23
31956: PUSH
31957: LD_INT 19
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: LIST
31964: PUSH
31965: LD_VAR 0 1
31969: ARRAY
31970: ST_TO_ADDR
31971: GO 32297
31973: LD_INT 18
31975: DOUBLE
31976: EQUAL
31977: IFTRUE 31981
31979: GO 31992
31981: POP
// bc_type := b_ext_radar ; 19 :
31982: LD_ADDR_OWVAR 42
31986: PUSH
31987: LD_INT 20
31989: ST_TO_ADDR
31990: GO 32297
31992: LD_INT 19
31994: DOUBLE
31995: EQUAL
31996: IFTRUE 32000
31998: GO 32011
32000: POP
// bc_type := b_ext_radio ; 20 :
32001: LD_ADDR_OWVAR 42
32005: PUSH
32006: LD_INT 22
32008: ST_TO_ADDR
32009: GO 32297
32011: LD_INT 20
32013: DOUBLE
32014: EQUAL
32015: IFTRUE 32019
32017: GO 32030
32019: POP
// bc_type := b_ext_siberium ; 21 :
32020: LD_ADDR_OWVAR 42
32024: PUSH
32025: LD_INT 21
32027: ST_TO_ADDR
32028: GO 32297
32030: LD_INT 21
32032: DOUBLE
32033: EQUAL
32034: IFTRUE 32038
32036: GO 32049
32038: POP
// bc_type := b_ext_computer ; 22 :
32039: LD_ADDR_OWVAR 42
32043: PUSH
32044: LD_INT 24
32046: ST_TO_ADDR
32047: GO 32297
32049: LD_INT 22
32051: DOUBLE
32052: EQUAL
32053: IFTRUE 32057
32055: GO 32068
32057: POP
// bc_type := b_ext_track ; 23 :
32058: LD_ADDR_OWVAR 42
32062: PUSH
32063: LD_INT 16
32065: ST_TO_ADDR
32066: GO 32297
32068: LD_INT 23
32070: DOUBLE
32071: EQUAL
32072: IFTRUE 32076
32074: GO 32087
32076: POP
// bc_type := b_ext_laser ; 24 :
32077: LD_ADDR_OWVAR 42
32081: PUSH
32082: LD_INT 25
32084: ST_TO_ADDR
32085: GO 32297
32087: LD_INT 24
32089: DOUBLE
32090: EQUAL
32091: IFTRUE 32095
32093: GO 32106
32095: POP
// bc_type := b_control_tower ; 25 :
32096: LD_ADDR_OWVAR 42
32100: PUSH
32101: LD_INT 36
32103: ST_TO_ADDR
32104: GO 32297
32106: LD_INT 25
32108: DOUBLE
32109: EQUAL
32110: IFTRUE 32114
32112: GO 32125
32114: POP
// bc_type := b_breastwork ; 26 :
32115: LD_ADDR_OWVAR 42
32119: PUSH
32120: LD_INT 31
32122: ST_TO_ADDR
32123: GO 32297
32125: LD_INT 26
32127: DOUBLE
32128: EQUAL
32129: IFTRUE 32133
32131: GO 32144
32133: POP
// bc_type := b_bunker ; 27 :
32134: LD_ADDR_OWVAR 42
32138: PUSH
32139: LD_INT 32
32141: ST_TO_ADDR
32142: GO 32297
32144: LD_INT 27
32146: DOUBLE
32147: EQUAL
32148: IFTRUE 32152
32150: GO 32163
32152: POP
// bc_type := b_turret ; 28 :
32153: LD_ADDR_OWVAR 42
32157: PUSH
32158: LD_INT 33
32160: ST_TO_ADDR
32161: GO 32297
32163: LD_INT 28
32165: DOUBLE
32166: EQUAL
32167: IFTRUE 32171
32169: GO 32182
32171: POP
// bc_type := b_armoury ; 29 :
32172: LD_ADDR_OWVAR 42
32176: PUSH
32177: LD_INT 4
32179: ST_TO_ADDR
32180: GO 32297
32182: LD_INT 29
32184: DOUBLE
32185: EQUAL
32186: IFTRUE 32190
32188: GO 32201
32190: POP
// bc_type := b_barracks ; 30 :
32191: LD_ADDR_OWVAR 42
32195: PUSH
32196: LD_INT 5
32198: ST_TO_ADDR
32199: GO 32297
32201: LD_INT 30
32203: DOUBLE
32204: EQUAL
32205: IFTRUE 32209
32207: GO 32220
32209: POP
// bc_type := b_solar_power ; 31 :
32210: LD_ADDR_OWVAR 42
32214: PUSH
32215: LD_INT 27
32217: ST_TO_ADDR
32218: GO 32297
32220: LD_INT 31
32222: DOUBLE
32223: EQUAL
32224: IFTRUE 32228
32226: GO 32239
32228: POP
// bc_type := b_oil_power ; 32 :
32229: LD_ADDR_OWVAR 42
32233: PUSH
32234: LD_INT 26
32236: ST_TO_ADDR
32237: GO 32297
32239: LD_INT 32
32241: DOUBLE
32242: EQUAL
32243: IFTRUE 32247
32245: GO 32258
32247: POP
// bc_type := b_siberite_power ; 33 :
32248: LD_ADDR_OWVAR 42
32252: PUSH
32253: LD_INT 28
32255: ST_TO_ADDR
32256: GO 32297
32258: LD_INT 33
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32266
32264: GO 32277
32266: POP
// bc_type := b_oil_mine ; 34 :
32267: LD_ADDR_OWVAR 42
32271: PUSH
32272: LD_INT 29
32274: ST_TO_ADDR
32275: GO 32297
32277: LD_INT 34
32279: DOUBLE
32280: EQUAL
32281: IFTRUE 32285
32283: GO 32296
32285: POP
// bc_type := b_siberite_mine ; end ;
32286: LD_ADDR_OWVAR 42
32290: PUSH
32291: LD_INT 30
32293: ST_TO_ADDR
32294: GO 32297
32296: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32297: LD_ADDR_VAR 0 8
32301: PUSH
32302: LD_VAR 0 5
32306: PPUSH
32307: LD_VAR 0 6
32311: PPUSH
32312: LD_VAR 0 3
32316: PPUSH
32317: CALL_OW 47
32321: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32322: LD_OWVAR 42
32326: PUSH
32327: LD_INT 32
32329: PUSH
32330: LD_INT 33
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: IN
32337: IFFALSE 32353
// PlaceWeaponTurret ( b , weapon ) ;
32339: LD_VAR 0 8
32343: PPUSH
32344: LD_VAR 0 4
32348: PPUSH
32349: CALL_OW 431
// end ;
32353: LD_VAR 0 7
32357: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32358: LD_INT 0
32360: PPUSH
32361: PPUSH
32362: PPUSH
32363: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32364: LD_ADDR_VAR 0 4
32368: PUSH
32369: LD_INT 22
32371: PUSH
32372: LD_OWVAR 2
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: LD_INT 30
32386: PUSH
32387: LD_INT 0
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 30
32396: PUSH
32397: LD_INT 1
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: LIST
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PPUSH
32413: CALL_OW 69
32417: ST_TO_ADDR
// if not tmp then
32418: LD_VAR 0 4
32422: NOT
32423: IFFALSE 32427
// exit ;
32425: GO 32486
// for i in tmp do
32427: LD_ADDR_VAR 0 2
32431: PUSH
32432: LD_VAR 0 4
32436: PUSH
32437: FOR_IN
32438: IFFALSE 32484
// for j = 1 to 3 do
32440: LD_ADDR_VAR 0 3
32444: PUSH
32445: DOUBLE
32446: LD_INT 1
32448: DEC
32449: ST_TO_ADDR
32450: LD_INT 3
32452: PUSH
32453: FOR_TO
32454: IFFALSE 32480
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32456: LD_VAR 0 2
32460: PPUSH
32461: CALL_OW 274
32465: PPUSH
32466: LD_VAR 0 3
32470: PPUSH
32471: LD_INT 99999
32473: PPUSH
32474: CALL_OW 277
32478: GO 32453
32480: POP
32481: POP
32482: GO 32437
32484: POP
32485: POP
// end ;
32486: LD_VAR 0 1
32490: RET
// export function hHackSetLevel10 ; var i , j ; begin
32491: LD_INT 0
32493: PPUSH
32494: PPUSH
32495: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32496: LD_ADDR_VAR 0 2
32500: PUSH
32501: LD_INT 21
32503: PUSH
32504: LD_INT 1
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PPUSH
32511: CALL_OW 69
32515: PUSH
32516: FOR_IN
32517: IFFALSE 32569
// if IsSelected ( i ) then
32519: LD_VAR 0 2
32523: PPUSH
32524: CALL_OW 306
32528: IFFALSE 32567
// begin for j := 1 to 4 do
32530: LD_ADDR_VAR 0 3
32534: PUSH
32535: DOUBLE
32536: LD_INT 1
32538: DEC
32539: ST_TO_ADDR
32540: LD_INT 4
32542: PUSH
32543: FOR_TO
32544: IFFALSE 32565
// SetSkill ( i , j , 10 ) ;
32546: LD_VAR 0 2
32550: PPUSH
32551: LD_VAR 0 3
32555: PPUSH
32556: LD_INT 10
32558: PPUSH
32559: CALL_OW 237
32563: GO 32543
32565: POP
32566: POP
// end ;
32567: GO 32516
32569: POP
32570: POP
// end ;
32571: LD_VAR 0 1
32575: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32576: LD_INT 0
32578: PPUSH
32579: PPUSH
32580: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32581: LD_ADDR_VAR 0 2
32585: PUSH
32586: LD_INT 22
32588: PUSH
32589: LD_OWVAR 2
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 21
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PPUSH
32612: CALL_OW 69
32616: PUSH
32617: FOR_IN
32618: IFFALSE 32659
// begin for j := 1 to 4 do
32620: LD_ADDR_VAR 0 3
32624: PUSH
32625: DOUBLE
32626: LD_INT 1
32628: DEC
32629: ST_TO_ADDR
32630: LD_INT 4
32632: PUSH
32633: FOR_TO
32634: IFFALSE 32655
// SetSkill ( i , j , 10 ) ;
32636: LD_VAR 0 2
32640: PPUSH
32641: LD_VAR 0 3
32645: PPUSH
32646: LD_INT 10
32648: PPUSH
32649: CALL_OW 237
32653: GO 32633
32655: POP
32656: POP
// end ;
32657: GO 32617
32659: POP
32660: POP
// end ;
32661: LD_VAR 0 1
32665: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32666: LD_INT 0
32668: PPUSH
// uc_side := your_side ;
32669: LD_ADDR_OWVAR 20
32673: PUSH
32674: LD_OWVAR 2
32678: ST_TO_ADDR
// uc_nation := nation ;
32679: LD_ADDR_OWVAR 21
32683: PUSH
32684: LD_VAR 0 1
32688: ST_TO_ADDR
// InitHc ;
32689: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32693: LD_INT 0
32695: PPUSH
32696: LD_VAR 0 2
32700: PPUSH
32701: LD_VAR 0 3
32705: PPUSH
32706: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32710: LD_VAR 0 4
32714: PPUSH
32715: LD_VAR 0 5
32719: PPUSH
32720: CALL_OW 428
32724: PUSH
32725: LD_INT 0
32727: EQUAL
32728: IFFALSE 32752
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32730: CALL_OW 44
32734: PPUSH
32735: LD_VAR 0 4
32739: PPUSH
32740: LD_VAR 0 5
32744: PPUSH
32745: LD_INT 1
32747: PPUSH
32748: CALL_OW 48
// end ;
32752: LD_VAR 0 6
32756: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32757: LD_INT 0
32759: PPUSH
32760: PPUSH
// uc_side := your_side ;
32761: LD_ADDR_OWVAR 20
32765: PUSH
32766: LD_OWVAR 2
32770: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32771: LD_VAR 0 1
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: LD_INT 3
32784: PUSH
32785: LD_INT 4
32787: PUSH
32788: LD_INT 5
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: IN
32798: IFFALSE 32810
// uc_nation := nation_american else
32800: LD_ADDR_OWVAR 21
32804: PUSH
32805: LD_INT 1
32807: ST_TO_ADDR
32808: GO 32853
// if chassis in [ 11 , 12 , 13 , 14 ] then
32810: LD_VAR 0 1
32814: PUSH
32815: LD_INT 11
32817: PUSH
32818: LD_INT 12
32820: PUSH
32821: LD_INT 13
32823: PUSH
32824: LD_INT 14
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: IN
32833: IFFALSE 32845
// uc_nation := nation_arabian else
32835: LD_ADDR_OWVAR 21
32839: PUSH
32840: LD_INT 2
32842: ST_TO_ADDR
32843: GO 32853
// uc_nation := nation_russian ;
32845: LD_ADDR_OWVAR 21
32849: PUSH
32850: LD_INT 3
32852: ST_TO_ADDR
// vc_chassis := chassis ;
32853: LD_ADDR_OWVAR 37
32857: PUSH
32858: LD_VAR 0 1
32862: ST_TO_ADDR
// vc_engine := engine ;
32863: LD_ADDR_OWVAR 39
32867: PUSH
32868: LD_VAR 0 2
32872: ST_TO_ADDR
// vc_control := control ;
32873: LD_ADDR_OWVAR 38
32877: PUSH
32878: LD_VAR 0 3
32882: ST_TO_ADDR
// vc_weapon := weapon ;
32883: LD_ADDR_OWVAR 40
32887: PUSH
32888: LD_VAR 0 4
32892: ST_TO_ADDR
// un := CreateVehicle ;
32893: LD_ADDR_VAR 0 8
32897: PUSH
32898: CALL_OW 45
32902: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32903: LD_VAR 0 8
32907: PPUSH
32908: LD_INT 0
32910: PPUSH
32911: LD_INT 5
32913: PPUSH
32914: CALL_OW 12
32918: PPUSH
32919: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32923: LD_VAR 0 8
32927: PPUSH
32928: LD_VAR 0 5
32932: PPUSH
32933: LD_VAR 0 6
32937: PPUSH
32938: LD_INT 1
32940: PPUSH
32941: CALL_OW 48
// end ;
32945: LD_VAR 0 7
32949: RET
// export hInvincible ; every 1 do
32950: GO 32952
32952: DISABLE
// hInvincible := [ ] ;
32953: LD_ADDR_EXP 124
32957: PUSH
32958: EMPTY
32959: ST_TO_ADDR
32960: END
// every 10 do var i ;
32961: GO 32963
32963: DISABLE
32964: LD_INT 0
32966: PPUSH
// begin enable ;
32967: ENABLE
// if not hInvincible then
32968: LD_EXP 124
32972: NOT
32973: IFFALSE 32977
// exit ;
32975: GO 33021
// for i in hInvincible do
32977: LD_ADDR_VAR 0 1
32981: PUSH
32982: LD_EXP 124
32986: PUSH
32987: FOR_IN
32988: IFFALSE 33019
// if GetLives ( i ) < 1000 then
32990: LD_VAR 0 1
32994: PPUSH
32995: CALL_OW 256
32999: PUSH
33000: LD_INT 1000
33002: LESS
33003: IFFALSE 33017
// SetLives ( i , 1000 ) ;
33005: LD_VAR 0 1
33009: PPUSH
33010: LD_INT 1000
33012: PPUSH
33013: CALL_OW 234
33017: GO 32987
33019: POP
33020: POP
// end ;
33021: PPOPN 1
33023: END
// export function hHackInvincible ; var i ; begin
33024: LD_INT 0
33026: PPUSH
33027: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33028: LD_ADDR_VAR 0 2
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: LD_INT 21
33038: PUSH
33039: LD_INT 1
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 21
33048: PUSH
33049: LD_INT 2
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: LIST
33060: PPUSH
33061: CALL_OW 69
33065: PUSH
33066: FOR_IN
33067: IFFALSE 33128
// if IsSelected ( i ) then
33069: LD_VAR 0 2
33073: PPUSH
33074: CALL_OW 306
33078: IFFALSE 33126
// begin if i in hInvincible then
33080: LD_VAR 0 2
33084: PUSH
33085: LD_EXP 124
33089: IN
33090: IFFALSE 33110
// hInvincible := hInvincible diff i else
33092: LD_ADDR_EXP 124
33096: PUSH
33097: LD_EXP 124
33101: PUSH
33102: LD_VAR 0 2
33106: DIFF
33107: ST_TO_ADDR
33108: GO 33126
// hInvincible := hInvincible union i ;
33110: LD_ADDR_EXP 124
33114: PUSH
33115: LD_EXP 124
33119: PUSH
33120: LD_VAR 0 2
33124: UNION
33125: ST_TO_ADDR
// end ;
33126: GO 33066
33128: POP
33129: POP
// end ;
33130: LD_VAR 0 1
33134: RET
// export function hHackInvisible ; var i , j ; begin
33135: LD_INT 0
33137: PPUSH
33138: PPUSH
33139: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33140: LD_ADDR_VAR 0 2
33144: PUSH
33145: LD_INT 21
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PPUSH
33155: CALL_OW 69
33159: PUSH
33160: FOR_IN
33161: IFFALSE 33185
// if IsSelected ( i ) then
33163: LD_VAR 0 2
33167: PPUSH
33168: CALL_OW 306
33172: IFFALSE 33183
// ComForceInvisible ( i ) ;
33174: LD_VAR 0 2
33178: PPUSH
33179: CALL_OW 496
33183: GO 33160
33185: POP
33186: POP
// end ;
33187: LD_VAR 0 1
33191: RET
// export function hHackChangeYourSide ; begin
33192: LD_INT 0
33194: PPUSH
// if your_side = 8 then
33195: LD_OWVAR 2
33199: PUSH
33200: LD_INT 8
33202: EQUAL
33203: IFFALSE 33215
// your_side := 0 else
33205: LD_ADDR_OWVAR 2
33209: PUSH
33210: LD_INT 0
33212: ST_TO_ADDR
33213: GO 33229
// your_side := your_side + 1 ;
33215: LD_ADDR_OWVAR 2
33219: PUSH
33220: LD_OWVAR 2
33224: PUSH
33225: LD_INT 1
33227: PLUS
33228: ST_TO_ADDR
// end ;
33229: LD_VAR 0 1
33233: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33234: LD_INT 0
33236: PPUSH
33237: PPUSH
33238: PPUSH
// for i in all_units do
33239: LD_ADDR_VAR 0 2
33243: PUSH
33244: LD_OWVAR 3
33248: PUSH
33249: FOR_IN
33250: IFFALSE 33328
// if IsSelected ( i ) then
33252: LD_VAR 0 2
33256: PPUSH
33257: CALL_OW 306
33261: IFFALSE 33326
// begin j := GetSide ( i ) ;
33263: LD_ADDR_VAR 0 3
33267: PUSH
33268: LD_VAR 0 2
33272: PPUSH
33273: CALL_OW 255
33277: ST_TO_ADDR
// if j = 8 then
33278: LD_VAR 0 3
33282: PUSH
33283: LD_INT 8
33285: EQUAL
33286: IFFALSE 33298
// j := 0 else
33288: LD_ADDR_VAR 0 3
33292: PUSH
33293: LD_INT 0
33295: ST_TO_ADDR
33296: GO 33312
// j := j + 1 ;
33298: LD_ADDR_VAR 0 3
33302: PUSH
33303: LD_VAR 0 3
33307: PUSH
33308: LD_INT 1
33310: PLUS
33311: ST_TO_ADDR
// SetSide ( i , j ) ;
33312: LD_VAR 0 2
33316: PPUSH
33317: LD_VAR 0 3
33321: PPUSH
33322: CALL_OW 235
// end ;
33326: GO 33249
33328: POP
33329: POP
// end ;
33330: LD_VAR 0 1
33334: RET
// export function hHackFog ; begin
33335: LD_INT 0
33337: PPUSH
// FogOff ( true ) ;
33338: LD_INT 1
33340: PPUSH
33341: CALL_OW 344
// end ;
33345: LD_VAR 0 1
33349: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33350: LD_INT 0
33352: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33353: LD_VAR 0 1
33357: PPUSH
33358: LD_VAR 0 2
33362: PPUSH
33363: LD_VAR 0 3
33367: PPUSH
33368: LD_INT 1
33370: PPUSH
33371: LD_INT 1
33373: PPUSH
33374: CALL_OW 483
// CenterOnXY ( x , y ) ;
33378: LD_VAR 0 2
33382: PPUSH
33383: LD_VAR 0 3
33387: PPUSH
33388: CALL_OW 84
// end ; end_of_file
33392: LD_VAR 0 4
33396: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33397: LD_INT 0
33399: PPUSH
33400: PPUSH
33401: PPUSH
33402: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33403: LD_VAR 0 1
33407: PPUSH
33408: CALL_OW 264
33412: PUSH
33413: LD_EXP 52
33417: EQUAL
33418: IFFALSE 33490
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33420: LD_INT 68
33422: PPUSH
33423: LD_VAR 0 1
33427: PPUSH
33428: CALL_OW 255
33432: PPUSH
33433: CALL_OW 321
33437: PUSH
33438: LD_INT 2
33440: EQUAL
33441: IFFALSE 33453
// eff := 70 else
33443: LD_ADDR_VAR 0 4
33447: PUSH
33448: LD_INT 70
33450: ST_TO_ADDR
33451: GO 33461
// eff := 30 ;
33453: LD_ADDR_VAR 0 4
33457: PUSH
33458: LD_INT 30
33460: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33461: LD_VAR 0 1
33465: PPUSH
33466: CALL_OW 250
33470: PPUSH
33471: LD_VAR 0 1
33475: PPUSH
33476: CALL_OW 251
33480: PPUSH
33481: LD_VAR 0 4
33485: PPUSH
33486: CALL_OW 495
// end ; end ;
33490: LD_VAR 0 2
33494: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33495: LD_INT 0
33497: PPUSH
// end ;
33498: LD_VAR 0 4
33502: RET
// export function SOS_Command ( cmd ) ; begin
33503: LD_INT 0
33505: PPUSH
// end ;
33506: LD_VAR 0 2
33510: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33511: LD_INT 0
33513: PPUSH
// end ;
33514: LD_VAR 0 6
33518: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33519: LD_INT 0
33521: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33522: LD_VAR 0 1
33526: PUSH
33527: LD_INT 250
33529: EQUAL
33530: PUSH
33531: LD_VAR 0 2
33535: PPUSH
33536: CALL_OW 264
33540: PUSH
33541: LD_EXP 55
33545: EQUAL
33546: AND
33547: IFFALSE 33568
// MinerPlaceMine ( unit , x , y ) ;
33549: LD_VAR 0 2
33553: PPUSH
33554: LD_VAR 0 4
33558: PPUSH
33559: LD_VAR 0 5
33563: PPUSH
33564: CALL 35917 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33568: LD_VAR 0 1
33572: PUSH
33573: LD_INT 251
33575: EQUAL
33576: PUSH
33577: LD_VAR 0 2
33581: PPUSH
33582: CALL_OW 264
33586: PUSH
33587: LD_EXP 55
33591: EQUAL
33592: AND
33593: IFFALSE 33614
// MinerDetonateMine ( unit , x , y ) ;
33595: LD_VAR 0 2
33599: PPUSH
33600: LD_VAR 0 4
33604: PPUSH
33605: LD_VAR 0 5
33609: PPUSH
33610: CALL 36194 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33614: LD_VAR 0 1
33618: PUSH
33619: LD_INT 252
33621: EQUAL
33622: PUSH
33623: LD_VAR 0 2
33627: PPUSH
33628: CALL_OW 264
33632: PUSH
33633: LD_EXP 55
33637: EQUAL
33638: AND
33639: IFFALSE 33660
// MinerCreateMinefield ( unit , x , y ) ;
33641: LD_VAR 0 2
33645: PPUSH
33646: LD_VAR 0 4
33650: PPUSH
33651: LD_VAR 0 5
33655: PPUSH
33656: CALL 36611 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33660: LD_VAR 0 1
33664: PUSH
33665: LD_INT 253
33667: EQUAL
33668: PUSH
33669: LD_VAR 0 2
33673: PPUSH
33674: CALL_OW 257
33678: PUSH
33679: LD_INT 5
33681: EQUAL
33682: AND
33683: IFFALSE 33704
// ComBinocular ( unit , x , y ) ;
33685: LD_VAR 0 2
33689: PPUSH
33690: LD_VAR 0 4
33694: PPUSH
33695: LD_VAR 0 5
33699: PPUSH
33700: CALL 36982 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33704: LD_VAR 0 1
33708: PUSH
33709: LD_INT 254
33711: EQUAL
33712: PUSH
33713: LD_VAR 0 2
33717: PPUSH
33718: CALL_OW 264
33722: PUSH
33723: LD_EXP 50
33727: EQUAL
33728: AND
33729: PUSH
33730: LD_VAR 0 3
33734: PPUSH
33735: CALL_OW 263
33739: PUSH
33740: LD_INT 3
33742: EQUAL
33743: AND
33744: IFFALSE 33760
// HackDestroyVehicle ( unit , selectedUnit ) ;
33746: LD_VAR 0 2
33750: PPUSH
33751: LD_VAR 0 3
33755: PPUSH
33756: CALL 35277 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33760: LD_VAR 0 1
33764: PUSH
33765: LD_INT 255
33767: EQUAL
33768: PUSH
33769: LD_VAR 0 2
33773: PPUSH
33774: CALL_OW 264
33778: PUSH
33779: LD_INT 14
33781: PUSH
33782: LD_INT 53
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: IN
33789: AND
33790: PUSH
33791: LD_VAR 0 4
33795: PPUSH
33796: LD_VAR 0 5
33800: PPUSH
33801: CALL_OW 488
33805: AND
33806: IFFALSE 33830
// CutTreeXYR ( unit , x , y , 12 ) ;
33808: LD_VAR 0 2
33812: PPUSH
33813: LD_VAR 0 4
33817: PPUSH
33818: LD_VAR 0 5
33822: PPUSH
33823: LD_INT 12
33825: PPUSH
33826: CALL 33843 0 4
// end ;
33830: LD_VAR 0 6
33834: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33835: LD_INT 0
33837: PPUSH
// end ;
33838: LD_VAR 0 4
33842: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33843: LD_INT 0
33845: PPUSH
33846: PPUSH
33847: PPUSH
33848: PPUSH
33849: PPUSH
33850: PPUSH
33851: PPUSH
33852: PPUSH
33853: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33854: LD_VAR 0 1
33858: NOT
33859: PUSH
33860: LD_VAR 0 2
33864: PPUSH
33865: LD_VAR 0 3
33869: PPUSH
33870: CALL_OW 488
33874: NOT
33875: OR
33876: PUSH
33877: LD_VAR 0 4
33881: NOT
33882: OR
33883: IFFALSE 33887
// exit ;
33885: GO 34227
// list := [ ] ;
33887: LD_ADDR_VAR 0 13
33891: PUSH
33892: EMPTY
33893: ST_TO_ADDR
// if x - r < 0 then
33894: LD_VAR 0 2
33898: PUSH
33899: LD_VAR 0 4
33903: MINUS
33904: PUSH
33905: LD_INT 0
33907: LESS
33908: IFFALSE 33920
// min_x := 0 else
33910: LD_ADDR_VAR 0 7
33914: PUSH
33915: LD_INT 0
33917: ST_TO_ADDR
33918: GO 33936
// min_x := x - r ;
33920: LD_ADDR_VAR 0 7
33924: PUSH
33925: LD_VAR 0 2
33929: PUSH
33930: LD_VAR 0 4
33934: MINUS
33935: ST_TO_ADDR
// if y - r < 0 then
33936: LD_VAR 0 3
33940: PUSH
33941: LD_VAR 0 4
33945: MINUS
33946: PUSH
33947: LD_INT 0
33949: LESS
33950: IFFALSE 33962
// min_y := 0 else
33952: LD_ADDR_VAR 0 8
33956: PUSH
33957: LD_INT 0
33959: ST_TO_ADDR
33960: GO 33978
// min_y := y - r ;
33962: LD_ADDR_VAR 0 8
33966: PUSH
33967: LD_VAR 0 3
33971: PUSH
33972: LD_VAR 0 4
33976: MINUS
33977: ST_TO_ADDR
// max_x := x + r ;
33978: LD_ADDR_VAR 0 9
33982: PUSH
33983: LD_VAR 0 2
33987: PUSH
33988: LD_VAR 0 4
33992: PLUS
33993: ST_TO_ADDR
// max_y := y + r ;
33994: LD_ADDR_VAR 0 10
33998: PUSH
33999: LD_VAR 0 3
34003: PUSH
34004: LD_VAR 0 4
34008: PLUS
34009: ST_TO_ADDR
// for _x = min_x to max_x do
34010: LD_ADDR_VAR 0 11
34014: PUSH
34015: DOUBLE
34016: LD_VAR 0 7
34020: DEC
34021: ST_TO_ADDR
34022: LD_VAR 0 9
34026: PUSH
34027: FOR_TO
34028: IFFALSE 34145
// for _y = min_y to max_y do
34030: LD_ADDR_VAR 0 12
34034: PUSH
34035: DOUBLE
34036: LD_VAR 0 8
34040: DEC
34041: ST_TO_ADDR
34042: LD_VAR 0 10
34046: PUSH
34047: FOR_TO
34048: IFFALSE 34141
// begin if not ValidHex ( _x , _y ) then
34050: LD_VAR 0 11
34054: PPUSH
34055: LD_VAR 0 12
34059: PPUSH
34060: CALL_OW 488
34064: NOT
34065: IFFALSE 34069
// continue ;
34067: GO 34047
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34069: LD_VAR 0 11
34073: PPUSH
34074: LD_VAR 0 12
34078: PPUSH
34079: CALL_OW 351
34083: PUSH
34084: LD_VAR 0 11
34088: PPUSH
34089: LD_VAR 0 12
34093: PPUSH
34094: CALL_OW 554
34098: AND
34099: IFFALSE 34139
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34101: LD_ADDR_VAR 0 13
34105: PUSH
34106: LD_VAR 0 13
34110: PPUSH
34111: LD_VAR 0 13
34115: PUSH
34116: LD_INT 1
34118: PLUS
34119: PPUSH
34120: LD_VAR 0 11
34124: PUSH
34125: LD_VAR 0 12
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PPUSH
34134: CALL_OW 2
34138: ST_TO_ADDR
// end ;
34139: GO 34047
34141: POP
34142: POP
34143: GO 34027
34145: POP
34146: POP
// if not list then
34147: LD_VAR 0 13
34151: NOT
34152: IFFALSE 34156
// exit ;
34154: GO 34227
// for i in list do
34156: LD_ADDR_VAR 0 6
34160: PUSH
34161: LD_VAR 0 13
34165: PUSH
34166: FOR_IN
34167: IFFALSE 34225
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34169: LD_VAR 0 1
34173: PPUSH
34174: LD_STRING M
34176: PUSH
34177: LD_VAR 0 6
34181: PUSH
34182: LD_INT 1
34184: ARRAY
34185: PUSH
34186: LD_VAR 0 6
34190: PUSH
34191: LD_INT 2
34193: ARRAY
34194: PUSH
34195: LD_INT 0
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: PUSH
34216: EMPTY
34217: LIST
34218: PPUSH
34219: CALL_OW 447
34223: GO 34166
34225: POP
34226: POP
// end ;
34227: LD_VAR 0 5
34231: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34232: LD_EXP 127
34236: NOT
34237: IFFALSE 34287
34239: GO 34241
34241: DISABLE
// begin initHack := true ;
34242: LD_ADDR_EXP 127
34246: PUSH
34247: LD_INT 1
34249: ST_TO_ADDR
// hackTanks := [ ] ;
34250: LD_ADDR_EXP 128
34254: PUSH
34255: EMPTY
34256: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34257: LD_ADDR_EXP 129
34261: PUSH
34262: EMPTY
34263: ST_TO_ADDR
// hackLimit := 3 ;
34264: LD_ADDR_EXP 130
34268: PUSH
34269: LD_INT 3
34271: ST_TO_ADDR
// hackDist := 12 ;
34272: LD_ADDR_EXP 131
34276: PUSH
34277: LD_INT 12
34279: ST_TO_ADDR
// hackCounter := [ ] ;
34280: LD_ADDR_EXP 132
34284: PUSH
34285: EMPTY
34286: ST_TO_ADDR
// end ;
34287: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34288: LD_EXP 127
34292: PUSH
34293: LD_INT 34
34295: PUSH
34296: LD_EXP 50
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PPUSH
34305: CALL_OW 69
34309: AND
34310: IFFALSE 34565
34312: GO 34314
34314: DISABLE
34315: LD_INT 0
34317: PPUSH
34318: PPUSH
// begin enable ;
34319: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34320: LD_ADDR_VAR 0 1
34324: PUSH
34325: LD_INT 34
34327: PUSH
34328: LD_EXP 50
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PPUSH
34337: CALL_OW 69
34341: PUSH
34342: FOR_IN
34343: IFFALSE 34563
// begin if not i in hackTanks then
34345: LD_VAR 0 1
34349: PUSH
34350: LD_EXP 128
34354: IN
34355: NOT
34356: IFFALSE 34439
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34358: LD_ADDR_EXP 128
34362: PUSH
34363: LD_EXP 128
34367: PPUSH
34368: LD_EXP 128
34372: PUSH
34373: LD_INT 1
34375: PLUS
34376: PPUSH
34377: LD_VAR 0 1
34381: PPUSH
34382: CALL_OW 1
34386: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34387: LD_ADDR_EXP 129
34391: PUSH
34392: LD_EXP 129
34396: PPUSH
34397: LD_EXP 129
34401: PUSH
34402: LD_INT 1
34404: PLUS
34405: PPUSH
34406: EMPTY
34407: PPUSH
34408: CALL_OW 1
34412: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34413: LD_ADDR_EXP 132
34417: PUSH
34418: LD_EXP 132
34422: PPUSH
34423: LD_EXP 132
34427: PUSH
34428: LD_INT 1
34430: PLUS
34431: PPUSH
34432: EMPTY
34433: PPUSH
34434: CALL_OW 1
34438: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34439: LD_VAR 0 1
34443: PPUSH
34444: CALL_OW 302
34448: NOT
34449: IFFALSE 34462
// begin HackUnlinkAll ( i ) ;
34451: LD_VAR 0 1
34455: PPUSH
34456: CALL 34568 0 1
// continue ;
34460: GO 34342
// end ; HackCheckCapturedStatus ( i ) ;
34462: LD_VAR 0 1
34466: PPUSH
34467: CALL 35011 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34471: LD_ADDR_VAR 0 2
34475: PUSH
34476: LD_INT 81
34478: PUSH
34479: LD_VAR 0 1
34483: PPUSH
34484: CALL_OW 255
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 33
34495: PUSH
34496: LD_INT 3
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 91
34505: PUSH
34506: LD_VAR 0 1
34510: PUSH
34511: LD_EXP 131
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 50
34523: PUSH
34524: EMPTY
34525: LIST
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: PPUSH
34533: CALL_OW 69
34537: ST_TO_ADDR
// if not tmp then
34538: LD_VAR 0 2
34542: NOT
34543: IFFALSE 34547
// continue ;
34545: GO 34342
// HackLink ( i , tmp ) ;
34547: LD_VAR 0 1
34551: PPUSH
34552: LD_VAR 0 2
34556: PPUSH
34557: CALL 34704 0 2
// end ;
34561: GO 34342
34563: POP
34564: POP
// end ;
34565: PPOPN 2
34567: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34568: LD_INT 0
34570: PPUSH
34571: PPUSH
34572: PPUSH
// if not hack in hackTanks then
34573: LD_VAR 0 1
34577: PUSH
34578: LD_EXP 128
34582: IN
34583: NOT
34584: IFFALSE 34588
// exit ;
34586: GO 34699
// index := GetElementIndex ( hackTanks , hack ) ;
34588: LD_ADDR_VAR 0 4
34592: PUSH
34593: LD_EXP 128
34597: PPUSH
34598: LD_VAR 0 1
34602: PPUSH
34603: CALL 42173 0 2
34607: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34608: LD_EXP 129
34612: PUSH
34613: LD_VAR 0 4
34617: ARRAY
34618: IFFALSE 34699
// begin for i in hackTanksCaptured [ index ] do
34620: LD_ADDR_VAR 0 3
34624: PUSH
34625: LD_EXP 129
34629: PUSH
34630: LD_VAR 0 4
34634: ARRAY
34635: PUSH
34636: FOR_IN
34637: IFFALSE 34663
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34639: LD_VAR 0 3
34643: PUSH
34644: LD_INT 1
34646: ARRAY
34647: PPUSH
34648: LD_VAR 0 3
34652: PUSH
34653: LD_INT 2
34655: ARRAY
34656: PPUSH
34657: CALL_OW 235
34661: GO 34636
34663: POP
34664: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34665: LD_ADDR_EXP 129
34669: PUSH
34670: LD_EXP 129
34674: PPUSH
34675: LD_VAR 0 4
34679: PPUSH
34680: EMPTY
34681: PPUSH
34682: CALL_OW 1
34686: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34687: LD_VAR 0 1
34691: PPUSH
34692: LD_INT 0
34694: PPUSH
34695: CALL_OW 505
// end ; end ;
34699: LD_VAR 0 2
34703: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34704: LD_INT 0
34706: PPUSH
34707: PPUSH
34708: PPUSH
// if not hack in hackTanks or not vehicles then
34709: LD_VAR 0 1
34713: PUSH
34714: LD_EXP 128
34718: IN
34719: NOT
34720: PUSH
34721: LD_VAR 0 2
34725: NOT
34726: OR
34727: IFFALSE 34731
// exit ;
34729: GO 35006
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34731: LD_ADDR_VAR 0 2
34735: PUSH
34736: LD_VAR 0 1
34740: PPUSH
34741: LD_VAR 0 2
34745: PPUSH
34746: LD_INT 1
34748: PPUSH
34749: LD_INT 1
34751: PPUSH
34752: CALL 42823 0 4
34756: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34757: LD_ADDR_VAR 0 5
34761: PUSH
34762: LD_EXP 128
34766: PPUSH
34767: LD_VAR 0 1
34771: PPUSH
34772: CALL 42173 0 2
34776: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34777: LD_EXP 129
34781: PUSH
34782: LD_VAR 0 5
34786: ARRAY
34787: PUSH
34788: LD_EXP 130
34792: LESS
34793: IFFALSE 34982
// begin for i := 1 to vehicles do
34795: LD_ADDR_VAR 0 4
34799: PUSH
34800: DOUBLE
34801: LD_INT 1
34803: DEC
34804: ST_TO_ADDR
34805: LD_VAR 0 2
34809: PUSH
34810: FOR_TO
34811: IFFALSE 34980
// begin if hackTanksCaptured [ index ] = hackLimit then
34813: LD_EXP 129
34817: PUSH
34818: LD_VAR 0 5
34822: ARRAY
34823: PUSH
34824: LD_EXP 130
34828: EQUAL
34829: IFFALSE 34833
// break ;
34831: GO 34980
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34833: LD_ADDR_EXP 132
34837: PUSH
34838: LD_EXP 132
34842: PPUSH
34843: LD_VAR 0 5
34847: PPUSH
34848: LD_EXP 132
34852: PUSH
34853: LD_VAR 0 5
34857: ARRAY
34858: PUSH
34859: LD_INT 1
34861: PLUS
34862: PPUSH
34863: CALL_OW 1
34867: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34868: LD_ADDR_EXP 129
34872: PUSH
34873: LD_EXP 129
34877: PPUSH
34878: LD_VAR 0 5
34882: PUSH
34883: LD_EXP 129
34887: PUSH
34888: LD_VAR 0 5
34892: ARRAY
34893: PUSH
34894: LD_INT 1
34896: PLUS
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PPUSH
34902: LD_VAR 0 2
34906: PUSH
34907: LD_VAR 0 4
34911: ARRAY
34912: PUSH
34913: LD_VAR 0 2
34917: PUSH
34918: LD_VAR 0 4
34922: ARRAY
34923: PPUSH
34924: CALL_OW 255
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PPUSH
34933: CALL 42388 0 3
34937: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34938: LD_VAR 0 2
34942: PUSH
34943: LD_VAR 0 4
34947: ARRAY
34948: PPUSH
34949: LD_VAR 0 1
34953: PPUSH
34954: CALL_OW 255
34958: PPUSH
34959: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34963: LD_VAR 0 2
34967: PUSH
34968: LD_VAR 0 4
34972: ARRAY
34973: PPUSH
34974: CALL_OW 141
// end ;
34978: GO 34810
34980: POP
34981: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34982: LD_VAR 0 1
34986: PPUSH
34987: LD_EXP 129
34991: PUSH
34992: LD_VAR 0 5
34996: ARRAY
34997: PUSH
34998: LD_INT 0
35000: PLUS
35001: PPUSH
35002: CALL_OW 505
// end ;
35006: LD_VAR 0 3
35010: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35011: LD_INT 0
35013: PPUSH
35014: PPUSH
35015: PPUSH
35016: PPUSH
// if not hack in hackTanks then
35017: LD_VAR 0 1
35021: PUSH
35022: LD_EXP 128
35026: IN
35027: NOT
35028: IFFALSE 35032
// exit ;
35030: GO 35272
// index := GetElementIndex ( hackTanks , hack ) ;
35032: LD_ADDR_VAR 0 4
35036: PUSH
35037: LD_EXP 128
35041: PPUSH
35042: LD_VAR 0 1
35046: PPUSH
35047: CALL 42173 0 2
35051: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35052: LD_ADDR_VAR 0 3
35056: PUSH
35057: DOUBLE
35058: LD_EXP 129
35062: PUSH
35063: LD_VAR 0 4
35067: ARRAY
35068: INC
35069: ST_TO_ADDR
35070: LD_INT 1
35072: PUSH
35073: FOR_DOWNTO
35074: IFFALSE 35246
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35076: LD_ADDR_VAR 0 5
35080: PUSH
35081: LD_EXP 129
35085: PUSH
35086: LD_VAR 0 4
35090: ARRAY
35091: PUSH
35092: LD_VAR 0 3
35096: ARRAY
35097: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35098: LD_VAR 0 5
35102: PUSH
35103: LD_INT 1
35105: ARRAY
35106: PPUSH
35107: CALL_OW 302
35111: NOT
35112: PUSH
35113: LD_VAR 0 5
35117: PUSH
35118: LD_INT 1
35120: ARRAY
35121: PPUSH
35122: CALL_OW 255
35126: PUSH
35127: LD_VAR 0 1
35131: PPUSH
35132: CALL_OW 255
35136: NONEQUAL
35137: OR
35138: IFFALSE 35244
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35140: LD_VAR 0 5
35144: PUSH
35145: LD_INT 1
35147: ARRAY
35148: PPUSH
35149: CALL_OW 305
35153: PUSH
35154: LD_VAR 0 5
35158: PUSH
35159: LD_INT 1
35161: ARRAY
35162: PPUSH
35163: CALL_OW 255
35167: PUSH
35168: LD_VAR 0 1
35172: PPUSH
35173: CALL_OW 255
35177: EQUAL
35178: AND
35179: IFFALSE 35203
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35181: LD_VAR 0 5
35185: PUSH
35186: LD_INT 1
35188: ARRAY
35189: PPUSH
35190: LD_VAR 0 5
35194: PUSH
35195: LD_INT 2
35197: ARRAY
35198: PPUSH
35199: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35203: LD_ADDR_EXP 129
35207: PUSH
35208: LD_EXP 129
35212: PPUSH
35213: LD_VAR 0 4
35217: PPUSH
35218: LD_EXP 129
35222: PUSH
35223: LD_VAR 0 4
35227: ARRAY
35228: PPUSH
35229: LD_VAR 0 3
35233: PPUSH
35234: CALL_OW 3
35238: PPUSH
35239: CALL_OW 1
35243: ST_TO_ADDR
// end ; end ;
35244: GO 35073
35246: POP
35247: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35248: LD_VAR 0 1
35252: PPUSH
35253: LD_EXP 129
35257: PUSH
35258: LD_VAR 0 4
35262: ARRAY
35263: PUSH
35264: LD_INT 0
35266: PLUS
35267: PPUSH
35268: CALL_OW 505
// end ;
35272: LD_VAR 0 2
35276: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35277: LD_INT 0
35279: PPUSH
35280: PPUSH
35281: PPUSH
35282: PPUSH
// if not hack in hackTanks then
35283: LD_VAR 0 1
35287: PUSH
35288: LD_EXP 128
35292: IN
35293: NOT
35294: IFFALSE 35298
// exit ;
35296: GO 35383
// index := GetElementIndex ( hackTanks , hack ) ;
35298: LD_ADDR_VAR 0 5
35302: PUSH
35303: LD_EXP 128
35307: PPUSH
35308: LD_VAR 0 1
35312: PPUSH
35313: CALL 42173 0 2
35317: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35318: LD_ADDR_VAR 0 4
35322: PUSH
35323: DOUBLE
35324: LD_INT 1
35326: DEC
35327: ST_TO_ADDR
35328: LD_EXP 129
35332: PUSH
35333: LD_VAR 0 5
35337: ARRAY
35338: PUSH
35339: FOR_TO
35340: IFFALSE 35381
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35342: LD_EXP 129
35346: PUSH
35347: LD_VAR 0 5
35351: ARRAY
35352: PUSH
35353: LD_VAR 0 4
35357: ARRAY
35358: PUSH
35359: LD_INT 1
35361: ARRAY
35362: PUSH
35363: LD_VAR 0 2
35367: EQUAL
35368: IFFALSE 35379
// KillUnit ( vehicle ) ;
35370: LD_VAR 0 2
35374: PPUSH
35375: CALL_OW 66
35379: GO 35339
35381: POP
35382: POP
// end ;
35383: LD_VAR 0 3
35387: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35388: LD_EXP 133
35392: NOT
35393: IFFALSE 35428
35395: GO 35397
35397: DISABLE
// begin initMiner := true ;
35398: LD_ADDR_EXP 133
35402: PUSH
35403: LD_INT 1
35405: ST_TO_ADDR
// minersList := [ ] ;
35406: LD_ADDR_EXP 134
35410: PUSH
35411: EMPTY
35412: ST_TO_ADDR
// minerMinesList := [ ] ;
35413: LD_ADDR_EXP 135
35417: PUSH
35418: EMPTY
35419: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35420: LD_ADDR_EXP 136
35424: PUSH
35425: LD_INT 5
35427: ST_TO_ADDR
// end ;
35428: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35429: LD_EXP 133
35433: PUSH
35434: LD_INT 34
35436: PUSH
35437: LD_EXP 55
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PPUSH
35446: CALL_OW 69
35450: AND
35451: IFFALSE 35914
35453: GO 35455
35455: DISABLE
35456: LD_INT 0
35458: PPUSH
35459: PPUSH
35460: PPUSH
35461: PPUSH
// begin enable ;
35462: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35463: LD_ADDR_VAR 0 1
35467: PUSH
35468: LD_INT 34
35470: PUSH
35471: LD_EXP 55
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PPUSH
35480: CALL_OW 69
35484: PUSH
35485: FOR_IN
35486: IFFALSE 35558
// begin if not i in minersList then
35488: LD_VAR 0 1
35492: PUSH
35493: LD_EXP 134
35497: IN
35498: NOT
35499: IFFALSE 35556
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35501: LD_ADDR_EXP 134
35505: PUSH
35506: LD_EXP 134
35510: PPUSH
35511: LD_EXP 134
35515: PUSH
35516: LD_INT 1
35518: PLUS
35519: PPUSH
35520: LD_VAR 0 1
35524: PPUSH
35525: CALL_OW 1
35529: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35530: LD_ADDR_EXP 135
35534: PUSH
35535: LD_EXP 135
35539: PPUSH
35540: LD_EXP 135
35544: PUSH
35545: LD_INT 1
35547: PLUS
35548: PPUSH
35549: EMPTY
35550: PPUSH
35551: CALL_OW 1
35555: ST_TO_ADDR
// end end ;
35556: GO 35485
35558: POP
35559: POP
// for i := minerMinesList downto 1 do
35560: LD_ADDR_VAR 0 1
35564: PUSH
35565: DOUBLE
35566: LD_EXP 135
35570: INC
35571: ST_TO_ADDR
35572: LD_INT 1
35574: PUSH
35575: FOR_DOWNTO
35576: IFFALSE 35912
// begin if IsLive ( minersList [ i ] ) then
35578: LD_EXP 134
35582: PUSH
35583: LD_VAR 0 1
35587: ARRAY
35588: PPUSH
35589: CALL_OW 300
35593: IFFALSE 35621
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35595: LD_EXP 134
35599: PUSH
35600: LD_VAR 0 1
35604: ARRAY
35605: PPUSH
35606: LD_EXP 135
35610: PUSH
35611: LD_VAR 0 1
35615: ARRAY
35616: PPUSH
35617: CALL_OW 505
// if not minerMinesList [ i ] then
35621: LD_EXP 135
35625: PUSH
35626: LD_VAR 0 1
35630: ARRAY
35631: NOT
35632: IFFALSE 35636
// continue ;
35634: GO 35575
// for j := minerMinesList [ i ] downto 1 do
35636: LD_ADDR_VAR 0 2
35640: PUSH
35641: DOUBLE
35642: LD_EXP 135
35646: PUSH
35647: LD_VAR 0 1
35651: ARRAY
35652: INC
35653: ST_TO_ADDR
35654: LD_INT 1
35656: PUSH
35657: FOR_DOWNTO
35658: IFFALSE 35908
// begin side := GetSide ( minersList [ i ] ) ;
35660: LD_ADDR_VAR 0 3
35664: PUSH
35665: LD_EXP 134
35669: PUSH
35670: LD_VAR 0 1
35674: ARRAY
35675: PPUSH
35676: CALL_OW 255
35680: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35681: LD_ADDR_VAR 0 4
35685: PUSH
35686: LD_EXP 135
35690: PUSH
35691: LD_VAR 0 1
35695: ARRAY
35696: PUSH
35697: LD_VAR 0 2
35701: ARRAY
35702: PUSH
35703: LD_INT 1
35705: ARRAY
35706: PPUSH
35707: LD_EXP 135
35711: PUSH
35712: LD_VAR 0 1
35716: ARRAY
35717: PUSH
35718: LD_VAR 0 2
35722: ARRAY
35723: PUSH
35724: LD_INT 2
35726: ARRAY
35727: PPUSH
35728: CALL_OW 428
35732: ST_TO_ADDR
// if not tmp then
35733: LD_VAR 0 4
35737: NOT
35738: IFFALSE 35742
// continue ;
35740: GO 35657
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35742: LD_VAR 0 4
35746: PUSH
35747: LD_INT 81
35749: PUSH
35750: LD_VAR 0 3
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PPUSH
35759: CALL_OW 69
35763: IN
35764: PUSH
35765: LD_EXP 135
35769: PUSH
35770: LD_VAR 0 1
35774: ARRAY
35775: PUSH
35776: LD_VAR 0 2
35780: ARRAY
35781: PUSH
35782: LD_INT 1
35784: ARRAY
35785: PPUSH
35786: LD_EXP 135
35790: PUSH
35791: LD_VAR 0 1
35795: ARRAY
35796: PUSH
35797: LD_VAR 0 2
35801: ARRAY
35802: PUSH
35803: LD_INT 2
35805: ARRAY
35806: PPUSH
35807: CALL_OW 458
35811: AND
35812: IFFALSE 35906
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35814: LD_EXP 135
35818: PUSH
35819: LD_VAR 0 1
35823: ARRAY
35824: PUSH
35825: LD_VAR 0 2
35829: ARRAY
35830: PUSH
35831: LD_INT 1
35833: ARRAY
35834: PPUSH
35835: LD_EXP 135
35839: PUSH
35840: LD_VAR 0 1
35844: ARRAY
35845: PUSH
35846: LD_VAR 0 2
35850: ARRAY
35851: PUSH
35852: LD_INT 2
35854: ARRAY
35855: PPUSH
35856: LD_VAR 0 3
35860: PPUSH
35861: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35865: LD_ADDR_EXP 135
35869: PUSH
35870: LD_EXP 135
35874: PPUSH
35875: LD_VAR 0 1
35879: PPUSH
35880: LD_EXP 135
35884: PUSH
35885: LD_VAR 0 1
35889: ARRAY
35890: PPUSH
35891: LD_VAR 0 2
35895: PPUSH
35896: CALL_OW 3
35900: PPUSH
35901: CALL_OW 1
35905: ST_TO_ADDR
// end ; end ;
35906: GO 35657
35908: POP
35909: POP
// end ;
35910: GO 35575
35912: POP
35913: POP
// end ;
35914: PPOPN 4
35916: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35917: LD_INT 0
35919: PPUSH
35920: PPUSH
// result := false ;
35921: LD_ADDR_VAR 0 4
35925: PUSH
35926: LD_INT 0
35928: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35929: LD_VAR 0 1
35933: PPUSH
35934: CALL_OW 264
35938: PUSH
35939: LD_EXP 55
35943: EQUAL
35944: NOT
35945: IFFALSE 35949
// exit ;
35947: GO 36189
// index := GetElementIndex ( minersList , unit ) ;
35949: LD_ADDR_VAR 0 5
35953: PUSH
35954: LD_EXP 134
35958: PPUSH
35959: LD_VAR 0 1
35963: PPUSH
35964: CALL 42173 0 2
35968: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35969: LD_EXP 135
35973: PUSH
35974: LD_VAR 0 5
35978: ARRAY
35979: PUSH
35980: LD_EXP 136
35984: GREATEREQUAL
35985: IFFALSE 35989
// exit ;
35987: GO 36189
// ComMoveXY ( unit , x , y ) ;
35989: LD_VAR 0 1
35993: PPUSH
35994: LD_VAR 0 2
35998: PPUSH
35999: LD_VAR 0 3
36003: PPUSH
36004: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36008: LD_INT 35
36010: PPUSH
36011: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36015: LD_VAR 0 1
36019: PPUSH
36020: LD_VAR 0 2
36024: PPUSH
36025: LD_VAR 0 3
36029: PPUSH
36030: CALL 72945 0 3
36034: NOT
36035: PUSH
36036: LD_VAR 0 1
36040: PPUSH
36041: CALL_OW 314
36045: AND
36046: IFFALSE 36050
// exit ;
36048: GO 36189
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36050: LD_VAR 0 2
36054: PPUSH
36055: LD_VAR 0 3
36059: PPUSH
36060: CALL_OW 428
36064: PUSH
36065: LD_VAR 0 1
36069: EQUAL
36070: PUSH
36071: LD_VAR 0 1
36075: PPUSH
36076: CALL_OW 314
36080: NOT
36081: AND
36082: IFFALSE 36008
// PlaySoundXY ( x , y , PlantMine ) ;
36084: LD_VAR 0 2
36088: PPUSH
36089: LD_VAR 0 3
36093: PPUSH
36094: LD_STRING PlantMine
36096: PPUSH
36097: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36101: LD_VAR 0 2
36105: PPUSH
36106: LD_VAR 0 3
36110: PPUSH
36111: LD_VAR 0 1
36115: PPUSH
36116: CALL_OW 255
36120: PPUSH
36121: LD_INT 0
36123: PPUSH
36124: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36128: LD_ADDR_EXP 135
36132: PUSH
36133: LD_EXP 135
36137: PPUSH
36138: LD_VAR 0 5
36142: PUSH
36143: LD_EXP 135
36147: PUSH
36148: LD_VAR 0 5
36152: ARRAY
36153: PUSH
36154: LD_INT 1
36156: PLUS
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PPUSH
36162: LD_VAR 0 2
36166: PUSH
36167: LD_VAR 0 3
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PPUSH
36176: CALL 42388 0 3
36180: ST_TO_ADDR
// result := true ;
36181: LD_ADDR_VAR 0 4
36185: PUSH
36186: LD_INT 1
36188: ST_TO_ADDR
// end ;
36189: LD_VAR 0 4
36193: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36194: LD_INT 0
36196: PPUSH
36197: PPUSH
36198: PPUSH
// if not unit in minersList then
36199: LD_VAR 0 1
36203: PUSH
36204: LD_EXP 134
36208: IN
36209: NOT
36210: IFFALSE 36214
// exit ;
36212: GO 36606
// index := GetElementIndex ( minersList , unit ) ;
36214: LD_ADDR_VAR 0 6
36218: PUSH
36219: LD_EXP 134
36223: PPUSH
36224: LD_VAR 0 1
36228: PPUSH
36229: CALL 42173 0 2
36233: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36234: LD_ADDR_VAR 0 5
36238: PUSH
36239: DOUBLE
36240: LD_EXP 135
36244: PUSH
36245: LD_VAR 0 6
36249: ARRAY
36250: INC
36251: ST_TO_ADDR
36252: LD_INT 1
36254: PUSH
36255: FOR_DOWNTO
36256: IFFALSE 36417
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36258: LD_EXP 135
36262: PUSH
36263: LD_VAR 0 6
36267: ARRAY
36268: PUSH
36269: LD_VAR 0 5
36273: ARRAY
36274: PUSH
36275: LD_INT 1
36277: ARRAY
36278: PUSH
36279: LD_VAR 0 2
36283: EQUAL
36284: PUSH
36285: LD_EXP 135
36289: PUSH
36290: LD_VAR 0 6
36294: ARRAY
36295: PUSH
36296: LD_VAR 0 5
36300: ARRAY
36301: PUSH
36302: LD_INT 2
36304: ARRAY
36305: PUSH
36306: LD_VAR 0 3
36310: EQUAL
36311: AND
36312: IFFALSE 36415
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36314: LD_EXP 135
36318: PUSH
36319: LD_VAR 0 6
36323: ARRAY
36324: PUSH
36325: LD_VAR 0 5
36329: ARRAY
36330: PUSH
36331: LD_INT 1
36333: ARRAY
36334: PPUSH
36335: LD_EXP 135
36339: PUSH
36340: LD_VAR 0 6
36344: ARRAY
36345: PUSH
36346: LD_VAR 0 5
36350: ARRAY
36351: PUSH
36352: LD_INT 2
36354: ARRAY
36355: PPUSH
36356: LD_VAR 0 1
36360: PPUSH
36361: CALL_OW 255
36365: PPUSH
36366: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36370: LD_ADDR_EXP 135
36374: PUSH
36375: LD_EXP 135
36379: PPUSH
36380: LD_VAR 0 6
36384: PPUSH
36385: LD_EXP 135
36389: PUSH
36390: LD_VAR 0 6
36394: ARRAY
36395: PPUSH
36396: LD_VAR 0 5
36400: PPUSH
36401: CALL_OW 3
36405: PPUSH
36406: CALL_OW 1
36410: ST_TO_ADDR
// exit ;
36411: POP
36412: POP
36413: GO 36606
// end ; end ;
36415: GO 36255
36417: POP
36418: POP
// for i := minerMinesList [ index ] downto 1 do
36419: LD_ADDR_VAR 0 5
36423: PUSH
36424: DOUBLE
36425: LD_EXP 135
36429: PUSH
36430: LD_VAR 0 6
36434: ARRAY
36435: INC
36436: ST_TO_ADDR
36437: LD_INT 1
36439: PUSH
36440: FOR_DOWNTO
36441: IFFALSE 36604
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36443: LD_EXP 135
36447: PUSH
36448: LD_VAR 0 6
36452: ARRAY
36453: PUSH
36454: LD_VAR 0 5
36458: ARRAY
36459: PUSH
36460: LD_INT 1
36462: ARRAY
36463: PPUSH
36464: LD_EXP 135
36468: PUSH
36469: LD_VAR 0 6
36473: ARRAY
36474: PUSH
36475: LD_VAR 0 5
36479: ARRAY
36480: PUSH
36481: LD_INT 2
36483: ARRAY
36484: PPUSH
36485: LD_VAR 0 2
36489: PPUSH
36490: LD_VAR 0 3
36494: PPUSH
36495: CALL_OW 298
36499: PUSH
36500: LD_INT 6
36502: LESS
36503: IFFALSE 36602
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36505: LD_EXP 135
36509: PUSH
36510: LD_VAR 0 6
36514: ARRAY
36515: PUSH
36516: LD_VAR 0 5
36520: ARRAY
36521: PUSH
36522: LD_INT 1
36524: ARRAY
36525: PPUSH
36526: LD_EXP 135
36530: PUSH
36531: LD_VAR 0 6
36535: ARRAY
36536: PUSH
36537: LD_VAR 0 5
36541: ARRAY
36542: PUSH
36543: LD_INT 2
36545: ARRAY
36546: PPUSH
36547: LD_VAR 0 1
36551: PPUSH
36552: CALL_OW 255
36556: PPUSH
36557: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36561: LD_ADDR_EXP 135
36565: PUSH
36566: LD_EXP 135
36570: PPUSH
36571: LD_VAR 0 6
36575: PPUSH
36576: LD_EXP 135
36580: PUSH
36581: LD_VAR 0 6
36585: ARRAY
36586: PPUSH
36587: LD_VAR 0 5
36591: PPUSH
36592: CALL_OW 3
36596: PPUSH
36597: CALL_OW 1
36601: ST_TO_ADDR
// end ; end ;
36602: GO 36440
36604: POP
36605: POP
// end ;
36606: LD_VAR 0 4
36610: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36611: LD_INT 0
36613: PPUSH
36614: PPUSH
36615: PPUSH
36616: PPUSH
36617: PPUSH
36618: PPUSH
36619: PPUSH
36620: PPUSH
36621: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36622: LD_VAR 0 1
36626: PPUSH
36627: CALL_OW 264
36631: PUSH
36632: LD_EXP 55
36636: EQUAL
36637: NOT
36638: PUSH
36639: LD_VAR 0 1
36643: PUSH
36644: LD_EXP 134
36648: IN
36649: NOT
36650: OR
36651: IFFALSE 36655
// exit ;
36653: GO 36977
// index := GetElementIndex ( minersList , unit ) ;
36655: LD_ADDR_VAR 0 6
36659: PUSH
36660: LD_EXP 134
36664: PPUSH
36665: LD_VAR 0 1
36669: PPUSH
36670: CALL 42173 0 2
36674: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36675: LD_ADDR_VAR 0 8
36679: PUSH
36680: LD_EXP 136
36684: PUSH
36685: LD_EXP 135
36689: PUSH
36690: LD_VAR 0 6
36694: ARRAY
36695: MINUS
36696: ST_TO_ADDR
// if not minesFreeAmount then
36697: LD_VAR 0 8
36701: NOT
36702: IFFALSE 36706
// exit ;
36704: GO 36977
// tmp := [ ] ;
36706: LD_ADDR_VAR 0 7
36710: PUSH
36711: EMPTY
36712: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36713: LD_ADDR_VAR 0 5
36717: PUSH
36718: DOUBLE
36719: LD_INT 1
36721: DEC
36722: ST_TO_ADDR
36723: LD_VAR 0 8
36727: PUSH
36728: FOR_TO
36729: IFFALSE 36924
// begin _d := rand ( 0 , 5 ) ;
36731: LD_ADDR_VAR 0 11
36735: PUSH
36736: LD_INT 0
36738: PPUSH
36739: LD_INT 5
36741: PPUSH
36742: CALL_OW 12
36746: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36747: LD_ADDR_VAR 0 12
36751: PUSH
36752: LD_INT 2
36754: PPUSH
36755: LD_INT 6
36757: PPUSH
36758: CALL_OW 12
36762: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36763: LD_ADDR_VAR 0 9
36767: PUSH
36768: LD_VAR 0 2
36772: PPUSH
36773: LD_VAR 0 11
36777: PPUSH
36778: LD_VAR 0 12
36782: PPUSH
36783: CALL_OW 272
36787: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36788: LD_ADDR_VAR 0 10
36792: PUSH
36793: LD_VAR 0 3
36797: PPUSH
36798: LD_VAR 0 11
36802: PPUSH
36803: LD_VAR 0 12
36807: PPUSH
36808: CALL_OW 273
36812: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36813: LD_VAR 0 9
36817: PPUSH
36818: LD_VAR 0 10
36822: PPUSH
36823: CALL_OW 488
36827: PUSH
36828: LD_VAR 0 9
36832: PUSH
36833: LD_VAR 0 10
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_VAR 0 7
36846: IN
36847: NOT
36848: AND
36849: PUSH
36850: LD_VAR 0 9
36854: PPUSH
36855: LD_VAR 0 10
36859: PPUSH
36860: CALL_OW 458
36864: NOT
36865: AND
36866: IFFALSE 36908
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36868: LD_ADDR_VAR 0 7
36872: PUSH
36873: LD_VAR 0 7
36877: PPUSH
36878: LD_VAR 0 7
36882: PUSH
36883: LD_INT 1
36885: PLUS
36886: PPUSH
36887: LD_VAR 0 9
36891: PUSH
36892: LD_VAR 0 10
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PPUSH
36901: CALL_OW 1
36905: ST_TO_ADDR
36906: GO 36922
// i := i - 1 ;
36908: LD_ADDR_VAR 0 5
36912: PUSH
36913: LD_VAR 0 5
36917: PUSH
36918: LD_INT 1
36920: MINUS
36921: ST_TO_ADDR
// end ;
36922: GO 36728
36924: POP
36925: POP
// for i in tmp do
36926: LD_ADDR_VAR 0 5
36930: PUSH
36931: LD_VAR 0 7
36935: PUSH
36936: FOR_IN
36937: IFFALSE 36975
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36939: LD_VAR 0 1
36943: PPUSH
36944: LD_VAR 0 5
36948: PUSH
36949: LD_INT 1
36951: ARRAY
36952: PPUSH
36953: LD_VAR 0 5
36957: PUSH
36958: LD_INT 2
36960: ARRAY
36961: PPUSH
36962: CALL 35917 0 3
36966: NOT
36967: IFFALSE 36973
// exit ;
36969: POP
36970: POP
36971: GO 36977
36973: GO 36936
36975: POP
36976: POP
// end ;
36977: LD_VAR 0 4
36981: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36982: LD_INT 0
36984: PPUSH
36985: PPUSH
36986: PPUSH
36987: PPUSH
36988: PPUSH
36989: PPUSH
36990: PPUSH
// if not GetClass ( unit ) = class_sniper then
36991: LD_VAR 0 1
36995: PPUSH
36996: CALL_OW 257
37000: PUSH
37001: LD_INT 5
37003: EQUAL
37004: NOT
37005: IFFALSE 37009
// exit ;
37007: GO 37397
// dist := 8 ;
37009: LD_ADDR_VAR 0 5
37013: PUSH
37014: LD_INT 8
37016: ST_TO_ADDR
// viewRange := 12 ;
37017: LD_ADDR_VAR 0 7
37021: PUSH
37022: LD_INT 12
37024: ST_TO_ADDR
// side := GetSide ( unit ) ;
37025: LD_ADDR_VAR 0 6
37029: PUSH
37030: LD_VAR 0 1
37034: PPUSH
37035: CALL_OW 255
37039: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37040: LD_INT 61
37042: PPUSH
37043: LD_VAR 0 6
37047: PPUSH
37048: CALL_OW 321
37052: PUSH
37053: LD_INT 2
37055: EQUAL
37056: IFFALSE 37066
// viewRange := 16 ;
37058: LD_ADDR_VAR 0 7
37062: PUSH
37063: LD_INT 16
37065: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37066: LD_VAR 0 1
37070: PPUSH
37071: LD_VAR 0 2
37075: PPUSH
37076: LD_VAR 0 3
37080: PPUSH
37081: CALL_OW 297
37085: PUSH
37086: LD_VAR 0 5
37090: GREATER
37091: IFFALSE 37170
// begin ComMoveXY ( unit , x , y ) ;
37093: LD_VAR 0 1
37097: PPUSH
37098: LD_VAR 0 2
37102: PPUSH
37103: LD_VAR 0 3
37107: PPUSH
37108: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37112: LD_INT 35
37114: PPUSH
37115: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37119: LD_VAR 0 1
37123: PPUSH
37124: LD_VAR 0 2
37128: PPUSH
37129: LD_VAR 0 3
37133: PPUSH
37134: CALL 72945 0 3
37138: NOT
37139: IFFALSE 37143
// exit ;
37141: GO 37397
// until GetDistUnitXY ( unit , x , y ) < dist ;
37143: LD_VAR 0 1
37147: PPUSH
37148: LD_VAR 0 2
37152: PPUSH
37153: LD_VAR 0 3
37157: PPUSH
37158: CALL_OW 297
37162: PUSH
37163: LD_VAR 0 5
37167: LESS
37168: IFFALSE 37112
// end ; ComTurnXY ( unit , x , y ) ;
37170: LD_VAR 0 1
37174: PPUSH
37175: LD_VAR 0 2
37179: PPUSH
37180: LD_VAR 0 3
37184: PPUSH
37185: CALL_OW 118
// wait ( 5 ) ;
37189: LD_INT 5
37191: PPUSH
37192: CALL_OW 67
// _d := GetDir ( unit ) ;
37196: LD_ADDR_VAR 0 10
37200: PUSH
37201: LD_VAR 0 1
37205: PPUSH
37206: CALL_OW 254
37210: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37211: LD_ADDR_VAR 0 8
37215: PUSH
37216: LD_VAR 0 1
37220: PPUSH
37221: CALL_OW 250
37225: PPUSH
37226: LD_VAR 0 10
37230: PPUSH
37231: LD_VAR 0 5
37235: PPUSH
37236: CALL_OW 272
37240: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37241: LD_ADDR_VAR 0 9
37245: PUSH
37246: LD_VAR 0 1
37250: PPUSH
37251: CALL_OW 251
37255: PPUSH
37256: LD_VAR 0 10
37260: PPUSH
37261: LD_VAR 0 5
37265: PPUSH
37266: CALL_OW 273
37270: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37271: LD_VAR 0 8
37275: PPUSH
37276: LD_VAR 0 9
37280: PPUSH
37281: CALL_OW 488
37285: NOT
37286: IFFALSE 37290
// exit ;
37288: GO 37397
// ComAnimCustom ( unit , 1 ) ;
37290: LD_VAR 0 1
37294: PPUSH
37295: LD_INT 1
37297: PPUSH
37298: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37302: LD_VAR 0 8
37306: PPUSH
37307: LD_VAR 0 9
37311: PPUSH
37312: LD_VAR 0 6
37316: PPUSH
37317: LD_VAR 0 7
37321: PPUSH
37322: CALL_OW 330
// repeat wait ( 1 ) ;
37326: LD_INT 1
37328: PPUSH
37329: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37333: LD_VAR 0 1
37337: PPUSH
37338: CALL_OW 316
37342: PUSH
37343: LD_VAR 0 1
37347: PPUSH
37348: CALL_OW 314
37352: OR
37353: PUSH
37354: LD_VAR 0 1
37358: PPUSH
37359: CALL_OW 302
37363: NOT
37364: OR
37365: PUSH
37366: LD_VAR 0 1
37370: PPUSH
37371: CALL_OW 301
37375: OR
37376: IFFALSE 37326
// RemoveSeeing ( _x , _y , side ) ;
37378: LD_VAR 0 8
37382: PPUSH
37383: LD_VAR 0 9
37387: PPUSH
37388: LD_VAR 0 6
37392: PPUSH
37393: CALL_OW 331
// end ; end_of_file
37397: LD_VAR 0 4
37401: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37402: LD_INT 0
37404: PPUSH
37405: PPUSH
// if exist_mode then
37406: LD_VAR 0 2
37410: IFFALSE 37435
// unit := CreateCharacter ( prefix & ident ) else
37412: LD_ADDR_VAR 0 5
37416: PUSH
37417: LD_VAR 0 3
37421: PUSH
37422: LD_VAR 0 1
37426: STR
37427: PPUSH
37428: CALL_OW 34
37432: ST_TO_ADDR
37433: GO 37450
// unit := NewCharacter ( ident ) ;
37435: LD_ADDR_VAR 0 5
37439: PUSH
37440: LD_VAR 0 1
37444: PPUSH
37445: CALL_OW 25
37449: ST_TO_ADDR
// result := unit ;
37450: LD_ADDR_VAR 0 4
37454: PUSH
37455: LD_VAR 0 5
37459: ST_TO_ADDR
// end ;
37460: LD_VAR 0 4
37464: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37465: LD_INT 0
37467: PPUSH
37468: PPUSH
// if not side or not nation then
37469: LD_VAR 0 1
37473: NOT
37474: PUSH
37475: LD_VAR 0 2
37479: NOT
37480: OR
37481: IFFALSE 37485
// exit ;
37483: GO 38253
// case nation of nation_american :
37485: LD_VAR 0 2
37489: PUSH
37490: LD_INT 1
37492: DOUBLE
37493: EQUAL
37494: IFTRUE 37498
37496: GO 37712
37498: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37499: LD_ADDR_VAR 0 4
37503: PUSH
37504: LD_INT 35
37506: PUSH
37507: LD_INT 45
37509: PUSH
37510: LD_INT 46
37512: PUSH
37513: LD_INT 47
37515: PUSH
37516: LD_INT 82
37518: PUSH
37519: LD_INT 83
37521: PUSH
37522: LD_INT 84
37524: PUSH
37525: LD_INT 85
37527: PUSH
37528: LD_INT 86
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: LD_INT 2
37536: PUSH
37537: LD_INT 6
37539: PUSH
37540: LD_INT 15
37542: PUSH
37543: LD_INT 16
37545: PUSH
37546: LD_INT 7
37548: PUSH
37549: LD_INT 12
37551: PUSH
37552: LD_INT 13
37554: PUSH
37555: LD_INT 10
37557: PUSH
37558: LD_INT 14
37560: PUSH
37561: LD_INT 20
37563: PUSH
37564: LD_INT 21
37566: PUSH
37567: LD_INT 22
37569: PUSH
37570: LD_INT 25
37572: PUSH
37573: LD_INT 32
37575: PUSH
37576: LD_INT 27
37578: PUSH
37579: LD_INT 36
37581: PUSH
37582: LD_INT 69
37584: PUSH
37585: LD_INT 39
37587: PUSH
37588: LD_INT 34
37590: PUSH
37591: LD_INT 40
37593: PUSH
37594: LD_INT 48
37596: PUSH
37597: LD_INT 49
37599: PUSH
37600: LD_INT 50
37602: PUSH
37603: LD_INT 51
37605: PUSH
37606: LD_INT 52
37608: PUSH
37609: LD_INT 53
37611: PUSH
37612: LD_INT 54
37614: PUSH
37615: LD_INT 55
37617: PUSH
37618: LD_INT 56
37620: PUSH
37621: LD_INT 57
37623: PUSH
37624: LD_INT 58
37626: PUSH
37627: LD_INT 59
37629: PUSH
37630: LD_INT 60
37632: PUSH
37633: LD_INT 61
37635: PUSH
37636: LD_INT 62
37638: PUSH
37639: LD_INT 80
37641: PUSH
37642: LD_INT 82
37644: PUSH
37645: LD_INT 83
37647: PUSH
37648: LD_INT 84
37650: PUSH
37651: LD_INT 85
37653: PUSH
37654: LD_INT 86
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: ST_TO_ADDR
37710: GO 38177
37712: LD_INT 2
37714: DOUBLE
37715: EQUAL
37716: IFTRUE 37720
37718: GO 37946
37720: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37721: LD_ADDR_VAR 0 4
37725: PUSH
37726: LD_INT 35
37728: PUSH
37729: LD_INT 45
37731: PUSH
37732: LD_INT 46
37734: PUSH
37735: LD_INT 47
37737: PUSH
37738: LD_INT 82
37740: PUSH
37741: LD_INT 83
37743: PUSH
37744: LD_INT 84
37746: PUSH
37747: LD_INT 85
37749: PUSH
37750: LD_INT 87
37752: PUSH
37753: LD_INT 70
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: LD_INT 11
37761: PUSH
37762: LD_INT 3
37764: PUSH
37765: LD_INT 4
37767: PUSH
37768: LD_INT 5
37770: PUSH
37771: LD_INT 6
37773: PUSH
37774: LD_INT 15
37776: PUSH
37777: LD_INT 18
37779: PUSH
37780: LD_INT 7
37782: PUSH
37783: LD_INT 17
37785: PUSH
37786: LD_INT 8
37788: PUSH
37789: LD_INT 20
37791: PUSH
37792: LD_INT 21
37794: PUSH
37795: LD_INT 22
37797: PUSH
37798: LD_INT 72
37800: PUSH
37801: LD_INT 26
37803: PUSH
37804: LD_INT 69
37806: PUSH
37807: LD_INT 39
37809: PUSH
37810: LD_INT 40
37812: PUSH
37813: LD_INT 41
37815: PUSH
37816: LD_INT 42
37818: PUSH
37819: LD_INT 43
37821: PUSH
37822: LD_INT 48
37824: PUSH
37825: LD_INT 49
37827: PUSH
37828: LD_INT 50
37830: PUSH
37831: LD_INT 51
37833: PUSH
37834: LD_INT 52
37836: PUSH
37837: LD_INT 53
37839: PUSH
37840: LD_INT 54
37842: PUSH
37843: LD_INT 55
37845: PUSH
37846: LD_INT 56
37848: PUSH
37849: LD_INT 60
37851: PUSH
37852: LD_INT 61
37854: PUSH
37855: LD_INT 62
37857: PUSH
37858: LD_INT 66
37860: PUSH
37861: LD_INT 67
37863: PUSH
37864: LD_INT 68
37866: PUSH
37867: LD_INT 81
37869: PUSH
37870: LD_INT 82
37872: PUSH
37873: LD_INT 83
37875: PUSH
37876: LD_INT 84
37878: PUSH
37879: LD_INT 85
37881: PUSH
37882: LD_INT 87
37884: PUSH
37885: LD_INT 88
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: ST_TO_ADDR
37944: GO 38177
37946: LD_INT 3
37948: DOUBLE
37949: EQUAL
37950: IFTRUE 37954
37952: GO 38176
37954: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37955: LD_ADDR_VAR 0 4
37959: PUSH
37960: LD_INT 46
37962: PUSH
37963: LD_INT 47
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: LD_INT 82
37974: PUSH
37975: LD_INT 83
37977: PUSH
37978: LD_INT 84
37980: PUSH
37981: LD_INT 85
37983: PUSH
37984: LD_INT 86
37986: PUSH
37987: LD_INT 11
37989: PUSH
37990: LD_INT 9
37992: PUSH
37993: LD_INT 20
37995: PUSH
37996: LD_INT 19
37998: PUSH
37999: LD_INT 21
38001: PUSH
38002: LD_INT 24
38004: PUSH
38005: LD_INT 22
38007: PUSH
38008: LD_INT 25
38010: PUSH
38011: LD_INT 28
38013: PUSH
38014: LD_INT 29
38016: PUSH
38017: LD_INT 30
38019: PUSH
38020: LD_INT 31
38022: PUSH
38023: LD_INT 37
38025: PUSH
38026: LD_INT 38
38028: PUSH
38029: LD_INT 32
38031: PUSH
38032: LD_INT 27
38034: PUSH
38035: LD_INT 33
38037: PUSH
38038: LD_INT 69
38040: PUSH
38041: LD_INT 39
38043: PUSH
38044: LD_INT 34
38046: PUSH
38047: LD_INT 40
38049: PUSH
38050: LD_INT 71
38052: PUSH
38053: LD_INT 23
38055: PUSH
38056: LD_INT 44
38058: PUSH
38059: LD_INT 48
38061: PUSH
38062: LD_INT 49
38064: PUSH
38065: LD_INT 50
38067: PUSH
38068: LD_INT 51
38070: PUSH
38071: LD_INT 52
38073: PUSH
38074: LD_INT 53
38076: PUSH
38077: LD_INT 54
38079: PUSH
38080: LD_INT 55
38082: PUSH
38083: LD_INT 56
38085: PUSH
38086: LD_INT 57
38088: PUSH
38089: LD_INT 58
38091: PUSH
38092: LD_INT 59
38094: PUSH
38095: LD_INT 63
38097: PUSH
38098: LD_INT 64
38100: PUSH
38101: LD_INT 65
38103: PUSH
38104: LD_INT 82
38106: PUSH
38107: LD_INT 83
38109: PUSH
38110: LD_INT 84
38112: PUSH
38113: LD_INT 85
38115: PUSH
38116: LD_INT 86
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: ST_TO_ADDR
38174: GO 38177
38176: POP
// if state > - 1 and state < 3 then
38177: LD_VAR 0 3
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: GREATER
38186: PUSH
38187: LD_VAR 0 3
38191: PUSH
38192: LD_INT 3
38194: LESS
38195: AND
38196: IFFALSE 38253
// for i in result do
38198: LD_ADDR_VAR 0 5
38202: PUSH
38203: LD_VAR 0 4
38207: PUSH
38208: FOR_IN
38209: IFFALSE 38251
// if GetTech ( i , side ) <> state then
38211: LD_VAR 0 5
38215: PPUSH
38216: LD_VAR 0 1
38220: PPUSH
38221: CALL_OW 321
38225: PUSH
38226: LD_VAR 0 3
38230: NONEQUAL
38231: IFFALSE 38249
// result := result diff i ;
38233: LD_ADDR_VAR 0 4
38237: PUSH
38238: LD_VAR 0 4
38242: PUSH
38243: LD_VAR 0 5
38247: DIFF
38248: ST_TO_ADDR
38249: GO 38208
38251: POP
38252: POP
// end ;
38253: LD_VAR 0 4
38257: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38258: LD_INT 0
38260: PPUSH
38261: PPUSH
38262: PPUSH
// result := true ;
38263: LD_ADDR_VAR 0 3
38267: PUSH
38268: LD_INT 1
38270: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38271: LD_ADDR_VAR 0 5
38275: PUSH
38276: LD_VAR 0 2
38280: PPUSH
38281: CALL_OW 480
38285: ST_TO_ADDR
// if not tmp then
38286: LD_VAR 0 5
38290: NOT
38291: IFFALSE 38295
// exit ;
38293: GO 38344
// for i in tmp do
38295: LD_ADDR_VAR 0 4
38299: PUSH
38300: LD_VAR 0 5
38304: PUSH
38305: FOR_IN
38306: IFFALSE 38342
// if GetTech ( i , side ) <> state_researched then
38308: LD_VAR 0 4
38312: PPUSH
38313: LD_VAR 0 1
38317: PPUSH
38318: CALL_OW 321
38322: PUSH
38323: LD_INT 2
38325: NONEQUAL
38326: IFFALSE 38340
// begin result := false ;
38328: LD_ADDR_VAR 0 3
38332: PUSH
38333: LD_INT 0
38335: ST_TO_ADDR
// exit ;
38336: POP
38337: POP
38338: GO 38344
// end ;
38340: GO 38305
38342: POP
38343: POP
// end ;
38344: LD_VAR 0 3
38348: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38349: LD_INT 0
38351: PPUSH
38352: PPUSH
38353: PPUSH
38354: PPUSH
38355: PPUSH
38356: PPUSH
38357: PPUSH
38358: PPUSH
38359: PPUSH
38360: PPUSH
38361: PPUSH
38362: PPUSH
38363: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38364: LD_VAR 0 1
38368: NOT
38369: PUSH
38370: LD_VAR 0 1
38374: PPUSH
38375: CALL_OW 257
38379: PUSH
38380: LD_INT 9
38382: NONEQUAL
38383: OR
38384: IFFALSE 38388
// exit ;
38386: GO 38961
// side := GetSide ( unit ) ;
38388: LD_ADDR_VAR 0 9
38392: PUSH
38393: LD_VAR 0 1
38397: PPUSH
38398: CALL_OW 255
38402: ST_TO_ADDR
// tech_space := tech_spacanom ;
38403: LD_ADDR_VAR 0 12
38407: PUSH
38408: LD_INT 29
38410: ST_TO_ADDR
// tech_time := tech_taurad ;
38411: LD_ADDR_VAR 0 13
38415: PUSH
38416: LD_INT 28
38418: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38419: LD_ADDR_VAR 0 11
38423: PUSH
38424: LD_VAR 0 1
38428: PPUSH
38429: CALL_OW 310
38433: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38434: LD_VAR 0 11
38438: PPUSH
38439: CALL_OW 247
38443: PUSH
38444: LD_INT 2
38446: EQUAL
38447: IFFALSE 38451
// exit ;
38449: GO 38961
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38451: LD_ADDR_VAR 0 8
38455: PUSH
38456: LD_INT 81
38458: PUSH
38459: LD_VAR 0 9
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 3
38470: PUSH
38471: LD_INT 21
38473: PUSH
38474: LD_INT 3
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PPUSH
38489: CALL_OW 69
38493: ST_TO_ADDR
// if not tmp then
38494: LD_VAR 0 8
38498: NOT
38499: IFFALSE 38503
// exit ;
38501: GO 38961
// if in_unit then
38503: LD_VAR 0 11
38507: IFFALSE 38531
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38509: LD_ADDR_VAR 0 10
38513: PUSH
38514: LD_VAR 0 8
38518: PPUSH
38519: LD_VAR 0 11
38523: PPUSH
38524: CALL_OW 74
38528: ST_TO_ADDR
38529: GO 38551
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38531: LD_ADDR_VAR 0 10
38535: PUSH
38536: LD_VAR 0 8
38540: PPUSH
38541: LD_VAR 0 1
38545: PPUSH
38546: CALL_OW 74
38550: ST_TO_ADDR
// if not enemy then
38551: LD_VAR 0 10
38555: NOT
38556: IFFALSE 38560
// exit ;
38558: GO 38961
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38560: LD_VAR 0 11
38564: PUSH
38565: LD_VAR 0 11
38569: PPUSH
38570: LD_VAR 0 10
38574: PPUSH
38575: CALL_OW 296
38579: PUSH
38580: LD_INT 13
38582: GREATER
38583: AND
38584: PUSH
38585: LD_VAR 0 1
38589: PPUSH
38590: LD_VAR 0 10
38594: PPUSH
38595: CALL_OW 296
38599: PUSH
38600: LD_INT 12
38602: GREATER
38603: OR
38604: IFFALSE 38608
// exit ;
38606: GO 38961
// missile := [ 1 ] ;
38608: LD_ADDR_VAR 0 14
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: EMPTY
38617: LIST
38618: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38619: LD_VAR 0 9
38623: PPUSH
38624: LD_VAR 0 12
38628: PPUSH
38629: CALL_OW 325
38633: IFFALSE 38662
// missile := Insert ( missile , missile + 1 , 2 ) ;
38635: LD_ADDR_VAR 0 14
38639: PUSH
38640: LD_VAR 0 14
38644: PPUSH
38645: LD_VAR 0 14
38649: PUSH
38650: LD_INT 1
38652: PLUS
38653: PPUSH
38654: LD_INT 2
38656: PPUSH
38657: CALL_OW 2
38661: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38662: LD_VAR 0 9
38666: PPUSH
38667: LD_VAR 0 13
38671: PPUSH
38672: CALL_OW 325
38676: PUSH
38677: LD_VAR 0 10
38681: PPUSH
38682: CALL_OW 255
38686: PPUSH
38687: LD_VAR 0 13
38691: PPUSH
38692: CALL_OW 325
38696: NOT
38697: AND
38698: IFFALSE 38727
// missile := Insert ( missile , missile + 1 , 3 ) ;
38700: LD_ADDR_VAR 0 14
38704: PUSH
38705: LD_VAR 0 14
38709: PPUSH
38710: LD_VAR 0 14
38714: PUSH
38715: LD_INT 1
38717: PLUS
38718: PPUSH
38719: LD_INT 3
38721: PPUSH
38722: CALL_OW 2
38726: ST_TO_ADDR
// if missile < 2 then
38727: LD_VAR 0 14
38731: PUSH
38732: LD_INT 2
38734: LESS
38735: IFFALSE 38739
// exit ;
38737: GO 38961
// x := GetX ( enemy ) ;
38739: LD_ADDR_VAR 0 4
38743: PUSH
38744: LD_VAR 0 10
38748: PPUSH
38749: CALL_OW 250
38753: ST_TO_ADDR
// y := GetY ( enemy ) ;
38754: LD_ADDR_VAR 0 5
38758: PUSH
38759: LD_VAR 0 10
38763: PPUSH
38764: CALL_OW 251
38768: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38769: LD_ADDR_VAR 0 6
38773: PUSH
38774: LD_VAR 0 4
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PPUSH
38783: LD_INT 1
38785: PPUSH
38786: CALL_OW 12
38790: PLUS
38791: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38792: LD_ADDR_VAR 0 7
38796: PUSH
38797: LD_VAR 0 5
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PPUSH
38806: LD_INT 1
38808: PPUSH
38809: CALL_OW 12
38813: PLUS
38814: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38815: LD_VAR 0 6
38819: PPUSH
38820: LD_VAR 0 7
38824: PPUSH
38825: CALL_OW 488
38829: NOT
38830: IFFALSE 38852
// begin _x := x ;
38832: LD_ADDR_VAR 0 6
38836: PUSH
38837: LD_VAR 0 4
38841: ST_TO_ADDR
// _y := y ;
38842: LD_ADDR_VAR 0 7
38846: PUSH
38847: LD_VAR 0 5
38851: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38852: LD_ADDR_VAR 0 3
38856: PUSH
38857: LD_INT 1
38859: PPUSH
38860: LD_VAR 0 14
38864: PPUSH
38865: CALL_OW 12
38869: ST_TO_ADDR
// case i of 1 :
38870: LD_VAR 0 3
38874: PUSH
38875: LD_INT 1
38877: DOUBLE
38878: EQUAL
38879: IFTRUE 38883
38881: GO 38900
38883: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38884: LD_VAR 0 1
38888: PPUSH
38889: LD_VAR 0 10
38893: PPUSH
38894: CALL_OW 115
38898: GO 38961
38900: LD_INT 2
38902: DOUBLE
38903: EQUAL
38904: IFTRUE 38908
38906: GO 38930
38908: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38909: LD_VAR 0 1
38913: PPUSH
38914: LD_VAR 0 6
38918: PPUSH
38919: LD_VAR 0 7
38923: PPUSH
38924: CALL_OW 153
38928: GO 38961
38930: LD_INT 3
38932: DOUBLE
38933: EQUAL
38934: IFTRUE 38938
38936: GO 38960
38938: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38939: LD_VAR 0 1
38943: PPUSH
38944: LD_VAR 0 6
38948: PPUSH
38949: LD_VAR 0 7
38953: PPUSH
38954: CALL_OW 154
38958: GO 38961
38960: POP
// end ;
38961: LD_VAR 0 2
38965: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38966: LD_INT 0
38968: PPUSH
38969: PPUSH
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
// if not unit or not building then
38974: LD_VAR 0 1
38978: NOT
38979: PUSH
38980: LD_VAR 0 2
38984: NOT
38985: OR
38986: IFFALSE 38990
// exit ;
38988: GO 39148
// x := GetX ( building ) ;
38990: LD_ADDR_VAR 0 5
38994: PUSH
38995: LD_VAR 0 2
38999: PPUSH
39000: CALL_OW 250
39004: ST_TO_ADDR
// y := GetY ( building ) ;
39005: LD_ADDR_VAR 0 6
39009: PUSH
39010: LD_VAR 0 2
39014: PPUSH
39015: CALL_OW 251
39019: ST_TO_ADDR
// for i = 0 to 5 do
39020: LD_ADDR_VAR 0 4
39024: PUSH
39025: DOUBLE
39026: LD_INT 0
39028: DEC
39029: ST_TO_ADDR
39030: LD_INT 5
39032: PUSH
39033: FOR_TO
39034: IFFALSE 39146
// begin _x := ShiftX ( x , i , 3 ) ;
39036: LD_ADDR_VAR 0 7
39040: PUSH
39041: LD_VAR 0 5
39045: PPUSH
39046: LD_VAR 0 4
39050: PPUSH
39051: LD_INT 3
39053: PPUSH
39054: CALL_OW 272
39058: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39059: LD_ADDR_VAR 0 8
39063: PUSH
39064: LD_VAR 0 6
39068: PPUSH
39069: LD_VAR 0 4
39073: PPUSH
39074: LD_INT 3
39076: PPUSH
39077: CALL_OW 273
39081: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39082: LD_VAR 0 7
39086: PPUSH
39087: LD_VAR 0 8
39091: PPUSH
39092: CALL_OW 488
39096: NOT
39097: IFFALSE 39101
// continue ;
39099: GO 39033
// if HexInfo ( _x , _y ) = 0 then
39101: LD_VAR 0 7
39105: PPUSH
39106: LD_VAR 0 8
39110: PPUSH
39111: CALL_OW 428
39115: PUSH
39116: LD_INT 0
39118: EQUAL
39119: IFFALSE 39144
// begin ComMoveXY ( unit , _x , _y ) ;
39121: LD_VAR 0 1
39125: PPUSH
39126: LD_VAR 0 7
39130: PPUSH
39131: LD_VAR 0 8
39135: PPUSH
39136: CALL_OW 111
// exit ;
39140: POP
39141: POP
39142: GO 39148
// end ; end ;
39144: GO 39033
39146: POP
39147: POP
// end ;
39148: LD_VAR 0 3
39152: RET
// export function ScanBase ( side , base_area ) ; begin
39153: LD_INT 0
39155: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39156: LD_ADDR_VAR 0 3
39160: PUSH
39161: LD_VAR 0 2
39165: PPUSH
39166: LD_INT 81
39168: PUSH
39169: LD_VAR 0 1
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PPUSH
39178: CALL_OW 70
39182: ST_TO_ADDR
// end ;
39183: LD_VAR 0 3
39187: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39188: LD_INT 0
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
// result := false ;
39194: LD_ADDR_VAR 0 2
39198: PUSH
39199: LD_INT 0
39201: ST_TO_ADDR
// side := GetSide ( unit ) ;
39202: LD_ADDR_VAR 0 3
39206: PUSH
39207: LD_VAR 0 1
39211: PPUSH
39212: CALL_OW 255
39216: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39217: LD_ADDR_VAR 0 4
39221: PUSH
39222: LD_VAR 0 1
39226: PPUSH
39227: CALL_OW 248
39231: ST_TO_ADDR
// case nat of 1 :
39232: LD_VAR 0 4
39236: PUSH
39237: LD_INT 1
39239: DOUBLE
39240: EQUAL
39241: IFTRUE 39245
39243: GO 39256
39245: POP
// tech := tech_lassight ; 2 :
39246: LD_ADDR_VAR 0 5
39250: PUSH
39251: LD_INT 12
39253: ST_TO_ADDR
39254: GO 39295
39256: LD_INT 2
39258: DOUBLE
39259: EQUAL
39260: IFTRUE 39264
39262: GO 39275
39264: POP
// tech := tech_mortar ; 3 :
39265: LD_ADDR_VAR 0 5
39269: PUSH
39270: LD_INT 41
39272: ST_TO_ADDR
39273: GO 39295
39275: LD_INT 3
39277: DOUBLE
39278: EQUAL
39279: IFTRUE 39283
39281: GO 39294
39283: POP
// tech := tech_bazooka ; end ;
39284: LD_ADDR_VAR 0 5
39288: PUSH
39289: LD_INT 44
39291: ST_TO_ADDR
39292: GO 39295
39294: POP
// if Researched ( side , tech ) then
39295: LD_VAR 0 3
39299: PPUSH
39300: LD_VAR 0 5
39304: PPUSH
39305: CALL_OW 325
39309: IFFALSE 39336
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39311: LD_ADDR_VAR 0 2
39315: PUSH
39316: LD_INT 5
39318: PUSH
39319: LD_INT 8
39321: PUSH
39322: LD_INT 9
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: LIST
39329: PUSH
39330: LD_VAR 0 4
39334: ARRAY
39335: ST_TO_ADDR
// end ;
39336: LD_VAR 0 2
39340: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39341: LD_INT 0
39343: PPUSH
39344: PPUSH
39345: PPUSH
// if not mines then
39346: LD_VAR 0 2
39350: NOT
39351: IFFALSE 39355
// exit ;
39353: GO 39499
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39355: LD_ADDR_VAR 0 5
39359: PUSH
39360: LD_INT 81
39362: PUSH
39363: LD_VAR 0 1
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 3
39374: PUSH
39375: LD_INT 21
39377: PUSH
39378: LD_INT 3
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PPUSH
39393: CALL_OW 69
39397: ST_TO_ADDR
// for i in mines do
39398: LD_ADDR_VAR 0 4
39402: PUSH
39403: LD_VAR 0 2
39407: PUSH
39408: FOR_IN
39409: IFFALSE 39497
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39411: LD_VAR 0 4
39415: PUSH
39416: LD_INT 1
39418: ARRAY
39419: PPUSH
39420: LD_VAR 0 4
39424: PUSH
39425: LD_INT 2
39427: ARRAY
39428: PPUSH
39429: CALL_OW 458
39433: NOT
39434: IFFALSE 39438
// continue ;
39436: GO 39408
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39438: LD_VAR 0 4
39442: PUSH
39443: LD_INT 1
39445: ARRAY
39446: PPUSH
39447: LD_VAR 0 4
39451: PUSH
39452: LD_INT 2
39454: ARRAY
39455: PPUSH
39456: CALL_OW 428
39460: PUSH
39461: LD_VAR 0 5
39465: IN
39466: IFFALSE 39495
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39468: LD_VAR 0 4
39472: PUSH
39473: LD_INT 1
39475: ARRAY
39476: PPUSH
39477: LD_VAR 0 4
39481: PUSH
39482: LD_INT 2
39484: ARRAY
39485: PPUSH
39486: LD_VAR 0 1
39490: PPUSH
39491: CALL_OW 456
// end ;
39495: GO 39408
39497: POP
39498: POP
// end ;
39499: LD_VAR 0 3
39503: RET
// export function Count ( array ) ; var i ; begin
39504: LD_INT 0
39506: PPUSH
39507: PPUSH
// result := 0 ;
39508: LD_ADDR_VAR 0 2
39512: PUSH
39513: LD_INT 0
39515: ST_TO_ADDR
// for i in array do
39516: LD_ADDR_VAR 0 3
39520: PUSH
39521: LD_VAR 0 1
39525: PUSH
39526: FOR_IN
39527: IFFALSE 39551
// if i then
39529: LD_VAR 0 3
39533: IFFALSE 39549
// result := result + 1 ;
39535: LD_ADDR_VAR 0 2
39539: PUSH
39540: LD_VAR 0 2
39544: PUSH
39545: LD_INT 1
39547: PLUS
39548: ST_TO_ADDR
39549: GO 39526
39551: POP
39552: POP
// end ;
39553: LD_VAR 0 2
39557: RET
// export function IsEmpty ( building ) ; begin
39558: LD_INT 0
39560: PPUSH
// if not building then
39561: LD_VAR 0 1
39565: NOT
39566: IFFALSE 39570
// exit ;
39568: GO 39613
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39570: LD_ADDR_VAR 0 2
39574: PUSH
39575: LD_VAR 0 1
39579: PUSH
39580: LD_INT 22
39582: PUSH
39583: LD_VAR 0 1
39587: PPUSH
39588: CALL_OW 255
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 58
39599: PUSH
39600: EMPTY
39601: LIST
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PPUSH
39607: CALL_OW 69
39611: IN
39612: ST_TO_ADDR
// end ;
39613: LD_VAR 0 2
39617: RET
// export function IsNotFull ( building ) ; begin
39618: LD_INT 0
39620: PPUSH
// if not building then
39621: LD_VAR 0 1
39625: NOT
39626: IFFALSE 39630
// exit ;
39628: GO 39649
// result := UnitsInside ( building ) < 6 ;
39630: LD_ADDR_VAR 0 2
39634: PUSH
39635: LD_VAR 0 1
39639: PPUSH
39640: CALL_OW 313
39644: PUSH
39645: LD_INT 6
39647: LESS
39648: ST_TO_ADDR
// end ;
39649: LD_VAR 0 2
39653: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39654: LD_INT 0
39656: PPUSH
39657: PPUSH
39658: PPUSH
39659: PPUSH
// tmp := [ ] ;
39660: LD_ADDR_VAR 0 3
39664: PUSH
39665: EMPTY
39666: ST_TO_ADDR
// list := [ ] ;
39667: LD_ADDR_VAR 0 5
39671: PUSH
39672: EMPTY
39673: ST_TO_ADDR
// for i = 16 to 25 do
39674: LD_ADDR_VAR 0 4
39678: PUSH
39679: DOUBLE
39680: LD_INT 16
39682: DEC
39683: ST_TO_ADDR
39684: LD_INT 25
39686: PUSH
39687: FOR_TO
39688: IFFALSE 39761
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39690: LD_ADDR_VAR 0 3
39694: PUSH
39695: LD_VAR 0 3
39699: PUSH
39700: LD_INT 22
39702: PUSH
39703: LD_VAR 0 1
39707: PPUSH
39708: CALL_OW 255
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 91
39719: PUSH
39720: LD_VAR 0 1
39724: PUSH
39725: LD_INT 6
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 30
39735: PUSH
39736: LD_VAR 0 4
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: LIST
39749: PUSH
39750: EMPTY
39751: LIST
39752: PPUSH
39753: CALL_OW 69
39757: ADD
39758: ST_TO_ADDR
39759: GO 39687
39761: POP
39762: POP
// for i = 1 to tmp do
39763: LD_ADDR_VAR 0 4
39767: PUSH
39768: DOUBLE
39769: LD_INT 1
39771: DEC
39772: ST_TO_ADDR
39773: LD_VAR 0 3
39777: PUSH
39778: FOR_TO
39779: IFFALSE 39867
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39781: LD_ADDR_VAR 0 5
39785: PUSH
39786: LD_VAR 0 5
39790: PUSH
39791: LD_VAR 0 3
39795: PUSH
39796: LD_VAR 0 4
39800: ARRAY
39801: PPUSH
39802: CALL_OW 266
39806: PUSH
39807: LD_VAR 0 3
39811: PUSH
39812: LD_VAR 0 4
39816: ARRAY
39817: PPUSH
39818: CALL_OW 250
39822: PUSH
39823: LD_VAR 0 3
39827: PUSH
39828: LD_VAR 0 4
39832: ARRAY
39833: PPUSH
39834: CALL_OW 251
39838: PUSH
39839: LD_VAR 0 3
39843: PUSH
39844: LD_VAR 0 4
39848: ARRAY
39849: PPUSH
39850: CALL_OW 254
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: PUSH
39861: EMPTY
39862: LIST
39863: ADD
39864: ST_TO_ADDR
39865: GO 39778
39867: POP
39868: POP
// result := list ;
39869: LD_ADDR_VAR 0 2
39873: PUSH
39874: LD_VAR 0 5
39878: ST_TO_ADDR
// end ;
39879: LD_VAR 0 2
39883: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39884: LD_INT 0
39886: PPUSH
39887: PPUSH
39888: PPUSH
39889: PPUSH
39890: PPUSH
39891: PPUSH
39892: PPUSH
// if not factory then
39893: LD_VAR 0 1
39897: NOT
39898: IFFALSE 39902
// exit ;
39900: GO 40495
// if control = control_apeman then
39902: LD_VAR 0 4
39906: PUSH
39907: LD_INT 5
39909: EQUAL
39910: IFFALSE 40019
// begin tmp := UnitsInside ( factory ) ;
39912: LD_ADDR_VAR 0 8
39916: PUSH
39917: LD_VAR 0 1
39921: PPUSH
39922: CALL_OW 313
39926: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39927: LD_VAR 0 8
39931: PPUSH
39932: LD_INT 25
39934: PUSH
39935: LD_INT 12
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PPUSH
39942: CALL_OW 72
39946: NOT
39947: IFFALSE 39957
// control := control_manual ;
39949: LD_ADDR_VAR 0 4
39953: PUSH
39954: LD_INT 1
39956: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39957: LD_ADDR_VAR 0 8
39961: PUSH
39962: LD_VAR 0 1
39966: PPUSH
39967: CALL 39654 0 1
39971: ST_TO_ADDR
// if tmp then
39972: LD_VAR 0 8
39976: IFFALSE 40019
// begin for i in tmp do
39978: LD_ADDR_VAR 0 7
39982: PUSH
39983: LD_VAR 0 8
39987: PUSH
39988: FOR_IN
39989: IFFALSE 40017
// if i [ 1 ] = b_ext_radio then
39991: LD_VAR 0 7
39995: PUSH
39996: LD_INT 1
39998: ARRAY
39999: PUSH
40000: LD_INT 22
40002: EQUAL
40003: IFFALSE 40015
// begin control := control_remote ;
40005: LD_ADDR_VAR 0 4
40009: PUSH
40010: LD_INT 2
40012: ST_TO_ADDR
// break ;
40013: GO 40017
// end ;
40015: GO 39988
40017: POP
40018: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40019: LD_VAR 0 1
40023: PPUSH
40024: LD_VAR 0 2
40028: PPUSH
40029: LD_VAR 0 3
40033: PPUSH
40034: LD_VAR 0 4
40038: PPUSH
40039: LD_VAR 0 5
40043: PPUSH
40044: CALL_OW 448
40048: IFFALSE 40083
// begin result := [ chassis , engine , control , weapon ] ;
40050: LD_ADDR_VAR 0 6
40054: PUSH
40055: LD_VAR 0 2
40059: PUSH
40060: LD_VAR 0 3
40064: PUSH
40065: LD_VAR 0 4
40069: PUSH
40070: LD_VAR 0 5
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: ST_TO_ADDR
// exit ;
40081: GO 40495
// end ; _chassis := AvailableChassisList ( factory ) ;
40083: LD_ADDR_VAR 0 9
40087: PUSH
40088: LD_VAR 0 1
40092: PPUSH
40093: CALL_OW 475
40097: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40098: LD_ADDR_VAR 0 11
40102: PUSH
40103: LD_VAR 0 1
40107: PPUSH
40108: CALL_OW 476
40112: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40113: LD_ADDR_VAR 0 12
40117: PUSH
40118: LD_VAR 0 1
40122: PPUSH
40123: CALL_OW 477
40127: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40128: LD_ADDR_VAR 0 10
40132: PUSH
40133: LD_VAR 0 1
40137: PPUSH
40138: CALL_OW 478
40142: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40143: LD_VAR 0 9
40147: NOT
40148: PUSH
40149: LD_VAR 0 11
40153: NOT
40154: OR
40155: PUSH
40156: LD_VAR 0 12
40160: NOT
40161: OR
40162: PUSH
40163: LD_VAR 0 10
40167: NOT
40168: OR
40169: IFFALSE 40204
// begin result := [ chassis , engine , control , weapon ] ;
40171: LD_ADDR_VAR 0 6
40175: PUSH
40176: LD_VAR 0 2
40180: PUSH
40181: LD_VAR 0 3
40185: PUSH
40186: LD_VAR 0 4
40190: PUSH
40191: LD_VAR 0 5
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: ST_TO_ADDR
// exit ;
40202: GO 40495
// end ; if not chassis in _chassis then
40204: LD_VAR 0 2
40208: PUSH
40209: LD_VAR 0 9
40213: IN
40214: NOT
40215: IFFALSE 40241
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40217: LD_ADDR_VAR 0 2
40221: PUSH
40222: LD_VAR 0 9
40226: PUSH
40227: LD_INT 1
40229: PPUSH
40230: LD_VAR 0 9
40234: PPUSH
40235: CALL_OW 12
40239: ARRAY
40240: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40241: LD_VAR 0 2
40245: PPUSH
40246: LD_VAR 0 3
40250: PPUSH
40251: CALL 40500 0 2
40255: NOT
40256: IFFALSE 40315
// repeat engine := _engine [ 1 ] ;
40258: LD_ADDR_VAR 0 3
40262: PUSH
40263: LD_VAR 0 11
40267: PUSH
40268: LD_INT 1
40270: ARRAY
40271: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40272: LD_ADDR_VAR 0 11
40276: PUSH
40277: LD_VAR 0 11
40281: PPUSH
40282: LD_INT 1
40284: PPUSH
40285: CALL_OW 3
40289: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40290: LD_VAR 0 2
40294: PPUSH
40295: LD_VAR 0 3
40299: PPUSH
40300: CALL 40500 0 2
40304: PUSH
40305: LD_VAR 0 11
40309: PUSH
40310: EMPTY
40311: EQUAL
40312: OR
40313: IFFALSE 40258
// if not control in _control then
40315: LD_VAR 0 4
40319: PUSH
40320: LD_VAR 0 12
40324: IN
40325: NOT
40326: IFFALSE 40352
// control := _control [ rand ( 1 , _control ) ] ;
40328: LD_ADDR_VAR 0 4
40332: PUSH
40333: LD_VAR 0 12
40337: PUSH
40338: LD_INT 1
40340: PPUSH
40341: LD_VAR 0 12
40345: PPUSH
40346: CALL_OW 12
40350: ARRAY
40351: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40352: LD_VAR 0 2
40356: PPUSH
40357: LD_VAR 0 5
40361: PPUSH
40362: CALL 40720 0 2
40366: NOT
40367: IFFALSE 40426
// repeat weapon := _weapon [ 1 ] ;
40369: LD_ADDR_VAR 0 5
40373: PUSH
40374: LD_VAR 0 10
40378: PUSH
40379: LD_INT 1
40381: ARRAY
40382: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40383: LD_ADDR_VAR 0 10
40387: PUSH
40388: LD_VAR 0 10
40392: PPUSH
40393: LD_INT 1
40395: PPUSH
40396: CALL_OW 3
40400: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40401: LD_VAR 0 2
40405: PPUSH
40406: LD_VAR 0 5
40410: PPUSH
40411: CALL 40720 0 2
40415: PUSH
40416: LD_VAR 0 10
40420: PUSH
40421: EMPTY
40422: EQUAL
40423: OR
40424: IFFALSE 40369
// result := [ ] ;
40426: LD_ADDR_VAR 0 6
40430: PUSH
40431: EMPTY
40432: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40433: LD_VAR 0 1
40437: PPUSH
40438: LD_VAR 0 2
40442: PPUSH
40443: LD_VAR 0 3
40447: PPUSH
40448: LD_VAR 0 4
40452: PPUSH
40453: LD_VAR 0 5
40457: PPUSH
40458: CALL_OW 448
40462: IFFALSE 40495
// result := [ chassis , engine , control , weapon ] ;
40464: LD_ADDR_VAR 0 6
40468: PUSH
40469: LD_VAR 0 2
40473: PUSH
40474: LD_VAR 0 3
40478: PUSH
40479: LD_VAR 0 4
40483: PUSH
40484: LD_VAR 0 5
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: ST_TO_ADDR
// end ;
40495: LD_VAR 0 6
40499: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40500: LD_INT 0
40502: PPUSH
// if not chassis or not engine then
40503: LD_VAR 0 1
40507: NOT
40508: PUSH
40509: LD_VAR 0 2
40513: NOT
40514: OR
40515: IFFALSE 40519
// exit ;
40517: GO 40715
// case engine of engine_solar :
40519: LD_VAR 0 2
40523: PUSH
40524: LD_INT 2
40526: DOUBLE
40527: EQUAL
40528: IFTRUE 40532
40530: GO 40570
40532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40533: LD_ADDR_VAR 0 3
40537: PUSH
40538: LD_INT 11
40540: PUSH
40541: LD_INT 12
40543: PUSH
40544: LD_INT 13
40546: PUSH
40547: LD_INT 14
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: LD_INT 3
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: ST_TO_ADDR
40568: GO 40699
40570: LD_INT 1
40572: DOUBLE
40573: EQUAL
40574: IFTRUE 40578
40576: GO 40640
40578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40579: LD_ADDR_VAR 0 3
40583: PUSH
40584: LD_INT 11
40586: PUSH
40587: LD_INT 12
40589: PUSH
40590: LD_INT 13
40592: PUSH
40593: LD_INT 14
40595: PUSH
40596: LD_INT 1
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: LD_INT 3
40604: PUSH
40605: LD_INT 4
40607: PUSH
40608: LD_INT 5
40610: PUSH
40611: LD_INT 21
40613: PUSH
40614: LD_INT 23
40616: PUSH
40617: LD_INT 22
40619: PUSH
40620: LD_INT 24
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: ST_TO_ADDR
40638: GO 40699
40640: LD_INT 3
40642: DOUBLE
40643: EQUAL
40644: IFTRUE 40648
40646: GO 40698
40648: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40649: LD_ADDR_VAR 0 3
40653: PUSH
40654: LD_INT 13
40656: PUSH
40657: LD_INT 14
40659: PUSH
40660: LD_INT 2
40662: PUSH
40663: LD_INT 3
40665: PUSH
40666: LD_INT 4
40668: PUSH
40669: LD_INT 5
40671: PUSH
40672: LD_INT 21
40674: PUSH
40675: LD_INT 22
40677: PUSH
40678: LD_INT 23
40680: PUSH
40681: LD_INT 24
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: ST_TO_ADDR
40696: GO 40699
40698: POP
// result := ( chassis in result ) ;
40699: LD_ADDR_VAR 0 3
40703: PUSH
40704: LD_VAR 0 1
40708: PUSH
40709: LD_VAR 0 3
40713: IN
40714: ST_TO_ADDR
// end ;
40715: LD_VAR 0 3
40719: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40720: LD_INT 0
40722: PPUSH
// if not chassis or not weapon then
40723: LD_VAR 0 1
40727: NOT
40728: PUSH
40729: LD_VAR 0 2
40733: NOT
40734: OR
40735: IFFALSE 40739
// exit ;
40737: GO 41801
// case weapon of us_machine_gun :
40739: LD_VAR 0 2
40743: PUSH
40744: LD_INT 2
40746: DOUBLE
40747: EQUAL
40748: IFTRUE 40752
40750: GO 40782
40752: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40753: LD_ADDR_VAR 0 3
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: LD_INT 3
40766: PUSH
40767: LD_INT 4
40769: PUSH
40770: LD_INT 5
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: ST_TO_ADDR
40780: GO 41785
40782: LD_INT 3
40784: DOUBLE
40785: EQUAL
40786: IFTRUE 40790
40788: GO 40820
40790: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40791: LD_ADDR_VAR 0 3
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: LD_INT 2
40801: PUSH
40802: LD_INT 3
40804: PUSH
40805: LD_INT 4
40807: PUSH
40808: LD_INT 5
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: ST_TO_ADDR
40818: GO 41785
40820: LD_INT 11
40822: DOUBLE
40823: EQUAL
40824: IFTRUE 40828
40826: GO 40858
40828: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40829: LD_ADDR_VAR 0 3
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: LD_INT 2
40839: PUSH
40840: LD_INT 3
40842: PUSH
40843: LD_INT 4
40845: PUSH
40846: LD_INT 5
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: ST_TO_ADDR
40856: GO 41785
40858: LD_INT 4
40860: DOUBLE
40861: EQUAL
40862: IFTRUE 40866
40864: GO 40892
40866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40867: LD_ADDR_VAR 0 3
40871: PUSH
40872: LD_INT 2
40874: PUSH
40875: LD_INT 3
40877: PUSH
40878: LD_INT 4
40880: PUSH
40881: LD_INT 5
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: ST_TO_ADDR
40890: GO 41785
40892: LD_INT 5
40894: DOUBLE
40895: EQUAL
40896: IFTRUE 40900
40898: GO 40926
40900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40901: LD_ADDR_VAR 0 3
40905: PUSH
40906: LD_INT 2
40908: PUSH
40909: LD_INT 3
40911: PUSH
40912: LD_INT 4
40914: PUSH
40915: LD_INT 5
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: ST_TO_ADDR
40924: GO 41785
40926: LD_INT 9
40928: DOUBLE
40929: EQUAL
40930: IFTRUE 40934
40932: GO 40960
40934: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40935: LD_ADDR_VAR 0 3
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: LD_INT 3
40945: PUSH
40946: LD_INT 4
40948: PUSH
40949: LD_INT 5
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: ST_TO_ADDR
40958: GO 41785
40960: LD_INT 7
40962: DOUBLE
40963: EQUAL
40964: IFTRUE 40968
40966: GO 40994
40968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40969: LD_ADDR_VAR 0 3
40973: PUSH
40974: LD_INT 2
40976: PUSH
40977: LD_INT 3
40979: PUSH
40980: LD_INT 4
40982: PUSH
40983: LD_INT 5
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: ST_TO_ADDR
40992: GO 41785
40994: LD_INT 12
40996: DOUBLE
40997: EQUAL
40998: IFTRUE 41002
41000: GO 41028
41002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41003: LD_ADDR_VAR 0 3
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: LD_INT 3
41013: PUSH
41014: LD_INT 4
41016: PUSH
41017: LD_INT 5
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: ST_TO_ADDR
41026: GO 41785
41028: LD_INT 13
41030: DOUBLE
41031: EQUAL
41032: IFTRUE 41036
41034: GO 41062
41036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41037: LD_ADDR_VAR 0 3
41041: PUSH
41042: LD_INT 2
41044: PUSH
41045: LD_INT 3
41047: PUSH
41048: LD_INT 4
41050: PUSH
41051: LD_INT 5
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: ST_TO_ADDR
41060: GO 41785
41062: LD_INT 14
41064: DOUBLE
41065: EQUAL
41066: IFTRUE 41070
41068: GO 41088
41070: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41071: LD_ADDR_VAR 0 3
41075: PUSH
41076: LD_INT 4
41078: PUSH
41079: LD_INT 5
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: ST_TO_ADDR
41086: GO 41785
41088: LD_INT 6
41090: DOUBLE
41091: EQUAL
41092: IFTRUE 41096
41094: GO 41114
41096: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41097: LD_ADDR_VAR 0 3
41101: PUSH
41102: LD_INT 4
41104: PUSH
41105: LD_INT 5
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: ST_TO_ADDR
41112: GO 41785
41114: LD_INT 10
41116: DOUBLE
41117: EQUAL
41118: IFTRUE 41122
41120: GO 41140
41122: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41123: LD_ADDR_VAR 0 3
41127: PUSH
41128: LD_INT 4
41130: PUSH
41131: LD_INT 5
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: ST_TO_ADDR
41138: GO 41785
41140: LD_INT 22
41142: DOUBLE
41143: EQUAL
41144: IFTRUE 41148
41146: GO 41174
41148: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41149: LD_ADDR_VAR 0 3
41153: PUSH
41154: LD_INT 11
41156: PUSH
41157: LD_INT 12
41159: PUSH
41160: LD_INT 13
41162: PUSH
41163: LD_INT 14
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: ST_TO_ADDR
41172: GO 41785
41174: LD_INT 23
41176: DOUBLE
41177: EQUAL
41178: IFTRUE 41182
41180: GO 41208
41182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41183: LD_ADDR_VAR 0 3
41187: PUSH
41188: LD_INT 11
41190: PUSH
41191: LD_INT 12
41193: PUSH
41194: LD_INT 13
41196: PUSH
41197: LD_INT 14
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: ST_TO_ADDR
41206: GO 41785
41208: LD_INT 24
41210: DOUBLE
41211: EQUAL
41212: IFTRUE 41216
41214: GO 41242
41216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41217: LD_ADDR_VAR 0 3
41221: PUSH
41222: LD_INT 11
41224: PUSH
41225: LD_INT 12
41227: PUSH
41228: LD_INT 13
41230: PUSH
41231: LD_INT 14
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: ST_TO_ADDR
41240: GO 41785
41242: LD_INT 30
41244: DOUBLE
41245: EQUAL
41246: IFTRUE 41250
41248: GO 41276
41250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41251: LD_ADDR_VAR 0 3
41255: PUSH
41256: LD_INT 11
41258: PUSH
41259: LD_INT 12
41261: PUSH
41262: LD_INT 13
41264: PUSH
41265: LD_INT 14
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: ST_TO_ADDR
41274: GO 41785
41276: LD_INT 25
41278: DOUBLE
41279: EQUAL
41280: IFTRUE 41284
41282: GO 41302
41284: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41285: LD_ADDR_VAR 0 3
41289: PUSH
41290: LD_INT 13
41292: PUSH
41293: LD_INT 14
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: ST_TO_ADDR
41300: GO 41785
41302: LD_INT 27
41304: DOUBLE
41305: EQUAL
41306: IFTRUE 41310
41308: GO 41328
41310: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41311: LD_ADDR_VAR 0 3
41315: PUSH
41316: LD_INT 13
41318: PUSH
41319: LD_INT 14
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: ST_TO_ADDR
41326: GO 41785
41328: LD_EXP 53
41332: DOUBLE
41333: EQUAL
41334: IFTRUE 41338
41336: GO 41364
41338: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41339: LD_ADDR_VAR 0 3
41343: PUSH
41344: LD_INT 11
41346: PUSH
41347: LD_INT 12
41349: PUSH
41350: LD_INT 13
41352: PUSH
41353: LD_INT 14
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: ST_TO_ADDR
41362: GO 41785
41364: LD_INT 28
41366: DOUBLE
41367: EQUAL
41368: IFTRUE 41372
41370: GO 41390
41372: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41373: LD_ADDR_VAR 0 3
41377: PUSH
41378: LD_INT 13
41380: PUSH
41381: LD_INT 14
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: ST_TO_ADDR
41388: GO 41785
41390: LD_INT 29
41392: DOUBLE
41393: EQUAL
41394: IFTRUE 41398
41396: GO 41416
41398: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41399: LD_ADDR_VAR 0 3
41403: PUSH
41404: LD_INT 13
41406: PUSH
41407: LD_INT 14
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: ST_TO_ADDR
41414: GO 41785
41416: LD_INT 31
41418: DOUBLE
41419: EQUAL
41420: IFTRUE 41424
41422: GO 41442
41424: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41425: LD_ADDR_VAR 0 3
41429: PUSH
41430: LD_INT 13
41432: PUSH
41433: LD_INT 14
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: ST_TO_ADDR
41440: GO 41785
41442: LD_INT 26
41444: DOUBLE
41445: EQUAL
41446: IFTRUE 41450
41448: GO 41468
41450: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41451: LD_ADDR_VAR 0 3
41455: PUSH
41456: LD_INT 13
41458: PUSH
41459: LD_INT 14
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: ST_TO_ADDR
41466: GO 41785
41468: LD_INT 42
41470: DOUBLE
41471: EQUAL
41472: IFTRUE 41476
41474: GO 41502
41476: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41477: LD_ADDR_VAR 0 3
41481: PUSH
41482: LD_INT 21
41484: PUSH
41485: LD_INT 22
41487: PUSH
41488: LD_INT 23
41490: PUSH
41491: LD_INT 24
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: ST_TO_ADDR
41500: GO 41785
41502: LD_INT 43
41504: DOUBLE
41505: EQUAL
41506: IFTRUE 41510
41508: GO 41536
41510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41511: LD_ADDR_VAR 0 3
41515: PUSH
41516: LD_INT 21
41518: PUSH
41519: LD_INT 22
41521: PUSH
41522: LD_INT 23
41524: PUSH
41525: LD_INT 24
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: ST_TO_ADDR
41534: GO 41785
41536: LD_INT 44
41538: DOUBLE
41539: EQUAL
41540: IFTRUE 41544
41542: GO 41570
41544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41545: LD_ADDR_VAR 0 3
41549: PUSH
41550: LD_INT 21
41552: PUSH
41553: LD_INT 22
41555: PUSH
41556: LD_INT 23
41558: PUSH
41559: LD_INT 24
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: ST_TO_ADDR
41568: GO 41785
41570: LD_INT 45
41572: DOUBLE
41573: EQUAL
41574: IFTRUE 41578
41576: GO 41604
41578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41579: LD_ADDR_VAR 0 3
41583: PUSH
41584: LD_INT 21
41586: PUSH
41587: LD_INT 22
41589: PUSH
41590: LD_INT 23
41592: PUSH
41593: LD_INT 24
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: ST_TO_ADDR
41602: GO 41785
41604: LD_INT 49
41606: DOUBLE
41607: EQUAL
41608: IFTRUE 41612
41610: GO 41638
41612: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41613: LD_ADDR_VAR 0 3
41617: PUSH
41618: LD_INT 21
41620: PUSH
41621: LD_INT 22
41623: PUSH
41624: LD_INT 23
41626: PUSH
41627: LD_INT 24
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: ST_TO_ADDR
41636: GO 41785
41638: LD_INT 51
41640: DOUBLE
41641: EQUAL
41642: IFTRUE 41646
41644: GO 41672
41646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41647: LD_ADDR_VAR 0 3
41651: PUSH
41652: LD_INT 21
41654: PUSH
41655: LD_INT 22
41657: PUSH
41658: LD_INT 23
41660: PUSH
41661: LD_INT 24
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: ST_TO_ADDR
41670: GO 41785
41672: LD_INT 52
41674: DOUBLE
41675: EQUAL
41676: IFTRUE 41680
41678: GO 41706
41680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41681: LD_ADDR_VAR 0 3
41685: PUSH
41686: LD_INT 21
41688: PUSH
41689: LD_INT 22
41691: PUSH
41692: LD_INT 23
41694: PUSH
41695: LD_INT 24
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: ST_TO_ADDR
41704: GO 41785
41706: LD_INT 53
41708: DOUBLE
41709: EQUAL
41710: IFTRUE 41714
41712: GO 41732
41714: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41715: LD_ADDR_VAR 0 3
41719: PUSH
41720: LD_INT 23
41722: PUSH
41723: LD_INT 24
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: ST_TO_ADDR
41730: GO 41785
41732: LD_INT 46
41734: DOUBLE
41735: EQUAL
41736: IFTRUE 41740
41738: GO 41758
41740: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41741: LD_ADDR_VAR 0 3
41745: PUSH
41746: LD_INT 23
41748: PUSH
41749: LD_INT 24
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: ST_TO_ADDR
41756: GO 41785
41758: LD_INT 47
41760: DOUBLE
41761: EQUAL
41762: IFTRUE 41766
41764: GO 41784
41766: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41767: LD_ADDR_VAR 0 3
41771: PUSH
41772: LD_INT 23
41774: PUSH
41775: LD_INT 24
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: ST_TO_ADDR
41782: GO 41785
41784: POP
// result := ( chassis in result ) ;
41785: LD_ADDR_VAR 0 3
41789: PUSH
41790: LD_VAR 0 1
41794: PUSH
41795: LD_VAR 0 3
41799: IN
41800: ST_TO_ADDR
// end ;
41801: LD_VAR 0 3
41805: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41806: LD_INT 0
41808: PPUSH
41809: PPUSH
41810: PPUSH
41811: PPUSH
41812: PPUSH
41813: PPUSH
41814: PPUSH
// result := array ;
41815: LD_ADDR_VAR 0 5
41819: PUSH
41820: LD_VAR 0 1
41824: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41825: LD_VAR 0 1
41829: NOT
41830: PUSH
41831: LD_VAR 0 2
41835: NOT
41836: OR
41837: PUSH
41838: LD_VAR 0 3
41842: NOT
41843: OR
41844: PUSH
41845: LD_VAR 0 2
41849: PUSH
41850: LD_VAR 0 1
41854: GREATER
41855: OR
41856: PUSH
41857: LD_VAR 0 3
41861: PUSH
41862: LD_VAR 0 1
41866: GREATER
41867: OR
41868: IFFALSE 41872
// exit ;
41870: GO 42168
// if direction then
41872: LD_VAR 0 4
41876: IFFALSE 41940
// begin d := 1 ;
41878: LD_ADDR_VAR 0 9
41882: PUSH
41883: LD_INT 1
41885: ST_TO_ADDR
// if i_from > i_to then
41886: LD_VAR 0 2
41890: PUSH
41891: LD_VAR 0 3
41895: GREATER
41896: IFFALSE 41922
// length := ( array - i_from ) + i_to else
41898: LD_ADDR_VAR 0 11
41902: PUSH
41903: LD_VAR 0 1
41907: PUSH
41908: LD_VAR 0 2
41912: MINUS
41913: PUSH
41914: LD_VAR 0 3
41918: PLUS
41919: ST_TO_ADDR
41920: GO 41938
// length := i_to - i_from ;
41922: LD_ADDR_VAR 0 11
41926: PUSH
41927: LD_VAR 0 3
41931: PUSH
41932: LD_VAR 0 2
41936: MINUS
41937: ST_TO_ADDR
// end else
41938: GO 42001
// begin d := - 1 ;
41940: LD_ADDR_VAR 0 9
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: ST_TO_ADDR
// if i_from > i_to then
41949: LD_VAR 0 2
41953: PUSH
41954: LD_VAR 0 3
41958: GREATER
41959: IFFALSE 41979
// length := i_from - i_to else
41961: LD_ADDR_VAR 0 11
41965: PUSH
41966: LD_VAR 0 2
41970: PUSH
41971: LD_VAR 0 3
41975: MINUS
41976: ST_TO_ADDR
41977: GO 42001
// length := ( array - i_to ) + i_from ;
41979: LD_ADDR_VAR 0 11
41983: PUSH
41984: LD_VAR 0 1
41988: PUSH
41989: LD_VAR 0 3
41993: MINUS
41994: PUSH
41995: LD_VAR 0 2
41999: PLUS
42000: ST_TO_ADDR
// end ; if not length then
42001: LD_VAR 0 11
42005: NOT
42006: IFFALSE 42010
// exit ;
42008: GO 42168
// tmp := array ;
42010: LD_ADDR_VAR 0 10
42014: PUSH
42015: LD_VAR 0 1
42019: ST_TO_ADDR
// for i = 1 to length do
42020: LD_ADDR_VAR 0 6
42024: PUSH
42025: DOUBLE
42026: LD_INT 1
42028: DEC
42029: ST_TO_ADDR
42030: LD_VAR 0 11
42034: PUSH
42035: FOR_TO
42036: IFFALSE 42156
// begin for j = 1 to array do
42038: LD_ADDR_VAR 0 7
42042: PUSH
42043: DOUBLE
42044: LD_INT 1
42046: DEC
42047: ST_TO_ADDR
42048: LD_VAR 0 1
42052: PUSH
42053: FOR_TO
42054: IFFALSE 42142
// begin k := j + d ;
42056: LD_ADDR_VAR 0 8
42060: PUSH
42061: LD_VAR 0 7
42065: PUSH
42066: LD_VAR 0 9
42070: PLUS
42071: ST_TO_ADDR
// if k > array then
42072: LD_VAR 0 8
42076: PUSH
42077: LD_VAR 0 1
42081: GREATER
42082: IFFALSE 42092
// k := 1 ;
42084: LD_ADDR_VAR 0 8
42088: PUSH
42089: LD_INT 1
42091: ST_TO_ADDR
// if not k then
42092: LD_VAR 0 8
42096: NOT
42097: IFFALSE 42109
// k := array ;
42099: LD_ADDR_VAR 0 8
42103: PUSH
42104: LD_VAR 0 1
42108: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42109: LD_ADDR_VAR 0 10
42113: PUSH
42114: LD_VAR 0 10
42118: PPUSH
42119: LD_VAR 0 8
42123: PPUSH
42124: LD_VAR 0 1
42128: PUSH
42129: LD_VAR 0 7
42133: ARRAY
42134: PPUSH
42135: CALL_OW 1
42139: ST_TO_ADDR
// end ;
42140: GO 42053
42142: POP
42143: POP
// array := tmp ;
42144: LD_ADDR_VAR 0 1
42148: PUSH
42149: LD_VAR 0 10
42153: ST_TO_ADDR
// end ;
42154: GO 42035
42156: POP
42157: POP
// result := array ;
42158: LD_ADDR_VAR 0 5
42162: PUSH
42163: LD_VAR 0 1
42167: ST_TO_ADDR
// end ;
42168: LD_VAR 0 5
42172: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42173: LD_INT 0
42175: PPUSH
42176: PPUSH
// result := 0 ;
42177: LD_ADDR_VAR 0 3
42181: PUSH
42182: LD_INT 0
42184: ST_TO_ADDR
// if not array or not value in array then
42185: LD_VAR 0 1
42189: NOT
42190: PUSH
42191: LD_VAR 0 2
42195: PUSH
42196: LD_VAR 0 1
42200: IN
42201: NOT
42202: OR
42203: IFFALSE 42207
// exit ;
42205: GO 42261
// for i = 1 to array do
42207: LD_ADDR_VAR 0 4
42211: PUSH
42212: DOUBLE
42213: LD_INT 1
42215: DEC
42216: ST_TO_ADDR
42217: LD_VAR 0 1
42221: PUSH
42222: FOR_TO
42223: IFFALSE 42259
// if value = array [ i ] then
42225: LD_VAR 0 2
42229: PUSH
42230: LD_VAR 0 1
42234: PUSH
42235: LD_VAR 0 4
42239: ARRAY
42240: EQUAL
42241: IFFALSE 42257
// begin result := i ;
42243: LD_ADDR_VAR 0 3
42247: PUSH
42248: LD_VAR 0 4
42252: ST_TO_ADDR
// exit ;
42253: POP
42254: POP
42255: GO 42261
// end ;
42257: GO 42222
42259: POP
42260: POP
// end ;
42261: LD_VAR 0 3
42265: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42266: LD_INT 0
42268: PPUSH
// vc_chassis := chassis ;
42269: LD_ADDR_OWVAR 37
42273: PUSH
42274: LD_VAR 0 1
42278: ST_TO_ADDR
// vc_engine := engine ;
42279: LD_ADDR_OWVAR 39
42283: PUSH
42284: LD_VAR 0 2
42288: ST_TO_ADDR
// vc_control := control ;
42289: LD_ADDR_OWVAR 38
42293: PUSH
42294: LD_VAR 0 3
42298: ST_TO_ADDR
// vc_weapon := weapon ;
42299: LD_ADDR_OWVAR 40
42303: PUSH
42304: LD_VAR 0 4
42308: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42309: LD_ADDR_OWVAR 41
42313: PUSH
42314: LD_VAR 0 5
42318: ST_TO_ADDR
// end ;
42319: LD_VAR 0 6
42323: RET
// export function WantPlant ( unit ) ; var task ; begin
42324: LD_INT 0
42326: PPUSH
42327: PPUSH
// result := false ;
42328: LD_ADDR_VAR 0 2
42332: PUSH
42333: LD_INT 0
42335: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42336: LD_ADDR_VAR 0 3
42340: PUSH
42341: LD_VAR 0 1
42345: PPUSH
42346: CALL_OW 437
42350: ST_TO_ADDR
// if task then
42351: LD_VAR 0 3
42355: IFFALSE 42383
// if task [ 1 ] [ 1 ] = p then
42357: LD_VAR 0 3
42361: PUSH
42362: LD_INT 1
42364: ARRAY
42365: PUSH
42366: LD_INT 1
42368: ARRAY
42369: PUSH
42370: LD_STRING p
42372: EQUAL
42373: IFFALSE 42383
// result := true ;
42375: LD_ADDR_VAR 0 2
42379: PUSH
42380: LD_INT 1
42382: ST_TO_ADDR
// end ;
42383: LD_VAR 0 2
42387: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42388: LD_INT 0
42390: PPUSH
42391: PPUSH
42392: PPUSH
42393: PPUSH
// if pos < 1 then
42394: LD_VAR 0 2
42398: PUSH
42399: LD_INT 1
42401: LESS
42402: IFFALSE 42406
// exit ;
42404: GO 42709
// if pos = 1 then
42406: LD_VAR 0 2
42410: PUSH
42411: LD_INT 1
42413: EQUAL
42414: IFFALSE 42447
// result := Replace ( arr , pos [ 1 ] , value ) else
42416: LD_ADDR_VAR 0 4
42420: PUSH
42421: LD_VAR 0 1
42425: PPUSH
42426: LD_VAR 0 2
42430: PUSH
42431: LD_INT 1
42433: ARRAY
42434: PPUSH
42435: LD_VAR 0 3
42439: PPUSH
42440: CALL_OW 1
42444: ST_TO_ADDR
42445: GO 42709
// begin tmp := arr ;
42447: LD_ADDR_VAR 0 6
42451: PUSH
42452: LD_VAR 0 1
42456: ST_TO_ADDR
// s_arr := [ tmp ] ;
42457: LD_ADDR_VAR 0 7
42461: PUSH
42462: LD_VAR 0 6
42466: PUSH
42467: EMPTY
42468: LIST
42469: ST_TO_ADDR
// for i = 1 to pos - 1 do
42470: LD_ADDR_VAR 0 5
42474: PUSH
42475: DOUBLE
42476: LD_INT 1
42478: DEC
42479: ST_TO_ADDR
42480: LD_VAR 0 2
42484: PUSH
42485: LD_INT 1
42487: MINUS
42488: PUSH
42489: FOR_TO
42490: IFFALSE 42535
// begin tmp := tmp [ pos [ i ] ] ;
42492: LD_ADDR_VAR 0 6
42496: PUSH
42497: LD_VAR 0 6
42501: PUSH
42502: LD_VAR 0 2
42506: PUSH
42507: LD_VAR 0 5
42511: ARRAY
42512: ARRAY
42513: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42514: LD_ADDR_VAR 0 7
42518: PUSH
42519: LD_VAR 0 7
42523: PUSH
42524: LD_VAR 0 6
42528: PUSH
42529: EMPTY
42530: LIST
42531: ADD
42532: ST_TO_ADDR
// end ;
42533: GO 42489
42535: POP
42536: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42537: LD_ADDR_VAR 0 6
42541: PUSH
42542: LD_VAR 0 6
42546: PPUSH
42547: LD_VAR 0 2
42551: PUSH
42552: LD_VAR 0 2
42556: ARRAY
42557: PPUSH
42558: LD_VAR 0 3
42562: PPUSH
42563: CALL_OW 1
42567: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42568: LD_ADDR_VAR 0 7
42572: PUSH
42573: LD_VAR 0 7
42577: PPUSH
42578: LD_VAR 0 7
42582: PPUSH
42583: LD_VAR 0 6
42587: PPUSH
42588: CALL_OW 1
42592: ST_TO_ADDR
// for i = s_arr downto 2 do
42593: LD_ADDR_VAR 0 5
42597: PUSH
42598: DOUBLE
42599: LD_VAR 0 7
42603: INC
42604: ST_TO_ADDR
42605: LD_INT 2
42607: PUSH
42608: FOR_DOWNTO
42609: IFFALSE 42693
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42611: LD_ADDR_VAR 0 6
42615: PUSH
42616: LD_VAR 0 7
42620: PUSH
42621: LD_VAR 0 5
42625: PUSH
42626: LD_INT 1
42628: MINUS
42629: ARRAY
42630: PPUSH
42631: LD_VAR 0 2
42635: PUSH
42636: LD_VAR 0 5
42640: PUSH
42641: LD_INT 1
42643: MINUS
42644: ARRAY
42645: PPUSH
42646: LD_VAR 0 7
42650: PUSH
42651: LD_VAR 0 5
42655: ARRAY
42656: PPUSH
42657: CALL_OW 1
42661: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42662: LD_ADDR_VAR 0 7
42666: PUSH
42667: LD_VAR 0 7
42671: PPUSH
42672: LD_VAR 0 5
42676: PUSH
42677: LD_INT 1
42679: MINUS
42680: PPUSH
42681: LD_VAR 0 6
42685: PPUSH
42686: CALL_OW 1
42690: ST_TO_ADDR
// end ;
42691: GO 42608
42693: POP
42694: POP
// result := s_arr [ 1 ] ;
42695: LD_ADDR_VAR 0 4
42699: PUSH
42700: LD_VAR 0 7
42704: PUSH
42705: LD_INT 1
42707: ARRAY
42708: ST_TO_ADDR
// end ; end ;
42709: LD_VAR 0 4
42713: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42714: LD_INT 0
42716: PPUSH
42717: PPUSH
// if not list then
42718: LD_VAR 0 1
42722: NOT
42723: IFFALSE 42727
// exit ;
42725: GO 42818
// i := list [ pos1 ] ;
42727: LD_ADDR_VAR 0 5
42731: PUSH
42732: LD_VAR 0 1
42736: PUSH
42737: LD_VAR 0 2
42741: ARRAY
42742: ST_TO_ADDR
// if not i then
42743: LD_VAR 0 5
42747: NOT
42748: IFFALSE 42752
// exit ;
42750: GO 42818
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42752: LD_ADDR_VAR 0 1
42756: PUSH
42757: LD_VAR 0 1
42761: PPUSH
42762: LD_VAR 0 2
42766: PPUSH
42767: LD_VAR 0 1
42771: PUSH
42772: LD_VAR 0 3
42776: ARRAY
42777: PPUSH
42778: CALL_OW 1
42782: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42783: LD_ADDR_VAR 0 1
42787: PUSH
42788: LD_VAR 0 1
42792: PPUSH
42793: LD_VAR 0 3
42797: PPUSH
42798: LD_VAR 0 5
42802: PPUSH
42803: CALL_OW 1
42807: ST_TO_ADDR
// result := list ;
42808: LD_ADDR_VAR 0 4
42812: PUSH
42813: LD_VAR 0 1
42817: ST_TO_ADDR
// end ;
42818: LD_VAR 0 4
42822: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42823: LD_INT 0
42825: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42826: LD_ADDR_VAR 0 5
42830: PUSH
42831: LD_VAR 0 1
42835: PPUSH
42836: CALL_OW 250
42840: PPUSH
42841: LD_VAR 0 1
42845: PPUSH
42846: CALL_OW 251
42850: PPUSH
42851: LD_VAR 0 2
42855: PPUSH
42856: LD_VAR 0 3
42860: PPUSH
42861: LD_VAR 0 4
42865: PPUSH
42866: CALL 42876 0 5
42870: ST_TO_ADDR
// end ;
42871: LD_VAR 0 5
42875: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42876: LD_INT 0
42878: PPUSH
42879: PPUSH
42880: PPUSH
42881: PPUSH
// if not list then
42882: LD_VAR 0 3
42886: NOT
42887: IFFALSE 42891
// exit ;
42889: GO 43279
// result := [ ] ;
42891: LD_ADDR_VAR 0 6
42895: PUSH
42896: EMPTY
42897: ST_TO_ADDR
// for i in list do
42898: LD_ADDR_VAR 0 7
42902: PUSH
42903: LD_VAR 0 3
42907: PUSH
42908: FOR_IN
42909: IFFALSE 43111
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42911: LD_ADDR_VAR 0 9
42915: PUSH
42916: LD_VAR 0 7
42920: PPUSH
42921: LD_VAR 0 1
42925: PPUSH
42926: LD_VAR 0 2
42930: PPUSH
42931: CALL_OW 297
42935: ST_TO_ADDR
// if not result then
42936: LD_VAR 0 6
42940: NOT
42941: IFFALSE 42967
// result := [ [ i , tmp ] ] else
42943: LD_ADDR_VAR 0 6
42947: PUSH
42948: LD_VAR 0 7
42952: PUSH
42953: LD_VAR 0 9
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: EMPTY
42963: LIST
42964: ST_TO_ADDR
42965: GO 43109
// begin if result [ result ] [ 2 ] < tmp then
42967: LD_VAR 0 6
42971: PUSH
42972: LD_VAR 0 6
42976: ARRAY
42977: PUSH
42978: LD_INT 2
42980: ARRAY
42981: PUSH
42982: LD_VAR 0 9
42986: LESS
42987: IFFALSE 43029
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42989: LD_ADDR_VAR 0 6
42993: PUSH
42994: LD_VAR 0 6
42998: PPUSH
42999: LD_VAR 0 6
43003: PUSH
43004: LD_INT 1
43006: PLUS
43007: PPUSH
43008: LD_VAR 0 7
43012: PUSH
43013: LD_VAR 0 9
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PPUSH
43022: CALL_OW 2
43026: ST_TO_ADDR
43027: GO 43109
// for j = 1 to result do
43029: LD_ADDR_VAR 0 8
43033: PUSH
43034: DOUBLE
43035: LD_INT 1
43037: DEC
43038: ST_TO_ADDR
43039: LD_VAR 0 6
43043: PUSH
43044: FOR_TO
43045: IFFALSE 43107
// begin if tmp < result [ j ] [ 2 ] then
43047: LD_VAR 0 9
43051: PUSH
43052: LD_VAR 0 6
43056: PUSH
43057: LD_VAR 0 8
43061: ARRAY
43062: PUSH
43063: LD_INT 2
43065: ARRAY
43066: LESS
43067: IFFALSE 43105
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43069: LD_ADDR_VAR 0 6
43073: PUSH
43074: LD_VAR 0 6
43078: PPUSH
43079: LD_VAR 0 8
43083: PPUSH
43084: LD_VAR 0 7
43088: PUSH
43089: LD_VAR 0 9
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PPUSH
43098: CALL_OW 2
43102: ST_TO_ADDR
// break ;
43103: GO 43107
// end ; end ;
43105: GO 43044
43107: POP
43108: POP
// end ; end ;
43109: GO 42908
43111: POP
43112: POP
// if result and not asc then
43113: LD_VAR 0 6
43117: PUSH
43118: LD_VAR 0 4
43122: NOT
43123: AND
43124: IFFALSE 43199
// begin tmp := result ;
43126: LD_ADDR_VAR 0 9
43130: PUSH
43131: LD_VAR 0 6
43135: ST_TO_ADDR
// for i = tmp downto 1 do
43136: LD_ADDR_VAR 0 7
43140: PUSH
43141: DOUBLE
43142: LD_VAR 0 9
43146: INC
43147: ST_TO_ADDR
43148: LD_INT 1
43150: PUSH
43151: FOR_DOWNTO
43152: IFFALSE 43197
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43154: LD_ADDR_VAR 0 6
43158: PUSH
43159: LD_VAR 0 6
43163: PPUSH
43164: LD_VAR 0 9
43168: PUSH
43169: LD_VAR 0 7
43173: MINUS
43174: PUSH
43175: LD_INT 1
43177: PLUS
43178: PPUSH
43179: LD_VAR 0 9
43183: PUSH
43184: LD_VAR 0 7
43188: ARRAY
43189: PPUSH
43190: CALL_OW 1
43194: ST_TO_ADDR
43195: GO 43151
43197: POP
43198: POP
// end ; tmp := [ ] ;
43199: LD_ADDR_VAR 0 9
43203: PUSH
43204: EMPTY
43205: ST_TO_ADDR
// if mode then
43206: LD_VAR 0 5
43210: IFFALSE 43279
// begin for i = 1 to result do
43212: LD_ADDR_VAR 0 7
43216: PUSH
43217: DOUBLE
43218: LD_INT 1
43220: DEC
43221: ST_TO_ADDR
43222: LD_VAR 0 6
43226: PUSH
43227: FOR_TO
43228: IFFALSE 43267
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43230: LD_ADDR_VAR 0 9
43234: PUSH
43235: LD_VAR 0 9
43239: PPUSH
43240: LD_VAR 0 7
43244: PPUSH
43245: LD_VAR 0 6
43249: PUSH
43250: LD_VAR 0 7
43254: ARRAY
43255: PUSH
43256: LD_INT 1
43258: ARRAY
43259: PPUSH
43260: CALL_OW 1
43264: ST_TO_ADDR
43265: GO 43227
43267: POP
43268: POP
// result := tmp ;
43269: LD_ADDR_VAR 0 6
43273: PUSH
43274: LD_VAR 0 9
43278: ST_TO_ADDR
// end ; end ;
43279: LD_VAR 0 6
43283: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43284: LD_INT 0
43286: PPUSH
43287: PPUSH
43288: PPUSH
43289: PPUSH
43290: PPUSH
43291: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43292: LD_ADDR_VAR 0 5
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: ST_TO_ADDR
// if not x or not y then
43314: LD_VAR 0 2
43318: NOT
43319: PUSH
43320: LD_VAR 0 3
43324: NOT
43325: OR
43326: IFFALSE 43330
// exit ;
43328: GO 44982
// if not range then
43330: LD_VAR 0 4
43334: NOT
43335: IFFALSE 43345
// range := 10 ;
43337: LD_ADDR_VAR 0 4
43341: PUSH
43342: LD_INT 10
43344: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43345: LD_ADDR_VAR 0 8
43349: PUSH
43350: LD_INT 81
43352: PUSH
43353: LD_VAR 0 1
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 92
43364: PUSH
43365: LD_VAR 0 2
43369: PUSH
43370: LD_VAR 0 3
43374: PUSH
43375: LD_VAR 0 4
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: LD_INT 21
43391: PUSH
43392: LD_INT 3
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: LIST
43407: PPUSH
43408: CALL_OW 69
43412: ST_TO_ADDR
// if not tmp then
43413: LD_VAR 0 8
43417: NOT
43418: IFFALSE 43422
// exit ;
43420: GO 44982
// for i in tmp do
43422: LD_ADDR_VAR 0 6
43426: PUSH
43427: LD_VAR 0 8
43431: PUSH
43432: FOR_IN
43433: IFFALSE 44957
// begin points := [ 0 , 0 , 0 ] ;
43435: LD_ADDR_VAR 0 9
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: ST_TO_ADDR
// bpoints := 1 ;
43454: LD_ADDR_VAR 0 10
43458: PUSH
43459: LD_INT 1
43461: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43462: LD_VAR 0 6
43466: PPUSH
43467: CALL_OW 247
43471: PUSH
43472: LD_INT 1
43474: DOUBLE
43475: EQUAL
43476: IFTRUE 43480
43478: GO 44058
43480: POP
// begin if GetClass ( i ) = 1 then
43481: LD_VAR 0 6
43485: PPUSH
43486: CALL_OW 257
43490: PUSH
43491: LD_INT 1
43493: EQUAL
43494: IFFALSE 43515
// points := [ 10 , 5 , 3 ] ;
43496: LD_ADDR_VAR 0 9
43500: PUSH
43501: LD_INT 10
43503: PUSH
43504: LD_INT 5
43506: PUSH
43507: LD_INT 3
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: LIST
43514: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43515: LD_VAR 0 6
43519: PPUSH
43520: CALL_OW 257
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: LD_INT 3
43530: PUSH
43531: LD_INT 4
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: LIST
43538: IN
43539: IFFALSE 43560
// points := [ 3 , 2 , 1 ] ;
43541: LD_ADDR_VAR 0 9
43545: PUSH
43546: LD_INT 3
43548: PUSH
43549: LD_INT 2
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43560: LD_VAR 0 6
43564: PPUSH
43565: CALL_OW 257
43569: PUSH
43570: LD_INT 5
43572: EQUAL
43573: IFFALSE 43594
// points := [ 130 , 5 , 2 ] ;
43575: LD_ADDR_VAR 0 9
43579: PUSH
43580: LD_INT 130
43582: PUSH
43583: LD_INT 5
43585: PUSH
43586: LD_INT 2
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: LIST
43593: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43594: LD_VAR 0 6
43598: PPUSH
43599: CALL_OW 257
43603: PUSH
43604: LD_INT 8
43606: EQUAL
43607: IFFALSE 43628
// points := [ 35 , 35 , 30 ] ;
43609: LD_ADDR_VAR 0 9
43613: PUSH
43614: LD_INT 35
43616: PUSH
43617: LD_INT 35
43619: PUSH
43620: LD_INT 30
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: LIST
43627: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43628: LD_VAR 0 6
43632: PPUSH
43633: CALL_OW 257
43637: PUSH
43638: LD_INT 9
43640: EQUAL
43641: IFFALSE 43662
// points := [ 20 , 55 , 40 ] ;
43643: LD_ADDR_VAR 0 9
43647: PUSH
43648: LD_INT 20
43650: PUSH
43651: LD_INT 55
43653: PUSH
43654: LD_INT 40
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43662: LD_VAR 0 6
43666: PPUSH
43667: CALL_OW 257
43671: PUSH
43672: LD_INT 12
43674: PUSH
43675: LD_INT 16
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: IN
43682: IFFALSE 43703
// points := [ 5 , 3 , 2 ] ;
43684: LD_ADDR_VAR 0 9
43688: PUSH
43689: LD_INT 5
43691: PUSH
43692: LD_INT 3
43694: PUSH
43695: LD_INT 2
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: LIST
43702: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43703: LD_VAR 0 6
43707: PPUSH
43708: CALL_OW 257
43712: PUSH
43713: LD_INT 17
43715: EQUAL
43716: IFFALSE 43737
// points := [ 100 , 50 , 75 ] ;
43718: LD_ADDR_VAR 0 9
43722: PUSH
43723: LD_INT 100
43725: PUSH
43726: LD_INT 50
43728: PUSH
43729: LD_INT 75
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43737: LD_VAR 0 6
43741: PPUSH
43742: CALL_OW 257
43746: PUSH
43747: LD_INT 15
43749: EQUAL
43750: IFFALSE 43771
// points := [ 10 , 5 , 3 ] ;
43752: LD_ADDR_VAR 0 9
43756: PUSH
43757: LD_INT 10
43759: PUSH
43760: LD_INT 5
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43771: LD_VAR 0 6
43775: PPUSH
43776: CALL_OW 257
43780: PUSH
43781: LD_INT 14
43783: EQUAL
43784: IFFALSE 43805
// points := [ 10 , 0 , 0 ] ;
43786: LD_ADDR_VAR 0 9
43790: PUSH
43791: LD_INT 10
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43805: LD_VAR 0 6
43809: PPUSH
43810: CALL_OW 257
43814: PUSH
43815: LD_INT 11
43817: EQUAL
43818: IFFALSE 43839
// points := [ 30 , 10 , 5 ] ;
43820: LD_ADDR_VAR 0 9
43824: PUSH
43825: LD_INT 30
43827: PUSH
43828: LD_INT 10
43830: PUSH
43831: LD_INT 5
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43839: LD_VAR 0 1
43843: PPUSH
43844: LD_INT 5
43846: PPUSH
43847: CALL_OW 321
43851: PUSH
43852: LD_INT 2
43854: EQUAL
43855: IFFALSE 43872
// bpoints := bpoints * 1.8 ;
43857: LD_ADDR_VAR 0 10
43861: PUSH
43862: LD_VAR 0 10
43866: PUSH
43867: LD_REAL  1.80000000000000E+0000
43870: MUL
43871: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43872: LD_VAR 0 6
43876: PPUSH
43877: CALL_OW 257
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: LD_INT 3
43890: PUSH
43891: LD_INT 4
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: IN
43900: PUSH
43901: LD_VAR 0 1
43905: PPUSH
43906: LD_INT 51
43908: PPUSH
43909: CALL_OW 321
43913: PUSH
43914: LD_INT 2
43916: EQUAL
43917: AND
43918: IFFALSE 43935
// bpoints := bpoints * 1.2 ;
43920: LD_ADDR_VAR 0 10
43924: PUSH
43925: LD_VAR 0 10
43929: PUSH
43930: LD_REAL  1.20000000000000E+0000
43933: MUL
43934: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43935: LD_VAR 0 6
43939: PPUSH
43940: CALL_OW 257
43944: PUSH
43945: LD_INT 5
43947: PUSH
43948: LD_INT 7
43950: PUSH
43951: LD_INT 9
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: IN
43959: PUSH
43960: LD_VAR 0 1
43964: PPUSH
43965: LD_INT 52
43967: PPUSH
43968: CALL_OW 321
43972: PUSH
43973: LD_INT 2
43975: EQUAL
43976: AND
43977: IFFALSE 43994
// bpoints := bpoints * 1.5 ;
43979: LD_ADDR_VAR 0 10
43983: PUSH
43984: LD_VAR 0 10
43988: PUSH
43989: LD_REAL  1.50000000000000E+0000
43992: MUL
43993: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43994: LD_VAR 0 1
43998: PPUSH
43999: LD_INT 66
44001: PPUSH
44002: CALL_OW 321
44006: PUSH
44007: LD_INT 2
44009: EQUAL
44010: IFFALSE 44027
// bpoints := bpoints * 1.1 ;
44012: LD_ADDR_VAR 0 10
44016: PUSH
44017: LD_VAR 0 10
44021: PUSH
44022: LD_REAL  1.10000000000000E+0000
44025: MUL
44026: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44027: LD_ADDR_VAR 0 10
44031: PUSH
44032: LD_VAR 0 10
44036: PUSH
44037: LD_VAR 0 6
44041: PPUSH
44042: LD_INT 1
44044: PPUSH
44045: CALL_OW 259
44049: PUSH
44050: LD_REAL  1.15000000000000E+0000
44053: MUL
44054: MUL
44055: ST_TO_ADDR
// end ; unit_vehicle :
44056: GO 44886
44058: LD_INT 2
44060: DOUBLE
44061: EQUAL
44062: IFTRUE 44066
44064: GO 44874
44066: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44067: LD_VAR 0 6
44071: PPUSH
44072: CALL_OW 264
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: LD_INT 42
44082: PUSH
44083: LD_INT 24
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: IN
44091: IFFALSE 44112
// points := [ 25 , 5 , 3 ] ;
44093: LD_ADDR_VAR 0 9
44097: PUSH
44098: LD_INT 25
44100: PUSH
44101: LD_INT 5
44103: PUSH
44104: LD_INT 3
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: LIST
44111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44112: LD_VAR 0 6
44116: PPUSH
44117: CALL_OW 264
44121: PUSH
44122: LD_INT 4
44124: PUSH
44125: LD_INT 43
44127: PUSH
44128: LD_INT 25
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: IN
44136: IFFALSE 44157
// points := [ 40 , 15 , 5 ] ;
44138: LD_ADDR_VAR 0 9
44142: PUSH
44143: LD_INT 40
44145: PUSH
44146: LD_INT 15
44148: PUSH
44149: LD_INT 5
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44157: LD_VAR 0 6
44161: PPUSH
44162: CALL_OW 264
44166: PUSH
44167: LD_INT 3
44169: PUSH
44170: LD_INT 23
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: IN
44177: IFFALSE 44198
// points := [ 7 , 25 , 8 ] ;
44179: LD_ADDR_VAR 0 9
44183: PUSH
44184: LD_INT 7
44186: PUSH
44187: LD_INT 25
44189: PUSH
44190: LD_INT 8
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: LIST
44197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44198: LD_VAR 0 6
44202: PPUSH
44203: CALL_OW 264
44207: PUSH
44208: LD_INT 5
44210: PUSH
44211: LD_INT 27
44213: PUSH
44214: LD_INT 44
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: IN
44222: IFFALSE 44243
// points := [ 14 , 50 , 16 ] ;
44224: LD_ADDR_VAR 0 9
44228: PUSH
44229: LD_INT 14
44231: PUSH
44232: LD_INT 50
44234: PUSH
44235: LD_INT 16
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: LIST
44242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44243: LD_VAR 0 6
44247: PPUSH
44248: CALL_OW 264
44252: PUSH
44253: LD_INT 6
44255: PUSH
44256: LD_INT 46
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: IN
44263: IFFALSE 44284
// points := [ 32 , 120 , 70 ] ;
44265: LD_ADDR_VAR 0 9
44269: PUSH
44270: LD_INT 32
44272: PUSH
44273: LD_INT 120
44275: PUSH
44276: LD_INT 70
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44284: LD_VAR 0 6
44288: PPUSH
44289: CALL_OW 264
44293: PUSH
44294: LD_INT 7
44296: PUSH
44297: LD_INT 28
44299: PUSH
44300: LD_INT 45
44302: PUSH
44303: LD_EXP 53
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: IN
44314: IFFALSE 44335
// points := [ 35 , 20 , 45 ] ;
44316: LD_ADDR_VAR 0 9
44320: PUSH
44321: LD_INT 35
44323: PUSH
44324: LD_INT 20
44326: PUSH
44327: LD_INT 45
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: LIST
44334: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44335: LD_VAR 0 6
44339: PPUSH
44340: CALL_OW 264
44344: PUSH
44345: LD_INT 47
44347: PUSH
44348: EMPTY
44349: LIST
44350: IN
44351: IFFALSE 44372
// points := [ 67 , 45 , 75 ] ;
44353: LD_ADDR_VAR 0 9
44357: PUSH
44358: LD_INT 67
44360: PUSH
44361: LD_INT 45
44363: PUSH
44364: LD_INT 75
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44372: LD_VAR 0 6
44376: PPUSH
44377: CALL_OW 264
44381: PUSH
44382: LD_INT 26
44384: PUSH
44385: EMPTY
44386: LIST
44387: IN
44388: IFFALSE 44409
// points := [ 120 , 30 , 80 ] ;
44390: LD_ADDR_VAR 0 9
44394: PUSH
44395: LD_INT 120
44397: PUSH
44398: LD_INT 30
44400: PUSH
44401: LD_INT 80
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: LIST
44408: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44409: LD_VAR 0 6
44413: PPUSH
44414: CALL_OW 264
44418: PUSH
44419: LD_INT 22
44421: PUSH
44422: EMPTY
44423: LIST
44424: IN
44425: IFFALSE 44446
// points := [ 40 , 1 , 1 ] ;
44427: LD_ADDR_VAR 0 9
44431: PUSH
44432: LD_INT 40
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: LIST
44445: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44446: LD_VAR 0 6
44450: PPUSH
44451: CALL_OW 264
44455: PUSH
44456: LD_INT 29
44458: PUSH
44459: EMPTY
44460: LIST
44461: IN
44462: IFFALSE 44483
// points := [ 70 , 200 , 400 ] ;
44464: LD_ADDR_VAR 0 9
44468: PUSH
44469: LD_INT 70
44471: PUSH
44472: LD_INT 200
44474: PUSH
44475: LD_INT 400
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: LIST
44482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44483: LD_VAR 0 6
44487: PPUSH
44488: CALL_OW 264
44492: PUSH
44493: LD_INT 14
44495: PUSH
44496: LD_INT 53
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: IN
44503: IFFALSE 44524
// points := [ 40 , 10 , 20 ] ;
44505: LD_ADDR_VAR 0 9
44509: PUSH
44510: LD_INT 40
44512: PUSH
44513: LD_INT 10
44515: PUSH
44516: LD_INT 20
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: LIST
44523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44524: LD_VAR 0 6
44528: PPUSH
44529: CALL_OW 264
44533: PUSH
44534: LD_INT 9
44536: PUSH
44537: EMPTY
44538: LIST
44539: IN
44540: IFFALSE 44561
// points := [ 5 , 70 , 20 ] ;
44542: LD_ADDR_VAR 0 9
44546: PUSH
44547: LD_INT 5
44549: PUSH
44550: LD_INT 70
44552: PUSH
44553: LD_INT 20
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: LIST
44560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44561: LD_VAR 0 6
44565: PPUSH
44566: CALL_OW 264
44570: PUSH
44571: LD_INT 10
44573: PUSH
44574: EMPTY
44575: LIST
44576: IN
44577: IFFALSE 44598
// points := [ 35 , 110 , 70 ] ;
44579: LD_ADDR_VAR 0 9
44583: PUSH
44584: LD_INT 35
44586: PUSH
44587: LD_INT 110
44589: PUSH
44590: LD_INT 70
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: LIST
44597: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44598: LD_VAR 0 6
44602: PPUSH
44603: CALL_OW 265
44607: PUSH
44608: LD_INT 25
44610: EQUAL
44611: IFFALSE 44632
// points := [ 80 , 65 , 100 ] ;
44613: LD_ADDR_VAR 0 9
44617: PUSH
44618: LD_INT 80
44620: PUSH
44621: LD_INT 65
44623: PUSH
44624: LD_INT 100
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: LIST
44631: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44632: LD_VAR 0 6
44636: PPUSH
44637: CALL_OW 263
44641: PUSH
44642: LD_INT 1
44644: EQUAL
44645: IFFALSE 44680
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44647: LD_ADDR_VAR 0 10
44651: PUSH
44652: LD_VAR 0 10
44656: PUSH
44657: LD_VAR 0 6
44661: PPUSH
44662: CALL_OW 311
44666: PPUSH
44667: LD_INT 3
44669: PPUSH
44670: CALL_OW 259
44674: PUSH
44675: LD_INT 4
44677: MUL
44678: MUL
44679: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44680: LD_VAR 0 6
44684: PPUSH
44685: CALL_OW 263
44689: PUSH
44690: LD_INT 2
44692: EQUAL
44693: IFFALSE 44744
// begin j := IsControledBy ( i ) ;
44695: LD_ADDR_VAR 0 7
44699: PUSH
44700: LD_VAR 0 6
44704: PPUSH
44705: CALL_OW 312
44709: ST_TO_ADDR
// if j then
44710: LD_VAR 0 7
44714: IFFALSE 44744
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44716: LD_ADDR_VAR 0 10
44720: PUSH
44721: LD_VAR 0 10
44725: PUSH
44726: LD_VAR 0 7
44730: PPUSH
44731: LD_INT 3
44733: PPUSH
44734: CALL_OW 259
44738: PUSH
44739: LD_INT 3
44741: MUL
44742: MUL
44743: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44744: LD_VAR 0 6
44748: PPUSH
44749: CALL_OW 264
44753: PUSH
44754: LD_INT 5
44756: PUSH
44757: LD_INT 6
44759: PUSH
44760: LD_INT 46
44762: PUSH
44763: LD_INT 44
44765: PUSH
44766: LD_INT 47
44768: PUSH
44769: LD_INT 45
44771: PUSH
44772: LD_INT 28
44774: PUSH
44775: LD_INT 7
44777: PUSH
44778: LD_INT 27
44780: PUSH
44781: LD_INT 29
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: IN
44796: PUSH
44797: LD_VAR 0 1
44801: PPUSH
44802: LD_INT 52
44804: PPUSH
44805: CALL_OW 321
44809: PUSH
44810: LD_INT 2
44812: EQUAL
44813: AND
44814: IFFALSE 44831
// bpoints := bpoints * 1.2 ;
44816: LD_ADDR_VAR 0 10
44820: PUSH
44821: LD_VAR 0 10
44825: PUSH
44826: LD_REAL  1.20000000000000E+0000
44829: MUL
44830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44831: LD_VAR 0 6
44835: PPUSH
44836: CALL_OW 264
44840: PUSH
44841: LD_INT 6
44843: PUSH
44844: LD_INT 46
44846: PUSH
44847: LD_INT 47
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: LIST
44854: IN
44855: IFFALSE 44872
// bpoints := bpoints * 1.2 ;
44857: LD_ADDR_VAR 0 10
44861: PUSH
44862: LD_VAR 0 10
44866: PUSH
44867: LD_REAL  1.20000000000000E+0000
44870: MUL
44871: ST_TO_ADDR
// end ; unit_building :
44872: GO 44886
44874: LD_INT 3
44876: DOUBLE
44877: EQUAL
44878: IFTRUE 44882
44880: GO 44885
44882: POP
// ; end ;
44883: GO 44886
44885: POP
// for j = 1 to 3 do
44886: LD_ADDR_VAR 0 7
44890: PUSH
44891: DOUBLE
44892: LD_INT 1
44894: DEC
44895: ST_TO_ADDR
44896: LD_INT 3
44898: PUSH
44899: FOR_TO
44900: IFFALSE 44953
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44902: LD_ADDR_VAR 0 5
44906: PUSH
44907: LD_VAR 0 5
44911: PPUSH
44912: LD_VAR 0 7
44916: PPUSH
44917: LD_VAR 0 5
44921: PUSH
44922: LD_VAR 0 7
44926: ARRAY
44927: PUSH
44928: LD_VAR 0 9
44932: PUSH
44933: LD_VAR 0 7
44937: ARRAY
44938: PUSH
44939: LD_VAR 0 10
44943: MUL
44944: PLUS
44945: PPUSH
44946: CALL_OW 1
44950: ST_TO_ADDR
44951: GO 44899
44953: POP
44954: POP
// end ;
44955: GO 43432
44957: POP
44958: POP
// result := Replace ( result , 4 , tmp ) ;
44959: LD_ADDR_VAR 0 5
44963: PUSH
44964: LD_VAR 0 5
44968: PPUSH
44969: LD_INT 4
44971: PPUSH
44972: LD_VAR 0 8
44976: PPUSH
44977: CALL_OW 1
44981: ST_TO_ADDR
// end ;
44982: LD_VAR 0 5
44986: RET
// export function DangerAtRange ( unit , range ) ; begin
44987: LD_INT 0
44989: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44990: LD_ADDR_VAR 0 3
44994: PUSH
44995: LD_VAR 0 1
44999: PPUSH
45000: CALL_OW 255
45004: PPUSH
45005: LD_VAR 0 1
45009: PPUSH
45010: CALL_OW 250
45014: PPUSH
45015: LD_VAR 0 1
45019: PPUSH
45020: CALL_OW 251
45024: PPUSH
45025: LD_VAR 0 2
45029: PPUSH
45030: CALL 43284 0 4
45034: ST_TO_ADDR
// end ;
45035: LD_VAR 0 3
45039: RET
// export function DangerInArea ( side , area ) ; begin
45040: LD_INT 0
45042: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45043: LD_ADDR_VAR 0 3
45047: PUSH
45048: LD_VAR 0 2
45052: PPUSH
45053: LD_INT 81
45055: PUSH
45056: LD_VAR 0 1
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PPUSH
45065: CALL_OW 70
45069: ST_TO_ADDR
// end ;
45070: LD_VAR 0 3
45074: RET
// export function IsExtension ( b ) ; begin
45075: LD_INT 0
45077: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45078: LD_ADDR_VAR 0 2
45082: PUSH
45083: LD_VAR 0 1
45087: PUSH
45088: LD_INT 23
45090: PUSH
45091: LD_INT 20
45093: PUSH
45094: LD_INT 22
45096: PUSH
45097: LD_INT 17
45099: PUSH
45100: LD_INT 24
45102: PUSH
45103: LD_INT 21
45105: PUSH
45106: LD_INT 19
45108: PUSH
45109: LD_INT 16
45111: PUSH
45112: LD_INT 25
45114: PUSH
45115: LD_INT 18
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: IN
45130: ST_TO_ADDR
// end ;
45131: LD_VAR 0 2
45135: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45136: LD_INT 0
45138: PPUSH
45139: PPUSH
45140: PPUSH
// result := [ ] ;
45141: LD_ADDR_VAR 0 4
45145: PUSH
45146: EMPTY
45147: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45148: LD_ADDR_VAR 0 5
45152: PUSH
45153: LD_VAR 0 2
45157: PPUSH
45158: LD_INT 21
45160: PUSH
45161: LD_INT 3
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PPUSH
45168: CALL_OW 70
45172: ST_TO_ADDR
// if not tmp then
45173: LD_VAR 0 5
45177: NOT
45178: IFFALSE 45182
// exit ;
45180: GO 45246
// if checkLink then
45182: LD_VAR 0 3
45186: IFFALSE 45236
// begin for i in tmp do
45188: LD_ADDR_VAR 0 6
45192: PUSH
45193: LD_VAR 0 5
45197: PUSH
45198: FOR_IN
45199: IFFALSE 45234
// if GetBase ( i ) <> base then
45201: LD_VAR 0 6
45205: PPUSH
45206: CALL_OW 274
45210: PUSH
45211: LD_VAR 0 1
45215: NONEQUAL
45216: IFFALSE 45232
// ComLinkToBase ( base , i ) ;
45218: LD_VAR 0 1
45222: PPUSH
45223: LD_VAR 0 6
45227: PPUSH
45228: CALL_OW 169
45232: GO 45198
45234: POP
45235: POP
// end ; result := tmp ;
45236: LD_ADDR_VAR 0 4
45240: PUSH
45241: LD_VAR 0 5
45245: ST_TO_ADDR
// end ;
45246: LD_VAR 0 4
45250: RET
// export function ComComplete ( units , b ) ; var i ; begin
45251: LD_INT 0
45253: PPUSH
45254: PPUSH
// if not units then
45255: LD_VAR 0 1
45259: NOT
45260: IFFALSE 45264
// exit ;
45262: GO 45354
// for i in units do
45264: LD_ADDR_VAR 0 4
45268: PUSH
45269: LD_VAR 0 1
45273: PUSH
45274: FOR_IN
45275: IFFALSE 45352
// if BuildingStatus ( b ) = bs_build then
45277: LD_VAR 0 2
45281: PPUSH
45282: CALL_OW 461
45286: PUSH
45287: LD_INT 1
45289: EQUAL
45290: IFFALSE 45350
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45292: LD_VAR 0 4
45296: PPUSH
45297: LD_STRING h
45299: PUSH
45300: LD_VAR 0 2
45304: PPUSH
45305: CALL_OW 250
45309: PUSH
45310: LD_VAR 0 2
45314: PPUSH
45315: CALL_OW 251
45319: PUSH
45320: LD_VAR 0 2
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: PUSH
45343: EMPTY
45344: LIST
45345: PPUSH
45346: CALL_OW 446
45350: GO 45274
45352: POP
45353: POP
// end ;
45354: LD_VAR 0 3
45358: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45359: LD_INT 0
45361: PPUSH
45362: PPUSH
45363: PPUSH
45364: PPUSH
45365: PPUSH
45366: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45367: LD_VAR 0 1
45371: NOT
45372: PUSH
45373: LD_VAR 0 1
45377: PPUSH
45378: CALL_OW 263
45382: PUSH
45383: LD_INT 2
45385: NONEQUAL
45386: OR
45387: IFFALSE 45391
// exit ;
45389: GO 45707
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45391: LD_ADDR_VAR 0 6
45395: PUSH
45396: LD_INT 22
45398: PUSH
45399: LD_VAR 0 1
45403: PPUSH
45404: CALL_OW 255
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: LD_INT 30
45418: PUSH
45419: LD_INT 36
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 34
45428: PUSH
45429: LD_INT 31
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: LIST
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PPUSH
45445: CALL_OW 69
45449: ST_TO_ADDR
// if not tmp then
45450: LD_VAR 0 6
45454: NOT
45455: IFFALSE 45459
// exit ;
45457: GO 45707
// result := [ ] ;
45459: LD_ADDR_VAR 0 2
45463: PUSH
45464: EMPTY
45465: ST_TO_ADDR
// for i in tmp do
45466: LD_ADDR_VAR 0 3
45470: PUSH
45471: LD_VAR 0 6
45475: PUSH
45476: FOR_IN
45477: IFFALSE 45548
// begin t := UnitsInside ( i ) ;
45479: LD_ADDR_VAR 0 4
45483: PUSH
45484: LD_VAR 0 3
45488: PPUSH
45489: CALL_OW 313
45493: ST_TO_ADDR
// if t then
45494: LD_VAR 0 4
45498: IFFALSE 45546
// for j in t do
45500: LD_ADDR_VAR 0 7
45504: PUSH
45505: LD_VAR 0 4
45509: PUSH
45510: FOR_IN
45511: IFFALSE 45544
// result := Replace ( result , result + 1 , j ) ;
45513: LD_ADDR_VAR 0 2
45517: PUSH
45518: LD_VAR 0 2
45522: PPUSH
45523: LD_VAR 0 2
45527: PUSH
45528: LD_INT 1
45530: PLUS
45531: PPUSH
45532: LD_VAR 0 7
45536: PPUSH
45537: CALL_OW 1
45541: ST_TO_ADDR
45542: GO 45510
45544: POP
45545: POP
// end ;
45546: GO 45476
45548: POP
45549: POP
// if not result then
45550: LD_VAR 0 2
45554: NOT
45555: IFFALSE 45559
// exit ;
45557: GO 45707
// mech := result [ 1 ] ;
45559: LD_ADDR_VAR 0 5
45563: PUSH
45564: LD_VAR 0 2
45568: PUSH
45569: LD_INT 1
45571: ARRAY
45572: ST_TO_ADDR
// if result > 1 then
45573: LD_VAR 0 2
45577: PUSH
45578: LD_INT 1
45580: GREATER
45581: IFFALSE 45693
// begin for i = 2 to result do
45583: LD_ADDR_VAR 0 3
45587: PUSH
45588: DOUBLE
45589: LD_INT 2
45591: DEC
45592: ST_TO_ADDR
45593: LD_VAR 0 2
45597: PUSH
45598: FOR_TO
45599: IFFALSE 45691
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45601: LD_ADDR_VAR 0 4
45605: PUSH
45606: LD_VAR 0 2
45610: PUSH
45611: LD_VAR 0 3
45615: ARRAY
45616: PPUSH
45617: LD_INT 3
45619: PPUSH
45620: CALL_OW 259
45624: PUSH
45625: LD_VAR 0 2
45629: PUSH
45630: LD_VAR 0 3
45634: ARRAY
45635: PPUSH
45636: CALL_OW 432
45640: MINUS
45641: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45642: LD_VAR 0 4
45646: PUSH
45647: LD_VAR 0 5
45651: PPUSH
45652: LD_INT 3
45654: PPUSH
45655: CALL_OW 259
45659: PUSH
45660: LD_VAR 0 5
45664: PPUSH
45665: CALL_OW 432
45669: MINUS
45670: GREATEREQUAL
45671: IFFALSE 45689
// mech := result [ i ] ;
45673: LD_ADDR_VAR 0 5
45677: PUSH
45678: LD_VAR 0 2
45682: PUSH
45683: LD_VAR 0 3
45687: ARRAY
45688: ST_TO_ADDR
// end ;
45689: GO 45598
45691: POP
45692: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45693: LD_VAR 0 1
45697: PPUSH
45698: LD_VAR 0 5
45702: PPUSH
45703: CALL_OW 135
// end ;
45707: LD_VAR 0 2
45711: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45712: LD_INT 0
45714: PPUSH
45715: PPUSH
45716: PPUSH
45717: PPUSH
45718: PPUSH
45719: PPUSH
45720: PPUSH
45721: PPUSH
45722: PPUSH
45723: PPUSH
45724: PPUSH
45725: PPUSH
45726: PPUSH
// result := [ ] ;
45727: LD_ADDR_VAR 0 7
45731: PUSH
45732: EMPTY
45733: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45734: LD_VAR 0 1
45738: PPUSH
45739: CALL_OW 266
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: IN
45754: NOT
45755: IFFALSE 45759
// exit ;
45757: GO 47393
// if name then
45759: LD_VAR 0 3
45763: IFFALSE 45779
// SetBName ( base_dep , name ) ;
45765: LD_VAR 0 1
45769: PPUSH
45770: LD_VAR 0 3
45774: PPUSH
45775: CALL_OW 500
// base := GetBase ( base_dep ) ;
45779: LD_ADDR_VAR 0 15
45783: PUSH
45784: LD_VAR 0 1
45788: PPUSH
45789: CALL_OW 274
45793: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45794: LD_ADDR_VAR 0 16
45798: PUSH
45799: LD_VAR 0 1
45803: PPUSH
45804: CALL_OW 255
45808: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45809: LD_ADDR_VAR 0 17
45813: PUSH
45814: LD_VAR 0 1
45818: PPUSH
45819: CALL_OW 248
45823: ST_TO_ADDR
// if sources then
45824: LD_VAR 0 5
45828: IFFALSE 45875
// for i = 1 to 3 do
45830: LD_ADDR_VAR 0 8
45834: PUSH
45835: DOUBLE
45836: LD_INT 1
45838: DEC
45839: ST_TO_ADDR
45840: LD_INT 3
45842: PUSH
45843: FOR_TO
45844: IFFALSE 45873
// AddResourceType ( base , i , sources [ i ] ) ;
45846: LD_VAR 0 15
45850: PPUSH
45851: LD_VAR 0 8
45855: PPUSH
45856: LD_VAR 0 5
45860: PUSH
45861: LD_VAR 0 8
45865: ARRAY
45866: PPUSH
45867: CALL_OW 276
45871: GO 45843
45873: POP
45874: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45875: LD_ADDR_VAR 0 18
45879: PUSH
45880: LD_VAR 0 15
45884: PPUSH
45885: LD_VAR 0 2
45889: PPUSH
45890: LD_INT 1
45892: PPUSH
45893: CALL 45136 0 3
45897: ST_TO_ADDR
// InitHc ;
45898: CALL_OW 19
// InitUc ;
45902: CALL_OW 18
// uc_side := side ;
45906: LD_ADDR_OWVAR 20
45910: PUSH
45911: LD_VAR 0 16
45915: ST_TO_ADDR
// uc_nation := nation ;
45916: LD_ADDR_OWVAR 21
45920: PUSH
45921: LD_VAR 0 17
45925: ST_TO_ADDR
// if buildings then
45926: LD_VAR 0 18
45930: IFFALSE 47252
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45932: LD_ADDR_VAR 0 19
45936: PUSH
45937: LD_VAR 0 18
45941: PPUSH
45942: LD_INT 2
45944: PUSH
45945: LD_INT 30
45947: PUSH
45948: LD_INT 29
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 30
45957: PUSH
45958: LD_INT 30
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: LIST
45969: PPUSH
45970: CALL_OW 72
45974: ST_TO_ADDR
// if tmp then
45975: LD_VAR 0 19
45979: IFFALSE 46027
// for i in tmp do
45981: LD_ADDR_VAR 0 8
45985: PUSH
45986: LD_VAR 0 19
45990: PUSH
45991: FOR_IN
45992: IFFALSE 46025
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45994: LD_VAR 0 8
45998: PPUSH
45999: CALL_OW 250
46003: PPUSH
46004: LD_VAR 0 8
46008: PPUSH
46009: CALL_OW 251
46013: PPUSH
46014: LD_VAR 0 16
46018: PPUSH
46019: CALL_OW 441
46023: GO 45991
46025: POP
46026: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46027: LD_VAR 0 18
46031: PPUSH
46032: LD_INT 2
46034: PUSH
46035: LD_INT 30
46037: PUSH
46038: LD_INT 32
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 30
46047: PUSH
46048: LD_INT 33
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: LIST
46059: PPUSH
46060: CALL_OW 72
46064: IFFALSE 46152
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46066: LD_ADDR_VAR 0 8
46070: PUSH
46071: LD_VAR 0 18
46075: PPUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 30
46081: PUSH
46082: LD_INT 32
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 30
46091: PUSH
46092: LD_INT 33
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: PPUSH
46104: CALL_OW 72
46108: PUSH
46109: FOR_IN
46110: IFFALSE 46150
// begin if not GetBWeapon ( i ) then
46112: LD_VAR 0 8
46116: PPUSH
46117: CALL_OW 269
46121: NOT
46122: IFFALSE 46148
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46124: LD_VAR 0 8
46128: PPUSH
46129: LD_VAR 0 8
46133: PPUSH
46134: LD_VAR 0 2
46138: PPUSH
46139: CALL 47398 0 2
46143: PPUSH
46144: CALL_OW 431
// end ;
46148: GO 46109
46150: POP
46151: POP
// end ; for i = 1 to personel do
46152: LD_ADDR_VAR 0 8
46156: PUSH
46157: DOUBLE
46158: LD_INT 1
46160: DEC
46161: ST_TO_ADDR
46162: LD_VAR 0 6
46166: PUSH
46167: FOR_TO
46168: IFFALSE 47232
// begin if i > 4 then
46170: LD_VAR 0 8
46174: PUSH
46175: LD_INT 4
46177: GREATER
46178: IFFALSE 46182
// break ;
46180: GO 47232
// case i of 1 :
46182: LD_VAR 0 8
46186: PUSH
46187: LD_INT 1
46189: DOUBLE
46190: EQUAL
46191: IFTRUE 46195
46193: GO 46275
46195: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46196: LD_ADDR_VAR 0 12
46200: PUSH
46201: LD_VAR 0 18
46205: PPUSH
46206: LD_INT 22
46208: PUSH
46209: LD_VAR 0 16
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 58
46220: PUSH
46221: EMPTY
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 30
46229: PUSH
46230: LD_INT 32
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 30
46239: PUSH
46240: LD_INT 4
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 30
46249: PUSH
46250: LD_INT 5
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: PPUSH
46268: CALL_OW 72
46272: ST_TO_ADDR
46273: GO 46497
46275: LD_INT 2
46277: DOUBLE
46278: EQUAL
46279: IFTRUE 46283
46281: GO 46345
46283: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46284: LD_ADDR_VAR 0 12
46288: PUSH
46289: LD_VAR 0 18
46293: PPUSH
46294: LD_INT 22
46296: PUSH
46297: LD_VAR 0 16
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 30
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 30
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: LIST
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PPUSH
46338: CALL_OW 72
46342: ST_TO_ADDR
46343: GO 46497
46345: LD_INT 3
46347: DOUBLE
46348: EQUAL
46349: IFTRUE 46353
46351: GO 46415
46353: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46354: LD_ADDR_VAR 0 12
46358: PUSH
46359: LD_VAR 0 18
46363: PPUSH
46364: LD_INT 22
46366: PUSH
46367: LD_VAR 0 16
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: PUSH
46379: LD_INT 30
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 30
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PPUSH
46408: CALL_OW 72
46412: ST_TO_ADDR
46413: GO 46497
46415: LD_INT 4
46417: DOUBLE
46418: EQUAL
46419: IFTRUE 46423
46421: GO 46496
46423: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46424: LD_ADDR_VAR 0 12
46428: PUSH
46429: LD_VAR 0 18
46433: PPUSH
46434: LD_INT 22
46436: PUSH
46437: LD_VAR 0 16
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: LD_INT 30
46451: PUSH
46452: LD_INT 6
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 30
46461: PUSH
46462: LD_INT 7
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 30
46471: PUSH
46472: LD_INT 8
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PPUSH
46489: CALL_OW 72
46493: ST_TO_ADDR
46494: GO 46497
46496: POP
// if i = 1 then
46497: LD_VAR 0 8
46501: PUSH
46502: LD_INT 1
46504: EQUAL
46505: IFFALSE 46616
// begin tmp := [ ] ;
46507: LD_ADDR_VAR 0 19
46511: PUSH
46512: EMPTY
46513: ST_TO_ADDR
// for j in f do
46514: LD_ADDR_VAR 0 9
46518: PUSH
46519: LD_VAR 0 12
46523: PUSH
46524: FOR_IN
46525: IFFALSE 46598
// if GetBType ( j ) = b_bunker then
46527: LD_VAR 0 9
46531: PPUSH
46532: CALL_OW 266
46536: PUSH
46537: LD_INT 32
46539: EQUAL
46540: IFFALSE 46567
// tmp := Insert ( tmp , 1 , j ) else
46542: LD_ADDR_VAR 0 19
46546: PUSH
46547: LD_VAR 0 19
46551: PPUSH
46552: LD_INT 1
46554: PPUSH
46555: LD_VAR 0 9
46559: PPUSH
46560: CALL_OW 2
46564: ST_TO_ADDR
46565: GO 46596
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46567: LD_ADDR_VAR 0 19
46571: PUSH
46572: LD_VAR 0 19
46576: PPUSH
46577: LD_VAR 0 19
46581: PUSH
46582: LD_INT 1
46584: PLUS
46585: PPUSH
46586: LD_VAR 0 9
46590: PPUSH
46591: CALL_OW 2
46595: ST_TO_ADDR
46596: GO 46524
46598: POP
46599: POP
// if tmp then
46600: LD_VAR 0 19
46604: IFFALSE 46616
// f := tmp ;
46606: LD_ADDR_VAR 0 12
46610: PUSH
46611: LD_VAR 0 19
46615: ST_TO_ADDR
// end ; x := personel [ i ] ;
46616: LD_ADDR_VAR 0 13
46620: PUSH
46621: LD_VAR 0 6
46625: PUSH
46626: LD_VAR 0 8
46630: ARRAY
46631: ST_TO_ADDR
// if x = - 1 then
46632: LD_VAR 0 13
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: EQUAL
46641: IFFALSE 46850
// begin for j in f do
46643: LD_ADDR_VAR 0 9
46647: PUSH
46648: LD_VAR 0 12
46652: PUSH
46653: FOR_IN
46654: IFFALSE 46846
// repeat InitHc ;
46656: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46660: LD_VAR 0 9
46664: PPUSH
46665: CALL_OW 266
46669: PUSH
46670: LD_INT 5
46672: EQUAL
46673: IFFALSE 46743
// begin if UnitsInside ( j ) < 3 then
46675: LD_VAR 0 9
46679: PPUSH
46680: CALL_OW 313
46684: PUSH
46685: LD_INT 3
46687: LESS
46688: IFFALSE 46724
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46690: LD_INT 0
46692: PPUSH
46693: LD_INT 5
46695: PUSH
46696: LD_INT 8
46698: PUSH
46699: LD_INT 9
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: LIST
46706: PUSH
46707: LD_VAR 0 17
46711: ARRAY
46712: PPUSH
46713: LD_VAR 0 4
46717: PPUSH
46718: CALL_OW 380
46722: GO 46741
// PrepareHuman ( false , i , skill ) ;
46724: LD_INT 0
46726: PPUSH
46727: LD_VAR 0 8
46731: PPUSH
46732: LD_VAR 0 4
46736: PPUSH
46737: CALL_OW 380
// end else
46741: GO 46760
// PrepareHuman ( false , i , skill ) ;
46743: LD_INT 0
46745: PPUSH
46746: LD_VAR 0 8
46750: PPUSH
46751: LD_VAR 0 4
46755: PPUSH
46756: CALL_OW 380
// un := CreateHuman ;
46760: LD_ADDR_VAR 0 14
46764: PUSH
46765: CALL_OW 44
46769: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46770: LD_ADDR_VAR 0 7
46774: PUSH
46775: LD_VAR 0 7
46779: PPUSH
46780: LD_INT 1
46782: PPUSH
46783: LD_VAR 0 14
46787: PPUSH
46788: CALL_OW 2
46792: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46793: LD_VAR 0 14
46797: PPUSH
46798: LD_VAR 0 9
46802: PPUSH
46803: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46807: LD_VAR 0 9
46811: PPUSH
46812: CALL_OW 313
46816: PUSH
46817: LD_INT 6
46819: EQUAL
46820: PUSH
46821: LD_VAR 0 9
46825: PPUSH
46826: CALL_OW 266
46830: PUSH
46831: LD_INT 32
46833: PUSH
46834: LD_INT 31
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: IN
46841: OR
46842: IFFALSE 46656
46844: GO 46653
46846: POP
46847: POP
// end else
46848: GO 47230
// for j = 1 to x do
46850: LD_ADDR_VAR 0 9
46854: PUSH
46855: DOUBLE
46856: LD_INT 1
46858: DEC
46859: ST_TO_ADDR
46860: LD_VAR 0 13
46864: PUSH
46865: FOR_TO
46866: IFFALSE 47228
// begin InitHc ;
46868: CALL_OW 19
// if not f then
46872: LD_VAR 0 12
46876: NOT
46877: IFFALSE 46966
// begin PrepareHuman ( false , i , skill ) ;
46879: LD_INT 0
46881: PPUSH
46882: LD_VAR 0 8
46886: PPUSH
46887: LD_VAR 0 4
46891: PPUSH
46892: CALL_OW 380
// un := CreateHuman ;
46896: LD_ADDR_VAR 0 14
46900: PUSH
46901: CALL_OW 44
46905: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46906: LD_ADDR_VAR 0 7
46910: PUSH
46911: LD_VAR 0 7
46915: PPUSH
46916: LD_INT 1
46918: PPUSH
46919: LD_VAR 0 14
46923: PPUSH
46924: CALL_OW 2
46928: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46929: LD_VAR 0 14
46933: PPUSH
46934: LD_VAR 0 1
46938: PPUSH
46939: CALL_OW 250
46943: PPUSH
46944: LD_VAR 0 1
46948: PPUSH
46949: CALL_OW 251
46953: PPUSH
46954: LD_INT 10
46956: PPUSH
46957: LD_INT 0
46959: PPUSH
46960: CALL_OW 50
// continue ;
46964: GO 46865
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46966: LD_VAR 0 12
46970: PUSH
46971: LD_INT 1
46973: ARRAY
46974: PPUSH
46975: CALL_OW 313
46979: PUSH
46980: LD_VAR 0 12
46984: PUSH
46985: LD_INT 1
46987: ARRAY
46988: PPUSH
46989: CALL_OW 266
46993: PUSH
46994: LD_INT 32
46996: PUSH
46997: LD_INT 31
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: IN
47004: AND
47005: PUSH
47006: LD_VAR 0 12
47010: PUSH
47011: LD_INT 1
47013: ARRAY
47014: PPUSH
47015: CALL_OW 313
47019: PUSH
47020: LD_INT 6
47022: EQUAL
47023: OR
47024: IFFALSE 47044
// f := Delete ( f , 1 ) ;
47026: LD_ADDR_VAR 0 12
47030: PUSH
47031: LD_VAR 0 12
47035: PPUSH
47036: LD_INT 1
47038: PPUSH
47039: CALL_OW 3
47043: ST_TO_ADDR
// if not f then
47044: LD_VAR 0 12
47048: NOT
47049: IFFALSE 47067
// begin x := x + 2 ;
47051: LD_ADDR_VAR 0 13
47055: PUSH
47056: LD_VAR 0 13
47060: PUSH
47061: LD_INT 2
47063: PLUS
47064: ST_TO_ADDR
// continue ;
47065: GO 46865
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47067: LD_VAR 0 12
47071: PUSH
47072: LD_INT 1
47074: ARRAY
47075: PPUSH
47076: CALL_OW 266
47080: PUSH
47081: LD_INT 5
47083: EQUAL
47084: IFFALSE 47158
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47086: LD_VAR 0 12
47090: PUSH
47091: LD_INT 1
47093: ARRAY
47094: PPUSH
47095: CALL_OW 313
47099: PUSH
47100: LD_INT 3
47102: LESS
47103: IFFALSE 47139
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47105: LD_INT 0
47107: PPUSH
47108: LD_INT 5
47110: PUSH
47111: LD_INT 8
47113: PUSH
47114: LD_INT 9
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: LIST
47121: PUSH
47122: LD_VAR 0 17
47126: ARRAY
47127: PPUSH
47128: LD_VAR 0 4
47132: PPUSH
47133: CALL_OW 380
47137: GO 47156
// PrepareHuman ( false , i , skill ) ;
47139: LD_INT 0
47141: PPUSH
47142: LD_VAR 0 8
47146: PPUSH
47147: LD_VAR 0 4
47151: PPUSH
47152: CALL_OW 380
// end else
47156: GO 47175
// PrepareHuman ( false , i , skill ) ;
47158: LD_INT 0
47160: PPUSH
47161: LD_VAR 0 8
47165: PPUSH
47166: LD_VAR 0 4
47170: PPUSH
47171: CALL_OW 380
// un := CreateHuman ;
47175: LD_ADDR_VAR 0 14
47179: PUSH
47180: CALL_OW 44
47184: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47185: LD_ADDR_VAR 0 7
47189: PUSH
47190: LD_VAR 0 7
47194: PPUSH
47195: LD_INT 1
47197: PPUSH
47198: LD_VAR 0 14
47202: PPUSH
47203: CALL_OW 2
47207: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47208: LD_VAR 0 14
47212: PPUSH
47213: LD_VAR 0 12
47217: PUSH
47218: LD_INT 1
47220: ARRAY
47221: PPUSH
47222: CALL_OW 52
// end ;
47226: GO 46865
47228: POP
47229: POP
// end ;
47230: GO 46167
47232: POP
47233: POP
// result := result ^ buildings ;
47234: LD_ADDR_VAR 0 7
47238: PUSH
47239: LD_VAR 0 7
47243: PUSH
47244: LD_VAR 0 18
47248: ADD
47249: ST_TO_ADDR
// end else
47250: GO 47393
// begin for i = 1 to personel do
47252: LD_ADDR_VAR 0 8
47256: PUSH
47257: DOUBLE
47258: LD_INT 1
47260: DEC
47261: ST_TO_ADDR
47262: LD_VAR 0 6
47266: PUSH
47267: FOR_TO
47268: IFFALSE 47391
// begin if i > 4 then
47270: LD_VAR 0 8
47274: PUSH
47275: LD_INT 4
47277: GREATER
47278: IFFALSE 47282
// break ;
47280: GO 47391
// x := personel [ i ] ;
47282: LD_ADDR_VAR 0 13
47286: PUSH
47287: LD_VAR 0 6
47291: PUSH
47292: LD_VAR 0 8
47296: ARRAY
47297: ST_TO_ADDR
// if x = - 1 then
47298: LD_VAR 0 13
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: EQUAL
47307: IFFALSE 47311
// continue ;
47309: GO 47267
// PrepareHuman ( false , i , skill ) ;
47311: LD_INT 0
47313: PPUSH
47314: LD_VAR 0 8
47318: PPUSH
47319: LD_VAR 0 4
47323: PPUSH
47324: CALL_OW 380
// un := CreateHuman ;
47328: LD_ADDR_VAR 0 14
47332: PUSH
47333: CALL_OW 44
47337: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47338: LD_VAR 0 14
47342: PPUSH
47343: LD_VAR 0 1
47347: PPUSH
47348: CALL_OW 250
47352: PPUSH
47353: LD_VAR 0 1
47357: PPUSH
47358: CALL_OW 251
47362: PPUSH
47363: LD_INT 10
47365: PPUSH
47366: LD_INT 0
47368: PPUSH
47369: CALL_OW 50
// result := result ^ un ;
47373: LD_ADDR_VAR 0 7
47377: PUSH
47378: LD_VAR 0 7
47382: PUSH
47383: LD_VAR 0 14
47387: ADD
47388: ST_TO_ADDR
// end ;
47389: GO 47267
47391: POP
47392: POP
// end ; end ;
47393: LD_VAR 0 7
47397: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47398: LD_INT 0
47400: PPUSH
47401: PPUSH
47402: PPUSH
47403: PPUSH
47404: PPUSH
47405: PPUSH
47406: PPUSH
47407: PPUSH
47408: PPUSH
47409: PPUSH
47410: PPUSH
47411: PPUSH
47412: PPUSH
47413: PPUSH
47414: PPUSH
47415: PPUSH
// result := false ;
47416: LD_ADDR_VAR 0 3
47420: PUSH
47421: LD_INT 0
47423: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47424: LD_VAR 0 1
47428: NOT
47429: PUSH
47430: LD_VAR 0 1
47434: PPUSH
47435: CALL_OW 266
47439: PUSH
47440: LD_INT 32
47442: PUSH
47443: LD_INT 33
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: IN
47450: NOT
47451: OR
47452: IFFALSE 47456
// exit ;
47454: GO 48565
// nat := GetNation ( tower ) ;
47456: LD_ADDR_VAR 0 12
47460: PUSH
47461: LD_VAR 0 1
47465: PPUSH
47466: CALL_OW 248
47470: ST_TO_ADDR
// side := GetSide ( tower ) ;
47471: LD_ADDR_VAR 0 16
47475: PUSH
47476: LD_VAR 0 1
47480: PPUSH
47481: CALL_OW 255
47485: ST_TO_ADDR
// x := GetX ( tower ) ;
47486: LD_ADDR_VAR 0 10
47490: PUSH
47491: LD_VAR 0 1
47495: PPUSH
47496: CALL_OW 250
47500: ST_TO_ADDR
// y := GetY ( tower ) ;
47501: LD_ADDR_VAR 0 11
47505: PUSH
47506: LD_VAR 0 1
47510: PPUSH
47511: CALL_OW 251
47515: ST_TO_ADDR
// if not x or not y then
47516: LD_VAR 0 10
47520: NOT
47521: PUSH
47522: LD_VAR 0 11
47526: NOT
47527: OR
47528: IFFALSE 47532
// exit ;
47530: GO 48565
// weapon := 0 ;
47532: LD_ADDR_VAR 0 18
47536: PUSH
47537: LD_INT 0
47539: ST_TO_ADDR
// fac_list := [ ] ;
47540: LD_ADDR_VAR 0 17
47544: PUSH
47545: EMPTY
47546: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47547: LD_ADDR_VAR 0 6
47551: PUSH
47552: LD_VAR 0 1
47556: PPUSH
47557: CALL_OW 274
47561: PPUSH
47562: LD_VAR 0 2
47566: PPUSH
47567: LD_INT 0
47569: PPUSH
47570: CALL 45136 0 3
47574: PPUSH
47575: LD_INT 30
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PPUSH
47585: CALL_OW 72
47589: ST_TO_ADDR
// if not factories then
47590: LD_VAR 0 6
47594: NOT
47595: IFFALSE 47599
// exit ;
47597: GO 48565
// for i in factories do
47599: LD_ADDR_VAR 0 8
47603: PUSH
47604: LD_VAR 0 6
47608: PUSH
47609: FOR_IN
47610: IFFALSE 47635
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47612: LD_ADDR_VAR 0 17
47616: PUSH
47617: LD_VAR 0 17
47621: PUSH
47622: LD_VAR 0 8
47626: PPUSH
47627: CALL_OW 478
47631: UNION
47632: ST_TO_ADDR
47633: GO 47609
47635: POP
47636: POP
// if not fac_list then
47637: LD_VAR 0 17
47641: NOT
47642: IFFALSE 47646
// exit ;
47644: GO 48565
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47646: LD_ADDR_VAR 0 5
47650: PUSH
47651: LD_INT 4
47653: PUSH
47654: LD_INT 5
47656: PUSH
47657: LD_INT 9
47659: PUSH
47660: LD_INT 10
47662: PUSH
47663: LD_INT 6
47665: PUSH
47666: LD_INT 7
47668: PUSH
47669: LD_INT 11
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 27
47683: PUSH
47684: LD_INT 28
47686: PUSH
47687: LD_INT 26
47689: PUSH
47690: LD_INT 30
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 43
47701: PUSH
47702: LD_INT 44
47704: PUSH
47705: LD_INT 46
47707: PUSH
47708: LD_INT 45
47710: PUSH
47711: LD_INT 47
47713: PUSH
47714: LD_INT 49
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: LIST
47729: PUSH
47730: LD_VAR 0 12
47734: ARRAY
47735: ST_TO_ADDR
// list := list isect fac_list ;
47736: LD_ADDR_VAR 0 5
47740: PUSH
47741: LD_VAR 0 5
47745: PUSH
47746: LD_VAR 0 17
47750: ISECT
47751: ST_TO_ADDR
// if not list then
47752: LD_VAR 0 5
47756: NOT
47757: IFFALSE 47761
// exit ;
47759: GO 48565
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47761: LD_VAR 0 12
47765: PUSH
47766: LD_INT 3
47768: EQUAL
47769: PUSH
47770: LD_INT 49
47772: PUSH
47773: LD_VAR 0 5
47777: IN
47778: AND
47779: PUSH
47780: LD_INT 31
47782: PPUSH
47783: LD_VAR 0 16
47787: PPUSH
47788: CALL_OW 321
47792: PUSH
47793: LD_INT 2
47795: EQUAL
47796: AND
47797: IFFALSE 47857
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47799: LD_INT 22
47801: PUSH
47802: LD_VAR 0 16
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 35
47813: PUSH
47814: LD_INT 49
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 91
47823: PUSH
47824: LD_VAR 0 1
47828: PUSH
47829: LD_INT 10
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: LIST
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: LIST
47841: PPUSH
47842: CALL_OW 69
47846: NOT
47847: IFFALSE 47857
// weapon := ru_time_lapser ;
47849: LD_ADDR_VAR 0 18
47853: PUSH
47854: LD_INT 49
47856: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47857: LD_VAR 0 12
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: IN
47872: PUSH
47873: LD_INT 11
47875: PUSH
47876: LD_VAR 0 5
47880: IN
47881: PUSH
47882: LD_INT 30
47884: PUSH
47885: LD_VAR 0 5
47889: IN
47890: OR
47891: AND
47892: PUSH
47893: LD_INT 6
47895: PPUSH
47896: LD_VAR 0 16
47900: PPUSH
47901: CALL_OW 321
47905: PUSH
47906: LD_INT 2
47908: EQUAL
47909: AND
47910: IFFALSE 48075
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47912: LD_INT 22
47914: PUSH
47915: LD_VAR 0 16
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: PUSH
47927: LD_INT 35
47929: PUSH
47930: LD_INT 11
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 35
47939: PUSH
47940: LD_INT 30
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 91
47954: PUSH
47955: LD_VAR 0 1
47959: PUSH
47960: LD_INT 18
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: PPUSH
47973: CALL_OW 69
47977: NOT
47978: PUSH
47979: LD_INT 22
47981: PUSH
47982: LD_VAR 0 16
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: LD_INT 30
47996: PUSH
47997: LD_INT 32
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 30
48006: PUSH
48007: LD_INT 33
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 91
48021: PUSH
48022: LD_VAR 0 1
48026: PUSH
48027: LD_INT 12
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: LIST
48039: PUSH
48040: EMPTY
48041: LIST
48042: PPUSH
48043: CALL_OW 69
48047: PUSH
48048: LD_INT 2
48050: GREATER
48051: AND
48052: IFFALSE 48075
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48054: LD_ADDR_VAR 0 18
48058: PUSH
48059: LD_INT 11
48061: PUSH
48062: LD_INT 30
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_VAR 0 12
48073: ARRAY
48074: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48075: LD_VAR 0 18
48079: NOT
48080: PUSH
48081: LD_INT 40
48083: PPUSH
48084: LD_VAR 0 16
48088: PPUSH
48089: CALL_OW 321
48093: PUSH
48094: LD_INT 2
48096: EQUAL
48097: AND
48098: PUSH
48099: LD_INT 7
48101: PUSH
48102: LD_VAR 0 5
48106: IN
48107: PUSH
48108: LD_INT 28
48110: PUSH
48111: LD_VAR 0 5
48115: IN
48116: OR
48117: PUSH
48118: LD_INT 45
48120: PUSH
48121: LD_VAR 0 5
48125: IN
48126: OR
48127: AND
48128: IFFALSE 48382
// begin hex := GetHexInfo ( x , y ) ;
48130: LD_ADDR_VAR 0 4
48134: PUSH
48135: LD_VAR 0 10
48139: PPUSH
48140: LD_VAR 0 11
48144: PPUSH
48145: CALL_OW 546
48149: ST_TO_ADDR
// if hex [ 1 ] then
48150: LD_VAR 0 4
48154: PUSH
48155: LD_INT 1
48157: ARRAY
48158: IFFALSE 48162
// exit ;
48160: GO 48565
// height := hex [ 2 ] ;
48162: LD_ADDR_VAR 0 15
48166: PUSH
48167: LD_VAR 0 4
48171: PUSH
48172: LD_INT 2
48174: ARRAY
48175: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48176: LD_ADDR_VAR 0 14
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: LD_INT 3
48189: PUSH
48190: LD_INT 5
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: ST_TO_ADDR
// for i in tmp do
48199: LD_ADDR_VAR 0 8
48203: PUSH
48204: LD_VAR 0 14
48208: PUSH
48209: FOR_IN
48210: IFFALSE 48380
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48212: LD_ADDR_VAR 0 9
48216: PUSH
48217: LD_VAR 0 10
48221: PPUSH
48222: LD_VAR 0 8
48226: PPUSH
48227: LD_INT 5
48229: PPUSH
48230: CALL_OW 272
48234: PUSH
48235: LD_VAR 0 11
48239: PPUSH
48240: LD_VAR 0 8
48244: PPUSH
48245: LD_INT 5
48247: PPUSH
48248: CALL_OW 273
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48257: LD_VAR 0 9
48261: PUSH
48262: LD_INT 1
48264: ARRAY
48265: PPUSH
48266: LD_VAR 0 9
48270: PUSH
48271: LD_INT 2
48273: ARRAY
48274: PPUSH
48275: CALL_OW 488
48279: IFFALSE 48378
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48281: LD_ADDR_VAR 0 4
48285: PUSH
48286: LD_VAR 0 9
48290: PUSH
48291: LD_INT 1
48293: ARRAY
48294: PPUSH
48295: LD_VAR 0 9
48299: PUSH
48300: LD_INT 2
48302: ARRAY
48303: PPUSH
48304: CALL_OW 546
48308: ST_TO_ADDR
// if hex [ 1 ] then
48309: LD_VAR 0 4
48313: PUSH
48314: LD_INT 1
48316: ARRAY
48317: IFFALSE 48321
// continue ;
48319: GO 48209
// h := hex [ 2 ] ;
48321: LD_ADDR_VAR 0 13
48325: PUSH
48326: LD_VAR 0 4
48330: PUSH
48331: LD_INT 2
48333: ARRAY
48334: ST_TO_ADDR
// if h + 7 < height then
48335: LD_VAR 0 13
48339: PUSH
48340: LD_INT 7
48342: PLUS
48343: PUSH
48344: LD_VAR 0 15
48348: LESS
48349: IFFALSE 48378
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48351: LD_ADDR_VAR 0 18
48355: PUSH
48356: LD_INT 7
48358: PUSH
48359: LD_INT 28
48361: PUSH
48362: LD_INT 45
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: LIST
48369: PUSH
48370: LD_VAR 0 12
48374: ARRAY
48375: ST_TO_ADDR
// break ;
48376: GO 48380
// end ; end ; end ;
48378: GO 48209
48380: POP
48381: POP
// end ; if not weapon then
48382: LD_VAR 0 18
48386: NOT
48387: IFFALSE 48447
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48389: LD_ADDR_VAR 0 5
48393: PUSH
48394: LD_VAR 0 5
48398: PUSH
48399: LD_INT 11
48401: PUSH
48402: LD_INT 30
48404: PUSH
48405: LD_INT 49
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: LIST
48412: DIFF
48413: ST_TO_ADDR
// if not list then
48414: LD_VAR 0 5
48418: NOT
48419: IFFALSE 48423
// exit ;
48421: GO 48565
// weapon := list [ rand ( 1 , list ) ] ;
48423: LD_ADDR_VAR 0 18
48427: PUSH
48428: LD_VAR 0 5
48432: PUSH
48433: LD_INT 1
48435: PPUSH
48436: LD_VAR 0 5
48440: PPUSH
48441: CALL_OW 12
48445: ARRAY
48446: ST_TO_ADDR
// end ; if weapon then
48447: LD_VAR 0 18
48451: IFFALSE 48565
// begin tmp := CostOfWeapon ( weapon ) ;
48453: LD_ADDR_VAR 0 14
48457: PUSH
48458: LD_VAR 0 18
48462: PPUSH
48463: CALL_OW 451
48467: ST_TO_ADDR
// j := GetBase ( tower ) ;
48468: LD_ADDR_VAR 0 9
48472: PUSH
48473: LD_VAR 0 1
48477: PPUSH
48478: CALL_OW 274
48482: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48483: LD_VAR 0 9
48487: PPUSH
48488: LD_INT 1
48490: PPUSH
48491: CALL_OW 275
48495: PUSH
48496: LD_VAR 0 14
48500: PUSH
48501: LD_INT 1
48503: ARRAY
48504: GREATEREQUAL
48505: PUSH
48506: LD_VAR 0 9
48510: PPUSH
48511: LD_INT 2
48513: PPUSH
48514: CALL_OW 275
48518: PUSH
48519: LD_VAR 0 14
48523: PUSH
48524: LD_INT 2
48526: ARRAY
48527: GREATEREQUAL
48528: AND
48529: PUSH
48530: LD_VAR 0 9
48534: PPUSH
48535: LD_INT 3
48537: PPUSH
48538: CALL_OW 275
48542: PUSH
48543: LD_VAR 0 14
48547: PUSH
48548: LD_INT 3
48550: ARRAY
48551: GREATEREQUAL
48552: AND
48553: IFFALSE 48565
// result := weapon ;
48555: LD_ADDR_VAR 0 3
48559: PUSH
48560: LD_VAR 0 18
48564: ST_TO_ADDR
// end ; end ;
48565: LD_VAR 0 3
48569: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48570: LD_INT 0
48572: PPUSH
48573: PPUSH
// result := true ;
48574: LD_ADDR_VAR 0 3
48578: PUSH
48579: LD_INT 1
48581: ST_TO_ADDR
// if array1 = array2 then
48582: LD_VAR 0 1
48586: PUSH
48587: LD_VAR 0 2
48591: EQUAL
48592: IFFALSE 48652
// begin for i = 1 to array1 do
48594: LD_ADDR_VAR 0 4
48598: PUSH
48599: DOUBLE
48600: LD_INT 1
48602: DEC
48603: ST_TO_ADDR
48604: LD_VAR 0 1
48608: PUSH
48609: FOR_TO
48610: IFFALSE 48648
// if array1 [ i ] <> array2 [ i ] then
48612: LD_VAR 0 1
48616: PUSH
48617: LD_VAR 0 4
48621: ARRAY
48622: PUSH
48623: LD_VAR 0 2
48627: PUSH
48628: LD_VAR 0 4
48632: ARRAY
48633: NONEQUAL
48634: IFFALSE 48646
// begin result := false ;
48636: LD_ADDR_VAR 0 3
48640: PUSH
48641: LD_INT 0
48643: ST_TO_ADDR
// break ;
48644: GO 48648
// end ;
48646: GO 48609
48648: POP
48649: POP
// end else
48650: GO 48660
// result := false ;
48652: LD_ADDR_VAR 0 3
48656: PUSH
48657: LD_INT 0
48659: ST_TO_ADDR
// end ;
48660: LD_VAR 0 3
48664: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48665: LD_INT 0
48667: PPUSH
48668: PPUSH
// if not array1 or not array2 then
48669: LD_VAR 0 1
48673: NOT
48674: PUSH
48675: LD_VAR 0 2
48679: NOT
48680: OR
48681: IFFALSE 48685
// exit ;
48683: GO 48749
// result := true ;
48685: LD_ADDR_VAR 0 3
48689: PUSH
48690: LD_INT 1
48692: ST_TO_ADDR
// for i = 1 to array1 do
48693: LD_ADDR_VAR 0 4
48697: PUSH
48698: DOUBLE
48699: LD_INT 1
48701: DEC
48702: ST_TO_ADDR
48703: LD_VAR 0 1
48707: PUSH
48708: FOR_TO
48709: IFFALSE 48747
// if array1 [ i ] <> array2 [ i ] then
48711: LD_VAR 0 1
48715: PUSH
48716: LD_VAR 0 4
48720: ARRAY
48721: PUSH
48722: LD_VAR 0 2
48726: PUSH
48727: LD_VAR 0 4
48731: ARRAY
48732: NONEQUAL
48733: IFFALSE 48745
// begin result := false ;
48735: LD_ADDR_VAR 0 3
48739: PUSH
48740: LD_INT 0
48742: ST_TO_ADDR
// break ;
48743: GO 48747
// end ;
48745: GO 48708
48747: POP
48748: POP
// end ;
48749: LD_VAR 0 3
48753: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48754: LD_INT 0
48756: PPUSH
48757: PPUSH
48758: PPUSH
// pom := GetBase ( fac ) ;
48759: LD_ADDR_VAR 0 5
48763: PUSH
48764: LD_VAR 0 1
48768: PPUSH
48769: CALL_OW 274
48773: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48774: LD_ADDR_VAR 0 4
48778: PUSH
48779: LD_VAR 0 2
48783: PUSH
48784: LD_INT 1
48786: ARRAY
48787: PPUSH
48788: LD_VAR 0 2
48792: PUSH
48793: LD_INT 2
48795: ARRAY
48796: PPUSH
48797: LD_VAR 0 2
48801: PUSH
48802: LD_INT 3
48804: ARRAY
48805: PPUSH
48806: LD_VAR 0 2
48810: PUSH
48811: LD_INT 4
48813: ARRAY
48814: PPUSH
48815: CALL_OW 449
48819: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48820: LD_ADDR_VAR 0 3
48824: PUSH
48825: LD_VAR 0 5
48829: PPUSH
48830: LD_INT 1
48832: PPUSH
48833: CALL_OW 275
48837: PUSH
48838: LD_VAR 0 4
48842: PUSH
48843: LD_INT 1
48845: ARRAY
48846: GREATEREQUAL
48847: PUSH
48848: LD_VAR 0 5
48852: PPUSH
48853: LD_INT 2
48855: PPUSH
48856: CALL_OW 275
48860: PUSH
48861: LD_VAR 0 4
48865: PUSH
48866: LD_INT 2
48868: ARRAY
48869: GREATEREQUAL
48870: AND
48871: PUSH
48872: LD_VAR 0 5
48876: PPUSH
48877: LD_INT 3
48879: PPUSH
48880: CALL_OW 275
48884: PUSH
48885: LD_VAR 0 4
48889: PUSH
48890: LD_INT 3
48892: ARRAY
48893: GREATEREQUAL
48894: AND
48895: ST_TO_ADDR
// end ;
48896: LD_VAR 0 3
48900: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48901: LD_INT 0
48903: PPUSH
48904: PPUSH
48905: PPUSH
48906: PPUSH
// pom := GetBase ( building ) ;
48907: LD_ADDR_VAR 0 3
48911: PUSH
48912: LD_VAR 0 1
48916: PPUSH
48917: CALL_OW 274
48921: ST_TO_ADDR
// if not pom then
48922: LD_VAR 0 3
48926: NOT
48927: IFFALSE 48931
// exit ;
48929: GO 49101
// btype := GetBType ( building ) ;
48931: LD_ADDR_VAR 0 5
48935: PUSH
48936: LD_VAR 0 1
48940: PPUSH
48941: CALL_OW 266
48945: ST_TO_ADDR
// if btype = b_armoury then
48946: LD_VAR 0 5
48950: PUSH
48951: LD_INT 4
48953: EQUAL
48954: IFFALSE 48964
// btype := b_barracks ;
48956: LD_ADDR_VAR 0 5
48960: PUSH
48961: LD_INT 5
48963: ST_TO_ADDR
// if btype = b_depot then
48964: LD_VAR 0 5
48968: PUSH
48969: LD_INT 0
48971: EQUAL
48972: IFFALSE 48982
// btype := b_warehouse ;
48974: LD_ADDR_VAR 0 5
48978: PUSH
48979: LD_INT 1
48981: ST_TO_ADDR
// if btype = b_workshop then
48982: LD_VAR 0 5
48986: PUSH
48987: LD_INT 2
48989: EQUAL
48990: IFFALSE 49000
// btype := b_factory ;
48992: LD_ADDR_VAR 0 5
48996: PUSH
48997: LD_INT 3
48999: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49000: LD_ADDR_VAR 0 4
49004: PUSH
49005: LD_VAR 0 5
49009: PPUSH
49010: LD_VAR 0 1
49014: PPUSH
49015: CALL_OW 248
49019: PPUSH
49020: CALL_OW 450
49024: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49025: LD_ADDR_VAR 0 2
49029: PUSH
49030: LD_VAR 0 3
49034: PPUSH
49035: LD_INT 1
49037: PPUSH
49038: CALL_OW 275
49042: PUSH
49043: LD_VAR 0 4
49047: PUSH
49048: LD_INT 1
49050: ARRAY
49051: GREATEREQUAL
49052: PUSH
49053: LD_VAR 0 3
49057: PPUSH
49058: LD_INT 2
49060: PPUSH
49061: CALL_OW 275
49065: PUSH
49066: LD_VAR 0 4
49070: PUSH
49071: LD_INT 2
49073: ARRAY
49074: GREATEREQUAL
49075: AND
49076: PUSH
49077: LD_VAR 0 3
49081: PPUSH
49082: LD_INT 3
49084: PPUSH
49085: CALL_OW 275
49089: PUSH
49090: LD_VAR 0 4
49094: PUSH
49095: LD_INT 3
49097: ARRAY
49098: GREATEREQUAL
49099: AND
49100: ST_TO_ADDR
// end ;
49101: LD_VAR 0 2
49105: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49106: LD_INT 0
49108: PPUSH
49109: PPUSH
49110: PPUSH
// pom := GetBase ( building ) ;
49111: LD_ADDR_VAR 0 4
49115: PUSH
49116: LD_VAR 0 1
49120: PPUSH
49121: CALL_OW 274
49125: ST_TO_ADDR
// if not pom then
49126: LD_VAR 0 4
49130: NOT
49131: IFFALSE 49135
// exit ;
49133: GO 49236
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49135: LD_ADDR_VAR 0 5
49139: PUSH
49140: LD_VAR 0 2
49144: PPUSH
49145: LD_VAR 0 1
49149: PPUSH
49150: CALL_OW 248
49154: PPUSH
49155: CALL_OW 450
49159: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49160: LD_ADDR_VAR 0 3
49164: PUSH
49165: LD_VAR 0 4
49169: PPUSH
49170: LD_INT 1
49172: PPUSH
49173: CALL_OW 275
49177: PUSH
49178: LD_VAR 0 5
49182: PUSH
49183: LD_INT 1
49185: ARRAY
49186: GREATEREQUAL
49187: PUSH
49188: LD_VAR 0 4
49192: PPUSH
49193: LD_INT 2
49195: PPUSH
49196: CALL_OW 275
49200: PUSH
49201: LD_VAR 0 5
49205: PUSH
49206: LD_INT 2
49208: ARRAY
49209: GREATEREQUAL
49210: AND
49211: PUSH
49212: LD_VAR 0 4
49216: PPUSH
49217: LD_INT 3
49219: PPUSH
49220: CALL_OW 275
49224: PUSH
49225: LD_VAR 0 5
49229: PUSH
49230: LD_INT 3
49232: ARRAY
49233: GREATEREQUAL
49234: AND
49235: ST_TO_ADDR
// end ;
49236: LD_VAR 0 3
49240: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49241: LD_INT 0
49243: PPUSH
49244: PPUSH
49245: PPUSH
49246: PPUSH
49247: PPUSH
49248: PPUSH
49249: PPUSH
49250: PPUSH
49251: PPUSH
49252: PPUSH
49253: PPUSH
// result := false ;
49254: LD_ADDR_VAR 0 8
49258: PUSH
49259: LD_INT 0
49261: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49262: LD_VAR 0 5
49266: NOT
49267: PUSH
49268: LD_VAR 0 1
49272: NOT
49273: OR
49274: PUSH
49275: LD_VAR 0 2
49279: NOT
49280: OR
49281: PUSH
49282: LD_VAR 0 3
49286: NOT
49287: OR
49288: IFFALSE 49292
// exit ;
49290: GO 50106
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49292: LD_ADDR_VAR 0 14
49296: PUSH
49297: LD_VAR 0 1
49301: PPUSH
49302: LD_VAR 0 2
49306: PPUSH
49307: LD_VAR 0 3
49311: PPUSH
49312: LD_VAR 0 4
49316: PPUSH
49317: LD_VAR 0 5
49321: PUSH
49322: LD_INT 1
49324: ARRAY
49325: PPUSH
49326: CALL_OW 248
49330: PPUSH
49331: LD_INT 0
49333: PPUSH
49334: CALL 51343 0 6
49338: ST_TO_ADDR
// if not hexes then
49339: LD_VAR 0 14
49343: NOT
49344: IFFALSE 49348
// exit ;
49346: GO 50106
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49348: LD_ADDR_VAR 0 17
49352: PUSH
49353: LD_VAR 0 5
49357: PPUSH
49358: LD_INT 22
49360: PUSH
49361: LD_VAR 0 13
49365: PPUSH
49366: CALL_OW 255
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: LD_INT 30
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 30
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: LIST
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PPUSH
49407: CALL_OW 72
49411: ST_TO_ADDR
// for i = 1 to hexes do
49412: LD_ADDR_VAR 0 9
49416: PUSH
49417: DOUBLE
49418: LD_INT 1
49420: DEC
49421: ST_TO_ADDR
49422: LD_VAR 0 14
49426: PUSH
49427: FOR_TO
49428: IFFALSE 50104
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49430: LD_ADDR_VAR 0 13
49434: PUSH
49435: LD_VAR 0 14
49439: PUSH
49440: LD_VAR 0 9
49444: ARRAY
49445: PUSH
49446: LD_INT 1
49448: ARRAY
49449: PPUSH
49450: LD_VAR 0 14
49454: PUSH
49455: LD_VAR 0 9
49459: ARRAY
49460: PUSH
49461: LD_INT 2
49463: ARRAY
49464: PPUSH
49465: CALL_OW 428
49469: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49470: LD_VAR 0 14
49474: PUSH
49475: LD_VAR 0 9
49479: ARRAY
49480: PUSH
49481: LD_INT 1
49483: ARRAY
49484: PPUSH
49485: LD_VAR 0 14
49489: PUSH
49490: LD_VAR 0 9
49494: ARRAY
49495: PUSH
49496: LD_INT 2
49498: ARRAY
49499: PPUSH
49500: CALL_OW 351
49504: PUSH
49505: LD_VAR 0 14
49509: PUSH
49510: LD_VAR 0 9
49514: ARRAY
49515: PUSH
49516: LD_INT 1
49518: ARRAY
49519: PPUSH
49520: LD_VAR 0 14
49524: PUSH
49525: LD_VAR 0 9
49529: ARRAY
49530: PUSH
49531: LD_INT 2
49533: ARRAY
49534: PPUSH
49535: CALL_OW 488
49539: NOT
49540: OR
49541: PUSH
49542: LD_VAR 0 13
49546: PPUSH
49547: CALL_OW 247
49551: PUSH
49552: LD_INT 3
49554: EQUAL
49555: OR
49556: IFFALSE 49562
// exit ;
49558: POP
49559: POP
49560: GO 50106
// if not tmp then
49562: LD_VAR 0 13
49566: NOT
49567: IFFALSE 49571
// continue ;
49569: GO 49427
// result := true ;
49571: LD_ADDR_VAR 0 8
49575: PUSH
49576: LD_INT 1
49578: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49579: LD_VAR 0 6
49583: PUSH
49584: LD_VAR 0 13
49588: PPUSH
49589: CALL_OW 247
49593: PUSH
49594: LD_INT 2
49596: EQUAL
49597: AND
49598: PUSH
49599: LD_VAR 0 13
49603: PPUSH
49604: CALL_OW 263
49608: PUSH
49609: LD_INT 1
49611: EQUAL
49612: AND
49613: IFFALSE 49777
// begin if IsDrivenBy ( tmp ) then
49615: LD_VAR 0 13
49619: PPUSH
49620: CALL_OW 311
49624: IFFALSE 49628
// continue ;
49626: GO 49427
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49628: LD_VAR 0 6
49632: PPUSH
49633: LD_INT 3
49635: PUSH
49636: LD_INT 60
49638: PUSH
49639: EMPTY
49640: LIST
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 3
49648: PUSH
49649: LD_INT 55
49651: PUSH
49652: EMPTY
49653: LIST
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PPUSH
49663: CALL_OW 72
49667: IFFALSE 49775
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49669: LD_ADDR_VAR 0 18
49673: PUSH
49674: LD_VAR 0 6
49678: PPUSH
49679: LD_INT 3
49681: PUSH
49682: LD_INT 60
49684: PUSH
49685: EMPTY
49686: LIST
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 3
49694: PUSH
49695: LD_INT 55
49697: PUSH
49698: EMPTY
49699: LIST
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PPUSH
49709: CALL_OW 72
49713: PUSH
49714: LD_INT 1
49716: ARRAY
49717: ST_TO_ADDR
// if IsInUnit ( driver ) then
49718: LD_VAR 0 18
49722: PPUSH
49723: CALL_OW 310
49727: IFFALSE 49738
// ComExit ( driver ) ;
49729: LD_VAR 0 18
49733: PPUSH
49734: CALL 74527 0 1
// AddComEnterUnit ( driver , tmp ) ;
49738: LD_VAR 0 18
49742: PPUSH
49743: LD_VAR 0 13
49747: PPUSH
49748: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49752: LD_VAR 0 18
49756: PPUSH
49757: LD_VAR 0 7
49761: PPUSH
49762: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49766: LD_VAR 0 18
49770: PPUSH
49771: CALL_OW 181
// end ; continue ;
49775: GO 49427
// end ; if not cleaners or not tmp in cleaners then
49777: LD_VAR 0 6
49781: NOT
49782: PUSH
49783: LD_VAR 0 13
49787: PUSH
49788: LD_VAR 0 6
49792: IN
49793: NOT
49794: OR
49795: IFFALSE 50102
// begin if dep then
49797: LD_VAR 0 17
49801: IFFALSE 49937
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49803: LD_ADDR_VAR 0 16
49807: PUSH
49808: LD_VAR 0 17
49812: PUSH
49813: LD_INT 1
49815: ARRAY
49816: PPUSH
49817: CALL_OW 250
49821: PPUSH
49822: LD_VAR 0 17
49826: PUSH
49827: LD_INT 1
49829: ARRAY
49830: PPUSH
49831: CALL_OW 254
49835: PPUSH
49836: LD_INT 5
49838: PPUSH
49839: CALL_OW 272
49843: PUSH
49844: LD_VAR 0 17
49848: PUSH
49849: LD_INT 1
49851: ARRAY
49852: PPUSH
49853: CALL_OW 251
49857: PPUSH
49858: LD_VAR 0 17
49862: PUSH
49863: LD_INT 1
49865: ARRAY
49866: PPUSH
49867: CALL_OW 254
49871: PPUSH
49872: LD_INT 5
49874: PPUSH
49875: CALL_OW 273
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49884: LD_VAR 0 16
49888: PUSH
49889: LD_INT 1
49891: ARRAY
49892: PPUSH
49893: LD_VAR 0 16
49897: PUSH
49898: LD_INT 2
49900: ARRAY
49901: PPUSH
49902: CALL_OW 488
49906: IFFALSE 49937
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49908: LD_VAR 0 13
49912: PPUSH
49913: LD_VAR 0 16
49917: PUSH
49918: LD_INT 1
49920: ARRAY
49921: PPUSH
49922: LD_VAR 0 16
49926: PUSH
49927: LD_INT 2
49929: ARRAY
49930: PPUSH
49931: CALL_OW 111
// continue ;
49935: GO 49427
// end ; end ; r := GetDir ( tmp ) ;
49937: LD_ADDR_VAR 0 15
49941: PUSH
49942: LD_VAR 0 13
49946: PPUSH
49947: CALL_OW 254
49951: ST_TO_ADDR
// if r = 5 then
49952: LD_VAR 0 15
49956: PUSH
49957: LD_INT 5
49959: EQUAL
49960: IFFALSE 49970
// r := 0 ;
49962: LD_ADDR_VAR 0 15
49966: PUSH
49967: LD_INT 0
49969: ST_TO_ADDR
// for j = r to 5 do
49970: LD_ADDR_VAR 0 10
49974: PUSH
49975: DOUBLE
49976: LD_VAR 0 15
49980: DEC
49981: ST_TO_ADDR
49982: LD_INT 5
49984: PUSH
49985: FOR_TO
49986: IFFALSE 50100
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49988: LD_ADDR_VAR 0 11
49992: PUSH
49993: LD_VAR 0 13
49997: PPUSH
49998: CALL_OW 250
50002: PPUSH
50003: LD_VAR 0 10
50007: PPUSH
50008: LD_INT 2
50010: PPUSH
50011: CALL_OW 272
50015: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50016: LD_ADDR_VAR 0 12
50020: PUSH
50021: LD_VAR 0 13
50025: PPUSH
50026: CALL_OW 251
50030: PPUSH
50031: LD_VAR 0 10
50035: PPUSH
50036: LD_INT 2
50038: PPUSH
50039: CALL_OW 273
50043: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50044: LD_VAR 0 11
50048: PPUSH
50049: LD_VAR 0 12
50053: PPUSH
50054: CALL_OW 488
50058: PUSH
50059: LD_VAR 0 11
50063: PPUSH
50064: LD_VAR 0 12
50068: PPUSH
50069: CALL_OW 428
50073: NOT
50074: AND
50075: IFFALSE 50098
// begin ComMoveXY ( tmp , _x , _y ) ;
50077: LD_VAR 0 13
50081: PPUSH
50082: LD_VAR 0 11
50086: PPUSH
50087: LD_VAR 0 12
50091: PPUSH
50092: CALL_OW 111
// break ;
50096: GO 50100
// end ; end ;
50098: GO 49985
50100: POP
50101: POP
// end ; end ;
50102: GO 49427
50104: POP
50105: POP
// end ;
50106: LD_VAR 0 8
50110: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50111: LD_INT 0
50113: PPUSH
// result := true ;
50114: LD_ADDR_VAR 0 3
50118: PUSH
50119: LD_INT 1
50121: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50122: LD_VAR 0 2
50126: PUSH
50127: LD_INT 24
50129: DOUBLE
50130: EQUAL
50131: IFTRUE 50141
50133: LD_INT 33
50135: DOUBLE
50136: EQUAL
50137: IFTRUE 50141
50139: GO 50166
50141: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50142: LD_ADDR_VAR 0 3
50146: PUSH
50147: LD_INT 32
50149: PPUSH
50150: LD_VAR 0 1
50154: PPUSH
50155: CALL_OW 321
50159: PUSH
50160: LD_INT 2
50162: EQUAL
50163: ST_TO_ADDR
50164: GO 50486
50166: LD_INT 20
50168: DOUBLE
50169: EQUAL
50170: IFTRUE 50174
50172: GO 50199
50174: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50175: LD_ADDR_VAR 0 3
50179: PUSH
50180: LD_INT 6
50182: PPUSH
50183: LD_VAR 0 1
50187: PPUSH
50188: CALL_OW 321
50192: PUSH
50193: LD_INT 2
50195: EQUAL
50196: ST_TO_ADDR
50197: GO 50486
50199: LD_INT 22
50201: DOUBLE
50202: EQUAL
50203: IFTRUE 50213
50205: LD_INT 36
50207: DOUBLE
50208: EQUAL
50209: IFTRUE 50213
50211: GO 50238
50213: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50214: LD_ADDR_VAR 0 3
50218: PUSH
50219: LD_INT 15
50221: PPUSH
50222: LD_VAR 0 1
50226: PPUSH
50227: CALL_OW 321
50231: PUSH
50232: LD_INT 2
50234: EQUAL
50235: ST_TO_ADDR
50236: GO 50486
50238: LD_INT 30
50240: DOUBLE
50241: EQUAL
50242: IFTRUE 50246
50244: GO 50271
50246: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50247: LD_ADDR_VAR 0 3
50251: PUSH
50252: LD_INT 20
50254: PPUSH
50255: LD_VAR 0 1
50259: PPUSH
50260: CALL_OW 321
50264: PUSH
50265: LD_INT 2
50267: EQUAL
50268: ST_TO_ADDR
50269: GO 50486
50271: LD_INT 28
50273: DOUBLE
50274: EQUAL
50275: IFTRUE 50285
50277: LD_INT 21
50279: DOUBLE
50280: EQUAL
50281: IFTRUE 50285
50283: GO 50310
50285: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50286: LD_ADDR_VAR 0 3
50290: PUSH
50291: LD_INT 21
50293: PPUSH
50294: LD_VAR 0 1
50298: PPUSH
50299: CALL_OW 321
50303: PUSH
50304: LD_INT 2
50306: EQUAL
50307: ST_TO_ADDR
50308: GO 50486
50310: LD_INT 16
50312: DOUBLE
50313: EQUAL
50314: IFTRUE 50318
50316: GO 50345
50318: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50319: LD_ADDR_VAR 0 3
50323: PUSH
50324: LD_EXP 60
50328: PPUSH
50329: LD_VAR 0 1
50333: PPUSH
50334: CALL_OW 321
50338: PUSH
50339: LD_INT 2
50341: EQUAL
50342: ST_TO_ADDR
50343: GO 50486
50345: LD_INT 19
50347: DOUBLE
50348: EQUAL
50349: IFTRUE 50359
50351: LD_INT 23
50353: DOUBLE
50354: EQUAL
50355: IFTRUE 50359
50357: GO 50386
50359: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50360: LD_ADDR_VAR 0 3
50364: PUSH
50365: LD_EXP 59
50369: PPUSH
50370: LD_VAR 0 1
50374: PPUSH
50375: CALL_OW 321
50379: PUSH
50380: LD_INT 2
50382: EQUAL
50383: ST_TO_ADDR
50384: GO 50486
50386: LD_INT 17
50388: DOUBLE
50389: EQUAL
50390: IFTRUE 50394
50392: GO 50419
50394: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50395: LD_ADDR_VAR 0 3
50399: PUSH
50400: LD_INT 39
50402: PPUSH
50403: LD_VAR 0 1
50407: PPUSH
50408: CALL_OW 321
50412: PUSH
50413: LD_INT 2
50415: EQUAL
50416: ST_TO_ADDR
50417: GO 50486
50419: LD_INT 18
50421: DOUBLE
50422: EQUAL
50423: IFTRUE 50427
50425: GO 50452
50427: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50428: LD_ADDR_VAR 0 3
50432: PUSH
50433: LD_INT 40
50435: PPUSH
50436: LD_VAR 0 1
50440: PPUSH
50441: CALL_OW 321
50445: PUSH
50446: LD_INT 2
50448: EQUAL
50449: ST_TO_ADDR
50450: GO 50486
50452: LD_INT 27
50454: DOUBLE
50455: EQUAL
50456: IFTRUE 50460
50458: GO 50485
50460: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50461: LD_ADDR_VAR 0 3
50465: PUSH
50466: LD_INT 35
50468: PPUSH
50469: LD_VAR 0 1
50473: PPUSH
50474: CALL_OW 321
50478: PUSH
50479: LD_INT 2
50481: EQUAL
50482: ST_TO_ADDR
50483: GO 50486
50485: POP
// end ;
50486: LD_VAR 0 3
50490: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50491: LD_INT 0
50493: PPUSH
50494: PPUSH
50495: PPUSH
50496: PPUSH
50497: PPUSH
50498: PPUSH
50499: PPUSH
50500: PPUSH
50501: PPUSH
50502: PPUSH
50503: PPUSH
// result := false ;
50504: LD_ADDR_VAR 0 6
50508: PUSH
50509: LD_INT 0
50511: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50512: LD_VAR 0 1
50516: NOT
50517: PUSH
50518: LD_VAR 0 1
50522: PPUSH
50523: CALL_OW 266
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: IN
50538: NOT
50539: OR
50540: PUSH
50541: LD_VAR 0 2
50545: NOT
50546: OR
50547: PUSH
50548: LD_VAR 0 5
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: LD_INT 3
50564: PUSH
50565: LD_INT 4
50567: PUSH
50568: LD_INT 5
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: IN
50579: NOT
50580: OR
50581: PUSH
50582: LD_VAR 0 3
50586: PPUSH
50587: LD_VAR 0 4
50591: PPUSH
50592: CALL_OW 488
50596: NOT
50597: OR
50598: IFFALSE 50602
// exit ;
50600: GO 51338
// side := GetSide ( depot ) ;
50602: LD_ADDR_VAR 0 9
50606: PUSH
50607: LD_VAR 0 1
50611: PPUSH
50612: CALL_OW 255
50616: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50617: LD_VAR 0 9
50621: PPUSH
50622: LD_VAR 0 2
50626: PPUSH
50627: CALL 50111 0 2
50631: NOT
50632: IFFALSE 50636
// exit ;
50634: GO 51338
// pom := GetBase ( depot ) ;
50636: LD_ADDR_VAR 0 10
50640: PUSH
50641: LD_VAR 0 1
50645: PPUSH
50646: CALL_OW 274
50650: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50651: LD_ADDR_VAR 0 11
50655: PUSH
50656: LD_VAR 0 2
50660: PPUSH
50661: LD_VAR 0 1
50665: PPUSH
50666: CALL_OW 248
50670: PPUSH
50671: CALL_OW 450
50675: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50676: LD_VAR 0 10
50680: PPUSH
50681: LD_INT 1
50683: PPUSH
50684: CALL_OW 275
50688: PUSH
50689: LD_VAR 0 11
50693: PUSH
50694: LD_INT 1
50696: ARRAY
50697: GREATEREQUAL
50698: PUSH
50699: LD_VAR 0 10
50703: PPUSH
50704: LD_INT 2
50706: PPUSH
50707: CALL_OW 275
50711: PUSH
50712: LD_VAR 0 11
50716: PUSH
50717: LD_INT 2
50719: ARRAY
50720: GREATEREQUAL
50721: AND
50722: PUSH
50723: LD_VAR 0 10
50727: PPUSH
50728: LD_INT 3
50730: PPUSH
50731: CALL_OW 275
50735: PUSH
50736: LD_VAR 0 11
50740: PUSH
50741: LD_INT 3
50743: ARRAY
50744: GREATEREQUAL
50745: AND
50746: NOT
50747: IFFALSE 50751
// exit ;
50749: GO 51338
// if GetBType ( depot ) = b_depot then
50751: LD_VAR 0 1
50755: PPUSH
50756: CALL_OW 266
50760: PUSH
50761: LD_INT 0
50763: EQUAL
50764: IFFALSE 50776
// dist := 28 else
50766: LD_ADDR_VAR 0 14
50770: PUSH
50771: LD_INT 28
50773: ST_TO_ADDR
50774: GO 50784
// dist := 36 ;
50776: LD_ADDR_VAR 0 14
50780: PUSH
50781: LD_INT 36
50783: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50784: LD_VAR 0 1
50788: PPUSH
50789: LD_VAR 0 3
50793: PPUSH
50794: LD_VAR 0 4
50798: PPUSH
50799: CALL_OW 297
50803: PUSH
50804: LD_VAR 0 14
50808: GREATER
50809: IFFALSE 50813
// exit ;
50811: GO 51338
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50813: LD_ADDR_VAR 0 12
50817: PUSH
50818: LD_VAR 0 2
50822: PPUSH
50823: LD_VAR 0 3
50827: PPUSH
50828: LD_VAR 0 4
50832: PPUSH
50833: LD_VAR 0 5
50837: PPUSH
50838: LD_VAR 0 1
50842: PPUSH
50843: CALL_OW 248
50847: PPUSH
50848: LD_INT 0
50850: PPUSH
50851: CALL 51343 0 6
50855: ST_TO_ADDR
// if not hexes then
50856: LD_VAR 0 12
50860: NOT
50861: IFFALSE 50865
// exit ;
50863: GO 51338
// hex := GetHexInfo ( x , y ) ;
50865: LD_ADDR_VAR 0 15
50869: PUSH
50870: LD_VAR 0 3
50874: PPUSH
50875: LD_VAR 0 4
50879: PPUSH
50880: CALL_OW 546
50884: ST_TO_ADDR
// if hex [ 1 ] then
50885: LD_VAR 0 15
50889: PUSH
50890: LD_INT 1
50892: ARRAY
50893: IFFALSE 50897
// exit ;
50895: GO 51338
// height := hex [ 2 ] ;
50897: LD_ADDR_VAR 0 13
50901: PUSH
50902: LD_VAR 0 15
50906: PUSH
50907: LD_INT 2
50909: ARRAY
50910: ST_TO_ADDR
// for i = 1 to hexes do
50911: LD_ADDR_VAR 0 7
50915: PUSH
50916: DOUBLE
50917: LD_INT 1
50919: DEC
50920: ST_TO_ADDR
50921: LD_VAR 0 12
50925: PUSH
50926: FOR_TO
50927: IFFALSE 51257
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50929: LD_VAR 0 12
50933: PUSH
50934: LD_VAR 0 7
50938: ARRAY
50939: PUSH
50940: LD_INT 1
50942: ARRAY
50943: PPUSH
50944: LD_VAR 0 12
50948: PUSH
50949: LD_VAR 0 7
50953: ARRAY
50954: PUSH
50955: LD_INT 2
50957: ARRAY
50958: PPUSH
50959: CALL_OW 488
50963: NOT
50964: PUSH
50965: LD_VAR 0 12
50969: PUSH
50970: LD_VAR 0 7
50974: ARRAY
50975: PUSH
50976: LD_INT 1
50978: ARRAY
50979: PPUSH
50980: LD_VAR 0 12
50984: PUSH
50985: LD_VAR 0 7
50989: ARRAY
50990: PUSH
50991: LD_INT 2
50993: ARRAY
50994: PPUSH
50995: CALL_OW 428
50999: PUSH
51000: LD_INT 0
51002: GREATER
51003: OR
51004: PUSH
51005: LD_VAR 0 12
51009: PUSH
51010: LD_VAR 0 7
51014: ARRAY
51015: PUSH
51016: LD_INT 1
51018: ARRAY
51019: PPUSH
51020: LD_VAR 0 12
51024: PUSH
51025: LD_VAR 0 7
51029: ARRAY
51030: PUSH
51031: LD_INT 2
51033: ARRAY
51034: PPUSH
51035: CALL_OW 351
51039: OR
51040: IFFALSE 51046
// exit ;
51042: POP
51043: POP
51044: GO 51338
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51046: LD_ADDR_VAR 0 8
51050: PUSH
51051: LD_VAR 0 12
51055: PUSH
51056: LD_VAR 0 7
51060: ARRAY
51061: PUSH
51062: LD_INT 1
51064: ARRAY
51065: PPUSH
51066: LD_VAR 0 12
51070: PUSH
51071: LD_VAR 0 7
51075: ARRAY
51076: PUSH
51077: LD_INT 2
51079: ARRAY
51080: PPUSH
51081: CALL_OW 546
51085: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51086: LD_VAR 0 8
51090: PUSH
51091: LD_INT 1
51093: ARRAY
51094: PUSH
51095: LD_VAR 0 8
51099: PUSH
51100: LD_INT 2
51102: ARRAY
51103: PUSH
51104: LD_VAR 0 13
51108: PUSH
51109: LD_INT 2
51111: PLUS
51112: GREATER
51113: OR
51114: PUSH
51115: LD_VAR 0 8
51119: PUSH
51120: LD_INT 2
51122: ARRAY
51123: PUSH
51124: LD_VAR 0 13
51128: PUSH
51129: LD_INT 2
51131: MINUS
51132: LESS
51133: OR
51134: PUSH
51135: LD_VAR 0 8
51139: PUSH
51140: LD_INT 3
51142: ARRAY
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 8
51149: PUSH
51150: LD_INT 9
51152: PUSH
51153: LD_INT 10
51155: PUSH
51156: LD_INT 11
51158: PUSH
51159: LD_INT 12
51161: PUSH
51162: LD_INT 13
51164: PUSH
51165: LD_INT 16
51167: PUSH
51168: LD_INT 17
51170: PUSH
51171: LD_INT 18
51173: PUSH
51174: LD_INT 19
51176: PUSH
51177: LD_INT 20
51179: PUSH
51180: LD_INT 21
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: IN
51198: NOT
51199: OR
51200: PUSH
51201: LD_VAR 0 8
51205: PUSH
51206: LD_INT 5
51208: ARRAY
51209: NOT
51210: OR
51211: PUSH
51212: LD_VAR 0 8
51216: PUSH
51217: LD_INT 6
51219: ARRAY
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: LD_INT 7
51229: PUSH
51230: LD_INT 9
51232: PUSH
51233: LD_INT 10
51235: PUSH
51236: LD_INT 11
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: IN
51247: NOT
51248: OR
51249: IFFALSE 51255
// exit ;
51251: POP
51252: POP
51253: GO 51338
// end ;
51255: GO 50926
51257: POP
51258: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51259: LD_VAR 0 9
51263: PPUSH
51264: LD_VAR 0 3
51268: PPUSH
51269: LD_VAR 0 4
51273: PPUSH
51274: LD_INT 20
51276: PPUSH
51277: CALL 43284 0 4
51281: PUSH
51282: LD_INT 4
51284: ARRAY
51285: IFFALSE 51289
// exit ;
51287: GO 51338
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51289: LD_VAR 0 2
51293: PUSH
51294: LD_INT 29
51296: PUSH
51297: LD_INT 30
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: IN
51304: PUSH
51305: LD_VAR 0 3
51309: PPUSH
51310: LD_VAR 0 4
51314: PPUSH
51315: LD_VAR 0 9
51319: PPUSH
51320: CALL_OW 440
51324: NOT
51325: AND
51326: IFFALSE 51330
// exit ;
51328: GO 51338
// result := true ;
51330: LD_ADDR_VAR 0 6
51334: PUSH
51335: LD_INT 1
51337: ST_TO_ADDR
// end ;
51338: LD_VAR 0 6
51342: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51343: LD_INT 0
51345: PPUSH
51346: PPUSH
51347: PPUSH
51348: PPUSH
51349: PPUSH
51350: PPUSH
51351: PPUSH
51352: PPUSH
51353: PPUSH
51354: PPUSH
51355: PPUSH
51356: PPUSH
51357: PPUSH
51358: PPUSH
51359: PPUSH
51360: PPUSH
51361: PPUSH
51362: PPUSH
51363: PPUSH
51364: PPUSH
51365: PPUSH
51366: PPUSH
51367: PPUSH
51368: PPUSH
51369: PPUSH
51370: PPUSH
51371: PPUSH
51372: PPUSH
51373: PPUSH
51374: PPUSH
51375: PPUSH
51376: PPUSH
51377: PPUSH
51378: PPUSH
51379: PPUSH
51380: PPUSH
51381: PPUSH
51382: PPUSH
51383: PPUSH
51384: PPUSH
51385: PPUSH
51386: PPUSH
51387: PPUSH
51388: PPUSH
51389: PPUSH
51390: PPUSH
51391: PPUSH
51392: PPUSH
51393: PPUSH
51394: PPUSH
51395: PPUSH
51396: PPUSH
51397: PPUSH
51398: PPUSH
51399: PPUSH
51400: PPUSH
51401: PPUSH
51402: PPUSH
// result = [ ] ;
51403: LD_ADDR_VAR 0 7
51407: PUSH
51408: EMPTY
51409: ST_TO_ADDR
// temp_list = [ ] ;
51410: LD_ADDR_VAR 0 9
51414: PUSH
51415: EMPTY
51416: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51417: LD_VAR 0 4
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 2
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: LD_INT 4
51436: PUSH
51437: LD_INT 5
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: IN
51448: NOT
51449: PUSH
51450: LD_VAR 0 1
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: IN
51465: PUSH
51466: LD_VAR 0 5
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: LD_INT 3
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: LIST
51484: IN
51485: NOT
51486: AND
51487: OR
51488: IFFALSE 51492
// exit ;
51490: GO 69883
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51492: LD_VAR 0 1
51496: PUSH
51497: LD_INT 6
51499: PUSH
51500: LD_INT 7
51502: PUSH
51503: LD_INT 8
51505: PUSH
51506: LD_INT 13
51508: PUSH
51509: LD_INT 12
51511: PUSH
51512: LD_INT 15
51514: PUSH
51515: LD_INT 11
51517: PUSH
51518: LD_INT 14
51520: PUSH
51521: LD_INT 10
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: IN
51535: IFFALSE 51545
// btype = b_lab ;
51537: LD_ADDR_VAR 0 1
51541: PUSH
51542: LD_INT 6
51544: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51545: LD_VAR 0 6
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: IN
51564: NOT
51565: PUSH
51566: LD_VAR 0 1
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: LD_INT 3
51582: PUSH
51583: LD_INT 6
51585: PUSH
51586: LD_INT 36
51588: PUSH
51589: LD_INT 4
51591: PUSH
51592: LD_INT 5
51594: PUSH
51595: LD_INT 31
51597: PUSH
51598: LD_INT 32
51600: PUSH
51601: LD_INT 33
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: IN
51617: NOT
51618: PUSH
51619: LD_VAR 0 6
51623: PUSH
51624: LD_INT 1
51626: EQUAL
51627: AND
51628: OR
51629: PUSH
51630: LD_VAR 0 1
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: LD_INT 3
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: IN
51645: NOT
51646: PUSH
51647: LD_VAR 0 6
51651: PUSH
51652: LD_INT 2
51654: EQUAL
51655: AND
51656: OR
51657: IFFALSE 51667
// mode = 0 ;
51659: LD_ADDR_VAR 0 6
51663: PUSH
51664: LD_INT 0
51666: ST_TO_ADDR
// case mode of 0 :
51667: LD_VAR 0 6
51671: PUSH
51672: LD_INT 0
51674: DOUBLE
51675: EQUAL
51676: IFTRUE 51680
51678: GO 63133
51680: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51681: LD_ADDR_VAR 0 11
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 2
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 2
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 3
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 3
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 2
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51874: LD_ADDR_VAR 0 12
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 2
52020: NEG
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 3
52031: NEG
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 3
52042: NEG
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52070: LD_ADDR_VAR 0 13
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: LD_INT 2
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: LD_INT 2
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: LD_INT 3
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 3
52241: NEG
52242: PUSH
52243: LD_INT 3
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52269: LD_ADDR_VAR 0 14
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 3
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 3
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52465: LD_ADDR_VAR 0 15
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: NEG
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 3
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 3
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52658: LD_ADDR_VAR 0 16
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 3
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: LD_INT 3
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52851: LD_ADDR_VAR 0 17
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 2
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 2
53050: NEG
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53081: LD_ADDR_VAR 0 18
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 2
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 2
53268: NEG
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53311: LD_ADDR_VAR 0 19
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53541: LD_ADDR_VAR 0 20
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53771: LD_ADDR_VAR 0 21
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54001: LD_ADDR_VAR 0 22
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54231: LD_ADDR_VAR 0 23
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 2
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: LD_INT 3
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 3
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54511: LD_ADDR_VAR 0 24
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: LD_INT 2
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 2
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 3
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54787: LD_ADDR_VAR 0 25
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: LD_INT 2
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 3
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 3
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55061: LD_ADDR_VAR 0 26
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 2
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: LD_INT 3
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: NEG
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55337: LD_ADDR_VAR 0 27
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 3
55570: NEG
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 3
55582: NEG
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55617: LD_ADDR_VAR 0 28
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: LD_INT 3
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: LD_INT 3
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 3
55852: NEG
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 3
55864: NEG
55865: PUSH
55866: LD_INT 2
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55899: LD_ADDR_VAR 0 29
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 2
56065: NEG
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: LD_INT 3
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 3
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 3
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 3
56143: NEG
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56178: LD_ADDR_VAR 0 30
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: LD_INT 2
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 3
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 3
56421: NEG
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56456: LD_ADDR_VAR 0 31
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 2
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: NEG
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: LD_INT 3
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 3
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 3
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 3
56699: NEG
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56734: LD_ADDR_VAR 0 32
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: LD_INT 3
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 3
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 3
56977: NEG
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57012: LD_ADDR_VAR 0 33
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: NEG
57203: PUSH
57204: LD_INT 3
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 3
57256: NEG
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57291: LD_ADDR_VAR 0 34
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: LD_INT 3
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 3
57505: PUSH
57506: LD_INT 2
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: LD_INT 3
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 2
57525: NEG
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 3
57536: NEG
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57571: LD_ADDR_VAR 0 35
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57683: LD_ADDR_VAR 0 36
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57795: LD_ADDR_VAR 0 37
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57907: LD_ADDR_VAR 0 38
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 2
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58019: LD_ADDR_VAR 0 39
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 2
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: LD_INT 2
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58131: LD_ADDR_VAR 0 40
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58243: LD_ADDR_VAR 0 41
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 2
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 2
58433: NEG
58434: PUSH
58435: LD_INT 3
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 3
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 3
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 3
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: LD_INT 3
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: LD_INT 3
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 2
58506: NEG
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 3
58517: NEG
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 3
58528: NEG
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: LD_INT 3
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58593: LD_ADDR_VAR 0 42
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: LD_INT 2
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 2
58783: NEG
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 3
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: LD_INT 3
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 3
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: PUSH
58840: LD_INT 3
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: LD_INT 3
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: LD_INT 3
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 3
58890: NEG
58891: PUSH
58892: LD_INT 2
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: LD_INT 3
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58943: LD_ADDR_VAR 0 43
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: LD_INT 2
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: LD_INT 2
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: LD_INT 3
59147: NEG
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: LD_INT 3
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: LD_INT 3
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59291: LD_ADDR_VAR 0 44
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: LD_INT 2
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: LD_INT 1
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 2
59446: NEG
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 2
59457: NEG
59458: PUSH
59459: LD_INT 1
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: LD_INT 3
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 2
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 3
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 3
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: PUSH
59535: LD_INT 3
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 2
59544: PUSH
59545: LD_INT 3
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 2
59554: NEG
59555: PUSH
59556: LD_INT 1
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 3
59565: NEG
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 3
59576: NEG
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 3
59588: NEG
59589: PUSH
59590: LD_INT 2
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 3
59600: NEG
59601: PUSH
59602: LD_INT 3
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59641: LD_ADDR_VAR 0 45
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 2
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 2
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 2
59807: NEG
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: NEG
59820: PUSH
59821: LD_INT 2
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: NEG
59832: PUSH
59833: LD_INT 3
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: LD_INT 3
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: LD_INT 3
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: LD_INT 2
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 3
59887: PUSH
59888: LD_INT 3
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: LD_INT 3
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: LD_INT 3
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: LD_INT 3
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 3
59938: NEG
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 3
59950: NEG
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59991: LD_ADDR_VAR 0 46
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: LD_INT 2
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: LD_INT 2
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 1
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: PUSH
60117: LD_INT 1
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: LD_INT 2
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 2
60157: NEG
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: NEG
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: LD_INT 3
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: LD_INT 3
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: LD_INT 2
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 3
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: LD_INT 3
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: LD_INT 3
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: LD_INT 2
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 3
60287: NEG
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 3
60298: NEG
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60339: LD_ADDR_VAR 0 47
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 2
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60490: LD_ADDR_VAR 0 48
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: LD_INT 1
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60637: LD_ADDR_VAR 0 49
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: LD_INT 1
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 1
60706: NEG
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 2
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 2
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 2
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 2
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60781: LD_ADDR_VAR 0 50
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: LD_INT 1
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 2
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 2
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: LD_INT 2
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: LD_INT 2
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60925: LD_ADDR_VAR 0 51
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: LD_INT 1
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: NEG
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61072: LD_ADDR_VAR 0 52
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: LD_INT 1
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 2
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: NEG
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 2
61199: NEG
61200: PUSH
61201: LD_INT 2
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61223: LD_ADDR_VAR 0 53
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: NEG
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: NEG
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: LD_INT 2
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_INT 2
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: LD_INT 1
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 2
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 2
61348: PUSH
61349: LD_INT 1
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: LD_INT 2
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: LD_INT 2
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 2
61399: NEG
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 2
61410: NEG
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: LD_INT 2
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61453: LD_ADDR_VAR 0 54
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: LD_INT 2
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: LD_INT 2
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: LD_INT 2
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: LD_INT 1
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: NEG
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: NEG
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 2
61652: NEG
61653: PUSH
61654: LD_INT 2
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61683: LD_ADDR_VAR 0 55
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: LD_INT 1
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: NEG
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: LD_INT 2
61768: NEG
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: LD_INT 2
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 2
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 2
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 2
61818: PUSH
61819: LD_INT 2
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 2
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 2
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 2
61859: NEG
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: LD_INT 1
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 2
61882: NEG
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61913: LD_ADDR_VAR 0 56
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 1
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: LD_INT 1
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: LD_INT 1
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: LD_INT 2
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: LD_INT 2
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 2
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 2
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 2
62048: PUSH
62049: LD_INT 2
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 2
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 2
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 2
62089: NEG
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 2
62100: NEG
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 2
62112: NEG
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62143: LD_ADDR_VAR 0 57
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: PUSH
62226: LD_INT 2
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: LD_INT 2
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 2
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 2
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 2
62278: PUSH
62279: LD_INT 2
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: LD_INT 2
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 2
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 2
62319: NEG
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 2
62330: NEG
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 2
62342: NEG
62343: PUSH
62344: LD_INT 2
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62373: LD_ADDR_VAR 0 58
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 0
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 1
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: LD_INT 1
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: NEG
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 2
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 2
62498: PUSH
62499: LD_INT 1
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 2
62508: PUSH
62509: LD_INT 2
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: LD_INT 2
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 2
62549: NEG
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: LD_INT 1
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 2
62572: NEG
62573: PUSH
62574: LD_INT 2
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62603: LD_ADDR_VAR 0 59
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 1
62661: NEG
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62691: LD_ADDR_VAR 0 60
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: LD_INT 1
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 1
62760: NEG
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62779: LD_ADDR_VAR 0 61
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: LD_INT 1
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: LD_INT 0
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 1
62848: NEG
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62867: LD_ADDR_VAR 0 62
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: LD_INT 0
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: LD_INT 1
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62955: LD_ADDR_VAR 0 63
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: LD_INT 1
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 1
63013: NEG
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63043: LD_ADDR_VAR 0 64
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 1
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 1
63112: NEG
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: ST_TO_ADDR
// end ; 1 :
63131: GO 69028
63133: LD_INT 1
63135: DOUBLE
63136: EQUAL
63137: IFTRUE 63141
63139: GO 65764
63141: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63142: LD_ADDR_VAR 0 11
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: LD_INT 3
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: LD_INT 3
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: LD_INT 2
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63186: LD_ADDR_VAR 0 12
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 3
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 3
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: LIST
63226: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63227: LD_ADDR_VAR 0 13
63231: PUSH
63232: LD_INT 3
63234: PUSH
63235: LD_INT 2
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 3
63244: PUSH
63245: LD_INT 3
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 2
63254: PUSH
63255: LD_INT 3
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: LIST
63266: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63267: LD_ADDR_VAR 0 14
63271: PUSH
63272: LD_INT 1
63274: PUSH
63275: LD_INT 3
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: LD_INT 3
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: LIST
63307: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63308: LD_ADDR_VAR 0 15
63312: PUSH
63313: LD_INT 2
63315: NEG
63316: PUSH
63317: LD_INT 1
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 3
63326: NEG
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 3
63337: NEG
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: LIST
63351: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63352: LD_ADDR_VAR 0 16
63356: PUSH
63357: LD_INT 2
63359: NEG
63360: PUSH
63361: LD_INT 3
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 3
63371: NEG
63372: PUSH
63373: LD_INT 2
63375: NEG
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 3
63383: NEG
63384: PUSH
63385: LD_INT 3
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: LIST
63397: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63398: LD_ADDR_VAR 0 17
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: LD_INT 3
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: LD_INT 3
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: LD_INT 2
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: LIST
63441: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63442: LD_ADDR_VAR 0 18
63446: PUSH
63447: LD_INT 2
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 3
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 3
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: LIST
63482: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63483: LD_ADDR_VAR 0 19
63487: PUSH
63488: LD_INT 3
63490: PUSH
63491: LD_INT 2
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 3
63500: PUSH
63501: LD_INT 3
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 2
63510: PUSH
63511: LD_INT 3
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: LIST
63522: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63523: LD_ADDR_VAR 0 20
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: LD_INT 3
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: LD_INT 3
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 1
63550: NEG
63551: PUSH
63552: LD_INT 2
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63564: LD_ADDR_VAR 0 21
63568: PUSH
63569: LD_INT 2
63571: NEG
63572: PUSH
63573: LD_INT 1
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 3
63582: NEG
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 3
63593: NEG
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63608: LD_ADDR_VAR 0 22
63612: PUSH
63613: LD_INT 2
63615: NEG
63616: PUSH
63617: LD_INT 3
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 3
63627: NEG
63628: PUSH
63629: LD_INT 2
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 3
63639: NEG
63640: PUSH
63641: LD_INT 3
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: LIST
63653: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63654: LD_ADDR_VAR 0 23
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: LD_INT 3
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: NEG
63673: PUSH
63674: LD_INT 4
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: LD_INT 3
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: LIST
63697: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63698: LD_ADDR_VAR 0 24
63702: PUSH
63703: LD_INT 3
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 3
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 4
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: LIST
63738: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63739: LD_ADDR_VAR 0 25
63743: PUSH
63744: LD_INT 3
63746: PUSH
63747: LD_INT 3
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 4
63756: PUSH
63757: LD_INT 3
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 3
63766: PUSH
63767: LD_INT 4
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: LIST
63778: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63779: LD_ADDR_VAR 0 26
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: LD_INT 3
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: LD_INT 4
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: LD_INT 3
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: LIST
63819: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63820: LD_ADDR_VAR 0 27
63824: PUSH
63825: LD_INT 3
63827: NEG
63828: PUSH
63829: LD_INT 0
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 3
63838: NEG
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 4
63849: NEG
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: LIST
63863: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63864: LD_ADDR_VAR 0 28
63868: PUSH
63869: LD_INT 3
63871: NEG
63872: PUSH
63873: LD_INT 3
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 3
63883: NEG
63884: PUSH
63885: LD_INT 4
63887: NEG
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 4
63895: NEG
63896: PUSH
63897: LD_INT 3
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: LIST
63909: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63910: LD_ADDR_VAR 0 29
63914: PUSH
63915: LD_INT 1
63917: NEG
63918: PUSH
63919: LD_INT 3
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: LD_INT 3
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: LD_INT 2
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: LD_INT 4
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 0
63963: PUSH
63964: LD_INT 4
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 1
63985: NEG
63986: PUSH
63987: LD_INT 5
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: LD_INT 5
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: PUSH
64009: LD_INT 4
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: LD_INT 6
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: LD_INT 6
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: LD_INT 5
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64065: LD_ADDR_VAR 0 30
64069: PUSH
64070: LD_INT 2
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 3
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 3
64093: PUSH
64094: LD_INT 1
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 3
64103: PUSH
64104: LD_INT 1
64106: NEG
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 4
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 4
64124: PUSH
64125: LD_INT 1
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 4
64134: PUSH
64135: LD_INT 1
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 5
64145: PUSH
64146: LD_INT 0
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 5
64155: PUSH
64156: LD_INT 1
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 5
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 6
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 6
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64208: LD_ADDR_VAR 0 31
64212: PUSH
64213: LD_INT 3
64215: PUSH
64216: LD_INT 2
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 3
64225: PUSH
64226: LD_INT 3
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 2
64235: PUSH
64236: LD_INT 3
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 4
64245: PUSH
64246: LD_INT 3
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 4
64255: PUSH
64256: LD_INT 4
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 3
64265: PUSH
64266: LD_INT 4
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 5
64275: PUSH
64276: LD_INT 4
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 5
64285: PUSH
64286: LD_INT 5
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 4
64295: PUSH
64296: LD_INT 5
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 6
64305: PUSH
64306: LD_INT 5
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 6
64315: PUSH
64316: LD_INT 6
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 5
64325: PUSH
64326: LD_INT 6
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64347: LD_ADDR_VAR 0 32
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: LD_INT 3
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 3
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: NEG
64375: PUSH
64376: LD_INT 2
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: LD_INT 4
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: LD_INT 4
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 1
64405: NEG
64406: PUSH
64407: LD_INT 3
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 5
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 5
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: LD_INT 4
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: LD_INT 6
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: LD_INT 6
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: LD_INT 5
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64490: LD_ADDR_VAR 0 33
64494: PUSH
64495: LD_INT 2
64497: NEG
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 3
64508: NEG
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 3
64519: NEG
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 3
64531: NEG
64532: PUSH
64533: LD_INT 1
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 4
64542: NEG
64543: PUSH
64544: LD_INT 0
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 4
64553: NEG
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 4
64565: NEG
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 5
64576: NEG
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 5
64587: NEG
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 5
64599: NEG
64600: PUSH
64601: LD_INT 1
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 6
64610: NEG
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 6
64621: NEG
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64645: LD_ADDR_VAR 0 34
64649: PUSH
64650: LD_INT 2
64652: NEG
64653: PUSH
64654: LD_INT 3
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 3
64664: NEG
64665: PUSH
64666: LD_INT 2
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 3
64676: NEG
64677: PUSH
64678: LD_INT 3
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 3
64688: NEG
64689: PUSH
64690: LD_INT 4
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 4
64700: NEG
64701: PUSH
64702: LD_INT 3
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 4
64712: NEG
64713: PUSH
64714: LD_INT 4
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 4
64724: NEG
64725: PUSH
64726: LD_INT 5
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 5
64736: NEG
64737: PUSH
64738: LD_INT 4
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 5
64748: NEG
64749: PUSH
64750: LD_INT 5
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 5
64760: NEG
64761: PUSH
64762: LD_INT 6
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 6
64772: NEG
64773: PUSH
64774: LD_INT 5
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 6
64784: NEG
64785: PUSH
64786: LD_INT 6
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64808: LD_ADDR_VAR 0 41
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: LD_INT 3
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 1
64838: PUSH
64839: LD_INT 2
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: LIST
64851: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64852: LD_ADDR_VAR 0 42
64856: PUSH
64857: LD_INT 2
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 3
64880: PUSH
64881: LD_INT 1
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: LIST
64892: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64893: LD_ADDR_VAR 0 43
64897: PUSH
64898: LD_INT 2
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 3
64910: PUSH
64911: LD_INT 2
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 2
64920: PUSH
64921: LD_INT 3
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: LIST
64932: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64933: LD_ADDR_VAR 0 44
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: LD_INT 2
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 1
64950: PUSH
64951: LD_INT 3
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: LIST
64973: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64974: LD_ADDR_VAR 0 45
64978: PUSH
64979: LD_INT 2
64981: NEG
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 2
64992: NEG
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 3
65003: NEG
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: LIST
65017: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65018: LD_ADDR_VAR 0 46
65022: PUSH
65023: LD_INT 2
65025: NEG
65026: PUSH
65027: LD_INT 2
65029: NEG
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 2
65037: NEG
65038: PUSH
65039: LD_INT 3
65041: NEG
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 3
65049: NEG
65050: PUSH
65051: LD_INT 2
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: LIST
65063: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65064: LD_ADDR_VAR 0 47
65068: PUSH
65069: LD_INT 2
65071: NEG
65072: PUSH
65073: LD_INT 3
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: LD_INT 3
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65097: LD_ADDR_VAR 0 48
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: LD_INT 2
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 2
65115: PUSH
65116: LD_INT 1
65118: NEG
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65128: LD_ADDR_VAR 0 49
65132: PUSH
65133: LD_INT 3
65135: PUSH
65136: LD_INT 1
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 3
65145: PUSH
65146: LD_INT 2
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65157: LD_ADDR_VAR 0 50
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: LD_INT 3
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 1
65174: PUSH
65175: LD_INT 3
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65186: LD_ADDR_VAR 0 51
65190: PUSH
65191: LD_INT 1
65193: NEG
65194: PUSH
65195: LD_INT 2
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 2
65204: NEG
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65217: LD_ADDR_VAR 0 52
65221: PUSH
65222: LD_INT 3
65224: NEG
65225: PUSH
65226: LD_INT 1
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 3
65236: NEG
65237: PUSH
65238: LD_INT 2
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65250: LD_ADDR_VAR 0 53
65254: PUSH
65255: LD_INT 1
65257: NEG
65258: PUSH
65259: LD_INT 3
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: LD_INT 3
65272: NEG
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 1
65280: PUSH
65281: LD_INT 2
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65294: LD_ADDR_VAR 0 54
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 3
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 3
65322: PUSH
65323: LD_INT 1
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: LIST
65334: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65335: LD_ADDR_VAR 0 55
65339: PUSH
65340: LD_INT 3
65342: PUSH
65343: LD_INT 2
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 3
65352: PUSH
65353: LD_INT 3
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 2
65362: PUSH
65363: LD_INT 3
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: LIST
65374: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65375: LD_ADDR_VAR 0 56
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: LD_INT 3
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: LD_INT 3
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: LD_INT 2
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: LIST
65415: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65416: LD_ADDR_VAR 0 57
65420: PUSH
65421: LD_INT 2
65423: NEG
65424: PUSH
65425: LD_INT 1
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 3
65434: NEG
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 3
65445: NEG
65446: PUSH
65447: LD_INT 1
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: LIST
65459: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65460: LD_ADDR_VAR 0 58
65464: PUSH
65465: LD_INT 2
65467: NEG
65468: PUSH
65469: LD_INT 3
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 3
65479: NEG
65480: PUSH
65481: LD_INT 2
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 3
65491: NEG
65492: PUSH
65493: LD_INT 3
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: LIST
65505: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65506: LD_ADDR_VAR 0 59
65510: PUSH
65511: LD_INT 1
65513: NEG
65514: PUSH
65515: LD_INT 2
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: LD_INT 2
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 1
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: LIST
65549: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65550: LD_ADDR_VAR 0 60
65554: PUSH
65555: LD_INT 1
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 2
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 2
65578: PUSH
65579: LD_INT 1
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: LIST
65590: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65591: LD_ADDR_VAR 0 61
65595: PUSH
65596: LD_INT 2
65598: PUSH
65599: LD_INT 1
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 2
65608: PUSH
65609: LD_INT 2
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: LD_INT 2
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: LIST
65630: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65631: LD_ADDR_VAR 0 62
65635: PUSH
65636: LD_INT 1
65638: PUSH
65639: LD_INT 2
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: LD_INT 2
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 1
65658: NEG
65659: PUSH
65660: LD_INT 1
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: LIST
65671: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65672: LD_ADDR_VAR 0 63
65676: PUSH
65677: LD_INT 1
65679: NEG
65680: PUSH
65681: LD_INT 1
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 2
65690: NEG
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 2
65701: NEG
65702: PUSH
65703: LD_INT 1
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: LIST
65715: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65716: LD_ADDR_VAR 0 64
65720: PUSH
65721: LD_INT 1
65723: NEG
65724: PUSH
65725: LD_INT 2
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 2
65735: NEG
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 2
65747: NEG
65748: PUSH
65749: LD_INT 2
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: LIST
65761: ST_TO_ADDR
// end ; 2 :
65762: GO 69028
65764: LD_INT 2
65766: DOUBLE
65767: EQUAL
65768: IFTRUE 65772
65770: GO 69027
65772: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65773: LD_ADDR_VAR 0 29
65777: PUSH
65778: LD_INT 4
65780: PUSH
65781: LD_INT 0
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 4
65790: PUSH
65791: LD_INT 1
65793: NEG
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 5
65801: PUSH
65802: LD_INT 0
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 5
65811: PUSH
65812: LD_INT 1
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 4
65821: PUSH
65822: LD_INT 1
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 3
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 3
65841: PUSH
65842: LD_INT 1
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 3
65852: PUSH
65853: LD_INT 2
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 5
65863: PUSH
65864: LD_INT 2
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 3
65873: PUSH
65874: LD_INT 3
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 3
65883: PUSH
65884: LD_INT 2
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 4
65893: PUSH
65894: LD_INT 3
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 4
65903: PUSH
65904: LD_INT 4
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 3
65913: PUSH
65914: LD_INT 4
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 2
65923: PUSH
65924: LD_INT 3
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 2
65933: PUSH
65934: LD_INT 2
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 4
65943: PUSH
65944: LD_INT 2
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 2
65953: PUSH
65954: LD_INT 4
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 0
65963: PUSH
65964: LD_INT 4
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: LD_INT 3
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 1
65983: PUSH
65984: LD_INT 4
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 1
65993: PUSH
65994: LD_INT 5
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: LD_INT 5
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 1
66013: NEG
66014: PUSH
66015: LD_INT 4
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 1
66024: NEG
66025: PUSH
66026: LD_INT 3
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: LD_INT 5
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 2
66045: NEG
66046: PUSH
66047: LD_INT 3
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 3
66056: NEG
66057: PUSH
66058: LD_INT 0
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 3
66067: NEG
66068: PUSH
66069: LD_INT 1
66071: NEG
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 2
66079: NEG
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 2
66090: NEG
66091: PUSH
66092: LD_INT 1
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 3
66101: NEG
66102: PUSH
66103: LD_INT 1
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 4
66112: NEG
66113: PUSH
66114: LD_INT 0
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 4
66123: NEG
66124: PUSH
66125: LD_INT 1
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 4
66135: NEG
66136: PUSH
66137: LD_INT 2
66139: NEG
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 2
66147: NEG
66148: PUSH
66149: LD_INT 2
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 4
66158: NEG
66159: PUSH
66160: LD_INT 4
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 4
66170: NEG
66171: PUSH
66172: LD_INT 5
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 3
66182: NEG
66183: PUSH
66184: LD_INT 4
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 3
66194: NEG
66195: PUSH
66196: LD_INT 3
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 4
66206: NEG
66207: PUSH
66208: LD_INT 3
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 5
66218: NEG
66219: PUSH
66220: LD_INT 4
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 5
66230: NEG
66231: PUSH
66232: LD_INT 5
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 3
66242: NEG
66243: PUSH
66244: LD_INT 5
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 5
66254: NEG
66255: PUSH
66256: LD_INT 3
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66311: LD_ADDR_VAR 0 30
66315: PUSH
66316: LD_INT 4
66318: PUSH
66319: LD_INT 4
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 4
66328: PUSH
66329: LD_INT 3
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 5
66338: PUSH
66339: LD_INT 4
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 5
66348: PUSH
66349: LD_INT 5
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 4
66358: PUSH
66359: LD_INT 5
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 3
66368: PUSH
66369: LD_INT 4
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 3
66378: PUSH
66379: LD_INT 3
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 5
66388: PUSH
66389: LD_INT 3
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 3
66398: PUSH
66399: LD_INT 5
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 0
66408: PUSH
66409: LD_INT 3
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: LD_INT 2
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 1
66428: PUSH
66429: LD_INT 3
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 1
66438: PUSH
66439: LD_INT 4
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 0
66448: PUSH
66449: LD_INT 4
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 1
66458: NEG
66459: PUSH
66460: LD_INT 3
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 1
66469: NEG
66470: PUSH
66471: LD_INT 2
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 2
66480: PUSH
66481: LD_INT 4
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 2
66490: NEG
66491: PUSH
66492: LD_INT 2
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 4
66501: NEG
66502: PUSH
66503: LD_INT 0
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 4
66512: NEG
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 3
66524: NEG
66525: PUSH
66526: LD_INT 0
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 3
66535: NEG
66536: PUSH
66537: LD_INT 1
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 4
66546: NEG
66547: PUSH
66548: LD_INT 1
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 5
66557: NEG
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 5
66568: NEG
66569: PUSH
66570: LD_INT 1
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 5
66580: NEG
66581: PUSH
66582: LD_INT 2
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 3
66592: NEG
66593: PUSH
66594: LD_INT 2
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 3
66603: NEG
66604: PUSH
66605: LD_INT 3
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 3
66615: NEG
66616: PUSH
66617: LD_INT 4
66619: NEG
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 2
66627: NEG
66628: PUSH
66629: LD_INT 3
66631: NEG
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 2
66639: NEG
66640: PUSH
66641: LD_INT 2
66643: NEG
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 3
66651: NEG
66652: PUSH
66653: LD_INT 2
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 4
66663: NEG
66664: PUSH
66665: LD_INT 3
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 4
66675: NEG
66676: PUSH
66677: LD_INT 4
66679: NEG
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 2
66687: NEG
66688: PUSH
66689: LD_INT 4
66691: NEG
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 4
66699: NEG
66700: PUSH
66701: LD_INT 2
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: LD_INT 4
66714: NEG
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 0
66722: PUSH
66723: LD_INT 5
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 1
66733: PUSH
66734: LD_INT 4
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 1
66744: PUSH
66745: LD_INT 3
66747: NEG
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 0
66755: PUSH
66756: LD_INT 3
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 1
66766: NEG
66767: PUSH
66768: LD_INT 4
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: NEG
66779: PUSH
66780: LD_INT 5
66782: NEG
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 2
66790: PUSH
66791: LD_INT 3
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 2
66801: NEG
66802: PUSH
66803: LD_INT 5
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66858: LD_ADDR_VAR 0 31
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: LD_INT 4
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 0
66875: PUSH
66876: LD_INT 3
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: LD_INT 4
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: LD_INT 5
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: LD_INT 5
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: PUSH
66917: LD_INT 4
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 1
66926: NEG
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 2
66937: PUSH
66938: LD_INT 5
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 2
66947: NEG
66948: PUSH
66949: LD_INT 3
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 3
66958: NEG
66959: PUSH
66960: LD_INT 0
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 3
66969: NEG
66970: PUSH
66971: LD_INT 1
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 2
66981: NEG
66982: PUSH
66983: LD_INT 0
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 2
66992: NEG
66993: PUSH
66994: LD_INT 1
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 3
67003: NEG
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 4
67014: NEG
67015: PUSH
67016: LD_INT 0
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 4
67025: NEG
67026: PUSH
67027: LD_INT 1
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 4
67037: NEG
67038: PUSH
67039: LD_INT 2
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 2
67049: NEG
67050: PUSH
67051: LD_INT 2
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 4
67060: NEG
67061: PUSH
67062: LD_INT 4
67064: NEG
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 4
67072: NEG
67073: PUSH
67074: LD_INT 5
67076: NEG
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 3
67084: NEG
67085: PUSH
67086: LD_INT 4
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 3
67096: NEG
67097: PUSH
67098: LD_INT 3
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 4
67108: NEG
67109: PUSH
67110: LD_INT 3
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 5
67120: NEG
67121: PUSH
67122: LD_INT 4
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 5
67132: NEG
67133: PUSH
67134: LD_INT 5
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 3
67144: NEG
67145: PUSH
67146: LD_INT 5
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 5
67156: NEG
67157: PUSH
67158: LD_INT 3
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: LD_INT 3
67171: NEG
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: LD_INT 4
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 1
67190: PUSH
67191: LD_INT 3
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 1
67201: PUSH
67202: LD_INT 2
67204: NEG
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: LD_INT 2
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 1
67223: NEG
67224: PUSH
67225: LD_INT 3
67227: NEG
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 1
67235: NEG
67236: PUSH
67237: LD_INT 4
67239: NEG
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 2
67247: PUSH
67248: LD_INT 2
67250: NEG
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 2
67258: NEG
67259: PUSH
67260: LD_INT 4
67262: NEG
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 4
67270: PUSH
67271: LD_INT 0
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 4
67280: PUSH
67281: LD_INT 1
67283: NEG
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 5
67291: PUSH
67292: LD_INT 0
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 5
67301: PUSH
67302: LD_INT 1
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 4
67311: PUSH
67312: LD_INT 1
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 3
67321: PUSH
67322: LD_INT 0
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 3
67331: PUSH
67332: LD_INT 1
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 3
67342: PUSH
67343: LD_INT 2
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 5
67353: PUSH
67354: LD_INT 2
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67408: LD_ADDR_VAR 0 32
67412: PUSH
67413: LD_INT 4
67415: NEG
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 4
67426: NEG
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 3
67438: NEG
67439: PUSH
67440: LD_INT 0
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 3
67449: NEG
67450: PUSH
67451: LD_INT 1
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 4
67460: NEG
67461: PUSH
67462: LD_INT 1
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 5
67471: NEG
67472: PUSH
67473: LD_INT 0
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 5
67482: NEG
67483: PUSH
67484: LD_INT 1
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 5
67494: NEG
67495: PUSH
67496: LD_INT 2
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 3
67506: NEG
67507: PUSH
67508: LD_INT 2
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 3
67517: NEG
67518: PUSH
67519: LD_INT 3
67521: NEG
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 3
67529: NEG
67530: PUSH
67531: LD_INT 4
67533: NEG
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 2
67541: NEG
67542: PUSH
67543: LD_INT 3
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 2
67553: NEG
67554: PUSH
67555: LD_INT 2
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 3
67565: NEG
67566: PUSH
67567: LD_INT 2
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 4
67577: NEG
67578: PUSH
67579: LD_INT 3
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 4
67589: NEG
67590: PUSH
67591: LD_INT 4
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 2
67601: NEG
67602: PUSH
67603: LD_INT 4
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 4
67613: NEG
67614: PUSH
67615: LD_INT 2
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 0
67625: PUSH
67626: LD_INT 4
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: LD_INT 5
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 1
67647: PUSH
67648: LD_INT 4
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: LD_INT 3
67661: NEG
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: LD_INT 3
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 1
67680: NEG
67681: PUSH
67682: LD_INT 4
67684: NEG
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 1
67692: NEG
67693: PUSH
67694: LD_INT 5
67696: NEG
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 2
67704: PUSH
67705: LD_INT 3
67707: NEG
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 2
67715: NEG
67716: PUSH
67717: LD_INT 5
67719: NEG
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 3
67727: PUSH
67728: LD_INT 0
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 3
67737: PUSH
67738: LD_INT 1
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 4
67748: PUSH
67749: LD_INT 0
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 4
67758: PUSH
67759: LD_INT 1
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 3
67768: PUSH
67769: LD_INT 1
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 2
67778: PUSH
67779: LD_INT 0
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 2
67788: PUSH
67789: LD_INT 1
67791: NEG
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 2
67799: PUSH
67800: LD_INT 2
67802: NEG
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 4
67810: PUSH
67811: LD_INT 2
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 4
67820: PUSH
67821: LD_INT 4
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 4
67830: PUSH
67831: LD_INT 3
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 5
67840: PUSH
67841: LD_INT 4
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 5
67850: PUSH
67851: LD_INT 5
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 4
67860: PUSH
67861: LD_INT 5
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 3
67870: PUSH
67871: LD_INT 4
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 3
67880: PUSH
67881: LD_INT 3
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 5
67890: PUSH
67891: LD_INT 3
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 3
67900: PUSH
67901: LD_INT 5
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67955: LD_ADDR_VAR 0 33
67959: PUSH
67960: LD_INT 4
67962: NEG
67963: PUSH
67964: LD_INT 4
67966: NEG
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 4
67974: NEG
67975: PUSH
67976: LD_INT 5
67978: NEG
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 3
67986: NEG
67987: PUSH
67988: LD_INT 4
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 3
67998: NEG
67999: PUSH
68000: LD_INT 3
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 4
68010: NEG
68011: PUSH
68012: LD_INT 3
68014: NEG
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 5
68022: NEG
68023: PUSH
68024: LD_INT 4
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 5
68034: NEG
68035: PUSH
68036: LD_INT 5
68038: NEG
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 3
68046: NEG
68047: PUSH
68048: LD_INT 5
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 5
68058: NEG
68059: PUSH
68060: LD_INT 3
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 0
68070: PUSH
68071: LD_INT 3
68073: NEG
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 0
68081: PUSH
68082: LD_INT 4
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 1
68092: PUSH
68093: LD_INT 3
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 1
68103: PUSH
68104: LD_INT 2
68106: NEG
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 0
68114: PUSH
68115: LD_INT 2
68117: NEG
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 1
68125: NEG
68126: PUSH
68127: LD_INT 3
68129: NEG
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 1
68137: NEG
68138: PUSH
68139: LD_INT 4
68141: NEG
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 2
68149: PUSH
68150: LD_INT 2
68152: NEG
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 2
68160: NEG
68161: PUSH
68162: LD_INT 4
68164: NEG
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 4
68172: PUSH
68173: LD_INT 0
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 4
68182: PUSH
68183: LD_INT 1
68185: NEG
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 5
68193: PUSH
68194: LD_INT 0
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 5
68203: PUSH
68204: LD_INT 1
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 4
68213: PUSH
68214: LD_INT 1
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 3
68223: PUSH
68224: LD_INT 0
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 3
68233: PUSH
68234: LD_INT 1
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 3
68244: PUSH
68245: LD_INT 2
68247: NEG
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 5
68255: PUSH
68256: LD_INT 2
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 3
68265: PUSH
68266: LD_INT 3
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 3
68275: PUSH
68276: LD_INT 2
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 4
68285: PUSH
68286: LD_INT 3
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 4
68295: PUSH
68296: LD_INT 4
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 3
68305: PUSH
68306: LD_INT 4
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 2
68315: PUSH
68316: LD_INT 3
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 2
68325: PUSH
68326: LD_INT 2
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 4
68335: PUSH
68336: LD_INT 2
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 2
68345: PUSH
68346: LD_INT 4
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 0
68355: PUSH
68356: LD_INT 4
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 0
68365: PUSH
68366: LD_INT 3
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 1
68375: PUSH
68376: LD_INT 4
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 1
68385: PUSH
68386: LD_INT 5
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 0
68395: PUSH
68396: LD_INT 5
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 1
68405: NEG
68406: PUSH
68407: LD_INT 4
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 1
68416: NEG
68417: PUSH
68418: LD_INT 3
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 2
68427: PUSH
68428: LD_INT 5
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 2
68437: NEG
68438: PUSH
68439: LD_INT 3
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68493: LD_ADDR_VAR 0 34
68497: PUSH
68498: LD_INT 0
68500: PUSH
68501: LD_INT 4
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 0
68511: PUSH
68512: LD_INT 5
68514: NEG
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 1
68522: PUSH
68523: LD_INT 4
68525: NEG
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 1
68533: PUSH
68534: LD_INT 3
68536: NEG
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 0
68544: PUSH
68545: LD_INT 3
68547: NEG
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 1
68555: NEG
68556: PUSH
68557: LD_INT 4
68559: NEG
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 1
68567: NEG
68568: PUSH
68569: LD_INT 5
68571: NEG
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 2
68579: PUSH
68580: LD_INT 3
68582: NEG
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 2
68590: NEG
68591: PUSH
68592: LD_INT 5
68594: NEG
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 3
68602: PUSH
68603: LD_INT 0
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 3
68612: PUSH
68613: LD_INT 1
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 4
68623: PUSH
68624: LD_INT 0
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 4
68633: PUSH
68634: LD_INT 1
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 3
68643: PUSH
68644: LD_INT 1
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 2
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 2
68663: PUSH
68664: LD_INT 1
68666: NEG
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 2
68674: PUSH
68675: LD_INT 2
68677: NEG
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 4
68685: PUSH
68686: LD_INT 2
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 4
68695: PUSH
68696: LD_INT 4
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 4
68705: PUSH
68706: LD_INT 3
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 5
68715: PUSH
68716: LD_INT 4
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 5
68725: PUSH
68726: LD_INT 5
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 4
68735: PUSH
68736: LD_INT 5
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 3
68745: PUSH
68746: LD_INT 4
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 3
68755: PUSH
68756: LD_INT 3
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 5
68765: PUSH
68766: LD_INT 3
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 3
68775: PUSH
68776: LD_INT 5
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 0
68785: PUSH
68786: LD_INT 3
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 0
68795: PUSH
68796: LD_INT 2
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 1
68805: PUSH
68806: LD_INT 3
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 1
68815: PUSH
68816: LD_INT 4
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 0
68825: PUSH
68826: LD_INT 4
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 1
68835: NEG
68836: PUSH
68837: LD_INT 3
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 1
68846: NEG
68847: PUSH
68848: LD_INT 2
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 2
68857: PUSH
68858: LD_INT 4
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 2
68867: NEG
68868: PUSH
68869: LD_INT 2
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 4
68878: NEG
68879: PUSH
68880: LD_INT 0
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 4
68889: NEG
68890: PUSH
68891: LD_INT 1
68893: NEG
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 3
68901: NEG
68902: PUSH
68903: LD_INT 0
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 3
68912: NEG
68913: PUSH
68914: LD_INT 1
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 4
68923: NEG
68924: PUSH
68925: LD_INT 1
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 5
68934: NEG
68935: PUSH
68936: LD_INT 0
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 5
68945: NEG
68946: PUSH
68947: LD_INT 1
68949: NEG
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 5
68957: NEG
68958: PUSH
68959: LD_INT 2
68961: NEG
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 3
68969: NEG
68970: PUSH
68971: LD_INT 2
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: ST_TO_ADDR
// end ; end ;
69025: GO 69028
69027: POP
// case btype of b_depot , b_warehouse :
69028: LD_VAR 0 1
69032: PUSH
69033: LD_INT 0
69035: DOUBLE
69036: EQUAL
69037: IFTRUE 69047
69039: LD_INT 1
69041: DOUBLE
69042: EQUAL
69043: IFTRUE 69047
69045: GO 69248
69047: POP
// case nation of nation_american :
69048: LD_VAR 0 5
69052: PUSH
69053: LD_INT 1
69055: DOUBLE
69056: EQUAL
69057: IFTRUE 69061
69059: GO 69117
69061: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69062: LD_ADDR_VAR 0 9
69066: PUSH
69067: LD_VAR 0 11
69071: PUSH
69072: LD_VAR 0 12
69076: PUSH
69077: LD_VAR 0 13
69081: PUSH
69082: LD_VAR 0 14
69086: PUSH
69087: LD_VAR 0 15
69091: PUSH
69092: LD_VAR 0 16
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: PUSH
69105: LD_VAR 0 4
69109: PUSH
69110: LD_INT 1
69112: PLUS
69113: ARRAY
69114: ST_TO_ADDR
69115: GO 69246
69117: LD_INT 2
69119: DOUBLE
69120: EQUAL
69121: IFTRUE 69125
69123: GO 69181
69125: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69126: LD_ADDR_VAR 0 9
69130: PUSH
69131: LD_VAR 0 17
69135: PUSH
69136: LD_VAR 0 18
69140: PUSH
69141: LD_VAR 0 19
69145: PUSH
69146: LD_VAR 0 20
69150: PUSH
69151: LD_VAR 0 21
69155: PUSH
69156: LD_VAR 0 22
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: PUSH
69169: LD_VAR 0 4
69173: PUSH
69174: LD_INT 1
69176: PLUS
69177: ARRAY
69178: ST_TO_ADDR
69179: GO 69246
69181: LD_INT 3
69183: DOUBLE
69184: EQUAL
69185: IFTRUE 69189
69187: GO 69245
69189: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69190: LD_ADDR_VAR 0 9
69194: PUSH
69195: LD_VAR 0 23
69199: PUSH
69200: LD_VAR 0 24
69204: PUSH
69205: LD_VAR 0 25
69209: PUSH
69210: LD_VAR 0 26
69214: PUSH
69215: LD_VAR 0 27
69219: PUSH
69220: LD_VAR 0 28
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: PUSH
69233: LD_VAR 0 4
69237: PUSH
69238: LD_INT 1
69240: PLUS
69241: ARRAY
69242: ST_TO_ADDR
69243: GO 69246
69245: POP
69246: GO 69801
69248: LD_INT 2
69250: DOUBLE
69251: EQUAL
69252: IFTRUE 69262
69254: LD_INT 3
69256: DOUBLE
69257: EQUAL
69258: IFTRUE 69262
69260: GO 69318
69262: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69263: LD_ADDR_VAR 0 9
69267: PUSH
69268: LD_VAR 0 29
69272: PUSH
69273: LD_VAR 0 30
69277: PUSH
69278: LD_VAR 0 31
69282: PUSH
69283: LD_VAR 0 32
69287: PUSH
69288: LD_VAR 0 33
69292: PUSH
69293: LD_VAR 0 34
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: PUSH
69306: LD_VAR 0 4
69310: PUSH
69311: LD_INT 1
69313: PLUS
69314: ARRAY
69315: ST_TO_ADDR
69316: GO 69801
69318: LD_INT 16
69320: DOUBLE
69321: EQUAL
69322: IFTRUE 69380
69324: LD_INT 17
69326: DOUBLE
69327: EQUAL
69328: IFTRUE 69380
69330: LD_INT 18
69332: DOUBLE
69333: EQUAL
69334: IFTRUE 69380
69336: LD_INT 19
69338: DOUBLE
69339: EQUAL
69340: IFTRUE 69380
69342: LD_INT 22
69344: DOUBLE
69345: EQUAL
69346: IFTRUE 69380
69348: LD_INT 20
69350: DOUBLE
69351: EQUAL
69352: IFTRUE 69380
69354: LD_INT 21
69356: DOUBLE
69357: EQUAL
69358: IFTRUE 69380
69360: LD_INT 23
69362: DOUBLE
69363: EQUAL
69364: IFTRUE 69380
69366: LD_INT 24
69368: DOUBLE
69369: EQUAL
69370: IFTRUE 69380
69372: LD_INT 25
69374: DOUBLE
69375: EQUAL
69376: IFTRUE 69380
69378: GO 69436
69380: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69381: LD_ADDR_VAR 0 9
69385: PUSH
69386: LD_VAR 0 35
69390: PUSH
69391: LD_VAR 0 36
69395: PUSH
69396: LD_VAR 0 37
69400: PUSH
69401: LD_VAR 0 38
69405: PUSH
69406: LD_VAR 0 39
69410: PUSH
69411: LD_VAR 0 40
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: PUSH
69424: LD_VAR 0 4
69428: PUSH
69429: LD_INT 1
69431: PLUS
69432: ARRAY
69433: ST_TO_ADDR
69434: GO 69801
69436: LD_INT 6
69438: DOUBLE
69439: EQUAL
69440: IFTRUE 69492
69442: LD_INT 7
69444: DOUBLE
69445: EQUAL
69446: IFTRUE 69492
69448: LD_INT 8
69450: DOUBLE
69451: EQUAL
69452: IFTRUE 69492
69454: LD_INT 13
69456: DOUBLE
69457: EQUAL
69458: IFTRUE 69492
69460: LD_INT 12
69462: DOUBLE
69463: EQUAL
69464: IFTRUE 69492
69466: LD_INT 15
69468: DOUBLE
69469: EQUAL
69470: IFTRUE 69492
69472: LD_INT 11
69474: DOUBLE
69475: EQUAL
69476: IFTRUE 69492
69478: LD_INT 14
69480: DOUBLE
69481: EQUAL
69482: IFTRUE 69492
69484: LD_INT 10
69486: DOUBLE
69487: EQUAL
69488: IFTRUE 69492
69490: GO 69548
69492: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69493: LD_ADDR_VAR 0 9
69497: PUSH
69498: LD_VAR 0 41
69502: PUSH
69503: LD_VAR 0 42
69507: PUSH
69508: LD_VAR 0 43
69512: PUSH
69513: LD_VAR 0 44
69517: PUSH
69518: LD_VAR 0 45
69522: PUSH
69523: LD_VAR 0 46
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: PUSH
69536: LD_VAR 0 4
69540: PUSH
69541: LD_INT 1
69543: PLUS
69544: ARRAY
69545: ST_TO_ADDR
69546: GO 69801
69548: LD_INT 36
69550: DOUBLE
69551: EQUAL
69552: IFTRUE 69556
69554: GO 69612
69556: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69557: LD_ADDR_VAR 0 9
69561: PUSH
69562: LD_VAR 0 47
69566: PUSH
69567: LD_VAR 0 48
69571: PUSH
69572: LD_VAR 0 49
69576: PUSH
69577: LD_VAR 0 50
69581: PUSH
69582: LD_VAR 0 51
69586: PUSH
69587: LD_VAR 0 52
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: PUSH
69600: LD_VAR 0 4
69604: PUSH
69605: LD_INT 1
69607: PLUS
69608: ARRAY
69609: ST_TO_ADDR
69610: GO 69801
69612: LD_INT 4
69614: DOUBLE
69615: EQUAL
69616: IFTRUE 69638
69618: LD_INT 5
69620: DOUBLE
69621: EQUAL
69622: IFTRUE 69638
69624: LD_INT 34
69626: DOUBLE
69627: EQUAL
69628: IFTRUE 69638
69630: LD_INT 37
69632: DOUBLE
69633: EQUAL
69634: IFTRUE 69638
69636: GO 69694
69638: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69639: LD_ADDR_VAR 0 9
69643: PUSH
69644: LD_VAR 0 53
69648: PUSH
69649: LD_VAR 0 54
69653: PUSH
69654: LD_VAR 0 55
69658: PUSH
69659: LD_VAR 0 56
69663: PUSH
69664: LD_VAR 0 57
69668: PUSH
69669: LD_VAR 0 58
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: PUSH
69682: LD_VAR 0 4
69686: PUSH
69687: LD_INT 1
69689: PLUS
69690: ARRAY
69691: ST_TO_ADDR
69692: GO 69801
69694: LD_INT 31
69696: DOUBLE
69697: EQUAL
69698: IFTRUE 69744
69700: LD_INT 32
69702: DOUBLE
69703: EQUAL
69704: IFTRUE 69744
69706: LD_INT 33
69708: DOUBLE
69709: EQUAL
69710: IFTRUE 69744
69712: LD_INT 27
69714: DOUBLE
69715: EQUAL
69716: IFTRUE 69744
69718: LD_INT 26
69720: DOUBLE
69721: EQUAL
69722: IFTRUE 69744
69724: LD_INT 28
69726: DOUBLE
69727: EQUAL
69728: IFTRUE 69744
69730: LD_INT 29
69732: DOUBLE
69733: EQUAL
69734: IFTRUE 69744
69736: LD_INT 30
69738: DOUBLE
69739: EQUAL
69740: IFTRUE 69744
69742: GO 69800
69744: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69745: LD_ADDR_VAR 0 9
69749: PUSH
69750: LD_VAR 0 59
69754: PUSH
69755: LD_VAR 0 60
69759: PUSH
69760: LD_VAR 0 61
69764: PUSH
69765: LD_VAR 0 62
69769: PUSH
69770: LD_VAR 0 63
69774: PUSH
69775: LD_VAR 0 64
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: PUSH
69788: LD_VAR 0 4
69792: PUSH
69793: LD_INT 1
69795: PLUS
69796: ARRAY
69797: ST_TO_ADDR
69798: GO 69801
69800: POP
// temp_list2 = [ ] ;
69801: LD_ADDR_VAR 0 10
69805: PUSH
69806: EMPTY
69807: ST_TO_ADDR
// for i in temp_list do
69808: LD_ADDR_VAR 0 8
69812: PUSH
69813: LD_VAR 0 9
69817: PUSH
69818: FOR_IN
69819: IFFALSE 69871
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69821: LD_ADDR_VAR 0 10
69825: PUSH
69826: LD_VAR 0 10
69830: PUSH
69831: LD_VAR 0 8
69835: PUSH
69836: LD_INT 1
69838: ARRAY
69839: PUSH
69840: LD_VAR 0 2
69844: PLUS
69845: PUSH
69846: LD_VAR 0 8
69850: PUSH
69851: LD_INT 2
69853: ARRAY
69854: PUSH
69855: LD_VAR 0 3
69859: PLUS
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: EMPTY
69866: LIST
69867: ADD
69868: ST_TO_ADDR
69869: GO 69818
69871: POP
69872: POP
// result = temp_list2 ;
69873: LD_ADDR_VAR 0 7
69877: PUSH
69878: LD_VAR 0 10
69882: ST_TO_ADDR
// end ;
69883: LD_VAR 0 7
69887: RET
// export function EnemyInRange ( unit , dist ) ; begin
69888: LD_INT 0
69890: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69891: LD_ADDR_VAR 0 3
69895: PUSH
69896: LD_VAR 0 1
69900: PPUSH
69901: CALL_OW 255
69905: PPUSH
69906: LD_VAR 0 1
69910: PPUSH
69911: CALL_OW 250
69915: PPUSH
69916: LD_VAR 0 1
69920: PPUSH
69921: CALL_OW 251
69925: PPUSH
69926: LD_VAR 0 2
69930: PPUSH
69931: CALL 43284 0 4
69935: PUSH
69936: LD_INT 4
69938: ARRAY
69939: ST_TO_ADDR
// end ;
69940: LD_VAR 0 3
69944: RET
// export function PlayerSeeMe ( unit ) ; begin
69945: LD_INT 0
69947: PPUSH
// result := See ( your_side , unit ) ;
69948: LD_ADDR_VAR 0 2
69952: PUSH
69953: LD_OWVAR 2
69957: PPUSH
69958: LD_VAR 0 1
69962: PPUSH
69963: CALL_OW 292
69967: ST_TO_ADDR
// end ;
69968: LD_VAR 0 2
69972: RET
// export function ReverseDir ( unit ) ; begin
69973: LD_INT 0
69975: PPUSH
// if not unit then
69976: LD_VAR 0 1
69980: NOT
69981: IFFALSE 69985
// exit ;
69983: GO 70008
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69985: LD_ADDR_VAR 0 2
69989: PUSH
69990: LD_VAR 0 1
69994: PPUSH
69995: CALL_OW 254
69999: PUSH
70000: LD_INT 3
70002: PLUS
70003: PUSH
70004: LD_INT 6
70006: MOD
70007: ST_TO_ADDR
// end ;
70008: LD_VAR 0 2
70012: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70013: LD_INT 0
70015: PPUSH
70016: PPUSH
70017: PPUSH
70018: PPUSH
70019: PPUSH
// if not hexes then
70020: LD_VAR 0 2
70024: NOT
70025: IFFALSE 70029
// exit ;
70027: GO 70177
// dist := 9999 ;
70029: LD_ADDR_VAR 0 5
70033: PUSH
70034: LD_INT 9999
70036: ST_TO_ADDR
// for i = 1 to hexes do
70037: LD_ADDR_VAR 0 4
70041: PUSH
70042: DOUBLE
70043: LD_INT 1
70045: DEC
70046: ST_TO_ADDR
70047: LD_VAR 0 2
70051: PUSH
70052: FOR_TO
70053: IFFALSE 70165
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70055: LD_VAR 0 1
70059: PPUSH
70060: LD_VAR 0 2
70064: PUSH
70065: LD_VAR 0 4
70069: ARRAY
70070: PUSH
70071: LD_INT 1
70073: ARRAY
70074: PPUSH
70075: LD_VAR 0 2
70079: PUSH
70080: LD_VAR 0 4
70084: ARRAY
70085: PUSH
70086: LD_INT 2
70088: ARRAY
70089: PPUSH
70090: CALL_OW 297
70094: PUSH
70095: LD_VAR 0 5
70099: LESS
70100: IFFALSE 70163
// begin hex := hexes [ i ] ;
70102: LD_ADDR_VAR 0 7
70106: PUSH
70107: LD_VAR 0 2
70111: PUSH
70112: LD_VAR 0 4
70116: ARRAY
70117: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70118: LD_ADDR_VAR 0 5
70122: PUSH
70123: LD_VAR 0 1
70127: PPUSH
70128: LD_VAR 0 2
70132: PUSH
70133: LD_VAR 0 4
70137: ARRAY
70138: PUSH
70139: LD_INT 1
70141: ARRAY
70142: PPUSH
70143: LD_VAR 0 2
70147: PUSH
70148: LD_VAR 0 4
70152: ARRAY
70153: PUSH
70154: LD_INT 2
70156: ARRAY
70157: PPUSH
70158: CALL_OW 297
70162: ST_TO_ADDR
// end ; end ;
70163: GO 70052
70165: POP
70166: POP
// result := hex ;
70167: LD_ADDR_VAR 0 3
70171: PUSH
70172: LD_VAR 0 7
70176: ST_TO_ADDR
// end ;
70177: LD_VAR 0 3
70181: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70182: LD_INT 0
70184: PPUSH
70185: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70186: LD_VAR 0 1
70190: NOT
70191: PUSH
70192: LD_VAR 0 1
70196: PUSH
70197: LD_INT 21
70199: PUSH
70200: LD_INT 2
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 23
70209: PUSH
70210: LD_INT 2
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PPUSH
70221: CALL_OW 69
70225: IN
70226: NOT
70227: OR
70228: IFFALSE 70232
// exit ;
70230: GO 70279
// for i = 1 to 3 do
70232: LD_ADDR_VAR 0 3
70236: PUSH
70237: DOUBLE
70238: LD_INT 1
70240: DEC
70241: ST_TO_ADDR
70242: LD_INT 3
70244: PUSH
70245: FOR_TO
70246: IFFALSE 70277
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70248: LD_VAR 0 1
70252: PPUSH
70253: CALL_OW 250
70257: PPUSH
70258: LD_VAR 0 1
70262: PPUSH
70263: CALL_OW 251
70267: PPUSH
70268: LD_INT 1
70270: PPUSH
70271: CALL_OW 453
70275: GO 70245
70277: POP
70278: POP
// end ;
70279: LD_VAR 0 2
70283: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70284: LD_INT 0
70286: PPUSH
70287: PPUSH
70288: PPUSH
70289: PPUSH
70290: PPUSH
70291: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70292: LD_VAR 0 1
70296: NOT
70297: PUSH
70298: LD_VAR 0 2
70302: NOT
70303: OR
70304: PUSH
70305: LD_VAR 0 1
70309: PPUSH
70310: CALL_OW 314
70314: OR
70315: IFFALSE 70319
// exit ;
70317: GO 70760
// x := GetX ( enemy_unit ) ;
70319: LD_ADDR_VAR 0 7
70323: PUSH
70324: LD_VAR 0 2
70328: PPUSH
70329: CALL_OW 250
70333: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70334: LD_ADDR_VAR 0 8
70338: PUSH
70339: LD_VAR 0 2
70343: PPUSH
70344: CALL_OW 251
70348: ST_TO_ADDR
// if not x or not y then
70349: LD_VAR 0 7
70353: NOT
70354: PUSH
70355: LD_VAR 0 8
70359: NOT
70360: OR
70361: IFFALSE 70365
// exit ;
70363: GO 70760
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70365: LD_ADDR_VAR 0 6
70369: PUSH
70370: LD_VAR 0 7
70374: PPUSH
70375: LD_INT 0
70377: PPUSH
70378: LD_INT 4
70380: PPUSH
70381: CALL_OW 272
70385: PUSH
70386: LD_VAR 0 8
70390: PPUSH
70391: LD_INT 0
70393: PPUSH
70394: LD_INT 4
70396: PPUSH
70397: CALL_OW 273
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_VAR 0 7
70410: PPUSH
70411: LD_INT 1
70413: PPUSH
70414: LD_INT 4
70416: PPUSH
70417: CALL_OW 272
70421: PUSH
70422: LD_VAR 0 8
70426: PPUSH
70427: LD_INT 1
70429: PPUSH
70430: LD_INT 4
70432: PPUSH
70433: CALL_OW 273
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_VAR 0 7
70446: PPUSH
70447: LD_INT 2
70449: PPUSH
70450: LD_INT 4
70452: PPUSH
70453: CALL_OW 272
70457: PUSH
70458: LD_VAR 0 8
70462: PPUSH
70463: LD_INT 2
70465: PPUSH
70466: LD_INT 4
70468: PPUSH
70469: CALL_OW 273
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_VAR 0 7
70482: PPUSH
70483: LD_INT 3
70485: PPUSH
70486: LD_INT 4
70488: PPUSH
70489: CALL_OW 272
70493: PUSH
70494: LD_VAR 0 8
70498: PPUSH
70499: LD_INT 3
70501: PPUSH
70502: LD_INT 4
70504: PPUSH
70505: CALL_OW 273
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_VAR 0 7
70518: PPUSH
70519: LD_INT 4
70521: PPUSH
70522: LD_INT 4
70524: PPUSH
70525: CALL_OW 272
70529: PUSH
70530: LD_VAR 0 8
70534: PPUSH
70535: LD_INT 4
70537: PPUSH
70538: LD_INT 4
70540: PPUSH
70541: CALL_OW 273
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_VAR 0 7
70554: PPUSH
70555: LD_INT 5
70557: PPUSH
70558: LD_INT 4
70560: PPUSH
70561: CALL_OW 272
70565: PUSH
70566: LD_VAR 0 8
70570: PPUSH
70571: LD_INT 5
70573: PPUSH
70574: LD_INT 4
70576: PPUSH
70577: CALL_OW 273
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: ST_TO_ADDR
// for i = tmp downto 1 do
70594: LD_ADDR_VAR 0 4
70598: PUSH
70599: DOUBLE
70600: LD_VAR 0 6
70604: INC
70605: ST_TO_ADDR
70606: LD_INT 1
70608: PUSH
70609: FOR_DOWNTO
70610: IFFALSE 70711
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70612: LD_VAR 0 6
70616: PUSH
70617: LD_VAR 0 4
70621: ARRAY
70622: PUSH
70623: LD_INT 1
70625: ARRAY
70626: PPUSH
70627: LD_VAR 0 6
70631: PUSH
70632: LD_VAR 0 4
70636: ARRAY
70637: PUSH
70638: LD_INT 2
70640: ARRAY
70641: PPUSH
70642: CALL_OW 488
70646: NOT
70647: PUSH
70648: LD_VAR 0 6
70652: PUSH
70653: LD_VAR 0 4
70657: ARRAY
70658: PUSH
70659: LD_INT 1
70661: ARRAY
70662: PPUSH
70663: LD_VAR 0 6
70667: PUSH
70668: LD_VAR 0 4
70672: ARRAY
70673: PUSH
70674: LD_INT 2
70676: ARRAY
70677: PPUSH
70678: CALL_OW 428
70682: PUSH
70683: LD_INT 0
70685: NONEQUAL
70686: OR
70687: IFFALSE 70709
// tmp := Delete ( tmp , i ) ;
70689: LD_ADDR_VAR 0 6
70693: PUSH
70694: LD_VAR 0 6
70698: PPUSH
70699: LD_VAR 0 4
70703: PPUSH
70704: CALL_OW 3
70708: ST_TO_ADDR
70709: GO 70609
70711: POP
70712: POP
// j := GetClosestHex ( unit , tmp ) ;
70713: LD_ADDR_VAR 0 5
70717: PUSH
70718: LD_VAR 0 1
70722: PPUSH
70723: LD_VAR 0 6
70727: PPUSH
70728: CALL 70013 0 2
70732: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70733: LD_VAR 0 1
70737: PPUSH
70738: LD_VAR 0 5
70742: PUSH
70743: LD_INT 1
70745: ARRAY
70746: PPUSH
70747: LD_VAR 0 5
70751: PUSH
70752: LD_INT 2
70754: ARRAY
70755: PPUSH
70756: CALL_OW 111
// end ;
70760: LD_VAR 0 3
70764: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70765: LD_INT 0
70767: PPUSH
70768: PPUSH
70769: PPUSH
// uc_side = 0 ;
70770: LD_ADDR_OWVAR 20
70774: PUSH
70775: LD_INT 0
70777: ST_TO_ADDR
// uc_nation = 0 ;
70778: LD_ADDR_OWVAR 21
70782: PUSH
70783: LD_INT 0
70785: ST_TO_ADDR
// InitHc_All ( ) ;
70786: CALL_OW 584
// InitVc ;
70790: CALL_OW 20
// if mastodonts then
70794: LD_VAR 0 6
70798: IFFALSE 70865
// for i = 1 to mastodonts do
70800: LD_ADDR_VAR 0 11
70804: PUSH
70805: DOUBLE
70806: LD_INT 1
70808: DEC
70809: ST_TO_ADDR
70810: LD_VAR 0 6
70814: PUSH
70815: FOR_TO
70816: IFFALSE 70863
// begin vc_chassis := 31 ;
70818: LD_ADDR_OWVAR 37
70822: PUSH
70823: LD_INT 31
70825: ST_TO_ADDR
// vc_control := control_rider ;
70826: LD_ADDR_OWVAR 38
70830: PUSH
70831: LD_INT 4
70833: ST_TO_ADDR
// animal := CreateVehicle ;
70834: LD_ADDR_VAR 0 12
70838: PUSH
70839: CALL_OW 45
70843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70844: LD_VAR 0 12
70848: PPUSH
70849: LD_VAR 0 8
70853: PPUSH
70854: LD_INT 0
70856: PPUSH
70857: CALL 73053 0 3
// end ;
70861: GO 70815
70863: POP
70864: POP
// if horses then
70865: LD_VAR 0 5
70869: IFFALSE 70936
// for i = 1 to horses do
70871: LD_ADDR_VAR 0 11
70875: PUSH
70876: DOUBLE
70877: LD_INT 1
70879: DEC
70880: ST_TO_ADDR
70881: LD_VAR 0 5
70885: PUSH
70886: FOR_TO
70887: IFFALSE 70934
// begin hc_class := 21 ;
70889: LD_ADDR_OWVAR 28
70893: PUSH
70894: LD_INT 21
70896: ST_TO_ADDR
// hc_gallery :=  ;
70897: LD_ADDR_OWVAR 33
70901: PUSH
70902: LD_STRING 
70904: ST_TO_ADDR
// animal := CreateHuman ;
70905: LD_ADDR_VAR 0 12
70909: PUSH
70910: CALL_OW 44
70914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70915: LD_VAR 0 12
70919: PPUSH
70920: LD_VAR 0 8
70924: PPUSH
70925: LD_INT 0
70927: PPUSH
70928: CALL 73053 0 3
// end ;
70932: GO 70886
70934: POP
70935: POP
// if birds then
70936: LD_VAR 0 1
70940: IFFALSE 71007
// for i = 1 to birds do
70942: LD_ADDR_VAR 0 11
70946: PUSH
70947: DOUBLE
70948: LD_INT 1
70950: DEC
70951: ST_TO_ADDR
70952: LD_VAR 0 1
70956: PUSH
70957: FOR_TO
70958: IFFALSE 71005
// begin hc_class = 18 ;
70960: LD_ADDR_OWVAR 28
70964: PUSH
70965: LD_INT 18
70967: ST_TO_ADDR
// hc_gallery =  ;
70968: LD_ADDR_OWVAR 33
70972: PUSH
70973: LD_STRING 
70975: ST_TO_ADDR
// animal := CreateHuman ;
70976: LD_ADDR_VAR 0 12
70980: PUSH
70981: CALL_OW 44
70985: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70986: LD_VAR 0 12
70990: PPUSH
70991: LD_VAR 0 8
70995: PPUSH
70996: LD_INT 0
70998: PPUSH
70999: CALL 73053 0 3
// end ;
71003: GO 70957
71005: POP
71006: POP
// if tigers then
71007: LD_VAR 0 2
71011: IFFALSE 71095
// for i = 1 to tigers do
71013: LD_ADDR_VAR 0 11
71017: PUSH
71018: DOUBLE
71019: LD_INT 1
71021: DEC
71022: ST_TO_ADDR
71023: LD_VAR 0 2
71027: PUSH
71028: FOR_TO
71029: IFFALSE 71093
// begin hc_class = class_tiger ;
71031: LD_ADDR_OWVAR 28
71035: PUSH
71036: LD_INT 14
71038: ST_TO_ADDR
// hc_gallery =  ;
71039: LD_ADDR_OWVAR 33
71043: PUSH
71044: LD_STRING 
71046: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71047: LD_ADDR_OWVAR 35
71051: PUSH
71052: LD_INT 7
71054: NEG
71055: PPUSH
71056: LD_INT 7
71058: PPUSH
71059: CALL_OW 12
71063: ST_TO_ADDR
// animal := CreateHuman ;
71064: LD_ADDR_VAR 0 12
71068: PUSH
71069: CALL_OW 44
71073: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71074: LD_VAR 0 12
71078: PPUSH
71079: LD_VAR 0 8
71083: PPUSH
71084: LD_INT 0
71086: PPUSH
71087: CALL 73053 0 3
// end ;
71091: GO 71028
71093: POP
71094: POP
// if apemans then
71095: LD_VAR 0 3
71099: IFFALSE 71222
// for i = 1 to apemans do
71101: LD_ADDR_VAR 0 11
71105: PUSH
71106: DOUBLE
71107: LD_INT 1
71109: DEC
71110: ST_TO_ADDR
71111: LD_VAR 0 3
71115: PUSH
71116: FOR_TO
71117: IFFALSE 71220
// begin hc_class = class_apeman ;
71119: LD_ADDR_OWVAR 28
71123: PUSH
71124: LD_INT 12
71126: ST_TO_ADDR
// hc_gallery =  ;
71127: LD_ADDR_OWVAR 33
71131: PUSH
71132: LD_STRING 
71134: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71135: LD_ADDR_OWVAR 35
71139: PUSH
71140: LD_INT 2
71142: NEG
71143: PPUSH
71144: LD_INT 2
71146: PPUSH
71147: CALL_OW 12
71151: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71152: LD_ADDR_OWVAR 31
71156: PUSH
71157: LD_INT 1
71159: PPUSH
71160: LD_INT 3
71162: PPUSH
71163: CALL_OW 12
71167: PUSH
71168: LD_INT 1
71170: PPUSH
71171: LD_INT 3
71173: PPUSH
71174: CALL_OW 12
71178: PUSH
71179: LD_INT 0
71181: PUSH
71182: LD_INT 0
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: ST_TO_ADDR
// animal := CreateHuman ;
71191: LD_ADDR_VAR 0 12
71195: PUSH
71196: CALL_OW 44
71200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71201: LD_VAR 0 12
71205: PPUSH
71206: LD_VAR 0 8
71210: PPUSH
71211: LD_INT 0
71213: PPUSH
71214: CALL 73053 0 3
// end ;
71218: GO 71116
71220: POP
71221: POP
// if enchidnas then
71222: LD_VAR 0 4
71226: IFFALSE 71293
// for i = 1 to enchidnas do
71228: LD_ADDR_VAR 0 11
71232: PUSH
71233: DOUBLE
71234: LD_INT 1
71236: DEC
71237: ST_TO_ADDR
71238: LD_VAR 0 4
71242: PUSH
71243: FOR_TO
71244: IFFALSE 71291
// begin hc_class = 13 ;
71246: LD_ADDR_OWVAR 28
71250: PUSH
71251: LD_INT 13
71253: ST_TO_ADDR
// hc_gallery =  ;
71254: LD_ADDR_OWVAR 33
71258: PUSH
71259: LD_STRING 
71261: ST_TO_ADDR
// animal := CreateHuman ;
71262: LD_ADDR_VAR 0 12
71266: PUSH
71267: CALL_OW 44
71271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71272: LD_VAR 0 12
71276: PPUSH
71277: LD_VAR 0 8
71281: PPUSH
71282: LD_INT 0
71284: PPUSH
71285: CALL 73053 0 3
// end ;
71289: GO 71243
71291: POP
71292: POP
// if fishes then
71293: LD_VAR 0 7
71297: IFFALSE 71364
// for i = 1 to fishes do
71299: LD_ADDR_VAR 0 11
71303: PUSH
71304: DOUBLE
71305: LD_INT 1
71307: DEC
71308: ST_TO_ADDR
71309: LD_VAR 0 7
71313: PUSH
71314: FOR_TO
71315: IFFALSE 71362
// begin hc_class = 20 ;
71317: LD_ADDR_OWVAR 28
71321: PUSH
71322: LD_INT 20
71324: ST_TO_ADDR
// hc_gallery =  ;
71325: LD_ADDR_OWVAR 33
71329: PUSH
71330: LD_STRING 
71332: ST_TO_ADDR
// animal := CreateHuman ;
71333: LD_ADDR_VAR 0 12
71337: PUSH
71338: CALL_OW 44
71342: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71343: LD_VAR 0 12
71347: PPUSH
71348: LD_VAR 0 9
71352: PPUSH
71353: LD_INT 0
71355: PPUSH
71356: CALL 73053 0 3
// end ;
71360: GO 71314
71362: POP
71363: POP
// end ;
71364: LD_VAR 0 10
71368: RET
// export function WantHeal ( sci , unit ) ; begin
71369: LD_INT 0
71371: PPUSH
// if GetTaskList ( sci ) > 0 then
71372: LD_VAR 0 1
71376: PPUSH
71377: CALL_OW 437
71381: PUSH
71382: LD_INT 0
71384: GREATER
71385: IFFALSE 71455
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71387: LD_VAR 0 1
71391: PPUSH
71392: CALL_OW 437
71396: PUSH
71397: LD_INT 1
71399: ARRAY
71400: PUSH
71401: LD_INT 1
71403: ARRAY
71404: PUSH
71405: LD_STRING l
71407: EQUAL
71408: PUSH
71409: LD_VAR 0 1
71413: PPUSH
71414: CALL_OW 437
71418: PUSH
71419: LD_INT 1
71421: ARRAY
71422: PUSH
71423: LD_INT 4
71425: ARRAY
71426: PUSH
71427: LD_VAR 0 2
71431: EQUAL
71432: AND
71433: IFFALSE 71445
// result := true else
71435: LD_ADDR_VAR 0 3
71439: PUSH
71440: LD_INT 1
71442: ST_TO_ADDR
71443: GO 71453
// result := false ;
71445: LD_ADDR_VAR 0 3
71449: PUSH
71450: LD_INT 0
71452: ST_TO_ADDR
// end else
71453: GO 71463
// result := false ;
71455: LD_ADDR_VAR 0 3
71459: PUSH
71460: LD_INT 0
71462: ST_TO_ADDR
// end ;
71463: LD_VAR 0 3
71467: RET
// export function HealTarget ( sci ) ; begin
71468: LD_INT 0
71470: PPUSH
// if not sci then
71471: LD_VAR 0 1
71475: NOT
71476: IFFALSE 71480
// exit ;
71478: GO 71545
// result := 0 ;
71480: LD_ADDR_VAR 0 2
71484: PUSH
71485: LD_INT 0
71487: ST_TO_ADDR
// if GetTaskList ( sci ) then
71488: LD_VAR 0 1
71492: PPUSH
71493: CALL_OW 437
71497: IFFALSE 71545
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71499: LD_VAR 0 1
71503: PPUSH
71504: CALL_OW 437
71508: PUSH
71509: LD_INT 1
71511: ARRAY
71512: PUSH
71513: LD_INT 1
71515: ARRAY
71516: PUSH
71517: LD_STRING l
71519: EQUAL
71520: IFFALSE 71545
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71522: LD_ADDR_VAR 0 2
71526: PUSH
71527: LD_VAR 0 1
71531: PPUSH
71532: CALL_OW 437
71536: PUSH
71537: LD_INT 1
71539: ARRAY
71540: PUSH
71541: LD_INT 4
71543: ARRAY
71544: ST_TO_ADDR
// end ;
71545: LD_VAR 0 2
71549: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71550: LD_INT 0
71552: PPUSH
71553: PPUSH
71554: PPUSH
71555: PPUSH
// if not base_units then
71556: LD_VAR 0 1
71560: NOT
71561: IFFALSE 71565
// exit ;
71563: GO 71652
// result := false ;
71565: LD_ADDR_VAR 0 2
71569: PUSH
71570: LD_INT 0
71572: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71573: LD_ADDR_VAR 0 5
71577: PUSH
71578: LD_VAR 0 1
71582: PPUSH
71583: LD_INT 21
71585: PUSH
71586: LD_INT 3
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PPUSH
71593: CALL_OW 72
71597: ST_TO_ADDR
// if not tmp then
71598: LD_VAR 0 5
71602: NOT
71603: IFFALSE 71607
// exit ;
71605: GO 71652
// for i in tmp do
71607: LD_ADDR_VAR 0 3
71611: PUSH
71612: LD_VAR 0 5
71616: PUSH
71617: FOR_IN
71618: IFFALSE 71650
// begin result := EnemyInRange ( i , 22 ) ;
71620: LD_ADDR_VAR 0 2
71624: PUSH
71625: LD_VAR 0 3
71629: PPUSH
71630: LD_INT 22
71632: PPUSH
71633: CALL 69888 0 2
71637: ST_TO_ADDR
// if result then
71638: LD_VAR 0 2
71642: IFFALSE 71648
// exit ;
71644: POP
71645: POP
71646: GO 71652
// end ;
71648: GO 71617
71650: POP
71651: POP
// end ;
71652: LD_VAR 0 2
71656: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71657: LD_INT 0
71659: PPUSH
71660: PPUSH
// if not units then
71661: LD_VAR 0 1
71665: NOT
71666: IFFALSE 71670
// exit ;
71668: GO 71740
// result := [ ] ;
71670: LD_ADDR_VAR 0 3
71674: PUSH
71675: EMPTY
71676: ST_TO_ADDR
// for i in units do
71677: LD_ADDR_VAR 0 4
71681: PUSH
71682: LD_VAR 0 1
71686: PUSH
71687: FOR_IN
71688: IFFALSE 71738
// if GetTag ( i ) = tag then
71690: LD_VAR 0 4
71694: PPUSH
71695: CALL_OW 110
71699: PUSH
71700: LD_VAR 0 2
71704: EQUAL
71705: IFFALSE 71736
// result := Replace ( result , result + 1 , i ) ;
71707: LD_ADDR_VAR 0 3
71711: PUSH
71712: LD_VAR 0 3
71716: PPUSH
71717: LD_VAR 0 3
71721: PUSH
71722: LD_INT 1
71724: PLUS
71725: PPUSH
71726: LD_VAR 0 4
71730: PPUSH
71731: CALL_OW 1
71735: ST_TO_ADDR
71736: GO 71687
71738: POP
71739: POP
// end ;
71740: LD_VAR 0 3
71744: RET
// export function IsDriver ( un ) ; begin
71745: LD_INT 0
71747: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71748: LD_ADDR_VAR 0 2
71752: PUSH
71753: LD_VAR 0 1
71757: PUSH
71758: LD_INT 55
71760: PUSH
71761: EMPTY
71762: LIST
71763: PPUSH
71764: CALL_OW 69
71768: IN
71769: ST_TO_ADDR
// end ;
71770: LD_VAR 0 2
71774: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71775: LD_INT 0
71777: PPUSH
71778: PPUSH
// list := [ ] ;
71779: LD_ADDR_VAR 0 5
71783: PUSH
71784: EMPTY
71785: ST_TO_ADDR
// case d of 0 :
71786: LD_VAR 0 3
71790: PUSH
71791: LD_INT 0
71793: DOUBLE
71794: EQUAL
71795: IFTRUE 71799
71797: GO 71932
71799: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71800: LD_ADDR_VAR 0 5
71804: PUSH
71805: LD_VAR 0 1
71809: PUSH
71810: LD_INT 4
71812: MINUS
71813: PUSH
71814: LD_VAR 0 2
71818: PUSH
71819: LD_INT 4
71821: MINUS
71822: PUSH
71823: LD_INT 2
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: LIST
71830: PUSH
71831: LD_VAR 0 1
71835: PUSH
71836: LD_INT 3
71838: MINUS
71839: PUSH
71840: LD_VAR 0 2
71844: PUSH
71845: LD_INT 1
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: LIST
71852: PUSH
71853: LD_VAR 0 1
71857: PUSH
71858: LD_INT 4
71860: PLUS
71861: PUSH
71862: LD_VAR 0 2
71866: PUSH
71867: LD_INT 4
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: LIST
71874: PUSH
71875: LD_VAR 0 1
71879: PUSH
71880: LD_INT 3
71882: PLUS
71883: PUSH
71884: LD_VAR 0 2
71888: PUSH
71889: LD_INT 3
71891: PLUS
71892: PUSH
71893: LD_INT 5
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: LIST
71900: PUSH
71901: LD_VAR 0 1
71905: PUSH
71906: LD_VAR 0 2
71910: PUSH
71911: LD_INT 4
71913: PLUS
71914: PUSH
71915: LD_INT 0
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: LIST
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: ST_TO_ADDR
// end ; 1 :
71930: GO 72630
71932: LD_INT 1
71934: DOUBLE
71935: EQUAL
71936: IFTRUE 71940
71938: GO 72073
71940: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71941: LD_ADDR_VAR 0 5
71945: PUSH
71946: LD_VAR 0 1
71950: PUSH
71951: LD_VAR 0 2
71955: PUSH
71956: LD_INT 4
71958: MINUS
71959: PUSH
71960: LD_INT 3
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: LIST
71967: PUSH
71968: LD_VAR 0 1
71972: PUSH
71973: LD_INT 3
71975: MINUS
71976: PUSH
71977: LD_VAR 0 2
71981: PUSH
71982: LD_INT 3
71984: MINUS
71985: PUSH
71986: LD_INT 2
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: LIST
71993: PUSH
71994: LD_VAR 0 1
71998: PUSH
71999: LD_INT 4
72001: MINUS
72002: PUSH
72003: LD_VAR 0 2
72007: PUSH
72008: LD_INT 1
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: LIST
72015: PUSH
72016: LD_VAR 0 1
72020: PUSH
72021: LD_VAR 0 2
72025: PUSH
72026: LD_INT 3
72028: PLUS
72029: PUSH
72030: LD_INT 0
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: LIST
72037: PUSH
72038: LD_VAR 0 1
72042: PUSH
72043: LD_INT 4
72045: PLUS
72046: PUSH
72047: LD_VAR 0 2
72051: PUSH
72052: LD_INT 4
72054: PLUS
72055: PUSH
72056: LD_INT 5
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: LIST
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: ST_TO_ADDR
// end ; 2 :
72071: GO 72630
72073: LD_INT 2
72075: DOUBLE
72076: EQUAL
72077: IFTRUE 72081
72079: GO 72210
72081: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72082: LD_ADDR_VAR 0 5
72086: PUSH
72087: LD_VAR 0 1
72091: PUSH
72092: LD_VAR 0 2
72096: PUSH
72097: LD_INT 3
72099: MINUS
72100: PUSH
72101: LD_INT 3
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: LIST
72108: PUSH
72109: LD_VAR 0 1
72113: PUSH
72114: LD_INT 4
72116: PLUS
72117: PUSH
72118: LD_VAR 0 2
72122: PUSH
72123: LD_INT 4
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: LIST
72130: PUSH
72131: LD_VAR 0 1
72135: PUSH
72136: LD_VAR 0 2
72140: PUSH
72141: LD_INT 4
72143: PLUS
72144: PUSH
72145: LD_INT 0
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: LIST
72152: PUSH
72153: LD_VAR 0 1
72157: PUSH
72158: LD_INT 3
72160: MINUS
72161: PUSH
72162: LD_VAR 0 2
72166: PUSH
72167: LD_INT 1
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: LIST
72174: PUSH
72175: LD_VAR 0 1
72179: PUSH
72180: LD_INT 4
72182: MINUS
72183: PUSH
72184: LD_VAR 0 2
72188: PUSH
72189: LD_INT 4
72191: MINUS
72192: PUSH
72193: LD_INT 2
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: LIST
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: ST_TO_ADDR
// end ; 3 :
72208: GO 72630
72210: LD_INT 3
72212: DOUBLE
72213: EQUAL
72214: IFTRUE 72218
72216: GO 72351
72218: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72219: LD_ADDR_VAR 0 5
72223: PUSH
72224: LD_VAR 0 1
72228: PUSH
72229: LD_INT 3
72231: PLUS
72232: PUSH
72233: LD_VAR 0 2
72237: PUSH
72238: LD_INT 4
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: LIST
72245: PUSH
72246: LD_VAR 0 1
72250: PUSH
72251: LD_INT 4
72253: PLUS
72254: PUSH
72255: LD_VAR 0 2
72259: PUSH
72260: LD_INT 4
72262: PLUS
72263: PUSH
72264: LD_INT 5
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: LIST
72271: PUSH
72272: LD_VAR 0 1
72276: PUSH
72277: LD_INT 4
72279: MINUS
72280: PUSH
72281: LD_VAR 0 2
72285: PUSH
72286: LD_INT 1
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: LIST
72293: PUSH
72294: LD_VAR 0 1
72298: PUSH
72299: LD_VAR 0 2
72303: PUSH
72304: LD_INT 4
72306: MINUS
72307: PUSH
72308: LD_INT 3
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: LIST
72315: PUSH
72316: LD_VAR 0 1
72320: PUSH
72321: LD_INT 3
72323: MINUS
72324: PUSH
72325: LD_VAR 0 2
72329: PUSH
72330: LD_INT 3
72332: MINUS
72333: PUSH
72334: LD_INT 2
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: LIST
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: ST_TO_ADDR
// end ; 4 :
72349: GO 72630
72351: LD_INT 4
72353: DOUBLE
72354: EQUAL
72355: IFTRUE 72359
72357: GO 72492
72359: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72360: LD_ADDR_VAR 0 5
72364: PUSH
72365: LD_VAR 0 1
72369: PUSH
72370: LD_VAR 0 2
72374: PUSH
72375: LD_INT 4
72377: PLUS
72378: PUSH
72379: LD_INT 0
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: LIST
72386: PUSH
72387: LD_VAR 0 1
72391: PUSH
72392: LD_INT 3
72394: PLUS
72395: PUSH
72396: LD_VAR 0 2
72400: PUSH
72401: LD_INT 3
72403: PLUS
72404: PUSH
72405: LD_INT 5
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: LIST
72412: PUSH
72413: LD_VAR 0 1
72417: PUSH
72418: LD_INT 4
72420: PLUS
72421: PUSH
72422: LD_VAR 0 2
72426: PUSH
72427: LD_INT 4
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: LIST
72434: PUSH
72435: LD_VAR 0 1
72439: PUSH
72440: LD_VAR 0 2
72444: PUSH
72445: LD_INT 3
72447: MINUS
72448: PUSH
72449: LD_INT 3
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: LIST
72456: PUSH
72457: LD_VAR 0 1
72461: PUSH
72462: LD_INT 4
72464: MINUS
72465: PUSH
72466: LD_VAR 0 2
72470: PUSH
72471: LD_INT 4
72473: MINUS
72474: PUSH
72475: LD_INT 2
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: LIST
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: ST_TO_ADDR
// end ; 5 :
72490: GO 72630
72492: LD_INT 5
72494: DOUBLE
72495: EQUAL
72496: IFTRUE 72500
72498: GO 72629
72500: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72501: LD_ADDR_VAR 0 5
72505: PUSH
72506: LD_VAR 0 1
72510: PUSH
72511: LD_INT 4
72513: MINUS
72514: PUSH
72515: LD_VAR 0 2
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: LIST
72527: PUSH
72528: LD_VAR 0 1
72532: PUSH
72533: LD_VAR 0 2
72537: PUSH
72538: LD_INT 4
72540: MINUS
72541: PUSH
72542: LD_INT 3
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: LIST
72549: PUSH
72550: LD_VAR 0 1
72554: PUSH
72555: LD_INT 4
72557: PLUS
72558: PUSH
72559: LD_VAR 0 2
72563: PUSH
72564: LD_INT 4
72566: PLUS
72567: PUSH
72568: LD_INT 5
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: LIST
72575: PUSH
72576: LD_VAR 0 1
72580: PUSH
72581: LD_INT 3
72583: PLUS
72584: PUSH
72585: LD_VAR 0 2
72589: PUSH
72590: LD_INT 4
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: LIST
72597: PUSH
72598: LD_VAR 0 1
72602: PUSH
72603: LD_VAR 0 2
72607: PUSH
72608: LD_INT 3
72610: PLUS
72611: PUSH
72612: LD_INT 0
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: LIST
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: ST_TO_ADDR
// end ; end ;
72627: GO 72630
72629: POP
// result := list ;
72630: LD_ADDR_VAR 0 4
72634: PUSH
72635: LD_VAR 0 5
72639: ST_TO_ADDR
// end ;
72640: LD_VAR 0 4
72644: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72645: LD_INT 0
72647: PPUSH
72648: PPUSH
72649: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72650: LD_VAR 0 1
72654: NOT
72655: PUSH
72656: LD_VAR 0 2
72660: PUSH
72661: LD_INT 1
72663: PUSH
72664: LD_INT 2
72666: PUSH
72667: LD_INT 3
72669: PUSH
72670: LD_INT 4
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: IN
72679: NOT
72680: OR
72681: IFFALSE 72685
// exit ;
72683: GO 72777
// tmp := [ ] ;
72685: LD_ADDR_VAR 0 5
72689: PUSH
72690: EMPTY
72691: ST_TO_ADDR
// for i in units do
72692: LD_ADDR_VAR 0 4
72696: PUSH
72697: LD_VAR 0 1
72701: PUSH
72702: FOR_IN
72703: IFFALSE 72746
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72705: LD_ADDR_VAR 0 5
72709: PUSH
72710: LD_VAR 0 5
72714: PPUSH
72715: LD_VAR 0 5
72719: PUSH
72720: LD_INT 1
72722: PLUS
72723: PPUSH
72724: LD_VAR 0 4
72728: PPUSH
72729: LD_VAR 0 2
72733: PPUSH
72734: CALL_OW 259
72738: PPUSH
72739: CALL_OW 2
72743: ST_TO_ADDR
72744: GO 72702
72746: POP
72747: POP
// if not tmp then
72748: LD_VAR 0 5
72752: NOT
72753: IFFALSE 72757
// exit ;
72755: GO 72777
// result := SortListByListDesc ( units , tmp ) ;
72757: LD_ADDR_VAR 0 3
72761: PUSH
72762: LD_VAR 0 1
72766: PPUSH
72767: LD_VAR 0 5
72771: PPUSH
72772: CALL_OW 77
72776: ST_TO_ADDR
// end ;
72777: LD_VAR 0 3
72781: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72782: LD_INT 0
72784: PPUSH
72785: PPUSH
72786: PPUSH
// result := false ;
72787: LD_ADDR_VAR 0 3
72791: PUSH
72792: LD_INT 0
72794: ST_TO_ADDR
// x := GetX ( building ) ;
72795: LD_ADDR_VAR 0 4
72799: PUSH
72800: LD_VAR 0 2
72804: PPUSH
72805: CALL_OW 250
72809: ST_TO_ADDR
// y := GetY ( building ) ;
72810: LD_ADDR_VAR 0 5
72814: PUSH
72815: LD_VAR 0 2
72819: PPUSH
72820: CALL_OW 251
72824: ST_TO_ADDR
// if not building or not x or not y then
72825: LD_VAR 0 2
72829: NOT
72830: PUSH
72831: LD_VAR 0 4
72835: NOT
72836: OR
72837: PUSH
72838: LD_VAR 0 5
72842: NOT
72843: OR
72844: IFFALSE 72848
// exit ;
72846: GO 72940
// if GetTaskList ( unit ) then
72848: LD_VAR 0 1
72852: PPUSH
72853: CALL_OW 437
72857: IFFALSE 72940
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72859: LD_STRING e
72861: PUSH
72862: LD_VAR 0 1
72866: PPUSH
72867: CALL_OW 437
72871: PUSH
72872: LD_INT 1
72874: ARRAY
72875: PUSH
72876: LD_INT 1
72878: ARRAY
72879: EQUAL
72880: PUSH
72881: LD_VAR 0 4
72885: PUSH
72886: LD_VAR 0 1
72890: PPUSH
72891: CALL_OW 437
72895: PUSH
72896: LD_INT 1
72898: ARRAY
72899: PUSH
72900: LD_INT 2
72902: ARRAY
72903: EQUAL
72904: AND
72905: PUSH
72906: LD_VAR 0 5
72910: PUSH
72911: LD_VAR 0 1
72915: PPUSH
72916: CALL_OW 437
72920: PUSH
72921: LD_INT 1
72923: ARRAY
72924: PUSH
72925: LD_INT 3
72927: ARRAY
72928: EQUAL
72929: AND
72930: IFFALSE 72940
// result := true end ;
72932: LD_ADDR_VAR 0 3
72936: PUSH
72937: LD_INT 1
72939: ST_TO_ADDR
// end ;
72940: LD_VAR 0 3
72944: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72945: LD_INT 0
72947: PPUSH
// result := false ;
72948: LD_ADDR_VAR 0 4
72952: PUSH
72953: LD_INT 0
72955: ST_TO_ADDR
// if GetTaskList ( unit ) then
72956: LD_VAR 0 1
72960: PPUSH
72961: CALL_OW 437
72965: IFFALSE 73048
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72967: LD_STRING M
72969: PUSH
72970: LD_VAR 0 1
72974: PPUSH
72975: CALL_OW 437
72979: PUSH
72980: LD_INT 1
72982: ARRAY
72983: PUSH
72984: LD_INT 1
72986: ARRAY
72987: EQUAL
72988: PUSH
72989: LD_VAR 0 2
72993: PUSH
72994: LD_VAR 0 1
72998: PPUSH
72999: CALL_OW 437
73003: PUSH
73004: LD_INT 1
73006: ARRAY
73007: PUSH
73008: LD_INT 2
73010: ARRAY
73011: EQUAL
73012: AND
73013: PUSH
73014: LD_VAR 0 3
73018: PUSH
73019: LD_VAR 0 1
73023: PPUSH
73024: CALL_OW 437
73028: PUSH
73029: LD_INT 1
73031: ARRAY
73032: PUSH
73033: LD_INT 3
73035: ARRAY
73036: EQUAL
73037: AND
73038: IFFALSE 73048
// result := true ;
73040: LD_ADDR_VAR 0 4
73044: PUSH
73045: LD_INT 1
73047: ST_TO_ADDR
// end ; end ;
73048: LD_VAR 0 4
73052: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73053: LD_INT 0
73055: PPUSH
73056: PPUSH
73057: PPUSH
73058: PPUSH
// if not unit or not area then
73059: LD_VAR 0 1
73063: NOT
73064: PUSH
73065: LD_VAR 0 2
73069: NOT
73070: OR
73071: IFFALSE 73075
// exit ;
73073: GO 73239
// tmp := AreaToList ( area , i ) ;
73075: LD_ADDR_VAR 0 6
73079: PUSH
73080: LD_VAR 0 2
73084: PPUSH
73085: LD_VAR 0 5
73089: PPUSH
73090: CALL_OW 517
73094: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73095: LD_ADDR_VAR 0 5
73099: PUSH
73100: DOUBLE
73101: LD_INT 1
73103: DEC
73104: ST_TO_ADDR
73105: LD_VAR 0 6
73109: PUSH
73110: LD_INT 1
73112: ARRAY
73113: PUSH
73114: FOR_TO
73115: IFFALSE 73237
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73117: LD_ADDR_VAR 0 7
73121: PUSH
73122: LD_VAR 0 6
73126: PUSH
73127: LD_INT 1
73129: ARRAY
73130: PUSH
73131: LD_VAR 0 5
73135: ARRAY
73136: PUSH
73137: LD_VAR 0 6
73141: PUSH
73142: LD_INT 2
73144: ARRAY
73145: PUSH
73146: LD_VAR 0 5
73150: ARRAY
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73156: LD_VAR 0 7
73160: PUSH
73161: LD_INT 1
73163: ARRAY
73164: PPUSH
73165: LD_VAR 0 7
73169: PUSH
73170: LD_INT 2
73172: ARRAY
73173: PPUSH
73174: CALL_OW 428
73178: PUSH
73179: LD_INT 0
73181: EQUAL
73182: IFFALSE 73235
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73184: LD_VAR 0 1
73188: PPUSH
73189: LD_VAR 0 7
73193: PUSH
73194: LD_INT 1
73196: ARRAY
73197: PPUSH
73198: LD_VAR 0 7
73202: PUSH
73203: LD_INT 2
73205: ARRAY
73206: PPUSH
73207: LD_VAR 0 3
73211: PPUSH
73212: CALL_OW 48
// result := IsPlaced ( unit ) ;
73216: LD_ADDR_VAR 0 4
73220: PUSH
73221: LD_VAR 0 1
73225: PPUSH
73226: CALL_OW 305
73230: ST_TO_ADDR
// exit ;
73231: POP
73232: POP
73233: GO 73239
// end ; end ;
73235: GO 73114
73237: POP
73238: POP
// end ;
73239: LD_VAR 0 4
73243: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73244: LD_INT 0
73246: PPUSH
73247: PPUSH
73248: PPUSH
// if not side or side > 8 then
73249: LD_VAR 0 1
73253: NOT
73254: PUSH
73255: LD_VAR 0 1
73259: PUSH
73260: LD_INT 8
73262: GREATER
73263: OR
73264: IFFALSE 73268
// exit ;
73266: GO 73455
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73268: LD_ADDR_VAR 0 4
73272: PUSH
73273: LD_INT 22
73275: PUSH
73276: LD_VAR 0 1
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: PUSH
73285: LD_INT 21
73287: PUSH
73288: LD_INT 3
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: PPUSH
73299: CALL_OW 69
73303: ST_TO_ADDR
// if not tmp then
73304: LD_VAR 0 4
73308: NOT
73309: IFFALSE 73313
// exit ;
73311: GO 73455
// enable_addtolog := true ;
73313: LD_ADDR_OWVAR 81
73317: PUSH
73318: LD_INT 1
73320: ST_TO_ADDR
// AddToLog ( [ ) ;
73321: LD_STRING [
73323: PPUSH
73324: CALL_OW 561
// for i in tmp do
73328: LD_ADDR_VAR 0 3
73332: PUSH
73333: LD_VAR 0 4
73337: PUSH
73338: FOR_IN
73339: IFFALSE 73446
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73341: LD_STRING [
73343: PUSH
73344: LD_VAR 0 3
73348: PPUSH
73349: CALL_OW 266
73353: STR
73354: PUSH
73355: LD_STRING , 
73357: STR
73358: PUSH
73359: LD_VAR 0 3
73363: PPUSH
73364: CALL_OW 250
73368: STR
73369: PUSH
73370: LD_STRING , 
73372: STR
73373: PUSH
73374: LD_VAR 0 3
73378: PPUSH
73379: CALL_OW 251
73383: STR
73384: PUSH
73385: LD_STRING , 
73387: STR
73388: PUSH
73389: LD_VAR 0 3
73393: PPUSH
73394: CALL_OW 254
73398: STR
73399: PUSH
73400: LD_STRING , 
73402: STR
73403: PUSH
73404: LD_VAR 0 3
73408: PPUSH
73409: LD_INT 1
73411: PPUSH
73412: CALL_OW 268
73416: STR
73417: PUSH
73418: LD_STRING , 
73420: STR
73421: PUSH
73422: LD_VAR 0 3
73426: PPUSH
73427: LD_INT 2
73429: PPUSH
73430: CALL_OW 268
73434: STR
73435: PUSH
73436: LD_STRING ],
73438: STR
73439: PPUSH
73440: CALL_OW 561
// end ;
73444: GO 73338
73446: POP
73447: POP
// AddToLog ( ]; ) ;
73448: LD_STRING ];
73450: PPUSH
73451: CALL_OW 561
// end ;
73455: LD_VAR 0 2
73459: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73460: LD_INT 0
73462: PPUSH
73463: PPUSH
73464: PPUSH
73465: PPUSH
73466: PPUSH
// if not area or not rate or not max then
73467: LD_VAR 0 1
73471: NOT
73472: PUSH
73473: LD_VAR 0 2
73477: NOT
73478: OR
73479: PUSH
73480: LD_VAR 0 4
73484: NOT
73485: OR
73486: IFFALSE 73490
// exit ;
73488: GO 73682
// while 1 do
73490: LD_INT 1
73492: IFFALSE 73682
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73494: LD_ADDR_VAR 0 9
73498: PUSH
73499: LD_VAR 0 1
73503: PPUSH
73504: LD_INT 1
73506: PPUSH
73507: CALL_OW 287
73511: PUSH
73512: LD_INT 10
73514: MUL
73515: ST_TO_ADDR
// r := rate / 10 ;
73516: LD_ADDR_VAR 0 7
73520: PUSH
73521: LD_VAR 0 2
73525: PUSH
73526: LD_INT 10
73528: DIVREAL
73529: ST_TO_ADDR
// time := 1 1$00 ;
73530: LD_ADDR_VAR 0 8
73534: PUSH
73535: LD_INT 2100
73537: ST_TO_ADDR
// if amount < min then
73538: LD_VAR 0 9
73542: PUSH
73543: LD_VAR 0 3
73547: LESS
73548: IFFALSE 73566
// r := r * 2 else
73550: LD_ADDR_VAR 0 7
73554: PUSH
73555: LD_VAR 0 7
73559: PUSH
73560: LD_INT 2
73562: MUL
73563: ST_TO_ADDR
73564: GO 73592
// if amount > max then
73566: LD_VAR 0 9
73570: PUSH
73571: LD_VAR 0 4
73575: GREATER
73576: IFFALSE 73592
// r := r / 2 ;
73578: LD_ADDR_VAR 0 7
73582: PUSH
73583: LD_VAR 0 7
73587: PUSH
73588: LD_INT 2
73590: DIVREAL
73591: ST_TO_ADDR
// time := time / r ;
73592: LD_ADDR_VAR 0 8
73596: PUSH
73597: LD_VAR 0 8
73601: PUSH
73602: LD_VAR 0 7
73606: DIVREAL
73607: ST_TO_ADDR
// if time < 0 then
73608: LD_VAR 0 8
73612: PUSH
73613: LD_INT 0
73615: LESS
73616: IFFALSE 73633
// time := time * - 1 ;
73618: LD_ADDR_VAR 0 8
73622: PUSH
73623: LD_VAR 0 8
73627: PUSH
73628: LD_INT 1
73630: NEG
73631: MUL
73632: ST_TO_ADDR
// wait ( time ) ;
73633: LD_VAR 0 8
73637: PPUSH
73638: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73642: LD_INT 35
73644: PPUSH
73645: LD_INT 875
73647: PPUSH
73648: CALL_OW 12
73652: PPUSH
73653: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73657: LD_INT 1
73659: PPUSH
73660: LD_INT 5
73662: PPUSH
73663: CALL_OW 12
73667: PPUSH
73668: LD_VAR 0 1
73672: PPUSH
73673: LD_INT 1
73675: PPUSH
73676: CALL_OW 55
// end ;
73680: GO 73490
// end ;
73682: LD_VAR 0 5
73686: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73687: LD_INT 0
73689: PPUSH
73690: PPUSH
73691: PPUSH
73692: PPUSH
73693: PPUSH
73694: PPUSH
73695: PPUSH
73696: PPUSH
// if not turrets or not factories then
73697: LD_VAR 0 1
73701: NOT
73702: PUSH
73703: LD_VAR 0 2
73707: NOT
73708: OR
73709: IFFALSE 73713
// exit ;
73711: GO 74020
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73713: LD_ADDR_VAR 0 10
73717: PUSH
73718: LD_INT 5
73720: PUSH
73721: LD_INT 6
73723: PUSH
73724: EMPTY
73725: LIST
73726: LIST
73727: PUSH
73728: LD_INT 2
73730: PUSH
73731: LD_INT 4
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 3
73740: PUSH
73741: LD_INT 5
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: LIST
73752: PUSH
73753: LD_INT 24
73755: PUSH
73756: LD_INT 25
73758: PUSH
73759: EMPTY
73760: LIST
73761: LIST
73762: PUSH
73763: LD_INT 23
73765: PUSH
73766: LD_INT 27
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: EMPTY
73774: LIST
73775: LIST
73776: PUSH
73777: LD_INT 42
73779: PUSH
73780: LD_INT 43
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: PUSH
73787: LD_INT 44
73789: PUSH
73790: LD_INT 46
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: PUSH
73797: LD_INT 45
73799: PUSH
73800: LD_INT 47
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: LIST
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: LIST
73816: ST_TO_ADDR
// result := [ ] ;
73817: LD_ADDR_VAR 0 3
73821: PUSH
73822: EMPTY
73823: ST_TO_ADDR
// for i in turrets do
73824: LD_ADDR_VAR 0 4
73828: PUSH
73829: LD_VAR 0 1
73833: PUSH
73834: FOR_IN
73835: IFFALSE 74018
// begin nat := GetNation ( i ) ;
73837: LD_ADDR_VAR 0 7
73841: PUSH
73842: LD_VAR 0 4
73846: PPUSH
73847: CALL_OW 248
73851: ST_TO_ADDR
// weapon := 0 ;
73852: LD_ADDR_VAR 0 8
73856: PUSH
73857: LD_INT 0
73859: ST_TO_ADDR
// if not nat then
73860: LD_VAR 0 7
73864: NOT
73865: IFFALSE 73869
// continue ;
73867: GO 73834
// for j in list [ nat ] do
73869: LD_ADDR_VAR 0 5
73873: PUSH
73874: LD_VAR 0 10
73878: PUSH
73879: LD_VAR 0 7
73883: ARRAY
73884: PUSH
73885: FOR_IN
73886: IFFALSE 73927
// if GetBWeapon ( i ) = j [ 1 ] then
73888: LD_VAR 0 4
73892: PPUSH
73893: CALL_OW 269
73897: PUSH
73898: LD_VAR 0 5
73902: PUSH
73903: LD_INT 1
73905: ARRAY
73906: EQUAL
73907: IFFALSE 73925
// begin weapon := j [ 2 ] ;
73909: LD_ADDR_VAR 0 8
73913: PUSH
73914: LD_VAR 0 5
73918: PUSH
73919: LD_INT 2
73921: ARRAY
73922: ST_TO_ADDR
// break ;
73923: GO 73927
// end ;
73925: GO 73885
73927: POP
73928: POP
// if not weapon then
73929: LD_VAR 0 8
73933: NOT
73934: IFFALSE 73938
// continue ;
73936: GO 73834
// for k in factories do
73938: LD_ADDR_VAR 0 6
73942: PUSH
73943: LD_VAR 0 2
73947: PUSH
73948: FOR_IN
73949: IFFALSE 74014
// begin weapons := AvailableWeaponList ( k ) ;
73951: LD_ADDR_VAR 0 9
73955: PUSH
73956: LD_VAR 0 6
73960: PPUSH
73961: CALL_OW 478
73965: ST_TO_ADDR
// if not weapons then
73966: LD_VAR 0 9
73970: NOT
73971: IFFALSE 73975
// continue ;
73973: GO 73948
// if weapon in weapons then
73975: LD_VAR 0 8
73979: PUSH
73980: LD_VAR 0 9
73984: IN
73985: IFFALSE 74012
// begin result := [ i , weapon ] ;
73987: LD_ADDR_VAR 0 3
73991: PUSH
73992: LD_VAR 0 4
73996: PUSH
73997: LD_VAR 0 8
74001: PUSH
74002: EMPTY
74003: LIST
74004: LIST
74005: ST_TO_ADDR
// exit ;
74006: POP
74007: POP
74008: POP
74009: POP
74010: GO 74020
// end ; end ;
74012: GO 73948
74014: POP
74015: POP
// end ;
74016: GO 73834
74018: POP
74019: POP
// end ;
74020: LD_VAR 0 3
74024: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74025: LD_INT 0
74027: PPUSH
// if not side or side > 8 then
74028: LD_VAR 0 3
74032: NOT
74033: PUSH
74034: LD_VAR 0 3
74038: PUSH
74039: LD_INT 8
74041: GREATER
74042: OR
74043: IFFALSE 74047
// exit ;
74045: GO 74106
// if not range then
74047: LD_VAR 0 4
74051: NOT
74052: IFFALSE 74063
// range := - 12 ;
74054: LD_ADDR_VAR 0 4
74058: PUSH
74059: LD_INT 12
74061: NEG
74062: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74063: LD_VAR 0 1
74067: PPUSH
74068: LD_VAR 0 2
74072: PPUSH
74073: LD_VAR 0 3
74077: PPUSH
74078: LD_VAR 0 4
74082: PPUSH
74083: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74087: LD_VAR 0 1
74091: PPUSH
74092: LD_VAR 0 2
74096: PPUSH
74097: LD_VAR 0 3
74101: PPUSH
74102: CALL_OW 331
// end ;
74106: LD_VAR 0 5
74110: RET
// export function Video ( mode ) ; begin
74111: LD_INT 0
74113: PPUSH
// ingame_video = mode ;
74114: LD_ADDR_OWVAR 52
74118: PUSH
74119: LD_VAR 0 1
74123: ST_TO_ADDR
// interface_hidden = mode ;
74124: LD_ADDR_OWVAR 54
74128: PUSH
74129: LD_VAR 0 1
74133: ST_TO_ADDR
// end ;
74134: LD_VAR 0 2
74138: RET
// export function Join ( array , element ) ; begin
74139: LD_INT 0
74141: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74142: LD_ADDR_VAR 0 3
74146: PUSH
74147: LD_VAR 0 1
74151: PPUSH
74152: LD_VAR 0 1
74156: PUSH
74157: LD_INT 1
74159: PLUS
74160: PPUSH
74161: LD_VAR 0 2
74165: PPUSH
74166: CALL_OW 1
74170: ST_TO_ADDR
// end ;
74171: LD_VAR 0 3
74175: RET
// export function JoinUnion ( array , element ) ; begin
74176: LD_INT 0
74178: PPUSH
// result := array union element ;
74179: LD_ADDR_VAR 0 3
74183: PUSH
74184: LD_VAR 0 1
74188: PUSH
74189: LD_VAR 0 2
74193: UNION
74194: ST_TO_ADDR
// end ;
74195: LD_VAR 0 3
74199: RET
// export function GetBehemoths ( side ) ; begin
74200: LD_INT 0
74202: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74203: LD_ADDR_VAR 0 2
74207: PUSH
74208: LD_INT 22
74210: PUSH
74211: LD_VAR 0 1
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: PUSH
74220: LD_INT 31
74222: PUSH
74223: LD_INT 25
74225: PUSH
74226: EMPTY
74227: LIST
74228: LIST
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: PPUSH
74234: CALL_OW 69
74238: ST_TO_ADDR
// end ;
74239: LD_VAR 0 2
74243: RET
// export function Shuffle ( array ) ; var i , index ; begin
74244: LD_INT 0
74246: PPUSH
74247: PPUSH
74248: PPUSH
// result := [ ] ;
74249: LD_ADDR_VAR 0 2
74253: PUSH
74254: EMPTY
74255: ST_TO_ADDR
// if not array then
74256: LD_VAR 0 1
74260: NOT
74261: IFFALSE 74265
// exit ;
74263: GO 74364
// Randomize ;
74265: CALL_OW 10
// for i = array downto 1 do
74269: LD_ADDR_VAR 0 3
74273: PUSH
74274: DOUBLE
74275: LD_VAR 0 1
74279: INC
74280: ST_TO_ADDR
74281: LD_INT 1
74283: PUSH
74284: FOR_DOWNTO
74285: IFFALSE 74362
// begin index := rand ( 1 , array ) ;
74287: LD_ADDR_VAR 0 4
74291: PUSH
74292: LD_INT 1
74294: PPUSH
74295: LD_VAR 0 1
74299: PPUSH
74300: CALL_OW 12
74304: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74305: LD_ADDR_VAR 0 2
74309: PUSH
74310: LD_VAR 0 2
74314: PPUSH
74315: LD_VAR 0 2
74319: PUSH
74320: LD_INT 1
74322: PLUS
74323: PPUSH
74324: LD_VAR 0 1
74328: PUSH
74329: LD_VAR 0 4
74333: ARRAY
74334: PPUSH
74335: CALL_OW 2
74339: ST_TO_ADDR
// array := Delete ( array , index ) ;
74340: LD_ADDR_VAR 0 1
74344: PUSH
74345: LD_VAR 0 1
74349: PPUSH
74350: LD_VAR 0 4
74354: PPUSH
74355: CALL_OW 3
74359: ST_TO_ADDR
// end ;
74360: GO 74284
74362: POP
74363: POP
// end ;
74364: LD_VAR 0 2
74368: RET
// export function GetBaseMaterials ( base ) ; begin
74369: LD_INT 0
74371: PPUSH
// result := [ 0 , 0 , 0 ] ;
74372: LD_ADDR_VAR 0 2
74376: PUSH
74377: LD_INT 0
74379: PUSH
74380: LD_INT 0
74382: PUSH
74383: LD_INT 0
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: LIST
74390: ST_TO_ADDR
// if not base then
74391: LD_VAR 0 1
74395: NOT
74396: IFFALSE 74400
// exit ;
74398: GO 74449
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74400: LD_ADDR_VAR 0 2
74404: PUSH
74405: LD_VAR 0 1
74409: PPUSH
74410: LD_INT 1
74412: PPUSH
74413: CALL_OW 275
74417: PUSH
74418: LD_VAR 0 1
74422: PPUSH
74423: LD_INT 2
74425: PPUSH
74426: CALL_OW 275
74430: PUSH
74431: LD_VAR 0 1
74435: PPUSH
74436: LD_INT 3
74438: PPUSH
74439: CALL_OW 275
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: LIST
74448: ST_TO_ADDR
// end ;
74449: LD_VAR 0 2
74453: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74454: LD_INT 0
74456: PPUSH
74457: PPUSH
// result := array ;
74458: LD_ADDR_VAR 0 3
74462: PUSH
74463: LD_VAR 0 1
74467: ST_TO_ADDR
// if size > 0 then
74468: LD_VAR 0 2
74472: PUSH
74473: LD_INT 0
74475: GREATER
74476: IFFALSE 74522
// for i := array downto size do
74478: LD_ADDR_VAR 0 4
74482: PUSH
74483: DOUBLE
74484: LD_VAR 0 1
74488: INC
74489: ST_TO_ADDR
74490: LD_VAR 0 2
74494: PUSH
74495: FOR_DOWNTO
74496: IFFALSE 74520
// result := Delete ( result , result ) ;
74498: LD_ADDR_VAR 0 3
74502: PUSH
74503: LD_VAR 0 3
74507: PPUSH
74508: LD_VAR 0 3
74512: PPUSH
74513: CALL_OW 3
74517: ST_TO_ADDR
74518: GO 74495
74520: POP
74521: POP
// end ;
74522: LD_VAR 0 3
74526: RET
// export function ComExit ( unit ) ; var tmp ; begin
74527: LD_INT 0
74529: PPUSH
74530: PPUSH
// if not IsInUnit ( unit ) then
74531: LD_VAR 0 1
74535: PPUSH
74536: CALL_OW 310
74540: NOT
74541: IFFALSE 74545
// exit ;
74543: GO 74605
// tmp := IsInUnit ( unit ) ;
74545: LD_ADDR_VAR 0 3
74549: PUSH
74550: LD_VAR 0 1
74554: PPUSH
74555: CALL_OW 310
74559: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74560: LD_VAR 0 3
74564: PPUSH
74565: CALL_OW 247
74569: PUSH
74570: LD_INT 2
74572: EQUAL
74573: IFFALSE 74586
// ComExitVehicle ( unit ) else
74575: LD_VAR 0 1
74579: PPUSH
74580: CALL_OW 121
74584: GO 74595
// ComExitBuilding ( unit ) ;
74586: LD_VAR 0 1
74590: PPUSH
74591: CALL_OW 122
// result := tmp ;
74595: LD_ADDR_VAR 0 2
74599: PUSH
74600: LD_VAR 0 3
74604: ST_TO_ADDR
// end ;
74605: LD_VAR 0 2
74609: RET
// export function ComExitAll ( units ) ; var i ; begin
74610: LD_INT 0
74612: PPUSH
74613: PPUSH
// if not units then
74614: LD_VAR 0 1
74618: NOT
74619: IFFALSE 74623
// exit ;
74621: GO 74649
// for i in units do
74623: LD_ADDR_VAR 0 3
74627: PUSH
74628: LD_VAR 0 1
74632: PUSH
74633: FOR_IN
74634: IFFALSE 74647
// ComExit ( i ) ;
74636: LD_VAR 0 3
74640: PPUSH
74641: CALL 74527 0 1
74645: GO 74633
74647: POP
74648: POP
// end ;
74649: LD_VAR 0 2
74653: RET
// export function ResetHc ; begin
74654: LD_INT 0
74656: PPUSH
// InitHc ;
74657: CALL_OW 19
// hc_importance := 0 ;
74661: LD_ADDR_OWVAR 32
74665: PUSH
74666: LD_INT 0
74668: ST_TO_ADDR
// end ;
74669: LD_VAR 0 1
74673: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74674: LD_INT 0
74676: PPUSH
74677: PPUSH
74678: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74679: LD_ADDR_VAR 0 6
74683: PUSH
74684: LD_VAR 0 1
74688: PUSH
74689: LD_VAR 0 3
74693: PLUS
74694: PUSH
74695: LD_INT 2
74697: DIV
74698: ST_TO_ADDR
// if _x < 0 then
74699: LD_VAR 0 6
74703: PUSH
74704: LD_INT 0
74706: LESS
74707: IFFALSE 74724
// _x := _x * - 1 ;
74709: LD_ADDR_VAR 0 6
74713: PUSH
74714: LD_VAR 0 6
74718: PUSH
74719: LD_INT 1
74721: NEG
74722: MUL
74723: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74724: LD_ADDR_VAR 0 7
74728: PUSH
74729: LD_VAR 0 2
74733: PUSH
74734: LD_VAR 0 4
74738: PLUS
74739: PUSH
74740: LD_INT 2
74742: DIV
74743: ST_TO_ADDR
// if _y < 0 then
74744: LD_VAR 0 7
74748: PUSH
74749: LD_INT 0
74751: LESS
74752: IFFALSE 74769
// _y := _y * - 1 ;
74754: LD_ADDR_VAR 0 7
74758: PUSH
74759: LD_VAR 0 7
74763: PUSH
74764: LD_INT 1
74766: NEG
74767: MUL
74768: ST_TO_ADDR
// result := [ _x , _y ] ;
74769: LD_ADDR_VAR 0 5
74773: PUSH
74774: LD_VAR 0 6
74778: PUSH
74779: LD_VAR 0 7
74783: PUSH
74784: EMPTY
74785: LIST
74786: LIST
74787: ST_TO_ADDR
// end ;
74788: LD_VAR 0 5
74792: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74793: LD_INT 0
74795: PPUSH
74796: PPUSH
74797: PPUSH
74798: PPUSH
// task := GetTaskList ( unit ) ;
74799: LD_ADDR_VAR 0 7
74803: PUSH
74804: LD_VAR 0 1
74808: PPUSH
74809: CALL_OW 437
74813: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74814: LD_VAR 0 7
74818: NOT
74819: PUSH
74820: LD_VAR 0 1
74824: PPUSH
74825: LD_VAR 0 2
74829: PPUSH
74830: CALL_OW 308
74834: NOT
74835: AND
74836: IFFALSE 74840
// exit ;
74838: GO 74958
// if IsInArea ( unit , area ) then
74840: LD_VAR 0 1
74844: PPUSH
74845: LD_VAR 0 2
74849: PPUSH
74850: CALL_OW 308
74854: IFFALSE 74872
// begin ComMoveToArea ( unit , goAway ) ;
74856: LD_VAR 0 1
74860: PPUSH
74861: LD_VAR 0 3
74865: PPUSH
74866: CALL_OW 113
// exit ;
74870: GO 74958
// end ; if task [ 1 ] [ 1 ] <> M then
74872: LD_VAR 0 7
74876: PUSH
74877: LD_INT 1
74879: ARRAY
74880: PUSH
74881: LD_INT 1
74883: ARRAY
74884: PUSH
74885: LD_STRING M
74887: NONEQUAL
74888: IFFALSE 74892
// exit ;
74890: GO 74958
// x := task [ 1 ] [ 2 ] ;
74892: LD_ADDR_VAR 0 5
74896: PUSH
74897: LD_VAR 0 7
74901: PUSH
74902: LD_INT 1
74904: ARRAY
74905: PUSH
74906: LD_INT 2
74908: ARRAY
74909: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74910: LD_ADDR_VAR 0 6
74914: PUSH
74915: LD_VAR 0 7
74919: PUSH
74920: LD_INT 1
74922: ARRAY
74923: PUSH
74924: LD_INT 3
74926: ARRAY
74927: ST_TO_ADDR
// if InArea ( x , y , area ) then
74928: LD_VAR 0 5
74932: PPUSH
74933: LD_VAR 0 6
74937: PPUSH
74938: LD_VAR 0 2
74942: PPUSH
74943: CALL_OW 309
74947: IFFALSE 74958
// ComStop ( unit ) ;
74949: LD_VAR 0 1
74953: PPUSH
74954: CALL_OW 141
// end ;
74958: LD_VAR 0 4
74962: RET
// export function Abs ( value ) ; begin
74963: LD_INT 0
74965: PPUSH
// result := value ;
74966: LD_ADDR_VAR 0 2
74970: PUSH
74971: LD_VAR 0 1
74975: ST_TO_ADDR
// if value < 0 then
74976: LD_VAR 0 1
74980: PUSH
74981: LD_INT 0
74983: LESS
74984: IFFALSE 75001
// result := value * - 1 ;
74986: LD_ADDR_VAR 0 2
74990: PUSH
74991: LD_VAR 0 1
74995: PUSH
74996: LD_INT 1
74998: NEG
74999: MUL
75000: ST_TO_ADDR
// end ;
75001: LD_VAR 0 2
75005: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75006: LD_INT 0
75008: PPUSH
75009: PPUSH
75010: PPUSH
75011: PPUSH
75012: PPUSH
75013: PPUSH
75014: PPUSH
75015: PPUSH
// if not unit or not building then
75016: LD_VAR 0 1
75020: NOT
75021: PUSH
75022: LD_VAR 0 2
75026: NOT
75027: OR
75028: IFFALSE 75032
// exit ;
75030: GO 75258
// x := GetX ( building ) ;
75032: LD_ADDR_VAR 0 4
75036: PUSH
75037: LD_VAR 0 2
75041: PPUSH
75042: CALL_OW 250
75046: ST_TO_ADDR
// y := GetY ( building ) ;
75047: LD_ADDR_VAR 0 6
75051: PUSH
75052: LD_VAR 0 2
75056: PPUSH
75057: CALL_OW 251
75061: ST_TO_ADDR
// d := GetDir ( building ) ;
75062: LD_ADDR_VAR 0 8
75066: PUSH
75067: LD_VAR 0 2
75071: PPUSH
75072: CALL_OW 254
75076: ST_TO_ADDR
// r := 4 ;
75077: LD_ADDR_VAR 0 9
75081: PUSH
75082: LD_INT 4
75084: ST_TO_ADDR
// for i := 1 to 5 do
75085: LD_ADDR_VAR 0 10
75089: PUSH
75090: DOUBLE
75091: LD_INT 1
75093: DEC
75094: ST_TO_ADDR
75095: LD_INT 5
75097: PUSH
75098: FOR_TO
75099: IFFALSE 75256
// begin _x := ShiftX ( x , d , r + i ) ;
75101: LD_ADDR_VAR 0 5
75105: PUSH
75106: LD_VAR 0 4
75110: PPUSH
75111: LD_VAR 0 8
75115: PPUSH
75116: LD_VAR 0 9
75120: PUSH
75121: LD_VAR 0 10
75125: PLUS
75126: PPUSH
75127: CALL_OW 272
75131: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75132: LD_ADDR_VAR 0 7
75136: PUSH
75137: LD_VAR 0 6
75141: PPUSH
75142: LD_VAR 0 8
75146: PPUSH
75147: LD_VAR 0 9
75151: PUSH
75152: LD_VAR 0 10
75156: PLUS
75157: PPUSH
75158: CALL_OW 273
75162: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75163: LD_VAR 0 5
75167: PPUSH
75168: LD_VAR 0 7
75172: PPUSH
75173: CALL_OW 488
75177: PUSH
75178: LD_VAR 0 5
75182: PPUSH
75183: LD_VAR 0 7
75187: PPUSH
75188: CALL_OW 428
75192: PPUSH
75193: CALL_OW 247
75197: PUSH
75198: LD_INT 3
75200: PUSH
75201: LD_INT 2
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: IN
75208: NOT
75209: AND
75210: IFFALSE 75254
// begin ComMoveXY ( unit , _x , _y ) ;
75212: LD_VAR 0 1
75216: PPUSH
75217: LD_VAR 0 5
75221: PPUSH
75222: LD_VAR 0 7
75226: PPUSH
75227: CALL_OW 111
// result := [ _x , _y ] ;
75231: LD_ADDR_VAR 0 3
75235: PUSH
75236: LD_VAR 0 5
75240: PUSH
75241: LD_VAR 0 7
75245: PUSH
75246: EMPTY
75247: LIST
75248: LIST
75249: ST_TO_ADDR
// exit ;
75250: POP
75251: POP
75252: GO 75258
// end ; end ;
75254: GO 75098
75256: POP
75257: POP
// end ;
75258: LD_VAR 0 3
75262: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75263: LD_INT 0
75265: PPUSH
75266: PPUSH
75267: PPUSH
// result := 0 ;
75268: LD_ADDR_VAR 0 3
75272: PUSH
75273: LD_INT 0
75275: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75276: LD_VAR 0 1
75280: PUSH
75281: LD_INT 0
75283: LESS
75284: PUSH
75285: LD_VAR 0 1
75289: PUSH
75290: LD_INT 8
75292: GREATER
75293: OR
75294: PUSH
75295: LD_VAR 0 2
75299: PUSH
75300: LD_INT 0
75302: LESS
75303: OR
75304: PUSH
75305: LD_VAR 0 2
75309: PUSH
75310: LD_INT 8
75312: GREATER
75313: OR
75314: IFFALSE 75318
// exit ;
75316: GO 75393
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75318: LD_ADDR_VAR 0 4
75322: PUSH
75323: LD_INT 22
75325: PUSH
75326: LD_VAR 0 2
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PPUSH
75335: CALL_OW 69
75339: PUSH
75340: FOR_IN
75341: IFFALSE 75391
// begin un := UnitShoot ( i ) ;
75343: LD_ADDR_VAR 0 5
75347: PUSH
75348: LD_VAR 0 4
75352: PPUSH
75353: CALL_OW 504
75357: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75358: LD_VAR 0 5
75362: PPUSH
75363: CALL_OW 255
75367: PUSH
75368: LD_VAR 0 1
75372: EQUAL
75373: IFFALSE 75389
// begin result := un ;
75375: LD_ADDR_VAR 0 3
75379: PUSH
75380: LD_VAR 0 5
75384: ST_TO_ADDR
// exit ;
75385: POP
75386: POP
75387: GO 75393
// end ; end ;
75389: GO 75340
75391: POP
75392: POP
// end ;
75393: LD_VAR 0 3
75397: RET
// export function GetCargoBay ( units ) ; begin
75398: LD_INT 0
75400: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75401: LD_ADDR_VAR 0 2
75405: PUSH
75406: LD_VAR 0 1
75410: PPUSH
75411: LD_INT 2
75413: PUSH
75414: LD_INT 34
75416: PUSH
75417: LD_INT 12
75419: PUSH
75420: EMPTY
75421: LIST
75422: LIST
75423: PUSH
75424: LD_INT 34
75426: PUSH
75427: LD_INT 51
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: PUSH
75434: LD_INT 34
75436: PUSH
75437: LD_INT 32
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PUSH
75444: LD_INT 34
75446: PUSH
75447: LD_EXP 49
75451: PUSH
75452: EMPTY
75453: LIST
75454: LIST
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: PPUSH
75463: CALL_OW 72
75467: ST_TO_ADDR
// end ;
75468: LD_VAR 0 2
75472: RET
// export function Negate ( value ) ; begin
75473: LD_INT 0
75475: PPUSH
// result := not value ;
75476: LD_ADDR_VAR 0 2
75480: PUSH
75481: LD_VAR 0 1
75485: NOT
75486: ST_TO_ADDR
// end ;
75487: LD_VAR 0 2
75491: RET
// export function Inc ( value ) ; begin
75492: LD_INT 0
75494: PPUSH
// result := value + 1 ;
75495: LD_ADDR_VAR 0 2
75499: PUSH
75500: LD_VAR 0 1
75504: PUSH
75505: LD_INT 1
75507: PLUS
75508: ST_TO_ADDR
// end ;
75509: LD_VAR 0 2
75513: RET
// export function Dec ( value ) ; begin
75514: LD_INT 0
75516: PPUSH
// result := value - 1 ;
75517: LD_ADDR_VAR 0 2
75521: PUSH
75522: LD_VAR 0 1
75526: PUSH
75527: LD_INT 1
75529: MINUS
75530: ST_TO_ADDR
// end ;
75531: LD_VAR 0 2
75535: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75536: LD_INT 0
75538: PPUSH
75539: PPUSH
75540: PPUSH
75541: PPUSH
75542: PPUSH
75543: PPUSH
75544: PPUSH
75545: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75546: LD_VAR 0 1
75550: PPUSH
75551: LD_VAR 0 2
75555: PPUSH
75556: CALL_OW 488
75560: NOT
75561: PUSH
75562: LD_VAR 0 3
75566: PPUSH
75567: LD_VAR 0 4
75571: PPUSH
75572: CALL_OW 488
75576: NOT
75577: OR
75578: IFFALSE 75591
// begin result := - 1 ;
75580: LD_ADDR_VAR 0 5
75584: PUSH
75585: LD_INT 1
75587: NEG
75588: ST_TO_ADDR
// exit ;
75589: GO 75826
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75591: LD_ADDR_VAR 0 12
75595: PUSH
75596: LD_VAR 0 1
75600: PPUSH
75601: LD_VAR 0 2
75605: PPUSH
75606: LD_VAR 0 3
75610: PPUSH
75611: LD_VAR 0 4
75615: PPUSH
75616: CALL 74674 0 4
75620: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75621: LD_ADDR_VAR 0 11
75625: PUSH
75626: LD_VAR 0 1
75630: PPUSH
75631: LD_VAR 0 2
75635: PPUSH
75636: LD_VAR 0 12
75640: PUSH
75641: LD_INT 1
75643: ARRAY
75644: PPUSH
75645: LD_VAR 0 12
75649: PUSH
75650: LD_INT 2
75652: ARRAY
75653: PPUSH
75654: CALL_OW 298
75658: ST_TO_ADDR
// distance := 9999 ;
75659: LD_ADDR_VAR 0 10
75663: PUSH
75664: LD_INT 9999
75666: ST_TO_ADDR
// for i := 0 to 5 do
75667: LD_ADDR_VAR 0 6
75671: PUSH
75672: DOUBLE
75673: LD_INT 0
75675: DEC
75676: ST_TO_ADDR
75677: LD_INT 5
75679: PUSH
75680: FOR_TO
75681: IFFALSE 75824
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75683: LD_ADDR_VAR 0 7
75687: PUSH
75688: LD_VAR 0 1
75692: PPUSH
75693: LD_VAR 0 6
75697: PPUSH
75698: LD_VAR 0 11
75702: PPUSH
75703: CALL_OW 272
75707: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75708: LD_ADDR_VAR 0 8
75712: PUSH
75713: LD_VAR 0 2
75717: PPUSH
75718: LD_VAR 0 6
75722: PPUSH
75723: LD_VAR 0 11
75727: PPUSH
75728: CALL_OW 273
75732: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75733: LD_VAR 0 7
75737: PPUSH
75738: LD_VAR 0 8
75742: PPUSH
75743: CALL_OW 488
75747: NOT
75748: IFFALSE 75752
// continue ;
75750: GO 75680
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75752: LD_ADDR_VAR 0 9
75756: PUSH
75757: LD_VAR 0 12
75761: PUSH
75762: LD_INT 1
75764: ARRAY
75765: PPUSH
75766: LD_VAR 0 12
75770: PUSH
75771: LD_INT 2
75773: ARRAY
75774: PPUSH
75775: LD_VAR 0 7
75779: PPUSH
75780: LD_VAR 0 8
75784: PPUSH
75785: CALL_OW 298
75789: ST_TO_ADDR
// if tmp < distance then
75790: LD_VAR 0 9
75794: PUSH
75795: LD_VAR 0 10
75799: LESS
75800: IFFALSE 75822
// begin result := i ;
75802: LD_ADDR_VAR 0 5
75806: PUSH
75807: LD_VAR 0 6
75811: ST_TO_ADDR
// distance := tmp ;
75812: LD_ADDR_VAR 0 10
75816: PUSH
75817: LD_VAR 0 9
75821: ST_TO_ADDR
// end ; end ;
75822: GO 75680
75824: POP
75825: POP
// end ;
75826: LD_VAR 0 5
75830: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75831: LD_INT 0
75833: PPUSH
75834: PPUSH
// if not driver or not IsInUnit ( driver ) then
75835: LD_VAR 0 1
75839: NOT
75840: PUSH
75841: LD_VAR 0 1
75845: PPUSH
75846: CALL_OW 310
75850: NOT
75851: OR
75852: IFFALSE 75856
// exit ;
75854: GO 75946
// vehicle := IsInUnit ( driver ) ;
75856: LD_ADDR_VAR 0 3
75860: PUSH
75861: LD_VAR 0 1
75865: PPUSH
75866: CALL_OW 310
75870: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75871: LD_VAR 0 1
75875: PPUSH
75876: LD_STRING \
75878: PUSH
75879: LD_INT 0
75881: PUSH
75882: LD_INT 0
75884: PUSH
75885: LD_INT 0
75887: PUSH
75888: LD_INT 0
75890: PUSH
75891: LD_INT 0
75893: PUSH
75894: LD_INT 0
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: PUSH
75906: LD_STRING E
75908: PUSH
75909: LD_INT 0
75911: PUSH
75912: LD_INT 0
75914: PUSH
75915: LD_VAR 0 3
75919: PUSH
75920: LD_INT 0
75922: PUSH
75923: LD_INT 0
75925: PUSH
75926: LD_INT 0
75928: PUSH
75929: EMPTY
75930: LIST
75931: LIST
75932: LIST
75933: LIST
75934: LIST
75935: LIST
75936: LIST
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: PPUSH
75942: CALL_OW 446
// end ;
75946: LD_VAR 0 2
75950: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75951: LD_INT 0
75953: PPUSH
75954: PPUSH
// if not driver or not IsInUnit ( driver ) then
75955: LD_VAR 0 1
75959: NOT
75960: PUSH
75961: LD_VAR 0 1
75965: PPUSH
75966: CALL_OW 310
75970: NOT
75971: OR
75972: IFFALSE 75976
// exit ;
75974: GO 76066
// vehicle := IsInUnit ( driver ) ;
75976: LD_ADDR_VAR 0 3
75980: PUSH
75981: LD_VAR 0 1
75985: PPUSH
75986: CALL_OW 310
75990: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75991: LD_VAR 0 1
75995: PPUSH
75996: LD_STRING \
75998: PUSH
75999: LD_INT 0
76001: PUSH
76002: LD_INT 0
76004: PUSH
76005: LD_INT 0
76007: PUSH
76008: LD_INT 0
76010: PUSH
76011: LD_INT 0
76013: PUSH
76014: LD_INT 0
76016: PUSH
76017: EMPTY
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: PUSH
76026: LD_STRING E
76028: PUSH
76029: LD_INT 0
76031: PUSH
76032: LD_INT 0
76034: PUSH
76035: LD_VAR 0 3
76039: PUSH
76040: LD_INT 0
76042: PUSH
76043: LD_INT 0
76045: PUSH
76046: LD_INT 0
76048: PUSH
76049: EMPTY
76050: LIST
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: LIST
76056: LIST
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: PPUSH
76062: CALL_OW 447
// end ;
76066: LD_VAR 0 2
76070: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76071: LD_INT 0
76073: PPUSH
76074: PPUSH
76075: PPUSH
// tmp := [ ] ;
76076: LD_ADDR_VAR 0 5
76080: PUSH
76081: EMPTY
76082: ST_TO_ADDR
// for i in units do
76083: LD_ADDR_VAR 0 4
76087: PUSH
76088: LD_VAR 0 1
76092: PUSH
76093: FOR_IN
76094: IFFALSE 76132
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76096: LD_ADDR_VAR 0 5
76100: PUSH
76101: LD_VAR 0 5
76105: PPUSH
76106: LD_VAR 0 5
76110: PUSH
76111: LD_INT 1
76113: PLUS
76114: PPUSH
76115: LD_VAR 0 4
76119: PPUSH
76120: CALL_OW 256
76124: PPUSH
76125: CALL_OW 2
76129: ST_TO_ADDR
76130: GO 76093
76132: POP
76133: POP
// if not tmp then
76134: LD_VAR 0 5
76138: NOT
76139: IFFALSE 76143
// exit ;
76141: GO 76191
// if asc then
76143: LD_VAR 0 2
76147: IFFALSE 76171
// result := SortListByListAsc ( units , tmp ) else
76149: LD_ADDR_VAR 0 3
76153: PUSH
76154: LD_VAR 0 1
76158: PPUSH
76159: LD_VAR 0 5
76163: PPUSH
76164: CALL_OW 76
76168: ST_TO_ADDR
76169: GO 76191
// result := SortListByListDesc ( units , tmp ) ;
76171: LD_ADDR_VAR 0 3
76175: PUSH
76176: LD_VAR 0 1
76180: PPUSH
76181: LD_VAR 0 5
76185: PPUSH
76186: CALL_OW 77
76190: ST_TO_ADDR
// end ;
76191: LD_VAR 0 3
76195: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76196: LD_INT 0
76198: PPUSH
76199: PPUSH
// task := GetTaskList ( mech ) ;
76200: LD_ADDR_VAR 0 4
76204: PUSH
76205: LD_VAR 0 1
76209: PPUSH
76210: CALL_OW 437
76214: ST_TO_ADDR
// if not task then
76215: LD_VAR 0 4
76219: NOT
76220: IFFALSE 76224
// exit ;
76222: GO 76266
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76224: LD_ADDR_VAR 0 3
76228: PUSH
76229: LD_VAR 0 4
76233: PUSH
76234: LD_INT 1
76236: ARRAY
76237: PUSH
76238: LD_INT 1
76240: ARRAY
76241: PUSH
76242: LD_STRING r
76244: EQUAL
76245: PUSH
76246: LD_VAR 0 4
76250: PUSH
76251: LD_INT 1
76253: ARRAY
76254: PUSH
76255: LD_INT 4
76257: ARRAY
76258: PUSH
76259: LD_VAR 0 2
76263: EQUAL
76264: AND
76265: ST_TO_ADDR
// end ;
76266: LD_VAR 0 3
76270: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76271: LD_INT 0
76273: PPUSH
// SetDir ( unit , d ) ;
76274: LD_VAR 0 1
76278: PPUSH
76279: LD_VAR 0 4
76283: PPUSH
76284: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76288: LD_VAR 0 1
76292: PPUSH
76293: LD_VAR 0 2
76297: PPUSH
76298: LD_VAR 0 3
76302: PPUSH
76303: LD_VAR 0 5
76307: PPUSH
76308: CALL_OW 48
// end ;
76312: LD_VAR 0 6
76316: RET
// export function ToNaturalNumber ( number ) ; begin
76317: LD_INT 0
76319: PPUSH
// result := number div 1 ;
76320: LD_ADDR_VAR 0 2
76324: PUSH
76325: LD_VAR 0 1
76329: PUSH
76330: LD_INT 1
76332: DIV
76333: ST_TO_ADDR
// if number < 0 then
76334: LD_VAR 0 1
76338: PUSH
76339: LD_INT 0
76341: LESS
76342: IFFALSE 76352
// result := 0 ;
76344: LD_ADDR_VAR 0 2
76348: PUSH
76349: LD_INT 0
76351: ST_TO_ADDR
// end ;
76352: LD_VAR 0 2
76356: RET
// export function SortByClass ( units , class ) ; var un ; begin
76357: LD_INT 0
76359: PPUSH
76360: PPUSH
// if not units or not class then
76361: LD_VAR 0 1
76365: NOT
76366: PUSH
76367: LD_VAR 0 2
76371: NOT
76372: OR
76373: IFFALSE 76377
// exit ;
76375: GO 76472
// result := [ ] ;
76377: LD_ADDR_VAR 0 3
76381: PUSH
76382: EMPTY
76383: ST_TO_ADDR
// for un in units do
76384: LD_ADDR_VAR 0 4
76388: PUSH
76389: LD_VAR 0 1
76393: PUSH
76394: FOR_IN
76395: IFFALSE 76470
// if GetClass ( un ) = class then
76397: LD_VAR 0 4
76401: PPUSH
76402: CALL_OW 257
76406: PUSH
76407: LD_VAR 0 2
76411: EQUAL
76412: IFFALSE 76439
// result := Insert ( result , 1 , un ) else
76414: LD_ADDR_VAR 0 3
76418: PUSH
76419: LD_VAR 0 3
76423: PPUSH
76424: LD_INT 1
76426: PPUSH
76427: LD_VAR 0 4
76431: PPUSH
76432: CALL_OW 2
76436: ST_TO_ADDR
76437: GO 76468
// result := Replace ( result , result + 1 , un ) ;
76439: LD_ADDR_VAR 0 3
76443: PUSH
76444: LD_VAR 0 3
76448: PPUSH
76449: LD_VAR 0 3
76453: PUSH
76454: LD_INT 1
76456: PLUS
76457: PPUSH
76458: LD_VAR 0 4
76462: PPUSH
76463: CALL_OW 1
76467: ST_TO_ADDR
76468: GO 76394
76470: POP
76471: POP
// end ;
76472: LD_VAR 0 3
76476: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76477: LD_INT 0
76479: PPUSH
76480: PPUSH
76481: PPUSH
76482: PPUSH
76483: PPUSH
76484: PPUSH
76485: PPUSH
// result := [ ] ;
76486: LD_ADDR_VAR 0 4
76490: PUSH
76491: EMPTY
76492: ST_TO_ADDR
// if x - r < 0 then
76493: LD_VAR 0 1
76497: PUSH
76498: LD_VAR 0 3
76502: MINUS
76503: PUSH
76504: LD_INT 0
76506: LESS
76507: IFFALSE 76519
// min_x := 0 else
76509: LD_ADDR_VAR 0 8
76513: PUSH
76514: LD_INT 0
76516: ST_TO_ADDR
76517: GO 76535
// min_x := x - r ;
76519: LD_ADDR_VAR 0 8
76523: PUSH
76524: LD_VAR 0 1
76528: PUSH
76529: LD_VAR 0 3
76533: MINUS
76534: ST_TO_ADDR
// if y - r < 0 then
76535: LD_VAR 0 2
76539: PUSH
76540: LD_VAR 0 3
76544: MINUS
76545: PUSH
76546: LD_INT 0
76548: LESS
76549: IFFALSE 76561
// min_y := 0 else
76551: LD_ADDR_VAR 0 7
76555: PUSH
76556: LD_INT 0
76558: ST_TO_ADDR
76559: GO 76577
// min_y := y - r ;
76561: LD_ADDR_VAR 0 7
76565: PUSH
76566: LD_VAR 0 2
76570: PUSH
76571: LD_VAR 0 3
76575: MINUS
76576: ST_TO_ADDR
// max_x := x + r ;
76577: LD_ADDR_VAR 0 9
76581: PUSH
76582: LD_VAR 0 1
76586: PUSH
76587: LD_VAR 0 3
76591: PLUS
76592: ST_TO_ADDR
// max_y := y + r ;
76593: LD_ADDR_VAR 0 10
76597: PUSH
76598: LD_VAR 0 2
76602: PUSH
76603: LD_VAR 0 3
76607: PLUS
76608: ST_TO_ADDR
// for _x = min_x to max_x do
76609: LD_ADDR_VAR 0 5
76613: PUSH
76614: DOUBLE
76615: LD_VAR 0 8
76619: DEC
76620: ST_TO_ADDR
76621: LD_VAR 0 9
76625: PUSH
76626: FOR_TO
76627: IFFALSE 76728
// for _y = min_y to max_y do
76629: LD_ADDR_VAR 0 6
76633: PUSH
76634: DOUBLE
76635: LD_VAR 0 7
76639: DEC
76640: ST_TO_ADDR
76641: LD_VAR 0 10
76645: PUSH
76646: FOR_TO
76647: IFFALSE 76724
// begin if not ValidHex ( _x , _y ) then
76649: LD_VAR 0 5
76653: PPUSH
76654: LD_VAR 0 6
76658: PPUSH
76659: CALL_OW 488
76663: NOT
76664: IFFALSE 76668
// continue ;
76666: GO 76646
// if GetResourceTypeXY ( _x , _y ) then
76668: LD_VAR 0 5
76672: PPUSH
76673: LD_VAR 0 6
76677: PPUSH
76678: CALL_OW 283
76682: IFFALSE 76722
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76684: LD_ADDR_VAR 0 4
76688: PUSH
76689: LD_VAR 0 4
76693: PPUSH
76694: LD_VAR 0 4
76698: PUSH
76699: LD_INT 1
76701: PLUS
76702: PPUSH
76703: LD_VAR 0 5
76707: PUSH
76708: LD_VAR 0 6
76712: PUSH
76713: EMPTY
76714: LIST
76715: LIST
76716: PPUSH
76717: CALL_OW 1
76721: ST_TO_ADDR
// end ;
76722: GO 76646
76724: POP
76725: POP
76726: GO 76626
76728: POP
76729: POP
// end ;
76730: LD_VAR 0 4
76734: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76735: LD_INT 0
76737: PPUSH
76738: PPUSH
76739: PPUSH
76740: PPUSH
76741: PPUSH
76742: PPUSH
76743: PPUSH
76744: PPUSH
// if not units then
76745: LD_VAR 0 1
76749: NOT
76750: IFFALSE 76754
// exit ;
76752: GO 77179
// result := UnitFilter ( units , [ f_ok ] ) ;
76754: LD_ADDR_VAR 0 3
76758: PUSH
76759: LD_VAR 0 1
76763: PPUSH
76764: LD_INT 50
76766: PUSH
76767: EMPTY
76768: LIST
76769: PPUSH
76770: CALL_OW 72
76774: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76775: LD_ADDR_VAR 0 8
76779: PUSH
76780: LD_VAR 0 1
76784: PUSH
76785: LD_INT 1
76787: ARRAY
76788: PPUSH
76789: CALL_OW 255
76793: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
76794: LD_ADDR_VAR 0 10
76798: PUSH
76799: LD_INT 29
76801: PUSH
76802: LD_EXP 52
76806: PUSH
76807: EMPTY
76808: LIST
76809: LIST
76810: ST_TO_ADDR
// if not result then
76811: LD_VAR 0 3
76815: NOT
76816: IFFALSE 76820
// exit ;
76818: GO 77179
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76820: LD_ADDR_VAR 0 5
76824: PUSH
76825: LD_INT 81
76827: PUSH
76828: LD_VAR 0 8
76832: PUSH
76833: EMPTY
76834: LIST
76835: LIST
76836: PPUSH
76837: CALL_OW 69
76841: ST_TO_ADDR
// for i in result do
76842: LD_ADDR_VAR 0 4
76846: PUSH
76847: LD_VAR 0 3
76851: PUSH
76852: FOR_IN
76853: IFFALSE 77177
// begin tag := GetTag ( i ) + 1 ;
76855: LD_ADDR_VAR 0 9
76859: PUSH
76860: LD_VAR 0 4
76864: PPUSH
76865: CALL_OW 110
76869: PUSH
76870: LD_INT 1
76872: PLUS
76873: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76874: LD_ADDR_VAR 0 7
76878: PUSH
76879: LD_VAR 0 4
76883: PPUSH
76884: CALL_OW 250
76888: PPUSH
76889: LD_VAR 0 4
76893: PPUSH
76894: CALL_OW 251
76898: PPUSH
76899: LD_INT 6
76901: PPUSH
76902: CALL 76477 0 3
76906: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76907: LD_VAR 0 7
76911: PUSH
76912: LD_VAR 0 4
76916: PPUSH
76917: CALL_OW 264
76921: PUSH
76922: LD_VAR 0 10
76926: IN
76927: NOT
76928: AND
76929: IFFALSE 76968
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76931: LD_VAR 0 4
76935: PPUSH
76936: LD_VAR 0 7
76940: PUSH
76941: LD_INT 1
76943: ARRAY
76944: PUSH
76945: LD_INT 1
76947: ARRAY
76948: PPUSH
76949: LD_VAR 0 7
76953: PUSH
76954: LD_INT 1
76956: ARRAY
76957: PUSH
76958: LD_INT 2
76960: ARRAY
76961: PPUSH
76962: CALL_OW 116
76966: GO 77175
// if path > tag then
76968: LD_VAR 0 2
76972: PUSH
76973: LD_VAR 0 9
76977: GREATER
76978: IFFALSE 77145
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
76980: LD_ADDR_VAR 0 6
76984: PUSH
76985: LD_VAR 0 5
76989: PPUSH
76990: LD_INT 91
76992: PUSH
76993: LD_VAR 0 4
76997: PUSH
76998: LD_INT 12
77000: PUSH
77001: EMPTY
77002: LIST
77003: LIST
77004: LIST
77005: PPUSH
77006: CALL_OW 72
77010: ST_TO_ADDR
// if nearEnemy then
77011: LD_VAR 0 6
77015: IFFALSE 77043
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77017: LD_VAR 0 4
77021: PPUSH
77022: LD_VAR 0 6
77026: PPUSH
77027: LD_VAR 0 4
77031: PPUSH
77032: CALL_OW 74
77036: PPUSH
77037: CALL_OW 115
77041: GO 77143
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77043: LD_VAR 0 4
77047: PPUSH
77048: LD_VAR 0 2
77052: PUSH
77053: LD_VAR 0 9
77057: ARRAY
77058: PUSH
77059: LD_INT 1
77061: ARRAY
77062: PPUSH
77063: LD_VAR 0 2
77067: PUSH
77068: LD_VAR 0 9
77072: ARRAY
77073: PUSH
77074: LD_INT 2
77076: ARRAY
77077: PPUSH
77078: CALL_OW 297
77082: PUSH
77083: LD_INT 6
77085: GREATER
77086: IFFALSE 77129
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77088: LD_VAR 0 4
77092: PPUSH
77093: LD_VAR 0 2
77097: PUSH
77098: LD_VAR 0 9
77102: ARRAY
77103: PUSH
77104: LD_INT 1
77106: ARRAY
77107: PPUSH
77108: LD_VAR 0 2
77112: PUSH
77113: LD_VAR 0 9
77117: ARRAY
77118: PUSH
77119: LD_INT 2
77121: ARRAY
77122: PPUSH
77123: CALL_OW 114
77127: GO 77143
// SetTag ( i , tag ) ;
77129: LD_VAR 0 4
77133: PPUSH
77134: LD_VAR 0 9
77138: PPUSH
77139: CALL_OW 109
// end else
77143: GO 77175
// if enemy then
77145: LD_VAR 0 5
77149: IFFALSE 77175
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77151: LD_VAR 0 4
77155: PPUSH
77156: LD_VAR 0 5
77160: PPUSH
77161: LD_VAR 0 4
77165: PPUSH
77166: CALL_OW 74
77170: PPUSH
77171: CALL_OW 115
// end ;
77175: GO 76852
77177: POP
77178: POP
// end ;
77179: LD_VAR 0 3
77183: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77184: LD_INT 0
77186: PPUSH
77187: PPUSH
77188: PPUSH
// if not unit or IsInUnit ( unit ) then
77189: LD_VAR 0 1
77193: NOT
77194: PUSH
77195: LD_VAR 0 1
77199: PPUSH
77200: CALL_OW 310
77204: OR
77205: IFFALSE 77209
// exit ;
77207: GO 77300
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77209: LD_ADDR_VAR 0 4
77213: PUSH
77214: LD_VAR 0 1
77218: PPUSH
77219: CALL_OW 250
77223: PPUSH
77224: LD_VAR 0 2
77228: PPUSH
77229: LD_INT 1
77231: PPUSH
77232: CALL_OW 272
77236: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77237: LD_ADDR_VAR 0 5
77241: PUSH
77242: LD_VAR 0 1
77246: PPUSH
77247: CALL_OW 251
77251: PPUSH
77252: LD_VAR 0 2
77256: PPUSH
77257: LD_INT 1
77259: PPUSH
77260: CALL_OW 273
77264: ST_TO_ADDR
// if ValidHex ( x , y ) then
77265: LD_VAR 0 4
77269: PPUSH
77270: LD_VAR 0 5
77274: PPUSH
77275: CALL_OW 488
77279: IFFALSE 77300
// ComTurnXY ( unit , x , y ) ;
77281: LD_VAR 0 1
77285: PPUSH
77286: LD_VAR 0 4
77290: PPUSH
77291: LD_VAR 0 5
77295: PPUSH
77296: CALL_OW 118
// end ;
77300: LD_VAR 0 3
77304: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77305: LD_INT 0
77307: PPUSH
77308: PPUSH
// result := false ;
77309: LD_ADDR_VAR 0 3
77313: PUSH
77314: LD_INT 0
77316: ST_TO_ADDR
// if not units then
77317: LD_VAR 0 2
77321: NOT
77322: IFFALSE 77326
// exit ;
77324: GO 77371
// for i in units do
77326: LD_ADDR_VAR 0 4
77330: PUSH
77331: LD_VAR 0 2
77335: PUSH
77336: FOR_IN
77337: IFFALSE 77369
// if See ( side , i ) then
77339: LD_VAR 0 1
77343: PPUSH
77344: LD_VAR 0 4
77348: PPUSH
77349: CALL_OW 292
77353: IFFALSE 77367
// begin result := true ;
77355: LD_ADDR_VAR 0 3
77359: PUSH
77360: LD_INT 1
77362: ST_TO_ADDR
// exit ;
77363: POP
77364: POP
77365: GO 77371
// end ;
77367: GO 77336
77369: POP
77370: POP
// end ;
77371: LD_VAR 0 3
77375: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77376: LD_INT 0
77378: PPUSH
77379: PPUSH
77380: PPUSH
77381: PPUSH
// if not unit or not points then
77382: LD_VAR 0 1
77386: NOT
77387: PUSH
77388: LD_VAR 0 2
77392: NOT
77393: OR
77394: IFFALSE 77398
// exit ;
77396: GO 77488
// dist := 99999 ;
77398: LD_ADDR_VAR 0 5
77402: PUSH
77403: LD_INT 99999
77405: ST_TO_ADDR
// for i in points do
77406: LD_ADDR_VAR 0 4
77410: PUSH
77411: LD_VAR 0 2
77415: PUSH
77416: FOR_IN
77417: IFFALSE 77486
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77419: LD_ADDR_VAR 0 6
77423: PUSH
77424: LD_VAR 0 1
77428: PPUSH
77429: LD_VAR 0 4
77433: PUSH
77434: LD_INT 1
77436: ARRAY
77437: PPUSH
77438: LD_VAR 0 4
77442: PUSH
77443: LD_INT 2
77445: ARRAY
77446: PPUSH
77447: CALL_OW 297
77451: ST_TO_ADDR
// if tmpDist < dist then
77452: LD_VAR 0 6
77456: PUSH
77457: LD_VAR 0 5
77461: LESS
77462: IFFALSE 77484
// begin result := i ;
77464: LD_ADDR_VAR 0 3
77468: PUSH
77469: LD_VAR 0 4
77473: ST_TO_ADDR
// dist := tmpDist ;
77474: LD_ADDR_VAR 0 5
77478: PUSH
77479: LD_VAR 0 6
77483: ST_TO_ADDR
// end ; end ;
77484: GO 77416
77486: POP
77487: POP
// end ; end_of_file
77488: LD_VAR 0 3
77492: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77493: LD_VAR 0 1
77497: PUSH
77498: LD_INT 200
77500: DOUBLE
77501: GREATEREQUAL
77502: IFFALSE 77510
77504: LD_INT 299
77506: DOUBLE
77507: LESSEQUAL
77508: IFTRUE 77512
77510: GO 77544
77512: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77513: LD_VAR 0 1
77517: PPUSH
77518: LD_VAR 0 2
77522: PPUSH
77523: LD_VAR 0 3
77527: PPUSH
77528: LD_VAR 0 4
77532: PPUSH
77533: LD_VAR 0 5
77537: PPUSH
77538: CALL 33519 0 5
77542: GO 77621
77544: LD_INT 300
77546: DOUBLE
77547: GREATEREQUAL
77548: IFFALSE 77556
77550: LD_INT 399
77552: DOUBLE
77553: LESSEQUAL
77554: IFTRUE 77558
77556: GO 77620
77558: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77559: LD_VAR 0 1
77563: PPUSH
77564: LD_VAR 0 2
77568: PPUSH
77569: LD_VAR 0 3
77573: PPUSH
77574: LD_VAR 0 4
77578: PPUSH
77579: LD_VAR 0 5
77583: PPUSH
77584: LD_VAR 0 6
77588: PPUSH
77589: LD_VAR 0 7
77593: PPUSH
77594: LD_VAR 0 8
77598: PPUSH
77599: LD_VAR 0 9
77603: PPUSH
77604: LD_VAR 0 10
77608: PPUSH
77609: LD_VAR 0 11
77613: PPUSH
77614: CALL 31417 0 11
77618: GO 77621
77620: POP
// end ;
77621: PPOPN 11
77623: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77624: LD_VAR 0 1
77628: PPUSH
77629: LD_VAR 0 2
77633: PPUSH
77634: LD_VAR 0 3
77638: PPUSH
77639: LD_VAR 0 4
77643: PPUSH
77644: LD_VAR 0 5
77648: PPUSH
77649: CALL 33511 0 5
// end ; end_of_file
77653: PPOPN 5
77655: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77656: LD_VAR 0 1
77660: PPUSH
77661: LD_VAR 0 2
77665: PPUSH
77666: LD_VAR 0 3
77670: PPUSH
77671: LD_VAR 0 4
77675: PPUSH
77676: LD_VAR 0 5
77680: PPUSH
77681: LD_VAR 0 6
77685: PPUSH
77686: CALL 19612 0 6
// end ;
77690: PPOPN 6
77692: END
